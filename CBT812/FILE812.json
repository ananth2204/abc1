{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012846000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 3115658, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE812.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 3115658, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 3115658, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE812.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x000\\x08'", "DS1TRBAL": "b'Bh'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05\\x90\\x00\\x02\\x05\\x93\\x00\\x05\\x001'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t%\\x0f\\x01\\t%\\x0f\\x10\\x16\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-09-07T00:00:00", "modifydate": "2009-09-07T10:16:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-478"}, "text": "REGULAR CBT TAPE - VERSION 478    FILE:  812\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT478.FILE812\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 10 MEMBERS COUNTED; CUMULATIVE SIZE IS 29,138 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   09/07/09    10:16:34    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$PDSLOAD": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x06\\x00\\x16\\x01\\x026_\\x01\\t%\\x0f\\x10\\x12\\x00'\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.06", "flags": 0, "createdate": "2002-12-31T00:00:00", "modifydate": "2009-09-07T10:12:16", "lines": 39, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL JOB (ACCT#),PDSLOAD,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*    PDSLOAD JOB TO CREATE INSTALL LIBRARIES\n//*\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n   RECEIVE INDS('SBGOLOB.CBT478.FILE812(PDSLOAD)')\n   DSN (yourid.your.loadlib) VOL(volser)\n/*\n//*\n//PDSLOAD PROC IPDS='SBGOLOB.CBT478.FILE812',      <=== CHANGE\n//             OPRE=SBGOLOB,\n//             QUAL=DISASM,\n//             MEMB=XXX,\n//             OUNT=SYSALLDA,\n//             OVL=DATA04,\n//             DSP1=NEW,\n//             DSP2=CATLG,\n//             DSP3='',\n//             P=30,S=60,D=44\n//*\n//LOAD   EXEC PGM=PDSLOAD\n//STEPLIB  DD DISP=SHR,DSN=yourid.your.loadlib\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DISP=SHR,DSN=&IPDS(&MEMB)\n//SYSUT2   DD UNIT=&OUNT,VOL=SER=&OVL,\n//             DSN=&OPRE..&QUAL..&MEMB,\n//             DISP=(&DSP1,&DSP2&DSP3),\n//             SPACE=(TRK,(&P,&S,&D),RLSE)\n//  PEND\n//*\n//S001 EXEC PDSLOAD,MEMB=ISPPLIB\n//S002 EXEC PDSLOAD,MEMB=JCL\n//S003 EXEC PDSLOAD,MEMB=MACLIB\n//S004 EXEC PDSLOAD,MEMB=REXX\n//S005 EXEC PDSLOAD,MEMB=SOURCE\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$PDSLSBG": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x07\\x00S\\x01\\x026_\\x01\\t%\\x0f\\x10\\x14\\x00'\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.07", "flags": 0, "createdate": "2002-12-31T00:00:00", "modifydate": "2009-09-07T10:14:53", "lines": 39, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL JOB (ACCT#),PDSLOAD,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*    PDSLOAD JOB TO CREATE INSTALL LIBRARIES\n//*\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n   RECEIVE INDS('SBGOLOB.CBT478.FILE812(PDSLOAD)')\n   DSN (SBGOLOB.TEMP.PDSLOAD) VOL(WORKE1)\n/*\n//*\n//PDSLOAD PROC IPDS='SBGOLOB.CBT478.FILE812',      <=== CHANGE\n//             OPRE=SBGOLOB,\n//             QUAL=DISASM,\n//             MEMB=XXX,\n//             OUNT=SYSALLDA,\n//             OVL=DATA04,\n//             DSP1=NEW,\n//             DSP2=CATLG,\n//             DSP3='',\n//             P=30,S=60,D=44\n//*\n//LOAD   EXEC PGM=PDSLOAD\n//STEPLIB  DD DISP=SHR,DSN=SBGOLOB.TEMP.PDSLOAD\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DISP=SHR,DSN=&IPDS(&MEMB)\n//SYSUT2   DD UNIT=&OUNT,VOL=SER=&OVL,\n//             DSN=&OPRE..&QUAL..&MEMB,\n//             DISP=(&DSP1,&DSP2&DSP3),\n//             SPACE=(TRK,(&P,&S,&D),RLSE)\n//  PEND\n//*\n//S001 EXEC PDSLOAD,MEMB=ISPPLIB\n//S002 EXEC PDSLOAD,MEMB=JCL\n//S003 EXEC PDSLOAD,MEMB=MACLIB\n//S004 EXEC PDSLOAD,MEMB=REXX\n//S005 EXEC PDSLOAD,MEMB=SOURCE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE812": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t%\\x0f\\x01\\t%\\x0f\\x10\\x16\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-09-07T00:00:00", "modifydate": "2009-09-07T10:16:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "CBT-478"}, "text": "//***FILE 812 is a fixed version of a Disassembler from Richard     *   FILE 812\n//*           L. Rice, which was on File 171.                       *   FILE 812\n//*                                                                 *   FILE 812\n//*       DISASM  -  A REDESIGN OF THE DISASSEMBLER ON              *   FILE 812\n//*                  FILE 217, BUT BROKEN INTO CSECTS.  THIS        *   FILE 812\n//*                  DISASSEMBLER CALLS THE ASSEMBLER AND           *   FILE 812\n//*                  ALLOWS YOU TO USE REAL MACROS AND THEIR        *   FILE 812\n//*                  DSECTS FOR LABEL MAPPING.                      *   FILE 812\n//*                                                                 *   FILE 812\n//*           email:  Richard.L.Rice@conocophillips.com             *   FILE 812\n//*                                                                 *   FILE 812\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ISPPLIB": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\t%\\x0f\\x01\\t%\\x0f\\x10\\x05\\x03\\xa1\\x03\\xa1\\x00\\x00\\xc4\\xc9\\xe2\\xc1\\xe2\\xd4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-09-07T00:00:00", "modifydate": "2009-09-07T10:05:00", "lines": 929, "newlines": 929, "modlines": 0, "user": "DISASM"}, "text": "./ ADD NAME=DISBDATA 0106-09006-09128-1037-00030-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN   $LDSN                                                 %VOLSER    $LVOL\n%LMOD  $LMOD       %CSECT $LCSECT\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n@PMSG5                                                                         +\n%   BEGIN         END         REF-DISP     REG                                 +\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=DISBROWS 0100-09002-09002-1418-00023-00023-00000-ISPPLIB\n)BODY WIDTH(&ZWIDTH) EXPAND(//)\n%----------------------------------------------/-/---%LINE!ZLINES  %COL!ZCOLUMS+\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_Z   +\n|ZDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n  .ZVARS = 'ZSCBR'         /* SCROLL AMT VARIABLE NAME  */\n  &MIXED = MIX\n  IF (&ZPDMIX = N)         /* EBCDIC MODE REQUESTED     */\n    &MIXED = EBCDIC\n  &ZCMD = &BCMD\n\n)REINIT\n  REFRESH(ZCMD,ZSCBR,ZDATA,ZLINES,ZCOLUMS)\n  .ATTRCHAR(+) = 'INTENS(&ZINTEN)'\n\n)PROC\n  &ZCURSOR = .CURSOR\n  &ZCSROFF = .CSRPOS\n  &ZLVLINE = LVLINE(ZDATA)\n\n)END\n./ ADD NAME=DISCONF  0106-09014-09015-1630-00033-00033-00000-ISPPLIB\n)PANEL\n)ATTR\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  # TYPE(TEXT)    INTENS(HIGH) COLOR(RED)\n  $ TYPE(TEXT)    INTENS(HIGH) COLOR(YELLOW)\n  ^ TYPE(TEXT)    INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW)\n%COMMAND=>_ZCMD\n+\n#                        Disassembler\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4\n@PMSG5\n+\n+\n+\n$             Save or restore config info\n+\n+\n+\n            %DSN:    _CDSN                                       +\n            %MEMBER: _CMEM    +\n            %VOLSER: _CVOL  +\n\n            ^Function_F^       (R for Restore or S for Save)\n\n)INIT\n)REINIT\n  REFRESH(ZCMD,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5)\n)END\n./ ADD NAME=DISDDATA 0108-09005-09191-0905-00030-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN   $LDSN                                                 %VOLSER    $LVOL\n%LMOD  $LMOD       %CSECT $LCSECT     %LENGTH $LLEN\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n@PMSG5                                                                         +\n%        BEGIN         END       LENGTH                                        +\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=DISDDSCT 0102-09033-09128-1045-00031-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS) COLOR(YELLOW)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n 07 TYPE(DATAOUT) INTENS(HIGH) COLOR(GREEN)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN      $LDSN                                              %VOLSER    $LVOLSER\n%MEMBER   $LMOD\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n@PMSG5                                                                         +\n%            Select a DSECT or LABEL\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=DISDMENU 0101-09034-09128-1044-00030-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN   $LDSN                                                 %VOLSER    $LVOL\n%LMOD  $LMOD       %CSECT $LCSECT\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n%   Select a DSECT                                                             +\n%                                                                              +\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=DISESD   0107-08366-09033-0903-00030-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN   $LDSN                                                 %VOLSER    $LVOL\n%LMOD  $LMOD       %CSECT $LCSECT\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n@PMSG5                                                                         +\n%NAME     TY QL  *------ LENGTH --------* ELEM-OFF  CLS-OFF  RESIDENT  TARGET +\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=DISKDATA 0105-09007-09128-1039-00030-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN   $LDSN                                                 %VOLSER    $LVOL\n%LMOD  $LMOD       %CSECT $LCSECT\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n@PMSG5                                                                         +\n%  ------------ KSDS DSN ----------------------                                +\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=DISKMENU 0101-09034-09128-1042-00030-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN   $LDSN                                                 %VOLSER    $LVOL\n%LMOD  $LMOD       %CSECT $LCSECT\n@PMSG1\n@PMSG2\n@PMSG3\n%              Select source                                                   +\n%                                                                              +\n% _F%DSECTs defined via assembler source (option A)                            +\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=DISLDATA 0103-09007-09177-1522-00030-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN   $LDSN                                                  %VOLSER    $LVOL\n%LMOD  $LMOD       %CSECT $LCSECT\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n@PMSG5                                                                         +\n%             KSDS DSN                                                         +\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=DISLMENU 0102-09035-09128-1045-00030-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN   $LDSN                                                 %VOLSER    $LVOL\n%LMOD  $LMOD       %CSECT $LCSECT\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n%   Select a LABEL   (Press PF3 to use DSECT name on USING)                    +\n%                                                                              +\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=DISMENU  0118-08366-09191-0904-00041-00028-00000-ISPPLIB\n)PANEL\n)ATTR\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF)\n  + TYPE(TEXT)    INTENS(LOW)\n  # TYPE(TEXT)    INTENS(HIGH)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n  ^ TYPE(INPUT)   INTENS(HIGH) CAPS(OFF)   JUST(ASIS)\n)BODY WIDTH(&ZSCREENW)\n%COMMAND=>_ZCMD\n+\n+                       #Disassembler\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4\n@PMSG5\n+\n+                      %DSN    @LDSN\n+                      %LMOD   @LMOD\n+                      %CSECT  @LCSECT\n+                      %LENGTH @LLEN\n+\n+\n%                       Enter function:_F+\n+\n                          #A    +Define DSECTs via assembler source\n                          #B    +BASEs\n                          #C    +Saved configs\n                          #D    +USER defined data area(s)\n                          #E    +ESD info\n                          #G    +Generate source\n                          #K    +Pre-processed DSECT KSDSes\n                          #O    +Set options (Opcode table, label prefix)\n                          #R    +RLD info\n                          #S    +SYSLIBs\n                          #T    +TEXT\n                          #U    +USINGs\n)INIT\n)REINIT\n  REFRESH(ZCMD,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5)\n)END\n./ ADD NAME=DISNDATA 0104-09008-09118-1422-00030-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS) COLOR(YELLOW)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN      $LDSN                                              %VOLSER    $LVOLSER\n%MEMBER   $LMOD\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n@PMSG5                                                                         +\n%            Select a CSECT\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=DISOPTS  0103-09015-09117-1558-00037-00039-00000-ISPPLIB\n)PANEL\n)ATTR\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF)\n  + TYPE(TEXT)    INTENS(LOW)\n  # TYPE(TEXT)    INTENS(HIGH)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n  ^ TYPE(TEXT)    INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW)\n%COMMAND=>_ZCMD\n+                       #Disassembler\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4\n@PMSG5\n+\n+        %DSN   @LDSN\n+        %LMOD  @LMEMBER\n+        %CSECT @LCSECT\n+\n+\n%        Select OPCODE table:      _F+\n+\n         ^1+...  Basic instructions\n         ^2+...  Basic plus floating point\n         ^3+...  Basic plus \"B2\"\n         ^4+...  Basic, floating point, and \"B2\"\n         ^5+...  \"Z\" instructions\n+\n+\n%        Generated label prefix:   _PRFX+\n+\n%        Write generated source to:_ODSN\n)INIT\n)REINIT\n  REFRESH(ZCMD,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5)\n)END\n./ ADD NAME=DISOPTS1 0102-09117-09128-1040-00036-00037-00000-ISPPLIB\n)PANEL\n)ATTR\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF)\n  + TYPE(TEXT)    INTENS(LOW)\n  # TYPE(TEXT)    INTENS(HIGH)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n  ^ TYPE(TEXT)    INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW)\n%COMMAND=>_ZCMD\n+                       #Disassembler\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4\n@PMSG5\n+\n+        %DSN   @LDSN\n+        %LMOD  @LMOD\n+        %CSECT @LCSECT\n+\n+\n         ^1+...  Basic instructions\n         ^2+...  Basic plus floating point\n         ^3+...  Basic plus \"B2\"\n         ^4+...  Basic, floating point, and \"B2\"\n         ^5+...  \"Z\" instructions\n+\n%        Select OPCODE table:      _F+\n+\n%        Generated label prefix:   _PRFX+\n+\n%        Write generated source to:_ODSN\n)INIT\n)REINIT\n  REFRESH(ZCMD,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5)\n)END\n./ ADD NAME=DISOPTS2 0103-09117-09128-1040-00038-00038-00000-ISPPLIB\n)PANEL\n)ATTR\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF)\n  + TYPE(TEXT)    INTENS(LOW)\n  # TYPE(TEXT)    INTENS(HIGH)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n  ^ TYPE(TEXT)    INTENS(HIGH) COLOR(TURQUOISE)\n  ! TYPE(OUTPUT)  INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW)\n%COMMAND=>_ZCMD\n+                       #Disassembler\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4\n@PMSG5\n+\n+        %DSN   @LDSN\n+        %LMOD  @LMOD\n+        %CSECT @LCSECT\n+\n+\n         ^1+...  Basic instructions\n         ^2+...  Basic plus floating point\n         ^3+...  Basic plus \"B2\"\n         ^4+...  Basic, floating point, and \"B2\"\n         ^5+...  \"Z\" instructions\n+\n+\n%        Select OPCODE table:      _F+\n+\n%        Generated label prefix:   _PRFX+\n+\n%        Write generated source to:!ODSN\n)INIT\n)REINIT\n  REFRESH(ZCMD,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5)\n)END\n./ ADD NAME=DISRLD   0104-08366-09015-1413-00030-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN   $LDSN                                                 %VOLSER    $LVOL\n%LMOD  $LMOD       %CSECT $LCSECT\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n@PMSG5                                                                         +\n+\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=DISSDATA 0102-09009-09128-1041-00030-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN   $LDSN                                                 %VOLSER    $LVOL\n%LMOD  $LMOD       %CSECT $LCSECT\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n@PMSG5                                                                         +\n%  ------------ SYSLIB DSN --------------------                                +\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=DISTDATA 0105-09118-09133-1622-00030-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                           %SCROLL   ==>_VSCR+\n%DSN   $LDSN                                                 %VOLSER   $LVOL\n%LMOD  $LMOD                   %CSECT $LCSECT                %LENGTH   $LLEN\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n@PMSG5                                                                         +\n%---------------------------------- TEXT -------------------------------       +\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=DISTDBUG 0101-09023-09128-1046-00030-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN   $LDSN                                                 %VOLSER    $LVOL\n%LMOD  $LMOD       %CSECT $LCSECT\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n@PMSG5                                                                         +\n%                       DEBUG                                                  +\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=DISUDATA 0102-09029-09177-1530-00031-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n 07 TYPE(DATAOUT) INTENS(HIGH) COLOR(GREEN)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN   $LDSN                                                  %VOLSER   $LVOL\n%LMOD  $LMOD       %CSECT $LCSECT\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n@PMSG5                                                                         +\n%                        USING(S)                                              +\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=DISUREGD 0100-09111-09111-1017-00028-00028-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN   $LDSN                                                 %VOLSER    $LVOL\n%LMOD  $LMOD\n%CSECT $LCSECT\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n@PMSG5                                                                         +\n%             Specify base, start and end disp in effect                       +\n+\n+\n+\n+\n+\n%                    Base register _PR +\n%                    Start disp    _PBEGIN  +\n%                    End disp      _PEND    +\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)END\n./ ADD NAME=DISXDATA 0105-09023-09128-1046-00031-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n 07 TYPE(DATAOUT) INTENS(HIGH) COLOR(GREEN)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN   $LDSN                                                 %VOLSER    $LVOL\n%LMOD  $LMOD       %CSECT $LCSECT\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n@PMSG5                                                                         +\n%  ADDR     PREV     NEXT     BEGIN    END     LENGTH  TYPE  RLD NAME          +\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=DIS0000  0103-08352-09015-1414-00021-00020-00000-ISPPLIB\n)PANEL\n)ATTR\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  # TYPE(TEXT)    INTENS(HIGH) COLOR(RED)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n  ^ TYPE(INPUT)   INTENS(HIGH) CAPS(OFF)   JUST(ASIS)\n)BODY WIDTH(&ZSCREENW)\n%COMMAND=>_ZCMD\n+\n+                       #Disassembler\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4\n@PMSG5\n+\n+\n@ZERRLM\n+\n)END\n./ ADD NAME=DIS0001  0107-07061-09015-1414-00033-00025-00000-ISPPLIB\n)PANEL\n)ATTR\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  # TYPE(TEXT)    INTENS(HIGH) COLOR(RED)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n  ^ TYPE(INPUT)   INTENS(HIGH) CAPS(OFF)   JUST(ASIS)\n)BODY WIDTH(&ZSCREENW)\n%COMMAND=>_ZCMD\n+\n+                       #Disassembler\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4\n@PMSG5\n+\n+\n+\n+      Enter the name of the library and the name of the LMOD.\n+      If the library is cataloged, leave the VOLSER blank.\n+\n+\n+\n               %DSN: _LDSN                                       +\n            %VOLSER: _LVOL  +\n+\n              %LMOD: _LMOD    +  (leave blank for member list)\n\n)INIT\n)REINIT\n  REFRESH(ZCMD,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5)\n)END\n./ ADD NAME=DIS0002  0112-07061-09015-1415-00030-00031-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS) COLOR(YELLOW)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN   $LDSN                                                 %VOLSER    $LVOL\n+\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n@PMSG5                                                                         +\n% Select a member\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=DIS0003  0110-07064-09015-1415-00037-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n)BODY\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN   $LDSN                                                 %VOLSER    $LVOL\n%LMOD  $LMOD         %CSECT $LCSECT\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n@PMSG5                                                                         +\n\n\n          +Enter function:  _F+\n\n  +Functions are:\n        %B   +BASE definitions            %D    +View DATA items\n        %E   +View ESD info               %R    +View RLD info\n        %T   +View CSECT text             %U    +USING definitions\n        %G   +Generate source\n\n\n\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n)END\n./ ADD NAME=DIS0004  0105-07065-09015-1416-00030-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN   $LDSN                                                 %VOLSER    $LVOL\n%LMOD  $LLMOD      %CSECT $LCSECT\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n@PMSG5                                                                         +\n+      Register      Begin    End        Disp refered to\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=DIS0005  0104-07065-09015-1416-00030-00030-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  @ TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)  CAPS(OFF) JUST(ASIS)\n  + TYPE(TEXT)    INTENS(LOW)\n  $ TYPE(OUTPUT)  INTENS(HIGH) SKIP(ON)    JUST(ASIS)\n 01 TYPE(DATAOUT) INTENS(LOW)  SKIP(ON)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_VSCR+\n%DSN   $LDSN                                                 %VOLSER    $LVOL\n%LMOD  $LMOD          %CSECT $LCSECT\n@PMSG1\n@PMSG2\n@PMSG3\n@PMSG4                                                                         +\n@PMSG5                                                                         +\n+\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,PMSG1,PMSG2,PMSG3,PMSG4,PMSG5,ZPFKEY)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JCL": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\t%\\x0f\\x01\\t%\\x0f\\x10\\x05\\x01\\x1f\\x01\\x1f\\x00\\x00\\xc4\\xc9\\xe2\\xc1\\xe2\\xd4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-09-07T00:00:00", "modifydate": "2009-09-07T10:05:00", "lines": 287, "newlines": 287, "modlines": 0, "user": "DISASM"}, "text": "./ ADD NAME=$$$DOC   0105-04278-09203-0911-00034-00026-00000-JCL\n               Installing the disassembler\n\n 1. Allocate a SOURCE, MACRO, and JCL library (the source and macros\n    must in separate libraries, some members have the same names).\n    Space on a 3380 is 15 tracks for the source, 5 for the macros, and\n    2 for the JCL.  DCB info for all 3 is RECFM=FB,LRECL=80,BLKSIZE=3120\n\n 2. If you want to pre-process DSECTs allocate a VSAM cluster.\n    Member DEFLIB is a sample.\n\n 3. If you are going to use the interactive mode (SPF dialog) and\n    you want to allow config information to be saved and recalled,\n    allocate a PDS with RECFM=FB, LRECL=256, BLKSIZE=4096.\n\n 4. If you want to keep the disassembler in a separate load library,\n    allocate the library, it does not have to be APF authorized.\n\n 5. Load the source, macro, JCL, ISPPLIB, and REXX libraries.\n\n 6. Edit member DISASMGB in the macro library to select the options you\n    want.\n\n 7. Edit the ASMLINK member of the JCL library to fit your library names\n\n 8. Run the ASMLINK member to assemble and link-edit the disassembler.\n\n 9. If you want to use the interactive SPF mode, add the DISASM and\n    DISASM2 REXX execs to a library available to your TSO session.\n\n10. Optionally pre-process DSECTs using DISASMU1.\n\n11. The disassembler should be ready to use.\n    Either run the disassembler in batch (member DISASM in this library\n    can be used as sample JCL) or enter DISASM from SPF option 6.\n./ ADD NAME=ALLOC    0103-04279-09203-0907-00022-00025-00000-JCL\n//DISALLOC JOB\n//IEFBR14  EXEC PGM=IEFBR14\n//SOURCE   DD DSN=........DISASM.SOURCE,DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSALLDA,VOL=SER=VVVVVV,\n//            SPACE=(TRK,(15,5,5)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//MACLIB   DD DSN=........DISASM.MACLIB,DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSALLDA,VOL=SER=VVVVVV,\n//            SPACE=(TRK,(5,5,5)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//JCLLIB   DD DSN=........DISASM.JCL,DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSALLDA,VOL=SER=VVVVVV,\n//            SPACE=(TRK,(2,5,5)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//ISPPLIB  DD DSN=........DISASM.ISPPLIB,DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSALLDA,VOL=SER=VVVVVV,\n//            SPACE=(TRK,(2,5,5)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//LOADLIB  DD DSN=........DISASM.LOADLIB,DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSALLDA,VOL=SER=VVVVVV,\n//            SPACE=(TRK,(5,5,5)),\n//            DCB=(RECFM=U,BLKSIZE=6144)\n./ ADD NAME=ASMLINK  0103-09111-09203-0856-00144-00160-00000-JCL\n//ASMLINK  JOB\n//ASM      PROC NAME=,\n//             AP=,\n//             LIST='SYSOUT=*,FCB=2'\n//ASM      EXEC PGM=ASMA90,\n//             REGION=4096K,\n//             PARM='LINECOUNT(55),DECK,NOOBJECT,XREF(SHORT),&AP'\n//SYSPRINT DD   &LIST\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.MODGEN,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//         DD   DSN=.......DISASM.MACLIB,DISP=SHR\n//SYSPUNCH DD   DSN=.......DISASM.OBJECT(&NAME),DISP=SHR\n//SYSIN    DD   DSN=.......DISASM.SOURCE(&NAME),DISP=SHR\n// PEND\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           ASSEMBLE ALL MODULES                                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//DISALIST EXEC ASM,NAME=DISALIST\n//DISASSEM EXEC ASM,NAME=DISASSEM\n//DISBIND  EXEC ASM,NAME=DISBIND\n//DISBLIST EXEC ASM,NAME=DISBLIST\n//DISBMAIN EXEC ASM,NAME=DISBMAIN\n//DISCOMM  EXEC ASM,NAME=DISCOMM\n//DISCONF  EXEC ASM,NAME=DISCONF\n//DISDAIR  EXEC ASM,NAME=DISDAIR\n//DISDCONV EXEC ASM,NAME=DISDCONV\n//DISDDSCT EXEC ASM,NAME=DISDDSCT\n//DISDEBUG EXEC ASM,NAME=DISDEBUG\n//DISDINFO EXEC ASM,NAME=DISDINFO\n//DISDIR   EXEC ASM,NAME=DISDIR\n//DISDISP  EXEC ASM,NAME=DISDISP\n//DISDLIST EXEC ASM,NAME=DISDLIST\n//DISDMERG EXEC ASM,NAME=DISDMERG\n//DISDREAD EXEC ASM,NAME=DISDREAD\n//DISDSECT EXEC ASM,NAME=DISDSECT\n//DISELIST EXEC ASM,NAME=DISELIST\n//DISESD   EXEC ASM,NAME=DISESD\n//DISGEN   EXEC ASM,NAME=DISGEN\n//DISKLIST EXEC ASM,NAME=DISKLIST\n//DISLREAD EXEC ASM,NAME=DISLREAD\n//DISMAIN  EXEC ASM,NAME=DISMAIN\n//DISMSG   EXEC ASM,NAME=DISMSG\n//DISMSGUS EXEC ASM,NAME=DISMSGUS\n//DISNAME  EXEC ASM,NAME=DISNAME\n//DISNLIST EXEC ASM,NAME=DISNLIST\n//DISOPTS  EXEC ASM,NAME=DISOPTS\n//DISOP1   EXEC ASM,NAME=DISOP1\n//DISOP2   EXEC ASM,NAME=DISOP2\n//DISOP3   EXEC ASM,NAME=DISOP3\n//DISOP4   EXEC ASM,NAME=DISOP4\n//DISPARM  EXEC ASM,NAME=DISPARM\n//DISPRINT EXEC ASM,NAME=DISPRINT\n//DISREF   EXEC ASM,NAME=DISREF\n//DISRLD   EXEC ASM,NAME=DISRLD\n//DISRLIST EXEC ASM,NAME=DISRLIST\n//DISRR    EXEC ASM,NAME=DISRR\n//DISSLIST EXEC ASM,NAME=DISSLIST\n//DISSCAN  EXEC ASM,NAME=DISSCAN\n//DISSPFD  EXEC ASM,NAME=DISSPFD\n//DISSPFV  EXEC ASM,NAME=DISSPFV\n//DISTDBUG EXEC ASM,NAME=DISTDBUG\n//DISTEXT  EXEC ASM,NAME=DISTEXT\n//DISTIOT  EXEC ASM,NAME=DISTIOT\n//DISTLSTB EXEC ASM,NAME=DISTLSTB\n//DISTLSTT EXEC ASM,NAME=DISTLSTT\n//DISTMAIN EXEC ASM,NAME=DISTMAIN\n//DISULIST EXEC ASM,NAME=DISULIST\n//DISULSTD EXEC ASM,NAME=DISULSTD\n//DISULSTK EXEC ASM,NAME=DISULSTK\n//DISULSTL EXEC ASM,NAME=DISULSTL\n//DISVAR   EXEC ASM,NAME=DISVAR\n//DISVBU   EXEC ASM,NAME=DISVBU\n//DISVDATA EXEC ASM,NAME=DISVDATA\n//DISXLIST EXEC ASM,NAME=DISXLIST\n//GENDC    EXEC ASM,NAME=GENDC\n//GENRR1   EXEC ASM,NAME=GENRR1\n//GENRR2   EXEC ASM,NAME=GENRR2\n//GENRR3   EXEC ASM,NAME=GENRR3\n//GENRS1   EXEC ASM,NAME=GENRS1\n//GENRS2   EXEC ASM,NAME=GENRS2\n//GENRS3   EXEC ASM,NAME=GENRS3\n//GENRX    EXEC ASM,NAME=GENRX\n//GENSI    EXEC ASM,NAME=GENSI\n//GENSS1   EXEC ASM,NAME=GENSS1\n//GENSS2   EXEC ASM,NAME=GENSS2\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINK1    EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REUS,MAP',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.......DISASM.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=.......DISASM.LOADLIB,DISP=SHR\n//ISPLOAD  DD  DSN=SYS1.SISPLOAD,DISP=SHR\n//SYSLIN   DD  *\n  MODE AMODE(31),RMODE(ANY)\n  INCLUDE SYSLIB(DISMAIN)\n  ENTRY DISMAIN\n  NAME DISASM(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINK2    EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=.......DISASM.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=.......DISASM.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(DISCOMM)\n  ENTRY DISCOMM\n  NAME DISCOMM(R)\n\n  INCLUDE SYSLIB(DISMSGUS)\n  ENTRY DISMSGS\n  NAME DISMSGS(R)\n\n  INCLUDE SYSLIB(DISOP1)\n  NAME DISOP1(R)\n\n  INCLUDE SYSLIB(DISOP2)\n  NAME DISOP2(R)\n\n  INCLUDE SYSLIB(DISOP3)\n  NAME DISOP3(R)\n\n  INCLUDE SYSLIB(DISOP4)\n  NAME DISOP4(R)\n\n  INCLUDE SYSLIB(DISSPFD)\n  NAME DISSPFD(R)\n\n  INCLUDE SYSLIB(DISSPFV)\n  NAME DISSPFV(R)\n/*\n//\n./ ADD NAME=DEFLIB   0109-07092-09203-0915-00037-00011-00000-JCL\n//DEFLIB   JOB\n//IDCAMS   EXEC PGM=IDCAMS\n//SYSPRINT DD SYSOUT=*\n//DD1      DD *\n  DUMMY\n//SYSIN    DD *\n\n  DELETE ........DISASM.MY.DSECTS CLUSTER PURGE\n\n  SET MAXCC = 0\n\n    DEFINE                                           -\n       CLUSTER  (NAME(........DISASM.MY.DSECTS)      -\n                INDEXED                              -\n                NOREUSE                              -\n                NOIMBED                              -\n                RECOVERY                             -\n                SHAREOPTIONS           (2,3)         -\n                )                                    -\n       DATA     (NAME(........DISASM.MY.DSECTS.DATA) -\n                VOLUMES                (VVVVVV )     -\n                FREESPACE              (15   20)     -\n                TRACKS                 (15   15)     -\n                RECORDSIZE             (68  180)     -\n                KEYS                   (67    0)     -\n                CONTROLINTERVALSIZE    (  10240)     -\n                )                                    -\n       INDEX    (NAME(........DISASM.MY.DSECTS.INDEX) -\n                VOLUMES                (VVVVVV )     -\n                TRACKS                 (5     5)     -\n                CONTROLINTERVALSIZE    (   1024)     -\n                )\n\n   REPRO INFILE(DD1) OUTDATASET(........DISASM.MY.DSECTS)\n\n/*\n//\n./ ADD NAME=DISASM   0104-09111-09203-0859-00045-00053-00000-JCL\n//DISASM   JOB\n//* ------------------------------------------------------------------*\n//*                                                                   *\n//*                                                                   *\n//*                                                                   *\n//* ------------------------------------------------------------------*\n//DISASM   EXEC PGM=DISASM,REGION=4096K\n//STEPLIB  DD DSN=.......DISASM.LOADLIB,DISP=SHR\n//* ------------------------------------------------------------------*\n//*        UNNECESSARY DD'S                                           *\n//* ------------------------------------------------------------------*\n//ABNLIGNR DD DUMMY\n//DMBENAN  DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n//* ------------------------------------------------------------------*\n//*        ASSEMBLER DD'S                                             *\n//* ------------------------------------------------------------------*\n//SYSPRINT DD DSN=&&PRT,DISP=(NEW,PASS),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15)),\n//            DCB=(RECFM=FBM,LRECL=121,BLKSIZE=12100)\n//SYSIN    DD DSN=&&IN,DISP=(NEW,PASS),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SYSLIB   DD DSN=...........,DISP=SHR\n//         DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//DISPUNCH DD DSN=............,DISP=SHR\n//* ------------------------------------------------------------------*\n//*        DIS-ASSEMBLER DD'S                                         *\n//* ------------------------------------------------------------------*\n//DISDEBUG DD SYSOUT=*\n//DISTRACE DD SYSOUT=*\n//DISPRINT DD SYSOUT=*\n//DISMOD   DD DSN=.......................,DISP=SHR\n//DSECT01  DD DSN=.......DISASM.MY.DSECTS,DISP=SHR\n//DSECT02  DD DSN=.......DISASM.IBM.DSECTS,DISP=SHR\n//DISIN    DD *\n    .\n    .\n    .\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MACLIB": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\t%\\x0f\\x01\\t%\\x0f\\x10\\x05\\x05\\xbf\\x05\\xbf\\x00\\x00\\xc4\\xc9\\xe2\\xc1\\xe2\\xd4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-09-07T00:00:00", "modifydate": "2009-09-07T10:05:00", "lines": 1471, "newlines": 1471, "modlines": 0, "user": "DISASM"}, "text": "./ ADD NAME=ATTRS    0101-08352-09023-1512-00012-00011-00000-MACLIB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     Attributes used for ISPF panels                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\n$ATTR_NORMAL          EQU   X'01'\n$ATTR_INPUT           EQU   X'02'\n$ATTR_HIGH            EQU   X'03'\n$ATTR_HIGH_YELLOW     EQU   X'04'\n$ATTR_HIGH_RED        EQU   X'05'\n$ATTR_HIGH_TURQUOISE  EQU   X'06'\n$ATTR_HIGH_GREEN      EQU   X'07'\n./ ADD NAME=BINDREQ  0100-07061-07061-1401-00020-00020-00000-MACLIB\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Binder requests                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         BINDREQ &DSECT=YES\n         AIF   ('&DSECT' EQ 'YES').LBL0010\nBINDREQ         DS    0A\n         AGO   .LBL0020\n.LBL0010 ANOP\nBINDREQ         DSECT\n.LBL0020 ANOP\nBIND_FUNC       DS     X           FUNCTION\n$BIND_STARTD    EQU    X'01'       .. START DIALOG\n$BIND_NAMES     EQU    X'02'       .. BUILD NAME CHAIN\n$BIND_ESD_RLD   EQU    X'03'       .. BUILD ESD AND RLD DATA CHAINS\n$BIND_TEXT      EQU    X'04'       .. READ TEXT\n$BIND_ENDD      EQU    X'05'       .. END DIALOG\n         MEND\n./ ADD NAME=DISASMDA 0169-07038-09121-1602-00287-00218-00000-MACLIB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     DISASM's data areas                                             *\n*                                                                     *\n*     There were so many different blocks that making up macros or    *\n*     copy members took more time than it was worth.  Most of the     *\n*     data areas are small, so it doesn't cost much to assemble them  *\n*     all in all the modules.                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        AREA DESCRIPTORS                                             *\n*                                                                     *\n*  All text areas will be described by a DATA or INSTRUCTION AREA.    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nAREA_DSECT          DSECT\nAREA_PREV           DS    A          PREV DATA/INSTRUCTION BLOCK\nAREA_NEXT           DS    A          NEXT DATA/INSTRUCTION BLOCK\nAREA_EYE            DS    CL8        EYE CATCHER\nAREA_BEGIN          DS    XL4        STARTING DISPLACEMENT\nAREA_END            DS    XL4        ENDING DISPLACEMENT\nAREA_LENGTH         DS    XL4        LENGTH\nAREA_LABEL          DS    XL4        LABEL ADDRESS\nAREA_OPCODE         DS    A          ADDRESS OF OPCODE TABLE ENTRY\nAREA_REF_LABEL1     DS    A          OPERAND 1 LABEL\nAREA_REF_DISP1      DS    XL4        DISPLACEMENT FROM OPERAND 1 LABEL\nAREA_REF_LABEL2     DS    A          OPERAND 2 LABEL\nAREA_REF_DISP2      DS    XL4        DISPLACEMENT FROM OPERAND 2 LABEL\nAREA_TYPE           DS    C          AREA TYPE\n$AREA_DATA          EQU   C'D'       .. DATA AREA\n$AREA_INSTRUCTION   EQU   C'I'       .. INSTRUCTION\nAREA_DATA_TYPE      DS    X          DATA TYPES (DATA AREAS)\n$DATA_USER          EQU   X'01'      .. USER DEFINED\n$DATA_ACON          EQU   X'02'      .. A-CON\n$DATA_31            EQU   X'82'      .. AD-CON WITH 31-BIT MODE BIT ON\n$DATA_VCON          EQU   X'03'      .. V-CON\n$DATA_INTERNAL      EQU   X'04'      .. INTERNALLY DETECTED\n$DATA_CXD           EQU   X'05'      .. PSEUDO AREA SIZE\n$DATA_Q             EQU   X'06'      .. PSEUDO AREA DISPLACEMENT\nAREA_FLAGS          DS    X\n$AREA_LABEL_GENNED  EQU   X'80'      .. LABEL HAS BEEN GENNED\n$AREA_RLD_PLUS      EQU   X'40'      .. DIRECTION + (FOR RLD ITEM)\n$AREA_RLD_MINUS     EQU   X'20'      .. DIRECTION - (FOR RLD ITEM)\n$AREA_OVERLAP       EQU   X'10'      .. OVERLAPS ANOTHER AREA\nAREA_RLD_NAME       DS    CL63       VCON, Q, ETC NAME\nAREA_DSECT_L        EQU   *-AREA_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Assembler source                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nASM_DSECT           DSECT\nASM_PREV            DS    A          PREV ASM BLOCK\nASM_NEXT            DS    A          NEXT ASM BLOCK\nASM_EYE             DS    CL8        EYE CATCHER\nASM_SOURCE          DS    CL80       ASSEMBLE SOURCE STATEMENT\nASM_DSECT_L         EQU   *-ASM_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        BASE REGISTER DEFINITIONS                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nBASE_DSECT          DSECT\nBASE_PREV           DS    A          PREV BASE BLOCK\nBASE_NEXT           DS    A          NEXT BASE BLOCK\nBASE_EYE            DS    CL8        EYE CATCHER\nBASE_BEGIN          DS    XL4        STARTING DISPLACEMENT\nBASE_END            DS    XL4        ENDING DISPLACEMENT\nBASE_DISP           DS    XL4        DISPLACEMENT BASE REFERS TO\nBASE_REGISTER       DS    X          BASE REGISTER\nBASE_CHAR_REGISTER  DS    CL3        BASE REGISTER IN CHARACTER FORM\nBASE_FLAGS          DS    X          FLAGS\n$BASE_GENNED        EQU   X'80'\n$BASE_DROPPED       EQU   X'40'\nBASE_DSECT_L        EQU   *-BASE_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        DSECT DEFINITIONS                                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDSECT_DSECT         DSECT\nDSECT_PREV          DS    A          PREV DSECT BLOCK\nDSECT_NEXT          DS    A          NEXT DSECT BLOCK\nDSECT_EYE           DS    CL8        EYE CATCHER\nDSECT_LABEL_PREV    DS    A          LABEL BLOCK'S ADDRESS\nDSECT_LABEL_NEXT    DS    A          LABEL BLOCK'S ADDRESS\nDSECT_NAME          DS    CL63       DSECT'S NAME\nDSECT_FLAGS         DS    X          FLAGS\n$DSECT_LABELS_READ  EQU   X'80'      .. LABELS HAVE BEEN READ\nDSECT_DSECT_L       EQU   *-DSECT_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        ESD ITEMS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nESD_DSECT           DSECT\nESD_PREV            DS    A          PREV ESD BLOCK'S ADDRESS\nESD_NEXT            DS    A          NEXT ESD BLOCK'S ADDRESS\nESD_EYE             DS    CL8        EYE CATCHER\nESD_NAME            DS    CL8        SYMBOL NAME\nESD_RESIDENT        DS    CL8        SECTION CONTAINING SYMBOL\nESD_TARGET          DS    CL8        SECTION NAME REFERS TO\nESD_TYPE            DS    CL2        TYPE\nESD_TYPE_QUAL       DS    CL2        TYPE QUALIFIER\nESD_LENGTH          DS    AL4        ENTRY LENGTH\nESD_ELEM_OFFSET     DS    AL4        ELEMENT OFFSET\nESD_CLASS_OFFSET    DS    AL4        CLASS OFFSET\nESD_DSECT_L         EQU   *-ESD_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        LABEL BLOCK                                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLABEL_DSECT         DSECT\nLABEL_PREV          DS    A          PREV LABEL BLOCK\nLABEL_NEXT          DS    A          NEXT LABEL BLOCK\nLABEL_EYE           DS    CL8        EYE CATCHER\nLABEL_NAME          DS    CL63       LABEL NAME\nLABEL_DISP          DS    XL4        DISPLACEMENT TO THIS LABEL\nLABEL_EQU_PREV      DS    A          EQU BLOCK ADDRESS\nLABEL_EQU_NEXT      DS    A          EQU BLOCK ADDRESS\nLABEL_TYPE          DS    C          LABEL TYPE\n$LABEL_DATA         EQU   C'D'       .. LABEL AT DATA\n$LABEL_ESD          EQU   C'E'       .. LABEL FROM AN ESD ENTRY\n$LABEL_INSTR        EQU   C'I'       .. LABEL AT AN INSTRUCTION\n$LABEL_RLD          EQU   C'R'       .. LABEL FROM AN RLD ENTRY\nLABEL_DSECT_L       EQU   *-LABEL_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Section \"name\" blocks                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nNAME_DSECT          DSECT\nNAME_PREV           DS    A          PREV NAME BLOCK\nNAME_NEXT           DS    A          NEXT NAME BLOCK\nNAME_EYE            DS    CL8        EYE CATCHER\nNAME_NAME           DS    CL8        SECTION NAME\nNAME_OFFSET         DS    F          DISPLACEMENT\nNAME_DSECT_L        EQU   *-NAME_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        OPCODE DEFINITIONS                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nOPCODE_DSECT        DSECT\nOPCODE_MACHINE      DS    CL2        OPCODE\nOPCODE_MNEMONIC     DS    CL5        MNEMONIC\nOPCODE_LENGTH       DS    AL2        INSTRUCTION LENGTH\nOPCODE_FORMAT       DS    X          FORMAT\n$OPCODE_RR1         EQU   X'00'      .. RR FORMAT 1 (R1,R2)\n$OPCODE_RR2         EQU   X'01'      .. RR FORMAT 2 (SVC'S)\n$OPCODE_RR3         EQU   X'02'      .. RR FORMAT 3 (BRANCHES)\n$OPCODE_RX          EQU   X'03'      .. RX FORMAT\n$OPCODE_S           EQU   X'04'      .. S FORMAT\n$OPCODE_SI          EQU   X'05'      .. SI (IMMEDIATE) FORMAT\n$OPCODE_RS1         EQU   X'06'      .. RS FORMAT 1 (SHIFTS)\n$OPCODE_RS2         EQU   X'07'      .. RS FORMAT 2 (BXLE, BXH,  )\n$OPCODE_RS3         EQU   X'08'      .. RS FORMAT 3 (MASK TYPE)\n$OPCODE_SS1         EQU   X'09'      .. SS FORMAT 1 (CHARACTER)\n$OPCODE_SS2         EQU   X'0A'      .. SS FORMAT 2 (PACKED DECIMAL)\n$OPCODE_SS3         EQU   X'0B'      .. SS FORMAT 3 (MVCK, MVCS, MVCP)\n$OPCODE_SS4         EQU   X'0C'      .. SS FORMAT 4 (SRP)\n$OPCODE_B2          EQU   X'0D'      .. B2 (NO OPERANDS)\n$OPCODE_B2S         EQU   X'0E'      .. B2 S-FORMAT\n$OPCODE_B2R         EQU   X'0F'      .. B2 R FORMAT\n$OPCODE_B2RR        EQU   X'10'      .. B2 RR FORMAT\nOPCODE_FLAGS        DS    X          FLAGS\n$OPCODE_EXT         EQU   X'80'      .. EXTENDED MNEMONICS\n$OPCODE_SVC         EQU   X'40'      .. SVC\n$OPCODE_NO_COMMENT  EQU   X'20'      .. NO COMMENT\n$OPCODE_REF         EQU   X'10'      .. GENERATES A LABEL REFERENCE\n$OPCODE_CCA         EQU   X'08'      .. SETS CONDITION CODE, ARITHMETIC\n$OPCODE_CCC         EQU   X'04'      .. SETS CONDITION CODE, COMPARE\n$OPCODE_CCL         EQU   X'02'      .. SETS CONDITION CODE, LOGICAL\n$OPCODE_BRANCH      EQU   X'01'      .. BRANCHING INSTRUCTION\nOPCODE_REGS         DS    X          REGISTER RESTRICTIONS\n$OPCODE_1EVEN       EQU   X'80'      .. OPERAND 1 MUST BE EVEN\n$OPCODE_10246       EQU   X'40'      .. OPERAND 1 MUST BE 0, 2, 4, OR 6\n$OPCODE_104         EQU   X'20'      .. OPERAND 1 MUST BE 0 OR 4\n$OPCODE_2EVEN       EQU   X'08'      .. OPERAND 2 MUST BE EVEN\n$OPCODE_20246       EQU   X'04'      .. OPERAND 2 MUST BE 0, 2, 4, OR 6\n$OPCODE_204         EQU   X'02'      .. OPERAND 2 MUST BE 0 OR 4\nOPCODE_COMMENT      DS    CL25       COMMENT IF PRESENT\nOPCODE_DSECT_L      EQU   *-OPCODE_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        EQU DEFINITIONS                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEQU_DSECT           DSECT\nEQU_PREV            DS    A          PREV EQU BLOCK'S ADDRESS\nEQU_NEXT            DS    A          NEXT EQU BLOCK'S ADDRESS\nEQU_EYE             DS    CL8        EYECATCHER\nEQU_LABEL           DS    CL63       LABEL ON EQU STATEMENT\nEQU_VALUE           DS    X          ASSOCIATED EQU VALUE\nEQU_DSECT_L         EQU   *-EQU_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        USING DEFINITIONS                                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nUSING_DSECT         DSECT\nUSING_PREV          DS    A          PREV USING BLOCK\nUSING_NEXT          DS    A          NEXT USING BLOCK\nUSING_EYE           DS    CL8        EYE CATCHER\nUSING_DSECT_NAME    DS    CL63       DSECT'S NAME\nUSING_DSECT_LABEL   DS    CL63       LABEL WITHIN THE DSECT\nUSING_DSECT_ADDR    DS    A          RELATED DSECT BLOCK'S ADDRESS\nUSING_LABEL_ADDR    DS    A          LABEL BLOCK'S ADDRESS\nUSING_DISP          DS    XL4        DISP FROM DSECT OR LABEL\nUSING_REGISTER      DS    X          BASE REGISTER\nUSING_CHAR_REGISTER DS    CL3        BASE REGISTER (CHAR FORM)\nUSING_FLAG          DS    X          FLAGS\n$USING_NO_DISP      EQU   X'80'      .. NO DISPLACEMENTS\n$USING_GENNED       EQU   X'40'      .. USING GENNED\n$DROP_GENNED        EQU   X'20'      .. DROP GENNED\nUSING_BEGIN         DS    XL4        STARTING DISPLACEMENT\nUSING_END           DS    XL4        ENDING DISPLACEMENT\nUSING_DSECT_L       EQU   *-USING_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Config file records                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCONFIG_RECORD       DSECT\nCONFIG_TYPE         DS    X          TYPE OF DATA\n$CONFIG_OP_TABLE    EQU   X'01'      .. OPCODE TABLE\n$CONFIG_DATAAREA    EQU   X'02'      .. USER DEFINED DATA AREA\n$CONFIG_BASE        EQU   X'03'      .. BASE\n$CONFIG_USING       EQU   X'04'      .. USING\n$CONFIG_DSECT_KSDS  EQU   X'05'      .. PREPROCESSED DSECT KSDS\n$CONFIG_SYSLIB      EQU   X'06'      .. SYSLIB(S) FOR ASSEMBLER\n$CONFIG_PREFIX_LENGTH EQU X'07'      .. LABEL PREFIX LENGTH\n$CONFIG_PREFIX      EQU   X'08'      .. LABEL PREFIX\n$CONFIG_ASM_SOURCE  EQU   X'09'      .. ASSEMBLER SOURCE\n$CONFIG_OUTPUT_DSN  EQU   X'0A'      .. OUTPUT DSN\nCONFIG_DATA         DS    CL255      SAVED DATA\nCONFIG_RECORD_L     EQU   *-CONFIG_RECORD\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Preprocessed DSECT KSDS                                      *\n*                                                                     *\n*                                                                     *\n*   The disassembler allows DSECTs to be pre-processed by DISASMU1.   *\n*                                                                     *\n*   The high-level assembler allows label names to be up to 63        *\n*   characters in length... ruling out using a PDS or PDS/E with      *\n*   the DSECT name as the member name.  So, I used VSAM KSDS's.       *\n*                                                                     *\n*   A snag is that the system does not allow VSAM data sets to be     *\n*   concatenated.  So, I allow for multiple KSDS'S.  When a DSECT     *\n*   is referenced on a USING statement, the disassembler first        *\n*   \"looks\" for the DSECT in the output from the assembled source     *\n*   given by the ASM,START and ASM,END statements.  If the DSECT      *\n*   is not found, the DSECTxx DDs will be searched in the same        *\n*   order they appear in the JCL.                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nKSDS_DSECT          DSECT\nKSDS_PREV           DS     A           PREV KSDS BLOCK\nKSDS_NEXT           DS     A           NEXT KSDS BLOCK\nKSDS_EYE            DS     CL8         EYE CATCHER\nKSDS_DDNAME         DS     CL8         DD NAME\nKSDS_DSNAME         DS     CL44        DSN\nKSDS_ACB            DS     (ACB_L)X    ACB\nKSDS_DSECT_PREV     DS     A\nKSDS_DSECT_NEXT     DS     A\nKSDS_FLAGS          DS     X           FLAGS\n$KSDS_OPEN          EQU    X'80'       .. ACB IS OPEN\n$KSDS_DSECTS_READ   EQU    X'40'       .. DSECTS HAVE BEEN READ\nKSDS_DSECT_L        EQU    *-KSDS_DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Assembler SYSLIBs                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\nSYSLIB_DSECT  DSECT\nSYSLIB_PREV   DS     A           PREV SYSLIB BLOCK\nSYSLIB_NEXT   DS     A           NEXT SYSLIB BLOCK\nSYSLIB_EYE    DS     CL8         EYE CATCHER\nSYSLIB_DDNAME DS     CL8         DD NAME\nSYSLIB_DSNAME DS     CL44        DSN\nSYSLIB_DSECT_L EQU   *-SYSLIB_DSECT\n./ ADD NAME=DISCOMM  0199-07038-09188-0936-00561-00315-00000-MACLIB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          COMMON AREA MAPPING MACRO                                  *\n*                                                                     *\n*     This macro will generate either the 'common' module CSECT or    *\n*     a DSECT to map the 'common' module.  'Common' is used for       *\n*     constants and work areas that are required by several modules   *\n*     allowing some elimination of duplicated data and to allow       *\n*     inter-module communication.                                     *\n*                                                                     *\n*     The trace table code is also incorporated into DISCOMM.         *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         MACRO\n         DISCOMM  &TYPE=\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         MNOTE 12,'INVALID TYPE'\n         MEXIT\n.CSECT   ANOP\nDISCOMM  CSECT\n         AGO   .NODSECT\n.DSECT   ANOP\nDISCOMM  DSECT\n.NODSECT ANOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          ADD TRACE ENTRY                                            *\n*                                                                     *\n*  During program initialization, DISMAIN acquires storage for the    *\n*  trace table and sets COMM_TRACE_1STX, COMM_TRACE_LAST, and         *\n*  COMM_TRACE_CURR.  DISMAIN sets R11 to the address of DISCOMM       *\n*  and all other modules depend on this remaining unchanged.          *\n*                                                                     *\n*  MACRO ITRACE may be used to call the trace.                        *\n*                                                                     *\n*  R14 is the only register altered by the trace code.                *\n*                                                                     *\n*  The trace table is a \"wrap-around\" table.  COMM_TRACE_1STX is      *\n*  the first entry's address, COMM_TRACE_LAST is the last entry's     *\n*  address, and comm_TRACE_CURR is the address of the last entry      *\n*  added to the trace table.                                          *\n*                                                                     *\n*  When a trace entry is added to the table, the calling module's     *\n*  name, an 8-byte ID, and up to 2 8-byte fields are captured.        *\n*                                                                     *\n*  If a DISTRACE DD is provided in the JCL, trace entries will        *\n*  also be written as an 'external' trace.  The DISTRACE DCB          *\n*  is OPENed and CLOSEd by DISMAIN.                                   *\n*                                                                     *\n*                                                                     *\n*  The trace code does not allow for multiple subtasks.               *\n*  If there is ever a need for the disassembler to use multiple       *\n*  subtasks, this code will need to be updated.  At the very          *\n*  least, it will need to use \"CS\" (compare and swap) logic to        *\n*  update COMM_TRACE_CURR.  The external trace would probably         *\n*  need to be eliminated.                                             *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*      This code depends on:                                          *\n*           R11  'DISCOMM' address                                    *\n*           R12  current module's base address                        *\n*                and the module's name must be at 10 bytes (0A hex)   *\n*                into the module                                      *\n*           R13  address of a standard 72-byte register save area     *\n*                followed by two 8 character work areas used to       *\n*                capture the 'DATA1/RDATA1' and 'DATA2/RDATA2' data.  *\n*           R14  trace id's address and R14 + 8 will be the return    *\n*                address                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTRACE000 DS    0H\n         USING DISCOMM,R12                         DEFINE BASE\n         USING TRENTRY,R2                          DEFINE BASE\n         STM   R0,R15,TRCESAVE                     SAVE ALL REGISTERS\n         ICM   R2,15,COMM_TRACE_CURRENT            CURRENT TRACE ENTRY\n         BZ    TRACE020                            NO TRACE TABLE\n         OC    0(TRENTRYL,R2),0(R2)                EMPTY ENTRY?\n         BZ    TRACE010                            YES.. USE THIS ENTRY\n         LA    R2,TRENTRYL(R2)                     NEXT TRACE ENTRY\n         C     R2,COMM_TRACE_LAST                  BEYOND END OF TABLE?\n         BNH   TRACE010                            NO\n         L     R2,COMM_TRACE_1STX                  'WRAP' TRACE TABLE\nTRACE010 DS    0H\n         ST    R2,COMM_TRACE_CURRENT               SAVE CURRENT ADDRESS\n         MVC   TREMOD,10(R11)                      COPY MODULE NAME\n         MVC   TREID,0(R14)                        COPY TRACE ID\n         MVC   TREDATA1,COMM_TRACE_ITEM_1          COPY TRACE DATA 1\n         MVC   TREDATA2,COMM_TRACE_ITEM_2          COPY TRACE DATA 2\n         XC    COMM_TRACE_ITEM_1,COMM_TRACE_ITEM_1 CLEAR TRACE DATA\n         XC    COMM_TRACE_ITEM_2,COMM_TRACE_ITEM_2 CLEAR TRACE DATA\n         TM    COMM_TRACE_FLAGS,$COMM_TRACE_OPEN   TRACE OPEN?\n         BNO   TRACE030                            NO\n         MVC   TRACE_RECORD(TRACE_RECORD_L),COMM_BLANKS\n         MVC   TRACE_CSECT,TREMOD\n         MVC   TRACE_ID,TREID\n         MVC   TRACE_ITEM_1,TREDATA1\n         UNPK  TRACE_ITEM_1_HEX+0(9),TREDATA1+0(5)\n         UNPK  TRACE_ITEM_1_HEX+8(9),TREDATA1+4(5)\n         TR    TRACE_ITEM_1_HEX,COMM_HEXCHAR\n         MVI   TRACE_ITEM_1_HEX+16,C' '\n         MVC   TRACE_ITEM_2,TREDATA2\n         UNPK  TRACE_ITEM_2_HEX+0(9),TREDATA2+0(5)\n         UNPK  TRACE_ITEM_2_HEX+8(9),TREDATA2+4(5)\n         TR    TRACE_ITEM_2_HEX,COMM_HEXCHAR\n         MVI   TRACE_ITEM_2_HEX+16,C' '\n         CLI   COMM_RUN_MODE,$COMM_RUN_TSO         TSO MODE?\n         BE    TRACE020                            YES\n         PUT   DISTRACE_DCB,TRACE_RECORD           WRITE TO TRACE\n         B     TRACE030\nTRACE020 DS    0H\n         TPUT  TRACE_RECORD,TRACE_RECORD_L         ISSUE TPUT\nTRACE030 DS    0H\n         LM    R0,R15,TRCESAVE                     RESTORE REGISTERS\n         B     8(R14)                              RETURN\n\nTRCESAVE DS    16F                                 REGISTER SAVE AREA\n\n* ------------------------------------------------------------------- *\n*                      Trace control                                  *\n* ------------------------------------------------------------------- *\n                       DS    0A\n                       DC    CL4'1STX'             FIRST TRACE ENTRY\nCOMM_TRACE_1STX        DC    A(0)\n                       DC    CL4'LAST'             LAST TRACE ENTRY\nCOMM_TRACE_LAST        DC    A(0)\n                       DC    CL4'CURR'             CURRENT TRACE ENTRY\nCOMM_TRACE_CURRENT     DC    A(0)\nCOMM_TRACE_TABLE       DC    A(0)                  TRACE TABLE ADDRESS\nCOMM_TRACE_ITEM_1      DC    CL8' '                TRACE DATA ITEM 1\nCOMM_TRACE_ITEM_2      DC    CL8' '                TRACE DATA ITEM 2\nCOMM_TRACE_SIZE        DC    A(10000*TRENTRYL)     TRACE TABLE SIZE\nCOMM_TRACE_FLAGS       DC    X'00'\n$COMM_TRACE_OPEN       EQU   X'40'\n* ------------------------------------------------------------------- *\n*                      Trace records                                  *\n* ------------------------------------------------------------------- *\nTRACE_RECORD           DS    0C\nTRACE_CSECT            DC    CL8' '\n                       DC    CL2' '\nTRACE_ID               DC    CL8' '\n                       DS    CL2' '\nTRACE_ITEM_1_HEX       DC    CL16' '\n                       DS    CL2' '\nTRACE_ITEM_1           DC    CL8' '\n                       DC    CL5' '\nTRACE_ITEM_2_HEX       DC    CL16' '\n                       DS    CL2' '\nTRACE_ITEM_2           DC    CL8' '\nTRACE_RECORD_L         EQU   *-TRACE_RECORD\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMM_DWORD             DC    D'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISIN_DCB    DCB  DSORG=PS,          CONTROL STATEMENTS                +\n               DDNAME=DISIN,                                           +\n               DCBE=DISIN_DCBE,                                        +\n               RECFM=FB,                                               +\n               LRECL=80,                                               +\n               MACRF=GM\nDISIN_DCBE     DCBE   EODAD=*\n\nDISMOD_DCB   DCB  DSORG=PS,          PRINTER                           +\n               DDNAME=DISMOD,        .. DD NAME                        +\n               EODAD=*,              .. DCBE                           +\n               MACRF=R               .. MACRO FORMAT\n\nCONF_DCB     DCB  DSORG=PO,          ASSEMBLER SOURCE                  +\n               DDNAME=DISCONF,                                         +\n               DCBE=CONF_DCBE,                                         +\n               RECFM=FB,                                               +\n               LRECL=CONFIG_RECORD_L,                                  +\n               BLKSIZE=CONFIG_RECORD_L*16,                             +\n               MACRF=(R,W)\nCONF_DCBE      DCBE   EODAD=*\n\nSYSIN_DCB    DCB  DSORG=PS,                                            +\n               DDNAME=SYSIN,                                           +\n               DCBE=SYSIN_DCBE,                                        +\n               RECFM=FB,                                               +\n               LRECL=80,                                               +\n               BLKSIZE=4000,                                           +\n               MACRF=(GM,PM)\nSYSIN_DCBE     DCBE   EODAD=*\n\nSYSPRINT_DCB DCB  DSORG=PS,                                            +\n               DDNAME=SYSPRINT,                                        +\n               DCBE=SYSPRINT_DCBE,                                     +\n               MACRF=GM\nSYSPRINT_DCBE  DCBE   EODAD=*\n\nDISPRINT_DCB DCB  DSORG=PS,                                            +\n               DDNAME=DISPRINT,                                        +\n               RECFM=FB,                                               +\n               LRECL=132,                                              +\n               BLKSIZE=5280,                                           +\n               MACRF=PM\n\nDISDEBUG_DCB DCB  DSORG=PS,                                            +\n               DDNAME=DISDEBUG,                                        +\n               RECFM=FB,                                               +\n               LRECL=132,                                              +\n               BLKSIZE=5280,                                           +\n               MACRF=PM\n\nDISTRACE_DCB DCB  DSORG=PS,                                            +\n               DDNAME=DISTRACE,                                        +\n               RECFM=FB,                                               +\n               LRECL=TRACE_RECORD_L,                                   +\n               BLKSIZE=25*TRACE_RECORD_L,                              +\n               MACRF=PM\n\nDISPUNCH_DCB DCB  DSORG=PS,                                            +\n               DDNAME=DISPUNCH,                                        +\n               RECFM=FB,                                               +\n               LRECL=80,                                               +\n               BLKSIZE=4000,                                           +\n               MACRF=PM\n\nDISTEMP_DCB  DCB  DSORG=PS,                                            +\n               DDNAME=DISTEMP,                                         +\n               RECFM=FB,                                               +\n               LRECL=132,                                              +\n               BLKSIZE=5280,                                           +\n               MACRF=PM\n\nCOMM_OPEN  OPEN (*,INPUT),                                             +\n               MODE=31,                                                +\n               MF=L\nCOMM_CLOSE CLOSE *,                                                    +\n               MODE=31,                                                +\n               MF=L\n\n           READ COMM_DECB,                                             +\n               SF,                                                     +\n               MF=L\nCOMM_DECB_L EQU   *-COMM_DECB\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMM_VCONS             DS    0F\n                       VCONS DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMM_SPF_PARMS         DS    0A               SPF PARM LIST\nCOMM_SPF_1             DS    A                .. PARM  1 ADDRESS\nCOMM_SPF_2             DS    A                .. PARM  2 ADDRESS\nCOMM_SPF_3             DS    A                .. PARM  3 ADDRESS\nCOMM_SPF_4             DS    A                .. PARM  4 ADDRESS\nCOMM_SPF_5             DS    A                .. PARM  5 ADDRESS\nCOMM_SPF_6             DS    A                .. PARM  6 ADDRESS\nCOMM_SPF_7             DS    A                .. PARM  7 ADDRESS\nCOMM_SPF_8             DS    A                .. PARM  8 ADDRESS\nCOMM_SPF_9             DS    A                .. PARM  9 ADDRESS\nCOMM_SPF_10            DS    A                .. PARM 10 ADDRESS\n\nCOMM_SPF_FUNCTION      DC    CL8' '           FUNCTION\nCOMM_SPF_PANEL         DC    CL8' '           PANEL NAME\n\nCOMM_VDATA_ADDR        DC    A(0)             DYNAMIC AREA STORAGE\nCOMM_VDATA_SIZE        DC    F'0'             DYNAMIC AREA SIZE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMM_ISPLINK           DC    A(0)             ISPLINK ADDRESS\nCOMM_DISSPFD           DC    A(0)             DISSPFD ADDRESS\nCOMM_DISSPFV           DC    A(0)             DISSPFV ADDRESS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMM_OPCODE_TABLE_NAME DC    CL8'DISOP'       OPCODE TABLE NAME\nCOMM_OPCODE_TABLE_ADDR DC    A(0)             OPCODE TABLE ADDRESS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMM_DXD_ADDRESS       DC    A(0)             WORK AREA\nCOMM_GEN_DISP          DC    A(0)             DISP DURING GEN PROCESS\nCOMM_GEN_LENGTH        DC    F'0'             LENGTH OF TEXT GENNED\nCOMM_MSGS              DC    A(0)             MESSAGE TABLE\n\nCOMM_NAME_PREV         DC    A(0)             SECTION NAME CHAIN\nCOMM_NAME_NEXT         DC    A(0)             SECTION NAME CHAIN\nCOMM_NAME_NBR          DC    A(0)             NBR OF SECTION NAMES\n\nCOMM_ESD_PREV          DC    A(0)             EXTERNAL SYMBOL CHAIN\nCOMM_ESD_NEXT          DC    A(0)             EXTERNAL SYMBOL CHAIN\nCOMM_ESD_NBR           DC    F'0'             NBR OF ESD ITEMS\n\nCOMM_RLD_AREA_PREV     DC    A(0)             RLD AREA CHAIN\nCOMM_RLD_AREA_NEXT     DC    A(0)             RLD AREA CHAIN\n\nCOMM_USER_AREA_PREV_1  DC    A(0)             USER AREA CHAIN\nCOMM_USER_AREA_NEXT_1  DC    A(0)             USER AREA CHAIN\n\nCOMM_USER_AREA_PREV_2  DC    A(0)             USER AREA CHAIN\nCOMM_USER_AREA_NEXT_2  DC    A(0)             USER AREA CHAIN\n\nCOMM_ALL_AREA_PREV     DC    A(0)             ALL AREA CHAIN\nCOMM_ALL_AREA_NEXT     DC    A(0)             ALL AREA CHAIN\n\nCOMM_BASE_PREV         DC    A(0)             BASE CHAIN\nCOMM_BASE_NEXT         DC    A(0)             BASE CHAIN\n\nCOMM_DSECT_PREV        DC    A(0)             ASM START/ASM END DSECTS\nCOMM_DSECT_NEXT        DC    A(0)             DSECT CHAIN\n\nCOMM_USING_PREV        DC    A(0)             USING CHAIN\nCOMM_USING_NEXT        DC    A(0)             USING CHAIN\n\nCOMM_KSDS_PREV         DC    A(0)             DSECT KSDS CHAIN\nCOMM_KSDS_NEXT         DC    A(0)             DSECT KSDS CHAIN\n\nCOMM_SYSLIB_PREV       DC    A(0)             DSECT SYSLIB CHAIN\nCOMM_SYSLIB_NEXT       DC    A(0)             DSECT SYSLIB CHAIN\n\nCOMM_CSECT_EP          DC    A(0)             ENTRY POINT\nCOMM_CSECT_LENGTH      DC    F'0'             CSECT LENGTH\nCOMM_CSECT_TEXT        DC    A(0)             TEXT'S STORAGE ADDRESS\nCOMM_CSECT_TEXT_END    DC    A(0)             TEXT'S ENDING ADDRESS\n\nCOMM_ASM_PREV          DC    A(0)             ASSEMBLER SOURCE\nCOMM_ASM_NEXT          DC    A(0)             ASSEMBLER SOURCE\n\nCOMM_USING_USING       DC    A(0)\nCOMM_USING_KSDS        DC    A(0)\nCOMM_USING_DSECT       DC    A(0)\nCOMM_USING_LABEL       DC    A(0)\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMM_DIALOG_TOKEN      DC    XL8'00'          DIALOG TOKEN\nCOMM_DIALOG_WORKMOD    DC    XL8'00'          DIALOG WORKMOD\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMM_CONF_DSN          DC    CL44' '\nCOMM_CONF_MEMBER       DC    CL8' '\nCOMM_CONF_VOLSER       DC    CL6' '\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMM_LMOD_DSN          DC    CL44' '\nCOMM_LMOD_VOLSER       DC    CL6' '\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMM_DDNAME_LENGTH     DC    H'8'\nCOMM_DDNAME            DC    CL8'DISMOD'      DDNAME\n\nCOMM_LMOD_NAME_LENGTH  DC    H'8'\nCOMM_LMOD              DC    CL8' '           LMOD NAME\n\nCOMM_CSECT_NAME_LENGTH DC    H'8'\nCOMM_CSECT             DC    CL8' '           CSECT NAME\n\nCOMM_ASSEMBLER_RC      DC    H'0'             ASSEMBLER'S RC\nCOMM_PREFIX_LENGTH     DC    H'0'             LABEL PREFIX LENGTH\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              Flag bytes/function code bytes                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMM_FLAGS             DC    X'00'            GLOBAL CONTROL FLAGS\n$COMM_FLAGS_ABORT      EQU   X'80'            .. SERIOUS ERROR, ABORT\n$COMM_FLAGS_ABEND      EQU   X'40'            .. ABEND AT EXIT\n$COMM_FLOAT            EQU   X'02'            .. FLOATING POINT\n$COMM_B2               EQU   X'01'            .. B2 INSTRUCTIONS\n$COMM_Z                EQU   X'08'            .. Z INSTRUCTIONS\n$COMM_ASSEM            EQU   X'04'            .. ASM,START FOUND\n$COMM_NO_RLD_WARN      EQU   X'02'            .. NO RLD OVERLAP WARNING\n$COMM_AREA_DEBUG       EQU   X'01'            .. AREA DEBUGGING\n\nCOMM_FLAGS2            DC    X'00'            MORE CONTROL FLAGS\n$DONT_CLEAR_MESSAGES   EQU   X'80'            .. DON'T CLEAR MESSAGES\n\nCOMM_RUN_MODE          DC    C' '             RUN MODE\n$COMM_RUN_BATCH        EQU   C'B'             .. BATCH\n$COMM_RUN_TSO          EQU   C'T'             .. TSO\n\nCOMM_DDS               DC    X'00'\n$DISIN_DD              EQU   X'80'            .. DISIN    DD PRESENT\n$DISPRINT_DD           EQU   X'40'            .. DISPRINT DD PRESENT\n$DISMOD_DD             EQU   X'20'            .. DISMOD   DD PRESENT\n$DISPUNCH_DD           EQU   X'10'            .. DISPUNCH DD PRESENT\n$DISDSECT_DD           EQU   X'08'            .. DISDSECT DD PRESENT\n$DISTRACE_DD           EQU   X'04'            .. DISTRACE DD PRESENT\n$DISDEBUG_DD           EQU   X'02'            .. DISDEBUG DD PRESENT\n\nCOMM_ASSEM_DDS         DC    X'00'            DDS FOR HL ASSEMBLER\n$SYSIN_DD              EQU   X'02'            .. SYSIN    DD PRESENT\n$SYSPRINT_DD           EQU   X'01'            .. SYSPRINT DD PRESENT\n\nPRINT_COMMAND          DC    X'00'            PRINT FUNCTION\n$PRINT_CLOSE           EQU   X'01'            .. CLOSE DISPRINT\n$PRINT_HEADING         EQU   X'02'            .. PRINT HEADING\n$PRINT_OPEN            EQU   X'03'            .. OPEN DISPRINT\n$PRINT_PRINT           EQU   X'04'            .. PRINT\n$PRINT_SUB_HEAD        EQU   X'05'            .. PRINT SUB HEADING\n\nCOMM_DEBUG_CMD         DC    C' '             DEBUG FUNCTION\n$DEBUG_INFO            EQU   C'D'             .. PRINT DEBUG INFO\n$DEBUG_HEAD            EQU   C'H'             .. PRINT DEBUG HEADING\n$DEBUG_PRINT           EQU   C'P'             .. PRINT GIVEN DATA\n\nCOMM_BIND_FUNC         DS    X                BINDER FUNCTION\n$BIND_STARTD           EQU   X'01'            .. START DIALOG\n$BIND_NAMES            EQU   X'02'            .. OBTAIN SECTION NAMES\n$BIND_ESD_RLD          EQU   X'03'            .. OBTAIN ESD AND RLD\n$BIND_TEXT             EQU   X'04'            .. READ TEXT\n$BIND_ENDD             EQU   X'05'            .. END DIALOG\n\nCOMM_VAR_FUNC          DC    X'00'            SPF VARAIBLE FUNCTION\n$VAR_DEFINE            EQU   X'01'            .. VDEFINE VARIABLES\n$VAR_DELETE            EQU   X'02'            .. VDELETE VARIABLES\n\nCOMM_VDATA_FUNC        DC    X'00'            VDATA FUNCTION\n$VDATA_GETMAIN         EQU   X'01'            .. VDEFINE VARIABLES\n$VDATA_FREEMAIN        EQU   X'02'            .. VDELETE VARIABLES\n$VDATA_VDEFINE         EQU   X'03'            .. VDEFINE VDATA\n$VDATA_VDELETE         EQU   X'04'            .. VDELETE VDATA\n\nCOMM_DSECT_FUNC        DC    X'00'            DSECT FUNCTION\n$DSECT_DISPLAY_ALL     EQU   X'01'            .. DISPLAY ALL INFO\n$DSECT_SELECT          EQU   X'02'            .. ALLOW SELECTION\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMM_DAIR_FUNC         DS    X                DAIR FUNCTION\n$DAIR_ALLOC            EQU   X'01'            .. ALLOCATE\n$DAIR_CONCAT           EQU   X'02'            .. CONCAT (SYSLIB)\n$DAIR_DEALLOC          EQU   X'03'            .. DEALLOCATE\nCOMM_DAIR_OPTIONS      DS    X                DAIR OPTIONS\n$DAIR_USE_DDNAME       EQU   X'80'            .. USE SPECIFIED DDNAME\n$DAIR_SYSPRINT         EQU   X'20'            .. DATA SET FOR SYSPRINT\n$DAIR_SYSIN            EQU   X'10'            .. DATA SET FOR SYSIN\nCOMM_DAIR_DSN          DS    CL44             DSN FOR ALLOC/DE-ALLOC\nCOMM_DAIR_DD           DS    CL8              DD NAME\nCOMM_DAIR_MEMBER       DS    CL8              MEMBER NAME OR BLANK\nCOMM_DAIR_VOLSER       DS    CL6              VOLSER OR BLANK\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMM_DSINFO_DSN        DC    CL44' '          DSN FOR DSINFO\nCOMM_DATASET_TYPE      DC    X'00'\n$DATASET_TYPE_VSAM     EQU   X'01'            .. VSAM CLUSTER\n$DATASET_TYPE_DATA     EQU   X'02'            .. VSAM DATA COMPONENT\n$DATASET_TYPE_GDG      EQU   X'03'            .. GDG\n$DATASET_TYPE_INDEX    EQU   X'04'            .. VSAM INDEX COMPONENT\n$DATASET_TYPE_NONVSAM  EQU   X'05'            .. NON-VSAM\n$DATASET_TYPE_OTHER    EQU   X'06'            .. PARTITIONED\n$DATASET_TYPE_PS       EQU   X'07'            .. SEQUENTIAL\n$DATASET_TYPE_PDS      EQU   X'08'            .. PARTITIONED\nCOMM_DSINFO_ERROR_INFO DS    0XL4\n                       DS    XL2              MODULE ID\n                       DS    X                RETURN CODE\n                       DS    X                REASON CODE\nCOMM_DSINFO_MSG        DC    CL30' '\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMM_RC                DC    X'00'            TERMINATION RETURN CODE\n\n* ------------------------------------------------------------------- *\n*              Condition code type for extended branch mnemonics      *\n* ------------------------------------------------------------------- *\nCOMM_CC                DC    X'00'            CONDITION CODE TYPE\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMM_PREFIX            DC    CL4' '           LABEL PREFIX\nCOMM_DD_NUMBER         DC    PL4'0'           DD NUMBER FOR DYNALLOC\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                       DS    0H\nCOMM_INFO_01           DC    CL64' '\nCOMM_INFO_02           DC    CL64' '\nCOMM_INFO_03           DC    CL64' '\nCOMM_INFO_04           DC    CL64' '\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMM_MSG_ID            DC    X'00'            MESSAGE ID\nCOMM_MSG_CSECT         DC    CL8' '           MESSAGE CSECT\nCOMM_MSG_1             DC    CL75' '\nCOMM_MSG_2             DC    CL75' '\nCOMM_MSG_3             DC    CL75' '\nCOMM_MSG_4             DC    CL75' '\nCOMM_MSG_5             DC    CL75' '\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMM_CONTROL_STMT      DS    CL80             SYSIN CONTROL STATEMENTS\nCOMM_DEBUG_IO          DS    CL133            DEBUG I/O\nCOMM_SUBHEAD           DC    CL133' '         SUB HEADING\n\nCOMM_ASSEMBLER_IO      DC    CL133' '\n                       ORG   COMM_ASSEMBLER_IO+1\nCOMM_ASSEMBLER_DISP    DS    CL6\n                       ORG   COMM_ASSEMBLER_IO+23\nCOMM_ASSEMBLER_ADDR1   DS    CL5\n                       ORG   COMM_ASSEMBLER_IO+41\nCOMM_ASSEMBLER_LABEL   DS    CL63\n                       ORG\n\nPRINT_CC               DC    C' '\nPRINT_DATA             DC    CL132' '\n\nCOMM_SOURCE            DS    0C\nCOMM_SOURCE_DISP       DS    CL8\n                       DS    CL2\nCOMM_SOURCE_HEX_1      DS    CL4\n                       DS    C\nCOMM_SOURCE_HEX_2      DS    CL4\n                       DS    C\nCOMM_SOURCE_HEX_3      DS    CL4\n                       DS    C\nCOMM_SOURCE_HEX_4      DS    CL4\n                       DS    CL5\nCOMM_SOURCE_LABEL      DS    CL8\n                       DS    C\nCOMM_SOURCE_OPCODE     DS    CL5\n                       DS    C\nCOMM_SOURCE_OPERANDS   DS    CL101\nCOMM_SOURCE_L          EQU   *-COMM_SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOMM_BLANKS            DC    256C' '\n\nCOMM_HEXCHAR           EQU   *-C'0'\n                       DC    C'0123456789ABCDEF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          TRACE TABLE ENTRY                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTRENTRY        DSECT\nTREMOD         DS    CL8                 MODULE NAME\nTREID          DS    CL8                 TRACE ID\nTREDATA1       DS    CL8                 TRACE DATA 1\nTREDATA2       DS    CL8                 TRACE DATA 2\nTRENTRYL       EQU   *-TRENTRY           ENTRY LENGTH\n         MEND\n./ ADD NAME=DISSPFD  0117-08351-09118-1551-00060-00044-00000-MACLIB\n         MACRO\n         DISSPFD  &TYPE=\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         MNOTE 12,'INVALID TYPE'\n         MEXIT\n.CSECT   ANOP\nDISSPFD                CSECT\nDISSPFD                AMODE 31\nDISSPFD                RMODE ANY\n         AGO   .COMM\n.DSECT   ANOP\nDISSPFD                DSECT\n.COMM    ANOP\nSPF_LVLINE             DC    F'0'       LAST VISIBLE LINE\nSPF_VWIDTH             DC    F'0'       DYNAMIC AREA WIDTH\nSPF_VCOL               DC    F'0'       DYNAMIC AREA COLUMN\nSPF_VDEPTH             DC    F'0'       DYNAMIC AREA DEPTH\nSPF_VROW               DC    F'0'       DYNAMIC AREA ROW\nSPF_ZSCROLLN           DC    F'0'       NUMBER OF LINES TO SCROLL\nSPF_CURSOR_POSITION    DC    F'0'       CURSOR POSITION\n\nSPF_VTYPE              DC    CL08' '    DYNAMIC AREA TYPE\nSPF_ZSCROLLA           DC    CL08' '    SCROLL AMOUNT\nSPF_ZVERB              DC    CL08' '    SPF VERB\nSPF_ZCMD               DC    CL80' '    SPF COMMAND AREA\nSPF_VSCR               DC    CL04'CSR'  ONLY USED IF SPF NOT AVAILABLE\nSPF_AREA               DC    CL08' '    DYNAMIC AREA NAME\n\nSPF_CONF_DSN           DC    CL44' '    SAVED CONFIG DATA DSN\nSPF_CONF_VOLSER        DC    CL06' '    SAVE CONFIG DATASET VOLSER\nSPF_CONF_MEMBER        DC    CL08' '    SAVED CONFIG MEMBER DSN\n\nSPF_LMOD_DSN           DC    CL44' '    LMOD DATA SET NAME\nSPF_LMOD_VOLSER        DC    CL06' '    LMOD DATA SET VOLSER\nSPF_LMOD               DC    CL08' '    LMOD\nSPF_CSECT              DC    CL08' '    CSECT\nSPF_CSECT_LENGTH       DC    CL08' '    CSECT LENGTH IN HEX\n\nSPF_DD                 DC    CL08' '    DD NAME\nSPF_YES_OR_NO          DC    CL03' '    CONFIRMATION YES OR NO\nSPF_FUNCTION           DC    CL01' '    FUNCTION\nSPF_PREFIX             DC    CL04' '    LABEL PREFIX\nSPF_DDID               DC    CL08' '    DATA ID (RETURNED BY LMINIT)\nSPF_REGISTER           DC    CL03' '    REGISTER NAME\nSPF_BEGIN              DC    CL08' '    BEGIN DISP\nSPF_END                DC    CL08' '    END DISP\n\nSPF_OUTPUT_DSN         DC    CL44' '    OUTPUT (GENERATED SOURCE)\n\nSPF_FLAGS              DC    X'00'      FLAGS/SWITCHES\n$SPF_VPUT              EQU   X'80'      .. VPUT HAS BEEN ISSUED\n\nSPF_MSG_1              DC    CL80' '\nSPF_MSG_2              DC    CL80' '\nSPF_MSG_3              DC    CL80' '\nSPF_MSG_4              DC    CL80' '\nSPF_MSG_5              DC    CL80' '\n\n         MEND\n./ ADD NAME=DXDPREF  0100-08351-08351-1447-00006-00006-00000-MACLIB\nDXD_PREFIX    DS    0F\nDXD_SAVE      DS    18F\nDXD_TRACE_1   DS    CL8\nDXD_TRACE_2   DS    CL8\nDXD_CSECT     DS    CL8\nDXD_PREFIX_L  EQU   *-DXD_PREFIX\n./ ADD NAME=ITRACE   0102-07087-09197-1419-00083-00072-00000-MACLIB\n.* ------------------------------------------------------------------*\n.*                                                                   *\n.*                        TRACE MACRO                                *\n.*                                                                   *\n.*       The trace function always captures the CSECT name (taken    *\n.*       from the module prefix data) and a TRACE ID (specified on   *\n.*       this macro).                                                *\n.*                                                                   *\n.*       One or two data elements (8 bytes each) may be captured at  *\n.*       any trace point.  The data to be captured may be specified  *\n.*       in either of two ways: DATA1 or RDATA1 and DATA2 or RDATA2. *\n.*       DATA1 and RDATA1 are mutually exclusive as are DATA2 and    *\n.*       RDATA2.  DATA1 and DATA2 specify the address of data to be  *\n.*       captured, RDATA1 and RDATA2 specify a register whose        *\n.*       contents are to be captured.                                *\n.*                                                                   *\n.*       For example:                                                *\n.*                                                                   *\n.*                 ITRACE ID=POINTA,DATA1=VALUE1,RDATA2=R4           *\n.*                                                                   *\n.*          In this case the trace entry would include the CSECT     *\n.*          name, the ID data \"POINTA\", 8 bytes of data beginning    *\n.*          at VALUE1's address and the contents of register 4.      *\n.*                                                                   *\n.* ------------------------------------------------------------------*\n         MACRO\n&NAME    ITRACE &OPT,&ID=,&DATA1=,&DATA2=,&RDATA1=,&RDATA2=\n         GBLC  &TROPT\n         AIF   (T'&OPT NE 'O').OPT0000\n         AIF   (T'&DATA1 NE 'O' AND T'&RDATA1 NE 'O').ERR0010\n         AIF   (T'&DATA2 NE 'O' AND T'&RDATA2 NE 'O').ERR0020\n         AIF   ('&TROPT' EQ 'OFF').MEXIT\n         AIF   (T'&DATA1 EQ 'O').DATA020\n         AIF   ('&DATA1'(1,1) EQ '(').DATA010\n         LA    R14,&DATA1                DATA ADDRESS\n         MVC   COMM_TRACE_ITEM_1,0(R14)  MOVE DATA\n         AGO   .DATA030\n.DATA010 ANOP\n         MVC   COMM_TRACE_ITEM_1,0&DATA1 MOVE DATA\n         AGO   .DATA030\n.DATA020 ANOP\n         AIF   (T'&RDATA1 EQ 'O').DATA030\n         STCM  &RDATA1,15,COMM_TRACE_ITEM_1\n.DATA030 ANOP\n         AIF   (T'&DATA2 EQ 'O').DATA050\n         AIF   ('&DATA2'(1,1) EQ '(').DATA040\n         LA    R14,&DATA2                DATA ADDRESS\n         MVC   COMM_TRACE_ITEM_2,0(R14)  MOVE DATA\n         AGO   .DATA060\n.DATA040 ANOP\n         MVC   COMM_TRACE_ITEM_2,0&DATA2 MOVE DATA\n         AGO   .DATA060\n.DATA050 ANOP\n         AIF   (T'&RDATA2 EQ 'O').DATA060\n         STCM  &RDATA2,15,COMM_TRACE_ITEM_2\n.DATA060 ANOP\n         BAL   R14,TRACE000              ENTER TRACE ROUTINE\n         AIF      (T'&ID EQ 'O').NOID\n&NAME    DC    CL8'&ID'                  TRACE ID\n         AGO   .ID\n.NOID    ANOP\n         MNOTE 4,'NO ID GIVEN, ''**NO ID**'' GENERATED'\n&NAME    DC    CL8'**NOID**'\n.ID      ANOP\n         MEXIT\n.OPT0000 ANOP\n         AIF   ('&OPT' EQ 'ON').OPT0010\n         AIF   ('&OPT' EQ 'OFF').OPT0010\n         AGO   .ERR0030\n.OPT0010 ANOP\n&TROPT   SETC  '&OPT'\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'DATA2 AND RDATA2 ARE MUTUALLY EXCLUSIVE'\n         MEXIT\n.ERR0030 ANOP\n         MNOTE 12,'TRACE OPTION MUST BE -ON- OR -OFF-'\n.MEXIT   ANOP\n         MEXIT\n         MEND\n./ ADD NAME=LIBBLOK  0100-08351-08351-1041-00024-00024-00000-MACLIB\n*---------------------------------------------------------------------*\n*                                                                     *\n*     SYSLIB for assembling DSECTs                                    *\n*                                                                     *\n*                                                                     *\n*   The disassembler allows DSECTs assembled during a dis-assembly.   *\n*                                                                     *\n*   To allow this, the disassembler, loads and then links to the      *\n*   high-level assembler.  The assembler will use the \"normal DDs\".   *\n*   This means that any COPY or MACROs whose source is not defined    *\n*   in-line will need to be resolved via a library in the SYSLIB      *\n*   concatenation.                                                    *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nDISASM_SYSLIB        DSECT\nDISASM_SYSLIB_NEXT   DS     A           NEXT KSDS BLOCK\nDISASM_SYSLIB_EYE    DS     CL8         EYE CATCHER\nDISASM_SYSLIB_DDNAME DS     CL8         DD NAME\nDISASM_SYSLIB_DSNAME DS     CL44        DSN\nDISASM_SYSLIB_DCB    DS     (DCB_L)X    DCB\nDISASM_SYSLIB_FLAGS  DS     X\n$DISASM_SYSLIB_OPEN  EQU    X'80'       .. DCB IS OPEN\nDISASM_SYSLIB_L      EQU    *-DISASM_SYSLIB\n./ ADD NAME=MESG     0103-07038-08331-1125-00014-00013-00000-MACLIB\n         MACRO\n&NAME    MESG &NBR\n         GBLA &GNBR\n         AIF  ('&NBR' EQ 'END').GENEND\n         AIF  (&NBR GT 255).TOOHIGH\n&GNBR    SETA &SYSNDX\nA&GNBR   DS   0C\n         DC   AL1(&NBR)                       MESSAGE ID\n         DC   AL4(Z&GNBR-A&GNBR)              LENGTH\n         MEXIT\n.GENEND  ANOP\n         DC   X'FF'\nZ&GNBR   DS   0C\n         MEND\n./ ADD NAME=MESGCOMP 0112-07038-08331-1118-00072-00017-00000-MACLIB\n         MACRO\n         MESGCOMP &LINE,&TYPE,&LENGTH,&LBL\n         GBLA  &GMAXL\n         AIF   ('&TYPE' EQ 'ADDR').ADDR000\n         AIF   ('&TYPE' EQ 'CHAR').CHAR000\n         AIF   ('&TYPE' EQ 'HALFWORD').HALF000\n         AIF   ('&TYPE' EQ 'HEX').HEX000\n         AIF   ('&TYPE' EQ 'FULLWORD').FULL000\n         AIF   ('&TYPE' EQ 'TEXT').TEXT000\n         MNOTE 12,'INVALID -TYPE-'\n         MEXIT\n.ADDR000 ANOP\nA&SYSNDX EQU    *\n         DC     AL2(B&SYSNDX-A&SYSNDX)        LENGTH OF THIS DESCRIPTOR\n         DC     AL1($MSG_COMPONENT_ADDRESS)   COMPONENT TYPE\n         DC     AL2(&LENGTH)                  LENGTH IN OUTPUT MESSAGE\n         DC     AL2(&LBL-DISCOMM)             DISP INTO COMMON AREA\n         DC     AL1(&LINE)                    MESSAGE LINE\nB&SYSNDX EQU    *\n         AGO    .MAXL00\n.CHAR000 ANOP\nA&SYSNDX EQU    *\n         DC     AL2(B&SYSNDX-A&SYSNDX)        LENGTH OF THIS DESCRIPTOR\n         DC     AL1($MSG_COMPONENT_CHAR)      COMPONENT TYPE\n         DC     AL2(&LENGTH)                  LENGTH IN OUTPUT MESSAGE\n         DC     AL2(&LBL-DISCOMM)             DISP INTO COMMON AREA\n         DC     AL1(&LINE)                    MESSAGE LINE\nB&SYSNDX EQU    *\n         AGO    .MAXL00\n.HALF000 ANOP\nA&SYSNDX EQU    *\n         DC     AL2(B&SYSNDX-A&SYSNDX)        LENGTH OF THIS DESCRIPTOR\n         DC     AL1($MSG_COMPONENT_HALFWORD)  COMPONENT TYPE\n         DC     AL2(&LENGTH)                  LENGTH IN OUTPUT MESSAGE\n         DC     AL2(&LBL-DISCOMM)             DISP INTO COMMON AREA\n         DC     AL1(&LINE)                    MESSAGE LINE\nB&SYSNDX EQU    *\n         AGO    .MAXL00\n.HEX000  ANOP\nA&SYSNDX EQU    *\n         DC     AL2(B&SYSNDX-A&SYSNDX)        LENGTH OF THIS DESCRIPTOR\n         DC     AL1($MSG_COMPONENT_HEX)       COMPONENT TYPE\n         DC     AL2(&LENGTH)                  LENGTH IN OUTPUT MESSAGE\n         DC     AL2(&LBL-DISCOMM)             DISP INTO COMMON AREA\n         DC     AL1(&LINE)                    MESSAGE LINE\nB&SYSNDX EQU    *\n         AGO    .MAXL00\n.FULL000 ANOP\nA&SYSNDX EQU    *\n         DC     AL2(B&SYSNDX-A&SYSNDX)        LENGTH OF THIS DESCRIPTOR\n         DC     AL1($MSG_COMPONENT_FULLWORD)  COMPONENT TYPE\n         DC     AL2(&LENGTH)                  LENGTH IN OUTPUT MESSAGE\n         DC     AL2(&LBL-DISCOMM)             DISP INTO COMMON AREA\n         DC     AL1(&LINE)                    MESSAGE LINE\nB&SYSNDX EQU    *\n         AGO    .MAXL00\n.TEXT000 ANOP\nA&SYSNDX EQU    *\n         DC     AL2(B&SYSNDX-A&SYSNDX)        LENGTH OF THIS DESCRIPTOR\n         DC     AL1($MSG_COMPONENT_TEXT)      COMPONENT TYPE\n         DC     AL2(Y&SYSNDX-X&SYSNDX)        LENGTH IN OUTPUT MESSAGE\n         DC     AL2(0)\n         DC     AL1(&LINE)                    MESSAGE LINE\nX&SYSNDX EQU    *\n         DC     C&LBL\nY&SYSNDX EQU    *\nB&SYSNDX EQU    *\n.MAXL00  ANOP\n         AIF    (&GMAXL GE &LINE).MEXIT\n&GMAXL   SETA   &LINE\n.MEXIT   ANOP\n         MEND\n./ ADD NAME=MSG      0105-08331-08345-1605-00030-00030-00000-MACLIB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*             MAP THE MESSAGE CSECT                                   *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG_CSECT                   DSECT\nMSG_CSECT_NAME              DS   CL8        CSECT NAME\nMSG_CSECT_LENGTH            DS   AL4        LENGTH ALL DATA FOR CSECT\nMSG_CSECT_MSGS              DS   0C\n\nMSG_MSG                     DSECT\nMSG_ID                      DS   X          MESSAGE ID\nMSG_LENGTH                  DS   AL4        LENGTH OF ALL COMPONENTS\nMSG_COMPONENTS              DS   0C         FIRST COMPONENT\n\nMSG_COMPONENT               DSECT\nMSG_COMPONENT_LENGTH        DS   XL2        LENGTH OF THIS DESCRIPTOR\nMSG_COMPONENT_TYPE          DS   X          TYPE\n$MSG_COMPONENT_ADDRESS      EQU  C'A'       .. ADDRESS\n$MSG_COMPONENT_CHAR         EQU  C'C'       .. CHARACTER\n$MSG_COMPONENT_HALFWORD     EQU  C'H'       .. HALFWORD\n$MSG_COMPONENT_HEX          EQU  C'X'       .. HEX\n$MSG_COMPONENT_FULLWORD     EQU  C'F'       .. FULLWORD\n$MSG_COMPONENT_TEXT         EQU  C'T'       .. CONSTANT TEXT\nMSG_COMPONENT_OUTPUT_LENGTH DS   XL2        LENGTH IN OUTPUT MESSAGE\nMSG_COMPONENT_DISP          DS   XL2        DATA DISP INTO DISCOMM\nMSG_COMPONENT_LINE          DS   X          MESSAGE LINE NUMBER\nMSG_COMPONENT_TEXT          DS   0C         PRESENT FOR CONSTANT TEXT\n./ ADD NAME=OPCODE   0103-07038-08345-1616-00158-00127-00000-MACLIB\n         MACRO\n.* ------------------------------------------------------------------ *\n.*                                                                    *\n.*    DEFINE OPCODES                                                  *\n.*      MACH    OPCODE IN MACHINE HEX                                 *\n.*      MNEM    MNEMONIC FOR THE INSTRUCTION                          *\n.*      LENGTH  LENGTH OF INSTRUCTION                                 *\n.*      COMMENT ANY COMMENT (PRINTED IN COMMENT AREA OF GENNED SOURCE)*\n.*      FLAGS                                                         *\n.*                - OPCODE_EXT    USE EXTENDED NMEMONIC IF AVAILABLE  *\n.*                - OPCODE_SVC    THIS INSTRUCTION IS AN SVC          *\n.*                - OPCODE_REF    THIS INSTRUCTION CAUSES REFERENCE(S)*\n.*                - OPCODE_CCA    SETS \"ARITHMETIC\" CONDITION CODE    *\n.*                - OPCODE_CC     SETS \"COMPARE\" CONDITION CODE       *\n.*                - OPCODE_CCL    SETS \"LOGICAL\" CONDITION CODE       *\n.*                - OPCODE_BRANCH THIS IS A \"BRANCHING\" INSTRUCTION   *\n.*      REGS    REGISTER CONSTRAINTS                                  *\n.*                - OPCODE_1EVEN  R1 MUST BE EVEN NUMBER              *\n.*                - OPCODE_104    R1 MUST BE 0 OR 4                   *\n.*                - OPCODE_10246  R1 MUST BE 0, 2, 4, OR 6            *\n.*                - OPCODE_2EVEN  R2 MUST BE EVEN NUMBER              *\n.*                - OPCODE_204    R2 MUST BE 0 OR 4                   *\n.*                - OPCODE_20246  R2 MUST BE 0, 2, 4, OR 6            *\n.*                                                                    *\n.*                                                                    *\n.*                                                                    *\n.*                                                                    *\n.* ------------------------------------------------------------------ *\n         OPCODE &MACH,                                                 +\n               &MNEM,                                                  +\n               &FORMAT,                                                +\n               &LENGTH,                                                +\n               &COMMENT,                                               +\n               &FLAGS=,                                                +\n               &REGS=,                                                 +\n               &TYPE=DEFINE\n         GBLB &OPSW\n         GBLC &OPTBL(256),&HEXTBL(16)\n         LCLA &SUB1,&SUB2,&SUB3\n         LCLC &OP1,&OP2,&OPTS\n         AIF  (&OPSW).LBL020\n&OPSW    SETB 1\n&SUB1    SETA 1\n.LBL010  ANOP\n&OPTBL(&SUB1) SETC '0'\n&SUB1    SETA &SUB1+1\n         AIF  (&SUB1 LE 256).LBL010\n&HEXTBL(01) SETC '0'\n&HEXTBL(02) SETC '1'\n&HEXTBL(03) SETC '2'\n&HEXTBL(04) SETC '3'\n&HEXTBL(05) SETC '4'\n&HEXTBL(06) SETC '5'\n&HEXTBL(07) SETC '6'\n&HEXTBL(08) SETC '7'\n&HEXTBL(09) SETC '8'\n&HEXTBL(10) SETC '9'\n&HEXTBL(11) SETC 'A'\n&HEXTBL(12) SETC 'B'\n&HEXTBL(13) SETC 'C'\n&HEXTBL(14) SETC 'D'\n&HEXTBL(15) SETC 'E'\n&HEXTBL(16) SETC 'F'\n.LBL020  ANOP\n         AIF  ('&TYPE' EQ 'INDEX').LBL130\n         AIF  ('&TYPE' NE 'DEFINE').ERR70\n         AIF  (T'&MACH EQ 'O').ERR010\n         AIF  (K'&MACH NE 2).ERR020\n         AIF  (T'&LENGTH EQ 'O').ERR080\n         AIF  (&LENGTH EQ 2).LBL030\n         AIF  (&LENGTH EQ 4).LBL030\n         AIF  (&LENGTH NE 6).ERR090\n.LBL030  ANOP\n         AIF  (K'&MNEM GT 5).ERR100\n&OP1     SETC '&MACH'(1,1)\n&OP2     SETC '&MACH'(2,1)\n&SUB1    SETA 1\n.LBL040  ANOP\n         AIF  ('&OP1' EQ '&HEXTBL(&SUB1)').LBL050\n         AIF  (&SUB1 EQ 16).ERR030\n&SUB1    SETA &SUB1+1\n         AGO  .LBL040\n.LBL050  ANOP\n&SUB2    SETA &SUB1\n&SUB1    SETA 1\n.LBL060  ANOP\n         AIF  ('&OP2' EQ '&HEXTBL(&SUB1)').LBL070\n         AIF  (&SUB1 EQ 16).ERR030\n&SUB1    SETA &SUB1+1\n         AGO  .LBL060\n.LBL070  ANOP\n&SUB3    SETA &SUB1\n&SUB1    SETA (16*(&SUB2-1))+&SUB3\n         AIF  ('&OPTBL(&SUB1)' NE '0').ERR040\n&OPTBL(&SUB1) SETC 'MACH&MACH'\n         AIF  (T'&MNEM EQ 'O').ERR050\n         AIF  (T'&FORMAT EQ 'O').ERR060\nMACH&MACH DC   CL2'&MACH'           MACHINE CODE FOR THIS INSTRUCTION\n          DC   CL05'&MNEM'          MNEMONIC\n          DC   AL2(&LENGTH)         INSTRUCTION LENGTH\n          DC   AL1(&FORMAT)         FORMAT CODE\n&OPTS    SETC '0'\n         AIF  (T'&FLAGS EQ 'O').LBL080\n&OPTS    SETC '&FLAGS'\n.LBL080  ANOP\n         AIF  (T'&COMMENT EQ 'O').LBL090\n          DC   AL1(&OPTS)           FLAGS\n         AGO   .LBL100\n.LBL090  ANOP\n          DC   AL1(&OPTS+$OPCODE_NO_COMMENT)\n.LBL100  ANOP\n         AIF   (T'&REGS EQ 'O').LBL110\n          DC    AL1(&REGS)\n         AGO   .LBL120\n.LBL110  ANOP\n          DC    AL1(0)              NO REGISTER REQUIREMENTS\n.LBL120  ANOP\n         AIF   (T'&COMMENT EQ 'O').EXIT\n          DC   CL25&COMMENT         COMMENT\n         MEXIT\n.LBL130  ANOP\n&SUB1    SETA 1\n.LBL140  ANOP\n         DC    A(&OPTBL(&SUB1))\n         AIF   (&SUB1 EQ 256).EXIT\n&SUB1    SETA  &SUB1+1\n         AGO   .LBL140\n.ERR010  ANOP\n         MNOTE 12,'MACHINE CODE IS REQUIRED'\n         MEXIT\n.ERR020  ANOP\n         MNOTE 12,'MACHINE CODE MUST BE 2 CHARACTERS'\n         MEXIT\n.ERR030  ANOP\n         MNOTE 12,'MACHINE CODE CONTAINS INVALID HEX CHARACTER'\n         MEXIT\n.ERR040  ANOP\n         MNOTE 12,'MACHINE CODE &MACH IS DUPLICATELY DEFINED'\n         MEXIT\n.ERR050  ANOP\n         MNOTE 12,'MNEMONIC IS REQUIRED'\n         MEXIT\n.ERR060  ANOP\n         MNOTE 12,'INSTRUCTION FORMAT IS REQUIRED'\n         MEXIT\n.ERR070  ANOP\n         MNOTE 12,'INVALID TYPE PARAMETER'\n         MEXIT\n.ERR080  ANOP\n         MNOTE 12,'LENGTH IS REQUIRED'\n         MEXIT\n.ERR090  ANOP\n         MNOTE 12,'LENGTH MUST BE 2, 4, OR 6'\n         MEXIT\n.ERR100  ANOP\n         MNOTE 12,'MNEMONIC IS MORE THAN 5 CHARACTERS LONG'\n.EXIT    ANOP\n         MEND\n./ ADD NAME=PPDDATA  0101-09040-09040-0911-00009-00009-00000-MACLIB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPPD                DS    0C\nPPD_KEY            DC    0CL67\nPPD_SEQ            DC    XL4'00'\nPPD_NAME           DC    CL63' '\nPPD_DATA           DC    100X'00'\nPPD_L              EQU   *-PPD\n./ ADD NAME=REGEQU   0100-09250-09250-1002-00016-00016-00000-MACLIB\nR0       EQU    0\nR1       EQU    1\nR2       EQU    2\nR3       EQU    3\nR4       EQU    4\nR5       EQU    5\nR6       EQU    6\nR7       EQU    7\nR8       EQU    8\nR9       EQU    9\nR10      EQU    10\nR11      EQU    11\nR12      EQU    12\nR13      EQU    13\nR14      EQU    14\nR15      EQU    15\n./ ADD NAME=VARDSECT 0102-08351-09015-1342-00014-00013-00000-MACLIB\n* ------------------------------------------------------------------- *\n*              VARIABLE TABLE ENTRIES                                 *\n* ------------------------------------------------------------------- *\nVARDSECT     DSECT\nVAR_NAME     DS    CL8                   NAME KNOWN TO SPF\nVAR_FLAGS    DS    X                     FLAGS\n$VAR_DEFINED EQU   X'80'                 .. VARIABLE IS VDEFINED\n$VAR_NEVER   EQU   X'40'                 .. NEVER VDEFINE\n$VAR_VGET    EQU   X'20'                 .. VGET WHEN VDEFINED\n$VAR_VPUT    EQU   X'10'                 .. VPUT WHEN VDELETED\nVAR_LENGTH   DS    AL4                   VARIABLE LENGTH\nVAR_FORM     DS    CL8                   VARIABLE FORMAT\nVAR_DISP     DS    AL2                   DISPLACEMENT TO DATA\nVARDSECT_L   EQU   *-VARDSECT\n./ ADD NAME=VCONS    0144-08218-09128-0836-00059-00018-00000-MACLIB\n       MACRO\n       VCONS  &TYPE\n       GBLA   &NDX\n       GBLC   &NAME(45)\n&NAME(01)     SETC  'DISALIST'\n&NAME(02)     SETC  'DISASSEM'\n&NAME(03)     SETC  'DISBIND'\n&NAME(04)     SETC  'DISBLIST'\n&NAME(05)     SETC  'DISBMAIN'\n&NAME(06)     SETC  'DISCONF'\n&NAME(07)     SETC  'DISDAIR'\n&NAME(08)     SETC  'DISDCONV'\n&NAME(09)     SETC  'DISDDSCT'\n&NAME(10)     SETC  'DISDEBUG'\n&NAME(11)     SETC  'DISDIR'\n&NAME(12)     SETC  'DISDINFO'\n&NAME(13)     SETC  'DISDISP'\n&NAME(14)     SETC  'DISDLIST'\n&NAME(15)     SETC  'DISDMERG'\n&NAME(16)     SETC  'DISDSECT'\n&NAME(17)     SETC  'DISELIST'\n&NAME(18)     SETC  'DISESD'\n&NAME(19)     SETC  'DISGEN'\n&NAME(20)     SETC  'DISKLIST'\n&NAME(21)     SETC  'DISMSG'\n&NAME(22)     SETC  'DISNAME'\n&NAME(23)     SETC  'DISNLIST'\n&NAME(24)     SETC  'DISOPTS'\n&NAME(25)     SETC  'DISPARM'\n&NAME(26)     SETC  'DISPRINT'\n&NAME(27)     SETC  'DISREF'\n&NAME(28)     SETC  'DISRLD'\n&NAME(29)     SETC  'DISRLIST'\n&NAME(30)     SETC  'DISRR'\n&NAME(31)     SETC  'DISSCAN'\n&NAME(32)     SETC  'DISSLIST'\n&NAME(33)     SETC  'DISTDBUG'\n&NAME(34)     SETC  'DISTEXT'\n&NAME(35)     SETC  'DISTIOT'\n&NAME(36)     SETC  'DISTLSTB'\n&NAME(37)     SETC  'DISTLSTT'\n&NAME(38)     SETC  'DISTMAIN'\n&NAME(39)     SETC  'DISULIST'\n&NAME(40)     SETC  'DISVAR'\n&NAME(41)     SETC  'DISVBU'\n&NAME(42)     SETC  'DISVDATA'\n&NAME(43)     SETC  'DISXLIST'\n&NDX          SETA  1\n.LBL0010      AIF  ('&NAME(&NDX)' EQ '').END\n              AIF    ('&TYPE' EQ 'CSECT').LBL0020\nV_&NAME(&NDX) DS  V\n              AGO .LBL0030\n.LBL0020      ANOP\n              DC  V(&NAME(&NDX))\n.LBL0030      ANOP\n&NDX          SETA  &NDX+1\n              AGO .LBL0010\n.END          ANOP\n              MEND\n./ ADD NAME=VDEF     0101-08351-08351-1456-00029-00029-00001-MACLIB\n         MACRO\n         VDEF  &NAME=,               VARIABLE NAME                     +\n               &DATA=,               DATA ADDRESS                      +\n               &LENGTH=,             DATA LENGTH                       +\n               &FORM=,               DATA FORMAT                       +\n               &FLAGS=00\n.LBL0010 ANOP\n         AIF   (T'&NAME EQ 'O').ERR0010\n         AIF   (T'&LENGTH  EQ 'O').ERR0020\n         AIF   (T'&FORM    EQ 'O').ERR0030\n         DC    CL8'&NAME'             NAME KNOWN TO SPF\n         DC    AL1(&FLAGS)            FLAGS/INDICATORS\n         DC    AL4(&LENGTH)           LENGTH\n         DC    CL8'&FORM'             VARIABLE FORMAT\n         DC    AL2(&DATA-DISSPFD)     DISPLACEMENT TO DATA\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'NAME IS A REQUIRED PARAMETER'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'LENGTH IS A REQUIRED PARAMETER'\n         MEXIT\n.ERR0030 ANOP\n         MNOTE 12,'FORM IS A REQUIRED PARAMETER'\n         MEXIT\n.ERR0040 ANOP\n         MNOTE 12,'VARIABLE NAME IS DUPLICATED'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOAD": {"ttr": 1546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x15\\x7f\\x01\\x01\\x15\\x7f\\x156\\x00e\\x00e\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-06-06T00:00:00", "modifydate": "2001-06-06T15:36:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "REXX": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\t%\\x0f\\x01\\t%\\x0f\\x10\\x05\\x00.\\x00.\\x00\\x00\\xc4\\xc9\\xe2\\xc1\\xe2\\xd4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-09-07T00:00:00", "modifydate": "2009-09-07T10:05:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "DISASM"}, "text": "./ ADD NAME=DISASM   0106-07061-08366-1008-00012-00012-00000-REXX\n/* REXX ------------------------------------------------------------ */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nARG PARMS\n\nTRACE 'O'\n\nADDRESS TSO ISPEXEC \"CONTROL ERRORS RETURN\"\nADDRESS TSO ISPEXEC \"SELECT  CMD(DISASM2) NEWAPPL(DASM)\"\nEXIT (0)\n\n./ ADD NAME=DISASM2  0123-07061-09203-0850-00032-00023-00000-REXX\n/* REXX ------------------------------------------------------------ */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\n   TRACE 'O'\n\n\n   ADDRESS TSO FREE \"F(STEPLIBX)\"\n   ADDRESS TSO FREE \"F(D0000001)\"\n   ADDRESS TSO FREE \"F(D0000002)\"\n   ADDRESS TSO FREE \"F(D0000003)\"\n   ADDRESS TSO FREE \"F(DSECT01)\"\n   ADDRESS TSO FREE \"F(DSECT02)\"\n   ADDRESS TSO FREE \"F(DSECT03)\"\n   ADDRESS TSO FREE \"F(DISTEMP)\"\n   ADDRESS TSO FREE \"F(SYSIN)\"\n   ADDRESS TSO FREE \"F(SYSPRINT)\"\n\n   ADDRESS TSO\n        ISPEXEC \"LIBDEF ISPPLIB DATASET ID(DISASM.ISPPLIB)\"\n\n   ADDRESS TSO\n        ALLOC \"FI(STEPLIBX) DA(DISASM.LOADLIB ***) SHR REUSE\"\n\n   XX=TSOPEXT\n\n   \"DISASM\"\n\n   IF XX = '' THEN\n      ADDRESS TSO FREE \"FI(STEPLIBX)\"\n   ELSE\n      ADDRESS TSO ALLOC \"F(STEPLIBX) DA(\" XX \") SHR REUSE\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SOURCE": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\t%\\x0f\\x01\\t%\\x0f\\x10\\x05f[f[\\x00\\x00\\xc4\\xc9\\xe2\\xc1\\xe2\\xd4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-09-07T00:00:00", "modifydate": "2009-09-07T10:05:00", "lines": 26203, "newlines": 26203, "modlines": 0, "user": "DISASM"}, "text": "./ ADD NAME=DISALIST 0103-09119-09198-0833-00322-00316-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: DISALIST                                              *\n*                                                                     *\n*  Function:                                                          *\n*   Allow the user to enter assembler source.                         *\n*                                                                     *\n*   The disassembler allows the user to use actual assembler source   *\n*   to define DSECTs and LABELs with the DSECT.  The disassembler     *\n*   calls the assembler and then scans the SYSPRINT.  DSECTs can      *\n*   be pre-processed by utility DISASMU1 or during a dis-assembly.    *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISALIST CSECT\nDISALIST AMODE 31\nDISALIST RMODE ANY\n         USING DISALIST,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'DISALIST'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS\n         A     R15,DXD_START\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXDALIST,R13\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n         USING DCBE,SYSIN_DCBE\n         XC    COMM_DSECT_NEXT,COMM_DSECT_NEXT\n* ------------------------------------------------------------------- *\n*        Copy existing source to SYSIN                                *\n* ------------------------------------------------------------------- *\n         ITRACE ID=COPY_SRC\n         OPEN  (SYSIN_DCB,OUTPUT),                                     +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n         ICM   R3,15,COMM_ASM_NEXT            FIRST ASSEMBLER SOURCE\n         BZ    INIT0020\n         USING ASM_DSECT,R3\nINIT0010 DS    0H\n         PUT   SYSIN_DCB,ASM_SOURCE           WRITE TO SYSIN\n         LR    R1,R3\n         ICM   R3,15,ASM_NEXT                 NEXT SOURCE\n         FREEMAIN RU,                         FREE THE ASM BLOCK       +\n               A=(1),                                                  +\n               LV=ASM_DSECT_L\n         LTR   R3,R3                          ANOTHER SOURCE STATEMENT?\n         BNZ   INIT0010                       YES\nINIT0020 DS    0H\n         XC    COMM_ASM_NEXT,COMM_ASM_NEXT\n         CLOSE SYSIN_DCB,                                              +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TM    DXD_FLAG,$SYSIN_DDID           OBTAINED SYSIN DATA ID?\n         BO    MAIN0000                       YES\n         MVC   DXD_DD,SYSIN\n         BAL   R8,MAIN0100\n         MVC   DXD_SYSIN_DDID,SPF_DDID        SAVE SYSIN DATASET ID\n         OI    DXD_FLAG,$SYSIN_DDID\n         ITRACE ID=IN_DDID,                                            +\n               DATA1=DXD_SYSIN_DDID\n* ------------------------------------------------------------------- *\n*        Call EDIT                                                    *\n* ------------------------------------------------------------------- *\nMAIN0000 DS    0H\n         ITRACE ID=CALLEDIT,                                           +\n               DATA1=DXD_SYSIN_DDID\n         MVC   COMM_SPF_FUNCTION,EDIT         SPF FUNCTION\n         LA    R0,COMM_BLANKS\n         ST    R0,COMM_SPF_2                  .. DATASET NAME\n         ST    R0,COMM_SPF_3                  .. VOLSER\n         ST    R0,COMM_SPF_4                  .. PASSWORD\n         ST    R0,COMM_SPF_5                  .. PANEL NAME\n         ST    R0,COMM_SPF_6                  .. MACRO NAME\n         ST    R0,COMM_SPF_7                  .. PROFILE NAME\n         LA    R0,DXD_SYSIN_DDID              DDID\n         ST    R0,COMM_SPF_8                  SET DATA ID ADDR\n         OI    COMM_SPF_8,X'80'               FLAG END-OF-LIST\n         LA    R1,COMM_SPF_PARMS              PARMS FOR EDIT\n         L     R15,COMM_ISPLINK\n         BALR  R14,R15                        LINK TO EDIT\n* ------------------------------------------------------------------- *\n*        Determine if there is any source to assemble                 *\n* ------------------------------------------------------------------- *\n         NI    DXD_FLAG,255-$HAVE_SOURCE      RESET FLAG\n         LA    R1,MAIN0010                    EOD ADDRESS\n         ST    R1,DCBEEODA                    SET EOD ADDRESS\n         OPEN  (SYSIN_DCB,INPUT),                                      +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n         GET   SYSIN_DCB,DXD_IO\n         OI    DXD_FLAG,$HAVE_SOURCE\nMAIN0010 DS    0H\n         CLOSE SYSIN_DCB,                                              +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\n         TM    DXD_FLAG,$HAVE_SOURCE          ANY SOURCE TO ASSEMBLE?\n         BNO   EXIT0000                       NO\n* ------------------------------------------------------------------- *\n*        Allocate SYSLIB                                              *\n* ------------------------------------------------------------------- *\n         ITRACE ID=FREESLIB\n         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC   SET FUNCTION\n         MVC   COMM_DAIR_DD,SYSLIB            SET DDNAME\n         L     R15,V_DISDAIR\n         BALR  R14,R15                        FREE SYSLIB\n         ITRACE ID=ALOCSLIB\n         MVI   COMM_DAIR_FUNC,$DAIR_CONCAT    SET DAIR FUNCTION\n         L     R15,V_DISDAIR\n         BALR  R14,R15                        CALL DISDAIR\n         ITRACE ID=ALOC_RC,                                            +\n               RDATA1=R15\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0100                        NO\n* ------------------------------------------------------------------- *\n*        Call DISASSEM                                                *\n* ------------------------------------------------------------------- *\n         ITRACE ID=CALLASSEM\n         L     R15,V_DISASSEM                 DISASSEM ENTRY POINT\n         BALR  R14,R15\n* ------------------------------------------------------------------- *\n*        Free SYSLIB                                                  *\n* ------------------------------------------------------------------- *\n         OC    COMM_SYSLIB_NEXT,COMM_SYSLIB_NEXT\n         BZ    MAIN0020                       NOTHING TO FREE\n         ITRACE ID=FREE_LIB\n         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC   SET DAIR FUNCTION\n         MVC   COMM_DAIR_DD,SYSLIB            DD TO FREE\n         L     R15,V_DISDAIR                  DISDAIR EP\n         BALR  R14,R15                        FREE DD\n         ITRACE ID=FREE_RC,                                            +\n               RDATA1=R15\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0100                        NO\n* ------------------------------------------------------------------- *\n*        Get data id for SYSPRINT                                     *\n* ------------------------------------------------------------------- *\nMAIN0020 DS    0H\n         TM    DXD_FLAG,$SYSPRINT_DDID        HAVE SYSPRINT DATA ID?\n         BO    MAIN0030                       YES\n         MVC   DXD_DD,SYSPRINT                SET DD NAME\n         BAL   R8,MAIN0100                    GET DATA ID\n         MVC   DXD_SYSPRINT_DDID,SPF_DDID     SAVE SYSPRINT DATA ID\n         OI    DXD_FLAG,$SYSPRINT_DDID\n* ------------------------------------------------------------------- *\n*        Call BROWSE for SYSPRINT                                     *\n* ------------------------------------------------------------------- *\nMAIN0030 DS    0H\n         ITRACE ID=BROWSE,                                             +\n               DATA1=DXD_SYSPRINT_DDID\n         MVC   COMM_SPF_FUNCTION,BROWSE       SPF FUNCTION\n         LA    R0,COMM_BLANKS\n         ST    R0,COMM_SPF_2\n         ST    R0,COMM_SPF_3\n         ST    R0,COMM_SPF_4\n         ST    R0,COMM_SPF_5\n         LA    R0,DXD_SYSPRINT_DDID           DDID\n         ST    R0,COMM_SPF_6                  SET DATA ID ADDR\n         OI    COMM_SPF_6,X'80'               FLAG END-OF-LIST\n         LA    R1,COMM_SPF_PARMS              PARMS FOR BROWSE\n         L     R15,COMM_ISPLINK\n         BALR  R14,R15                        LINK TO BROWSE\n         CLC   COMM_ASSEMBLER_RC,H4           ASSEMBLER RC > 4?\n         BH    MAIN0000                       YES\n* ------------------------------------------------------------------- *\n*        Save source                                                  *\n* ------------------------------------------------------------------- *\n         LA    R1,MAIN0050                    EOD ADDRESS\n         ST    R1,DCBEEODA                    SET EOD ADDRESS\n         ITRACE ID=OPEN\n         OPEN  (SYSIN_DCB,INPUT),                                      +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n         LA    R3,COMM_ASM_PREV\nMAIN0040 DS    0H\n         ITRACE ID=GET\n         GET   SYSIN_DCB,DXD_IO               READ A RECORD\n         ITRACE ID=SOURCE\n         GETMAIN RU,                                                   +\n               LV=ASM_DSECT_L,                                         +\n               LOC=BELOW\nNEW      USING ASM_DSECT,R1\n         XC    NEW.ASM_DSECT(ASM_DSECT_L),NEW.ASM_DSECT\n         ST    R1,ASM_NEXT                    SET NEXT BLOCK IN PREV\n         ST    R3,NEW.ASM_PREV                SET PREV BLOCK IN NEW\n         MVC   NEW.ASM_EYE,ASM_ID             IDENTIFY THE BLOCK\n         MVC   NEW.ASM_SOURCE,DXD_IO          COPY DATA\n         LR    R3,R1\n         B     MAIN0040                       READ NEXT RECORD\n         DROP  NEW\nMAIN0050 DS    0H\n         ITRACE ID=CLOSE\n         CLOSE SYSIN_DCB,                                              +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        Obtain data set ID                                           *\n* ------------------------------------------------------------------- *\nMAIN0100 DS   0H\n         ITRACE ID=LMINIT\n         MVC   COMM_SPF_FUNCTION,LMINIT       SPF FUNCTION\n         LA    R0,DDID                        DDID (RETURNED BY LMINIT)\n         ST    R0,COMM_SPF_2\n         LA    R0,COMM_BLANKS\n         ST    R0,COMM_SPF_3\n         ST    R0,COMM_SPF_4\n         ST    R0,COMM_SPF_5\n         ST    R0,COMM_SPF_6\n         ST    R0,COMM_SPF_7\n         ST    R0,COMM_SPF_8\n         ST    R0,COMM_SPF_9\n         LA    R0,DXD_DD                      DDNAME\n         ST    R0,COMM_SPF_10                 SET DDNAME ADDR\n         OI    COMM_SPF_10,X'80'              SET END-OF-LIST\n         LA    R1,COMM_SPF_PARMS              SPF PARMS\n         L     R15,COMM_ISPLINK               ISPLINK ENTRY POINT\n         BALR  R14,R15                        OBTAIN DDID\n         ITRACE ID=LMINITRC,                                           +\n               RDATA1=R15,                                             +\n               DATA2=SPF_DDID\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0010                        NO\n         BR    R8\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=LM_ERR,                                             +\n               RDATA1=R15\n         MVI   COMM_MSG_ID,1\n         STH   R15,COMM_INFO_01\n         MVC   COMM_MSG_CSECT,MODID\n         L     R15,V_DISMSG\n         BALR  R14,R15                        CREATE MESSAGE(S)\nERR0100  DS    0H\n         MVC   SPF_MSG_1,COMM_MSG_1           COPY MESSAGE(S)\n         MVC   SPF_MSG_2,COMM_MSG_2\n         MVC   SPF_MSG_3,COMM_MSG_3\n         MVC   SPF_MSG_4,COMM_MSG_4\n         MVC   SPF_MSG_5,COMM_MSG_5\n         L     R0,COMM_VDATA_ADDR\n         L     R1,COMM_VDATA_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                         INITIALIZE VDATA\n         MVC   COMM_SPF_PANEL,DIS0000         SET PANEL NAME\n         OI    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR\n         L     R15,V_DISDISP\n         BALR  R14,R15                        DISPLAY PANEL\n         B     EXIT0000                       EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START         DC   Q(DXDALIST)\n\nH4                DC   H'4'\n\nASM_ID            DC   CL8'ASM'\nBROWSE            DC   CL8'BROWSE'\nDDID              DC   CL8'DDID'\nDISEDIT           DC   CL8'DISEDIT'\nDIS0000           DC   CL8'DIS0000'\nEDIT              DC   CL8'EDIT'\nLMINIT            DC   CL8'LMINIT'\nSYSIN             DC   CL8'SYSIN'\nSYSLIB            DC   CL8'SYSLIB'\nSYSPRINT          DC   CL8'SYSPRINT'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDALIST          DSECT\n                  DS   18F\nDXD_CSECT         DS   CL8\n\nDXD_SYSIN_DDID    DS   CL8\nDXD_SYSPRINT_DDID DS   CL8\n\nDXD_FLAG          DS   X\n$HAVE_SOURCE      EQU  X'80'\n$SYSIN_DDID       EQU  X'40'\n$SYSPRINT_DDID    EQU  X'20'\n\nDXD_DD            DS   CL8\nDXD_IO            DS   CL80\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                  DISCOMM  TYPE=DSECT\n                  DISSPFD  TYPE=DSECT\n                  COPY     DISASMDA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                  IHADCBE\n                  IFGACB  AM=VSAM\nACB_L             EQU     *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                 COPY REGEQU\n                 END  DISALIST\n./ ADD NAME=DISASMU1 0108-09034-09119-0837-00577-00530-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: DISASMU1                                              *\n*                                                                     *\n*  Function:                                                          *\n*                                                                     *\n*   The disassembler can use actual assembler source for label        *\n*   mapping.  The source can be supplied to the disassembler          *\n*   during a disassembly run or pre-processed by this utility.        *\n*                                                                     *\n*   The assembler output is scanned to obtain DSECT names, label      *\n*   names, and the displacements to the labels.  In order for the     *\n*   utility to find names and displacements, the PRINT options        *\n*   should be ON,GEN.                                                 *\n*                                                                     *\n*   SYSUT1   SYSPRINT file from the assembler                         *\n*   SYSPRINT Messages generated by this utility                       *\n*   SYSUT2   Output.  This information can be supplied to the         *\n*            disassembler via DSECTxx DD statements.         .        *\n*                                                                     *\n*                                                                     *\n*   The high-level assembler now allows symbolic names (labels)       *\n*   up to 63 characters in length.  A PDS or PDS/E only allows        *\n*   member names up to  8 characters in length, so I chose to         *\n*   use VSAM KSDS(s) to record pre-processed DSECT info.              *\n*                                                                     *\n*                                                                     *\n*   SYSUT2 is a VSAM KSDS with:                                       *\n*       KEYS        (67, 0)                                           *\n*       RECORDSIZE  (81 81)                                           *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISASMU1 CSECT\nDISASMU1 AMODE 24\nDISASMU1 RMODE 24\n         USING DISASMU1,R12\n         USING DSECT_DSECT,R10\n         USING LABEL_DSECT,R9\n         USING EQU_DSECT,R8\n         USING IFGRPL,WK_RPL\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R12,R15                        SET BASE REG\n         B     UTIL0000                       SKIP EYECATCHER\n         DC    CL8'DISASMU1'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nUTIL0000 DS    0H\n         LA    R15,WK_SAVEAREA\n         ST    R13,4(R15)\n         ST    R15,8(R13)\n         LR    R13,R15\n         OPEN  (SYSPRINT,OUTPUT)              OPEN SYSPRINT\n         OPEN  (SYSUT1,INPUT)                 OPEN SYSUT1\n         USING IHADCB,SYSUT1\n         OPEN  (SYSUT2,UPDAT)                 OPEN SYSTU2\n         LTR   R15,R15\n         BNZ   ERR0040\n         CLC   DCBLRECL,H125                  LRECL CORRECT?\n         BNE   ERR0200                        NO\n         MODCB RPL=WK_RPL,                                             +\n               ACB=SYSUT2,                                             +\n               AREA=PPD,                                               +\n               AREALEN=PPD_L,                                          +\n               ARG=PPD_KEY,                                            +\n               KEYLEN=67,                                              +\n               OPTCD=(KEY,DIR,SYN,MVE,UPD)\n         PUT   SYSPRINT,MSG00\n         SR    R10,R10                        NO DSECT FOUND SO FAR\n         SR    R9,R9                          NO LABEL FOUND SO FAR\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Read a record from the assembler listing                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nUTIL0010 DS    0H\n         GET   SYSUT1,ASM_DATA                READ A SYSUT1 RECORD\n         CLI   ASM_LABEL,C'*'                 COMMENT STATEMENT?\n         BE    UTIL0010                       YES\n         CLC   ASM_DATA+43,SRCSTMT            ASSEMBLER HEADING LINE?\n         BE    UTIL0010                       YES, IGNORE IT\n         CLC   XREF,ASM_DATA+45               CROSS REFERENCE?\n         BNE   UTIL0020                       NO\n         OI    WK_FLAGS,$XREF                 SET CROSS REFERENCE FLAG\nUTIL0020 DS    0H\n         TM    WK_FLAGS,$XREF                 CROSS REFERENCE FOUND?\n         BO    UTIL0010                       YES\n* ------------------------------------------------------------------- *\n*        Determine if there is a LABEL                                *\n* ------------------------------------------------------------------- *\n         CLI   ASM_LABEL,C' '                 LABEL PRESENT?\n         BE    UTIL0010                       NO\n         LA    R6,ASM_LABEL                   FIRST BYTE OF LABEL\n         LA    R2,WK_LABEL                    FIRST BYTE OF WORK LABEL\n         MVC   WK_LABEL,BLANKS                CLEAR LABEL NAME\n         LA    R1,L'WK_LABEL                  MAX LOOPS\nUTIL0030 DS    0H\n         CLI   0(R6),C' '                     BLANK?\n         BE    UTIL0040                       YES\n* ------------------------------------------------------------------- *\n*        Save label                                                   *\n* ------------------------------------------------------------------- *\n         MVC   0(1,R2),0(R6)                  COPY TO WORK LABEL\n* ------------------------------------------------------------------- *\n*        Find next non-blank                                          *\n* ------------------------------------------------------------------- *\n         LA    R2,1(R2)                       NEXT\n         LA    R6,1(R6)                       NEXT\n         BCT   R1,UTIL0030                    LOOP\n         CLI   0(R6),C' '                     BLANK?\n         BE    UTIL0040                       NO... TOO LONG\n         B     UTIL0010                       READ NEXT SYSUT1 RECORD\nUTIL0040 DS    0H\n         LA    R1,L'WK_LABEL                  MAX LOOPS\nUTIL0050 DS    0H\n         CLI   0(R6),C' '                     BLANK?\n         BNE   UTIL0060                       NO\n         LA    R6,1(R6)                       NEXT\n         BCT   R1,UTIL0050                    LOOP\n         B     UTIL0130                       ASSUME IT IS A LABEL\n* ------------------------------------------------------------------- *\n*        Determine if this is a CSECT, DSECT, or EQU                  *\n* ------------------------------------------------------------------- *\nUTIL0060 DS    0H\n         CLC   OP_DSECT(6),0(R6)              DSECT?\n         BE    UTIL0090                       YES\n         CLC   OP_CSECT,0(R6)                 CSECT?  (SAME AS DSECTS)\n         BE    UTIL0090                       YES\n         CLC   OP_EQU,0(R6)                   EQUATE STATEMENT?\n         BNE   UTIL0130                       NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Process EQUATEs                                              *\n*                                                                     *\n*   Some EQUATEs are just used for defining a label like              *\n*   \"NAME    EQU  *\".                                                 *\n*                                                                     *\n*   Some bit flags or one-byte fields have EQUATEs to define their    *\n*   meanings.  If an EQUATE following a statement with a label has    *\n*   a displacment between x'00' and x'ff', assume it is defining      *\n*   bits or values for the preceding field.                           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   First check for the \"NAME   EQU  *\".  If not, assume it is a      *\n*   bit or one-byte value.                                            *\n*                                                                     *\n*   R6 has the address of the OPCODE (\"EQU\").                         *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LTR   R9,R9                          LABEL FOUND YET?\n         BZ    UTIL0010                       NO\n         LA    R6,L'OP_EQU(,R6)               SKIP OPCODE\n         LA    R1,20                          LOOP LIMITER\nUTIL0070 DS    0H\n         CLI   0(R6),C' '                     BLANK?\n         BNE   UTIL0080                       NO\n         LA    R6,1(,R6)                      NEXT\n         BCT   R1,UTIL0070                    LOOP\n         B     UTIL0130                       NO BLANK.. ASSUME LABEL\nUTIL0080 DS    0H\n         CLC   =C'* ',0(R6)                   ASTERISK AND A BLANK?\n         BE    UTIL0140                       YES.. TREAT LIKE A LABEL\n         CLC   =C'000',ASM_ADDR               FIRST 3 DIGITS ZEROS?\n         BNE   UTIL0010                       NO\n         GETMAIN RU,                          GETMAIN EQU BLOCK        +\n               LV=EQU_DSECT_L,                                         +\n               LOC=BELOW\n         LR    R8,R1                          COPY EQU BLOCK ADDRESS\n         XC    EQU_DSECT(EQU_DSECT_L),EQU_DSECT                         OCK\n         MVC   EQU_EYE,EQUID                  IDENTIFY THIS BLOCK\n         MVC   EQU_NEXT,LABEL_EQU_NEXT        SET CHAIN ADDRESS\n         ST    R8,LABEL_EQU_NEXT              NEW BLOCK'S ADDR\n         MVC   EQU_LABEL,WK_LABEL             SET LABEL\n         NC    ASM_ADDR+3(2),X1F1F            PREPARE FOR PACKING\n         TR    ASM_ADDR+3(2),CHXH             TRANSLATE FOR PACKING\n         PACK  WK_DISP_OUT(2),ASM_ADDR+3(3)\n         MVC   EQU_VALUE,WK_DISP_OUT          COPY EQUATE VALUE\n         B     UTIL0010\n* ------------------------------------------------------------------- *\n*        Process DSECT or CSECT statements                            *\n* ------------------------------------------------------------------- *\nUTIL0090 DS    0H\n         LA    R2,WK_DSECT_CHAIN_PREV         DSECT ANCHOR\n         ICM   R10,15,WK_DSECT_CHAIN_NEXT     FIRST DSECT BLOCK\n         BZ    UTIL0110                       NO DSECTS YET\nUTIL0100 DS    0H\n         CLC   DSECT_NAME,WK_LABEL            ALREADY ON DSECT CHAIN?\n         BE    UTIL0010                       YES.. EXIT WITH BASE SET\n         LR    R2,R10                         COPY ADDRESS\n         ICM   R10,15,DSECT_NEXT              NEXT DSECT BLOCK\n         BNZ   UTIL0100                       LOOP\nUTIL0110 DS    0H\n         GETMAIN RU,                          ACQUIRE NEW DSECT BLOCK  +\n               LV=DSECT_DSECT_L,                                       +\n               LOC=BELOW\n         XC    0(DSECT_DSECT_L,R1),0(R1)\n         ST    R1,DSECT_NEXT-DSECT_DSECT(R2)  CHAIN NEW TO PREVIOUS\n         LR    R10,R1                         SET BASE\n         MVC   DSECT_EYE,OP_DSECT             SET BLOCK ID\n         MVC   DSECT_NAME,WK_LABEL            SET DSECT'S NAME\n         SR    R9,R9                          CLEAR LABEL BLOCK ADDR\n         B     UTIL0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Determine if this statement has a valid DISP.                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nUTIL0130 DS    0H\n         LTR   R10,R10                        DSECT DETERMINED YET?\n         BZ    UTIL0010                       NO\n         CLI   ASM_DISP,C'A'                  VALID DISPLACEMENT?\n         BL    UTIL0010                       NO\n         CLI   ASM_DISP,C'F'                  VALID DISPLACEMENT?\n         BNH   UTIL0150                       YES\n         CLI   ASM_DISP,C'0'                  VALID DISPLACEMENT?\n         BL    UTIL0010                       NO\n         CLI   ASM_DISP,C'9'                  VALID DISPLACEMENT?\n         BH    UTIL0010                       NO\n         B     UTIL0150\nUTIL0140 DS    0H\n         MVI   WK_DISP_IN,C'0'                FORCE DIGIT 1 TO ZERO\n         MVC   WK_DISP_IN+1(5),ASM_ADDR       USE ADDR FOR DISP\n         B     UTIL0160\nUTIL0150 DS    0H\n         MVC   WK_DISP_IN,ASM_DISP            COPY DISPLACEMENT\nUTIL0160 DS    0H\n         NC    WK_DISP_IN,X1F1F               PREPARE FOR TRANSLATE\n         TR    WK_DISP_IN,CHXH                TRANSLATE FOR PACKING\n         PACK  WK_DISP_OUT(4),WK_DISP_IN(7)   PACK DISPLACEMENT\n         LA    R2,DSECT_LABEL_PREV            LABEL CHAIN ANCHOR\n         ICM   R9,15,DSECT_LABEL_NEXT         FIRST LABEL\n         BZ    UTIL0180                       NO LABELS\nUTIL0170 DS    0H\n         CLC   WK_DISP_OUT(3),LABEL_DISP+1    INSERT HERE?\n         BH    UTIL0180                       YES\n         LR    R2,R9                          COPY ADDRESS\n         ICM   R9,15,LABEL_NEXT               NEXT LABEL\n         BNZ   UTIL0170                       LOOP\nUTIL0180 DS    0H\n         GETMAIN RU,                          ACQUIRE NEW LABEL BLOCK  +\n               LV=LABEL_DSECT_L,                                       +\n               LOC=BELOW\n         XC    0(LABEL_DSECT_L,R1),0(R1)\n         ST    R1,LABEL_NEXT-LABEL_DSECT(R2)  CHAIN PREVIOUS TO NEW\n         ST    R9,LABEL_NEXT-LABEL_DSECT(R1)  CHAIN NEXT BLOCK TO NEW\n         LR    R9,R1                          SET BASE\n         MVC   LABEL_EYE,LABEL                SET BLOCK IDENTIFIER\n         MVC   LABEL_NAME,WK_LABEL            SET LABEL NAME\n         MVI   LABEL_DISP,X'00'               FORCE FIRST BYTE TO ZERO\n         MVC   LABEL_DISP+1(3),WK_DISP_OUT    SET DISPLACEMENT\n         MVI   LABEL_TYPE,$LABEL_DATA         DATA TYPE LABEL\n         B     UTIL0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*    EOF on the assembler output has been reached.                    *\n*                                                                     *\n*    Print the info we have gathered and write it to the              *\n*    pre-processed DSECT info file (SYSUT2).                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nUTIL0200 DS    0H\n         ICM   R10,15,WK_DSECT_CHAIN_NEXT     ANY DSECTS?\n         BZ    UTIL0270                       NO\n         B     UTIL0220\nUTIL0210 DS    0H\n         BAL   R11,PRT0000                    PRINT A BLANK LINE\nUTIL0220 DS    0H\n         MVC   MSG01_NAME,DSECT_NAME          COPY DSECT NAME\n         MVC   PR_DATA(MSG01L),MSG01\n         BAL   R11,PRT0000\n         MVC   PPD_NAME,DSECT_NAME            COPY NAME\n         BAL   R11,ERASE000                   ERASE OLD DATA\n         XC    PPD_SEQ,PPD_SEQ                SET SEQ TO ZERO\n         MVC   PPD_DATA(DSECT_DSECT_L),DSECT_DSECT\n         LA    R2,DSECT_DSECT_L+L'PPD_KEY\n         BAL   R11,WRITE000\n         ICM   R9,15,DSECT_LABEL_NEXT         FIRST LABEL BLOCK\n         BZ    UTIL0260                       NO LABELS\nUTIL0230 DS    0H\n         MVC   MSG02_NAME,LABEL_NAME          COPY LABEL NAME\n         UNPK  MSG02_DISP(9),LABEL_DISP(5)\n         TR    MSG02_DISP,HEXCHAR\n         MVI   MSG02_DISP+8,C' '\n         MVC   MSG02_TYPE,LABEL_TYPE          COPY LABEL TYPE\n         MVC   PR_DATA(MSG02L),MSG02\n         BAL   R11,PRT0000                    PRINT\n         MVC   PPD_DATA(LABEL_DSECT_L),LABEL_DSECT\n         LA    R2,LABEL_DSECT_L+L'PPD_KEY\n         BAL   R11,WRITE000\n         ICM   R8,15,LABEL_EQU_NEXT           FIRST EQU BLOCK\n         BZ    UTIL0250\nUTIL0240 DS    0H\n         MVC   MSG03_NAME,EQU_LABEL           COPY LABEL\n         MVC   WK_UNPACK(1),EQU_VALUE\n         UNPK  MSG03_VALUE(3),WK_UNPACK(2)\n         TR    MSG03_VALUE,HEXCHAR\n         MVI   MSG03_VALUE+2,C' '\n         MVC   PR_DATA(MSG03L),MSG03\n         BAL   R11,PRT0000\n         MVC   PPD_DATA(EQU_DSECT_L),EQU_DSECT\n         LA    R2,EQU_DSECT_L+L'PPD_KEY\n         BAL   R11,WRITE000\n         ICM   R8,15,EQU_NEXT\n         BNZ   UTIL0240\nUTIL0250 DS    0H\n         ICM   R9,15,LABEL_NEXT\n         BNZ   UTIL0230\nUTIL0260 DS    0H\n         ICM   R10,15,DSECT_NEXT\n         BNZ   UTIL0210\n         B     EXIT0000                       AND EXIT\nUTIL0270 DS    0H\n         MVC   PR_DATA(MSG04L),MSG04\n         BAL   R11,PRT0000\n         B     EXIT0000\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nERASE000 DS    0H\n         XC    PPD_SEQ,PPD_SEQ                ZERO SEQ#\nERASE010 DS    0H\n         MODCB RPL=WK_RPL,                                             +\n               OPTCD=(KEY,DIR,SYN,MVE,UPD)\n         GET   RPL=WK_RPL\n         LTR   R15,R15\n         BNZ   ERASE020\n         ERASE RPL=WK_RPL\n         LTR   R15,R15\n         BNZ   ERR0010\n         ICM   R1,15,PPD_SEQ                  SEQUENCE NUMBER\n         LA    R1,1(,R1)                      PLUS 1\n         STCM  R1,15,PPD_SEQ                  UPDATE SEQUENCE NBR\n         B     ERASE010\nERASE020 DS    0H\n         ENDREQ RPL=WK_RPL\n         CLOSE SYSUT2,                                                 +\n               MODE=31,                                                +\n               TYPE=T\n         LTR   R15,R15                        SUCCESSFUL?\n         BZR   R11\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWRITE000 DS    0H\n         MODCB RPL=WK_RPL,                                             +\n               RECLEN=(R2),                                            +\n               OPTCD=(KEY,DIR,SYN,MVE,NUP)\n         LTR   R15,R15\n         BNZ   ERR0020\n         PUT   RPL=WK_RPL\n         LTR   R15,R15\n         BNZ   ERR0030\n         ICM   R1,15,PPD_SEQ\n         LA    R1,1(,R1)\n         STCM  R1,15,PPD_SEQ\n         BR    R11\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         CP    WK_LINE,P_65                   TIME FOR HEADING?\n         BL    PRT0010                        NO\n         PUT   SYSPRINT,MSG00\n         ZAP   WK_LINE,P_1\nPRT0010  DS    0H\n         PUT   SYSPRINT,PR_CC\n         MVC   PR_DATA,PR_CC\n         AP    WK_LINE,P_1\n         BR    R11\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVC   PR_DATA(ERROR01_L),ERROR01\n         MVC   PR_DATA+(ERROR01_FUNCTION-ERROR01)(L'ERROR01_FUNCTION),F+\n               UNCTION_GET\n         B     ERR0100\nERR0020  DS    0H\n         MVC   PR_DATA(ERROR01_L),ERROR01\n         MVC   PR_DATA+(ERROR01_FUNCTION-ERROR01)(L'ERROR01_FUNCTION),F+\n               UNCTION_MODCB\n         B     ERR0100\nERR0030  DS    0H\n         MVC   PR_DATA(ERROR01_L),ERROR01\n         MVC   PR_DATA+(ERROR01_FUNCTION-ERROR01)(L'ERROR01_FUNCTION),F+\n               UNCTION_PUT\n         B     ERR0100\nERR0040  DS    0H\n         MVC   PR_DATA(ERROR01_L),ERROR01\n         MVC   PR_DATA+(ERROR01_FUNCTION-ERROR01)(L'ERROR01_FUNCTION),F+\n               UNCTION_OPEN\nERR0100  DS    0H\n         CVD   R15,WK_DWORD                   CONVERT RC TO DECIMAL\n         ED    ERROR01_RC,WK_DWORD+6          EDIT RC\n         UNPK  ERROR01_FDBK(7),RPLFDBK(4)     UNPACK FEED BACK\n         TR    ERROR01_FDBK,HEXCHAR\n         MVI   ERROR01_FDBK+6,C' '\n         BAL   R11,PRT0000                    PRINT\n         DC    H'0'\nERR0200  DS    0H\n         MVC   PR_DATA(ERROR02_L),ERROR02\n         LH    R1,DCBLRECL\n         CVD   R1,WK_DWORD\n         ED    PR_DATA+(ERROR02_LRECL-ERROR02),WK_DWORD+6\n         BAL   R11,PRT0000\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         CLOSE SYSUT1\n         CLOSE SYSPRINT\n         L     R13,4(R13)                     RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWK_DWORD           DS    D\nWK_SAVEAREA        DC    18F'0'               REGISTER SAVE AREA\nWK_RPL             RPL   AM=VSAM\n\nWK_DSECT_CHAIN_PREV DC   A(0)\nWK_DSECT_CHAIN_NEXT DC   A(0)\n\nH125               DC    H'125'\n\nWK_FLAGS           DC    X'00'\n$XREF              EQU   X'80'                .. CROSS REFERENCE FOUND\n$OPEN              EQU   X'80'                .. SYSUT2 DCB IS OPEN\n\nWK_LABEL           DC    CL63' '\n\nWK_UNPACK          DC    XL8'00'\n\nXREF               DC    C' CROSS REFERENCE '\n\nHEXCHAR            EQU   *-C'0'\n                   DC    C'0123456789ABCDEF'\n\nP_1                DC    P'1'\nP_65               DC    P'65'\nWK_LINE            DC    PL3'0'\n\nX1F1F              DC    8X'1F'\n\nCHXH               DC    X'000A0B0C0D0E0F000000000000000000'  00-0F\n                   DC    X'00010203040506070809000000000000'  10-1F\n\nASMHEAD            DC    CL35'ASSEMBLER OUTPUT'\nBLANKS             DC    CL64' '\nOP_DSECT           DC    CL8'DSECT'\nOP_CSECT           DC    CL8'CSECT'\nOP_EQU             DC    C'EQU '\nSRCSTMT            DC    C'SOURCE STATEMENT'\nWK_DISP_IN         DC    CL7' '\nWK_DISP_OUT        DC    XL4'000000'\nLABEL              DC    CL8'LABEL'\nEQUID              DC    CL8'EQU'\n\nPR_CC              DC    C' '\nPR_DATA            DC    CL132' '\n\nFUNCTION_OPEN      DC    CL10'OPEN'\nFUNCTION_MODCB     DC    CL10'MODCB'\nFUNCTION_GET       DC    CL10'GET'\nFUNCTION_PUT       DC    CL10'PUT'\n\nMSG00              DC    CL132'1    DISASMUT1   Preprocessed DSECTs'\nMSG00L             EQU   *-MSG00\n\nMSG01              DS    0C\n                   DC    C'DSECT '\nMSG01_NAME         DC    CL63' '\nMSG01L             EQU   *-MSG01\n\nMSG02              DS    0C\n                   DC    C'  DISP '\nMSG02_DISP         DC    CL8' '\n                   DC    C' '\nMSG02_TYPE         DC    C' '\n                   DC    C'  LABEL '\nMSG02_NAME         DC    CL63' '\nMSG02L             EQU   *-MSG02\n\nMSG03              DS    0C\n                   DC    C'    EQUATE '\n                   DC    C'  VALUE '\nMSG03_VALUE        DC    CL2' '\n                   DC    CL2' '\nMSG03_NAME         DC    CL63' '\nMSG03L             EQU   *-MSG03\n\nMSG04              DS    0C\n                   DC    C'**  No DSECTS found'\nMSG04L             EQU   *-MSG04\n\nERROR01            DS    0C\n                   DC    C'Error during '\nERROR01_FUNCTION   DC    CL10' '\n                   DC    C', R15='\nERROR01_RC         DC    X'40202120'\n                   DC    C'  VSAM FDBK='\nERROR01_FDBK       DC    CL6' '\n                   DC    C' '\nERROR01_L          EQU   *-ERROR01\n\nERROR02            DS    0C\n                   DC    C'Assembler listing LRECL is '\nERROR02_LRECL      DC    X'40202120'\n                   DC    C', not 121.. aborting'\nERROR02_L          EQU   *-ERROR02\n*---------------------------------------------------------------------*\n*                                                                     *\n*              ASSEMBLER OUTPUT DCB                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\nSYSUT1    DCB  DDNAME=SYSUT1,                                          +\n               DSORG=PS,                                               +\n               EODAD=UTIL0200,                                         +\n               MACRF=GM\nSYSUT2    ACB  AM=VSAM,                                                +\n               DDNAME=SYSUT2,                                          +\n               MACRF=(KEY,DIR,SEQ,OUT)\nSYSPRINT  DCB  DDNAME=SYSPRINT,                                        +\n               DSORG=PS,                                               +\n               RECFM=FBA,                                              +\n               LRECL=133,                                              +\n               MACRF=PM\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               LTORG\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nASM_DATA       DC      CL125' '\nASM_DATAL      EQU     *-ASM_DATA\n               ORG     ASM_DATA+005\nASM_DISP       DS      CL6\n               ORG     ASM_DATA+027\nASM_ADDR       DS      CL5\n               ORG     ASM_DATA+039\nASM_STMT_NBR   DS      CL5\nASM_STMT_TYPE  DS      C\nASM_LABEL      DS      C\n               ORG     ASM_DATA+125\n\n               COPY    PPDDATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               COPY    DISASMDA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               IFGACB  AM=VSAM\nACB_L          EQU     *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IFGRPL AM=VSAM\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         DCBD   DSORG=PS\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY   REGEQU\n         END    DISASMU1\n./ ADD NAME=DISASMU2 0111-09119-09119-1504-00207-00216-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: DISASMU2                                              *\n*                                                                     *\n*  Function:                                                          *\n*                                                                     *\n*   List contents of a \"pre-processed\" DSECT KSDS.                    *\n*                                                                     *\n*   SYSUT1 is a VSAM KSDS with:                                       *\n*       KEYS        (67, 0)                                           *\n*       RECORDSIZE  (81 81)                                           *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISASMU2 CSECT\nDISASMU2 AMODE 24\nDISASMU2 RMODE 24\n         USING DISASMU2,R12\n         USING IFGRPL,WK_RPL1\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R12,R15                        SET BASE REG\n         B     INIT0000                       SKIP EYECATCHER\n         DC    CL8'DISASMU2'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nINIT0000 DS    0H\n         LA    R15,WK_SAVEAREA\n         ST    R13,4(R15)\n         ST    R15,8(R13)\n         LR    R13,R15\n         OPEN  (SYSPRINT,OUTPUT)              OPEN SYSPRINT\n         OPEN  (SYSUT1,INPUT)                 OPEN SYSUT1\n         LTR   R15,R15                        OPEN SUCCESSFUL?\n         BNZ   ERR0010                        NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0000 DS    0H\n         GET   RPL=WK_RPL1                    READ A RECORD\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   EOF0000                        NO\n         OC    PPD_SEQ,PPD_SEQ                BEYOND LAST DSECT?\n         BNZ   EOF0000                        YES\n         SR    R2,R2                          INIT SEQ NBR\n         B     MAIN0020\nMAIN0010 DS    0H\n         GET   RPL=WK_RPL2                    READ\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   MAIN0000                       NO\nMAIN0020 DS    0H\n         MVC   PR_DATA,PR_CC                  INITIALIZE\n         CLC   TYPE_DSECT,PPD_DATA+8          DSECT?\n         BE    MAIN0030                       YES\n         CLC   TYPE_LABEL,PPD_DATA+8          LABEL?\n         BE    MAIN0040                       YES\n         CLC   TYPE_EQU,PPD_DATA+8            EQU?\n         BE    MAIN0050                       YES\n         DC    H'0'\nMAIN0030 DS    0H\n         USING DSECT_DSECT,PPD_DATA\n         MVC   PR_TYPE,TYPE_DSECT\n         MVC   PR_NAME+00(63),DSECT_NAME      COPY DSECT NAME\n         ZAP   WK_LINE,P_65                   CAUSE NEW HEADING\n         B     MAIN0060\nMAIN0040 DS    0H\n         USING LABEL_DSECT,PPD_DATA\n         MVC   PR_TYPE,TYPE_LABEL\n         UNPK  WK_UNPACK(9),LABEL_DISP(5)     UNPACK DISP\n         MVC   PR_DISP,WK_UNPACK\n         TR    PR_DISP,HEXCHAR                TRANSLATE\n         MVC   PR_NAME+05(63),LABEL_NAME      COPY LABEL NAME\n         B     MAIN0060\nMAIN0050 DS    0H\n         USING EQU_DSECT,PPD_DATA\n         MVC   PR_TYPE,TYPE_EQU\n         UNPK  WK_UNPACK(3),EQU_VALUE(2)      UNPACK EQU VALUE\n         MVC   PR_DISP+6(2),WK_UNPACK\n         TR    PR_DISP+6(2),HEXCHAR           TRANSLATE\n         MVC   PR_NAME+10(63),EQU_LABEL       COPY EQU NAME\nMAIN0060 DS    0H\n         BAL   R11,PRT0000                    PRINT\n         LA    R2,1(,R2)                      NEXT SEQ NBR\n         STCM  R2,15,PPD_SEQ                  UPDATE KEY\n         B     MAIN0010\nEOF0000  DS    0H\n         CLOSE SYSPRINT                       CLOSE PRINT\n         CLOSE SYSUT1                         CLOSE SYSUT1\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         CP    WK_LINE,P_65                   TIME FOR HEADING?\n         BL    PRT0010                        NO\n         PUT   SYSPRINT,MSG00                 PRINT HEADING\n         ZAP   WK_LINE,P_1                    RESET LINE NBR\nPRT0010  DS    0H\n         PUT   SYSPRINT,PR_CC                 PRINT\n         MVC   PR_DATA,PR_CC                  RE-INITIALIZE\n         AP    WK_LINE,P_1                    ADD 1 TO LINE NBR\n         BR    R11\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         CLOSE SYSUT1\n         CLOSE SYSPRINT\n         L     R13,4(R13)                     RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWK_SAVEAREA    DC    18F'0'                   REGISTER SAVE AREA\nWK_DWORD       DC    D'0'\n\nWK_RPL1  RPL   AM=VSAM,                                                +\n               ACB=SYSUT1,                                             +\n               AREA=PPD,                                               +\n               AREALEN=PPD_L,                                          +\n               OPTCD=(SEQ,SYN,MVE)\n\nWK_RPL2  RPL   AM=VSAM,                                                +\n               ACB=SYSUT1,                                             +\n               AREA=PPD,                                               +\n               AREALEN=PPD_L,                                          +\n               ARG=PPD_KEY,                                            +\n               KEYLEN=L'PPD_KEY,                                       +\n               OPTCD=(DIR,KEY,KEQ,SYN,MVE)\n\n\nWK_FLAGS           DC    X'00'\n\nWK_UNPACK          DC    XL9'00'\n\nHEXCHAR            EQU   *-C'0'\n                   DC    C'0123456789ABCDEF'\n\nP_1                DC    P'1'\nP_65               DC    P'65'\nWK_LINE            DC    PL3'0'\n\nTYPE_DSECT         DC    CL8'DSECT'\nTYPE_LABEL         DC    CL8'LABEL'\nTYPE_EQU           DC    CL8'EQU'\n\nPR_CC              DC    C' '\nPR_DATA            DC    CL132' '\n                   ORG   PR_DATA\nPR_TYPE            DC    CL8' '\n                   DC    CL2' '\nPR_DISP            DC    CL8' '\n                   DC    CL5' '\nPR_NAME            DC    CL100' '\n                   ORG\nMSG00              DC    CL132'1    DISASMUT2   Preprocessed DSECTs'\nMSG00L             EQU   *-MSG00\n\nMSG04              DS    0C\n                   DC    C'**  No DSECTS found'\nMSG04L             EQU   *-MSG04\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nSYSUT1    ACB  AM=VSAM,                                                +\n               DDNAME=SYSUT1,                                          +\n               MACRF=(KEY,DIR,SEQ,OUT)\nSYSPRINT  DCB  DDNAME=SYSPRINT,                                        +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               LRECL=100,                                              +\n               MACRF=PM\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               LTORG\n\n               COPY    PPDDATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    DISASMDA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               IFGACB  AM=VSAM\nACB_L          EQU     *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IFGRPL AM=VSAM\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY   REGEQU\n         END    DISASMU2\n./ ADD NAME=DISASSEM 0102-09119-09198-0834-00488-00488-00000-SOURCE\n         GBLC &TROPT\n&TROPT   SETC 'OFF'\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISASSEM                                             *\n*                                                                    *\n*  Function:                                                         *\n*   Dynamically invoke the assembler to assemble DSECTs.             *\n*                                                                    *\n*   The idea here is to allow the disassembler to generate labels    *\n*   rather than a \"displacment from register\".  Rather than having   *\n*   to code control statements with labels and their displacements,  *\n*   the disassembler will call the assembler, then read the          *\n*   assembler listing to 'learn' DSECT and label names plus the      *\n*   displacements of labels within DSECTs.                           *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*   Any method of defining DSECTs that are valid to the assembler    *\n*   may be used.  They may be defined inline, by macros, or COPY     *\n*   statements.  The disassembler links to the assembler to assemble *\n*   the source, then scans the assembler output to learn the DSECT   *\n*   names, label names, and displacements to the labels.  In order   *\n*   for DISASM to find the names and displacements, the PRINT option *\n*   of the assembler must be on.                                     *\n*                                                                    *\n*   Labels and DSECT names are limited to 63 characters in length.   *\n*                                                                    *\n*   Input to the assembler is delimited by ASM,START and ASM,END     *\n*   statements.  Any statements between the ASM,START and ASM,END    *\n*   are copied to SYSIN.  Assembler input statements are listed on   *\n*   the DISPRINT output, but are otherwise ignored.  Any macros not  *\n*   defined inline and any COPY elements must be available to the    *\n*   assembler in a library in the SYSLIB concatenation.              *\n*                                                                    *\n*   If the return code from the assembler is greater than 4, the     *\n*   disassembly is aborted.  The assembler output is copied to the   *\n*   DISDEBUG data set if allocated.                                  *\n*                                                                    *\n*   The DSECTs are chained from field COMM_DSECT_NEXT in DISCOMM.    *\n*   The labels within the DSECT are chained from field DSECT_LABEL.  *\n*   DSECT_DSECT maps the DSECT blocks, LABEL_DSECT maps the label    *\n*   control blocks.                                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISASSEM CSECT\nDISASSEM AMODE 31\nDISASSEM RMODE ANY\n         USING DISCOMM,R12\n         USING DISASSEM,R11\n         USING DSECT_DSECT,R3                 DEFINE BASE\n         USING LABEL_DSECT,R4                 DEFINE BASE\n         USING EQU_DSECT,R5                   DEFINE BASE\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     ASSM0000                       SKIP EYECATCHER\nMODID    DC    CL8'DISASSEM'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nASSM0000 DS    0H\n         L     R15,COMM_DXD_ADDRESS           WORK AREA ADDR\n         A     R15,DXD_START                  PLUS DISP TO OUR PART\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXDASSEM,R13\n         USING DCBE,SYSPRINT_DCBE\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n         LA    R1,ASSM0200\n         ST    R1,DCBEEODA\n         LOAD  EP=ASMA90                      LOAD THE ASSEMBLER\n         ST    R0,DXD_ASSEM_EP                SAVE ENTRY POINT\n         LR    R15,R0                         COPY TO R15\n         LA    R1,AASMPARM                    ASSEMBLER PARM LIST ADDR\n         ITRACE ID=CALLASM,                   CALLING THE ASSEMBLER    +\n               RDATA1=R15,                    .. ASSEMBLER'S EP        +\n               RDATA2=R1                      .. ASSEMBLER'S PARMS\n         BASR  R14,R15                        LINK TO ASSEMBLER\n         STH   R15,COMM_ASSEMBLER_RC          SAVE ASSEMBLER RC\n         ITRACE ID=ASSEMBLER_RC,              ASSEMBLER'S RETURN CODE  +\n               RDATA1=R15                     .. RETURN CODE\n         STC   R15,COMM_INFO_01               CONVERT TO DECIMAL\n         MVI   COMM_MSG_ID,1\n         BAL   R10,MSG0000\n         ITRACE ID=OPEN\n         OPEN  (SYSPRINT_DCB,INPUT),          OPEN SYSPRINT AS INPUT   +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n         MVI   COMM_DEBUG_CMD,$DEBUG_HEAD     SET COMMAND\n         BAL   R10,DEBUG000                   PRINT DEBUG HEADING\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT\n         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01\n         BAL   R10,DEBUG000\n*--------------------------------------------------------------------*\n*        Free existing DSECTs, LABELs, EQUs                          *\n*--------------------------------------------------------------------*\n         ICM   R3,15,COMM_DSECT_NEXT          FIRST DSECT\n         BZ    INIT0070                       NO DSECTS\nINIT0010 DS    0H\n         ICM   R4,15,DSECT_LABEL_NEXT         FIRST LABEL\n         BZ    INIT0050                       NO LABELS\nINIT0020 DS    0H\n         ICM   R5,15,LABEL_EQU_NEXT           FIRST EQUATE\n         BZ    INIT0040                       NO EQUATES\nINIT0030 DS    0H\n         LR    R1,R5                          COPY ADDRESS\n         ICM   R5,15,EQU_NEXT                 NEXT EQU BLOCK\n         FREEMAIN RU,                         FREE EQU BLOCK           +\n               A=(1),                                                  +\n               LV=EQU_DSECT_L\n         LTR   R5,R5                          ANOTHER EQUATE\n         BNZ   INIT0030                       LOOP\nINIT0040 DS    0H\n         LR    R1,R4                          COPY ADDRESS\n         ICM   R4,15,LABEL_NEXT               NEXT LABEL BLOCK\n         FREEMAIN RU,                         FREE LABEL BLOCK         +\n               A=(1),                                                  +\n               LV=LABEL_DSECT_L\n         LTR   R4,R4                          ANOTHER LABEL?\n         BNZ   INIT0020                       YES\nINIT0050 DS    0H\n         LR    R1,R3                          COPY ADDRESS\n         ICM   R3,15,DSECT_NEXT               NEXT DSECT\n         FREEMAIN RU,                         FREE LABEL BLOCK         +\n               A=(1),                                                  +\n               LV=DSECT_DSECT_L\n         LTR   R3,R3                          ANOTHER DSECT?\n         BNZ   INIT0010                       YES\nINIT0060 DS    0H\n         XC    COMM_DSECT_NEXT,COMM_DSECT_NEXT\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\nINIT0070 DS    0H\n         SR    R3,R3                          NO DSECT IS ACTIVE\n         SR    R4,R4                          NO LABEL IS ACTIVE\nASSM0010 DS    0H\n         GET   SYSPRINT_DCB,COMM_ASSEMBLER_IO\n         MVC   COMM_DEBUG_IO,COMM_ASSEMBLER_IO\n         BAL   R10,DEBUG000                   PRINT DEBUG HEADING\n         CLC   COMM_ASSEMBLER_RC,H4           ASSEMBLER ERROR?\n         BH    ASSM0010                       YES\n         ITRACE ID=TEMP1,                                              +\n               DATA1=COMM_ASSEMBLER_LABEL,                             +\n               DATA2=COMM_ASSEMBLER_DISP\n         CLI   COMM_ASSEMBLER_LABEL,C'*'      COMMENT STATEMENT?\n         BE    ASSM0010                       YES\n         CLC   SRCSTMT,COMM_ASSEMBLER_IO+43   ASSEMBLER HEADING LINE?\n         BE    ASSM0010                       YES, IGNORE IT\n         CLC   XREF,COMM_ASSEMBLER_IO+45      START OF CROSS REFERENCE?\n         BNE   ASSM0020                       NO\n         OI    DXD_XREF_FLAG,$XREF            SET CROSS REFERENCE FLAG\n         ITRACE ID=XREF                       CROSS REFERENCE STARTED\nASSM0020 DS    0H\n         TM    DXD_XREF_FLAG,$XREF            CROSS REFERENCE FOUND?\n         BO    ASSM0010                       YES\n         CLI   COMM_ASSEMBLER_LABEL,C' '      LABEL PRESENT?\n         BE    ASSM0010                       NO\n         ITRACE ID=NEWLABEL,                                           +\n               DATA1=COMM_ASSEMBLER_LABEL\n         LA    R6,COMM_ASSEMBLER_LABEL        FIRST BYTE OF LABEL\n         LA    R2,DXD_LABEL                   FIRST BYTE OF WORK LABEL\n         MVC   DXD_LABEL,COMM_BLANKS          CLEAR LABEL NAME\n         LA    R1,L'DXD_LABEL                 MAX LOOPS\nASSM0030 DS    0H\n         CLI   0(R6),C' '                     BLANK?\n         BE    ASSM0040                       YES\n         MVC   0(1,R2),0(R6)                  COPY TO WORK LABEL\n         LA    R2,1(R2)                       NEXT\n         LA    R6,1(R6)                       NEXT\n         BCT   R1,ASSM0030                    LOOP\n         CLI   0(R6),C' '                     BLANK?\n         BE    ASSM0040                       NO.. TOO LONG FOR A LABEL\n         ITRACE ID=LONGLABL\n         B     ASSM0010                       READ NEXT SYSPRINT RECORD\nASSM0040 DS    0H\n         LA    R1,L'DXD_LABEL                 MAX LOOPS\nASSM0050 DS    0H\n         CLI   0(R6),C' '                     BLANK?\n         BNE   ASSM0060                       NO\n         LA    R6,1(R6)                       NEXT\n         BCT   R1,ASSM0050                    LOOP\n         B     ASSM0140                       ASSUME IT IS A LABEL\nASSM0060 DS    0H\n         ITRACE ID=LABLTYPE,                                           +\n               DATA1=0(R6)\n         CLC   OP_DSECT(6),0(R6)              DSECT?\n         BE    ASSM0090                       YES\n         CLC   OP_CSECT,0(R6)                 CSECT?\n         BE    ASSM0090                       YES\n         CLC   OP_EQU,0(R6)                   EQUATE STATEMENT?\n         BNE   ASSM0140                       NO\n         CLC   =C'000',COMM_ASSEMBLER_ADDR1   FIRST 3 DIGITS ZEROS?\n         BNE   ASSM0010                       NO\n*--------------------------------------------------------------------*\n*                                                                    *\n*     Build a new EQU block.                                         *\n*                                                                    *\n*     EQU block's are chained from LABEL blocks.                     *\n*     R4 is used to 'remember' the last LABEL block processed.       *\n*     Whenever a new CSECT or DSECT is encountered, R4 is 'cleared'. *\n*                                                                    *\n*--------------------------------------------------------------------*\n         LTR   R4,R4                          LABEL BASE SET?\n         BZ    ASSM0010                       NO\n         GETMAIN RU,                          GETMAIN EQU BLOCK        +\n               LV=EQU_DSECT_L,                                         +\n               LOC=ANY\nNEW      USING EQU_DSECT,R1\n         XC    NEW.EQU_DSECT(EQU_DSECT_L),NEW.EQU_DSECT                 OCK\n         LA    R5,LABEL_EQU_PREV              EQU ANCHOR\nASSM0070 DS    0H\n         LR    R2,R5                          COPY CURRENT TO PREV\nPREV     USING EQU_DSECT,R2\n         ICM   R5,15,EQU_NEXT                 NEXT BLOCK ON CHAIN\n         BNZ   ASSM0070                       LOOP IF PRESENT\n         ST    R1,PREV.EQU_NEXT               SET NEXT ON CHAIN\nASSM0080 DS    0H\n         ST    R2,NEW.EQU_PREV                SET 'NEXT'\n         MVC   NEW.EQU_EYE,EQU_ID             IDENTIFY THIS BLOCK\n         MVC   NEW.EQU_LABEL,DXD_LABEL        SET LABEL\n         NC    COMM_ASSEMBLER_ADDR1+3(2),HEX1F1F PREPARE FOR PACKING\n         TR    COMM_ASSEMBLER_ADDR1+3(2),CHARHEX TRANSLATE FOR PACKING\n         PACK  DXD_DISP_OUT(2),COMM_ASSEMBLER_ADDR1+3(3)\n         MVC   NEW.EQU_VALUE,DXD_DISP_OUT     COPY EQUATE VALUE\n         ITRACE ID=NEW_EQU,                   NEW EQUATE               +\n               RDATA1=R1,                                              +\n               DATA2=NEW.EQU_PREV\n         B     ASSM0010\n         DROP  NEW,PREV\n*--------------------------------------------------------------------*\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\nASSM0090 DS    0H\n         ITRACE ID=SCANDSCT\n         LA    R3,COMM_DSECT_PREV             FIRST DSECT BLOCK\n         B     ASSM0110\nASSM0100 DS    0H\n         CLC   DSECT_NAME,DXD_LABEL           ALREADY ON DSECT CHAIN?\n         BE    ASSM0130                       YES.. EXIT WITH BASE SET\nASSM0110 DS    0H\n         ICM   R2,15,DSECT_NEXT               ANOTHER ON CHAIN?\n         BZ    ASSM0120                       NO\n         LR    R3,R2                          COPY ADDRESS\n         B     ASSM0100                       CHECK FOR DUPLICATE NAME\nASSM0120 DS    0H\n         GETMAIN RU,                          ACQUIRE NEW DSECT BLOCK  +\n               LV=DSECT_DSECT_L,                                       +\n               LOC=ANY\nNEW      USING DSECT_DSECT,R1                 SET BASE\n         XC    NEW.DSECT_DSECT(DSECT_DSECT_L),NEW.DSECT_DSECT\n         ST    R1,DSECT_NEXT\n         ST    R2,NEW.DSECT_PREV\n         ITRACE ID=NEWDSECT,                  NEW DSECT BLOCK          +\n               RDATA1=R1,                     .. BLOCK'S ADDRESS       +\n               DATA2=DXD_LABEL                .. DSECT'S NAME\n         MVC   NEW.DSECT_EYE,OP_DSECT         SET BLOCK ID\n         MVC   NEW.DSECT_NAME,DXD_LABEL       SET DSECT'S NAME\n         LR    R3,R1                          \"REMEMBER\" LAST DSECT\n         B     ASSM0010\n         DROP  NEW\nASSM0130 DS    0H\n         ITRACE ID=DUPDSECT\n         B     ASSM0010\n*--------------------------------------------------------------------*\n*                                                                    *\n*        Process statements with LABELs                              *\n*                                                                    *\n*  Subsequent EQU's will be 'tied' back to the previous LABEL block. *\n*  R4 is used to 'remember' the address of the last label block..    *\n*                                                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\nASSM0140 DS    0H\n         LTR   R3,R3                          DSECT DETERMINED YET?\n         BZ    ASSM0010                       NO\n         CLI   COMM_ASSEMBLER_DISP,C'A'       VALID DISPLACEMENT?\n         BL    ASSM0010                       NO\n         CLI   COMM_ASSEMBLER_DISP,C'F'       VALID DISPLACEMENT?\n         BNH   ASSM0150                       YES\n         CLI   COMM_ASSEMBLER_DISP,C'0'       VALID DISPLACEMENT?\n         BL    ASSM0010                       NO\n         CLI   COMM_ASSEMBLER_DISP,C'9'       VALID DISPLACEMENT?\n         BH    ASSM0010                       NO\nASSM0150 DS    0H\n         MVC   DXD_DISP_IN,COMM_ASSEMBLER_DISP COPY DISPLACEMENT\n         NC    DXD_DISP_IN,HEX1F1F            PREPARE FOR TRANSLATE\n         TR    DXD_DISP_IN,CHARHEX            TRANSLATE FOR PACKING\n         PACK  DXD_DISP_OUT(4),DXD_DISP_IN(7) PACK DISPLACEMENT\n         LA    R4,DSECT_LABEL_PREV            LABEL CHAIN ANCHOR\n         B     ASSM0170\nASSM0160 DS    0H\n         CLC   DXD_DISP_OUT(3),LABEL_DISP+1   INSERT HERE?\n         BH    ASSM0180                       YES\nASSM0170 DS    0H\n         LR    R2,R4                          COPY ADDRESS\nPREV     USING LABEL_DSECT,R2\n         ICM   R4,15,LABEL_NEXT               NEXT LABEL\n         BNZ   ASSM0160                       LOOP\nASSM0180 DS    0H\n         GETMAIN RU,                          ACQUIRE NEW LABEL BLOCK  +\n               LV=LABEL_DSECT_L,                                       +\n               LOC=ANY\n         ITRACE ID=NEWLABL,                   NEW LABEL BLOCK          +\n               RDATA1=R1,                     .. BLOCK'S ADDRESS       +\n               DATA2=DXD_LABEL                .. LABEL'S NAME\nNEW      USING LABEL_DSECT,R1\n         ST    R1,PREV.LABEL_NEXT\n         LTR   R4,R4\n         BZ    ASSM0190\n         ST    R1,LABEL_PREV\nASSM0190 DS    0H\n         XC    NEW.LABEL_DSECT(LABEL_DSECT_L),NEW.LABEL_DSECT\n         ST    R2,NEW.LABEL_PREV\n         ST    R4,NEW.LABEL_NEXT\n         MVC   NEW.LABEL_EYE,LABEL_ID           SET BLOCK IDENTIFIER\n         MVC   NEW.LABEL_NAME,DXD_LABEL         SET LABEL NAME\n         MVI   NEW.LABEL_DISP,X'00'             FORCE FIRST BYTE\n         MVC   NEW.LABEL_DISP+1(3),DXD_DISP_OUT DISPLACEMENT TO LABEL\n         MVI   NEW.LABEL_TYPE,$LABEL_DATA       DATA TYPE LABEL\n         XC    NEw.LABEL_EQU_PREV,NEW.LABEL_EQU_PREV\n         XC    NEW.LABEL_EQU_NEXT,NEW.LABEL_EQU_NEXT\n         LR    R4,R1                            SAVE ADDRESS\n         B     ASSM0010\n         DROP  PREV,NEW\nASSM0200 DS    0H\n         ITRACE ID=EOF\n         CLOSE SYSPRINT_DCB,                                           +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\n         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02\n         BAL   R10,DEBUG000                   PRINT DEBUG HEADING\n         CLC   COMM_ASSEMBLER_RC,H4           ERROR DURING ASSEMBLY?\n         BNH   ASSM0210                       NO\n         ITRACE ID=ASMERROR,                                           +\n               DATA1=COMM_ASSEMBLER_RC\n         OI    COMM_FLAGS,$COMM_FLAGS_ABORT\n         MVI   COMM_MSG_ID,2\n         BAL   R10,MSG0000                    PRINT MESSAGE\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*        MAKE SURE 1ST BLOCK'S DON'T HAVE 'PREV'                      *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nASSM0210 DS    0H\n         ICM   R3,15,COMM_DSECT_NEXT          FIRST DSECT\n         BZ    EXIT0000\n         XC    DSECT_PREV,DSECT_PREV          MAKE SURE 1ST HAS NO PREV\nASSM0220 DS    0H\n         ICM   R4,15,DSECT_LABEL_NEXT         FIRST LABEL IN DSECT\n         BZ    ASSM0250\n         XC    LABEL_PREV,LABEL_PREV          MAKE SURE 1ST HAS NO PREV\nASSM0230 DS    0H\n         ICM   R5,15,LABEL_EQU_NEXT           FIRST EQU\n         BZ    ASSM0240\n         XC    EQU_PREV,EQU_PREV              MAKE SURE 1ST HAS NO PREV\nASSM0240 DS    0H\n         ICM   R4,15,LABEL_NEXT               NEXT LABEL\n         BNZ   ASSM0230\nASSM0250 DS    0H\n         ICM   R3,15,DSECT_NEXT               NEXT DSECT\n         BNZ   ASSM0220\n         B     EXIT0000                       AND EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDEBUG000 DS    0H\n         CLI   COMM_RUN_MODE,$COMM_RUN_TSO    TSO MODE?\n         BER   R10                            YES\n         L     R15,V_DISDEBUG\n         BALR  R14,R15\n         BR    R10\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMSG0000  DS    0H\n         MVC   COMM_MSG_CSECT,MODID\n         L     R15,V_DISMSG\n         BALR  R14,R15\n         CLI   COMM_RUN_MODE,$COMM_RUN_TSO    TSO MODE?\n         BE    MSG0020                        YES\n         MVI   PRINT_COMMAND,$PRINT_PRINT\n         LA    R2,COMM_MSG_1                  FIRST MESSAGE\n         LA    R3,5                           MAX MESSAGES\nMSG0010  DS    0H\n         CLC   0(L'COMM_MSG_1,R2),COMM_BLANKS\n         BER   R10                            BLANK.. STOP HERE\n         MVC   PRINT_DATA(L'COMM_MSG_1),0(R2)\n         L     R15,V_DISPRINT                 PRINT MODULE ENTRY POINT\n         BALR  R14,R15                        LINK TO PRINT MODULE\n         LA    R2,L'COMM_MSG_1(,R2)           NEXT MESSAGE\n         BCT   R3,MSG0010\n         BR    R10                            RETURN\nMSG0020  DS    0H\n         CLC   SPF_MSG_1,COMM_BLANKS          MESSAGE STILL BLANK?\n         BNER  R10                            NO\n         MVC   SPF_MSG_1,COMM_MSG_1\n         MVC   SPF_MSG_2,COMM_MSG_2\n         MVC   SPF_MSG_3,COMM_MSG_3\n         MVC   SPF_MSG_4,COMM_MSG_4\n         MVC   SPF_MSG_5,COMM_MSG_5\n         BR    R10\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         OC    DXD_ASSEM_EP,DXD_ASSEM_EP      ASSEMBLER LOADED?\n         BZ    EXIT0010                       NO\n         ITRACE ID=DELASM                     DELETE ASSEMBLER\n         DELETE EP=ASMA90\nEXIT0010 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE REGISTERS         ASE01680\n         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START  DC  Q(DXDASSEM)\nAASMPARM DC    A(ASMPARM+X'80000000')         ASSEMBLER PARM'S\nASMPARM  DC    Y(ASMPARML-2)\n         DC    C'NODECK,NOOBJECT'\nASMPARML EQU   *-ASMPARM\nH4       DC    H'4'\n\nXREF     DC    C' CROSS REFERENCE '\nHEX1F1F  DC    8X'1F'\n*                0 1 2 3 4 5 6 7 8 9 A B C D E F\nCHARHEX  DC    X'000A0B0C0D0E0F000000000000000000'  00-0F\n         DC    X'00010203040506070809000000000000'  10-1F\n\nOP_DSECT DC    CL8'DSECT'\nOP_CSECT DC    CL8'CSECT'\nOP_EQU   DC    C'EQU '\nSRCSTMT  DC    C'SOURCE STATEMENT'\nLABEL_ID DC    CL8'LABEL'\nEQU_ID   DC    CL8'EQU'\n\nMSG01    DS    0C\n         DC    C'DISASSEM01I  Assembler output:'\nMSG01_L  EQU   *-MSG01\n\nMSG02    DS    0C\n         DC    C'DISASSEM02I  End of assembler output'\nMSG02_L  EQU   *-MSG02\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDASSEM        DSECT\n                DS   18F\nDXD_CSECT       DS   CL8\nDXD_ASSEM_EP    DS   A                ASSEMBLER'S ENTRY POINT\nDXD_LABEL       DS   CL63\nDXD_DISP_IN     DS   CL7\nDXD_DISP_OUT    DS   XL4\nDXD_XREF_FLAG   DS   X                CROSS REFERENCE FLAG\n$XREF           EQU  X'80'            .. CROSS REFERENCE HAS BEEN FOUND\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         DISCOMM  TYPE=DSECT\n         DISSPFD  TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY     DISASMDA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHADCBE\n         IFGACB   AM=VSAM\nACB_L    EQU      *-IFGACB\n*---------------------------------------------------------------------*\n*              EQUATES                                                *\n*---------------------------------------------------------------------*\n         COPY REGEQU\n         END  DISASSEM\n./ ADD NAME=DISBIND  0101-09119-09198-0834-00284-00284-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISBIND                                              *\n*                                                                    *\n*  Function:                                                         *\n*   Obtain the requested module's RLD, ESD, text, etc using          *\n*   a BINDER dialog.                                                 *\n*                                                                    *\n*  The function being requested is in COMM_BIND_FUNC.                *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISBIND  CSECT\nDISBIND  AMODE 31\nDISBIND  RMODE ANY\n         USING DISBIND,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'DISBIND'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(,R15)                     CHAIN  SAVE AREA\n         ST    R15,8(,R13)                     CHAIN SAVE AREA\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXDBIND,R13\n         ITRACE ID=ENTRY,                                              +\n               DATA1=COMM_DEBUG_CMD\n         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01\n         BAL   R8,DEBUG000\n         CLI   COMM_BIND_FUNC,$BIND_STARTD    START DIALOG?\n         BE    BIND0010                       YES\n         CLI   COMM_BIND_FUNC,$BIND_NAMES     BUILD NAME CHAIN?\n         BE    BIND0020\n         CLI   COMM_BIND_FUNC,$BIND_ESD_RLD   BUILD ESD/RLD CHAINS?\n         BE    BIND0030\n         CLI   COMM_BIND_FUNC,$BIND_TEXT      READ TEXT?\n         BE    BIND0040\n         CLI   COMM_BIND_FUNC,$BIND_ENDD      END DIALOG?\n         BE    BIND0050\n         DC    H'0'\n*--------------------------------------------------------------------*\n*        Start the dialog                                            *\n*--------------------------------------------------------------------*\nBIND0010 DS    0H\n         ITRACE ID=STARTD\n         IEWBIND FUNC=STARTD,                                          +\n               VERSION=5,                                              +\n               DIALOG=COMM_DIALOG_TOKEN,                               +\n               RETCODE=DXD_RETURN_CODE,                                +\n               RSNCODE=DXD_REASON_CODE,                                +\n               MF=(E,DXD_IEWBIND,COMPLETE)\n         ITRACE ID=STARTDRC,                                           +\n               DATA1=DXD_RETURN_CODE,                                  +\n               DATA2=DXD_REASON_CODE\n         OC    DXD_RETURN_CODE,DXD_RETURN_CODE\n         BNZ   ERR0010\n*--------------------------------------------------------------------*\n*        Create a WORKMOD                                            *\n*--------------------------------------------------------------------*\n         ITRACE ID=CREATEW\n         IEWBIND FUNC=CREATEW,                                         +\n               VERSION=5,                                              +\n               DIALOG=COMM_DIALOG_TOKEN,                               +\n               WORKMOD=COMM_DIALOG_WORKMOD,                            +\n               INTENT=ACCESS,                                          +\n               RETCODE=DXD_RETURN_CODE,                                +\n               RSNCODE=DXD_REASON_CODE,                                +\n               MF=(E,DXD_IEWBIND,COMPLETE)\n         ITRACE ID=CREATWRC,                                           +\n               DATA1=DXD_RETURN_CODE,                                  +\n               DATA2=DXD_REASON_CODE\n         OC    DXD_RETURN_CODE,DXD_RETURN_CODE\n         BNZ   ERR0020\n*--------------------------------------------------------------------*\n*        Set list options                                            *\n*--------------------------------------------------------------------*\n         ITRACE ID=SET_ALL\n         IEWBIND FUNC=SETO,                                            +\n               VERSION=5,                                              +\n               WORKMOD=COMM_DIALOG_WORKMOD,                            +\n               OPTION=LIST,                                            +\n               OPTVAL=ALL,                                             +\n               RETCODE=DXD_RETURN_CODE,                                +\n               RSNCODE=DXD_REASON_CODE,                                +\n               MF=(E,DXD_IEWBIND,COMPLETE)\n         ITRACE ID=SET_RC,                                             +\n               DATA1=DXD_RETURN_CODE,                                  +\n               DATA2=DXD_REASON_CODE\n         OC    DXD_RETURN_CODE,DXD_RETURN_CODE\n         BNZ   ERR0030\n*--------------------------------------------------------------------*\n*        INCLUDE the LMOD                                            *\n*--------------------------------------------------------------------*\n         ITRACE ID=INCLUDE,                                            +\n               DATA1=COMM_DDNAME_LENGTH,                               +\n               DATA2=COMM_LMOD_NAME_LENGTH\n         IEWBIND FUNC=INCLUDE,                                         +\n               VERSION=5,                                              +\n               WORKMOD=COMM_DIALOG_WORKMOD,                            +\n               INTYPE=NAME,                                            +\n               DDNAME=COMM_DDNAME_LENGTH,                              +\n               MEMBER=COMM_LMOD_NAME_LENGTH,                           +\n               RETCODE=DXD_RETURN_CODE,                                +\n               RSNCODE=DXD_REASON_CODE,                                +\n               MF=(E,DXD_IEWBIND,COMPLETE)\n         ITRACE ID=INCL_RC,                                            +\n               DATA1=DXD_RETURN_CODE,                                  +\n               DATA2=DXD_REASON_CODE\n         OC    DXD_REASON_CODE,DXD_REASON_CODE\n         BNZ   ERR0040\n         B     EXIT0000\n*--------------------------------------------------------------------*\n*        Determine section names in module                           *\n*--------------------------------------------------------------------*\nBIND0020 DS    0H\n         ITRACE ID=CALLNAME\n         L     R15,V_DISNAME\n         BALR  R14,R15\n         B     EXIT0000\n*--------------------------------------------------------------------*\n*        Process ESD info                                            *\n*--------------------------------------------------------------------*\nBIND0030 DS    0H\n         ITRACE ID=CALLESD\n         L     R15,V_DISESD\n         BALR  R14,R15\n*--------------------------------------------------------------------*\n*        Process RLD items                                           *\n*--------------------------------------------------------------------*\n         ITRACE ID=CALLRLD\n         L     R15,V_DISRLD\n         BALR  R14,R15\n         B     EXIT0000\n*--------------------------------------------------------------------*\n*        Load the text                                               *\n*--------------------------------------------------------------------*\nBIND0040 DS    0H\n         ITRACE ID=CALLTEXT\n         L     R15,V_DISTEXT\n         BALR  R14,R15\n         B     EXIT0000\n*---------------------------------------------------------------------*\n*        Delete the WORKMOD                                           *\n*---------------------------------------------------------------------*\nBIND0050 DS    0H\n         ITRACE ID=DELETEW,                                            +\n               DATA1=COMM_DIALOG_WORKMOD\n         IEWBIND FUNC=DELETEW,                                         +\n               VERSION=5,                                              +\n               WORKMOD=COMM_DIALOG_WORKMOD,                            +\n               PROTECT=NO,                                             +\n               RETCODE=DXD_RETURN_CODE,                                +\n               RSNCODE=DXD_REASON_CODE,                                +\n               MF=(E,DXD_IEWBIND,COMPLETE)\n         ITRACE ID=DELETERC,                                           +\n               DATA1=DXD_RETURN_CODE,                                  +\n               DATA2=DXD_REASON_CODE\n         OC    DXD_REASON_CODE,DXD_REASON_CODE\n         BNZ   ERR0050\n*---------------------------------------------------------------------*\n*        End the DIALOG                                               *\n*---------------------------------------------------------------------*\n         ITRACE ID=ENDD,                                               +\n               DATA1=COMM_DIALOG_TOKEN\n         IEWBIND FUNC=ENDD,                                            +\n               VERSION=5,                                              +\n               DIALOG=COMM_DIALOG_TOKEN,                               +\n               RETCODE=DXD_RETURN_CODE,                                +\n               RSNCODE=DXD_REASON_CODE,                                +\n               MF=(E,DXD_IEWBIND,COMPLETE)\n         ITRACE ID=ENDD_RC,                                            +\n               DATA1=DXD_RETURN_CODE,                                  +\n               DATA2=DXD_REASON_CODE\n         OC    DXD_REASON_CODE,DXD_REASON_CODE\n         BNZ   ERR0060\n         B     EXIT0000\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDEBUG000 DS    0H\n         L     R15,V_DISDEBUG\n         BALR  R14,R15\n         BR    R8\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nERR0010  DS    0H\n         MVI   COMM_MSG_ID,1\n         B     ERR0070\nERR0020  DS    0H\n         MVI   COMM_MSG_ID,2\n         B     ERR0070\nERR0030  DS    0H\n         MVI   COMM_MSG_ID,3\n         B     ERR0070\nERR0040  DS    0H\n         MVI   COMM_MSG_ID,4\n         B     ERR0070\nERR0050  DS    0H\n         MVI   COMM_MSG_ID,5\n         B     ERR0070\nERR0060  DS    0H\n         MVI   COMM_MSG_ID,6\nERR0070  DS    0H\n         ITRACE ID=ERROR,                                              +\n               DATA1=COMM_MSG_ID\n         OI    COMM_FLAGS,$COMM_FLAGS_ABORT\n         UNPK  COMM_INFO_01(9),DXD_RETURN_CODE(5)\n         TR    COMM_INFO_01(8),COMM_HEXCHAR\n         UNPK  COMM_INFO_02(9),DXD_REASON_CODE(5)\n         TR    COMM_INFO_02(8),COMM_HEXCHAR\n         MVC   COMM_MSG_CSECT,MODID\n         L     R15,V_DISMSG\n         BALR  R14,R15\n         CLI   COMM_RUN_MODE,$COMM_RUN_TSO\n         BE    ERR0080\n         LA    R1,COMM_MSG_1\n         MVC   PRINT_DATA(L'COMM_MSG_1),COMM_MSG_1\n         MVI   PRINT_COMMAND,$PRINT_PRINT\n         L     R15,V_DISPRINT\n         BALR  R14,R15\n         B     EXIT0000\nERR0080  DS    0H\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n         MVC   SPF_MSG_1,COMM_MSG_1\n         MVC   SPF_MSG_2,COMM_MSG_2\n         MVC   SPF_MSG_3,COMM_MSG_3\n         MVC   SPF_MSG_4,COMM_MSG_4\n         MVC   SPF_MSG_5,COMM_MSG_5\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02\n         BAL   R8,DEBUG000                    CALL DISDEBUG\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE REGISTERS         ASE01680\n         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START     DC   Q(DXDBIND)\nLIST          DC   H'4',C'LIST'\nALL           DC   H'3',C'ALL'\n\n              IEWBIND MF=(L,IEWBIND_I)\nIEWBIND_L     EQU  *-IEWBIND_I\n\nMSG01         DC   C'DISBIND01I   Entering DISBIND'\nMSG01_L       EQU  *-MSG01\n\nMSG02         DC   C'DISBIND02I   Exiting DISBIND'\nMSG02_L       EQU  *-MSG02\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDBIND           DSECT\n                  DS       18F\nDXD_CSECT         DS       CL8\nDXD_RETURN_CODE   DS   F\nDXD_REASON_CODE   DS   F\n\nDXD_IEWBIND       DS   0F,(IEWBIND_L)X\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n                  DISCOMM  TYPE=DSECT\n                  DISSPFD  TYPE=DSECT\n                  COPY     DISASMDA\n\n                  IFGACB  AM=VSAM\nACB_L             EQU     *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n                 COPY REGEQU\n                 END  DISBIND\n./ ADD NAME=DISBLIST 0108-09119-09198-0835-00691-00666-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: DISBLIST                                              *\n*                                                                     *\n*  FUNCTION:                                                          *\n*    Display/allow definition of BASE register(s)                     *\n*                                                                     *\n*                                                                     *\n*    BASE blocks are chained from COMM_BASE_NEXT.                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISBLIST CSECT\nDISBLIST AMODE 31\nDISBLIST RMODE ANY\n         USING DISBLIST,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'DISBLIST'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDBLIST,R13\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n         USING BASE_DSECT,R6\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        In order to allow the user to \"cancel\" changes,              *\n*        first \"copy\" the existing BASE chain.                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         XC    DXD_FIRST_BASE,DXD_FIRST_BASE\n         XC    DXD_FIRST_DISPLAYED,DXD_FIRST_DISPLAYED\n         LA    R2,DXD_FIRST_BASE-4\nPREV     USING BASE_DSECT,R2\n         ICM   R6,15,COMM_BASE_NEXT           FIRST BASE\n         BZ    INIT0020\nINIT0010 DS    0H\n         GETMAIN RU,                                                   +\n               LV=BASE_DSECT_L,                                        +\n               LOC=ANY\nNEW      USING BASE_DSECT,R1\n         MVC   NEW.BASE_DSECT(BASE_DSECT_L),BASE_DSECT\n         ST    R1,PREV.BASE_NEXT\n         LR    R2,R1\n         ICM   R6,15,BASE_NEXT\n         BNZ   INIT0010\n         MVC   DXD_FIRST_DISPLAYED,DXD_FIRST_BASE\n         DROP  NEW,PREV\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINIT0020 DS    0H\n         L     R0,SPF_VDEPTH                  NBR OF LINES\n         SLL   R0,2                           MULTIPLY BY 4\n         ST    R0,DXD_BASE_TABLE_SIZE\n         GETMAIN RU,                                                   +\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,DXD_BASE_TABLE              SAVE ADDRESS\n         ITRACE ID=A_TABLE,                                            +\n               RDATA1=R1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=INIT_V\n         L     R0,COMM_VDATA_ADDR\n         L     R1,COMM_VDATA_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                         INITIALIZE VDATA\n         L     R0,DXD_BASE_TABLE\n         L     R1,DXD_BASE_TABLE_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                         INIT BASE TABLE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=FORMAT\n         L     R8,SPF_VWIDTH                  SCREEN WIDTH\n         SH    R8,=Y(MSG01_L)                 MINUS WIDTH IN USE\n         SRL   R8,1                           DIVIDE BY 2\n         A     R8,COMM_VDATA_ADDR             PLUS VDATA ADDR\n         L     R7,SPF_VDEPTH                  NBR OF LINES\nMAIN0020 DS    0H\n         MVC   0(MSG01_L,R8),MSG01            INITIALIZE\n         A     R8,SPF_VWIDTH                  NEXT LINE\n         BCT   R7,MAIN0020                    LOOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R8,SPF_VWIDTH                  SCREEN WIDTH\n         SH    R8,=Y(MSG01_L)                 MINUS WIDTH IN USE\n         SRL   R8,1                           DIVIDE BY 2\n         A     R8,COMM_VDATA_ADDR             PLUS VDATA ADDR\n         USING MSG01,R8\n         L     R7,SPF_VDEPTH\nMAIN0030 DS    0H\n         L     R4,DXD_BASE_TABLE              FIRST 'SLOT'\n         XC    DXD_NBR_DISPLAYED,DXD_NBR_DISPLAYED\n         ICM   R6,15,DXD_FIRST_DISPLAYED      FIRST TO DISPLAY\n         BZ    MAIN0060                       NOTHING DEFINED YET\nMAIN0040 DS    0H\n         ITRACE ID=BUILD,                                              +\n               RDATA1=R6,                                              +\n               DATA2=BASE_DISP\n         ST    R6,DXD_LAST_DISPLAYED          SAVE ADDR\n         ST    R6,0(R4)                       SAVE ADDR\n         UNPK  DXD_WORK(9),BASE_BEGIN(5)      UNPACK BEGIN DISP\n         TR    DXD_WORK(8),COMM_HEXCHAR       TRANSLATE\n         MVC   MSG01_BEGIN,DXD_WORK           COPY BEGIN\n         UNPK  DXD_WORK(9),BASE_END(5)        UNPACK BEGIN DISP\n         TR    DXD_WORK(8),COMM_HEXCHAR       TRANSLATE\n         MVC   MSG01_END,DXD_WORK             COPY BEGIN\n         UNPK  DXD_WORK(9),BASE_DISP(5)       UNPACK REF DISP\n         TR    DXD_WORK(8),COMM_HEXCHAR       TRANSLATE\n         MVC   MSG01_DISP,DXD_WORK            COPY DISP\n         MVC   MSG01_REGISTER,BASE_CHAR_REGISTER\n         LA    R1,1                           CONSTANT 1\n         AH    R1,DXD_NBR_DISPLAYED           PLUS TOTAL SO FAR\n         STH   R1,DXD_NBR_DISPLAYED           SAVE TOTAL\n         LA    R4,4(,R4)                      NEXT IN ADDR TABLE\n         A     R8,SPF_VWIDTH                  NEXT LINE\n         BCT   R7,MAIN0050\n         B     MAIN0060\nMAIN0050 DS    0H\n         ICM   R6,15,BASE_NEXT\n         BNZ   MAIN0040\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0060 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_SPF_PANEL,DISBDATA        SET PANEL NAME\n         L     R15,V_DISDISP                  DISP ENTRY POINT\n         BALR  R14,R15                        DISPLAY\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15,                                             +\n               DATA2=SPF_ZVERB\n         LTR   R2,R15                         RC = 0?\n         BNZ   MAIN0500                       NO\n         CLC   ABEND,SPF_ZCMD                 ABEND?\n         BE    ABEND000                       YES\n         CLC   CANCEL,SPF_ZCMD                CANCEL?\n         BE    MAIN0550                       YES\n         CLC   CAN,SPF_ZCMD                   CAN(CEL)?\n         BE    MAIN0550                       YES\n* ------------------------------------------------------------------- *\n*        Check for new or changes to existing BASE(s)                 *\n* ------------------------------------------------------------------- *\n         L     R8,SPF_VWIDTH                  SCREEN WIDTH\n         SH    R8,=Y(MSG01_L)                 MINUS WIDTH IN USE\n         SRL   R8,1                           DIVIDE BY 2\n         A     R8,COMM_VDATA_ADDR             PLUS VDATA ADDR\n         L     R7,SPF_VDEPTH                  NBR OF LINES\n         NI    DXD_FLAGS,255-$DXD_ERROR       RESET FLAG\n         XC    DXD_CONV_OUT,DXD_CONV_OUT\nMAIN0070 DS    0H\n         ITRACE ID=VERIFY,                                             +\n               DATA1=MSG01_REGISTER\n         MVC   MSG01_MSG,COMM_BLANKS\n         OC    MSG01_BEGIN,COMM_BLANKS\n         OC    MSG01_END,COMM_BLANKS\n         OC    MSG01_DISP,COMM_BLANKS\n         OC    MSG01_REGISTER,COMM_BLANKS\n         CLC   MSG01_BEGIN,COMM_BLANKS        BEGIN BLANK?\n         BE    MAIN0100                       YES\n         CLC   MSG01_END,COMM_BLANKS          END BLANK?\n         BE    MAIN0120                       YES\n         CLC   MSG01_REGISTER,COMM_BLANKS     REGISTER BLANK\n         BE    MAIN0130                       YES\n\n         ITRACE ID=VER_BEGN,                                           +\n               DATA1=MSG01_BEGIN\n         LA    R1,MSG01_BEGIN                 BEGIN DISP IN EFFECT\n         ST    R1,DXD_CONV_SOURCE             SET DISP SOURCE\n         LA    R1,DXD_CONV_PARMS              DISP CONVERTER PARMS\n         L     R15,V_DISDCONV                 DISP CONVERTER EP\n         BALR  R14,R15                        VERIFY BEGIN DISP\n         LTR   R15,R15                        VALID DISP?\n         BNZ   MAIN0090                       NO\n\n         ITRACE ID=VER_END,                                            +\n               DATA1=MSG01_END\n         LA    R1,MSG01_END                   END DISP IN EFFECT\n         ST    R1,DXD_CONV_SOURCE             SET DISP SOURCE\n         LA    R1,DXD_CONV_PARMS              DISP CONVERTER PARMS\n         L     R15,V_DISDCONV                 DISP CONVERTER EP\n         BALR  R14,R15                        VERIFY BEGIN DISP\n         LTR   R15,R15                        VALID DISP?\n         BNZ   MAIN0090                       NO\n\n         ITRACE ID=VER_DISP,                                           +\n               DATA1=MSG01_DISP\n         LA    R1,MSG01_DISP                  DISP REFERENCED\n         ST    R1,DXD_CONV_SOURCE             SET DISP SOURCE\n         LA    R1,DXD_CONV_PARMS              DISP CONVERTER PARMS\n         L     R15,V_DISDCONV                 DISP CONVERTER EP\n         BALR  R14,R15                        VERIFY BEGIN DISP\n         LTR   R15,R15                        VALID DISP?\n         BNZ   MAIN0090                       NO\n\nMAIN0080 DS    0H\n         BAL   R5,MAIN0450                    VERIFY REGISTER\n         LTR   R1,R1                          REGISTER LOCATED?\n         BZ    MAIN0140                       NO\n         MVC   DXD_WORK(8),MSG01_BEGIN        COPY BEGIN DISP\n         TR    DXD_WORK(8),CHARHEX            TRANSLATE\n         PACK  DXD_BEGIN(5),DXD_WORK(9)       PACK BEGIN DISP\n         MVC   DXD_WORK(8),MSG01_END          COPY END DISP\n         TR    DXD_WORK(8),CHARHEX            TRANSLATE\n         PACK  DXD_END(5),DXD_WORK(9)         PACK END DISP\n         CLC   DXD_BEGIN,DXD_END              END > BEGIN?\n         BNH   MAIN0160                       NO\n         MVI   COMM_MSG_ID,1                  SET MESSAGE ID\n         B     MAIN0150\nMAIN0090 DS    0H\n         ITRACE ID=BADDIGIT\n         MVI   COMM_MSG_ID,2                  SET MESSAGE ID\n         B     MAIN0150\nMAIN0100 DS    0H\n         CLC   MSG01_END,COMM_BLANKS          END BLANK?\n         BE    MAIN0110                       YES\n         MVI   COMM_MSG_ID,3                  END, NO BEGIN\n         B     MAIN0150\nMAIN0110 DS    0H\n         CLC   MSG01_REGISTER,COMM_BLANKS     REGISTER BLANK?\n         BE    MAIN0160                       YES\n         MVI   COMM_MSG_ID,4                  REG, NO BEGIN\n         B     MAIN0150\nMAIN0120 DS    0H\n         MVI   COMM_MSG_ID,5                  BEGIN, NO END\n         B     MAIN0150\nMAIN0130 DS    0H\n         MVI   COMM_MSG_ID,6                  BEGIN, NO REGISTER\n         B     MAIN0150\nMAIN0140 DS    0H\n         MVI   COMM_MSG_ID,7                  BAD REGISTER\nMAIN0150 DS    0H\n         OI    DXD_FLAGS,$DXD_ERROR           ERROR HAS OCCURRED\n         BAL   R5,MSG0000                     BUILD MESSAGE\n         MVC   MSG01_MSG,COMM_MSG_1           COPY MESSAGE\nMAIN0160 DS    0H\n         A     R8,SPF_VWIDTH                  NEXT LINE\n         BCT   R7,MAIN0070                    LOOP\n         TM    DXD_FLAGS,$DXD_ERROR           ERROR(S)?\n         BO    MAIN0060                       YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        No errors have been found                                    *\n*                                                                     *\n*        Determine if any BASE(s) were                                *\n*          updated                                                    *\n*          removed                                                    *\n*          added                                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R8,SPF_VWIDTH                  SCREEN WIDTH\n         SH    R8,=Y(MSG01_L)                 MINUS WIDTH IN USE\n         SRL   R8,1                           DIVIDE BY 2\n         A     R8,COMM_VDATA_ADDR             PLUS VDATA ADDR\n         L     R7,SPF_VDEPTH                  NBR OF LINES\n         L     R4,DXD_BASE_TABLE              FIRST BASE\nMAIN0170 DS    0H\n         ITRACE ID=MAIN0170\n         L     R6,0(,R4)                      BASE BLOCK IF USED\n         CLC   MSG01_BEGIN,COMM_BLANKS        BLANK?\n         BE    MAIN0240                       YES\n\n         LA    R1,MSG01_BEGIN\n         ST    R1,DXD_CONV_SOURCE\n         LA    R1,DXD_BEGIN\n         ST    R1,DXD_CONV_OUT\n         LA    R1,DXD_CONV_PARMS\n         L     R15,V_DISDCONV\n         BALR  R14,R15                        CONVERT BEGIN DISP\n\n         LA    R1,MSG01_END\n         ST    R1,DXD_CONV_SOURCE\n         LA    R1,DXD_END\n         ST    R1,DXD_CONV_OUT\n         LA    R1,DXD_CONV_PARMS\n         L     R15,V_DISDCONV\n         BALR  R14,R15                        CONVERT END DISP\n\n         LA    R1,MSG01_DISP\n         ST    R1,DXD_CONV_SOURCE\n         LA    R1,DXD_DISP\n         ST    R1,DXD_CONV_OUT\n         LA    R1,DXD_CONV_PARMS\n         L     R15,V_DISDCONV\n         BALR  R14,R15                        CONVERT REFERENCED DISP\n\n         B     MAIN0190\nMAIN0180 DS    0H\n         XC    DXD_DISP,DXD_DISP              FORCE DISP=ZERO\nMAIN0190 DS    0H\n         BAL   R5,MAIN0450                    LOOKUP REGISTER\n         LTR   R6,R6                          BASE EXIST?\n         BZ    MAIN0210                       NO\n         CLC   BASE_BEGIN,DXD_BEGIN           SAME BEGIN DISP?\n         BNE   MAIN0200                       NO\n         CLC   BASE_END,DXD_END               SAME END DISP?\n         BNE   MAIN0200                       NO\n         CLC   BASE_DISP,DXD_DISP             SAME REFERENCED DISP?\n         BNE   MAIN0200                       NO\n         CLC   BASE_CHAR_REGISTER,DXD_REG_CHAR   SAME REGISTER?\n         BE    MAIN0280                       YES\nMAIN0200 DS    0H\n         ITRACE ID=UPDTBASE\n         OI    DXD_FLAGS,$DXD_UPDATE          BASE HAS BEEN UPDATED\n         MVC   BASE_BEGIN,DXD_BEGIN           CHANGE BEGIN DISP\n         MVC   BASE_END,DXD_END               CHANGE END DISP\n         MVC   BASE_DISP,DXD_DISP             CHANGE REF DISP\n         MVC   BASE_CHAR_REGISTER,DXD_REG_CHAR   CHANGE CHAR REGISTER\n         MVC   BASE_REGISTER,DXD_REG_BIN      CHANGE BINARY REGISTER\n         B     MAIN0280\nMAIN0210 DS    0H\n         ITRACE ID=NEW_BASE\n         OI    DXD_FLAGS,$DXD_UPDATE\n         GETMAIN RU,                                                   +\n               LV=BASE_DSECT_L,                                        +\n               LOC=ANY\nNEW      USING BASE_DSECT,R1\n         XC    NEW.BASE_DSECT(BASE_DSECT_L),NEW.BASE_DSECT\n         MVC   NEW.BASE_EYE,BASE_ID           IDENTIFY BLOCK\n         MVC   NEW.BASE_BEGIN,DXD_BEGIN       SET BEGIN DISP\n         MVC   NEW.BASE_END,DXD_END           SET END DISP\n         MVC   NEW.BASE_DISP,DXD_DISP         SET DISP REFERENCED\n         MVC   NEW.BASE_CHAR_REGISTER,DXD_REG_CHAR\n         MVC   NEW.BASE_REGISTER,DXD_REG_BIN  COPY BINARY REGISTER\n         LA    R6,DXD_FIRST_BASE-4            FIRST BASE\nMAIN0220 DS    0H\n         ICM   R2,15,BASE_NEXT                ANOTHER ON CHAIN?\n         BZ    MAIN0230                       YES\n         LR    R6,R2                          COPY ADDRESS\n         B     MAIN0220\nMAIN0230 DS    0H\n         ST    R1,BASE_NEXT                   SET 'NEXT' IN PREVIOUS\n         ST    R6,NEW.BASE_PREV               SET PREV IN NEW\n         OC    DXD_FIRST_DISPLAYED,DXD_FIRST_DISPLAYED\n         BNZ   MAIN0280                       BLOCK PRESENT\n         ST    R1,DXD_FIRST_DISPLAYED         SET FIRST ON CHAIN\n         B     MAIN0280\n         DROP  NEW\nMAIN0240 DS    0H\n         LTR   R6,R6                          BASE EXIST?\n         BZ    MAIN0280                       NO\n         OI    DXD_FLAGS,$DXD_UPDATE          A BASE WAS UPDATED\n         ITRACE ID=DEL_BASE,                  DELETING A BASE          +\n               RDATA1=R6,                                              +\n               DATA2=BASE_BEGIN\n         ICM   R1,15,BASE_NEXT                NEXT BASE ON CHAIN\n         BZ    MAIN0250\nNEXT     USING BASE_DSECT,R1\n         MVC   NEXT.BASE_PREV,BASE_PREV       SET PREV IN NEXT\n         DROP  NEXT\nMAIN0250 DS    0H\n         ICM   R1,15,BASE_PREV                PREVIOUS ON CHAIN\n         BZ    MAIN0260                       NO PREVIOUS BLOCK\nPREV     USING BASE_DSECT,R1\n         MVC   PREV.BASE_NEXT,BASE_NEXT       SET NEXT IN PREVIOUS\nMAIN0260 DS    0H\n         C     R6,DXD_FIRST_DISPLAYED         FIRST BASE DISPLAYED?\n         BNE   MAIN0270                       NO\n         MVC   DXD_FIRST_DISPLAYED,BASE_NEXT  CHANGE TO NEXT BLOCK\nMAIN0270 DS    0H\n         FREEMAIN RU,                         FREEMAIN THE BASE        +\n               A=(R6),                                                 +\n               LV=BASE_DSECT_L\n         XC    0(4,R4),0(R4)                  CLEAR ADDR IN TABLE\nMAIN0280 DS    0H\n         ITRACE ID=NEXT\n         A     R8,SPF_VWIDTH                  NEXT LINE\n         LA    R4,4(,R4)                      NEXT IN TABLE\n         BCT   R7,MAIN0170                    LOOP\n         TM    DXD_FLAGS,$DXD_UPDATE          ANY UPDATES?\n         BO    MAIN0010                       YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CLI   SPF_ZVERB,C'B'                 BOTTOM?\n         BE    MAIN0300\n         CLI   SPF_ZVERB,C'D'                 DOWN?\n         BE    MAIN0320\n         CLI   SPF_ZVERB,C'T'                 TOP?\n         BE    MAIN0330\n         CLI   SPF_ZVERB,C'U'                 UP?\n         BE    MAIN0340\n         B     MAIN0050\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=BOTTOM\n         ICM   R1,15,DXD_FIRST_BASE           FIRST ON CHAIN\nTEMP     USING BASE_DSECT,R1\n         BZ    EXIT0000                       SHOULD NOT HAPPEN!\nMAIN0310 DS    0H\n         LR    R6,R1                          SAVE THIS ADDR\n         ICM   R1,15,TEMP.BASE_NEXT           NEXT BASE\n         BNZ   MAIN0310\n         B     MAIN0010                       BUILD DISPLAY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0320 DS    0H\n         ITRACE ID=DOWN\n         CLI   SPF_ZSCROLLA,C'M'              MAX?\n         BE    MAIN0300                       YES\n         L     R6,DXD_LAST_DISPLAYED          LAST ITEM DISPLAYED\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0330 DS    0H\n         ITRACE ID=TOP\n         L     R6,DXD_FIRST_BASE              FIRST DATA ITEM\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0340 DS    0H\n         ITRACE ID=UP\n         CLI   SPF_ZSCROLLA,C'M'              MAX?\n         BE    MAIN0330                       YES\n         ICM   R1,15,DXD_FIRST_DISPLAYED      FIRST ON DISPLAY\n         BZ    EXIT0000                       SHOULD NOT HAPPEN!\n         L     R7,SPF_ZSCROLLN                LINES ON DISPLAY\nMAIN0350 DS    0H\n         LR    R6,R1                          COPY ADDR\n         ICM   R1,15,TEMP.BASE_PREV           PREVIOUS BASE\n         BZ    MAIN0010\n         BCT   R7,MAIN0350                    LOOP\n         B     MAIN0010\n         DROP  TEMP\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0450 DS    0H\n         ITRACE ID=VER_REG,                                            +\n               DATA1=MSG01_REGISTER\n         LA    R1,2                           MAX LOOPS\nMAIN0460 DS    0H\n         CLI   MSG01_REGISTER,C' '            BLANK?\n         BNE   MAIN0470                       NO\n         ITRACE ID=SHIFT\n         MVC   MSG01_REGISTER(2),MSG01_REGISTER+1\n         MVI   MSG01_REGISTER+2,C' '          INSERT BLANK\n         BCT   R1,MAIN0460\nMAIN0470 DS    0H\n         LA    R1,$NBR_IN_TABLE               NBR IN REG TABLE\n         LA    R2,REG_TABLE                   REG TABLE\n         USING REG_DSECT,R2\nMAIN0480 DS    0H\n         ITRACE ID=CHECKREG,                                           +\n               DATA1=REG_A,                                            +\n               DATA2=MSG01_REGISTER\n         CLC   REG_A,MSG01_REGISTER           LOCATED?\n         BE    MAIN0490                       YES\n         LA    R2,REG_DSECT_L(,R2)            NEXT\n         BCT   R1,MAIN0480                    LOOP\n         BR    R5\nMAIN0490 DS    0H\n         ITRACE ID=GOOD_REG,                                           +\n               DATA1=REG_A\n         MVC   DXD_REG_CHAR,REG_B             COPY CHAR FORM\n         MVC   DXD_REG_BIN,REG_C              COPY BINARY FORM\n         BR    R5\n         DROP  R2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      Replace the existing BASE chain with the updated chain         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0500 DS    0H\n         ITRACE ID=SWITCH\n         ICM   R6,15,COMM_BASE_NEXT           FIRST USER BASE\n         BZ    MAIN0520\nMAIN0510 DS    0H\n         LR    R1,R6                          COPY ADDRESS\n         ICM   R6,15,BASE_NEXT                NEXT BASE\n         FREEMAIN RU,                         FREEMAIN THIS BASE       +\n               A=(1),                                                  +\n               LV=BASE_DSECT_L\n         LTR   R6,R6                          ANOTHER BASE?\n         BNZ   MAIN0510                       YES\nMAIN0520 DS    0H\n         MVC   COMM_BASE_NEXT,DXD_FIRST_BASE\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0550 DS    0H\n         ITRACE ID=CANCEL\n         MVC   SPF_ZCMD,COMM_BLANKS           RESET COMMAND\n         ICM   R6,15,DXD_FIRST_BASE           FIRST ON NEW CHAIN\n         BZ    EXIT0000                       NONE ON CHAIN\nMAIN0560 DS    0H\n         LR    R1,R6                          COPY ADDR\n         ICM   R6,15,BASE_NEXT                NEXT BASE BLOCK\n         FREEMAIN RU,                         FREE THIS BLOCK          +\n               A=(1),                                                  +\n               LV=BASE_DSECT_L\n         LTR   R6,R6                          ANOTHER BLOCK?\n         BNZ   MAIN0560                       YES\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0000  DS    0H\n         ITRACE ID=MSG,                                                +\n               DATA1=COMM_MSG_ID\n         MVC   COMM_MSG_CSECT,MODID\n         L     R15,V_DISMSG\n         BALR  R14,R15\n         BR    R5\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R0,DXD_BASE_TABLE_SIZE         ADDR TABLE SIZE\n         L     R1,DXD_BASE_TABLE              ADDR TABLE ADDR\n         FREEMAIN RU,                         FREEMAIN ADDR TABLE      +\n               A=(1),                                                  +\n               LV=(0)\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         L     R14,12(,R13)                   RESTORE REGISTERS         ASE01680\n         LR    R15,R2                         SET RC\n         LM    R0,R12,20(R13)                 RESTORE REGISTERS         ASE01680\n         BR    R14                            RETURN TO CALLER          ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nABEND000 DS    0H\n         ITRACE ID=ABEND\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC   Q(DXDBLIST)\n\nABEND         DC   C'ABEND '\nBASE_ID       DC   CL8'BASE'\nCAN           DC   C'CAN '\nCANCEL        DC   C'CANCEL '\nDISBDATA      DC   CL8'DISBDATA'\n\n              LTORG\n\nCHARHEX       DC   256X'00'\n              ORG  CHARHEX+C'A'\n              DC   X'0A0B0C0D0E0F'\n              ORG  CHARHEX+C'0'\n              DC   X'00010203040506070809'\n              ORG\n\nREG_TABLE     DS   0C\n              DC   C'0  ',C'R0 ',X'00'\n              DC   C'1  ',C'R1 ',X'01'\n              DC   C'2  ',C'R2 ',X'02'\n              DC   C'3  ',C'R3 ',X'03'\n              DC   C'4  ',C'R4 ',X'04'\n              DC   C'5  ',C'R5 ',X'05'\n              DC   C'6  ',C'R6 ',X'06'\n              DC   C'7  ',C'R7 ',X'07'\n              DC   C'8  ',C'R8 ',X'08'\n              DC   C'9  ',C'R9 ',X'09'\n              DC   C'10 ',C'R10',X'0A'\n              DC   C'11 ',C'R11',X'0B'\n              DC   C'12 ',C'R12',X'0C'\n              DC   C'13 ',C'R13',X'0D'\n              DC   C'14 ',C'R14',X'0E'\n              DC   C'15 ',C'R15',X'0F'\n              DC   C'A  ',C'R10',X'0A'\n              DC   C'B  ',C'R11',X'0B'\n              DC   C'C  ',C'R12',X'0C'\n              DC   C'D  ',C'R13',X'0D'\n              DC   C'E  ',C'R14',X'0E'\n              DC   C'F  ',C'R15',X'0F'\n              DC   C'R0 ',C'R0 ',X'00'\n              DC   C'R1 ',C'R1 ',X'01'\n              DC   C'R2 ',C'R2 ',X'02'\n              DC   C'R3 ',C'R3 ',X'03'\n              DC   C'R4 ',C'R4 ',X'04'\n              DC   C'R5 ',C'R5 ',X'05'\n              DC   C'R6 ',C'R6 ',X'06'\n              DC   C'R7 ',C'R7 ',X'07'\n              DC   C'R8 ',C'R8 ',X'08'\n              DC   C'R9 ',C'R9 ',X'09'\n              DC   C'R10',C'R10',X'0A'\n              DC   C'R11',C'R11',X'0B'\n              DC   C'R12',C'R12',X'0C'\n              DC   C'R13',C'R13',X'0D'\n              DC   C'R14',C'R14',X'0E'\n              DC   C'R15',C'R15',X'0F'\n              DC   X'000000',C'   ',X'00'    DUMMY ENTRY\nREG_TABLE_L   EQU  *-REG_TABLE\n$NBR_IN_TABLE EQU  REG_TABLE_L/REG_DSECT_L\n\n\nMSG01         DS   0C\n              DC   AL1($ATTR_INPUT)\nMSG01_BEGIN   DC   CL8' '\n              DC   AL1($ATTR_NORMAL)\n              DC   CL3' '\n              DC   AL1($ATTR_INPUT)\nMSG01_END     DC   CL8' '\n              DC   AL1($ATTR_NORMAL)\n              DC   CL3' '\n              DC   AL1($ATTR_INPUT)\nMSG01_DISP    DC   CL8' '\n              DC   AL1($ATTR_NORMAL)\n              DC   CL3' '\n              DC   AL1($ATTR_INPUT)\nMSG01_REGISTER DC  CL3' '\n              DC   AL1($ATTR_HIGH_YELLOW)\nMSG01_MSG     DC   CL30' '\nMSG01_L       EQU  *-MSG01\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDBLIST              DSECT\n                      DS  18F\n\n                      DS  A             DUMMY FOR 'PREV' ON CHAIN\nDXD_FIRST_BASE        DS  A             FIRST DATA ITEM ON CHAIN\n\nDXD_FIRST_DISPLAYED   DS  A             FIRST DATA ITEM DISPLAYED\nDXD_LAST_DISPLAYED    DS  A             LAST DATA ITEM DISPLAYED\n\nDXD_BASE_TABLE        DS  A\nDXD_BASE_TABLE_SIZE   DS  F\n\nDXD_CONV_PARMS        DS  0A\nDXD_CONV_SOURCE       DS  A\nDXD_CONV_OUT          DS  A\n\nDXD_BEGIN             DS  F\nDXD_END               DS  F\nDXD_DISP              DS  F\nDXD_REG_CHAR          DS  CL3\nDXD_REG_BIN           DS  X\n\nDXD_NBR_DISPLAYED     DS  H             NBR OF DATA ITEMS DISPLAYED\n\nDXD_FLAGS             DS  X             FLAGS\n$DXD_ERROR            EQU X'80'         .. SERIOUS ERROR\n$DXD_UPDATE           EQU X'40'         .. BASE(S) UPDATED\n\nDXD_WORK              DS  CL9\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREG_DSECT     DSECT\nREG_A         DS      CL3\nREG_B         DS      CL3\nREG_C         DS      X                 FORM IN INSTRUCTIONS\nREG_DSECT_L   EQU     *-REG_DSECT\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              DISCOMM TYPE=DSECT\n              DISSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    DISASMDA\n              COPY    ATTRS\n\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    REGEQU\n              END     DISBLIST\n./ ADD NAME=DISBMAIN 0101-09119-09198-0835-00933-00933-00000-SOURCE\n* -------------------------------------------------------------------*\n*                                                                    *\n*        BATCH MAINLINE                                              *\n*                                                                    *\n* -------------------------------------------------------------------*\nDISBMAIN CSECT\nDISBMAIN AMODE 31\nDISBMAIN RMODE ANY\n         USING DISBMAIN,R11,R10\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     INIT0000                       SKIP EYECATCHER\nMODID    DC    CL8'DISBMAIN'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nINIT0000 DS    0H\n         LA    R10,2048(,R11)\n         LA    R10,2048(,R10)\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(,R15)                    CHAIN  SAVE AREA\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXDBMAIN,R13\n         ITRACE ID=ENTRY\n* ------------------------------------------------------------------- *\n*        Verify required DD's are present                             *\n* ------------------------------------------------------------------- *\n         TM    COMM_DDS,$DISPRINT_DD          DISPRINT DD PRESENT?\n         BNO   ERR0010                        NO\n         ITRACE ID=OPNPRINT\n         OPEN  (DISPRINT_DCB,OUTPUT),         OPEN DISPRINT            +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n         TM    COMM_DDS,$DISIN_DD             DISIN DD PRESENT?\n         BNO   ERR0020                        NO\n         TM    COMM_DDS,$DISMOD_DD            DISMOD DD PRESENT?\n         BNO   ERR0030                        NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     OPEN \"preprocessed\" DSECT libraries.                            *\n*                                                                     *\n*     Actual DSECT source or MACROs can be used to 'map' data areas.  *\n*                                                                     *\n*     The DSECT or MACRO source may be 'preprocessed'.  Since labels  *\n*     can be longer than eight characters (longer than a member name  *\n*     in a PDS(/E), I chose to record the pre-processed info in a     *\n*     VSAM KSDS.                                                      *\n*                                                                     *\n*     Also since VSAM KSDSes cannot be concatenated, the disassembler *\n*     allows multiple DSECTxx DDs.  DISTIOT will have chained         *\n*     control blocks from COMM_DSECT_KSDS for each DSECTxx DD.        *\n*                                                                     *\n*     When the disassembler searches for a DSECT name, it searches    *\n*     the DSECT libraries in the order they are specified in the JCL. *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ICM   R7,15,COMM_KSDS_NEXT           1ST KSDS\n         BZ    INIT0030\n         USING KSDS_DSECT,R7                  DEFINE BASE\nINIT0020 DS    0H\n         LA    R2,KSDS_ACB                    ACB ADDRESS\n         ITRACE ID=OPENKSDS,                                           +\n               DATA1=KSDS_DDNAME,                                      +\n               RDATA2=R2\n         OPEN  ((R2),INPUT),                                           +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0040\n         OI    KSDS_FLAGS,$KSDS_OPEN\n         ICM   R7,15,KSDS_NEXT\n         BNZ   INIT0020\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINIT0030 DS    0H\n         TM    COMM_DDS,$DISDEBUG_DD          DISDEBUG PRESENT\n         BNO   INIT0040                       NO\n         OPEN  (DISDEBUG_DCB,OUTPUT),         OPEN PRINT               +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\nINIT0040 DS    0H\n         MVI   PRINT_COMMAND,$PRINT_HEADING   PRINT HEADING\n         L     R15,V_DISPRINT\n         BALR  R14,R15\n* ------------------------------------------------------------------- *\n*        Read parameters                                              *\n* ------------------------------------------------------------------- *\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT    SET COMMAND\n         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01\n         BAL   R9,DEBUG000                    PRINT\n         L     R15,V_DISPARM                  DISPARM ENTRY POINT\n         BALR  R14,R15                        CALL DISPARM\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS PROBLEM?\n         BO    ERR0050                        YES\n         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02\n         BAL   R9,DEBUG000                    PRINT\n         MVC   COMM_DEBUG_IO+1(MSG80_L),MSG80\n         BAL   R9,DEBUG000                    PRINT\n         MVI   COMM_DEBUG_CMD,$DEBUG_INFO     SET COMMAND TO DEBUG\n         BAL   R9,DEBUG000                    CALL DISDEBUG\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT    SET COMMAND TO 'PRINT'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*         Determine which OPCODE table to use                         *\n*                                                                     *\n*                                                                     *\n*     DISOP1   no floating point, no new 'z' opcodes                  *\n*     DISOP2   floating point, no new 'z' opcodes                     *\n*     DISOP3   floating point, z opcodes                              *\n*     DISOP4   No floating point, z opcodes                           *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TM    COMM_FLAGS,$COMM_FLOAT+$COMM_Z FLOATING POINT AND Z?\n         BO    INIT0070                       CORRECT\n         TM    COMM_FLAGS,$COMM_Z             NO FLOATING POINT, W/Z?\n         BO    INIT0060                       CORRECT\n         TM    COMM_FLAGS,$COMM_FLOAT         FLOATING POINT, NO Z?\n         BO    INIT0050                       CORRECT\n         ITRACE ID=OP_1\n         MVI   COMM_OPCODE_TABLE_NAME+5,C'1'  USE DISOP1\n         B     INIT0080\nINIT0050 DS    0H\n         ITRACE ID=OP_2\n         MVI   COMM_OPCODE_TABLE_NAME+5,C'2'  USE DISOP2\n         B     INIT0080\nINIT0060 DS    0H\n         ITRACE ID=OP_3\n         MVI   COMM_OPCODE_TABLE_NAME+5,C'3'  USE DISOP3\n         B     INIT0080\nINIT0070 DS    0H\n         ITRACE ID=OP_4\n         MVI   COMM_OPCODE_TABLE_NAME+5,C'4'  USE DISOP4\nINIT0080 DS    0H\n         ITRACE ID=LOAD_OP,                                            +\n               DATA1=COMM_OPCODE_TABLE_NAME\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT\n         MVC   COMM_DEBUG_IO+1(MSG03_L),MSG03\n         MVC   COMM_DEBUG_IO+1+(MSG03_OPCODE-MSG03)(8),COMM_OPCODE_TABL+\n               E_NAME\n         BAL   R9,DEBUG000\n         LOAD  EPLOC=COMM_OPCODE_TABLE_NAME   LOAD OPCODE TABLE\n         ST    R0,COMM_OPCODE_TABLE_ADDR      SAVE ADDRESS\n         ITRACE ID=OP_TABLE,                                           +\n               RDATA1=R0\n* ------------------------------------------------------------------- *\n*         Start BINDER dialog, include LMOD                           *\n* ------------------------------------------------------------------- *\n         ITRACE ID=STARTD\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT\n         MVC   COMM_DEBUG_IO+1(MSG04_L),MSG04\n         BAL   R9,DEBUG000\n         MVI   COMM_BIND_FUNC,$BIND_STARTD    BINDER FUNCTION\n         L     R15,V_DISBIND                  DISBIND ENTRY POINT\n         BALR  R14,R15                        LINK TO MODULE READER\n         ITRACE ID=STARTDRC,                                           +\n               RDATA1=R15\n         MVC   COMM_DEBUG_IO+1(MSG05_L),MSG05\n         BAL   R9,DEBUG000\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR?\n         BO    ERR0060                        YES\n         OI    DXD_FLAGS,$DIALOG_ACTIVE       SET FLAG\n* ------------------------------------------------------------------- *\n*         Build SECTION names chain                                   *\n* ------------------------------------------------------------------- *\n         ITRACE ID=NAMES\n         MVC   COMM_DEBUG_IO+1(MSG06_L),MSG06\n         BAL   R9,DEBUG000\n         MVI   COMM_BIND_FUNC,$BIND_NAMES     BINDER FUNCTION\n         L     R15,V_DISBIND                  DISBIND ENTRY POINT\n         BALR  R14,R15                        LINK TO MODULE READER\n         ITRACE ID=NAMES_RC,                                           +\n               RDATA1=R15\n         MVC   COMM_DEBUG_IO+1(MSG07_L),MSG07\n         BAL   R9,DEBUG000\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR?\n         BO    ERR0060                        YES\n* ------------------------------------------------------------------- *\n*        List the SECTION names                                       *\n* ------------------------------------------------------------------- *\nMAIN0090 DS    0H\n         ITRACE ID=NLIST\n         MVC   COMM_DEBUG_IO+1(MSG08_L),MSG08\n         BAL   R9,DEBUG000\n         L     R15,V_DISNLIST\n         BALR  R14,R15                        LIST SECTION NAMES\n         ITRACE ID=NLIST_RC,                                           +\n               RDATA1=R15\n         MVC   COMM_DEBUG_IO+1(MSG09_L),MSG09\n         BAL   R9,DEBUG000\n* ------------------------------------------------------------------- *\n*         Get ESD and RLD info                                        *\n* ------------------------------------------------------------------- *\nMAIN0110 DS    0H\n         ITRACE ID=ESD_RLD\n         MVC   COMM_DEBUG_IO+1(MSG12_L),MSG12\n         BAL   R9,DEBUG000\n         MVI   COMM_BIND_FUNC,$BIND_ESD_RLD   BINDER FUNCTION\n         L     R15,V_DISBIND                  DISBIND ENTRY POINT\n         BALR  R14,R15                        LINK TO MODULE READER\n         ITRACE ID=ESDRLDRC,                                           +\n               RDATA1=R15\n         MVC   COMM_DEBUG_IO+1(MSG13_L),MSG13\n         BAL   R9,DEBUG000\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR?\n         BO    ERR0060                        YES\n* ------------------------------------------------------------------- *\n*         Read TEXT                                                   *\n* ------------------------------------------------------------------- *\n         MVC   COMM_DEBUG_IO+1(MSG14_L),MSG14\n         BAL   R9,DEBUG000\n         ITRACE ID=READTEXT\n         MVI   COMM_BIND_FUNC,$BIND_TEXT      BINDER FUNCTION\n         L     R15,V_DISBIND                  DISBIND ENTRY POINT\n         BALR  R14,R15                        LINK TO MODULE READER\n         ITRACE ID=TEXT_RC,                                            +\n               RDATA1=R15\n         MVC   COMM_DEBUG_IO+1(MSG15_L),MSG15\n         BAL   R9,DEBUG000\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR?\n         BO    ERR0060                        YES\n* ------------------------------------------------------------------- *\n*        DETERMINE 'TARGET' OF RLD ADCONS                             *\n* ------------------------------------------------------------------- *\n         ICM   R2,15,COMM_RLD_AREA_NEXT       FIRST RLD AREA\n         BZ    MAIN0150                       NO RLD ITEMS\n         USING AREA_DSECT,R2\nMAIN0120 DS    0H\n         ITRACE ID=TARGET,                                             +\n               RDATA1=R2,                                              +\n               DATA2=0(R2)\n         CLI   AREA_DATA_TYPE,$AREA_DATA      DATA AREA?\n         BNE   MAIN0140                       NO\n         CLI   AREA_DATA_TYPE,$DATA_ACON      ADCON?\n         BE    MAIN0130                       YES\n         CLI   AREA_DATA_TYPE,$DATA_CXD       CXD?\n         BNE   MAIN0140                       NO\nMAIN0130 DS    0H\n         ICM   R1,15,AREA_BEGIN               RLD ITEM'S DISP\n         LR    R0,R1                          COPY DISP\n         A     R1,COMM_CSECT_TEXT             PLUS BASE\n         LH    R14,AREA_LENGTH                RLD ITEM'S LENGTH\n         BCTR  R14,0                          RELATIVE TO ZERO\n         AR    R0,R14                         PLUS LENGTH\n         STCM  R0,15,AREA_END\n         LA    R15,AREA_REF_DISP1+3           END OF OUTPUT FIELD\n         SR    R15,R14                        MINUS LENGTH\n         EX    R14,REF_MVC                    COPY TEXT\nMAIN0140 DS    0H\n         ICM   R2,15,AREA_NEXT\n         BNZ   MAIN0120\n         B     MAIN0150\nREF_MVC  MVC   0(0,R15),0(R1)                 COPY TARGET DISP\n* ------------------------------------------------------------------- *\n*        List ESD info                                                *\n* ------------------------------------------------------------------- *\nMAIN0150 DS    0H\n         ITRACE ID=LIST_ESD\n         MVC   COMM_DEBUG_IO+1(MSG16_L),MSG16\n         BAL   R9,DEBUG000\n         L     R15,V_DISELIST                 LIST ESD ITEMS\n         BALR  R14,R15\n         MVC   COMM_DEBUG_IO+1(MSG17_L),MSG17\n         BAL   R9,DEBUG000\n* ------------------------------------------------------------------- *\n*        List RLD info                                                *\n* ------------------------------------------------------------------- *\n         ITRACE ID=LIST_RLD\n         MVC   COMM_DEBUG_IO+1(MSG18_L),MSG18\n         BAL   R9,DEBUG000\n         L     R15,V_DISRLIST                 LIST RLD ITEMS\n         BALR  R14,R15\n         MVC   COMM_DEBUG_IO+1(MSG19_L),MSG19\n         BAL   R9,DEBUG000\n* ------------------------------------------------------------------- *\n*        Print the TEXT                                               *\n* ------------------------------------------------------------------- *\n         MVC   COMM_DEBUG_IO+1(MSG20_L),MSG20\n         BAL   R9,DEBUG000\n         ITRACE ID=LISTTEXT\n         L     R15,V_DISTLSTB\n         BALR  R14,R15                        LIST TEXT\n         MVC   COMM_DEBUG_IO+1(MSG21_L),MSG21\n         BAL   R9,DEBUG000\n* ------------------------------------------------------------------- *\n*        Assemble/process ASM START/ASM END                           *\n* ------------------------------------------------------------------- *\n         TM    COMM_FLAGS,$COMM_ASSEM         ASM,START FOUND?\n         BNO   MAIN0200                       NO\n         MVC   COMM_DEBUG_IO+1(MSG24_L),MSG24\n         BAL   R9,DEBUG000\n         ITRACE ID=ASSEMBLE\n         L     R15,V_DISASSEM\n         BALR  R14,R15                        ASSEMBLE/PROCESS MACROS\n         MVC   COMM_DEBUG_IO+1(MSG25_L),MSG25\n         BAL   R9,DEBUG000\n         MVC   COMM_DEBUG_IO+1(MSG80_L),MSG80\n         BAL   R9,DEBUG000                    PRINT\n         MVI   COMM_DEBUG_CMD,$DEBUG_INFO     SET COMMAND TO 'DEBUG'\n         BAL   R9,DEBUG000\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT    SET COMMAND TO 'PRINT'\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   ABORT ON?\n         BO    ERR0070                        YES.. EXIT\n* ------------------------------------------------------------------- *\n*        Chain USINGs to DSECTs                                       *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         ITRACE ID=DSECT\n         MVC   COMM_DEBUG_IO+1(MSG26_L),MSG26\n         BAL   R9,DEBUG000\n         L     R15,V_DISDSECT                 DISDSECT ENTRY POINT\n         BALR  R14,R15                        CHAIN USING'S TO DSECT'S\n         MVC   COMM_DEBUG_IO+1(MSG27_L),MSG27\n         BAL   R9,DEBUG000\n         MVC   COMM_DEBUG_IO+1(MSG80_L),MSG80\n         BAL   R9,DEBUG000                    PRINT\n         MVI   COMM_DEBUG_CMD,$DEBUG_INFO     REQUEST DEBUG\n         BAL   R9,DEBUG000\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT    CHANGE COMMAND TO PRINT\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   ABORT ON?\n         BO    MAIN0230                       YES.. EXIT\n* ------------------------------------------------------------------- *\n*        Merge RLD areas with user specified areas                    *\n* ------------------------------------------------------------------- *\n         ITRACE ID=SCAN\n         MVC   COMM_DEBUG_IO+1(MSG28_L),MSG28\n         BAL   R9,DEBUG000\n         L     R15,V_DISDMERG                 DISDMERG ENTRY POINT\n         BALR  R14,R15                        CALL DISDMERG\n         MVC   COMM_DEBUG_IO+1(MSG29_L),MSG29\n         BAL   R9,DEBUG000\n         MVC   COMM_DEBUG_IO+1(MSG80_L),MSG80\n         BAL   R9,DEBUG000                    PRINT\n         MVI   COMM_DEBUG_CMD,$DEBUG_INFO     SET COMMAND TO 'DEBUG'\n         BAL   R9,DEBUG000\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT    SET COMMAND TO 'PRINT'\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   ABORT ON?\n         BO    EXIT0000                       YES.. EXIT\n* ------------------------------------------------------------------- *\n*        Scan text to determine where instructions and data occur     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=SCAN\n         MVC   COMM_DEBUG_IO+1(MSG30_L),MSG30\n         BAL   R9,DEBUG000\n         L     R15,V_DISSCAN                  DISSCAN ENTRY POINT\n         BALR  R14,R15                        CALL DISSCAN\n         MVC   COMM_DEBUG_IO+1(MSG31_L),MSG31\n         BAL   R9,DEBUG000\n         MVC   COMM_DEBUG_IO+1(MSG80_L),MSG80\n         BAL   R9,DEBUG000                    PRINT\n         MVI   COMM_DEBUG_CMD,$DEBUG_INFO     SET COMMAND TO 'DEBUG'\n         BAL   R9,DEBUG000\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT    SET COMMAND TO 'PRINT'\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   ABORT ON?\n         BO    EXIT0000                       YES.. EXIT\n* ------------------------------------------------------------------- *\n*         Verify BASE and USING info                                  *\n* ------------------------------------------------------------------- *\n         ITRACE ID=VBU\n         MVC   COMM_DEBUG_IO+1(MSG32_L),MSG32\n         BAL   R9,DEBUG000\n         L     R15,V_DISVBU                   DISVBU ENTRY POINT\n         BALR  R14,R15                        DISVBU\n         MVC   COMM_DEBUG_IO+1(MSG33_L),MSG33\n         BAL   R9,DEBUG000\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT\n         BO    EXIT0000\n* ------------------------------------------------------------------- *\n*         Build REF table                                             *\n* ------------------------------------------------------------------- *\n         ITRACE ID=REF\n         MVC   COMM_DEBUG_IO+1(MSG34_L),MSG34\n         BAL   R9,DEBUG000\n         L     R15,V_DISREF                   DISREF ENTRY POINT\n         BALR  R14,R15                        DISREF\n         MVC   COMM_DEBUG_IO+1(MSG35_L),MSG35\n         BAL   R9,DEBUG000\n         MVC   COMM_DEBUG_IO+1(MSG80_L),MSG80\n         BAL   R9,DEBUG000                    PRINT\n         MVI   COMM_DEBUG_CMD,$DEBUG_INFO     SET COMMAND TO 'DEBUG'\n         BAL   R9,DEBUG000\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT    SET COMMAND TO 'PRINT'\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT\n         BO    EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0210 DS    0H\n         MVI   COMM_MSG_ID,1                  SET MESSAE ID\n         BAL   R9,MSG0000                     ISSUE MESSAGE\n* ------------------------------------------------------------------- *\n*         Generate source code                                        *\n* ------------------------------------------------------------------- *\nMAIN0220 DS    0H\n         ITRACE ID=GEN\n         MVC   COMM_DEBUG_IO+1(MSG36_L),MSG36\n         BAL   R9,DEBUG000\n         L     R15,V_DISGEN                   DISGEN ENTRY POINT\n         BALR  R14,R15                        DISGEN\n         MVC   COMM_DEBUG_IO+1(MSG37_L),MSG37\n         BAL   R9,DEBUG000\n         MVI   COMM_MSG_ID,3                  SET MESSAGE ID\n         BAL   R9,MSG0000                     PRINT MESSAGE\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0230 DS    0H\n         MVI   COMM_RC,12                     SET RC\n         MVI   COMM_MSG_ID,12                 SET MSG NBR\n         BAL   R9,MSG0000                     ISSUE MSG\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*        RESET                                                        *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         TM    DXD_FLAGS,$DIALOG_ACTIVE       DIALOG ACTIVE?\n         BNO   MAIN0310                       NO\n         ITRACE ID=ENDD\n         MVI   COMM_BIND_FUNC,$BIND_ENDD      BINDER FUNCTION\n         L     R15,V_DISBIND                  DISBIND ENTRY POINT\n         BALR  R14,R15                        LINK TO MODULE READER\n         NI    DXD_FLAGS,255-$DIALOG_ACTIVE   RESET FLAG\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR?\n         BO    ERR0060                        YES\nMAIN0310 DS    0H\n         L     R1,COMM_ESD_NEXT               FIRST ESD ENTRY\n         ITRACE ID=FREE_ESD,                                           +\n               RDATA1=R1\n         USING ESD_DSECT,R1                   DEFINE BASE\n         LTR   R1,R1                          ANY ESD ENTRIES?\n         BZ    MAIN0330                       NO\nMAIN0320 DS    0H\n         L     R2,ESD_NEXT                    NEXT ENTRY\n         ITRACE ID=ESD,                       FREEING ESD BLOCK        +\n               RDATA1=R1                      .. BLOCK'S ADDRESS\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=ESD_DSECT_L\n         LTR   R1,R2                          COPY NEXT BLOCK'S ADDRESS\n         BNZ   MAIN0320                       LOOP\nMAIN0330 DS    0H\n         XC    COMM_ESD_PREV,COMM_ESD_PREV\n         XC    COMM_ESD_NEXT,COMM_ESD_NEXT\n         XC    COMM_ESD_NBR,COMM_ESD_NBR\n* ------------------------------------------------------------------- *\n*        Free TEXT storage                                            *\n* ------------------------------------------------------------------- *\n         ICM   R1,15,COMM_CSECT_TEXT          TEXT'S STORAGE ADRESS\n         BZ    MAIN0340                       NOT ACQUIRED\n         L     R2,COMM_CSECT_LENGTH           STORAGE SIZE\n         ITRACE ID=FREETEXT,                  FREEING TEXT'S STORAGE   +\n               RDATA1=R1,                     .. TEXT'S ADDRESS        +\n               RDATA2=R2                      .. TEXT'S LENGTH\n         LTR   R1,R1                          TEXT ACQUIRED?\n         BZ    MAIN0340                       NO\n         FREEMAIN RU,                         FREE TEXT'S STORAGE      +\n               A=(1),                                                  +\n               LV=(R2)\n         XC    COMM_CSECT_TEXT,COMM_CSECT_TEXT\n* ------------------------------------------------------------------- *\n*        Free USING chain                                             *\n* ------------------------------------------------------------------- *\nMAIN0340 DS    0H\n         L     R1,COMM_USING_NEXT             FIRST USING BLOCK\n         ITRACE ID=FREEUSNG,                  FREEING USING BLOCK      +\n               RDATA1=R1                      .. BLOCK'S ADDRESS\n         LTR   R1,R1                          ANY USING BLOCKS?\n         BZ    MAIN0360                       NO\n         USING USING_DSECT,R1                 DEFINE BASE\nMAIN0350 DS    0H\n         L     R2,USING_NEXT                  NEXT BLOCK ON CHAIN\n         ITRACE ID=USING,                     FREEING USING BLOCK      +\n               RDATA1=R1                      .. BLOCK'S ADDRESS\n         FREEMAIN RU,                         FREE THE BLOCK           +\n               A=(1),                                                  +\n               LV=USING_DSECT_L\n         LTR   R1,R2                          COPY ADDRESS\n         BNZ   MAIN0350                       FREE ALL BLOCKS\n         XC    COMM_USING_PREV,COMM_USING_PREV\n         XC    COMM_USING_NEXT,COMM_USING_NEXT\n* ------------------------------------------------------------------- *\n*        Free BASE chain                                              *\n* ------------------------------------------------------------------- *\nMAIN0360 DS    0H\n         L     R1,COMM_BASE_NEXT              FIRST BASE BLOCK\n         ITRACE ID=FREEBASE,                  FREEING BASE BLOCK       +\n               RDATA1=R1                      .. BLOCK'S ADDRESS\n         USING BASE_DSECT,R1                  DEFINE BASE\n         LTR   R1,R1                          ANY BASE BLOCKS TO FREE?\n         BZ    MAIN0400                       NO\nMAIN0380 DS    0H\n         L     R2,BASE_NEXT                   NEXT BLOCK'S ADDRESS\n         ITRACE ID=BASE,                      FREEING BASE BLOCK       +\n               RDATA1=R1                      .. BLOCK'S ADDRESS\n         FREEMAIN RU,                         FREE BASE BLOCK STORAGE  +\n               A=(1),                                                  +\n               LV=BASE_DSECT_L\n         LTR   R1,R2                          COPY NEXT BLOCK'S ADDRESS\n         BNZ   MAIN0380                       LOOP\n         XC    COMM_BASE_PREV,COMM_BASE_PREV\n         XC    COMM_BASE_NEXT,COMM_BASE_NEXT\n* ------------------------------------------------------------------- *\n*        Free RLD ITEM CHAIN                                          *\n* ------------------------------------------------------------------- *\nMAIN0400 DS    0H\n         ICM   R3,15,COMM_RLD_AREA_NEXT       FIRST AREA\n         BZ    MAIN0410                       NO RLD ITEMS\n         ITRACE ID=FREE_RLD,                                           +\n               RDATA1=R3\n         BAL   R9,MAIN0430\n         XC    COMM_RLD_AREA_PREV,COMM_RLD_AREA_PREV\n         XC    COMM_RLD_AREA_NEXT,COMM_RLD_AREA_NEXT\n* ------------------------------------------------------------------- *\n*        FREE USER AREA CHAIN                                         *\n* ------------------------------------------------------------------- *\nMAIN0410 DS    0H\n         ICM   R3,15,COMM_USER_AREA_NEXT_1    FIRST USER AREA\n         BZ    MAIN0420                       NO USER AREAS\n         ITRACE ID=FREEUSER,                                           +\n               RDATA1=R3\n         BAL   R9,MAIN0430\n         XC    COMM_USER_AREA_PREV_1,COMM_USER_AREA_PREV_1\n         XC    COMM_USER_AREA_NEXT_1,COMM_USER_AREA_NEXT_1\n* ------------------------------------------------------------------- *\n*        FREE 'ALL' AREA CHAIN                                        *\n* ------------------------------------------------------------------- *\nMAIN0420 DS    0H\n         ICM   R3,15,COMM_ALL_AREA_NEXT       FIRST 'ALL' AREA\n         BZ    MAIN0450                       NO 'ALL' AREAS\n         ITRACE ID=FREE_ALL,                                           +\n               RDATA1=R3\n         BAL   R9,MAIN0430\n         XC    COMM_ALL_AREA_PREV,COMM_ALL_AREA_PREV\n         XC    COMM_ALL_AREA_NEXT,COMM_ALL_AREA_NEXT\n         B     MAIN0450\n* ------------------------------------------------------------------- *\n*        FREE an AREA chain                                           *\n* ------------------------------------------------------------------- *\nMAIN0430 DS    0H\n         USING AREA_DSECT,R3                  DEFINE BASE\n         ICM   R1,15,AREA_LABEL               LABEL PRESENT?\n         BZ    MAIN0440                       NO\n         ITRACE ID=FREELABL,                                           +\n               RDATA1=R1\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=LABEL_DSECT_L\nMAIN0440 DS    0H\n         ITRACE ID=AREA,                      FREEING DATA BLOCK       +\n               RDATA1=R1,                     .. BLOCK'S ADDRESS       +\n               DATA2=AREA_LABEL               .. LABEL'S ADDRESS\n         LR    R1,R3                          COPY AREA BLOCK ADDRESS\n         L     R3,AREA_NEXT                   NEXT BLOCK'S ADDRESS\n         FREEMAIN RU,                         FREE AREA BLOCK STORAGE  +\n               A=(1),                                                  +\n               LV=AREA_DSECT_L\n         LTR   R3,R3                          COPY NEXT BLOCK'S ADDRESS\n         BNZ   MAIN0430                       LOOP\n         BR    R9\n* ------------------------------------------------------------------- *\n*        Free DSECT (and their LABELs)                                *\n* ------------------------------------------------------------------- *\nMAIN0450 DS    0H\n         L     R3,COMM_DSECT_NEXT             FIRST DSECT BLOCK\n         ITRACE ID=FREEDSCT,                                           +\n               RDATA1=R3\n         LTR   R3,R3\n         BZ    MAIN0510                       NO DSECT BLOCK'S TO FREE\n         USING DSECT_DSECT,R3                 DEFINE BASE\nMAIN0460 DS    0H\n         ICM   R4,15,DSECT_LABEL_NEXT         FIRST LABEL IN THIS DSECT\n         USING LABEL_DSECT,R4                 DEFINE BASE\n         BZ    MAIN0500                       NO LABEL BLOCKS TO FREE\nMAIN0470 DS    0H\n         ICM   R1,15,LABEL_EQU_NEXT           FIRST EQUATE BLOCK\n         BZ    MAIN0490                       NO EQUATE BLOCKS\n         USING EQU_DSECT,R1                   DEFINE BASE\nMAIN0480 DS    0H\n         L     R2,EQU_NEXT                    NEXT EQUATE BLOCK'S ADDR\n         ITRACE ID=FREEEQU,                   FREEING AN EQU BLOCK     +\n               DATA1=EQU_LABEL,               .. EQUATE NAME           +\n               RDATA2=R1                      .. EQU BLOCK ADDRESS\n         FREEMAIN RU,                         FREE EQUATE BLOCK        +\n               A=(1),                                                  +\n               LV=EQU_DSECT_L\n         LTR   R1,R2                          COPY NEXT BLOCK'S ADDRESS\n         BNZ   MAIN0480                       LOOP\nMAIN0490 DS    0H\n         L     R2,LABEL_NEXT                  NEXT LABEL BLOCK'S ADDR\n         ITRACE ID=FREELABL,                  FREEING A LABEL BLOCK    +\n               DATA1=LABEL_NAME,              .. LABEL NAME            +\n               RDATA2=R4                      .. BLOCK'S ADDRESS\n         FREEMAIN RU,                         FREE LABEL BLOCK STORAGE +\n               A=(R4),                                                 +\n               LV=LABEL_DSECT_L\n         LTR   R4,R2                          COPY NEXT BLOCK'S ADDRESS\n         BNZ   MAIN0470                       LOOP\nMAIN0500 DS    0H\n         L     R2,DSECT_NEXT                  NEXT BLOCK'S ADDRESS\n         ITRACE ID=FREEDSCT,                  FREEING DSECT BLOCK      +\n               DATA1=DSECT_NAME,              .. DSECT NAME            +\n               RDATA2=R3                      .. BLOCK'S ADDRESS\n         FREEMAIN RU,                         FREE DSECT BLOCK STORAGE +\n               A=(R3),                                                 +\n               LV=DSECT_DSECT_L\n         LTR   R3,R2                          COPY NEXT BLOCK'S ADDRESS\n         BNZ   MAIN0460                       LOOP\nMAIN0510 DS    0H\n         XC    COMM_DSECT_PREV,COMM_DSECT_PREV\n         XC    COMM_DSECT_NEXT,COMM_DSECT_NEXT\n         OC    COMM_OPCODE_TABLE_ADDR,COMM_OPCODE_TABLE_ADDR\n         BZR   R8                             NOT LOADED\n         ITRACE ID=DEL_OP,                                             +\n               DATA1=COMM_OPCODE_TABLE_NAME\n         DELETE EPLOC=COMM_OPCODE_TABLE_NAME  DELETE OPCODE TABLE\n         XC    COMM_OPCODE_TABLE_ADDR,COMM_OPCODE_TABLE_ADDR\n         BR    R8\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0000  DS    0H\n         MVC   COMM_MSG_CSECT,MODID           SET CSECT NAME\n         L     R15,V_DISMSG                   DISMSG ENTRY POINT\n         BALR  R14,R15                        BUILD MESSAGE(S)\n         LA    R2,COMM_MSG_1                  1ST MESSAGE\n         LA    R3,5                           MAX MSGS\nMSG0010  DS    0H\n         CLC   0(L'COMM_MSG_1,R2),COMM_BLANKS BLANK?\n         BER   R9                             YES\n         MVC   PRINT_DATA(L'COMM_MSG_1),0(R2) COPY MESSAGE\n         BAL   R8,PRT0000                     PRINT MESSAGE\n         LA    R2,L'COMM_MSG_1(,R2)           NEXT MESSAGE\n         BCT   R3,MSG0010\n         BR    R9\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         MVI   PRINT_COMMAND,$PRINT_PRINT     SET COMMAND\n         L     R15,V_DISPRINT                 PRINT MODULE ENTRY POINT\n         BALR  R14,R15                        LINK TO PRINT MODULE\n         BR    R8                             RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDEBUG000 DS    0H\n         L     R15,V_DISDEBUG\n         BALR  R14,R15\n         BR    R9\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         GETMAIN RU,                                                   +\n               LV=WTO01_L,                                             +\n               LOC=BELOW\n         LR    R2,R1\n         MVC   0(WTO01_L,R2),WTO01            COPY WTO\n         WTO   MF=(E,(R2))                    ISSUE WTO\n         FREEMAIN RU,                                                  +\n               A=(R2),                                                 +\n               LV=WTO01_L\n         MVI   COMM_RC,12\n         B     EXIT0000\nERR0020  DS    0H\n         MVI   COMM_MSG_ID,4                  DISIN DD NOT PRESENT\n         BAL   R9,MSG0000                     ISSUE MESSAGE\n         MVI   COMM_RC,8\n         B     EXIT0000\nERR0030  DS    0H\n         MVI   COMM_MSG_ID,5                  DISMOD DD NOT PRESENT\n         BAL   R9,MSG0000                     ISSUE MESSAGE\n         MVI   COMM_RC,8\n         B     EXIT0000\nERR0040  DS    0H\n         ITRACE ID=KSDS_ERR\n         MVI   COMM_MSG_ID,13                 DISMOD DD NOT PRESENT\n         STC   R15,COMM_INFO_01               SAVE RC\n         MVC   COMM_INFO_02(L'KSDS_DDNAME),KSDS_DDNAME\n         MVC   COMM_INFO_03(L'KSDS_DSNAME),KSDS_DSNAME\n         BAL   R9,MSG0000                     ISSUE MESSAGE\n         MVI   COMM_RC,8\n         B     EXIT0000\nERR0050  DS    0H\n         ITRACE ID=PARM_ERR\n         MVI   COMM_MSG_ID,6                  ERROR(S) IN PARMS\n         BAL   R9,MSG0000                     ISSUE MESSAGE\n         MVI   COMM_RC,8\n         B     EXIT0000\nERR0060  DS    0H\n         ITRACE ID=BIND_ERR\n         MVI   COMM_MSG_ID,7                  ERROR(S) FROM BINDER\n         BAL   R9,MSG0000                     ISSUE MESSAGE\n         MVI   COMM_RC,8\n         B     EXIT0000\nERR0070  DS    0H\n         ITRACE ID=BIND_ERR\n         MVI   COMM_MSG_ID,9                  ERROR(S) FROM BINDER\n         BAL   R9,MSG0000                     ISSUE MESSAGE\n         MVI   COMM_RC,8\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT0000\n         BAL   R8,MAIN0300                    DO CLEAN-UP\n         ICM   R7,15,COMM_KSDS_NEXT           ANY DSECT KSDS?\n         BZ    EXIT0040                       NO\nEXIT0010 DS    0H\n         TM    KSDS_FLAGS,$KSDS_OPEN\n         BNO   EXIT0020                       NOT OPEN\n         LA    R2,KSDS_ACB                    ACB'S ADDRESS\n         ITRACE ID=CLSEKSDS,                                           +\n               DATA1=KSDS_DDNAME,                                      +\n               RDATA2=R2\n         CLOSE ((R2)),                                                 +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\n         NI    KSDS_FLAGS,255-$KSDS_OPEN\nEXIT0020 DS    0H\n         ITRACE ID=NEXTKSDS,                                           +\n               RDATA1=R7,                                              +\n               DATA2=KSDS_NEXT\n         ICM   R7,15,KSDS_NEXT\n         BNZ   EXIT0010\nEXIT0030 DS    0H\n         TM    COMM_DDS,$DISPRINT_DD          DISPRINT DD PRESENT?\n         BNO   EXIT0040                       NO\n         ITRACE ID=CLSEPRNT\n         CLOSE DISPRINT_DCB,                  CLOSE DISPRINT           +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\nEXIT0040 DS    0H\n         TM    COMM_DDS,$DISDEBUG_DD          DISDEBUG PRESENT?\n         BNO   EXIT0050\n         ITRACE ID=CLSEDBUG\n         CLOSE DISDEBUG_DCB,                  CLOSE DISDEBUG           +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\nEXIT0050 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS         ASE01680\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN TO CALLER          ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START      DC    Q(DXDBMAIN)\nDISMOD         DC    CL8'DISMOD'\nDISOP          DC    CL8'DISOP'\nXFFFF          DC    X'FFFFFFFF'\n\nWTO01          WTO   'DISPRINT DD is required',                        +\n               MF=L\nWTO01_L        EQU   *-WTO01\n\nMSG01          DS    0C\n               DC    C'DISBMAIN01I   Calling DISPARM'\nMSG01_L        EQU   *-MSG01\n\nMSG02          DS    0C\n               DC    C'DISBMAIN02I   Returned from DISPARM'\nMSG02_L        EQU   *-MSG02\n\nMSG03          DS    0C\n               DC    C'DISBMAIN03I   Opcode table in use is '\nMSG03_OPCODE   DC    CL8' '\nMSG03_L        EQU   *-MSG03\n\nMSG04          DS    0C\n               DC    C'DISBMAIN04I   Starting BINDER dialog '\nMSG04_L        EQU   *-MSG04\n\nMSG05          DS    0C\n               DC    C'DISBMAIN03I   Returned from start dialog'\nMSG05_L        EQU   *-MSG05\n\nMSG06          DS    0C\n               DC    C'DISBMAIN04I   Calling BINDER for section names'\nMSG06_L        EQU   *-MSG06\n\nMSG07          DS    0C\n               DC    C'DISBMAIN05I   Returned from GETNAMES'\nMSG07_L        EQU   *-MSG07\n\nMSG08          DS    0C\n               DC    C'DISBMAIN08I   Calling DISBIND to list sections'\nMSG08_L        EQU   *-MSG08\n\nMSG09          DS    0C\n               DC    C'DISBMAIN09I   Returned from listing names'\nMSG09_L        EQU   *-MSG09\n\nMSG12          DS    0C\n               DC    C'DISBMAIN12I   Calling DISBIND to obtain RLD info+\n               '\nMSG12_L        EQU   *-MSG12\n\nMSG13          DS    0C\n               DC    C'DISBMAIN13I   Returned from DISBIND with RLD inf+\n               o'\nMSG13_L        EQU   *-MSG13\n\nMSG14          DS    0C\n               DC    C'DISBMAIN14I   Calling DISBIND to read text'\nMSG14_L        EQU   *-MSG14\n\nMSG15          DS    0C\n               DC    C'DISBMAIN15I   Returned from DISBIND with text'\nMSG15_L        EQU   *-MSG15\n\nMSG16          DS    0C\n               DC    C'DISBMAIN16I   Calling DISELIST'\nMSG16_L        EQU   *-MSG16\n\nMSG17          DS    0C\n               DC    C'DISBMAIN17I   Returned from DISELIST'\nMSG17_L        EQU   *-MSG17\n\nMSG18          DS    0C\n               DC    C'DISBMAIN18I   Calling DISRLIST'\nMSG18_L        EQU   *-MSG18\n\nMSG19          DS    0C\n               DC    C'DISBMAIN19I   Returned from DISRLIST'\nMSG19_L        EQU   *-MSG19\n\nMSG20          DS    0C\n               DC    C'DISBMAIN20I   Calling DISTLSTB'\nMSG20_L        EQU   *-MSG20\n\nMSG21          DS    0C\n               DC    C'DISBMAIN21I   Returned from DISTLSTB'\nMSG21_L        EQU   *-MSG21\n\nMSG24          DS    0C\n               DC    C'DISBMAIN24I   Calling DISASSEM'\nMSG24_L        EQU   *-MSG24\n\nMSG25          DS    0C\n               DC    C'DISBMAIN25I   Returned from DISASSEM'\nMSG25_L        EQU   *-MSG25\n\nMSG26          DS    0C\n               DC    C'DISBMAIN26I   Calling DISDSECT'\nMSG26_L        EQU   *-MSG26\n\nMSG27          DS    0C\n               DC    C'DISBMAIN27I   Returned from DISDSECT'\nMSG27_L        EQU   *-MSG27\n\nMSG28          DS    0C\n               DC    C'DISBMAIN28I   Calling DISDMERG'\nMSG28_L        EQU   *-MSG28\n\nMSG29          DS    0C\n               DC    C'DISBMAIN29I   Returned from DISDMERG'\nMSG29_L        EQU   *-MSG29\n\nMSG30          DS    0C\n               DC    C'DISBMAIN30I   Calling DISSCAN'\nMSG30_L        EQU   *-MSG30\n\nMSG31          DS    0C\n               DC    C'DISBMAIN31I   Returned from DISSCAN'\nMSG31_L        EQU   *-MSG31\n\nMSG32          DS    0C\n               DC    C'DISBMAIN32I   Calling DISVBU'\nMSG32_L        EQU   *-MSG32\n\nMSG33          DS    0C\n               DC    C'DISBMAIN33I   Returned from DISVBU'\nMSG33_L        EQU   *-MSG33\n\nMSG34          DS    0C\n               DC    C'DISBMAIN34I   Calling DISREF'\nMSG34_L        EQU   *-MSG34\n\nMSG35          DS    0C\n               DC    C'DISBMAIN35I   Returned from DISREF'\nMSG35_L        EQU   *-MSG35\n\nMSG36          DS    0C\n               DC    C'DISBMAIN36I   Calling DISGEN'\nMSG36_L        EQU   *-MSG36\n\nMSG37          DS    0C\n               DC    C'DISBMAIN37I   Returned from DISGEN'\nMSG37_L        EQU   *-MSG37\n\nMSG80          DS    0C\n               DC    C'DISBMAIN80I   Calling DISDEBUG'\nMSG80_L        EQU   *-MSG80\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDBMAIN       DSECT\n               DS    18F             REGISTER SAVE AREA\nDXD_CSECT      DS    CL8\n\nDXD_FLAGS      DS    X\n$DIALOG_ACTIVE EQU   X'80'           .. BINDER DIALOG ACTIVE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               DISCOMM  TYPE=DSECT\n               COPY     DISASMDA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               IFGACB   AM=VSAM\nACB_L          EQU      *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY     REGEQU\n\n               END      DISBMAIN\n./ ADD NAME=DISCOMM  0104-07038-09107-1320-00029-00016-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  MODULE NAME: DISCOMM                                              *\n*                                                                    *\n*  Function:                                                         *\n*              Common data module and trace table.                   *\n*              At initialization time, the mainline module, DISASM01,*\n*              sets R11 to the address of DISASM00.  All other       *\n*              modules depend on this address remaining unchanged.   *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISCOMM  DISCOMM  TYPE=CSECT\n\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\n         COPY  DISASMDA\n\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\n         IFGACB  AM=VSAM\nACB_L    EQU     *-IFGACB\n\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\n         COPY  REGEQU\n         END   DISCOMM\n./ ADD NAME=DISCONF  0102-09119-09198-0836-01124-01073-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISCONF                                              *\n*                                                                    *\n*  Function:                                                         *\n*                                                                    *\n*   Save or restore saved config info                                *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISCONF  CSECT\nDISCONF  AMODE 31\nDISCONF  RMODE ANY\n         USING DISCONF,R11,R10\n         USING DISCOMM,R12\n         USING DCBE,CONF_DCBE\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'DISCONF'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         LA    R10,2048(,R11)\n         LA    R10,2048(,R10)\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDCONF,R13\n         USING DECB,COMM_DECB\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n         MVI   SPF_FUNCTION,C' '              RESET FUNCTION\n         GETMAIN RU,                                                   +\n               LV=$BUFF_SIZE,                                          +\n               LOC=BELOW\n         ST    R1,DXD_IO_AREA                 SAVE I/O AREA ADDR\n         ITRACE ID=IO_AREA,                                            +\n               RDATA1=R1\n         LA    R7,CONF_DCB                    DCB ADDR\n         USING IHADCB,R7\n         LA    R1,MAIN0390                    EOD POINT\n         ST    R1,DCBEEODA                    SET EOD ADDRES\nMAIN0010 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_SPF_PANEL,=CL8'DISCONF'   SET PANEL NAME\n         L     R15,V_DISDISP\n         BALR  R14,R15                        DISPLAY CONFIG\n         MVC   SPF_MSG_1,COMM_BLANKS          CLEAR MESSAGE\n         MVC   SPF_MSG_2,COMM_BLANKS          CLEAR MESSAGE\n         MVC   SPF_MSG_3,COMM_BLANKS          CLEAR MESSAGE\n         MVC   SPF_MSG_4,COMM_BLANKS          CLEAR MESSAGE\n         MVC   SPF_MSG_5,COMM_BLANKS          CLEAR MESSAGE\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15\n         LTR   R15,R15                        RC = 0?\n         BNZ   EXIT0000                       NO\n         OC    SPF_CONF_DSN,COMM_BLANKS       'TRANSLATE' NAME\n         OC    SPF_CONF_MEMBER,COMM_BLANKS\n         OC    SPF_CONF_VOLSER,COMM_BLANKS\n         CLC   SPF_CONF_DSN,COMM_BLANKS       BLANK?\n         BE    ERR0010                        YES\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         MVC   COMM_DSINFO_DSN,SPF_CONF_DSN   COPY NEW DSN\n         L     R15,V_DISDINFO\n         BALR  R14,R15                        DETERMINE DS INFO\n         LTR   R15,R15                        SUCCESSFUL?\n         BZ    MAIN0020                       YES\n         MVC   SPF_MSG_1(L'COMM_DSINFO_MSG),COMM_DSINFO_MSG\n         B     MAIN0010                       DISPLAY W/MSG\nMAIN0020 DS    0H\n         ITRACE ID=DS_TYPE,                                            +\n               DATA1=COMM_DATASET_TYPE\n         CLI   COMM_DATASET_TYPE,$DATASET_TYPE_PDS\n         BNE   ERR0020                        NOT A PDS\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         OI    SPF_FUNCTION,C' '\n         CLI   SPF_FUNCTION,C' '              BLANK?\n         BE    ERR0030                        YES\n         CLI   SPF_FUNCTION,C'R'              RESTORE SAVED INFO?\n         BE    MAIN0030                       YES\n         CLI   SPF_FUNCTION,C'S'              SAVE INFO?\n         BE    MAIN1000                       YES\n         B     ERR0040                        FIRST ON CHAIN\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Restore a config                                             *\n*                                                                     *\n*        DO NOT RESTORE                                               *\n*         Load module library                                         *\n*         LMOD                                                        *\n*         CSECT                                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0030 DS    0H\n         ITRACE ID=RESTORE\n         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC     SET DAIR FUNCTION\n         MVC   COMM_DAIR_DD,=CL8'DISCONF'     SET DD NAME\n         MVC   COMM_DAIR_DSN,SPF_CONF_DSN     SET DSN\n         MVC   COMM_DAIR_VOLSER,SPF_CONF_VOLSER  SET VOLSER\n         MVI   COMM_DAIR_OPTIONS,$DAIR_USE_DDNAME\n         L     R15,V_DISDAIR\n         BALR  R14,R15                        ALLOCATE CONFIG\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0050                        NO\n         ITRACE ID=OPEN\n         OPEN  ((R7),INPUT),                  OPEN CONFIG DATA SET     +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n         ITRACE ID=FIND,                                               +\n               DATA1=SPF_CONF_MEMBER\n         FIND  (R7),                          FIND THE MEMBER          +\n               SPF_CONF_MEMBER,                                        +\n               D\n         ITRACE ID=FIND_RC,                                            +\n               RDATA1=R15\n         LTR   R2,R15                         SUCCESSFUL?\n         BZ    MAIN0035                       YES\n         CLOSE ((R7)),                        CLOSE CONFIG DCB         +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\n         B     ERR0060                        GO BUILD MESSAGE\n*---------------------------------------------------------------------*\n*        Free user defined data area(s)                               *\n*---------------------------------------------------------------------*\nMAIN0035 DS    0H\n         ICM   R2,15,COMM_USER_AREA_NEXT_1    FIRST AREA\n         BZ    MAIN0070\n         ITRACE ID=FREEDATA\n         USING AREA_DSECT,R2\n         XC    COMM_USER_AREA_NEXT_1,COMM_USER_AREA_NEXT_1\nMAIN0040 DS    0H\n         ICM   R1,15,AREA_REF_LABEL1          LABEL ASSIGNED?\n         BZ    MAIN0050\n         ITRACE ID=FREEREF1\n         FREEMAIN RU,                         FREE LABEL BLOCK         +\n               A=(1),                                                  +\n               LV=LABEL_DSECT_L\nMAIN0050 DS    0H\n         ICM   R1,15,AREA_REF_LABEL2          LABEL ASSIGNED?\n         BZ    MAIN0060\n         ITRACE ID=FREEREF2\n         FREEMAIN RU,                         FREE LABEL BLOCK         +\n               A=(1),                                                  +\n               LV=LABEL_DSECT_L\nMAIN0060 DS    0H\n         LR    R1,R2\n         ICM   R2,15,AREA_NEXT\n         FREEMAIN RU,                         FREE AREA BLOCK          +\n               A=(R1),                                                 +\n               LV=AREA_DSECT_L\n         LTR   R2,R2                          ANOTHER AREA?\n         BNZ   MAIN0040                       YES\n         DROP  R2\n*---------------------------------------------------------------------*\n*        Free Base(s)                                                 *\n*---------------------------------------------------------------------*\nMAIN0070 DS    0H\n         ICM   R2,15,COMM_BASE_NEXT           FIRST BASE\n         BZ    MAIN0090\n         ITRACE ID=FREEBASE\n         USING BASE_DSECT,R2\n         XC    COMM_BASE_NEXT,COMM_BASE_NEXT\nMAIN0080 DS    0H\n         LR    R1,R2\n         ICM   R2,15,BASE_NEXT\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=BASE_DSECT_L\n         LTR   R2,R2\n         BNZ   MAIN0080\n         DROP  R2\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0090 DS    0H\n         ICM   R2,15,COMM_USING_NEXT          FIRST USING\n         BZ    MAIN0110\n         ITRACE ID=FREEUSNG\n         USING USING_DSECT,R2\n         XC    COMM_USING_NEXT,COMM_USING_NEXT\nMIAN0100 DS    0H\n         LR    R1,R2\n         ICM   R2,15,USING_NEXT\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=USING_DSECT_L\n         LTR   R2,R2\n         BNZ   MIAN0100\n         DROP  R2\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0110 DS    0H\n         ICM   R2,15,COMM_ASM_NEXT            FIRST ASSEMBLER SOURCE\n         BZ    MAIN0130\n         ITRACE ID=FREE_ASM\n         USING ASM_DSECT,R2\n         XC    COMM_ASM_NEXT,COMM_ASM_NEXT\nMAIN0120 DS    0H\n         LR    R1,R2\n         ICM   R2,15,ASM_NEXT\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=ASM_DSECT_L\n         LTR   R2,R2\n         BNZ   MAIN0120\n         DROP  R2\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0130 DS    0H\n         ITRACE ID=RESET\n         XC    DXD_FIRST_DATAAREA,DXD_FIRST_DATAAREA\n         XC    DXD_LAST_DATAAREA,DXD_LAST_DATAAREA\n         XC    DXD_FIRST_BASE,DXD_FIRST_BASE\n         XC    DXD_LAST_BASE,DXD_LAST_BASE\n         XC    DXD_FIRST_USING,DXD_FIRST_USING\n         XC    DXD_LAST_USING,DXD_LAST_USING\n         XC    DXD_FIRST_KSDS,DXD_FIRST_KSDS\n         XC    DXD_LAST_KSDS,DXD_LAST_KSDS\n         XC    DXD_FIRST_SYSLIB,DXD_FIRST_SYSLIB\n         XC    DXD_LAST_SYSLIB,DXD_LAST_SYSLIB\n         XC    DXD_FIRST_ASM,DXD_FIRST_ASM\n         XC    DXD_LAST_ASM,DXD_LAST_ASM\n*---------------------------------------------------------------------*\n*                                                                     *\n*        R7   DCB address                                             *\n*        R6   I/O area address                                        *\n*        R5   Data length                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0140 DS    0H\n         ITRACE ID=READ\n         XC    COMM_DECB(COMM_DECB_L),COMM_DECB  INITIALIZE DECB\n         L     R6,DXD_IO_AREA                    I/O AREA ADDRESS\n         USING CONFIG_RECORD,R6\n         READ  COMM_DECB,                        READ                  +\n               SF,                                                     +\n               (R7),                             .. DCB ADDR           +\n               (R6),                             .. I/O AREA ADDR      +\n               'S',                                                    +\n               MF=E\n         ITRACE ID=WAIT\n         CHECK COMM_DECB\n         ITRACE ID=RUNNING\n         L     R1,DECIOBPT                       IOB ADDRESS\n         USING IOBSTDRD,R1                       DEFINE IOB BASE\n         LH    R5,DCBBLKSI                       BLOCK SIZE\n         SR    R0,R0                             CLEAR R1\n         ICM   R0,3,IOBSTDRD+14                  RESIDUAL LENGTH\n         SR    R5,R0                             LENGTH READ\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Determine record type                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0150 DS    0H\n         ITRACE ID=RECORD,                                             +\n               RDATA1=R6,                                              +\n               DATA2=CONFIG_TYPE\n         CLI   CONFIG_TYPE,$CONFIG_OP_TABLE      OPCODE TABLE?\n         BE    MAIN0160                          YES\n         CLI   CONFIG_TYPE,$CONFIG_DATAAREA      DATA AREA?\n         BE    MAIN0180                          YES\n         CLI   CONFIG_TYPE,$CONFIG_BASE          BASE?\n         BE    MAIN0210                          YES\n         CLI   CONFIG_TYPE,$CONFIG_USING         USING?\n         BE    MAIN0240                          YES\n         CLI   CONFIG_TYPE,$CONFIG_DSECT_KSDS    DSECT DATA KSDS?\n         BE    MAIN0270                          YES\n         CLI   CONFIG_TYPE,$CONFIG_SYSLIB        SYSLIB?\n         BE    MAIN0300                          YES\n         CLI   CONFIG_TYPE,$CONFIG_PREFIX_LENGTH LABEL PREFIX LENGTH?\n         BE    MAIN0330                          YES\n         CLI   CONFIG_TYPE,$CONFIG_PREFIX        LABEL PREFIX?\n         BE    MAIN0340                          YES\n         CLI   CONFIG_TYPE,$CONFIG_ASM_SOURCE    ASSEMBLER SOURCE?\n         BE    MAIN0350                          YES\n         CLI   CONFIG_TYPE,$CONFIG_OUTPUT_DSN    OUTPUT DSN?\n         BE    MAIN0375                          YES\n         DC    H'0'\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0160 DS    0H\n         ITRACE ID=OP\n         OC    COMM_OPCODE_TABLE_ADDR,COMM_OPCODE_TABLE_ADDR\n         BZ    MAIN0170                          NO TABLE TO DELETE\n         DELETE EPLOC=COMM_OPCODE_TABLE_NAME     DELETE CURRENT TABLE\nMAIN0170 DS    0H\n         MVC   COMM_OPCODE_TABLE_NAME,CONFIG_DATA\n         LOAD  EPLOC=COMM_OPCODE_TABLE_NAME      LOAD NEW TABLE\n         ST    R0,COMM_OPCODE_TABLE_ADDR\n         B     MAIN0380\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0180 DS    0H\n         ITRACE ID=DATAAREA\n         CLC   COMM_CSECT_LENGTH,CONFIG_DATA+(AREA_BEGIN-AREA_EYE)\n         BL    MAIN0205\n         GETMAIN RU,                                                   +\n               LV=AREA_DSECT_L,                                        +\n               LOC=ANY\nNEW      USING AREA_DSECT,R1\n         ICM   R4,15,DXD_LAST_DATAAREA           LAST DATA AREA\n         BZ    MAIN0190\nPREV     USING AREA_DSECT,R4\n         ST    R1,PREV.AREA_NEXT                 SET NEXT\nMAIN0190 DS    0H\n         ST    R4,NEW.AREA_PREV                  SET PREV\n         XC    NEW.AREA_NEXT,NEW.AREA_NEXT\n         MVC   NEW.AREA_EYE(AREA_DSECT_L-(AREA_EYE-AREA_DSECT)),CONFIG_+\n               DATA\n         XC    NEW.AREA_OPCODE,NEW.AREA_OPCODE\n         XC    NEW.AREA_REF_LABEL1,NEW.AREA_REF_LABEL1\n         XC    NEW.AREA_REF_DISP1,NEW.AREA_REF_DISP1\n         XC    NEW.AREA_REF_LABEL2,NEW.AREA_REF_LABEL2\n         XC    NEW.AREA_REF_DISP2,NEW.AREA_REF_DISP2\n         OC    DXD_FIRST_DATAAREA,DXD_FIRST_DATAAREA\n         BNZ   MAIN0200\n         ST    R1,DXD_FIRST_DATAAREA\nMAIN0200 DS    0H\n         ST    R1,DXD_LAST_DATAAREA              SAVE ADDRESS\n         CLC   NEW.AREA_END,COMM_CSECT_LENGTH    BEYOND END OF CSECT?\n         BNH   MAIN0380                          NO\n         MVC   NEW.AREA_END,COMM_CSECT_LENGTH    LIMIT TO CSECT LENGTH\n         MVC   COMM_MSG_1(MSG06_L),MSG06\n         UNPK  COMM_INFO_01(9),CONFIG_DATA+(AREA_BEGIN-AREA_EYE)(5)\n         TR    COMM_INFO_01(8),HEXCHAR\n         MVC   COMM_MSG_1+(MSG06_B-MSG06)(8),COMM_INFO_01\n         UNPK  COMM_INFO_01(9),CONFIG_DATA+(AREA_END-AREA_EYE)(5)\n         TR    COMM_INFO_01(8),HEXCHAR\n         MVC   COMM_MSG_1+(MSG06_E-MSG06)(8),COMM_INFO_01\n         B     MAIN0380\nMAIN0205 DS    0H\n         MVC   COMM_MSG_1(MSG07_L),MSG07\n         UNPK  COMM_INFO_01(9),CONFIG_DATA+(AREA_BEGIN-AREA_EYE)(5)\n         TR    COMM_INFO_01(8),HEXCHAR\n         MVC   COMM_MSG_1+(MSG07_B-MSG07)(8),COMM_INFO_01\n         UNPK  COMM_INFO_01(9),CONFIG_DATA+(AREA_END-AREA_EYE)(5)\n         TR    COMM_INFO_01(8),HEXCHAR\n         MVC   COMM_MSG_1+(MSG07_E-MSG07)(8),COMM_INFO_01\n         BAL   R8,TPUT0000\n         B     MAIN0380\n         DROP  PREV,NEW\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0210 DS    0H\n         ITRACE ID=BASE\n         GETMAIN RU,                                                   +\n               LV=BASE_DSECT_L,                                        +\n               LOC=ANY\nNEW      USING BASE_DSECT,R1\n         ICM   R4,15,DXD_LAST_BASE               LAST BASE AREA\n         BZ    MAIN0220\nPREV     USING BASE_DSECT,R4\n         ST    R1,PREV.BASE_NEXT                 SET NEXT\nMAIN0220 DS    0H\n         ST    R4,NEW.BASE_PREV                  SET PREV\n         XC    NEW.BASE_NEXT,NEW.BASE_NEXT\n         MVC   NEW.BASE_EYE(BASE_DSECT_L-(BASE_EYE-BASE_DSECT)),CONFIG_+\n               DATA\n         MVI   NEW.BASE_FLAGS,0                  RESET FLAGS\n         OC    DXD_FIRST_BASE,DXD_FIRST_BASE     ANY ON CHAIN NOW?\n         BNZ   MAIN0230                          YES\n         ST    R1,DXD_FIRST_BASE                 SET FIRST ON CHAIN\nMAIN0230 DS    0H\n         ST    R1,DXD_LAST_BASE                  SAVE LAST ON NEW CHAIN\n         B     MAIN0380\n         DROP  PREV,NEW\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0240 DS    0H\n         ITRACE ID=USING\n         GETMAIN RU,                                                   +\n               LV=USING_DSECT_L,                                       +\n               LOC=ANY\nNEW      USING USING_DSECT,R1\n         ICM   R4,15,DXD_LAST_USING              LAST USING AREA\n         BZ    MAIN0250\nPREV     USING USING_DSECT,R4\n         ST    R1,PREV.USING_NEXT                SET NEXT\nMAIN0250 DS    0H\n         ST    R4,NEW.USING_PREV                 SET PREV\n         XC    NEW.USING_NEXT,NEW.USING_NEXT\n         MVC   NEW.USING_EYE(USING_DSECT_L-(USING_EYE-USING_DSECT)),CON+TA\n               FIG_DATA\n         MVI   NEW.USING_FLAG,0                  RESET FLAGS\n         XC    NEW.USING_DSECT_ADDR,NEW.USING_DSECT_ADDR\n         XC    NEW.USING_DSECT_LABEL,NEW.USING_DSECT_LABEL\n         OC    DXD_FIRST_USING,DXD_FIRST_USING   SOMETHING ON CHAIN?\n         BNZ   MAIN0260                          YES\n         ST    R1,DXD_FIRST_USING                SET FIRST ON CHAIN\nMAIN0260 DS    0H\n         ST    R1,DXD_LAST_USING                 SAVE LAST ON CHAIN\n         B     MAIN0380\n         DROP  PREV,NEW\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0270 DS    0H\n         ITRACE ID=KSDS\n         GETMAIN RU,                                                   +\n               LV=KSDS_DSECT_L,                                        +\n               LOC=ANY\nNEW      USING KSDS_DSECT,R1\n         ICM   R4,15,DXD_LAST_KSDS               LAST KSDS AREA\n         BZ    MAIN0280\nPREV     USING KSDS_DSECT,R4\n         ST    R1,PREV.KSDS_NEXT                 SET NEXT\nMAIN0280 DS    0H\n         ST    R4,NEW.KSDS_PREV                  SET PREV\n         XC    NEW.KSDS_NEXT,NEW.KSDS_NEXT\n         MVC   NEW.KSDS_EYE(KSDS_DSECT_L-(KSDS_EYE-KSDS_DSECT)),CONFIG_+\n               DATA\n         MVC   NEW.KSDS_ACB(ACB_L),ACB_I         COPY ACB\n         MVI   NEW.KSDS_FLAGS,0\n         OC    DXD_FIRST_KSDS,DXD_FIRST_KSDS     ANY ON CHAIN NOW?\n         BNZ   MAIN0290                          NO\n         ST    R1,DXD_FIRST_KSDS                 SET 1ST ON NEW CHAIN\nMAIN0290 DS    0H\n         ST    R1,DXD_LAST_KSDS                  SAVE LAST ON NEW CHAIN\n         B     MAIN0380\n         DROP  PREV,NEW\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0300 DS    0H\n         ITRACE ID=SYSLIB\n         GETMAIN RU,                                                   +\n               LV=SYSLIB_DSECT_L,                                      +\n               LOC=ANY\nNEW      USING  SYSLIB_DSECT,R1\n         ICM   R4,15,DXD_LAST_SYSLIB             LAST SYSLIB AREA\n         BZ    MAIN0310\nPREV     USING  SYSLIB_DSECT,R4\n         ST    R1,PREV.SYSLIB_NEXT               SET NEXT\nMAIN0310 DS    0H\n         ST    R4,NEW.SYSLIB_PREV                SET PREV\n         XC    NEW.SYSLIB_NEXT,NEW.SYSLIB_NEXT\n         MVC   NEW.SYSLIB_EYE(SYSLIB_DSECT_L-(SYSLIB_EYE-SYSLIB_DSECT))+\n               ,CONFIG_DATA\n         MVC   NEW.SYSLIB_DDNAME,COMM_BLANKS\n         OC    DXD_FIRST_SYSLIB,DXD_FIRST_SYSLIB ANY ON CHAIN NOW?\n         BNZ   MAIN0320                          NO\n         ST    R1,DXD_FIRST_SYSLIB               SET 1ST ON NEW CHAIN\nMAIN0320 DS    0H\n         ST    R1,DXD_LAST_SYSLIB                SAVE LAST ON NEW CHAIN\n         B     MAIN0380\n         DROP  PREV,NEW\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0330 DS    0H\n         ITRACE ID=PRE_LEN\n         MVC   COMM_PREFIX_LENGTH,CONFIG_DATA\n         B     MAIN0380\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0340 DS    0H\n         ITRACE ID=PREFIX\n         MVC   COMM_PREFIX,CONFIG_DATA\n         B     MAIN0380\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0350 DS    0H\n         ITRACE ID=ASM_SRC\n         GETMAIN RU,                                                   +\n               LV=ASM_DSECT_L,                                         +\n               LOC=ANY\nNEW      USING ASM_DSECT,R1\n         ICM   R4,15,DXD_LAST_ASM                LAST ASM AREA\n         BZ    MAIN0360\nPREV     USING ASM_DSECT,R4\n         ST    R1,PREV.ASM_NEXT                  SET NEXT\nMAIN0360 DS    0H\n         ST    R4,NEW.ASM_PREV                   SET PREV\n         XC    NEW.ASM_NEXT,NEW.ASM_NEXT\n         MVC   NEW.ASM_EYE(ASM_DSECT_L-(ASM_EYE-ASM_DSECT)),CONFIG_DATA\n         OC    DXD_FIRST_ASM,DXD_FIRST_ASM\n         BNZ   MAIN0370                          NO\n         ST    R1,DXD_FIRST_ASM                  SET 1ST ON NEW CHAIN\nMAIN0370 DS    0H\n         ST    R1,DXD_LAST_ASM                   SAVE LAST ON NEW CHAIN\n         B     MAIN0380\n         DROP  PREV,NEW\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0375 DS    0H\n         ITRACE ID=OUT_DSN\n         TM    COMM_DDS,$DISPUNCH_DD             DISPUNCH DD ALLOCATED?\n         BO    MAIN0380                          YES.. CANNOT OVER-RIDE\n         MVC   SPF_OUTPUT_DSN,CONFIG_DATA        COPY DSN\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0380 DS    0H\n         AH    R6,H256                           PLUS ONE RECORD\n         SH    R5,H256                           MINUS ONE RECORD\n         BH    MAIN0150\n         B     MAIN0140\n*---------------------------------------------------------------------*\n*                                                                     *\n*        EOF on CONFIG file                                           *\n*         . CLOSE CONFIG                                              *\n*         . De-allocate CONFIG file                                   *\n*         . display pre-processed DSECT KSDS libraries                *\n*         . display Assembler SYSLIBs                                 *\n*         . assemble assembler source                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0390 DS    0H\n         ITRACE ID=EOF\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         CLOSE ((R7)),                           CLOSE CONFIG DCB      +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         ITRACE ID=FREECONF\n         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC      SET DAIR FUNCTION\n         MVC   COMM_DAIR_DD,=CL8'DISCONF'        SET DD NAME\n         L     R15,V_DISDAIR\n         BALR  R14,R15                           FREE CONFIG\n         LTR   R15,R15                           SUCCESSFUL?\n         BNZ   ERR0050                           NO\n*---------------------------------------------------------------------*\n*        Display pre-processed DSECT KSDSes                           *\n*---------------------------------------------------------------------*\n         ITRACE ID=DISPKSDS,                                           +\n               RDATA1=R1\n         MVC   SPF_MSG_3(MSG02_L),MSG02\n         L     R1,DXD_FIRST_KSDS\n         L     R15,V_DISKLIST                    DISPLAY KSDS(S)\n         BALR  R14,R15\n*---------------------------------------------------------------------*\n*        Display Assembler SYSLIBs                                    *\n*---------------------------------------------------------------------*\n         ITRACE ID=SYSLIB,                                             +\n               RDATA1=R1\n         MVC   SPF_MSG_3(MSG03_L),MSG03\n         L     R1,DXD_FIRST_SYSLIB\n         L     R15,V_DISSLIST\n         BALR  R14,R15                           DISPLAY SYSLIBS\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Assemble any assembler source                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         ICM   R2,15,DXD_FIRST_ASM               ANY ASSEMBLER SOURCE?\n         BZ    MAIN0500                          NO\n         USING ASM_DSECT,R2\n         ITRACE ID=RE_ASSEM\n         MVC   COMM_INFO_01(MSG04_L),MSG04       COPY TO 24-BIT AREA\n         TPUT  COMM_INFO_01,MSG04_L              INFORM USER\n         STIMER REAL,                            WAIT FOR HALF SECOND  +\n               BINTVL=HALF_SECOND\n*---------------------------------------------------------------------*\n*        OPEN SYSIN                                                   *\n*---------------------------------------------------------------------*\n         ITRACE ID=OPEN_IN\n         OPEN  (SYSIN_DCB,OUTPUT),                                     +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n*---------------------------------------------------------------------*\n*        Copy source to SYSIN                                         *\n*---------------------------------------------------------------------*\nMAIN0400 DS    0H\n         ITRACE ID=PUT_SRC,                                            +\n               DATA1=ASM_SOURCE+0,                                     +\n               DATA2=ASM_SOURCE+8\n         PUT   SYSIN_DCB,ASM_SOURCE\n         ICM   R2,15,ASM_NEXT\n         BNZ   MAIN0400\n         DROP  R2\n*---------------------------------------------------------------------*\n*        CLOSE SYSIN                                                  *\n*---------------------------------------------------------------------*\n         ITRACE ID=CLOSE_IN\n         CLOSE SYSIN_DCB,                                              +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\n*---------------------------------------------------------------------*\n*        Allocate SYSLIB                                              *\n*---------------------------------------------------------------------*\n         ITRACE ID=ALOC_LIB\n         MVC   COMM_DAIR_DD,SYSLIB               SET DDNAME\n         MVI   COMM_DAIR_FUNC,$DAIR_CONCAT       SET DAIR FUNCTION\n         L     R15,V_DISDAIR\n         BALR  R14,R15                           CALL DISDAIR\n         LTR   R15,R15                           SUCCESSFUL?\n         BNZ   ERR0050                           NO\n*---------------------------------------------------------------------*\n*        Assemble/scan output                                         *\n*---------------------------------------------------------------------*\n         ITRACE ID=ASSM_SRC\n         L     R15,V_DISASSEM\n         BALR  R14,R15                           RE-ASSEMBLE DSECTS\n         ITRACE ID=ASSEM_RC,                                           +\n               DATA1=COMM_ASSEMBLER_RC\n*        CLC   COMM_ASSEMBLER_RC,H4              RC > 4\n*        BNH   MAIN0410                          NO\n* ------------------------------------------------------------------- *\n*        Obtain data set id for DISPRINT                              *\n* ------------------------------------------------------------------- *\n         ITRACE ID=LMINIT\n         MVC   COMM_SPF_FUNCTION,LMINIT          SPF FUNCTION\n         LA    R0,DDID                           DDID\n         ST    R0,COMM_SPF_2\n         LA    R0,COMM_BLANKS\n         ST    R0,COMM_SPF_3\n         ST    R0,COMM_SPF_4\n         ST    R0,COMM_SPF_5\n         ST    R0,COMM_SPF_6\n         ST    R0,COMM_SPF_7\n         ST    R0,COMM_SPF_8\n         ST    R0,COMM_SPF_9\n         LA    R0,SYSPRINT                       DDNAME\n         ST    R0,COMM_SPF_10                    SET DDNAME ADDR\n         OI    COMM_SPF_10,X'80'                 SET END-OF-LIST\n         LA    R1,COMM_SPF_PARMS                 SPF PARMS\n         L     R15,COMM_ISPLINK                  ISPLINK ENTRY POINT\n         BALR  R14,R15                           OBTAIN DDID\n         ITRACE ID=LMINITRC,                                           +\n               RDATA1=R15,                                             +\n               DATA2=SPF_DDID\n         LTR   R15,R15                           SUCCESSFUL?\n         BNZ   ERR0200                           NO\n         MVC   DXD_DDID,SPF_DDID                 SAVE DISPRINT DATA ID\n* ------------------------------------------------------------------- *\n*        CALL BROWSE FOR SYSPRINT                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=BROWSE,                                             +\n               DATA1=DXD_DDID\n         MVC   COMM_SPF_FUNCTION,BROWSE          SPF FUNCTION\n         LA    R0,COMM_BLANKS\n         ST    R0,COMM_SPF_2\n         ST    R0,COMM_SPF_3\n         ST    R0,COMM_SPF_4\n         ST    R0,COMM_SPF_5\n         LA    R0,DXD_DDID                       DDID\n         ST    R0,COMM_SPF_6                     SET DATA ID ADDR\n         OI    COMM_SPF_6,X'80'                  FLAG END-OF-LIST\n         LA    R1,COMM_SPF_PARMS                 PARMS FOR BROWSE\n         L     R15,COMM_ISPLINK\n         BALR  R14,R15\n*---------------------------------------------------------------------*\n*        Deallocate SYSLIB                                            *\n*---------------------------------------------------------------------*\nMAIN0410 DS    0H\n         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC      SET DAIR FUNCTION\n         MVC   COMM_DAIR_DD,SYSLIB               SET DDNAME\n         L     R15,V_DISDAIR\n         BALR  R14,R15                           CALL DISDAIR\n         LTR   R15,R15                           SUCCESSFUL?\n         BNZ   ERR0050                           NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0500 DS    0H\n         MVC   COMM_USER_AREA_NEXT_1,DXD_FIRST_DATAAREA\n         MVC   COMM_BASE_NEXT,DXD_FIRST_BASE\n         MVC   COMM_USING_NEXT,DXD_FIRST_USING\n         MVC   COMM_ASM_NEXT,DXD_FIRST_ASM\n         MVC   SPF_MSG_3(MSG01_L),MSG01\n         B     EXIT0000                          ALL DONE\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN1000 DS    0H\n         ITRACE ID=SAVE\n         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC        SET DAIR FUNCTION\n         MVC   COMM_DAIR_DD,=CL8'DISCONF'        SET DD NAME\n         MVC   COMM_DAIR_DSN,SPF_CONF_DSN        SET DSN\n         MVC   COMM_DAIR_VOLSER,SPF_CONF_VOLSER  SET VOLSER\n         MVI   COMM_DAIR_OPTIONS,$DAIR_USE_DDNAME\n         L     R15,V_DISDAIR\n         BALR  R14,R15                           ALLOCATE CONFIG\n         LTR   R15,R15                           SUCCESSFUL?\n         BNZ   ERR0050                           NO\n         ITRACE ID=OPEN\n         OPEN  ((R7),OUTPUT),                    OPEN CONFIG DATA SET  +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN1020 DS    0H\n         L     R0,DXD_IO_AREA\n         LH    R1,=Y($BUFF_SIZE)\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14\n         L     R6,DXD_IO_AREA                    I/O AREA\n         SR    R5,R5                             INIT AMOUNT OF DATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         OC    COMM_OPCODE_TABLE_ADDR,COMM_OPCODE_TABLE_ADDR\n         BZ    MAIN1025                          NO OPCODE TABLE\n         ITRACE ID=OP_TABLE\n         MVI   CONFIG_TYPE,$CONFIG_OP_TABLE      DATA TYPE\n         MVC   CONFIG_DATA(8),COMM_OPCODE_TABLE_NAME\n         BAL   R8,WRITE000                       WRITE THE DATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN1025 DS    0H\n         ICM   R2,15,COMM_USER_AREA_NEXT_1       FIRST USER AREA\n         BZ    MAIN1040\n         USING AREA_DSECT,R2\nMAIN1030 DS    0H\n         ITRACE ID=DATAAREA,                                           +\n               RDATA1=R2\n         MVI   CONFIG_TYPE,$CONFIG_DATAAREA      DATA TYPE\n         MVC   CONFIG_DATA(AREA_DSECT_L-(AREA_EYE-AREA_DSECT)),AREA_EYE\n         BAL   R8,WRITE000                       WRITE TO CONFIG FILE\n         ICM   R2,15,AREA_NEXT                   NEXT AREA BLOCK\n         BNZ   MAIN1030\n         DROP  R2\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN1040 DS    0H\n         ICM   R2,15,COMM_BASE_NEXT              FIRST BASE\n         BZ    MAIN1060\n         USING BASE_DSECT,R2\nMAIN1050 DS    0H\n         ITRACE ID=BASE,                                               +\n               RDATA1=R2\n         MVI   CONFIG_TYPE,$CONFIG_BASE          DATA TYPE\n         MVC   CONFIG_DATA(BASE_DSECT_L-(BASE_EYE-BASE_DSECT)),BASE_EYE\n         BAL   R8,WRITE000                       WRITE TO CONFIG FILE\n         ICM   R2,15,BASE_NEXT                   NEXT BASE BLOCK\n         BNZ   MAIN1050\n         DROP  R2\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN1060 DS    0H\n         ICM   R2,15,COMM_USING_NEXT             FIRST USING\n         BZ    MAIN1080\n         USING USING_DSECT,R2\nMAIN1070 DS    0H\n         ITRACE ID=USING,                                              +\n               RDATA1=R2\n         MVI   CONFIG_TYPE,$CONFIG_USING         DATA TYPE\n         MVC   CONFIG_DATA(USING_DSECT_L-(USING_EYE-USING_DSECT)),USING+\n               _EYE\n         BAL   R8,WRITE000                       WRITE TO CONFIG FILE\n         ICM   R2,15,USING_NEXT                  NEXT USING BLOCK\n         BNZ   MAIN1070\n         DROP  R2\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN1080 DS    0H\n         ICM   R2,15,COMM_KSDS_NEXT              FIRST KSDS\n         BZ    MAIN1100\n         USING KSDS_DSECT,R2\nMAIN1090 DS    0H\n         ITRACE ID=KSDS,                                               +\n               RDATA1=R2\n         MVI   CONFIG_TYPE,$CONFIG_DSECT_KSDS    DATA TYPE\n         MVC   CONFIG_DATA(KSDS_DSECT_L-(KSDS_EYE-KSDS_DSECT)),KSDS_EYE\n         BAL   R8,WRITE000                       WRITE TO CONFIG FILE\n         ICM   R2,15,KSDS_NEXT                   NEXT KSDS BLOCK\n         BNZ   MAIN1090\n         DROP  R2\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN1100 DS    0H\n         ICM   R2,15,COMM_SYSLIB_NEXT            FIRST SYSLIB\n         BZ    MAIN1120\n         USING SYSLIB_DSECT,R2\nMAIN1110 DS    0H\n         ITRACE ID=SYSLIB,                                             +\n               RDATA1=R2\n         MVI   CONFIG_TYPE,$CONFIG_SYSLIB        DATA TYPE\n         MVC   CONFIG_DATA(SYSLIB_DSECT_L-(SYSLIB_EYE-SYSLIB_DSECT)),SY+\n               SLIB_EYE\n         BAL   R8,WRITE000                       WRITE TO CONFIG FILE\n         ICM   R2,15,SYSLIB_NEXT                 NEXT SYSLIB BLOCK\n         BNZ   MAIN1110\n         DROP  R2\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN1120 DS    0H\n         ITRACE ID=PRFX_LEN\n         MVI   CONFIG_TYPE,$CONFIG_PREFIX_LENGTH DATA TYPE\n         MVC   CONFIG_DATA(2),COMM_PREFIX_LENGTH\n         BAL   R8,WRITE000                       WRITE TO CONFIG FILE\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         ITRACE ID=PREFIX\n         MVI   CONFIG_TYPE,$CONFIG_PREFIX        DATA TYPE\n         MVC   CONFIG_DATA(4),COMM_PREFIX\n         BAL   R8,WRITE000                       WRITE TO CONFIG FILE\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         ICM   R2,15,COMM_ASM_NEXT               FIRST ASSEMBLER SOURCE\n         BZ    MAIN1140\n         USING ASM_DSECT,R2\nMAIN1130 DS    0H\n         ITRACE ID=ASM,                                                +\n               RDATA2=R2\n         MVI   CONFIG_TYPE,$CONFIG_ASM_SOURCE    DATA TYPE\n         MVC   CONFIG_DATA(ASM_DSECT_L-(ASM_EYE-ASM_DSECT)),ASM_EYE\n         BAL   R8,WRITE000                       WRITE TO CONFIG FILE\n         ICM   R2,15,ASM_NEXT                    NEXT ASM BLOCK\n         BNZ   MAIN1130\n         DROP  R2\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN1140 DS    0H\n         MVI   CONFIG_TYPE,$CONFIG_OUTPUT_DSN    DATA TYPE\n         MVC   CONFIG_DATA(44),SPF_OUTPUT_DSN    OUTPUT DATA SET NAME\n         BAL   R8,WRITE000                       WRITE TO CONFIG FILE\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         ITRACE ID=LAST,                                               +\n               RDATA1=R5\n         LTR   R5,R5                             DATA IN LAST BLOCK?\n         BZ    MAIN1150                          NO\n         BAL   R8,WRITE010                       WRITE LAST BUFFER\nMAIN1150 DS    0H\n         ITRACE ID=STOW,                                               +\n               DATA1=SPF_CONF_MEMBER\n         GETMAIN RU,                                                   +\n               LV=STOW_DATA_L,                                         +\n               LOC=BELOW\n         LR    R3,R1\n         USING STOW_DATA,R3\n         MVC   STOW_NAME,SPF_CONF_MEMBER         MEMBER NAME\n         XC    STOW_TT,STOW_TT                   TRACK\n         MVI   STOW_R,0                          RECORD\n         MVI   STOW_C,0                          NO USER FIELDS\n         STOW  (R7),                                                   +\n               (R3),                                                   +\n               R\n         ITRACE ID=STOW_RC,                                            +\n               RDATA1=R15\n         LR    R2,R15                            SAVE STOW RC\n         FREEMAIN RU,                                                  +\n               A=(R3),                                                 +\n               LV=STOW_DATA_L\n         CH    R2,H8                             RC = 8?\n         BE    MAIN1160                          YES.. ACCEPTABLE\n         LTR   R2,R2                             SUCCESSFUL?\n         BNZ   ERR0070                           NO\nMAIN1160 DS    0H\n         CLOSE ((R7)),                           CLOSE CONFIG DCB      +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\n         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC      SET DAIR FUNCTION\n         MVC   COMM_DAIR_DD,=CL8'DISCONF'        SET DD NAME\n         L     R15,V_DISDAIR\n         BALR  R14,R15                           FREE CONFIG\n         LTR   R15,R15                           SUCCESSFUL?\n         BNZ   ERR0050                           NO\n         MVC   SPF_MSG_3(MSG05_L),MSG05\n         B     EXIT0000\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nWRITE000 DS    0H\n         ITRACE ID=WRITE000,                                           +\n               RDATA1=R6,                                              +\n               RDATA2=R5\n         AH    R6,H256                           UPDATE BUFFER ADDR\n         AH    R5,H256                           UPDATE LENGTH\n         CH    R5,=Y($BUFF_SIZE)                 BUFFER FULL?\n         BNER  R8                                NO\nWRITE010 DS    0H\n         L     R6,DXD_IO_AREA                    RESET R6\n         ITRACE ID=WRITE010,                                           +\n               RDATA1=R6,                                              +\n               RDATA2=R5\n         XC    COMM_DECB(COMM_DECB_L),COMM_DECB  INIT DECB\n         STH   R5,DCBBLKSI                       SET BLOCK SIZE\n         WRITE COMM_DECB,                                              +\n               SF,                                                     +\n               (R7),                             .. DCB ADDR           +\n               (R6),                             .. I/O AREA ADDR      +\n               (R5),                             .. LENGTH             +\n               MF=E\n         ITRACE ID=WAIT\n         CHECK COMM_DECB\n         ITRACE ID=RUNNING\n         SR    R5,R5                             RESET LENGTH\n         L     R0,DXD_IO_AREA\n         LH    R1,=Y($BUFF_SIZE)\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                            INITIALIZE I/O AREA\n         BR    R8\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nTPUT0000 DS    0H\n         ITRACE ID=TPUT\n         TPUT  COMM_MSG_1,L'COMM_MSG_1\n         MVC   COMM_MSG_1,COMM_BLANKS\n         BR    R8\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nERR0010  DS    0H\n         MVI   COMM_MSG_ID,1                     DSN IS BLANK\n         B     ERR0100\nERR0020  DS    0H\n         MVI   COMM_MSG_ID,2                     CONFIG DATASET NOT PDS\n         B     ERR0100\nERR0030  DS    0H\n         MVI   COMM_MSG_ID,3                     FUNCTION IS BLANK\n         B     ERR0100\nERR0040  DS    0H\n         MVI   COMM_MSG_ID,4                     BAD FUNCTION\n         B     ERR0100\nERR0050  DS    0H\n         MVI   COMM_MSG_ID,5                     DAIR FAILURE\n         B     ERR0110\nERR0060  DS    0H\n         MVI   COMM_MSG_ID,6                     FIND FAILED\n         B     ERR0100\nERR0070  DS    0H\n         MVI   COMM_MSG_ID,7                     STOW FAILED\n         STC   R2,COMM_INFO_01                   STOW RC\nERR0100  DS    0H\n         MVC   COMM_MSG_CSECT,MODID              SET CSECT ID\n         L     R15,V_DISMSG\n         BALR  R14,R15                           BUILD MESSAGE\nERR0110  DS    0H\n         ITRACE ID=ERROR,                                              +\n               DATA1=COMM_MSG_ID\n         MVC   SPF_MSG_1,COMM_MSG_1\n         MVC   SPF_MSG_2,COMM_MSG_2\n         MVC   SPF_MSG_3,COMM_MSG_3\n         MVC   SPF_MSG_4,COMM_MSG_4\n         MVC   SPF_MSG_5,COMM_MSG_5\n         B     MAIN0010\nERR0200  DS    0H\n         ITRACE ID=LM_ERR,                                             +\n               RDATA1=R15\n         MVC   COMM_SPF_FUNCTION,DISPLAY\n         MVC   COMM_SPF_PANEL,=CL8'DIS0000'      SET PANEL NAME\n         LA    R1,COMM_SPF_PANEL\n         ST    R1,COMM_SPF_2\n         OI    COMM_SPF_2,X'80'\n         LA    R1,COMM_SPF_PARMS\n         L     R14,COMM_ISPLINK\n         BALR  R14,R15                           DISPLAY CONFIG\n         DC    H'0'\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         MVC   COMM_CONF_DSN,SPF_CONF_DSN\n         MVC   COMM_CONF_MEMBER,SPF_CONF_MEMBER\n         MVC   COMM_CONF_VOLSER,SPF_CONF_VOLSER\n         ITRACE ID=EXIT\n         L     R1,DXD_IO_AREA                    I/O AREA ADDR\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=$BUFF_SIZE\n         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670\n         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680\n         LR    R15,R2                            SET RC\n         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680\n         BR    R14                               RETURN TO CALLER       ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START     DC   Q(DXDCONF)\n\nACB_I    ACB   AM=VSAM,                                                +\n               DDNAME=ANYDD,                                           +\n               MACRF=(KEY,DIR,SEQ)\n\nHALF_SECOND   DC   F'50'\n\nH4       DC   H'4'\nH8       DC   H'8'\nH256     DC   H'256'\n\nHEXCHAR  EQU  *-C'0'\n         DC   C'0123456789ABCDEF'\n\nBROWSE   DC   CL8'BROWSE'\nDDID     DC   CL8'DDID'\nDISPLAY  DC   CL8'DISPLAY'\nLMINIT   DC   CL8'LMINIT'\nSYSLIB   DC   CL8'SYSLIB'\nSYSPRINT DC   CL8'SYSPRINT'\n\nMSG01    DS   0C\n         DC   C'Configuration data restored'\nMSG01_L  EQU  *-MSG01\n\nMSG02    DS   0C\n         DC   C'Verify pre-processed DSECT KSDSes'\nMSG02_L  EQU  *-MSG02\n\nMSG03    DS   0C\n         DC   C'Verify assembler SYSLIBs'\nMSG03_L  EQU  *-MSG03\n\nMSG04    DS   0C\n         DC   C'Re-assembling DSECT(s)'\nMSG04_L  EQU  *-MSG04\n\nMSG05    DS   0C\n         DC   C'Configuration data saved'\nMSG05_L  EQU  *-MSG05\n\nMSG06    DS   0C\n         DC   C'Ending disp of data area at '\nMSG06_B  DC   CL8' '\n         DC   C' to '\nMSG06_E  DC   CL8' '\n         DC   C' limited to CSECT length'\nMSG06_L  EQU  *-MSG06\n\nMSG07    DS   0C\n         DC   C'Data area beyond end of CSECT.  Area from '\nMSG07_B  DC   CL8' '\n         DC   C' to '\nMSG07_E  DC   CL8' '\n         DC   C' ignored'\nMSG07_L  EQU  *-MSG07\n\n         LTORG\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDCONF               DSECT\n                      DS   18F\nDXD_CSECT             DS   CL8\n\nDXD_IO_AREA           DS   A\n\nDXD_FIRST_DATAAREA    DS   A\nDXD_LAST_DATAAREA     DS   A\n\nDXD_FIRST_BASE        DS   A\nDXD_LAST_BASE         DS   A\n\nDXD_FIRST_USING       DS   A\nDXD_LAST_USING        DS   A\n\nDXD_FIRST_KSDS        DS   A\nDXD_LAST_KSDS         DS   A\n\nDXD_FIRST_SYSLIB      DS   A\nDXD_LAST_SYSLIB       DS   A\n\nDXD_FIRST_ASM         DS   A\nDXD_LAST_ASM          DS   A\n\nDXD_DDID              DS   CL8\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              DISCOMM TYPE=DSECT\n              DISSPFD TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              COPY    DISASMDA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDIR_DATA      DSECT\nSTOW_DATA     DS      0C\nSTOW_NAME     DS      CL8               MEMBER NAME\nSTOW_TT       DS      XL2               TRACK NBR\nSTOW_R        DS      X                 RECORD NUMBER\nSTOW_C        DS      X                 FLAGS, NBR OF USER DATA BYTES\n              DS      CL62              USER DATA\nSTOW_DATA_L   EQU     *-STOW_DATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              DCBD    DSORG=PO\n\n              IHADCBE\n\n              IEZIOB  DSECT=YES\n\n              IHADECB DSECT=YES\n\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              COPY    ATTRS\n              COPY    REGEQU\n$BUFF_SIZE    EQU     CONFIG_RECORD_L*16\n              END     DISCONF\n./ ADD NAME=DISDAIR  0106-09119-09198-0836-00551-00543-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: DISDAIR                                               *\n*                                                                     *\n*  Interface with the dynamic allocation (DAIR)                       *\n*                                                                     *\n*  If the return code is non zero, DISMSG will be called to           *\n*  create messages that are in display format.                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISDAIR  CSECT\nDISDAIR  AMODE 31\nDISDAIR  RMODE ANY\n         USING DISDAIR,R15\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        COPY BASE ADDRESS\n         B     INIT0000\nMODID    DC    CL8'DISDAIR'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DAIREND-DISDAIR)\nINIT0000 DS    0H\n         DROP  R15\n         USING DISDAIR,R11\n         L     R15,COMM_DXD_ADDRESS           DXD AREA BASE ADDRESS\n         A     R15,DXD_START                  PLUS OFFSET\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        COPY DXD AREA ADDRESS\n         USING DXDDAIR,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY,                                              +\n               DATA1=COMM_DAIR_FUNC\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n* ------------------------------------------------------------------- *\n         USING S99RB,DXD_SVC99_RB\n         TM    DXD_FLAGS,$FLAG_INIT           WORK AREA INITIALIZED?\n         BO    DAIR0010                       YES\n         ITRACE ID=INIT\n         MVC   DXD_TEXT_UNITS(TEXT_UNITS_L),TEXT_UNITS_I\n         XC    DXD_SVC99_RB(S99RBEND-S99RB),DXD_SVC99_RB\n         LA    R1,DXD_SVC99_RB\n         ST    R1,DXD_SVC99_RB_ADDRESS\n         OI    DXD_SVC99_RB_ADDRESS,X'80'\n         MVI   S99RBLN,S99RBEND-S99RB\n         LA    R1,DXD_TEXT_POINTER_1\n         ST    R1,S99TXTPP                    FIRST TEXT UNIT ADDRESS\n         OI    DXD_FLAGS,$FLAG_INIT           SET INIT INDICATOR\nDAIR0010 DS    0H\n         CLI   COMM_DAIR_FUNC,$DAIR_ALLOC     ALLOCATE?\n         BE    DAIR0020                       YES\n         CLI   COMM_DAIR_FUNC,$DAIR_CONCAT    CONCATENATE SYSLIB?\n         BE    DAIR0200                       YES\n         CLI   COMM_DAIR_FUNC,$DAIR_DEALLOC   DEALLOCATE?\n         BE    DAIR0300                       YES\n         ABEND 1,DUMP,,USER                   BAD NEWS\n* ------------------------------------------------------------------- *\n*        Allocation                                                   *\n* ------------------------------------------------------------------- *\nDAIR0020 DS    0H\n         ITRACE ID=ALLOC,                                              +\n               DATA1=COMM_DAIR_DD\n         MVI   S99VERB,S99VRBAL               SET VERB\n         TM    COMM_DAIR_OPTIONS,$DAIR_USE_DDNAME\n         BO    DAIR0030                       YES\n         AP    COMM_DD_NUMBER,P1              ADD 1 TO DD'S ALLOCATED\n         MVC   DXD_DD,DD_EDIT_WORD            INITIALIZE WITH EDIT WORD\n         ED    DXD_DD,COMM_DD_NUMBER          EDIT DD NUMBER\n         MVI   DXD_DD,C'D'                    SET DD PREFIX\n         MVC   COMM_DAIR_DD,DXD_DD            PASS IT BACK TO CALLER\n         ITRACE ID=NEW_DD,                                             +\n               DATA1=COMM_DAIR_DD\n         B     DAIR0040\nDAIR0030 DS    0H\n         MVC   DXD_DD,COMM_DAIR_DD            COPY DDNAME\nDAIR0040 DS    0H\n         LA    R1,DXD_DD_TEXT_UNITS           DD TEXT UNITS\n         ST    R1,DXD_TEXT_POINTER_1          SET TEXT POINTER 1\n         LA    R1,DXD_DSN_TEXT_UNITS          DSN TEXT UNITS\n         ST    R1,DXD_TEXT_POINTER_2          SET TEXT POINTER 2\n         LA    R1,DXD_STATUS_TEXT_UNITS       STATUS TEXT UNITS\n         ST    R1,DXD_TEXT_POINTER_3          SET TEXT POINTER 3\n         TM    COMM_DAIR_OPTIONS,$DAIR_SYSPRINT+$DAIR_SYSIN\n         BNZ   DAIR0060                       SYSIN OR SYSPRINT\n         MVC   DXD_DSN,COMM_DAIR_DSN          COPY DATA SET NAME\n         MVI   DXD_STATUS,$SHR                SET STATUS (SHR)\n         CLC   DXD_VOLSER,COMM_BLANKS         VOLSER GIVEN?\n         BE    DAIR0050                       NO\n         LA    R1,DXD_VOLSER_TEXT_UNITS       VOLSER TEXT UNITS\n         ST    R1,DXD_TEXT_POINTER_4          SET TEXT POINTER 4\n         LA    R1,DXD_UNIT_TEXT_UNITS         UNIT TEXT UNITS\n         ST    R1,DXD_TEXT_POINTER_5          SET TEXT POINTER 5\n         MVC   DXD_VOLSER,COMM_DAIR_VOLSER    COPY VOLSER\n         OI    DXD_TEXT_POINTER_5,X'80'       SET END-OF-LIST\n         B     DAIR0080\nDAIR0050 DS    0H\n         OI    DXD_TEXT_POINTER_3,X'80'       SET END-OF-LIST\n         B     DAIR0080\n* ------------------------------------------------------------------- *\n*        Allocate a temp dataset for SYSIN or SYSPRINT                *\n* ------------------------------------------------------------------- *\nDAIR0060 DS    0H\n         ITRACE ID=ALOCTEMP\n         MVC   DXD_DSN,COMM_BLANKS\n         MVC   DXD_DSN+0(3),=C'&&&&D'         SET TEMP DSN PREFIX\n         MVC   DXD_DSN+3(5),DXD_DD            COPY DD SUFFIX\n         MVI   DXD_STATUS,4                   SET STATUS (NEW)\n         LA    R1,DXD_UNIT_TEXT_UNITS         UNIT TEXT UNITS\n         ST    R1,DXD_TEXT_POINTER_4          SET TEXT POINTER 4\n         MVC   DXD_UNIT,SYSDA                 SET UNIT NAME\n         LA    R1,DXD_PRIMARY_TEXT_UNITS      PRIMARY SPACE UNITS\n         ST    R1,DXD_TEXT_POINTER_5          SET TEXT POINTER 5\n         LA    R1,DXD_SECONDARY_TEXT_UNITS    SECONDARY SPACE UNITS\n         ST    R1,DXD_TEXT_POINTER_6          SET TEXT POINTER 6\n         LA    R1,DXD_TRACKS_TEXT_UNITS       TRACKS TEXT UNITS\n         ST    R1,DXD_TEXT_POINTER_7          SET TEXT POINTER 7\n         LA    R1,DXD_RECFM_TEXT_UNITS        RECFM TEXT UNITS\n         ST    R1,DXD_TEXT_POINTER_8          SET TEXT POINTER 8\n         LA    R1,DXD_LRECL_TEXT_UNITS        LRECL TEXT UNITS\n         ST    R1,DXD_TEXT_POINTER_9          SET TEXT POINTER 9\n         LA    R1,DXD_BLKSIZE_TEXT_UNITS      BLOCK SIZE UNITS\n         ST    R1,DXD_TEXT_POINTER_10         SET TEXT POINTER 10\n         OI    DXD_TEXT_POINTER_10,X'80'      SENT END-OF-LIST\n         TM    COMM_DAIR_OPTIONS,$DAIR_SYSIN  SYSIN?\n         BO    DAIR0070                       YES\n         ITRACE ID=SYSPRINT\n         MVC   DXD_LRECL,=Y(133)              SET LRECL=133\n         MVC   DXD_BLKSIZE,=Y(133*30)         SET BLKSIZE=133*30\n         B     DAIR0080\nDAIR0070 DS    0H\n         ITRACE ID=SYSIN\n         MVC   DXD_LRECL,=Y(80)               SET LRECL=80\n         MVC   DXD_BLKSIZE,=Y(80*50)          SET BLKSIZE=80*50\nDAIR0080 DS    0H\n         ITRACE ID=SVC_99,                                             +\n               RDATA1=R1,                                              +\n               DATA2=DXD_DD\n         LA    R1,DXD_SVC99_RB_ADDRESS\n         SVC   99                             ALLOCATE THE DATA SET\n         ITRACE ID=RC,                                                 +\n               RDATA1=R15,                                             +\n               DATA2=S99ERROR\n         STC   R15,DXD_RC                     SAVE RETURN CODE\n         LTR   R15,R15\n         BNZ   ERR0010\n* ------------------------------------------------------------------- *\n*        DETERMINE VOLSER FROM UCB                                    *\n* ------------------------------------------------------------------- *\n         USING PSA,R0                         DEFINE BASE\n         L     R1,PSATNEW                     MY TCB'S ADDRESS\n         USING TCB,R1                         DEFINE TCB BASE\n         L     R2,TCBTIO                      TIOT ADDRESS\n         USING TIOT1,R2                       DEFINE BASE\n         LA    R3,TIOENTRY                    FIRST TIOT ENTRY\n         USING TIOENTRY,R3                    DEFINE BASE\n         SR    R4,R4                          CLEAR FOR LENGTHS\nDAIR0090 DS    0H\n         ICM   R4,1,TIOELNGH                  LENGTH OF THIS ENTRY\n         BZ    EXIT0000                       END OF TABLE\n         ITRACE ID=DD,                                                 +\n               DATA1=TIOEDDNM\n         CLC   TIOEDDNM,COMM_DAIR_DD          DD JUST ALLOCATED?\n         BE    DAIR0100                       YES\n         AR    R3,R4                          NEXT DD IN TIOT\n         B     DAIR0090                       CHECK NEXT DD\nDAIR0100 DS    0H\n         SR    R5,R5\n         ICM   R5,7,TIOEFSRT                  UCB ADDRESS\n         USING UCBOB,R5\n         MVC   COMM_DAIR_VOLSER,UCBVOLI       COPY VOLSER\n         ITRACE ID=VOLSER,                                             +\n               RDATA1=R5,                                              +\n               DATA2=COMM_DAIR_VOLSER\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Allocate SYSLIB for assembler                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIR0200 DS    0H\n         ITRACE ID=CONCAT\n* ------------------------------------------------------------------- *\n*        Make sure SYSLIB DD is free                                  *\n* ------------------------------------------------------------------- *\n         ITRACE ID=FREESLIB\n         NI    DXD_FLAGS,255-$SYSLIB_DD       RESET FLAG\n         MVI   S99VERB,S99VRBUN               SET VERB\n         MVC   DXD_DD,SYSLIB                  SET DD\n         LA    R1,DXD_DD_TEXT_UNITS           DD TEXT UNITS\n         ST    R1,DXD_TEXT_POINTER_1          SET TEXT POINTER 1\n         OI    DXD_TEXT_POINTER_1,X'80'       SET END-OF-LIST\n         LA    R1,DXD_SVC99_RB_ADDRESS\n         SVC   99                             ISSUE SVC\n* ------------------------------------------------------------------- *\n*        Free all LIBs in SYSLIB list                                 *\n* ------------------------------------------------------------------- *\n         ICM   R4,15,COMM_SYSLIB_NEXT         FIRST SYSLIB\n         BZ    DAIR0280                       NO LIBRARIES DEFINED\n         USING SYSLIB_DSECT,R4                DEFINE BASE\nDAIR0210 DS    0H\n         ITRACE ID=FREE_LIB,                                           +\n               DATA1=SYSLIB_DDNAME,                                    +\n               DATA2=SYSLIB_DSNAME+00\n         ITRACE ID=+,                                                  +\n               DATA1=SYSLIB_DSNAME+08,                                 +\n               DATA2=SYSLIB_DSNAME+16\n         MVC   DXD_DD,SYSLIB_DDNAME           COPY DDNAME\n         LA    R1,DXD_SVC99_RB_ADDRESS\n         SVC   99\n         ICM   R4,15,SYSLIB_NEXT              NEXT LIBRARY\n         BNZ   DAIR0210                       FREE ALL LIBS\n* ------------------------------------------------------------------- *\n*        Allocate the libraries in SYSLIB list                        *\n* ------------------------------------------------------------------- *\nDAIR0220 DS    0H\n         MVI   S99VERB,S99VRBAL               SET VERB\n         ICM   R4,15,COMM_SYSLIB_NEXT         FIRST SYSLIB\n         BZ    DAIR0280\nDAIR0230 DS    0H\n         ITRACE ID=ALLOCLIB,                                           +\n               DATA1=SYSLIB_DDNAME,                                    +\n               DATA2=SYSLIB_DSNAME+00\n         ITRACE ID=+,                                                  +\n               DATA1=SYSLIB_DSNAME+08,                                 +\n               DATA2=SYSLIB_DSNAME+16\n         AP    COMM_DD_NUMBER,P1              ADD 1 TO DD'S ALLOCATED\n         MVC   DXD_DD,DD_EDIT_WORD            INITIALIZE WITH EDIT WORD\n         ED    DXD_DD,COMM_DD_NUMBER          EDIT DD NUMBER\n         MVI   DXD_DD,C'D'                    SET DD PREFIX\n         LA    R1,DXD_DD_TEXT_UNITS           DD TEXT UNITS\n         ST    R1,DXD_TEXT_POINTER_1          SET TEXT POINTER 1\n         LA    R1,DXD_DSN_TEXT_UNITS          DSN TEXT UNITS\n         ST    R1,DXD_TEXT_POINTER_2          SET TEXT POINTER 2\n         LA    R1,DXD_STATUS_TEXT_UNITS       STATUS TEXT UNITS\n         ST    R1,DXD_TEXT_POINTER_3          SET TEXT POINTER 3\n         OI    DXD_TEXT_POINTER_3,X'80'       FLAG END-OF-LIST\n         MVC   DXD_DSN,SYSLIB_DSNAME          COPY DATA SET NAME\n         MVI   DXD_STATUS,$SHR                SET DISP=SHR\n         TM    DXD_FLAGS,$SYSLIB_DD           SYSLIB DD ALLOCATED?\n         BO    DAIR0240                       YES\n         MVC   DXD_DD,SYSLIB                  OVER-RIDE DDNAME\n         OI    DXD_FLAGS,$SYSLIB_DD           SYSLIB DD ALLOCATED\nDAIR0240 DS    0H\n         LA    R1,DXD_SVC99_RB_ADDRESS\n         ITRACE ID=SVC_99,                                             +\n               RDATA1=R1\n         SVC   99                             ISSUE THE SVC\n         STC   R15,DXD_RC                     SAVE RC\n         ITRACE ID=RC,                                                 +\n               RDATA1=R15,                                             +\n               DATA2=S99ERROR\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0010                        NO\n         ITRACE ID=SAVE_DDN,                                           +\n               DATA1=DXD_DD\n         MVC   SYSLIB_DDNAME,DXD_DD           SAVE DDNAME\n         ICM   R4,15,SYSLIB_NEXT              NEXT SYSLIB\n         BNZ   DAIR0230\n* ------------------------------------------------------------------- *\n*        Concatenate the libraries                                    *\n* ------------------------------------------------------------------- *\n         MVI   S99VERB,S99VRBCC               SET VERB\n         LA    R1,DXD_CONCAT_TEXT_UNITS       CONCAT TEXT UNITS\n         ST    R1,DXD_TEXT_POINTER_1          SET TEXT POINTER 1\n         OI    DXD_TEXT_POINTER_1,X'80'       SET END-OF-LIST\n         MVC   DXD_CONCAT_DD_1,SYSLIB         LIBRARY 1 DDNAME\n         ICM   R4,15,COMM_SYSLIB_NEXT         FIRST SYSLIB\n         BZ    DAIR0280\n         B     DAIR0260                       SKIP 1ST DD\nDAIR0250 DS    0H\n         MVC   DXD_CONCAT_DD_2,SYSLIB_DDNAME  COPY DDNAME\n         ITRACE ID=CONCAT,                                             +\n               DATA1=DXD_CONCAT_DD_1,                                  +\n               DATA2=DXD_CONCAT_DD_2\n         LA    R1,DXD_SVC99_RB_ADDRESS\n         ITRACE ID=SVC_99,                                             +\n               RDATA1=R1\n         SVC   99                             ISSUE THE SVC\n         STC   R15,DXD_RC                     SAVE RC\n         ITRACE ID=RC,                                                 +\n               RDATA1=R15,                                             +\n               DATA2=S99ERROR\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0030                        NO\nDAIR0260 DS    0H\n         ICM   R4,15,SYSLIB_NEXT              NEXT SYSLIB\n         BNZ   DAIR0250\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        There are no libraries in SYSLIB list                        *\n* ------------------------------------------------------------------- *\nDAIR0270 DS    0H\n         ITRACE ID=DD_DUMMY\n         MVI   S99VERB,S99VRBAL               SET VERB\n         LA    R1,DXD_DD_TEXT_UNITS\n         ST    R1,DXD_TEXT_POINTER_1\n         LA    R1,DXD_DUMMY_TEXT_UNITS\n         ST    R1,DXD_TEXT_POINTER_2\n         MVC   DXD_DD,SYSLIB\n         OI    DXD_TEXT_POINTER_2,X'80'       SET END-OF-LIST\n         LA    R1,DXD_SVC99_RB_ADDRESS\n         ITRACE ID=SVC_99,                                             +\n               RDATA1=R1,                                              +\n               DATA2=DXD_DD\n         SVC   99                             ISSUE THE SVC\n         STC   R15,DXD_RC                     SAVE RC\n         ITRACE ID=RC,                                                 +\n               RDATA1=R15,                                             +\n               DATA2=S99ERROR\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0020                        NO\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIR0280 DS    0H\n         ITRACE ID=NO_LIBS\n         MVI   DXD_RC,0\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Free a DD                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIR0300 DS    0H\n         ITRACE ID=FREE,                                               +\n               DATA1=COMM_DAIR_DD\n         MVI   S99VERB,S99VRBUN               SET VERB\n         MVC   DXD_DD,COMM_DAIR_DD            SET DD\n         LA    R1,DXD_DD_TEXT_UNITS           DD TEXT UNITS\n         ST    R1,DXD_TEXT_POINTER_1          SET TEXT POINTER 1\n         OI    DXD_TEXT_POINTER_1,X'80'       SET END-OF-LIST\n         LA    R1,DXD_SVC99_RB_ADDRESS\n         ITRACE ID=SVC_99,                                             +\n               RDATA1=R1,                                              +\n               DATA2=DXD_DD\n         SVC   99                             ISSUE THE SVC\n         STC   R15,DXD_RC                     SAVE RC\n         ITRACE ID=RC,                                                 +\n               RDATA1=R15,                                             +\n               DATA2=S99ERROR\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0020                        NO\n* ------------------------------------------------------------------- *\n*        If the DD was SYSLIB, free all libs in SYSLIB list           *\n* ------------------------------------------------------------------- *\n         CLC   COMM_DAIR_DD,SYSLIB            SYSLIB DD?\n         BNE   EXIT0000                       NO\n         ICM   R4,15,COMM_SYSLIB_NEXT         FIRST SYSLIB\n         BZ    EXIT0000\n         USING SYSLIB_DSECT,R4                DEFINE BASE\nDAIR0310 DS    0H\n         ITRACE ID=FREE_LIB,                                           +\n               DATA1=SYSLIB_DDNAME\n         MVC   DXD_DD,SYSLIB_DDNAME           COPY DDNAME\n         LA    R1,DXD_SVC99_RB_ADDRESS\n         SVC   99\n         ICM   R4,15,SYSLIB_NEXT              NEXT LIBRARY\n         BNZ   DAIR0310                       FREE ALL LIBS\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVI   COMM_MSG_ID,1                  ALLOCATION\n         MVC   COMM_INFO_01(L'COMM_DAIR_DD),DXD_DD\n         MVC   COMM_INFO_02(L'COMM_DAIR_DSN),DXD_DSN\n         B     ERR0040\nERR0020  DS    0H\n         MVI   COMM_MSG_ID,2                  DE-ALLOCATION\n         MVC   COMM_INFO_01(L'COMM_DAIR_DD),DXD_DD\n         B     ERR0040\nERR0030  DS    0H\n         MVI   COMM_MSG_ID,3                  CONCATENATION\n         MVC   COMM_INFO_01(L'DXD_CONCAT_DD_1),DXD_CONCAT_DD_1\n         MVC   COMM_INFO_02(L'DXD_CONCAT_DD_2),DXD_CONCAT_DD_2\nERR0040  DS    0H\n         MVC   COMM_INFO_03(1),DXD_RC         R15\n         MVC   COMM_INFO_04(4),S99ERROR       ERROR AND INFO CODE\n         MVC   COMM_MSG_CSECT,MODID           SET CSECT NAME\n         L     R15,V_DISMSG                   DISMSG ENTRY PONT\n         BALR  R14,R15                        BUILD MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         SR    R15,R15\n         IC    R15,DXD_RC                     SET RC\n         L     R13,4(,R13)                    RESTORE SAVE AREA\n         L     R14,12(,R13)                   RESTORE R14\n         LM    R0,R12,20(R13)\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDDAIR)\nP1            DC    P'1'\nDD_EDIT_WORD  DC    X'F020202020202020'\nSYSALLDA      DC    CL8'SYSALLDA'\nSYSDA         DC    CL8'SYSDA'\nSYSLIB        DC    CL8'SYSLIB'\n\nTEXT_UNITS_I  DS    0X\n              DC    AL2(DALDDNAM)         DDNAME PARMS\n              DC    AL2(1)\n              DC    AL2(8)\n              DC    CL8' '                DDNAME\n              DC    AL2(DALDSNAM)         DATASET NAME PARMS\n              DC    AL2(1)\n              DC    AL2(44)\n              DC    CL44' '               DATASET NAME\n              DC    AL2(DALMEMBR)         MEMBER NAME PARMS\n              DC    AL2(1)\n              DC    AL2(8)\n              DC    CL8' '                DATASET NAME\n              DC    AL2(DALSTATS)         STATUS\n              DC    AL2(1)\n              DC    AL2(1)\n              DC    X'08'                 SHR\n              DC    AL2(DALNDISP)         NORMAL DISPOSITION PARMS\n              DC    AL2(1)\n              DC    AL2(1)\n              DC    X'08'                 NORMAL DISP\n              DC    AL2(DALUNIT)          UNIT PARAMETERS\n              DC    AL2(1)\n              DC    AL2(8)\n              DC    CL8'SYSALLDA'         UNIT NAME\n              DC    AL2(DALVLSER)         VOLSER PARAMETERS\n              DC    AL2(1)\n              DC    AL2(6)\n              DC    CL6' '\n              DC    AL2(DALPRIME)         PRIMARY QTY\n              DC    AL2(1)\n              DC    AL2(3)\n              DC    AL3(15)\n              DC    AL2(DALSECND)         SECONDARY QTY\n              DC    AL2(1)\n              DC    AL2(3)\n              DC    AL3(15)\n              DC    AL2(DALTRK)           TRACKS\n              DC    AL2(0)\n              DC    AL2(DALRECFM)         RECFM\n              DC    AL2(1)\n              DC    AL2(1)\n              DC    AL2(DALLRECL)         LRECL\n              DC    AL2(1)\n              DC    AL2(2)\n              DC    AL2(0)\n              DC    AL2(DALBLKSZ)         BLOCK SIZE\n              DC    AL2(1)\n              DC    AL2(2)\n              DC    AL2(0)\n              DC    AL2(DCCDDNAM)         DD NAME'S TO CONCAT\n              DC    AL2(2)\n              DC    AL2(8)\n              DC    CL8' '\n              DC    AL2(8)\n              DC    CL8' '\n              DC    AL2(DALDUMMY)         DUMMY\n              DC    AL2(0)\nTEXT_UNITS_L  EQU   *-TEXT_UNITS_I\n              LTORG\n\nDAIREND       EQU  *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDDAIR                       DSECT\n                              COPY DXDPREF\n\nDXD_SVC99_RB_ADDRESS          DS   A\nDXD_SVC99_RB                  DS   (S99RBEND-S99RB)X\n\nDXD_TEXT_POINTER_1            DS   A\nDXD_TEXT_POINTER_2            DS   A\nDXD_TEXT_POINTER_3            DS   A\nDXD_TEXT_POINTER_4            DS   A\nDXD_TEXT_POINTER_5            DS   A\nDXD_TEXT_POINTER_6            DS   A\nDXD_TEXT_POINTER_7            DS   A\nDXD_TEXT_POINTER_8            DS   A\nDXD_TEXT_POINTER_9            DS   A\nDXD_TEXT_POINTER_10           DS   A\n\nDXD_TEXT_UNITS                DS   0C\nDXD_DD_TEXT_UNITS             DS   AL2,AL2,AL2\nDXD_DD                        DS   CL8\nDXD_DSN_TEXT_UNITS            DS   AL2,AL2,AL2\nDXD_DSN                       DS   CL44\nDXD_MEMBER_TEXT_UNITS         DS   AL2,AL2,AL2\nDXD_MEMBER                    DS   CL8\nDXD_STATUS_TEXT_UNITS         DS   AL2,AL2,AL2\nDXD_STATUS                    DS   X\nDXD_NORMAL_DISP_TEXT_UNITS    DS   AL2,AL2,AL2\nDXD_NORMAL_DISP               DS   X\nDXD_UNIT_TEXT_UNITS           DS   AL2,AL2,AL2\nDXD_UNIT                      DS   CL8\nDXD_VOLSER_TEXT_UNITS         DS   AL2,AL2,AL2\nDXD_VOLSER                    DS   CL6\nDXD_PRIMARY_TEXT_UNITS        DS   AL2,AL2,AL2\nDXD_PRIMARY                   DS   XL3\nDXD_SECONDARY_TEXT_UNITS      DS   AL2,AL2,AL2\nDXD_SECONDARY                 DS   XL3\nDXD_TRACKS_TEXT_UNITS         DS   AL2,AL2\nDXD_RECFM_TEXT_UNITS          DS   AL2,AL2,AL2\nDXD_LRECL_TEXT_UNITS          DS   AL2,AL2,AL2\nDXD_LRECL                     DS   AL2\nDXD_BLKSIZE_TEXT_UNITS        DS   AL2,AL2,AL2\nDXD_BLKSIZE                   DS   AL2\n\nDXD_CONCAT_TEXT_UNITS         DS   AL2,AL2\n                              DS   AL2\nDXD_CONCAT_DD_1               DS   CL8\n                              DS   AL2\nDXD_CONCAT_DD_2               DS   CL8\n\nDXD_DUMMY_TEXT_UNITS          DS   AL2,AL2\n\nDXD_RC                        DS   X\n\nDXD_FLAGS                     DS   X\n$FLAG_INIT                    EQU  X'80'\n$SYSLIB_DD                    EQU  X'40'\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DISCOMM  TYPE=DSECT\n         DISSPFD  TYPE=DSECT\n         COPY     DISASMDA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA   DSECT=YES,LIST=NO\n         IKJTCB   LIST=NO\n         IEFTIOT1\n         IEFUCBOB\n         IEFZB4D0\n         IEFZB4D2\n\n         IFGACB  AM=VSAM\nACB_L    EQU     *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n$SHR     EQU      8\n         COPY     REGEQU\n         END      DISDAIR\n./ ADD NAME=DISDCONV 0108-09111-09198-0836-00125-00118-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISDCONV                                             *\n*                                                                    *\n*  Function:                                                         *\n*                                                                    *\n*   Convert displacements from character to binary                   *\n*                                                                    *\n*   There are two parms:                                             *\n*     .   Address of source data (8 characters)                      *\n*     .   Address of output (fullword)                               *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISDCONV CSECT\nDISDCONV AMODE 31\nDISDCONV RMODE ANY\n         USING DISDCONV,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     MOD0000                           SKIP EYECATCHER\nMODID    DC    CL8'DISDCONV'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDDCONV,R13\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R1\n         LM    R9,R10,0(R1)                      ADDR OF PARMS\n         LR    R8,R9                             SAVE SOURCE ADDR\n         MVC   DXD_IN,C_ZEROS                    INITIALIZE\n         LA    R1,L'DXD_IN                       LOOP LIMITER\nCONV0000 DS    0H                                LAST DIGIT\n         CLI   0(R9),C' '                        BLANK?\n         BE    CONV0020                          YES\n         CLI   0(R9),C'A'                        VALID DIGIT?\n         BL    ERR0010                           NO\n         CLI   0(R9),C'F'                        VALID DIGIT?\n         BNH   CONV0010                          YES\n         CLI   0(R9),C'0'                        VALID DIGIT?\n         BL    ERR0010                           NO\n         CLI   0(R9),C'9'                        VALID DIGIT?\n         BH    ERR0010                           NO\nCONV0010 DS    0H\n         MVC   DXD_IN(L'DXD_IN-1),DXD_IN+1       SHIFT LEFT 1 DIGIT\n         MVC   DXD_IN+(L'DXD_IN-1)(1),0(R9)      COPY DIGIT\n         LA    R9,1(,R9)                         NEXT DIGIT\n         BCT   R1,CONV0000                       LOOP\nCONV0020 DS    0H\n         LTR   R10,R10                           JUST VERIFYING?\n         BZ    CONV0030                          YES\n*        MVC   0(8,R8),DXD_IN                    COPY BACK TO CALLER\n         TR    DXD_IN,CHARHEX                    PREPARE FOR CONVERSION\n         PACK  DXD_OUT(5),DXD_IN(9)              PACK\n         MVC   0(4,R10),DXD_OUT                  COPY TO OUTPUT\nCONV0030 DS    0H\n         SR    R15,R15                           SET RC\n         B     EXIT0000\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nERR0010  DS    0H\n         ITRACE ID=BAD,                                                +\n               RDATA1=R9\n         MVI   COMM_MSG_ID,1\n         MVC   COMM_INFO_01(1),0(R9)             COPY OFFENDING DIGIT\n         MVC   COMM_MSG_CSECT,MODID              COPY MODULE NAME\n         L     R15,V_DISMSG\n         BALR  R14,R15                           BUILD MESSAGE\n         LA    R15,4                             SET RC\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT,                                               +\n               DATA1=DXD_OUT\n         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670\n         L     R14,12(,R13)                      RESTORE R14            ASE01680\n         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680\n         BR    R14                               RETURN TO CALLER       ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START     DC   Q(DXDDCONV)\n\nC_ZEROS       DC   C'00000000'\n\nCHARHEX       DC   256X'00'\n              ORG  CHARHEX+C'A'\n              DC   X'0A0B0C0D0E0F'\n              ORG  CHARHEX+C'0'\n              DC   X'00010203040506070809'\n              ORG\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDDCONV      DSECT\n              DS   18F\nDXD_CSECT     DS   CL8\n\nDXD_IN        DS   CL8\nDXD_OUT       DS   CL5\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              DISCOMM TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              COPY    DISASMDA\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              COPY    REGEQU\n              END     DISDCONV\n./ ADD NAME=DISDDSCT 0111-09033-09198-0837-00288-00289-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: DISDDSCT                                              *\n*                                                                     *\n*  FUNCTION:                                                          *\n*   Display DSECTs                                                    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  One BIG difference about scrolling....                             *\n*  UP, DOWN, TOP, BOTTOM are based on DSECTs, not LABELs or EQUs.     *\n*                                                                     *\n*  If anyone wants to take on scrolling that would allow              *\n*  positioning based only any type of block, be my guest!             *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISDDSCT CSECT\nDISDDSCT AMODE 31\nDISDDSCT RMODE ANY\n         USING DISDDSCT,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     MOD0000                           SKIP EYECATCHER\nMODID    DC    CL8'DISDDSCT'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDDDSCT,R13\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n         USING DSECT_DSECT,R4\n         USING LABEL_DSECT,R5\n         USING EQU_DSECT,R6\n         ST    R1,DXD_FIRST_DSECT\n         ST    R1,DXD_FIRST_ON_DISPLAY\n         LR    R4,R1                             SET DSECT BASE\n         MVI   DXD_LAST_TYPE,$TYPE_DSECT\n         SR    R5,R5                             NO LABEL SO FAR\n         SR    R6,R6                             NO EQU SO FAR\nMAIN0010 DS    0H\n         ITRACE ID=BUILD\n         L     R0,COMM_VDATA_ADDR\n         L     R1,COMM_VDATA_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                            INITIALIZE VDATA\n         L     R8,COMM_VDATA_ADDR\n         L     R7,SPF_VDEPTH\n         CLI   DXD_LAST_TYPE,$TYPE_DSECT         DSECT?\n         BE    MAIN0020                          YES\n         CLI   DXD_LAST_TYPE,$TYPE_LABEL         LABEL?\n         BE    MAIN0040\n         CLI   DXD_LAST_TYPE,$TYPE_EQU           EQUATE?\n         BE    MAIN0060\n         DC    H'0'\nMAIN0020 DS    0H\n         ST    R4,DXD_LAST_DSECT\n         MVI   DXD_LAST_TYPE,$TYPE_DSECT         LAST ITEM IS A DSECT\n         MVC   0(MSG01_L,R8),MSG01\n         MVC   MSG01_NAME-MSG01(L'MSG01_NAME,R8),DSECT_NAME\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0030\n         B     MAIN0200\nMAIN0030 DS    0H\n         ICM   R5,15,DSECT_LABEL_NEXT            FIRST LABEL IN DSECT\n         BNZ   MAIN0050\nMAIN0040 DS    0H\n         ST    R5,DXD_LAST_LABEL\n         MVI   DXD_LAST_TYPE,$TYPE_LABEL         LAST ITEM IS A LABEL\n         MVC   0(MSG02_L,R8),MSG02\n         MVC   MSG02_NAME-MSG02(L'MSG02_NAME,R8),LABEL_NAME\n         UNPK  WORK_DISP(9),LABEL_DISP(5)        UNPACK DISP\n         MVC   MSG02_DISP-MSG02(L'MSG02_DISP,R8),WORK_DISP\n         TR    MSG02_DISP-MSG02(L'MSG02_DISP,R8),COMM_HEXCHAR\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0050\n         B     MAIN0200                          DISPLAY\nMAIN0050 DS    0H\n         ICM   R6,15,LABEL_EQU_NEXT              FIRST EQU\n         BZ    MAIN0080\nMAIN0060 DS    0H\n         ST    R6,DXD_LAST_EQU\n         MVI   DXD_LAST_TYPE,$TYPE_EQU           LAST ITEM IS AN EQU\n         MVC   0(MSG03_L,R8),MSG03\n         MVC   MSG03_NAME-MSG03(L'MSG03_NAME,R8),EQU_LABEL\n         UNPK  WORK_DISP(3),EQU_VALUE(2)         UNPACK DISP\n         MVC   MSG03_VALUE-MSG03(L'MSG03_VALUE,R8),WORK_DISP\n         TR    MSG03_VALUE-MSG03(L'MSG03_VALUE,R8),COMM_HEXCHAR\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0070\n         B     MAIN0200                          DISPLAY\nMAIN0070 DS    0H\n         ICM   R6,15,EQU_NEXT                    ANOTHER EQU?\n         BNZ   MAIN0060                          YES\nMAIN0080 DS    0H\n         ICM   R5,15,LABEL_NEXT                  ANOTHER LABEL\n         BNZ   MAIN0040                          YES\nMAIN0090 DS    0H\n         ICM   R4,15,DSECT_NEXT                  ANOTHER DSECT?\n         BNZ   MAIN0020                          YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_SPF_PANEL,PANEL_NAME         SET PANEL NAME\n         L     R15,V_DISDISP                     DISP ENTRY POINT\n         BALR  R14,R15                           DISPLAY\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15,                                             +\n               DATA2=SPF_ZVERB\n         LTR   R15,R15                           RC = 0?\n         BNZ   EXIT0000                          NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CLI   SPF_ZVERB,C'B'                    BOTTOM?\n         BE    MAIN0210\n         CLI   SPF_ZVERB,C'D'                    DOWN?\n         BE    MAIN0270\n         CLI   SPF_ZVERB,C'T'                    TOP?\n         BE    MAIN0280\n         CLI   SPF_ZVERB,C'U'                    UP?\n         BE    MAIN0290\n         B     MAIN0200\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0210 DS    0H\n         ITRACE ID=BOTTOM\n         MVI   DXD_LAST_TYPE,$TYPE_DSECT         ASSUME DSECT\n         ICM   R4,15,DXD_FIRST_DSECT             FIRST DSECT\nMAIN0220 DS    0H\n         ICM   R1,15,DSECT_NEXT                  ANOTHER DSECT?\n         BZ    MAIN0230                          NO\n         LR    R4,R1                             COPY DSECT ADDR\n         B     MAIN0220\nMAIN0230 DS    0H\n         ICM   R5,15,DSECT_LABEL_NEXT            FIRST LABEL\n         BZ    MAIN0010                          NO LABELS\n         MVI   DXD_LAST_TYPE,$TYPE_LABEL         SET TYPE\nMAIN0240 DS    0H\n         ICM   R1,15,LABEL_NEXT                  ANOTHER LABEL?\n         BZ    MAIN0250                          NO\n         LR    R5,R1                             COPY LABEL ADDR\n         B     MAIN0240\nMAIN0250 DS    0H\n         ICM   R6,15,LABEL_EQU_NEXT              FIRST EQU FOR LABEL\n         BZ    MAIN0010                          NO EQU'S\n         MVI   DXD_LAST_TYPE,$TYPE_EQU           SET TYPE\nMAIN0260 DS    0H\n         ICM   R1,15,EQU_NEXT                    ANOTHER EQU?\n         BZ    MAIN0010                          NO\n         LR    R6,R1                             COPY EQU ADDR\n         B     MAIN0260\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0270 DS    0H\n         ITRACE ID=DOWN\n         CLI   SPF_ZSCROLLA,C'M'                 MAX?\n         BE    MAIN0210                          YES\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0280 DS    0H\n         ITRACE ID=TOP\n         L     R4,DXD_FIRST_DSECT                FIRST DSECT\n         MVI   DXD_LAST_TYPE,$TYPE_DSECT         SET TYPE\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0290 DS    0H\n         ITRACE ID=UP\n         B     MAIN0280\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0400 DS    0H\n         ITRACE ID=NO_DSECT\n         MVC   SPF_MSG_3(MSG04_L),MSG04\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDEBUG000 DS    0H\n         L     R15,V_DISDEBUG\n         BALR  R14,R15\n         BR    R10\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670\n         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680\n         LR    R15,R2                            SET RC\n         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680\n         BR    R14                               RETURN TO CALLER       ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC   Q(DXDDDSCT)\n\nPANEL_NAME        DC   CL8'DISDDSCT'\n\nMSG01             DS   0C\nMSG01_ATTR        DC   AL1($ATTR_NORMAL)\nMSG01_SELECT      DC   C' '\n                  DC   AL1($ATTR_HIGH)\n                  DC   C'DSECT '\n                  DC   AL1($ATTR_HIGH_YELLOW)\nMSG01_NAME        DC   CL8' '\nMSG01_L           EQU  *-MSG01\n\nMSG02             DS   0C\nMSG02_ATTR        DC   AL1($ATTR_NORMAL)\nMSG02_SELECT      DC   C' '\n                  DC   AL1($ATTR_HIGH)\n                  DC   C' LABEL'\n                  DC   Al1($ATTR_HIGH_TURQUOISE)\nMSG02_DISP        DC   CL8' '\n                  DC   C' '\nMSG02_NAME        DC   CL60' '\nMSG02_L           EQU  *-MSG02\n\nMSG03             DS   0C\nMSG03_ATTR        DC   AL1($ATTR_NORMAL)\nMSG03_SELECT      DC   C' '\n                  DC   AL1($ATTR_HIGH)\n                  DC   C'  EQU '\n                  DC   AL1($ATTR_HIGH_GREEN)\nMSG03_VALUE       DC   CL2' '\n                  DC   CL7' '\nMSG03_NAME        DC   CL60' '\nMSG03_L           EQU  *-MSG03\n\nMSG04             DS   0C\n                  DC   C'No DSECTs have been defined'\nMSG04_L           EQU  *-MSG04\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDDDSCT              DSECT\n                      DS  18F\nDXD_CSECT             DS  CL8\n\nDXD_FIRST_DSECT       DS  A              FIRST DSECT ON CHAIN\nDXD_FIRST_ON_DISPLAY  DS  A              FIRST BLOCK ON DISPLAY\nDXD_LAST_DSECT        DS  A              LAST DSECT DISPLAYED\nDXD_LAST_LABEL        DS  A              LAST LABEL DISPLAYED\nDXD_LAST_EQU          DS  A              LAST EQU DISPLAYED\n\nDXD_LAST_TYPE         DS  X              TYPE OF LAST BLOCK DISPLAYED\n$TYPE_DSECT           EQU C'D'\n$TYPE_LABEL           EQU C'L'\n$TYPE_EQU             EQU C'E'\n\nWORK_DISP             DS  CL9\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              DISCOMM TYPE=DSECT\n              DISSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    DISASMDA\n\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n\n              COPY    ATTRS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    REGEQU\n              END     DISDDSCT\n./ ADD NAME=DISDEBUG 0102-09119-09198-1545-00939-00937-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISDEBUG                                             *\n*                                                                    *\n*  Function:                                                         *\n*   If DISDEBUG DD is allocated, many internal fields and data       *\n*   chains will be printed for trouble shooting.                     *\n*                                                                    *\n*   There are two \"functions\".  Normal function is to print the      *\n*   internal fields and run the internal data chains.  The secondary *\n*   function is to print the assembler output for module DISASSEM.   *\n*                                                                    *\n*   The older assemblers only allowed labels (symbolic names) to     *\n*   be 8 characters in length.  The high-level assembler allows      *\n*   names up to 63 characters in length.  For readability, when a    *\n*   control block contains a label, the label will be the last item  *\n*   printed on the line.  If a control block contains two labels,    *\n*   the data will be printed on two lines.                           *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*   NOTE:  Several fields are copied to a work field before          *\n*          \"unpacking\" them for printing.  When \"unpacking\" the      *\n*          field, 1 more byte than printed is unpacked.  When the    *\n*          field is the last field in the data area, an S0C4 abend   *\n*          can occur.  Copying the field before unpacking was to     *\n*          prevent these S0C4 abends.  If any data area is modified  *\n*          and some other field is added to the end of the area,     *\n*          beware that if it is unpacked for printing it may need    *\n*          to be copied before unpacking.                            *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*   Change due to high-level assembler:                              *\n*                                                                    *\n*   The older assemblers only allowed labels (symbolic names) to     *\n*   be 8 characters in length.  The high-level assembler allows      *\n*   names up to 63 characters in length.  For readability, when a    *\n*   control block contains a label, the label will be the last item  *\n*   printed on the line.  If a control block contains two labels,    *\n*   the data will be printed on two lines.                           *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISDEBUG CSECT\nDISDEBUG AMODE 31\nDISDEBUG RMODE ANY\n         USING DISCOMM,R12\n         USING DISDEBUG,R11,R10\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R11,R15                     SET BASE REG\n         B     DBUG0000                    SKIP EYECATCHER\nMODID    DC    CL8'DISDEBUG'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nDBUG0000 DS    0H\n         LA    R10,2048(,R11)\n         LA    R10,2048(,R10)\n         L     R15,COMM_DXD_ADDRESS        WORK AREA ADDRESS\n         A     R15,DXD_START\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                     SET SAVE AREA ADDRESS\n         USING DXDDEBUG,R13\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R9,                                              +\n               DATA2=COMM_DEBUG_CMD\n         CLI   COMM_RUN_MODE,$COMM_RUN_TSO TSO ENVIRONMENT?\n         BE    EXIT0000                    YES\n         TM    COMM_DDS,$DISDEBUG_DD       DISDEBUG PRESENT?\n         BNO   DBUG0400                    NO\n         OC    DXD_CALL,DXD_CALL           INITIALIZED?\n         BNZ   INIT0010                    YES\n         MVI   PRINT_CC,C' '\n         ZAP   DXD_CALL,P0                 INITIALIZE CALL NBR\nINIT0010 DS    0H\n         CLI   COMM_DEBUG_CMD,$DEBUG_PRINT PRINT?\n         BE    DBUG0370                    YES\n         AP    DXD_CALL,P1                 ADD TO CALL NBR\n         MVC   COMM_DEBUG_IO(DEBUG_HEADING_L),DEBUG_HEADING\n         ED    COMM_DEBUG_IO+(HEADING_CALL-DEBUG_HEADING)(4),DXD_CALL\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\n         CLI   COMM_DEBUG_CMD,$DEBUG_HEAD  HEADING ONLY?\n         BE    EXIT0000                    YES\n* ------------------------------------------------------------------- *\n*             PRINT TRACE TABLE CONTROL                               *\n* ------------------------------------------------------------------- *\nDBUG0020 DS    0H\n         PUT   DISDEBUG_DCB,COMM_BLANKS\n         MVC   COMM_DEBUG_IO(PR_TRACE_L),PR_TRACE\nP        USING PR_TRACE,COMM_DEBUG_IO\n         UNPK  P.PR_TRACE_1ST(9),COMM_TRACE_1STX(5)\n         TR    P.PR_TRACE_1ST,COMM_HEXCHAR\n         MVI   P.PR_TRACE_1ST+8,C' '\n         UNPK  P.PR_TRACE_LAST(9),COMM_TRACE_LAST(5)\n         TR    P.PR_TRACE_LAST,COMM_HEXCHAR\n         MVI   P.PR_TRACE_LAST+8,C' '\n         UNPK  P.PR_TRACE_CURRENT(9),COMM_TRACE_CURRENT(5)\n         TR    P.PR_TRACE_CURRENT,COMM_HEXCHAR\n         MVI   P.PR_TRACE_CURRENT+8,C' '\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\n         DROP  P\n* ------------------------------------------------------------------- *\n*             CHASE ESD CHAIN                                         *\n* ------------------------------------------------------------------- *\nDBUG0030 DS    0H\n         ITRACE ID=ESDCHAIN\n         ICM   R3,15,COMM_ESD_NEXT\n         USING ESD_DSECT,R3\n         BZ    DBUG0050\n         PUT   DISDEBUG_DCB,COMM_BLANKS\n         MVC   COMM_DEBUG_IO(ESD_HEADING_L),ESD_HEADING\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\nDBUG0040 DS    0H\n         ITRACE ID=ESDENTRY\n         MVC   COMM_DEBUG_IO(PR_ESD_L),PR_ESD\nP        USING PR_ESD,COMM_DEBUG_IO\n         ST    R3,COMM_DWORD\n         UNPK  P.PR_ESD_BLOCK_ADDR(9),COMM_DWORD(5)\n         TR    P.PR_ESD_BLOCK_ADDR,COMM_HEXCHAR\n         MVI   P.PR_ESD_BLOCK_ADDR+8,C' '\n         UNPK  P.PR_ESD_PREV(9),ESD_PREV(5)\n         TR    P.PR_ESD_PREV,COMM_HEXCHAR\n         MVI   P.PR_ESD_PREV+8,C' '\n         UNPK  P.PR_ESD_NEXT(9),ESD_NEXT(5)\n         TR    P.PR_ESD_NEXT,COMM_HEXCHAR\n         MVI   P.PR_ESD_NEXT+8,C' '\n         MVC   P.PR_ESD_NAME,ESD_NAME\n         MVC   P.PR_ESD_RESIDENT,ESD_RESIDENT\n         MVC   P.PR_ESD_TARGET,ESD_TARGET\n         MVC   P.PR_ESD_TYPE,ESD_TYPE\n         MVC   P.PR_ESD_TYPE_QUAL,ESD_TYPE_QUAL\n         MVC   DXD_WORK(L'ESD_LENGTH),ESD_LENGTH\n         UNPK  P.PR_ESD_LENGTH(7),DXD_WORK(4)\n         TR    P.PR_ESD_LENGTH,COMM_HEXCHAR\n         MVI   P.PR_ESD_LENGTH+6,C' '\n         UNPK  P.PR_ESD_ELEM_OFFSET(9),ESD_ELEM_OFFSET(5)\n         TR    P.PR_ESD_ELEM_OFFSET,COMM_HEXCHAR\n         MVI   P.PR_ESD_ELEM_OFFSET+8,C' '\n         UNPK  P.PR_ESD_CLASS_OFFSET(9),ESD_CLASS_OFFSET(5)\n         TR    P.PR_ESD_CLASS_OFFSET,COMM_HEXCHAR\n         MVI   P.PR_ESD_CLASS_OFFSET+8,C' '\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\n         ICM   R3,15,ESD_NEXT\n         BNZ   DBUG0040\n         DROP  P\n* ------------------------------------------------------------------- *\n*             CHASE USING CHAIN                                       *\n* ------------------------------------------------------------------- *\nDBUG0050 DS    0H\n         ITRACE ID=USNGCHN\n         ICM   R3,15,COMM_USING_NEXT          FIRST USING ENTRY\n         USING USING_DSECT,R3                 DEFINE BASE\n         BZ    DBUG0090                       NO USING ENTRIES\n         PUT   DISDEBUG_DCB,COMM_BLANKS\n         MVC   COMM_DEBUG_IO(USING_HEADING_L),USING_HEADING\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\nDBUG0060 DS    0H\n         MVC   COMM_DEBUG_IO(PR_USING_L),PR_USING\nP        USING PR_USING,COMM_DEBUG_IO\n         ITRACE ID=USNGNTRY\n         ST    R3,COMM_DWORD\n         UNPK  P.PR_USING_BLOCK_ADDR(9),COMM_DWORD(5)\n         TR    P.PR_USING_BLOCK_ADDR,COMM_HEXCHAR\n         MVI   P.PR_USING_BLOCK_ADDR+8,C' '\n         UNPK  P.PR_USING_PREV(9),USING_PREV(5)\n         TR    P.PR_USING_PREV,COMM_HEXCHAR\n         MVI   P.PR_USING_PREV+8,C' '\n         UNPK  P.PR_USING_NEXT(9),USING_NEXT(5)\n         TR    P.PR_USING_NEXT,COMM_HEXCHAR\n         MVI   P.PR_USING_NEXT+8,C' '\n         MVC   P.PR_USING_NAME,USING_DSECT_NAME\n         MVC   P.PR_USING_REGISTER,USING_CHAR_REGISTER\n         UNPK  P.PR_USING_FLAG(3),USING_FLAG(2)\n         TR    P.PR_USING_FLAG,COMM_HEXCHAR\n         MVI   P.PR_USING_FLAG+2,C' '\n         UNPK  P.PR_USING_BEGIN(9),USING_BEGIN(5)\n         TR    P.PR_USING_BEGIN,COMM_HEXCHAR\n         MVI   P.PR_USING_BEGIN+8,C' '\n         UNPK  P.PR_USING_DISP(9),USING_DISP(5)\n         TR    P.PR_USING_DISP,COMM_HEXCHAR\n         MVI   P.PR_USING_DISP+8,C' '\n         MVC   DXD_WORK(L'USING_END),USING_END\n         UNPK  P.PR_USING_END(9),DXD_WORK(5)\n         TR    P.PR_USING_END,COMM_HEXCHAR\n         MVI   P.PR_USING_END+8,C' '\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\n         CLC   USING_DSECT_LABEL,COMM_BLANKS\n         BE    DBUG0070\n         MVC   P.PR_USING_NAME,USING_DSECT_LABEL\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\nDBUG0070 DS    0H\n         ICM   R3,15,USING_NEXT\n         BNZ   DBUG0060\n         DROP  P\n* ------------------------------------------------------------------- *\n*             CHASE DSECT CHAIN                                       *\n* ------------------------------------------------------------------- *\nDBUG0090 DS    0H\n         ITRACE ID=DSCTCHN\n         ICM   R3,15,COMM_DSECT_NEXT          FIRST DSECT ENTRY\n         USING DSECT_DSECT,R3                 DEFINE BASE\n         BZ    DBUG0120                       NO DSECT ENTRIES\n         PUT   DISDEBUG_DCB,COMM_BLANKS\n         MVC   COMM_DEBUG_IO(DSECT_HEADING_L),DSECT_HEADING\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\nDBUG0100 DS    0H\n         ITRACE ID=DSCTNTRY\n         MVC   COMM_DEBUG_IO(PR_DSECT_L),PR_DSECT\nP        USING PR_DSECT,COMM_DEBUG_IO\n         ST    R3,COMM_DWORD\n         UNPK  P.PR_DSECT_BLOCK_ADDR(9),DSECT_NEXT(5)\n         TR    P.PR_DSECT_BLOCK_ADDR,COMM_HEXCHAR\n         MVI   P.PR_DSECT_BLOCK_ADDR+8,C' '\n         UNPK  P.PR_DSECT_PREV(9),DSECT_PREV(5)\n         TR    P.PR_DSECT_PREV,COMM_HEXCHAR\n         MVI   P.PR_DSECT_PREV+8,C' '\n         UNPK  P.PR_DSECT_NEXT(9),DSECT_NEXT(5)\n         TR    P.PR_DSECT_NEXT,COMM_HEXCHAR\n         MVI   P.PR_DSECT_NEXT+8,C' '\n         MVC   P.PR_DSECT_NAME,DSECT_NAME\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\n         ICM   R4,15,DSECT_LABEL_NEXT\n         BZ    DBUG0110\n         BAL   R8,DBUG0320\nDBUG0110 DS    0H\n         ICM   R3,15,DSECT_NEXT               NEXT DSECT\n         BNZ   DBUG0100                       LOOP\n         DROP  P\n* ------------------------------------------------------------------- *\n*             CHASE BASE CHAIN                                        *\n* ------------------------------------------------------------------- *\nDBUG0120 DS    0H\n         ITRACE ID=BASECHN\n         ICM   R3,15,COMM_BASE_NEXT           FIRST BASE ENTRY\n         USING BASE_DSECT,R3                  DEFINE BASE\n         BZ    DBUG0140                       NO DSECT ENTRIES\n         PUT   DISDEBUG_DCB,COMM_BLANKS\n         MVC   COMM_DEBUG_IO(BASE_HEADING_L),BASE_HEADING\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\nDBUG0130 DS    0H\n         MVC   COMM_DEBUG_IO(PR_BASE_L),PR_BASE\nP        USING PR_BASE,COMM_DEBUG_IO\n         ITRACE ID=BASENTRY\n         ST    R3,COMM_DWORD\n         UNPK  P.PR_BASE_BLOCK_ADDR(9),COMM_DWORD(5)\n         TR    P.PR_BASE_BLOCK_ADDR,COMM_HEXCHAR\n         MVI   P.PR_BASE_BLOCK_ADDR+8,C' '\n         UNPK  P.PR_BASE_PREV(9),BASE_PREV(5)\n         TR    P.PR_BASE_PREV,COMM_HEXCHAR\n         MVI   P.PR_BASE_PREV+8,C' '\n         UNPK  P.PR_BASE_NEXT(9),BASE_NEXT(5)\n         TR    P.PR_BASE_NEXT,COMM_HEXCHAR\n         MVI   P.PR_BASE_NEXT+8,C' '\n         UNPK  P.PR_BASE_BEGIN(9),BASE_BEGIN(5)\n         TR    P.PR_BASE_BEGIN,COMM_HEXCHAR\n         MVI   P.PR_BASE_BEGIN+8,C'-'\n         UNPK  P.PR_BASE_END(9),BASE_END(5)\n         TR    P.PR_BASE_END,COMM_HEXCHAR\n         MVI   P.PR_BASE_END+8,C' '\n         UNPK  P.PR_BASE_DISP(9),BASE_DISP(5)\n         TR    P.PR_BASE_DISP,COMM_HEXCHAR\n         MVI   P.PR_BASE_DISP+8,C' '\n         MVC   P.PR_BASE_REGISTER,BASE_CHAR_REGISTER\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\n         ICM   R3,15,BASE_NEXT                NEXT BASE BLOCK\n         BNZ   DBUG0130                       LOOP\n         DROP  P\n* ------------------------------------------------------------------- *\n*             Chase AREA block chain                                  *\n* ------------------------------------------------------------------- *\nDBUG0140 DS    0H\n         ITRACE ID=RLD_AREA,                                           +\n               DATA1=COMM_RLD_AREA_NEXT\n         ICM   R3,15,COMM_RLD_AREA_NEXT       FIRST RLD ITEM\n         USING AREA_DSECT,R3                  DEFINE BASE\n         BZ    DBUG014A                       NO DSECT ENTRIES\n         PUT   DISDEBUG_DCB,COMM_BLANKS\n         MVC   COMM_DEBUG_IO(3),=C'RLD'\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO     PRINT RLD AREA HEADING\n         MVC   COMM_DEBUG_IO(RLD_HEADING_L),RLD_HEADING\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\n         BAL   R6,DBUG0150\nDBUG014A DS    0H\n         ITRACE ID=USER1,                                              +\n               DATA1=COMM_USER_AREA_NEXT_1\n         ICM   R3,15,COMM_USER_AREA_NEXT_1    FIRST USER AREA\n         BZ    DBUG014B                       NO DSECT ENTRIES\n         PUT   DISDEBUG_DCB,COMM_BLANKS\n         MVC   COMM_DEBUG_IO(4),=C'USER'\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO     PRINT USER AREA HEADING\n         MVC   COMM_DEBUG_IO(AREA1_HEADING_L),AREA1_HEADING\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\n         BAL   R6,DBUG0150\nDBUG014B DS    0H\n         ITRACE ID=USER2,                                              +\n               DATA1=COMM_USER_AREA_NEXT_2\n         ICM   R3,15,COMM_USER_AREA_NEXT_2    FIRST USER AREA\n         BZ    DBUG014C                       NO DSECT ENTRIES\n         PUT   DISDEBUG_DCB,COMM_BLANKS\n         MVC   COMM_DEBUG_IO(4),=C'USER'\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO     PRINT USER AREA HEADING\n         MVC   COMM_DEBUG_IO(AREA2_HEADING_L),AREA2_HEADING\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\n         BAL   R6,DBUG0150\nDBUG014C DS    0H\n         ITRACE ID=ALL_AREA,                                           +\n               DATA1=COMM_ALL_AREA_NEXT\n         ICM   R3,15,COMM_ALL_AREA_NEXT       FIRST DATA/INSTRUCTION\n         BZ    EXIT0000                       NO AREA(S)\n         PUT   DISDEBUG_DCB,COMM_BLANKS\n         MVC   COMM_DEBUG_IO(3),=C'ALL'\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO     PRINT USER AREA HEADING\n         MVC   COMM_DEBUG_IO(AREAALL_HEADING_L),AREAALL_HEADING\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\n         BAL   R6,DBUG0150\n         B     EXIT0000\nDBUG0150 DS    0H\n         ITRACE ID=AREA,                                               +\n               RDATA1=R3,                                              +\n               DATA2=AREA_TYPE\n         CLI   AREA_TYPE,X'FF'                DUMMY AREA?\n         BER   R6                             YES.. EXIT\n         MVC   COMM_DEBUG_IO(PR_AREA_L),PR_AREA\nP        USING PR_AREA,COMM_DEBUG_IO\n         ST    R3,COMM_DWORD\n         UNPK  P.PR_AREA_BLOCK_ADDR(9),COMM_DWORD(5)\n         TR    P.PR_AREA_BLOCK_ADDR,COMM_HEXCHAR\n         MVI   P.PR_AREA_BLOCK_ADDR+8,C' '\n         UNPK  P.PR_AREA_PREV(9),AREA_NEXT(5)\n         TR    P.PR_AREA_PREV,COMM_HEXCHAR\n         MVI   P.PR_AREA_PREV+8,C' '\n         UNPK  P.PR_AREA_NEXT(9),AREA_NEXT(5)\n         TR    P.PR_AREA_NEXT,COMM_HEXCHAR\n         MVI   P.PR_AREA_NEXT+8,C' '\n         UNPK  P.PR_AREA_BEGIN(9),AREA_BEGIN(5)\n         TR    P.PR_AREA_BEGIN,COMM_HEXCHAR\n         MVI   P.PR_AREA_BEGIN+8,C' '\n         UNPK  P.PR_AREA_END(9),AREA_END(5)\n         TR    P.PR_AREA_END,COMM_HEXCHAR\n         MVI   P.PR_AREA_END+8,C' '\n         UNPK  P.PR_AREA_LENGTH(9),AREA_LENGTH(5)\n         TR    P.PR_AREA_LENGTH,COMM_HEXCHAR\n         MVI   P.PR_AREA_LENGTH+8,C' '\n         CLI   AREA_TYPE,$AREA_DATA           DATA AREA?\n         BNE   DBUG0220                       NO\n         MVC   P.PR_AREA_OPCODE,C_DATA\n         CLI   AREA_DATA_TYPE,$DATA_USER      USER DEFINED?\n         BE    DBUG0160                       YES\n         CLI   AREA_DATA_TYPE,$DATA_ACON      AD CON?\n         BE    DBUG0170                       YES\n         CLI   AREA_DATA_TYPE,$DATA_VCON      VCON?\n         BE    DBUG0180                       YES\n         CLI   AREA_DATA_TYPE,$DATA_INTERNAL  INTERNALLY DETECTED?\n         BE    DBUG0190                       YES\n         CLI   AREA_DATA_TYPE,$DATA_CXD       CXD?\n         BE    DBUG0200                       YES\n         CLI   AREA_DATA_TYPE,$DATA_Q         Q?\n         BE    DBUG0210                       YES\n         MVI   P.PR_AREA_DATA_TYPE,C'?'       UNKNOWN\n         B     DBUG0220\nDBUG0160 DS    0H\n         MVC   P.PR_AREA_DATA_TYPE,C_USER     USER DEFINED\n         B     DBUG0220\nDBUG0170 DS    0H\n         MVC   P.PR_AREA_DATA_TYPE,C_ADCON    AD CON\n         B     DBUG0220\nDBUG0180 DS    0H\n         MVC   P.PR_AREA_DATA_TYPE,C_VCON     AD CON\n         B     DBUG0220\nDBUG0190 DS    0H\n         MVC   P.PR_AREA_DATA_TYPE,C_INTERNAL INTERNALLY DETECTED\n         B     DBUG0220\nDBUG0200 DS    0H\n         MVC   P.PR_AREA_DATA_TYPE,C_CXD      CXD\n         B     DBUG0220\nDBUG0210 DS    0H\n         MVC   P.PR_AREA_DATA_TYPE,C_Q        Q\nDBUG0220 DS    0H\n         MVC   PR_AREA_RLD_NAME,AREA_RLD_NAME\n         ICM   R1,15,AREA_LABEL\n         BZ    DBUG0230\nL        USING LABEL_DSECT,R1\n         MVC   P.PR_AREA_LABEL,L.LABEL_NAME\nDBUG0230 DS    0H\n         ICM   R1,15,AREA_REF_LABEL1\n         BZ    DBUG0270\n         MVC   P.PR_AREA_REF_LABEL1,L.LABEL_NAME\n         OC    AREA_REF_DISP1,AREA_REF_DISP1\n         BZ    DBUG0270\n         LA    R2,P.PR_AREA_REF_LABEL1\nDBUG0250 DS    0H\n         CLI   0(R2),C' '\n         BE    DBUG0260\n         LA    R2,1(,R2)\n         B     DBUG0250\nDBUG0260 DS    0H\n         MVI   0(R2),C'+'\n         UNPK  1(5,R2),AREA_REF_DISP1+2(3)\n         TR    1(4,R2),COMM_HEXCHAR\n         MVI   5(R2),C' '\nDBUG0270 DS    0H\n         ICM   R1,15,AREA_REF_LABEL2\n         BZ    DBUG0300\n         MVC   P.PR_AREA_REF_LABEL2,L.LABEL_NAME\n         OC    AREA_REF_DISP2,AREA_REF_DISP2\n         BZ    DBUG0300\n         LA    R2,P.PR_AREA_REF_LABEL2\nDBUG0280 DS    0H\n         CLI   0(R2),C' '\n         BE    DBUG0290\n         LA    R2,1(,R2)\n         B     DBUG0280\nDBUG0290 DS    0H\n         MVI   0(R2),C'+'\n         UNPK  1(5,R2),AREA_REF_DISP2+2(3)\n         TR    1(4,R2),COMM_HEXCHAR\n         MVI   5(R2),C' '\nDBUG0300 DS    0H\n         ICM   R1,15,AREA_OPCODE                OPCODE TABLE ENTRY\n         USING OPCODE_DSECT,R1\n         BZ    DBUG0310\n         MVC   P.PR_AREA_OPCODE,OPCODE_MNEMONIC OPCODE MNEMONIC\nDBUG0310 DS    0H\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         ICM   R3,15,AREA_NEXT\n         BNZ   DBUG0150\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\n         BR    R6\n         DROP  P,R3\n* ------------------------------------------------------------------- *\n*             Chase LABEL chain for DSECTS                            *\n* ------------------------------------------------------------------- *\nDBUG0320 DS    0H\n         USING LABEL_DSECT,R4                 DEFINE BASE\n         PUT   DISDEBUG_DCB,COMM_BLANKS\n         MVC   COMM_DEBUG_IO(LABEL_HEADING_L),LABEL_HEADING\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\nDBUG0330 DS    0H\n         ITRACE ID=LABLNTRY,                                           +\n               RDATA1=R4\n         MVC   COMM_DEBUG_IO(PR_LABEL_L),PR_LABEL\nP        USING PR_LABEL,COMM_DEBUG_IO\n         ST    R4,COMM_DWORD\n         UNPK  P.PR_LABEL_BLOCK_ADDR(9),COMM_DWORD(5)\n         TR    P.PR_LABEL_BLOCK_ADDR,COMM_HEXCHAR\n         MVI   P.PR_LABEL_BLOCK_ADDR+8,C' '\n         UNPK  P.PR_LABEL_PREV(9),LABEL_PREV(5)\n         TR    P.PR_LABEL_PREV,COMM_HEXCHAR\n         MVI   P.PR_LABEL_PREV+8,C' '\n         UNPK  P.PR_LABEL_NEXT(9),LABEL_NEXT(5)\n         TR    P.PR_LABEL_NEXT,COMM_HEXCHAR\n         MVI   P.PR_LABEL_NEXT+8,C' '\n         MVC   P.PR_LABEL_NAME,LABEL_NAME\n         MVC   P.PR_LABEL_TYPE,LABEL_TYPE\n         UNPK  P.PR_LABEL_DISP(9),LABEL_DISP(5)\n         TR    P.PR_LABEL_DISP,COMM_HEXCHAR\n         MVI   P.PR_LABEL_DISP+8,C' '\n         UNPK  P.PR_LABEL_EQU_PREV(9),LABEL_EQU_NEXT(5)\n         TR    P.PR_LABEL_EQU_PREV,COMM_HEXCHAR\n         MVI   P.PR_LABEL_EQU_PREV+8,C' '\n         UNPK  P.PR_LABEL_EQU_NEXT(9),LABEL_EQU_NEXT(5)\n         TR    P.PR_LABEL_EQU_NEXT,COMM_HEXCHAR\n         MVI   P.PR_LABEL_EQU_NEXT+8,C' '\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         ICM   R5,15,LABEL_EQU_NEXT        ANY EQU BLOCKS?\n         BZ    DBUG0340                    NO\n         BAL   R6,DBUG0350                 PROCESS EQU BLOCKS\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO(LABEL_HEADING_L),LABEL_HEADING\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\nDBUG0340 DS    0H\n         ICM   R4,15,LABEL_NEXT            NEXT LABL BLOCK\n         BNZ   DBUG0330                    LOOP\n         BR    R8                          RETURN\n         DROP  P\n* ------------------------------------------------------------------- *\n*             PROCESS EQU BLOCKS                                      *\n* ------------------------------------------------------------------- *\nDBUG0350 DS    0H\n         USING EQU_DSECT,R5\n         PUT   DISDEBUG_DCB,COMM_BLANKS\n         MVC   COMM_DEBUG_IO(EQU_HEADING_L),EQU_HEADING\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\nDBUG0360 DS    0H\n         ITRACE ID=EQU,                                                +\n               RDATA1=R5\n         MVC   COMM_DEBUG_IO(PR_EQU_L),PR_EQU\nP        USING PR_EQU,COMM_DEBUG_IO\n         ST    R5,COMM_DWORD\n         UNPK  P.PR_EQU_ADDR(9),COMM_DWORD(5)\n         TR    P.PR_EQU_ADDR,COMM_HEXCHAR\n         MVI   P.PR_EQU_ADDR+8,C' '\n         UNPK  P.PR_EQU_PREV(9),EQU_PREV(5)\n         TR    P.PR_EQU_PREV,COMM_HEXCHAR\n         MVI   P.PR_EQU_PREV+8,C' '\n         UNPK  P.PR_EQU_NEXT(9),EQU_NEXT(5)\n         TR    P.PR_EQU_NEXT,COMM_HEXCHAR\n         MVI   P.PR_EQU_NEXT+8,C' '\n         MVC   DXD_WORK(1),EQU_VALUE\n         UNPK  P.PR_EQU_VALUE(3),DXD_WORK(2)\n         TR    P.PR_EQU_VALUE,COMM_HEXCHAR\n         MVI   P.PR_EQU_VALUE+2,C' '\n         MVC   P.PR_EQU_LABEL,EQU_LABEL\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\n         ICM   R5,15,EQU_NEXT\n         BNZ   DBUG0360\n         BR    R6\n         DROP  P\n* ------------------------------------------------------------------- *\n*             PRINT DATA                                              *\n* ------------------------------------------------------------------- *\nDBUG0370 DS    0H\n         ITRACE ID=DBUG0370\n         PUT   DISDEBUG_DCB,COMM_DEBUG_IO\n         MVC   COMM_DEBUG_IO,COMM_BLANKS\n         B     EXIT0000                    EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDBUG0400 DS    0H\n         ITRACE ID=NO_DEBUG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                 RESTORE REGISTER 13          ASE01670\n         LM    R14,R12,12(R13)             RESTORE ALL OTHER REGISTERS  ASE01680\n         SR    R15,R15                     GIVE GOOD RETURN CODE        ASE01690\n         BR    R14                         RETURN TO CALLER             ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START           DC    Q(DXDDEBUG)\n\nC_DATA              DC    CL6'DATA'\nC_USER              DC    CL8'USER'\nC_ADCON             DC    CL8'ADCON'\nC_VCON              DC    CL8'VCON'\nC_INTERNAL          DC    CL8'INTERNAL'\nC_PSEUDO            DC    CL8'PSUEDO'\nC_CXD               DC    CL8'CXD'\nC_Q                 DC    CL8'Q'\nP0                  DC    P'0'\nP1                  DC    P'1'\nP65                 DC    P'65'\n\nDEBUG_HEADING       DS    0C\n                    DC    C'1'\n                    DC    C'Debug call '\nHEADING_CALL        DC    X'40202120'\n                    DC    CL20' '\n                    DC    C'Disassembler debug'\nDEBUG_HEADING_L     EQU   *-DEBUG_HEADING\n\nPR_TRACE            DS    0C\n                    DC    C'TRACE TABLE FIRST '\nPR_TRACE_1ST        DC    CL8' '\n                    DC    C'   LAST '\nPR_TRACE_LAST       DC    CL8' '\n                    DC    C'   CURRENT '\nPR_TRACE_CURRENT    DC    CL8' '\n                    DC    C' '\nPR_TRACE_L          EQU   *-PR_TRACE\n\nESD_HEADING         DS    0C\n                    DC    CL8'ESD'\n                    DC    C' '\n                    DC    CL8'  PREV  '\n                    DC    C' '\n                    DC    CL8'  NEXT  '\n                    DC    C' '\n                    DC    CL8'NAME    '\n                    DC    C' '\n                    DC    CL8'RESIDENT'\n                    DC    C' '\n                    DC    CL8'TARGET  '\n                    DC    C' '\n                    DC    C'TYPE'\n                    DC    C' '\n                    DC    C'QUALIFIER'\n                    DC    C' '\n                    DC    C'LENGTH'\n                    DC    C' '\n                    DC    C'ELEMENT OFFSET'\n                    DC    C' '\n                    DC    C'CLASS OFFSET'\nESD_HEADING_L       EQU   *-ESD_HEADING\n\nPR_ESD              DS    0C\nPR_ESD_BLOCK_ADDR   DC    CL8' '\n                    DC    C' '\nPR_ESD_PREV         DC    CL8' '\n                    DC    C' '\nPR_ESD_NEXT         DC    CL8' '\n                    DC    C' '\nPR_ESD_NAME         DC    CL8' '\n                    DC    c' '\nPR_ESD_RESIDENT     DC    CL8' '\n                    DC    C' '\nPR_ESD_TARGET       DC    CL8' '\n                    DC    C'   '\nPR_ESD_TYPE         DC    CL2' '\n                    DC    C'   '\nPR_ESD_TYPE_QUAL    DC    CL2' '\n                    DC    C'      '\nPR_ESD_LENGTH       DC    CL7' '\n                    DC    C'    '\nPR_ESD_ELEM_OFFSET  DC    CL8' '\n                    DC    C'     '\nPR_ESD_CLASS_OFFSET DC    CL8' '\nPR_ESD_L            EQU   *-PR_ESD\n\n\nRLD_HEADING         DS    0C\n                    DC    CL8'RLD'\n                    DC    C' '\n                    DC    CL8'  PREV  '\n                    DC    C' '\n                    DC    CL8'  NEXT  '\n                    DC    C' '\n                    DC    CL8' BEGIN  '\n                    DC    C' '\n                    DC    CL8'  END   '\n                    DC    C' '\n                    DC    CL8'  REF   '\n                    DC    C' '\n                    DC    C'TYPE'\n                    DC    C' '\n                    DC    C'LENGTH'\n                    DC    C' '\n                    DC    C'DIRECTION'\n                    DC    C' '\n                    DC    C'VCON/Q NAME'\nRLD_HEADING_L       EQU   *-RLD_HEADING\n\nUSING_HEADING       DS    0C\n                    DC    CL8'USING'\n                    DC    C' '\n                    DC    CL8'  PREV  '\n                    DC    C' '\n                    DC    CL8'  NEXT  '\n                    DC    C' '\n                    DC    C'  FLAGS'\n                    DC    C' REG    '\n                    DC    CL8'  DISP  '\n                    DC    CL8'   BEGIN'\n                    DC    C' '\n                    DC    CL8'    END'\n                    DC    CL3' '\n                    DC    C'DSECT/LABEL'\nUSING_HEADING_L     EQU   *-USING_HEADING\n\nPR_USING            DS    0C\nPR_USING_BLOCK_ADDR DC    CL8' '\n                    DC    C' '\nPR_USING_PREV       DC    CL8' '\n                    DC    C' '\nPR_USING_NEXT       DC    CL8' '\n                    DC    C'     '\nPR_USING_FLAG       DC    CL2' '\n                    DC    C'  '\nPR_USING_REGISTER   DC    CL3' '\n                    DC    C'     '\nPR_USING_DISP       DC    CL8' '\n                    DC    C' '\nPR_USING_BEGIN      DC    CL8' '\n                    DC    C' '\nPR_USING_END        DC    CL8' '\n                    DC    C' '\nPR_USING_NAME       DC    CL63' '\n                    DC    C' '\nPR_USING_L          EQU   *-PR_USING\n\nDSECT_HEADING       DS    0C\n                    DC    CL8'DSECT'\n                    DC    C' '\n                    DC    CL8'  PREV  '\n                    DC    C' '\n                    DC    CL8'  NEXT  '\n                    DC    C' '\n                    DC    CL63'DSECT NAME'\nDSECT_HEADING_L     EQU   *-DSECT_HEADING\n\nPR_DSECT            DS    0C\nPR_DSECT_BLOCK_ADDR DC    CL8' '\n                    DC    C' '\nPR_DSECT_PREV       DS    CL8' '\n                    DC    C' '\nPR_DSECT_NEXT       DS    CL8' '\n                    DC    C'  '\nPR_DSECT_NAME       DC    CL63' '\nPR_DSECT_L          EQU   *-PR_DSECT\n\nBASE_HEADING        DS    0C\n                    DC    CL8'BASE'\n                    DC    C' '\n                    DC    CL8'  PREV  '\n                    DC    C' '\n                    DC    CL8'  NEXT  '\n                    DC    C' REGISTER '\n                    DC    CL8' BEGIN '\n                    DC    C' '\n                    DC    CL8'  END   '\n                    DC    C' DISP REFERRED TO'\nBASE_HEADING_L      EQU   *-BASE_HEADING\n\nPR_BASE             DS    0C\nPR_BASE_BLOCK_ADDR  DS    CL8' '\n                    DC    C' '\nPR_BASE_PREV        DC    CL8' '\n                    DC    C' '\nPR_BASE_NEXT        DC    CL8' '\n                    DC    C'   '\nPR_BASE_REGISTER    DC    CL3' '\n                    DC    C'       '\nPR_BASE_BEGIN       DC    CL8' '\n                    DC    C' '\nPR_BASE_END         DC    CL8' '\n                    DC    C' '\nPR_BASE_DISP        DC    CL8' '\n                    DC    C' '\nPR_BASE_L           EQU   *-PR_BASE\n\nAREA1_HEADING       DS    0C\n                    DC    CL8'AREA1 '\n                    DC    C' '\n                    DC    CL8'  PREV  '\n                    DC    C' '\n                    DC    CL8'  NEXT  '\n                    DC    C' '\n                    DC    CL8' BEGIN  '\n                    DC    C' '\n                    DC    CL8'  END   '\n                    DC    C' '\n                    DC    CL8' LENGTH '\n                    DC    C' '\n                    DC    CL6'OPCODE'\n                    DC    C' '\n                    DC    C'DATATYPE'\n                    DC    C' '\n                    DC    C'LABEL   '\n                    DC    C' '\n                    DC    C'RLD NAME'\n                    DC    C' '\n                    DC    CL13'LABEL 1'\n                    DC    C' '\n                    DC    CL13'LABEL 2'\nAREA1_HEADING_L     EQU   *-AREA1_HEADING\n\nAREA2_HEADING       DS    0C\n                    DC    CL8'AREA2 '\n                    DC    C' '\n                    DC    CL8'  PREV  '\n                    DC    C' '\n                    DC    CL8'  NEXT  '\n                    DC    C' '\n                    DC    CL8' BEGIN  '\n                    DC    C' '\n                    DC    CL8'  END   '\n                    DC    C' '\n                    DC    CL8' LENGTH '\n                    DC    C' '\n                    DC    CL6'OPCODE'\n                    DC    C' '\n                    DC    C'DATATYPE'\n                    DC    C' '\n                    DC    C'LABEL   '\n                    DC    C' '\n                    DC    C'RLD NAME'\n                    DC    C' '\n                    DC    CL13'LABEL 1'\n                    DC    C' '\n                    DC    CL13'LABEL 2'\nAREA2_HEADING_L     EQU   *-AREA2_HEADING\n\nAREAALL_HEADING     DS    0C\n                    DC    CL8'AREA ALL'\n                    DC    C' '\n                    DC    CL8'  PREV  '\n                    DC    C' '\n                    DC    CL8'  NEXT  '\n                    DC    C' '\n                    DC    CL8' BEGIN  '\n                    DC    C' '\n                    DC    CL8'  END   '\n                    DC    C' '\n                    DC    CL8' LENGTH '\n                    DC    C' '\n                    DC    CL6'OPCODE'\n                    DC    C' '\n                    DC    C'DATATYPE'\n                    DC    C' '\n                    DC    C'LABEL   '\n                    DC    C' '\n                    DC    C'RLD NAME'\n                    DC    C' '\n                    DC    CL13'LABEL 1'\n                    DC    C' '\n                    DC    CL13'LABEL 2'\nAREAALL_HEADING_L   EQU   *-AREAALL_HEADING\n\nPR_AREA             DS    0C\nPR_AREA_BLOCK_ADDR  DC    CL8' '\n                    DC    C' '\nPR_AREA_PREV        DC    CL8' '\n                    DC    C' '\nPR_AREA_NEXT        DC    CL8' '\n                    DC    C' '\nPR_AREA_BEGIN       DC    CL8' '\n                    DC    C' '\nPR_AREA_END         DC    CL8' '\n                    DC    C' '\nPR_AREA_LENGTH      DC    CL8' '\n                    DC    C' '\nPR_AREA_OPCODE      DC    CL6' '\n                    DC    C' '\nPR_AREA_DATA_TYPE   DC    CL8' '\n                    DC    C' '\nPR_AREA_LABEL       DC    CL8' '\n                    DC    C' '\nPR_AREA_RLD_NAME    DC    CL8' '\n                    DC    C' '\nPR_AREA_REF_LABEL1  DC    CL20' '\nPR_AREA_PLUS1       DC    C' '\nPR_AREA_REF_DISP1   DC    CL4' '\n                    DC    C' '\nPR_AREA_REF_LABEL2  DC    CL20' '\nPR_AREA_PLUS2       DC    C' '\nPR_AREA_REF_DISP2   DC    CL4' '\n                    DC    C' '\nPR_AREA_L           EQU   *-PR_AREA\n\nLABEL_HEADING       DS    0C\n                    DC    CL2' '\n                    DC    CL8'LABEL'\n                    DC    C' '\n                    DC    CL8'  PREV '\n                    DC    C' '\n                    DC    CL8'  NEXT '\n                    DC    C'   DISP  '\n                    DC    C' TYPE  '\n                    DC    C' EQUATE'\n                    DC    CL15' '\n                    DC    CL63'NAME'\nLABEL_HEADING_L     EQU   *-LABEL_HEADING\n\nPR_LABEL            DS    0C\n                    DC    CL2' '\nPR_LABEL_BLOCK_ADDR DC    CL8' '\n                    DC    C' '\nPR_LABEL_PREV       DC    CL8' '\n                    DC    C' '\nPR_LABEL_NEXT       DC    CL8' '\n                    DC    C' '\nPR_LABEL_DISP       DC    CL8' '\n                    DC    C'   '\nPR_LABEL_TYPE       DC    C' '\n                    DC    C'    '\nPR_LABEL_EQU_PREV   DC    CL8' '\n                    DC    C'    '\nPR_LABEL_EQU_NEXT   DC    CL8' '\n                    DC    C' '\nPR_LABEL_NAME       DC    CL63' '\n                    DC    C' '\nPR_LABEL_L          EQU   *-PR_LABEL\n\nEQU_HEADING         DS    0C\n                    DC    CL4' '\n                    DC    CL8'EQU'\n                    DC    C' '\n                    DC    CL8'  PREV  '\n                    DC    C' '\n                    DC    CL8'  NEXT  '\n                    DC    C' VALUE '\n                    DC    C'LABEL'\nEQU_HEADING_L       EQU   *-EQU_HEADING\n\nPR_EQU              DS    0C\n                    DC    CL4' '\nPR_EQU_ADDR         DC    CL8' '\n                    DC    C' '\nPR_EQU_PREV         DS    CL8' '\n                    DC    C' '\nPR_EQU_NEXT         DS    CL8' '\n                    DC    C'  '\nPR_EQU_VALUE        DC    CL2' '\n                    DC    C'   '\nPR_EQU_LABEL        DC    CL63' '\nPR_EQU_L            EQU   *-PR_EQU\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDDEBUG       DSECT\n               DS    18F\nDXD_CSECT      DS    CL8\nDXD_WORK       DS    XL8\n               DS    X\nDXD_CALL       DS    PL2\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               COPY     DISASMDA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               DISCOMM  TYPE=DSECT\n\n               IFGACB   AM=VSAM\nACB_L          EQU      *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               COPY     REGEQU\n               END      DISDEBUG\n./ ADD NAME=DISDINFO 0119-09008-09198-0838-00325-00298-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*   Determine data set type                                           *\n*                                                                     *\n*   If the VOLSER was not given, call catalog service using IGGCSI00. *\n*      If the data set is non-VSAM issue OBTAIN to read the FORMAT-1  *\n*      using the VOLSER returned by catalog services.                 *\n*                                                                     *\n*   If the VOLSER was given, issue OBTAIN to read the FORMAT-1 from   *\n*      the specified volume.                                          *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISDINFO CSECT\nDISDINFO AMODE  31\nDISDINFO RMODE  ANY\n         USING  DISDINFO,R15\n         USING  DISCOMM,R12\n         STM    R14,R12,12(R13)               SAVE REGISTERS\n         LR     R11,R15                       COPY BASE ADDRESS\n         B      INIT0000\nMODID    DC     CL8'DISDINFO'\n         DC     CL8'&SYSDATE'\n         DC     CL8'&SYSTIME'\nINIT0000 DS     0H\n         DROP   R15\n         USING  DISDINFO,R11\n         L      R15,COMM_DXD_ADDRESS          DXD AREA BASE ADDRESS\n         A      R15,DXD_START                 PLUS OFFSET\n         ST     R13,4(,R15)\n         ST     R15,8(,R13)\n         LR     R13,R15                       COPY DXD AREA ADDRESS\n         USING  DXDDINFO,R13                  DEFINE WORK AREA BASE\n         MVC    DXD_CSECT,MODID\n         ITRACE ID=ENTRY,                                              +\n               DATA1=COMM_DSINFO_DSN+00,                               +\n               DATA2=COMM_DSINFO_DSN+08\n         ITRACE ID=+,                                                  +\n               DATA1=COMM_DSINFO_DSN+16,                               +\n               DATA2=COMM_DSINFO_DSN+24\n         LA    R0,DXD_CSI_DATA_LENGTH\n         LA    R1,DXD_CSI_L\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                         INIT\n         LA    R1,COMM_DSINFO_ERROR_INFO\n         ST    R1,DXD_CSI_REASON_ADDRESS      SET ADDRESS\n         LA    R8,DXD_CSI_SELECTION           CATALOG SEARCH CRITERIA\n         ST    R8,DXD_CSI_SELECTION_ADDRESS   SET ADDRESS\n         USING CSIFIELD,R8\n         LA    R1,DXD_CSI_DATA_LENGTH         CSI AREA\n         ST    R1,DXD_CSI_DATA_ADDRESS        SET ADDRESS\n         MVC   DXD_CSI_DATA_LENGTH,CSI_DATA_LENGTH\n         MVC   CSIFILTK,COMM_DSINFO_DSN       COPY DATA SET NAME\n         MVC   CSICATNM,COMM_BLANKS           START WITH MASTER CATALOG\n         MVC   CSIRESNM,COMM_BLANKS           NOT RESUMING A SEARCH\n         MVC   CSIDTYPD,COMM_BLANKS           RETURN ALL ENTRY TYPES\n         MVI   CSICLDI,C'Y'                   RETURN DATA AND INDEX\n         MVI   CSIOPTNS,C'F'                  USE 4-BYTE LENGTHS\n         MVI   CSIS1CAT,C' '                  SEARCH ALL CATALOGS\n         MVI   CSIRESUM,C' '                  THIS IS INITIAL CALL\n         MVC   CSINUMEN,H1                    NUMBER OF FIELDS WANTED\n         MVC   CSIFLDNM,C_VOLSER              NAME OF FIELD\n         LOAD  EP=IGGCSI00                    LOAD THE CSI INTERFACE\n         LR    R15,R0                         COPY ENTRY POINT\n         LA    R1,DXD_CSI_PARMS               PARAMETER LIST\n         ITRACE ID=CALL_CSI,                                           +\n               RDATA1=R1,                                              +\n               RDATA2=R15\n         BALR  R14,R15                        CALL CATALOG SEARCH\n         LR    R2,R15                         SAVE RETURN CODE\n         DELETE EP=IGGCSI00                   DELETE IGGCSI00\n         ITRACE ID=CSI_RC,                                             +\n               RDATA1=R2,                                              +\n               DATA2=DXD_CSI_CATALOG_FLAG\n         LTR   R2,R2                          LOOKUP SUCCESSFUL?\n         BNZ   ERR0030                        NO\n         TM    DXD_CSI_CATALOG_FLAG,$NOT_CATALOGED\n         BO    ERR0020                        DATA SET NOT CATALOGED\nINFO0010 DS    0H\n         ITRACE ID=TYPE,                                               +\n               DATA1=DXD_CSI_ENTRY_TYPE,                               +\n               DATA2=DXD_VOLSERS\n         CLI   DXD_CSI_ENTRY_TYPE,C'A'        NONVSAM?\n         BE    INFO0060                       YES\n         CLI   DXD_CSI_ENTRY_TYPE,C'C'        VSAM?\n         BE    INFO0020                       YES\n         CLI   DXD_CSI_ENTRY_TYPE,C'D'        DATA COMPONENT?\n         BE    INFO0030                       YES\n         CLI   DXD_CSI_ENTRY_TYPE,C'H'        GDG MEMBER?\n         BE    INFO0040                       YES\n         CLI   DXD_CSI_ENTRY_TYPE,C'I'        INDEX COMPONENT?\n         BE    INFO0050                       YES\n         MVI   COMM_DATASET_TYPE,$DATASET_TYPE_OTHER\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        For VSAM do not try to OBTAIN the DSCB.  The DATA, INDEX,    *\n*        or other components may not have the same name as the        *\n*        CLUSTER.                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINFO0020 DS    0H\n         ITRACE ID=VSAM1\n         MVI   COMM_DATASET_TYPE,$DATASET_TYPE_VSAM\n         B     EXIT0000\nINFO0030 DS    0H\n         ITRACE ID=VSAMDATA\n         MVI   COMM_DATASET_TYPE,$DATASET_TYPE_DATA\n         B     INFO0070\nINFO0040 DS    0H\n         ITRACE ID=GDG\n         MVI   COMM_DATASET_TYPE,$DATASET_TYPE_GDG\n         B     INFO0070\nINFO0050 DS    0H\n         ITRACE ID=VSAMINDX\n         MVI   COMM_DATASET_TYPE,$DATASET_TYPE_INDEX\n         B     INFO0070\nINFO0060 DS    0H\n         ITRACE ID=NON_VSAM\n         MVI   COMM_DATASET_TYPE,$DATASET_TYPE_NONVSAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      If the VOLSER is all asterisks (******), change it to          *\n*      the SYSRES VOLSER.                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINFO0070 DS    0H\n         L     R14,CVTPTR                     ADDRESS OF THE CVT\n         USING CVT,R14                        DEFINE BASE\n         L     R15,CVTSYSAD                   SYSRES UCB'S ADDRESS\n         USING UCBOB,R15                      DEFINE BASE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     Sometime this probably should allow multiple VOLSERs.           *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CLC   DXD_VOLSERS(6),=C'******'\n         BNE   INFO0100\n         MVC   DXD_VOLSERS,UCBVOLI\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*     I would much rather use an IBM supplied macro to map the        *\n*     CAMLST or even better, see IBM re-code the OBTAIN macro         *\n*     with a MF=E/I/L type parameter to allow dynamic specification   *\n*     of parameters.  So far I haven't found any such mapping         *\n*     macro or member of SYS1.MACLIB or SYS1.MODGEN.                  *\n*                                                                     *\n*     So.. I'll copy a hard-coded CAMLST and over-store some of       *\n*     the data.                                                       *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINFO0100 DS    0H\n         CLI   COMM_DATASET_TYPE,$DATASET_TYPE_NONVSAM\n         BNE   EXIT0000                       NO\n         ITRACE ID=GET_DSCB,                                           +\n               DATA1=DXD_VOLSERS\n         MVC   DXD_CAMLST(CAMLST_L),CAMLST_I\n         LA    R1,COMM_DSINFO_DSN             DSN\n         ST    R1,DXD_CAMLST+4                SET ADDRESS\n         LA    R1,DXD_VOLSERS                 VOLSER\n         ST    R1,DXD_CAMLST+8                SET ADDRESS\n         LA    R1,DS1FMTID                    RETURNED INFO\n         ST    R1,DXD_CAMLST+12               SET ADDRESS\n         LA    R1,DXD_CAMLST                  CAMLST ADDRESS\n         ITRACE ID=OBTAIN,                                             +\n               RDATA1=R1\n         OBTAIN (R1)                          READ DSCB\n         ITRACE ID=OBTN_RC,                                            +\n               RDATA1=R15\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0010                        NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=DSORG,                                              +\n               DATA1=DS1DSORG\n         TM    DS1DSORG+0,DS1DSGPS            SEQUENTIAL?\n         BO    INFO0200                       YES\n         TM    DS1DSORG+0,DS1DSGDA            DIRECT ACCESS?\n         BO    INFO0200                       YES\n         TM    DS1DSORG+0,DS1DSGPO            PDS?\n         BO    INFO0210                       YES\n         B     EXIT0000\nINFO0200 DS    0H\n         ITRACE ID=PS\n         MVI   COMM_DATASET_TYPE,$DATASET_TYPE_PS\n         B     EXIT0000\nINFO0210 DS    0H\n         ITRACE ID=PO\n         MVI   COMM_DATASET_TYPE,$DATASET_TYPE_PDS\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         DC    H'0'\nERR0020  DS    0H\n         ITRACE ID=NOTCATLG\n         MVC   COMM_DSINFO_MSG(ERR01_L),ERR01\n         LA    R2,8\n         B     EXIT0000\nERR0030  DS    0H\n         ITRACE ID=CAT_ERR,                                            +\n               DATA1=COMM_DSINFO_ERROR_INFO\n         MVC   COMM_DSINFO_MSG(ERR02_L),ERR02\n         UNPK  COMM_DSINFO_MSG+(ERR02_INFO-ERR02)(9),COMM_DSINFO_ERROR_+\n               INFO(5)\n         TR    COMM_DSINFO_MSG+(ERR02_INFO-ERR02)(5),COMM_HEXCHAR\n         MVI   COMM_DSINFO_MSG+(ERR02_INFO-ERR02)+8,C' '\n         LA    R2,8\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT,                                               +\n               RDATA1=R2,                                              +\n               DATA2=COMM_DATASET_TYPE\n         L     R13,4(,R13)\n         L     R14,12(,R13)\n         LR    R15,R2\n         LM    R0,R12,20(R13)\n         BR    R14\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START            DC    Q(DXDDINFO)\nCSI_DATA_LENGTH      DC    A($CSI_DATA_LENGTH)\n\nCAMLST_I             CAMLST SEARCH,*,*,*\nCAMLST_L             EQU   *-CAMLST_I\n\nH1                   DC    H'1'\nC_VOLSER             DC    CL8'VOLSER'\n\nERR01                DC    C'Not cataloged'\nERR01_L              EQU   *-ERR01\n\nERR02                DC    C'Catalog info error '\nERR02_INFO           DC    CL8' '\n                     DC    C' '\nERR02_L              EQU   *-ERR02\n\n                     LTORG\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDDINFO                  DSECT\n                          COPY  DXDPREF\n\nDXD_CAMLST                DS    0F,(CAMLST_L)X\n\nDXD_CSI_PARMS             DS    0A\nDXD_CSI_REASON_ADDRESS    DS    A\nDXD_CSI_SELECTION_ADDRESS DS    A\nDXD_CSI_DATA_ADDRESS      DS    A\n\nDXD_CSI_SELECTION         DS    (CSIFIELD_L)X\n\n\nDXD_CSI_DATA_LENGTH       DS    F           LENGTH OF WORK AREA\nDXD_CSI_DATA_AREA         DS    0A,($CSI_DATA_LENGTH)X\n                          ORG   DXD_CSI_DATA_AREA\nDXD_CSI_REQUIRED_LENGTH   DS    F\nDXD_CSI_USED_LENGTH       DS    F           LENGTH USED\nDXD_CSI_FIELD_NAMES       DS    H           NUMBER OF FIELD NAMES + 1\n\nDXD_CSI_CATALOG_FLAG      DS    X\n$NOT_CATALOGED            EQU   X'40'       .. DATA SET NOT CATALOGED\n\nDXD_CSI_CATALOG_TYPE      DS    C           ALWAYS C'0'\nDXD_CSI_CATALOG_NAME      DS    CL44        CATALOG NAME\n                          DS    CL2         MODULE ID\n                          DS    X           REASON CODE\n                          DS    X           RETURN CODE\n\nDXD_CSI_ENTRY_FLAG        DS    X\nDXD_CSI_ENTRY_TYPE        DS    C\n*                               C'A'        .. NONVSAM\n*                               C'C'        .. CLUSTER\n*                               C'D'        .. DATA COMPONENT\n*                               C'H'        .. MEMBER OF A GDG\n*                               C'I'        .. INDEX COMPONENT\n*                               C'F'        .. HFS\n*                               C'T'        .. VTOC\nDXD_CSI_ENTRY_NAME        DS    CL44        ENTRY NAME (S/B DSN)\n                          DS    CL2         MODULE NAME\n                          DS    X           REASON CODE\n                          DS    X           RETURN CODE\n\n                          DS    XL2         TOTAL LENTH OF INFO\n                          DS    XL2         RESERVED\nDXD_CSI_VOLSER_LENGTH     DS    XL4         LENGTH OF FIELD S/B 6\nDXD_VOLSERS               DS    16CL6\n                          ORG\nDXD_CSI_L                 EQU   *-DXD_CSI_DATA_LENGTH\n\n                          IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                 CVT      DSECT=YES,LIST=NO\n\n                 IEFUCBOB PREFIX=YES,LIST=NO\n\n                 COPY     IGGCSINA\nCSIFIELD_L       EQU      *-CSIFIELD\n\n                 IFGACB   AM=VSAM\nACB_L            EQU      *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                 DISCOMM  TYPE=DSECT\n                 COPY     DISASMDA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n$CSI_DATA_LENGTH EQU      1024\n                 COPY     REGEQU\n                 END      DISDINFO\n./ ADD NAME=DISDIR   0101-09119-09198-0838-00445-00445-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISDIR                                               *\n*                                                                    *\n*  Function:                                                         *\n*                                                                    *\n*   Display the members of the LMOD library as a scrollable list     *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISDIR   CSECT\nDISDIR   AMODE 31\nDISDIR   RMODE ANY\n         USING DISDIR,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     MOD0000                           SKIP EYECATCHER\nMODID    DC    CL8'DISDIR'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDDIR,R13\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n         MVC   DXD_DESERV(DESERV_L),DESERV_I\n         LA    R1,DXD_CHAIN_PREV\n         ST    R1,DXD_CHAIN_LAST\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0000 DS    0H\n         ITRACE ID=GET_ALL\n         DESERV FUNC=GET_ALL,                 ALL DIRECTORY ENTRIES    +\n               AREAPTR=DXD_ADDR,              .. BUFFER FOR DATA       +\n               CONN_INTENT=NONE,              .. NO CONNECTION INTENT  +\n               DCB=DISMOD_DCB,                .. DCB                   +\n               RETCODE=DXD_RETURN_CODE,                                +\n               RSNCODE=DXD_REASON_CODE,                                +\n               MF=(E,DXD_DESERV,COMPLETE)\n         ITRACE ID=DE_RC,                                              +\n               DATA1=DXD_RETURN_CODE,                                  +\n               DATA2=DXD_REASON_CODE\n         OC    DXD_RETURN_CODE,DXD_RETURN_CODE\n         BNZ   ERR0010\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         L     R7,DXD_ADDR                       RETURNED DATA\n         USING DESB,R7\nMAIN0010 DS    0H\n         L     R6,DESB_COUNT                     NBR OF DESB'S\n         LA    R5,DESB_DATA                      FIRST SMDE\n         USING SMDE,R5\nMAIN0020 DS    0H\n         GETMAIN RU,                                                   +\n               LV=CHAIN_L,                                             +\n               LOC=ANY\n         LR    R4,R1                             COPY ADDRESS\n         USING CHAIN,R4\n         XC    CHAIN(CHAIN_L),CHAIN              INITIALIZE\n         L     R3,DXD_CHAIN_LAST                 LAST BLOCK GETMAINED\nLAST     USING CHAIN,R3\n         ST    R4,LAST.CHAIN_NEXT                CHAIN TO LAST BLOCK\n         ST    R3,CHAIN_PREV                     CHAIN PREV BLOCK\n         DROP  LAST\n         ST    R4,DXD_CHAIN_LAST                 SAVE LAST ON CHAIN\n         ITRACE ID=NEW,                                                +\n               RDATA1=R4,                                              +\n               DATA2=0(R3)\n         SR    R2,R2                             CLAR R2\n         ICM   R2,3,SMDE_NAME_OFF                NAME OFFSET\n         AR    R2,R5                             PLUS BASE\n         SR    R1,R1\n         ICM   R1,3,0(R2)                        LENGTH OF NAME\n         CH    R1,=Y(L'CHAIN_NAME)               TOO LONG?\n         BNH   MAIN0030                          NO\n         LH    R1,=Y(L'CHAIN_NAME)               LIMIT LENGTH\nMAIN0030 DS    0H\n         BCTR  R1,0\n         MVC   CHAIN_NAME,COMM_BLANKS            INITIALIZE NAME\n         EX    R1,NAME_MVC                       COPY NAME\n         MVC   CHAIN_TTR,SMDE_MLT                COPY TTR\n         SR    R14,R14\n         ICM   R14,3,SMDE_PMAR_OFF               OFFSET TO PMAR\n         AR    R14,R6                            PLUS BASE\n         USING PMAR,R14                          DEFINE BASE\n         MVC   CHAIN_ATR1,PMAR_ATR1\n         MVC   CHAIN_ATR2,PMAR_ATR2\n         MVC   CHAIN_ATR3,PMAR_ATR3\n         MVC   CHAIN_ATR4,PMAR_ATR4\n         MVC   CHAIN_ATR5,PMAR_ATR5\n         MVC   CHAIN_AC,PMAR_AC\n         MVC   CHAIN_STOR,PMAR_STOR\n         MVC   CHAIN_EPM,PMAR_EPM\n         MVC   CHAIN_EPA,PMAR_EPA\n         MVC   CHAIN_SSI,PMAR_SSI\n         ICM   R0,15,SMDE_LEN                    LENGTH OF THIS SMDE\n         AR    R5,R0                             NEXT SMDE\n         BCT   R6,MAIN0020                       LOOP\n* ------------------------------------------------------------------- *\n*        ALL ENTRIES IN THIS BLOCK PROCESSED.                         *\n*        FREEMAIN THIS BLOCK AND CONTINUE WITH NEXT BLOCK.            *\n* ------------------------------------------------------------------- *\n         ICM   R0,15,DESB_LEN                 DESB LENGTH\n         ICM   R0,8,DESB_SUBPOOL              INSERT SUBPOOL\n         LR    R1,R7                          COPY DESB ADDRESS\n         ICM   R7,15,DESB_NEXT                NEXT DESB\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=(0)\n         LTR   R7,R7                          ADDITIONAL DESB'S?\n         BNZ   MAIN0010                       YES\n         DROP  R7,R5\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        All data processed.                                          *\n*                                                                     *\n*        Display the data as a scrollable list                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ICM   R4,15,DXD_CHAIN_NEXT              FIRST CHAIN BLOCK\n         BZ    ERR0020                           NO DATA\n         XC    CHAIN_PREV,CHAIN_PREV             CLEAR PREV BLOCK ADDR\nMAIN0100 DS    0H\n         ITRACE ID=BUILD\n         L     R0,COMM_VDATA_ADDR                VDATA ADDRESS\n         L     R1,COMM_VDATA_SIZE                VDATA SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                            INITIALIZE VDATA\n         L     R8,COMM_VDATA_ADDR\n         USING DETAIL,R8\n         L     R7,SPF_VDEPTH                     SCREEN DEPTH\n         ST    R4,DXD_FIRST_DISPLAYED            SAVE FIRST DISPLAYED\n         XC    DXD_LINES_BUILT,DXD_LINES_BUILT\nMAIN0110 DS    0H\n         ST    R4,DXD_LAST_DISPLAYED             SAVE LAST DISPLAYED\n         MVI   DETAIL_ATTR_1,$ATTR_INPUT         SET ATTRIBUTE\n         MVI   DETAIL_SELECT,C' '                INITIALIZE SELECT\n         MVI   DETAIL_ATTR_2,$ATTR_HIGH_TURQUOISE\n         MVC   DETAIL_NAME,CHAIN_NAME            SET NAME\n         MVI   DETAIL_ATTR_3,$ATTR_NORMAL        SET ATTRIBUTE\n         UNPK  DETAIL_TTR(7),CHAIN_TTR(4)        UNPACK TTR\n         TR    DETAIL_TTR,COMM_HEXCHAR           TRANSLATE\n         MVI   DETAIL_TTR+6,C' '\n         TM    CHAIN_ATR1,PMAR_RENT              RE-ENTRANT?\n         BNO   MAIN0120                          NO\n         MVC   DETAIL_RENT,=C'RE'                INDICATE RE-ENTRANT\nMAIN0120 DS    0H\n         TM    CHAIN_ATR1,PMAR_REUS              RE-USABLE?\n         BNO   MAIN0130                          NO\n         MVC   DETAIL_REUS,=C'RU'                INDICATE REUSABLE\nMAIN0130 DS    0H\n         TM    CHAIN_ATR2,PMAR_REFR              REFRESHABLE?\n         BNO   MAIN0140                          NO\n         MVC   DETAIL_REFR,=C'RF'                INDICATE REFRESHABLE\nMAIN0140 DS    0H\n         MVC   DETAIL_RMODE,=C' 24'              ASSUME 24 BIT\n         TM    CHAIN_ATR4,PMAR_RMOD              31-BIT?\n         BNO   MAIN0150                          NO\n         MVC   DETAIL_RMODE,=C' 31'              INDICATE 31-BIT\nMAIN0150 DS    0H\n         TM    CHAIN_ATR5,PMAR_RMOD64            64-BIT?\n         BNO   MAIN0160                          NO\n         MVC   DETAIL_RMODE,=C' 64'              INDICATE 64-BIT\nMAIN0160 DS    0H\n         MVC   DETAIL_AMODE,=C' 24'              ASSUME 24 BIT\n         TM    CHAIN_ATR4,B'0011'                AMODE ANY?\n         BNO   MAIN0170                          NO\n         MVC   DETAIL_AMODE,=C'ANY'              INDICATE AMODE ANY\n         B     MAIN0190\nMAIN0170 DS    0H\n         TM    CHAIN_ATR4,B'0010'                31 BIT?\n         BNO   MAIN0180                          NO\n         MVC   DETAIL_AMODE,=C' 31'\n         B     MAIN0190\nMAIN0180 DS    0H\n         TM    CHAIN_ATR4,B'0001'                64 BIT?\n         BNO   MAIN0190\n         MVC   DETAIL_AMODE,=C' 64'              INDICATE 64 BIT\nMAIN0190 DS    0H\n         MVC   DETAIL_AC,CHAIN_AC                COPY AUTH CODE\n         OI    DETAIL_AC,X'F0'                   TRANSLATE\n         LA    R1,1\n         AH    R1,DXD_LINES_BUILT                PLUS TOTAL SO FAR\n         STH   R1,DXD_LINES_BUILT                UPDATE TOTAL\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0200\n         B     MAIN0300\nMAIN0200 DS    0H\n         ICM   R4,15,CHAIN_NEXT                  NEXT ON CHAIN\n         BNZ   MAIN0110                          LOOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Display member list                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=DISP\n         MVC   COMM_SPF_PANEL,DIS0002\n         L     R15,V_DISDISP                     COPY LIBRARY DSN\n         BALR  R14,R15                           DISPLAY\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15\n         LTR   R15,R15                           RC = ZERO?\n         BNZ   MAIN0500                          NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=ZVERB,                                              +\n               DATA1=SPF_ZVERB\n         CLI   SPF_ZVERB,C'B'                    BOTTOM?\n         BE    MAIN0340                          YES\n         CLI   SPF_ZVERB,C'D'                    DOWN?\n         BE    MAIN0360                          YES\n         CLI   SPF_ZVERB,C'T'                    TOP?\n         BE    MAIN0380                          YES\n         CLI   SPF_ZVERB,C'U'                    UP?\n         BE    MAIN0390                          YES\n* ------------------------------------------------------------------- *\n*        Check for line selection                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=SCAN\n         L     R8,COMM_VDATA_ADDR                VDATA ADDRES\n         LH    R7,DXD_LINES_BUILT                NBR OF LINES BUILT\nMAIN0310 DS    0H\n         CLI   DETAIL_SELECT,C' '                THIS MEMBER SELECTED?\n         BNE   MAIN0320                          YES\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0310                       LOOP\n         ITRACE ID=NO_SEL\n         L     R4,DXD_FIRST_DISPLAYED            START AT SAME POINT\n         B     MAIN0100\nMAIN0320 DS    0H\n         ITRACE ID=SELECTED,                                           +\n               DATA1=DETAIL_NAME\n         MVC   COMM_LMOD,DETAIL_NAME             SET LMOD NAME\n         MVC   SPF_LMOD,DETAIL_NAME              SET LMOD NAME\n         MVI   DXD_RC,0                          SET RC\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        Process scrolling                                            *\n* ------------------------------------------------------------------- *\nMAIN0340 DS    0H\n         ITRACE ID=BOTTOM\n         L     R4,DXD_CHAIN_LAST                 LAST ON CHAIN\n         L     R7,SPF_VDEPTH                     SCREEN DEPTH\n         BCTR  R7,0\nMAIN0350 DS    0H\n         OC    CHAIN_PREV,CHAIN_PREV             PREVIOUS BLOCK EXIST?\n         BZ    MAIN0100                          NO\n         ICM   R4,15,CHAIN_PREV                  PREV BLOCK ON CHAIN\n         BCT   R7,MAIN0350                       LOOP\n         B     MAIN0100\nMAIN0360 DS    0H\n         ITRACE ID=DOWN\n         CLI   SPF_ZSCROLLA,C'M'                 MAX (BOTTOM)?\n         BE    MAIN0340                          YES\n         L     R4,DXD_FIRST_DISPLAYED            FIRST DISPLAYED\n         L     R7,SPF_ZSCROLLN\nMAIN0370 DS    0H\n         OC    CHAIN_NEXT,CHAIN_NEXT             MORE ON CHAIN?\n         BZ    MAIN0100                          NO\n         ICM   R4,15,CHAIN_NEXT                  NEXT ON CHAIN\n         BCT   R7,MAIN0370                       LOOP\n         B     MAIN0100\nMAIN0380 DS    0H\n         ITRACE ID=TOP\n         L     R4,DXD_CHAIN_NEXT                 FIRST CHAIN BLOCK\n         B     MAIN0100                          BUILD DISPLAY\nMAIN0390 DS    0H\n         ITRACE ID=UP\n         CLI   SPF_ZSCROLLA,C'M'                 MAX (TOP)?\n         BE    MAIN0380                          YES\n         L     R4,DXD_FIRST_DISPLAYED            FIRST DISPLAYED\n         L     R7,SPF_ZSCROLLN\nMAIN0400 DS    0H\n         OC    CHAIN_PREV,CHAIN_PREV             MORE ON CHAIN?\n         BZ    MAIN0100                          NO\n         ICM   R4,15,CHAIN_PREV                  PREVIOUS BLOCK\n         BCT   R7,MAIN0400                       LOOP\n         B     MAIN0100\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0500 DS    0H\n         ITRACE ID=CLEANUP\n         MVI   DXD_RC,8                          SET RC\n         ICM   R4,15,DXD_CHAIN_NEXT              FIRST CHAIN BLOCK\n         BZ    EXIT0000                          EXIT\nMAIN0510 DS    0H\n         LR    R1,R4                             COPY ADDRESS\n         ICM   R4,15,CHAIN_NEXT                  NEXT ON CHAIN\n         ITRACE ID=FREE,                                               +\n               RDATA1=R1\n         FREEMAIN RU,                            FREEMAIN CHAIN BLOCK  +\n               A=(1),                                                  +\n               LV=CHAIN_L\n         LTR   R1,R4                             ANOTHER BLOCK?\n         BNZ   MAIN0510                          YES\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVI   COMM_MSG_ID,1\n         STC   R15,COMM_INFO_01\n         B     ERR0100\nERR0020  DS    0H\n         MVI   COMM_MSG_ID,2\nERR0100  DS    0H\n         MVC   COMM_MSG_CSECT,MODID\n         L     R15,V_DISMSG\n         BALR  R14,R15\n         MVC   SPF_MSG_1,COMM_MSG_1\n         MVC   SPF_MSG_2,COMM_MSG_2\n         MVC   SPF_MSG_3,COMM_MSG_3\n         MVC   SPF_MSG_4,COMM_MSG_4\n         MVC   SPF_MSG_5,COMM_MSG_5\n         MVC   COMM_SPF_PANEL,DIS0000\n         L     R15,V_DISDISP\n         BALR  R14,R15\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         SR    R15,R15                           CLEAR R15\n         IC    R15,DXD_RC                        SET RC\n         L     R13,4(,R13)                        RESTORE REGISTER 13   ASE01670\n         L     R14,12(,R13)                      RESTORE REGISTER 14    ASE01680\n         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680\n         BR    R14                               RETURN TO CALLER       ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nNAME_MVC MVC   CHAIN_NAME(0),2(R2)               COPY NAME\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START      DC   Q(DXDDIR)\n\nDESERV_I       DESERV FUNC=GET_ALL,                                    +\n               MF=L\nDESERV_L       EQU   *-DESERV_I\n\nDIS0000  DC    CL8'DIS0000'\nDIS0002  DC    CL8'DIS0002'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDDIR            DSECT\n                  DS   18F\nDXD_CSECT         DS   CL8\n\nDXD_ADDR          DS  A                         RETURNED DATA ADDR\nDXD_RETURN_CODE   DS  A                         DESERV RETURN CODE\nDXD_REASON_CODE   DS  A                         DESERV REASON CODE\n\nDXD_FIRST_DISPLAYED   DS A\nDXD_LAST_DISPLAYED    DS A\n\nDXD_CHAIN_LAST    DS  A                         LAST BLOCK GETMAINED\n\nDXD_CHAIN_PREV    DS  A\nDXD_CHAIN_NEXT    DS  A\n\nDXD_DESERV        DS  0F,(DESERV_L)X\n\nDXD_LINES_BUILT   DS  H\nDXD_RC            DS  X\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCHAIN             DSECT\nCHAIN_PREV        DS   A\nCHAIN_NEXT        DS   A\nCHAIN_NAME        DS   CL8\nCHAIN_TTR         DS   CL3\nCHAIN_ATR1        DS   X             ATTRIBUTE BYTE 1\nCHAIN_ATR2        DS   X             ATTRIBUTE BYTE 2\nCHAIN_ATR3        DS   X             ATTRIBUTE BYTE 3\nCHAIN_ATR4        DS   X             ATTRIBUTE BYTE 4\nCHAIN_ATR5        DS   X             ATTRIBUTE BYTE 5\nCHAIN_AC          DS   X             AUTH CODE\nCHAIN_STOR        DS   XL4           VIRTUAL STORAGE REQUIRED\nCHAIN_EPM         DS   XL4           MAIN ENTRY POINT OFFSET\nCHAIN_EPA         DS   XL4           THIS ENTRY POINT OFFSET\nCHAIN_SSI         DS   XL4           SSI INFORMATION\nCHAIN_L           EQU  *-CHAIN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDETAIL            DSECT\nDETAIL_ATTR_1     DS   X\nDETAIL_SELECT     DS   X\nDETAIL_ATTR_2     DS   X\nDETAIL_NAME       DS   CL8\nDETAIL_ATTR_3     DS   X\nDETAIL_TTR        DS   CL6\n                  DS   X\nDETAIL_RENT       DS   CL2\n                  DS   X\nDETAIL_REUS       DS   CL2\n                  DS   X\nDETAIL_REFR       DS   CL2\n                  DS   X\nDETAIL_AC         DS   C\n                  DS   X\nDETAIL_AMODE      DS   CL3\n                  DS   X\nDETAIL_RMODE      DS   CL3\nDETAIL_L          EQU  *-DETAIL\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              DISCOMM TYPE=DSECT\n              DISSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    DISASMDA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              DCBD    DSORG=PO\n              IGWDES\n              IEWPMAR\n              IGWSMDE\n\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    ATTRS\n              COPY    REGEQU\n              END     DISDIR\n./ ADD NAME=DISDISP  0103-08353-09198-0838-00126-00120-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISDISP                                              *\n*                                                                    *\n*  Function:                                                         *\n*                                                                    *\n*   DISPLAY and obtain scrolling variables                           *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISDISP CSECT\nDISDISP AMODE 31\nDISDISP RMODE ANY\n         USING DISDISP,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     MOD0000                           SKIP EYECATCHER\nMODID    DC    CL8'DISDISP'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDDISP,R13\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD                   DISSPFD ADDR\n         USING DISSPFD,R9                        DEFINE BASE\n         ITRACE ID=DISP,                                               +\n               DATA1=COMM_SPF_PANEL\n         MVC   COMM_SPF_FUNCTION,DISPLAY         SET FUNCTION\n         LA    R1,COMM_SPF_PANEL\n         ST    R1,COMM_SPF_2                     SET PANEL ADDRESS\n         OI    COMM_SPF_2,X'80'                  FLAG END-OF-LIST\n         LA    R1,COMM_SPF_PARMS                 SPF PARM LIST\n         L     R15,COMM_ISPLINK                  ISPLINK ENTRY POINT\n         BALR  R14,R15                           DISPLAY PANEL\n         TM    COMM_FLAGS2,$DONT_CLEAR_MESSAGES\n         BO    DISP0010\n         NI    COMM_FLAGS2,255-$DONT_CLEAR_MESSAGES\n         MVC   SPF_MSG_1,COMM_BLANKS             CLEAR MESSAGE\n         MVC   SPF_MSG_2,COMM_BLANKS             CLEAR MESSAGE\n         MVC   SPF_MSG_3,COMM_BLANKS             CLEAR MESSAGE\n         MVC   SPF_MSG_4,COMM_BLANKS             CLEAR MESSAGE\n         MVC   SPF_MSG_5,COMM_BLANKS             CLEAR MESSAGE\nDISP0010 DS    0H\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15\n         LTR   R2,R15                            RC = ZERO?\n         BNZ   EXIT0000                          NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        GET SCROLLING VARIABLES                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISP0020 DS    0H\n         MVC   COMM_SPF_FUNCTION,VGET            COMMAND\n         LA    R1,NAME_LIST                      SYSTEM VARIABLES\n         ST    R1,COMM_SPF_2                     SET ADDRESS\n         OI    COMM_SPF_2,X'80'                  FLAG END-OF-LIST\n         LA    R1,COMM_SPF_PARMS                 SPF PARM LIST\n         ITRACE ID=VGET_2,                                             +\n               RDATA1=R1\n         L     R15,COMM_ISPLINK                  SPF INTERFACE\n         BALR  R14,R15                           VGET SPF VARIABLE(S)\n         ITRACE ID=VGET2_RC,                                           +\n               RDATA1=R15\n         LTR   R15,R15                           SUCCESSFUL?\n         BNZ   DISP0030                          NO\n         TM    SPF_FLAGS,$SPF_VPUT               VPUT ALREADY ISSUED?\n         BO    EXIT0000                          YES\nDISP0030 DS    0H\n         OI    SPF_FLAGS,$SPF_VPUT               SET FLAG\n         MVC   COMM_SPF_FUNCTION,VPUT            COMMAND\n         LA    R1,NAME_LIST\n         ST    R1,COMM_SPF_2\n         OI    COMM_SPF_2,X'80'                  SET END-OF-LIST\n         LA    R1,COMM_SPF_PARMS                 PARM LIST ADDRESS\n         L     R15,COMM_ISPLINK                  SPF INTERFACE\n         BALR  R14,R15                           UPDATE SPF VARIABLE(S)\n         ITRACE ID=VPUT2_RC,                                           +\n               RDATA1=R15\n         B     DISP0020                          DO VGET\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                        RESTORE REGISTER 13   ASE01670\n         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680\n         LR    R15,R2                            SET RC\n         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680\n         BR    R14                               RETURN TO CALLER       ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START     DC   Q(DXDDISP)\n\nDISPLAY       DC   CL8'DISPLAY'\nNAME_LIST     DC   C'(ZSCROLLA ZSCROLLN ZVERB)'\nVGET          DC   CL8'VGET'\nVPUT          DC   CL8'VPUT'\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDDISP       DSECT\n              DS   18F\nDXD_CSECT     DS   CL8\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              DISCOMM TYPE=DSECT\n              DISSPFD TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              COPY    DISASMDA\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              COPY    REGEQU\n              END     DISDISP\n./ ADD NAME=DISDLIST 0115-09111-09197-1422-00608-00575-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: DISDLIST                                              *\n*                                                                     *\n*  FUNCTION:                                                          *\n*    Display/allow definition of data area(s)                         *\n*                                                                     *\n*                                                                     *\n*  The disassembler tries to 'recognize' data on its own.  Still,     *\n*  there are data areas of most programs that may be mis-intrpreted   *\n*  as instructions.  To prevent this, the user can \"tell\" us where    *\n*  data areas begin and end (by using the start and end displacments).*\n*                                                                     *\n*                                                                     *\n*  User defined areas are chained from COMM_USER_AREA_NEXT_1.         *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISDLIST CSECT\nDISDLIST AMODE 31\nDISDLIST RMODE ANY\n         USING DISDLIST,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     MOD0000                           SKIP EYECATCHER\nMODID    DC    CL8'DISDLIST'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDDLIST,R13\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n         USING AREA_DSECT,R6\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        In order to allow the user to \"cancel\" changes,              *\n*        first \"copy\" the existing USER area chain.                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         XC    DXD_FIRST_AREA,DXD_FIRST_AREA\n         XC    DXD_FIRST_DISPLAYED,DXD_FIRST_DISPLAYED\n         LA    R2,DXD_FIRST_AREA-4\nPREV     USING AREA_DSECT,R2\n         ICM   R6,15,COMM_USER_AREA_NEXT_1       FIRST USER AREA\n         BZ    INIT0020\nINIT0010 DS    0H\n         GETMAIN RU,                                                   +\n               LV=AREA_DSECT_L,                                        +\n               LOC=ANY\n         ITRACE ID=COPY_1,                                             +\n               RDATA1=R1\nNEW      USING AREA_DSECT,R1\n         MVC   NEW.AREA_DSECT(AREA_DSECT_L),AREA_DSECT\n         ST    R1,PREV.AREA_NEXT\n         ST    R2,NEW.AREA_PREV\n         LR    R2,R1\n         ICM   R6,15,AREA_NEXT\n         BNZ   INIT0010\n         MVC   DXD_FIRST_DISPLAYED,DXD_FIRST_AREA\n         DROP  NEW,PREV\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINIT0020 DS    0H\n         L     R0,SPF_VDEPTH                     NBR OF LINES\n         SLL   R0,2                              MULTIPLY BY 4\n         ST    R0,DXD_AREA_TABLE_SIZE\n         GETMAIN RU,                                                   +\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,DXD_AREA_TABLE                 SAVE ADDRESS\n         ITRACE ID=A_TABLE,                                            +\n               RDATA1=R1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=BUILD\n         L     R0,COMM_VDATA_ADDR\n         L     R1,COMM_VDATA_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                            INITIALIZE VDATA\n         L     R0,DXD_AREA_TABLE\n         L     R1,DXD_AREA_TABLE_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                            INIT AREA TABLE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R8,SPF_VWIDTH                     SCREEN WIDTH\n         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE\n         SRL   R8,1                              DIVIDE BY 2\n         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR\n         L     R7,SPF_VDEPTH                     NBR OF LINES\nMAIN0020 DS    0H\n         MVC   0(MSG01_L,R8),MSG01               INITIALIZE\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0020                       LOOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R8,SPF_VWIDTH                     SCREEN WIDTH\n         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE\n         SRL   R8,1                              DIVIDE BY 2\n         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR\n         USING MSG01,R8\n         L     R7,SPF_VDEPTH\nMAIN0030 DS    0H\n         L     R4,DXD_AREA_TABLE                 FIRST 'SLOT'\n         XC    DXD_NBR_DISPLAYED,DXD_NBR_DISPLAYED\n         ICM   R6,15,DXD_FIRST_DISPLAYED         FIRST TO DISPLAY\n         BZ    MAIN0060                          NOTHING DEFINED YET\nMAIN0040 DS    0H\n         ITRACE ID=AREA,                                               +\n               RDATA1=R6,                                              +\n               RDATA2=R8\n         ST    R6,DXD_LAST_DISPLAYED             SAVE ADDR\n         ST    R6,0(R4)                          SAVE ADDR\n         UNPK  DXD_WORK(9),AREA_BEGIN(5)         UNPACK BEGIN DISP\n         TR    DXD_WORK(8),COMM_HEXCHAR          TRANSLATE\n         MVC   MSG01_BEGIN,DXD_WORK              COPY BEGIN\n         UNPK  DXD_WORK(9),AREA_END(5)           UNPACK BEGIN DISP\n         TR    DXD_WORK(8),COMM_HEXCHAR          TRANSLATE\n         MVC   MSG01_END,DXD_WORK                COPY BEGIN\n         UNPK  DXD_WORK(9),AREA_LENGTH(5)        UNPACK LENGTH\n         TR    DXD_WORK(8),COMM_HEXCHAR          TRANSLATE\n         MVC   MSG01_LENGTH,DXD_WORK             COPY LENGTH\n         LA    R1,1                              CONSTANT 1\n         AH    R1,DXD_NBR_DISPLAYED              PLUS TOTAL SO FAR\n         STH   R1,DXD_NBR_DISPLAYED              SAVE TOTAL\n         LA    R4,4(,R4)                         NEXT IN ADDR TABLE\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0050\n         B     MAIN0060\nMAIN0050 DS    0H\n         ICM   R6,15,AREA_NEXT\n         BNZ   MAIN0040\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0060 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_SPF_PANEL,PANEL_NAME         SET PANEL NAME\n         L     R15,V_DISDISP                     DISP ENTRY POINT\n         BALR  R14,R15                           DISPLAY\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15,                                             +\n               DATA2=SPF_ZVERB\n         LTR   R2,R15                            RC = 0?\n         BNZ   MAIN0500                          NO\n         CLC   ABEND,SPF_ZCMD                    ABEND?\n         BE    ABEND000                          YES\n         CLC   CANCEL,SPF_ZCMD                   CANCEL?\n         BE    MAIN0550                          YES\n         CLC   CAN,SPF_ZCMD                      CAN(CEL)?\n         BE    MAIN0550                          YES\n* ------------------------------------------------------------------- *\n*        Check new areas or changes to existing area(s)               *\n* ------------------------------------------------------------------- *\n         NI    DXD_FLAGS,255-$DXD_UPDATE         RESET FLAG\n         NI    DXD_FLAGS,255-$DXD_ERROR          RESET FLAG\n         L     R8,SPF_VWIDTH                     SCREEN WIDTH\n         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE\n         SRL   R8,1                              DIVIDE BY 2\n         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR\n         L     R7,SPF_VDEPTH                     NBR OF LINES\nMAIN0070 DS    0H\n         MVC   MSG01_MSG,COMM_BLANKS\n         OC    MSG01_BEGIN,COMM_BLANKS\n         CLC   MSG01_BEGIN,COMM_BLANKS           BEGIN BLANK?\n         BE    MAIN0090                          YES\n         ITRACE ID=CNV_BEGN,                                           +\n               DATA1=MSG01_BEGIN\n         LA    R1,MSG01_BEGIN                    SOURCE DISP\n         ST    R1,DXD_CONV_SOURCE\n         LA    R1,DXD_BEGIN                      OUTPUT OF CONVERSION\n         ST    R1,DXD_CONV_OUT\n         LA    R1,DXD_CONV_PARMS                 CONVERSION PARMS\n         L     R15,V_DISDCONV                    CONVERTER ENTRY POINT\n         BALR  R14,R15                           CHECK/CONV BEGIN\n         LTR   R15,R15                           VALID?\n         BNZ   MAIN0110                          NO\n         OC    MSG01_END,COMM_BLANKS\n         CLC   MSG01_END,COMM_BLANKS             END BLANK?\n         BE    MAIN0120                          YES\n         ITRACE ID=CNV_END,                                            +\n               DATA1=MSG01_END\n         LA    R1,MSG01_END                      SOURCE DISP\n         ST    R1,DXD_CONV_SOURCE\n         LA    R1,DXD_END                        OUTPUT OF CONVERSION\n         ST    R1,DXD_CONV_OUT\n         LA    R1,DXD_CONV_PARMS                 CONVERSION PARMS\n         L     R15,V_DISDCONV                    CONVERTER ENTRY POINT\n         BALR  R14,R15                           CHECK/CONV BEGIN\n         LTR   R15,R15                           VALID?\n         BNZ   MAIN0110                          NO\n         CLC   DXD_BEGIN,DXD_END                 BEGIN > END?\n         BNH   MAIN0120                          NO\n         MVI   COMM_MSG_ID,1                     SET MESSAGE ID\n         B     MAIN0100\nMAIN0090 DS    0H\n         CLC   MSG01_END,COMM_BLANKS             END BLANK?\n         BE    MAIN0120                          YES\n         MVI   COMM_MSG_ID,3                     SET MESSAGE ID\nMAIN0100 DS    0H\n         ITRACE ID=ERROR,                                              +\n               DATA1=COMM_MSG_ID\n         BAL   R5,MSG0000                        BUILD MESSAGE\nMAIN0110 DS    0H\n         MVC   MSG01_MSG,COMM_MSG_1              COPY MESSAGE\n         OI    DXD_FLAGS,$DXD_ERROR              ERROR HAS OCCURRED\nMAIN0120 DS    0H\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0070                       LOOP\n         TM    DXD_FLAGS,$DXD_ERROR              ERROR(S)?\n         BO    MAIN0060                          YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        No errors have been found                                    *\n*                                                                     *\n*        Determine if any area(s) were                                *\n*          updated                                                    *\n*          removed                                                    *\n*          added                                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=NO_ERROR\n         L     R8,SPF_VWIDTH                     SCREEN WIDTH\n         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE\n         SRL   R8,1                              DIVIDE BY 2\n         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR\n         L     R7,SPF_VDEPTH                     NBR OF LINES\n         L     R4,DXD_AREA_TABLE                 FIRST AREA\nMAIN0130 DS    0H\n         L     R6,0(,R4)                         AREA BLOCK IF USED\n         ITRACE ID=MAIN0130,                                           +\n               RDATA1=R8,                                              +\n               RDATA2=R6\n         CLC   MSG01_BEGIN,COMM_BLANKS           BEGIN DISP BLANK?\n         BE    MAIN0200                          YES\n         LA    R1,MSG01_BEGIN                    SOURCE DISP\n         ST    R1,DXD_CONV_SOURCE\n         LA    R1,DXD_BEGIN                      OUTPUT OF CONVERSION\n         ST    R1,DXD_CONV_OUT\n         LA    R1,DXD_CONV_PARMS                 CONVERSION PARMS\n         L     R15,V_DISDCONV                    CONVERTER ENTRY POINT\n         BALR  R14,R15                           CHECK/CONV BEGIN\n         CLC   MSG01_END,COMM_BLANKS             END DISP BLANK?\n         BE    MAIN0140                          YES\n         LA    R1,MSG01_END                      SOURCE DISP\n         ST    R1,DXD_CONV_SOURCE\n         LA    R1,DXD_END                        OUTPUT OF CONVERSION\n         ST    R1,DXD_CONV_OUT\n         LA    R1,DXD_CONV_PARMS                 CONVERSION PARMS\n         L     R15,V_DISDCONV                    CONVERTER ENTRY POINT\n         BALR  R14,R15                           CHECK/CONV BEGIN\n         B     MAIN0150\nMAIN0140 DS    0H\n         MVC   DXD_END,COMM_CSECT_LENGTH         USE CSECT LENGTH\n         MVI   COMM_MSG_ID,4                     SET MESSAGE ID\n         BAL   R5,MSG0000                        BUILD MESSAGE\n         MVC   MSG01_MSG,COMM_MSG_1              COPY MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Verify begin and/or end are less than CSECT length           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0150 DS    0H\n         CLC   DXD_BEGIN,COMM_CSECT_LENGTH       BEGIN > CSECT LENGTH?\n         BH    MAIN0270                          YES\n         CLC   DXD_END,COMM_CSECT_LENGTH         END > CSECT LENGTH?\n         BNH   MAIN0155                          NO\n         MVI   COMM_MSG_ID,5                     SET MESSAGE ID\n         BAL   R5,MSG0000                        BUILD MESSAGE\n         MVC   MSG01_MSG,COMM_MSG_1              COPY MESSAGE\n         MVC   DXD_END,COMM_CSECT_LENGTH         LIMIT TO CSECT LENGTH\nMAIN0155 DS    0H\n         L     R1,DXD_END                        END DISP\n         S     R1,DXD_BEGIN                      MINUS BEGIN\n         LA    R1,1(,R1)                         TRUE LENGTH\n         STCM  R1,15,DXD_LENGTH                  SET LENGTH\n         LTR   R6,R6                             AREA EXIST?\n         BZ    MAIN0170                          NO\n         CLC   AREA_BEGIN,DXD_BEGIN              SAME BEGIN DISP?\n         BNE   MAIN0160                          NO\n         CLC   AREA_END,DXD_END                  SAME END DISP?\n         BE    MAIN0250                          YES\nMAIN0160 DS    0H\n         ITRACE ID=UPDTAREA\n         OI    DXD_FLAGS,$DXD_UPDATE             AREA HAS BEEN UPDATED\n         MVC   AREA_BEGIN,DXD_BEGIN              CHANGE BEGIN DISP\n         MVC   AREA_END,DXD_END                  CHANGE END DISP\n         MVC   AREA_LENGTH,DXD_LENGTH            CHANGE LENGTH\n         B     MAIN0250\nMAIN0170 DS    0H\n         OI    DXD_FLAGS,$DXD_UPDATE\n         GETMAIN RU,                                                   +\n               LV=AREA_DSECT_L,                                        +\n               LOC=ANY\n         ITRACE ID=NEW_AREA,                                           +\n               RDATA1=R1\nNEW      USING AREA_DSECT,R1\n         XC    NEW.AREA_DSECT(AREA_DSECT_L),NEW.AREA_DSECT\n         MVC   NEW.AREA_EYE,AREA_ID              IDENTIFY BLOCK\n         MVC   NEW.AREA_BEGIN,DXD_BEGIN          SET BEGIN DISP\n         MVC   NEW.AREA_END,DXD_END              SET END DISP\n         MVC   NEW.AREA_LENGTH,DXD_LENGTH        SET LENGTH\n         MVI   NEW.AREA_TYPE,$AREA_DATA          SET AREA TYPE\n         MVI   NEW.AREA_DATA_TYPE,$DATA_USER     USER DEFINED AREA\n         LA    R6,DXD_FIRST_AREA-4               FIRST AREA\nMAIN0180 DS    0H\n         ICM   R2,15,AREA_NEXT                   ANOTHER ON CHAIN?\n         BZ    MAIN0190                          YES\n         LR    R6,R2                             COPY ADDRESS\n         B     MAIN0180\nMAIN0190 DS    0H\n         ST    R1,AREA_NEXT                      SET 'NEXT' IN PREVIOUS\n         ST    R6,NEW.AREA_PREV                  SET PREV IN NEW\n         OC    DXD_FIRST_DISPLAYED,DXD_FIRST_DISPLAYED\n         BNZ   MAIN0250                          BLOCK PRESENT\n         ST    R1,DXD_FIRST_DISPLAYED            SET FIRST ON CHAIN\n         B     MAIN0250\n         DROP  NEW\nMAIN0200 DS    0H\n         LTR   R6,R6                             AREA EXIST?\n         BZ    MAIN0250                          NO\n         OI    DXD_FLAGS,$DXD_UPDATE             AN AREA WAS UPDATED\n         ITRACE ID=DEL_AREA,                     DELETING AN AREA      +\n               RDATA1=R6,                                              +\n               DATA2=AREA_BEGIN\n         ICM   R1,15,AREA_NEXT                   NEXT AREA ON CHAIN\n         BZ    MAIN0210\nNEXT     USING AREA_DSECT,R1\n         MVC   NEXT.AREA_PREV,AREA_PREV          SET PREV IN NEXT\n         DROP  NEXT\nMAIN0210 DS    0H\n         ICM   R1,15,AREA_PREV                   PREVIOUS ON CHAIN\n         BZ    MAIN0220                          NO PREVIOUS BLOCK\nPREV     USING AREA_DSECT,R1\n         MVC   PREV.AREA_NEXT,AREA_NEXT          SET NEXT IN PREVIOUS\nMAIN0220 DS    0H\n         C     R6,DXD_FIRST_DISPLAYED            FIRST AREA DISPLAYED?\n         BNE   MAIN0230                          NO\n         MVC   DXD_FIRST_DISPLAYED,AREA_NEXT     CHANGE TO NEXT BLOCK\nMAIN0230 DS    0H\n         C     R6,DXD_FIRST_AREA                 FIRST AREA ON CHAIN?\n         BNE   MAIN0240                          NO\n         MVC   DXD_FIRST_AREA,AREA_NEXT          NEXT IS NOW FIRST\nMAIN0240 DS    0H\n         ITRACE ID=FREE_1,                                             +\n               RDATA1=R6\n         FREEMAIN RU,                            FREEMAIN THE AREA     +\n               A=(R6),                                                 +\n               LV=AREA_DSECT_L\n         XC    0(4,R4),0(R4)                     CLEAR ADDR IN TABLE\nMAIN0250 DS    0H\n         ITRACE ID=NEXT\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         LA    R4,4(,R4)                         NEXT IN TABLE\n         BCT   R7,MAIN0130                       LOOP\n         ICM   R6,15,DXD_FIRST_AREA              FIRST AREA\n         BZ    MAIN0260                          NONE ON CHAIN\n         XC    AREA_PREV,AREA_PREV               NO PREV BLOCK\nMAIN0260 DS    0H\n         TM    DXD_FLAGS,$DXD_UPDATE             ANY UPDATES?\n         BO    MAIN0010                          YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0270 DS    0H\n         MVI   COMM_MSG_ID,6                     SET MESSAGE ID\n         BAL   R5,MSG0000                        BUILD MESSAGE\n         MVC   MSG01_MSG,COMM_MSG_1              COPY MESSAGE\n         B     MAIN0060\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=SCROLL,                                             +\n               DATA1=SPF_ZVERB,                                        +\n               DATA2=SPF_ZSCROLLA\n         CLI   SPF_ZVERB,C'B'                    BOTTOM?\n         BE    MAIN0400\n         CLI   SPF_ZVERB,C'D'                    DOWN?\n         BE    MAIN0420\n         CLI   SPF_ZVERB,C'T'                    TOP?\n         BE    MAIN0440\n         CLI   SPF_ZVERB,C'U'                    UP?\n         BE    MAIN0450\n         B     MAIN0050\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0400 DS    0H\n         ITRACE ID=BOTTOM\n         ICM   R1,15,DXD_FIRST_AREA              FIRST ON CHAIN\nTEMP     USING AREA_DSECT,R1\n         BZ    EXIT0000                          SHOULD NOT HAPPEN!\nMAIN0410 DS    0H\n         LR    R6,R1                             SAVE THIS ADDR\n         ICM   R1,15,TEMP.AREA_NEXT              NEXT AREA\n         BNZ   MAIN0410\n         B     MAIN0010                          BUILD DISPLAY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0420 DS    0H\n         ITRACE ID=DOWN\n         CLI   SPF_ZSCROLLA,C'M'                 MAX?\n         BE    MAIN0400                          YES\n         L     R2,SPF_ZSCROLLN                   NBR OF LINES TO SCROLL\n         L     R1,DXD_FIRST_DISPLAYED            1ST ON DISPLAY\nMAIN0430 DS    0H\n         ICM   R1,15,TEMP.AREA_NEXT              NEXT ON CHAIN\n         BZ    MAIN0010                          AT END OF CHAIN\n         ST    R1,DXD_FIRST_DISPLAYED\n         BCT   R2,MAIN0430\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0440 DS    0H\n         ITRACE ID=TOP\n         L     R6,DXD_FIRST_AREA                 FIRST DATA ITEM\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0450 DS    0H\n         ITRACE ID=UP\n         CLI   SPF_ZSCROLLA,C'M'                 MAX?\n         BE    MAIN0440                          YES\n         ICM   R1,15,DXD_FIRST_DISPLAYED         FIRST ON DISPLAY\n         BZ    EXIT0000                          SHOULD NOT HAPPEN!\n         L     R2,SPF_ZSCROLLN                   LINES ON DISPLAY\nMAIN0460 DS    0H\n         ST    R1,DXD_FIRST_DISPLAYED            COPY ADDR\n         ICM   R1,15,TEMP.AREA_PREV              PREVIOUS AREA\n         BZ    MAIN0010\n         BCT   R2,MAIN0460                       LOOP\n         B     MAIN0010\n         DROP  TEMP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      Replace the existing USER area chain with the updated chain    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0500 DS    0H\n         ITRACE ID=SWITCH,                                             +\n               DATA1=COMM_USER_AREA_NEXT_1,                            +\n               DATA2=DXD_FIRST_AREA\n         ICM   R6,15,COMM_USER_AREA_NEXT_1       FIRST USER AREA\n         BZ    MAIN0520                          NOTHING ON CHAIN\nMAIN0510 DS    0H\n         LR    R1,R6                             COPY ADDRESS\n         ICM   R6,15,AREA_NEXT                   NEXT AREA\n         ITRACE ID=FREE_2,                                             +\n               RDATA1=R1\n         FREEMAIN RU,                            FREEMAIN THIS AREA    +\n               A=(1),                                                  +\n               LV=AREA_DSECT_L\n         LTR   R6,R6                             ANOTHER AREA?\n         BNZ   MAIN0510                          YES\nMAIN0520 DS    0H\n         MVC   COMM_USER_AREA_NEXT_1,DXD_FIRST_AREA\n         XC    DXD_FIRST_AREA,DXD_FIRST_AREA     RESET WORKING CHAIN\n         ICM   R6,15,COMM_USER_AREA_NEXT_1       1ST USER AREA\n         BZ    EXIT0000                          NO USER AREAS\n         XC    AREA_PREV,AREA_PREV               ZERO 'PREV' ADDR\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0550 DS    0H\n         ITRACE ID=CANCEL\n         MVC   SPF_ZCMD,COMM_BLANKS              RESET COMMAND\n         ICM   R6,15,DXD_FIRST_AREA              FIRST NEW AREA\n         BZ    EXIT0000                          NONE\nMAIN0560 DS    0H\n         LR    R1,R6                             COPY ADDRESS\n         ICM   R6,15,AREA_NEXT                   NEXT AREA\n         ITRACE ID=FREE_3,                                             +\n               RDATA1=R1\n         FREEMAIN RU,                            FREEMAIN THIS AREA    +\n               A=(1),                                                  +\n               LV=AREA_DSECT_L\n         LTR   R6,R6                             ANOTHER AREA?\n         BNZ   MAIN0560                          YES\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0000  DS    0H\n         ITRACE ID=MSG,                                                +\n               DATA1=COMM_MSG_ID\n         MVC   COMM_MSG_CSECT,MODID\n         L     R15,V_DISMSG\n         BALR  R14,R15\n         BR    R5\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT,                                               +\n               RDATA1=R2\n         L     R0,DXD_AREA_TABLE_SIZE            ADDR TABLE SIZE\n         L     R1,DXD_AREA_TABLE                 ADDR TABLE ADDR\n         ITRACE ID=FREE_TBL,                                           +\n               RDATA1=R1,                                              +\n               RDATA2=R0\n         FREEMAIN RU,                            FREEMAIN ADDR TABLE   +\n               A=(1),                                                  +\n               LV=(0)\n         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670\n         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680\n         LR    R15,R2                            SET RC\n         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680\n         BR    R14                               RETURN TO CALLER       ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nABEND000 DS    0H\n         ITRACE ID=ABEND\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC   Q(DXDDLIST)\n\nAREA_ID       DC   CL8'AREA'\nABEND         DC   C'ABEND '\nCAN           DC   C'CAN '\nCANCEL        DC   C'CANCEL '\nPANEL_NAME    DC   CL8'DISDDATA'\n\n              LTORG\n\nMSG01         DS   0C\n              DC   AL1($ATTR_INPUT)\nMSG01_BEGIN   DC   CL8' '\n              DC   AL1($ATTR_NORMAL)\n              DC   CL3' '\n              DC   AL1($ATTR_INPUT)\nMSG01_END     DC   CL8' '\n              DC   AL1($ATTR_NORMAL)\n              DC   CL3' '\nMSG01_LENGTH  DC   CL8' '\n              DC   AL1($ATTR_HIGH_YELLOW)\nMSG01_MSG     DC   CL30' '\nMSG01_L       EQU  *-MSG01\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDDLIST              DSECT\n                      DS  18F\n\n                      DS  A             DUMMY FOR 'PREV' ON CHAIN\nDXD_FIRST_AREA        DS  A             FIRST DATA ITEM ON CHAIN\n\nDXD_FIRST_DISPLAYED   DS  A             FIRST DATA ITEM DISPLAYED\nDXD_LAST_DISPLAYED    DS  A             LAST DATA ITEM DISPLAYED\n\nDXD_AREA_TABLE        DS  A\nDXD_AREA_TABLE_SIZE   DS  F\n\nDXD_CONV_PARMS        DS  0A\nDXD_CONV_SOURCE       DS  F\nDXD_CONV_OUT          DS  F\n\nDXD_BEGIN             DS  F\nDXD_END               DS  F\nDXD_LENGTH            DS  F\n                      DS  X\n\nDXD_NBR_DISPLAYED     DS  H             NBR OF DATA ITEMS DISPLAYED\n\nDXD_FLAGS             DS  X             FLAGS\n$DXD_ERROR            EQU X'80'         .. SERIOUS ERROR\n$DXD_UPDATE           EQU X'40'         .. AREA(S) UPDATED\n\nDXD_WORK              DS  CL9\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              DISCOMM TYPE=DSECT\n              DISSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    DISASMDA\n              COPY    ATTRS\n\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    REGEQU\n              END     DISDLIST\n./ ADD NAME=DISDMERG 0120-09121-09198-0800-00757-00711-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*   \"Merge\" the user identified data areas with RLD data items.       *\n*                                                                     *\n*   To this point, data areas may have been identified by one         *\n*   of two ways.  One is the RLD data obtained from the binder.       *\n*   The second is areas identified by the user. The data from         *\n*   these two sources needs to be 'merged'  The end result is         *\n*   a chain of AREA blocks that                                       *\n*       1) is in ascending DISP sequence                              *\n*       2) any duplicate or overlapping areas will have been          *\n*          resolved.  That is a given displacement range              *\n*          will only be referenced by one AREA block.                 *\n*                                                                     *\n*                                                                     *\n*   The RLD items are identified by AREAs chained from                *\n*   COMM_RLD_AREA_NEXT.  User identified areas are chained            *\n*   COMM_USER_AREA_NEXT_1.  The merged data will be a chain           *\n*   of AREA blocks chained from COMM_ALL_AREA_NEXT.                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISDMERG CSECT\nDISDMERG AMODE 31\nDISDMERG RMODE ANY\n         USING DISDMERG,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                     SAVE REGS\n         LR    R11,R15                             SET BASE REG\n         B     MOD0000                             SKIP EYECATCHER\nMODID    DC    CL8'DISDMERG'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS                WORK AREA\n         A     R15,DXD_START                       PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDDMERG,R13\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\nI        USING AREA_DSECT,R7\nU        USING AREA_DSECT,R6\nPREV     USING AREA_DSECT,R5\n         MVI   DUMMY_AREA,X'FF'\n         MVC   DUMMY_AREA+1(AREA_DSECT_L-1),DUMMY_AREA\n         TM    COMM_FLAGS,$COMM_AREA_DEBUG\n         BNO   INIT0010\n         MVC   SPF_MSG_3(AREAMSG1_L),AREAMSG1\n         L     R1,COMM_USER_AREA_NEXT_2\n         CLI   AREA_BEGIN-AREA_DSECT(R1),X'FF'     DUMMY ENTRY?\n         BE    INIT0010                            YES\n         L     R15,V_DISXLIST\n         BALR  R14,R15\n         MVC   SPF_MSG_3(AREAMSG2_L),AREAMSG2\n         L     R1,COMM_ALL_AREA_NEXT\n         L     R15,V_DISXLIST\n         BALR  R14,R15\n* ------------------------------------------------------------------- *\n*        Free 'area 2' chain                                          *\n* ------------------------------------------------------------------- *\nINIT0010 DS    0H\n         ITRACE ID=FREE_2,                                             +\n               DATA1=COMM_USER_AREA_NEXT_2\n         ICM   R7,15,COMM_USER_AREA_NEXT_2         FIRST ON CHAIN\n         BZ    INIT0030                            NONE ON CHAIN\n         XC    COMM_USER_AREA_NEXT_2,COMM_USER_AREA_NEXT_2\nINIT0020 DS    0H\n         CLI   I.AREA_TYPE,X'FF'                   DUMMY AREA?\n         BE    INIT0030                            YES\n         LR    R1,R7\n         L     R7,I.AREA_NEXT                      NEXT AREA ON CHAIN\n         ITRACE ID=AREA,                                               +\n               RDATA1=R1,                                              +\n               RDATA2=R7\n         FREEMAIN RU,                              FREE THIS AREA      +\n               A=(1),                                                  +\n               LV=AREA_DSECT_L\n         LTR   R7,R7                               ANOTHER BLOCK?\n         BNZ   INIT0020                            YES\n* ------------------------------------------------------------------- *\n*        Free 'ALL area' chain                                        *\n* ------------------------------------------------------------------- *\nINIT0030 DS    0H\n         ITRACE ID=FREE_ALL,                                           +\n               DATA1=COMM_ALL_AREA_NEXT\n         ICM   R7,15,COMM_ALL_AREA_NEXT            FIRST ON INTERNAL\n         BZ    MAIN0000                            NONE ON CHAIN\n         XC    COMM_ALL_AREA_NEXT,COMM_ALL_AREA_NEXT\nINIT0040 DS    0H\n         LR    R1,R7\n         L     R7,I.AREA_NEXT                      NEXT AREA ON CHAIN\n         ITRACE ID=AREA,                                               +\n               RDATA1=R1,                                              +\n               RDATA2=R7\n         FREEMAIN RU,                              FREE THIS AREA      +\n               A=(1),                                                  +\n               LV=AREA_DSECT_L\n         LTR   R7,R7                               ANOTHER BLOCK?\n         BNZ   INIT0040                            YES\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Build internal area chain                                    *\n*                                                                     *\n*   The user may identify areas of the text as data via the \"D\"       *\n*   option from the main menu.  Data areas are identified by          *\n*   giving the starting and ending displacment.  The user may         *\n*   identify multiple areas.  To make things easier for the user      *\n*   the areas may be identified any order.  Also the user may         *\n*   specify data areas that overlap.                                  *\n*                                                                     *\n*   .... this was hard to put into words (at least for me) ....       *\n*                                                                     *\n*   I wanted to preserve the data areas that were identified by       *\n*   the user in the same form and order they identified them.         *\n*   A dis-assembly is usually an iterative process.  The results      *\n*   from one 'generate' process can often lead to a better            *\n*   understanding of the code being examined.  Then data areas,       *\n*   DSECTs, etc and be refined.  If the data areas identified         *\n*   by the user were re-arranged, or otherwise updated for            *\n*   internal use, it could confuse the user.                          *\n*                                                                     *\n*   ............................................................      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n\n\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*   Step 1                                                            *\n*                                                                     *\n*   Copy the user areas to the internal chain in ascending            *\n*   order based on the starting displacement(s) only.                 *\n*                                                                     *\n*   The \"U\" quailifier is R6, chain 1                                 *\n*   The \"I\" quallifier is R7, chain 2                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0000 DS    0H\n         ITRACE ID=STEP1\n         LA    R7,DUMMY_AREA                  DUMMY AREA\n         ST    R7,COMM_USER_AREA_NEXT_2\n         ICM   R6,15,COMM_USER_AREA_NEXT_1    FIRST ON USER\n         BZ    MAIN0040                       NO USER DEFINED AREAS\n         LA    R1,COMM_USER_AREA_PREV_2\n         ST    R1,I.AREA_PREV                 SET 'PREV' IN DUMMY AREA\nMAIN0010 DS    0H\n         ICM   R7,15,COMM_USER_AREA_NEXT_2    1ST ON INTERNAL CHAIN\nMAIN0020 DS    0H\n         ITRACE ID=U,                                                  +\n               RDATA1=R6,                                              +\n               DATA2=U.AREA_BEGIN\n         ITRACE ID=I,                                                  +\n               RDATA1=R7,                                              +\n               DATA2=I.AREA_BEGIN\n         CLC   U.AREA_BEGIN,I.AREA_BEGIN      USER LOWER THAN INTERNAL?\n         BH    MAIN0030                       NO\n         GETMAIN RU,                          GETMAIN AN AREA BLOCK    +\n               LOC=ANY,                                                +\n               LV=AREA_DSECT_L\nNEW      USING AREA_DSECT,R1\n         MVC   NEW.AREA_DSECT(AREA_DSECT_L),U.AREA_DSECT\n         ITRACE ID=NEW,                                                +\n               RDATA1=R1,                                              +\n               DATA2=NEW.AREA_BEGIN\n         L     R2,I.AREA_PREV\nPREV     USING AREA_DSECT,R2\n         ST    R1,PREV.AREA_NEXT\n         ST    R2,NEW.AREA_PREV\n         ST    R1,I.AREA_PREV\n         ST    R7,NEW.AREA_NEXT\n         ICM   R6,15,U.AREA_NEXT              NEXT ON USER AREA CHAIN\n         BZ    MAIN0040                       END OF CHAIN REACHED\n         B     MAIN0010                       INSERT THIS AREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Remove \"dummy\" entry from chain                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0030 DS    0H\n         ICM   R7,15,I.AREA_NEXT\n         BNZ   MAIN0020\n         DC    H'0'\n         DROP  NEW,PREV\nMAIN0040 DS    0H\n         ICM   R7,15,COMM_USER_AREA_NEXT_2\n         CLI   I.AREA_BEGIN,X'FF'\n         BE    MAIN0080\nMAIN0050 DS    0H\n         ITRACE ID=USER2,                                              +\n               RDATA1=R7,                                              +\n               DATA2=I.AREA_BEGIN\n         ICM   R1,15,I.AREA_NEXT\n         BZ    MAIN0070\nNEXT     USING AREA_DSECT,R1\n         CLI   NEXT.AREA_BEGIN,X'FF'\n         BE    MAIN0060\n         LR    R7,R1\n         B     MAIN0050\nMAIN0060 DS    0H\n         XC    I.AREA_NEXT,I.AREA_NEXT\nMAIN0070 DS    0H\n         TM    COMM_FLAGS,$COMM_AREA_DEBUG\n         BNO   MAIN0080\n         MVC   SPF_MSG_3(AREAMSG3_L),AREAMSG3\n         L     R1,COMM_USER_AREA_NEXT_2\n         L     R15,V_DISXLIST\n         BALR  R14,R15\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   Step 2                                                            *\n*                                                                     *\n*   Combine areas that overlap or free areas \"spanned\" by another.    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0080 DS    0H\nA        USING AREA_DSECT,R7\nB        USING AREA_DSECT,R6\n         ICM   R7,15,COMM_USER_AREA_NEXT_2         1ST ON CHAIN\n         ITRACE ID=STEP2,                                              +\n               RDATA1=R7\n         LTR   R7,R7                               ANYTHING ON CHAIN?\n         BZ    MAIN0400                            NO.. SKIP STEP 3\n         CLI   A.AREA_TYPE,X'FF'                   DUMMY AREA?\n         BE    MAIN0400                            NO.. SKIP STEP 3\nMAIN0090 DS    0H\n         ICM   R6,15,A.AREA_NEXT                   1ST BLOCK AFTER \"A\"\n         BZ    MAIN0180                            END OF CHAIN\n         CLC   A.AREA_BEGIN,B.AREA_BEGIN           BEGIN AT SAME DISP?\n         BNE   MAIN0130                            NO\n* ------------------------------------------------------------------- *\n*   Both begin at same disp                                           *\n* ------------------------------------------------------------------- *\n         CLC   A.AREA_END,B.AREA_END               END AT SAME DISP?\n         BH    MAIN0110                            A > B\n         BL    MAIN0120                            A < B\n* ------------------------------------------------------------------- *\n*   \"A\" and \"B\" are identical                                         *\n*   FREEMAIN the \"B\" block                                            *\n* ------------------------------------------------------------------- *\n         ITRACE ID=DUP                             DUPLICATE AREAS\n         B     MAIN0160\n* ------------------------------------------------------------------- *\n*   \"A\" and \"B\" start at the same disp                                *\n*   \"A\" has a larger end disp.                                        *\n*   FREEMAIN the \"B\" block                                            *\n* ------------------------------------------------------------------- *\nMAIN0110 DS    0H\n         ITRACE ID=SPAN1\n         B     MAIN0160\n* ------------------------------------------------------------------- *\n*   \"A\" and \"B\" start at the same disp                                *\n*   \"B\" has a larger end disp                                         *\n*   Change \"A\" end disp to \"B\"s end disp                              *\n*   Calculate size of combined area                                   *\n*   FREEMAIN the \"B\" block                                            *\n* ------------------------------------------------------------------- *\nMAIN0120 DS    0H\n         ITRACE ID=SPAN2\n         B     MAIN0150\n* ------------------------------------------------------------------- *\n*                                                                     *\n*   \"B\" block begins at a higher disp than \"A\" block.                 *\n*   If \"A\" block ends at a higher disp than \"B\" begins,               *\n*   \"A\" block overlaps part or all of \"B\" block.                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0130 DS    0H\n         ITRACE ID=MAIN0130,                                           +\n               DATA1=A.AREA_BEGIN,                                     +\n               DATA2=B.AREA_BEGIN\n         CLC   A.AREA_END,B.AREA_BEGIN             A END < B BEGIN?\n         BL    MAIN0180                            YES.. GOOD\n* ------------------------------------------------------------------- *\n*                                                                     *\n*   \"A\" block ends at the same or higher disp than \"B\" block begins.  *\n*                                                                     *\n*   If \"A\" block ends at or higher than \"B\" ends                      *\n*      \"A\" block spans all of \"B\" block                               *\n*   otherwise                                                         *\n*      \"A\" block spans first portion of \"B\" block                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=A,                                                  +\n               DATA1=A.AREA_BEGIN,                                     +\n               DATA2=B.AREA_BEGIN\n         CLC   A.AREA_END,B.AREA_END               \"A\" END < \"B\" END\n         BL    MAIN0140                            YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*   'A' block spans all of 'B' block                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=SPAN3,                                              +\n               DATA1=A.AREA_BEGIN,                                     +\n               DATA2=B.AREA_BEGIN\n         B     MAIN0160\n* ------------------------------------------------------------------- *\n*                                                                     *\n*   'A' block overlaps first part of 'B' block.                       *\n*   Change end disp in 'A' block to end disp in 'B' block.            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0140 DS    0H\n         ITRACE ID=SPAN4\nMAIN0150 DS    0H\n         ITRACE ID=MAIN0150,                                           +\n               RDATA1=R6,                                              +\n               RDATA2=R7\n         MVC   A.AREA_END,B.AREA_END               COPY 'B' AREA END\n         ICM   R0,15,A.AREA_BEGIN\n         ICM   R1,15,A.AREA_END\n         SR    R1,R0\n         LA    R1,1(,R1)\n         STCM  R1,15,A.AREA_LENGTH\n* ------------------------------------------------------------------- *\n*                                                                     *\n*   Remove 'B' block from chain                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0160 DS    0H\n         ITRACE ID=MAIN0160,                                           +\n               RDATA1=R7,                                              +\n               DATA2=B.AREA_NEXT\n         ICM   R4,15,B.AREA_NEXT                   2ND BLOCK FORWARD\n         BZ    MAIN0170\nNEXT     USING AREA_DSECT,R4\n         ST    R7,NEXT.AREA_PREV                   SET PREV IN 2ND FWD\n         DROP  NEXT\nMAIN0170 DS    0H\n         ST    R4,A.AREA_NEXT                      2ND FORWARD NOW NEXT\n         ITRACE ID=FREE_B,                                             +\n               RDATA1=R6\n         FREEMAIN RU,                                                  +\n               A=(R6),                                                 +\n               LV=AREA_DSECT_L\n         B     MAIN0090                            CHECK AGAIN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0180 DS    0H\n         ITRACE ID=MAIN0180\n         ICM   R7,15,A.AREA_NEXT                   NEXT \"A\" AREA\n         BNZ   MAIN0090\n         DROP  A,B\n\n\n         TM    COMM_FLAGS,$COMM_AREA_DEBUG\n         BNO   MAIN0190\n         MVC   SPF_MSG_3(AREAMSG4_L),AREAMSG4\n         L     R1,COMM_USER_AREA_NEXT_2\n         L     R15,V_DISXLIST\n         BALR  R14,R15\n\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*   Step 3                                                            *\n*                                                                     *\n*   Check for RLD items that overlap or duplicate user area(s)        *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nUSER     USING AREA_DSECT,R7\nRLD      USING AREA_DSECT,R6\n* ------------------------------------------------------------------- *\n*                                                                     *\n*   Check the RLD items against the user area(s)                      *\n*                                                                     *\n*   An RLD item can be                                                *\n*                                                                     *\n*     1)  \"below\" the data item                                       *\n*                                                                     *\n*     2)  \"overlap\" the first portion of the data area                *\n*                                                                     *\n*     3)  \"overlap\" the entire data area                              *\n*                                                                     *\n*     4)  \"overlap\" the last portion of the data area                 *\n*                                                                     *\n*     5)  \"above\" the data area                                       *\n*                                                                     *\n*     6)  \"in the middle\" of a data area                              *\n*                                                                     *\n*     7)  exactly the same as a data area                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0190 DS    0H\n         ITRACE ID=STEP3\n         ICM   R7,15,COMM_USER_AREA_NEXT_2\n         BZ    MAIN0400\nMAIN0200 DS    0H\n         ICM   R6,15,COMM_RLD_AREA_NEXT\n         BZ    MAIN0400\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     Case 1  RLD below user area                                     *\n*                                                                     *\n*     Action: No conflict                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0220 DS    0H\n         ITRACE ID=CASE,                                               +\n               DATA1=RLD.AREA_BEGIN,                                   +\n               DATA2=USER.AREA_BEGIN\n         CLC   RLD.AREA_END,USER.AREA_BEGIN        RLD < USER BEGIN?\n         BNL   MAIN0230                            NO\n         ITRACE ID=CASE1                           RLD IS BELOW USER\n         B     MAIN0330\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     CASE 2  RLD overlaps 1st portion of user area                   *\n*                                                                     *\n*        RLD begins at or lower disp than user area begins            *\n*        RLD ends at or higher an user area begins                    *\n*        RLD ends at lower disp than user area ends                   *\n*                                                                     *\n*     Action: Change start disp in user area to \"RLD end disp + 1\"    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0230 DS    0H\n         ITRACE ID=MAIN0230                        RLD IS BELOW USER\n         CLC   RLD.AREA_BEGIN,USER.AREA_BEGIN   RLD BEGIN < USER BEGIN?\n         BH    MAIN0240                         NO\n         CLC   RLD.AREA_END,USER.AREA_BEGIN     RLD END > USER BEGIN?\n         BL    MAIN0240                         NO\n         CLC   RLD.AREA_END,USER.AREA_END       RLD END < USER END?\n         BNL   MAIN0240\n         ITRACE ID=CASE2\n         ICM   R2,15,RLD.AREA_END               RLD ITEM END DISP\n         LA    R2,1(,R2)                        PLUS 1\n         STCM  R2,15,USER.AREA_BEGIN            CHANGE USER AREA BEGIN\n         ICM   R3,15,USER.AREA_END              USER END DISP\n         SR    R3,R2                            COMPUTE LENGTH\n         LA    R3,1(,R3)                        TRUE LENGTH\n         STCM  R3,15,USER.AREA_LENGTH           SET NEW LENGTH\n         B     MAIN0330\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*     Case 3  RLD overlaps entire user area                           *\n*             or is the SAME as user area                             *\n*                                                                     *\n*        RLD begins at same disp as user area begins and              *\n*        RLD ends at same disp that user area ends                    *\n*                                                                     *\n*      or                                                             *\n*                                                                     *\n*        RLD begins at lower disp than user area begins               *\n*        RLD ends at higher disp than user area ends                  *\n*                                                                     *\n*     Action: \"delete\" the user area                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0240 DS    0H\n         ITRACE ID=MAIN0240\n         CLC   RLD.AREA_BEGIN,USER.AREA_BEGIN   SAME START DISP?\n         BNE   MAIN0250                         NO\n         CLC   RLD.AREA_BEGIN,USER.AREA_BEGIN   SAME START DISP?\n         BE    MAIN0260                         YES.. SAME AREA\nMAIN0250 DS    0H\n         ITRACE ID=MAIN0250\n         CLC   RLD.AREA_BEGIN,USER.AREA_BEGIN   RLD BEGIN < USER BEGIN?\n         BNL   MAIN0290                         NO\n         CLC   RLD.AREA_END,USER.AREA_END       RLD END > USER END?\n         BNH   MAIN0290                         NO\nMAIN0260 DS    0H\n         ITRACE ID=CASE3\n         ICM   R15,15,USER.AREA_NEXT            NEXT AREA ON CHAIN\n         BZ    MAIN0270                         NOT PRESENT\nNEXT     USING AREA_DSECT,R15\n         MVC   NEXT.AREA_PREV,USER.AREA_PREV    SET PREV IN NEXT\n         DROP  NEXT\nMAIN0270 DS    0H\n         ITRACE ID=MAIN0270\n         ICM   R15,15,USER.AREA_PREV            PREVIOUS BLOCK\n         BZ    MAIN0280                         NOT PRESENT\nPREV     USING AREA_DSECT,R15\n         MVC   PREV.AREA_NEXT,USER.AREA_NEXT    SET NEXT IN PREV BLOCK\n         DROP  PREV\nMAIN0280 DS    0H\n         ITRACE ID=MAIN0280\n         FREEMAIN RU,                                                  +\n               A=(7),                                                  +\n               LV=AREA_DSECT_L\n         B     MAIN0190                         RE-DRIVE PROCESS\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     Case 4  RLD overlaps last portion of user area                  *\n*                                                                     *\n*        RLD begins at higher than user begins                        *\n*        RLD begins at or lower than user area ends                   *\n*        RLD ends at or higher than user area ends                    *\n*                                                                     *\n*     Action: Change ending disp in user area to \"RLD begin - 1)      *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0290 DS    0H\n         ITRACE ID=MAIN0290\n         CLC   RLD.AREA_BEGIN,USER.AREA_BEGIN   RLD BEGIN > USER BEGIN?\n         BNH   MAIN0300                         NO\n         CLC   RLD.AREA_BEGIN,USER.AREA_END     RLD BEGIN > USER END?\n         BH    MAIN0300                         YES..NOT LOWER OR EQUAL\n         CLC   RLD.AREA_END,USER.AREA_END       RLD END > USER END?\n         BL    MAIN0300                         NO\n         ITRACE ID=CASE4\n         ICM   R3,15,RLD.AREA_BEGIN             RLD BEGIN DISP\n         BCTR  R3,0                             MINUS 1\n         STCM  R3,15,USER.AREA_END              CHANGE USER AREA END\n         ICM   R2,15,USER.AREA_BEGIN            USER BEGIN DISP\n         SR    R3,R2                            COMPUTE NEW LENGTH\n         LA    R3,1(,R3)                        TRUE LENGTH\n         STCM  R3,15,USER.AREA_LENGTH           CHANGE LENGTH\n         B     MAIN0330\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     CASE 5  RLD is at higher disp than user area                    *\n*                                                                     *\n*        RLD begins at higher disp than user area ends                *\n*                                                                     *\n*     Action: no conflict                                             *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=MAIN0300\n         CLC   RLD.AREA_BEGIN,USER.AREA_END     RLD BEGIN > USER END?\n         BNH   MAIN0310                         NO\n         ITRACE ID=CASE5\n         B     MAIN0330                         GO TO NEXT RLD ITEM\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     CASE 6 (RLD is \"in the middle of\" a user area)                  *\n*                                                                     *\n*        RLD begins at higher disp than user area begins              *\n*        RLD ends at lower disp than user area ends                   *\n*                                                                     *\n*     Action: \"SPLIT\" the user area into two parts                    *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0310 DS    0H\n         ITRACE ID=MAIN0310\n         CLC   RLD.AREA_BEGIN,USER.AREA_BEGIN   RLD BEGIN > USER BEGIN?\n         BNH   MAIN0330                         NO\n         CLC   RLD.AREA_END,USER.AREA_END       RLD END < USER END?\n         BNL   MAIN0330                         NO\n         GETMAIN RU,                                                   +\n               LV=AREA_DSECT_L,                                        +\n               LOC=ANY\n         ITRACE ID=MIDDLE,                                             +\n               RDATA1=R1\nNEW      USING AREA_DSECT,R1\n         MVC   NEW.AREA_DSECT(AREA_DSECT_L),USER.AREA_DSECT\n         MVC   NEW.AREA_NEXT,USER.AREA_NEXT     CHAIN NEXT TO NEW\n         ICM   R15,15,USER.AREA_NEXT            NEXT ON USER CHAIN\n         BZ    MAIN0320\nNEXT     USING AREA_DSECT,R15\n         ST    R1,NEXT.AREA_PREV                CHAIN NEW TO NEXT\nMAIN0320 DS    0H\n         ITRACE ID=MAIN0320\n         ST    R7,NEW.AREA_PREV                 SET PREV IN NEW\n         ST    R1,USER.AREA_NEXT                SET NEXT IN CURRENT\n         ICM   R3,15,RLD.AREA_BEGIN             RLD ITEM BEGIN\n         BCTR  R3,0                             MINUS 1\n         STCM  R3,15,USER.AREA_END              SET END DISP\n         ICM   R2,15,USER.AREA_BEGIN            BEGIN DISP\n         SR    R3,R2                            COMPUTE LENGTH\n         LA    R3,1(,R3)                        TRUE LENGTH\n         STCM  R3,15,USER.AREA_LENGTH           SET LENGTH\n         ICM   R2,15,RLD.AREA_END               RLD ITEM END\n         LA    R2,1(,R2)                        PLUS 1\n         STCM  R2,15,NEW.AREA_BEGIN             SET BEGIN DISP\n         ICM   R3,15,NEW.AREA_END               END DISP\n         SR    R3,R2                            COMPUTE LENGTH\n         LA    R3,1(,R3)                        TRUE LENGTH\n         STCM  R3,15,NEW.AREA_LENGTH            SET LENGTH\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0330 DS    0H\n         ITRACE ID=MAIN0330\n         ICM   R6,15,RLD.AREA_NEXT               NEXT RLD ITEM\n         BNZ   MAIN0220\n         ICM   R7,15,USER.AREA_NEXT              NEXT USER AREA\n         BNZ   MAIN0200\n\n\n         TM    COMM_FLAGS,$COMM_AREA_DEBUG\n         BNO   MAIN0400\n         MVC   SPF_MSG_3(AREAMSG5_L),AREAMSG5\n         L     R1,COMM_USER_AREA_NEXT_2\n         L     R15,V_DISXLIST\n         BALR  R14,R15\n\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  Step 4                                                             *\n*                                                                     *\n*  Merge RLD and user data into \"ALL\" data                            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0400 DS    0H\n         ITRACE ID=STEP4\nALL      USING AREA_DSECT,R5\n         LA    R5,COMM_ALL_AREA_PREV\n         ICM   R6,15,COMM_RLD_AREA_NEXT\n         BNZ   MAIN0410\n         LA    R6,DUMMY_AREA\nMAIN0410 DS    0H\n         ICM   R7,15,COMM_USER_AREA_NEXT_2\n         BNZ   MAIN0420\n         LA    R7,DUMMY_AREA\nMAIN0420 DS    0H\n         CLC   RLD.AREA_BEGIN,USER.AREA_BEGIN       COMPARE DISPS\n         BL    MAIN0430                             RLD LOW\n         BH    MAIN0440\n         CLI   RLD.AREA_BEGIN,X'FF'                 AT DUMMY RECORD?\n         BE    EXIT0000                             YES\n         DC    H'0'                                 INTERNAL ERROR\nMAIN0430 DS    0H\n         GETMAIN RU,                                                   +\n               LV=AREA_DSECT_L,                                        +\n               LOC=ANY\n         ITRACE ID=COPY_RLD,                                           +\n               RDATA1=R1,                                              +\n               RDATA2=R6\n         MVC   NEW.AREA_DSECT(AREA_DSECT_L),RLD.AREA_DSECT\n         ST    R1,ALL.AREA_NEXT\n         XC    NEW.AREA_NEXT,NEW.AREA_NEXT\n         ST    R5,NEW.AREA_PREV\n         LR    R5,R1\n         ICM   R6,15,RLD.AREA_NEXT\n         BNZ   MAIN0420\n         LA    R6,DUMMY_AREA\n         B     MAIN0420\nMAIN0440 DS    0H\n         GETMAIN RU,                                                   +\n               LV=AREA_DSECT_L,                                        +\n               LOC=ANY\n         ITRACE ID=COPYUSER,                                           +\n               RDATA1=R1,                                              +\n               RDATA2=R7\n         MVC   NEW.AREA_DSECT(AREA_DSECT_L),USER.AREA_DSECT\n         ST    R1,ALL.AREA_NEXT\n         ST    R5,NEW.AREA_PREV\n         LR    R5,R1\n         ICM   R7,15,USER.AREA_NEXT\n         BNZ   MAIN0420\n         LA    R7,DUMMY_AREA\n         B     MAIN0420\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0000  DS    0H\n         MVC   COMM_MSG_CSECT,MODID\n         L     R15,V_DISMSG\n         BALR  R14,R15\n         MVC   SPF_MSG_1,COMM_MSG_1\n         MVC   SPF_MSG_2,COMM_MSG_2\n         MVC   SPF_MSG_3,COMM_MSG_3\n         MVC   SPF_MSG_4,COMM_MSG_4\n         MVC   SPF_MSG_5,COMM_MSG_5\n         BR    R8\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         ICM   R7,15,COMM_USER_AREA_NEXT_2         FIRST ON CHAIN\n         BZ    EXIT0020                            NOTHING ON CHAIN\nEXIT0010 DS    0H\n         XC    USER.AREA_PREV,USER.AREA_PREV       NO PREV IN 1ST BLOCK\nEXIT0020 DS    0H\n         ICM   R7,15,COMM_ALL_AREA_NEXT            FIRST ON CHAIN\n         BZ    EXIT0030                            NOTHING ON CHAIN\n         XC    USER.AREA_PREV,USER.AREA_PREV       NO PREV IN 1ST BLOCK\nEXIT0030 DS    0H\n         TM    COMM_FLAGS,$COMM_AREA_DEBUG\n         BNO   EXIT0040\n         MVC   SPF_MSG_3(AREAMSG6_L),AREAMSG6\n         L     R1,COMM_USER_AREA_NEXT_2\n         L     R15,V_DISXLIST\n         BALR  R14,R15\n         MVC   SPF_MSG_3(AREAMSG7_L),AREAMSG7\n         L     R1,COMM_ALL_AREA_NEXT\n         L     R15,V_DISXLIST\n         BALR  R14,R15\nEXIT0040 DS    0H\n         L     R13,4(,R13)                         RESTORE REGISTER 13  ASE01670\n         LM    R14,R12,12(R13)                     RESTORE REGISTERS    ASE01680\n         SR    R15,R15                             RETURN CODE          ASE01690\n         BR    R14                                 RETURN TO CALLER     ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC       Q(DXDDMERG)\n\nAREAMSG1      DC       C'User area 2 chain at entry to DISDMERG'\nAREAMSG1_L    EQU      *-AREAMSG1\n\nAREAMSG2      DC       C'ALL area chain at entry to DISDMERG'\nAREAMSG2_L    EQU      *-AREAMSG2\n\nAREAMSG3      DC       C'User area 2 chain after step1 in DISDMERG'\nAREAMSG3_L    EQU      *-AREAMSG3\n\nAREAMSG4      DC       C'User area 2 chain after step2 in DISDMERG'\nAREAMSG4_L    EQU      *-AREAMSG4\n\nAREAMSG5      DC       C'User area 2 chain after step3 in DISDMERG'\nAREAMSG5_L    EQU      *-AREAMSG5\n\nAREAMSG6      DC       C'User area 2 chain after step4 in DISDMERG'\nAREAMSG6_L    EQU      *-AREAMSG6\n\nAREAMSG7      DC       C'ALL area chain after step4 in DISDMERG'\nAREAMSG7_L    EQU      *-AREAMSG7\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDDMERG      DSECT\n              DS       18F\n\nDUMMY_AREA    DS       (AREA_DSECT_L)X\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              DISCOMM  TYPE=DSECT\n              DISSPFD  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY     DISASMDA\n\n              IFGACB   AM=VSAM\nACB_L         EQU      *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  DISDMERG\n./ ADD NAME=DISDREAD 0118-09104-09198-0839-00199-00173-00046-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: DISDREAD                                              *\n*                                                                     *\n*  FUNCTION:                                                          *\n*    Read DSECTS (only) in a KSDS                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISDREAD CSECT\nDISDREAD AMODE 31\nDISDREAD RMODE ANY\n         USING DISDREAD,R11,R10\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     MOD0000                           SKIP EYECATCHER\nMODID    DC    CL8'DISDREAD'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         LA    R10,2048(,R11)\n         LA    R10,2048(,R10)\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDDREAD,R13\n         ITRACE ID=ENTRY,                                              +\n               DATA1=COMM_USING_KSDS\n         L     R6,COMM_USING_KSDS\n         USING KSDS_DSECT,R6\n         USING DSECT_DSECT,R5\n         MVC   DXD_RPL(RPL_L),RPL_I\n         USING IFGRPL,DXD_RPL\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*        READ the DSECTs in a KSDS                                    *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         TM    KSDS_FLAGS,$KSDS_OPEN             KSDS OPEN?\n         BO    MAIN0020                          YES\n         ITRACE ID=OPEN,                                               +\n               DATA1=KSDS_DDNAME\n         OPEN  (KSDS_ACB,INPUT),                 OPEN THE KSDS         +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n         OI    KSDS_FLAGS,$KSDS_OPEN             SET FLAG\nMAIN0020 DS    0H\n         ITRACE ID=MODCB1\n         MVC   DXD_MODCB(MODCB1_L),MODCB1_I\n         LA    R2,DXD_RPL\n         LA    R3,KSDS_ACB\n         LA    R7,PPD\n         LA    R8,PPD_KEY\n         MODCB RPL=(R2),                                               +\n               ACB=(R3),                                               +\n               AREA=(R7),                                              +\n               AREALEN=PPD_L,                                          +\n               ARG=(R8),                                               +\n               KEYLEN=L'PPD_KEY,                                       +\n               OPTCD=(KEY,KGE,DIR,SYN,MVE),                            +\n               MF=(E,DXD_MODCB)\n         ITRACE ID=MODCB_RC,                                           +\n               RDATA1=R15,                                             +\n               RDATA2=R0\n         LTR   R15,R15\n         BNZ   ERR0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         XC    PPD_SEQ,PPD_SEQ                   INITIALIZE KEY\n         MVC   PPD_NAME,COMM_BLANKS\n         ITRACE ID=POINT,                                              +\n               DATA1=PPD_KEY+0,                                        +\n               DATA2=PPD_KEY+8\n         POINT RPL=DXD_RPL                       ISSUE POINT\n         ITRACE ID=POINT_RC,                                           +\n               RDATA1=R8\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=MODCB2\n         LA    R2,DXD_RPL\n         MODCB RPL=(R2),                         CHANGE TO SEQUENTIAL  +\n               OPTCD=(SEQ),                                            +\n               MF=(E,DXD_MODCB)\n         ITRACE ID=MODCB_RC,                                           +\n               RDATA1=R15,                                             +\n               RDATA2=R0\n         LTR   R15,R15\n         BNZ   ERR0010\n         LA    R5,KSDS_DSECT_PREV                \"FIRST\" ON CHAIN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE OFF\nMAIN0030 DS    0H\n         ITRACE ID=GET\n         GET   RPL=DXD_RPL                       READ A RECORD\n         ITRACE ID=GET_RC,                                             +\n               RDATA1=R15,                                             +\n               DATA2=RPLFDBK\n         LTR   R15,R15                           SUCCESSFUL?\n         BNZ   MAIN0040                          NO\n         ITRACE ID=PPD_DATA,                                           +\n               DATA1=PPD_DATA+0,                                       +\n               DATA2=PPD_DATA+8\n         CLC   DSECT_ID,PPD_DATA+8               DSECT?\n         BNE   MAIN0030                          NO\n         GETMAIN RU,                                                   +\n               LV=DSECT_DSECT_L,                                       +\n               LOC=ANY\nNEW      USING DSECT_DSECT,R1\nPPX      USING DSECT_DSECT,PPD_DATA\n         XC    NEW.DSECT_DSECT(DSECT_DSECT_L),NEW.DSECT_DSECT\n         ST    R1,DSECT_NEXT                     CHAIN TO PREVIOUS\n         ST    R5,NEW.DSECT_PREV                 CHAIN TO NEW\n         MVC   NEW.DSECT_EYE,PPX.DSECT_EYE       COPY EYECATCHER\n         MVC   NEW.DSECT_NAME,PPX.DSECT_NAME     COPY DSECT NAME\n         ITRACE ON\n         ITRACE ID=DSECT,                                              +\n               RDATA1=R1,                                              +\n               DATA2=NEW.DSECT_NAME\n         LR    R5,R1\n         B     MAIN0030                          READ NEXT RECORD\nMAIN0040 DS    0H\n         ICM   R5,15,KSDS_DSECT_NEXT             FIRST DSECT\n         BZ    EXIT0000                          NO DSECTS\n         XC    DSECT_PREV,DSECT_PREV             FORCE PREV TO ZERO\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=MOD_ERR,                                            +\n               RDATA1=R15\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                       RESTORE REGISTER 13\n         L     R14,12(,R13)                      RESTORE REGISTERS\n         SR    R15,R15                           SET RC\n         LM    R0,R12,20(R13)                    RESTORE REGISTERS\n         BR    R14                               RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC   Q(DXDDREAD)\n\nRPL_I         RPL  AM=VSAM\nRPL_L         EQU  *-RPL_I\n\nMODCB1_I MODCB RPL=*,                                                  +\n               ACB=*,                                                  +\n               AREA=*,                                                 +\n               AREALEN=PPD_L,                                          +\n               ARG=*,                                                  +\n               KEYLEN=L'PPD_KEY,                                       +\n               OPTCD=(KEY,KGE,DIR,SYN,MVE),                            +\n               MF=L\nMODCB1_L EQU  *-MODCB1_I\n\nDSECT_ID DC   CL8'DSECT'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDDREAD      DSECT\n              DS      18F\n\nDXD_MODCB     DS      0F,(MODCB1_L)X\nDXD_RPL       DS      0F,(RPL_L)X\n\n              COPY    PPDDATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              DISCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    DISASMDA\n              COPY    ATTRS\n\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n\n              IFGRPL  AM=VSAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    REGEQU\n              END     DISDREAD\n./ ADD NAME=DISDSECT 0102-09119-09198-0840-00391-00389-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  FUNCTION:                                                          *\n*      Read in pre-processed DSECTs                                   *\n*      Chain USING blocks to DSECT blocks                             *\n*                                                                     *\n*                                                                     *\n*  The disassembler allows DSECTs to be 'pre-processed' by DISASMU1.  *\n*  Since the name of a DSECT can be more than 8 characters in length, *\n*  a PDS or PDS/E cannot be used.  I chose to use VSAM KSDSs.  The    *\n*  record key is \"DSECT_NAME+sequence nbr\" where DSECT_NAME is the    *\n*  DSECT's name and \"sequence nbr\" is a 4-byte binary sequence number *\n*  to make the key for each record unique.  The DSECT itself with     *\n*  always have sequence number zero (X'00000000').                    *\n*                                                                     *\n*  The program does a \"read by key\" with sequence number zero to      *\n*  determine if the DSECT is 'known', and then if found, read         *\n*  forward sequentially until the end of the file or the next         *\n*  record that has sequence number zero is found.                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISDSECT CSECT\nDISDSECT AMODE 31\nDISDSECT RMODE ANY\n         USING DISDSECT,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     DSCT0000                          SKIP EYECATCHER\nMODID    DC    CL8'DISDSECT'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nDSCT0000 DS    0H\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDDSECT,R13\n         USING IFGRPL,DXD_RPL\n         ITRACE ID=ENTRY\n         LA    R4,DXD_RPL\n         LA    R3,PPD_KEY\n         LA    R2,PPD\n         MODCB RPL=(R4),                                               +\n               AREA=(R2),                                              +\n               AREALEN=PPD_L,                                          +\n               ARG=(R3),                                               +\n               KEYLEN=L'PPD_KEY,                                       +\n               OPTCD=(KEY,DIR,SYN,MVE)\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT\n         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01\n         BAL   R10,DEBUG000\n* ------------------------------------------------------------------- *\n*        Determine if DSECT was in ASM,START/ASM,END                  *\n* ------------------------------------------------------------------- *\nDSCT0010 DS    0H\n         ICM   R3,15,COMM_USING_NEXT             FIRST USING BLOCK\n         USING USING_DSECT,R3                    DEFINE BASE\n         BZ    EXIT0000                          NOTHING ON CHAIN\n         XC    USING_DSECT_ADDR,USING_DSECT_ADDR\n         XC    USING_LABEL_ADDR,USING_LABEL_ADDR\nDSCT0020 DS    0H\n         ITRACE ID=FINDDSCT,                     SEARCHING FOR A DSECT +\n               RDATA1=R3,                                              +\n               DATA2=USING_DSECT_NAME\n         ICM   R2,15,COMM_DSECT_NEXT             FIRST DSECT ENTRY\n         USING DSECT_DSECT,R2                    DEFINE BASE\nDSCT0030 DS    0H\n         BZ    DSCT0040                          NOT ON EXISTING CHAIN\n         ITRACE ID=TESTDSCT,                     CHECKING A DSECT NAME +\n               DATA1=DSECT_NAME                  .. DSECT'S NAME\n         CLC   USING_DSECT_NAME,DSECT_NAME       DSECT FOUND?\n         BE    DSCT0170                          YES\n         ICM   R2,15,DSECT_NEXT                  NEXT DSECT BLOCK\n         B     DSCT0030                          LOOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        The DSECT was not processed via ASM,START/ASM,END.           *\n*                                                                     *\n*        Search the DSECT DDs.                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDSCT0040 DS    0H\n         ITRACE ID=SRCHKSDS,                     CHECKING PRE-PROCESSED+\n               DATA1=USING_DSECT_NAME\n         XC    PPD_SEQ,PPD_SEQ                   SET SEQ NBR TO ZERO\n         MVC   PPD_NAME,USING_DSECT_NAME         COPY DSECT NAME\n         LTR   R15,R15\n         BNZ   ERR0020\n         ICM   R5,15,COMM_KSDS_NEXT              ANY DSECT KSDS?\n         BZ    ERR0010                           NO\n         USING KSDS_DSECT,R5                     DEFINE BASE\nDSCT0050 DS    0H\n         LA    R2,KSDS_ACB                       ACB'S ADDRESS\n         MODCB RPL=(R4),                         UPDATE ACB ADDR IN RPL+\n               ACB=(R2)\n         GET   RPL=(R4)                          READ KSDS\n         ITRACE ID=GET_RC,                                             +\n               RDATA1=R15,                                             +\n               DATA2=RPLFDBK\n         LTR   R15,R15                           SUCCESSFUL?\n         BZ    DSCT0060                          YES..\n         ICM   R5,15,KSDS_NEXT                   NEXT\n         BNZ   DSCT0050\n         B     ERR0010                           DSECT NOT FOUND\nDSCT0060 DS    0H\n         MVC   COMM_INFO_01(L'USING_DSECT_NAME),USING_DSECT_NAME\n         MVC   COMM_INFO_02(L'KSDS_DDNAME),KSDS_DDNAME\n         MVC   COMM_INFO_03(L'KSDS_DSNAME),KSDS_DSNAME\n         MVI   COMM_MSG_ID,1\n         BAL   R9,MSG0000                        ISSUE MESSAGE\n         SR    R6,R6                             NO LABEL SO FAR\n         SR    R7,R7                             NO EQUATE SO FAR\n         USING LABEL_DSECT,R6\n         USING EQU_DSECT,R7\n         B     DSCT0080\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDSCT0070 DS    0H\n         ICM   R1,15,PPD_SEQ                     SEQ NBR\n         LA    R1,1(,R1)                         PLUS 1\n         STCM  R1,15,PPD_SEQ                     UPDATE SEQ NBR\n         ITRACE ID=GET,                                                +\n               DATA1=PPD_KEY+0,                                        +\n               DATA2=PPD_SEQ\n         GET   RPL=(R4)                          READ NEXT RECORD\n         ITRACE ID=GET_RC,                                             +\n               RDATA1=R15,                                             +\n               DATA2=RPLFDBK\n         LTR   R15,R15                           SUCCESSFUL?\n         BNZ   DSCT0170                          NO\nDSCT0080 DS    0H\n         ITRACE ID=DATA,                                               +\n               DATA1=PPD_DATA+8,                                       +\n               DATA2=PPD_DATA+12\n         CLC   DSECT_ID,PPD_DATA+8               DSECT?\n         BE    DSCT0090                          YES\n         CLC   LABEL_ID,PPD_DATA+8               LABEL?\n         BE    DSCT0110                          YES\n         CLC   EQU_ID,PPD_DATA+8                 EQUATE?\n         BE    DSCT0130                          YES\n         ABEND 1,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        New DSECT found                                              *\n*                                                                     *\n*     Add the DSECT, LABELs, EQUs to the Pre-processed DSECTs chain   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDSCT0090 DS    0H\n         ITRACE ID=DSECT,                                              +\n               DATA1=PPD_DATA+12,                                      +\n               DATA2=PPD_DATA+20\n         GETMAIN RU,                             GETMAIN DSECT BLOCK   +\n               LV=DSECT_DSECT_L,                                       +\n               LOC=ANY\n         LR    R2,R1                             COPY ADDRESS\n         ITRACE ID=NEWDSECT,                                           +\n               RDATA1=R2\nNEW      USING DSECT_DSECT,R2\n         MVC   NEW.DSECT_DSECT(DSECT_DSECT_L),PPD_DATA\n         ICM   R1,15,KSDS_DSECT_NEXT\n         BZ    DSCT0100\nNEXT     USING DSECT_DSECT,R1\n         ST    R2,NEXT.DSECT_PREV\nDSCT0100 DS    0H\n         MVC   NEW.DSECT_NEXT,KSDS_DSECT_NEXT    CHAIN EXISTING TO NEW\n         XC    NEW.DSECT_PREV,NEW.DSECT_PREV\n         ST    R2,KSDS_DSECT_NEXT\n         XC    DSECT_LABEL_PREV,DSECT_LABEL_PREV INIT LABEL BLOCK ADDR  RESS\n         XC    DSECT_LABEL_NEXT,DSECT_LABEL_NEXT INIT LABEL BLOCK ADDR  RESS\n         LA    R6,DSECT_LABEL_PREV               NO LABEL SO FAR\n         SR    R7,R7                             NO EQUATE SO FAR\n         B     DSCT0070\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        New LABEL                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDSCT0110 DS    0H\n         ITRACE ID=LABEL,                                              +\n               DATA1=PPD_DATA+12,                                      +\n               DATA2=PPD_DATA+20\n         GETMAIN RU,                                                   +\n               LV=LABEL_DSECT_L,                                       +\n               LOC=ANY\n         ITRACE ID=NEWLABEL,                                           +\n               RDATA1=R1\nNEW      USING LABEL_DSECT,R1\n         ST    R1,LABEL_NEXT\n         LR    R15,R6\n         LR    R6,R1                             COPY STORAGE ADDRESS\n         MVC   LABEL_DSECT(LABEL_DSECT_L),PPD_DATA\n         ST    R15,LABEL_PREV\n         XC    LABEL_EQU_PREV,LABEL_EQU_PREV     CLEAR EQUATE ADDRESS\n         XC    LABEL_EQU_NEXT,LABEL_EQU_NEXT     CLEAR EQUATE ADDRESS\n         LA    R7,LABEL_EQU_PREV\n         B     DSCT0070\n         DROP  NEW\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        New EQU                                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDSCT0130 DS    0H\n         ITRACE ID=EQU,                                                +\n               DATA1=PPD_DATA+12,                                      +\n               DATA2=PPD_DATA+20\n         GETMAIN RU,                                                   +\n               LV=EQU_DSECT_L,                                         +\n               LOC=ANY\n         ITRACE ID=NEWEQU,                                             +\n               RDATA1=R1\nNEW      USING EQU_DSECT,R1\n         ST    R1,EQU_NEXT\n         LR    R15,R7                            SAVE PREV ADDR\n         LR    R7,R1                             COPY NEW BLOCK ADDR\n         MVC   EQU_DSECT(EQU_DSECT_L),PPD_DATA\n         ST    R15,EQU_PREV\n         XC    EQU_NEXT,EQU_NEXT\n         B     DSCT0070                          READ NEXT RECORD\n         DROP  R6,R7,NEW\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        The referenced DSECT has been found                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDSCT0170 DS    0H\n         ITRACE ID=DSCTFND,                      DSECT LOCATED         +\n               DATA1=DSECT_NAME,                 .. DSECT NAME         +\n               RDATA2=R2                         .. DSECT BLOCK ADDR\n         ST    R2,USING_DSECT_ADDR               CHAIN TO USING BLOCK\n         XC    USING_DISP,USING_DISP             SET DISP TO ZERO\n         OC    USING_DSECT_LABEL,USING_DSECT_LABEL\n         BZ    DSCT0210                          YES\n         CLC   USING_DSECT_LABEL,COMM_BLANKS     LABEL BLANK?\n         BE    DSCT0210                          YES\n         ITRACE ID=FINDLABL,                                           +\n               DATA1=USING_DSECT_LABEL+0,                              +\n               DATA2=USING_DSECT_LABEL+8\n         ICM   R8,15,DSECT_LABEL_NEXT            FIRST LABEL\n         USING LABEL_DSECT,R8                    DEFINE BASE\n         BZ    DSCT0190                          NO LABELS\nDSCT0180 DS    0H\n         ITRACE ID=CHK_LABL,                                           +\n               DATA1=LABEL_NAME+0,                                     +\n               DATA2=LABEL_NAME+8\n         CLC   LABEL_NAME,USING_DSECT_LABEL      LABEL LOCATED?\n         BE    DSCT0200                          YES\n         ICM   R8,15,LABEL_NEXT                  NEXT LABEL\n         BNZ   DSCT0180                          LOOP\nDSCT0190 DS    0H\n         ITRACE ID=NOT_FND\n         MVC   COMM_INFO_01(63),USING_DSECT_LABEL    COPY LABEL NAME\n         MVC   COMM_INFO_02(63),USING_DSECT_NAME     COPY DSECT NAME\n         MVI   COMM_MSG_ID,2\n         BAL   R9,MSG0000                        GENERATE MESSAGE\n         OI    COMM_FLAGS,$COMM_FLAGS_ABORT\n         B     DSCT0210\nDSCT0200 DS    0H\n         ITRACE ID=LABLFND,                                            +\n               RDATA1=R8\n         ST    R8,USING_LABEL_ADDR               SET LABEL BLOCK ADDR\n         MVC   USING_DISP,LABEL_DISP             SET DISP TO LABEL\n         B     DSCT0210                          PROCESS NEXT USING\nDSCT0210 DS    0H\n         ITRACE ID=NEXTUSNG,                                           +\n               RDATA1=R3,                                              +\n               DATA2=USING_NEXT\n         ICM   R3,15,USING_NEXT                  NEXT USING BLOCK\n         BNZ   DSCT0020                          LOOP\n         B     EXIT0000                          ALL DONE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDEBUG000 DS    0H\n         L     R15,V_DISDEBUG\n         BALR  R14,R15\n         BR    R10\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVC   COMM_INFO_01(63),USING_DSECT_NAME SET DSECT'S NAME\n         MVI   COMM_MSG_ID,3\n         BAL   R9,MSG0000                        GENERATE ERROR MSG\n         MVC   PRINT_DATA(L'COMM_MSG_1),COMM_MSG_1\n         OI    COMM_FLAGS,$COMM_FLAGS_ABORT\n         B     EXIT0000                          AND EXIT\nERR0020  DS    0H\n         ITRACE ID=MODCB1E,                                            +\n               RDATA1=R15,                                             +\n               DATA2=RPLFDBK\n         DC    H'2'\nERR0030  DS    0H\n         ITRACE ID=MODCB2E,                                            +\n               RDATA1=R15,                                             +\n               DATA2=RPLFDBK\n         DC    H'3'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0000  DS    0H\n         MVC   COMM_MSG_CSECT,MODID           SET CSECT NAME\n         L     R15,V_DISMSG                   DISMSG ENTRY POINT\n         BALR  R14,R15                        BUILD MESSAGE(S)\n         LA    R2,COMM_MSG_1                  1ST MESSAGE\n         LA    R1,5                           MAX MSGS\nMSG0010  DS    0H\n         CLC   0(L'COMM_MSG_1,R2),COMM_BLANKS BLANK?\n         BER   R9                             YES\n         MVC   PRINT_DATA(L'COMM_MSG_1),0(R2) COPY MESSAGE\n         BAL   R10,PRT0000                    PRINT MESSAGE\n         LA    R2,L'COMM_MSG_1(,R2)           NEXT MESSAGE\n         BCT   R1,MSG0010\n         BR    R9\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         CLI   COMM_RUN_MODE,$COMM_RUN_BATCH  BATCH MODE?\n         BNER  R10                            NO.. DON'T PRINT\n         MVI   PRINT_COMMAND,$PRINT_PRINT     SET COMMAND\n         L     R15,V_DISPRINT                 PRINT MODULE ENTRY POINT\n         BALR  R14,R15                        LINK TO PRINT MODULE\n         BR    R10                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02\n         BAL   R10,DEBUG000\n         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670\n         LM    R14,R12,12(R13)                   RESTORE REGISTERS      ASE01680\n         SR    R15,R15                           SET RETURN CODE        ASE01690\n         BR    R14                               RETURN TO CALLER       ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMSG01    DS    0C\n         DC    C'DISDSECT01I  Entering DISDSECT'\nMSG01_L  EQU   *-MSG01\n\nMSG02    DS    0C\n         DC    C'DISDSECT02I  Exiting DISDSECT'\nMSG02_L  EQU   *-MSG02\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START      DC    Q(DXDDSECT)\n\nDSECT_ID       DC    CL8'DSECT'\nLABEL_ID       DC    CL8'LABEL'\nEQU_ID         DC    CL8'EQU'\n               LTORG\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDDSECT       DSECT\n               DS    18F\nDXD_CSECT      DS    CL8\n\nDXD_RPL        DS    (RPL_L)X\n\n               COPY  PPDDATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               COPY    DISASMDA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               DISCOMM TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               IFGACB  AM=VSAM\nACB_L          EQU     *-IFGACB\n               IFGRPL  AM=VSAM\nRPL_L          EQU     *-IFGRPL\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               COPY    REGEQU\n               END     DISDSECT\n./ ADD NAME=DISELIST 0103-09119-09198-0840-00264-00263-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISELIST                                             *\n*                                                                    *\n*  Function:                                                         *\n*                                                                    *\n*   Print ESD items                                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISELIST CSECT\nDISELIST AMODE 31\nDISELIST RMODE ANY\n         USING DISELIST,R11\n         USING DISCOMM,R12\n         USING ESD_DSECT,R6\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     MOD0000                           SKIP EYECATCHER\nMODID    DC    CL8'DISELIST'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDELIST,R13\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n         MVC   PRINT_DATA,COMM_BLANKS\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         CLI   COMM_RUN_MODE,$COMM_RUN_TSO       TSO MODE?\n         BE    MAIN0020                          YES\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0000 DS    0H\n         ITRACE ID=BATCH\n         MVC   COMM_SUBHEAD,COMM_BLANKS\n         MVC   COMM_SUBHEAD(HEADING_1_L),HEADING_1\n         MVI   PRINT_COMMAND,$PRINT_SUB_HEAD     SET PRINT COMMAND\n         L     R15,V_DISPRINT\n         BALR  R14,R15                           PRINT SUB HEADING\n         ICM   R6,15,COMM_ESD_NEXT               1ST ESD\n         BZ    MAIN0300                          NO ESD ITEMS\nMAIN0010 DS    0H\n         BAL   R5,MAIN0200                       BUILD DETAIL\n         MVI   PRINT_COMMAND,$PRINT_PRINT        SET PRINT COMMAND\n         L     R15,V_DISPRINT\n         BALR  R14,R15                           PRINT\n         ICM   R6,15,ESD_NEXT                    NEXT ESD ITEM\n         BNZ   MAIN0010                          LOOP\n         B     EXIT0000                          ALL DONE\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0020 DS    0H\n         ITRACE ID=TSO,                                                +\n               DATA1=COMM_ESD_NEXT\n         ICM   R6,15,COMM_ESD_NEXT               1ST ESD\n         BZ    MAIN0300                          NO ESD ITEMS\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Build data for ESD display                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0030 DS    0H\n         L     R0,COMM_VDATA_ADDR                VDATA ADDR\n         L     R1,COMM_VDATA_SIZE                VDATA SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                            INITIALIZE VDATA\n         ST    R6,DXD_FIRST_DISPLAYED            SAVE 1ST DISPLAYED\n         L     R7,SPF_VDEPTH                     SCREEN DEPTH\n         L     R8,COMM_VDATA_ADDR                VDATA ADDR\nMAIN0040 DS    0H\n         ST    R6,DXD_LAST_DISPLAYED             SAVE LAST ON DISPLAY\n         BAL   R5,MAIN0200                       BUILD DETAIL\n         MVC   0(MSG01_L,R8),PRINT_DATA          COPY TO VDATA\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0050\n         B     MAIN0060\nMAIN0050 DS    0H\n         ICM   R6,15,ESD_NEXT                    NEXT ESD ITEM\n         BNZ   MAIN0040                          PROCESS THIS ESD ITEM\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Display the ESD items                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0060 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_SPF_PANEL,DISESD             SET PANEL NAME\n         L     R15,V_DISDISP\n         BALR  R14,R15                           DISPLAY ESD INFO\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15,                                             +\n               DATA2=SPF_ZVERB\n         LTR   R15,R15                           RC = 0?\n         BNZ   EXIT0000                          NO\n*---------------------------------------------------------------------*\n*        Process scrolling                                            *\n*---------------------------------------------------------------------*\n         CLI   SPF_ZVERB,C'B'                    BOTTOM?\n         BE    MAIN0100\n         CLI   SPF_ZVERB,C'D'                    DOWN?\n         BE    MAIN0120\n         CLI   SPF_ZVERB,C'T'                    TOP?\n         BE    MAIN0130\n         CLI   SPF_ZVERB,C'U'                    UP?\n         BE    MAIN0140\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0100 DS    0H\n         ITRACE ID=BOTTOM\n         ICM   R6,15,COMM_ESD_NEXT               FIRST ON CHAIN\n         BZ    EXIT0000                          SHOULD NOT HAPPEN!\nMAIN0110 DS    0H\n         ICM   R1,15,ESD_NEXT                    NEXT ON CHAIN?\n         BZ    MAIN0030                          NO..\n         LR    R6,R1                             COPY ADDR\n         B     MAIN0110\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0120 DS    0H\n         ITRACE ID=DOWN\n         L     R6,DXD_LAST_DISPLAYED             LAST ITEM DISPLAYED\n         B     MAIN0030\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0130 DS    0H\n         ITRACE ID=TOP\n         L     R6,COMM_ESD_NEXT                  FIRST ESD ITEM\n         B     MAIN0030\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0140 DS    0H\n         ITRACE ID=UP\n         ICM   R6,15,DXD_FIRST_DISPLAYED         FIRST ON DISPLAY\n         BZ    EXIT0000                          SHOULD NOT HAPPEN!\n         L     R7,SPF_ZSCROLLN                   LINES ON DISPLAY\nMAIN0150 DS    0H\n         ICM   R1,15,ESD_PREV                    PREV ON CHAIN?\n         BZ    MAIN0030                          NO..\n         LR    R6,R1                             COPY ADDR\n         BCT   R7,MAIN0150                       LOOP\n         B     MAIN0030\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0200 DS    0H\nP        USING MSG01,PRINT_DATA\n         MVI   P.MSG01_ATTR,$ATTR_NORMAL\n         MVC   P.MSG01_NAME,ESD_NAME\n         MVC   P.MSG01_TYPE,ESD_TYPE\n         MVC   P.MSG01_TYPE_QUAL,ESD_TYPE_QUAL\n         MVC   P.MSG01_RESIDENT,ESD_RESIDENT\n         MVC   P.MSG01_TARGET,ESD_TARGET\n         L     R0,ESD_LENGTH                     LENGTH\n         MVC   P.MSG01_LENGTH,=X'40202020202020202120'\n         CVD   R0,COMM_DWORD\n         ED    P.MSG01_LENGTH,COMM_DWORD+3       EDIT LENGTH\n         UNPK  P.MSG01_LENGTH_H(9),ESD_LENGTH(5)\n         TR    P.MSG01_LENGTH_H,COMM_HEXCHAR\n         MVI   P.MSG01_LENGTH_H-1,C'('\n         MVI   P.MSG01_LENGTH_H+8,C')'\n         UNPK  P.MSG01_ELEM_OFFSET(9),ESD_ELEM_OFFSET(5)\n         TR    P.MSG01_ELEM_OFFSET(8),COMM_HEXCHAR\n         MVI   P.MSG01_ELEM_OFFSET+8,C' '\n         UNPK  P.MSG01_CLASS_OFFSET(9),ESD_CLASS_OFFSET(5)\n         TR    P.MSG01_CLASS_OFFSET(8),COMM_HEXCHAR\n         MVI   P.MSG01_CLASS_OFFSET+8,C' '\n         CLC   P.MSG01_TYPE_QUAL,=C'PR'\n         BE    MAIN0210\n         CLC   P.MSG01_TYPE,=C'ED'\n         BNER  R5\nMAIN0210 DS    0H\n         MVI   P.MSG01_ATTR,$ATTR_HIGH_YELLOW\n         BR    R5\n         DROP  P\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0300 DS    0H\n         ITRACE ID=NO_ESD\n         MVC   SPF_MSG_3(MSG_02_L),MSG_02\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                        RESTORE REGISTER 13   ASE01670\n         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680\n         LR    R15,R2                            SET RC\n         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680\n         BR    R14                               RETURN TO CALLER       ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START     DC   Q(DXDELIST)\n\nHEADING_1     DC    C'0ESD ITEMS'\nHEADING_1_L   EQU   *-HEADING_1\n\nDISESD              DC   CL8'DISESD'\n\nMSG01               DS   0C\nMSG01_ATTR          DC   AL1($ATTR_NORMAL)\nMSG01_NAME          DC   CL8' '\n                    DC   CL1' '\nMSG01_TYPE          DC   CL2' '\n                    DC   C' '\nMSG01_TYPE_QUAL     DC   CL2' '\n                    DC   C' '\nMSG01_LENGTH        DC   X'40202020202020202120'\n                    DC   C' (HEX '\nMSG01_LENGTH_H      DC   CL8' '\n                    DC   C') '\nMSG01_ELEM_OFFSET   DC   CL8' '\n                    DC   C'  '\nMSG01_CLASS_OFFSET  DC   CL8' '\n                    DC   C' '\nMSG01_RESIDENT      DC   CL8' '\n                    DC   CL2' '\nMSG01_TARGET        DC   CL8' '\nMSG01_L             EQU  *-MSG01\n\nMSG_02              DC   C'No ESD items to display'\nMSG_02_L            EQU  *-MSG_02\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDELIST              DSECT\n                      DS   18F\nDXD_CSECT             DS   CL8\n\nDXD_FIRST_DISPLAYED   DS   A\nDXD_LAST_DISPLAYED    DS   A\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              DISCOMM TYPE=DSECT\n              DISSPFD TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              COPY    DISASMDA\n\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              COPY    ATTRS\n              COPY    REGEQU\n              END     DISELIST\n./ ADD NAME=DISESD   0101-09119-09198-0840-00258-00258-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISESD                                               *\n*                                                                    *\n*  Function:                                                         *\n*   Obtain the requested LMOD'S ESD info                             *\n*                                                                    *\n*   DISBIND has already established a dialog                         *\n*                                                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISESD   CSECT\nDISESD   AMODE 31\nDISESD   RMODE ANY\n         USING DISESD,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R11,R15               SET BASE REG\n         B     MOD0000               SKIP EYECATCHER\n         DC    CL8'DISESD'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS  WORK AREA\n         A     R15,DXD_START         PLUS DISP TO OUR PORTION\n         ST    R13,4(,R15)           CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R15,8(,R13)           CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R15               SET SAVE AREA ADDRESS\n         USING DXDESD,R13\n         ITRACE ID=ENTRY\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT\n         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01\n         BAL   R10,DEBUG000\n* ------------------------------------------------------------------- *\n*        OBTAIN AND INITIALIZE ESD BUFFER                             *\n* ------------------------------------------------------------------- *\n         ITRACE ID=GET_SECT\n         IEWBUFF FUNC=GETBUF,                                          +\n               PREFIX=IBMESD,                                          +\n               TYPE=ESD\n         ST    R8,DXD_BUFFER\n         ITRACE ID=INIT_ESD,                                           +\n               RDATA1=R8,                                              +\n               RDATA2=R7\n         IEWBUFF FUNC=INITBUF,                                         +\n               PREFIX=IBMESD,                                          +\n               TYPE=ESD\n         XC    DXD_CURSOR,DXD_CURSOR\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\nESD0000  DS    0H\n         ITRACE ID=GETD_ESD,                                           +\n               DATA1=COMM_CSECT_NAME_LENGTH,                           +\n               DATA2=COMM_CSECT\n         L     R8,DXD_BUFFER\n         LA    R7,IBMESD_ESDH_END\n         IEWBIND FUNC=GETD,                                            +\n               VERSION=5,                                              +\n               WORKMOD=COMM_DIALOG_WORKMOD,                            +\n               CLASS=B_ESD,                                            +\n               SECTION=COMM_CSECT_NAME_LENGTH,                         +\n               AREA=IBMESD_IEWBESD,                                    +\n               CURSOR=DXD_CURSOR,                                      +\n               COUNT=DXD_ESD_RETURNED,                                 +\n               RETCODE=DXD_RETURN_CODE,                                +\n               RSNCODE=DXD_REASON_CODE,                                +\n               MF=(E,DXD_IEWBIND,COMPLETE)\n         ITRACE ID=GETD_RC,                                            +\n               DATA1=DXD_RETURN_CODE,                                  +\n               DATA2=DXD_REASON_CODE\n         CLC   DXD_RETURN_CODE,F8\n         BH    ERR0010\n         BE    ERR0020                   NO DATA\n         CLC   DXD_RETURN_CODE,F4\n         BL    ESD0020\n         CLC   DXD_REASON_CODE,X_83000800\n         BE    ESD0020\n         CLC   DXD_REASON_CODE,X_83000801\n         BE    EXIT0000\nESD0020  DS    0H\n         ICM   R9,15,DXD_ESD_RETURNED\n         LA    R7,IBMESD_ESDH_END\n         USING IBMESD_ESD_ENTRY,R7\nESD0030  DS    0H\n         ITRACE ID=ESD,                                                +\n               RDATA1=R7,                                              +\n               RDATA2=R9\n         GETMAIN RU,                                                   +\n               LV=ESD_DSECT_L,                                         +\n               LOC=ANY\n         LR    R6,R1\n         USING ESD_DSECT,R6\n         L     R1,COMM_ESD_NBR\n         LA    R1,1(,R1)\n         ST    R1,COMM_ESD_NBR\n         MVC   ESD_EYE,ESD_ID\n         MVC   ESD_NAME,COMM_BLANKS\n         MVC   ESD_RESIDENT,COMM_BLANKS\n         MVC   ESD_TARGET,COMM_BLANKS\n         SR    R1,R1\n         ICM   R1,3,IBMESD_ESD_NAME_CHARS\n         BZ    ESD0050\n         L     R2,IBMESD_ESD_NAME_PTR\n         C     R1,F8\n         BNH   ESD0040\n         L     R1,F8\nESD0040  DS    0H\n         BCTR  R1,0\n         EX    R1,NAME_MVC\nESD0050  DS    0H\n         MVC   ESD_TYPE,IBMESD_ESD_TYPE\n         MVC   ESD_TYPE_QUAL,IBMESD_ESD_TYPE_QUAL\n         SR    R1,R1\n         ICM   R1,3,IBMESD_ESD_RESIDENT_CHARS\n         BZ    ESD0070\n         L     R2,IBMESD_ESD_RESIDENT_PTR\n         C     R1,F8\n         BNH   ESD0060\n         L     R1,F8\nESD0060  DS    0H\n         BCTR  R1,0\n         EX    R1,RES_MVC\nESD0070  DS    0H\n         ICM   R1,3,IBMESD_ESD_TARGET_CHARS\n         BZ    ESD0090\n         C     R1,F8\n         BNH   ESD0080\n         L     R1,F8\nESD0080  DS    0H\n         BCTR  R1,0\n         L     R2,IBMESD_ESD_TARGET_PTR\n         EX    R1,TARG_MVC\nESD0090  DS    0H\n         MVC   ESD_LENGTH,IBMESD_ESD_LENG\n         MVC   ESD_ELEM_OFFSET,IBMESD_ESD_ELEM_OFFSET\n         MVC   ESD_CLASS_OFFSET,IBMESD_ESD_CLASS_OFFSET\n         CLC   ESD_NAME,B_TEXT\n         BNE   ESD0100\n         MVC   COMM_CSECT_LENGTH,IBMESD_ESD_LENG\nESD0100  DS    0H\n         CLC   COMM_CSECT,ESD_NAME\n         BNE   ESD0110\n         MVC   COMM_CSECT_EP,ESD_ELEM_OFFSET\nESD0110  DS    0H\n         ICM   R1,15,COMM_ESD_NEXT\n         BZ    ESD0120\nPREV     USING ESD_DSECT,R1\n         ST    R6,PREV.ESD_PREV\n         DROP  PREV\nESD0120  DS    0H\n         MVC   ESD_NEXT,COMM_ESD_NEXT\n         ST    R6,COMM_ESD_NEXT\n         LA    R7,IBMESD_ESD_END\n         BCT   R9,ESD0030\n         CLC   DXD_REASON_CODE,X_83000800\n         BNE   ESD0000\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\n         L     R8,DXD_BUFFER\n         IEWBUFF FUNC=FREEBUF,                                         +\n               PREFIX=IBMESD,                                          +\n               TYPE=ESD\n         B     EXIT0000\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\nNAME_MVC MVC   ESD_NAME(0),0(R2)\nRES_MVC  MVC   ESD_RESIDENT(0),0(R2)\nTARG_MVC MVC   ESD_TARGET(0),0(R2)\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\nERR0010  DS    0H\n         DC    H'1'\nERR0020  DS    0H\n         DC    H'2'\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\nDEBUG000 DS    0H\n         L     R15,V_DISDEBUG\n         BALR  R14,R15\n         BR    R10\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02\n         BAL   R10,DEBUG000\n         L     R13,4(,R13)           RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START     DC   Q(DXDESD)\nF4            DC   F'4'\nF8            DC   F'8'\nB_ESD         DC   XL2'5',C'B_ESD'\nB_TEXT        DC   CL8'B_TEXT'\nX_83000800    DC   X'83000800'\nX_83000801    DC   X'83000801'\nEDIT_WORD     DC   X'40202020202020202120'\nESD_ID        DC   CL8'ESD'\n\n         IEWBUFF FUNC=MAPBUF,                                          +\n               TYPE=ESD,                                               +\n               PREFIX=IBMESD,                                          +\n               HEADREG=R8,                                             +\n               ENTRYREG=R7,                                            +\n               SIZE=50,                                                +\n               VERSION=5\n\n              IEWBIND MF=(L,IEWBIND_I)\nIEWBIND_L     EQU  *-IEWBIND_I\n\nMSG01        DS    0C\n             DC    C'DISESD01I    Entering DISESD'\nMSG01_L      EQU   *-MSG01\n\nMSG02        DS    0C\n             DC    C'DISESD02I    Exiting DISESD'\nMSG02_L      EQU   *-MSG02\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDESD            DSECT\n                  DS   18F\nDXD_CSECT         DS   CL8\nDXD_RETURN_CODE   DS   F\nDXD_REASON_CODE   DS   F\n\nDXD_BUFFER        DS   A\n\nDXD_CURSOR        DS   F\nDXD_ESD_RETURNED  DS   F\n\nDXD_IEWBIND       DS   0F,(IEWBIND_L)X\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n                  DISCOMM  TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n                  COPY     DISASMDA\n\n                  IFGACB   AM=VSAM\nACB_L             EQU      *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY REGEQU\n         END  DISESD\n./ ADD NAME=DISGEN   0109-09119-09198-0841-00602-00580-00000-SOURCE\n* -------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISGEN                                               *\n*                                                                    *\n*  Function:                                                         *\n*   Generate source code                                             *\n*                                                                    *\n* -------------------------------------------------------------------*\nDISGEN   CSECT\nDISGEN   AMODE 31\nDISGEN   RMODE ANY\n         USING DISGEN,R11\n         USING DISCOMM,R12\n         USING LABEL_DSECT,R7\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'DISGEN'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXDGEN,R13\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         MVC   COMM_SOURCE(COMM_SOURCE_L),COMM_BLANKS\n         MVC   DXD_STATEMENT,COMM_BLANKS\n         MVC   DXD_EDITWORD_FILL,COMM_BLANKS\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT\n         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01\n         BAL   R9,DEBUG000\n         MVC   COMM_SUBHEAD,COMM_BLANKS\n         MVC   COMM_SUBHEAD(HEADING_L),HEADING\n         MVI   PRINT_COMMAND,$PRINT_HEADING\n         L     R15,V_DISPRINT\n         BALR  R14,R15                        PRINT HEADING\n         TM    COMM_DDS,$DISPUNCH_DD          DISPUNCH ALLOCATED?\n         BNO   INIT0000                       NO\n         ITRACE ID=OPEN_PUN\n         OPEN  (DISPUNCH_DCB,OUTPUT),                                  +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n*  ------------------------------------------------------------------ *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINIT0000 DS    0H\n         TM    COMM_FLAGS,$COMM_AREA_DEBUG\n         BNO   INIT0010\n         L     R2,COMM_DISSPFD\n         USING DISSPFD,R2\n         MVC   SPF_MSG_3(AREAMSG1_L),AREAMSG1\n         L     R1,COMM_ALL_AREA_NEXT\n         L     R15,V_DISXLIST\n         BALR  R14,R15\n         DROP  R2\n* ------------------------------------------------------------------- *\n*        Reset flags                                                  *\n* ------------------------------------------------------------------- *\nINIT0010 DS    0H\n         ICM   R8,15,COMM_ALL_AREA_NEXT       1ST DATA/INSTR BLOCK\n         BZ    INIT0030                       NO AREAS\n         USING AREA_DSECT,R8\n         OC    AREA_BEGIN,AREA_BEGIN          DISP ZERO?\n         BZ    INIT0020                       YES\n         DC    H'0'\nINIT0020 DS    0H\n         NI    AREA_FLAGS,255-$AREA_LABEL_GENNED\n         ICM   R8,15,AREA_NEXT                NEXT AREA\n         BNZ   INIT0020\n         DROP  R8\nINIT0030 DS    0H\n         ICM   R6,15,COMM_BASE_NEXT           1ST BASE\n         BZ    INIT0050\n         USING BASE_DSECT,R6\nINIT0040 DS    0H\n         MVI   BASE_FLAGS,0                   RESET FLAGS\n         ICM   R6,15,BASE_NEXT                NEXT BASE\n         BNZ   INIT0040\n* ------------------------------------------------------------------- *\n*        Generate CSECT statement                                     *\n* ------------------------------------------------------------------- *\nINIT0050 DS    0H\n         MVC   COMM_SOURCE_LABEL(L'COMM_CSECT),COMM_CSECT\n         MVC   COMM_SOURCE_OPCODE,OP_CSECT\n         BAL   R9,PUN0000\n* ------------------------------------------------------------------- *\n*        Generate ENTRY statements                                    *\n* ------------------------------------------------------------------- *\nGEN0010  DS    0H\n         ICM   R8,15,COMM_ESD_NEXT            1ST ESD\n         BZ    GEN0040\n         USING ESD_DSECT,R8\nGEN0020  DS    0H\n         CLC   =C'LD',ESD_TYPE                'LD'?\n         BNE   GEN0030                        NO\n         MVC   COMM_SOURCE_OPCODE,OP_ENTRY\n         MVC   COMM_SOURCE_OPERANDS(L'ESD_NAME),ESD_NAME\n         BAL   R9,PUN0000                     OUTPUT THE ENTRY STMT\nGEN0030  DS    0H\n         ICM   R8,15,ESD_NEXT\n         BNZ   GEN0020\n         DROP  R8\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Generate                                                     *\n*                                                                     *\n*   All object code will be described by AREA blocks.                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nGEN0040  DS    0H\n         ICM   R8,15,COMM_ALL_AREA_NEXT       1ST DATA/INSTR BLOCK\n         BNZ   GEN0050\n         USING AREA_DSECT,R8\nGEN0050  DS    0H\n         ITRACE ID=GEN0050,                                            +\n               DATA1=AREA_BEGIN,                                       +\n               DATA2=AREA_END\n         ICM   R7,15,AREA_LABEL               LABEL BLOCK ADDRESS?\n         BZ    GEN0100                        NO\n         TM    AREA_FLAGS,$AREA_LABEL_GENNED  LABEL GENNED?\n         BO    GEN0100                        YES\n         OI    AREA_FLAGS,$AREA_LABEL_GENNED  SET FLAG\n         MVC   COMM_SOURCE_LABEL,LABEL_NAME   COPY LABEL\n         MVC   COMM_SOURCE_OPCODE,OP_DS       SET OPCODE\n         MVC   COMM_SOURCE_OPERANDS(2),=C'0C' USE \"0C\" ON DATA AREAS\n         CLI   AREA_TYPE,$AREA_DATA           DATA LABEL?\n         BE    GEN0060                        YES\n         MVC   COMM_SOURCE_OPERANDS(2),=C'0H' USE \"0H' ON INSTRUCTIONS\nGEN0060  DS    0H\n         UNPK  COMM_SOURCE_DISP(9),AREA_BEGIN(5)\n         TR    COMM_SOURCE_DISP,COMM_HEXCHAR\n         MVI   COMM_SOURCE_DISP+8,C' '\n         BAL   R9,PUN0000\n* ------------------------------------------------------------------- *\n*        Generate USING or DROP statements                            *\n* ------------------------------------------------------------------- *\nGEN0100  DS    0H\n         ICM   R6,15,COMM_USING_NEXT          1ST USING\n         USING USING_DSECT,R6\n         BZ    GEN0200                        NO USINGS\nGEN0110  DS    0H\n         ITRACE ID=USING,                                              +\n               RDATA1=R6,                                              +\n               DATA2=USING_BEGIN\n         CLC   USING_BEGIN,AREA_BEGIN         AT OR BELOW THIS AREA?\n         BNH   GEN0120                        YES.. GEN USING\n         CLC   USING_END,AREA_END             ABOVE THIS AREA?\n         BNL   GEN0130                        YES\n         B     GEN0190\nGEN0120  DS    0H\n         TM    USING_FLAG,$USING_GENNED       USING ALREADY GENNED?\n         BO    GEN0190                        YES\n         ITRACE ID=GEN_USNG\n         OI    USING_FLAG,$USING_GENNED       SET FLAG\n         MVC   COMM_SOURCE_OPCODE,OP_USING    SET OPCODE\n         B     GEN0140\nGEN0130  DS    0H\n         TM    USING_FLAG,$DROP_GENNED        DROP ALREADY GENNED?\n         BO    GEN0190                        YES\n         ITRACE ID=GEN_DROP\n         OI    USING_FLAG,$DROP_GENNED        SET FLAG\n         MVC   COMM_SOURCE_OPCODE,OP_DROP     SET OPCODE\n         LA    R1,COMM_SOURCE_OPERANDS\n         B     GEN0180\nGEN0140  DS    0H\n         MVC   COMM_SOURCE_OPERANDS(63),USING_DSECT_LABEL\n         CLC   USING_DSECT_LABEL,COMM_BLANKS  LABEL NAME?\n         BH    GEN0150                        YES\n         MVC   COMM_SOURCE_OPERANDS(63),USING_DSECT_NAME\nGEN0150  DS    0H\n         LA    R1,COMM_SOURCE_OPERANDS\nGEN0160  DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BE    GEN0170                        YES\n         LA    R1,1(,R1)                      NEXT\n         B     GEN0160\nGEN0170  DS    0H\n         MVI   0(R1),C','                     INSERT COMMA\nGEN0180  DS    0H\n         MVC   1(3,R1),USING_CHAR_REGISTER    COPY REGISTER NUMBER\n         BAL   R9,PUN0000\nGEN0190  DS    0H\n         ITRACE ID=NEXTUSNG\n         ICM   R6,15,USING_NEXT               NEXT USING\n         BNZ   GEN0110\n         DROP  R6\n* ------------------------------------------------------------------- *\n*        Generate USING or DROP for BASE statements                   *\n* ------------------------------------------------------------------- *\nGEN0200  DS    0H\n         ICM   R6,15,COMM_BASE_NEXT           1ST BASE\n         BZ    GEN0300\n         USING BASE_DSECT,R6\nGEN0210  DS    0H\n         ITRACE ID=BASE,                                               +\n               DATA1=BASE_BEGIN,                                       +\n               DATA2=AREA_BEGIN\n         CLC   BASE_BEGIN,AREA_BEGIN          BASE BELOW THIS AREA\n         BH    GEN0290                        YES\n         TM    BASE_FLAGS,$BASE_GENNED        USING GENNED?\n         BO    GEN0280                        YES\n         ITRACE ID=BASEUSNG,                                           +\n               DATA1=BASE_BEGIN,                                       +\n               DATA2=AREA_BEGIN\n         OI    BASE_FLAGS,$BASE_GENNED        SET FLAG\n         MVC   COMM_SOURCE_OPCODE,OP_USING    SET OP CODE\n         MVC   COMM_SOURCE_OPERANDS(L'COMM_CSECT),COMM_CSECT\n         LA    R1,COMM_SOURCE_OPERANDS\nGEN0220  DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BE    GEN0230                        YES\n         LA    R1,1(,R1)                      NEXT\n         B     GEN0220\nGEN0230  DS    0H\n         ICM   R0,15,BASE_DISP                DISP BASE REFERS TO\n         BZ    GEN0270\n         MVI   0(R1),C'+'                     INSERT A PLUS\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD\n         ED    DXD_EDITWORD,COMM_DWORD+4      EDIT DISP\n         LA    R2,DXD_EDITWORD\nGEN0240  DS    0H\n         CLI   0(R2),C' '                     BLANK?\n         BNE   GEN0250                        NO\n         LA    R2,1(,R2)                      NEXT\n         B     GEN0240\nGEN0250  DS    0H\n         MVC   1(8,R1),0(R2)                  COPY DISP\nGEN0260  DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BE    GEN0270                        YES\n         LA    R1,1(,R1)\n         B     GEN0260\nGEN0270  DS    0H\n         MVI   0(R1),C','\n         MVI   1(R1),C'R'\n         SR    R2,R2\n         IC    R2,BASE_REGISTER               BASE\n         SLL   R2,1                           MULTIPLY BY 2\n         LA    R2,REG_NAMES(R2)\n         MVC   2(2,R1),0(R2)\n         BAL   R9,PUN0000\n         B     GEN0290\nGEN0280  DS    0H\n         CLC   BASE_END,AREA_END              ABOVE THIS AREA\n         BE    GEN0290                        NO\n         BH    GEN0290                        NO\n         TM    BASE_FLAGS,$BASE_DROPPED       DROPPED?\n         BO    GEN0290                        YES\n         ITRACE ID=BASEDROP,                                           +\n               DATA1=BASE_BEGIN,                                       +\n               DATA2=AREA_BEGIN\n         OI    BASE_FLAGS,$BASE_DROPPED       SET FLAG\n         MVC   COMM_SOURCE_OPCODE,OP_DROP\n         MVI   COMM_SOURCE_OPERANDS,C'R'\n         SR    R2,R2\n         IC    R2,BASE_REGISTER               BASE\n         SLL   R2,1                           MULTIPLY BY 2\n         LA    R2,REG_NAMES(R2)\n         MVC   COMM_SOURCE_OPERANDS+1(2),0(R2)\n         BAL   R9,PUN0000\nGEN0290  DS    0H\n         ICM   R6,15,BASE_NEXT\n         BNZ   GEN0210\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nGEN0300  DS    0H\n         ITRACE ID=GENAREA,                                            +\n               DATA1=AREA_BEGIN,                                       +\n               DATA2=0(R8)\n         MVC   COMM_GEN_LENGTH,AREA_LENGTH    SET LENGTH\n         ICM   R6,15,AREA_BEGIN               DISP TO OBJECT CODE\n         A     R6,COMM_CSECT_TEXT             PLUS TEXT BASE\n         CLI   AREA_TYPE,$AREA_DATA           AT A DATA AREA?\n         BE    GEN0350                        YES\n         CLI   AREA_TYPE,$AREA_INSTRUCTION    AT AN INSTRUCTION?\n         BE    GEN0400\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nGEN0350  DS    0H\n         ITRACE ID=GEN_DC\n         L     R5,COMM_OPCODE_TABLE_ADDR      OPCODE TABLE\n         L     R5,0(R5)                       DC ENTRY\n         USING OPCODE_DSECT,R5\n         L     R15,V_GENDC                    GENDC ENTRY POINT\n         BALR  R14,R15                        GENERATE DC\n         B     GEN0500\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nGEN0400  DS    0H\n         ITRACE ID=GEN_INST\n         MVC   COMM_GEN_DISP,AREA_BEGIN       SET DISP\n         SR    R2,R2\n         IC    R2,0(R6)                       OPCODE\n         SLL   R2,2                           MULTIPLY BY 4\n         A     R2,COMM_OPCODE_TABLE_ADDR      PLUS OPCODE TABLE BASE\n         L     R5,0(R2)                       OPCODE ENTRY\n         ITRACE ID=OPCODE,                                             +\n               RDATA1=R5,                                              +\n               DATA2=OPCODE_MACHINE\n         LA    R4,FORMAT_TABLE\n         USING FORMAT_DSECT,R4\nGEN0410  DS    0H\n         CLC   FORMAT_FORMAT,OPCODE_FORMAT    LOCATED FORMAT?\n         BE    GEN0420\n         LA    R4,FORMAT_L(R4)                NEXT FORMAT\n         CLI   0(R4),X'FF'                    END OF TABLE?\n         BNE   GEN0410                        NO\n         DC    H'0'\nGEN0420  DS    0H\n         ITRACE ID=FORMAT,                                             +\n               RDATA1=R4,                                              +\n               DATA2=FORMAT_ADDR\n         ICM   R15,15,FORMAT_ADDR\n         BALR  R14,R15\nGEN0430  DS    0H\n         SR    R15,R15\n* ------------------------------------------------------------------- *\n*                                                                     *\n*       Generate the displacement, and the object text for the        *\n*       current instruction or DC.                                    *\n*                                                                     *\n*       Recompute the text address (R6)                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nGEN0500  DS    0H\n         STC   R15,DXD_GEN_RC\n         ITRACE ID=GEN_RC,                                             +\n               RDATA1=R15\n         L     R6,COMM_GEN_DISP\n         A     R6,COMM_CSECT_TEXT\n         ICM   R1,15,COMM_GEN_LENGTH          LENGTH\n         BZ    GEN0520                        NO OBJECT AT THIS POINT\n         BCTR  R1,0\n         EX    R1,MVC_01\n         CLI   AREA_TYPE,$AREA_INSTRUCTION    AN INSTRUCTION?\n         BNE   GEN0510                        NO\n         UNPK  DXD_UNPACK_OUT_1(5),DXD_UNPACK_IN+0(3)\n         UNPK  DXD_UNPACK_OUT_2(5),DXD_UNPACK_IN+2(3)\n         UNPK  DXD_UNPACK_OUT_3(5),DXD_UNPACK_IN+4(3)\n         UNPK  DXD_UNPACK_OUT_4(5),DXD_UNPACK_IN+6(3)\n         TR    DXD_UNPACK_OUT_1,COMM_HEXCHAR\n         TR    DXD_UNPACK_OUT_2,COMM_HEXCHAR\n         TR    DXD_UNPACK_OUT_3,COMM_HEXCHAR\n         TR    DXD_UNPACK_OUT_4,COMM_HEXCHAR\n         MVI   DXD_BLANK_1,C' '\n         MVI   DXD_BLANK_2,C' '\n         MVI   DXD_BLANK_3,C' '\n         LA    R2,LENGTH_TABLE(R1)\n         IC    R1,0(R2)\n         EX    R1,MVC_02\n         B     GEN0520\nGEN0510  DS    0H\n         UNPK  DXD_UNPACK_OUT+0(9),DXD_UNPACK_IN+0(5)\n         UNPK  DXD_UNPACK_OUT+8(9),DXD_UNPACK_IN+4(5)\n         TR    DXD_UNPACK_OUT(16),COMM_HEXCHAR\n         ICM   R1,15,COMM_GEN_LENGTH\n         SLL   R1,1\n         BCTR  R1,0\n         EX    R1,MVC_02\nGEN0520  DS    0H\n         TM    OPCODE_FLAGS,$OPCODE_CCA+$OPCODE_CCC+$OPCODE_CCL\n         BZ    GEN0530\n         ITRACE ID=SAVE_CC,                                            +\n               DATA1=OPCODE_FLAGS\n         MVC   COMM_CC,OPCODE_FLAGS           SAVE CONDITION CODE TYPE\nGEN0530  DS    0H\n         UNPK  COMM_SOURCE_DISP(9),COMM_GEN_DISP(5)\n         TR    COMM_SOURCE_DISP,COMM_HEXCHAR\n         MVI   COMM_SOURCE_DISP+8,C' '\n         MVC   COMM_SOURCE_OPCODE,OPCODE_MNEMONIC\n         BAL   R9,PUN0000\n         CLI   DXD_GEN_RC,0                   AREA ALL PROCESSED?\n         BNE   GEN0050                        NO\n         ITRACE ID=NEXTAREA,                                           +\n               DATA1=AREA_NEXT\n         ICM   R8,15,AREA_NEXT                NEXT AREA\n         BNZ   GEN0050                        PROCESS THIS AREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TM    COMM_FLAGS,$COMM_ASSEM         ASSEMBLER SOURCE?\n         BO    GEN0610                        YES\n         LA    R2,REG_NAMES\nGEN0600  DS    0H\n         MVC   COMM_SOURCE_OPCODE(3),=C'EQU'\n         MVI   COMM_SOURCE_LABEL,C'R'\n         MVC   COMM_SOURCE_LABEL+1(2),0(R2)\n         MVC   COMM_SOURCE_OPERANDS(2),0(R2)\n         BAL   R9,PUN0000\n         LA    R2,2(R2)\n         CLI   0(R2),X'FF'\n         BNE   GEN0600\n         B     GEN0640\n* ------------------------------------------------------------------- *\n*        Copy assembler source                                        *\n* ------------------------------------------------------------------- *\nGEN0610  DS    0H\n         ITRACE ID=COPYSRC\n         USING DCBE,SYSIN_DCBE\n         LA    R1,GEN0630\n         ST    R1,DCBEEODA                    SET EOD ADDRESS\n         ITRACE ID=OPEN\n         OPEN  (SYSIN_DCB,INPUT),                                      +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\nGEN0620  DS    0H\n         ITRACE ID=READ_WRT\n         GET   SYSIN_DCB,DXD_STATEMENT        READ FROM SYSIN\n         PUT   DISPUNCH_DCB,DXD_STATEMENT     WRITE TO DISPUNCH\n         B     GEN0620\nGEN0630  DS    0H\n         ITRACE ID=CLOSE\n         CLOSE SYSIN_DCB,                                              +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nGEN0640  DS    0H\n         ITRACE ID=GEN_END\n         MVC   COMM_SOURCE_OPCODE,OP_END\n         MVC   COMM_SOURCE_OPERANDS(L'COMM_CSECT),COMM_CSECT\n         BAL   R9,PUN0000\n         TM    COMM_DDS,$DISPUNCH_DD          DISPUNCH DD ALLOCATED?\n         BNO   EXIT0000                       NO\n         ITRACE ID=CLOS_PUN\n         CLOSE DISPUNCH_DCB,                  CLOSE DISPUNCH           +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDEBUG000 DS    0H\n         L     R15,V_DISDEBUG\n         BALR  R14,R15\n         BR    R9\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPUN0000  DS    0H\n         MVC   PRINT_DATA,COMM_SOURCE         COPY TO PRINT\n         MVI   PRINT_COMMAND,$PRINT_PRINT\n         L     R15,V_DISPRINT\n         BALR  R14,R15                        PRINT SOURCE\n         TM    COMM_DDS,$DISPUNCH_DD          DISPUNCH DD PRESENT?\n         BNO   PUN0010                        NO\n         MVC   DXD_STATEMENT,COMM_SOURCE_LABEL\n         PUT   DISPUNCH_DCB,DXD_STATEMENT     PUNCH\nPUN0010  DS    0H\n         MVC   COMM_SOURCE(COMM_SOURCE_L),COMM_BLANKS\n         BR    R9\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02\n         BAL   R9,DEBUG000\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        RETURN CODE               ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMVC_01   MVC   DXD_UNPACK_IN(0),0(R6)\nMVC_02   MVC   COMM_SOURCE_HEX_1(0),DXD_UNPACK_OUT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START           DC   Q(DXDGEN)\nV_GENDC             DC   V(GENDC)\nOP_CSECT            DC   CL6'CSECT'\nOP_END              DC   CL6'END'\nOP_ENTRY            DC   CL6'ENTRY'\nOP_USING            DC   CL6'USING'\nOP_DROP             DC   CL6'DROP'\nOP_DS               DC   CL6'DS'\nXFFFF               DC   X'FFFFFFFF'\n\nEDITWORD            DC   X'4020202020202120'\n\nFORMAT_TABLE        DC   AL1($OPCODE_RR1),VL4(GENRR1)\n                    DC   AL1($OPCODE_RR2),VL4(GENRR2)\n                    DC   AL1($OPCODE_RR3),VL4(GENRR3)\n                    DC   AL1($OPCODE_RX),VL4(GENRX)\n                    DC   AL1($OPCODE_S),VL4(GENSI)\n                    DC   AL1($OPCODE_SI),vL4(GENSI)\n                    DC   AL1($OPCODE_RS1),VL4(GENRS1)\n                    DC   AL1($OPCODE_RS2),VL4(GENRS2)\n                    DC   AL1($OPCODE_RS3),VL4(GENRS3)\n                    DC   AL1($OPCODE_SS1),VL4(GENSS1)\n                    DC   AL1($OPCODE_SS2),VL4(GENSS2)\n                    DC   AL1($OPCODE_SS3),AL4(GEN0430)\n                    DC   AL1($OPCODE_SS4),AL4(GEN0430)\n                    DC   AL1($OPCODE_B2),AL4(GEN0430)\n                    DC   AL1($OPCODE_B2S),AL4(GEN0430)\n                    DC   AL1($OPCODE_B2R),AL4(GEN0430)\n                    DC   AL1($OPCODE_B2RR),AL4(GEN0430)\n                    DC   X'FF'\n\nREG_NAMES           DC   CL2'0 '\n                    DC   CL2'1 '\n                    DC   CL2'2 '\n                    DC   CL2'3 '\n                    DC   CL2'4 '\n                    DC   CL2'5 '\n                    DC   CL2'6 '\n                    DC   CL2'7 '\n                    DC   CL2'8 '\n                    DC   CL2'9 '\n                    DC   CL2'10'\n                    DC   CL2'11'\n                    DC   CL2'12'\n                    DC   CL2'13'\n                    DC   CL2'14'\n                    DC   CL2'15'\n                    DC   X'FF'\n\nLENGTH_TABLE        DC   AL1(01)    1\n                    DC   AL1(03)    2\n                    DC   AL1(06)    3\n                    DC   AL1(08)    4\n                    DC   AL1(11)    5\n                    DC   AL1(13)    6\n                    DC   AL1(16)    7\n                    DC   AL1(18)    8\n\nHEADING             DS   0C\n                    DC   C'0DISASM - Generated Source'\nHEADING_L           EQU  *-HEADING\n\nMSG01               DS   0C\n                    DC   C'DISGEN01I    Entering DISGEN'\nMSG01_L             EQU  *-MSG01\n\nMSG02               DS   0C\n                    DC   C'DISGEN02I    Exiting DISGEN'\nMSG02_L             EQU  *-MSG02\n\nAREAMSG1            DS   0C\n                    DC   C'ALL areas at entry to DISGEN'\nAREAMSG1_L          EQU  *-AREAMSG1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDGEN              DSECT\n                    DS   18F\nDXD_CSECT           DS   CL8\n\nDXD_DISP            DS   XL4\n\nDXD_GEN_RC          DS   X\n\nDXD_STATEMENT       DS   CL80\n\nDXD_UNPACK_IN       DS   CL8\n\nDXD_UNPACK_OUT      DS   0C\nDXD_UNPACK_OUT_1    DS   XL4\nDXD_BLANK_1         DS   X\nDXD_UNPACK_OUT_2    DS   XL4\nDXD_BLANK_2         DS   X\nDXD_UNPACK_OUT_3    DS   XL4\nDXD_BLANK_3         DS   X\nDXD_UNPACK_OUT_4    DS   XL4\n                    DS   X\n\nDXD_EDITWORD        DS   CL8\nDXD_EDITWORD_FILL   DS   CL8\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFORMAT_DSECT        DSECT\nFORMAT_FORMAT       DS   X\nFORMAT_ADDR         DS   XL4\nFORMAT_L            EQU  *-FORMAT_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               DISCOMM  TYPE=DSECT\n               DISSPFD  TYPE=DSECT\n               COPY     DISASMDA\n               IHADCBE\n\n               IFGACB   AM=VSAM\nACB_L          EQU      *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY REGEQU\n               END  DISGEN\n./ ADD NAME=DISKLIST 0101-09119-09198-0841-00768-00768-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: DISKLIST                                              *\n*                                                                     *\n*  FUNCTION:                                                          *\n*    Display/allow definition of libraries of pre-processed DSECTs.   *\n*                                                                     *\n*                                                                     *\n*  The disassembler allows actual assembler source to be used to      *\n*  \"map\" data areas.  DSECTs can be either processed during           *\n*  dis-assembly or pre-processed by DISASMU1.  The info obtained      *\n*  from pre-processing DSECTs is recorded in VSAM KSDSes.             *\n*  In TSO mode, the KSDSes are allocated/freed dynamically.           *\n*                                                                     *\n*  This module displays the KSDSes currently allocated and allows     *\n*  the user to change/add/or remove a data set(s).                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISKLIST CSECT\nDISKLIST AMODE 31\nDISKLIST RMODE ANY\n         USING DISKLIST,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     MOD0000                           SKIP EYECATCHER\nMODID    DC    CL8'DISKLIST'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDKLIST,R13\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n         USING KSDS_DSECT,R6\n         USING IFGACB,KSDS_ACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        If R1 is zero display existing KSDS list                     *\n*        If R1 not zero, display list passed in R1                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ST    R1,DXD_FIRST_KSDS\n         ST    R1,DXD_FIRST_DISPLAYED\n         LTR   R1,R1                             R1 ZERO?\n         BNZ   INIT0030                          NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        In order to allow the user to \"cancel\" changes,              *\n*        first \"copy\" the existing KSDS chain.                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=COPYCHAN\n         LA    R2,DXD_FIRST_KSDS-4\nPREV     USING KSDS_DSECT,R2\n         ICM   R6,15,COMM_KSDS_NEXT              FIRST KSDS\n         BZ    INIT0030\nINIT0010 DS    0H\n         TM    KSDS_FLAGS,$KSDS_OPEN             IS THE KSDS OPEN\n         BNO   INIT0020                          NO\n         ITRACE ID=CLOSE,                                              +\n               DATA1=KSDS_DDNAME\n         CLOSE KSDS_ACB,                         CLOSE THE ACB         +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\n         LTR   R15,R15                           SUCCESSFUL?\n         BNZ   ERR0010                           NO\n         NI    KSDS_FLAGS,255-$KSDS_OPEN         RESET FLAG\nINIT0020 DS    0H\n         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC      SET DAIR FUNCTION\n         MVC   COMM_DAIR_DD,KSDS_DDNAME          SET DDNAME\n         L     R15,V_DISDAIR\n         BALR  R14,R15                           DEALLOCATE KSDS\n         LTR   R15,R15                           SUCCESSFUL?\n         BNZ   ERR1000                           NO\n         GETMAIN RU,                             GETMAIN NEW KSDS BLOCK+\n               LV=KSDS_DSECT_L,                                        +\n               LOC=ANY\nNEW      USING KSDS_DSECT,R1\n         ITRACE ID=COPYKSDS,                                           +\n               RDATA1=R1,                                              +\n               RDATA2=R6\n         MVC   NEW.KSDS_DSECT(KSDS_DSECT_L),KSDS_DSECT\n         ST    R1,PREV.KSDS_NEXT\n         LR    R2,R1\n         ICM   R6,15,KSDS_NEXT                   ANOTHER KSDS?\n         BNZ   INIT0010                          YES.. PROCESS IT\n         DROP  NEW,PREV\n         MVC   DXD_FIRST_DISPLAYED,DXD_FIRST_KSDS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINIT0030 DS    0H\n         L     R0,SPF_VDEPTH                     NBR OF LINES\n         SLL   R0,2                              MULTIPLY BY 4\n         ST    R0,DXD_KSDS_TABLE_SIZE\n         GETMAIN RU,                                                   +\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,DXD_KSDS_TABLE                 SAVE ADDRESS\n         ITRACE ID=A_TABLE,                                            +\n               RDATA1=R1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         L     R0,COMM_VDATA_ADDR\n         L     R1,COMM_VDATA_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                            INITIALIZE VDATA\n         L     R0,DXD_KSDS_TABLE\n         L     R1,DXD_KSDS_TABLE_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                            INIT AREA TABLE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R8,SPF_VWIDTH                     SCREEN WIDTH\n         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE\n         SRL   R8,1                              DIVIDE BY 2\n         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR\n         L     R7,SPF_VDEPTH                     NBR OF LINES\nMAIN0020 DS    0H\n         MVC   0(MSG01_L,R8),MSG01               INITIALIZE\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0020                       LOOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R8,SPF_VWIDTH                     SCREEN WIDTH\n         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE\n         SRL   R8,1                              DIVIDE BY 2\n         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR\n         USING MSG01,R8\n         L     R7,SPF_VDEPTH\nMAIN0030 DS    0H\n         L     R4,DXD_KSDS_TABLE                 FIRST 'SLOT'\n         XC    DXD_NBR_DISPLAYED,DXD_NBR_DISPLAYED\n         ICM   R6,15,DXD_FIRST_DISPLAYED         FIRST TO DISPLAY\n         BZ    MAIN0060                          NOTHING DEFINED YET\nMAIN0040 DS    0H\n         ITRACE ID=KSDS,                                               +\n               RDATA1=R6,                                              +\n               DATA2=KSDS_DDNAME\n         ST    R6,DXD_LAST_DISPLAYED             SAVE ADDR\n         ST    R6,0(R4)                          SAVE ADDR\n         MVC   MSG01_DSN,KSDS_DSNAME             COPY DATA SET NAME\n         LA    R1,1                              CONSTANT 1\n         AH    R1,DXD_NBR_DISPLAYED              PLUS TOTAL SO FAR\n         STH   R1,DXD_NBR_DISPLAYED              SAVE TOTAL\n         LA    R4,4(,R4)                         NEXT IN ADDR TABLE\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0050\n         B     MAIN0060\nMAIN0050 DS    0H\n         ICM   R6,15,KSDS_NEXT\n         BNZ   MAIN0040\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0060 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_SPF_PANEL,DISKDATA           SET PANEL NAME\n         L     R15,V_DISDISP                     DISP ENTRY POINT\n         BALR  R14,R15                           DISPLAY\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15,                                             +\n               DATA2=SPF_ZVERB\n         LTR   R2,R15                            RC = 0?\n         BNZ   MAIN0500                          NO\n         CLC   ABEND,SPF_ZCMD                    ABEND\n         BE    ABEND000                          YES\n         CLC   CANCEL,SPF_ZCMD                   CANCEL?\n         BE    MAIN1000                          YES\n         CLC   CAN,SPF_ZCMD                      CAN(CEL)?\n         BE    MAIN1000                          YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Verify all DSNs                                              *\n*          cataloged                                                  *\n*          are KSDSes                                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R8,SPF_VWIDTH                     SCREEN WIDTH\n         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE\n         SRL   R8,1                              DIVIDE BY 2\n         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR\n         L     R7,SPF_VDEPTH                     NBR OF LINES\n         NI    DXD_FLAGS,255-$DXD_ERROR          RESET FLAG\nMAIN0070 DS    0H\n         MVC   MSG01_MSG,COMM_BLANKS             RESET MSG\n         OC    MSG01_DSN,COMM_BLANKS             TRANSLATE TO UPPER\n         CLC   MSG01_DSN,COMM_BLANKS             BLANK?\n         BE    MAIN0090                          YES\n         MVC   COMM_DSINFO_DSN,MSG01_DSN         COPY DSN\n         L     R15,V_DISDINFO                    DISDINFO ENTRY POINT\n         BALR  R14,R15\n         ITRACE ID=DINFO_RC,                                           +\n               RDATA1=R15\n         LTR   R15,R15                           ERROR?\n         BZ    MAIN0080                          NO\n         MVC   MSG01_MSG,COMM_DSINFO_MSG         COPY MESSAGE\n         OI    DXD_FLAGS,$DXD_ERROR              SET ERROR FLAG\n         B     MAIN0090\nMAIN0080 DS    0H\n         CLI   COMM_DATASET_TYPE,$DATASET_TYPE_VSAM\n         BE    MAIN0090                          YES\n         OI    DXD_FLAGS,$DXD_ERROR              SET ERROR FLAG\n         MVC   MSG01_MSG(ERR01_L),ERR01\nMAIN0090 DS    0H\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0070\n         TM    DXD_FLAGS,$DXD_ERROR              ANY ERRORS?\n         BO    MAIN0060                          DISPLAY W/MSG(S)\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Determine if any KSDSes were                                 *\n*          updated                                                    *\n*          removed                                                    *\n*          added                                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R8,SPF_VWIDTH                     SCREEN WIDTH\n         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE\n         SRL   R8,1                              DIVIDE BY 2\n         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR\n         L     R7,SPF_VDEPTH                     NBR OF LINES\n         L     R4,DXD_KSDS_TABLE                 FIRST KSDS\nMAIN0130 DS    0H\n         ITRACE ID=MAIN0130\n         L     R6,0(,R4)                         KSDS BLOCK IF USED\n         OC    MSG01_DSN,COMM_BLANKS             'TRANSLATE'\n         CLC   MSG01_DSN,COMM_BLANKS             BLANK?\n         BE    MAIN0180                          YES\n         LTR   R6,R6                             KSDS BLOCK EXIST?\n         BZ    MAIN0150                          NO\n         CLC   MSG01_DSN,KSDS_DSNAME             SAME DSN?\n         BE    MAIN0220                          YES\nMAIN0140 DS    0H\n         ITRACE ID=UPDTKSDS\n         OI    DXD_FLAGS,$DXD_UPDATE             KSDS HAS BEEN UPDATED\n         MVC   KSDS_DSNAME,MSG01_DSN             CHANGE DSN\n         B     MAIN0220\nMAIN0150 DS    0H\n         ITRACE ID=NEW_KSDS\n         OI    DXD_FLAGS,$DXD_UPDATE\n         GETMAIN RU,                                                   +\n               LV=KSDS_DSECT_L,                                        +\n               LOC=ANY\nNEW      USING KSDS_DSECT,R1\n         XC    NEW.KSDS_DSECT(KSDS_DSECT_L),NEW.KSDS_DSECT\n         MVC   NEW.KSDS_EYE,KSDS_ID              IDENTIFY BLOCK\n         MVC   NEW.KSDS_DSNAME,MSG01_DSN         SET DSN\n         MVC   NEW.KSDS_ACB(ACB_L),ACB_I         INITIALIZE ACB\n         LA    R6,DXD_FIRST_KSDS-4               FIRST KSDS\nMAIN0160 DS    0H\n         ICM   R2,15,KSDS_NEXT                   ANOTHER ON CHAIN?\n         BZ    MAIN0170                          YES\n         LR    R6,R2                             COPY ADDRESS\n         B     MAIN0160\nMAIN0170 DS    0H\n         ST    R1,KSDS_NEXT                      SET 'NEXT' IN PREVIOUS\n         ST    R6,NEW.KSDS_PREV                  SET PREV IN NEW\n         OC    DXD_FIRST_DISPLAYED,DXD_FIRST_DISPLAYED\n         BNZ   MAIN0220                          BLOCK PRESENT\n         ST    R1,DXD_FIRST_DISPLAYED            SET FIRST ON CHAIN\n         B     MAIN0220\n         DROP  NEW\nMAIN0180 DS    0H\n         LTR   R6,R6                             KSDS EXIST?\n         BZ    MAIN0220                          NO\n         OI    DXD_FLAGS,$DXD_UPDATE             A KSDS WAS UPDATED\n         ITRACE ID=DEL_KSDS,                     DELETING A KSDS BLOCK +\n               RDATA1=R6\n         ICM   R1,15,KSDS_NEXT                   NEXT KSDS ON CHAIN\n         BZ    MAIN0190\nNEXT     USING KSDS_DSECT,R1\n         MVC   NEXT.KSDS_PREV,KSDS_PREV          SET PREV IN NEXT\n         DROP  NEXT\nMAIN0190 DS    0H\n         ICM   R1,15,KSDS_PREV                   PREVIOUS ON CHAIN\n         BZ    MAIN0200                          NO PREVIOUS BLOCK\nPREV     USING KSDS_DSECT,R1\n         MVC   PREV.KSDS_NEXT,KSDS_NEXT          SET NEXT IN PREVIOUS\nMAIN0200 DS    0H\n         C     R6,DXD_FIRST_DISPLAYED            FIRST KSDS DISPLAYED?\n         BNE   MAIN0210                          NO\n         MVC   DXD_FIRST_DISPLAYED,KSDS_NEXT     CHANGE TO NEXT BLOCK\nMAIN0210 DS    0H\n         FREEMAIN RU,                            FREEMAIN KSDS BLOCK   +\n               A=(R6),                                                 +\n               LV=KSDS_DSECT_L\n         XC    0(4,R4),0(R4)                     CLEAR ADDR IN TABLE\nMAIN0220 DS    0H\n         ITRACE ID=NEXT\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         LA    R4,4(,R4)                         NEXT IN TABLE\n         BCT   R7,MAIN0130                       LOOP\n         TM    DXD_FLAGS,$DXD_UPDATE             ANY UPDATES?\n         BO    MAIN0010                          YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CLI   SPF_ZVERB,C'B'                    BOTTOM?\n         BE    MAIN0300\n         CLI   SPF_ZVERB,C'D'                    DOWN?\n         BE    MAIN0320\n         CLI   SPF_ZVERB,C'T'                    TOP?\n         BE    MAIN0330\n         CLI   SPF_ZVERB,C'U'                    UP?\n         BE    MAIN0340\n         B     MAIN0050\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=BOTTOM\n         ICM   R1,15,DXD_FIRST_KSDS              FIRST ON CHAIN\nTEMP     USING KSDS_DSECT,R1\n         BZ    EXIT0000                          SHOULD NOT HAPPEN!\nMAIN0310 DS    0H\n         LR    R6,R1                             SAVE THIS ADDR\n         ICM   R1,15,TEMP.KSDS_NEXT              NEXT KSDS\n         BNZ   MAIN0310\n         B     MAIN0010                          BUILD DISPLAY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0320 DS    0H\n         ITRACE ID=DOWN\n         CLI   SPF_ZSCROLLA,C'M'                 MAX?\n         BE    MAIN0300                          YES\n         L     R6,DXD_LAST_DISPLAYED             LAST ITEM DISPLAYED\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0330 DS    0H\n         ITRACE ID=TOP\n         L     R6,DXD_FIRST_KSDS                 FIRST DATA ITEM\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0340 DS    0H\n         ITRACE ID=UP\n         CLI   SPF_ZSCROLLA,C'M'                 MAX?\n         BE    MAIN0330                          YES\n         ICM   R1,15,DXD_FIRST_DISPLAYED         FIRST ON DISPLAY\n         BZ    EXIT0000                          SHOULD NOT HAPPEN!\n         L     R7,SPF_ZSCROLLN                   LINES ON DISPLAY\nMAIN0350 DS    0H\n         LR    R6,R1                             COPY ADDR\n         ICM   R1,15,TEMP.KSDS_PREV              PREVIOUS KSDS\n         BZ    MAIN0010\n         BCT   R7,MAIN0350                       LOOP\n         B     MAIN0010\n         DROP  TEMP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      Replace the existing KSDS chain with the updated chain         *\n*                                                                     *\n*        Run the new chain                                            *\n*                                                                     *\n*        Allocate the data sets                                       *\n*        OPEN the ACBs                                                *\n*                                                                     *\n*      If there are any errors,                                       *\n*        CLOSE and FREE all data sets on the chain                    *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0500 DS    0H\n         ITRACE ID=TERM\n         TM    DXD_FLAGS,$DXD_ERROR              ERROR FLAG ON?\n         BO    MAIN0700                          YES\n         ICM   R6,15,DXD_FIRST_KSDS              FIRST ON NEW CHAIN\n         BZ    MAIN0600                          NONE ON CHAIN\n         ZAP   DXD_DSECT_NBR,P0                  RESET DSECT NBR\nMAIN0510 DS    0H\n         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC        SET DAIR FUNCTION\n         MVI   COMM_DAIR_OPTIONS,$DAIR_USE_DDNAME\n         MVC   COMM_DAIR_DD,COMM_BLANKS          INIT DD NAME\n         AP    DXD_DSECT_NBR,P1                  ADD 1 TO DSECT NBR\n         MVC   COMM_DAIR_DD+3(4),=X'40212020'    COPY EDIT WORD\n         ED    COMM_DAIR_DD+3(4),DXD_DSECT_NBR   EDIT DSECT NBR\n         MVC   COMM_DAIR_DD(5),=CL5'DSECT'       SET DD PREFIX\n         MVC   KSDS_DDNAME,COMM_DAIR_DD          COPY DD NAME\n         MVC   COMM_DAIR_DSN,KSDS_DSNAME      SET DSN\n         MVC   COMM_DAIR_MEMBER,COMM_BLANKS   NO MEMBER\n         MVC   COMM_DAIR_VOLSER,COMM_BLANKS   NO VOLSER\n         ITRACE ID=ALOC_NEW,                                           +\n               DATA1=COMM_DAIR_DD\n         L     R15,V_DISDAIR\n         BALR  R14,R15                        ALLOCATE THE KSDS\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   MAIN0530                       NO\n         MVC   ACBDDNM,COMM_DAIR_DD           SET DD NAME\n         ITRACE ID=OPEN_ACB,                                           +\n               DATA1=ACBDDNM\n         OPEN  (KSDS_ACB,INPUT),              OPEN THE ACB             +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n         ITRACE ID=OPEN_RC,                                            +\n               RDATA1=R15\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   MAIN0540                       NO\n         OI    KSDS_FLAGS,$KSDS_OPEN          INDICATE KSDS IS OPEN\nMAIN0520 DS    0H\n         ICM   R6,15,KSDS_NEXT                NEXT KSDS\n         BNZ   MAIN0510\n         B     MAIN0600\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0530 DS    0H\n         OI    DXD_FLAGS,$DXD_ERROR           ERROR HAS OCCURRED\n         CLC   SPF_MSG_1,COMM_BLANKS          ALREADY HAVE A MSG?\n         BNE   MAIN0550                       YES\n         MVC   SPF_MSG_1,COMM_MSG_1\n         MVC   SPF_MSG_2,COMM_MSG_2\n         MVC   SPF_MSG_3,COMM_MSG_3\n         MVC   SPF_MSG_4,COMM_MSG_4\n         MVC   SPF_MSG_5,COMM_MSG_5\n         B     MAIN0550\nMAIN0540 DS    0H\n         OI    DXD_FLAGS,$DXD_ERROR           ERROR HAS OCCURRED\n         MVC   COMM_INFO_01(8),KSDS_DDNAME    COPY DDNAME\n         MVC   COMM_INFO_02(44),KSDS_DSNAME   COPY DSNAME\n         STH   R15,COMM_INFO_03               SAVE OPEN RC\n         MVI   COMM_MSG_ID,4\n         BAL   R5,MSG0000                     BUILD MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      An error occurred allocating or OPENing one of the KSDSes      *\n*      in the new list.                                               *\n*                                                                     *\n*      Run the new chain, CLOSE and de-allocate all KSDSes            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0550 DS    0H\n         ITRACE ID=RESETNEW\n         ICM   R6,15,DXD_FIRST_KSDS           FIRST KSDS\n         BZ    MAIN0550\nMAIN0560 DS    0H\n         TM    KSDS_FLAGS,$KSDS_OPEN          DATA SET OPEN?\n         BNO   MAIN0570                       NO\n         ITRACE ID=CLOSE,                                              +\n               DATA1=KSDS_DDNAME\n         CLOSE KSDS_ACB,                                               +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0020                        NO\nMAIN0570 DS    0H\n         ITRACE ID=FREE,                                               +\n               DATA1=KSDS_DDNAME\n         MVC   COMM_DAIR_DD,KSDS_DDNAME       COPY DDNAME\n         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC   SET FUNCTION\n         L     R15,V_DISDAIR                  DISDAIR ENTRY POINT\n         BALR  R14,R15                        FREE THE DD\n         LR    R1,R6                          COPY ADDRESS\n         ICM   R6,15,KSDS_NEXT                NEXT KSDS\n         BNZ   MAIN0560                       YES\n         B     MAIN0060\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        All libraries were found and are valid                       *\n*                                                                     *\n*        Replace old chain with new                                   *\n*          Make sure the KSDSes in the old list are CLOSEd            *\n*          Free the DSECTs, LABELs, EQUATEs associated                *\n*          Free the KSDS block                                        *\n*          Copy the address of first KDDS block on new chain          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0600 DS    0H\n         ITRACE ID=SWITCH,                                             +\n               DATA1=COMM_KSDS_NEXT,                                   +\n               DATA2=DXD_FIRST_KSDS\n         ICM   R6,15,COMM_KSDS_NEXT           1ST KSDS\n         BZ    MAIN0690\nMAIN0610 DS    0H\n         TM    KSDS_FLAGS,$KSDS_OPEN          DATA SET OPEN?\n         BNO   MAIN0620                       NO\n         CLOSE KSDS_ACB,                                               +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\nMAIN0620 DS    0H\n         ICM   R5,15,KSDS_DSECT_NEXT          FIRST DSECT\n         BZ    MAIN0680\n         USING DSECT_DSECT,R5\nMAIN0630 DS    0H\n         ICM   R4,15,DSECT_LABEL_NEXT         FIRST LABEL\n         BZ    MAIN0670\n         USING LABEL_DSECT,R4\nMAIN0640 DS    0H\n         ICM   R3,15,LABEL_EQU_NEXT           FIRST EQU\n         BZ    MAIN0660\n         USING EQU_DSECT,R3\nMAIN0650 DS    0H\n         LR    R1,R3                          COPY EQU BLOCK ADDR\n         ICM   R3,15,EQU_NEXT                 NEXT EQU\n         FREEMAIN RU,                         FREE THIS EQU            +\n               A=(1),                                                  +\n               LV=EQU_DSECT_L\n         LTR   R3,R3                          ANOTHER EQU?\n         BNZ   MAIN0650                       YES\nMAIN0660 DS    0H\n         LR    R1,R4\n         ICM   R4,15,LABEL_NEXT               NEXT LABEL\n         FREEMAIN RU,                         FREE THIS LABEL          +\n               A=(1),                                                  +\n               LV=LABEL_DSECT_L\n         LTR   R4,R4                          ANOTHER LABEL?\n         BNZ   MAIN0640                       YES\nMAIN0670 DS    0H\n         LR    R1,R5\n         ICM   R5,15,DSECT_NEXT               NEXT DSECT\n         FREEMAIN RU,                         FREE THIS DSECT          +\n               A=(1),                                                  +\n               LV=DSECT_DSECT_L\n         LTR   R5,R5                          ANOTHER DSECT?\n         BNZ   MAIN0630                       YES\nMAIN0680 DS    0H\n         LR    R1,R6\n         ICM   R6,15,KSDS_NEXT                NEXT KSDS\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=KSDS_DSECT_L\n         LTR   R6,R6                          ANOTHER KSDS?\n         BNZ   MAIN0610                       YES\nMAIN0690 DS    0H\n         MVC   COMM_KSDS_NEXT,DXD_FIRST_KSDS  CHANGE KSDS CHAIN\n         XC    DXD_FIRST_KSDS,DXD_FIRST_KSDS  RESET DXD CHAIN\n         DROP  R3,R4,R5\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        User has requested exit with error(s) pending                *\n* ------------------------------------------------------------------- *\nMAIN0700 DS    0H\n         ITRACE ID=PURGE\n         MVI   COMM_MSG_ID,5\n         BAL   R5,MSG0000\n         MVC   SPF_MSG_1,COMM_MSG_1\n         MVC   SPF_MSG_2,COMM_MSG_2\n         MVC   SPF_MSG_3,COMM_MSG_3\n         MVC   SPF_MSG_4,COMM_MSG_4\n         MVC   SPF_MSG_5,COMM_MSG_5\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        User has requested all changes to be cancelled.              *\n*                                                                     *\n*        Free any blocks on new chain                                 *\n*        Re-allocate and OPEN KSDSes on existing chain                *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN1000 DS    0H\n         ITRACE ID=CANCEL\n         MVC   SPF_ZCMD,COMM_BLANKS           RESET COMMAND\n         ICM   R6,15,DXD_FIRST_KSDS           FIRST ON NEW CHAIN\n         BZ    MAIN1020\n         XC    DXD_FIRST_KSDS,DXD_FIRST_KSDS  CLEAR FOR NEXT TIME\nMAIN1010 DS    0H\n         LR    R1,R6                          COPY ADDRESS\n         ICM   R6,15,KSDS_NEXT                NEXT KSDS\n         ITRACE ID=FREEKSDS,                                           +\n               RDATA1=R6,                                              +\n               DATA2=KSDS_DDNAME\n         FREEMAIN RU,                         FREEMAIN THE BLOCK       +\n               A=(1),                                                  +\n               LV=KSDS_DSECT_L\n         LTR   R6,R6                          ANOTHER ON CHAIN?\n         BNZ   MAIN1010                       YES\n* ------------------------------------------------------------------- *\n*        Run existing chain, allocate and OPEN the KSDSes             *\n* ------------------------------------------------------------------- *\nMAIN1020 DS    0H\n         ITRACE ID=REDO_OLD,                                           +\n               DATA1=COMM_KSDS_NEXT\n         ICM   R6,15,COMM_KSDS_NEXT\n         BZ    EXIT0000\nMAIN1030 DS    0H\n         ITRACE ID=RE-ALLOC\n         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC     SET DAIR FUNCTION\n         MVI   COMM_DAIR_OPTIONS,$DAIR_USE_DDNAME\n         MVC   COMM_DAIR_DD,KSDS_DDNAME       SET DD NAME\n         MVC   COMM_DAIR_DSN,KSDS_DSNAME      SET DATA SET NAME\n         MVC   COMM_DAIR_MEMBER,COMM_BLANKS\n         MVC   COMM_DAIR_VOLSER,COMM_BLANKS\n         L     R15,V_DISDAIR\n         BALR  R14,R15                        ALLOCATE KSDS\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR1000                        NO\n         ITRACE ID=RE-OPEN,                                            +\n               DATA1=KSDS_DDNAME\n         OPEN  KSDS_ACB,                      OPEN THE ACB             +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n         ITRACE ID=OPEN_RC,                                            +\n               RDATA1=R15\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0030                        NO\n         OI    KSDS_FLAGS,$KSDS_OPEN          INDICATE KSDS IS OPEN\n         ICM   R6,15,KSDS_NEXT                ANOTHER KSDS?\n         BNZ   MAIN1030                       YES\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVI   COMM_MSG_ID,1                  INIT CLOSE FAILED\n         MVC   COMM_INFO_01,KSDS_DDNAME       DDNAME\n         MVC   COMM_INFO_02,KSDS_DSNAME       DSNAME\n         STH   R15,COMM_INFO_03               CLOSE RC\n         B     ERR0100\nERR0020  DS    0H\n         MVC   COMM_INFO_01,KSDS_DDNAME       DDNAME\n         MVC   COMM_INFO_02,KSDS_DSNAME       DSNAME\n         STH   R15,COMM_INFO_03               CLOSE RC\n         MVI   COMM_MSG_ID,2                  CLOSING NEW ACB FAILED\n         B     ERR0100\nERR0030  DS    0H\n         MVC   COMM_INFO_01,KSDS_DDNAME       DDNAME\n         MVC   COMM_INFO_02,KSDS_DSNAME       DSNAME\n         STH   R15,COMM_INFO_03               CLOSE RC\n         MVI   COMM_MSG_ID,3                  \"CANCEL\" CLOSE FAILED\nERR0100  DS    0H\n         BAL   R5,MSG0000\n         B     ERR1010\nERR1000  DS    0H\n         MVC   SPF_MSG_1,COMM_MSG_1\n         MVC   SPF_MSG_2,COMM_MSG_2\n         MVC   SPF_MSG_3,COMM_MSG_3\n         MVC   SPF_MSG_4,COMM_MSG_4\n         MVC   SPF_MSG_5,COMM_MSG_5\n         MVC   COMM_MSG_CSECT,MODID\nERR1010  DS    0H\n         MVC   COMM_SPF_FUNCTION,DISPLAY\n         MVC   COMM_SPF_PANEL,DIS0000         SET PANEL NAME\n         LA    R1,COMM_SPF_PANEL\n         ST    R1,COMM_SPF_2\n         OI    COMM_SPF_2,X'80'               FLAG END OF LIST\n         LA    R1,COMM_SPF_PARMS\n         L     R15,COMM_ISPLINK\n         BALR  R14,R15                        DISPLAY PANEL\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0000  DS    0H\n         ITRACE ID=MSG,                                                +\n               DATA1=COMM_MSG_ID\n         CLC   SPF_MSG_1,COMM_BLANKS          ALREADY HAVE A MSG?\n         BNER  R5                             YES\n         MVC   COMM_MSG_CSECT,MODID\n         L     R15,V_DISMSG\n         BALR  R14,R15\n         MVC   SPF_MSG_1,COMM_MSG_1\n         MVC   SPF_MSG_2,COMM_MSG_2\n         MVC   SPF_MSG_3,COMM_MSG_3\n         MVC   SPF_MSG_4,COMM_MSG_4\n         MVC   SPF_MSG_5,COMM_MSG_5\n         MVC   COMM_MSG_CSECT,MODID\n         BR    R5\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT,                                               +\n               RDATA1=R2\n         L     R0,DXD_KSDS_TABLE_SIZE         ADDR TABLE SIZE\n         L     R1,DXD_KSDS_TABLE              ADDR TABLE ADDR\n         FREEMAIN RU,                         FREEMAIN ADDR TABLE      +\n               A=(1),                                                  +\n               LV=(0)\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         L     R14,12(,R13)                   RESTORE REGISTERS         ASE01680\n         LR    R15,R2                         SET RC\n         LM    R0,R12,20(R13)                 RESTORE REGISTERS         ASE01680\n         BR    R14                            RETURN TO CALLER          ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nABEND000 DS    0H\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC   Q(DXDKLIST)\n\nACB_I    ACB   AM=VSAM,                                                +\n               DDNAME=ANYDD,                                           +\n               MACRF=(KEY,DIR,SEQ)\n\nP0            DC   P'0'\nP1            DC   P'1'\n\nKSDS_ID       DC   CL8'KSDS'\nABEND         DC   C'ABEND'\nCAN           DC   C'CAN '\nCANCEL        DC   C'CANCEL '\nDISKDATA      DC   CL8'DISKDATA'\nDISPLAY       DC   CL8'DISPLAY'\nDIS0000       DC   CL8'DIS0000'\n\nERR01         DC   C'Not VSAM'\nERR01_L       EQU  *-ERR01\n\n              LTORG\n\n\nMSG01         DS   0C\n              DC   AL1($ATTR_INPUT)\nMSG01_DSN     DC   CL44' '\n              DC   AL1($ATTR_HIGH_YELLOW)\nMSG01_MSG     DC   CL30' '\nMSG01_L       EQU  *-MSG01\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDKLIST              DSECT\n                      DS  18F\n\n                      DS  A             DUMMY FOR 'PREV' ON CHAIN\nDXD_FIRST_KSDS        DS  A             FIRST DATA ITEM ON CHAIN\n\nDXD_FIRST_DISPLAYED   DS  A             FIRST DATA ITEM DISPLAYED\nDXD_LAST_DISPLAYED    DS  A             LAST DATA ITEM DISPLAYED\n\nDXD_KSDS_TABLE        DS  A\nDXD_KSDS_TABLE_SIZE   DS  F\n\n\nDXD_NBR_DISPLAYED     DS  H             NBR OF DATA ITEMS DISPLAYED\n\nDXD_FLAGS             DS  X             FLAGS\n$DXD_ERROR            EQU X'80'         .. SERIOUS ERROR\n$DXD_UPDATE           EQU X'40'         .. AREA(S) UPDATED\n\nDXD_DSECT_NBR         DS  PL2\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              DISCOMM TYPE=DSECT\n              DISSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    DISASMDA\n              COPY    ATTRS\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n              COPY    REGEQU\n              END     DISKLIST\n./ ADD NAME=DISLREAD 0111-09104-09198-0842-00207-00175-00092-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: DISLREAD                                              *\n*                                                                     *\n*  FUNCTION:                                                          *\n*    Read LABELS and EQUATEs for a DSECT in a KSDS                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISLREAD CSECT\nDISLREAD AMODE 31\nDISLREAD RMODE ANY\n         USING DISLREAD,R11,R10\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'DISLREAD'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         LA    R10,2048(,R11)\n         LA    R10,2048(,R10)\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDLREAD,R13\n         ITRACE ID=ENTRY,                                              +\n               DATA1=COMM_USING_KSDS,                                  +\n               DATA2=COMM_USING_DSECT\n         L     R6,COMM_USING_KSDS             KSDS BLOCK ADDR\n         L     R5,COMM_USING_DSECT            DSECT BLOCK ADDR\n         USING KSDS_DSECT,R6\n         USING DSECT_DSECT,R5\n         MVC   DXD_RPL(RPL_L),RPL_I\n         USING IFGRPL,DXD_RPL\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*        READ the LABELs (and EQUATES) for a DSECT from a KSDS        *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         TM    KSDS_FLAGS,$KSDS_OPEN          KSDS OPEN?\n         BO    MAIN0020                       YES\n         OPEN  (KSDS_ACB,INPUT),              OPEN THE KSDS            +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n         OI    KSDS_FLAGS,$KSDS_OPEN          SET FLAG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0020 DS    0H\n         ITRACE ID=MODCB1\n         MVC   DXD_MODCB(MODCB1_L),MODCB1_I\n         LA    R2,DXD_RPL\n         LA    R3,KSDS_ACB\n         LA    R7,PPD\n         LA    R8,PPD_KEY\n         MODCB RPL=(R2),                                               +\n               ACB=(R3),                                               +\n               AREA=(R7),                                              +\n               AREALEN=PPD_L,                                          +\n               ARG=(R8),                                               +\n               KEYLEN=L'PPD_KEY,                                       +\n               OPTCD=(KEY,KEQ,DIR,SYN,MVE),                            +\n               MF=(E,DXD_MODCB)\n         ITRACE ID=MODCB_RC,                                           +\n               RDATA1=R15,                                             +\n               RDATA2=R0\n         LTR   R15,R15\n         BNZ   ERR0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         XC    PPD_SEQ,PPD_SEQ                FORCE SEQ TO ZERO\n         MVC   PPD_NAME,DSECT_NAME            SET DSECT NAME\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LA    R4,DSECT_LABEL_PREV            \"FIRST\" LABEL ON CHAIN\n         USING LABEL_DSECT,R4\n         SR    R3,R3\n         USING EQU_DSECT,R3\nMAIN0030 DS    0H\n         ITRACE ID=GET\n         GET   RPL=DXD_RPL                    READ A RECORD\n         ITRACE ID=GET_RC,                                             +\n               RDATA1=R15,                                             +\n               DATA2=RPLFDBK\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   EXIT0000                       NO\n         CLC   LABEL_ID,PPD_DATA+8            LABEL?\n         BE    MAIN0040                       YES\n         CLC   EQU_ID,PPD_DATA+8              EQUATE?\n         BE    MAIN0050                       YES\n         B     MAIN0060                       OTHERWISE\nMAIN0040 DS    0H\n         GETMAIN RU,                                                   +\n               LV=LABEL_DSECT_L,                                       +\n               LOC=ANY\nNEW      USING LABEL_DSECT,R1\n         XC    NEW.LABEL_DSECT(LABEL_DSECT_L),NEW.LABEL_DSECT\nKSDS     USING LABEL_DSECT,PPD_DATA\n         ST    R1,LABEL_NEXT\n         ST    R4,LABEL_PREV\n         MVC   NEW.LABEL_EYE,KSDS.LABEL_EYE\n         MVC   NEW.LABEL_NAME,KSDS.LABEL_NAME\n         MVC   NEW.LABEL_DISP,KSDS.LABEL_DISP\n         MVC   NEW.LABEL_TYPE,KSDS.LABEL_TYPE\n         LA    R3,LABEL_EQU_PREV\n         LR    R4,R1\n         ITRACE ID=LABEL,                                              +\n               RDATA1=R4,                                              +\n               DATA2=LABEL_NAME\n         DROP  NEW,KSDS\n         B     MAIN0060\nMAIN0050 DS    0H\n         GETMAIN RU,                                                   +\n               LV=EQU_DSECT_L,                                         +\n               LOC=ANY\nNEW      USING EQU_DSECT,R1\n         XC    NEW.EQU_DSECT(EQU_DSECT_L),NEW.EQU_DSECT\nKSDS     USING EQU_DSECT,PPD_DATA\n         ST    R1,EQU_NEXT\n         ST    R3,NEW.EQU_PREV\n         MVC   NEW.EQU_EYE,KSDS.EQU_EYE\n         MVC   NEW.EQU_LABEL,KSDS.EQU_LABEL\n         MVC   NEW.EQU_VALUE,KSDS.EQU_VALUE\n         LR    R3,R1\n         ITRACE ID=EQU,                                                +\n               RDATA1=R3,                                              +\n               DATA2=EQU_LABEL\n         DROP  NEW,KSDS\nMAIN0060 DS    0H\n         ICM   R1,15,PPD_SEQ                  CURRENT SEQ NBR\n         LA    R1,1(,R1)                      PLUS 1\n         STCM  R1,15,PPD_SEQ                  UPDATE SEQ NBR\n         B     MAIN0030                       READ NEXT RECORD\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=MOD_ERR,                                            +\n               RDATA1=R15\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE REGISTER 13\n         L     R14,12(,R13)                   RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         LM    R0,R12,20(R13)                 RESTORE REGISTERS\n         BR    R14                            RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC   Q(DXDLREAD)\n\nRPL_I         RPL  AM=VSAM\nRPL_L         EQU  *-RPL_I\n\nMODCB1_I MODCB RPL=*,                                                  +\n               ACB=*,                                                  +\n               AREA=*,                                                 +\n               AREALEN=PPD_L,                                          +\n               ARG=*,                                                  +\n               KEYLEN=L'PPD_KEY,                                       +\n               OPTCD=(KEY,KGE,DIR,SYN,MVE),                            +\n               MF=L\nMODCB1_L EQU  *-MODCB1_I\n\nLABEL_ID DC   CL8'LABEL'\nEQU_ID   DC   CL8'EQU  '\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDLREAD      DSECT\n              DS      18F\n\nDXD_MODCB     DS      0F,(MODCB1_L)X\nDXD_RPL       DS      0F,(RPL_L)X\n\n              COPY    PPDDATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              DISCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    DISASMDA\n              COPY    ATTRS\n\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n\n              IFGRPL  AM=VSAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    REGEQU\n              END     DISLREAD\n./ ADD NAME=DISMAIN  0101-09119-09198-0842-00213-00213-00000-SOURCE\n* -------------------------------------------------------------------*\n*                                                                    *\n*        MAINLINE                                                    *\n*                                                                    *\n* -------------------------------------------------------------------*\nDISMAIN  CSECT\nDISMAIN  AMODE 31\nDISMAIN  RMODE ANY\n         USING DISMAIN,R11,R10\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     INIT0000                       SKIP EYECATCHER\nMODID    DC    CL8'DISMAIN'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\n* -------------------------------------------------------------------*\n*                                                                    *\n* -------------------------------------------------------------------*\nINIT0000 DS    0H\n         LA    R10,2048(,R11)\n         LA    R10,2048(,R10)\n         L     R0,DXD_SIZE                    WORK AREA SIZE\n         GETMAIN RU,                                                   +\n               LV=(0),                                                 +\n               LOC=ANY\n         LR    R0,R1\n         LR    R2,R1\n         LR    R3,R1\n         L     R1,DXD_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                         INITIALIZE WORK AREA\n         A     R2,DXD_START                   DISP TO OUR AREA\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         SET SAVE AREA ADDRESS\n         USING DXDMAIN,R13\n         LOAD  EP=DISCOMM                     LOAD COMMON\n         LR    R12,R0                         COPY EP\n         USING DISCOMM,R12                    DEFINE BASE\n         MVC   DXD_CSECT,MODID\n         ST    R3,COMM_DXD_ADDRESS            SAVE WORK AREA ADDRESS\n         LA    R0,COMM_VCONS                  INITIALIZE VCONS\n         LA    R1,VCONS_L\n         LA    R14,VCONS_I\n         LR    R15,R1\n         MVCL  R0,R14\n* ------------------------------------------------------------------- *\n*         Initialize trace table                                      *\n* ------------------------------------------------------------------- *\n         L     R2,COMM_TRACE_SIZE             TRACE TABLE SIZE\n         LA    R2,32(R2)                      FOR BOUNDARY ROUNDING\n         GETMAIN RU,                          GETMAIN TRACE TABLE      +\n               LV=(R2),                                                +\n               LOC=ANY\n         ST    R1,COMM_TRACE_TABLE            SAVE ADDRESS\n         LA    R1,32(R1)                      PLUS 32\n         SRL   R1,5                           ROUND THE ADDRESS TO...\n         SLL   R1,5                           ...NEAREST MULTIPLE OF 32\n         ST    R1,COMM_TRACE_1STX             SET FIRST ENTRY ADDRESS\n         ST    R1,COMM_TRACE_CURRENT          SET CURRENT ENTRY ADDRESS\n         XC    0(TRENTRYL,R1),0(R1)           INITIALIZE FIRST ENTRY\n         A     R1,COMM_TRACE_SIZE             PLUS USED PORTION'S SIZE\n         SH    R1,H32                         MINUS 1 ENTRY\n         SH    R1,H32                         ANOTHER OR GOOD MEASURE\n         ST    R1,COMM_TRACE_LAST             LAST ENTRY ADDRESS\n         ITRACE ID=INIT,                      INITIAL TRACE ENTRY      +\n               DATA1=R11,                                              +\n               DATA2=R12\n* ------------------------------------------------------------------- *\n*         Load the messages                                           *\n* ------------------------------------------------------------------- *\n         LOAD  EP=DISMSGS\n         ST    R0,COMM_MSGS\n* ------------------------------------------------------------------- *\n*         Determine mode (BATCH or TSO)                               *\n* ------------------------------------------------------------------- *\n         USING PSA,R0\n         L     R1,PSAAOLD                     ASCB ADDRESS\n         USING ASCB,R1                        DEFINE BASE\n         L     R2,ASCBOUCB                    OUCB ADDRESS\n         USING OUCB,R2\n         TM    OUCBYFL,OUCBLOG                TSO USER?\n         BO    INIT0010                       YES\n         MVI   COMM_RUN_MODE,$COMM_RUN_BATCH  RUNNING IN BATCH MODE\n         MVC   DXD_MAIN,V_DISBMAIN            BATCH MAINLINE EP\n         ITRACE ID=BATCH\n         B     INIT0020\nINIT0010 DS    0H\n         ITRACE ID=TSO\n         LOAD  EP=ISPLINK                     LOAD ISPLINK\n         ST    R0,COMM_ISPLINK                SAVE ADDRESS\n         MVI   COMM_RUN_MODE,$COMM_RUN_TSO    RUNNING IN TSO MODE\n         MVC   DXD_MAIN,V_DISTMAIN            TSO MAINLINE ENTRY POINT\n         LOAD  EP=DISSPFD                     LOAD DISSPFD\n         ST    R0,COMM_DISSPFD                SAVE ADDRESS\n         NI    COMM_DISSPFD,X'7F'             TURN OFF 31-BIT MODE\n         LR    R9,R0                          COPY ADDRESS\n         USING DISSPFD,R9                     DEFINE BASE\n         LOAD  EP=DISSPFV                     LOAD DISSPFV\n         ST    R0,COMM_DISSPFV                SAVE ADDRESS\n         NI    COMM_DISSPFV,X'7F'             TURN OFF 31-BIT MODE\n* ------------------------------------------------------------------- *\n*         Determine DD's present                                      *\n* ------------------------------------------------------------------- *\nINIT0020 DS    0H\n         L     R15,V_DISTIOT                  DISTIOT ENTRY POINT\n         BALR  R14,R15                        SEARCH THE TIOT\n* ------------------------------------------------------------------- *\n*         OPEN trace if DISTRACE DD present                           *\n* ------------------------------------------------------------------- *\n         TM    COMM_DDS,$DISTRACE_DD          DISTRACE DD PRESENT?\n         BNO   INIT0040                       NO\n         CLI   COMM_RUN_MODE,$COMM_RUN_TSO    TSO MODE?\n         BE    INIT0030                       YES\n         OPEN  (DISTRACE_DCB,OUTPUT),                                  +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\nINIT0030 DS    0H\n         OI    COMM_TRACE_FLAGS,$COMM_TRACE_OPEN\n* ------------------------------------------------------------------- *\n*         Call BATCH or TSO main line                                 *\n* ------------------------------------------------------------------- *\nINIT0040 DS    0H\n         L     R15,DXD_MAIN                   MAINLINE EP\n         ITRACE ID=CALLMAIN,                                           +\n               RDATA1=R15\n         BALR  R14,R15                        CALL MAINLINE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         TM    COMM_DDS,$DISTRACE_DD          DISTRACE DD PRESENT?\n         BNO   EXIT0020                       NO\n         TM    COMM_TRACE_FLAGS,$COMM_TRACE_OPEN\n         BNO   EXIT0020                       NOT OPEN\n         CLI   COMM_RUN_MODE,$COMM_RUN_TSO    TSO MODE?\n         BE    EXIT0010                       YES\n         CLOSE DISTRACE_DCB,                                           +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\nEXIT0010 DS    0H\n         NI    COMM_TRACE_FLAGS,255-$COMM_TRACE_OPEN\nEXIT0020 DS    0H\n         CLI   COMM_RUN_MODE,$COMM_RUN_TSO    TSO MODE?\n         BNE   EXIT0030                       NO\n         ITRACE ID=DEL_SPFD\n         DELETE EP=DISSPFD\n         ITRACE ID=DEL_SPFV\n         DELETE EP=DISSPFV\nEXIT0030 DS    0H\n         ITRACE ID=EXIT0000\n         L     R1,COMM_TRACE_TABLE            TRACE TABLE ADDRESS\n         L     R0,COMM_TRACE_SIZE             TRACE TABLE SIZE\n         FREEMAIN RU,                         FREE TRACE TABLE         +\n               A=(1),                                                  +\n               LV=(0)\n         SR    R3,R3\n         IC    R3,COMM_RC\n         L     R2,COMM_DXD_ADDRESS            WORK AREA ADDRESS\n         DELETE EP=DISMSGS                    DELETE MESSAGES\n         DELETE EP=DISCOMM                    DELETE DISCOMM\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         L     R0,DXD_SIZE                    DXD AREA SIZE\n         FREEMAIN RU,                         FREEMAIN DXD AREA        +\n               A=(2),                                                  +\n               LV=(0)\n         L     R14,12(,R13)                   RESTORE R14\n         LR    R15,R3                         SET RC\n         LM    R0,R12,20(R13)                 RESTORE REGISTERS         ASE01680\n         BR    R14                            RETURN TO CALLER          ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_SIZE       CXD\nDXD_START      DC    Q(DXDMAIN)\nH32            DC    H'32'\n\nVCONS_I        DS    0A\n               VCONS CSECT\nVCONS_L        EQU   *-VCONS_I\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDMAIN        DSECT\n               DS       18F\nDXD_CSECT      DS       CL8\n\nDXD_MAIN       DS       A\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               DISCOMM  TYPE=DSECT\n               COPY     DISASMDA\n               DISSPFD  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               IFGACB   AM=VSAM\nACB_L          EQU      *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               IHAPSA   DSECT=YES,LIST=NO\n               IHAASCB  DSECT=YES,LIST=NO\n               IRAOUCB  DSECT=YES\n               COPY     REGEQU\n               END      DISMAIN\n./ ADD NAME=DISMSG   0120-07064-09198-0843-00241-00225-00240-SOURCE\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Function:                                                          *\n*   Build messages.                                                   *\n*                                                                     *\n*   The message ID and CSECT name are in DISCOMM                      *\n*                                                                     *\n*                                                                     *\n*   Building messages using a message table allows for different      *\n*   national languages.                                               *\n*                                                                     *\n*   I also hope to get an SPF dialog working one of these days        *\n*   so the disassembler can be used in an interactive mode.           *\n*   The messages are built here.  In batch, they can be printed.      *\n*   In the interactive mode, they could be displayed.                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISMSG   CSECT\nDISMSG   AMODE 31\nDISMSG   RMODE ANY\n         USING DISCOMM,R12\n         USING DISMSG,R11\n         STM   R14,R12,12(R13)                  SAVE REGS\n         LR    R11,R15                          SET BASE REG\n         B     MSG0000                          SKIP EYECATCHER\nMODID    DC    CL8'DISMSG'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMSG0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS             WORK AREA ADDRESS\n         A     R15,DXD_START                    PLUS DISP TO OUR AREA\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                          SET SAVE AREA ADDRESS\n         USING DXDMSG,R13\n         ITRACE ID=ENTRY,                                              +\n               DATA1=COMM_MSG_CSECT,                                   +\n               DATA2=COMM_MSG_ID\n* ------------------------------------------------------------------- *\n*             Build message                                           *\n* ------------------------------------------------------------------- *\n         L     R10,COMM_MSGS                     MESSAGE TABLE\n         USING MSG_CSECT,R10\nMSG0020  DS    0H\n         ITRACE ID=CSECT,                                              +\n               RDATA1=R10,                                             +\n               DATA2=MSG_CSECT_NAME\n         CLC   COMM_MSG_CSECT,MSG_CSECT_NAME     CSECT LOCATED?\n         BE    MSG0030                           YES\n         A     R10,MSG_CSECT_LENGTH              NEXT CSECT\n         CLI   0(R10),X'FF'                      END OF TABLE?\n         BNE   MSG0020                           NO\n         DC    H'0'                              CSECT NOT FOUND\nMSG0030  DS    0H\n         ITRACE ID=FNDCSECT\n         LA    R9,MSG_CSECT_MSGS                 1ST MSG FOR CSECT\n         USING MSG_MSG,R9\nMSG0040  DS    0H\n         ITRACE ID=MSG_ID,                                             +\n               RDATA1=R9,                                              +\n               DATA2=MSG_ID\n         CLC   MSG_ID,COMM_MSG_ID                LOCATED MESSAGE?\n         BE    MSG0050                           YES\n         ICM   R0,15,MSG_LENGTH                  LENGTH OF THIS MSG\n         AR    R9,R0                             NEXT MESSAGE\n         CLI   0(R9),X'FF'                       END OF MSGS FOR CSECT?\n         BNE   MSG0040                           NO\n         DC    H'0'                              MSG NOT FOUND\nMSG0050  DS    0H\n         ITRACE ID=FND_MSG\n         LA    R8,MSG_COMPONENTS                 1ST COMPONENT OF MSG\n         USING MSG_COMPONENT,R8\n         MVC   COMM_MSG_1,COMM_BLANKS\n         MVC   COMM_MSG_2,COMM_BLANKS\n         MVC   COMM_MSG_3,COMM_BLANKS\n         MVC   COMM_MSG_4,COMM_BLANKS\n         MVC   COMM_MSG_5,COMM_BLANKS\n         XC    DXD_MSG1_DISP,DXD_MSG1_DISP\n         XC    DXD_MSG2_DISP,DXD_MSG2_DISP\n         XC    DXD_MSG3_DISP,DXD_MSG3_DISP\n         XC    DXD_MSG4_DISP,DXD_MSG4_DISP\n         XC    DXD_MSG5_DISP,DXD_MSG5_DISP\nMSG0060  DS    0H\n         ITRACE ID=MSGCMPNT,                                           +\n               RDATA1=R8\n         SR    R7,R7\n         IC    R7,MSG_COMPONENT_LINE             LINE NUMBER\n         SLL   R7,1                              MULTIPLY BY 2\n         LA    R7,DXD_MSG1_DISP(R7)              ADDR OF DISP\n         SR    R6,R6\n         IC    R6,MSG_COMPONENT_LINE             LINE NUMBER\n         BCTR  R6,0                              RELATIVE TO ZERO\n         MH    R6,=Y(L'COMM_MSG_1)               MULTIPLY BY LENGTH\n         LA    R6,COMM_MSG_1(R6)                 PLUS MSG BASE ADDR\n         AH    R6,0(,R7)                         DISP SO FAR\n         SR    R5,R5\n         ICM   R5,3,MSG_COMPONENT_DISP\n         AR    R5,R12                            PLUS COMM ADDR\n         SR    R4,R4\n         ICM   R4,3,MSG_COMPONENT_OUTPUT_LENGTH  OUTPUT LENGTH\n         BCTR  R4,0                              MINUS 1\n         CLI   MSG_COMPONENT_TYPE,$MSG_COMPONENT_ADDRESS\n         BE    MSG0100\n         CLI   MSG_COMPONENT_TYPE,$MSG_COMPONENT_CHAR\n         BE    MSG0110\n         CLI   MSG_COMPONENT_TYPE,$MSG_COMPONENT_HALFWORD\n         BE    MSG0120\n         CLI   MSG_COMPONENT_TYPE,$MSG_COMPONENT_FULLWORD\n         BE    MSG0130\n         CLI   MSG_COMPONENT_TYPE,$MSG_COMPONENT_HEX\n         BE    MSG0140\n         CLI   MSG_COMPONENT_TYPE,$MSG_COMPONENT_TEXT\n         BE    MSG0150\n         ITRACE ID=BAD_TYPE\n         DC    H'0'\nMSG0070  DS    0H\n         ITRACE ID=NEXT\n         SR    R1,R1\n         ICM   R1,3,MSG_COMPONENT_OUTPUT_LENGTH  LENGTH OF THIS COMP\n         AH    R1,0(,R7)                         PLUS DISP SO FAR\n         LA    R1,1(,R1)                         PLUS 1\n         STH   R1,0(,R7)                         UPDATE DISP USED\n         AH    R8,MSG_COMPONENT_LENGTH           NEXT COMPONENT\n         CLI   0(R8),X'FF'                       END OF LIST?\n         BNE   MSG0060                           NO\n         B     EXIT0000                          ALL DONE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0100  DS    0H\n         ITRACE ID=ADDRESS\n         UNPK  DXD_UNPACK(9),0(5,R5)             UNPACK DATA\n         TR    DXD_UNPACK(8),COMM_HEXCHAR        TRANSLATE\n         LA    R15,DXD_UNPACK+7                  END OF UNPACKED ADDR\n         SR    R15,R4                            MINUS LENGTH\n         EX    R4,MVC1                           COPY DATA\n         B     MSG0070\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0110  DS    0H\n         ITRACE ID=CHAR\n         EX    R4,MVC2                           COPY DATA\n         B     MSG0070\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0120  DS    0H\n         ITRACE ID=HALFWORD\n         LH    R0,0(,R5)                         DATA INTO R0\n         CVD   R0,COMM_DWORD                     CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3         EDIT\n         LA    R15,DXD_EDITWORD+11\n         SR    R15,R4\n         EX    R4,MVC1                           COPY DATA\n         B     MSG0070\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0130  DS    0H\n         ITRACE ID=FULLWORD\n         L     R0,0(,R5)                         DATA INTO R0\n         CVD   R0,COMM_DWORD                     CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3         EDIT\n         LA    R15,DXD_EDITWORD+11\n         SR    R15,R4\n         EX    R4,MVC1                           COPY DATA\n         B     MSG0070\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0140  DS    0H\n         ITRACE ID=HEX\n         UNPK  DXD_UNPACK(9),0(5,R5)             UNPACK DATA\n         TR    DXD_UNPACK(8),COMM_HEXCHAR        TRANSLATE\n         LA    R15,DXD_UNPACK                    END OF UNPACKED ADDR\n         EX    R4,MVC1                           COPY DATA\n         B     MSG0070\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0150  DS    0H\n         ITRACE ID=TEXT\n         LA    R5,MSG_COMPONENT_TEXT             TEXT'S ADDRESS\n         EX    R4,MVC2                           COPY DATA\n         B     MSG0070\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT                          EXITING PRINT MODULE\n         L     R13,4(,R13)                       RESTORE R13\n         LM    R14,R12,12(R13)                   RESTORE OTHER REGS\n         SR    R15,R15                           SET RETURN CODE\n         BR    R14                               RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMVC1     MVC   0(0,R6),0(R15)                    COPY DATA\nMVC2     MVC   0(0,R6),0(R5)                     COPY DATA\n* ------------------------------------------------------------------- *\n*              WORK AREAS                                             *\n* ------------------------------------------------------------------- *\nDXD_START      DC    Q(DXDMSG)\n\nH4             DC    H'4'\n\nEDITWORD       DC    X'402020206B2020206B202120'\n               LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDMSG         DSECT\n               DS    18F\nDXD_CSECT      DS    CL8\nDXD_MSG1_DISP  DS    H\nDXD_MSG2_DISP  DS    H\nDXD_MSG3_DISP  DS    H\nDXD_MSG4_DISP  DS    H\nDXD_MSG5_DISP  DS    H\nDXD_UNPACK     DS    CL9\nDXD_EDITWORD   DS    CL12\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY     MSG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               DISCOMM  TYPE=DSECT\n               COPY     DISASMDA\n\n               IFGACB   AM=VSAM\nACB_L          EQU      *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY REGEQU\n               END  DISMSG\n./ ADD NAME=DISMSGUS 0104-09119-09191-1545-00958-00942-00000-SOURCE\nDISMSGS  CSECT\nDISMSGS  AMODE 31\nDISMSGS  RMODE ANY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISALISTA EQU   *\n         DC    CL8'DISALIST'                  CSECT\n         DC    AL4(DISALISTB-DISALISTA)\n\n         MESG  1\n         MESGCOMP 1,TEXT,,'DISALIST01E '\n         MESGCOMP 1,TEXT,,'LMINIT failed, R15='\n         MESGCOMP 1,HEX,4,COMM_INFO_01\n         MESG  END\n\n         DC    X'FF'\nDISALISTB EQU  *\n\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISASSEMA EQU   *\n          DC    CL8'DISASSEM'                 CSECT\n          DC    AL4(DISASSEMB-DISASSEMA)\n\n          MESG  1\n          MESGCOMP 1,TEXT,,'DISASSEM01I'\n          MESGCOMP 1,TEXT,,'Assembler return code was'\n          MESGCOMP 1,HEX,2,COMM_INFO_01\n          MESG  END\n\n          MESG  2\n          MESGCOMP 1,TEXT,,'DISASSEM02E'\n          MESGCOMP 1,TEXT,,'Error(s) assembling DSECTs, check'\n          MESGCOMP 1,TEXT,,'assembler listing in DEBUG'\n          MESG  END\n\n          MESG  3\n          MESGCOMP 1,TEXT,,'DISASSEM03I'\n          MESGCOMP 1,TEXT,,'No assembler input'\n          MESG  END\n\n          DC    X'FF'\nDISASSEMB EQU   *\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISBINDA  EQU   *\n          DC    CL8'DISBIND'                  CSECT\n          DC    AL4(DISBINDB-DISBINDA)\n\n          MESG  1\n          MESGCOMP 1,TEXT,,'DISBIND01E '\n          MESGCOMP 1,TEXT,,'Binder STARTD failed, ERROR='\n          MESGCOMP 1,CHAR,8,COMM_INFO_01\n          MESGCOMP 1,TEXT,,'REASON '\n          MESGCOMP 1,CHAR,8,COMM_INFO_02\n          MESG  END\n\n          MESG  2\n          MESGCOMP 1,TEXT,,'DISBIND02E '\n          MESGCOMP 1,TEXT,,'Binder CREATEW failed, ERROR='\n          MESGCOMP 1,CHAR,8,COMM_INFO_01\n          MESGCOMP 1,TEXT,,'REASON'\n          MESGCOMP 1,CHAR,8,COMM_INFO_02\n          MESG  END\n\n          MESG  3\n          MESGCOMP 1,TEXT,,'DISBIND03E '\n          MESGCOMP 1,TEXT,,'Binder SET_ALL failed, ERROR='\n          MESGCOMP 1,CHAR,8,COMM_INFO_01\n          MESGCOMP 1,TEXT,,'REASON'\n          MESGCOMP 1,CHAR,8,COMM_INFO_02\n          MESG  END\n\n          MESG  4\n          MESGCOMP 1,TEXT,,'DISBIND04E '\n          MESGCOMP 1,TEXT,,'Binder INCLUDE failed, ERROR='\n          MESGCOMP 1,CHAR,8,COMM_INFO_01\n          MESGCOMP 1,TEXT,,'REASON'\n          MESGCOMP 1,CHAR,8,COMM_INFO_02\n          MESG  END\n\n          MESG  5\n          MESGCOMP 1,TEXT,,'DISBIND05E '\n          MESGCOMP 1,TEXT,,'Binder INCLUDE failed, ERROR='\n          MESGCOMP 1,CHAR,8,COMM_INFO_01\n          MESGCOMP 1,TEXT,,'REASON'\n          MESGCOMP 1,CHAR,8,COMM_INFO_02\n          MESG  END\n\n          MESG  6\n          MESGCOMP 1,TEXT,,'DISBIND06E '\n          MESGCOMP 1,TEXT,,'Binder DELETEW failed, ERROR='\n          MESGCOMP 1,CHAR,8,COMM_INFO_01\n          MESGCOMP 1,TEXT,,'REASON'\n          MESGCOMP 1,CHAR,8,COMM_INFO_02\n          MESG  END\n\n          MESG  7\n          MESGCOMP 1,TEXT,,'DISBIND07E '\n          MESGCOMP 1,TEXT,,'Binder ENDD failed, ERROR='\n          MESGCOMP 1,CHAR,8,COMM_INFO_01\n          MESGCOMP 1,TEXT,,'REASON'\n          MESGCOMP 1,CHAR,8,COMM_INFO_02\n          MESG  END\n\n          DC    X'FF'\nDISBINDB  EQU   *\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISBLISTA EQU   *\n          DC    CL8'DISBLIST'                 CSECT\n          DC    AL4(DISBLISTB-DISBLISTA)\n\n          MESG  1\n          MESGCOMP 1,TEXT,,'Begin disp > end disp'\n          MESG  END\n\n          MESG  2\n          MESGCOMP 1,TEXT,,'Bad hex digit'\n          MESG  END\n\n          MESG  3\n          MESGCOMP 1,TEXT,,'No begin disp'\n          MESG  END\n\n          MESG  4\n          MESGCOMP 1,TEXT,,'No begin or end disp'\n          MESG  END\n\n          MESG  5\n          MESGCOMP 1,TEXT,,'No end disp'\n          MESG  END\n\n          MESG  6\n          MESGCOMP 1,TEXT,,'No register'\n          MESG  END\n\n          MESG  7\n          MESGCOMP 1,TEXT,,'Bad register'\n          MESG  END\n\n          DC    X'FF'\nDISBLISTB EQU   *\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISCONFA EQU   *\n         DC    CL8'DISCONF '                  CSECT\n         DC    AL4(DISCONFB-DISCONFA)\n\n         MESG  1\n         MESGCOMP 1,TEXT,,'DISCONF01I '\n         MESGCOMP 1,TEXT,,'Enter a data set name'\n         MESG  END\n\n         MESG  2\n         MESGCOMP 1,TEXT,,'DISCONF02E '\n         MESGCOMP 1,TEXT,,'Data set is not a PDS'\n         MESG  END\n\n         MESG  3\n         MESGCOMP 1,TEXT,,'DISCONF03I '\n         MESGCOMP 1,TEXT,,'Enter a function'\n         MESG  END\n\n         MESG  4\n         MESGCOMP 1,TEXT,,'DISCONF04E '\n         MESGCOMP 1,TEXT,,'Enter -R- or -S- for function'\n         MESG  END\n\n         MESG  6\n         MESGCOMP 1,TEXT,,'DISCONF06E '\n         MESGCOMP 1,TEXT,,'Member not found'\n         MESG  END\n\n         MESG  7\n         MESGCOMP 1,TEXT,,'DISCONF07E '\n         MESGCOMP 1,TEXT,,'Stow failed, R15 '\n         MESGCOMP 1,HEX,02,COMM_INFO_01\n         MESG  END\n\n         DC    X'FF'\nDISCONFB EQU  *\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISDAIRA  EQU   *\n          DC    CL8'DISDAIR '                 CSECT\n          DC    AL4(DISDAIRB-DISDAIRA)\n\n          MESG  1\n          MESGCOMP 1,TEXT,,'DISDAIR01E '\n          MESGCOMP 1,TEXT,,'Allocation error'\n          MESGCOMP 2,TEXT,,'           '\n          MESGCOMP 2,TEXT,,'DD name'\n          MESGCOMP 2,CHAR,8,COMM_INFO_01\n          MESGCOMP 3,TEXT,,'           '\n          MESGCOMP 3,TEXT,,'DSN    '\n          MESGCOMP 3,CHAR,44,COMM_INFO_02\n          MESGCOMP 4,TEXT,,'           '\n          MESGCOMP 4,TEXT,,'R15'\n          MESGCOMP 4,HEX,02,COMM_INFO_03\n          MESGCOMP 4,TEXT,,'    Error'\n          MESGCOMP 4,HEX,04,COMM_INFO_04+0\n          MESGCOMP 4,TEXT,,'    INFO'\n          MESGCOMP 4,HEX,04,COMM_INFO_04+2\n          MESG  END\n\n          MESG  2\n          MESGCOMP 1,TEXT,,'DISDAIR02E '\n          MESGCOMP 1,TEXT,,'Deallocation error'\n          MESGCOMP 2,TEXT,,'           '\n          MESGCOMP 2,TEXT,,'DD name'\n          MESGCOMP 2,CHAR,8,COMM_INFO_01\n          MESGCOMP 3,TEXT,,'           '\n          MESGCOMP 3,TEXT,,'R15'\n          MESGCOMP 3,HEX,02,COMM_INFO_03\n          MESGCOMP 3,TEXT,,'    Error'\n          MESGCOMP 3,HEX,04,COMM_INFO_04+0\n          MESGCOMP 3,TEXT,,'    INFO'\n          MESGCOMP 3,HEX,04,COMM_INFO_04+2\n          MESG  END\n\n          MESG  3\n          MESGCOMP 1,TEXT,,'DISDAIR03E '\n          MESGCOMP 1,TEXT,,'Error concatenating SYSLIB DD'\n          MESGCOMP 2,TEXT,,'           '\n          MESGCOMP 2,TEXT,,'R15'\n          MESGCOMP 2,HEX,02,COMM_INFO_03\n          MESGCOMP 2,TEXT,,'    Error'\n          MESGCOMP 2,HEX,04,COMM_INFO_04+0\n          MESGCOMP 2,TEXT,,'    INFO'\n          MESGCOMP 2,HEX,04,COMM_INFO_04+2\n          MESGCOMP 3,TEXT,,'           '\n          MESGCOMP 3,TEXT,,'DD1        '\n          MESGCOMP 3,CHAR,08,COMM_INFO_01\n          MESGCOMP 4,TEXT,,'           '\n          MESGCOMP 4,TEXT,,'DD2        '\n          MESGCOMP 4,CHAR,08,COMM_INFO_02\n          MESG  END\n\n          DC    X'FF'\nDISDAIRB  EQU   *\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISDCONVA EQU   *\n          DC    CL8'DISDCONV '                CSECT\n          DC    AL4(DISDCONVB-DISDCONVA)\n\n          MESG  1\n          MESGCOMP 1,TEXT,,'DISDCONV01E '\n          MESGCOMP 1,TEXT,,'Bad digit --> '\n          MESGCOMP 1,CHAR,1,COMM_INFO_01\n          MESG  END\n\n          DC    X'FF'\nDISDCONVB EQU   *\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISDIRA   EQU   *\n          DC    CL8'DISDIR  '                 CSECT\n          DC    AL4(DISDIRB-DISDIRA)\n\n          MESG  1\n          MESGCOMP 1,TEXT,,'DISDIR01E  '\n          MESGCOMP 1,TEXT,,'DESERV error.  R15 '\n          MESGCOMP 4,HEX,04,COMM_INFO_01\n          MESG  END\n\n          DC    X'FF'\nDISDIRB   EQU   *\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISDLISTA EQU   *\n          DC    CL8'DISDLIST'                 CSECT\n          DC    AL4(DISDLISTB-DISDLISTA)\n\n          MESG  1\n          MESGCOMP 1,TEXT,,'Begin disp > end disp'\n          MESG  END\n\n          MESG  2\n          MESGCOMP 1,TEXT,,'Bad hex digit'\n          MESG  END\n\n          MESG  3\n          MESGCOMP 1,TEXT,,'Begin disp required'\n          MESG  END\n\n          MESG  4\n          MESGCOMP 1,TEXT,,'CSECT length used for end'\n          MESG  END\n\n          MESG  5\n          MESGCOMP 1,TEXT,,'End limited to CSECT length'\n          MESG  END\n\n          MESG  6\n          MESGCOMP 1,TEXT,,'Begin disp > CSECT length'\n          MESG  END\n\n          DC    X'FF'\nDISDLISTB EQU   *\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISDSECTA EQU   *\n          DC    CL8'DISDSECT'                 CSECT\n          DC    AL4(DISDSECTB-DISDSECTA)\n\n          MESG  1\n          MESGCOMP 1,TEXT,,'DISDSECT01I'\n          MESGCOMP 1,TEXT,,'DSECT '\n          MESGCOMP 1,CHAR,63,COMM_INFO_01\n          MESGCOMP 2,TEXT,,'            '\n          MESGCOMP 2,TEXT,,'Is being read from'\n          MESGCOMP 3,TEXT,,'            '\n          MESGCOMP 3,TEXT,,'DD '\n          MESGCOMP 3,CHAR,8,COMM_INFO_02\n          MESGCOMP 4,TEXT,,'            '\n          MESGCOMP 4,TEXT,,'DSN'\n          MESGCOMP 4,CHAR,44,COMM_INFO_03\n          MESG  END\n\n          MESG  2\n          MESGCOMP 1,TEXT,,'DISDSECT02E'\n          MESGCOMP 1,TEXT,,'Label'\n          MESGCOMP 1,CHAR,63,COMM_INFO_01\n          MESGCOMP 2,TEXT,,'            '\n          MESGCOMP 2,TEXT,,'not in DSECT'\n          MESGCOMP 2,CHAR,63,COMM_INFO_02\n          MESGCOMP 3,TEXT,,'            '\n          MESGCOMP 3,TEXT,,'as specified on a USING statement'\n          MESG  END\n\n          MESG  3\n          MESGCOMP 1,TEXT,,'DISDSECT03E'\n          MESGCOMP 1,TEXT,,'DSECT '\n          MESGCOMP 1,CHAR,63,COMM_INFO_01\n          MESGCOMP 2,TEXT,,'            '\n          MESGCOMP 2,TEXT,,'is not in ASM START/ASM END or DISDSECT'\n          MESGCOMP 2,TEXT,,'library(s)'\n          MESG  END\n\n          DC    X'FF'\nDISDSECTB EQU   *\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISBMAINA EQU  *\n         DC    CL8'DISBMAIN'                  CSECT\n         DC    AL4(DISBMAINB-DISBMAINA)\n\n         MESG  1\n         MESGCOMP 1,TEXT,,'DISBMAIN01I '\n         MESGCOMP 1,TEXT,,'DISPUNCH DD not present, no source will be'\n         MESGCOMP 1,TEXT,,'generated'\n         MESG  END\n\n         MESG  2\n         MESGCOMP 1,TEXT,,'DISBMAIN02I '\n         MESGCOMP 1,TEXT,,'ABEND requested, abnormally terminating'     g'\n         MESG  END\n\n         MESG  3\n         MESGCOMP 1,TEXT,,'DISBMAIN03I '\n         MESGCOMP 1,TEXT,,'Disassembly complete'\n         MESG  END\n\n         MESG  4\n         MESGCOMP 1,TEXT,,'DISBMAIN04E '\n         MESGCOMP 1,TEXT,,'DISIN DD statement missing'\n         MESG  END\n\n         MESG  5\n         MESGCOMP 1,TEXT,,'DISBMAIN05E '\n         MESGCOMP 1,TEXT,,'DISMOD DD statement missing'\n         MESG  END\n\n         MESG  6\n         MESGCOMP 1,TEXT,,'DISBMAIN06E '\n         MESGCOMP 1,TEXT,,'Error(s) in control parameters'\n         MESG  END\n\n         MESG  7\n         MESGCOMP 1,TEXT,,'DISBMAIN07E '\n         MESGCOMP 1,TEXT,,'Error(s) from BINDER, aborting'\n         MESG  END\n\n         MESG  9\n         MESGCOMP 1,TEXT,,'DISBMAIN09E '\n         MESGCOMP 1,TEXT,,'Error(s) assembling DSECTs'\n         MESG  END\n\n         MESG  12\n         MESGCOMP 1,TEXT,,'DISBMAIN12E '\n         MESGCOMP 1,TEXT,,'Serious error(s) detected, aborting'\n         MESG  END\n\n         MESG  13\n         MESGCOMP 1,TEXT,,'DISBMAIN13E '\n         MESGCOMP 1,TEXT,,'Error opening pre-processed DSECT data set'\n         MESGCOMP 2,TEXT,,'            '\n         MESGCOMP 2,TEXT,,'R15='\n         MESGCOMP 2,HEX,2,COMM_INFO_01\n         MESGCOMP 2,TEXT,,'DDNAME='\n         MESGCOMP 2,CHAR,8,COMM_INFO_02\n         MESGCOMP 2,TEXT,,'DSN='\n         MESGCOMP 2,CHAR,8,COMM_INFO_03\n         MESG  END\n\n         DC    X'FF'\nDISBMAINB EQU   *\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISKLISTA EQU  *\n         DC    CL8'DISKLIST'                  CSECT\n         DC    AL4(DISKLISTB-DISKLISTA)\n\n         MESG  1\n         MESGCOMP 1,TEXT,,'DISKLIST01E '\n         MESGCOMP 1,TEXT,,'INIT CLOSE failed'\n         MESGCOMP 2,TEXT,,'            '\n         MESGCOMP 2,TEXT,,'DD NAME '\n         MESGCOMP 2,CHAR,8,COMM_INFO_01\n         MESGCOMP 3,TEXT,,'            '\n         MESGCOMP 3,TEXT,,'DSN     '\n         MESGCOMP 3,CHAR,44,COMM_INFO_02\n         MESGCOMP 4,TEXT,,'            '\n         MESGCOMP 4,TEXT,,'R15     '\n         MESGCOMP 4,HEX,4,COMM_INFO_03\n         MESG  END\n\n         MESG  2\n         MESGCOMP 1,TEXT,,'DISKLIST02E '\n         MESGCOMP 1,TEXT,,'Error CLOSING ACB in new list'\n         MESGCOMP 2,TEXT,,'            '\n         MESGCOMP 2,TEXT,,'DD NAME '\n         MESGCOMP 2,CHAR,8,COMM_INFO_01\n         MESGCOMP 3,TEXT,,'            '\n         MESGCOMP 3,TEXT,,'DSN     '\n         MESGCOMP 3,CHAR,44,COMM_INFO_02\n         MESGCOMP 4,TEXT,,'            '\n         MESGCOMP 4,TEXT,,'R15     '\n         MESGCOMP 4,HEX,4,COMM_INFO_03\n         MESG  END\n\n         MESG  3\n         MESGCOMP 1,TEXT,,'DISKLIST03E '\n         MESGCOMP 1,TEXT,,'Error OPENING new ACB'\n         MESGCOMP 2,TEXT,,'            '\n         MESGCOMP 2,TEXT,,'DD NAME '\n         MESGCOMP 2,CHAR,8,COMM_INFO_01\n         MESGCOMP 3,TEXT,,'            '\n         MESGCOMP 3,TEXT,,'DSN     '\n         MESGCOMP 3,CHAR,44,COMM_INFO_02\n         MESGCOMP 4,TEXT,,'            '\n         MESGCOMP 4,TEXT,,'R15     '\n         MESGCOMP 4,HEX,4,COMM_INFO_03\n         MESG  END\n\n         MESG  4\n         MESGCOMP 1,TEXT,,'DISKLIST04E '\n         MESGCOMP 1,TEXT,,'Error OPENING old ACB'\n         MESGCOMP 2,TEXT,,'            '\n         MESGCOMP 2,TEXT,,'DD NAME '\n         MESGCOMP 2,CHAR,8,COMM_INFO_01\n         MESGCOMP 3,TEXT,,'            '\n         MESGCOMP 3,TEXT,,'DSN     '\n         MESGCOMP 3,CHAR,44,COMM_INFO_02\n         MESGCOMP 4,TEXT,,'            '\n         MESGCOMP 4,TEXT,,'R15     '\n         MESGCOMP 4,HEX,4,COMM_INFO_03\n         MESG  END\n\n         MESG  5\n         MESGCOMP 1,TEXT,,'DISKLIST05W '\n         MESGCOMP 1,TEXT,,'Exit requested while error(s) exited'\n         MESGCOMP 2,TEXT,,'            '\n         MESGCOMP 2,TEXT,,'Pending changes cancelled'\n         MESG  END\n\n         DC    X'FF'\nDISKLISTB EQU  *\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISNAMEA EQU   *\n         DC    CL8'DISNAME'                   CSECT\n         DC    AL4(DISNAMEB-DISNAMEA)\n\n         MESG  1\n         MESGCOMP 1,TEXT,,'DISNAME01E  '\n         MESGCOMP 1,TEXT,,'Requested CSECT not found'\n         MESG  END\n\n         DC    X'FF'\nDISNAMEB EQU   *\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISOPTSA  EQU  *\n         DC    CL8'DISOPTS'                   CSECT\n         DC    AL4(DISOPTSB-DISOPTSA)\n\n         MESG  1\n         MESGCOMP 1,TEXT,,'DISOPTS01E  '\n         MESGCOMP 1,TEXT,,'Invalid label prefix'\n         MESG  END\n\n         MESG  2\n         MESGCOMP 1,TEXT,,'DISOPTS02E  '\n         MESGCOMP 1,TEXT,,'Invalid OPCODE selection'\n         MESG  END\n\n         MESG  3\n         MESGCOMP 1,TEXT,,'DISOPTS03W  '\n         MESGCOMP 1,TEXT,,'Output DSN blank'\n         MESGCOMP 2,TEXT,,'Generated source will be discarded'\n         MESG  END\n\n         MESG  4\n         MESGCOMP 1,TEXT,,'DISOPTS04E  '\n         MESGCOMP 1,TEXT,,'Exit with ERROR(s) pending'\n         MESGCOMP 2,TEXT,,'            '\n         MESGCOMP 2,TEXT,,'All changes discarded'\n         MESG  END\n\n         DC    X'FF'\nDISOPTSB  EQU  *\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISNLISTA EQU  *\n         DC    CL8'DISNLIST'                  CSECT\n         DC    AL4(DISNLISTB-DISNLISTA)\n\n         MESG  1\n         MESGCOMP 1,TEXT,,'DISNLIST01I '\n         MESGCOMP 1,TEXT,,'No section names'\n         MESG  END\n\n         DC    X'FF'\nDISNLISTB EQU  *\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISPARMA EQU   *\n         DC    CL8'DISPARM'                   CSECT\n         DC    AL4(DISPARMB-DISPARMA)\n\n         MESG  01\n         MESGCOMP 1,TEXT,,'DISPARM01E  '\n         MESGCOMP 1,TEXT,,'Unrecognized keyword.'\n         MESG  END\n\n         MESG  02\n         MESGCOMP 1,TEXT,,'DISPARM02E  '\n         MESGCOMP 1,TEXT,,'Improper continuation.'\n         MESG  END\n\n         MESG  03\n         MESGCOMP 1,TEXT,,'DISPARM03E  '\n         MESGCOMP 1,TEXT,,'Too many parms.'\n         MESG  END\n\n         MESG  04\n         MESGCOMP 1,TEXT,,'DISPARM04E  '\n         MESGCOMP 1,TEXT,,'Parameter too long (63 characters max).'\n         MESG  END\n\n         MESG  05\n         MESGCOMP 1,TEXT,,'DISPARM05E  '\n         MESGCOMP 1,TEXT,,'SYSIN DD required for ASM START/ASM END.'\n         MESG  END\n\n         MESG  06\n         MESGCOMP 1,TEXT,,'DISPARM06E  '\n         MESGCOMP 1,TEXT,,'Starting displacement larger than ending'\n         MESGCOMP 2,TEXT,,'            '\n         MESGCOMP 2,TEXT,,'displacment on BASE statement.'\n         MESG  END\n\n         MESG  07\n         MESGCOMP 1,TEXT,,'DISPARM07E  '\n         MESGCOMP 1,TEXT,,'CSECT name cannot be blank.'\n         MESG  END\n\n         MESG  08\n         MESGCOMP 1,TEXT,,'DISPARM08E  '\n         MESGCOMP 1,TEXT,,'DATA area overlaps previously defined area.'\n         MESG  END\n\n         MESG  09\n         MESGCOMP 1,TEXT,,'DISPARM09E  '\n         MESGCOMP 1,TEXT,,'Duplicate label prefix.'\n         MESG  END\n\n         MESG  10\n         MESGCOMP 1,TEXT,,'DISPARM10E  '\n         MESGCOMP 1,TEXT,,'Label prefix cannot be blank.'\n         MESG  END\n\n         MESG  11\n         MESGCOMP 1,TEXT,,'DISPARM11E  '\n         MESGCOMP 1,TEXT,,'DATA is reserved.'                           '\n         MESGCOMP 1,TEXT,,'Choose a different prefix'                   '\n         MESG  END\n\n         MESG  12\n         MESGCOMP 1,TEXT,,'DISPARM12E  '\n         MESGCOMP 1,TEXT,,'Label prefix must be 4 characters or less.'\n         MESG  END\n\n         MESG  13\n         MESGCOMP 1,TEXT,,'DISPARM13E  '\n         MESGCOMP 1,TEXT,,'End disp must be given if start is given.'\n         MESG  END\n\n         MESG  14\n         MESGCOMP 1,TEXT,,'DISPARM14E  '\n         MESGCOMP 1,TEXT,,'Begin disp larger than ending disp.'\n         MESG  END\n\n         MESG  15\n         MESGCOMP 1,TEXT,,'DISPARM15E  '\n         MESGCOMP 1,TEXT,,'Start disp must be given if end is given.'\n         MESG  END\n\n         MESG  16\n         MESGCOMP 1,TEXT,,'DISPARM16E  '\n         MESGCOMP 1,TEXT,,'Unrecognized register name.'\n         MESG  END\n\n         MESG  17\n         MESGCOMP 1,TEXT,,'DISPARM17E  '\n         MESGCOMP 1,TEXT,,'Register name is blank.'\n         MESG  END\n\n         MESG  18\n         MESGCOMP 1,TEXT,,'DISPARM18E  '\n         MESGCOMP 1,TEXT,,'Register name too long.'\n         MESG  END\n\n         MESG  19\n         MESGCOMP 1,TEXT,,'DISPARM19E  '\n         MESGCOMP 1,TEXT,,'Bad hex digit.'\n         MESG  END\n\n         MESG  20\n         MESGCOMP 1,TEXT,,'DISPARM20E  '\n         MESGCOMP 1,TEXT,,'Too many hex digits (8  max).'\n         MESG  END\n\n         MESG  21\n         MESGCOMP 1,TEXT,,'DISPARM21E  '\n         MESGCOMP 1,TEXT,,'Label prefix required if BASE given.'\n         MESG  END\n\n         MESG  22\n         MESGCOMP 1,TEXT,,'DISPARM21W  '\n         MESGCOMP 1,TEXT,,'No BASE defined.  Label prefix ignored.'\n         MESG  END\n\n          DC    X'FF'\nDISPARMB  EQU   *\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISRLD2A EQU   *\n         DC    CL8'DISRLD2'                   CSECT\n         DC    AL4(DISRLD2B-DISRLD2A)\n\n         MESG  1\n         MESGCOMP 1,TEXT,,'DISRLD201I  '\n         MESGCOMP 1,TEXT,,'User defined data area at'\n         MESGCOMP 1,ADDR,8,COMM_INFO_01\n         MESGCOMP 1,TEXT,,'is an RLD'\n         MESG  END\n\n         MESG  2\n         MESGCOMP 1,TEXT,,'DISRLD202I  '\n         MESGCOMP 1,TEXT,,'RLD item at'\n         MESGCOMP 1,ADDR,8,COMM_INFO_01\n         MESGCOMP 1,TEXT,,'to'\n         MESGCOMP 1,ADDR,8,COMM_INFO_02\n         MESGCOMP 1,TEXT,,'overlaps first part of user area at'\n         MESGCOMP 1,ADDR,8,COMM_INFO_03\n         MESGCOMP 1,TEXT,,'to'\n         MESGCOMP 1,ADDR,8,COMM_INFO_04\n         MESG  END\n\n         MESG  3\n         MESGCOMP 1,TEXT,,'DISRLD203I  '\n         MESGCOMP 1,TEXT,,'RLD item at'\n         MESGCOMP 1,ADDR,8,COMM_INFO_01\n         MESGCOMP 1,TEXT,,'to'\n         MESGCOMP 1,ADDR,8,COMM_INFO_02\n         MESGCOMP 1,TEXT,,'is ''in the middle'' of a user area at'\n         MESGCOMP 1,ADDR,8,COMM_INFO_03\n         MESGCOMP 1,TEXT,,'to'\n         MESGCOMP 1,ADDR,8,COMM_INFO_04\n         MESG  END\n\n         MESG  4\n         MESGCOMP 1,TEXT,,'DISRLD204I  '\n         MESGCOMP 1,TEXT,,'RLD item at'\n         MESGCOMP 1,ADDR,8,COMM_INFO_01\n         MESGCOMP 1,TEXT,,'to'\n         MESGCOMP 1,ADDR,8,COMM_INFO_02\n         MESGCOMP 1,TEXT,,'overlaps end of user area at'\n         MESGCOMP 1,ADDR,8,COMM_INFO_03\n         MESGCOMP 1,TEXT,,'to'\n         MESGCOMP 1,ADDR,8,COMM_INFO_04\n         MESG  END\n\n         MESG  5\n         MESGCOMP 1,TEXT,,'DISRLD205I  '\n         MESGCOMP 1,TEXT,,'RLD item at'\n         MESGCOMP 1,ADDR,8,COMM_INFO_01\n         MESGCOMP 1,TEXT,,'to'\n         MESGCOMP 1,ADDR,8,COMM_INFO_02\n         MESGCOMP 1,TEXT,,'spans user area at'\n         MESGCOMP 1,ADDR,8,COMM_INFO_03\n         MESGCOMP 1,TEXT,,'to'\n         MESGCOMP 1,ADDR,8,COMM_INFO_04\n         MESG  END\n\n         DC    X'FF'\nDISRLD2B EQU   *\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISSLISTA EQU  *\n         DC    CL8'DISSLIST'                  CSECT\n         DC    AL4(DISSLISTB-DISSLISTA)\n\n         MESG  1\n         MESGCOMP 1,TEXT,,'DISSLIST01I '\n         MESGCOMP 1,TEXT,,'Exit requested while error(s) existed'\n         MESGCOMP 2,TEXT,,'            '\n         MESGCOMP 2,TEXT,,'Pending changes to SYSLIBs cancelled'\n         MESG  END\n\n         DC    X'FF'\nDISSLISTB EQU  *\n\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISTLISTA EQU   *\n         DC    CL8'DISTLIST'                  CSECT\n         DC    AL4(DISTLISTB-DISTLISTA)\n\n         MESG  1\n         MESGCOMP 1,TEXT,,'DISTLIST01E '\n         MESGCOMP 1,TEXT,,'LMINIT failed, R15='\n         MESGCOMP 1,HEX,4,COMM_INFO_01\n         MESG  END\n\n         DC    X'FF'\nDISTLISTB EQU  *\n\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISTMAINA EQU   *\n         DC    CL8'DISTMAIN'                  CSECT\n         DC    AL4(DISTMAINB-DISTMAINA)\n\n         MESG  1\n         MESGCOMP 1,TEXT,,'DISTMAIN01E '\n         MESGCOMP 1,TEXT,,'Library name is required'\n         MESG  END\n\n         MESG  2\n         MESGCOMP 1,TEXT,,'DISTMAIN02E '\n         MESGCOMP 1,TEXT,,'Data set is not a PDS'\n         MESG  END\n\n         MESG  3\n         MESGCOMP 1,TEXT,,'DISTMAIN03E '\n         MESGCOMP 1,TEXT,,'Invalid function'\n         MESG  END\n\n         MESG  4\n         MESGCOMP 1,TEXT,,'DISTMAIN04I '\n         MESGCOMP 1,TEXT,,'Enter a function'\n         MESG  END\n\n         MESG  5\n         MESGCOMP 1,TEXT,,'DISTMAIN05E '\n         MESGCOMP 1,TEXT,,'No DSECT KSDSes have been defined'\n         MESGCOMP 2,TEXT,,'            '\n         MESGCOMP 2,TEXT,,'No DSECTs have been defined via assembler'\n         MESGCOMP 2,TEXT,,'source'\n         MESG  END\n\n         DC    X'FF'\nDISTMAINB EQU  *\n\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISULISTA EQU   *\n         DC    CL8'DISULIST'                  CSECT\n         DC    AL4(DISULISTB-DISULISTA)\n\n         MESG  1\n         MESGCOMP 1,TEXT,,'DISULIST01E '\n         MESGCOMP 1,TEXT,,'A register is required'\n         MESG  END\n\n         MESG  2\n         MESGCOMP 1,TEXT,,'DISULIST02E '\n         MESGCOMP 1,TEXT,,'Invalid register value'\n         MESG  END\n\n         MESG  3\n         MESGCOMP 1,TEXT,,'DISULIST03E '\n         MESGCOMP 1,TEXT,,'End disp is less than begin disp'\n         MESG  END\n\n         DC    X'FF'\nDISULISTB EQU  *\n\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISVARA  EQU   *\n         DC    CL8'DISVAR'                    CSECT\n         DC    AL4(DISVARB-DISVARA)\n\n         MESG  1\n         MESGCOMP 1,TEXT,,'DISVAR01E   '\n         MESGCOMP 1,TEXT,,'VDEFINE failed for'\n         MESGCOMP 1,CHAR,8,COMM_INFO_01\n         MESGCOMP 1,TEXT,,', R15='\n         MESGCOMP 1,HEX,4,COMM_INFO_02\n         MESG  END\n\n         MESG  2\n         MESGCOMP 1,TEXT,,'DISVAR02E   '\n         MESGCOMP 1,TEXT,,'VDELETE failed for'\n         MESGCOMP 1,CHAR,8,COMM_INFO_01\n         MESGCOMP 1,TEXT,,', R15='\n         MESGCOMP 1,HEX,4,COMM_INFO_02\n         MESG  END\n\n         DC    X'FF'\nDISVARB  EQU   *\n\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISVBUA  EQU   *\n         DC    CL8'DISVBU'                    CSECT\n         DC    AL4(DISVBUB-DISVBUA)\n\n         MESG  1\n         MESGCOMP 1,TEXT,,'DISVBU01I   '\n         MESGCOMP 1,TEXT,,'BASE'\n         MESGCOMP 1,CHAR,3,COMM_INFO_01\n         MESGCOMP 1,TEXT,,'end disp changed from'\n         MESGCOMP 1,ADDR,8,COMM_INFO_02\n         MESGCOMP 1,TEXT,,'to'\n         MESGCOMP 1,ADDR,8,COMM_INFO_03\n         MESGCOMP 2,TEXT,,'           '\n         MESGCOMP 2,TEXT,,'(limit to CSECT length)'\n         MESG  END\n\n         MESG  2\n         MESGCOMP 1,TEXT,,'DISVBU02I   '\n         MESGCOMP 1,TEXT,,'BASE'\n         MESGCOMP 1,CHAR,3,COMM_INFO_01\n         MESGCOMP 1,TEXT,,'starting disp'\n         MESGCOMP 1,ADDR,8,COMM_INFO_02\n         MESGCOMP 1,TEXT,,'is beyond end of CSECT'\n         MESG  END\n\n         DC    X'FF'\nDISVBUB  EQU   *\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISVDATAA EQU   *\n         DC    CL8'DISVDATA'                  CSECT\n         DC    AL4(DISVDATAB-DISVDATAA)\n\n         MESG  1\n         MESGCOMP 1,TEXT,,'DISVDATA0EI '\n         MESGCOMP 1,TEXT,,'PQUERY failed.  Panel'\n         MESGCOMP 1,CHAR,8,COMM_INFO_01\n         MESGCOMP 1,TEXT,,', R15'\n         MESGCOMP 1,HEX,2,COMM_INFO_02\n         MESG  END\n\n         MESG  2\n         MESGCOMP 1,TEXT,,'DISVDATA02E '\n         MESGCOMP 1,TEXT,,'VDATA VDELETE failed.  R15'\n         MESGCOMP 1,HEX,2,COMM_INFO_02\n         MESG  END\n\n         MESG  3\n         MESGCOMP 1,TEXT,,'DISVDATA03E '\n         MESGCOMP 1,TEXT,,'VDATA VDEFINE failed.  R15'\n         MESGCOMP 1,HEX,2,COMM_INFO_02\n         MESG  END\n\n         DC    X'FF'\nDISVDATAB  EQU   *\n\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DC    X'FFFFFFFF'                 END OF TABLE\n\n         DISCOMM TYPE=DSECT\n         COPY    DISASMDA\n         COPY    MSG\n\n         IFGACB  AM=VSAM\nACB_L    EQU     *-IFGACB\n\n         COPY    REGEQU\n         END     DISMSGS\n./ ADD NAME=DISNAME  0101-09119-09198-0843-00176-00176-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISNAME                                              *\n*                                                                    *\n*  Function:                                                         *\n*   Obtain the section names in the LMOD                             *\n*                                                                    *\n*   DISBIND has already established a dialog                         *\n*                                                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISNAME  CSECT\nDISNAME  AMODE 31\nDISNAME  RMODE ANY\n         USING DISNAME,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                  SAVE REGS\n         LR    R11,R15                          SET BASE REG\n         B     MOD0000                          SKIP EYECATCHER\nMODID    DC    CL8'DISNAME'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS             WORK AREA\n         A     R15,DXD_START                    PLUS DISP\n         ST    R13,4(,R15)                      CHAIN SAVE AREA\n         ST    R15,8(,R13)                      CHAIN SAVE AREA\n         LR    R13,R15                          SET SAVE AREA ADDRESS\n         USING DXDNAME,R13\n         ITRACE ID=ENTRY\n* ------------------------------------------------------------------- *\n*        Obtain and initialize NAME buffer                            *\n* ------------------------------------------------------------------- *\n         ITRACE ID=GETBUF\n         IEWBUFF FUNC=GETBUF,                                          +\n               TYPE=NAME\n         ST    R8,DXD_BUFFER\n         ITRACE ID=INIT_BUF,                                           +\n               RDATA1=R8,                                              +\n               RDATA2=R7\n         IEWBUFF FUNC=INITBUF,                                         +\n               TYPE=NAME\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\nNAME0000 DS    0H\n         ITRACE ID=GET_NAME\n         XC    DXD_CURSOR,DXD_CURSOR\n         L     R8,DXD_BUFFER\n         LA    R7,BNLH_END\n         IEWBIND FUNC=GETN,                                            +\n               VERSION=5,                                              +\n               WORKMOD=COMM_DIALOG_WORKMOD,                            +\n               AREA=IEWBBNL,                                           +\n               CURSOR=DXD_CURSOR,                                      +\n               COUNT=DXD_NAME_RETURNED,                                +\n               TCOUNT=DXD_TOTAL_NAMES,                                 +\n               NTYPE=S,                                                +\n               RETCODE=DXD_RETURN_CODE,                                +\n               RSNCODE=DXD_REASON_CODE,                                +\n               MF=(E,DXD_IEWBIND,COMPLETE)\n         ITRACE ID=NAME_RC,                                            +\n               DATA1=DXD_RETURN_CODE,                                  +\n               DATA2=DXD_REASON_CODE\n         CLC   DXD_RETURN_CODE,F4\n         BH    ERR0010\n         BL    NAME0010\n         CLC   DXD_REASON_CODE,X_83000800\n         BE    NAME0010\n         CLC   DXD_REASON_CODE,X_83000801\n         BE    ERR0020\nNAME0010 DS    0H\n         ICM   R9,15,DXD_NAME_RETURNED\n         USING BNL_ENTRY,R7\nNAME0020 DS    0H\n         ITRACE ID=NAME_1,                                             +\n               RDATA1=R7,                                              +\n               RDATA2=R9\n         L     R2,BNL_NAME_PTR                 ADDRESS OF NAME\n         CLI   0(R2),C' '                      PRINTABLE NAME?\n         BL    NAME0040                        NO\n         L     R1,COMM_NAME_NBR                NBR OF 'NAMES'\n         LA    R1,1(,R1)                       PLUS 1\n         ST    R1,COMM_NAME_NBR                SAVE TOTAL\n         GETMAIN RU,                                                   +\n               LV=NAME_DSECT_L,                                        +\n               LOC=ANY\n         USING NAME_DSECT,R1\n         MVC   NAME_EYE,NAME_ID                SET EYECATCHER\n         MVC   NAME_NEXT,COMM_NAME_NEXT        CHAIN EXISTING TO NEW\n         ST    R1,COMM_NAME_NEXT               ADD NEW NAME TO CHAIN\n         MVC   NAME_NAME,COMM_BLANKS           INITIALIZE NAME\n         LH    R3,BNL_NAME_CHARS               LENGTH OF NAME\n         CH    R3,H8                           MORE THAN 8?\n         BNH   NAME0030                        NO\n         LH    R3,H8                           LIMIT TO 8\nNAME0030 DS    0H\n         BCTR  R3,0                            FOR EX\n         EX    R3,NAME_MVC                     COPY NAME\n         MVC   NAME_OFFSET,BNL_SEGM_OFF        COPY OFFSET\nNAME0040 DS    0H\n         ITRACE ID=NAME_2,                                             +\n               RDATA1=R1,                                              +\n               DATA2=NAME_NAME\n         LA    R7,BNL_END\n         BCT   R9,NAME0020\n         CLC   DXD_REASON_CODE,X_83000800\n         BNE   NAME0000\n         B     EXIT0000\nNAME_MVC MVC   NAME_NAME(0),0(R2)\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\nERR0010  DS    0H\n         DC    H'1'\nERR0020  DS    0H\n         DC    H'2'\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                     RESTORE REGISTER 13      ASE01670\n         LM    R14,R12,12(R13)                 RESTORE OTHER REGISTERS  ASE01680\n         SR    R15,R15                         SET RETURN CODE          ASE01690\n         BR    R14                             RETURN TO CALLER         ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START     DC   Q(DXDNAME)\nF4            DC   F'4'\nH8            dc   H'8'\nB_NAME        DC   XL2'5',C'B_NAME'\nX_83000800    DC   X'83000800'\nX_83000801    DC   X'83000801'\nNAME_ID       DC   CL8'NAME'\n\n         IEWBUFF FUNC=MAPBUF,                                          +\n               TYPE=NAME,                                              +\n               HEADREG=R8,                                             +\n               ENTRYREG=R7,                                            +\n               SIZE=50,                                                +\n               VERSION=5\n\n              IEWBIND MF=(L,IEWBIND_I)\nIEWBIND_L     EQU  *-IEWBIND_I\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDNAME           DSECT\n                  DS       18F\nDXD_CSECT         DS       CL8\n\nDXD_RETURN_CODE   DS   F\nDXD_REASON_CODE   DS   F\n\nDXD_BUFFER        DS   A\n\nDXD_CURSOR        DS   F\nDXD_NAME_RETURNED DS   F\nDXD_TOTAL_NAMES   DS   F\n\nDXD_IEWBIND       DS   0F,(IEWBIND_L)X\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n                  DISCOMM TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n                  COPY    DISASMDA\n\n                  IFGACB  AM=VSAM\nACB_L             EQU     *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n                  COPY    REGEQU\n                  END     DISNAME\n./ ADD NAME=DISNLIST 0101-09119-09198-0843-00271-00271-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISNLIST                                             *\n*                                                                    *\n*  Function:                                                         *\n*                                                                    *\n*   In batch print the section names                                 *\n*                                                                    *\n*   TSO display section names as a scrollable selection list         *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISNLIST CSECT\nDISNLIST AMODE 31\nDISNLIST RMODE ANY\n         USING DISNLIST,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     MOD0000                           SKIP EYECATCHER\nMODID    DC    CL8'DISNLIST'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDNLIST,R13\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD                   DISSPFD ADDR\n         USING DISSPFD,R9                        DEFINE BASE\n         CLI   COMM_RUN_MODE,$COMM_RUN_TSO       RUNNING IN TSO MODE?\n         BE    MAIN0100                          YES\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0000 DS    0H\n         MVC   COMM_SUBHEAD,COMM_BLANKS\n         MVC   COMM_SUBHEAD(HEADING_1_L),HEADING_1\n         MVI   PRINT_COMMAND,$PRINT_SUB_HEAD\n         L     R15,V_DISPRINT\n         BALR  R14,R15\n         L     R6,COMM_NAME_NEXT                 1ST NAME\n         USING NAME_DSECT,R6\nMAIN0010 DS    0H\n         MVC   PRINT_DATA,COMM_BLANKS\nP        USING MSG_01,PRINT_DATA\n         MVC   P.MSG_01_NAME,NAME_NAME\n         MVC   COMM_INFO_01(4),NAME_OFFSET       COPY OFFSET\n         UNPK  COMM_INFO_02(9),COMM_INFO_01(5)   UPACK OFFSET\n         MVC   P.MSG_01_OFFSET,COMM_INFO_02\n         TR    P.MSG_01_OFFSET,COMM_HEXCHAR      TRANSLATE\n         MVI   PRINT_COMMAND,$PRINT_PRINT\n         L     R15,V_DISPRINT\n         BALR  R14,R15                           PRINT DETAIL\n         ICM   R6,15,NAME_NEXT                   NEXT NAME\n         BNZ   MAIN0010                          LOOP\n         SR    R2,R2\n         B     EXIT0000\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0100 DS    0H\n         ITRACE ID=TSO\n         ICM   R6,15,COMM_NAME_NEXT              FIRST SECTION NAME\n         BZ    ERR0010\nMAIN0110 DS    0H\n         ITRACE ID=BUILD\n         L     R0,COMM_VDATA_ADDR                VDATA ADDRESS\n         L     R1,COMM_VDATA_SIZE                VDATA SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                            INITIALIZE VDATA\n         L     R8,COMM_VDATA_ADDR\n         USING DETAIL,R8\n         L     R7,SPF_VDEPTH                     SCREEN DEPTH\n         ST    R6,DXD_FIRST_DISPLAYED            SAVE FIRST DISPLAYED\n         XC    DXD_LINES_BUILT,DXD_LINES_BUILT\nMAIN0120 DS    0H\n         ST    R6,DXD_LAST_DISPLAYED             SAVE LAST DISPLAYED\n         MVI   DETAIL_ATTR_1,$ATTR_INPUT         SET ATTRIBUTE\n         MVI   DETAIL_SELECT,C' '                INITIALIZE SELECT\n         MVI   DETAIL_ATTR_2,$ATTR_HIGH_TURQUOISE\n         MVC   DETAIL_NAME,NAME_NAME             COPY NAME\n         MVC   COMM_DWORD(4),NAME_OFFSET         COPY TO WORK AREA\n         UNPK  DETAIL_OFFSET(9),COMM_DWORD(5)    .. PREVENTS S0C4'S\n         TR    DETAIL_OFFSET,COMM_HEXCHAR\n         MVI   DETAIL_OFFSET+8,C' '\n         LA    R1,1                              CONSTANT 1\n         AH    R1,DXD_LINES_BUILT                PLUS TOTAL SO FAR\n         STH   R1,DXD_LINES_BUILT                UPDATE TOTAL\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0130\n         B     MAIN0200\nMAIN0130 DS    0H\n         ICM   R6,15,NAME_NEXT                   NEXT SECTION\n         BNZ   MAIN0120                          LOOP\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0200 DS    0H\n         ITRACE ID=DISP\n         MVC   COMM_SPF_PANEL,DISNDATA           SET PANEL NAME\n         L     R15,v_DISDISP                     DISDISP ENTRY POINT\n         BALR  R14,R15                           DISPLAY PANEL\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15\n         LTR   R2,R15                            RC = ZERO?\n         BNZ   EXIT0000                          NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         L     R8,COMM_VDATA_ADDR                VDATA ADDR\n         LH    R7,DXD_LINES_BUILT\nMAIN0210 DS    0H\n         CLI   DETAIL_SELECT,C' '                SELECTED?\n         BNE   MAIN0300                          YES\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0210                       CHECK NEXT LINE\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         CLI   SPF_ZVERB,C'B'                    BOTTOM?\n         BE    MAIN0220                          YES\n         CLI   SPF_ZVERB,C'D'                    DOWN?\n         BE    MAIN0240                          YES\n         CLI   SPF_ZVERB,C'T'                    TOP?\n         BE    MAIN0100                          YES\n         CLI   SPF_ZVERB,C'U'                    UP?\n         BE    MAIN0250                          YES\n         B     EXIT0000\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0220 DS    0H\n         ITRACE ID=BOTTOM\n         ICM   R6,15,COMM_NAME_NEXT\n         BZ    EXIT0000\nMAIN0230 DS    0H\n         ICM   R1,15,NAME_NEXT                   NEXT NAME\n         BZ    MAIN0110                          END OF LIST\n         LR    R6,R1                             COPY NEXT\n         B     MAIN0230                          LOOP\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0240 DS    0H\n         ITRACE ID=DOWN\n         CLI   SPF_ZSCROLLA,C'M'                 MAX?\n         BE    MAIN0220                          YES\n         L     R6,DXD_LAST_DISPLAYED             LAST ON DISPLAY\n         B     MAIN0110                          BUILD DISPLAY\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0250 DS    0H\n         ITRACE ID=UP\n         CLI   SPF_ZSCROLLA,C'M'                 MAX?\n         BE    MAIN0100                          YES\n         L     R6,DXD_FIRST_DISPLAYED            FIRST ON DISPLAY\n         L     R7,SPF_ZSCROLLN                   NBR OF LINES TO SCROLL\nMAIN0260 DS    0H\n         ICM   R1,15,NAME_PREV                   PREVIOUS ON CHAIN\n         BZ    MAIN0110\n         LR    R6,R1\n         BCT   R7,MAIN0260\n         B     MAIN0110\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0300 DS    0H\n         ITRACE ID=SELECTED,                                           +\n               DATA1=DETAIL_NAME\n         MVC   COMM_CSECT,DETAIL_NAME\n         MVC   SPF_CSECT,DETAIL_NAME\n         B     EXIT0000\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nERR0010  DS    0H\n         MVI   COMM_MSG_ID,1                     SET MESSAGE ID\nERR0100  DS    0H\n         ITRACE ID=ERROR,                                              +\n               DATA1=COMM_MSG_ID\n         OI    COMM_FLAGS,$COMM_FLAGS_ABORT\n         MVC   COMM_MSG_CSECT,MODID\n         L     R15,V_DISMSG\n         BALR  R14,R15\n         CLI   COMM_RUN_MODE,$COMM_RUN_TSO\n         BE    ERR0110\n         LA    R1,COMM_MSG_1\n         MVC   PRINT_DATA(L'COMM_MSG_1),COMM_MSG_1\n         MVI   PRINT_COMMAND,$PRINT_PRINT\n         L     R15,V_DISPRINT\n         BALR  R14,R15\n         B     EXIT0000\nERR0110  DS    0H\n         MVC   SPF_MSG_1,COMM_MSG_1\n         MVC   SPF_MSG_2,COMM_MSG_2\n         MVC   SPF_MSG_3,COMM_MSG_3\n         MVC   SPF_MSG_4,COMM_MSG_4\n         MVC   SPF_MSG_5,COMM_MSG_5\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670\n         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680\n         LR    R15,R2                            SET RC\n         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680\n         BR    R14                               RETURN TO CALLER       ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START     DC   Q(DXDNLIST)\n\nMSG_01        DS   0C\n              DC   CL1' '\nMSG_01_NAME   DC   CL8' '\n              DC   CL6' '\nMSG_01_OFFSET DC   CL8' '\nMSG_01_L      EQU  *-MSG_01\n\nHEADING_1     DC   C'0Section names'\nHEADING_1_L   EQU  *-HEADING_1\n\nDISNDATA      DC   CL8'DISNDATA'\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDNLIST             DSECT\n                     DS   18F\nDXD_CSECT            DS   CL8\n\nDXD_FIRST_DISPLAYED  DS  A\nDXD_LAST_DISPLAYED   DS  A\n\nDXD_LINES_BUILT      DS  H\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDETAIL        DSECT\n              DS  CL10\nDETAIL_ATTR_1 DS  X\nDETAIL_SELECT DS  X\nDETAIL_ATTR_2 DS  X\nDETAIL_NAME   DS  CL8\nDETAIL_ATTR_3 DS  X\nDETAIL_OFFSET DS  CL8\n              DS  X\nDETAIL_L      EQU *-DETAIL\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              DISCOMM TYPE=DSECT\n              DISSPFD TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              COPY    DISASMDA\n\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              COPY    ATTRS\n              COPY    REGEQU\n              END     DISNLIST\n./ ADD NAME=DISOPTS  0110-09016-09118-1122-00184-00202-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISOPTS                                              *\n*                                                                    *\n*  Function:                                                         *\n*                                                                    *\n*   Allow the user to choose                                         *\n*     .  the opcode table                                            *\n*     .  prefix for generated labels                                 *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISOPTS  CSECT\nDISOPTS  AMODE 31\nDISOPTS  RMODE ANY\n         USING DISOPTS,R11\n         USING DISCOMM,R12\n         USING ESD_DSECT,R6\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     MOD0000                           SKIP EYECATCHER\nMODID    DC    CL8'DISOPTS'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(R15)\n         ST    R15,8(R13)\n         LR    R13,R15\n         USING DXDOPTS,R13\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n         MVC   SPF_PREFIX,COMM_PREFIX\n         MVC   SPF_FUNCTION,COMM_OPCODE_TABLE_NAME+5\n         OC    COMM_OPCODE_TABLE_ADDR,COMM_OPCODE_TABLE_ADDR\n         BZ    MAIN0010\n         DELETE EPLOC=COMM_OPCODE_TABLE_NAME\n         XC    COMM_OPCODE_TABLE_ADDR,COMM_OPCODE_TABLE_ADDR\nMAIN0010 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_SPF_PANEL,PANEL_NAME2        SET PANEL NAME\n         TM    COMM_DDS,$DISPUNCH_DD             DISPUNCH ALLOCATED?\n         BO    MAIN0015                          YES\n         MVC   COMM_SPF_PANEL,PANEL_NAME1        SET PANEL NAME\nMAIN0015 DS    0H\n         L     R15,V_DISDISP\n         BALR  R14,R15                           DISPLAY ESD INFO\n         LR    R2,R15                            SAVE DISP RC\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R2\n         NI    DXD_FLAGS,255-$ERROR              RESET ERROR FLAG\n*---------------------------------------------------------------------*\n*        VERIFY PREFIX                                                *\n*---------------------------------------------------------------------*\n         OC    SPF_PREFIX,COMM_BLANKS            TRANSLATE\n         CLI   SPF_PREFIX,C'@'                   AT-SIGN?\n         BE    MAIN0020                          YES\n         CLI   SPF_PREFIX,C'#'                   POUND SIGN?\n         BE    MAIN0020                          YES\n         CLI   SPF_PREFIX,C'$'                   DOLLAR SIGN?\n         BE    MAIN0020                          YES\n         CLI   SPF_PREFIX,C'_'                   UNDERSCORE?\n         BE    MAIN0020                          YES\n         CLI   SPF_PREFIX,C'A'                   ALPHA?\n         BL    ERR0010                           NO\n         CLI   SPF_PREFIX,C'Z'                   ALPHA?\n         BH    ERR0010                           NO\n*---------------------------------------------------------------------*\n*        VERIFY OPCODE TABLE                                          *\n*---------------------------------------------------------------------*\nMAIN0020 DS    0H\n         CLI   SPF_FUNCTION,C'1'                 '1' OR MORE?\n         BL    ERR0020                           NO\n         CLI   SPF_FUNCTION,C'5'                 '5' OR LESS?\n         BH    ERR0020                           NO\n         TM    COMM_DDS,$DISPUNCH_DD             DISPUNCH ALLOCATED?\n         BO    MAIN0025                          YES\n         CLC   SPF_OUTPUT_DSN,COMM_BLANKS        OUTPUT DSN BLANK?\n         BNE   MAIN0025                          NO\n         MVI   COMM_MSG_ID,3\n         MVC   COMM_MSG_CSECT,MODID              SET CSECT NAME\n         L     R15,V_DISMSG\n         BALR  R14,R15                           BUILD MESSAGE(S)\n         MVC   SPF_MSG_1,COMM_MSG_1              COPY MESSAGE(S)\n         MVC   SPF_MSG_2,COMM_MSG_2\nMAIN0025 DS    0H\n         LTR   R2,R2                             DISP RC = 0?\n         BZ    MAIN0010                          YES\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0030 DS    0H\n         TM    DXD_FLAGS,$ERROR                  ERRORS PENDING?\n         BO    ERR0040                           YES\n         MVC   COMM_PREFIX,SPF_PREFIX            SET PREFIX\n         LA    R1,4                              MAX LENGTH\n         LA    R2,COMM_PREFIX+3                  END OF PREFIX\nMAIN0040 DS    0H\n         CLI   0(R2),C' '                        END OF PREFIX?\n         BNE   MAIN0050                          YES\n         BCTR  R2,0\n         BCT   R1,MAIN0040\nMAIN0050 DS    0H\n         STH   R1,COMM_PREFIX_LENGTH             SET PREFIX LENGTH\n         ITRACE ID=PREFIX,                                             +\n               DATA1=COMM_PREFIX,                                      +\n               RDATA2=R1\n         MVC   COMM_OPCODE_TABLE_NAME,=CL8'DISOP'\n         MVC   COMM_OPCODE_TABLE_NAME+5(1),SPF_FUNCTION\n         LOAD  EPLOC=COMM_OPCODE_TABLE_NAME\n         ST    R0,COMM_OPCODE_TABLE_ADDR         SET THE ADDRESS\n         ITRACE ID=OP_TABLE,                                           +\n               DATA1=COMM_OPCODE_TABLE_NAME,                           +\n               RDATA2=R0\n         B     EXIT0000\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nERR0010  DS    0H\n         OI    DXD_FLAGS,$ERROR                  SET ERROR FLAG\n         MVI   COMM_MSG_ID,1                     SET MESSAGE NBR\n         B     ERR0100\nERR0020  DS    0H\n         OI    DXD_FLAGS,$ERROR                  SET ERROR FLAG\n         MVI   COMM_MSG_ID,2                     SET MESSAGE NBR\n         B     ERR0100\nERR0040  DS    0H\n         MVI   COMM_MSG_ID,4                     SET MESSAGE NBR\nERR0100  DS    0H\n         MVC   COMM_MSG_CSECT,MODID              SET CSECT NAME\n         L     R15,V_DISMSG\n         BALR  R14,R15                           BUILD MESSAGE(S)\n         MVC   SPF_MSG_1,COMM_MSG_1              COPY MESSAGE(S)\n         MVC   SPF_MSG_2,COMM_MSG_2\n         MVC   SPF_MSG_3,COMM_MSG_3\n         MVC   SPF_MSG_4,COMM_MSG_4\n         MVC   SPF_MSG_5,COMM_MSG_5\n         TM    DXD_FLAGS,$ERROR                  ERROR FLAG ON?\n         BO    MAIN0010                          YES.. DISPLAY WITH MSG\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)                        RESTORE REGISTER 13    ASE01670\n         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680\n         LR    R15,R2                            SET RC\n         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680\n         BR    R14                               RETURN TO CALLER       ASE01700\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START     DC      Q(DXDOPTS)\n\nPANEL_NAME1   DC      CL8'DISOPTS1'\nPANEL_NAME2   DC      CL8'DISOPTS2'\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDOPTS       DSECT\n              DS      18F\n\nDXD_FLAGS     DS      X\n$ERROR        EQU     X'80'\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              DISCOMM TYPE=DSECT\n              DISSPFD TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              COPY    DISASMDA\n\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              COPY    REGEQU\n              END     DISOPTS\n./ ADD NAME=DISOP1   0116-07093-09014-1121-00269-00252-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISOP1                                               *\n*                                                                    *\n*  Define valid opcodes                                              *\n*         No B2                                                      *\n*         No floating point                                          *\n*         none of the new opcodes                                    *\n*                                                                    *\n*                                                                    *\n*  By default, X'B2' is not a valid opcode                           *\n*              floating point operations are not valid               *\n*              a lot of new instructions have been added since       *\n*                about when the z800 or z900 hardware came out.      *\n*                By default these new opcodes are not valid.         *\n*                                                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISOP1   CSECT\nDISOP1   AMODE  31\nDISOP1   RMODE  ANY\n         ORG    DISOP1+(256*4)\n* ------------------------------------------------------------------- *\n*        OPCODE TABLE                                                 *\n* ------------------------------------------------------------------- *\n         OPCODE 00,DC,0,2                 DUMMY ENTRY FOR DC'S\n         OPCODE 04,SPM,$OPCODE_RR2,2\n         OPCODE 05,BALR,$OPCODE_RR1,2,'PERFORM',                       +\n               FLAGS=$OPCODE_BRANCH\n         OPCODE 06,BCTR,$OPCODE_RR1,2,'LOOP',                          +\n               FLAGS=$OPCODE_BRANCH\n         OPCODE 07,BCR,$OPCODE_RR3,2,                                  +\n               FLAGS=$OPCODE_EXT+$OPCODE_BRANCH\n         OPCODE 0A,SVC,$OPCODE_RR2,2,'SVC DESCRIPTION',                +\n               FLAGS=$OPCODE_SVC+$OPCODE_BRANCH\n         OPCODE 0B,BSM,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_BRANCH\n         OPCODE 0C,BASSM,$OPCODE_RR1,2,                                +\n               FLAGS=$OPCODE_BRANCH\n         OPCODE 0D,BASR,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_BRANCH\n         OPCODE 0E,MVCL,$OPCODE_RR1,2,                                 +N\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_1EVEN+$OPCODE_2EVEN\n         OPCODE 0F,CLCL,$OPCODE_RR1,2,                                 +N\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_1EVEN+$OPCODE_2EVEN\n         OPCODE 10,LPR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 11,LNR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 12,LTR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 13,LCR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 14,NR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCL\n         OPCODE 15,CLR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCC\n         OPCODE 16,OR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCL\n         OPCODE 17,XR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCL\n         OPCODE 18,LR,$OPCODE_RR1,2\n         OPCODE 19,CR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCC\n         OPCODE 1A,AR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCA\n         OPCODE 1B,SR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCA\n         OPCODE 1C,MR,$OPCODE_RR1,2,                                   +\n               REGS=$OPCODE_1EVEN\n         OPCODE 1D,DR,$OPCODE_RR1,2,                                   +\n               REGS=$OPCODE_1EVEN\n         OPCODE 1E,ALR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 1F,SLR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 40,STH,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 41,LA,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 42,STC,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 43,IC,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 44,EX,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 45,BAL,$OPCODE_RX,4,'PERFORM',                         +\n               FLAGS=$OPCODE_REF+$OPCODE_BRANCH\n         OPCODE 46,BCT,$OPCODE_RX,4,'LOOP',                            +\n               FLAGS=$OPCODE_REF+$OPCODE_BRANCH\n         OPCODE 47,BC,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_EXT+$OPCODE_REF+$OPCODE_BRANCH\n         OPCODE 48,LH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 49,CH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE 4A,AH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 4B,SH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 4C,MH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 4D,BAS,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_BRANCH\n         OPCODE 4E,CVD,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 4F,CVB,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 50,ST,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 54,N,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 55,CL,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE 56,O,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 57,X,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 58,L,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF\n         OPCODE 59,C,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE 5A,A,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 5B,S,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 5C,M,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF\n         OPCODE 5D,D,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_1EVEN\n         OPCODE 5E,AL,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 5F,SL,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 80,SSM,$OPCODE_S,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 82,LPSW,$OPCODE_S,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 83,DIAG,$OPCODE_S,4\n         OPCODE 86,BXH,$OPCODE_RS2,4,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE 87,BXLE,$OPCODE_RS2,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE 88,SRL,$OPCODE_RS1,4\n         OPCODE 89,SLL,$OPCODE_RS1,4\n         OPCODE 8A,SRA,$OPCODE_RS1,4,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 8B,SLA,$OPCODE_RS1,4,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 8C,SRDL,$OPCODE_RS1,4,                                 +\n               REGS=$OPCODE_1EVEN\n         OPCODE 8D,SLDL,$OPCODE_RS1,4,                                 +\n               REGS=$OPCODE_1EVEN\n         OPCODE 8E,SRDA,$OPCODE_RS1,4,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_1EVEN\n         OPCODE 8F,SLDA,$OPCODE_RS1,4,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_1EVEN\n         OPCODE 90,STM,$OPCODE_RS2,4,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE 91,TM,$OPCODE_SI,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 92,MVI,$OPCODE_SI,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 93,TS,$OPCODE_S,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 94,NI,$OPCODE_SI,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 95,CLI,$OPCODE_SI,4,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE 96,OI,$OPCODE_SI,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 97,XI,$OPCODE_SI,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 98,LM,$OPCODE_RS2,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 99,TRACE,$OPCODE_RS2,4,                                +\n               FLAGS=$OPCODE_REF\n         OPCODE AC,STNSM,$OPCODE_SI,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE AD,STOSM,$OPCODE_SI,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE AE,SIGP,$OPCODE_RS2,4,                                 +\n               FLAGS=$OPCODE_CCA\n         OPCODE AF,MC,$OPCODE_SI,4\n         OPCODE B1,LRA,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n*        OPCODE B2,DUMMY,$OPB2,4\n         OPCODE B6,STCTL,$OPCODE_RS2,4,                                +\n               FLAGS=$OPCODE_REF\n         OPCODE B7,LCTL,$OPCODE_RS2,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE BA,CS,$OPCODE_RS2,4,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE BB,CDS,$OPCODE_RS2,4,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC,                          +\n               REGS=$OPCODE_1EVEN\n         OPCODE BD,CLM,$OPCODE_RS3,4,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE BE,STCM,$OPCODE_RS3,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE BF,ICM,$OPCODE_RS3,4,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE D1,MVN,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE D2,MVC,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE D3,MVZ,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE D4,NC,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE D5,CLC,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE D6,OC,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE D7,XC,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE D9,MVCK,$OPCODE_SS3,6,                                 +\n               FLAGS=$OPCODE_CCA\n         OPCODE DA,MVCP,$OPCODE_SS3,6\n         OPCODE DB,MVCS,$OPCODE_SS3,6\n         OPCODE DC,TR,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE DD,TRT,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE DE,ED,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE DF,EDMK,$OPCODE_SS1,6,                                 +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE E8,MVCIN,$OPCODE_SS1,6,                                +\n               FLAGS=$OPCODE_REF+$OPCODE_REF\n         OPCODE F0,SRP,$OPCODE_SS4,6,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE F1,MVO,$OPCODE_SS2,6,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE F2,PACK,$OPCODE_SS2,6,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE F3,UNPK,$OPCODE_SS2,6,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE F8,ZAP,$OPCODE_SS2,6,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE F9,CP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE FA,AP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE FB,SP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE FC,MP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE FD,DP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        INDEX TO OPCODE TABLE                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ORG    DISOP1+0\nOPINDEX  DS     0A\n         OPCODE TYPE=INDEX\n         COPY   DISASMDA\n\n         IFGACB AM=VSAM\nACB_L    EQU    *-IFGACB\n\n         END    DISOP1\n./ ADD NAME=DISOP2   0107-08231-09014-1121-00407-00413-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISOP2                                               *\n*                                                                    *\n*  Define valid opcodes                                              *\n*         No B2                                                      *\n*         Does include floating point                                *\n*                                                                    *\n*                                                                    *\n*  By default, X'B2' is not a valid opcode                           *\n*              floating point operations are not valid               *\n*              a lot of new instructions have been added since       *\n*                about when the z800 or z900 hardware came out.      *\n*                By default these new opcodes are not valid.         *\n*                                                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISOP2   CSECT\nDISOP2   AMODE  31\nDISOP2   RMODE  ANY\n         ORG    DISOP2+(256*4)\n* ------------------------------------------------------------------- *\n*        OPCODE TABLE                                                 *\n* ------------------------------------------------------------------- *\n         OPCODE 00,DC,0,2                 DUMMY ENTRY FOR DC'S\n         OPCODE 04,SPM,$OPCODE_RR2,2\n         OPCODE 05,BALR,$OPCODE_RR1,2,'PERFORM'\n         OPCODE 06,BCTR,$OPCODE_RR1,2,'LOOP'\n         OPCODE 07,BCR,$OPCODE_RR3,2,                                  +\n               FLAGS=$OPCODE_EXT\n         OPCODE 0A,SVC,$OPCODE_RR2,2,'SVC DESCRIPTION',                +\n               FLAGS=$OPCODE_SVC\n         OPCODE 0B,BSM,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_BRANCH\n         OPCODE 0C,BASSM,$OPCODE_RR1,2,                                +\n               FLAGS=$OPCODE_BRANCH\n         OPCODE 0D,BASR,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_BRANCH\n         OPCODE 0E,MVCL,$OPCODE_RR1,2,                                 +N\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_1EVEN+$OPCODE_2EVEN\n         OPCODE 0F,CLCL,$OPCODE_RR1,2,                                 +N\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_1EVEN+$OPCODE_2EVEN\n         OPCODE 10,LPR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 11,LNR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 12,LTR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 13,LCR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 14,NR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCL\n         OPCODE 15,CLR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCC\n         OPCODE 16,OR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCL\n         OPCODE 17,XR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCL\n         OPCODE 18,LR,$OPCODE_RR1,2\n         OPCODE 19,CR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCC\n         OPCODE 1A,AR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCA\n         OPCODE 1B,SR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCA\n         OPCODE 1C,MR,$OPCODE_RR1,2,                                   +\n               REGS=$OPCODE_1EVEN\n         OPCODE 1D,DR,$OPCODE_RR1,2,                                   +\n               REGS=$OPCODE_1EVEN\n         OPCODE 1E,ALR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 1F,SLR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 20,LPDR,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 21,LNDR,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 22,LTDR,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 23,LCDR,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 24,HDR,$OPCODE_RR1,2,                                  +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 25,LRDR,$OPCODE_RR1,2,                                 +\n               REGS=$OPCODE_10246+$OPCODE_204\n         OPCODE 26,MXR,$OPCODE_RR1,2,                                  +\n               REGS=$OPCODE_104+$OPCODE_204\n         OPCODE 27,MXDR,$OPCODE_RR1,2,                                 +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 28,LDR,$OPCODE_RR1,2,                                  +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 29,CDR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCC,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 2A,ADR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 2B,SDR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 2C,MDR,$OPCODE_RR1,2,                                  +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 2D,DDR,$OPCODE_RR1,2,                                  +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 2E,AWR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 2F,SWR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 30,LPER,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 31,LNER,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 32,LTER,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 33,LCER,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 34,HER,$OPCODE_RR1,2,                                  +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 35,LRER,$OPCODE_RR1,2,                                 +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 36,AXR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_104+$OPCODE_204\n         OPCODE 37,SXR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_104+$OPCODE_204\n         OPCODE 38,LER,$OPCODE_RR1,2,                                  +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 39,CER,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 3A,AER,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 3B,SER,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 3C,MER,$OPCODE_RR1,2,                                  +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 3D,DER,$OPCODE_RR1,2,                                  +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 3E,AUR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 3F,SUR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 40,STH,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 41,LA,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 42,STC,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 43,IC,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 44,EX,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 45,BAL,$OPCODE_RX,4,'PERFORM',                         +\n               FLAGS=$OPCODE_REF+$OPCODE_BRANCH\n         OPCODE 46,BCT,$OPCODE_RX,4,'LOOP',                            +\n               FLAGS=$OPCODE_REF+$OPCODE_BRANCH\n         OPCODE 47,BC,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_EXT+$OPCODE_REF+$OPCODE_BRANCH\n         OPCODE 48,LH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 49,CH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE 4A,AH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 4B,SH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 4C,MH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 4D,BAS,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_BRANCH\n         OPCODE 4E,CVD,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 4F,CVB,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 50,ST,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 54,N,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 55,CL,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE 56,O,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 57,X,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 58,L,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF\n         OPCODE 59,C,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE 5A,A,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 5B,S,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 5C,M,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF\n         OPCODE 5D,D,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_1EVEN\n         OPCODE 5E,AL,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 5F,SL,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 60,STD,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_10246\n         OPCODE 67,MXD,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_104\n         OPCODE 68,LD,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_10246\n         OPCODE 69,CD,$OPCODE_RX,4,                                    +T, +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC,                          +\n               REGS=$OPCODE_10246\n         OPCODE 6A,AD,$OPCODE_RX,4,                                    +T, +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +\n               REGS=$OPCODE_10246\n         OPCODE 6B,SD,$OPCODE_RX,4,                                    +T, +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +\n               REGS=$OPCODE_10246\n         OPCODE 6C,MD,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_10246\n         OPCODE 6D,DD,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_10246\n         OPCODE 6E,AW,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_10246\n         OPCODE 6F,SW,$OPCODE_RX,4,                                    +T, +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +\n               REGS=$OPCODE_10246\n         OPCODE 70,STE,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_10246\n         OPCODE 78,LE,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_10246\n         OPCODE 79,CE,$OPCODE_RX,4,                                    +T, +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +\n               REGS=$OPCODE_10246\n         OPCODE 7A,AE,$OPCODE_RX,4,                                    +T, +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +\n               REGS=$OPCODE_10246\n         OPCODE 7B,SE,$OPCODE_RX,4,                                    +T, +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +\n               REGS=$OPCODE_10246\n         OPCODE 7C,ME,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_10246\n         OPCODE 7D,DE,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_10246\n         OPCODE 7E,AU,$OPCODE_RX,4,                                    +T, +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +\n               REGS=$OPCODE_10246\n         OPCODE 7F,SU,$OPCODE_RX,4,                                    +T, +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +\n               REGS=$OPCODE_10246\n         OPCODE 80,SSM,$OPCODE_S,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 82,LPSW,$OPCODE_S,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 83,DIAG,$OPCODE_S,4\n         OPCODE 86,BXH,$OPCODE_RS2,4,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE 87,BXLE,$OPCODE_RS2,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE 88,SRL,$OPCODE_RS1,4\n         OPCODE 89,SLL,$OPCODE_RS1,4\n         OPCODE 8A,SRA,$OPCODE_RS1,4,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 8B,SLA,$OPCODE_RS1,4,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 8C,SRDL,$OPCODE_RS1,4,                                 +\n               REGS=$OPCODE_1EVEN\n         OPCODE 8D,SLDL,$OPCODE_RS1,4,                                 +\n               REGS=$OPCODE_1EVEN\n         OPCODE 8E,SRDA,$OPCODE_RS1,4,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_1EVEN\n         OPCODE 8F,SLDA,$OPCODE_RS1,4,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_1EVEN\n         OPCODE 90,STM,$OPCODE_RS2,4,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE 91,TM,$OPCODE_SI,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 92,MVI,$OPCODE_SI,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 93,TS,$OPCODE_S,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 94,NI,$OPCODE_SI,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 95,CLI,$OPCODE_SI,4,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE 96,OI,$OPCODE_SI,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 97,XI,$OPCODE_SI,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 98,LM,$OPCODE_RS2,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 99,TRACE,$OPCODE_RS2,4,                                +\n               FLAGS=$OPCODE_REF\n         OPCODE AC,STNSM,$OPCODE_SI,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE AD,STOSM,$OPCODE_SI,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE AE,SIGP,$OPCODE_RS2,4,                                 +\n               FLAGS=$OPCODE_CCA\n         OPCODE AF,MC,$OPCODE_SI,4\n         OPCODE B1,LRA,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n*        OPCODE B2,DUMMY,$OPB2,4\n         OPCODE B6,STCTL,$OPCODE_RS2,4,                                +\n               FLAGS=$OPCODE_REF\n         OPCODE B7,LCTL,$OPCODE_RS2,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE BA,CS,$OPCODE_RS2,4,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE BB,CDS,$OPCODE_RS2,4,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC,                          +\n               REGS=$OPCODE_1EVEN\n         OPCODE BD,CLM,$OPCODE_RS3,4,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE BE,STCM,$OPCODE_RS3,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE BF,ICM,$OPCODE_RS3,4,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE D1,MVN,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE D2,MVC,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE D3,MVZ,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE D4,NC,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE D5,CLC,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE D6,OC,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE D7,XC,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE D9,MVCK,$OPCODE_SS3,6,                                 +\n               FLAGS=$OPCODE_CCA\n         OPCODE DA,MVCP,$OPCODE_SS3,6\n         OPCODE DB,MVCS,$OPCODE_SS3,6\n         OPCODE DC,TR,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE DD,TRT,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE DE,ED,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE DF,EDMK,$OPCODE_SS1,6,                                 +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE E8,MVCIN,$OPCODE_SS1,6,                                +\n               FLAGS=$OPCODE_REF+$OPCODE_REF\n         OPCODE F0,SRP,$OPCODE_SS4,6,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE F1,MVO,$OPCODE_SS2,6,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE F2,PACK,$OPCODE_SS2,6,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE F3,UNPK,$OPCODE_SS2,6,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE F8,ZAP,$OPCODE_SS2,6,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE F9,CP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE FA,AP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE FB,SP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE FC,MP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE FD,DP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        INDEX TO OPCODE TABLE                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ORG    DISOP2+0\nOPINDEX  DS     0A\n         OPCODE TYPE=INDEX\n         COPY   DISASMDA\n\n         IFGACB AM=VSAM\nACB_L    EQU    *-IFGACB\n\n         END    DISOP2\n./ ADD NAME=DISOP3   0105-08231-09014-1122-00270-00261-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISOP3                                               *\n*                                                                    *\n*  Define valid opcodes                                              *\n*         No B2                                                      *\n*         No floating point                                          *\n*         does include some (I don't want to say all) of the new     *\n*              opcodes.. new opcodes are added all the time.         *\n*                                                                    *\n*                                                                    *\n*  By default, X'B2' is not a valid opcode                           *\n*              floating point operations are not valid               *\n*              a lot of new instructions have been added since       *\n*                about when the z800 or z900 hardware came out.      *\n*                By default these new opcodes are not valid.         *\n*                                                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISOP3   CSECT\nDISOP3   AMODE  31\nDISOP3   RMODE  ANY\n         ORG    DISOP3+(256*4)\n* ------------------------------------------------------------------- *\n*        OPCODE TABLE                                                 *\n* ------------------------------------------------------------------- *\n         OPCODE 00,DC,0,2                 DUMMY ENTRY FOR DC'S\n         OPCODE 04,SPM,$OPCODE_RR2,2\n         OPCODE 05,BALR,$OPCODE_RR1,2,'PERFORM',                       +\n               FLAGS=$OPCODE_BRANCH\n         OPCODE 06,BCTR,$OPCODE_RR1,2,'LOOP',                          +\n               FLAGS=$OPCODE_BRANCH\n         OPCODE 07,BCR,$OPCODE_RR3,2,                                  +\n               FLAGS=$OPCODE_EXT+$OPCODE_BRANCH\n         OPCODE 0A,SVC,$OPCODE_RR2,2,'SVC DESCRIPTION',                +\n               FLAGS=$OPCODE_SVC\n         OPCODE 0B,BSM,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_BRANCH\n         OPCODE 0C,BASSM,$OPCODE_RR1,2,                                +\n               FLAGS=$OPCODE_BRANCH\n         OPCODE 0D,BASR,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_BRANCH\n         OPCODE 0E,MVCL,$OPCODE_RR1,2,                                 +N\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_1EVEN+$OPCODE_2EVEN\n         OPCODE 0F,CLCL,$OPCODE_RR1,2,                                 +N\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_1EVEN+$OPCODE_2EVEN\n         OPCODE 10,LPR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 11,LNR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 12,LTR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 13,LCR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 14,NR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCL\n         OPCODE 15,CLR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCC\n         OPCODE 16,OR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCL\n         OPCODE 17,XR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCL\n         OPCODE 18,LR,$OPCODE_RR1,2\n         OPCODE 19,CR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCC\n         OPCODE 1A,AR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCA\n         OPCODE 1B,SR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCA\n         OPCODE 1C,MR,$OPCODE_RR1,2,                                   +\n               REGS=$OPCODE_1EVEN\n         OPCODE 1D,DR,$OPCODE_RR1,2,                                   +\n               REGS=$OPCODE_1EVEN\n         OPCODE 1E,ALR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 1F,SLR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 40,STH,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 41,LA,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 42,STC,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 43,IC,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 44,EX,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 45,BAL,$OPCODE_RX,4,'PERFORM',                         +\n               FLAGS=$OPCODE_REF+$OPCODE_BRANCH\n         OPCODE 46,BCT,$OPCODE_RX,4,'LOOP',                            +\n               FLAGS=$OPCODE_REF+$OPCODE_BRANCH\n         OPCODE 47,BC,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_EXT+$OPCODE_REF+$OPCODE_BRANCH\n         OPCODE 48,LH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 49,CH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE 4A,AH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 4B,SH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 4C,MH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 4D,BAS,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_BRANCH\n         OPCODE 4E,CVD,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 4F,CVB,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 50,ST,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 54,N,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 55,CL,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE 56,O,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 57,X,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 58,L,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF\n         OPCODE 59,C,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE 5A,A,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 5B,S,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 5C,M,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF\n         OPCODE 5D,D,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_1EVEN\n         OPCODE 5E,AL,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 5F,SL,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 80,SSM,$OPCODE_S,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 82,LPSW,$OPCODE_S,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 83,DIAG,$OPCODE_S,4\n         OPCODE 86,BXH,$OPCODE_RS2,4,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE 87,BXLE,$OPCODE_RS2,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE 88,SRL,$OPCODE_RS1,4\n         OPCODE 89,SLL,$OPCODE_RS1,4\n         OPCODE 8A,SRA,$OPCODE_RS1,4,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 8B,SLA,$OPCODE_RS1,4,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 8C,SRDL,$OPCODE_RS1,4,                                 +\n               REGS=$OPCODE_1EVEN\n         OPCODE 8D,SLDL,$OPCODE_RS1,4,                                 +\n               REGS=$OPCODE_1EVEN\n         OPCODE 8E,SRDA,$OPCODE_RS1,4,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_1EVEN\n         OPCODE 8F,SLDA,$OPCODE_RS1,4,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_1EVEN\n         OPCODE 90,STM,$OPCODE_RS2,4,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE 91,TM,$OPCODE_SI,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 92,MVI,$OPCODE_SI,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 93,TS,$OPCODE_S,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 94,NI,$OPCODE_SI,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 95,CLI,$OPCODE_SI,4,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE 96,OI,$OPCODE_SI,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 97,XI,$OPCODE_SI,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 98,LM,$OPCODE_RS2,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 99,TRACE,$OPCODE_RS2,4,                                +\n               FLAGS=$OPCODE_REF\n         OPCODE AC,STNSM,$OPCODE_SI,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE AD,STOSM,$OPCODE_SI,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE AE,SIGP,$OPCODE_RS2,4,                                 +\n               FLAGS=$OPCODE_CCA\n         OPCODE AF,MC,$OPCODE_SI,4\n         OPCODE B1,LRA,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n*        OPCODE B2,DUMMY,$OPB2,4\n         OPCODE B6,STCTL,$OPCODE_RS2,4,                                +\n               FLAGS=$OPCODE_REF\n         OPCODE B7,LCTL,$OPCODE_RS2,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE BA,CS,$OPCODE_RS2,4,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE BB,CDS,$OPCODE_RS2,4,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC,                          +\n               REGS=$OPCODE_1EVEN\n         OPCODE BD,CLM,$OPCODE_RS3,4,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE BE,STCM,$OPCODE_RS3,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE BF,ICM,$OPCODE_RS3,4,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE D1,MVN,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE D2,MVC,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE D3,MVZ,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE D4,NC,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE D5,CLC,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE D6,OC,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE D7,XC,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE D9,MVCK,$OPCODE_SS3,6,                                 +\n               FLAGS=$OPCODE_CCA\n         OPCODE DA,MVCP,$OPCODE_SS3,6\n         OPCODE DB,MVCS,$OPCODE_SS3,6\n         OPCODE DC,TR,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE DD,TRT,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE DE,ED,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE DF,EDMK,$OPCODE_SS1,6,                                 +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE E8,MVCIN,$OPCODE_SS1,6,                                +\n               FLAGS=$OPCODE_REF+$OPCODE_REF\n         OPCODE F0,SRP,$OPCODE_SS4,6,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE F1,MVO,$OPCODE_SS2,6,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE F2,PACK,$OPCODE_SS2,6,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE F3,UNPK,$OPCODE_SS2,6,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE F8,ZAP,$OPCODE_SS2,6,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE F9,CP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE FA,AP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE FB,SP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE FC,MP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE FD,DP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        INDEX TO OPCODE TABLE                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ORG    DISOP3+0\nOPINDEX  DS     0A\n         OPCODE TYPE=INDEX\n         COPY   DISASMDA\n\n         IFGACB AM=VSAM\nACB_L    EQU    *-IFGACB\n\n         END    DISOP3\n./ ADD NAME=DISOP4   0104-08231-09014-1122-00409-00412-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISOP2                                               *\n*                                                                    *\n*  Define valid opcodes                                              *\n*         Does include floating point                                *\n*         Does include new 'z' opcodes (at least some of them)       *\n*                                                                    *\n*                                                                    *\n*  By default, X'B2' is not a valid opcode                           *\n*              floating point operations are not valid               *\n*              a lot of new instructions have been added since       *\n*                about when the z800 or z900 hardware came out.      *\n*                By default these new opcodes are not valid.         *\n*                                                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISOP2   CSECT\nDISOP2   AMODE  31\nDISOP2   RMODE  ANY\n         ORG    DISOP2+(256*4)\n* ------------------------------------------------------------------- *\n*        OPCODE TABLE                                                 *\n* ------------------------------------------------------------------- *\n         OPCODE 00,DC,0,2                 DUMMY ENTRY FOR DC'S\n         OPCODE 04,SPM,$OPCODE_RR2,2\n         OPCODE 05,BALR,$OPCODE_RR1,2,'PERFORM',                       +\n               FLAGS=$OPCODE_BRANCH\n         OPCODE 06,BCTR,$OPCODE_RR1,2,'LOOP',                          +\n               FLAGS=$OPCODE_BRANCH\n         OPCODE 07,BCR,$OPCODE_RR3,2,                                  +\n               FLAGS=$OPCODE_EXT+$OPCODE_BRANCH\n         OPCODE 0A,SVC,$OPCODE_RR2,2,'SVC DESCRIPTION',                +\n               FLAGS=$OPCODE_SVC+$OPCODE_BRANCH\n         OPCODE 0B,BSM,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_BRANCH\n         OPCODE 0C,BASSM,$OPCODE_RR1,2,                                +\n               FLAGS=$OPCODE_BRANCH\n         OPCODE 0D,BASR,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_BRANCH\n         OPCODE 0E,MVCL,$OPCODE_RR1,2,                                 +N\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_1EVEN+$OPCODE_2EVEN\n         OPCODE 0F,CLCL,$OPCODE_RR1,2,                                 +N\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_1EVEN+$OPCODE_2EVEN\n         OPCODE 10,LPR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 11,LNR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 12,LTR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 13,LCR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 14,NR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCL\n         OPCODE 15,CLR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCC\n         OPCODE 16,OR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCL\n         OPCODE 17,XR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCL\n         OPCODE 18,LR,$OPCODE_RR1,2\n         OPCODE 19,CR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCC\n         OPCODE 1A,AR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCA\n         OPCODE 1B,SR,$OPCODE_RR1,2,                                   +\n               FLAGS=$OPCODE_CCA\n         OPCODE 1C,MR,$OPCODE_RR1,2,                                   +\n               REGS=$OPCODE_1EVEN\n         OPCODE 1D,DR,$OPCODE_RR1,2,                                   +\n               REGS=$OPCODE_1EVEN\n         OPCODE 1E,ALR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 1F,SLR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 20,LPDR,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 21,LNDR,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 22,LTDR,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 23,LCDR,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 24,HDR,$OPCODE_RR1,2,                                  +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 25,LRDR,$OPCODE_RR1,2,                                 +\n               REGS=$OPCODE_10246+$OPCODE_204\n         OPCODE 26,MXR,$OPCODE_RR1,2,                                  +\n               REGS=$OPCODE_104+$OPCODE_204\n         OPCODE 27,MXDR,$OPCODE_RR1,2,                                 +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 28,LDR,$OPCODE_RR1,2,                                  +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 29,CDR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCC,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 2A,ADR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 2B,SDR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 2C,MDR,$OPCODE_RR1,2,                                  +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 2D,DDR,$OPCODE_RR1,2,                                  +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 2E,AWR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 2F,SWR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 30,LPER,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 31,LNER,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 32,LTER,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 33,LCER,$OPCODE_RR1,2,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 34,HER,$OPCODE_RR1,2,                                  +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 35,LRER,$OPCODE_RR1,2,                                 +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 36,AXR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_104+$OPCODE_204\n         OPCODE 37,SXR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_104+$OPCODE_204\n         OPCODE 38,LER,$OPCODE_RR1,2,                                  +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 39,CER,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 3A,AER,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 3B,SER,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 3C,MER,$OPCODE_RR1,2,                                  +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 3D,DER,$OPCODE_RR1,2,                                  +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 3E,AUR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 3F,SUR,$OPCODE_RR1,2,                                  +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_10246+$OPCODE_20246\n         OPCODE 40,STH,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 41,LA,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 42,STC,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 43,IC,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 44,EX,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 45,BAL,$OPCODE_RX,4,'PERFORM',                         +\n               FLAGS=$OPCODE_REF\n         OPCODE 46,BCT,$OPCODE_RX,4,'LOOP',                            +\n               FLAGS=$OPCODE_REF+$OPCODE_BRANCH\n         OPCODE 47,BC,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_EXT+$OPCODE_REF+$OPCODE_BRANCH\n         OPCODE 48,LH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 49,CH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE 4A,AH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 4B,SH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 4C,MH,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 4D,BAS,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_BRANCH\n         OPCODE 4E,CVD,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 4F,CVB,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 50,ST,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 54,N,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 55,CL,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE 56,O,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 57,X,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 58,L,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF\n         OPCODE 59,C,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE 5A,A,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 5B,S,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 5C,M,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF\n         OPCODE 5D,D,$OPCODE_RX,4,                                     +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_1EVEN\n         OPCODE 5E,AL,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 5F,SL,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 60,STD,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_10246\n         OPCODE 67,MXD,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_104\n         OPCODE 68,LD,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_10246\n         OPCODE 69,CD,$OPCODE_RX,4,                                    +T, +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC,                          +\n               REGS=$OPCODE_10246\n         OPCODE 6A,AD,$OPCODE_RX,4,                                    +T, +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +\n               REGS=$OPCODE_10246\n         OPCODE 6B,SD,$OPCODE_RX,4,                                    +T, +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +\n               REGS=$OPCODE_10246\n         OPCODE 6C,MD,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_10246\n         OPCODE 6D,DD,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_10246\n         OPCODE 6E,AW,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_10246\n         OPCODE 6F,SW,$OPCODE_RX,4,                                    +T, +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +\n               REGS=$OPCODE_10246\n         OPCODE 70,STE,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_10246\n         OPCODE 78,LE,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_10246\n         OPCODE 79,CE,$OPCODE_RX,4,                                    +T, +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +\n               REGS=$OPCODE_10246\n         OPCODE 7A,AE,$OPCODE_RX,4,                                    +T, +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +\n               REGS=$OPCODE_10246\n         OPCODE 7B,SE,$OPCODE_RX,4,                                    +T, +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +\n               REGS=$OPCODE_10246\n         OPCODE 7C,ME,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_10246\n         OPCODE 7D,DE,$OPCODE_RX,4,                                    +\n               FLAGS=$OPCODE_REF,                                      +\n               REGS=$OPCODE_10246\n         OPCODE 7E,AU,$OPCODE_RX,4,                                    +T, +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +\n               REGS=$OPCODE_10246\n         OPCODE 7F,SU,$OPCODE_RX,4,                                    +T, +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA,                          +\n               REGS=$OPCODE_10246\n         OPCODE 80,SSM,$OPCODE_S,4,                                    +\n               FLAGS=$OPCODE_REF\n         OPCODE 82,LPSW,$OPCODE_S,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 83,DIAG,$OPCODE_S,4\n         OPCODE 86,BXH,$OPCODE_RS2,4,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE 87,BXLE,$OPCODE_RS2,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE 88,SRL,$OPCODE_RS1,4\n         OPCODE 89,SLL,$OPCODE_RS1,4\n         OPCODE 8A,SRA,$OPCODE_RS1,4,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 8B,SLA,$OPCODE_RS1,4,                                  +\n               FLAGS=$OPCODE_CCA\n         OPCODE 8C,SRDL,$OPCODE_RS1,4,                                 +\n               REGS=$OPCODE_1EVEN\n         OPCODE 8D,SLDL,$OPCODE_RS1,4,                                 +\n               REGS=$OPCODE_1EVEN\n         OPCODE 8E,SRDA,$OPCODE_RS1,4,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_1EVEN\n         OPCODE 8F,SLDA,$OPCODE_RS1,4,                                 +\n               FLAGS=$OPCODE_CCA,                                      +\n               REGS=$OPCODE_1EVEN\n         OPCODE 90,STM,$OPCODE_RS2,4,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE 91,TM,$OPCODE_SI,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 92,MVI,$OPCODE_SI,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 93,TS,$OPCODE_S,4,                                     +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE 94,NI,$OPCODE_SI,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 95,CLI,$OPCODE_SI,4,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE 96,OI,$OPCODE_SI,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 97,XI,$OPCODE_SI,4,                                    +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE 98,LM,$OPCODE_RS2,4,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE 99,TRACE,$OPCODE_RS2,4,                                +\n               FLAGS=$OPCODE_REF\n         OPCODE AC,STNSM,$OPCODE_SI,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE AD,STOSM,$OPCODE_SI,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE AE,SIGP,$OPCODE_RS2,4,                                 +\n               FLAGS=$OPCODE_CCA\n         OPCODE AF,MC,$OPCODE_SI,4\n         OPCODE B1,LRA,$OPCODE_RX,4,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n*        OPCODE B2,DUMMY,$OPB2,4\n         OPCODE B6,STCTL,$OPCODE_RS2,4,                                +\n               FLAGS=$OPCODE_REF\n         OPCODE B7,LCTL,$OPCODE_RS2,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE BA,CS,$OPCODE_RS2,4,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE BB,CDS,$OPCODE_RS2,4,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC,                          +\n               REGS=$OPCODE_1EVEN\n         OPCODE BD,CLM,$OPCODE_RS3,4,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE BE,STCM,$OPCODE_RS3,4,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE BF,ICM,$OPCODE_RS3,4,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE D1,MVN,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE D2,MVC,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE D3,MVZ,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE D4,NC,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE D5,CLC,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE D6,OC,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE D7,XC,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCL\n         OPCODE D9,MVCK,$OPCODE_SS3,6,                                 +\n               FLAGS=$OPCODE_CCA\n         OPCODE DA,MVCP,$OPCODE_SS3,6\n         OPCODE DB,MVCS,$OPCODE_SS3,6\n         OPCODE DC,TR,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE DD,TRT,$OPCODE_SS1,6,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE DE,ED,$OPCODE_SS1,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE DF,EDMK,$OPCODE_SS1,6,                                 +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE E8,MVCIN,$OPCODE_SS1,6,                                +\n               FLAGS=$OPCODE_REF+$OPCODE_REF\n         OPCODE F0,SRP,$OPCODE_SS4,6,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE F1,MVO,$OPCODE_SS2,6,                                  +\n               FLAGS=$OPCODE_REF\n         OPCODE F2,PACK,$OPCODE_SS2,6,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE F3,UNPK,$OPCODE_SS2,6,                                 +\n               FLAGS=$OPCODE_REF\n         OPCODE F8,ZAP,$OPCODE_SS2,6,                                  +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE F9,CP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCC\n         OPCODE FA,AP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE FB,SP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF+$OPCODE_CCA\n         OPCODE FC,MP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF\n         OPCODE FD,DP,$OPCODE_SS2,6,                                   +\n               FLAGS=$OPCODE_REF\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        INDEX TO OPCODE TABLE                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ORG    DISOP2+0\nOPINDEX  DS     0A\n         OPCODE TYPE=INDEX\n         COPY   DISASMDA\n\n         IFGACB AM=VSAM\nACB_L    EQU    *-IFGACB\n\n         END    DISOP2\n./ ADD NAME=DISPARM  0101-09119-09198-0844-00917-00917-00000-SOURCE\n         MACRO\n         REG    &REG,&VALUE\n         DC     CL3'&REG'                      REGISTER NAME\n         DC     AL1(&VALUE)                    VALUE IN INSTRUCTIONS\n         MEND\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISPARM                                              *\n*                                                                    *\n*  Function:                                                         *\n*   Read the parameter statements.  All parameter statements         *\n*   including comment statements are copied to DISPRINT.  See the    *\n*   DISASM documentation for a list of the parameter statements      *\n*   and their syntax.                                                *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISPARM  CSECT\nDISPARM  AMODE 31\nDISPARM  RMODE ANY\n         USING DISPARM,R11,R10\n         USING DISCOMM,R12\n         USING REGISTER_DSECT,R4              DEFINE BASE\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     PARM0000                       SKIP EYECATCHER\nMODID    DC    CL8'DISPARM'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nPARM0000 DS    0H\n         LA    R10,2048(,R11)                 SET BASE 2..\n         LA    R10,2048(,R10)                 .. 4K FROM 1ST\n         L     R15,COMM_DXD_ADDRESS\n         A     R15,DXD_START\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDPARM,R13\n         ITRACE ID=ENTRY\n         USING DCBE,DISIN_DCBE\n         LA    R1,EXIT0000\n         ST    R1,DCBEEODA                    SET EOD ADDRESS\n         MVC   COMM_SUBHEAD,SUBHEAD\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT\n         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01\n         BAL   R9,DEBUG000\n         ITRACE ID=OPEN\n         OPEN  (DISIN_DCB,INPUT),                                      +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n         MVC   DXD_CTL_1,COMM_BLANKS\n         MVC   DXD_CTL_2,COMM_BLANKS\n         MVC   DXD_CTL_3,COMM_BLANKS\n         MVC   DXD_CTL_4,COMM_BLANKS\n         MVC   DXD_CTL_5,COMM_BLANKS\n         MVC   DXD_CTL_6,COMM_BLANKS\nPARM0010 DS    0H\n         GET   DISIN_DCB,COMM_CONTROL_STMT    READ A CONTROL STATEMENT\n         MVC   PRINT_DATA(L'COMM_CONTROL_STMT),COMM_CONTROL_STMT\n         BAL   R9,PRT0000                     PRINT CONTROL STATEMENT\n         CLI   COMM_CONTROL_STMT,C'*'         COMMENT?\n         BE    PARM0010                       YES\n         LA    R3,COMM_CONTROL_STMT           I/O AREA ADDRESS\n         LA    R4,72                          MAX LOOPS\n         TM    DXD_FLAGS,$CONTINUED           CONTINUED STATEMENT?\n         BNO   PARM0030                       NO\n         CLI   0(R3),C' '                     BLANK?\n         BNE   PARM0130                       NO..\n         ITRACE ID=CONT\n         LA    R3,1(,R3)\n         BCTR  R4,R0\nPARM0020 DS    0H\n         CLI   0(R3),C' '                     BLANK?\n         BNE   PARM0040                       NO\n         LA    R3,1(,R3)                      NEXT\n         BCT   R4,PARM0020                    LOOP\n         B     PARM0010\nPARM0030 DS    0H\n         ITRACE ID=NOCONT\n         CLC   NO_RLD_WARNING,COMM_CONTROL_STMT\n         BE    RLD0000                        YES\n         XC    DXD_PARM_NBR,DXD_PARM_NBR      RESET PARM NBR\n         MVC   DXD_CTL_1,COMM_BLANKS\n         MVC   DXD_CTL_2,COMM_BLANKS\n         MVC   DXD_CTL_3,COMM_BLANKS\n         MVC   DXD_CTL_4,COMM_BLANKS\n         MVC   DXD_CTL_5,COMM_BLANKS\n         MVC   DXD_CTL_6,COMM_BLANKS\nPARM0040 DS    0H\n         LH    R1,DXD_PARM_NBR                PARM NUMBER\n         CH    R1,H6                          TOO MANY PARMS?\n         BE    PARM0140                       YES\n         LR    R2,R1                          COPY PARM NBR\n         LA    R1,1(,R1)                      ADD 1\n         STH   R1,DXD_PARM_NBR                UPDATE PARM NBR\n         ITRACE ID=PARM_NBR,                                           +\n               DATA1=DXD_PARM_NBR\n         MH    R2,=Y(L'DXD_CTL_1)             MULTIPLY BY LENGTH EACH\n         LA    R5,L'DXD_CTL_1                 MAX LENGTH OF A PARM\n         LA    R2,DXD_CTL_1(R2)               ADDRESS OF PARM\nPARM0050 DS    0H\n         CLC   =C', ',0(R3)                   CONTINUED STATEMENT?\n         BE    PARM0070                       YES\n         CLI   0(R3),C','                     COMMA?\n         BE    PARM0080                       YES\n         CLI   0(R3),C' '                     BLANK?\n         BE    PARM0090                       YES\n         MVC   0(1,R2),0(R3)                  COPY TO PARM\n         LA    R2,1(,R2)                      NEXT IN PARM\n         LA    R3,1(,R3)                      NEXT IN CONTROL STATEMENT\n         BCT   R5,PARM0060\n         B     PARM0150                       TOO LONG\nPARM0060 DS    0H\n         BCT   R4,PARM0050                    LOOP\n         B     PARM0010                       READ NEXT STATEMENT\nPARM0070 DS    0H\n         ITRACE ID=SET_CONT\n         OI    DXD_FLAGS,$CONTINUED           STATEMENT IS CONTINUED\n         B     PARM0010\nPARM0080 DS    0H\n         ITRACE ID=ENDPARM,                                            +\n               DATA1=DXD_CTL_1+0,                                      +\n               DATA2=DXD_CTL_1+8\n         LA    R3,1(,R3)\n         BCT   R4,PARM0040\n         B     PARM0070\nPARM0090 DS    0H\n         NI    DXD_FLAGS,255-$CONTINUED       RESET FLAG\n         ITRACE ID=RSETCONT\n         LA    R1,KEYWORD_TABLE               KEYWORD TABLE\nPARM0100 DS    0H\n         CLI   0(R1),X'FF'                    END OF TABLE?\n         BE    PARM0120                       YES\n         CLC   DXD_CTL_1(10),0(R1)            DEFINED KEYWORD?\n         BE    PARM0110                       YES\n         LA    R1,14(R1)                      NEXT KEYWORD/ADDRESS\n         B     PARM0100                       LOOP\nPARM0110 DS    0H\n         ICM   R15,15,10(R1)                  INSERT ADDRESS\n         BR    R15                            BRANCH\nPARM0120 DS    0H\n         MVI   COMM_MSG_ID,1                  UNRECOGNIZED KEYWORD\n         B     PARM0160\nPARM0130 DS    0H\n         MVI   COMM_MSG_ID,2                  IMPROPER CONTINUATION\n         NI    DXD_FLAGS,255-$CONTINUED       RESET FLAG\n         B     PARM0160\nPARM0140 DS    0H\n         MVI   COMM_MSG_ID,3                  TOO MANY PARMS\n         B     PARM0160\nPARM0150 DS    0H\n         MVI   COMM_MSG_ID,4                  PARM TOO LONG\nPARM0160 DS    0H\n         BAL   R9,MSG0000                     PRINT MESSAGE\n         OI    COMM_FLAGS,$COMM_FLAGS_ABORT   SET ABORT FLAG\n         B     PARM0010                       READ NEXT STATEMENT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Set ABEND flag                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nABEND000 DS    0H\n         ITRACE ID=ABEND                      ABEND AT EXIT\n         OI    COMM_FLAGS,$COMM_FLAGS_ABEND\n         B     PARM0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Process assembler input                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nASM0000  DS    0H\n         ITRACE ID=ASM\n         TM    COMM_ASSEM_DDS,$SYSIN_DD\n         BNO   ASM0040\n         CLC   =C'START ',DXD_CTL_2\n         BE    ASM0010\n         CLC   =C'END ',DXD_CTL_2\n         BE    ASM0030\nASM0010  DS    0H\n         GET   DISIN_DCB,COMM_CONTROL_STMT       READ A CONTROL STMT\n         MVC   PRINT_DATA(l'COMM_CONTROL_STMT),COMM_CONTROL_STMT\n         BAL   R9,PRT0000                        PRINT CONTROL STMT\n         CLC   ASM_END_KEYWORD,COMM_CONTROL_STMT (END)?\n         BE    ASM0030                           YES\n         TM    COMM_ASSEM_DDS,$SYSIN_DD\n         BNO   ASM0010                           NO SYSIN DD\n         TM    DXD_FLAGS,$ASM_OPEN               ASSEMBLER DCB OPEN?\n         BO    ASM0020                           YES\n         OI    DXD_FLAGS,$ASM_OPEN               INDICATE DCB IS OPEN\n         ITRACE ID=OPEN,                                               +\n               DATA1==C'DISIN   '\n         OPEN  (SYSIN_DCB,OUTPUT),               OPEN SYSIN DCB        +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n         OI    COMM_FLAGS,$COMM_ASSEM            SET INDICATOR\nASM0020  DS    0H\n         PUT   SYSIN_DCB,COMM_CONTROL_STMT       WRITE CONTROL STMT\n         B     ASM0010                           LOOP\nASM0030  DS    0H\n         ITRACE ID=ASMEND\n         B     PARM0010                          READ NEXT CONTROL STMT\nASM0040  DS    0H\n         MVI   COMM_MSG_ID,5                     SYSIN DD REQUIRED\n         OI    COMM_FLAGS,$COMM_FLAGS_ABORT\n         BAL   R9,MSG0000                        PRINT MESSAGE\n         B     ASM0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Process BASE statements                                    *\n*                                                                     *\n*                                                                     *\n*        BASE,register,start disp,end disp,disp register references   *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nBASE0000 DS    0H\n         ITRACE ID=BASE\n         LA    R1,DXD_CTL_2                  REGISTER NAME'S ADDRESS\n         BAL   R9,REG0000                    FIND REGISTER TABLE ENTRY\n         ITRACE ID=REG,                                                +\n               RDATA1=R4,                                              +\n               DATA2=0(R4)\n* ------------------------------------------------------------------- *\n*       R4 POINTS TO REGISTER TABLE ENTRY                             *\n* ------------------------------------------------------------------- *\n         CLC   DXD_CTL_3,COMM_BLANKS         START ALL BLANK?\n         BNE   BASE0010                      NO\n         CLC   DXD_CTL_4,COMM_BLANKS         END ALL BLANK?\n         BE    BASE0030                      YES\nBASE0010 DS    0H\n         LA    R1,8                          MAX DIGITS\n         LA    R2,DXD_CTL_3                  FIRST CHARACTER OF DISP\n         BAL   R9,HEX0000                    CONVERT TO HEX\n         MVC   DXD_START_DISP,DXD_DISP_OUT   SAVE STARTING DISPLACEMENT\n         CLC   DXD_CTL_4,COMM_BLANKS         ENDING DISPLACEMENT BLANK?\n         BE    BASE0020                      YES\n         LA    R1,8                          MAX DIGITS\n         LA    R2,DXD_CTL_4                  FIRST CHARACTER OF DISP\n         BAL   R9,HEX0000                    CONVERT TO HEX\n         MVC   DXD_END_DISP,DXD_DISP_OUT     ENDING DISPLACEMENT\n         CLC   DXD_START_DISP,DXD_END_DISP   START LARGER THAN END?\n         BH    BASE0080                      YES.. INVALID\n         B     BASE0040\nBASE0020 DS    0H\n         ICM   R1,15,DXD_START_DISP          BEGINNING POINT\n         AH    R1,H4096                      PLUS 4K\n         STCM  R1,15,DXD_END_DISP            SAVE ENDING POINT\n         B     BASE0040\nBASE0030 DS    0H\n         XC    DXD_START_DISP,DXD_START_DISP SET START TO ZERO\n         MVC   DXD_END_DISP,XFFFF            SET END TO HEX FF'S\nBASE0040 DS    0H\n         LA    R1,8                          MAX DIGITS\n         LA    R2,DXD_CTL_5                  FIRST CHARACTER OF DISP\n         BAL   R9,HEX0000                    CONVERT TO HEX\n         LA    R5,COMM_BASE_PREV             FORWARD POINTER\nPREV     USING BASE_DSECT,R3\nCURR     USING BASE_DSECT,R5\n         B     BASE0060                      NO BLOCK'S ON CHAIN\nBASE0050 DS    0H\n         CLC   CURR.BASE_BEGIN,DXD_DISP_OUT  INSERT IT HERE?\n         BL    BASE0070                      YES\nBASE0060 DS    0H\n         LR    R3,R5                         COPY CURR TO PREV\n         ICM   R5,15,CURR.BASE_NEXT          NEXT BASE BLOCK\n         BNZ   BASE0050                      LOOP\nBASE0070 DS    0H\n         GETMAIN RU,                         ACQUIRE STORAGE           +\n               LV=BASE_DSECT_L,              .. SIZE                   +\n               LOC=ANY                       .. ANY AREA\n         ITRACE ID=NEWBASE,                  NEW BLOCK ACQUIRED        +\n               RDATA1=R1                     .. CAPTURE STORAGE ADDRESS\nNEW      USING BASE_DSECT,R1\n         XC    NEW.BASE_DSECT(BASE_DSECT_L),NEW.BASE_DSECT\n         ST    R1,PREV.BASE_NEXT             CHAIN NEW BLOCK\n         LTR   R5,R5\n         BZ    BASE0075\n         ST    R1,CURR.BASE_PREV             CHAIN NEW BLOCK\nBASE0075 DS    0H\n         ST    R3,NEW.BASE_PREV\n         ST    R5,NEW.BASE_NEXT\n         MVC   NEW.BASE_EYE,BASE_KEYWORD     SET BLOCK IDENTIFIER\n         MVC   NEW.BASE_BEGIN,DXD_START_DISP SET STARTING DISPLACEMENT\n         MVC   NEW.BASE_END,DXD_END_DISP     SET ENDING DISPLACEMENT\n         MVC   NEW.BASE_CHAR_REGISTER,REGISTER_NAME\n         MVC   NEW.BASE_REGISTER,REGISTER_VALUE\n         MVC   NEW.BASE_DISP,DXD_DISP_OUT    SET DISP BASE REFERS TO\n         B     PARM0010                      READ NEXT CONTROL STMT\nBASE0080 DS    0H\n         MVI   COMM_MSG_ID,6\n         OI    COMM_FLAGS,$COMM_FLAGS_ABORT\n         BAL   R9,MSG0000                    PRINT MESSAGE\n         B     PARM0010                      READ NEXT CONTROL STMT\n         DROP  PREV,CURR,NEW\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Process CSECT statements                                   *\n*                                                                     *\n*        CSECT,name                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCSCT0000 DS    0H\n         ITRACE ID=CSCTNAME,                 CSECT NAME                +\n               DATA1=DXD_CTL_2\n         CLC   COMM_CSECT,COMM_BLANKS        NAME ALREADY GIVEN?\n         BNE   CSCT0010                      YES\n         MVC   COMM_CSECT,DXD_CTL_2          SET CSECT NAME\n         B     PARM0010\nCSCT0010 DS    0H\n         MVI   COMM_MSG_ID,7\n         OI    COMM_FLAGS,$COMM_FLAGS_ABORT\n         BAL   R9,MSG0000                    PRINT MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Process DATA statements                                    *\n*                                                                     *\n*        DATA,begin disp,end disp                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDATA0000 DS    0H\n         ITRACE ID=DATA\n         LA    R1,8                          MAX DIGITS\n         LA    R2,DXD_CTL_2                  FIRST CHARACTER OF DISP\n         BAL   R9,HEX0000                    CONVERT TO HEX\n         MVC   DXD_START_DISP,DXD_DISP_OUT   STARTING DISPLACEMENT\n         LA    R1,8                          MAX DIGITS\n         LA    R2,DXD_CTL_3                  END DISP\n         BAL   R9,HEX0000                    CONVERT END DISP TO HEX\n         LA    R3,COMM_USER_AREA_PREV_1      AREA BLOCK ANCHOR\nPREV     USING AREA_DSECT,R2\nCURR     USING AREA_DSECT,R3\n         B     DATA0025\nDATA0010 DS    0H\n         CLC   CURR.AREA_END,DXD_START_DISP  BELOW THIS AREA?\n         BL    DATA0020                      YES\n         CLC   CURR.AREA_BEGIN,DXD_DISP_OUT  ABOVE THIS AREA?\n         BH    DATA0030                      YES\n         B     DATA0060                      OVERLAPS\nDATA0020 DS    0H\n         LR    R3,R2                         COPY CURR TO PREV\nDATA0025 DS    0H\n         ICM   R3,15,CURR.AREA_NEXT          NEXT DATA BLOCK\n         BNZ   DATA0010                      LOOP\nDATA0030 DS    0H\n         GETMAIN RU,                         ACQUIRE STORAGE           +\n               LV=AREA_DSECT_L,              .. SIZE                   +\n               LOC=ANY                       .. IN ANY AREA\nNEW      USING AREA_DSECT,R1\n         XC    NEW.AREA_DSECT(AREA_DSECT_L),NEW.AREA_DSECT\n         ST    R1,PREV.AREA_NEXT\n         LTR   R3,R3                         ADDING TO END OF CHAIN?\n         BZ    DATA0035                      YES.. SKIP SETTING 'PREV'\n         ST    R1,CURR.AREA_PREV             SET PREV IN CURRENT\nDATA0035 DS    0H\n         ST    R2,NEW.AREA_PREV\n         ST    R3,NEW.AREA_NEXT\n         MVC   NEW.AREA_EYE,AREA_ID          SET BLOCK IDENTIFIER\n         MVC   NEW.AREA_BEGIN,DXD_START_DISP SET START DISPLACEMENT\n         MVC   NEW.AREA_END,DXD_DISP_OUT     SET END DISPLACEMENT\n         ICM   R14,15,NEW.AREA_BEGIN         BEGINNING DISPLACEMENT\n         ICM   R15,15,NEW.AREA_END           ENDING DISPLACEMENT\n         BZ    DATA0040                      NO ENDING DISP\n         SR    R15,R14                       LENGTH - 1\n         LA    R15,1(R15)                    TOTAL LENGTH\n         STCM  R15,15,NEW.AREA_LENGTH        SET LENGTH\n         B     DATA0050\nDATA0040 DS    0H\n         MVC   NEW.AREA_END,XFFFF\nDATA0050 DS    0H\n         MVI   NEW.AREA_TYPE,$AREA_DATA\n         MVI   NEW.AREA_DATA_TYPE,$DATA_USER\n         XC    NEW.AREA_LABEL,NEW.AREA_LABEL\n         XC    NEW.AREA_REF_LABEL1,NEW.AREA_REF_LABEL1\n         XC    NEW.AREA_REF_DISP1,NEW.AREA_REF_DISP1\n         XC    NEW.AREA_REF_LABEL2,NEW.AREA_REF_LABEL2\n         XC    NEW.AREA_REF_DISP2,NEW.AREA_REF_DISP2\n         ITRACE ID=NEWDATA,                  NEW DATA BLOCK ADQUIRED   +\n               RDATA1=R1,                    .. NEW BLOCK'S ADDRESS    +\n               DATA2=NEW.AREA_BEGIN          .. BEGIN AND END DISP'S\n         B     PARM0010                      READ NEXT STATEMENT\nDATA0060 DS    0H\n         ITRACE ID=DATAOVLP                  DATA AREA OVERLAP\n         UNPK  COMM_INFO_01(9),CURR.AREA_BEGIN(5)\n         TR    COMM_INFO_01,COMM_HEXCHAR\n         UNPK  COMM_INFO_02(9),CURR.AREA_END(5)\n         TR    COMM_INFO_02,COMM_HEXCHAR\n         MVI   COMM_MSG_ID,8\n         OI    COMM_FLAGS,$COMM_FLAGS_ABORT\n         BAL   R9,MSG0000                    PRINT MESSAGE\n         B     PARM0010                      READ NEXT STMT\n         DROP  PREV,CURR,NEW\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          LABEL or PREFIX statements                                 *\n*                                                                     *\n*        LABEL,xxxx                                                   *\n*            or                                                       *\n*        PREFIX,xxxx                                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLABL0000 DS    0H\n         ITRACE ID=LABEL\n         CLC   COMM_PREFIX,COMM_BLANKS       PREFIX STILL BLANK?\n         BNE   LABL0030                      NO.. DUPLICATED\n         CLI   DXD_CTL_2,C' '                PREFIX BLANK?\n         BE    LABL0040                      YES.. INVALID\n         CLC   DXD_CTL_2(4),DATA_KEYWORD     PREFIX 'DATA'?\n         BE    LABL0050                      YES.. NOT VALID\n         LA    R1,DXD_CTL_2                  FIRST CHARACTER OF PREFIX\n         LA    R2,4                          MAXIMUM LENGTH\n         SR    R3,R3                         INITIALIZE FOR LENGTH\nLABL0010 DS    0H\n         CLI   0(R1),C' '                    BLANK?\n         BE    LABL0020                      YES\n         LA    R1,1(R1)                      NEXT\n         LA    R3,1(R3)                      ADD 1 TO LENGTH\n         BCT   R2,LABL0010                   LOOP\nLABL0020 DS    0H\n         CLC   COMM_BLANKS(4),0(R1)          A FEW BLANKS?\n         BNE   LABL0060                      NO\n         MVC   COMM_PREFIX,DXD_CTL_2         SET PREFIX\n         STH   R3,COMM_PREFIX_LENGTH         SET PREFIX LENGTH\n         B     PARM0010                      READ NEXT STATEMENT\nLABL0030 DS    0H\n         MVI   COMM_MSG_ID,9\n         B     LABL0070\nLABL0040 DS    0H\n         MVI   COMM_MSG_ID,10\n         B     LABL0070\nLABL0050 DS    0H\n         MVI   COMM_MSG_ID,11\n         B     LABL0070\nLABL0060 DS    0H\n         MVI   COMM_MSG_ID,12\nLABL0070 DS    0H\n         OI    COMM_FLAGS,$COMM_FLAGS_ABORT\n         BAL   R9,MSG0000                    PRINT MESSAGE\n         B     PARM0010                      READ NEXT STATEMENT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Process MODULE Statements                                  *\n*                                                                     *\n*        MODULE,name                                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMOD0000  DS    0H\n         ITRACE ID=MODNAME,                  MODULE NAME               +\n               DATA1=DXD_CTL_2\n         MVC   COMM_LMOD,DXD_CTL_2           SET MODULE NAME\n         B     PARM0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Process NO RLD WArning statements                          *\n*                                                                     *\n*        NO RLD WA[arning]                                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRLD0000  DS    0H\n         ITRACE ID=NORLDWA\n         OI    COMM_FLAGS,$COMM_NO_RLD_WARN  SET FLAG\n         B     PARM0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Process B2 statement                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nB20000   DS    0H\n         ITRACE ID=B2                        'B2' INSTRUCTIONS\n         OI    COMM_FLAGS,$COMM_B2           SET FLAG\n         B     PARM0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Process FLOAT statements                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFLOAT000 DS    0H\n         OI    COMM_FLAGS,$COMM_FLOAT        SET FLOATING POINT\n         B     PARM0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Process USING statements                                   *\n*                                                                     *\n*        USING,dsect,label,register,start disp,end disp               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nUSNG0000 DS    0H\n         ITRACE ID=USING                     USING STATEMENT FOUND\n         LA    R3,COMM_USING_PREV            CURRENT BLOCK IS ANCHOR\nPREV     USING USING_DSECT,R5                DEFINE BASE\nCURR     USING USING_DSECT,R3                DEFINE BASE\nUSNG0010 DS    0H\n         LR    R5,R3                         COPY CURRENT TO PREV\n         ICM   R3,15,CURR.USING_NEXT         NEXT BLOCK ON CHAIN\n         BZ    USNG0020                      END OF CHAIN FOUND\nUSNG0020 DS    0H\n         LA    R1,DXD_CTL_4                  REGISTER NAME'S ADDRESS\n         BAL   R9,REG0000                    FIND REGISTER TABLE ENTRY\n* ------------------------------------------------------------------- *\n*       R5 addr of last USING block on chain or anchor in COMM        *\n*       R4 addr of register table entry                               *\n* ------------------------------------------------------------------- *\n         CLC   DXD_CTL_5,COMM_BLANKS         STARTING DISP BLANK?\n         BE    USNG0070                      YES\n         CLC   DXD_CTL_6,COMM_BLANKS         ENDING DISP BLANK?\n         BE    USNG0050                      YES.. NOT VALID\n         LA    R1,8                          MAXIMUM NUMBER OF DIGITS\n         LA    R2,DXD_CTL_5                  FIRST CHAR OF BEGIN DISP\n         BAL   R9,HEX0000                    VERIFY/CONVERT BEGIN DISP\n         MVC   DXD_START_DISP,DXD_DISP_OUT   STARTING DISPLACEMENT\n         LA    R1,8                          MAXIMUM NUMBER OF DIGITS\n         LA    R2,DXD_CTL_6                  FIRST CHAR OF END DISP\n         BAL   R9,HEX0000                    VERIFY/CONVERT END DISP\n         CLC   DXD_START_DISP,DXD_DISP_OUT   BEGIN LARGER THAN END?\n         BH    USNG0060                      YES.. ERROR\nUSNG0030 DS    0H\n         GETMAIN RU,                         ACQUIRE STORAGE           +\n               LV=USING_DSECT_L,             .. SIZE                   +\n               LOC=ANY                       .. IN ANY AREA\n         ITRACE ID=NEWUSNG,                                            +\n               RDATA1=R1                     .. TRACE BLOCK'S ADDRESS\n         LR    R3,R1\n         XC    CURR.USING_DSECT(USING_DSECT_L),CURR.USING_DSECT\n         ST    R3,PREV.USING_NEXT\n         ST    R5,CURR.USING_PREV\n         MVC   CURR.USING_EYE,USING_KEYWORD       SET BLOCK IDENTIFIER\n         XC    CURR.USING_NEXT,CURR.USING_NEXT    CLEAR FORWARD POINTER\n         MVI   CURR.USING_FLAG,0                  SET ALL FLAGS OFF\n         MVC   CURR.USING_DSECT_NAME,DXD_CTL_2    SET DSECT'S NAME\n         MVC   CURR.USING_DSECT_LABEL,DXD_CTL_3   SET LABEL IN DSECT\n         XC    CURR.USING_DSECT_ADDR,CURR.USING_DSECT_ADDR              RESS\n         XC    CURR.USING_LABEL_ADDR,CURR.USING_LABEL_ADDR              RESS\n         XC    CURR.USING_DISP,CURR.USING_DISP    CLEAR LABEL DISP\n         MVC   CURR.USING_REGISTER,REGISTER_VALUE SET BASE VALUE\n         MVC   CURR.USING_CHAR_REGISTER,REGISTER_NAME\n         CLC   DXD_CTL_5,COMM_BLANKS              STARTING DISP OMITTED\n         BE    USNG0040                           YES\n         MVC   CURR.USING_BEGIN,DXD_START_DISP    BEGINNING DISP\n         MVC   CURR.USING_END,DXD_DISP_OUT        ENDING DISPLACEMENT\n         B     PARM0010                           READ NEXT\nUSNG0040 DS    0H\n         OI    CURR.USING_FLAG,$USING_NO_DISP     NO DISPLACEMENTS\n         XC    CURR.USING_BEGIN,CURR.USING_BEGIN  CLEAR STARTING DISP\n         XC    CURR.USING_END,CURR.USING_END      CLEAR ENDING DISP\n         B     PARM0010                           READ NEXT STMT\nUSNG0050 DS    0H\n         MVI   COMM_MSG_ID,13                SET MESSAGE\n         B     USNG0080\nUSNG0060 DS    0H\n         MVI   COMM_MSG_ID,14                SET MESSAGE\n         B     USNG0080\nUSNG0070 DS    0H\n         CLC   DXD_CTL_6,COMM_BLANKS         ENDING DISPLACEMENT BLANK?\n         BE    USNG0030                      YES\n         MVI   COMM_MSG_ID,15\nUSNG0080 DS    0H\n         OI    COMM_FLAGS,$COMM_FLAGS_ABORT\n         BAL   R9,MSG0000                    PRINT MESSAGE\n         B     PARM0010\n         DROP  PREV,CURR\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Locate register table entry                                  *\n*                                                                     *\n*          R1  is register name's address                             *\n*          R9  is return address                                      *\n*                                                                     *\n*          At exit R4 will point to the register table entry.         *\n*                                                                     *\n*          If any error is found, control is passed to 'PARM0010'.    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREG0000  DS    0H\n         ITRACE ID=CONVREG\n         CLI   0(R1),C' '                    BLANK?\n         BE    REG0050                       YES.. INVALID\n         CLC   3(7,R1),COMM_BLANKS           REFERENCE TOO LONG?\n         BNE   REG0060                       YES.. INVALID\n         CLI   2(R1),C' '                    3-CHARACTER NAME?\n         BNE   REG0010                       YES\n         CLI   1(R1),C' '                    2-CHARACTER NAME?\n         BNE   REG0020                       YES\n         ITRACE ID=REG1\n         LA    R4,REGTBL1                    1-CHARACTER NAME TABLE\n         SR    R2,R2                         SET LENGTH (1 BYTE)\n         B     REG0030                       FIND TABLE ENTRY\nREG0010  DS    0H\n         ITRACE ID=REG3\n         LA    R4,REGTBL3                    3-CHARACTER NAME TABLE\n         LA    R2,2                          SET LENGTH (3 BYTES)\n         B     REG0030                       FIND TABLE ENTRY\nREG0020  DS    0H\n         ITRACE ID=REG2\n         LA    R4,REGTBL2                    2-CHARACTER NAME TABLE\n         LA    R2,1                          SET LENGTH (2 BYTES)\nREG0030  DS    0H\n         CLI   0(R4),X'FF'                   END OF TABLE?\n         BE    REG0040                       YES.. INVALID\n         EX    R2,REGCLC                     REGISTER NAME MATCH?\n         BER   R9                            YES\n         LA    R4,REGISTER_L(R4)             NEXT REGISTER ENTRY\n         B     REG0030                       LOOP\nREG0040  DS    0H\n         ITRACE ID=BADREG\n         MVI   COMM_MSG_ID,16                SET MESSAGE\n         B     REG0070\nREG0050  DS    0H\n         ITRACE ID=REGBLANK\n         MVI   COMM_MSG_ID,17                SET MESSAGE\n         B     REG0070\nREG0060  DS    0H\n         ITRACE ID=REGLONG\n         MVI   COMM_MSG_ID,18                SET MESSAGE\nREG0070  DS    0H\n         OI    COMM_FLAGS,$COMM_FLAGS_ABORT\n         BAL   R9,MSG0000                    PRINT MESSAGE\n         B     PARM0010\nREGCLC   CLC   REGISTER_NAME(0),0(R1)        TEST REGISTER NAME\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          PROCESS ZOP STATEMENT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nZOP0000  DS    0H\n         ITRACE ID=ZOP                       'Z' INSTRUCTIONS\n         OI    COMM_FLAGS,$COMM_Z            SET FLAG\n         B     PARM0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          Convert character to hex                                   *\n*                                                                     *\n*          R1 should be the number of characters (up to 8)            *\n*          R2 should be the address of the first character            *\n*          R9 should be the return address                            *\n*                                                                     *\n*             At exit 'DXD_DISP_OUT' will be the value in hex         *\n*                                                                     *\n*          If any error is found, control is passed to 'PARM0010'.    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nHEX0000  DS    0H\n         MVC   DXD_DISP_IN,=C'00000000'      INITIALIZE DISP TO ZERO\nHEX0010  DS    0H\n         CLI   0(R2),C' '                    END OF DISPLACEMENT?\n         BE    HEX0030                       YES\n         CLI   0(R2),C'A'                    TOO LOW FOR VALID HEX?\n         BL    HEX0040                       YES\n         CLI   0(R2),C'F'                    WITHIN A-F?\n         BNH   HEX0020                       YES, VALID\n         CLI   0(R2),C'0'                    TOO LOW FOR NUMERIC?\n         BL    HEX0040                       YES\n         CLI   0(R2),C'9'                    TOO HIGH?\n         BH    HEX0040                       YES\nHEX0020  DS    0H\n         MVC   DXD_DISP_IN(L'DXD_DISP_IN-1),DXD_DISP_IN+1 SHIFT LEFT 1  IGIT\n         MVC   DXD_DISP_IN+L'DXD_DISP_IN-1(1),0(R2)       NEW DIGIT\n         LA    R2,1(R2)                      NEXT DISP CHARACTER\n         BCT   R1,HEX0010                    LOOP\n         CLI   0(R2),C' '                    BLANK?\n         BNE   HEX0050                       NO.. TOO MANY DIGITS\nHEX0030  DS    0H\n         NC    DXD_DISP_IN,HEX1F1F           PREPARE FOR TRANSLATE\n         TR    DXD_DISP_IN,CHARHEX           TRANSLATE FOR PACKING\n         PACK  DXD_DISP_OUT(5),DXD_DISP_IN(9) PACK\n         BR    R9                            GET OUTTA HERE\nHEX0040  DS    0H\n         MVI   COMM_MSG_ID,19\n         OI    COMM_FLAGS,$COMM_FLAGS_ABORT\n         BAL   R9,MSG0000                    PRINT MESSAGE\n         B     PARM0010\nHEX0050  DS    0H\n         MVI   COMM_MSG_ID,20\n         OI    COMM_FLAGS,$COMM_FLAGS_ABORT\n         BAL   R9,MSG0000                    PRINT MESSAGE\n         B     PARM0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDEBUG000 DS    0H\n         L     R15,V_DISDEBUG\n         BALR  R14,R15\n         BR    R9\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         TM    DXD_FLAGS,$SUBH               SUB-HEADING BEEN PRINTED?\n         BO    PRT0010                       YES\n         OI    DXD_FLAGS,$SUBH               SET FLAG\n         MVI   PRINT_COMMAND,$PRINT_SUB_HEAD\n         L     R15,V_DISPRINT                PRINT MODULE ENTRY POINT\n         BALR  R14,R15                       LINK TO PRINT MODULE\nPRT0010  DS    0H\n         MVI   PRINT_COMMAND,$PRINT_PRINT\n         L     R15,V_DISPRINT                PRINT MODULE ENTRY POINT\n         BALR  R14,R15                       LINK TO PRINT MODULE\n         BR    R9                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0000  DS    0H\n         MVC   COMM_MSG_CSECT,MODID\n         L     R15,V_DISMSG\n         BALR  R14,R15\n         MVI   PRINT_COMMAND,$PRINT_PRINT\n         LA    R2,COMM_MSG_1                FIRST MESSAGE\n         LA    R3,5                         MAX MESSAGES\nMSG0010  DS    0H\n         CLC   0(L'COMM_MSG_1,R2),COMM_BLANKS\n         BER   R9                           BLANK.. STOP HERE\n         MVC   PRINT_DATA(L'COMM_MSG_1),0(R2)\n         L     R15,V_DISPRINT               PRINT MODULE ENTRY POINT\n         BALR  R14,R15                      LINK TO PRINT MODULE\n         LA    R2,L'COMM_MSG_1(,R2)         NEXT MESSAGE\n         BCT   R3,MSG0010\n         BR    R9                           RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=CLOSE,                                              +\n               DATA1==C'DISIN   '\n         CLOSE DISIN_DCB,                                              +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n         MVC   COMM_SUBHEAD,COMM_BLANKS      CLEAR SUB HEADING\n         MVI   PRINT_COMMAND,$PRINT_HEADING  SET COMMAND\n         L     R15,V_DISPRINT\n         BALR  R14,R15                       FORCE HEADING\n         TM    DXD_FLAGS,$ASM_OPEN           ASSEMBLER INPUT OPEN?\n         BNO   EXIT0010                      NO\n         ITRACE ID=CLOSEASM                  CLOSING DISIN DCB\n         NI    DXD_FLAGS,255-$ASM_OPEN       INDICATE DCB IS CLOSED\n         ITRACE ID=CLOSE,                                              +\n               DATA1==C'DISIN   '\n         CLOSE SYSIN_DCB,                                              +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\nEXIT0010 DS    0H\n         OC    COMM_BASE_NEXT,COMM_BASE_NEXT BASE REGISTER(S) DEFINED?\n         BZ    EXIT0020                      NO\n         CLC   COMM_PREFIX,COMM_BLANKS       PREFIX DEFINED?\n         BNE   EXIT0030                      YES\n         MVI   COMM_MSG_ID,21\n         BAL   R9,MSG0000                    PRINT MESSAGE\n         B     EXIT0030                      EXIT\nEXIT0020 DS    0H\n         CLC   COMM_PREFIX,COMM_BLANKS       PREFIX DEFINED?\n         BE    EXIT0030                      NO\n         MVI   COMM_MSG_ID,22\n         BAL   R9,MSG0000                    PRINT MESSAGE\nEXIT0030 DS    0H\n         ITRACE ID=EXIT\n         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02\n         BAL   R9,DEBUG000\n         L     R13,4(,R13)                   RESTORE REGISTER 13        ASE01670\n         LM    R14,R12,12(R13)               RESTORE OTHER REGISTERS    ASE01680\n         SR    R15,R15                       GIVE GOOD RETURN CODE      ASE01690\n         BR    R14                           RETURN TO CALLER           ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START       DC    Q(DXDPARM)\nXFFFF           DC    X'FFFFFFFF'\nH6              DC    H'6'\nH4096           DC    H'4096'            4K IN DECIMAL\n\nSUBHEAD         DS    0C\n                DC    C'0'\n                DC    61C'-'\n                DC    C' CONTROL STATEMENTS '\n                DC    61C'-'\n\nNO_RLD_WARNING  DC    C'NO RLD WA'\n\nHEX1F1F         DC    8X'1F'\n*                        0 1 2 3 4 5 6 7 8 9 A B C D E F\nCHARHEX         DC    X'000A0B0C0D0E0F000000000000000000'  00-0F\n                DC    X'00010203040506070809000000000000'  10-1F\n\nAREA_ID         DC    CL8'AREA'\n\nMSG01           DS    0C\n                DC    C'DISPARM01I   Entering DISPARM'\nMSG01_L         EQU   *-MSG01\n\nMSG02           DS    0C\n                DC    C'DISPARM02I   Exiting DISPARM'\nMSG02_L         EQU   *-MSG02\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nKEYWORD_TABLE   DS    0X\n                DC    CL10'ABEND    ',AL4(ABEND000)\n                DC    CL10'ASM      ',AL4(ASM0000)\nBASE_KEYWORD    DC    CL10'BASE     ',AL4(BASE0000)\n                DC    CL10'CSECT    ',AL4(CSCT0000)\nDATA_KEYWORD    DC    CL10'DATA     ',AL4(DATA0000)\n                DC    CL10'LABEL    ',AL4(LABL0000)\n                DC    CL10'MODULE   ',AL4(MOD0000)\n                DC    CL10'B2       ',AL4(B20000)\n                DC    CL10'FLOAT    ',AL4(FLOAT000)\n                DC    CL10'PREFIX   ',AL4(LABL0000)\nUSING_KEYWORD   DC    CL10'USING    ',AL4(USNG0000)\n                DC    CL10'ZOP      ',AL4(ZOP0000)\n                DC    X'FF'\nASM_END_KEYWORD DC    C'ASM,END'\n*---------------------------------------------------------------------*\n*                                                                     *\n*              DCB'S                                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\nREGTBL1  DS    0C                    1-CHARACTER REGISTER NAMES\n         REG   0,0\n         REG   1,1\n         REG   2,2\n         REG   3,3\n         REG   4,4\n         REG   5,5\n         REG   6,6\n         REG   7,7\n         REG   8,8\n         REG   9,9\n         REG   A,10\n         REG   B,11\n         REG   C,12\n         REG   D,13\n         REG   E,14\n         REG   F,15\n         DC    X'FF'\nREGTBL2  DS    0C                    2-CHARACTER REGISTER NAMES\n         REG   R0,0\n         REG   R1,1\n         REG   R2,2\n         REG   R3,3\n         REG   R4,4\n         REG   R5,5\n         REG   R6,6\n         REG   R7,7\n         REG   R8,8\n         REG   R9,9\n         REG   10,10\n         REG   11,11\n         REG   12,12\n         REG   13,13\n         REG   14,14\n         REG   15,15\n         REG   RA,10\n         REG   RB,11\n         REG   RC,12\n         REG   RD,13\n         REG   RE,14\n         REG   RF,15\n         DC    X'FF'\nREGTBL3  DS    0C                    3-CHARACTER REGISTER NAMES\n         REG   R10,10\n         REG   R11,11\n         REG   R12,12\n         REG   R13,13\n         REG   R14,14\n         REG   R15,15\n         DC    X'FF'\n         LTORG\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDPARM           DSECT\n                  DS    18F\nDXD_CSECT         DS    CL8\n\nDXD_PARM_NBR      DS    H                  NBR OF PARMS ON CONTROL STMT\n\nDXD_DISP_IN       DS    CL8\n                  DS    X                  PAD FOR PACKING\n\nDXD_DISP_OUT      DS    XL4\n                  DS    X                  PAD FOR PACKING\n\nDXD_START_DISP    DS    XL4                BEGINNING DISPLACEMENT\nDXD_END_DISP      DS    XL4                ENDING DISPLACEMENT\n\nDXD_FLAGS         DC    X'00'\n$SUBH             EQU   X'80'              SUBHEADING PRINTED\n$ASM_OPEN         EQU   X'40'              ASSEMBLER INPUT DCB OPEN\n$CONTINUED        EQU   X'20'              CONTINUED CONTROL STATEMENT\n\nDXD_CTL_1         DS    CL64\nDXD_CTL_2         DS    CL64\nDXD_CTL_3         DS    CL64\nDXD_CTL_4         DS    CL64\nDXD_CTL_5         DS    CL64\nDXD_CTL_6         DS    CL64\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nREGISTER_DSECT    DSECT\nREGISTER_NAME     DS      CL3              REGISTER NAME\nREGISTER_VALUE    DS      AL1              VALUE USED IN INSTRUCTIONS\nREGISTER_L        EQU     *-REGISTER_DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n                  COPY    DISASMDA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n                  DISCOMM TYPE=DSECT\n\n                  IFGACB  AM=VSAM\nACB_L             EQU     *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n                  IHADCBE\n                  COPY    REGEQU\n                  END     DISPARM\n./ ADD NAME=DISPRINT 0101-09119-09198-0844-00179-00179-00000-SOURCE\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: DISPRINT - Printing module                            *\n*                                                                     *\n*  Function:                                                          *\n*   DISASM was written in multiple CSECTs to keep any one module from *\n*   being excessively large and avoid some base register concerns due *\n*   to size, and to functionally divide up the over-all logic.  Since *\n*   printing was to be necessary from many modules, it seemed best to *\n*   have a separate print module.  All printing except DISDEBUG is    *\n*   done here.                                                        *\n*                                                                     *\n*   The interface data is in DISCOMM.                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISPRINT CSECT\nDISPRINT AMODE 31\nDISPRINT RMODE ANY\n         USING DISCOMM,R12\n         USING DISPRINT,R11\n         STM   R14,R12,12(R13)                  SAVE REGS\n         LR    R11,R15                          SET BASE REG\n         B     PRT0000                          SKIP EYECATCHER\nMODID    DC    CL8'DISPRINT'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nPRT0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS             WORK AREA ADDRESS\n         A     R15,DXD_START                    PLUS DISP TO OUR AREA\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                          SET SAVE AREA ADDRESS\n         USING DXDPRT,R13\n         ITRACE ID=ENTRY,                       TRACE ENTRY            +\n               DATA1=PRINT_COMMAND,             .. TRACE COMMAND       +\n               DATA2=DXD_LINE_NBR\n         CLC   DXD_CSECT,MODID                  INITIALIZED?\n         BE    PRT0010                          YES\n         ITRACE ID=INIT\n         MVC   DXD_CSECT,MODID\n         ZAP   DXD_LINE_NBR,P0\n         ZAP   DXD_PAGE_NBR,P0\nPRT0010  DS    0H\n         CLI   PRINT_COMMAND,$PRINT_HEADING     HEADING?\n         BE    PRT0060                          YES\n         CLI   PRINT_COMMAND,$PRINT_SUB_HEAD    SUB-HEADING?\n         BE    PRT0070                          YES\n         CLI   PRINT_COMMAND,$PRINT_PRINT       PRINT DATA?\n         BE    PRT0020                          YES\n         ITRACE ID=BAD_CMD,                                            +\n               DATA1=PRINT_COMMAND\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0020  DS    0H\n         ZAP   DXD_LINE_WORK,P1           SET WORK TO 1\n         CLI   PRINT_CC,C' '              SINGLE SPACE?\n         BE    PRT0030                    YES\n         AP    DXD_LINE_WORK,P1           ADD 1 TO WORK\n         CLI   PRINT_CC,C'0'              DOUBLE SPACE\n         BE    PRT0030                    YES\n         AP    DXD_LINE_WORK,P1           ADD 1 TO WORK\nPRT0030  DS    0H\n         AP    DXD_LINE_WORK,DXD_LINE_NBR NEW LINE NBR\n         CP    DXD_LINE_WORK,P65          WILL PAGE OVERFLOW?\n         BNH   PRT0040                    NO\n         ITRACE ID=PAGEFULL               PAGE IS FULL\n         MVI   PRINT_COMMAND,$PRINT_HEADING\n         BAL   R8,PRT0080                 PRINT HEADING\n         CLC   COMM_SUBHEAD,COMM_BLANKS   SUB-HEADING BLANK?\n         BE    PRT0040                    YES\n         PUT   DISPRINT_DCB,COMM_SUBHEAD  PRINT SUB HEADING\n         AP    DXD_LINE_NBR,P1\n         AP    DXD_LINE_NBR,P1\nPRT0040  DS    0H\n         ITRACE ID=PRINT                  PRINTING DATA\n         PUT   DISPRINT_DCB,PRINT_CC      PRINT\n         AP    DXD_LINE_NBR,P1            ADD 1 TO LINE NBR\n         CLI   PRINT_CC,C' '              SINGLE SPACE?\n         BE    PRT0050                    YES\n         AP    DXD_LINE_NBR,P1            ADD 1 TO LINE NBR\n         CLI   PRINT_CC,C'0'              DOUBLE SPACE\n         BE    PRT0050                    YES\n         AP    DXD_LINE_NBR,P1            ADD 1 TO LINE NBR\nPRT0050  DS    0H\n         MVI   PRINT_CC,C' '\n         MVI   PRINT_DATA,C' '            INTIALIZE PRINT\n         MVC   PRINT_DATA+1(L'PRINT_DATA-1),PRINT_DATA\n         B     EXIT0000                   EXIT\n* ------------------------------------------------------------------- *\n*             FORCED HEADINGS                                         *\n* ------------------------------------------------------------------- *\nPRT0060  DS    0H\n         ITRACE ID=FORCEDHD               FORCED HEADING\n         BAL   R8,PRT0080                 PRINT HEADING\n         CLC   COMM_SUBHEAD,COMM_BLANKS   SUB-HEADING BLANK?\n         BE    EXIT0000                   YES\n* ------------------------------------------------------------------- *\n*             FORCED SUB-HEADINGS                                     *\n* ------------------------------------------------------------------- *\nPRT0070  DS    0H\n         ITRACE ID=FORCESHD               FORCED SUB-HEADING\n         PUT   DISPRINT_DCB,COMM_SUBHEAD  PRINT SUBHEADING\n         AP    DXD_LINE_NBR,P1            ADD 1 TO LINE NBR\n         CLI   COMM_SUBHEAD,C'0'          DOUBLE SPACE?\n         BNE   EXIT0000                   NO\n         AP    DXD_LINE_NBR,P1            ADD 1 TO LINE NBR\n         B     EXIT0000                   AND EXIT\n* ------------------------------------------------------------------- *\n*             PRINT HEADING                                           *\n* ------------------------------------------------------------------- *\nPRT0080  DS    0H\n         ITRACE ID=PRTHEAD                PRINTING HEADING\n         AP    DXD_PAGE_NBR,P1            ADD 1 TO PAGE NBR\n         MVC   DXD_HEADING(HEADINGL),HEADING\nDXDHEAD  USING HEADING,DXD_HEADING\n         MVC   DXDHEAD.HEADING_PAGE,PAGE_EDITWORD\n         ED    DXDHEAD.HEADING_PAGE,DXD_PAGE_NBR\n         PUT   DISPRINT_DCB,DXD_HEADING   WRITE HEADING\n         ZAP   DXD_LINE_NBR,P1            SET LINE NBR TO 1\n         DROP  DXDHEAD\n         BR    R8\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT,                  EXITING PRINT MODULE         +\n               DATA1=DXD_LINE_NBR\n         L     R13,4(,R13)                RESTORE REGISTER 13           ASE01670\n         LM    R14,R12,12(R13)            RESTORE ALL OTHER REGISTERS   ASE01680\n         SR    R15,R15                    GIVE GOOD RETURN CODE         ASE01690\n         BR    R14                        RETURN TO CALLER              ASE01700\n* ------------------------------------------------------------------- *\n*              WORK AREAS                                             *\n* ------------------------------------------------------------------- *\nDXD_START      DC    Q(DXDPRT)\n\nP0             DC    P'0'\nP1             DC    P'1'\nP65            DC    P'65'\nPAGE_EDITWORD  DC    X'402020202120'\nHEADING        DS    0C\n               DC    C'1'\n               DC    CL53' '\n               DC    CL15'DISASSEMBLER'\n               DC    CL53' '\n               DC    CL04'PAGE'\nHEADING_PAGE   DC    CL06' '\nHEADINGL       EQU   *-HEADING\n\n               LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDPRT         DSECT\n               DS    18F\nDXD_CSECT      DS    CL8\n\nDXD_LINE_NBR   DS    PL3\nDXD_PAGE_NBR   DS    PL3\nDXD_LINE_WORK  DS    PL3\n\nDXD_UNPK_WORK  DS    CL9\n\nDXD_HEADING    DS    (HEADINGL)C\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               DISCOMM  TYPE=DSECT\n               COPY     DISASMDA\n\n               IFGACB  AM=VSAM\nACB_L          EQU     *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY REGEQU\n               END  DISPRINT\n./ ADD NAME=DISREF   0112-09119-09198-0845-00647-00629-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Determine LABELs referenced                                  *\n*                                                                     *\n*                                                                     *\n*  DISSCAN has examined the CSECT TEXT.                               *\n*  The entire CSECT is now described by AREA blocks.                  *\n*                                                                     *\n*  For any ADCONs                                                     *\n*    Cause a LABEL to be generated at the point referenced            *\n*                                                                     *\n*                                                                     *\n*  For any instruction operands                                       *\n*    Search the BASEs                                                 *\n*    If a BASE is found                                               *\n*      If the area referenced is DATA, cause a LABEL to be            *\n*         generated at the point referenced.                          *\n*      If the area referenced is an instruction, cause a label        *\n*         to be generated at the instruction                          *\n*                                                                     *\n*    If NO BASE is found, search the USINGs                           *\n*      If a USING is found, build a REF block to tie                  *\n*      the instruction to the LABEL within the DSECT.                 *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISREF   CSECT\nDISREF   AMODE 31\nDISREF   RMODE ANY\n         USING DISCOMM,R12\n         USING DISREF,R11\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     INIT0000                       SKIP EYECATCHER\nMODID    DC    CL8'DISREF'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nINIT0000 DS    0H\n         L     R15,COMM_DXD_ADDRESS\n         A     R15,DXD_START\n         ST    R15,8(,R13)\n         ST    R13,4(,R15)\n         LR    R13,R15\n         USING DXDREF,R13\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         ZAP   DXD_LABEL_NBR,P0\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT\n         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01\n         BAL   R10,DEBUG000\nCURRENT  USING AREA_DSECT,R7\nLOCATE   USING AREA_DSECT,R6\nNEW      USING AREA_DSECT,R5\n         USING LABEL_DSECT,R4\n         USING OPCODE_DSECT,R3\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TM    COMM_FLAGS,$COMM_AREA_DEBUG\n         BNO   REF0000\n         L     R2,COMM_DISSPFD\n         USING DISSPFD,R2\n         MVC   SPF_MSG_1(AREAMSG1_L),AREAMSG1\n         L     R1,COMM_ALL_AREA_NEXT\n         L     R15,V_DISXLIST\n         BALR  R14,R15\n         DROP  R2\n         USING BASE_DSECT,R2\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREF0000  DS    0H\n         ITRACE ID=REF0000,                                            +\n               DATA1=COMM_ALL_AREA_NEXT\n         ICM   R7,15,COMM_ALL_AREA_NEXT       FIRST AREA BLOCK\n         BZ    EXIT0000                       NO AREAS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREF0010  DS    0H\n         ITRACE ID=AREA,                                               +\n               DATA1=CURRENT.AREA_BEGIN,                               +\n               DATA2=CURRENT.AREA_TYPE\n         CLI   CURRENT.AREA_TYPE,$AREA_DATA   DATA AREA?\n         BE    REF0020                        YES\n         CLI   CURRENT.AREA_TYPE,$AREA_INSTRUCTION\n         BE    REF0100                        YES\n         ITRACE ID=BAD_TYPE\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*        ADCONs will cause a LABEL to be generated                    *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREF0020  DS    0H\n         ITRACE ID=DATAAREA,                                           +\n               DATA1=CURRENT.AREA_DATA_TYPE\n         CLI   CURRENT.AREA_DATA_TYPE,$DATA_ACON\n         BNE   REF0160                        NO.. GO TO NEXT AREA\n         ITRACE ID=ADCON\n         XC    DXD_DISP,DXD_DISP              INITIALIZE DISP\n         ICM   R1,15,CURRENT.AREA_BEGIN       DISPLACEMENT TO ADCON\n         A     R1,COMM_CSECT_TEXT             PLUS BASE ADDRESS\n         CLI   CURRENT.AREA_LENGTH+3,4        4-BYTE ADCON?\n         BE    REF0030                        YES\n         CLI   CURRENT.AREA_LENGTH+3,3        3-BYTE ADCON?\n         BE    REF0040                        YES\n         CLI   CURRENT.AREA_LENGTH+3,2        2-BYTE ADCON?\n         BE    REF0050                        YES\n         MVC   DXD_DISP+3(1),0(R1)            COPY DISPLACEMENT\n         B     REF0060\nREF0030  DS    0H\n         MVC   DXD_DISP,0(R1)                 COPY DISPLACEMENT\n         B     REF0060\nREF0040  DS    0H\n         MVC   DXD_DISP+1(3),0(R1)            COPY DISPLACEMENT\n         B     REF0060\nREF0050  DS    0H\n         MVC   DXD_DISP+2(2),0(R1)            COPY DISPLACEMENT\nREF0060  DS    0H\n         TM    DXD_DISP,X'80'                 31-BIT MODE BIT ON?\n         BNO   REF0070                        NO\n         OI    CURRENT.AREA_DATA_TYPE,$DATA_31  SET 31-BIT INDICATOR\n         NI    DXD_DISP,X'7F'                 TURN BIT OFF\nREF0070  DS    0H\n         BAL   R8,REF0200                     FIND LABEL WITHIN CSECT\n         MVC   CURRENT.AREA_REF_LABEL1,DXD_LABEL\n         MVC   CURRENT.AREA_REF_DISP1,DXD_REF_DISP\n         B     REF0160                        GO TO NEXT AREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*        The current area is in instruction                           *\n*                                                                     *\n*        If operand 1 or operand 2 has a \"BASE+DISP\" type             *\n*        operand, determine if the \"BASE\" is a base register          *\n*        for the CSECT or for an area defined via a USING.            *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREF0100  DS    0H\n         ICM   R3,15,CURRENT.AREA_OPCODE      OPCODE DEFINITION\n         ITRACE ID=INSTRUCT,                                           +\n               DATA1=OPCODE_MNEMONIC          .. MNEMONIC\n         CLI   OPCODE_FORMAT,$OPCODE_RX       RX TYPE?\n         BE    REF0110                        YES\n         CLI   OPCODE_FORMAT,$OPCODE_SI       SI TYPE?\n         BE    REF0110                        YES\n         CLI   OPCODE_FORMAT,$OPCODE_RS2      BXLE, BXH, ..?\n         BE    REF0110                        YES\n         CLI   OPCODE_FORMAT,$OPCODE_RS3      MASK TYPE?\n         BE    REF0110                        YES\n         CLI   OPCODE_FORMAT,$OPCODE_SS1      SS CHARACTER?\n         BE    REF0110                        YES\n         CLI   OPCODE_FORMAT,$OPCODE_SS2      SS PACKED DECIMAL\n         BE    REF0110                        YES\n         CLI   OPCODE_FORMAT,$OPCODE_SS3      SS MVCK, MVCS, ..?\n         BE    REF0110                        YES\n         CLI   OPCODE_FORMAT,$OPCODE_SS4      SS SRP?\n         BE    REF0110                        YES\n         B     REF0160                        GO TO NEXT AREA\n* ------------------------------------------------------------------- *\n*        Split out the base and displacment for operand 1             *\n* ------------------------------------------------------------------- *\nREF0110  DS    0H\n         L     R1,CURRENT.AREA_BEGIN          INSTRUCTION DISP\n         A     R1,COMM_CSECT_TEXT             PLUS BASE\n         SR    R14,R14\n         ICM   R14,1,2(R1)                    BASE AND NIBBLE 1 OF DISP\n         SRL   R14,4                          SHIFT OUT DISP\n         STC   R14,DXD_BASE                   SAVE BASE\n         XC    DXD_DISP,DXD_DISP              INITIALIZE DISP\n         MVC   DXD_DISP+2(2),2(R1)            COPY DISP FROM OPERAND\n         NI    DXD_DISP+2,X'0F'               REMOVE BASE\n* ------------------------------------------------------------------- *\n*        Search BASES for operand 1                                   *\n* ------------------------------------------------------------------- *\n         ITRACE ID=OP1_REF,                                            +\n               DATA1=DXD_BASE\n         BAL   R10,REF0300                    CHECK BASES\n         LTR   R2,R2                          BASE LOCATED?\n         BZ    REF0120                        NO\n* ------------------------------------------------------------------- *\n*        Operand 1 references a defined base                          *\n*        Locate the AREA block                                        *\n* ------------------------------------------------------------------- *\n         ICM   R1,15,BASE_DISP                DISP BASE REFERS TO\n         A     R1,DXD_DISP                    PLUS DISP FROM OPERAND\n         ST    R1,DXD_DISP                    DISP TO SEARCH FOR\n         ITRACE ID=BASE1,                                              +\n               DATA1=DXD_BASE,                .. BASE REG              +\n               DATA2=DXD_DISP                 .. DISP REFERENCED\n         BAL   R8,REF0200                     LOCATE REFERENCED AREA\n         MVC   CURRENT.AREA_REF_LABEL1,DXD_LABEL\n         MVC   CURRENT.AREA_REF_DISP1,DXD_REF_DISP\n         B     REF0130\n* ------------------------------------------------------------------- *\n*        Determine if operand 1 references a defined USING            *\n* ------------------------------------------------------------------- *\nREF0120  DS    0H\n         ITRACE ID=REF0120\n         BAL   R10,REF0400                    CHECK USINGS\n         LTR   R2,R2                          USING FOUND?\n         BZ    REF0130                        NO\n         ITRACE ID=REF0120+\n         MVC   CURRENT.AREA_REF_LABEL1,DXD_LABEL\n         MVC   CURRENT.AREA_REF_DISP1,DXD_REF_DISP\n* ------------------------------------------------------------------- *\n*        Determine if instruction has a BDDD type operand 2           *\n* ------------------------------------------------------------------- *\nREF0130  DS    0H\n         ITRACE ID=REF0130\n         CLI   OPCODE_FORMAT,$OPCODE_SS1      CHARACTER?\n         BE    REF0140                        YES\n         CLI   OPCODE_FORMAT,$OPCODE_SS2      PACKED DECIMAL?\n         BE    REF0140                        YES\n         CLI   OPCODE_FORMAT,$OPCODE_SS3      MVCK, MVCS, MVCP?\n         BE    REF0140                        YES\n         B     REF0160                        OTHERWIZE GO TO NEXT AREA\nREF0140  DS    0H\n         L     R1,CURRENT.AREA_BEGIN          INSTRUCTION DISP\n         A     R1,COMM_CSECT_TEXT             PLUS BASE\n         SR    R14,R14\n         ICM   R14,1,4(R1)                    BASE AND NIBBLE 1 OF DISP\n         SRL   R14,4                          SHIFT OUT DISP\n         STC   R14,DXD_BASE                   SAVE BASE\n         XC    DXD_DISP,DXD_DISP              INITIALIZE DISP\n         MVC   DXD_DISP+2(2),4(R1)            COPY DISP FROM OPERAND\n         NI    DXD_DISP+2,X'0F'               REMOVE BASE\n* ------------------------------------------------------------------- *\n*        Search BASES for operand 2                                   *\n* ------------------------------------------------------------------- *\n         ITRACE ID=OP2_REF,                                            +\n               DATA1=DXD_BASE\n         BAL   R10,REF0300                    CHECK BASES\n         LTR   R2,R2                          BASE LOCATED?\n         BZ    REF0150                        NO\n* ------------------------------------------------------------------- *\n*        Operand 2 references a defined base                          *\n* ------------------------------------------------------------------- *\n         ITRACE ID=BASE2\n         ICM   R1,15,BASE_DISP                DISP BASE REFERS TO\n         A     R1,DXD_DISP                    PLUS DISP FROM OPERAND\n         ST    R1,DXD_DISP                    DISP TO SEARCH FOR\n         BAL   R8,REF0200                     LOCATE REFERENCED AREA\n         MVC   CURRENT.AREA_REF_LABEL2,DXD_LABEL\n         MVC   CURRENT.AREA_REF_DISP2,DXD_REF_DISP\n         B     REF0160\n* ------------------------------------------------------------------- *\n*        Determine if operand 2 references a defined USING            *\n* ------------------------------------------------------------------- *\nREF0150  DS    0H\n         ITRACE ID=REF0150\n         BAL   R10,REF0400                    CHECK USINGS\n         LTR   R2,R2                          USING FOUND?\n         BZ    REF0160                        NO\n         ITRACE ID=REF0150+\n         MVC   CURRENT.AREA_REF_LABEL2,DXD_LABEL\n         MVC   CURRENT.AREA_REF_DISP2,DXD_REF_DISP\n* ------------------------------------------------------------------- *\n*        Go to next AREA                                              *\n* ------------------------------------------------------------------- *\nREF0160  DS    0H\n         ITRACE ID=NEXTAREA,                                           +\n               RDATA1=R7,                                              +\n               DATA2=CURRENT.AREA_NEXT\n         ICM   R7,15,CURRENT.AREA_NEXT        NEXT AREA\n         BNZ   REF0010                        LOOP\n         B     EXIT0000                       ALL DONE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Locate referenced disp within CSECT                          *\n*                                                                     *\n*        If the area referenced is an instruction                     *\n*           GETMAIN a LABEL block and                                 *\n*           set DXD_LABEL to the address of the LABEL block           *\n*           set DXD_LABEL_DISP to disp from the label                 *\n*                                                                     *\n*                                                                     *\n*        If the area referenced is a DATA area                        *\n*           if the area is a ACON, QCON, VCON, or CXD                 *\n*              GETMAIN a LABEL block and set AREA_LABEL               *\n*              set DXD_LABEL to the address of the LABEL block        *\n*              set DXD_LABEL_DISP to disp from the label              *\n*           otherwise                                                 *\n*              'split' the data into two parts                        *\n*               . one 'up to' the disp referenced,                    *\n*               . second starting at the disp referenced              *\n*                 - GETMAIN a LABEL block for 'second' area           *\n*                 - set DXD_LABEL to the new LABEL block              *\n*                 - set DXD_LABEL_DISP to zero                        *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREF0200  DS    0H\n         ITRACE ID=REF0200,                                            +\n               DATA1=DXD_DISP                 DISP FROM BASE\n         XC    DXD_LABEL,DXD_LABEL\n         XC    DXD_REF_DISP,DXD_REF_DISP\n         ICM   R6,15,COMM_ALL_AREA_NEXT       FIRST AREA\n         BZR   R8                             NO AREAS\nREF0210  DS    0H\n*        ITRACE ID=LOC_AREA,\n*              DATA1=DXD_DISP,\n*              DATA2=LOCATE.AREA_BEGIN\n         CLC   DXD_DISP,LOCATE.AREA_END       DISP IN THIS AREA?\n         BNH   REF0220                        YES\n         ICM   R6,15,LOCATE.AREA_NEXT         NEXT AREA\n         BNZ   REF0210                        CHECK NEXT AREA\n         BR    R8\nREF0220  DS    0H\n         ITRACE ID=FND_AREA,                                           +\n               DATA1=LOCATE.AREA_BEGIN,                                +\n               DATA2=LOCATE.AREA_TYPE\n         CLC   LOCATE.AREA_BEGIN,DXD_DISP     'DIRECT HIT'?\n         BE    REF0240                        YES\n         CLI   LOCATE.AREA_TYPE,$AREA_INSTRUCTION\n         BE    REF0240                        YES\n         TM    LOCATE.AREA_DATA_TYPE,$DATA_ACON\n         BO    REF0240                        YES\n         TM    LOCATE.AREA_DATA_TYPE,$DATA_VCON\n         BO    REF0240                        YES\n         TM    LOCATE.AREA_DATA_TYPE,$DATA_CXD\n         BO    REF0240                        YES\n         TM    LOCATE.AREA_DATA_TYPE,$DATA_Q\n         BO    REF0240                        YES\n         ITRACE ID=SPLIT,                                              +\n               RDATA1=R6,                                              +\n               DATA2=LOCATE.AREA_BEGIN\n         GETMAIN RU,                                                   +\n               LV=AREA_DSECT_L,                                        +\n               LOC=ANY\n         LR    R5,R1\n         ITRACE ID=NEW,                                                +\n               RDATA1=R5\n         MVC   NEW.AREA_DSECT(AREA_DSECT_L),LOCATE.AREA_DSECT\n         ST    R5,LOCATE.AREA_NEXT\n         ST    R6,NEW.AREA_PREV\n         L     R14,DXD_DISP                   DISP SEARCHED FOR\n         BCTR  R14,0                          MINUS 1\n         STCM  R14,15,LOCATE.AREA_END         SET END DISP\n         ICM   R15,15,LOCATE.AREA_BEGIN       BEGIN DISP\n         SR    R14,R15                        COMPUTE LENGTH\n         LA    R14,1(,R14)                    TRUE LENGTH\n         STCM  R14,15,LOCATE.AREA_LENGTH      SET LENGTH\n         ICM   R14,15,NEW.AREA_END            END DISP\n         L     R15,DXD_DISP                   DISP SEARCHED FOR\n         STCM  R15,15,NEW.AREA_BEGIN          SET BEGIN DISP\n         SR    R14,R15                        COMPUTE LENGTH\n         LA    R14,1(,R14)                    TRUE LENGTH\n         STCM  R14,15,NEW.AREA_LENGTH         SET LENGTH\n         XC    DXD_LABEL_DISP,DXD_LABEL_DISP  DISP FROM LABEL IS ZERO\n         MVI   LABEL_TYPE,$LABEL_DATA         LABEL IS AT DATA AREA\n         ICM   R1,15,NEW.AREA_NEXT            NEXT BLOCK ON CHAIN\n         BZ    REF0230                        NO 'NEXT' BLOCK\nNEXT     USING AREA_DSECT,R1\n         ST    R5,NEXT.AREA_PREV              SET PREV IN NEXT\nREF0230  DS    0H\n*        ICM   R4,15,NEW.AREA_LABEL           LABEL GETMAINED?\n*        BNZ   REF0250                        YES\n         BAL   R9,REF0270                     GETMAIN LABEL BLOCK\n         MVC   NEW.AREA_LABEL,DXD_LABEL       SET LABEL BLOCK ADDR\n         XC    DXD_REF_DISP,DXD_REF_DISP      SET DISP FROM LABEL\n         ITRACE ID=AREAS,                                              +\n               DATA1=LOCATE.AREA_BEGIN,                                +\n               DATA2=NEW.AREA_BEGIN\n         BR    R8\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*        An instruction or ADCON is referencing this area.            *\n*        Either the reference is to the first byte of this AREA       *\n*        or this is an AREA that cannot be 'split'.                   *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREF0240  DS    0H\n         ITRACE ID=REF0240,                                            +\n               DATA1=LOCATE.AREA_BEGIN,                                +\n               RDATA2=R6\n         L     R1,DXD_DISP                    DISP REFERENCED\n         ICM   R0,15,LOCATE.AREA_BEGIN        AREA BEGIN DISP\n         ST    R0,DXD_LABEL_DISP              DISP TO LABEL\n         ICM   R4,15,LOCATE.AREA_LABEL        LABEL GETMAINED?\n         BNZ   REF0250                        YES\n         BAL   R9,REF0270                     GETMAIN LABEL BLOCK\n         MVI   LABEL_TYPE,$LABEL_INSTR        LABEL AT AN INSTRUCTION\n         ITRACE ID=AREA_LBL,                                           +\n               RDATA1=R6,                                              +\n               DATA2=DXD_LABEL\n         ST    R4,LOCATE.AREA_LABEL           SET LABEL BLOCK ADDR\nREF0250  DS    0H\n         ITRACE ID=REF0250,                                            +\n               RDATA1=R4\n         ST    R4,DXD_LABEL                   RETURN LABEL ADDRESS\nREF0260  DS    0H\n         L     R1,DXD_DISP                    DISP IN INSTRUCTION\n         ICM   R0,15,LABEL_DISP               DISP TO LABEL\n         SR    R1,R0                          DISP FROM LABAL\n         ST    R1,DXD_REF_DISP                SAVE DISP\n         BR    R8\n* ------------------------------------------------------------------- *\n*        GETMAIN new LABEL block                                      *\n* ------------------------------------------------------------------- *\nREF0270  DS    0H\n         GETMAIN RU,                                                   +\n               LV=LABEL_DSECT_L,                                       +\n               LOC=ANY\n         LR    R4,R1\n         XC    LABEL_DSECT(LABEL_DSECT_L),LABEL_DSECT\n         MVC   LABEL_EYE,LABEL_ID             IDENTIFY BLOCK\n         MVC   LABEL_NAME(4),COMM_PREFIX      SET PREFIX\n         MVC   LABEL_DISP,LOCATE.AREA_BEGIN   DISP TO THIS LABEL\n         ST    R4,DXD_LABEL                   SAVE ADDR\n         ITRACE ID=NEWLABEL,                                           +\n               RDATA1=R4,                                              +\n               RDATA2=R9\n         BR    R9\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*     Search defined BASEs                                            *\n*     Base is in DXD_BASE                                             *\n*     Displacement from the BASE is in DXD_DISP                       *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREF0300  DS    0H\n         ITRACE ID=REF0300,                                            +\n               DATA1=COMM_BASE_NEXT,                                   +\n               DATA2=DXD_BASE\n         ICM   R2,15,COMM_BASE_NEXT           1ST BASE\n         BZ    REF0340                        NO BASES DEFINED\nREF0310  DS    0H\n         ITRACE ID=REF0310,                                            +\n               DATA1=BASE_BEGIN\n         OC    BASE_BEGIN(8),BASE_BEGIN       BEGIN/END DISP(S)?\n         BZ    REF0320                        NO\n         CLC   BASE_END,CURRENT.AREA_BEGIN    IN EFFECT HERE?\n         BL    REF0330                        NO\n         CLC   BASE_BEGIN,CURRENT.AREA_END    IN EFFECT HERE?\n         BH    REF0330                        NO\nREF0320  DS    0H\n         ITRACE ID=REF0320\n         CLC   BASE_REGISTER,DXD_BASE         CORRECT REGISTER?\n         BER   R10                            YES\nREF0330  DS    0H\n         ICM   R2,15,BASE_NEXT                NEXT BASE\n         BNZ   REF0310\nREF0340  DS    0H\n         ITRACE ID=NO_BASE\n         BR    R10                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*     Search defined USINGs                                           *\n*     Base is in DXD_BASE                                             *\n*     Displacement from the BASE is in DXD_DISP                       *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREF0400  DS    0H\n         ITRACE ID=REF0400,                                            +\n               DATA1=COMM_USING_NEXT\n         ICM   R2,15,COMM_USING_NEXT          1ST USING\n         BZ    REF0480                        NO USINGS DEFINED\n         USING USING_DSECT,R2\nREF0410  DS    0H\n         OC    USING_BEGIN(8),USING_BEGIN     BEGIN OR END DISP GIVEN?\n         BZ    REF0420                        NO\n         CLC   USING_END,CURRENT.AREA_BEGIN   IN EFFECT HERE?\n         BL    REF0470                        NO\n         CLC   USING_BEGIN,CURRENT.AREA_END   IN EFFECT HERE?\n         BH    REF0470                        NO\nREF0420  DS    0H\n         CLC   USING_REGISTER,DXD_BASE        CORRECT REGISTER?\n         BNE   REF0470                        NO\n         ITRACE ID=FNDUSING,                                           +\n               DATA1=USING_LABEL_ADDR\n         MVC   DXD_EFFECTIVE_DISP,DXD_DISP    COPY DISP\n         ICM   R4,15,USING_LABEL_ADDR         STARTING LABEL?\n         BZ    REF0440                        NO\n         ITRACE ID=USNGLABL,                                           +\n               DATA1=USING_DSECT_LABEL,       .. LABEL WITHIN DSECT    +\n               DATA2=USING_DISP               .. LABEL'S DISP\n         ICM   R0,15,LABEL_DISP               DISP TO START LABEL\n         A     R0,DXD_DISP                    PLUS DISP IN INSTRUCTION\n         ST    R0,DXD_EFFECTIVE_DISP          EFFECTIVE DISP\nREF0440  DS    0H\n         ITRACE ID=EFF_DISP,                                           +\n               DATA1=DXD_EFFECTIVE_DISP\n         L     R1,USING_DSECT_ADDR            DSECT ADDRESS\n         USING DSECT_DSECT,R1\n         L     R4,DSECT_LABEL_NEXT            FIRST LABEL\nREF0450  DS    0H\n         CLC   LABEL_DISP,DXD_EFFECTIVE_DISP  LABEL DISP > EFFECTIVE?\n         BNH   REF0460                        NO\n         ICM   R4,15,LABEL_NEXT               NEXT LABEL\n         BNZ   REF0450                        KEEP SEARCHING\nREF0460  DS    0H\n         ST    R4,DXD_LABEL                   RETURN LABEL ADDRESS\n         L     R1,DXD_EFFECTIVE_DISP          EFFECTIVE DISP\n         ICM   R0,15,LABEL_DISP\n         SR    R1,R0                          MINUS DISP TO LABEL\n         ST    R1,DXD_REF_DISP                DISP FROM LABEL\n         BR    R10\nREF0470  DS    0H\n         ICM   R2,15,USING_NEXT               NEXT BASE\n         BNZ   REF0410\nREF0480  DS    0H\n         ITRACE ID=NOUSING\n         BR    R10                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDEBUG000 DS    0H\n         CLI   COMM_RUN_MODE,$COMM_RUN_TSO    TSO MODE?\n         BER   R10                            YES\n         L     R15,V_DISDEBUG\n         BALR  R14,R15\n         BR    R10\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=BAD_REF\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ICM   R7,15,COMM_ALL_AREA_NEXT       FIRST AREA BLOCK\n         ITRACE ID=GENLABLS,                                           +\n               RDATA1=R7\n         LTR   R7,R7                          ANY LABEL BLOCKS?\n         BZ    EXIT0040                       NO\n         ZAP   DXD_LABEL_NBR,P0               INIT LABEL NBR\nEXIT0010 DS    0H\n         ITRACE ID=LABEL,                                              +\n               RDATA1=R7,                                              +\n               DATA2=CURRENT.AREA_LABEL\n         ICM   R4,15,CURRENT.AREA_LABEL       LABEL PRESENT?\n         BZ    EXIT0030                       NO\n         AP    DXD_LABEL_NBR,P10              PLUS 10\n         MVC   LABEL_NAME,COMM_BLANKS         INIT LABEL\n         MVC   LABEL_NAME(8),=X'F020202020202120'\n         ED    LABEL_NAME(8),DXD_LABEL_NBR    EDIT LABEL NUMBER\n         CLI   CURRENT.AREA_TYPE,$AREA_DATA   DATA AREA?\n         BE    EXIT0020\n         SR    R1,R1\n         ICM   R1,3,COMM_PREFIX_LENGTH        PREFIX LENGTH\n         BZ    EXIT0015                       SHOULD NOT HAPPEN\n         BCTR  R1,0\n         EX    R1,PREFIX_MVC                  COPY PREFIX\n         B     EXIT0030\nEXIT0015 DS    0H\n         MVI   LABEL_NAME,C'L'                DEFAULT TO 'L'\n         B     EXIT0030\nEXIT0020 DS    0H\n         MVC   LABEL_NAME(4),DATA             SET PREFIX TO 'DATA'\nEXIT0030 DS    0H\n         ICM   R7,15,CURRENT.AREA_NEXT        NEXT AREA\n         BNZ   EXIT0010\nEXIT0040 DS    0H\n         TM    COMM_FLAGS,$COMM_AREA_DEBUG\n         BNO   EXIT0050\n         L     R2,COMM_DISSPFD\n         USING DISSPFD,R2\n         MVC   SPF_MSG_1(AREAMSG2_L),AREAMSG2\n         L     R1,COMM_ALL_AREA_NEXT\n         L     R15,V_DISXLIST\n         BALR  R14,R15\n         DROP  R2\nEXIT0050 DS    0H\n         ITRACE ON\n         ITRACE ID=EXIT\n         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02\n         BAL   R10,DEBUG000\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nPREFIX_MVC MVC LABEL_NAME(0),COMM_PREFIX\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START DC   Q(DXDREF)\n\nP0       DC    P'0'\nP10      DC    P'10'\nDATA     DC    CL4'DATA'\nLABEL_ID DC    CL8'LABEL'\n\nMSG01    DS    0C\n         DC    C'DISREF01I    Entering DISREF'\nMSG01_L  EQU   *-MSG01\n\nMSG02    DS    0C\n         DC    C'DISREF02I    Exiting DISREF'\nMSG02_L  EQU   *-MSG02\n\nAREAMSG1 DS    0C\n         DC    C'ALL areas at entry to DISREF'\nAREAMSG1_L EQU *-AREAMSG1\n\nAREAMSG2 DS    0C\n         DC    C'ALL areas at exit from DISREF'\nAREAMSG2_L EQU *-AREAMSG2\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDREF          DSECT\n                DS   18F\nDXD_CSECT       DS   CL8\n\nDXD_REF_DISP    DS   A                  DISP REFERENCED\nDXD_LABEL       DS   A                  LABEL BLOCK ADDRESS\nDXD_LABEL_DISP  DS   A                  DISP FROM LABEL\n\nDXD_EFFECTIVE_DISP   DS  A\n\nDXD_BASE        DS   X                  BASE FOR CURRENT OPERAND\nDXD_DISP        DS   A                  DISP FROM WORK BASE\n\nDXD_LABEL_NBR   DS   PL4                LABEL NBR\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         DISCOMM  TYPE=DSECT\n         DISSPFD  TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY     DISASMDA\n\n         IFGACB   AM=VSAM\nACB_L    EQU      *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY REGEQU\n         END  DISREF\n./ ADD NAME=DISRLD   0101-09119-09198-0845-00263-00263-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: DISRLD                                                *\n*                                                                     *\n*  Function:                                                          *\n*   Obtain the requested CSECT's RLD info                             *\n*                                                                     *\n*   DISBIND has already established a dialog                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISRLD   CSECT\nDISRLD   AMODE 31\nDISRLD   RMODE ANY\n         USING DISRLD,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R11,R15               SET BASE REG\n         B     MOD0000               SKIP EYECATCHER\nMODID    DC    CL8'DISRLD'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS  WORK AREA\n         A     R15,DXD_START         PLUS DISP TO OUR PORTION\n         ST    R13,4(,R15)           CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R15,8(,R13)           CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R15               SET SAVE AREA ADDRESS\n         USING DXDRLD,R13\n         ITRACE ID=ENTRY\n* ------------------------------------------------------------------- *\n*        Obtain and initialize RLD buffer                             *\n* ------------------------------------------------------------------- *\n         ITRACE ID=GET_SECT,                                           +\n               DATA1=COMM_CSECT\n         IEWBUFF FUNC=GETBUF,                                          +\n               PREFIX=IBMRLD,                                          +\n               TYPE=RLD\n         ST    R8,DXD_BUFFER\n         ITRACE ID=INIT_RLD,                                           +\n               RDATA1=R8,                                              +\n               RDATA2=R7\n         IEWBUFF FUNC=INITBUF,                                         +\n               PREFIX=IBMRLD,                                          +\n               TYPE=RLD\n         XC    DXD_BINDER_CURSOR,DXD_BINDER_CURSOR\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRLD0000  DS    0H\n         ITRACE ID=GETD_RLD,                                           +\n               DATA1=COMM_CSECT\n         L     R8,DXD_BUFFER\n         LA    R7,IBMRLD_RLDH_END\n         IEWBIND FUNC=GETD,                                            +\n               VERSION=5,                                              +\n               WORKMOD=COMM_DIALOG_WORKMOD,                            +\n               CLASS=B_RLD,                                            +\n               SECTION=COMM_CSECT_NAME_LENGTH,                         +\n               AREA=IBMRLD_IEWBRLD,                                    +\n               CURSOR=DXD_BINDER_CURSOR,                               +\n               COUNT=DXD_RLD_RETURNED,                                 +\n               RETCODE=DXD_RETURN_CODE,                                +\n               RSNCODE=DXD_REASON_CODE,                                +\n               MF=(E,DXD_IEWBIND,COMPLETE)\n         ITRACE ID=GETD_RC,                                            +\n               DATA1=DXD_RETURN_CODE,                                  +\n               DATA2=DXD_REASON_CODE\n         CLC   DXD_RETURN_CODE,F8\n         BH    ERR0010\n         BE    ERR0020                             NO DATA\n         CLC   DXD_RETURN_CODE,F4\n         BL    RLD0020\n         CLC   DXD_REASON_CODE,X_83000800\n         BE    RLD0020\n         CLC   DXD_REASON_CODE,X_83000801\n         BE    EXIT0000\nRLD0020  DS    0H\n         ICM   R9,15,DXD_RLD_RETURNED\n         LA    R7,IBMRLD_RLDH_END\n         USING IBMRLD_RLD_ENTRY,R7\nRLD0030  DS    0H\n         ITRACE ID=RLD,                                                +\n               RDATA1=R7,                                              +\n               RDATA2=R9\n         MVC   DXD_CSECT_NAME,COMM_BLANKS          CLEAR CSECT NAME\n         LH    R1,IBMRLD_RLD_RESIDENT_CHARS\n         L     R2,IBMRLD_RLD_RESIDENT_PTR\n         BCTR  R1,0\n         EX    R1,MVC_01                           COPY SECTION NAME\n         CLC   COMM_CSECT,DXD_CSECT_NAME           CORRECT CSECT?\n         BNE   RLD0140                             NO\n         GETMAIN RU,                                                   +\n               LV=AREA_DSECT_L,                                        +\n               LOC=ANY\n         LR    R6,R1                               COPY ADDRESS\n         ITRACE ID=NEW_RLD,                                            +\n               RDATA1=R6\nNEW      USING AREA_DSECT,R6\n         XC    NEW.AREA_DSECT(AREA_DSECT_L),NEW.AREA_DSECT\n         MVC   NEW.AREA_EYE,AREA_ID\n         MVI   NEW.AREA_TYPE,$AREA_DATA            INDICATE 'DATA' AREA\n         CLI   IBMRLD_RLD_TYPE,X'10'               VCON?\n         BE    RLD0040                             YES\n         CLI   IBMRLD_RLD_TYPE,X'20'               ACON?\n         BE    RLD0050                             YES\n         CLI   IBMRLD_RLD_TYPE,X'30'               PSEUDO AREA DISP (Q)\n         BE    RLD0060                             YES\n         CLI   IBMRLD_RLD_TYPE,X'40'               PSEUDO SIZE (CXD)\n         BE    RLD0070                             YES\n         DC    H'0'\nRLD0040  DS    0H\n         MVI   NEW.AREA_DATA_TYPE,$DATA_VCON       ITEM IS A VCON\n         B     RLD0080\nRLD0050  DS    0H\n         MVI   NEW.AREA_DATA_TYPE,$DATA_ACON       ITEM IS AN ADCON\n         B     RLD0080\nRLD0060  DS    0H\n         MVI   NEW.AREA_DATA_TYPE,$DATA_Q          ITEM IS A \"Q\"\n         B     RLD0080\nRLD0070  DS    0H\n         MVI   NEW.AREA_DATA_TYPE,$DATA_CXD        ITEM IS A \"CXD\"\nRLD0080  DS    0H\n         MVC   NEW.AREA_LENGTH+2(2),IBMRLD_RLD_ADCON_LENG\n         MVC   NEW.AREA_BEGIN,IBMRLD_RLD_RES_OFFSET\n         ICM   R0,15,NEW.AREA_BEGIN\n         ICM   R1,15,NEW.AREA_LENGTH\n         AR    R1,R0\n         BCTR  R1,0\n         STCM  R1,15,NEW.AREA_END\n         TM    IBMRLD_RLD_BIND_ATTR,IBMRLD_RLD_DIRECTION\n         BO    RLD0090\n         OI    NEW.AREA_FLAGS,$AREA_RLD_PLUS\n         B     RLD0100\nRLD0090  DS    0H\n         OI    NEW.AREA_FLAGS,$AREA_RLD_MINUS\nRLD0100  DS    0H\n         LH    R1,IBMRLD_RLD_TARGET_CHARS\n         CH    R1,=Y(L'AREA_RLD_NAME)\n         BNH   RLD0110\n         LH    R1,=Y(L'AREA_RLD_NAME)\nRLD0110  DS    0H\n         L     R2,IBMRLD_RLD_TARGET_PTR\n         BCTR  R1,0\n         MVC   NEW.AREA_RLD_NAME,COMM_BLANKS\n         EX    R1,MVC_02\n* ------------------------------------------------------------------- *\n*     Add the new block to RLD area chain                             *\n* ------------------------------------------------------------------- *\n         LA    R1,COMM_RLD_AREA_PREV               RLD ANCHOR\nPREV     USING AREA_DSECT,R1\nRLD0120  DS    0H\n         ICM   R2,15,PREV.AREA_NEXT\n         BZ    RLD0130\n         LR    R1,R2                               COPY ADDRESS\n         B     RLD0120                             COPY RLD BLOCK ADDR\nRLD0130  DS    0H\n         ST    R1,NEW.AREA_PREV                    CHAIN PREV TO NEW\n         ST    R6,PREV.AREA_NEXT                   CHAIN NEW TO PREV\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRLD0140  DS    0H\n         LA    R7,IBMRLD_RLD_END\n         BCT   R9,RLD0030\n         CLC   DXD_REASON_CODE,X_83000800\n         BNE   RLD0000\n* ------------------------------------------------------------------- *\n*        Free the buffer                                              *\n* ------------------------------------------------------------------- *\n         L     R8,DXD_BUFFER\n         IEWBUFF FUNC=FREEBUF,                                         +\n               PREFIX=IBMRLD,                                          +\n               TYPE=RLD\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMVC_01   MVC   DXD_CSECT_NAME(0),0(R2)\nMVC_02   MVC   NEW.AREA_RLD_NAME(0),0(R2)\n         DROP  NEW\n* --------------------------------------------------------------------*\n*                                                                     *\n* --------------------------------------------------------------------*\nERR0010  DS    0H\n         DC    H'1'\nERR0020  DS    0H\n         DC    H'2'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         ICM   R1,15,COMM_RLD_AREA_NEXT\n         BZ    EXIT0010\n         XC    PREV.AREA_PREV,PREV.AREA_PREV\nEXIT0010 DS    0H\n         L     R13,4(,R13)           RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC   Q(DXDRLD)\nF4            DC   F'4'\nF8            DC   F'8'\nB_RLD         DC   XL2'5',C'B_RLD'\nX_83000800    DC   X'83000800'\nX_83000801    DC   X'83000801'\nAREA_ID       DC   CL8'AREA'\nTYPE_ADCON    DC   CL5'ADCON'\nTYPE_VCON     DC   CL5'VCON'\nTYPE_Q        DC   CL5'Q'\nTYPE_CXD      DC   CL5'CXD'\n\n         IEWBUFF FUNC=MAPBUF,                                          +\n               TYPE=RLD,                                               +\n               PREFIX=IBMRLD,                                          +\n               HEADREG=R8,                                             +\n               ENTRYREG=R7,                                            +\n               SIZE=50,                                                +\n               VERSION=5\n\n              IEWBIND MF=(L,IEWBIND_I)\nIEWBIND_L     EQU  *-IEWBIND_I\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDRLD            DSECT\n                  DS   18F\nDXD_CSECT         DS   CL8\n\nDXD_RETURN_CODE   DS   F\n\nDXD_REASON_CODE   DS   F\n\nDXD_BUFFER        DS   A\n\nDXD_BINDER_CURSOR DS   F\nDXD_RLD_RETURNED  DS   F\n\nDXD_CHAIN_POINT   DS   A\n\nDXD_CSECT_NAME    DS   CL8\n\nDXD_IEWBIND       DS   0F,(IEWBIND_L)X\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n                  DISCOMM  TYPE=DSECT\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n                  COPY     DISASMDA\n\n                  IFGACB   AM=VSAM\nACB_L             EQU      *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY REGEQU\n         END  DISRLD\n./ ADD NAME=DISRLD2  0100-09119-09119-0917-00357-00357-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: DISRLD2                                               *\n*                                                                     *\n*  Function:                                                          *\n*   Add new RLD items to the AREA chain                               *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   There are 6 possiblities                                          *\n*                                                                     *\n*      1) the RLD item is a new AREA                                  *\n*      2) the RLD item is exactly the same as a DATA item.            *\n*         In this case the 'type' is changed to reflect the RLD type  *\n*         and the data type is set.                                   *\n*      3) A DATA item spans an RLD item.                              *\n*         This requires \"breaking\" the DATA item into two parts.      *\n*         The end result is                                           *\n*           a) a user data area that starts at the disp on the DATA   *\n*              statement and ends immediately before the RLD item     *\n*           b) the RLD item itself                                    *\n*           c) a user data area that starts immediately after the     *\n*              RLD item and ends on the disp on the DATA statement    *\n*      4) An RLD item overlaps the first part of a user DATA area.    *\n*         In this case the beginning displacement in the user area    *\n*         is changed to reference the byte immediately following the  *\n*         RLD item.                                                   *\n*      5) an RLD item overlaps the end of a DATA item.                *\n*         In this case the ending displacement in the user area is    *\n*         changed to reference the byte immediately preceding the     *\n*         RLD item.                                                   *\n*      6) an RLD item overlaps the entire DATA item.                  *\n*         In this case the AREA block is removed from the AREA        *\n*         block chain.                                                *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISRLD2  CSECT\nDISRLD2  AMODE 31\nDISRLD2  RMODE ANY\n         USING DISRLD2,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R11,R15               SET BASE REG\n         B     MOD0000               SKIP EYECATCHER\nMODID    DC    CL8'DISRLD2'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS  WORK AREA\n         A     R15,DXD_START         PLUS DISP TO OUR PORTION\n         ST    R13,4(,R15)           CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R15,8(,R13)           CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R15               SET SAVE AREA ADDRESS\n         USING DXDRLD2,R13\n         ITRACE ID=ENTRY\n         LR    R10,R1\nRLD      USING AREA_DSECT,R10        DEFINE BASE\nCURRENT  USING AREA_DSECT,R8         DEFINE BASE\nNEW      USING AREA_DSECT,R7         DEFINE BASE\n         ITRACE ID=NEW,                                                +\n               RDATA1=R10,                                             +\n               DATA2=RLD.AREA_BEGIN\nRLD0000  DS    0H\n         ITRACE ID=RLD0000\n         LA    R9,COMM_AREA_NEXT     AREA BLOCK CHAIN POINT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Top of main loop                                             *\n*                                                                     *\n*                                                                     *\n*   This is not the most scientific, sophisticated process.           *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRLD0010  DS    0H\n         ICM   R8,15,0(R9)                         NEXT BLOCK ON CHAIN\n         BZ    RLD0070                             END OF CHAIN\n         ITRACE ID=RLD0010,                                            +\n               DATA1=CURRENT.AREA_BEGIN,           .. BEGIN/END DISPS  +\n               DATA2=RLD.AREA_BEGIN                .. BEGIN/END DISPS\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Check for identical disps                                    *\n*                                                                     *\n*      Criteria                                                       *\n*        RLD begin disp = current begin disp                          *\n*        RLD end disp   = current end disp                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CLC   RLD.AREA_BEGIN,CURRENT.AREA_BEGIN   SAME BEGIN?\n         BNE   RLD0020                             NO\n         CLC   RLD.AREA_BEGIN,CURRENT.AREA_END     SAME END?\n         BNE   RLD0020                             NO\n* ------------------------------------------------------------------- *\n*        current area and RLD item describle the same area            *\n*        Remove the user area                                         *\n* ------------------------------------------------------------------- *\n         ITRACE ID=DUP,                                                +\n               RDATA1=R8\n         MVI   COMM_MSG_ID,1\n         MVC   COMM_INFO_01(4),CURRENT.AREA_BEGIN  AREA BEGIN DISP\n         MVC   COMM_INFO_02(4),CURRENT.AREA_END    AREA END DISP\n         BAL   R6,MSG0000                          PRINT MESSAGE\n         MVC   0(4,R9),CURRENT.AREA_NEXT           UNCHAIN CURRENT\n         FREEMAIN RU,                                                  +\n               A=(R8),                                                 +\n               LV=AREA_DSECT_L\n         B     RLD0000                             CHECK AREAS AGAIN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Check for overlapping first part of USER area                *\n*                                                                     *\n*     Criteria                                                        *\n*        RLD begin disp must be at or lower than user area begin      *\n*        RLD end disp must be at or higher than user area begin       *\n*        RLD end disp must be lower than user area end disp           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRLD0020  DS    0H\n         ITRACE ID=RLD0020\n         CLC   RLD.AREA_BEGIN,CURRENT.AREA_BEGIN   RLD BEGIN ABOVE?\n         BH    RLD0030                             YES\n         CLC   RLD.AREA_END,CURRENT.AREA_BEGIN     END BELOW BEGIN?\n         BL    RLD0030                             YES\n         CLC   RLD.AREA_END,CURRENT.AREA_END       END BELOW END?\n         BNL   RLD0030                             NO\n* ------------------------------------------------------------------- *\n*        RLD item overlaps first part of user defined DATA area       *\n*        change start disp in USER area                               *\n*        re-compute length of user area                               *\n* ------------------------------------------------------------------- *\n         ITRACE ID=OLAP_1ST\n         MVI   COMM_MSG_ID,2                       SET MESSAGE ID\n         MVC   COMM_INFO_01(4),RLD.AREA_BEGIN      COPY BEGIN DISP\n         MVC   COMM_INFO_02(4),RLD.AREA_END        COPY END DISP\n         MVC   COMM_INFO_03(4),CURRENT.AREA_BEGIN  COPY BEGIN DISP\n         MVC   COMM_INFO_04(4),CURRENT.AREA_END    COPY END DISP\n         BAL   R6,MSG0000                          ISSUE MESSAGE\n         ICM   R14,15,RLD.AREA_END                 RLD ITEM END DISP\n         LA    R14,1(,R14)                         PLUS 1\n         STCM  R14,15,CURRENT.AREA_BEGIN           CHANGE BEGIN DISP\n         ICM   R15,15,CURRENT.AREA_END             AREA END DISP\n         SR    R15,R14                             COMPUTE LENGTH\n         LA    R15,1(,R15)                         TRUE LENGTH\n         STCM  R15,15,CURRENT.AREA_LENGTH          SET LENGTH\n         B     RLD0000                             RE-DRIVE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Check for RLD item 'in the middle' of a USER area            *\n*                                                                     *\n*     Criteria                                                        *\n*        RLD begin disp must be higher than user area begin           *\n*        RLD begin end  must be lower than user area end disp         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRLD0030  DS    0H\n         ITRACE ID=RLD0030\n         CLC   RLD.AREA_BEGIN,CURRENT.AREA_BEGIN   BEGIN HIGHER?\n         BNH   RLD0040                             NO\n         CLC   RLD.AREA_END,CURRENT.AREA_END       END LOWER?\n         BNL   RLD0040                             NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        An RLD item is 'in the middle' of a USER defined area        *\n*        split the user area into two parts                           *\n*                                                                     *\n*        \"first part\" starts at disp on DATA control statement        *\n*        ends 1 byte before new RLD item                              *\n*                                                                     *\n*        \"second part\" starts one byte after the RLD item and         *\n*        ends at the disp on the DATA control statement               *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=SPLIT\n         MVI   COMM_MSG_ID,3                       SET MESSAGE ID\n         MVC   COMM_INFO_01(4),RLD.AREA_BEGIN      COPY BEGIN DISP\n         MVC   COMM_INFO_02(4),RLD.AREA_END        COPY END DISP\n         MVC   COMM_INFO_03(4),CURRENT.AREA_BEGIN  COPY BEGIN DISP\n         MVC   COMM_INFO_04(4),CURRENT.AREA_END    COPY END DISP\n         BAL   R6,MSG0000                          ISSUE MESSAGE\n         GETMAIN RU,                                                   +\n               LV=AREA_DSECT_L,                                        +\n               LOC=ANY\n         XC    0(AREA_DSECT_L,R1),0(R1)            INIT AREA\n         LR    R7,R1\n         ITRACE ID=NEW_RLD,                                            +\n               RDATA1=R7\n         MVC   NEW.AREA_DSECT(AREA_DSECT_L),CURRENT.AREA_DSECT\n         ST    R7,CURRENT.AREA_NEXT                SET NEW NEXT\n         ICM   R14,15,RLD.AREA_BEGIN               RLD BEGIN DISP\n         BCTR  R14,0                               MINUS 1\n         STCM  R14,15,CURRENT.AREA_END             CHANGE ENDING DISP\n         ICM   R15,15,CURRENT.AREA_BEGIN           BEGIN DISP\n         SR    R14,R15                             COMPUTE LENGTH\n         LA    R14,1(,R14)                         TRUE LENGTH\n         STCM  R14,15,CURRENT.AREA_LENGTH          CHANGE LENGTH\n         ICM   R14,15,RLD.AREA_END                 RLD END DISP\n         LA    R14,1(,R14)                         PLUS 1\n         STCM  R14,15,NEW.AREA_BEGIN               SET NEW AREA BEGIN\n         ICM   R15,15,NEW.AREA_END                 END DISP\n         SR    R15,R14                             COMPUTE LENGTH\n         LA    R15,1(,R15)                         TRUE LENGTH\n         STCM  R15,15,NEW.AREA_LENGTH              SET LENGTH\n         B     RLD0000                             RE-DRIVE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Check for RLD item overlapping 'last part' of USER area      *\n*                                                                     *\n*     Criteria                                                        *\n*        RLD begin disp > user area begin disp                        *\n*        RLD begin disp not > user area end disp                      *\n*        RLD end disp not < user area end disp                        *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRLD0040  DS    0H\n         ITRACE ID=RLD0040\n         CLC   RLD.AREA_BEGIN,CURRENT.AREA_BEGIN   HIGHER?\n         BNH   RLD0050                             NO\n         CLC   RLD.AREA_BEGIN,CURRENT.AREA_END     AT OR LOWER THAN END\n         BH    RLD0050                             NO\n         CLC   RLD.AREA_END,CURRENT.AREA_END       END AT OR HIGHER?\n         BL    RLD0050                             NO\n         ITRACE ID=OLAP_2ND                        OVERLAPS LAST PART\n         MVI   COMM_MSG_ID,4                       SET MESSAGE ID\n         MVC   COMM_INFO_01(4),RLD.AREA_BEGIN      COPY BEGIN DISP\n         MVC   COMM_INFO_02(4),RLD.AREA_END        COPY END DISP\n         MVC   COMM_INFO_03(4),CURRENT.AREA_BEGIN  COPY BEGIN DISP\n         MVC   COMM_INFO_04(4),CURRENT.AREA_END    COPY END DISP\n         BAL   R6,MSG0000                          ISSUE MESSAGE\n         ICM   R14,15,RLD.AREA_BEGIN               RLD ITEM BEGIN DISP\n         BCTR  R14,0                               MINUS 1\n         STCM  R14,15,CURRENT.AREA_END             SET ENDING DISP\n         ICM   R15,15,CURRENT.AREA_BEGIN           BEGIN DISP\n         SR    R14,R15                             COMPUTE LENGTH\n         LA    R14,1(,R14)                         TRUE LENGTH\n         STCM  R14,15,CURRENT.AREA_LENGTH          SET LENGTH\n         B     RLD0000                             RE-DRIVE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Check for RLD item 'spanning' a USER defined data area       *\n*                                                                     *\n*     Criteria                                                        *\n*        RLD begin disp < user area begin disp                        *\n*        RLD END   DISP > USER AREA END DISP                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRLD0050  DS    0H\n         ITRACE ID=RLD0050\n         CLC   RLD.AREA_BEGIN,CURRENT.AREA_BEGIN   HIGHER?\n         BH    RLD0060                             YES\n         CLC   RLD.AREA_END,CURRENT.AREA_END       LOWER?\n         BL    RLD0060                             YES\n         MVI   COMM_MSG_ID,5                       SET MESSAGE ID\n         MVC   COMM_INFO_01(4),RLD.AREA_BEGIN      COPY BEGIN DISP\n         MVC   COMM_INFO_02(4),RLD.AREA_END        COPY END DISP\n         MVC   COMM_INFO_03(4),CURRENT.AREA_BEGIN  COPY BEGIN DISP\n         MVC   COMM_INFO_04(4),CURRENT.AREA_END    COPY END DISP\n         BAL   R6,MSG0000                          ISSUE MESSAGE\n         MVC   0(4,R9),CURRENT.AREA_NEXT           UNCHAIN THIS AREA\n         FREEMAIN RU,                                                  +\n               A=(R8),                                                 +\n               LV=AREA_DSECT_L\n         B     RLD0000                             RE-DRIVE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRLD0060  DS    0H\n         ITRACE ID=RLD0060,                                            +\n               RDATA1=R8,                                              +\n               DATA2=CURRENT.AREA_NEXT\n         LA    R9,CURRENT.AREA_NEXT\n         B     RLD0010                             LOOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     All areas checked                                               *\n*     The new RLD item does not conflict with any user area           *\n*     Add the new RLD item to AREA chain                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRLD0070  DS    0H\n         ITRACE ID=RLD0070\n         LA    R9,COMM_AREA_NEXT\nRLD0080  DS    0H\n         ITRACE ID=RLD0080,                                            +\n               RDATA1=R9,                                              +\n               DATA2=0(R9)\n         ICM   R8,15,0(R9)                         NEXT ON BLOCK\n         BZ    RLD0100                             END OF CHAIN\n*        ITRACE ID=X,\n*              DATA1=CURRENT.AREA_BEGIN,\n*              DATA2=RLD.AREA_BEGIN\n         CLC   CURRENT.AREA_BEGIN,RLD.AREA_BEGIN   DOES IT GO HERE?\n         BH    RLD0090                             YES\n         LA    R9,CURRENT.AREA_NEXT                NEXT ON CHAIN\n         B     RLD0080\nRLD0090  DS    0H\n         ITRACE ID=RLD0090\n         ST    R8,RLD.AREA_NEXT                    CHAIN CURRENT TO NEW\nRLD0100  DS    0H\n         ITRACE ID=RLD0100,                                            +\n               RDATA1=R9,                                              +\n               RDATA2=R10\n         ST    R10,0(,R9)                          ADD TO END OF CHAIN\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0000  DS    0H\n         TM    COMM_FLAGS,$COMM_NO_RLD_WARN        BYPASS WARNINGS?\n         BOR   R6                                  YES.. SKIP MSGS\n         MVC   COMM_MSG_CSECT,MODID\n         L     R15,V_DISMSG\n         BALR  R14,R15\n         MVI   PRINT_COMMAND,$PRINT_PRINT\n         MVC   PRINT_DATA,COMM_MSG_1\n         L     R15,V_DISPRINT\n         BALR  R14,R15\n         MVC   PRINT_DATA,COMM_BLANKS\n         BR    R6\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                         RESTORE REGISTER 13  ASE01670\n         LM    R14,R12,12(R13)                     RESTORE REGISTERS    ASE01680\n         SR    R15,R15                             RETURN CODE          ASE01690\n         BR    R14                                 RETURN TO CALLER     ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC   Q(DXDRLD2)\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDRLD2       DSECT\n              DS       18F\nDXD_CSECT     DS       CL8\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              DISCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY     DISASMDA\n\n              IFGACB   AM=VSAM\nACB_L         EQU      *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  DISRLD2\n./ ADD NAME=DISRLIST 0102-09119-09198-0811-00311-00310-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: DISRLIST                                              *\n*                                                                     *\n*  FUNCTION:                                                          *\n*   PRINT RLD ITEMS                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISRLIST CSECT\nDISRLIST AMODE 31\nDISRLIST RMODE ANY\n         USING DISRLIST,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     MOD0000                           SKIP EYECATCHER\nMODID    DC    CL8'DISRLIST'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDRLIST,R13\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CLI   COMM_RUN_MODE,$COMM_RUN_TSO       TSO MODE?\n         BE    MAIN0030                          YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=BATCH\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT\n         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01\n         BAL   R10,DEBUG000\n         MVC   PRINT_DATA,COMM_BLANKS\n         MVC   COMM_SUBHEAD,COMM_BLANKS\n         MVC   COMM_SUBHEAD(HEADING_1_L),HEADING_1\n         MVI   PRINT_COMMAND,$PRINT_SUB_HEAD\n         L     R15,V_DISPRINT\n         BALR  R14,R15                           PRINT SUBHEADING\n         ICM   R6,15,COMM_RLD_AREA_NEXT          1ST RLD ITEM\n         BZ    MAIN0400\n         USING AREA_DSECT,R6\nMAIN0010 DS    0H\n         BAL   R5,MAIN0300                       BUILD DETAIL\n         MVI   PRINT_COMMAND,$PRINT_PRINT        SET PRINT COMMAND\n         L     R15,V_DISPRINT\n         BALR  R14,R15                           PRINT\nMAIN0020 DS    0H\n         ICM   R6,15,AREA_NEXT                   NEXT AREA\n         BNZ   MAIN0010                          PROCESS IT\n         B     EXIT0000                          ALL DONE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0030 DS    0H\n         ITRACE ID=TSO\n         ICM   R6,15,COMM_RLD_AREA_NEXT          FIRST AREA\n         BZ    MAIN0400\n         MVC   PRINT_DATA,COMM_BLANKS            INITIALIZE\nMAIN0040 DS    0H\n         L     R0,COMM_VDATA_ADDR\n         L     R1,COMM_VDATA_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14\n         L     R8,SPF_VWIDTH                     SCREEN WIDTH\n         SH    R8,=Y(MSG02_L)                    MINUS LENGTH OF DETAIL\n         SRL   R8,1                              DIVIDE BY 2\n         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDRESS\n         L     R7,SPF_VDEPTH                     NBR OF LINES\n         ST    R6,DXD_FIRST_DISPLAYED            FIRST ITEM DISPLAYED\nMAIN0050 DS    0H\n         ST    R6,DXD_LAST_DISPLAYED             LAST ITEM DISPLAYED\n         BAL   R5,MAIN0300                       BUILD DETAIL\n         MVC   0(MSG02_L,R8),PRINT_DATA          COPY DATA\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0060\n         B     MAIN0070\nMAIN0060 DS    0H\n         ICM   R6,15,AREA_NEXT                   NEXT AREA\n         BNZ   MAIN0050\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0070 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_SPF_PANEL,DISRLD             SET PANEL NAME\n         L     R15,V_DISDISP                     DISP ENTRY POINT\n         BALR  R14,R15                           DISPLAY\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15,                                             +\n               DATA2=SPF_ZVERB\n         LTR   R15,R15                           RC = 0?\n         BNZ   EXIT0000                          NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CLI   SPF_ZVERB,C'B'                    BOTTOM?\n         BE    MAIN0100\n         CLI   SPF_ZVERB,C'D'                    DOWN?\n         BE    MAIN0120\n         CLI   SPF_ZVERB,C'T'                    TOP?\n         BE    MAIN0130\n         CLI   SPF_ZVERB,C'U'                    UP?\n         BE    MAIN0140\n         B     MAIN0070\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0100 DS    0H\n         ITRACE ID=BOTTOM\n         ICM   R1,15,COMM_RLD_AREA_NEXT          FIRST ON CHAIN\nTEMP     USING AREA_DSECT,R1\n         BZ    EXIT0000                          SHOULD NOT HAPPEN!\nMAIN0110 DS    0H\n         LR    R6,R1                             SAVE THIS ADDR\n         ICM   R1,15,TEMP.AREA_NEXT              NEXT AREA\n         BNZ   MAIN0110\n         B     MAIN0040                          BUILD DISPLAY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0120 DS    0H\n         ITRACE ID=DOWN\n         CLI   SPF_ZSCROLLA,C'M'                 MAX?\n         BE    MAIN0100                          YES\n         L     R6,DXD_LAST_DISPLAYED             LAST ITEM DISPLAYED\n         B     MAIN0040\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0130 DS    0H\n         ITRACE ID=TOP\n         L     R6,COMM_RLD_AREA_NEXT             FIRST DATA ITEM\n         B     MAIN0040\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0140 DS    0H\n         ITRACE ID=UP\n         CLI   SPF_ZSCROLLA,C'M'                 MAX?\n         BE    MAIN0130                          YES\n         ICM   R1,15,DXD_FIRST_DISPLAYED         FIRST ON DISPLAY\n         BZ    EXIT0000                          SHOULD NOT HAPPEN!\n         L     R7,SPF_ZSCROLLN                   LINES ON DISPLAY\nMAIN0150 DS    0H\n         LR    R6,R1                             COPY ADDR\n         ICM   R1,15,TEMP.AREA_PREV              PREVIOUS AREA\n         BZ    MAIN0040\n         BCT   R7,MAIN0150                       LOOP\n         B     MAIN0040\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\nP        USING MSG02,PRINT_DATA\n         CLI   AREA_DATA_TYPE,$DATA_ACON         ADDRESS CONSTANT?\n         BE    MAIN0310                          YES\n         CLI   AREA_DATA_TYPE,$DATA_VCON         V-CONSTANT?\n         BE    MAIN0320                          YES\n         CLI   AREA_DATA_TYPE,$DATA_Q            Q-CONSTANT?\n         BE    MAIN0330                          YES\n         CLI   AREA_DATA_TYPE,$DATA_CXD          CXD?\n         BE    MAIN0340                          YES\n         CLI   AREA_DATA_TYPE,$DATA_USER         USER DEFINED AREA?\n         BE    MAIN0350                          YES\n         DC    H'0'                              SHOULD NOT HAPPEN\nMAIN0310 DS    0H\n         MVI   P.MSG02_ATTR,$ATTR_HIGH\n         MVC   P.MSG02_TYPE,C_ADCON\n         B     MAIN0360\nMAIN0320 DS    0H\n         MVI   P.MSG02_ATTR,$ATTR_HIGH_TURQUOISE\n         MVC   P.MSG02_TYPE,C_VCON\n         B     MAIN0360\nMAIN0330 DS    0H\n         MVI   P.MSG02_ATTR,$ATTR_HIGH_YELLOW\n         MVC   P.MSG02_TYPE,C_Q\n         B     MAIN0360\nMAIN0340 DS    0H\n         MVI   P.MSG02_ATTR,$ATTR_HIGH_RED\n         MVC   P.MSG02_TYPE,C_CXD\n         B     MAIN0360\nMAIN0350 DS    0H\n         MVC   P.MSG02_TYPE,C_USER\nMAIN0360 DS    0H\n         ICM   R1,15,AREA_LENGTH                 ITEM'S LENGTH\n         CVD   R1,COMM_DWORD                     CONVERT TO DECIMAL\n         MVC   P.MSG02_LENGTH,=X'40202120'       EDIT LENGTH\n         ED    P.MSG02_LENGTH,COMM_DWORD+6\n         UNPK  P.MSG02_BEGIN(9),AREA_BEGIN(5)    UNPACK BEGIN DISP\n         TR    P.MSG02_BEGIN,COMM_HEXCHAR        TRANSLATE IT\n         MVI   P.MSG02_BEGIN+8,C' '\n         UNPK  P.MSG02_END(9),AREA_END(5)        UNPACK END DISP\n         TR    P.MSG02_END,COMM_HEXCHAR          TRANSLATE IT\n         MVI   P.MSG02_END+8,C' '\n         TM    AREA_FLAGS,$AREA_RLD_PLUS         DIRECTION \"+\"?\n         BO    MAIN0370                          YES\n         MVI   P.MSG02_DIRECTION,C'-'            SHOW DIRECTION '-'\n         B     MAIN0380\nMAIN0370 DS    0H\n         MVI   P.MSG02_DIRECTION,C'+'            SHOW DIRECTION '+'\nMAIN0380 DS    0H\n         MVC   P.MSG02_NAME,AREA_RLD_NAME        COPY NAME (Q, VCON)\n         BR    R5\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0400 DS    0H\n         ITRACE ID=NO_RLD\n         MVC   SPF_MSG_3(MSG03_L),MSG03\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDEBUG000 DS    0H\n         L     R15,V_DISDEBUG\n         BALR  R14,R15\n         BR    R10\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         CLI   COMM_RUN_MODE,$COMM_RUN_TSO       TSO MODE?\n         BE    EXIT0010                          YES\n         MVC   COMM_DEBUG_IO+1(MSG04_L),MSG04\n         BAL   R10,DEBUG000\nEXIT0010 DS    0H\n         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670\n         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680\n         LR    R15,R2                            SET RC\n         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680\n         BR    R14                               RETURN TO CALLER       ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START         DC   Q(DXDRLIST)\nC_ADCON           DC   CL5'ADCON'\nC_VCON            DC   CL5'VCON'\nC_Q               DC   CL5'Q'\nC_CXD             DC   CL5'CXD'\nC_USER            DC   CL5'USER'\nDISRLD            DC   CL8'DISRLD'\n\nHEADING_1         DC   C'0RLD ITEMS'\nHEADING_1_L       EQU  *-HEADING_1\n\nMSG01             DS   0C\n                  DC   C'DISRLIST01I  Entering DISRLIST'\nMSG01_L           EQU  *-MSG01\n\nMSG02             DS   0C\nMSG02_ATTR        DC   AL1($ATTR_NORMAL)\nMSG02_TYPE        DC   CL5' '\n                  DC   CL1' '\n                  DC   C' '\nMSG02_BEGIN       DC   CL8' '\n                  DC   C' '\nMSG02_END         DC   CL8' '\n                  DC   C' '\nMSG02_LENGTH      DC   X'40202120'\n                  DC   C' '\nMSG02_DIRECTION   DC   C' '\n                  DC   CL2' '\nMSG02_NAME        DC   CL8' '\nMSG02_L           EQU  *-MSG02\n\nMSG03             DC   C'DISRLIST04I  No RLD items to display'\nMSG03_L           EQU  *-MSG03\n\nMSG04             DS   0C\n                  DC   C'DISRLIST04I  Exiting DISRLIST'\nMSG04_L           EQU  *-MSG04\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDRLIST              DSECT\n                      DS      18F\nDXD_CSECT             DS      CL8\n\nDXD_FIRST_DISPLAYED   DS  A\nDXD_LAST_DISPLAYED    DS  A\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              DISCOMM TYPE=DSECT\n              DISSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    DISASMDA\n\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n\n              COPY    ATTRS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    REGEQU\n              END     DISRLIST\n./ ADD NAME=DISRR    0102-07093-09014-1125-00076-00072-00000-SOURCE\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: DISRR - VERIFY OPERANDS FOR RR FORMAT INSTRUCTIONS    *\n*                                                                     *\n*  Function:                                                          *\n*   Some instructions require that the operand(s) be even-odd pairs   *\n*   of registers.  This code verifies the operands for most 'RR'      *\n*   format instructions.                                              *\n*                                                                     *\n*   At entry R8 will be address of the current OPCODE table entry.    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISRR    CSECT\nDISRR    AMODE 31\nDISRR    RMODE ANY\n         USING DISCOMM,R12\n         USING DISRR,R11\n         USING OPCODE_DSECT,R8               DEFINE OPCODE DSECT BASE\n         STM   R14,R12,12(R13)               SAVE REGS\n         LR    R11,R15                       SET BASE REG\n         B     VER0000                       SKIP EYECATCHER\n         DC    CL8'DISRR'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nVER0000  DS    0H\n         TM    OPCODE_REGS,X'F0'             RESTRICTIONS ON OPERAND 1?\n         BZ    VER0100                       NO\n         TM    1(R4),X'10'                   OPERAND 1 AN ODD NUMBER?\n         BO    BAD0000                       YES.. BAD\n         TM    OPCODE_REGS,$OPCODE_1EVEN     MUST BE EVEN?              ER?\n         BO    VER0100                       OPERAND 1 IS OK\n         TM    1(R4),X'80'                   REGISTER 8 OR GREATER?\n         BO    BAD0000                       YES.. CANNOT BE VALID\n         TM    OPCODE_REGS,$OPCODE_10246     NEED 0, 2, 4, OR 6?\n         BO    VER0100                       OPERAND 1 IS OK\n         TM    1(R4),X'20'                   REGISTER 2 OR 6?\n         BO    BAD0000                       YES.. NOT VALID\nVER0100  DS    0H\n         TM    OPCODE_REGS,X'0F'             RESTRICTIONS ON OPERAND 2?\n         BZ    GOOD0000                      NO.. OPERANDS ARE OK\n         TM    1(R4),X'01'                   OPERAND 2 AN ODD NUMBER?\n         BO    BAD0000                       YES.. BAD\n         TM    OPCODE_REGS,$OPCODE_2EVEN     MUST BE EVEN NUMBER?\n         BO    GOOD0000                      ALL OPERANDS ARE OK\n         TM    1(R4),X'08'                   REGISTER 8 OR GREATER?\n         BO    BAD0000                       YES.. CANNOT BE VALID\n         TM    OPCODE_REGS,$OPCODE_20246     NEED 0, 2, 4, OR 6?\n         BO    GOOD0000                      ALL OPERANDS ARE OK\n         TM    1(R4),X'02'                   REGISTER 2 OR 6?\n         BO    BAD0000                       YES.. NOT VALID\nGOOD0000 DS    0H\n         SR    R15,R15                       OPERAND(S) ARE OK\n         B     EXIT0000                      EXIT\nBAD0000  DS    0H\n         LA    R15,8                         OPERAND(S) ARE NOT OK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         L     R14,12(R13)                   RESTORE R14                ASE01680\n         LM    R0,R12,20(R13)                RESTORE OTHER REGISTERS    ASE01680\n         BR    R14                           RETURN TO CALLER           ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         DISCOMM TYPE=DSECT\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY DISASMDA\n\n         IFGACB  AM=VSAM\nACB_L    EQU     *-IFGACB\n\n         COPY REGEQU\n         END  DISRR\n./ ADD NAME=DISSCAN  0152-09119-09198-1501-00662-00564-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: DISSCAN                                               *\n*                                                                     *\n*  FUNCTION:                                                          *\n*      Examine the object text.                                       *\n*      Identify all text as either data or instructions.              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISSCAN  CSECT\nDISSCAN  AMODE 31\nDISSCAN  RMODE ANY\n         USING DISCOMM,R12\n         USING DISSCAN,R11\n         STM   R14,R12,12(R13)                 SAVE REGS\n         LR    R11,R15                         SET BASE REG\n         B     INIT0000                        SKIP EYECATCHER\nMODID    DC    CL8'DISSCAN'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nINIT0000 DS    0H\n         L     R15,COMM_DXD_ADDRESS            WORK AREA\n         A     R15,DXD_START                   PLUS DISPLACEMENT\n         ST    R15,8(,R13)\n         ST    R13,4(,R15)\n         LR    R13,R15\n         USING DXDSCAN,R13\n         USING AREA_DSECT,R7\nNEW      USING AREA_DSECT,R1\n         MVC   DXD_CSECT,MODID\n         L     R1,DXD_ENTRIES\n         LA    R1,1(,R1)\n         ST    R1,DXD_ENTRIES\n         ITRACE ID=ENTRY,RDATA1=R1\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT\n         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01\n         BAL   R10,DEBUG000\n         TM    COMM_FLAGS,$COMM_AREA_DEBUG    AREA DEBUGGING?\n         BNO   INIT0010                       NO\n         L     R2,COMM_DISSPFD\n         USING DISSPFD,R2\n         MVC   SPF_MSG_3(AREAMSG1_L),AREAMSG1\n         L     R1,COMM_ALL_AREA_NEXT\n         L     R15,V_DISXLIST\n         BALR  R14,R15\nINIT0010 DS    0H\n         XC    DXD_NEW_AREAS,DXD_NEW_AREAS    RESET CHAIN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Scan the object code and determine where instructions occur. *\n*        This is necessary because some instructions reference other  *\n*        instructions (like branching or modifying lengths).          *\n*                                                                     *\n*        If an instruction references another at other than the       *\n*        opcode address, the generated label will be 'PRFXNNNN+DDD'.  *\n*                                                                     *\n*        'DATA' blocks will be generated to indicate areas that do    *\n*        not have valid opcodes and are not already defined as being  *\n*        data.                                                        *\n*                                                                     *\n*        Some of the hex values of character text are also opcodes.   *\n*        To prevent the disassembler from interpreting a string of    *\n*        character data as instructions, 8 consecutive characters     *\n*        will be assumed to be data.                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSCAN0000 DS    0H\n         ITRACE ID=SCAN0000,                                           +\n               DATA1=COMM_ALL_AREA_NEXT\n         XC    DXD_CURRENT_DISP,DXD_CURRENT_DISP  INITIALIZE DISP\n         XC    DXD_SCAN_DISP,DXD_SCAN_DISP        INITIALIZE DISP\n         XC    DXD_SCAN_LENGTH,DXD_SCAN_LENGTH    RESET DATA SKIPPED\n         XC    DXD_LAST_AREA,DXD_LAST_AREA        RESET LAST AREA\n         ICM   R7,15,COMM_ALL_AREA_NEXT           1ST KNOWN DATA AREA\n         BNZ   SCAN0010                           NO AREAS\n         LA    R7,DUMMY_FF                        SET TO 'DUMMY'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Top of scan loop                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nSCAN0010 DS    0H\n         ITRACE ID=SCAN0010,                                           +\n               DATA1=DXD_SCAN_DISP,                                    +\n               DATA2=AREA_BEGIN\n         CLC   DXD_SCAN_DISP,COMM_CSECT_LENGTH AT END OF CSECT?\n         BH    SCAN0400                        YES\n         CLC   DXD_SCAN_DISP,AREA_BEGIN        AT DATA AREA?\n         BE    SCAN0030                        YES\n         BL    SCAN0060                        LOW.. KEEP GOING\n         ITRACE ID=BLEWPAST\n         DC    H'0'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        We are at a known data area                                  *\n*                                                                     *\n*        Add a new AREA block for any data we have 'skipped'          *\n*                                                                     *\n*        Update the current and scan disps                            *\n*                                                                     *\n*---------------------------------------------------------------------*\nSCAN0030 DS    0H\n         ITRACE ID=AT_AREA,                                            +\n               RDATA1=R7,                                              +\n               DATA2=AREA_BEGIN\n         OC    DXD_SCAN_LENGTH,DXD_SCAN_LENGTH ANY DATA SKIPPED?\n         BZ    SCAN0040                        NO\n         BAL   R10,SCAN0300                    GETMAIN AN AREA BLOCK\n         MVC   NEW.AREA_BEGIN,DXD_CURRENT_DISP SET BEGINNING DISP\n         L     R3,DXD_SCAN_DISP                STOPPING DISP\n         BCTR  R3,0                            MINUS 1\n         ST    R3,NEW.AREA_END                 SET ENDING DISP\n         S     R3,NEW.AREA_BEGIN               AREA LENGTH\n         LA    R3,1(,R3)                       PLUS 1\n         ST    R3,NEW.AREA_LENGTH              SET LENGTH\n         MVI   NEW.AREA_TYPE,$AREA_DATA        AREA IS DATA\n         MVI   NEW.AREA_DATA_TYPE,$DATA_INTERNAL   INTERNALLY DETECTED\n         XC    DXD_SCAN_LENGTH,DXD_SCAN_LENGTH RESET LENGTH\n         ITRACE ID=NEWDATA1,                                           +\n               RDATA1=R1,                                              +\n               DATA2=NEW.AREA_BEGIN\nSCAN0040 DS    0H\n         ICM   R1,15,AREA_END                  AREA ENDING DISP\n         LA    R1,1(,R1)                       PLUS 1\n         ST    R1,DXD_CURRENT_DISP             SET CURRENT DISP\n         ST    R1,DXD_SCAN_DISP                SET SCAN DISP\n         ITRACE ID=NEW_DISP,                                           +\n               DATA1=DXD_CURRENT_DISP\n         ICM   R7,15,AREA_NEXT                 NEXT AREA\n         BZ    SCAN0050                        CHECK FOR AREA AGAIN\n         ITRACE ID=NEXTAREA,                                           +\n               RDATA1=R7,                                              +\n               DATA2=AREA_BEGIN\n         B     SCAN0010\nSCAN0050 DS    0H\n         ITRACE ID=DUMMY_FF\n         LA    R7,DUMMY_FF                     SET TO 'DUMMY\n         B     SCAN0010\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Examine text                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nSCAN0060 DS    0H\n         ITRACE ID=EXAMINE,                                            +\n               DATA1=DXD_CURRENT_DISP,                                 +\n               DATA2=DXD_SCAN_DISP\n         TM    DXD_SCAN_DISP+3,X'01'           ON ODD DISP?\n         BO    SCAN0160                        YES\n         BAL   R10,SCAN0200                    8 CHARACTERS OR MORE?\n         BZ    SCAN0010                        YES..\n         L     R1,DXD_SCAN_DISP                CURRENT DISP\n         A     R1,COMM_CSECT_TEXT              PLUS TEXT BASE\n         MVC   DXD_OPCODE1,0(R1)               COPY BYTE BEING EXAMINED\n         SR    R9,R9                           CLEAR R9\n         ICM   R9,1,0(R1)                      POSSIBLE OPCODE\n         LTR   R9,R9\n         BZ    SCAN0160                        NOT AN OPCODE\n         SLL   R9,2                            MULTIPLY BY 4\n         A     R9,COMM_OPCODE_TABLE_ADDR       PLUS OPCODE TABLE BASE\n         ICM   R9,15,0(R9)                     VALID OPCODE?\n         BZ    SCAN0160                        NOT AN OPCODE\n         USING OPCODE_DSECT,R9\n         ITRACE ID=OPCODE,                                             +\n               DATA1=DXD_SCAN_DISP,            .. DISPLACMENT          +\n               DATA2=OPCODE_MACHINE            .. OPCODE\n         SR    R3,R3\n         ICM   R3,3,OPCODE_LENGTH              INSTRUCTION LENGTH\n         A     R3,DXD_SCAN_DISP                PLUS SCAN DISP\n         ITRACE ID=NEXTDISP,                                           +\n               RDATA1=R3\n*---------------------------------------------------------------------*\n*        Verify it would not exceed length of CSECT                   *\n*---------------------------------------------------------------------*\n         C     R3,COMM_CSECT_LENGTH            BEYOND END OF CSECT?\n         BNL   SCAN0160                        YES\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Some opcodes use an \"even-odd\" register pair.                *\n*        Copy the 2nd byte of the instruction to allow testing.       *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MVC   DXD_REGS,1(R1)                  COPY FOR RR TESTING\n*---------------------------------------------------------------------*\n*        Verify it does not overlap a data area                       *\n*---------------------------------------------------------------------*\n         LR    R1,R3                           COPY NEXT AREA DISP\n         BCTR  R1,0                            END DISP OF INSTRUCTION\n         ITRACE ID=OLAP_1,                                             +\n               DATA1=DXD_SCAN_DISP,                                    +\n               RDATA2=R1\n         ICM   R2,15,COMM_ALL_AREA_NEXT        FIRST DATA AREA\n         BZ    SCAN0090                        NO DATA AREAS\nOLAP     USING AREA_DSECT,R2\nSCAN0070 DS    0H\n         ITRACE ID=CHK_OLAP,                                           +\n               DATA1=OLAP.AREA_BEGIN\n         C     R1,OLAP.AREA_BEGIN              AT OR HIGHER THAN BEGIN?\n         BL    SCAN0080                        NO\n         CLC   DXD_SCAN_DISP,OLAP.AREA_END     HIGHER THAN END?\n         BH    SCAN0080                        YES\n*        C     R1,OLAP.AREA_END                AT OR LESS THAN END?\n*        BH    SCAN0080                        NO\n         ITRACE ID=OLAPDATA                    OVERLAPS A DATA AREA\n         B     SCAN0160\nSCAN0080 DS    0H\n         ICM   R2,15,OLAP.AREA_NEXT            NEXT AREA\n         BNZ   SCAN0070\n*---------------------------------------------------------------------*\n*                                                                     *\n*        One of the headaches for dis-assemblers is that some         *\n*        opcodes are also printable characters.  For example          *\n*        the opcode for STH is hex 40 which is also a printable       *\n*        blank.  To reduce the number of data areas mistaken to       *\n*        be instructions, the disassembler verifies that an opcode    *\n*        is followed by another valid opcode.  The exceptions are     *\n*        SVC's and branches.                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nSCAN0090 DS    0H\n         TM    OPCODE_FLAGS,$OPCODE_SVC        SVC?\n         BO    SCAN0140                        YES\n         TM    OPCODE_FLAGS,$OPCODE_BRANCH     BRANCH?\n         BO    SCAN0140                        YES\n*---------------------------------------------------------------------*\n*        Verify next area is also an instruction                      *\n*---------------------------------------------------------------------*\n         LR    R1,R3                           COPY NEXT AREA DISP\n         A     R1,COMM_CSECT_TEXT              PLUS TEXT BASE\n         MVC   DXD_OPCODE2,0(R1)               COPY 'NEXT' OPCODE\n         ITRACE ID=NEXT_OP,                                            +\n               RDATA1=R3,                                              +\n               DATA2=DXD_OPCODE2\n         SR    R8,R8                           CLEAR R8\n         ICM   R8,1,DXD_OPCODE2                POSSIBLE OPCODE\n         BZ    SCAN0160                        NOT AN OPCODE\n         SLL   R8,2                            MULTIPLY BY 4\n         A     R8,COMM_OPCODE_TABLE_ADDR       PLUS OPCODE TABLE ADDR\n         ICM   R8,15,0(R8)                     VALID OPCODE?\n         BZ    SCAN0160                        NO\n         SR    R1,R1\n         ICM   R1,3,OPCODE_LENGTH              OPCODE LENGTH\n         AR    R1,R3                           PLUS STARTING DISP\n         C     R1,COMM_CSECT_LENGTH            BEYOND END OF CSECT?\n         BH    SCAN0160                        YES\n         BCTR  R1,R0                           ENDING DISP\n         ITRACE ID=OLAP_2,                                             +\n               RDATA1=R3,                                              +\n               RDATA2=R1\n         ICM   R2,15,COMM_ALL_AREA_NEXT        FIRST DATA AREA\n         BZ    SCAN0120                        NO DATA AREAS\nSCAN0100 DS    0H\n         ITRACE ID=CHK_OLAP,                                           +\n               DATA1=OLAP.AREA_BEGIN\n         C     R1,OLAP.AREA_BEGIN              AT OR HIGHER THAN BEGIN?\n         BL    SCAN0110                        NO\n         C     R3,OLAP.AREA_END                AT OR LESS THAN END?\n         BH    SCAN0110                        NO\n         ITRACE ID=OLAPDATA                    OVERLAPS A DATA AREA\n         B     SCAN0160\nSCAN0110 DS    0H\n         ICM   R2,15,OLAP.AREA_NEXT            NEXT AREA\n         BNZ   SCAN0100\n         DROP  OLAP\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nSCAN0120 DS    0H\n         ITRACE ID=TEST_R1\n         TM    OPCODE_REGS,$OPCODE_1EVEN       SPECIAL REG REQUIREMENT?\n         BNO   SCAN0130                        NO\n         TM    DXD_REGS,X'10'                  ODD NUMBERED REGISTER?\n         BO    SCAN0160                        YES.. NOT VALID\nSCAN0130 DS    0H\n         ITRACE ID=TEST_R2\n         TM    OPCODE_REGS,$OPCODE_2EVEN       SPECIAL REG REQUIREMENT?\n         BNO   SCAN0140                        NO\n         TM    DXD_REGS,X'01'                  ODD NUMBERED REGISTER?\n         BO    SCAN0160                        YES.. NOT VALID\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Valid instruction found                                      *\n*                                                                     *\n*        If scanned length is non zero                                *\n*           Build an AREA block for the data area                     *\n*                                                                     *\n*                                                                     *\n*        Build an AREA block                                          *\n*        Set type to 'instruction'                                    *\n*        Update \"current disp\"                                        *\n*        resume scan                                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\nSCAN0140 DS    0H\n         ITRACE ID=INSTRUCT,                                           +\n               DATA1=DXD_CURRENT_DISP,                                 +\n               DATA2=DXD_SCAN_DISP\n         OC    DXD_SCAN_LENGTH,DXD_SCAN_LENGTH ANY DATA SKIPPED?\n         BZ    SCAN0150                        NO\n         BAL   R10,SCAN0300                    GETMAIN AN AREA BLOCK\n         MVC   NEW.AREA_BEGIN,DXD_CURRENT_DISP SET BEGINNING DISP\n         L     R3,DXD_SCAN_DISP                STOPPING DISP\n         BCTR  R3,0                            MINUS 1\n         ST    R3,NEW.AREA_END                 SET ENDING DISP\n         S     R3,NEW.AREA_BEGIN               AREA LENGTH\n         LA    R3,1(,R3)                       PLUS 1\n         ST    R3,NEW.AREA_LENGTH              SET LENGTH\n         MVI   NEW.AREA_TYPE,$AREA_DATA        AREA IS DATA\n         MVI   NEW.AREA_DATA_TYPE,$DATA_INTERNAL   INTERNALLY DETECTED\n         XC    DXD_SCAN_LENGTH,DXD_SCAN_LENGTH RESET LENGTH\n         ITRACE ID=NEWDATA2,                                           +\n               RDATA1=R1,                                              +\n               DATA2=NEW.AREA_BEGIN\nSCAN0150 DS    0H\n         BAL   R10,SCAN0300\n         L     R2,DXD_SCAN_DISP                INSTRUCTION'S DISP\n         ST    R2,NEW.AREA_BEGIN               SET STARTING DISP\n         SR    R0,R0\n         ICM   R0,3,OPCODE_LENGTH              INSTRUCTION LENGTH\n         AR    R2,R0                           PLUS INSTRUCTION LENGTH\n         BCTR  R2,0                            MINUS 1\n         ST    R2,NEW.AREA_END                 SET END DISP\n         MVC   NEW.AREA_LENGTH+2(2),OPCODE_LENGTH\n         ST    R9,NEW.AREA_OPCODE              SET OPCODE ADDR\n         MVI   NEW.AREA_TYPE,$AREA_INSTRUCTION SET AREA TYPE\n         ITRACE ID=NEW_INST,                                           +\n               RDATA1=R1,                                              +\n               DATA2=NEW.AREA_BEGIN\n         LA    R2,1(,R2)                       PLUS 1\n         ST    R2,DXD_CURRENT_DISP             UPDATE CURRENT DISP\n         ST    R2,DXD_SCAN_DISP                UPDATE SCAN DISP\n         B     SCAN0010                        EXAMINE AGAIN\n* --------------------------------------------------------------------*\n*                                                                     *\n* --------------------------------------------------------------------*\nSCAN0160 DS    0H\n         L     R1,DXD_SCAN_DISP                CURRENT SCAN DISP\n         LA    R1,1(,R1)                       PLUS 1\n         ST    R1,DXD_SCAN_DISP                UPDATE DISP\n         L     R1,DXD_SCAN_LENGTH              LENGTH SCANNED\n         LA    R1,1(,R1)                       PLUS 1\n         ST    R1,DXD_SCAN_LENGTH              UPDATE LENGTH\n         ITRACE ID=NEXTBYTE,                                           +\n               DATA1=DXD_SCAN_DISP,                                    +\n               DATA2=DXD_SCAN_LENGTH\n         B     SCAN0010\n* --------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        Check for 8 consecutive alpha characters                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* --------------------------------------------------------------------*\nSCAN0200 DS    0H\n         ST    R10,DXD_SAVE_LINK\n         L     R3,DXD_CURRENT_DISP             STARTING DISP\n         A     R3,COMM_CSECT_TEXT              PLUS TEXT BASE\n         LTR   R7,R7                           AREA BLOCK EXIST?\n         BNZ   SCAN0210                        NO\n         ICM   R15,15,AREA_BEGIN               BEGIN DISP VALID?\n         BH    SCAN0220                        YES\nSCAN0210 DS    0H\n         L     R15,COMM_CSECT_LENGTH           CSECT LENGTH\nSCAN0220 DS    0H\n         S     R15,DXD_CURRENT_DISP            MAX LENGTH\n         ITRACE ID=CHARSCAN,                                           +\n               RDATA1=R3,                                              +\n               RDATA2=R15\n         CH    R15,H8                          MORE THAN 8?\n         BNH   SCAN0230                        NO\n         LA    R15,8                           LIMIT TO 8\nSCAN0230 DS    0H\n         ITRACE ID=SCAN0230,                                           +\n               RDATA1=R3,                                              +\n               RDATA2=R15\n         TRT   0(1,R3),ALPHA_TABLE             ALPHA CHARACTER?\n         BNZ   SCAN0240                        NO\n         LA    R3,1(,R3)                       NEXT\n         BCT   R15,SCAN0230                    CHECK AGAIN\n* --------------------------------------------------------------------*\n*                                                                     *\n*        There are 8 consecutive alpha characters.                    *\n*                                                                     *\n* --------------------------------------------------------------------*\n         ITRACE ID=STRING,                                             +\n               DATA1=DXD_CURRENT_DISP,                                 +\n               RDATA2=R3\n         BAL   R10,SCAN0300                    GETMAIN NEW AREA BLOCK\n         L     R2,DXD_CURRENT_DISP             STARTING DISP\n         ST    R2,NEW.AREA_BEGIN               SET AREA BEGIN\n         LA    R2,7(,R2)                       PLUS 7\n         ST    R2,NEW.AREA_END                 SET AREA END\n         MVI   NEW.AREA_LENGTH+3,8             SET AREA LENGTH\n         MVI   NEW.AREA_TYPE,$AREA_DATA        IDENTIFY TYPE\n         MVI   NEW.AREA_DATA_TYPE,$DATA_INTERNAL\n         S     R3,COMM_CSECT_TEXT              COMPUTE DISP\n         ST    R3,DXD_CURRENT_DISP             SET DISP\n         ST    R3,DXD_SCAN_DISP                SET DISP BOTH PLACES\n         XC    DXD_SCAN_LENGTH,DXD_SCAN_LENGTH RESET LENGTH\n         ITRACE ID=ALPHDATA,                                           +\n               DATA1=NEW.AREA_BEGIN,                                   +\n               DATA2=NEW.AREA_LENGTH\n         SR    R10,R10                         SET CC\nSCAN0240 DS    0H\n         L     R10,DXD_SAVE_LINK               RESTORE LINK ADDR\n         BR    R10                             ALL DONE\n* --------------------------------------------------------------------*\n*                                                                     *\n*        GETMAIN/init new AREA blocks                                 *\n*                                                                     *\n* --------------------------------------------------------------------*\nSCAN0300 DS    0H\n         GETMAIN RU,                                                   +\n               LV=AREA_DSECT_L,                                        +\n               LOC=ANY\n         ITRACE ID=SCAN0300,                                           +\n               DATA1=DXD_SCAN_LENGTH,                                  +\n               RDATA2=R1\n         XC    NEW.AREA_DSECT(AREA_DSECT_L),NEW.AREA_DSECT\n         MVC   NEW.AREA_EYE,AREA_ID            IDENTIFY AREA\n         OC    DXD_NEW_AREAS,DXD_NEW_AREAS     ANY AREAS YET?\n         BNZ   SCAN0310                        YES\n         ST    R1,DXD_NEW_AREAS                FIRST NEW AREA\nSCAN0310 DS    0H\n         ICM   R2,15,DXD_LAST_AREA             LAST AREA ADDED\n         BZ    SCAN0320                        NONE YET\nLAST     USING AREA_DSECT,R2\n         ST    R1,LAST.AREA_NEXT               CHAIN TO LAST ON CHAIN\n         DROP  LAST\nSCAN0320 DS    0H\n         ST    R1,DXD_LAST_AREA                CHANGE 'LAST' AREA\n         ST    R2,NEW.AREA_PREV                CHAIN PREVIOUS BLOCK\n         BR    R10\n* --------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*         End of CSECT                                                *\n*                                                                     *\n*         Add final AREA block if necessary                           *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nSCAN0400 DS    0H\n         ITRACE ID=SCAN0400\n         OC    DXD_SCAN_LENGTH,DXD_SCAN_LENGTH ANY DATA SKIPPED?\n         BZ    SCAN0410                        NO\n         BAL   R10,SCAN0300                    GETMAIN NEW AREA BLOCK\n         MVC   NEW.AREA_BEGIN,DXD_CURRENT_DISP SET BEGINNING DISP\n         L     R3,DXD_SCAN_DISP                STOPPING DISP\n         BCTR  R3,0                            MINUS 1\n         ST    R3,NEW.AREA_END                 SET ENDING DISP\n         S     R3,NEW.AREA_BEGIN               AREA LENGTH\n         LA    R3,1(,R3)                       PLUS 1\n         ST    R3,NEW.AREA_LENGTH              SET LENGTH\n         MVI   NEW.AREA_TYPE,$AREA_DATA        AREA IS DATA\n         MVI   NEW.AREA_DATA_TYPE,$DATA_INTERNAL   INTERNALLY DETECTED\n         ITRACE ID=NEWDATA3,                                           +\n               RDATA1=R1,                                              +\n               DATA2=NEW.AREA_BEGIN\n         DROP  NEW\n* --------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*        There are now two chains that together 'describe' the        *\n*        entire CSECT.                                                *\n*                                                                     *\n*        One is the 'ALL' AREA chain.  The other is the new areas     *\n*        detected during the scan.                                    *\n*                                                                     *\n*        Now \"merge\" the two chains.  The result will be one chain    *\n*        of AREA blocks that \"describe\" every byte of the CSECT.      *\n*                                                                     *\n*                                                                     *\n* --------------------------------------------------------------------*\nSCAN0410 DS    0H\n         ITRACE ID=RECHAIN,                                            +\n               DATA1=DXD_NEW_AREAS,                                    +\n               DATA2=COMM_ALL_AREA_NEXT\n         L     R2,COMM_ALL_AREA_NEXT           FIRST ON CHAIN\n         XC    COMM_ALL_AREA_NEXT,COMM_ALL_AREA_NEXT\n         LTR   R2,R2\n         BNZ   SCAN0420                        ANYTHING ON CHAIN?\n         LA    R2,DUMMY_FF                     SET TO DUMMY AREA\nA        USING AREA_DSECT,R2\nNEW      USING AREA_DSECT,R1\nSCAN0420 DS    0H\n         ICM   R3,15,DXD_NEW_AREAS             ANY NEW AREAS?\n         BNZ   SCAN0430                        YES\nB        USING AREA_DSECT,R3\n         LA    R3,DUMMY_FF                     SET TO DUMMY AREA\nSCAN0430 DS    0H\n         LA    R4,COMM_ALL_AREA_PREV           RESULT CHAIN POINT\nPREV     USING AREA_DSECT,R4\nSCAN0440 DS    0H\n         ITRACE ID=A_B,                                                +\n               DATA1=A.AREA_BEGIN,                                     +\n               DATA2=B.AREA_BEGIN\n         CLC   A.AREA_BEGIN,B.AREA_BEGIN       COMPARE A WITH B\n         BL    SCAN0450                        A < B\n         BH    SCAN0460                        A > B\n         C     R2,=A(DUMMY_FF)                 AT END OF CHAINS?\n         BE    EXIT0000                        YES\n         DC    H'0'\nSCAN0450 DS    0H\n         ITRACE ID=ADD_A,                                              +\n               RDATA1=R2,                                              +\n               DATA2=A.AREA_BEGIN\n         LR    R1,R2                           COPY ADDRESS\n         L     R2,A.AREA_NEXT                  NEXT ON CHAIN\n         ST    R1,PREV.AREA_NEXT\n         ST    R4,NEW.AREA_PREV\n         XC    NEW.AREA_NEXT,NEW.AREA_NEXT\n         LR    R4,R1\n         LTR   R2,R2                           ANOTHER BLOCK?\n         BNZ   SCAN0440                        YES\n         LA    R2,DUMMY_FF                     SET TO DUMMY AREA\n         B     SCAN0440\nSCAN0460 DS    0H\n         ITRACE ID=ADD__B,                                             +\n               RDATA1=R3,                                              +\n               DATA2=B.AREA_BEGIN\n         LR    R1,R3\n         L     R3,B.AREA_NEXT\n         ST    R1,PREV.AREA_NEXT\n         ST    R4,NEW.AREA_PREV\n         XC    NEW.AREA_NEXT,NEW.AREA_NEXT\n         LR    R4,R1\n         LTR   R3,R3                           ANOTHER AREA?\n         BNZ   SCAN0440                        YES\n         LA    R3,DUMMY_FF                     SET TO DUMMY\n         B     SCAN0440\n* --------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDEBUG000 DS    0H\n         CLI   COMM_RUN_MODE,$COMM_RUN_TSO     TSO MODE?\n         BER   R10                             YES\n         L     R15,V_DISDEBUG\n         BALR  R14,R15\n         BR    R10\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         LA    R1,DUMMY_FF                     DUMMY 'AREA'\n         ICM   R7,15,COMM_ALL_AREA_NEXT        FIRST DATA AREA\n         BZ    EXIT0040                        NO DATA AREAS\nEXIT0010 DS    0H\n         C     R1,AREA_NEXT                    POINTING TO 'DUMMY'?\n         BE    EXIT0020                        YES\n         ICM   R7,15,AREA_NEXT                 NEXT AREA\n         BNZ   EXIT0010                        LOOP\n         B     EXIT0030\nEXIT0020 DS    0H\n         XC    AREA_NEXT,AREA_NEXT             CLEAR ADDRESS\nEXIT0030 DS    0H\n         ICM   R7,15,COMM_ALL_AREA_NEXT        FIRST DATA AREA\n         XC    AREA_PREV,AREA_PREV             NO PREV IN 1ST BLOCK\nEXIT0040 DS    0H\n         TM    COMM_FLAGS,$COMM_AREA_DEBUG\n         BNO   EXIT0050\n         L     R2,COMM_DISSPFD\n         USING DISSPFD,R2\n         MVC   SPF_MSG_3(AREAMSG3_L),AREAMSG3\n         L     R1,COMM_ALL_AREA_NEXT\n         L     R15,V_DISXLIST\n         BALR  R14,R15\nEXIT0050 DS    0H\n         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02\n         BAL   R10,DEBUG000\n         L     R13,4(,R13)                     RESTORE REGISTER 13      ASE01670\n         LM    R14,R12,12(R13)                 RESTORE OTHER REGISTERS  ASE01680\n         SR    R15,R15                         GIVE GOOD RETURN CODE    ASE01690\n         BR    R14                             RETURN TO CALLER         ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START DC   Q(DXDSCAN)\nH8       DC    H'8'\nAREA_ID  DC    CL8'AREA'\n\nDUMMY_FF DC    (AREA_DSECT_L)X'FF'\n\nMSG01    DS    0C\n         DC    C'DISSCAN01I   Entering DISSCAN'\nMSG01_L  EQU   *-MSG01\n\nMSG02    DS    0C\n         DC    C'DISSCAN02I   Exiting DISSCAN'\nMSG02_L  EQU   *-MSG02\n\nAREAMSG1 DS    0C\n         DC    C'ALL area chain at entry to DISSCAN'\nAREAMSG1_L EQU  *-AREAMSG1\n\nAREAMSG3 DS    0C\n         DC    C'ALL chain at exit from DISSCAN'\nAREAMSG3_L EQU  *-AREAMSG3\n\nALPHA_TABLE        DS  0C 0 1 2 3 4 5 6 7 8 9 A B C D E F'\n                   DC  X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'   00-0F\n                   DC  X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'   10-1F\n                   DC  X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'   20-2F\n                   DC  X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'   30-3F\n                   DC  X'00FFFFFFFFFFFFFFFFFFFF00FF0000FF'   40-4F\n                   DC  X'00FFFFFFFFFFFFFFFFFFFF00000000FF'   50-5F\n                   DC  X'0000FFFFFFFFFFFFFFFFFF00FF00FFFF'   60-6F\n                   DC  X'FFFFFFFFFFFFFFFFFFFF000000000000'   70-7F\n                   DC  X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'   80-8F\n                   DC  X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'   90-9F\n                   DC  X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'   A0-AF\n                   DC  X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'   B0-BF\n                   DC  X'FF000000000000000000FFFFFFFFFFFF'   C0-CF\n                   DC  X'FF000000000000000000FFFFFFFFFFFF'   D0-DF\n                   DC  X'FFFF0000000000000000FFFFFFFFFFFF'   E0-EF\n                   DC  X'00000000000000000000FFFFFFFFFFFF'   F0-FF\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDSCAN            DSECT\n                   DS  18F\nDXD_CSECT          DS  CL8\nDXD_ENTRIES        DS  F\nDXD_SAVE_LINK      DS  A\nDXD_CURRENT_DISP   DS  A                DISP CURRENTLY BEING EXAMINED\nDXD_SCAN_LENGTH    DS  A\nDXD_SCAN_DISP      DS  A\nDXD_NEW_AREAS      DS  A\nDXD_LAST_AREA      DS  A\nDXD_OPCODE1        DS  X\nDXD_REGS           DS  X\nDXD_OPCODE2        DS  X\n                   DS  CL8\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         DISCOMM  TYPE=DSECT\n         DISSPFD  TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY    DISASMDA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         DCBD    DSORG=PO\n\n         IFGACB  AM=VSAM\nACB_L    EQU     *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY    REGEQU\n         END     DISSCAN\n./ ADD NAME=DISSLIST 0106-09012-09198-0813-00507-00493-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: DISSLIST                                              *\n*                                                                     *\n*  FUNCTION:                                                          *\n*    Display/allow definition of assembler SYSLIB data sets.          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISSLIST CSECT\nDISSLIST AMODE 31\nDISSLIST RMODE ANY\n         USING DISSLIST,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     MOD0000                           SKIP EYECATCHER\nMODID    DC    CL8'DISSLIST'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDSLIST,R13\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n         USING SYSLIB_DSECT,R6\n         USING IHADCB,SYSLIB_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         MVI   DXD_FLAGS,0\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        If R1 is zero display existing KSDS list                     *\n*        If R1 not zero, display list passed in R1                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ST    R1,DXD_FIRST_SYSLIB\n         ST    R1,DXD_FIRST_DISPLAYED\n         LTR   R1,R1                             R1 ZERO?\n         BNZ   INIT0020                          NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        In order to allow the user to \"cancel\" changes,              *\n*        first \"copy\" the existing SYSLIB chain.                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         XC    DXD_FIRST_SYSLIB,DXD_FIRST_SYSLIB\n         XC    DXD_FIRST_DISPLAYED,DXD_FIRST_DISPLAYED\n         ITRACE ID=COPY\n         LA    R2,DXD_FIRST_SYSLIB-4\nPREV     USING SYSLIB_DSECT,R2\n         ICM   R6,15,COMM_SYSLIB_NEXT            FIRST LIB\n         BZ    INIT0020\nINIT0010 DS    0H\n         GETMAIN RU,                             GETMAIN NEW LIB BLOCK +\n               LV=SYSLIB_DSECT_L,                                      +\n               LOC=ANY\nNEW      USING SYSLIB_DSECT,R1\n         MVC   NEW.SYSLIB_DSECT(SYSLIB_DSECT_L),SYSLIB_DSECT\n         ST    R1,PREV.SYSLIB_NEXT\n         LR    R2,R1\n         ICM   R6,15,SYSLIB_NEXT                 ANOTHER LIB?\n         BNZ   INIT0010                          YES.. PROCESS IT\n         MVC   DXD_FIRST_DISPLAYED,DXD_FIRST_SYSLIB\n         DROP  NEW,PREV\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINIT0020 DS    0H\n         L     R0,SPF_VDEPTH                     NBR OF LINES\n         SLL   R0,2                              MULTIPLY BY 4\n         ST    R0,DXD_SYSLIB_TABLE_SIZE\n         GETMAIN RU,                                                   +\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,DXD_SYSLIB_TABLE               SAVE ADDRESS\n         ITRACE ID=A_TABLE,                                            +\n               RDATA1=R1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         L     R0,COMM_VDATA_ADDR\n         L     R1,COMM_VDATA_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                            INITIALIZE VDATA\n         L     R0,DXD_SYSLIB_TABLE\n         L     R1,DXD_SYSLIB_TABLE_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                            INIT AREA TABLE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R8,SPF_VWIDTH                     SCREEN WIDTH\n         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE\n         SRL   R8,1                              DIVIDE BY 2\n         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR\n         L     R7,SPF_VDEPTH                     NBR OF LINES\nMAIN0020 DS    0H\n         MVC   0(MSG01_L,R8),MSG01               INITIALIZE\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0020                       LOOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R8,SPF_VWIDTH                     SCREEN WIDTH\n         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE\n         SRL   R8,1                              DIVIDE BY 2\n         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR\n         USING MSG01,R8\n         L     R7,SPF_VDEPTH\nMAIN0030 DS    0H\n         L     R4,DXD_SYSLIB_TABLE               FIRST 'SLOT'\n         XC    DXD_NBR_DISPLAYED,DXD_NBR_DISPLAYED\n         ICM   R6,15,DXD_FIRST_DISPLAYED         FIRST TO DISPLAY\n         BZ    MAIN0060                          NOTHING DEFINED YET\nMAIN0040 DS    0H\n         ST    R6,DXD_LAST_DISPLAYED             SAVE ADDR\n         ST    R6,0(R4)                          SAVE ADDR\n         MVC   MSG01_DSN,SYSLIB_DSNAME           COPY DATA SET NAME\n         LA    R1,1                              CONSTANT 1\n         AH    R1,DXD_NBR_DISPLAYED              PLUS TOTAL SO FAR\n         STH   R1,DXD_NBR_DISPLAYED              SAVE TOTAL\n         LA    R4,4(,R4)                         NEXT IN ADDR TABLE\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0050\n         B     MAIN0060\nMAIN0050 DS    0H\n         ICM   R6,15,SYSLIB_NEXT\n         BNZ   MAIN0040\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0060 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_SPF_PANEL,DISSDATA           SET PANEL NAME\n         L     R15,V_DISDISP                     DISP ENTRY POINT\n         BALR  R14,R15                           DISPLAY\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15,                                             +\n               DATA2=SPF_ZVERB\n         LTR   R2,R15                            RC = 0?\n         BNZ   MAIN0500                          NO\n         CLC   CANCEL,SPF_ZCMD                   CANCEL?\n         BE    MAIN1000                          YES\n         CLC   CAN,SPF_ZCMD                      CAN(CEL)?\n         BE    MAIN1000                          YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Verify all DSNs                                              *\n*          cataloged                                                  *\n*          are PDSES                                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R8,SPF_VWIDTH                     SCREEN WIDTH\n         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE\n         SRL   R8,1                              DIVIDE BY 2\n         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR\n         L     R7,SPF_VDEPTH                     NBR OF LINES\n         NI    DXD_FLAGS,255-$DXD_ERROR          RESET FLAG\nMAIN0070 DS    0H\n         MVC   MSG01_MSG,COMM_BLANKS             RESET MSG\n         OC    MSG01_DSN,COMM_BLANKS             TRANSLATE TO UPPER\n         CLC   MSG01_DSN,COMM_BLANKS             BLANK?\n         BE    MAIN0090                          YES\n         MVC   COMM_DSINFO_DSN,MSG01_DSN         COPY DSN\n         L     R15,V_DISDINFO                    DISDINFO ENTRY POINT\n         BALR  R14,R15\n         ITRACE ID=DINFO_RC,                                           +\n               RDATA1=R15\n         LTR   R15,R15                           ERROR?\n         BZ    MAIN0080                          NO\n         MVC   MSG01_MSG,COMM_DSINFO_MSG         COPY MESSAGE\n         OI    DXD_FLAGS,$DXD_ERROR              SET ERROR FLAG\n         B     MAIN0090\nMAIN0080 DS    0H\n         ITRACE ID=DS_TYPE,                                            +\n               DATA1=COMM_DATASET_TYPE\n         CLI   COMM_DATASET_TYPE,$DATASET_TYPE_PDS\n         BE    MAIN0090                          YES\n         OI    DXD_FLAGS,$DXD_ERROR              SET ERROR FLAG\n         MVC   MSG01_MSG(ERR01_L),ERR01\nMAIN0090 DS    0H\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0070\n         TM    DXD_FLAGS,$DXD_ERROR              ANY ERRORS?\n         BO    MAIN0060                          DISPLAY W/MSG(S)\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Determine if any libs were                                   *\n*          updated                                                    *\n*          removed                                                    *\n*          added                                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R8,SPF_VWIDTH                     SCREEN WIDTH\n         SH    R8,=Y(MSG01_L)                    MINUS WIDTH IN USE\n         SRL   R8,1                              DIVIDE BY 2\n         A     R8,COMM_VDATA_ADDR                PLUS VDATA ADDR\n         L     R7,SPF_VDEPTH                     NBR OF LINES\n         L     R4,DXD_SYSLIB_TABLE               FIRST LIB\nMAIN0130 DS    0H\n         ITRACE ID=MAIN0130\n         L     R6,0(,R4)                         LIB BLOCK IF USED\n         OC    MSG01_DSN,COMM_BLANKS             'TRANSLATE'\n         CLC   MSG01_DSN,COMM_BLANKS             BLANK?\n         BE    MAIN0180                          YES\n         LTR   R6,R6                             LIB BLOCK EXIST?\n         BZ    MAIN0150                          NO\n         CLC   MSG01_DSN,SYSLIB_DSNAME           SAME DSN?\n         BE    MAIN0220                          YES\nMAIN0140 DS    0H\n         ITRACE ID=UPDTLIB\n         OI    DXD_FLAGS,$DXD_UPDATE             LIB HAS BEEN UPDATED\n         MVC   SYSLIB_DSNAME,MSG01_DSN           CHANGE DSN\n         B     MAIN0220\nMAIN0150 DS    0H\n         ITRACE ID=NEW_LIB\n         OI    DXD_FLAGS,$DXD_UPDATE\n         GETMAIN RU,                                                   +\n               LV=SYSLIB_DSECT_L,                                      +\n               LOC=ANY\nNEW      USING SYSLIB_DSECT,R1\n         XC    NEW.SYSLIB_DSECT(SYSLIB_DSECT_L),NEW.SYSLIB_DSECT\n         MVC   NEW.SYSLIB_EYE,SYSLIB_ID          IDENTIFY BLOCK\n         MVC   NEW.SYSLIB_DSNAME,MSG01_DSN       SET DSN\n         LA    R6,DXD_FIRST_SYSLIB-4             FIRST LIB\nMAIN0160 DS    0H\n         ICM   R2,15,SYSLIB_NEXT                 ANOTHER ON CHAIN?\n         BZ    MAIN0170                          YES\n         LR    R6,R2                             COPY ADDRESS\n         B     MAIN0160\nMAIN0170 DS    0H\n         ST    R1,SYSLIB_NEXT                    SET 'NEXT' IN PREVIOUS\n         ST    R6,NEW.SYSLIB_PREV                SET PREV IN NEW\n         OC    DXD_FIRST_DISPLAYED,DXD_FIRST_DISPLAYED\n         BNZ   MAIN0220                          BLOCK PRESENT\n         ST    R1,DXD_FIRST_DISPLAYED            SET FIRST ON CHAIN\n         B     MAIN0220\n         DROP  NEW\nMAIN0180 DS    0H\n         LTR   R6,R6                             LIB BLOCK EXIST?\n         BZ    MAIN0220                          NO\n         OI    DXD_FLAGS,$DXD_UPDATE             A LIB WAS UPDATED\n         ITRACE ID=DEL_LIB,                      DELETING A LIB BLOCK  +\n               RDATA1=R6\n         ICM   R1,15,SYSLIB_NEXT                 NEXT LIB ON CHAIN\n         BZ    MAIN0190\nNEXT     USING SYSLIB_DSECT,R1\n         MVC   NEXT.SYSLIB_PREV,SYSLIB_PREV      SET PREV IN NEXT\n         DROP  NEXT\nMAIN0190 DS    0H\n         ICM   R1,15,SYSLIB_PREV                 PREVIOUS ON CHAIN\n         BZ    MAIN0200                          NO PREVIOUS BLOCK\nPREV     USING SYSLIB_DSECT,R1\n         MVC   PREV.SYSLIB_NEXT,SYSLIB_NEXT      SET NEXT IN PREVIOUS\nMAIN0200 DS    0H\n         C     R6,DXD_FIRST_DISPLAYED            FIRST LIB DISPLAYED?\n         BNE   MAIN0210                          NO\n         MVC   DXD_FIRST_DISPLAYED,SYSLIB_NEXT   CHANGE TO NEXT BLOCK\nMAIN0210 DS    0H\n         FREEMAIN RU,                            FREEMAIN LIB BLOCK    +\n               A=(R6),                                                 +\n               LV=SYSLIB_DSECT_L\n         XC    0(4,R4),0(R4)                     CLEAR ADDR IN TABLE\nMAIN0220 DS    0H\n         ITRACE ID=NEXT\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         LA    R4,4(,R4)                         NEXT IN TABLE\n         BCT   R7,MAIN0130                       LOOP\n         TM    DXD_FLAGS,$DXD_UPDATE             ANY UPDATES?\n         BO    MAIN0010                          YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CLI   SPF_ZVERB,C'B'                    BOTTOM?\n         BE    MAIN0300\n         CLI   SPF_ZVERB,C'D'                    DOWN?\n         BE    MAIN0320\n         CLI   SPF_ZVERB,C'T'                    TOP?\n         BE    MAIN0330\n         CLI   SPF_ZVERB,C'U'                    UP?\n         BE    MAIN0340\n         B     MAIN0050\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=BOTTOM\n         ICM   R1,15,DXD_FIRST_SYSLIB            FIRST ON CHAIN\nTEMP     USING SYSLIB_DSECT,R1\n         BZ    EXIT0000                          SHOULD NOT HAPPEN!\nMAIN0310 DS    0H\n         LR    R6,R1                             SAVE THIS ADDR\n         ICM   R1,15,TEMP.SYSLIB_NEXT            NEXT LIB\n         BNZ   MAIN0310\n         B     MAIN0010                          BUILD DISPLAY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0320 DS    0H\n         ITRACE ID=DOWN\n         CLI   SPF_ZSCROLLA,C'M'                 MAX?\n         BE    MAIN0300                          YES\n         L     R6,DXD_LAST_DISPLAYED             LAST ITEM DISPLAYED\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0330 DS    0H\n         ITRACE ID=TOP\n         L     R6,DXD_FIRST_SYSLIB               FIRST DATA ITEM\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0340 DS    0H\n         ITRACE ID=UP\n         CLI   SPF_ZSCROLLA,C'M'                 MAX?\n         BE    MAIN0330                          YES\n         ICM   R1,15,DXD_FIRST_DISPLAYED         FIRST ON DISPLAY\n         BZ    EXIT0000                          SHOULD NOT HAPPEN!\n         L     R7,SPF_ZSCROLLN                   LINES ON DISPLAY\nMAIN0350 DS    0H\n         LR    R6,R1                             COPY ADDR\n         ICM   R1,15,TEMP.SYSLIB_PREV            PREVIOUS LIB\n         BZ    MAIN0010\n         BCT   R7,MAIN0350                       LOOP\n         B     MAIN0010\n         DROP  TEMP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*      Replace the existing LIB chain with the updated chain          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0500 DS    0H\n         ITRACE ID=TERM\n         TM    DXD_FLAGS,$DXD_ERROR              ERROR FLAG ON?\n         BO    MAIN0700\n* ------------------------------------------------------------------- *\n*        Free current chain                                           *\n* ------------------------------------------------------------------- *\nMAIN0580 DS    0H\n         ITRACE ID=FREECURR\n         ICM   R6,15,COMM_SYSLIB_NEXT\n         BZ    MAIN0600\nMAIN0590 DS    0H\n         LR    R1,R6\n         ICM   R6,15,SYSLIB_NEXT\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=SYSLIB_DSECT_L\n         LTR   R6,R6\n         BNZ   MAIN0590\n* ------------------------------------------------------------------- *\n*        Replace old chain with new                                   *\n* ------------------------------------------------------------------- *\nMAIN0600 DS    0H\n         ITRACE ID=SWITCH,                                             +\n               DATA1=COMM_SYSLIB_NEXT,                                 +\n               DATA2=DXD_FIRST_SYSLIB\n         MVC   COMM_SYSLIB_NEXT,DXD_FIRST_SYSLIB\n         ICM   R6,15,COMM_SYSLIB_NEXT            1ST SYSLIB\n         BZ    EXIT0000                          NO SYSLIB'S\n         XC    SYSLIB_PREV,SYSLIB_PREV           NO PREV BLOCK\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        User has requested exit with error(s) pending                *\n* ------------------------------------------------------------------- *\nMAIN0700 DS    0H\n         ITRACE ID=PURGE\n         MVI   COMM_MSG_ID,1\n         BAL   R5,MSG0000\n         MVC   SPF_MSG_1,COMM_MSG_1\n         MVC   SPF_MSG_2,COMM_MSG_2\n         MVC   SPF_MSG_3,COMM_MSG_3\n         MVC   SPF_MSG_4,COMM_MSG_4\n         MVC   SPF_MSG_5,COMM_MSG_5\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        User has requested all changes to be cancelled.              *\n*                                                                     *\n*        Free any blocks on new chain                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN1000 DS    0H\n         ITRACE ID=CANCEL\n         MVC   SPF_ZCMD,COMM_BLANKS              RESET COMMAND\n         ICM   R6,15,DXD_FIRST_SYSLIB            FIRST ON NEW CHAIN\n         BZ    EXIT0000\n         XC    DXD_FIRST_SYSLIB,DXD_FIRST_SYSLIB CLEAR FOR NEXT TIME\nMAIN1010 DS    0H\n         LR    R1,R6                             COPY ADDRESS\n         ICM   R6,15,SYSLIB_NEXT                 NEXT LIB\n         ITRACE ID=FREELIB,                                            +\n               RDATA1=R6,                                              +\n               DATA2=SYSLIB_DDNAME\n         FREEMAIN RU,                            FREEMAIN THE BLOCK    +\n               A=(1),                                                  +\n               LV=SYSLIB_DSECT_L\n         LTR   R6,R6                             ANOTHER ON CHAIN?\n         BNZ   MAIN1010                          YES\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0000  DS    0H\n         ITRACE ID=MSG,                                                +\n               DATA1=COMM_MSG_ID\n         CLC   SPF_MSG_1,COMM_BLANKS             ALREADY HAVE A MSG?\n         BNER  R5                                YES\n         MVC   COMM_MSG_CSECT,MODID\n         L     R15,V_DISMSG\n         BALR  R14,R15\n         MVC   SPF_MSG_1,COMM_MSG_1\n         MVC   SPF_MSG_2,COMM_MSG_2\n         MVC   SPF_MSG_3,COMM_MSG_3\n         MVC   SPF_MSG_4,COMM_MSG_4\n         MVC   SPF_MSG_5,COMM_MSG_5\n         BR    R5\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R0,DXD_SYSLIB_TABLE_SIZE          ADDR TABLE SIZE\n         L     R1,DXD_SYSLIB_TABLE               ADDR TABLE ADDR\n         FREEMAIN RU,                            FREEMAIN ADDR TABLE   +\n               A=(1),                                                  +\n               LV=(0)\n         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670\n         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680\n         LR    R15,R2                            SET RC\n         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680\n         BR    R14                               RETURN TO CALLER       ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC   Q(DXDSLIST)\n\nSYSLIB_ID     DC   CL8'SYSLIB'\nCAN           DC   C'CAN '\nCANCEL        DC   C'CANCEL '\nDISSDATA      DC   CL8'DISSDATA'\nDISPLAY       DC   CL8'DISPLAY'\nDIS0000       DC   CL8'DIS0000'\n\nERR01         DC   C'Not a PDS'\nERR01_L       EQU  *-ERR01\n\n              LTORG\n\nMSG01         DS   0C\n              DC   AL1($ATTR_INPUT)\nMSG01_DSN     DC   CL44' '\n              DC   AL1($ATTR_HIGH_YELLOW)\nMSG01_MSG     DC   CL30' '\nMSG01_L       EQU  *-MSG01\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSLIST              DSECT\n                      DS  18F\n\n                      DS  A             DUMMY FOR 'PREV' ON CHAIN\nDXD_FIRST_SYSLIB      DS  A             FIRST DATA ITEM ON CHAIN\n\nDXD_FIRST_DISPLAYED   DS  A             FIRST DATA ITEM DISPLAYED\nDXD_LAST_DISPLAYED    DS  A             LAST DATA ITEM DISPLAYED\n\nDXD_SYSLIB_TABLE      DS  A\nDXD_SYSLIB_TABLE_SIZE DS  F\n\nDXD_NBR_DISPLAYED     DS  H             NBR OF DATA ITEMS DISPLAYED\n\nDXD_FLAGS             DS  X             FLAGS\n$DXD_ERROR            EQU X'80'         .. SERIOUS ERROR\n$DXD_UPDATE           EQU X'40'         .. AREA(S) UPDATED\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              DISCOMM TYPE=DSECT\n              DISSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    DISASMDA\n              COPY    ATTRS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n\n              DCBD    DSORG=PO\nDCB_L         EQU     *-IHADCB\n\n              COPY    REGEQU\n              END     DISSLIST\n./ ADD NAME=DISSPFD  0100-08351-08351-1354-00010-00010-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*     This is separately LINKEDITed because the contents will         *\n*     be modified as the disassembler runs.                           *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n       DISSPFD TYPE=CSECT\n       END     DISSPFD\n./ ADD NAME=DISSPFV  0117-08351-09118-1552-00185-00382-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*     This is separately LINKEDITed because the contents will         *\n*     be modified as the disassembler runs.                           *\n*     re-entrant, refreshable, and re-usable.                         *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISSPFV  CSECT\nDISSPFV  AMODE 31\nDISSPFV  RMODE ANY\n* ------------------------------------------------------------------- *\n*        Dynamic area/scrolling variables                             *\n* ------------------------------------------------------------------- *\n         VDEF  NAME=LVLINE,          DEFINE VARIABLE                   +\n               DATA=SPF_LVLINE,      .. FIELD NAME IN DISSPFD          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VWIDTH,          DEFINE VARIABLE                   +\n               DATA=SPF_VWIDTH,      .. FIELD NAME IN DISSPFD          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VCOL,            DEFINE VARIABLE                   +\n               DATA=SPF_VCOL,        .. FIELD NAME IN DISSPFD          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VDEPTH,          DEFINE VARIABLE                   +\n               DATA=SPF_VDEPTH,      .. FIELD NAME IN DISSPFD          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VROW,            DEFINE VARIABLE                   +\n               DATA=SPF_VROW,        .. FIELD NAME IN DISSPFD          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=ZSCROLLN,        DEFINE VARIABLE                   +\n               DATA=SPF_ZSCROLLN,    .. FIELD NAME IN DISSPFD          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VPOS,            DEFINE VARIABLE                   +\n               DATA=SPF_CURSOR_POSITION,      NAME IN DISSPFD          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VTYPE,           DEFINE VARIABLE                   +\n               DATA=SPF_VTYPE,       .. FIELD NAME IN DISSPFD          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=ZSCROLLA,        DEFINE VARIABLE                   +\n               DATA=SPF_ZSCROLLA,    .. FIELD NAME IN DISSPFD          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=ZVERB,           DEFINE VARIABLE                   +\n               DATA=SPF_ZVERB,       .. FIELD NAME IN DISSPFD          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=VSCR,            DEFINE VARIABLE                   +\n               DATA=SPF_VSCR,        .. FIELD NAME IN DISSPFD          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=CHAR,            .. FORMAT                         +\n               FLAGS=$VAR_NEVER       .. NEVER VDEFINED\n         VDEF  NAME=PAREA,           DEFINE VARIABLE                   +\n               DATA=SPF_AREA,        .. FIELD NAME IN DISSPFD          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n\n* ------------------------------------------------------------------- *\n*        Main command                                                 *\n* ------------------------------------------------------------------- *\n         VDEF  NAME=ZCMD,            DEFINE VARIABLE                   +\n               DATA=SPF_ZCMD,        .. FIELD NAME IN DISSPFD          +\n               LENGTH=80,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n\n* ------------------------------------------------------------------- *\n*        Disassembler variables                                       *\n* ------------------------------------------------------------------- *\n         VDEF  NAME=CDSN,            DEFINE VARIABLE                   +\n               DATA=SPF_CONF_DSN,    .. FIELD NAME IN DISSPFD          +\n               LENGTH=44,            .. LENGTH                         +\n               FORM=CHAR,            .. FORMAT                         +\n               FLAGS=$VAR_VGET+$VAR_VPUT                                ETED\n         VDEF  NAME=CMEM,            DEFINE VARIABLE                   +\n               DATA=SPF_CONF_MEMBER, .. FIELD NAME IN DISSPFD          +\n               LENGTH=08,            .. LENGTH                         +\n               FORM=CHAR,            .. FORMAT                         +\n               FLAGS=$VAR_VGET+$VAR_VPUT                                ETED\n         VDEF  NAME=CVOL,            DEFINE VARIABLE                   +\n               DATA=SPF_CONF_VOLSER, .. FIELD NAME IN DISSPFD          +\n               LENGTH=06,            .. LENGTH                         +\n               FORM=CHAR,            .. FORMAT                         +\n               FLAGS=$VAR_VGET+$VAR_VPUT\n         VDEF  NAME=LDSN,            DEFINE VARIABLE                   +\n               DATA=SPF_LMOD_DSN,    .. FIELD NAME IN DISSPFD          +\n               LENGTH=44,            .. LENGTH                         +\n               FORM=CHAR,            .. FORMAT                         +\n               FLAGS=$VAR_VGET+$VAR_VPUT                                ETED\n         VDEF  NAME=LMOD,            DEFINE VARIABLE                   +\n               DATA=SPF_LMOD,        .. FIELD NAME IN DISSPFD          +\n               LENGTH=08,            .. LENGTH                         +\n               FORM=CHAR,            .. FORMAT                         +\n               FLAGS=$VAR_VGET+$VAR_VPUT                                ETED\n         VDEF  NAME=LVOL,            DEFINE VARIABLE                   +\n               DATA=SPF_LMOD_VOLSER, .. FIELD NAME IN DISSPFD          +\n               LENGTH=06,            .. LENGTH                         +\n               FORM=CHAR,            .. FORMAT                         +\n               FLAGS=$VAR_VGET+$VAR_VPUT\n         VDEF  NAME=LCSECT,          DEFINE VARIABLE                   +\n               DATA=SPF_CSECT,       .. FIELD NAME IN DISSPFD          +\n               LENGTH=08,            .. LENGTH                         +\n               FORM=CHAR,            .. FORMAT                         +\n               FLAGS=$VAR_VGET+$VAR_VPUT                                ETED\n         VDEF  NAME=LLEN,            DEFINE VARIABLE                   +\n               DATA=SPF_CSECT_LENGTH,   FIELD NAME IN DISSPFD          +\n               LENGTH=08,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PDD,             DEFINE VARIABLE                   +\n               DATA=SPF_DD,          .. FIELD NAME IN DISSPFD          +\n               LENGTH=08,            .. LENGTH                         +\n               FORM=CHAR\n         VDEF  NAME=PYN,             DEFINE VARIABLE                   +\n               DATA=SPF_YES_OR_NO,   .. FIELD NAME IN DISSPFD          +\n               LENGTH=03,            .. LENGTH                         +\n               FORM=CHAR\n         VDEF  NAME=F,               DEFINE VARIABLE                   +\n               DATA=SPF_FUNCTION,    .. FIELD NAME IN DISSPFD          +\n               LENGTH=01,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=DDID,            DEFINE VARIABLE                   +\n               DATA=SPF_DDID,        .. FIELD NAME IN DISSPFD          +\n               LENGTH=08,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PRFX,            DEFINE VARIABLE                   +\n               DATA=SPF_PREFIX,      .. FIELD NAME IN DISSPFD          +\n               LENGTH=04,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PR,              DEFINE VARIABLE                   +\n               DATA=SPF_REGISTER,    .. FIELD NAME IN DISSPFD          +\n               LENGTH=03,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PBEGIN,          DEFINE VARIABLE                   +\n               DATA=SPF_BEGIN,       .. FIELD NAME IN DISSPFD          +\n               LENGTH=08,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PEND,            DEFINE VARIABLE                   +\n               DATA=SPF_END,         .. FIELD NAME IN DISSPFD          +\n               LENGTH=08,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=ODSN,            DEFINE VARIABLE                   +\n               DATA=SPF_OUTPUT_DSN,  .. FIELD NAME IN DISSPFD          +\n               LENGTH=44,            .. LENGTH                         +\n               FORM=CHAR,            .. FORMAT                         +\n               FLAGS=$VAR_VGET+$VAR_VPUT                                ETED\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VDEF  NAME=PMSG1,           DEFINE VARIABLE                   +\n               DATA=SPF_MSG_1,       .. FIELD NAME IN DISSPFD          +\n               LENGTH=80,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PMSG2,           DEFINE VARIABLE                   +\n               DATA=SPF_MSG_2,       .. FIELD NAME IN DISSPFD          +\n               LENGTH=80,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PMSG3,           DEFINE VARIABLE                   +\n               DATA=SPF_MSG_3,       .. FIELD NAME IN DISSPFD          +\n               LENGTH=80,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PMSG4,           DEFINE VARIABLE                   +\n               DATA=SPF_MSG_4,       .. FIELD NAME IN DISSPFD          +\n               LENGTH=80,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PMSG5,           DEFINE VARIABLE                   +\n               DATA=SPF_MSG_5,       .. FIELD NAME IN DISSPFD          +\n               LENGTH=80,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         DC    X'FF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  VARDSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DISSPFD TYPE=DSECT\n         END   DISSPFV\n./ ADD NAME=DISTDBUG 0102-09119-09198-0814-00375-00375-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISTDBUG                                             *\n*                                                                    *\n*  Function:                                                         *\n*                                                                    *\n*   TSO mode debug                                                   *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISTDBUG CSECT\nDISTDBUG AMODE 31\nDISTDBUG RMODE ANY\n         USING DISTDBUG,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     MOD0000                           SKIP EYECATCHER\nMODID    DC    CL8'DISTDBUG'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDTDBUG,R13\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD                   DISSPFD ADDR\n         USING DISSPFD,R9                        DEFINE BASE\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0000 DS    0H\n         ITRACE ID=BUILD\n         L     R0,COMM_VDATA_ADDR                VDATA ADDRESS\n         L     R1,COMM_VDATA_SIZE                VDATA SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                            INITIALIZE VDATA\n         L     R8,COMM_VDATA_ADDR                VDATA ADDR\n         L     R7,SPF_VDEPTH\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         MVC   0(MSG01_L,R8),MSG01\n         USING MSG01,R8                          DEFINE BASE\n         UNPK  DXD_WORK(9),COMM_TRACE_1STX(5)    UNPACK\n         MVC   MSG01_1STX,DXD_WORK               COPY UNPACKED ADDR\n         TR    MSG01_1STX,HEXCHAR                TRANSLATE\n         UNPK  DXD_WORK(9),COMM_TRACE_LAST(5)    UNPACK\n         MVC   MSG01_LAST,DXD_WORK               COPY UNPACKED ADDR\n         TR    MSG01_LAST,HEXCHAR                TRANSLATE\n         UNPK  DXD_WORK(9),COMM_TRACE_CURRENT(5) UNPACK\n         MVC   MSG01_CURRENT,DXD_WORK            COPY UNPACKED ADDR\n         TR    MSG01_CURRENT,HEXCHAR             TRANSLATE\n         UNPK  DXD_WORK(3),COMM_TRACE_CURRENT(2) UNPACK\n         MVC   MSG01_FLAGS,DXD_WORK              COPY UNPACKED FLAGS\n         TR    MSG01_FLAGS,HEXCHAR               TRANSLATE\n         DROP  R8\n         BAL   R6,MAIN0100\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         MVC   0(MSG02_L,R8),MSG02\n         USING MSG02,R8                          DEFINE BASE\n         MVC   MSG02_NAME,COMM_CSECT             CSECT NAME\n         UNPK  DXD_WORK(9),COMM_CSECT_EP(5)      UNPACK ENTRY POINT\n         MVC   MSG02_EP,DXD_WORK\n         TR    MSG02_EP,HEXCHAR                  TRANSLATE\n         UNPK  DXD_WORK(9),COMM_CSECT_TEXT(5)    UNPACK TEXT ADDR\n         MVC   MSG02_TEXT,DXD_WORK\n         TR    MSG02_TEXT,HEXCHAR                TRANSLATE\n         UNPK  DXD_WORK(9),COMM_CSECT_LENGTH(5)  UNPACK LENGTH\n         MVC   MSG02_LENGTH,DXD_WORK\n         TR    MSG02_LENGTH,HEXCHAR              TRANSLATE\n         DROP  R8\n         BAL   R6,MAIN0100\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         MVC   0(MSG03_L,R8),MSG03\n         USING MSG03,R8                          DEFINE BASE\n         MVC   MSG03_NAME,COMM_OPCODE_TABLE_NAME\n         UNPK  DXD_WORK(9),COMM_OPCODE_TABLE_ADDR\n         MVC   MSG03_ADDR,DXD_WORK               COPY UNPACKED ADDR\n         TR    MSG03_ADDR,HEXCHAR                TRANSLATE\n         DROP  R8\n         BAL   R6,MAIN0100\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         MVC   0(MSG04_L,R8),MSG04\n         USING MSG04,R8                          DEFINE BASE\n         UNPK  DXD_WORK(9),COMM_NAME_NEXT(5)     UNPACK ADDR\n         MVC   MSG04_ADDR,DXD_WORK               COPY UNPACKED ADDR\n         TR    MSG04_ADDR,HEXCHAR                TRANSLATE\n         DROP  R8\n         BAL   R6,MAIN0100\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         MVC   0(MSG05_L,R8),MSG05\n         USING MSG05,R8                          DEFINE BASE\n         UNPK  DXD_WORK(9),COMM_ESD_NEXT(5)      UNPACK ADDR\n         MVC   MSG05_ADDR,DXD_WORK               COPY UNPACKED ADDR\n         TR    MSG05_ADDR,HEXCHAR                TRANSLATE\n         DROP  R8\n         BAL   R6,MAIN0100\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         MVC   0(MSG06_L,R8),MSG06\n         USING MSG06,R8                          DEFINE BASE\n         UNPK  DXD_WORK(9),COMM_RLD_AREA_NEXT(5) UNPACK ADDR\n         MVC   MSG06_ADDR,DXD_WORK               COPY UNPACKED ADDR\n         TR    MSG06_ADDR,HEXCHAR                TRANSLATE\n         DROP  R8\n         BAL   R6,MAIN0100\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         MVC   0(MSG07_L,R8),MSG07\n         USING MSG07,R8                          DEFINE BASE\n         UNPK  DXD_WORK(9),COMM_DSECT_NEXT(5)    UNPACK ADDR\n         MVC   MSG07_ADDR,DXD_WORK               COPY UNPACKED ADDR\n         TR    MSG07_ADDR,HEXCHAR                TRANSLATE\n         DROP  R8\n         BAL   R6,MAIN0100\n         B     MAIN0110\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0100 DS    0H\n         ITRACE ID=NEXT,                                               +\n               RDATA1=R8,                                              +\n               RDATA2=R7\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCTR  R7,R6\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nMAIN0110 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_SPF_PANEL,PANEL_NAME         SET PANEL NAME\n         L     R15,V_DISDISP                     DISDISP ENTRY POINT\n         BALR  R14,R15                           DISPLAY PANEL\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15\n         LTR   R2,R15                            RC = ZERO?\n         BNZ   EXIT0000                          NO\n*---------------------------------------------------------------------*\n*        Anything for MSG01                                           *\n*---------------------------------------------------------------------*\n         L     R8,COMM_VDATA_ADDR                VDATA ADDRESS\n\n*---------------------------------------------------------------------*\n*        Anything for MSG02                                           *\n*---------------------------------------------------------------------*\n         A     R8,SPF_VWIDTH\n\n*---------------------------------------------------------------------*\n*        Anything for MSG03                                           *\n*---------------------------------------------------------------------*\n         A     R8,SPF_VWIDTH\n\n*---------------------------------------------------------------------*\n*        Anything for MSG04                                           *\n*---------------------------------------------------------------------*\n         A     R8,SPF_VWIDTH\n\n*---------------------------------------------------------------------*\n*        Anything for MSG05                                           *\n*---------------------------------------------------------------------*\n         A     R8,SPF_VWIDTH\n\n*---------------------------------------------------------------------*\n*        Anything for MSG06                                           *\n*---------------------------------------------------------------------*\n         A     R8,SPF_VWIDTH\n         USING MSG06,R8\n         CLI   MSG06_SELECT,C' '                 SELECTED?\n         BE    MAIN0120                          NO\n         ITRACE ID=DISP_RLD\n         MVI   MSG06_SELECT,C' '                 RESET SELECT\n         MVC   SPF_MSG_3(RLD_MSG_L),RLD_MSG\n         L     R1,COMM_RLD_AREA_NEXT\n         L     R15,V_DISXLIST\n         BALR  R14,R15\n         B     MAIN0000                          REBUILD DISPLAY\n         DROP  R8\n*---------------------------------------------------------------------*\n*        Anything for MSG07                                           *\n*---------------------------------------------------------------------*\nMAIN0120 DS    0H\n         A     R8,SPF_VWIDTH\n         USING MSG07,R8\n         CLI   MSG07_SELECT,C' '                 SELECTED?\n         BE    MAIN0110                          NO\n         ITRACE ID=DISPDSCT\n         MVI   MSG07_SELECT,C' '                 RESET SELECT\n         MVC   SPF_MSG_3(DSECT1_MSG_L),DSECT1_MSG\n         L     R1,COMM_DSECT_NEXT\n         L     R15,V_DISDDSCT\n         BALR  R14,R15\n         B     MAIN0000                          REBUILD DISPLAY\n         DROP  R8\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670\n         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680\n         LR    R15,R2                            SET RC\n         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680\n         BR    R14                               RETURN TO CALLER       ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START     DC   Q(DXDTDBUG)\n\nPANEL_NAME    DC   CL8'DISTDBUG'\n\nHEXCHAR       EQU  *-C'0'\n              DC   C'0123456789ABCDEF'\n\n              LTORG\n\n\nMSG01         DS   0C\n              DC   AL1($ATTR_NORMAL)\n              DC   C' '\n              DC   AL1($ATTR_HIGH)\n              DC   CL08'TRACE'\n              DC   AL1($ATTR_HIGH_TURQUOISE)\n              DC   C'  1STX '\n              DC   AL1($ATTR_NORMAL)\nMSG01_1STX    DC   CL08' '\n              DC   AL1($ATTR_HIGH_TURQUOISE)\n              DC   C'  LAST '\n              DC   AL1($ATTR_NORMAL)\nMSG01_LAST    DC   CL8' '\n              DC   AL1($ATTR_HIGH_TURQUOISE)\n              DC   C'  CURR '\n              DC   AL1($ATTR_NORMAL)\nMSG01_CURRENT DC   CL8' '\n              DC   AL1($ATTR_HIGH_TURQUOISE)\n              DC   C'  FLAGS '\n              DC   AL1($ATTR_NORMAL)\nMSG01_FLAGS   DC   CL2' '\nMSG01_L       EQU  *-MSG01\n\nMSG02         DS   0C\n              DC   AL1($ATTR_NORMAL)\n              DC   C' '\n              DC   AL1($ATTR_HIGH)\n              DC   CL08'CSECT'\n              DC   AL1($ATTR_HIGH_TURQUOISE)\n              DC   C'  NAME '\n              DC   AL1($ATTR_NORMAL)\nMSG02_NAME    DC   CL08' '\n              DC   AL1($ATTR_HIGH_TURQUOISE)\n              DC   C'  EP   '\n              DC   AL1($ATTR_NORMAL)\nMSG02_EP      DC   CL8' '\n              DC   AL1($ATTR_HIGH_TURQUOISE)\n              DC   C'  TEXT '\n              DC   AL1($ATTR_NORMAL)\nMSG02_TEXT    DC   CL8' '\n              DC   AL1($ATTR_HIGH_TURQUOISE)\n              DC   C'  LENGTH'\n              DC   AL1($ATTR_NORMAL)\nMSG02_LENGTH  DC   CL8' '\nMSG02_L       EQU  *-MSG02\n\nMSG03         DS   0C\n              DC   AL1($ATTR_NORMAL)\n              DC   C' '\n              DC   AL1($ATTR_HIGH)\n              DC   CL08'OPCODE'\n              DC   AL1($ATTR_HIGH_TURQUOISE)\n              DC   C'  NAME '\n              DC   AL1($ATTR_NORMAL)\nMSG03_NAME    DC   CL08' '\n              DC   AL1($ATTR_HIGH_TURQUOISE)\n              DC   C'  ADDR '\n              DC   AL1($ATTR_NORMAL)\nMSG03_ADDR    DC   CL8' '\nMSG03_L       EQU  *-MSG03\n\nMSG04         DS   0C\n              DC   AL1($ATTR_INPUT)\n              DC   C' '\n              DC   AL1($ATTR_HIGH)\n              DC   CL08'NAMES '\n              DC   AL1($ATTR_HIGH_TURQUOISE)\n              DC   C'  ADDR '\n              DC   AL1($ATTR_NORMAL)\nMSG04_ADDR    DC   CL8' '\nMSG04_L       EQU  *-MSG04\n\nMSG05         DS   0C\n              DC   AL1($ATTR_INPUT)\n              DC   C' '\n              DC   AL1($ATTR_HIGH)\n              DC   CL08'ESD   '\n              DC   AL1($ATTR_HIGH_TURQUOISE)\n              DC   C'  ADDR '\n              DC   AL1($ATTR_NORMAL)\nMSG05_ADDR    DC   CL8' '\nMSG05_L       EQU  *-MSG05\n\nMSG06         DS   0C\n              DC   AL1($ATTR_INPUT)\nMSG06_SELECT  DC   C' '\n              DC   AL1($ATTR_HIGH)\n              DC   CL08'RLD   '\n              DC   AL1($ATTR_HIGH_TURQUOISE)\n              DC   C'  ADDR '\n              DC   AL1($ATTR_NORMAL)\nMSG06_ADDR    DC   CL8' '\nMSG06_L       EQU  *-MSG06\n\nMSG07         DS   0C\n              DC   AL1($ATTR_INPUT)\nMSG07_SELECT  DC   C' '\n              DC   AL1($ATTR_HIGH)\n              DC   CL08'DSECT'\n              DC   AL1($ATTR_HIGH_TURQUOISE)\n              DC   C'  ADDR '\n              DC   AL1($ATTR_NORMAL)\nMSG07_ADDR    DC   CL8' '\nMSG07_L       EQU  *-MSG07\n\nRLD_MSG       DS   0C\n              DC   C'RLD items'\nRLD_MSG_L     EQU  *-RLD_MSG\n\nDSECT1_MSG    DS   0C\n              DC   C'DSECT1 chain'\nDSECT1_MSG_L  EQU  *-DSECT1_MSG\n\nDSECT2_MSG    DS   0C\n              DC   C'DSECT2 chain'\nDSECT2_MSG_L  EQU  *-DSECT2_MSG\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDTDBUG             DSECT\n                     DS   18F\n\nDXD_WORK      DS     CL9\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              DISCOMM TYPE=DSECT\n              DISSPFD TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              COPY    DISASMDA\n\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n              COPY    ATTRS\n              COPY    REGEQU\n              END     DISTDBUG\n./ ADD NAME=DISTEXT  0101-09119-09198-0814-00182-00182-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISTEXT                                              *\n*                                                                    *\n*  Function:                                                         *\n*   LOAD the requested CSECT's text                                  *\n*                                                                    *\n*   DISBIND has already established a dialog                         *\n*   COMM_CSECT_LENGTH has been set by DISNAME                        *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISTEXT  CSECT\nDISTEXT  AMODE 31\nDISTEXT  RMODE ANY\n         USING DISTEXT,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R11,R15               SET BASE REG\n         B     MOD0000               SKIP EYECATCHER\n         DC    CL8'DISTEXT'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS  WORK AREA\n         A     R15,DXD_START         PLUS DISP TO OUR PORTION\n         ST    R13,4(,R15)           CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R15,8(,R13)           CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R15               SET SAVE AREA ADDRESS\n         USING DXDTEXT,R13\n         ITRACE ID=ENTRY\n* ------------------------------------------------------------------- *\n*        Obtain and initialize buffer                                 *\n* ------------------------------------------------------------------- *\n         ITRACE ID=GET_BUFF\n         IEWBUFF FUNC=GETBUF,                                          +\n               TYPE=TEXT\n         ST    R8,DXD_BUFFER\n         ITRACE ID=INITBUFF\n         IEWBUFF FUNC=INITBUF,                                         +\n               TYPE=TEXT\n         ITRACE ID=BUFF,                                               +\n               RDATA1=R8,                                              +\n               RDATA2=R7\n         L     R0,COMM_CSECT_LENGTH      CSECT'S LENGTH\n         GETMAIN RU,                     GETMAIN AREA FOR TEXT         +\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,COMM_CSECT_TEXT        SAVE ADDRESS\n         ST    R1,DXD_TEXT_ADDR          SAVE ADDRESS\n         XC    DXD_TEXT_READ,DXD_TEXT_READ\n         A     R1,COMM_CSECT_LENGTH      ADD LENGTH\n         BCTR  R1,0                      RELATIVE TO ZERO\n         ST    R1,COMM_CSECT_TEXT_END    TEXT ENDING ADDRESS\n         ITRACE ID=TEXT,                                               +\n               DATA1=COMM_CSECT_TEXT,                                  +\n               DATA2=COMM_CSECT_LENGTH\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\nTEXT0000 DS    0H\n         ITRACE ID=GET_TEXT\n         XC    DXD_CURSOR,DXD_CURSOR\n         L     R8,DXD_BUFFER\n         IEWBIND FUNC=GETD,                                            +\n               VERSION=5,                                              +\n               WORKMOD=COMM_DIALOG_WORKMOD,                            +\n               CLASS=B_TEXT,                                           +\n               SECTION=COMM_CSECT_NAME_LENGTH,                         +\n               COUNT=COMM_CSECT_LENGTH,                                +\n               AREA=IEWBTXT,                                           +\n               CURSOR=DXD_CURSOR,                                      +\n               RETCODE=DXD_RETURN_CODE,                                +\n               RSNCODE=DXD_REASON_CODE,                                +\n               MF=(E,DXD_IEWBIND,COMPLETE)\n         ITRACE ID=TEXT_RC,                                            +\n               DATA1=DXD_RETURN_CODE,                                  +\n               DATA2=DXD_REASON_CODE\n         CLC   DXD_RETURN_CODE,F8\n         BH    ERR0010\n         BE    ERR0020\n         CLC   DXD_RETURN_CODE,F4\n         BL    TEXT0010\n         CLC   DXD_REASON_CODE,X_83000800\n         BE    TEXT0010\n         CLC   DXD_REASON_CODE,X_83000801\n         BE    EXIT0000\nTEXT0010 DS    0H\n         L     R1,DXD_TEXT_READ\n         A     R1,TXTH_ENTRY_COUNT\n         C     R1,COMM_CSECT_LENGTH\n         BNH   TEXT0020\n         L     R1,COMM_CSECT_LENGTH\n         S     R1,DXD_TEXT_READ\nTEXT0020 DS    0H\n         LR    R2,R1\n         L     R0,DXD_TEXT_ADDR\n         LA    R14,TXTH_END\n         LR    R15,R0\n         MVCL  R0,R14\n         L     R0,DXD_TEXT_ADDR\n         A     R0,TXTH_ENTRY_COUNT\n         ST    R0,DXD_TEXT_ADDR\n         L     R1,DXD_TEXT_READ\n         AR    R1,R2\n         ST    R1,DXD_TEXT_READ\n         OC    DXD_REASON_CODE,DXD_REASON_CODE\n         BZ    TEXT0000\n         L     R8,DXD_BUFFER\n         IEWBUFF FUNC=FREEBUF,                                         +\n               TYPE=TEXT\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)           RESTORE REGISTER 13                ASE01670\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nERR0010  DS    0H\n         DC    H'0'\nERR0020  DS    0H\n         DC    H'0'\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START     DC   Q(DXDTEXT)\nF4            DC   F'4'\nF8            DC   F'8'\n\nB_TEXT        DC   XL2'6',C'B_TEXT'\nX_83000800    DC   X'83000800'\nX_83000801    DC   X'83000801'\n\n         IEWBUFF FUNC=MAPBUF,                                          +\n               TYPE=TEXT,                                              +\n               HEADREG=R8,                                             +\n               ENTRYREG=R7,                                            +\n               SIZE=32768,                                             +\n               VERSION=5\n\n              IEWBIND MF=(L,IEWBIND_I)\nIEWBIND_L     EQU  *-IEWBIND_I\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDTEXT           DSECT\n                  DS   18F\nDXD_CSECT         DS   CL8\nDXD_RETURN_CODE   DS   F\nDXD_REASON_CODE   DS   F\n\nDXD_BUFFER        DS   A\nDXD_TEXT_ADDR     DS   A\nDXD_TEXT_READ     DS   A\n\nDXD_CURSOR        DS   F\n\nDXD_DISP          DS   F\n\n\nDXD_IEWBIND       DS   0F,(IEWBIND_L)X\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n                  DISCOMM  TYPE=DSECT\n\n                  IFGACB   AM=VSAM\nACB_L             EQU      *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n                  COPY     DISASMDA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY REGEQU\n         END  DISTEXT\n./ ADD NAME=DISTIOT  0103-09119-09198-1534-00208-00206-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*          Determine DD's present                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISTIOT  CSECT\nDISTIOT  AMODE 31\nDISTIOT  RMODE ANY\n         USING DISCOMM,R12\n         USING DISTIOT,R11\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R11,R15               SET BASE REG\n         B     INIT0000              SKIP EYECATCHER\nMODID    DC    CL8'DISTIOT'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\nINIT0000 DS    0H\n         L     R15,COMM_DXD_ADDRESS   WORK AREA\n         A     R15,DXD_START\n         ST    R15,8(,R13)\n         ST    R13,4(,R15)\n         LR    R13,R15\n         USING DXDTIOT,R13\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n         ITRACE ID=ENTRY\n* ------------------------------------------------------------------- *\n*         Scan TIOT                                                   *\n* ------------------------------------------------------------------- *\n         USING PSA,R0                      DEFINE BASE\n         L     R1,PSATNEW                  MY TCB'S ADDRESS\n         USING TCB,R1                      DEFINE TCB BASE\n         L     R2,TCBTIO                   TIOT ADDRESS\n         USING TIOT1,R2                    DEFINE BASE\n         LA    R3,TIOENTRY                 FIRST TIOT ENTRY\n         USING TIOENTRY,R3                 DEFINE BASE\n         SR    R4,R4                       CLEAR FOR LENGTHS\nTIOT0010 DS    0H\n         ICM   R4,1,TIOELNGH               LENGTH OF THIS ENTRY\n         BZ    EXIT0000                    END OF TABLE\n         ITRACE ID=DD,                                                 +\n               DATA1=TIOEDDNM\n         CLC   TIOEDDNM,DISIN_DD           DISIN DD?\n         BE    TIOT0030                    YES\n         CLC   TIOEDDNM,DISPRINT_DD        DISPRINT DD?\n         BE    TIOT0040                    YES\n         CLC   TIOEDDNM,DISMOD_DD          DISMOD DD?\n         BE    TIOT0050                    YES\n         CLC   TIOEDDNM,DISPUNCH_DD        DISPUNCH DD?\n         BE    TIOT0060                    YES\n         CLC   TIOEDDNM,DISDEBUG_DD        DISDEBUG DD?\n         BE    TIOT0070                    YES\n         CLC   TIOEDDNM,SYSIN_DD           SYSIN DD?\n         BE    TIOT0080                    YES\n         CLC   TIOEDDNM,SYSPRINT_DD        SYSPRINT DD?\n         BE    TIOT0090                    YES\n         CLC   TIOEDDNM,DISTRACE_DD        DISTRACE DD?\n         BE    TIOT0100                    YES\n         CLC   DSECT_DD,TIOEDDNM           DSECT DD?\n         BE    TIOT0110                    YES\nTIOT0020 DS    0H\n         AR    R3,R4                       NEXT TIOT ENTRY\n         B     TIOT0010                    LOOP\nTIOT0030 DS    0H\n         ITRACE ID=DISIN                   DISIN DD FOUND\n         OI    COMM_DDS,$DISIN_DD          INDICATE DISIN IS PRESENT\n         B     TIOT0020\nTIOT0040 DS    0H\n         ITRACE ID=DISPRINT                DISPRINT DD FOUND\n         OI    COMM_DDS,$DISPRINT_DD       INDICATE DISPRINT IS PRESENT\n         B     TIOT0020\nTIOT0050 DS    0H\n         ITRACE ID=DISMOD                  DISMOD DD FOUND\n         OI    COMM_DDS,$DISMOD_DD         INDICATE DISMOD IS PRESENT\n         B     TIOT0020\nTIOT0060 DS    0H\n         ITRACE ID=DISPUNCH                DISPUNCH DD FOUND\n         OI    COMM_DDS,$DISPUNCH_DD       INDICATE DISPUNCH IS PRESENT\n         CLI   COMM_RUN_MODE,$COMM_RUN_TSO TSO MODE?\n         BNE   TIOT0020                    NO.. SKIP SPF STUFF\n         SR    R1,R1\n         ICM   R1,7,TIOEJFCB               JFCB TOKEN\n         LA    R1,16(,R1)                  JFCB ADDRESS\n         USING JFCB,R1\n         MVC   SPF_OUTPUT_DSN,JFCBDSNM     COPY DSN\n         B     TIOT0020\nTIOT0070 DS    0H\n         ITRACE ID=DISDEBUG                DISDEBUG DD FOUND\n         OI    COMM_DDS,$DISDEBUG_DD       INDICATE DISDEBUG IS PRESENT\n         B     TIOT0020\nTIOT0080 DS    0H\n         ITRACE ID=SYSIN                   SYSIN DD FOUND\n         OI    COMM_ASSEM_DDS,$SYSIN_DD    INDICATE SYSIN IS PRESENT\n         B     TIOT0020\nTIOT0090 DS    0H\n         ITRACE ID=SYSPRINT                SYSPRINT DD FOUND\n         OI    COMM_ASSEM_DDS,$SYSPRINT_DD INDICATE SYSPRINT IS PRESENT\n         B     TIOT0020\nTIOT0100 DS    0H\n         ITRACE ID=DISTRACE                DISTRACE DD FOUND\n         OI    COMM_DDS,$DISTRACE_DD       INDICATE DISTRACE IS PRESENT\n         B     TIOT0020\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nTIOT0110 DS    0H\n         ITRACE ID=DSECT_DD,                                           +\n               DATA1=TIOEDDNM\n         GETMAIN RU,                                                   +\n               LV=KSDS_DSECT_L,                                        +\n               LOC=BELOW\n         LR    R6,R1                       COPY ADDRESS\n         USING KSDS_DSECT,R6\n         LA    R1,COMM_KSDS_NEXT           1ST KSDS BLOCK POINTER\nTIOT0120 DS    0H\n         ICM   R2,15,0(R1)                 AT END OF CHAIN?\n         BZ    TIOT0130                    YES\n         LR    R1,R2                       COPY ADDRESS\n         B     TIOT0120                    LOOP\nTIOT0130 DS    0H\n         ST    R6,0(,R1)                   ADD NEW BLOCK TO CHAIN\n         XC    0(KSDS_DSECT_L,R6),0(R6)\n         MVC   KSDS_EYE,KSDS_ID\n         MVC   KSDS_DDNAME,TIOEDDNM\n         MVC   KSDS_ACB(ACB_L),ACB_I\n         USING IFGACB,KSDS_ACB\n         MVC   ACBDDNM,TIOEDDNM            SET DD NAME\n         SR    R1,R1\n         ICM   R1,7,TIOEJFCB               JFCB TOKEN\n         LA    R1,16(,R1)                  JFCB ADDRESS\n         USING JFCB,R1\n         MVC   KSDS_DSNAME,JFCBDSNM        COPY DSN\n         B     TIOT0020\n*---------------------------------------------------------------------*\n*                                                                     *\n*        DSECT info is recorded in VSAM KSDSes.                       *\n*        I want to allow for the use of multiple sets of              *\n*        pre-processed DSECTS.                                        *\n*        VSAM KSDSes cannot be concatenated.                          *\n*        So.. you may provide DDs that begin with the string \"DSECT\". *\n*                                                                     *\n*        For example:                                                 *\n*           //DSECTIBM    DD  DSN=.....IBM.DSECTS,DISP=SHR            *\n*           //DSECTU1     DD  DSN=.....USER.DSECTS1,DISP=SHR          *\n*           //DSECTU2     DD  DSN=.....USER.DSECTS2,DISP=SHR          *\n*                                                                     *\n*                                                                     *\n*        The disassembler searches the ASM,START/ASM,END source       *\n*        for a DSECT if provided, then the DSECT DDs in the order     *\n*        they occur in the JCL.                                       *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         L     R13,4(,R13)                 RESTORE R13\n         LM    R14,R12,12(R13)             RESTORE OTHER REGISTERS      ASE01680\n         SR    R15,R15                     SET GOOD RETURN CODE         ASE01690\n         BR    R14                         RETURN TO CALLER             ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START      DC    Q(DXDTIOT)\nACB_I    ACB   AM=VSAM,                                                +\n               DDNAME=ANYDD,                                           +\n               MACRF=(KEY,DIR,SEQ)\nDISIN_DD       DC    CL8'DISIN'\nDISPRINT_DD    DC    CL8'DISPRINT'\nDISMOD_DD      DC    CL8'DISMOD'\nDISPUNCH_DD    DC    CL8'DISPUNCH'\nDISDEBUG_DD    DC    CL8'DISDEBUG'\nDSECT_DD       DC    C'DSECT'\nSYSIN_DD       DC    CL8'SYSIN'\nSYSPRINT_DD    DC    CL8'SYSPRINT'\nDISTRACE_DD    DC    CL8'DISTRACE'\nKSDS_ID        DC    CL8'KSDSBLOK'\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDTIOT        DSECT\n               DS    18F             REGISTER SAVE AREA\nDXD_CSECT      DS    CL8\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               DISCOMM  TYPE=DSECT\n               COPY     DISASMDA\n               DISSPFD  TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               COPY     REGEQU\n               IHAPSA   LIST=NO\n               IKJTCB   LIST=NO\n               IEFTIOT1\n\nJFCB           DSECT\n               IEFJFCBN\n\n               IFGACB   AM=VSAM\nACB_L    EQU   *-IFGACB\n               END      DISTIOT\n./ ADD NAME=DISTLSTB 0101-09118-09198-0816-00291-00291-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: DISTLSTB                                              *\n*                                                                     *\n*  Function:                                                          *\n*   Display the module text for batch mode                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISTLSTB CSECT\nDISTLSTB AMODE 31\nDISTLSTB RMODE ANY\n         USING DISTLSTB,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'DISTLSTB'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS\n         A     R15,DXD_START\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXDTLSTB,R13\n         USING IHADCB,DISTEMP_DCB\n         USING PR_LINE,PRINT_DATA\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         MVC   COMM_SUBHEAD,COMM_BLANKS\n         MVC   COMM_SUBHEAD(HEADING_L),HEADING\n         MVC   COMM_SUBHEAD+(HEADING_CSECT-HEADING)(L'HEADING_CSECT),CO+\n               MM_CSECT\n         UNPK  COMM_SUBHEAD+(HEADING_LENGTH-HEADING)(9),COMM_CSECT_LENG+\n               TH(5)\n         TR    COMM_SUBHEAD+(HEADING_LENGTH-HEADING)(8),COMM_HEXCHAR\n         MVI   COMM_SUBHEAD+(HEADING_LENGTH-HEADING)+8,C' '\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=BATCH\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT\n         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01\n         BAL   R10,DEBUG000\n         MVI   PRINT_COMMAND,$PRINT_HEADING\n         L     R15,V_DISPRINT\n         BALR  R14,R15\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLIST0100 DS    0H\n         XC    DXD_DISP,DXD_DISP\n         L     R8,COMM_CSECT_TEXT             TEXT\nLIST0110 DS    0H\n         MVC   PRINT_DATA,COMM_BLANKS\n         L     R7,COMM_CSECT_LENGTH           CSECT LENGTH\n         S     R7,DXD_DISP                    LENGTH REMAINING\n         CH    R7,H32                         MORE THAN 32?\n         BNH   LIST0120                       NO\n         LH    R7,H32                         LIMIT TO 32\nLIST0120 DS    0H\n         BCTR  R7,0                           CONVERT TO INSTR LENGTH\n         MVI   PR_ASTERISK_1,C'*'\n         MVI   PR_ASTERISK_2,C'*'\n         MVC   DXD_HEX(DXD_HEX_L),COMM_BLANKS\n         XC    COMM_INFO_01(32),COMM_INFO_01  INITIALIZE WORK AREA\n         UNPK  PR_DISP(9),DXD_DISP(5)         UNPACK DISP\n         TR    PR_DISP,COMM_HEXCHAR           TRANSLATE\n         MVI   PR_DISP+8,C' '\n         EX    R7,MVC_01                      COPY TEXT\n         EX    R7,MVC_02                      COPY TEXT\n         EX    R7,TR_01                       TRANSLATE UNPRINTABLES\n         UNPK  COMM_INFO_02(9),COMM_INFO_01+00(5)\n         TR    COMM_INFO_02(8),COMM_HEXCHAR\n         MVC   DXD_HEX_01,COMM_INFO_02\n         UNPK  COMM_INFO_02(9),COMM_INFO_01+04(5)\n         TR    COMM_INFO_02(8),COMM_HEXCHAR\n         MVC   DXD_HEX_02,COMM_INFO_02\n         UNPK  COMM_INFO_02(9),COMM_INFO_01+08(5)\n         TR    COMM_INFO_02(8),COMM_HEXCHAR\n         MVC   DXD_HEX_03,COMM_INFO_02\n         UNPK  COMM_INFO_02(9),COMM_INFO_01+12(5)\n         TR    COMM_INFO_02(8),COMM_HEXCHAR\n         MVC   DXD_HEX_04,COMM_INFO_02\n         UNPK  COMM_INFO_02(9),COMM_INFO_01+16(5)\n         TR    COMM_INFO_02(8),COMM_HEXCHAR\n         MVC   DXD_HEX_05,COMM_INFO_02\n         UNPK  COMM_INFO_02(9),COMM_INFO_01+20(5)\n         TR    COMM_INFO_02(8),COMM_HEXCHAR\n         MVC   DXD_HEX_06,COMM_INFO_02\n         UNPK  COMM_INFO_02(9),COMM_INFO_01+24(5)\n         TR    COMM_INFO_02(8),COMM_HEXCHAR\n         MVC   DXD_HEX_07,COMM_INFO_02\n         UNPK  COMM_INFO_02(9),COMM_INFO_01+28(5)\n         TR    COMM_INFO_02(8),COMM_HEXCHAR\n         MVC   DXD_HEX_08,COMM_INFO_02\n         LA    R1,LENGTH_TABLE(R7)\n         SR    R2,R2\n         IC    R2,0(R1)\n         EX    R2,MVC_03\n         ITRACE ID=PUT,                                                +\n               DATA1=PR_LINE,                                          +\n               DATA2=PR_LINE+8\n         MVI   PRINT_COMMAND,$PRINT_PRINT     SET COMMAND\n         L     R15,V_DISPRINT\n         BALR  R14,R15                        PRINT\n         LA    R8,32(,R8)                     UPDATE TEXT ADDRESS\n         L     R7,DXD_DISP\n         LA    R7,32(,R7)\n         ST    R7,DXD_DISP\n         C     R7,COMM_CSECT_LENGTH\n         BL    LIST0110\n         MVC   COMM_SUBHEAD,COMM_BLANKS       CLEAR SUB HEADING\n         MVI   PRINT_COMMAND,$PRINT_HEADING   SET COMMAND\n         L     R15,V_DISPRINT\n         BALR  R14,R15                        FORCE HEADING\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDEBUG000 DS    0H\n         CLI   COMM_RUN_MODE,$COMM_RUN_TSO    TSO MODE?\n         BER   R10                            YES\n         L     R15,V_DISDEBUG\n         BALR  R14,R15                        CALL DISDEBUG\n         BR    R10\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02\n         BAL   R10,DEBUG000\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMVC_01   MVC   PR_CHAR(0),0(R8)               COPY TEXT\nMVC_02   MVC   COMM_INFO_01(0),0(R8)          COPY TEXT\nMVC_03   MVC   PR_HEX(0),DXD_HEX              COPY HEX\nTR_01    TR    PR_CHAR(0),PRINTABLE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START         DC   Q(DXDTLSTB)\n\nH32               DC   H'32'\n\nBROWSE            DC   CL8'BROWSE'\nDDID              DC   CL8'DDID'\nDIS0000           DC   CL8'DIS0000'\nDISBROWS          DC   CL8'DISBROWS'\nLMINIT            DC   CL8'LMINIT'\n\nHEADING           DC   0C\n                  DC   C'0'\n                  DC   C'TEXT of CSECT '\nHEADING_CSECT     DC   CL8' '\n                  DC   C'  length '\nHEADING_LENGTH    DC   CL8' '\n                  DC   C' '\nHEADING_L         EQU  *-HEADING\n\nMSG01             DS   0C\n                  DC   C'DISTLSTB01I  Entering DISTLSTB'\nMSG01_L           EQU  *-MSG01\n\nMSG02             DS   0C\n                  DC   C'DISTLSTB02I  Exiting DISTLSTB'\nMSG02_L           EQU  *-MSG02\n\nLENGTH_TABLE      DS   0C\n                  DC   AL1(001)       1\n                  DC   AL1(003)       2\n                  DC   AL1(005)       3\n                  DC   AL1(007)       4\n                  DC   AL1(010)       5\n                  DC   AL1(012)       6\n                  DC   AL1(014)       7\n                  DC   AL1(016)       8\n                  DC   AL1(019)       9\n                  DC   AL1(021)      10\n                  DC   AL1(023)      11\n                  DC   AL1(025)      12\n                  DC   AL1(028)      13\n                  DC   AL1(030)      14\n                  DC   AL1(032)      15\n                  DC   AL1(034)      16\n                  DC   AL1(041)      17\n                  DC   AL1(043)      18\n                  DC   AL1(045)      19\n                  DC   AL1(047)      20\n                  DC   AL1(050)      21\n                  DC   AL1(052)      22\n                  DC   AL1(054)      23\n                  DC   AL1(056)      24\n                  DC   AL1(059)      25\n                  DC   AL1(061)      26\n                  DC   AL1(063)      27\n                  DC   AL1(065)      28\n                  DC   AL1(068)      29\n                  DC   AL1(070)      30\n                  DC   AL1(072)      31\n                  DC   AL1(074)      32\n\nPRINTABLE         DC   256C'.'\n                  ORG  PRINTABLE+X'40'\n                  DC   C' '\n                  ORG  PRINTABLE+X'4A'\n                  DC   C'\u00a2.<(+\u00a6'\n                  DC   X'50'\n                  ORG  PRINTABLE+X'5A'\n                  DC   C'!$*);\u00ac-/'\n                  ORG  PRINTABLE+X'6B'\n                  DC   C',%_>?'\n                  ORG  PRINTABLE+X'7A'\n                  DC   C':#@'\n                  DC   X'7D'\n                  DC   C'=\"'\n                  ORG  PRINTABLE+X'C0'\n                  DC   C'{ABCDEFGHI'\n                  ORG  PRINTABLE+X'D0'\n                  DC   C'}JKLMNOPQR'\n                  ORG  PRINTABLE+X'E2'\n                  DC   C'STUVWXYZ'\n                  ORG  PRINTABLE+X'F0'\n                  DC   C'0123456789'\n                  ORG  PRINTABLE+256\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDTLSTB          DSECT\n                  DS   18F\nDXD_CSECT         DS   CL8\n\nDXD_DD            DS   CL8\n\nDXD_DISP          DS   F\n\nDXD_HEX           DS   0C\nDXD_HEX_01        DS   CL8\n                  DS   X\nDXD_HEX_02        DS   CL8\n                  DS   X\nDXD_HEX_03        DS   CL8\n                  DS   X\nDXD_HEX_04        DS   CL8\n                  DS   CL5\nDXD_HEX_05        DS   CL8\n                  DS   X\nDXD_HEX_06        DS   CL8\n                  DS   X\nDXD_HEX_07        DS   CL8\n                  DS   X\nDXD_HEX_08        DS   CL8\nDXD_HEX_L         EQU  *-DXD_HEX\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPR_LINE           DSECT\nPR_DISP           DS   CL8\n                  DS   C\nPR_HEX            DS   CL75\n                  DS   C\nPR_ASTERISK_1     DS   C\nPR_CHAR           DS   CL32\nPR_ASTERISK_2     DS   C\n                  DS   CL22\nPR_LINE_L         EQU  *-PR_LINE\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                  DISCOMM  TYPE=DSECT\n                  COPY     DISASMDA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                  DCBD     DSORG=PS\n\n                  IFGACB  AM=VSAM\nACB_L             EQU     *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                 COPY REGEQU\n                 END  DISTLSTB\n./ ADD NAME=DISTLSTT 0105-09118-09198-0817-00305-00346-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: DISTLSTT                                              *\n*                                                                     *\n*  Function:                                                          *\n*   Display the module text for TSO mode                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISTLSTT CSECT\nDISTLSTT AMODE 31\nDISTLSTT RMODE ANY\n         USING DISTLSTT,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'DISTLSTT'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS\n         A     R15,DXD_START\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXTTLSTT,R13\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n         USING V_DETAIL,R8\n         XC    DXD_START_DISP,DXD_START_DISP\n* ------------------------------------------------------------------- *\n*        Build text                                                   *\n* ------------------------------------------------------------------- *\nLIST0100 DS    0H\n         ITRACE ID=BUILD\n         L     R0,COMM_VDATA_ADDR             VDATA ADDR\n         L     R1,COMM_VDATA_SIZE             VDATA SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                         INITIALIZE VDATA\n         L     R8,COMM_VDATA_ADDR             VDATA ADDR\n         L     R7,SPF_VDEPTH                  NBR OF LINES\n         MVC   DXD_DISP,DXD_START_DISP        COPY STARTING DISP\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLIST0110 DS    0H\n         MVI   V_ATTR1,$ATTR_HIGH             SET ATTRIBUTE\n         MVI   V_ATTR2,$ATTR_NORMAL           SET ATTRIBUTE\n         MVI   V_ATTR3,$ATTR_HIGH             SET ATTRIBUTE\n         MVI   V_ATTR4,$ATTR_NORMAL           SET ATTRIBUTE\n         MVI   V_ATTR5,$ATTR_HIGH             SET ATTRIBUTE\n         MVI   V_ASTERISK_1,C'*'\n         MVI   V_ASTERISK_2,C'*'\n         L     R6,COMM_CSECT_TEXT             TEXT\n         A     R6,DXD_DISP                    PLUS DISP\n         L     R2,COMM_CSECT_LENGTH           CSECT LENGTH\n         S     R2,DXD_DISP                    LENGTH REMAINING\n         CH    R2,H16                         MORE THAN 16?\n         BNH   LIST0120                       NO\n         LH    R2,H16                         LIMIT TO 16\nLIST0120 DS    0H\n         BCTR  R2,0                           CONVERT TO INSTR LENGTH\n         MVC   DXD_HEX(DXD_HEX_L),COMM_BLANKS\n         XC    COMM_INFO_01(32),COMM_INFO_01  INITIALIZE WORK AREA\n         UNPK  V_DISP(9),DXD_DISP(5)          UNPACK DISP\n         TR    V_DISP,COMM_HEXCHAR            TRANSLATE\n         MVI   V_DISP+8,C' '\n         EX    R2,MVC_01                      COPY TEXT\n         EX    R2,MVC_02                      COPY TEXT\n         EX    R2,TR_01                       TRANSLATE UNPRINTABLES\n         UNPK  COMM_INFO_02(9),COMM_INFO_01+00(5)\n         TR    COMM_INFO_02(8),COMM_HEXCHAR\n         MVC   DXD_HEX_01,COMM_INFO_02\n         UNPK  COMM_INFO_02(9),COMM_INFO_01+04(5)\n         TR    COMM_INFO_02(8),COMM_HEXCHAR\n         MVC   DXD_HEX_02,COMM_INFO_02\n         UNPK  COMM_INFO_02(9),COMM_INFO_01+08(5)\n         TR    COMM_INFO_02(8),COMM_HEXCHAR\n         MVC   DXD_HEX_03,COMM_INFO_02\n         UNPK  COMM_INFO_02(9),COMM_INFO_01+12(5)\n         TR    COMM_INFO_02(8),COMM_HEXCHAR\n         MVC   DXD_HEX_04,COMM_INFO_02\n         LA    R1,LENGTH_TABLE(R2)\n         SR    R3,R3\n         IC    R3,0(R1)\n         EX    R3,MVC_03\n         A     R8,SPF_VWIDTH                  NEXT LINE\n         BCT   R7,LIST0130\n         B     LIST0150                       SCREEN IS FULL\nLIST0130 DS    0H\n         L     R2,DXD_DISP\n         LA    R2,16(,R2)\n         ST    R2,DXD_DISP\n         C     R2,COMM_CSECT_LENGTH\n         BL    LIST0110\n* ------------------------------------------------------------------- *\n*        Display                                                      *\n* ------------------------------------------------------------------- *\nLIST0150 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_SPF_PANEL,PANEL_NAME      SET PANEL NAME\n         L     R15,V_DISDISP                  DISDISP ENTRY POINT\n         BALR  R14,R15                        DISPLAY DATA\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15\n         LTR   R15,R15                        RC = 0?\n         BNZ   EXIT0000                       NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=ZCMD,                                               +\n               DATA1=SPF_ZCMD\n         CLC   SPF_ZCMD,COMM_BLANKS           ZCMD BLANK?\n         BNE   ERR0010                        NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=ZVERB,                                              +\n               DATA1=SPF_ZVERB,                                        +\n               DATA2=SPF_ZSCROLLN\n         CLI   SPF_ZVERB,C'B'                 BOTTOM?\n         BE    LIST0200                       YES\n         CLI   SPF_ZVERB,C'D'                 DOWN?\n         BE    LIST0210                       YES\n         CLI   SPF_ZVERB,C'T'                 TOP?\n         BE    LIST0220                       YES\n         CLI   SPF_ZVERB,C'U'                 UP?\n         BE    LIST0230                       YES\n         B     ERR0020\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLIST0200 DS    0H\n         ITRACE ID=BOTTOM\n         L     R1,COMM_CSECT_LENGTH           CSECT'S LENGTH\n         SRL   R1,4                           SHIFT\n         SLL   R1,4                           SHIFT\n         ST    R1,DXD_START_DISP              SET START DISP\n         B     LIST0100                       REBUILD DISPLAY\nLIST0210 DS    0H\n         ITRACE ID=DOWN\n         CLI   SPF_ZSCROLLA,C'M'              MAX?\n         BE    LIST0200                       YES\n         L     R1,SPF_ZSCROLLN                NBR OF LINES\n         SLL   R1,4                           MULTIPLY BY 16\n         A     R1,DXD_START_DISP              PLUS START DISP\n         C     R1,COMM_CSECT_LENGTH           BEYOND END OF CSECT?\n         BH    LIST0200                       YES.. LIMIT TO BOTTOM\n         ST    R1,DXD_START_DISP              SET START DISP\n         B     LIST0100                       REBUILD DISPLAY\nLIST0220 DS    0H\n         ITRACE ID=TOP\n         XC    DXD_START_DISP,DXD_START_DISP  SET START DISP\n         B     LIST0100                       REBUILD DISPLAY\nLIST0230 DS    0H\n         ITRACE ID=UP\n         CLI   SPF_ZSCROLLA,C'M'              MAX?\n         BE    LIST0220                       YES\n         L     R0,DXD_START_DISP              STARTING DISP\n         L     R1,SPF_ZSCROLLN                NBR OF LINES\n         SLL   R1,4                           MULTIPLY BY 16\n         SR    R0,R1                          SUBTRACT SCROLL AMOUNT\n         BM    LIST0220                       NEGATIVE.. LIMIT TO TOP\n         ST    R0,DXD_START_DISP              SET STARTING DISP\n         B     LIST0100                       REBUILD DISPLAY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVI   COMM_MSG_ID,1\n         B     ERR0100\nERR0020  DS    0H\n         MVI   COMM_MSG_ID,2\nERR0100  DS    0H\n         MVC   COMM_MSG_CSECT,MODID\n         L     R15,V_DISMSG\n         BALR  R14,R15\n         MVC   SPF_MSG_1,COMM_MSG_1\n         MVC   SPF_MSG_2,COMM_MSG_2\n         MVC   SPF_MSG_3,COMM_MSG_3\n         MVC   SPF_MSG_4,COMM_MSG_4\n         MVC   SPF_MSG_5,COMM_MSG_5\n         B     LIST0150\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMVC_01   MVC   V_CHAR(0),0(R6)                COPY TEXT\nMVC_02   MVC   COMM_INFO_01(0),0(R6)          COPY TEXT\nMVC_03   MVC   V_HEX(0),DXD_HEX               COPY HEX\nTR_01    TR    V_CHAR(0),PRINTABLE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START         DC   Q(DXTTLSTT)\n\nH16               DC   H'16'\n\nPANEL_NAME        DC   CL8'DISTDATA'\n\nLENGTH_TABLE      DS   0C\n                  DC   AL1(001)       1\n                  DC   AL1(003)       2\n                  DC   AL1(005)       3\n                  DC   AL1(007)       4\n                  DC   AL1(010)       5\n                  DC   AL1(012)       6\n                  DC   AL1(014)       7\n                  DC   AL1(016)       8\n                  DC   AL1(019)       9\n                  DC   AL1(021)      10\n                  DC   AL1(023)      11\n                  DC   AL1(025)      12\n                  DC   AL1(028)      13\n                  DC   AL1(030)      14\n                  DC   AL1(032)      15\n                  DC   AL1(034)      16\n\nPRINTABLE         DC   256C'.'\n                  ORG  PRINTABLE+X'40'\n                  DC   C' '\n                  ORG  PRINTABLE+X'4A'\n                  DC   C'\u00a2.<(+\u00a6'\n                  DC   X'50'\n                  ORG  PRINTABLE+X'5A'\n                  DC   C'!$*);\u00ac-/'\n                  ORG  PRINTABLE+X'6B'\n                  DC   C',%_>?'\n                  ORG  PRINTABLE+X'7A'\n                  DC   C':#@'\n                  DC   X'7D'\n                  DC   C'=\"'\n                  ORG  PRINTABLE+X'C0'\n                  DC   C'{ABCDEFGHI'\n                  ORG  PRINTABLE+X'D0'\n                  DC   C'}JKLMNOPQR'\n                  ORG  PRINTABLE+X'E2'\n                  DC   C'STUVWXYZ'\n                  ORG  PRINTABLE+X'F0'\n                  DC   C'0123456789'\n                  ORG  PRINTABLE+256\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXTTLSTT          DSECT\n                  DS   18F\nDXD_CSECT         DS   CL8\n\nDXD_START_DISP    DS   F\nDXD_DISP          DS   F\n\nDXD_HEX           DS   0C\nDXD_HEX_01        DS   CL8\n                  DS   X\nDXD_HEX_02        DS   CL8\n                  DS   X\nDXD_HEX_03        DS   CL8\n                  DS   X\nDXD_HEX_04        DS   CL8\nDXD_HEX_L         EQU  *-DXD_HEX\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nV_DETAIL          DSECT\nV_ATTR1           DS   X\nV_DISP            DS   CL8\n                  DS   CL3\nV_ATTR2           DS   X\nV_HEX             DS   CL35\n                  DS   CL3\nV_ATTR3           DS   X\nV_ASTERISK_1      DS   C\nV_ATTR4           DS   X\nV_CHAR            DS   CL16\nV_ATTR5           DS   X\nV_ASTERISK_2      DS   C\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                  DISCOMM  TYPE=DSECT\n                  DISSPFD  TYPE=DSECT\n                  COPY     DISASMDA\n                  COPY     ATTRS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                  IFGACB  AM=VSAM\nACB_L             EQU     *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                 COPY REGEQU\n                 END  DISTLSTT\n./ ADD NAME=DISTMAIN 0109-09119-09198-0917-00937-01083-00000-SOURCE\n* -------------------------------------------------------------------*\n*                                                                    *\n*        TSO MAINLINE                                                *\n*                                                                    *\n* -------------------------------------------------------------------*\nDISTMAIN CSECT\nDISTMAIN AMODE 31\nDISTMAIN RMODE ANY\n         USING DISTMAIN,R11,R10\n         USING DISCOMM,R12\n         USING IHADCB,DISMOD_DCB\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     INIT0000                          SKIP EYECATCHER\nMODID    DC    CL8'DISTMAIN'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nINIT0000 DS    0H\n         LA    R10,2048(,R11)\n         LA    R10,2048(,R10)\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)                       CHAIN  SAVE AREA\n         ST    R15,8(,R13)                       CHAIN SAVE AREA\n         LR    R13,R15                           SET SAVE AREA ADDRESS\n         USING DXDTMAIN,R13\n         ITRACE ID=ENTRY\n         LA    R1,COMM_SPF_FUNCTION\n         ST    R1,COMM_SPF_1                     SET FUNCTION ADDRESS\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n* ------------------------------------------------------------------- *\n*     Define SPF variables                                            *\n* ------------------------------------------------------------------- *\n         ITRACE ID=DEF_VARS\n         MVI   COMM_VAR_FUNC,$VAR_DEFINE         SET FUNCTION\n         L     R15,V_DISVAR                      SPF VAR MANAGER\n         BALR  R14,R15                           DEFINE VARIABLES\n* ------------------------------------------------------------------- *\n*     GETMAIN VDATA (dynamic area storage)                            *\n* ------------------------------------------------------------------- *\n         ITRACE ID=GET_VDATA\n         MVC   COMM_SPF_PANEL,DIS0002\n         MVI   COMM_VDATA_FUNC,$VDATA_GETMAIN    SET FUNCTION\n         L     R15,V_DISVDATA\n         BALR  R14,R15                           OBTAIN VDATA\n         ITRACE ID=VDEFVDATA\n         MVI   COMM_VDATA_FUNC,$VDATA_VDEFINE    SET FUNCTION\n         L     R15,V_DISVDATA\n         BALR  R14,R15                           VDEFINE VDATA\n* ------------------------------------------------------------------- *\n*        Allocate temp data sets for SYSIN and SYSPRINT               *\n* ------------------------------------------------------------------- *\n         ITRACE ID=ALOC_IN\n         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC\n         MVI   COMM_DAIR_OPTIONS,$DAIR_SYSIN+$DAIR_USE_DDNAME\n         MVC   COMM_DAIR_DD,SYSIN             DD NAME TO USE\n         L     R15,V_DISDAIR                  DISDAIR EP\n         BALR  R14,R15                        ALLOCATE SYSIN\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0040                        NO\n         ITRACE ID=ALOC_PRT\n         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC\n         MVI   COMM_DAIR_OPTIONS,$DAIR_SYSPRINT+$DAIR_USE_DDNAME\n         MVC   COMM_DAIR_DD,SYSPRINT          DD NAME TO USE\n         L     R15,V_DISDAIR                  DISDAIR EP\n         BALR  R14,R15                        ALLOCATE SYSPRINT\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0040                        NO\n         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC\n         MVI   COMM_DAIR_OPTIONS,$DAIR_SYSPRINT+$DAIR_USE_DDNAME\n         MVC   COMM_DAIR_DD,DISPRINT          DD NAME TO USE\n         L     R15,V_DISDAIR                  DISDAIR EP\n         BALR  R14,R15                        ALLOCATE DISPRINT\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0040                        NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*     Prompt the user for the library and member                      *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0000 DS    0H\n         ITRACE ID=PROMPT_1\n         MVC   COMM_SPF_PANEL,DIS0001            SET PANEL NAME\n         L     R15,V_DISDISP                     DISDISP ENTRY POINT\n         BALR  R14,R15                           DISPLAY PANEL\n         LTR   R15,R15                           RC = ZERO?\n         BNZ   EXIT0000                          NO\n         MVC   COMM_LMOD_DSN,SPF_LMOD_DSN        COPY DSN\n         MVC   COMM_LMOD_VOLSER,SPF_LMOD_VOLSER  COPY VOLSER\n         MVC   COMM_LMOD,SPF_LMOD                COPY MEMBER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CLC   SPF_LMOD_DSN,COMM_BLANKS          DSN BLANK?\n         BNE   MAIN0010                          NO\n         MVI   COMM_MSG_ID,1                     SET MESSAGE ID\n         BAL   R8,MSG0000                        BUILD MESSAGE(S)\n         B     MAIN0000                          DISPLAY WITH MSG(S)\n* ------------------------------------------------------------------- *\n*        Allocate the LMOD library                                    *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=CHK_LMOD\n         MVC   COMM_DSINFO_DSN,COMM_LMOD_DSN     COPY DSN\n         L     R15,V_DISDINFO                    DISDINFO ENTRY POINT\n         BALR  R14,R15                           CHECK THE DATA SET\n         LTR   R15,R15                           ERROR(S)?\n         BZ    MAIN0020                          NO\n         MVC   SPF_MSG_1,COMM_DSINFO_MSG         COPY MESSAGE\n         B     MAIN0000                          DISPLAY W/MSG\nMAIN0020 DS    0H\n         CLI   COMM_DATASET_TYPE,$DATASET_TYPE_PDS\n         BE    MAIN0030                          YES\n         MVI   COMM_MSG_ID,2\n         BAL   R8,MSG0000                        BUILD MESSAGE\n         B     MAIN0000                          DISPLAY W/MSG\nMAIN0030 DS    0H\n         ITRACE ID=ALOCLMOD\n         MVC   COMM_DAIR_DSN,COMM_LMOD_DSN       SET DSN\n         MVC   COMM_DAIR_VOLSER,COMM_LMOD_VOLSER SET VOLSER\n         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC        SET FUNCTION\n         MVI   COMM_DAIR_OPTIONS,0               RESET ALL OPTIONS\n         L     R15,V_DISDAIR                     DISDAIR ENTRY POINT\n         BALR  R14,R15                           ALLOCATE LIBRARY\n         ITRACE ID=ALLOC_RC,                     DISDAIR RC            +\n               RDATA1=R15\n         LTR   R15,R15                           ALLOCATION SUCCESSFUL?\n         BZ    MAIN0040                          YES\n         MVC   SPF_MSG_1,COMM_MSG_1\n         MVC   SPF_MSG_2,COMM_MSG_2\n         MVC   SPF_MSG_3,COMM_MSG_3\n         MVC   SPF_MSG_4,COMM_MSG_4\n         MVC   SPF_MSG_5,COMM_MSG_5\n         B     MAIN0000                          PROMPT AGAIN W/MSG(S)\nMAIN0040 DS    0H\n         MVC   COMM_DDNAME,COMM_DAIR_DD          SAVE DD NAME\n         MVC   DCBDDNAM,COMM_DAIR_DD             COPY DD NAME\n         MVC   COMM_LMOD_VOLSER,COMM_DAIR_VOLSER SAVE VOLSER\n         MVC   SPF_LMOD_VOLSER,COMM_DAIR_VOLSER  SAVE VOLSER\n         ITRACE ID=LMOD_DD,                                            +\n               DATA1=COMM_DDNAME\n* ------------------------------------------------------------------- *\n*        Open the LMOD library                                        *\n* ------------------------------------------------------------------- *\n         ITRACE ID=OPENLMOD,                                           +\n               DATA1=DCBDDNAM\n         OPEN  (DISMOD_DCB,INPUT),                                     +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n* ------------------------------------------------------------------- *\n*        If the load module was not specified, display members        *\n* ------------------------------------------------------------------- *\n         CLC   COMM_LMOD,COMM_BLANKS             LMOD GIVEN?\n         BNE   MAIN0060                          YES\n         ITRACE ID=DISDIR\n         OI    DXD_FLAGS,$LMOD_PROMPT            PROMPTING FOR LMOD\nMAIN0050 DS    0H\n         L     R15,V_DISDIR                      DISDIR ENTRY POINT\n         BALR  R14,R15                           DISPLAY DIRECTORY\n         ITRACE ID=DIR_RC,                                             +\n               RDATA1=R15\n         LTR   R15,R15                           RC ZERO?\n         BZ    MAIN0060                          YES\n         TM    DXD_FLAGS,$LMOD_PROMPT            PROMPTED FOR LMOD?\n         BO    MAIN0050                          YES.. PROMPT AGAIN\n         B     MAIN0000                          PROMPT FOR LIBRARY\n* ------------------------------------------------------------------- *\n*        We now have the LMOD library and module name                 *\n* ------------------------------------------------------------------- *\nMAIN0060 DS    0H\n         ITRACE ID=LMOD,                                               +\n               DATA1=COMM_LMOD\n* ------------------------------------------------------------------- *\n*         Start BINDER dialog, include LMOD                           *\n* ------------------------------------------------------------------- *\n         ITRACE ID=STARTD\n         MVI   COMM_BIND_FUNC,$BIND_STARTD    BINDER FUNCTION\n         L     R15,V_DISBIND                  DISBIND ENTRY POINT\n         BALR  R14,R15                        LINK TO MODULE READER\n         ITRACE ID=STARTDRC,                                           +\n               RDATA1=R15\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR?\n         BO    MAIN0010                       YES\n         OI    DXD_FLAGS,$DIALOG_ACTIVE       SET FLAG\n* ------------------------------------------------------------------- *\n*         Build SECTION names chain                                   *\n* ------------------------------------------------------------------- *\n         ITRACE ID=NAMES\n         MVI   COMM_BIND_FUNC,$BIND_NAMES     BINDER FUNCTION\n         L     R15,V_DISBIND                  DISBIND ENTRY POINT\n         BALR  R14,R15                        LINK TO MODULE READER\n         ITRACE ID=NAMES_RC,                                           +\n               RDATA1=R15\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR?\n         BNO   MAIN0070                       NO\n         ITRACE ID=CLOSE1\n         CLOSE DISMOD_DCB,                    CLOSE DISMOD DCB         +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\n         ITRACE ID=ENDD_1\n         MVI   COMM_BIND_FUNC,$BIND_ENDD      SET FUNCTION\n         L     R15,V_DISBIND                  DISBIND ENTRY POINT\n         BALR  R14,R15                        END THE DIALOG\n         NI    DXD_FLAGS,255-$DIALOG_ACTIVE   DIALOG NOT ACTIVE\n         ITRACE ID=DEALLOC,                                            +\n               DATA1=COMM_DDNAME\n         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC   SET FUNCTION\n         L     R15,V_DISDAIR\n         BALR  R14,R15                        DE-ALLOCATE\n         NI    COMM_FLAGS,255-$COMM_FLAGS_ABORT\n         B     MAIN0010                       PROMPT FOR LIBRARY\n* ------------------------------------------------------------------- *\n*         Display the list of sections                                *\n* ------------------------------------------------------------------- *\nMAIN0070 DS    0H\n         CLC   COMM_NAME_NBR,F1               MORE THAN ONE NAME?\n         BE    MAIN0072                       NO\n         ITRACE ID=DISNAMES\n         L     R15,V_DISNLIST                 DISNLIST ENTRY POINT\n         BALR  R14,R15                        LINK TO DISNLIST\n         ITRACE ID=NLIST_RC,                                           +\n               RDATA1=R15\n         LTR   R15,R15                        RC = 0?\n         BNZ   EXIT0000                       NO.. EXIT\n         B     MAIN0074\n* ------------------------------------------------------------------- *\n*         ONLY ONE CSECT..                                            *\n* ------------------------------------------------------------------- *\nMAIN0072 DS    0H\n         ITRACE ID=ONECSECT\n         ICM   R7,15,COMM_NAME_NEXT           1ST (ONLY) SECTION\n         USING NAME_DSECT,R7\n         MVC   COMM_CSECT,NAME_NAME           COPY NAME\n         MVC   SPF_CSECT,NAME_NAME            COPY NAME\n* ------------------------------------------------------------------- *\n*         Get ESD and RLD info                                        *\n* ------------------------------------------------------------------- *\nMAIN0074 DS    0H\n         ITRACE ID=ESD_RLD\n         MVI   COMM_BIND_FUNC,$BIND_ESD_RLD   BINDER FUNCTION\n         L     R15,V_DISBIND                  DISBIND ENTRY POINT\n         BALR  R14,R15                        LINK TO MODULE READER\n         ITRACE ID=ESDRLDRC,                                           +\n               RDATA1=R15\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR?\n         BO    ERR0010                        YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         UNPK  COMM_INFO_01(9),COMM_CSECT_LENGTH(5)\n         MVC   SPF_CSECT_LENGTH,COMM_INFO_01\n         TR    SPF_CSECT_LENGTH,HEXCHAR\n* ------------------------------------------------------------------- *\n*         Read TEXT                                                   *\n* ------------------------------------------------------------------- *\n         ITRACE ID=READTEXT\n         MVI   COMM_BIND_FUNC,$BIND_TEXT      BINDER FUNCTION\n         L     R15,V_DISBIND                  DISBIND ENTRY POINT\n         BALR  R14,R15                        LINK TO MODULE READER\n         ITRACE ID=TEXT_RC,                                            +\n               RDATA1=R15\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   SERIOUS ERROR?\n         BO    ERR0020                        YES\n* ------------------------------------------------------------------- *\n*        DETERMINE 'TARGET' OF RLD ADCONS                             *\n* ------------------------------------------------------------------- *\n         ICM   R2,15,COMM_RLD_AREA_NEXT       FIRST RLD ITEM\n         BZ    MAIN0110                       NO RLD ITEMS\n         USING AREA_DSECT,R2\nMAIN0080 DS    0H\n         ITRACE ID=TARGET,                                             +\n               RDATA1=R2,                                              +\n               DATA2=0(R2)\n         CLI   AREA_DATA_TYPE,$AREA_DATA      DATA AREA?\n         BNE   MAIN0100                       NO\n         CLI   AREA_DATA_TYPE,$DATA_ACON      ADCON?\n         BE    MAIN0090                       YES\n         CLI   AREA_DATA_TYPE,$DATA_CXD       CXD?\n         BNE   MAIN0100                       NO\nMAIN0090 DS    0H\n         ICM   R1,15,AREA_BEGIN               RLD ITEM'S DISP\n         LR    R0,R1                          COPY DISP\n         A     R1,COMM_CSECT_TEXT             PLUS BASE\n         LH    R14,AREA_LENGTH                RLD ITEM'S LENGTH\n         BCTR  R14,0                          RELATIVE TO ZERO\n         AR    R0,R14                         PLUS LENGTH\n         STCM  R0,15,AREA_END\n         LA    R15,AREA_REF_DISP1+3           END OF OUTPUT FIELD\n         SR    R15,R14                        MINUS LENGTH\n         EX    R14,REF_MVC                    COPY TEXT\nMAIN0100 DS    0H\n         ICM   R2,15,AREA_NEXT\n         BNZ   MAIN0080\n         B     MAIN0110\nREF_MVC  MVC   0(0,R15),0(R1)                 COPY TARGET DISP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*        Display the main menu                                        *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0110 DS    0H\n         ITRACE ID=MAINMENU\n         MVI   SPF_FUNCTION,C' '\n         MVC   COMM_SPF_FUNCTION,DISPLAY\n         MVC   COMM_SPF_PANEL,DISMENU\n         LA    R0,COMM_SPF_PANEL\n         ST    R0,COMM_SPF_2\n         OI    COMM_SPF_2,X'80'\nMAIN0120 DS    0H\n         LA    R1,COMM_SPF_PARMS              PARMS FOR DISPLAY\n         L     R15,COMM_ISPLINK\n         BALR  R14,R15                        DISPLAY MAIN MEU\n         ITRACE ID=MENU_RC,                                            +\n               RDATA1=R15\n         LTR   R15,R15                        RC=0?\n         BNZ   EXIT0000                       NO\n         MVC   SPF_MSG_1,COMM_BLANKS          CLEAR MESSAGE\n         MVC   SPF_MSG_2,COMM_BLANKS          CLEAR MESSAGE\n         MVC   SPF_MSG_3,COMM_BLANKS          CLEAR MESSAGE\n         MVC   SPF_MSG_4,COMM_BLANKS          CLEAR MESSAGE\n         MVC   SPF_MSG_5,COMM_BLANKS          CLEAR MESSAGE\n         ITRACE ID=ZCMD,                                               +\n               DATA1=SPF_ZCMD+0,                                       +\n               DATA2=SPF_ZCMD+8\n         OC    SPF_ZCMD,COMM_BLANKS           TRANSLATE TO UPPER CASE\n         CLC   SPF_ZCMD,COMM_BLANKS           BLANK?\n         BE    MAIN0130                       YES\n         CLC   ABEND,SPF_ZCMD                 ABEND?\n         BE    MAIN0700                       YES\n         CLC   AREA,SPF_ZCMD                  AREA?\n         BE    MAIN0740                       YES\n         CLC   DEBUG,SPF_ZCMD                 DEBUG?\n         BE    MAIN0710                       YES\n         CLC   TRACE_ON,SPF_ZCMD              TURN TRACE ON?\n         BE    MAIN0720                       YES\n         CLC   TRACE_OFF,SPF_ZCMD             TURN TRACE OFF?\n         BE    MAIN0730                       YES\nMAIN0130 DS    0H\n         ITRACE ID=FUNCTION,                                           +\n               DATA1=SPF_FUNCTION\n         CLI   SPF_FUNCTION,C' '              BLANK?\n         BE    MAIN0150                       YES\n         LA    R1,FUNCTION_TABLE\n         USING FUNCTION_DSECT,R1\nMAIN0140 DS    0H\n         CLC   SPF_FUNCTION,FUNCTION_CODE     FUNCTION LOCATED?\n         BE    MAIN0160                       YES\n         LA    R1,FUNCTION_L(,R1)             NEXT FUNCTION\n         CLI   FUNCTION_CODE,X'FF'            END OF TABLE?\n         BNE   MAIN0140                       NO\n         MVI   COMM_MSG_ID,3\n         BAL   R8,MSG0000                     BUILD MESSAGE\n         B     MAIN0120                       RE-DISPLAY WITH MESSAGES\nMAIN0150 DS    0H\n         MVI   COMM_MSG_ID,4                  SET MESSAGE ID\n         BAL   R8,MSG0000                     BUILD MESSAGE\n         B     MAIN0120                       RE-DISPLAY WITH MESSAGES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0160 DS    0H\n         ICM   R15,15,FUNCTION_ADDR           FUNCTION'S ADDRESS\n         SR    R1,R1                          NO PARM LIST\n         ITRACE ID=CALLFUNC,                                           +\n               RDATA1=R15\n         BALR  R14,R15                        LINK TO FUNCTION\n         B     MAIN0110\n* ------------------------------------------------------------------- *\n*        Display usings                                               *\n* ------------------------------------------------------------------- *\nMAIN0170 DS    0H\n         ITRACE ID=USINGS\n         MVI   SPF_FUNCTION,C' '              RESET FUNCTION\n         OC    COMM_KSDS_NEXT,COMM_KSDS_NEXT  ANY KSDSES?\n         BNZ   MAIN0180                       YES\n         OC    COMM_DSECT_NEXT,COMM_DSECT_NEXT   ANY DSECTS FROM ASM?\n         BNZ   MAIN0180                       YES\n         MVI   COMM_MSG_ID,5                  SET MESSAGE ID\n         BAL   R8,MSG0000                     BUILD MESSAGE\n         B     MAIN0120                       RE-DISPLAY WITH MESSAGES\nMAIN0180 DS    0H\n         ITRACE ID=CALLULST\n         L     R15,V_DISULIST                 DISULIST ENTRY POINT\n         BALR  R14,R15                        CALL DISULIST\n         B     MAIN0110\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*        Generate source                                              *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         ITRACE ID=GEN\n         OC    COMM_OPCODE_TABLE_ADDR,COMM_OPCODE_TABLE_ADDR\n         BNZ   MAIN0202                       NOT LOADED\n         MVC   SPF_MSG_3(MSG07_L),MSG07\n         B     MAIN0204\nMAIN0202 DS    0H\n         OC    COMM_PREFIX_LENGTH,COMM_PREFIX_LENGTH\n         BNZ   MAIN0210\n         MVC   SPF_MSG_3(MSG11_L),MSG11\nMAIN0204 DS    0H\n         L     R15,V_DISOPTS                  DISOPTS ENTRY POINT\n         BALR  R14,R15                        CALL DISOPTS\n         LTR   R15,R15                        RC=0?\n         BNZ   MAIN0110                       NO\n         B     MAIN0200\n* ------------------------------------------------------------------- *\n*        Verify base and usings                                       *\n* ------------------------------------------------------------------- *\nMAIN0210 DS    0H\n         NI    COMM_FLAGS,255-$COMM_FLAGS_ABORT\n         OC    COMM_BASE_NEXT,COMM_BASE_NEXT  ANY BASE DEFINITIONS?\n         BZ    MAIN0220                       NO\n         OC    COMM_USING_NEXT,COMM_USING_NEXT  ANY USING DEFINITIONS?\n         BZ    MAIN0220                       NO\n         MVC   COMM_INFO_01,COMM_BLANKS       RE-INIT INFO\n         MVC   COMM_INFO_01(MSG01_L),MSG01\n         BAL   R8,TPUT0000                    INFORM USER OF PROGRESS\n         L     R15,V_DISVBU\n         BALR  R14,R15                        VERIFY BASE AND USINGS\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   ABORT ON NOW?\n         BO    MAIN0110                       YES\n* ------------------------------------------------------------------- *\n*        Connect USINGs to DSECTs                                     *\n* ------------------------------------------------------------------- *\nMAIN0220 DS    0H\n         MVC   COMM_INFO_01,COMM_BLANKS       RE-INIT INFO\n         MVC   COMM_INFO_01(MSG02_L),MSG02\n         BAL   R8,TPUT0000                    INFORM USER OF PROGRESS\n         ITRACE ID=DISDSECT\n         L     R15,V_DISDSECT\n         BALR  R14,R15                        CONNECT USINGS TO DSECTS\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   ABORT ON NOW?\n         BO    MAIN0110                       YES\n* ------------------------------------------------------------------- *\n*        Delete old \"ALL areas\"                                       *\n* ------------------------------------------------------------------- *\n         ICM   R3,15,COMM_ALL_AREA_NEXT       1ST AREA ON ALL CHAIN\n         BZ    MAIN0240                       NOTHING ON CHAIN\n         USING AREA_DSECT,R3\n         XC    COMM_ALL_AREA_NEXT,COMM_ALL_AREA_NEXT\nMAIN0230 DS    0H\n         LR    R1,R3                          COPY ADDR\n         L     R3,AREA_NEXT                   NEXT AREA BLOCK\n         FREEMAIN RU,                         FREE THIS AREA BLOCK     +\n               A=(1),                                                  +\n               LV=AREA_DSECT_L\n         LTR   R3,R3                          ANOTHER AREA?\n         BNZ   MAIN0230                       YES\n* ------------------------------------------------------------------- *\n*        Merge RLD areas with user specified data areas               *\n* ------------------------------------------------------------------- *\nMAIN0240 DS    0H\n         MVC   COMM_INFO_01,COMM_BLANKS       RE-INIT INFO\n         MVC   COMM_INFO_01(MSG03_L),MSG03\n         BAL   R8,TPUT0000                    INFORM USER OF PROGRESS\n         ITRACE ID=DISDMERG\n         L     R15,V_DISDMERG\n         BALR  R14,R15                        MERGE USER AND RLD DATA\n         TM    DXD_FLAGS,$DEBUG               DEBUG ON?\n         BNO   MAIN0250                       NO\n         ITRACE ID=X_DEBUG\n         L     R1,COMM_ALL_AREA_NEXT\n         L     R15,V_DISXLIST\n         BALR  R14,R15\n* ------------------------------------------------------------------- *\n*        Scan text to determine instructions                          *\n* ------------------------------------------------------------------- *\nMAIN0250 DS    0H\n         ITRACE ID=DISSCAN\n         MVC   COMM_INFO_01,COMM_BLANKS       RE-INIT INFO\n         MVC   COMM_INFO_01(MSG04_L),MSG04\n         BAL   R8,TPUT0000                    INFORM USER OF PROGRESS\n         L     R15,V_DISSCAN\n         BALR  R14,R15                        SCAN TEXT\n         TM    COMM_FLAGS,$COMM_FLAGS_ABORT   ABORT ON NOW?\n         BO    MAIN0110                       YES\n         TM    DXD_FLAGS,$DEBUG               DEBUG ON?\n         BNO   MAIN0260                       NO\n         ITRACE ID=X_DEBUG\n         L     R1,COMM_ALL_AREA_NEXT\n         L     R15,V_DISXLIST\n         BALR  R14,R15\n* ------------------------------------------------------------------- *\n*        Determine data references                                    *\n* ------------------------------------------------------------------- *\nMAIN0260 DS    0H\n         ITRACE ID=DISREF\n         MVC   COMM_INFO_01,COMM_BLANKS       RE-INIT INFO\n         MVC   COMM_INFO_01(MSG05_L),MSG05\n         BAL   R8,TPUT0000                    INFORM USER OF PROGRESS\n         L     R15,V_DISREF\n         BALR  R14,R15\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TM    COMM_DDS,$DISPUNCH_DD          DISPUNCH ALLOCATED?\n         BO    MAIN0270                       YES\n         CLC   SPF_OUTPUT_DSN,COMM_BLANKS     OUTPUT DSN GIVEN?\n         BE    MAIN0270                       NO\n         ITRACE ID=ALOC_PUN\n         MVC   COMM_DAIR_DD,DISPUNCH          SET DDNAME\n         MVC   COMM_DAIR_DSN,SPF_OUTPUT_DSN   SET DSN\n         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC     SET DAIR FUNCTION\n         OI    COMM_DAIR_OPTIONS,$DAIR_USE_DDNAME\n         L     R15,V_DISDAIR                  DAIR ENTRY POINT\n         BALR  R14,R15                        ALLOCATE DISPUNCH\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0040                        NO\n         OI    DXD_FLAGS,$TEMP_PUNCH          SET FLAG\n         OI    COMM_DDS,$DISPUNCH_DD          SET FLAG\n* ------------------------------------------------------------------- *\n*        Generate source                                              *\n* ------------------------------------------------------------------- *\nMAIN0270 DS    0H\n         ITRACE ID=DISGEN\n         L     R15,V_DISGEN\n         MVC   COMM_INFO_01,COMM_BLANKS       RE-INIT INFO\n         MVC   COMM_INFO_01(MSG06_L),MSG06\n         BAL   R8,TPUT0000                    INFORM USER OF PROGRESS\n         ITRACE ID=OPEN_PRT\n         OPEN  (DISPRINT_DCB,OUTPUT),         OPEN DISPRINT            +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n         ITRACE ID=DISGEN\n         L     R15,V_DISGEN\n         BALR  R14,R15                        GENERATE SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TM    DXD_FLAGS,$TEMP_PUNCH          TEMPORARY ALLOCATION?\n         BNO   MAIN0280                       NO\n         ITRACE ID=FREE_PUN\n         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC   SET FUNCTION\n         MVC   COMM_DAIR_DD,DISPUNCH          SET DD TO FREE\n         L     R15,V_DISDAIR\n         BALR  R14,R15                        FREE DISPUNCH\n         LTR   R15,R15                        SUCESSFUL?\n         BNZ   ERR0040                        NO\n         NI    COMM_DDS,255-$DISPUNCH_DD      RESET FLAG\n         NI    DXD_FLAGS,255-$TEMP_PUNCH      RESET FLAG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0280 DS    0H\n         ITRACE ID=CLOS_PRT\n         CLOSE DISPRINT_DCB,                  CLOSE DISPRINT           +\n               MODE=31,                                                +\n               MF=(E,COMM_OPEN)\n* ------------------------------------------------------------------- *\n*        Obtain data set id for DISPRINT                              *\n* ------------------------------------------------------------------- *\n         TM    DXD_FLAGS,$DISPRINT_DDID       DDID OBTAINED?\n         BO    MAIN0290                       YES\n         OI    DXD_FLAGS,$DISPRINT_DDID       SET FLAG\n         ITRACE ID=LMINIT\n         MVC   COMM_SPF_FUNCTION,LMINIT       SPF FUNCTION\n         LA    R0,DDID                        DDID (RETURNED BY LMINIT)\n         ST    R0,COMM_SPF_2\n         LA    R0,COMM_BLANKS\n         ST    R0,COMM_SPF_3\n         ST    R0,COMM_SPF_4\n         ST    R0,COMM_SPF_5\n         ST    R0,COMM_SPF_6\n         ST    R0,COMM_SPF_7\n         ST    R0,COMM_SPF_8\n         ST    R0,COMM_SPF_9\n         LA    R0,DISPRINT                    DDNAME\n         ST    R0,COMM_SPF_10                 SET DDNAME ADDR\n         OI    COMM_SPF_10,X'80'              SET END-OF-LIST\n         LA    R1,COMM_SPF_PARMS              SPF PARMS\n         L     R15,COMM_ISPLINK               ISPLINK ENTRY POINT\n         BALR  R14,R15                        OBTAIN DDID\n         ITRACE ID=LMINITRC,                                           +\n               RDATA1=R15,                                             +\n               DATA2=SPF_DDID\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0050                        NO\n         MVC   DXD_DDID,SPF_DDID              SAVE DISPRINT DATA ID\n* ------------------------------------------------------------------- *\n*        Browse DISPRINT                                              *\n* ------------------------------------------------------------------- *\nMAIN0290 DS    0H\n         ITRACE ID=BROWSE,                                             +\n               DATA1=DXD_DDID\n         MVC   COMM_SPF_FUNCTION,BROWSE       SPF FUNCTION\n         LA    R0,COMM_BLANKS\n         ST    R0,COMM_SPF_2\n         ST    R0,COMM_SPF_3\n         ST    R0,COMM_SPF_4\n         ST    R0,COMM_SPF_5\n         LA    R0,DXD_DDID                    DDID\n         ST    R0,COMM_SPF_6                  SET DATA ID ADDR\n         OI    COMM_SPF_6,X'80'               FLAG END-OF-LIST\n         LA    R1,COMM_SPF_PARMS              PARMS FOR BROWSE\n         L     R15,COMM_ISPLINK\n         BALR  R14,R15                        LINK TO BROWSE\n         B     MAIN0110\n* ------------------------------------------------------------------- *\n*        Display user area 1 chain                                    *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=AREA_1\n         ICM   R1,15,COMM_USER_AREA_NEXT_1\n         BZ    MAIN0340\n         L     R15,V_DISXLIST\n         BALR  R14,R15                        DISPLAY CHAIN\n         B     MAIN0110\n* ------------------------------------------------------------------- *\n*        Display RLD data                                             *\n* ------------------------------------------------------------------- *\nMAIN0310 DS    0H\n         ITRACE ID=RLD_DATA\n         ICM   R1,15,COMM_RLD_AREA_NEXT\n         BZ    MAIN0340\n         L     R15,V_DISXLIST\n         BALR  R14,R15                        DISPLAY CHAIN\n         B     MAIN0110\n* ------------------------------------------------------------------- *\n*        Display user data chain 2                                    *\n* ------------------------------------------------------------------- *\nMAIN0320 DS    0H\n         ITRACE ID=AREA_2\n         ICM   R1,15,COMM_USER_AREA_NEXT_2\n         BZ    MAIN0340\n         L     R15,V_DISXLIST\n         BALR  R14,R15                        DISPLAY CHAIN\n         B     MAIN0110\n* ------------------------------------------------------------------- *\n*        Display ALL data chain                                       *\n* ------------------------------------------------------------------- *\nMAIN0330 DS    0H\n         ITRACE ID=ALL_AREA\n         ICM   R1,15,COMM_ALL_AREA_NEXT\n         BZ    MAIN0340\n         L     R15,V_DISXLIST\n         BALR  R14,R15                        DISPLAY CHAIN\n         B     MAIN0110\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0340 DS    0H\n         MVC   SPF_MSG_1(MSG08_L),MSG08\n         B     MAIN0110\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0350 DS    0H\n         TM    DXD_FLAGS,$DEBUG               DEBUG FLAG ON?\n         BO    MAIN0360                       YES\n         OI    DXD_FLAGS,$DEBUG               TURN ON DEBUG FLAG\n         MVC   SPF_MSG_1(MSG09_L),MSG09\n         B     MAIN0110\nMAIN0360 DS    0H\n         NI    DXD_FLAGS,255-$DEBUG           TURN OFF DEBUG FLAG\n         MVC   SPF_MSG_1(MSG10_L),MSG10\n         B     MAIN0110\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0700 DS    0H\n         ITRACE ID=ABEND\n         DC    H'0'\nMAIN0710 DS    0H\n         ITRACE ID=DEBUG\n         MVC   SPF_ZCMD,COMM_BLANKS\n         L     R15,V_DISTDBUG\n         BALR  R14,R15\n         B     MAIN0110\nMAIN0720 DS    0H\n         ITRACE ID=TRACEON\n         MVC   SPF_ZCMD,COMM_BLANKS\n         OI    COMM_TRACE_FLAGS,$COMM_TRACE_OPEN\n         B     MAIN0110\nMAIN0730 DS    0H\n         ITRACE ID=TRACEOFF\n         MVC   SPF_ZCMD,COMM_BLANKS\n         NI    COMM_TRACE_FLAGS,255-$COMM_TRACE_OPEN\n         B     MAIN0110\nMAIN0740 DS    0H\n         MVC   SPF_ZCMD,COMM_BLANKS\n         TM    COMM_FLAGS,$COMM_AREA_DEBUG\n         BO    MAIN0750\n         ITRACE ID=AREA_ON\n         OI    COMM_FLAGS,$COMM_AREA_DEBUG\n         B     MAIN0110\nMAIN0750 DS    0H\n         ITRACE ID=AREA_OFF\n         NI    COMM_FLAGS,255-$COMM_AREA_DEBUG\n         B     MAIN0110\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         DC    H'1'\nERR0020  DS    0H\n         DC    H'2'\nERR0030  DS    0H\n         DC    H'3'\nERR0040  DS    0H\n         BAL   R8,MSG0010\n         BAL   R8,ERR1000\n         B     EXIT0000\nERR0050  DS    0H\n         DC    H'5'\nERR1000  DS    0H\n         MVC   COMM_SPF_FUNCTION,DISPLAY         SET FUNCTION\n         MVC   COMM_SPF_PANEL,DIS0000            SET PANEL NAME\n         LA    R1,COMM_SPF_PANEL\n         ST    R1,COMM_SPF_2                     SET PANEL ADDRESS\n         OI    COMM_SPF_2,X'80'                  FLAG END-OF-LIST\n         LA    R1,COMM_SPF_PARMS                 SPF PARM LIST\n         L     R15,COMM_ISPLINK                  ISPLINK ENTRY POINT\n         BALR  R14,R15                           DISPLAY PANEL\n         BR    R8\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTPUT0000 DS    0H\n         ITRACE ID=TPUT\n         TPUT  COMM_INFO_01,L'COMM_INFO_01       ISSUE TPUT\n         STIMER REAL,                                                  +\n               BINTVL=WAIT_TIME\n         BR    R8\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0000  DS    0H\n         MVC   COMM_MSG_CSECT,MODID           SET CSECT NAME\n         L     R15,V_DISMSG                   DISMSG ENTRY POINT\n         BALR  R14,R15                        BUILD MESSAGE(S)\nMSG0010  DS    0H\n         MVC   SPF_MSG_1,COMM_MSG_1           COPY MESSAGE\n         MVC   SPF_MSG_2,COMM_MSG_2           COPY MESSAGE\n         MVC   SPF_MSG_3,COMM_MSG_3           COPY MESSAGE\n         MVC   SPF_MSG_4,COMM_MSG_4           COPY MESSAGE\n         MVC   SPF_MSG_5,COMM_MSG_5           COPY MESSAGE\n         BR    R8\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT0000\n         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC\n         MVC   COMM_DAIR_DD,SYSIN\n         L     R15,V_DISDAIR\n         BALR  R14,R15                           FREE SYSIN\n         MVC   COMM_DAIR_DD,SYSPRINT\n         L     R15,V_DISDAIR\n         BALR  R14,R15                           FREE SYSPRINT\n         MVC   COMM_DAIR_DD,DISPRINT\n         L     R15,V_DISDAIR\n         BALR  R14,R15                           FREE DISPRINT\n         TM    DXD_FLAGS,$DIALOG_ACTIVE          BINDER DIALOG ACTIVE?\n         BNO   EXIT0010                          NO\n         ITRACE ID=ENDD\n         MVI   COMM_BIND_FUNC,$BIND_ENDD         SET FUNCTION\n         L     R15,V_DISBIND                     DISBIND ENTRY POINT\n         BALR  R14,R15                           END DIALOG\n         NI    DXD_FLAGS,255-$DIALOG_ACTIVE      DIALOG NOT ACTIVE\nEXIT0010 DS    0H\n         ITRACE ID=CLOSE,                                              +\n               DATA1=COMM_DDNAME\n         CLOSE DISMOD_DCB,                                             +\n               MODE=31,                                                +\n               MF=(E,COMM_CLOSE)\n         MVI   COMM_DAIR_FUNC,$DAIR_DEALLOC      SET FUNCTION\n         MVC   COMM_DAIR_DD,COMM_DDNAME          COPY DDNAME\n         ITRACE ID=DALOLMOD,                                           +\n               DATA1=COMM_DAIR_DD\n         L     R15,V_DISDAIR                     DISDAIR ENTRY POINT\n         BALR  R14,R15                           FREE LMOD LIBRARY\n         LTR   R15,R15                           SUCCESSFUL?\n         BZ    EXIT0020                          YES\n         BAL   R8,ERR1000                        DISPLAY MSG\nEXIT0020 DS    0H\n         MVI   COMM_VAR_FUNC,$VAR_DELETE         SET FUNCTION\n         L     R15,V_DISVAR                      VARIABLE MANAGER\n         BALR  R14,R15                           DELETE VARIABLES\n         OC    COMM_OPCODE_TABLE_ADDR,COMM_OPCODE_TABLE_ADDR\n         BZ    EXIT0030                          NOT LOADED\n         ITRACE ID=DEL_OP,                                             +\n               DATA1=COMM_OPCODE_TABLE_NAME\n         DELETE EPLOC=COMM_OPCODE_TABLE_NAME     DELETE OPCODE TABLE\n         XC    COMM_OPCODE_TABLE_ADDR,COMM_OPCODE_TABLE_ADDR\nEXIT0030 DS    0H\n         ITRACE ID=FREEVDATA\n         MVI   COMM_VDATA_FUNC,$VDATA_FREEMAIN   SET FUNCTION\n         L     R15,V_DISVDATA\n         BALR  R14,R15                           FREE VDATA STORAGE\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                       RESTORE R13\n         LM    R14,R12,12(R13)                   RESTORE REGISTERS      ASE01680\n         SR    R15,R15                           SET RC\n         BR    R14                               RETURN TO CALLER       ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START      DC    Q(DXDTMAIN)\nWAIT_TIME      DC    F'100'\nF1             DC    F'1'\n\nHEXCHAR        EQU   *-C'0'\n               DC    C'0123456789ABCDEF'\n\nBROWSE         DC    CL8'BROWSE'\nDDID           DC    CL8'DDID'\nDISOP          DC    CL8'DISOP'\nDISPLAY        DC    CL8'DISPLAY'\nDISMENU        DC    CL8'DISMENU'\nDIS0000        DC    CL8'DIS0000'\nDIS0001        DC    CL8'DIS0001'\nDIS0002        DC    CL8'DIS0002'\nLMINIT         DC    CL8'LMINIT'\nSYSIN          DC    CL8'SYSIN'\nSYSPRINT       DC    CL8'SYSPRINT'\nDISPRINT       DC    CL8'DISPRINT'\nDISPUNCH       DC    CL8'DISPUNCH'\n\nABEND          DC    C'ABEND '\nAREA           DC    C'AREA '\nDEBUG          DC    C'DEBUG '\nTRACE_ON       DC    C'TRACE ON'\nTRACE_OFF      DC    C'TRACE OFF'\n\nMSG01          DC    C'Verifying BASE and USING(s)'\nMSG01_L        EQU   *-MSG01\n\nMSG02          DC    C'Chaining USINGs to DSECTs'\nMSG02_L        EQU   *-MSG02\n\nMSG03          DC    C'Merging data area info'\nMSG03_L        EQU   *-MSG03\n\nMSG04          DC    C'Scanning text to determine where instructions oc+\n               cur'\nMSG04_L        EQU   *-MSG04\n\nMSG05          DC    C'Determining referenced labels'\nMSG05_L        EQU   *-MSG05\n\nMSG06          DC    C'Generating source'\nMSG06_L        EQU   *-MSG06\n\nMSG07          DC    C'Select the opcode table to be used'\nMSG07_L        EQU   *-MSG07\n\nMSG08          DC    C'No AREA(S) to display'\nMSG08_L        EQU   *-MSG08\n\nMSG09          DC    C'Debug set'\nMSG09_L        EQU   *-MSG09\n\nMSG10          DC    C'Debug reset'\nMSG10_L        EQU   *-MSG10\n\nMSG11          DC    C'Enter a label prefix'\nMSG11_L        EQU   *-MSG11\n\nFUNCTION_TABLE DS    0C\n               DC    C'A',VL4(DISALIST)\n               DC    C'B',VL4(DISBLIST)\n               DC    C'C',VL4(DISCONF)\n               DC    C'D',VL4(DISDLIST)\n               DC    C'E',VL4(DISELIST)\n               DC    C'G',AL4(MAIN0200)\n               DC    C'K',VL4(DISKLIST)\n               DC    C'O',VL4(DISOPTS)\n               DC    C'R',VL4(DISRLIST)\n               DC    C'S',VL4(DISSLIST)\n               DC    C'T',VL4(DISTLSTT)\n               DC    C'U',AL4(MAIN0170)\n*              DC    C'U',VL4(DISULIST)\n               DC    C'X',AL4(EXIT0000)\n               DC    C'Z',AL4(MAIN0350)\n               DC    C'1',AL4(MAIN0300)\n               DC    C'2',AL4(MAIN0310)\n               DC    C'3',AL4(MAIN0320)\n               DC    C'4',AL4(MAIN0330)\n               DC    X'FF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDTMAIN       DSECT\n               DS    18F             REGISTER SAVE AREA\nDXD_CSECT      DS    CL8\n\nDXD_DDID       DS    CL8             DISPRINT DATA SET ID\n\nDXD_FLAGS      DS    X\n$LIB_ALLOCATED EQU   X'80'           .. LMOD LIBRARY IS ALLOCATED\n$LMOD_PROMPT   EQU   X'40'           .. PROMPTED FOR LMOD\n$DIALOG_ACTIVE EQU   X'20'           .. BINDER DIALOG IS ACTIVE\n$DISPRINT_DDID EQU   X'10'           .. DISPRINT DDID OBTAINED\n$DEBUG         EQU   X'08'           .. DEBUG\n$TEMP_PUNCH    EQU   X'04'           .. DISPUNCH TEMPORARY ALLOCATED\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFUNCTION_DSECT DSECT\nFUNCTION_CODE  DS    C\nFUNCTION_ADDR  DS    XL4\nFUNCTION_L     EQU   *-FUNCTION_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               DISCOMM  TYPE=DSECT\n               DISSPFD  TYPE=DSECT\n               COPY     DISASMDA\n               COPY     LIBBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               DCBD     DSORG=PS\nDCB_L          EQU      *-IHADCB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               IFGACB   AM=VSAM\nACB_L          EQU      *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY     REGEQU\n\n               END      DISTMAIN\n./ ADD NAME=DISULIST 0103-09119-09198-0821-00772-00775-00004-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: DISULIST                                              *\n*                                                                     *\n*  FUNCTION:                                                          *\n*    Display/allow definition of USINGs                               *\n*                                                                     *\n*                                                                     *\n*  There are two ways for DSECT information to be made available.     *\n*  One is via the batch utility DISASMU1, the other is by supplying   *\n*  assembler source (via the \"A\" main menu option).                   *\n*                                                                     *\n*  The batch utility stores the information from a processing         *\n*  DSECTs in VSAM KSDSes.                                             *\n*                                                                     *\n*  Information from DSECTs processed via the \"A\" main menu option     *\n*  is stored in in-storage control block chains.                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  When the user wants to define a USING                              *\n*   They will be shown a list of the pre-processed DSECT info         *\n*   data sets (from the 'K' main menu option)                         *\n*                                                                     *\n*   They may select one of the pre-processed DSECT info KSDSes        *\n*   or the DSECTs defined via the 'A' main menu option.               *\n*                                                                     *\n*                                                                     *\n*   When the user selects the KSDS or to use DSECTs from the 'A'      *\n*   option, they will be shown the names of the DSECTs available.     *\n*                                                                     *\n*   The user may choose to use the DSECT itself (the base register    *\n*   for the DSECT references the first byte of the DSECT) or they     *\n*   may select a label within the DSECT (in case the base register    *\n*   does not refer to the first byte of the DSECT.                    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISULIST CSECT\nDISULIST AMODE 31\nDISULIST RMODE ANY\n         USING DISULIST,R11,R10\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     MOD0000                           SKIP EYECATCHER\nMODID    DC    CL8'DISULIST'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         LA    R10,2048(,R11)\n         LA    R10,2048(,R10)\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDULIST,R13\n         USING DISSPFD,R9\n         USING USING_DSECT,R7\n         USING KSDS_DSECT,R6\n         USING DSECT_DSECT,R5\n         USING LABEL_DSECT,R4\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD\n         L     R1,SPF_VDEPTH                     NBR OF LINES\n         LA    R1,1(,R1)                         PLUS 1\n         SRL   R1,2                              DIVIDE BY 4\n         STH   R1,DXD_USINGS_PER_SCREEN          NBR OF USINGS PER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        In order to allow the user to \"cancel\" changes,              *\n*        first \"copy\" the existing USING chain.                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         XC    DXD_FIRST_USING,DXD_FIRST_USING\n         XC    DXD_FIRST_USING_DISPLAYED,DXD_FIRST_USING_DISPLAYED\n         LA    R2,DXD_FIRST_USING-4\nPREV     USING USING_DSECT,R2\n         ICM   R7,15,COMM_USING_NEXT             FIRST USING\n         BZ    MAIN0000                          NO USINGS\nINIT0010 DS    0H\n         GETMAIN RU,                                                   +\n               LV=USING_DSECT_L,                                       +\n               LOC=ANY\n         ITRACE ID=COPY_1,                                             +\n               RDATA1=R1\nNEW      USING USING_DSECT,R1\n         MVC   NEW.USING_DSECT(USING_DSECT_L),USING_DSECT\n         ST    R1,PREV.USING_NEXT\n         ST    R2,NEW.USING_PREV\n         LR    R2,R1\n         ICM   R7,15,USING_NEXT\n         BNZ   INIT0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0000 DS    0H\n         ITRACE ID=MAIN0000\n         MVC   DXD_FIRST_USING_DISPLAYED,DXD_FIRST_USING\n         DROP  NEW,PREV\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=INIT_V\n         L     R0,COMM_VDATA_ADDR\n         L     R1,COMM_VDATA_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                            INITIALIZE VDATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=BUILD\n         L     R8,COMM_VDATA_ADDR                VDATA ADDR\n         LH    R2,DXD_USINGS_PER_SCREEN          NBR PER SCREEN\n         XC    DXD_NBR_DISPLAYED,DXD_NBR_DISPLAYED\n         ICM   R7,15,DXD_FIRST_USING_DISPLAYED   FIRST TO DISPLAY\n         BZ    MAIN0100                          NOTHING TO DISPLAY\nMAIN0020 DS    0H\n         ITRACE ID=USING,                                              +\n               RDATA1=R7,                                              +\n               DATA2=USING_PREV\n         ST    R7,DXD_LAST_USING_DISPLAYED       SAVE ADDR\n         LA    R1,1                              CONSTANT 1\n         AH    R1,DXD_NBR_DISPLAYED              PLUS TOTAL SO FAR\n         STH   R1,DXD_NBR_DISPLAYED              SAVE TOTAL\n         MVC   0(LINE01_L,R8),LINE01\n         USING LINE01,R8\n         MVC   LINE01_BASE,USING_CHAR_REGISTER   REGISTER IN CHAR FORM\n         UNPK  DXD_WORK(9),USING_BEGIN(5)\n         MVC   LINE01_BEGIN,DXD_WORK\n         TR    LINE01_BEGIN,COMM_HEXCHAR\n         UNPK  DXD_WORK(9),USING_END(5)\n         MVC   LINE01_END,DXD_WORK\n         TR    LINE01_END,COMM_HEXCHAR\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         DROP  R8\n\n         MVC   0(LINE02_L,R8),LINE02\n         USING LINE02,R8\n         MVC   LINE02_DSECT(63),USING_DSECT_NAME DSECT NAME\n         CLC   USING_DSECT_LABEL,COMM_BLANKS     LABEL IN DSECT?\n         BNE   MAIN0050                          YES\n         OC    USING_DISP,USING_DISP             DISP ZERO?\n         BZ    MAIN0050                          YES\n         UNPK  DXD_WORK(9),USING_DISP(5)         UNPACK DISP\n         LA    R1,LINE02_DSECT+L'LINE02_DSECT\nMAIN0030 DS    0H\n         CLI   0(R1),C' '                        BLANK?\n         BNE   MAIN0040                          NO\n         BCT   R1,MAIN0030\nMAIN0040 DS    0H\n         MVI   1(R1),C'+'\n         MVC   2(8,R1),DXD_WORK                  COPY UNPACKED DISP\n         TR    2(8,R1),COMM_HEXCHAR              TRANSLATE\n         DROP  R8\n\nMAIN0050 DS    0H\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         MVC   0(LINE03_L,R8),LINE03\n         USING LINE03,R8\n         CLC   USING_DSECT_LABEL,COMM_BLANKS     LABEL BLANK?\n         BE    MAIN0080\n         MVC   LINE03_LABEL(63),USING_DSECT_LABEL    LABEL NAME\n         OC    USING_DISP,USING_DISP             DISP ZERO?\n         BZ    MAIN0080\n         UNPK  DXD_WORK(9),USING_DISP(5)         UNPACK DISP\n         LA    R1,LINE03_LABEL+L'LINE03_LABEL\nMAIN0060 DS    0H\n         CLI   0(R1),C' '                        BLANK?\n         BNE   MAIN0070                          NO\n         BCT   R1,MAIN0060\nMAIN0070 DS    0H\n         MVI   1(R1),C'+'\n         MVC   2(8,R1),DXD_WORK                  COPY UNPACKED DISP\n         TR    2(8,R1),COMM_HEXCHAR              TRANSLATE\n         DROP  R8\n\nMAIN0080 DS    0H\n         A     R8,SPF_VWIDTH\n\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R2,MAIN0090\n         B     MAIN0100\nMAIN0090 DS    0H\n         ICM   R7,15,USING_NEXT\n         BNZ   MAIN0020\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*        Display the list of USING's                                  *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0100 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_SPF_PANEL,PANEL_NAME1        SET PANEL NAME\n         L     R15,V_DISDISP                     DISP ENTRY POINT\n         BALR  R14,R15                           DISPLAY\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15,                                             +\n               DATA2=SPF_ZVERB\n         LTR   R15,R15                           RC = 0?\n         BNZ   MAIN0600                          NO\n         CLC   ABEND,SPF_ZCMD                    ABEND?\n         BE    ABEND000                          YES\n         CLC   CANCEL,SPF_ZCMD                   CANCEL?\n         BE    MAIN9000                          YES\n         CLC   CAN,SPF_ZCMD                      CAN(CEL)?\n         BE    MAIN9000                          YES\n         CLC   =C'NEW',SPF_ZCMD                  NEW?\n         BE    MAIN0300                          YES\n* ------------------------------------------------------------------- *\n*        Check for delete request(s)                                  *\n* ------------------------------------------------------------------- *\n         L     R8,COMM_VDATA_ADDR                VDATA ADDR\n         LH    R2,DXD_USINGS_PER_SCREEN          NBR PER SCREEN\n         ICM   R7,15,DXD_FIRST_USING_DISPLAYED   FIRST TO DISPLAY\n         USING LINE01,R8                         DEFINE BASE\n         NI    DXD_FLAGS,255-$DXD_DELETE         RESET FLAG\nMAIN0110 DS    0H\n         OI    LINE01_DELETE,C' '\n         CLI   LINE01_DELETE,C' '                DELETE THIS USING?\n         BE    MAIN0150                          NO\n         OI    DXD_FLAGS,$DXD_DELETE             SET FLAG\n         ICM   R1,15,USING_PREV                  PREVIOUS USING?\n         BZ    MAIN0120                          NO\nPREV     USING USING_DSECT,R1                    DEFINE BASE\n         MVC   PREV.USING_NEXT,USING_NEXT        CHAIN PREV TO NEXT\n         DROP  PREV\nMAIN0120 DS    0H\n         ICM   R1,15,USING_NEXT                  NEXT USING?\n         BZ    MAIN0130                          NO\nNEXT     USING USING_DSECT,R1                    DEFINE BASE\n         MVC   NEXT.USING_PREV,USING_PREV        CHAIN NEXT TO PREV\n         DROP  NEXT\nMAIN0130 DS    0H\n         C     R7,DXD_FIRST_USING                FIRST ON CHAIN?\n         BNE   MAIN0140                          NO\n         MVC   DXD_FIRST_USING,USING_PREV        CHANGE ADDRESS\n         OC    DXD_FIRST_USING,DXD_FIRST_USING   PREVIOUS EXIST?\n         BNZ   MAIN0140                          YES\n         MVC   DXD_FIRST_USING,USING_NEXT        USE NEXT INSTEAD\nMAIN0140 DS    0H\n         ITRACE ID=FREEUSNG,                                           +\n               RDATA1=R7,                                              +\n               DATA2=USING_PREV\n         LR    R1,R7                             COPY ADDRESS\n         L     R7,USING_NEXT                     NEXT ON CHAIN\n         FREEMAIN RU,                            FREE THIS USING BLOCK +\n               A=(1),                                                  +\n               LV=USING_DSECT_L\n         B     MAIN0160\nMAIN0150 DS    0H\n         L     R7,USING_NEXT                     NEXT USING\nMAIN0160 DS    0H\n         A     R8,SPF_VWIDTH                     NEXT LINE (LINE02)\n         A     R8,SPF_VWIDTH                     NEXT LINE (LINE03)\n         A     R8,SPF_VWIDTH                     NEXT LINE (BLANK LINE)\n         A     R8,SPF_VWIDTH                     NEXT LINE (LINE01)\n         BCT   R2,MAIN0110\n         TM    DXD_FLAGS,$DXD_DELETE             ANY DELETIONS?\n         BO    MAIN0000                          YES\n         ITRACE ID=NODELETE\n         DROP  R8\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=SCROLL,                                             +\n               DATA1=SPF_ZVERB,                                        +\n               DATA2=SPF_ZSCROLLA\n         CLI   SPF_ZVERB,C'B'                    BOTTOM?\n         BE    MAIN0200\n         CLI   SPF_ZVERB,C'D'                    DOWN?\n         BE    MAIN0220\n         CLI   SPF_ZVERB,C'T'                    TOP?\n         BE    MAIN0240\n         CLI   SPF_ZVERB,C'U'                    UP?\n         BE    MAIN0250\n         B     MAIN0100\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         ITRACE ID=BOTTOM\n         ICM   R7,15,DXD_FIRST_USING             FIRST ON CHAIN\nMAIN0210 DS    0H\n         ST    R7,DXD_FIRST_USING_DISPLAYED      SAVE ADDRESS\n         ICM   R7,15,USING_NEXT                  ANOTHER USING?\n         BNZ   MAIN0210                          YES\n         B     MAIN0010                          BUILD DISPLAY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0220 DS    0H\n         ITRACE ID=DOWN\n         CLI   SPF_ZSCROLLA,C'M'                 MAX?\n         BE    MAIN0200                          YES\n         L     R2,SPF_ZSCROLLN                   NBR OF LINES TO SCROLL\n         L     R7,DXD_FIRST_USING_DISPLAYED      1ST ON DISPLAY\nMAIN0230 DS    0H\n         ST    R7,DXD_FIRST_USING_DISPLAYED      SAVE USING BLOCK ADDR\n         ICM   R7,15,USING_NEXT                  ANOTHER USING?\n         BZ    MAIN0010                          NO\n         BCT   R2,MAIN0230                       LOOP\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0240 DS    0H\n         ITRACE ID=TOP\n         L     R7,DXD_FIRST_USING                FIRST DATA ITEM\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0250 DS    0H\n         ITRACE ID=UP1\n         CLI   SPF_ZSCROLLA,C'M'                 MAX?\n         BE    MAIN0240                          YES\n         ICM   R7,15,DXD_FIRST_USING_DISPLAYED   FIRST ON DISPLAY\n         BZ    EXIT0000                          SHOULD NOT HAPPEN!\n         L     R2,SPF_ZSCROLLN                   LINES ON DISPLAY\nMAIN0260 DS    0H\n         ST    R7,DXD_FIRST_USING_DISPLAYED      COPY ADDR\n         ICM   R7,15,USING_PREV                  PREVIOUS USING?\n         BZ    MAIN0010                          NO\n         BCT   R2,MAIN0260                       LOOP\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*      Define new USING                                               *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=NEW\n         MVC   SPF_ZCMD,COMM_BLANKS\n* ------------------------------------------------------------------- *\n*      Display list of KSDSes                                         *\n* ------------------------------------------------------------------- *\n         ITRACE ID=ULSTK\n         L     R15,V_DISULSTK                    DISULSTK ENTRY POINT\n         BALR  R14,R15                           DISPLAY LIST OF KSDSES\n         ITRACE ID=ULSTK_RC,                                           +\n               RDATA1=R15\n         LTR   R15,R15                           KSDS SELECTED?\n         BZ    MAIN0310                          YES\n         CH    R15,H4                            ASSEMBLED DSECTS?\n         BE    MAIN0330                          YES\n         B     MAIN9000                          ABORT\n* ------------------------------------------------------------------- *\n*        User has selected a KSDS                                     *\n* ------------------------------------------------------------------- *\nMAIN0310 DS    0H\n         ITRACE ID=KSDS,                         KSDS WAS SELECTED     +\n               RDATA1=R6\n         L     R6,COMM_USING_KSDS                SELECTED KSDS\n         USING KSDS_DSECT,R6                     DEFINE BASE\n         TM    KSDS_FLAGS,$KSDS_DSECTS_READ      DSECTS READ?\n         BO    MAIN0320                          YES\n         L     R15,V_DISDREAD                    DSECT READER\n         ITRACE ID=DREAD                         CALLING DSECT READER\n         BALR  R14,R15                           READ DSECTS\n         ITRACE ID=DREAD_RC,                                           +\n               RDATA1=R15\nMAIN0320 DS    0H\n         MVC   COMM_USING_DSECT,KSDS_DSECT_NEXT  1ST DSECT\n         B     MAIN0340\n* ------------------------------------------------------------------- *\n*        Use user supplied DSECTs (from option A)                     *\n* ------------------------------------------------------------------- *\nMAIN0330 DS    0H\n         SR    R6,R6                             NOT FROM KSDS\n         MVC   COMM_USING_DSECT,COMM_DSECT_NEXT  1ST DSECT\n* ------------------------------------------------------------------- *\n*        Display list of DSECTs                                       *\n* ------------------------------------------------------------------- *\nMAIN0340 DS    0H\n         L     R15,V_DISULSTD                    DISPLAY DSECTS\n         ITRACE ID=ULSTD\n         BALR  R14,R15                           CALLING ULSTD\n         ITRACE ID=ULSTD_RC,                                           +\n               RDATA1=R15\n         LTR   R15,R15                           DSECT SELECTED?\n         BNZ   MAIN9000                          NO\n         L     R5,COMM_USING_DSECT\n         LTR   R6,R6                             DATA FROM A KSDS?\n         BZ    MAIN0350                          NO\n         TM    DSECT_FLAGS,$DSECT_LABELS_READ    LABELS READ?\n         BO    MAIN0350                          YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R15,V_DISLREAD                    DISLREAD ENTRY POINT\n         ITRACE ID=LREAD\n         BALR  R14,R15                           CALL DISLREAD\n         ITRACE ID=LREAD_RC,                                           +\n               RDATA1=R15\n         OI    DSECT_FLAGS,$DSECT_LABELS_READ    SET FLAG\n* ------------------------------------------------------------------- *\n*        Display list of labels in selected DSECT                     *\n* ------------------------------------------------------------------- *\nMAIN0350 DS    0H\n         L     R15,V_DISULSTL                    DISPLAY LABELS\n         ITRACE ID=ULSTL\n         BALR  R14,R15                           CALLING ULSTL\n         ITRACE ID=ULSTL_RC,                                           +\n               RDATA1=R15\n* ------------------------------------------------------------------- *\n*        Display registers, start and end disp's                      *\n* ------------------------------------------------------------------- *\nMAIN0360 DS    0H\n         MVC   SPF_REGISTER,COMM_BLANKS          INITIALIZE REGISTER\n         MVC   SPF_BEGIN,C_ZERO                  INITIALIZE BEGIN DISP\n         MVC   SPF_END,C_ZERO                    INITIALIZE END DISP\nMAIN0370 DS    0H\n         ITRACE ID=DISUREGD\n         MVC   COMM_SPF_PANEL,PANEL_NAME2        SET PANEL NAME\n         L     R15,V_DISDISP                     DISP ENTRY POINT\n         BALR  R14,R15                           DISPLAY\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15\n         LTR   R15,R15                           RC = 0?\n         BNZ   MAIN0010                          NO\n         CLC   ABEND,SPF_ZCMD                    ABEND?\n         BE    ABEND000                          YES\n* ------------------------------------------------------------------- *\n*        Verify base register                                         *\n* ------------------------------------------------------------------- *\n         OC    SPF_REGISTER,COMM_BLANKS          REGISTER BLANK?\n         ITRACE ID=VER_REG,                                            +\n               DATA1=SPF_REGISTER\n         CLC   SPF_REGISTER,COMM_BLANKS          REGISTER BLANK?\n         BE    MAIN0440                          YES\n         LA    R1,L'SPF_REGISTER-1               LOOP LIMITER\nMAIN0380 DS    0H\n         CLI   SPF_REGISTER,C' '                 BLANK?\n         BNE   MAIN0390                          NO\n         MVC   SPF_REGISTER(L'SPF_REGISTER-1),SPF_REGISTER+1\n         BCT   R1,MAIN0380                       LOOP\nMAIN0390 DS    0H\n         LA    R1,REGISTER_TABLE\n         USING REGISTER_DSECT,R1\nMAIN0400 DS    0H\n         CLI   0(R1),X'FF'                       END OF TABLE?\n         BE    MAIN0450                          YES\n         CLC   SPF_REGISTER,REGISTER_NAME        REGISTER LOCATED?\n         BE    MAIN0410                          YES\n         LA    R1,REGISTER_DSECT_L(,R1)          NEXT\n         B     MAIN0400\nMAIN0410 DS    0H\n         MVC   DXD_REGISTER,REGISTER_REGISTER    SAVE REGISTER\n         MVC   DXD_REGISTER_NAME,REGISTER_NAME   SAVE REGISTER NAME\n* ------------------------------------------------------------------- *\n*        Verify begin and end disps                                   *\n* ------------------------------------------------------------------- *\n         ITRACE ID=VER_BEG,                                            +\n               DATA1=SPF_BEGIN\n         LA    R1,SPF_BEGIN                      BEGIN DISP\n         ST    R1,DXD_CONV_SOURCE\n         LA    R1,DXD_BEGIN                      CONVERSION OUTPUT\n         ST    R1,DXD_CONV_OUT\n         LA    R1,DXD_CONV_PARMS                 CONVERSION PARMS\n         L     R15,V_DISDCONV                    CONVERTER ENTRY POINT\n         BALR  R14,R15\n         LTR   R15,R15                           ERRORS?\n         BNZ   MAIN0460                          YES\n         ITRACE ID=VER_END,                                            +\n               DATA1=SPF_END\n         LA    R1,SPF_END                        END DISP\n         ST    R1,DXD_CONV_SOURCE\n         LA    R1,DXD_END                        CONVERSION OUTPUT\n         ST    R1,DXD_CONV_OUT\n         LA    R1,DXD_CONV_PARMS                 CONVERSION PARMS\n         L     R15,V_DISDCONV                    CONVERTER ENTRY POINT\n         BALR  R14,R15\n         LTR   R15,R15                           ERRORS?\n         BNZ   MAIN0470                          YES\n         CLC   DXD_END,DXD_BEGIN                 END LESS THAN BEGIN?\n         BL    MAIN0480\n* ------------------------------------------------------------------- *\n*        We've put it off long enough, build a new USING block        *\n* ------------------------------------------------------------------- *\n         GETMAIN RU,                             GET MAIN STORAGE      +\n               LV=USING_DSECT_L,                                       +\n               LOC=ANY\n         LR    R7,R1                             COPY ADDRESS\n         ICM   R1,15,DXD_FIRST_USING             FIRST ON CHAIN NOW\n         BZ    MAIN0420                          NONE ON CHAIN\nFIRST    USING USING_DSECT,R1\n         ST    R7,FIRST.USING_PREV               SET PREV IN OLD 1ST\n         DROP  FIRST\nMAIN0420 DS    0H\n         XC    USING_DSECT(USING_DSECT_L),USING_DSECT\n         MVC   USING_NEXT,DXD_FIRST_USING        COPY FIRST ON CHAIN\n         ST    R7,DXD_FIRST_USING                ADD NEW TO CHAIN\n         MVC   USING_EYE,USING_ID                IDENTIFY THE BLOCK\n         L     R5,COMM_USING_DSECT               DSECT BLOCK\n         ST    R5,USING_DSECT_ADDR               CHAIN USING TO DSECT\n         MVC   USING_DSECT_NAME,DSECT_NAME       COPY DSECT NAME\n         MVC   USING_DSECT_LABEL,COMM_BLANKS     INITIALIZE LABEL\n         ICM   R4,15,COMM_USING_LABEL            LABEL?\n         BZ    MAIN0430                          NO\n         ST    R4,USING_LABEL_ADDR               CHAIN USING TO LABEL\n         MVC   USING_DSECT_LABEL,LABEL_NAME      COPY LABEL NAME\nMAIN0430 DS    0H\n         MVC   USING_BEGIN,DXD_BEGIN             COPY BEGIN DISP\n         MVC   USING_END,DXD_END                 COPY END DISP\n         MVC   USING_REGISTER,DXD_REGISTER       COPY REGISTER\n         MVC   USING_CHAR_REGISTER,DXD_REGISTER_NAME\n         ITRACE ID=NEW_USNG,                                           +\n               RDATA1=R7\n         B     MAIN0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0440 DS    0H\n         ITRACE ID=NO_REG\n         MVI   COMM_MSG_ID,1\n         B     MAIN0500\nMAIN0450 DS    0H\n         ITRACE ID=BAD_REG\n         MVI   COMM_MSG_ID,2\n         B     MAIN0500\nMAIN0460 DS    0H\n         ITRACE ID=BAD_BEG\n         B     MAIN0510\nMAIN0470 DS    0H\n         ITRACE ID=BAD_END\n         B     MAIN0510\nMAIN0480 DS    0H\n         ITRACE ID=END_LOW\n         MVI   COMM_MSG_ID,2\nMAIN0500 DS    0H\n         MVC   COMM_MSG_CSECT,MODID\n         L     R15,V_DISMSG\n         BALR  R14,R15\nMAIN0510 DS    0H\n         MVC   SPF_MSG_1,COMM_MSG_1\n         B     MAIN0370\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Normal exit..                                                *\n*        .  Free the old USING chain                                  *\n*        .  Replace old chain with new                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0600 DS    0H\n         ITRACE ID=SWITCH\n         ICM   R7,15,COMM_USING_NEXT          FIRST ON 'OLD' CHAIN\n         BZ    MAIN0620\nMAIN0610 DS    0H\n         LR    R1,R7                          COPY ADDRESS\n         L     R7,USING_NEXT                  NEXT USING BLOCK\n         FREEMAIN RU,                         FREE USING BLOCK         +\n               A=(1),                                                  +\n               LV=USING_DSECT_L\n         LTR   R7,R7                          ANOTHER USING BLOCK?\n         BNZ   MAIN0610                       YES\nMAIN0620 DS    0H\n         ITRACE ID=SWAP\n         MVC   COMM_USING_NEXT,DXD_FIRST_USING\n         XC    DXD_FIRST_USING,DXD_FIRST_USING\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN9000 DS    0H\n         ITRACE ID=ABORT\n         ICM   R7,15,DXD_FIRST_USING          FIRST USING\n         BZ    EXIT0000\nMAIN9010 DS    0H\n         LR    R1,R7                          COPY USING BLOCK ADDR\n         L     R7,USING_NEXT                  NEXT USING ON CHAIN\n         ITRACE ID=FREEUSNG,                                           +\n               RDATA1=R1\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=USING_DSECT_L\n         LTR   R7,R7                          ANOTHER USING?\n         BNZ   MAIN9010                       YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE REGISTER 13\n         L     R14,12(,R13)                   RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         LM    R0,R12,20(R13)                 RESTORE REGISTERS\n         BR    R14                            RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nABEND000 DS    0H\n         ITRACE ID=ABEND\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC   Q(DXDULIST)\nV_DISDREAD    DC   V(DISDREAD)\nV_DISLREAD    DC   V(DISLREAD)\nV_DISULSTD    DC   V(DISULSTD)\nV_DISULSTK    DC   V(DISULSTK)\nV_DISULSTL    DC   V(DISULSTL)\n\nH4            DC   H'4'\n\nABEND         DC   C'ABEND '\nCAN           DC   C'CAN '\nCANCEL        DC   C'CANCEL '\nC_ZERO        DC   CL8'00000000'\nPANEL_NAME1   DC   CL8'DISUDATA'\nPANEL_NAME2   DC   CL8'DISUREGD'\nUSING_ID      DC   CL8'USING'\n\n              LTORG\n\nLINE01        DS   0C\n              DC   AL1($ATTR_INPUT)\nLINE01_DELETE DC   C' '\n              DC   AL1($ATTR_HIGH)\n              DC   C'Base '\n              DC   AL1($ATTR_HIGH_YELLOW)\nLINE01_BASE   DC   CL3' '\n              DC   AL1($ATTR_NORMAL)\n              DC   C' In effect from '\n              DC   AL1($ATTR_HIGH_TURQUOISE)\nLINE01_BEGIN  DC   CL8' '\n              DC   AL1($ATTR_NORMAL)\n              DC   C' to '\n              DC   AL1($ATTR_HIGH_GREEN)\nLINE01_END    DC   CL8' '\n              DC   AL1($ATTR_NORMAL)\n              DC   C'     '\nLINE01_L      EQU  *-LINE01\n\nLINE02        DS   0C\n              DC   CL2' '\n              DC   AL1($ATTR_HIGH)\n              DC   C'DSECT'\n              DC   AL1($ATTR_HIGH_YELLOW)\nLINE02_DSECT  DC   CL71' '\nLINE02_L      EQU  *-LINE02\n\nLINE03        DS   0C\n              DC   CL2' '\n              DC   AL1($ATTR_HIGH)\n              DC   C'LABEL'\n              DC   AL1($ATTR_HIGH_YELLOW)\nLINE03_LABEL  DC   CL71' '\nLINE03_L      EQU  *-LINE03\n\nREGISTER_TABLE  DS    0C\n                DC    CL3'R0 ',X'00'\n                DC    CL3'R1 ',X'01'\n                DC    CL3'R2 ',X'02'\n                DC    CL3'R3 ',X'03'\n                DC    CL3'R4 ',X'04'\n                DC    CL3'R5 ',X'05'\n                DC    CL3'R6 ',X'06'\n                DC    CL3'R7 ',X'07'\n                DC    CL3'R8 ',X'08'\n                DC    CL3'R9 ',X'09'\n                DC    CL3'R10',X'0A'\n                DC    CL3'R11',X'0B'\n                DC    CL3'R12',X'0C'\n                DC    CL3'R13',X'0D'\n                DC    CL3'R14',X'0E'\n                DC    CL3'R15',X'0F'\n                DC    CL3'R00',X'00'\n                DC    CL3'R01',X'01'\n                DC    CL3'R02',X'02'\n                DC    CL3'R03',X'03'\n                DC    CL3'R04',X'04'\n                DC    CL3'R05',X'05'\n                DC    CL3'R06',X'06'\n                DC    CL3'R07',X'07'\n                DC    CL3'R08',X'08'\n                DC    CL3'R09',X'09'\n                DC    CL3'RA ',X'0A'\n                DC    CL3'RB ',X'0B'\n                DC    CL3'RC ',X'0C'\n                DC    CL3'RD ',X'0D'\n                DC    CL3'RE ',X'0E'\n                DC    CL3'RF ',X'0F'\n                DC    CL3'0  ',X'00'\n                DC    CL3'1  ',X'01'\n                DC    CL3'2  ',X'02'\n                DC    CL3'3  ',X'03'\n                DC    CL3'4  ',X'04'\n                DC    CL3'5  ',X'05'\n                DC    CL3'6  ',X'06'\n                DC    CL3'7  ',X'07'\n                DC    CL3'8  ',X'08'\n                DC    CL3'9  ',X'09'\n                DC    CL3'10 ',X'0A'\n                DC    CL3'11 ',X'0B'\n                DC    CL3'12 ',X'0C'\n                DC    CL3'13 ',X'0D'\n                DC    CL3'14 ',X'0E'\n                DC    CL3'15 ',X'0F'\n                DC    CL3'A  ',X'0A'\n                DC    CL3'B  ',X'0B'\n                DC    CL3'C  ',X'0C'\n                DC    CL3'D  ',X'0D'\n                DC    CL3'E  ',X'0E'\n                DC    CL3'F  ',X'0F'\n                DC    X'FF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDULIST                  DSECT\n                          DS   18F\n\n                          DS   A          DUMMY FOR 'PREV' ON CHAIN\nDXD_FIRST_USING           DS   A          FIRST USING ON CHAIN\n\nDXD_FIRST_USING_DISPLAYED DS   A          FIRST USING DISPLAYED\nDXD_LAST_USING_DISPLAYED  DS   A          LAST USING DISPLAYED\n\nDXD_CONV_PARMS            DS   0A\nDXD_CONV_SOURCE           DS   A\nDXD_CONV_OUT              DS   A\n\nDXD_USINGS_PER_SCREEN     DS   H          USINGS PER SCREEN\nDXD_NBR_DISPLAYED         DS   H          NBR OF USINGS DISPLAYED\n\nDXD_WORK                  DS   CL9\nDXD_REGISTER              DS   X\nDXD_REGISTER_NAME         DS   CL3\nDXD_BEGIN                 DS   XL4\nDXD_END                   DS   XL4\n\nDXD_FLAGS                 DS   X\n$DXD_DELETE               EQU  X'80'      .. USING BLOCK DELETED\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREGISTER_DSECT            DSECT\nREGISTER_NAME             DS   CL3\nREGISTER_REGISTER         DS   X\nREGISTER_DSECT_L          EQU  *-REGISTER_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              DISCOMM TYPE=DSECT\n              DISSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    DISASMDA\n              COPY    ATTRS\n\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n\n              IFGRPL  AM=VSAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    REGEQU\n              END     DISULIST\n./ ADD NAME=DISULSTD 0110-09104-09198-0821-00228-00217-00042-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: DISULSTD                                              *\n*                                                                     *\n*  FUNCTION:                                                          *\n*    Display DSECTs for USING definitions                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISULSTD CSECT\nDISULSTD AMODE 31\nDISULSTD RMODE ANY\n         USING DISULSTD,R11,R10\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     MOD0000                           SKIP EYECATCHER\nMODID    DC    CL8'DISULSTD'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         LA    R10,2048(,R11)\n         LA    R10,2048(,R10)\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         L     R9,COMM_DISSPFD\n         USING DXDULSTD,R13\n         USING DISSPFD,R9\n         USING DSECT_DSECT,R5\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=ENTRY,                                              +\n               DATA1=COMM_USING_KSDS,                                  +\n               DATA2=COMM_USING_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         MVC   DXD_FIRST_DSECT,COMM_USING_DSECT\n         MVC   DXD_FIRST_DSECT_DISPLAYED,COMM_USING_DSECT\nMAIN0010 DS    0H\n         ITRACE ID=BUILD\n         L     R0,COMM_VDATA_ADDR\n         L     R1,COMM_VDATA_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14\n         L     R8,COMM_VDATA_ADDR\n         L     R7,SPF_VDEPTH\n         ICM   R5,15,DXD_FIRST_DSECT_DISPLAYED\n         BZ    MAIN0210\nMAIN0020 DS    0H\n         ST    R5,DXD_LAST_DSECT_DISPLAYED\n         MVC   0(LINE01_L,R8),LINE01\n         USING LINE01,R8\n         MVC   LINE01_DSECT,DSECT_NAME           COPY NAME\n         A     R8,SPF_VWIDTH\n         BCT   R7,MAIN0030\n         B     MAIN0040\nMAIN0030 DS    0H\n         ICM   R5,15,DSECT_NEXT                  NEXT DSECT\n         BNZ   MAIN0020\n* ------------------------------------------------------------------- *\n*        Display list of DSECTS                                       *\n* ------------------------------------------------------------------- *\nMAIN0040 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_SPF_PANEL,PANEL_NAME         SET PANEL NAME\n         L     R15,V_DISDISP                     DISP ENTRY POINT\n         BALR  R14,R15                           DISPLAY\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15,                                             +\n               DATA2=SPF_ZVERB\n         LTR   R2,R15                            RC = 0?\n         BNZ   MAIN0210                          NO\n         CLC   ABEND,SPF_ZCMD                    ABEND?\n         BE    ABEND000                          YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R8,COMM_VDATA_ADDR\n         L     R7,SPF_VDEPTH\n         L     R5,DXD_FIRST_DSECT_DISPLAYED\nMAIN0050 DS    0H\n         CLI   LINE01_SELECT,C' '                SELECTED?\n         BNE   MAIN0200                          YES\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0060\n         B     MAIN0070\nMAIN0060 DS    0H\n         ICM   R5,15,DSECT_NEXT                  NEXT DSECT\n         BNZ   MAIN0050\n* ------------------------------------------------------------------- *\n*        Nothing selected, check for scrolling                        *\n* ------------------------------------------------------------------- *\nMAIN0070 DS    0H\n         ITRACE ID=SCROLL,                                             +\n               DATA1=SPF_ZVERB,                                        +\n               DATA2=SPF_ZSCROLLA\n         CLI   SPF_ZVERB,C'B'                    BOTTOM?\n         BE    MAIN0080\n         CLI   SPF_ZVERB,C'D'                    DOWN?\n         BE    MAIN0100\n         CLI   SPF_ZVERB,C'T'                    TOP?\n         BE    MAIN0120\n         CLI   SPF_ZVERB,C'U'                    UP?\n         BE    MAIN0130\n         B     MAIN0010\nMAIN0080 DS    0H\n         ITRACE ID=BOTTOM\n         L     R5,DXD_FIRST_DSECT                FIRST DSECT\nMAIN0090 DS    0H\n         ST    R5,DXD_FIRST_DSECT_DISPLAYED      SAVE DSECT BLOCK ADDR\n         ICM   R5,15,DSECT_NEXT                  ANOTHER DSECT?\n         BNZ   MAIN0090                          YES\n         B     MAIN0010\nMAIN0100 DS    0H\n         ITRACE ID=DOWN\n         CLI   SPF_ZSCROLLA,C'M'                 BOTTOM?\n         BE    MAIN0080                          YES\n         L     R5,DXD_FIRST_DSECT_DISPLAYED      FIRST DSECT DISPLAYED\n         L     R2,SPF_ZSCROLLN                   NBR TO SCROLL\nMAIN0110 DS    0H\n         ST    R5,DXD_FIRST_DSECT_DISPLAYED      SAVE DSECT BLOCK ADDR\n         ICM   R5,15,DSECT_NEXT                  ANOTHER DSECT?\n         BZ    MAIN0010                          NO.. DISPLAY\n         BCT   R2,MAIN0110                       LOOP\n         B     MAIN0010\nMAIN0120 DS    0H\n         ITRACE ID=TOP\n         MVC   DXD_FIRST_DSECT_DISPLAYED,DXD_FIRST_DSECT\n         B     MAIN0010\nMAIN0130 DS    0H\n         CLI   SPF_ZSCROLLA,C'M'                 TOP?\n         BE    MAIN0120                          YES\n         L     R5,DXD_FIRST_DSECT_DISPLAYED      FIRST ON LAST DISPLAY\n         L     R2,SPF_ZSCROLLN                   NBR TO SCROLL\nMAIN0140 DS    0H\n         ITRACE ID=UP,                                                 +\n               RDATA1=R5,                                              +\n               RDATA2=R2\n         ST    R5,DXD_FIRST_DSECT_DISPLAYED      SAVE DSECT BLOCK ADDR\n         ICM   R5,15,DSECT_PREV                  ANOTHER BLOCK?\n         BZ    MAIN0010                          NO\n         BCT   R2,MAIN0140                       LOOP\n         B     MAIN0010\n         DROP  R8\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         ITRACE ID=SELECTED,                                           +\n               RDATA1=R5,                                              +\n               DATA2=DSECT_NAME\n         ST    R5,COMM_USING_DSECT               SAVE ADDR\n         SR    R15,R15                           INDICATE 'SELECTED'\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0210 DS    0H\n         ITRACE ID=ABORT\n         XC    COMM_USING_DSECT,COMM_USING_DSECT NO DSECT\n         LA    R15,4                             SET RC\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT,                                               +\n               RDATA1=R15\n         L     R13,4(,R13)                       RESTORE REGISTER 13\n         L     R14,12(,R13)                      RESTORE R14\n         LM    R0,12,20(R13)                     RESTORE REGISTERS\n         BR    R14                               RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nABEND000 DS    0H\n         ITRACE ID=ABEND\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC   Q(DXDULSTD)\n\nABEND         DC   C'ABEND'\nPANEL_NAME    DC   CL8'DISDMENU'\n\nLINE01        DS   0C\n              DC   CL2' '\n              DC   AL1($ATTR_INPUT)\nLINE01_SELECT DC   C' '\n              DC   AL1($ATTR_HIGH_TURQUOISE)\nLINE01_DSECT  DC   CL63' '\nLINE01_L      EQU  *-LINE01\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDULSTD                  DSECT\n                          DS  18F\n\nDXD_FIRST_DSECT           DS  A          FIRST DSECT ON CHAIN\nDXD_FIRST_DSECT_DISPLAYED DS  A          FIRST DSECT DISPLAYED\nDXD_LAST_DSECT_DISPLAYED  DS  A          LAST  DSECT DISPLAYED\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              DISCOMM TYPE=DSECT\n              DISSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    DISASMDA\n              COPY    ATTRS\n\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n\n              IFGRPL  AM=VSAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    REGEQU\n              END     DISULSTD\n./ ADD NAME=DISULSTK 0111-09104-09198-0822-00268-00796-00116-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: DISULSTK                                              *\n*                                                                     *\n*  FUNCTION:                                                          *\n*    Display the list of pre-processed DSECT KSDSes for USINGs.       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISULSTK CSECT\nDISULSTK AMODE 31\nDISULSTK RMODE ANY\n         USING DISULSTK,R11,R10\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     MOD0000                           SKIP EYECATCHER\nMODID    DC    CL8'DISULSTK'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         LA    R10,2048(,R11)\n         LA    R10,2048(,R10)\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDULSTK,R13\n         ITRACE ID=ENTRY\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n         USING USING_DSECT,R7\n         USING KSDS_DSECT,R6\n         USING DSECT_DSECT,R4\n         USING LABEL_DSECT,R3\n         L     R0,COMM_VDATA_ADDR\n         L     R1,COMM_VDATA_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                            INITIALIZE VDATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*      Display list of DSECT KSDSes                                   *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0100 DS    0H\n         ITRACE ID=NEW\n         MVC   SPF_ZCMD,COMM_BLANKS\n         ICM   R1,15,COMM_KSDS_NEXT              ANY KSDSES?\n         BZ    MAIN0140                          NO\n         ST    R1,DXD_FIRST_KSDS_DISPLAYED       SAVE FIRST KSDS\nMAIN0110 DS    0H\n         L     R0,COMM_VDATA_ADDR\n         L     R1,COMM_VDATA_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                            INITIALIZE VDATA\n         ICM   R6,15,DXD_FIRST_KSDS_DISPLAYED\n         BZ    MAIN0140                          NONE TO DISPLAY\n         L     R8,COMM_VDATA_ADDR\n         L     R2,SPF_VDEPTH                     NBR OF LINES\nMAIN0120 DS    0H\n         ST    R6,DXD_LAST_KSDS_DISPLAYED        SAVE LAST DISPLAYED\n         MVC   0(LINE01_L,R8),LINE01\n         USING LINE01,R8\n         MVC   LINE01_DSNAME,KSDS_DSNAME\n         DROP  R8\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R2,MAIN0130\n         B     MAIN0140\nMAIN0130 DS    0H\n         ICM   R6,15,KSDS_NEXT                   NEXT KSDS\n         BNZ   MAIN0120\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*        Display the list of KSDS's                                   *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0140 DS    0H\n         MVI   SPF_FUNCTION,C' '                 INITIALIZE FUNCTION\n         ITRACE ID=DISPLAY\n         MVC   COMM_SPF_PANEL,PANEL_NAME         SET PANEL NAME\n         L     R15,V_DISDISP                     DISP ENTRY POINT\n         BALR  R14,R15                           DISPLAY\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15,                                             +\n               DATA2=SPF_ZVERB\n         LTR   R15,R15                           RC = 0?\n         BNZ   MAIN0330                          NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CLI   SPF_FUNCTION,C' '                 'A' OPTION DSECTS?\n         BNE   MAIN0300                          YES\n         L     R6,DXD_FIRST_KSDS_DISPLAYED       FIRST KSDS DISPLAYED\n         L     R8,COMM_VDATA_ADDR\n         L     R2,SPF_VDEPTH\n         USING LINE01,R8\nMAIN0150 DS    0H\n         CLI   LINE01_SELECT,C' '                THIS DATASET SELECTED?\n         BNE   MAIN0310                          YES\n         ICM   R6,15,KSDS_NEXT                   NEXT KSDS\n         BZ    MAIN0140                          END OF CHAIN\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R2,MAIN0150                       LOOP\n         DROP  R8\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=SCROLL,                                             +\n               DATA1=SPF_ZVERB,                                        +\n               DATA2=SPF_ZSCROLLA\n         CLI   SPF_ZVERB,C'B'                    BOTTOM?\n         BE    MAIN0160\n         CLI   SPF_ZVERB,C'D'                    DOWN?\n         BE    MAIN0180\n         CLI   SPF_ZVERB,C'T'                    TOP?\n         BE    MAIN0200\n         CLI   SPF_ZVERB,C'U'                    UP?\n         BE    MAIN0210\n         B     MAIN0140                          NO SCROLL REQUESTED\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0160 DS    0H\n         ITRACE ID=BOTTOM\n         ICM   R6,15,COMM_KSDS_NEXT              FIRST KSDS\n         BZ    MAIN0110                          NO KSDS(ES) DEFINED\nMAIN0170 DS    0H\n         ST    R6,DXD_FIRST_KSDS_DISPLAYED       SAVE KSDS BLOCK ADDR\n         ICM   R6,15,KSDS_NEXT                   ANOTHER KSDS?\n         BNZ   MAIN0170                          YES\n         B     MAIN0110\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0180 DS    0H\n         ITRACE ID=DOWN\n         ICM   R6,15,DXD_FIRST_KSDS_DISPLAYED    FIRST KSDS ON DISPLAY\n         BZ    MAIN0110                          NO KSDS(ES)\n         L     R2,SPF_ZSCROLLN                   NBR TO SCROLL\nMAIN0190 DS    0H\n         ST    R6,DXD_FIRST_KSDS_DISPLAYED       SAVE KSDS BLOCK ADDR\n         ICM   R6,15,KSDS_NEXT                   ANOTHER KSDS?\n         BZ    MAIN0110                          NO\n         BCT   R2,MAIN0190                       LOOP\n         B     MAIN0110                          BUILD DISPLAY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         ITRACE ID=TOP\n         MVC   DXD_FIRST_KSDS_DISPLAYED,COMM_KSDS_NEXT\n         B     MAIN0110\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0210 DS    0H\n         ITRACE ID=UP\n         ICM   R6,15,DXD_FIRST_KSDS_DISPLAYED    FIRST KSDS ON DISPLAY\n         BZ    MAIN0220\n         L     R2,SPF_ZSCROLLN                   NBR TO SCROLL\nMAIN0220 DS    0H\n         ST    R6,DXD_FIRST_KSDS_DISPLAYED       SAVE KSDS BLOCK ADDR\n         ICM   R6,15,KSDS_PREV                   ANOTHER KSDS?\n         BZ    MAIN0110                          NO\n         BCT   R2,MAIN0220                       LOOP\n         B     MAIN0110                          BUILD DISPLAY\n* ------------------------------------------------------------------- *\n*        Display DSECTs from option 'A'                               *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=A_DSECTS\n         SR    R6,R6                             NOT A KSDS\n         LA    R15,4                             SET RC\n         B     MAIN0320\n* ------------------------------------------------------------------- *\n*        A KSDS was selected                                          *\n* ------------------------------------------------------------------- *\nMAIN0310 DS    0H\n         ITRACE ID=SELECTED\n         ST    R6,COMM_USING_KSDS\n         SR    R15,R15                           SET RC\nMAIN0320 DS    0H\n         XC    COMM_USING_DSECT,COMM_USING_DSECT\n         XC    COMM_USING_LABEL,COMM_USING_LABEL\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0330 DS    0H\n         ITRACE ID=ABORT\n         XC    COMM_USING_KSDS,COMM_USING_KSDS\n         LA    R15,8\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT,                                               +\n               RDATA1=R15\n         L     R13,4(,R13)                       RESTORE REGISTER 13\n         L     R14,12(,R13)                      RESTORE R14\n         LM    R0,12,20(R13)                     RESTORE REGISTERS\n         BR    R14                               RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nABEND000 DS    0H\n         ITRACE ID=ABEND\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC   Q(DXDULSTK)\n\nPANEL_NAME    DC   CL8'DISKMENU'\n\n              LTORG\n\n\nLINE01        DS   0C\n              DC   CL2' '\n              DC   AL1($ATTR_INPUT)\nLINE01_SELECT DC   C' '\n              DC   AL1($ATTR_HIGH_TURQUOISE)\nLINE01_DSNAME DC   CL44' '\nLINE01_L      EQU  *-LINE01\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDULSTK                  DSECT\n                          DS  18F\n\n                          DS  A          DUMMY FOR 'PREV' ON CHAIN\n\nDXD_FIRST_KSDS_DISPLAYED  DS  A          FIRST KSDS DISPLAYED\nDXD_LAST_KSDS_DISPLAYED   DS  A          LAST KSDS DISPLAYED\n\nDXD_DSECT_ADDR            DS  A\n\n                          COPY PPDDATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              DISCOMM TYPE=DSECT\n              DISSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    DISASMDA\n              COPY    ATTRS\n\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n\n              IFGRPL  AM=VSAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    REGEQU\n              END     DISULSTK\n./ ADD NAME=DISULSTL 0113-09104-09198-0823-00248-01006-00148-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: DISULSTL                                              *\n*                                                                     *\n*  FUNCTION:                                                          *\n*    Display LABELs in a DSECT for USING definitions                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISULSTL CSECT\nDISULSTL AMODE 31\nDISULSTL RMODE ANY\n         USING DISULSTL,R11,R10\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'DISULSTL'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         LA    R10,2048(,R11)\n         LA    R10,2048(,R10)\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDULSTL,R13\n         ITRACE ID=ENTRY,                                              +\n               DATA1=COMM_USING_KSDS,         .. RELATED KSDS          +\n               DATA2=COMM_USING_DSECT         .. RELATED DSECT\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n         L     R5,COMM_USING_DSECT\n         USING DSECT_DSECT,R5\n         USING LABEL_DSECT,R4\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*        Display labels for selected DSECT                            *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         MVC   DXD_FIRST_LABEL,DSECT_LABEL_NEXT\n         MVC   DXD_FIRST_LABEL_DISPLAYED,DSECT_LABEL_NEXT\n         XC    COMM_USING_LABEL,COMM_USING_LABEL\nMAIN0010 DS    0H\n         L     R0,COMM_VDATA_ADDR\n         L     R1,COMM_VDATA_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14\n         L     R8,COMM_VDATA_ADDR\n         L     R7,SPF_VDEPTH\n         ICM   R4,15,DXD_FIRST_LABEL_DISPLAYED\n         BZ    MAIN0210\nMAIN0020 DS    0H\n         ITRACE ID=LABEL,                                              +\n               RDATA1=R4,                                              +\n               DATA2=LABEL_NAME\n         ST    R4,DXD_LAST_LABEL_DISPLAYED\n         MVC   0(LINE06_L,R8),LINE06\n         USING LINE06,R8\n         UNPK  DXD_WORK(9),LABEL_DISP(5)      UNPACK DISP\n         MVI   LINE06_SELECT,C' '\n         MVC   LINE06_DISP,DXD_WORK\n         TR    LINE06_DISP,COMM_HEXCHAR\n         MVC   LINE06_LABEL,LABEL_NAME\n         A     R8,SPF_VWIDTH                  NEXT LINE\n         BCT   R7,MAIN0030\n         B     MAIN0040\nMAIN0030 DS    0H\n         ICM   R4,15,LABEL_NEXT               NEXT LABEL\n         BNZ   MAIN0020\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Display labels                                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0040 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_SPF_PANEL,PANEL_NAME      SET PANEL NAME\n         L     R15,V_DISDISP                  DISP ENTRY POINT\n         BALR  R14,R15                        DISPLAY\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15,                                             +\n               DATA2=SPF_ZVERB\n         LTR   R2,R15                         RC = 0?\n         BNZ   MAIN0220                       NO\n         CLC   ABEND,SPF_ZCMD                 ABEND?\n         BE    ABEND000                       YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R8,COMM_VDATA_ADDR             VDATA ADDR\n         L     R7,SPF_VDEPTH\n         L     R4,DXD_FIRST_LABEL_DISPLAYED\nMAIN0050 DS    0H\n         CLI   LINE06_SELECT,C' '             SELECTED?\n         BNE   MAIN0200                       YES\n         A     R8,SPF_VWIDTH                  NEXT LINE\n         BCT   R7,MAIN0060\n         B     MAIN0070\nMAIN0060 DS    0H\n         ICM   R4,15,LABEL_NEXT               NEXT LABEL\n         BNZ   MAIN0050                       LOOP\n* ------------------------------------------------------------------- *\n*        Nothing selected, check for scrolling                        *\n* ------------------------------------------------------------------- *\nMAIN0070 DS    0H\n         ITRACE ID=SCROLL,                                             +\n               DATA1=SPF_ZVERB,                                        +\n               DATA2=SPF_ZSCROLLA\n         CLI   SPF_ZVERB,C'B'                 BOTTOM?\n         BE    MAIN0080                       YES\n         CLI   SPF_ZVERB,C'D'                 DOWN?\n         BE    MAIN0100\n         CLI   SPF_ZVERB,C'T'                 TOP?\n         BE    MAIN0120\n         CLI   SPF_ZVERB,C'U'                 UP?\n         BE    MAIN0130\n         B     MAIN0010\nMAIN0080 DS    0H\n         ITRACE ID=BOTTOM\n         L     R4,DXD_FIRST_LABEL             FIRST LABEL\nMAIN0090 DS    0H\n         ST    R4,DXD_FIRST_LABEL_DISPLAYED   SAVE LABEL BLOCK ADDR\n         ICM   R4,15,LABEL_NEXT               ANOTHER LABEL?\n         BNZ   MAIN0090                       YES\n         B     MAIN0010\nMAIN0100 DS    0H\n         ITRACE ID=DOWN\n         CLI   SPF_ZSCROLLA,C'M'              BOTTOM?\n         BE    MAIN0080                       YES\n         L     R4,DXD_FIRST_LABEL_DISPLAYED   FIRST LABEL DISPLAYED\n         L     R2,SPF_ZSCROLLN                NBR TO SCROLL\nMAIN0110 DS    0H\n         ST    R4,DXD_FIRST_LABEL_DISPLAYED   SAVE LABEL BLOCK ADDR\n         ICM   R4,15,LABEL_NEXT               ANOTHER LABEL?\n         BZ    MAIN0010                       NO.. DISPLAY\n         BCT   R2,MAIN0110                    LOOP\n         B     MAIN0010\nMAIN0120 DS    0H\n         ITRACE ID=TOP\n         MVC   DXD_FIRST_LABEL_DISPLAYED,DXD_FIRST_LABEL\n         B     MAIN0010\nMAIN0130 DS    0H\n         ITRACE ID=UP\n         CLI   SPF_ZSCROLLA,C'M'              TOP?\n         BE    MAIN0120                       YES\n         L     R4,DXD_FIRST_LABEL_DISPLAYED   FIRST ON LAST DISPLAY\n         L     R2,SPF_ZSCROLLN                NBR TO SCROLL\nMAIN0140 DS    0H\n         ST    R4,DXD_FIRST_LABEL_DISPLAYED   SAVE LABEL BLOCK ADDR\n         ICM   R4,15,LABEL_PREV               ANOTHER BLOCK?\n         BZ    MAIN0010                       NO\n         BCT   R2,MAIN0140                    LOOP\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         ITRACE ID=SELECTED\n         ST    R4,COMM_USING_LABEL            SAVE LABEL BLOCK ADDR\n         SR    R15,R15                        SET RC\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0210 DS    0H\n         ITRACE ID=NONE\n         XC    COMM_USING_LABEL,COMM_USING_LABEL\n         LA    R15,4                          SET RC\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0220 DS    0H\n         ITRACE ID=ABORT\n         XC    COMM_USING_LABEL,COMM_USING_LABEL\n         LA    R15,8                          SET RC\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT,                                               +\n               RDATA1=R15\n         L     R13,4(,R13)                    RESTORE REGISTER 13\n         L     R14,12(,R13)                   RESTORE R14\n         LM    R0,R12,20(R13)                 RESTORE REGISTERS\n         BR    R14                            RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nABEND000 DS    0H\n         ITRACE ID=ABEND\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC   Q(DXDULSTL)\n\nPANEL_NAME    DC   CL8'DISLMENU'\nABEND         DC   C'ABEND'\n\n              LTORG\n\nLINE06        DS   0C\n              DC   CL2' '\n              DC   AL1($ATTR_INPUT)\nLINE06_SELECT DC   C' '\n              DC   AL1($ATTR_HIGH_YELLOW)\nLINE06_DISP   DC   CL8' '\n              DC   AL1($ATTR_HIGH_TURQUOISE)\nLINE06_LABEL  DC   CL63' '\nLINE06_L      EQU  *-LINE06\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDULSTL                  DSECT\n                          DS  18F\n\nDXD_FIRST_LABEL           DS  A               FIRST LABEL ON CHAIN\nDXD_FIRST_LABEL_DISPLAYED DS  A               FIRST LABEL DISPLAYED\nDXD_LAST_LABEL_DISPLAYED  DS  A               LAST LABEL DISPLAYED\n\nDXD_WORK                  DS  XL9\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              DISCOMM TYPE=DSECT\n              DISSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    DISASMDA\n              COPY    ATTRS\n\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n\n              IFGRPL  AM=VSAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    REGEQU\n              END     DISULSTL\n./ ADD NAME=DISVAR   0119-08351-09198-0824-00232-00193-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: DISVAR                                                *\n*                                                                     *\n*  Define or delete SPF variables.                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISVAR   CSECT\nDISVAR   AMODE 31\nDISVAR   RMODE ANY\n         USING DISVAR,R15\n         USING DISCOMM,R12\n         B     INIT0000\nMODID    DC    CL8'DISVAR'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(VARMGREND-DISVAR)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)           SAVE REGISTERS\n         LR    R10,R15                   COPY BASE ADDRESS\n         DROP  R15\n         USING DISVAR,R10\n         L     R15,COMM_DXD_ADDRESS      DXD AREA BASE ADDRESS\n         A     R15,DXD_START             PLUS OFFSET TO OUR PORTION\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                   COPY DXD AREA ADDRESS\n         USING DXDVMGR,R13               DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         MVC   DXD_VAR_NAMES(VAR_NAME_L),VAR_NAME_I\n* ------------------------------------------------------------------- *\n         ITRACE ID=ENTRY,                                              +\n               DATA1=COMM_VAR_FUNC\n         L     R8,COMM_DISSPFD           SPF DATA\n         USING DISSPFD,R8                DEFINE BASE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVAR0010  DS    0H\n         CLI   COMM_VAR_FUNC,$VAR_DEFINE DEFINE VARIABLES?\n         BE    VAR0100                   YES\n         CLI   COMM_VAR_FUNC,$VAR_DELETE DELETE VARIABLE?\n         BE    VAR0200                   YES\n         ITRACE ID=BADCMD\n         ABEND 1,DUMP,,USER              BAD COMMAND\n* ------------------------------------------------------------------- *\n*        PROCESS DEFINE COMMANDS                                      *\n* ------------------------------------------------------------------- *\nVAR0100  DS    0H\n         ITRACE ID=DEFINE,               DEFINE VARIABLES              +\n               DATA1=COMM_DISSPFV,       .. FIRST VARIABLE DEFINITION  +\n               DATA2=COMM_DISSPFD        .. FIRST VARIABLE'S DATA ADDR\n         L     R6,COMM_DISSPFV           FIRST VARIABLE\nVAR0110  DS    0H\n         USING VARDSECT,R6               DEFINE BASE\n         TM    VAR_FLAGS,$VAR_DEFINED    VARIABLE ALREADY DEFINED?\n         BO    VAR0120                   YES\n         TM    VAR_FLAGS,$VAR_NEVER      NEVER DEFINE?\n         BO    VAR0120                   YES\n         MVC   COMM_SPF_FUNCTION,VDEFINE SET COMMAND\n         LA    R1,VAR_NAME               VARIABLE'S NAME\n         ST    R1,COMM_SPF_2             SET NAME'S ADDRESS\n         SR    R1,R1                     CLEAR REGISTER\n         ICM   R1,3,VAR_DISP             DISPLACEMENT TO DATA\n         A     R1,COMM_DISSPFD           PLUS BASE ADDRESS\n         ST    R1,COMM_SPF_3             SET ADDRESS\n         LA    R1,VAR_FORM               DATA FORMAT\n         ST    R1,COMM_SPF_4             SET ADDRESS\n         LA    R1,VAR_LENGTH             VARIABLE LENGTH\n         ST    R1,COMM_SPF_5             SET ADDRESS\n         OI    COMM_SPF_5,X'80'          SET END-OF-LIST\n         ITRACE ID=VDEF,                 DEFINING A VARIABLE           +\n               DATA1=VAR_NAME,           .. VARIABLE'S NAME            +\n               DATA2=COMM_SPF_3          .. ADDRESS OF DATA\n         LA    R1,COMM_SPF_PARMS         SPF PARM LIST ADDRESS\n         L     R15,COMM_ISPLINK          SPF LINK ENTRY POINT ADDRESS\n         BALR  R14,R15                   LINK TO SPF\n         LTR   R15,R15                   VDEFINE SUCCESSFUL?\n         BNZ   ERR0010                   NO\n         OI    VAR_FLAGS,$VAR_DEFINED    VARIABLE HAS BEEN DEFINED\n         TM    VAR_FLAGS,$VAR_VGET       VGET FROM PROFILE?\n         BNO   VAR0120                   NO\n         ITRACE ID=VGET,                                               +\n               DATA1=VAR_NAME\n         MVC   DXD_VAR_NAME,VAR_NAME     COPY VARIABLE NAME\n         MVC   COMM_SPF_FUNCTION,VGET    VGET COMMAND\n         LA    R1,DXD_VAR_NAMES          < -- DON'T LIKE THE CLOSE NAME\n         ST    R1,COMM_SPF_2             SET NAME\n         LA    R1,PROFILE                VARIABLE POOL NAME\n         ST    R1,COMM_SPF_3             SET ADDRESS\n         OI    COMM_SPF_3,X'80'          FLAG END-OF-LIST\n         LA    R1,COMM_SPF_PARMS\n         L     R15,COMM_ISPLINK          SPF ENTRY POINT\n         BALR  R14,R15\n         ITRACE ID=VGET_RC,                                            +\n               RDATA1=R15\n         ITRACE ID=VPUT,                                               +\n               DATA1=VAR_NAME\n         MVC   COMM_SPF_FUNCTION,VPUT    VPUT COMMAND\n         LA    R1,DXD_VAR_NAMES          < -- DON'T LIKE THE CLOSE NAME\n         ST    R1,COMM_SPF_2             SET NAME\n         LA    R1,SHARED                 VARIABLE POOL NAME\n         ST    R1,COMM_SPF_3             SET ADDRESS\n         OI    COMM_SPF_3,X'80'          FLAG END-OF-LIST\n         LA    R1,COMM_SPF_PARMS\n         L     R15,COMM_ISPLINK          SPF ENTRY POINT\n         BALR  R14,R15\n         ITRACE ID=VPUT_RC,                                            +\n               RDATA1=R15\nVAR0120  DS    0H\n         LA    R6,VARDSECT_L(,R6)        NEXT VARIABLE\n         CLI   0(R6),X'FF'               END OF TABLE?\n         BNE   VAR0110                   NO\n         B     EXIT0000                  ALL PROCESSED\n* ------------------------------------------------------------------- *\n*        PROCESS VARIABLE DELETION                                    *\n* ------------------------------------------------------------------- *\nVAR0200  DS    0H\n         ITRACE ID=DELETE                DELETING ALL VARIABLES\n         L     R6,COMM_DISSPFV           START WITH FIRST VARIABLE\nVAR0210  DS    0H\n         CLI   0(R6),X'FF'               END OF TABLE?\n         BE    EXIT0000                  YES\n         TM    VAR_FLAGS,$VAR_DEFINED    VARIABLE DEFINED?\n         BNO   VAR0230                   NO\n         TM    VAR_FLAGS,$VAR_VPUT       VPUT BEFORE DELETING?\n         BNO   VAR0220                   NO\n\n         ITRACE ID=VPUT,                                               +\n               DATA1=VAR_NAME\n         MVC   DXD_VAR_NAME,VAR_NAME     COPY VARIABLE NAME\n         MVC   COMM_SPF_FUNCTION,VPUT    VPUT COMMAND\n         LA    R1,DXD_VAR_NAMES          < -- DON'T LIKE THE CLOSE NAME\n         ST    R1,COMM_SPF_2             SET NAME\n         LA    R1,PROFILE                SAVE IN PROFILE\n         ST    R1,COMM_SPF_3             SET ADDRESS\n         OI    COMM_SPF_3,X'80'          FLAG END-OF-LIST\n         LA    R1,COMM_SPF_PARMS\n         L     R15,COMM_ISPLINK          SPF ENTRY POINT\n         BALR  R14,R15\n         ITRACE ID=VPUT_RC,                                            +\n               RDATA1=R15\n\n\nVAR0220  DS    0H\n         ST    R6,COMM_SPF_2             SET VARIABLE NAME ADDRESS\n         OI    COMM_SPF_2,X'80'          FLAG END-OF-LIST\n         MVC   COMM_SPF_FUNCTION,VDELETE COMMAND'S ADDRESS\n         ITRACE ID=VDEL,                 DELETING A VARIABLE           +\n               DATA1=VAR_NAME            .. VARIABLE NAME\n         LA    R1,COMM_SPF_PARMS         PARM LIST'S ADDRESS\n         L     R15,COMM_ISPLINK          SPF LINK ENTRY POINT ADDRESS\n         BALR  R14,R15                   LINK TO SPF\n         LTR   R15,R15                   VDELETE SUCCESSFUL?\n         BNZ   ERR0020                   NO\nVAR0230  DS    0H\n         LA    R6,VARDSECT_L(R6)         NEXT VARIABLE\n         B     VAR0210                   PROCESS ALL VARIABLES\n* ------------------------------------------------------------------- *\n*        ERROR ROUTINES                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=VDEFFAIL,                                           +\n               RDATA1=R15\n         MVI   COMM_MSG_ID,1\n         B     ERR0100\nERR0020  DS    0H\n         ITRACE ID=VDELFAIL,                                           +\n               RDATA1=R15\n         MVI   COMM_MSG_ID,2\nERR0100  DS    0H\n         MVC   COMM_INFO_01(L'VAR_NAME),VAR_NAME\n         STH   R15,COMM_INFO_02\n         L     R15,V_DISMSG\n         BALR  R14,R15\n         TPUT  COMM_MSG_1,L'COMM_MSG_1\n         DC    H'0'\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)               RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)           RESTORE REMAINING REGISTERS\n         BR    R14                       RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START  DC    Q(DXDVMGR)\n\nVAR_NAME_I DC    F'1'\n           DC    F'0'\n           DC    CL8' '\nVAR_NAME_L EQU   *-VAR_NAME_I\n\nPROFILE    DC    CL8'PROFILE'\nSHARED     DC    CL8'SHARED'\nVDEFINE    DC    CL8'VDEFINE'\nVDELETE    DC    CL8'VDELETE'\nVGET       DC    CL8'VGET'\nVPUT       DC    CL8'VPUT'\n           LTORG\nVARMGREND  EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDVMGR       DSECT\n              DS    18F\nDXD_CSECT     DS    CL8\n\nDXD_VAR_NAMES DS   0A\n              DS    F\n              DS    F\nDXD_VAR_NAME  DS    CL8\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DISCOMM   TYPE=DSECT\n         COPY      DISASMDA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VARDSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DISSPFD  TYPE=DSECT\n\n         IFGACB   AM=VSAM\nACB_L    EQU      *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      DISVAR\n./ ADD NAME=DISVBU   0106-08336-09117-1039-00141-00131-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*        Verify BASE statements reference disp's within the CSECT     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISVBU   CSECT\nDISVBU   AMODE 31\nDISVBU   RMODE ANY\n         USING DISCOMM,R12\n         USING DISVBU,R11\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     INIT0000                       SKIP EYECATCHER\nMODID    DC    CL8'DISVBU'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nINIT0000 DS    0H\n         L     R15,COMM_DXD_ADDRESS\n         A     R15,DXD_START\n         ST    R15,8(,R13)\n         ST    R13,4(,R15)\n         LR    R13,R15\n         USING DXDVBU,R13\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         MVI   COMM_DEBUG_CMD,$DEBUG_PRINT\n         MVC   COMM_DEBUG_IO+1(MSG01_L),MSG01\n         BAL   R10,DEBUG000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ICM   R8,15,COMM_BASE_NEXT           FIRST BASE ENTRY\n         USING BASE_DSECT,R8\n         BZ    EXIT0000                       NO BASES DEFINED\nBASE0000 DS    0H\n         CLC   BASE_BEGIN,COMM_CSECT_LENGTH   BEYOND END OF CSECT?\n         BH    BASE0010                       YES\n         CLC   BASE_END,COMM_CSECT_LENGTH     BEYOND END OF CSECT?\n         BNH   BASE0020                       NO\n         ITRACE ID=BIG_END                    END DISP IS TOO LARGE\n         MVI   COMM_MSG_ID,1\n         MVC   COMM_INFO_01(3),BASE_CHAR_REGISTER\n         MVC   COMM_INFO_02(4),BASE_END\n         MVC   COMM_INFO_03(4),COMM_CSECT_LENGTH\n         BAL   R9,MSG0000                     ISSUE MESSAGE\n         MVC   BASE_END,COMM_CSECT_LENGTH     LIMIT TO CSECT LENGTH\n         B     BASE0020\nBASE0010 DS    0H\n         ITRACE ID=BIG_BEG                    BEGIN DISP IS TOO LARGE\n         MVI   COMM_MSG_ID,2\n         MVC   COMM_INFO_01(3),BASE_CHAR_REGISTER\n         MVC   COMM_INFO_02(4),BASE_BEGIN\n         BAL   R9,MSG0000                     ISSUE MESSAGE\n         OI    COMM_FLAGS,$COMM_FLAGS_ABORT   SET ABORT FLAG\nBASE0020 DS    0H\n         ICM   R8,15,BASE_NEXT                NEXT BASE BLOCK\n         BNZ   BASE0000                       LOOP\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0000  DS    0H\n         MVC   COMM_MSG_CSECT,MODID           SET CSECT NAME\n         L     R15,V_DISMSG                   DISMSG ENTRY POINT\n         BALR  R14,R15                        BUILD MESSAGE(S)\n         LA    R2,COMM_MSG_1                  1ST MESSAGE\n         LA    R3,5                           MAX MSGS\nMSG0010  DS    0H\n         CLC   0(L'COMM_MSG_1,R2),COMM_BLANKS BLANK?\n         BER   R9                             YES\n         MVC   PRINT_DATA(L'COMM_MSG_1),0(R2) COPY MESSAGE\n         BAL   R10,PRT0000                    PRINT MESSAGE\n         LA    R2,L'COMM_MSG_1(,R2)           NEXT MESSAGE\n         BCT   R3,MSG0010\n         BR    R9\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         CLI   COMM_RUN_MODE,$COMM_RUN_BATCH  BATCH MODE?\n         BNER  R10                            NO.. DON'T PRINT\n         MVI   PRINT_COMMAND,$PRINT_PRINT     SET COMMAND\n         L     R15,V_DISPRINT                 PRINT MODULE ENTRY POINT\n         BALR  R14,R15                        LINK TO PRINT MODULE\n         BR    R10                            RETURN\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDEBUG000 DS    0H\n         ITRACE ID=CALLDBUG,                                           +\n               RDATA1=R10\n         L     R15,V_DISDEBUG\n         BALR  R14,R15\n         BR    R10\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         MVC   COMM_DEBUG_IO+1(MSG02_L),MSG02\n         BAL   R10,DEBUG000\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START DC   Q(DXDVBU)\n\nMSG01    DS    0C\n         DC    C'DISVBU01I    Entering DISVBU'\nMSG01_L  EQU   *-MSG01\n\nMSG02    DS    0C\n         DC    C'DISVBU02I    Exiting DISVBU'\nMSG02_L  EQU   *-MSG02\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDVBU       DSECT\n             DS    18F\nDXD_CSECT    DS    CL8\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n             DISCOMM  TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n             COPY  DISASMDA\n\n             IFGACB  AM=VSAM\nACB_L        EQU     *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n             COPY  REGEQU\n             END   DISVBU\n./ ADD NAME=DISVDATA 0106-08352-09198-0825-00273-00242-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: DISVDATA                                              *\n*                                                                     *\n*     There are three functions:                                      *\n*       GETMAIN                                                       *\n*       FREEMAIN                                                      *\n*       VDEFINE                                                       *\n*                                                                     *\n*                                                                     *\n*   On GETMAINs, issue a PQUERY to determine the dimensions of        *\n*   the dynamic area on the SPF panel.  The address of the panel      *\n*   name is passed in R1.  At exit, R0 is the length of the area      *\n*   and R1 is the address of the area GETMAINed.                      *\n*                                                                     *\n*   On FREEMAINs, the length of the area to be freed is passed        *\n*   in R0, the address is passed in R1.                               *\n*                                                                     *\n*   On VDEFINEs, the length of the area to be VDEFINED is passed      *\n*   in R0, the address is passed in R1.                               *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISVDATA CSECT\nDISVDATA AMODE 31\nDISVDATA RMODE ANY\n         USING DISCOMM,R12\n         USING DISVDATA,R15\n         B     INIT0000\nMODID    DC    CL8'DISVDATA'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R10,R15               COPY ENTRY POINT\n         DROP  R15\n         USING DISVDATA,R10          DEFINE BASE\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)                       CHAIN  SAVE AREA\n         ST    R15,8(,R13)                       CHAIN SAVE AREA\n         LR    R13,R15                           SET SAVE AREA ADDRESS\n         USING DXDVDATA,R13\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY,                                              +\n               DATA1=COMM_VDATA_FUNC\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R9,COMM_DISSPFD       SPF DATA\n         USING DISSPFD,R9            DEFINE BASE\n         CLI   COMM_VDATA_FUNC,$VDATA_GETMAIN\n         BE    VDATA010\n         CLI   COMM_VDATA_FUNC,$VDATA_FREEMAIN\n         BE    VDATA030\n         CLI   COMM_VDATA_FUNC,$VDATA_VDEFINE\n         BE    VDATA020\n         CLI   COMM_VDATA_FUNC,$VDATA_VDELETE\n         BE    VDATA040\n         ITRACE ID=BAD_FUNC,                                           +\n               DATA1=COMM_VDATA_FUNC\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        GETMAIN                                                      *\n*                                                                     *\n*        Determine panel size                                         *\n*        COMPUTE SIZE OF AREA                                         *\n*        ISSUE SYSTEM GETMAIN                                         *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVDATA010 DS    0H\n         ITRACE ID=PQUERY,           ISSUING PQUERY                    +\n               DATA1=0(R3)           .. PANEL NAME\n         MVC   COMM_SPF_FUNCTION,PQUERY\n         LA    R1,COMM_SPF_PANEL\n         ST    R1,COMM_SPF_2         SET ADDR OF PANEL NAME\n         LA    R1,CVDATA             AREA NAME WITHIN THE PANEL\n         ST    R1,COMM_SPF_3         SET IN PARM LIST\n         LA    R1,CVTYPE             AREA TYPE\n         ST    R1,COMM_SPF_4         SET IN PARM LIST\n         LA    R1,CVWIDTH            SCREEN DEPTH\n         ST    R1,COMM_SPF_5         SET IN PARM LIST\n         LA    R1,CVDEPTH            SCREEN WIDTH\n         ST    R1,COMM_SPF_6         SET IN PARM LIST\n         LA    R1,CVROW              SCREEN ROW\n         ST    R1,COMM_SPF_7         SET IN PARM LIST\n         LA    R1,CVCOL              SCREEN COLUMN\n         ST    R1,COMM_SPF_8         SET IN PARM LIST\n         OI    COMM_SPF_8,X'80'      FLAG 'END-OF-LIST'\n         LA    R1,COMM_SPF_PARMS     PQUERY PARM LIST ADDRESS\n         L     R15,COMM_ISPLINK      SPF INTERFACE'S ADDRESS\n         BALR  R14,R15               ISSUE QUERY\n         ITRACE ID=PQUERYRC,                                           +\n               RDATA1=R15\n         LTR   R15,R15               PQUERY SUCCESSFUL?\n         BNZ   ERR0010               NO\n* ------------------------------------------------------------------- *\n*        Compute size of VDATA                                        *\n* ------------------------------------------------------------------- *\n         L     R0,SPF_VWIDTH         DYNAMIC AREA WIDTH\n         MH    R0,SPF_VDEPTH+2       MULTIPLY BY DEPTH\n* ------------------------------------------------------------------- *\n*        Acquire storage for dynamic area                             *\n* ------------------------------------------------------------------- *\n         ITRACE ID=DYNA_W_D,         DYNAMIC AREA WIDTH AND DEPTH      +\n               DATA1=SPF_VWIDTH,                                       +\n               DATA2=SPF_VDEPTH\n         ST    R0,COMM_VDATA_SIZE    SAVE SIZE\n         GETMAIN RU,                                                   +\n               LV=(R0),                                                +\n               LOC=ANY\n         ST    R1,COMM_VDATA_ADDR    SAVE ADDRESS\n         ITRACE ID=GETMAIN,                                            +\n               RDATA1=R1,                                              +\n               RDATA2=R0\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        DEFINE 'VDATA' TO SPF                                        *\n* ------------------------------------------------------------------- *\nVDATA020 DS    0H\n         MVC   COMM_SPF_FUNCTION,VDELETE\n         LA    R1,CVDATA\n         ST    R1,COMM_SPF_2\n         OI    COMM_SPF_2,X'80'\n         ITRACE ID=VDEL_1,                                             +\n               RDATA1=R1\n         LA    R1,COMM_SPF_PARMS\n         L     R15,COMM_ISPLINK\n         BALR  R14,R15                    VDELETE EXISTING VDATA\n         ITRACE ID=VDEFINE,                                            +\n               DATA1=COMM_VDATA_ADDR,                                  +\n               DATA2=COMM_VDATA_SIZE\n         MVC   COMM_SPF_FUNCTION,VDEFINE\n         LA    R1,CVDATA                  VARIABLE NAME ADDRESS\n         ST    R1,COMM_SPF_2              SET ADDRESS IN PARM LIST\n         MVC   COMM_SPF_3,COMM_VDATA_ADDR DATA ADDRESS\n         LA    R1,CHARFORM                DATA FORMAT ADDRESS\n         ST    R1,COMM_SPF_4              SET ADDRESS IN PARM LIST\n         LA    R1,COMM_VDATA_SIZE         SIZE (LENGTH) OF VDATA\n         ST    R1,COMM_SPF_5              SET ADDRESS\n         OI    COMM_SPF_5,X'80'           FLAG END-OF-LIST\n         LA    R1,COMM_SPF_PARMS          SPF PARM LIST ADDRESS\n         L     R15,COMM_ISPLINK           SPF ENTRY POINT\n         BALR  R14,R15                    DEFINE 'VDATA'\n         LTR   R15,R15                    DEFINE SUCCESSFUL?\n         BNZ   ERR0030                    NO\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        FREEMAIN VDATA                                               *\n* ------------------------------------------------------------------- *\nVDATA030 DS    0H\n         MVC   COMM_SPF_FUNCTION,VDELETE\n         LA    R1,CVDATA\n         ST    R1,COMM_SPF_2\n         OI    COMM_SPF_2,X'80'\n         ITRACE ID=VDEL_2,                                             +\n               RDATA1=R1\n         LA    R1,COMM_SPF_PARMS\n         L     R15,COMM_ISPLINK\n         BALR  R14,R15                    VDELETE VDATA\n         ITRACE ID=FREEMAIN,                                           +\n               DATA1=COMM_VDATA_ADDR,                                  +\n               DATA2=COMM_VDATA_SIZE\n         ICM   R1,15,COMM_VDATA_ADDR\n         BZ    EXIT0000\n         L     R0,COMM_VDATA_SIZE\n         FREEMAIN RU,                     FREEMAIN VDATA               +\n               A=(R1),                                                 +\n               LV=(R0)\n         XC    COMM_VDATA_ADDR,COMM_VDATA_ADDR\n         XC    COMM_VDATA_SIZE,COMM_VDATA_SIZE\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        VDELETE  VDATA                                               *\n* ------------------------------------------------------------------- *\nVDATA040 DS    0H\n         MVC   COMM_SPF_FUNCTION,VDELETE\n         LA    R1,CVDATA\n         ST    R1,COMM_SPF_2\n         OI    COMM_SPF_2,X'80'\n         ITRACE ID=VDEL_3,                                             +\n               RDATA1=R1\n         LA    R1,COMM_SPF_PARMS\n         L     R15,COMM_ISPLINK\n         BALR  R14,R15                    VDELETE VDATA\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=PQRYFAIL\n         MVI   COMM_MSG_ID,1\n         B     ERR0100\nERR0020  DS    0H\n         ITRACE ID=VDELFAIL\n         MVI   COMM_MSG_ID,2\n         B     ERR0100\nERR0030  DS    0H\n         ITRACE ID=VDEFFAIL\n         MVI   COMM_MSG_ID,3\nERR0100  DS    0H\n         MVC   COMM_INFO_01(8),COMM_SPF_PANEL\n         STC   R15,COMM_INFO_02\n         MVC   COMM_MSG_CSECT,MODID\n         L     R15,V_DISMSG\n         BALR  R14,R15\n         MVC   SPF_MSG_1,COMM_MSG_1\n         MVC   SPF_MSG_2,COMM_MSG_2\n         MVC   SPF_MSG_3,COMM_MSG_3\n         MVC   SPF_MSG_4,COMM_MSG_4\n         MVC   SPF_MSG_5,COMM_MSG_5\n         MVC   COMM_SPF_PANEL,DIS0000\n         MVC   COMM_SPF_FUNCTION,DISPLAY\n         LA    R1,COMM_SPF_PANEL\n         ST    R1,COMM_SPF_2\n         OI    COMM_SPF_2,X'80'\n         LA    R1,COMM_SPF_PARMS\n         L     R15,COMM_ISPLINK\n         BALR  R14,R15\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)           RESTORE R13\n         LM    R14,R12,12(R13)       RESTORE REGISTERS\n         SR    R15,R15               SET RC\n         BR    R14                   RETURN\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDVDATA)\nCHARFORM      DC    CL8'CHAR'\nCVDATA        DC    CL8'VDATA'\nCVDEPTH       DC    CL8'VDEPTH'\nCVTYPE        DC    CL8'VTYPE'\nCVWIDTH       DC    CL8'VWIDTH'\nCVROW         DC    CL8'VROW'\nCVCOL         DC    CL8'VCOL'\nPQUERY        DC    CL8'PQUERY'\nVDEFINE       DC    CL8'VDEFINE'\nVDELETE       DC    CL8'VDELETE'\nDISPLAY       DC    CL8'DISPLAY'\nDIS0000       DC    CL8'DIS0000'\n              LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDVDATA      DSECT\n              DS    18F\nDXD_CSECT     DS    CL8\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DISCOMM  TYPE=DSECT\n         COPY     DISASMDA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DISSPFD  TYPE=DSECT\n\n         IFGACB   AM=VSAM\nACB_L    EQU      *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  DISVDATA\n./ ADD NAME=DISXLIST 0115-09023-09198-1505-00303-00264-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: DISXLIST                                              *\n*                                                                     *\n*  FUNCTION:                                                          *\n*    Display an AREA chain                                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISXLIST CSECT\nDISXLIST AMODE 31\nDISXLIST RMODE ANY\n         USING DISXLIST,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                   SAVE REGS\n         LR    R11,R15                           SET BASE REG\n         B     MOD0000                           SKIP EYECATCHER\nMODID    DC    CL8'DISXLIST'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS              WORK AREA\n         A     R15,DXD_START                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         USING DXDXLIST,R13\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R1\n         L     R9,COMM_DISSPFD\n         USING DISSPFD,R9\n         USING AREA_DSECT,R6\n         CLI   AREA_TYPE-AREA_DSECT(R1),X'FF'    DUMMY ENTRY?\n         BE    MAIN0300                          YES\n         ST    R1,DXD_FIRST_AREA\n         ST    R1,DXD_FIRST_DISPLAYED\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=BUILD\n         L     R0,COMM_VDATA_ADDR\n         L     R1,COMM_VDATA_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                            INITIALIZE VDATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R8,COMM_VDATA_ADDR                VDATA ADDRESS\n         L     R7,SPF_VDEPTH                     NBR OF LINES\n         ICM   R6,15,DXD_FIRST_DISPLAYED         1ST AREA DISPLAYED\n         BZ    MAIN0300\nMAIN0020 DS    0H\n         MVC   0(MSG01_L,R8),MSG01               INITIALIZE\n         USING MSG01,R8\n         ST    R6,DXD_LAST_DISPLAYED             SAVE LAST DISPLAYED\n         UNPK  DXD_WORK(9),DXD_LAST_DISPLAYED(5) UNPACK ADDR\n         MVC   MSG01_ADDR,DXD_WORK               COPY UNPACKED ADDR\n         TR    MSG01_ADDR,HEXCHAR                TRANSLATE ADDR\n         UNPK  DXD_WORK(9),AREA_PREV(5)          UNPACK ADDR\n         MVC   MSG01_PREV,DXD_WORK               COPY UNPACKED ADDR\n         TR    MSG01_PREV,HEXCHAR                TRANSLATE ADDR\n         UNPK  DXD_WORK(9),AREA_NEXT(5)          UNPACK ADDR\n         MVC   MSG01_NEXT,DXD_WORK               COPY UNPACKED ADDR\n         TR    MSG01_NEXT,HEXCHAR                TRANSLATE ADDR\n         UNPK  DXD_WORK(9),AREA_BEGIN(5)         UNPACK BEGIN DISP\n         MVC   MSG01_BEGIN,DXD_WORK              COPY UNPACKED DISP\n         TR    MSG01_BEGIN,HEXCHAR               TRANSLATE DISP\n         UNPK  DXD_WORK(9),AREA_END(5)           UNPACK END DISP\n         MVC   MSG01_END,DXD_WORK                COPY UNPACKED ADDR\n         TR    MSG01_END,HEXCHAR                 TRANSLATE DISP\n         UNPK  DXD_WORK(9),AREA_LENGTH(5)        UNPACK END DISP\n         MVC   MSG01_LENGTH,DXD_WORK             COPY UNPACKED ADDR\n         TR    MSG01_LENGTH,HEXCHAR              TRANSLATE DISP\n         CLI   AREA_TYPE,C'D'                    DATA AREA?\n         BE    MAIN0030                          YES\n         MVC   MSG01_TYPE,T_INSTR\n         ICM   R1,15,AREA_OPCODE                 OPCODE ADDR\n         BZ    MAIN0090                          NOT DETERMINED\n         USING OPCODE_DSECT,R1\n         MVI   MSG01_ATTR,$ATTR_HIGH_YELLOW\n         MVC   MSG01_TYPE,OPCODE_MNEMONIC        COPY MNEMONIC\n         B     MAIN0090\nMAIN0030 DS    0H\n         MVI   MSG01_ATTR,$ATTR_HIGH_TURQUOISE\n         CLI   AREA_DATA_TYPE,$DATA_ACON         ADCON?\n         BE    MAIN0040                          YES\n         CLI   AREA_DATA_TYPE,$DATA_VCON         VCON?\n         BE    MAIN0050                          YES\n         CLI   AREA_DATA_TYPE,$DATA_CXD          CXD?\n         BE    MAIN0060                          YES\n         CLI   AREA_DATA_TYPE,$DATA_Q            Q?\n         BE    MAIN0070                          YES\n         CLI   AREA_DATA_TYPE,$DATA_USER         USER?\n         BE    MAIN0080                          YES\n         MVI   MSG01_ATTR,$ATTR_HIGH_RED\n         MVC   MSG01_TYPE,T_DATA                 DATA\n         B     MAIN0090\nMAIN0040 DS    0H\n         MVC   MSG01_TYPE,T_ADCON                ADCON\n         B     MAIN0090\nMAIN0050 DS    0H\n         MVC   MSG01_TYPE,T_VCON                 VCON\n         B     MAIN0090\nMAIN0060 DS    0H\n         MVC   MSG01_TYPE,T_CXD                  CXD\n         B     MAIN0090\nMAIN0070 DS    0H\n         MVC   MSG01_TYPE,T_Q                    Q\n         B     MAIN0090\nMAIN0080 DS    0H\n         MVC   MSG01_TYPE,T_USER                 USER\nMAIN0090 DS    0H\n         MVC   MSG01_RLD_NAME,AREA_RLD_NAME\n         DROP  R8\n         A     R8,SPF_VWIDTH                     NEXT LINE\n         BCT   R7,MAIN0100\n         B     MAIN0110                          SCREEN IS FULL\nMAIN0100 DS    0H\n         ICM   R6,15,AREA_NEXT                   NEXT AREA\n         BNZ   MAIN0020\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0110 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_SPF_PANEL,PANEL_NAME         SET PANEL NAME\n         OI    COMM_FLAGS2,$DONT_CLEAR_MESSAGES  DON'T CLEAR THE MSG(S)\n         L     R15,V_DISDISP                     DISP ENTRY POINT\n         BALR  R14,R15                           DISPLAY\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15,                                             +\n               DATA2=SPF_ZVERB\n         LTR   R15,R15                           RC = 0?\n         BNZ   EXIT0000                          NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=SCROLL,                                             +\n               DATA1=SPF_ZVERB,                                        +\n               DATA2=SPF_ZSCROLLA\n         CLI   SPF_ZVERB,C'B'                    BOTTOM?\n         BE    MAIN0200\n         CLI   SPF_ZVERB,C'D'                    DOWN?\n         BE    MAIN0220\n         CLI   SPF_ZVERB,C'T'                    TOP?\n         BE    MAIN0250\n         CLI   SPF_ZVERB,C'U'                    UP?\n         BE    MAIN0260\n         B     MAIN0110\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         ITRACE ID=BOTTOM\n         ICM   R6,15,DXD_FIRST_AREA              FIRST ON CHAIN\nMAIN0210 DS    0H\n         LR    R1,R6\n         ICM   R6,15,AREA_NEXT                   NEXT AREA\n         BNZ   MAIN0210\n         ST    R1,DXD_FIRST_DISPLAYED\n         B     MAIN0010                          BUILD DISPLAY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0220 DS    0H\n         ITRACE ID=DOWN\n         CLI   SPF_ZSCROLLA,C'M'                 MAX?\n         BE    MAIN0200                          YES\n         L     R2,SPF_ZSCROLLN                   NBR OF LINES TO SCROLL\n         L     R6,DXD_FIRST_DISPLAYED            1ST ON DISPLAY\nMAIN0230 DS    0H\n         LR    R1,R6\n         ICM   R6,15,AREA_NEXT                   NEXT ON CHAIN\n         BZ    MAIN0240                          AT END OF CHAIN\n         BCT   R2,MAIN0230\nMAIN0240 DS    0H\n         ST    R1,DXD_FIRST_DISPLAYED\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0250 DS    0H\n         ITRACE ID=TOP\n         MVC   DXD_FIRST_DISPLAYED,DXD_FIRST_AREA\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0260 DS    0H\n         ITRACE ID=UP\n         CLI   SPF_ZSCROLLA,C'M'                 MAX?\n         BE    MAIN0250                          YES\n         ICM   R6,15,DXD_FIRST_DISPLAYED         FIRST ON DISPLAY\n         BZ    EXIT0000                          SHOULD NOT HAPPEN!\n         L     R2,SPF_ZSCROLLN                   LINES ON DISPLAY\nMAIN0270 DS    0H\n         LR    R1,R6\n         ICM   R6,15,AREA_PREV                   PREVIOUS AREA\n         BZ    MAIN0280\n         BCT   R2,MAIN0270                       LOOP\nMAIN0280 DS    0H\n         ST    R1,DXD_FIRST_DISPLAYED            COPY ADDR\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=NOTHING\n         MVC   SPF_MSG_5(MSG02_L),MSG02\n         MVC   COMM_SPF_PANEL,DIS0000\n         L     R15,V_DISDISP\n         BALR  R14,R15\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         MVC   SPF_MSG_1,COMM_BLANKS\n         MVC   SPF_MSG_2,COMM_BLANKS\n         MVC   SPF_MSG_3,COMM_BLANKS\n         MVC   SPF_MSG_4,COMM_BLANKS\n         MVC   SPF_MSG_5,COMM_BLANKS\n         L     R13,4(,R13)                       RESTORE REGISTER 13    ASE01670\n         L     R14,12(,R13)                      RESTORE REGISTERS      ASE01680\n         LR    R15,R2                            SET RC\n         LM    R0,R12,20(R13)                    RESTORE REGISTERS      ASE01680\n         BR    R14                               RETURN TO CALLER       ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC   Q(DXDXLIST)\n\nDIS0000       DC   CL8'DIS0000'\nPANEL_NAME    DC   CL8'DISXDATA'\n\nT_INSTR       DC   CL5'INSTR'\nT_ADCON       DC   CL5'ADCON'\nT_VCON        DC   CL5'VCON'\nT_CXD         DC   CL5'CXD'\nT_Q           DC   CL5'Q'\nT_USER        DC   CL5'DATA'\nT_DATA        DC   CL5'DATA'\n\n              LTORG\n\nHEXCHAR       EQU  *-C'0'\n              DC   C'0123456789ABCDEF'\n\nMSG01         DS   0C\n              DC   AL1($ATTR_HIGH_TURQUOISE)\nMSG01_ADDR    DC   CL8' '\n              DC   AL1($ATTR_NORMAL)\nMSG01_PREV    DC   CL8' '\n              DC   CL1' '\nMSG01_NEXT    DC   CL8' '\n              DC   CL1' '\nMSG01_BEGIN   DC   CL8' '\n              DC   CL1' '\nMSG01_END     DC   CL8' '\n              DC   CL1' '\nMSG01_LENGTH  DC   CL8' '\nMSG01_ATTR    DC   AL1(0)\nMSG01_TYPE    DC   CL5' '\n              DC   AL1($ATTR_HIGH_GREEN)\nMSG01_RLD_NAME DC  CL8' '\nMSG01_L       EQU  *-MSG01\n\nMSG02         DS   0C\n              DC   C'Nothing on chain'\nMSG02_L       EQU  *-MSG02\n\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDXLIST              DSECT\n                      DS  18F\n\nDXD_FIRST_AREA        DS  A             FIRST DATA ITEM ON CHAIN\n\nDXD_FIRST_DISPLAYED   DS  A             FIRST DATA ITEM DISPLAYED\nDXD_LAST_DISPLAYED    DS  A             LAST DATA ITEM DISPLAYED\n\nDXD_WORK              DS  CL9\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              DISCOMM TYPE=DSECT\n              DISSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    DISASMDA\n              COPY    ATTRS\n\n              IFGACB  AM=VSAM\nACB_L         EQU     *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY    REGEQU\n              END     DISXLIST\n./ ADD NAME=GENDC    0102-09119-09198-0827-00331-00331-00000-SOURCE\n* -------------------------------------------------------------------*\n*                                                                    *\n*  Module name: GENDC                                                *\n*                                                                    *\n*  Function:                                                         *\n*   Generate DCs                                                     *\n*                                                                    *\n*  At entry R8 is address of current AREA block                      *\n*                                                                    *\n* -------------------------------------------------------------------*\nGENDC    CSECT\nGENDC    AMODE 31\nGENDC    RMODE ANY\n         USING GENDC,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'GENDC'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXDDC,R13\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R8\n         USING AREA_DSECT,R8\n         USING LABEL_DSECT,R7\n         USING OPCODE_DSECT,R5\n         MVC   OPCODE_MNEMONIC,OP_DC          SET OPCODE TO 'DC'\n         C     R8,DXD_AREA                    SAME AREA?\n         BE    INIT0010\n         ITRACE ID=NEWAREA,                                            +\n               DATA1=AREA_BEGIN,                                       +\n               DATA2=AREA_LENGTH\n         ST    R8,DXD_AREA                    SAVE AREA ADDRESS\n         MVC   DXD_BEGIN,AREA_BEGIN           COPY BEGIN DISP\n         MVC   DXD_LENGTH,AREA_LENGTH\nINIT0010 DS    0H\n         L     R6,DXD_BEGIN                   BEGIN DISP\n         ST    R6,COMM_GEN_DISP               SET 'GEN' DISP\n         A     R6,COMM_CSECT_TEXT             PLUS TEXT ADDRESS\n         L     R3,DXD_LENGTH                  AREA LENGTH\n         ITRACE ID=DC,                                                 +\n               RDATA1=R6,                                              +\n               RDATA2=R3\n         CLI   AREA_DATA_TYPE,$DATA_ACON      AD-CON?\n         BE    GEN0080                        YES\n         CLI   AREA_DATA_TYPE,$DATA_VCON      V-CON?\n         BE    GEN0120                        YES\n         CLI   AREA_DATA_TYPE,$DATA_CXD       CXD (PSEUDO AREA SIZE)?\n         BE    GEN0150                        YES\n         CLI   AREA_DATA_TYPE,$DATA_Q         Q (PSEUDO AREA DISP)?\n         BE    GEN0160                        YES\n* -------------------------------------------------------------------*\n*                                                                    *\n* -------------------------------------------------------------------*\nGEN0000  DS    0H\n         XC    COMM_GEN_LENGTH,COMM_GEN_LENGTH\n         CH    R3,H8                          MORE THAN 8?\n         BNH   GEN0010                        NO\n         LH    R3,H8                          LIMIT TO 8\nGEN0010  DS    0H\n         TRT   0(1,R6),PRINT                  PRINTABLE CHARACTER?\n         BZ    GEN0040                        YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        HEX CONSTANTS                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=X_QUOTE,                                            +\n               RDATA1=R3\n         MVC   COMM_SOURCE_OPERANDS(L'X_QUOTE),X_QUOTE\n         LA    R4,COMM_SOURCE_OPERANDS+L'X_QUOTE\nGEN0020  DS    0H\n         TRT   0(1,R6),PRINT                  PRINTABLE?\n         BZ    GEN0030                        YES\n         UNPK  0(3,R4),0(2,R6)                UNPACK DATA\n         TR    0(2,R4),COMM_HEXCHAR           TRANSLATE TO PRINTABLE\n         LA    R6,1(R6)                       NEXT OBJECT MODULE BYTE\n         LA    R4,2(R4)                       NEXT IN OUTPUT\n         L     R15,DXD_BEGIN                  BEGIN DISP\n         LA    R15,1(,R15)                    PLUS 1\n         ST    R15,DXD_BEGIN                  CHANGE DISP\n         L     R15,DXD_LENGTH\n         BCTR  R15,0\n         ST    R15,DXD_LENGTH\n         L     R15,COMM_GEN_LENGTH            LENGTH GENNED\n         LA    R15,1(,R15)                    PLUS 1\n         ST    R15,COMM_GEN_LENGTH            UPDATE GENNED LENGTH\n         BCT   R3,GEN0020                     LOOP\nGEN0030  DS    0H\n         MVI   0(R4),C''''                    INSERT ENDING QUOTE\n         B     EXIT0000                       EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CHARACTER CONSTANTS                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nGEN0040  DS    0H\n         ITRACE ID=C_QUOTE,                                            +\n               RDATA1=R3\n         MVC   COMM_SOURCE_OPERANDS(L'C_QUOTE),C_QUOTE\n         LA    R4,COMM_SOURCE_OPERANDS+L'C_QUOTE\nGEN0050  DS    0H\n         TRT   0(1,R6),PRINT                  PRINTABLE?\n         BNZ   GEN0070                        NO\n         MVC   0(1,R4),0(R6)                  COPY DATA\n         LA    R4,1(,R4)                      NEXT IN GENERATED CODE\n         CLI   0(R6),X'7D'                    QUOTE?\n         BNE   GEN0060                        NO\n         MVI   0(R4),X'7D'                    INSERT SECOND QUOTE\n         LA    R4,1(,R4)                      ACCOUNT FOR IT\nGEN0060  DS    0H\n         LA    R6,1(,R6)                      NEXT IN TEXT\n         L     R15,DXD_BEGIN                  BEGIN DISP\n         LA    R15,1(,R15)                    PLUS 1\n         ST    R15,DXD_BEGIN                  CHANGE DISP\n         L     R15,DXD_LENGTH\n         BCTR  R15,0\n         ST    R15,DXD_LENGTH\n         L     R15,COMM_GEN_LENGTH            LENGTH GENNED\n         LA    R15,1(,R15)                    PLUS 1\n         ST    R15,COMM_GEN_LENGTH            UPDATE GENNED LENGTH\n         BCT   R3,GEN0050                     MINUS 1\nGEN0070  DS    0H\n         MVI   0(R4),C''''                    INSERT ENDING QUOTE\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        GENERATE ADCONs                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nGEN0080  DS    0H\n         ITRACE ID=GENADCON                   GENERATING AN ADCON\n         MVC   COMM_SOURCE_OPERANDS(4),=C'AL ('\n         MVC   COMM_SOURCE_OPERANDS+2(1),AREA_LENGTH+3\n         OI    COMM_SOURCE_OPERANDS+2,X'F0'   MAKE IT PRINTABLE\n         ICM   R7,15,AREA_REF_LABEL1          LABEL BLOCK'S ADDRESS\n         MVC   COMM_SOURCE_OPERANDS+4(L'LABEL_NAME),LABEL_NAME\n         LA    R1,COMM_SOURCE_OPERANDS\nGEN0090  DS    0H                             BLANK\n         CLI   0(R1),C' '                     YES\n         BE    GEN0100\n         LA    R1,1(,R1)                      NEXT\n         B     GEN0090\nGEN0100  DS    0H\n         ICM   R0,15,AREA_REF_DISP1           DISPLACEMENT FROM LABEL\n         BZ    GEN0110                        NO DISPLACEMENT\n         MVI   0(R1),C'+'                     INSERT PLUS SIGN\n         CVD   R0,COMM_DWORD                  SET DISPLACEMENT\n         MVC   1(L'EDITWORD,R1),EDITWORD\n         ED    1(L'EDITWORD,R1),COMM_DWORD+4\n         LA    R1,L'EDITWORD+1(,R1)           UPDATE ADDRESS\n         TM    AREA_DATA_TYPE,$DATA_31        31-BIT MODE BIT ON?\n         BNO   GEN0110                        NO\n         MVC   0(L'X80,R1),X80                GEN 31-BIT MODE\n         LA    R1,L'X80(,R1)                  UPDATE ADDRESS\nGEN0110  DS    0H\n         MVI   0(R1),C')'                     CLOSING PARENTHESIS\n         XC    DXD_LENGTH,DXD_LENGTH          SIGNAL 'ALL DONE'\n         B     EXIT0000                       DONE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        GENERATE VCONs                                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nGEN0120  DS    0H\n         ITRACE ID=GENVCON\n         MVC   COMM_SOURCE_OPERANDS(4),=C'VL ('\n         MVC   COMM_SOURCE_OPERANDS+2(1),AREA_LENGTH+3\n         OI    COMM_SOURCE_OPERANDS+2,X'F0'   MAKE IT PRINTABLE\n         MVC   COMM_SOURCE_OPERANDS+4(L'AREA_RLD_NAME),AREA_RLD_NAME\n         LA    R1,COMM_SOURCE_OPERANDS\nGEN0130  DS    0H\n         CLI   0(R1),C' '\n         BE    GEN0140\n         LA    R1,1(,R1)\n         B     GEN0130\nGEN0140  DS    0H\n         MVI   0(R1),C')'                     CLOSING PARENTHESIS\n         XC    DXD_LENGTH,DXD_LENGTH          SIGNAL 'ALL DONE'\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        GENERATE CXD                                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nGEN0150  DS    0H\n         MVC   OPCODE_MNEMONIC,OP_CXD         CHANGE OPCODE TO CXD\n         XC    DXD_LENGTH,DXD_LENGTH          SIGNAL 'ALL DONE'\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*        Generate \"Q\" constants.                                      *\n*                                                                     *\n*                                                                     *\n*  If the RLD name for the AREA matches the name of a DSECT,          *\n*     generate a \"DC  QLx(rld name)                                   *\n*  otherwise                                                          *\n*     generate a \"DC  ALx(0)\" with the QLx(rld name) as the comment   *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nGEN0160  DS    0H\n         ITRACE ID=GEN_Q\n         ICM   R4,15,COMM_DSECT_NEXT\n         BZ    GEN0180                         NO DEFINED DSECTS\n         USING DSECT_DSECT,R4                  DEFINE BASSE\nGEN0170  DS    0H\n         CLC   DSECT_NAME,AREA_RLD_NAME        DSECT LOCATED?\n         BE    GEN0210                         YES\n         ICM   R4,15,DSECT_NEXT                NEXT DSECT\n         BNZ   GEN0170                         LOOP\nGEN0180  DS    0H\n         MVC   COMM_SOURCE_OPERANDS+20(4),=C'QL ('\n         MVC   COMM_SOURCE_OPERANDS+22(1),AREA_LENGTH+3\n         OI    COMM_SOURCE_OPERANDS+22,X'F0'   MAKE IT PRINTABLE\n         MVC   COMM_SOURCE_OPERANDS+24(L'AREA_RLD_NAME),AREA_RLD_NAME\n         LA    R1,COMM_SOURCE_OPERANDS+24\nGEN0190  DS    0H\n         CLI   0(R1),C' '\n         BE    GEN0200\n         LA    R1,1(,R1)\n         B     GEN0190\nGEN0200  DS    0H\n         MVI   0(R1),C')'                     CLOSING PARENTHESIS\n         MVI   COMM_SOURCE_OPERANDS+0,C'A'\n         MVC   COMM_SOURCE_OPERANDS+1(3),COMM_SOURCE_OPERANDS+21\n         MVI   COMM_SOURCE_OPERANDS+4,C'0'\n         MVI   COMM_SOURCE_OPERANDS+5,C')'\n         XC    DXD_LENGTH,DXD_LENGTH          SIGNAL 'ALL DONE'\n         B     EXIT0000\nGEN0210  DS    0H\n         MVC   COMM_SOURCE_OPERANDS+0(4),=C'QL ('\n         MVC   COMM_SOURCE_OPERANDS+2(1),AREA_LENGTH+3\n         OI    COMM_SOURCE_OPERANDS+2,X'F0'   MAKE IT PRINTABLE\n         MVC   COMM_SOURCE_OPERANDS+4(L'AREA_RLD_NAME),AREA_RLD_NAME\n         LA    R1,COMM_SOURCE_OPERANDS+4\nGEN0220  DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BE    GEN0230                        YES\n         LA    R1,1(,R1)                      NEXT\n         B     GEN0220\nGEN0230  DS    0H\n         MVI   0(R1),C')'                     INSERT ENDING PAREN\n         XC    DXD_LENGTH,DXD_LENGTH          SIGNAL 'ALL DONE'\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=LEN_ZERO\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         L     R15,DXD_LENGTH                 LENGTH LEFT\n         ITRACE ID=EXIT,                                               +\n               RDATA1=R15\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         L     R14,12(,R13)                   RESTORE R14\n         LM    R0,R12,20(R13)                 RESTORE OTHER REGISTERS   ASE01680\n         BR    R14                            RETURN TO CALLER          ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START      DC   Q(DXDDC)\nH8             DC   H'8'\nOP_CXD         DC   CL6'CXD'\nOP_DC          DC   CL6'DC'\nC_QUOTE        DC   C'C'''\nX_QUOTE        DC   C'X'''\nX80            DC   C'+X''80000000'\nEDITWORD       DC   X'F020202020202120'\n\nPRINT    DS   0C\n         DC   256X'FF'\n         ORG  PRINT+X'40'\n         DC   X'00'\n         ORG  PRINT+X'4A'\n         DC   6X'00'\n         ORG  PRINT+X'5A'\n         DC   8X'00'\n         ORG  PRINT+X'6B'\n         DC   5X'00'\n         ORG  PRINT+X'7A'\n         DC   6X'00'\n         ORG  PRINT+X'81'\n         DC   9X'00'\n         ORG  PRINT+X'91'\n         DC   9X'00'\n         ORG  PRINT+X'A2'\n         DC   9X'00'\n         ORG  PRINT+X'C0'\n         DC   10X'00'\n         ORG  PRINT+X'D0'\n         DC   10X'00'\n         ORG  PRINT+X'E2'\n         DC   8X'00'\n         ORG  PRINT+X'F0'\n         DC   10X'00'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDDC          DSECT\n               DS   18F\nDXD_CSECT      DS   CL8\nDXD_AREA       DS   A\nDXD_BEGIN      DS   A\nDXD_LENGTH     DS   F\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               DISCOMM  TYPE=DSECT\n               COPY     DISASMDA\n\n               IFGACB   AM=VSAM\nACB_L          EQU      *-IFGACB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY REGEQU\n               END  GENDC\n./ ADD NAME=GENRR1   0109-07102-09198-0828-00103-00092-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: GENRR1                                               *\n*                                                                    *\n*  Function:                                                         *\n*   Generate RR type instructions                                    *\n*                                                                    *\n*  At entry R8 is address of AREA                                    *\n*           R6 is address of instruction                             *\n*           R5 is address of OPCODE entry                            *\n*                                                                    *\n*--------------------------------------------------------------------*\nGENRR1   CSECT\nGENRR1   AMODE 31\nGENRR1   RMODE ANY\n         USING GENRR1,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'GENRR1'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXDRR1,R13\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R8,                                              +\n               DATA2=0(R6)\n         MVI   COMM_SOURCE_OPERANDS,C'R'      INSERT 'R'\n         SR    R1,R1                          CLEAR REGISTER\n         IC    R1,1(,R6)                      OPERANDS\n         SRL   R1,4                           SHIFT OUT OPERAND 2\n         SLL   R1,1                           MULTIPLY BY 2\n         LA    R1,REGISTER_TABLE(R1)\n         MVC   COMM_SOURCE_OPERANDS+1(2),0(R1) COPY REGISTER\n         LA    R2,COMM_SOURCE_OPERANDS\nGEN0010  DS    0H\n         CLI   0(R2),C' '\n         BE    GEN0020\n         LA    R2,1(,R2)\n         B     GEN0010\nGEN0020  DS    0H\n         MVI   0(R2),C','                     INSERT COMMA\n         MVI   1(R2),C'R'                     INSERT 'R'\n         SR    R1,R1                          CLEAR REGISTER\n         IC    R1,1(,R6)\n         SLL   R1,28                          SHIFT OUT ALL BUT OPERAND\n         SRL   R1,27                          SHIFT BACK\n         LA    R1,REGISTER_TABLE(R1)\n         MVC   2(2,R2),0(R1)                  COPY REGISTER\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        RETURN CODE               ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START      DC   Q(DXDRR1)\n\nREGISTER_TABLE DS   0C\n               DC   CL2'0 '\n               DC   CL2'1 '\n               DC   CL2'2 '\n               DC   CL2'3 '\n               DC   CL2'4 '\n               DC   CL2'5 '\n               DC   CL2'6 '\n               DC   CL2'7 '\n               DC   CL2'8 '\n               DC   CL2'9 '\n               DC   CL2'10'\n               DC   CL2'11'\n               DC   CL2'12'\n               DC   CL2'13'\n               DC   CL2'14'\n               DC   CL2'15'\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDRR1         DSECT\n               DS   18F\nDXD_CSECT      DS   CL8\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               DISCOMM  TYPE=DSECT\n               COPY     DISASMDA\n\n               IFGACB   AM=VSAM\nACB_L          EQU      *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               COPY REGEQU\n               END  GENRR1\n./ ADD NAME=GENRR2   0111-07102-09198-0828-00235-00066-00000-SOURCE\n         MACRO\n         SVCDEF &SVCNBR,&DESC\n         LCLA   &LEN\n&LEN     SETA   K'&DESC-2\n         DC     AL2(&LEN+5)          TOTAL ENTRY LENGTH\n         DC     X'&SVCNBR'           SVC NUMBER\n         DC     AL2(&LEN)            DESCRIPTION'S LENGTH\n         DC     C&DESC               DESCRIPTION\n         MEND\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: GENRR2                                               *\n*                                                                    *\n*  Function:                                                         *\n*   Generate RR type instructions                                    *\n*                                                                    *\n*  At entry R8 is address of OPCODE table entry                      *\n*           R6 is address of instruction                             *\n*           R5 is address of OPCODE entry                            *\n*                                                                    *\n*--------------------------------------------------------------------*\nGENRR2   CSECT\nGENRR2   AMODE 31\nGENRR2   RMODE ANY\n         USING GENRR2,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'GENRR2'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXDRR2,R13\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R8,                                              +\n               DATA2=0(R6)\n         MVC   DXD_EDIT_PAD,COMM_BLANKS\n         SR    R1,R1                          CLEAR REGISTER\n         IC    R1,1(,R6)                      OPERAND\n         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDIT_WORK,EDITWORD         INITIALIZE EDIT WORD\n         ED    DXD_EDIT_WORK,COMM_DWORD+6     EDIT\n         LA    R1,DXD_EDIT_WORK\nGEN0010  DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BNE   GEN0020                        NO\n         LA    R1,1(,R1)                      NEXT\n         B     GEN0010\nGEN0020  DS    0H\n         MVC   COMM_SOURCE_OPERANDS(3),0(R1)  COPY NBR\n         CLI   0(R6),X'0A'                    SVC?\n         BNE   EXIT0000                       NO\n         LA    R2,SVC_DESC                    1ST DESCRIPTION\n         USING SVC_DSECT,R2\nGEN0030  DS    0H\n         CLC   SVC_NUMBER,1(R6)               SVC LOCATED?\n         BE    GEN0040                        YES\n         AH    R2,SVC_LENGTH                  NEXT DESCRIPTION\n         CLI   0(R2),X'FF'                    END OF TABLE?\n         BNE   GEN0030                        NO\n         B     EXIT0000\nGEN0040  DS    0H\n         SR    R1,R1\n         ICM   R1,3,SVC_COMMENT_LENGTH        LENGTH OF COMMENT\n         BCTR  R1,0\n         EX    R1,MVC_01\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        RETURN CODE               ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nMVC_01   MVC   COMM_SOURCE_OPERANDS+20(0),SVC_COMMENT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START      DC   Q(DXDRR2)\nEDITWORD       DC   X'40202120'\n\nSVC_DESC       DS   0C\n               SVCDEF 00,'EXCP/XDAP'\n               SVCDEF 01,'WAIT/WAITR/PRTOV'\n               SVCDEF 02,'POST'\n               SVCDEF 03,'EXIT'\n               SVCDEF 04,'GETMAIN'\n               SVCDEF 05,'FREEMAIN'\n               SVCDEF 06,'LINK/LINKX'\n               SVCDEF 07,'XCTL/XCTLX'\n               SVCDEF 08,'LOAD'\n               SVCDEF 09,'DELETE'\n               SVCDEF 0A,'GETMAIN/FREEMAIN'\n               SVCDEF 0B,'TIME'\n               SVCDEF 0C,'SYNCH/SYNCHX'\n               SVCDEF 0D,'ABEND'\n               SVCDEF 0E,'SPIE'\n               SVCDEF 0F,'ERREXCP'\n               SVCDEF 10,'PURGE'\n               SVCDEF 11,'RESTORE'\n               SVCDEF 12,'BLDL/FIND (TYPE D)'\n               SVCDEF 13,'OPEN'\n               SVCDEF 14,'CLOSE'\n               SVCDEF 15,'STOW'\n               SVCDEF 16,'OPEN (TYPE=J)'\n               SVCDEF 17,'CLOSE (TYPE=T)'\n               SVCDEF 18,'DEVTYPE'\n               SVCDEF 19,'TRKBAL'\n               SVCDEF 1A,'CATALOG/INDEX/LOCATE'\n               SVCDEF 1B,'OBTAIN'\n               SVCDEF 1D,'SCRATCH'\n               SVCDEF 1E,'RENAME'\n               SVCDEF 1F,'FEOV'\n               SVCDEF 20,'ALLOC'\n               SVCDEF 21,'IOHALT'\n               SVCDEF 22,'MGCR/QEDIT'\n               SVCDEF 23,'WTO/WTOR'\n               SVCDEF 24,'WTL'\n               SVCDEF 25,'SEGLD/SEGWT'\n               SVCDEF 25,'SEGLD/SEGWT'\n               SVCDEF 27,'LABEL'\n               SVCDEF 28,'EXTRACT'\n               SVCDEF 29,'IDENTIFY'\n               SVCDEF 2A,'ATTACH/ATTACHX'\n               SVCDEF 2B,'CIRB'\n               SVCDEF 2C,'CHAP'\n               SVCDEF 2D,'OVLYBRCH'\n               SVCDEF 2E,'TIMER'\n               SVCDEF 2F,'STIMER'\n               SVCDEF 30,'DEQ'\n               SVCDEF 33,'SNAP/SNAPX/SDUMP/SDUMPX'\n               SVCDEF 34,'RESTART'\n               SVCDEF 35,'RELEX'\n               SVCDEF 36,'DISABLE'\n               SVCDEF 37,'EOV'\n               SVCDEF 38,'ENQ/RESERVE'\n               SVCDEF 39,'FREEDBUF'\n               SVCDEF 3A,'RELBUF/REQBUF'\n               SVCDEF 3B,'OLTEP'\n               SVCDEF 3C,'STAE/STAI-ESTAE/ESTAI'\n               SVCDEF 3D,'IKJEGS6A'\n               SVCDEF 3E,'DETACH'\n               SVCDEF 3F,'CHKPT'\n               SVCDEF 40,'RDJFCB'\n               SVCDEF 42,'BTAMTEST'\n               SVCDEF 44,'SYNADF/SYNADRLS'\n               SVCDEF 45,'BSP'\n               SVCDEF 46,'GSERV'\n               SVCDEF 47,'ASGNBFR/BUFINQ/RLSEBFR'\n               SVCDEF 49,'SPAR'\n               SVCDEF 4A,'DAR'\n               SVCDEF 4B,'DQUEUE'\n               SVCDEF 4C,'IFBSTAT'\n               SVCDEF 4E,'LSPACE'\n               SVCDEF 4F,'STATUS'\n               SVCDEF 51,'SETPRT'\n               SVCDEF 53,'SMFWTM'\n               SVCDEF 54,'GRAPHICS'\n               SVCDEF 55,'DDRSWAP'\n               SVCDEF 56,'ATLAS'\n               SVCDEF 57,'DOM'\n               SVCDEF 5B,'VOLSTAT'\n               SVCDEF 5C,'TCPEXCP'\n               SVCDEF 5D,'TGET/TPUT'\n               SVCDEF 5E,'TGET/TPUT'\n               SVCDEF 5F,'SYSEVENT'\n               SVCDEF 60,'STAX'\n               SVCDEF 61,'IKJEGS9G'\n               SVCDEF 62,'PROTECT'\n               SVCDEF 63,'DYNALLOC'\n               SVCDEF 64,'IKJEFFIB'\n               SVCDEF 65,'QTIP'\n               SVCDEF 66,'AQCTL'\n               SVCDEF 67,'XLATE'\n               SVCDEF 68,'TOPCTL'\n               SVCDEF 69,'IMGLIB'\n               SVCDEF 6B,'MODESET'\n               SVCDEF 70,'PGRLSE'\n               SVCDEF 71,'PGFIX/PGFREE/PGLOAD/PGOUT'\n               SVCDEF 72,'EXCPVR'\n               SVCDEF 75,'DEBCHK'\n               SVCDEF 77,'TESTAUTH'\n               SVCDEF 78,'GETMAIN/FREEMAIN'\n               SVCDEF 79,'VSAM'\n               SVCDEF 7B,'PURGEDQ'\n               SVCDEF 7C,'TPIO'\n               SVCDEF 7D,'EVENTS'\n               SVCDEF 7E,'MSS(ICB2SVC)'\n               SVCDEF 82,'RACHECK'\n               SVCDEF 83,'RACINIT'\n               SVCDEF 84,'RACLIST'\n               SVCDEF 85,'RACDEF'\n               SVCDEF 89,'ESR'\n               SVCDEF 8A,'PGSER'\n               SVCDEF 8B,'CVAFDIR'\n               DC     X'FF'\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDRR2              DSECT\n                    DS   18F\nDXD_CSECT           DS   CL8\nDXD_EDIT_WORK       DS   CL4\nDXD_EDIT_PAD        DS   CL4\n*---------------------------------------------------------------------*\n*                                                                     *\n*              SVC DSECT                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nSVC_DSECT           DSECT\nSVC_LENGTH          DS   XL2         LENGTH OF THIS SVC DEFINITION\nSVC_NUMBER          DS   X           SVC NUMBER\nSVC_COMMENT_LENGTH  DS   XL2         LENGTH OF DESCRIPTION\nSVC_COMMENT         DS   0C          DESCRIPTION\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               DISCOMM  TYPE=DSECT\n               COPY     DISASMDA\n\n               IFGACB   AM=VSAM\nACB_L          EQU      *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               COPY REGEQU\n               END  GENRR2\n./ ADD NAME=GENRR3   0112-07103-09198-0829-00188-00138-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: GENRR3                                               *\n*                                                                    *\n*  Function:                                                         *\n*   Generate RR type instructions                                    *\n*                                                                    *\n*  At entry R8 is AREA address                                       *\n*           R6 is address of instruction                             *\n*           R5 is address of OPCODE entry                            *\n*                                                                    *\n*--------------------------------------------------------------------*\nGENRR3   CSECT\nGENRR3   AMODE 31\nGENRR3   RMODE ANY\n         USING GENRR3,R11\n         USING DISCOMM,R12\n         USING OPCODE_DSECT,R5\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'GENRR3'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXDRR3,R13\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R8,                                              +\n               DATA2=0(R6)\n         MVC   DXD_CC,1(R6)                   COPY CONDITION\n         NI    DXD_CC,X'F0'                   LEAVE ONLY CONDTION\n         MVC   OPCODE_MNEMONIC,OP_BCR         RESET OPCODE\n         TM    COMM_CC,$OPCODE_CCA            ARITHMETIC?\n         BO    GEN0020                        YES\n         TM    COMM_CC,$OPCODE_CCC            COMPARE?\n         BO    GEN0030                        YES\n         TM    COMM_CC,$OPCODE_CCL            LOGICAL?\n         BO    GEN0040                        YES\nGEN0000  DS    0H\n         ITRACE ID=BCR\n         SR    R0,R0\n         IC    R0,COMM_CC                     CONDITION\n         SRL   R0,4\n         CVD   R0,COMM_DWORD\n         MVC   DXD_CONDITION,=X'40202120'\n         ED    DXD_CONDITION,COMM_DWORD+6     EDIT CONDITION\n         CLI   DXD_CONDITION+2,C' '           BLANK?\n         BE    GEN0010                        YES\n         MVC   COMM_SOURCE_OPERANDS(2),DXD_CONDITION+2\n         MVI   COMM_SOURCE_OPERANDS+2,C','\n         LA    R1,COMM_SOURCE_OPERANDS+3\n         B     GEN0070\nGEN0010  DS    0H\n         MVC   COMM_SOURCE_OPERANDS(1),DXD_CONDITION+3\n         MVI   COMM_SOURCE_OPERANDS+1,C','\n         LA    R1,COMM_SOURCE_OPERANDS+2\n         B     GEN0070\nGEN0020  DS    0H\n         ITRACE ID=ARITH\n         LA    R1,ARITHMETIC\n         B     GEN0050\nGEN0030  DS    0H\n         ITRACE ID=COMPARE\n         LA    R1,COMPARE\n         B     GEN0050\nGEN0040  DS    0H\n         ITRACE ID=LOGICAL\n         LA    R1,LOGICAL\nGEN0050  DS    0H\n         USING CC_DSECT,R1\n         CLC   CC_CODE,DXD_CC                 CONDITION FOUND?\n         BE    GEN0060                        YES\n         LA    R1,CC_L(,R1)                   NEXT\n         CLI   0(R1),X'FF'                    END OF TABLE?\n         BE    GEN0000                        YES\n         B     GEN0050\nGEN0060  DS    0H\n         ITRACE ID=SET,                                                +\n               DATA1=CC_MNEMONIC\n         MVC   OPCODE_MNEMONIC,CC_MNEMONIC    SET MNEMONIC\n         LA    R1,COMM_SOURCE_OPERANDS\nGEN0070  DS    0H\n         MVC   DXD_CC,1(R6)                   COPY BYTE 2 AGAIN\n         NI    DXD_CC,X'0F'                   LEAVE ONLY REGISTER NBR\n         SR    R2,R2\n         IC    R2,DXD_CC                      REGISTER NBR\n         SLL   R2,1                           MULTIPLY BY 2\n         LA    R2,REGISTER_TABLE(R2)          REGISTER NBR ADDRESS\n         MVI   0(R1),C'R'\n         MVC   1(2,R1),0(R2)                  COPY REGISTER\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        RETURN CODE               ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START      DC   Q(DXDRR3)\nOP_BCR         DC   CL5'BCR'\n\nREGISTER_TABLE DS   0C\n               DC   CL2'0 '\n               DC   CL2'1 '\n               DC   CL2'2 '\n               DC   CL2'3 '\n               DC   CL2'4 '\n               DC   CL2'5 '\n               DC   CL2'6 '\n               DC   CL2'7 '\n               DC   CL2'8 '\n               DC   CL2'9 '\n               DC   CL2'10'\n               DC   CL2'11'\n               DC   CL2'12'\n               DC   CL2'13'\n               DC   CL2'14'\n               DC   CL2'15'\n\nARITHMETIC     DS    0C                    ARITHMETIC MNEMONICS\n               DC    X'00',CL6'NOPR  '     NO-OP\n               DC    X'10',CL6'BOR   '     BRANCH OVERFLOW\n               DC    X'20',CL6'BPR   '     BRANCH PLUS\n               DC    X'40',CL6'BMR   '     BRANCH MINUS\n               DC    X'70',CL6'BNZR  '     BRANCH NOT ZERO\n               DC    X'80',CL6'BZR   '     BRANCH IF ZERO\n               DC    X'B0',CL6'BNMR  '     BRANCH NOT MINUS\n               DC    X'D0',CL6'BNPR  '     BRANCH NOT PLUS\n               DC    X'E0',CL6'BNOR  '     BRANCH NOT OVERFLOW\n               DC    X'F0',CL6'BR    '     UNCONDITIONAL BRANCH\n               DC    X'FF'\n\nCOMPARE        DS    0C                    COMPARE MNEMONICS\n               DC    X'00',CL6'NOPR  '     NO-OP\n               DC    X'20',CL6'BHR   '     BRANCH HIGH\n               DC    X'40',CL6'BLR   '     BRANCH LOW\n               DC    X'70',CL6'BNER  '     BRANCH NOT EQUAL\n               DC    X'80',CL6'BER   '     BRANCH EQUAL\n               DC    X'B0',CL6'BNLR  '     BRANCH NOT LOW\n               DC    X'D0',CL6'BNHR  '     BRANCH NOT HIGH\n               DC    X'F0',CL6'BR    '     UNCONDITIONAL BRANCH\n               DC    X'FF'\n\nLOGICAL        DS    0C                    LOGICAL MNEMONICS\n               DC    X'00',CL6'NOPR  '     NO-OP\n               DC    X'10',CL6'BOR   '     BRANCH ONES\n               DC    X'40',CL6'BMR   '     BRANCH MIXED\n               DC    X'70',CL6'BNZR  '     BRANCH NOT ZEROS\n               DC    X'80',CL6'BZR   '     BRANCH IF ZEROS\n               DC    X'B0',CL6'BNMR  '     BRANCH NOT MIXED\n               DC    X'E0',CL6'BNOR  '     BRANCH NOT ONES\n               DC    X'F0',CL6'BR    '     UNCONDITIONAL BRANCH\n               DC    X'FF'\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDRR3         DSECT\n               DS   18F\nDXD_CSECT      DS   CL8\nDXD_CC         DS   X\nDXD_CONDITION  DS   XL4\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               DISCOMM  TYPE=DSECT\n               COPY DISASMDA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nCC_DSECT       DSECT\nCC_CODE        DS   X\nCC_MNEMONIC    DS   CL6\nCC_L           EQU  *-CC_DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n\n               IFGACB  AM=VSAM\nACB_L          EQU     *-IFGACB\n               COPY REGEQU\n               END  GENRR3\n./ ADD NAME=GENRS1   0104-08345-09198-0829-00129-00127-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: GENRS1                                               *\n*                                                                    *\n*  Function:                                                         *\n*   GENERATE RS TYPE INSTRUCTIONS  (SLL, SRL, SRA, SLA, ...)         *\n*                                                                    *\n*  At entry R8 is AREA address                                       *\n*           R6 is address of instruction                             *\n*           R5 is address of OPCODE entry                            *\n*                                                                    *\n*--------------------------------------------------------------------*\nGENRS1   CSECT\nGENRS1   AMODE 31\nGENRS1   RMODE ANY\n         USING GENRS1,R11\n         USING DISCOMM,R12\n         USING AREA_DSECT,R8\n         USING OPCODE_DSECT,R5\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'GENRS1'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXDRS1,R13\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R8,                                              +\n               DATA2=0(R6)\n         MVC   DXD_BLANKS,COMM_BLANKS\n         LA    R1,COMM_SOURCE_OPERANDS\n*--------------------------------------------------------------------*\n*        GENERATE R                                                  *\n*--------------------------------------------------------------------*\n         SR    R3,R3                          CLEAR R3\n         IC    R3,1(R6)                       INSERT R1 AND R2\n         SRL   R3,4                           SHIFT OUT R2\n         STC   R3,DXD_R                       SAVE R1\n         LA    R1,COMM_SOURCE_OPERANDS\n         MVI   0(R1),C'R'                     INSERT 'R' FOR R1\n         IC    R3,DXD_R                       R1\n         SLL   R3,1                           MULTIPLY BY 2\n         LA    R2,REGISTER_TABLE(R3)          REGISTSER NAME\n         MVC   COMM_SOURCE_OPERANDS+1(2),0(R2)\n         BAL   R9,SCAN0000                    FIND 1ST BLANK\n         MVI   0(R1),C','                     INSERT COMMA\n*--------------------------------------------------------------------*\n*        GENERATE \"nnn\"                                              *\n*--------------------------------------------------------------------*\n         MVC   DXD_DISP,2(R6)                 COPY\n         NI    DXD_DISP,X'0F'                 FORCE ZERO\n         LH    R0,DXD_DISP                    DISP\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT DISP\n         MVC   1(4,R1),DXD_EDIT_WORD+4        COPY BITS TO SHIFT\n         B     EXIT0000\n*--------------------------------------------------------------------*\n*        Find next blank                                             *\n*--------------------------------------------------------------------*\nSCAN0000 DS    0H\n         CLI   0(R1),C' '\n         BER   R9\n         LA    R1,1(,R1)\n         B     SCAN0000\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        RETURN CODE               ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START      DC   Q(DXDRS1)\nEDIT_WORD      DC   X'F020202020202120'\n\nREGISTER_TABLE DS   0C\n               DC   CL2'0 '\n               DC   CL2'1 '\n               DC   CL2'2 '\n               DC   CL2'3 '\n               DC   CL2'4 '\n               DC   CL2'5 '\n               DC   CL2'6 '\n               DC   CL2'7 '\n               DC   CL2'8 '\n               DC   CL2'9 '\n               DC   CL2'10'\n               DC   CL2'11'\n               DC   CL2'12'\n               DC   CL2'13'\n               DC   CL2'14'\n               DC   CL2'15'\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDRS1         DSECT\n               DS   18F\nDXD_CSECT      DS   CL8\nDXD_DISP       DS   XL2\nDXD_R          DS   X\n\nDXD_EDIT_WORD  DS   XL8\nDXD_BLANKS     DS   CL8\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               DISCOMM  TYPE=DSECT\n               COPY     DISASMDA\n\n               IFGACB   AM=VSAM\nACB_L          EQU      *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               COPY REGEQU\n               END  GENRS1\n./ ADD NAME=GENRS2   0106-07124-09198-0830-00184-00182-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: GENRS2                                               *\n*                                                                    *\n*  Function:                                                         *\n*   GENERATE RS TYPE INSTRUCTIONS  (STM, LM,..)                      *\n*                                                                    *\n*  At entry R8 is AREA address                                       *\n*           R6 is address of instruction                             *\n*           R5 is address of OPCODE entry                            *\n*                                                                    *\n*--------------------------------------------------------------------*\nGENRS2   CSECT\nGENRS2   AMODE 31\nGENRS2   RMODE ANY\n         USING GENRS2,R11\n         USING DISCOMM,R12\n         USING AREA_DSECT,R8\n         USING OPCODE_DSECT,R5\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'GENRS2'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXDRS2,R13\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R8,                                              +\n               DATA2=0(R6)\n         MVC   DXD_BLANKS,COMM_BLANKS\n         LA    R1,COMM_SOURCE_OPERANDS\n*--------------------------------------------------------------------*\n*        GENERATE R1 AND R2                                          *\n*--------------------------------------------------------------------*\n         SR    R3,R3                          CLEAR R3\n         IC    R3,1(R6)                       INSERT R1 AND R2\n         SRL   R3,4                           SHIFT OUT R2\n         STC   R3,DXD_R1                      SAVE R1\n         MVC   DXD_R2,1(R6)                   COPY R1 AND R1\n         NI    DXD_R2,X'0F'                   REMOVE R1\n         LA    R1,COMM_SOURCE_OPERANDS\n         MVI   0(R1),C'R'                     INSERT 'R' FOR R1\n         IC    R3,DXD_R1                      R1\n         SLL   R3,1                           MULTIPLY BY 2\n         LA    R2,REGISTER_TABLE(R3)          REGISTSER NAME\n         MVC   COMM_SOURCE_OPERANDS+1(2),0(R2)\n         BAL   R9,SCAN0000                    FIND 1ST BLANK\n         MVI   0(R1),C','                     INSERT COMMA\n         MVI   1(R1),C'R'                     INSERT 'R' FOR R2\n         IC    R3,DXD_R2                      R2\n         SLL   R3,1                           MULTIPLY BY 2\n         LA    R2,REGISTER_TABLE(R3)          REGISTER NAME\n         MVC   2(2,R1),0(R2)                  COPY REGISTER NAME\n         BAL   R9,SCAN0000                    FIND BLANK\n         MVI   0(R1),C','                     INSERT COMMA\n         LA    R1,1(,R1)\n         ICM   R7,15,AREA_REF_LABEL1          LABEL PRESENT?\n         BZ    GEN0020                        NO\n         USING LABEL_DSECT,R7\n*--------------------------------------------------------------------*\n*        GENERATE LABEL                                              *\n*--------------------------------------------------------------------*\n         MVC   0(L'LABEL_NAME,R1),LABEL_NAME\n         BAL   R9,SCAN0000                    FIND END OF NAME\n         ICM   R0,15,AREA_REF_DISP1           DISP FROM LABEL\n         BZ    EXIT0000                       ZERO.. EXIT\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVI   0(R1),C'+'                     INSERT PLUS\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT DISP\n         LA    R2,DXD_EDIT_WORD\n         BAL   R9,SCAN1000                    FIND FIRST NON ZERO\n         MVC   1(4,R1),0(R2)                  COPY DISP\n         B     EXIT0000\n*--------------------------------------------------------------------*\n*        GENERATE \"DDD(R)\"                                           *\n*--------------------------------------------------------------------*\nGEN0020  DS    0H\n         SR    R3,R3\n         IC    R3,2(R6)                       BASE AND PART OF DISP\n         SRL   R3,4                           SHIFT OUT DISP\n         STC   R3,DXD_BASE\n         MVC   DXD_DISP,2(R6)                 COPY BASE & DISP\n         NI    DXD_DISP,X'0F'                 LEAVE ONLY DISP\n         LH    R0,DXD_DISP                    DISP\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT DISP\n         LA    R2,DXD_EDIT_WORD\n         BAL   R9,SCAN1000                    FIND 1ST NON ZERO\n         MVC   0(4,R1),0(R2)                  COPY DISP\n         ICM   R3,1,DXD_BASE                  BASE ZERO?\n         BZ    EXIT0000                       YES\n         BAL   R9,SCAN0000                    FIND BLANK\n         MVI   0(R1),C'('                     OPEN PAREN\n         MVI   1(R1),C'R'\n         SLL   R3,1                           MULTIPLY BY 2\n         LA    R2,REGISTER_TABLE(R3)          REGISTER NAME\n         MVC   2(2,R1),0(R2)                  COPY TO SOURCE\n         BAL   R9,SCAN0000                    FIND BLANK\n         MVI   0(R1),C')'                     INSERT CLOSING PAREN\n         B     EXIT0000\n*--------------------------------------------------------------------*\n*        Find next blank                                             *\n*--------------------------------------------------------------------*\nSCAN0000 DS    0H\n         CLI   0(R1),C' '\n         BER   R9\n         LA    R1,1(,R1)\n         B     SCAN0000\n*--------------------------------------------------------------------*\n*        Find first non-zero                                         *\n*--------------------------------------------------------------------*\nSCAN1000 DS    0H\n         CLI   0(R2),C'0'\n         BNER  R9\n         LA    R2,1(,R2)\n         B     SCAN1000\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        RETURN CODE               ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START      DC   Q(DXDRS2)\nEDIT_WORD      DC   X'F020202020202120'\n\nREGISTER_TABLE DS   0C\n               DC   CL2'0 '\n               DC   CL2'1 '\n               DC   CL2'2 '\n               DC   CL2'3 '\n               DC   CL2'4 '\n               DC   CL2'5 '\n               DC   CL2'6 '\n               DC   CL2'7 '\n               DC   CL2'8 '\n               DC   CL2'9 '\n               DC   CL2'10'\n               DC   CL2'11'\n               DC   CL2'12'\n               DC   CL2'13'\n               DC   CL2'14'\n               DC   CL2'15'\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDRS2         DSECT\n               DS   18F\nDXD_CSECT      DS   CL8\nDXD_DISP       DS   XL2\nDXD_R1         DS   X\nDXD_R2         DS   X\nDXD_BASE       DS   X\n\nDXD_EDIT_WORD  DS   XL8\nDXD_BLANKS     DS   CL8\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               DISCOMM  TYPE=DSECT\n               COPY     DISASMDA\n\n               IFGACB   AM=VSAM\nACB_L          EQU      *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               COPY REGEQU\n               END  GENRS2\n./ ADD NAME=GENRS3   0105-07124-09198-0830-00183-00180-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: GENRS3                                               *\n*                                                                    *\n*  Function:                                                         *\n*   GENERATE RS TYPE INSTRUCTIONS  (ICM, STCM, ...)                  *\n*                                                                    *\n*  At entry R8 is AREA address                                       *\n*           R6 is address of instruction                             *\n*           R5 is address of OPCODE entry                            *\n*                                                                    *\n*--------------------------------------------------------------------*\nGENRS3   CSECT\nGENRS3   AMODE 31\nGENRS3   RMODE ANY\n         USING GENRS3,R11\n         USING DISCOMM,R12\n         USING AREA_DSECT,R8\n         USING OPCODE_DSECT,R5\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'GENRS3'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXDRS3,R13\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R8,                                              +\n               DATA2=0(R6)\n         MVC   DXD_BLANKS,COMM_BLANKS\n         LA    R1,COMM_SOURCE_OPERANDS\n*--------------------------------------------------------------------*\n*        GENERATE R1 AND MASK                                        *\n*--------------------------------------------------------------------*\n         SR    R3,R3                          CLEAR R3\n         IC    R3,1(R6)                       INSERT R1 AND R2\n         SRL   R3,4                           SHIFT OUT R2\n         STC   R3,DXD_R1                      SAVE R1\n         MVC   DXD_MASK,1(R6)                 COPY R1 AND R1\n         NI    DXD_MASK,X'0F'                 REMOVE R1\n         LA    R1,COMM_SOURCE_OPERANDS\n         MVI   0(R1),C'R'                     INSERT 'R' FOR R1\n         IC    R3,DXD_R1                      R1\n         SLL   R3,1                           MULTIPLY BY 2\n         LA    R2,REGISTER_TABLE(R3)          REGISTSER NAME\n         MVC   COMM_SOURCE_OPERANDS+1(2),0(R2)\n         BAL   R9,SCAN0000                    FIND 1ST BLANK\n         MVI   0(R1),C','                     INSERT COMMA\n         IC    R3,DXD_MASK                    MASK\n         SLL   R3,1                           MULTIPLY BY 2\n         LA    R2,REGISTER_TABLE(R3)          USE REGISTER NAMES\n         MVC   1(2,R1),0(R2)                  COPY REGISTER NAME\n         BAL   R9,SCAN0000                    FIND BLANK\n         MVI   0(R1),C','                     INSERT COMMA\n         LA    R1,1(,R1)\n         ICM   R7,15,AREA_REF_LABEL1          LABEL PRESENT?\n         BZ    GEN0020                        NO\n         USING LABEL_DSECT,R7\n*--------------------------------------------------------------------*\n*        GENERATE LABEL                                              *\n*--------------------------------------------------------------------*\n         MVC   0(L'LABEL_NAME,R1),LABEL_NAME\n         BAL   R9,SCAN0000                    FIND END OF NAME\n         ICM   R0,15,AREA_REF_DISP1           DISP FROM LABEL\n         BZ    EXIT0000                       ZERO.. EXIT\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVI   0(R1),C'+'                     INSERT PLUS\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT DISP\n         LA    R2,DXD_EDIT_WORD\n         BAL   R9,SCAN1000                    FIND FIRST NON ZERO\n         MVC   1(4,R1),0(R2)                  COPY DISP\n         B     EXIT0000\n*--------------------------------------------------------------------*\n*        GENERATE \"DDD(R)\"                                           *\n*--------------------------------------------------------------------*\nGEN0020  DS    0H\n         SR    R3,R3\n         IC    R3,2(R6)                       BASE AND PART OF DISP\n         SRL   R3,4                           SHIFT OUT DISP\n         STC   R3,DXD_BASE\n         MVC   DXD_DISP,2(R6)                 COPY BASE & DISP\n         NI    DXD_DISP,X'0F'                 LEAVE ONLY DISP\n         LH    R0,DXD_DISP                    DISP\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT DISP\n         LA    R2,DXD_EDIT_WORD\n         BAL   R9,SCAN1000                    FIND 1ST NON ZERO\n         MVC   0(4,R1),0(R2)                  COPY DISP\n         ICM   R3,1,DXD_BASE                  BASE ZERO?\n         BZ    EXIT0000                       YES\n         BAL   R9,SCAN0000                    FIND BLANK\n         MVI   0(R1),C'('                     OPEN PAREN\n         MVI   1(R1),C'R'\n         SLL   R3,1                           MULTIPLY BY 2\n         LA    R2,REGISTER_TABLE(R3)          REGISTER NAME\n         MVC   2(2,R1),0(R2)                  COPY TO SOURCE\n         BAL   R9,SCAN0000                    FIND BLANK\n         MVI   0(R1),C')'                     INSERT CLOSING PAREN\n         B     EXIT0000\n*--------------------------------------------------------------------*\n*        Find next blank                                             *\n*--------------------------------------------------------------------*\nSCAN0000 DS    0H\n         CLI   0(R1),C' '\n         BER   R9\n         LA    R1,1(,R1)\n         B     SCAN0000\n*--------------------------------------------------------------------*\n*        Find first non-zero                                         *\n*--------------------------------------------------------------------*\nSCAN1000 DS    0H\n         CLI   0(R2),C'0'\n         BNER  R9\n         LA    R2,1(,R2)\n         B     SCAN1000\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        RETURN CODE               ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START      DC   Q(DXDRS3)\nEDIT_WORD      DC   X'F020202020202120'\n\nREGISTER_TABLE DS   0C\n               DC   CL2'0 '\n               DC   CL2'1 '\n               DC   CL2'2 '\n               DC   CL2'3 '\n               DC   CL2'4 '\n               DC   CL2'5 '\n               DC   CL2'6 '\n               DC   CL2'7 '\n               DC   CL2'8 '\n               DC   CL2'9 '\n               DC   CL2'10'\n               DC   CL2'11'\n               DC   CL2'12'\n               DC   CL2'13'\n               DC   CL2'14'\n               DC   CL2'15'\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDRS3         DSECT\n               DS   18F\nDXD_CSECT      DS   CL8\nDXD_DISP       DS   XL2\nDXD_R1         DS   X\nDXD_MASK       DS   X\nDXD_BASE       DS   X\n\nDXD_EDIT_WORD  DS   XL8\nDXD_BLANKS     DS   CL8\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               DISCOMM  TYPE=DSECT\n               COPY     DISASMDA\n\n               IFGACB   AM=VSAM\nACB_L          EQU      *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               COPY REGEQU\n               END  GENRS3\n./ ADD NAME=GENRX    0101-09119-09198-0831-00310-00310-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: GENRX                                                *\n*                                                                    *\n*  Function:                                                         *\n*   GENERATE RX TYPE INSTRUCTIONS                                    *\n*                                                                    *\n*  At entry R8 is AREA address                                       *\n*           R6 is address of instruction                             *\n*           R5 is address of OPCODE entry                            *\n*                                                                    *\n*--------------------------------------------------------------------*\nGENRX    CSECT\nGENRX    AMODE 31\nGENRX    RMODE ANY\n         USING GENRX,R11\n         USING DISCOMM,R12\n         USING AREA_DSECT,R8\n         USING OPCODE_DSECT,R5\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'GENRX'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXDRX,R13\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R8,                                              +\n               DATA2=0(R6)\n         MVC   DXD_BLANKS,COMM_BLANKS\n         LA    R1,COMM_SOURCE_OPERANDS\n         TM    OPCODE_FLAGS,$OPCODE_EXT       EXTENDED FORMAT?\n         BO    GEN0020                        YES\n*--------------------------------------------------------------------*\n*        GENERATE R OF RX                                            *\n*--------------------------------------------------------------------*\n         SR    R3,R3                          CLEAR R3\n         IC    R3,1(R6)                       INSERT R AND X\n         SRL   R3,4                           SHIFT OUT X\n         SLL   R3,1                           MULTIPLY BY 2\n         STC   R3,DXD_R\n         LA    R2,REGISTER_TABLE(R3)          REGISTSER NAME\n         MVI   COMM_SOURCE_OPERANDS,C'R'\n         MVC   COMM_SOURCE_OPERANDS+1(2),0(R2)\n         LA    R1,COMM_SOURCE_OPERANDS\n         BAL   R9,SCAN0000                    FIND 1ST BLANK\n         MVI   0(R1),C','                     INSERT COMMA\n         LA    R1,1(,R1)\n         B     GEN0080\n*--------------------------------------------------------------------*\n*        Generate branch instructions                                *\n*--------------------------------------------------------------------*\nGEN0020  DS    0H\n         ITRACE ID=GENBR,                                              +\n               DATA1=AREA_BEGIN,                                       +\n               DATA2=0(R6)\n         MVC   DXD_COND,1(R6)                 COPY INSTRUCTION BYTE 2\n         NI    DXD_COND,X'F0'                 LEAVE ONLY CONDITION\n         TM    COMM_CC,$OPCODE_CCA            ARITHMETIC?\n         BO    GEN0030                        YES\n         TM    COMM_CC,$OPCODE_CCC            COMPARE?\n         BO    GEN0040                        YES\n         ITRACE ID=LOGICAL\n         LA    R2,COND_LOGICAL                DEFAULT TO LOGICAL\n         B     GEN0050\nGEN0030  DS    0H\n         ITRACE ID=ARITH\n         LA    R2,COND_ARITH                  ARITHMETIC CONDITIONS\n         B     GEN0050\nGEN0040  DS    0H\n         ITRACE ID=COMPARE\n         LA    R2,COND_COMPARE                COMPARE CONDITIONS\nGEN0050  DS    0H\n         USING COND_DSECT,R2\n         CLC   COND_COND,DXD_COND             LOCATED THE CONDITION?\n         BE    GEN0060                        YES\n         LA    R2,COND_DSECT_L(,R2)           NEXT\n         CLI   0(R2),X'FF'                    END OF TABLE?\n         BE    GEN0070                        NOT LOCATED\n         B     GEN0050\nGEN0060  DS    0H\n         MVC   OPCODE_MNEMONIC,COND_MNEMONIC  CHANGE MNEMONIC\n         B     GEN0080\n*--------------------------------------------------------------------*\n*        Generate BC with condition nbr                              *\n*--------------------------------------------------------------------*\nGEN0070  DS    0H\n         MVC   OPCODE_MNEMONIC,OP_BC\n         SR    R0,R0\n         IC    R0,DXD_COND\n         SRL   R0,4                           SHIFT TO LOW BITS\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4\n         MVC   0(2,R1),DXD_EDIT_WORD+6        COPY CONDTION\n         MVI   2(R1),C','\n         LA    R1,3(,R1)                      SKIP CONDITION AND COMMA\n*--------------------------------------------------------------------*\n*        GENERATE LABEL(X)                                           *\n*--------------------------------------------------------------------*\nGEN0080  DS    0H\n         ICM   R7,15,AREA_REF_LABEL1          LABEL REFERENCED?\n         USING LABEL_DSECT,R7\n         BZ    GEN0100                        NO\n         MVC   0(L'LABEL_NAME,R1),LABEL_NAME\n         BAL   R9,SCAN0000                    FIND END OF NAME\n         ICM   R0,15,AREA_REF_DISP1           DISP FROM LABEL\n         BZ    GEN0090                        ZERO\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVI   0(R1),C'+'                     INSERT PLUS\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4\n         LA    R2,DXD_EDIT_WORD\n         BAL   R9,SCAN1000\n         MVC   1(4,R1),0(R2)                  COPY DISP\n         BAL   R9,SCAN0000\nGEN0090  DS    0H\n         MVC   DXD_X,1(R6)                    COPY 'R AND X'\n         NI    DXD_X,X'0F'                    LEAVE ONLY 'X'\n         SR    R3,R3\n         ICM   R3,1,DXD_X                     INDEX REGISTER\n         BZ    EXIT0000                       NONE (ZERO)\n         SLL   R3,1\n         MVI   0(R1),C'('                     INSERT OPEN PAREN\n         MVI   1(R1),C'R'                     INSERT OPEN PAREN\n         LA    R2,REGISTER_TABLE(R3)\n         MVC   2(2,R1),0(R2)                  COPY INDEX REGISTER\n         BAL   R9,SCAN0000                    FIND END\n         MVI   0(R1),C')'                     INSERT CLOSING PAREN\n         B     EXIT0000\n*--------------------------------------------------------------------*\n*        GENERATE \"DDD(X,R)                                          *\n*--------------------------------------------------------------------*\nGEN0100  DS    0H\n         SR    R0,R0\n         MVC   DXD_X,1(R6)                    COPY 'R AND X'\n         NI    DXD_X,X'0F'                    REMOVE R\n         MVC   DXD_BASE,2(R6)                 COPY BASE\n         IC    R0,DXD_BASE\n         SRL   R0,4                           SHIFT OUT DISP\n         STC   R0,DXD_BASE\n         MVC   DXD_DISP,2(R6)                 COPY BASE & DISP\n         NI    DXD_DISP,X'0F'                 LEAVE ONLY DISP\n         SR    R15,R15\n         ICM   R15,3,DXD_DISP                 DISP\n         BZ    GEN0110                        ZERO\n         CVD   R15,COMM_DWORD                 CONVERT TO DECIMAL\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT DISP\n         LA    R2,DXD_EDIT_WORD\n         BAL   R9,SCAN1000\n         MVC   0(4,R1),0(R2)\n         B     GEN0120\nGEN0110  DS    0H\n         MVI   0(R1),C'0'                     GENERATE A ZERO\nGEN0120  DS    0H\n         OC    DXD_X(2),DXD_X                 INDEX AND BASE ZERO?\n         BZ    EXIT0000                       YES\n         LA    R1,COMM_SOURCE_OPERANDS\n         BAL   R9,SCAN0000                    FIND BLANK\n         MVI   0(R1),C'('                     OPEN PAREN\n         LA    R1,1(,R1)\n         MVI   0(R1),C'R'\n         SR    R3,R3\n         ICM   R3,1,DXD_X                     INDEX REGISTER\n         BZ    GEN0130                        ZERO.. SKIP\n         SLL   R3,1                           MULTIPLY BY 2\n         LA    R2,REGISTER_TABLE(R3)          REGISTER NAME\n         MVC   1(2,R1),0(R2)                  COPY TO SOURCE\n         BAL   R9,SCAN0000                    FIND BLANK\nGEN0130  DS    0H\n         ICM   R3,1,DXD_BASE                  BASE REGISTER\n         BZ    GEN0140\n         MVI   0(R1),C','                     INSERT COMMA\n         MVI   1(R1),C'R'                     INSERT COMMA\n         SLL   R3,1                           MULTIPLY BY 2\n         LA    R2,REGISTER_TABLE(R3)          REGISTER NAME\n         MVC   2(2,R1),0(R2)                  COPY TO SOURCE\n         BAL   R9,SCAN0000                    FIND BLANK\nGEN0140  DS    0H\n         MVI   0(R1),C')'                     INSERT CLOSING PAREN\n         B     EXIT0000\n*--------------------------------------------------------------------*\n*        Find next blank                                             *\n*--------------------------------------------------------------------*\nSCAN0000 DS    0H\n         CLI   0(R1),C' '\n         BER   R9\n         LA    R1,1(,R1)\n         B     SCAN0000\n*--------------------------------------------------------------------*\n*        Find first non-zero                                         *\n*--------------------------------------------------------------------*\nSCAN1000 DS    0H\n         CLI   0(R2),C'0'\n         BNER  R9\n         LA    R2,1(,R2)\n         B     SCAN1000\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        RETURN CODE               ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START      DC   Q(DXDRX)\nEDIT_WORD      DC   X'F020202020202120'\n\nOP_BC          DC   CL6'BC'\n\nREGISTER_TABLE DS   0C\n               DC   CL2'0 '\n               DC   CL2'1 '\n               DC   CL2'2 '\n               DC   CL2'3 '\n               DC   CL2'4 '\n               DC   CL2'5 '\n               DC   CL2'6 '\n               DC   CL2'7 '\n               DC   CL2'8 '\n               DC   CL2'9 '\n               DC   CL2'10'\n               DC   CL2'11'\n               DC   CL2'12'\n               DC   CL2'13'\n               DC   CL2'14'\n               DC   CL2'15'\n\nCOND_ARITH     DS   0C\n               DC   X'00',CL6'NOP'\n               DC   X'10',CL6'BO'\n               DC   X'20',CL6'BP'\n               DC   X'40',CL6'BM'\n               DC   X'70',CL6'BNZ'\n               DC   X'80',CL6'BZ'\n               DC   X'B0',CL6'BNM'\n               DC   X'D0',CL6'BNP'\n               DC   X'E0',CL6'BNO'\n               DC   X'F0',CL6'B'\n               DC   X'FF'\n\nCOND_COMPARE   DS   0C\n               DC   X'00',CL6'NOP'\n               DC   X'20',CL6'BH'\n               DC   X'40',CL6'BL'\n               DC   X'70',CL6'BNE'\n               DC   X'80',CL6'BE'\n               DC   X'B0',CL6'BNL'\n               DC   X'D0',CL6'BNH'\n               DC   X'F0',CL6'B'\n               DC   X'FF'\n\nCOND_LOGICAL   DS   0C\n               DC   X'00',CL6'NOP'\n               DC   X'10',CL6'BO'\n               DC   X'40',CL6'BM'\n               DC   X'70',CL6'BNZ'\n               DC   X'80',CL6'BZ'\n               DC   X'B0',CL6'BNM'\n               DC   X'E0',CL6'BNO'\n               DC   X'F0',CL6'B'\n               DC   X'FF'\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDRX          DSECT\n               DS   18F\nDXD_CSECT      DS   CL8\nDXD_DISP       DS   XL2\nDXD_R          DS   X\nDXD_X          DS   X\nDXD_BASE       DS   X\nDXD_COND       DS   X\n\nDXD_EDIT_WORD  DS   XL8\nDXD_BLANKS     DS   CL8\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nCOND_DSECT     DSECT\nCOND_COND      DS   X\nCOND_MNEMONIC  DS   CL6\nCOND_DSECT_L   EQU  *-COND_DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               DISCOMM  TYPE=DSECT\n               COPY     DISASMDA\n\n               IFGACB   AM=VSAM\nACB_L          EQU      *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               COPY REGEQU\n               END  GENRX\n./ ADD NAME=GENSI    0101-09119-09198-0832-00185-00185-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: GENSI                                                *\n*                                                                    *\n*  Function:                                                         *\n*   Generate SI type instructions                                    *\n*                                                                    *\n*  At entry R8 is AREA address                                       *\n*           R6 is address of instruction                             *\n*           R5 is address of OPCODE entry                            *\n*                                                                    *\n*--------------------------------------------------------------------*\nGENSI    CSECT\nGENSI    AMODE 31\nGENSI    RMODE ANY\n         USING GENSI,R11\n         USING DISCOMM,R12\n         USING AREA_DSECT,R8\n         USING OPCODE_DSECT,R5\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'GENSI'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXDSI,R13\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R8,                                              +\n               DATA2=0(R6)\n         MVC   DXD_BLANKS,COMM_BLANKS\n         LA    R1,COMM_SOURCE_OPERANDS\n         ICM   R7,15,AREA_REF_LABEL1          LABEL REFERENCED?\n         USING LABEL_DSECT,R7\n         BZ    GEN0020                        NO\n*--------------------------------------------------------------------*\n*        Generate label and displacement                             *\n*--------------------------------------------------------------------*\n         MVC   0(L'LABEL_NAME,R1),LABEL_NAME\n         BAL   R9,SCAN0000                    FIND END OF NAME\n         ICM   R0,15,AREA_REF_DISP1           DISP FROM LABEL\n         BZ    GEN0010\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVI   0(R1),C'+'                     INSERT PLUS\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4\n         LA    R2,DXD_EDIT_WORD\n         BAL   R9,SCAN1000\n         MVC   1(4,R1),0(R2)                  COPY DISP\n         BAL   R9,SCAN0000\n         B     GEN0030\nGEN0010  DS    0H\n         BAL   R9,SCAN0000\n         B     GEN0030\n*--------------------------------------------------------------------*\n*        Generate disp from register                                 *\n*--------------------------------------------------------------------*\nGEN0020  DS    0H\n         MVC   DXD_WORK(2),2(R6)              COPY BASE AND DISP\n         NI    DXD_WORK,X'0F'                 REMOVE BASE\n         LH    R0,DXD_WORK                    DISP ONLY\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT DISP\n         LA    R2,DXD_EDIT_WORD\n         BAL   R9,SCAN1000\n         MVC   COMM_SOURCE_OPERANDS(4),0(R2)\n         LA    R1,COMM_SOURCE_OPERANDS\n         BAL   R9,SCAN0000\n         MVI   0(R1),C'('\n         MVI   1(R1),C'R'\n         SR    R2,R2\n         IC    R2,2(R6)                       BASE +\n         SRL   R2,4                           SHIFT OUT DISP\n         SLL   R2,1\n         LA    R2,REGISTER_TABLE(R2)\n         MVC   2(2,R1),0(R2)\n         BAL   R9,SCAN0000\n         MVI   0(R1),C')'\n         LA    R1,1(,R1)\n*--------------------------------------------------------------------*\n*        Generate immediate value                                    *\n*--------------------------------------------------------------------*\nGEN0030  DS    0H\n         CLI   OPCODE_FORMAT,$OPCODE_S        'S' FORMAT?\n         BE    EXIT0000                       YES..\n         MVI   0(R1),C','                     COMMAN\n         LA    R1,1(,R1)\n         LTR   R7,R7                          USING A LABEL?\n         BZ    GEN0050                        NO\n         ICM   R4,15,LABEL_EQU_NEXT           ANY EQU'S?\n         BZ    GEN0050                        NO\n         USING EQU_DSECT,R4\nGEN0040  DS    0H\n         CLC   EQU_VALUE,1(R6)                MATCH?\n         BE    GEN0060                        YES\n         ICM   R4,15,EQU_NEXT                 NEXT EQU\n         BNZ   GEN0040\nGEN0050  DS    0H\n         MVC   0(2,R1),=C'X'''\n         UNPK  2(3,R1),1(2,R6)                UNPACK IMMEDIATE VALUE\n         TR    2(2,R1),COMM_HEXCHAR\n         MVI   4(R1),C''''\n         B     EXIT0000\nGEN0060  DS    0H\n         MVC   0(63,R1),EQU_LABEL\n         B     EXIT0000\n*--------------------------------------------------------------------*\n*        Find next blank                                             *\n*--------------------------------------------------------------------*\nSCAN0000 DS    0H\n         CLI   0(R1),C' '\n         BER   R9\n         LA    R1,1(,R1)\n         B     SCAN0000\n*--------------------------------------------------------------------*\n*        Find first non-zero                                         *\n*--------------------------------------------------------------------*\nSCAN1000 DS    0H\n         CLI   0(R2),C'0'\n         BNER  R9\n         LA    R2,1(,R2)\n         B     SCAN1000\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        RETURN CODE               ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START      DC   Q(DXDSI)\nEDIT_WORD      DC   X'F020202020202120'\n\nREGISTER_TABLE DS   0C\n               DC   CL2'0 '\n               DC   CL2'1 '\n               DC   CL2'2 '\n               DC   CL2'3 '\n               DC   CL2'4 '\n               DC   CL2'5 '\n               DC   CL2'6 '\n               DC   CL2'7 '\n               DC   CL2'8 '\n               DC   CL2'9 '\n               DC   CL2'10'\n               DC   CL2'11'\n               DC   CL2'12'\n               DC   CL2'13'\n               DC   CL2'14'\n               DC   CL2'15'\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDSI          DSECT\n               DS   18F\nDXD_CSECT      DS   CL8\nDXD_WORK       DS   XL8\n\nDXD_EDIT_WORD  DS   XL8\nDXD_BLANKS     DS   CL8\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               DISCOMM  TYPE=DSECT\n               COPY     DISASMDA\n\n               IFGACB   AM=VSAM\nACB_L          EQU      *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               COPY REGEQU\n               END  GENSI\n./ ADD NAME=GENSS1   0109-07124-09198-0832-00228-00201-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: GENSS1                                               *\n*                                                                    *\n*  Function:                                                         *\n*   GENERATE SS TYPE INSTRUCTIONS (MVC, CLC, ...                     *\n*                                                                    *\n*  At entry R8 is AREA address                                       *\n*           R6 is address of instruction                             *\n*           R5 is address of OPCODE entry                            *\n*                                                                    *\n*--------------------------------------------------------------------*\nGENSS1   CSECT\nGENSS1   AMODE 31\nGENSS1   RMODE ANY\n         USING GENSS1,R11\n         USING DISCOMM,R12\n         USING AREA_DSECT,R8\n         USING OPCODE_DSECT,R5\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'GENSS1'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXDSS1,R13\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R8,                                              +\n               DATA2=0(R6)\n         MVC   DXD_BLANKS,COMM_BLANKS\n         MVC   DXD_LENGTH,1(R6)               COPY LENGTH\n         SR    R3,R3\n         IC    R3,2(R6)                       BASE 1 AND PART OF DISP 1\n         SRL   R3,4                           SHIFT OUT DISP\n         STC   R3,DXD_BASE1\n         MVC   DXD_DISP1,2(R6)                COPY BASE 1 AND DISP 1\n         NI    DXD_DISP1,X'0F'                REMOVE BASE 1\n         IC    R3,4(R6)                       BASE 2 AND PART OF DISP 2\n         SRL   R3,4                           SHIFT OUT DISP\n         STC   R3,DXD_BASE2                   SAVE BASE 2\n         MVC   DXD_DISP2,4(R6)                COPY BASE 2 AND DISP 2\n         NI    DXD_DISP2,X'0F'                REMOVE BASE 2\n         LA    R1,COMM_SOURCE_OPERANDS\n         ICM   R7,15,AREA_REF_LABEL1          LABEL FOR OPERAND 1?\n         BZ    GEN0020                        NO\n         USING LABEL_DSECT,R7\n*--------------------------------------------------------------------*\n*        GENERATE LABEL(LENGTH)                                      *\n*--------------------------------------------------------------------*\n         MVC   0(L'LABEL_NAME,R1),LABEL_NAME\n         BAL   R9,SCAN0000                    FIND END OF NAME\n         ICM   R4,15,AREA_REF_DISP1           DISP FROM LABEL\n         BZ    GEN0010\n         CVD   R4,COMM_DWORD                  CONVERT TO DECIMAL\n         MVI   0(R1),C'+'                     INSERT PLUS\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4\n         LA    R2,DXD_EDIT_WORD\n         BAL   R9,SCAN1000\n         MVC   1(4,R1),0(R2)                  COPY DISP\n         BAL   R9,SCAN0000\nGEN0010  DS    0H\n         MVI   0(R1),C'('                     OPEN PAREN\n         SR    R4,R4\n         IC    R4,DXD_LENGTH                  LENGTH\n         LA    R4,1(,R4)                      FULL LENGTH\n         CVD   R4,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH\n         LA    R2,DXD_EDIT_WORD\n         BAL   R9,SCAN1000                    FIND 1ST NON ZERO\n         MVC   1(3,R1),0(R2)                  COPY LENGTH\n         BAL   R9,SCAN0000\n         MVI   0(R1),C')'                     CLOSING PAREN\n         B     GEN0030\n*--------------------------------------------------------------------*\n*        GENERATE \"DDD(LL,BASE1)\"                                    *\n*--------------------------------------------------------------------*\nGEN0020  DS    0H\n         LH    R4,DXD_DISP1                   DISP 1\n         CVD   R4,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH\n         LA    R2,DXD_EDIT_WORD\n         BAL   R9,SCAN1000                    FIND 1ST NON BLANK\n         MVC   COMM_SOURCE_OPERANDS(3),0(R2)  COPY DISP\n         LA    R1,COMM_SOURCE_OPERANDS\n         BAL   R9,SCAN0000\n         MVI   0(R1),C'('                     OPEN PAREN\n         SR    R4,R4\n         IC    R4,DXD_LENGTH\n         LA    R4,1(,R4)                      FULL LENGTH\n         CVD   R4,COMM_DWORD\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH\n         LA    R2,DXD_EDIT_WORD\n         BAL   R9,SCAN1000                    FIND 1ST NON BLANK\n         MVC   1(3,R1),0(R2)                  COPY LENGTH\n         BAL   R9,SCAN0000                    FIND 1ST NON BLANK\n         MVI   0(R1),C','                     INSERT COMMA\n         MVI   1(R1),C'R'                     INSERT COMMA\n         IC    R3,DXD_BASE1\n         SLL   R3,1                           MULTIPLY BY 2\n         LA    R2,REGISTER_TABLE(R3)\n         MVC   2(2,R1),0(R2)                  COPY REGISTER\n         BAL   R9,SCAN0000\n         MVI   0(R1),C')'                     CLOSE PARM\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\nGEN0030  DS    0H\n         MVI   1(R1),C','\n         ICM   R7,15,AREA_REF_LABEL2          LABEL FOR OPERAND2?\n         BZ    GEN0040                        NO\n         MVC   2(63,R1),LABEL_NAME            COPY NAME\n         ICM   R4,15,AREA_REF_DISP2           DISP FROM LABEL?\n         BZ    EXIT0000                       NO\n         BAL   R9,SCAN0000\n         MVI   0(R1),C'+'                     PLUS\n         CVD   R4,COMM_DWORD\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH\n         LA    R2,DXD_EDIT_WORD\n         BAL   R9,SCAN1000                    FIND 1ST NON BLANK\n         MVC   1(4,R1),0(R2)                  COPY DISP\n         B     EXIT0000\nGEN0040  DS    0H\n         SR    R4,R4\n         ICM   R4,3,DXD_DISP2                 DISP 2\n         CVD   R4,COMM_DWORD\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH\n         LA    R2,DXD_EDIT_WORD\n         BAL   R9,SCAN1000                    FIND 1ST NON BLANK\n         MVC   2(4,R1),0(R2)\n         BAL   R9,SCAN0000                    FIND BLANK\n         MVI   0(R1),C'('\n         MVI   1(R1),C'R'\n         IC    R3,DXD_BASE2                   BASE 2\n         SLL   R3,1                           MULTIPLY BY 2\n         LA    R2,REGISTER_TABLE(R3)\n         MVC   2(2,R1),0(R2)                  COPY REGISTER\n         BAL   R9,SCAN0000\n         MVI   0(R1),C')'                     CLOSING PAREN\n         B     EXIT0000\n*--------------------------------------------------------------------*\n*        Find next blank                                             *\n*--------------------------------------------------------------------*\nSCAN0000 DS    0H\n         CLI   0(R1),C' '\n         BER   R9\n         LA    R1,1(,R1)\n         B     SCAN0000\n*--------------------------------------------------------------------*\n*        Find first non-zero                                         *\n*--------------------------------------------------------------------*\nSCAN1000 DS    0H\n         CLI   0(R2),C' '\n         BNER  R9\n         LA    R2,1(,R2)\n         B     SCAN1000\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        RETURN CODE               ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START      DC   Q(DXDSS1)\nEDIT_WORD      DC   X'4020202020202120'\n\nREGISTER_TABLE DS   0C\n               DC   CL2'0 '\n               DC   CL2'1 '\n               DC   CL2'2 '\n               DC   CL2'3 '\n               DC   CL2'4 '\n               DC   CL2'5 '\n               DC   CL2'6 '\n               DC   CL2'7 '\n               DC   CL2'8 '\n               DC   CL2'9 '\n               DC   CL2'10'\n               DC   CL2'11'\n               DC   CL2'12'\n               DC   CL2'13'\n               DC   CL2'14'\n               DC   CL2'15'\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDSS1         DSECT\n               DS   18F\nDXD_CSECT      DS   CL8\nDXD_DISP1      DS   H\nDXD_DISP2      DS   H\nDXD_BASE1      DS   X\nDXD_BASE2      DS   X\nDXD_LENGTH     DS   X\n\nDXD_EDIT_WORD  DS   XL8\nDXD_BLANKS     DS   CL8\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               DISCOMM  TYPE=DSECT\n               COPY     DISASMDA\n\n               IFGACB   AM=VSAM\nACB_L          EQU      *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               COPY REGEQU\n               END  GENSS1\n./ ADD NAME=GENSS2   0111-07127-09198-0833-00212-00201-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: GENSS2                                               *\n*                                                                    *\n*  Function:                                                         *\n*   Generate packed decimal (PACK, AP, ZAP, ...                      *\n*                                                                    *\n*  At entry R8 is AREA address                                       *\n*           R6 is address of instruction                             *\n*           R5 is address of OPCODE entry                            *\n*                                                                    *\n*--------------------------------------------------------------------*\nGENSS2   CSECT\nGENSS2   AMODE 31\nGENSS2   RMODE ANY\n         USING GENSS2,R11\n         USING DISCOMM,R12\n         USING AREA_DSECT,R8\n         USING OPCODE_DSECT,R5\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'GENSS2'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXDSS2,R13\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R8,                                              +\n               DATA2=0(R6)\n         MVC   DXD_BLANKS,COMM_BLANKS\n         LA    R1,COMM_SOURCE_OPERANDS\n         SR    R0,R0\n         IC    R0,1(R6)                       LENGTHS 1 AND 2\n         SRL   R0,4                           SHIFT OUT LENGTH 2\n         STC   R0,DXD_LENGTH                  SET LENGTH\n         IC    R0,2(R6)                       BASE 1 AND PART OF DISP 1\n         SRL   R0,4\n         STC   R0,DXD_BASE\n         MVC   DXD_DISP,2(R6)                 COPY BASE AND DDD 1\n         NI    DXD_DISP,X'0F'\n         MVC   DXD_LABEL,AREA_REF_LABEL1      ADDR OF LABEL 1\n         MVC   DXD_LABEL_DISP,AREA_REF_DISP1  DISP FROM LABEL 1\n         BAL   R4,GEN0010                     COPY LENGTH\n         MVI   0(R1),C','\n         LA    R1,1(,R1)\n         MVC   DXD_LENGTH,1(R6)               COPY LENGTHS 1 AND 2\n         NI    DXD_LENGTH,X'0F'               REMOVE LENGTH 1\n         SR    R0,R0\n         IC    R0,4(R6)\n         SRL   R0,4\n         STC   R0,DXD_BASE\n         MVC   DXD_DISP,4(R6)                 COPY BASE AND DDD 2\n         NI    DXD_DISP,X'0F'                 COPY BASE AND DDD 2\n         MVC   DXD_LABEL,AREA_REF_LABEL2      ADDR OF LABEL 2\n         MVC   DXD_LABEL_DISP,AREA_REF_DISP2  DISP FROM LABEL 1\n         BAL   R4,GEN0010\n         B     EXIT0000\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\nGEN0010  DS    0H\n         ICM   R7,15,DXD_LABEL                LABEL BLOCK ADDR\n         BNZ   GEN0020\n*--------------------------------------------------------------------*\n*        GENERATE \"DDD(LL,BASE)\"                                     *\n*--------------------------------------------------------------------*\n         LH    R15,DXD_DISP                   DISP\n         CVD   R15,COMM_DWORD                 CONVERT TO DECIMAL\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH\n         LA    R2,DXD_EDIT_WORD\n         BAL   R9,SCAN1000                    FIND 1ST NON BLANK\n         MVC   0(8,R1),0(R2)                  COPY DISP\n         BAL   R9,SCAN0000\n         MVI   0(R1),C'('                     OPEN PAREN\n         SR    R15,R15\n         IC    R15,DXD_LENGTH\n         LA    R15,1(,R15)                    FULL LENGTH\n         CVD   R15,COMM_DWORD\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH\n         LA    R2,DXD_EDIT_WORD\n         BAL   R9,SCAN1000                    FIND 1ST NON BLANK\n         MVC   1(3,R1),0(R2)                  COPY LENGTH\n         BAL   R9,SCAN0000                    FIND 1ST NON BLANK\n         MVI   0(R1),C','                     INSERT COMMA\n         MVI   1(R1),C'R'                     INSERT COMMA\n         SR    R15,R15\n         IC    R15,DXD_BASE\n         SLL   R15,1                          MULTIPLY BY 2\n         LA    R2,REGISTER_TABLE(R15)\n         MVC   2(2,R1),0(R2)                  COPY REGISTER\n         BAL   R9,SCAN0000\n         MVI   0(R1),C')'                     CLOSE PAREN\n         LA    R1,1(,R1)                      UPDATE ADDRESS\n         BR    R4\n*--------------------------------------------------------------------*\n*        GENERATE LABEL(LENGTH)                                      *\n*--------------------------------------------------------------------*\nGEN0020  DS    0H\n         USING LABEL_DSECT,R7\n         MVC   0(63,R1),LABEL_NAME            COPY LABEL NAME\n         BAL   R9,SCAN0000                    FIND 1ST BLANK\n         SR    R0,R0                          CLEAR R0\n         ICM   R0,3,DXD_LABEL_DISP            DISP FROM LABEL\n         BZ    GEN0030                        ZERO..\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH\n         LA    R2,DXD_EDIT_WORD\n         BAL   R9,SCAN1000                    FIND 1ST DIGIT\n         MVI   0(R1),C'+'                     INSERT PLUS\n         MVC   1(8,R1),0(R2)                  COPY DISP\n         BAL   R9,SCAN0000                    FIND 1ST BLANK\nGEN0030  DS    0H\n         MVI   0(R1),C'('                     INSERT OPEN PAREN\n         SR    R15,R15                        CLEAR R15\n         IC    R15,DXD_LENGTH                 LENGTH\n         LA    R15,1(,R15)                    TRUE LENGTH\n         CVD   R15,COMM_DWORD                 CONVERT TO DECIMAL\n         MVC   DXD_EDIT_WORD,EDIT_WORD\n         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH\n         LA    R2,DXD_EDIT_WORD               EDIT LENGTH\n         BAL   R9,SCAN1000                    FIND 1ST DIGIT\n         MVC   1(3,R1),0(R2)                  COPY LENGTH\n         BAL   R9,SCAN0000                    FIND 1ST BLANK\n         MVI   0(R1),C')'                     CLOSING PAREN\n         LA    R1,1(,R1)\n         BR    R4\n*--------------------------------------------------------------------*\n*        Find next blank                                             *\n*--------------------------------------------------------------------*\nSCAN0000 DS    0H\n         CLI   0(R1),C' '\n         BER   R9\n         LA    R1,1(,R1)\n         B     SCAN0000\n*--------------------------------------------------------------------*\n*        Find first non-zero                                         *\n*--------------------------------------------------------------------*\nSCAN1000 DS    0H\n         CLI   0(R2),C' '\n         BNER  R9\n         LA    R2,1(,R2)\n         B     SCAN1000\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        RETURN CODE               ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START      DC   Q(DXDSS2)\nEDIT_WORD      DC   X'4020202020202120'\n\nREGISTER_TABLE DS   0C\n               DC   CL2'0 '\n               DC   CL2'1 '\n               DC   CL2'2 '\n               DC   CL2'3 '\n               DC   CL2'4 '\n               DC   CL2'5 '\n               DC   CL2'6 '\n               DC   CL2'7 '\n               DC   CL2'8 '\n               DC   CL2'9 '\n               DC   CL2'10'\n               DC   CL2'11'\n               DC   CL2'12'\n               DC   CL2'13'\n               DC   CL2'14'\n               DC   CL2'15'\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDSS2         DSECT\n               DS   18F\nDXD_CSECT      DS   CL8\nDXD_LABEL      DS   A\nDXD_LENGTH     DS   X\nDXD_BASE       DS   X\nDXD_DISP       DS   XL2\nDXD_LABEL_DISP DS   XL2\n\nDXD_EDIT_WORD  DS   XL8\nDXD_BLANKS     DS   CL8\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               DISCOMM  TYPE=DSECT\n               COPY     DISASMDA\n\n               IFGACB   AM=VSAM\nACB_L          EQU      *-IFGACB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n               COPY REGEQU\n               END  GENSS2\n./ ADD NAME=SKEL     0103-07075-08352-0820-00060-00057-00000-SOURCE\n*--------------------------------------------------------------------*\n*                                                                    *\n*  Module name: DISGEN                                               *\n*                                                                    *\n*  Function:                                                         *\n*   Display the module text.                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\nDISGEN   CSECT\nDISGEN   AMODE 31\nDISGEN   RMODE ANY\n         USING DISGEN,R11\n         USING DISCOMM,R12\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R11,R15                        SET BASE REG\n         B     MOD0000                        SKIP EYECATCHER\nMODID    DC    CL8'DISGEN'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nMOD0000  DS    0H\n         L     R15,COMM_DXD_ADDRESS           WORK AREA\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(R15)\n         ST    R15,8(R13)\n         LR    R13,R15                        SET SAVE AREA ADDRESS\n         USING DXDTLIST,R13\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nERR0010  DS    0H\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)                     RESTORE REGISTER 13       ASE01670\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        RETURN CODE               ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXD_START     DC   Q(DXDTLIST)\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDXDTLIST          DSECT\n                  DS   18F\nDXD_CSECT         DS   CL8\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n                  DISCOMM  TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n                 COPY REGEQU\n                 END  DISGEN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT812/FILE812.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT812", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}