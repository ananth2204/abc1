{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011810000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 529074, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE340.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 529074, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 529074, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE340.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\t\\r'", "DS1TRBAL": "b'+n'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\x86\\x00\\n\\x02\\x87\\x00\\x04\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$ASM": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x98\\x17o\\x00\\x98\\x17\\x7f\\x07\\x12\\x00$\\x00#\\x00\\x00\\xd9\\xd6\\xd3\\xc1\\xd5\\xc4\\xe2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1998-06-25T00:00:00", "modifydate": "1998-06-26T07:12:00", "lines": 36, "newlines": 35, "modlines": 0, "user": "ROLANDS"}, "text": "//ROLANDSF JOB (ACCT#),FTP3,\n// NOTIFY=&SYSUID,REGION=4M,\n// CLASS=A,MSGCLASS=X\n//A   PROC M=\n//ASM EXEC PGM=ASMA90,REGION=7000K,\n//          PARM='OBJECT,XREF(SHORT),LINECOUNT(85),TEST'\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,1)\n//SYSUT2   DD  UNIT=VIO,SPACE=(CYL,1)\n//SYSUT3   DD  UNIT=VIO,SPACE=(CYL,1)\n//SYSLIB   DD  DISP=SHR,DSN=ROLANDS.DCMMY.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//         DD  DISP=SHR,DSN=SYS1.MACLIB\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&O,DISP=(,PASS),UNIT=VIO,SPACE=(CYL,1),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200)\n//SYSIN    DD  DISP=SHR,DSN=ROLANDS.DCMMY.SRC(&M)\n//*\n//LKED    EXEC PGM=IEWL,COND=(4,LT,ASM),REGION=4000K,\n//        PARM='XREF,LET,NCAL,LIST,RENT,REFR,REUS,TEST'\n//SYSLMOD  DD  DSN=ROLANDS.LOAD(&M),DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(CYL,1)\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//SYSLIN   DD  DSN=&&O,DISP=(OLD,DELETE)\n//    PEND\n//MAIN   EXEC A,M=DCMMAIN\n//INIT   EXEC A,M=DCMINIT\n//STATS  EXEC A,M=DCMSTATS\n//CMBG   EXEC A,M=DCMCMBG\n//INPUT  EXEC A,M=DCMINPUT\n//DSPLY  EXEC A,M=DCMDSPLY\n//SCRN   EXEC A,M=DCMSCRN\n//IOERR  EXEC A,M=DCMIOERR\n//CLEAR  EXEC A,M=DCMCLEAR\n//CONV   EXEC A,M=DCMCONVD\n//REPLAY EXEC A,M=REPLAYP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$LINK": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x98\\x17o\\x00\\x98\\x17o\\x15T\\x00\\x16\\x00\\x16\\x00\\x00\\xd9\\xd6\\xd3\\xc1\\xd5\\xc4\\xe2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1998-06-25T00:00:00", "modifydate": "1998-06-25T15:54:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "ROLANDS"}, "text": "//ROLANDSF JOB (ACCT#),FTP3,\n// NOTIFY=&SYSUID,REGION=4M,\n// CLASS=A,MSGCLASS=X\n//L       EXEC PGM=IEWL,REGION=4000K,\n//        PARM='XREF,LET,NCAL,LIST,RENT,REFR,REUS'\n//IN       DD  DSN=ROLANDS.LOAD,DISP=SHR\n//SYSLMOD  DD  DSN=ROLANDS.LOAD,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(CYL,1)\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//SYSLIN   DD  *\n   INCLUDE IN(DCMMAIN)\n   INCLUDE IN(DCMINIT)\n   INCLUDE IN(DCMCMBG)\n   INCLUDE IN(DCMSTATS)\n   INCLUDE IN(DCMINPUT)\n   INCLUDE IN(DCMDSPLY)\n   INCLUDE IN(DCMCONVD)\n   INCLUDE IN(DCMCLEAR)\n   INCLUDE IN(DCMIOERR)\n   INCLUDE IN(DCMSCRN)\n   ENTRY DCMMAIN\n   NAME DCM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$MACLIB": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x97\\x11\\x0f\\x00\\x98\\x17\\x7f\\x18\\x13\\x00\\x0b\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1997-04-20T00:00:00", "modifydate": "1998-06-26T18:13:00", "lines": 11, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "$README": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x98\\x17o\\x00\\x98\\x17\\x7f\\x18%\\x00\\x9a\\x00\\x8b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1998-06-25T00:00:00", "modifydate": "1998-06-26T18:25:00", "lines": 154, "newlines": 139, "modlines": 0, "user": "SBGOLOB"}, "text": "\nNote from Sam Golob:   To assemble, you have to run the job $MACLIB to\n    create the appropriate macro library.  This product was shipped\n    as two separate files:  userid.DCM080.SRC, and userid.DCM080.MACLIB.\n\n    I have put the MACLIB into modified IEBUPDTE format, so I could\n    combine them both on the CBT Tape as one file--File 340.\n\n    The PDSLOAD program from File 035 of the CBT Tape will preserve\n    ISPF Stats.  IEBUPDTE from IBM won't.  The stats were created from\n    the LISTPDS (LISPDS) program, also on File 035.  The OFFLOAD\n    program will also create the same stats in IEBUPDTE-like format.\n    Source for both OFFLOAD and PDSLOAD are on File 093.\n\n ---------------------------------------------------------------------\n\n\n                DCM - Dirt Cheap Monitor  V0.7\n\n\n7980-3 and compatible controllers keep a great deal of statistics.\nGetting them out is another story. If you have extra $$$, you can use\nAZTEC; if you are a masochist, you use IDCAMS. In order to learn how\nthe 7980-3 works, I wrote DCM. Here is a sample screen:\n\n\n\n\n\n                    Dirt Cheap Monitor V0.7                     May26  9:11:14\n Devices 0E00-0E3F   Ssid 0010          I/O rates measured from May26  9:10:59\n  Volume SYSLBB   DevAddr 0E08          SSCH rate   30.5/s\n   Paths 08 13 48 53                    Duplexed: Secondary dev E17\n Cache: Active           DFW: Active\n\n    I/O time(ms)    4.6   Pend    0.5   Disc    1.2   Conn    2.9\n      I/O   30.4/s     Reads   29.2/s    Writes    1.2/s   Short term I/O rate\n   Normal   30.4/s     Reads   29.2/s    Writes    1.2/s    Long term hit%\n     Seql    0.0/s     Reads    0.0/s    Writes    0.0/s         --Switches--\n      CFW    0.0/s     Reads    0.0/s    Writes    0.0/s         SD0: AB\n      DFW    1.2/s    Normal    1.2/s      Seql    0.0/s         SD1: AB\n   Bypass    0.0/s   Inhibit    0.0/s                            SD2: AB\n   Stages    2.1/s    Normal    2.1/s  Seql     0.0/s            SD3: AB\n DeStages    0.0/s  PreReads    0.0/s                      CU serial# 011717\nRead Hit%   94.9     Normal%   92.6    Seql%   99.9   Cache installed   65536K\n CFW Hit%    0.0       Read%    0.0  Writes%    0.0   Cache available   65136K\n DFW Hit%   99.0     Normal%   99.0    Seql%   78.3     NVS installed    4096K\nR/W ratio   33.5  Hits/Stage   14.2   Retry%    0.0       Pinned data       0K\n\n Enter: SR, LR, SH, LH, All, Onl, Auto, <dev-addr>, <volume> or End\n\n\nThis screen snapshot is from a running system. The statistics are for\none device although DCM can provide statistics for a string of devices\nor for all devices attached to a controller.\n\nThere are two sources of statistics for DCM: the control unit and the\nchannel subsystem. The pending, disconnect and connect times are\nprovided by the channel subsystem and are the same as reported by RMF.\nThese times are in milliseconds. The other times are calculated using\nthe counts maintained by the 7980-3. The interval is between the two\ntimes in the upper right hand corner. In general, the very first rate\non each line is the sum of the remaining rates on the line. The I/O\nrate is the sum of the normal rate, the sequential rate, the bypass\nrate and the inhibit rate.\n\nThe hit% are calculated from the counters maintained in the 7980-3.\nThe percentages on the very left of each line are the weighted\naverages of the remaining percentages on that line. It is possible to\nsee the long term view of the hits since the controller was IML'd or a\nshort term view since the last time that the ENTER key was pressed.\n\nThe Stages, Destages and Prereads fields are the number of these\noperations per second. The only statistics not maintained in the 7980-3\nare the R/W ratio and the Hits/Stages. R/W is calculated in a straight\nforward fashion and the Hits/Stages gives some measure of the caching\nefficiency.\n\nHere is a list of DCM commands:\n\n     AUTO      Repeat display 20 times with a 4 second interval\n     ALL       Summarize all devices on the control unit\n     <enter>   Refresh the screen with a new set of statistics\n     ONL       Run through all online devices on this control unit\n     Rnn       Repeat the display nn times with a 4 second interval\n     Wnn       Set wait value to nn seconds\n     n         Go to next device\n     p         Go to previous device\n     LR        Long term I/O rates\n     SR        Short term I/O rates\n     LH        Provide long term hit% (from the time that advanced\n               functions were enabled)\n     SH        Provide short term delta hit%\n     NOUP      Do not re-write history file\n     END       Ends DCM session. Q is an abbreviation.\n     QN        End DCM without updating the history file.\n\nA unit address or a volume name can be entered to provide statistics\nfor that device. A range of 16 devices can be summarized by providing\na generic address. In the sample screen, to get statistics for devices\nE10 to E1F, E1x could be entered on the prompt.\n\nInstalling DCM is very easy. Two files are provided in IEBUPDTE input\nformat.  Simply allocate a macro and a source PDS and run an IEBUPDTE\njob to build the PDS's. If you have forgotten IEBUPDTE, here is a some\nJCL that can be used:\n\n     //UPDTE   EXEC PGM=IEBUPDTE,PARM='NEW'\n     //SYSIN   DD DISP=SHR,DSN=<uploaded sequential file>\n     //SYSUT2  DD DISP=SHR,DSN=<pds macros or source>\n     //SYSPRINT DD SYSOUT=*\n\nThe members $ASM and $LINK in the source are used to build DCM. Note\nthat DCM is not authorized nor does it need to be.\n\nIn order to run DCM, create a 1 track dataset on any device attached\nto the control unit that you want to monitor.  This 1 track file is\nalso used to preserve some information after DCM ends.  Simply\nallocate this dataset to the ddname MONITOR and call DCM from TSO.  If\na file is allocated to the ddname CAPTURE, screen images are saved to\nthat file and can be subsequently printed by REPLAYP.\n\nDCM was developed on a MVS/ESA 3.1.3 system and has run on MVS/XA 2.2\nand MVS/ESA 4.3 systems.\n\nThis is the first version of DCM and as time permits, I will add more\nfeatures.  Your suggestions and comments are appreciated. Just call me\nat 403 424-2006 or send a Spire message to Alfred Nykolyn. I hope\nthat you find it useful.\n\nVersion 0.2 fixes an error in the way that UCBs are scanned and cleans\nup the error handling. It provides support for statistics by volume\nname.\n\nVersion 0.3 includes the status display of the enable/disable switches\nand provides the serial number of the control unit. If all switches\nare not displayed on a 7980-3, you need to install ucode 21-A0 or\n21-A8.\n\nVersion 0.4 adds support for 3990-3 non-synchronous controllers and\nhopefully ESCON controllers.\n\nVersion 0.5 adds support for screen captures and different update\nintervals.  This is useful in benchmark situations.\n\nVersion 0.6 provides support for dynamic UCB's. It probably will not\nwork with MVS/XA. Bernd Bauer pointed out an error in DCMMAIN in which\nall counts were zero.\n\nVersion 0.7 contains bug fixes for ESCON controller support which were\npointed out by Bernd Bauer.\n\nContact: Alfred Nykolyn\n         apn@istar.ca\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DCMCLEAR": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x17\\x7f\\x00\\x98\\x17\\x7f\\x11D\\x00\\x13\\x00\\x13\\x00\\x00\\xc4\\xc3\\xd4\\xf0\\xf8\\xf0@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-06-26T00:00:00", "modifydate": "1998-06-26T11:44:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "DCM080"}, "text": "DCMCLEAR CSECT\nDCMCLEAR AMODE 31\nDCMCLEAR RMODE 24\n         SAVE  (0,1)\n         USING DCMCLEAR,R15\n                                       SPACE\n         LA    R1,CLRSTRNG             R1 = ADDR\n         LA    R0,L'CLRSTRNG           R0 = LENGTH\n         O     R1,FULLSCRN             INDICATE FULLSCREEN\n         TPUT  (1),(0),R               CLEAR THE SCREEN\n                                       SPACE\n         RETURN (0,1)                  AND RETURN\n                                       SPACE\n         DS    0D\nFULLSCRN DC    X'13000000'\nCLRSTRNG DC    X'C3115D7F1140403C40400011404013'\n         SPACE 2\n         $REGS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCMCMBG": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x17\\x7f\\x00\\x98\\x17\\x7f\\x11D\\x007\\x007\\x00\\x00\\xc4\\xc3\\xd4\\xf0\\xf8\\xf0@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-06-26T00:00:00", "modifydate": "1998-06-26T11:44:00", "lines": 55, "newlines": 55, "modlines": 0, "user": "DCM080"}, "text": "DCMCMBG  CSECT\nDCMCMBG  AMODE 31\nDCMCMBG  RMODE 24\n         $BOX   HDR='DCMCMBG - ',TITLE='DSECTS'\n         $DAB\n         EJECT\n         $STATSD\n         EJECT\n         $UCMBS\n         $CMB\n         PRINT  NOGEN\n         $IOB\n         $CCW\n         $DCB\n         DCBD   DSORG=(XA,XE),DEVD=DA\n         PRINT  GEN\n         $BOX  'GATHER MEASUREMENT BLOCKS',                            *\n               TITLE='GATHER MEASUREMENT BLOCKS'\nDCMCMBG  CSECT\n         $MODID BR=YES\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         USING DCMCMBG,R12\n         USING DAB,R11\n         LR    R10,R1                  R10 -> output area\n         L     R9,D_UCMBS@             R9  -> UCMBS\n         USING UCMBS,R9\n         USING CMB,R8\n                                       SPACE\n         LA    R0,64                   At most 64 devices\n                                       SPACE\nNEXT_CMB EQU   *\n         ICM   R8,B'1111',U_CMB@       CMB ADDRESS\n         BZ    BUMP_CMB\n                                       SPACE\n         LD    F0,CMBSSCHC             Fetch\n         LD    F2,CMBPENDT               measurement block\n         STD   F0,CMBSSCHC-CMB(,R10)   And\n         STD   F2,CMBPENDT-CMB(,R10)     save\n                                       SPACE\nBUMP_CMB EQU   *\n         LA    R9,$UCMBLEN(,R9)\n         LA    R10,$CMBLEN(,R10)\n         BCT   R0,NEXT_CMB\n                                       SPACE\n         RETURN (14,12)\n                                       SPACE\n         $BOX  'CONSTANTS',TITLE='CONSTANTS'\n         DS    0D\nF0       EQU   0\nF2       EQU   2\n         PRINT GEN\n         SPACE 3\n         $REGS\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DCMCONVD": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x17\\x7f\\x00\\x98\\x17\\x7f\\x11D\\x00a\\x00a\\x00\\x00\\xc4\\xc3\\xd4\\xf0\\xf8\\xf0@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-06-26T00:00:00", "modifydate": "1998-06-26T11:44:00", "lines": 97, "newlines": 97, "modlines": 0, "user": "DCM080"}, "text": "DCMCONVD CSECT\nDCMCONVD AMODE 31\nDCMCONVD RMODE 24\n         $BOX   HDR='DCMCONVD - ',TITLE='DSECTS'\n         $DAB\n         EJECT\n         $STATSD\n         EJECT\n         PRINT  NOGEN\n         $IOB\n         $CCW\n         $DCB\n         PRINT  GEN\n         $BOX  'CONVERT TIME',                                         *\n               TITLE='CONVERT TIME AND DATE'\nDCMCONVD CSECT\n         $MODID BR=YES\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         USING DCMCONVD,R12\n         USING DAB,R11\n                                       SPACE\n*   R0 =  TIME  100'S SECS FROM MIDNIG HT\n*   R1 =  DATE  YYDDDF PACKED)\n                                       SPACE\n         LA    R10,100\n         LR    R9,R0\n         XR    R8,R8\n         LA    R7,60\n         DR    R8,R10                  R9 = SECONDS\n         XR    R8,R8\n         DR    R8,R7                   R8 = SS, R9 = MM\n         LR    R6,R8                   R6 = SS, R9 = MM\n         XR    R8,R8\n         DR    R8,R7                   R8 = MM, R9 = HH\n         LR    R5,R8                   R5 = MM\n         MR    R8,R10                  R9 = 100*HH\n         AR    R9,R5                   R9 = 100*HH + MM\n         MR    R8,R10                  R9 = 10000*HH + 100*MM\n         AR    R9,R6                   R9 = 10000*HH + 100*MM + SS\n         CVD   R9,WA\n         MVC   TIMEF(10),EDMASKT\n         ED    TIMEF(10),WA+4\n         CLI   TIMEF+3,C'0'\n         BNE   CONVDATE\n         OI    TIMEF+2,C'0'\n                                       SPACE\n         $BOX  'CONVERT DATE',CTL1=EJECT\n*  Algorithm from R Stone, Bell Labs\nCONVDATE EQU   *\n         ST    R1,WA\n         ZAP   WA2(8),WA+2(2)\n         CVB   R9,WA2                  R9 = DAY IN BINARY\n         LA    R8,59                   R8= DAYS IN JAN AND FEB NOLEAP\n         TM    WA+1,X'01'              LEAP YEAR?\n         BO    NO_LEAP                 BRANCH IF ODD YEAR\n         TM    WA+1,X'12'              IS YEAR DIVISIBLE BY 4?\n         BM    NO_LEAP                 BRANCH IF NOT\n         LA    R8,60                   R8 = DAYS IN JAN + FEB LEAP YR\nNO_LEAP  CR    R9,R8                   DATE IN JAN OR FEB?\n         BNH   JAN_FEB                 BRANCH IF YES\n         SR    R9,R8                   FORCE FEB TO HAVE 30 DAYS\n         LA    R9,61(,R9)\nJAN_FEB  LA    R9,91(,R9)              R9 = DAY + 91\n         LR    R10,R9                  R10= DAY + 91\n         LA    R2,100\n         LA    R3,3055\n         MR    R8,R2\n         DR    R8,R3                   R9= (DAY + 91)/30.55\n         LR    R7,R9\n         BCTR  R7,0\n         BCTR  R7,0                    R7= MONTH NUMBER\n         MR    R8,R3\n         DR    R8,R2\n         SR    R10,R9                  R10= DAY OF MONTH\n         CVD   R10,WA\n         MVC   DATEDF+1(4),EDMASKD\n         ED    DATEDF+1(4),WA+6\n         BCTR  R7,0                    R7= MONTH NUMBER - 1\n         LA    R6,0(R7,R7)             MULTIPLY\n         LA    R6,0(R6,R7)               BY 3\n         LA    R6,MONTHS(R6)\n         MVC   DATEDF(3),0(R6)         GET MONTH\n                                       SPACE\nDONE     EQU   *\n         RETURN (14,12)                AND RETURN\n                                       SPACE\n         $BOX  'CONSTANTS',TITLE='CONSTANTS'\n         DS    0D\nEDMASKT  DC    X'402021207A20207A2020'\nEDMASKD  DC    X'40212020'\n         DS    0D\nMONTHS   DC    C'JanFebMarAprMayJun'\n         DC    C'JulAugSepOctNovDec'\n         SPACE 3\n         $REGS\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DCMDSPLY": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x17\\x7f\\x00\\x98\\x17\\x7f\\x11D\\x00]\\x00]\\x00\\x00\\xc4\\xc3\\xd4\\xf0\\xf8\\xf0@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-06-26T00:00:00", "modifydate": "1998-06-26T11:44:00", "lines": 93, "newlines": 93, "modlines": 0, "user": "DCM080"}, "text": "DCMDSPLY CSECT\nDCMDSPLY AMODE 31\nDCMDSPLY RMODE 24\n         $BOX   HDR='DCMDSPLY - ',TITLE='DSECTS'\n         $DAB\n         EJECT\n         $STATSD\n         EJECT\n         PRINT  NOGEN\n         $IOB\n         $CCW\n         $OPEN\n         $DCB\n         $SCREEN\n         PRINT  GEN\n*  TPUT/TGET ---\n*    R0 - Length\n*    R1 - flags / buffer address\n*        1... ....  - TGET\n*        .xx. ....  - reserved\n*        ...1 ....  - nowait\n*        .... 1...  - hold\n*        .... .1..  - break\n*        .... ..00  - edit\n*        .... ..01  - asis\n*        .... ..10  - control\n*        .... ..11  - fullscr\n*\n* Return Codes --- TGET\n* 00  - all ok, R1 = input length\n* 04  - nowait and no input was available\n* 08  - attention interupt occured during TGET\n* 0c  - buffer not large enougth (next TGET will get next chunk)\n* 10  - invalid parms\n* 14  - terminal disconnected\n*              --- TPUT\n* 00  - all ok\n* 04  - nowait and no buffers available\n* 08  - attention interupt occured during TPUT\n* 0c  - TPUT with tjid refused by user\n* 10  - invalid parms\n* 14  - terminal disconnected\n*\n         $BOX  'INITIALIZATION',TITLE='INITIALIZATION'\n*\n*  DCMDSPLY really runs in 24 bit since PUT may be used.\n*\nDCMDSPLY CSECT\n         SAVE  (14,12),,*\n         LR    R12,R15\n         USING DCMDSPLY,R12\n         USING DAB,R11\n                                       SPACE\n         LA    R10,72(,R13)\n         ST    R13,4(,R10)\n         ST    R10,8(,R13)\n         LR    R13,R10\n                                       SPACE\n         L     R1,D_SCRN@\n         LR    R2,R1\n         USING SCREEN,R1\n                                       SPACE\n         MVC   SERRMSG,D_ERRMSG        MOVE ERROR MESSAGE\n         LA    R0,$SCRNLEN\n         OI    D_FLG1,$FSCRN\n         O     R1,TPUTFLG\n         TPUT  (1),(0),R\n                                       SPACE\n         LTR   R15,R15\n         BNZ   DONE\n                                       SPACE\n         TM    D_FLG1,$CAPTURE\n         BZ    DONE\n                                       SPACE\n         $AMODE 24\n                                       SPACE\n         PUT   CAPDCB,(R2)             SAVE SCREEN IMAGE\n                                       SPACE\n         XR    R15,R15\n                                       SPACE\nDONE     EQU   *\n         XC    D_ERRMSG(L'D_ERRMSG),D_ERRMSG\n         L     R13,4(,R13)\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BSM   0,R14                   R15 contains TPUT return code\n                                       SPACE\n         $BOX  'CONSTANTS',TITLE='CONSTANTS'\n         DS    0D\nTPUTFLG  DC    X'13000000'             TPUT FULLSCREEN + NOWAIT\n         SPACE 3\n         $REGS\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DCMINIT": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x17o\\x00\\x98\\x17o\\x162\\x02T\\x02T\\x00\\x00\\xd9\\xd6\\xd3\\xc1\\xd5\\xc4\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-06-25T00:00:00", "modifydate": "1998-06-25T16:32:00", "lines": 596, "newlines": 596, "modlines": 0, "user": "ROLANDS"}, "text": "DCMINIT  CSECT\nDCMINIT  AMODE 31\nDCMINIT  RMODE 24\n         $BOX   HDR='DCMINIT - ',TITLE='DSECTS'\n         $DAB\n         EJECT\n         $STATSD\n         EJECT\n         $SSRD\n         EJECT\n         $MONREC\n         $UCMBS\n         $CMB\n         EJECT\n         $IOB\n         EJECT\n         $CCW\n         EJECT\n         $LRD\n         EJECT\n         $SSSD\n         $RCDD\n         $SPSD\n         EJECT\n         $OPEN\n         PRINT  NOGEN\n         DCBD   DSORG=(XA,XE),DEVD=DA\n         IEZDEB\n$DEBNMT  EQU  DEBNMTRK-DEBDASD+DEBBASND-DEBBASIC\n$DEBSTH  EQU  DEBSTRHH-DEBDASD+DEBBASND-DEBBASIC\n$DEBENH  EQU  DEBENDHH-DEBDASD+DEBBASND-DEBBASIC\n$DEBSTC  EQU  DEBSTRCC-DEBDASD+DEBBASND-DEBBASIC\n$DEBENC  EQU  DEBENDCC-DEBDASD+DEBBASND-DEBBASIC\n$DEBUCB  EQU  DEBUCBAD-DEBDASD+DEBBASND-DEBBASIC\n         SPACE\nJFCB     DSECT\n         IEFJFCBN LIST=NO\n         $SCREEN\n         PRINT  GEN\n         $ERRCODE\n         $BOX  'INITIALIZATION',TITLE='INITIALIZATION'\nDCMINIT  CSECT\n         $MODID BR=YES\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         USING DCMINIT,R12\n         USING DAB,R11\n                                       SPACE\n         LA    R10,72(,R13)\n         ST    R13,4(,R10)             Chain\n         ST    R10,8(,R13)               those\n         LR    R13,R10                     saveareas\n                                       SPACE\n         $BOX  'BUILD DCM ANCHOR BLOCK',TITLE='DAB BUILD'\n         LA    R15,DABLEN(,R11)\n         L     R14,MRECLEN\n         ST    R15,D_NEW@              New subsystem status area\n                                       SPACE\n         AR    R15,R14\n         ST    R15,D_OLD@              Old subsystem status area\n                                       SPACE\n         AR    R15,R14\n         ST    R15,D_FILE@\n                                       SPACE\n         AR    R15,R14\n         ST    R15,D_UCMBS@            Save UCMB address\n                                       SPACE\n         LA    R14,$UCMBLEN\n         SLL   R14,6\n         AR    R15,R14\n         ST    R15,D_NMB@              Save new MB area\n                                       SPACE\n         LA    R15,64*$CMBLEN(,R15)\n         ST    R15,D_OMB@              Save old MB area\n                                       SPACE\n         LA    R15,64*$CMBLEN(,R15)\n         ST    R15,D_SCRN@             Save screen address\n                                       SPACE\n         L     R9,D_NEW@               Use subsys data area\n         USING JFCB,R9\n                                       SPACE\n         $BOX  'OPEN CAPTURE FILE',                                    *\n               TITLE='OPEN CAPTURE FIL E'\n         MVC   CAPDCB(CAPDCBL),MODELCAP   Move in model DCB\n         LA    R10,CAPDCB\n         USING IHADCB,R10\n                                       SPACE\n         LA    R0,D_JFCB@\n         ST    R10,D_OPN               Move model open list\n         MVI   D_OPN,$LAST\n         ST    R0,DCBEXLST\n         ST    R9,D_JFCB@\n         MVI   D_JFCB@,$JFCB+$LAST\n                                       SPACE\n         RDJFCB MF=(E,D_OPN)\n                                       SPACE\n         LTR   R15,R15                 Capture file present?\n         BNZ   OPEN_MONITOR            No..\n                                       SPACE\n         LA    R8,$SCRNLEN             R8 = record length\n         LR    R7,R8\n         SLL   R8,3                    R8 = blksize\n         STH   R7,JFCLRECL             Record length     (in jfcb)\n         STH   R8,JFCBLKSI             Save blksize      (in jfcb)\n         MVI   JFCRECFM,JFCFIX+JFCRFB  New record format - FB\n         MVI   JFCDSRG1,JFCORGPS       New dsorg=ps\n         OI    JFCBIND2,JFCMOD         Add to file end\n         OI    JFCBMASK+4,X'80'        Ensure jfcb re-written\n         MVI   D_OPN,$OUTPUT+$LAST     Open for output\n                                       SPACE\n         OPEN  MF=(E,D_OPN),TYPE=J\n                                       SPACE\n         TM    DCBOFLGS,DCBOFOPN       Open ok?\n         BZ    OPEN_MONITOR            No.\n                                       SPACE\n         OI    D_FLG1,$CAPTURE         Indicate capture log present\n         $BOX  'OPEN MONITOR FILE',                                    *\n               TITLE='OPEN MONITOR FIL E'\nOPEN_MONITOR   EQU *\n         MVC   MONDCB(MONDCBL),MODELMON   Move in model DCB\n         LA    R10,MONDCB\n         USING IHADCB,R10\n                                       SPACE\n         LA    R0,D_JFCB@\n         ST    R10,D_OPN               Move model open list\n         MVI   D_OPN,$LAST\n         ST    R0,DCBEXLST\n         ST    R9,D_JFCB@\n         MVI   D_JFCB@,$JFCB+$LAST\n                                       SPACE\n         RDJFCB MF=(E,D_OPN)\n                                       SPACE\n         L     R8,MRECLEN              R9 = record length\n                                       SPACE\n         STH   R8,JFCBLKSI             Save blksize      (in jfcb)\n         STH   R8,JFCLRECL             New record length (in jfcb)\n         STH   R8,DL1                  Save data length  (in ccw)\n         OI    JFCBMASK+4,X'80'        Ensure jfcb is re-written\n         MVI   JFCRECFM,JFCFIX         New record format - fixed\n         MVI   JFCDSRG1,JFCORGPS       New dsorg=ps\n         DROP  R9\n         LA    R7,IOBAREA\n         USING IOB,R7\n                                       SPACE\n         ST    R7,DCBIOBAD             Save iob addr in dcb\n         ST    R10,IOBDCB              Save dcb addr in iob\n         LA    R1,ECB\n         MVI   IOBFLAG1,$IOBCC+$IOBNRL\n         ST    R1,IOBECB\n                                       SPACE\n         MVI   D_OPN,$OUTIN+$LAST      Open for output/input\n                                       SPACE\n         OPEN  MF=(E,D_OPN),TYPE=J\n                                       SPACE\n         TM    DCBOFLGS,DCBOFOPN       Open ok?\n         BZ    ERR_OPN                 No..error\n                                       SPACE\n         XR    R14,R14\n         OI    D_FLG1,$OPENOK          Dcb open now\n                                       SPACE\n         ICM   R14,B'0111',DCBDEBAD+1  R14 -> deb\n         LA    R9,LRPARM\n         USING LRD,R9\n                                       SPACE\n         LH    R1,$DEBSTH(,R14)        R1 = track end..offset 0\n         LH    R2,$DEBSTC(,R14)        R2 = cyl start\n         L     R3,$DEBUCB(,R14)        R3 -> ucb\n         N     R3,M0FFF                Sanitize\n         STH   R1,LR_HH0               Save trk start address\n         STH   R1,LR_HH1               Save trk start address\n         STH   R1,HH1                  Save trk start address\n         STH   R2,LR_CC0               Save cyl start address\n         STH   R2,LR_CC1               Save cyl start address\n         STH   R2,CC1                  Save cyl start address\n         ST    R3,D_UCB@               Save ucb addr\n         MVI   RR1,X'01'               Save record number\n         MVI   LR_R,X'01'              Try for record 1\n         LH    R15,$UCBDEV(,R3)        R15 = ua\n         STCM  R2,B'0011',IOBCC        Save cyl start address\n         STCM  R1,B'0011',IOBHH        Save trk start address\n         MVI   IOBR,X'00'              Save record number\n         N     R15,MCU                 R15 = cu unit addr\n         ST    R15,D_CU\n         DROP  R10,R9,R7\n         $BOX  'BUILD UCB+CMB TABLE',                                  *\n               TITLE='BUILD UCB+CMB TABLE'\n         L     R9,$CVT\n         L     R8,$CVTOPCTP(,R9)       R8 -> RMCT\n         L     R15,RMCTC\n         CL    R15,0(,R8)\n         BNE   ERR_CTLB\n                                       SPACE\n         L     R8,$RMCTCMCT(,R8)       R8 -> CMCT\n         L     R15,CMCTC\n         CL    R15,0(,R8)\n         BNE   ERR_CTLB\n                                       SPACE\n         L     R8,$CMCTCMBV(,R8)       R8 -> CMB\n         L     R15,CMBC\n         CL    R15,0(,R8)\n         BNE   ERR_CTLB\n                                       SPACE\n         ST    R8,D_CMB@               Save cmb address\n         L     R2,D_CU                 R2 = first address possible\n         LA    R3,64                   R3 = max # devices\n         XR    R4,R4                   R4 = first address\n         XR    R5,R5                   R5 = last  address\n         L     R10,D_UCMBS@\n         USING UCMBS,R10\n                                       SPACE\n         L     R9,D_NEW@               R9 -> ucbscan workarea\n         XC    0(128,R9),0(R9)         Clear ucb workarea\n                                       SPACE\nNEXT_UCB EQU   *\n         LA    R8,U_UCB                R8 = ucb copy area\n         LA    R7,U_UCBPFX             R7 = ucb prefix copy area\n         STH   R2,U_DEV                Save device #\n         UCBSCAN COPY,WORKAREA=(R9),   Scan workarea                   *\n               UCBAREA=(R8),           UCB common copy                 *\n               UCBPAREA=(R7),          UCB prefix copy                 *\n               DEVN=U_DEV,             Device #                        *\n               DYNAMIC=YES,DEVCLASS=DASD,RANGE=ALL,MF=(E,U_PARM)\n                                       SPACE\n         LTR   R15,R15                 OK?\n         BNZ   BUMP_UCB                No..try next device\n                                       SPACE\n         LR    R5,R2                   Possible last device\n         LTR   R4,R4\n         BNZ   *+4+2\n         LR    R4,R2                   Definitely first device here\n         LA    R15,U_UCB               R15 -> ucb copy\n         LA    R0,$UCBMBI              MB index offset\n         L     R1,D_CMB@\n         ST    R15,U_UCB@              Save ucb address\n         SR    R15,R0                  R15 -> mb index\n         LH    R15,0(,R15)             R15 =  MB index\n         SLL   R15,5                    times 32\n         AR    R15,R1                  Add CMB start address\n         ST    R15,U_CMB@\n                                       SPACE\nBUMP_UCB EQU   *\n         LA    R2,1(,R2)               Next device #\n         LA    R10,$UCMBLEN(,R10)      Next slot\n         BCT   R3,NEXT_UCB\n                                       SPACE\nDONE_UCB EQU   *\n         LTR   R5,R5                   Found any ucb's?\n         BZ    ERR_UCBS                No, complain and leave\n                                       SPACE\n         ST    R4,D_DEVF               Save first used device\n         ST    R4,D_DEV\n         ST    R5,D_DEVL               Save last  used device\n         LR    R6,R5                   Last used device\n         L     R1,D_CU\n         SR    R6,R4                   #devices-1\n         SR    R4,R1                   Offset\n         LA    R6,1(,R6)               #devices\n         ST    R6,D_DEV#\n         ST    R4,D_DEVOFF\n         MVI   IN_FLGS,$ALL            Report on all devices\n         DROP  R10\n                                       SPACE\n         $BOX  'BUILD CCWS',TITLE='BUI LD CCWS'\nBUILDCCW EQU   *\n         MVC   P1CCW(PCCWLEN),PCCWS    Move pattern ccws\n         LA    R15,LRPARM\n         ST    R15,P1LR                Locate record\n         MVI   P1LR,$LR\n                                       SPACE\n         L     R15,D_FILE@             Read into file history table\n         ST    R15,P1RD                Read data\n         MVI   P1RD,$RD\n                                       SPACE\n         LA    R15,SSSAREA\n         ST    R15,P2SSS               Sense subsystem status\n         ST    R15,P2RDC\n         MVI   P2RDC,$RDC\n         MVI   P2SSS,$SNSSS\n                                       SPACE\n         LA    R15,SNIDAREA\n         ST    R15,P3SNSID             Sense id\n         MVI   P3SNSID,$SNSID\n                                       SPACE\n         L     R15,D_NEW@              Put rcd\n         ST    R15,P3RCD                  info here\n         MVI   P3RCD,$RCD\n                                       SPACE\n         LA    R15,LRPARM              Initialize locate record parms\n         USING LRD,R15\n                                       SPACE\n         MVI   LR_OP,$LR_CA+$LR_RD     Count area orient + read data\n         MVI   LR_COUNT,X'01'          Only 1 ccw\n         DROP  R15\n                                       SPACE\n         LA    R15,PSFPARM\n         ST    R15,P2PSF               Perform subsystem function\n         MVI   P2PSF,$PSF\n         LM    R0,R2,PPSFPARM\n         STM   R0,R2,PSFPARM           Initialize psf parms\n                                       SPACE\n         $BOX  'ISSUE SENSE ID AND REA D CONFIGURATION DATA'\n         LA    R14,IOBAREA             R14 ->  IOB\n         USING IOB,R14\n                                       SPACE\n         LA    R15,P3RCD               R15 -> RCD\n         XR    R0,R0\n         ST    R15,IOBCCW\n         ST    R0,ECB\n                                       SPACE\n         EXCP  IOBAREA                 Issue read\n                                       SPACE\n         L     R10,D_NEW@              R10 -> rcd info\n         USING RCD,R10\n                                       SPACE\n         L     R9,FF3990S              Get\n         L     R8,FF3990NS                magic words\n         L     R7,FF39906                   words\n                                       SPACE\n         WAIT  ECB=ECB                 Waitttttttttt\n                                       SPACE\n         DC    H'0'                    Roland\n         CL    R9,SNIDAREA             Af controller?\n         BE    MOVE_SER                Yes..\n                                       SPACE\n         CL    R8,SNIDAREA             Af controller?\n         BE    MOVE_SER                Yes..\n                                       SPACE\n         CL    R7,SNIDAREA             Af controller?\n         BNE   ERR_CU                  No...\n                                       SPACE\nMOVE_SER EQU   *\n         MVC   D_SERIAL,RCDSER24       Move CU serial#\n         DROP  R10\n                                       SPACE\n         $BOX  'GET SWITCH INFORMATION '\n         LA    R14,IOBAREA             R14 ->  IOB\n         USING IOB,R14\n                                       SPACE\n         LA    R15,P2PSF               R15 -> PSF CCW\n         ST    R10,P2RSD               R10 -> RSD info\n         XR    R0,R0\n         ST    R15,IOBCCW\n         MVI   P2RSD,$RSD\n         ST    R0,PSFPARM+4            Fetch storage path status\n         ST    R0,ECB\n                                       SPACE\n         EXCP  IOBAREA                 Get storage path info\n                                       SPACE\n         WAIT  ECB=ECB                 Waitttttttttt\n                                       SPACE\n         USING SPS,R10\n                                       SPACE\n         ICM   R15,B'1000',SPSSWCH0    Sp0 switches\n         ICM   R15,B'0100',SPSSWCH1    Sp1 switches\n         ICM   R15,B'0010',SPSSWCH2    Sp2 switches\n         ICM   R15,B'0001',SPSSWCH3    Sp3 switches\n         LA    R0,X'01FF'\n         ST    R15,D_SWITCH            Save switch status\n         ST    R0,PSFPARM+4            Restore psfparm\n         DROP  R10\n         $BOX  'GATHER MEASUREMENT BLO CKS',                           *\n               TITLE='GATHER MEASUREMENT BLOCKS'\n         L     R1,D_NMB@               Store them here\n         L     R15,ACMBG\n         BASR  R14,R15\n                                       SPACE\n         LA    R0,200\n         ST    R0,D_WAIT\n                                       SPACE\n         $BOX  'BUILD SCREEN IMAGE'\n         L     R14,D_SCRN@             R14 -> target\n         LA    R15,$SCRNLEN            R15 =  length\n         L     R2,ASCREEN              R2 ->  screen description\n         LA    R3,$SCRNLEN             R3 =   length\n         MVCL  R14,R2\n                                       SPACE\n         $BOX  'READ MONITOR FILE',                                    *\n               TITLE='READ MONITOR FILE'\n         LA    R14,IOBAREA             R14 ->  IOB\n         USING IOB,R14\n                                       SPACE\n         LA    R15,P1CCW               R15 -> CCWS\n         XR    R0,R0\n         ST    R15,IOBCCW\n         ST    R0,ECB\n                                       SPACE\n         EXCP  IOBAREA                 Issue read\n                                       SPACE\n         L     R10,D_FILE@\n         USING MONREC,R10\n                                       SPACE\n         WAIT  ECB=ECB                 Waitttttttttt\n                                       SPACE\n         TM    ECB,$IOOK               Completed ok?\n         BNO   CREAT_MON               No...\n                                       SPACE\n         L     R0,MON_ID               R0 = monitor record id\n         CL    R0,MON_IDC              Compare ok?\n         BNE   CREAT_MON\n                                       SPACE\n         L     R0,MRECLEN\n         CL    R0,MON_LEN              Compare ok?\n         BNE   CREAT_MON               Re-create if different\n                                       SPACE\n         ICM   R0,B'1111',MON_DTE\n         BZ    CREAT_MON\n                                       SPACE\n         LR    R14,R10                 R14 -> file area\n         L     R15,MRECLEN             R15 -> record length\n         L     R2,D_NEW@               R2  -> new area\n         LR    R3,R15                  R3  -> length\n         MVCL  R2,R14                  Move it\n                                       SPACE\n         L     R1,MON_DTE\n         L     R0,MON_TME\n         L     R15,ACONV\n         BASR  R14,R15\n                                       SPACE\nDONE     EQU  *\n         L     R13,4(,R13)\n         L     R15,D_ERROR\n         RETURN (14,12),RC=(15)\n                                       SPACE\n         $BOX  'CREATE MONITOR FILE',                                  *\n               TITLE='CREATE MONITOR FILE'\nCREAT_MON      EQU  *\n         LA    R14,IOBAREA             R14 ->  IOB\n         USING IOB,R14\n                                       SPACE\n         L     R10,D_NEW@\n         USING MONREC,R10\n                                       SPACE\n         LA    R15,P2PSF               R15 -> CCWS\n         LA    R9,MON_SSR              R9  -> SSR AREA\n         XR    R0,R0\n         ST    R9,P2RSD\n         MVI   P2RSD,$RSD\n         ST    R15,IOBCCW\n         ST    R0,ECB\n                                       SPACE\n         EXCP  IOBAREA                 Issue read\n                                       SPACE\n         TIME  BIN\n         STCK  MON_TOD\n         ST    R1,MON_DTE\n         ST    R0,MON_TME\n                                       SPACE\n         WAIT  ECB=ECB                 Waitttttttttt\n                                       SPACE\n         TM    ECB,$IOOK               Completed ok?\n         BNO   ERR_IO                  No..i/o error on psf\n                                       SPACE\n         LR    R14,R10                 R14 -> new  area\n         L     R15,MRECLEN             R15 -> record length\n         L     R2,D_FILE@              R2  -> new area\n         LR    R3,R15                  R3  -> length\n         MVCL  R2,R14                  Move it\n                                       SPACE\n         L     R1,MON_DTE\n         L     R0,MON_TME\n         L     R15,ACONV\n         BASR  R14,R15\n                                       SPACE\n         OI    IN_FLGS,$DELTA          Short term hits%\n         OI    D_FLG1,$NEWFILE         Indicate new monitor file\n         LA    R0,L'DELAYMSG\n         LA    R1,DELAYMSG\n         O     R1,TPUTFLG\n         TPUT  (1),(0),R\n                                       SPACE\n         STIMER WAIT,BINTVL=WAIT4      Wait 4 secs\n                                       SPACE\n         B     DONE                    And finished\n                                       SPACE\n         $BOX  'ERRORS',TITLE='ERRORS'\nERR_IO   EQU   *\n         L     R15,AIOERR\n         BASR  R14,R15\n                                       SPACE\n         B     DONE\n                                       SPACE\nERR_OPN  EQU   *\n         LA    R0,L'OPENERR\n         LA    R1,OPENERR\n         O     R1,TPUTFLG\n         TPUT  (1),(0),R\n                                       SPACE\n         LA    R0,$ERR_OPEN\n         ST    R0,D_ERROR\n         B     DONE\n                                       SPACE\nERR_CTLB EQU   *\n         LA    R0,L'CTLBERR\n         LA    R1,CTLBERR\n         O     R1,TPUTFLG\n         TPUT  (1),(0),R\n                                       SPACE\n         LA    R0,$ERR_CTLB\n         OI    D_FLG1,$TERMERR         Terminating error\n         ST    R0,D_ERROR\n         B     DONE\n                                       SPACE\nERR_UCBS EQU   *\n         LA    R0,L'UCBERR\n         LA    R1,UCBERR\n         O     R1,TPUTFLG\n         TPUT  (1),(0),R\n                                       SPACE\n         LA    R0,$ERR_CTLB\n         OI    D_FLG1,$TERMERR         Terminating error\n         ST    R0,D_ERROR\n         B     DONE\n                                       SPACE\nERR_CU   EQU   *\n         LA    R0,CUERRLEN\n         LA    R1,CUERR\n         O     R1,TPUTFLG\n         TPUT  (1),(0),R\n                                       SPACE\n         LA    R0,$ERR_CU\n         OI    D_FLG1,$TERMERR         Terminating error\n         ST    R0,D_ERROR\n         B     DONE\n                                       SPACE\n         $BOX  'CONSTANTS',TITLE='CONSTANTS'\n         DS    0D\n$SRECLEN EQU   64*96                   64 devices; 96 bytes/entry\n$MRECLEN EQU   $MONHDLN+$SRECLEN\nSRECLEN  DC    A($SRECLEN)\nMRECLEN  DC    A($MRECLEN)\nWAIT4    DC    F'400'\n                                       SPACE\n$CVT      EQU   16\n$CVTUCBA  EQU   X'4E4'\n$CVTOPCTP EQU   X'25C'\n$RMCTCMCT EQU   X'118'\n$CMCTCMBV EQU   X'14'\n$UCBDEV   EQU   4\n$UCBNX    EQU   8\n$UCBTYP   EQU   18\n$UCBVOLI  EQU   28\n$UCBCHPS  EQU   24\n$UCBMBI   EQU   30\n$UCBLPM   EQU   28\n$DASD     EQU   X'20'\n                                       SPACE\nAIOERR   DC    V(DCMIOERR)\nASCREEN  DC    V(DCMSCRN)\nACONV    DC    V(DCMCONVD)\nACMBG    DC    V(DCMCMBG)\nMCU      DC    X'0000FFC0'             Cu mask\nM0FFF    DC    X'00FFFFFF'             Clear hi-order byte\nTPUTFLG  DC    X'10000000'             Tput nowait\nRMCTC    DC    CL4'RMCT'\nCMCTC    DC    CL4'CMCT'\nCMBC     DC    CL4'CMB '\nMON_IDC  DC    CL4'*DCM'\nFF3990S  DC    XL4'FF3990CC'           3990-3 Sync CU\nFF3990NS DC    XL4'FF3990EC'           3990-3 Non Sync CU\nFF39906  DC    XL4'FF3990E9'           3990-6 Non Sync CU\n         PRINT NOGEN\nMODELMON DCB   DSORG=PS,MACRF=E,DEVD=DA,                               *\n               DDNAME=MONITOR,IOBAD=*-*,EXLST=*-*\nMONDCBL  EQU   *-MODELMON\nMODELCAP DCB   DSORG=PS,MACRF=PM,DEVD=DA,RECFM=FB,LRECL=$SCRNLEN,      *\n               DDNAME=CAPTURE,EXLST=*-*,BLKSIZE=8*$SCRNLEN\nCAPDCBL  EQU   *-MODELCAP\nDCBLEN   EQU   *-MODELCAP\nPCCWS    DS    0D\n         CCW   $LR,*-*,$CC,16          LOCATE RECORD\n         CCW   $RD,*-*,$SLI,$MRECLEN   READ/WRITE DATA\n         CCW   $WCKD,*-*,0,$MRECLEN    WRITE COUNT KEY DATA (DATA )\n         CCW   $WCKD,*-*,$DC,8         WRITE COUNT KEY DATA (COUNT)\n*\n         CCW   $PSF,*-*,$CC,12         PERFORM SUBSYSTEM FUNCTION\n         CCW   $RSD,*-*,$SLI,$SRECLEN  READ SUBSYSTEM DATA\n         CCW   $RDC,*-*,$CC+$SKIP,64   READ DEVICE CHARACTERISTICs\n         CCW   $SNSSS,*-*,0,40         SENSE SUBSYSTEM STATUS\n*\n         CCW   $RCD,*-*,$CC+$SLI,256   READ CONFIGURATION DATA\n         CCW   $SNSID,*-*,0,12         SENSE ID\nPCCWLEN  EQU   *-PCCWS\nPPSFPARM DC    X'18000000'\n         DC    X'000001FF'\n         DC    X'00000000'             Byte8 =x'00' -> 96 bytes stats\nOPENERR  DC    C'Could not open MONITOR file'\nCTLBERR  DC    C'Control block error. Contact Alfred (403) 424-2006'\nUCBERR   DC    C'Could not find UCBs. Contact Alfred (403) 424-2006'\nCUERR    DC    C'Sorry...DCM only works on 7980-3 or contemtible '\n         DC    C'control units'\nCUERRLEN EQU   *-CUERR\nDELAYMSG DC    C'Relax, DCM collecting statistics'\n         PRINT GEN\n         SPACE 3\n         $REGS\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DCMINPUT": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x17o\\x00\\x98\\x17o\\x17F\\x01\\xb3\\x01\\xb3\\x00\\x00\\xe7\\xe2\\xe2\\xc7\\xe2\\xc3\\xc8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-06-25T00:00:00", "modifydate": "1998-06-25T17:46:00", "lines": 435, "newlines": 435, "modlines": 0, "user": "XSSGSCH"}, "text": "DCMINPUT CSECT\nDCMINPUT AMODE 31\nDCMINPUT RMODE 24\n         $BOX   HDR='DCMINPUT - ',TITLE='DSECTS'\n         $DAB\n         EJECT\n         $STATSD\n         EJECT\n         $UCMBS\n         PRINT  NOGEN\n         $IOB\n         $CCW\n         $DCB\n         PRINT  GEN\n         $ERRCODE\n         EJECT\n*\n*  3270 Write Sequence ---\n*    Local  - WCC, (SBA, CUR1, CUR2, SF, ATTR, DATA)\n*             (ALWAYS USE LOCAL SEQUENCE FROM TSO)\n*    Remote - ESC, CMD, WCC, (SBA, CUR1, CUR2, SF, ATTR, DATA)\n*\n*  ESC - X'27'\n*  CMD - X'F1' - Write (default)        (CCW X'01')\n*        X'F5' - Erase/Write            (CCW X'05')\n*  WCC - X... ....  - set to make a valid character\n*        .1.. ....  - always one\n*        ..XX ....  - printout format\n*        .... 1...  - start printer\n*        .... .1..  - sound alarm\n*        .... ..1.  - keyboard restore (reset inout inhibited and AID)\n*        .... ...1  - reset MDT bits\n* SBA - X'11' - Set Buffer Address\n* Attribute charaacter --\n*        X... ....  - set to make a valid character\n*        .1.. ....  - always one\n*        ..1. ....  - protected\n*        ..11 ....  - auto skip (protected numeric)\n*        ...1 ....  - numeric\n*        .... 00..  - display/not selector-pen detectable\n*        .... 01..  - display/selector-pen detectable\n*        .... 10..  - intensified display/selector-pen detect.\n*        .... 11..  - nondisplay,nonprint,nondetect.\n*        .... ..0.  - reserved must be 0\n*        .... ...M  - 1 = field modified/0 = not modified\n*\n* AID codes: x'60' - unsolicited read   (read modified)\n*            x'E8' - printer            (read modified)\n*            x'7d' - enter key          (read modified)\n*   x'F1' to x'F9' - pf1 to pf9         (read modified)\n*            x'7A' - pf10               (read modified)\n*            x'7B' - pf11               (read modified)\n*            x'7C' - pf12               (read modified)\n*            x'E6' - oper id card rdr   (read modified)\n*            x'7E' - selector-pen       (read modified)\n*            x'6C' - pa1                (short read) (tso attn)\n*            x'6E' - pa2 (cncl)         (short read)\n*            x'6B' - pa3                (short read)\n*            x'6D' - clear key          (short read)\n* (no AID)   x'F0' - test req           (test request read) x'016c6102'\n*                                       followed by data (no aid,cur)\n*\n*  TPUT/TGET ---\n*    R0 - Length\n*    R1 - flags / buffer address\n*        1... ....  - TGET\n*        .xx. ....  - reserved\n*        ...1 ....  - nowait\n*        .... 1...  - hold\n*        .... .1..  - break\n*        .... ..00  - edit\n*        .... ..01  - asis\n*        .... ..10  - control\n*        .... ..11  - fullscr\n*\n* Return Codes --- TGET\n* 00  - all ok, R1 = input length\n* 04  - nowait and no input was available\n* 08  - attention interupt occured during TGET\n* 0c  - buffer not large enougth (next TGET will get next chunk)\n* 10  - invalid parms\n* 14  - terminal disconnected\n*              --- TPUT\n* 00  - all ok\n* 04  - nowait and no buffers available\n* 08  - attention interupt occured during TPUT\n* 0c  - TPUT with tjid refused by user\n* 10  - invalid parms\n* 14  - terminal disconnected\n*\n         $BOX  'INITIALIZATION',TITLE='INITIALIZATION'\nDCMINPUT CSECT\n         $MODID BR=YES\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         USING DCMINPUT,R12\n         USING DAB,R11\n                                       SPACE\n         LA    R10,72(,R13)\n         ST    R13,4(,R10)\n         ST    R10,8(,R13)\n         LR    R13,R10\n                                       SPACE\n         XC    D_INPUT(L'D_INPUT),D_INPUT  CLEAR INPUT AREA\n         LA    R1,D_INPUT              R1 -> INPUT AREA\n         LA    R0,L'D_INPUT            R0 =  LENGTH\n         O     R1,TGETFLG              INDICATE TGET + EDIT\n                                       SPACE\n         TGET  (1),(0),R\n                                       SPACE\n         LTR   R15,R15                 EVERYTHING OK?\n         BNZ   BAD_TGET                No..show TGET error\n                                       SPACE\n         LTR   R10,R1                  R1 = LENGTH\n         BZ    DONE\n                                       SPACE\n         BCTR  R10,0                   Length - 1\n         LA    R8,D_INPUT\n         LA    R9,D_INPUT(R10)         LAST CHARACTER\n         LA    R0,L'D_INPUT\n                                       SPACE\nSCAN_BLANK     EQU *\n         CLI   0(R8),C' '              SCAN OFF BLANKS\n         BNE   SEARCH_LAST\n         LA    R8,1(,R8)\n         BCT   R0,SCAN_BLANK\n                                       SPACE\n         B     DONE                    IF ALL BLANKS, FINISHED\n                                       SPACE\nSEARCH_LAST    EQU *\n         CLI   0(R9),C' '              BLANK\n         BNE   FOUND_LAST\n         BCTR  R9,0                    DECREMENT\n         CR    R9,R8\n         BH    SEARCH_LAST             AND CONTINUE\n                                       SPACE\nFOUND_LAST     EQU *\n         NI    IN_FLGS,255-$GENERIC-$AUTO-$RUN\n         LA    R0,5                    LENGTH-1 VOLSER\n         LR    R7,R9                   R7 -> LAST CHARACTER\n         SR    R9,R8                   NEW LENGTH, LESS 1\n         EX    R9,UPCASE               UPPER CASE\n         CR    R9,R0                   6 CHARS -> POSSIBLE VOLSER\n         BE    DO_VOLUME               YES..PROCESS VOLUME\n                                       SPACE\n         LA    R2,KEYWORDS             POINT AT KEYWORDS\n                                       SPACE\nTABLKUP        EQU *\n         LH    R15,4(,R2)              GET LENGTH\n         BCTR  R15,0                   REDUCE FOR EXECUTE\n         EX    R15,KEYCLC              COMPARE.. CLC 0(*-*,R8),0(R2)\n         BE    FOUND_KEYWD             YES...FOUND A KEYWORD\n                                       SPACE\n         LA    R2,8(,R2)               NEXT KEYWORD\n         CLI   0(R2),X'FF'             AT END?\n         BNE   TABLKUP                 AND CONTINUE\n                                       SPACE\n         XR    R15,R15\n         CLI   0(R7),C'X'              DEVICE RANGE?\n         BNE   ONE_DEV\n                                       SPACE\n         OI    IN_FLGS,$GENERIC\n         MVI   0(R7),C'0'\n                                       SPACE\nONE_DEV  EQU   *\n         EX    R9,TESTIT               TEST FOR VALID CHARS\n         BNZ   BAD_CHARS\n                                       SPACE\n         TR    D_INPUT,TRTAB\n         EX    R9,PACKIT               PACK INTO WA\n         L     R9,WA+4\n         SRL   R9,4                    R9 = ENTERED DEV ADDR\n         L     R6,D_CU                 R6 = CU BASE ADDR\n         L     R7,D_DEVF               R7 = FIRST USED DEVICE\n         L     R8,D_DEVL               R8 = LAST  USED DEVICE\n         CR    R9,R7\n         BL    BAD_DEV\n         CR    R9,R8\n         BH    BAD_DEV\n                                       SPACE\n         ST    R9,D_DEV\n         SR    R9,R6\n         ST    R9,D_DEVOFF\n         LA    R8,1\n         TM    IN_FLGS,$GENERIC\n         BZ    *+4+4\n         LA    R8,16\n         ST    R8,D_DEV#\n         NI    IN_FLGS,255-$ALL        CLEAR ALL FLAG\n                                       SPACE\nDONE     EQU   *\n         L     R13,4(,R13)\n         RETURN (14,12),RC=(15)        AND RETURN\n                                       SPACE\n         $BOX  'KEYWORD ACTIONS',TITLE='KEYWORD ACTIONS'\nFOUND_KEYWD    EQU *\n         XR    R15,R15\n         LH    R14,4+2(,R2)            GET OFFSET\n         B     DCMINPUT(R14)           JUNP TO ROUTINE\n                                       SPACE\nDO_END   EQU   *\n         OI    IN_FLGS,$FINI           INDICATE FINISHED\n         B     DONE\n                                       SPACE\nDO_ENDNU EQU   *\n         OI    IN_FLGS,$FINI+$NOUPD    INDICATE FINISHED+ NO UPDATE\n         B     DONE\n                                       SPACE\nUPDATE_ON      EQU *\n         NI    IN_FLGS,255-$NOUPD      UPDATE HISTORY FILE\n         B     DONE\n                                       SPACE\nUPDATE_OFF     EQU *\n         OI    IN_FLGS,$NOUPD          DO NOT UPDATE HISTORY FILE\n         B     DONE\n                                       SPACE\nDELTAP_ON      EQU *\n         OI    IN_FLGS,$DELTA          SHORT TERM %\n         B     DONE\n                                       SPACE\nDELTAP_OFF     EQU *\n         NI    IN_FLGS,255-$DELTA      LONG TERM %\n         B     DONE\n                                       SPACE\nDELTAR_OFF     EQU *\n         OI    IN_FLGS,$HIST           LONG TERM RATES\n         B     DONE\n                                       SPACE\nDELTAR_ON      EQU *\n         NI    IN_FLGS,255-$HIST       SHORT TERM RATES\n         B     DONE\n                                       SPACE\nDO_ALL   EQU   *\n         L     R9,D_DEVF\n         L     R8,D_DEVL\n         L     R7,D_CU\n         ST    R9,D_DEV\n         SR    R8,R9\n         LA    R8,1(,R8)\n         SR    R9,R7\n         ST    R8,D_DEV#\n         ST    R9,D_DEVOFF\n         OI    IN_FLGS,$ALL            INDICATE ALL\n         B     DONE\n                                       SPACE\nDO_NEXT  EQU   *\n         LA    R8,1\n         L     R9,D_DEV\n         C     R8,D_DEV#\n         BE    SET_OFFN\n                                       SPACE\n         BCTR  R9,0\nSET_OFFN LA    R9,1(,R9)\n         C     R9,D_DEVL\n         BNH   *+4+4\n         L     R9,D_DEVF\n         ST    R9,D_DEV\n         ST    R8,D_DEV#\n         S     R9,D_CU\n         ST    R9,D_DEVOFF\n         NI    IN_FLGS,255-$ALL        CLEAR ALL FLAG\n         B     DONE\n                                       SPACE\nDO_PREV  EQU   *\n         LA    R8,1\n         L     R9,D_DEV\n         C     R8,D_DEV#\n         BE    SET_OFFP\n                                       SPACE\n         A     R9,D_DEV#\nSET_OFFP BCTR  R9,0\n         C     R9,D_DEVF\n         BNL   *+4+4\n         L     R9,D_DEVL\n         ST    R9,D_DEV\n         ST    R8,D_DEV#\n         S     R9,D_CU\n         ST    R9,D_DEVOFF\n         NI    IN_FLGS,255-$ALL        CLEAR ALL FLAG\n         B     DONE\n                                       SPACE\nDO_RUN   EQU   *\n         L     R9,D_DEVF\n         LA    R8,1\n         ST    R9,D_DEV\n         ST    R8,D_DEV#\n         S     R9,D_CU\n         ST    R9,D_DEVOFF\n         OI    IN_FLGS,$RUN            INDICATE RUN\n         NI    IN_FLGS,255-$ALL        CLEAR ALL FLAG\n         B     DONE\n                                       SPACE\nDO_AUTO  EQU   *\n         LA    R7,20                   20 TIMES SHOULD BE ENUFF\n         ST    R7,D_REPCNT\n         ST    R7,D_REPREM\n         OI    IN_FLGS,$AUTO           INDICATE AUTO UPDATE\n         B     DONE\n                                       SPACE\nDO_REPEAT      EQU *\n         MVI   0(R8),C'0'\n         MVC   WA2,ZEROS\n         EX    R9,VALMVN               MOVE IN NUMERICS\n         EX    R9,VALCLC               ALL NUMERIC?\n         BNE   BAD_CHARS\n                                       SPACE\n         EX    R9,PACKIT               PACK INTO WA\n         CVB   R8,WA\n         LA    R7,5\n         LTR   R8,R8\n         BZ    *+4+2\n         LR    R7,R8\n         ST    R7,D_REPCNT\n         ST    R7,D_REPREM\n         OI    IN_FLGS,$AUTO           INDICATE AUTO UPDATE\n         B     DONE\n                                       SPACE\nDO_WAIT        EQU *\n         MVI   0(R8),C'0'\n         MVC   WA2,ZEROS\n         EX    R9,VALMVN               MOVE IN NUMERICS\n         EX    R9,VALCLC               ALL NUMERIC?\n         BNE   BAD_CHARS\n                                       SPACE\n         EX    R9,PACKIT               PACK INTO WA\n         CVB   R8,WA\n         LTR   R7,R8\n         BZ    DONE\n                                       SPACE\n         LA    R0,100\n         MR    R6,R0\n         ST    R7,D_WAIT\n         B     DONE\n                                       SPACE\nDO_VOLUME      EQU *\n         L     R10,D_UCMBS@\n         USING UCMBS,R10\n         LA    R0,64                   Max 64 devices\n                                       SPACE\nNEXT_UCB       EQU *\n         ICM   R9,B'1111',U_UCB@       Point at UCB\n         BZ    BUMP_UCB\n                                       SPACE\n         CLC   $UCBVOLI(6,R9),D_INPUT  Compare volser's\n         BE    FOUND_UCB\n                                       SPACE\nBUMP_UCB       EQU *\n         LA    R10,$UCMBLEN(,R10)      Next UCB entry\n         BCT   R0,NEXT_UCB\n                                       SPACE\n         MVC   D_ERRMSG(L'VOLMSG),VOLMSG     Move prototype emsg\n         MVC   D_ERRMSG+L'VOLMSG(6),D_INPUT  Move volume\n         LA    R15,$ERR_VOL\n         B     DONE\n                                       SPACE\nFOUND_UCB      EQU *\n*        LH    R8,$UCBDEV(,R9)         R8 = device addr\n         XR    R8,R8                        Roland Schiradin\n         ICM   R8,B'0011',4(R9)             Roland Schiradin\n         LA    R7,1                    Only one device\n         ST    R8,D_DEV\n         ST    R7,D_DEV#\n         S     R8,D_CU                 R8 = device offset\n         NI    IN_FLGS,255-$ALL        Clear $ALL flag\n         ST    R8,D_DEVOFF\n         B     DONE\n                                       SPACE\nBAD_CHARS      EQU *\n         MVC   D_ERRMSG(L'BADCMSG),BADCMSG\n         LA    R15,$ERR_CHARS\n         B     DONE\n                                       SPACE\nBAD_DEV        EQU *\n         MVC   D_ERRMSG(L'BADDMSG),BADDMSG\n         LA    R15,$ERR_CHARS\n         B     DONE\n                                       SPACE\nBAD_TGET       EQU *\n         LA    R15,100(,R15)           Show TGET error\n         B     DONE\n                                       SPACE\n         $BOX  'KEYWORDS',TITLE='KEYWORDS'\n         DS    0D\nKEYWORDS EQU   *\n         DC    CL4'SH  ',AL2(2),AL2(DELTAP_ON-DCMINPUT)\n         DC    CL4'SR  ',AL2(2),AL2(DELTAR_ON-DCMINPUT)\n         DC    CL4'LR  ',AL2(2),AL2(DELTAR_OFF-DCMINPUT)\n         DC    CL4'LH  ',AL2(2),AL2(DELTAP_OFF-DCMINPUT)\n         DC    CL4'ALL ',AL2(3),AL2(DO_ALL-DCMINPUT)\n         DC    CL4'N   ',AL2(1),AL2(DO_NEXT-DCMINPUT)\n         DC    CL4'P   ',AL2(1),AL2(DO_PREV-DCMINPUT)\n         DC    CL4'QN  ',AL2(2),AL2(DO_ENDNU-DCMINPUT)\n         DC    CL4'Q   ',AL2(1),AL2(DO_END-DCMINPUT)\n         DC    CL4'R   ',AL2(1),AL2(DO_REPEAT-DCMINPUT)\n         DC    CL4'W   ',AL2(1),AL2(DO_WAIT-DCMINPUT)\n         DC    CL4'AUTO',AL2(4),AL2(DO_AUTO-DCMINPUT)\n         DC    CL4'ONL ',AL2(3),AL2(DO_RUN-DCMINPUT)\n         DC    CL4'END ',AL2(3),AL2(DO_END-DCMINPUT)\n         DC    CL4'NOUP',AL2(4),AL2(UPDATE_OFF-DCMINPUT)\n         DC    CL4'UP  ',AL2(2),AL2(UPDATE_ON-DCMINPUT)\n         DC    XL4'FFFFFFFF'\n         $BOX  'CONSTANTS',TITLE='CONSTANTS'\n$UCBDEV  EQU   4\n$UCBVOLI EQU   28\nTGETFLG  DC    X'80000000'             TGET EDIT\nBLANKS   DC    CL8' '\nZEROS    DC    CL8'00000000'\n         $BOX  'EXECUTED INSTRUCTIONS'\nUPCASE   OC    0(*-*,R8),BLANKS\nTESTIT   TRT   0(*-*,R8),VALCHARS\nVALMVN   MVN   WA2(*-*),0(R8)\nVALCLC   CLC   WA2(*-*),0(R8)\nKEYCLC   CLC   0(*-*,R2),0(R8)\nPACKIT   PACK  WA,0(*-*,R8)\n         $BOX  'TRANSLATE TABLES'\n         DS    0D\nTRTAB    DC    256AL1(*-TRTAB)\n         ORG   TRTAB+C' '\n         DC    C'0'                    BLANK -> ZERO\n         ORG   TRTAB+C'A'\n         DC    X'FAFBFCFDFEFF'\n         ORG\nVALCHARS DC    256XL1'FF'\n         ORG   VALCHARS+C'A'\n         DC    XL6'00'                 A-F OK\n         ORG   VALCHARS+C'0'\n         DC    XL10'00'                0-9 OK\n         ORG\nBADCMSG  DC    C'Could not recognize keyword. Try again.'\nBADDMSG  DC    C'Invalid device'\nVOLMSG   DC    C'Control unit does not include volume '\n         LTORG\n         SPACE 3\n         $REGS\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DCMIOERR": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x17\\x7f\\x00\\x98\\x17\\x7f\\x11D\\x00X\\x00X\\x00\\x00\\xc4\\xc3\\xd4\\xf0\\xf8\\xf0@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-06-26T00:00:00", "modifydate": "1998-06-26T11:44:00", "lines": 88, "newlines": 88, "modlines": 0, "user": "DCM080"}, "text": "DCMIOERR CSECT\nDCMIOERR AMODE 31\nDCMIOERR RMODE 24\n         $BOX   HDR='DCMIOERR - ',TITLE='DSECTS'\n         $DAB\n         EJECT\n         $STATSD\n         EJECT\n         $IOB\n         EJECT\n         $CCW\n         EJECT\n         PRINT  NOGEN\n         $DCB\n         DCBD   DSORG=(XA,XE),DEVD=DA\n         PRINT  GEN\n         $ERRCODE\n         $BOX  'INITIALIZATION',TITLE='INITIALIZATION'\nDCMIOERR CSECT\n         $MODID BR=YES\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         USING DCMIOERR,R12\n         USING DAB,R11\n                                       SPACE\n         LA    R2,$ERR_IO              SHOW I/O FAILED\n         MVC   D_ERRMSG(PMSGLEN),PERRMSG MOVE PROTOTYPE MESSAGE\n         OI    D_FLG1,$IOERR\n         ST    R2,D_ERROR\n         LA    R10,IOBAREA\n         USING IOB,R10\n                                       SPACE\n         $BOX  'FORMAT ECB',                                           *\n               TITLE='FORMAT  CMD, ECB and SENSE'\n         UNPK  WA(3),IOBECB(2)         FORMAT\n         TR    WA(2),TRTAB-C'0'          COMPLETION CODE\n         MVC   D_ERRMSG+PCCD(2),WA     AND MOVE IT\n                                       SPACE\n         $BOX  'FORMAT SENSE'\n         UNPK  WA(5),IOBSENSE(3)       FORMAT\n         TR    WA(4),TRTAB-C'0'        SENSE CODE\n         MVC   D_ERRMSG+PSENSED(4),WA  AND MOVE IT\n                                       SPACE\n         $BOX  'FORMAT CMD'\n         L     R8,IOBCSW               GET CCW ADDRESS\n         USING CCW,R8\n                                       SPACE\n         LA    R0,8\n         N     R8,M0FFF\n         BZ    WRITE_IT\n                                       SPACE\n         SLR   R8,R0                   R8 -> CCW\n         UNPK  WA(3),CCWCC(2)          FORMAT\n         TR    WA(2),TRTAB-C'0'          CMD ADDR\n         MVC   D_ERRMSG+PCMDD(2),WA    AND MOVE IT\n                                       SPACE\n         $BOX  'WRITE MESSAGE',TITLE='WRITE MESSAGE'\nWRITE_IT EQU   *\n         LA    R1,D_ERRMSG\n         LA    R0,PMSGLEN\n         O     R1,NOWAIT\n         TPUT  (1),(0),R\n                                       SPACE\n         RETURN (14,12)\n                                   SPACE\n         $BOX  'CONSTANTS',TITLE='CONSTANTS'\n         DS    0D\nM0FFF    DC    X'00FFFFFF'\nNOWAIT   DC    X'10000000'\n*                      111111111122222222223333333333444444444455555555\n*                456789012345678901234567890123456789012345678901234567\nPERRMSG  DC    C'I/O Error. Cmd = '\nPCMD     DC    CL2' '\n         DC    C', Sense = '\nPSENSE   DC    CL4' '\n         DC    C', Completion code = '\nPCC      DC    CL2' '\nPMSGLEN  EQU   *-PERRMSG\n                                   SPACE\nPCMDD    EQU   PCMD-PERRMSG\nPSENSED  EQU   PSENSE-PERRMSG\nPCCD     EQU   PCC-PERRMSG\n                                       SPACE\n         DS    0D\nTRTAB    DC    C'0123456789ABCDEF'\n         SPACE 3\n         $REGS\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DCMMAIN": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x17\\x7f\\x00\\x98\\x17\\x7f\\x11D\\x01\\xe2\\x01\\xe2\\x00\\x00\\xc4\\xc3\\xd4\\xf0\\xf8\\xf0@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-06-26T00:00:00", "modifydate": "1998-06-26T11:44:00", "lines": 482, "newlines": 482, "modlines": 0, "user": "DCM080"}, "text": "DCMMAIN  CSECT\nDCMMAIN  AMODE 31\nDCMMAIN  RMODE 24\n         $BOX   HDR='DCMMAIN - ',TITLE='DSECTS'\n         $DAB\n         EJECT\n         $STATSD\n         EJECT\n         $UCMBS\n         $CMB\n         $SSSD\n         EJECT\n         $MONREC\n         $SSRD\n         EJECT\n         $IOB\n         EJECT\n         $CCW\n         EJECT\n         $LRD\n         EJECT\n         $OPEN\n         $DCB\n         PRINT  NOGEN\n         DCBD   DSORG=(XA,XE),DEVD=DA\n         IEZDEB\n$DEBNMT  EQU  DEBNMTRK-DEBDASD+DEBBASND-DEBBASIC\n$DEBSTH  EQU  DEBSTRHH-DEBDASD+DEBBASND-DEBBASIC\n$DEBENH  EQU  DEBENDHH-DEBDASD+DEBBASND-DEBBASIC\n$DEBSTC  EQU  DEBSTRCC-DEBDASD+DEBBASND-DEBBASIC\n$DEBENC  EQU  DEBENDCC-DEBDASD+DEBBASND-DEBBASIC\n$DEBUCB  EQU  DEBUCBAD-DEBDASD+DEBBASND-DEBBASIC\n         SPACE\nJFCB     DSECT\n         IEFJFCBN LIST=NO\n         $SCREEN\n         PRINT  GEN\n         $ERRCODE\n         $BOX  'INITIALIZATION',TITLE='INITIALIZATION'\nDCMMAIN  CSECT\n         $MODID BR=YES\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         USING DCMMAIN,R12\n                                       SPACE\n         L     R0,CORESZ               R0 = dynamic core size\n         LR    R2,R0                   Save a copy in r2\n                                       SPACE\n         GETMAIN RU,LV=(0),LOC=BELOW,RELATED=('DAB, MONITOR RECS')\n                                       SPACE\n         LR    R4,R1\n         LR    R5,R2\n         XR    R14,R14\n         XR    R15,R15                 Yes..i know r15 = 0\u00a8\u00a8\n         MVCL  R4,R14                  Clear area out\n                                       SPACE\n         LR    R11,R1                  R11 -> DAB ALWAYS\n         USING DAB,R11\n                                       SPACE\n         ST    R13,4(,R11)             Chain\n         ST    R11,8(,R13)               those\n         LR    R13,R11                     saveareas\n                                       SPACE\n         $BOX  'CALL DCMINIT'\n         L     R15,AINIT               R15 -> DCMINIT\n         O     R15,A31BIT              RUN IN 31 BIT\n         BASSM R14,R15\n                                       SPACE\n         LTR   R15,R15\n         BNZ   CLEANUP\n                                       SPACE\n         L     R15,ACLEAR              Clear screen\n         BASR  R14,R15\n                                       SPACE\n         $BOX  'MAIN PROCESSING',TITLE='MAIN PROCESSING'\n*   Get  fresh subsystem status and subsystem counts\nDCM_LOOP EQU   *\n         LA    R14,IOBAREA             R14 ->  IOB\n         USING IOB,R14\n                                       SPACE\n         LA    R15,P2RDC               R15-> RDC CCW\n         XR    R0,R0\n         ST    R15,IOBCCW\n         ST    R0,ECB\n                                       SPACE\n         EXCP  IOBAREA                 Issue read\n                                       SPACE\n         L     R0,D_NEW@               Swap\n         L     R1,D_OLD@                new\n         ST    R0,D_OLD@                 and\n         ST    R1,D_NEW@                  old areas\n         LR    R10,R1                  Get address of new record\n         USING MONREC,R10\n                                       SPACE\n         WAIT  ECB=ECB                 Waitttttttt\n                                       SPACE\n         LA    R15,P2PSF\n         LA    R9,MON_SSR              R9 -> SSR AREA\n         XR    R0,R0\n         ST    R9,P2RSD                SAVE IN RSD CCW\n         MVI   P2RSD,$RSD\n         ST    R15,IOBCCW\n         ST    R0,ECB\n                                       SPACE\n         EXCP  IOBAREA                 Issue read\n                                       SPACE\n         TIME  BIN\n                                       SPACE\n         XR    R2,R2\n         ST    R1,MON_DTE\n         ST    R0,MON_TME\n                                       SPACE\n         LA    R9,SSSAREA              Sense Subsystem Status area\n         USING SSS,R9\n                                       SPACE\n         ICM   R2,B'0001',SSSDEV#      #Devices returning status\n         LA    R3,64\n         CR    R2,R3\n         BNH   *+4+2\n         LR    R2,R3                   Max 64 devices\n         ST    R2,D_RSD#\n         DROP  R9\n                                       SPACE\n         STCK  MON_TOD                 Get tod\n                                       SPACE\n         WAIT  ECB=ECB                 Waitttttttt\n                                       SPACE\n         L     R0,D_NMB@               Swap\n         L     R1,D_OMB@                new\n         ST    R0,D_OMB@                 and\n         ST    R1,D_NMB@                  old areas\n         L     R15,ACMBG               Gather measurement blocks\n         BASR  R14,R15\n                                       SPACE\n         TM    ECB,$IOOK               I/O COMPLETED OK?\n         BNO   ERR_IO                  NO\n                                       SPACE\n         $BOX  'COLLECT DELTA STATISTICS',                             *\n               TITLE='COLLECT DELTA STATISTICS'\nOFF_LOOP       EQU *\n         L     R10,D_NEW@              Restore new area pointer\n         XC    DSSR(STATSLEN),DSSR     Clear accumulated deltas\n         L     R4,D_RSD#               R4 = # devices in monitor rec\n         L     R9,D_OLD@               R9 -> old mon record\n         TM    IN_FLGS,$HIST           Long term stats?\n         BZ    *+4+4                   No, just delta stats\n         L     R9,D_FILE@              R9 -> file record\n         LA    R9,MON_SSR-MONREC(,R9)   r9  -> old ssr record\n         LA    R10,MON_SSR-MONREC(,R10) r10 -> new ssr record\n         LA    R15,X'3F'               UA mask\n         L     R0,D_DEV                R0 = start device\n         L     R1,D_DEV#               R1 = # devices\n         XR    R2,R2                   R2 = UA from SSR\n         BCTR  R1,0\n         STH   R2,D_DEVST              Clear device status\n         AR    R1,R0                   R1 = end device\n         NR    R0,R15                  Isolate...\n         NR    R1,R15                    unit address\n                                       SPACE\nNEXT_DEV       EQU *\n         LA    R15,X'3F'\n         ICM   R2,B'0001',UA-SSR(R10)  R2 = UA\n         NR    R2,R15                  UA modulo 64\n         CR    R1,R2                   Compare with end UA\n         BL    DONE_DEV                Done if higher than end\n                                       SPACE\n         CR    R0,R2                   Compare with start UA\n         BH    BUMP_DEV\n         BL    *+4+4+4\n         LH    R15,DEVSTAT1-SSR(,R10)  Get device stats\n         STH   R15,D_DEVST               and save\n         LA    R3,STATSLEN/4           R3 = number of ssr counters\n         LA    R6,DSSR                 R6 -> deltas area\n         LA    R7,RD#-SSR(,R9)         R7 -> old ssr stats start\n         LA    R8,RD#-SSR(,R10)        R8 -> new ssr stats start\n                                       SPACE\nACC_STATS      EQU *\n         L     R15,0(,R7)              R15 = old counter\n         L     R14,0(,R8)              R14 = new counter\n         SLR   R14,R15                 R14 = increment\n         AL    R14,0(,R6)              Accumulate\n         ST    R14,0(,R6)\n         LA    R7,4(,R7)               Next old entry\n         LA    R8,4(,R8)               Next new entry\n         LA    R6,4(,R6)               Next tot entry\n         BCT   R3,ACC_STATS\n                                       SPACE\nBUMP_DEV EQU   *\n         LA    R9,96(,R9)              R9 ->  next device (old)\n         LA    R10,96(,R10)            R10 -> next device (new)\n         BCT   R4,NEXT_DEV             And repeat\n                                       SPACE\n         $BOX  'COLLECT COUNTERS',                                     *\n               TITLE='COLLECT COUNTERS'\nDONE_DEV EQU   *\n         L     R10,D_NEW@\n         XC    CSSR(STATSLEN),CSSR     Clear counters\n         L     R4,D_RSD#               R4 = # devices in monitor rec\n         LA    R10,MON_SSR-MONREC(,R10) r10 -> new ssr record\n                                       SPACE\nNEXT_DEVC      EQU *\n         LA    R15,X'3F'\n         ICM   R2,B'0001',UA-SSR(R10)  R2 = UA\n         NR    R2,R15                  UA modulo 64\n         CR    R1,R2                   Compare with end UA\n         BL    DONE_DEVC               Done if higher than end\n                                       SPACE\n         CR    R0,R2                   Compare with start UA\n         BH    BUMP_DEVC\n                                       SPACE\n         LA    R3,STATSLEN/4           R3 = number of ssr counters\n         LA    R6,CSSR                 R6 -> accums area\n         LA    R8,RD#-SSR(,R10)        R8 -> new ssr stats start\n                                       SPACE\nACC_STATSC     EQU *\n         L     R14,0(,R8)              R14 = new counter\n         SRL   R14,7                   Divide by 128   ***\n         AL    R14,0(,R6)              Accumulate\n         ST    R14,0(,R6)\n         LA    R8,4(,R8)               Next new entry\n         LA    R6,4(,R6)               Next tot entry\n         BCT   R3,ACC_STATSC\n                                       SPACE\nBUMP_DEVC      EQU  *\n         LA    R10,96(,R10)            R10 -> next device (new)\n         BCT   R4,NEXT_DEVC            And repeat\n                                       SPACE\n         DROP  R10\n         $BOX  'COLLECT DEVICE TIMES',                                 *\n               TITLE='COLLECT DEVICE TIMES'\nDONE_DEVC      EQU   *\n         XC    D_SAMPC(D_CMBLN),D_SAMPC    Clear MB counters\n         L     R10,D_NMB@              R10-> new MB area\n         L     R9,D_OMB@               R9 -> old MB area\n         L     R8,D_DEV#               R4 = number of devices\n         L     R0,D_DEVOFF             Get device offset\n         SLL   R0,5                    Each entry 32 bytes\n         AR    R10,R0                  Start device offset..new\n         AR    R9,R0                   Start device offset..old\n         XR    R1,R1                   Accum SAMPC\n         XR    R2,R2                   Accum CONNT\n         XR    R3,R3                   Accum PENDT\n         XR    R4,R4                   Accum DISCT\n         L     R0,M00FF                64k mask value\n                                       SPACE\nNEXT_MB        EQU *\n         LH    R15,CMBSAMPC-CMB(,R10)  New sampc\n         LH    R14,CMBSAMPC-CMB(,R9)   Old sampc\n         NR    R15,R0\n         NR    R14,R0\n         SLR   R15,R14                 Increment\n         NR    R15,R0                  Modulo 64k\n         ALR   R1,R15                  Accumulate sampc\n                                       SPACE\n         L     R15,CMBCONNT-CMB(,R10)  New connt\n         L     R14,CMBCONNT-CMB(,R9)   Old connt\n         SLR   R15,R14                 Increment\n         ALR   R2,R15                  Accumulate connt\n                                       SPACE\n         L     R15,CMBPENDT-CMB(,R10)  New pendt\n         L     R14,CMBPENDT-CMB(,R9)   Old pendt\n         SLR   R15,R14                 Increment\n         ALR   R3,R15                  Accumulate pendt\n                                       SPACE\n         L     R15,CMBDISCT-CMB(,R10)  New disct\n         L     R14,CMBDISCT-CMB(,R9)   Old disct\n         SLR   R15,R14                 Increment\n         ALR   R4,R15                  Accumulate disct\n                                       SPACE\n         LA    R10,$CMBLEN(,R10)       R10-> next cmb\n         LA    R9,$CMBLEN(,R9)         R9 -> next cmb\n         BCT   R8,NEXT_MB              And repeat\n                                       SPACE\n         STM   R1,R4,D_SAMPC           Save counters\n                                       SPACE\nFORM_STATS     EQU *\n         L     R15,ASTATS\n         BASR  R14,R15                 Gather stats\n                                       SPACE\n         LTR   R15,R15                 Offline device?\n         BZ    DISPLAY                 No..display\n                                       SPACE\n         TM    IN_FLGS,$RUN            Cycle mode?\n         BZ    DISPLAY                 Display if not offline\n                                       SPACE\n         L     R1,D_DEV                Increment device\n         L     R2,D_DEVOFF               and  offset\n         LA    R1,1(,R1)\n         LA    R2,1(,R2)\n         C     R1,D_DEVL               Too far already?\n         BH    INPUT                   Yes..ask for more\n                                       SPACE\n         ST    R1,D_DEV                Update device\n         ST    R2,D_DEVOFF               and offset\n         B     OFF_LOOP\n                                       SPACE\nDISPLAY  EQU   *\n         L     R15,ADISPLAY\n         BASR  R14,R15                 Display\n                                       SPACE\n         TM    IN_FLGS,$AUTO           Auto mode?\n         BO    AUTOMODE                Yes\n                                       SPACE\n         TM    IN_FLGS,$RUN            Cycle all devices?\n         BZ    INPUT                   No..ask for more\n                                       SPACE\n         L     R1,D_DEV                Update\n         L     R2,D_DEVOFF\n         LA    R1,1(,R1)\n         LA    R2,1(,R2)\n         C     R1,D_DEVL\n         BH    INPUT\n                                       SPACE\n         ST    R1,D_DEV\n         ST    R2,D_DEVOFF\n                                       SPACE\n         STIMER WAIT,BINTVL=D_WAIT     Wait\n                                       SPACE\n         B     OFF_LOOP\n                                       SPACE\nAUTOMODE       EQU *\n         L     R0,D_REPREM             Update\n         BCTR  R0,0                      remaining\n         ST    R0,D_REPREM                 counts\n         LTR   R0,R0\n         BNP   RESET_CNT\n                                       SPACE\nDELAY          EQU *\n         STIMER WAIT,BINTVL=D_WAIT     Wait (ensure dur > 0)\n                                       SPACE\n         B     DCM_LOOP\n                                       SPACE\nRESET_CNT      EQU *\n         L     R0,D_REPCNT\n         NI    IN_FLGS,255-$AUTO       Disable auto mode\n         ST    R0,D_REPREM\n                                       SPACE\nINPUT    EQU   *\n         L     R15,AINPUT\n         BASR  R14,R15                 Read input\n                                       SPACE\n         LA    R0,100\n         CR    R15,R0                  TGET error?\n         BH    CLEANUP                 Yes..leave\n                                       SPACE\n         LTR   R15,R15                 Input error?\n         BNZ   DISPLAY                 Yes..show error message\n                                       SPACE\n         TM    IN_FLGS,$FINI           Done?\n         BNO   DCM_LOOP                No..continue\n                                       SPACE\n         $BOX  'CLEANUP',TITLE='CLEANUP PROCESSING'\nCLEANUP  EQU   *\n         TM    D_FLG1,$OPENOK          Opened successfully?\n         BZ    FREEUP                  No..leave quickly\n                                       SPACE\n         TM    D_FLG1,$IOERR+$TERMERR  I/o or terminating error?\n         BNZ   CLOSEUP                 Yes...close gracefully\n                                       SPACE\n         TM    IN_FLGS,$NOUPD          Updating history file?\n         BO    CLOSEUP                 No..just close and leave\n                                       SPACE\n         LA    R14,IOBAREA             R14 -> IOB\n         USING IOB,R14\n                                       SPACE\n         L     R0,MON_IDC              R0 = *DCM\n         L     R1,MRECLEN              R1 = record length\n         L     R2,D_CU                 R2 = cu address\n         L     R10,D_NEW@              R10 -> new mon record\n         ST    R0,MON_ID-MONREC(,R10)  Save descriptor\n         ST    R1,MON_LEN-MONREC(,R10) Save length\n         ST    R2,MON_CUA-MONREC(,R10) Save cua\n         LA    R9,LRPARM\n         USING LRD,R9\n                                       SPACE\n         MVI   LR_OP,$LR_CA+$LR_FW     Format write\n         MVI   LR_AUX,$LR_TLF          Tlf valid\n         MVI   LR_COUNT,X'01'          One ccw\n         MVI   LR_R,X'00'              Search for r0\n         LH    R15,DL1\n         ST    R15,P1WCKDD+4           Record size\n         LA    R15,8(,R15)             Add count area\n         STH   R15,LR_TLF              And save in tlf\n         LA    R15,CC1                 R15 -> count area\n         XR    R0,R0\n         ST    R15,P1WCKDC             Save count addr\n         MVI   P1WCKDC,$WCKD\n         ST    R10,P1WCKDD             Save data addr\n         MVI   P1WCKDD,$WCKD\n         MVC   P1RD(8),P1WCKDC         Move wckd count ccw\n         MVI   IOBFLAG1,$IOBDC+$IOBCC+$IOBNRL  Set iob flags\n         MVI   IOBR,X'00'              Try for record 0\n         ST    R0,ECB                  Clear ecb\n         LA    R15,P1CCW               Get ccw addr\n         ST    R15,IOBCCW              Save in iob\n                                       SPACE\n         EXCP  IOBAREA                 Blast write\n                                       SPACE\n         WAIT  ECB=ECB                 Waitttttttt\n                                       SPACE\n         TM    ECB,$IOOK               I/O SUCCESSFUL?\n         BNO   CLOSEUP                 No..close monitor file\n                                       SPACE\n         LA    R10,MONDCB\n         USING IHADCB,R10\n                                       SPACE\n         LM    R4,R5,CC1               R4,R5 = CCHHR0DD\n         SRDL  R4,8+8+8                R4,R5 = MBBCCHHR\n         STCM  R4,B'1111',DCBFDAD\n         STCM  R5,B'1111',DCBFDAD+4    Last record written\n                                       SPACE\n         DROP  R9,R10,R14\n                                       EJECT\nCLOSEUP  EQU   *\n         TM    D_FLG1,$CAPTURE\n         BZ    CLOSE_MONITOR\n                                       SPACE\n         LA    R0,CAPDCB\n         ST    R0,D_OPN\n         MVI   D_OPN,$LAST\n                                       SPACE\n         CLOSE MF=(E,D_OPN)            Close capture file\n                                       SPACE\nCLOSE_MONITOR  EQU *\n         LA    R0,MONDCB\n         ST    R0,D_OPN\n         MVI   D_OPN,$LAST\n                                       SPACE\n         CLOSE MF=(E,D_OPN)            Close monitor file\n                                       SPACE\n         ICM   R10,B'1111',D_ERROR     Get error\n         BNZ   FREEUP\n                                       SPACE\n         L     R15,ACLEAR              Clear screen\n         BASR  R14,R15\n                                       SPACE\nFREEUP   EQU   *\n         L     R13,4(,R13)             Old savearea addr\n         L     R10,D_ERROR             Get error\n         L     R0,CORESZ               R0 =  gotten core size\n                                       SPACE\n         FREEMAIN RU,A=(R11),LV=(0)\n                                       SPACE\nDONE     EQU   *\n         LR    R15,R10\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BSM   0,R14\n                                       SPACE\n         $BOX  'ERRORS',TITLE='ERRORS'\nERR_IO   EQU   *\n         L     R15,ACLEAR              Clear screen\n         BASR  R14,R15\n                                       SPACE\n         L     R15,AIOERR\n         BASR  R14,R15\n                                       SPACE\n         B     CLEANUP\n                                       SPACE\n         $BOX  'CONSTANTS',TITLE='CONSTANTS'\n         DS    0D\n$SRECLEN EQU   64*96                   64 devices; 96 bytes/entry\n$MRECLEN EQU   $MONHDLN+$SRECLEN\nSRECLEN  DC    A($SRECLEN)\nMRECLEN  DC    A($MRECLEN)\nCORESZ   DC    A(DABLEN+64*$UCMBLEN+3*$MRECLEN+$SCRNLEN+3*64*$CMBLEN)\n                                       SPACE\nA31BIT   DC    X'80000000'\nM00FF    DC    X'0000FFFF'\nWAIT4    DC    F'400'                  4 second wait\nAINIT    DC    V(DCMINIT)\nACMBG    DC    V(DCMCMBG)\nASTATS   DC    V(DCMSTATS)\nADISPLAY DC    V(DCMDSPLY)\nAINPUT   DC    V(DCMINPUT)\nAIOERR   DC    V(DCMIOERR)\nACLEAR   DC    V(DCMCLEAR)\nMON_IDC  DC    CL4'*DCM'\n         PRINT GEN\n         SPACE 3\n         $REGS\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DCMSCRN": {"ttr": 1288, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x17\\x7f\\x00\\x98\\x17\\x7f\\x11D\\x00\\x06\\x00\\x06\\x00\\x00\\xc4\\xc3\\xd4\\xf0\\xf8\\xf0@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-06-26T00:00:00", "modifydate": "1998-06-26T11:44:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "DCM080"}, "text": "DCMSCRN  CSECT\nDCMSCRN  AMODE 31\nDCMSCRN  RMODE 24\n         $BOX   HDR='DCMSCRN - ',TITLE='SCREEN LAYOUT'\n         $SCREEN DSECT=NO\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCMSTATS": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x17\\x7f\\x00\\x98\\x17\\x7f\\x11D\\x034\\x034\\x00\\x00\\xc4\\xc3\\xd4\\xf0\\xf8\\xf0@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-06-26T00:00:00", "modifydate": "1998-06-26T11:44:00", "lines": 820, "newlines": 820, "modlines": 0, "user": "DCM080"}, "text": "DCMSTATS CSECT\nDCMSTATS AMODE 31\nDCMSTATS RMODE 24\n         $BOX   HDR='DCMSTATS - ',TITLE='DSECTS'\n         $DAB\n         EJECT\n         $STATSD\n         EJECT\n         $SSRD\n         EJECT\n         $SSSD\n         EJECT\n         $RDCD\n         EJECT\n         $MONREC\n         $UCMBS\n         $CMB\n         PRINT  NOGEN\n         $IOB\n         $CCW\n         $OPEN\n         $DCB\n         PRINT  GEN\n         $SCREEN\n         $BOX  'INITIALIZATION',TITLE='INITIALIZATION'\nDCMSTATS CSECT\n         $MODID BR=YES\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         USING DCMSTATS,R12\n         USING DAB,R11\n                                       SPACE\n         LA    R10,72(,R13)\n         ST    R13,4(,R10)             CHAIN\n         ST    R10,8(,R13)               THOSE\n         LR    R13,R10                     SAVEAREAS\n                                       SPACE\n         L     R10,D_SCRN@             GET SCREEN POINTER\n         USING SCREEN,R10\n                                       SPACE\n         L     R9,D_NEW@\n         USING MONREC,R9\n                                       SPACE\n         LA    R15,CLONG\n         TM    IN_FLGS,$DELTA          DELTA STATS?\n         BZ    *+4+4\n         LA    R15,CSHORT\n         MVC   SDELTAP,0(R15)\n                                       SPACE\n         LA    R15,CLONG\n         TM    IN_FLGS,$HIST           LONG TERM RATES\n         BO    *+4+4\n         LA    R15,CSHORT\n         MVC   SDELTAR,0(R15)\n                                       SPACE\n         NI    D_FLG1,255-$OFFLINE     RESET OFFLINE FLAG\n         TM    IN_FLGS,$RUN            Running online devices?\n         BO    FORM_CACHE              Yes..don't update date\n                                       SPACE\n         $BOX  'FORMAT DATE/TIME'\n         TM    IN_FLGS,$HIST\n         BZ    NEW_DATES\n                                       SPACE\n         L     R8,D_FILE@\n         L     R0,MON_TME-MONREC(,R8)\n         L     R1,MON_DTE-MONREC(,R8)\n         L     R15,ACONDATE\n         BASR  R14,R15\n                                       SPACE\nNEW_DATES      EQU *\n         MVC   SODATE(L'SCDATE+L'SCTIME),DATEF  MOVE OLD DATE+TIME\n         L     R0,MON_TME\n         L     R1,MON_DTE\n         L     R15,ACONDATE\n         BASR  R14,R15\n                                       SPACE\n         MVC   SCDATE(L'SCDATE+L'SCTIME),DATEF  MOVE NEW DATE+TIME\n         DROP  R9\n         XC    SCREF(8),SCREF\n         TM    IN_FLGS,$AUTO\n         BZ    FORM_CACHE\n                                       SPACE\n         L     R15,D_REPREM\n         BCTR  R15,0\n         LTR   R15,R15\n         BZ    FORM_CACHE\n                                       SPACE\n         LA    R0,10\n         MVC   SCREF,=C'Auto'\n         MVC   SCREF#,=C' >10'\n         CR    R15,R0\n         BH    FORM_CACHE\n                                       SPACE\n         CVD   R15,WA\n         MVC   SCREF#,EDMASKA\n         ED    SCREF#,WA+6\n                                       SPACE\n         $BOX  'FORMAT CACHE CAPACITY',                                *\n               TITLE='COLLECT STATISTICS'\nFORM_CACHE     EQU *\n         LA    R9,SSSAREA\n         USING SSS,R9\n                                       SPACE\n         UNPK  WA(5),SSSSSID(3)        SSID\n         TR    WA(4),HEXTAB-C'0'       TRANSLATE TO HEX\n         MVC   SCSSID,WA\n         ICM   R15,B'1111',CFCACHE     GET CONFIGURED CACHE\n         CLI   SSSMODEL,0\n         BNE   *+4+4\n         SRL   R15,10                  CONVERT TO K\n         CVD   R15,WA\n         MVC   SCAINST,EDMASKK\n         ED    SCAINST,WA+4\n                                       SPACE\n         ICM   R15,B'1111',AVCACHE     GET AVAILABLE  CACHE\n         CLI   SSSMODEL,0\n         BNE   *+4+4\n         SRL   R15,10                  CONVERT TO K\n         CVD   R15,WA\n         MVC   SCAAVAIL,EDMASKK\n         ED    SCAAVAIL,WA+4\n                                       SPACE\n         ICM   R15,B'1111',CFNVS       GET INSTALLED NVS\n         CLI   SSSMODEL,0\n         BNE   *+4+4\n         SRL   R15,10                  CONVERT TO K\n         CVD   R15,WA\n         MVC   SNVSINST,EDMASKK\n         ED    SNVSINST,WA+4\n                                       SPACE\n         ICM   R15,B'1111',PINNVS      GET PINNED DATA\n         CLI   SSSMODEL,0\n         BNE   *+4+4\n         SRL   R15,10                  CONVERT TO K\n         CVD   R15,WA\n         MVC   SPINNVS,EDMASKK\n         ED    SPINNVS,WA+4\n                                       SPACE\n         $BOX  'FORMAT SWITCH STATUS',                                 *\n               TITLE='SWITCH STATUS'\n         TM    D_FLAGS,$SWITCH\n         BO    FORM_DEVS\n                                       SPACE\n         XR    R0,R0\n         ICM   R0,B'0001',D_SWITCH     SP0 BIT MAP\n         LA    R2,SSWCH0               OUTPUT AREA\n         BAS   R14,FORM_SWCH\n                                       SPACE\n         ICM   R0,B'0001',D_SWITCH+1   SP1 BIT MAP\n         LA    R2,SSWCH1               OUTPUT AREA\n         BAS   R14,FORM_SWCH\n                                       SPACE\n         ICM   R0,B'0001',D_SWITCH+2   SP2 BIT MAP\n         LA    R2,SSWCH2               OUTPUT AREA\n         BAS   R14,FORM_SWCH\n                                       SPACE\n         ICM   R0,B'0001',D_SWITCH+3   SP3 BIT MAP\n         LA    R2,SSWCH3               OUTPUT AREA\n         BAS   R14,FORM_SWCH\n                                       SPACE\n         OI    D_FLAGS,$SWITCH         INDICATE SWITCHES FORMATTED\n         MVC   SSERIAL#,D_SERIAL       MOVE CU SERIAL#\n         $BOX  'FORMAT DEVICES'\nFORM_DEVS      EQU *\n         UNPK  WA(5),D_DEVF+2(3)       STARTING ADDR\n         TR    WA(4),HEXTAB-C'0'       TRANSLATE TO HEX\n         MVC   SDEVICES(4),WA\n         MVI   SDEVICES+4,C'-'\n         UNPK  WA(5),D_DEVL+2(3)       ENDING   ADDR\n         TR    WA(4),HEXTAB-C'0'       TRANSLATE TO HEX\n         MVC   SDEVICES+5(4),WA\n                                       SPACE\n         $BOX  'FORMAT DEVICE ADDRESS',                                *\n               TITLE='FORMAT DEVICE ADDRESS'\n         XC    SVOL,SVOL\n         XC    SDEV0,SDEV0\n         MVC   SDEV0(5),=C'*ALL*'\n         L     R14,D_DEVOFF\n         L     R15,D_UCMBS@\n         L     R7,D_DEV#\n         SLL   R14,7\n         AR    R15,R14\n         BCTR  R7,0\n         L     R8,U_UCB@-UCMBS(,R15)   R8  -> UCB\n         TM    IN_FLGS,$ALL\n         BO    FORM_PATHS\n                                       SPACE\n         XC    SDEV0,SDEV0\n         MVC   SVOL,$UCBVOLI(R8)       MOVE VOLUME NAME\n         UNPK  WA(5),D_DEV+2(3)        UNPACK DEVICE ADDRESS\n         TR    WA(4),HEXTAB-C'0'       TRANSLATE TO HEX\n         MVC   SDEV0(4),WA\n         TM    $UCBSTAT(R8),$UCBONLI   ONLINE?\n         BO    FORM_DEV1\n                                       SPACE\n         MVC   SDEV1,OFFLINE\n         OI    D_FLG1,$OFFLINE\n                                       SPACE\nFORM_DEV1      EQU *\n         L     R15,D_DEV\n         LTR   R7,R7                   MORE THAN 1 DEVICE?\n         BZ    FORM_PATHS\n                                       SPACE\n         XC    SDEV1,SDEV1\n         XC    SVOL,SVOL\n         AR    R15,R7\n         ST    R15,WA2\n         MVI   SDEV0+4,C'-'\n         UNPK  WA(5),WA2+2(3)          ENDING   ADDR\n         TR    WA(4),HEXTAB-C'0'       TRANSLATE TO HEX\n         MVC   SDEV1(4),WA\n                                       SPACE\n         $BOX  'FORMAT PATHS',                                         *\n               TITLE='FORMAT PATHS'\n*    R8  -> UCB\n*    R7  =  #DEVICES - 1\nFORM_PATHS     EQU *\n         XC    SPATHS,SPATHS\n*        LTR   R7,R7                   MORE THAN 1 DEVICE?\n*        BNZ   CACHE_STAT              PATH STATUS PROBABLY INCORRECT\n                                       SPACE\n         L     R15,XFF\n         LA    R2,$UCBLPM\n         XR    R3,R3                   R3 = 0\n         XR    R4,R4                   R3 = 0\n         SR    R8,R2                   R8 -> LPM\n         ST    R15,D_PATHS\n         ST    R15,D_PATHS+4\n         ICM   R2,B'0001',0(R8)        R2 = LPM\n         LA    R8,$UCBLPM-$UCBCHPS+7(,R8) R8 -> LAST IN UCBCHPS\n         LA    R9,D_PATHS+7            LAST ENTRY IN D_PATHS\n         LA    R0,8                    AT MOST 8 CHPIDS\n                                       SPACE\nNEXT_CHP EQU  *\n         SRDL  R2,1\n         LTR   R3,R3\n         BZ    DECREMENT\n         ICM   R4,B'0001',0(R8)        FETCH CHPID\n         STCM  R4,B'0001',0(R9)        AND SAVE\n                                       SPACE\nDECREMENT      EQU *\n         XR    R3,R3\n         BCTR  R9,0\n         BCTR  R8,0\n         BCT   R0,NEXT_CHP\n                                       SPACE\n         LA    R0,8\n         LA    R1,D_PATHS\n         XR    R2,R2\n         LA    R3,SPATHS\n         LA    R4,X'FF'\n                                       SPACE\nNEXT_PATH      EQU *\n         ICM   R2,B'0001',0(R1)\n         CR    R2,R4\n         BE    CACHE_STAT\n         STCM  R2,B'0001',WA2\n         UNPK  WA(3),WA2(2)\n         TR    WA(2),HEXTAB-C'0'       TRANSLATE TO HEX\n         MVC   0(2,R3),WA\n         MVI   2(R3),C' '\n         LA    R1,1(,R1)\n         LA    R3,3(,R3)\n         BCT   R0,NEXT_PATH\n                                       SPACE\n         $BOX  'FORMAT CACHE STATUS',                                  *\n               TITLE='FORMAT CACHE ST  ATUS'\nCACHE_STAT     EQU *\n         XC    SDPLX(SDPLLN),SDPLX\n         XC    SPINST,SPINST\n         LTR   R7,R7                   MORE THAN 1 DEVICE?\n         BNZ   ALL_STATS\n                                       SPACE\n         LA    R15,ACTIV\n         TM    D_DEVST,$DCASHAC        CACHE ACTIVE?\n         BZ    *+4+4\n         LA    R15,NOTACTIV\n         MVC   SCASHST,0(R15)\n                                       SPACE\n         LA    R15,ACTIV\n         TM    D_DEVST,$DDFWAC         DFW ACTIVE?\n         BZ    *+4+4\n         LA    R15,NOTACTIV\n         MVC   SDFWST,0(R15)\n                                       SPACE\n         TM    D_DEVST+1,$PINST        PINNED DATA?\n         BZ    *+4+6\n         MVC   SPINST,PINNED\n                                       SPACE\n         TM    D_DEVST,$DDPLXP+$DDPLXS DUPLEXED?\n         BZ    IO_TIME\n                                       SPACE\n         MVC   SDPLX,DPLXING\n         LA    R15,DPLX2ND\n         TM    D_DEVST,$DDPLXP         PRIMARY DUPLEX VOL?\n         BO    *+4+4                   GUESSED RIGHT\n         LA    R15,DPLX1ST\n         MVC   SDPLPS,0(R15)\n                                       SPACE\n         L     R15,D_CU\n         LA    R0,X'3F'\n         LH    R1,D_DEVST\n         NR    R1,R0\n         AR    R15,R1\n         ST    R15,WA2\n         UNPK  WA(5),WA2+2(3)          DEVICE ADDRESS\n         TR    WA(4),HEXTAB-C'0'       TRANSLATE TO HEX\n         MVC   SDPLDEV,WA+1\n         B     IO_TIME\n                                       SPACE\nALL_STATS      EQU *\n         LA    R9,SSSAREA\n         USING SSS,R9\n                                       SPACE\n         LA    R15,AVAIL\n         TM    SSSOCHE,$CACHEAC        CACHE ACTIVE?\n         BZ    *+4+4\n         LA    R15,NOTAVAIL\n         MVC   SCASHST,0(R15)\n                                       SPACE\n         LA    R15,AVAIL\n         TM    SSSONVS,$NVSAC          DFW ACTIVE?\n         BZ    *+4+4\n         LA    R15,NOTAVAIL\n         MVC   SDFWST,0(R15)\n                                       SPACE\n         ICM   R15,B'1111',PINCACHE    PINNED DATA?\n         BZ    IO_TIME\n                                       SPACE\n         MVC   SPINST,PINNED\n         DROP  R9\n                                       SPACE\n         $BOX  'FORMAT I/O TIMES',                                     *\n               TITLE='FORMAT I/O STAT  ISTICS'\nIO_TIME        EQU *\n         L     R9,D_NEW@\n         L     R8,D_OLD@\n         TM    IN_FLGS,$HIST\n         BZ    *+4+4\n         L     R8,D_FILE@\n         LM    R0,R1,MON_TOD-MONREC(R9)    R0,R1 = NEW TOD\n         LM    R2,R3,MON_TOD-MONREC(R8)    R2,31 = OLD TOD\n         SRDL  R0,12+10+4\n         SRDL  R2,12+10+4\n         SLR   R1,R3                   R1 = DURATION\n         XR    R0,R0\n         SLDL  R0,10+4                 R0,R1 = DURATION IN USECS\n         D     R0,F100000              R1 = DURATION IN TENTHS\n         ST    R1,D_DUR                SAVE DURATION\n                                       SPACE\n         XC    SIOTT,SIOTT             CLEAR I/O TIME\n         XC    SIOPT,SIOPT             CLEAR PEND TIME\n         XC    SIODT,SIODT             CLEAR DISC TIME\n         XC    SIOCT,SIOCT             CLEAR CONN TIME\n                                       SPACE\n         LA    R0,100\n         L     R9,D_SAMPC              R9 = TOTAL SAMPLED I/O COUNT\n         LTR   R8,R1                   R8 = DURATION IN TENTHS\n         BZ    HIT_STATS               Strange...duration is zero\n                                       SPACE\n         LR    R7,R9                   R7 = TOTAL SAMPLED I/O COUNT\n         MR    R6,R0\n         DR    R6,R8                   R7 = I/O RATE (CHAN SUBSYSTEM)\n         CVD   R7,WA\n         MVC   SIOCH,EDMASKT\n         ED    SIOCH,WA+5\n                                       SPACE\n         LTR   R9,R9                   R9 = TOTAL SAMPLED I/O COUNT\n         BZ    IO_STATS\n                                       SPACE\n         MR    R8,R0                   R9 = 100*SAMPLED I/O COUNT\n         L     R7,D_PENDT              R7  = TOTAL PEND TIME\n         XR    R6,R6\n         SLDL  R6,7                    TIME IN MICROS\n         DR    R6,R9                   R7 = AVG PEND TIME(MS)\n         CVD   R7,WA\n         LR    R1,R7                   ACCUMULATE\n         MVC   SIOPT,EDMASKT\n         ED    SIOPT,WA+5\n                                       SPACE\n         L     R7,D_DISCT              R7  = TOTAL DISCO TIME\n         XR    R6,R6\n         SLDL  R6,7                    TIME IN MICROS\n         DR    R6,R9                   R7 = AVG DISCO TIME(MS)\n         CVD   R7,WA\n         AR    R1,R7                   ACCUMULATE\n         MVC   SIODT,EDMASKT\n         ED    SIODT,WA+5\n                                       SPACE\n         L     R7,D_CONNT              R7  = TOTAL CONNECT TIME\n         XR    R6,R6\n         SLDL  R6,7                    TIME IN MICROS\n         DR    R6,R9                   R7 = AVG CONN TIME(MS)\n         CVD   R7,WA\n         AR    R1,R7                   ACCUMULATE\n         MVC   SIOCT,EDMASKT\n         ED    SIOCT,WA+5\n                                       SPACE\n         CVD   R1,WA                   R1 = TOTAL I/O TIME\n         MVC   SIOTT,EDMASKT\n         ED    SIOTT,WA+5\n                                       SPACE\n         $BOX  'FORMAT I/O RATES',                                     *\n               TITLE='FORMAT I/O RATES'\nIO_STATS       EQU *\n         LA    R9,DSSR\n         USING STATSD,R9\n                                       SPACE\n         LA    R0,100\n         L     R15,D_DUR               DURATION IN TENTHS\n         L     R7,CRD#                 R7 = NORMAL READS\n         MR    R6,R0\n         DR    R6,R15                  R7 = NORMAL READ RATE\n         CVD   R7,WA\n         LR    R1,R7                   ACCUMULATE READS\n         LR    R3,R7                   ACCUMULATE READS\n         MVC   SNRD,EDMASKT\n         ED    SNRD,WA+5\n                                       SPACE\n         L     R7,CWR#                 R7 = NORMAL WRITES\n         MR    R6,R0\n         DR    R6,R15                  R7 = NORMAL WRITE RATE\n         CVD   R7,WA\n         LR    R2,R7                   ACCUMULATE WRITES\n         LR    R4,R7                   ACCUMULATE WRITES\n         MVC   SNWR,EDMASKT\n         ED    SNWR,WA+5\n                                       SPACE\n         AR    R4,R3                   R4 = NORMAL I/O\n         CVD   R4,WA\n         AR    R3,R4                   ACCUMULATE I/O\n         MVC   SNIO,EDMASKT\n         ED    SNIO,WA+5\n                                       SPACE\n         L     R7,CRDSQ#               R7 = SEQL   READS\n         MR    R6,R0\n         DR    R6,R15                  R7 = SEQL   READ RATE\n         CVD   R7,WA\n         AR    R1,R7                   ACCUMULATE READS\n         LR    R3,R7                   ACCUMULATE READS\n         MVC   SSQRD,EDMASKT\n         ED    SSQRD,WA+5\n                                       SPACE\n         L     R7,CWRSQ#               R7 = SEQL   WRITES\n         MR    R6,R0\n         DR    R6,R15                  R7 = SEQL   WRITE RATE\n         CVD   R7,WA\n         AR    R2,R7                   ACCUMULATE WRITES\n         LR    R4,R7                   ACCUMULATE READS\n         MVC   SSQWR,EDMASKT\n         ED    SSQWR,WA+5\n                                       SPACE\n         AR    R4,R3                   R4 = SEQL   I/O\n         CVD   R4,WA\n         MVC   SSQ,EDMASKT\n         ED    SSQ,WA+5\n                                       SPACE\n         L     R7,CRDCFW#              R7 = CFW    READS\n         MR    R6,R0\n         DR    R6,R15                  R9 = CFW    READ RATE\n         CVD   R7,WA\n         AR    R1,R7                   ACCUMULATE READS\n         LR    R3,R7                   ACCUMULATE READS\n         MVC   SCFWRD,EDMASKT\n         ED    SCFWRD,WA+5\n                                       SPACE\n         L     R7,CWRCFW#              R7 = CFW    WRITES\n         MR    R6,R0\n         DR    R6,R15                  R7 = CFW    WRITE RATE\n         CVD   R7,WA\n         AR    R2,R7                   ACCUMULATE WRITES\n         LR    R4,R7                   ACCUMULATE WRITES\n         MVC   SCFWWR,EDMASKT\n         ED    SCFWWR,WA+5\n                                       SPACE\n         AR    R4,R3                   R4 = CFW    I/O\n         CVD   R4,WA\n         MVC   SCFWIO,EDMASKT\n         ED    SCFWIO,WA+5\n                                       SPACE\n         CVD   R1,WA                   TOTAL READS\n         MVC   STRD,EDMASKT\n         ED    STRD,WA+5\n                                       SPACE\n         CVD   R2,WA                   TOTAL WRITES\n         MVC   STWR,EDMASKT\n         ED    STWR,WA+5\n         AR    R2,R1                   ACCUMULATE\n                                       SPACE\n         L     R7,CINH#                INHIBITS\n         MR    R6,R0\n         DR    R6,R15                  R7 = INHIBIT RATE\n         CVD   R7,WA\n         AR    R2,R7                   ACCUMULATE\n         MVC   SINHIB,EDMASKT\n         ED    SINHIB,WA+5\n                                       SPACE\n         L     R7,CBYP#                BYPASS\n         MR    R6,R0\n         DR    R6,R15                  R7 = BYPASS RATE\n         CVD   R7,WA\n         AR    R2,R7                   ACCUMULATE\n         MVC   SBYPASS,EDMASKT\n         ED    SBYPASS,WA+5\n                                       SPACE\n         CVD   R2,WA                   TOTAL I/O\n         MVC   STIO,EDMASKT\n         ED    STIO,WA+5\n                                       SPACE\n         L     R7,CDFWWR#              R7 = DFW    WRITES\n         MR    R6,R0\n         DR    R6,R15                  R7 = DFW    WRITE RATE\n         CVD   R7,WA\n         LR    R1,R7                   ACCUMULATE\n         MVC   SDFWWRN,EDMASKT\n         ED    SDFWWRN,WA+5\n                                       SPACE\n         L     R7,CDFWWRSQ#            R7 = DFW SEQL WRITES\n         MR    R6,R0\n         DR    R6,R15                  R7 = DFW SEQL WRITE RATE\n         CVD   R7,WA\n         AR    R1,R7                   ACCUMULATE\n         MVC   SDFWSQ,EDMASKT\n         ED    SDFWSQ,WA+5\n                                       SPACE\n         CVD   R1,WA                   DFW I/O RATE\n         MVC   SDFWIO,EDMASKT\n         ED    SDFWIO,WA+5\n                                       SPACE\n         $BOX  'FORMAT HITS',                                          *\n               TITLE='FORMAT HITS'\nHIT_STATS      EQU *\n         LA    R9,DSSR                 DELTA STATS\n         TM    IN_FLGS,$DELTA          Lucky guess?\n         BO    *+4+4\n         LA    R9,CSSR                 NO...CUMULATIVE STATS\n         LA    R0,1000\n         L     R7,CRD#H                R7 = NORMAL READ HITS\n         LR    R3,R7                   R3 = NORMAL READ HITS\n         MR    R6,R0\n         XR    R15,R15\n         L     R4,CRD#                 R4 = NORMAL READ\n         LTR   R4,R4\n         BZ    *+4+2+2\n         DR    R6,R4                   R7 = NORMAL READ%\n         LR    R15,R7                  R15= NORMAL READ%\n         CVD   R15,WA\n         MVC   SNRMRDH,EDMASKP\n         ED    SNRMRDH,WA+5\n                                       SPACE\n         L     R7,CRDSQ#H              R7 = READ SEQL HITS\n         AR    R3,R7                   R3 = NORMAL READ +SEQL HITS\n         MR    R6,R0\n         L     R5,CRDSQ#               R5 = SEQL   READ\n         XR    R15,R15\n         LTR   R5,R5\n         BZ    *+4+2+2\n         DR    R6,R5                   R7 = READ SEQL%\n         LR    R15,R7                  R15= READ SEQL%\n         CVD   R15,WA\n         MVC   SSQLRDH,EDMASKP\n         ED    SSQLRDH,WA+5\n                                       SPACE\n         MR    R2,R0\n         AR    R5,R4\n         XR    R15,R15\n         LTR   R5,R5\n         BZ    *+4+2+2\n         DR    R2,R5\n         LR    R15,R3\n         CVD   R15,WA\n         MVC   STRDH,EDMASKP\n         ED    STRDH,WA+5\n                                       SPACE\n         L     R7,CWR#H                R7 = NORMAL WRITE HITS\n         LR    R3,R7                   R3 = NORMAL WRITE HITS\n         MR    R6,R0\n         L     R4,CWR#                 R4 = NORMAL WRITES\n         XR    R15,R15\n         LTR   R4,R4\n         BZ    *+4+2+2\n         DR    R6,R4                   R7 = NORMAL WRITE%\n         LR    R15,R7\n         CVD   R15,WA\n         MVC   SNRMDFH,EDMASKP\n         ED    SNRMDFH,WA+5\n                                       SPACE\n         L     R7,CWRSQ#H              R7 = WRITE SEQL HITS\n         AR    R3,R7                   R3 = NORMAL WRITE+SEQL HITS\n         MR    R6,R0\n         L     R5,CWRSQ#               R5 = SEQL   READ\n         XR    R15,R15\n         LTR   R5,R5\n         BZ    *+4+2+2\n         DR    R6,R5                   R7 = WRITE SEQL%\n         LR    R15,R7                  R15= WRITE SEQL%\n         CVD   R15,WA\n         MVC   SSQLDFH,EDMASKP\n         ED    SSQLDFH,WA+5\n                                       SPACE\n         MR    R2,R0\n         AR    R5,R4\n         XR    R15,R15\n         LTR   R5,R5\n         BZ    *+4+2+2\n         DR    R2,R5\n         LR    R15,R3                  R15= WRITE%\n         CVD   R15,WA\n         MVC   STDFH,EDMASKP\n         ED    STDFH,WA+5\n                                       SPACE\n         L     R7,CRDCFW#H             R7 = CFW READ HITS\n         LR    R3,R7                   R3 = CFW READ HITS\n         MR    R6,R0\n         L     R4,CRDCFW#              R4 = CFW READS\n         XR    R15,R15\n         LTR   R4,R4\n         BZ    *+4+2+2\n         DR    R6,R4                   R7 = CFW READ%\n         LR    R15,R7                  R15= CFW READ%\n         CVD   R15,WA\n         MVC   SCFWRDH,EDMASKP\n         ED    SCFWRDH,WA+5\n                                       SPACE\n         L     R7,CWRCFW#H             R7 = WRITE CFW HITS\n         AR    R3,R7                   R3 = READ + WRITE CFW HITS\n         MR    R6,R0\n         L     R5,CWRCFW#              R5 = CFW WRITES\n         XR    R15,R15\n         LTR   R5,R5\n         BZ    *+4+2+2\n         DR    R6,R5                   R7 = WRITE CFW%\n         LR    R15,R7                  R15= WRITE CFW%\n         CVD   R15,WA\n         MVC   SCFWWRH,EDMASKP\n         ED    SCFWWRH,WA+5\n                                       SPACE\n         MR    R2,R0\n         AR    R5,R4\n         XR    R15,R15\n         LTR   R5,R5\n         BZ    *+4+2+2\n         DR    R2,R5\n         LR    R15,R3\n         CVD   R15,WA\n         MVC   STCFH,EDMASKP\n         ED    STCFH,WA+5\n                                       SPACE\n         $BOX  'FORMAT MISCELLANEOUS',                                 *\n               TITLE='FORMAT MISCELLANEOUS'\n         LA    R9,DSSR\n         LA    R0,100\n         L     R15,D_DUR               DURATION IN TENTHS\n         L     R7,CDACHE#              R7 = NORMAL STAGES\n         MR    R6,R0\n         DR    R6,R15                  R7 = NORMAL STAGE RATE\n         CVD   R7,WA\n         LR    R1,R7                   ACCUMULATE\n         MVC   SDTCNRM,EDMASKT\n         ED    SDTCNRM,WA+5\n                                       SPACE\n         L     R7,CSQCHE#              R7 = SEQL   STAGES\n         MR    R6,R0\n         DR    R6,R15                  R7 = SEQL   STAGES RATE\n         CVD   R7,WA\n         AR    R1,R7                   ACCUMULATE\n         MVC   SDTCSQ,EDMASKT\n         ED    SDTCSQ,WA+5\n                                       SPACE\n         CVD   R1,WA                   TOTAL STAGE RATE\n         MVC   STDTC,EDMASKT\n         ED    STDTC,WA+5\n                                       SPACE\n         L     R7,CCHEDA#              R7 = DESTAGES\n         MR    R6,R0\n         DR    R6,R15                  R7 = DESTAGE RATE\n         CVD   R7,WA\n         MVC   STCTD,EDMASKT\n         ED    STCTD,WA+5\n                                       SPACE\n         L     R7,CSDSQRD#             R7 = PREREADS\n         MR    R6,R0\n         DR    R6,R15                  R7 = PREREAD RATE\n         CVD   R7,WA\n         MVC   STPRD,EDMASKT\n         ED    STPRD,WA+5\n                                       SPACE\n         LA    R9,CSSR\n         TM    IN_FLGS,$DELTA\n         BZ    *+4+4\n         LA    R9,DSSR\n         LA    R0,10\n         L     R3,CRD#                 READS\n         L     R4,CWR#                 WRITES\n         A     R3,CRDSQ#               READ SEQL\n         A     R4,CWRSQ#               WRITE SEQL\n         A     R3,CRDCFW#              CFW READS\n         A     R4,CWRCFW#              CFW WRITES\n         MR    R2,R0                   10*TOTAL READS\n         L     R5,F9999\n         LTR   R4,R4\n         BZ    *+4+2+2\n         DR    R2,R4                   R3 = READ/WRITE RATIO\n         LR    R5,R3                   R5 = READ/WRITE RATIO\n         CVD   R5,WA\n         MVC   STRW,EDMASKH\n         ED    STRW,WA+5\n         C     R5,F9999\n         BL    *+4+6\n         MVC   STRW,OVFLO\n                                       SPACE\n         L     R3,CRD#H                READ HITS\n         A     R3,CWR#H                WRITE HITS\n         A     R3,CRDSQ#H              READ SEQL HITS\n         A     R3,CWRSQ#H              WRITE SEQL HITS\n         A     R3,CWR#H                WRITE HITS\n         L     R4,CSQCHE#              SEQL STAGES\n         MR    R2,R0                   TIMES 10\n         A     R4,CDACHE#              NORMAL STAGES\n         L     R5,F9999\n         LTR   R4,R4\n         BZ    *+4+2+2\n         DR    R2,R4                   R3 = HITS/STAGE\n         LR    R5,R3                   R5 = HITS/STAGE\n         CVD   R5,WA\n         MVC   SHTSTG,EDMASKH\n         ED    SHTSTG,WA+5\n         C     R5,F9999\n         BL    *+4+6\n         MVC   SHTSTG,OVFLO\n                                       SPACE\n         LA    R0,100\n         L     R4,CWR#                 NORMAL WRITES\n         L     R3,CRTRY#               RETRYS\n         A     R4,CWRSQ#               SEQL WRITES\n         MR    R2,R0\n         XR    R15,R15\n         LTR   R4,R4\n         BZ    *+4+2+2\n         DR    R2,R4                   RETRY%\n         LR    R15,R3                  RETRY%\n         CVD   R15,WA\n         MVC   SRTRYS,EDMASKP\n         ED    SRTRYS,WA+5\n                                       SPACE\nDONE     EQU  *\n         XR    R15,R15\n         TM    D_FLG1,$OFFLINE         OFFLINE DEVICE\n         BZ    *+4+4\n         LA    R15,99                  SHOW OFFLINE\n                                       SPACE\n         L     R13,4(,R13)\n         RETURN (14,12),RC=(15)        AND RETURN\n                                       SPACE\n         $BOX  'FORMAT SWITCHES',TITLE='FORMAT SWITCHES'\n         DS    0D\nFORM_SWCH      EQU *\n         XR    R1,R1\n         LA    R15,8\n         SRDL  R0,8                    BIT MASK IN R1\n         LA    R3,CSWITCH\n         XR    R4,R4\n                                       SPACE\nNEXT_SWCH      EQU *\n         SLDL  R0,1\n         LTR   R0,R0\n         BZ    BUMP\n                                       SPACE\n         ICM   R4,B'0001',0(R3)\n         STCM  R4,B'0001',0(R2)\n                                       SPACE\nBUMP     EQU   *\n         XR    R0,R0\n         LA    R2,1(,R2)\n         LA    R3,1(,R3)\n         BCT   R15,NEXT_SWCH\n                                       SPACE\n         BR    R14                     AND RETURN\n                                       SPACE\n         $BOX  'CONSTANTS',TITLE='CONSTANTS'\n         DS    0D\nXFF      DC    F'-1'\nF100000  DC    F'100000'\nF9999    DC    F'99999'\n                                       SPACE\n$CVT     EQU   16\n$CVTUCBA EQU   X'4E4'\n$UCBDEV  EQU   4\n$UCBF@   EQU   8\n$UCBVOLI EQU   28\n$UCBCHPS EQU   24\n$UCBLPM  EQU   28\n$UCBSTAT EQU   3\n$UCBONLI EQU   B'10000000'\n                                       SPACE\nHEXTAB   DC    C'0123456789ABCDEF'\nCSWITCH  DC    C'ABCDEFGH'\nACTIV    DC    C'Active       '\nNOTACTIV DC    C'Not active   '\nAVAIL    DC    C'Available    '\nNOTAVAIL DC    C'Not available'\nDPLXING  DC    C'Duplexed: '\nDPLX1ST  DC    C' Primary  device'\nDPLX2ND  DC    C'Secondary device'\nPINNED   DC    C'Pinned data'\nOFFLINE  DC    C'Offline'\nCSHORT   DC    C'Short'\nCLONG    DC    C' Long'\nOVFLO    DC    CL7'   ****'\n         DS    0D\nACONDATE DC    V(DCMCONVD)\nEDMASKT  DC    X'40202021204B20'\nEDMASKP  DC    X'40202021204B20'\nEDMASKH  DC    X'40202021204B20'\nEDMASKR  DC    X'40202020202120'\nEDMASKK  DC    X'4020202020202120'\nEDMASKA  DC    X'40202120'\n         SPACE 3\n         $REGS\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MACLIB": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x17\\x7f\\x00\\x98\\x17\\x7f\\x17F\\x05\\x01\\x05\\x01\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-06-26T00:00:00", "modifydate": "1998-06-26T17:46:00", "lines": 1281, "newlines": 1281, "modlines": 0, "user": "SBGOLOB"}, "text": "./ ADD NAME=$AMODE   0100-1998177-1998177-1143-00019-00019-00000-DCM080\n         MACRO\n         $AMODE &MODE,&WORK=R15\n         AIF   ('&MODE' EQ '').ERR1\n         AIF   ('&MODE' NE '24').MODE31\n         LA    &WORK,*+4+2\n         BSM   0,&WORK\n         SPACE\n         MEXIT\n.*\n.MODE31  AIF   ('&MODE' NE '31').ERR2\n         LA    &WORK,*+4+4+2\n         O     &WORK,=X'80000000'\n         BSM   0,&WORK\n         SPACE\n         MEXIT\n.ERR1    MNOTE 8,'Missing MODE'\n         MEXIT\n.ERR2    MNOTE 8,'Invalid MODE. Only 24 or 31 valid'\n         MEND\n./ ADD NAME=$BOX     0100-1998177-1998177-1143-00101-00101-00000-DCM080\n         MACRO\n&LABEL   $BOX  &COMM,&ID=,&TITLE=,&HEAD=,&CTL1=SPACE,&CTL2=SPACE,      -\n               &PRINT=,&HDR=,&CTR=NO\n         GBLB  &BOXID\n         GBLC  &BOXHDR\n         LCLB  &BCTR\n         LCLA  &I,&J,&N\n         LCLC  &BID,&BTITLE,&BCOMM,&BLANK,&CR\n&CR      SETC  'DCM V0.8 Copyright Alfred Nykolyn 1992, 1994 '\n&BLANK   SETC  '                                                       -\n                              '\n&BCTR    SETB  ('&CTR' EQ 'YES')\n.*\n.*       TURN PRINT ON IF NECESSARY\n.*\n         AIF   (T'&PRINT EQ 'O').TESTID\n         PRINT ON\n.*\n.*       PICK UP ID FIELD\n.*\n.TESTID  AIF   ('&ID' EQ '' AND '&LABEL' EQ '').TESTHDR\n         AIF   ('&ID' EQ '' OR '&LABEL' EQ '').TESTPRV\n         MNOTE 4,'BOX001: ID specified twice - label field ignored'\n.TESTPRV AIF   (NOT &BOXID).SETID\n         MNOTE 4,'BOX002: ID already specified - this one ignored'\n         AGO   .TESTHDR\n.SETID   ANOP\n&BOXID   SETB  1\n&BID     SETC  '&ID'\n         AIF   ('&ID' NE '').TESTHDR\n&BID     SETC  '&LABEL'\n.*\n.*       PICK UP HEADER SPECIFICATION\n.*\n.TESTHDR AIF   (T'&HDR EQ 'O' AND T'&HEAD EQ 'O').TESTTTL\n&BOXHDR  SETC  '&HDR&HEAD'\n         AIF   ('&BOXHDR'(1,1) NE '''').TESTTTL\n&BOXHDR  SETC  '&BOXHDR'(2,K'&BOXHDR-2)\n.*\n.*       PICK UP TITLE SPECIFICATION\n.*\n.TESTTTL AIF   (T'&TITLE EQ 'O').TSTCTL1\n&BTITLE  SETC  '&TITLE'\n         AIF   ('&BTITLE'(1,1) NE '''').GENTTL\n&BTITLE  SETC  '&BTITLE'(2,K'&BTITLE-2)\n.GENTTL  ANOP\n&BID     TITLE '&CR&BOXHDR&BTITLE'\n         AGO   .GENCOMM\n.*\n.*       GENERATE LISTING CONTROL IF APPROPRIATE\n.*\n.TSTCTL1 AIF   (T'&CTL1 EQ 'O').GENCOMM\n         &CTL1\n.*\n.*       GENERATE COMMENTS\n.*\n.GENCOMM AIF   (T'&COMM EQ 'O').MEND\n*---------------------------------------------------------------------*\n*                                                                     *\n&N       SETA  N'&SYSLIST\n&I       SETA  1\n.COMLOOP ANOP\n&BCOMM   SETC  '&SYSLIST(&I)'\n         AIF   ('&BCOMM' EQ '' OR '&BCOMM' EQ '''''').NXTCOMM\n         AIF   ('&BCOMM'(1,1) NE '''').TESTLEN\n&BCOMM   SETC  '&BCOMM'(2,K'&BCOMM-2)\n.TESTLEN AIF   (K'&BCOMM LE 56).MNOTE\n&J       SETA  56\n.SCAN    AIF   ('&BCOMM'(&J,1) EQ ' ').MNOTE1\n&J       SETA  &J-1\n         AIF   (&J GE 10).SCAN\n&J       SETA  56\n.MNOTE1  AIF   (&BCTR).CENTRE1\n&BTITLE  SETC  '&BLANK'(1,13).'&BCOMM'(1,&J-1).'&BLANK'\n         AGO   .STAR1\n.CENTRE1 ANOP\n&BTITLE  SETC  '&BLANK'(1,32-&J/2).'&BCOMM'(1,&J-1).'&BLANK'\n.STAR1   ANOP\n&BTITLE  SETC  '&BTITLE'(1,68).'*'\n         MNOTE *,'&BTITLE'\n&BCOMM   SETC  '&BCOMM'(&J+1,K'&BCOMM-&J)\n         AIF   (K'&BCOMM GE 56).TESTLEN\n.MNOTE   AIF   (&BCTR).CENTRE\n&BCOMM   SETC  '&BLANK'(1,13).'&BCOMM'.'&BLANK'\n         AGO   .STAR\n.CENTRE  ANOP\n&BCOMM   SETC  '&BLANK'(1,(63-K'&BCOMM)/2).'&BCOMM'.'&BLANK'\n.STAR    ANOP\n&BCOMM   SETC  '&BCOMM'(1,68).'*'\n         MNOTE *,'&BCOMM'\n.NXTCOMM ANOP\n&I       SETA  &I+1\n         AIF   (&I LE &N).COMLOOP\n*                                                                     *\n*---------------------------------------------------------------------*\n.*\n.*       TEST SECOND LISTING CONTROL\n.*\n         AIF   (T'&CTL2 EQ 'O').MEND\n         &CTL2\n.MEND    MEND\n./ ADD NAME=$CCW     0100-1998177-1998177-1143-00060-00060-00000-DCM080\n         MACRO\n         $CCW\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              CCW  (FORMAT 0)                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nCCW      DSECT\nCCW0     DS    0F\nCCWCC    DS    X                       COMMAND\nCCWDATA  DS    AL3                     DATA ADDRESS\n                                       SPACE\nCCW1     DS    0F\nCCWFLAGS DS    X                       FLAGS\n$DC      EQU   X'80'                   DATA CHAINING\n$CC      EQU   X'40'                   COMMAND CHAINING\n$SLI     EQU   X'20'                   SUPPRESS INCORRECT LENGTH\n$SKIP    EQU   X'10'                   SKIP DATA TRANSFER\n$PCI     EQU   X'08'\n$IDA     EQU   X'04'                   DATA ADDRESS -> IDAW\n$SUSPEND EQU   X'02'                   SUPEND BEFORE EXECUTING THIS CCW\n                                       SPACE\n         DS    X                       RESERVED\nCCWCNT   DS    H                       LENGTH\n         SPACE\nCCWLEN   EQU   *-CCW\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              CCW CODES                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\n$WRITE   EQU   X'01'                   WRITE\n$READ    EQU   X'02'                   READ\n$NOP     EQU   X'03'                   NOOP\n$SNS     EQU   X'04'                   SENSE\n$SNSID   EQU   X'E4'                   SENSE ID\n$SNSSS   EQU   X'54'                   SENSE SUBSYSTEM STATUS\n$RDC     EQU   X'64'                   READ DEVICE CHARACTERISTICS\n$PSF     EQU   X'27'                   PERFORM SUBSYSTEM FUNCTION\n$SEEK    EQU   X'07'                   SEEK\n$SEEKCC  EQU   X'0B'                   SEEK CYL\n$SEEKHD  EQU   X'1B'                   SEEK HEAD\n$SETSEC  EQU   X'23'                   SET SECTOR\n$SIDEQ   EQU   X'31'                   SEARCH ID EQUAL\n$TIC     EQU   X'08'                   TRANSFER IN CHANNEL\n$MT      EQU   X'80'                   MULTI TRACK\n$LR      EQU   X'47'                   LOCATE RECORD\n                                       SPACE\n$WCKD    EQU   X'1D'                   WRITE COUNT KEY AND DATA\n$WD      EQU   X'05'                   WRITE DATA\n$RD      EQU   X'06'                   READ  DATA\n$RT      EQU   X'5E'                   READ  TRACK\n$RSD     EQU   X'3E'                   READ  SUBSYSTEM STATUS\n$RCD     EQU   X'FA'                   READ  CONFIGURATION DATA\n                                       SPACE\n         MEND\n./ ADD NAME=$CMB     0100-1998177-1998177-1143-00020-00020-00000-DCM080\n         MACRO\n         $CMB\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CHANNEL MEASUREMENT BLOCK                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nCMB      DSECT\n         SPACE\nCMBSSCHC DS    XL2                     SSCH COUNT\nCMBSAMPC DS    XL2                     SSCH'S WITH MEASUREMENT\nCMBCONNT DS    F                       DEVICE CONNECT TIME (128*USECS)\nCMBPENDT DS    F                       DEVICE PENDING TIME (128*USECS)\nCMBDISCT DS    F                       DEVICE DISCONN TIME (128*USECS)\n         DS    4F                      RESERVED\n         SPACE\n$CMBLEN  EQU   *-CMB\n         MEND\n./ ADD NAME=$DAB     0100-1998177-1998177-1143-00141-00141-00000-DCM080\n         MACRO\n         $DAB\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        DCM    ANCHOR BLOCK                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nDAB      DSECT\n         DS    72F                     Savarea stack\n         SPACE\nWA       DS    D                       Workarea\nWA2      DS    D                       Workarea\n         SPACE\nD_PATHS  DS    D                       Chpids\n         SPACE\nD_FLAGS  DS    0F                      Flags\nD_FLG1   DS    X                       First flag\n$OPENOK  EQU   B'00000001'             Monitor file open\n$NEWFILE EQU   B'00000010'             Monitor file data create\n$IOERR   EQU   B'00000100'             Excp i/o error\n$OFFLINE EQU   B'00001000'             Device offline\n$TERMERR EQU   B'00010000'             Terminating error\n$FSCRN   EQU   B'00100000'             Full screen message issued\n$SWITCH  EQU   B'01000000'             Switches formatted\n$CAPTURE EQU   B'10000000'             Screen capture log available\n                                       SPACE\nIN_FLGS  DS    X                       Second flag\n$DELTA   EQU   B'00000001'             %statistics- short or long\n$RUN     EQU   B'00000010'             Cycle through all devices\n$AUTO    EQU   B'00000100'             Auto update\n$ALL     EQU   B'00001000'             Report on all devices\n$GENERIC EQU   B'00010000'             Report on device string\n$HIST    EQU   B'00100000'             Rates- short or long\n$NOUPD   EQU   B'01000000'             Do not update history file\n$FINI    EQU   B'10000000'             Finished\n         DS    H\n                                       SPACE\nD_DEVST  DS    H                       Device status\nD_CUST   DS    H                       CU     status\n                                       SPACE\n$DEVS    EQU   64                      Devices/cu\nD_CU     DS    F                       Controller base address\nD_DEV    DS    F                       Device to report\nD_DEVOFF DS    F                       Device offset from base\nD_DEV#   DS    F                       Number of devices to report\nD_DEVF   DS    A                       First active device in cu\nD_DEVL   DS    A                       Last  active\n                                       SPACE\nD_NEW@   DS    A                       New monitor data\nD_OLD@   DS    A                       Old monitor data\nD_FILE@  DS    A                       Old monitor data (from file)\nD_SCRN@  DS    A                       Display area\nD_NMB@   DS    A                       New mb area\nD_OMB@   DS    A                       Old mb area\n                                       SPACE\nD_UCB@   DS    A                       UCB address (MONITOR file)\nD_CMB@   DS    A                       CMB address\nD_UCMBS@ DS    A                       UCB+CMB table\n                                       SPACE\nD_RSD#   DS    F                       # devices returned in rsd\nD_SSDOFF DS    F                       Offset in ssd record\n                                       SPACE\nD_DUR    DS    F                       Interval duration\nD_REPCNT DS    F                       Repeat count (from user)\nD_REPREM DS    F                       Repeat count remaining\n                                       SPACE\nD_SAMPC  DS    F                       Total sample count\nD_CONNT  DS    F                       Total connect time\nD_PENDT  DS    F                       Total pending time\nD_DISCT  DS    F                       Total disconn time\nD_CMBLN  EQU   *-D_SAMPC               Length\n                                       SPACE\nD_SWITCH DS    F                       7980-3 enable/disable switches\nD_ERROR  DS    F                       Error number\nD_OPN    DS    F                       Open/close parm list\nMONDCB   DS    XL(DCBLEN)              Monitor file\nCAPDCB   DS    XL(DCBLEN)              Capture file\nD_JFCB@  DS    A                       Jfcb pointer\n$JFCB    EQU   X'07'\n                                       SPACE\nECB      DS    F                       Ecb for excp\nIOBAREA  DS    XL(IOBLEN)              Iob\n                                       SPACE\nP1CCW    DS    0D\nP1LR     CCW   $LR,*-*,$CC,16          Locate record\nP1RD     CCW   $RD,*-*,$SLI,*-*        Read/write data\nP1WCKDD  CCW   $WCKD,*-*,0,*-*         Write count key data (data )\nP1WCKDC  CCW   $WCKD,*-*,$DC,8         Write count key data (count)\n                                       SPACE\nP2CCW    DS    0D\nP2PSF    CCW   $PSF,*-*,$CC,12         Perform subsystem function\nP2RSD    CCW   $RSD,*-*,$SLI,*-*       Read subsystem data\nP2RDC    CCW   $RDC,*-*,$CC+$SKIP,64   Read device chracteristics\nP2SSS    CCW   $SNSSS,*-*,0,40         Sense subsystem status\n                                       SPACE\nP3RCD    CCW   $RCD,*-*,$CC+$SLI,256   Read configuration data\nP3SNSID  CCW   $SNSID,*-*,0,12         Sense id\n                                       SPACE\nPSFPARM  DS    X'18000000'             Paramters for      0-3\n         DS    X'000001FF'               read subsystem   4-7\n         DS    X'00000000'                 data           8-11\n                                       SPACE\nD_WAIT   DS    F                       Wait interval\nLRPARM   DS    XL16                    Locate record parmameters\n                                       SPACE\nCC1      DS    XL2                     Count + key area\nHH1      DS    XL2\nRR1      DS    XL1\nKK1      DS    XL1\nDL1      DS    XL2\n                                       SPACE\nD_INPUT  DS    CL8                     Input area\n                                       SPACE\nDATEF    DS    0CL14                   Old monitor date/time\nDATEDF   DS    CL6\n         ORG   DATEDF+4\nTIMEF    DS    CL10\nD_SERIAL DS    CL6                     CU serial #\n                                       SPACE\n*   DELTAS OF ALL SUBSYSTEM RECORDS\n*   KEEP IN SAME ORDER AS SSR LAYOUT\n         DS    0D\nDSSR     DS    XL(STATSLEN)            Delta statistics\n                                       SPACE\n         DS    0D\nCSSR     DS    XL(STATSLEN)            Cumulative statistics\n                                       SPACE\nD_ERRMSG DS    CL72                    Error message\n                                       SPACE\n         DS    0D\nSSSAREA  DS    XL64                    Sense subsystem status area\nSNIDAREA DS    XL16                    Sense id\n                                       SPACE\nU_PARM   DS    CL128                   Ucbscan parm list\nU_DEV    DS    H\n         DS    0D\n                                       SPACE\nDABLEN   EQU   *-DAB\n         MEND\n./ ADD NAME=$DCB     0100-1998177-1998177-1143-00020-00020-00000-DCM080\n         MACRO\n         $DCB\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PROTOTYPE DCB                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nD_DCB    DSECT\n*        DCB   MACRF=PM,DSORG=PS,DEVD=DA,RECFM=FB,LRECL=*-*,           *\n               DDNAME=*-*,EXLST=*-*,BLKSIZE=*-*\n         PUSH  PRINT\n         PRINT NOGEN\nMODELDCB DCB   MACRF=PM,DSORG=PS,DEVD=DA,RECFM=FB,LRECL=*-*,           *\n               DDNAME=*-*,EXLST=*-*,BLKSIZE=*-*\n         POP   PRINT\nDCBLEN   EQU   *-MODELDCB\n                                   SPACE\n         MEND\n./ ADD NAME=$DEB     0100-1998177-1998177-1143-00018-00018-00000-DCM080\n         MACRO\n         $DEB\n*---------------------------------------------------------------------*\n*                                                                     *\n*              DEB                                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nDEB      DSECT\nDEBDVMOD EQU   DEB+32,1\nDEBUCBA  EQU   DEB+33,3\nDEBSTRCC EQU   DEB+38,2\nDEBSTRHH EQU   DEB+40,2\nDEBENDCC EQU   DEB+42,2\nDEBENDHH EQU   DEB+44,2\nDEBNMTRK EQU   DEB+46,2\n         SPACE\n         MEND\n./ ADD NAME=$ERRCODE 0100-1998177-1998177-1143-00017-00017-00000-DCM080\n         MACRO\n         $ERRCODE\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              ERROR CODES                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\n$ERR_OPEN      EQU  1                  Open fail\n$ERR_CTLB      EQU  2                  Control block chain error\n$ERR_CU        EQU  3                  Not a 7980-3 control unit\n$ERR_VOL       EQU  4                  Unable to find volume\n$ERR_IO        EQU  9                  I/o error\n$ERR_CHARS     EQU  13                 Invalid characters\n                                       SPACE\n         MEND\n./ ADD NAME=$IC      0100-1998177-1998177-1143-00004-00004-00000-DCM080\n         MACRO\n&LABEL   $IC\n&LABEL   DC    X'13'\n         MEND\n./ ADD NAME=$IOB     0100-1998177-1998177-1143-00067-00067-00000-DCM080\n         MACRO\n         $IOB\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              IOB                                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nIOB      DSECT\n         DS    0F\nIOBFLAG1 DS    X\n$IOBDC   EQU   X'80'               DATA CHAINING\n$IOBCC   EQU   X'40'               COMMAND CHAINING\n$IOBNRL  EQU   X'02'               UN-RELATED REQUEST\n                                   SPACE\nIOBFLAG2 DS    X\nIOBSENSE DS    0H\nIOBSENS0 DS    X\n$CMDREJ  EQU   X'80'               COMMAND REJECT\n$INTREQ  EQU   X'40'               INTERVENTION REQUIRED\n$BUSOUT  EQU   X'20'               BUS OUT PARITY ERROR\n$EQCHK   EQU   X'10'               EQUIPMENT CHECK\n$DATACHK EQU   X'08'               DATA CHECK\n$OVRUN   EQU   X'04'               OVERRUN\nIOBSENS1 DS    X\n$PERMERR EQU   X'80'               PERMANENT ERROR\n$INVALTR EQU   X'40'               INVALID TRACK FORMAT\n$ENDCYL  EQU   X'20'               END OF CYLINDER\n$MSGTOOP EQU   X'10'               MESSAGE TO OPERATOR\n$NRF     EQU   X'08'               NO RECORD FOUND\n$FPROT   EQU   X'04'               FILE PROTECT\n$WRINHIB EQU   X'02'               WRITE INHIBITED\n$IMPREND EQU   X'01'               IMPRECISE END\n                                   SPACE\nIOBECB   DS    A                   ECB ADDRESS\n$IOOK    EQU   X'7F'               I/O COMPLETED OK\n$IOPERM  EQU   X'41'               I/O COMPLETED WITH PERMANENT ERROR\n$IOXTNT  EQU   X'42'               EXTENT VIOLATION\n$IOINT   EQU   X'44'               CHANNEL PGM INTERCEPTED\n$IORQPUR EQU   X'48'               CHANNEL PGM INTERCEPTED\n$IO4B    EQU   X'4B'\n$IORCVF  EQU   X'4F'               ERROR RECOVERY ENTERED BUT FAILED\n                                   SPACE\nIOBCSW   DS    2F                  CSW\n         ORG   IOBCSW\nIOBCSW1  DS    F\nIOBCSW2  DS    F\n                                   SPACE\nIOBCCW   DS    A                   CCW ADDRESS\nIOBDCB   DS    A                   DCB ADDRESS\n         DC    F'0'\n         DC    H'0'\n         DC    H'0'\n                                   SPACE\nIOBSEEK  DS    0D\nIOBM     DS    X\nIOBBCHR  DS    0XL7\nIOBBB    DS    XL2\nIOBCCHHR DS    0XL5\nIOBCC    DS    XL2\nIOBHH    DS    XL2\nIOBR     DS    X\n         SPACE\nIOBLEN   EQU   *-IOB\n         SPACE\n         MEND\n./ ADD NAME=$LRD     0100-1998177-1998177-1143-00044-00044-00000-DCM080\n         MACRO\n         $LRD\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        LOCATE RECORD DESCRIPTOR                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nLRD      DSECT\nLR_OP    DC    X'00'                   Orientation + operation\n$LR_CA   EQU   B'00000000'             Count area orientation\n$LR_HA   EQU   B'01000000'             Home  addr orientation\n$LR_DA   EQU   B'10000000'             Data  area orientation\n$LR_IN   EQU   B'11000000'             Index      orientation\n                                       SPACE\n$LR_OR   EQU   B'00000000'             Orient\n$LR_WD   EQU   B'00000001'             Write data\n$LR_FW   EQU   B'00000011'             Format write\n$LR_RD   EQU   B'00000110'             Read\n$LR_WT   EQU   B'00001011'             Write track\n$LR_RT   EQU   B'00001100'             Read tracks\n$LR_RE   EQU   B'00010110'             Read\n                                       SPACE\nLR_AUX   DC    X'00'\n$LR_TLF  EQU   B'10000000'             TLF present\n$LR_RCNT EQU   B'00000001'             Last ccw is a read count\n                                       SPACE\n         DC    X'00'\nLR_COUNT DC    X'00'                   # following ccws\nLR_SEEK  DC    XL4'00'                 Seek address\n         ORG   LR_SEEK\nLR_CC0   DC    XL2'00'                 Cyl\nLR_HH0   DC    XL2'00'                 Track\n                                       SPACE\nLR_SRCH  DC    XL5'00'                 Search addrress\n         ORG   LR_SRCH\nLR_CC1   DC    XL2'00'                 Cyl\nLR_HH1   DC    XL2'00'                 Track\nLR_R     DC    X'00'                   Record\nLR_SEC   DC    X'00'                   Sector\nLR_TLF   DC    XL2'00'                 Transfer length factor\n         SPACE\n         MEND\n./ ADD NAME=$MODID   0100-1998177-1998177-1143-00019-00019-00000-DCM080\n         MACRO\n         $MODID &BR=NO\n         LCLC  &NDX\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&BR' EQ 'NO').NOBR\n         B     AN&NDX-*(,R15)\n.NOBR    SPACE 1\n.*       PUSH  PRINT\n.*       PRINT DATA\n         DC    AL1(8+8)                Set id length\n         DC    CL8'&SYSECT'            Csect name\n         DC    CL8'&SYSDATE'           Assembly date\n         DC    CL47' DCM V0.8 (C) COPYRIGHT ALFRED NYKOLYN 1992 1994'\n         SPACE 1\n.*       POP   PRINT\n         AIF   ('&BR' EQ 'NO').NOLAB\nAN&NDX   DS    0H                      Start it up\n.NOLAB   ANOP\n         MEND\n./ ADD NAME=$MONREC  0100-1998177-1998177-1143-00023-00023-00000-DCM080\n         MACRO\n         $MONREC\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        MONITOR RECORD                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nMONREC   DSECT\n         SPACE\nMON_ID   DC    CL4'*DCM'               Identifier\nMON_LEN  DS    F                       Record length 6144+24=6168\nMON_DTE  DS    PL4                     Date yymmm\nMON_TME  DS    F                       Time hhmmsshh\nMON_TOD  DS    2F                      Time in tod format\nMON_CUA  DS    F                       Control unit address\n         DS    F\n$MONHDLN EQU   *-MONREC                Header length\n         SPACE\nMON_SSR  DS    0D                      Subsystem status records start\n         SPACE\n         MEND\n./ ADD NAME=$MORG    0100-1998177-1998177-1143-00019-00019-00000-DCM080\n         MACRO\n&LABEL   $MORG  &MOD,&FILL=X'00'\n.*    $MORG(modulus origin) - macro to change location ctr to\n.*        specified boundary\n.*     LABEL - optional (defaults to &SYSECT) - specifies origin\n.*        of module to be $MORG'd\n.*     MOD - required. specifies modulus desired\n.*     FILL - specifies fill characters desired\n         AIF   (T'&MOD EQ 'O').ERR01\n         AIF   (T'&LABEL EQ 'O').CSECT\n         DC    (((*-&LABEL-1)/&MOD)*&MOD+&MOD+&LABEL-*)&FILL\n         MEXIT\n.CSECT   AIF   ('&SYSECT' EQ '').ERR02\n         DC    (((*-&SYSECT-1)/&MOD)*&MOD+&MOD+&SYSECT-*)&FILL\n         MEXIT\n.ERR01   MNOTE 4,'Modulus value omitted - but is required'\n         MEXIT\n.ERR02   MNOTE 4,'Lable omitted in blank csect'\n         MEND\n./ ADD NAME=$OPEN    0100-1998177-1998177-1143-00027-00027-00000-DCM080\n         MACRO\n         $OPEN\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              OPEN/CLOSE  PARAMETER LIST                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nOPNCLSD  DSECT\n         OPEN  *-*,MF=L\n         SPACE\n$LAST    EQU   X'80'\n$DISP    EQU   X'00'\n$LEAVE   EQU   X'30'\n$REREAD  EQU   X'10'\n$INPUT   EQU   X'00'\n$OUTPUT  EQU   X'0F'\n$UPDAT   EQU   X'04'\n$OUTIN   EQU   X'07'\n$INOUT   EQU   X'03'\n$RDBACK  EQU   X'01'\n$OUTINX  EQU   X'06'\n         SPACE\nOPNCLSL  EQU   *-OPNCLSD\n         SPACE\n         MEND\n./ ADD NAME=$RCDD    0100-1998177-1998177-1143-00067-00067-00000-DCM080\n         MACRO\n         $RCDD\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        READ CONFIGURATION DATA                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nRCD      DSECT\n         SPACE\nRCDFLAG1 DS    X                       Flags\nRCDNED1  DS    X                       Node element descriptor\nRCDCLS1  DS    X                       Class\n         DS    X\nRCDTYP1  DS    XL6                     Device type\nRCDMODL1 DS    XL3                     Device model\nRCDMAN1  DS    CL3                     Hda manufacurer\nRCDLOC1  DS    CL2                     Hda manufacurer location\nRCDSER1  DS    CL12                    Hda serial#\nRCDTAG1  DS    XL2                     Id tag\n                                       SPACE\nRCDFLAG2 DS    X                       Flags\nRCDNED2  DS    X                       Node element descriptor\n         DS    XL2\nRCDTYP2  DS    XL6                     Device type\nRCDMODL2 DS    XL3                     Device model\nRCDMAN2  DS    CL3                     Dasd manufacurer\nRCDLOC2  DS    CL2                     Dasd manufacurer location\nRCDSER2  DS    CL12                    Dasd serial#\nRCDTAG2  DS    XL2                     Id tag\n                                       SPACE\nRCDFLAG3 DS    X                       Flags\nRCDNED3  DS    X                       Node element descriptor\n         DS    XL2\nRCDTYP3  DS    XL6                     Device type\nRCDMODL3 DS    XL3                     Device model\nRCDMAN3  DS    CL3                     SCU manufacurer\nRCDLOC3  DS    CL2                     SCU manufacurer location\nRCDSER3  DS    CL12                    SCU serial#\nRCDTAG3  DS    XL2                     ID tag\n                                       SPACE\nRCDFLAG4 DS    X                       Flags\nRCDNED4  DS    X                       Node element descriptor\n         DC    XL2'00001'\nRCDTYP4  DS    XL6                     Device type\n         DC    CL3' '                  Blanks\nRCDMAN4  DS    CL3                     Scu manufacurer\nRCDLOC4  DS    CL2                     Scu manufacurer location\nRCDSER4  DS    0CL12                   Scu serial#\n         DS    CL6                     Scu serial# - 1st half\nRCDSER24 DS    CL6                     Scu serial# - 2nd half\nRCDTAG4  DS    XL2                     Id tag\n         DS    XL96                    Zeros\n                                       SPACE\nRCDFLAG5 DS    X                       Flags\nRCDSEL4  DS    X                       Node element descriptor\nRCDINTF  DS    XL2                     Interface id\n         DS    XL4'00'                 Zeros\nRCDSSID  DS    XL2                     Ssid\nRCDCLID  DS    X                       Cluster id\nRCDCUA   DS    X                       Unit address\nRCDLDVA  DS    X                       Logical device address\nRCDPDVA  DS    X 2                     Physical device address\n         DS    XL18'00'                Zeros\n$RCDLEN  EQU   *-RCD\n         MEND\n./ ADD NAME=$RDCD    0100-1998177-1998177-1143-00056-00056-00000-DCM080\n         MACRO\n         $RDCD\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        READ DEVICE CHARACTERISTI CS                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nRDC      DSECT\n         SPACE\nRDCCUTYP DS    XL2                     Cu type\nRDCCUMOD DS    X                       Cu model\nRDCDVTYP DS    XL2                     Device type\nRDCDVMOD DS    X                       Device model\n                                       SPACE\nRDCCTL1  DS    X                       Control facilities 1\n$RDCDEV  EQU   B'10000000'             3380 j, k or 3390\n$RDCRDTR EQU   B'01000000'             Read track support\n$RDCRD   EQU   B'00010000'             Read       support\n                                       SPACE\nRDCCTL2  DS    X                       Control facilities 2\nRDCCTL3  DS    X                       Control facilities 3\n                                       SPACE\nRDCCTL4  DS    X                       Control facilities 3\n$RDCCFW  EQU   B'10000000'             CFW              SUPPORTED\n$RDCCASH EQU   B'00010000'             Cache            supported\n$RDCDUAL EQU   B'00001000'             Dual copy        supported\n$RDCDFW  EQU   B'00000100'             DFW              SUPPORTED\n$RDCRA   EQU   B'00000010'             Reset allegiance supported\n$RDCSN32 EQU   B'00000001'             32 byte sense    supported\n                                       SPACE\nRDCCLASS DS    X                       Device class code\nRDCDVTYC DS    X                       Device type code\nRDCPRI#  DS    XL2                     # primary cyls\nRDCTRK#  DS    XL2                     # tracks/cyl\nRDCSEC#  DS    X                       # sectors\nRDCUTRK  DS    XL3                     Useable track length\nRDCHALN  DS    XL2                     HA + R0 LENGTH\nRDCCAP1  DS    X                       Track capacity calc 1\nRDCCAP2  DS    XL5                     Track capacity calc 2\nRDCALT   DS    XL2                     First alt cylinder\nRDCALT#  DS    XL2                     # alternate tracks\nRDCDIAG  DS    XL2                     First diag cyl\nRDCDIAG# DS    XL2                     # diag tracks\nRDCDVSP  DS    XL2                     First device support cyl\nRDCDVSP# DS    XL2                     # device support tracks\nRDCMDR   DS    X                       MDR ID\nRDCOBR   DS    X                       OBR ID\nRDCSCUTY DS    X 2                     SC TYPE CODE\n         DS    X\nRDCMAXLN DS    XL2                     Max r0 data length\n         DS    XL18\n                                       SPACE\n$RDCLEN  EQU   *-RDC\n         MEND\n./ ADD NAME=$REGS    0100-1998177-1998177-1143-00026-00026-00000-DCM080\n         MACRO\n         $REGS\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*              R E G I S T E R S                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         MEND\n./ ADD NAME=$SBA     0100-1998177-1998177-1143-00047-00047-00000-DCM080\n         MACRO\n&LABEL   $SBA  &ROW,&COL,&SF=\n.*   Macro to generate buffer addresses for 3270\n.*   Use as follows:\n.*        $SBA   X,Y\n.*   or   $SBA   X,Y,SF=U\n.*   where X,Y specify a buffer address in row-column form\n.*   and SF indicates a start field.\n         LCLA  &A,&B,&J\n         AIF   ('&SYSLIST(1)' EQ '').ERR01\n         AIF   (N'&SYSLIST NE 2).ERR02\n         AIF   (&ROW GT 24 OR &ROW EQ 0).ERR03\n         AIF   (&COL GT 80 OR &COL EQ 0).ERR04\n&B       SETA  80*(&ROW-1)+&COL-1\n         AIF   (&B LT 64).SETHI\n&A       SETA  &B/64\n&B       SETA  &B-64*&A\n.SETHI   ANOP\n&A       SETA  &A+64\n&B       SETA  &B+64\n&J       SETA  &A-(&A/64)*64\n         AIF   (&J EQ 0 OR &J GE 58).TESTB\n         AIF   (&J GE 10 AND &J LE 16).TESTB\n         AIF   (&J GE 26 AND &J LE 33).TESTB\n         AIF   (&J GE 42 AND &J LE 47).TESTB\n&A       SETA  &A+128\n.TESTB   ANOP\n&J       SETA  &B-(&B/64)*64\n         AIF   (&J EQ 0 OR &J GE 58).GEN\n         AIF   (&J GE 10 AND &J LE 16).GEN\n         AIF   (&J GE 26 AND &J LE 33).GEN\n         AIF   (&J GE 42 AND &J LE 47).GEN\n&B       SETA  &B+128\n.GEN     ANOP\n&LABEL   DC    AL1(17),AL1(&A,&B)\n         AIF   (T'&SF EQ 'O').MEXIT\n         $SF   &SF(1),&SF(2),&SF(3),&SF(4),&SF(5)\n.MEXIT   MEXIT\n.ERR01   MNOTE 8,'Buffer address omitted'\n         MEXIT\n.ERR02   MNOTE 8,'Incorrect number of operands (must be 2)'\n         MEXIT\n.ERR03   MNOTE 8,'Row number &ROW is not in range 1-24'\n         MEXIT\n.ERR04   MNOTE 8,'Column number &COL is not in range 1-80'\n         MEXIT\n         MEND\n./ ADD NAME=$SCREEN  0100-1998177-1998177-1143-00211-00211-00000-DCM080\n         MACRO\n         $SCREEN   &DSECT=YES\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SCREEN DESCRIPTOR                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\n         AIF   ('&DSECT' NE 'YES').NODSECT\nSCREEN   DSECT\n.NODSECT ANOP\nSC_HDR   DC    X'C3'                   PROLOGUE\n         $SBA  1,1,SF=(HI,P)\nSCREF    DC    C'Auto'\nSCREF#   DC    CL4' >10'\n         $SBA  1,20,SF=(HI,P)\n         DC    C'Dirt Cheap Monitor V0.8'\n         $SBA  1,64,SF=(LO,P)\nSCDATE   DC    CL5' '\nSCTIME   DC    CL9' '\n         $SBA  2,1,SF=(LO,P)\n         DC    C'Devices '\nSDEVICES DC    XL10'00'\n         DC    C'  Ssid '\nSCSSID   DC    CL4' '\n         $SBA  2,40,SF=(LO,P)\n         DC    C'I/O rates measured from'\n         $SBA  2,64,SF=(LO,P)\nSODATE   DC    CL5' '\nSOTIME   DC    CL9' '\n         $SBA  3,1,SF=(LO,P)\n         DC    C' Volume '\nSVOL     DC    CL6' '\n         DC    C'   DevAddr '\nSDEV0    DC    CL12' '\n         ORG   SDEV0+5\nSDEV1    DC    CL7' '\n         $SBA  3,40,SF=(LO,P)\n         DC    C'SSCH rate'\nSIOCH    DC    CL7' '\n         DC    C'/s'\n         $SBA  4,1,SF=(LO,P)\n         DC    C'  Paths '\nSPATHS   DC    CL24' '\n         $SBA  4,40,SF=(LO,P)\nSDPLX    DC    C'Duplexed: '\nSDPLPS   DC    C'Secondary device'\n         DC    C' '\nSDPLDEV  DC    CL3' '\nSDPLLN   EQU   *-SDPLX\n         $SBA  5,1,SF=(LO,P)\n         DC    C'Cache: '\nSCASHST  DC    C'Not Available'\n         $SBA  5,25,SF=(LO,P)\n         DC    C'DFW: '\nSDFWST   DC    C'Not available'\n         $SBA  5,48,SF=(HI,P)\nSPINST   DC    C'Pinned data'\n         $SBA  7,1,SF=(LO,P)\n         DC    C'   I/O time(ms)'\nSIOTT    DC    CL7' '\n         DC    C'   Pend'\nSIOPT    DC    CL7' '\n         DC    C'   Disc'\nSIODT    DC    CL7' '\n         DC    C'   Conn'\nSIOCT    DC    CL7' '\n         $SBA  8,1,SF=(LO,P)\n         DC    C'     I/O'\nSTIO     DC    CL7' '\n         DC    C'/s     Reads'\nSTRD     DC    CL7' '\n         DC    C'/s    Writes'\nSTWR     DC    CL7' '\n         DC    C'/s '\n         $SBA  8,60\nSDELTAR  DC    C'Short'\n         DC    C' term I/O rates'\n         $SBA  9,1,SF=(LO,P)\n         DC    C'  Normal'\nSNIO     DC    CL7' '\n         DC    C'/s     Reads'\nSNRD     DC    CL7' '\n         DC    C'/s    Writes'\nSNWR     DC    CL7' '\n         DC    C'/s '\n         $SBA  9,60\nSDELTAP  DC    C'Short'\n         DC    C' term hit%'\n         $SBA  10,1,SF=(LO,P)\n         DC    C'    Seql'\nSSQ      DC    CL7' '\n         DC    C'/s     Reads'\nSSQRD    DC    CL7' '\n         DC    C'/s    Writes'\nSSQWR    DC    CL7' '\n         DC    C'/s'\n         $SBA  11,1,SF=(LO,P)\n         DC    C'     CFW'\nSCFWIO   DC    CL7' '\n         DC    C'/s     Reads'\nSCFWRD   DC    CL7' '\n         DC    C'/s    Writes'\nSCFWWR   DC    CL7' '\n         DC    C'/s '\n         $SBA  12,1,SF=(LO,P)\n         DC    C'     DFW'\nSDFWIO   DC    CL7' '\n         DC    C'/s    Normal'\nSDFWWRN  DC    CL7' '\n         DC    C'/s      Seql'\nSDFWSQ   DC    CL7' '\n         DC    C'/s '\nSSWCHS   EQU   *\n         $SBA  10,66\n         DC    C'--Switches--'\n         $SBA  11,66\n         DC    C'SD0: '\nSSWCH0   DC    CL8' '\n         $SBA  12,66\n         DC    C'SD1: '\nSSWCH1   DC    CL8' '\n         $SBA  13,66\n         DC    C'SD2: '\nSSWCH2   DC    CL8' '\n         $SBA  14,66\n         DC    C'SD3: '\nSSWCH3   DC    CL8' '\n$SWCHLEN EQU   *-SSWCHS\n         $SBA  13,1,SF=(LO,P)\n         DC    C'  Bypass'\nSBYPASS  DC    CL7' '\n         DC    C'/s   Inhibit'\nSINHIB   DC    CL7' '\n         DC    C'/s'\n         $SBA  15,60\n         DC    C'CU serial#   '\nSSERIAL# DC    CL6' '\n         $SBA  14,1,SF=(LO,P)\n         DC    C'  Stages'\nSTDTC    DC    CL7' '\n         DC    C'/s    Normal'\nSDTCNRM  DC    CL7' '\n         DC    C'/s  Seql '\nSDTCSQ   DC    CL7' '\n         DC    C'/s'\n         $SBA  15,1,SF=(LO,P)\n         DC    C'DeStages'\nSTCTD    DC    CL7' '\n         DC    C'/s'\n         DC    C'  PreReads'\nSTPRD    DC    CL7' '\n         DC    C'/s'\n         $SBA  16,1\n         DC    C'Read Hit%'\nSTRDH    DC    CL7' '\n         DC    C'     Normal%'\nSNRMRDH  DC    CL7' '\n         DC    C'    Seql%'\nSSQLRDH  DC    CL7' '\n         $SBA  16,55\n         DC    C'Cache installed'\nSCAINST  DC    CL8' '\n         DC    C'K'\n         $SBA  17,1\n         DC    C' CFW Hit%'\nSTCFH    DC    CL7' '\n         DC    C'       Read%'\nSCFWRDH  DC    CL7' '\n         DC    C'   Write%'\nSCFWWRH  DC    CL7' '\n         $SBA  17,55\n         DC    C'Cache available'\nSCAAVAIL DC    CL8' '\n         DC    C'K'\n         $SBA  18,1\n         DC    C' DFW Hit%'\nSTDFH    DC    CL7' '\n         DC    C'     Normal%'\nSNRMDFH  DC    CL7' '\n         DC    C'    Seql%'\nSSQLDFH  DC    CL7' '\n         $SBA  18,55\n         DC    C'  NVS installed'\nSNVSINST DC    CL8' '\n         DC    C'K'\n         $SBA  19,1\n         DC    C'R/W ratio'\nSTRW     DC    CL7' '\n         DC    C'  Hits/Stage'\nSHTSTG   DC    CL7' '\n         DC    C'   Retry%'\nSRTRYS   DC    CL7' '\n         $SBA  19,55\n         DC    C'    Pinned data'\nSPINNVS  DC    CL8' '\n         DC    C'K'\n         $SBA  21,1,SF=(LO,P)\n         DC    C'Enter: SR, LR, SH, LH, All, Onl, '\n         DC    C'Auto, <dev-addr>, <volume> or End'\n         $SBA  22,8,SF=(LO,U,MDT)\n         DC    CL6' '\n         $SBA  22,15,SF=(HI,P)\n         $SBA  24,1\nSERRMSG  DC    XL72'00'\n         $SBA  22,9\n         $IC\n$SCRNLEN EQU   *-SC_HDR\n         SPACE\n         MEND\n./ ADD NAME=$SF      0100-1998177-1998177-1143-00066-00066-00000-DCM080\n         MACRO\n&LABEL   $SF\n.*    Macro to generate field seperators for 3270\n.*    use:   $SF   U,LO,A,MDT\n.*                 P HI N\n.*                   NO S\n.*    where U/P specify unprotected/protected; LO/HI/NO specify\n.*    display intensity; A/N/S sepcify alphanumeric/numeric/skip;\n.*    MDT specifies that modified data tag is to be on.\n.*    Operands may appear in any order\n         LCLA  &PROT,&INTEN,&NUM,&MDT,&SF,&I\n         LCLC  &OP\n&SF      SETA  64\n&I       SETA  1\n.LOOP    AIF   ('&SYSLIST(&I)' EQ '').NEXT\n&OP      SETC  '&SYSLIST(&I)'\n         AIF   ('&OP' NE 'U' AND '&OP' NE 'P').TINTEN\n         AIF   (&PROT NE 0).ERPROT\n&PROT    SETA  &I\n         AIF   ('&OP' EQ 'U').NEXT\n&SF      SETA  &SF+32\n         AGO   .NEXT\n.TINTEN  AIF   ('&OP' NE 'HI' AND '&OP' NE 'LO' AND '&OP' NE 'NO').TNUM\n         AIF   (&INTEN NE 0).ERINTEN\n&INTEN   SETA  &I\n         AIF   ('&OP' EQ 'LO').NEXT\n&SF      SETA  &SF+8\n         AIF   ('&OP' EQ 'HI').NEXT\n&SF      SETA  &SF+4\n         AGO   .NEXT\n.TNUM    AIF   ('&OP' NE 'N' AND '&OP' NE 'A' AND '&OP' NE 'S').TMDT\n         AIF   (&NUM NE 0).ERNUM\n&NUM     SETA  &I\n         AIF   ('&OP' EQ 'A').NEXT\n&SF      SETA  &SF+16\n         AGO   .NEXT\n.TMDT    AIF   ('&OP' NE 'MDT').ERUNKN\n         AIF   (&MDT NE 0).ERMDT\n&MDT     SETA  &I\n&SF      SETA  &SF+1\n.NEXT    ANOP\n&I       SETA  &I+1\n         AIF   (&I LE N'&SYSLIST).LOOP\n&I       SETA  &SF-(&SF/64)*64\n         AIF   (&I EQ 0 OR &I GE 58).GEN\n         AIF   (&I GE 10 AND &I LE 16).GEN\n         AIF   (&I GE 26 AND &I LE 33).GEN\n         AIF   (&I GE 42 AND &I LE 47).GEN\n&SF      SETA  &SF+128\n.GEN     ANOP\n&LABEL   DC    AL1(29),AL1(&SF)\n         MEXIT\n.ERPROT  MNOTE 8,'Operand &I (&OP) ignored - &SYSLIST(&PROT) already sp-\n               ecified'\n         AGO   .NEXT\n.ERNUM   MNOTE 8,'Operand &I (&OP) ignored - &SYSLIST(&NUM) already spe-\n               cified'\n         AGO   .NEXT\n.ERINTEN MNOTE 8,'Operand &I (&OP) ignored - &SYSLIST(&INTEN) already s-\n               pecified'\n         AGO   .NEXT\n.ERMDT   MNOTE 8,'Operand &I ignored - MDT already specified'\n         AGO   .NEXT\n.ERUNKN  MNOTE 8,'Operand &I (&OP) ignored - unknown specification'\n         AGO   .NEXT\n         MEND\n./ ADD NAME=$SPSD    0100-1998177-1998177-1143-00032-00032-00000-DCM080\n         MACRO\n         $SPSD\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        STORAG PATH STATUS RECORD                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nSPS      DSECT\n*    STORAGE PATH 0\nSPSFLAG0 DS    X                       Storage path status\nSPSCHP0  DS    X                       Channels configured\nSPSSWCH0 DS    X                       Enable/disable switches\nSPSFENC0 DS    X                       Channels fenced\n*    STORAGE PATH 1\nSPSFLAG1 DS    X                       Storage path status\nSPSCHP1  DS    X                       Channels configured\nSPSSWCH1 DS    X                       Enable/disable switches\nSPSFENC1 DS    X                       Channels fenced\n*    STORAGE PATH 2\nSPSFLAG2 DS    X                       Storage path status\nSPSCHP2  DS    X                       Channels configured\nSPSSWCH2 DS    X                       Enable/disable switches\nSPSFENC2 DS    X                       Channels fenced\n*    STORAGE PATH 3\nSPSFLAG3 DS    X                       Storage path status\nSPSCHP3  DS    X                       Channels configured\nSPSSWCH3 DS    X                       Enable/disable switches\nSPSFENC3 DS    X                       Channels fenced\nSPSLEN   EQU   *-SPS\n         MEND\n./ ADD NAME=$SSRD    0100-1998177-1998177-1143-00052-00052-00000-DCM080\n         MACRO\n         $SSRD\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SUBSYSTEM STATUS RECORD                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nSSR      DSECT\n         SPACE\nS_FLAGS  DS    XL1                     Flags\n$NOCACHE EQU   B'10000000'             Cache not available\nUA       DS    X                       Device unit address\nDEVSTAT1 DS    XL2                     Device status - group 1\n         SPACE\nRD#      DS    F                       Read or search I/O's\nRD#H     DS    F                       Read or search cache hits\nWR#      DS    F                       Write normal I/O's\nWR#H     DS    F                       DFW I/O hits\nRDSQ#    DS    F                       Read sequential I/O's\nRDSQ#H   DS    F                       Read sequential hits\nWRSQ#    DS    F                       Write sequential I/O's\nWRSQ#H   DS    F                       Write sequential hits\nRDCFW#   DS    F                       Read CFW I/O's\nRDCFW#H  DS    F                       Read CFW hits\nWRCFW#   DS    F                       Write CFW I/O's\nWRCFW#H  DS    F                       Write CFW hits\nINH#     DS    F                       Inhibit cache load I/O's\nBYP#     DS    F                       Bypass cache I/O's\nSQCHE#   DS    F                       Seqential dasd to cache I/O's\nDACHE#   DS    F                       Dasd to cache I/O's (non-seql)\nCHEDA#   DS    F                       Destages\nRTRY#    DS    F                       DFW direct to dasd - retrys\nDFWWR#   DS    F                       DFW write normal I/O's\nDFWWRSQ# DS    F                       DFW write sequential I/O's\n         DS    F\nSDSQRD#  DS    F                       Seql-detected sequential access\n*                                        read I/O's - prereads\nDEVSTAT2 DS    X                       Device status - group 2\n         DS    X\nSSID     DS    XL2                     Subsystem id\nSSRMLEN  EQU   *-SSR                   Length for monitor record\n                                       SPACE\nSWRE     DS    F                       Write chains received on\n*                                        an escon port\nSWREH    DS    F                       Write hits on escon ports\nSCFWNP   DS    F                       # operations that did not\n*                                        promote a track because\n*                                        ther were no free segments\nSSRLEN   EQU   *-SSR\n         MEND\n./ ADD NAME=$SSSD    0100-1998177-1998177-1143-00045-00045-00000-DCM080\n         MACRO\n         $SSSD\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SENSE SUBSYSTEM STATUS RE CORD                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nSSS      DSECT\n         SPACE\nSSSMODEL DS    X                       3990 Model + features\nSSSUA    DS    X                       Device unit address\nSSSDEV#  DS    X                       Number of devices\nSSSSTAT# DS    X                       # stats sets/device\nSSSOCHE  DS    X                       Overall cache status\n$CACHEAC EQU   B'11100000'             If zero, cache active\n                                       SPACE\nSSSONVS  DS    X                       Overall NVS   status\n$NVSAC   EQU   B'11000000'             If zero, NVS   active\n                                       SPACE\nPSTATLEN DS    XL2                     Performance stats length\n         DS    XL2\nCFCACHE  DS    XL4                     Configured cache capacity\nAVCACHE  DS    XL4                     Available  cache capacity\nPINCACHE DS    XL4                     Pinned cache\nOFFCACHE DS    XL4                     Offline cache capacity\n                                       SPACE\nSSSSTAT1 DS    X                       Device status\n$DCASHAC EQU   B'11000000'             If zero, cache active\n$DDFWAC  EQU   B'00110000'             If zero, DFW active\n$DDPLXP  EQU   B'00001000'             Primary   (duplex pair)\n$DDPLXS  EQU   B'00000100'             Secondary (duplex pair)\n$DDPLXST EQU   B'00000011'             If zero, duplex pair available\n                                       SPACE\nSSSSTAT2 DS    X                       Device status\n$PINST   EQU   B'11000000'             If zero, no pinned data\n                                       SPACE\nCFNVS    DS    XL4                     Configured NVS\nPINNVS   DS    XL4                     Pinned NVS ntial hits\nSSSSTAT3 DS    X                       Device status\n         DS    X\nSSSSSID  DS    XL2                     Subsystem id\nSSSLEN   EQU   *-SSS\n         MEND\n./ ADD NAME=$STATSD  0100-1998177-1998177-1143-00036-00036-00000-DCM080\n         MACRO\n         $STATSD\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SENSE SUBSYSTEM STATISTICS DESCRIPTOR                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nSTATSD   DSECT\n*   KEEP IN SAME ORDER AS SSR LAYOUT\nCRD#     DS    F                   NR  Read or search I/O's\nCRD#H    DS    F                       Read or search cache hits\nCWR#     DS    F                   NW  Write normal I/O's\nCWR#H    DS    F                       DFW I/O hits\nCRDSQ#   DS    F                   SR  Read sequential I/O's\nCRDSQ#H  DS    F                       Read sequential hits\nCWRSQ#   DS    F                   SW  Write sequential I/O's\nCWRSQ#H  DS    F                       Write sequential hits\nCRDCFW#  DS    F                   CR  Read CFW I/O's\nCRDCFW#H DS    F                       Read CFW hits\nCWRCFW#  DS    F                   CW  Write CFW I/O's\nCWRCFW#H DS    F                       Write CFW hits\nCINH#    DS    F                   I   Inhibit cache load I/O's\nCBYP#    DS    F                   B   Bypass cache I/O's\nCSQCHE#  DS    F                       Seqential dasd to cache I/O's\nCDACHE#  DS    F                       Dasd to cache I/O's (non-seql)\nCCHEDA#  DS    F                       Destages\nCRTRY#   DS    F                       DFW direct to dasd - retrys\nCDFWWR#  DS    F                       DFW write normal I/O's\nCDFWWRSQ#  DS  F                       DFW write sequential I/O's\n         DS    F\nCSDSQRD# DS    F                       Seql-detected sequential access\nSTATSLEN EQU   *-STATSD\n                                       SPACE\n         MEND\n./ ADD NAME=$UCMBS   0100-1998177-1998177-1143-00018-00018-00000-DCM080\n         MACRO\n         $UCMBS\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        UCMB   ADDRESS TABLE                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nUCMBS    DSECT\nU_UCB@   DS    A                       UCB address\nU_CMB@   DS    A                       CMB address\nU_UCBPFX DS    CL48                    UCB prefix copy\nU_UCB    DS    CL48                    UCB        copy\n         DS    CL24                    Pad to length 128\n$UCMBLEN EQU   *-UCMBS                 Length\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "README": {"ttr": 2308, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x17o\\x00\\x98\\x17o\\x19\\x10\\x00\\x8b\\x00\\x8b\\x00\\x00\\xe7\\xe2\\xe2\\xc7\\xe2\\xc3\\xc8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-06-25T00:00:00", "modifydate": "1998-06-25T19:10:00", "lines": 139, "newlines": 139, "modlines": 0, "user": "XSSGSCH"}, "text": "\n\n\n\n\n\n                DCM - Dirt Cheap Monitor  V0.7\n\n\n7980-3 and compatible controllers keep a great deal of statistics. Getting them\nout is another story. If you have extra $$$, you can use AZTEC; if you are a\nmasochist, you use IDCAMS. In order to learn how the 7980-3 works, I wrote\nDCM. Here is a sample screen:\n\n\n\n\n\n                    Dirt Cheap Monitor V0.7                     May26  9:11:14\n Devices 0E00-0E3F   Ssid 0010          I/O rates measured from May26  9:10:59\n  Volume SYSLBB   DevAddr 0E08          SSCH rate   30.5/s\n   Paths 08 13 48 53                    Duplexed: Secondary dev E17\n Cache: Active           DFW: Active\n\n    I/O time(ms)    4.6   Pend    0.5   Disc    1.2   Conn    2.9\n      I/O   30.4/s     Reads   29.2/s    Writes    1.2/s   Short term I/O rate\n   Normal   30.4/s     Reads   29.2/s    Writes    1.2/s    Long term hit%\n     Seql    0.0/s     Reads    0.0/s    Writes    0.0/s         --Switches--\n      CFW    0.0/s     Reads    0.0/s    Writes    0.0/s         SD0: AB\n      DFW    1.2/s    Normal    1.2/s      Seql    0.0/s         SD1: AB\n   Bypass    0.0/s   Inhibit    0.0/s                            SD2: AB\n   Stages    2.1/s    Normal    2.1/s  Seql     0.0/s            SD3: AB\n DeStages    0.0/s  PreReads    0.0/s                      CU serial# 011717\nRead Hit%   94.9     Normal%   92.6    Seql%   99.9   Cache installed   65536K\n CFW Hit%    0.0       Read%    0.0  Writes%    0.0   Cache available   65136K\n DFW Hit%   99.0     Normal%   99.0    Seql%   78.3     NVS installed    4096K\nR/W ratio   33.5  Hits/Stage   14.2   Retry%    0.0       Pinned data       0K\n\n Enter: SR, LR, SH, LH, All, Onl, Auto, <dev-addr>, <volume> or End\n\n\nThis screen snapshot is from a running system. The statistics are for one\ndevice although DCM can provide statistics for a string of devices or for all\ndevices attached to a controller.\n\nThere are two sources of statistics for DCM: the control unit and the channel\nsubsystem. The pending, disconnect and connect times are provided by the\nchannel subsystem and are the same as reported by RMF. These times are in\nmilliseconds. The other times are calculated using the counts maintained by\nthe 7980-3. The interval is between the two times in the upper right hand\ncorner. In general, the very first rate on each line is the sum of the remaining\nrates on the line. The I/O rate is the sum of the normal rate, the sequential\nrate, the bypass rate and the inhibit rate.\n\nThe hit% are calculated from the counters maintained in the 7980-3. The\npercentages on the very left of each line are the weighted averages of the\nremaining percentages on that line. It is possible to see the long term view of\nthe hits since the controller was IML'd or a short term view since the last time\nthat the ENTER key was pressed.\n\nThe Stages, Destages and Prereads fields are the number of these operations\nper second. The only statistics not maintained in the 7980-3 are the R/W ratio\nand the Hits/Stages. R/W is calculated in a straight forward fashion and the\nHits/Stages gives some measure of the caching efficiency.\n\nHere is a list of DCM commands:\n\n     AUTO      Repeat display 20 times with a 4 second interval\n     ALL       Summarize all devices on the control unit\n     <enter>   Refresh the screen with a new set of statistics\n     ONL       Run through all online devices on this control unit\n     Rnn       Repeat the display nn times with a 4 second interval\n     Wnn       Set wait value to nn seconds\n     n         Go to next device\n     p         Go to previous device\n     LR        Long term I/O rates\n     SR        Short term I/O rates\n     LH        Provide long term hit% (from the time that advanced\n               functions were enabled)\n     SH        Provide short term delta hit%\n     NOUP      Do not re-write history file\n     END       Ends DCM session. Q is an abbreviation.\n     QN        End DCM without updating the history file.\n\nA unit address or a volume name can be entered to provide statistics for that\ndevice. A range of 16 devices can be summarized by providing a generic\naddress. In the sample screen, to get statistics for devices E10 to E1F, E1x\ncould be entered on the prompt.\nInstalling DCM is very easy. Two files are provided in IEBUPDTE input format.\nSimply allocate a macro and a source PDS and run an IEBUPDTE job to build\nthe PDS's. If you have forgotten IEBUPDTE, here is a some JCL that can be\nused:\n\n     //UPDTE   EXEC PGM=IEBUPDTE,PARM='NEW'\n     //SYSIN   DD DISP=SHR,DSN=<uploaded sequential file>\n     //SYSUT2  DD DISP=SHR,DSN=<pds macros or source>\n     //SYSPRINT DD SYSOUT=*\n\nThe members $ASM and $LINK in the source are used to build DCM. Note\nthat DCM is not authorized nor does it need to be.\n\nIn order to run DCM, create a 1 track dataset on any device attached to the\ncontrol unit that you want to monitor. This 1 track file is also used to preserv\ne\nsome information after DCM ends. Simply allocate this dataset to the ddname\nMONITOR and call DCM from TSO. If a file is allocated to the ddname\nCAPTURE, screen images are saved to that file and can be subsequently\nprinted by REPLAYP.\n\nDCM was developed on a MVS/ESA 3.1.3 system and has run on MVS/XA 2.2\nand MVS/ESA 4.3 systems.\n\nThis is the first version of DCM and as time permits, I will add more features.\nYour suggestions and comments are appreciated. Just call me at 403 424-\n2006 or send a Spire message to Alfred Nykolyn. I hope that you find it useful.\n\nVersion 0.2 fixes an error in the way that UCBs are scanned and cleans up the\nerror handling. It provides support for statistics by volume name.\n\nVersion 0.3 includes the status display of the enable/disable switches and\nprovides the serial number of the control unit. If all switches are not displaye\nd\non a 7980-3, you need to install ucode 21-A0 or 21-A8.\n\nVersion 0.4 adds support for 3990-3 non-synchronous controllers and\nhopefully ESCON controllers.\n\nVersion 0.5 adds support for screen captures and different update intervals.\nThis is useful in benchmark situations.\n\nVersion 0.6 provides support for dynamic UCB's. It probably will not work with\nMVS/XA. Bernd Bauer pointed out an error in DCMMAIN in which all counts\nwere zero.\n\nVersion 0.7 contains bug fixes for ESCON controller support which were\npointed out by Bernd Bauer.\n\nContact: Alfred Nykolyn\n         apn@istar.ca\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REPLAYP": {"ttr": 2311, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x17\\x7f\\x00\\x98\\x17\\x7f\\x11D\\x00\\xee\\x00\\xee\\x00\\x00\\xc4\\xc3\\xd4\\xf0\\xf8\\xf0@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-06-26T00:00:00", "modifydate": "1998-06-26T11:44:00", "lines": 238, "newlines": 238, "modlines": 0, "user": "DCM080"}, "text": "REPLAYP  CSECT\nREPLAYP  AMODE 24\nREPLAYP  RMODE 24\n         $BOX   HDR='REPLAYP - ',TITLE='DSECTS'\n         PRINT NOGEN\n         DCBD  DSORG=QS\n         PRINT GEN\n         SPACE 3\nLINED    DSECT\nLINE     DS    0CL128\nCC       DS    CL1\nPAD1     DS    CL14\nDATA     DS    CL80\nPAD2     DS    CL33\n$LINELEN EQU   *-LINE\n         SPACE 3\nPAGED    DSECT\nPAGE     DS    24CL($LINELEN)\n$PAGELEN EQU   *-PAGE\n         SPACE 3\n         $BOX  'INITIALIZATION',TITLE='INITIALIZATION'\nSBA      EQU   X'11'\nSF       EQU   X'1D'\n$FF      EQU   C'1'\n$DS      EQU   C'0'\n$SS      EQU   C' '\n$OFFSET  EQU   20\n                                       SPACE\nREPLAYP  CSECT\n         SAVE  (14,12),,RELAYP-&SYSDATE\n         LR    R12,R15\n         USING REPLAYP,R12\n                                       SPACE\n         LA    R10,SAVEAREA\n         ST    R13,4(,R10)             CHAIN\n         ST    R10,8(,R13)               THOSE\n         LR    R13,R10                     SAVEAREAS\n                                       SPACE\n         LR    R9,R1                   SAVE PARM POINTER\n         LA    R0,$PAGELEN\n         LR    R2,R0\n                                       SPACE\n         GETMAIN RU,LV=(0),LOC=BELOW\n                                       SPACE\n         LR    R11,R1\n         USING PAGE,R11\n                                       SPACE\n         LR    R4,R1\n         LR    R5,R2\n         XR    R14,R14\n         XR    R15,R15\n         ICM   R15,B'1000',BLANKS\n         MVCL  R4,R14                  CLEAR\n                                       SPACE\n         L     R1,0(,R9)\n         LH    R2,0(,R1)\n         LTR   R2,R2                   ANY PARMS?\n         BZ    OPEN                    NO..USE DEFAULTS\n                                       SPACE\n         MVC   VALFLD,ZEROS            INIT VALFLD\n         BCTR  R2,0                    REDUCE FOR EXECUTE\n         EX    R2,VALMVN               -> MVN VALFLD(*-*),2(R1)\n         EX    R2,VALCLC               -> CLC VALFLD(*-*),2(R1)\n         BNE   OPEN\n                                       SPACE\n         EX    R2,VALPACK              -> PACK WA,2(*-*,R1)\n         CVB   R3,WA\n         ST    R3,BLKPP                SAVE BLOCKS/PAGE\n                                       EJECT\nOPEN     EQU   *\n         OPEN  (CAPTURE,(INPUT),SYSPRINT,(OUTPUT))\n                                       SPACE\n         LA    R10,CAPTURE\n         USING IHADCB,R10\n                                       SPACE\n         TM    DCBOFLGS,DCBOFOPN       OPEN OK?\n         BZ    ERR_OPN                 NO..ERROR\n                                       SPACE\n         LH    R0,DCBLRECL\n         ST    R0,RECORDLN             Save record length\n         LA    R10,SYSPRINT\n         TM    DCBOFLGS,DCBOFOPN       OPEN OK?\n         BZ    ERR_OPN                 NO..ERROR\n                                       SPACE\n         $BOX  'Main Processing',TITLE='Main Processing'\nGETMORE  EQU   *\n         GET   CAPTURE\n                                       SPACE\n         L     R15,COUNT\n         L     R8,RECORDLN             R8 = Max search\n         LA    R15,1(,R15)\n         ST    R15,COUNT\n         LR    R10,R1\n         LR    R9,R1\n         AR    R9,R8                   R9 -> LAST CHARACTER\n         BAS   R14,SEARCH              SEARCH FOR 1ST SBA\n                                       SPACE\n         LTR   R15,R15\n         BZ    PRINT_EM\n                                       SPACE\n         $BOX  'Convert 3270 coordinates to row + column'\nNEXT_FIELD     EQU *\n         LA    R10,1(,R10)             R10= START\n         BCTR  R8,0                    Decrement remaining count\n         LR    R6,R10                  R6 -> sba + 1\n         BAS   R14,SEARCH              SEARCH FOR 1ST SBA\n                                       SPACE\n         LR    R7,R10                  R7 -> sba\n         LTR   R15,R15\n         BZ    PRINT_EM\n                                       SPACE\n         ICM   R0,B'0001',0(R6)        R0 = 1ST COORDINATE\n         ICM   R1,B'0001',1(R6)        R1 = 2ND COORDINATE\n         LA    R15,X'3F'\n         LA    R14,80\n         NR    R0,R15\n         NR    R1,R15\n         SLL   R0,6                    TIMES 64\n         AR    R1,R0                   ADD ROW\n         XR    R0,R0\n         DR    R0,R14                  R0 = C-1; R1 = R-1\n         SLL   R1,7\n         AR    R1,R0\n         LA    R1,$OFFSET(R1,R11)      R1 = PAGE OFFSET\n                                       SPACE\n         LA    R6,2(,R6)\n         CLI   0(R6),SF                SF ATTRIBUTE?\n         BNE   *+4+4\n         LA    R6,2(,R6)\n         LR    R15,R7                  R15 -> END + 1\n         SR    R15,R6                  R15 = LENGTH\n         BCTR  R15,0\n         LTR   R15,R15\n         BM    *+4+4\n         EX    R15,MVCPAGE\n         LR    R8,R9\n         LR    R10,R7\n         SR    R8,R10\n         B     NEXT_FIELD\n                                       SPACE\n         $BOX  'Search for SBA',CTL1=EJECT\n         DS    0D\nSEARCH   EQU   *\n         LA    R15,1\n                                       SPACE\nCONTINUE EQU   *\n         CLI   0(R10),SBA\n         BER   R14\n                                       SPACE\n         LA    R10,1(,R10)\n         BCT   R8,CONTINUE\n                                       SPACE\n         XR    R15,R15\n         BR    R14\n                                       SPACE\n         DROP  R11,R10\n                                       SPACE\n         $BOX  'Print Processing',TITLE='Print Processing'\n         DS    0D\nPRINT_EM EQU   *\n         LR    R10,R11\n         USING LINED,R10\n                                       SPACE\n         MVI   CC,$DS                  Double SPACE\n         L     R15,BLK#\n         BCT   R15,NEW_BLOCK\n                                       SPACE\n         MVI   CC,$FF                  SKIP TO NEW PAGE\n         L     R15,BLKPP\n                                       SPACE\nNEW_BLOCK      EQU *\n         ST    R15,BLK#\n         L     R14,COUNT               GET SCREEN COUNT\n         CVD   R14,WA\n         MVC   COUNTP,EDMASKP\n         ED    COUNTP,WA+5\n         MVC   PAD1(SEQLEN),SEQUENCE\n         PUT   SYSPRINT,(R10)\n                                       SPACE\n         LA    R10,$LINELEN(,R10)\n         MVI   CC,$SS                  Single SPACE\n         MVC   PAD1,BLANKS\n         LA    R9,19\n                                       SPACE\nPRINT_LINE     EQU *\n         PUT   SYSPRINT,(R10)\n                                       SPACE\n         LA    R10,$LINELEN(,R10)\n         BCT   R9,PRINT_LINE\n                                       SPACE\n         B     GETMORE\n                                       SPACE\n         $BOX  'Close files',TITLE='Cleanup'\nDONE     EQU   *\n         CLOSE (CAPTURE,,SYSPRINT)\n                                       SPACE\nRETURN   EQU   *\n         LA    R0,$PAGELEN\n         $BOX  'Free storage'\n         FREEMAIN RU,LV=(0),A=(R11)\n                                       SPACE\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=0\n                                       SPACE\n         $BOX  'ERRORS',TITLE='ERRORS'\nERR_OPN  EQU   *\n         WTO   MF=(E,OPENMSG)\n         LA    R15,1\n         B     RETURN\n                                       SPACE\n         $BOX  'CONSTANTS',TITLE='CONSTANTS'\n         DS    0D\nSAVEAREA DS    18F\nWA       DS    D\nBLKPP    DC    F'3'                    BLOCKS/PAGE\nBLK#     DC    F'0'\nCOUNT    DC    F'0'\nRECORDLN DC    F'0'\nZEROS    DC    C'00000000'\nVALFLD   DS    CL8\nBLANKS   DC    CL16' '\n         PRINT NOGEN\nCAPTURE  DCB   DSORG=PS,MACRF=GL,DDNAME=CAPTURE,EODAD=DONE,RECFM=FB\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      *\n               RECFM=FBA,LRECL=100,BLKSIZE=100\nOPENMSG  WTO   'Error: OPEN failed',ROUTCDE=11,MF=L\n         DS    0H\nVALMVN   MVN   VALFLD(*-*),2(R1)\nVALCLC   CLC   VALFLD(*-*),2(R1)\nVALPACK  PACK  WA,2(*-*,R1)\nMVCPAGE  MVC   0(*-*,R1),0(R6)\nEDMASKP  DC    X'402020202121'\nSEQUENCE DC    C'Screen: '\nCOUNTP   DS    CL6\nSEQLEN   EQU   *-SEQUENCE\n         SPACE 3\n         $REGS\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REXX": {"ttr": 2316, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x98\\x17o\\x00\\x98\\x17o\\x15U\\x00\\x06\\x00\\x06\\x00\\x00\\xd9\\xd6\\xd3\\xc1\\xd5\\xc4\\xe2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1998-06-25T00:00:00", "modifydate": "1998-06-25T15:55:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "ROLANDS"}, "text": "/** REXX */\nADDRESS TSO\n\"ALLOC F(MONITOR) DA('ROLANDS.DCM.MON') SHR REUSE\"\n\"CALL 'ROLANDS.LOAD(DCM)\"\n\"FREE F(MONITOR)\"\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT340/FILE340.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT340", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}