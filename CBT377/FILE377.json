{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011856000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE377.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE377.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x02'", "DS1TRBAL": "b'\\xdd\\xcc'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\xb6\\x00\\x00\\x02\\xb6\\x00\\x04\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$$DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x19\\x0f\\x00\\x99\\x19\\x0f\\x14\\x11\\x00\\x01\\x00\\x01\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-07-09T00:00:00", "modifydate": "1999-07-09T14:11:00", "lines": 1, "newlines": 1, "modlines": 0, "user": "SBGOLOB"}, "text": "UPDATE DATE:    Jul 09, 99      TIME:       14:09\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$TSOMODS": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99\\x17\\x9f\\x01\\x00$?\\x188\\x001\\x001\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-06-28T00:00:00", "modifydate": "2000-08-30T18:38:00", "lines": 49, "newlines": 49, "modlines": 0, "user": "WSBG"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "@FILE377": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99\\x19\\x0f\\x00\\x99\\x19\\x0f\\x11P\\x00\\x19\\x00\\x06\\x00\\x00\\xc5\\xc4\\xd1\\xe7\\xc1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-07-09T00:00:00", "modifydate": "1999-07-09T11:50:00", "lines": 25, "newlines": 6, "modlines": 0, "user": "EDJXADM"}, "text": "//***FILE 377 is from Ed Jaffe of Los Angeles, California, and      *   FILE 377\n//*           contains some modifications to TSO, so you can start  *   FILE 377\n//*           TCAS under SUB=MSTR.  In other words, you can run     *   FILE 377\n//*           TSO without JES.  This is an excellent recovery       *   FILE 377\n//*           tool, if you have it set up at your shop.             *   FILE 377\n//*                                                                 *   FILE 377\n//*           This code is running on OS/390 Release 2.7, and       *   FILE 377\n//*           has been stable for many years.                       *   FILE 377\n//*                                                                 *   FILE 377\n//*           There is also a REXX exec called TL on this file,     *   FILE 377\n//*           which builds JCL to label a tape, and submits it      *   FILE 377\n//*           to the internal reader.                               *   FILE 377\n//*                                                                 *   FILE 377\n//*           Edward E. Jaffe                                       *   FILE 377\n//*           Mgr., Research & Development                          *   FILE 377\n//*           Phoenix Software International                        *   FILE 377\n//*           5200 W. Century Blvd., Suite 800                      *   FILE 377\n//*           Los Angeles, CA 90045                                 *   FILE 377\n//*                                                                 *   FILE 377\n//*           Voice:      (310) 338-0400 x318                       *   FILE 377\n//*           Facsimile:  (310) 338-0801                            *   FILE 377\n//*           Internet:   edjaffe@phoenixsoftware.com               *   FILE 377\n//*           IBM Mail:   USS24J24 at IBMMAIL                       *   FILE 377\n//*           Web page:   www.phoenixsoftware.com                   *   FILE 377\n//*                                                                 *   FILE 377\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IKJEFLD1": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x99\\x13?\\x00\\x99\\x19\\x0f\\x10(\\x02d\\x022\\x00\\x00\\xc5\\xc4\\xd1\\xe7\\xc1\\xc4\\xd4@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1999-05-13T00:00:00", "modifydate": "1999-07-09T10:28:00", "lines": 612, "newlines": 562, "modlines": 0, "user": "EDJXADM"}, "text": "         TITLE 'IKJEFLD1 -- Logon Pre-Prompt Exit '\n***********************************************************************\n*\n*  MODULE NAME = IKJEFLD1 for TSO/E V2\n*\n*  DESCRIPTIVE NAME = Logon Pre-Prompt Exit Routine for Directed Logon\n*\n*  FUNCTION = Create a CIB to direct logon process to a\n*             user-specified subsystem for JCL conversion.\n*\n*  OPERATION = Get CSCB pointer from the ASCB and create a valid\n*              STC communication CIB (same as SUB= keyword on the\n*              START command).\n*\n*  NOTES:\n*\n*    INSTALLATION = See TSO/E Customization boks.\n*                   Link Edit attributes: RENT REUS REFR.\n*\n*    USAGE        = When logging on to TSO, prefix the User ID with\n*                   a '?' (question mark - for example: ?MYUSER) or\n*                   just enter a '?' instead of the User ID.  The exit\n*                   will prompt for the subsystem name to be used for\n*                   logon.\n*\n*                   Some users (e.g., sysprogs) may wish to see the\n*                   prmpt for every logon.  To activate this, see the\n*                   instructions given below under CUSTOMIZATION.\n*\n*    CUSTOMIZATION= Locate the comment line\n*                     '---->  LIST OF EXPLICITLY SELECTED USERS'\n*                   and add the desired CLC/BE instructions.\n*                   e.g., CLC   =CL7'KEVIN  ',USERID SPECIAL USER ?\n*                         BE    TRYAGAIN             YES - PROMPT\n*\n*    DEPENDENCIES = The following ZAP is required only when\n*                   a logon under 'MSTR' subsystem is needed.\n*                   The ZAP offset may vary from TSO/E release\n*                   to release. To find the exact ZAP location,\n*                   PZAP LMOD IKJEFLA1 CSECT IKJEFLB, locate\n*                   hex string '0000009DC9D2D1C5C6D3C340' and\n*                   rework the ZAP.\n*\n*     =======================================================\n*     ==> NAME IKJEFLA1 IKJEFLB              * TSO/E 2.5  <==\n*     ==> VER 0924 0000009D,C9D2D1C5C6D3C340 *....IKJEFLC <==\n*     ==> REP 0924 0000009F,C9D2D1C5C6D3C340 *....IKJEFLC <==\n*     =======================================================\n*\n*  SERIALIZATION = CSCB ENQ resource SYSIEFSD/Q10\n*\n*  RESTRICTIONS = Only one STC communication keyword is permitted\n*                 in each CIB.  STC communication CIBs must be\n*                 chained before the START CIB (says IBM - but not\n*                 quite true)\n*\n*  REGISTER CONVENTIONS = Standard (SEE CODE FOR REGISTER EQUATES)\n*                         IEEVSTAR does not save or restore registers\n*\n*  MODULE TYPE = CSECT\n*    PROCESSOR = High Level Assembler\n*    MODULE SIZE = See assembled length\n*    ATTRIBUTES = Pagable LPA, key 8, problem state,\n*                 reentrant, refreshable\n*\n*  ENTRY POINT = IKJEFLD1\n*    PURPOSE = See function above\n*    INPUT = Register 1 points to parameter list described in\n*            TSO/E publications.\n*\n*  EXIT-NORMAL = Normal\n*\n*  EXIT-ERROR = Should not occur\n*\n*  EXTERNAL REFERENCES:\n*    ROUTINES = None\n*    DATA AREAS = Parameter list passed to IKJEFLD1 (see TSO/E pubs)\n*    CONTROL BLOCKS = ASCB  - Read\n*                     CSCB  - Read/Write\n*                     CIB   - Create(SP=245)/Write\n*\n*  MACROS = GETMAIN, FREEMAIN, ENQUEUE, DEQUEUE\n*\n*  ABEND CODES = None\n*\n***********************************************************************\n         EJECT\nIKJEFLD1 CSECT\nIKJEFLD1 AMODE 24\nIKJEFLD1 RMODE 24\n***********************************************************************\n*  Equates\n***********************************************************************\n&M       SETC  'IKJEFLD1'          Module name\nRETRYCT  EQU   10                  ESTAE retry count\n*\nR0       EQU   0                   Parameter pass register.\nR1       EQU   1                   Input ptr to chn - used in TRT inst.\nR2       EQU   2                   Function byte return from TRT.\nR3       EQU   3                   Work register.\nR4       EQU   4                   Work register.\nR5       EQU   5                   Work register.\nR6       EQU   6                   Work register.\nR7       EQU   7                   Work register.\nR8       EQU   8                   Work register.\nR9       EQU   9                   Work register.\nR10      EQU   10                  SDT base register.\nR11      EQU   11                  Chain base register.\nRBASE    EQU   12                  Base register.\nR13      EQU   13                  Working storage base reg\nR14      EQU   14                  Return register.\nR15      EQU   15                  Link register.\nD0       EQU   0                   Used for offsets,lengths,etc.\nD1       EQU   1\nD2       EQU   2\nD3       EQU   3\nD4       EQU   4\nD5       EQU   5\nD8       EQU   8\nD23      EQU   23\nD24      EQU   24\nD128     EQU   128\nD256     EQU   256\nCBLANK   EQU   C' '\nZERO     EQU   0                   Constant zero\nONE      EQU   1                   Constant one\nTHREEBIT EQU   3                   Length to shift for\n*                                  Multiplication by eight\nFOUR     EQU   4                   Constant four\nNOTEQU   EQU   7                   Not equal\nEIGHT    EQU   8                   Constant eight\nSIXTEEN  EQU   16                  Constant sixteen\n         EJECT\n         SAVE  (14,12),,===>IKJEFLD1-&SYSDATE.-&SYSTIME<===\n         LR    RBASE,R15           Load base register\n         USING IKJEFLD1,RBASE  *** Synchronize base register\n\n***********************************************************************\n*                                                                     *\n*               Obtain Working Storage                                *\n*                                                                     *\n***********************************************************************\n         LR    R3,R1               Save parmlist addr\n         LA    R0,VSTDATLN         Length of storage to get\n         GETMAIN R,LV=(0)          Get working storage\n         ST    R13,4(,R1)          Chain save areas\n         ST    R1,8(,R13)          (same)\n         SLR   R15,R15             (same)\n         ST    R15,8(,R1)          (same)\n         LR    R13,R1              Load save area base register\n         USING VSTWORK,R13     *** Synchronize working storage DSECT\n         LA    R1,VSTDLTH          Pick up working storage length\n         LA    R0,VSTWORKE         Pont at working storage\n         MVCL  R0,R14              Clear working storage\n\n***********************************************************************\n*                                                                     *\n*               Establish Error Recovery Environment                  *\n*                                                                     *\n***********************************************************************\n         ST    RBASE,DSBASE        Save base for abend retry\n         LA    R0,GOOUT            Establish default retry address\n         ST    R0,DSRETR           (same)\n         MVC   ESTALSTD(ESTALSTL),ESTALST Copy model ESTAE parm list\n         L     R2,=A(ESTAE)        Point to recovery routine.\n*                                *********************\n         ESTAE (2),CT,           *                   *                 +\n               PARAM=(13),       *     Establish     *                 +\n               ASYNCH=YES,       *     Error         *                 +\n               PURGE=NONE,       *     Recovery      *                 +\n               MF=(E,ESTALSTD)   *                   *\n*                                *********************\n         LTR   R15,R15            ESTAE activated ?\n         BZ    *+4+4              Branch if yes\n         MVI   DSRTRC,255         Indicate no ESTAE and proceed anyway\n\n***********************************************************************\n*                                                                     *\n*               Force MAIL and NOTICES                                *\n*                                                                     *\n***********************************************************************\n         L     R1,036(,R3)         Point at control switches' descr\n         L     R1,008(,R1)         Point at switches\n         OI    002(R1),X'C0'       Force MAIL and NOTICES on\n\n***********************************************************************\n*                                                                     *\n*               Look for '?' and/or User ID                           *\n*                                                                     *\n***********************************************************************\n         L     R1,000(,R3)         Point at logon buf descriptor\n         L     R2,004(,R1)         Pick up logon buf length\n         L     R1,008(,R1)         Point at logon buffer\n         SH    R2,=AL2(6+7)        Compute loop counter\n         BNP   GOOUT               Return - something is wrong\nFNDCMD   DS    0H\n         CLC   =CL6'LOGON ',0(R1)  LOGON command ?\n         BE    GOTLOG              Branch if yes\n         LA    R1,1(,R1)           Advance pointer\n         BCT   R2,FNDCMD           Continue searching\n         B     GOOUT               Return - Not a LOGON command\nGOTLOG   DS    0H\n         LA    R1,6(,R1)           Point past 'LOGON ' in command\nFNDUID   DS    0H\n         CLI   0(R1),C'?'          Found a question mark ?\n         BE    ERASEQ              Branch if yes\n         CLI   0(R1),C' '          Found a User ID ?\n         BNE   GOTUID              Branch if yes\n         LA    R1,1(,R1)           Advance pointer\n         BCT   R2,FNDUID           Continue searching\n         B     GOOUT               Return - no User ID specified\nGOTUID   DS    0H\n         MVC   USERID,0(R1)        Copy User ID\n         OC    USERID,VBLANKS      Convert to upper case\n\n*=====================================================================*\n* ---->  LIST OF EXPLICITLY SELECTED USERS                            *\n*=====================================================================*\n         CLC   =CL7'SYSPROG',USERID SPECIAL USER ?\n         BE    TRYAGAIN             YES - PROMPT\n*=====================================================================*\n* ---->  END LIST OF EXPLICITLY SELECTED USERS                        *\n*=====================================================================*\n\n         B     GOOUT               Return\n\nERASEQ   DS    0H\n         MVI   0(R1),C' '          Erase the question mark\n\n***********************************************************************\n*                                                                     *\n*               Prompt User for Subsystem Name                        *\n*                                                                     *\n***********************************************************************\nTRYAGAIN DS    0H\n         LA    R0,L'PROMPT         Length for TPUT\n         LA    R1,PROMPT           Address for TPUT\n         TPUT  (1),(0)             Issue TPUT to prompt the user\n         MVC   SSNAME,=CL8' '      Clear SSNAME field\n         LA    R0,L'SSNAME         Length for TGET\n         TGET  SSNAME,(0)          Issue TGET to obtain user's response\n         LTR   R15,R15             TGET successful ?\n         BZ    SOMETING            Branch if yes\n         CH    R15,=H'12'          Too much data ?\n         BNE   GOOUT               Branch if not\nCLEANBUF DS    0H\n         LA    R0,L'SSNAME         Length for TGET\n         TGET  SSNAME,(0)          Issue TGET to obtain overflow data\n         LTR   R15,R15             TGET successful ?\n         BNZ   CLEANBUF            Branch if not\n         B     TRYAGAIN            Go prompt the user again\nSOMETING DS    0H\n         OC    SSNAME,VBLANKS      Convert to upper case\n         CLC   SSNAME,=CL4'NONE'   User selected 'NONE'\n         BE    GOOUT               Branch if yes (use primary JES)\n         CLC   SSNAME,=CL8' '      User did not make a selection ?\n         BE    GOOUT               Branch if yes (use primary JES)\n\n***********************************************************************\n*                                                                     *\n*               Acquire/Format the CIB                                *\n*                                                                     *\n***********************************************************************\n         USING PSA,R0          *** Synchronize PSA DSECT\n         L     R2,PSAAOLD          Load ASCB address\n         USING ASCB,R2         *** Synchronize ASCB DSECT\n         L     R11,ASCBCSCB        Load CSCB address\n         DROP  R2              *** Drop ASCB DSECT\n         USING CHAIN,R11       *** Synchronize CSCB DSECT\n         IPK   ,                   Save current PSW key\n         STC   R2,KEYSAVE          (same)\n         SPKA  X'00'               Switch to PSW key zero\n         LA    R0,STCCIBLN         Length to get for CIB\n         O     R0,=A(X'F5000000')  Place subpool in high-order byte\n         GETMAIN R,LV=(0)          Get STC communication CIB\n         LR    R10,R1              Place address in R10\n         USING VSTARCIB,R10    *** Synchronize CIB DSECT\n         LA    R1,*+4+4+2          Switch to 31-bit mode\n         O     R1,=XL4'80000000'   (same)\n         BSM   0,R1                (same)\n         XC    VSTARCIB(STCCIBLN),VSTARCIB Zero out the CIB\n         MVI   CIBLEN,STCCIBLN/EIGHT Set CIB length in doublewords\n         MVI   CIBVERB,CIBSTCOM    Set command code\n         MVC   CIBCONID,CHUCMP     Set console ID\n         MVC   CIBDATLN,ICIBDLEN   Set data length in bytes\n         MVC   CIBDATA,VBLANKS     Blank out data area\n         MVC   CIBDATA(4),=CL4'SUB=' Put SUB= keyword into CIB data\n         MVC   CIBDATA+4(4),SSNAME Add subsystem name after SUB=\n         LA    R1,*+4+2           Switch to 24-bit mode\n         BSM   0,R1               (same)\n\n***********************************************************************\n*                                                                     *\n*               Serialize the CSCB Chain                              *\n*                                                                     *\n***********************************************************************\n         MVC   ENQLISTD(ENQLISTL),ENQLIST  Copy model ENQ parm list\n         ENQ   ,MF=(E,ENQLISTD)    ENQ the CSCB chain\n\n***********************************************************************\n*                                                                     *\n*               Add new CIB to CSCB CIB Chain                         *\n*                                                                     *\n***********************************************************************\n         MVC   EXTLSTD(EXTLSTL),EXTLST Copy model EXTRACT parm list\n         LA    R0,CSCL             Point to EXTRACT answer area\n         EXTRACT (R0),'S',         Get address of Cmd Scheduler        +\n               MF=(E,EXTLSTD)        Communications area.\n         LA    R1,*+4+4+2          Switch to 31-bit mode\n         O     R1,=XL4'80000000'   (same)\n         BSM   0,R1                (same)\n         L     R1,CSCL             Point to Cmd Sched comm area\n         L     R0,4(,R1)           Load address of current CIB\n         ST    R10,4(,R1)          Chain new CIB in front of the\n         ST    R0,CIBNEXT            current CIB.\n         LA    R1,*+4+2            Switch to 24-bit mode\n         BSM   0,R1                (same)\n         DROP  R10             *** Drop CIB DSECT\n\n***********************************************************************\n*                                                                     *\n*               Release the CSCB Chain                                *\n*                                                                     *\n***********************************************************************\n         MVC   DEQLISTD(DEQLISTL),DEQLIST Copy model DEQ parm list\n         DEQ   ,MF=(E,DEQLISTD)    DEQ the CSCB chain\n\n***********************************************************************\n*                                                                     *\n*               Module Epilog                                         *\n*                                                                     *\n***********************************************************************\n         IC    R2,KEYSAVE          Restore original PSW key\n         SPKA  0(R2)               (same)\n\nGOOUT    DS    0H\n         CLI   DSRTRC,255          ESTAE active ?\n         BE    ESTANO              Branch if not\n*                                *************************\n         ESTAE 0                 * Remove Error Recovery *\n*                                *************************\n\nESTANO   DS    0H              <-- Abends recover at this point\n         LR    R1,R13              Load working storage address\n         L     R13,4(,R13)         Load caller's save area address\n         FREEMAIN R,               Release the working storage         +\n               LV=VSTDATLN,        (same)                              +\n               A=(R1)              (same)\n         XR    R15,R15             Set return code = 0\n*        ST    R15,8(,R13)         Remove chain ptr from caller's save\n         RETURN (14,12),RC=(15)    Return\n         EJECT\n***********************************************************************\n*                                                                     *\n*               Constants                                             *\n*                                                                     *\n***********************************************************************\n         CNOP  0,4\nVBLANKS  DC    CL8' '              Blanks for padding\nICIBDLEN DC    AL2(L'CIBDATA)      Length of STC communication CIB\n*                                    (minimum allowed data length).\nSTCCIBLN EQU   (CIBDATA-CIBNEXT)+L'CIBDATA  Length of STC communication\n*                                    CIB is length of fixed portion\n*                                    plus length of data portion\nPROMPT   DC    C'===>IKJEFLD1 - ENTER SUBSYSTEM NAME, ''NONE'', OR HIT C\n               ENTER <==='\n         LTORG ,\n\nENQLIST  ENQ   (SYSNAME,           Model ENQ parameter list            +\n               RNAME,              (same)                              +\n               E,                  (same)                              +\n               3,                  (same)                              +\n               SYSTEM),            (same)                              +\n               RET=HAVE,           (same)                              +\n               MF=L                (same)\nENQLISTL EQU   *-ENQLIST           (same)\n\nDEQLIST  DEQ   (SYSNAME,           Model DEQ parameter list            +\n               RNAME,              (same)                              +\n               3,                  (same)                              +\n               SYSTEM),            (same)                              +\n               RET=HAVE,           (same)                              +\n               MF=L                (same)\nDEQLISTL EQU   *-DEQLIST           (same)\n\nESTALST  ESTAE ,,,                 Model ESTAE parameter list          +\n               ASYNCH=YES,         (same)                              +\n               PURGE=NONE,         (same)                              +\n               MF=L                (same)\nESTALSTL EQU   *-ESTALST           (same)\n\nEXTLST   EXTRACT 0,                Model EXTRACT parameter list        +\n               'S',                (same)                              +\n               FIELDS=(COMM),      (same)                              +\n               MF=L                (same)\nEXTLSTL  EQU   *-EXTLST            (same)\n\nSYSNAME  DC    C'SYSIEFSD'         Major name for CSCB serialization\nRNAME    DC    C'Q10'              Minor name for CSCB serialization\n\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ESTAE Recovery Routine                                       *\n*                                                                     *\n***********************************************************************\nESTAE    DS    0H\n         USING ESTAE,R15       *** Synchronize base register\n         CH    0,=H'12'            SDWA created ?\n         BE    ESTAE1              Branch if not (use registers only)\n         USING SDWA,R1         *** Synchronize SDWA DSECT\n         L     R2,SDWAPARM         Load address of dynamic work area\n         MVC   DSABEND-DSSA(4,R2),SDWAABCC Copy abend code\n         MVC   DSPSW-DSSA(8,R2),SDWAEC1    Copy abend PSW1\n         SR    R0,R0                       Check for address in PSW1\n         CLM   R0,7,SDWAADD1               (same)\n         BNE   *+4+6                       Branch if PSW1 filled in\n         MVC   DSPSW-DSSA(8,R2),SDWAEC2    Copy abend PSW2\n         MVC   DSGPR-DSSA(4*16,R2),SDWAGRSV Copy the GPRs\n         IC    R0,DSRTRC-DSSA(R2)          Update the recursion count\n         AH    R0,ESTAEH1                  (same)\n         STC   R0,DSRTRC-DSSA(R2)          (same)\n         CLI   DSRTRC-DSSA(R2),RETRYCT     Too many abends ?\n         BH    ESTAE2                      Branch if yes\n         SETRP DUMP=NO,            Request abend retry                 +\n               RC=4,               (same)                              +\n               RETADDR=ESTER,      (same)                              +\n               FRESDWA=YES         (same)\n         BR    R14                 Return to RTM\n\nESTAE2   DS    0H\n         SETRP RC=0                Request percolation\n         BR    R14                 Return to RTM\n\nESTAE1   DS    0H\n         ST    R1,DSABEND-DSSA(R2) Save abend code\n         MVI   DSPSW-DSSA(R2),C'?' Indicate unknown information\n         MVC   DSPSW-DSSA+1(7+4*16,R2),DSPSW-DSSA(R2)    (same)\n         SR    R0,R0               Update the recursion count\n         IC    R0,DSRTRC-DSSA(R2)  (same)\n         AH    R0,ESTAEH1          (same)\n         STC   R0,DSRTRC-DSSA(R2)  (same)\n         LA    R0,ESTER            Load retry address\n         CLI   DSRTRC-DSSA(R2),RETRYCT Too many abends ?\n         BH    ESTAE3              Branch if yes\n         LA    R15,4               Indicate retry\n         BR    R14                 Return to RTM\nESTAE3   DS    0H\n         SLR   R15,R15             Request percolation\n         BR    R14                 Return to RTM\nESTAEH1  DC    H'1'\n         DROP  R15             *** Drop base register\n\n***********************************************************************\n*                                                                     *\n*        ESTAE Retry Routine                                          *\n*                                                                     *\n***********************************************************************\nESTER    DS    0H\n         LR    RBASE,R15           Load base register\n         USING ESTER,RBASE     *** Synchronize base register\n         LR    R13,R1              Load dynamic storage address\n         USING DSSA,R13        *** Synchronize DSSA DSECT\n\n* Build Error Message\n         MVC   ESTEM(ESTEHE-ESTEH),ESTEH Set message model\n         UNPK  DSEDW(9),DSABEND(5) Convert abend code to hex chars\n         TR    DSEDW(8),ESTHEX-X'EF' (same)\n         MVC   ESTEM+4+19(8),DSEDW Copy abend code to message\n         MVC   ESTEM+4+35(8),DSPSW Initialize PSW area in msg\n         MVC   ESTEM+4+44(8),DSPSW (same)\n         CLI   DSPSW,C'?'          PSW available ?\n         BE    ESTE1               Branch if not\n         UNPK  DSEDW(9),DSPSW(5)   Convert PSW bytes 0-3 to hex chars\n         TR    DSEDW(8),ESTHEX-X'EF' (same)\n         MVC   ESTEM+4+35(8),DSEDW Copy PSW bytes 0-3 to message\n         UNPK  DSEDW(9),DSPSW+4(5) Convert PSW bytes 4-7 to hex chars\n         TR    DSEDW(8),ESTHEX-X'EF' (same)\n         MVC   ESTEM+4+44(8),DSEDW Copy PSW bytes 4-7 to message\nESTE1    DS    0H\n         USING PSA,R0          *** Synchronize PSA DSECT\n         L     R1,PSAAOLD          Load ASCB address\n         USING ASCB,R1         *** Synchronize ASCB DSECT\n         MVC   ESTEM+4+5(8),=CL8'STARTING' Assume STARTING\n         ICM   R15,15,ASCBJBNI     Load job name address\n         BNZ   ESTEB               Branch if available\n         ICM   R15,15,ASCBJBNS     Load Start/Mnt/Logon name address\n         MVI   ESTEM+4+3,C'T'      Assume TSO user\n         ICM   R0,15,ASCBTSB       Load TSB address\n         BNZ   ESTEB               Branch if not TSO user\n         MVI   ESTEM+4+3,C'S'      Must be STC\n         DROP  R1              *** Drop ASCB DSECT\nESTEB    DS    0H\n         LTR   R15,R15             Name located ?\n         BZ    *+4+6               Branch if not\n         MVC   ESTEM+4+5(8),0(R15) Set true name into message\n         LTR   R0,R0               Is this TSO ?\n         BNZ   ESTE9               Branch if yes\n         WTO   MF=(E,ESTEM)        Issue message via WTO\n         B     ESTE8               Continue\nESTE9    DS    0H\n         LA    R1,ESTEM+4          Issue message via TPUT\n         LH    R0,ESTEM            (same)\n         SH    R0,=H'4'            (same)\n         TPUT  (1),(0)             (same)\n\n* Build Register Message\nESTE8    DS    0H\n         CLI   DSGPR,C'?'          Registers known ?\n         BE    ESTE3               Branch if not\n         LA    R14,ESTEM+4         Point to target area\n         LH    R1,ESTEM            Loop....\n         SH    R1,=H'6'             to.......\n         MVI   0(R14),C' '           display...\n         MVC   1(0,R14),0(R14)        registers..\n         EX    R1,*-6                  0 -15\n         MVC   0(6,R14),=CL6'GR 0-F'   (same)\n         LA    R15,DSGPR               (same)\nESTE2    DS    0H\n         UNPK  08(9,R14),00(5,R15)  Edit and......\n         TR    08(8,R14),ESTHEX-X'EF' display four..\n         MVI   16(R14),C' '             registers....\n         UNPK  17(9,R14),04(5,R15)        on a line.\n         TR    17(8,R14),ESTHEX-X'EF'     (same)\n         MVI   25(R14),C' '               (same)\n         UNPK  26(9,R14),08(5,R15)        (same)\n         TR    26(8,R14),ESTHEX-X'EF'     (same)\n         MVI   34(R14),C' '               (same)\n         UNPK  35(9,R14),12(5,R15)        (same)\n         TR    35(8,R14),ESTHEX-X'EF'     (same)\n         MVI   43(R14),C' '               (same)\n         ST    R15,DSEFW                  (same)\n         L     R1,PSAAOLD          Load ASCB address\n         USING ASCB,R1         *** Synchronize ASCB DSECT\n         ICM   R0,15,ASCBTSB       Load TSB address\n         DROP  R1              *** Drop ASCB DSECT\n         BNZ   ESTE7               Branch if TSO user\n         WTO   MF=(E,ESTEM)        Issue message via WTO\n         B     ESTE6               Continue\nESTE7    DS    0H\n         LA    R1,ESTEM+4          Issue message via TPUT\n         LH    R0,ESTEM            (same)\n         SH    R0,=H'4'            (same)\n         TPUT  (1),(0)             (same)\nESTE6    DS    0H\n         LA    14,ESTEM+4\n         MVI   0(R14),C' '\n         MVC   1(8,R14),0(R14)\n         L     15,DSEFW\n         LA    R15,4*4(,R15)\n         LA    0,DSGPR+(4*16)\n         CR    R15,0               All registers formatted ?\n         BL    ESTE2               Branch if not\nESTE3    DS    0H\n         L     RBASE,DSBASE-DSSA(R13) Load base register\n         L     15,DSRETR           Load continuation address\n         BR    R15                 Continue\n         DROP  RBASE,R13       *** Drop base registers\n*\n*               0    1    1    2    2    3    3    4    4    5    5 *\n*          0....5....0....5....0....5....0....5....0....5....0....5 *\n*\nESTEH WTO '==>J/JJJJJJJJ - CC=XXXXXXXX AB-PSW=XXXXXXXX XXXXXXXX IN=&M',*\n               MF=L\nESTEHE  EQU *\nESTHEX  DC  C' 0123456789ABCDEF'\n*---------------------------------------*\n         LTORG\n         TITLE 'IKJEFLD1--Working Storage'\nVSTWORK  DSECT\nDSSA     DS    18F\nVSTWORKE DS    0F\nEXTLSTD  EXTRACT 0,'S',FIELDS=(COMM),MF=L\nENQLISTD ENQ   (SYSNAME,RNAME,E,3,SYSTEM),RET=HAVE,MF=L\nDEQLISTD DEQ   (SYSNAME,RNAME,3,SYSTEM),RET=HAVE,MF=L\nESTALSTD ESTAE  ,,,ASYNCH=YES,PURGE=NONE,MF=L\nESTEM WTO '==>J/JJJJJJJJ - CC=XXXXXXXX AB-PSW=XXXXXXXX XXXXXXXX IN=&M',*\n               MF=L\nCSCL     DS    F                   Address of CMD SCHED COMM list\n*                                    (ECB,CIB,TOKEN)\nSSNAME   DS    CL4                 Subsystem name\nUSERID   DS    CL7                 User ID\nKEYSAVE  DS    XL1                 PSW key save\n\nDSBASE   DS    F                   ESTAE base save area\nDSRETR   DS    A                   ESTAE retry address\nDSABEND  DS    F                   ESTAE abend code save area\nDSPSW    DS    XL8                 ESTAE abend PSW save area\nDSGPR    DS    16F                 ESTAE abend register save area\nDSRTRC   DS    XL1                 ESTAE retry counter\nDSEDW    DS    D                   ESTAE retry work field\n         DS    H                   ESTAE retry work field\nDSEHW    DS    H                   ESTAE retry work field\nDSEFW    DS    F                   ESTAE retry work field\n         DS    X                   ESTAE retry work field\n\n         DS    0D                  Align on doubleword boundary\nVSTDATLN EQU   *-VSTWORK           Length of working storage\nVSTDLTH  EQU   *-VSTWORKE          Length of working storage\n         TITLE 'IKJEFLD1--ASCB Map'\n         IHAASCB\n         TITLE 'IKJEFLD1--PSA Map'\n         IHAPSA ,\n         TITLE 'IKJEFLD1--CSCB Map'\nVSTRCHAN DSECT\n         IEECHAIN\n         TITLE 'IKJEFLD1--Command Input Buffer'\nVSTARCIB DSECT\n         IEZCIB\n         TITLE 'IKJEFLD1--SDWA Map'\n         IHASDWA\n         END   IKJEFLD1\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IKJEFLD2": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x94\\x15\\x1f\\x00\\x99\\x19\\x0f\\x10\\x17\\x00T\\x005\\x00\\x00\\xc5\\xc4\\xd1\\xe7\\xc1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1994-05-31T00:00:00", "modifydate": "1999-07-09T10:17:00", "lines": 84, "newlines": 53, "modlines": 0, "user": "EDJXADM"}, "text": "         TITLE 'IKJEFLD2 -- LOGOFF EXIT '\nIKJEFLD2 CSECT\nIKJEFLD2 AMODE 24\nIKJEFLD2 RMODE 24\n***********************************************************************\n*        KILL 'IKJ56457I PROGRAM ERROR' MESSAGE IF LOGON UNDER 'MSTR'\n***********************************************************************\n*  REGISTER ASSIGNMENTS\n***********************************************************************\n*\nR0       EQU   0\nR1       EQU   1                   Input ptr.\nR2       EQU   2                   Work register.\nR3       EQU   3                   Work register.\nR4       EQU   4                   Work register.\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nRBASE    EQU   12                  Base register.\nR13      EQU   13                  Hi-save ptr.\nR14      EQU   14                  Return register.\nR15      EQU   15                  Link register.\n*\n         SPACE\n         SAVE  (14,12),,===>IKJEFLD2-&SYSDATE.-&SYSTIME<===\n         LR    RBASE,R15           Load base register\n         USING IKJEFLD2,RBASE  *** Synchronize base register\n         USING PSA,R0          *** Synchronize PSA DSECT\n         L     R2,PSATOLD          Load TCB address\n         USING TCB,R2          *** Synchronize TCB DSECT\n         L     R2,TCBJSCB          Load JSCB address\n         DROP  R2              *** Drop TCB DSECT\n         USING IEZJSCB,R2      *** Synchronize JSCB DSECT\n         L     R2,JSCBSSIB         Load life-of-job SSIB address\n         DROP  R2              *** Drop JSCB DSECT\n         USING SSIB,R2         *** Synchronize SSIB DSECT\n         CLC   SSIBSSNM,=C'MSTR'   Is this MSTR subsystem ?\n         BNE   RET                 Branch if not\n         DROP  R2              *** Drop SSIB DSECT\n         L     R2,PSAAOLD          Load ASCB address\n         USING ASCB,R2         *** Synchronize ASCB DSECT\n         L     R2,ASCBASXB         Load ASXB address\n         DROP  R2              *** Drop ASCB DSECT\n         USING ASXB,R2         *** Synchronize ASXB DSECT\n         L     R2,ASXBLWA          Load LWA address\n         DROP  R2              *** Drop ASXB DSECT\n         USING LWA,R2          *** Synchronize LWA DSECT\n         L     R2,LWAJSEL          Load JSEL address\n         DROP  R2              *** Drop LWA DSECT\n         USING JSEL,R2         *** Synchronize JSEL DSECT\n         L     R3,JSELJSXL         Load JSXL address\n         DROP  R2              *** Drop JSEL DSECT\n         CLI   2(R3),X'24'         JSS RC = 32 (ERR DUE TO ABEND33E) ?\n         BNE   RET                 Branch if not\n         IPK                       Save PSW key\n         SPKA  X'00'               Switch to PSW key zero\n         MVI   2(R3),X'00'         Set return code=00 (KILL IKJ56457I)\n         SPKA  0(R2)               Restore PSW key\nRET      DS    0H\n         RETURN (14,12),RC=0       Return\n*-------\n         LTORG\n         TITLE 'IKJEFLD2--SSIB Map'\n         IEFJSSIB ,\nJSELSECT DSECT ,\n         TITLE 'IKJEFLD2--JSEL Map'\n         IEFVJSEL ,\n         TITLE 'IKJEFLD2--JSCB Map'\n         IEZJSCB ,\n         TITLE 'IKJEFLD2--ASCB Map'\n         IHAASCB ,\n         TITLE 'IKJEFLD2--ASXB Map'\n         IHAASXB ,\n         TITLE 'IKJEFLD2--PSA Map'\n         IHAPSA ,\n         TITLE 'IKJEFLD2--LWA Map'\n         IKJEFLWA ,\n         TITLE 'IKJEFLD2--TCB Map'\n         IKJTCB ,\n         END   IKJEFLD2\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PHXTSO1": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x17\\x9f\\x00\\x99\\x17\\x9f \\x10\\x00\\x12\\x00\\x12\\x00\\x00\\xc5\\xd1\\xc1\\xc6\\xc6\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-06-28T00:00:00", "modifydate": "1999-06-28T20:10:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "EJAFFE"}, "text": "++USERMOD(PHXTSO1) REWORK(1999132) /*\n  ************************************************************\n  *                                                          *\n  * ZAP for Allowing LOGON under MSTR Subsystem              *\n  *                                                          *\n  * The ZAP offset may vary from TSO/E release to release.   *\n  * To find the exact ZAP location PZAP LMOD IKJEFLA1 CSECT  *\n  * IKJEFLB, locate hex string '0000009DC9D2D1C5C6D3C340'    *\n  * and rework the ZAP.                                      *\n  ************************************************************\n */ .\n++VER(Z038) FMID(HTE26D2)\n            .\n++ZAP(IKJEFLB) .\n  NAME IKJEFLB\n  VER 0924 0000009D,C9D2D1C5C6D3C340\n  REP 0924 0000009F,C9D2D1C5C6D3C340\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TL": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x17\\x9f\\x00\\x99\\x18\\x0f\\x13X\\x01c\\x01k\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-06-28T00:00:00", "modifydate": "1999-06-29T13:58:00", "lines": 355, "newlines": 363, "modlines": 0, "user": "SBGOLOB"}, "text": "/*REXX*/\nsignal on novalue\narg p1 p2\n\n/*--------------------------------------------------------------*/\n/* This exec builds JCL to label a tape and submits it to the   */\n/* internal reader.  The two paramerers are OUT(unit) and       */\n/* SER(serial|NL).  NL indicates a non-label tape and anything  */\n/* else indicates a standard label tape.                        */\n/*--------------------------------------------------------------*/\n\nfalse = 0\ntrue = 1\n\nCALL get_parameters\nCALL validate\nIF \u00acerror THEN\n  DO\n    CALL job_prolog\n    IF sername = \"NL\" THEN\n      CALL build_non_label_step\n    ELSE\n      CALL build_standard_label_step\n    CALL submit\n  END\n\nReturn 0\n\n/*******************************************************************/\n\nget_parameters:\n\n/*--------------------------------------------------------------*/\n/*                                                              */\n/* The parameter must be OUT(uuuu) or SER(ssssss).  Either way, */\n/* at least 5 for the parameter shell are required.  If it's    */\n/* not there, the parameter will remain blank and fail the      */\n/* validate routine.                                            */\n/*                                                              */\n/* Note that the way the parameter is passed to this exec is    */\n/* slightly different from the way the parameter is passed from */\n/* the operator to the started task.  The start syntax is       */\n/* S TL,OUT=uuuu,SER=ssssss.  The started task JCL, in turn,    */\n/* invokes this exec by the following call:                     */\n/*                                                              */\n/*  //TL       PROC   OUT=,SER=                                 */\n/*  //STEPNAME EXEC   PGM=IKJEFT01,                             */\n/*  // PARM='TLEXEC OUT(&OUT) SER(&SER)'                        */\n/*  //SYSTSPRT DD     DUMMY                                     */\n/*  //SYSTSIN  DD     DUMMY                                     */\n/*  //SYSEXEC  DD     DSN=pds.containing.tlexec.member,DISP=SHR */\n/*                                                              */\n/* The exec also allows SER(&SER) OUT(&OUT); i.e. the           */\n/* parameters can be specified in either order.                 */\n/*                                                              */\n/*--------------------------------------------------------------*/\n\nunitout = \"\"\nsername = \"\"\n\n/*--------------------------------------------------------------*/\n/* Extract the first parameter.                                 */\n/*--------------------------------------------------------------*/\n\np1_len = length(p1)\nIF p1_len > 5 THEN\n  DO\n    IF right(p1,1) = \")\" &,\n       left(p1,4) = \"OUT(\" THEN\n      unitout = substr(p1,5,p1_len - 5)\n    ELSE IF right(p1,1) = \")\" &,\n       left(p1,4) = \"SER(\" THEN\n      sername = substr(p1,5,p1_len - 5)\n    ELSE\n      \"SE 'Illegal parameter specification - \"p1\" - ignored'\"\n  END\n\n/*--------------------------------------------------------------*/\n/* Extract the second parameter.                                */\n/*--------------------------------------------------------------*/\n\np2_len = length(p2)\nIF p2_len > 5 THEN\n  DO\n    IF right(p2,1) = \")\" &,\n       left(p2,4) = \"OUT(\" THEN\n      DO\n        IF unitout = \"\" THEN\n          unitout = substr(p2,5,p2_len - 5)\n        ELSE\n          \"SE '''OUT'' parameter duplicated'\"\n      END\n    ELSE IF right(p2,1) = \")\" &,\n       left(p2,4) = \"SER(\" THEN\n      DO\n        IF sername = \"\" THEN\n          sername = substr(p2,5,p2_len - 5)\n        ELSE\n          \"SE '''SER'' parameter duplicated'\"\n      END\n    ELSE\n      \"SE 'Illegal parameter specification - \"p2\" - ignored'\"\n  END\n\n/*--------------------------------------------------------------*/\n/* Build a unit variable for the JCL generation based on the    */\n/* specified unit.  If the unit is four characters, include the */\n/* special symbol \"/\" to distinguish it from a possible four    */\n/* character device name.                                       */\n/*                                                              */\n/* The reason for two copies of the unit, with and without the  */\n/* potential slash, is because the unit will also be used to    */\n/* construct the job name for operator convenience and          */\n/* readability but the slash is not allowed in a job name.      */\n/*--------------------------------------------------------------*/\n\nunitjcl = unitout\nIF length(unitjcl) = 4 THEN\n  unitjcl = \"/\" || unitjcl\n\nReturn 0\n\n/*******************************************************************/\n\nvalidate:\n\n/*--------------------------------------------------------------*/\n/* This routine enforces the following restrictions:            */\n/*                                                              */\n/* UNIT= must be 3-4 characters and must be hexadecimal.        */\n/* SER=  must be 1-6 characters and must be composed only of    */\n/*       alphanumeric or national characters.                   */\n/*                                                              */\n/* It is implied that you cannot have a tape volume called NL.  */\n/*--------------------------------------------------------------*/\n\n/*--------------------------------------------------------------*/\n/* Assume that the parameters are innocent until proven guilty. */\n/*--------------------------------------------------------------*/\n\nerror = false\nunit_missing = false\nunit_illegal = false\nser_missing = false\nser_illegal = false\n\n/*--------------------------------------------------------------*/\n/* Place the unit on trial.                                     */\n/*--------------------------------------------------------------*/\n\nIF unitout = \"\" THEN\n  unit_missing = true\nELSE IF length(unitout) > 4 THEN\n  DO\n    unit_illegal = true\n    unit_error_text = \"exceeds four characters.\"\n  END\nELSE IF length(unitout) < 3 THEN\n  DO\n    unit_illegal = true\n    unit_error_text = \"has fewer then three characters.\"\n  END\nELSE IF \u00acDATATYPE(unitout,\"X\") THEN\n  DO\n    unit_illegal = true\n    unit_error_text = \"is not a hexadecimal device number.\"\n  END\n\n/*--------------------------------------------------------------*/\n/* Place the volume serial on trial.                            */\n/*--------------------------------------------------------------*/\n\nIF sername = \"\" THEN\n  ser_missing = true\nELSE IF length(sername) > 6 THEN\n  DO\n    ser_illegal = true\n    ser_error_text = \"exceeds six characters.\"\n  END\nELSE\n  DO ser_num = 1 to length(sername) WHILE \u00acser_illegal\n    ser_char = substr(sername,ser_num,1)\n    IF index(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$\",ser_char) = 0 THEN\n      DO\n        ser_illegal = true\n        ser_error_text = \"contains an invalid character \" || ser_char || \".\"\n      END\n  END\n\n/*--------------------------------------------------------------*/\n/* If one of the parameters is missing or illegal, send the     */\n/* operator a message saying which parameter had the error and  */\n/* what the error is.                                           */\n/*--------------------------------------------------------------*/\n\nerror = unit_missing |,\n        unit_illegal |,\n        ser_missing |,\n        ser_illegal\n\nIF error THEN\n  DO\n    CALL blank_message\n    IF unit_missing THEN\n      \"SE '''OUT=device'' parameter missing.'\"\n    IF ser_missing THEN\n      \"SE '''SER=volume|NL'' parameter missing.'\"\n    IF unit_illegal THEN\n      \"SE '''OUT=\"unitout\"'' \"unit_error_text\"'\"\n    IF ser_illegal THEN\n      \"SE '''SER=\"sername\"'' \"ser_error_text\"'\"\n    CALL blank_message\n  END\n\nReturn 0\n\n/*******************************************************************/\n\nadd_line:\n\n/*--------------------------------------------------------------*/\n/* This routine places another line into the stem variable JCL. */\n/*--------------------------------------------------------------*/\n\nlines = lines + 1\njcl.lines = line\n\nReturn 0\n\n/*******************************************************************/\n\njob_prolog:\n\n/*--------------------------------------------------------------*/\n/* This routine creates the introductory JCL statements for the */\n/* tape label job.                                              */\n/*--------------------------------------------------------------*/\n\nlines = 0\n\nline = \"//LABL\" || unitout \"   JOB   MSGCLASS=A\"\nCALL add_line\n\nline =  \"//*MAIN    RINGCHK=NO\"\nCALL add_line\n\nReturn 0\n\n/*******************************************************************/\n\nbuild_non_label_step:\n\n/*--------------------------------------------------------------*/\n/* This is a non-label invocation.  This is accomplished by     */\n/* writing an EOF mark and nothing else on the tape.  The way   */\n/* this is done is that the tape is simply opened for output    */\n/* and then closed.  The easiest way to do this is by running   */\n/* an IEBGENER to the tape without providing any data.          */\n/*--------------------------------------------------------------*/\n\nline =  \"//TL       EXEC   PGM=IEBGENER\"\nCALL add_line\n\nline =  \"//SYSPRINT DD     SYSOUT=*\"\nCALL add_line\n\nline =  \"//SYSIN    DD     DUMMY\"\nCALL add_line\n\nline =  \"//SYSUT1   DD     DUMMY,DCB=(RECFM=FB,LRECL=80,BLKSIZE=80)\"\nCALL add_line\n\nline =  \"//SYSUT2   DD     DISP=(NEW,PASS),LABEL=(,BLP),\"\nCALL add_line\n\nline = \"// UNIT=\" || unitjcl\nCALL add_line\n\nReturn 0\n\n/*******************************************************************/\n\nbuild_standard_label_step:\n\n/*--------------------------------------------------------------*/\n/* This is a standard-label invocation.  This is accomplished   */\n/* by invoking IEHINITT and supplying the volume serial as      */\n/* input to IEHINITT.  The unit is used to construct the output */\n/* DD.                                                          */\n/*--------------------------------------------------------------*/\n\nline =  \"//TL       EXEC   PGM=IEHINITT\"\nCALL add_line\n\nline =  \"//TAPE     DD     DISP=(NEW,PASS),LABEL=(,BLP),\"\nCALL add_line\n\nline = \"// UNIT=(\" || unitjcl || \",,DEFER)\"\nCALL add_line\n\nline =  \"//SYSPRINT DD     SYSOUT=*\"\nCALL add_line\n\nline =  \"//SYSIN    DD     *\"\nCALL add_line\n\nline =  \"TAPE       INITT  SER=\" || sername\nCALL add_line\n\nline =  \"/*\"\nCALL add_line\n\nCALL blank_message\n\"SE 'When message IEC701D appears, reply M to it             '\"\n\n/*--------------------------------------------------------------*/\n/* The following two operator messages apply only to second     */\n/* level systems on VM.                                         */\n/*--------------------------------------------------------------*/\n\n\"SE 'and then enter the MVS command V \"unitout\",ONLINE       '\"\n\"SE '(even if it is already online!)                         '\"\n\nCALL blank_message\n\nReturn 0\n\n/*******************************************************************/\n\nblank_message:\n\n/*--------------------------------------------------------------*/\n/* This routine sends a blank line to the console.  It is used  */\n/* to separate other messages making them easier to read.       */\n/*--------------------------------------------------------------*/\n\n\"SE ' '\"\n\nReturn 0\n\n/*******************************************************************/\n\nsubmit:\n\n/*--------------------------------------------------------------*/\n/* This routine submits the JCL by writing it to the internal   */\n/* reader.                                                      */\n/*--------------------------------------------------------------*/\n\njcl.0 = lines\n\"ALLOC F(SUBFILE) SYSOUT(A) WRITER(INTRDR) REUS\"\n\"EXECIO * DISKW SUBFILE (STEM jcl. FINIS\"\n\"FREE F(SUBFILE)\"\n\nReturn 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TL$$": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x18\\x0f\\x00\\x99\\x19\\x0f\\x11I\\x00\\x08\\x00\\x08\\x00\\x00\\xc5\\xc4\\xd1\\xe7\\xc1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-06-29T00:00:00", "modifydate": "1999-07-09T11:49:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "EDJXADM"}, "text": "From rfine@vnet.IBM.COM Thu Oct 10 23:06:22 1996\nDate: Thu, 10 Oct 96 14:53:22 EDT\nFrom: Richard Fine <rfine@vnet.IBM.COM>\nTo: edjaffe@phoenixsoftware.com\nSubject: Tape Label REXX exec\n\nHi Ed,  here's the REXX exec:\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT377/FILE377.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT377", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}