/* REXX - APPLDUMP
   Dump the specified/current profile(s) and related
   ISPPROF tables to a (series of) sequential file(s) named
   userid.applid.APPLDUMP.  The specified applid can
   contain wildcard values "*" and/or "%";  e.g. TSO
   %APPLDUMP IS*

   This exec must be named APPLDUMP for recursive execution.

   Obtained from file 752 of the CBT Tape, from author
   Robin Ryerse of EDS (robin.ryerse@eds.com)

  Robin's sccpdsd assembler routine could not be assembled for
  whatever reason, so I (Bill Earle) created my own version of
  it and placed the code at sccpdsd:.

*/
debug = 'N'
'SUBCOM ISPEXEC'
if rc \= 0 then
  do
     say 'APPLDUMP:  Usage must be from within ISPF.'
     exit 16
  end
address 'ISPEXEC'
'CONTROL ERRORS RETURN'
'VGET ZAPPLID'
if debug = 'Y' then
   say 'Current APPL =' zapplid
Parse arg appl options
if debug = 'Y' then
   say 'arg=' arg 'appl=' appl 'options=' options
libdef_d = options \= ''
parse upper value appl zapplid with appl .
if debug = 'Y' then
  do
     say 'appl=' appl 'zapplid=' zapplid 'appl=' appl
     say appl'PROF'
  end
/* call sccpdsd appl'PROF' */
if debug = 'Y' then
   say 'Calling sccpdsd with appl=' appl
call sccpdsd appl
if debug = 'Y' then
   do
     say 'Returning from sccpdsd with d.0 =' d.0 'entries'
     say 'd.1 =' d.1
   end
if d.0 = 0 then
  do
     say 'APPLDUMP:  ',
                   appl'PROF is not a saved ISPF profile/table.'
     exit 12
  end
d# = 0
if wordpos(appl,zapplid 'ISPS') = 0 then
  do
     do d# = 1 to d.0
        parse var d.d# appl
        newappl = appl
        if newappl = 'ISPS' then newappl = 'ISP'
       'SELECT CMD(%APPLDUMP' appl') NEWAPPL('newappl') PASSLIB'
     end
     if rc > 0 then say zerrlm
     exit rc
  end

max_len = 251
r# = 0
/*
if libdef_d = '' then  /* desired profile library already allocated */
  do
     d.0 = 1
     d.1 = appl||'PROF'
     tablenam = d.1
  end
else
  do
    'LIBDEF ISPTLIB LIBRARY ID(ISPPROF)'
     call sccpdsd appl
  end
*/
do d# = 1 to d.0
   parse var d.d# tablenam 9
   tablenam = tablenam || 'PROF'
   tbopened = 0
   'TBTOP ' tablenam
   if rc > 8 then
   do
    'TBOPEN' tablenam 'NOWRITE'
     if rc > 8 then
       do
          r# = r# + 1
          r.r# = 'APPLDUMP: TBOPEN' tablenam 'rc=' rc'.' zerrlm
          iterate d#
       end
     tbopened = 1
    'TBTOP ' tablenam
   end
   'TBSTATS' tablenam 'CDATE(CDATE) UDATE(UDATE) UTIME(UTIME) ROWCURR(ROWS)',
         'STATUS1(STAT) STATUS2(STAT2) STATUS3(STAT3) LIBRARY(ISPPROF)'
   parse var cdate  yr '/' monthday
   cdate = monthday || '/' || yr
   parse var udate  yr '/' monthday
   udate = monthday || '/' || yr
   if rows = '' then
      rows = 0
   var_names = ''
   key_lit = ''
   if tablenam = appl'PROF' then
     do
       'TBSKIP' tablenam 'SAVENAME(VVVV)'
       var_names = substr(vvvv,2,length(vvvv)-2)
     end
   else
     do
       'TBQUERY' tablenam 'KEYS(KKKK) NAMES(VVVV)'
       if length(vvvv) > 2 then var_names =   substr(vvvv,2,length(vvvv)-2)
       if length(kkkk) > 2 then key_lit = '   Keys:' substr(kkkk,2,length(kkkk)-
       'TBSKIP' tablenam
     end
   r# = r# + 1
   r.r# = left(tablenam':',9),
      '  Variables:' right(words(var_names),3),
      '  Created:' cdate,
      '  Updated:' udate utime
/*
   r# = r# + 1
   r.r# = '            Rows:' rows '  Stati:' stat stat2 stat3 key_lit
*/
   max_len = max(max_len,length(r.r#))
   do rw# = 1 to rows
     saves = var_names
     r# = r# + 1
     r.r# = left('--------' tablenam 'row:' right(rw#,5),72,'-')
     tlen = 0;
     do While saves \= ''
        r# = r# + 1
        Parse Var saves wwww saves
        tlen = tlen + length(wwww)
        Interpret 'val =' wwww
        r.r# = left(wwww,9)right(length(val),5) val
        max_len = max(max_len,length(r.r#))
     end
     drop value(var_names)
     if appl'PROF' = tablenam then
       do
         'TBSKIP' tablenam 'SAVENAME(VVVV)'
         var_names = substr(vvvv,2,length(vvvv)-2)
       end
     else 'TBSKIP' tablenam
     if rc > 0 then leave rw#
end
if tbopened then do; 'TBTOP' tablenam; 'TBCLOSE' tablenam; end
end
r.0 = r#

'LIBDEF ISPTLIB'
address 'TSO'
UID    = USERID()                                  /* USER'S TSO ID */
IF UID = 'xxxxxxxx' THEN
   HLQ = 'DBA.ABCD'
IF UID = 'yyyyyyyy' THEN
   HLQ = 'DBA.EFG'

dsn = hlq ||'.'appl'.APPLDUMP'

'ALLOC F(TBLDUMP) DA('dsn') MOD DEL UNIT(SYSDA) REU'
'ALLOC F(TBLDUMP) DA('dsn') NEW CAT TR SPA(20,20) RELEASE REUSE',
  'DSORG(PS) RECFM(V B) LRECL('max_len+4') BLKSIZE(0) UNIT(SYSDA)'
'EXECIO' r.0 'DISKW TBLDUMP (FINIS STEM R.'
'FREE FILE(TBLDUMP)'
/*
say
say 'Output file has been written to' dsn
say
*/
ADDRESS ISPEXEC "BROWSE DATASET('"dsn"')"
exit 0

sccpdsd:
/**********************************************************************

   Written by Bill Earle to work with the APPLDUMP rexx originally
   written by Robin Ryerse of EDS Canada. This rexx routine replaces
   the assembler code required by Robin's code.

   arg wc is for passing a wildcard for limiting the applPROF members
   you want to process. A valid wildcard can be:

     1. An actual specific appl name (i.e. ISR) minus the PROF.
     2. A wildcard selection (ex. IS*) that will only process
        xxxxPROF members that start with IS.

     NOTE: Do NOT include the 'PROF' in the wildcard, only the prefix,
           ex. ISRPROF would simply be ISR (or ISR*)

**********************************************************************/
arg wc
if wc = '' then                           /* no wildcard parm passed */
   wclen = 0
else
  do
     if pos('*',wc) > 0 then           /* true wildcard, name prefix */
        do
           parse var wc wcappl '*' rest
           wclen = length(wcappl)
        end
     else
        do
           wcappl = wc
           wclen = length(wc)         /* length set to actual prefix */
        end
  end
NUMERIC DIGITS 12
@return = 0
z = 0
uid = userid()                                  /* get users TSO is */
pds = uid || '.ISPF.PROFILE'
memlist = '@return=#MEMLIST('||pds||')'
interpret memlist
@i = 0
d.0 = 0
d.     = ''
if @return > 0 THEN
  do @i=1 to @return
     PULL @mem.@i
     mbrname = @mem.@i
     mbr.@i = @mem.@i
     if pos('PROF',mbrname) > 1 then
        do
           name = right(mbrname,4)  /* see if last 4 chars are PROF */
           if name = 'PROF' then
              do
                if wclen = 0 then  /* no wildcard */
                   do
                      parse var mbrname applid 'PROF'
                      z = z + 1
                      d.0 = z
                      d.z = applid
                   end
                else
                   do
                      parse var mbrname applid 'PROF'
                      ckmbr = substr(applid,1,wclen) /* get wc len */
                      if ckmbr = wcappl then     /* match on wc */
                         do
                            z = z + 1
                            d.0 = z
                            d.z = applid
                         end
                   end
              end
        end
  end
if d.0 > 0 then
  do
     if zapplid = appl then
        do
        /*
           say 'turning trace on'
           trace r
        */
           say 'Here''s the list of found APPL profile members in ' pds
           say 'that meet the wildcard specification' wc
           say
           do z = 1 to d.0
              say z d.z
           end
        /*
           say 'turning trace off'
           trace o
        */
        end
  end
return
