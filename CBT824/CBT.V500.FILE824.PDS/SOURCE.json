{"INMR01": {"INMLRECL": 80, "INMFNODE": "BVOMM", "INMFUID": "RLRICE", "INMTNODE": "BVOMM", "INMTUID": "RLRICE", "INMFTIME": "20100222201944000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1116934, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 4000, "INMRECFM": "FB", "INMDIR": 11, "INMDSNAM": "RLRICE.VTOCZAP.SOURCE.CBT", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"RLRICE.VTOCZAP.SOURCE.CBT": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 4000, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3339, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 0}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x07\\xe0\\x00\\x04jP`'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x07\\xe0\\x00\\x04jP`'", "b'P\\xe2p\\x88\\x00\\x00\\x00\\xe1\\x00\\x00\\x00\\xe5\\x00\\x0e\\x00K'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"VZAPAPF": {"ttr": 27, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00H\\x01\\x10\\x04\\x8f\\x01\\x10\\x04\\x8f\\x16\\x17\\x00X\\x00X\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-17T00:00:00", "modifydate": "2010-02-17T16:17:48", "lines": 88, "newlines": 88, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: VZAPAPF                                               *\n*                                                                     *\n*  Dynamic authorization/de-authorization                             *\n*                                                                     *\n*     R0=1        Turn on APF authorization                           *\n*     R0=0        Turn off APF authorization                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPAPF  CSECT\nVZAPAPF  AMODE 31\nVZAPAPF  RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPAPF,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPAPF'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(AUTHEND-VZAPAPF)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R10,R15                        COPY BASE ADDRESS\n         DROP  R15\n         USING VZAPAPF,R10\n         L     R15,COMM_DXD                   DXD ADDRESS\n         A     R15,DXD_START                  PLUS OFFSET\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        COPY DXD AREA ADDRESS\n         USING DXDAPF,R13                     DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R0\n         LTR   R0,R0\n         BZ    MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=ON\n\n*   Add code needed to dynamically turn on APF here\n\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=OFF\n\n*   Add code needed to dynamically turn off APF here\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE SAVE AREA\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START      DC  Q(DXDAPF)\n\nAUTHEND        EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDAPF         DSECT\n               COPY  DXDPREF\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY REGEQU\n               END  VZAPAPF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPAUTH": {"ttr": 4618, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00U\\x01\\x10\\x04\\x8f\\x01\\x10\\x05?\\x14\\x16\\x00\\xc5\\x00\\xc5\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2010-02-17T00:00:00", "modifydate": "2010-02-22T14:16:55", "lines": 197, "newlines": 197, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: VZAPAUTH                                              *\n*                                                                     *\n*  Verify user is authorized to perform function(s)                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPAUTH CSECT\nVZAPAUTH AMODE 31\nVZAPAUTH RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPAUTH,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPAUTH'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(AUTHEND-VZAPAUTH)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R10,R15                        COPY BASE ADDRESS\n         DROP  R15\n         USING VZAPAUTH,R10\n         L     R15,COMM_DXD                   DXD ADDRESS\n         A     R15,DXD_START                  PLUS OFFSET\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        COPY DXD AREA ADDRESS\n         USING DXDAUTH,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=ENTRY,                                              +\n               DATA1=(COMM_VTOCZAP_FUNCTION,1)\n         L     R8,COMM_VZAPSPFD\n         USING VZAPSPFD,R8\n         MVI   DXD_RC,0                       SET DEFAULT RC\n         MVC   DXD_RACROUTE(RACROUTE_L),RACROUTE_I\n         MVI   DXD_CLASS_LENGTH,8             SET CLASS LENGTH\n         MVC   DXD_CLASS_NAME,CLASS           INITIALIZE CLASS NAME\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CLI   COMM_VTOCZAP_FUNCTION,$VTOCZAP_READ_VTOC\n         BE    MAIN0100\n         CLI   COMM_VTOCZAP_FUNCTION,$VTOCZAP_DISPLAY_FMT1\n         BE    MAIN0200\n         CLI   COMM_VTOCZAP_FUNCTION,$VTOCZAP_UPDATE_FMT1\n         BE    MAIN0300\n         CLI   COMM_VTOCZAP_FUNCTION,$VTOCZAP_UPDATE_VTOC\n         BE    MAIN0400\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0100 DS    0H\n         ITRACE ID=READVTOC\n         MVC   DXD_ENTITY,READVTOC\n         MVC   DXD_MSG_1(MSG01_L),MSG01\n         B     MAIN1000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         ITRACE ID=DISPFMT1\n         MVC   DXD_ENTITY,DISPFMT1\n         MVC   DXD_MSG_1(MSG02_L),MSG02\n         B     MAIN1000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=UPDTFMT1\n         MVC   DXD_ENTITY,UPDTFMT1\n         MVC   DXD_MSG_1(MSG03_L),MSG03\n         B     MAIN1000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0400 DS    0H\n         ITRACE ID=UPDTVTOC\n         MVC   DXD_ENTITY,UPDTVTOC\n         MVC   DXD_MSG_1(MSG04_L),MSG04\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        The LOG=NO option requires APF authorization                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN1000 DS    0H\n         ITRACE ID=APF_ON\n         LA    R0,1\n         L     R15,COMM_V_VZAPAPF             TURN ON APF AUTHORIZATION\n         BALR  R14,R15\n         ITRACE ID=RACROUTE,                                           +\n               DATA1=DXD_CLASS_NAME,                                   +\n               DATA2=DXD_ENTITY\n         RACROUTE REQUEST=AUTH,               CHECK RACF AUTHORIZATION +\n               ATTR=READ,                                              +\n               CLASS=DXD_CLASS_LENGTH,                                 +\n               ENTITY=DXD_ENTITY,                                      +\n               WORKA=DXD_WORKA,                                        +\n               MF=(E,DXD_RACROUTE)\n         ITRACE ID=RC,                        TRACE RACF RC            +\n               RDATA1=R15\n         STC   R15,DXD_RC                     SAVE RACF RC\n         ITRACE ID=APF_OFF\n         SR    R0,R0\n         L     R15,COMM_V_VZAPAPF\n         BALR  R14,R15                        TURN OFF APF\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CLI   DXD_RC,0                       USER AUTHORIZED?\n         BE    EXIT0000                       YES\n         MVC   SPF_MSG_1,DXD_MSG_1\n         MVC   SPF_MSG_2,COMM_BLANKS\n         MVC   SPF_MSG_2,COMM_BLANKS\n         MVC   SPF_MSG_3,COMM_BLANKS\n         MVC   SPF_MSG_4,COMM_BLANKS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         SR    R15,R15\n         IC    R15,DXD_RC                     GET RC\n         ITRACE ID=EXIT,                                               +\n               RDATA1=R15\n         L     R13,4(,R13)                    RESTORE R13\n         L     R14,12(,R13)                   RESTORE R14\n         LM    R0,R12,20(R13)                 RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START      DC    Q(DXDAUTH)\nRACROUTE_I     RACROUTE REQUEST=AUTH,LOG=NONE,MF=L\nRACROUTE_L     EQU   *-RACROUTE_I\n\nCLASS          DC    CL8'class'             <---- change this\nREADVTOC       DC    CL8'READVTOC'\nDISPFMT1       DC    CL8'DISPFMT1'\nUPDTFMT1       DC    CL8'UPDTFMT1'\nUPDTVTOC       DC    CL8'UPDTVTOC'\n\nMSG01          DS    0C\n               DC    C'VZAPAUTH01E Not authorized to read VTOCs'\nMSG01_L        EQU   *-MSG01\n\nMSG02          DS    0C\n               DC    C'VZAPAUTH02E Not authorized to display format-1 i+\n               nfo'\nMSG02_L        EQU   *-MSG02\n\nMSG03          DS    0C\n               DC    C'VZAPAUTH03E Not authorized to update format-1 in+\n               fo'\nMSG03_L        EQU   *-MSG03\n\nMSG04          DS    0C\n               DC    C'VZAPAUTH04E Not authorized to update VTOCs'\nMSG04_L        EQU   *-MSG04\n\nAUTHEND        EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDAUTH        DSECT\n               COPY  DXDPREF\n\nDXD_RACROUTE   DS    0F,(RACROUTE_L)X\n\nDXD_CLASS_LENGTH DS  X\nDXD_CLASS_NAME   DS  CL8\nDXD_ENTITY       DS  CL8\n\nDXD_MSG_1      DS    CL80\n\nDXD_WORKA      DS    CL512\n\nDXD_RC         DS    X\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               VZAPSPFD  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY REGEQU\n               END  VZAPAUTH\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPBIT1": {"ttr": 257, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x005\\x01\\x10\\x03o\\x01\\x10\\x03\\x9f\\t\\x11\\x018\\x01:\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2010-02-05T00:00:00", "modifydate": "2010-02-08T09:11:35", "lines": 312, "newlines": 314, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPBIT1                                              *\n*                                                                     *\n*   Display/update 1 byte fields that are bit flags                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPBIT1 CSECT\nVZAPBIT1 AMODE 31\nVZAPBIT1 RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPBIT1,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPBIT1'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPBIT1)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPBIT1,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDBIT1,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         L     R9,COMM_VZAPSPFD\n         USING VZAPSPFD,R9\n         L     R8,COMM_SELECTED_DSCB          SELECTED DSCB\n         USING VTOCDATA,R8\n* ------------------------------------------------------------------- *\n*        Compute data address                                         *\n* ------------------------------------------------------------------- *\n         L     R5,COMM_SELECTED_FIELD         SELECTED FIELD\n         USING FIELD_DSECT,R5\n         ITRACE ID=FIELD,                                              +\n               DATA1=FIELD_LABEL,                                      +\n               DATA2=(FIELD_DISP,2)\n         SR    R4,R4\n         ICM   R4,3,FIELD_DISP                DISP TO DATA\n         AR    R4,R8                          PLUS BASE\n* ------------------------------------------------------------------- *\n*        Copy data to allow user to abort                             *\n* ------------------------------------------------------------------- *\n         ITRACE ID=DATA,                                               +\n               RDATA1=R4,                                              +\n               DATA2=(0(R4),1)\n         MVC   DXD_DATA,0(R1)                 COPY DATA\n* ------------------------------------------------------------------- *\n*        Obtain VDATA for dynamic area                                *\n* ------------------------------------------------------------------- *\n         MVC   COMM_PANEL,FIELD_PANEL         COPY PANEL NAME\n         ITRACE ID=PQRY,                                               +\n               DATA1=COMM_PANEL\n         L     R15,COMM_V_VZAPPQRY            VZAPPQRY ENTRY POINT\n         BALR  R14,R15                        CALL VTOPQRY\n         L     R0,SPF_VDEPTH                  NUMBER OF ROWS\n         MH    R0,SPF_VWIDTH+2                COMPUTE VDATA SIZE\n         ST    R0,COMM_VDATA_LENGTH           SAVE LENGTH\n         GETMAIN RU,                          GETMAIN STORAGE FOR VDATA+\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,COMM_VDATA_ADDR             SAVE ADDR\n         ITRACE ID=VDATA,                                              +\n               RDATA1=R1,                                              +\n               DATA2=(COMM_VDATA_LENGTH,4)\n* ------------------------------------------------------------------- *\n*        Initialize dyamic area                                       *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=INITVDATA\n         L     R0,COMM_VDATA_ADDR             VDATA ADDR\n         L     R1,COMM_VDATA_LENGTH           VDATA LENGTH\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                         INITIALIZE VDATA BUFFER\n* ------------------------------------------------------------------- *\n*        Build detail                                                 *\n* ------------------------------------------------------------------- *\n         ITRACE ID=BUILD\n         L     R7,COMM_VDATA_ADDR             DYNAMIC AREA BUFFER\n         MVC   0(MSG01_L,R7),MSG01\n         USING MSG01,R7\n         UNPK  COMM_DWORD(3),0(2,R4)          UNPACK FLAG\n         TR    COMM_DWORD(2),COMM_HEXCHAR     TRANSLATE\n         MVC   MSG01_HEX,COMM_DWORD           COPY TO VDATA BUFFER\n         LA    R1,MSG01_BINARY                BINARY BIT FLAGS\n         LA    R2,X'80'                       BIT 1000 0000\n         LA    R3,8                           BITS IN A BYTE\nMAIN0020 DS    0H\n         EX    R2,BIT_TM                      THIS BIT ON?\n         BNO   MAIN0030                       NO\n         MVI   0(R1),C'1'                     INDICATE BIT IS ON\nMAIN0030 DS    0H\n         LA    R1,1(,R1)                      NEXT\n         SRL   R2,1                           SHIFT BIT\n         BCT   R3,MAIN0020                    LOOP\n         DROP  R7\n\n         A     R7,SPF_VWIDTH                  NEXT LINE IN VDATA\n\n         L     R6,COMM_BIT_TABLE              BIT TABLE\n         USING BIT_DSECT,R6                   DEFINE BASE\nMAIN0040 DS    0H\n         ITRACE ID=BIT,                                                +\n               DATA1=BIT_NAME\n         MVC   0(MSG02_L,R7),MSG02\n         USING MSG02,R7                       DEFINE BASE\n         MVC   MSG02_NAME,BIT_NAME            COPY NAME\n         MVC   MSG02_DESC,BIT_DESC            COPY DESCRIPTION\n         SR    R1,R1\n         IC    R1,BIT_FLAG                    BITS TO TEST\n         EX    R1,BIT_TM                      BIT ON?\n         BNO   MAIN0050                       NO\n         MVI   MSG02_X,C'X'                   INDICATE BIT IS ON\n         MVI   MSG02_ATTR_1,$SCREEN_ATTR_HIGH CHANGE ATTRIBUTE\n         MVI   MSG02_ATTR_2,$SCREEN_ATTR_HIGH_TURQUOISE\n         DROP  R6,R7\nMAIN0050 DS    0H\n         A     R7,SPF_VWIDTH                  NEXT LINE\n         LA    R6,BIT_DSECT_L(,R6)            NEXT BIT\n         CLI   0(R6),X'FF'                    END OF TABLE\n         BNE   MAIN0040                       NO\n* ------------------------------------------------------------------- *\n*        Display                                                      *\n* ------------------------------------------------------------------- *\nMAIN0060 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_PANEL,FIELD_PANEL         COPY PANEL NAME\n         MVC   COMM_VDATA_ADDR,COMM_VDATA_ADDR\n         MVC   COMM_VDATA_LENGTH,COMM_VDATA_LENGTH\n         MVC   COMM_VDATA_CURSOR,COMM_VDATA_CURSOR\n         L     R15,COMM_V_VZAPDISP            VZAPDISP ENTRY POINT\n         BALR  R14,R15                        CALL VZAPDISP\n         ITRACE ID=DISP_RC,                                            +\n               DATA1=(COMM_DISP_RC,2)\n         OC    COMM_DISP_RC,COMM_DISP_RC      RC = 0?\n         BNZ   MAIN0200                       NO\n* ------------------------------------------------------------------- *\n*        Does user want to cancel changes?                            *\n* ------------------------------------------------------------------- *\n         CLC   SPF_ZCMD,COMM_BLANKS           COMMAND BLANK?\n         BE    MAIN0070                       YES\n         CLC   CAN,SPF_ZCMD                   CAN?\n         BE    MAIN0300                       YES\n         CLC   CANCEL,SPF_ZCMD                CANCEL?\n         BE    MAIN0300                       YES\n         B     ERR0010                        OTHERWISE BAD COMMAND\n* ------------------------------------------------------------------- *\n*        Change bit(s)                                                *\n* ------------------------------------------------------------------- *\nMAIN0070 DS    0H\n         L     R6,COMM_BIT_TABLE              FIRST BIT FLAG\n         USING BIT_DSECT,R6\n         L     R7,COMM_VDATA_ADDR             FIRST IN DYNAMIC AREA\n         A     R7,SPF_VWIDTH                  BITS START ON 2ND LINE\n         USING MSG02,R7\n         MVI   0(R4),0                        RESET ALL FLAGS\nMAIN0080 DS    0H\n         ITRACE ID=UPDATE,                                             +\n               DATA1=BIT_NAME,                                         +\n               DATA2=(MSG02_X,1)\n         CLI   MSG02_X,C' '                   BLANK?\n         BE    MAIN0090                       YES\n         SR    R1,R1\n         IC    R1,BIT_FLAG                    BIT(S) TO SET\n         EX    R1,BIT_OI                      SET BIT(S)\nMAIN0090 DS    0H\n         A     R7,SPF_VWIDTH                  NEXT IN DYNAMIC AREA\n         LA    R6,BIT_DSECT_L(,R6)            NEXT BIT\n         CLI   0(R6),X'FF'                    END OF TABLE?\n         BNE   MAIN0080                       NO\n         B     MAIN0010\n         DROP  R7\n* ------------------------------------------------------------------- *\n*        Exiting.  Have flags been changed?                           *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         CLC   DXD_DATA,0(R4)                 ANYTHING UPDATED?\n         BE    EXIT0000                       NO\n         ITRACE ID=UPDATE\n         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING\n         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=CANCEL\n         MVC   SPF_ZCMD,COMM_BLANKS\n         CLC   DXD_DATA,0(R4)                 FLAGS CHANGED?\n         BE    EXIT0000                       NO\n         MVC   SPF_MSG_1(EMSG01_L),EMSG01     WARN THE USER\n         MVC   0(1,R4),DXD_DATA               RESET FLAGS\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVC   SPF_MSG_1(EMSG02_L),EMSG02     COPY MESSAGE\n         B     MAIN0060\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         ICM   R1,15,COMM_VDATA_ADDR          VDATA GETMAINED?\n         L     R0,COMM_VDATA_LENGTH           LENGTH\n         BZ    EXIT0010                       NO\n         FREEMAIN RU,                         FREEMAIN VDATA           +\n               A=(1),                                                  +\n               LV=(0)\nEXIT0010 DS    0H\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nBIT_TM   TM    0(R4),0                        TEST BIT(S)\nBIT_OI   OI    0(R4),0                        SET BIT(S)\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDBIT1)\n              LTORG\n\nCAN           DC    C'CAN '\nCANCEL        DC    C'CANCEL '\nFIELD_PANEL   DC    CL8'VZAPFLD'\n\nMSG01         DS    0C\n              DC    AL1($SCREEN_ATTR_HIGH_GREEN)\nMSG01_HEX     DC    CL2' '\n              DC    AL1($SCREEN_ATTR_HIGH_YELLOW)\n              DC    C'(HEX)    '\nMSG01_BINARY  DC    CL8'00000000'\n              DC    C' (BINARY)'\nMSG01_L       EQU   *-MSG01\n\nMSG02         DS    0C\n              DC    AL1($SCREEN_ATTR_INPUT)\nMSG02_X       DC    C' '\nMSG02_ATTR_1  DC    AL1($SCREEN_ATTR_HIGH_GREEN)\nMSG02_NAME    DC    CL15' '\nMSG02_ATTR_2  DC    AL1($SCREEN_ATTR_NORMAL)\nMSG02_DESC    DC    CL50' '\nMSG02_L       EQU   *-MSG02\n\nEMSG01        DS    0C\n              DC    C'VZAPBIT101W Updates cancelled'\nEMSG01_L      EQU   *-EMSG01\n\nEMSG02        DS    0C\n              DC    C'VZAPBIT102E Invalid command'\nEMSG02_L      EQU   *-EMSG02\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDBIT1       DSECT\n              COPY  DXDPREF\n\nDXD_DATA      DS    X                 SAVED DATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nBIT_DSECT     DSECT\nBIT_FLAG      DS    X\nBIT_NAME      DS    CL15\nBIT_DESC      DS    CL50\nBIT_DSECT_L   EQU   *-BIT_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VZAPFLD\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VTOCDATA\n         ORG      VTOC_DSCB\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     ATTRS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPBIT1\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPBIT2": {"ttr": 265, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x02\\x01\\x10\\x03o\\x01\\x10\\x03\\x9f\\t\\x12\\x01v\\x01v\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2010-02-05T00:00:00", "modifydate": "2010-02-08T09:12:02", "lines": 374, "newlines": 374, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPBIT2                                              *\n*                                                                     *\n*   Display/update 2 byte fields that are bit flags                   *\n*                                                                     *\n*   In this case the bit table is assumed to be 8 bits for two bytes  *\n*   There is no \"FF\" to flag end of table.                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPBIT2 CSECT\nVZAPBIT2 AMODE 31\nVZAPBIT2 RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPBIT2,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPBIT2'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPBIT2)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPBIT2,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDBIT2,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         L     R9,COMM_VZAPSPFD\n         USING VZAPSPFD,R9\n         L     R8,COMM_SELECTED_DSCB          SELECTED DSCB\n         USING VTOCDATA,R8\n* ------------------------------------------------------------------- *\n*        Compute data address                                         *\n* ------------------------------------------------------------------- *\n         L     R5,COMM_SELECTED_FIELD         SELECTED FIELD\n         USING FIELD_DSECT,R5\n         ITRACE ID=FIELD,                                              +\n               DATA1=FIELD_LABEL,                                      +\n               DATA2=(FIELD_DISP,2)\n         SR    R4,R4\n         ICM   R4,3,FIELD_DISP                DISP TO DATA\n         AR    R4,R8                          PLUS BASE\n* ------------------------------------------------------------------- *\n*        Copy data to allow user to abort                             *\n* ------------------------------------------------------------------- *\n         ITRACE ID=DATA,                                               +\n               RDATA1=R4,                                              +\n               DATA2=(0(R4),1)\n         MVC   DXD_DATA,0(R1)                 COPY DATA\n* ------------------------------------------------------------------- *\n*        Obtain VDATA for dynamic area                                *\n* ------------------------------------------------------------------- *\n         MVC   COMM_PANEL,FIELD_PANEL         COPY PANEL NAME\n         ITRACE ID=PQRY,                                               +\n               DATA1=COMM_PANEL\n         L     R15,COMM_V_VZAPPQRY            VZAPPQRY ENTRY POINT\n         BALR  R14,R15                        CALL VTOPQRY\n         L     R0,SPF_VDEPTH                  NUMBER OF ROWS\n         MH    R0,SPF_VWIDTH+2                COMPUTE VDATA SIZE\n         ST    R0,COMM_VDATA_LENGTH           SAVE LENGTH\n         GETMAIN RU,                          GETMAIN STORAGE FOR VDATA+\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,COMM_VDATA_ADDR             SAVE ADDR\n         ITRACE ID=VDATA,                                              +\n               RDATA1=R1,                                              +\n               DATA2=(COMM_VDATA_LENGTH,4)\n* ------------------------------------------------------------------- *\n*        Initialize dyamic area                                       *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=INITVDATA\n         L     R0,COMM_VDATA_ADDR             VDATA ADDR\n         L     R1,COMM_VDATA_LENGTH           VDATA LENGTH\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                         INITIALIZE VDATA BUFFER\n* ------------------------------------------------------------------- *\n*        Build detail                                                 *\n* ------------------------------------------------------------------- *\n         ITRACE ID=BUILD\n         L     R7,COMM_VDATA_ADDR             DYNAMIC AREA BUFFER\n         MVC   0(MSG01_L,R7),MSG01\n         USING MSG01,R7\n         UNPK  COMM_DWORD(5),0(3,R4)          UNPACK FLAG\n         TR    COMM_DWORD(4),COMM_HEXCHAR     TRANSLATE\n         MVC   MSG01_HEX,COMM_DWORD           COPY TO VDATA BUFFER\n\n         LA    R1,MSG01_BINARY1               BINARY BIT FLAGS\n         LA    R2,X'80'                       BIT 1000 0000\n         LA    R3,8                           BITS IN A BYTE\nMAIN0020 DS    0H\n         EX    R2,BIT_TM1                     THIS BIT ON?\n         BNO   MAIN0030                       NO\n         MVI   0(R1),C'1'                     INDICATE BIT IS ON\nMAIN0030 DS    0H\n         LA    R1,1(,R1)                      NEXT\n         SRL   R2,1                           SHIFT BIT\n         BCT   R3,MAIN0020                    LOOP\n\n         LA    R1,MSG01_BINARY2               BINARY BIT FLAGS\n         LA    R2,X'80'                       BIT 1000 0000\n         LA    R3,8                           BITS IN A BYTE\nMAIN0040 DS    0H\n         EX    R2,BIT_TM2                     THIS BIT ON?\n         BNO   MAIN0050                       NO\n         MVI   0(R1),C'1'                     INDICATE BIT IS ON\nMAIN0050 DS    0H\n         LA    R1,1(,R1)                      NEXT\n         SRL   R2,1                           SHIFT BIT\n         BCT   R3,MAIN0040                    LOOP\n         DROP  R7\n\n         A     R7,SPF_VWIDTH                  NEXT LINE IN VDATA\n\n         L     R6,COMM_BIT_TABLE              BIT TABLE\n         USING BIT_DSECT,R6                   DEFINE BASE\n         LA    R5,8                           BITS PER BYTE\nMAIN0060 DS    0H\n         ITRACE ID=BIT,                                                +\n               DATA1=BIT_NAME\n         MVC   0(MSG02_L,R7),MSG02\n         USING MSG02,R7                       DEFINE BASE\n         MVC   MSG02_NAME,BIT_NAME            COPY NAME\n         MVC   MSG02_DESC,BIT_DESC            COPY DESCRIPTION\n         SR    R1,R1\n         IC    R1,BIT_FLAG                    BITS TO TEST\n         EX    R1,BIT_TM1                     BIT ON?\n         BNO   MAIN0070                       NO\n         MVI   MSG02_X,C'X'                   INDICATE BIT IS ON\n         MVI   MSG02_ATTR_1,$SCREEN_ATTR_HIGH CHANGE ATTRIBUTE\n         MVI   MSG02_ATTR_2,$SCREEN_ATTR_HIGH_TURQUOISE\n         DROP  R7\nMAIN0070 DS    0H\n         A     R7,SPF_VWIDTH                  NEXT LINE\n         LA    R6,BIT_DSECT_L(,R6)            NEXT BIT\n         BCT   R5,MAIN0060\n\n         A     R7,SPF_VWIDTH                  NEXT LINE IN VDATA\n\n         LA    R5,8                           BITS PER BYTE\nMAIN0080 DS    0H\n         ITRACE ID=BIT,                                                +\n               DATA1=BIT_NAME\n         MVC   0(MSG02_L,R7),MSG02\n         USING MSG02,R7                       DEFINE BASE\n         MVC   MSG02_NAME,BIT_NAME            COPY NAME\n         MVC   MSG02_DESC,BIT_DESC            COPY DESCRIPTION\n         SR    R1,R1\n         IC    R1,BIT_FLAG                    BITS TO TEST\n         EX    R1,BIT_TM2                     BIT ON?\n         BNO   MAIN0090                       NO\n         MVI   MSG02_X,C'X'                   INDICATE BIT IS ON\n         MVI   MSG02_ATTR_1,$SCREEN_ATTR_HIGH CHANGE ATTRIBUTE\n         MVI   MSG02_ATTR_2,$SCREEN_ATTR_HIGH_TURQUOISE\n         DROP  R6,R7\nMAIN0090 DS    0H\n         A     R7,SPF_VWIDTH                  NEXT LINE\n         LA    R6,BIT_DSECT_L(,R6)            NEXT BIT\n         BCT   R5,MAIN0080                    LOOP\n* ------------------------------------------------------------------- *\n*        Display                                                      *\n* ------------------------------------------------------------------- *\nMAIN0100 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_PANEL,FIELD_PANEL         COPY PANEL NAME\n         MVC   COMM_VDATA_ADDR,COMM_VDATA_ADDR\n         MVC   COMM_VDATA_LENGTH,COMM_VDATA_LENGTH\n         MVC   COMM_VDATA_CURSOR,COMM_VDATA_CURSOR\n         L     R15,COMM_V_VZAPDISP            VZAPDISP ENTRY POINT\n         BALR  R14,R15                        CALL VZAPDISP\n         ITRACE ID=DISP_RC,                                            +\n               DATA1=(COMM_DISP_RC,2)\n         OC    COMM_DISP_RC,COMM_DISP_RC      RC = 0?\n         BNZ   MAIN0200                       NO\n* ------------------------------------------------------------------- *\n*        Does user want to cancel changes?                            *\n* ------------------------------------------------------------------- *\n         CLC   SPF_ZCMD,COMM_BLANKS           COMMAND BLANK?\n         BE    MAIN0110                       YES\n         CLC   CAN,SPF_ZCMD                   CAN?\n         BE    MAIN0300                       YES\n         CLC   CANCEL,SPF_ZCMD                CANCEL?\n         BE    MAIN0300                       YES\n         B     ERR0010                        OTHERWISE BAD COMMAND\n* ------------------------------------------------------------------- *\n*        Change bit(s)                                                *\n* ------------------------------------------------------------------- *\nMAIN0110 DS    0H\n         L     R6,COMM_BIT_TABLE              FIRST BIT FLAG\n         USING BIT_DSECT,R6\n         L     R7,COMM_VDATA_ADDR             FIRST IN DYNAMIC AREA\n         A     R7,SPF_VWIDTH                  BITS START ON 2ND LINE\n         USING MSG02,R7\n         XC    0(2,R4),0(R4)                  RESET ALL FLAGS\n         LA    R5,8                           8 BITS PER BYTE\nMAIN0120 DS    0H\n         ITRACE ID=UPDATE1,                                            +\n               DATA1=BIT_NAME,                                         +\n               DATA2=(MSG02_X,1)\n         CLI   MSG02_X,C' '                   BLANK?\n         BE    MAIN0130                       YES\n         SR    R1,R1\n         IC    R1,BIT_FLAG                    BIT(S) TO SET\n         EX    R1,BIT_OI1                     SET BIT(S)\nMAIN0130 DS    0H\n         A     R7,SPF_VWIDTH                  NEXT IN DYNAMIC AREA\n         LA    R6,BIT_DSECT_L(,R6)            NEXT BIT\n         BCT   R5,MAIN0120                    LOOP\n\n         A     R7,SPF_VWIDTH\n\n         LA    R5,8                           8 BITS PER BYTE\nMAIN0140 DS    0H\n         ITRACE ID=UPDATE2,                                            +\n               DATA1=BIT_NAME,                                         +\n               DATA2=(MSG02_X,1)\n         CLI   MSG02_X,C' '                   BLANK?\n         BE    MAIN0150                       YES\n         SR    R1,R1\n         IC    R1,BIT_FLAG                    BIT(S) TO SET\n         EX    R1,BIT_OI2                     SET BIT(S)\nMAIN0150 DS    0H\n         A     R7,SPF_VWIDTH                  NEXT IN DYNAMIC AREA\n         LA    R6,BIT_DSECT_L(,R6)            NEXT BIT\n         BCT   R5,MAIN0140                    LOOP\n\n         B     MAIN0010                       REBUILD DISPLAY\n         DROP  R7\n* ------------------------------------------------------------------- *\n*        Exiting.  Have flags been changed?                           *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         CLC   DXD_DATA,0(R4)                 ANYTHING UPDATED?\n         BE    EXIT0000                       NO\n         ITRACE ID=UPDATE\n         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING\n         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=CANCEL\n         MVC   SPF_ZCMD,COMM_BLANKS\n         CLC   DXD_DATA,0(R4)                 FLAGS CHANGED?\n         BE    EXIT0000                       NO\n         MVC   SPF_MSG_1(EMSG01_L),EMSG01     WARN THE USER\n         MVC   0(2,R4),DXD_DATA               RESET FLAGS\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVC   SPF_MSG_1(EMSG02_L),EMSG02     COPY MESSAGE\n         B     MAIN0100\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         ICM   R1,15,COMM_VDATA_ADDR          VDATA GETMAINED?\n         L     R0,COMM_VDATA_LENGTH           LENGTH\n         BZ    EXIT0010                       NO\n         FREEMAIN RU,                         FREEMAIN VDATA           +\n               A=(1),                                                  +\n               LV=(0)\nEXIT0010 DS    0H\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nBIT_TM1  TM    0(R4),0                        TEST BIT(S) IN BYTE 1\nBIT_TM2  TM    1(R4),0                        TEST BIT(S) IN BYTE 2\nBIT_OI1  OI    0(R4),0                        SET BIT(S)  IN BYTE 1\nBIT_OI2  OI    1(R4),0                        SET BIT(S)  IN BYTE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDBIT2)\n              LTORG\n\nCAN           DC    C'CAN '\nCANCEL        DC    C'CANCEL '\nFIELD_PANEL   DC    CL8'VZAPFLD'\n\nMSG01         DS    0C\n              DC    AL1($SCREEN_ATTR_HIGH_GREEN)\nMSG01_HEX     DC    CL4' '\n              DC    AL1($SCREEN_ATTR_HIGH_YELLOW)\n              DC    C'(HEX)    '\nMSG01_BINARY1 DC    CL8'00000000'\n              DC    C' '\nMSG01_BINARY2 DC    CL8'00000000'\n              DC    C' (BINARY)'\nMSG01_L       EQU   *-MSG01\n\nMSG02         DS    0C\n              DC    AL1($SCREEN_ATTR_INPUT)\nMSG02_X       DC    C' '\nMSG02_ATTR_1  DC    AL1($SCREEN_ATTR_HIGH_GREEN)\nMSG02_NAME    DC    CL15' '\nMSG02_ATTR_2  DC    AL1($SCREEN_ATTR_NORMAL)\nMSG02_DESC    DC    CL50' '\nMSG02_L       EQU   *-MSG02\n\nEMSG01        DS    0C\n              DC    C'VZAPBIT201W Updates cancelled'\nEMSG01_L      EQU   *-EMSG01\n\nEMSG02        DS    0C\n              DC    C'VZAPBIT202E Invalid command'\nEMSG02_L      EQU   *-EMSG02\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDBIT2       DSECT\n              COPY  DXDPREF\n\n\nDXD_DATA      DS    XL2               SAVED DATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nBIT_DSECT     DSECT\nBIT_FLAG      DS    X\nBIT_NAME      DS    CL15\nBIT_DESC      DS    CL50\nBIT_DSECT_L   EQU   *-BIT_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VZAPFLD\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VTOCDATA\n         ORG      VTOC_DSCB\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     ATTRS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPBIT2\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VZAPCAL1": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x01\\x10\\x03\\x9f\\x01\\x10\\x03\\x9f\\tA\\x00t\\x00t\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-08T00:00:00", "modifydate": "2010-02-08T09:41:23", "lines": 116, "newlines": 116, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPCAL1                                              *\n*                                                                     *\n*   Display/update Secondary allocation space parameters              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPCAL1 CSECT\nVZAPCAL1 AMODE 31\nVZAPCAL1 RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPCAL1,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPCAL1'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPCAL1)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPCAL1,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDALOC,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         L     R9,COMM_VZAPSPFD\n         USING VZAPSPFD,R9\n         LA    R0,BIT_TABLE                   BIT TABLE\n         ST    R0,COMM_BIT_TABLE              SET ADDRESS\n         L     R15,COMM_V_VZAPBIT1            VZAPBIT1 ENTRY POINT\n         BALR  R14,R15                        CALL VZAPBIT1\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDALOC)\n              LTORG\nBIT_TABLE     DS    0C\n              DC    AL1(DS1CYL)\n              DC    CL15'DS1CYL'\n              DC    CL50'Cylinders'\n\n              DC    AL1(DS1TRK)\n              DC    CL15'DS1TRK'\n              DC    CL50'Tracks'\n\n              DC    AL1(DS1AVR)\n              DC    CL15'DS1AVR'\n              DC    CL50'Average block length'\n\n              DC    AL1(DS1AVRND)\n              DC    CL15'DS1AVRND'\n              DC    CL50'Average block and round'\n\n              DC    AL1(DS1MSGP)\n              DC    CL15'DS1MSGP'\n              DC    CL50'Reserved.  Was MSGP.'\n\n              DC    AL1(DS1EXT)\n              DC    CL15'DS1EXT'\n              DC    CL50'Extension to secondary space description'\n\n              DC    AL1(DS1CONTG)\n              DC    CL15'DS1CONTG'\n              DC    CL50'Contiguous space'\n\n              DC    AL1(DS1MXIG)\n              DC    CL15'DS1MXIG'\n              DC    CL50'MXIG request'\n\n              DC    AL1(DS1ALX)\n              DC    CL15'DS1ALX'\n              DC    CL50'ALX request'\n\n              DC    X'FF'\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDALOC       DSECT\n              COPY  DXDPREF\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VTOCDATA\n         ORG      VTOC_DSCB\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPCAL1\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPCNFM": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\t\\x01\\x10\\x03O\\x01\\x10\\x04\\x8f\\x160\\x00s\\x00q\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2010-02-03T00:00:00", "modifydate": "2010-02-17T16:30:09", "lines": 115, "newlines": 113, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPCNFM                                              *\n*                                                                     *\n*   Confirm user's intention                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPCNFM CSECT\nVZAPCNFM AMODE 31\nVZAPCNFM RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPCNFM,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPCNFM'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPCNFM)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPCNFM,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDCNFM,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         L     R9,COMM_VZAPSPFD\n         USING VZAPSPFD,R9\n         MVC   COMM_PANEL,CONFIRM_PANEL       COPY PANEL NAME\n         XC    COMM_VDATA_ADDR,COMM_VDATA_ADDR\n         XC    COMM_VDATA_LENGTH,COMM_VDATA_LENGTH\n         XC    COMM_VDATA_CURSOR,COMM_VDATA_CURSOR\n         OI    COMM_FLAGS,$COMM_DONT_CLEAR_MSG\n* ------------------------------------------------------------------- *\n*        Display                                                      *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=DISPLAY\n         L     R15,COMM_V_VZAPDISP            VZAPDISP ENTRY POINT\n         BALR  R14,R15                        CALL VZAPDISP\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=REPLY,                                              +\n               DATA1=(SPF_YES_OR_NO,3)\n         CLC   SPF_YES_OR_NO,YES              YES?\n         BE    EXIT0000                       YES\n         CLC   SPF_YES_OR_NO,Y                SHORT YES?\n         BE    EXIT0000                       YES\n         CLC   SPF_YES_OR_NO,NO               NO?\n         BE    EXIT0000                       YES\n         CLC   SPF_YES_OR_NO,N                SHORT NO?\n         BE    EXIT0000                       YES\n         MVC   SPF_MSG_3(EMSG01_L),EMSG01     COPY ERROR MESSAGE\n         B     MAIN0010                       YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         MVC   SPF_MSG_1,COMM_BLANKS          CLEAR MESSAGE\n         MVC   SPF_MSG_2,COMM_BLANKS          CLEAR MESSAGE\n         MVC   SPF_MSG_3,COMM_BLANKS          CLEAR MESSAGE\n         MVC   SPF_MSG_4,COMM_BLANKS          CLEAR MESSAGE\n         MVC   SPF_MSG_5,COMM_BLANKS          CLEAR MESSAGE\n         NI    COMM_FLAGS,255-$COMM_DONT_CLEAR_MSG\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDCNFM)\n              LTORG\n\nY             DC    CL3'Y'\nYES           DC    CL3'YES'\nN             DC    CL3'N'\nNO            DC    CL3'NO '\nCONFIRM_PANEL DC    CL8'VZAPCNFM'\n\nEMSG01        DS    0C\n              DC    C'VZAPCNFM01E Reply Y(es) or N(o)'\nEMSG01_L      EQU   *-EMSG01\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDCNFM       DSECT\n              COPY     DXDPREF\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COPY     REGEQU\n              END      VZAPCNFM\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPCOMM": {"ttr": 517, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00%\\x01\\x10\\x02\\x7f\\x01\\x10\\x03\\x9f\\t\\x12\\x00\\x0e\\x00\\x13\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2010-01-27T00:00:00", "modifydate": "2010-02-08T09:12:25", "lines": 14, "newlines": 19, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON TYPE=CSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  TRENTRY\n* ------------------------------------------------------------------- *\nDUMMY    DSECT\n         COPY  DXDPREF\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         END   VZAPCOMM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VZAPCXTF": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00!\\x01\\x10\\x03\\x9f\\x01\\x10\\x03\\x9f\\t4\\x00b\\x00b\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-08T00:00:00", "modifydate": "2010-02-08T09:34:21", "lines": 98, "newlines": 98, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPCXTF                                              *\n*                                                                     *\n*   Display/update Secondary space extension flag    (DS1SCXTF)       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPCXTF CSECT\nVZAPCXTF AMODE 31\nVZAPCXTF RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPCXTF,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPCXTF'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPCXTF)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPCXTF,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDCXTF,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         LA    R0,BIT_TABLE                   BIT TABLE\n         ST    R0,COMM_BIT_TABLE              SET THE ADDRESS\n         L     R15,COMM_V_VZAPBIT1\n         BALR  R14,R15                        CALL VZAPBIT1\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDCXTF)\n              LTORG\nBIT_TABLE     DS    0C\n              DC    AL1(DS1SCAVB)\n              DC    CL15'DS1SCAVB'\n              DC    CL50'Average block size'\n\n              DC    AL1(DS1SCMB)\n              DC    CL15'DS1SCMB'\n              DC    CL50'Megabytes'\n\n              DC    AL1(DS1SCKB)\n              DC    CL15'DS1SCKB'\n              DC    CL50'Kilobytes'\n\n              DC    AL1(DS1SCUB)\n              DC    CL15'DS1SCUB'\n              DC    CL50'Bytes'\n\n              DC    AL1(DS1SCCP1)\n              DC    CL15'DS1SCCP1'\n              DC    CL50'DS1SCXTV compacted by factor of 256'\n\n              DC    AL1(DS1SCCP2)\n              DC    CL15'DS1SCCP2'\n              DC    CL50'DS1SCXTV compacted by factor of 65536'\n\n              DC    X'FF'\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDCXTF       DSECT\n              COPY  DXDPREF\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFORMAT_1 DSECT\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPCXTF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPDAIR": {"ttr": 2830, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00 \\x01\\x10\\x03\\x9f\\x01\\x10\\x04\\x8f\\x161\\x00\\xb7\\x00\\xb7\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2010-02-08T00:00:00", "modifydate": "2010-02-17T16:31:20", "lines": 183, "newlines": 183, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPDAIR                                              *\n*                                                                     *\n*   Allocate/free a volume.                                           *\n*   Volser is in COMM_VOLSER.                                         *\n*   Volume is allocated with DISP=SHR.                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPDAIR CSECT\nVZAPDAIR AMODE 31\nVZAPDAIR RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPDAIR,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPDAIR'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DISPEND-VZAPDAIR)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                  SAVE REGS\n         LR    R10,R15                          COPY ENTRY POINT\n         LR    R2,R0                            COPY R0\n         LR    R3,R1                            COPY R1\n         DROP  R15\n         USING VZAPDAIR,R10                     DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                      SAVE R13\n         ST    R15,8(,R13)                      CHAIN SAVE AREA\n         LR    R13,R15                          COPY WORK AREA ADDRESS\n         USING DXDDAIR,R13                      DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\nINIT0010 DS    0H\n         ITRACE ID=ENTRY,                                              +\n               DATA1=(COMM_DAIR_FUNC,1),                               +\n               DATA2=(COMM_VOLSER,6)\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         MVC   DXD_TEXT_UNITS(TEXT_UNITS_L),TEXT_UNITS_I\n         MVC   DXD_DD+2(6),COMM_VOLSER          ADD VOLSER TO DD NAME\n         LA    R0,DXD_RB                        RB ADDRESS\n         ST    R0,DXD_RB_ADDRESS                SET ADDRESS\n         OI    DXD_RB_ADDRESS,X'80'             SET HIGH BIT\n         XC    DXD_RB(S99RBEND-S99RB),DXD_RB    INITIALIZE RB\n         USING S99RB,DXD_RB\n         MVI   S99RBLN,S99RBEND-S99RB           SET LENGTH\n         CLI   COMM_DAIR_FUNC,$DAIR_ALLOC       ALLOCATE?\n         BE    DAIR0100                         YES\n         CLI   COMM_DAIR_FUNC,$DAIR_FREE        FREE?\n         BE    DAIR0200                         YES\n         ITRACE ID=BAD_FUNC\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIR0100 DS    0H\n         ITRACE ID=ALLOC\n         MVI   S99VERB,S99VRBAL                 SET FUNCTION\n         MVC   DXD_VOLSER,COMM_VOLSER           COPY VOLSER\n         LA    R0,DXD_DD_TEXT_UNITS             DD TEXT UNIT ADDR\n         ST    R0,DXD_TEXT1_ADDR                SET ADDR IN PARM LIST\n         LA    R0,DXD_DISP_TEXT_UNITS           DISP TEXT UNIT ADDR\n         ST    R0,DXD_TEXT2_ADDR                SET ADDR IN PARM LIST\n         LA    R0,DXD_UNIT_TEXT_UNITS           UNIT TEXT UNIT ADDR\n         ST    R0,DXD_TEXT3_ADDR                SET ADDR IN PARM LIST\n         LA    R0,DXD_VOLSER_TEXT_UNITS         VOLSER TEXT UNIT ADDR\n         ST    R0,DXD_TEXT4_ADDR                SET ADDR IN PARM LIST\n         OI    DXD_TEXT4_ADDR,X'80'             FLAG END OF LIST\n         B     DAIR0300\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIR0200 DS    0H\n         ITRACE ID=FREE\n         MVI   S99VERB,S99VRBUN                 CHANGE VERB\n         LA    R0,DXD_DD_TEXT_UNITS             DD TEXT UNIT ADDR\n         ST    R0,DXD_TEXT1_ADDR                SET ADDR IN PARM LIST\n         OI    DXD_TEXT1_ADDR,X'80'             FLAG END OF LIST\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIR0300 DS    0H\n         LA    R0,DXD_TEXT1_ADDR                FIRST TEXT UNIT ADDR\n         ST    R0,S99TXTPP                      SET ADDRESS IN RB\n         LA    R1,DXD_RB_ADDRESS                SVC 99 PARMS\n         ITRACE ID=SVC99,                                              +\n               RDATA1=R1\n         SVC   99                               ISSUE SVC\n         ITRACE ID=S99_RC,                                             +\n               RDATA1=R15,                                             +\n               DATA2=(S99ERROR,4)\n         STCM  R15,3,COMM_DAIR_R15              SAVE R15\n         MVC   COMM_DAIR_ERROR,S99ERROR         SAVE ERROR CODE\n         MVC   COMM_DAIR_INFO,S99INFO           SAVE INFO CODE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                      RESTORE R13\n         LM    R14,R12,12(R13)                  RESTORE REGISTERS\n         SR    R15,R15                          SET RC\n         BR    R14                              RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDDAIR)\n\nTEXT_UNITS_I  DS    0X\n              DC    AL2(DALDDNAM)         DDNAME PARMS\n              DC    AL2(1)\n              DC    AL2(8)\n              DC    CL8'VZ'\n              DC    AL2(DALSTATS)         INITIAL DISPOSITION PARMS\n              DC    AL2(1)\n              DC    AL2(1)\n              DC    X'08'                 DISP=SHR\n              DC    AL2(DALUNIT)          UNIT PARAMETERS\n              DC    AL2(1)\n              DC    AL2(8)\n              DC    CL8'SYSALLDA'         UNIT NAME\n              DC    AL2(DALVLSER)         VOLSER PARAMETERS\n              DC    AL2(1)\n              DC    AL2(6)\n              DC    CL6' '                VOLSER\nTEXT_UNITS_L  EQU   *-TEXT_UNITS_I\n\n              LTORG\nDISPEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDDAIR           DSECT\n                  COPY    DXDPREF\n\nDXD_RB_ADDRESS    DS      A                     RB'S ADDRESS\nDXD_RB            DS      0A,(S99RBEND-S99RB)X  SVC 99 RB\n\nDXD_TEXT1_ADDR    DS      A\nDXD_TEXT2_ADDR    DS      A\nDXD_TEXT3_ADDR    DS      A\nDXD_TEXT4_ADDR    DS      A\nDXD_TEXT5_ADDR    DS      A\nDXD_TEXT6_ADDR    DS      A\n\nDXD_TEXT_UNITS            DS   0C\nDXD_DD_TEXT_UNITS         DS   AL2,AL2,AL2\nDXD_DD                    DS   CL8\nDXD_DISP_TEXT_UNITS       DS   AL2,AL2,AL2\n                          DS   X\nDXD_UNIT_TEXT_UNITS       DS   AL2,AL2,AL2\n                          DS   CL8\nDXD_VOLSER_TEXT_UNITS     DS   AL2,AL2,AL2\nDXD_VOLSER                DS   CL6\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEFZB4D0\n         IEFZB4D2\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPDAIR\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPDATE": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00W\\x01\\x10\\x03o\\x01\\x10\\x03\\x9f\\t\\x13\\x01C\\x01C\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2010-02-05T00:00:00", "modifydate": "2010-02-08T09:13:57", "lines": 323, "newlines": 323, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPDATE                                              *\n*                                                                     *\n*   DISPLAY/UPDATE Date  (discontiguous binary)                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPDATE CSECT\nVZAPDATE AMODE 31\nVZAPDATE RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPDATE,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPDATE'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPDATE)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPDATE,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDDATE,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         L     R9,COMM_VZAPSPFD\n         USING VZAPSPFD,R9\n         L     R8,COMM_SELECTED_DSCB          SELECTED DSCB\n         USING VTOCDATA,R8\n         L     R5,COMM_SELECTED_FIELD         SELECTED FIELD\n         USING FIELD_DSECT,R5\n         ITRACE ID=FIELD,                                              +\n               DATA1=FIELD_LABEL,                                      +\n               DATA2=(FIELD_DISP,2)\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         SR    R6,R6\n         ICM   R6,3,FIELD_DISP                DISP TO FIELD\n         AR    R6,R8                          COMPUTE DATA ADDRESS\n         ITRACE ID=DATA,                                               +\n               RDATA1=R6,                                              +\n               DATA2=(0(R6),2)\n         MVC   DXD_DATE,0(R6)                 SAVE DATE\n* ------------------------------------------------------------------- *\n*        Build detail                                                 *\n* ------------------------------------------------------------------- *\nMAIN0000 DS    0H\n         ITRACE ID=BUILD\n         SR    R0,R0\n         IC    R0,0(R6)                       YEAR\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD\n         ED    DXD_EDITWORD,COMM_DWORD+5      EDIT\n         MVC   SPF_2,DXD_EDITWORD+4           COPY EDITED YEAR\n         ICM   R0,3,1(R6)                     DAY OF YEAR\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD\n         ED    DXD_EDITWORD,COMM_DWORD+5      EDIT\n         MVC   SPF_3,DXD_EDITWORD+3           COPY EDITED DAY OF YEAR\n* ------------------------------------------------------------------- *\n*        Display                                                      *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_PANEL,DATE_PANEL          COPY PANEL NAME\n         XC    COMM_VDATA_ADDR,COMM_VDATA_ADDR\n         XC    COMM_VDATA_LENGTH,COMM_VDATA_LENGTH\n         XC    COMM_VDATA_CURSOR,COMM_VDATA_CURSOR\n         L     R15,COMM_V_VZAPDISP            VZAPDISP ENTRY POINT\n         BALR  R14,R15                        CALL VZAPDISP\n         ITRACE ID=DISP_RC,                                            +\n               DATA1=(COMM_DISP_RC,2)\n         MVC   DXD_DISP_RC,COMM_DISP_RC       SAVE RC\n* ------------------------------------------------------------------- *\n*        Does user want to cancel changes?                            *\n* ------------------------------------------------------------------- *\n         ITRACE ID=ZCMD,                                               +\n               DATA1=SPF_ZCMD+0,                                       +\n               DATA2=SPF_ZCMD+8\n         CLC   SPF_ZCMD,COMM_BLANKS           COMMAND PRESENT?\n         BE    MAIN0020                       NO\n         CLC   CAN,SPF_ZCMD                   CAN?\n         BE    MAIN0300                       YES\n         CLC   CANCEL,SPF_ZCMD                CANCEL?\n         BE    MAIN0300                       YES\n         B     ERR0010                        OTHERWISE BAD COMMAND\n* ------------------------------------------------------------------- *\n*        Convert year                                                 *\n* ------------------------------------------------------------------- *\nMAIN0020 DS    0H\n         ITRACE ID=YEAR,                                               +\n               DATA1=(SPF_2,2)\n         LA    R1,SPF_2                       1ST CHARACTER OF YEAR\n         LA    R2,L'SPF_2                     NUMBER OF DIGITS\n         BAL   R7,MAIN0400                    VERIFY/CONVERT YEAR\n         ITRACE ID=NEW_DAY,                                            +\n               RDATA1=R0\n         STC   R0,0(R6)                       CHANGE YEAR\n* ------------------------------------------------------------------- *\n*        Convert day of year                                          *\n* ------------------------------------------------------------------- *\n         ITRACE ID=DAY,                                                +\n               DATA1=(SPF_3,3)\n         LA    R1,SPF_3                       1ST CHARACTER OF DAY\n         LA    R2,L'SPF_3                     NUMBER OF DIGITS\n         BAL   R7,MAIN0400                    VERIFY/CONVERT DAY\n* ------------------------------------------------------------------- *\n*        Verify day of year                                           *\n* ------------------------------------------------------------------- *\n         LTR   R0,R0                          YEAR ZERO?\n         BNZ   MAIN0030                       NO\n         ITRACE ID=ZERO_DAY                   DAY IS ZERO\n         MVC   SPF_MSG_1(EMSG03_L),EMSG03\n         L     R15,COMM_V_VZAPCNFM            VZAPCNFM ENTRY POINT\n         ITRACE ID=CONFIRM,                                            +\n               RDATA1=R15\n         BALR  R14,R15                        CONFIRM\n         CLI   SPF_YES_OR_NO,C'N'             DID USER SAY NO?\n         BE    MAIN0010                       YES.. DISPLAY AGAIN\nMAIN0030 DS    0H\n         CH    R0,H366                        MORE THAN 366?\n         BNH   MAIN0040                       NO\n         MVC   SPF_MSG_1(EMSG04_L),EMSG04\n         L     R15,COMM_V_VZAPCNFM            VZAPCNFM ENTRY POINT\n         ITRACE ID=CONFIRM,                                            +\n               RDATA1=R15\n         BALR  R14,R15                        CONFIRM\n         CLI   SPF_YES_OR_NO,C'N'             DID USER SAY NO?\n         BE    MAIN0010                       YES.. DISPLAY AGAIN\nMAIN0040 DS    0H\n         ITRACE ID=NEW_YEAR,                                           +\n               RDATA1=R0\n         STCM  R0,3,1(R6)                     CHANGE DAY OF YEAR\n* ------------------------------------------------------------------- *\n*        Does user want to exit?                                      *\n* ------------------------------------------------------------------- *\n         OC    DXD_DISP_RC,DXD_DISP_RC        RC = 0?\n         BZ    MAIN0000                       YES\n* ------------------------------------------------------------------- *\n*        EXITING.  HAS CREATION DATE CHANGED?                         *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         CLC   DXD_DATE,0(R6)                 ANYTHING UPDATED?\n         BE    EXIT0000                       NO\n         ITRACE ID=UPDATE\n         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING\n         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        User wants to cancel changes                                 *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=CANCEL\n         MVC   SPF_ZCMD,COMM_BLANKS\n         CLC   DXD_DATE,0(R6)                 DATE CHANGED?\n         BE    EXIT0000                       NO\n         MVC   SPF_MSG_1(EMSG05_L),EMSG05     WARN THE USER\n         MVC   0(R6),DXD_DATE                 RESTORE DATE\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Verify/convert numeric                                       *\n*                                                                     *\n*         R1   Data address                                           *\n*         R2   Data length                                            *\n*         R7   Return address                                         *\n*                                                                     *\n*        At exit R0 number in binary                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0400 DS    0H\n         ITRACE ID=VERIFY,                                             +\n               RDATA1=R1,                                              +\n               RDATA2=R2\nMAIN0410 DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BNE   MAIN0420                       NO\n         LA    R1,1(,R1)                      NEXT\n         BCT   R2,MAIN0410                    LOOP\n         MVC   SPF_MSG_1(EMSG01_L),EMSG01     COPY MESSAGE\n         B     MAIN0010                       DISPLAY WITH MESSAGE\nMAIN0420 DS    0H\n         LR    R3,R1                          SAVE ADDR OF NON-BLANK\n         LR    R4,R2                          SAVE DIGITS LEFT\nMAIN0430 DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BE    MAIN0440                       YES\n         CLI   0(R1),C'0'                     VALID DIGIT?\n         BL    ERR0020                        NO\n         CLI   0(R1),C'9'                     VALID DIGIT?\n         BH    ERR0020                        NO\n         LA    R1,1(,R1)                      NEXT DIGIT\n         BCT   R2,MAIN0430                    LOOP\n* ------------------------------------------------------------------- *\n*        Convert new value to binary                                  *\n* ------------------------------------------------------------------- *\nMAIN0440 DS    0H\n         ITRACE ID=CONVERT\n         MVC   DXD_NUMBER,=C'00000'           INITIALIZE WORK AREA\nMAIN0450 DS    0H\n         CLI   0(R3),C' '                     BLANK?\n         BE    MAIN0460                       YES\n         MVC   DXD_NUMBER(4),DXD_NUMBER+1     SHIFT LEFT 1 DIGIT\n         MVC   DXD_NUMBER+4(1),0(R3)          COPY TO DIGITS POSITION\n         LA    R3,1(,R3)                      NEXT DIGIT\n         BCT   R4,MAIN0450                    LOOP\nMAIN0460 DS    0H\n         PACK  COMM_DWORD,DXD_NUMBER          PACK THE NUMBER\n         CVB   R0,COMM_DWORD                  CONVERT TO BINARY\n         BR    R7\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=BAD_CMD\n         MVC   SPF_MSG_1(EMSG01_L),EMSG01     COPY MESSAGE\n         B     MAIN0010\nERR0020  DS    0H\n         MVC   SPF_MSG_1(EMSG02_L),EMSG02     COPY MESSAGE\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         ICM   R1,15,COMM_VDATA_ADDR          VDATA GETMAINED?\n         L     R0,COMM_VDATA_LENGTH           LENGTH\n         BZ    EXIT0010                       NO\n         FREEMAIN RU,                         FREEMAIN VDATA           +\n               A=(1),                                                  +\n               LV=(0)\nEXIT0010 DS    0H\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDDATE)\n              LTORG\n\nH99           DC    H'99'\nH366          DC    H'366'\n\nCAN           DC    C'CAN '\nCANCEL        DC    C'CANCEL '\nDATE_PANEL    DC    CL8'VZAPDATE'\nEDITWORD      DC    X'F02020202120'\n\nEMSG01        DS    0C\n              DC    C'VZAPDATE01E Invalid command'\nEMSG01_L      EQU   *-EMSG01\n\nEMSG02        DS    0C\n              DC    C'VZAPDATE02E Non-numeric digit'\nEMSG02_L      EQU   *-EMSG02\n\nEMSG03        DS    0C\n              DC    C'VZAPDATE03W Day of year is zero.  Please confirm'\nEMSG03_L      EQU   *-EMSG03\n\nEMSG04        DS    0C\n              DC    C'VZAPDATE04W Day of year > 366.  Please confirm'\nEMSG04_L      EQU   *-EMSG04\n\nEMSG05        DS    0C\n              DC    C'VZAPDATE05W Changes to date cancelled'\nEMSG05_L      EQU   *-EMSG05\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDDATE       DSECT\n              COPY  DXDPREF\n\nDXD_DISP_RC   DS    XL2\n\nDXD_EDITWORD  DS    CL6\nDXD_NUMBER    DS    CL5\n\nDXD_DATE      DS    XL3               SAVED DATE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VTOCDATA\n         ORG      VTOC_DSCB\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VZAPFLD\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     ATTRS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPDATE\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPDISP": {"ttr": 2312, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x04\\x00'\\x01\\x10\\x03O\\x01\\x10\\x04/\\x10\\x10\\x00\\xf3\\x00\\xe2\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@\"", "ispf": {"version": "01.04", "flags": 0, "createdate": "2010-02-03T00:00:00", "modifydate": "2010-02-11T10:10:27", "lines": 243, "newlines": 226, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPDISP                                              *\n*                                                                     *\n*   Display SPF panels.                                               *\n*   Panel name is in COMM_PANEL.                                      *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPDISP CSECT\nVZAPDISP AMODE 31\nVZAPDISP RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPDISP,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPDISP'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DISPEND-VZAPDISP)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                  SAVE REGS\n         LR    R10,R15                          COPY ENTRY POINT\n         LR    R2,R0                            COPY R0\n         LR    R3,R1                            COPY R1\n         DROP  R15\n         USING VZAPDISP,R10                     DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                      SAVE R13\n         ST    R15,8(,R13)                      CHAIN SAVE AREA\n         LR    R13,R15                          COPY WORK AREA ADDRESS\n         USING DXDDISP,R13                      DEFINE WORK AREA BASE\n         CLC   DXD_CSECT,MODID                  INTIALIZATION DONE?\n         BE    INIT0010                         YES\n         MVC   DXD_CSECT,MODID\nINIT0010 DS    0H\n         ITRACE ID=ENTRY,                                              +\n               DATA1=COMM_PANEL\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R9,COMM_VZAPSPFD                 SPF DATA\n         USING VZAPSPFD,R9\n         MVC   COMM_VARIABLE,VDATA              VARIABLE NAME\n         OC    COMM_VDATA_ADDR,COMM_VDATA_ADDR  VDATA IN USE?\n         BZ    DISP0010                         NO\n         ITRACE ID=VDELETE                      VDELETING VDATA\n         MVI   COMM_VAR_COMMAND,$VAR_DELETE     SET FUNCTION\n         L     R15,COMM_V_VZAPVMGR              VARIABLE MANAGER\n         ITRACE ID=VDEFINE                      VDELETING VDATA\n         BALR  R14,R15                          VDELETE VDATA\n         MVI   COMM_VAR_COMMAND,$VAR_DEFINE     CHANGE COMMAND\n         L     R15,COMM_V_VZAPVMGR              VARIABLE MANAGER\n         BALR  R14,R15                          VDEFINE VDATA\nDISP0010 DS    0H\n         ITRACE ID=DISPLAY,                                            +\n               DATA1=COMM_PANEL,                                       +\n               DATA2=(COMM_VDATA_ADDR,4)\n         LA    R1,DISPLAY                       DISPLAY FUNCTION\n         ST    R1,DXD_SPF1                      SET ADDRESS\n         LA    R1,COMM_PANEL                    PANEL TO DISPLAY\n         ST    R1,DXD_SPF2                      SET PANEL ADDRESS\n         OI    DXD_SPF2,X'80'                   FLAG END-OF-LIST\n         LA    R1,DXD_SPF_PARMS                 SPF PARM LIST\n         L     R15,COMM_ISPLINK                 SPF ENTRY POINT\n         BALR  R14,R15                          DISPLAY THE PANEL\n         ITRACE ID=DISP_RC,                                            +\n               RDATA1=R15\n         STH   R15,COMM_DISP_RC                 SAVE RC\n* ------------------------------------------------------------------- *\n*        Reset messages                                               *\n* ------------------------------------------------------------------- *\n         TM    COMM_FLAGS,$COMM_DONT_CLEAR_MSG   CLEAR MESSAGES?\n         BO    DISP0020                          NO\n         MVC   SPF_MSG_1,COMM_BLANKS\n         MVC   SPF_MSG_2,COMM_BLANKS\n         MVC   SPF_MSG_3,COMM_BLANKS\n         MVC   SPF_MSG_4,COMM_BLANKS\n         MVC   SPF_MSG_5,COMM_BLANKS\nDISP0020 DS    0H\n         LTR   R15,R15                           RC = 0?\n         BNZ   EXIT0000                          NO\n* ------------------------------------------------------------------- *\n*        VGET spf variables                                           *\n* ------------------------------------------------------------------- *\nDISP0030 DS    0H\n         LA    R1,VGET                           COMMAND\n         ST    R1,DXD_SPF1                       SET ADDRESS\n         LA    R1,VGET_LIST                      SYSTEM VARIABLES\n         ST    R1,DXD_SPF2                       SET ADDRESS\n         OI    DXD_SPF2,X'80'                    FLAG END-OF-LIST\n         LA    R1,DXD_SPF_PARMS                  SPF PARM LIST\n         ITRACE ID=VGET_2,                                             +\n               RDATA1=R1\n         L     R15,COMM_ISPLINK                  SPF INTERFACE\n         BALR  R14,R15                           VGET SPF VARIABLE(S)\n         ITRACE ID=VGET2_RC,                                           +\n               RDATA1=R15\n         LTR   R15,R15                           SUCCESSFUL?\n         BNZ   DISP0040                          NO\n         TM    DXD_FLAGS,$DXD_VPUT               VPUT ALREADY ISSUED?\n         BO    DISP0050                          YES\n* ------------------------------------------------------------------- *\n*        VPUT SPF variables                                           *\n* ------------------------------------------------------------------- *\nDISP0040 DS    0H\n         OI    DXD_FLAGS,$DXD_VPUT               SET FLAG\n         LA    R1,VPUT                           COMMAND\n         ST    R1,DXD_SPF1                       SET ADDRESS\n         LA    R1,VPUT_LIST\n         ST    R1,DXD_SPF2\n         OI    DXD_SPF2,X'80'                    SET END-OF-LIST\n         LA    R1,DXD_SPF_PARMS                  PARM LIST ADDRESS\n         L     R15,COMM_ISPLINK                  SPF INTERFACE\n         BALR  R14,R15                           UPDATE SPF VARIABLE(S)\n         ITRACE ID=VPUT2_RC,                                           +\n               RDATA1=R15\n         B     DISP0030                          DO VGET\n* ------------------------------------------------------------------- *\n*        Check for global command                                     *\n* ------------------------------------------------------------------- *\nDISP0050 DS    0H\n         ITRACE ID=ZCMD,                                               +\n               DATA1=SPF_ZCMD+0,                                       +\n               DATA2=SPF_ZCMD+8\n         OC    SPF_ZCMD,COMM_BLANKS              'TRANSLATE' TO UPPER\n         CLC   ABEND,SPF_ZCMD                    ABEND?\n         BE    ABEND000                          YES\n         CLC   TPUT,SPF_ZCMD                     TPUT?\n         BE    TPUT0000                          YES\n* ------------------------------------------------------------------- *\n*        Compute cursor position (row and column)                     *\n* ------------------------------------------------------------------- *\n         XC    SPF_ROW,SPF_ROW\n         XC    SPF_COLUMN,SPF_COLUMN\n         PACK  COMM_DWORD,SPF_ZSCREENC           PACK CURSOR POSITION\n         CVB   R1,COMM_DWORD                     CONVERT TO BINARY\n         SR    R0,R0                             CLEAR R0\n         ICM   R2,15,SPF_VWIDTH                  WIDTH VALID?\n         BZ    DISP0060                          NO\n         D     R0,SPF_VWIDTH                     COMPUTE ROW/COLUMN\n         ST    R1,SPF_ROW                        SAVE ROW\n         ST    R0,SPF_COLUMN                     SAVE COLUMN\nDISP0060 DS    0H\n         ITRACE ID=ROW_COL,                                            +\n               RDATA1=R1,                                              +\n               RDATA2=R0\n* ------------------------------------------------------------------- *\n*        Parse the command                                            *\n* ------------------------------------------------------------------- *\n         ITRACE ID=PARSE\n         LA    R0,SPF_ZCMD                       COMMAND ADDRESS\n         ST    R0,COMM_COMMAND_ADDRESS\n         LA    R0,L'SPF_ZCMD                     COMMAND LENGTH\n         ST    R0,COMM_COMMAND_LENGTH\n         L     R15,COMM_V_VZAPPARS               VZAPPARS ENTRY POINT\n         BALR  R14,R15                           CALL VZAPPARS\n         ITRACE ID=RC,                                                 +\n               RDATA1=R15\n         LTR   R15,R15                           RC=0?\n         BNZ   DISP0010                          NO\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTPUT0000 DS    0H\n         MVC   SPF_ZCMD,COMM_BLANKS              RESET THE COMMAND\n         ICM   R1,15,COMM_TRACE_TPUT             TPUT STORAGE PRESENT?\n         BNZ   TPUT0010                          YES\n         ITRACE ID=TPUT_ON\n         GETMAIN RU,                             GETMAIN TPUT STORAGE  +\n               LV=TR_ENTRY_L,                                          +\n               LOC=BELOW\n         ST    R1,COMM_TRACE_TPUT                SAVE ADDRESS\n         B     EXIT0000\nTPUT0010 DS    0H\n         ITRACE ID=TPUT_OFF\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=TR_ENTRY_L\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                      RESTORE R13\n         LM    R14,R12,12(R13)                  RESTORE REGISTERS\n         SR    R15,R15                          SET RC\n         BR    R14                              RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nABEND000 DS    0H\n         ITRACE ID=ABEND\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDDISP)\nABEND         DC    C'ABEND '\nDISPLAY       DC    CL8'DISPLAY'\nTPUT          DC    CL8'TPUT'\nVDATA         DC    CL8'VDATA'\nVGET          DC    CL8'VGET'\nVPUT          DC    CL8'VPUT'\n\nVGET_LIST     DC    C'(ZSCROLLA ZSCROLLN ZVERB ZSCREENC)'\nVPUT_LIST     DC    C'(ZSCROLLA ZSCROLLN ZVERB)'\n\n              LTORG\nDISPEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDDISP           DSECT\n                  COPY    DXDPREF\n\nDXD_SPF_PARMS     DS      0A                    SPF PARM LIST\nDXD_SPF1          DS      A\nDXD_SPF2          DS      A\nDXD_SPF3          DS      A\n\nDXD_FLAGS         DS      X\n$DXD_VGET         EQU     X'80'\n$DXD_VPUT         EQU     X'40'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPDISP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPDSCB": {"ttr": 3589, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Q\\x01\\x10\\x04\\x8f\\x01\\x10\\x04\\x8f\\x167\\x01\\xc6\\x01\\xc6\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-17T00:00:00", "modifydate": "2010-02-17T16:37:51", "lines": 454, "newlines": 454, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPDSCB                                              *\n*                                                                     *\n*   List DSCBs in the VZAP as a scrollable list with a line selection.*\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPDSCB CSECT\nVZAPDSCB AMODE 31\nVZAPDSCB RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPDSCB,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPDSCB'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPDSCB)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPDSCB,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDDSCB,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         L     R9,COMM_VZAPSPFD\n         USING VZAPSPFD,R9\n         MVC   DXD_FIRST_DISPLAYED,COMM_VTOC_DATA\n* ------------------------------------------------------------------- *\n*        Obtain VDATA for dynamic area                                *\n* ------------------------------------------------------------------- *\n         MVC   COMM_PANEL,DSCB_PANEL          COPY PANEL NAME\n         ITRACE ID=PQRY,                                               +\n               DATA1=COMM_PANEL\n         L     R15,COMM_V_VZAPPQRY            VZAPPQRY ENTRY POINT\n         BALR  R14,R15                        CALL VTOPQRY\n         L     R0,SPF_VDEPTH                  NUMBER OF ROWS\n         MH    R0,SPF_VWIDTH+2                COMPUTE VDATA SIZE\n         ST    R0,DXD_VDATA_LENGTH            SAVE LENGTH\n         GETMAIN RU,                          GETMAIN STORAGE FOR VDATA+\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,DXD_VDATA_ADDR              SAVE ADDR\n         XC    DXD_VDATA_CURSOR,DXD_VDATA_CURSOR\n* ------------------------------------------------------------------- *\n*        Initialize dyamic area                                       *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=INITVDATA\n         L     R0,DXD_VDATA_ADDR              VDATA ADDR\n         L     R1,DXD_VDATA_LENGTH            VDATA LENGTH\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                         INITIALIZE VDATA BUFFER\n* ------------------------------------------------------------------- *\n*        Any updates pending?                                         *\n* ------------------------------------------------------------------- *\n         TM    COMM_FLAGS,$COMM_UPDATE        UPDATE(S) PENDING?\n         BNO   MAIN0020                       NO\n         MVC   SPF_MSG_4(EMSG01_L),EMSG01\n* -- ---------------------------------------------------------------- *\n*        Build detail                                                 *\n* ------------------------------------------------------------------- *\nMAIN0020 DS    0H\n         L     R6,SPF_VDEPTH                  NBR OF LINES AVAILABLE\n         L     R7,DXD_VDATA_ADDR              VDATA BUFFER ADDRESS\n         L     R8,DXD_FIRST_DISPLAYED         FIRST VTOCDATA TO DISPLAY\n         USING VTOCDATA,R8\nMAIN0030 DS    0H\n         ITRACE ID=DATA,                                               +\n               RDATA1=R8,                                              +\n               RDATA2=R7\n         MVC   0(MSG01_L,R7),MSG01            INITIALIZE\n         USING MSG01,R7\n         MVC   MSG01_FMTID,DS1FMTID           COPY FORMAT ID\n         UNPK  COMM_DWORD(5),VTOC_COUNT+0(3)  UNPACK CYLINDER\n         TR    COMM_DWORD(4),HEXCHAR          TRANSLATE\n         MVC   MSG01_CCX,COMM_DWORD           COPY CYLINDER\n         UNPK  COMM_DWORD(5),VTOC_COUNT+2(3)  UNPACK HEAD\n         TR    COMM_DWORD(4),HEXCHAR          TRANSLATE\n         MVC   MSG01_HHX,COMM_DWORD           COPY HEAD\n         UNPK  COMM_DWORD(3),VTOC_COUNT+4(2)  UNPACK RECORD\n         TR    COMM_DWORD(2),HEXCHAR          TRANSLATE\n         MVC   MSG01_RX,COMM_DWORD            COPY RECORD\n         CLI   DS1FMTID,C'1'                  FORMAT-1?\n         BNE   MAIN0040                       NO\n         MVC   MSG01_DSN,DS1DSNAM             COPY DATA SET NAME\n         DROP  R7\nMAIN0040 DS    0H\n         A     R7,SPF_VWIDTH                  NEXT LINE\n         BCT   R6,MAIN0050\n         B     MAIN0060                       SCREEN IS FULL\nMAIN0050 DS    0H\n         ICM   R8,15,VTOC_NEXT                NEXT DSCB\n         BNZ   MAIN0030                       LOOP\n* ------------------------------------------------------------------- *\n*        Display                                                      *\n* ------------------------------------------------------------------- *\nMAIN0060 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_PANEL,DSCB_PANEL          COPY PANEL NAME\n         MVC   COMM_VDATA_ADDR,DXD_VDATA_ADDR\n         MVC   COMM_VDATA_LENGTH,DXD_VDATA_LENGTH\n         MVC   COMM_VDATA_CURSOR,DXD_VDATA_CURSOR\n         L     R15,COMM_V_VZAPDISP            VZAPDISP ENTRY POINT\n         BALR  R14,R15                        CALL VZAPDISP\n         ITRACE ID=DISP_RC,                                            +\n               DATA1=(COMM_DISP_RC,2)\n         OC    COMM_DISP_RC,COMM_DISP_RC      RC = 0?\n         BNZ   EXIT0000                       NO\n* ------------------------------------------------------------------- *\n*        Determine if user wants to scroll                            *\n* ------------------------------------------------------------------- *\n         CLI   SPF_ZVERB,C'B'                 BOTTOM\n         BE    MAIN0100                       YES\n         CLI   SPF_ZVERB,C'D'                 DOWN?\n         BE    MAIN0120                       YES\n         CLI   SPF_ZVERB,C'U'                 UP?\n         BE    MAIN0140                       YES.. FOR NOW\n         CLI   SPF_ZVERB,C'T'                 TOP?\n         BE    MAIN0190                       YES\n         B     MAIN0200                       NO SCROLL, TRY LINE CMD\nMAIN0100 DS    0H\n         ITRACE ID=BOTTOM\n         ICM   R8,15,DXD_FIRST_DISPLAYED      FIRST ON DISPLAY\nMAIN0110 DS    0H\n         ST    R8,DXD_FIRST_DISPLAYED\n         ICM   R8,15,VTOC_NEXT                NEXT ON CHAIN\n         BNZ   MAIN0110                       FOLLOW CHAIN\n         B     MAIN0010                       BUILD DISPLAY\nMAIN0120 DS    0H\n         ITRACE ID=DOWN,                                               +\n               DATA1=(SPF_ZSCROLLA,1),                                 +\n               DATA2=(SPF_ZSCROLLN,4)\n         CLI   SPF_ZSCROLLA,C'M'              MAX?\n         BE    MAIN0100                       YES.. GO TO BOTTOM\n         L     R1,SPF_ZSCROLLN                NBR OF LINES TO SCROLL\n         ICM   R8,15,DXD_FIRST_DISPLAYED      FIRST ON SCREEN\nMAIN0130 DS    0H\n         STCM  R8,15,DXD_FIRST_DISPLAYED      SET FIRST ON DISPLAY\n         ICM   R8,15,VTOC_NEXT                NEXT ON CHAIN\n         BZ    MAIN0010                       END OF CHAIN STOP HERE\n         BCT   R1,MAIN0130                    LOOP\n         B     MAIN0010                       BUILD DISPLAY\nMAIN0140 DS    0H\n         ITRACE ID=UP\n         CLI   SPF_ZSCROLLA,C'M'              MAX?\n         BE    MAIN0190                       YES\n         ICM   R1,15,SPF_ZSCROLLN             NBR OF LINES TO SCROLL\n         BZ    MAIN0010                       NONE..\n         ICM   R8,15,DXD_FIRST_DISPLAYED      FIRST ON DISPLAY\nMAIN0150 DS    0H\n         ST    R8,DXD_FIRST_DISPLAYED         SAVE FOR NEXT START POINT\n         ICM   R8,15,VTOC_PREVIOUS            PREVIOUS VTOC RECORD\n         BZ    MAIN0010                       END OF CHAIN.. STOP\n         OC    VTOC_PREVIOUS,VTOC_PREVIOUS    END OF CHAIN?\n         BZ    MAIN0010                       YES.. STOP\n         BCT   R1,MAIN0150                    LOOP\n         B     MAIN0010                       BUILD DISPLAY\nMAIN0190 DS    0H\n         ITRACE ID=TOP\n         MVC   DXD_FIRST_DISPLAYED,COMM_VTOC_DATA\n         B     MAIN0010                       BUILD DISPLAY\n* ------------------------------------------------------------------- *\n*        Determine if there were any line commands                    *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         L     R6,SPF_VDEPTH                  NBR OF LINES AVAILABLE\n         L     R7,DXD_VDATA_ADDR              VDATA BUFFER ADDRESS\n         L     R8,DXD_FIRST_DISPLAYED         FIRST VTOCDATA TO DISPLAY\n         NI    DXD_FLAGS,255-$SELECT          RESET FLAG\nMAIN0210 DS    0H\n         ITRACE ID=LINE_CMD,                                           +\n               RDATA1=R7,                                              +\n               DATA2=(MSG01_SELECT,1)\n         USING MSG01,R7\n         CLI   MSG01_SELECT,C' '              BLANK?\n         BE    MAIN0310                       YES\n         CLI   DS1FMTID,C'1'                  FORMAT-1?\n         BE    MAIN0220                       YES\n         CLI   DS1FMTID,C'3'                  FORMAT-3?\n         BE    MAIN0230                       YES\n         CLI   DS1FMTID,C'4'                  FORMAT-4?\n         BE    MAIN0240                       YES\n         ITRACE ID=BAD_FMT\n         MVC   SPF_MSG_1(EMSG01_L),EMSG01\n         B     MAIN0060\nMAIN0220 DS    0H\n         ITRACE ID=FMT1,                                               +\n               DATA1=DS1DSNAM+00,                                      +\n               DATA2=DS1DSNAM+08\n         MVC   COMM_DSN,DS1DSNAM              COPY DSN\n         B     MAIN0300\nMAIN0230 DS    0H\n         ITRACE ID=FMT3\n         MVC   COMM_DSN,FORMAT_3              INDICATE IT'S A FORMAT-3\n         B     MAIN0300\nMAIN0240 DS    0H\n         ITRACE ID=FMT4\n         MVC   COMM_DSN,FORMAT_4              INDICATE IT'S A FORMAT-4\nMAIN0300 DS    0H\n         MVI   MSG01_SELECT,C' '              RESET SELECTION\n         MVC   COMM_FMTID,MSG01_FMTID         COPY FORMAT ID\n         MVC   SPF_CCHHR,MSG01_CCX            COPY DISK ADDR\n         OI    DXD_FLAGS,$SELECT              SOMETHING SELECTED\n         ST    R8,COMM_SELECTED_DSCB          SET DSCB ADDRESS\n         ITRACE ID=SELECTED,                                           +\n               RDATA1=R8,                                              +\n               DATA2=DS1DSNAM\n         L     R15,COMM_V_VZAPFMT1            FMT1 FIELD DISPLAY\n         ITRACE ID=FIELDS,                                             +\n               RDATA1=R15\n         BALR  R14,R15                        CALL VZAPFMT1\n         XC    COMM_SELECTED_DSCB,COMM_SELECTED_DSCB\nMAIN0310 DS    0H\n         DROP  R7\n         A     R7,SPF_VWIDTH                  NEXT LINE\n         BCT   R6,MAIN0320\n         B     MAIN0400                       ALL LINE CHECKED\nMAIN0320 DS    0H\n         ICM   R8,15,VTOC_NEXT                ANOTHER VTOC RECORD?\n         BNZ   MAIN0210                       YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0400 DS    0H\n         TM    DXD_FLAGS,$SELECT              ANYTHING SELECTED?\n         BO    MAIN0010                       YES\n* ------------------------------------------------------------------- *\n*        Check for primary command                                    *\n* ------------------------------------------------------------------- *\n         SR    R0,R0\n         ICM   R0,3,COMM_OPERANDS_NBR         ANY OPERANDS?\n         BZ    MAIN0010                       NO\n         ICM   R1,15,COMM_OPERAND01_ADDRESS   1ST OPERAND\n         CLC   CAN,0(R1)                      CAN?\n         BE    MAIN0500                       YES\n         CLC   CANCEL,0(R1)                   CANCEL?\n         BE    MAIN0500                       YES\n         CLC   SORT,0(R1)                     SORT?\n         BE    MAIN0600                       YES\n         MVC   SPF_MSG_2(EMSG04_L),EMSG04     COPY ERROR MESSAGE\n         B     MAIN0060\nMAIN0500 DS    0H\n         TM    COMM_FLAGS,$COMM_UPDATE        ANY UPDATES PENDING?\n         BNO   EXIT0000                       NO\n         ITRACE ID=WARN\n         B     EXIT0000                       EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0600 DS    0H\n         ICM   R1,15,COMM_OPERAND02_ADDRESS   OPERAND 2 ADDRESS\n         ITRACE ID=SORT,                                               +\n               DATA1=(COMM_OPERANDS_NBR,2),                            +\n               RDATA2=R1\n         CH    R0,H2                          CORRECT NBR OF OPERANDS?\n         BNE   ERR0010                        NO\n         CLC   DSN,0(R1)                      SORT BY DSN?\n         BE    MAIN0610                       YES\n         CLC   NAME,0(R1)                     SORT BY NAME (DSN)?\n         BE    MAIN0610                       YES\n         CLC   ADDR,0(R1)                     SORT BY ADDR (DISK ADDR)?\n         BE    MAIN0620                       YES\n         CLC   CCHHR,0(R1)                    SORT BY CCHHR (DISK ADDR)\n         BE    MAIN0620                       YES\n         B     ERR0020\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0610 DS     0H\n         ITRACE ID=BY_DSN\n         LA    R2,DSN_CLC                     CLC FOR SORT\n         B     MAIN0700                       START SORT\nMAIN0620 DS     0H\n         ITRACE ID=BY_ADDR\n         LA    R2,CCHHR_CLC                   CLC FOR SORT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Sort DSCB blocks into ascending sequence.                    *\n*                                                                     *\n*        R2 is address of CLC to use for comparing \"keys\"             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0700 DS    0H\n         MVC   SPF_ZCMD,COMM_BLANKS           RESET COMMAND\n         ICM   R3,15,COMM_VTOC_DATA           FIRST DSCB\n         BZ    MAIN0010                       NONE TO SORT\nDSCB1    USING VTOCDATA,R3\nMAIN0710 DS    0H\n         LR    R5,R3                          ASSUME FIRST IS LOWEST\nLOW      USING VTOCDATA,R5\n         ICM   R4,15,DSCB1.VTOC_NEXT          NEXT ON CHAIN\n         BZ    MAIN0010                       ONLY 1 LEFT\nDSCB2    USING VTOCDATA,R4\nMAIN0720 DS    0H\n         EX    R0,0(R2)                       COMPARE DATA\n         BL    MAIN0730                       FIRST IS LOWER\n         LR    R5,R4                          SAVE ADDR OF LOWEST\nMAIN0730 DS    0H\n         ICM   R4,15,DSCB2.VTOC_NEXT          NEXT DSCB\n         BNZ   MAIN0720\n         CR    R3,R5                          LOWEST ALREADY IN PLACE?\n         BE    MAIN0740                       YES\n         XC    16(VTOCDATA_L-16,R3),16(R5)\n         XC    16(VTOCDATA_L-16,R5),16(R3)    SWAP ALL BUT HEADER INFO\n         XC    16(VTOCDATA_L-16,R3),16(R5)\nMAIN0740 DS    0H\n         ICM   R3,15,DSCB1.VTOC_NEXT          DROP DOWN 1\n         BNZ   MAIN0710                       SCAN AGAIN\n         B     MAIN0010\n\nDSN_CLC   CLC   LOW.VTOC_DSCB(44),DSCB2.VTOC_DSCB    COMPARE DSNs\nCCHHR_CLC CLC   LOW.VTOC_COUNT(5),DSCB2.VTOC_COUNT   COMPARE DISK ADDRs\n         DROP  DSCB1,DSCB2,LOW\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=BAD_NBR\n         MVC   SPF_MSG_1(EMSG05_L),EMSG05\n         B     MAIN0010\nERR0020  DS    0H\n         ITRACE ID=BAD_SORT\n         MVC   SPF_MSG_1(EMSG06_L),EMSG06\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         ICM   R1,15,DXD_VDATA_ADDR           VDATA GETMAINED?\n         L     R0,DXD_VDATA_LENGTH            LENGTH\n         BZ    EXIT0010                       NO\n         FREEMAIN RU,                         FREEMAIN VDATA           +\n               A=(1),                                                  +\n               LV=(0)\nEXIT0010 DS    0H\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDDSCB)\n              LTORG\n\nH2            DC    H'2'\n\nHEXCHAR       EQU   *-C'0'\n              DC    C'0123456789ABCDEF'\n\nADDR          DC    C'ADDR '\nCAN           DC    C'CAN '\nCANCEL        DC    C'CANCEL '\nCCHHR         DC    C'CCHHR '\nDSN           DC    C'DSN '\nNAME          DC    C'NAME '\nSORT          DC    C'SORT'\n\nDSCB_PANEL    DC    C'VZAPDSCB'\n\nMSG01         DS    0C\n              DC    AL1($SCREEN_ATTR_INPUT)\nMSG01_SELECT  DC    C' '\n              DC    AL1($SCREEN_ATTR_HIGH_TURQUOISE)\nMSG01_CCX     DC    CL4' '\n              DC    C'-'\nMSG01_HHX     DC    CL4' '\n              DC    C'-'\nMSG01_RX      DC    CL2' '\n              DC    CL4' '\n              DC    AL1($SCREEN_ATTR_HIGH_YELLOW)\nMSG01_FMTID   DC    C' '\n              DC    AL1($SCREEN_ATTR_HIGH_GREEN)\nMSG01_DSN     DC    CL44' '\nMSG01_L       EQU   *-MSG01\n\nFORMAT_3      DC    C'Format-3'\nFORMAT_4      DC    C'Format-4'\n\nEMSG01        DS    0C\n              DC    C'VZAPDSCB01I Updates pending'\nEMSG01_L      EQU   *-EMSG01\n\nEMSG02        DS    0C\n              DC    C'VZAPDSCB02I VTOCZAP does not support this DSCB'\nEMSG02_L      EQU   *-EMSG02\n\nEMSG03        DS    0C\n              DC    C'VZAPDSCB03I Select a DSCB'\nEMSG03_L      EQU   *-EMSG03\n\nEMSG04        DS    0C\n              DC    C'VZAPDSCB04I Invalid primary command'\nEMSG04_L      EQU   *-EMSG04\n\nEMSG05        DS    0C\n              DC    C'VZAPDSCB05E Incorrect number of SORT operands'\nEMSG05_L      EQU   *-EMSG05\n\nEMSG06        DS    0C\n              DC    C'VZAPDSCB06E Invalid SORT field'\nEMSG06_L      EQU   *-EMSG06\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDDSCB              DSECT\n                     COPY DXDPREF\n\nDXD_VDATA_ADDR       DS   A\nDXD_VDATA_LENGTH     DS   F\nDXD_VDATA_CURSOR     DS   F\nDXD_FIRST_DISPLAYED  DS   A\n\nDXD_FLAGS            DS   X\n$SELECT              EQU  X'80'          AT LEAST ONE DSCB SELECTED\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VTOCDATA\n         ORG      VTOC_DSCB\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     ATTRS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPDSCB\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VZAPDSNM": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x10\\x01\\x10\\x03O\\x01\\x10\\x03\\x9f\\t\\x16\\x01}\\x01}\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2010-02-03T00:00:00", "modifydate": "2010-02-08T09:16:10", "lines": 381, "newlines": 381, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPDSNM                                              *\n*                                                                     *\n*   Display/update data set name                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPDSNM CSECT\nVZAPDSNM AMODE 31\nVZAPDSNM RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPDSNM,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPDSNM'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPDSNM)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPDSNM,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDDSNM,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         L     R9,COMM_VZAPSPFD\n         USING VZAPSPFD,R9\n         L     R8,COMM_SELECTED_DSCB          SELECTED DSCB\n         USING VTOCDATA,R8\n* ------------------------------------------------------------------- *\n*        Copy DSN to allow user to abort                              *\n* ------------------------------------------------------------------- *\n         MVC   DXD_DSN,DS1DSNAM               COPY DSN\n* ------------------------------------------------------------------- *\n*        Obtain VDATA for dynamic area                                *\n* ------------------------------------------------------------------- *\n         MVC   COMM_PANEL,FIELD_PANEL         COPY PANEL NAME\n         ITRACE ID=PQRY,                                               +\n               DATA1=COMM_PANEL\n         L     R15,COMM_V_VZAPPQRY            VZAPPQRY ENTRY POINT\n         BALR  R14,R15                        CALL VTOPQRY\n         L     R0,SPF_VDEPTH                  NUMBER OF ROWS\n         MH    R0,SPF_VWIDTH+2                COMPUTE VDATA SIZE\n         ST    R0,COMM_VDATA_LENGTH           SAVE LENGTH\n         GETMAIN RU,                          GETMAIN STORAGE FOR VDATA+\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,COMM_VDATA_ADDR             SAVE ADDR\n         L     R0,COMM_VDATA_LENGTH           LENGTH AGAIN\n         GETMAIN RU,                          GETMAIN SHADOW           +\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,DXD_SHADOW_VDATA            SAVE SHADOW\n         XC    COMM_VDATA_CURSOR,COMM_VDATA_CURSOR\n* ------------------------------------------------------------------- *\n*        Initialize dyamic area                                       *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=INITVDATA\n         L     R0,COMM_VDATA_ADDR             VDATA ADDR\n         L     R1,COMM_VDATA_LENGTH           VDATA LENGTH\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                         INITIALIZE VDATA BUFFER\n* ------------------------------------------------------------------- *\n*        Build detail                                                 *\n* ------------------------------------------------------------------- *\n         ITRACE ID=BUILD\n         L     R7,COMM_VDATA_ADDR             DYNAMIC AREA BUFFER\n         L     R6,DXD_SHADOW_VDATA            SHADOW BUFFER\n         ST    R7,DXD_CHAR_VDATA              SAVE CHAR LINE VDATA\n         ST    R6,DXD_CHAR_SHADOW             SAVE CHAR LINE SHADOW\n         MVC   0(MSG01_L,R7),MSG01\n         USING MSG01,R7\n         MVC   MSG01_DESC,C_CHAR              CHAR LINE\n         MVC   MSG01_DATA,DS1DSNAM            COPY DATA AS IS\n         MVC   0(MSG01_L,R6),0(R7)            COPY TO SHADOW BUFFER\n         DROP  R7\n\n         A     R7,SPF_VWIDTH                  NEXT LINE IN VDATA\n         A     R6,SPF_VWIDTH                  NEXT LINE IN SHADOW\n\n         ST    R7,DXD_ZONE_VDATA              SAVE ZONE LINE VDATA\n         ST    R6,DXD_ZONE_SHADOW             SAVE ZONE LINE SHADOW\n         MVC   0(MSG01_L,R7),MSG01\n         USING MSG01,R7\n         MVC   MSG01_DESC,C_ZONE              ZONE LINE\n         MVC   MSG01_DATA,DS1DSNAM            COPY NAME\n         MVN   MSG01_DATA,COMM_HEXZERO        CLOBBER NUMERICS\n         TR    MSG01_DATA,COMM_TRTABLE        TRANSLATE\n         MVC   0(MSG01_L,R6),0(R7)            COPY TO SHADOW BUFFER\n         DROP  R7\n\n         A     R7,SPF_VWIDTH                  NEXT LINE\n         A     R6,SPF_VWIDTH                  NEXT LINE IN SHADOW\n\n         ST    R7,DXD_NUMR_VDATA              SAVE NUMR LINE VDATA\n         ST    R6,DXD_NUMR_SHADOW             SAVE NUMR LINE SHADOW\n         MVC   0(MSG01_L,R7),MSG01\n         USING MSG01,R7\n         MVC   MSG01_DESC,C_NUMR              NUMERICS LINE\n         MVC   MSG01_DATA,DS1DSNAM            COPY NAME\n         MVZ   MSG01_DATA,COMM_HEXZERO        CLOBBER ZONES\n         TR    MSG01_DATA,COMM_TRTABLE        TRANSLATE\n         MVC   0(MSG01_L,R6),0(R7)            COPY TO SHADOW BUFFER\n         DROP  R7\n\n         A     R7,SPF_VWIDTH                  NEXT LINE (ERROR LINE)\n         ST    R7,DXD_ERROR_VDATA             SAVE ADDR\n* ------------------------------------------------------------------- *\n*        Display                                                      *\n* ------------------------------------------------------------------- *\nMAIN0050 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_PANEL,FIELD_PANEL         COPY PANEL NAME\n         MVC   COMM_VDATA_ADDR,COMM_VDATA_ADDR\n         MVC   COMM_VDATA_LENGTH,COMM_VDATA_LENGTH\n         MVC   COMM_VDATA_CURSOR,COMM_VDATA_CURSOR\n         L     R15,COMM_V_VZAPDISP            VZAPDISP ENTRY POINT\n         BALR  R14,R15                        CALL VZAPDISP\n         ITRACE ID=DISP_RC,                                            +\n               DATA1=(COMM_DISP_RC,2)\n         OC    COMM_DISP_RC,COMM_DISP_RC      RC = 0?\n         BNZ   MAIN0200                       NO\n* ------------------------------------------------------------------- *\n*        Did user want to cancel changes?                             *\n* ------------------------------------------------------------------- *\n         CLC   SPF_ZCMD,COMM_BLANKS           COMMAND BLANK?\n         BE    MAIN0060                       YES\n         CLC   CAN,SPF_ZCMD                   CAN?\n         BE    MAIN0300                       YES\n         CLC   CANCEL,SPF_ZCMD                CANCEL\n         BE    MAIN0300                       YES\n         B     ERR0020                        OTHERWISE BAD COMMAND\n* ------------------------------------------------------------------- *\n*        Character                                                    *\n* ------------------------------------------------------------------- *\nMAIN0060 DS    0H\n         ITRACE ID=CHAR\n         L     R2,DXD_CHAR_VDATA              CHAR IN VDATA\n         AH    R2,DATA_OFFSET\n         OC    0(L'MSG01_DATA,R2),COMM_BLANKS FORCE UPPER CASE\n         LA    R3,L'MSG01_DATA                DATA LENGTH\n         L     R14,DXD_CHAR_SHADOW            CHAR IN SHADOW\n         AH    R14,DATA_OFFSET\n         LR    R15,R3                         COPY LENGTH\nMAIN0100 DS    0H\n         CLCL  R2,R14                         COMPARE BUFFERS\n         BE    MAIN0110                       ALL EQUAL\n         LR    R1,R2                          ADDR COMPARE STOPPED\n         S     R1,DXD_CHAR_VDATA              DISP INTO BUFFER\n         SH    R1,DATA_OFFSET                 MINUS DATA FIELD OFFSET\n         LA    R1,DS1DSNAM(R1)                ADDR OF DATA TO CHANGE\n         MVC   0(1,R1),0(R2)                  COPY TO DSN IN WORK AREA\n         LA    R2,1(,R2)                      NEXT IN VDATA BUFFER\n         BCTR  R3,0                           MINUS 1 IN LENGTH LEFT\n         LA    R14,1(,R14)                    NEXT IN VDATA BUFFER\n         BCT   R15,MAIN0100                   MINUS 1, LOOP\n* ------------------------------------------------------------------- *\n*        Zone                                                         *\n* ------------------------------------------------------------------- *\nMAIN0110 DS    0H\n         ITRACE ID=ZONE\n         L     R2,DXD_ZONE_VDATA              ZONE IN VDATA\n         AH    R2,DATA_OFFSET\n         OC    0(L'MSG01_DATA,R2),COMM_BLANKS FORCE UPPER CASE\n         LA    R3,L'MSG01_DATA                DATA LENGTH\n         L     R14,DXD_ZONE_SHADOW            ZONE IN SHADOW\n         AH    R14,DATA_OFFSET\n         LR    R15,R3                         COPY LENGTH\nMAIN0120 DS    0H\n         CLCL  R2,R14                         COMPARE BUFFERS\n         BE    MAIN0140                       ALL EQUAL\n         CLI   0(R2),C'A'                     VALID HEX?\n         BL    ERR0010                        NO\n         CLI   0(R2),C'F'                     VALID HEX?\n         BNH   MAIN0130                       YES\n         CLI   0(R2),C'0'                     VALID HEX?\n         BL    ERR0010                        NO\nMAIN0130 DS    0H\n         MVC   DXD_WORK,0(R2)                 COPY TO DXD_WORK\n         NI    DXD_WORK,X'1F'                 PREPARE FOR TRANSLATE\n         TR    DXD_WORK,COMM_CHARHEX          TRANSLATE\n         LR    R1,R2                          ADDR COMPARE STOPPED\n         S     R1,DXD_ZONE_VDATA              DISP INTO BUFFER\n         SH    R1,DATA_OFFSET                 MINUS DATA FIELD OFFSET\n         LA    R1,DS1DSNAM(R1)                ADDR OF DATA TO CHANGE\n         MVZ   0(1,R1),DXD_WORK               COPY zone\n         LA    R2,1(,R2)                      NEXT IN VDATA BUFFER\n         BCTR  R3,0                           MINUS 1 IN LENGTH LEFT\n         LA    R14,1(,R14)                    NEXT IN VDATA BUFFER\n         BCT   R15,MAIN0120                   MINUS 1, LOOP\n* ------------------------------------------------------------------- *\n*        Numeric                                                      *\n* ------------------------------------------------------------------- *\nMAIN0140 DS    0H\n         ITRACE ID=NUMR\n         L     R2,DXD_NUMR_VDATA              NUMERIC IN VDATA\n         AH    R2,DATA_OFFSET\n         OC    0(L'MSG01_DATA,R2),COMM_BLANKS FORCE UPPER CASE\n         LA    R3,L'MSG01_DATA                LENGTH\n         L     R14,DXD_NUMR_SHADOW            NUMERIC IN SHADOW\n         AH    R14,DATA_OFFSET\n         LR    R15,R3                         COPY LENGTH\nMAIN0150 DS    0H\n         CLCL  R2,R14                         COMPARE BUFFERS\n         BE    MAIN0010                       ALL EQUAL\n         CLI   0(R2),C'A'                     VALID HEX?\n         BL    ERR0010                        NO\n         CLI   0(R2),C'F'                     VALID HEX?\n         BNH   MAIN0160                       YES\n         CLI   0(R2),C'0'                     VALID HEX?\n         BL    ERR0010                        NO\nMAIN0160 DS    0H\n         MVC   DXD_WORK,0(R2)                 COPY TO DXD_WORK\n         NI    DXD_WORK,X'1F'                 PREPARE FOR TRANSLATE\n         TR    DXD_WORK,COMM_CHARHEX          TRANSLATE\n         LR    R1,R2                          ADDR COMPARE STOPPED\n         S     R1,DXD_NUMR_VDATA              DISP INTO BUFFER\n         SH    R1,DATA_OFFSET                 MINUS DATA FIELD OFFSET\n         LA    R1,DS1DSNAM(R1)                ADDR OF DATA TO CHANGE\n         MVN   0(1,R1),DXD_WORK               COPY NUMERIC\n         LA    R2,1(,R2)                      NEXT IN VDATA BUFFER\n         BCTR  R3,0                           MINUS 1 IN LENGTH LEFT\n         LA    R14,1(,R14)                    NEXT IN VDATA BUFFER\n         BCT   R15,MAIN0150                   MINUS 1, LOOP\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*        Exiting.  Has DSN been changed?                              *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         CLC   DXD_DSN,DS1DSNAM               DSN CHANGED?\n         BE    EXIT0000                       NO\n         ITRACE ID=UPDATE\n         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING\n         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=CANCEL\n         MVC   SPF_ZCMD,COMM_BLANKS\n         CLC   DXD_DSN,DS1DSNAM               DSN CHANGED?\n         BE    EXIT0000                       NO\n         MVC   SPF_MSG_1(EMSG02_L),EMSG02     CHANGE DISCARDED\n         MVC   DS1DSNAM,DXD_DSN               COPY ORIGINAL NAME BACK\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=BADDIGIT,                                           +\n               RDATA1=R2,                                              +\n               DATA2=(0(R2),1)\n         LR    R1,R2                          ADDR SCAN STOPPED\n         S     R1,COMM_VDATA_ADDR             DISP IN TO DATA\n         A     R1,DXD_ERROR_VDATA             PLUS ERROR MSG AREA ADDR\n         MVI   0(R1),C'+'                     FLAG BYTE WHERE DATA IS\n         MVC   SPF_MSG_1(EMSG01_L),EMSG01     COPY MESSAGE\n         B     MAIN0050\nERR0020  DS    0H\n         MVC   SPF_MSG_1(EMSG03_L),EMSG03     COPY MESSAGE\n         B     MAIN0050\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         ICM   R1,15,COMM_VDATA_ADDR          VDATA GETMAINED?\n         BZ    EXIT0010                       NO\n         L     R0,COMM_VDATA_LENGTH           LENGTH\n         FREEMAIN RU,                         FREEMAIN VDATA           +\n               A=(1),                                                  +\n               LV=(0)\nEXIT0010 DS    0H\n         ICM   R1,15,DXD_SHADOW_VDATA         SHADOW BUFFER PRESENT?\n         BZ    EXIT0020                       NO\n         L     R0,COMM_VDATA_LENGTH\n         FREEMAIN RU,                         FREEMAIN VDATA           +\n               A=(1),                                                  +\n               LV=(0)\nEXIT0020 DS    0H\n         XC    COMM_VDATA_ADDR,COMM_VDATA_ADDR\n         XC    COMM_VDATA_LENGTH,COMM_VDATA_LENGTH\n         XC    DXD_SHADOW_VDATA,DXD_SHADOW_VDATA\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDDSNM)\n              LTORG\n\nDATA_OFFSET   DC    Y(MSG01_DATA-MSG01)\n\nC_CHAR        DC    C'CHAR'\nC_NUMR        DC    C'NUMR'\nC_ZONE        DC    C'ZONE'\n\nCAN           DC    C'CAN '\nCANCEL        DC    C'CANCEL '\n\nFIELD_PANEL   DC    CL8'VZAPFLD'\n\nEMSG01        DS    0C\n              DC    C'VZAPDSNM01E Bad hex digit'\nEMSG01_L      EQU   *-EMSG01\n\nEMSG02        DS    0C\n              DC    C'VZAPDSNM02W Change to DSN cancelled'\nEMSG02_L      EQU   *-EMSG02\n\nEMSG03        DS    0C\n              DC    C'VZAPDSNM03E Invalid command'\nEMSG03_L      EQU   *-EMSG03\n\nMSG01         DS    0C\n              DC    AL1($SCREEN_ATTR_HIGH_TURQUOISE)\nMSG01_DESC    DC    CL4' '\n              DC    AL1($SCREEN_ATTR_INPUT)\nMSG01_DATA    DC    CL44' '\n              DC    AL1($SCREEN_ATTR_NORMAL)\nMSG01_L       EQU   *-MSG01\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDDSNM       DSECT\n              COPY  DXDPREF\n\nDXD_SHADOW_VDATA    DS   A\nDXD_CHAR_VDATA      DS   A\nDXD_CHAR_SHADOW     DS   A\nDXD_ZONE_VDATA      DS   A\nDXD_ZONE_SHADOW     DS   A\nDXD_NUMR_VDATA      DS   A\nDXD_NUMR_SHADOW     DS   A\nDXD_ERROR_VDATA     DS   A\n\nDXD_WORK      DS    X\n\nDXD_DSN       DS    CL44\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VTOCDATA\n         ORG      VTOC_DSCB\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     ATTRS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPDSNM\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPDSSN": {"ttr": 3077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x14\\x01\\x10\\x03O\\x01\\x10\\x04\\x8f\\x162\\x01r\\x01r\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2010-02-03T00:00:00", "modifydate": "2010-02-17T16:32:14", "lines": 370, "newlines": 370, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPDSSN                                              *\n*                                                                     *\n*   Display/update data set volume sequence number                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPDSSN CSECT\nVZAPDSSN AMODE 31\nVZAPDSSN RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPDSSN,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPDSSN'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPDSSN)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPDSSN,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDDSSN,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         L     R9,COMM_VZAPSPFD\n         USING VZAPSPFD,R9\n         L     R8,COMM_SELECTED_DSCB          SELECTED DSCB\n         USING VTOCDATA,R8\n* ------------------------------------------------------------------- *\n*        Copy sequence nbr to allow user to abort                     *\n* ------------------------------------------------------------------- *\n         MVC   DXD_DSSN,DS1DSSN               COPY VOLSER\n* ------------------------------------------------------------------- *\n*        Obtain VDATA for dynamic area                                *\n* ------------------------------------------------------------------- *\n         MVC   COMM_PANEL,FIELD_PANEL         COPY PANEL NAME\n         ITRACE ID=PQRY,                                               +\n               DATA1=COMM_PANEL\n         L     R15,COMM_V_VZAPPQRY            VZAPPQRY ENTRY POINT\n         BALR  R14,R15                        CALL VTOPQRY\n         L     R0,SPF_VDEPTH                  NUMBER OF ROWS\n         MH    R0,SPF_VWIDTH+2                COMPUTE VDATA SIZE\n         ST    R0,COMM_VDATA_LENGTH           SAVE LENGTH\n         GETMAIN RU,                          GETMAIN STORAGE FOR VDATA+\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,COMM_VDATA_ADDR             SAVE ADDR\n         L     R0,COMM_VDATA_LENGTH           LENGTH AGAIN\n         GETMAIN RU,                          GETMAIN SHADOW           +\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,DXD_SHADOW_VDATA            SAVE SHADOW\n         XC    COMM_VDATA_CURSOR,COMM_VDATA_CURSOR\n* ------------------------------------------------------------------- *\n*        Initialize dyamic area                                       *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=INITVDATA\n         L     R0,COMM_VDATA_ADDR             VDATA ADDR\n         L     R1,COMM_VDATA_LENGTH           VDATA LENGTH\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                         INITIALIZE VDATA BUFFER\n* ------------------------------------------------------------------- *\n*        Build detail                                                 *\n* ------------------------------------------------------------------- *\n         ITRACE ID=BUILD\n         L     R7,COMM_VDATA_ADDR             DYNAMIC AREA BUFFER\n         L     R6,DXD_SHADOW_VDATA            SHADOW BUFFER\n         ST    R7,DXD_CHAR_VDATA              SAVE CHAR LINE VDATA\n         ST    R6,DXD_CHAR_SHADOW             SAVE CHAR LINE SHADOW\n         MVC   0(MSG01_L,R7),MSG01\n         USING MSG01,R7\n         MVC   MSG01_DESC,C_CHAR              CHAR LINE\n         MVC   MSG01_DATA,DS1DSSN             COPY DATA AS IS\n         MVC   0(MSG01_L,R6),0(R7)            COPY TO SHADOW BUFFER\n         DROP  R7\n\n         A     R7,SPF_VWIDTH                  NEXT LINE IN VDATA\n         A     R6,SPF_VWIDTH                  NEXT LINE IN SHADOW\n\n         ST    R7,DXD_ZONE_VDATA              SAVE ZONE LINE VDATA\n         ST    R6,DXD_ZONE_SHADOW             SAVE ZONE LINE SHADOW\n         MVC   0(MSG01_L,R7),MSG01\n         USING MSG01,R7\n         MVC   MSG01_DESC,C_ZONE              ZONE LINE\n         MVC   MSG01_DATA,DS1DSSN             COPY VOLSER\n         MVN   MSG01_DATA,COMM_HEXZERO        CLOBBER NUMERICS\n         TR    MSG01_DATA,COMM_TRTABLE        TRANSLATE\n         MVC   0(MSG01_L,R6),0(R7)            COPY TO SHADOW BUFFER\n         DROP  R7\n\n         A     R7,SPF_VWIDTH                  NEXT LINE\n         A     R6,SPF_VWIDTH                  NEXT LINE IN SHADOW\n\n         ST    R7,DXD_NUMR_VDATA              SAVE NUMR LINE VDATA\n         ST    R6,DXD_NUMR_SHADOW             SAVE NUMR LINE SHADOW\n         MVC   0(MSG01_L,R7),MSG01\n         USING MSG01,R7\n         MVC   MSG01_DESC,C_NUMR              NUMERICS LINE\n         MVC   MSG01_DATA,DS1DSSN             COPY VOLSER\n         MVZ   MSG01_DATA,COMM_HEXZERO        CLOBBER ZONES\n         TR    MSG01_DATA,COMM_TRTABLE        TRANSLATE\n         MVC   0(MSG01_L,R6),0(R7)            COPY TO SHADOW BUFFER\n         DROP  R7\n\n         A     R7,SPF_VWIDTH                  NEXT LINE (ERROR LINE)\n         ST    R7,DXD_ERROR_VDATA             SAVE ADDR\n* ------------------------------------------------------------------- *\n*        Display                                                      *\n* ------------------------------------------------------------------- *\nMAIN0050 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_PANEL,FIELD_PANEL         COPY PANEL NAME\n         MVC   COMM_VDATA_ADDR,COMM_VDATA_ADDR\n         MVC   COMM_VDATA_LENGTH,COMM_VDATA_LENGTH\n         MVC   COMM_VDATA_CURSOR,COMM_VDATA_CURSOR\n         L     R15,COMM_V_VZAPDISP            VZAPDISP ENTRY POINT\n         BALR  R14,R15                        CALL VZAPDISP\n         ITRACE ID=DISP_RC,                                            +\n               DATA1=(COMM_DISP_RC,2)\n         OC    COMM_DISP_RC,COMM_DISP_RC      RC = 0?\n         BNZ   MAIN0200                       NO\n* ------------------------------------------------------------------- *\n*        Does use want to cancel changes?                             *\n* ------------------------------------------------------------------- *\n         CLC   SPF_ZCMD,COMM_BLANKS           COMMAND BLANK?\n         BE    MAIN0060                       YES\n         CLC   CAN,SPF_ZCMD                   CAN?\n         BE    MAIN0300                       YES\n         CLC   CANCEL,SPF_ZCMD                CANCEL?\n         BE    MAIN0300                       YES\n         B     ERR0020                        OTHERWISE BAD COMMAND\n* ------------------------------------------------------------------- *\n*        Character                                                    *\n* ------------------------------------------------------------------- *\nMAIN0060 DS    0H\n         ITRACE ID=CHAR\n         L     R2,DXD_CHAR_VDATA              CHAR IN VDATA\n         AH    R2,DATA_OFFSET\n         OC    0(L'MSG01_DATA,R2),COMM_BLANKS FORCE UPPER CASE\n         LA    R3,L'MSG01_DATA                DATA LENGTH\n         L     R14,DXD_CHAR_SHADOW            CHAR IN SHADOW\n         AH    R14,DATA_OFFSET\n         LR    R15,R3                         COPY LENGTH\nMAIN0100 DS    0H\n         CLCL  R2,R14                         COMPARE BUFFERS\n         BE    MAIN0110                       ALL EQUAL\n         LR    R1,R2                          ADDR COMPARE STOPPED\n         S     R1,DXD_CHAR_VDATA              DISP INTO BUFFER\n         SH    R1,DATA_OFFSET                 MINUS DATA FIELD OFFSET\n         LA    R1,DS1DSSN(R1)                 ADDR OF DATA TO CHANGE\n         MVC   0(1,R1),0(R2)                  COPY TO SEQ NBR IN WORK\n         LA    R2,1(,R2)                      NEXT IN VDATA BUFFER\n         BCTR  R3,0                           MINUS 1 IN LENGTH LEFT\n         LA    R14,1(,R14)                    NEXT IN VDATA BUFFER\n         BCT   R15,MAIN0100                   MINUS 1, LOOP\n* ------------------------------------------------------------------- *\n*        Zone                                                         *\n* ------------------------------------------------------------------- *\nMAIN0110 DS    0H\n         ITRACE ID=ZONE\n         L     R2,DXD_ZONE_VDATA              ZONE IN VDATA\n         AH    R2,DATA_OFFSET\n         OC    0(L'MSG01_DATA,R2),COMM_BLANKS FORCE UPPER CASE\n         LA    R3,L'MSG01_DATA                DATA LENGTH\n         L     R14,DXD_ZONE_SHADOW            ZONE IN SHADOW\n         AH    R14,DATA_OFFSET\n         LR    R15,R3                         COPY LENGTH\nMAIN0120 DS    0H\n         CLCL  R2,R14                         COMPARE BUFFERS\n         BE    MAIN0140                       ALL EQUAL\n         CLI   0(R2),C'A'                     VALID HEX?\n         BL    ERR0010                        NO\n         CLI   0(R2),C'F'                     VALID HEX?\n         BNH   MAIN0130                       YES\n         CLI   0(R2),C'0'                     VALID HEX?\n         BL    ERR0010                        NO\nMAIN0130 DS    0H\n         MVC   DXD_WORK,0(R2)                 COPY TO DXD_WORK\n         NI    DXD_WORK,X'1F'                 PREPARE FOR TRANSLATE\n         TR    DXD_WORK,COMM_CHARHEX          TRANSLATE\n         LR    R1,R2                          ADDR COMPARE STOPPED\n         S     R1,DXD_ZONE_VDATA              DISP INTO BUFFER\n         SH    R1,DATA_OFFSET                 MINUS DATA FIELD OFFSET\n         LA    R1,DS1DSSN(R1)                 ADDR OF DATA TO CHANGE\n         MVZ   0(1,R1),DXD_WORK               COPY ZONE\n         LA    R2,1(,R2)                      NEXT IN VDATA BUFFER\n         BCTR  R3,0                           MINUS 1 IN LENGTH LEFT\n         LA    R14,1(,R14)                    NEXT IN VDATA BUFFER\n         BCT   R15,MAIN0120                   MINUS 1, LOOP\n* ------------------------------------------------------------------- *\n*        Numeric                                                      *\n* ------------------------------------------------------------------- *\nMAIN0140 DS    0H\n         ITRACE ID=NUMR\n         L     R2,DXD_NUMR_VDATA              NUMERIC IN VDATA\n         AH    R2,DATA_OFFSET\n         OC    0(L'MSG01_DATA,R2),COMM_BLANKS FORCE UPPER CASE\n         LA    R3,L'MSG01_DATA                LENGTH\n         L     R14,DXD_NUMR_SHADOW            NUMERIC IN SHADOW\n         AH    R14,DATA_OFFSET\n         LR    R15,R3                         COPY LENGTH\nMAIN0150 DS    0H\n         CLCL  R2,R14                         COMPARE BUFFERS\n         BE    MAIN0010                       ALL EQUAL\n         CLI   0(R2),C'A'                     VALID HEX?\n         BL    ERR0010                        NO\n         CLI   0(R2),C'F'                     VALID HEX?\n         BNH   MAIN0160                       YES\n         CLI   0(R2),C'0'                     VALID HEX?\n         BL    ERR0010                        NO\nMAIN0160 DS    0H\n         MVC   DXD_WORK,0(R2)                 COPY TO DXD_WORK\n         NI    DXD_WORK,X'1F'                 PREPARE FOR TRANSLATE\n         TR    DXD_WORK,COMM_CHARHEX          TRANSLATE\n         LR    R1,R2                          ADDR COMPARE STOPPED\n         S     R1,DXD_NUMR_VDATA              DISP INTO BUFFER\n         SH    R1,DATA_OFFSET                 MINUS DATA FIELD OFFSET\n         LA    R1,DS1DSSN(R1)                 ADDR OF DATA TO CHANGE\n         MVN   0(1,R1),DXD_WORK               COPY NUMERIC\n         LA    R2,1(,R2)                      NEXT IN VDATA BUFFER\n         BCTR  R3,0                           MINUS 1 IN LENGTH LEFT\n         LA    R14,1(,R14)                    NEXT IN VDATA BUFFER\n         BCT   R15,MAIN0150                   MINUS 1, LOOP\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*        Exiting.  Has volser been changed?                           *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         CLC   DXD_DSSN,DS1DSSN               ANYTHING UPDATED?\n         BE    EXIT0000                       NO\n         ITRACE ID=UPDATE\n         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING\n         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=CANCEL\n         MVC   SPF_ZCMD,COMM_BLANKS\n         CLC   DXD_DSSN,DS1DSSN               VOLSER CHANGED?\n         BE    EXIT0000                       NO\n         MVC   SPF_MSG_1(EMSG02_L),EMSG02     WARN THE USER\n         MVC   DS1DSSN,DXD_DSSN               RESET VOLSER\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=BADDIGIT,                                           +\n               RDATA1=R2,                                              +\n               DATA2=(0(R2),1)\n         LR    R1,R2                          ADDR SCAN STOPPED\n         S     R1,COMM_VDATA_ADDR             DISP IN TO DATA\n         A     R1,DXD_ERROR_VDATA             PLUS ERROR MSG AREA ADDR\n         MVI   0(R1),C'+'                     FLAG BYTE WHERE DATA IS\n         MVC   SPF_MSG_1(EMSG01_L),EMSG01     COPY MESSAGE\n         B     MAIN0050\nERR0020  DS    0H\n         MVC   SPF_MSG_1(EMSG03_L),EMSG03     COPY MESSAGE\n         B     MAIN0050\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         ICM   R1,15,COMM_VDATA_ADDR          VDATA GETMAINED?\n         L     R0,COMM_VDATA_LENGTH           LENGTH\n         BZ    EXIT0010                       NO\n         FREEMAIN RU,                         FREEMAIN VDATA           +\n               A=(1),                                                  +\n               LV=(0)\nEXIT0010 DS    0H\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDDSSN)\n              LTORG\n\nDATA_OFFSET   DC    Y(MSG01_DATA-MSG01)\n\nC_CHAR        DC    C'CHAR'\nC_NUMR        DC    C'NUMR'\nC_ZONE        DC    C'ZONE'\n\nCAN           DC    C'CAN '\nCANCEL        DC    C'CANCEL '\nFIELD_PANEL   DC    CL8'VZAPFLD'\n\nEMSG01        DS    0C\n              DC    C'VZAPDSSN01E Bad hex digit'\nEMSG01_L      EQU   *-EMSG01\n\nEMSG02        DS    0C\n              DC    C'VZAPDSSN02W Changes to VOLSER cancelled'\nEMSG02_L      EQU   *-EMSG02\n\nEMSG03        DS    0C\n              DC    C'VZAPDSSN03E Invalid command'\nEMSG03_L      EQU   *-EMSG03\n\nMSG01         DS    0C\n              DC    AL1($SCREEN_ATTR_HIGH_TURQUOISE)\nMSG01_DESC    DC    CL4' '\n              DC    AL1($SCREEN_ATTR_INPUT)\nMSG01_DATA    DC    CL06' '\n              DC    AL1($SCREEN_ATTR_NORMAL)\nMSG01_L       EQU   *-MSG01\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDDSSN       DSECT\n              COPY  DXDPREF\n\nDXD_SHADOW_VDATA    DS   A\nDXD_CHAR_VDATA      DS   A\nDXD_CHAR_SHADOW     DS   A\nDXD_ZONE_VDATA      DS   A\nDXD_ZONE_SHADOW     DS   A\nDXD_NUMR_VDATA      DS   A\nDXD_NUMR_SHADOW     DS   A\nDXD_ERROR_VDATA     DS   A\n\nDXD_WORK      DS    X\n\nDXD_DSSN      DS    CL6               SAVED VOLSER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VTOCDATA\n         ORG      VTOC_DSCB\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     ATTRS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPDSSN\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPFLG1": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x16\\x01\\x10\\x03o\\x01\\x10\\x03\\x9f\\t\\x17\\x00b\\x00b\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2010-02-05T00:00:00", "modifydate": "2010-02-08T09:17:16", "lines": 98, "newlines": 98, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPFLG1                                              *\n*                                                                     *\n*   Display/update Flag 1                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPFLG1 CSECT\nVZAPFLG1 AMODE 31\nVZAPFLG1 RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPFLG1,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPFLG1'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPFLG1)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPFLG1,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDFLG1,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         LA    R0,BIT_TABLE                   BIT TABLE\n         ST    R0,COMM_BIT_TABLE              PASS ADDR ON\n         L     R15,COMM_V_VZAPBIT1            VZAPBIT1 ENTRY POINT\n         BALR  R14,R15                        CALL VZAPBIT1\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDFLG1)\n              LTORG\n\n\nBIT_TABLE     DS    0C\n              DC    AL1(DS1COMPR)\n              DC    CL15'DS1COMPR'\n              DC    CL50'Compressable extended format'\n\n              DC    AL1(DS1CPOIT)\n              DC    CL15'DS1CPOIT'\n              DC    CL50'Checkpointed data set'\n\n              DC    AL1(DS1EXPBY)\n              DC    CL15'DS1EXPBY'\n              DC    CL50'VSE EXP date by retention period'\n\n              DC    AL1(DS1RECAL)\n              DC    CL15'DS1RECAL'\n              DC    CL50'Data set has been recalled'\n\n              DC    AL1(DS1LARGE)\n              DC    CL15'DS1LARGE'\n              DC    CL50'>64K track data set coexistence'\n\n              DC    AL1(DS1EATTR_OPT)\n              DC    CL15'DS1EATTR_OPT'\n              DC    CL50'May reside in EAS'\n              DC    X'FF'\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDFLG1       DSECT\n              COPY  DXDPREF\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFORMAT_1 DSECT\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPFLG1\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPFMT1": {"ttr": 4106, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00&\\x01\\x10\\x03\\x9f\\x01\\x10\\x05?\\x13\\x17\\x03R\\x03:\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2010-02-08T00:00:00", "modifydate": "2010-02-22T13:17:26", "lines": 850, "newlines": 826, "modlines": 0, "user": "RLRICE"}, "text": "         MACRO\n&NAME    FIELD &LABEL,&DISPLAYER,&EDITOR,&DESC\n         GBLA  &FLDNBR\n         AIF   (T'&LABEL   EQ 'O').NOLABEL\n         AIF   (T'&DISPLAYER    EQ 'O').NODISP\n         AIF   (T'&EDITOR  EQ 'O').NOEXIT\n         AIF   (T'&DESC    EQ 'O').NODESC\n&FLDNBR  SETA  &FLDNBR+1\n&NAME    DC    CL8'&LABEL'                    FIELD LABEL\n         DC    AL2(&FLDNBR)                   FIELD NUMBER\n         DC    AL2(&LABEL-VTOCDATA)           DISP TO FIELD IN SCB\n         DC    AL4(&DISPLAYER)                DISPLAYER\n         DC    VL4(&EDITOR)                   EDITOR\n         DC    CL50&DESC                      DESCRIPTION\n         MEXIT\n.NOLABEL ANOP\n         MNOTE 12,'FIELD LABEL OMITTED'\n         MEXIT\n.NODISP  ANOP\n         MNOTE 12,'FIELD DISPLAY ROUTINE OMITTED'\n         MEXIT\n.NOEXIT  ANOP\n         MNOTE 12,'FIELD UPDATE/EDITOR NAME OMITTED'\n         MEXIT\n.NODESC  ANOP\n         MNOTE 12,'DESCRIPTION OMITTED'\n         MEND\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPFMT1                                              *\n*                                                                     *\n*   List FIELDS in the selected format-1 DSCB                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPFMT1 CSECT\nVZAPFMT1 AMODE 31\nVZAPFMT1 RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPFMT1,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPFMT1'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(FLDSEND-VZAPFMT1)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPFMT1,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDFLDS,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         L     R9,COMM_VZAPSPFD\n         USING VZAPSPFD,R9\n         L     R8,COMM_SELECTED_DSCB          SELECTED DSCB\n         USING VTOCDATA,R8\n         MVC   DXD_FIRST_DISPLAYED,TABLE_TOP\n         MVI   DXD_RC,0                       DEFAULT RC\n         MVI   DXD_FLAGS,0                    RESET ALL FLAGS\n* ------------------------------------------------------------------- *\n*        Verify user is allowed to display format-1 info              *\n* ------------------------------------------------------------------- *\n         ITRACE ID=AUTH\n         MVI   COMM_VTOCZAP_FUNCTION,$VTOCZAP_DISPLAY_FMT1\n         L     R15,COMM_V_VZAPAUTH\n         BALR  R14,R15                        CALL VZAPAUTH\n         ITRACE ID=AUTH_RC,                                            +\n               RDATA1=R15\n         LTR   R15,R15                        ALLOWED?\n         BNZ   ERR0030                        NO\n* ------------------------------------------------------------------- *\n*        Obtain VDATA for dynamic area                                *\n* ------------------------------------------------------------------- *\n         MVC   COMM_PANEL,FIELDS_PANEL        COPY PANEL NAME\n         ITRACE ID=PQRY,                                               +\n               DATA1=COMM_PANEL\n         L     R15,COMM_V_VZAPPQRY            VZAPPQRY ENTRY POINT\n         BALR  R14,R15                        CALL VTOPQRY\n         L     R0,SPF_VDEPTH                  NUMBER OF ROWS\n         MH    R0,SPF_VWIDTH+2                COMPUTE VDATA SIZE\n         ST    R0,DXD_VDATA_LENGTH            SAVE LENGTH\n         GETMAIN RU,                          GETMAIN STORAGE FOR VDATA+\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,DXD_VDATA_ADDR              SAVE ADDR\n         XC    DXD_VDATA_CURSOR,DXD_VDATA_CURSOR\n* ------------------------------------------------------------------- *\n*        Initialize dyamic area                                       *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=INITVDATA\n         L     R0,DXD_VDATA_ADDR              VDATA ADDR\n         L     R1,DXD_VDATA_LENGTH            VDATA LENGTH\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                         INITIALIZE VDATA BUFFER\n* ------------------------------------------------------------------- *\n*        Build detail                                                 *\n* ------------------------------------------------------------------- *\n         MVC   SPF_1,COMM_FMTID               FORMAT ID\n         MVC   SPF_DSN,COMM_DSN               DSN\n         L     R6,SPF_VDEPTH                  NBR OF LINES AVAILABLE\n         L     R7,DXD_VDATA_ADDR              VDATA BUFFER ADDRESS\n         L     R5,DXD_FIRST_DISPLAYED         FIRST FIELD TO DISPLAY\n         USING FIELD_DSECT,R5\nMAIN0020 DS    0H\n         MVC   0(MSG01_L,R7),MSG01            INITIALIZE\n         USING MSG01,R7\nMAIN0030 DS    0H\n         ITRACE ID=FIELD,                                              +\n               DATA1=FIELD_LABEL,                                      +\n               RDATA2=R6\n         SR    R0,R0\n         ICM   R0,3,FIELD_NBR                 FIELD NUMBER\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   MSG01_NBR,=X'40202120'         COPY EDIT WORD\n         ED    MSG01_NBR,COMM_DWORD+6         EDIT FIELD NUMBER\n         MVC   MSG01_LABEL,FIELD_LABEL        COPY FIELD LABEL\n         TM    DXD_FLAGS,$SHOW_DESC           SHOW DESCRIPTION?\n         BO    MAIN0040                       YES\n         ICM   R15,15,FIELD_DISPLAYER         DISPLAYER\n         BZ    MAIN0050                       NO DISPLAYER\n         BALR  R14,R15                        LINK TO DISPLAYER\n         B     MAIN0050\nMAIN0040 DS    0H\n         MVC   MSG01_DESC,FIELD_DESC          COPY DESCRIPTION\nMAIN0050 DS    0H\n         DROP  R7\n         A     R7,SPF_VWIDTH                  NEXT LINE\n         BCT   R6,MAIN0060\n         B     MAIN0070                       SCREEN IS FULL\nMAIN0060 DS    0H\n         LA    R5,FIELD_DSECT_L(,R5)          NEXT DSCB\n         CLI   0(R5),X'FF'                    END OF TABLE?\n         BNE   MAIN0020                       NO\n* ------------------------------------------------------------------- *\n*        Display                                                      *\n* ------------------------------------------------------------------- *\nMAIN0070 DS    0H\n         MVC   COMM_PANEL,FIELDS_PANEL        COPY PANEL NAME\n         ITRACE ID=DISPLAY\n         MVC   COMM_VDATA_ADDR,DXD_VDATA_ADDR\n         MVC   COMM_VDATA_LENGTH,DXD_VDATA_LENGTH\n         MVC   COMM_VDATA_CURSOR,DXD_VDATA_CURSOR\n         L     R15,COMM_V_VZAPDISP            VZAPDISP ENTRY POINT\n         BALR  R14,R15                        CALL VZAPDISP\n         ITRACE ID=DISP_RC,                                            +\n               DATA1=(COMM_DISP_RC,2)\n         OC    COMM_DISP_RC,COMM_DISP_RC      RC = 0?\n         BNZ   EXIT0000                       NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=ZCMD,                                               +\n               DATA1=SPF_ZCMD+0,                                       +\n               DATA2=SPF_ZCMD+8\n         CLC   SPF_ZCMD,COMM_BLANKS           COMMAND PRESENT?\n         BE    MAIN0200                       NO.. CHECK FOR SCROLL\n         CLC   =C'+ ',SPF_ZCMD                SWITCH SCREENS?\n         BE    MAIN0800                       YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NI    DXD_FLAGS,255-$NOT_NUMERIC     RESET FLAG\n         MVC   DXD_COMMAND,COMM_BLANKS        INITIALIZE WORK AREA\n         MVC   DXD_NUMBER,=C'00000000'        INITIALIZE\n         LA    R1,SPF_ZCMD                    COMMAND\n         LA    R2,DXD_COMMAND                 WORK AREA ADDRESS\n         LA    R3,L'SPF_ZCMD                  MAX LENGTH\nMAIN0110 DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BNE   MAIN0120                       NO\n         LA    R1,1(,R1)                      NEXT\n         BCT   R3,MAIN0110                    KEEP LOOKING\n         B     MAIN0200                       SHOULD NOT HAPPEN\nMAIN0120 DS    0H\n         CH    R3,H8                          MORE THAN 8 LEFT?\n         BNH   MAIN0130                       NO\n         LH    R3,H8                          LIMIT TO 8 CHARACTERS\nMAIN0130 DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BE    MAIN0150                       YES\n         MVC   0(1,R2),0(R1)                  COPY TO WORK AREA\n         MVC   DXD_NUMBER(7),DXD_NUMBER+1     SHIFT LEFT 1 DIGIT\n         MVC   DXD_NUMBER+7(1),0(R1)          COPY TO WORK AREA\n         CLI   0(R1),C'0'                     DIGIT?\n         BNL   MAIN0140\n         OI    DXD_FLAGS,$NOT_NUMERIC         NOT NUMERIC\nMAIN0140 DS    0H\n         LA    R1,1(,R1)                      NEXT IN COMMAND\n         LA    R2,1(,R2)                      NEXT IN WORK AREA\n         BCT   R3,MAIN0120                    KEEP LOOKING\nMAIN0150 DS    0H\n         ITRACE ID=COMMAND,                                            +\n               DATA1=DXD_COMMAND,                                      +\n               DATA2=DXD_NUMBER\n         TM    DXD_FLAGS,$NOT_NUMERIC         NON-NUMERIC?\n         BO    MAIN0160                       YES\n         PACK  COMM_DWORD,DXD_NUMBER          PACK NUMERIC\n         CVB   R5,COMM_DWORD                  CONVERT TO DECIMAL\n         ITRACE ID=NUMERIC,                                            +\n               RDATA1=R5\n         CH    R5,MAX_FIELD                   TOO HIGH?\n         BH    ERR0010                        YES\n         BCTR  R5,0\n         MH    R5,=Y(FIELD_DSECT_L)           DISP TO FIELD\n         A     R5,TABLE_TOP                   PLUS BASE\n         B     MAIN0300\nMAIN0160 DS    0H\n         L     R5,TABLE_TOP                   FIRST FIELD\nMAIN0170 DS    0H\n         CLC   FIELD_LABEL,DXD_COMMAND        FIELD LOCATED?\n         BE    MAIN0300                       YES\n         C     R5,TABLE_BOTTOM                AT LAST FIELD?\n         BE    ERR0020                        YES\n         LA    R5,FIELD_DSECT_L(,R5)          NEXT FIELD\n         B     MAIN0170                       LOOP\n* ------------------------------------------------------------------- *\n*        Check for line selection                                     *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         L     R6,SPF_VDEPTH                  NBR OF LINES AVAILABLE\n         L     R7,DXD_VDATA_ADDR              VDATA BUFFER ADDRESS\n         USING MSG01,R7\n         L     R5,DXD_FIRST_DISPLAYED         FIRST FIELD DISPLAYED\nMAIN0210 DS    0H\n         CLI   MSG01_SELECT,C' '              BLANK?\n         BNE   MAIN0300                       NO\n         A     R7,SPF_VWIDTH                  NEXT LINE\n         LA    R5,FIELD_DSECT_L(,R5)          NEXT FIELD\n         CLI   0(R5),X'FF'                    END OF TABLE?\n         BE    MAIN0400                       YES\n         BCT   R6,MAIN0210\n         B     MAIN0400                       NOTHING SELECTED\n         DROP  R7\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        A FIELD has been selected.                                   *\n*        FIELD adderss is in R5.                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=SELECTED,                                           +\n               DATA1=FIELD_LABEL,                                      +\n               RDATA2=R5\n         TM    DXD_FLAGS,$NOT_AUTH            ALREADY KNOW?\n         BO    ERR0040                        YES\n         ST    R5,COMM_SELECTED_FIELD         FIELD SELECTED\n         ITRACE ID=FIELD,                                              +\n               DATA1=FIELD_LABEL,                                      +\n               RDATA2=R5\n         TM    DXD_FLAGS,$AUTH_VERIFIED       AUTHORIZATION VERIFIED?\n         BO    MAIN0310                       YES\n         ITRACE ID=UPDTAUTH\n         OI    DXD_FLAGS,$AUTH_VERIFIED       SET FLAG\n         MVI   COMM_VTOCZAP_FUNCTION,$VTOCZAP_UPDATE_FMT1\n         L     R15,COMM_V_VZAPAUTH            VZAPAUTH ENTRY POINT\n         BALR  R14,R15                        CALL VZAPAUTH\n         ITRACE ID=AUTH_RC,                                            +\n               RDATA1=R15\n         LTR   R15,R15                        USER AUTHORIZED?\n         BZ    MAIN0310                       YES\n         OI    DXD_FLAGS,$NOT_AUTH            USER NOT AUTHORIZED\n         B     MAIN0070\nMAIN0310 DS    0H\n         MVC   SPF_ZCMD,COMM_BLANKS           RESET COMMAND\n         MVC   SPF_LABEL,FIELD_LABEL          COPY LABEL\n         MVC   SPF_DESC,FIELD_DESC            COPY DESCRIPTION\n         ICM   R15,15,FIELD_EDITOR            EXIT ENTRY POINT\n         ITRACE ID=CALLEDIT,                                           +\n               DATA1=FIELD_LABEL,                                      +\n               DATA2=(FIELD_EDITOR,4)\n         BALR  R14,R15                        CALL EDITOR\n         XC    COMM_SELECTED_FIELD,COMM_SELECTED_FIELD\n         XC    COMM_BIT_TABLE,COMM_BIT_TABLE  RESET BIT TABLE ADDR\n         B     MAIN0010                       REBUILD AND DISPLAY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0400 DS    0H\n         ITRACE ID=SCROLL,                                             +\n               DATA1=(SPF_ZVERB,1),                                    +\n               DATA2=(SPF_ZSCROLLA,1)\n         CLI   SPF_ZVERB,C'B'                 BOTTOM?\n         BE    MAIN0410                       YES\n         CLI   SPF_ZVERB,C'D'                 DOWN?\n         BE    MAIN0420                       YES\n         CLI   SPF_ZVERB,C'T'                 TOP?\n         BE    MAIN0470                       YES\n         CLI   SPF_ZVERB,C'U'                 UP?\n         BE    MAIN0440                       YES\n         B     MAIN0070                       RE-DISPLAY\nMAIN0410 DS    0H\n         ITRACE ID=BOTTOM\n         MVC   DXD_FIRST_DISPLAYED,TABLE_BOTTOM\n         B     MAIN0010\nMAIN0420 DS    0H\n         ITRACE ID=DOWN,                                               +\n               DATA1=(SPF_ZSCROLLA,1),                                 +\n               DATA2=(SPF_ZSCROLLN,4)\n         CLI   SPF_ZSCROLLA,C'M'              MAX?\n         BE    MAIN0410                       YES\n         L     R5,DXD_FIRST_DISPLAYED         FIRST ON DISPLAY\n         L     R1,SPF_ZSCROLLN                NBR TO SCROLL\nMAIN0430 DS    0H\n         ST    R5,DXD_FIRST_DISPLAYED\n         C     R5,TABLE_BOTTOM                AT BOTTOM?\n         LA    R5,FIELD_DSECT_L(,R5)          NEXT FIELD\n         BE    MAIN0010                       YES\n         BCT   R1,MAIN0430                    LOOP\n         B     MAIN0010                       BUILD DISPLAY\nMAIN0440 DS    0H\n         ITRACE ID=UP,                                                 +\n               DATA1=(SPF_ZSCROLLA,1),                                 +\n               DATA2=(SPF_ZSCROLLN,4)\n         CLI   SPF_ZSCROLLA,C'M'              MAX?\n         BE    MAIN0470\nMAIN0450 DS    0H\n         L     R1,SPF_ZSCROLLN                NBR TO SCROLL\nMAIN0460 DS    0H\n         ST    R5,DXD_FIRST_DISPLAYED\n         C     R5,TABLE_TOP                   AT TOP OF TABLE?\n         BE    MAIN0010                       YES\n         SH    R5,=Y(FIELD_DSECT_L)           UP 1 FIELD\n         BCT   R1,MAIN0460                    LOOP\n         B     MAIN0010                       BUILD DISPLAY\nMAIN0470 DS    0H\n         ITRACE ID=TOP\n         MVC   DXD_FIRST_DISPLAYED,TABLE_TOP\n         B     MAIN0010                       BUILD DISPLAY\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        R14 is used as a linkage register.                           *\n*        Do not use ITRACE                                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USING MSG01,R7\nMAIN0500 DS    0H\n         MVC   MSG01_DESC(L'DS1DSNAM),DS1DSNAM\n         BR    R14\nMAIN0510 DS    0H\n         MVC   MSG01_DESC(L'DS1DSSN),DS1DSSN\n         BR    R14\nMAIN0520 DS    0H\n         SR    R0,R0\n         ICM   R0,3,DS1VOLSQ\n         CVD   R0,COMM_DWORD\n         MVC   DXD_EDITWORD,EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3\n         MVC   MSG01_DESC(5),DXD_EDITWORD+5\n         BR    R14\nMAIN0530 DS    0H\n         SR    R0,R0\n         IC    R0,DS1CREDT\n         CVD   R0,COMM_DWORD\n         MVC   DXD_EDITWORD,EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3\n         MVC   MSG01_DESC+0(2),DXD_EDITWORD+8\n         MVI   MSG01_DESC+2,C'.'\n         ICM   R0,3,DS1CREDT+1\n         CVD   R0,COMM_DWORD\n         MVC   DXD_EDITWORD,EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3\n         MVC   MSG01_DESC+3(3),DXD_EDITWORD+7\n         BR    R14\nMAIN0540 DS    0H\n         SR    R0,R0\n         IC    R0,DS1EXPDT+0\n         CVD   R0,COMM_DWORD\n         MVC   DXD_EDITWORD,EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3\n         MVC   MSG01_DESC+0(2),DXD_EDITWORD+8\n         MVI   MSG01_DESC+2,C'.'\n         ICM   R0,3,DS1EXPDT+1\n         CVD   R0,COMM_DWORD\n         MVC   DXD_EDITWORD,EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3\n         MVC   MSG01_DESC+3(3),DXD_EDITWORD+7\n         BR    R14\nMAIN0550 DS    0H\n         SR    R0,R0\n         IC    R0,DS1NOEPV\n         CVD   R0,COMM_DWORD\n         MVC   DXD_EDITWORD,EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3\n         MVC   MSG01_DESC(3),DXD_EDITWORD+7\n         BR    R14\nMAIN0560 DS    0H\n         SR    R0,R0\n         IC    R0,DS1NOBDB\n         CVD   R0,COMM_DWORD\n         MVC   DXD_EDITWORD,EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3\n         MVC   MSG01_DESC(3),DXD_EDITWORD+7\n         BR    R14\nMAIN0570 DS    0H\n         UNPK  COMM_DWORD(3),DS1FLAG1(2)\n         TR    COMM_DWORD(2),COMM_HEXCHAR\n         MVC   MSG01_DESC(2),COMM_DWORD\n         BR    R14\nMAIN0580 DS    0H\n         MVC   MSG01_DESC(L'DS1SYSCD),DS1SYSCD\n         BR    R14\nMAIN0590 DS    0H\n         SR    R0,R0\n         IC    R0,DS1REFD+0\n         CVD   R0,COMM_DWORD\n         MVC   DXD_EDITWORD,EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3\n         MVC   MSG01_DESC+0(2),DXD_EDITWORD+8\n         MVI   MSG01_DESC+2,C'.'\n         ICM   R0,3,DS1REFD+1\n         CVD   R0,COMM_DWORD\n         MVC   DXD_EDITWORD,EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3\n         MVC   MSG01_DESC+3(3),DXD_EDITWORD+7\n         BR    R14\nMAIN0600 DS    0H\n         UNPK  COMM_DWORD(3),DS1SMSFG(2)\n         TR    COMM_DWORD(2),COMM_HEXCHAR\n         MVC   MSG01_DESC(2),COMM_DWORD\n         BR    R14\nMAIN0610 DS    0H\n         UNPK  COMM_DWORD(3),DS1SCXTF(2)\n         TR    COMM_DWORD(2),COMM_HEXCHAR\n         MVC   MSG01_DESC(2),COMM_DWORD\n         BR    R14\nMAIN0620 DS    0H\n         SR    R0,R0\n         ICM   R0,3,DS1SCXTV\n         CVD   R0,COMM_DWORD\n         MVC   DXD_EDITWORD,EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3\n         MVC   MSG01_DESC(5),DXD_EDITWORD+5\n         BR    R14\nMAIN0630 DS    0H\n         UNPK  COMM_DWORD(5),DS1DSORG(3)\n         TR    COMM_DWORD(4),COMM_HEXCHAR\n         MVC   MSG01_DESC(4),COMM_DWORD\n         BR    R14\nMAIN0640 DS    0H\n         UNPK  COMM_DWORD(3),DS1RECFM(2)\n         TR    COMM_DWORD(2),COMM_HEXCHAR\n         MVC   MSG01_DESC(2),COMM_DWORD\n         BR    R14\nMAIN0650 DS    0H\n         UNPK  COMM_DWORD(3),DS1OPTCD(2)\n         TR    COMM_DWORD(2),COMM_HEXCHAR\n         MVC   MSG01_DESC(2),COMM_DWORD\n         BR    R14\nMAIN0660 DS    0H\n         SR    R0,R0\n         ICM   R0,3,DS1BLKL\n         CVD   R0,COMM_DWORD\n         MVC   DXD_EDITWORD,EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3\n         MVC   MSG01_DESC(5),DXD_EDITWORD+5\n         BR    R14\nMAIN0670 DS    0H\n         SR    R0,R0\n         ICM   R0,3,DS1LRECL\n         CVD   R0,COMM_DWORD\n         MVC   DXD_EDITWORD,EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3\n         MVC   MSG01_DESC(5),DXD_EDITWORD+5\n         BR    R14\nMAIN0680 DS    0H\n         SR    R0,R0\n         IC    R0,DS1KEYL\n         CVD   R0,COMM_DWORD\n         MVC   DXD_EDITWORD,EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3\n         MVC   MSG01_DESC(3),DXD_EDITWORD+7\n         BR    R14\nMAIN0690 DS    0H\n         SR    R0,R0\n         ICM   R0,3,DS1RKP\n         CVD   R0,COMM_DWORD\n         MVC   DXD_EDITWORD,EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3\n         MVC   MSG01_DESC(5),DXD_EDITWORD+5\n         BR    R14\nMAIN0700 DS    0H\n         UNPK  COMM_DWORD(3),DS1DSIND(2)\n         TR    COMM_DWORD(2),COMM_HEXCHAR\n         MVC   MSG01_DESC(2),COMM_DWORD\n         BR    R14\nMAIN0710 DS    0H\n         UNPK  COMM_DWORD(3),DS1SCAL1(2)\n         TR    COMM_DWORD(2),COMM_HEXCHAR\n         MVC   MSG01_DESC(2),COMM_DWORD\n         BR    R14\nMAIN0720 DS    0H\n         SR    R0,R0\n         ICM   R0,7,DS1SCAL3\n         CVD   R0,COMM_DWORD\n         MVC   DXD_EDITWORD,EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3\n         MVC   MSG01_DESC(8),DXD_EDITWORD+2\n         BR    R14\nMAIN0730 DS    0H\n         LA    R1,DS1EXT1                     EXTENT 1\n         BAL   R15,MAIN0760                   FORMAT EXTENT\n         BR    R14\nMAIN0740 DS    0H\n         LA    R1,DS1EXT2                     EXTENT 2\n         BAL   R15,MAIN0760                   FORMAT EXTENT\n         BR    R14\nMAIN0750 DS    0H\n         LA    R1,DS1EXT3                     EXTENT 3\n         BAL   R15,MAIN0760                   FORMAT EXTENT\n         BR    R14\nMAIN0760 DS    0H\n         SR    R0,R0\n         ICM   R0,3,2(R1)                     'FROM' CYLINDER\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          COPY EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3      EDIT CYLINDER\n         MVC   DXD_CYLINDER,DXD_EDITWORD+5    COPY CYLINDER\n         MVI   DXD_HYPHEN1,C'-'               INSERT HYPHEN\n         ICM   R0,3,4(R1)                     'FROM' HEAD\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          COPY EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3      EDIT HEAD NUMBER\n         MVC   DXD_HEAD,DXD_EDITWORD+5        COPY HEAD NUMBER\n         MVC   MSG01_DESC+00(11),DXD_CYLINDER COPY TO DYNAMIC AREA\n         ICM   R0,3,6(R1)                     'TO' CYLINDER\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          COPY EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3      EDIT CYLINDER\n         MVC   DXD_CYLINDER,DXD_EDITWORD+5    COPY CYLINDER\n         MVI   DXD_HYPHEN1,C'-'               INSERT HYPHEN\n         ICM   R0,3,8(R1)                     'TO' HEAD\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          COPY EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3      EDIT HEAD NUMBER\n         MVC   DXD_HEAD,DXD_EDITWORD+5        COPY HEAD NUMBER\n         MVC   MSG01_DESC+15(11),DXD_CYLINDER COPY TO DYNAMIC AREA\n         BR    R14\nMAIN0780 DS    0H\n         SR    R0,R0\n         ICM   R0,3,DS1PTRDS+0                CYLINDER\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          COPY EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3      EDIT CYLINDER\n         MVC   DXD_CYLINDER,DXD_EDITWORD+5    COPY CYLINDER\n         MVI   DXD_HYPHEN1,C'-'               INSERT HYPHEN\n         ICM   R0,3,DS1PTRDS+2                HEAD\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          COPY EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3      EDIT HEAD NUMBER\n         MVC   DXD_HEAD,DXD_EDITWORD+5        COPY HEAD NUMBER\n         MVI   DXD_HYPHEN2,C'-'               INSERT HYPHEN\n         SR    R0,R0\n         IC    R0,4(R1)\n         IC    R0,DS1PTRDS+4                  RECORD\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          COPY EDITWORD\n         ED    DXD_EDITWORD,COMM_DWORD+3      EDIT RECORD NUMBER\n         MVC   DXD_RECORD,DXD_EDITWORD+7      COPY RECORD\n         MVC   MSG01_DESC(15),DXD_CYLINDER    COPY TO DYNAMIC AREA\n         BR    R14\n         DROP  R7\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0800 DS    0H\n         ITRACE ID=SWITCH,                                             +\n               DATA1=(DXD_FLAGS,1)\n         MVC   SPF_ZCMD,COMM_BLANKS           RESET COMMAND\n         XI    DXD_FLAGS,$SHOW_DESC           SWITCH SCREENS\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVC   SPF_MSG_1(EMSG01_L),EMSG01\n         B     MAIN0070\nERR0020  DS    0H\n         MVC   SPF_MSG_1(EMSG02_L),EMSG02\n         B     MAIN0070\nERR0030  DS    0H\n         ITRACE ID=NOT_AUTH\n         MVI   DXD_RC,12\n         B     EXIT0000\nERR0040  DS    0H\n         MVC   SPF_MSG_1(EMSG03_L),EMSG03\n         B     MAIN0070\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ICM   R1,15,DXD_VDATA_ADDR           VDATA GETMAINED?\n         BZ    EXIT0010                       NO\n         L     R0,DXD_VDATA_LENGTH            VDATA LENGTH\n         FREEMAIN RU,                         FREEMAIN VDATA           +\n               A=(1),                                                  +\n               LV=(0)\nEXIT0010 DS    0H\n         SR    R15,R15\n         IC    R15,DXD_RC                     GET RETURN CODE\n         ITRACE ID=EXIT,                                               +\n               RDATA1=R15\n         L     R13,4(,R13)                    RESTORE R13\n         L     R14,12(,R13)                   RESTORE R14\n         LM    R0,R12,20(R13)                 RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDFLDS)\n              LTORG\n\nTABLE_TOP     DC    A(FIRST_FIELD)\nTABLE_BOTTOM  DC    A(LAST_FIELD)\nMAX_FIELD     DC    Y((LAST_FIELD-FIRST_FIELD)/(SECOND_FIELD-FIRST_FIEL+\n               D)+1)\nH8            DC    H'8'\n\nFIELDS_PANEL  DC    C'VZAPFMT1'\n\nEDITWORD      DC    X'F0202020202020202120'\n\nEMSG01        DS    0C\n              DC    C'VZAPFMT101E Invalid field number'\nEMSG01_L      EQU   *-EMSG01\n\nEMSG02        DS    0C\n              DC    C'VZAPFMT102E Invalid field name'\nEMSG02_L      EQU   *-EMSG02\n\nEMSG03        DS    0C\n              DC    C'VZAPFMT103E You are not authorized'\nEMSG03_L      EQU   *-EMSG03\n\nMSG01         DS    0C\n              DC    AL1($SCREEN_ATTR_INPUT)\nMSG01_SELECT  DC    C' '\n              DC    AL1($SCREEN_ATTR_HIGH_TURQUOISE)\nMSG01_NBR     DC    CL4' '\n              DC    C' '\nMSG01_LABEL   DC    CL8' '\n              DC    AL1($SCREEN_ATTR_HIGH_GREEN)\nMSG01_DESC    DC    CL50' '\nMSG01_L       EQU   *-MSG01\n\nFIRST_FIELD   FIELD DS1DSNAM,                                          +\n               MAIN0500,                                               +\n               VZAPDSNM,                                               +\n               'Data set name'\n\nSECOND_FIELD  FIELD DS1DSSN,                                           +\n               MAIN0510,                                               +\n               VZAPDSSN,                                               +\n               'Data set VOLSER'\n\n              FIELD DS1VOLSQ,                                          +\n               MAIN0520,                                               +\n               VZAPNBR2,                                               +\n               'Volume sequence number'\n\n              FIELD DS1CREDT,                                          +\n               MAIN0530,                                               +\n               VZAPDATE,                                               +\n               'Creation date'\n\n              FIELD DS1EXPDT,                                          +\n               MAIN0540,                                               +\n               VZAPDATE,                                               +\n               'Expiration date'\n\n              FIELD DS1NOEPV,                                          +\n               MAIN0550,                                               +\n               VZAPNBR1,                                               +\n               'Number of extents on volume'\n\n              FIELD DS1NOBDB,                                          +\n               MAIN0560,                                               +\n               VZAPNBR1,                                               +\n               'Bytes used in last directory block'\n\n              FIELD DS1FLAG1,                                          +\n               MAIN0570,                                               +\n               VZAPFLG1,                                               +\n               'Flag 1'\n\n              FIELD DS1SYSCD,                                          +\n               MAIN0580,                                               +\n               VZAPSCDE,                                               +\n               'System code'\n\n              FIELD DS1REFD,                                           +\n               MAIN0590,                                               +\n               VZAPDATE,                                               +\n               'Reference date'\n\n              FIELD DS1SMSFG,                                          +\n               MAIN0600,                                               +\n               VZAPSMS,                                                +\n               'SMS flags'\n\n              FIELD DS1SCXTF,                                          +\n               MAIN0610,                                               +\n               VZAPCXTF,                                               +\n               'Secondary space extension flags'\n\n              FIELD DS1SCXTV,                                          +\n               MAIN0620,                                               +\n               VZAPNBR2,                                               +\n               'Secondary space extension value'\n\n              FIELD DS1DSORG,                                          +\n               MAIN0630,                                               +\n               VZAPORG,                                                +\n               'DSORG'\n\n              FIELD DS1RECFM,                                          +\n               MAIN0640,                                               +\n               VZAPRECF,                                               +\n               'Record format (RECFM)'\n\n              FIELD DS1OPTCD,                                          +\n               MAIN0650,                                               +\n               VZAPOPT,                                                +\n               'Option codes'\n\n              FIELD DS1BLKL,                                           +\n               MAIN0660,                                               +\n               VZAPNBR2,                                               +\n               'Block size'\n\n              FIELD DS1LRECL,                                          +\n               MAIN0670,                                               +\n               VZAPNBR2,                                               +\n               'Record length'\n\n              FIELD DS1KEYL,                                           +\n               MAIN0680,                                               +\n               VZAPNBR1,                                               +\n               'Key length'\n\n              FIELD DS1RKP,                                            +\n               MAIN0690,                                               +\n               VZAPNBR2,                                               +\n               'Key position (RKP)'\n\n              FIELD DS1DSIND,                                          +\n               MAIN0700,                                               +\n               VZAPIND,                                                +\n               'Data set indicators'\n\n              FIELD DS1SCAL1,                                          +\n               MAIN0710,                                               +\n               VZAPCAL1,                                               +\n               'Secondary allocation parms'\n\n              FIELD DS1SCAL3,                                          +\n               MAIN0720,                                               +\n               VZAPNBR3,                                               +\n               'Secondary space quantity'\n\n              FIELD DS1EXT1,                                           +\n               MAIN0730,                                               +\n               VZAPXTNT,                                               +\n               'EXTENT 1'\n\n              FIELD DS1EXT2,                                           +\n               MAIN0740,                                               +\n               VZAPXTNT,                                               +\n               'EXTENT 2'\n\n              FIELD DS1EXT3,                                           +\n               MAIN0750,                                               +\n               VZAPXTNT,                                               +\n               'EXTENT 3'\n\nLAST_FIELD    FIELD DS1PTRDS,                                          +\n               MAIN0780,                                               +\n               VZAPVPTR,                                               +\n               'Format 3, 8, or 9 address'\n\n              DC    X'FF'\nFLDSEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDFLDS              DSECT\n                     COPY DXDPREF\nDXD_VDATA_ADDR       DS   A\nDXD_VDATA_LENGTH     DS   F\nDXD_VDATA_CURSOR     DS   A\nDXD_FIRST_DISPLAYED  DS   A\n\nDXD_RC               DS   X\n\nDXD_FLAGS            DS   X\n$NOT_NUMERIC         EQU  X'80'\n$SHOW_DESC           EQU  X'40'\n$AUTH_VERIFIED       EQU  X'20'\n$NOT_AUTH            EQU  X'10'\n\nDXD_COMMAND          DS   CL8\nDXD_NUMBER           DS   CL8\nDXD_EDITWORD         DS   CL10\n\nDXD_CYLINDER         DS   CL5\nDXD_HYPHEN1          DS   C\nDXD_HEAD             DS   CL5\nDXD_HYPHEN2          DS   C\nDXD_RECORD           DS   CL3\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VZAPFLD\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VTOCDATA\n         ORG      VTOC_DSCB\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     ATTRS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPFMT1\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPIND": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00)\\x01\\x10\\x03\\x9f\\x01\\x10\\x03\\x9f\\t6\\x00k\\x00k\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-08T00:00:00", "modifydate": "2010-02-08T09:36:29", "lines": 107, "newlines": 107, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPIND                                               *\n*                                                                     *\n*   Display/update Data set indicators (DS1DSIND)                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPIND  CSECT\nVZAPIND  AMODE 31\nVZAPIND  RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPIND,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPIND'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPIND)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPIND,R10                    DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDIND,R13                     DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         LA    R0,BIT_TABLE                   BIT TABLE\n         ST    R0,COMM_BIT_TABLE              SET ADDRESS\n         L     R15,COMM_V_VZAPBIT1            VZAPBIT1 ENTRY POINT\n         BALR  R14,R15                        LINK TO VZAPBIT1\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDIND)\n              LTORG\n\n\nBIT_TABLE     DS    0C\n              DC    AL1(DS1IND80)\n              DC    CL15'DS1IND80'\n              DC    CL50'Last volume containing this data set'\n\n              DC    AL1(DS1RACDF)\n              DC    CL15'DS1RACDF'\n              DC    CL50'Data set is RACF defined'\n\n              DC    AL1(DS1IND20)\n              DC    CL15'DS1IND20'\n              DC    CL50'Block length is a multiple of 8'\n\n              DC    AL1(DS1SECTY)\n              DC    CL15'DS1SECTY'\n              DC    CL50'Data set has a password'\n\n              DC    AL1(DS1IND08)\n              DC    CL15'DS1IND08'\n              DC    CL50'Data updated since RECALL'\n\n              DC    AL1(DS1WRSEC)\n              DC    CL15'DS1WRSEC'\n              DC    CL50'Password required to WRITE'\n\n              DC    AL1(DS1DSCHA)\n              DC    CL15'DS1DSCHA'\n              DC    CL50'Opened for update since last backup'\n\n              DC    AL1(DS1CHKPT)\n              DC    CL15'DS1CHKPT'\n              DC    CL50'Secure checkpoint data set'\n\n              DC    X'FF'\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDIND        DSECT\n              COPY  DXDPREF\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFORMAT_1 DSECT\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPIND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPMAIN": {"ttr": 4609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x006\\x01\\x10\\x04\\x8f\\x01\\x10\\x05?\\x14\\x14\\x01\\x88\\x01g\\x01\\x88\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2010-02-17T00:00:00", "modifydate": "2010-02-22T14:14:36", "lines": 392, "newlines": 359, "modlines": 392, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPMAIN CSECT\nVZAPMAIN AMODE 31\nVZAPMAIN RMODE ANY\n         USING VZAPMAIN,R15                     DEFINE BASE\n         B     INIT0000                         BRANCH\nMODID    DC    CL8'VZAPMAIN'                    MODULE NAME\n         DC    CL8'&SYSDATE'                    DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'                    TIME OF ASSEMBLY\n         DC    A(VZAPMAINEND-VZAPMAIN)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                  SAVE ENTRY REGISTERS\n         LR    R10,R15                          COPY BASE\n         DROP  R15\n         USING VZAPMAIN,R10                     DEFINE PROGRAM BASE\n         SR    R12,R12                          COMMON AREA NOT LOADED\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LTR   R8,R1                            COPY PARM ADDRESS\n* ------------------------------------------------------------------- *\n*        Acquire storage for work areas                               *\n* ------------------------------------------------------------------- *\nINIT0010 DS    0H\n         L     R3,DXDSIZE                       WORK AREA SIZE\n         GETMAIN RU,                            GETMAIN WORK AREA      +\n               LV=(R3),                                                +\n               LOC=ANY\n         LR    R4,R1                            COPY STORAGE ADDRESS\n         LR    R5,R1                            COPY STORAGE ADDRESS\n         LR    R2,R1                            COPY WORK AREA ADDRESS\n         SR    R1,R1                            CLEAR REGISTER\n         MVCL  R2,R0                            CLEAR WORK AREA\n         A     R5,DXDSTART                      PLUS DISPLACEMENT\n         ST    R13,4(,R5)                       CHAINn AREA TO OURS\n         ST    R5,8(,R13)                       chain AREA TO CALLER'S\n         LR    R13,R5                           SET SAVE AREA ADDRESS\n         USING DXDMAIN,R13                      DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID                  IDENTIFY AREA OWNER\n* ------------------------------------------------------------------- *\n*        LOAD COMMON DATA MODULE                                      *\n* ------------------------------------------------------------------- *\n         LOAD  EP=VZAPCOMM                      LOAD COMMON DATA MODULE\n         LR    R12,R0                           COPY TO PERMANENT BASE\n         LA    R12,0(R12)                       TURN OFF AMODE BIT(S)\n         USING VZAPCOMM,R12                     DEFINE COMMON AREA BASE\n         ST    R5,COMM_DXD                      SAVE WORK AREA BASE\n         MVC   COMM_DXD_LENGTH,DXDSIZE\n         ST    R8,COMM_COMMAND_ADDRESS          INVOKING COMMAND ADDR\n* ------------------------------------------------------------------- *\n*        Initialize addresses of statically linked modules            *\n* ------------------------------------------------------------------- *\n         LA    R0,VCONI                         V CONSTANTS\n         LA    R1,VCONL                         V CONSTANTS LENGTH\n         LA    R14,COMM_VCONS                   AREA IN VZAPCOMM\n         LR    R15,R1                           COPY LENGTH\n         MVCL  R14,R0                           COPY V CONSTANTS\n* ------------------------------------------------------------------- *\n*        ACQUIRE STORAGE FOR TRACE TABLE                              *\n* ------------------------------------------------------------------- *\n         L     R3,TRACE_TABLE_SIZE              TRACE TABLE SIZE\n         GETMAIN RU,                            GETMAIN TRACE TABLE    +\n               LV=(R3),                                                +\n               LOC=ANY\n         ST    R1,COMM_TRACE                    SAVE ADDRESS\n         SR    R0,R0                            ASSUME ON BOUNDARY\n         TM    COMM_TRACE,X'07'                 ALREADY ON BOUNDARY?\n         BNO   INIT0020                         YES\n         SRL   R1,5                             SHIFT OUT LOW BITS ..\n         SLL   R1,5                             .. TO ROUND\n         LA    R1,32(,R1)                       PLUS 32\n         LA    R0,TR_ENTRY_L                    1 LESS\nINIT0020 DS    0H\n         ST    R1,COMM_TRACE_1ST                FIRST TRACE ENTRY\n         ST    R1,COMM_TRACE_CURR               CURRENT TRACE ENTRY\n         A     R1,TRACE_TABLE_SIZE              LAST ENTRY IN TABLE\n         SH    R1,=Y(TR_ENTRY_L)                MINUS 1 ENTRY\n         SR    R1,R0                            MINUS BOUNDARY\n         ST    R1,COMM_TRACE_LAST               LAST TRACE ENTRY\n         ITRACE ID=VZAPCOMM,                                           +\n               RDATA1=R12,                      .. COMMON AREA         +\n               DATA2=(COMM_DXD,4)               .. DXD AREA ADDRESS\n* ------------------------------------------------------------------- *\n*        LOAD SPF interface                                           *\n* ------------------------------------------------------------------- *\n         LOAD  EP=ISPLINK                       LOAD ISPLINK\n         ST    R0,COMM_ISPLINK                  SAVE ISPLINK ADDRESS\n         ITRACE ID=ISPLINK,                                            +\n               RDATA1=R0\n* ------------------------------------------------------------------- *\n*        LOAD SPF variable definitions                                *\n* ------------------------------------------------------------------- *\n         LOAD  EP=VZAPSPFV                      LOAD VZAPSPFV\n         ST    R0,COMM_VZAPSPFV                 SAVE VZAPSPFV ADDRESS\n         ITRACE ID=VZAPSPFV,                                           +\n               RDATA1=R0\n         NI    COMM_VZAPSPFV,X'7F'              TURN OFF AMODE BIT\n* ------------------------------------------------------------------- *\n*        LOAD SPF data                                                *\n* ------------------------------------------------------------------- *\n         LOAD  EP=VZAPSPFD                      LOAD VZAPSPFD\n         LR    R9,R0                            COPY TO R9\n         LA    R9,0(,R9)                        CLEAR AMODE BIT\n         ST    R9,COMM_VZAPSPFD                 SAVE VZAPSPFD ADDRESS\n         USING VZAPSPFD,R9\n         ITRACE ID=VZAPSPFD,                                           +\n               RDATA1=R9\n* ------------------------------------------------------------------- *\n*        VDEFINE SPF variables                                        *\n* ------------------------------------------------------------------- *\n         MVI   COMM_VAR_COMMAND,$VAR_DEFINE     SET COMMAND\n         MVC   COMM_VARIABLE,ALL                ALL VARIABLES\n         L     R15,COMM_V_VZAPVMGR\n         BALR  R14,R15                          DEFINE VARIABLES\n* ------------------------------------------------------------------- *\n*        Determine invoking command's address and length              *\n* ------------------------------------------------------------------- *\n         LTR   R8,R8                            PARM PRESENT?\n         BZ    INIT0050                         NO.. PROMPT\n         ITRACE ID=CMD_ADDR,                                           +\n               RDATA1=R8,                                              +\n               DATA2=(0(R8),4)\n         ICM   R14,15,0(R8)                     PARM PRESENT?\n         BZ    INIT0050                         NO.. PROMPT\n         LH    R15,0(R14)                       COMMAND'S LENGTH\n         SH    R15,H4                           MINUS LENGTH LENGTH\n         ST    R15,COMM_COMMAND_LENGTH          SAVE COMMAND LENGTH\n         LA    R15,4(,R14)                      SKIP LENGTH\n         ST    R15,COMM_COMMAND_ADDRESS         SET COMMAND ADDR\n         L     R15,COMM_V_VZAPPARS              PARSE ENTRY POINT\n         ITRACE ID=PARSE\n         BALR  R14,R15                          PARSE COMMAND\n         ITRACE ID=OPERS,                                              +\n               DATA1=(COMM_OPERANDS_NBR,2),                            +\n               DATA2=(COMM_OPERAND02,7)\n         CLC   COMM_OPERANDS_NBR,H2             CORRECT NBR OF PARMS?\n         BNE   INIT0050                         NO.. PROMPT USER\n         CLC   COMM_OPERAND02_LENGTH,H6         CORRECT LENGTH?\n         BNE   INIT0050                         NO.. PROMPT USER\n         ICM   R1,15,COMM_OPERAND02_ADDRESS     VOLSER'S ADDRESS\n         MVC   COMM_VOLSER,0(R1)                COPY VOLSER\n         ITRACE ID=VOLSER,                                             +\n               DATA1=(COMM_VOLSER,6)\n         B     INIT0100\n* ------------------------------------------------------------------- *\n*        No VOLSER given on invoking command.  Prompt user.           *\n* ------------------------------------------------------------------- *\nINIT0050 DS    0H\n         ITRACE ID=PROMPT                       PROMPTING FOR VOLSER\n         XC    COMM_VDATA_ADDR,COMM_VDATA_ADDR  NO VDATA IN USE\n         MVC   COMM_PANEL,PANEL_VZAP001         SET PANEL NAME\n         L     R15,COMM_V_VZAPDISP              VZAPDISP ENTRY POINT\n         BALR  R14,R15                          PROMPT USER\n         ITRACE ID=PROMP_RC,                                           +\n               DATA1=(COMM_DISP_RC,2)\n         OC    COMM_DISP_RC,COMM_DISP_RC        ZERO?\n         BNZ   EXIT0000                         NO\n         MVC   COMM_VOLSER,SPF_VOLSER           COPY VOLSER TO COMMON\n* ------------------------------------------------------------------- *\n*        Allocate the volume                                          *\n* ------------------------------------------------------------------- *\nINIT0100 DS    0H\n         MVI   COMM_DAIR_FUNC,$DAIR_ALLOC       ALLOCATION FUNCTION\n         MVC   SPF_VOLSER,COMM_VOLSER           COPY VOLSER FOR SPF\n         ITRACE ID=ALLOC,                                              +\n               DATA1=(COMM_VOLSER,6)\n         L     R15,COMM_V_VZAPDAIR              VZAPDAIR ENTRY POINT\n         BALR  R14,R15                          CALL VZAPDAIR\n         OC    COMM_DAIR_R15,COMM_DAIR_R15      SUCCESSFUL?\n         BNZ   ERR0010                          NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Read the VTOC                                                *\n*                                                                     *\n*        All records will be chained from COMM_VTOC_DATA              *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=READVTOC\n         LOAD  EP=VZAPREAD                      LOAD VZAPREAD\n         LR    R15,R0                           COPY ENTRY POINT\n         BALR  R14,R15                          CALL VZAPREAD\n         LR    R2,R15                           SAVE RC\n         ITRACE ID=READ_RC,                                            +\n               RDATA1=R15\n         DELETE EP=VZAPREAD                     DELETE VZAPREAD\n         LTR   R2,R2                            ERROR FROM VZAPREAD?\n         BNZ   ERR0020                          YES\n* ------------------------------------------------------------------- *\n*        Display the data                                             *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=DISPDSCB\n         L     R15,COMM_V_VZAPDSCB              VZAPDSCB ENTRY POINT\n         BALR  R14,R15                          LINK TO VZAPDSCB\n* ------------------------------------------------------------------- *\n*        REWRITE ANY UPDATED RECORDS                                  *\n* ------------------------------------------------------------------- *\n         ITRACE ID=LOADWRIT\n         LOAD  EP=VZAPWRIT                      LOAD VZAPWRIT\n         LR    R15,R0                           COPY ENTRY POINT\n         ITRACE ID=CALLWRIT,                                           +\n               RDATA1=R15\n         BALR  R14,R15                          CALL VZAPWRIT\n         ITRACE ID=WRIT_RC,                                            +\n               RDATA1=R15\n         ITRACE ID=DEL_WRIT\n         DELETE EP=VZAPWRIT                     DELETE VZAPWRIT\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=DAIRFAIL\n         MVC   SPF_MSG_1(MSG02_L),MSG02\n         UNPK  COMM_INFO_01(5),COMM_DAIR_R15(3)\n         TR    COMM_INFO_01(4),COMM_HEXCHAR\n         MVC   SPF_MSG_1+(MSG02_R15-MSG02)(L'MSG02_R15),COMM_INFO_01\n\n         MVC   SPF_MSG_2(MSG03_L),MSG03\n         UNPK  COMM_INFO_01(5),COMM_DAIR_ERROR(3)\n         TR    COMM_INFO_01(4),COMM_HEXCHAR\n         MVC   SPF_MSG_2+(MSG03_ERROR-MSG03)(L'MSG03_ERROR),COMM_INFO_0+\n               1\n\n         MVC   SPF_MSG_3(MSG04_L),MSG04\n         UNPK  COMM_INFO_01(5),COMM_DAIR_INFO(3)\n         TR    COMM_INFO_01(4),COMM_HEXCHAR\n         MVC   SPF_MSG_3+(MSG04_INFO-MSG04)(L'MSG04_INFO),COMM_INFO_01\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0020  DS    0H\n         GETMAIN RU,                            GETMAIN STORAGE        +\n               LV=L'SPF_MSG_1,                                         +\n               LOC=BELOW\n         LR    R2,R1                            COPY ADDRESS\n         LA    R3,SPF_MSG_1                     FIRST MESSAGE\n         LA    R4,5                             NBR OF MESSAGES\nERR0030  DS    0H\n         MVC   0(L'SPF_MSG_1,R2),0(R3)          COPY BELOW 24-BIT LINE\n         TPUT  (R2),L'SPF_MSG_1                 ISSUE TPUT\n         LA    R3,L'SPF_MSG_1(,R3)              NEXT MESSAGE\n         BCT   R4,ERR0030                       LOOP\n         FREEMAIN RU,                           FREEMAIN STORAGE       +\n               A=(R2),                                                 +\n               LV=L'SPF_MSG_1\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXITING\n* ------------------------------------------------------------------- *\n*        Free DD                                                      *\n* ------------------------------------------------------------------- *\nEXIT0010 DS    0H\n         TM    COMM_FLAGS,$COMM_VOLUME_ALLOCATED\n         BNO   EXIT0020                         NOT ALLOCATED\n         MVI   COMM_DAIR_FUNC,$DAIR_FREE        DAIR FUNCTION\n         ITRACE ID=FREE_DD\n         L     R15,COMM_V_VZAPDAIR              VZAPDAIR ENTRY POINT\n         BALR  R14,R15                          CALL VZAPDAIR\n* ------------------------------------------------------------------- *\n*        Delete SPF variables                                         *\n* ------------------------------------------------------------------- *\nEXIT0020 DS    0H\n         ICM   R1,15,COMM_ISPLINK\n         BZ    EXIT0030\n         OC    COMM_VZAPSPFD,COMM_VZAPSPFD\n         BZ    EXIT0030\n         ITRACE ID=DELVARS\n         MVI   COMM_VAR_COMMAND,$VAR_DELETE\n         L     R15,COMM_V_VZAPVMGR\n         BALR  R14,R15\n* ------------------------------------------------------------------- *\n*        DELETE LOADed modules                                        *\n* ------------------------------------------------------------------- *\n         ITRACE ID=DEL_SPFV\n         DELETE EP=VZAPSPFV\n         XC    COMM_VZAPSPFV,COMM_VZAPSPFV\n         ITRACE ID=DEL_SPFD\n         DELETE EP=VZAPSPFD\n         XC    COMM_VZAPSPFD,COMM_VZAPSPFD\n         ITRACE ID=DEL_LINK\n         DELETE EP=ISPLINK\n         XC    COMM_ISPLINK,COMM_ISPLINK\n* ------------------------------------------------------------------- *\n*        FREEMAIN the trace table                                     *\n* ------------------------------------------------------------------- *\nEXIT0030 DS    0H\n         L     R1,COMM_TRACE\n         L     R0,TRACE_TABLE_SIZE\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=(0)\n* ------------------------------------------------------------------- *\n*        Delete VZAPCOMM                                              *\n* ------------------------------------------------------------------- *\n         L     R2,COMM_DXD\n         LH    R3,COMM_RC\n         DELETE EP=VZAPCOMM                     DELETE COMMON\n* ------------------------------------------------------------------- *\n*        FREEMAIN the work area                                       *\n* ------------------------------------------------------------------- *\n         L     R13,4(,R13)                      RESTORE ADDRESS\n         LTR   R2,R2\n         BZ    EXIT0040\n         L     R0,DXDSIZE                       WORK AREA STORAGE SIZE\n         FREEMAIN RU,                           FREEMAIN WORK AREA     +\n               A=(R2),                                                 +\n               LV=(0)\n* ------------------------------------------------------------------- *\n*        Set RC and exit                                              *\n* ------------------------------------------------------------------- *\nEXIT0040 DS    0H\n         L     R14,12(R13)                      RESTORE R14\n         LR    R15,R3                           SET RETURN CODE\n         LM    R0,R12,20(R13)                   RESTORE REGISTERS\n         BR    R14                              EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART         DC   Q(DXDMAIN)                DISP TO WORK AREA\nDXDSIZE          CXD                            WORK AREA TOTAL SIZE\nTRACE_TABLE_SIZE DC   A(TR_ENTRY_L*10000)\n\nVCONI            DS   0A\n                 VCONS\nVCONL            EQU  *-VCONI\n\nH2               DC   H'2'\nH4               DC   H'4'\nH6               DC   H'6'\n\nMSG01            DS   0C\n                 DC   C'VZAPMAIN01E '\n                 DC   C'Volser omitted or incorrect length'\nMSG01_L          EQU  *-MSG01\n\nMSG02            DS   0C\n                 DC   C'VZAPMAIN02E '\n                 DC   C'DAIR FAILED.  R15='\nMSG02_R15        DC   CL4' '\nMSG02_L          EQU  *-MSG02\n\nMSG03            DS   0C\n                 DC   C'VZAPMAIN03E '\n                 DC   C'              ERROR='\nMSG03_ERROR      DC   CL4' '\nMSG03_L          EQU  *-MSG03\n\nMSG04            DS   0C\n                 DC   C'VZAPMAIN04E '\n                 DC   C'              INFO='\nMSG04_INFO       DC   CL4' '\nMSG04_L          EQU  *-MSG04\n\nALL              DC   CL8'ALL'\nPANEL_VZAP001    DC   CL8'VZAP001'\n\nVZAPMAINEND      EQU  *\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDMAIN          DSECT\n                 COPY     DXDPREF\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n         COPY    TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY    REGEQU\n         END     VZAPMAIN\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPNBR1": {"ttr": 2055, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x07\\x01\\x10\\x03\\x9f\\x01\\x10\\x03\\x9f\\x140\\x01\\x06\\x01\\x06\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-08T00:00:00", "modifydate": "2010-02-08T14:30:07", "lines": 262, "newlines": 262, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPNBR1                                              *\n*                                                                     *\n*   Display/update 1 byte numeric fields                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPNBR1 CSECT\nVZAPNBR1 AMODE 31\nVZAPNBR1 RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPNBR1,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPNBR1'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPNBR1)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPNBR1,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDNBR1,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         L     R9,COMM_VZAPSPFD\n         USING VZAPSPFD,R9\n         L     R8,COMM_SELECTED_DSCB          SELECTED DSCB\n         USING VTOCDATA,R8\n* ------------------------------------------------------------------- *\n*        Compute data address within DSCB                             *\n* ------------------------------------------------------------------- *\n         L     R5,COMM_SELECTED_FIELD         SELECTED FIELD\n         USING FIELD_DSECT,R5                 DEFINE BASE\n         ITRACE ID=FIELD,                                              +\n               DATA1=FIELD_LABEL,                                      +\n               DATA2=(FIELD_DISP,2)\n         SR    R6,R6\n         ICM   R6,3,FIELD_DISP                DISP TO DATA\n         AR    R6,R8                          PLUS BASE\n* ------------------------------------------------------------------- *\n*        Copy data to allow user to abort                             *\n* ------------------------------------------------------------------- *\n         ITRACE ID=DATA,                                               +\n               RDATA1=R6,                                              +\n               DATA2=(0(R6),1)\n         MVC   DXD_DATA,0(R6)                 SAVE DATA\n* ------------------------------------------------------------------- *\n*        Build detail                                                 *\n* ------------------------------------------------------------------- *\nMAIN0000 DS    0H\n         ITRACE ID=BUILD\n         SR    R0,R0\n         IC    R0,0(R6)                       DATA FROM DSCB\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD\n         ED    DXD_EDITWORD,COMM_DWORD+6      EDIT\n         MVC   SPF_3,DXD_EDITWORD+1           COPY EDITED NUMBER\n* ------------------------------------------------------------------- *\n*        Display                                                      *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_PANEL,NBR1_PANEL          COPY PANEL NAME\n         XC    COMM_VDATA_ADDR,COMM_VDATA_ADDR\n         XC    COMM_VDATA_LENGTH,COMM_VDATA_LENGTH\n         XC    COMM_VDATA_CURSOR,COMM_VDATA_CURSOR\n         L     R15,COMM_V_VZAPDISP            VTOCDISP ENTRY POINT\n         BALR  R14,R15                        CALL VZAPDISP\n         ITRACE ID=DISP_RC,                                            +\n               DATA1=(COMM_DISP_RC,2)\n* ------------------------------------------------------------------- *\n*        Does user want to cancel changes?                            *\n* ------------------------------------------------------------------- *\n         CLC   SPF_ZCMD,COMM_BLANKS           COMMAND PRESENT?\n         BE    MAIN0020                       NO\n         CLC   CAN,SPF_ZCMD                   CAN?\n         BE    MAIN0300                       YES\n         CLC   CANCEL,SPF_ZCMD                CANCEL?\n         BE    MAIN0300                       YES\n         B     ERR0020                        OTHERWISE BAD COMMAND\n* ------------------------------------------------------------------- *\n*        Verify numeric                                               *\n* ------------------------------------------------------------------- *\nMAIN0020 DS    0H\n         ITRACE ID=VERIFY,                                             +\n               DATA1=(SPF_3,3)\n         LA    R1,SPF_3                       1ST CHARACTER\n         LA    R2,L'SPF_3                     NUMBER OF DIGITS\nMAIN0030 DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BNE   MAIN0040                       NO\n         LA    R1,1(,R1)                      NEXT\n         BCT   R2,MAIN0030                    LOOP\n         B     MAIN0060                       ALL BLANK\nMAIN0040 DS    0H\n         LR    R3,R1                          SAVE ADDR OF NON-BLANK\n         LR    R4,R2                          SAVE DIGITS LEFT\nMAIN0050 DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BE    MAIN0060                       YES\n         CLI   0(R1),C'0'                     VALID DIGIT?\n         BL    ERR0010                        NO\n         CLI   0(R1),C'9'                     VALID DIGIT?\n         BH    ERR0010                        NO\n         LA    R1,1(,R1)                      NEXT DIGIT\n         BCT   R2,MAIN0050                    LOOP\n* ------------------------------------------------------------------- *\n*        Convert new value to binary                                  *\n* ------------------------------------------------------------------- *\nMAIN0060 DS    0H\n         ITRACE ID=CONVERT\n         MVC   DXD_NUMBER,=C'000'             INITIALIZE WORK AREA\nMAIN0100 DS    0H\n         CLI   0(R3),C' '                     BLANK?\n         BE    MAIN0110                       YES\n         MVC   DXD_NUMBER(2),DXD_NUMBER+1     SHIFT LEFT 1 DIGIT\n         MVC   DXD_NUMBER+2(1),0(R3)          COPY TO DIGITS POSITION\n         LA    R3,1(,R3)                      NEXT DIGIT\n         BCT   R4,MAIN0100                    LOOP\nMAIN0110 DS    0H\n         ITRACE ID=PACK,                                               +\n               DATA1=(DXD_NUMBER,3)\n         PACK  COMM_DWORD,DXD_NUMBER          PACK THE NUMBER\n         CVB   R0,COMM_DWORD                  CONVERT TO BINARY\n         CH    R0,H255                        TOO LARGE?\n         BH    ERR0030                        YES\n         STC   R0,0(R6)                       CHANGE DATA\n* ------------------------------------------------------------------- *\n*        Does user want to exit?                                      *\n* ------------------------------------------------------------------- *\n         OC    COMM_DISP_RC,COMM_DISP_RC      RC = 0?\n         BZ    MAIN0000                       YES\n* ------------------------------------------------------------------- *\n*        Exiting.  Has data changed?                                  *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         CLC   DXD_DATA,0(R6)                 DATA UPDATED?\n         BE    EXIT0000                       NO\n         ITRACE ID=UPDATE\n         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING\n         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        User wants to cancel changes                                 *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=CANCEL\n         MVC   SPF_ZCMD,COMM_BLANKS\n         CLC   DXD_DATA,0(R6)                 DATA CHANGED?\n         BE    EXIT0000                       NO\n         MVC   SPF_MSG_1(EMSG02_L),EMSG02     WARN THE USER\n         MVC   0(1,R6),DXD_DATA               RESTORE DATA\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=BADDIGIT\n         MVC   SPF_MSG_1(EMSG03_L),EMSG03     COPY MESSAGE\n         B     MAIN0010\nERR0020  DS    0H\n         MVC   SPF_MSG_1(EMSG04_L),EMSG04     COPY MESSAGE\n         B     MAIN0010\nERR0030  DS    0H\n         MVC   SPF_MSG_1(EMSG05_L),EMSG05     COPY MESSAGE\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         ICM   R1,15,COMM_VDATA_ADDR          VDATA GETMAINED?\n         L     R0,COMM_VDATA_LENGTH           LENGTH\n         BZ    EXIT0010                       NO\n         FREEMAIN RU,                         FREEMAIN VDATA           +\n               A=(1),                                                  +\n               LV=(0)\nEXIT0010 DS    0H\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDNBR1)\n              LTORG\n\nH255          DC    H'255'\n\nCAN           DC    C'CAN '\nCANCEL        DC    C'CANCEL '\nNBR1_PANEL    DC    CL8'VZAPNBR1'\nEDITWORD      DC    X'40202120'\n\nEMSG02        DS    0C\n              DC    C'VZAPNBR102W Changes cancelled'\nEMSG02_L      EQU   *-EMSG02\n\nEMSG03        DS    0C\n              DC    C'VZAPNBR103E Non numeric digit'\nEMSG03_L      EQU   *-EMSG03\n\nEMSG04        DS    0C\n              DC    C'VZAPNBR104E Invalid command'\nEMSG04_L      EQU   *-EMSG04\n\nEMSG05        DS    0C\n              DC    C'VZAPNBR105E Must be less than 32768'\nEMSG05_L      EQU   *-EMSG05\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDNBR1       DSECT\n              COPY  DXDPREF\n\nDXD_EDITWORD  DS    CL4\nDXD_NUMBER    DS    CL3\n\nDXD_DATA      DS    X\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VZAPFLD\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VTOCDATA\n         ORG      VTOC_DSCB\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     ATTRS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPNBR1\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPNBR2": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x12\\x01\\x10\\x03o\\x01\\x10\\x03\\x9f\\t \\x01\\x06\\x00\\xfe\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2010-02-05T00:00:00", "modifydate": "2010-02-08T09:20:12", "lines": 262, "newlines": 254, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPNBR2                                              *\n*                                                                     *\n*   Display/update 2 byte numeric fields                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPNBR2 CSECT\nVZAPNBR2 AMODE 31\nVZAPNBR2 RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPNBR2,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPNBR2'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPNBR2)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPNBR2,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDNBR2,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         L     R9,COMM_VZAPSPFD\n         USING VZAPSPFD,R9\n         L     R8,COMM_SELECTED_DSCB          SELECTED DSCB\n         USING VTOCDATA,R8\n* ------------------------------------------------------------------- *\n*        Compute data address within DSCB                             *\n* ------------------------------------------------------------------- *\n         L     R5,COMM_SELECTED_FIELD         SELECTED FIELD\n         USING FIELD_DSECT,R5                 DEFINE BASE\n         ITRACE ID=FIELD,                                              +\n               DATA1=FIELD_LABEL,                                      +\n               DATA2=(FIELD_DISP,2)\n         SR    R6,R6\n         ICM   R6,3,FIELD_DISP                DISP TO DATA\n         AR    R6,R8                          PLUS BASE\n* ------------------------------------------------------------------- *\n*        Copy data to allow user to abort                             *\n* ------------------------------------------------------------------- *\n         ITRACE ID=DATA,                                               +\n               RDATA1=R6,                                              +\n               DATA2=(0(R6),2)\n         MVC   DXD_DATA,0(R6)                 SAVE DATA\n* ------------------------------------------------------------------- *\n*        Build detail                                                 *\n* ------------------------------------------------------------------- *\nMAIN0000 DS    0H\n         ITRACE ID=BUILD\n         SR    R0,R0\n         ICM   R0,3,0(R6)                     DATA FROM DSCB\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD\n         ED    DXD_EDITWORD,COMM_DWORD+5      EDIT\n         MVC   SPF_5,DXD_EDITWORD+1           COPY EDITED NUMBER\n* ------------------------------------------------------------------- *\n*        Display                                                      *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_PANEL,NBR2_PANEL          COPY PANEL NAME\n         XC    COMM_VDATA_ADDR,COMM_VDATA_ADDR\n         XC    COMM_VDATA_LENGTH,COMM_VDATA_LENGTH\n         XC    COMM_VDATA_CURSOR,COMM_VDATA_CURSOR\n         L     R15,COMM_V_VZAPDISP            VZAPDISP ENTRY POINT\n         BALR  R14,R15                        CALL VZAPDISP\n         ITRACE ID=DISP_RC,                                            +\n               DATA1=(COMM_DISP_RC,2)\n* ------------------------------------------------------------------- *\n*        Does user want to cancel changes?                            *\n* ------------------------------------------------------------------- *\n         CLC   SPF_ZCMD,COMM_BLANKS           COMMAND PRESENT?\n         BE    MAIN0020                       NO\n         CLC   CAN,SPF_ZCMD                   CAN?\n         BE    MAIN0300                       YES\n         CLC   CANCEL,SPF_ZCMD                CANCEL?\n         BE    MAIN0300                       YES\n         B     ERR0020                        OTHERWISE BAD COMMAND\n* ------------------------------------------------------------------- *\n*        Verify numeric                                               *\n* ------------------------------------------------------------------- *\nMAIN0020 DS    0H\n         ITRACE ID=VERIFY,                                             +\n               DATA1=(SPF_5,5)\n         LA    R1,SPF_5                       1ST CHARACTER\n         LA    R2,L'SPF_5                     NUMBER OF DIGITS\nMAIN0030 DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BNE   MAIN0040                       NO\n         LA    R1,1(,R1)                      NEXT\n         BCT   R2,MAIN0030                    LOOP\n         B     MAIN0060                       ALL BLANK\nMAIN0040 DS    0H\n         LR    R3,R1                          SAVE ADDR OF NON-BLANK\n         LR    R4,R2                          SAVE DIGITS LEFT\nMAIN0050 DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BE    MAIN0060                       YES\n         CLI   0(R1),C'0'                     VALID DIGIT?\n         BL    ERR0010                        NO\n         CLI   0(R1),C'9'                     VALID DIGIT?\n         BH    ERR0010                        NO\n         LA    R1,1(,R1)                      NEXT DIGIT\n         BCT   R2,MAIN0050                    LOOP\n* ------------------------------------------------------------------- *\n*        Convert new value to binary                                  *\n* ------------------------------------------------------------------- *\nMAIN0060 DS    0H\n         ITRACE ID=CONVERT\n         MVC   DXD_NUMBER,=C'00000'           INITIALIZE WORK AREA\nMAIN0100 DS    0H\n         CLI   0(R3),C' '                     BLANK?\n         BE    MAIN0110                       YES\n         MVC   DXD_NUMBER(4),DXD_NUMBER+1     SHIFT LEFT 1 DIGIT\n         MVC   DXD_NUMBER+4(1),0(R3)          COPY TO DIGITS POSITION\n         LA    R3,1(,R3)                      NEXT DIGIT\n         BCT   R4,MAIN0100                    LOOP\nMAIN0110 DS    0H\n         ITRACE ID=PACK,                                               +\n               DATA1=(DXD_NUMBER,5)\n         PACK  COMM_DWORD,DXD_NUMBER          PACK THE NUMBER\n         CVB   R0,COMM_DWORD                  CONVERT TO BINARY\n         C     R0,F32767                      TOO LARGE?\n         BH    ERR0030                        YES\n         STCM  R0,3,0(R6)                     CHANGE DATA\n* ------------------------------------------------------------------- *\n*        Does user want to exit?                                      *\n* ------------------------------------------------------------------- *\n         OC    COMM_DISP_RC,COMM_DISP_RC      RC = 0?\n         BZ    MAIN0000                       YES\n* ------------------------------------------------------------------- *\n*        Exiting.  Has data changed?                                  *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         CLC   DXD_DATA,0(R6)                 DATA UPDATED?\n         BE    EXIT0000                       NO\n         ITRACE ID=UPDATE\n         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING\n         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        User wants to cancel changes                                 *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=CANCEL\n         MVC   SPF_ZCMD,COMM_BLANKS\n         CLC   DXD_DATA,0(R6)                 DATA CHANGED?\n         BE    EXIT0000                       NO\n         MVC   SPF_MSG_1(EMSG02_L),EMSG02     WARN THE USER\n         MVC   0(2,R6),DXD_DATA               RESTORE DATA\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=BADDIGIT\n         MVC   SPF_MSG_1(EMSG03_L),EMSG03     COPY MESSAGE\n         B     MAIN0010\nERR0020  DS    0H\n         MVC   SPF_MSG_1(EMSG04_L),EMSG04     COPY MESSAGE\n         B     MAIN0010\nERR0030  DS    0H\n         MVC   SPF_MSG_1(EMSG05_L),EMSG05     COPY MESSAGE\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         ICM   R1,15,COMM_VDATA_ADDR          VDATA GETMAINED?\n         L     R0,COMM_VDATA_LENGTH           LENGTH\n         BZ    EXIT0010                       NO\n         FREEMAIN RU,                         FREEMAIN VDATA           +\n               A=(1),                                                  +\n               LV=(0)\nEXIT0010 DS    0H\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDNBR2)\n              LTORG\n\nF32767        DC    F'32767'\n\nCAN           DC    C'CAN '\nCANCEL        DC    C'CANCEL '\nNBR2_PANEL    DC    CL8'VZAPNBR2'\nEDITWORD      DC    X'402020202120'\n\nEMSG02        DS    0C\n              DC    C'VZAPNBR202W Changes cancelled'\nEMSG02_L      EQU   *-EMSG02\n\nEMSG03        DS    0C\n              DC    C'VZAPNBR203E Non numeric digit'\nEMSG03_L      EQU   *-EMSG03\n\nEMSG04        DS    0C\n              DC    C'VZAPNBR204E Invalid command'\nEMSG04_L      EQU   *-EMSG04\n\nEMSG05        DS    0C\n              DC    C'VZAPNBR205E Must be less than 32768'\nEMSG05_L      EQU   *-EMSG05\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDNBR2       DSECT\n              COPY  DXDPREF\n\nDXD_EDITWORD  DS    CL6\nDXD_NUMBER    DS    CL5\n\nDXD_DATA      DS    XL2\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VZAPFLD\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VTOCDATA\n         ORG      VTOC_DSCB\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     ATTRS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPNBR2\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPNBR3": {"ttr": 1037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00H\\x01\\x10\\x03o\\x01\\x10\\x03\\x9f\\t \\x01\\x04\\x00\\xfc\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2010-02-05T00:00:00", "modifydate": "2010-02-08T09:20:48", "lines": 260, "newlines": 252, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPNBR3                                              *\n*                                                                     *\n*   Display/update 3 byte numeric fields                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPNBR3 CSECT\nVZAPNBR3 AMODE 31\nVZAPNBR3 RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPNBR3,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPNBR3'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPNBR3)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPNBR3,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDNBR3,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         L     R9,COMM_VZAPSPFD\n         USING VZAPSPFD,R9\n         L     R8,COMM_SELECTED_DSCB          SELECTED DSCB\n         USING VTOCDATA,R8\n* ------------------------------------------------------------------- *\n*        Compute data address within DSCB                             *\n* ------------------------------------------------------------------- *\n         L     R5,COMM_SELECTED_FIELD         SELECTED FIELD\n         USING FIELD_DSECT,R5                 DEFINE BASE\n         ITRACE ID=FIELD,                                              +\n               DATA1=FIELD_LABEL,                                      +\n               DATA2=(FIELD_DISP,2)\n         SR    R6,R6\n         ICM   R6,3,FIELD_DISP                DISP TO DATA\n         AR    R6,R8                          PLUS BASE\n* ------------------------------------------------------------------- *\n*        Copy data to allow user to abort                             *\n* ------------------------------------------------------------------- *\n         ITRACE ID=DATA,                                               +\n               RDATA1=R6,                                              +\n               DATA2=(0(R6),3)\n         MVC   DXD_DATA,0(R6)                 SAVE DATA\n* ------------------------------------------------------------------- *\n*        Build detail                                                 *\n* ------------------------------------------------------------------- *\nMAIN0000 DS    0H\n         ITRACE ID=BUILD\n         SR    R0,R0\n         ICM   R0,7,0(R6)                     DATA FROM DSCB\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD\n         ED    DXD_EDITWORD,COMM_DWORD+3      EDIT\n         MVC   SPF_8,DXD_EDITWORD+2           COPY EDITED NUMBER\n* ------------------------------------------------------------------- *\n*        Display                                                      *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_PANEL,NBR3_PANEL          COPY PANEL NAME\n         XC    COMM_VDATA_ADDR,COMM_VDATA_ADDR\n         XC    COMM_VDATA_LENGTH,COMM_VDATA_LENGTH\n         XC    COMM_VDATA_CURSOR,COMM_VDATA_CURSOR\n         L     R15,COMM_V_VZAPDISP            VZAPDISP ENTRY POINT\n         BALR  R14,R15                        CALL VZAPDISP\n         ITRACE ID=DISP_RC,                                            +\n               DATA1=(COMM_DISP_RC,2)\n* ------------------------------------------------------------------- *\n*        Does user want to cancel changes?                            *\n* ------------------------------------------------------------------- *\n         CLC   SPF_ZCMD,COMM_BLANKS           COMMAND PRESENT?\n         BE    MAIN0020                       NO\n         CLC   CAN,SPF_ZCMD                   CAN?\n         BE    MAIN0300                       YES\n         CLC   CANCEL,SPF_ZCMD                CANCEL?\n         BE    MAIN0300                       YES\n         B     ERR0020                        OTHERWISE BAD COMMAND\n* ------------------------------------------------------------------- *\n*        Verify numeric                                               *\n* ------------------------------------------------------------------- *\nMAIN0020 DS    0H\n         ITRACE ID=VERIFY,                                             +\n               DATA1=(SPF_8,8)\n         LA    R1,SPF_8                       1ST CHARACTER\n         LA    R2,L'SPF_8                     NUMBER OF DIGITS\nMAIN0030 DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BNE   MAIN0040                       NO\n         LA    R1,1(,R1)                      NEXT\n         BCT   R2,MAIN0030                    LOOP\n         B     MAIN0060                       ALL BLANK\nMAIN0040 DS    0H\n         LR    R3,R1                          SAVE ADDR OF NON-BLANK\n         LR    R4,R2                          SAVE DIGITS LEFT\nMAIN0050 DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BE    MAIN0060                       YES\n         CLI   0(R1),C'0'                     VALID DIGIT?\n         BL    ERR0010                        NO\n         CLI   0(R1),C'9'                     VALID DIGIT?\n         BH    ERR0010                        NO\n         LA    R1,1(,R1)                      NEXT DIGIT\n         BCT   R2,MAIN0050                    LOOP\n* ------------------------------------------------------------------- *\n*        Convert new value to binary                                  *\n* ------------------------------------------------------------------- *\nMAIN0060 DS    0H\n         ITRACE ID=CONVERT\n         MVC   DXD_NUMBER,=C'000000000'       INITIALIZE WORK AREA\nMAIN0100 DS    0H\n         CLI   0(R3),C' '                     BLANK?\n         BE    MAIN0110                       YES\n         MVC   DXD_NUMBER(8),DXD_NUMBER+1     SHIFT LEFT 1 DIGIT\n         MVC   DXD_NUMBER+8(1),0(R3)          COPY TO DIGITS POSITION\n         LA    R3,1(,R3)                      NEXT DIGIT\n         BCT   R4,MAIN0100                    LOOP\nMAIN0110 DS    0H\n         ITRACE ID=PACK,                                               +\n               DATA1=DXD_NUMBER+1\n         PACK  COMM_DWORD,DXD_NUMBER          PACK THE NUMBER\n         CVB   R0,COMM_DWORD                  CONVERT TO BINARY\n         C     R0,=A(X'007FFFFF')             TOO LARGE?\n         BH    ERR0030                        YES\n         STCM  R0,7,0(R6)                     CHANGE DATA\n* ------------------------------------------------------------------- *\n*        Does user want to exit?                                      *\n* ------------------------------------------------------------------- *\n         OC    COMM_DISP_RC,COMM_DISP_RC      RC = 0?\n         BZ    MAIN0000                       YES\n* ------------------------------------------------------------------- *\n*        Exiting.  Has data changed?                                  *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         CLC   DXD_DATA,0(R6)                 DATA UPDATED?\n         BE    EXIT0000                       NO\n         ITRACE ID=UPDATE\n         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING\n         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        User wants to cancel changes                                 *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=CANCEL\n         MVC   SPF_ZCMD,COMM_BLANKS\n         CLC   DXD_DATA,0(R6)                 DATA CHANGED?\n         BE    EXIT0000                       NO\n         MVC   SPF_MSG_1(EMSG02_L),EMSG02     WARN THE USER\n         MVC   0(3,R6),DXD_DATA               RESTORE DATA\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=BADDIGIT\n         MVC   SPF_MSG_1(EMSG03_L),EMSG03     COPY MESSAGE\n         B     MAIN0010\nERR0020  DS    0H\n         MVC   SPF_MSG_1(EMSG04_L),EMSG04     COPY MESSAGE\n         B     MAIN0010\nERR0030  DS    0H\n         MVC   SPF_MSG_1(EMSG05_L),EMSG05     COPY MESSAGE\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         ICM   R1,15,COMM_VDATA_ADDR          VDATA GETMAINED?\n         L     R0,COMM_VDATA_LENGTH           LENGTH\n         BZ    EXIT0010                       NO\n         FREEMAIN RU,                         FREEMAIN VDATA           +\n               A=(1),                                                  +\n               LV=(0)\nEXIT0010 DS    0H\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDNBR3)\n              LTORG\n\nCAN           DC    C'CAN '\nCANCEL        DC    C'CANCEL '\nNBR3_PANEL    DC    CL8'VZAPNBR3'\nEDITWORD      DC    X'40202020202020202120'\n\nEMSG02        DS    0C\n              DC    C'VZAPNBR302W Changes cancelled'\nEMSG02_L      EQU   *-EMSG02\n\nEMSG03        DS    0C\n              DC    C'VZAPNBR303E Non numeric digit'\nEMSG03_L      EQU   *-EMSG03\n\nEMSG04        DS    0C\n              DC    C'VZAPNBR304E Invalid command'\nEMSG04_L      EQU   *-EMSG04\n\nEMSG05        DS    0C\n              DC    C'VZAPNBR305E Must be less than 32768'\nEMSG05_L      EQU   *-EMSG05\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDNBR3       DSECT\n              COPY  DXDPREF\n\nDXD_EDITWORD  DS    CL10\nDXD_NUMBER    DS    CL9\n\nDXD_DATA      DS    XL3\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VZAPFLD\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VTOCDATA\n         ORG      VTOC_DSCB\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     ATTRS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPNBR3\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPOPT": {"ttr": 1804, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00E\\x01\\x10\\x03\\x9f\\x01\\x10\\x03\\x9f\\tF\\x01\\r\\x01\\x0b\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2010-02-08T00:00:00", "modifydate": "2010-02-08T09:46:45", "lines": 269, "newlines": 267, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPOPT                                               *\n*                                                                     *\n*   Display/update Option codes  (DS1OPTCD)                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPOPT  CSECT\nVZAPOPT  AMODE 31\nVZAPOPT  RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPOPT,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPOPT'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPOPT)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPOPT,R10                    DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDOPT,R13                     DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         L     R8,COMM_SELECTED_DSCB\n         USING VTOCDATA,R8\n* ------------------------------------------------------------------- *\n*        Determine table to use                                       *\n* ------------------------------------------------------------------- *\n         LA    R0,DA_TABLE                    DA TABLE\n         TM    DS1DSORG,DS1DSGDA              DSORG = DA?\n         BO    INIT0010                       YES\n         LA    R0,ISAM_TABLE                  ISAM TABLE\n         TM    DS1DSORG,DS1DSGIS              DSORG = ISAM?\n         BO    INIT0010                       YES\n         LA    R0,BSAM_TABLE                  BSAM TABLE\n         TM    DS1DSORG,DS1DSGPS              DSORG = PS?\n         BO    INIT0010                       YES\n         TM    DS1DSORG,DS1DSGPO              DSORG = PO?\n         BO    INIT0010                       YES\n         LA    R0,VSAM_TABLE                  VSAM TABLE\n         TM    DS1DSORG+1,DS1ACBM             DSORG =VSAM\n         BO    INIT0010                       YES\n         LA    R0,OTHER_TABLE                 ASSUME 'OTHER'\nINIT0010 DS    0H\n         ITRACE ID=TABLE,                                              +\n               RDATA1=R0\n         ST    R0,COMM_BIT_TABLE              SET ADDRESS\n         L     R15,COMM_V_VZAPBIT1            VZAPBIT1 ENTRY POINT\n         BALR  R14,R15                        CALL VZAPBIT1\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDOPT)\n              LTORG\n\nDA_TABLE      DS    0C\n              DC    X'80'\n              DC    CL15'        '\n              DC    CL50'Write validity check'\n\n              DC    X'40'\n              DC    CL15'        '\n              DC    CL50'Track overflow'\n\n              DC    X'20'\n              DC    CL15'        '\n              DC    CL50'Extended search'\n\n              DC    X'10'\n              DC    CL15'        '\n              DC    CL50'Feedback'\n\n              DC    X'08'\n              DC    CL15'        '\n              DC    CL50'Actual addressing'\n\n              DC    X'04'\n              DC    CL15'        '\n              DC    CL50'Dynamic buffering'\n\n              DC    X'02'\n              DC    CL15'        '\n              DC    CL50'Read exclusive'\n\n              DC    X'01'\n              DC    CL15'        '\n              DC    CL50'Relative track addressing'\n\n              DC    X'FF'\n\nISAM_TABLE    DS    0C\n              DC    X'80'\n              DC    CL15'        '\n              DC    CL50'Write validity check'\n\n              DC    X'40'\n              DC    CL15'        '\n              DC    CL50'Accumulative trace index'\n\n              DC    X'20'\n              DC    CL15'        '\n              DC    CL50'Master Indeces'\n\n              DC    X'10'\n              DC    CL15'        '\n              DC    CL50'Independant overflow area'\n\n              DC    X'08'\n              DC    CL15'        '\n              DC    CL50'Cylinder oveflow area'\n\n              DC    X'04'\n              DC    CL15'        '\n              DC    CL50'Reserved'\n\n              DC    X'02'\n              DC    CL15'        '\n              DC    CL50'Delete option'\n\n              DC    X'01'\n              DC    CL15'        '\n              DC    CL50'Reorganization criteria'\n\n              DC    X'FF'\n\nBSAM_TABLE    DS    0C                   BPAM/BSAM/QSAM\n              DC    X'80'\n              DC    CL15'        '\n              DC    CL50'Write validity check'\n\n              DC    X'40'\n              DC    CL15'        '\n              DC    CL50'Allow data check (1403 printer)'\n\n              DC    X'20'\n              DC    CL15'        '\n              DC    CL50'Chained scheduling using PCI'\n\n              DC    X'10'\n              DC    CL15'        '\n              DC    CL50'VSE/OS interchange feature'\n\n              DC    X'08'\n              DC    CL15'        '\n              DC    CL50'Treat EOF as EOV (tape)'\n\n              DC    X'04'\n              DC    CL15'        '\n              DC    CL50'Search direct'\n\n              DC    X'02'\n              DC    CL15'        '\n              DC    CL50'User label totalling'\n\n              DC    X'01'\n              DC    CL15'        '\n              DC    CL50'For 3800 printing subsystem'\n\n              DC    X'FF'\n\nVSAM_TABLE    DS    0C                   VSAM\n              DC    AL1(DS1OPTIC)\n              DC    CL15'        '\n              DC    CL50'Cataloged in ICF catalog'\n\n              DC    AL1(DS1OPTBC)\n              DC    CL15'        '\n              DC    CL50'Data set is an ICF catalog'\n\n              DC    X'20'\n              DC    CL15'        '\n              DC    CL50'Reserved'\n\n              DC    X'10'\n              DC    CL15'        '\n              DC    CL50'Reserved'\n\n              DC    X'08'\n              DC    CL15'        '\n              DC    CL50'Reserved'\n\n              DC    X'04'\n              DC    CL15'        '\n              DC    CL50'Reserved'\n\n              DC    X'02'\n              DC    CL15'        '\n              DC    CL50'Reserved'\n\n              DC    X'01'\n              DC    CL15'        '\n              DC    CL50'Reserved'\n\n              DC    X'FF'\n\nOTHER_TABLE   DS    0C                   OTHER\n              DC    X'80'\n              DC    CL15'        '\n              DC    CL50'Reserved'\n\n              DC    X'40'\n              DC    CL15'        '\n              DC    CL50'Reserved'\n\n              DC    X'20'\n              DC    CL15'        '\n              DC    CL50'Reserved'\n\n              DC    X'10'\n              DC    CL15'        '\n              DC    CL50'Reserved'\n\n              DC    X'08'\n              DC    CL15'        '\n              DC    CL50'Reserved'\n\n              DC    X'04'\n              DC    CL15'        '\n              DC    CL50'Reserved'\n\n              DC    X'02'\n              DC    CL15'        '\n              DC    CL50'Reserved'\n\n              DC    X'01'\n              DC    CL15'        '\n              DC    CL50'Reserved'\n\n              DC    X'FF'\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDOPT        DSECT\n              COPY  DXDPREF\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VTOCDATA\n         ORG      VTOC_DSCB\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPOPT\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPORG": {"ttr": 3086, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x11\\x01\\x10\\x03\\x9f\\x01\\x10\\x04\\x8f\\x163\\x00\\x8a\\x00\\x8a\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2010-02-08T00:00:00", "modifydate": "2010-02-17T16:33:11", "lines": 138, "newlines": 138, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPORG                                               *\n*                                                                     *\n*   Display/update DSORG                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPORG  CSECT\nVZAPORG  AMODE 31\nVZAPORG  RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPORG,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPORG'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPORG)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPORG,R10                    DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDORG,R13                     DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         LA    R0,BIT_TABLE\n         ST    R0,COMM_BIT_TABLE              SET ADDRESS\n         L     R15,COMM_V_VZAPBIT2            VZAPBIT2 ENTRY POINT\n         BALR  R14,R15                        LINK TO VZAPBIT2\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDORG)\n              LTORG\n\n\nBIT_TABLE     DS    0C                     Byte 1\n              DC    AL1(DS1DSGIS)\n              DC    CL15'DS1DSGIS'\n              DC    CL50'ISAM'\n\n              DC    AL1(DS1DSGPS)\n              DC    CL15'DS1DSGPS'\n              DC    CL50'Sequential'\n\n              DC    AL1(DS1DSGDA)\n              DC    CL15'DS1DSGDA'\n              DC    CL50'Direct (BDAM)'\n\n              DC    AL1(DS1DSGCX)\n              DC    CL15'DS1DSGCX'\n              DC    CL50'BTAM or QTAM line group'\n\n              DC    AL1(X'08')\n              DC    CL15'        '\n              DC    CL50'QTAM direct access message queue'\n\n              DC    AL1(X'04')\n              DC    CL15'        '\n              DC    CL50'QTAM problem program message queue'\n\n              DC    AL1(DS1DSGPO)\n              DC    CL15'DS1DSGPO'\n              DC    CL50'Partitioned (PDS)'\n\n              DC    AL1(DS1DSGU)\n              DC    CL15'DS1DSGU'\n              DC    CL50'Unmovable'\n\n              DS    0C                     Byte 2\n              DC    AL1(DS1DSGGS)\n              DC    CL15'DS1DSGGS'\n              DC    CL50'Graphics'\n\n              DC    AL1(DS1DSGTX)\n              DC    CL15'DS1DSGTX'\n              DC    CL50'TCAM line group'\n\n              DC    AL1(DS1DSGTQ)\n              DC    CL15'DS1DSGTQ'\n              DC    CL50'TCAM message queue'\n\n              DC    AL1(X'10')\n              DC    CL15'        '\n              DC    CL50'Reserved'\n\n              DC    AL1(DS1ACBM)\n              DC    CL15'DS1ACBM '\n              DC    CL50'VSAM'\n\n              DC    AL1(DS1DSGTR)\n              DC    CL15'DS1DSGTR'\n              DC    CL50'TCAM 3705'\n\n              DC    AL1(X'02')\n              DC    CL15'        '\n              DC    CL50'Reserved'\n\n              DC    AL1(X'01')\n              DC    CL15'        '\n              DC    CL50'Reserved'\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDORG   DSECT\n         COPY     DXDPREF\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFORMAT_1 DSECT\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPORG\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPPARS": {"ttr": 2817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x000\\x01\\x10\\x04/\\x01\\x10\\x04\\x8f\\x14V\\x01\\x81\\x01|\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2010-02-11T00:00:00", "modifydate": "2010-02-17T14:56:30", "lines": 385, "newlines": 380, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*         Parse commands and operands                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPPARS CSECT\nVZAPPARS AMODE 31\nVZAPPARS RMODE ANY\n         USING VZAPPARS,R15\n         USING VZAPCOMM,R12\n         B     INIT0000\nMODID    DC    CL8'VZAPPARS'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(PARSEEND-VZAPPARS)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R10,R15                        COPY BASE ADDRESS\n         DROP  R15\n         USING VZAPPARS,R10\n         L     R15,COMM_DXD                   DXD AREA BASE ADDRESS\n         A     R15,DXD_START                  PLUS OFFSET\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        COPY DXD AREA ADDRESS\n         USING DXDPARS,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         L     R8,COMM_VZAPSPFD\n         USING VZAPSPFD,R8\n         MVC   DXD_COMMAND,COMM_BLANKS        INITIALIZE WORK AREA\n         MVI   DXD_RC,0                       RESET RC\n         MVI   DXD_FLAGS,0                    RESET FLAGS\n* ------------------------------------------------------------------- *\n*        Initialize output                                            *\n* ------------------------------------------------------------------- *\n         LA    R1,5                           MAX OPERANDS\n         LA    R4,COMM_OPERANDS               1ST OPERAND\n         USING OPERAND,R4                     DEFINE BASE\nINIT0010 DS    0H\n         XC    OPERAND(OPERAND_L),OPERAND\n         LA    R4,OPERAND_L(,R4)\n         BCT   R1,INIT0010\n         XC    COMM_OPERANDS_NBR,COMM_OPERANDS_NBR\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R6,COMM_COMMAND_ADDRESS        COMMAND ADDRESS\n         L     R5,COMM_COMMAND_LENGTH         COMMAND LENGTH\n         ITRACE ID=CMD,                                                +\n               RDATA1=R6,                                              +\n               RDATA2=R5\n         LTR   R5,R5                          ZERO?\n         BZ    EXIT0000                       YES\n         CH    R5,H80                         TOO LONG?\n         BNH   PARS0010                       NO\n         LH    R5,H80                         LIMIT TO 80\nPARS0010 DS    0H\n         LR    R1,R5\n         BCTR  R1,0                           FOR EXECUTE\n         EX    R1,COPY_CMD                    COPY COMMAND TO WORK AREA\n* ------------------------------------------------------------------- *\n*        \"squeeze off\" leading blanks                                 *\n* ------------------------------------------------------------------- *\n         LA    R1,DXD_COMMAND                 FIRST BYTE OF COMMAND\n         LR    R2,R5                          MAXIMUM LENGTH\nPARS0020 DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BNE   PARS0030                       NO\n         MVC   DXD_COMMAND(L'DXD_COMMAND-1),DXD_COMMAND+1\n         MVI   DXD_COMMAND+(L'DXD_COMMAND-1),C' '\n         BCT   R2,PARS0020                    LOOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARS0030 DS    0H\n         CLI   DXD_COMMAND,C'='               START WITH AN EQUAL SIGN?\n         BE    ERR0090                        YES.. NOT VALID\n* ------------------------------------------------------------------- *\n*        Remove Consecutive blanks                                    *\n* ------------------------------------------------------------------- *\n         LA    R1,DXD_COMMAND\n         LA    R2,80\nPARS0040 DS    0H\n         CLC   0(2,R1),COMM_BLANKS            TWO CONSECUTIVE BLANKS?\n         BNE   PARS0050                       NO\n         MVC   0(80,R1),1(R1)                 SHIFT OUT 1 BLANK\n         MVI   80(R1),C' '                    FORCE A BLANK\n         B     PARS0060\nPARS0050 DS    0H\n         LA    R1,1(,R1)                      NEXT\nPARS0060 DS    0H\n         BCT   R2,PARS0040\n* ------------------------------------------------------------------- *\n*        Remove blanks before and/or after equal signs                *\n* ------------------------------------------------------------------- *\n         LA    R1,DXD_COMMAND\n         LA    R2,80\nPARS0070 DS    0H\n         CLC   =C' =',0(R1)                   BLANK AND EQUAL SIGN?\n         BE    PARS0080                       YES\n         CLC   =C'= ',0(R1)                   EQUAL SIGN AND A BLANK?\n         BNE   PARS0100                       NO\n         MVC   1(80,R1),2(R1)                 SHIFT OUT BLANK\n         B     PARS0090\nPARS0080 DS    0H\n         MVC   0(80,R1),1(R1)                 SHIFT OUT BLANK\nPARS0090 DS    0H\n         MVI   80(R1),C' '                    FORCE A BLANK\n         B     PARS0110\nPARS0100 DS    0H\n         LA    R1,1(,R1)                      NEXT\nPARS0110 DS    0H\n         BCT   R2,PARS0070                    LOOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LA    R4,COMM_OPERANDS               FIRST OPERAND\n         USING OPERAND,R4                     DEFINE BASE\n         LA    R6,DXD_COMMAND                 FIRST CHARACTER\n         B     PARS0130\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARS0120 DS    0H\n         BAL   R9,PARS1000                    FIND A NON-BLANK\nPARS0130 DS    0H\n         ST    R6,DXD_OPERAND_ADDRESS         SAVE ADDRESS\n         BAL   R9,PARS2000                    FIND BLANK OR EQUAL SIGN\n         LTR   R1,R1                          ANY DATA FOUND?\n         BZ    EXIT0000                       NO\n         L     R15,DXD_OPERAND_END            END OF OPERAND\n         TM    DXD_FLAGS,$DXD_EQUAL           END WITH EQUAL SIGN?\n         BNO   PARS0140                       NO\n         CLI   0(R15),C'='                    THIS END WITH EQUAL SIGN?\n         BE    ERR0090                        YES\nPARS0140 DS    0H\n         CLI   0(R15),C'='                    END WITH EQUAL SIGN?\n         BE    PARS0150                       YES\n         NI    DXD_FLAGS,255-$DXD_EQUAL       RESET INDICATOR\n         B     PARS0160\nPARS0150 DS    0H\n         OI    DXD_FLAGS,$DXD_EQUAL           SET FLAG\nPARS0160 DS    0H\n         MVI   OPERAND_TYPE,$OPERAND_PRESENT  INDICATE PRESENCE\n         MVC   OPERAND_ADDRESS,DXD_OPERAND_ADDRESS\n         STCM  R1,3,OPERAND_LENGTH            SET LENGTH\n         SR    R14,R14                        CLEAR REGISTER\n         ICM   R14,3,COMM_OPERANDS_NBR        NUMBER OF OPERANDS SO FAR\n         LA    R14,1(,R14)                    ADD 1\n         STCM  R14,3,COMM_OPERANDS_NBR        SAVE TOTAL\n         ICM   R3,15,OPERAND_ADDRESS\n         CLI   0(R3),C'/'                     UNIX PATH?\n         BE    PARS0200                       YES\n         BCTR  R1,R0                          FOR EXECUTE\n         ITRACE ID=UPPER,                                              +\n               RDATA1=R3,                                              +\n               RDATA2=R1\n         EX    R1,CASE_OC                     TRANSLATE TO UPPER CASE\nPARS0170 DS    0H\n         EX    R1,NBR_TRT                     NUMERIC?\n         BNZ   PARS0180                       NO\n         OI    OPERAND_TYPE,$OPERAND_NUMERIC\n         B     PARS0200\nPARS0180 DS    0H\n         ICM   R1,3,OPERAND_LENGTH            OPERAND LENGTH\n         L     R15,DXD_OPERAND_END            OPERAND'S ENDING ADDRESS\n         CLC   =C'X''',0(R3)                  HEX STRING (X'....')?\n         BNE   PARS0190                       NO\n         CLI   0(R15),C''''                   ENDING QUOTE PRESENT?\n         BNE   ERR0010                        NO.. INVALID\n         TM    OPERAND_LENGTH+1,X'01'         LENGTH ODD NOW?\n         BNO   ERR0020                        NO.. INVALID\n         SH    R1,H3                          MINUS LENGTH OF DELIMITER\n         BNH   ERR0030                        INVALID\n         STCM  R1,3,OPERAND_LENGTH            OPERAND LENGTH\n         LA    R3,2(R3)                       DATA FOLLOWING OPENING X'\n         BCTR  R1,R0                          FOR EXECUTE\n         EX    R1,HEX_TRT                     VALID HEX?\n         BNZ   ERR0040                        NO.. INVALID\n         ITRACE ID=HEX,                                                +\n               RDATA1=R3,                                              +\n               DATA2=(OPERAND_LENGTH,2)\n         STCM  R3,15,OPERAND_ADDRESS          SET OPERAND ADDRESS\n         OI    OPERAND_TYPE,$OPERAND_HEX\n         B     PARS0200\nPARS0190 DS    0H\n         CLI   0(R3),C''''                    OPENING QUOTE\n         BNE   PARS0200                       NO\n         CLI   0(R15),C''''                   ENDING QUOTE PRESENT?\n         BNE   ERR0050                        NO.. INVALID\n         LA    R3,1(R3)                       DATA FOLLOWING QUOTE\n         SH    R1,H2                          LENGTH WITHOUT QUOTES\n         BNH   ERR0060\n         STCM  R3,15,OPERAND_ADDRESS\n         STCM  R1,3,OPERAND_LENGTH            SET LENGTH\n         OI    OPERAND_TYPE,$OPERAND_QUOTED\nPARS0200 DS    0H\n         LA    R4,OPERAND_L(,R4)              NEXT OPERAND OUTPUT\n         LTR   R5,R5\n         BZ    EXIT0000\n         B     PARS0120                       LOOP\n* ------------------------------------------------------------------- *\n*        FIND NON-BLANK                                               *\n* ------------------------------------------------------------------- *\nPARS1000 DS    0H\n         CLI   0(R6),C' '                     BLANK?\n         BNER  R9                             NO\n         LA    R6,1(,R6)                      NEXT\n         BCT   R5,PARS1000                    LOOP\n         TM    DXD_FLAGS,$DXD_EQUAL           LAST END WITH EQUAL SIGN?\n         BO    ERR0070                        YES\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        FIND BLANK OR EQUAL SIGN                                     *\n* ------------------------------------------------------------------- *\nPARS2000 DS    0H\n         SR    R1,R1                          INITIALIZE LENGTH\nPARS2010 DS    0H\n         CLI   0(R6),C' '                     BLANK?\n         BER   R9                             YES\n         CLI   0(R6),C'='                     EQUAL SIGN\n         BNE   PARS2020                       NO\n         CLI   1(R6),C'='                     TWO EQUAL SIGNS?\n         BE    ERR0080                        YES.. BAD NEWS\n         OI    DXD_FLAGS,$DXD_EQUAL           SET FLAG\n         LA    R1,1(,R1)                      ADD 1 TO LENGTH\n         LA    R6,1(,R6)                      SKIP OVER EQUAL SIGN\n         ST    R6,DXD_OPERAND_END             SAVE END OF OPERAND\n         BCTR  R5,0                           MINUS 1 REMAINING\n         BR    R9                             OTHERWIZE END OF OPERAND\nPARS2020 DS    0H\n         ST    R6,DXD_OPERAND_END\n         LA    R1,1(,R1)                      ADD 1 TO LENGTH\n         LA    R6,1(,R6)                      ADD 1 TO ADDRESS\n         BCT   R5,PARS2010                    LOOP\n         BR    R9                             END OF DATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVC   SPF_MSG_1(MSG01_L),MSG01\n         B     ERR1000\nERR0020  DS    0H\n         MVC   SPF_MSG_1(MSG02_L),MSG02\n         B     ERR1000\nERR0030  DS    0H\n         MVC   SPF_MSG_1(MSG03_L),MSG03\n         B     ERR1000\nERR0040  DS    0H\n         MVC   SPF_MSG_1(MSG04_L),MSG04\n         B     ERR1000\nERR0050  DS    0H\n         MVC   SPF_MSG_1(MSG05_L),MSG05\n         B     ERR1000\nERR0060  DS    0H\n         MVC   SPF_MSG_1(MSG06_L),MSG06\n         B     ERR1000\nERR0070  DS    0H\n         MVC   SPF_MSG_1(MSG07_L),MSG07\n         B     ERR1000\nERR0080  DS    0H\n         MVC   SPF_MSG_1(MSG08_L),MSG08\n         B     ERR1000\nERR0090  DS    0H\n         MVC   SPF_MSG_1(MSG09_L),MSG09\nERR1000  DS    0H\n         MVI   DXD_RC,8\nEXIT0000 DS    0H\n         SR    R15,R15\n         IC    R15,DXD_RC             SET RC\n         ITRACE ID=EXIT,                                               +\n               RDATA1=R15\n         L     R13,4(,R13)\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOPY_CMD MVC   DXD_COMMAND(0),0(R6)   COPY COMMAND TO WORK AREA\nCASE_OC  OC    0(0,R3),COMM_BLANKS    'TRANSLATE' TO UPPERCASE\nNBR_TRT  TRT   0(0,R3),NUMERICS       CHECK FOR NUMERIC OPERAND\nHEX_TRT  TRT   0(0,R3),HEX            CHECK FOR HEX OPERAND\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START  DC    Q(DXDPARS)\nH2         DC    H'2'\nH3         DC    H'3'\nH80        DC    H'80'\n\nNUMERICS   DC    256X'FF'\n           ORG   NUMERICS+C'0'\n           DC    10X'00'\n           ORG\n\nHEX        DC    256X'FF'\n           ORG   HEX+C'A'\n           DC    6X'00'\n           ORG   HEX+C'0'\n           DC    10X'00'\n           ORG\n\nMSG01      DS  0C\n           DC  CL11'VZAPPARS01E'\n           DC  C'No ending quote on hex parameter'\nMSG01_L    EQU *-MSG01\n\nMSG02      DS  0C\n           DC  CL11'VZAPPARS02E'\n           DC  C'Hex string has odd number of digits'\nMSG02_L    EQU *-MSG02\n\nMSG03      DS  0C\n           DC  CL11'VZAPPARS03E'\n           DC  C'Hex string has no digits'\nMSG03_L    EQU *-MSG03\n\nMSG04      DS  0C\n           DC  CL11'VZAPPARS04E'\n           DC  C'Hex string contains non-hex digit(s)'\nMSG04_L    EQU *-MSG04\n\nMSG05      DS  0C\n           DC  CL11'VZAPPARS05E'\n           DC  C'No ending quote'\nMSG05_L    EQU *-MSG05\n\nMSG06      DS  0C\n           DC  CL11'VZAPPARS06E'\n           DC  C'Quoted string with zero length found'\nMSG06_L    EQU *-MSG06\n\nMSG07      DS  0C\n           DC  CL11'VZAPPARS07E'\n           DC  C'Keyword with no value '\nMSG07_L    EQU *-MSG07\n\nMSG08      DS  0C\n           DC  CL11'VZAPPARS08E'\n           DC  C'Two consecutive equal signs (=) found'\nMSG08_L    EQU *-MSG08\n\nMSG09      DS  0C\n           DC  CL11'VZAPPARS09E'\n           DC  C'Leading equal sign not allowed'\nMSG09_L    EQU *-MSG09\n\nPARSEEND   EQU *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDPARS              DSECT\n                     COPY   DXDPREF\nDXD_OPERAND_ADDRESS  DS     A\nDXD_OPERAND_END      DS     A\n\nDXD_FLAGS            DS     X\n$DXD_EQUAL           EQU    X'80'     .. LAST OPERAND ENDED EQUAL SIGN\n\nDXD_RC               DS     X\n\nDXD_COMMAND          DS     CL160\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     OPERAND\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPPARS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VZAPPQRY": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\t\\x01\\x10\\x02\\x7f\\x01\\x10\\x03\\x9f\\t!\\x00}\\x00\\x81\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2010-01-27T00:00:00", "modifydate": "2010-02-08T09:21:09", "lines": 125, "newlines": 129, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPPQRY                                              *\n*                                                                     *\n*   Issue a PQUERY to determine the dimensions of the dynamic         *\n*   area on an SPF panel.  Panel name is in COMM_PANEL.               *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPPQRY CSECT\nVZAPPQRY AMODE 31\nVZAPPQRY RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPPQRY,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPPQRY'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(PQRYEND-VZAPPQRY)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         DROP  R15\n         USING VZAPPQRY,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDPQRY,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY,                                              +\n               DATA1=COMM_PANEL\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R9,COMM_VZAPSPFD               SPF DATA\n         USING VZAPSPFD,R9                    DEFINE BASE\n         LA    R0,PQUERY                      COMMAND'S ADDRESS\n         ST    R0,WORK_SPF_1                  SET IN PARM LIST\n         LA    R0,COMM_PANEL                  PANEL NAME ADDRESS\n         ST    R0,WORK_SPF_2                  SET ADDR OF PANEL NAME\n         LA    R0,CVDATA                      AREA NAME\n         ST    R0,WORK_SPF_3                  SET IN PARM LIST\n         LA    R0,CVTYPE                      AREA TYPE\n         ST    R0,WORK_SPF_4                  SET IN PARM LIST\n         LA    R0,CVWIDTH                     SCREEN DEPTH\n         ST    R0,WORK_SPF_5                  SET IN PARM LIST\n         LA    R0,CVDEPTH                     SCREEN WIDTH\n         ST    R0,WORK_SPF_6                  SET IN PARM LIST\n         LA    R0,CVROW                       SCREEN ROW\n         ST    R0,WORK_SPF_7                  SET IN PARM LIST\n         LA    R0,CVCOL                       SCREEN COLUMN\n         ST    R0,WORK_SPF_8                  SET IN PARM LIST\n         OI    WORK_SPF_8,X'80'               FLAG 'END-OF-LIST'\n         LA    R1,WORK_SPF_PARMS              PQUERY PARM LIST ADDRESS\n         L     R15,COMM_ISPLINK               SPF INTERFACE'S ADDRESS\n         BALR  R14,R15                        ISSUE QUERY\n         ITRACE ID=PQUERYRC,                                           +\n               RDATA1=R15\n         LTR   R15,R15                        PQUERY SUCCESSFUL?\n         Bz    EXIT0000                       YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=PQRYFAIL\n         DC    H'1'\n         DC    C'PQUERY FAILED'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDPQRY)\nPQUERY        DC    CL8'PQUERY'\nCVDATA        DC    CL8'VDATA'\nCVDEPTH       DC    CL8'VDEPTH'\nCVTYPE        DC    CL8'VTYPE'\nCVWIDTH       DC    CL8'VWIDTH'\nCVROW         DC    CL8'VROW'\nCVCOL         DC    CL8'VCOL'\n              LTORG\nPQRYEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDPQRY           DSECT\n                  COPY    DXDPREF\n\nWORK_SPF_PARMS    DS      0A     SPF PARM LIST\nWORK_SPF_1        DS      A\nWORK_SPF_2        DS      A\nWORK_SPF_3        DS      A\nWORK_SPF_4        DS      A\nWORK_SPF_5        DS      A\nWORK_SPF_6        DS      A\nWORK_SPF_7        DS      A\nWORK_SPF_8        DS      A\nWORK_SPF_9        DS      A\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPPQRY\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPREAD": {"ttr": 3332, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00@\\x01\\x10\\x03\\x9f\\x01\\x10\\x04\\x8f\\x163\\x01\\x8b\\x01\\x7f\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2010-02-08T00:00:00", "modifydate": "2010-02-17T16:33:40", "lines": 395, "newlines": 383, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPREAD                                              *\n*                                                                     *\n*   Read the VTOC.                                                    *\n*   Chain DSCBs from COMM_VTOC_DATA.                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPREAD CSECT\nVZAPREAD AMODE 31\nVZAPREAD RMODE 24\n         USING VZAPCOMM,R12\n         USING VZAPREAD,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPREAD'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DISPEND-VZAPREAD)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPREAD,R10                   DEFINE BASE\n         GETMAIN RU,                                                   +\n               LV=WORK_L,                                              +\n               LOC=BELOW\n         LR    R2,R1\n         LA    R3,WORK_INIT_L\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R2,R14                         INITIALIZE WORK AREA\n         ST    R13,4(,R1)                     SAVE R13\n         ST    R1,8(,R13)                     CHAIN SAVE AREA\n         LR    R13,R1                         COPY WORK AREA ADDRESS\n         USING WORK,R13                       DEFINE WORK AREA BASE\n         USING JFCB,WORK_JFCB\n         USING IOB,WORK_IOB\n         MVC   DXD_CSECT,MODID\nINIT0010 DS    0H\n         ITRACE ID=ENTRY\n         MVI   WORK_RC,0                      INITIALIZE RC\n* ------------------------------------------------------------------- *\n*        Verify user is authorized                                    *\n* ------------------------------------------------------------------- *\n         ITRACE ID=AUTH\n         MVI   COMM_VTOCZAP_FUNCTION,$VTOCZAP_READ_VTOC\n         L     R15,COMM_V_VZAPAUTH            VZAPAUTH\n         BALR  R14,R15                        CALL VZAPAUTH\n         LTR   R15,R15                        USER AUTHORIZED?\n         ITRACE ID=AUTH_RC,                                            +\n               RDATA1=R15                     .. RETURN CODE\n         LTR   R15,R15                        USER ALLOWED?\n         BNZ   ERR0030                        NO\n* ------------------------------------------------------------------- *\n*        Initialization                                               *\n* ------------------------------------------------------------------- *\n         LA     R8,WORK_DCB                   DCB ADDRESS\n         STCM  R8,7,IOBDCBPB                  SET DCB ADDR IN IOB\n         USING IHADCB,R8\n         ITRACE ID=DCB,                                                +\n               RDATA1=R8\n         MVC   0(DCB_L,R8),DCB_I              INITIALIZE DCB\n         MVC   DCBDDNAM+2(6),COMM_VOLSER      ADD VOLSER TO DD NAME\n         LA    R0,WORK_EXLST                  EXLST ADDR\n         STCM  R0,7,DCBEXLSA                  RELOCATE EXIT LIST\n         LA    R0,WORK_JFCB                   JFCB ADDR\n         ST    R0,WORK_EXLST                  SET ADDR FOR EXLST\n         MVI   WORK_EXLST,X'87'               'RDJFCB'\n         MVC   WORK_CCW1(CCW_L),CCW_I         INITIALIZE CCW'S\n         LA    R0,WORK_IOB                    IOB ADDRESS\n         ST    R0,DCBIOBAD                    SET IOB ADDR IN DCB\n         LA    R0,WORK_ECB                    ECB ADDRESS\n         STCM  R0,7,IOBECBPB                  SET ADDR IN IOB\n         LA    R0,WORK_CCW1                   FIRST CCW\n         ST    R0,IOBSTART                    SET ADDR IN IOB\n         LA    R0,IOBCC                       CYLINDER IN DISK ADDR\n         STCM  R0,7,WORK_CCW1+1               RELOCATE ADDR IN CCW\n         LA    R0,WORK_CCW1                   CCW1'S ADDR\n         STCM  R0,7,WORK_CCW2+1               RELOCATE ADDR IN CCW\n         LA    R0,WORK_IO                     I/O AREA ADDRESS\n         STCM  R0,7,WORK_CCW3+1               RELOCATE ADDR IN CCW\n         LA    R0,COMM_VTOC_DATA              VTOC DATA CHAIN POINT\n         ST    R0,WORK_LAST_VTOCDATA          SAVE ADDRESS\n         MVC   WORK_OPEN(OPEN_L),OPEN_I       INITIALIZE OPEN\n* ------------------------------------------------------------------- *\n*        Read the JFCB                                                *\n* ------------------------------------------------------------------- *\n         ITRACE ID=RDJFCB\n         RDJFCB ((R8)),                       READ THE JFCB            +\n               MF=(E,WORK_OPEN)\n         ITRACE ID=RC,                                                 +\n               RDATA1=R15\n         LTR   R15,R15                        SUCCESSFUL?\n         BZ    INIT0020                       YES\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*        Change DSN to x'04...                                        *\n* ------------------------------------------------------------------- *\nINIT0020 DS    0H\n         MVI   JFCBDSNM,X'04'                 CHANGE DSN\n         MVC   JFCBDSNM+1(L'JFCBDSNM-1),JFCBDSNM\n         MVI   JFCBTSDM,JFCNWRIT              NO JFCB WRITE-BACK\n* ------------------------------------------------------------------- *\n*        Open the VTOC                                                *\n* ------------------------------------------------------------------- *\n         ITRACE ID=OPEN\n         OPEN  ((R8),INPUT),                                           +\n               TYPE=J,                                                 +\n               MF=(E,WORK_OPEN)\n* ------------------------------------------------------------------- *\n*        Get the starting disk address from DEB                       *\n* ------------------------------------------------------------------- *\n         SR    R1,R1\n         ICM   R1,7,DCBDEBA                   DEB ADDRESS\n         USING DEBBASIC,R1                    DEFINE BASE\n         LA    R1,DEBBASND                    END OF BASIC SECTION\n         DROP  R1\n         USING DEBDASD,R1                     DEFINE BASE\n         MVC   WORK_CC(5),DEBSTRCC            COPY STARTING ADDRESS\n* ------------------------------------------------------------------- *\n*        Start reading the VTOC (Finally!)                            *\n* ------------------------------------------------------------------- *\nMAIN0000 DS    0H\n         ITRACE ID=READ,                                               +\n               DATA1=(WORK_CC,5)\n         MVC   IOBCC(5),WORK_CC               COPY DISK ADDRESS\nMAIN0010 DS    0H\n         XC    WORK_ECB,WORK_ECB              CLEAR THE ECB\n         ITRACE ID=EXCP\n         EXCP  IOBSTDRD                       START THE I/O\n         ITRACE ID=WAIT\n         WAIT  ECB=WORK_ECB\n         ITRACE ID=EXCPSTAT,                                           +\n               DATA1=(WORK_ECB,1)\n         CLI   WORK_ECB,X'42'                 END OF VTOC? (BAD I KNOW)\n         BE    EXIT0000                       YES\n         CLI   WORK_ECB,X'44'                 RETRY?\n         BE    MAIN0010                       YES\n         CLI   WORK_ECB,X'7F'                 SUCCESSFUL I/O?\n         BNE   ERR0010                        NO\n         SR    R0,R0                          CLEAR REGISTER\n         SR    R7,R7                          CLEAR REGISTER\n         ICM   R7,3,WORK_CCW3+6               LENGTH USED\n         ICM   R0,3,IOBSTDRD+14               RESIDUAL LENGTH\n         SR    R7,R0                          LENGTH OF DATA READ\n         LA    R6,WORK_IO\n         USING COUNT,R6\n* ------------------------------------------------------------------- *\n*        Compute record length                                        *\n* ------------------------------------------------------------------- *\nMAIN0020 DS    0H\n         SR    R0,R0\n         SR    R3,R3\n         IC    R0,COUNT_KEY_LENGTH            KEY LENGTH\n         ICM   R3,3,COUNT_DATA_LENGTH         DATA LENGTH\n         AR    R3,R0                          ADD KEY LENGTH\n         LA    R3,COUNT_L(,R3)                PLUS LENGTH OF COUNT\n         ITRACE ID=DATA,                                               +\n               RDATA1=R6,                     .. DATA ADDRESS          +\n               RDATA2=R7                      .. DATA LENGTH\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LA    R1,COUNT_L+44(R6)\n         USING FORMAT_4,R1\n         ITRACE ID=FMT_ID,                                             +\n               DATA1=(DS4IDFMT,1)\n         CLI   DS4IDFMT,C'0'                  RECORD IN USE?\n         BL    MAIN0040                       NO\n         CLI   DS4IDFMT,C'4'                  FORMAT-4?\n         BNE   MAIN0030                       NO\n         MVC   COMM_MAX_CC(4),DS4DEVSZ        SAVE MAX CYL AND HEAD\n         MVC   WORK_VTOC_END,DS4HPCHR         SAVE HIGH VTOC EXTENT\n         ITRACE ID=MAX_END,                                            +\n               DATA1=(COMM_MAX_CC,4),                                  +\n               DATA2=(WORK_VTOC_END,4)\n* ------------------------------------------------------------------- *\n*        Add data to VTOC DATA chain                                  *\n* ------------------------------------------------------------------- *\nMAIN0030 ds    0h\n         ITRACE ID=VTOCRECD,                                           +\n               RDATA1=R6,                                              +\n               RDATA2=R3\n         CH    R3,H148                        148?\n         BNE   ERR0020                        NO.. BAD NEWS\n         GETMAIN RU,                          GETMAIN FOR VTOC DATA    +\n               LV=VTOCDATA_L,                                          +\n               LOC=ANY\n         ITRACE ID=VTOCDATA,                                           +\n               RDATA1=R1\nNEW      USING VTOCDATA,R1\n         XC    NEW.VTOCDATA(VTOCDATA_L),NEW.VTOCDATA\n         L     R2,WORK_LAST_VTOCDATA          LAST BLOCK ON CHAIN\nPREVIOUS USING VTOCDATA,R2\n         ST    R1,PREVIOUS.VTOC_NEXT          ADD NEW TO CHAIN\n         ST    R2,NEW.VTOC_PREVIOUS\n         ST    R1,WORK_LAST_VTOCDATA          UPDATE LAST ON CHAIN\n         MVC   NEW.VTOC_EYE,VTOC_ID           IDENTIFY THE BLOCK\n         LR    R2,R3                          COPY LENGTH\n         BCTR  R2,0                           COMPUTE LENGTH FOR MVC\n         EX    R2,DATA_MVC                    COPY DATA\n         LA    R0,1                           CONSTANT 1\n         A     R0,COMM_VTOC_DSCBS             PLUS NUMBER SO FAR\n         ST    R0,COMM_VTOC_DSCBS             UPDATE NUMBER OF DSCBS\n* ------------------------------------------------------------------- *\n*        Next record in current buffer                                *\n* ------------------------------------------------------------------- *\nMAIN0040 DS    0H\n         AR    R6,R3                          NEXT IN BUFFER\n         SR    R7,R3                          LENGTH LEFT\n         ITRACE ID=NEXTRECD,                                           +\n               RDATA1=R6,                                              +\n               RDATA2=R7\n         LTR   R7,R7                          ANY DATA LEFT?\n         BNZ   MAIN0020                       YES\n* ------------------------------------------------------------------- *\n*        Update disk address for next read                            *\n* ------------------------------------------------------------------- *\n         ITRACE ID=UPDT_ADR,                                           +\n               DATA1=(WORK_CC,4)\n         CLC   WORK_CC(4),WORK_VTOC_END       AT END OF VTOC?\n         BE    EXIT0000                       YES\n         LH    R1,WORK_HH                     HEAD NUMBER\n         LA    R1,1(,R1)                      NEXT HEAD\n         CH    R1,COMM_MAX_HH                 AT MAX HEAD?\n         BE    MAIN0050                       YES\n         STH   R1,WORK_HH                     UPDATE HEAD\n         ITRACE ID=NEW_HEAD,                                           +\n               DATA1=(WORK_CC,5)\n         B     MAIN0000                       READ NEXT TRACK\nMAIN0050 DS    0H\n         LH    R1,WORK_CC                     CYLINDER NUMBER\n         LA    R1,1(,R1)                      NEXT CYLINDER\n         STH   R1,WORK_CC                     UPDATE CYLINDER\n         XC    WORK_HH,WORK_HH                RESET HEAD NUMBER\n         ITRACE ID=NEW_CYL,                                            +\n               DATA1=(WORK_CC,5)\n         B     MAIN0000                       READ NEXT TRACK\n\nDATA_MVC MVC   NEW.VTOC_DATA,0(R6)            COPY DATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=I_O_ERR,                                            +\n               DATA1=(WORK_ECB,1)\n         DC    H'0'\nERR0020  DS    0H\n         ITRACE ID=NOT_148\n         DC    H'0'\nERR0030  DS    0H\n         ITRACE ID=NOT_AUTH\n         MVI   WORK_RC,12\n         B     EXIT0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=CLOSE\n         MVC   WORK_CLOSE(CLOSE_L),CLOSE_I    INITIALIZE CLOSE\n         CLOSE ((R8)),                        CLOSE VTOC DCB           +\n               MF=(E,WORK_CLOSE)\nEXIT0010 DS    0H\n         SR    R2,R2\n         IC    R2,WORK_RC                     GET RETURN CODE\n         ITRACE ID=EXIT,                                               +\n               RDATA1=R2,                                              +\n               DATA2=(COMM_VTOC_DSCBS,1)\n         LR    R1,R13                         COPY WORK AREA ADDR\n         L     R13,4(,R13)                    RESTORE R13\n         FREEMAIN RU,                         FREE WORK AREA           +\n               A=(1),                                                  +\n               LV=WORK_L\n         L     R14,12(,R13)                   RESTORE R14\n         LR    R15,R2                         SET RC\n         LM    R0,R12,20(R13)                 RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCCW_I    DS    0D\nCCW_I_1  CCW   X'31',*,X'40',5                SEARCH\nCCW_I_2  CCW   X'08',CCW_I_1,0,8              TIC\nCCW_I_3  CCW   X'5E',*,X'20',65535            READ CKD MULTIPLE\nCCW_L    EQU   *-CCW_I\n\nDCB_I    DCB   DSORG=PS,                                               +\n               DDNAME=VZ,                                              +\n               DEVD=DA,                                                +\n               EXLST=*,                                                +\n               MACRF=EXCP\nDCB_L    EQU   *-DCB_I\nOPEN_I   OPEN  (*,INPUT),                                              +\n               MF=L\nOPEN_L   EQU   *-OPEN_I\nCLOSE_I  CLOSE *,                                                      +\n               MF=L\nCLOSE_L  EQU   *-CLOSE_I\n\nH148     DC    H'148'\n\nVTOC_ID  DC    CL8'VTOCDATA'\n\n              LTORG\nDISPEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORK          DSECT\n              COPY  DXDPREF\n\nWORK_CCWS     DS    0D\nWORK_CCW1     DS    D\nWORK_CCW2     DS    D\nWORK_CCW3     DS    D\n\nWORK_DCB      DS    0A,(DCB_L)X\nWORK_ECB      DS    F\nWORK_OPEN     DS    0A,(OPEN_L)X\nWORK_CLOSE    DS    0A,(CLOSE_L)X\nWORK_IOB      DS    0A,(IOB_L)X\nWORK_EXLST    DS    A\nWORK_LAST_VTOCDATA DS   A\nWORK_JFCB     DS    (JFCB_L)X\n\nWORK_CC       DS    H                      CYLINDER NUMBER\nWORK_HH       DS    H                      HEAD NUMBER\nWORK_R        DS    X                      RECORD NUMBER\n\nWORK_RC       DS    X\n\nWORK_VTOC_END DS    XL4\n\nWORK_INIT_L   EQU   *-WORK\n\nWORK_IO       DS    65536X\nWORK_L        EQU   *-WORK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY      VTOCDATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCOUNT              DSECT\nCOUNT_CC           DS    XL2\nCOUNT_HH           DS    XL2\nCOUNT_R            DS    X\nCOUNT_KEY_LENGTH   DS    X\nCOUNT_DATA_LENGTH  DS    XL2\nCOUNT_L            EQU   *-COUNT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD     DSORG=PS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFORMAT_4 DSECT\n         IECSDSL1 4\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\nIOB_L    EQU      *-IOB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZDEB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nJFCB     DSECT\n         IEFJFCBN\nJFCB_L   EQU      *-JFCB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPREAD\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPRECF": {"ttr": 2051, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x07\\x01\\x10\\x03\\x9f\\x01\\x10\\x03\\x9f\\x10'\\x00k\\x00k\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-08T00:00:00", "modifydate": "2010-02-08T10:27:07", "lines": 107, "newlines": 107, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPRECF                                              *\n*                                                                     *\n*   Display/update Record format (RECFM)                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPRECF CSECT\nVZAPRECF AMODE 31\nVZAPRECF RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPRECF,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPRECF'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPRECF)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPRECF,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDRCFM,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         LA    R0,BIT_TABLE                   BIT TABLE\n         ST    R0,COMM_BIT_TABLE\n         L     R15,COMM_V_VZAPBIT1            VZAPBIT1 ENTRY POINT\n         BALR  R14,R15                        CALL VZAPBIT1\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDRCFM)\n              LTORG\n\nBIT_TABLE     DS    0C\n              DC    AL1(DS1RECFF)\n              DC    CL15'DS1RECFF'\n              DC    CL50'Fixed length'\n\n              DC    AL1(DS1RECFV)\n              DC    CL15'DS1RECFV'\n              DC    CL50'Variable length'\n\n              DC    AL1(DS1RECFU)\n              DC    CL15'DS1RECFU'\n              DC    CL50'Undefined length'\n\n              DC    AL1(DS1RECFT)\n              DC    CL15'DS1RECFT'\n              DC    CL50'Track overflow'\n\n              DC    AL1(DS1RECFB)\n              DC    CL15'DS1RECFB'\n              DC    CL50'Blocked'\n\n              DC    AL1(DS1RECFS)\n              DC    CL15'DS1RECFS'\n              DC    CL50'No truncated records (F) or spanned (V)'\n\n              DC    AL1(DS1RECFA)\n              DC    CL15'DS1RECFA'\n              DC    CL50'ANSI control character'\n\n              DC    AL1(DS1RECMC)\n              DC    CL15'DS1RECMC'\n              DC    CL50'Machine control character'\n\n              DC    X'FF'\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDRCFM       DSECT\n              COPY  DXDPREF\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VTOCDATA\n         ORG      VTOC_DSCB\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPRECF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPSCDE": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00Q\\x01\\x10\\x03O\\x01\\x10\\x03\\x9f\\t\"\\x01}\\x01}\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2010-02-03T00:00:00", "modifydate": "2010-02-08T09:22:51", "lines": 381, "newlines": 381, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPSCDE                                              *\n*                                                                     *\n*   Display/update SYSTEM CODE  (DS1SYSCD)                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPSCDE CSECT\nVZAPSCDE AMODE 31\nVZAPSCDE RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPSCDE,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPSCDE'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPSCDE)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPSCDE,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDSCDE,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         L     R9,COMM_VZAPSPFD\n         USING VZAPSPFD,R9\n         L     R8,COMM_SELECTED_DSCB          SELECTED DSCB\n         USING VTOCDATA,R8\n* ------------------------------------------------------------------- *\n*        Copy DSN to allow user to abort                              *\n* ------------------------------------------------------------------- *\n         MVC   DXD_SYSCD,DS1SYSCD             COPY DSN\n* ------------------------------------------------------------------- *\n*        Obtain VDATA for dynamic area                                *\n* ------------------------------------------------------------------- *\n         MVC   COMM_PANEL,FIELD_PANEL         COPY PANEL NAME\n         ITRACE ID=PQRY,                                               +\n               DATA1=COMM_PANEL\n         L     R15,COMM_V_VZAPPQRY            VZAPPQRY ENTRY POINT\n         BALR  R14,R15                        CALL VTOPQRY\n         L     R0,SPF_VDEPTH                  NUMBER OF ROWS\n         MH    R0,SPF_VWIDTH+2                COMPUTE VDATA SIZE\n         ST    R0,COMM_VDATA_LENGTH           SAVE LENGTH\n         GETMAIN RU,                          GETMAIN STORAGE FOR VDATA+\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,COMM_VDATA_ADDR             SAVE ADDR\n         L     R0,COMM_VDATA_LENGTH           LENGTH AGAIN\n         GETMAIN RU,                          GETMAIN SHADOW           +\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,DXD_SHADOW_VDATA            SAVE SHADOW\n         XC    COMM_VDATA_CURSOR,COMM_VDATA_CURSOR\n* ------------------------------------------------------------------- *\n*        Initialize dyamic area                                       *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=INITVDATA\n         L     R0,COMM_VDATA_ADDR             VDATA ADDR\n         L     R1,COMM_VDATA_LENGTH           VDATA LENGTH\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                         INITIALIZE VDATA BUFFER\n* ------------------------------------------------------------------- *\n*        Build detail                                                 *\n* ------------------------------------------------------------------- *\n         ITRACE ID=BUILD\n         L     R7,COMM_VDATA_ADDR             DYNAMIC AREA BUFFER\n         L     R6,DXD_SHADOW_VDATA            SHADOW BUFFER\n         ST    R7,DXD_CHAR_VDATA              SAVE CHAR LINE VDATA\n         ST    R6,DXD_CHAR_SHADOW             SAVE CHAR LINE SHADOW\n         MVC   0(MSG01_L,R7),MSG01\n         USING MSG01,R7\n         MVC   MSG01_DESC,C_CHAR              CHAR LINE\n         MVC   MSG01_DATA,DS1SYSCD            COPY DATA AS IS\n         MVC   0(MSG01_L,R6),0(R7)            COPY TO SHADOW BUFFER\n         DROP  R7\n\n         A     R7,SPF_VWIDTH                  NEXT LINE IN VDATA\n         A     R6,SPF_VWIDTH                  NEXT LINE IN SHADOW\n\n         ST    R7,DXD_ZONE_VDATA              SAVE ZONE LINE VDATA\n         ST    R6,DXD_ZONE_SHADOW             SAVE ZONE LINE SHADOW\n         MVC   0(MSG01_L,R7),MSG01\n         USING MSG01,R7\n         MVC   MSG01_DESC,C_ZONE              ZONE LINE\n         MVC   MSG01_DATA,DS1SYSCD            COPY NAME\n         MVN   MSG01_DATA,COMM_HEXZERO        CLOBBER NUMERICS\n         TR    MSG01_DATA,COMM_TRTABLE        TRANSLATE\n         MVC   0(MSG01_L,R6),0(R7)            COPY TO SHADOW BUFFER\n         DROP  R7\n\n         A     R7,SPF_VWIDTH                  NEXT LINE\n         A     R6,SPF_VWIDTH                  NEXT LINE IN SHADOW\n\n         ST    R7,DXD_NUMR_VDATA              SAVE NUMR LINE VDATA\n         ST    R6,DXD_NUMR_SHADOW             SAVE NUMR LINE SHADOW\n         MVC   0(MSG01_L,R7),MSG01\n         USING MSG01,R7\n         MVC   MSG01_DESC,C_NUMR              NUMERICS LINE\n         MVC   MSG01_DATA,DS1SYSCD            COPY NAME\n         MVZ   MSG01_DATA,COMM_HEXZERO        CLOBBER ZONES\n         TR    MSG01_DATA,COMM_TRTABLE        TRANSLATE\n         MVC   0(MSG01_L,R6),0(R7)            COPY TO SHADOW BUFFER\n         DROP  R7\n\n         A     R7,SPF_VWIDTH                  NEXT LINE (ERROR LINE)\n         ST    R7,DXD_ERROR_VDATA             SAVE ADDR\n* ------------------------------------------------------------------- *\n*        Display                                                      *\n* ------------------------------------------------------------------- *\nMAIN0050 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_PANEL,FIELD_PANEL         COPY PANEL NAME\n         MVC   COMM_VDATA_ADDR,COMM_VDATA_ADDR\n         MVC   COMM_VDATA_LENGTH,COMM_VDATA_LENGTH\n         MVC   COMM_VDATA_CURSOR,COMM_VDATA_CURSOR\n         L     R15,COMM_V_VZAPDISP            VZAPDISP ENTRY POINT\n         BALR  R14,R15                        CALL VZAPDISP\n         ITRACE ID=DISP_RC,                                            +\n               DATA1=(COMM_DISP_RC,2)\n         OC    COMM_DISP_RC,COMM_DISP_RC      RC = 0?\n         BNZ   MAIN0200                       NO\n* ------------------------------------------------------------------- *\n*        Did user want to cancel changes?                             *\n* ------------------------------------------------------------------- *\n         CLC   SPF_ZCMD,COMM_BLANKS           COMMAND BLANK?\n         BE    MAIN0060                       YES\n         CLC   CAN,SPF_ZCMD                   CAN?\n         BE    MAIN0300                       YES\n         CLC   CANCEL,SPF_ZCMD                CANCEL\n         BE    MAIN0300                       YES\n         B     ERR0020                        OTHERWISE BAD COMMAND\n* ------------------------------------------------------------------- *\n*        Character                                                    *\n* ------------------------------------------------------------------- *\nMAIN0060 DS    0H\n         ITRACE ID=CHAR\n         L     R2,DXD_CHAR_VDATA              CHAR IN VDATA\n         AH    R2,DATA_OFFSET\n         OC    0(L'MSG01_DATA,R2),COMM_BLANKS FORCE UPPER CASE\n         LA    R3,L'MSG01_DATA                DATA LENGTH\n         L     R14,DXD_CHAR_SHADOW            CHAR IN SHADOW\n         AH    R14,DATA_OFFSET\n         LR    R15,R3                         COPY LENGTH\nMAIN0100 DS    0H\n         CLCL  R2,R14                         COMPARE BUFFERS\n         BE    MAIN0110                       ALL EQUAL\n         LR    R1,R2                          ADDR COMPARE STOPPED\n         S     R1,DXD_CHAR_VDATA              DISP INTO BUFFER\n         SH    R1,DATA_OFFSET                 MINUS DATA FIELD OFFSET\n         LA    R1,DS1SYSCD(R1)                ADDR OF DATA TO CHANGE\n         MVC   0(1,R1),0(R2)                  COPY TO SYSCD\n         LA    R2,1(,R2)                      NEXT IN VDATA BUFFER\n         BCTR  R3,0                           MINUS 1 IN LENGTH LEFT\n         LA    R14,1(,R14)                    NEXT IN VDATA BUFFER\n         BCT   R15,MAIN0100                   MINUS 1, LOOP\n* ------------------------------------------------------------------- *\n*        Zone                                                         *\n* ------------------------------------------------------------------- *\nMAIN0110 DS    0H\n         ITRACE ID=ZONE\n         L     R2,DXD_ZONE_VDATA              ZONE IN VDATA\n         AH    R2,DATA_OFFSET\n         OC    0(L'MSG01_DATA,R2),COMM_BLANKS FORCE UPPER CASE\n         LA    R3,L'MSG01_DATA                DATA LENGTH\n         L     R14,DXD_ZONE_SHADOW            ZONE IN SHADOW\n         AH    R14,DATA_OFFSET\n         LR    R15,R3                         COPY LENGTH\nMAIN0120 DS    0H\n         CLCL  R2,R14                         COMPARE BUFFERS\n         BE    MAIN0140                       ALL EQUAL\n         CLI   0(R2),C'A'                     VALID HEX?\n         BL    ERR0010                        NO\n         CLI   0(R2),C'F'                     VALID HEX?\n         BNH   MAIN0130                       YES\n         CLI   0(R2),C'0'                     VALID HEX?\n         BL    ERR0010                        NO\nMAIN0130 DS    0H\n         MVC   DXD_WORK,0(R2)                 COPY TO DXD_WORK\n         NI    DXD_WORK,X'1F'                 PREPARE FOR TRANSLATE\n         TR    DXD_WORK,COMM_CHARHEX          TRANSLATE\n         LR    R1,R2                          ADDR COMPARE STOPPED\n         S     R1,DXD_ZONE_VDATA              DISP INTO BUFFER\n         SH    R1,DATA_OFFSET                 MINUS DATA FIELD OFFSET\n         LA    R1,DS1SYSCD(R1)                ADDR OF DATA TO CHANGE\n         MVZ   0(1,R1),DXD_WORK               COPY ZONE\n         LA    R2,1(,R2)                      NEXT IN VDATA BUFFER\n         BCTR  R3,0                           MINUS 1 IN LENGTH LEFT\n         LA    R14,1(,R14)                    NEXT IN VDATA BUFFER\n         BCT   R15,MAIN0120                   MINUS 1, LOOP\n* ------------------------------------------------------------------- *\n*        Numeric                                                      *\n* ------------------------------------------------------------------- *\nMAIN0140 DS    0H\n         ITRACE ID=NUMR\n         L     R2,DXD_NUMR_VDATA              NUMERIC IN VDATA\n         AH    R2,DATA_OFFSET\n         OC    0(L'MSG01_DATA,R2),COMM_BLANKS FORCE UPPER CASE\n         LA    R3,L'MSG01_DATA                LENGTH\n         L     R14,DXD_NUMR_SHADOW            NUMERIC IN SHADOW\n         AH    R14,DATA_OFFSET\n         LR    R15,R3                         COPY LENGTH\nMAIN0150 DS    0H\n         CLCL  R2,R14                         COMPARE BUFFERS\n         BE    MAIN0010                       ALL EQUAL\n         CLI   0(R2),C'A'                     VALID HEX?\n         BL    ERR0010                        NO\n         CLI   0(R2),C'F'                     VALID HEX?\n         BNH   MAIN0160                       YES\n         CLI   0(R2),C'0'                     VALID HEX?\n         BL    ERR0010                        NO\nMAIN0160 DS    0H\n         MVC   DXD_WORK,0(R2)                 COPY TO DXD_WORK\n         NI    DXD_WORK,X'1F'                 PREPARE FOR TRANSLATE\n         TR    DXD_WORK,COMM_CHARHEX          TRANSLATE\n         LR    R1,R2                          ADDR COMPARE STOPPED\n         S     R1,DXD_NUMR_VDATA              DISP INTO BUFFER\n         SH    R1,DATA_OFFSET                 MINUS DATA FIELD OFFSET\n         LA    R1,DS1SYSCD(R1)                ADDR OF DATA TO CHANGE\n         MVN   0(1,R1),DXD_WORK               COPY NUMERIC\n         LA    R2,1(,R2)                      NEXT IN VDATA BUFFER\n         BCTR  R3,0                           MINUS 1 IN LENGTH LEFT\n         LA    R14,1(,R14)                    NEXT IN VDATA BUFFER\n         BCT   R15,MAIN0150                   MINUS 1, LOOP\n         B     MAIN0010\n* ------------------------------------------------------------------- *\n*        Exiting.  Has SYSCD been changed?                            *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         CLC   DXD_SYSCD,DS1SYSCD             SYSCD CHANGED?\n         BE    EXIT0000                       NO\n         ITRACE ID=UPDATE\n         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING\n         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         ITRACE ID=CANCEL\n         MVC   SPF_ZCMD,COMM_BLANKS\n         CLC   DXD_SYSCD,DS1SYSCD             SYSCD CHANGED?\n         BE    EXIT0000                       NO\n         MVC   SPF_MSG_1(EMSG02_L),EMSG02     CHANGE DISCARDED\n         MVC   DS1SYSCD,DXD_SYSCD             COPY ORIGINAL NAME BACK\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=BADDIGIT,                                           +\n               RDATA1=R2,                                              +\n               DATA2=(0(R2),1)\n         LR    R1,R2                          ADDR SCAN STOPPED\n         S     R1,COMM_VDATA_ADDR             DISP IN TO DATA\n         A     R1,DXD_ERROR_VDATA             PLUS ERROR MSG AREA ADDR\n         MVI   0(R1),C'+'                     FLAG BYTE WHERE DATA IS\n         MVC   SPF_MSG_1(EMSG01_L),EMSG01     COPY MESSAGE\n         B     MAIN0050\nERR0020  DS    0H\n         MVC   SPF_MSG_1(EMSG03_L),EMSG03     COPY MESSAGE\n         B     MAIN0050\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         ICM   R1,15,COMM_VDATA_ADDR          VDATA GETMAINED?\n         BZ    EXIT0010                       NO\n         L     R0,COMM_VDATA_LENGTH           LENGTH\n         FREEMAIN RU,                         FREEMAIN VDATA           +\n               A=(1),                                                  +\n               LV=(0)\nEXIT0010 DS    0H\n         ICM   R1,15,DXD_SHADOW_VDATA         SHADOW BUFFER PRESENT?\n         BZ    EXIT0020                       NO\n         L     R0,COMM_VDATA_LENGTH\n         FREEMAIN RU,                         FREEMAIN VDATA           +\n               A=(1),                                                  +\n               LV=(0)\nEXIT0020 DS    0H\n         XC    COMM_VDATA_ADDR,COMM_VDATA_ADDR\n         XC    COMM_VDATA_LENGTH,COMM_VDATA_LENGTH\n         XC    DXD_SHADOW_VDATA,DXD_SHADOW_VDATA\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDSCDE)\n              LTORG\n\nDATA_OFFSET   DC    Y(MSG01_DATA-MSG01)\n\nC_CHAR        DC    C'CHAR'\nC_NUMR        DC    C'NUMR'\nC_ZONE        DC    C'ZONE'\n\nCAN           DC    C'CAN '\nCANCEL        DC    C'CANCEL '\n\nFIELD_PANEL   DC    CL8'VZAPFLD'\n\nEMSG01        DS    0C\n              DC    C'VZAPSCDE01E Bad hex digit'\nEMSG01_L      EQU   *-EMSG01\n\nEMSG02        DS    0C\n              DC    C'VZAPSCDE02W Change to system code cancelled'\nEMSG02_L      EQU   *-EMSG02\n\nEMSG03        DS    0C\n              DC    C'VZAPSCDE03E Invalid command'\nEMSG03_L      EQU   *-EMSG03\n\nMSG01         DS    0C\n              DC    AL1($SCREEN_ATTR_HIGH_TURQUOISE)\nMSG01_DESC    DC    CL4' '\n              DC    AL1($SCREEN_ATTR_INPUT)\nMSG01_DATA    DC    CL13' '\n              DC    AL1($SCREEN_ATTR_NORMAL)\nMSG01_L       EQU   *-MSG01\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSCDE       DSECT\n              COPY  DXDPREF\n\nDXD_SHADOW_VDATA    DS   A\nDXD_CHAR_VDATA      DS   A\nDXD_CHAR_SHADOW     DS   A\nDXD_ZONE_VDATA      DS   A\nDXD_ZONE_SHADOW     DS   A\nDXD_NUMR_VDATA      DS   A\nDXD_NUMR_SHADOW     DS   A\nDXD_ERROR_VDATA     DS   A\n\nDXD_WORK      DS    X\n\nDXD_SYSCD     DS    CL13\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VTOCDATA\n         ORG      VTOC_DSCB\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     ATTRS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPSCDE\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPSMS": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00&\\x01\\x10\\x03\\x9f\\x01\\x10\\x03\\x9f\\t3\\x00i\\x00i\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-08T00:00:00", "modifydate": "2010-02-08T09:33:26", "lines": 105, "newlines": 105, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPSMS                                               *\n*                                                                     *\n*   Display/update SMS flags   (DS1SMSFG)                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPSMS CSECT\nVZAPSMS AMODE 31\nVZAPSMS RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPSMS,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPSMS'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPSMS)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPSMS,R10                    DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDSMS,R13                     DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         LA    R0,BIT_TABLE                   FIRST BIT FLAG\n         ST    R0,COMM_BIT_TABLE              SET ADDRESS\n         L     R15,COMM_V_VZAPBIT1            VZAPBIT1 ENTRY POINT\n         BALR  R14,R15                        CALL VZAPBIT1\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDSMS)\n              LTORG\n\nBIT_TABLE     DS    0C\n              DC    AL1(DS1SMSDS)\n              DC    CL15'DS1SMSDS'\n              DC    CL50'SMS managed data set'\n\n              DC    AL1(DS1SMSUC)\n              DC    CL15'DS1SMSUC'\n              DC    CL50'No BCS entry exists'\n\n              DC    AL1(DS1REBLK)\n              DC    CL15'DS1REBLK'\n              DC    CL50'SDB and data set may be reblocked'\n\n              DC    AL1(DS1CRSDB)\n              DC    CL15'DS1CRSDB'\n              DC    CL50'DADSM originated BLKSIZE'\n\n              DC    AL1(DS1PDSE)\n              DC    CL15'DS1PDSE '\n              DC    CL50'Data set is a PDSE'\n\n              DC    AL1(DS1STRP)\n              DC    CL15'DS1STRP'\n              DC    CL50'Extended format'\n\n              DC    AL1(DS1PDSEX)\n              DC    CL15'DS1PDSEX'\n              DC    CL50'Data set is an HFS'\n\n              DC    AL1(DS1DSAE)\n              DC    CL15'DS1DSAE '\n              DC    CL50'Extended attributes exist'\n\n              DC    X'FF'\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSMS        DSECT\n              COPY  DXDPREF\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n              COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFORMAT_1      DSECT\n              IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPSMS\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPSPFD": {"ttr": 3341, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00'\\x01\\x10\\x02\\x7f\\x01\\x10\\x04\\x8f\\x164\\x00\\x0b\\x00\\x0b\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "2010-01-27T00:00:00", "modifydate": "2010-02-17T16:34:27", "lines": 11, "newlines": 11, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*     This is separately LINKEDITed because the contents will         *\n*     be modified as VTOC ZAP runs.  The main parts of VTOC ZAP       *\n*     are re-entrant, refreshable, and re-usable.                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n       VZAPSPFD TYPE=CSECT\n       END     VZAPSPFD\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPSPFV": {"ttr": 3343, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00D\\x01\\x10\\x03\\x9f\\x01\\x10\\x04\\x8f\\x164\\x00\\xaf\\x00\\xaf\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2010-02-08T00:00:00", "modifydate": "2010-02-17T16:34:44", "lines": 175, "newlines": 175, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*     This is separately LINKEDITed because the contents will         *\n*     be modified as VTOC ZAP runs.  The main parts of VTOC ZAP       *\n*     are re-entrant, refreshable, and re-usable.                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPSPFV CSECT\nVZAPSPFV AMODE 31\nVZAPSPFV RMODE ANY\n         VDEF  BASE=VZAPSPFD\n* ------------------------------------------------------------------- *\n*       System variables                                              *\n* ------------------------------------------------------------------- *\n         VDEF  NAME=LVLINE,          DEFINE VARIABLE                   +\n               DATA=SPF_LVLINE,      .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VWIDTH,          DEFINE VARIABLE                   +\n               DATA=SPF_VWIDTH,      .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VDEPTH,          DEFINE VARIABLE                   +\n               DATA=SPF_VDEPTH,      .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=ZSCROLLN,        DEFINE VARIABLE                   +\n               DATA=SPF_ZSCROLLN,    .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VPOS,            DEFINE VARIABLE                   +\n               DATA=SPF_CURSOR_POSITION,      NAME IN VZAPSPFD         +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VTYPE,           DEFINE VARIABLE                   +\n               DATA=SPF_VTYPE,       .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=ZSCROLLA,        DEFINE VARIABLE                   +\n               DATA=SPF_ZSCROLLA,    .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=ZVERB,           DEFINE VARIABLE                   +\n               DATA=SPF_ZVERB,       .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=ZCMD,            DEFINE VARIABLE                   +\n               DATA=SPF_ZCMD,        .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=80,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=ZSCREENC,        DEFINE VARIABLE                   +\n               DATA=SPF_ZSCREENC,    .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=5,             .. LENGTH                         +\n               FORM=CHAR,            .. FORMAT                         +\n               FLAGS=$VGET            .. NEVER VDEFINED\n\n         VDEF  NAME=VSCR,            DEFINE VARIABLE                   +\n               DATA=SPF_VSCR,        .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=CHAR,            .. FORMAT                         +\n               FLAGS=$VNEVER          .. NEVER VDEFINED\n\n* ------------------------------------------------------------------- *\n*        VZAPZAP variables                                            *\n* ------------------------------------------------------------------- *\n         VDEF  NAME=PDSN,            DEFINE VARIABLE                   +\n               DATA=SPF_DSN,         .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=44,            .. LENGTH                         +\n               FORM=CHAR,            .. FORMAT                         +\n               FLAGS=$VGET           .. VGET WHEN VDEFINED\n         VDEF  NAME=PDD,             DEFINE VARIABLE                   +\n               DATA=SPF_DD,          .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=08,            .. LENGTH                         +\n               FORM=CHAR,            .. FORMAT                         +\n               FLAGS=$VGET           .. VGET WHEN VDEFINED\n         VDEF  NAME=PUNIT,           DEFINE VARIABLE                   +\n               DATA=SPF_UNIT,        .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=08,            .. LENGTH                         +\n               FORM=CHAR,            .. FORMAT                         +\n               FLAGS=$VGET           .. VGET WHEN VDEFINED\n         VDEF  NAME=PVOLSER,         DEFINE VARIABLE                   +\n               DATA=SPF_VOLSER,      .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=06,            .. LENGTH                         +\n               FORM=CHAR,            .. FORMAT                         +\n               FLAGS=$VGET           .. VGET WHEN VDEFINED\n         VDEF  NAME=PCCHHR,          DEFINE VARIABLE                   +\n               DATA=SPF_CCHHR,       .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=15,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PLABEL,          DEFINE VARIABLE                   +\n               DATA=SPF_LABEL,       .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=08,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PDESC,           DEFINE VARIABLE                   +\n               DATA=SPF_DESC,        .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=50,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PYN,             DEFINE VARIABLE                   +\n               DATA=SPF_YES_OR_NO,   .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=03,            .. LENGTH                         +\n               FORM=CHAR,            .. FORMAT                         +\n               FLAGS=$VGET           .. VGET WHEN VDEFINED\n         VDEF  NAME=PAREA,           DEFINE VARIABLE                   +\n               DATA=SPF_AREA,        .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR,            .. FORMAT                         +\n               FLAGS=$VGET           .. VGET WHEN VDEFINED\n         VDEF  NAME=DDID,            DEFINE VARIABLE                   +\n               DATA=SPF_DDID,        .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n\n         VDEF  NAME=P,               DEFINE VARIABLE                   +\n               DATA=SPF_1,           .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=01,            .. LENGTH                         +\n               FORM=CHAR,            .. FORMAT                         +\n               FLAGS=$VGET           .. VGET WHEN VDEFINED\n\n         VDEF  NAME=P2,              DEFINE VARIABLE                   +\n               DATA=SPF_2,           .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=02,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n\n         VDEF  NAME=P3,              DEFINE VARIABLE                   +\n               DATA=SPF_3,           .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=03,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n\n         VDEF  NAME=P4,              DEFINE VARIABLE                   +\n               DATA=SPF_4,           .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=04,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n\n         VDEF  NAME=P5,              DEFINE VARIABLE                   +\n               DATA=SPF_5,           .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=05,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n\n         VDEF  NAME=P8,              DEFINE VARIABLE                   +\n               DATA=SPF_8,           .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=08,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n\n         VDEF  NAME=PMSG1,           DEFINE VARIABLE                   +\n               DATA=SPF_MSG_1,       .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=80,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PMSG2,           DEFINE VARIABLE                   +\n               DATA=SPF_MSG_2,       .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=80,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PMSG3,           DEFINE VARIABLE                   +\n               DATA=SPF_MSG_3,       .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=80,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PMSG4,           DEFINE VARIABLE                   +\n               DATA=SPF_MSG_4,       .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=80,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PMSG5,           DEFINE VARIABLE                   +\n               DATA=SPF_MSG_5,       .. FIELD NAME IN VZAPSPFD         +\n               LENGTH=80,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         DC    X'FF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  VARDSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n         END   VZAPSPFV\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPVMGR": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00(\\x01\\x10\\x03O\\x01\\x10\\x03\\x9f\\t#\\x01\\xa4\\x01\\xa4\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2010-02-03T00:00:00", "modifydate": "2010-02-08T09:23:28", "lines": 420, "newlines": 420, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: VZAPVMGR                                              *\n*                                                                     *\n*  Define or delete SPF variables.                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPVMGR CSECT\nVZAPVMGR AMODE 31\nVZAPVMGR RMODE ANY\n         USING VZAPVMGR,R15\n         USING VZAPCOMM,R12\n         USING VAR_DSECT,R6                   DEFINE BASE\n         B     INIT0000\nMODID    DC    CL8'VZAPVMGR'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(VARMGREND-VZAPVMGR)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R10,R15                        COPY BASE ADDRESS\n         DROP  R15\n         USING VZAPVMGR,R10\n         L     R15,COMM_DXD                   DXD AREA BASE ADDRESS\n         A     R15,DXD_START                  PLUS OFFSET\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                        COPY DXD AREA ADDRESS\n         USING DXDVMGR,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n* ------------------------------------------------------------------- *\n         ITRACE ID=ENTRY,                                              +\n               DATA1=(COMM_VAR_COMMAND,1),                             +\n               DATA2=COMM_VARIABLE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVAR0010  DS    0H\n         CLI   COMM_VAR_COMMAND,$VAR_DEFINE   DEFINE VARIABLES?\n         BE    VAR0100                        YES\n         CLI   COMM_VAR_COMMAND,$VAR_DELETE   DELETE VARIABLE?\n         BE    VAR0200                        YES\n         CLI   COMM_VAR_COMMAND,$VAR_GET      VGET VARIABLE?\n         BE    VAR0300                        YES\n         CLI   COMM_VAR_COMMAND,$VAR_PUT      VPUT VARIABLE?\n         BE    VAR0400                        YES\n         ITRACE ID=BADCMD\n         ABEND 1,DUMP,,USER                   BAD COMMAND\n* ------------------------------------------------------------------- *\n*        PROCESS DEFINE COMMANDS                                      *\n* ------------------------------------------------------------------- *\nVAR0100  DS    0H\n         ITRACE ID=DEFINE\n         CLC   VDATA,COMM_VARIABLE            VDATA?\n         BE    VAR0180                        YES.. DONE SPECIFICALLY\n         CLC   COMM_VARIABLE,ALL              ALL VARIABLES?\n         BNE   VAR0130                        NO\n* ------------------------------------------------------------------- *\n*        VDEFINE ALL VARIABLES                                        *\n* ------------------------------------------------------------------- *\n         ITRACE ID=ALL\n         L     R6,COMM_VZAPSPFV\nVAR0110  DS    0H\n         TM    VAR_FLAG,$VDEFINE              VARIABLE ALREADY DEFINED?\n         BO    VAR0120                        YES\n         TM    VAR_FLAG,$VNEVER               NEVER DEFINE?\n         BO    VAR0120                        YES\n         MVI   DXD_FLAGS,0                    RESET FLAGS\n         BAL   R5,VAR0170                     VDEFINE VARIABLE\nVAR0120  DS    0H\n         LA    R6,VAR_DSECT_L(,R6)            NEXT VARIABLE\n         CLI   0(R6),X'FF'                    END OF TABLE?\n         BNE   VAR0110                        NO\n         B     EXIT0000                       ALL PROCESSED\n* ------------------------------------------------------------------- *\n*        VDEFINE specific variable                                    *\n* ------------------------------------------------------------------- *\nVAR0130  DS    0H\n         L     R6,COMM_VZAPSPFV               FIRST VARIABLE\nVAR0140  DS    0H\n         CLC   VAR_NAME,COMM_VARIABLE         LOCATED THE VARIABLE?\n         BE    VAR0150\n         LA    R6,VAR_DSECT_L(,R6)            NEXT VARIABLE\n         CLI   0(R6),X'FF'                    END OF TABLE?\n         BE    ERR0010                        YES\n         B     VAR0140\nVAR0150  DS    0H\n         TM    VAR_FLAG,$VDEFINE              VDEFINED?\n         BNO   VAR0160                        NO\n         BAL   R5,VAR0250                     VDELETE IT\nVAR0160  DS    0H\n         BAL   R5,VAR0170                     VDEFINE IT\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVAR0170  DS    0H\n         LA    R1,VDEFINE                     COMMAND'S ADDRESS\n         ST    R1,DXD_SPF1                    SET ADDRESS IN PARM LIST\n         LA    R1,VAR_NAME                    VARIABLE'S NAME\n         ST    R1,DXD_SPF2                    SET NAME'S ADDRESS\n         SR    R3,R3                          CLEAR REGISTER\n         ICM   R3,3,VAR_DISP                  DISPLACEMENT TO DATA\n         A     R3,COMM_VZAPSPFD               PLUS BASE ADDRESS\n         ST    R3,DXD_SPF3                    SET ADDRESS IN PARM LIST\n         LA    R1,VAR_FORMAT                  DATA FORMAT\n         ST    R1,DXD_SPF4                    SET ADDRESS IN PARM LIST\n         LA    R1,VAR_LENGTH                  VARIABLE LENGTH\n         ST    R1,DXD_SPF5                    SET ADDRESS IN PARM LIST\n         OI    DXD_SPF5,X'80'                 SET END-OF-LIST\n         LA    R1,DXD_SPFP                    SPF PARM LIST ADDRESS\n         ITRACE ID=VDEFINE,                   DEFINING A VARIABLE      +\n               DATA1=VAR_NAME,                .. VARIABLE'S NAME       +\n               RDATA2=R1                      .. ADDRESS OF PARMS\n         L     R15,COMM_ISPLINK               SPFLINK ENTRY POINT\n         BALR  R14,R15                        LINK TO SPF\n         ITRACE ID=VDEF_RC,                                            +\n               RDATA1=R15\n         LTR   R15,R15                        VDEFINE SUCCESSFUL?\n         BNZ   ERR0020                        NO\n         OI    VAR_FLAG,$VDEFINE              VARIABLE HAS BEEN DEFINED\n         TM    VAR_FLAG,$VGET                 VGET NOW?\n         BNOR  R5                             NO\n         MVC   DXD_NAMELIST,COMM_BLANKS\n         MVC   DXD_NAMELIST+1(8),VAR_NAME\n         BAL   R7,VAR0310                     VGET THE VARIABLE\n         BR    R5\n* ------------------------------------------------------------------- *\n*        VDEFINE VDATA                                                *\n* ------------------------------------------------------------------- *\nVAR0180  DS    0H\n         ITRACE ID=VDATA,                                              +\n               DATA1=(COMM_VDATA_ADDR,4),                              +\n               DATA2=(COMM_VDATA_LENGTH,4)\n         LA    R1,VDEFINE                     COMMAND'S ADDRESS\n         ST    R1,DXD_SPF1                    SET ADDRESS IN PARM LIST\n         LA    R1,COMM_VARIABLE               VARIABLE'S NAME\n         ST    R1,DXD_SPF2                    SET NAME'S ADDRESS\n         MVC   DXD_SPF3,COMM_VDATA_ADDR       DATA ADDRESS\n         LA    R1,CHAR                        CHARACTER\n         ST    R1,DXD_SPF4                    SET ADDRESS IN PARM LIST\n         LA    R1,COMM_VDATA_LENGTH           VARIABLE LENGTH\n         ST    R1,DXD_SPF5                    SET ADDRESS IN PARM LIST\n         OI    DXD_SPF5,X'80'                 SET END-OF-LIST\n         LA    R1,DXD_SPFP                    SPF PARM LIST ADDRESS\n         ITRACE ID=VDEFINE,                   DEFINING A VARIABLE      +\n               DATA1=COMM_VARIABLE,           .. VARIABLE'S NAME       +\n               RDATA2=R1                      .. ADDRESS OF PARMS\n         L     R15,COMM_ISPLINK               SPFLINK ENTRY POINT\n         BALR  R14,R15                        LINK TO SPF\n         ITRACE ID=VDEF_RC,                                            +\n               RDATA1=R15\n         LTR   R15,R15                        VDEFINE SUCCESSFUL?\n         BNZ   ERR0020                        NO\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        PROCESS VARIABLE DELETION                                    *\n* ------------------------------------------------------------------- *\nVAR0200  DS    0H\n         ITRACE ID=DELETE                     DELETING ALL VARIABLES\n         CLC   VDATA,COMM_VARIABLE            VDATA?\n         BE    VAR0270                        YES\n         MVC   DXD_POOL,SHARED\n         CLC   ALL,COMM_VARIABLE              ALL?\n         BNE   VAR0220                        NO\n* ------------------------------------------------------------------- *\n*        DELETE ALL VARIABLES                                         *\n* ------------------------------------------------------------------- *\n         L     R6,COMM_VZAPSPFV               START WITH FIRST VARIABLE\nVAR0210  DS    0H\n         BAL   R5,VAR0250\n         LA    R6,VAR_DSECT_L(,R6)            NEXT VARIABLE\n         CLI   0(R6),X'FF'                    END OF TABLE?\n         BE    EXIT0000                       YES\n         B     VAR0210                        PROCESS ALL VARIABLES\n* ------------------------------------------------------------------- *\n*        DELETE SPECIFIC VARIABLE                                     *\n* ------------------------------------------------------------------- *\nVAR0220  DS    0H\n         L     R6,COMM_VZAPSPFV               FIRST VARIABLE\nVAR0230  DS    0H\n         CLC   VAR_NAME,COMM_VARIABLE         VARIABLE LOCATED?\n         BE    VAR0240                        YES\n         LA    R6,VAR_DSECT_L(,R6)            NEXT VARIABLE\n         CLI   0(R6),X'FF'                    END OF TABLE?\n         BNE   VAR0230                        NO\n         B     ERR0010                        VARIABLE NOT FOUND\nVAR0240  DS    0H\n         BAL   R5,VAR0250\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        DELETE VARIABLE                                              *\n* ------------------------------------------------------------------- *\nVAR0250  DS    0H\n         ITRACE ID=A,RDATA1=R6,DATA2=VAR_NAME\n         TM    VAR_FLAG,$VDEFINE              VARIABLE DEFINED?\n         BNOR  R5                             NO\n         TM    VAR_FLAG,$VPUT                 VPUT BEFORE DELETING?\n         BNO   VAR0260                        NO\n         MVC   DXD_NAMELIST+1(8),VAR_NAME\n         BAL   R7,VAR0410\nVAR0260  DS    0H\n         LA    R0,VDELETE                     COMMAND'S ADDRESS\n         ST    R0,DXD_SPF1                    SET ADDRESS IN PARM LIST\n         ST    R6,DXD_SPF2                    SET VARIABLE NAME ADDRESS\n         OI    DXD_SPF2,X'80'                 FLAG END-OF-LIST\n         ITRACE ID=VDELETE,                   DELETING A VARIABLE      +\n               DATA1=VAR_NAME                 .. VARIABLE NAME\n         LA    R1,DXD_SPFP                    PARM LIST'S ADDRESS\n         L     R15,COMM_ISPLINK               SPFLINK ENTRY POINT\n         BALR  R14,R15                        LINK TO SPF\n         LTR   R15,R15                        VDELETE SUCCESSFUL?\n         BNZ   ERR0030                        NO\n         BR    R5\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVAR0270  DS    0H\n         LA    R0,VDELETE                     COMMAND'S ADDRESS\n         ST    R0,DXD_SPF1                    SET ADDRESS IN PARM LIST\n         LA    R0,COMM_VARIABLE               VARIABLE TO DELETE\n         ST    R0,DXD_SPF2                    SET VARIABLE NAME ADDRESS\n         OI    DXD_SPF2,X'80'                 FLAG END-OF-LIST\n         ITRACE ID=VDELETE,                   DELETING A VARIABLE      +\n               DATA1=COMM_VARIABLE            .. VARIABLE NAME\n         LA    R1,DXD_SPFP                    PARM LIST'S ADDRESS\n         L     R15,COMM_ISPLINK               SPFLINK ENTRY POINT\n         BALR  R14,R15                        LINK TO SPF\n         ITRACE ID=RC,                                                 +\n               RDATA1=R15\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVAR0300  DS    0H\n         MVC   DXD_NAMELIST,COMM_BLANKS\n         MVC   DXD_NAMELIST+1(8),COMM_VARIABLE\n         BAL   R7,VAR0310                     DO VGET\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        VGET a variable                                              *\n* ------------------------------------------------------------------- *\nVAR0310  DS    0H\n         MVI   DXD_NAMELIST+0,C'('\n         LA    R1,DXD_NAMELIST+10\n         LA    R2,8\nVAR0320  DS    0H\n         CLI   0(R1),C' '\n         BNE   VAR0330\n         BCTR  R1,0\n         BCT   R2,VAR0320\nVAR0330  DS    0H\n         MVI   1(R1),C')'\n         LA    R0,VGET                        VGET COMMAND\n         ST    R0,DXD_SPF1                    SET ADDRESS\n         LA    R0,DXD_NAMELIST          < --  DON'T LIKE THE CLOSE NAME\n         ST    R0,DXD_SPF2                    SET NAME\n         LA    R0,DXD_POOL                    SHARED OF PROFILE POOL\n         ST    R0,DXD_SPF3\n         OI    DXD_SPF3,X'80'                 FLAG END-OF-LIST\n         TM    VAR_FLAG,$VPUT                 THIS VARIABLE SAVED?\n         BO    VAR0340                        YES\n         ITRACE ID=SHARED\n         MVC   DXD_POOL,SHARED                FROM SHARED POOL\n         B     VAR0350\nVAR0340  DS    0H\n         ITRACE ID=PROFILE\n         MVC   DXD_POOL,PROFILE\nVAR0350  DS    0H\n         ST    R0,DXD_SPF3                    SET ADDRESS\n         ITRACE ID=VGET,                                               +\n               DATA1=DXD_NAMELIST+1,                                   +\n               DATA2=DXD_POOL\n         LA    R1,DXD_SPF1\n         L     R15,COMM_ISPLINK               SPF ENTRY POINT\n         BALR  R14,R15\n         ITRACE ID=VGET_RC,                                            +\n               RDATA1=R15,                                             +\n               DATA2=0(R3)\n         LTR   R15,R15                        SUCCESSFUL?\n         BZR   R7                             YES\n         TM    DXD_FLAGS,$DXD_VPUT            VPUT ISSUED?\n         BO    ERR0040\n         LA    R0,VPUT\n         ST    R0,DXD_SPF1\n         LA    R1,DXD_SPF1                    CHANGE VGET TO VPUT\n         ITRACE ID=VPUT,                                               +\n               DATA1=DXD_NAMELIST+1,                                   +\n               DATA2=DXD_POOL\n         L     R15,COMM_ISPLINK               SPF ENTRY POINT\n         BALR  R14,R15\n         ITRACE ID=VPUT_RC,                                            +\n               RDATA1=R15,                                             +\n               DATA2=0(R3)\n         OI    DXD_FLAGS,$DXD_VPUT\n         B     VAR0330                        TRY AGAIN\n* ------------------------------------------------------------------- *\n*        VPUT A VARIABLE                                              *\n* ------------------------------------------------------------------- *\nVAR0400  DS    0H\n         MVC   DXD_NAMELIST+1(8),COMM_VARIABLE\n         BAL   R7,VAR0410                     VPUT THE VARIABLE\n         B     EXIT0000\nVAR0410  DS    0H\n         MVI   DXD_NAMELIST+0,C'('\n         LA    R1,DXD_NAMELIST+10\n         LA    R2,8\nVAR0420  DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BNE   VAR0430                        NO\n         BCTR  R1,0                           BACK UP 1\n         BCT   R2,VAR0420                     LOOP\nVAR0430  DS    0H\n         MVI   1(R1),C')'                     INSERT CLOSING PAREN\n         LA    R0,VPUT                        SPF COMMAND\n         ST    R0,DXD_SPF1                    SET ADDRESS\n         LA    R0,DXD_NAMELIST                NAME LIST\n         ST    R0,DXD_SPF2                    SET ADDRESS\n         LA    R0,DXD_POOL\n         ST    R0,DXD_SPF3\n         OI    DXD_SPF3,X'80'\n         ITRACE ID=VPUT,                                               +\n               DATA1=DXD_NAMELIST+1,                                   +\n               DATA2=DXD_POOL\n         LA    R1,DXD_SPF1                    SPF PARM LIST\n         L     R15,COMM_ISPLINK               SPF ENTRY POINT\n         BALR  R14,R15                        VPUT THE VARIABLE\n         ITRACE ID=VPUT_RC,                   TRACE VPUT RC            +\n               RDATA1=R15\n         LTR   R15,R15                        VPUT OK?\n         BNZ   ERR0050                        NO\n         BR    R7\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=BAD_VAR\n         DC    H'1'\nERR0020  DS    0H\n         ITRACE ID=VDEFFAIL,                                           +\n               RDATA1=R15\n         DC    H'2'\nERR0030  DS    0H\n         ITRACE ID=VDELFAIL,                                           +\n               RDATA1=R15\n         DC    H'3'\nERR0040  DS    0H\n         ITRACE ID=VGETFAIL,                                           +\n               RDATA1=R15\n         DC    H'4'\nERR0050  DS    0H\n         ITRACE ID=VPUTFAIL,                                           +\n               RDATA1=R15\n         DC    H'5'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START DC    Q(DXDVMGR)\nVARNAME_I DC    F'1'\n          DC    F'0'\n          DC    CL8' '\nVARNAME_L EQU   *-VARNAME_I\nALL       DC    CL8'ALL'\nCHAR      DC    CL8'CHAR'\nVDATA     DC    CL8'VDATA'\nVDEFINE   DC    CL8'VDEFINE'\nVDELETE   DC    CL8'VDELETE'\nVGET      DC    CL8'VGET'\nVPUT      DC    CL8'VPUT'\nPROFILE   DC    CL8'PROFILE'\nSHARED    DC    CL8'SHARED'\n          LTORG\nVARMGREND EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDVMGR      DSECT\n             COPY  DXDPREF\nDXD_SPFP     DS    0A                    ISPF PARM LIST\nDXD_SPF1     DS    A                     PARM 1 ADDRESS\nDXD_SPF2     DS    A                     PARM 2 ADDRESS\nDXD_SPF3     DS    A                     PARM 3 ADDRESS\nDXD_SPF4     DS    A                     PARM 4 ADDRESS\nDXD_SPF5     DS    A                     PARM 5 ADDRESS\n\nDXD_FLAGS    DS    X\n$DXD_VPUT    EQU   X'80'\n\nDXD_NAMELIST DS    CL12\n\nDXD_POOL     DS    CL8\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VARDSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPVMGR\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPVPTR": {"ttr": 2062, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x01\\x10\\x04\\x0f\\x01\\x10\\x04\\x0f\\t)\\x01\\x93\\x01\\x93\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-09T00:00:00", "modifydate": "2010-02-09T09:29:40", "lines": 403, "newlines": 403, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPVPTR                                              *\n*                                                                     *\n*   Display/update Format-3, format-8, or format-9 address            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPVPTR CSECT\nVZAPVPTR AMODE 31\nVZAPVPTR RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPVPTR,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPVPTR'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPVPTR)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPVPTR,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDVPTR,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         L     R9,COMM_VZAPSPFD\n         USING VZAPSPFD,R9\n         L     R8,COMM_SELECTED_DSCB          SELECTED DSCB\n         USING VTOCDATA,R8\n         L     R5,COMM_SELECTED_FIELD         SELECTED FIELD\n         USING FIELD_DSECT,R5\n         ITRACE ID=FIELD,                                              +\n               DATA1=FIELD_LABEL,                                      +\n               DATA2=(FIELD_DISP,2)\n         SR    R4,R4\n         ICM   R4,3,FIELD_DISP                DISP TO DATA\n         AR    R4,R8                          PLUS BASE\n* ------------------------------------------------------------------- *\n*        Copy extent info to allow user to abort                      *\n* ------------------------------------------------------------------- *\n         ITRACE ID=DATA,                                               +\n               RDATA1=R4,                                              +\n               DATA2=0(R4)\n         MVC   DXD_DISK_ADDRESS,0(R4)         SAVE DISK ADDRESS\n* ------------------------------------------------------------------- *\n*        Obtain VDATA for dynamic area                                *\n* ------------------------------------------------------------------- *\n         MVC   COMM_PANEL,FIELD_PANEL         COPY PANEL NAME\n         ITRACE ID=PQRY,                                               +\n               DATA1=COMM_PANEL\n         L     R15,COMM_V_VZAPPQRY            VZAPPQRY ENTRY POINT\n         BALR  R14,R15                        CALL VTOPQRY\n         L     R0,SPF_VDEPTH                  NUMBER OF ROWS\n         MH    R0,SPF_VWIDTH+2                COMPUTE VDATA SIZE\n         ST    R0,DXD_VDATA_LENGTH            SAVE LENGTH\n         GETMAIN RU,                          GETMAIN STORAGE FOR VDATA+\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,DXD_VDATA_ADDR              SAVE ADDR\n         ITRACE ID=VDATA,                                              +\n               RDATA1=R1,                                              +\n               DATA2=(DXD_VDATA_LENGTH,4)\n* ------------------------------------------------------------------- *\n*        Initialize dyamic area                                       *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=INITVDATA\n         L     R0,DXD_VDATA_ADDR              VDATA ADDR\n         L     R1,DXD_VDATA_LENGTH            VDATA LENGTH\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                         INITIALIZE VDATA BUFFER\n         XC    DXD_VDATA_CURSOR,DXD_VDATA_CURSOR\n* ------------------------------------------------------------------- *\n*        Build detail                                                 *\n* ------------------------------------------------------------------- *\n         L     R7,DXD_VDATA_ADDR              DYNAMIC AREA BUFFER\n         ITRACE ID=BUILD,                                              +\n               DATA1=R7\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0020 DS    0H\n         ITRACE ID=CYL,                                                +\n               DATA1=(0(R4),2)\n         ST    R7,DXD_CYLINDER                SAVE ADDR\n         SR    R0,R0\n         ICM   R0,3,0(R4)                     CYLINDER NUMBER\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD\n         ED    DXD_EDITWORD,COMM_DWORD+5      EDIT CYLINDER NUMBER\n         MVC   0(MSG01_L,R7),MSG01\n         USING MSG01,R7\n         MVC   MSG01_DESC,CYLINDER            FIELD DESCRIPTION\n         MVC   MSG01_NBR,DXD_EDITWORD+1       COPY CYLINDER NUMBER\n         DROP  R7\n\n         A     R7,SPF_VWIDTH                  NEXT LINE\n\n         ITRACE ID=HEAD,                                               +\n               DATA1=(2(R4),2)\n         ST    R7,DXD_HEAD                    SAVE ADDR\n         SR    R0,R0\n         ICM   R0,3,2(R4)                     'FROM' CYLINDER\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD\n         ED    DXD_EDITWORD,COMM_DWORD+5      EDIT HEAD\n         MVC   0(MSG01_L,R7),MSG01\n         USING MSG01,R7\n         MVC   MSG01_DESC,HEAD                FIELD DESCRIPTION\n         MVC   MSG01_NBR,DXD_EDITWORD+1       COPY HEAD NUMBER\n         DROP  R7\n\n         A     R7,SPF_VWIDTH                  NEXT LINE\n\n\n         ITRACE ID=RECORD,                                             +\n               DATA1=(4(R4),1)\n         ST    R7,DXD_RECORD                  SAVE ADDR\n         SR    R0,R0\n         ICM   R0,1,4(R4)                     RECORD NUMBER\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD\n         ED    DXD_EDITWORD,COMM_DWORD+5      EDIT RECORD NUMBER\n         MVC   0(MSG01_L,R7),MSG01\n         USING MSG01,R7\n         MVC   MSG01_DESC,RECORD              FIELD DESCRIPTION\n         MVC   MSG01_NBR,DXD_EDITWORD+1       COPY RECORD NUMBER\n         DROP  R7\n\n* ------------------------------------------------------------------- *\n*        Display                                                      *\n* ------------------------------------------------------------------- *\nMAIN0060 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_PANEL,FIELD_PANEL         COPY PANEL NAME\n         MVC   COMM_VDATA_ADDR,DXD_VDATA_ADDR\n         MVC   COMM_VDATA_LENGTH,DXD_VDATA_LENGTH\n         MVC   COMM_VDATA_CURSOR,DXD_VDATA_CURSOR\n         L     R15,COMM_V_VZAPDISP            VZAPDISP ENTRY POINT\n         BALR  R14,R15                        CALL VZAPDISP\n         ITRACE ID=DISP_RC,                                            +\n               DATA1=(COMM_DISP_RC,2)\n         OC    COMM_DISP_RC,COMM_DISP_RC      RC = 0?\n         BNZ   MAIN0300                       NO\n* ------------------------------------------------------------------- *\n*        Does user want to cancel changes?                            *\n* ------------------------------------------------------------------- *\n         CLC   SPF_ZCMD,COMM_BLANKS           COMMAND BLANK?\n         BE    MAIN0100                       YES\n         CLC   CAN,SPF_ZCMD                   CAN?\n         BE    MAIN0400                       YES\n         CLC   CANCEL,SPF_ZCMD                CANCEL?\n         BE    MAIN0400                       YES\n         B     ERR0010                        OTHERWISE BAD COMMAND\n* ------------------------------------------------------------------- *\n*        VERIFY NEW DATA IS VALID                                     *\n* ------------------------------------------------------------------- *\nMAIN0100 DS    0H\n         L     R7,DXD_CYLINDER                CYLINDER IN VDATA\n         BAL   R15,MAIN0200                   VERIFY/CONVERT\n\n         L     R7,DXD_HEAD                    HEAD IN VDATA\n         BAL   R15,MAIN0200                   VERIFY/CONVERT\n\n         L     R7,DXD_RECORD                  RECORD IN VDATA\n         BAL   R15,MAIN0200                   VERIFY/CONVERT\n\n* ------------------------------------------------------------------- *\n*        UPDATE CYLINDER NUMBER                                       *\n* ------------------------------------------------------------------- *\n         L     R7,DXD_CYLINDER                CYLINDER IN VDATA\n         BAL   R15,MAIN0200                   VERIFY/CONVERT\n         CLM   R1,3,0(R4)                     SAME VALUE?\n         BE    MAIN0130                       YES\n         ITRACE ID=NEW_CYL\n         STCM  R1,3,0(R4)                     UPDATE CYLINDER NUMBER\n         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING\n         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED\n\n* ------------------------------------------------------------------- *\n*        UPDATE HEAD                                                  *\n* ------------------------------------------------------------------- *\nMAIN0130 DS    0H\n         L     R7,DXD_HEAD                    HEAD IN VDATA\n         BAL   R15,MAIN0200                   VERIFY/CONVERT\n         CLM   R1,3,2(R4)                     SAME VALUE?\n         BE    MAIN0140                       YES\n         ITRACE ID=NEW_HEAD\n         STCM  R1,3,2(R4)                     UPDATE HEAD NUMBER\n         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING\n         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED\n\n* ------------------------------------------------------------------- *\n*        UPDATE RECORD                                                *\n* ------------------------------------------------------------------- *\nMAIN0140 DS    0H\n         L     R7,DXD_RECORD                  RECORD NUMBER IN VDATA\n         BAL   R15,MAIN0200                   VERIFY/CONVERT\n         CLM   R1,1,4(R4)                     SAME VALUE?\n         BE    MAIN0010                       YES\n         ITRACE ID=NEW_RECD\n         STCM  R1,1,4(R4)                     UPDATE RECORD NUMBER\n         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING\n         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED\n         B     MAIN0010\n\n* ------------------------------------------------------------------- *\n*        Verify numeric is valid                                      *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         USING MSG01,R7\n         LA    R1,MSG01_NBR                   1ST DIGIT\n         LA    R2,L'MSG01_NBR                 NBR OF DIGITS\n         ITRACE ID=VERIFY,                                             +\n               DATA1=(MSG01_NBR,5)\nMAIN0210 DS    0H\n         CLI   0(R1),C'0'                     VALID DIGIT?\n         BL    ERR0020                        NO\n         CLI   0(R1),C'9'                     VALID DIGIT?\n         BH    ERR0020                        NO\n         LA    R1,1(,R1)                      NEXT DIGIT\n         BCT   R2,MAIN0210                    LOOP\n         PACK  COMM_DWORD,MSG01_NBR           PACK THE  NUMBER\n         CVB   R1,COMM_DWORD                  CONVERT TO BINARY\n         ITRACE ID=NUMBER,                                             +\n               RDATA1=R1\n         BR    R15\n         DROP  R7\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Exiting.                                                     *\n*        Warn user if data is out of range or inconsistent            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         MVC   SPF_MSG_1,COMM_BLANKS\n         MVC   SPF_MSG_2,COMM_BLANKS\n         MVC   SPF_MSG_3,COMM_BLANKS\n         MVC   SPF_MSG_4,COMM_BLANKS\n         MVC   SPF_MSG_5,COMM_BLANKS\n         MVI   DXD_RC,0                       FORCE DEFAULT RC\n         ITRACE ID=CHK_ADDR,                                           +\n               DATA1=(0(R4),5)\n         CLC   0(2,R4),COMM_MAX_CC            CYL > DEVICE MAX?\n         BNH   MAIN0310                       NO\n         MVC   SPF_MSG_1(EMSG04_L),EMSG04     SET MESSAGE\n         MVI   DXD_RC,4                       SET RC\nMAIN0310 DS    0H\n         CLC   2(2,R4),COMM_MAX_HH            HEAD > DEVICE MAX?\n         BNH   MAIN0320                       NO\n         MVC   SPF_MSG_2(EMSG05_L),EMSG05     SET MESSAGE\n         MVI   DXD_RC,4                       SET RC\nMAIN0320 DS    0H\n         CLI   DXD_RC,0                       RC STILL = 0?\n         BE    EXIT0000                       YES\n         ITRACE ID=CALLCNFM\n         MVC   SPF_YES_OR_NO,COMM_BLANKS      INITIALIZE REPLY\n         L     R15,COMM_V_VZAPCNFM            VZAPCNFM ENTRY POINT\n         BALR  R14,R15                        CALL VZAPCNFM\n         CLI   SPF_YES_OR_NO,C'Y'             USER REPLY 'YES'?\n         BE    EXIT0000                       YES\n         B     MAIN0010                       DISPLAY AGAIN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0400 DS    0H\n         ITRACE ID=CANCEL\n         MVC   SPF_ZCMD,COMM_BLANKS\n         CLC   DXD_DISK_ADDRESS,0(R4)         ADDRESS CHANGED?\n         BE    EXIT0000                       NO\n         MVC   SPF_MSG_1(EMSG01_L),EMSG01     WARN THE USER\n         MVC   0(5,R4),DXD_DISK_ADDRESS       RESET EXTENT\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVC   SPF_MSG_1(EMSG02_L),EMSG02     COPY MESSAGE\n         B     MAIN0060\nERR0020  DS    0H\n         ITRACE ID=BADDIGIT\n         MVC   SPF_MSG_1(EMSG03_L),EMSG03     COPY MESSAGE\n         USING MSG01,R7\n         MVC   SPF_MSG_1+(EMSG03_DESC-EMSG03)(L'EMSG03_DESC),MSG01_DESC\n         DROP  R7\n         B     MAIN0060\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         ICM   R1,15,DXD_VDATA_ADDR           VDATA GETMAINED?\n         L     R0,DXD_VDATA_LENGTH            LENGTH\n         BZ    EXIT0010                       NO\n         FREEMAIN RU,                         FREEMAIN VDATA           +\n               A=(1),                                                  +\n               LV=(0)\nEXIT0010 DS    0H\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDVPTR)\n              LTORG\n\nCAN           DC    C'CAN '\nCANCEL        DC    C'CANCEL '\nFIELD_PANEL   DC    CL8'VZAPVPTR'\nEDITWORD      DC    X'F02020202120'\nCYLINDER      DC    CL15'Cylinder'\nHEAD          DC    CL15'Head'\nRECORD        DC    CL15'Record'\n\nMSG01         DS    0C\n              DC    AL1($SCREEN_ATTR_HIGH_GREEN)\nMSG01_DESC    DC    C'               '\n              DC    AL1($SCREEN_ATTR_INPUT)\nMSG01_NBR     DC    CL5' '\n              DC    AL1($SCREEN_ATTR_HIGH_YELLOW)\nMSG01_L       EQU   *-MSG01\n\nEMSG01        DS    0C\n              DC    C'VZAPVPTR01W Updates to extents cancelled'\nEMSG01_L      EQU   *-EMSG01\n\nEMSG02        DS    0C\n              DC    C'VZAPVPTR02E Invalid command'\nEMSG02_L      EQU   *-EMSG02\n\nEMSG03        DS    0C\n              DC    C'VZAPVPTR03E Nonnumeric digit in '\nEMSG03_DESC   DC    CL15' '\nEMSG03_L      EQU   *-EMSG03\n\nEMSG04        DS    0C\n              DC    C'VZAPVPTR04E Cylinder out of range'\nEMSG04_L      EQU   *-EMSG04\n\nEMSG05        DS    0C\n              DC    C'VZAPVPTR05E Head out of range'\nEMSG05_L      EQU   *-EMSG05\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDVPTR          DSECT\n                 COPY  DXDPREF\n\nDXD_VDATA_ADDR   DS    A\nDXD_VDATA_LENGTH DS    F\nDXD_VDATA_CURSOR DS    F\n\nDXD_CYLINDER     DS    A\nDXD_HEAD         DS    A\nDXD_RECORD       DS    A\n\nDXD_EDITWORD     DS    CL6\n\nDXD_DISK_ADDRESS DS    XL5               SAVED VTOC DISK ADDRESS\n\nDXD_RC           DS    X\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VZAPFLD\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VTOCDATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     ATTRS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPVPTR\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPWRIT": {"ttr": 4098, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x01\\x10\\x04\\x8f\\x01\\x10\\x04\\x8f\\x168\\x019\\x019\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-17T00:00:00", "modifydate": "2010-02-17T16:38:01", "lines": 313, "newlines": 313, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPWRIT                                              *\n*                                                                     *\n*   Write the updated records back to the VTOC using CVAF.            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPWRIT CSECT\nVZAPWRIT AMODE 31\nVZAPWRIT RMODE 24\n         USING VZAPCOMM,R12\n         USING VZAPWRIT,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPWRIT'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DISPEND-VZAPWRIT)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                  SAVE REGS\n         LR    R10,R15                          COPY ENTRY POINT\n         LR    R2,R0                            COPY R0\n         LR    R3,R1                            COPY R1\n         DROP  R15\n         USING VZAPWRIT,R10                     DEFINE BASE\n         GETMAIN RU,                                                   +\n               LV=WORK_L,                                              +\n               LOC=BELOW\n         LR    R2,R1\n         LA    R3,WORK_L\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R2,R14                           INITIALIZE WORK AREA\n         ST    R13,4(,R1)                       SAVE R13\n         ST    R1,8(,R13)                       CHAIN SAVE AREA\n         LR    R13,R1                           COPY WORK AREA ADDRESS\n         USING WORK,R13                         DEFINE WORK AREA BASE\n         USING JFCB,WORK_JFCB\n         USING CVPL,WORK_CVAFDIR\n         MVC   DXD_CSECT,MODID\nINIT0010 DS    0H\n         ITRACE ID=ENTRY\n         MVI   WORK_RC,0                      SET DEFAULT RC\n         MVI   WORK_FLAGS,0                   SET FLAGS\n* ------------------------------------------------------------------- *\n*        Verify user is allowed to update the VTOC                    *\n* ------------------------------------------------------------------- *\n         ITRACE ID=AUTH\n         MVI   COMM_VTOCZAP_FUNCTION,$VTOCZAP_UPDATE_VTOC\n         L     R15,COMM_V_VZAPAUTH            VZAPAUTH ENTRY POINT\n         BALR  R14,R15                        CALL VZAPAUTH\n         ITRACE ID=AUTH_RC,                   AUTH RC                  +\n               RDATA1=R15\n         LTR   R15,R15                        USER AUTHORIZED?\n         BNZ   ERR0020                        NO\n* ------------------------------------------------------------------- *\n*        Initialization                                               *\n* ------------------------------------------------------------------- *\n         MVC   WORK_DCB(DCB_L),DCB_I          INITIALIZE DCB\n         LA    R9,WORK_DCB                    DCB ADDRESS\n         USING IHADCB,R9\n         ITRACE ID=DCB,                                                +\n               RDATA1=R9\n         MVC   DCBDDNAM+2(6),COMM_VOLSER      ADD VOLSER TO DD NAME\n         LA    R0,WORK_EXLST                  EXLST ADDR\n         STCM  R0,7,DCBEXLSA                  RELOCATE EXIT LIST\n         LA    R0,WORK_JFCB                   JFCB ADDR\n         ST    R0,WORK_EXLST                  SET ADDR FOR EXLST\n         MVI   WORK_EXLST,X'87'               'RDJFCB'\n         MVC   WORK_OPEN(OPEN_L),OPEN_I       INITIALIZE OPEN\n* ------------------------------------------------------------------- *\n*        Read the JFCB                                                *\n* ------------------------------------------------------------------- *\n         ITRACE ID=RDJFCB\n         RDJFCB ((R9)),                       READ THE JFCB            +\n               MF=(E,WORK_OPEN)\n         ITRACE ID=RC,                                                 +\n               RDATA1=R15\n         LTR   R15,R15                        RC=0?\n         BZ    INIT0020                       YES\n         DC    H'0'                           CRASH AND BURN\n* ------------------------------------------------------------------- *\n*        Change DSN to x'04...                                        *\n* ------------------------------------------------------------------- *\nINIT0020 DS    0H\n         MVI   JFCBDSNM,X'04'                 CHANGE DSN\n         MVC   JFCBDSNM+1(L'JFCBDSNM-1),JFCBDSNM\n         MVI   JFCBTSDM,JFCNWRIT              NO JFCB WRITE-BACK\n* ------------------------------------------------------------------- *\n*        APF authorize ourselves                                      *\n* ------------------------------------------------------------------- *\n         LA    R0,1                           REQUEST APF AUTHORIZATION\n         L     R15,COMM_V_VZAPAPF\n         BALR  R14,R15                        TURN ON APF AUTHORIZATION\n* ------------------------------------------------------------------- *\n*        Open the VTOC                                                *\n* ------------------------------------------------------------------- *\n         ITRACE ID=OPEN\n         OPEN  ((R9),OUTPUT),                                          +\n               TYPE=J,                                                 +\n               MF=(E,WORK_OPEN)\n         TM    DCBOFLGS,DCBOFOPN              DCB OPEN?\n         BO    MAIN0000                       YES\n         ITRACE ID=NOT_OPEN\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0000 DS    0H\n         SR    R8,R8\n         ICM   R8,7,DCBDEBA                   DEB ADDRESS\n         ICM   R7,15,COMM_VTOC_DATA           FIRST VTOCDATA BLOCK\n         BZ    EXIT0000                       NO VTOC DATA\nMAIN0010 DS    0H\n         USING VTOCDATA,R7\n         ITRACE ID=DSCB,                                               +\n               RDATA1=R7,                                              +\n               DATA2=(VTOC_FLAGS,1)\n         TM    VTOC_FLAGS,$VTOC_UPDATED       THIS RECORD UPDATED?\n         BNO   MAIN0020                       NO\n         ITRACE ID=UPDATE,                                             +\n               DATA1=VTOC_COUNT,                                       +\n               DATA2=VTOC_DSCB\n         XC    WORK_BUFLIST(BFLHLN+BFLELN),WORK_BUFLIST\n         OI    BFLHFL,BFLHDSCB                DSCB IS BEING UPDATED\n         MVC   BFLEARG,VTOC_COUNT             COPY DISK ADDR (CCHHR)\n         MVI   BFLHNOE,1                      ONE BUFFER LIST ENTRY\n         LA    R0,VTOC_DSCB+44                DSCB (MINUS DSN)\n         ST    R0,BFLEBUF                     SET ADDRESS\n         MVI   BFLELTH,96                     LENGTH OF DSCB BUFFER\n         OI    BFLEFL,BFLECHR                 ARG IS CCHHR\n         OI    BFLEFL,BFLENOVR                DO NOT VERIFY DSN\n         MVC   WORK_CVAFDIR(CVAFDIRL),CVAFDIRI\n         ITRACE ID=CVAFDIR\n         OI    WORK_FLAGS,$RLSE               RLSE NEEDED\n         CVAFDIR ACCESS=WRITE,                UPDATE VTOC              +\n               BUFLIST=WORK_BUFLIST,          .. BUFFER PARMS          +\n               DEB=(R8),                      .. DEB ADDRESS           +\n               DSN=VTOC_DSCB,                 .. DSN                   +\n               VERIFY=NO,                                              +\n               MF=(E,WORK_CVAFDIR)\n         ITRACE ID=RC,                                                 +\n               RDATA1=R15\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0030                        NO\n         LA    R0,1                           CONSTANT\n         A     R0,COMM_VTOC_WRITES            PLUS TOTAL SO FAR\n         ST    R0,COMM_VTOC_WRITES            UPDATE TOTAL\nMAIN0020 DS    0H\n         ICM   R7,15,VTOC_NEXT                NEXT DSCB\n         BNZ   MAIN0010                       LOOP\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=SYNAD\n         DC    H'0'\nERR0020  DS    0H\n         ITRACE ID=NOT_AUTH\n         MVI   WORK_RC,12\n         B     EXIT0000\nERR0030  DS    0H\n         LA    R2,WORK_CVAFDIR\n         ITRACE ID=CVAF_ERR,                                           +\n               RDATA1=R2,                                              +\n               DATA2=CVPL\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n* ------------------------------------------------------------------- *\n*        Release CVAF resources                                       *\n* ------------------------------------------------------------------- *\n         TM    WORK_FLAGS,$RLSE                 RLSE NEEDED?\n         BNO   EXIT0010                         NO\n         ITRACE ID=RELEASE\n         CVAFDIR  ACCESS=RLSE,                                         +\n               IOAREA=NOKEEP,                                          +\n               IXRCDS=NOKEEP,                                          +\n               BUFLIST=0,                                              +\n               MF=(E,WORK_CVAFDIR)\n         ITRACE ID=RC,                                                 +\n               RDATA1=R15\n         LTR   R15,R15\n         BNZ   ERR0030\n* ------------------------------------------------------------------- *\n*        Close VTOC DCB                                               *\n* ------------------------------------------------------------------- *\nEXIT0010 DS    0H\n         ITRACE ID=CLOSE\n         MVC   WORK_CLOSE(CLOSE_L),CLOSE_I      INITIALIZE CLOSE\n         CLOSE ((R9)),                          CLOSE VTOC DCB         +\n               MF=(E,WORK_CLOSE)\n* ------------------------------------------------------------------- *\n*        Turn off APF authorization                                   *\n* ------------------------------------------------------------------- *\n         SR    R0,R0\n         L     R15,COMM_V_VZAPAPF\n         BALR  R14,R15                          TURN OFF APF AUTH\n         SR    R2,R2\n         IC    R2,WORK_RC\n         ITRACE ID=EXIT,                                               +\n               RDATA1=R2,                                              +\n               DATA2=(COMM_VTOC_WRITES,1)\n         LR    R1,R13\n         L     R13,4(,R13)                      RESTORE R13\n         FREEMAIN RU,                           FREE WORK AREA         +\n               A=(1),                                                  +\n               LV=WORK_L\n         L     R14,12(,R13)\n         LR    R15,R2\n         LM    R0,R12,20(R13)                   RESTORE REGISTERS\n         BR    R14                              RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSYNAD    SYNADAF ACSMETH=BDAM\n         OI    WORK_FLAGS,$SYNAD\n         SYNADRLS\n         BR    R14\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDCB_I    DCB   DSORG=DA,                                               +\n               DDNAME=VZ,                                              +\n               EXLST=*,                                                +\n               RECFM=F,                                                +\n               BLKSIZE=96,                                             +\n               KEYLEN=44,                                              +\n               OPTCD=A,                                                +\n               SYNAD=SYNAD,                                            +\n               MACRF=WKC\nDCB_L    EQU   *-DCB_I\n\nOPEN_I   OPEN  (*,OUTPUT),                                             +\n               MF=L\nOPEN_L   EQU   *-OPEN_I\n\nCLOSE_I  CLOSE *,                                                      +\n               MF=L\nCLOSE_L  EQU   *-CLOSE_I\n\nCVAFDIRI CVAFDIR ACCESS=WRITE,                UPDATE VTOC              +\n               BUFLIST=*,                     .. BUFFER PARMS          +\n               MF=L\nCVAFDIRL EQU   *-CVAFDIRI\n\nWAIT_TIME  DC  F'50'                HALF SECOND\n\n              LTORG\nDISPEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORK          DSECT\n              COPY  DXDPREF\n\nWORK_DCB      DS    0A,(DCB_L)X\nWORK_OPEN     DS    0A,(OPEN_L)X\nWORK_CLOSE    DS    0A,(CLOSE_L)X\nWORK_EXLST    DS    A\nWORK_JFCB     DS    0A,(JFCB_L)X\nWORK_CVAFDIR  DS    0A,(CVAFDIRL)X\n\nWORK_BUFLIST  ICVAFBFL DSECT=NO\n\nWORK_RC       DS    X\n\nWORK_FLAGS    DS    X\n$SYNAD        EQU   X'80'\n$RLSE         EQU   X'40'           CVAFDIR RLSE NEEDED\n\nWORK_L        EQU   *-WORK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCVPL          ICVAFPL\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VTOCDATA\n                  ORG      VTOC_DSCB\n                  IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD     DSORG=PS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nJFCB     DSECT\n         IEFJFCBN\nJFCB_L   EQU      *-JFCB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPWRIT\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VZAPXTNT": {"ttr": 3841, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00W\\x01\\x10\\x04\\x8f\\x01\\x10\\x04\\x8f\\x167\\x02a\\x02a\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-02-17T00:00:00", "modifydate": "2010-02-17T16:37:57", "lines": 609, "newlines": 609, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: VZAPXTNT                                              *\n*                                                                     *\n*   Display/update Extent info                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVZAPXTNT CSECT\nVZAPXTNT AMODE 31\nVZAPXTNT RMODE ANY\n         USING VZAPCOMM,R12\n         USING VZAPXTNT,R15\n         B     INIT0000\nMODID    DC    CL8'VZAPXTNT'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    A(DSCBEND-VZAPXTNT)\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         LR    R2,R0                          COPY R0\n         LR    R3,R1                          COPY R1\n         DROP  R15\n         USING VZAPXTNT,R10                   DEFINE BASE\n         L     R15,COMM_DXD\n         A     R15,DXD_START\n         ST    R13,4(,R15)                    SAVE R13\n         ST    R15,8(,R13)                    CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDXTNT,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY\n         L     R9,COMM_VZAPSPFD\n         USING VZAPSPFD,R9\n         L     R8,COMM_SELECTED_DSCB          SELECTED DSCB\n         USING VTOCDATA,R8\n         L     R5,COMM_SELECTED_FIELD         SELECTED FIELD\n         USING FIELD_DSECT,R5\n         ITRACE ID=FIELD,                                              +\n               DATA1=FIELD_LABEL,                                      +\n               DATA2=(FIELD_DISP,2)\n         SR    R4,R4\n         ICM   R4,3,FIELD_DISP                DISP TO DATA\n         AR    R4,R8                          PLUS BASE\n* ------------------------------------------------------------------- *\n*        Copy extent info to allow user to abort                      *\n* ------------------------------------------------------------------- *\n         ITRACE ID=DATA,                                               +\n               RDATA1=R4,                                              +\n               DATA2=0(R4)\n         MVC   DXD_EXTENT,0(R4)               SAVE EXTENT INFO\n* ------------------------------------------------------------------- *\n*        Obtain VDATA for dynamic area                                *\n* ------------------------------------------------------------------- *\n         MVC   COMM_PANEL,FIELD_PANEL         COPY PANEL NAME\n         ITRACE ID=PQRY,                                               +\n               DATA1=COMM_PANEL\n         L     R15,COMM_V_VZAPPQRY            VZAPPQRY ENTRY POINT\n         BALR  R14,R15                        CALL VTOPQRY\n         L     R0,SPF_VDEPTH                  NUMBER OF ROWS\n         MH    R0,SPF_VWIDTH+2                COMPUTE VDATA SIZE\n         ST    R0,DXD_VDATA_LENGTH            SAVE LENGTH\n         GETMAIN RU,                          GETMAIN STORAGE FOR VDATA+\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,DXD_VDATA_ADDR              SAVE ADDR\n         ITRACE ID=VDATA,                                              +\n               RDATA1=R1,                                              +\n               DATA2=(DXD_VDATA_LENGTH,4)\n* ------------------------------------------------------------------- *\n*        Initialize dyamic area                                       *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=INITVDATA\n         L     R0,DXD_VDATA_ADDR              VDATA ADDR\n         L     R1,DXD_VDATA_LENGTH            VDATA LENGTH\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                         INITIALIZE VDATA BUFFER\n         XC    DXD_VDATA_CURSOR,DXD_VDATA_CURSOR\n* ------------------------------------------------------------------- *\n*        Build detail                                                 *\n* ------------------------------------------------------------------- *\n         L     R7,DXD_VDATA_ADDR              DYNAMIC AREA BUFFER\n         ITRACE ID=BUILD,                                              +\n               DATA1=R7\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0020 DS    0H\n         ITRACE ID=FLAGS,                                              +\n               DATA1=(0(R4),1)\n         MVC   0(MSG01_L,R7),MSG01            INITIALIZE\n         USING MSG01,R7\n         UNPK  COMM_DWORD(3),0(2,R4)          UNPACK FLAGS\n         TR    COMM_DWORD(2),COMM_HEXCHAR     TRANSLATE\n         MVC   MSG01_FLAGS,COMM_DWORD         COPY TO DYNAMIC AREA\n         DROP  R7\n\n         A     R7,SPF_VWIDTH\n\n         ST    R7,DXD_FLAGS                   SAVE ADDR\n         LA    R2,BIT_TABLE\n         USING BIT_DSECT,R2\n         SR    R1,R1\nMAIN0030 DS    0H\n         ITRACE ID=BIT,                                                +\n               DATA1=(BIT_FLAG,1)\n         MVC   0(MSG02_L,R7),MSG02\n         USING MSG02,R7\n         MVC   MSG02_DESC,BIT_DESC            COPY DESCRIPTION\n         IC    R1,BIT_FLAG                    BIG FLAG(S)\n         EX    R1,BIT_TM                      BIT(S) ON?\n         BNO   MAIN0040                       NO\n         MVI   MSG02_SELECT,C'X'              INIDICATE BIT IS SET\n         MVI   MSG02_ATTR,$SCREEN_ATTR_HIGH   CHANGE ATTRIBUTE\nMAIN0040 DS    0H\n         DROP  R7\n         A     R7,SPF_VWIDTH                  NEXT LINE\n         LA    R2,BIT_DSECT_L(,R2)            NEXT BIT/MEANING\n         CLI   0(R2),X'FF'                    END OF TABLE?\n         BNE   MAIN0030                       NO\n\n         ITRACE ID=SEQ,                                                +\n               DATA1=(1(R4),1)\n         ST    R7,DXD_SEQ                     SAVE ADDR\n         SR    R0,R0\n         IC    R0,1(,R4)                      GET SEQUENCE NUMBER\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD\n         ED    DXD_EDITWORD,COMM_DWORD+5      EDIT SEQUENCE NUMBER\n         MVC   0(MSG03_L,R7),MSG03\n         USING MSG03,R7\n         MVC   MSG03_DESC,SEQ_NUMBER          FIELD DESCRIPTION\n         MVC   MSG03_NBR,DXD_EDITWORD+1       COPY SEQUENCE NUMBER\n         DROP  R7\n\n         A     R7,SPF_VWIDTH                  NEXT LINE\n\n         ITRACE ID=FROM_CYL,                                           +\n               DATA1=(2(R4),2)\n         ST    R7,DXD_FROM_CYL                SAVE ADDR\n         SR    R0,R0\n         ICM   R0,3,2(R4)                     'FROM' CYLINDER\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD\n         ED    DXD_EDITWORD,COMM_DWORD+5      EDIT SEQUENCE NUMBER\n         MVC   0(MSG03_L,R7),MSG03\n         USING MSG03,R7\n         MVC   MSG03_DESC,FROM_CYLINDER       FIELD DESCRIPTION\n         MVC   MSG03_NBR,DXD_EDITWORD+1       COPY CYLINDER NUMBER\n         DROP  R7\n\n         A     R7,SPF_VWIDTH                  NEXT LINE\n\n\n         ITRACE ID=FROM_HD,                                            +\n               DATA1=(4(R4),2)\n         ST    R7,DXD_FROM_HD                 SAVE ADDR\n         SR    R0,R0\n         ICM   R0,3,4(R4)                     'FROM' HEAD\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD\n         ED    DXD_EDITWORD,COMM_DWORD+5      EDIT SEQUENCE NUMBER\n         MVC   0(MSG03_L,R7),MSG03\n         USING MSG03,R7\n         MVC   MSG03_DESC,FROM_HEAD           FIELD DESCRIPTION\n         MVC   MSG03_NBR,DXD_EDITWORD+1       COPY HEAD NUMBER\n         DROP  R7\n\n         A     R7,SPF_VWIDTH                  NEXT LINE\n\n         ITRACE ID=TO_CYL,                                             +\n               DATA1=(6(R4),2)\n         ST    R7,DXD_TO_CYL                  SAVE ADDR\n         SR    R0,R0\n         ICM   R0,3,6(R4)                     'TO' CYLINDER\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD\n         ED    DXD_EDITWORD,COMM_DWORD+5      EDIT SEQUENCE NUMBER\n         MVC   0(MSG03_L,R7),MSG03\n         USING MSG03,R7\n         MVC   MSG03_DESC,TO_CYLINDER         FIELD DESCRIPTION\n         MVC   MSG03_NBR,DXD_EDITWORD+1       COPY CYLINDER NUMBER\n         DROP  R7\n\n         A     R7,SPF_VWIDTH                  NEXT LINE\n\n         ITRACE ID=TO_HD,                                              +\n               DATA1=(8(R4),2)\n         ST    R7,DXD_TO_HD                   SAVE ADDR\n         SR    R0,R0\n         ICM   R0,3,8(R4)                     'TO' HEAD\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD\n         ED    DXD_EDITWORD,COMM_DWORD+5      EDIT SEQUENCE NUMBER\n         MVC   0(MSG03_L,R7),MSG03\n         USING MSG03,R7\n         MVC   MSG03_DESC,TO_HEAD             FIELD DESCRIPTION\n         MVC   MSG03_NBR,DXD_EDITWORD+1       COPY HEAD NUMBER\n         DROP  R7\n\n* ------------------------------------------------------------------- *\n*        Display                                                      *\n* ------------------------------------------------------------------- *\nMAIN0060 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   COMM_PANEL,FIELD_PANEL         COPY PANEL NAME\n         MVC   COMM_VDATA_ADDR,DXD_VDATA_ADDR\n         MVC   COMM_VDATA_LENGTH,DXD_VDATA_LENGTH\n         MVC   COMM_VDATA_CURSOR,DXD_VDATA_CURSOR\n         L     R15,COMM_V_VZAPDISP            VZAPDISP ENTRY POINT\n         BALR  R14,R15                        CALL VZAPDISP\n         ITRACE ID=DISP_RC,                                            +\n               DATA1=(COMM_DISP_RC,2)\n         OC    COMM_DISP_RC,COMM_DISP_RC      RC = 0?\n         BNZ   MAIN0300                       NO\n* ------------------------------------------------------------------- *\n*        Does user want to cancel changes?                            *\n* ------------------------------------------------------------------- *\n         CLC   SPF_ZCMD,COMM_BLANKS           COMMAND BLANK?\n         BE    MAIN0100                       YES\n         CLC   CAN,SPF_ZCMD                   CAN?\n         BE    MAIN0400                       YES\n         CLC   CANCEL,SPF_ZCMD                CANCEL?\n         BE    MAIN0400                       YES\n         B     ERR0010                        OTHERWISE BAD COMMAND\n* ------------------------------------------------------------------- *\n*        VERIFY NEW DATA IS VALID                                     *\n* ------------------------------------------------------------------- *\nMAIN0100 DS    0H\n         L     R7,DXD_SEQ                     SEQ NBR IN VDATA\n         BAL   R15,MAIN0200                   VERIFY/CONVERT\n\n         L     R7,DXD_FROM_CYL                FROM CYLINDER IN VDATA\n         BAL   R15,MAIN0200                   VERIFY/CONVERT\n\n         L     R7,DXD_FROM_HD                 FROM HEAD IN VDATA\n         BAL   R15,MAIN0200                   VERIFY/CONVERT\n\n         L     R7,DXD_TO_CYL                  TO CYLINDER IN VDATA\n         BAL   R15,MAIN0200                   VERIFY/CONVERT\n\n         L     R7,DXD_TO_HD                   TO HEAD IN VDATA\n         BAL   R15,MAIN0200                   VERIFY/CONVERT\n\n* ------------------------------------------------------------------- *\n*        Update flags                                                 *\n* ------------------------------------------------------------------- *\n         ITRACE ID=NEW_FLAGS\n         MVI   0(R4),0                        RESET FLAGS\n         LA    R2,BIT_TABLE                   FIRST BIT FLAG\n         L     R7,DXD_FLAGS                   FIRST FLAG LINE\n         USING MSG02,R7\n         SR    R1,R1\nMAIN0110 DS    0H\n         CLI   MSG02_SELECT,C' '              SELECTED?\n         BE    MAIN0120                       NO\n         IC    R1,BIT_FLAG                    GET BIT FLAG(S)\n         EX    R1,BIT_OI                      SET BIT(S)\nMAIN0120 DS    0H\n         A     R7,SPF_VWIDTH                  NEXT LINE\n         LA    R2,BIT_DSECT_L(,R2)            NEXT BIT\n         CLI   0(R2),X'FF'                    END OF TABLE?\n         BNE   MAIN0110                       NO\n         DROP  R7\n\n* ------------------------------------------------------------------- *\n*        Update sequence number                                       *\n* ------------------------------------------------------------------- *\n         L     R7,DXD_SEQ                     SEQ NBR IN VDATA\n         BAL   R15,MAIN0200                   VERIFY/CONVERT\n         CLM   R1,1,0(R4)                     SAME VALUE?\n         BE    MAIN0130                       YES\n         ITRACE ID=NEW_SEQ\n         STC   R1,1(,R4)                      UPDATE SEQUENCE NUMBER\n         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING\n         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED\n\n* ------------------------------------------------------------------- *\n*        Update from cylinder                                         *\n* ------------------------------------------------------------------- *\nMAIN0130 DS    0H\n         L     R7,DXD_FROM_CYL                FROM CYLINDER IN VDATA\n         BAL   R15,MAIN0200                   VERIFY/CONVERT\n         CLM   R1,3,2(R4)                     SAME VALUE?\n         BE    MAIN0140                       YES\n         ITRACE ID=NEW_FCYL\n         STCM  R1,3,2(R4)                     UPDATE CYLINDER NUMBER\n         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING\n         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED\n\n* ------------------------------------------------------------------- *\n*        Update from head                                             *\n* ------------------------------------------------------------------- *\nMAIN0140 DS    0H\n         L     R7,DXD_FROM_HD                 FROM HEAD IN VDATA\n         BAL   R15,MAIN0200                   VERIFY/CONVERT\n         CLM   R1,3,4(R4)                     SAME VALUE?\n         BE    MAIN0150                       YES\n         ITRACE ID=NEW_FHD\n         STCM  R1,3,4(R4)                     UPDATE HEAD NUMBER\n         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING\n         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED\n\n* ------------------------------------------------------------------- *\n*        Update to cylinder                                           *\n* ------------------------------------------------------------------- *\nMAIN0150 DS    0H\n         L     R7,DXD_TO_CYL                  TO CYLINDER IN VDATA\n         BAL   R15,MAIN0200                   VERIFY/CONVERT\n         CLM   R1,3,6(R4)                     SAME VALUE?\n         BE    MAIN0160                       YES\n         ITRACE ID=NEW_TCYL\n         STCM  R1,3,6(R4)                     UPDATE CYLINDER NUMBER\n         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING\n         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED\n\n* ------------------------------------------------------------------- *\n*        Update to head                                               *\n* ------------------------------------------------------------------- *\nMAIN0160 DS    0H\n         L     R7,DXD_TO_HD                   TO HEAD IN VDATA\n         BAL   R15,MAIN0200                   VERIFY/CONVERT\n         CLM   R1,3,8(R4)                     SAME VALUE?\n         BE    MAIN0010                       YES\n         ITRACE ID=NEW_THD\n         STCM  R1,3,8(R4)                     UPDATE CYLINDER NUMBER\n         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING\n         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED\n         B     MAIN0010\n\n* ------------------------------------------------------------------- *\n*        Verify numeric is valid                                      *\n* ------------------------------------------------------------------- *\nMAIN0200 DS    0H\n         USING MSG03,R7\n         LA    R1,MSG03_NBR                   1ST DIGIT\n         LA    R2,L'MSG03_NBR                 NBR OF DIGITS\n         ITRACE ID=VERIFY,                                             +\n               DATA1=(MSG03_NBR,5)\nMAIN0210 DS    0H\n         CLI   0(R1),C'0'                     VALID DIGIT?\n         BL    ERR0020                        NO\n         CLI   0(R1),C'9'                     VALID DIGIT?\n         BH    ERR0020                        NO\n         LA    R1,1(,R1)                      NEXT DIGIT\n         BCT   R2,MAIN0210                    LOOP\n         PACK  COMM_DWORD,MSG03_NBR           PACK THE  NUMBER\n         CVB   R1,COMM_DWORD                  CONVERT TO BINARY\n         ITRACE ID=NUMBER,                                             +\n               RDATA1=R1\n         BR    R15\n         DROP  R7\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Exiting.                                                     *\n*        Warn user if data is out of range or inconsistent            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0300 DS    0H\n         MVC   SPF_MSG_1,COMM_BLANKS\n         MVC   SPF_MSG_2,COMM_BLANKS\n         MVC   SPF_MSG_3,COMM_BLANKS\n         MVC   SPF_MSG_4,COMM_BLANKS\n         MVC   SPF_MSG_5,COMM_BLANKS\n         MVI   DXD_RC,0                       FORCE DEFAULT RC\n         ITRACE ID=CHK_XTNT,                                           +\n               DATA1=2(R4)\n         CLC   2(2,R4),COMM_MAX_CC            FROM CYL > DEVICE MAX?\n         BNH   MAIN0310                       NO\n         MVC   SPF_MSG_1(EMSG04_L),EMSG04     SET MESSAGE\n         MVI   DXD_RC,4                       SET RC\nMAIN0310 DS    0H\n         CLC   4(2,R4),COMM_MAX_HH            FROM HEAD > DEVICE MAX?\n         BNH   MAIN0320                       NO\n         MVC   SPF_MSG_2(EMSG05_L),EMSG05     SET MESSAGE\n         MVI   DXD_RC,4                       SET RC\nMAIN0320 DS    0H\n         CLC   6(2,R4),COMM_MAX_CC            TO CYL > DEVICE MAX?\n         BNH   MAIN0330                       NO\n         MVC   SPF_MSG_3(EMSG06_L),EMSG06     SET MESSAGE\n         MVI   DXD_RC,4                       SET RC\nMAIN0330 DS    0H\n         CLC   8(2,R4),COMM_MAX_HH            TO HEAD > DEVICE MAX?\n         BNH   MAIN0340                       NO\n         MVC   SPF_MSG_4(EMSG07_L),EMSG07     SET MESSAGE\n         MVI   DXD_RC,4                       SET RC\nMAIN0340 DS    0H\n         SR    R0,R0\n         SR    R1,R1\n         SR    R2,R2\n         ICM   R0,3,2(R4)                     FROM CYLINDER\n         ICM   R1,3,4(R4)                     FROM HEAD\n         MH    R0,COMM_MAX_HH                 CONVERT TO TRACKS\n         AR    R0,R1                          PLUS STARTING HEAD\n         SR    R1,R1\n         ICM   R1,3,6(R4)                     ENDING CYLINDER\n         ICM   R2,3,8(R4)                     ENDING HEAD\n         MH    R1,COMM_MAX_HH                 CONVERT TO TRACKS\n         AR    R1,R2                          PLUS ENDING TRACK\n         ITRACE ID=LOW_HIGH,                                           +\n               RDATA1=R0,                                              +\n               RDATA2=R1\n         CR    R0,R1                          FROM > LOW?\n         BNH   MAIN0350\n         MVC   SPF_MSG_5(EMSG08_L),EMSG08     SET MESSAGE\n         MVI   DXD_RC,4                       SET RC\nMAIN0350 DS    0H\n         CLI   DXD_RC,0                       RC STILL = 0?\n         BE    EXIT0000                       YES\n         ITRACE ID=CALLCNFM\n         MVC   SPF_YES_OR_NO,COMM_BLANKS      INITIALIZE REPLY\n         L     R15,COMM_V_VZAPCNFM            VZAPCNFM ENTRY POINT\n         BALR  R14,R15                        CALL VZAPCNFM\n         CLI   SPF_YES_OR_NO,C'Y'             USER REPLY 'YES'?\n         BE    EXIT0000                       YES\n         B     MAIN0010                       DISPLAY AGAIN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0400 DS    0H\n         ITRACE ID=CANCEL\n         MVC   SPF_ZCMD,COMM_BLANKS\n         CLC   DXD_EXTENT,0(R4)               EXTENTS CHANGED?\n         BE    EXIT0000                       NO\n         MVC   SPF_MSG_1(EMSG01_L),EMSG01     WARN THE USER\n         MVC   0(10,R4),DXD_EXTENT            RESET EXTENT\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVC   SPF_MSG_1(EMSG02_L),EMSG02     COPY MESSAGE\n         B     MAIN0060\nERR0020  DS    0H\n         ITRACE ID=BADDIGIT\n         MVC   SPF_MSG_1(EMSG03_L),EMSG03     COPY MESSAGE\n         USING MSG03,R7\n         MVC   SPF_MSG_1+(EMSG03_DESC-EMSG03)(L'EMSG03_DESC),MSG03_DESC\n         DROP  R7\n         B     MAIN0060\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         ICM   R1,15,DXD_VDATA_ADDR           VDATA GETMAINED?\n         L     R0,DXD_VDATA_LENGTH            LENGTH\n         BZ    EXIT0010                       NO\n         FREEMAIN RU,                         FREEMAIN VDATA           +\n               A=(1),                                                  +\n               LV=(0)\nEXIT0010 DS    0H\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        SET RC\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nBIT_TM   TM    0(R4),0                        TEST BIT(S)\nBIT_OI   OI    0(R4),0                        SET BIT(S)\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START     DC    Q(DXDXTNT)\n              LTORG\n\nCAN           DC    C'CAN '\nCANCEL        DC    C'CANCEL '\nFIELD_PANEL   DC    CL8'VZAPXTNT'\nSEQ_NUMBER    DC    CL15'Sequence nbr'\nFROM_CYLINDER DC    CL15'From cylinder'\nFROM_HEAD     DC    CL15'From head'\nTO_CYLINDER   DC    CL15'To cylinder'\nTO_HEAD       DC    CL15'To head'\nEDITWORD      DC    X'F02020202120'\n\nMSG01         DS    0C\n              DC    AL1($SCREEN_ATTR_HIGH_GREEN)\n              DC    C'Flags          '\n              DC    AL1($SCREEN_ATTR_NORMAL)\nMSG01_FLAGS   DC    CL2' '\nMSG01_L       EQU   *-MSG01\n\nMSG02         DS    0C\n              DC    AL1($SCREEN_ATTR_INPUT)\nMSG02_SELECT  DC    C' '             '\nMSG02_ATTR    DC    AL1($SCREEN_ATTR_HIGH_TURQUOISE)\nMSG02_DESC    DC    CL35' '\nMSG02_L       EQU   *-MSG02\n\nMSG03         DS    0C\n              DC    AL1($SCREEN_ATTR_HIGH_GREEN)\nMSG03_DESC    DC    C'               '\n              DC    AL1($SCREEN_ATTR_INPUT)\nMSG03_NBR     DC    CL5' '\n              DC    AL1($SCREEN_ATTR_HIGH_YELLOW)\nMSG03_MSG     DC    CL5' '\nMSG03_L       EQU   *-MSG03\n\nEMSG01        DS    0C\n              DC    C'VZAPXTNT01W Updates to extents cancelled'\nEMSG01_L      EQU   *-EMSG01\n\nEMSG02        DS    0C\n              DC    C'VZAPXTNT02E Invalid command'\nEMSG02_L      EQU   *-EMSG02\n\nEMSG03        DS    0C\n              DC    C'VZAPXTNT03E Nonnumeric digit in '\nEMSG03_DESC   DC    CL15' '\nEMSG03_L      EQU   *-EMSG03\n\nEMSG04        DS    0C\n              DC    C'VZAPXTNT04E From cylinder out of range'\nEMSG04_L      EQU   *-EMSG04\n\nEMSG05        DS    0C\n              DC    C'VZAPXTNT05E From head out of range'\nEMSG05_L      EQU   *-EMSG05\n\nEMSG06        DS    0C\n              DC    C'VZAPXTNT06E To cylinder out of range'\nEMSG06_L      EQU   *-EMSG06\n\nEMSG07        DS    0C\n              DC    C'VZAPXTNT07E To head out of range'\nEMSG07_L      EQU   *-EMSG07\n\nEMSG08        DS    0C\n              DC    C'VZAPXTNT08E From cyl/head > end cyl/head'\nEMSG08_L      EQU   *-EMSG08\n\nBIT_TABLE     DS    0C\n              DC    X'81',CL35'Extent on cylinder boundary'\n              DC    X'80',CL35'Split cylinder'\n              DC    X'40',CL35'User label extent'\n              DC    X'20',CL35'Reserved'\n              DC    X'10',CL35'Reserved'\n              DC    X'08',CL35'Reserved'\n              DC    X'04',CL35'ISAM index'\n              DC    X'02',CL35'ISAM overflow'\n              DC    X'01',CL35'User data or ISAM primary'\n              DC    X'FF'\n\nDSCBEND       EQU   *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDXTNT       DSECT\n              COPY  DXDPREF\n\nDXD_VDATA_ADDR   DS A\nDXD_VDATA_LENGTH DS F\nDXD_VDATA_CURSOR DS F\n\nDXD_FLAGS     DS    A                 FIRST LINE OF FLAGS\nDXD_SEQ       DS    A                 SEQUENCE NBR LINE\nDXD_FROM_CYL  DS    A                 FROM CYLINDER IN DYNAMIC AREA\nDXD_FROM_HD   DS    A                 FROM HEAD IN DYNAMIC AREA\nDXD_TO_CYL    DS    A                 TO CYLINDER IN DYNAMIC AREA\nDXD_TO_HD     DS    A                 TO HEAD LINE IN DYNAMIC AREA\n\nDXD_EDITWORD  DS    CL6\n\nDXD_EXTENT    DS    XL10              SAVED EXTENT\n\nDXD_RC        DS    X\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nBIT_DSECT     DSECT\nBIT_FLAG      DS    X\nBIT_DESC      DS    CL35\nBIT_DSECT_L   EQU   *-BIT_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VZAPFLD\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     VTOCDATA\n         ORG      VTOC_DSCB\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VZAPSPFD TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     ATTRS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      VZAPXTNT\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT824/CBT.V500.FILE824.PDS/SOURCE.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT824/CBT.V500.FILE824.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}