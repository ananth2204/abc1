* ------------------------------------------------------------------- *
*                                                                     *
*         Parse commands and operands                                 *
*                                                                     *
* ------------------------------------------------------------------- *
VZAPPARS CSECT
VZAPPARS AMODE 31
VZAPPARS RMODE ANY
         USING VZAPPARS,R15
         USING VZAPCOMM,R12
         B     INIT0000
MODID    DC    CL8'VZAPPARS'
         DC    CL8'&SYSDATE'
         DC    CL8'&SYSTIME'
         DC    A(PARSEEND-VZAPPARS)
INIT0000 DS    0H
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R10,R15                        COPY BASE ADDRESS
         DROP  R15
         USING VZAPPARS,R10
         L     R15,COMM_DXD                   DXD AREA BASE ADDRESS
         A     R15,DXD_START                  PLUS OFFSET
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        COPY DXD AREA ADDRESS
         USING DXDPARS,R13                    DEFINE WORK AREA BASE
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY
         L     R8,COMM_VZAPSPFD
         USING VZAPSPFD,R8
         MVC   DXD_COMMAND,COMM_BLANKS        INITIALIZE WORK AREA
         MVI   DXD_RC,0                       RESET RC
         MVI   DXD_FLAGS,0                    RESET FLAGS
* ------------------------------------------------------------------- *
*        Initialize output                                            *
* ------------------------------------------------------------------- *
         LA    R1,5                           MAX OPERANDS
         LA    R4,COMM_OPERANDS               1ST OPERAND
         USING OPERAND,R4                     DEFINE BASE
INIT0010 DS    0H
         XC    OPERAND(OPERAND_L),OPERAND
         LA    R4,OPERAND_L(,R4)
         BCT   R1,INIT0010
         XC    COMM_OPERANDS_NBR,COMM_OPERANDS_NBR
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R6,COMM_COMMAND_ADDRESS        COMMAND ADDRESS
         L     R5,COMM_COMMAND_LENGTH         COMMAND LENGTH
         ITRACE ID=CMD,                                                +
               RDATA1=R6,                                              +
               RDATA2=R5
         LTR   R5,R5                          ZERO?
         BZ    EXIT0000                       YES
         CH    R5,H80                         TOO LONG?
         BNH   PARS0010                       NO
         LH    R5,H80                         LIMIT TO 80
PARS0010 DS    0H
         LR    R1,R5
         BCTR  R1,0                           FOR EXECUTE
         EX    R1,COPY_CMD                    COPY COMMAND TO WORK AREA
* ------------------------------------------------------------------- *
*        "squeeze off" leading blanks                                 *
* ------------------------------------------------------------------- *
         LA    R1,DXD_COMMAND                 FIRST BYTE OF COMMAND
         LR    R2,R5                          MAXIMUM LENGTH
PARS0020 DS    0H
         CLI   0(R1),C' '                     BLANK?
         BNE   PARS0030                       NO
         MVC   DXD_COMMAND(L'DXD_COMMAND-1),DXD_COMMAND+1
         MVI   DXD_COMMAND+(L'DXD_COMMAND-1),C' '
         BCT   R2,PARS0020                    LOOP
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PARS0030 DS    0H
         CLI   DXD_COMMAND,C'='               START WITH AN EQUAL SIGN?
         BE    ERR0090                        YES.. NOT VALID
* ------------------------------------------------------------------- *
*        Remove Consecutive blanks                                    *
* ------------------------------------------------------------------- *
         LA    R1,DXD_COMMAND
         LA    R2,80
PARS0040 DS    0H
         CLC   0(2,R1),COMM_BLANKS            TWO CONSECUTIVE BLANKS?
         BNE   PARS0050                       NO
         MVC   0(80,R1),1(R1)                 SHIFT OUT 1 BLANK
         MVI   80(R1),C' '                    FORCE A BLANK
         B     PARS0060
PARS0050 DS    0H
         LA    R1,1(,R1)                      NEXT
PARS0060 DS    0H
         BCT   R2,PARS0040
* ------------------------------------------------------------------- *
*        Remove blanks before and/or after equal signs                *
* ------------------------------------------------------------------- *
         LA    R1,DXD_COMMAND
         LA    R2,80
PARS0070 DS    0H
         CLC   =C' =',0(R1)                   BLANK AND EQUAL SIGN?
         BE    PARS0080                       YES
         CLC   =C'= ',0(R1)                   EQUAL SIGN AND A BLANK?
         BNE   PARS0100                       NO
         MVC   1(80,R1),2(R1)                 SHIFT OUT BLANK
         B     PARS0090
PARS0080 DS    0H
         MVC   0(80,R1),1(R1)                 SHIFT OUT BLANK
PARS0090 DS    0H
         MVI   80(R1),C' '                    FORCE A BLANK
         B     PARS0110
PARS0100 DS    0H
         LA    R1,1(,R1)                      NEXT
PARS0110 DS    0H
         BCT   R2,PARS0070                    LOOP
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         LA    R4,COMM_OPERANDS               FIRST OPERAND
         USING OPERAND,R4                     DEFINE BASE
         LA    R6,DXD_COMMAND                 FIRST CHARACTER
         B     PARS0130
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PARS0120 DS    0H
         BAL   R9,PARS1000                    FIND A NON-BLANK
PARS0130 DS    0H
         ST    R6,DXD_OPERAND_ADDRESS         SAVE ADDRESS
         BAL   R9,PARS2000                    FIND BLANK OR EQUAL SIGN
         LTR   R1,R1                          ANY DATA FOUND?
         BZ    EXIT0000                       NO
         L     R15,DXD_OPERAND_END            END OF OPERAND
         TM    DXD_FLAGS,$DXD_EQUAL           END WITH EQUAL SIGN?
         BNO   PARS0140                       NO
         CLI   0(R15),C'='                    THIS END WITH EQUAL SIGN?
         BE    ERR0090                        YES
PARS0140 DS    0H
         CLI   0(R15),C'='                    END WITH EQUAL SIGN?
         BE    PARS0150                       YES
         NI    DXD_FLAGS,255-$DXD_EQUAL       RESET INDICATOR
         B     PARS0160
PARS0150 DS    0H
         OI    DXD_FLAGS,$DXD_EQUAL           SET FLAG
PARS0160 DS    0H
         MVI   OPERAND_TYPE,$OPERAND_PRESENT  INDICATE PRESENCE
         MVC   OPERAND_ADDRESS,DXD_OPERAND_ADDRESS
         STCM  R1,3,OPERAND_LENGTH            SET LENGTH
         SR    R14,R14                        CLEAR REGISTER
         ICM   R14,3,COMM_OPERANDS_NBR        NUMBER OF OPERANDS SO FAR
         LA    R14,1(,R14)                    ADD 1
         STCM  R14,3,COMM_OPERANDS_NBR        SAVE TOTAL
         ICM   R3,15,OPERAND_ADDRESS
         CLI   0(R3),C'/'                     UNIX PATH?
         BE    PARS0200                       YES
         BCTR  R1,R0                          FOR EXECUTE
         ITRACE ID=UPPER,                                              +
               RDATA1=R3,                                              +
               RDATA2=R1
         EX    R1,CASE_OC                     TRANSLATE TO UPPER CASE
PARS0170 DS    0H
         EX    R1,NBR_TRT                     NUMERIC?
         BNZ   PARS0180                       NO
         OI    OPERAND_TYPE,$OPERAND_NUMERIC
         B     PARS0200
PARS0180 DS    0H
         ICM   R1,3,OPERAND_LENGTH            OPERAND LENGTH
         L     R15,DXD_OPERAND_END            OPERAND'S ENDING ADDRESS
         CLC   =C'X''',0(R3)                  HEX STRING (X'....')?
         BNE   PARS0190                       NO
         CLI   0(R15),C''''                   ENDING QUOTE PRESENT?
         BNE   ERR0010                        NO.. INVALID
         TM    OPERAND_LENGTH+1,X'01'         LENGTH ODD NOW?
         BNO   ERR0020                        NO.. INVALID
         SH    R1,H3                          MINUS LENGTH OF DELIMITER
         BNH   ERR0030                        INVALID
         STCM  R1,3,OPERAND_LENGTH            OPERAND LENGTH
         LA    R3,2(R3)                       DATA FOLLOWING OPENING X'
         BCTR  R1,R0                          FOR EXECUTE
         EX    R1,HEX_TRT                     VALID HEX?
         BNZ   ERR0040                        NO.. INVALID
         ITRACE ID=HEX,                                                +
               RDATA1=R3,                                              +
               DATA2=(OPERAND_LENGTH,2)
         STCM  R3,15,OPERAND_ADDRESS          SET OPERAND ADDRESS
         OI    OPERAND_TYPE,$OPERAND_HEX
         B     PARS0200
PARS0190 DS    0H
         CLI   0(R3),C''''                    OPENING QUOTE
         BNE   PARS0200                       NO
         CLI   0(R15),C''''                   ENDING QUOTE PRESENT?
         BNE   ERR0050                        NO.. INVALID
         LA    R3,1(R3)                       DATA FOLLOWING QUOTE
         SH    R1,H2                          LENGTH WITHOUT QUOTES
         BNH   ERR0060
         STCM  R3,15,OPERAND_ADDRESS
         STCM  R1,3,OPERAND_LENGTH            SET LENGTH
         OI    OPERAND_TYPE,$OPERAND_QUOTED
PARS0200 DS    0H
         LA    R4,OPERAND_L(,R4)              NEXT OPERAND OUTPUT
         LTR   R5,R5
         BZ    EXIT0000
         B     PARS0120                       LOOP
* ------------------------------------------------------------------- *
*        FIND NON-BLANK                                               *
* ------------------------------------------------------------------- *
PARS1000 DS    0H
         CLI   0(R6),C' '                     BLANK?
         BNER  R9                             NO
         LA    R6,1(,R6)                      NEXT
         BCT   R5,PARS1000                    LOOP
         TM    DXD_FLAGS,$DXD_EQUAL           LAST END WITH EQUAL SIGN?
         BO    ERR0070                        YES
         B     EXIT0000
* ------------------------------------------------------------------- *
*        FIND BLANK OR EQUAL SIGN                                     *
* ------------------------------------------------------------------- *
PARS2000 DS    0H
         SR    R1,R1                          INITIALIZE LENGTH
PARS2010 DS    0H
         CLI   0(R6),C' '                     BLANK?
         BER   R9                             YES
         CLI   0(R6),C'='                     EQUAL SIGN
         BNE   PARS2020                       NO
         CLI   1(R6),C'='                     TWO EQUAL SIGNS?
         BE    ERR0080                        YES.. BAD NEWS
         OI    DXD_FLAGS,$DXD_EQUAL           SET FLAG
         LA    R1,1(,R1)                      ADD 1 TO LENGTH
         LA    R6,1(,R6)                      SKIP OVER EQUAL SIGN
         ST    R6,DXD_OPERAND_END             SAVE END OF OPERAND
         BCTR  R5,0                           MINUS 1 REMAINING
         BR    R9                             OTHERWIZE END OF OPERAND
PARS2020 DS    0H
         ST    R6,DXD_OPERAND_END
         LA    R1,1(,R1)                      ADD 1 TO LENGTH
         LA    R6,1(,R6)                      ADD 1 TO ADDRESS
         BCT   R5,PARS2010                    LOOP
         BR    R9                             END OF DATA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         MVC   SPF_MSG_1(MSG01_L),MSG01
         B     ERR1000
ERR0020  DS    0H
         MVC   SPF_MSG_1(MSG02_L),MSG02
         B     ERR1000
ERR0030  DS    0H
         MVC   SPF_MSG_1(MSG03_L),MSG03
         B     ERR1000
ERR0040  DS    0H
         MVC   SPF_MSG_1(MSG04_L),MSG04
         B     ERR1000
ERR0050  DS    0H
         MVC   SPF_MSG_1(MSG05_L),MSG05
         B     ERR1000
ERR0060  DS    0H
         MVC   SPF_MSG_1(MSG06_L),MSG06
         B     ERR1000
ERR0070  DS    0H
         MVC   SPF_MSG_1(MSG07_L),MSG07
         B     ERR1000
ERR0080  DS    0H
         MVC   SPF_MSG_1(MSG08_L),MSG08
         B     ERR1000
ERR0090  DS    0H
         MVC   SPF_MSG_1(MSG09_L),MSG09
ERR1000  DS    0H
         MVI   DXD_RC,8
EXIT0000 DS    0H
         SR    R15,R15
         IC    R15,DXD_RC             SET RC
         ITRACE ID=EXIT,                                               +
               RDATA1=R15
         L     R13,4(,R13)
         L     R14,12(,R13)
         LM    R0,R12,20(R13)
         BR    R14
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
COPY_CMD MVC   DXD_COMMAND(0),0(R6)   COPY COMMAND TO WORK AREA
CASE_OC  OC    0(0,R3),COMM_BLANKS    'TRANSLATE' TO UPPERCASE
NBR_TRT  TRT   0(0,R3),NUMERICS       CHECK FOR NUMERIC OPERAND
HEX_TRT  TRT   0(0,R3),HEX            CHECK FOR HEX OPERAND
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START  DC    Q(DXDPARS)
H2         DC    H'2'
H3         DC    H'3'
H80        DC    H'80'

NUMERICS   DC    256X'FF'
           ORG   NUMERICS+C'0'
           DC    10X'00'
           ORG

HEX        DC    256X'FF'
           ORG   HEX+C'A'
           DC    6X'00'
           ORG   HEX+C'0'
           DC    10X'00'
           ORG

MSG01      DS  0C
           DC  CL11'VZAPPARS01E'
           DC  C'No ending quote on hex parameter'
MSG01_L    EQU *-MSG01

MSG02      DS  0C
           DC  CL11'VZAPPARS02E'
           DC  C'Hex string has odd number of digits'
MSG02_L    EQU *-MSG02

MSG03      DS  0C
           DC  CL11'VZAPPARS03E'
           DC  C'Hex string has no digits'
MSG03_L    EQU *-MSG03

MSG04      DS  0C
           DC  CL11'VZAPPARS04E'
           DC  C'Hex string contains non-hex digit(s)'
MSG04_L    EQU *-MSG04

MSG05      DS  0C
           DC  CL11'VZAPPARS05E'
           DC  C'No ending quote'
MSG05_L    EQU *-MSG05

MSG06      DS  0C
           DC  CL11'VZAPPARS06E'
           DC  C'Quoted string with zero length found'
MSG06_L    EQU *-MSG06

MSG07      DS  0C
           DC  CL11'VZAPPARS07E'
           DC  C'Keyword with no value '
MSG07_L    EQU *-MSG07

MSG08      DS  0C
           DC  CL11'VZAPPARS08E'
           DC  C'Two consecutive equal signs (=) found'
MSG08_L    EQU *-MSG08

MSG09      DS  0C
           DC  CL11'VZAPPARS09E'
           DC  C'Leading equal sign not allowed'
MSG09_L    EQU *-MSG09

PARSEEND   EQU *
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDPARS              DSECT
                     COPY   DXDPREF
DXD_OPERAND_ADDRESS  DS     A
DXD_OPERAND_END      DS     A

DXD_FLAGS            DS     X
$DXD_EQUAL           EQU    X'80'     .. LAST OPERAND ENDED EQUAL SIGN

DXD_RC               DS     X

DXD_COMMAND          DS     CL160
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COMMON
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         VZAPSPFD TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     OPERAND
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     TRENTRY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     REGEQU
         END      VZAPPARS
