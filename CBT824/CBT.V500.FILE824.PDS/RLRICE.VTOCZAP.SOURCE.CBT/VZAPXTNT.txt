* ------------------------------------------------------------------- *
*                                                                     *
*  Module name: VZAPXTNT                                              *
*                                                                     *
*   Display/update Extent info                                        *
*                                                                     *
* ------------------------------------------------------------------- *
VZAPXTNT CSECT
VZAPXTNT AMODE 31
VZAPXTNT RMODE ANY
         USING VZAPCOMM,R12
         USING VZAPXTNT,R15
         B     INIT0000
MODID    DC    CL8'VZAPXTNT'
         DC    CL8'&SYSDATE'
         DC    CL8'&SYSTIME'
         DC    A(DSCBEND-VZAPXTNT)
INIT0000 DS    0H
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R10,R15                        COPY ENTRY POINT
         LR    R2,R0                          COPY R0
         LR    R3,R1                          COPY R1
         DROP  R15
         USING VZAPXTNT,R10                   DEFINE BASE
         L     R15,COMM_DXD
         A     R15,DXD_START
         ST    R13,4(,R15)                    SAVE R13
         ST    R15,8(,R13)                    CHAIN SAVE AREA
         LR    R13,R15                        COPY WORK AREA ADDRESS
         USING DXDXTNT,R13                    DEFINE WORK AREA BASE
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY
         L     R9,COMM_VZAPSPFD
         USING VZAPSPFD,R9
         L     R8,COMM_SELECTED_DSCB          SELECTED DSCB
         USING VTOCDATA,R8
         L     R5,COMM_SELECTED_FIELD         SELECTED FIELD
         USING FIELD_DSECT,R5
         ITRACE ID=FIELD,                                              +
               DATA1=FIELD_LABEL,                                      +
               DATA2=(FIELD_DISP,2)
         SR    R4,R4
         ICM   R4,3,FIELD_DISP                DISP TO DATA
         AR    R4,R8                          PLUS BASE
* ------------------------------------------------------------------- *
*        Copy extent info to allow user to abort                      *
* ------------------------------------------------------------------- *
         ITRACE ID=DATA,                                               +
               RDATA1=R4,                                              +
               DATA2=0(R4)
         MVC   DXD_EXTENT,0(R4)               SAVE EXTENT INFO
* ------------------------------------------------------------------- *
*        Obtain VDATA for dynamic area                                *
* ------------------------------------------------------------------- *
         MVC   COMM_PANEL,FIELD_PANEL         COPY PANEL NAME
         ITRACE ID=PQRY,                                               +
               DATA1=COMM_PANEL
         L     R15,COMM_V_VZAPPQRY            VZAPPQRY ENTRY POINT
         BALR  R14,R15                        CALL VTOPQRY
         L     R0,SPF_VDEPTH                  NUMBER OF ROWS
         MH    R0,SPF_VWIDTH+2                COMPUTE VDATA SIZE
         ST    R0,DXD_VDATA_LENGTH            SAVE LENGTH
         GETMAIN RU,                          GETMAIN STORAGE FOR VDATA+
               LV=(0),                                                 +
               LOC=ANY
         ST    R1,DXD_VDATA_ADDR              SAVE ADDR
         ITRACE ID=VDATA,                                              +
               RDATA1=R1,                                              +
               DATA2=(DXD_VDATA_LENGTH,4)
* ------------------------------------------------------------------- *
*        Initialize dyamic area                                       *
* ------------------------------------------------------------------- *
MAIN0010 DS    0H
         ITRACE ID=INITVDATA
         L     R0,DXD_VDATA_ADDR              VDATA ADDR
         L     R1,DXD_VDATA_LENGTH            VDATA LENGTH
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                         INITIALIZE VDATA BUFFER
         XC    DXD_VDATA_CURSOR,DXD_VDATA_CURSOR
* ------------------------------------------------------------------- *
*        Build detail                                                 *
* ------------------------------------------------------------------- *
         L     R7,DXD_VDATA_ADDR              DYNAMIC AREA BUFFER
         ITRACE ID=BUILD,                                              +
               DATA1=R7
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0020 DS    0H
         ITRACE ID=FLAGS,                                              +
               DATA1=(0(R4),1)
         MVC   0(MSG01_L,R7),MSG01            INITIALIZE
         USING MSG01,R7
         UNPK  COMM_DWORD(3),0(2,R4)          UNPACK FLAGS
         TR    COMM_DWORD(2),COMM_HEXCHAR     TRANSLATE
         MVC   MSG01_FLAGS,COMM_DWORD         COPY TO DYNAMIC AREA
         DROP  R7

         A     R7,SPF_VWIDTH

         ST    R7,DXD_FLAGS                   SAVE ADDR
         LA    R2,BIT_TABLE
         USING BIT_DSECT,R2
         SR    R1,R1
MAIN0030 DS    0H
         ITRACE ID=BIT,                                                +
               DATA1=(BIT_FLAG,1)
         MVC   0(MSG02_L,R7),MSG02
         USING MSG02,R7
         MVC   MSG02_DESC,BIT_DESC            COPY DESCRIPTION
         IC    R1,BIT_FLAG                    BIG FLAG(S)
         EX    R1,BIT_TM                      BIT(S) ON?
         BNO   MAIN0040                       NO
         MVI   MSG02_SELECT,C'X'              INIDICATE BIT IS SET
         MVI   MSG02_ATTR,$SCREEN_ATTR_HIGH   CHANGE ATTRIBUTE
MAIN0040 DS    0H
         DROP  R7
         A     R7,SPF_VWIDTH                  NEXT LINE
         LA    R2,BIT_DSECT_L(,R2)            NEXT BIT/MEANING
         CLI   0(R2),X'FF'                    END OF TABLE?
         BNE   MAIN0030                       NO

         ITRACE ID=SEQ,                                                +
               DATA1=(1(R4),1)
         ST    R7,DXD_SEQ                     SAVE ADDR
         SR    R0,R0
         IC    R0,1(,R4)                      GET SEQUENCE NUMBER
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD
         ED    DXD_EDITWORD,COMM_DWORD+5      EDIT SEQUENCE NUMBER
         MVC   0(MSG03_L,R7),MSG03
         USING MSG03,R7
         MVC   MSG03_DESC,SEQ_NUMBER          FIELD DESCRIPTION
         MVC   MSG03_NBR,DXD_EDITWORD+1       COPY SEQUENCE NUMBER
         DROP  R7

         A     R7,SPF_VWIDTH                  NEXT LINE

         ITRACE ID=FROM_CYL,                                           +
               DATA1=(2(R4),2)
         ST    R7,DXD_FROM_CYL                SAVE ADDR
         SR    R0,R0
         ICM   R0,3,2(R4)                     'FROM' CYLINDER
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD
         ED    DXD_EDITWORD,COMM_DWORD+5      EDIT SEQUENCE NUMBER
         MVC   0(MSG03_L,R7),MSG03
         USING MSG03,R7
         MVC   MSG03_DESC,FROM_CYLINDER       FIELD DESCRIPTION
         MVC   MSG03_NBR,DXD_EDITWORD+1       COPY CYLINDER NUMBER
         DROP  R7

         A     R7,SPF_VWIDTH                  NEXT LINE


         ITRACE ID=FROM_HD,                                            +
               DATA1=(4(R4),2)
         ST    R7,DXD_FROM_HD                 SAVE ADDR
         SR    R0,R0
         ICM   R0,3,4(R4)                     'FROM' HEAD
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD
         ED    DXD_EDITWORD,COMM_DWORD+5      EDIT SEQUENCE NUMBER
         MVC   0(MSG03_L,R7),MSG03
         USING MSG03,R7
         MVC   MSG03_DESC,FROM_HEAD           FIELD DESCRIPTION
         MVC   MSG03_NBR,DXD_EDITWORD+1       COPY HEAD NUMBER
         DROP  R7

         A     R7,SPF_VWIDTH                  NEXT LINE

         ITRACE ID=TO_CYL,                                             +
               DATA1=(6(R4),2)
         ST    R7,DXD_TO_CYL                  SAVE ADDR
         SR    R0,R0
         ICM   R0,3,6(R4)                     'TO' CYLINDER
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD
         ED    DXD_EDITWORD,COMM_DWORD+5      EDIT SEQUENCE NUMBER
         MVC   0(MSG03_L,R7),MSG03
         USING MSG03,R7
         MVC   MSG03_DESC,TO_CYLINDER         FIELD DESCRIPTION
         MVC   MSG03_NBR,DXD_EDITWORD+1       COPY CYLINDER NUMBER
         DROP  R7

         A     R7,SPF_VWIDTH                  NEXT LINE

         ITRACE ID=TO_HD,                                              +
               DATA1=(8(R4),2)
         ST    R7,DXD_TO_HD                   SAVE ADDR
         SR    R0,R0
         ICM   R0,3,8(R4)                     'TO' HEAD
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDITWORD,EDITWORD          INITIALIZE EDIT WORD
         ED    DXD_EDITWORD,COMM_DWORD+5      EDIT SEQUENCE NUMBER
         MVC   0(MSG03_L,R7),MSG03
         USING MSG03,R7
         MVC   MSG03_DESC,TO_HEAD             FIELD DESCRIPTION
         MVC   MSG03_NBR,DXD_EDITWORD+1       COPY HEAD NUMBER
         DROP  R7

* ------------------------------------------------------------------- *
*        Display                                                      *
* ------------------------------------------------------------------- *
MAIN0060 DS    0H
         ITRACE ID=DISPLAY
         MVC   COMM_PANEL,FIELD_PANEL         COPY PANEL NAME
         MVC   COMM_VDATA_ADDR,DXD_VDATA_ADDR
         MVC   COMM_VDATA_LENGTH,DXD_VDATA_LENGTH
         MVC   COMM_VDATA_CURSOR,DXD_VDATA_CURSOR
         L     R15,COMM_V_VZAPDISP            VZAPDISP ENTRY POINT
         BALR  R14,R15                        CALL VZAPDISP
         ITRACE ID=DISP_RC,                                            +
               DATA1=(COMM_DISP_RC,2)
         OC    COMM_DISP_RC,COMM_DISP_RC      RC = 0?
         BNZ   MAIN0300                       NO
* ------------------------------------------------------------------- *
*        Does user want to cancel changes?                            *
* ------------------------------------------------------------------- *
         CLC   SPF_ZCMD,COMM_BLANKS           COMMAND BLANK?
         BE    MAIN0100                       YES
         CLC   CAN,SPF_ZCMD                   CAN?
         BE    MAIN0400                       YES
         CLC   CANCEL,SPF_ZCMD                CANCEL?
         BE    MAIN0400                       YES
         B     ERR0010                        OTHERWISE BAD COMMAND
* ------------------------------------------------------------------- *
*        VERIFY NEW DATA IS VALID                                     *
* ------------------------------------------------------------------- *
MAIN0100 DS    0H
         L     R7,DXD_SEQ                     SEQ NBR IN VDATA
         BAL   R15,MAIN0200                   VERIFY/CONVERT

         L     R7,DXD_FROM_CYL                FROM CYLINDER IN VDATA
         BAL   R15,MAIN0200                   VERIFY/CONVERT

         L     R7,DXD_FROM_HD                 FROM HEAD IN VDATA
         BAL   R15,MAIN0200                   VERIFY/CONVERT

         L     R7,DXD_TO_CYL                  TO CYLINDER IN VDATA
         BAL   R15,MAIN0200                   VERIFY/CONVERT

         L     R7,DXD_TO_HD                   TO HEAD IN VDATA
         BAL   R15,MAIN0200                   VERIFY/CONVERT

* ------------------------------------------------------------------- *
*        Update flags                                                 *
* ------------------------------------------------------------------- *
         ITRACE ID=NEW_FLAGS
         MVI   0(R4),0                        RESET FLAGS
         LA    R2,BIT_TABLE                   FIRST BIT FLAG
         L     R7,DXD_FLAGS                   FIRST FLAG LINE
         USING MSG02,R7
         SR    R1,R1
MAIN0110 DS    0H
         CLI   MSG02_SELECT,C' '              SELECTED?
         BE    MAIN0120                       NO
         IC    R1,BIT_FLAG                    GET BIT FLAG(S)
         EX    R1,BIT_OI                      SET BIT(S)
MAIN0120 DS    0H
         A     R7,SPF_VWIDTH                  NEXT LINE
         LA    R2,BIT_DSECT_L(,R2)            NEXT BIT
         CLI   0(R2),X'FF'                    END OF TABLE?
         BNE   MAIN0110                       NO
         DROP  R7

* ------------------------------------------------------------------- *
*        Update sequence number                                       *
* ------------------------------------------------------------------- *
         L     R7,DXD_SEQ                     SEQ NBR IN VDATA
         BAL   R15,MAIN0200                   VERIFY/CONVERT
         CLM   R1,1,0(R4)                     SAME VALUE?
         BE    MAIN0130                       YES
         ITRACE ID=NEW_SEQ
         STC   R1,1(,R4)                      UPDATE SEQUENCE NUMBER
         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING
         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED

* ------------------------------------------------------------------- *
*        Update from cylinder                                         *
* ------------------------------------------------------------------- *
MAIN0130 DS    0H
         L     R7,DXD_FROM_CYL                FROM CYLINDER IN VDATA
         BAL   R15,MAIN0200                   VERIFY/CONVERT
         CLM   R1,3,2(R4)                     SAME VALUE?
         BE    MAIN0140                       YES
         ITRACE ID=NEW_FCYL
         STCM  R1,3,2(R4)                     UPDATE CYLINDER NUMBER
         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING
         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED

* ------------------------------------------------------------------- *
*        Update from head                                             *
* ------------------------------------------------------------------- *
MAIN0140 DS    0H
         L     R7,DXD_FROM_HD                 FROM HEAD IN VDATA
         BAL   R15,MAIN0200                   VERIFY/CONVERT
         CLM   R1,3,4(R4)                     SAME VALUE?
         BE    MAIN0150                       YES
         ITRACE ID=NEW_FHD
         STCM  R1,3,4(R4)                     UPDATE HEAD NUMBER
         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING
         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED

* ------------------------------------------------------------------- *
*        Update to cylinder                                           *
* ------------------------------------------------------------------- *
MAIN0150 DS    0H
         L     R7,DXD_TO_CYL                  TO CYLINDER IN VDATA
         BAL   R15,MAIN0200                   VERIFY/CONVERT
         CLM   R1,3,6(R4)                     SAME VALUE?
         BE    MAIN0160                       YES
         ITRACE ID=NEW_TCYL
         STCM  R1,3,6(R4)                     UPDATE CYLINDER NUMBER
         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING
         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED

* ------------------------------------------------------------------- *
*        Update to head                                               *
* ------------------------------------------------------------------- *
MAIN0160 DS    0H
         L     R7,DXD_TO_HD                   TO HEAD IN VDATA
         BAL   R15,MAIN0200                   VERIFY/CONVERT
         CLM   R1,3,8(R4)                     SAME VALUE?
         BE    MAIN0010                       YES
         ITRACE ID=NEW_THD
         STCM  R1,3,8(R4)                     UPDATE CYLINDER NUMBER
         OI    COMM_FLAGS,$COMM_UPDATE        UPDATE PENDING
         OI    VTOC_FLAGS,$VTOC_UPDATED       THIS DSCB UPDATED
         B     MAIN0010

* ------------------------------------------------------------------- *
*        Verify numeric is valid                                      *
* ------------------------------------------------------------------- *
MAIN0200 DS    0H
         USING MSG03,R7
         LA    R1,MSG03_NBR                   1ST DIGIT
         LA    R2,L'MSG03_NBR                 NBR OF DIGITS
         ITRACE ID=VERIFY,                                             +
               DATA1=(MSG03_NBR,5)
MAIN0210 DS    0H
         CLI   0(R1),C'0'                     VALID DIGIT?
         BL    ERR0020                        NO
         CLI   0(R1),C'9'                     VALID DIGIT?
         BH    ERR0020                        NO
         LA    R1,1(,R1)                      NEXT DIGIT
         BCT   R2,MAIN0210                    LOOP
         PACK  COMM_DWORD,MSG03_NBR           PACK THE  NUMBER
         CVB   R1,COMM_DWORD                  CONVERT TO BINARY
         ITRACE ID=NUMBER,                                             +
               RDATA1=R1
         BR    R15
         DROP  R7
* ------------------------------------------------------------------- *
*                                                                     *
*        Exiting.                                                     *
*        Warn user if data is out of range or inconsistent            *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0300 DS    0H
         MVC   SPF_MSG_1,COMM_BLANKS
         MVC   SPF_MSG_2,COMM_BLANKS
         MVC   SPF_MSG_3,COMM_BLANKS
         MVC   SPF_MSG_4,COMM_BLANKS
         MVC   SPF_MSG_5,COMM_BLANKS
         MVI   DXD_RC,0                       FORCE DEFAULT RC
         ITRACE ID=CHK_XTNT,                                           +
               DATA1=2(R4)
         CLC   2(2,R4),COMM_MAX_CC            FROM CYL > DEVICE MAX?
         BNH   MAIN0310                       NO
         MVC   SPF_MSG_1(EMSG04_L),EMSG04     SET MESSAGE
         MVI   DXD_RC,4                       SET RC
MAIN0310 DS    0H
         CLC   4(2,R4),COMM_MAX_HH            FROM HEAD > DEVICE MAX?
         BNH   MAIN0320                       NO
         MVC   SPF_MSG_2(EMSG05_L),EMSG05     SET MESSAGE
         MVI   DXD_RC,4                       SET RC
MAIN0320 DS    0H
         CLC   6(2,R4),COMM_MAX_CC            TO CYL > DEVICE MAX?
         BNH   MAIN0330                       NO
         MVC   SPF_MSG_3(EMSG06_L),EMSG06     SET MESSAGE
         MVI   DXD_RC,4                       SET RC
MAIN0330 DS    0H
         CLC   8(2,R4),COMM_MAX_HH            TO HEAD > DEVICE MAX?
         BNH   MAIN0340                       NO
         MVC   SPF_MSG_4(EMSG07_L),EMSG07     SET MESSAGE
         MVI   DXD_RC,4                       SET RC
MAIN0340 DS    0H
         SR    R0,R0
         SR    R1,R1
         SR    R2,R2
         ICM   R0,3,2(R4)                     FROM CYLINDER
         ICM   R1,3,4(R4)                     FROM HEAD
         MH    R0,COMM_MAX_HH                 CONVERT TO TRACKS
         AR    R0,R1                          PLUS STARTING HEAD
         SR    R1,R1
         ICM   R1,3,6(R4)                     ENDING CYLINDER
         ICM   R2,3,8(R4)                     ENDING HEAD
         MH    R1,COMM_MAX_HH                 CONVERT TO TRACKS
         AR    R1,R2                          PLUS ENDING TRACK
         ITRACE ID=LOW_HIGH,                                           +
               RDATA1=R0,                                              +
               RDATA2=R1
         CR    R0,R1                          FROM > LOW?
         BNH   MAIN0350
         MVC   SPF_MSG_5(EMSG08_L),EMSG08     SET MESSAGE
         MVI   DXD_RC,4                       SET RC
MAIN0350 DS    0H
         CLI   DXD_RC,0                       RC STILL = 0?
         BE    EXIT0000                       YES
         ITRACE ID=CALLCNFM
         MVC   SPF_YES_OR_NO,COMM_BLANKS      INITIALIZE REPLY
         L     R15,COMM_V_VZAPCNFM            VZAPCNFM ENTRY POINT
         BALR  R14,R15                        CALL VZAPCNFM
         CLI   SPF_YES_OR_NO,C'Y'             USER REPLY 'YES'?
         BE    EXIT0000                       YES
         B     MAIN0010                       DISPLAY AGAIN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0400 DS    0H
         ITRACE ID=CANCEL
         MVC   SPF_ZCMD,COMM_BLANKS
         CLC   DXD_EXTENT,0(R4)               EXTENTS CHANGED?
         BE    EXIT0000                       NO
         MVC   SPF_MSG_1(EMSG01_L),EMSG01     WARN THE USER
         MVC   0(10,R4),DXD_EXTENT            RESET EXTENT
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         MVC   SPF_MSG_1(EMSG02_L),EMSG02     COPY MESSAGE
         B     MAIN0060
ERR0020  DS    0H
         ITRACE ID=BADDIGIT
         MVC   SPF_MSG_1(EMSG03_L),EMSG03     COPY MESSAGE
         USING MSG03,R7
         MVC   SPF_MSG_1+(EMSG03_DESC-EMSG03)(L'EMSG03_DESC),MSG03_DESC
         DROP  R7
         B     MAIN0060
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         ICM   R1,15,DXD_VDATA_ADDR           VDATA GETMAINED?
         L     R0,DXD_VDATA_LENGTH            LENGTH
         BZ    EXIT0010                       NO
         FREEMAIN RU,                         FREEMAIN VDATA           +
               A=(1),                                                  +
               LV=(0)
EXIT0010 DS    0H
         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         SR    R15,R15                        SET RC
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
BIT_TM   TM    0(R4),0                        TEST BIT(S)
BIT_OI   OI    0(R4),0                        SET BIT(S)
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START     DC    Q(DXDXTNT)
              LTORG

CAN           DC    C'CAN '
CANCEL        DC    C'CANCEL '
FIELD_PANEL   DC    CL8'VZAPXTNT'
SEQ_NUMBER    DC    CL15'Sequence nbr'
FROM_CYLINDER DC    CL15'From cylinder'
FROM_HEAD     DC    CL15'From head'
TO_CYLINDER   DC    CL15'To cylinder'
TO_HEAD       DC    CL15'To head'
EDITWORD      DC    X'F02020202120'

MSG01         DS    0C
              DC    AL1($SCREEN_ATTR_HIGH_GREEN)
              DC    C'Flags          '
              DC    AL1($SCREEN_ATTR_NORMAL)
MSG01_FLAGS   DC    CL2' '
MSG01_L       EQU   *-MSG01

MSG02         DS    0C
              DC    AL1($SCREEN_ATTR_INPUT)
MSG02_SELECT  DC    C' '             '
MSG02_ATTR    DC    AL1($SCREEN_ATTR_HIGH_TURQUOISE)
MSG02_DESC    DC    CL35' '
MSG02_L       EQU   *-MSG02

MSG03         DS    0C
              DC    AL1($SCREEN_ATTR_HIGH_GREEN)
MSG03_DESC    DC    C'               '
              DC    AL1($SCREEN_ATTR_INPUT)
MSG03_NBR     DC    CL5' '
              DC    AL1($SCREEN_ATTR_HIGH_YELLOW)
MSG03_MSG     DC    CL5' '
MSG03_L       EQU   *-MSG03

EMSG01        DS    0C
              DC    C'VZAPXTNT01W Updates to extents cancelled'
EMSG01_L      EQU   *-EMSG01

EMSG02        DS    0C
              DC    C'VZAPXTNT02E Invalid command'
EMSG02_L      EQU   *-EMSG02

EMSG03        DS    0C
              DC    C'VZAPXTNT03E Nonnumeric digit in '
EMSG03_DESC   DC    CL15' '
EMSG03_L      EQU   *-EMSG03

EMSG04        DS    0C
              DC    C'VZAPXTNT04E From cylinder out of range'
EMSG04_L      EQU   *-EMSG04

EMSG05        DS    0C
              DC    C'VZAPXTNT05E From head out of range'
EMSG05_L      EQU   *-EMSG05

EMSG06        DS    0C
              DC    C'VZAPXTNT06E To cylinder out of range'
EMSG06_L      EQU   *-EMSG06

EMSG07        DS    0C
              DC    C'VZAPXTNT07E To head out of range'
EMSG07_L      EQU   *-EMSG07

EMSG08        DS    0C
              DC    C'VZAPXTNT08E From cyl/head > end cyl/head'
EMSG08_L      EQU   *-EMSG08

BIT_TABLE     DS    0C
              DC    X'81',CL35'Extent on cylinder boundary'
              DC    X'80',CL35'Split cylinder'
              DC    X'40',CL35'User label extent'
              DC    X'20',CL35'Reserved'
              DC    X'10',CL35'Reserved'
              DC    X'08',CL35'Reserved'
              DC    X'04',CL35'ISAM index'
              DC    X'02',CL35'ISAM overflow'
              DC    X'01',CL35'User data or ISAM primary'
              DC    X'FF'

DSCBEND       EQU   *
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDXTNT       DSECT
              COPY  DXDPREF

DXD_VDATA_ADDR   DS A
DXD_VDATA_LENGTH DS F
DXD_VDATA_CURSOR DS F

DXD_FLAGS     DS    A                 FIRST LINE OF FLAGS
DXD_SEQ       DS    A                 SEQUENCE NBR LINE
DXD_FROM_CYL  DS    A                 FROM CYLINDER IN DYNAMIC AREA
DXD_FROM_HD   DS    A                 FROM HEAD IN DYNAMIC AREA
DXD_TO_CYL    DS    A                 TO CYLINDER IN DYNAMIC AREA
DXD_TO_HD     DS    A                 TO HEAD LINE IN DYNAMIC AREA

DXD_EDITWORD  DS    CL6

DXD_EXTENT    DS    XL10              SAVED EXTENT

DXD_RC        DS    X
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
BIT_DSECT     DSECT
BIT_FLAG      DS    X
BIT_DESC      DS    CL35
BIT_DSECT_L   EQU   *-BIT_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COMMON
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     VZAPFLD
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     VTOCDATA
         ORG      VTOC_DSCB
         IECSDSL1 1
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         VZAPSPFD TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     ATTRS
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     TRENTRY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     REGEQU
         END      VZAPXTNT
