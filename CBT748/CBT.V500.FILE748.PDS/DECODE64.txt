//  Job Card
//*
//ASMHCL      EXEC ASMACL,
//            PARM.C='NODECK,OBJECT,XREF(SHORT),RENT',
//            PARM.L='MAP,LET,LIST,NCAL,RENT,REUS',
//            COND.L=(0,NE)
//*           PARM.C='NODECK,OBJECT,XREF(SHORT),RENT',
//*           PARM.C='NODECK,OBJECT,XREF(SHORT)',
//*           PARM.L='MAP,LET,LIST,NCAL',
//C.SYSIN   DD  *
DECODE64 CSECT ,
DECODE64 AMODE 31
DECODE64 RMODE ANY
*| ====================================================================
*| Function : Transform base64 input data into plain text (decoding)
*|
*| Rent     : Yes (SHOULD be placed in LPA if used frequently)
*|
*| Amode    : Must run in 31-bit addressing mode
*|
*| Rmode    : Above or below...
*|
*| Return   : If no errors are encountered, the return will be a text
*|            displayable exactly as the original one which was send
*|            as a attached file (POSTDATA.ATT) from the mail client
*|
*|            The Return Code will be placed in the
*|            DEC64RC return code variable.
*|
*|                    0 = No errors encountered, text converted OK
*|                    1 = No arguments specified
*|                    2 = Input data parameter missing
*|                    3 = Too many arguments
*|                    4 = Failed to get larger result block
*|                    5 = Conversion failed
*|
*| Descript : The routine handle BASE64 input text and decode it to
*|            obtain the clear text in EBCDIC
*|
*|         First it translates to the character set used in RFC2045
*|
*|         Second it restores the original bit formation with 24 bits
*|         (3 bytes).
*|
*|         Second it converts the character code from ASCII to EBCDIC
*|
*|         More information about BASE 64 can be found at:
*|         http://www.faqs.org/rfcs/rfc2045.html
*|
***********************************************************************
* ---------------------------------------------------------------------
* Setup base registers and addressability
* ---------------------------------------------------------------------
         SAVE     (14,12),,*                  Save caller's registers
         LR       R11,R15                     Get base
         USING    DECODE64,R11                Map CSECT
         LR       R9,R0                       Save ENVB ptr
         LR       R10,R1                      Save EFPL ptr
         USING    EFPL,R10                    Map EFPL
* ---------------------------------------------------------------------
* Grab some work area storage and map
* ---------------------------------------------------------------------
         STORAGE  OBTAIN,LENGTH=WORKLEN       Get storage
         ST       R13,4(,R1)                  Save callers savearea
         ST       R1,8(,R13)                  Store ours in callers
         LR       R13,R1                      Establish ours
         USING    WORKAREA,R13                Map WORK
* ---------------------------------------------------------------------
* Grab some REXX routine ptrs
* ---------------------------------------------------------------------
         ST       R9,ENVBA                    Save ENVB
         USING    ENVBLOCK,R9                 Map ENVB
         L        R1,ENVBLOCK_IRXEXTE         Get ptr to EXTE
         USING    IRXEXTE,R1                  Map EXTE
         L        R4,IRXRLT                   Get ptr to RLT
         ST       R4,RLTA                     Save it
         L        R4,IRXEXCOM                 Get ptr to EXCOM
         ST       R4,EXCOMA                   Save it
         DROP     R1                          Done with EXTE
         DROP     R9                          Done with ENVB
* ---------------------------------------------------------------------
* Get addressability to EVALBLOCK
* ---------------------------------------------------------------------
         L        R8,EFPLEVAL                 Get ptr to eval addr
         L        R8,0(R8)                    Get EVAL addr
         USING    EVALBLOCK,R8                Map EVAL
         MVC      EVALBLOCK_EVLEN,=F'0'       Pre-init to null
* ---------------------------------------------------------------------
* Address and map the arguments
* ---------------------------------------------------------------------
         L        R9,EFPLARG                  Get ptr to arguments
         USING    ARGTABLE_ENTRY,R9           Map ARGTABLE
* ---------------------------------------------------------------------
* Error if there are no arguments
* ---------------------------------------------------------------------
         CLC      ARGTABLE_END,ARGTABLE_ENTRY Last argument?
         BE       ERR1                        Yes, need at least 1
* ---------------------------------------------------------------------
* Always need input data
* ---------------------------------------------------------------------
         LM       R4,R5,ARGTABLE_ARGSTRING_PTR Get ptr and length
         LTR      R5,R5                       Null or missing?
         BZ       ERR2                        Yes, error
         STM      R4,R5,INPPTR                Store ptr and length
* ---------------------------------------------------------------------
* Don't need anymore arguments
* ---------------------------------------------------------------------
         LA       R9,ARGTABLE_NEXT            Gen ptr to next arg
         CLC      ARGTABLE_END,ARGTABLE_ENTRY Last argument?
         BNE      ERR3                        No, don't need anymore
         DROP     R9                          Done with ARGTABLE
* ---------------------------------------------------------------------
* Calculate output buffer size
* ---------------------------------------------------------------------
CALCOS   LR       R3,R5                       Get input length
         SLL      R3,1                        Double the size
* ---------------------------------------------------------------------
* Current eval block have enough room?
* ---------------------------------------------------------------------
         L        R1,EVALBLOCK_EVSIZE         Get EVAL size
         SLL      R1,3                        Cvt to byte size
         S        R1,=A(EVALBLOCK_EVDATA-EVALBLOCK) Knock off CB
         CLR      R1,R3                       Big enough?
         BNL      LB01                        Yes, continue
* ---------------------------------------------------------------------
* Have to get new result block
* ---------------------------------------------------------------------
         ST       R3,EVALL                    Set required length
         L        R15,RLTA                    Get IRXRLTA ptr
         CALL     (15),(=C'GETBLOCK',EVALA,EVALL,ENVBA),VL,MF=(E,PLIST)
         LTR      R15,R15                     Success?
         BNZ      ERR4                        No, error
         L        R8,EVALA                    Get ptr to EVAL
         ST       R8,EFPLEVAL                 Store in the EFPL
LB01     ST       R3,EVALBLOCK_EVLEN          Set length
         LA       R2,EVALBLOCK_EVDATA         Get output ptr
         ST       R2,OUTPTR                   Store ptr to output area
         ST       R3,OUTLENG                  Store length of out area
         DROP     R8                          Done with EVALBLOCK
         DROP     R10                         Done with EFPL
* ---------------------------------------------------------------------
* Decode Routine
* ---------------------------------------------------------------------
         L        R6,INPPTR                   Point to input area
         L        R7,INPLENG                  Size of input area
         BCTR     R7,R0                       Subtract 1 for execute
         EX       R7,XTR                      Translate
         L        R8,OUTPTR                   Point to output area
         L        R7,OUTLENG                  Size of output area
         BCTR     R7,R0                       Subtract 2
         BCTR     R7,R0                               for execute
         MVI      0(R8),X'20'                 Ascii space character
         EX       R7,MTR                      Translate
         L        R6,INPPTR                   Point to input area
         L        R7,INPLENG                  Size of input area
         L        R8,OUTPTR                   Point to output area
* ---------------------------------------------------------------------
* Value processing loop
* ---------------------------------------------------------------------
* ---------------------------------------------------------------------
* Rebuild the 3 bytes from the tuple and store in dest
* ---------------------------------------------------------------------
MLOOP    XR       R4,R4                       Clear quad
         XR       R5,R5                       Clerar register
         ICM      R5,B'1111',0(R6)            Insert four bytes
         SLDL     R4,26                       Shift in 26 bits
         SRL      R4,2                        Get rid of 2 bits
         SRDL     R4,24                       Position for next 6
         SLDL     R4,18                       Shift in 18 bits
         SRL      R4,2                        Get rid of 2 bits
         SRDL     R4,16                       Position for next 6
         SLDL     R4,10                       Shift in 10 bits
         SRL      R4,2                        Get rid of 2 bits
         SRDL     R4,8                        Position for next 6
         SLDL     R4,2                        Shift in 2 bits
         STCM     R5,B'1110',0(R8)            Store 3 original bytes
* ---------------------------------------------------------------------
* Adjust input parameters
* ---------------------------------------------------------------------
ML20     LA       R8,3(R8)                    Bump dest to next loc
         LA       R6,4(R6)                    Bump to next tuple
         SL       R7,=F'4'                    Adjust length
         LTR      R7,R7                       Zero length?
         BNZ      MLOOP                       Still more, back to loop
*
NOMORE   L        R8,OUTPTR                   Point to output area
         L        R9,OUTLENG                  Size of output area
         BCTR     R9,R0                       Subtract 2
         EX       R9,TTR                      Translate
*        LA       R15,C'0'                    Show RC zero
*        STC      R15,RC                      Store the RC
SETRC0   MVI      RC,C'0'                     Store the RC
         B        SETRCVAR                    Go set DEC64RC
*
* ---------------------------------------------------------------------
* Error routines
* ---------------------------------------------------------------------
ERR5     LA       R15,C'5'                    Conversion failed
         B        ERR
ERR4     LA       R15,C'4'                    Failed to get block
         B        ERR
ERR3     LA       R15,C'3'                    Too many arguments
         B        ERR
ERR2     LA       R15,C'2'                    Missing argument
         B        ERR
ERR1     LA       R15,C'1'                    No arguments
ERR      STC      R15,RC                      Store the RC
         B        SETRCVAR                    Go set DEC64RC
*
* ---------------------------------------------------------------------
* Fill in the request block
* ---------------------------------------------------------------------
SETRCVAR LA       R4,VREQ                     Get request ptr
         XC       VREQ,VREQ                   Clear request block
         USING    SHVBLOCK,R4                 Map SHVB
* ---------------------------------------------------------------------
* Initialize request block
* ---------------------------------------------------------------------
         MVI      SHVCODE,SHVSTORE            Function code
         LA       R6,DEC64RC                  Get name ptr
         LA       R7,L'DEC64RC                Get name length
         LA       R8,RC                       Get RC ptr
         LA       R9,1                        Get RC length
         STM      R6,R9,SHVNAMA               Store the lot
* ---------------------------------------------------------------------
* Store the value
* ---------------------------------------------------------------------
         L        R15,EXCOMA                  Get IRXEXCOM ptr
         CALL     (15),(=C'IRXEXCOM',0,0,VREQ,ENVBA),VL,MF=(E,PLIST)
* removed because if R15 different from 0 returns message IRX0040I
*        LA       R15,1                       Bad RC
         B        RETURN                      Go exit
         DROP     R4                          Done with SHVB
* ---------------------------------------------------------------------
* Return to caller
* ---------------------------------------------------------------------
RETURN   LR       R2,R15                      Save RC
         LR       R1,R13                      Get workarea ptr
         L        R13,4(,R13)                 Restore callers savearea
         STORAGE  RELEASE,LENGTH=WORKLEN,ADDR=(R1) Release workarea
         LR       R15,R2                      Restore RC
         L        R14,12(,R13)                Get return address
         LM       R0,R12,20(R13)              Restore registers
         BSM      0,R14                       Return to caller
         DROP     R13                         Done with WORK
* ---------------------------------------------------------------------
* Executed instructions
* ---------------------------------------------------------------------
XTR      TR       0(0,R6),CSET                Executed
TTR      TR       0(0,R8),TSET                Executed
MTR      MVC      1(0,R8),0(R8)               Executed
* ---------------------------------------------------------------------
* Static data area
* ---------------------------------------------------------------------
DEC64RC  DC       C'DEC64RC'                  Return code variable name
*
         DS       0D
CSET     DC       256XL1'00'
         ORG      CSET+C'A'
         DC       X'000102030405060708'
         ORG      CSET+C'J'
         DC       X'090A0B0C0D0E0F1011'
         ORG      CSET+C'S'
         DC       X'1213141516171819'
         ORG      CSET+C'a'
         DC       X'1A1B1C1D1E1F202122'
         ORG      CSET+C'j'
         DC       X'232425262728292A2B'
         ORG      CSET+C's'
         DC       X'2C2D2E2F30313233'
         ORG      CSET+C'0'
         DC       X'3435363738393A3B3C3D'
         ORG      CSET+C'+'
         DC       X'3E'
         ORG      CSET+C'/'
         DC       X'3F'
         ORG      CSET+C'='
         DC       X'20'
         ORG
TSET     DS       0D
         DC       X'00010203372D2E2F1605250B0C0D0E0F'
         DC       X'101112133C3D322618193F271C1D1E1F'
         DC       X'405A7F7B4A6C507D4D5D5C4E6B604B61'
         DC       X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'
         DC       X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'
         DC       X'D7D8D9E2E3E4E5E6E7E8E9B1E0BBBA6D'
         DC       X'79818283848586878889919293949596'
         DC       X'979899A2A3A4A5A6A7A8A9C04FD0BC07'
         DC       X'68DC5142434447485253545756586367'
         DC       X'719C9ECBCCCDDBDDDFECFC705B80BFFF'
         DC       X'4555CEDE49699A9BABAF5FB8B7AA8A8B'
         DC       X'2B2C092128656264B438313433B0B224'
         DC       X'22172906202A46661A35083936303A40'
         DC       X'8CAC7273749F757677231514046A783B'
         DC       X'EE59EBEDCFEFA08EAEFEFBFD8DADA1BE'
         DC       X'CA8F1BB9B6B5E19D90BDB3DAFAEA3E41'
*
* ---------------------------------------------------------------------
* Literals
* ---------------------------------------------------------------------
         LTORG                                Literals
         DROP     R11                         Done with BASE
* ---------------------------------------------------------------------
* Put argument list here to get access to constant data
* ---------------------------------------------------------------------
         IRXARGTB DECLARE=YES                 Argument Table
* ---------------------------------------------------------------------
* Workarea DSECT
* ---------------------------------------------------------------------
WORKAREA DSECT
SAVEAREA DS       18F                         Must be at start
*
INPPTR   DS    F                   pointer to input record
INPLENG  DS    F                   length of input record
OUTPTR   DS    F                   pointer to output record
OUTLENG  DS    F                   length of output record
* ---------------------------------------------------------------------
* Remaining work fields
* ---------------------------------------------------------------------
PFWD     DS       F
EVALA    DS       A
EVALL    DS       F
ENVBA    DS       A
EXCOMA   DS       A
RLTA     DS       A
PLIST    CALL     ,(,,,,),MF=L
VREQ     DS       XL(SHVBLEN)
RC       DS       C
*
WORKLEN  EQU      *-WORKAREA
* ---------------------------------------------------------------------
* Register equates
* ---------------------------------------------------------------------
        EJECT
*---------------------------------------------------------------------*
*- register usage                                                    -*
*---------------------------------------------------------------------*
R0      EQU    0                  not used
R1      EQU    1                  work and parm reg
R2      EQU    2                  work reg
R3      EQU    3                  work reg
R4      EQU    4                  work reg
R5      EQU    5                  work reg
R6      EQU    6                  work reg
R7      EQU    7                  work reg
R8      EQU    8                  point to parameters
R9      EQU    9                  linkage (inside the program)
R10     EQU    10                 point to getmained area
R11     EQU    11                 first base register
R12     EQU    12                 second base register
R13     EQU    13                 linkage
R14     EQU    14                 linkage
R15     EQU    15                 linkage
* ---------------------------------------------------------------------
* Rest of REXX control blocks
* ---------------------------------------------------------------------
         IRXEFPL                              Function Parameter List
         IRXEVALB                             Evaluation Block
         IRXENVB                              Environment Block
         IRXSHVB                              Variable Request
         IRXEXTE                              External Entry Points
* ---------------------------------------------------------------------
* The world is square ya know...careful you don't fall off!
* ---------------------------------------------------------------------
         END
//L.SYSLMOD DD  DISP=SHR,
//       DSN=xxx.LINKLIB(DECODE64)
