{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011624000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 587860, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE269.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 587860, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 587860, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE269.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\n\\t'", "DS1TRBAL": "b'\\x9b '"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\xdf\\x00\\x0b\\x01\\xe0\\x00\\x06\\x00\\x0b'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19\\x04\\x00\\x08\\x00\\x08\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:04:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "CBT249"}, "text": "   MEMBER       PURPOSE\n\n ADVNTCAV       INPUT DATA SET TO ADVENTURE\n ADVNTJCL       LINKEDIT JCL AND CLIST\n ADVNTOPT       PLI OPTIMIZER SOURCE\n ADVENTRDU      FORTRAN RANDOM NUMBER GENERATOR\n ADVNTTIM       ASSEMBLR RANDOM NUMBER GENERATOR\n ADVNTWYL       ASSEMBLR (WYLBUR I/O INTERFACE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADVNTCAV": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19\\x04\\x06\\xeb\\x06\\xeb\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:04:00", "lines": 1771, "newlines": 1771, "modlines": 0, "user": "CBT249"}, "text": "1\n1       You are standing at the end of a road before a small brick building.\n1       Around you is a forest.  A small stream flows out of the building and\n1       down a gully.\n2       You have walked up a hill, still in the forest.  The road slopes back\n2       down the other side of the hill.  There is a building in the distance.\n3       You are inside a building, a well house for a large spring.\n4       You are in a valley in the forest beside a stream tumbling along a\n4       rocky bed.\n5       You are in open forest, with a deep valley to one side.\n6       You are in open forest near both a valley and a road.\n7       At your feet all the water of the stream splashes into a 2-inch slit\n7       in the rock.  Downstream the streambed is bare rock.\n8       You are in a 20-foot depression floored with bare dirt.  Set into the\n8       dirt is a strong steel grate mounted in concrete.  A dry streambed\n8       leads into the depression.\n9       You are in a small chamber beneath a 3x3 steel grate to the surface.\n9       A low crawl over cobbles leads inward to the west.\n10      You are crawling over cobbles in a low passage.  There is a dim light\n10      at the east end of the passage.\n11      You are in a debris room filled with stuff washed in from the surface.\n11      A low wide passage with cobbles becomes plugged with mud and debris\n11      here, but an awkward canyon leads upward and west.  A note on the wall\n11      says \"Magic word XYZZY\".\n12      You are in an awkward sloping east/west canyon.\n13      You are in a splendid chamber thirty feet high.  The walls are frozen\n13      rivers of orange stone.  An awkward canyon and a good passage exit\n13      from east and west sides of the chamber.\n14      At your feet is a small pit breathing traces of white mist.  An east\n14      passage ends here except for a small crack leading on.\n15      You are at one end of a vast hall stretching forward out of sight to\n15      the west.  There are openings to either side.  Nearby, a wide stone\n15      staircase leads downward.  The hall is filled with wisps of white mist\n15      swaying to and fro almost as if alive.  A cold wind blows up the\n15      staircase.  There is a passage at the top of a dome behind you.\n16      The crack is far too small for you to follow.\n17      You are on the east bank of a fissure slicing clear across the hall.\n17      The mist is quite thick here, and the fissure is too wide to jump.\n18      This is a low room with a crude note on the wall.  The note says,\n18      \"You won't get it up the steps\".\n19      You are in the hall of the mountain king, with passages off in all\n19      directions.\n20      You are at the bottom of the pit with a broken neck.\n21      You didn't make it.\n22      The dome is unclimbable.\n23      You are at the west end of the twopit room.  There is a large hole in\n23      the wall above the pit at this end of the room.\n24      You are at the bottom of the eastern pit in the twopit room.  There is\n24      a small pool of oil in one corner of the pit.\n25      You are at the bottom of the western pit in the twopit room.  There is\n25      a large hole in the wall about 25 feet above you.\n26      You clamber up the plant and scurry through the hole at the top.\n27      You are on the west side of the fissure in the hall of mists.\n28      You are in a low N/S passage at a hole in the floor.  The hole goes\n28      down to an E/W passage.\n29      You are in the south side chamber.\n30      You are in the west side chamber of the hall of the mountain king.\n30      A passage continues west and up here.\n31      >$<\n32      You can't get by the snake.\n33      You are in a large room, with a passage to the south, a passage to the\n33      west, and a wall of broken rock to the east.  There is a large \"Y2\" on\n33      a rock in the room's center.\n34      You are in a jumble of rock, with cracks everywhere.\n35      You're at a low window overlooking a huge pit, which extends up out of\n35      sight.  A floor is indistinctly visible over 50 feet below.  Traces of\n35      white mist cover the floor of the pit, becoming thicker to the right.\n35      Marks in the dust around the window would seem to indicate that\n35      someone has been here recently.  Directly across the pit from you and\n35      25 feet away there is a similar window looking into a lighted room.  A\n35      shadowy figure can be seen there peering back at you.\n36      You are in a dirty broken passage.  To the east is a crawl.  To the\n36      west is a large passage.  Above you is a hole to another passage.\n37      You are on the brink of a small clean climbable pit.  A crawl leads\n37      west.\n38      You are in the bottom of a small pit with a little stream, which\n38      enters and exits through tiny slits.\n39      You are in a large room full of dusty rocks.  There is a big hole in\n39      the floor.  There are cracks everywhere, and a passage leading east.\n40      You have crawled through a very low wide passage parallel to and north\n40      of the hall of mists.\n41      You are at the west end of hall of mists.  A low wide crawl continues\n41      west and another goes north.  To the south is a little passage 6 feet\n41      off the floor.\n42      You are in a maze of twisty little passages, all alike.\n43      You are in a maze of twisty little passages, all alike.\n44      You are in a maze of twisty little passages, all alike.\n45      You are in a maze of twisty little passages, all alike.\n46      Dead end\n47      Dead end\n48      Dead end\n49      You are in a maze of twisty little passages, all alike.\n50      You are in a maze of twisty little passages, all alike.\n51      You are in a maze of twisty little passages, all alike.\n52      You are in a maze of twisty little passages, all alike.\n53      You are in a maze of twisty little passages, all alike.\n54      Dead end\n55      You are in a maze of twisty little passages, all alike.\n56      Dead end\n57      You are on the brink of a thirty foot pit with a massive orange column\n57      down one wall.  You could climb down here but you could not get back\n57      up.  The maze continues at this level.\n58      Dead end\n59      You have crawled through a very low wide passage parallel to and north\n59      of the hall of mists.\n60      You are at the east end of a very long hall apparently without side\n60      chambers.  To the east a low wide crawl slants up.  To the north a\n60      round two foot hole slants down.\n61      You are at the west end of a very long featureless hall.  The hall\n61      joins up with a narrow north/south passage.\n62      You are at a crossover of a high N/S passage and a low E/W one.\n63      Dead end\n64      You are at a complex junction.  A low hands and knees passage from the\n64      north joins a higher crawl from the east to make a walking passage\n64      going west.  There is also a large room above.  The air is damp here.\n65      You are in bedquilt, a long east/west passage with holes everywhere.\n65      To explore at random select north, south, up, or down.\n66      You are in a room whose walls resemble swiss cheese.  Obvious passages\n66      go west, east, NE, and NW.  Part of the room is occupied by a large\n66      bedrock block.\n67      You are at the east end of the twopit room.  The floor here is\n67      littered with thin rock slabs, which make it easy to descend the pits.\n67      There is a path here bypassing the pits to connect passages from east\n67      and west.  There are holes all over, but the only big one is on the\n67      wall directly over the west pit where you can't get to it.\n68      You are in a large low circular chamber whose floor is an immense slab\n68      fallen from the ceiling (slab room).  East and west there once were\n68      large passages, but they are now filled with boulders.  Low small\n68      passages go north and south, and the south one quickly bends west\n68      around the boulders.\n69      You are in a secret N/S canyon above a large room.\n70      You are in a secret N/S canyon above a sizable passage.\n71      You are in a secret canyon at a junction of three canyons, bearing\n71      north, south, and SE.  The north one is as tall as the other two\n71      combined.\n72      You are in a large low room.  Crawls lead north, SE, and SW.\n73      Dead end crawl.\n74      You are in a secret canyon which here runs E/W.  It crosses over a\n74      very tight canyon 15 feet below.  If you go down you may not be able\n74      to get back up.\n75      You are at a wide place in a very tight N/S canyon.\n76      The canyon here becomes too tight to go further south.\n77      You are in a tall E/W canyon.  A low tight crawl goes 3 feet north and\n77      seems to open up.\n78      The canyon runs into a mass of boulders -- dead end.\n79      The stream flows out through a pair of 1 foot diameter sewer pipes.\n79      It would be advisable to use the exit.\n80      You are in a maze of twisty little passages, all alike.\n81      Dead end\n82      Dead end\n83      You are in a maze of twisty little passages, all alike.\n84      You are in a maze of twisty little passages, all alike.\n85      Dead end\n86      Dead end\n87      You are in a maze of twisty little passages, all alike.\n88      You are in a long, narrow corridor stretching out of sight to the\n88      west.  At the eastern end is a hole through which you can see a\n88      profusion of leaves.\n89      There is nothing here to climb.  Use \"up\" or \"out\" to leave the pit.\n90      You have climbed up the plant and out of the pit.\n91      You are at the top of a steep incline above a large room.  You could\n91      climb down here, but you would not be able to climb up.  There is a\n91      passage leading back to the north.\n92      You are in the giant room.  The ceiling here is too high up for your\n92      lamp to show it.  Cavernous passages lead east, north, and south.  On\n92      the west wall is scrawled the inscription, \"Fee fie foe foo\" \u00ddsic\u00a8.\n93      The passage here is blocked by a recent cave-in.\n94      You are at one end of an immense north/south passage.\n95      You are in a magnificent cavern with a rushing stream, which cascades\n95      over a sparkling waterfall into a roaring whirlpool which disappears\n95      through a hole in the floor.  Passages exit to the south and west.\n96      You are in the soft room.  The walls are covered with heavy curtains,\n96      the floor with a thick pile carpet.  Moss covers the ceiling.\n97      This is the oriental room.  Ancient oriental cave drawings cover the\n97      walls.  A gently sloping passage leads upward to the north, another\n97      passage leads SE, and a hands and knees crawl leads west.\n98      You are following a wide path around the outer edge of a large cavern.\n98      Far below, through a heavy white mist, strange splashing noises can be\n98      heard.  The mist rises up through a fissure in the ceiling.  The path\n98      exits to the south and west.\n99      You are in an alcove.  A small NW path seems to widen after a short\n99      distance.  An extremely tight tunnel leads east.  It looks like a very\n99      tight squeeze.  An eerie light can be seen at the other end.\n100     You're in a small chamber lit by an eerie green light.  An extremely\n100     narrow tunnel exits to the west.  A dark corridor leads NE.\n101     You're in the dark-room.  A corridor leading south is the only exit.\n102     You are in an arched hall.  A coral passage once continued up and east\n102     from here, but is now blocked by debris.  The air smells of sea water.\n103     You're in a large room carved out of sedimentary rock.  The floor and\n103     walls are littered with bits of shells imbedded in the stone.  A\n103     shallow passage proceeds downward, and a somewhat steeper one leads\n103     up.  A low hands and knees passage enters from the south.\n104     You are in a long sloping corridor with ragged sharp walls.\n105     You are in a cul-de-sac about eight feet across.\n106     You are in an anteroom leading to a large passage to the east.  Small\n106     passages go west and up.  The remnants of recent digging are evident.\n106     A sign in midair here says \"Cave under construction beyond this point.\n106     Proceed at own risk.  \u00ddWitt Construction Company\u00a8\"\n107     You are in a maze of twisty little passages, all different.\n108     You are at Witt's end.  Passages lead off in *all* directions.\n109     You are in a north/south canyon about 25 feet across.  The floor is\n109     covered by white mist seeping in from the north.  The walls extend\n109     upward for well over 100 feet.  Suspended from some unseen point far\n109     above you, an enormous two-sided mirror is hanging parallel to and\n109     midway between the canyon walls.  (The mirror is obviously provided\n109     for the use of the dwarves, who as you know, are extremely vain.)  a\n109     small window can be seen in either wall, some fifty feet up.\n110     You're at a low window overlooking a huge pit, which extends up out of\n110     sight.  A floor is indistinctly visible over 50 feet below.  Traces of\n110     white mist cover the floor of the pit, becoming thicker to the left.\n110     Marks in the dust around the window would seem to indicate that\n110     someone has been here recently.  Directly across the pit from you and\n110     25 feet away there is a similar window looking into a lighted room.  A\n110     shadowy figure can be seen there peering back at you.\n111     A large stalactite extends from the roof and almost reaches the floor\n111     below.  You could climb down it, and jump from it to the floor, but\n111     having done so you would be unable to reach it to climb back up.\n112     You are in a little maze of twisting passages, all different.\n113     You are at the edge of a large underground reservoir.  An opaque cloud\n113     of white mist fills the room and rises rapidly upward.  The lake is\n113     fed by a stream, which tumbles out of a hole in the wall about 10 feet\n113     overhead and splashes noisily into the water somewhere within the\n113     mist.  The only passage goes back toward the south.\n114     Dead end\n115     You are at the northeast end of an immense room, even larger than the\n115     giant room.  It appears to be a repository for the \"Adventure\"\n115     program.  Massive torches far overhead bathe the room with smoky\n115     yellow light.  Scattered about you can be seen a pile of bottles (all\n115     of them empty), a nursery of young beanstalks murmuring quietly, a bed\n115     of oysters, a bundle of black rods with rusty stars on their ends, and\n115     a collection of brass lanterns.  Off to one side a great many dwarves\n115     are sleeping on the floor, snoring loudly.  A sign nearby reads: \"Do\n115     not disturb the dwarves!\"  An immense mirror is hanging against one\n115     wall, and stretches to the other end of the room, where various other\n115     sundry objects can be glimpsed dimly in the distance.\n116     You are at the southwest end of the repository.  To one side is a pit\n116     full of fierce green snakes.  On the other side is a row of small\n116     wicker cages, each of which contains a little sulking bird.  In one\n116     corner is a bundle of black rods with rusty marks on their ends.  A\n116     large number of velvet pillows are scattered about on the floor.  A\n116     vast mirror stretches off to the northeast.  At your feet is a large\n116     steel grate, next to which is a sign which reads, \"Treasure vault.\n116     Keys in main office.\"\n117     You are on one side of a large, deep chasm.  A heavy white mist rising\n117     up from below obscures all view of the far side.  A SW path leads away\n117     from the chasm into a winding corridor.\n118     You are in a long winding corridor sloping out of sight in both\n118     directions.\n119     You are in a secret canyon which exits to the north and east.\n120     You are in a secret canyon which exits to the north and east.\n121     You are in a secret canyon which exits to the north and east.\n122     You are on the far side of the chasm.  A NE path leads away from the\n122     chasm on this side.\n123     You're in a long east/west corridor.  A faint rumbling noise can be\n123     heard in the distance.\n124     The path forks here.  The left fork leads northeast.  A dull rumbling\n124     seems to get louder in that direction.  The right fork leads southeast\n124     down a gentle slope.  The main corridor enters from the west.\n125     The walls are quite warm here.  From the north can be heard a steady\n125     roar, so loud that the entire cave seems to be trembling.  Another\n125     passage leads south, and a low crawl goes east.\n126     You are on the edge of a breath-taking view.  Far below you is an\n126     active volcano, from which great gouts of molten lava come surging\n126     out, cascading back down into the depths.  The glowing rock fills the\n126     farthest reaches of the cavern with a blood-red glare, giving every-\n126     thing an eerie, macabre appearance.  The air is filled with flickering\n126     sparks of ash and a heavy smell of brimstone.  The walls are hot to\n126     the touch, and the thundering of the volcano drowns out all other\n126     sounds.  Embedded in the jagged roof far overhead are myriad twisted\n126     formations composed of pure white alabaster, which scatter the murky\n126     light into sinister apparitions upon the walls.  To one side is a deep\n126     gorge, filled with a bizarre chaos of tortured rock which seems to\n126     have been crafted by the devil himself.  An immense river of fire\n126     crashes out from the depths of the volcano, burns its way through the\n126     gorge, and plummets into a bottomless pit far off to your left.  To\n126     the right, an immense geyser of blistering steam erupts continuously\n126     from a barren island in the center of a sulfurous lake, which bubbles\n126     ominously.  The far right wall is aflame with an incandescence of its\n126     own, which lends an additional infernal splendor to the already\n126     hellish scene.  A dark, foreboding passage exits to the south.\n127     You are in a small chamber filled with large boulders.  The walls are\n127     very warm, causing the air in the room to be almost stifling from the\n127     heat.  The only exit is a crawl heading west, through which is coming\n127     a low rumbling.\n128     You are walking along a gently sloping north/south passage lined with\n128     oddly shaped limestone formations.\n129     You are standing at the entrance to a large, barren room.  A sign\n129     posted above the entrance reads:  \"Caution!  Bear in room!\"\n130     You are inside a barren room.  The center of the room is completely\n130     empty except for some dust.  Marks in the dust lead away toward the\n130     far end of the room.  The only exit is the way you came in.\n131     You are in a maze of twisting little passages, all different.\n132     You are in a little maze of twisty passages, all different.\n133     You are in a twisting maze of little passages, all different.\n134     You are in a twisting little maze of passages, all different.\n135     You are in a twisty little maze of passages, all different.\n136     You are in a twisty maze of little passages, all different.\n137     You are in a little twisty maze of passages, all different.\n138     You are in a maze of little twisting passages, all different.\n139     You are in a maze of little twisty passages, all different.\n140     Dead end\n-1      End\n2\n1       You're at end of road again.\n2       You're at hill in road.\n3       You're inside building.\n4       You're in valley.\n5       You're in forest.\n6       You're in forest.\n7       You're at slit in streambed.\n8       You're outside grate.\n9       You're below the grate.\n10      You're in cobble crawl.\n11      You're in debris room.\n13      You're in bird chamber.\n14      You're at top of small pit.\n15      You're in hall of mists.\n17      You're on east bank of fissure.\n18      You're in nugget of gold room.\n19      You're in hall of Mt King.\n23      You're at west end of twopit room.\n24      You're in east pit.\n25      You're in west pit.\n33      You're at \"Y2\".\n35      You're at window on pit.\n36      You're in dirty passage.\n39      You're in dusty rock room.\n41      You're at west end of hall of mists.\n57      You're at brink of pit.\n60      You're at east end of long hall.\n61      You're at west end of long hall.\n64      You're at complex junction.\n66      You're in swiss cheese room.\n67      You're at east end of twopit room.\n68      You're in slab room.\n71      You're at junction of three secret canyons.\n74      You're in secret E/W canyon above tight canyon.\n88      You're in narrow corridor.\n91      You're at steep incline above large room.\n92      You're in giant room.\n95      You're in cavern with waterfall.\n96      You're in soft room.\n97      You're in oriental room.\n98      You're in misty cavern.\n99      You're in alcove.\n100     You're in plover room.\n101     You're in dark-room.\n102     You're in arched hall.\n103     You're in shell room.\n106     You're in anteroom.\n108     You're at Witt's end.\n109     You're in mirror canyon.\n110     You're at window on pit.\n111     You're at top of stalactite.\n113     You're at reservoir.\n115     You're at NE end.\n116     You're at SW end.\n117     You're on SW side of chasm.\n118     You're in sloping corridor.\n122     You're on NE side of chasm.\n123     You're in corridor.\n124     You're at fork in path.\n125     You're at junction with warm walls.\n126     You're at breath-taking view.\n127     You're in chamber of boulders.\n128     You're in limestone passage.\n129     You're in front of barren room.\n130     You're in barren room.\n-1\n3\n1       2       2       44      29\n1       3       3       12      19      43\n1       4       5       13      14      46      30\n1       5       6       45      43\n1       8       63\n2       1       2       12      7       43      45      30\n2       5       6       45      46\n3       1       3       11      32      44\n3       11      62\n3       33      65\n3       79      5       14\n4       1       4       12      45\n4       5       6       43      44      29\n4       7       5       46      30\n4       8       63\n5       4       9       43      30\n5       50005   6       7       45\n5       6       6\n5       5       44      46\n6       1       2       45\n6       4       9       43      44      30\n6       5       6       46\n7       1       12\n7       4       4       45\n7       5       6       43      44\n7       8       5       15      16      46\n7       595     60      14      30\n8       5       6       43      44      46\n8       1       12\n8       7       4       13      45\n8       303009  3       19      30\n8       593     3\n9       303008  11      29\n9       593     11\n9       10      17      18      19      44\n9       14      31\n9       11      51\n10      9       11      20      21      43\n10      11      19      22      44      51\n10      14      31\n11      303008  63\n11      9       64\n11      10      17      18      23      24      43\n11      12      25      19      29      44\n11      3       62\n11      14      31\n12      303008  63\n12      9       64\n12      11      30      43      51\n12      13      19      29      44\n12      14      31\n13      303008  63\n13      9       64\n13      11      51\n13      12      25      43\n13      14      23      31      44\n14      303008  63\n14      9       64\n14      11      51\n14      13      23      43\n14      150020  30      31      34\n14      15      30\n14      16      33      44\n15      18      36      46\n15      17      7       38      44\n15      19      10      30      45\n15      150022  29      31      34      35      23      43\n15      14      29\n15      34      55\n16      14      1\n17      15      38      43\n17      312596  39\n17      412021  7\n17      412597  41      42      44      69\n17      27      41\n18      15      38      11      45\n19      15      10      29      43\n19      311028  45      36\n19      311029  46      37\n19      311030  44      7\n19      32      45\n19      35074   49\n19      211032  49\n19      74      66\n20      0       1\n21      0       1\n22      15      1\n23      67      43      42\n23      68      44      61\n23      25      30      31\n23      648     52\n24      67      29      11\n25      23      29      11\n25      724031  56\n25      26      56\n26      88      1\n27      312596  39\n27      412021  7\n27      412597  41      42      43      69\n27      17      41\n27      40      45\n27      41      44\n28      19      38      11      46\n28      33      45      55\n28      36      30      52\n29      19      38      11      45\n30      19      38      11      43\n30      62      44      29\n31      524089  1\n31      90      1\n32      19      1\n33      3       65\n33      28      46\n33      34      43      53      54\n33      35      44\n33      159302  71\n33      100     71\n34      33      30      55\n34      15      29\n35      33      43      55\n35      20      39\n36      37      43      17\n36      28      29      52\n36      39      44\n36      65      70\n37      36      44      17\n37      38      30      31      56\n38      37      56      29      11\n38      595     60      14      30      4       5\n39      36      43      23\n39      64      30      52      58\n39      65      70\n40      41      1\n41      42      46      29      23      56\n41      27      43\n41      59      45\n41      60      44      17\n42      41      29\n42      42      45\n42      43      43\n42      45      46\n42      80      44\n43      42      44\n43      44      46\n43      45      43\n44      43      43\n44      48      30\n44      50      46\n44      82      45\n45      42      44\n45      43      45\n45      46      43\n45      47      46\n45      87      29      30\n46      45      44      11\n47      45      43      11\n48      44      29      11\n49      50      43\n49      51      44\n50      44      43\n50      49      44\n50      51      30\n50      52      46\n51      49      44\n51      50      29\n51      52      43\n51      53      46\n52      50      44\n52      51      43\n52      52      46\n52      53      29\n52      55      45\n52      86      30\n53      51      44\n53      52      45\n53      54      46\n54      53      44      11\n55      52      44\n55      55      45\n55      56      30\n55      57      43\n56      55      29      11\n57      13      30      56\n57      55      44\n57      58      46\n57      83      45\n57      84      43\n58      57      43      11\n59      27      1\n60      41      43      29      17\n60      61      44\n60      62      45      30      52\n61      60      43\n61      62      45\n61      100107  46\n62      60      44\n62      63      45\n62      30      43\n62      61      46\n63      62      46      11\n64      39      29      56      59\n64      65      44      70\n64      103     45      74\n64      106     43\n65      64      43\n65      66      44\n65      80556   46\n65      68      61\n65      80556   29\n65      50070   29\n65      39      29\n65      60556   45\n65      75072   45\n65      71      45\n65      80556   30\n65      106     30\n66      65      47\n66      67      44\n66      80556   46\n66      77      25\n66      96      43\n66      50556   50\n66      97      72\n67      66      43\n67      23      44      42\n67      24      30      31\n68      23      46\n68      69      29      56\n68      65      45\n69      68      30      61\n69      331120  46\n69      119     46\n69      109     45\n69      113     75\n70      71      45\n70      65      30      23\n70      111     46\n71      65      48\n71      70      46\n71      110     45\n72      65      70\n72      118     49\n72      73      45\n72      97      48      72\n73      72      46      17      11\n74      19      43\n74      331120  44\n74      121     44\n74      75      30\n75      76      46\n75      77      45\n76      75      45\n77      75      43\n77      78      44\n77      66      45      17\n78      77      46\n79      3       1\n80      42      45\n80      80      44\n80      80      46\n80      81      43\n81      80      44      11\n82      44      46      11\n83      57      46\n83      84      43\n83      85      44\n84      57      45\n84      83      44\n84      114     50\n85      83      43      11\n86      52      29      11\n87      45      29      30\n88      25      30      56      43\n88      20      39\n88      92      44      27\n89      25      1\n90      23      1\n91      95      45      73      23\n91      72      30      56\n92      88      46\n92      93      43\n92      94      45\n93      92      46      27      11\n94      92      46      27      23\n94      309095  45      3       73\n94      611     45\n95      94      46      11\n95      92      27\n95      91      44\n96      66      44      11\n97      66      48\n97      72      44      17\n97      98      29      45      73\n98      97      46      72\n98      99      44\n99      98      50      73\n99      301     43      23\n99      100     43\n100     301     44      23      11\n100     99      44\n100     159302  71\n100     33      71\n100     101     47      22\n101     100     46      71      11\n102     103     30      74      11\n103     102     29      38\n103     104     30\n103     114618  46\n103     115619  46\n103     64      46\n104     103     29      74\n104     105     30\n105     104     29      11\n105     103     74\n106     64      29\n106     65      44\n106     108     43\n107     131     46\n107     132     49\n107     133     47\n107     134     48\n107     135     29\n107     136     50\n107     137     43\n107     138     44\n107     139     45\n107     61      30\n108     95556   43      45      46      47      48      49      50      29\n108     95556   30\n108     106     43\n108     626     44\n109     69      46\n109     113     45      75\n110     71      44\n110     20      39\n111     70      45\n111     40050   30      39      56\n111     50053   30\n111     45      30\n112     131     49\n112     132     45\n112     133     43\n112     134     50\n112     135     48\n112     136     47\n112     137     44\n112     138     30\n112     139     29\n112     140     46\n113     109     46      11      109\n114     84      48\n115     116     49\n116     115     47\n116     593     30\n117     118     49\n117     233660  41      42      69      47\n117     332661  41\n117     303     41\n117     332021  39\n117     596     39\n118     72      30\n118     117     29\n119     69      45      11\n119     653     43      7\n120     69      45\n120     74      43\n121     74      43      11\n121     653     45      7\n122     123     47\n122     233660  41      42      69      49\n122     303     41\n122     596     39\n122     124     77\n122     126     28\n122     129     40\n123     122     44\n123     124     43      77\n123     126     28\n123     129     40\n124     123     44\n124     125     47      36\n124     128     48      37      30\n124     126     28\n124     129     40\n125     124     46      77\n125     126     45      28\n125     127     43      17\n126     125     46      23      11\n126     124     77\n126     610     30      39\n127     125     44      11      17\n127     124     77\n127     126     28\n128     124     45      29      77\n128     129     46      30      40\n128     126     28\n129     128     44      29\n129     124     77\n129     130     43      19      40      3\n129     126     28\n130     129     44      11\n130     124     77\n130     126     28\n131     107     44\n131     132     48\n131     133     50\n131     134     49\n131     135     47\n131     136     29\n131     137     30\n131     138     45\n131     139     46\n131     112     43\n132     107     50\n132     131     29\n132     133     45\n132     134     46\n132     135     44\n132     136     49\n132     137     47\n132     138     43\n132     139     30\n132     112     48\n133     107     29\n133     131     30\n133     132     44\n133     134     47\n133     135     49\n133     136     43\n133     137     45\n133     138     50\n133     139     48\n133     112     46\n134     107     47\n134     131     45\n134     132     50\n134     133     48\n134     135     43\n134     136     30\n134     137     46\n134     138     29\n134     139     44\n134     112     49\n135     107     45\n135     131     48\n135     132     30\n135     133     46\n135     134     43\n135     136     44\n135     137     49\n135     138     47\n135     139     50\n135     112     29\n136     107     43\n136     131     44\n136     132     29\n136     133     49\n136     134     30\n136     135     46\n136     137     50\n136     138     48\n136     139     47\n136     112     45\n137     107     48\n137     131     47\n137     132     46\n137     133     30\n137     134     29\n137     135     50\n137     136     45\n137     138     49\n137     139     43\n137     112     44\n138     107     30\n138     131     43\n138     132     47\n138     133     29\n138     134     44\n138     135     45\n138     136     46\n138     137     48\n138     139     49\n138     112     50\n139     107     49\n139     131     50\n139     132     43\n139     133     44\n139     134     45\n139     135     30\n139     136     48\n139     137     29\n139     138     46\n139     112     47\n140     112     45      11\n-1\n4\n2       ROAD\n2       HILL\n3       ENTER\n4       UPSTR\n5       DOWNS\n6       FORES\n7       FORWA\n7       CONTI\n7       ONWAR\n8       BACK\n8       RETUR\n8       RETRE\n9       VALLE\n10      STAIR\n11      OUT\n11      OUTSI\n11      EXIT\n11      LEAVE\n12      BUILD\n12      HOUSE\n13      GULLY\n14      STREA\n15      ROCK\n16      BED\n17      CRAWL\n18      COBBL\n19      INWAR\n19      INSID\n19      IN\n20      SURFA\n21      NULL\n21      NOWHE\n22      DARK\n23      PASSA\n23      TUNNE\n24      LOW\n25      CANYO\n26      AWKWA\n27      GIANT\n28      VIEW\n29      UPWAR\n29      UP\n29      U\n29      ABOVE\n29      ASCEN\n30      D\n30      DOWNW\n30      DOWN\n30      DESCE\n31      PIT\n32      OUTDO\n33      CRACK\n34      STEPS\n35      DOME\n36      LEFT\n37      RIGHT\n38      HALL\n39      JUMP\n40      BARRE\n41      OVER\n42      ACROS\n43      EAST\n43      E\n44      WEST\n44      W\n45      NORTH\n45      N\n46      SOUTH\n46      S\n47      NE\n48      SE\n49      SW\n50      NW\n51      DEBRI\n52      HOLE\n53      WALL\n54      BROKE\n55      Y2\n56      CLIMB\n57      LOOK\n57      EXAMI\n57      TOUCH\n57      DESCR\n58      FLOOR\n59      ROOM\n60      SLIT\n61      SLAB\n61      SLABR\n62      XYZZY\n63      DEPRE\n64      ENTRA\n65      PLUGH\n66      SECRE\n67      CAVE\n69      CROSS\n70      BEDQU\n71      PLOVE\n72      ORIEN\n73      CAVER\n74      SHELL\n75      RESER\n76      MAIN\n76      OFFIC\n77      FORK\n1001    KEYS\n1001    KEY\n1002    LAMP\n1002    HEADL\n1002    LANTE\n1003    GRATE\n1004    CAGE\n1005    ROD\n1006    ROD     (MUST BE NEXT OBJECT AFTER \"REAL\" ROD)\n1007    STEPS\n1008    BIRD\n1009    DOOR\n1010    PILLO\n1010    VELVE\n1011    SNAKE\n1012    FISSU\n1013    TABLE\n1014    CLAM\n1015    OYSTE\n1016    MAGAZ\n1016    ISSUE\n1016    SPELU\n1016    \"SPEL\n1017    DWARF\n1017    DWARV\n1018    KNIFE\n1018    KNIVE\n1019    FOOD\n1019    RATIO\n1020    BOTTL\n1020    JAR\n1021    WATER\n1021    H2O\n1022    OIL\n1023    MIRRO\n1024    PLANT\n1024    BEANS\n1025    PLANT   (MUST BE NEXT OBJECT AFTER \"REAL\" PLANT)\n1026    STALA\n1027    SHADO\n1027    FIGUR\n1028    AXE\n1029    DRAWI\n1030    PIRAT\n1031    DRAGO\n1032    CHASM\n1033    TROLL\n1034    TROLL   (MUST BE NEXT OBJECT AFTER \"REAL\" TROLL)\n1035    BEAR\n1036    MESSA\n1037    VOLCA\n1037    GEYSE   (SAME AS VOLCANO)\n1038    MACHI\n1038    VENDI\n1039    BATTE\n1040    CARPE\n1040    MOSS\n1050    GOLD\n1050    NUGGE\n1051    DIAMO\n1052    SILVE\n1052    BARS\n1053    JEWEL\n1054    COINS\n1055    CHEST\n1055    BOX\n1055    TREAS\n1056    EGGS\n1056    EGG\n1056    NEST\n1057    TRIDE\n1058    VASE\n1058    MING\n1058    SHARD\n1058    POTTE\n1059    EMERA\n1060    PLATI\n1060    PYRAM\n1061    PEARL\n1062    RUG\n1062    PERSI\n1063    SPICE\n1064    CHAIN\n2001    CARRY\n2001    TAKE\n2001    KEEP\n2001    CATCH\n2001    STEAL\n2001    CAPTU\n2001    GET\n2001    TOTE\n2002    DROP\n2002    RELEA\n2002    FREE\n2002    DISCA\n2002    DUMP\n2003    SAY\n2003    CHANT\n2003    SING\n2003    UTTER\n2003    MUMBL\n2004    UNLOC\n2004    OPEN\n2005    NOTHI\n2006    LOCK\n2006    CLOSE\n2007    LIGHT\n2007    ON\n2008    EXTIN\n2008    OFF\n2009    WAVE\n2009    SHAKE\n2009    SWING\n2010    CALM\n2010    PLACA\n2010    TAME\n2011    WALK\n2011    RUN\n2011    TRAVE\n2011    GO\n2011    PROCE\n2011    CONTI\n2011    EXPLO\n2011    GOTO\n2011    FOLLO\n2011    TURN\n2012    ATTAC\n2012    KILL\n2012    FIGHT\n2012    HIT\n2012    STRIK\n2013    POUR\n2014    EAT\n2014    DEVOU\n2015    DRINK\n2016    RUB\n2017    THROW\n2017    TOSS\n2018    QUIT\n2019    FIND\n2019    WHERE\n2020    INVEN\n2021    FEED\n2022    FILL\n2023    BLAST\n2023    DETON\n2023    IGNIT\n2023    BLOWU\n2024    SCORE\n2025    FEE\n2025    FIE\n2025    FOE\n2025    FOO\n2025    FUM\n2026    BRIEF\n2027    READ\n2027    PERUS\n2028    BREAK\n2028    SHATT\n2028    SMASH\n2029    WAKE\n2029    DISTU\n2030    SUSPE\n2030    PAUSE\n2030    SAVE\n2031    HOURS\n2032    LOG\n3001    FEE\n3002    FIE\n3003    FOE\n3004    FOO\n3005    FUM\n3050    SESAM\n3050    OPENS\n3050    ABRA\n3050    ABRAC\n3050    SHAZA\n3050    HOCUS\n3050    POCUS\n3051    HELP\n3051    ?\n3064    TREE\n3064    TREES\n3066    DIG\n3066    EXCAV\n3068    LOST\n3069    MIST\n3079    FUCK\n3139    STOP\n3142    INFO\n3142    INFOR\n3147    SWIM\n-1\n5\n1       Set of keys\n000     There are some keys on the ground here.\n2       Brass lantern\n000     There is a shiny brass lamp nearby.\n100     There is a lamp shining nearby.\n3       *grate\n000     The grate is locked.\n100     The grate is open.\n4       Wicker cage\n000     There is a small wicker cage discarded nearby.\n5       Black rod\n000     A three foot black rod with a rusty star on an end lies nearby.\n6       Black rod\n000     A three foot black rod with a rusty mark on an end lies nearby.\n7       *steps\n000     Rough stone steps lead down the pit.\n100     Rough stone steps lead up the dome.\n8       Little bird in cage\n000     A cheerful little bird is sitting here singing.\n100     There is a little bird in the cage.\n9       *rusty door\n000     The way north is barred by a massive, rusty, iron door.\n100     The way north leads through a massive, rusty, iron door.\n10      Velvet pillow\n000     A small velvet pillow lies on the floor.\n11      *snake\n000     A huge green fierce snake bars the way!\n100     >$<  (chased away)\n12      *fissure\n000     >$<\n100     A crystal bridge now spans the fissure.\n200     The crystal bridge has vanished!\n13      *stone tablet\n000     A massive stone tablet imbedded in the wall reads:\n000     \"Congratulations on bringing light into the dark-room!\"\n14      giant clam  >grunt!<\n000     There is an enormous clam here with its shell tightly closed.\n15      Giant oyster  >groan!<\n000     There is an enormous oyster here with its shell tightly closed.\n100     Interesting.  There seems to be something written on the underside of\n100     The oyster.\n16      \"Spelunker Today\"\n000     There are a few recent issues of \"Spelunker Today\" magazine here.\n19      Tasty food\n000     There is food here.\n20      Small bottle\n000     There is a bottle of water here.\n100     There is an empty bottle here.\n200     There is a bottle of oil here.\n21      Water in the bottle\n22      Oil in the bottle\n23      *mirror\n000     >$<\n24      *plant\n000     There is a tiny little plant in the pit, murmuring \"water, water, ...\"\n100     The plant spurts into furious growth for a few seconds.\n200     There is a 12-foot-tall beanstalk stretching up out of the pit,\n200     bellowing \"Water!! Water!!\"\n300     The plant grows explosively, almost filling the bottom of the pit.\n400     There is a gigantic beanstalk stretching all the way up to the hole.\n500     You've over-watered the plant!  It's shriveling up!  It's, it's...\n25      *phony plant (seen in twopit room only when tall enough)\n000     >$<\n100     The top of a 12-foot-tall beanstalk is poking out of the west pit.\n200     There is a huge beanstalk growing out of the west pit up to the hole.\n26      *stalactite\n000     >$<\n27      *shadowy figure\n000     The shadowy figure seems to be trying to attract your attention.\n28      Dwarf's axe\n000     There is a little axe here.\n100     There is a little axe lying beside the bear.\n29      *cave drawings\n000     >$<\n30      *pirate\n000     >$<\n31      *dragon\n000     A huge green fierce dragon bars the way!\n100     Congratulations!  You have just vanquished a dragon with your bare\n100     hands!  (Unbelievable, isn't it?)\n200     The body of a huge green dead dragon is lying off to one side.\n32      *chasm\n000     A rickety wooden bridge extends across the chasm, vanishing into the\n000     mist.  A sign posted on the bridge reads, \"STOP! Pay troll!\"\n100     the wreckage of a bridge (and a dead bear) can be seen at the bottom\n100     of the chasm.\n33      *troll\n000     A burly troll stands by the bridge and insists you throw him a\n000     treasure before you may cross.\n100     The troll steps out from beneath the bridge and blocks your way.\n200     >$<  (chased away)\n34      *phony troll\n000     The troll is nowhere to be seen.\n35      >$<  (bear uses rtext 141)\n000     There is a ferocious cave bear eying you from the far end of the room!\n100     There is a gentle cave bear sitting placidly in one corner.\n200     There is a contented-looking bear wandering about nearby.\n300     >$<  (dead)\n36      *message in second maze\n000     There is a message scrawled in the dust in a flowery script, reading:\n000     \"This is not the maze where the pirate leaves his treasure chest.\"\n37      *volcano and/or geyser\n000     >$<\n38      *vending machine\n000     There is a massive vending machine here.  The instructions on it read:\n000     \"Drop coins here to receive fresh batteries.\"\n39      batteries\n000     There are fresh batteries here.\n100     Some worn-out batteries have been discarded nearby.\n40      *carpet and/or moss\n000     >$<\n50      large gold nugget\n000     There is a large sparkling nugget of gold here!\n51      several diamonds\n000     There are diamonds here!\n52      bars of silver\n000     There are bars of silver here!\n53      precious jewelry\n000     There is precious jewelry here!\n54      rare coins\n000     There are many coins here!\n55      treasure chest\n000     The pirate's treasure chest is here!\n56      golden eggs\n000     There is a large nest here, full of golden eggs!\n100     The nest of golden eggs has vanished!\n200     Done!\n57      jeweled trident\n000     There is a jewel-encrusted trident here!\n58      ming vase\n000     There is a delicate, precious, ming vase here!\n100     The vase is now resting, delicately, on a velvet pillow.\n200     The floor is littered with worthless shards of pottery.\n300     The ming vase drops with a delicate crash.\n59      Egg-sized emerald\n000     There is an emerald here the size of a plover's egg!\n60      platinum pyramid\n000     There is a platinum pyramid here, 8 inches on a side!\n61      glistening pearl\n000     Off to one side lies a glistening pearl!\n62      persian rug\n000     There is a persian rug spread out on the floor!\n100     The dragon is sprawled out on a persian rug!!\n63      rare spices\n000     There are rare spices here!\n64      golden chain\n000     There is a golden chain lying in a heap on the floor!\n100     The bear is locked to the wall with a golden chain!\n200     There is a golden chain locked to the wall!\n-1\n6\n1       Somewhere nearby is colossal cave, where others have found fortunes in\n1       treasure and gold, though it is rumored that some who enter are never\n1       seen again.  Magic is said to work in the cave.  I will be your eyes\n1       and hands.  Direct me with commands of 1 or 2 words.  I should warn\n1       you that I look at only the first five letters of each word, so you'll\n1       have to enter \"northeast\" as \"ne\" to distinguish it from \"north\".\n1       (should you get stuck, type \"help\" for some general hints.  For infor-\n1       mation on how to end your adventure, etc., type \"info\".)\n1                                     - - -\n1       This program was originally developed by Willie Crowther.  Most of the\n1       features of the current program were added by Don Woods (don @ su-ai).\n1       Contact don if you have any questions, comments, etc.\n2       A little dwarf with a big knife blocks your way.\n3       A little dwarf just walked around a corner, saw you, threw a little\n3       axe at you which missed, cursed, and ran away.\n4       There is a threatening little dwarf in the room with you!\n5       one sharp nasty knife is thrown at you!\n6       None of them hit you!\n7       One of them gets you!\n8       A hollow voice says \"PLUGH\".\n9       There is no way to go that direction.\n10      I am unsure how you are facing.  Use compass points or nearby objects.\n11      I don't know in from out here.  Use compass points or name something\n11      in the general direction you want to go.\n12      I don't know how to apply that word here.\n13      I don't understand that!\n14      I'm game.  Would you care to explain how?\n15      Sorry, but I am not allowed to give more detail.  I will repeat the\n15      long description of your location.\n16      It is now pitch dark.  If you proceed you will likely fall into a pit.\n17      If you prefer, simply type w rather than west.\n18      Are you trying to catch the bird?\n19      The bird is frightened right now and you cannot catch it no matter\n19      what you try.  Perhaps you might try later.\n20      Are you trying to somehow deal with the snake?\n21      You can't kill the snake, or drive it away, or avoid it, or anything\n21      like that.  There is a way to get by, but you don't have the necessary\n21      resources right now.\n22      Do you really want to quit now?\n23      You fell into a pit and broke every bone in your body!\n24      You are already carrying it!\n25      You can't be serious!\n26      The bird was unafraid when you entered, but as you approach it becomes\n26      disturbed and you cannot catch it.\n27      You can catch the bird, but you cannot carry it.\n28      There is nothing here with a lock!\n29      You aren't carrying it!\n30      The little bird attacks the green snake, and in an astounding flurry\n30      drives the snake away.\n31      You have no keys!\n32      It has no lock.\n33      I don't know how to lock or unlock such a thing.\n34      It was already locked.\n35      The grate is now locked.\n36      The grate is now unlocked.\n37      It was already unlocked.\n38      You have no source of light.\n39      Your lamp is now on.\n40      Your lamp is now off.\n41      There is no way to get past the bear to unlock the chain, which is\n41      probably just as well.\n42      Nothing happens.\n43      Where?\n44      There is nothing here to attack.\n45      The little bird is now dead.  Its body disappears.\n46      Attacking the snake both doesn't work and is very dangerous.\n47      You killed a little dwarf.\n48      You attack a little dwarf, but he dodges out of the way.\n49      With what?  your bare hands?\n50      Good try, but that is an old worn-out magic word.\n51      I know of places, actions, and things.  Most of my vocabulary\n51      describes places and is used to move you there.  To move, try words\n51      like forest, building, downstream, enter, east, west, north, south,\n51      up, or down.  I know about a few special objects, like a black rod\n51      hidden in the cave.  These objects can be manipulated using some of\n51      the action words that I know.  Usually you will need to give both the\n51      object and action words (in either order), but sometimes I can infer\n51      the object from the verb alone.  Some objects also imply verbs; in\n51      particular, \"inventory\" implies \"take inventory\", which causes me to\n51      give you a list of what you're carrying.  The objects have side\n51      effects; for instance, the rod scares the bird.  Usually people having\n51      trouble moving just need to try a few more words.  Usually people\n51      trying unsuccessfully to manipulate an object are attempting something\n51      beyond their (or my!) capabilities and should try a completely\n51      different tack.  To speed the game you can sometimes move long\n51      distances with a single word.  For example, \"building\" usually gets\n51      you to the building from anywhere above ground except when lost in the\n51      forest.  Also, note that cave passages turn a lot, and that leaving a\n51      room to the north does not guarantee entering the next from the south.\n51      Good luck!\n52      It misses!\n53      It gets you!\n54      OK\n55      You can't unlock the keys.\n56      You have crawled around in some little holes and wound up back in the\n56      main passage.\n57      I don't know where the cave is, but hereabouts no stream can run on\n57      the surface for long.  I would try the stream.\n58      I need more detailed instructions to do that.\n59      I can only tell you what you see as you move about and manipulate\n59      things.  I cannot tell you where remote things are.\n60      I don't know that word.\n61      What?\n62      Are you trying to get into the cave?\n63      The grate is very solid and has a hardened steel lock.  You cannot\n63      enter without a key, and there are no keys nearby.  I would recommend\n63      looking elsewhere for the keys.\n64      The trees of the forest are large hardwood oak and maple, with an\n64      occasional grove of pine or spruce.  There is quite a bit of under-\n64      growth, largely birch and ash saplings plus nondescript bushes of\n64      various sorts.  This time of year visibility is quite restricted by\n64      all the leaves, but travel is quite easy if you detour around the\n64      spruce and berry bushes.\n65      Welcome to Adventure!!  Would you like instructions?\n66      Digging without a shovel is quite impractical.  Even with a shovel\n66      progress is unlikely.\n67      Blasting requires dynamite.\n68      I'm as confused as you are.\n69      Mist is a white vapor, usually water, seen from time to time in\n69      caverns.  It can be found anywhere but is frequently a sign of a deep\n69      pit leading down to water.\n70      Your feet are now wet.\n71      I think I just lost my appetite.\n72      Thank you, it was delicious!\n73      You have taken a drink from the stream.  The water tastes strongly of\n73      minerals, but is not unpleasant.  It is extremely cold.\n74      The bottle of water is now empty.\n75      Rubbing the electric lamp is not particularly rewarding.  Anyway,\n75      nothing exciting happens.\n76      Peculiar.  Nothing unexpected happens.\n77      Your bottle is empty and the ground is wet.\n78      You can't pour that.\n79      Watch it!\n80      Which way?\n81      Oh dear, you seem to have gotten yourself killed.  I might be able to\n81      help you out, but I've never really done this before.  Do you want me\n81      to try to reincarnate you?\n82      All right.  But don't blame me if something goes wr......\n82                          --- POOF!! ---\n82      You are engulfed in a cloud of orange smoke.  Coughing and gasping,\n82      you emerge from the smoke and find....\n83      You clumsy oaf, you've done it again!  I don't know how long I can\n83      keep this up.  Do you want me to try reincarnating you again?\n84      Okay, now where did I put my orange smoke?....  >POOF!<\n84      Everything disappears in a dense cloud of orange smoke.\n85      Now you've really done it!  I'm out of orange smoke!  You don't expect\n85      me to do a decent reincarnation without any orange smoke, do you?\n86      okay, if you're so smart, do it yourself!  I'm leaving!\n90      >>> messages 81 thru 90 are reserved for \"obituaries\". <<<\n91      Sorry, but I no longer seem to remember how it was you got here.\n92      You can't carry anything more.  You'll have to drop something first.\n93      You can't go through a locked steel grate!\n94      I believe what you want is right here with you.\n95      You don't fit through a two-inch slit!\n96      I respectfully suggest you go across the bridge instead of jumping.\n97      There is no way across the fissure.\n98      You're not carrying anything.\n99      You are currently holding the following:\n100     It's not hungry (it's merely pinin' for the fjords).  Besides, you\n100     have no bird seed.\n101     The snake has now devoured your bird.\n102     There's nothing here it wants to eat (except perhaps you).\n103     You fool, dwarves eat only coal!  Now you've made him *really* mad!!\n104     You have nothing in which to carry it.\n105     Your bottle is already full.\n106     There is nothing here with which to fill the bottle.\n107     Your bottle is now full of water.\n108     Your bottle is now full of oil.\n109     You can't fill that.\n110     Don't be ridiculous!\n111     The door is extremely rusty and refuses to open.\n112     The plant indignantly shakes the oil off its leaves and asks, \"Water?\"\n113     The hinges are quite thoroughly rusted now and won't budge.\n114     The oil has freed up the hinges so that the door will now move,\n114     although it requires some effort.\n115     The plant has exceptionally deep roots and cannot be pulled free.\n116     The dwarves' knives vanish as they strike the walls of the cave.\n117     Something you're carrying won't fit through the tunnel with you.\n117     You'd best take inventory and drop something.\n118     You can't fit this five-foot clam through that little passage!\n119     you can't fit this five-foot oyster through that little passage!\n120     I advise you to put down the clam before opening it.  >STRAIN!<\n121     I advise you to put down the oyster before opening it.  >WRENCH!<\n122     You don't have anything strong enough to open the clam.\n123     You don't have anything strong enough to open the oyster.\n124     A glistening pearl falls out of the clam and rolls away.  Goodness,\n124     this must really be an oyster.  (I never was very good at identifying\n124     bivalves.)  Whatever it is, it has now snapped shut again.\n125     The oyster creaks open, revealing nothing but oyster inside.  It\n125     promptly snaps shut again.\n126     You have crawled around in some little holes and found your way\n126     blocked by a recent cave-in.  You are now back in the main passage.\n127     There are faint rustling noises from the darkness behind you.\n128     Out from the shadows behind you pounces a bearded pirate!  \"Har, har,\"\n128     he chortles, \"I'll just take all this booty and hide it away with me\n128     chest deep in the maze!\"  He snatches your treasure and vanishes into\n128     the gloom.\n129     A sepulchral voice reverberating through the cave, says, \"Cave closing\n129     soon.  All adventurers exit immediately through main office.\"\n130     A mysterious recorded voice groans into life and announces:\n130        \"This exit is closed.  Please leave via main office.\"\n131     It looks as though you're dead.  Well, seeing as how it's so close to\n131     closing time anyway, I think we'll just call it a day.\n132     The sepulchral voice entones, \"The cave is now closed.\"  as the echoes\n132     fade, there is a blinding flash of light (and a small puff of orange\n132     smoke). . . .    as your eyes refocus, you look around and find...\n133     There is a loud explosion, and a twenty-foot hole appears in the far\n133     wall, burying the dwarves in the rubble.  You march through the hole\n133     and find yourself in the main office, where a cheering band of\n133     friendly elves carry the conquering adventurer off into the sunset.\n134     There is a loud explosion, and a twenty-foot hole appears in the far\n134     wall, burying the snakes in the rubble.  A river of molten lava pours\n134     in through the hole, destroying everything in its path, including you!\n135     there is a loud explosion, and you are suddenly splashed across the\n135     walls of the room.\n136     The resulting ruckus has awakened the dwarves.  There are now several\n136     threatening little dwarves in the room with you!  Most of them throw\n136     knives at you!  All of them get you!\n137     Oh, leave the poor unhappy bird alone.\n138     I daresay whatever you want is around here somewhere.\n139     I don't know the word \"stop\".  Use \"quit\" if you want to give up.\n140     You can't get there from here.\n141     You are being followed by a very large, tame bear.\n142     If you want to end your adventure early, say \"quit\".  To suspend your\n142     adventure such that you can continue later, say \"suspend\" (or \"pause\"\n142     or \"save\").  To see what hours the cave is normally open, say \"hours\".\n142     To see how well you're doing, say \"score\".  To get full credit for a\n142     treasure, you must have left it safely in the building, though you get\n142     partial credit just for locating it.  You lose points for getting\n142     killed, or for quitting, though the former costs you more.  There are\n142     also points based on how much (if any) of the cave you've managed to\n142     explore; in particular, there is a large bonus just for getting in (to\n142     distinguish the beginners from the rest of the pack), and there are\n142     other ways to determine whether you've been through some of the more\n142     harrowing sections.  If you think you've found all the treasures, just\n142     keep exploring for a while.  If nothing interesting happens, you\n142     haven't found them all yet.  If something interesting *does* happen,\n142     it means you're getting a bonus and have an opportunity to garner many\n142     more points in the master's section.  I may occasionally offer hints\n142     if you seem to be having trouble.  If I do, I'll warn you in advance\n142     how much it will affect your score to accept the hints.  Finally, to\n142     save paper, you may specify \"brief\", which tells me never to repeat\n142     the full description of a place unless you explicitly ask me to.\n143     Do you indeed wish to quit now?\n144     There is nothing here with which to fill the vase.\n145     The sudden change in temperature has delicately shattered the vase.\n146     It is beyond your power to do that.\n147     I don't know how.\n148     It is too far up for you to reach.\n149     You killed a little dwarf.  The body vanishes in a cloud of greasy\n149     black smoke.\n150     The shell is very strong and is impervious to attack.\n151     What's the matter, can't you read?  Now you'd best start over.\n152     The axe bounces harmlessly off the dragon's thick scales.\n153     The dragon looks rather nasty.  You'd best not try to get by.\n154     The little bird attacks the green dragon, and in an astounding flurry\n154     gets burnt to a cinder.  The ashes blow away.\n155     On what?\n156     Okay, from now on I'll only describe a place in full the first time\n156     you come to it.  To get the full description, say \"look\".\n157     Trolls are close relatives with the rocks and have skin as tough as\n157     that of a rhinoceros.  The troll fends off your blows effortlessly.\n158     The troll deftly catches the axe, examines it carefully, and tosses it\n158     back, declaring, \"Good workmanship, but it's not valuable enough.\"\n159     the troll catches your treasure and scurries away out of sight.\n160     The troll refuses to let you cross.\n161     There is no longer any way across the chasm.\n162     Just as you reach the other side, the bridge buckles beneath the\n162     weight of the bear, which was still following you around.  You\n162     scrabble desperately for support, but as the bridge collapses you\n162     stumble back and fall into the chasm.\n163     The bear lumbers toward the troll, who lets out a startled shriek and\n163     scurries away.  The bear soon gives up the pursuit and wanders back.\n164     The axe misses and lands near the bear where you can't get at it.\n165     With what?  your bare hands?  Against *his* bear hands??\n166     The bear is confused; he only wants to be your friend.\n167     For crying out loud, the poor thing is already dead!\n168     The bear eagerly wolfs down your food, after which he seems to calm\n168     down considerably and even becomes rather friendly.\n169     The bear is still chained to the wall.\n170     The chain is still locked.\n171     The chain is now unlocked.\n172     The chain is now locked.\n173     There is nothing here to which the chain can be locked.\n174     There is nothing here to eat.\n175     Do you want the hint?\n176     Do you need help getting out of the maze?\n177     You can make the passages look less alike by dropping things.\n178     Are you trying to explore beyond the plover room?\n179     There is a way to explore that region without having to worry about\n179     falling into a pit.  None of the objects available is immediately\n179     useful in discovering the secret.\n180     Do you need help getting out of here?\n181     Don't go west.\n182     Gluttony is not one of the troll's vices.  Avarice, however, is.\n183     Your lamp is getting dim.  You'd best start wrapping this up, unless\n183     you can find some fresh batteries.  I seem to recall there's a vending\n183     machine in the maze.  Bring some coins with you.\n184     Your lamp has run out of power.\n185     There's not much point in wandering around out here, and you can't\n185     explore the cave without a lamp.  So let's just call it a day.\n186     There are faint rustling noises from the darkness behind you.  As you\n186     turn toward them, the beam of your lamp falls across a bearded pirate.\n186     He is carrying a large chest.  \"Shiver me timbers!\" he cries, \"I've\n186     been spotted!  I'd best hie meself off to the maze to hide me chest!\"\n186     with that, he vanishes into the gloom.\n187     Your lamp is getting dim.  You'd best go back for those batteries.\n188     Your lamp is getting dim.  I'm taking the liberty of replacing the\n188     batteries.\n189     Your lamp is getting dim, and you're out of spare batteries.  You'd\n189     best start wrapping this up.\n190     I'm afraid the magazine is written in dwarvish.\n191     \"This is not the maze where the pirate leaves his treasure chest.\"\n192     Hmmm, this looks like a clue, which means it'll cost you 10 points to\n192     read it.  Should I go ahead and read it anyway?\n193     It says, \"there is something strange about this place, such that one\n193     of the words I've always known now has a new effect.\"\n194     It says the same thing it did before.\n195     I'm afraid I don't understand.\n196     \"Congratulations on bringing light into the dark-room!\"\n197     You strike the mirror a resounding blow, whereupon it shatters into a\n197     myriad tiny fragments.\n198     You have taken the vase and hurled it delicately to the ground.\n199     You prod the nearest dwarf, who wakes up grumpily, takes one look at\n199     you, curses, and grabs for his axe.\n200     Is this acceptable?\n201     There's no point in suspending a demonstration game.\n-1\n7\n1       3\n2       3\n3       8       9\n4       10\n5       11\n6       0\n7       14      15\n8       13\n9       94      -1\n10      96\n11      19      -1\n12      17      27\n13      101     -1\n14      103\n15      0\n16      106\n17      0       -1\n18      0\n19      3\n20      3\n21      0\n22      0\n23      109     -1\n24      25      -1\n25      23      67\n26      111     -1\n27      35      110\n28      0\n29      97      -1\n30      0       -1\n31      119     121\n32      117     122\n33      117     122\n34      0       0\n35      130     -1\n36      0       -1\n37      126     -1\n38      140     -1\n39      0\n40      96      -1\n50      18\n51      27\n52      28\n53      29\n54      30\n55      0\n56      92\n57      95\n58      97\n59      100\n60      101\n61      0\n62      119     121\n63      127\n64      130     -1\n-1\n8\n1       24\n2       29\n3       0\n4       33\n5       0\n6       33\n7       38\n8       38\n9       42\n10      14\n11      43\n12      110\n13      29\n14      110\n15      73\n16      75\n17      29\n18      13\n19      59\n20      59\n21      174\n22      109\n23      67\n24      13\n25      147\n26      155\n27      195\n28      146\n29      110\n30      13\n31      13\n-1\n9\n0       1       2       3       4       5       6       7       8       9\n0       10      100     115     116     126\n2       1       3       4       7       38      95      113     24\n1       24\n3       46      47      48      54      56      58      82      85      86\n3       122     123     124     125     126     127     128     129     130\n4       8\n5       13\n6       19\n7       42      43      44      45      46      47      48      49      50\n7       51      52      53      54      55      56      80      81      82\n7       86      87\n8       99      100     101\n9       108\n-1\n10\n35      You are obviously a rank amateur.  Better luck next time.\n100     Your score qualifies you as a novice class adventurer.\n130     You have achieved the rating: \"Experienced adventurer\".\n200     You may now consider yourself a \"Seasoned adventurer\".\n250     You have reached \"Junior master\" status.\n300     Your score puts you in Master adventurer class C.\n330     Your score puts you in Master adventurer class B.\n349     Your score puts you in Master adventurer class A.\n9999    All of adventuredom gives tribute to you, adventurer grandmaster!\n-1\n11\n2       9999    10      0       0\n3       9999    5       0       0\n4       4       2       62      63\n5       5       2       18      19\n6       8       2       20      21\n7       75      4       176     177\n8       25      5       178     179\n9       20      3       180     181\n-1\n0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADVNTJCL": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19\\x04\\x00\\x12\\x00\\x12\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:04:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "CBT249"}, "text": "---\n--- LINK\n---\n\n    INCLUDE OBJ(ADVENT)     PL1-OPT\n    INCLUDE OBJ(ADVNTTIM)   ASM\n    INCLUDE OBJ(ADVNTRDU)   FORT\n    INCLUDE OBJ(ADVNTWYL)   ASM (WYLBUR I/O INTERFACE)\n    NAME  ADVENT(R)\n\n---\n--- RUN\n---\nFREE  FI(CAVES)\nALLOC FI(CAVES) DA(-----(ADVNTCAV))\nCALL  '-----(ADVENT)'\nFREE  FI(CAVES)\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADVNTOPT": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19\\x04\\x0cw\\x0cw\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:04:00", "lines": 3191, "newlines": 3191, "modlines": 0, "user": "CBT249"}, "text": "  /* ADVENTURES\n\n    CURRENT LIMITS:\n        9650 WORDS OF MESSAGE TEXT (LINES, LINSIZ).\n         750 TRAVEL OPTIONS (TRAVEL, TRVSIZ).\n         300 VOCABULARY WORDS (KTAB, ATAB, TABSIZ).\n         150 LOCATIONS (LTEXT, STEXT, KEY, COND, ABB, ATLOC, LOCSIZ).\n         100 OBJECTS (PLAC, PLACE, FIXD, FIXED, LINK (TWICE), PTEXT,\n                     PROP).\n          35 \"ACTION\" VERBS (ACTSPK, VRBSIZ).\n         205 RANDOM MESSAGES (RTEXT, RTXSIZ).\n          12 DIFFERENT PLAYER CLASSIFICATIONS (CTEXT, CVAL, CLSMAX).\n          20 HINTS, LESS 3 (HINTLC, HINTED, HINTS, HNTSIZ).\n          35 MAGIC MESSAGES (MTEXT, MAGSIZ).\n\n    THERE ARE ALSO LIMITS WHICH CANNOT BE EXCEEDED DUE TO THE\n    STRUCTURE OF THE DATABASE.  (E.G., THE VOCABULARY USES\n    N/1000 TO DETERMINE WORD TYPE, SO THERE CAN'T BE MORE\n    THAN 1000 WORDS.) THESE UPPER LIMITS ARE:\n\n         1000 NON-SYNONYMOUS VOCABULARY WORDS\n         300 LOCATIONS\n         100 OBJECTS\n  */\n\n1\n /* (SUBSCRIPTRANGE,STRINGRANGE):  */\n ADVENT: PROC OPTIONS (MAIN);\n\n       DCL  CAVES        FILE INPUT;\n\n       DCL TREAD ENTRY (CHAR(133),FIXED BIN(31),CHAR(133),\n               FIXED BIN(31),FIXED BIN(31)) OPTIONS (ASM INTER);\n\n       DCL TWRITE ENTRY (CHAR(133),FIXED BIN(31),FIXED BIN(31))\n               OPTIONS (ASM INTER);\n\n       DCL RANDU ENTRY (FIXED BIN(31),FIXED BIN(31),FLOAT BIN(31))\n               OPTIONS (ASM INTER);\n\n       DCL ITIME ENTRY (FIXED BIN(31)) OPTIONS (ASM INTER);\n\n         DCL 1 TXTCOM STATIC,\n               2 RTEXT(205) FIXED BIN(31),\n               2 LINES(9650) CHAR(5);\n\n         DCL 1 BLKCOM STATIC,\n               2 BLKLIN BIT(1) INIT ('1'B);\n\n         DCL 1 PTXCOM STATIC,\n               2 PTEXT(100) FIXED BIN(31);\n\n         DCL 1 VOCCOM STATIC,\n               2 KTAB(300) FIXED BIN(31),\n               2 ATAB(300) CHAR(5),\n               2 TABSIZ FIXED BIN(31) INIT(300);\n\n         DCL 1 PLACOM STATIC,\n               2 ATLOC(150) FIXED BIN(31),\n               2 LINK(200) FIXED BIN(31),\n               2 PLACE(100) FIXED BIN(31),\n               2 FIXED(100) FIXED BIN(31),\n               2 HOLDNG FIXED BIN(31);\n\n         DCL 1 ABBCOM STATIC,\n               2 ABB(150) FIXED BIN(31);\n\n\n          DCL PICWORD PICTURE 'S9999' STATIC;\n\n1  DCL 1  ADVARS STATIC,\n       2  ABBNUM       FIXED BIN(31)  INIT(0),\n       2  IX           FIXED BIN(31)  INIT (65549),\n       2  IY           FIXED BIN(31)  INIT(0),\n       2  Y            FLOAT BIN(31) ,\n       2  AXE          FIXED BIN(31)  INIT(0),\n       2  BACK         FIXED BIN(31)  INIT(0),\n       2  BATTER       FIXED BIN(31)  INIT(0),\n       2  BEAR         FIXED BIN(31)  INIT(0),\n       2  BIRD         FIXED BIN(31)  INIT(0),\n       2  BONUS        FIXED BIN(31)  INIT(0),\n       2  BOTTLE       FIXED BIN(31)  INIT(0),\n       2  CAGE         FIXED BIN(31)  INIT(0),\n       2  CAVE         FIXED BIN(31)  INIT(0),\n       2  CCODE        FIXED BIN(31)  INIT(0),\n       2  CH           FIXED BIN(31)  INIT(0),\n       2  CHAIN        FIXED BIN(31)  INIT(0),\n       2  CHASM        FIXED BIN(31)  INIT(0),\n       2  CHEST        FIXED BIN(31)  INIT(0),\n       2  CHLOC        FIXED BIN(31)  INIT(0),\n       2  CHLOC2       FIXED BIN(31)  INIT(0),\n       2  CLAM         FIXED BIN(31)  INIT(0),\n       2  CLOCK1       FIXED BIN(31)  INIT(0),\n       2  CLOCK2       FIXED BIN(31)  INIT(0),\n       2  CLSSES       FIXED BIN(31)  INIT(0),\n       2  CLSSIZ       FIXED BIN(31)  INIT(12),\n       2  COINS        FIXED BIN(31)  INIT(0),\n       2  DALTLC       FIXED BIN(31)  INIT(0),\n       2  DETAIL       FIXED BIN(31)  INIT(0),\n       2  DFLAG        FIXED BIN(31)  INIT(0),\n       2  DKILL        FIXED BIN(31)  INIT(0),\n       2  DOOR         FIXED BIN(31)  INIT(0),\n       2  DPRSSN       FIXED BIN(31)  INIT(0),\n       2  DRAGON       FIXED BIN(31)  INIT(0),\n       2  DTOTAL       FIXED BIN(31)  INIT(0),\n       2  DWARF        FIXED BIN(31)  INIT(0),\n       2  EGGS         FIXED BIN(31)  INIT(0),\n       2  EMRALD       FIXED BIN(31)  INIT(0),\n       2  ENTRNC       FIXED BIN(31)  INIT(0),\n       2  FIND         FIXED BIN(31)  INIT(0),\n       2  FISSUR       FIXED BIN(31)  INIT(0),\n       2  FOO          FIXED BIN(31)  INIT(0),\n       2  FOOBAR       FIXED BIN(31)  INIT(0),\n       2  FOOD         FIXED BIN(31)  INIT(0),\n       2  FROM         FIXED BIN(31)  INIT(0),\n       2  GRATE        FIXED BIN(31)  INIT(0),\n       2  HINT         FIXED BIN(31)  INIT(0),\n       2  HINTLC(20)   FIXED BIN(31)  INIT((20)0),\n       2  HNTMAX       FIXED BIN(31)  INIT(0),\n       2  I            FIXED BIN(31)  INIT(0),\n       2  INLEN        FIXED BIN(31)  INIT(0),\n       2  INSTR        CHAR(133) ,\n       2  INVENT       FIXED BIN(31)  INIT(0),\n       2  IWEST        FIXED BIN(31)  INIT(0),\n       2  J            FIXED BIN(31)  INIT(0),\n       2  JUNK1        CHAR(5) ,\n       2  JUNK2        CHAR(5) ,\n       2  JUNK3        CHAR(5) ,\n       2  K            FIXED BIN(31)  INIT(0),\n       2  KEYS         FIXED BIN(31)  INIT(0),\n       2  KK           FIXED BIN(31)  INIT(0),\n       2  KKWORD       CHAR(2) ,\n       2  KNFLOC       FIXED BIN(31)  INIT(0),\n       2  KNIFE        FIXED BIN(31)  INIT(0),\n       2  KQ           FIXED BIN(31)  INIT(0),\n       2  K2           FIXED BIN(31)  INIT(0),\n       2  L            FIXED BIN(31)  INIT(0),\n       2  LAMP         FIXED BIN(31)  INIT(0),\n       2  LIMIT        FIXED BIN(31)  INIT(0),\n       2  LINUSE       FIXED BIN(31)  INIT(0),\n       2  LL           FIXED BIN(31)  INIT(0),\n       2  LOC          FIXED BIN(31)  INIT(0),\n       2  LOCK         FIXED BIN(31)  INIT(0),\n       2  LOOK         FIXED BIN(31)  INIT(0),\n       2  M            FIXED BIN(31)  INIT(0),\n       2  MAGZIN       FIXED BIN(31)  INIT(0),\n       2  MAXDIE       FIXED BIN(31)  INIT(0),\n       2  MAXTRS       FIXED BIN(31)  INIT(0),\n       2  MESSAG       FIXED BIN(31)  INIT(0),\n       2  MIRROR       FIXED BIN(31)  INIT(0),\n       2  MXSCOR       FIXED BIN(31)  INIT(0),\n       2  NEWLOC       FIXED BIN(31)  INIT(0),\n       2  NUGGET       FIXED BIN(31)  INIT(0),\n       2  NULLX        FIXED BIN(31)  INIT(0),\n       2  NUMDIE       FIXED BIN(31)  INIT(0),\n       2  OBJ          FIXED BIN(31)  INIT(0),\n       2  OIL          FIXED BIN(31)  INIT(0),\n       2  OLDLC2       FIXED BIN(31)  INIT(0),\n       2  OLDLOC       FIXED BIN(31)  INIT(0),\n       2  OUTSTR       CHAR(133) VAR ,\n       2  OYSTER       FIXED BIN(31)  INIT(0),\n       2  PEARL        FIXED BIN(31)  INIT(0),\n       2  PILLOW       FIXED BIN(31)  INIT(0),\n       2  PLANT        FIXED BIN(31)  INIT(0),\n       2  PLANT2       FIXED BIN(31)  INIT(0),\n       2  POSN         FIXED BIN(31)  INIT(0),\n       2  PYRAM        FIXED BIN(31)  INIT(0),\n       2  REPLY        CHAR(5) ,\n       2  ROD          FIXED BIN(31)  INIT(0),\n       2  ROD2         FIXED BIN(31)  INIT(0),\n       2  RUG          FIXED BIN(31)  INIT(0),\n       2  SAY          FIXED BIN(31)  INIT(0),\n       2  SCORE        FIXED BIN(31)  INIT(0),\n       2  SECT         FIXED BIN(31)  INIT(0),\n       2  SNAKE        FIXED BIN(31)  INIT(0),\n       2  SPICES       FIXED BIN(31)  INIT(0),\n       2  SPK          FIXED BIN(31)  INIT(0),\n       2  STEPS        FIXED BIN(31)  INIT(0),\n       2  STICK        FIXED BIN(31)  INIT(0),\n       2  TABLET       FIXED BIN(31)  INIT(0),\n       2  TABNDX       FIXED BIN(31)  INIT(0),\n       2  TALLY        FIXED BIN(31)  INIT(0),\n       2  TALLY2       FIXED BIN(31)  INIT(0),\n       2  TEMP         FIXED BIN(31)  INIT(0),\n       2  THROW        FIXED BIN(31)  INIT(0),\n       2  TRAVEL(750)  FIXED BIN(31)  INIT((750)0),\n       2  ATTACK       FIXED BIN(31)  INIT(0),\n       2  TRIDNT       FIXED BIN(31)  INIT(0),\n       2  TROLL        FIXED BIN(31)  INIT(0),\n       2  TROLL2       FIXED BIN(31)  INIT(0),\n       2  TRVS         FIXED BIN(31)  INIT(0),\n       2  TURNS        FIXED BIN(31)  INIT(0),\n       2  VASE         FIXED BIN(31)  INIT(0),\n       2  VEND         FIXED BIN(31)  INIT(0),\n       2  VERB         FIXED BIN(31)  INIT(0),\n       2  WATER        FIXED BIN(31)  INIT(0),\n       2  WD1          CHAR(5) ,\n       2  WD1X         CHAR(5) ,\n       2  WD2          CHAR(5) ,\n       2  WD2X         CHAR(5) ,\n       2  WORD         FIXED BIN(31)  INIT(0),\n       2  WORDEND      FIXED BIN(31)  INIT(0),\n       2  WORDSIZE     FIXED BIN(31)  INIT(0),\n       2  WORDSTRT     FIXED BIN(31)  INIT(0),\n       2  LTEXT(150)   FIXED BIN(31)  INIT((150)0),\n       2  STEXT(150)   FIXED BIN(31)  INIT((150)0),\n       2  KEY(150)     FIXED BIN(31)  INIT((150)0),\n       2  COND(150)    FIXED BIN(31)  INIT((150)0),\n       2  PLAC(100)    FIXED BIN(31)  INIT((100)0),\n       2  FIXD(100)    FIXED BIN(31)  INIT((100)0),\n       2  PROP(100)    FIXED BIN(31)  INIT((100)0),\n       2  ACTSPK(35)   FIXED BIN(31)  INIT((35)0),\n       2  CTEXT(12)    FIXED BIN(31)  INIT((12)0),\n       2  CVAL(12)     FIXED BIN(31)  INIT((12)0),\n       2  HINTS(20,4)  FIXED BIN(31)  INIT((80)0),\n       2  HINTED(20)   BIT(1) ,\n       2  TK(20)       FIXED BIN(31) ,\n       2  TKWORD(10)   CHAR(1) ,\n       2  DLOC(6)      FIXED BIN(31) ,\n       2  ODLOC(6)     FIXED BIN(31) ,\n       2  DSEEN(6)     BIT(1) ,\n       2  LINSIZ       FIXED BIN(31) INIT (9650) ,\n       2  TRVSIZ       FIXED BIN(31) INIT (750) ,\n       2  LOCSIZ       FIXED BIN(31) INIT (150) ,\n       2  VRBSIZ       FIXED BIN(31) INIT (35) ,\n       2  RTXSIZ       FIXED BIN(31) INIT (205) ,\n       2  CLSMAX       FIXED BIN(31) INIT (12) ,\n       2  HNTSIZ       FIXED BIN(31) INIT (20) ,\n       2  WZDARK       BIT(1) ,\n       2  LMWARN       BIT(1) ,\n       2  CLOSNG       BIT(1) ,\n       2  PANIC        BIT(1) ,\n       2  CLOSED       BIT(1) ,\n       2  GAVEUP       BIT(1) ,\n       2  SCORNG       BIT(1) ,\n       2  LOGON        BIT(1) INIT ('0'B),\n       2  YEA          BIT(1) ;\n\n1/*\n\n    WZDARK SAYS WHETHER THE LOC HE'S LEAVING WAS DARK\n    LMWARN SAYS WHETHER HE'S BEEN WARNED ABOUT LAMP GOING DIM\n    CLOSNG SAYS WHETHER ITS CLOSING TIME YET\n    PANIC SAYS WHETHER HE'S FOUND OUT HE'S TRAPPED IN THE\n    CAVE\n    CLOSED SAYS WHETHER WE'RE ALL THE WAY CLOSED\n    GAVEUP SAYS WHETHER HE EXITED VIA \"QUIT\"\n    SCORNG INDICATES TO THE SCORE ROUTINE WHETHER WE'RE DOING\n    A \"SCORE\" COMMAND\n    YEA IS RANDOM YES/NO REPLY\n\n  */\n\n1/*  DESCRIPTION OF THE DATABASE FORMAT\n\n\n    THE DATA FILE CONTAINS SEVERAL SECTIONS.  EACH BEGINS\n    WITH A LINE CONTAINING A NUMBER IDENTIFYING THE SECTION,\n    AND ENDS WITH A LINE CONTAINING \"-1\".\n\n    SECTION 1:  LONG FORM DESCRIPTIONS.  EACH LINE CONTAINS A\n        LOCATION NUMBER, A TAB, AND A LINE OF TEXT.  THE SET\n        OF (NECESSARILY ADJACENT) LINES WHOSE NUMBERS ARE X\n        FORM THE LONG DESCRIPTION OF LOCATION X.\n    SECTION 2:  SHORT FORM DESCRIPTIONS.  SAME FORMAT AS LONG\n        FORM.  NOT ALL PLACES HAVE SHORT DESCRIPTIONS.\n    SECTION 3:  TRAVEL TABLE.  EACH LINE CONTAINS A LOCATION\n        NUMBER (X), A SECOND LOCATION NUMBER (Y), AND A LIST\n        OF MOTION NUMBERS (SEE SECTION 4).  EACH MOTION\n        REPRESENTS A VERB WHICH WILL GO TO Y IF CURRENTLY AT\n        X.  Y, IN TURN, IS INTERPRETED AS FOLLOWS.  LET\n        M=Y/1000, N=Y MOD 1000.\n                IF N<=300       IT IS THE LOCATION TO GO TO.\n                IF 300<N<=500   N-300 IS USED IN A COMPUTED\n                                GOTO TO A SECTION OF SPECIAL\n                                CODE.\n                IF N>500        MESSAGE N-500 FROM SECTION 6\n                                IS PRINTED, AND HE STAYS\n                                WHEREVER HE IS.\n        MEANWHILE, M SPECIFIES THE CONDITIONS ON THE MOTION.\n                IF M=0          IT'S UNCONDITIONAL.\n                IF 0<M<100      IT IS DONE WITH M%\n                                PROBABILITY.\n                IF M=100        UNCONDITIONAL, BUT FORBIDDEN\n                                TO DWARVES.\n                IF 100<M<=200   HE MUST BE CARRYING OBJECT\n                                M-100.\n                IF 200<M<=300   MUST BE CARRYING OR IN SAME\n                                ROOM\n                                        AS M-200.\n                IF 300<M<=400   PROP(M MOD 100) MUST *NOT* BE\n                                0.\n                IF 400<M<=500   PROP(M MOD 100) MUST *NOT* BE\n                                1.\n                IF 500<M<=600   PROP(M MOD 100) MUST *NOT* BE\n                                2, ETC.\n        IF THE CONDITION (IF ANY) IS NOT MET, THEN THE NEXT\n        *DIFFERENT* \"DESTINATION\" VALUE IS USED (UNLESS IT\n        FAILS TO MEET *ITS* CONDITIONS, IN WHICH CASE THE\n        NEXT IS FOUND, ETC.).  TYPICALLY, THE NEXT DEST WILL\n        BE FOR ONE OF THE SAME VERBS, SO THAT ITS ONLY USE IS\n        AS THE ALTERNATE DESTINATION FOR THOSE VERBS.  FOR\n        INSTANCE:\n            15      110022  29      31      34      35      23      43\n            15      14      29\n        THIS SAYS THAT, FROM LOC 15, ANY OF THE VERBS 29, 31,\n        ETC., WILL TAKE HIM TO 22 IF HE'S CARRYING OBJECT 10,\n        AND OTHERWISE WILL GO TO 14.\n                11      303008  49\n                11      9       50\n        THIS SAYS THAT, FROM 11, 49 TAKES HIM TO 8 UNLESS\n        PROP(3)=0, IN WHICH CASE HE GOES TO 9.  VERB 50 TAKES\n        HIM TO 9 REGARDLESS OF PROP(3).\n    SECTION 4:  VOCABULARY.  EACH LINE CONTAINS A NUMBER (N),\n        A TAB, AND A FIVE-LETTER WORD.  CALL M=N/1000.  IF\n        M=0, THEN THE WORD IS A MOTION VERB FOR USE IN\n        TRAVELLING (SEE SECTION 3).  ELSE, IF M=1, THE WORD\n        IS AN OBJECT.  ELSE, IF M=2, THE WORD IS AN ACTION\n        VERB (SUCH AS \"CARRY\" OR \"ATTACK\").  ELSE, IF M=3,\n        THE WORD IS A SPECIAL CASE VERB (SUCH AS \"DIG\") AND N\n        MOD 1000 IS AN INDEX INTO SECTION 6.  OBJECTS FROM 50\n        TO (CURRENTLY, ANYWAY) 79 ARE CONSIDERED TREASURES\n        (FOR PIRATE, CLOSEOUT).\n    SECTION 5:  OBJECT DESCRIPTIONS.  EACH LINE CONTAINS A\n        NUMBER (N), A TAB, AND A MESSAGE.  IF N IS FROM 1 TO\n        100, THE MESSAGE IS THE \"INVENTORY\" MESSAGE FOR\n        OBJECT N.  OTHERWISE, N SHOULD BE 000, 100, 200,\n        ETC., AND THE MESSAGE SHOULD BE THE DESCRIPTION OF\n        THE PRECEDING OBJECT WHEN ITS PROP VALUE IS N/100.\n        THE N/100 IS USED ONLY TO DISTINGUISH MULTIPLE\n        MESSAGES FROM MULTI-LINE MESSAGES; THE PROP INFO\n        ACTUALLY REQUIRES ALL MESSAGES FOR AN OBJECT TO BE\n        PRESENT AND CONSECUTIVE.  PROPERTIES WHICH PRODUCE NO\n        MESSAGE SHOULD BE GIVEN THE MESSAGE \">$<\".\n    SECTION 6:  ARBITRARY MESSAGES.  SAME FORMAT AS SECTIONS\n        1, 2, AND 5, EXCEPT THE NUMBERS BEAR NO RELATION TO\n        ANYTHING (EXCEPT FOR SPECIAL VERBS IN SECTION 4).\n    SECTION 7:  OBJECT LOCATIONS.  EACH LINE CONTAINS AN\n        OBJECT NUMBER AND ITS INITIAL LOCATION (ZERO (OR\n        OMITTED) IF NONE).  IF THE OBJECT IS IMMOVABLE, THE\n        LOCATION IS FOLLOWED BY A \"-1\".  IF IT HAS TWO\n        LOCATIONS (E.G.  THE GRATE) THE FIRST LOCATION IS\n        FOLLOWED WITH THE SECOND, AND THE OBJECT IS ASSUMED\n        TO BE IMMOVABLE.\n    SECTION 8:  ACTION DEFAULTS.  EACH LINE CONTAINS AN\n        \"ACTION-VERB\" NUMBER AND THE INDEX (IN SECTION 6) OF\n        THE DEFAULT MESSAGE FOR THE VERB.\n    SECTION 9:  LIQUID ASSETS, ETC.  EACH LINE CONTAINS A\n        NUMBER (N) AND UP TO 20 LOCATION NUMBERS.  BIT N\n        (WHERE 0 IS THE UNITS BIT) IS SET IN COND(LOC) FOR\n        EACH LOC GIVEN.  THE COND BITS CURRENTLY ASSIGNED\n        ARE:\n                0       LIGHT\n                1       IF BIT 2 IS ON:  ON FOR OIL, OFF FOR\n                        WATER\n                2       LIQUID ASSET, SEE BIT 1\n                3       PIRATE DOESN'T GO HERE UNLESS\n                        FOLLOWING PLAYER\n        OTHER BITS ARE USED TO INDICATE AREAS OF INTEREST TO\n        \"HINT\" ROUTINES:\n                4       TRYING TO GET INTO CAVE\n                5       TRYING TO CATCH BIRD\n                6       TRYING TO DEAL WITH SNAKE\n                7       LOST IN MAZE\n                8       PONDERING DARK ROOM\n                9       AT WITT'S END\n        COND(LOC) IS SET TO 2, OVERRIDING ALL OTHER BITS, IF\n        LOC HAS FORCED MOTION.\n    SECTION 10:  CLASS MESSAGES.  EACH LINE CONTAINS A NUMBER\n        (N), A TAB, AND A MESSAGE DESCRIBING A CLASSIFICATION\n        OF PLAYER.  THE SCORING SECTION SELECTS THE\n        APPROPRIATE MESSAGE, WHERE EACH MESSAGE IS CONSIDERED\n        TO APPLY TO PLAYERS WHOSE SCORES ARE HIGHER THAN THE\n        PREVIOUS N BUT NOT HIGHER THAN THIS N.  NOTE THAT\n        THESE SCORES PROBABLY CHANGE WITH EVERY MODIFICATION\n        (AND PARTICULARLY EXPANSION) OF THE PROGRAM.\n    SECTION 11:  HINTS.  EACH LINE CONTAINS A HINT NUMBER\n        (CORRESPONDING TO A COND BIT, SEE SECTION 9), THE\n        NUMBER OF TURNS HE MUST BE AT THE RIGHT LOC(S) BEFORE\n        TRIGGERING THE HINT, THE POINTS DEDUCTED FOR TAKING\n        THE HINT, THE MESSAGE NUMBER (SECTION 6) OF THE\n        QUESTION, AND THE MESSAGE NUMBER OF THE HINT.  THESE\n        VALUES ARE STASHED IN THE \"HINTS\" ARRAY.  HNTMAX IS\n        SET TO THE MAX HINT NUMBER (<= HNTSIZ).  NUMBERS 1-3\n        ARE UNUSABLE SINCE COND BITS ARE OTHERWISE ASSIGNED,\n        SO 2 IS USED TO REMEMBER IF HE'S READ THE CLUE IN THE\n        REPOSITORY, AND 3 IS USED TO REMEMBER WHETHER HE\n        ASKED FOR INSTRUCTIONS (GETS MORE TURNS, BUT LOSES\n        POINTS).\n    SECTION 12:  MAGIC MESSAGES.  IDENTICAL TO SECTION 6\n        EXCEPT PUT IN A SEPARATE SECTION FOR EASIER\n        REFERENCE.  MAGIC MESSAGES ARE USED BY THE STARTUP,\n        MAINTENANCE MODE, AND RELATED ROUTINES.\n    SECTION 0:  END OF DATABASE.\n\n  */\n\n ON ERROR BEGIN;\n    PUT SKIP DATA (ADVARS);\n    END;\n\n\n1/*  READ THE DATABASE IF WE HAVE NOT YET DONE SO       */\n\n         PUT STRING (OUTSTR) EDIT ('Initializing...') (A);\n         CALL LINEOUT;\n\n /*\n    CLEAR OUT THE VARIOUS TEXT-POINTER ARRAYS.  ALL TEXT IS\n    STORED IN ARRAY LINES; EACH LINE IS PRECEDED BY A WORD\n    POINTING TO THE NEXT POINTER (I.E.  THE WORD FOLLOWING\n    THE END OF THE LINE).  THE POINTER IS NEGATIVE IF THIS IS\n    FIRST LINE OF A MESSAGE.  THE TEXT-POINTER ARRAYS CONTAIN\n    INDICES OF POINTER-WORDS IN LINES.  STEXT(N) IS SHORT\n    DESCRIPTION OF LOCATION N.  LTEXT(N) IS LONG DESCRIPTION.\n    PTEXT(N) POINTS TO MESSAGE FOR PROP(N)=0.  SUCCESSIVE\n    PROP MESSAGES ARE FOUND BY CHASING POINTERS.  RTEXT\n    CONTAINS SECTION 6'S STUFF.  CTEXT(N) POINTS TO A\n    PLAYER-CLASS MESSAGE.  MTEXT IS FOR SECTION 12.  WE ALSO\n    CLEAR COND.  SEE DESCRIPTION OF SECTION 9 FOR DETAILS.\n  */\n\n         DO I=1 TO 300;\n             IF I <= 100 THEN PTEXT(I)=0;\n             IF I <= RTXSIZ THEN RTEXT(I)=0;\n             IF I <= CLSMAX THEN CTEXT(I)=0;\n             IF I <= LOCSIZ THEN DO;\n                 STEXT(I)=0;\n                 LTEXT(I)=0;\n                 COND(I)=0;\n                 END;\n             END;\n\n         KEY=0;\n         LINUSE=1;\n         TRVS=1;\n         CLSSES=1;\n\n /* START NEW DATA SECTION.  SECT IS THE SECTION NUMBER. */\n\n L1002:  GET FILE (CAVES) EDIT (SECT) (COL(1),F(8));\n         OLDLOC=-1;\n         PUT STRING (OUTSTR) EDIT ('Reading section #',SECT)\n               (A,F(2));\n         CALL LINEOUT;\n         SELECT (SECT);\n            WHEN (00)  GO TO L1100;        /* (0) */\n            WHEN (01)  GO TO L1004;        /* (1) */\n            WHEN (02)  GO TO L1004;        /* (2) */\n            WHEN (03)  GO TO L1030;        /* (3) */\n            WHEN (04)  GO TO L1040;        /* (4) */\n            WHEN (05)  GO TO L1004;        /* (5) */\n            WHEN (06)  GO TO L1004;        /* (6) */\n            WHEN (07)  GO TO L1050;        /* (7) */\n            WHEN (08)  GO TO L1060;        /* (8) */\n            WHEN (09)  GO TO L1070;        /* (9) */\n            WHEN (10)  GO TO L1004;       /* (10) */\n            WHEN (11)  GO TO L1080;       /* (11) */\n            END;\n         CALL BUG(9);\n\n /* SECTIONS 1, 2, 5, 6, 10.  READ MESSAGES AND SET UP POINTERS. */\n\n L1004:  GET FILE (CAVES) EDIT\n             (LOC,(LINES(J) DO J=LINUSE+1 TO LINUSE+14),KKWORD)\n             (COL(1),F(8),14 A(5),A(2));\n         IF KKWORD \u00ac= ' ' THEN CALL BUG(0);\n         IF LOC = -1 THEN GOTO L1002;\n         DO K=1 TO 14;\n             KK=LINUSE+15-K;\n             IF LINES(KK) \u00ac= ' ' THEN GOTO L1007;\n             END;\n         CALL BUG(1);\n L1007:  PICWORD=KK+1;\n         LINES(LINUSE)=PICWORD;\n         IF LOC = OLDLOC THEN GOTO L1020;\n         PICWORD=-LINES(LINUSE);\n         LINES(LINUSE)=PICWORD;\n         IF SECT = 10 THEN GOTO L1012;\n         IF SECT = 6 THEN GOTO L1011;\n         IF SECT = 5 THEN GOTO L1010;\n         IF SECT = 1 THEN GOTO L1008;\n\n         STEXT(LOC)=LINUSE;\n         GOTO L1020;\n\n L1008:  LTEXT(LOC)=LINUSE;\n         GOTO L1020;\n\n L1010:  IF LOC > 0 & LOC <= 100 THEN PTEXT(LOC)=LINUSE;\n         GOTO L1020;\n\n L1011:  IF LOC > RTXSIZ THEN CALL BUG(6);\n         RTEXT(LOC)=LINUSE;\n         GOTO L1020;\n\n L1012:  CTEXT(CLSSES)=LINUSE;\n         CVAL(CLSSES)=LOC;\n         CLSSES=CLSSES+1;\n\n L1020:  LINUSE=KK+1;\n         LINES(LINUSE)='-1   ';\n         OLDLOC=LOC;\n         IF LINUSE+14 > LINSIZ THEN CALL BUG(2);\n         GOTO L1004;\n\n1/*\n    THE STUFF FOR SECTION 3 IS ENCODED HERE.  EACH\n    \"FROM-LOCATION\" GETS A CONTIGUOUS SECTION OF THE \"TRAVEL\"\n    ARRAY.  EACH ENTRY IN TRAVEL IS NEWLOC*1000 + KEYWORD\n    (FROM SECTION 4, MOTION VERBS), AND IS NEGATED IF THIS IS\n    THE LAST ENTRY FOR THIS LOCATION.  KEY(N) IS THE INDEX IN\n    TRAVEL OF THE FIRST OPTION AT LOCATION N.\n */\n\n L1030:  GET FILE (CAVES) EDIT\n              (LOC,NEWLOC,(TK(I) DO I=1 TO 8)) (COL(1),10 F(8));\n         IF LOC = -1 THEN GOTO L1002;\n         IF KEY(LOC) \u00ac= 0 THEN GOTO L1033;\n         KEY(LOC)=TRVS;\n         GOTO L1035;\n L1033:  TRAVEL(TRVS-1)=-TRAVEL(TRVS-1);\n L1035:  DO L=1 TO 8;\n             IF TK(L) = 0 THEN GOTO L1039;\n             TRAVEL(TRVS)=NEWLOC*1000+TK(L);\n             TRVS=TRVS+1;\n             IF TRVS = TRVSIZ THEN CALL BUG(3);\n             END;\n\n L1039:  TRAVEL(TRVS-1)=-TRAVEL(TRVS-1);\n         GOTO L1030;\n\n /*\n    HERE WE READ IN THE VOCABULARY.  KTAB(N) IS THE WORD\n    NUMBER, ATAB(N) IS THE CORRESPONDING WORD.  THE -1 AT THE\n    END OF SECTION 4 IS LEFT IN KTAB AS AN END-MARKER.  THE\n    WORDS ARE GIVEN A MINIMAL HASH TO MAKE READING THE\n    CORE-IMAGE HARDER.  NOTE THAT '/7-08' HAD BETTER NOT BE\n    IN THE LIST, SINCE IT COULD HASH TO -1.  (HASHING REMOVED\n    IN PL/1 VERSION..BRD)\n */\n\n L1040:  DO TABNDX=1 TO TABSIZ;\n L1043:  GET FILE (CAVES) EDIT\n               (KTAB(TABNDX),ATAB(TABNDX)) (COL(1),F(8),A (5));\n         IF KTAB(TABNDX) = -1 THEN GOTO L1002;\n         END;\n         CALL BUG(4);\n\n /*\n    READ IN THE INITIAL LOCATIONS FOR EACH OBJECT.  ALSO THE\n    IMMOVABILITY INFO.  PLAC CONTAINS INITIAL LOCATIONS OF\n    OBJECTS.  FIXD IS -1 FOR IMMOVABLE OBJECTS (INCLUDING THE\n    SNAKE), OR = SECOND LOC FOR TWO-PLACED OBJECTS.\n */\n\n L1050:  GET FILE (CAVES) EDIT (OBJ,J,K) (COL(1),3 F(8));\n         IF OBJ = -1 THEN GOTO L1002;\n         PLAC(OBJ)=J;\n         FIXD(OBJ)=K;\n         GOTO L1050;\n\n /* READ DEFAULT MESSAGE NUMBERS FOR ACTION VERBS, STORE IN\n    ACTSPK.  */\n\n L1060:  GET FILE (CAVES) EDIT (VERB,J) (COL(1),2 F(8));\n         IF VERB = -1 THEN GOTO L1002;\n         ACTSPK(VERB)=J;\n         GOTO L1060;\n\n /* READ INFO ABOUT AVAILABLE LIQUIDS AND OTHER CONDITIONS,\n    STORE IN COND.  */\n\n L1070:  GET FILE (CAVES) EDIT (K,(TK(I) DO I=1 TO 9))\n              (COL(1),10 F(8));\n         IF K = -1 THEN GOTO L1002;\n         DO I=1 TO 9;\n             LOC=TK(I);\n             IF LOC = 0 THEN GOTO L1070;\n             IF BITSET(LOC,K) THEN CALL BUG(8);\n             COND(LOC)=COND(LOC)+2**K;\n             END;\n         GOTO L1070;\n\n /* READ DATA FOR HINTS. */\n\n L1080:  HNTMAX=0;\n L1081:  GET FILE (CAVES) EDIT (K,(TK(I) DO I=1 TO 4))\n              (COL(1),5 F(8));\n         IF K = -1 THEN GOTO L1002;\n         IF K = 0 THEN GOTO L1081;\n         IF K < 0 | K > HNTSIZ THEN CALL BUG(7);\n         DO I=1 TO 4;\n             HINTS(K,I)=TK(I);\n             END;\n         HNTMAX=MAX(HNTMAX,K);\n         GOTO L1081;\n1/*\n    FINISH CONSTRUCTING INTERNAL DATA FORMAT\n\n    HAVING READ IN THE DATABASE, CERTAIN THINGS ARE NOW\n    CONSTRUCTED.  PROPS ARE SET TO ZERO.  WE FINISH SETTING\n    UP COND BY CHECKING FOR FORCED-MOTION TRAVEL ENTRIES.\n    THE PLAC AND FIXD ARRAYS ARE USED TO SET UP ATLOC(N) AS\n    THE FIRST OBJECT AT LOCATION N, AND LINK(OBJ) AS THE NEXT\n    OBJECT AT THE SAME LOCATION AS OBJ.  (OBJ>100 INDICATES\n    THAT FIXED(OBJ-100)=LOC; LINK(OBJ) IS STILL THE CORRECT\n    LINK TO USE.) ABB IS ZEROED; IT CONTROLS WHETHER THE\n    ABBREVIATED DESCRIPTION IS PRINTED.  COUNTS MOD 5 UNLESS\n    \"LOOK\" IS USED.\n */\n\n L1100:  DO I=1 TO 100;\n             PLACE(I)=0;\n             PROP(I)=0;\n             LINK(I)=0;\n             LINK(I+100)=0;\n             END;\n\n         DO I=1 TO LOCSIZ;\n         ABB(I)=0;\n         IF LTEXT(I) = 0 | KEY(I) = 0 THEN GOTO L1102;\n         K=KEY(I);\n         IF MOD(ABS(TRAVEL(K)),1000) = 1 THEN COND(I)=2;\n L1102:  ATLOC(I)=0;\n         END;\n\n /*\n    SET UP THE ATLOC AND LINK ARRAYS AS DESCRIBED ABOVE.\n    WE'LL USE THE DROP SUBROUTINE, WHICH PREFACES NEW OBJECTS\n    ON THE LISTS.  SINCE WE WANT THINGS IN THE OTHER ORDER,\n    WE'LL RUN THE LOOP BACKWARDS.  IF THE OBJECT IS IN TWO\n    LOCS, WE DROP IT TWICE.  THIS ALSO SETS UP \"PLACE\" AND\n    \"FIXED\" AS COPIES OF \"PLAC\" AND \"FIXD\".  ALSO, SINCE\n    TWO-PLACED OBJECTS ARE TYPICALLY BEST DESCRIBED LAST,\n    WE'LL DROP THEM FIRST.\n */\n\n         DO I=1 TO 100;\n             K=101-I;\n             IF FIXD(K) > 0 THEN DO;\n                 CALL DROP(K+100,FIXD(K));\n                 CALL DROP(K,PLAC(K));\n                 END;\n             END;\n\n         DO I=1 TO 100;\n             K=101-I;\n             FIXED(K)=FIXD(K);\n             IF PLAC(K) \u00ac= 0 & FIXD(K) <= 0 THEN CALL DROP(K,PLAC(K));\n             END;\n\n /*\n    TREASURES, AS NOTED EARLIER, ARE OBJECTS 50 THROUGH\n    MAXTRS (CURRENTLY 79).  THEIR PROPS ARE INITIALLY -1, AND\n    ARE SET TO 0 THE FIRST TIME THEY ARE DESCRIBED.  TALLY\n    KEEPS TRACK OF HOW MANY ARE NOT YET FOUND, SO WE KNOW\n    WHEN TO CLOSE THE CAVE.  TALLY2 COUNTS HOW MANY CAN NEVER\n    BE FOUND (E.G.  IF LOST BIRD OR BRIDGE).\n */\n\n         MAXTRS=79;\n         TALLY=0;\n         TALLY2=0;\n         DO I=50 TO MAXTRS;\n             IF PTEXT(I) \u00ac= 0 THEN PROP(I)=-1;\n             TALLY=TALLY-PROP(I);\n             END;\n /*\n    CLEAR THE HINT STUFF.  HINTLC(I) IS HOW LONG HE'S BEEN AT\n    LOC WITH COND BIT I.  HINTED(I) IS TRUE IFF HINT I HAS\n    BEEN USED.\n */\n\n         DO  I=1 TO HNTMAX;\n             HINTED(I)='0'B;\n             HINTLC(I)=0;\n             END;\n\n /* DEFINE SOME HANDY MNEMONICS.  THESE CORRESPOND TO OBJECT\n    NUMBERS.  */\n\n         KEYS=VOCAB('KEYS',1);\n         LAMP=VOCAB('LAMP',1);\n         GRATE=VOCAB('GRATE',1);\n         CAGE=VOCAB('CAGE',1);\n         ROD=VOCAB('ROD',1);\n         ROD2=ROD+1;\n         STEPS=VOCAB('STEPS',1);\n         BIRD=VOCAB('BIRD',1);\n         DOOR=VOCAB('DOOR',1);\n         PILLOW=VOCAB('PILLO',1);\n         SNAKE=VOCAB('SNAKE',1);\n         FISSUR=VOCAB('FISSU',1);\n         TABLET=VOCAB('TABLE',1);\n         CLAM=VOCAB('CLAM',1);\n         OYSTER=VOCAB('OYSTE',1);\n         MAGZIN=VOCAB('MAGAZ',1);\n         DWARF=VOCAB('DWARF',1);\n         KNIFE=VOCAB('KNIFE',1);\n         FOOD=VOCAB('FOOD',1);\n         BOTTLE=VOCAB('BOTTL',1);\n         WATER=VOCAB('WATER',1);\n         OIL=VOCAB('OIL',1);\n         PLANT=VOCAB('PLANT',1);\n         PLANT2=PLANT+1;\n         AXE=VOCAB('AXE',1);\n         MIRROR=VOCAB('MIRRO',1);\n         DRAGON=VOCAB('DRAGO',1);\n         CHASM=VOCAB('CHASM',1);\n         TROLL=VOCAB('TROLL',1);\n         TROLL2=TROLL+1;\n         BEAR=VOCAB('BEAR',1);\n         MESSAG=VOCAB('MESSA',1);\n         VEND=VOCAB('VENDI',1);\n         BATTER=VOCAB('BATTE',1);\n\n /* OBJECTS FROM 50 THROUGH WHATEVER ARE TREASURES.  HERE ARE\n    A FEW.  */\n\n         NUGGET=VOCAB('GOLD',1);\n         COINS=VOCAB('COINS',1);\n         CHEST=VOCAB('CHEST',1);\n         EGGS=VOCAB('EGGS',1);\n         TRIDNT=VOCAB('TRIDE',1);\n         VASE=VOCAB('VASE',1);\n         EMRALD=VOCAB('EMERA',1);\n         PYRAM=VOCAB('PYRAM',1);\n         PEARL=VOCAB('PEARL',1);\n         RUG=VOCAB('RUG',1);\n         CHAIN=VOCAB('CHAIN',1);\n\n /* THESE ARE MOTION-VERB NUMBERS. */\n\n         BACK=VOCAB('BACK',0);\n         LOOK=VOCAB('LOOK',0);\n         CAVE=VOCAB('CAVE',0);\n         NULLX=VOCAB('NULL',0);\n         ENTRNC=VOCAB('ENTRA',0);\n         DPRSSN=VOCAB('DEPRE',0);\n\n /* AND SOME ACTION VERBS. */\n\n         SAY=VOCAB('SAY',2);\n         LOCK=VOCAB('LOCK',2);\n         THROW=VOCAB('THROW',2);\n         FIND=VOCAB('FIND',2);\n         INVENT=VOCAB('INVEN',2);\n\n /*\n    INITIALIZE THE DWARVES.  DLOC IS LOC OF DWARVES,\n    HARD-WIRED IN.  ODLOC IS PRIOR LOC OF EACH DWARF,\n    INITIALLY GARBAGE.  DALTLC IS ALTERNATE INITIAL LOC FOR\n    DWARF, IN CASE ONE OF THEM STARTS OUT ON TOP OF THE\n    ADVENTURER.  (NO 2 OF THE 5 INITIAL LOCS ARE ADJACENT.)\n    DSEEN IS TRUE IF DWARF HAS SEEN HIM.  DFLAG CONTROLS THE\n    LEVEL OF ACTIVATION OF ALL THIS:\n         0       NO DWARF STUFF YET (WAIT UNTIL REACHES HALL\n                 OF MISTS)\n         1       REACHED HALL OF MISTS, BUT HASN'T MET FIRST DWARF\n         2       MET FIRST DWARF, OTHERS START MOVING, NO\n                 KNIVES THROWN YET\n         3       A KNIFE HAS BEEN THROWN (FIRST SET ALWAYS\n                 MISSES)\n         3+      DWARVES ARE MAD (INCREASES THEIR ACCURACY)\n    SIXTH DWARF IS SPECIAL (THE PIRATE).  HE ALWAYS STARTS AT\n    HIS CHEST'S EVENTUAL LOCATION INSIDE THE MAZE.  THIS LOC\n    IS SAVED IN CHLOC FOR REF.  THE DEAD END IN THE OTHER\n    MAZE HAS ITS LOC STORED IN CHLOC2.\n */\n\n         CHLOC=114;\n         CHLOC2=140;\n         DO I=1 TO 6;\n             DSEEN(I)='0'B;\n             END;\n         DFLAG=0;\n         DLOC(1)=19;\n         DLOC(2)=27;\n         DLOC(3)=33;\n         DLOC(4)=44;\n         DLOC(5)=64;\n         DLOC(6)=CHLOC;\n         DALTLC=18;\n\n1/*\n    OTHER RANDOM FLAGS AND COUNTERS, AS FOLLOWS:\n         TURNS   TALLIES HOW MANY COMMANDS HE'S GIVEN\n                 (IGNORES YES/NO)\n         LIMIT   LIFETIME OF LAMP (NOT SET HERE)\n         IWEST   HOW MANY TIMES HE'S SAID \"WEST\" INSTEAD OF\n                 \"W\"\n         KNFLOC  0 IF NO KNIFE HERE, LOC IF KNIFE HERE, -1\n                 AFTER CAVEAT\n         DETAIL  HOW OFTEN WE'VE SAID \"NOT ALLOWED TO GIVE\n                 MORE DETAIL\"\n         ABBNUM  HOW OFTEN WE SHOULD PRINT NON-ABBREVIATED\n                 DESCRIPTIONS\n         MAXDIE  NUMBER OF REINCARNATION MESSAGES AVAILABLE\n                 (UP TO 5)\n         NUMDIE  NUMBER OF TIMES KILLED SO FAR\n         HOLDNG  NUMBER OF OBJECTS BEING CARRIED\n         DKILL   NUMBER OF DWARVES KILLED (UNUSED IN SCORING,\n                 NEEDED FOR MSG)\n         FOOBAR  CURRENT PROGRESS IN SAYING \"FEE FIE FOE\n                 FOO\".\n         BONUS   USED TO DETERMINE AMOUNT OF BONUS IF HE\n                 REACHES CLOSING\n         CLOCK1  NUMBER OF TURNS FROM FINDING LAST TREASURE\n                 TILL CLOSING\n         CLOCK2  NUMBER OF TURNS FROM FIRST WARNING TILL\n                 BLINDING FLASH\n         LOGICALS WERE EXPLAINED EARLIER\n */\n\n         TURNS=0;\n         LMWARN='0'B;\n         IWEST=0;\n         KNFLOC=0;\n         DETAIL=0;\n         ABBNUM=5;\n         DO I=0 TO 4;\n             IF RTEXT(2*I+81) \u00ac= 0 THEN MAXDIE=I+1;\n             END;\n         NUMDIE=0;\n         HOLDNG=0;\n         DKILL=0;\n         FOOBAR=0;\n         BONUS=0;\n         CLOCK1=30;\n         CLOCK2=50;\n         CLOSNG='0'B;\n         PANIC='0'B;\n         CLOSED='0'B;\n         GAVEUP='0'B;\n         SCORNG='0'B;\n\n1/* REPORT ON AMOUNT OF ARRAYS ACTUALLY USED, TO PERMIT\n    REDUCTIONS. */\n\n\n         DO K=1 TO LOCSIZ;\n             KK=LOCSIZ+1-K;\n             IF LTEXT(KK) \u00ac= 0 THEN GOTO L1997;\n             END;\n\n         OBJ=0;\n L1997:  DO K=1 TO 100;\n             IF PTEXT(K) \u00ac= 0 THEN OBJ=OBJ+1;\n             END;\n\n         DO K=1 TO TABNDX;\n             IF KTAB(K)/1000 = 2 THEN VERB=KTAB(K)-2000;\n             END;\n\n         DO K=1 TO RTXSIZ;\n             J=RTXSIZ+1-K;\n             IF RTEXT(J) \u00ac= 0 THEN GOTO L1991;\n             END;\n\n L1991:  K=100;\n         CALL LINESKP;\n         PUT STRING (OUTSTR) EDIT (LINUSE,' of ',LINSIZ,\n             ' words of messages') (F(6),A,F(6),A);\n         CALL LINEOUT;\n         PUT STRING (OUTSTR) EDIT (TRVS,' of ',TRVSIZ,\n             ' travel options') (F(6),A,F(6),A);\n         CALL LINEOUT;\n         PUT STRING (OUTSTR) EDIT (TABNDX,' of ',TABSIZ,\n             ' vocabulary words') (F(6),A,F(6),A);\n         CALL LINEOUT;\n         PUT STRING (OUTSTR) EDIT (KK,' of ',LOCSIZ,\n             ' locations') (F(6),A,F(6),A);\n         CALL LINEOUT;\n         PUT STRING (OUTSTR) EDIT (OBJ,' of ',K,\n             ' objects') (F(6),A,F(6),A);\n         CALL LINEOUT;\n         PUT STRING (OUTSTR) EDIT (VERB,' of ',VRBSIZ,\n             ' action verbs') (F(6),A,F(6),A);\n         CALL LINEOUT;\n         PUT STRING (OUTSTR) EDIT (J,' of ',RTXSIZ,\n             ' rtext messages') (F(6),A,F(6),A);\n         CALL LINEOUT;\n         PUT STRING (OUTSTR) EDIT (CLSSES,' of ',CLSSIZ,\n             ' class messages') (F(6),A,F(6),A);\n         CALL LINEOUT;\n         PUT STRING (OUTSTR) EDIT (HNTMAX,' of ',HNTSIZ,\n             ' hints') (F(6),A,F(6),A);\n         CALL LINEOUT;\n         CALL LINESKP;\n\n\n /*  FINALLY, SINCE WE'RE CLEARLY SETTING THINGS UP FOR THE\n    FIRST TIME...  */\n\n         PUT STRING (OUTSTR) EDIT ('Done!') (A);\n         CALL LINEOUT;\n         CALL LINESKP;\n         CALL LINESKP;\n\n1/*  START-UP, DWARF STUFF */\n\n L1:     CALL ITIME(I);\n         DO J=1 TO I;\n            CALL RAN(1);\n            END;\n         I=RAN(1);\n         HINTED(3)=YES(65,1,0);\n         LOC,NEWLOC=1;\n         LIMIT=330;\n         IF HINTED(3) THEN LIMIT=1000;\n\n /*  CAN'T LEAVE CAVE ONCE IT'S CLOSING (EXCEPT BY MAIN OFFICE). */\n\n L2:     IF NEWLOC >= 9 | NEWLOC = 0 |  \u00ac CLOSNG THEN GOTO L71;\n         CALL RSPEAK(130);\n         NEWLOC=LOC;\n         IF  \u00ac PANIC THEN CLOCK2=15;\n         PANIC='1'B;\n\n /*\n    SEE IF A DWARF HAS SEEN HIM AND HAS COME FROM WHERE HE\n    WANTS TO GO.  IF SO, THE DWARF'S BLOCKING HIS WAY.  IF\n    COMING FROM PLACE FORBIDDEN TO PIRATE (DWARVES ROOTED IN\n    PLACE) LET HIM GET OUT (AND ATTACKED).\n */\n\n L71:    IF NEWLOC = LOC | FORCED(LOC) | BITSET(LOC,3) THEN GOTO L74;\n         DO I=1 TO 5;\n             IF \u00ac (ODLOC(I) \u00ac= NEWLOC |  \u00ac DSEEN(I)) THEN DO;\n                 NEWLOC=LOC;\n                 CALL RSPEAK(2);\n                 GOTO L74;\n                 END;\n             END;\n L74:    LOC=NEWLOC;\n\n /*\n    DWARF STUFF.  SEE EARLIER COMMENTS FOR DESCRIPTION OF\n    VARIABLES.  REMEMBER SIXTH DWARF IS PIRATE AND IS THUS\n    VERY DIFFERENT EXCEPT FOR MOTION RULES.\n\n    FIRST OFF, DON'T LET THE DWARVES FOLLOW HIM INTO A PIT OR\n    A WALL.  ACTIVATE THE WHOLE MESS THE FIRST TIME HE GETS\n    AS FAR AS THE HALL OF MISTS (LOC 15).  IF NEWLOC IS\n    FORBIDDEN TO PIRATE (IN PARTICULAR, IF IT'S BEYOND THE\n    TROLL BRIDGE), BYPASS DWARF STUFF.  THAT WAY PIRATE CAN'T\n    STEAL RETURN TOLL, AND DWARVES CAN'T MEET THE BEAR.  ALSO\n    MEANS DWARVES WON'T FOLLOW HIM INTO DEAD END IN MAZE, BUT\n    C'EST LA VIE.  THEY'LL WAIT FOR HIM OUTSIDE THE DEAD END.\n */\n\n         IF LOC = 0 | FORCED(LOC) | BITSET(NEWLOC,3) THEN GOTO L2000;\n         IF DFLAG \u00ac= 0 THEN GOTO L6000;\n         IF LOC >= 15 THEN DFLAG=1;\n         GOTO L2000;\n\n /*\n    WHEN WE ENCOUNTER THE FIRST DWARF, WE KILL 0, 1, OR 2 OF\n    THE 5 DWARVES.  IF ANY OF THE SURVIVORS IS AT LOC,\n    REPLACE HIM WITH THE ALTERNATE.\n */\n\n L6000:  IF DFLAG \u00ac= 1 THEN GOTO L6010;\n         IF LOC < 15 | PCT(95) THEN GOTO L2000;\n         DFLAG=2;\n         DO I=1 TO 2;\n             J=1+RAN(5);\n             IF PCT(50) THEN DLOC(J)=0;\n             END;\n         DO I=1 TO 5;\n             IF DLOC(I) = LOC THEN DLOC(I)=DALTLC;\n             ODLOC(I)=DLOC(I);\n             END;\n         CALL RSPEAK(3);\n         CALL DROP(AXE,LOC);\n         GOTO L2000;\n\n /*\n    THINGS ARE IN FULL SWING.  MOVE EACH DWARF AT RANDOM,\n    EXCEPT IF HE'S SEEN US HE STICKS WITH US.  DWARVES NEVER\n    GO TO LOCS <15.  IF WANDERING AT RANDOM, THEY DON'T BACK\n    UP UNLESS THERE'S NO ALTERNATIVE.  IF THEY DON'T HAVE TO\n    MOVE, THEY ATTACK.  AND, OF COURSE, DEAD DWARVES DON'T DO\n    MUCH OF ANYTHING.\n */\n\n L6010:  DTOTAL=0;\n         ATTACK=0;\n         STICK=0;\n         DO I=1 TO 6;\n             IF DLOC(I) = 0 THEN GOTO L6030;\n             J=1;\n             KK=DLOC(I);\n             KK=KEY(KK);\n             IF KK = 0 THEN GOTO L6016;\n L6012:      NEWLOC=MOD(ABS(TRAVEL(KK))/1000,1000);\n             IF NEWLOC > 300 | NEWLOC < 15 | NEWLOC = ODLOC(I)\n               | (J > 1 & NEWLOC = TK(J-1)) | J >= 20\n               | NEWLOC = DLOC(I) | FORCED(NEWLOC)\n               | (I = 6 & BITSET(NEWLOC,3))\n               | ABS(TRAVEL(KK))/1000000 = 100 THEN GOTO L6014;\n             TK(J)=NEWLOC;\n             J=J+1;\n L6014:      KK=KK+1;\n             IF TRAVEL(KK-1) >= 0 THEN GOTO L6012;\n L6016:      TK(J)=ODLOC(I);\n             IF J >= 2 THEN J=J-1;\n             J=1+RAN(J);\n             ODLOC(I)=DLOC(I);\n             DLOC(I)=TK(J);\n             DSEEN(I)=(DSEEN(I) & LOC >= 15)\n              | (DLOC(I) = LOC | ODLOC(I) = LOC);\n             IF \u00acDSEEN(I) THEN GOTO L6030;\n             DLOC(I)=LOC;\n             IF I \u00ac= 6 THEN GOTO L6027;\n\n /*\n    THE PIRATE'S SPOTTED HIM.  HE LEAVES HIM ALONE ONCE WE'VE\n    FOUND CHEST.  K COUNTS IF A TREASURE IS HERE.  IF NOT,\n    AND TALLY=TALLY2 PLUS ONE FOR AN UNSEEN CHEST, LET THE\n    PIRATE BE SPOTTED.\n */\n\n             IF LOC = CHLOC | PROP(CHEST) >= 0 THEN GOTO L6030;\n             K=0;\n             DO J=50 TO MAXTRS;\n\n /* PIRATE WON'T TAKE PYRAMID FROM PLOVER ROOM OR DARK ROOM\n    (TOO EASY!).  */\n\n                 IF J = PYRAM & (LOC = PLAC(PYRAM)\n                  | LOC = PLAC(EMRALD)) THEN GOTO L6020;\n                 IF TOTING(J) THEN GOTO L6022;\n L6020:          IF HERE(J) THEN K=1;\n                 END;\n             IF TALLY = TALLY2+1 & K = 0 & PLACE(CHEST) = 0\n              & HERE(LAMP) & PROP(LAMP) = 1 THEN GOTO L6025;\n             IF ODLOC(6) \u00ac= DLOC(6) & PCT(20) THEN CALL RSPEAK(127);\n             GOTO L6030;\n\n L6022:      CALL RSPEAK(128);\n\n /* DON'TSTEAL CHEST BACK FROM TROLL! */\n\n             IF PLACE(MESSAG) = 0 THEN CALL MOVE(CHEST,CHLOC);\n             CALL MOVE(MESSAG,CHLOC2);\n             DO J=50 TO MAXTRS;\n                 IF J = PYRAM & (LOC = PLAC(PYRAM)\n                  | LOC = PLAC(EMRALD)) THEN GOTO L6023;\n                 IF AT(J) & FIXED(J) = 0 THEN CALL CARRY(J,LOC);\n                 IF TOTING(J) THEN CALL DROP(J,CHLOC);\n L6023:          END;\n L6024:      DLOC(6)=CHLOC;\n             ODLOC(6)=CHLOC;\n             DSEEN(6)='0'B;\n             GOTO L6030;\n\n L6025:      CALL RSPEAK(186);\n             CALL MOVE(CHEST,CHLOC);\n             CALL MOVE(MESSAG,CHLOC2);\n             GOTO L6024;\n\n /* THIS THREATENING LITTLE DWARF IS IN THE ROOM WITH HIM! */\n\n L6027:      DTOTAL=DTOTAL+1;\n             IF ODLOC(I) \u00ac= DLOC(I) THEN GOTO L6030;\n             ATTACK=ATTACK+1;\n             IF KNFLOC >= 0 THEN KNFLOC=LOC;\n             IF RAN(1000) < 95*(DFLAG-2) THEN STICK=STICK+1;\n L6030:      END;\n\n /* NOW WE KNOW WHAT'S HAPPENING.  LET'S TELL THE POOR SUCKER\n    ABOUT IT.  */\n\n         IF DTOTAL = 0 THEN GOTO L2000;\n         IF DTOTAL = 1 THEN GOTO L75;\n         CALL LINESKP;\n         PUT STRING (OUTSTR) EDIT ('There are ',DTOTAL,\n             ' threatening little dwarves in the room with you.')\n             (A,F(1),A);\n         CALL LINEOUT;\n         GOTO L77;\n L75:    CALL RSPEAK(4);\n L77:    IF ATTACK = 0 THEN GOTO L2000;\n         IF DFLAG = 2 THEN DFLAG=3;\n\n /*\n    DWARVES GET *VERY* MAD!\n */\n\n         IF ATTACK = 1 THEN GOTO L79;\n         PUT STRING (OUTSTR) EDIT (ATTACK,\n            ' of them throw knives at you!')\n             (F(1),A);\n         CALL LINEOUT;\n         K=6;\n L82:    IF STICK > 1 THEN GOTO L83;\n         CALL RSPEAK(K+STICK);\n         IF STICK = 0 THEN GOTO L2000;\n         GOTO L84;\n L83:    PUT STRING (OUTSTR) EDIT (STICK,' of them get you!') (F(1),A);\n         CALL LINEOUT;\n L84:    OLDLC2=LOC;\n         GOTO L99;\n\n L79:    CALL RSPEAK(5);\n         K=52;\n         GOTO L82;\n\n1/* DESCRIBE THE CURRENT LOCATION AND (MAYBE) GET NEXT COMMAND. */\n\n /* PRINT TEXT FOR CURRENT LOC. */\n\n L2000:  IF LOC = 0 THEN GOTO L99;\n         KK=STEXT(LOC);\n         IF MOD(ABB(LOC),ABBNUM) = 0 | KK = 0 THEN KK=LTEXT(LOC);\n         IF FORCED(LOC) |  \u00ac DARK(0) THEN GOTO L2001;\n         IF WZDARK & PCT(35) THEN GOTO L90;\n         KK=RTEXT(16);\n L2001:  IF TOTING(BEAR) THEN CALL RSPEAK(141);\n         CALL SPEAK(KK);\n         K=1;\n         IF FORCED(LOC) THEN GOTO L8;\n         IF LOC = 33 & PCT(25) &  \u00ac CLOSNG THEN CALL RSPEAK(8);\n\n /*\n    PRINT OUT DESCRIPTIONS OF OBJECTS AT THIS LOCATION.  IF\n    NOT CLOSING AND PROPERTY VALUE IS NEGATIVE, TALLY OFF\n    ANOTHER TREASURE.  RUG IS SPECIAL CASE; ONCE SEEN, ITS\n    PROP IS 1 (DRAGON ON IT) TILL DRAGON IS KILLED.\n    SIMILARLY FOR CHAIN; PROP IS INITIALLY 1 (LOCKED TO\n    BEAR).  THESE HACKS ARE BECAUSE PROP=0 IS NEEDED TO GET\n    FULL SCORE.\n */\n\n         IF DARK(0) THEN GOTO L2012;\n         ABB(LOC)=ABB(LOC)+1;\n         I=ATLOC(LOC);\n L2004:   IF I = 0 THEN GOTO L2012;\n         OBJ=I;\n         IF OBJ > 100 THEN OBJ=OBJ-100;\n         IF OBJ = STEPS & TOTING(NUGGET) THEN GOTO L2008;\n         IF PROP(OBJ) >= 0 THEN GOTO L2006;\n         IF CLOSED THEN GOTO L2008;\n         PROP(OBJ)=0;\n         IF OBJ = RUG | OBJ = CHAIN THEN PROP(OBJ)=1;\n         TALLY=TALLY-1;\n\n /* IF REMAINING TREASURES TOO ELUSIVE, ZAP HIS LAMP. */\n\n         IF TALLY = TALLY2 & TALLY \u00ac= 0 THEN LIMIT=MIN(35,LIMIT);\n L2006:  KK=PROP(OBJ);\n         IF OBJ = STEPS & LOC = FIXED(STEPS) THEN KK=1;\n         CALL PSPEAK(OBJ,KK);\n L2008:  I=LINK(I);\n         GOTO L2004;\n\n L2009:  K=54;\n L2010:  SPK=K;\n L2011:  CALL RSPEAK(SPK);\n\n L2012:  VERB=0;\n         OBJ=0;\n\n /*\n    CHECK IF THIS LOC IS ELIGIBLE FOR ANY HINTS.  IF BEEN\n    HERE LONG ENOUGH, BRANCH TO HELP SECTION (ON LATER PAGE).\n    HINTS ALL COME BACK HERE EVENTUALLY TO FINISH THE LOOP.\n    IGNORE \"HINTS\" < 4 (SPECIAL STUFF, SEE DATABASE NOTES).\n */\n\n L2600:  DO HINT=4 TO HNTMAX;\n             IF \u00ac (HINTED(HINT)) THEN DO;\n                 IF \u00acBITSET(LOC,HINT) THEN HINTLC(HINT)=-1;\n                 HINTLC(HINT)=HINTLC(HINT)+1;\n                 IF HINTLC(HINT) >= HINTS(HINT,1) THEN GOTO L40000;\n                 END;\n             END;\n\n /*\n    KICK THE RANDOM NUMBER GENERATOR JUST TO ADD VARIETY TO\n    THE CHASE.  ALSO, IF CLOSING TIME, CHECK FOR ANY OBJECTS\n    BEING TOTED WITH PROP < 0 AND SET THE PROP TO -1-PROP.\n    THIS WAY OBJECTS WON'T BE DESCRIBED UNTIL THEY'VE BEEN\n    PICKED UP AND PUT DOWN SEPARATE FROM THEIR RESPECTIVE\n    PILES.  DON'T TICK CLOCK1 UNLESS WELL INTO CAVE (AND NOT\n    AT Y2).\n */\n\n L2602:  IF \u00acCLOSED THEN GOTO L2605;\n         IF PROP(OYSTER) < 0 & TOTING(OYSTER)\n                THEN CALL PSPEAK(OYSTER,1);\n         DO I=1 TO 100;\n             IF TOTING(I) & PROP(I) < 0 THEN PROP(I)=-1-PROP(I);\n             END;\n L2605:  WZDARK=DARK(0);\n         IF KNFLOC > 0 & KNFLOC \u00ac= LOC THEN KNFLOC=0;\n         I=RAN(1);\n         CALL GETIN(WD1,WD1X,WD2,WD2X);\n\n /*\n    EVERY INPUT, CHECK \"FOOBAR\" FLAG.  IF ZERO, NOTHING'S\n    GOING ON.  IF POS, MAKE NEG.  IF NEG, HE SKIPPED A WORD,\n    SO MAKE IT ZERO.\n */\n\n L2608:  FOOBAR=MIN(0,-FOOBAR);\n         TURNS=TURNS+1;\n         IF VERB = SAY & WD2 \u00ac= '     ' THEN VERB=0;\n         IF VERB = SAY THEN GOTO L4090;\n         IF TALLY = 0 & LOC >= 15 & LOC \u00ac= 33 THEN CLOCK1=CLOCK1-1;\n         IF CLOCK1 = 0 THEN GOTO L10000;\n         IF CLOCK1 < 0 THEN CLOCK2=CLOCK2-1;\n         IF CLOCK2 = 0 THEN GOTO L11000;\n         IF PROP(LAMP) = 1 THEN LIMIT=LIMIT-1;\n         IF LIMIT <= 30 & HERE(BATTER) & PROP(BATTER) = 0\n          & HERE(LAMP) THEN GOTO L12000;\n         IF LIMIT = 0 THEN GOTO L12400;\n         IF LIMIT < 0 & LOC <= 8 THEN GOTO L12600;\n         IF LIMIT <= 30 THEN GOTO L12200;\n L19999: K=43;\n         IF LIQLOC(LOC) = WATER THEN K=70;\n         IF WD1 = 'ENTER' & (WD2 = 'STREA' | WD2 = 'WATER')\n          THEN GOTO L2010;\n         IF WD1 = 'ENTER' & WD2 \u00ac= '    ' THEN GOTO L2800;\n         IF (WD1 \u00ac= 'WATER' & WD1 \u00ac= 'OIL')\n          | (WD2 \u00ac= 'PLANT' & WD2 \u00ac= 'DOOR') THEN GOTO L2610;\n         IF AT(VOCAB(WD2,1)) THEN WD2='POUR';\n L2610:  IF WD1 \u00ac= 'WEST' THEN GOTO L2630;\n         IWEST=IWEST+1;\n         IF IWEST = 10 THEN CALL RSPEAK(17);\n L2630:  I=VOCAB(WD1,-1);\n         IF I = -1 THEN GOTO L3000;\n         K=MOD(I,1000);\n         KQ=I/1000+1;\n         SELECT (KQ-1);\n            WHEN (0) GO TO L8;\n            WHEN (1) GO TO L5000;\n            WHEN (2) GO TO L4000;\n            WHEN (3) GO TO L2010;\n            END;\n         CALL BUG(22);\n\n /* GET SECOND WORD FOR ANALYSIS. */\n\n L2800:  WD1=WD2;\n         WD1X=WD2X;\n         WD2='     ';\n         GOTO L2610;\n\n /* GEE, I DON'T UNDERSTAND. */\n\n L3000:  SPK=60;\n         IF PCT(20) THEN SPK=61;\n         IF PCT(20) THEN SPK=13;\n         CALL RSPEAK(SPK);\n         GOTO L2600;\n\n /*\n    ANALYSE A VERB.  REMEMBER WHAT IT WAS, GO BACK FOR OBJECT\n    IF SECOND WORD UNLESS VERB IS \"SAY\", WHICH SNARFS\n    ARBITRARY SECOND WORD.\n */\n\n L4000:  VERB=K;\n         SPK=ACTSPK(VERB);\n         IF WD2 \u00ac= '     ' & VERB \u00ac= SAY THEN GOTO L2800;\n         IF VERB = SAY THEN\n             IF WD2 = '     ' THEN GO TO L4080;\n                              ELSE GO TO L4090;\n         IF OBJ \u00ac= 0 THEN GOTO L4090;\n\n /* ANALYSE AN INTRANSITIVE VERB (IE, NO OBJECT GIVEN YET). */\n\n L4080:  SELECT (VERB);\n            WHEN (01) GO TO L8010;       /* TAKE */\n            WHEN (02) GO TO L8000;       /* DROP */\n            WHEN (03) GO TO L8000;       /* SAY */\n            WHEN (04) GO TO L8040;       /* OPEN */\n            WHEN (05) GO TO L2009;       /* NOTH */\n            WHEN (06) GO TO L8040;       /* LOCK */\n            WHEN (07) GO TO L9070;       /* ON */\n            WHEN (08) GO TO L9080;       /* OFF */\n            WHEN (09) GO TO L8000;       /* WAVE */\n            WHEN (10) GO TO L8000;       /* CALM */\n            WHEN (11) GO TO L2011;       /* WALK */\n            WHEN (12) GO TO L9120;       /* KILL */\n            WHEN (13) GO TO L9130;       /* POUR */\n            WHEN (14) GO TO L8140;       /* EAT */\n            WHEN (15) GO TO L9150;       /* DRNK */\n            WHEN (16) GO TO L8000;       /* RUB */\n            WHEN (17) GO TO L8000;       /* TOSS */\n            WHEN (18) GO TO L8180;       /* QUIT */\n            WHEN (19) GO TO L8000;       /* FIND */\n            WHEN (20) GO TO L8200;       /* INVN */\n            WHEN (21) GO TO L8000;       /* FEED */\n            WHEN (22) GO TO L9220;       /* FILL */\n            WHEN (23) GO TO L9230;       /* BLST */\n            WHEN (24) GO TO L8240;       /* SCOR */\n            WHEN (25) GO TO L8250;       /* FOO */\n            WHEN (26) GO TO L8260;       /* BRF */\n            WHEN (27) GO TO L8270;       /* READ */\n            WHEN (28) GO TO L8000;       /* BREK */\n            WHEN (29) GO TO L8000;       /* WAKE */\n            WHEN (30) GO TO L8300;       /* SUSP */\n            WHEN (31) GO TO L8310;       /* HOUR */\n            WHEN (32) GO TO SETLOG;      /* LOG  */\n            END;\n\n         CALL BUG(23);\n\n /* ANALYSE A TRANSITIVE VERB. */\n\n L4090:  SELECT (VERB);\n            WHEN (01) GO TO L9010;       /* TAKE */\n            WHEN (02) GO TO L9020;       /* DROP */\n            WHEN (03) GO TO L9030;       /* SAY */\n            WHEN (04) GO TO L9040;       /* OPEN */\n            WHEN (05) GO TO L2009;       /* NOTH */\n            WHEN (06) GO TO L9040;       /* LOCK */\n            WHEN (07) GO TO L9070;       /* ON */\n            WHEN (08) GO TO L9080;       /* OFF */\n            WHEN (09) GO TO L9090;       /* WAVE */\n            WHEN (10) GO TO L2011;       /* CALM */\n            WHEN (11) GO TO L2011;       /* WALK */\n            WHEN (12) GO TO L9120;       /* KILL */\n            WHEN (13) GO TO L9130;       /* POUR */\n            WHEN (14) GO TO L9140;       /* EAT */\n            WHEN (15) GO TO L9150;       /* DRNK */\n            WHEN (16) GO TO L9160;       /* RUB */\n            WHEN (17) GO TO L9170;       /* TOSS */\n            WHEN (18) GO TO L2011;       /* QUIT */\n            WHEN (19) GO TO L9190;       /* FIND */\n            WHEN (20) GO TO L9190;       /* INVN */\n            WHEN (21) GO TO L9210;       /* FEED */\n            WHEN (22) GO TO L9220;       /* FILL */\n            WHEN (23) GO TO L9230;       /* BLST */\n            WHEN (24) GO TO L2011;       /* SCOR */\n            WHEN (25) GO TO L2011;       /* FOO */\n            WHEN (26) GO TO L2011;       /* BRF */\n            WHEN (27) GO TO L9270;       /* READ */\n            WHEN (28) GO TO L9280;       /* BREK */\n            WHEN (29) GO TO L9290;       /* WAKE */\n            WHEN (30) GO TO L2011;       /* SUSP */\n            WHEN (31) GO TO L2011;       /* HOUR */\n            WHEN (32) GO TO L2011;       /* LOG  */\n            END;\n         CALL BUG(24);\n\n /*\n    ANALYSE AN OBJECT WORD.  SEE IF THE THING IS HERE,\n    WHETHER WE'VE GOT A VERB YET, AND SO ON.  OBJECT MUST BE\n    HERE UNLESS VERB IS \"FIND\" OR \"INVENT(ORY)\" (AND NO NEW\n    VERB YET TO BE ANALYSED).  WATER AND OIL ARE ALSO FUNNY,\n    SINCE THEY ARE NEVER ACTUALLY DROPPED AT ANY LOCATION,\n    BUT MIGHT BE HERE INSIDE THE BOTTLE OR AS A FEATURE OF\n    THE LOCATION.\n */\n\n L5000:  OBJ=K;\n         IF FIXED(K) \u00ac= LOC &  \u00ac HERE(K) THEN GOTO L5100;\n L5010:  IF WD2 \u00ac= '     ' THEN GOTO L2800;\n         IF VERB \u00ac= 0 THEN GOTO L4090;\n         CALL A5TOA1(WD1,WD1X,TKWORD,K);\n         CALL LINESKP;\n         PUT STRING (OUTSTR) EDIT ('What do you want to do with the ',\n             (TKWORD(I) DO I=1 TO K)) (A,20 A);\n         CALL LINEOUT;\n         GOTO L2600;\n\n L5100:  IF K \u00ac= GRATE THEN GOTO L5110;\n         IF LOC = 1 | LOC = 4 | LOC = 7 THEN K=DPRSSN;\n         IF LOC > 9 & LOC < 15 THEN K=ENTRNC;\n         IF K \u00ac= GRATE THEN GOTO L8;\n L5110:  IF K \u00ac= DWARF THEN GOTO L5120;\n         DO I=1 TO 5;\n             IF DLOC(I) = LOC & DFLAG >= 2 THEN GOTO L5010;\n             END;\n L5120:  IF (LIQ(0) = K & HERE(BOTTLE))\n                | K = LIQLOC(LOC) THEN GOTO L5010;\n         IF OBJ \u00ac= PLANT |  \u00ac AT(PLANT2) | PROP(PLANT2) = 0\n               THEN GOTO L5130;\n         OBJ=PLANT2;\n         GOTO L5010;\n L5130:  IF OBJ \u00ac= KNIFE | KNFLOC \u00ac= LOC THEN GOTO L5140;\n         KNFLOC=-1;\n         SPK=116;\n         GOTO L2011;\n L5140:  IF OBJ \u00ac= ROD |  \u00acHERE(ROD2) THEN GOTO L5190;\n         OBJ=ROD2;\n         GOTO L5010;\n L5190:  IF (VERB = FIND | VERB = INVENT) & WD2 = '     '\n              THEN GOTO L5010;\n         CALL A5TOA1(WD1,WD1X,TKWORD,K);\n         CALL LINESKP;\n         PUT STRING (OUTSTR) EDIT\n              ('I see no ',(TKWORD(I) DO I=1 TO K),' here!')\n             (A,20 A);\n         CALL LINEOUT;\n         GOTO L2012;\n1/*\n    FIGURE OUT THE NEW LOCATION\n\n    GIVEN THE CURRENT LOCATION IN \"LOC\", AND A MOTION VERB\n    NUMBER IN \"K\", PUT THE NEW LOCATION IN \"NEWLOC\".  THE\n    CURRENT LOC IS SAVED IN \"OLDLOC\" IN CASE HE WANTS TO\n    RETREAT.  THE CURRENT OLDLOC IS SAVED IN OLDLC2, IN CASE\n    HE DIES.  (IF HE DOES, NEWLOC WILL BE LIMBO, AND OLDLOC\n    WILL BE WHAT KILLED HIM, SO WE NEED OLDLC2, WHICH IS THE\n    LAST PLACE HE WAS SAFE.)\n */\n\n L8:     KK=KEY(LOC);\n         NEWLOC=LOC;\n         IF KK = 0 THEN CALL BUG(26);\n         IF K = NULLX THEN GOTO L2;\n         IF K = BACK THEN GOTO L20;\n         IF K = LOOK THEN GOTO L30;\n         IF K = CAVE THEN GOTO L40;\n         OLDLC2=OLDLOC;\n         OLDLOC=LOC;\n\n L9:     LL=ABS(TRAVEL(KK));\n         IF MOD(LL,1000) = 1 | MOD(LL,1000) = K THEN GOTO L10;\n         IF TRAVEL(KK) < 0 THEN GOTO L50;\n         KK=KK+1;\n         GOTO L9;\n\n L10:    LL=LL/1000;\n L11:    NEWLOC=LL/1000;\n         K=MOD(NEWLOC,100);\n         IF NEWLOC <= 300 THEN GOTO L13;\n         IF PROP(K) \u00ac= NEWLOC/100-3 THEN GOTO L16;\n L12:    IF TRAVEL(KK) < 0 THEN CALL BUG(25);\n         KK=KK+1;\n         NEWLOC=ABS(TRAVEL(KK))/1000;\n         IF NEWLOC = LL THEN GOTO L12;\n         LL=NEWLOC;\n         GOTO L11;\n\n L13:    IF NEWLOC <= 100 THEN GOTO L14;\n         IF TOTING(K) | (NEWLOC > 200 & AT(K)) THEN GOTO L16;\n         GOTO L12;\n\n L14:    IF NEWLOC \u00ac= 0 &  \u00acPCT(NEWLOC) THEN GOTO L12;\n L16:    NEWLOC=MOD(LL,1000);\n         IF NEWLOC <= 300 THEN GOTO L2;\n         IF NEWLOC <= 500 THEN GOTO L30000;\n         CALL RSPEAK(NEWLOC-500);\n         NEWLOC=LOC;\n         GOTO L2;\n\n /*\n    SPECIAL MOTIONS COME HERE.  LABELLING CONVENTION:\n    STATEMENT NUMBERS NNNXX (XX=00-99) ARE USED FOR SPECIAL\n    CASE NUMBER NNN (NNN=301-500).\n */\n\n L30000: NEWLOC=NEWLOC-300;\n         SELECT (NEWLOC-1);\n             WHEN (00) GO TO L30100;\n             WHEN (01) GO TO L30200;\n             WHEN (02) GO TO L30300;\n             END;\n         CALL BUG(20);\n\n /*\n    TRAVEL 301.  PLOVER-ALCOVE PASSAGE.  CAN CARRY ONLY\n    EMERALD.  NOTE:  TRAVEL TABLE MUST INCLUDE \"USELESS\"\n    ENTRIES GOING THROUGH PASSAGE, WHICH CAN NEVER BE USED\n    FOR ACTUAL MOTION, BUT CAN BE SPOTTED BY \"GO BACK\".\n */\n\n L30100: NEWLOC=99+100-LOC;\n         IF HOLDNG = 0 | (HOLDNG = 1 & TOTING(EMRALD)) THEN GOTO L2;\n         NEWLOC=LOC;\n         CALL RSPEAK(117);\n         GOTO L2;\n\n /*\n    TRAVEL 302.  PLOVER TRANSPORT.  DROP THE EMERALD (ONLY\n    USE SPECIAL TRAVEL IF TOTING IT), SO HE'S FORCED TO USE\n    THE PLOVER-PASSAGE TO GET IT OUT.  HAVING DROPPED IT, GO\n    BACK AND PRETEND HE WASN'T CARRYING IT AFTER ALL.\n */\n\n L30200: CALL DROP(EMRALD,LOC);\n         GOTO L12;\n\n /*\n    TRAVEL 303.  TROLL BRIDGE.  MUST BE DONE ONLY AS SPECIAL\n    MOTION SO THAT DWARVES WON'T WANDER ACROSS AND ENCOUNTER\n    THE BEAR.  (THEY WON'T FOLLOW THE PLAYER THERE BECAUSE\n    THAT REGION IS FORBIDDEN TO THE PIRATE.) IF\n    PROP(TROLL)=1, HE'S CROSSED SINCE PAYING, SO STEP OUT AND\n    BLOCK HIM.  (STANDARD TRAVEL ENTRIES CHECK FOR\n    PROP(TROLL)=0.) SPECIAL STUFF FOR BEAR.\n */\n\n L30300: IF PROP(TROLL) \u00ac= 1 THEN GOTO L30310;\n         CALL PSPEAK(TROLL,1);\n         PROP(TROLL)=0;\n         CALL MOVE(TROLL2,0);\n         CALL MOVE(TROLL2+100,0);\n         CALL MOVE(TROLL,PLAC(TROLL));\n         CALL MOVE(TROLL+100,FIXD(TROLL));\n         CALL JUGGLE(CHASM);\n         NEWLOC=LOC;\n         GOTO L2;\n\n L30310: NEWLOC=PLAC(TROLL)+FIXD(TROLL)-LOC;\n         IF PROP(TROLL) = 0 THEN PROP(TROLL)=1;\n         IF \u00acTOTING(BEAR) THEN GOTO L2;\n         CALL RSPEAK(162);\n         PROP(CHASM)=1;\n         PROP(TROLL)=2;\n         CALL DROP(BEAR,NEWLOC);\n         FIXED(BEAR)=-1;\n         PROP(BEAR)=3;\n         IF PROP(SPICES) < 0 THEN TALLY2=TALLY2+1;\n         OLDLC2=NEWLOC;\n         GOTO L99;\n\n /* END OF SPECIALS. */\n\n /*\n    HANDLE \"GO BACK\".  LOOK FOR VERB WHICH GOES FROM LOC TO\n    OLDLOC, OR TO OLDLC2 IF OLDLOC HAS FORCED-MOTION.  K2\n    SAVES ENTRY -> FORCED LOC -> PREVIOUS LOC.\n */\n\n L20:    K=OLDLOC;\n         IF FORCED(K) THEN K=OLDLC2;\n         OLDLC2=OLDLOC;\n         OLDLOC=LOC;\n         K2=0;\n         IF K \u00ac= LOC THEN GOTO L21;\n         CALL RSPEAK(91);\n         GOTO L2;\n\n L21:    LL=MOD((ABS(TRAVEL(KK))/1000),1000);\n         IF LL = K THEN GOTO L25;\n         IF LL > 300 THEN GOTO L22;\n         J=KEY(LL);\n         IF FORCED(LL) & MOD((ABS(TRAVEL(J))/1000),1000) = K\n              THEN K2=KK;\n L22:    IF TRAVEL(KK) < 0 THEN GOTO L23;\n         KK=KK+1;\n         GOTO L21;\n\n L23:    KK=K2;\n         IF KK \u00ac= 0 THEN GOTO L25;\n         CALL RSPEAK(140);\n         GOTO L2;\n\n L25:    K=MOD(ABS(TRAVEL(KK)),1000);\n         KK=KEY(LOC);\n         GOTO L9;\n\n /*\n    LOOK.  CAN'T GIVE MORE DETAIL.  PRETEND IT WASN'T DARK\n    (THOUGH IT MAY \"NOW\" BE DARK) SO HE WON'T FALL INTO A PIT\n    WHILE STARING INTO THE GLOOM.\n */\n\n L30:    IF DETAIL < 3 THEN CALL RSPEAK(15);\n         DETAIL=DETAIL+1;\n         WZDARK='0'B;\n         ABB(LOC)=0;\n         GOTO L2;\n\n /* CAVE.  DIFFERENT MESSAGES DEPENDING ON WHETHER ABOVE GROUND. */\n\n L40:    IF LOC < 8 THEN CALL RSPEAK(57);\n         IF LOC >= 8 THEN CALL RSPEAK(58);\n         GOTO L2;\n\n /* NON-APPLICABLE MOTION.  VARIOUS MESSAGES DEPENDING ON\n    WORD GIVEN.  */\n\n L50:    SPK=12;\n         IF K >= 43 & K <= 50 THEN SPK=9;\n         IF K = 29 | K = 30 THEN SPK=9;\n         IF K = 7 | K = 36 | K = 37 THEN SPK=10;\n         IF K = 11 | K = 19 THEN SPK=11;\n         IF VERB = FIND | VERB = INVENT THEN SPK=59;\n         IF K = 62 | K = 65 THEN SPK=42;\n         IF K = 17 THEN SPK=80;\n         CALL RSPEAK(SPK);\n         GOTO L2;\n\n1/*\n    \"YOU'RE DEAD, JIM.\"\n\n    IF THE CURRENT LOC IS ZERO, IT MEANS THE CLOWN GOT\n    HIMSELF KILLED.  WE'LL ALLOW THIS MAXDIE TIMES.  MAXDIE\n    IS AUTOMATICALLY SET BASED ON THE NUMBER OF SNIDE\n    MESSAGES AVAILABLE.  EACH DEATH RESULTS IN A MESSAGE (81,\n    83, ETC.) WHICH OFFERS REINCARNATION; IF ACCEPTED, THIS\n    RESULTS IN MESSAGE 82, 84, ETC.  THE LAST TIME, IF HE\n    WANTS ANOTHER CHANCE, HE GETS A SNIDE REMARK AS WE EXIT.\n    WHEN REINCARNATED, ALL OBJECTS BEING CARRIED GET DROPPED\n    AT OLDLC2 (PRESUMABLY THE LAST PLACE PRIOR TO BEING\n    KILLED) WITHOUT CHANGE OF PROPS.  THE LOOP RUNS BACKWARDS\n    TO ASSURE THAT THE BIRD IS DROPPED BEFORE THE CAGE.\n    (THIS KLUGE COULD BE CHANGED ONCE WE'RE SURE ALL\n    REFERENCES TO BIRD AND CAGE ARE DONE BY KEYWORDS.) THE\n    LAMP IS A SPECIAL CASE (IT WOULDN'T DO TO LEAVE IT IN THE\n    CAVE).  IT IS TURNED OFF AND LEFT OUTSIDE THE BUILDING\n    (ONLY IF HE WAS CARRYING IT, OF COURSE).  HE HIMSELF IS\n    LEFT INSIDE THE BUILDING (AND HEAVEN HELP HIM IF HE TRIES\n    TO XYZZY BACK INTO THE CAVE WITHOUT THE LAMP!).  OLDLOC\n    IS ZAPPED SO HE CAN'T JUST \"RETREAT\".\n\n    THE EASIEST WAY TO GET KILLED IS TO FALL INTO A PIT IN\n    PITCH DARKNESS.\n */\n\n L90:    CALL RSPEAK(23);\n         OLDLC2=LOC;\n\n /* OKAY, HE'S DEAD.  LET'S GET ON WITH IT. */\n\n L99:    IF CLOSNG THEN GOTO L95;\n         YEA=YES(81+NUMDIE*2,82+NUMDIE*2,54);\n         NUMDIE=NUMDIE+1;\n         IF NUMDIE = MAXDIE |  \u00acYEA THEN GOTO L20000;\n         PLACE(WATER)=0;\n         PLACE(OIL)=0;\n         IF TOTING(LAMP) THEN PROP(LAMP)=0;\n         DO J=1 TO 100;\n             I=101-J;\n             IF \u00acTOTING(I) THEN GOTO L98;\n             K=OLDLC2;\n             IF I = LAMP THEN K=1;\n             CALL DROP(I,K);\n L98:        END;\n         LOC=3;\n         OLDLOC=LOC;\n         GOTO L2000;\n\n /* HE DIED DURING CLOSING TIME.  NO RESURRECTION.  TALLY UP\n    A DEATH AND EXIT.  */\n\n L95:    CALL RSPEAK(131);\n         NUMDIE=NUMDIE+1;\n         GOTO L20000;\n\n1/*\n    ROUTINES FOR PERFORMING THE VARIOUS ACTION VERBS\n\n    STATEMENT NUMBERS IN THIS SECTION ARE 8000 FOR\n    INTRANSITIVE VERBS, 9000 FOR TRANSITIVE, PLUS TEN TIMES\n    THE VERB NUMBER.  MANY INTRANSITIVE VERBS USE THE\n    TRANSITIVE CODE, AND SOME VERBS USE CODE FOR OTHER VERBS,\n    AS NOTED BELOW.\n\n    RANDOM INTRANSITIVE VERBS COME HERE.  CLEAR OBJ JUST IN\n    CASE (SEE \"ATTACK\").\n */\n\n L8000:  CALL A5TOA1(WD1,WD1X,TKWORD,K);\n         CALL LINESKP;\n         PUT STRING (OUTSTR) EDIT\n              ((TKWORD(I) DO I=1 TO K),' what?') (A,20 A);\n         CALL LINEOUT;\n         OBJ=0;\n         GOTO L2600;\n\n /* CARRY, NO OBJECT GIVEN YET.  OK IF ONLY ONE OBJECT PRESENT. */\n\n L8010:  IF ATLOC(LOC) = 0 | LINK(ATLOC(LOC)) \u00ac= 0 THEN GOTO L8000;\n         DO I=1 TO 5;\n             IF DLOC(I) = LOC & DFLAG >= 2 THEN GOTO L8000;\n             END;\n         OBJ=ATLOC(LOC);\n\n /*\n    CARRY AN OBJECT.  SPECIAL CASES FOR BIRD AND CAGE (IF\n    BIRD IN CAGE, CAN'T TAKE ONE WITHOUT THE OTHER.  LIQUIDS\n    ALSO SPECIAL, SINCE THEY DEPEND ON STATUS OF BOTTLE.\n    ALSO VARIOUS SIDE EFFECTS, ETC.\n */\n\n L9010:  IF TOTING(OBJ) THEN GOTO L2011;\n         SPK=25;\n         IF OBJ = PLANT & PROP(PLANT) <= 0 THEN SPK=115;\n         IF OBJ = BEAR & PROP(BEAR) = 1 THEN SPK=169;\n         IF OBJ = CHAIN & PROP(BEAR) \u00ac= 0 THEN SPK=170;\n         IF FIXED(OBJ) \u00ac= 0 THEN GOTO L2011;\n         IF OBJ \u00ac= WATER & OBJ \u00ac= OIL THEN GOTO L9017;\n         IF HERE(BOTTLE) & LIQ(0) = OBJ THEN GOTO L9018;\n         OBJ=BOTTLE;\n         IF TOTING(BOTTLE) & PROP(BOTTLE) = 1 THEN GOTO L9220;\n         IF PROP(BOTTLE) \u00ac= 1 THEN SPK=105;\n         IF \u00acTOTING(BOTTLE) THEN SPK=104;\n         GOTO L2011;\n L9018:  OBJ=BOTTLE;\n L9017:  IF HOLDNG < 7 THEN GOTO L9016;\n         CALL RSPEAK(92);\n         GOTO L2012;\n L9016:  IF OBJ \u00ac= BIRD THEN GOTO L9014;\n         IF PROP(BIRD) \u00ac= 0 THEN GOTO L9014;\n         IF \u00acTOTING(ROD) THEN GOTO L9013;\n         CALL RSPEAK(26);\n         GOTO L2012;\n L9013:  IF TOTING(CAGE) THEN GOTO L9015;\n         CALL RSPEAK(27);\n         GOTO L2012;\n L9015:  PROP(BIRD)=1;\n L9014:  IF (OBJ = BIRD | OBJ = CAGE) & PROP(BIRD) \u00ac= 0\n             THEN CALL CARRY(BIRD+CAGE-OBJ,LOC);\n         CALL CARRY(OBJ,LOC);\n         K=LIQ(0);\n         IF OBJ = BOTTLE & K \u00ac= 0 THEN PLACE(K)=-1;\n         GOTO L2009;\n\n /*\n    DISCARD OBJECT.  \"THROW\" ALSO COMES HERE FOR MOST\n    OBJECTS.  SPECIAL CASES FOR BIRD (MIGHT ATTACK SNAKE OR\n    DRAGON) AND CAGE (MIGHT CONTAIN BIRD) AND VASE.  DROP\n    COINS AT VENDING MACHINE FOR EXTRA BATTERIES.\n */\n\n L9020:  IF TOTING(ROD2) & OBJ = ROD &  \u00ac TOTING(ROD) THEN OBJ=ROD2;\n         IF \u00acTOTING(OBJ) THEN GOTO L2011;\n         IF OBJ \u00ac= BIRD |  \u00ac HERE(SNAKE) THEN GOTO L9024;\n         CALL RSPEAK(30);\n         IF CLOSED THEN GOTO L19000;\n         CALL DSTROY(SNAKE);\n\n /* SET PROP FOR USE BY TRAVEL OPTIONS */\n\n         PROP(SNAKE)=1;\n L9021:  K=LIQ(0);\n         IF K = OBJ THEN OBJ=BOTTLE;\n         IF OBJ = BOTTLE & K \u00ac= 0 THEN PLACE(K)=0;\n         IF OBJ = CAGE & PROP(BIRD) \u00ac= 0 THEN CALL DROP(BIRD,LOC);\n         IF OBJ = BIRD THEN PROP(BIRD)=0;\n         CALL DROP(OBJ,LOC);\n         GOTO L2012;\n\n L9024:  IF OBJ \u00ac= COINS |  \u00ac HERE(VEND) THEN GOTO L9025;\n         CALL DSTROY(COINS);\n         CALL DROP(BATTER,LOC);\n         CALL PSPEAK(BATTER,0);\n         GOTO L2012;\n\n L9025:  IF OBJ \u00ac= BIRD |  \u00ac AT(DRAGON) | PROP(DRAGON) \u00ac= 0\n                THEN GOTO L9026;\n         CALL RSPEAK(154);\n         CALL DSTROY(BIRD);\n         PROP(BIRD)=0;\n         IF PLACE(SNAKE) = PLAC(SNAKE) THEN TALLY2=TALLY2+1;\n         GOTO L2012;\n\n L9026:  IF OBJ \u00ac= BEAR |  \u00acAT(TROLL) THEN GOTO L9027;\n         CALL RSPEAK(163);\n         CALL MOVE(TROLL,0);\n         CALL MOVE(TROLL+100,0);\n         CALL MOVE(TROLL2,PLAC(TROLL));\n         CALL MOVE(TROLL2+100,FIXD(TROLL));\n         CALL JUGGLE(CHASM);\n         PROP(TROLL)=2;\n         GOTO L9021;\n\n L9027:  IF OBJ = VASE & LOC \u00ac= PLAC(PILLOW) THEN GOTO L9028;\n         CALL RSPEAK(54);\n         GOTO L9021;\n\n L9028:  PROP(VASE)=2;\n         IF AT(PILLOW) THEN PROP(VASE)=0;\n         CALL PSPEAK(VASE,PROP(VASE)+1);\n         IF PROP(VASE) \u00ac= 0 THEN FIXED(VASE)=-1;\n         GOTO L9021;\n\n /* SAY.  ECHO WD2 (OR WD1 IF NO WD2 (SAY WHAT?, ETC.).)\n    MAGIC WORDS OVERRIDE.  */\n\n L9030:  CALL A5TOA1(WD2,WD2X,TKWORD,K);\n         IF WD2 = '     ' THEN CALL A5TOA1(WD1,WD1X,TKWORD,K);\n         IF WD2 \u00ac= '     ' THEN WD1=WD2;\n         I=VOCAB(WD1,-1);\n         IF I = 62 | I = 65 | I = 71 | I = 2025 THEN GOTO L9035;\n         CALL LINESKP;\n         PUT STRING (OUTSTR) EDIT\n                ('Okay, \"',(TKWORD(I) DO I=1 TO K),'\".') (A,20 A);\n         CALL LINEOUT;\n         GOTO L2012;\n\n L9035:  WD2='     ';\n         OBJ=0;\n         GOTO L2630;\n\n /* LOCK, UNLOCK, NO OBJECT GIVEN.  ASSUME VARIOUS THINGS IF\n    PRESENT.  */\n\n L8040:  SPK=28;\n         IF HERE(CLAM) THEN OBJ=CLAM;\n         IF HERE(OYSTER) THEN OBJ=OYSTER;\n         IF AT(DOOR) THEN OBJ=DOOR;\n         IF AT(GRATE) THEN OBJ=GRATE;\n         IF OBJ \u00ac= 0 & HERE(CHAIN) THEN GOTO L8000;\n         IF HERE(CHAIN) THEN OBJ=CHAIN;\n         IF OBJ = 0 THEN GOTO L2011;\n\n /* LOCK, UNLOCK OBJECT.  SPECIAL STUFF FOR OPENING\n    CLAM/OYSTER AND FOR CHAIN.  */\n\n L9040:  IF OBJ = CLAM | OBJ = OYSTER THEN GOTO L9046;\n         IF OBJ = DOOR THEN SPK=111;\n         IF OBJ = DOOR & PROP(DOOR) = 1 THEN SPK=54;\n         IF OBJ = CAGE THEN SPK=32;\n         IF OBJ = KEYS THEN SPK=55;\n         IF OBJ = GRATE | OBJ = CHAIN THEN SPK=31;\n         IF SPK \u00ac= 31 |  \u00ac HERE(KEYS) THEN GOTO L2011;\n         IF OBJ = CHAIN THEN GOTO L9048;\n         IF \u00acCLOSNG THEN GOTO L9043;\n         K=130;\n         IF \u00acPANIC THEN CLOCK2=15;\n         PANIC='1'B;\n         GOTO L2010;\n\n L9043:  K=34+PROP(GRATE);\n         PROP(GRATE)=1;\n         IF VERB = LOCK THEN PROP(GRATE)=0;\n         K=K+2*PROP(GRATE);\n         GOTO L2010;\n\n /* CLAM/OYSTER. */\n\n L9046:  K=0;\n         IF OBJ = OYSTER THEN K=1;\n         SPK=124+K;\n         IF TOTING(OBJ) THEN SPK=120+K;\n         IF \u00acTOTING(TRIDNT) THEN SPK=122+K;\n         IF VERB = LOCK THEN SPK=61;\n         IF SPK \u00ac= 124 THEN GOTO L2011;\n         CALL DSTROY(CLAM);\n         CALL DROP(OYSTER,LOC);\n         CALL DROP(PEARL,105);\n         GOTO L2011;\n\n /* CHAIN. */\n\n L9048:  IF VERB = LOCK THEN GOTO L9049;\n         SPK=171;\n         IF PROP(BEAR) = 0 THEN SPK=41;\n         IF PROP(CHAIN) = 0 THEN SPK=37;\n         IF SPK \u00ac= 171 THEN GOTO L2011;\n         PROP(CHAIN)=0;\n         FIXED(CHAIN)=0;\n         IF PROP(BEAR) \u00ac= 3 THEN PROP(BEAR)=2;\n         FIXED(BEAR)=2-PROP(BEAR);\n         GOTO L2011;\n\n L9049:  SPK=172;\n         IF PROP(CHAIN) \u00ac= 0 THEN SPK=34;\n         IF LOC \u00ac= PLAC(CHAIN) THEN SPK=173;\n         IF SPK \u00ac= 172 THEN GOTO L2011;\n         PROP(CHAIN)=2;\n         IF TOTING(CHAIN) THEN CALL DROP(CHAIN,LOC);\n         FIXED(CHAIN)=-1;\n         GOTO L2011;\n\n /* LIGHT LAMP */\n\n L9070:  IF \u00acHERE(LAMP) THEN GOTO L2011;\n         SPK=184;\n         IF LIMIT < 0 THEN GOTO L2011;\n         PROP(LAMP)=1;\n         CALL RSPEAK(39);\n         IF WZDARK THEN GOTO L2000;\n         GOTO L2012;\n\n /* LAMP OFF */\n\n L9080:  IF \u00acHERE(LAMP) THEN GOTO L2011;\n         PROP(LAMP)=0;\n         CALL RSPEAK(40);\n         IF DARK(0) THEN CALL RSPEAK(16);\n         GOTO L2012;\n\n /* WAVE.  NO EFFECT UNLESS WAVING ROD AT FISSURE. */\n\n L9090:  IF (\u00acTOTING(OBJ)) & (OBJ \u00ac= ROD |  \u00ac TOTING(ROD2))\n          THEN SPK=29;\n         IF OBJ \u00ac= ROD |  \u00ac AT(FISSUR) |  \u00ac TOTING(OBJ)\n          | CLOSNG THEN GOTO L2011;\n         PROP(FISSUR)=1-PROP(FISSUR);\n         CALL PSPEAK(FISSUR,2-PROP(FISSUR));\n         GOTO L2012;\n\n /*\n    ATTACK.  ASSUME TARGET IF UNAMBIGUOUS.  \"THROW\" ALSO\n    LINKS HERE.  ATTACKABLE OBJECTS FALL INTO TWO CATEGORIES:\n    ENEMIES (SNAKE, DWARF, ETC.) AND OTHERS (BIRD, CLAM).\n    AMBIGUOUS IF TWO ENEMIES, OR IF NO ENEMIES BUT TWO\n    OTHERS.\n */\n\n L9120:  DO I=1 TO 5;\n             IF DLOC(I) = LOC & DFLAG >= 2 THEN GOTO L9122;\n             END;\n         I=0;\n L9122:  IF OBJ \u00ac= 0 THEN GOTO L9124;\n         IF I \u00ac= 0 THEN OBJ=DWARF;\n         IF HERE(SNAKE) THEN OBJ=OBJ*100+SNAKE;\n         IF AT(DRAGON) & PROP(DRAGON) = 0 THEN OBJ=OBJ*100+DRAGON;\n         IF AT(TROLL) THEN OBJ=OBJ*100+TROLL;\n         IF HERE(BEAR) & PROP(BEAR) = 0 THEN OBJ=OBJ*100+BEAR;\n         IF OBJ > 100 THEN GOTO L8000;\n         IF OBJ \u00ac= 0 THEN GOTO L9124;\n\n /* CAN'T ATTACK BIRD BY THROWING AXE. */\n\n         IF HERE(BIRD) & VERB \u00ac= THROW THEN OBJ=BIRD;\n\n /* CLAM AND OYSTER BOTH TREATED AS CLAM FOR INTRANSITIVE\n    CASE; NO HARM DONE.  */\n\n         IF HERE(CLAM) | HERE(OYSTER) THEN OBJ=100*OBJ+CLAM;\n         IF OBJ > 100 THEN GOTO L8000;\n L9124:  IF OBJ \u00ac= BIRD THEN GOTO L9125;\n         SPK=137;\n         IF CLOSED THEN GOTO L2011;\n         CALL DSTROY(BIRD);\n         PROP(BIRD)=0;\n         IF PLACE(SNAKE) = PLAC(SNAKE) THEN TALLY2=TALLY2+1;\n         SPK=45;\n L9125:  IF OBJ = 0 THEN SPK=44;\n         IF OBJ = CLAM | OBJ = OYSTER THEN SPK=150;\n         IF OBJ = SNAKE THEN SPK=46;\n         IF OBJ = DWARF THEN SPK=49;\n         IF OBJ = DWARF & CLOSED THEN GOTO L19000;\n         IF OBJ = DRAGON THEN SPK=167;\n         IF OBJ = TROLL THEN SPK=157;\n         IF OBJ = BEAR THEN SPK=165+(PROP(BEAR)+1)/2;\n         IF OBJ \u00ac= DRAGON | PROP(DRAGON) \u00ac= 0 THEN GOTO L2011;\n /*\n    FUN STUFF FOR DRAGON.  IF HE INSISTS ON ATTACKING IT,\n    WIN!  SET PROP TO DEAD, MOVE DRAGON TO CENTRAL LOC (STILL\n    FIXED), MOVE RUG THERE (NOT FIXED), AND MOVE HIM THERE,\n    TOO.  THEN DO A NULL MOTION TO GET NEW DESCRIPTION.\n */\n         CALL RSPEAK(49);\n         VERB=0;\n         OBJ=0;\n         CALL GETIN(WD1,WD1X,WD2,WD2X);\n         IF WD1 \u00ac= 'Y' & WD1 \u00ac= 'YES' THEN GOTO L2608;\n         CALL PSPEAK(DRAGON,1);\n         PROP(DRAGON)=2;\n         PROP(RUG)=0;\n         K=(PLAC(DRAGON)+FIXD(DRAGON))/2;\n         CALL MOVE(DRAGON+100,-1);\n         CALL MOVE(RUG+100,0);\n         CALL MOVE(DRAGON,K);\n         CALL MOVE(RUG,K);\n         DO OBJ=1 TO 100;\n         IF PLACE(OBJ) = PLAC(DRAGON) | PLACE(OBJ) = FIXD(DRAGON)\n              THEN CALL MOVE(OBJ,K);\n             END;\n         LOC=K;\n         K=NULLX;\n         GOTO L8;\n\n /*\n    POUR.  IF NO OBJECT, OR OBJECT IS BOTTLE, ASSUME CONTENTS\n    OF BOTTLE.  SPECIAL TESTS FOR POURING WATER OR OIL ON\n    PLANT OR RUSTY DOOR.\n */\n\n L9130:  IF OBJ = BOTTLE | OBJ = 0 THEN OBJ=LIQ(0);\n         IF OBJ = 0 THEN GOTO L8000;\n         IF \u00acTOTING(OBJ) THEN GOTO L2011;\n         SPK=78;\n         IF OBJ \u00ac= OIL & OBJ \u00ac= WATER THEN GOTO L2011;\n         PROP(BOTTLE)=1;\n         PLACE(OBJ)=0;\n         SPK=77;\n         IF \u00ac(AT(PLANT) | AT(DOOR)) THEN GOTO L2011;\n\n         IF AT(DOOR) THEN GOTO L9132;\n         SPK=112;\n         IF OBJ \u00ac= WATER THEN GOTO L2011;\n         CALL PSPEAK(PLANT,PROP(PLANT)+1);\n         PROP(PLANT)=MOD(PROP(PLANT)+2,6);\n         PROP(PLANT2)=PROP(PLANT)/2;\n         K=NULLX;\n         GOTO L8;\n\n L9132:  PROP(DOOR)=0;\n         IF OBJ = OIL THEN PROP(DOOR)=1;\n         SPK=113+PROP(DOOR);\n         GOTO L2011;\n\n /*\n    EAT.  INTRANSITIVE:  ASSUME FOOD IF PRESENT, ELSE ASK\n    WHAT.  TRANSITIVE:  FOOD OK, SOME THINGS LOSE APPETITE,\n    REST ARE RIDICULOUS.\n */\n\n L8140:  IF \u00acHERE(FOOD) THEN GOTO L8000;\n L8142:  CALL DSTROY(FOOD);\n         SPK=72;\n         GOTO L2011;\n\n L9140:  IF OBJ = FOOD THEN GOTO L8142;\n         IF OBJ = BIRD | OBJ = SNAKE | OBJ = CLAM | OBJ = OYSTER\n          | OBJ = DWARF | OBJ = DRAGON | OBJ = TROLL\n          | OBJ = BEAR THEN SPK=71;\n         GOTO L2011;\n\n /*\n    DRINK.  IF NO OBJECT, ASSUME WATER AND LOOK FOR IT HERE.\n    IF WATER IS IN THE BOTTLE, DRINK THAT, ELSE MUST BE AT A\n    WATER LOC, SO DRINK STREAM.\n */\n\n L9150:  IF OBJ = 0 & LIQLOC(LOC) \u00ac= WATER & (LIQ(0) \u00ac= WATER\n          |  \u00ac HERE(BOTTLE)) THEN GOTO L8000;\n         IF OBJ \u00ac= 0 & OBJ \u00ac= WATER THEN SPK=110;\n         IF SPK = 110 | LIQ(0) \u00ac= WATER |  \u00ac HERE(BOTTLE)\n              THEN GOTO L2011;\n         PROP(BOTTLE)=1;\n         PLACE(WATER)=0;\n         SPK=74;\n         GOTO L2011;\n\n /* RUB.  YIELDS VARIOUS SNIDE REMARKS. */\n\n L9160:  IF OBJ \u00ac= LAMP THEN SPK=76;\n         GOTO L2011;\n\n /*\n    THROW.  SAME AS DISCARD UNLESS AXE.  THEN SAME AS ATTACK\n    EXCEPT IGNORE BIRD, AND IF DWARF IS PRESENT THEN ONE\n    MIGHT BE KILLED.  (ONLY WAY TO DO SO!) AXE ALSO SPECIAL\n    FOR DRAGON, BEAR, AND TROLL.  TREASURES SPECIAL FOR\n    TROLL.\n */\n\n L9170:  IF TOTING(ROD2) & OBJ = ROD &  \u00ac TOTING(ROD) THEN OBJ=ROD2;\n         IF \u00acTOTING(OBJ) THEN GOTO L2011;\n         IF OBJ >= 50 & OBJ <= MAXTRS & AT(TROLL) THEN GOTO L9178;\n         IF OBJ = FOOD & HERE(BEAR) THEN GOTO L9177;\n         IF OBJ \u00ac= AXE THEN GOTO L9020;\n         DO I=1 TO 5;\n\n /* NEEDN'T CHECK DFLAG IF AXE IS HERE. */\n\n             IF DLOC(I) = LOC THEN GOTO L9172;\n             END;\n         SPK=152;\n         IF AT(DRAGON) & PROP(DRAGON) = 0 THEN GOTO L9175;\n         SPK=158;\n         IF AT(TROLL) THEN GOTO L9175;\n         IF HERE(BEAR) & PROP(BEAR) = 0 THEN GOTO L9176;\n         OBJ=0;\n         GOTO L9120;\n\n L9172:  SPK=48;\n\n\n         IF RAN(3) = 0 THEN GO TO L9175;\n         DSEEN(I)='0'B;\n         DLOC(I)=0;\n         SPK=47;\n         DKILL=DKILL+1;\n         IF DKILL = 1 THEN SPK=149;\n L9175:  CALL RSPEAK(SPK);\n         CALL DROP(AXE,LOC);\n         K=NULLX;\n         GOTO L8;\n\n /* THIS'LL TEACH HIM TO THROW THE AXE AT THE BEAR! */\n\n L9176:  SPK=164;\n         CALL DROP(AXE,LOC);\n         FIXED(AXE)=-1;\n         PROP(AXE)=1;\n         CALL JUGGLE(BEAR);\n         GOTO L2011;\n\n /* BUT THROWING FOOD IS ANOTHER STORY. */\n\n L9177:  OBJ=BEAR;\n         GOTO L9210;\n\n L9178:  SPK=159;\n\n /* SNARF A TREASURE FOR THE TROLL. */\n\n         CALL DROP(OBJ,0);\n         CALL MOVE(TROLL,0);\n         CALL MOVE(TROLL+100,0);\n         CALL DROP(TROLL2,PLAC(TROLL));\n         CALL DROP(TROLL2+100,FIXD(TROLL));\n         CALL JUGGLE(CHASM);\n         GOTO L2011;\n\n /* QUIT.  INTRANSITIVE ONLY.  VERIFY INTENT AND EXIT IF\n    THAT'S WHAT HE WANTS.  */\n\n L8180:  GAVEUP=YES(22,54,54);\n L8185:  IF GAVEUP THEN GOTO L20000;\n         GOTO L2012;\n\n /* FIND.  MIGHT BE CARRYING IT, OR IT MIGHT BE HERE.  ELSE\n    GIVE CAVEAT.  */\n\n L9190:  IF AT(OBJ) | (LIQ(0) = OBJ & AT(BOTTLE))\n          | K = LIQLOC(LOC) THEN SPK=94;\n         DO I=1 TO 5;\n             IF DLOC(I) = LOC & DFLAG >= 2 & OBJ = DWARF THEN SPK=94;\n             END;\n         IF CLOSED THEN SPK=138;\n         IF TOTING(OBJ) THEN SPK=24;\n         GOTO L2011;\n\n /* INVENTORY.  IF OBJECT, TREAT SAME AS FIND.  ELSE REPORT\n    ON CURRENT BURDEN.  */\n\n L8200:  SPK=98;\n         DO I=1 TO 100;\n            IF I = BEAR |  \u00ac TOTING(I) THEN GOTO L8201;\n            IF SPK = 98 THEN CALL RSPEAK(99);\n            BLKLIN='0'B;\n            CALL PSPEAK(I,-1);\n            BLKLIN='1'B;\n            SPK=0;\n L8201:     END;\n         IF TOTING(BEAR) THEN SPK=141;\n         GOTO L2011;\n\n /*\n FEED.  IF BIRD, NO SEED.  SNAKE, DRAGON, TROLL:  QUIP.  IF\n    DWARF, MAKE HIM MAD.  BEAR, SPECIAL.\n */\n\n L9210:  IF OBJ \u00ac= BIRD THEN GOTO L9212;\n         SPK=100;\n         GOTO L2011;\n\n L9212:  IF OBJ \u00ac= SNAKE & OBJ \u00ac= DRAGON & OBJ \u00ac= TROLL THEN GOTO L9213;\n         SPK=102;\n         IF OBJ = DRAGON & PROP(DRAGON) \u00ac= 0 THEN SPK=110;\n         IF OBJ = TROLL THEN SPK=182;\n         IF OBJ \u00ac= SNAKE | CLOSED |  \u00ac HERE(BIRD) THEN GOTO L2011;\n         SPK=101;\n         CALL DSTROY(BIRD);\n         PROP(BIRD)=0;\n         TALLY2=TALLY2+1;\n         GOTO L2011;\n\n L9213:  IF OBJ \u00ac= DWARF THEN GOTO L9214;\n         IF \u00acHERE(FOOD) THEN GOTO L2011;\n         SPK=103;\n         DFLAG=DFLAG+1;\n         GOTO L2011;\n\n L9214:  IF OBJ \u00ac= BEAR THEN GOTO L9215;\n         IF PROP(BEAR) = 0 THEN SPK=102;\n         IF PROP(BEAR) = 3 THEN SPK=110;\n         IF \u00acHERE(FOOD) THEN GOTO L2011;\n         CALL DSTROY(FOOD);\n         PROP(BEAR)=1;\n         FIXED(AXE)=0;\n         PROP(AXE)=0;\n         SPK=168;\n         GOTO L2011;\n\n L9215:  SPK=14;\n         GOTO L2011;\n\n /* FILL.  BOTTLE MUST BE EMPTY, AND SOME LIQUID AVAILABLE.\n    (VASE IS NASTY.) */\n\n L9220:  IF OBJ = VASE THEN GOTO L9222;\n         IF OBJ \u00ac= 0 & OBJ \u00ac= BOTTLE THEN GOTO L2011;\n         IF OBJ = 0 &  \u00ac HERE(BOTTLE) THEN GOTO L8000;\n         SPK=107;\n         IF LIQLOC(LOC) = 0 THEN SPK=106;\n         IF LIQ(0) \u00ac= 0 THEN SPK=105;\n         IF SPK \u00ac= 107 THEN GOTO L2011;\n         PROP(BOTTLE)=MOD(COND(LOC),4)/2;\n         PROP(BOTTLE)=PROP(BOTTLE)*2;\n         K=LIQ(0);\n         IF TOTING(BOTTLE) THEN PLACE(K)=-1;\n         IF K = OIL THEN SPK=108;\n         GOTO L2011;\n\n L9222:  SPK=29;\n         IF LIQLOC(LOC) = 0 THEN SPK=144;\n         IF LIQLOC(LOC) = 0 |  \u00acTOTING(VASE) THEN GOTO L2011;\n         CALL RSPEAK(145);\n         PROP(VASE)=2;\n         FIXED(VASE)=-1;\n         GOTO L9024;\n\n /* BLAST.  NO EFFECT UNLESS YOU'VE GOT DYNAMITE, WHICH IS A\n    NEAT TRICK!  */\n\n L9230:  IF PROP(ROD2) < 0 |  \u00ac CLOSED THEN GOTO L2011;\n         BONUS=133;\n         IF LOC = 115 THEN BONUS=134;\n         IF HERE(ROD2) THEN BONUS=135;\n         CALL RSPEAK(BONUS);\n         GOTO L20000;\n\n /* SCORE.  GO TO SCORING SECTION, WHICH WILL RETURN TO 8241\n    IF SCORNG IS TRUE.  */\n\n L8240:  SCORNG='1'B;\n         GOTO L20000;\n\n L8241:  SCORNG='0'B;\n         CALL LINESKP;\n         PUT STRING (OUTSTR) EDIT\n              ('If you were to quit now, you would score ',\n             SCORE,' out of a possible',MXSCOR,'.') (A,F(4),A,F(4),A);\n         CALL LINEOUT;\n         GAVEUP=YES(143,54,54);\n         GOTO L8185;\n\n /*\n    FEE FIE FOE FOO (AND FUM).  ADVANCE TO NEXT STATE IF GIVEN\n    IN PROPER ORDER.  LOOK UP WD1 IN SECTION 3 OF VOCAB TO\n    DETERMINE WHICH WORD WE'VE GOT.  LAST WORD ZIPS THE EGGS\n    BACK TO THE GIANT ROOM (UNLESS ALREADY THERE).\n */\n\n L8250:  K=VOCAB(WD1,3);\n         SPK=42;\n         IF FOOBAR = 1-K THEN GOTO L8252;\n         IF FOOBAR \u00ac= 0 THEN SPK=151;\n         GOTO L2011;\n\n L8252:  FOOBAR=K;\n         IF K \u00ac= 4 THEN GOTO L2009;\n         FOOBAR=0;\n         IF PLACE(EGGS) = PLAC(EGGS)\n          | (TOTING(EGGS) & LOC = PLAC(EGGS)) THEN GOTO L2011;\n\n /* BRING BACK TROLL IF WE STEAL THE EGGS BACK FROM HIM\n    BEFORE CROSSING.  */\n\n         IF PLACE(EGGS) = 0 & PLACE(TROLL) = 0 & PROP(TROLL) = 0\n          THEN PROP(TROLL)=1;\n         K=2;\n         IF HERE(EGGS) THEN K=1;\n         IF LOC = PLAC(EGGS) THEN K=0;\n         CALL MOVE(EGGS,PLAC(EGGS));\n         CALL PSPEAK(EGGS,K);\n         GOTO L2012;\n\n /* BRIEF.  INTRANSITIVE ONLY.  SUPPRESS LONG DESCRIPTIONS\n    AFTER FIRST TIME.  */\n\n L8260:  SPK=156;\n         ABBNUM=10000;\n         DETAIL=3;\n         GOTO L2011;\n\n /* READ.  MAGAZINES IN DWARVISH, MESSAGE WE'VE SEEN, AND .\n    .  .  OYSTER?  */\n\n L8270:  IF HERE(MAGZIN) THEN OBJ=MAGZIN;\n         IF HERE(TABLET) THEN OBJ=OBJ*100+TABLET;\n         IF HERE(MESSAG) THEN OBJ=OBJ*100+MESSAG;\n         IF CLOSED & TOTING(OYSTER) THEN OBJ=OYSTER;\n         IF OBJ > 100 | OBJ = 0 | DARK(0) THEN GOTO L8000;\n\n L9270:  IF DARK(0) THEN GOTO L5190;\n         IF OBJ = MAGZIN THEN SPK=190;\n         IF OBJ = TABLET THEN SPK=196;\n         IF OBJ = MESSAG THEN SPK=191;\n         IF OBJ = OYSTER & HINTED(2) & TOTING(OYSTER) THEN SPK=194;\n         IF OBJ \u00ac= OYSTER | HINTED(2) |  \u00acTOTING(OYSTER)\n          |  \u00acCLOSED THEN GOTO L2011;\n         HINTED(2)=YES(192,193,54);\n         GOTO L2012;\n\n /* BREAK.  ONLY WORKS FOR MIRROR IN REPOSITORY AND, OF\n    COURSE, THE VASE.  */\n\n L9280:  IF OBJ = MIRROR THEN SPK=148;\n         IF OBJ = VASE & PROP(VASE) = 0 THEN GOTO L9282;\n         IF OBJ \u00ac= MIRROR |  \u00acCLOSED THEN GOTO L2011;\n         CALL RSPEAK(197);\n         GOTO L19000;\n\n L9282:  SPK=198;\n         IF TOTING(VASE) THEN CALL DROP(VASE,LOC);\n         PROP(VASE)=2;\n         FIXED(VASE)=-1;\n         GOTO L2011;\n\n /* WAKE.  ONLY USE IS TO DISTURB THE DWARVES. */\n\n L9290:  IF OBJ \u00ac= DWARF |  \u00acCLOSED THEN GOTO L2011;\n         CALL RSPEAK(199);\n         GOTO L19000;\n\n /*\n    SUSPEND.  OFFER TO EXIT LEAVING THINGS RESTARTABLE, BUT\n    REQUIRING A DELAY BEFORE RESTARTING (SO CAN'T SAVE THE\n    WORLD BEFORE TRYING SOMETHING RISKY).  UPON RESTARTING,\n    SETUP=-1 CAUSES RETURN TO 8305 TO PICK UP AGAIN.\n */\n\n L8300:  PUT STRING (OUTSTR) EDIT\n               ('Can''t suspend on this machine') (A);\n         CALL LINEOUT;\n         GO TO L2012;\n\n /* HOURS.  REPORT CURRENT NON-PRIME-TIME HOURS. */\n\n L8310:  PUT STRING (OUTSTR) EDIT ('Open all day!') (A);\n         CALL LINEOUT;\n         GOTO L2012;\n\n /* LOG.  TOGGLE LOGGIN EITHER ON OR OFF */\n\n SETLOG: LOGON = \u00ac LOGON;\n         IF LOGON THEN PUT STRING (OUTSTR) EDIT ('Log on.') (A);\n                  ELSE PUT STRING (OUTSTR) EDIT ('Log off.') (A);\n         CALL LINEOUT;\n         CALL LINESKP;\n         GO TO L2012;\n\n1/*\n    HINTS\n\n    COME HERE IF HE'S BEEN LONG ENOUGH AT REQUIRED LOC(S) FOR\n    SOME UNUSED HINT.  HINT NUMBER IS IN VARIABLE \"HINT\".\n    BRANCH TO QUICK TEST FOR ADDITIONAL CONDITIONS, THEN COME\n    BACK TO DO NEAT STUFF.  GOTO 40010 IF CONDITIONS ARE MET\n    AND WE WANT TO OFFER THE HINT.  GOTO 40020 TO CLEAR\n    HINTLC BACK TO ZERO, 40030 TO TAKE NO ACTION YET.\n */\n\n L40000: SELECT (HINT-4);\n             WHEN (00) GO TO L40400;        /* CAVE */\n             WHEN (01) GO TO L40500;        /* BIRD */\n             WHEN (02) GO TO L40600;        /* SNAKE */\n             WHEN (03) GO TO L40700;        /* MAZE */\n             WHEN (04) GO TO L40800;        /* DARK */\n             WHEN (05) GO TO L40900;        /* WITT */\n             END;\n         CALL BUG(27);\n\n L40010: HINTLC(HINT)=0;\n         IF \u00acYES(HINTS(HINT,3),0,54) THEN GOTO L2602;\n         CALL LINESKP;\n         PUT STRING (OUTSTR) EDIT\n           ('I am prepared to give you a hint, but it will cost you',\n              HINTS(HINT,2),' points.') (A,F(2),A);\n         CALL LINEOUT;\n         HINTED(HINT)=YES(175,HINTS(HINT,4),54);\n         IF HINTED(HINT) & LIMIT > 30\n                THEN LIMIT=LIMIT+30*HINTS(HINT,2);\n L40020: HINTLC(HINT)=0;\n L40030: GOTO L2602;\n\n /* NOW FOR THE QUICK TESTS.  SEE DATABASE DESCRIPTION FOR\n    ONE-LINE NOTES.  */\n\n L40400: IF PROP(GRATE) = 0 &  \u00ac HERE(KEYS) THEN GOTO L40010;\n         GOTO L40020;\n\n L40500: IF HERE(BIRD) & TOTING(ROD) & OBJ = BIRD THEN GOTO L40010;\n         GOTO L40030;\n\n L40600: IF HERE(SNAKE) &  \u00ac HERE(BIRD) THEN GOTO L40010;\n         GOTO L40020;\n\n L40700: IF ATLOC(LOC) = 0 & ATLOC(OLDLOC) = 0\n          & ATLOC(OLDLC2) = 0 & HOLDNG > 1 THEN GOTO L40010;\n         GOTO L40020;\n\n L40800: IF PROP(EMRALD) \u00ac= -1 & PROP(PYRAM) = -1 THEN GOTO L40010;\n         GOTO L40020;\n\n L40900: GOTO L40010;\n\n1/*\n    CAVE CLOSING AND SCORING\n\n\n    THESE SECTIONS HANDLE THE CLOSING OF THE CAVE.  THE CAVE\n    CLOSES \"CLOCK1\" TURNS AFTER THE LAST TREASURE HAS BEEN\n    LOCATED (INCLUDING THE PIRATE'S CHEST, WHICH MAY OF\n    COURSE NEVER SHOW UP).  NOTE THAT THE TREASURES NEED NOT\n    HAVE BEEN TAKEN YET, JUST LOCATED.  HENCE CLOCK1 MUST BE\n    LARGE ENOUGH TO GET OUT OF THE CAVE (IT ONLY TICKS WHILE\n    INSIDE THE CAVE).  WHEN IT HITS ZERO, WE BRANCH TO 10000\n    TO START CLOSING THE CAVE, AND THEN SIT BACK AND WAIT FOR\n    HIM TO TRY TO GET OUT.  IF HE DOESN'T WITHIN CLOCK2\n    TURNS, WE CLOSE THE CAVE; IF HE DOES TRY, WE ASSUME HE\n    PANICS, AND GIVE HIM A FEW ADDITIONAL TURNS TO GET\n    FRANTIC BEFORE WE CLOSE.  WHEN CLOCK2 HITS ZERO, WE\n    BRANCH TO 11000 TO TRANSPORT HIM INTO THE FINAL PUZZLE.\n    NOTE THAT THE PUZZLE DEPENDS UPON ALL SORTS OF RANDOM\n    THINGS.  FOR INSTANCE, THERE MUST BE NO WATER OR OIL,\n    SINCE THERE ARE BEANSTALKS WHICH WE DON'T WANT TO BE ABLE\n    TO WATER, SINCE THE CODE CAN'T HANDLE IT.  ALSO, WE CAN\n    HAVE NO KEYS, SINCE THERE IS A GRATE (HAVING MOVED THE\n    FIXED OBJECT!) THERE SEPARATING HIM FROM ALL THE\n    TREASURES.  MOST OF THESE PROBLEMS ARISE FROM THE USE OF\n    NEGATIVE PROP NUMBERS TO SUPPRESS THE OBJECT DESCRIPTIONS\n    UNTIL HE'S ACTUALLY MOVED THE OBJECTS.\n\n    WHEN THE FIRST WARNING COMES, WE LOCK THE GRATE, DESTROY\n    THE BRIDGE, KILL ALL THE DWARVES (AND THE PIRATE), REMOVE\n    THE TROLL AND BEAR (UNLESS DEAD), AND SET \"CLOSNG\" TO\n    TRUE.  LEAVE THE DRAGON; TOO MUCH TROUBLE TO MOVE IT.\n    FROM NOW UNTIL CLOCK2 RUNS OUT, HE CANNOT UNLOCK THE\n    GRATE, MOVE TO ANY LOCATION OUTSIDE THE CAVE (LOC<9), OR\n    CREATE THE BRIDGE.  NOR CAN HE BE RESURRECTED IF HE DIES.\n    NOTE THAT THE SNAKE IS ALREADY GONE, SINCE HE GOT TO THE\n    TREASURE ACCESSIBLE ONLY VIA THE HALL OF THE MT.  KING.\n    ALSO, HE'S BEEN IN GIANT ROOM (TO GET EGGS), SO WE CAN\n    REFER TO IT.  ALSO ALSO, HE'S GOTTEN THE PEARL, SO WE\n    KNOW THE BIVALVE IS AN OYSTER.  *AND*, THE DWARVES MUST\n    HAVE BEEN ACTIVATED, SINCE WE'VE FOUND CHEST.\n */\n\n L10000: PROP(GRATE)=0;\n         PROP(FISSUR)=0;\n         DO I=1 TO 6;\n             DSEEN(I)='0'B;\n             END;\n         CALL MOVE(TROLL,0);\n         CALL MOVE(TROLL+100,0);\n         CALL MOVE(TROLL2,PLAC(TROLL));\n         CALL MOVE(TROLL2+100,FIXD(TROLL));\n         CALL JUGGLE(CHASM);\n         IF PROP(BEAR) \u00ac= 3 THEN CALL DSTROY(BEAR);\n         PROP(CHAIN)=0;\n         FIXED(CHAIN)=0;\n         PROP(AXE)=0;\n         FIXED(AXE)=0;\n         CALL RSPEAK(129);\n         CLOCK1=-1;\n         CLOSNG='1'B;\n         GOTO L19999;\n\n /*\n    ONCE HE'S PANICKED, AND CLOCK2 HAS RUN OUT, WE COME HERE\n    TO SET UP THE STORAGE ROOM.  THE ROOM HAS TWO LOCS,\n    HARDWIRED AS 115 (NE) AND 116 (SW).  AT THE NE END, WE\n    PLACE EMPTY BOTTLES, A NURSERY OF PLANTS, A BED OF\n    OYSTERS, A PILE OF LAMPS, RODS WITH STARS, SLEEPING\n    DWARVES, AND HIM.  AND THE SW END WE PLACE GRATE OVER\n    TREASURES, SNAKE PIT, COVEY OF CAGED BIRDS, MORE RODS,\n    AND PILLOWS.  A MIRROR STRETCHES ACROSS ONE WALL.  MANY\n    OF THE OBJECTS COME FROM KNOWN LOCATIONS AND/OR STATES\n    (E.G.  THE SNAKE IS KNOWN TO HAVE BEEN DESTROYED AND\n    NEEDN'T BE CARRIED AWAY FROM ITS OLD \"PLACE\"), MAKING THE\n    VARIOUS OBJECTS BE HANDLED DIFFERENTLY.  WE ALSO DROP ALL\n    OTHER OBJECTS HE MIGHT BE CARRYING (LEST HE HAVE SOME\n    WHICH COULD CAUSE TROUBLE, SUCH AS THE KEYS).  WE\n    DESCRIBE THE FLASH OF LIGHT AND TRUNDLE BACK.\n */\n\n L11000: PROP(BOTTLE)=PUT(BOTTLE,115,1);\n         PROP(PLANT)=PUT(PLANT,115,0);\n         PROP(OYSTER)=PUT(OYSTER,115,0);\n         PROP(LAMP)=PUT(LAMP,115,0);\n         PROP(ROD)=PUT(ROD,115,0);\n         PROP(DWARF)=PUT(DWARF,115,0);\n         LOC=115;\n         OLDLOC=115;\n         NEWLOC=115;\n\n /* LEAVE THE GRATE WITH NORMAL (NON-NEGATIVE PROPERTY). */\n\n         FOO=PUT(GRATE,116,0);\n         PROP(SNAKE)=PUT(SNAKE,116,1);\n         PROP(BIRD)=PUT(BIRD,116,1);\n         PROP(CAGE)=PUT(CAGE,116,0);\n         PROP(ROD2)=PUT(ROD2,116,0);\n         PROP(PILLOW)=PUT(PILLOW,116,0);\n\n         PROP(MIRROR)=PUT(MIRROR,115,0);\n         FIXED(MIRROR)=116;\n\n         DO I=1 TO 100;\n             IF TOTING(I) THEN CALL DSTROY(I);\n             END;\n\n         CALL RSPEAK(132);\n         CLOSED='1'B;\n         GOTO L2;\n\n /*\n    ANOTHER WAY WE CAN FORCE AN END TO THINGS IS BY HAVING\n    THE LAMP GIVE OUT.  WHEN IT GETS CLOSE, WE COME HERE TO\n    WARN HIM.  WE GO TO 12000 IF THE LAMP AND FRESH BATTERIES\n    ARE HERE, IN WHICH CASE WE REPLACE THE BATTERIES AND\n    CONTINUE.  12200 IS FOR OTHER CASES OF LAMP DYING.  12400\n    IS WHEN IT GOES OUT, AND 12600 IS IF HE'S WANDERED\n    OUTSIDE AND THE LAMP IS USED UP, IN WHICH CASE WE FORCE\n    HIM TO GIVE UP.\n */\n\n L12000: CALL RSPEAK(188);\n         PROP(BATTER)=1;\n         IF TOTING(BATTER) THEN CALL DROP(BATTER,LOC);\n         LIMIT=LIMIT+2500;\n         LMWARN='0'B;\n         GOTO L19999;\n\n L12200: IF LMWARN |  \u00acHERE(LAMP) THEN GOTO L19999;\n         LMWARN='1'B;\n         SPK=187;\n         IF PLACE(BATTER) = 0 THEN SPK=183;\n         IF PROP(BATTER) = 1 THEN SPK=189;\n         CALL RSPEAK(SPK);\n         GOTO L19999;\n\n L12400: LIMIT=-1;\n         PROP(LAMP)=0;\n         IF HERE(LAMP) THEN CALL RSPEAK(184);\n         GOTO L19999;\n\n L12600: CALL RSPEAK(185);\n         GAVEUP='1'B;\n         GOTO L20000;\n\n /* OH DEAR, HE'S DISTURBED THE DWARVES. */\n\n L19000: CALL RSPEAK(136);\n\n /*\n    EXIT CODE.  WILL EVENTUALLY INCLUDE SCORING.  FOR NOW, HOWEVER, ...\n\n    THE PRESENT SCORING ALGORITHM IS AS FOLLOWS:\n       OBJECTIVE:          POINTS:        PRESENT TOTAL POSSIBLE:\n    GETTING WELL INTO CAVE   25                    25\n    EACH TREASURE < CHEST    12                    60\n    TREASURE CHEST ITSELF    14                    14\n    EACH TREASURE > CHEST    16                   144\n    SURVIVING             (MAX-NUM)*10             30\n    NOT QUITTING              4                     4\n    REACHING \"CLOSNG\"        25                    25\n    \"CLOSED\": QUIT/KILLED    10\n              KLUTZED        25\n              WRONG WAY      30\n              SUCCESS        45                    45\n    CAME TO WITT'S END        1                     1\n    ROUND OUT THE TOTAL       2                     2\n                                         TOTAL:   350\n    (POINTS CAN ALSO BE DEDUCTED FOR USING HINTS.)\n */\n\n L20000: SCORE=0;\n         MXSCOR=0;\n\n /*\n    FIRST TALLY UP THE TREASURES.  MUST BE IN BUILDING AND\n    NOT BROKEN.  GIVE THE POOR GUY 2 POINTS JUST FOR FINDING\n    EACH TREASURE.\n */\n\n         DO I=50 TO MAXTRS;\n             IF PTEXT(I) \u00ac= 0 THEN DO;\n                 K=12;\n                 IF I = CHEST THEN K=14;\n                 IF I > CHEST THEN K=16;\n                 IF PROP(I) >= 0 THEN SCORE=SCORE+2;\n                 IF PLACE(I) = 3 & PROP(I) = 0 THEN SCORE=SCORE+K-2;\n                 MXSCOR=MXSCOR+K;\n                 END;\n             END;\n\n /*\n    NOW LOOK AT HOW HE FINISHED AND HOW FAR HE GOT.  MAXDIE\n    AND NUMDIE TELL US HOW WELL HE SURVIVED.  GAVEUP SAYS\n    WHETHER HE EXITED VIA QUIT.  DFLAG WILL TELL US IF HE\n    EVER GOT SUITABLY DEEP INTO THE CAVE.  CLOSNG STILL\n    INDICATES WHETHER HE REACHED THE ENDGAME.  AND IF HE GOT\n    AS FAR AS \"CAVE CLOSED\" (INDICATED BY \"CLOSED\"), THEN\n    BONUS IS ZERO FOR MUNDANE EXITS OR 133, 134, 135 IF HE\n    BLEW IT (SO TO SPEAK).\n */\n\n         SCORE=SCORE+(MAXDIE-NUMDIE)*10;\n         MXSCOR=MXSCOR+MAXDIE*10;\n         IF \u00ac(SCORNG | GAVEUP) THEN SCORE=SCORE+4;\n         MXSCOR=MXSCOR+4;\n         IF DFLAG \u00ac= 0 THEN SCORE=SCORE+25;\n         MXSCOR=MXSCOR+25;\n         IF CLOSNG THEN SCORE=SCORE+25;\n         MXSCOR=MXSCOR+25;\n         IF \u00acCLOSED THEN GOTO L20020;\n         IF BONUS = 0 THEN SCORE=SCORE+10;\n         IF BONUS = 135 THEN SCORE=SCORE+25;\n         IF BONUS = 134 THEN SCORE=SCORE+30;\n         IF BONUS = 133 THEN SCORE=SCORE+45;\n L20020: MXSCOR=MXSCOR+45;\n\n /* DID HE COME TO WITT'S END AS HE SHOULD? */\n\n         IF PLACE(MAGZIN) = 108 THEN SCORE=SCORE+1;\n         MXSCOR=MXSCOR+1;\n\n /* ROUND IT OFF. */\n\n         SCORE=SCORE+2;\n         MXSCOR=MXSCOR+2;\n\n /* DEDUCT POINTS FOR HINTS.  HINTS < 4 ARE SPECIAL; SEE\n    DATABASE DESCRIPTION.  */\n\n         DO I=1 TO HNTMAX;\n             IF HINTED(I) THEN SCORE=SCORE-HINTS(I,2);\n             END;\n\n /* RETURN TO SCORE COMMAND IF THAT'S WHERE WE CAME FROM. */\n\n         IF SCORNG THEN GOTO L8241;\n\n /* THAT SHOULD BE GOOD ENOUGH.  LET'S TELL HIM ALL ABOUT IT. */\n\n         CALL LINESKP;\n         CALL LINESKP;\n         CALL LINESKP;\n         PUT STRING (OUTSTR) EDIT\n             ('You scored',SCORE,' out of a possible',\n             MXSCOR,' using',TURNS,' turns.')\n            (A,F(4),A,F(4),A,F(4),A);\n         CALL LINEOUT;\n\n         DO I=1 TO CLSSES;\n             IF CVAL(I) >= SCORE THEN GOTO L20210;\n             END;\n         CALL LINESKP;\n         PUT STRING (OUTSTR) EDIT ('You just went of my scale!!') (A);\n         CALL LINEOUT;\n         GOTO L25000;\n\n L20210: CALL SPEAK(CTEXT(I));\n         IF I = CLSSES-1 THEN GOTO L20220;\n         K=CVAL(I)+1-SCORE;\n         KKWORD='s.';\n         IF K = 1 THEN KKWORD='. ';\n         CALL LINESKP;\n         PUT STRING (OUTSTR) EDIT\n             ('To achieve the next higher rating, you need',\n                K,' more point',KKWORD) (A,F(3),A,A(2));\n         CALL LINEOUT;\n         GOTO L25000;\n\n L20220: CALL LINESKP;\n         PUT STRING (OUTSTR) EDIT\n          ('To achieve the next higher rating would be a neat trick!')\n                (A);\n         CALL LINEOUT;\n         CALL LINESKP;\n         PUT STRING (OUTSTR) EDIT ('Congratulations!!') (A);\n         CALL LINEOUT;\n\n L25000: CALL LINESKP;\n         STOP;\n1/*  SUBROUTINES/FUNCTIONS\n\n\n    TOTING(OBJ)  = TRUE IF THE OBJ IS BEING CARRIED\n    HERE(OBJ)    = TRUE IF THE OBJ IS AT \"LOC\" (OR IS BEING CARRIED)\n    AT(OBJ)      = TRUE IF ON EITHER SIDE OF TWO-PLACED OBJECT\n    LIQ(DUMMY)   = OBJECT NUMBER OF LIQUID IN BOTTLE\n    LIQLOC(LOC)  = OBJECT NUMBER OF LIQUID (IF ANY) AT LOC\n    BITSET(L,N)  = TRUE IF COND(L) HAS BIT N SET (BIT 0 IS UNITS BIT)\n    FORCED(LOC)  = TRUE IF LOC MOVES WITHOUT ASKING FOR INPUT (COND=2)\n    DARK(DUMMY)  = TRUE IF LOCATION \"LOC\" IS DARK\n    PCT(N)       = TRUE N% OF THE TIME (N INTEGER FROM 0 TO 100)\n\n */\n\n TOTING: PROC (OBJ) RETURNS (BIT(1));\n\n         DCL OBJ FIXED BIN(31);\n\n         RETURN(PLACE(OBJ) = -1);\n         END;\n\n HERE: PROC (OBJ) RETURNS (BIT(1));\n\n         DCL OBJ FIXED BIN(31);\n\n         RETURN(PLACE(OBJ) = LOC | TOTING(OBJ));\n         END;\n\n AT: PROC (OBJ) RETURNS (BIT(1));\n\n         DCL OBJ FIXED BIN (31);\n\n         RETURN(PLACE(OBJ) = LOC | FIXED (OBJ) = LOC);\n         END;\n\n LIQ2: PROC (PBOTL) RETURNS (FIXED BIN(31));\n\n         DCL PBOTL FIXED BIN(31);\n         DCL LIQ2TEMP FIXED BIN(31);\n\n         LIQ2TEMP=PBOTL/2;\n         RETURN((1-PBOTL)*WATER+(LIQ2TEMP)*(WATER+OIL));\n         END;\n\n LIQ: PROC (DUMMY) RETURNS (FIXED BIN(31));\n\n         DCL DUMMY FIXED BIN(31);\n\n         RETURN(LIQ2(MAX(PROP(BOTTLE),-1-PROP(BOTTLE))));\n         END;\n\n LIQLOC: PROC (LOC) RETURNS (FIXED BIN(31));\n\n         DCL LOC FIXED BIN(31);\n         DCL (LIQTEMP1,LIQTEMP2) FIXED BIN(31);\n\n         LIQTEMP1=COND(LOC)/2;\n         LIQTEMP1=LIQTEMP1*2;\n         LIQTEMP2=COND(LOC)/4;\n         RETURN(LIQ2((MOD(LIQTEMP1,8)-5)*MOD(LIQTEMP2,2)+1));\n         END;\n\n BITSET: PROC (L,N) RETURNS (BIT(1));\n\n         DCL (L,N) FIXED BIN(31);\n         DCL BITTEMP FIXED BIN(31) STATIC;\n\n         BITTEMP=COND(L)/2**N;\n         RETURN(MOD(BITTEMP,2) \u00ac= 0);\n         END;\n\n FORCED: PROC (LOC) RETURNS (BIT(1));\n\n         DCL LOC FIXED BIN(31);\n\n         RETURN(COND(LOC) = 2);\n         END;\n\n DARK: PROC (DUMMY) RETURNS (BIT(1));\n\n         DCL DUMMY FIXED BIN(31);\n\n         RETURN(MOD(COND(LOC),2) = 0 &\n              (PROP(LAMP) = 0 | \u00ac HERE(LAMP)));\n         END;\n\n PCT: PROC (N) RETURNS (BIT(1));\n\n         DCL N FIXED BIN(31);\n\n         RETURN(RAN(100) < N);\n         END;\n1/* I/O ROUTINES (SPEAK, PSPEAK, RSPEAK, GETIN, YES, A5TOA1) */\n\n\n SPEAK: PROC (N);\n\n         DCL N FIXED BIN(31);\n         DCL (I,K,L) FIXED BIN (31);\n\n /*\n    PRINT THE MESSAGE WHICH STARTS AT LINES(N).  PRECEDE IT\n    WITH A BLANK LINE UNLESS BLKLIN IS FALSE.\n */\n\n         IF N = 0 THEN RETURN;\n         IF LINES(N+1) = '>$<' THEN RETURN;\n         IF (BLKLIN) THEN CALL LINESKP;\n         K=N;\n L1:     L=ABS(LINES(K))-1;\n         K=K+1;\n         PUT STRING (OUTSTR) EDIT ((LINES(I) DO I=K TO L)) (14 A(5));\n         CALL LINEOUT;\n         K=L+1;\n         IF LINES(K) >= 0 THEN GOTO L1;\n         RETURN;\n         END;\n\n\n\n PSPEAK:PROC (MSG,SKIP);\n\n         DCL (MSG,SKIP) FIXED BIN(31);\n         DCL (I,M) FIXED BIN (31);\n\n /*\n    FIND THE SKIP+1ST MESSAGE FROM MSG AND PRINT IT.  MSG\n    SHOULD BE THE INDEX OF THE INVENTORY MESSAGE FOR OBJECT.\n    (INVEN+N+1 MESSAGE IS PROP=N MESSAGE).\n */\n\n         M=PTEXT(MSG);\n         IF SKIP < 0 THEN GOTO L9;\n         DO I=0 TO SKIP;\n L1:         M=ABS(LINES(M));\n             IF LINES(M) >= 0 THEN GOTO L1;\n             END;\n L9:     CALL SPEAK(M);\n         RETURN;\n         END;\n\n\n\n RSPEAK: PROC (I);\n\n         DCL I FIXED BIN(31);\n\n /* PRINT THE I-TH \"RANDOM\" MESSAGE (SECTION 6 OF DATABASE). */\n\n         IF I \u00ac= 0 THEN CALL SPEAK(RTEXT(I));\n         RETURN;\n         END;\n\n GETIN: PROC (WORD1,WORD1X,WORD2,WORD2X);\n\n /*\n    GET A COMMAND FROM THE ADVENTURER.  SNARF OUT THE FIRST\n    WORD, PAD IT WITH BLANKS, AND RETURN IT IN WORD1.  CHARS\n    6 THRU 10 ARE RETURNED IN WORD1X, IN CASE WE NEED TO\n    PRINT OUT THE WHOLE WORD IN AN ERROR MESSAGE.  ANY NUMBER\n    OF BLANKS MAY FOLLOW THE WORD.  IF A SECOND WORD APPEARS,\n    IT IS RETURNED IN WORD2 (CHARS 6 THRU 10 IN WORD2X), ELSE\n    WORD2 IS SET TO ZERO.\n */\n\n         DCL (WORD1,WORD1X,WORD2,WORD2X) CHAR(5);\n\n         WORD1,WORD1X,WORD2,WORD2X='     ';\n         IF LOGON THEN PUT SKIP;\n         WORDSTRT=0;\n         DO WHILE (WORDSTRT = 0);\n             IF BLKLIN THEN CALL LINESKP;\n             CALL TREAD(INSTR,0,INSTR,INLEN,CCODE);\n             IF CCODE = 1 THEN DO;\n                 OUTSTR=SUBSTR(INSTR,1,INLEN);\n                 WORDSTRT=VERIFY(OUTSTR,' ');\n                 END;\n             ELSE DO;\n                 IF BLKLIN THEN CALL LINESKP;\n                 PUT STRING (OUTSTR) EDIT\n                    ('Terminal error..reenter.') (A);\n                 CALL LINEOUT;\n                 END;\n             END;\n         IF LOGON THEN PUT SKIP EDIT (OUTSTR) (A);\n         OUTSTR=SUBSTR(OUTSTR,WORDSTRT);\n         WORDEND=INDEX(OUTSTR,' ')-1;\n         IF WORDEND=-1 THEN WORDEND=LENGTH(OUTSTR);\n         WORDSIZE=MIN(WORDEND,5);\n         WORD1=SUBSTR(OUTSTR,1,WORDSIZE);\n         IF WORDEND > 5 THEN DO;\n             WORDSIZE=MIN(WORDEND-5,5);\n             WORD1X=SUBSTR(OUTSTR,6,WORDSIZE);\n             END;\n         IF WORDEND=LENGTH(OUTSTR) THEN RETURN;\n         OUTSTR=SUBSTR(OUTSTR,WORDEND+1);\n         WORDSTRT=VERIFY(OUTSTR,' ');\n         IF WORDSTRT = 0 THEN RETURN;\n         OUTSTR=SUBSTR(OUTSTR,WORDSTRT);\n         WORDEND=INDEX(OUTSTR,' ')-1;\n         IF WORDEND = -1 THEN WORDEND=LENGTH(OUTSTR);\n         WORDSIZE=MIN(WORDEND,5);\n         WORD2=SUBSTR(OUTSTR,1,WORDSIZE);\n         IF WORDEND > 5 THEN DO;\n             WORDSIZE=MIN(WORDEND-5,5);\n             WORD2X=SUBSTR(OUTSTR,6,WORDSIZE);\n             END;\n         RETURN;\n         END;\n\n\n\n YES: PROC (X,Y,Z) RETURNS (BIT(1));\n\n         DCL (X,Y,Z) FIXED BIN(31);\n\n /*\n    PRINT MESSAGE X, WAIT FOR YES/NO ANSWER.  IF YES, PRINT Y\n    AND LEAVE YEA TRUE; IF NO, PRINT Z AND LEAVE YEA FALSE.\n */\n\n\n L1:     IF X \u00ac= 0 THEN CALL RSPEAK(X);\n         CALL GETIN(REPLY,JUNK1,JUNK2,JUNK3);\n         IF REPLY = 'YES' | REPLY = 'Y' THEN GOTO L10;\n         IF REPLY = 'NO' | REPLY = 'N' THEN GOTO L20;\n         CALL LINESKP;\n         PUT STRING (OUTSTR) EDIT ('Please answer the question!') (A);\n         CALL LINEOUT;\n         GOTO L1;\n L10:    IF Y \u00ac= 0 THEN CALL RSPEAK(Y);\n         RETURN('1'B);\n L20:    IF Z \u00ac=0 THEN CALL RSPEAK(Z);\n         RETURN('0'B);\n         END;\n\n\n\n A5TOA1: PROC (A,B,CHARS,LENG);\n\n /*\n   A AND B CONTAN A 1-10 CHARACTER WORD IN A5 FORMAT.\n   THEY ARE CONCATENATED AND MOVED INTO A CHAR(1)\n   ARRAY UNTIL A BLANK IS ENCOUNTERED.  THE TOTAL\n   LENGTH IS RETURNED IN LENG.\n\n */\n\n         DCL (A,B) CHAR(5);\n         DCL LENG FIXED BIN(31);\n         DCL CHARS(10) CHAR(1);\n\n         DCL WORDS(2) CHAR(5);\n         DCL XLATETO CHAR(26) INIT ('abcdefghijklmnopqrstuvwxyz');\n         DCL XLATEFR CHAR(26) INIT ('ABCDEFGHIJKLMNOPQRSTUVWXYZ');\n\n         WORDS(1)=TRANSLATE(A,XLATETO,XLATEFR);\n         WORDS(2)=TRANSLATE(B,XLATETO,XLATEFR);\n         LENG=0;\n         DO WORD=1 TO 2;\n             DO CH=1 TO 5;\n                 CHARS(LENG+1)=SUBSTR(WORDS(WORD),CH,1);\n                 IF CHARS(LENG+1) = ' ' THEN RETURN;\n                 LENG=LENG+1;\n                 END;\n             END;\n         RETURN;\n         END;\n1/*\n    DATA STRUCTURE ROUTINES (VOCAB, DSTROY, JUGGLE, MOVE,\n    PUT, CARRY, DROP)\n */\n\n VOCAB: PROC (ID,INIT) RETURNS(FIXED BIN(31));\n\n         DCL ID CHAR(5);\n         DCL INIT FIXED BIN(31);\n         DCL I    FIXED BIN(31);\n\n /*\n    LOOK UP ID IN THE VOCABULARY (ATAB) AND RETURN ITS\n    \"DEFINITION\" (KTAB), OR -1 IF NOT FOUND.  IF INIT IS\n    POSITIVE, THIS IS AN INITIALISATION CALL SETTING UP A\n    KEYWORD VARIABLE, AND NOT FINDING IT CONSTITUTES A BUG.\n    IT ALSO MEANS THAT ONLY KTAB VALUES WHICH TAKEN OVER 1000\n    EQUAL INIT MAY BE CONSIDERED.  (THUS \"STEPS\", WHICH IS A\n    MOTION VERB AS WELL AS AN OBJECT, MAY BE LOCATED AS AN\n    OBJECT.)  AND IT ALSO MEANS THE KTAB VALUE IS TAKEN MOD\n    1000.\n */\n\n        DCL VOCRTN FIXED BIN(31);\n\n         DO I=1 TO TABSIZ;\n             IF KTAB(I) = -1 THEN GOTO L2;\n             IF INIT >= 0 & KTAB(I)/1000 \u00ac= INIT THEN GOTO L1;\n             IF ATAB(I) = ID THEN GOTO L3;\n L1:         END;\n         CALL BUG(21);\n\n L2:     IF INIT < 0 THEN RETURN(-1);\n         CALL BUG(5);\n\n L3:     VOCRTN=KTAB(I);\n         IF INIT >= 0 THEN VOCRTN=MOD(VOCRTN,1000);\n         RETURN(VOCRTN);\n         END;\n\n\n\n DSTROY: PROC (OBJECT);\n\n         DCL OBJECT FIXED BIN(31);\n\n /*\n    PERMANENTLY ELIMINATE \"OBJECT\" BY MOVING TO A\n    NON-EXISTANT LOCATION.\n */\n\n\n         CALL MOVE(OBJECT,0);\n         RETURN;\n         END;\n\n\n\n JUGGLE: PROC (OBJECT);\n\n         DCL OBJECT FIXED BIN(31);\n         DCL (I,J)  FIXED BIN(31);\n\n /*\n    JUGGLE AN OBJECT BY PICKING IT UP AND PUTTING IT DOWN\n    AGAIN, THE PURPOSE BEING TO GET THE OBJECT TO THE FRONT\n    OF THE CHAIN OF THINGS AT ITS LOC.\n */\n\n         I=PLACE(OBJECT);\n         J=FIXED(OBJECT);\n         CALL MOVE(OBJECT,I);\n         CALL MOVE(OBJECT+100,J);\n         RETURN;\n         END;\n\n\n\n MOVE: PROC (OBJECT,WHERE);\n\n         DCL (OBJECT,WHERE) FIXED BIN(31);\n\n /*\n    PLACE ANY OBJECT ANYWHERE BY PICKING IT UP AND DROPPING\n    IT.  MAY ALREADY BE TOTING, IN WHICH CASE THE CARRY IS A\n    NO-OP.  MUSTN'T PICK UP OBJECTS WHICH ARE NOT AT ANY LOC,\n    SINCE CARRY WANTS TO REMOVE OBJECTS FROM ATLOC CHAINS.\n */\n\n         IF OBJECT > 100 THEN GOTO L1;\n         FROM=PLACE(OBJECT);\n         GOTO L2;\n L1:     FROM=FIXED(OBJECT-100);\n L2:     IF FROM > 0 & FROM <= 300 THEN CALL CARRY(OBJECT,FROM);\n         CALL DROP(OBJECT,WHERE);\n         RETURN;\n         END;\n\n\n\n PUT: PROC (OBJECT,WHERE,PVAL) RETURNS(FIXED BIN(31));\n\n         DCL (OBJECT,WHERE,PVAL) FIXED BIN(31);\n\n /*\n    PUT IS THE SAME AS MOVE, EXCEPT IT RETURNS A VALUE USED\n    TO SET UP THE NEGATED PROP VALUES FOR THE REPOSITORY\n    OBJECTS.\n */\n\n         CALL MOVE(OBJECT,WHERE);\n         RETURN((-1)-PVAL);\n         END;\n\n\n\n CARRY: PROC (OBJECT,WHERE);\n\n         DCL (OBJECT,WHERE) FIXED BIN(31);\n\n /*\n    START TOTING AN OBJECT, REMOVING IT FROM THE LIST OF\n    THINGS AT ITS FORMER LOCATION.  INCR HOLDNG UNLESS IT WAS\n    ALREADY BEING TOTED.  IF OBJECT>100 (MOVING \"FIXED\"\n    SECOND LOC), DON'T CHANGE PLACE OR HOLDNG.\n */\n\n\n\n         IF OBJECT > 100 THEN GOTO L5;\n         IF PLACE(OBJECT) = -1 THEN RETURN;\n         PLACE(OBJECT)=-1;\n         HOLDNG=HOLDNG+1;\n L5:     IF ATLOC(WHERE) \u00ac= OBJECT THEN GOTO L6;\n         ATLOC(WHERE)=LINK(OBJECT);\n         RETURN;\n L6:     TEMP=ATLOC(WHERE);\n L7:     IF LINK(TEMP) = OBJECT THEN GOTO L8;\n         TEMP=LINK(TEMP);\n         GOTO L7;\n L8:     LINK(TEMP)=LINK(OBJECT);\n         RETURN;\n         END;\n\n\n\n DROP: PROC (OBJECT,WHERE);\n\n         DCL (OBJECT,WHERE) FIXED BIN(31);\n\n /*\n    PLACE AN OBJECT AT A GIVEN LOC, PREFIXING IT ONTO THE\n    ATLOC LIST.  DECR HOLDNG IF THE OBJECT WAS BEING TOTED.\n */\n\n         IF OBJECT > 100 THEN GOTO L1;\n         IF PLACE(OBJECT) = -1 THEN HOLDNG=HOLDNG-1;\n         PLACE(OBJECT)=WHERE;\n         GOTO L2;\n L1:     FIXED(OBJECT-100)=WHERE;\n L2:     IF WHERE <= 0 THEN RETURN;\n         LINK(OBJECT)=ATLOC(WHERE);\n         ATLOC(WHERE)=OBJECT;\n         RETURN;\n         END;\n\n1/*  UTILITY ROUTINES (RAN, CIAO, BUG) */\n\n CIAO: PROC;\n\n /*\n    EXITS...NO MESSAGE OUTPUT SINCE CAN'T SAVE CORE IMAGE\n */\n\n         STOP;\n         END;\n\n\n\n BUG: PROC (NUM);\n\n         DCL NUM FIXED BIN(31);\n\n /*\n    THE FOLLOWING CONDITIONS ARE CURRENTLY CONSIDERED FATAL\n    BUGS.  NUMBERS < 20 ARE DETECTED WHILE READING THE\n    DATABASE; THE OTHERS OCCUR AT \"RUN TIME\".\n         0       MESSAGE LINE > 70 CHARACTERS\n         1       NULL LINE IN MESSAGE\n         2       TOO MANY WORDS OF MESSAGES\n         3       TOO MANY TRAVEL OPTIONS\n         4       TOO MANY VOCABULARY WORDS\n         5       REQUIRED VOCABULARY WORD NOT FOUND\n         6       TOO MANY RTEXT OR MTEXT MESSAGES\n         7       TOO MANY HINTS\n         8       LOCATION HAS COND BIT BEING SET TWICE\n         9       INVALID SECTION NUMBER IN DATABASE\n         20      SPECIAL TRAVEL (500>L>300) EXCEEDS GOTO LIST\n         21      RAN OFF END OF VOCABULARY TABLE\n         22      VOCABULARY TYPE (N/1000) NOT BETWEEN 0 AND 3\n         23      INTRANSITIVE ACTION VERB EXCEEDS GOTO LIST\n         24      TRANSITIVE ACTION VERB EXCEEDS GOTO LIST\n         25      CONDITIONAL TRAVEL ENTRY WITH NO ALTERNATIVE\n         26      LOCATION HAS NO TRAVEL ENTRIES\n         27      HINT NUMBER EXCEEDS GOTO LIST\n         28      INVALID MONTH RETURNED BY DATE FUNCTION\n */\n\n\n         PUT STRING (OUTSTR) EDIT ('Fatal error # ',NUM) (A,F(2));\n         CALL LINEOUT;\n         STOP;\n         END;\n\n LINESKP: PROC;\n\n /* OUTPUTS A BLANK LINE */\n\n         OUTSTR=' ';\n         CALL LINEOUT;\n         RETURN;\n         END;\n\n LINEOUT: PROC;\n\n /* OUTPUT A LINE TO MILTEN */\n\n         INSTR=OUTSTR;\n         IF LOGON & OUTSTR \u00ac= ' ' THEN\n              PUT SKIP EDIT (OUTSTR) (A);\n         CCODE=0;\n         DO WHILE (CCODE = 0);\n             CALL TWRITE(INSTR,LENGTH(OUTSTR),CCODE);\n             END;\n         RETURN;\n         END;\n\n RAN: PROC (N) RETURNS (FIXED BIN(31));\n\n /* RETURNS RANDOM NUMBER BETWEEN 0 AND N-1 */\n\n         DCL N FIXED BIN(31);\n         DCL RANRTN FIXED BIN(31);\n\n         RANRTN=N;\n         DO WHILE (RANRTN = N);\n             CALL RANDU(IX,IY,Y);\n             IX=IY;\n             RANRTN=Y*N;\n             END;\n         RETURN(RANRTN);\n         END;\n\n\n   END ADVENT;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADVNTRDU": {"ttr": 2563, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19\\x04\\x00\\x08\\x00\\x08\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:04:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "CBT249"}, "text": "        SUBROUTINE RANDU(IX,IY,YR)\n        IY=IX*65539\n        IF(IY)5,6,6\n 5      IY=IY+2147483647+1\n 6      YR=IY\n        YR=YR*.4656613E-9\n        RETURN\n        END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADVNTTIM": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19\\x04\\x00\\x16\\x00\\x16\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:04:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "CBT249"}, "text": "         TITLE 'RETURN TIME IN TIMER UNITS TO INIT RANDOM NUMBER'\nITIME    CSECT\n         STM   14,12,12(13)        SAVE REGISTERS\n         LR    12,15               ESTAB BASE\n         USING ITIME,12            TELL ASM\n         LA    8,ISAV              GET A(MY SAVE)\n         ST    8,8(13)             BACK CHAIN\n         ST    13,4(8)             FORWARD CHAIN\n         LR    13,8                POINT TO IT\n         SPACE 3\n         L     2,0(1)              R2 -> FULLWORD PARM\n         TIME  TU\n         N     0,MASK              TURN TO NUMBER 0-511\n         ST    0,0(2)              SAVE IN PARM\n         L     13,4(13)            RELOAD R13\n         LM    14,12,12(13)        RESTORE REST OF REGISTERS\n         SR    15,15               CLEAR RC\n         BR    14                  RETURN\n         SPACE\nISAV     DC   18F'0'               SAVE AREA\nMASK     DC    X'000001FF'         512-1\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADVNTWYL": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19\\x04\\x00W\\x00W\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:04:00", "lines": 87, "newlines": 87, "modlines": 0, "user": "CBT249"}, "text": "WELLPUT  TITLE 'W E L L P U T -- WYLBUR/TSO I/O INTERFACE FROM PLI'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n***********************************************************************\n* WELLPUT -                                                           *\n* THE PURPOSE OF THIS MODULE IS TO SIMULATE THE I/O ROUTINES TREAD    *\n* AND TWRITE USED BY THE ADVENTURE GAME.                              *\n*                                                                     *\n* CALLING SEQUENCES:                                                  *\n*                                                                     *\n* TREAD (PROMPT_MESSAGE,PROMPT_LENGTH, MESSAGE_AREA,LENGTH,RTN_CODE)  *\n*                                                                     *\n* TWRITE (MESSAGE,MESSAGE LENGTH,RETURN CODE)                         *\n*                                                                     *\n***********************************************************************\nTREAD    CSECT ,\n         SAVE  (14,12),,*\n         LR    R12,R15\n         USING TREAD,R12\n***********************************************************************\n*  FIRST WE WILL DO A TPUT FOR THE PROMPT MESSAGE (IF IT EXISTS)      *\n*  THEN.. ASK FOR THE INPUT.                                          *\n*                                                                     *\n***********************************************************************\n         LR    R5,R1               SAVE INPUT PARM PTR\n         L     R1,0(,R5)           GET THE PTR TO THE MSG TEXT\n         L     R2,4(,R5)           GET THE LENGTH\n         L     R0,0(,R2)           ...\n         LTR   R0,R0               IS IT THERE ?\n         BZ    TRE0                NO.. JUST DO TGET\n         TPUT  (1),(0),R\nTRE0     EQU   *\n         L     R1,8(,R5)           PICK UP THE ADDRESS OF THE INPUT\n*                                   TEXT\n         LR    R3,R1               SAVE THE BUFFER ADDRESS\n         LA    R0,133              HOW MUCH WE CAN STAND\n         ICM   R1,B'1000',TGETFLAG SHOW PROPER TGET STUFF\n         TGET  (1),(0),R\n         OC    0(133,R3),BLANKS    UPPER CASE THIS SUCKER\n         L     R2,16(,R5)          GET THE RETURN CODE PTR\n         LA    R15,1               SET SUPER RETURN CODE\n         ST    R15,0(,R2)          STORE IT..\n         L     R2,12(,R5)          GET HOW MUCH TCAM BOUGHT\n         ST    R1,0(,R2)           AND GIVE IT TO PLI\n         RETURN (14,12),RC=0\n         SPACE 4\nTGETFLAG DC    X'80'               SHOW THIS IS A TGET\nBLANKS   DC    CL133' '\n         LTORG ,\n         EJECT ,\n***********************************************************************\n* TWRITE -                                                            *\n*                                                                     *\n* ISSUE A TPUT FOR THE CALLING PROGRAM..                              *\n*                                                                     *\n*                                                                     *\n***********************************************************************\nTWRITE   CSECT ,\n         SAVE  (14,12)\n         LR    R12,R15\n         USING TWRITE,R12\n         LR    R5,R1               SAVE PTR TO INPUT PARMS\n         L     R1,0(R5)            PT TO OUTPUT TEXT\n         L     R2,4(R5)            GET OUTPUT LENGTH\n         L     R0,0(R2)            ...\n         TPUT  (1),(0),R           DO IT\n         LA    R15,1               SET CRAZY RETURN CODE\n         L     R1,8(R5)            GET THE CCODE PTR\n         ST    R15,0(R1)           SAVE IT.\n         RETURN (14,12),RC=0\n         SPACE 4\n         LTORG ,\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT269/FILE269.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT269", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}