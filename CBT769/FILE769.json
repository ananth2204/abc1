{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012746000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1528436, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE769.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1528436, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1528436, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE769.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x19\\t'", "DS1TRBAL": "b'@\\xae'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x057\\x00\\n\\x059\\x00\\x05\\x00\\x1a'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04]\\x003\\x01\\x17\\x01\\x1f\\x01\\x17\\x01\\x1f\\x12Y\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf3@@@'", "ispf": {"version": "04.93", "flags": 0, "createdate": "2017-01-11T00:00:00", "modifydate": "2017-01-11T12:59:33", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-493"}, "text": "REGULAR CBT TAPE - VERSION 493    FILE:  769\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT493.FILE769\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 23 MEMBERS COUNTED; CUMULATIVE SIZE IS 14,234 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/11/17    12:59:32    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$INDEX": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x166\\x1f\\x01\\x166\\x1f\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\xd7\\xd9\\xc9\\xd5\\xd6@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2016-12-26T00:00:00", "modifydate": "2016-12-26T00:00:00", "lines": 15, "newlines": 0, "modlines": 0, "user": "PRINO"}, "text": "$$$INDEX - This member, the index of PRINO.EHI.EXEC\n$$README - Disclaimer\nEHIASM   - Convert assembler to HTML with ISPF HILITE'ing\nEHICOBOL - Convert COBOL to HTML with ISPF HILITE'ing\nEHIHELP  - Common 'help' screen for the EHIJCL/PLI/REXX macros\nEHIJCL   - Convert JCL to HTML with ISPF HILITE'ing\nEHINONE  - Convert any text to HTML as non-HILITE'd ISPF Edit\nEHIPAN   - Convert ISPF PANEL source to HTML with ISPF HILITE'ing\nEHIPLI   - Convert PL/I to HTML with ISPF HILITE'ing\nEHIREXX  - Convert REXX to HTML with ISPF HILITE'ing\nEHISUPC  - Convert SuperC/Search-For output to HTML with ISPF HILITE'ing\nEHISUPP  - Factored out support routines for the EHIxxxx execs\nEHIXMIT  - Build EHI.EXEC.XMIT for website\nGETVAR   - Exec to return common values to calling execs\nGPLV3    - Text of the GPL Version 3\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE1": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00S\\x01\\x07\\'?\\x01\\x07\\'?\"2\\x002\\x002\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-09-30T00:00:00", "modifydate": "2007-09-30T22:32:53", "lines": 50, "newlines": 50, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:    EHILITE execs in ZIP'ed XMIT format - Final pre-chop version\nFrom:       robert.prins@fin-force.com  (disappearing - see below)\nDate:       Thu, 27 Sep 2007 12:57:52 +0200\nTo:         robert.ah.prins@gmail.com\n\nHi all,\n\nAttached is the \"final\" version of the ZIPped XMIT file containing the\nEHIxxxx hilite macros. The dataset contains the following members:\n\n$$$$READ - Disclaimer\n$$$INDEX - This member, the index of File 769\nEHIASM   - Convert assembler to HTML with ISPF HILITE'ing\nEHICOBOL - Convert COBOL to HTML with ISPF HILITE'ing\nEHIHELP  - Common 'help' screen for the EHIJCL/PLI/REXX macros\nEHIJCL   - Convert JCL to HTML with ISPF HILITE'ing\nEHINONE  - Convert any text to HTML as non-HILITE'd ISPF Edit\nEHIPLI   - Convert PL/I to HTML with ISPF HILITE'ing\nEHIREXX  - Convert REXX to HTML with ISPF HILITE'ing\nEHISUPC  - Convert SuperC/Search-For output to HTML with ISPF HILITE'ing\nEHISUPP  - Factored out support routines for the EHIxxxx execs\nEPANQ    - Convert panel/message/skeleton to queue statements\nGPLV3    - Text of the GPL Version 3\nMAKECBT  - Exec to auto-build CBTTAPE.EXEC from my own exec library\nQH       - Exec to invoke Doug Nadel's ISPFHTML utility\n\nAs you can see, I've added a disclaimer, an index, the text of\nthe GPL V3 and three additional members,\n\nEPANQ   - which can be used to convert anything into a set of\n          queue statements,\nMAKECBT - the exec I use to automagically build\n          'ROBERT.CBTTAPE.XMIT' from my own EXEC library and\nQH      - I use this exec to invoke Doug Nadel's ISPFHTML tool.\n          In my own copy I have embedded Doug's code by\n          'EPANQ'ing his ISPFHTML.XMI file, but as the code is\n          quite likely (C) Copyright Doug Nadel (or more likely\n          IBM), 'MAKECBT' replaces it by a note how to get it.\n\nAgain, please give me some feedback - use <robert@prino.org> or\n<robert.ah.prins@gmail.com> as the fin-force address will be gone\nafter tomorrow  :(\n\nRobert\n--\nRobert AH Prins\nMobile: +32 487 594312\nrobert@prino.org (Private)\nrobert.ah.prins@gmail.com (Private)\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE2": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01\\t\\x18O\\x01\\t\\x18O\\x151\\x00T\\x00\\x00\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-07-03T00:00:00", "modifydate": "2009-07-03T15:31:35", "lines": 84, "newlines": 0, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:    CBT Tape 769 - EHILITE execs in ZIP'ed XMIT format -\n            Update of 2009-07-03 - with attachment\nFrom:       Robert Prins <robert.ah.prins@gmail.com>\nDate:       Fri, 3 Jul 2009 15:31:35 +0000\nTo:         sbgolob@cbttape.org, sknutson@cbttape.org\n\nHi Sam,\n\nAttached is an updated version of the ZIPped XMIT file for file CBT769\ncontaining the EHIxxxx hilite macros.\n\nAn incomplete list, see individual changelogs in the various members for\na more complete picture, of the updates I've made to the code:\n\n- the Javascript code to produce the fancy scrollable ISPF like HTML\n  has been updated and works again in Firefox 3.x\n- fixed a bug in the PL/I and REXX parsing code that would lead to the\n  '*** Bottom of Data ***' line being concatenated to the last dataline\n  when using Regina\n- all generated HTML is now completely W3C \"XHTML 1.0 Strict\" compliant\n- translate '<', '>', '\"' and '&' in output to HTML entities\n- the addition of 'GETVAR', and using it to retrieve some potentially\n  site-specific data, making it easier to customise the code. The change\n  was triggered by RACF limitations on the final qualifier at my current\n  employer.\n- process full SuperC Line compare output\n- process full SuperC File compare output (Beta)\n- process full SuperC Byte compare output (Beta)\n- addition of an 'HTML extension' selection field on the options pop-up\n- addition of an 'HTML font' selection field on the options pop-up\n- addition of a 'Compact HTML' selection field on the options pop-up, to\n  generate one-letter \"em\" classes, significantly reducing the size of\n  generated HTML files\n- brought PL/I keywords up to the level of Enterprise PLI V3.8.0\n- used BPXWDYN for non-DSNAME allocations, following a discussion in\n  bit.listserv.tsorexx about the inability of LISTDSI to retrieve the\n  dsname of datasets that might potentially end up on VIO\n\nThe dataset contains the following members:\n\n$$$$READ - Disclaimer\n$$$INDEX - The index of File 769\nEHIASM   - Convert assembler to HTML with ISPF HILITE'ing\nEHICOBOL - Convert COBOL to HTML with ISPF HILITE'ing\nEHIHELP  - Common 'help' screen for the EHIJCL/PLI/REXX macros\nEHIJCL   - Convert JCL to HTML with ISPF HILITE'ing\nEHINONE  - Convert any text to HTML as non-HILITE'd ISPF Edit\nEHIPLI   - Convert PL/I to HTML with ISPF HILITE'ing\nEHIREXX  - Convert REXX to HTML with ISPF HILITE'ing\nEHISUPC  - Convert SuperC/Search-For output to HTML with ISPF HILITE'ing\nEHISUPP  - Factored out support routines for the EHIxxxx execs\nEHIZIP   - Shorten ISPF colors generated by other EHIxxxx execs\nEPANQ    - Convert panel/message/skeleton to queue statements\nGETVAR   - Retrieve site-dependent data\nGPLV3    - Text of the GPL Version 3\nMAKECBT  - Exec to auto-build CBT769.EXEC from my own exec library\nQH       - Exec to invoke Doug Nadel's ISPFHTML utility\n\nTo run the macros, the EHIxxxx members and GETVAR are essential, but I\nhave added EPANQ, MAKECBT and QH as little bonuses.\n\nEPANQ   - this exec can be used to convert anything into a set of queue\n          statements, it can be used to update the embedded panel in\n          EHISUPP,\nMAKECBT - the exec I use to automagically build 'ROBERT.CBT769.XMIT'\n          from my own EXEC library and\nQH      - I use this exec to invoke Doug Nadel's ISPFHTML tool. In my\n          own copy I have embedded Doug's code by 'EPANQ'ing his\n          ISPFHTML.XMI file, but as that code is quite likely (C)\n          Copyright Doug Nadel (or more likely IBM), 'MAKECBT'\n          replaces it by a note how to get it.\n\nPlease note that the XMIT file contains a message dataset. It would be\nnice if this survived your adding the usual '$$$#DATE', '$$NOTE1' and\n'@FILE769' members.\n\nI would appreciate any feedback to <robert (a) prino (d) org>\n\nRobert\n--\nRobert AH Prins\nrobert (a) prino (d) org\nMobile: +32 487 594312\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$README": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x166\\x1f\\x01\\x166\\x1f\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x00\\xd7\\xd9\\xc9\\xd5\\xd6@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2016-12-26T00:00:00", "modifydate": "2016-12-26T00:00:00", "lines": 17, "newlines": 0, "modlines": 0, "user": "PRINO"}, "text": "                          D I S C L A I M E R\n                          -------------------\n        This package is Copyright (C) Robert AH Prins 2007-2016\n\n  The REXX execs in this PDS are free software: you can redistribute\n  them and/or modify them under the terms of the GNU General Public\n  License as published by the Free Software Foundation, either version\n  3 of the License, or (at your option) any later version.\n\n  These REXX execs are distributed in the hope that they will be\n  useful, but WITHOUT ANY WARRANTY; without even the implied warranty\n  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n  General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with these execs. If not, see <http://www.gnu.org/licenses/>\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE769": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04]\\x00&\\x01\\x17\\x01\\x1f\\x01\\x17\\x01\\x1f\\x12Y\\x005\\x005\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf3@@@'", "ispf": {"version": "04.93", "flags": 0, "createdate": "2017-01-11T00:00:00", "modifydate": "2017-01-11T12:59:26", "lines": 53, "newlines": 53, "modlines": 0, "user": "CBT-493"}, "text": "//***FILE 769 is from Robert Prins and contains a collection of     *   FILE 769\n//*           REXX execs that are run as ISPF edit macros, which    *   FILE 769\n//*           turn code (from various programming languages)        *   FILE 769\n//*           into HTML source, and optionally, invoke a browser    *   FILE 769\n//*           to display it.                                        *   FILE 769\n//*                                                                 *   FILE 769\n//*           emails:  robert@prino.org                             *   FILE 769\n//*                    robert.ah.prins@gmail.com                    *   FILE 769\n//*                                                                 *   FILE 769\n//*    Attached is the \"final\" version of the ZIPped XMIT file      *   FILE 769\n//*    containing the EHIxxxx hilite macros. The dataset            *   FILE 769\n//*    contains the following members:                              *   FILE 769\n//*                                                                 *   FILE 769\n//*    $$$$READ - Disclaimer                                        *   FILE 769\n//*    $$$INDEX - This member, the index of File 769                *   FILE 769\n//*    EHIASM   - Convert assembler to HTML with ISPF               *   FILE 769\n//*               HILITE'ing                                        *   FILE 769\n//*    EHICOBOL - Convert COBOL to HTML with ISPF HILITE'ing        *   FILE 769\n//*    EHIHELP  - Common 'help' screen for the EHIJCL/PLI/REXX      *   FILE 769\n//*               macros                                            *   FILE 769\n//*    EHIJCL   - Convert JCL to HTML with ISPF HILITE'ing          *   FILE 769\n//*    EHINONE  - Convert any text to HTML as non-HILITE'd          *   FILE 769\n//*               ISPF Edit                                         *   FILE 769\n//*    EHIPLI   - Convert PL/I to HTML with ISPF HILITE'ing         *   FILE 769\n//*    EHIREXX  - Convert REXX to HTML with ISPF HILITE'ing         *   FILE 769\n//*    EHISUPC  - Convert SuperC/Search-For output to HTML          *   FILE 769\n//*               with ISPF HILITE'ing                              *   FILE 769\n//*    EHISUPP  - Factored out support routines for the             *   FILE 769\n//*               EHIxxxx execs                                     *   FILE 769\n//*    EHIZIP   - Shorten ISPF colors generated by other EHIxxxx    *   FILE 769\n//*               execs                                             *   FILE 769\n//*    EPANQ    - Convert panel/message/skeleton to queue           *   FILE 769\n//*               statements                                        *   FILE 769\n//*    GPLV3    - Text of the GPL Version 3                         *   FILE 769\n//*    MAKECBT  - Exec to auto-build CBTTAPE.EXEC from my own       *   FILE 769\n//*               exec library                                      *   FILE 769\n//*    QH       - Exec to invoke Doug Nadel's ISPFHTML utility      *   FILE 769\n//*                                                                 *   FILE 769\n//*    As you can see, I've added a disclaimer, an index, the       *   FILE 769\n//*    text of the GPL V3 and three additional members,             *   FILE 769\n//*                                                                 *   FILE 769\n//*    EPANQ   - which can be used to convert anything into a       *   FILE 769\n//*              set of queue statements,                           *   FILE 769\n//*    MAKECBT - the exec I use to automagically build              *   FILE 769\n//*              'ROBERT.CBTTAPE.XMIT' from my own EXEC             *   FILE 769\n//*              library and                                        *   FILE 769\n//*    QH      - I use this exec to invoke Doug Nadel's             *   FILE 769\n//*              ISPFHTML tool.  In my own copy I have embedded     *   FILE 769\n//*              Doug's code by 'EPANQ'ing his ISPFHTML.XMI         *   FILE 769\n//*              file, but as the code is quite likely (C)          *   FILE 769\n//*              Copyright Doug Nadel (or more likely IBM),         *   FILE 769\n//*              'MAKECBT' replaces it by a note how to get it.     *   FILE 769\n//*                                                                 *   FILE 769\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EHIASM": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07%O\\x01\\x162?\\x00\\x00\\x04\\x01\\x00\\x00\\x00\\x00\\xc3\\xd3\\xd6\\xc7\\xc7\\xc9\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-09-11T00:00:00", "modifydate": "2016-11-18T00:00:00", "lines": 1025, "newlines": 0, "modlines": 0, "user": "CLOGGIE"}, "text": "/* REXX exec/edit macro to convert ASM to 'HILITE'd HTML              */\n/*** trace ?r ***************************************************** \\| *\n*               (C) Copyright Robert AH Prins, 2007-2016               *\n************************************************************************\n*  ------------------------------------------------------------------  *\n* | Date       | By   | Remarks                                      | *\n* |------------+------+----------------------------------------------| *\n* |            |      |                                              | *\n* |------------+------+----------------------------------------------| *\n* | 2016-11-18 | RAHP | Multiple updates/simplifications             | *\n* |------------+------+----------------------------------------------| *\n* | 2012-06-25 | RAHP | Add IP address                               | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-27 | RAHP | Use pop-up on ISPF to display progress       | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-02 | RAHP | Add selection for short CSS 'em' colors      | *\n* |------------+------+----------------------------------------------| *\n* | 2009-06-15 | RAHP | Translate entities in End-Of-Line comments   | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-22 | RAHP | Update comment                               | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-01 | RAHP | Add font selection for generated HTML        | *\n* |------------+------+----------------------------------------------| *\n* | 2009-02-09 | RAHP | - Correct comment                            | *\n* |            |      | - RACF problem with 'html' extension @ NVSM  | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-24 | RAHP | Further tweaks                               | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-18 | RAHP | - add GPL V3 License                         | *\n* |            |      | - use EHISUPP 'get_options' to retrieve some | *\n* |            |      |   processing options                         | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-17 | RAHP | Complete operand parser                      | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-11 | RAHP | Initial version (copy of EHIREXX)            | *\n* |------------+------+----------------------------------------------| *\n************************************************************************\n* EHIASM is a REXX exec/edit macro that analyses ASM and builds        *\n* a HTML file with the color attributes as used by ISPF Edit.          *\n*                                                                      *\n* This file can be transferred to the PC by using ISPF Workstation     *\n* Agent. In addition the exec might invoke the Windows application     *\n* associated with file extension \".html\"                               *\n*                                                                      *\n* The exec runs as ISPF edit macro or might be used as line command    *\n* on the extended member list of ISPF List Utility (usually menu       *\n* option 3.4).                                                         *\n*                                                                      *\n* In addition the exec can be invoked on the command line. In this     *\n* case the dataset name has to be supplied as invocation parameter.    *\n*                                                                      *\n* t_rex will contain the environment. It can be:                       *\n*                                                                      *\n* - TSO     - TSO/ISPF                                                 *\n* - MVS     - z/OS (PGM=IRXJCL)                                        *\n* - SYSTEM  - Regina                                                   *\n* - COMMAND - PC DOS 7/2000                                            *\n* - CMD     - Object REXX (OS/2, Windoze)                              *\n************************************************************************\n* Send questions, suggestions and/or bug reports to:                   *\n*                                                                      *\n* robert@prino.org / robert.ah.prins@gmail.com                         *\n*                                                                      *\n* Robert AH Prins                                                      *\n* Taboralaan 46                                                        *\n* 8400 Oostende                                                        *\n* Belgium                                                              *\n************************************************************************\n* This program is free software: you can redistribute it and/or        *\n* modify it under the terms of the GNU General Public License as       *\n* published by the Free Software Foundation, either version 3 of       *\n* the License, or (at your option) any later version.                  *\n*                                                                      *\n* This program is distributed in the hope that it will be useful,      *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of       *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *\n* GNU General Public License for more details.                         *\n*                                                                      *\n* You should have received a copy of the GNU General Public License    *\n* along with this program. If not, see <http://www.gnu.org/licenses/>  *\n***********************************************************************/\nparse source source\nparse value source with . . moi . . . cmdenv aspace .\n\nt_rex = address()\n\nif t_rex  = 'TSO' &,\n   aspace = 'ISPF' then\n  do\n    \"ispexec vget (zenvir)\"\n    envir = strip(substr(zenvir, 17, 8))\n  end\nelse\n  envir = 'OTHER'\n\nparse arg idsn\n\ncall get_source                /* Read the assembler source           */\ncall init_vars                 /* Initialize the global variables     */\ncall build_html                /* Now go on and build the HTML output */\n\ncall ehisupp 'generate_output,'sep','htmlout  || sep ||,\n                                     odsn     || sep ||,\n                                     title    || sep ||,\n                                     header   || sep ||,\n                                     footer   || sep ||,\n                                     htmlfont\n\nif t_rex  = 'TSO' &,\n   aspace = 'ISPF' then\n  if envir \\= 'BATCH' then\n    do\n      /*****************************************************************\n      * Show the resulting dataset, if desired                         *\n      *****************************************************************/\n      if view_html = 'YES' then\n        \"ispexec view dataset(\"odsn\")\"\n\n      /*****************************************************************\n      * Transfer the html file to the PC                               *\n      *****************************************************************/\n      if xfer_wsa = 'YES' then\n        call ehisupp 'xfer_and_show_html,'sep','dir_pc   || sep ||,\n                                                htmlfile || sep ||,\n                                                odsn     || sep ||,\n                                                ipaddr   || sep ||,\n                                                start_browser\n    end\n  else\n    do\n      if macmode then\n        \"isredit end\"\n    end\nexit\n\n/***********************************************************************\n* TRANSLATE_ENTITIES                                                   *\n*                                                                      *\n* This procedure translates special characters to HTML entities        *\n***********************************************************************/\ntranslate_entities: procedure expose special_chars special_html\n  parse arg in\n\n  out = ''\n\n  if translate(in, ' ', special_chars) = in then\n    out = in\n  else\n    do while in \\== ''\n      c = left(in, 1)\n      k = wordpos(c, special_chars)\n\n      if k \\= 0 then\n        out = out || word(special_html, k)\n      else\n        out = out || c\n\n      in = substr(in, 2)\n    end\nreturn out\n\n/***********************************************************************\n* QUOTER:                                                              *\n*                                                                      *\n* This procedure adds HTML for quoted strings                          *\n***********************************************************************/\nquoter: procedure expose col_str in_apostq\n  parse arg in\n\n  out = ''\n\n  if in_apostq then\n    do\n      in_apost = 1\n\n      p   = pos(' ', in)\n      p   = verify(in, ' ',, p)\n      out = left(in, p - 1)col_str\n      in  = substr(in, p)\n    end\n  else\n    in_apost = 0\n\n  do while in \\== ''\n    c = left(in, 1)\n\n    select\n      when c = '''' &,\n           in_apost then\n        do\n          out       = out || '''</em>'\n          in_apost  = 0\n          in_apostq = 0\n        end\n\n      when c = '''' &,\n          \\in_apost then\n        do\n          out       = out || col_str''''\n          in_apost  = 1\n          in_apostq = 1\n        end\n\n      otherwise\n        out = out || c\n    end\n\n    in = substr(in, 2)\n  end\n\nif in_apost then\n  out = out'</em>'\nreturn out\n\n/***********************************************************************\n* HILITE:                                                              *\n*                                                                      *\n* This procedure adds HTML for special characters                      *\n***********************************************************************/\nhilite: procedure expose special_hilite special_chars special_html,\n                         col_spc paren col_par. in_apostq\n  parse arg in\n\n  out = ''\n\n  if in_apostq then\n    do\n      in_apost = 1\n\n      p   = pos(' ', in)\n      p   = verify(in, ' ',, p)\n      out = left(in, p - 1)\n      in  = substr(in, p)\n    end\n  else\n    in_apost = 0\n\n  do while in \\== ''\n    c = left(in, 1)\n\n    select\n      when c = '''' &,\n           in_apost then\n        do\n          out      = out || c\n          in_apost = 0\n        end\n\n      when c = '''' &,\n          \\in_apost then\n        do\n          out      = out || c\n          in_apost = 1\n        end\n\n      when c = '(' &,\n          \\in_apost then\n        do\n          paren = (paren + 1) // 5\n          out   = out || col_par.paren'(</em>'\n        end\n\n      when c = ')' &,\n          \\in_apost then\n        do\n          out   = out || col_par.paren')</em>'\n          paren = (paren + 4) // 5\n        end\n\n      when pos(c, special_hilite) \\= 0 &,\n          \\in_apost then\n        do\n          p = wordpos(c, special_chars)\n\n          if p \\= 0 then\n            c = word(special_html, p)\n\n          out = out || col_spc || c'</em>'\n        end\n\n      otherwise\n        out = out || c\n    end\n\n    in = substr(in, 2)\n  end\nreturn out\n\n/***********************************************************************\n* QUOTE_CHECK:                                                         *\n*                                                                      *\n* This procedure checks post-keyword data (PARM=) for quotes           *\n***********************************************************************/\nquote_check: procedure expose l2 l3\n  t2 = l2\n  t3 = l3\n\n  q2 = space(t2, 0)\n  z2 = space(translate(t2, ' ', ''''), 0)\n\n  /*********************************************************************\n  * If d = 1 there are unmatched quotes                                *\n  *********************************************************************/\n  d  = (length(q2) - length(z2)) // 2\n\n  do while d = 1 & t3 \\= ' '\n    p  = pos('''', t3)\n    t2 = t2 || left(t3, p)\n    t3 = substr(t3, p + 1)\n\n    do while left(t3, 1) \\= ' '\n      t2 = t2 || left(t3, 1)\n      t3 = substr(t3, 2)\n    end\n\n    q2 = space(t2, 0)\n    z2 = space(translate(t2, ' ', ''''), 0)\n\n    d  = (length(q2) - length(z2)) // 2\n  end\n\n  l2 = t2\n  l3 = t3\nreturn\n\n/***********************************************************************\n* GET_SOURCE:                                                          *\n*                                                                      *\n* Read the assembler source                                            *\n***********************************************************************/\nget_source:\n  macmode = 0\n  rxdata. = ''\n  pgm     = ''\n\n  select\n    when t_rex = 'TSO' then call get_source_tso\n    when t_rex = 'MVS' then call get_source_mvs\n    otherwise               call get_source_pc\n  end\nreturn\n\n/***********************************************************************\n* GET_SOURCE_TSO:                                                      *\n*                                                                      *\n* Read the text when running under TSO                                 *\n***********************************************************************/\nget_source_tso:\n  if aspace = 'ISPF' then\n    \"isredit macro (parm) NOPROCESS\"\n  else\n    rc = 4\n\n  /*********************************************************************\n  * Running as edit macro                                              *\n  *********************************************************************/\n  if rc = 0 then\n    do\n      macmode = 1\n\n      if parm = '?' then\n        do\n          \"isredit ehihelp\" moi\n          exit\n        end\n\n      \"isredit process range HI\"\n      if rc <= 4 then\n        do\n          \"isredit (ZF) = linenum .zfrange\"\n          \"isredit (ZL) = linenum .zlrange\"\n        end\n      else\n        do\n          \"isredit ehihelp\" moi\n          exit\n        end\n\n      \"isredit (DSN) = dataset\"\n      \"isredit (MEM) = member\"\n\n      if mem = '' then\n        idsn = \"'\" || dsn || \"'\"\n      else\n        do\n          pgm  = mem\n          idsn = \"'\" || dsn || '(' || mem || \")'\"\n        end\n\n      /*****************************************************************\n      * Read the (selected) source into a stem                         *\n      *****************************************************************/\n      i = 0\n      do j = +zf to +zl\n        \"isredit (DATALINE) = line\" j\n\n        i        = i + 1\n        rxdata.i = strip(dataline, 'T')\n      end\n\n      rxdata.0 = i\n    end\n  /*********************************************************************\n  * Running as TSO command                                             *\n  *********************************************************************/\n  else\n    do\n      if idsn = '' then\n        do\n          msg =     left('Error - No dataset name passed', 75)\n          msg = msg left(moi 'can be used as an edit macro or',\n                         'as a line command on the ISPF', 75)\n          msg = msg left('dataset list utility. In both cases the',\n                         'dataset name will be automatically', 75)\n          msg = msg left('determined.', 75)\n          msg = msg left('If you call' moi 'on the command line you',\n                         'have to pass the name of the', 75)\n          msg = msg left('dataset to be processed, e.g.', 75)\n          msg = msg left('Command ===>' moi,\n                         '''my.asm.dataset(test)''', 75)\n\n          zedsmsg = ''\n          zedlmsg = msg\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' &,\n             envir \\= 'BATCH' then\n            \"ispexec setmsg msg(ISRZ001)\"\n          else\n            do while msg \\= ''\n              say left(msg, 75)\n              msg = substr(msg, 76)\n            end\n\n          exit 8\n        end\n\n      /*****************************************************************\n      * Force single quotes around dataset name and check if it's OK   *\n      *****************************************************************/\n      idsn = \"'\" || strip(idsn,, '''') || \"'\"\n\n      if sysdsn(idsn) \\= 'OK' then\n        do\n          say 'Error - Dataset' idsn 'could not be found'\n          exit 8\n        end\n\n      /*****************************************************************\n      * Extract member name, if present                                *\n      *****************************************************************/\n      parse var idsn . '(' mem ')'\n\n      if mem \\= '' then\n        pgm = mem\n\n      /*****************************************************************\n      * Read the assembler source                                      *\n      *****************************************************************/\n      dynlib = 'dyn'random(99999)\n\n      \"alloc f(\"dynlib\") da(\"idsn\") shr reu\"\n      if rc > 0 then\n        do\n          say 'Error - Dataset' idsn 'could not be allocated - rc' rc\n          exit 8\n        end\n\n      \"execio * diskr\" dynlib \"( stem rxdata. finis\"\n      if rc > 0 then\n        do\n          say 'Error - Dataset' idsn 'could not be read - rc' rc\n          exit 8\n        end\n\n      \"free f(\"dynlib\")\"\n    end\n\n  olines = rxdata.0\nreturn\n\n/***********************************************************************\n* GET_SOURCE_PC:                                                       *\n*                                                                      *\n* Read the text when running on the PC                                 *\n***********************************************************************/\nget_source_pc:\n  if idsn = '' then\n    do\n      say 'Syntax:' moi 'file.asm'\n      exit\n    end\n\n  do i = 1 by 1 while lines(idsn)\n    rxdata.i = linein(idsn)\n  end\n\n  rxdata.0 = i - 1\n  olines   = rxdata.0\nreturn\n\n/***********************************************************************\n* INIT_VARS:                                                           *\n*                                                                      *\n* This procedure initialises the global variables                      *\n***********************************************************************/\ninit_vars:\n  /*********************************************************************\n  * Parameter separator for EHISUPP exec                               *\n  *********************************************************************/\n  sep = x2c(00)d2c(random(2**16))x2c(ff)d2c(random(2**16))x2c(00)\n  sep = translate(sep, x2c(bababababa), ' <>&\"')\n\n  /*********************************************************************\n  * Get processing options                                             *\n  *********************************************************************/\n  opt = ehisupp('get_options,'sep','moi)\n  parse value opt with view_html     (sep),\n                       xfer_wsa      (sep),\n                       start_browser (sep),\n                       ispf_edit     (sep),\n                       show_progress (sep),\n                       dir_pc        (sep),\n                       htmlfont      (sep),\n                       ipaddr        (sep) .\n\n  /*********************************************************************\n  * Temporary output dataset                                           *\n  *********************************************************************/\n  if mem \\= '' then\n    odsn = \"'\" || userid() || '.' || mem || \".asm.html'\"\n  else\n    odsn = \"'\" || userid() || '.' || moi || \".asm.html'\"\n\n  /*********************************************************************\n  * Text strings for title, header and footer                          *\n  *********************************************************************/\n  title  = 'Assembler source:' strip(idsn,, '''')\n  header = 'Assembler source:' strip(idsn,, '''')\n  now    = date('S')\n  now    = left(now, 4)'-'substr(now, 5, 2)'-'right(now, 2)'T'time()\n  footer = 'Generated on' now 'by' userid() 'with' moi\n\n  /*********************************************************************\n  * Name of generated html file on PC                                  *\n  *********************************************************************/\n  if pgm \\= '' then\n    htmlfile = pgm || '.html'\n  else\n    htmlfile = 'asm.html'\n\n  /*********************************************************************\n  * HTML colors                                                        *\n  *                                                                    *\n  * - lime(green) - name                                               *\n  * - red         - opcode                                             *\n  * - lime        - operand                                            *\n  * - white       - quoted strings                                     *\n  * - aqua(turq)  - remarks                                            *\n  * - yellow      - special characters                                 *\n  * - blue        - *process                                           *\n  *********************************************************************/\n  col_nam        = '<em class=\"l\">'                        /* lime    */\n  col_opc        = '<em class=\"r\">'                        /* red     */\n  col_opr        = '<em class=\"l\">'                        /* lime    */\n  col_str        = '<em class=\"w\">'                        /* white   */\n  col_rem        = '<em class=\"t\">'                        /* turq    */\n  col_spc        = '<em class=\"y\">'                        /* yellow  */\n  col_pro        = '<em class=\"b\">'                        /* blue    */\n\n  /*********************************************************************\n  * Colors for nested parentheses                                      *\n  *********************************************************************/\n  col_par.0      = '<em class=\"f\">'                        /* fuchsia */\n  col_par.1      = '<em class=\"y\">'                        /* yellow  */\n  col_par.2      = '<em class=\"w\">'                        /* white   */\n  col_par.3      = '<em class=\"r\">'                        /* red     */\n  col_par.4      = '<em class=\"t\">'                        /* turq    */\n\n  /*********************************************************************\n  * HTML special characters and their defined entities                 *\n  *********************************************************************/\n  special_chars  = '< > & \"'\n  special_html   = '&lt; &gt; &amp; &quot;'\n\n  /*********************************************************************\n  * Characters to be highlighted                                       *\n  *********************************************************************/\n  special_hilite = '+-*=/<>&\u00ac|:,'\n\n  /*********************************************************************\n  * No operand (pseudo-) instructions                                  *\n  *********************************************************************/\n  no_ops         = 'CSCH '   ||,\n                   'HSCH '   ||,\n                   'IPK '    ||,\n                   'PTFF '   ||,\n                   'PTLB '   ||,\n                   'RCHP '   ||,\n                   'RSCH '   ||,\n                   'SAL '    ||,\n                   'SAM '    ||,\n                   'SAM24 '  ||,\n                   'SAM31 '  ||,\n                   'SAM64 '  ||,\n                   'SCHM '   ||,\n                   'SCKPF '  ||,\n                   'TAM '    ||,\n                   'TRAP2 '  ||,\n                   'UPT '    ||,\n                   'XSCH '   ||,\n                   'AEJECT ' ||,\n                   'ANOP '   ||,\n                   'COM '    ||,\n                   'CSECT '  ||,\n                   'CXD '    ||,\n                   'DSECT '  ||,\n                   'EJECT '  ||,\n                   'LTORG '  ||,\n                   'MACRO '  ||,\n                   'MEND '   ||,\n                   'MEXIT '  ||,\n                   'REPRO '  ||,\n                   'RSECT '\n\n\nreturn\n\n/***********************************************************************\n* BUILD_HTML:                                                          *\n*                                                                      *\n* This procedure builds the HTML output                                *\n***********************************************************************/\nbuild_html:\n  /*********************************************************************\n  * Switches                                                           *\n  *********************************************************************/\n  in_apost  = 0                 /* Inside a '(apost) delimited string */\n  in_apostq = 0                 /* Inside a '(apost) delimited string */\n  in_com    = 0                 /* Inside a comment                   */\n  paren     = 1                 /* Nested parentheses level           */\n\n  /*********************************************************************\n  * Initialize the html output string                                  *\n  *********************************************************************/\n  if ispf_edit = 'ISPF' then\n    htmlout = x2c(ff)ispf_edit || x2c(ff)right(olines, 6, '0')x2c(ff)\n  else\n    htmlout = ''\n\n  tempout = ''\n\n  /*********************************************************************\n  * Loop over the assembler source                                     *\n  *********************************************************************/\n  i = time('E')\n\n  /*********************************************************************\n  * Process (if present) any '*PROCESS' statements                     *\n  *********************************************************************/\n  do i = 1 by 1 while translate(left(rxdata.i, 8)) = '*PROCESS'\n    tempout = tempout || col_pro ||,\n              translate_entities(rxdata.i)'</em><br>'\n  end\n\n  do i = i to rxdata.0\n    /*******************************************************************\n    * Display (optional) progress messages                             *\n    *******************************************************************/\n    if show_progress > 0 then\n      if i // show_progress = 0 then\n        do\n          progress = 'Elapsed time' right(time('E'), 12),\n                     '- lines processed' right(i, 6)\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' then\n            rc = ehisupp('monitor,'moi 'Progress,'progress)\n          else\n            say progress\n        end\n\n    /*******************************************************************\n    * Get the line, a spaced copy and the continuation character       *\n    *******************************************************************/\n    line = left(rxdata.i, 71)\n    sqz  = space(line)\n    cont = substr(rxdata.i, 72, 1)\n    if cont == ' ' then\n      line = strip(left(rxdata.i, 71), 'T')\n\n    /*******************************************************************\n    * Process completely blank line                                    *\n    *******************************************************************/\n    if sqz = '' then\n      do\n        tempout = tempout || '<br>'\n        iterate i\n      end\n\n    /*******************************************************************\n    * Process comment line                                             *\n    *******************************************************************/\n    if in_com              |,\n       left(line, 1) = '*' |,\n       left(line, 2) = '.*' then\n      do\n        if cont \\= '' then\n          in_com = 1\n        else\n          in_com = 0\n\n        tempout = tempout || col_rem ||,\n                  translate_entities(line) || '</em><br>'\n        iterate i\n      end\n\n    /*******************************************************************\n    * Parse out the name (and following spaces)                        *\n    *                                                                  *\n    * As there may not always be a name present, a '~' is added to the *\n    * line, so that there is in effect always a name. The '~' is later *\n    * stripped off again.                                              *\n    *******************************************************************/\n    line = '~'line\n    p    = pos(' ', line)\n    name = substr(left(line, p - 1), 2)\n    line = substr(line, p)\n    p    = verify(line, ' ')\n\n    if p \\= 0 then\n      do\n        name = name || left(line, p - 1)\n        line = substr(line, p)\n      end\n\n    if name \\= '' then\n      tempout = tempout || col_nam || name || '</em>'\n    else\n      tempout = tempout || name\n\n    /*******************************************************************\n    * Parse out the opcode (and following spaces)                      *\n    *******************************************************************/\n    p      = pos(' ', line || ' ')\n    opcode = left(line, p - 1)\n    upcode = translate(opcode)\n    line   = substr(line, p)\n    p      = verify(line, ' ')\n\n    if p \\= 0 then\n      do\n        opcode = opcode || left(line, p - 1)\n        line   = substr(line, p)\n      end\n    else\n      if line  = ' ' &,\n         cont \\= ' ' then\n        do\n          opcode = opcode || line\n          line   = ''\n        end\n\n    tempout = tempout || col_opc || opcode || '</em>'\n\n    /*******************************************************************\n    * If followed by '(', these 'opcodes' allow non-breaking spaces in *\n    * their operand field                                              *\n    *******************************************************************/\n    spc = (upcode = 'AIF'  |,\n           upcode = 'SETA' |,\n           upcode = 'SETB' |,\n           upcode = 'SETC') & left(line, 1) = '('\n\n    /*******************************************************************\n    * 'no_ops' contains the list of non-operand opcodes and assembler  *\n    * instructions                                                     *\n    *******************************************************************/\n    no_op = (wordpos(upcode, no_ops) \\= 0)\n\n    /*******************************************************************\n    * Remainder of line is blank and no continuation? Exit             *\n    *******************************************************************/\n    if line \\= '' |,\n       cont \\= ' ' then\n      call parser\n\n    tempout = tempout || '<br>'\n\n    if length(tempout) > 250 then\n      do\n        htmlout = htmlout || tempout\n        tempout = ''\n      end\n  end\n\n  htmlout = htmlout || tempout\nreturn\n\n/***********************************************************************\n* PARSER:                                                              *\n*                                                                      *\n* Parse the operand and remainder fields                               *\n***********************************************************************/\nparser:\n  in_apost = 0\n  par_cnt  = -1\n  in_sym   = 0\n\n  do while line \\= '' | cont \\= ' '\n    if line == '' &,\n       cont \\= ' ' then\n      do\n        tempout = tempout ||,\n                  col_rem || translate_entities(cont)'</em><br>'\n        i       = i + 1\n        line    = left(rxdata.i, 71)\n        cont    = substr(rxdata.i, 72, 1)\n\n        if cont = ' ' then\n          line = strip(line, 'T')\n\n        /***************************************************************\n        * Assume valid code, so continuations start in column 16       *\n        ***************************************************************/\n        tempout = tempout || left(line, 15)\n        line    = substr(line, 16)\n      end\n\n    do while line \\== ''\n      c1 = left(line, 1)\n      u1 = translate(c1)\n      c2 = left(line, 2)\n      u2 = translate(c2)\n\n      /*****************************************************************\n      * Is it a special character?                                     *\n      *****************************************************************/\n      sc = wordpos(c1, special_chars)\n\n      /*****************************************************************\n      * Is it a special hilite character?                              *\n      *****************************************************************/\n      sh = pos(c1, special_hilite)\n\n      if in_sym &,\n         pos(u1, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$_#@') = 0 then\n        in_sym = 0\n\n      if c1 = '&' then\n        in_sym = 1\n\n      select\n        /***************************************************************\n        * Everything following a no-operand opcode or assembler        *\n        * instruction is a comment                                     *\n        ***************************************************************/\n        when no_op then\n          do\n            tempout = tempout ||,\n                      col_rem || translate_entities(line) || '</em>'\n            line    = ''\n          end\n\n        /***************************************************************\n        * Spaces are kept unchanged - process multiple spaces in one   *\n        * go|                                                          *\n        ***************************************************************/\n        when c1 == ' ' then\n          do\n            if line = ' ' then\n              do\n                tempout = tempout || line\n                line    = ''\n              end\n            else\n              do\n                n       = verify(line, ' ')\n                tempout = tempout || left(line, n - 1)\n\n                if in_apost then\n                  line = substr(line, n)\n                else\n                  if spc then\n                    if par_cnt = 0 then\n                      do\n                        tempout = tempout ||,\n                                  col_rem ||,\n                                 translate_entities(substr(line, n)) ||,\n                                  '</em>'\n                        line    = ''\n                      end\n                    else\n                      line = substr(line, n)\n                  else\n                    do\n                      tempout = tempout ||,\n                                col_rem ||,\n                                translate_entities(substr(line, n)) ||,\n                                '</em>'\n                      line    = ''\n                    end\n              end\n          end\n\n        /***************************************************************\n        * Start of quoted operator                                     *\n        ***************************************************************/\n        when \\in_sym   &,\n             \\in_apost &,\n            (u2 = 'L''' |,\n             u2 = 'L''' |,\n             u2 = 'K''' |,\n             u2 = 'D''' |,\n             u2 = 'I''' |,\n             u2 = 'N''' |,\n             u2 = 'O''' |,\n             u2 = 'S''' |,\n             u2 = 'T''') then\n          do\n            tempout = tempout || c2\n            line    = substr(line, 3)\n          end\n\n        /***************************************************************\n        * End of quoted string                                         *\n        ***************************************************************/\n        when in_apost &,\n             c1 = \"'\" then\n          do\n            in_apost = 0\n\n            tempout = tempout || \"'</em>\"\n            line    = substr(line, 2)\n          end\n\n        /***************************************************************\n        * Start of quoted string                                       *\n        ***************************************************************/\n        when c1 = \"'\" then\n          do\n            in_apost = 1\n\n            tempout = tempout || col_str\"'\"\n            line    = substr(line, 2)\n          end\n\n        /***************************************************************\n        * A special character has to be translated and highlighted     *\n        ***************************************************************/\n        when sc > 0 &,\n             sh > 0 &,\n             \\in_apost then\n          do\n            tempout = tempout || col_spc ||,\n                      word(special_html, sc)'</em>'\n            line    = substr(line, 2)\n          end\n\n        /***************************************************************\n        * A special character has to be translated                     *\n        ***************************************************************/\n        when sc > 0 then\n          do\n            tempout = tempout || word(special_html, sc)\n            line    = substr(line, 2)\n          end\n\n        /***************************************************************\n        * A special character has to be highlighted                    *\n        ***************************************************************/\n        when sh > 0 &,\n             \\in_apost then\n          do\n            tempout = tempout || col_spc || c1'</em>'\n            line    = substr(line, 2)\n          end\n\n        /***************************************************************\n        * It's a left parenthesis                                      *\n        ***************************************************************/\n        when c1 = '(' &,\n             \\in_apost then\n          do\n            if par_cnt = -1 then\n              par_cnt = 1\n            else\n              par_cnt = par_cnt + 1\n\n            paren   = (paren + 1) // 5\n            tempout = tempout || col_par.paren'(</em>'\n            line    = substr(line, 2)\n          end\n\n        /***************************************************************\n        * It's a right parenthesis                                     *\n        ***************************************************************/\n        when c1 = ')' &,\n             \\in_apost then\n          do\n            par_cnt = par_cnt - 1\n\n            tempout = tempout || col_par.paren')</em>'\n            paren   = (paren + 4) // 5\n            line    = substr(line, 2)\n          end\n\n        /***************************************************************\n        * Anything else                                                *\n        ***************************************************************/\n        otherwise\n          do\n            tempout = tempout || c1\n            line    = substr(line, 2)\n          end\n      end\n\n      if length(tempout) > 250 then\n        do\n          htmlout = htmlout || tempout\n          tempout = ''\n        end\n    end\n  end\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EHICOBOL": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07&?\\x01\\x162?\\x00\\x00\\x05\\xdc\\x00\\x00\\x00\\x00\\xc3\\xd3\\xd6\\xc7\\xc7\\xc9\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-09-20T00:00:00", "modifydate": "2016-11-18T00:00:00", "lines": 1500, "newlines": 0, "modlines": 0, "user": "CLOGGIE"}, "text": "/* REXX exec/edit macro to convert COBOL to 'HILITE'd HTML            */\n/*** trace ?r ***************************************************** \\| *\n*               (C) Copyright Robert AH Prins, 2007-2016               *\n************************************************************************\n*  ------------------------------------------------------------------  *\n* | Date       | By   | Remarks                                      | *\n* |------------+------+----------------------------------------------| *\n* |            |      |                                              | *\n* |------------+------+----------------------------------------------| *\n* | 2016-11-18 | RAHP | Multiple updates/simplifications             | *\n* |------------+------+----------------------------------------------| *\n* | 2013-09-16 | RAHP | Support inline \"*>\" comments                 | *\n* |------------+------+----------------------------------------------| *\n* | 2012-06-25 | RAHP | Add IP address                               | *\n* |------------+------+----------------------------------------------| *\n* | 2010-10-28 | RAHP | Upgrade to Enterprise Cobol 4.2              | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-27 | RAHP | Use pop-up on ISPF to display progress       | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-02 | RAHP | Add selection for short CSS 'em' colors      | *\n* |------------+------+----------------------------------------------| *\n* | 2009-06-23 | RAHP | - translate entities in comment lines        | *\n* |            |      | - assume non-numerics in col 73-80 comment   | *\n* |            |      | - replace '\"' by &quot;                      | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-22 | RAHP | Update comment                               | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-01 | RAHP | Add font selection for generated HTML        | *\n* |------------+------+----------------------------------------------| *\n* | 2009-02-09 | RAHP | RACF problem with 'html' extension @ NVSM    | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-24 | RAHP | Remove sequence numbers                      | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-20 | RAHP | Initial version (copy of EHIPLI)             | *\n* |------------+------+----------------------------------------------| *\n************************************************************************\n* EHICOBOL is a REXX exec/edit macro that analyses COBOL code and      *\n* builds a HTML file with the color attributes as used by ISPF Edit.   *\n*                                                                      *\n* This file can be transferred to the PC by using ISPF Workstation     *\n* Agent. In addition the exec might invoke the Windows application     *\n* associated with file extension \".html\"                               *\n*                                                                      *\n* The exec runs as ISPF edit macro or might be used as line command    *\n* on the extended member list of ISPF List Utility (usually menu       *\n* option 3.4).                                                         *\n*                                                                      *\n* In addition the exec can be invoked on the command line. In this     *\n* case the dataset name has to be supplied as invocation parameter.    *\n*                                                                      *\n* Special thanks to Ken MacKenzie of Pramerica Systems Ireland Ltd for *\n* helping me to get to grips with some of the intricacies of COBOL.    *\n*                                                                      *\n* t_rex will contain the environment. It can be:                       *\n*                                                                      *\n* - TSO     - TSO/ISPF                                                 *\n* - MVS     - z/OS (PGM=IRXJCL)                                        *\n* - SYSTEM  - Regina                                                   *\n* - COMMAND - PC DOS 7/2000                                            *\n* - CMD     - Object REXX (OS/2, Windoze)                              *\n************************************************************************\n* Send questions, suggestions and/or bug reports to:                   *\n*                                                                      *\n* robert@prino.org / robert.ah.prins@gmail.com                         *\n*                                                                      *\n* Robert AH Prins                                                      *\n* Taboralaan 46                                                        *\n* 8400 Oostende                                                        *\n* Belgium                                                              *\n************************************************************************\n* This program is free software: you can redistribute it and/or        *\n* modify it under the terms of the GNU General Public License as       *\n* published by the Free Software Foundation, either version 3 of       *\n* the License, or (at your option) any later version.                  *\n*                                                                      *\n* This program is distributed in the hope that it will be useful,      *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of       *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *\n* GNU General Public License for more details.                         *\n*                                                                      *\n* You should have received a copy of the GNU General Public License    *\n* along with this program. If not, see <http://www.gnu.org/licenses/>  *\n***********************************************************************/\nparse source source\nparse value source with . . moi . . . cmdenv aspace .\n\nt_rex = address()\n\nif t_rex  = 'TSO' &,\n   aspace = 'ISPF' then\n  do\n    \"ispexec vget (zenvir)\"\n    envir = strip(substr(zenvir, 17, 8))\n  end\nelse\n  envir = 'OTHER'\n\nparse arg idsn\n\ncall get_source                /* Read the COBOL program source       */\ncall init_vars                 /* Initialize the global variables     */\ncall build_html                /* Now go on and build the HTML output */\n\ncall ehisupp 'generate_output,'sep','htmlout  || sep ||,\n                                     odsn     || sep ||,\n                                     title    || sep ||,\n                                     header   || sep ||,\n                                     footer   || sep ||,\n                                     htmlfont\n\nif t_rex  = 'TSO' &,\n   aspace = 'ISPF' then\n  if envir \\= 'BATCH' then\n    do\n      /*****************************************************************\n      * Show the resulting dataset, if desired                         *\n      *****************************************************************/\n      if view_html = 'YES' then\n        \"ispexec view dataset(\"odsn\")\"\n\n      /*****************************************************************\n      * Transfer the html file to the PC                               *\n      *****************************************************************/\n      if xfer_wsa = 'YES' then\n        call ehisupp 'xfer_and_show_html,'sep','dir_pc   || sep ||,\n                                                htmlfile || sep ||,\n                                                odsn     || sep ||,\n                                                ipaddr   || sep ||,\n                                                start_browser\n    end\n  else\n    do\n      if macmode then\n        \"isredit end\"\n    end\nexit\n\n/***********************************************************************\n* TRANSLATE_ENTITIES                                                   *\n*                                                                      *\n* This procedure translates special characters to HTML entities        *\n***********************************************************************/\ntranslate_entities: procedure expose special_chars special_html\n  parse arg in\n\n  out = ''\n\n  if translate(in, ' ', special_chars) = in then\n    out = in\n  else\n    do while in \\== ''\n      c = left(in, 1)\n      k = wordpos(c, special_chars)\n\n      if k \\= 0 then\n        out = out || word(special_html, k)\n      else\n        out = out || c\n\n      in = substr(in, 2)\n    end\nreturn out\n\n/***********************************************************************\n* GET_SOURCE:                                                          *\n*                                                                      *\n* Read the COBOL source                                                *\n***********************************************************************/\nget_source:\n  macmode = 0\n  rxdata. = ''\n  rxdata  = ''\n  pgm     = ''\n\n  select\n    when t_rex = 'TSO' then call get_source_tso\n    when t_rex = 'MVS' then call get_source_mvs\n    otherwise               call get_source_pc\n  end\nreturn\n\n/***********************************************************************\n* GET_SOURCE_TSO:                                                      *\n*                                                                      *\n* Read the text when running under TSO                                 *\n***********************************************************************/\nget_source_tso:\n  if aspace = 'ISPF' then\n    \"isredit macro (parm) NOPROCESS\"\n  else\n    rc = 4\n\n  /*********************************************************************\n  * Running as edit macro                                              *\n  *********************************************************************/\n  if rc = 0 then\n    do\n      macmode = 1\n\n      if parm = '?' then\n        do\n          \"isredit ehihelp\" moi\n          exit\n        end\n\n      \"isredit process range HI\"\n      if rc <= 4 then\n        do\n          \"isredit (ZF) = linenum .zfrange\"\n          \"isredit (ZL) = linenum .zlrange\"\n        end\n      else\n        do\n          \"isredit ehihelp\" moi\n          exit\n        end\n\n      \"isredit (DSN) = dataset\"\n      \"isredit (MEM) = member\"\n\n      if mem = '' then\n        idsn = \"'\" || dsn || \"'\"\n      else\n        do\n          pgm  = mem\n          idsn = \"'\" || dsn || '(' || mem || \")'\"\n        end\n\n      /*****************************************************************\n      * Read the full source                                           *\n      *****************************************************************/\n      i = 0\n      do j = +zf to +zl\n        \"isredit (DATALINE) = line\" j\n        if length(dataline) = 80 &,\n           datatype(right(dataline, 8)) = 'NUM' then\n          dataline = substr(dataline, 1, 72)\n\n        i        = i + 1\n        rxdata.i = strip(dataline, 'T')\n      end\n\n      rxdata.0 = i\n      olines   = rxdata.0\n    end\n  /*********************************************************************\n  * Running as TSO command                                             *\n  *********************************************************************/\n  else\n    do\n      if idsn = '' then\n        do\n          msg =     left('Error - No dataset name passed', 75)\n          msg = msg left(moi 'can be used as an edit macro or',\n                         'as a line command on the ISPF', 75)\n          msg = msg left('dataset list utility. In both cases the',\n                         'dataset name will be automatically', 75)\n          msg = msg left('determined.', 75)\n          msg = msg left('If you call' moi 'on the command line you',\n                         'have to pass the name of the', 75)\n          msg = msg left('dataset to be processed, e.g.', 75)\n          msg = msg left('Command ===>' moi,\n                         '''my.cobol.dataset(test)''', 75)\n\n          zedsmsg = ''\n          zedlmsg = msg\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' &,\n             envir \\= 'BATCH' then\n            \"ispexec setmsg msg(ISRZ001)\"\n          else\n            do while msg \\= ''\n              say left(msg, 75)\n              msg = substr(msg, 76)\n            end\n\n          exit 8\n        end\n\n      /*****************************************************************\n      * Force single quotes around dataset name and check if it's OK   *\n      *****************************************************************/\n      idsn = \"'\" || strip(idsn,, '''') || \"'\"\n\n      if sysdsn(idsn) \\= 'OK' then\n        do\n          say 'Error - Dataset' idsn 'could not be found'\n          exit 8\n        end\n\n      /*****************************************************************\n      * Extract member name, if present                                *\n      *****************************************************************/\n      parse var idsn . '(' mem ')'\n\n      if mem \\= '' then\n        pgm = mem\n\n      /*****************************************************************\n      * Read the source                                                *\n      *****************************************************************/\n      dynlib = 'dyn'random(99999)\n\n      \"alloc f(\"dynlib\") da(\"idsn\") shr reu\"\n      if rc > 0 then\n        do\n          say 'Error - Dataset' idsn 'could not be allocated - rc' rc\n          exit 8\n        end\n\n      \"execio * diskr\" dynlib \"(finis)\"\n      if rc > 0 then\n        do\n          say 'Error - Dataset' idsn 'could not be read - rc' rc\n          exit 8\n        end\n\n      \"free f(\"dynlib\")\"\n\n      /*****************************************************************\n      * Pre-process the source, removing sequence numbers              *\n      *****************************************************************/\n      olines = queued()\n\n      i = 0\n      do queued()\n        parse pull dataline\n\n        if length(dataline) = 80 &,\n           datatype(right(dataline, 8)) = 'NUM' then\n          dataline = substr(dataline, 1, 72)\n\n        i        = i + 1\n        rxdata.i = strip(dataline, 'T')\n      end\n    end\nreturn\n\n/***********************************************************************\n* GET_SOURCE_PC:                                                       *\n*                                                                      *\n* Read the text when running on the PC                                 *\n***********************************************************************/\nget_source_pc:\n  if idsn = '' then\n    do\n      say 'Syntax:' moi 'file.cobol'\n      exit 8\n    end\n\n  do i = 1 by 1 while lines(idsn)\n    dataline = linein(idsn)\n\n    if length(dataline) = 80 &,\n       datatype(right(dataline, 8)) = 'NUM' then\n      dataline = substr(dataline, 1, 72)\n\n    rxdata.i = strip(dataline, 'T')\n  end\n\n  rxdata.0 = i - 1\n  olines   = rxdata.0\nreturn\n\n/***********************************************************************\n* INIT_VARS:                                                           *\n*                                                                      *\n* This procedure initialises the global variables                      *\n***********************************************************************/\ninit_vars:\n  /*********************************************************************\n  * Parameter separator for EHISUPP exec                               *\n  *********************************************************************/\n  sep = x2c(00)d2c(random(2**16))x2c(ff)d2c(random(2**16))x2c(00)\n  sep = translate(sep, x2c(bababababa), ' <>&\"')\n\n  /*********************************************************************\n  * Get processing options                                             *\n  *********************************************************************/\n  opt = ehisupp('get_options,'sep','moi)\n  parse value opt with view_html     (sep),\n                       xfer_wsa      (sep),\n                       start_browser (sep),\n                       ispf_edit     (sep),\n                       show_progress (sep),\n                       dir_pc        (sep),\n                       htmlfont      (sep),\n                       ipaddr        (sep) .\n\n  /*********************************************************************\n  * Temporary output dataset                                           *\n  *********************************************************************/\n  if mem \\= '' then\n    odsn = \"'\" || userid() || '.' || mem || \".cobol.html'\"\n  else\n    odsn = \"'\" || userid() || '.' || moi || \".cobol.html'\"\n\n  /*********************************************************************\n  * Text strings for title, header and footer                          *\n  *********************************************************************/\n  title  = 'COBOL source:' strip(idsn,, '''')\n  header = 'COBOL source:' strip(idsn,, '''')\n  now    = date('S')\n  now    = left(now, 4)'-'substr(now, 5, 2)'-'right(now, 2)'T'time()\n  footer = 'Generated on' now 'by' userid() 'with' moi\n\n  /*********************************************************************\n  * Name of generated html file on PC                                  *\n  *********************************************************************/\n  if pgm \\= '' then\n    htmlfile = pgm || '.html'\n  else\n    htmlfile = 'cobolpgm.html'\n\n  /*********************************************************************\n  * HTML colors                                                        *\n  *                                                                    *\n  * - lime(green) - default                                            *\n  * - red         - keywords                                           *\n  * - white       - quoted strings                                     *\n  * - aqua(turq)  - comments                                           *\n  * - yellow      - speceal characters                                 *\n  * - blue        - directives                                         *\n  * - blue        - in EXEC statements                                 *\n  *********************************************************************/\n  col_dft        = '<em class=\"l\">'                        /* lime    */\n  col_key        = '<em class=\"r\">'                        /* red     */\n  col_str        = '<em class=\"w\">'                        /* white   */\n  col_com        = '<em class=\"t\">'                        /* turq    */\n  col_spc        = '<em class=\"y\">'                        /* yellow  */\n  col_dir        = '<em class=\"b\">'                        /* blue    */\n  col_exe        = '<em class=\"b\">'                        /* blue    */\n\n  /*********************************************************************\n  * Colors for nested parentheses                                      *\n  *********************************************************************/\n  col_par.0      = '<em class=\"f\">'                        /* fuchsia */\n  col_par.1      = '<em class=\"y\">'                        /* yellow  */\n  col_par.2      = '<em class=\"w\">'                        /* white   */\n  col_par.3      = '<em class=\"r\">'                        /* red     */\n  col_par.4      = '<em class=\"t\">'                        /* turq    */\n\n  /*********************************************************************\n  * HTML special characters and their defined entities                 *\n  *********************************************************************/\n  special_chars  = '< > & \"'\n  special_html   = '&lt; &gt; &amp; &quot;'\n\n  /*********************************************************************\n  * Characters to be highlighted                                       *\n  *********************************************************************/\n  special_hilite = '.'\n\n  /*********************************************************************\n  * Characters separating words                                        *\n  *********************************************************************/\n  separator      = ' ,.;'\nreturn\n\n/***********************************************************************\n* BUILD_HTML:                                                          *\n*                                                                      *\n* This procedure builds the HTML output                                *\n***********************************************************************/\nbuild_html:\n  /*********************************************************************\n  * Load the list of COBOL keywords                                    *\n  *********************************************************************/\n  call build_list_of_keywords\n\n  /*********************************************************************\n  * Switches                                                           *\n  *********************************************************************/\n  kwbegin  = 1                  /* Do we expect a new keyword ?       */\n\n  in_com   = 0                  /* Inside a comment                   */\n  in_apost = 0                  /* Inside a '(apost) delimited string */\n  in_quote = 0                  /* Inside a \"(quote) delimited string */\n  in_dir   = 0                  /* Inside a compiler directive        */\n  in_exec  = 0                  /* Inside an EXEC ... END-EXEC group  */\n  level    = 0                  /* Nested comment levels              */\n  paren    = 1                  /* Nested parentheses level           */\n\n  /*********************************************************************\n  * Initialize the html output string                                  *\n  *********************************************************************/\n  if ispf_edit = 'ISPF' then\n    htmlout = x2c(ff)ispf_edit || x2c(ff)right(olines, 6, '0')x2c(ff)\n  else\n    htmlout = ''\n\n  /*********************************************************************\n  * Loop over the code                                                 *\n  *********************************************************************/\n  lip = time('E')\n  lip = 0\n\n  /*********************************************************************\n  * Process (if present) any 'CBL' or 'PROCESS' statements             *\n  *********************************************************************/\n  do r = 1 by 1 while translate(substr(rxdata.r, 7, 3)) = 'CBL' |,\n                      translate(substr(rxdata.r, 7, 8)) = 'PROCESS'\n    if left(rxdata.r, 6) = '      ' then\n      seq = '      '\n    else\n      seq = col_spc || left(rxdata.r, 6)'</em>'\n\n    htmlout = htmlout || seq || col_dir ||,\n              translate_entities(substr(rxdata.r, 7))'</em><br>'\n  end\n\n  do r = r to rxdata.0\n    kwbegin = 1\n    rxdata  = rxdata.r\n    lip     = r\n\n    if left(rxdata, 6) = '      ' then\n      tempout = '      '\n    else\n      tempout = col_spc || left(rxdata.r, 6)'</em>'\n\n    rxdata = substr(rxdata, 7)\n\n    /*******************************************************************\n    * Display (optional) progress messages                             *\n    *******************************************************************/\n    if show_progress > 0 then\n      if lip >                  0 &,\n         lip // show_progress = 0 then\n        do\n          progress = 'Elapsed time' right(time('E'), 12),\n                     '- lines processed' right(lip, 6)\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' then\n            rc = ehisupp('monitor,'moi 'Progress,'progress)\n          else\n            say progress\n\n          lip = -lip\n        end\n\n    /*******************************************************************\n    * Get column 7 data                                                *\n    *******************************************************************/\n    c7 = left(rxdata, 1)\n\n    /*******************************************************************\n    * Process comment                                                  *\n    *******************************************************************/\n    if c7 = '*' |,\n       c7 = '/' then\n      do\n        comment = strip(rxdata, 'T')\n\n        htmlout = htmlout || tempout ||,\n                  col_com || translate_entities(comment) || '</em><br>'\n\n        iterate r\n      end\n\n    /*******************************************************************\n    * Process other column 7 characters                                *\n    *******************************************************************/\n    tempout = tempout || c7\n    tail    = substr(rxdata, 67)\n    rxdata  = substr(rxdata, 2, 65)\n\n    do while rxdata \\== ''\n      c1 = left(rxdata, 1)\n      c2 = left(rxdata, 2)\n      c3 = left(rxdata, 3)                      /* ' *>' comment      */\n\n      /*****************************************************************\n      * Is it a special character?                                     *\n      *****************************************************************/\n      sc = wordpos(c1, special_chars)\n\n      /*****************************************************************\n      * Is it a special hilite character?                              *\n      *****************************************************************/\n      sh = pos(c1, special_hilite)\n      if c2 \\== '. ' then\n        sh = 0\n\n      kw = ''                                   /* Initialize keyword */\n\n      /*****************************************************************\n      * If we are at the beginning of a keyword ...                    *\n      *****************************************************************/\n      if kwbegin            = 1 &,\n         pos(c1, separator) = 0 then\n        do\n          parse upper var rxdata kw\n\n          /*************************************************************\n          * ... we search the next separator ...                       *\n          *************************************************************/\n          sep_pos = verify(kw, separator, 'M')\n\n          /*************************************************************\n          * ... and save the keyword if separator is found             *\n          *************************************************************/\n          if sep_pos > 0 then\n            kw = left(kw, sep_pos - 1)\n\n          kwbegin = 0\n        end\n\n      /*****************************************************************\n      * If we are on a separator we keep in mind that it's the         *\n      * beginning of a new keyword                                     *\n      *****************************************************************/\n      if pos(c1, separator) > 0 then\n        kwbegin = 1\n\n      /*****************************************************************\n      * Determine the HTML attributes for the data\n      *****************************************************************/\n      select\n        /***************************************************************\n        * Spaces are kept unchanged - process multiple spaces in one   *\n        * go|                                                          *\n        ***************************************************************/\n        when c1  == ' ' &,\n             c3 \\== ' *>' then\n          do\n            n = verify(rxdata, ' ')\n            if n \\= 0 then\n              do\n                tempout = tempout || left(rxdata, n - 1)\n                rxdata  = substr(rxdata, n)\n              end\n            else\n              do\n                tempout = tempout || rxdata\n                rxdata  = ''\n              end\n          end\n\n        /***************************************************************\n        * End of single quoted string                                  *\n        ***************************************************************/\n        when in_apost &,\n             c1 = \"'\" then\n            do\n              in_apost = 0\n\n              tempout  = tempout || \"'</em>\"\n              rxdata   = substr(rxdata, 2)\n            end\n\n        /***************************************************************\n        * End of double quoted string                                  *\n        ***************************************************************/\n        when in_quote &,\n             c1 = '\"' then\n            do\n              in_quote = 0\n\n              tempout  = tempout || '&quot;</em>'\n              rxdata   = substr(rxdata, 2)\n            end\n\n        /***************************************************************\n        * Start of single quoted string                                *\n        ***************************************************************/\n        when c1 = \"'\"  &,\n             \\in_quote &,\n             \\in_com then\n          do\n            in_apost = 1\n\n            tempout  = tempout || col_str\"'\"\n            rxdata   = substr(rxdata, 2)\n          end\n\n        /***************************************************************\n        * Start of double quoted string                                *\n        ***************************************************************/\n        when c1 = '\"'  &,\n             \\in_apost &,\n             \\in_com then\n          do\n            in_quote = 1\n\n            tempout  = tempout || col_str || '&quot;'\n            rxdata   = substr(rxdata, 2)\n          end\n\n        /***************************************************************\n        * An in-line comment                                           *\n        ***************************************************************/\n        when c3 == ' *>' then\n          do\n            tempout = tempout || col_com || ' *&gt;' ||,\n                      strip(substr(rxdata, 4), \"T\") || '</em>'\n            rxdata  = ''\n          end\n\n        /***************************************************************\n        * A special character has to be translated and highlighted     *\n        ***************************************************************/\n        when sc > 0    &,\n             sh > 0    &,\n             \\in_dir   &,\n             \\in_exec  &,\n             \\in_com   &,\n             \\in_apost &,\n             \\in_quote then\n          do\n            tempout = tempout || col_spc || word(special_html, sc) ||,\n                      '</em>'\n            rxdata  = substr(rxdata, 2)\n          end\n\n        /***************************************************************\n        * A special character has to be translated                     *\n        ***************************************************************/\n        when sc > 0 then\n          do\n            tempout = tempout || word(special_html, sc)\n            rxdata  = substr(rxdata, 2)\n          end\n\n        /***************************************************************\n        * '.' End-of-Sentence character                                *\n        ***************************************************************/\n        when c2 = '. ' &,\n             in_dir    &,\n             \\in_exec  &,\n             \\in_com   &,\n             \\in_apost &,\n             \\in_quote then\n          do\n            tempout = tempout || col_spc || c1'</em>'\n            rxdata  = substr(rxdata, 2)\n            in_dir  = 0\n\n            select\n              /*********************************************************\n              * Directive followed by comment                          *\n              *********************************************************/\n              when kcol = 2 then\n                do\n                  tempout = tempout || col_com ||,\n                            translate_entities(strip(rxdata, 'T')) ||,\n                            '</em>'\n                  rxdata  = ''\n                end\n\n              /*********************************************************\n              * Directive may(3) or must(4) be followed by a '.'       *\n              *********************************************************/\n              when kcol = 3 |,\n                   kcol = 4 then\n                tempout = tempout || '</em>'\n\n              otherwise nop\n            end\n\n            kcol = 0\n          end\n\n        /***************************************************************\n        * A special character has to be highlighted                    *\n        ***************************************************************/\n        when sh > 0    &,\n             \\in_dir   &,\n             \\in_exec  &,\n             \\in_com   &,\n             \\in_apost &,\n             \\in_quote then\n          do\n            tempout = tempout || col_spc || c1'</em>'\n            rxdata  = substr(rxdata, 2)\n          end\n\n        /***************************************************************\n        * Ignore all keywords except 'END-EXEC' when in 'EXEC' mode    *\n        ***************************************************************/\n        when keyword.kw   \\= 0 &,\n             translate(kw) = 'END-EXEC' &,\n             in_exec   &,\n             \\in_dir   &,\n             \\in_com   &,\n             \\in_apost &,\n             \\in_quote then\n          do\n            in_exec = 0\n            kw      = left(rxdata, length(kw))\n            tempout = tempout || kw || '</em>'\n            rxdata  = substr(rxdata, length(kw) + 1)\n          end\n\n        /***************************************************************\n        * It's a keyword                                               *\n        ***************************************************************/\n        when keyword.kw \\= 0 &,\n             \\in_dir         &,\n             \\in_exec        &,\n             \\in_com         &,\n             \\in_apost       &,\n             \\in_quote then\n          do\n            kcol = keyword.kw\n            kw   = left(rxdata, length(kw))\n\n            select\n              /*********************************************************\n              * Followed by '. Comment'                                *\n              *********************************************************/\n              when kcol = 2 then\n                do\n                  in_dir  = 1\n                  tempout = tempout || col_key\n                end\n\n              /*********************************************************\n              * Followed by directive (3: '.' not req'd, 4: '.' req'd  *\n              *********************************************************/\n              when kcol = 3 |,\n                   kcol = 4 then\n                do\n                  in_dir  = 1\n                  tempout = tempout || col_dir\n                end\n\n              /*********************************************************\n              * 'EXEC' - remain in color until 'END-EXEC'              *\n              *********************************************************/\n              when kcol = 5 then\n                do\n                  tempout = tempout || col_dir\n                  in_exec = 1\n                end\n\n              otherwise\n                do\n                  tempout = tempout || col_key\n                  kcol    = 0\n                end\n            end\n\n            tempout = tempout || kw\n\n            if kcol <= 2 then\n              tempout = tempout || '</em>'\n\n            rxdata = substr(rxdata, length(kw) + 1)\n          end\n\n        /***************************************************************\n        * It's a left parenthesis                                      *\n        ***************************************************************/\n        when c1 = '('  &,\n             \\in_dir   &,\n             \\in_exec  &,\n             \\in_com   &,\n             \\in_apost &,\n             \\in_quote then\n          do\n            paren   = (paren + 1) // 5\n            tempout = tempout || col_par.paren || '(</em>'\n            rxdata  = substr(rxdata, 2)\n          end\n\n        /***************************************************************\n        * It's a right parenthesis                                     *\n        ***************************************************************/\n        when c1 = ')'  &,\n             \\in_dir   &,\n             \\in_exec  &,\n             \\in_com   &,\n             \\in_apost &,\n             \\in_quote then\n          do\n            tempout = tempout || col_par.paren')</em>'\n            paren   = (paren + 4) // 5\n            rxdata  = substr(rxdata, 2)\n          end\n\n        /***************************************************************\n        * Anything else                                                *\n        ***************************************************************/\n        otherwise\n          do\n            tempout = tempout || c1\n            rxdata  = substr(rxdata, 2)\n          end\n      end\n    end\n\n    /*******************************************************************\n    * If still in string, language rules will enforce continuation     *\n    *******************************************************************/\n    if in_apost |,\n       in_quote then\n      do\n        in_apost = 0\n        in_quote = 0\n        tempout  = tempout || '</em>'\n      end\n\n    /*******************************************************************\n    * Directives not requiring a terminating '.' end at end-of-line    *\n    *******************************************************************/\n    if kcol = 3 then\n      do\n        kcol    = 0\n        in_dir  = 0\n        tempout = tempout || '</em>'\n      end\n\n    /*******************************************************************\n    * Append tail                                                      *\n    *******************************************************************/\n    if tail \\= '' then\n      tempout = tempout || col_com || tail || '</em>'\n\n    /*******************************************************************\n    * Append data to final result                                      *\n    *******************************************************************/\n    htmlout = htmlout || tempout || '<br>'\n  end\nreturn\n\n/***********************************************************************\n* BUILD_LIST_OF_KEYWORDS:                                              *\n*                                                                      *\n* This procedure loads the list of COBOL keywords                      *\n***********************************************************************/\nbuild_list_of_keywords:\n  signal get_keywords\n\n/*\n 1ACCEPT\n 1ACCESS\n 1ADD\n 1ADDRESS\n 1ADVANCING\n 1AFTER\n 1ALL\n 1ALPHABET\n 1ALPHABETIC\n 1ALPHABETIC-LOWER\n 1ALPHABETIC-UPPER\n 1ALPHANUMERIC\n 1ALPHANUMERIC-EDITED\n 1ALSO\n 1ALTER\n 1ALTERNATE\n 1AND\n 1ANY\n 1APPLY\n 1ARE\n 1AREA\n 1AREAS\n 1ASCENDING\n 1ASSIGN\n 1AT\n 1ATTRIBUTES\n 1BEFORE\n 1BEGINNING\n 1BINARY\n 1BLANK\n 1BLOCK\n 1BOTTOM\n 1BY\n 1CALL\n 1CANCEL\n 1CD\n 1CF\n 1CH\n 1CHARACTER\n 1CHARACTERS\n 1CLASS\n 1CLASS-ID\n 1CLOCK-UNITS\n 1CLOSE\n 1COBOL\n 1CODE\n 1CODE-SET\n 1COLLATING\n 1COLUMN\n 1COM-REG\n 1COMMA\n 1COMMON\n 1COMMUNICATION\n 1COMP\n 1COMP-1\n 1COMP-2\n 1COMP-3\n 1COMP-4\n 1COMP-5\n 1COMPUTATIONAL\n 1COMPUTATIONAL-1\n 1COMPUTATIONAL-2\n 1COMPUTATIONAL-3\n 1COMPUTATIONAL-4\n 1COMPUTATIONAL-5\n 1COMPUTE\n 1CONFIGURATION\n 1CONTAINS\n 1CONTENT\n 1CONTINUE\n 1CONTROL\n 1CONTROLS\n 1CONVERTING\n 1CORR\n 1CORRESPONDING\n 1COUNT\n 1CURRENCY\n 1DATA\n 1DATE\n 1DAY\n 1DAY-OF-WEEK\n 1DBCS\n 1DE\n 1DEBUG-CONTENTS\n 1DEBUG-ITEM\n 1DEBUG-LINE\n 1DEBUG-NAME\n 1DEBUG-SUB-1\n 1DEBUG-SUB-2\n 1DEBUG-SUB-3\n 1DEBUGGING\n 1DECIMAL-POINT\n 1DECLARATIVES\n 1DELETE\n 1DELIMITED\n 1DELIMITER\n 1DEPENDING\n 1DESCENDING\n 1DESTINATION\n 1DETAIL\n 1DISABLE\n 1DISPLAY\n 1DISPLAY-1\n 1DIVIDE\n 1DIVISION\n 1DOWN\n 1DUPLICATES\n 1DYNAMIC\n 1EGCS\n 1EGI\n 1ELSE\n 1EMI\n 1ENABLE\n 1ENCODING\n 1END\n 1END-ADD\n 1END-CALL\n 1END-COMPUTE\n 1END-DELETE\n 1END-DIVIDE\n 1END-EVALUATE\n 1END-EXEC\n 1END-IF\n 1END-INVOKE\n 1END-MULTIPLY\n 1END-OF-PAGE\n 1END-PERFORM\n 1END-READ\n 1END-RECEIVE\n 1END-RETURN\n 1END-REWRITE\n 1END-SEARCH\n 1END-START\n 1END-STRING\n 1END-SUBTRACT\n 1END-UNSTRING\n 1END-WRITE\n 1END-XML\n 1ENDING\n 1ENTRY\n 1ENVIRONMENT\n 1EOP\n 1EQUAL\n 1ERROR\n 1ESI\n 1EVALUATE\n 1EVERY\n 1EXCEPTION\n 1EXECUTE\n 1EXIT\n 1EXTEND\n 1EXTERNAL\n 1FACTORY\n 1FALSE\n 1FD\n 1FILE\n 1FILE-CONTROL\n 1FILLER\n 1FINAL\n 1FIRST\n 1FOOTING\n 1FOR\n 1FORMAT\n 1FROM\n 1FUNCTION-POINTER\n 1GENERATE\n 1GIVING\n 1GLOBAL\n 1GO\n 1GOBACK\n 1GREATER\n 1GROUP\n 1HEADING\n 1HIGH-VALUE\n 1HIGH-VALUES\n 1I-O\n 1I-O-CONTROL\n 1ID\n 1IDENTIFICATION\n 1IF\n 1IN\n 1INDEX\n 1INDEXED\n 1INDICATE\n 1INHERITS\n 1INITIAL\n 1INITIALIZE\n 1INITIATE\n 1INPUT\n 1INPUT-OUTPUT\n 1INSPECT\n 1INTO\n 1INVALID\n 1INVOKE\n 1IS\n 1JNIENVPTR\n 1JUST\n 1JUSTIFIED\n 1KANJI\n 1KEY\n 1LABEL\n 1LAST\n 1LEADING\n 1LEFT\n 1LENGTH\n 1LESS\n 1LIMIT\n 1LIMITS\n 1LINAGE\n 1LINAGE-COUNTER\n 1LINE\n 1LINE-COUNTER\n 1LINES\n 1LINKAGE\n 1LOCAL-STORAGE\n 1LOCK\n 1LOW-VALUE\n 1LOW-VALUES\n 1MEMORY\n 1MERGE\n 1MESSAGE\n 1METHOD\n 1METHOD-ID\n 1MODE\n 1MODULES\n 1MORE-LABELS\n 1MOVE\n 1MULTIPLE\n 1MULTIPLY\n 1NAME\n 1NAMESPACE\n 1NAMESPACE-PREFIX\n 1NATIONAL\n 1NATIVE\n 1NEGATIVE\n 1NEXT\n 1NO\n 1NOT\n 1NULL\n 1NULLS\n 1NUMBER\n 1NUMERIC\n 1NUMERIC-EDITED\n 1OBJECT\n 1OBJECT-COMPUTER\n 1OCCURS\n 1OF\n 1OFF\n 1OMITTED\n 1ON\n 1OPEN\n 1OPTIONAL\n 1OR\n 1ORDER\n 1ORGANIZATION\n 1OTHER\n 1OUTPUT\n 1OVERFLOW\n 1OVERRIDE\n 1PACKED-DECIMAL\n 1PADDING\n 1PAGE\n 1PAGE-COUNTER\n 1PERFORM\n 1PF\n 1PH\n 1PIC\n 1PICTURE\n 1PLUS\n 1POINTER\n 1POSITION\n 1POSITIVE\n 1PRINTING\n 1PROCEDURE\n 1PROCEDURE-POINTER\n 1PROCEDURES\n 1PROCEED\n 1PROCESSING\n 1PROGRAM\n 1PROGRAM-ID\n 1PURGE\n 1QUEUE\n 1QUOTE\n 1QUOTES\n 1RANDOM\n 1RD\n 1READ\n 1RECEIVE\n 1RECORD\n 1RECORDING\n 1RECORDS\n 1RECURSIVE\n 1REDEFINES\n 1REEL\n 1REFERENCE\n 1REFERENCES\n 1RELATIVE\n 1RELEASE\n 1RELOAD\n 1REMAINDER\n 1REMOVAL\n 1RENAMES\n 1REPLACING\n 1REPORT\n 1REPORTING\n 1REPORTS\n 1REPOSITORY\n 1RERUN\n 1RESERVE\n 1RETURN\n 1RETURN-CODE\n 1RETURNING\n 1REVERSED\n 1REWIND\n 1REWRITE\n 1RF\n 1RH\n 1RIGHT\n 1ROUNDED\n 1RUN\n 1SAME\n 1SD\n 1SEARCH\n 1SECTION\n 1SEGMENT\n 1SEGMENT-LIMIT\n 1SELECT\n 1SELF\n 1SEND\n 1SENTENCE\n 1SEPARATE\n 1SEQUENCE\n 1SEQUENTIAL\n 1SET\n 1SHIFT-IN\n 1SHIFT-OUT\n 1SIGN\n 1SIZE\n 1SORT\n 1SORT-CONTROL\n 1SORT-CORE-SIZE\n 1SORT-FILE-SIZE\n 1SORT-MERGE\n 1SORT-MESSAGE\n 1SORT-MODE-SIZE\n 1SORT-RETURN\n 1SOURCE\n 1SOURCE-COMPUTER\n 1SPACE\n 1SPACES\n 1SPECIAL-NAMES\n 1STANDARD\n 1STANDARD-1\n 1STANDARD-2\n 1START\n 1STATUS\n 1STOP\n 1STRING\n 1SUB-QUEUE-1\n 1SUB-QUEUE-2\n 1SUB-QUEUE-3\n 1SUBTRACT\n 1SUM\n 1SUPER\n 1SUPPRESS\n 1SYMBOLIC\n 1SYNC\n 1SYNCHRONIZED\n 1TABLE\n 1TALLY\n 1TALLYING\n 1TAPE\n 1TERMINAL\n 1TERMINATE\n 1TEST\n 1TEXT\n 1THAN\n 1THEN\n 1THROUGH\n 1THRU\n 1TIME\n 1TIMES\n 1TO\n 1TOP\n 1TRACE\n 1TRAILING\n 1TRUE\n 1TYPE\n 1UNIT\n 1UNSTRING\n 1UNTIL\n 1UP\n 1UPON\n 1USAGE\n 1USING\n 1VALIDATING\n 1VALUE\n 1VALUES\n 1VARYING\n 1WHEN\n 1WHEN-COMPILED\n 1WITH\n 1WORDS\n 1WORKING-STORAGE\n 1WRITE\n 1WRITE-ONLY\n 1XML\n 1XML-CODE\n 1XML-DECLARATION\n 1XML-EVENT\n 1XML-INFORMATION\n 1XML-NAMESPACE\n 1XML-NAMESPACE-PREFIX\n 1XML-NNAMESPACE\n 1XML-NNAMESPACE-PREFIX\n 1XML-NTEXT\n 1XML-SCHEMA\n 1XML-TEXT\n 1YYYYDDD\n 1YYYYMMDD\n 1ZERO\n 1ZEROES\n 1ZEROS\n\n* Enterprise Cobol V4.2 Language Reference - Not in ISPF|\n\n 1GROUP-USAGE\n 1NATIONAL-EDITED\n 1PASSWORD\n 1SQL\n\n* Followed by comment\n\n 2AUTHOR\n 2DATE-COMPILED\n 2DATE-WRITTEN\n 2INSTALLATION\n 2SECURITY\n\n* In 'ISP.SISPSAMP(ISRPXASM)'\n\n 1METACLASS\n 1PARSE\n\n* Why is QQQ highlighted in reverse\n\n 1FUNCTION\n\n* Compiler directives with optional '.'\n\n 3BASIS\n 3CBL\n 3EJECT\n 3INSERT\n 3SERVICE\n 3SKIP1\n 3SKIP2\n 3SKIP3\n 3TITLE\n 3USE\n\n* Not in 'ISP.SISPSAMP(ISRPXASM)' but correctly highlighted...\n\n 3PROCESS\n\n* Compiler directives with mandatory '.'\n\n 4COPY\n 4ENTER\n 4READY\n 4REPLACE\n 4RESET\n\n* Compiler directives running until END-....\n\n 5EXEC\n\n* Enterprise Cobol V4.2 Language Reference - \"Potential Reserved Words\"\n*\n* ACTIVE-CLASS\n* ALIGNED\n* ALLOCATE\n* ANYCASE\n* B-AND\n* B-NOT\n* B-OR\n* B-XOR\n* BASED\n* BINARY-CHAR\n* BINARY-DOUBLE\n* BINARY-LONG\n* BINARY-SHORT\n* BIT\n* BOOLEAN\n* COL\n* COLS\n* COLUMNS\n* CONDITION\n* CONSTANT\n* CRT\n* CURSOR\n* DATA-POINTER\n* DEFAULT\n* EC\n* END-ACCEPT\n* END-DISPLAY\n* EO\n* EXCEPTION-OBJECT\n* FLOAT-EXTENDED\n* FLOAT-LONG\n* FLOAT-SHORT\n* FORMAT\n* FREE\n* FUNCTION-ID\n* GET\n* INTERFACE\n* INTERFACE-ID\n* LOCALE\n* MINUS\n* NESTED\n* OBJECT-REFERENCE\n* OPTIONS\n* PRESENT\n* PROGRAM-POINTER\n* PROPERTY\n* PROTOTYPE\n* RAISE\n* RAISING\n* RESUME\n* RETRY\n* SCREEN\n* SHARING\n* SOURCES\n* SYSTEM-DEFAULT\n* TYPEDEF\n* UNIVERSAL\n* UNLOCK\n* USER-DEFAULT\n* VAL-STATUS\n* VALID\n* VALIDATE\n* VALIDATE-STATUS\n*/\n\nget_keywords:\n  keyword. = 0\n\n  do i = sigl + 3 until substr(sourceline(i), 1, 2) = '*' || '/'\n    kw = strip(sourceline(i))\n\n    /*******************************************************************\n    * Skip blank and 'comment' lines                                   *\n    *******************************************************************/\n    if kw          = '' |,\n       left(kw, 1) = '*' then\n      iterate i\n\n    vk = left(kw, 1)\n    kw = substr(kw, 2)\n\n    keyword.kw = vk\n  end\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EHIHELP": {"ttr": 1544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x11\\x01\\x07$/\\x01\\x166\\x0f!\\x11\\x01!\\x00\\x00\\x00\\x00\\xd7\\xd9\\xc9\\xd5\\xd6@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-08-30T00:00:00", "modifydate": "2016-12-25T21:11:11", "lines": 289, "newlines": 0, "modlines": 0, "user": "PRINO"}, "text": "/* REXX exec to display 'help' screen for the EHIxxxx macros          */\n/*** trace ?r ***************************************************** \\| *\n*               (C) Copyright Robert AH Prins, 2007-2016               *\n************************************************************************\n*  ------------------------------------------------------------------  *\n* | Date       | By   | Remarks                                      | *\n* |------------+------+----------------------------------------------| *\n* |            |      |                                              | *\n* |------------+------+----------------------------------------------| *\n* | 2016-11-18 | RAHP | Update for changed options                   | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-02 | RAHP | Add help for Compact HTML option             | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-22 | RAHP | Update comment                               | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-01 | RAHP | Add help for font selection item             | *\n* |------------+------+----------------------------------------------| *\n* | 2009-02-09 | RAHP | RACF problem with 'html' extension @ NVSM    | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-24 | RAHP | Additional help                              | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-18 | RAHP | Add GPL V3 License                           | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-06 | RAHP | Cater for PC environment                     | *\n* |------------+------+----------------------------------------------| *\n* | 2007-08-30 | RAHP | Initial version                              | *\n* |------------+------+----------------------------------------------| *\n************************************************************************\n* EHIHELP is a REXX exec containing the 'HELP' screens for the various *\n* other EHIxxxx execs.                                                 *\n*                                                                      *\n* t_rex will contain the environment. It can be:                       *\n*                                                                      *\n* - TSO     - TSO/ISPF                                                 *\n* - MVS     - z/OS (PGM=IRXJCL)                                        *\n* - SYSTEM  - Regina                                                   *\n* - COMMAND - PC DOS 7/2000                                           *\n* - CMD     - Object REXX (OS/2, Windoze)                              *\n************************************************************************\n* Send questions, suggestions and/or bug reports to:                   *\n*                                                                      *\n* robert@prino.org / robert.ah.prins@gmail.com                         *\n*                                                                      *\n* Robert AH Prins                                                      *\n* Taboralaan 46                                                        *\n* 8400 Oostende                                                        *\n* Belgium                                                              *\n************************************************************************\n* This program is free software: you can redistribute it and/or        *\n* modify it under the terms of the GNU General Public License as       *\n* published by the Free Software Foundation, either version 3 of       *\n* the License, or (at your option) any later version.                  *\n*                                                                      *\n* This program is distributed in the hope that it will be useful,      *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of       *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *\n* GNU General Public License for more details.                         *\n*                                                                      *\n* You should have received a copy of the GNU General Public License    *\n* along with this program. If not, see <http://www.gnu.org/licenses/>  *\n***********************************************************************/\nparse source source\nparse value source with . . moi . . . cmdenv aspace .\n\nt_rex   = address()\nmacmode = 0\n\nif t_rex  = 'TSO' &,\n   aspace = 'ISPF' then\n  do\n    macmode = 1\n    \"isredit macro (parm)\"\n  end\nelse\n  arg parm\n\nparm = translate(parm)\n\nline.  = ''\ntype.  = 'NOTE'\ni      = 1\n\ntext   = 'The' parm 'edit macro'\nline.i = center(text, 72)\ntype.i = 'MSG'\ni      = i + 1\nline.i = center(left('~', length(text), '~'), 72)\ntype.i = 'MSG'\ni      = i + 1\nline.i = center(' Use DOWN to read all \"HELP\" screens ', 72, '*')\ntype.i = 'MSG'\n\ni      = i + 2\nline.i = '  'center('(C) Copyright Robert AH Prins, 2007-' ||,\n         left(date('S'), 4), 70)\n\ni      = i + 2\nline.i = '  The' parm 'edit macro can be used to convert all',\n         '(or part) of the'\ni      = i + 1\nline.i = '  member being edited to HTML, with coloring that',\n         'matches as closely'\ni      = i + 1\nline.i = '  as possible the HILITE-ing that the ISPF editor',\n         'provides after the'\ni      = i + 1\nline.i = '  \"HI RESET\" and \"HI PAREN\" commands.'\n\ni      = i + 2\nline.i = '  The generated HTML file can (optionally) be',\n         'downloaded to a PC and'\ni      = i + 1\nline.i = '  (optionally) be displayed using the application',\n         'that is associated'\ni      = i + 1\nline.i = '  with the ''.html'' extension (eg Firefox).'\n\ni      = i + 2\nline.i = '  Usage:'\ntype.i = 'MSG'\n\ni      = i + 2\nline.i = '  - Full member'\ntype.i = 'MSG'\n\ni      = i + 2\nline.i = '    To convert a whole member (Warning: this may',\n         'take considerable'\ni      = i + 1\nline.i = '    time on large members!) just enter \"'parm'\" on the',\n         'command line'\ni      = i + 1\nline.i = '    and press ENTER.'\n\ni      = i + 2\nline.i = '  - Partial member (This option is ignored for EHISUPC)'\ntype.i = 'MSG'\n\ni      = i + 2\nline.i = '    To convert selected lines from the current member,',\n         'mark the lines'\ni      = i + 1\nline.i = '    to be converted with a \"HInnnn\" or two \"HII\" line',\n         'commands, enter'\ni      = i + 1\nline.i = '    \"'parm'\" on the command line and press ENTER.'\n\ni      = i + 2\nline.i = '  Options:'\ntype.i = 'MSG'\n\ni      = i + 2\nline.i = '  After pressing ENTER a pop-up panel allows overriding',\n         'a number of'\ni      = i + 1\nline.i = '  options that are pre-set in EHISUPP. The options and',\n         'their defaults'\ni      = i + 1\nline.i = '  are:'\n\ni      = i + 2\nline.i = '  o View HTML  . . . . YES'\n\ni      = i + 2\nline.i = '    The generated dataset will be displayed using VIEW'\n\ni      = i + 2\nline.i = '  o HTML type  . . . . STD'\n\ni      = i + 2\nline.i = '    Options are'\ni      = i + 1\nline.i = '    - STD : Plain HTML'\ni      = i + 1\nline.i = '    - ISPF: Fancy scrollable ISPF VIEW like HTML'\n\ni      = i + 2\nline.i = '  o HTML font  . . . . Courier New'\n\ni      = i + 2\nline.i = '    Any (monospaced) font you fancy. The default',\n         'is ''Courier New'', but'\ni      = i + 1\nline.i = '    ''Lucida Console'' would also be a good choice. Using',\n         'a proportional'\ni      = i + 1\nline.i = '    font will NOT produce very fancy HTML!'\n\ni      = i + 2\nline.i = '  o Progress . . . . . 100'\n\ni      = i + 2\nline.i = '    Language dependent progress messages'\n\ni      = i + 2\nline.i = '  o xfer WSA . . . . . NO'\n\ni      = i + 2\nline.i = '    Auto-transfer the HTML file to the workstation,',\n         'requires the'\ni      = i + 1\nline.i = '    Work Station Agent'\n\ni      = i + 2\nline.i = '  o PC directory . . . c:\\temp'\n\ni      = i + 2\nline.i = '    Directory to use on the PC for auto-transfers'\n\ni      = i + 2\nline.i = '  o Start browser  . . NO'\n\ni      = i + 2\nline.i = '    Start the application associated with the',\n         'extension ''.html'''\n\ni      = i + 2\nline.i = '  The pop-up panel can be suppressed by setting the',\n         '''popup'' flag in'\ni      = i + 1\nline.i = '  EHISUPP to 0.'\n\ni      = i + 2\nline.i = center(' Legal information ', 72, '*')\ntype.i = 'MSG'\n\ni      = i + 2\nline.i = '  This program is free software: you can redistribute it',\n         'and/or modify'\ni      = i + 1\nline.i = '  it under the terms of the GNU General Public License',\n         'as published by'\ni      = i + 1\nline.i = '  the Free Software Foundation, either version 3 of the',\n         'License, or (at'\ni      = i + 1\nline.i = '  your option) any later version.'\n\ni      = i + 2\nline.i = '  This program is distributed in the hope that it',\n         'will be useful, but'\ni      = i + 1\nline.i = '  WITHOUT ANY WARRANTY; without even the implied',\n         'warranty of'\ni      = i + 1\nline.i = '  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. ',\n         'See the GNU'\ni      = i + 1\nline.i = '  General Public License for more details.'\n\ni      = i + 2\nline.i = '  You should have received a copy of the GNU General',\n         'Public License'\ni      = i + 1\nline.i = '  along with this program.  If not, see',\n         '<http://www.gnu.org/licenses/>.'\n\ni      = i + 2\nline.i = center(' End of HELP information ', 72, '*')\ntype.i = 'MSG'\nline.0 = i\n\nif macmode         &,\n   t_rex   = 'TSO' &,\n   aspace  = 'ISPF' then\n  do\n    \"isredit (STATE) = user_state\"\n    \"isredit caps = off\"\n\n    do i = line.0 to 1 by -1\n      lin = line.i\n      \"isredit line_after 0 = \"type.i\"line (LIN)\"\n    end\n\n    \"isredit user_state = (STATE)\"\n    \"isredit locate 0\"\n  end\nelse\n  do\n    if t_rex = 'SYSTEM'  |,                            /* Regina      */\n       t_rex = 'COMMAND' |,                            /* PC DOS 7    */\n       t_rex = 'CMD' then                              /* Object REXX */\n     \"cls\"\n\n    do i = 1 to line.0\n      say line.i\n    end\n  end\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EHIJCL": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07#_\\x01\\x162?\\x00\\x00\\x04\\x1f\\x00\\x00\\x00\\x00\\xc3\\xd3\\xd6\\xc7\\xc7\\xc9\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-08-23T00:00:00", "modifydate": "2016-11-18T00:00:00", "lines": 1055, "newlines": 0, "modlines": 0, "user": "CLOGGIE"}, "text": "/* REXX exec/edit macro to convert JCL to 'HILITE'd HTML              */\n/*** trace ?r ***************************************************** \\| *\n*               (C) Copyright Robert AH Prins, 2007-2016               *\n************************************************************************\n*  ------------------------------------------------------------------  *\n* | Date       | By   | Remarks                                      | *\n* |------------+------+----------------------------------------------| *\n* |            |      |                                              | *\n* |------------+------+----------------------------------------------| *\n* | 2016-11-18 | RAHP | Multiple updates/simplifications             | *\n* |------------+------+----------------------------------------------| *\n* | 2012-11-26 | RAHP | Remove '$', '#' & '@' in names (ooREXX)      | *\n* |------------+------+----------------------------------------------| *\n* | 2012-06-25 | RAHP | Add IP address                               | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-27 | RAHP | Use pop-up on ISPF to display progress       | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-02 | RAHP | Add selection for short CSS 'em' colors      | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-22 | RAHP | Update comment                               | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-01 | RAHP | Add font selection for generated HTML        | *\n* |------------+------+----------------------------------------------| *\n* | 2009-02-09 | RAHP | RACF problem with 'html' extension @ NVSM    | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-24 | RAHP | Further tweaks                               | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-18 | RAHP | - add GPL V3 License                         | *\n* |            |      | - use EHISUPP 'get_options' to retrieve some | *\n* |            |      |   processing options                         | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-06 | RAHP | Cater for PC environment                     | *\n* |            |      | Handle split quoted parameters               | *\n* |------------+------+----------------------------------------------| *\n* | 2007-08-30 | RAHP | Further fine-tuning (HTLM 4.01 Strict)       | *\n* |------------+------+----------------------------------------------| *\n* | 2007-08-23 | RAHP | Initial version (copy of EHIREXX)            | *\n* |------------+------+----------------------------------------------| *\n************************************************************************\n* EHIJCL is a REXX exec/edit macro that analyses JCL and builds        *\n* a HTML file with the color attributes as used by ISPF Edit.          *\n*                                                                      *\n* This file can be transferred to the PC by using ISPF Workstation     *\n* Agent. In addition the exec might invoke the Windows application     *\n* associated with file extension \".html\"                               *\n*                                                                      *\n* The exec runs as ISPF edit macro or might be used as line command    *\n* on the extended member list of ISPF List Utility (usually menu       *\n* option 3.4).                                                         *\n*                                                                      *\n* In addition the exec can be invoked on the command line. In this     *\n* case the dataset name has to be supplied as invocation parameter.    *\n*                                                                      *\n* t_rex will contain the environment. It can be:                       *\n*                                                                      *\n* - TSO     - TSO/ISPF                                                 *\n* - MVS     - z/OS (PGM=IRXJCL)                                        *\n* - SYSTEM  - Regina                                                   *\n* - COMMAND - PC DOS 7/2000                                            *\n* - CMD     - Object REXX (OS/2, Windoze)                              *\n************************************************************************\n* Send questions, suggestions and/or bug reports to:                   *\n*                                                                      *\n* robert@prino.org / robert.ah.prins@gmail.com                         *\n*                                                                      *\n* Robert AH Prins                                                      *\n* Taboralaan 46                                                        *\n* 8400 Oostende                                                        *\n* Belgium                                                              *\n************************************************************************\n* This program is free software: you can redistribute it and/or        *\n* modify it under the terms of the GNU General Public License as       *\n* published by the Free Software Foundation, either version 3 of       *\n* the License, or (at your option) any later version.                  *\n*                                                                      *\n* This program is distributed in the hope that it will be useful,      *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of       *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *\n* GNU General Public License for more details.                         *\n*                                                                      *\n* You should have received a copy of the GNU General Public License    *\n* along with this program. If not, see <http://www.gnu.org/licenses/>  *\n***********************************************************************/\nparse source source\nparse value source with . . moi . . . cmdenv aspace .\n\nt_rex = address()\n\nif t_rex  = 'TSO' &,\n   aspace = 'ISPF' then\n  do\n    \"ispexec vget (zenvir)\"\n    envir = strip(substr(zenvir, 17, 8))\n  end\nelse\n  envir = 'OTHER'\n\nparse arg idsn\n\ncall get_source                /* Read the JCL                        */\ncall init_vars                 /* Initialize the global variables     */\ncall build_html                /* Now go on and build the HTML output */\n\ncall ehisupp 'generate_output,'sep','htmlout  || sep ||,\n                                     odsn     || sep ||,\n                                     title    || sep ||,\n                                     header   || sep ||,\n                                     footer   || sep ||,\n                                     htmlfont\n\nif t_rex  = 'TSO' &,\n   aspace = 'ISPF' then\n  if envir \\= 'BATCH' then\n    do\n      /*****************************************************************\n      * Show the resulting dataset, if desired                         *\n      *****************************************************************/\n      if view_html = 'YES' then\n        \"ispexec view dataset(\"odsn\")\"\n\n      /*****************************************************************\n      * Transfer the html file to the PC                               *\n      *****************************************************************/\n      if xfer_wsa = 'YES' then\n        call ehisupp 'xfer_and_show_html,'sep','dir_pc   || sep ||,\n                                                htmlfile || sep ||,\n                                                odsn     || sep ||,\n                                                ipaddr   || sep ||,\n                                                start_browser\n    end\n  else\n    do\n      if macmode then\n        \"isredit end\"\n    end\nexit\n\n/***********************************************************************\n* TRANSLATE_ENTITIES                                                   *\n*                                                                      *\n* This procedure translates special characters to HTML entities        *\n***********************************************************************/\ntranslate_entities: procedure expose special_chars special_html\n  parse arg in\n\n  out = ''\n\n  if translate(in, ' ', special_chars) = in then\n    out = in\n  else\n    do while in \\== ''\n      c = left(in, 1)\n      k = wordpos(c, special_chars)\n\n      if k \\= 0 then\n        out = out || word(special_html, k)\n      else\n        out = out || c\n\n      in = substr(in, 2)\n    end\nreturn out\n\n/***********************************************************************\n* QUOTER:                                                              *\n*                                                                      *\n* This procedure adds HTML for quoted strings                          *\n***********************************************************************/\nquoter: procedure expose col_str in_apostq\n  parse arg in\n\n  out = ''\n\n  if in_apostq then\n    do\n      in_apost = 1\n\n      p   = pos(' ', in)\n      p   = verify(in, ' ',, p)\n      out = left(in, p - 1)col_str\n      in  = substr(in, p)\n    end\n  else\n    in_apost = 0\n\n  do while in \\== ''\n    c = left(in, 1)\n\n    select\n      when c = '''' &,\n           in_apost then\n        do\n          out       = out || '''</em>'\n          in_apost  = 0\n          in_apostq = 0\n        end\n\n      when c = '''' &,\n          \\in_apost then\n        do\n          out       = out || col_str''''\n          in_apost  = 1\n          in_apostq = 1\n        end\n\n      otherwise\n        out = out || c\n    end\n\n    in = substr(in, 2)\n  end\n\nif in_apost then\n  out = out'</em>'\nreturn out\n\n/***********************************************************************\n* HILITE:                                                              *\n*                                                                      *\n* This procedure adds HTML for special characters                      *\n***********************************************************************/\nhilite: procedure expose special_hilite special_chars special_html,\n                         col_spc paren col_par. in_apostq\n  parse arg in\n\n  out = ''\n\n  if in_apostq then\n    do\n      in_apost = 1\n\n      p   = pos(' ', in)\n      p   = verify(in, ' ',, p)\n      out = left(in, p - 1)\n      in  = substr(in, p)\n    end\n  else\n    in_apost = 0\n\n  do while in \\== ''\n    c = left(in, 1)\n\n    select\n      when c = '''' &,\n           in_apost then\n        do\n          out      = out || c\n          in_apost = 0\n        end\n\n      when c = '''' &,\n          \\in_apost then\n        do\n          out      = out || c\n          in_apost = 1\n        end\n\n      when c = '(' &,\n          \\in_apost then\n        do\n          paren = (paren + 1) // 5\n          out   = out || col_par.paren'(</em>'\n        end\n\n      when c = ')' &,\n          \\in_apost then\n        do\n          out   = out || col_par.paren')</em>'\n          paren = (paren + 4) // 5\n        end\n\n      when pos(c, special_hilite) \\= 0 &,\n          \\in_apost then\n        do\n          p = wordpos(c, special_chars)\n\n          if p \\= 0 then\n            c = word(special_html, p)\n\n          out = out || col_spc || c'</em>'\n        end\n\n      otherwise\n        out = out || c\n    end\n\n    in = substr(in, 2)\n  end\nreturn out\n\n/***********************************************************************\n* QUOTE_CHECK:                                                         *\n*                                                                      *\n* This procedure checks post-keyword data (PARM=) for quotes           *\n***********************************************************************/\nquote_check: procedure expose l2 l3\n  t2 = l2\n  t3 = l3\n\n  q2 = space(t2, 0)\n  z2 = space(translate(t2, ' ', ''''), 0)\n\n  /*********************************************************************\n  * If d = 1 there are unmatched quotes                                *\n  *********************************************************************/\n  d  = (length(q2) - length(z2)) // 2\n\n  do while d = 1 & t3 \\= ' '\n    p  = pos('''', t3)\n    t2 = t2 || left(t3, p)\n    t3 = substr(t3, p + 1)\n\n    do while left(t3, 1) \\= ' '\n      t2 = t2 || left(t3, 1)\n      t3 = substr(t3, 2)\n    end\n\n    q2 = space(t2, 0)\n    z2 = space(translate(t2, ' ', ''''), 0)\n\n    d  = (length(q2) - length(z2)) // 2\n  end\n\n  l2 = t2\n  l3 = t3\nreturn\n\n/***********************************************************************\n* BUILD_LIST_OF_KEYWORDS:                                              *\n*                                                                      *\n* This procedure loads the list of JCL keywords                        *\n***********************************************************************/\nbuild_list_of_keywords:\n  keyword.        = 0\n\n  keyword.CNTL    = 1\n  keyword.COMMAND = 1\n  keyword.DATA    = 1\n  keyword.DD      = 1\n  keyword.DLM     = 1\n  keyword.ELSE    = 1\n  keyword.ENDCNTL = 1\n  keyword.ENDIF   = 1\n  keyword.EXEC    = 1\n  keyword.EXPORT  = 1\n  keyword.IF      = 1\n  keyword.INCLUDE = 1\n  keyword.JCLLIB  = 1\n  keyword.JOB     = 1\n  keyword.OUTPUT  = 1\n  keyword.PEND    = 1\n  keyword.PROC    = 1\n  keyword.SET     = 1\n  keyword.THEN    = 1\n  keyword.XMIT    = 1\nreturn\n\n/***********************************************************************\n* GET_SOURCE:                                                          *\n*                                                                      *\n* Read the JCL                                                         *\n***********************************************************************/\nget_source:\n  macmode = 0\n  rxdata. = ''\n  pgm     = ''\n\n  select\n    when t_rex = 'TSO' then call get_source_tso\n    when t_rex = 'MVS' then call get_source_mvs\n    otherwise               call get_source_pc\n  end\nreturn\n\n/***********************************************************************\n* GET_SOURCE_TSO:                                                      *\n*                                                                      *\n* Read the text when running under TSO                                 *\n***********************************************************************/\nget_source_tso:\n  if aspace = 'ISPF' then\n    \"isredit macro (parm) NOPROCESS\"\n  else\n    rc = 4\n\n  /*********************************************************************\n  * Running as edit macro                                              *\n  *********************************************************************/\n  if rc = 0 then\n    do\n      macmode = 1\n\n      if parm = '?' then\n        do\n          \"isredit ehihelp\" moi\n          exit\n        end\n\n      \"isredit process range HI\"\n      if rc <= 4 then\n        do\n          \"isredit (ZF) = linenum .zfrange\"\n          \"isredit (ZL) = linenum .zlrange\"\n        end\n      else\n        do\n          \"isredit ehihelp\" moi\n          exit\n        end\n\n      \"isredit (DSN) = dataset\"\n      \"isredit (MEM) = member\"\n\n      if mem = '' then\n        idsn = \"'\" || dsn || \"'\"\n      else\n        do\n          pgm  = mem\n          idsn = \"'\" || dsn || '(' || mem || \")'\"\n        end\n\n      /*****************************************************************\n      * Read the (selected) source into a stem                         *\n      *****************************************************************/\n      i = 0\n      do j = +zf to +zl\n        \"isredit (DATALINE) = line\" j\n\n        i        = i + 1\n        rxdata.i = strip(dataline, 'T')\n      end\n\n      rxdata.0 = i\n    end\n  /*********************************************************************\n  * Running as TSO command                                             *\n  *********************************************************************/\n  else\n    do\n      if idsn = '' then\n        do\n          msg =     left('Error - No dataset name passed', 75)\n          msg = msg left(moi 'can be used as an edit macro or',\n                         'as a line command on the ISPF', 75)\n          msg = msg left('dataset list utility. In both cases the',\n                         'dataset name will be automatically', 75)\n          msg = msg left('determined.', 75)\n          msg = msg left('If you call' moi 'on the command line you',\n                         'have to pass the name of the', 75)\n          msg = msg left('dataset to be processed, e.g.', 75)\n          msg = msg left('Command ===>' moi,\n                         '''my.jcl.dataset(test)''', 75)\n\n          zedsmsg = ''\n          zedlmsg = msg\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' &,\n             envir \\= 'BATCH' then\n            \"ispexec setmsg msg(ISRZ001)\"\n          else\n            do while msg \\= ''\n              say left(msg, 75)\n              msg = substr(msg, 76)\n            end\n\n          exit 8\n        end\n\n      /*****************************************************************\n      * Force single quotes around dataset name and check if it's OK   *\n      *****************************************************************/\n      idsn = \"'\" || strip(idsn,, '''') || \"'\"\n\n      if sysdsn(idsn) \\= 'OK' then\n        do\n          say 'Error - Dataset' idsn 'could not be found'\n          exit 8\n        end\n\n      /*****************************************************************\n      * Extract member name, if present                                *\n      *****************************************************************/\n      parse var idsn . '(' mem ')'\n\n      if mem \\= '' then\n        pgm = mem\n\n      /*****************************************************************\n      * Read the JCL                                                   *\n      *****************************************************************/\n      dynlib = 'dyn'random(99999)\n\n      \"alloc f(\"dynlib\") da(\"idsn\") shr reu\"\n      if rc > 0 then\n        do\n          say 'Error - Dataset' idsn 'could not be allocated - rc' rc\n          exit 8\n        end\n\n      \"execio * diskr\" dynlib \"( stem rxdata. finis\"\n      if rc > 0 then\n        do\n          say 'Error - Dataset' idsn 'could not be read - rc' rc\n          exit 8\n        end\n\n      \"free f(\"dynlib\")\"\n    end\n\n  olines = rxdata.0\nreturn\n\n/***********************************************************************\n* GET_SOURCE_PC:                                                       *\n*                                                                      *\n* Read the text when running on the PC                                 *\n***********************************************************************/\nget_source_pc:\n  if idsn = '' then\n    do\n      say 'Syntax:' moi 'file.jcl'\n      exit\n    end\n\n  do i = 1 by 1 while lines(idsn)\n    rxdata.i = linein(idsn)\n  end\n\n  rxdata.0 = i - 1\n  olines   = rxdata.0\nreturn\n\n/***********************************************************************\n* INIT_VARS:                                                           *\n*                                                                      *\n* This procedure initialises the global variables                      *\n***********************************************************************/\ninit_vars:\n  /*********************************************************************\n  * Parameter separator for EHISUPP exec                               *\n  *********************************************************************/\n  sep = x2c(00)d2c(random(2**16))x2c(ff)d2c(random(2**16))x2c(00)\n  sep = translate(sep, x2c(bababababa), ' <>&\"')\n\n  /*********************************************************************\n  * Get processing options                                             *\n  *********************************************************************/\n  opt = ehisupp('get_options,'sep','moi)\n  parse value opt with view_html     (sep),\n                       xfer_wsa      (sep),\n                       start_browser (sep),\n                       ispf_edit     (sep),\n                       show_progress (sep),\n                       dir_pc        (sep),\n                       htmlfont      (sep),\n                       ipaddr        (sep) .\n\n  /*********************************************************************\n  * Temporary output dataset                                           *\n  *********************************************************************/\n  if mem \\= '' then\n    odsn = \"'\" || userid() || '.' || mem || \".jcl.html'\"\n  else\n    odsn = \"'\" || userid() || '.' || moi || \".jcl.html'\"\n\n  /*********************************************************************\n  * Text strings for title, header and footer                          *\n  *********************************************************************/\n  title  = 'JCL:' strip(idsn,, '''')\n  header = 'JCL:' strip(idsn,, '''')\n  now    = date('S')\n  now    = left(now, 4)'-'substr(now, 5, 2)'-'right(now, 2)'T'time()\n  footer = 'Generated on' now 'by' userid() 'with' moi\n\n  /*********************************************************************\n  * Name of generated html file on PC                                  *\n  *********************************************************************/\n  if pgm \\= '' then\n    htmlfile = pgm || '.html'\n  else\n    htmlfile = 'jcl.html'\n\n  /*********************************************************************\n  * HTML colors                                                        *\n  *                                                                    *\n  * - lime(green) - default                                            *\n  * - red         - keywords                                           *\n  * - white       - quoted strings                                     *\n  * - aqua(turq)  - comments                                           *\n  * - yellow      - special characters                                 *\n  * - blue        - in-stream data                                     *\n  *********************************************************************/\n  col_dft        = '<em class=\"l\">'                        /* lime    */\n  col_key        = '<em class=\"r\">'                        /* red     */\n  col_str        = '<em class=\"w\">'                        /* white   */\n  col_com        = '<em class=\"t\">'                        /* turq    */\n  col_spc        = '<em class=\"y\">'                        /* yellow  */\n  col_ins        = '<em class=\"b\">'                        /* blue    */\n\n  /*********************************************************************\n  * Colors for nested parentheses                                      *\n  *********************************************************************/\n  col_par.0      = '<em class=\"f\">'                        /* fuchsia */\n  col_par.1      = '<em class=\"y\">'                        /* yellow  */\n  col_par.2      = '<em class=\"w\">'                        /* white   */\n  col_par.3      = '<em class=\"r\">'                        /* red     */\n  col_par.4      = '<em class=\"t\">'                        /* turq    */\n\n  /*********************************************************************\n  * HTML special characters and their defined entities                 *\n  *********************************************************************/\n  special_chars  = '< > & \"'\n  special_html   = '&lt; &gt; &amp; &quot;'\n\n  /*********************************************************************\n  * Characters to be highlighted                                       *\n  *********************************************************************/\n  special_hilite = '(),|<>\u00ac&='\n\n  /*********************************************************************\n  * Characters separating words                                        *\n  *********************************************************************/\n  separator      = ' '\n\n  /*********************************************************************\n  * In-stream data formats                                             *\n  *********************************************************************/\n  drop !\n  isd.1   = 'DD *'\n  isd.!.1 = 'in_stream = 1'\n  isd.2   = 'DD DATA'\n  isd.!.2 = 'in_data   = 1'\n  isd.0   = 2\nreturn\n\n/***********************************************************************\n* BUILD_HTML:                                                          *\n*                                                                      *\n* This procedure builds the HTML output                                *\n***********************************************************************/\nbuild_html:\n  /*********************************************************************\n  * Load the list of JCL keywords                                      *\n  *********************************************************************/\n  call build_list_of_keywords\n\n  /*********************************************************************\n  * Switches                                                           *\n  *********************************************************************/\n  kwbegin   = 1                 /* Do we expect a new keyword ?       */\n\n  in_if     = 0                 /* Inside a multi-line 'IF' statement */\n  in_apost  = 0                 /* Inside a '(apost) delimited string */\n  in_apostq = 0                 /* Inside a '(apost) delimited string */\n  in_quote  = 0                 /* Inside a \"(quote) delimited string */\n  in_stream = 0                 /* Inside in-stream (DD *) data       */\n  in_data   = 0                 /* Inside in-stream (DD DATA) data    */\n  paren     = 1                 /* Nested parentheses level           */\n  is        = -1                /* Not in in-stream data              */\n\n  /*********************************************************************\n  * Initialize the html output string                                  *\n  *********************************************************************/\n  if ispf_edit = 'ISPF' then\n    htmlout = x2c(ff)ispf_edit || x2c(ff)right(olines, 6, '0')x2c(ff)\n  else\n    htmlout = ''\n\n  tempout = ''\n\n  /*********************************************************************\n  * Loop over the JCL                                                  *\n  *********************************************************************/\n  i = time('E')\n\n  do i = 1 to rxdata.0\n    /*******************************************************************\n    * Display (optional) progress messages                             *\n    *******************************************************************/\n    if show_progress > 0 then\n      if i // show_progress = 0 then\n        do\n          progress = 'Elapsed time' right(time('E'), 12),\n                     '- lines processed' right(i, 6)\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' then\n            rc = ehisupp('monitor,'moi 'Progress,'progress)\n          else\n            say progress\n        end\n\n    /*******************************************************************\n    * Process in-stream data                                           *\n    *******************************************************************/\n    if i = is then\n      do\n        drop !\n        interpret isd.!.sj\n\n        do i = is by 1 while (in_data | in_stream) & i <= rxdata.0\n          line = rxdata.i\n\n          /*************************************************************\n          * 'DD *' in-stream data is always ended with // in pos 1-2|  *\n          *************************************************************/\n          if in_stream &,\n             left(line, 2) = '//' then\n            do\n              in_stream = 0\n              leave i\n            end\n\n          data = translate_entities(line)\n\n          select\n            when (in_data    |,\n                  in_stream) &,\n                 left(line, 2) = dlm then\n              do\n                in_data   = 0\n                in_stream = 0\n\n                if length(data) > 2 then\n                  com = col_com || substr(data, 3)'</em>'\n                else\n                  com = ''\n\n                tempout = tempout || col_dft || dlm'</em>'com'<br>'\n              end\n\n            when in_data |,\n                 in_stream then\n              tempout = tempout || col_ins || data'</em><br>'\n\n            otherwise nop\n          end\n        end\n      end\n\n    /*******************************************************************\n    * Refetch line and create a squeezed copy                          *\n    *******************************************************************/\n    line = strip(left(rxdata.i, 72), 'T')\n    sqz  = space(line)\n    noq  = space(translate(line, ' ', ''''))\n\n    /*******************************************************************\n    * Only w2 can be a JCL keyword                                     *\n    *******************************************************************/\n    w2   = word(line, 2)\n\n    /*******************************************************************\n    * Keywords needing special attention                               *\n    *******************************************************************/\n    if keyword.w2 then\n      do\n        /***************************************************************\n        * Might be followed by in-stream data (and DLM=)               *\n        ***************************************************************/\n        if w2 = 'DD' then\n          do\n            dlm = '/*'\n            is  = 0\n\n            /***********************************************************\n            * Two options, 'DD *' and 'DD DATA'                        *\n            ***********************************************************/\n            do j = 1 to isd.0 while is = 0\n              p = pos(isd.j, sqz)\n\n              if p \\= 0 then\n                do\n                  sj = j\n                  c  = substr(sqz, p + length(isd.j), 1)\n\n                  select\n                    /***************************************************\n                    * If 'DD *' or 'DD DATA' is followed by a blank,   *\n                    * there is no 'DLM=' keyword and the in-stream     *\n                    * data starts on the next line of the JCL          *\n                    ***************************************************/\n                    when c = ' ' then\n                      is  = i + 1\n\n                    /***************************************************\n                    * If 'DD *' or 'DD DATA' is followed by a comma,   *\n                    * we need to parse the remainder of the line (and  *\n                    * possibly following ones) to check if a 'DLM'     *\n                    * keyword is present                               *\n                    ***************************************************/\n                    when c = ',' then\n                      do\n                        /***********************************************\n                        * Break on the next space                      *\n                        ***********************************************/\n                        q   = pos(' ', sqz' ', p + length(isd.j))\n                        sqz = left(sqz, q - 1)\n\n                        /***********************************************\n                        * Append subsequent lines                      *\n                        ***********************************************/\n                        do k = i + 1 by 1 while right(sqz, 1) = ','\n                          tmp = space(substr(rxdata.k, 4))\n                          q   = pos(' ', tmp' ')\n                          sqz = sqz || left(tmp, q - 1)\n                        end\n\n                        is = k\n                        q  = pos('DLM=', sqz)\n\n                        /***********************************************\n                        * Parse out the delimiter                      *\n                        ***********************************************/\n                        if q \\= 0 then\n                          do\n                            /*******************************************\n                            * Unlikely, but can be ''''''              *\n                            *******************************************/\n                            c6 = substr(sqz, q + 4, 6)\n\n                            /*******************************************\n                            * Remove initial quote, cannot use STRIP|  *\n                            *******************************************/\n                            if left(c6, 1) = '''' then\n                              c6 = substr(c6, 2)\n\n                            if left(c6, 1) = '''' then\n                              dlm = substr(c6, 2, 2)\n                            else\n                              dlm = substr(c6, 1, 2)\n                          end\n                      end\n\n                    otherwise nop\n                  end\n                end\n            end\n          end\n\n        /***************************************************************\n        * Can be multi-line - no comments allowed until after 'THEN'|  *\n        ***************************************************************/\n        if w2 = 'IF' then\n          do\n            in_if = 1\n\n            if pos(' THEN', line) \\= 0 then\n              in_if = 2\n          end\n      end\n\n    if in_if = 1 then\n      if pos(' THEN ', line) \\= 0 then\n        in_if = 3\n\n    select\n      /*****************************************************************\n      * End-of-JCL line                                                *\n      *****************************************************************/\n      when line = '//' then\n        tempout = tempout || col_dft || line'</em><br>'\n\n      /*****************************************************************\n      * Comment line                                                   *\n      *****************************************************************/\n      when left(line, 3) = '//*' then\n        tempout = tempout || col_com || line'</em><br>'\n\n      /*****************************************************************\n      * IF+THEN processing                                             *\n      *****************************************************************/\n      when in_if = 2 then\n        do\n          in_if = 0\n\n          pi = pos(' IF ', line) + 1\n          pt = pos(' THEN ', line' ') + 1\n\n          l1 = substr(line, 1, pi - 1)\n          l2 = substr(line, pi + 2, pt - (pi + 2))\n          l3 = substr(line, pt + 4)\n\n          if l2 \\= translate(l2, ' ', special_hilite) then\n            l2 = hilite(l2)\n\n          if l3 \\= '' then\n            l3 = col_com || l3'</em>'\n\n          tempout = tempout ||,\n                    col_dft || l1'</em>' ||,\n                    col_key'IF</em>' ||,\n                    col_dft || l2'</em>' ||,\n                    col_key'THEN</em>'l3'<br>'\n        end\n\n      /*****************************************************************\n      * IF only processing                                             *\n      *****************************************************************/\n      when in_if = 1 then\n        do\n          pi = pos(' IF ', line) + 1\n\n          if pi \\= 1 then\n            do\n              l1 = substr(line, 1, pi - 1)\n              l2 = substr(line, pi + 2)\n\n              if l2 \\= translate(l2, ' ', special_hilite) then\n                l2 = hilite(l2)\n\n              tempout = tempout ||,\n                        col_dft || l1'</em>' ||,\n                        col_key'IF</em>' ||,\n                        col_dft || l2'</em><br>'\n            end\n          else\n            do\n              if line \\= translate(line, ' ', special_hilite) then\n                line = hilite(line)\n\n              tempout = tempout || col_dft || line'</em><br>'\n            end\n        end\n\n      /*****************************************************************\n      * THEN only processing                                           *\n      *****************************************************************/\n      when in_if = 3 then\n        do\n          in_if = 0\n\n          pt = pos(' THEN ', line' ') + 1\n\n          l1 = substr(line, 1, pt - 1)\n          l2 = substr(line, pt + 4)\n\n          if l1 \\= translate(l1, ' ', special_hilite) then\n            l1 = hilite(l1)\n\n          if l2 \\= '' then\n            l2 = col_com || l2'</em>'\n\n          tempout = tempout ||,\n                    col_dft || l1'</em>' ||,\n                    col_key'THEN</em>'l2'<br>'\n        end\n\n      /*****************************************************************\n      * Normal JCL                                                     *\n      *****************************************************************/\n      when left(line, 2) = '//' then\n        if keyword.w2 then\n          do\n            lk = length(w2)\n\n            /***********************************************************\n            * Position of keyword and first following space            *\n            ***********************************************************/\n            p  = pos(' 'w2' ', line' ') + 1\n            q  = pos(' ', line, p)\n\n            /***********************************************************\n            * Pre-keyword data                                         *\n            ***********************************************************/\n            l1 = substr(line, 1, p - 1)\n\n            tempout = tempout ||,\n                      col_dft || l1'</em>' ||,\n                      col_key || w2'</em>'\n\n            /***********************************************************\n            * q can zero, ie no spaces after the keyword, on a 'DD'    *\n            * override or 'ENDIF' statement|                           *\n            ***********************************************************/\n            if q = 0 then\n              tempout = tempout || '<br>'\n            else\n              do\n                /*******************************************************\n                * Post-keyword text                                    *\n                *******************************************************/\n                l2 = substr(line, p + lk)\n\n                if w2 = 'ENDIF' then\n                  tempout = tempout || col_com || l2'</em><br>'\n                else\n                  do\n                    p  = verify(l2, ' ')\n                    q  = pos(' ', l2' ', p)\n\n                    l3 = substr(l2, q)\n                    l2 = substr(l2, 1, q - 1)\n\n                    if pos('''', l2) \\= 0 then\n                      call quote_check\n\n                    if l2 \\= translate(l2, ' ', special_hilite) then\n                      l2 = hilite(l2)\n\n                    if pos('''', l2) \\= 0 then\n                      l2 = quoter(l2)\n\n                    if l3 \\= '' then\n                      l3 = col_com || l3'</em>'\n\n                    tempout = tempout || col_dft || l2'</em>'l3'<br>'\n                  end\n              end\n          end\n        else\n          do\n            p  = verify(line, ' ',, 4)\n            p  = pos(' ', line' ', p)\n            l2 = substr(line, 1, p - 1)\n            l3 = substr(line, p)\n\n            if pos('''', l2) \\= 0 then\n              call quote_check\n\n            if l2 \\= translate(l2, ' ', special_hilite) then\n              l2 = hilite(l2)\n\n            if pos('''', l2) \\= 0 then\n              l2 = quoter(l2)\n\n            if l3 \\= '' then\n              l3 = col_com || l3'</em>'\n\n            tempout = tempout || col_dft || l2'</em>'l3'<br>'\n          end\n\n      /*****************************************************************\n      * We shouldn't get her at all - if the JCL ends in in-stream     *\n      * data i > rxdata.0                                              *\n      *****************************************************************/\n      otherwise\n        if i <= rxdata.0 then\n          do\n            text    = translate_entities(line)\n            text    = line\n            tempout = tempout || text || '<br>'\n          end\n    end\n\n    if length(tempout) > 250 then\n      do\n        htmlout = htmlout || tempout\n        tempout = ''\n      end\n  end\n\n  htmlout = htmlout || tempout\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EHINONE": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07$/\\x01\\x162?\\x00\\x00\\x01\\xaf\\x00\\x00\\x00\\x00\\xc3\\xd3\\xd6\\xc7\\xc7\\xc9\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-08-30T00:00:00", "modifydate": "2016-11-18T00:00:00", "lines": 431, "newlines": 0, "modlines": 0, "user": "CLOGGIE"}, "text": "/* REXX exec/edit macro to convert plain text to HTML                 */\n/*** trace ?r ***************************************************** \\| *\n*               (C) Copyright Robert AH Prins, 2007-2016               *\n************************************************************************\n*  ------------------------------------------------------------------  *\n* | Date       | By   | Remarks                                      | *\n* |------------+------+----------------------------------------------| *\n* |            |      |                                              | *\n* |------------+------+----------------------------------------------| *\n* | 2016-11-18 | RAHP | Multiple updates/simplifications             | *\n* |------------+------+----------------------------------------------| *\n* | 2012-06-25 | RAHP | Add IP address                               | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-27 | RAHP | Use pop-up on ISPF to display progress       | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-02 | RAHP | Add selection for short CSS 'em' colors      | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-22 | RAHP | Update comment                               | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-01 | RAHP | Add font selection for generated HTML        | *\n* |------------+------+----------------------------------------------| *\n* | 2009-02-09 | RAHP | RACF problem with 'html' extension @ NVSM    | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-24 | RAHP | Further tweaks                               | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-18 | RAHP | - add GPL V3 License                         | *\n* |            |      | - use EHISUPP 'get_options' to retrieve some | *\n* |            |      |   processing options                         | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-06 | RAHP | Cater for PC environment                     | *\n* |------------+------+----------------------------------------------| *\n* | 2007-08-30 | RAHP | Initial version (copy of EHIJCL)             | *\n* |------------+------+----------------------------------------------| *\n************************************************************************\n* EHINONE is a REXX exec/edit macro that converts any non-HILITE'able  *\n* text into HTML.                                                      *\n*                                                                      *\n* This file can be transferred to the PC by using ISPF Workstation     *\n* Agent. In addition the exec might invoke the Windows application     *\n* associated with file extension \".html\"                               *\n*                                                                      *\n* The exec runs as ISPF edit macro or might be used as line command    *\n* on the extended member list of ISPF List Utility (usually menu       *\n* option 3.4).                                                         *\n*                                                                      *\n* In addition the exec can be invoked on the command line. In this     *\n* case the dataset name has to be supplied as invocation parameter.    *\n*                                                                      *\n* t_rex will contain the environment. It can be:                       *\n*                                                                      *\n* - TSO     - TSO/ISPF                                                 *\n* - MVS     - z/OS (PGM=IRXJCL)                                        *\n* - SYSTEM  - Regina                                                   *\n* - COMMAND - PC DOS 7/2000                                            *\n* - CMD     - Object REXX (OS/2, Windoze)                              *\n************************************************************************\n* Send questions, suggestions and/or bug reports to:                   *\n*                                                                      *\n* robert@prino.org / robert.ah.prins@gmail.com                         *\n*                                                                      *\n* Robert AH Prins                                                      *\n* Taboralaan 46                                                        *\n* 8400 Oostende                                                        *\n* Belgium                                                              *\n************************************************************************\n* This program is free software: you can redistribute it and/or        *\n* modify it under the terms of the GNU General Public License as       *\n* published by the Free Software Foundation, either version 3 of       *\n* the License, or (at your option) any later version.                  *\n*                                                                      *\n* This program is distributed in the hope that it will be useful,      *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of       *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *\n* GNU General Public License for more details.                         *\n*                                                                      *\n* You should have received a copy of the GNU General Public License    *\n* along with this program. If not, see <http://www.gnu.org/licenses/>  *\n***********************************************************************/\nparse source source\nparse value source with . . moi . . . cmdenv aspace .\n\nt_rex = address()\n\nif t_rex  = 'TSO' &,\n   aspace = 'ISPF' then\n  do\n    \"ispexec vget (zenvir)\"\n    envir = strip(substr(zenvir, 17, 8))\n  end\nelse\n  envir = 'OTHER'\n\nparse arg idsn\n\ncall get_source            /* Read the text                           */\ncall init_vars             /* Initialize the global variables         */\ncall build_html            /* Now go on and build the HTML output     */\n\ncall ehisupp 'generate_output,'sep','htmlout  || sep ||,\n                                     odsn     || sep ||,\n                                     title    || sep ||,\n                                     header   || sep ||,\n                                     footer   || sep ||,\n                                     htmlfont\n\nif t_rex  = 'TSO' &,\n   aspace = 'ISPF' then\n  if envir \\= 'BATCH' then\n    do\n      /*****************************************************************\n      * Show the resulting dataset, if desired                         *\n      *****************************************************************/\n      if view_html = 'YES' then\n        \"ispexec view dataset(\"odsn\")\"\n\n      /*****************************************************************\n      * Transfer the html file to the PC                               *\n      *****************************************************************/\n      if xfer_wsa = 'YES' then\n        call ehisupp 'xfer_and_show_html,'sep','dir_pc   || sep ||,\n                                                htmlfile || sep ||,\n                                                odsn     || sep ||,\n                                                ipaddr   || sep ||,\n                                                start_browser\n    end\n  else\n    do\n      if macmode then\n        \"isredit end\"\n    end\nexit\n\n/***********************************************************************\n* TRANSLATE_ENTITIES                                                   *\n*                                                                      *\n* This procedure translates special characters to HTML entities        *\n***********************************************************************/\ntranslate_entities: procedure expose special_chars special_html\n  parse arg in\n\n  out = ''\n\n  if translate(in, ' ', special_chars) = in then\n    out = in\n  else\n    do while in \\== ''\n      c = left(in, 1)\n      k = wordpos(c, special_chars)\n\n      if k \\= 0 then\n        out = out || word(special_html, k)\n      else\n        out = out || c\n\n      in = substr(in, 2)\n    end\nreturn out\n\n/***********************************************************************\n* GET_SOURCE:                                                          *\n*                                                                      *\n* Read the text                                                        *\n***********************************************************************/\nget_source:\n  macmode = 0\n  rxdata. = ''\n  pgm     = ''\n\n  select\n    when t_rex = 'TSO' then call get_source_tso\n    when t_rex = 'MVS' then call get_source_mvs\n    otherwise               call get_source_pc\n  end\nreturn\n\n/***********************************************************************\n* GET_SOURCE_TSO:                                                      *\n*                                                                      *\n* Read the text when running under TSO                                 *\n***********************************************************************/\nget_source_tso:\n  if aspace = 'ISPF' then\n    \"isredit macro (parm) NOPROCESS\"\n  else\n    rc = 4\n\n  /*********************************************************************\n  * Running as edit macro                                              *\n  *********************************************************************/\n  if rc = 0 then\n    do\n      macmode = 1\n\n      if parm = '?' then\n        do\n          \"isredit ehihelp\" moi\n          exit\n        end\n\n      \"isredit process range HI\"\n      if rc <= 4 then\n        do\n          \"isredit (ZF) = linenum .zfrange\"\n          \"isredit (ZL) = linenum .zlrange\"\n        end\n      else\n        do\n          \"isredit ehihelp\" moi\n          exit\n        end\n\n      \"isredit (DSN) = dataset\"\n      \"isredit (MEM) = member\"\n\n      if mem = '' then\n        idsn = \"'\" || dsn || \"'\"\n      else\n        do\n          pgm  = mem\n          idsn = \"'\" || dsn || '(' || mem || \")'\"\n        end\n\n      /*****************************************************************\n      * Read the (selected) source into a stem                         *\n      *****************************************************************/\n      i = 0\n      do j = +zf to +zl\n        \"isredit (DATALINE) = line\" j\n\n        i        = i + 1\n        rxdata.i = strip(dataline, 'T')\n      end\n\n      rxdata.0 = i\n    end\n  /*********************************************************************\n  * Running as TSO command                                             *\n  *********************************************************************/\n  else\n    do\n      if idsn = '' then\n        do\n          msg =     left('Error - No dataset name passed', 75)\n          msg = msg left(moi 'can be used as an edit macro or',\n                         'as a line command on the ISPF', 75)\n          msg = msg left('dataset list utility. In both cases the',\n                         'dataset name will be automatically', 75)\n          msg = msg left('determined.', 75)\n          msg = msg left('If you call' moi 'on the command line you',\n                         'have to pass the name of the', 75)\n          msg = msg left('dataset to be processed, e.g.', 75)\n          msg = msg left('Command ===>' moi,\n                         '''my.dataset(test)''', 75)\n\n          zedsmsg = ''\n          zedlmsg = msg\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' &,\n             envir \\= 'BATCH' then\n            \"ispexec setmsg msg(ISRZ001)\"\n          else\n            do while msg \\= ''\n              say left(msg, 75)\n              msg = substr(msg, 76)\n            end\n\n          exit 8\n        end\n\n      /*****************************************************************\n      * Force single quotes around dataset name and check if it's OK   *\n      *****************************************************************/\n      idsn = \"'\" || strip(idsn,, '''') || \"'\"\n\n      if sysdsn(idsn) \\= 'OK' then\n        do\n          say 'Error - Dataset' idsn 'could not be found'\n          exit 8\n        end\n\n      /*****************************************************************\n      * Extract member name, if present                                *\n      *****************************************************************/\n      parse var idsn . '(' mem ')'\n\n      if mem \\= '' then\n        pgm = mem\n\n      /*****************************************************************\n      * Read the text                                                  *\n      *****************************************************************/\n      dynlib = 'dyn'random(99999)\n\n      \"alloc f(\"dynlib\") da(\"idsn\") shr reu\"\n      if rc > 0 then\n        do\n          say 'Error - Dataset' idsn 'could not be allocated - rc' rc\n          exit 8\n        end\n\n      \"execio * diskr\" dynlib \"( stem rxdata. finis\"\n      if rc > 0 then\n        do\n          say 'Error - Dataset' idsn 'could not be read - rc' rc\n          exit 8\n        end\n\n      \"free f(\"dynlib\")\"\n    end\n\n  olines = rxdata.0\nreturn\n\n/***********************************************************************\n* GET_SOURCE_PC:                                                       *\n*                                                                      *\n* Read the text when running on the PC                                 *\n***********************************************************************/\nget_source_pc:\n  if idsn = '' then\n    do\n      say 'Syntax:' moi 'file.ext'\n      exit 8\n    end\n\n  do i = 1 by 1 while lines(idsn)\n    rxdata.i = linein(idsn)\n  end\n\n  rxdata.0 = i - 1\n  olines   = rxdata.0\nreturn\n\n/***********************************************************************\n* INIT_VARS:                                                           *\n*                                                                      *\n* This procedure initialises the global variables                      *\n***********************************************************************/\ninit_vars:\n  /*********************************************************************\n  * Parameter separator for EHISUPP exec                               *\n  *********************************************************************/\n  sep = x2c(00)d2c(random(2**16))x2c(ff)d2c(random(2**16))x2c(00)\n  sep = translate(sep, x2c(bababababa), ' <>&\"')\n\n  /*********************************************************************\n  * Get processing options                                             *\n  *********************************************************************/\n  opt = ehisupp('get_options,'sep','moi)\n  parse value opt with view_html     (sep),\n                       xfer_wsa      (sep),\n                       start_browser (sep),\n                       ispf_edit     (sep),\n                       show_progress (sep),\n                       dir_pc        (sep),\n                       htmlfont      (sep),\n                       ipaddr        (sep) .\n\n  /*********************************************************************\n  * Temporary output dataset                                           *\n  *********************************************************************/\n  if mem \\= '' then\n    odsn = \"'\" || userid() || '.' || mem || \".text.html'\"\n  else\n    odsn = \"'\" || userid() || '.' || moi || \".text.html'\"\n\n  /*********************************************************************\n  * Text strings for title, header and footer                          *\n  *********************************************************************/\n  title  = 'Text:' strip(idsn,, '''')\n  header = 'Text:' strip(idsn,, '''')\n  now    = date('S')\n  now    = left(now, 4)'-'substr(now, 5, 2)'-'right(now, 2)'T'time()\n  footer = 'Generated on' now 'by' userid() 'with' moi\n\n  /*********************************************************************\n  * Name of generated html file on PC                                  *\n  *********************************************************************/\n  if pgm \\= '' then\n    htmlfile = pgm || '.html'\n  else\n    htmlfile = 'text.html'\n\n  /*********************************************************************\n  * HTML special characters and their defined entities                 *\n  *********************************************************************/\n  special_chars  = '< > & \"'\n  special_html   = '&lt; &gt; &amp; &quot;'\nreturn\n\n/***********************************************************************\n* BUILD_HTML:                                                          *\n*                                                                      *\n* This procedure builds the HTML output                                *\n***********************************************************************/\nbuild_html:\n  /*********************************************************************\n  * Initialize the html output string                                  *\n  *********************************************************************/\n  if ispf_edit = 'ISPF' then\n    htmlout = x2c(ff)ispf_edit || x2c(ff)right(olines, 6, '0')x2c(ff)\n  else\n    htmlout = ''\n\n  /*********************************************************************\n  * Loop over the text                                                 *\n  *********************************************************************/\n  i = time('E')\n\n  do i = 1 to rxdata.0\n    /*******************************************************************\n    * Display (optional) progress messages                             *\n    *******************************************************************/\n    if show_progress > 0 then\n      if i // show_progress = 0 then\n        do\n          progress = 'Elapsed time' right(time('E'), 12),\n                     '- lines processed' right(i, 6)\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' then\n            rc = ehisupp('monitor,'moi 'Progress,'progress)\n          else\n            say progress\n\n        end\n\n    htmlout = htmlout || translate_entities(rxdata.i) || '<br>'\n  end\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EHIPAN": {"ttr": 2313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x001\\x01\\x166\\x0f\\x01\\x166\\x1f!\\x12\\x02|\\x03\\t\\x00\\x00\\xd7\\xd9\\xc9\\xd5\\xd6@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2016-12-25T00:00:00", "modifydate": "2016-12-26T21:12:31", "lines": 636, "newlines": 777, "modlines": 0, "user": "PRINO"}, "text": "/* REXX exec/edit macro to convert ISPF panels to 'HILITE'd HTML      */\n/*** trace ?r ***************************************************** \\| *\n*               (C) Copyright Robert AH Prins, 2007-2016               *\n************************************************************************\n*  ------------------------------------------------------------------  *\n* | Date       | By   | Remarks                                      | *\n* |------------+------+----------------------------------------------| *\n* |            |      |                                              | *\n* |------------+------+----------------------------------------------| *\n* | 2016-12-26 | RAHP | Initial version                              | *\n* |------------+------+----------------------------------------------| *\n************************************************************************\n* EHIPAN is a REXX exec/edit macro that analyses PANEL code an builds  *\n* a HTML file with the color attributes as used by ISPF Edit.          *\n*                                                                      *\n* This file can be transferred to the PC by using ISPF Workstation     *\n* Agent. In addition the exec might invoke the Windows application     *\n* associated with file extension \".html\"                               *\n*                                                                      *\n* The exec runs as ISPF edit macro or might be used as line command    *\n* on the extended member list of ISPF List Utility (usually menu       *\n* option 3.4).                                                         *\n*                                                                      *\n* In addition the exec can be invoked on the command line. In this     *\n* case the dataset name has to be supplied as invocation parameter.    *\n*                                                                      *\n* t_rex will contain the environment. It can be:                       *\n*                                                                      *\n* - TSO     - TSO/ISPF                                                 *\n* - MVS     - z/OS (PGM=IRXJCL)                                        *\n* - SYSTEM  - Regina                                                   *\n* - COMMAND - PC DOS 7/2000                                            *\n* - CMD     - Object REXX (OS/2, Windoze)                              *\n************************************************************************\n* Send questions, suggestions and/or bug reports to:                   *\n*                                                                      *\n* robert@prino.org / robert.ah.prins@gmail.com                         *\n*                                                                      *\n* Robert AH Prins                                                      *\n* Taboralaan 46                                                        *\n* 8400 Oostende                                                        *\n* Belgium                                                              *\n************************************************************************\n* This program is free software: you can redistribute it and/or        *\n* modify it under the terms of the GNU General Public License as       *\n* published by the Free Software Foundation, either version 3 of       *\n* the License, or (at your option) any later version.                  *\n*                                                                      *\n* This program is distributed in the hope that it will be useful,      *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of       *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *\n* GNU General Public License for more details.                         *\n*                                                                      *\n* You should have received a copy of the GNU General Public License    *\n* along with this program. If not, see <http://www.gnu.org/licenses/>  *\n***********************************************************************/\nparse source source\nparse value source with . . moi . . . cmdenv aspace .\n\nt_rex = address()\n\nif t_rex  = 'TSO' &,\n   aspace = 'ISPF' then\n  do\n    \"ispexec vget (zenvir)\"\n    envir = strip(substr(zenvir, 17, 8))\n  end\nelse\n  envir = 'OTHER'\n\nparse arg idsn\n\ncall get_source                /* Read the PANEL source               */\ncall init_vars                 /* Initialize the global variables     */\ncall build_html                /* Now go on and build the HTML output */\n\ncall ehisupp 'generate_output,'sep','htmlout  || sep ||,\n                                     odsn     || sep ||,\n                                     title    || sep ||,\n                                     header   || sep ||,\n                                     footer   || sep ||,\n                                     htmlfont\n\n\"ispexec vget (ehixmit) shared\"\n\nif rc = 0 then\n  do\n    \"ispexec verase (rexxparm) shared\"\n    \"isredit can\"\n    exit\n  end\n\nif t_rex  = 'TSO' &,\n   aspace = 'ISPF' then\n  if envir \\= 'BATCH' then\n    do\n      /*****************************************************************\n      * Show the resulting dataset, if desired                         *\n      *****************************************************************/\n      if view_html = 'YES' then\n        \"ispexec view dataset(\"odsn\")\"\n\n      /*****************************************************************\n      * Transfer the html file to the PC                               *\n      *****************************************************************/\n      if xfer_wsa = 'YES' then\n        call ehisupp 'xfer_and_show_html,'sep','dir_pc   || sep ||,\n                                                htmlfile || sep ||,\n                                                odsn     || sep ||,\n                                                ipaddr   || sep ||,\n                                                start_browser\n    end\n  else\n    do\n      if macmode then\n        \"isredit end\"\n    end\nexit\n\n/***********************************************************************\n* TRANSLATE_ENTITIES                                                   *\n*                                                                      *\n* This procedure translates special characters to HTML entities        *\n***********************************************************************/\ntranslate_entities: procedure expose special_chars special_html\n  parse arg in\n\n  out = ''\n\n  if translate(in, ' ', special_chars) = in then\n    out = in\n  else\n    do while in \\== ''\n      c = left(in, 1)\n      k = wordpos(c, special_chars)\n\n      if k \\= 0 then\n        out = out || word(special_html, k)\n      else\n        out = out || c\n\n      in = substr(in, 2)\n    end\nreturn out\n\n/***********************************************************************\n* GET_SOURCE:                                                          *\n*                                                                      *\n* Read the PANEL source                                                *\n***********************************************************************/\nget_source:\n  macmode = 0\n  rxdata. = ''\n  rxdata  = ''\n  pgm     = ''\n\n  select\n    when t_rex = 'TSO' then call get_source_tso\n    when t_rex = 'MVS' then call get_source_mvs\n    otherwise               call get_source_pc\n  end\nreturn\n\n/***********************************************************************\n* GET_SOURCE_TSO:                                                      *\n*                                                                      *\n* Read the text when running under TSO                                 *\n***********************************************************************/\nget_source_tso:\n  if aspace = 'ISPF' then\n    \"isredit macro (parm) NOPROCESS\"\n  else\n    rc = 4\n\n  /*********************************************************************\n  * Running as edit macro                                              *\n  *********************************************************************/\n  if rc = 0 then\n    do\n      macmode = 1\n\n      if parm = '?' then\n        do\n          \"isredit ehihelp\" moi\n          exit\n        end\n\n      \"isredit (ZF)  = linenum .zf\"\n      \"isredit (ZL)  = linenum .zl\"\n\n      \"isredit (DSN) = dataset\"\n      \"isredit (MEM) = member\"\n\n      if mem = '' then\n        idsn = \"'\" || dsn || \"'\"\n      else\n        do\n          pgm  = mem\n          idsn = \"'\" || dsn || '(' || mem || \")'\"\n        end\n\n      /*****************************************************************\n      * Concatenate the full source, but indicate original line breaks *\n      *****************************************************************/\n      i = 0\n\n      do j = +zf to +zl\n        \"isredit (DATALINE) = line\" j\n\n        i        = i + 1\n        rxdata.i = strip(dataline, 'T')\n      end\n\n      rxdata.0 = i\n      olines   = rxdata.0\n    end\n  /*********************************************************************\n  * Running as TSO command                                             *\n  *********************************************************************/\n  else\n    do\n      if idsn = '' then\n        do\n          msg =     left('Error - No dataset name passed', 75)\n          msg = msg left(moi 'can be used as an edit macro or',\n                         'as a line command on the ISPF', 75)\n          msg = msg left('dataset list utility. In both cases the',\n                         'dataset name will be automatically', 75)\n          msg = msg left('determined.', 75)\n          msg = msg left('If you call' moi 'on the command line you',\n                         'have to pass the name of the', 75)\n          msg = msg left('dataset to be processed, e.g.', 75)\n          msg = msg left('Command ===>' moi,\n                         '''my.rexx.dataset(test)''', 75)\n\n          zedsmsg = ''\n          zedlmsg = msg\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' &,\n             envir \\= 'BATCH' then\n            \"ispexec setmsg msg(ISRZ001)\"\n          else\n            do while msg \\= ''\n              say left(msg, 75)\n              msg = substr(msg, 76)\n            end\n\n          exit 8\n        end\n\n      /*****************************************************************\n      * Force single quotes around dataset name and check if it's OK   *\n      *****************************************************************/\n      idsn = \"'\" || strip(idsn,, '''') || \"'\"\n\n      if sysdsn(idsn) \\= 'OK' then\n        do\n          say 'Error - Dataset' idsn 'could not be found'\n          exit 8\n        end\n\n      /*****************************************************************\n      * Extract member name, if present                                *\n      *****************************************************************/\n      parse var idsn . '(' mem ')'\n\n      if mem \\= '' then\n        pgm = mem\n\n      /*****************************************************************\n      * Read the code                                                  *\n      *****************************************************************/\n      dynlib = 'dyn'random(99999)\n\n      \"alloc f(\"dynlib\") da(\"idsn\") shr reu\"\n      if rc > 0 then\n        do\n          say 'Error - Dataset' idsn 'could not be allocated - rc' rc\n          exit 8\n        end\n\n      \"execio * diskr\" dynlib \"(finis)\"\n      if rc > 0 then\n        do\n          say 'Error - Dataset' idsn 'could not be read - rc' rc\n          exit 8\n        end\n\n      \"free f(\"dynlib\")\"\n\n      /*****************************************************************\n      * Merge full source, indicating linebreaks                       *\n      *****************************************************************/\n      olines = queued()\n\n      i = 0\n      do queued()\n        parse pull dataline\n\n        i        = i + 1\n        rxdata.i = strip(dataline, 'T')\n      end\n\n      rxdata.0 = i\n    end\nreturn\n\n/***********************************************************************\n* GET_SOURCE_PC:                                                       *\n*                                                                      *\n* Read the text when running on the PC                                 *\n***********************************************************************/\nget_source_pc:\n  if idsn = '' then\n    do\n      say 'Syntax:' moi 'file.pan'\n      exit 8\n    end\n\n  do i = 1 by 1 while lines(idsn)\n    dataline = linein(idsn)\n    rxdata.i = strip(dataline, 'T')\n  end\n\n  rxdata.0 = i - 1\n  olines   = rxdata.0\nreturn\n\n/***********************************************************************\n* INIT_VARS:                                                           *\n*                                                                      *\n* This procedure initialises the global variables                      *\n***********************************************************************/\ninit_vars:\n  /*********************************************************************\n  * Parameter separator for EHISUPP exec                               *\n  *********************************************************************/\n  sep = x2c(00)d2c(random(2**16))x2c(ff)d2c(random(2**16))x2c(00)\n  sep = translate(sep, x2c(bababababa), ' <>&\"')\n\n  /*********************************************************************\n  * Get processing options                                             *\n  *********************************************************************/\n  opt = ehisupp('get_options,'sep','moi)\n  parse value opt with view_html     (sep),\n                       xfer_wsa      (sep),\n                       start_browser (sep),\n                       ispf_edit     (sep),\n                       show_progress (sep),\n                       dir_pc        (sep),\n                       htmlfont      (sep),\n                       ipaddr        (sep) .\n\n  /*********************************************************************\n  * Temporary output dataset                                           *\n  *********************************************************************/\n  if mem \\= '' then\n    odsn = \"'\" || userid() || '.' || mem || \".panel.html'\"\n  else\n    odsn = \"'\" || userid() || '.' || moi || \".panel.html'\"\n\n  /*********************************************************************\n  * Text strings for title, header and footer                          *\n  *********************************************************************/\n  title  = 'PANEL source:' strip(idsn,, '''')\n  header = 'PANEL source:' strip(idsn,, '''')\n  now    = date('S')\n  now    = left(now, 4)'-'substr(now, 5, 2)'-'right(now, 2)'T'time()\n  footer = 'Generated on' now 'by' userid() 'with' moi\n\n  /*********************************************************************\n  * Name of generated html file on PC                                  *\n  *********************************************************************/\n  if pgm \\= '' then\n    htmlfile = pgm || '.html'\n  else\n    htmlfile = 'ispfpan.html'\n\n  /*********************************************************************\n  * HTML colors                                                        *\n  *                                                                    *\n  * - lime(green) - default                                            *\n  * - red         - keywords                                           *\n  * - white       - quoted strings                                     *\n  * - aqua(turq)  - comments                                           *\n  * - yellow      - special characters                                 *\n  *********************************************************************/\n  col_dft        = '<em class=\"l\">'                        /* lime    */\n  col_key        = '<em class=\"r\">'                        /* red     */\n  col_str        = '<em class=\"w\">'                        /* white   */\n  col_com        = '<em class=\"t\">'                        /* turq    */\n  col_spc        = '<em class=\"y\">'                        /* yellow  */\n\n  /*********************************************************************\n  * HTML special characters and their defined entities                 *\n  *********************************************************************/\n  special_chars  = '& < > \" \u00a2'\n  special_html   = '&amp; &lt; &gt; &quot; &cent;'\n\n  /*********************************************************************\n  * Characters to be highlighted                                       *\n  *********************************************************************/\n  special_hilite = '&'\nreturn\n\n/***********************************************************************\n* BUILD_HTML:                                                          *\n*                                                                      *\n* This procedure builds the HTML output                                *\n***********************************************************************/\nbuild_html:\n  /*********************************************************************\n  * Load the list of PANEL keywords                                    *\n  *********************************************************************/\n  call build_list_of_keywords\n\n  /*********************************************************************\n  * Switches                                                           *\n  *********************************************************************/\n  in_com   = 0                  /* Inside a comment                   */\n  in_apost = 0                  /* Inside a '(apost) delimited string */\n  in_quote = 0                  /* Inside a \"(quote) delimited string */\n\n  /*********************************************************************\n  * Initialize the html output string                                  *\n  *********************************************************************/\n  if ispf_edit = 'ISPF' then\n    htmlout = x2c(ff)ispf_edit || x2c(ff)right(olines, 6, '0')x2c(ff)\n  else\n    htmlout = ''\n\n  tempout = ''\n\n  /*********************************************************************\n  * Loop over the code                                                 *\n  *********************************************************************/\n  lip = time('E')\n  lip = 1\n\n  tempout = ''\n\n  do r = 1 to rxdata.0\n    /*******************************************************************\n    * Display (optional) progress messages                             *\n    *******************************************************************/\n    if show_progress > 0 then\n      if lip >                  0 &,\n         lip // show_progress = 0 then\n        do\n          progress = 'Elapsed time' right(time('E'), 12),\n                     '- lines processed' right(lip, 6)\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' then\n            rc = ehisupp('monitor,'moi 'Progress,'progress)\n          else\n            say progress\n\n          lip = -lip\n        end\n\n    rxdata = rxdata.r\n\n    /*******************************************************************\n    * Panel keyword lines are RED, and start with a ')' in column 1    *\n    *******************************************************************/\n    if left(rxdata, 1) = ')' then\n      do\n        htmlout = htmlout || tempout ||,\n                             col_key || rxdata || '</em><br>'\n        tempout = ''\n        iterate r\n      end\n\n    do while rxdata \\= ''\n      c1 = left(rxdata, 1)\n      c2 = left(rxdata, 2)\n\n      sh = pos(c1, special_hilite) > 0 then\n      sc = wordpos(c1, special_chars)\n\n      select\n        /***************************************************************\n        * Spaces are kept unchanged - process multiple immediately     *\n        ***************************************************************/\n        when c1 == ' ' then\n          do\n            n       = verify(rxdata, ' ')\n            tempout = tempout || left(rxdata, n - 1)\n            rxdata  = substr(rxdata, n)\n          end\n\n        /***************************************************************\n        * End of single quoted string                                  *\n        ***************************************************************/\n        when in_apost &,\n             c1 = \"'\" then\n          do\n            in_apost = 0\n\n            tempout  = tempout || \"'</em>\"\n            rxdata   = substr(rxdata, 2)\n          end\n\n        /***************************************************************\n        * Start of single quoted string                                *\n        ***************************************************************/\n        when c1 = \"'\"  &,\n             \\in_quote &,\n             \\in_com then\n          do\n            in_apost = 1\n\n            tempout  = tempout || col_str\"'\"\n            rxdata   = substr(rxdata, 2)\n          end\n\n        /***************************************************************\n        * Start of a comment                                           *\n        ***************************************************************/\n        when c2 = '/' || '*' &,\n             \\in_apost &,\n             \\in_quote then\n          do\n            in_com  = 1\n\n            tempout = tempout || col_com'/' || '*'\n            rxdata  = substr(rxdata, 3)\n          end\n\n        /***************************************************************\n        * End of a comment                                             *\n        ***************************************************************/\n        when c2 = '*' || '/' &,\n             \\in_apost    &,\n             \\in_quote then\n          do\n            in_com  = 0\n\n            tempout = tempout || '*' || '/</em>'\n            rxdata  = substr(rxdata, 3)\n          end\n\n        /***************************************************************\n        * A special character has to be translated and highlighted     *\n        ***************************************************************/\n        when sc > 0    &,\n             sh > 0    &,\n             \\in_com   &,\n             \\in_apost &,\n             \\in_quote then\n          do\n            tempout = tempout ||,\n                      col_spc || word(special_html, sc)'</em>'\n            rxdata  = substr(rxdata, 2)\n          end\n\n        /***************************************************************\n        * A special character has to be translated                     *\n        ***************************************************************/\n        when sc > 0 then\n          do\n            tempout = tempout || word(special_html, sc)\n            rxdata  = substr(rxdata, 2)\n          end\n\n        /***************************************************************\n        * A special character has to be highlighted                    *\n        ***************************************************************/\n        when sh > 0    &,\n             \\in_com   &,\n             \\in_apost &,\n             \\in_quote then\n          do\n            tempout = tempout || col_spc || c1'</em>'\n            rxdata  = substr(rxdata, 2)\n          end\n\n        /***************************************************************\n        * Anything else                                                *\n        ***************************************************************/\n        otherwise\n          do\n            tempout = tempout || c1\n            rxdata  = substr(rxdata, 2)\n          end\n      end\n    end\n\n    tempout = tempout'<br>'\n\n    /*******************************************************************\n    * Append data to final result                                      *\n    *******************************************************************/\n    if length(tempout) > 512 then\n      do\n        htmlout = htmlout || tempout\n        tempout = ''\n      end\n  end\n\n  htmlout = htmlout || tempout\nreturn\n\n/***********************************************************************\n* BUILD_LIST_OF_KEYWORDS:                                              *\n*                                                                      *\n* This procedure loads the list of REXX keywords                       *\n***********************************************************************/\nbuild_list_of_keywords:\n  keyword. = 0\n\n  /*********************************************************************\n  * PANEL Keywords                                                     *\n  *********************************************************************/\n  keyword.ABC     = 1\n  keyword.ABCINIT = 1\n  keyword.ABCPROC = 1\n  keyword.AREA    = 1\n  keyword.ATTR    = 1\n  keyword.BODY    = 1\n  keyword.CCSID   = 1\n  keyword.END     = 1\n  keyword.FIELD   = 1\n  keyword.HELP    = 1\n  keyword.INEXIT  = 1\n  keyword.INEXIT  = 1\n  keyword.INIT    = 1\n  keyword.LIST    = 1\n  keyword.MODEL   = 1\n  keyword.PANEL   = 1\n  keyword.PNTS    = 1\n  keyword.PROC    = 1\n  keyword.REINIT  = 1\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EHIPLI": {"ttr": 2570, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07#/\\x01\\x162?\\x00\\x00\\x06_\\x00\\x00\\x00\\x00\\xc3\\xd3\\xd6\\xc7\\xc7\\xc9\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-08-20T00:00:00", "modifydate": "2016-11-18T00:00:00", "lines": 1631, "newlines": 0, "modlines": 0, "user": "CLOGGIE"}, "text": "/* REXX exec/edit macro to convert PL/I to 'HILITE'd HTML             */\n/*** trace ?r ***************************************************** \\| *\n*               (C) Copyright Robert AH Prins, 2007-2016               *\n************************************************************************\n*  ------------------------------------------------------------------  *\n* | Date       | By   | Remarks                                      | *\n* |------------+------+----------------------------------------------| *\n* |            |      |                                              | *\n* |------------+------+----------------------------------------------| *\n* | 2016-11-18 | RAHP | Multiple updates/simplifications             | *\n* |------------+------+----------------------------------------------| *\n* | 2015-08-19 | RAHP | Additional V4R4 & V4R5 keywords              | *\n* |------------+------+----------------------------------------------| *\n* | 2012-10-08 | RAHP | - parse *process not() and *process or() for | *\n* |            |      |   additional characters to highlight         | *\n* |            | RAHP | - additional V4R3 keywords                   | *\n* |------------+------+----------------------------------------------| *\n* | 2012-06-25 | RAHP | Add IP address                               | *\n* |------------+------+----------------------------------------------| *\n* | 2012-04-30 | RAHP | Additional V4R2 keywords                     | *\n* |------------+------+----------------------------------------------| *\n* | 2010-09-30 | RAHP | Additional V4R1 keyword                      | *\n* |------------+------+----------------------------------------------| *\n* | 2010-08-23 | RAHP | - keyword can start after ASA character      | *\n* |            |      | - correct keyword intro versions             | *\n* |------------+------+----------------------------------------------| *\n* | 2010-08-02 | RAHP | Add V3R9 and V4R1 keywords                   | *\n* |------------+------+----------------------------------------------| *\n* | 2009-08-20 | RAHP | Additional keyword                           | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-27 | RAHP | Use pop-up on ISPF to display progress       | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-02 | RAHP | Add selection for short CSS 'em' colors      | *\n* |------------+------+----------------------------------------------| *\n* | 2009-06-22 | RAHP | - accept %process statements                 | *\n* |            |      | - correct name of builtin                    | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-30 | RAHP | Disable nested comment processing            | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-22 | RAHP | Update comment                               | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-16 | RAHP | Main parsing loop needs to end on exactly    | *\n* |            |      | '==' equal, as '0d0a'x equals '' on Regina   | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-01 | RAHP | Add font selection for generated HTML        | *\n* |------------+------+----------------------------------------------| *\n* | 2009-03-23 | RAHP | Add Enterprise PL/I V3.8.0 keywords          | *\n* |------------+------+----------------------------------------------| *\n* | 2009-02-09 | RAHP | RACF problem with 'html' extension @ NVSM    | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-24 | RAHP | Further tweaks                               | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-18 | RAHP | - add GPL V3 License                         | *\n* |            |      | - use EHISUPP 'get_options' to retrieve some | *\n* |            |      |   processing options                         | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-06 | RAHP | Cater for PC environment                     | *\n* |------------+------+----------------------------------------------| *\n* | 2007-08-30 | RAHP | Further fine-tuning (HTLM 4.01 Strict)       | *\n* |------------+------+----------------------------------------------| *\n* | 2007-08-23 | RAHP | Factor out common 'EHIxxxx' routines         | *\n* |------------+------+----------------------------------------------| *\n* | 2007-08-20 | RAHP | Initial version (copy of EHIREXX)            | *\n* |------------+------+----------------------------------------------| *\n************************************************************************\n* EHIPLI is a REXX exec/edit macro that analyses PL/I code and builds  *\n* a HTML file with the color attributes as used by ISPF Edit.          *\n*                                                                      *\n* This file can be transferred to the PC by using ISPF Workstation     *\n* Agent. In addition the exec might invoke the Windows application     *\n* associated with file extension \".html\"                               *\n*                                                                      *\n* The exec runs as ISPF edit macro or might be used as line command    *\n* on the extended member list of ISPF List Utility (usually menu       *\n* option 3.4).                                                         *\n*                                                                      *\n* In addition the exec can be invoked on the command line. In this     *\n* case the dataset name has to be supplied as invocation parameter.    *\n*                                                                      *\n* t_rex will contain the environment. It can be:                       *\n*                                                                      *\n* - TSO     - TSO/ISPF                                                 *\n* - MVS     - z/OS (PGM=IRXJCL)                                        *\n* - SYSTEM  - Regina                                                   *\n* - COMMAND - PC DOS 7/2000                                            *\n* - CMD     - Object REXX (OS/2, Windoze)                              *\n************************************************************************\n* Send questions, suggestions and/or bug reports to:                   *\n*                                                                      *\n* robert@prino.org / robert.ah.prins@gmail.com                         *\n*                                                                      *\n* Robert AH Prins                                                      *\n* Taboralaan 46                                                        *\n* 8400 Oostende                                                        *\n* Belgium                                                              *\n************************************************************************\n* This program is free software: you can redistribute it and/or        *\n* modify it under the terms of the GNU General Public License as       *\n* published by the Free Software Foundation, either version 3 of       *\n* the License, or (at your option) any later version.                  *\n*                                                                      *\n* This program is distributed in the hope that it will be useful,      *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of       *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *\n* GNU General Public License for more details.                         *\n*                                                                      *\n* You should have received a copy of the GNU General Public License    *\n* along with this program. If not, see <http://www.gnu.org/licenses/>  *\n***********************************************************************/\nparse source source\nparse value source with . . moi . . . cmdenv aspace .\n\nt_rex = address()\n\nif t_rex  = 'TSO' &,\n   aspace = 'ISPF' then\n  do\n    \"ispexec vget (zenvir)\"\n    envir = strip(substr(zenvir, 17, 8))\n  end\nelse\n  envir = 'OTHER'\n\nparse arg idsn\n\ncall get_source                /* Read the PL/I program source        */\ncall init_vars                 /* Initialize the global variables     */\ncall build_html                /* Now go on and build the HTML output */\n\ncall ehisupp 'generate_output,'sep','htmlout  || sep ||,\n                                     odsn     || sep ||,\n                                     title    || sep ||,\n                                     header   || sep ||,\n                                     footer   || sep ||,\n                                     htmlfont\n\nif t_rex  = 'TSO' &,\n   aspace = 'ISPF' then\n  if envir \\= 'BATCH' then\n    do\n      /*****************************************************************\n      * Show the resulting dataset, if desired                         *\n      *****************************************************************/\n      if view_html = 'YES' then\n        \"ispexec view dataset(\"odsn\")\"\n\n      /*****************************************************************\n      * Transfer the html file to the PC                               *\n      *****************************************************************/\n      if xfer_wsa = 'YES' then\n        call ehisupp 'xfer_and_show_html,'sep','dir_pc   || sep ||,\n                                                htmlfile || sep ||,\n                                                odsn     || sep ||,\n                                                ipaddr   || sep ||,\n                                                start_browser\n    end\n  else\n    do\n      if macmode then\n        \"isredit end\"\n    end\nexit\n\n/***********************************************************************\n* TRANSLATE_ENTITIES                                                   *\n*                                                                      *\n* This procedure translates special characters to HTML entities        *\n***********************************************************************/\ntranslate_entities: procedure expose special_chars special_html\n  parse arg in\n\n  out = ''\n\n  if translate(in, ' ', special_chars) = in then\n    out = in\n  else\n    do while in \\== ''\n      c = left(in, 1)\n      k = wordpos(c, special_chars)\n\n      if k \\= 0 then\n        out = out || word(special_html, k)\n      else\n        out = out || c\n\n      in = substr(in, 2)\n    end\nreturn out\n\n/***********************************************************************\n* GET_SOURCE:                                                          *\n*                                                                      *\n* Read the PL/I source                                                 *\n***********************************************************************/\nget_source:\n  macmode = 0\n  rxdata. = ''\n  rxdata  = ''\n  pgm     = ''\n\n  select\n    when t_rex = 'TSO' then call get_source_tso\n    when t_rex = 'MVS' then call get_source_mvs\n    otherwise               call get_source_pc\n  end\nreturn\n\n/***********************************************************************\n* GET_SOURCE_TSO:                                                      *\n*                                                                      *\n* Read the text when running under TSO                                 *\n***********************************************************************/\nget_source_tso:\n  if aspace = 'ISPF' then\n    \"isredit macro (parm) NOPROCESS\"\n  else\n    rc = 4\n\n  /*********************************************************************\n  * Running as edit macro                                              *\n  *********************************************************************/\n  if rc = 0 then\n    do\n      macmode = 1\n\n      if parm = '?' then\n        do\n          \"isredit ehihelp\" moi\n          exit\n        end\n\n      \"isredit process range HI\"\n      if rc <= 4 then\n        do\n          \"isredit (ZF) = linenum .zfrange\"\n          \"isredit (ZL) = linenum .zlrange\"\n        end\n      else\n        do\n          \"isredit ehihelp\" moi\n          exit\n        end\n\n      \"isredit (DSN) = dataset\"\n      \"isredit (MEM) = member\"\n\n      if mem = '' then\n        idsn = \"'\" || dsn || \"'\"\n      else\n        do\n          pgm  = mem\n          idsn = \"'\" || dsn || '(' || mem || \")'\"\n        end\n\n      /*****************************************************************\n      * Concatenate the full source, but indicate original line breaks *\n      *****************************************************************/\n      i = 0\n      do j = +zf to +zl\n        \"isredit (DATALINE) = line\" j\n\n        if left(dataline, 1) \\= ' ' then\n          dataline = left(dataline, 1)x2c(00)substr(dataline, 2)\n\n        i        = i + 1\n        rxdata.i = strip(dataline, 'T') || ' ' || '0d0a'x\n      end\n\n      rxdata.0 = i\n      olines   = rxdata.0\n    end\n  /*********************************************************************\n  * Running as TSO command                                             *\n  *********************************************************************/\n  else\n    do\n      if idsn = '' then\n        do\n          msg =     left('Error - No dataset name passed', 75)\n          msg = msg left(moi 'can be used as an edit macro or',\n                         'as a line command on the ISPF', 75)\n          msg = msg left('dataset list utility. In both cases the',\n                         'dataset name will be automatically', 75)\n          msg = msg left('determined.', 75)\n          msg = msg left('If you call' moi 'on the command line you',\n                         'have to pass the name of the', 75)\n          msg = msg left('dataset to be processed, e.g.', 75)\n          msg = msg left('Command ===>' moi,\n                         '''my.pli.dataset(test)''', 75)\n\n          zedsmsg = ''\n          zedlmsg = msg\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' &,\n             envir \\= 'BATCH' then\n            \"ispexec setmsg msg(ISRZ001)\"\n          else\n            do while msg \\= ''\n              say left(msg, 75)\n              msg = substr(msg, 76)\n            end\n\n          exit 8\n        end\n\n      /*****************************************************************\n      * Force single quotes around dataset name and check if it's OK   *\n      *****************************************************************/\n      idsn = \"'\" || strip(idsn,, '''') || \"'\"\n\n      if sysdsn(idsn) \\= 'OK' then\n        do\n          say 'Error - Dataset' idsn 'could not be found'\n          exit 8\n        end\n\n      /*****************************************************************\n      * Extract member name, if present                                *\n      *****************************************************************/\n      parse var idsn . '(' mem ')'\n\n      if mem \\= '' then\n        pgm = mem\n\n      /*****************************************************************\n      * Read the code                                                  *\n      *****************************************************************/\n      dynlib = 'dyn'random(99999)\n\n      \"alloc f(\"dynlib\") da(\"idsn\") shr reu\"\n      if rc > 0 then\n        do\n          say 'Error - Dataset' idsn 'could not be allocated - rc' rc\n          exit 8\n        end\n\n      \"execio * diskr\" dynlib \"(finis)\"\n      if rc > 0 then\n        do\n          say 'Error - Dataset' idsn 'could not be read - rc' rc\n          exit 8\n        end\n\n      \"free f(\"dynlib\")\"\n\n      /*****************************************************************\n      * Merge full source, indicating linebreaks                       *\n      *****************************************************************/\n      olines = queued()\n\n      i = 0\n      do queued()\n        parse pull dataline\n\n        if length(dataline) = 80 &,\n           datatype(right(dataline, 8)) = 'NUM' then\n          dataline = substr(dataline, 1, 72)\n\n        if left(dataline, 1) \\= ' ' then\n          dataline = left(dataline, 1)x2c(00)substr(dataline, 2)\n\n        i        = i + 1\n        rxdata.i = strip(dataline, 'T') || ' ' || '0d0a'x\n      end\n    end\nreturn\n\n/***********************************************************************\n* GET_SOURCE_PC:                                                       *\n*                                                                      *\n* Read the text when running on the PC                                 *\n***********************************************************************/\nget_source_pc:\n  if idsn = '' then\n    do\n      say 'Syntax:' moi 'file.pli'\n      exit 8\n    end\n\n  do i = 1 by 1 while lines(idsn)\n    dataline = linein(idsn)\n\n    if length(dataline) = 80 &,\n       datatype(right(dataline, 8)) = 'NUM' then\n      dataline = substr(dataline, 1, 72)\n\n    if left(dataline, 1) \\= ' ' then\n      dataline = left(dataline, 1)x2c(00)substr(dataline, 2)\n\n    rxdata.i = strip(dataline, 'T') || ' ' || '0d0a'x\n  end\n\n  rxdata.0 = i - 1\n  olines   = rxdata.0\nreturn\n\n/***********************************************************************\n* INIT_VARS:                                                           *\n*                                                                      *\n* This procedure initialises the global variables                      *\n***********************************************************************/\ninit_vars:\n  /*********************************************************************\n  * Parameter separator for EHISUPP exec                               *\n  *********************************************************************/\n  sep = x2c(00)d2c(random(2**16))x2c(ff)d2c(random(2**16))x2c(00)\n  sep = translate(sep, x2c(bababababa), ' <>&\"')\n\n  /*********************************************************************\n  * Get processing options                                             *\n  *********************************************************************/\n  opt = ehisupp('get_options,'sep','moi)\n  parse value opt with view_html     (sep),\n                       xfer_wsa      (sep),\n                       start_browser (sep),\n                       ispf_edit     (sep),\n                       show_progress (sep),\n                       dir_pc        (sep),\n                       htmlfont      (sep),\n                       ipaddr        (sep) .\n\n  /*********************************************************************\n  * Temporary output dataset                                           *\n  *********************************************************************/\n  if mem \\= '' then\n    odsn = \"'\" || userid() || '.' || mem || \".pli.html'\"\n  else\n    odsn = \"'\" || userid() || '.' || moi || \".pli.html'\"\n\n  /*********************************************************************\n  * Text strings for title, header and footer                          *\n  *********************************************************************/\n  title  = 'PL/I source:' strip(idsn,, '''')\n  header = 'PL/I source:' strip(idsn,, '''')\n  now    = date('S')\n  now    = left(now, 4)'-'substr(now, 5, 2)'-'right(now, 2)'T'time()\n  footer = 'Generated on' now 'by' userid() 'with' moi\n\n  /*********************************************************************\n  * Name of generated html file on PC                                  *\n  *********************************************************************/\n  if pgm \\= '' then\n    htmlfile = pgm || '.html'\n  else\n    htmlfile = 'plipgm.html'\n\n  /*********************************************************************\n  * HTML colors                                                        *\n  *                                                                    *\n  * - lime(green) - default                                            *\n  * - red         - keywords                                           *\n  * - white       - quoted strings                                     *\n  * - aqua(turq)  - comments                                           *\n  * - yellow      - special characters                                 *\n  * - blue        - pre-processor code                                 *\n  *********************************************************************/\n  col_dft        = '<em class=\"l\">'                        /* lime    */\n  col_key        = '<em class=\"r\">'                        /* red     */\n  col_str        = '<em class=\"w\">'                        /* white   */\n  col_com        = '<em class=\"t\">'                        /* turq    */\n  col_spc        = '<em class=\"y\">'                        /* yellow  */\n  col_pre        = '<em class=\"b\">'                        /* blue    */\n\n  /*********************************************************************\n  * Colors for nested parentheses                                      *\n  *********************************************************************/\n  col_par.0      = '<em class=\"f\">'                        /* fuchsia */\n  col_par.1      = '<em class=\"y\">'                        /* yellow  */\n  col_par.2      = '<em class=\"w\">'                        /* white   */\n  col_par.3      = '<em class=\"r\">'                        /* red     */\n  col_par.4      = '<em class=\"t\">'                        /* turq    */\n\n  /*********************************************************************\n  * HTML special characters and their defined entities                 *\n  *********************************************************************/\n  special_chars  = '< > & \"'\n  special_html   = '&lt; &gt; &amp; &quot;'\n\n  /*********************************************************************\n  * Characters to be highlighted                                       *\n  *********************************************************************/\n  special_hilite = '+-*=/<>&\u00ac|:'\n\n  /*********************************************************************\n  * Characters separating words                                        *\n  *********************************************************************/\n  separator      = ' +-*/=<>&\u00ac|.,:;''()\"'x2c(00)\nreturn\n\n/***********************************************************************\n* BUILD_HTML:                                                          *\n*                                                                      *\n* This procedure builds the HTML output                                *\n***********************************************************************/\nbuild_html:\n  /*********************************************************************\n  * Load the list of PL/I keywords, builtins, etc                      *\n  *********************************************************************/\n  call build_list_of_keywords\n\n  /*********************************************************************\n  * Switches                                                           *\n  *********************************************************************/\n  kwbegin  = 1                  /* Do we expect a new keyword ?       */\n\n  in_com   = 0                  /* Inside a comment                   */\n  in_apost = 0                  /* Inside a '(apost) delimited string */\n  in_quote = 0                  /* Inside a \"(quote) delimited string */\n  in_pro   = 0                  /* Inside a *process directive        */\n  in_pre   = 0                  /* Inside a %pre-processor statement  */\n  level    = 0                  /* Nested comment levels              */\n  paren    = 1                  /* Nested parentheses level           */\n  nest_com = 0                  /* No nested comments in PL/I (yet)   */\n\n  /*********************************************************************\n  * Initialize the html output string                                  *\n  *********************************************************************/\n  if ispf_edit = 'ISPF' then\n    htmlout = x2c(ff)ispf_edit || x2c(ff)right(olines, 6, '0')x2c(ff)\n  else\n    htmlout = ''\n\n  tempout = ''\n\n  /*********************************************************************\n  * Loop over the code                                                 *\n  *********************************************************************/\n  lip = time('E')\n  lip = 1\n\n  r      = 1\n  rxdata = rxdata.r\n\n  do until rxdata == ''\n    /*******************************************************************\n    * Display (optional) progress messages                             *\n    *******************************************************************/\n    if show_progress > 0 then\n      if lip >                  0 &,\n         lip // show_progress = 0 then\n        do\n          progress = 'Elapsed time' right(time('E'), 12),\n                     '- lines processed' right(lip, 6)\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' then\n            rc = ehisupp('monitor,'moi 'Progress,'progress)\n          else\n            say progress\n\n          lip = -lip\n        end\n\n    c1 = left(rxdata, 1)\n    c2 = left(rxdata, 2)\n\n    /*******************************************************************\n    * Is it a special character?                                       *\n    *******************************************************************/\n    sc = wordpos(c1, special_chars)\n\n    /*******************************************************************\n    * Is it a special hilite character?                                *\n    *******************************************************************/\n    sh = pos(c1, special_hilite)\n\n    kw = ''                                     /* Initialize keyword */\n\n    /*******************************************************************\n    * If we are at the beginning of a keyword ...                      *\n    *******************************************************************/\n    if kwbegin            = 1 &,\n       pos(c1, separator) = 0 then\n      do\n        parse upper var rxdata kw\n\n        /***************************************************************\n        * ... we search the next separator ...                         *\n        ***************************************************************/\n        sep_pos = verify(kw, separator, 'M')\n\n        /***************************************************************\n        * ... and save the keyword if separator is found               *\n        ***************************************************************/\n        if sep_pos > 0 then\n          kw = left(kw, sep_pos - 1)\n\n        kwbegin = 0\n      end\n\n    /*******************************************************************\n    * If we are on a separator we keep in mind that it's the beginning *\n    * of a new keyword                                                 *\n    *******************************************************************/\n    if pos(c1, separator) > 0 then\n      kwbegin = 1\n\n    /*******************************************************************\n    * Determine the HTML attributes for the data                       *\n    *******************************************************************/\n    select\n      /*****************************************************************\n      * It's an ASA control character                                  *\n      *****************************************************************/\n      when c1          \\= '*' &,\n           c1          \\= '%' &,\n           right(c2, 1) = x2c(00) then\n        do\n          tempout = tempout || col_spc || c1'</em>'\n          rxdata  = substr(rxdata, 3)\n          kwbegin = 1\n        end\n\n      /*****************************************************************\n      * Spaces are kept unchanged - process multiple spaces in one go| *\n      *****************************************************************/\n      when c1 == ' ' then\n        do\n          n       = verify(rxdata, ' ')\n          tempout = tempout || left(rxdata, n - 1)\n          rxdata  = substr(rxdata, n)\n        end\n\n      /*****************************************************************\n      * Line break                                                     *\n      *****************************************************************/\n      when c2 = '0d0a'x then\n        do\n          lip     = abs(lip) + 1\n          tempout = tempout || '<br>'\n          kwbegin = 1\n          rxdata  = substr(rxdata, 3)\n        end\n\n      /*****************************************************************\n      * End of single quoted string                                    *\n      *****************************************************************/\n      when in_apost &,\n           c1 = \"'\" then\n          do\n            in_apost = 0\n\n            tempout  = tempout || \"'</em>\"\n            rxdata   = substr(rxdata, 2)\n          end\n\n      /*****************************************************************\n      * End of double quoted string                                    *\n      *****************************************************************/\n      when in_quote &,\n           c1 = '\"' then\n          do\n            in_quote = 0\n\n            tempout  = tempout || '\"</em>'\n            rxdata   = substr(rxdata, 2)\n          end\n\n      /*****************************************************************\n      * Start of single quoted string                                  *\n      *****************************************************************/\n      when c1 = \"'\"  &,\n           \\in_quote &,\n           \\in_com then\n        do\n          in_apost = 1\n\n          tempout  = tempout || col_str\"'\"\n          rxdata   = substr(rxdata, 2)\n        end\n\n      /*****************************************************************\n      * Start of double quoted string                                  *\n      *****************************************************************/\n      when c1 = '\"'  &,\n           \\in_apost &,\n           \\in_com then\n        do\n          in_quote = 1\n\n          tempout  = tempout || col_str'\"'\n          rxdata   = substr(rxdata, 2)\n        end\n\n      /*****************************************************************\n      * Start of a nested comment                                      *\n      *****************************************************************/\n      when c2 = '/*' &,\n           in_com then\n        do\n          level   = level + nest_com\n          tempout = tempout || '/*'\n          rxdata  = substr(rxdata, 3)\n        end\n\n      /*****************************************************************\n      * Start of a comment                                             *\n      *****************************************************************/\n      when c2 = '/*' &,\n           \\in_apost &,\n           \\in_quote then\n        do\n          in_com  = 1\n\n          tempout = tempout || col_com'/*'\n          rxdata  = substr(rxdata, 3)\n        end\n\n      /*****************************************************************\n      * End of a comment                                               *\n      *****************************************************************/\n      when c2    = '*/' &,\n           level = 0    &,\n           \\in_apost    &,\n           \\in_quote then\n        do\n          in_com  = 0\n\n          tempout = tempout || '*/</em>'\n          rxdata  = substr(rxdata, 3)\n        end\n\n      /*****************************************************************\n      * End of a nested comment                                        *\n      *****************************************************************/\n      when c2 = '*/' &,\n           \\in_apost &,\n           \\in_quote then\n        do\n          level   = level - nest_com\n          tempout = tempout || '*/'\n          rxdata  = substr(rxdata, 3)\n        end\n\n      /*****************************************************************\n      * A special character has to be translated and highlighted       *\n      *****************************************************************/\n      when sc > 0    &,\n           sh > 0    &,\n           \\in_pro   &,\n           \\in_com   &,\n           \\in_apost &,\n           \\in_quote then\n        do\n          tempout = tempout || col_spc || word(special_html, sc)'</em>'\n          rxdata  = substr(rxdata, 2)\n        end\n\n      /*****************************************************************\n      * A special character has to be translated                       *\n      *****************************************************************/\n      when sc > 0 then\n        do\n          tempout = tempout || word(special_html, sc)\n          rxdata  = substr(rxdata, 2)\n        end\n\n      /*****************************************************************\n      * It's a *process or %process statement                          *\n      *****************************************************************/\n      when (c1          = '*'     |,\n            c1          = '%')    &,\n           right(c2, 1) = x2c(00) &,\n           \\in_pro   &,\n           \\in_com   &,\n           \\in_apost &,\n           \\in_quote then\n        do\n          in_pro  = 1\n          tempout = tempout || col_pre || c1\n          rxdata  = substr(rxdata, 3)\n          ruxdata = translate(rxdata)\n\n          /*************************************************************\n          * Get special NOT and OR characters from *process            *\n          *************************************************************/\n          if pos(\"NOT('\", ruxdata) \\= 0 then\n            do\n              parse value ruxdata with . \"NOT('\" ?spc \")\" .\n\n              special_hilite = special_hilite || ?spc\n              separator      = ?spc || separator\n            end\n\n          if pos(\"OR('\", ruxdata) \\= 0 then\n            do\n              parse value ruxdata with . \"OR('\" ?spc \")\" .\n\n              special_hilite = special_hilite || ?spc\n              separator      = ?spc || separator\n            end\n        end\n\n      /*****************************************************************\n      * A special character has to be highlighted                      *\n      *****************************************************************/\n      when sh > 0    &,\n           \\in_pre   &,\n           \\in_pro   &,\n           \\in_com   &,\n           \\in_apost &,\n           \\in_quote then\n        do\n          tempout = tempout || col_spc || c1'</em>'\n          rxdata  = substr(rxdata, 2)\n        end\n\n      /*****************************************************************\n      * It's a keyword                                                 *\n      *****************************************************************/\n      when keyword.kw = 1 &,\n           \\in_pro        &,\n           \\in_pre        &,\n           \\in_com        &,\n           \\in_apost      &,\n           \\in_quote then\n        do\n          kw      = left(rxdata, length(kw))\n          tempout = tempout || col_key || kw'</em>'\n          rxdata  = substr(rxdata, length(kw) + 1)\n        end\n\n      /*****************************************************************\n      * It's a pre-processor directive (%)                             *\n      *****************************************************************/\n      when c1 = '%'  &,\n           \\in_pro   &,\n           \\in_pre   &,\n           \\in_com   &,\n           \\in_apost &,\n           \\in_quote then\n        do\n          in_pre  = 1\n          tempout = tempout || col_pre'%'\n          rxdata  = substr(rxdata, 2)\n        end\n\n      /*****************************************************************\n      * It's a left parenthesis                                        *\n      *****************************************************************/\n      when c1 = '('  &,\n           \\in_pro   &,\n           \\in_com   &,\n           \\in_apost &,\n           \\in_quote then\n        do\n          paren   = (paren + 1) // 5\n          tempout = tempout || col_par.paren || '(</em>'\n          rxdata  = substr(rxdata, 2)\n        end\n\n      /*****************************************************************\n      * It's a right parenthesis                                       *\n      *****************************************************************/\n      when c1 = ')'  &,\n           \\in_pro   &,\n           \\in_com   &,\n           \\in_apost &,\n           \\in_quote then\n        do\n          tempout = tempout || col_par.paren')</em>'\n          paren   = (paren + 4) // 5\n          rxdata  = substr(rxdata, 2)\n        end\n\n      /*****************************************************************\n      * It's a semi-colon while in a pre-processor state               *\n      *****************************************************************/\n      when c1 = ';'  &,\n          (in_pre    |,\n           in_pro)   &,\n           \\in_com   &,\n           \\in_apost &,\n           \\in_quote then\n        do\n          in_pre  = 0\n          in_pro  = 0\n          tempout = tempout || ';</em>'\n          rxdata  = substr(rxdata, 2)\n        end\n\n      /*****************************************************************\n      * Anything else                                                  *\n      *****************************************************************/\n      otherwise\n        do\n          tempout = tempout || c1\n          rxdata  = substr(rxdata, 2)\n        end\n    end\n\n    /*******************************************************************\n    * Get more data                                                    *\n    *******************************************************************/\n    if length(rxdata) < 80 then\n      do\n        r       = r + 1\n        rxdata  = rxdata || rxdata.r\n      end\n\n    /*******************************************************************\n    * Append data to final result                                      *\n    *******************************************************************/\n    if length(tempout) > 512 then\n      do\n        htmlout = htmlout || tempout\n        tempout = ''\n      end\n  end\n\n  htmlout = htmlout || tempout\nreturn\n\n/***********************************************************************\n* BUILD_LIST_OF_KEYWORDS:                                              *\n*                                                                      *\n* This procedure loads the list of PL/I keywords                       *\n***********************************************************************/\nbuild_list_of_keywords:\n  keyword. = 0\n\n  keyword.ABNORMAL               = 1\n  keyword.ABS                    = 1\n  keyword.ACOS                   = 1\n  keyword.ACOSF                  = 1\n  keyword.ADD                    = 1\n  keyword.ADDBUFF                = 1\n  keyword.ADDR                   = 1\n  keyword.ADDRDATA               = 1\n  keyword.ALIAS                  = 1\n  keyword.ALIGNED                = 1\n  keyword.ALL                    = 1\n  keyword.ALLCOMPARE             = 1                        /* EP 4.3 */\n  keyword.ALLOC                  = 1\n  keyword.ALLOCATE               = 1\n  keyword.ALLOCATION             = 1\n  keyword.ALLOCN                 = 1\n  keyword.ALLOCSIZE              = 1\n  keyword.ALLOC31                = 1                        /* EP 5.1 */\n  keyword.ANY                    = 1\n  keyword.ANYCONDITION           = 1\n  keyword.AREA                   = 1\n  keyword.ASCII                  = 1\n  keyword.ASIN                   = 1\n  keyword.ASINF                  = 1\n  keyword.ASM                    = 1\n  keyword.ASMTDLI                = 1\n  keyword.ASSEMBLER              = 1\n  keyword.ASSERT                 = 1                        /* EP 4.3 */\n  keyword.ASSIGNABLE             = 1\n  keyword.ATAN                   = 1\n  keyword.ATAND                  = 1\n  keyword.ATANF                  = 1\n  keyword.ATANH                  = 1\n  keyword.ATTACH                 = 1\n  keyword.ATTENTION              = 1\n  keyword.ATTN                   = 1\n  keyword.AUTO                   = 1\n  keyword.AUTOMATIC              = 1\n  keyword.AVAILABLEAREA          = 1\n  keyword.BACKWARDS              = 1\n  keyword.BASED                  = 1\n  keyword.BASE64DECODE16         = 1                        /* EP 4.4 */\n  keyword.BASE64DECODE8          = 1                        /* EP 4.4 */\n  keyword.BASE64ENCODE16         = 1                        /* EP 4.4 */\n  keyword.BASE64ENCODE8          = 1                        /* EP 4.4 */\n  keyword.BEGIN                  = 1\n  keyword.BETWEEN                = 1                        /* EP 4.5 */\n  keyword.BETWEENEXCLUSIVE       = 1                        /* EP 5.1 */\n  keyword.BETWEENLEFTEXCCLUSIVE  = 1                        /* EP 5.1 */\n  keyword.BETWEENRIGHtEXCCLUSIVE = 1                        /* EP 5.1 */\n  keyword.BIGENDIAN              = 1\n  keyword.BIN                    = 1\n  keyword.BINARY                 = 1\n  keyword.BINARYVALUE            = 1\n  keyword.BIND                   = 1\n  keyword.BINVALUE               = 1\n  keyword.BIT                    = 1\n  keyword.BITLOC                 = 1\n  keyword.BITLOCATION            = 1\n  keyword.BKWD                   = 1\n  keyword.BLKSIZE                = 1\n  keyword.BOOL                   = 1\n  keyword.BUF                    = 1\n  keyword.BUFFERED               = 1\n  keyword.BUFFERS                = 1\n  keyword.BUFND                  = 1\n  keyword.BUFNI                  = 1\n  keyword.BUFOFF                 = 1\n  keyword.BUFSP                  = 1\n  keyword.BUILTIN                = 1\n  keyword.BX                     = 1\n  keyword.BY                     = 1\n  keyword.BYADDR                 = 1\n  keyword.BYTE                   = 1\n  keyword.BYVALUE                = 1\n  keyword.B4                     = 1\n  keyword.CALL                   = 1\n  keyword.CANCEL                 = 1                        /* EP 4.4 */\n  keyword.CAST                   = 1\n  keyword.CDS                    = 1\n  keyword.CEIL                   = 1\n  keyword.CENTER                 = 1\n  keyword.CENTERLEFT             = 1\n  keyword.CENTERRIGHT            = 1\n  keyword.CENTRE                 = 1\n  keyword.CENTRELEFT             = 1\n  keyword.CENTRERIGHT            = 1\n  keyword.CHAR                   = 1\n  keyword.CHARACTER              = 1\n  keyword.CHARG                  = 1\n  keyword.CHARGRAPHIC            = 1\n  keyword.CHARVAL                = 1\n  keyword.CHECK                  = 1\n  keyword.CHECKSTG               = 1\n  keyword.CHECKSUM               = 1                        /* EP 5.1 */\n  keyword.CLOSE                  = 1\n  keyword.CMPAT                  = 1\n  keyword.COBOL                  = 1\n  keyword.COL                    = 1\n  keyword.COLLATE                = 1\n  keyword.COLUMN                 = 1\n  keyword.COMMENT                = 1\n  keyword.COMPARE                = 1\n  keyword.COMPILEDATE            = 1\n  keyword.COMPILETIME            = 1\n  keyword.COMPLETION             = 1\n  keyword.COMPLEX                = 1\n  keyword.COND                   = 1\n  keyword.CONDITION              = 1\n  keyword.CONJG                  = 1\n  keyword.CONN                   = 1\n  keyword.CONNECTED              = 1\n  keyword.CONSECUTIVE            = 1\n  keyword.CONTROLLED             = 1\n  keyword.CONV                   = 1\n  keyword.CONVERSION             = 1\n  keyword.COPY                   = 1\n  keyword.COS                    = 1\n  keyword.COSD                   = 1\n  keyword.COSF                   = 1\n  keyword.COSH                   = 1\n  keyword.COUNT                  = 1\n  keyword.COUNTER                = 1\n  keyword.CPLN                   = 1\n  keyword.CPLX                   = 1\n  keyword.CS                     = 1\n  keyword.CSTG                   = 1\n  keyword.CTL                    = 1\n  keyword.CTLASA                 = 1\n  keyword.CTL360                 = 1\n  keyword.CURRENTSIZE            = 1\n  keyword.CURRENTSTORAGE         = 1\n  keyword.DATA                   = 1\n  keyword.DATAFIELD              = 1\n  keyword.DATE                   = 1\n  keyword.DATETIME               = 1\n  keyword.DAYS                   = 1\n  keyword.DAYSTODATE             = 1\n  keyword.DAYSTOSECS             = 1\n  keyword.DB                     = 1\n  keyword.DCL                    = 1\n  keyword.DEC                    = 1\n  keyword.DECIMAL                = 1\n  keyword.DECLARE                = 1\n  keyword.DEF                    = 1\n  keyword.DEFAULT                = 1\n  keyword.DEFINE                 = 1\n  keyword.DEFINED                = 1\n  keyword.DELAY                  = 1\n  keyword.DELETE                 = 1\n  keyword.DESCRIPTOR             = 1\n  keyword.DESCRIPTORS            = 1\n  keyword.DETACH                 = 1\n  keyword.DFT                    = 1\n  keyword.DIM                    = 1\n  keyword.DIMACROSS              = 1                        /* EP 3.8 */\n  keyword.DIMENSION              = 1\n  keyword.DIRECT                 = 1\n  keyword.DISPLAY                = 1\n  keyword.DIVIDE                 = 1\n  keyword.DO                     = 1\n  keyword.DOWNTHRU               = 1\n  keyword.EDIT                   = 1\n  keyword.ELSE                   = 1\n  keyword.EMPTY                  = 1\n  keyword.END                    = 1\n  keyword.ENDFILE                = 1\n  keyword.ENDPAGE                = 1\n  keyword.ENTRY                  = 1\n  keyword.ENTRYADDR              = 1\n  keyword.ENV                    = 1\n  keyword.ENVIRONMENT            = 1\n  keyword.EPSILON                = 1\n  keyword.ERF                    = 1\n  keyword.ERFC                   = 1\n  keyword.ERROR                  = 1\n  keyword.EVENT                  = 1\n  keyword.EXCL                   = 1\n  keyword.EXCLUSIVE              = 1\n  keyword.EXIT                   = 1\n  keyword.EXP                    = 1\n  keyword.EXPF                   = 1\n  keyword.EXPONENT               = 1\n  keyword.EXPORTS                = 1\n  keyword.EXT                    = 1\n  keyword.EXTERNAL               = 1\n  keyword.FB                     = 1\n  keyword.FBS                    = 1\n  keyword.FETCH                  = 1\n  keyword.FILE                   = 1\n  keyword.FILEDDINT              = 1\n  keyword.FILEDDTEST             = 1\n  keyword.FILEDDWORD             = 1\n  keyword.FILEID                 = 1\n  keyword.FILEOPEN               = 1\n  keyword.FILEREAD               = 1\n  keyword.FILESEEK               = 1\n  keyword.FILETELL               = 1\n  keyword.FILEWRITE              = 1\n  keyword.FINISH                 = 1\n  keyword.FIRST                  = 1\n  keyword.FIXED                  = 1\n  keyword.FIXEDBIN               = 1                        /* EP 3.8 */\n  keyword.FIXEDDEC               = 1                        /* EP 3.8 */\n  keyword.FIXEDOVERFLOW          = 1\n  keyword.FLOAT                  = 1\n  keyword.FLOATBIN               = 1                        /* EP 3.8 */\n  keyword.FLOATDEC               = 1                        /* EP 3.8 */\n  keyword.FLOOR                  = 1\n  keyword.FLUSH                  = 1\n  keyword.FOFL                   = 1\n  keyword.FORMAT                 = 1\n  keyword.FORTRAN                = 1\n  keyword.FREE                   = 1\n  keyword.FROM                   = 1\n  keyword.FROMALIEN              = 1\n  keyword.FS                     = 1\n  keyword.GAMMA                  = 1\n  keyword.GENERIC                = 1\n  keyword.GENKEY                 = 1\n  keyword.GET                    = 1\n  keyword.GETENV                 = 1\n  keyword.GO                     = 1\n  keyword.GOTO                   = 1\n  keyword.GRAPHIC                = 1\n  keyword.GX                     = 1\n  keyword.HANDLE                 = 1\n  keyword.HBOUND                 = 1\n  keyword.HBOUNDACROSS           = 1                        /* EP 4.2 */\n  keyword.HEX                    = 1\n  keyword.HEXADEC                = 1\n  keyword.HEXDECODE              = 1                        /* EP 5.1 */\n  keyword.HEXDECODE8             = 1                        /* EP 5.1 */\n  keyword.HEXIMAGE               = 1\n  keyword.HIGH                   = 1\n  keyword.HUGE                   = 1\n  keyword.IAND                   = 1\n  keyword.ICLZ                   = 1                        /* EP 5.1 */\n  keyword.IEEE                   = 1\n  keyword.IEOR                   = 1\n  keyword.IF                     = 1\n  keyword.IGNORE                 = 1\n  keyword.IMAG                   = 1\n  keyword.IN                     = 1\n  keyword.INDEX                  = 1\n  keyword.INDEXAREA              = 1\n  keyword.INDEXED                = 1\n  keyword.INDEXR                 = 1                        /* EP 4.4 */\n  keyword.INDICATORS             = 1                        /* EP 4.2 */\n  keyword.INIT                   = 1\n  keyword.INITIAL                = 1\n  keyword.INLINE                 = 1\n  keyword.INLIST                 = 1                        /* EP 4.5 */\n  keyword.INONLY                 = 1                        /* EP 3.9 */\n  keyword.INOT                   = 1\n  keyword.INOUT                  = 1                        /* EP 3.9 */\n  keyword.INPUT                  = 1\n  keyword.INT                    = 1\n  keyword.INTER                  = 1\n  keyword.INTERNAL               = 1\n  keyword.INTO                   = 1\n  keyword.INVALIDOP              = 1\n  keyword.IOR                    = 1\n  keyword.IRRED                  = 1\n  keyword.IRREDUCIBLE            = 1\n  keyword.ISFINITE               = 1                        /* EP 3.7 */\n  keyword.ISIGNED                = 1\n  keyword.ISINF                  = 1                        /* EP 3.7 */\n  keyword.ISLL                   = 1\n  keyword.ISMAIN                 = 1\n  keyword.ISNAN                  = 1                        /* EP 3.7 */\n  keyword.ISNORMAL               = 1                        /* EP 3.7 */\n  keyword.ISRL                   = 1\n  keyword.ISZERO                 = 1                        /* EP 3.7 */\n  keyword.IUNSIGNED              = 1\n  keyword.JSONGETARRAYEND        = 1                        /* EP 4.5 */\n  keyword.JSONGETARRAYSTART      = 1                        /* EP 4.5 */\n  keyword.JSONGETCOLON           = 1                        /* EP 4.5 */\n  keyword.JSONGETCOMMA           = 1                        /* EP 4.5 */\n  keyword.JSONGETMEMBER          = 1                        /* EP 4.5 */\n  keyword.JSONGETOBJECTEND       = 1                        /* EP 4.5 */\n  keyword.JSONGETOBJECTSTART     = 1                        /* EP 4.5 */\n  keyword.JSONGETVALUE           = 1                        /* EP 4.5 */\n  keyword.JSONNAME               = 1                        /* EP 5.1 */\n  keyword.JSONOMIT               = 1                        /* EP 5.1 */\n  keyword.JSONPUTARRAYEND        = 1                        /* EP 4.5 */\n  keyword.JSONPUTARRAYSTART      = 1                        /* EP 4.5 */\n  keyword.JSONPUTCOLON           = 1                        /* EP 4.5 */\n  keyword.JSONPUTCOMMA           = 1                        /* EP 4.5 */\n  keyword.JSONPUTMEMBER          = 1                        /* EP 4.5 */\n  keyword.JSONPUTOBJECTEND       = 1                        /* EP 4.5 */\n  keyword.JSONPUTOBJECTSTART     = 1                        /* EP 4.5 */\n  keyword.JSONPUTVALUE           = 1                        /* EP 4.5 */\n  keyword.JSONVALID              = 1                        /* EP 4.5 */\n  keyword.JULIANTOSMF            = 1                        /* EP 4.5 */\n  keyword.KEY                    = 1\n  keyword.KEYED                  = 1\n  keyword.KEYFROM                = 1\n  keyword.KEYLENGTH              = 1\n  keyword.KEYLOC                 = 1\n  keyword.KEYTO                  = 1\n  keyword.LABEL                  = 1\n  keyword.LAST                   = 1\n  keyword.LBOUND                 = 1\n  keyword.LBOUNDACROSS           = 1                        /* EP 4.2 */\n  keyword.LEAVE                  = 1\n  keyword.LEFT                   = 1\n  keyword.LENGTH                 = 1\n  keyword.LIKE                   = 1\n  keyword.LIMITED                = 1\n  keyword.LINE                   = 1\n  keyword.LINENO                 = 1\n  keyword.LINESIZE               = 1\n  keyword.LINKAGE                = 1\n  keyword.LIST                   = 1\n  keyword.LITTLEENDIAN           = 1\n  keyword.LOC                    = 1\n  keyword.LOCATE                 = 1\n  keyword.LOCATES                = 1                        /* EP 4.4 */\n  keyword.LOCATION               = 1\n  keyword.LOCNEWSPACE            = 1                        /* EP 4.4 */\n  keyword.LOCNEWVALUE            = 1                        /* EP 4.4 */\n  keyword.LOCSTG                 = 1                        /* EP 4.4 */\n  keyword.LOCVAL                 = 1                        /* EP 4.4 */\n  keyword.LOG                    = 1\n  keyword.LOGF                   = 1\n  keyword.LOGGAMMA               = 1\n  keyword.LOG10                  = 1\n  keyword.LOG10F                 = 1\n  keyword.LOG2                   = 1\n  keyword.LOW                    = 1\n  keyword.LOWERCASE              = 1\n  keyword.LOWER2                 = 1\n  keyword.MACCOL                 = 1\n  keyword.MACLMAR                = 1\n  keyword.MACNAME                = 1\n  keyword.MACRMAR                = 1\n  keyword.MAIN                   = 1\n  keyword.MAINNAME               = 1                        /* EP 5.1 */\n  keyword.MAX                    = 1\n  keyword.MAXEXP                 = 1\n  keyword.MAXLENGTH              = 1\n  keyword.MEMCONVERT             = 1                        /* EP 3.7 */\n  keyword.MEMCU12                = 1                        /* EP 3.9 */\n  keyword.MEMCU14                = 1                        /* EP 3.9 */\n  keyword.MEMCU21                = 1                        /* EP 3.9 */\n  keyword.MEMCU24                = 1                        /* EP 3.9 */\n  keyword.MEMCU41                = 1                        /* EP 3.9 */\n  keyword.MEMCU42                = 1                        /* EP 3.9 */\n  keyword.MEMINDEX               = 1                        /* EP 3.3 */\n  keyword.MEMSEARCH              = 1                        /* EP 3.3 */\n  keyword.MEMSEARCHR             = 1                        /* EP 3.3 */\n  keyword.MEMVERIFY              = 1                        /* EP 3.3 */\n  keyword.MEMVERIFYR             = 1                        /* EP 3.3 */\n  keyword.MIN                    = 1\n  keyword.MINEXP                 = 1\n  keyword.MOD                    = 1\n  keyword.MPSTR                  = 1\n  keyword.MULTIPLY               = 1\n  keyword.NAME                   = 1\n  keyword.NATIVE                 = 1\n  keyword.NCP                    = 1\n  keyword.NEW                    = 1\n  keyword.NOCHARG                = 1\n  keyword.NOCHARGRAPHIC          = 1\n  keyword.NOCHECK                = 1\n  keyword.NOCMPAT                = 1\n  keyword.NOCONV                 = 1\n  keyword.NOCONVERSION           = 1\n  keyword.NODESCRIPTOR           = 1\n  keyword.NOEXECOPS              = 1\n  keyword.NOFIXEDOVERFLOW        = 1\n  keyword.NOFOFL                 = 1\n  keyword.NOINLINE               = 1\n  keyword.NOLOCK                 = 1\n  keyword.NOMAP                  = 1\n  keyword.NOMAPIN                = 1\n  keyword.NOMAPOUT               = 1\n  keyword.NONASGN                = 1\n  keyword.NONASSIGNABLE          = 1\n  keyword.NONCONNECTED           = 1\n  keyword.NONNATIVE              = 1\n  keyword.NONVAR                 = 1\n  keyword.NONVARYING             = 1\n  keyword.NOOFL                  = 1\n  keyword.NOOVERFLOW             = 1\n  keyword.NORESCAN               = 1\n  keyword.NORMAL                 = 1\n  keyword.NOSIZE                 = 1\n  keyword.NOSTRG                 = 1\n  keyword.NOSTRINGRANGE          = 1\n  keyword.NOSTRINGSIZE           = 1\n  keyword.NOSTRZ                 = 1\n  keyword.NOSUBRG                = 1\n  keyword.NOSUBSCRIPTRANGE       = 1\n  keyword.NOUFL                  = 1\n  keyword.NOUNDERFLOW            = 1\n  keyword.NOWRITE                = 1\n  keyword.NOZDIV                 = 1\n  keyword.NOZERODIVIDE           = 1\n  keyword.NULL                   = 1\n  keyword.NULLENTRY              = 1                        /* EP 4.5 */\n  keyword.NULLINIT               = 1                        /* EP 4.5 */\n  keyword.OFFSET                 = 1\n  keyword.OFFSETADD              = 1\n  keyword.OFFSETDIFF             = 1\n  keyword.OFFSETSUBTRACT         = 1\n  keyword.OFFSETVALUE            = 1\n  keyword.OFL                    = 1\n  keyword.OMITTED                = 1\n  keyword.ON                     = 1\n  keyword.ONAREA                 = 1                        /* EP 4.1 */\n  keyword.ONCHAR                 = 1\n  keyword.ONCODE                 = 1\n  keyword.ONCONDCOND             = 1\n  keyword.ONCONDID               = 1\n  keyword.ONCOUNT                = 1\n  keyword.ONFILE                 = 1\n  keyword.ONGSOURCE              = 1\n  keyword.ONKEY                  = 1\n  keyword.ONLINE                 = 1                        /* EP 3.8 */\n  keyword.ONLOC                  = 1\n  keyword.ONOFFSET               = 1                        /* EP 3.7 */\n  keyword.ONSOURCE               = 1\n  keyword.ONSUBCODE              = 1\n  keyword.ONSUBCODE2             = 1                        /* EP 5.1 */\n  keyword.ONWCHAR                = 1\n  keyword.ONWSOURCE              = 1\n  keyword.OPEN                   = 1\n  keyword.OPTIONAL               = 1\n  keyword.OPTIONS                = 1\n  keyword.ORDER                  = 1\n  keyword.ORDINAL                = 1\n  keyword.ORDINALNAME            = 1\n  keyword.ORDINALPRED            = 1\n  keyword.ORDINALSUCC            = 1\n  keyword.OTHER                  = 1\n  keyword.OTHERWISE              = 1\n  keyword.OUTONLY                = 1                        /* EP 3.9 */\n  keyword.OUTPUT                 = 1\n  keyword.OVERFLOW               = 1\n  keyword.PACKAGE                = 1\n  keyword.PACKAGENAME            = 1\n  keyword.PAGE                   = 1\n  keyword.PAGENO                 = 1\n  keyword.PAGESIZE               = 1\n  keyword.PARAMETER              = 1\n  keyword.PARMSET                = 1\n  keyword.PASSWORD               = 1\n  keyword.PENDING                = 1\n  keyword.PIC                    = 1\n  keyword.PICSPEC                = 1                        /* EP 3.6 */\n  keyword.PICTURE                = 1\n  keyword.PLACES                 = 1\n  keyword.PLIASCII               = 1\n  keyword.PLIATTN                = 1                        /* EP 5.1 */\n  keyword.PLICANC                = 1                        /* EP 3.2 */\n  keyword.PLICKPT                = 1                        /* EP 3.2 */\n  keyword.PLIDELETE              = 1\n  keyword.PLIDUMP                = 1\n  keyword.PLIEBCDIC              = 1\n  keyword.PLIFILL                = 1\n  keyword.PLIFREE                = 1\n  keyword.PLIMOVE                = 1\n  keyword.PLIOVER                = 1\n  keyword.PLIREST                = 1                        /* EP 3.2 */\n  keyword.PLIRETC                = 1\n  keyword.PLIRETV                = 1\n  keyword.PLISAXA                = 1\n  keyword.PLISAXB                = 1\n  keyword.PLISAXC                = 1                        /* EP 3.8 */\n  keyword.PLISAXD                = 1                        /* EP 4.1 */\n  keyword.PLISRTA                = 1\n  keyword.PLISRTB                = 1\n  keyword.PLISRTC                = 1\n  keyword.PLISRTD                = 1\n  keyword.PLISTK                 = 1                        /* EP 4.5 */\n  keyword.PLISTKE                = 1                        /* EP 4.5 */\n  keyword.PLISTKF                = 1                        /* EP 4.5 */\n  keyword.PLITDLI                = 1\n  keyword.PLITRAN11              = 1                        /* EP 3.9 */\n  keyword.PLITRAN12              = 1                        /* EP 3.9 */\n  keyword.PLITRAN21              = 1                        /* EP 3.9 */\n  keyword.PLITRAN22              = 1                        /* EP 3.9 */\n  keyword.POINTER                = 1\n  keyword.POINTERADD             = 1\n  keyword.POINTERDIFF            = 1\n  keyword.POINTERSUBTRACT        = 1\n  keyword.POINTERVALUE           = 1\n  keyword.POLY                   = 1\n  keyword.POPCNT                 = 1                        /* EP 4.2 */\n  keyword.POS                    = 1\n  keyword.POSITION               = 1\n  keyword.PREC                   = 1\n  keyword.PRECISION              = 1\n  keyword.PRED                   = 1\n  keyword.PRESENT                = 1\n  keyword.PRINT                  = 1\n  keyword.PRIORITY               = 1\n  keyword.PROC                   = 1\n  keyword.PROCEDURE              = 1\n  keyword.PROCEDURENAME          = 1\n  keyword.PROCNAME               = 1\n  keyword.PROD                   = 1\n  keyword.PTR                    = 1\n  keyword.PTRADD                 = 1\n  keyword.PTRDIFF                = 1\n  keyword.PTRSUBTRACT            = 1\n  keyword.PTRVALUE               = 1\n  keyword.PUT                    = 1\n  keyword.PUTENV                 = 1\n  keyword.QUOTE                  = 1\n  keyword.RADIX                  = 1\n  keyword.RAISE2                 = 1\n  keyword.RANDOM                 = 1\n  keyword.RANGE                  = 1\n  keyword.RANK                   = 1\n  keyword.READ                   = 1\n  keyword.REAL                   = 1\n  keyword.RECORD                 = 1\n  keyword.RECSIZE                = 1\n  keyword.RECURSIVE              = 1\n  keyword.RED                    = 1\n  keyword.REDUCIBLE              = 1\n  keyword.REENTRANT              = 1\n  keyword.REFER                  = 1\n  keyword.REGIONAL               = 1\n  keyword.REG12                  = 1                        /* EP 3.8 */\n  keyword.REINIT                 = 1                        /* EP 4.5 */\n  keyword.RELEASE                = 1\n  keyword.REM                    = 1\n  keyword.REORDER                = 1\n  keyword.REPATTERN              = 1\n  keyword.REPEAT                 = 1\n  keyword.REPLACEBY2             = 1                        /* EP 3.4 */\n  keyword.REPLY                  = 1\n  keyword.REREAD                 = 1\n  keyword.RESCAN                 = 1\n  keyword.RESERVED               = 1\n  keyword.RESERVES               = 1\n  keyword.RESIGNAL               = 1\n  keyword.RESPEC                 = 1\n  keyword.RETCODE                = 1\n  keyword.RETURN                 = 1\n  keyword.RETURNS                = 1\n  keyword.REUSE                  = 1\n  keyword.REVERSE                = 1\n  keyword.REVERT                 = 1\n  keyword.REWRITE                = 1\n  keyword.RIGHT                  = 1\n  keyword.ROUND                  = 1\n  keyword.ROUNDDEC               = 1                        /* EP 3.9 */\n  keyword.SAMEKEY                = 1\n  keyword.SCALARVARYING          = 1\n  keyword.SCALE                  = 1\n  keyword.SEARCH                 = 1\n  keyword.SEARCHR                = 1\n  keyword.SECS                   = 1\n  keyword.SECSTODATE             = 1\n  keyword.SECSTODAYS             = 1\n  keyword.SELECT                 = 1\n  keyword.SEQL                   = 1\n  keyword.SEQUENTIAL             = 1\n  keyword.SERIALIZE4             = 1\n  keyword.SET                    = 1\n  keyword.SIGN                   = 1\n  keyword.SIGNAL                 = 1\n  keyword.SIGNED                 = 1\n  keyword.SIN                    = 1\n  keyword.SIND                   = 1\n  keyword.SINF                   = 1\n  keyword.SINH                   = 1\n  keyword.SIS                    = 1\n  keyword.SIZE                   = 1\n  keyword.SKIP                   = 1\n  keyword.SMFTOJULIAN            = 1                        /* EP 4.5 */\n  keyword.SNAP                   = 1\n  keyword.SOURCEFILE             = 1\n  keyword.SOURCELINE             = 1\n  keyword.SQRT                   = 1\n  keyword.SQRTF                  = 1\n  keyword.STACKADDR              = 1                        /* EP 3.7 */\n  keyword.STATEMENT              = 1\n  keyword.STATIC                 = 1\n  keyword.STATUS                 = 1\n  keyword.STG                    = 1\n  keyword.STMT                   = 1\n  keyword.STOP                   = 1\n  keyword.STORAGE                = 1\n  keyword.STREAM                 = 1\n  keyword.STRG                   = 1\n  keyword.STRING                 = 1\n  keyword.STRINGRANGE            = 1\n  keyword.STRINGSIZE             = 1\n  keyword.STRUCTURE              = 1\n  keyword.STRZ                   = 1\n  keyword.SUBRG                  = 1\n  keyword.SUBSCRIPTRANGE         = 1\n  keyword.SUBSTR                 = 1\n  keyword.SUBTRACT               = 1\n  keyword.SUCC                   = 1\n  keyword.SUM                    = 1\n  keyword.SUPPRESS               = 1                        /* EP 3.8 */\n  keyword.SUPPRESS               = 1                        /* EP 5.1 */\n  keyword.SYSDIMSIZE             = 1                        /* EP 4.5 */\n  keyword.SYSIN                  = 1\n  keyword.SYSNULL                = 1\n  keyword.SYSOFFSETSIZE          = 1                        /* EP 4.5 */\n  keyword.SYSPARM                = 1\n  keyword.SYSPOINTERSIZE         = 1                        /* EP 4.5 */\n  keyword.SYSPRINT               = 1\n  keyword.SYSTEM                 = 1\n  keyword.SYSVERSION             = 1\n  keyword.TALLY                  = 1\n  keyword.TAN                    = 1\n  keyword.TAND                   = 1\n  keyword.TANF                   = 1\n  keyword.TANH                   = 1\n  keyword.TASK                   = 1\n  keyword.THEN                   = 1\n  keyword.THREAD                 = 1\n  keyword.THREADID               = 1\n  keyword.TIME                   = 1\n  keyword.TIMESTAMP              = 1                        /* EP 5.1 */\n  keyword.TINY                   = 1\n  keyword.TITLE                  = 1\n  keyword.TO                     = 1\n  keyword.TOTAL                  = 1\n  keyword.TPK                    = 1\n  keyword.TPM                    = 1\n  keyword.TRANSIENT              = 1\n  keyword.TRANSLATE              = 1\n  keyword.TRANSMIT               = 1\n  keyword.TRIM                   = 1\n  keyword.TRKOFL                 = 1\n  keyword.TRUNC                  = 1\n  keyword.TYPE                   = 1\n  keyword.UFL                    = 1\n  keyword.ULENGTH                = 1                        /* EP 3.8 */\n  keyword.ULENGTH16              = 1                        /* EP 3.8 */\n  keyword.ULENGTH8               = 1                        /* EP 3.8 */\n  keyword.UNAL                   = 1\n  keyword.UNALIGNED              = 1\n  keyword.UNALLOCATED            = 1\n  keyword.UNBUF                  = 1\n  keyword.UNBUFFERED             = 1\n  keyword.UNDEFINEDFILE          = 1\n  keyword.UNDERFLOW              = 1\n  keyword.UNDF                   = 1\n  keyword.UNLOCK                 = 1\n  keyword.UNSIGNED               = 1\n  keyword.UNSPEC                 = 1\n  keyword.UNTIL                  = 1\n  keyword.UPDATE                 = 1\n  keyword.UPOS                   = 1                        /* EP 3.8 */\n  keyword.UPPERCASE              = 1\n  keyword.UPTHRU                 = 1\n  keyword.USUBSTR                = 1                        /* EP 3.8 */\n  keyword.USUPPLEMENTARY         = 1                        /* EP 4.3 */\n  keyword.USURROGATE             = 1                        /* EP 3.9 */\n  keyword.UTCDATETIME            = 1                        /* EP 5.1 */\n  keyword.UTCSECS                = 1                        /* EP 5.1 */\n  keyword.UTF8                   = 1                        /* EP 4.3 */\n  keyword.UTF8STG                = 1                        /* EP 5.1 */\n  keyword.UTF8TOCHAR             = 1                        /* EP 4.3 */\n  keyword.UTF8TOWCHAR            = 1                        /* EP 4.3 */\n  keyword.UUID                   = 1                        /* EP 5.1 */\n  keyword.UVALID                 = 1                        /* EP 3.8 */\n  keyword.UWIDTH                 = 1                        /* EP 3.8 */\n  keyword.VALID                  = 1\n  keyword.VALIDDATE              = 1\n  keyword.VALUE                  = 1\n  keyword.VAR                    = 1\n  keyword.VARGLIST               = 1\n  keyword.VARGSIZE               = 1\n  keyword.VARIABLE               = 1\n  keyword.VARYING                = 1\n  keyword.VARYINGZ               = 1\n  keyword.VARYING4               = 1                        /* EP 4.5 */\n  keyword.VARZ                   = 1\n  keyword.VB                     = 1\n  keyword.VBS                    = 1\n  keyword.VERIFY                 = 1\n  keyword.VERIFYR                = 1\n  keyword.VS                     = 1\n  keyword.VSAM                   = 1\n  keyword.WAIT                   = 1\n  keyword.WCHAR                  = 1\n  keyword.WCHARVAL               = 1\n  keyword.WEEKDAY                = 1\n  keyword.WHEN                   = 1\n  keyword.WHIGH                  = 1\n  keyword.WHILE                  = 1\n  keyword.WHITESPACECOLLAPSE     = 1                        /* EP 4.4 */\n  keyword.WHITESPACEREPLACE      = 1                        /* EP 4.4 */\n  keyword.WIDECHAR               = 1\n  keyword.WIDEPIC                = 1                        /* EP 4.4 */\n  keyword.WLOW                   = 1\n  keyword.WRITE                  = 1\n  keyword.XMLCHAR                = 1                        /* EP 3.3 */\n  keyword.XMLCLEAN               = 1                        /* EP 4.4 */\n  keyword.XMLCONTENT             = 1                        /* EP 5.1 */\n  keyword.XPROCEDURE             = 1                        /* EP 4.5 */\n  keyword.Y4DATE                 = 1\n  keyword.Y4JULIAN               = 1\n  keyword.Y4YEAR                 = 1\n  keyword.ZDIV                   = 1\n  keyword.ZERODIVIDE             = 1\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EHIREXX": {"ttr": 3335, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07\"\\x0f\\x01\\x162?\\x00\\x00\\x03\\xf4\\x00\\x00\\x00\\x00\\xc3\\xd3\\xd6\\xc7\\xc7\\xc9\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-08-08T00:00:00", "modifydate": "2016-11-18T00:00:00", "lines": 1012, "newlines": 0, "modlines": 0, "user": "CLOGGIE"}, "text": "/* REXX exec/edit macro to convert REXX to 'HILITE'd HTML             */\n/*** trace ?r ***************************************************** \\| *\n*               (C) Copyright Robert AH Prins, 2007-2016               *\n*                       (C) Stefan B, 2007-2007                        *\n************************************************************************\n*  ------------------------------------------------------------------  *\n* | Date       | By   | Remarks                                      | *\n* |------------+------+----------------------------------------------| *\n* |            |      |                                              | *\n* |------------+------+----------------------------------------------| *\n* | 2016-11-24 | RAHP | Add \"ehixmit\" interface                      | *\n* |------------+------+----------------------------------------------| *\n* | 2016-11-18 | RAHP | Multiple updates/simplifications             | *\n* |------------+------+----------------------------------------------| *\n* | 2012-06-25 | RAHP | Add IP address                               | *\n* |------------+------+----------------------------------------------| *\n* | 2012-06-08 | RAHP | Add &cent; HTML entity                       | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-27 | RAHP | Use pop-up on ISPF to display progress       | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-02 | RAHP | Add selection for short CSS 'em' colors      | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-22 | RAHP | Update comment                               | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-16 | RAHP | Main parsing loop needs to end on exactly    | *\n* |            |      | '==' equal, as '0d0a'x equals '' on Regina   | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-01 | RAHP | Add font selection for generated HTML        | *\n* |------------+------+----------------------------------------------| *\n* | 2009-02-09 | RAHP | RACF problem with 'html' extension @ NVSM    | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-24 | RAHP | Further tweaks                               | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-18 | RAHP | - add GPL V3 License                         | *\n* |            |      | - use EHISUPP 'get_options' to retrieve some | *\n* |            |      |   processing options                         | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-06 | RAHP | Cater for PC environment                     | *\n* |------------+------+----------------------------------------------| *\n* | 2007-08-30 | RAHP | Further fine-tuning (HTLM 4.01 Strict)       | *\n* |------------+------+----------------------------------------------| *\n* | 2007-08-23 | RAHP | Factor out common 'EHIxxxx' routines         | *\n* |------------+------+----------------------------------------------| *\n* | 2007-08-20 | RAHP | - remove more bugs (rc/sigl/source)          | *\n* |            |      | - add (nested) parentheses hilighting        | *\n* |------------+------+----------------------------------------------| *\n* | 2007-08-16 | RAHP | Reformat to Prins' standards, remove nested  | *\n* |            |      | comment bug                                  | *\n* |------------+------+----------------------------------------------| *\n* | 2007-08-08 | SB   | Initial version                              | *\n* |------------+------+----------------------------------------------| *\n************************************************************************\n* EHIREXX is a REXX exec/edit macro that analyses REXX code and builds *\n* a HTML file with the color attributes as used by ISPF Edit.          *\n*                                                                      *\n* This file can be transferred to the PC by using ISPF Workstation     *\n* Agent. In addition the exec might invoke the Windows application     *\n* associated with file extension \".html\"                               *\n*                                                                      *\n* The exec runs as ISPF edit macro or might be used as line command    *\n* on the extended member list of ISPF List Utility (usually menu       *\n* option 3.4).                                                         *\n*                                                                      *\n* In addition the exec can be invoked on the command line. In this     *\n* case the dataset name has to be supplied as invocation parameter.    *\n*                                                                      *\n* Original author: Stefan B. (See <http://www.schlabb.de>), based on   *\n*                  an idea of W. Sch\u00e4fer, rubin Software, see          *\n*                  <http://www.rubin-software.de/index.php>            *\n*                                                                      *\n* See <http://mvshelp.net/vbforums/showthread.php?t=24126> for the     *\n* original question on how to parse nested comments in REXX. The parse *\n* code is an adaptation of Mark Baxter's reply.                        *\n*                                                                      *\n* t_rex will contain the environment. It can be:                       *\n*                                                                      *\n* - TSO     - TSO/ISPF                                                 *\n* - MVS     - z/OS (PGM=IRXJCL)                                        *\n* - SYSTEM  - Regina                                                   *\n* - COMMAND - PC DOS 7/2000                                            *\n* - CMD     - Object REXX (OS/2, Windoze)                              *\n************************************************************************\n* Send questions, suggestions and/or bug reports to:                   *\n*                                                                      *\n* robert@prino.org / robert.ah.prins@gmail.com                         *\n*                                                                      *\n* Robert AH Prins                                                      *\n* Taboralaan 46                                                        *\n* 8400 Oostende                                                        *\n* Belgium                                                              *\n************************************************************************\n* This program is free software: you can redistribute it and/or        *\n* modify it under the terms of the GNU General Public License as       *\n* published by the Free Software Foundation, either version 3 of       *\n* the License, or (at your option) any later version.                  *\n*                                                                      *\n* This program is distributed in the hope that it will be useful,      *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of       *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *\n* GNU General Public License for more details.                         *\n*                                                                      *\n* You should have received a copy of the GNU General Public License    *\n* along with this program. If not, see <http://www.gnu.org/licenses/>  *\n***********************************************************************/\nparse source source\nparse value source with . . moi . . . cmdenv aspace .\n\nt_rex = address()\n\nif t_rex  = 'TSO' &,\n   aspace = 'ISPF' then\n  do\n    \"ispexec vget (zenvir)\"\n    envir = strip(substr(zenvir, 17, 8))\n  end\nelse\n  envir = 'OTHER'\n\nparse arg idsn\n\ncall get_source                /* Read the REXX program source        */\ncall init_vars                 /* Initialize the global variables     */\ncall build_html                /* Now go on and build the HTML output */\n\ncall ehisupp 'generate_output,'sep','htmlout  || sep ||,\n                                     odsn     || sep ||,\n                                     title    || sep ||,\n                                     header   || sep ||,\n                                     footer   || sep ||,\n                                     htmlfont\n\n\"ispexec vget (ehixmit) shared\"\n\nif rc = 0 then\n  do\n    \"ispexec verase (rexxparm) shared\"\n    \"isredit can\"\n    exit\n  end\n\nif t_rex  = 'TSO' &,\n   aspace = 'ISPF' then\n  if envir \\= 'BATCH' then\n    do\n      /*****************************************************************\n      * Show the resulting dataset, if desired                         *\n      *****************************************************************/\n      if view_html = 'YES' then\n        \"ispexec view dataset(\"odsn\")\"\n\n      /*****************************************************************\n      * Transfer the html file to the PC                               *\n      *****************************************************************/\n      if xfer_wsa = 'YES' then\n        call ehisupp 'xfer_and_show_html,'sep','dir_pc   || sep ||,\n                                                htmlfile || sep ||,\n                                                odsn     || sep ||,\n                                                ipaddr   || sep ||,\n                                                start_browser\n    end\n  else\n    do\n      if macmode then\n        \"isredit end\"\n    end\nexit\n\n/***********************************************************************\n* TRANSLATE_ENTITIES                                                   *\n*                                                                      *\n* This procedure translates special characters to HTML entities        *\n***********************************************************************/\ntranslate_entities: procedure expose special_chars special_html\n  parse arg in\n\n  out = ''\n\n  if translate(in, ' ', special_chars) = in then\n    out = in\n  else\n    do while in \\== ''\n      c = left(in, 1)\n      k = wordpos(c, special_chars)\n\n      if k \\= 0 then\n        out = out || word(special_html, k)\n      else\n        out = out || c\n\n      in = substr(in, 2)\n    end\nreturn out\n\n/***********************************************************************\n* GET_SOURCE:                                                          *\n*                                                                      *\n* Read the REXX source                                                 *\n***********************************************************************/\nget_source:\n  macmode = 0\n  rxdata. = ''\n  rxdata  = ''\n  pgm     = ''\n\n  select\n    when t_rex = 'TSO' then call get_source_tso\n    when t_rex = 'MVS' then call get_source_mvs\n    otherwise               call get_source_pc\n  end\nreturn\n\n/***********************************************************************\n* GET_SOURCE_TSO:                                                      *\n*                                                                      *\n* Read the text when running under TSO                                 *\n***********************************************************************/\nget_source_tso:\n  if aspace = 'ISPF' then\n    \"isredit macro (parm) NOPROCESS\"\n  else\n    rc = 4\n\n  /*********************************************************************\n  * Running as edit macro                                              *\n  *********************************************************************/\n  if rc = 0 then\n    do\n      macmode = 1\n\n      if parm = '?' then\n        do\n          \"isredit ehihelp\" moi\n          exit\n        end\n\n      \"isredit process range HI\"\n      if rc <= 4 then\n        do\n          \"isredit (ZF) = linenum .zfrange\"\n          \"isredit (ZL) = linenum .zlrange\"\n        end\n      else\n        do\n          \"isredit ehihelp\" moi\n          exit\n        end\n\n      \"isredit (DSN) = dataset\"\n      \"isredit (MEM) = member\"\n\n      if mem = '' then\n        idsn = \"'\" || dsn || \"'\"\n      else\n        do\n          pgm  = mem\n          idsn = \"'\" || dsn || '(' || mem || \")'\"\n        end\n\n      /*****************************************************************\n      * Concatenate the full source, but indicate original line breaks *\n      *****************************************************************/\n      i = 0\n      do j = +zf to +zl\n        \"isredit (DATALINE) = line\" j\n\n        i        = i + 1\n        rxdata.i = strip(dataline, 'T') || ' ' || '0d0a'x\n      end\n\n      rxdata.0 = i\n      olines   = rxdata.0\n    end\n  /*********************************************************************\n  * Running as TSO command                                             *\n  *********************************************************************/\n  else\n    do\n      if idsn = '' then\n        do\n          msg =     left('Error - No dataset name passed', 75)\n          msg = msg left(moi 'can be used as an edit macro or',\n                         'as a line command on the ISPF', 75)\n          msg = msg left('dataset list utility. In both cases the',\n                         'dataset name will be automatically', 75)\n          msg = msg left('determined.', 75)\n          msg = msg left('If you call' moi 'on the command line you',\n                         'have to pass the name of the', 75)\n          msg = msg left('dataset to be processed, e.g.', 75)\n          msg = msg left('Command ===>' moi,\n                         '''my.rexx.dataset(test)''', 75)\n\n          zedsmsg = ''\n          zedlmsg = msg\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' &,\n             envir \\= 'BATCH' then\n            \"ispexec setmsg msg(ISRZ001)\"\n          else\n            do while msg \\= ''\n              say left(msg, 75)\n              msg = substr(msg, 76)\n            end\n\n          exit 8\n        end\n\n      /*****************************************************************\n      * Force single quotes around dataset name and check if it's OK   *\n      *****************************************************************/\n      idsn = \"'\" || strip(idsn,, '''') || \"'\"\n\n      if sysdsn(idsn) \\= 'OK' then\n        do\n          say 'Error - Dataset' idsn 'could not be found'\n          exit 8\n        end\n\n      /*****************************************************************\n      * Extract member name, if present                                *\n      *****************************************************************/\n      parse var idsn . '(' mem ')'\n\n      if mem \\= '' then\n        pgm = mem\n\n      /*****************************************************************\n      * Read the code                                                  *\n      *****************************************************************/\n      dynlib = 'dyn'random(99999)\n\n      \"alloc f(\"dynlib\") da(\"idsn\") shr reu\"\n      if rc > 0 then\n        do\n          say 'Error - Dataset' idsn 'could not be allocated - rc' rc\n          exit 8\n        end\n\n      \"execio * diskr\" dynlib \"(finis)\"\n      if rc > 0 then\n        do\n          say 'Error - Dataset' idsn 'could not be read - rc' rc\n          exit 8\n        end\n\n      \"free f(\"dynlib\")\"\n\n      /*****************************************************************\n      * Merge full source, indicating linebreaks                       *\n      *****************************************************************/\n      olines = queued()\n\n      i = 0\n      do queued()\n        parse pull dataline\n\n        if length(dataline) = 80 &,\n           datatype(right(dataline, 8)) = 'NUM' then\n          dataline = substr(dataline, 1, 72)\n\n        i        = i + 1\n        rxdata.i = strip(dataline, 'T') || ' ' || '0d0a'x\n      end\n    end\nreturn\n\n/***********************************************************************\n* GET_SOURCE_PC:                                                       *\n*                                                                      *\n* Read the text when running on the PC                                 *\n***********************************************************************/\nget_source_pc:\n  if idsn = '' then\n    do\n      say 'Syntax:' moi 'file.rex'\n      exit 8\n    end\n\n  do i = 1 by 1 while lines(idsn)\n    dataline = linein(idsn)\n\n    if length(dataline) = 80 &,\n       datatype(right(dataline, 8)) = 'NUM' then\n      dataline = substr(dataline, 1, 72)\n\n    rxdata.i = strip(dataline, 'T') || ' ' || '0d0a'x\n  end\n\n  rxdata.0 = i - 1\n  olines   = rxdata.0\nreturn\n\n/***********************************************************************\n* INIT_VARS:                                                           *\n*                                                                      *\n* This procedure initialises the global variables                      *\n***********************************************************************/\ninit_vars:\n  /*********************************************************************\n  * Parameter separator for EHISUPP exec                               *\n  *********************************************************************/\n  sep = x2c(00)d2c(random(2**16))x2c(ff)d2c(random(2**16))x2c(00)\n  sep = translate(sep, x2c(bababababa), ' <>&\"')\n\n  /*********************************************************************\n  * Get processing options                                             *\n  *********************************************************************/\n  opt = ehisupp('get_options,'sep','moi)\n  parse value opt with view_html     (sep),\n                       xfer_wsa      (sep),\n                       start_browser (sep),\n                       ispf_edit     (sep),\n                       show_progress (sep),\n                       dir_pc        (sep),\n                       htmlfont      (sep),\n                       ipaddr        (sep) .\n\n  /*********************************************************************\n  * Temporary output dataset                                           *\n  *********************************************************************/\n  if mem \\= '' then\n    odsn = \"'\" || userid() || '.' || mem || \".exec.html'\"\n  else\n    odsn = \"'\" || userid() || '.' || moi || \".exec.html'\"\n\n  /*********************************************************************\n  * Text strings for title, header and footer                          *\n  *********************************************************************/\n  title  = 'REXX exec:' strip(idsn,, '''')\n  header = 'REXX exec:' strip(idsn,, '''')\n  now    = date('S')\n  now    = left(now, 4)'-'substr(now, 5, 2)'-'right(now, 2)'T'time()\n  footer = 'Generated on' now 'by' userid() 'with' moi\n\n  /*********************************************************************\n  * Name of generated html file on PC                                  *\n  *********************************************************************/\n  if pgm \\= '' then\n    htmlfile = pgm || '.html'\n  else\n    htmlfile = 'rexxpgm.html'\n\n  /*********************************************************************\n  * HTML colors                                                        *\n  *                                                                    *\n  * - lime(green) - default                                            *\n  * - red         - keywords                                           *\n  * - white       - quoted strings                                     *\n  * - aqua(turq)  - comments                                           *\n  * - yellow      - special characters                                 *\n  *********************************************************************/\n  col_dft        = '<em class=\"l\">'                        /* lime    */\n  col_key        = '<em class=\"r\">'                        /* red     */\n  col_str        = '<em class=\"w\">'                        /* white   */\n  col_com        = '<em class=\"t\">'                        /* turq    */\n  col_spc        = '<em class=\"y\">'                        /* yellow  */\n\n  /*********************************************************************\n  * Colors for nested parentheses                                      *\n  *********************************************************************/\n  col_par.0      = '<em class=\"f\">'                        /* fuchsia */\n  col_par.1      = '<em class=\"y\">'                        /* yellow  */\n  col_par.2      = '<em class=\"w\">'                        /* white   */\n  col_par.3      = '<em class=\"r\">'                        /* red     */\n  col_par.4      = '<em class=\"t\">'                        /* turq    */\n\n  /*********************************************************************\n  * HTML special characters and their defined entities                 *\n  *********************************************************************/\n  special_chars  = '\u00e4 \u00f6 \u00fc \u00c4 \u00d6 \u00dc \u00df < > & \" \u00a2'\n  special_html   = '&auml; &ouml; &uuml; &Auml; &Ouml; &Uuml; &szlig;',\n                   '&lt; &gt; &amp; &quot; &cent;'\n\n  /*********************************************************************\n  * Characters to be highlighted                                       *\n  *********************************************************************/\n  special_hilite = '+-*/=<>&\u00ac|:%\\'\n\n  /*********************************************************************\n  * Characters separating words                                        *\n  *********************************************************************/\n  separator      = \" (=*-+/\u00ac%)&|<>'\" || '\"'\nreturn\n\n/***********************************************************************\n* BUILD_HTML:                                                          *\n*                                                                      *\n* This procedure builds the HTML output                                *\n***********************************************************************/\nbuild_html:\n  /*********************************************************************\n  * Load the list of REXX keywords, builtins, etc                      *\n  *********************************************************************/\n  call build_list_of_keywords\n\n  /*********************************************************************\n  * Switches                                                           *\n  *********************************************************************/\n  kwbegin  = 1                  /* Do we expect a new keyword ?       */\n\n  in_com   = 0                  /* Inside a comment                   */\n  in_apost = 0                  /* Inside a '(apost) delimited string */\n  in_quote = 0                  /* Inside a \"(quote) delimited string */\n  level    = 0                  /* Nested comment levels              */\n  paren    = 1                  /* Nested parentheses level           */\n\n  /*********************************************************************\n  * Initialize the html output string                                  *\n  *********************************************************************/\n  if ispf_edit = 'ISPF' then\n    htmlout = x2c(ff)ispf_edit || x2c(ff)right(olines, 6, '0')x2c(ff)\n  else\n    htmlout = ''\n\n  tempout = ''\n\n  /*********************************************************************\n  * Loop over the code                                                 *\n  *********************************************************************/\n  lip = time('E')\n  lip = 1\n\n  r      = 1\n  rxdata = rxdata.r\n\n  do until rxdata == ''\n    /*******************************************************************\n    * Display (optional) progress messages                             *\n    *******************************************************************/\n    if show_progress > 0 then\n      if lip >                  0 &,\n         lip // show_progress = 0 then\n        do\n          progress = 'Elapsed time' right(time('E'), 12),\n                     '- lines processed' right(lip, 6)\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' then\n            rc = ehisupp('monitor,'moi 'Progress,'progress)\n          else\n            say progress\n\n          lip = -lip\n        end\n\n    c1 = left(rxdata, 1)\n    c2 = left(rxdata, 2)\n\n    /*******************************************************************\n    * Is it a special character?                                       *\n    *******************************************************************/\n    sc = wordpos(c1, special_chars)\n\n    /*******************************************************************\n    * Is it a special hilite character?                                *\n    *******************************************************************/\n    sh = pos(c1, special_hilite)\n\n    kw = ''                                     /* Initialize keyword */\n\n    /*******************************************************************\n    * If we are at the beginning of a keyword ...                      *\n    *******************************************************************/\n    if kwbegin            = 1 &,\n       pos(c1, separator) = 0 then\n      do\n        parse upper var rxdata kw\n\n        /***************************************************************\n        * ... we search the next separator ...                         *\n        ***************************************************************/\n        sep_pos = verify(kw, separator, 'M')\n\n        /***************************************************************\n        * ... and save the keyword if separator is found               *\n        ***************************************************************/\n        if sep_pos > 0 then\n          kw = left(kw, sep_pos - 1)\n\n        kwbegin = 0\n      end\n    /*******************************************************************\n    * If we are on a separator we keep in mind that it's the beginning *\n    * of a new keyword                                                 *\n    *******************************************************************/\n    if pos(c1, separator) > 0 then\n      kwbegin = 1\n\n    /*******************************************************************\n    * Determine the HTML attributes for the data                       *\n    *******************************************************************/\n    select\n      /*****************************************************************\n      * Spaces are kept unchanged - process multiple spaces in one go| *\n      *****************************************************************/\n      when c1 == ' ' then\n        do\n          n       = verify(rxdata, ' ')\n          tempout = tempout || left(rxdata, n - 1)\n          rxdata  = substr(rxdata, n)\n        end\n\n      /*****************************************************************\n      * Line break                                                     *\n      *****************************************************************/\n      when c2 = '0d0a'x then\n        do\n          lip     = abs(lip) + 1\n          tempout = tempout || '<br>'\n          kwbegin = 1\n          rxdata  = substr(rxdata, 3)\n        end\n\n      /*****************************************************************\n      * End of single quoted string                                    *\n      *****************************************************************/\n      when in_apost &,\n           c1 = \"'\" then\n        do\n          in_apost = 0\n\n          tempout  = tempout || \"'</em>\"\n          rxdata   = substr(rxdata, 2)\n        end\n\n      /*****************************************************************\n      * End of double quoted string                                    *\n      *****************************************************************/\n      when in_quote &,\n           c1 = '\"' then\n        do\n          in_quote = 0\n\n          tempout  = tempout || '\"</em>'\n          rxdata   = substr(rxdata, 2)\n        end\n\n      /*****************************************************************\n      * Start of single quoted string                                  *\n      *****************************************************************/\n      when c1 = \"'\"  &,\n           \\in_quote &,\n           \\in_com then\n        do\n          in_apost = 1\n\n          tempout  = tempout || col_str\"'\"\n          rxdata   = substr(rxdata, 2)\n        end\n\n      /*****************************************************************\n      * Start of double quoted string                                  *\n      *****************************************************************/\n      when c1 = '\"'  &,\n           \\in_apost &,\n           \\in_com then\n        do\n          in_quote = 1\n\n          tempout  = tempout || col_str'\"'\n          rxdata   = substr(rxdata, 2)\n        end\n\n      /*****************************************************************\n      * Start of a nested comment                                      *\n      *****************************************************************/\n      when c2 = '/*' &,\n           in_com then\n        do\n          level   = level + 1\n          tempout = tempout || '/*'\n          rxdata  = substr(rxdata, 3)\n        end\n\n      /*****************************************************************\n      * Start of a comment                                             *\n      *****************************************************************/\n      when c2 = '/*' &,\n           \\in_apost &,\n           \\in_quote then\n        do\n          in_com  = 1\n\n          tempout = tempout || col_com'/*'\n          rxdata  = substr(rxdata, 3)\n        end\n\n      /*****************************************************************\n      * End of a comment                                               *\n      *****************************************************************/\n      when c2    = '*/' &,\n           level = 0    &,\n           \\in_apost    &,\n           \\in_quote then\n        do\n          in_com  = 0\n\n          tempout = tempout || '*/</em>'\n          rxdata  = substr(rxdata, 3)\n        end\n\n      /*****************************************************************\n      * End of a nested comment                                        *\n      *****************************************************************/\n      when c2 = '*/' &,\n           \\in_apost &,\n           \\in_quote then\n        do\n          level   = level - 1\n          tempout = tempout || '*/'\n          rxdata  = substr(rxdata, 3)\n        end\n\n      /*****************************************************************\n      * A special character has to be translated and highlighted       *\n      *****************************************************************/\n      when sc > 0    &,\n           sh > 0    &,\n           \\in_com   &,\n           \\in_apost &,\n           \\in_quote then\n        do\n          tempout = tempout || col_spc || word(special_html, sc)'</em>'\n          rxdata  = substr(rxdata, 2)\n        end\n\n      /*****************************************************************\n      * A special character has to be translated                       *\n      *****************************************************************/\n      when sc > 0 then\n        do\n          tempout = tempout || word(special_html, sc)\n          rxdata  = substr(rxdata, 2)\n        end\n\n      /*****************************************************************\n      * A special character has to be highlighted                      *\n      *****************************************************************/\n      when sh > 0    &,\n           \\in_com   &,\n           \\in_apost &,\n           \\in_quote then\n        do\n          tempout = tempout || col_spc || c1'</em>'\n          rxdata  = substr(rxdata, 2)\n        end\n\n      /*****************************************************************\n      * It's a keyword                                                 *\n      *****************************************************************/\n      when keyword.kw = 1 &,\n           \\in_com        &,\n           \\in_apost      &,\n           \\in_quote then\n        do\n          kw      = left(rxdata, length(kw))\n          tempout = tempout || col_key || kw'</em>'\n          rxdata  = substr(rxdata, length(kw) + 1)\n        end\n\n      /*****************************************************************\n      * It's a left parenthesis                                        *\n      *****************************************************************/\n      when c1 = '('  &,\n           \\in_com   &,\n           \\in_apost &,\n           \\in_quote then\n        do\n          paren   = (paren + 1) // 5\n          tempout = tempout || col_par.paren'(</em>'\n          rxdata  = substr(rxdata, 2)\n        end\n\n      /*****************************************************************\n      * It's a right parenthesis                                       *\n      *****************************************************************/\n      when c1 = ')'  &,\n           \\in_com   &,\n           \\in_apost &,\n           \\in_quote then\n        do\n          tempout = tempout || col_par.paren')</em>'\n          paren   = (paren + 4) // 5\n          rxdata  = substr(rxdata, 2)\n        end\n\n      /*****************************************************************\n      * Anything else                                                  *\n      *****************************************************************/\n      otherwise\n        do\n          tempout = tempout || c1\n          rxdata  = substr(rxdata, 2)\n        end\n    end\n\n    /*******************************************************************\n    * Get more data                                                    *\n    *******************************************************************/\n    if length(rxdata) < 80 then\n      do\n        r       = r + 1\n        rxdata  = rxdata || rxdata.r\n      end\n\n    /*******************************************************************\n    * Append data to final result                                      *\n    *******************************************************************/\n    if length(tempout) > 512 then\n      do\n        htmlout = htmlout || tempout\n        tempout = ''\n      end\n  end\n\n  htmlout = htmlout || tempout\nreturn\n\n/***********************************************************************\n* BUILD_LIST_OF_KEYWORDS:                                              *\n*                                                                      *\n* This procedure loads the list of REXX keywords                       *\n***********************************************************************/\nbuild_list_of_keywords:\n  keyword. = 0\n\n  /*********************************************************************\n  * These three variables have values|                                 *\n  *********************************************************************/\n  drop rc sigl source\n\n  /*********************************************************************\n  * Keyword Instructions                                               *\n  *********************************************************************/\n  keyword.ADDRESS     = 1\n  keyword.ARG         = 1\n  keyword.BY          = 1\n  keyword.CALL        = 1\n  keyword.DO          = 1\n  keyword.DROP        = 1\n  keyword.ELSE        = 1\n  keyword.END         = 1\n  keyword.ERROR       = 1\n  keyword.EXIT        = 1\n  keyword.EXPOSE      = 1\n  keyword.FOR         = 1\n  keyword.FOREVER     = 1\n  keyword.FAILURE     = 1\n  keyword.HALT        = 1\n  keyword.IF          = 1\n  keyword.INTERPRET   = 1\n  keyword.ITERATE     = 1\n  keyword.LEAVE       = 1\n  keyword.NOP         = 1\n  keyword.NUMERIC     = 1\n  keyword.OFF         = 1\n  keyword.OTHERWISE   = 1\n  keyword.ON          = 1\n  keyword.PARSE       = 1\n  keyword.PROCEDURE   = 1\n  keyword.PULL        = 1\n  keyword.PUSH        = 1\n  keyword.QUEUE       = 1\n  keyword.RC          = 1\n  keyword.RESULT      = 1\n  keyword.RETURN      = 1\n  keyword.SAY         = 1\n  keyword.SCIENTIFIC  = 1\n  keyword.SELECT      = 1\n  keyword.SIGL        = 1\n  keyword.SIGNAL      = 1\n  keyword.SOURCE      = 1\n  keyword.SYNTAX      = 1\n  keyword.THEN        = 1\n  keyword.TO          = 1\n  keyword.TRACE       = 1\n  keyword.UNTIL       = 1\n  keyword.UPPER       = 1\n  keyword.VAR         = 1\n  keyword.VERSION     = 1\n  keyword.WHEN        = 1\n  keyword.WHILE       = 1\n  keyword.WITH        = 1\n\n  /*********************************************************************\n  * Built-in Functions                                                 *\n  *********************************************************************/\n  keyword.ABBREV      = 1\n  keyword.ABS         = 1\n  keyword.ADDRESS     = 1\n  keyword.ARG         = 1\n  keyword.BITAND      = 1\n  keyword.BITOR       = 1\n  keyword.BITXOR      = 1\n  keyword.B2X         = 1\n  keyword.CENTER      = 1\n  keyword.CENTRE      = 1\n  keyword.COMPARE     = 1\n  keyword.CONDITION   = 1\n  keyword.COPIES      = 1\n  keyword.C2D         = 1\n  keyword.C2X         = 1\n  keyword.DATATYPE    = 1\n  keyword.DATE        = 1\n  keyword.DELSTR      = 1\n  keyword.DELWORD     = 1\n  keyword.DIGITS      = 1\n  keyword.D2C         = 1\n  keyword.D2X         = 1\n  keyword.ERRORTEXT   = 1\n  keyword.FIND        = 1\n  keyword.FORM        = 1\n  keyword.FORMAT      = 1\n  keyword.FUZZ        = 1\n  keyword.INDEX       = 1\n  keyword.INSERT      = 1\n  keyword.JUSTIFY     = 1\n  keyword.LASTPOS     = 1\n  keyword.LEFT        = 1\n  keyword.LENGTH      = 1\n  keyword.LINESIZE    = 1\n  keyword.MAX         = 1\n  keyword.MIN         = 1\n  keyword.OVERLAY     = 1\n  keyword.POS         = 1\n  keyword.QUEUED      = 1\n  keyword.RANDOM      = 1\n  keyword.REVERSE     = 1\n  keyword.RIGHT       = 1\n  keyword.SIGN        = 1\n  keyword.SOURCELINE  = 1\n  keyword.SPACE       = 1\n  keyword.STRIP       = 1\n  keyword.SUBSTR      = 1\n  keyword.SUBWORD     = 1\n  keyword.SYMBOL      = 1\n  keyword.TIME        = 1\n  keyword.TRACE       = 1\n  keyword.TRANSLATE   = 1\n  keyword.TRUNC       = 1\n  keyword.USERID      = 1\n  keyword.VALUE       = 1\n  keyword.VERIFY      = 1\n  keyword.WORD        = 1\n  keyword.WORDINDEX   = 1\n  keyword.WORDLENGTH  = 1\n  keyword.WORDPOS     = 1\n  keyword.WORDS       = 1\n  keyword.XRANGE      = 1\n  keyword.X2B         = 1\n  keyword.X2C         = 1\n  keyword.X2D         = 1\n\n  /*********************************************************************\n  * TSO/E External Functions                                           *\n  *********************************************************************/\n  keyword.EXTERNALS   = 1\n  keyword.FIND        = 1\n  keyword.GETMSG      = 1\n  keyword.INDEX       = 1\n  keyword.JUSTIFY     = 1\n  keyword.LINESIZE    = 1\n  keyword.LISTDSI     = 1\n  keyword.MSG         = 1\n  keyword.MVSVAR      = 1\n  keyword.OUTTRAP     = 1\n  keyword.PROMPT      = 1\n  keyword.SETLANG     = 1\n  keyword.STORAGE     = 1\n  keyword.SYSCPUS     = 1\n  keyword.SYSDSN      = 1\n  keyword.SYSVAR      = 1\n  keyword.USERID      = 1\n\n  /*********************************************************************\n  * DBCS Functions - only DBCS is HILITE'd on ISPF 5.7.0000            *\n  *********************************************************************/\n  keyword.DBADJUST    = 1\n  keyword.DBBRACKET   = 1\n  keyword.DBCENTER    = 1\n  keyword.DBCJUSTIFY  = 1\n  keyword.DBCS        = 1\n  keyword.DBLEFT      = 1\n  keyword.DBRIGHT     = 1\n  keyword.DBRLEFT     = 1\n  keyword.DBRRIGHT    = 1\n  keyword.DBTODBCS    = 1\n  keyword.DBTOSBCS    = 1\n  keyword.DBUNBRACKET = 1\n  keyword.DBVALIDATE  = 1\n  keyword.DBWIDTH     = 1\n\n  /*********************************************************************\n  * TSO/E REXX Commands - not HILITE'd on ISPF 5.7.0000...             *\n  *********************************************************************/\n  keyword.DELSTACK    = 1\n  keyword.DROPBUF     = 1\n  keyword.EXECIO      = 1\n  keyword.EXECUTIL    = 1\n  keyword.HE          = 1\n  keyword.HI          = 1\n  keyword.HT          = 1\n  keyword.MAKEBUF     = 1\n  keyword.NEWSTACK    = 1\n  keyword.QBUF        = 1\n  keyword.QELEM       = 1\n  keyword.QSTACK      = 1\n  keyword.RT          = 1\n  keyword.SUBCOM      = 1\n  keyword.TE          = 1\n  keyword.TS          = 1\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EHISUPC": {"ttr": 3844, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07$/\\x01\\x162\\x9f\\x00\\x00\\t\\xac\\x00\\x00\\x00\\x00\\xc3\\xd3\\xd6\\xc7\\xc7\\xc9\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-08-30T00:00:00", "modifydate": "2016-11-24T00:00:00", "lines": 2476, "newlines": 0, "modlines": 0, "user": "CLOGGIE"}, "text": "/* REXX exec/edit macro to convert SuperC output to 'HILITE'd HTML    */\n/*** trace ?r ***************************************************** \\| *\n*               (C) Copyright Robert AH Prins, 2007-2016               *\n************************************************************************\n*  ------------------------------------------------------------------  *\n* | Date       | By   | Remarks                                      | *\n* |------------+------+----------------------------------------------| *\n* |            |      |                                              | *\n* |------------+------+----------------------------------------------| *\n* | 2016-11-24 | RAHP | SuperC column format changed                 | *\n* |------------+------+----------------------------------------------| *\n* | 2016-11-18 | RAHP | Multiple updates/simplifications             | *\n* |------------+------+----------------------------------------------| *\n* | 2012-11-26 | RAHP | Remove '$', '#' & '@' in names (ooREXX)      | *\n* |------------+------+----------------------------------------------| *\n* | 2012-06-25 | RAHP | Add IP address                               | *\n* |------------+------+----------------------------------------------| *\n* | 2012-06-04 | RAHP | Cater for non-PDS line compares              | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-30 | RAHP | Add HTML comment for the 'otherwise' lines   | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-27 | RAHP | Use pop-up on ISPF to display progress       | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-08 | RAHP | - correct addition of extraneous blank line  | *\n* |            |      |   to processed Search-For output             | *\n* |            |      | - add note about broken highlighting for     | *\n* |            |      |   Search-For output                          | *\n* |            |      | - add note about improved highlighting for   | *\n* |            |      |   SuperC summary output                      | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-02 | RAHP | Add selection for short CSS 'em' colors      | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-01 | RAHP | - process FILE compare output                | *\n* |            |      | - process BYTE compare output                | *\n* |            |      | - further tweaks to LINE compare processing  | *\n* |------------+------+----------------------------------------------| *\n* | 2009-06-22 | RAHP | Suppress tags around blanks                  | *\n* |------------+------+----------------------------------------------| *\n* | 2009-06-04 | RAHP | Split positional search strings              | *\n* |------------+------+----------------------------------------------| *\n* | 2009-05-20 | RAHP | Clean up HTML entities processing            | *\n* |------------+------+----------------------------------------------| *\n* | 2009-05-18 | RAHP | Add code to process 'WIDE' line compares     | *\n* |------------+------+----------------------------------------------| *\n* | 2009-05-13 | RAHP | Add code to process 'NARROW' line compares   | *\n* |------------+------+----------------------------------------------| *\n* | 2009-05-06 | RAHP | LONG can reuse code of 'Standard'            | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-22 | RAHP | Update comment                               | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-09 | RAHP | Restructure code for SuperC std line compare | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-01 | RAHP | Add font selection for generated HTML        | *\n* |------------+------+----------------------------------------------| *\n* | 2009-03-31 | RAHP | Handle additional SuperC (Line) output       | *\n* |------------+------+----------------------------------------------| *\n* | 2009-02-09 | RAHP | RACF problem with 'html' extension @ NVSM    | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-24 | RAHP | Further tweaks                               | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-18 | RAHP | - add GPL V3 License                         | *\n* |            |      | - use EHISUPP 'get_options' to retrieve some | *\n* |            |      |   processing options                         | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-06 | RAHP | Cater for PC environment                     | *\n* |------------+------+----------------------------------------------| *\n* | 2007-08-30 | RAHP | Initial version - as yet only what I needed| | *\n* |------------+------+----------------------------------------------| *\n************************************************************************\n* EHISUPC is a REXX exec/edit macro that analyses SuperC output and    *\n* builds a HTML file with the color attributes as used by ISPF Edit.   *\n*                                                                      *\n* Notes:                                                               *\n*                                                                      *\n* - the output of Search-For using the XREF option, either alone or    *\n*   combined with the IDPFX option, will not produce any sensible ISPF *\n*   highlighting. This macro does not try to do better|                *\n* - the highlighting of some SuperC summary output is broken in ISPF,  *\n*   this macro tries to correct this.                                  *\n*                                                                      *\n* This file can be transferred to the PC by using ISPF Workstation     *\n* Agent. In addition the exec might invoke the Windows application     *\n* associated with file extension \".html\"                               *\n*                                                                      *\n* The exec runs as ISPF edit macro or might be used as line command    *\n* on the extended member list of ISPF List Utility (usually menu       *\n* option 3.4).                                                         *\n*                                                                      *\n* In addition the exec can be invoked on the command line. In this     *\n* case the dataset name has to be supplied as invocation parameter.    *\n*                                                                      *\n* t_rex will contain the environment. It can be:                       *\n*                                                                      *\n* - TSO     - TSO/ISPF                                                 *\n* - MVS     - z/OS (PGM=IRXJCL)                                        *\n* - SYSTEM  - Regina                                                   *\n* - COMMAND - PC DOS 7/2000                                            *\n* - CMD     - Object REXX (OS/2, Windoze)                              *\n************************************************************************\n* Send questions, suggestions and/or bug reports to:                   *\n*                                                                      *\n* robert@prino.org / robert.ah.prins@gmail.com                         *\n*                                                                      *\n* Robert AH Prins                                                      *\n* Taboralaan 46                                                        *\n* 8400 Oostende                                                        *\n* Belgium                                                              *\n************************************************************************\n* This program is free software: you can redistribute it and/or        *\n* modify it under the terms of the GNU General Public License as       *\n* published by the Free Software Foundation, either version 3 of       *\n* the License, or (at your option) any later version.                  *\n*                                                                      *\n* This program is distributed in the hope that it will be useful,      *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of       *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *\n* GNU General Public License for more details.                         *\n*                                                                      *\n* You should have received a copy of the GNU General Public License    *\n* along with this program. If not, see <http://www.gnu.org/licenses/>  *\n***********************************************************************/\nparse source source\nparse value source with . . moi . . . cmdenv aspace .\n\nsignal on syntax\n\nt_rex = address()\n\nif t_rex  = 'TSO' &,\n   aspace = 'ISPF' then\n  do\n    \"ispexec vget (zenvir)\"\n    envir = strip(substr(zenvir, 17, 8))\n  end\nelse\n  envir = 'OTHER'\n\nparse arg idsn\n\ncall get_source                /* Read the SuperC/Search-For output   */\ncall init_vars                 /* Initialize the global variables     */\ncall build_html                /* Now go on and build the HTML output */\n\ncall ehisupp 'generate_output,'sep','htmlout  || sep ||,\n                                     odsn     || sep ||,\n                                     title    || sep ||,\n                                     header   || sep ||,\n                                     footer   || sep ||,\n                                     htmlfont\n\nif t_rex  = 'TSO' &,\n   aspace = 'ISPF' then\n  if envir \\= 'BATCH' then\n    do\n      /*****************************************************************\n      * Show the resulting dataset, if desired                         *\n      *****************************************************************/\n      if view_html = 'YES' then\n        \"ispexec view dataset(\"odsn\")\"\n\n      /*****************************************************************\n      * Transfer the html file to the PC                               *\n      *****************************************************************/\n      if xfer_wsa = 'YES' then\n        call ehisupp 'xfer_and_show_html,'sep','dir_pc   || sep ||,\n                                                htmlfile || sep ||,\n                                                odsn     || sep ||,\n                                                ipaddr   || sep ||,\n                                                start_browser\n    end\n  else\n    do\n      if macmode then\n        \"isredit end\"\n    end\nexit\n\n/***********************************************************************\n* TRANSLATE_ENTITIES                                                   *\n*                                                                      *\n* This procedure translates special characters to HTML entities        *\n***********************************************************************/\ntranslate_entities: procedure expose special_chars special_html\n  parse arg in\n\n  out = ''\n\n  if translate(in, ' ', special_chars) = in then\n    out = in\n  else\n    do while in \\== ''\n      c = left(in, 1)\n      k = wordpos(c, special_chars)\n\n      if k \\= 0 then\n        out = out || word(special_html, k)\n      else\n        out = out || c\n\n      in = substr(in, 2)\n    end\nreturn out\n\n/***********************************************************************\n* GET_SOURCE:                                                          *\n*                                                                      *\n* Read the SuperC/Search-For output                                    *\n***********************************************************************/\nget_source:\n  macmode = 0\n  rxdata. = ''\n  pgm     = ''\n\n  select\n    when t_rex = 'TSO' then call get_source_tso\n    when t_rex = 'MVS' then call get_source_mvs\n    otherwise               call get_source_pc\n  end\n\n  rx = 1\nreturn\n\n/***********************************************************************\n* GET_SOURCE_TSO:                                                      *\n*                                                                      *\n* Read the text when running under TSO                                 *\n***********************************************************************/\nget_source_tso:\n  if aspace = 'ISPF' then\n    \"isredit macro (parm) NOPROCESS\"\n  else\n    rc = 4\n\n  /*********************************************************************\n  * Running as edit macro                                              *\n  *********************************************************************/\n  if rc = 0 then\n    do\n      macmode = 1\n\n      if parm = '?' then\n        do\n          \"isredit ehihelp\" moi\n          exit\n        end\n\n      \"isredit (ZF)  = linenum .zf\"\n      \"isredit (ZL)  = linenum .zl\"\n\n      \"isredit (DSN) = dataset\"\n      \"isredit (MEM) = member\"\n\n      if mem = '' then\n        idsn = \"'\" || dsn || \"'\"\n      else\n        do\n          pgm  = mem\n          idsn = \"'\" || dsn || '(' || mem || \")'\"\n        end\n\n      /*****************************************************************\n      * Read the (selected) source into a stem                         *\n      *****************************************************************/\n      i = 0\n      do j = +zf to +zl\n        \"isredit (DATALINE) = line\" j\n\n        i        = i + 1\n        rxdata.i = strip(dataline, 'T')\n      end\n\n      rxdata.0 = i\n    end\n  /*********************************************************************\n  * Running as TSO command                                             *\n  *********************************************************************/\n  else\n    do\n      if idsn = '' then\n        do\n          msg =     left('Error - No dataset name passed', 75)\n          msg = msg left(moi 'can be used as an edit macro or',\n                         'as a line command on the ISPF', 75)\n          msg = msg left('dataset list utility. In both cases the',\n                         'dataset name will be automatically', 75)\n          msg = msg left('determined.', 75)\n          msg = msg left('If you call' moi 'on the command line you',\n                         'have to pass the name of the', 75)\n          msg = msg left('dataset to be processed, e.g.', 75)\n          msg = msg left('Command ===>' moi '''my.superc.list''', 75)\n\n          zedsmsg = ''\n          zedlmsg = msg\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' &,\n             envir \\= 'BATCH' then\n            \"ispexec setmsg msg(ISRZ001)\"\n          else\n            do while msg \\= ''\n              say left(msg, 75)\n              msg = substr(msg, 76)\n            end\n\n          exit 8\n        end\n\n      /*****************************************************************\n      * Force single quotes around dataset name and check if it's OK   *\n      *****************************************************************/\n      idsn = \"'\" || strip(idsn,, '''') || \"'\"\n\n      if sysdsn(idsn) \\= 'OK' then\n        do\n          say 'Error - Dataset' idsn 'could not be found'\n          exit 8\n        end\n\n      /*****************************************************************\n      * Extract member name, if present                                *\n      *****************************************************************/\n      parse var idsn . '(' mem ')'\n\n      if mem \\= '' then\n        pgm = mem\n\n      /*****************************************************************\n      * Read the SuperC/Search-For output                              *\n      *****************************************************************/\n      dynlib = 'dyn'random(99999)\n\n      \"alloc f(\"dynlib\") da(\"idsn\") shr reu\"\n      if rc > 0 then\n        do\n          say 'Error - Dataset' idsn 'could not be allocated - rc' rc\n          exit 8\n        end\n\n      \"execio * diskr\" dynlib \"( stem rxdata. finis\"\n      if rc > 0 then\n        do\n          say 'Error - Dataset' idsn 'could not be read - rc' rc\n          exit 8\n        end\n\n      \"free f(\"dynlib\")\"\n    end\n\n  olines = rxdata.0\nreturn\n\n/***********************************************************************\n* GET_SOURCE_PC:                                                       *\n*                                                                      *\n* Read the text when running on the PC                                 *\n***********************************************************************/\nget_source_pc:\n  if idsn = '' then\n    do\n      say 'Syntax:' moi 'superc.file'\n      exit 8\n    end\n\n  do i = 1 by 1 while lines(idsn)\n    rxdata.i = linein(idsn)\n  end\n\n  rxdata.0 = i - 1\n  olines   = rxdata.0\nreturn\n\n/***********************************************************************\n* INIT_VARS:                                                           *\n*                                                                      *\n* This procedure initialises the global variables                      *\n***********************************************************************/\ninit_vars:\n  /*********************************************************************\n  * Parameter separator for EHISUPP exec                               *\n  *********************************************************************/\n  sep = x2c(00)d2c(random(2**16))x2c(ff)d2c(random(2**16))x2c(00)\n  sep = translate(sep, x2c(bababababa), ' <>&\"')\n\n  /*********************************************************************\n  * Get processing options                                             *\n  *********************************************************************/\n  opt = ehisupp('get_options,'sep','moi)\n  parse value opt with view_html     (sep),\n                       xfer_wsa      (sep),\n                       start_browser (sep),\n                       ispf_edit     (sep),\n                       show_progress (sep),\n                       dir_pc        (sep),\n                       htmlfont      (sep),\n                       ipaddr        (sep) .\n\n  /*********************************************************************\n  * Temporary output dataset                                           *\n  *********************************************************************/\n  if mem \\= '' then\n    odsn = \"'\" || userid() || '.' || mem || \".superc.html'\"\n  else\n    odsn = \"'\" || userid() || '.' || moi || \".superc.html'\"\n\n  /*********************************************************************\n  * Text strings for title, header and footer                          *\n  *********************************************************************/\n  title  = 'SuperC output:' strip(idsn,, '''')\n  header = 'SuperC output:' strip(idsn,, '''')\n  now    = date('S')\n  now    = left(now, 4)'-'substr(now, 5, 2)'-'right(now, 2)'T'time()\n  footer = 'Generated on' now 'by' userid() 'with' moi\n\n  /*********************************************************************\n  * Name of generated html file on PC                                  *\n  *********************************************************************/\n  if pgm \\= '' then\n    htmlfile = pgm || '.html'\n  else\n    htmlfile = 'superc.html'\n\n  /*********************************************************************\n  * HTML colors                                                        *\n  *                                                                    *\n  * - lime(green) - usually unchanged data                             *\n  * - red         - change types                                       *\n  * - white       - headings                                           *\n  * - aqua(turq)  - output                                             *\n  * - yellow      - new data                                           *\n  * - blue        - old data                                           *\n  *********************************************************************/\n  col_lim  = '<em class=\"l\">'                              /* lime    */\n  col_red  = '<em class=\"r\">'                              /* red     */\n  col_whi  = '<em class=\"w\">'                              /* white   */\n  col_tur  = '<em class=\"t\">'                              /* turq    */\n  col_yel  = '<em class=\"y\">'                              /* yellow  */\n  col_blu  = '<em class=\"b\">'                              /* blue    */\n\n  col.0    = col_lim                 /* Unchanged line                */\n  col.0i   = col_yel                 /* Inserted line                 */\n  col.0d   = col_blu                 /* Deleted line                  */\n  col.0im  = col_yel                 /* Inserted line                 */\n  col.0dm  = col_blu                 /* Deleted line                  */\n  col.0dr  = col_blu                 /* Deleted bytes                 */\n  col.0rn  = col_yel                 /* Reformat new                  */\n  col.0ro  = col_blu                 /* Reformat old                  */\n  col.0ei  = col_tur                 /* Informational message         */\n  col.0ew  = col_yel                 /* Warning message               */\n  col.0ee  = col_red                 /* Error message                 */\n\n  /*********************************************************************\n  * HTML special characters and their defined entities                 *\n  *********************************************************************/\n  special_chars  = '& < > \"'\n  special_html   = '&amp; &lt; &gt; &quot;'\nreturn\n\n/***********************************************************************\n* BUILD_HTML:                                                          *\n*                                                                      *\n* This procedure builds the HTML output                                *\n***********************************************************************/\nbuild_html:\n  /*********************************************************************\n  * Initialize the html output string                                  *\n  *********************************************************************/\n  if ispf_edit = 'ISPF' then\n    htmlout = x2c(ff)ispf_edit || x2c(ff)right(olines, 6, '0')x2c(ff)\n  else\n    htmlout = ''\n\n  /*********************************************************************\n  * Determine if there are print-control characters                    *\n  *********************************************************************/\n  if left(rxdata.1, 1) = '1' then\n    asa = 1\n  else\n    asa = 0\n\n  call time 'E'\n\n  /*********************************************************************\n  * Determine if this is a Search-For or SuperC listing                *\n  *********************************************************************/\n  if substr(rxdata.2, 44 + asa, 10) = 'SRCH DSN: ' then\n    call srchfor\n  else\n    select\n      when pos('(' || 'LINE COMPARE)',,\n               rxdata.4) \\= 0 then call superc_line\n\n      when pos('(' || 'FILE COMPARE)',,\n               rxdata.4) \\= 0 then call superc_file\n\n      when pos('(' || 'BYTE COMPARE)',,\n               rxdata.4) \\= 0 then call superc_byte\n\n      /*****************************************************************\n      * To be implemented at some stage, maybe...                      *\n      ******************************************************************\n      when pos('(' || 'WORD COMPARE)',,\n               rxdata.4) \\= 0 then call superc_word\n      *****************************************************************/\n      otherwise nop\n    end\nreturn\n\n/***********************************************************************\n* SRCHFOR:                                                             *\n*                                                                      *\n* This procedure processes the output of Seach-For                     *\n***********************************************************************/\nsrchfor:\n  sect. = 0\n\n  /*********************************************************************\n  * Loop over the source                                               *\n  *********************************************************************/\n  do rx = 1 to rxdata.0\n    /*******************************************************************\n    * Display (optional) progress messages                             *\n    *******************************************************************/\n    if show_progress > 0 then\n      if rx // show_progress = 0 then\n        do\n          progress = 'Elapsed time' right(time('E'), 12),\n                     '- lines processed' right(rx, 6)\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' then\n            rc = ehisupp('monitor,'moi 'Progress,'progress)\n          else\n            say progress\n        end\n\n    /*******************************************************************\n    * Fetch line                                                       *\n    *******************************************************************/\n    line = strip(rxdata.rx, 'T')\n\n    if asa then\n      if left(line, 1) = '1' then\n        cc = col_lim'1</em>'\n      else\n        cc = ' '\n    else\n      cc = ''\n\n    line = substr(line, asa + 1)\n    copy = 0\n\n    select\n      when line = '' then\n        this = ''\n\n      when left(line, 10) = '  ISRSUPC ' then\n        this = col_whi || line'</em>'\n\n      when pos(' ' || '--------- STRING(S) FOUND ---', line) = 29 then\n        do\n          mem       = left(line, 9)\n          rem       = substr(line, 10)\n          this      = col_red || mem'</em>' ||,\n                      col_tur || rem'</em>'\n          sect.0fnd = 1\n        end\n\n      when pos(' ' || 'LINE-#  SOURCE SECTION       ', line) \\= 0 then\n        do\n          parse value line with pre 'DSN: ' dsn\n          this      = col_whi || pre || 'DSN: </em>' ||,\n                      col_yel || dsn'</em>'\n        end\n\n      when pos(' M' || 'EMBER   LINE-#  SOURCE LINE ', line) \\= 0 then\n        do\n          this = col_lim || ' MEMBER   </em>'           ||,\n                 col_whi || 'LINE-#  </em>'             ||,\n                 col_lim || 'SOURCE LINE              ' ||,\n                 col_whi || 'SRCH DSN: </em>'           ||,\n                 col_yel || substr(line, 54)'</em>'\n          copy = 1\n        end\n\n      when pos(' M' || 'EMBER  CONC#  LINE-#  SOURCE LINE ',,\n               line) \\= 0 then\n        do\n          this = col_lim || ' MEMBER  CONC#  </em>' ||,\n                 col_whi || 'LINE-#  </em>'         ||,\n                 col_lim || 'SOURCE LINE        '   ||,\n                 col_whi || 'SRCH DSN: </em>'       ||,\n                 col_yel || substr(line, 54)'</em>'\n          copy = 1\n        end\n\n      when pos('L' || 'INES-FOUND  LINES-PROC  MEMBERS-W/LN',,\n               line) \\= 0 then\n        this = col_whi || line'</em>'\n\n      when pos('P' || 'ROCESS OPTIONS USED: ', line) \\= 0 then\n        this = col_whi || 'P' || 'ROCESS OPTIONS USED: </em>' ||,\n               col_tur || substr(line, 23)'</em>'\n\n      when pos('     S' || 'EARCH-FOR SUMMARY SECTION ', line) \\= 0 then\n        do\n          sect.0fnd = 0\n          this      = col_whi'     S' || 'EARCH-FOR SUMMARY SECTION' ||,\n                             '            SRCH DSN: </em>'     ||,\n                      col_yel || substr(line, 54)'</em>'\n        end\n\n      when pos('X' || 'REF STRING-FOUND ', line) \\= 0 then\n        this = substr(line, 1, 29) ||,\n               col_whi || translate_entities(substr(line, 30))'</em>'\n\n      when pos('T' || 'HE FOLLOWING PROCESS STATEMENTS ',,\n               line) \\= 0 then\n        do\n          this = col_whi || line'</em>'\n\n          do rx = rx + 1 to rxdata.0\n            if left(rxdata.rx, 1) \\= ' ' then\n              do\n                rx = rx - 1\n                leave\n              end\n\n            if strip(rxdata.rx) \\= '' then\n              this = this'<br>'col_tur ||,\n                               translate_entities(rxdata.rx)'</em>'\n            else\n              this = this'<br> '\n          end\n        end\n\n      /*****************************************************************\n      * Extraneous options                                             *\n      *****************************************************************/\n      when pos('E' || 'XTRANEOUS OR CONFLICTING PROCESS ',,\n               line) \\= 0 then\n        do\n          this = col_whi || line'</em><br>'\n          rx   = rx + 1\n          this = this || col_red || rxdata.rx'</em>'\n        end\n\n      when pos('T' || 'HE FOLLOWING \"SRH\" FILE CONCATENATED',,\n               line) \\= 0 then\n        do\n          this = col_whi || translate_entities(line)'</em>'\n\n          do rx = rx + 1 to rxdata.0\n            if left(rxdata.rx, 3) = '   ' then\n              do\n                rx = rx - 1\n                leave\n              end\n\n            this = this'<br>'col_yel || rxdata.rx'</em>'\n          end\n        end\n\n      when pos('I' || 'SRS0', line) = 1 then\n        do\n          col  = value('col.0e'substr(line, 8, 1))\n\n          this = col_whi || substr(line,  1, 9)'</em>' ||,\n                 col     || substr(line, 10)'</em>'\n        end\n\n      when sect.0fnd then\n        do\n          this = col_blu || substr(line,  1, 7)'</em>' ||,\n                 col_lim || translate_entities(substr(line, 8))'</em>'\n        end\n\n      otherwise\n        do\n          say 'SuperC_SFOR: Otherwise entered @ line' right(rx, 5)\n          say 'Line' strip(line, 'T')\n          this = '<!-- Oops -->'line\n        end\n    end\n\n    htmlout = htmlout || cc || this'<br>'\n\n    /*******************************************************************\n    * Process data following the '  MEMBER ... LINE-#' lines           *\n    *******************************************************************/\n    if copy then\n      do rx = rx + 1 to rxdata.0\n        if substr(rxdata.rx, 1 + asa, 10) = '  ISRSUPC ' then\n          do\n            rx = rx - 1\n            leave\n          end\n\n        htmlout = htmlout || translate_entities(rxdata.rx)'<br>'\n      end\n  end\nreturn\n\n/***********************************************************************\n* SUPERC_LINE:                                                         *\n*                                                                      *\n* This procedure processes the output of SuperC (Line Compare)         *\n***********************************************************************/\nsuperc_line:\n  null = x2c(00)\n  line = strip(rxdata.7, 'T') || null\n\n  slc.0t = ''\n\n  /*********************************************************************\n  * Following code does not work with cmpcolm/lstcolm processing!      *\n  *********************************************************************/\n  select\n    when pos('-' || '-7----+-' || null, line) \\= 0 then slc.0t = 'L'\n    when pos('5' || '----+      ----+', line) \\= 0 then slc.0t = 'N'\n    when pos('+' || '----8      ----+', line) \\= 0 then slc.0t = 'W'\n    when pos('-' || '---+----1----+--', line) \\= 0 then slc.0t = 'S'\n    otherwise\n      do\n        zedsmsg = ''\n        zedlmsg = moi 'does not recognize this type of SuperC Line',\n                  'Compare output, processing terminated|'\n        \"ispexec setmsg msg(ISRZ001)\"\n        exit\n      end\n  end\n\n  /*********************************************************************\n  * Process the file                                                   *\n  *********************************************************************/\n  sect. = 0\n\n  /*********************************************************************\n  * Loop over the source                                               *\n  *********************************************************************/\n  rx = 1\n\n  do while rx <= rxdata.0\n    /*******************************************************************\n    * Display (optional) progress messages                             *\n    *******************************************************************/\n    if show_progress > 0 then\n      if rx // show_progress = 0 then\n        do\n          progress = 'Elapsed time' right(time('E'), 12),\n                     '- lines processed' right(rx, 6)\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' then\n            rc = ehisupp('monitor,'moi 'Progress,'progress)\n          else\n            say progress\n        end\n\n    /*******************************************************************\n    * Fetch line                                                       *\n    *******************************************************************/\n    line = strip(strip(rxdata.rx, 'T'), 'T', x2c(00))\n\n    if asa then\n      if left(line, 1) = '1' then\n        cc = col_lim'1</em>'\n      else\n        cc = ' '\n    else\n      cc = ''\n\n    line = substr(line, asa + 1)\n\n    select\n      /*****************************************************************\n      * Blank line                                                     *\n      *****************************************************************/\n      when line = '' then\n        this = ''\n\n      /*****************************************************************\n      * Main headings                                                  *\n      *****************************************************************/\n      when left(line, 10) = '  ISRSUPC ' then\n        do\n          this = col_whi || line'</em>'\n\n          /*************************************************************\n          * Reset type and section for a new (concatenated) listing    *\n          *************************************************************/\n          if right(line, 10) = 'PAGE     1' then\n            sect. = 0\n        end\n\n      /*****************************************************************\n      * Messages                                                       *\n      *****************************************************************/\n      when left(line, 5) = 'ISRS0' then\n        do\n          col  = value('col.0e'substr(line, 8, 1))\n\n          this = col_whi || substr(line,  1, 9)'</em>' ||,\n                 col     || substr(line, 10)'</em>'\n        end\n\n      /*****************************************************************\n      * Subheading with filenames                                      *\n      *****************************************************************/\n      when left(line, 4) = 'NEW:' then\n        do\n          parse value line with 'NEW: ' newdsn 'OLD: ' olddsn\n          this = col_whi || 'NEW: </em>' ||,\n                 col_yel || newdsn       || '</em>' ||,\n                 col_whi || 'OLD: </em>' ||,\n                 col_blu || olddsn       || '</em>'\n        end\n\n      /*****************************************************************\n      * Section heading                                                *\n      *****************************************************************/\n      when pos('L' || 'ISTING OUTPUT SECTION (LINE COMPARE)',,\n               line) = 22 then\n        do\n          this        = col_whi || line'</em>'\n          sect.0diffs = 1\n        end\n\n      /*****************************************************************\n      * Find positions to color (\"standard\" and LONGLN)                *\n      *****************************************************************/\n      when (slc.0t = 'S' |,\n            slc.0t = 'L') &,\n           pos('I' || 'D       SOURCE LINES', line) = 1 then\n        do\n          this = col_whi || line'</em>'\n          !typ = pos('TYPE ',  line)\n          !len = pos('  LEN ', line)\n          !new = pos('N-LN# ', line)\n          !old = pos('O-LN#',  line)\n        end\n\n      /*****************************************************************\n      * Find positions to color (\"NARROW\")                             *\n      *****************************************************************/\n      when slc.0t = 'N' &,\n           pos('I' || 'D          NEW FILE LINES', line) = 1 then\n        do\n          this = col_whi || line'</em>'\n\n          !nid = pos('ID   ', line)\n          !nd  = !nid + 3\n          !oid = pos('ID   ', line, !nid + 1)\n          !od  = !oid + 3\n          !sep = !oid - 2\n\n          !new = pos('N-LN#', line)\n          !old = pos('O-LN#', line)\n        end\n\n      /*****************************************************************\n      * Find positions to color (\"WIDE\")                               *\n      *****************************************************************/\n      when slc.0t = 'W' &,\n           pos('I' || 'D          NEW FILE LINES', line) = 1 then\n        do\n          this = col_whi || line'</em>'\n\n          !nid = pos('ID   ', line)\n          !nd  = !nid + 3\n          !oid = pos('ID   ', line, !nid + 1)\n          !od  = !oid + 3\n          !sep = !oid - 2\n\n          !ntyp = pos('TYPE ',  line)\n          !nlen = pos('  LEN ', line)\n          !otyp = pos('TYPE ',  line, !ntyp + 1)\n          !olen = pos('  LEN ', line, !nlen + 1)\n          !new  = pos('N-LN# ', line)\n          !old  = pos('O-LN#',  line)\n        end\n\n      /*****************************************************************\n      * Ruler                                                          *\n      *****************************************************************/\n      when (slc.0t = 'S' | slc.0t = 'L') &,\n            pos(' ' || '   ----+----1----+----2', line) = 1 |,\n           (slc.0t = 'N' | slc.0t = 'W') &,\n            pos(' ' || '  ----+----1----+----2', line) = 1 then\n        this = col_tur || line'</em>'\n\n      /*****************************************************************\n      * Change section cutoff                                          *\n      *****************************************************************/\n      when pos('*** C' || 'HANGE SECTION CUTOFF *', line) = 1 then\n        this = col_tur || line'</em>'\n\n      /*****************************************************************\n      * Summaries                                                      *\n      *****************************************************************/\n      when pos('M' || 'EMBER SUMMARY LISTING (LINE COMPARE)',,\n               line) = 23 then\n        do\n          this        = col_whi || line'</em>'\n          sect.0diffs = 0\n        end\n\n      when pos('C' || 'HNG MEMBERS-COMPARED ', line)  = 1 &,\n           pos('N' || 'EW-PROC OLD-PROC',      line) \\= 0 then\n        do\n          this  = col_whi || line'</em>'\n          line  = line' '\n\n          /*************************************************************\n          * Get positions of columns to be HTML'ised                   *\n          *************************************************************/\n          kw.1  = 'CHNG'\n          kw.2  = 'MEMBERS-COMPARED'\n          kw.3  = ' NEW-PROC'\n          kw.4  = ' OLD-PROC'\n          kw.5  = ' MATCHED'\n          kw.6  = ' NEW-INS'\n          kw.7  = ' OLD-DEL'\n          kw.8  = ' REFM-LN'\n          kw.9  = ' N-DP-LN'\n          kw.10 = ' O-DP-LN'\n          kw.11 = '  CONC#'\n          kw.0  = 11\n\n          do ? = 1 to kw.0\n            c.?.0p = pos(kw.?' ', line)\n            c.?.0l = length(kw.?)\n          end\n\n          sect.0diffs = 0\n          sect.0mem   = 1\n        end\n\n      /*****************************************************************\n      * Overall totals                                                 *\n      *****************************************************************/\n      when pos('N' || 'ON-PAIRED NEW FILE MEMBERS', line) \\= 0 &,\n           pos('N' || 'ON-PAIRED OLD FILE MEMBERS', line) \\= 0 then\n        do\n          parse value line with p1 '|' p2\n          this  = col_whi || p1  || '</em>' ||,\n                  col_tur || '|' || '</em>' ||,\n                  col_whi || p2  || '</em>'\n\n          sect.0pair = 1\n\n          in_cat     = (pos(' CONC# ', line) \\= 0)\n        end\n\n      /*****************************************************************\n      * Overall totals                                                 *\n      *****************************************************************/\n      when pos('P' || 'DS LINE OVERALL TOTALS', line)  = 24 |,\n           pos('L' || 'INE COMPARE SUMMARY AND', line) = 24 then\n        do\n          this        = col_whi || line'</em>'\n          sect.0pair  = 0\n          sect.0diffs = 0\n          sect.0total = sect.0total + 1\n        end\n\n      /*****************************************************************\n      * Listing type line                                              *\n      *****************************************************************/\n      when pos('L' || 'ISTING-TYPE = ', line) \\= 0 then\n        do\n          sect.0total = sect.0total + 1\n\n          li_ty = 'L' || 'ISTING-TYPE = '\n          co_co = 'C' || 'OMPARE-COLUMNS = '\n          lo_li = 'L' || 'ONGEST-LINE = '\n\n          parse value line with (li_ty) t,\n                                (co_co) c,\n                                (lo_li) l\n\n          this = col_whi || li_ty || '</em>' ||,\n                 col_tur || t                 || '</em>'\n\n          if c \\= '' then\n            this = this ||,\n                   col_whi || co_co || '</em>' ||,\n                   col_tur || c     || '</em>' ||,\n                   col_whi || lo_li || '</em>' ||,\n                   col_tur || l     || '</em>'\n        end\n\n      /*****************************************************************\n      * Process options line                                           *\n      *****************************************************************/\n      when pos('P' || 'ROCESS OPTIONS USED:', line) \\= 0 then\n        do\n          p_opt = 'P' || 'ROCESS OPTIONS USED: '\n          parse value line with (p_opt) t\n\n          this = col_whi || p_opt || '</em>' ||,\n                 col_tur || t     || '</em>'\n        end\n\n      /*****************************************************************\n      * Process statements lines                                       *\n      *****************************************************************/\n      when pos('T' || 'HE FOLLOWING PROCESS STATEMENTS', line) \\= 0 then\n        do\n          sect.0process = 1\n          this          = col_whi || line || '</em>'\n        end\n\n      /*****************************************************************\n      * Concatenated file listing                                      *\n      *****************************************************************/\n      when pos('T' || 'HE FOLLOWING \"OLD\" FILE CONCATENATED',,\n               line) \\= 0 |,\n           pos('T' || 'HE FOLLOWING \"NEW\" FILE CONCATENATED',,\n               line) \\= 0 then\n        do\n          sect.0process = 0\n          sect.0concat  = 1\n\n          if pos('\"OLD\"', line) \\= 0 then\n            col_cat = col_blu\n          else\n            col_cat = col_yel\n\n          this = col_whi || translate_entities(line) || '</em>'\n        end\n\n      /*****************************************************************\n      * Extraneous options                                             *\n      *****************************************************************/\n      when pos('E' || 'XTRANEOUS OR CONFLICTING', line) \\= 0 then\n        do\n          sect.         = 0\n          sect.0extconf = 1\n          this          = col_whi || line || '</em>'\n        end\n\n      /*****************************************************************\n      * The annotated differences (\"standard\" and LONGLN)              *\n      *****************************************************************/\n      when (slc.0t = 'S' |,\n            slc.0t = 'L') &,\n           sect.0diffs = 1 then\n        do\n          if left(line, 1) = 'I'  |,\n             left(line, 1) = 'D'  |,\n             left(line, 2) = 'RN' |,\n             left(line, 2) = 'RO' |,\n             pos('MAT=', line) = !typ then\n            do\n              if !old - !new > 6 then\n                do\n                  !!new = !new - 2\n                  !!old = !old - 2\n                end\n              else\n                do\n                  !!new = !new\n                  !!old = !old\n                end\n\n              parse var line p0,\n                             =4 p1,\n                             =(!typ) p2,\n                             =(!len) p3,\n                             =(!!new) p4,\n                             =(!!old) p5\n\n              c = '0'strip(left(p0, 2))\n\n              if strip(p0) \\= '' then\n                p0 = col_red || p0'</em>'\n\n              if strip(p1) \\= '' then\n                p1 = col.c   || translate_entities(p1)'</em>'\n\n              if strip(p2) \\= '' then\n                p2 = col_red || p2'</em>'\n\n              if strip(p3) \\= '' then\n                p3 = col_lim || p3'</em>'\n\n              if strip(p4) \\= '' then\n                p4 = col_yel || p4'</em>'\n\n              if strip(p5) \\= '' then\n                p5 = col_blu || p5'</em>'\n\n              this = p0 || p1 || p2 || p3 || p4 || p5\n            end\n          else\n            do\n              this = col_lim || line || '</em>'\n            end\n        end\n\n      /*****************************************************************\n      * The annotated differences (\"NARROW\")                           *\n      *****************************************************************/\n      when slc.0t = 'N' &,\n           sect.0diffs = 1 then\n        do\n          parse var line =(!nid) p0,\n                         =(!nd)  p1,\n                         =(!sep) p2,\n                         =(!oid) p3,\n                         =(!od)  p4,\n                         =(!new) p5,\n                         =(!old) p6\n\n          if strip(p0) \\= ' ' then\n            if left(p0, 3) = 'IMR' then\n              p0 = col_lim || p0'</em>'\n            else\n              p0 = col_red || p0'</em>'\n\n          if strip(p1) \\= ' ' then\n            p1 = col_yel || translate_entities(p1)'</em>'\n\n          if strip(p2) \\= ' ' then\n            p2 = col_tur || p2'</em>'\n\n          if strip(p3) \\= ' ' then\n            if left(p3, 3) = 'DMR' then\n              p3 = col_lim || p3'</em>'\n            else\n              p3 = col_red || p3'</em>'\n\n          if strip(p4) \\= ' ' then\n            p4 = col_blu || translate_entities(p4)'</em>'\n\n          mat = 0\n\n          if strip(p5) \\= ' ' then\n            do\n              if \\datatype(left(p5, 1), 'N') then\n                do\n                  mat = 1\n                  p5  = col_red || p5'</em>'\n                end\n              else\n                p5 = col_yel || p5'</em>'\n            end\n\n          if strip(p6) \\= ' ' then\n            if mat then\n              p6 = col_lim || p6'</em>'\n            else\n              p6 = col_blu || p6'</em>'\n\n          this = p0 || p1 || p2 || p3 || p4 || p5 || p6\n        end\n\n      /*****************************************************************\n      * The annotated differences (\"WIDE\")                             *\n      *****************************************************************/\n      when slc.0t = 'W' &,\n           sect.0diffs = 1 then\n        do\n          parse var line =(!nid)  p0,\n                         =(!nd)   p1,\n                         =(!sep)  p2,\n                         =(!oid)  p3,\n                         =(!od)   p4,\n                         =(!ntyp) p5,\n                         =(!nlen) p6,\n                         =(!otyp) p7,\n                         =(!olen) p8,\n                         =(!new)  p9,\n                         =(!old)  p10\n\n          if strip(p0) = '' then\n            do\n              if strip(p1) \\= ' ' then\n                p1 = col_lim || translate_entities(p1)'</em>'\n\n              if strip(p4) \\= ' ' then\n                p4 = col_lim || translate_entities(p4)'</em>'\n            end\n          else\n            do\n              if strip(p0) \\= ' ' then\n                p0 = col_red || p0'</em>'\n\n              if strip(p1) \\= ' ' then\n                p1 = col_yel || translate_entities(p1)'</em>'\n\n              if strip(p3) \\= ' ' then\n                p3 = col_red || p3'</em>'\n\n              if strip(p4) \\= ' ' then\n                p4 = col_blu || translate_entities(p4)'</em>'\n\n              if strip(p7) \\= ' ' then\n                p7 = col_red || p7'</em>'\n\n              if strip(p8) \\= ' ' then\n                p8 = col_lim || p8'</em>'\n            end\n\n          if strip(p2) \\= ' ' then\n            p2 = col_tur || p2'</em>'\n\n          if strip(p5) \\= ' ' then\n            p5 = col_red || p5'</em>'\n\n          if strip(p6) \\= ' ' then\n            p6 = col_lim || p6'</em>'\n\n          if strip(p9) \\= ' ' then\n            p9 = col_yel || p9'</em>'\n\n          if strip(p10) \\= ' ' then\n            p10 = col_blu || p10'</em>'\n\n          this = p0 || p1 || p2 || p3 || p4 ||,\n                 p5 || p6 || p7 || p8 || p9 || p10\n        end\n\n      /*****************************************************************\n      * The new:old changes per member summary                         *\n      *****************************************************************/\n      when sect.0mem      = 1 &,\n           left(line, 5) == '     ' then\n        this = col_lim || line || '</em>'\n\n      when sect.0mem           = 1 &,\n           substr(line, 7, 8) == '  TOTAL ' then\n        do\n          p    = pos(' TOTAL ', line)\n          parse var line p1 =(p) p2\n          this = col_lim || p1 || '</em>' ||,\n                 col_whi || p2 || '</em>'\n\n          if pos('TOTAL OLD FILE MEMBER(S) NOT PAIRED', line) \\= 0 then\n            sect.0mem = 0\n        end\n\n      when sect.0mem = 1 then\n        do\n          if value('c.'kw.0'.0p') \\= 0 then\n            do\n              parse var line            ast,\n                             =(c.2.0p)  mems,\n                             =(c.11.0p) conc,\n                             =(c.3.0p)  new_proc,\n                             =(c.4.0p)  old_proc,\n                             =(c.5.0p)  matched,\n                             =(c.6.0p)  new_ins,\n                             =(c.7.0p)  old_del,\n                             =(c.8.0p)  refm_ln,\n                             =(c.9.0p)  n_dp_ln,\n                             =(c.10.0p) o_dp_ln\n\n              conc = col_lim || conc || '</em>'\n            end\n          else\n            do\n              parse var line            ast,\n                             =(c.2.0p)  mems,\n                             =(c.3.0p)  new_proc,\n                             =(c.4.0p)  old_proc,\n                             =(c.5.0p)  matched,\n                             =(c.6.0p)  new_ins,\n                             =(c.7.0p)  old_del,\n                             =(c.8.0p)  refm_ln,\n                             =(c.9.0p)  n_dp_ln,\n                             =(c.10.0p) o_dp_ln\n\n              conc = ''\n            end\n\n          if strip(ast) \\= '' then\n            ast = col_red || ast || '</em>'\n\n          if strip(mems) \\= '' then\n            mems = col_red || mems || '</em>'\n\n          if strip(new_proc) \\= '' then\n            new_proc = col_yel || new_proc || '</em>'\n\n          if strip(old_proc) \\= '' then\n            old_proc = col_blu || old_proc || '</em>'\n\n          if strip(matched) \\= '' then\n            matched = col_lim || matched || '</em>'\n\n          if strip(new_ins) \\= '' then\n            new_ins = col_yel || new_ins || '</em>'\n\n          if strip(old_del) \\= '' then\n            old_del = col_blu || old_del || '</em>'\n\n          if strip(refm_ln) \\= '' then\n            refm_ln = col_lim || refm_ln || '</em>'\n\n          if strip(n_dp_ln) \\= '' then\n            n_dp_ln = col_yel || n_dp_ln || '</em>'\n\n          if strip(o_dp_ln) \\= '' then\n            o_dp_ln = col_blu || o_dp_ln || '</em>'\n\n          this = ast      ||,\n                 mems     ||,\n                 conc     ||,\n                 new_proc ||,\n                 old_proc ||,\n                 matched  ||,\n                 new_ins  ||,\n                 old_del  ||,\n                 refm_ln  ||,\n                 n_dp_ln  ||,\n                 o_dp_ln\n        end\n\n      /*****************************************************************\n      * No-paired members section                                      *\n      *****************************************************************/\n      when sect.0pair = 1 then\n        do\n          parse value line with p1 '|' p2\n\n          if in_cat then\n            do\n              if pos('(', p1) \\= 0 then\n                do\n                  parse value p1 with p11 '(' p12 ')' p13\n                  p1 = col_yel || p11          || '</em>' ||,\n                       col_lim || '('p12')'p13 || '</em>'\n                end\n\n              if pos('(', p2) \\= 0 then\n                do\n                  parse value p2 with p21 '(' p22 ')' p23\n                  p2 = col_blu || p21          || '</em>' ||,\n                       col_lim || '('p22')'p23 || '</em>'\n                end\n            end\n          else\n            do\n              if strip(p1) \\= '' then\n                p1 = col_yel || p1  || '</em>'\n\n              if strip(p2) \\= '' then\n                p2 = col_blu || p2  || '</em>'\n            end\n\n          this = p1 || col_tur || '|' || '</em>' || p2\n        end\n\n      /*****************************************************************\n      * Overall totals                                                 *\n      *****************************************************************/\n      when sect.0total = 1 then\n        do\n          stot.    = x2c(00ff)\n          stot.1.1 = 'N' || 'UMBER OF LINE MATCHES'\n          stot.1.2 = 'T' || 'OTAL CHANGES (PAIRED+NONPAIRED CHNG)'\n\n          stot.2.1 = 'R' || 'EFORMATTED LINES'\n          stot.2.2 = 'P' || 'AIRED CHANGES (REFM+PAIRED INS/DEL)'\n\n          stot.3.1 = 'N' || 'EW FILE LINE INSERTIONS'\n          stot.3.2 = 'N' || 'ON-PAIRED INSERTS'\n          stot.3.3 = 'N' || 'EW FILE TEXT STRING CHANGED'\n\n          stot.4.1 = 'O' || 'LD FILE LINE DELETIONS'\n          stot.4.2 = 'N' || 'ON-PAIRED DELETES'\n          stot.4.3 = 'O' || 'LD FILE TEXT STRING CHANGED'\n\n          stot.5.2 = 'L' || 'INES DETECTED AS MOVED'\n\n          stot.6.1 = 'N' || 'EW FILE LINES PROCESSED'\n          stot.6.2 = 'N' || 'EW FILE LINES DP OPTION'\n          stot.6.3 = 'N' || 'EW FILE PART COMMENT LINES'\n\n          stot.7.1 = 'O' || 'LD FILE LINES PROCESSED'\n          stot.7.2 = 'O' || 'LD FILE LINES DP OPTION'\n          stot.7.3 = 'O' || 'LD FILE PART COMMENT LINES'\n\n          this = ''\n          n.   = ''\n          s.   = ''\n\n          do j = 1 to 7 while this = ''\n            lin = line\n\n            p1 = pos(stot.j.1, lin)\n            if p1 \\= 0 then\n              do\n                n.1 = left(lin, p1 - 1)\n                s.1 = stot.j.1\n                lin = substr(lin, p1 + length(stot.j.1))\n              end\n\n            p2 = pos(stot.j.2, lin)\n            if p2 \\= 0 then\n              do\n                n.2 = left(lin, p2 - 1)\n                s.2 = stot.j.2\n                lin = substr(lin, p2 + length(stot.j.2))\n              end\n\n            p3 = pos(stot.j.3, lin)\n            if p3 \\= 0 then\n              do\n                n.3 = left(lin, p3 - 1)\n                s.3 = stot.j.3\n                lin = substr(lin, p3 + length(stot.j.3))\n              end\n\n            if n.1 \\= '' |,\n               n.2 \\= '' |,\n               n.3 \\= '' then\n              do\n                if strip(n.1) \\= '' then\n                  n.1 = col_lim || n.1 || '</em>'\n\n                if strip(s.1) \\= '' then\n                  s.1 = col_whi || s.1 || '</em>'\n\n                if strip(n.2) \\= '' then\n                  n.2 = col_lim || n.2 || '</em>'\n\n                if strip(s.2) \\= '' then\n                  s.2 = col_whi || s.2 || '</em>'\n\n                if strip(n.3) \\= '' then\n                  n.3 = col_lim || n.3 || '</em>'\n\n                if strip(s.3) \\= '' then\n                  s.3 = col_whi || s.3 || '</em>'\n\n                this =  n.1 || s.1 || n.2 || s.2 || n.3 || s.3\n              end\n          end\n        end\n\n      /*****************************************************************\n      * Process statements                                             *\n      *****************************************************************/\n      when sect.0process = 1 then\n        do\n          this = col_tur || translate_entities(line) || '</em>'\n        end\n\n      /*****************************************************************\n      * Concatenated dataset listing(s)                                *\n      *****************************************************************/\n      when sect.0concat = 1 then\n        do\n          this = col_cat || line || '</em>'\n        end\n\n      /*****************************************************************\n      * Extraneous options                                             *\n      *****************************************************************/\n      when sect.0extconf = 1 then\n        do\n          this = col_red || line || '</em>'\n        end\n\n      otherwise\n        do\n          say 'SuperC_Line: Otherwise entered @ line' right(rx, 5)\n          say 'Line' strip(line, 'T')\n          say 'Type' slc.0t\n          this = '<!-- Oops (Type' slc.0t') -->'line\n        end\n    end\n\n    htmlout = htmlout || cc || strip(this, 'T')'<br>'\n    rx      = rx + 1\n  end\nreturn\n\n/***********************************************************************\n* SUPERC_FILE:                                                         *\n*                                                                      *\n* This procedure processes the output of SuperC (File Compare)         *\n***********************************************************************/\nsuperc_file:\n  /*********************************************************************\n  * Process the file                                                   *\n  *********************************************************************/\n  sect.  = 0\n  slc.0t = ''\n\n  /*********************************************************************\n  * Loop over the source                                               *\n  *********************************************************************/\n  rx = 1\n\n  do while rx <= rxdata.0\n    /*******************************************************************\n    * Display (optional) progress messages                             *\n    *******************************************************************/\n    if show_progress > 0 then\n      if rx // show_progress = 0 then\n        do\n          progress = 'Elapsed time' right(time('E'), 12),\n                     '- lines processed' right(rx, 6)\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' then\n            rc = ehisupp('monitor,'moi 'Progress,'progress)\n          else\n            say progress\n        end\n\n    /*******************************************************************\n    * Fetch line                                                       *\n    *******************************************************************/\n    line = strip(rxdata.rx, 'T')\n\n    if asa then\n      if left(line, 1) = '1' then\n        cc = col_lim'1</em>'\n      else\n        cc = ' '\n    else\n      cc = ''\n\n    line = substr(line, asa + 1)\n\n    select\n      /*****************************************************************\n      * Blank line                                                     *\n      *****************************************************************/\n      when line = '' then\n        this = ''\n\n      /*****************************************************************\n      * Main headings                                                  *\n      *****************************************************************/\n      when left(line, 10) = '  ISRSUPC ' then\n        do\n          this = col_whi || line'</em>'\n\n          /*************************************************************\n          * Reset type and section for a new (concatenated) listing    *\n          *************************************************************/\n          if right(line, 10) = 'PAGE     1' then\n            do\n              sect.  = 0\n              slc.0t = ''\n            end\n        end\n\n      /*****************************************************************\n      * Messages                                                       *\n      *****************************************************************/\n      when left(line, 5) = 'ISRS0' then\n        do\n          col  = value('col.0e'substr(line, 8, 1))\n\n          this = col_whi || substr(line,  1, 9)'</em>' ||,\n                 col     || substr(line, 10)'</em>'\n        end\n\n      /*****************************************************************\n      * Subheading with filenames                                      *\n      *****************************************************************/\n      when left(line, 4) = 'NEW:' then\n        do\n          parse value line with 'NEW: ' newdsn 'OLD: ' olddsn\n          this = col_whi || 'NEW: </em>' ||,\n                 col_yel || newdsn       || '</em>' ||,\n                 col_whi || 'OLD: </em>' ||,\n                 col_blu || olddsn       || '</em>'\n        end\n\n      /*****************************************************************\n      * Section heading - PS                                           *\n      *****************************************************************/\n      when pos('C' || 'OMPARE SUMMARY LISTING (FILE COMPARE)',,\n               line) = 20 then\n        do\n          this   = col_whi || line'</em>'\n          slc.0t = 'PS'\n        end\n\n      /*****************************************************************\n      * Section heading - PO                                           *\n      *****************************************************************/\n      when pos('M' || 'EMBER SUMMARY LISTING (FILE COMPARE)',,\n               line) = 23 then\n        do\n          this   = col_whi || line'</em>'\n          slc.0t = 'PO'\n        end\n\n      /*****************************************************************\n      * Totals                                                         *\n      *****************************************************************/\n      when pos(' T' || 'OTAL ', line) = 8 then\n        do\n          parse var line pre +8 post\n\n          this = col_lim || pre  || '</em>' ||,\n                 col_whi || post || '</em>'\n        end\n\n      /*****************************************************************\n      * Summaries                                                      *\n      *****************************************************************/\n      when pos('D' || 'IFF SAME', line) = 1 then\n        do\n          sect.       = 0\n          sect.0diffs = 1\n\n          this        = col_whi || line'</em>'\n          line        = line' '\n\n          /*************************************************************\n          * Get positions of columns to be HTML'ised                   *\n          *************************************************************/\n          kw.1  = 'DIFF'\n          kw.2  = 'SAME'\n          kw.3  = 'N-BYTES'\n          kw.4  = 'O-BYTES'\n          kw.5  = 'N-LINES'\n          kw.6  = 'O-LINES'\n          kw.7  = 'N-HASH-SUM'\n          kw.8  = 'O-HASH-SUM'\n          kw.9  = 'MEMBERS-COMPARED'\n          kw.10 = 'CONC#'\n          kw.0  = 10\n\n          do ? = 1 to kw.0\n            c.?.0p = pos(kw.?' ', line)\n            c.?.0l = length(kw.?)\n          end\n\n          in_cat = (pos(' CONC# ', line) \\= 0)\n        end\n\n      /*****************************************************************\n      * Overall totals                                                 *\n      *****************************************************************/\n      when pos('N' || 'ON-PAIRED NEW FILE MEMBERS', line) \\= 0 &,\n           pos('N' || 'ON-PAIRED OLD FILE MEMBERS', line) \\= 0 then\n        do\n          sect.      = 0\n          sect.0pair = 1\n\n          parse value line with p1 '|' p2\n          this  = col_whi || p1  || '</em>' ||,\n                  col_tur || '|' || '</em>' ||,\n                  col_whi || p2  || '</em>'\n\n          in_cat     = (pos(' CONC# ', line) \\= 0)\n        end\n\n      /*****************************************************************\n      * Process options line                                           *\n      *****************************************************************/\n      when pos('P' || 'ROCESS OPTIONS USED:', line) \\= 0 then\n        do\n          sect. = 0\n\n          p_opt = 'P' || 'ROCESS OPTIONS USED: '\n          parse value line with (p_opt) t\n\n          this = col_whi || p_opt || '</em>' ||,\n                 col_tur || t     || '</em>'\n        end\n\n      /*****************************************************************\n      * Process statements lines                                       *\n      *****************************************************************/\n      when pos('T' || 'HE FOLLOWING PROCESS STATEMENTS', line) \\= 0 then\n        do\n          sect.         = 0\n          sect.0process = 1\n\n          this          = col_whi || line || '</em>'\n        end\n\n      /*****************************************************************\n      * Concatenated file listing                                      *\n      *****************************************************************/\n      when pos('T' || 'HE FOLLOWING \"OLD\" FILE CONCATENATED',,\n               line) \\= 0 |,\n           pos('T' || 'HE FOLLOWING \"NEW\" FILE CONCATENATED',,\n               line) \\= 0 then\n        do\n          sect.         = 0\n          sect.0concat  = 1\n\n          if pos('\"OLD\"', line) \\= 0 then\n            col_cat = col_blu\n          else\n            col_cat = col_yel\n\n          this = col_whi || translate_entities(line) || '</em>'\n        end\n\n      /*****************************************************************\n      * Extraneous options                                             *\n      *****************************************************************/\n      when pos('E' || 'XTRANEOUS OR CONFLICTING', line) \\= 0 then\n        do\n          sect.         = 0\n          sect.0extconf = 1\n\n          this          = col_whi || line || '</em>'\n        end\n\n      /*****************************************************************\n      * Differences (PS)                                               *\n      *****************************************************************/\n      when sect.0diffs & slc.0t = 'PS' then\n        do\n          parse var line            diff,\n                         =(c.2.0p)  same,\n                         =(c.3.0p)  n_bytes,\n                         =(c.4.0p)  o_bytes,\n                         =(c.5.0p)  n_lines,\n                         =(c.6.0p)  o_lines,\n                         =(c.7.0p)  n_hash,\n                         =(c.8.0p)  o_hash\n\n          mems = ''\n          conc = ''\n\n          if diff \\= '' then\n            do\n              diff = col_red || diff || '</em>'\n\n              if same \\= '' then\n                same = col_lim || same || '</em>'\n\n              if n_bytes \\= '' then\n                n_bytes = col_yel || n_bytes || '</em>'\n\n              if o_bytes \\= '' then\n                o_bytes = col_blu || o_bytes || '</em>'\n\n              if n_lines \\= '' then\n                n_lines = col_yel || n_lines || '</em>'\n\n              if o_lines \\= '' then\n                o_lines = col_blu || o_lines || '</em>'\n\n              if n_hash \\= '' then\n                n_hash  = col_yel || n_hash || '</em>'\n\n              if o_hash \\= '' then\n                o_hash  = col_blu || o_hash || '</em>'\n\n              this = diff    || same    ||,\n                     mems    || conc    ||,\n                     n_bytes || o_bytes ||,\n                     n_lines || o_lines ||,\n                     n_hash  || o_hash\n            end\n          else\n            this = col_lim || line || '</em>'\n        end\n\n      /*****************************************************************\n      * Differences (PO)                                               *\n      *****************************************************************/\n      when sect.0diffs & slc.0t = 'PO' then\n        do\n          conc = ''\n\n          if in_cat then\n            parse var line            diff,\n                           =(c.2.0p)  same,\n                           =(c.9.0p)  mems,\n                           =(c.10.0p) conc,\n                           =(c.3.0p)  n_bytes,\n                           =(c.4.0p)  o_bytes,\n                           =(c.5.0p)  n_lines,\n                           =(c.6.0p)  o_lines,\n                           =(c.7.0p)  n_hash,\n                           =(c.8.0p)  o_hash\n          else\n            parse var line            diff,\n                           =(c.2.0p)  same,\n                           =(c.9.0p)  mems,\n                           =(c.3.0p)  n_bytes,\n                           =(c.4.0p)  o_bytes,\n                           =(c.5.0p)  n_lines,\n                           =(c.6.0p)  o_lines,\n                           =(c.7.0p)  n_hash,\n                           =(c.8.0p)  o_hash\n\n          select\n            when strip(mems) = '-------------' then\n              this = col_whi || strip(line,, 'T') || '</em>'\n\n            when strip(mems) = 'MEMBER TOTALS' then\n              do\n                this = col_whi || diff || same || mems || '</em>'\n\n                if \\in_cat then\n                  do\n                    tmp = left(line, 31) || substr(line, 40)\n                    parse var tmp =(c.3.0p)  n_bytes,\n                                  =(c.4.0p)  o_bytes,\n                                  =(c.5.0p)  n_lines,\n                                  =(c.6.0p)  o_lines,\n                                  =(c.7.0p)  .\n\n                  end\n\n                this = this    ||,\n                       col_lim || conc    ||,\n                                  n_bytes ||,\n                                  o_bytes ||,\n                                  n_lines ||,\n                                  o_lines || '</em>'\n\n                sect.0diffs = 0\n              end\n\n            otherwise\n              do\n                if diff = '' then\n                  this = col_lim || line || '</em>'\n                else\n                  do\n                    this = col_red || diff || same || mems || '</em>'\n\n                    if conc \\= '' then\n                      this = this || col_lim || conc || '</em>'\n\n                    this = this ||,\n                           col_yel || n_bytes || '</em>' ||,\n                           col_blu || o_bytes || '</em>' ||,\n                           col_yel || n_lines || '</em>' ||,\n                           col_blu || o_lines || '</em>' ||,\n                           col_yel || n_hash  || '</em>' ||,\n                           col_blu || o_hash  || '</em>'\n                  end\n              end\n          end\n        end\n\n      /*****************************************************************\n      * No-paired members section                                      *\n      *****************************************************************/\n      when sect.0pair = 1 then\n        do\n          parse value line with p1 '|' p2\n\n          if in_cat then\n            do\n              if pos('(', p1) \\= 0 then\n                do\n                  parse value p1 with p11 '(' p12 ')' p13\n                  p1 = col_yel || p11          || '</em>' ||,\n                       col_lim || '('p12')'p13 || '</em>'\n                end\n\n              if pos('(', p2) \\= 0 then\n                do\n                  parse value p2 with p21 '(' p22 ')' p23\n                  p2 = col_blu || p21          || '</em>' ||,\n                       col_lim || '('p22')'p23 || '</em>'\n                end\n            end\n          else\n            do\n              if strip(p1) \\= '' then\n                p1 = col_yel || p1  || '</em>'\n\n              if strip(p2) \\= '' then\n                p2 = col_blu || p2  || '</em>'\n            end\n\n          this = p1 || col_tur || '|' || '</em>' || p2\n        end\n\n      /*****************************************************************\n      * Process statements                                             *\n      *****************************************************************/\n      when sect.0process = 1 then\n        do\n          this = col_tur || translate_entities(line) || '</em>'\n        end\n\n      /*****************************************************************\n      * Concatenated dataset listing(s)                                *\n      *****************************************************************/\n      when sect.0concat = 1 then\n        do\n          this = col_cat || line || '</em>'\n        end\n\n      /*****************************************************************\n      * Extraneous options                                             *\n      *****************************************************************/\n      when sect.0extconf = 1 then\n        do\n          this = col_red || line || '</em>'\n        end\n\n      otherwise\n        do\n          say 'SuperC_File: Otherwise entered @ line' right(rx, 5)\n          say 'Line' strip(line, 'T')\n          say 'Type' slc.0t\n          this = '<!-- Oops (Type' slc.0t') -->'line\n        end\n    end\n\n    htmlout = htmlout || cc || strip(this, 'T')'<br>'\n    rx      = rx + 1\n  end\nreturn\n\n/***********************************************************************\n* SUPERC_BYTE:                                                         *\n*                                                                      *\n* This procedure processes the output of SuperC (Byte Compare)         *\n***********************************************************************/\nsuperc_byte:\n  null = x2c(00)\n  line = strip(rxdata.7, 'T') || null\n\n  /*********************************************************************\n  * Process the file                                                   *\n  *********************************************************************/\n  sect. = 0\n\n  /*********************************************************************\n  * Loop over the source                                               *\n  *********************************************************************/\n  rx = 1\n\n  do while rx <= rxdata.0\n    /*******************************************************************\n    * Display (optional) progress messages                             *\n    *******************************************************************/\n    if show_progress > 0 then\n      if rx // show_progress = 0 then\n        do\n          progress = 'Elapsed time' right(time('E'), 12),\n                     '- lines processed' right(rx, 6)\n\n          if t_rex  = 'TSO'  &,\n             aspace = 'ISPF' then\n            rc = ehisupp('monitor,'moi 'Progress,'progress)\n          else\n            say progress\n        end\n\n    /*******************************************************************\n    * Fetch line                                                       *\n    *******************************************************************/\n    line = strip(rxdata.rx, 'T')\n\n    if asa then\n      if left(line, 1) = '1' then\n        cc = col_lim'1</em>'\n      else\n        cc = ' '\n    else\n      cc = ''\n\n    line = substr(line, asa + 1)\n\n    select\n      /*****************************************************************\n      * Blank line                                                     *\n      *****************************************************************/\n      when line = '' then\n        this = ''\n\n      /*****************************************************************\n      * Main headings                                                  *\n      *****************************************************************/\n      when left(line, 10) = '  ISRSUPC ' then\n        do\n          this  = col_whi || line'</em>'\n          sect. = 0\n        end\n\n      /*****************************************************************\n      * Messages                                                       *\n      *****************************************************************/\n      when left(line, 5) = 'ISRS0' then\n        do\n          col  = value('col.0e'substr(line, 8, 1))\n\n          this = col_whi || substr(line,  1, 9)'</em>' ||,\n                 col     || substr(line, 10)'</em>'\n        end\n\n      /*****************************************************************\n      * Subheading with filenames                                      *\n      *****************************************************************/\n      when left(line, 4) = 'NEW:' then\n        do\n          parse value line with 'NEW: ' newdsn 'OLD: ' olddsn\n          this = col_whi || 'NEW: </em>' ||,\n                 col_yel || newdsn       || '</em>' ||,\n                 col_whi || 'OLD: </em>' ||,\n                 col_blu || olddsn       || '</em>'\n        end\n\n      /*****************************************************************\n      * Section heading                                                *\n      *****************************************************************/\n      when pos('L' || 'ISTING OUTPUT SECTION (BYTE COMPARE)',,\n               line) = 22 then\n        do\n          this = col_whi || line'</em>'\n        end\n\n      /*****************************************************************\n      * Find positions to color                                        *\n      *****************************************************************/\n      when pos('I' || 'D  NEW-OFFSET / HEX-DATA', line) = 1 then\n        do\n          this = col_whi || line'</em>'\n\n          !nid = pos('ID  ', line)\n          !nof = !nid + 4\n          !sep = !nid + 10\n          !dif = !nid + 11\n          !feb = pos('*         EBCDIC' || ' TEXT            *', line)\n          !fet = !feb + 1\n          !leb = !feb + 33\n          !oid = pos('ID ', line, !nid + 1)\n          !oof = !oid + 3\n\n          sect.0diffs = 1\n        end\n\n      /*****************************************************************\n      * Ruler                                                          *\n      *****************************************************************/\n      when pos('0' || '------- 4------- 8-------', line) = 12 then\n        this = col_tur || line'</em>'\n\n      /*****************************************************************\n      * Summary listings                                               *\n      *****************************************************************/\n      when pos('M' || 'EMBER SUMMARY LISTING (BYTE COMPARE)',,\n               line) = 23 then\n        this = col_whi || line'</em>'\n\n      when pos('B' || 'YTE COMPARE SUMMARY AND STATISTICS',,\n               line) = 24 then\n        do\n          this        = col_whi || line'</em>'\n          sect.0total = sect.0total + 1\n        end\n\n      /*****************************************************************\n      * Summaries                                                      *\n      *****************************************************************/\n      when pos('C' || 'HNG MEMBERS-COMPARED ', line)  = 1 &,\n           pos('N' || 'EW-PROC OLD-PROC',      line) \\= 0 then\n        do\n          this  = col_whi || line'</em>'\n          line  = line' '\n\n          /*************************************************************\n          * Get positions of columns to be HTML'ised                   *\n          *************************************************************/\n          kw.1  = 'CHNG'\n          kw.2  = 'MEMBERS-COMPARED'\n          kw.3  = ' NEW-PROC'\n          kw.4  = ' OLD-PROC'\n          kw.5  = ' MATCHED'\n          kw.6  = ' NEW-INS'\n          kw.7  = ' OLD-DEL'\n          kw.8  = '  CONC#'\n          kw.0  = 8\n\n          do ? = 1 to kw.0\n            c.?.0p = pos(kw.?' ', line)\n            c.?.0l = length(kw.?)\n          end\n\n          sect.0diffs = 0\n          sect.0mem   = 1\n        end\n\n      /*****************************************************************\n      * Non-paired member listing                                      *\n      *****************************************************************/\n      when pos('N' || 'ON-PAIRED NEW FILE MEMBERS', line) \\= 0 &,\n           pos('N' || 'ON-PAIRED OLD FILE MEMBERS', line) \\= 0 then\n        do\n          parse value line with p1 '|' p2\n          this  = col_whi || p1  || '</em>' ||,\n                  col_tur || '|' || '</em>' ||,\n                  col_whi || p2  || '</em>'\n\n          sect.0pair = 1\n\n          in_cat     = (pos(' CONC# ', line) \\= 0)\n        end\n\n      /*****************************************************************\n      * Overall totals                                                 *\n      *****************************************************************/\n      when pos('P' || 'DS BYTE OVERALL TOTALS', line) = 24 then\n        do\n          this        = col_whi || line'</em>'\n          sect.0pair  = 0\n          sect.0total = sect.0total + 1\n        end\n\n      /*****************************************************************\n      * Listing type line                                              *\n      *****************************************************************/\n      when pos('L' || 'ISTING-TYPE = ', line) \\= 0 then\n        do\n          sect.0total = sect.0total + 1\n\n          li_ty = 'L' || 'ISTING-TYPE = '\n          co_co = 'C' || 'OMPARE-COLUMNS = '\n          lo_li = 'L' || 'ONGEST-LINE = '\n\n          parse value line with (li_ty) t,\n                                (co_co) c,\n                                (lo_li) l\n\n          this = col_whi || li_ty || '</em>' ||,\n                 col_tur || t                 || '</em>'\n\n          if c \\= '' then\n            this = this ||,\n                   col_whi || co_co || '</em>' ||,\n                   col_tur || c     || '</em>' ||,\n                   col_whi || lo_li || '</em>' ||,\n                   col_tur || l     || '</em>'\n        end\n\n      /*****************************************************************\n      * Process options line                                           *\n      *****************************************************************/\n      when pos('P' || 'ROCESS OPTIONS USED:', line) \\= 0 then\n        do\n          p_opt = 'P' || 'ROCESS OPTIONS USED: '\n          parse value line with (p_opt) t\n\n          this = col_whi || p_opt || '</em>' ||,\n                 col_tur || t     || '</em>'\n        end\n\n      /*****************************************************************\n      * Process statements lines                                       *\n      *****************************************************************/\n      when pos('T' || 'HE FOLLOWING PROCESS STATEMENTS', line) \\= 0 then\n        do\n          sect.0process = 1\n          this          = col_whi || line || '</em>'\n        end\n\n      /*****************************************************************\n      * Concatenated file listing                                      *\n      *****************************************************************/\n      when pos('T' || 'HE FOLLOWING \"OLD\" FILE CONCATENATED',,\n               line) \\= 0 |,\n           pos('T' || 'HE FOLLOWING \"NEW\" FILE CONCATENATED',,\n               line) \\= 0 then\n        do\n          sect.0process = 0\n          sect.0concat  = 1\n\n          if pos('\"OLD\"', line) \\= 0 then\n            col_cat = col_blu\n          else\n            col_cat = col_yel\n\n          this = col_whi || translate_entities(line) || '</em>'\n        end\n\n      /*****************************************************************\n      * Extraneous options                                             *\n      *****************************************************************/\n      when pos('E' || 'XTRANEOUS OR CONFLICTING', line) \\= 0 then\n        do\n          sect.         = 0\n          sect.0extconf = 1\n          this          = col_whi || line || '</em>'\n        end\n\n      /*****************************************************************\n      * The annotated differences                                      *\n      *****************************************************************/\n      when sect.0diffs = 1 then\n        do\n          parse var line =(!nid) p0,\n                         =(!nof) p1,\n                         =(!sep) p2,\n                         =(!dif) p3,\n                         =(!feb) p4,\n                         =(!fet) p5,\n                         =(!leb) p6,\n                         =(!oid) p7,\n                         =(!oof) p8\n          c = '0'strip(left(p0, 2))\n\n          if strip(p0) \\= '' then\n            p0 = col_red || p0'</em>'\n\n          if strip(p1) \\= '' then\n            p1 = col_yel || p1'</em>'\n\n          if strip(p2) \\= '' then\n            p2 = col_tur || p2'</em>'\n\n          if strip(p3) \\= '' then\n            p3 = col.c || p3'</em>'\n\n          if strip(p4) \\= '' then\n            p4 = col_tur || p4'</em>'\n\n          if strip(p5) \\= '' then\n            p5 = col.c || translate_entities(p5)'</em>'\n\n          if strip(p6) \\= '' then\n            p6 = col_tur || p6'</em>'\n\n          if strip(p7) \\= '' then\n            p7 = col_red || p7'</em>'\n\n          if strip(p8) \\= '' then\n            p8 = col_blu || p8'</em>'\n\n          this = p0 || p1 || p2 || p3 || p4 ||,\n                 p5 || p6 || p7 || p8\n        end\n\n      /*****************************************************************\n      * The new:old changes per member summary                         *\n      *****************************************************************/\n      when sect.0mem      = 1 &,\n           left(line, 5) == '     ' then\n        this = col_lim || line || '</em>'\n\n      when sect.0mem           = 1 &,\n           substr(line, 7, 8) == '  TOTAL ' then\n        do\n          p    = pos(' TOTAL ', line)\n          parse var line p1 =(p) p2\n          this = col_lim || p1 || '</em>' ||,\n                 col_whi || p2 || '</em>'\n\n          if pos('TOTAL OLD FILE MEMBER(S) NOT PAIRED', line) \\= 0 then\n            sect.0mem = 0\n        end\n\n      when sect.0mem = 1 then\n        do\n          if value('c.'kw.0'.0p') \\= 0 then\n            do\n              parse var line           ast,\n                             =(c.2.0p) mems,\n                             =(c.8.0p) conc,\n                             =(c.3.0p) new_proc,\n                             =(c.4.0p) old_proc,\n                             =(c.5.0p) matched,\n                             =(c.6.0p) new_ins,\n                             =(c.7.0p) old_del\n\n              conc = col_lim || conc || '</em>'\n            end\n          else\n            do\n              parse var line           ast,\n                             =(c.2.0p) mems,\n                             =(c.3.0p) new_proc,\n                             =(c.4.0p) old_proc,\n                             =(c.5.0p) matched,\n                             =(c.6.0p) new_ins,\n                             =(c.7.0p) old_del\n\n              conc = ''\n            end\n\n          if strip(ast) \\= '' then\n            ast = col_red || ast || '</em>'\n\n          if strip(mems) \\= '' then\n            mems = col_red || mems || '</em>'\n\n          if strip(new_proc) \\= '' then\n            new_proc = col_yel || new_proc || '</em>'\n\n          if strip(old_proc) \\= '' then\n            old_proc = col_blu || old_proc || '</em>'\n\n          if strip(matched) \\= '' then\n            matched = col_lim || matched || '</em>'\n\n          if strip(new_ins) \\= '' then\n            new_ins = col_yel || new_ins || '</em>'\n\n          if strip(old_del) \\= '' then\n            old_del = col_blu || old_del || '</em>'\n\n          this = ast      ||,\n                 mems     ||,\n                 conc     ||,\n                 new_proc ||,\n                 old_proc ||,\n                 matched  ||,\n                 new_ins  ||,\n                 old_del\n        end\n\n      /*****************************************************************\n      * No-paired members section                                      *\n      *****************************************************************/\n      when sect.0pair = 1 then\n        do\n          parse value line with p1 '|' p2\n\n          if in_cat then\n            do\n              if pos('(', p1) \\= 0 then\n                do\n                  parse value p1 with p11 '(' p12 ')' p13\n                  p1 = col_yel || p11          || '</em>' ||,\n                       col_lim || '('p12')'p13 || '</em>'\n                end\n\n              if pos('(', p2) \\= 0 then\n                do\n                  parse value p2 with p21 '(' p22 ')' p23\n                  p2 = col_blu || p21          || '</em>' ||,\n                       col_lim || '('p22')'p23 || '</em>'\n                end\n            end\n          else\n            do\n              if strip(p1) \\= '' then\n                p1 = col_yel || p1  || '</em>'\n\n              if strip(p2) \\= '' then\n                p2 = col_blu || p2  || '</em>'\n            end\n\n          this = p1 || col_tur || '|' || '</em>' || p2\n        end\n\n      /*****************************************************************\n      * Overall totals                                                 *\n      *****************************************************************/\n      when sect.0total = 1 then\n        do\n          stot.    = x2c(00ff)\n          stot.1.1 = 'N' || 'UMBER OF BYTE MATCHES'\n          stot.1.2 = 'T' || 'OTAL CHANGES (PAIRED+NONPAIRED CHNG)'\n\n          stot.2.1 = 'N' || 'EW FILE BYTE INSERTIONS'\n          stot.2.2 = 'N' || 'ON-PAIRED INSERTS'\n\n          stot.3.1 = 'O' || 'LD FILE BYTE DELETIONS'\n          stot.3.2 = 'N' || 'ON-PAIRED DELETES'\n\n          stot.4.1 = 'N' || 'EW FILE BYTES PROCESSED'\n\n          stot.5.1 = 'O' || 'LD FILE BYTES PROCESSED'\n\n          this = ''\n          n.   = ''\n          s.   = ''\n\n          do j = 1 to 5 while this = ''\n            lin = line\n\n            p1 = pos(stot.j.1, lin)\n            if p1 \\= 0 then\n              do\n                n.1 = left(lin, p1 - 1)\n                s.1 = stot.j.1\n                lin = substr(lin, p1 + length(stot.j.1))\n              end\n\n            p2 = pos(stot.j.2, lin)\n            if p2 \\= 0 then\n              do\n                n.2 = left(lin, p2 - 1)\n                s.2 = stot.j.2\n                lin = substr(lin, p2 + length(stot.j.2))\n              end\n\n            p3 = pos(stot.j.3, lin)\n            if p3 \\= 0 then\n              do\n                n.3 = left(lin, p3 - 1)\n                s.3 = stot.j.3\n                lin = substr(lin, p3 + length(stot.j.3))\n              end\n\n            if n.1 \\= '' |,\n               n.2 \\= '' |,\n               n.3 \\= '' then\n              do\n                if strip(n.1) \\= '' then\n                  n.1 = col_lim || n.1 || '</em>'\n\n                if strip(s.1) \\= '' then\n                  s.1 = col_whi || s.1 || '</em>'\n\n                if strip(n.2) \\= '' then\n                  n.2 = col_lim || n.2 || '</em>'\n\n                if strip(s.2) \\= '' then\n                  s.2 = col_whi || s.2 || '</em>'\n\n                if strip(n.3) \\= '' then\n                  n.3 = col_lim || n.3 || '</em>'\n\n                if strip(s.3) \\= '' then\n                  s.3 = col_whi || s.3 || '</em>'\n\n                this =  n.1 || s.1 || n.2 || s.2 || n.3 || s.3\n              end\n          end\n        end\n\n      /*****************************************************************\n      * Process statements                                             *\n      *****************************************************************/\n      when sect.0process = 1 then\n        do\n          this = col_tur || translate_entities(line) || '</em>'\n        end\n\n      /*****************************************************************\n      * Concatenated dataset listing(s)                                *\n      *****************************************************************/\n      when sect.0concat = 1 then\n        do\n          this = col_cat || line || '</em>'\n        end\n\n      /*****************************************************************\n      * Extraneous options                                             *\n      *****************************************************************/\n      when sect.0extconf = 1 then\n        do\n          this = col_red || line || '</em>'\n        end\n\n      otherwise\n        do\n          say 'SuperC_Line: Otherwise entered @ line' right(rx, 5)\n          say 'Line' strip(line, 'T')\n          say 'Type' slc.0t\n          this = '<!-- Oops (Type' slc.0t') -->'line\n        end\n    end\n\n    htmlout = htmlout || cc || strip(this, 'T')'<br>'\n    rx      = rx + 1\n  end\nreturn\n\n/***********************************************************************\n* SYNTAX:                                                              *\n*                                                                      *\n* This procedure gives a 'clean' exit for errors                       *\n***********************************************************************/\nsyntax:\n  say errortext(rc)\n  say sigl':' sourceline(sigl)\n  say rx':' rxdata.rx\nexit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EHISUPP": {"ttr": 4868, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07#_\\x01\\x162\\x9f\\x00\\x00\\x04\\xc7\\x00\\x00\\x00\\x00\\xc3\\xd3\\xd6\\xc7\\xc7\\xc9\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-08-23T00:00:00", "modifydate": "2016-11-24T00:00:00", "lines": 1223, "newlines": 0, "modlines": 0, "user": "CLOGGIE"}, "text": "/* REXX exec containing support routines for the EHIxxxx execs        */\n/*** trace ?r ***************************************************** \\| *\n*               (C) Copyright Robert AH Prins, 2007-2016               *\n************************************************************************\n*  ------------------------------------------------------------------  *\n* | Date       | By   | Remarks                                      | *\n* |------------+------+----------------------------------------------| *\n* |            |      |                                              | *\n* |------------+------+----------------------------------------------| *\n* | 2016-11-24 | RAHP | Add \"ehixmit\" interface                      | *\n* |------------+------+----------------------------------------------| *\n* | 2016-11-18 | RAHP | Multiple updates/simplifications             | *\n* |------------+------+----------------------------------------------| *\n* | 2016-02-22 | RAHP | Remove action bars from display              | *\n* |------------+------+----------------------------------------------| *\n* | 2012-11-26 | RAHP | Remove '$', '#' & '@' in names (ooREXX)      | *\n* |------------+------+----------------------------------------------| *\n* | 2012-06-25 | RAHP | wscon changes                                | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-27 | RAHP | Add monitor function                         | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-02 | RAHP | - add selection for short CSS 'em' colors    | *\n* |            |      | - allow progress interval up to 5000         | *\n* |------------+------+----------------------------------------------| *\n* | 2009-06-18 | RAHP | Add short form ISPF colors                   | *\n* |------------+------+----------------------------------------------| *\n* | 2009-05-04 | RAHP | Add 'whitespace:pre' for 'Edit' and 'None'   | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-30 | RAHP | Remove header and footer for 'None'          | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-23 | RAHP | Make 'Edit' and 'None' HTML also 'XHTML 1.0  | *\n* |            |      | Strict' compliant                            | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-22 | RAHP | Update comment                               | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-01 | RAHP | Add font selection for generated HTML        | *\n* |------------+------+----------------------------------------------| *\n* | 2009-03-16 | RAHP | Replace LISTDSI by BXPWDYN                   | *\n* |------------+------+----------------------------------------------| *\n* | 2009-03-02 | RAHP | Make HTML 'XHTML 1.0 Strict' compliant       | *\n* |------------+------+----------------------------------------------| *\n* | 2009-02-09 | RAHP | - Update for Firefox 3.x                     | *\n* |            |      | - RACF problem with 'html' extension @ NVSM  | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-27 | RAHP | Free panel dataset                           | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-24 | RAHP | Add panel to modify options                  | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-18 | RAHP | - add GPL V3 License                         | *\n* |            |      | - add GET_OPTIONS routine                    | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-17 | RAHP | Correct tag mismatch                         | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-11 | RAHP | Add ISPF generating code                     | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-06 | RAHP | Cater for PC environment                     | *\n* |------------+------+----------------------------------------------| *\n* | 2007-08-30 | RAHP | Add generate CSS to make HTML 4.01 compliant | *\n* |------------+------+----------------------------------------------| *\n* | 2007-08-23 | RAHP | Initial version                              | *\n* |------------+------+----------------------------------------------| *\n************************************************************************\n* EHISUPP is a REXX exec containing a number of support routines for   *\n* the various other EHIxxxx execs. To use this exec, it needs to be    *\n* passed the required routine and its arguments.                       *\n*                                                                      *\n* The routines currently implemented are:                              *\n*                                                                      *\n* - generate_output                                                    *\n*                                                                      *\n*   This routine expects six parameters, containing                    *\n*                                                                      *\n*   o 1 - the separator for the next five parameters                   *\n*   o 2 - the generated HTML string, with records separated by         *\n*         \"br\" tags                                                    *\n*   o 3 - the name of the output file where the HTLM will be saved     *\n*   o 4 - a title for the window                                       *\n*   o 5 - a header to append to the top of the generated HTML          *\n*   o 6 - a footer to append to the bottom of the generated HTML       *\n*                                                                      *\n*   The routine will cut the generated HTML on the \"br\" tags, append   *\n*   the title, header and footer and save the HTML in the output file. *\n*                                                                      *\n* - xfer_and_show_html                                                 *\n*                                                                      *\n*   This routine expects five parameters, containing                   *\n*                                                                      *\n*   o 1 - the separator for the next four parameters                   *\n*   o 2 - the name of the directory on the PC to receive the file      *\n*   o 3 - the name of the file on the PC                               *\n*   o 4 - the name of the file on the host                             *\n*   o 5 - a flag to indicate to start the application associated with  *\n*         an extension of '.html' on the PC (YES/NO)                   *\n*                                                                      *\n* - get_options                                                        *\n*                                                                      *\n*   This routine expects two parameters, containing                    *\n*                                                                      *\n*   o 1 - the separator that will be used to concatenate the returned  *\n*         values                                                       *\n*   o 2 - the name of the invoking macro                               *\n*                                                                      *\n* t_rex will contain the environment. It can be:                       *\n*                                                                      *\n* - TSO     - TSO/ISPF                                                 *\n* - MVS     - z/OS (PGM=IRXJCL)                                        *\n* - SYSTEM  - Regina                                                   *\n* - COMMAND - PC DOS 7/2000                                            *\n* - CMD     - Object REXX (OS/2, Windoze)                              *\n************************************************************************\n* Send questions, suggestions and/or bug reports to:                   *\n*                                                                      *\n* robert@prino.org / robert.ah.prins@gmail.com                         *\n*                                                                      *\n* Robert AH Prins                                                      *\n* Taboralaan 46                                                        *\n* 8400 Oostende                                                        *\n* Belgium                                                              *\n************************************************************************\n* This program is free software: you can redistribute it and/or        *\n* modify it under the terms of the GNU General Public License as       *\n* published by the Free Software Foundation, either version 3 of       *\n* the License, or (at your option) any later version.                  *\n*                                                                      *\n* This program is distributed in the hope that it will be useful,      *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of       *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *\n* GNU General Public License for more details.                         *\n*                                                                      *\n* You should have received a copy of the GNU General Public License    *\n* along with this program. If not, see <http://www.gnu.org/licenses/>  *\n***********************************************************************/\nparse source source\nparse value source with . . moi . . . cmdenv aspace .\n\nt_rex = address()\n!br   = '<b' || 'r>'\n\n/***********************************************************************\n* Set to 0 if no default modification pop-up panel is required         *\n***********************************************************************/\npopup = 1\n\nparse arg function ',' data\n\ninterpret 'signal' function\n\n/***********************************************************************\n* GENERATE_OUTPUT:                                                     *\n*                                                                      *\n* This procedure writes the output to a temporary dataset              *\n***********************************************************************/\ngenerate_output:\n  parse value data with sep ',' htmlout (sep),\n                                odsn (sep),\n                                title (sep),\n                                header (sep),\n                                footer (sep),\n                                htmlfont\n\n  lrecl = 0\n\n  if left(htmlout, 6) = x2c(ff)'ISPF'x2c(ff) then\n    call generate_ispf\n  else\n    call generate_std\n\n  call split_writer\n\n  /*********************************************************************\n  * Clean up                                                           *\n  *********************************************************************/\n  \"ispexec qlibdef ispplib id(id)\"\n  if rc = 0 then\n    do\n      \"ispexec libdef ispplib\"\n      \"free f(\"id\")\"\n    end\n\nreturn 0\n\n/***********************************************************************\n* GENERATE_STD:                                                        *\n*                                                                      *\n* Generate standard (fast) HTML                                        *\n***********************************************************************/\ngenerate_std:\n  /*********************************************************************\n  * Put the header lines on the stack                                  *\n  *********************************************************************/\n  queue '<!DOCTYPE html>'\n  queue '<html lang=\"en\">'\n  queue '<!--' footer '-->'\n  queue '<head>'\n  queue '  <meta charset=\"UTF-8\" />'\n  queue '  <title>' || title || '</title>'\n  queue ' '\n  queue '  <style type=\"text/css\" media=\"screen\">'\n/*queue '  a         { text-decoration:none; }'\n  queue '  a:link    { color:lime; }'\n  queue '  a:active  { color:lime; }'\n  queue '  a:visited { color:lime; }'\n  queue '  a:hover   { color:#7890f0; font-style:italic; }'\n*/queue ' '\n  queue '  em             { font-style:normal; }'\n  queue '  em.b           { color:#7890f0; }'\n  queue '  em.f           { color:pink;    }'\n  queue '  em.l           { color:lime;    }'\n  queue '  em.r           { color:red;     }'\n  queue '  em.t           { color:aqua;    }'\n  queue '  em.w           { color:white;   }'\n  queue '  em.y           { color:yellow;  }'\n  queue ' '\n  queue '  body {'\n  queue '    background-color: #000000;'\n  queue '    color: #00FF00;'\n  queue '    font-size: 1vw;'\n  queue '    padding: 0 0 0 1em;'\n  queue '  }'\n  queue ' '\n  queue '  pre {'\n  queue '    font-family: \"Liberation Mono\",Inconsolata,' ||,\n                         '\"Courier New\",monospace;'\n  queue '  }'\n  queue '  </style>'\n  queue ' '\n  queue '</head>'\n  queue '<body><pre>'\n\n  lrecl = max(109, length(footer) + 9, length(title) + 15)\n\n  /*********************************************************************\n  * Split the code on \"br\" tags and put them on the stack              *\n  *********************************************************************/\n  do while htmlout \\= ''\n    parse value htmlout with dataline (!br) htmlout\n\n    dataline = strip(dataline, 'T')\n      queue dataline\n\n    lrecl = max(lrecl, length(dataline))\n  end\n\n  queue '</pre></body>'\n  queue '</html>'\n\n  html = ''\nreturn 0\n\n/***********************************************************************\n* GENERATE_ISPF:                                                       *\n*                                                                      *\n* Generate a fancy ISPF-like scrolling HTML page                       *\n***********************************************************************/\ngenerate_ispf:\n  parse value title with . ':' idsn\n\n  idsn    = left(strip(idsn), 47)\n  seq     = strip(substr(htmlout, 7, 6), 'L', '0')\n  htmlout = substr(htmlout, 14)\n\n  css     = generate_ispf_css()\n\n  !footer = '*|*' || 'FOOTER' || '*|*'\n  !title  = '*|*' || 'TITLE'  || '*|*'\n  !dsn    = '*|*' || 'DSN'    || '*|*'\n  !seq    = '*|*' || 'SEQ'    || '*|*'\n  !data   = '*|*' || 'DATA'   || '*|*'!br\n\n  parse value css with p1 (!footer),\n                       p2 (!title),\n                       p3 (!dsn),\n                       p4 (!seq),\n                       p5 (!data) p6\n\n  html = p1 || footer  ||,\n         p2 || title   ||,\n         p3 || idsn    ||,\n         p4 || seq     ||,\n         p5 || htmlout || p6\nreturn\n\n/***********************************************************************\n* SPLIT_WRITER:                                                        *\n*                                                                      *\n* Split to generated output on \"br\" tags, put the parts on the stack   *\n* and write them to a file.                                            *\n***********************************************************************/\nsplit_writer:\n  /*********************************************************************\n  * Split the output on \"br\" tags and put them on the stack            *\n  *********************************************************************/\n  do while html \\= ''\n    parse value html with dataline (!br) html\n    queue strip(dataline, 'T')\n\n    lrecl = max(lrecl, length(dataline))\n  end\n\n  /*********************************************************************\n  * Create the output dataset                                          *\n  *********************************************************************/\n  if t_rex = 'TSO' then\n    do\n      if aspace = 'ISPF' then\n        \"ispexec lmerase dataset(\"odsn\")\"\n      else\n        \"del\" odsn\n\n      dynlib = 'dyn'random(99999)\n\n      \"alloc f(\"dynlib\") da(\"odsn\") new reu \" ||,\n                        \"unit(sysda)\" || ,\n                        \"space(60 60) tracks release \" ||,\n                        \"recfm(v b) lrecl(\"lrecl + 4\") blksize(0)\"\n      if rc > 0 then\n        do\n          say 'Error when allocating' odsn\n          return 8\n        end\n\n      /*****************************************************************\n      * Write out the stack                                            *\n      *****************************************************************/\n      \"execio\" queued() \"diskw\" dynlib \"(finis)\"\n      if rc > 0 then\n        do\n          queue 'Error when writing to' odsn\n          return 8\n        end\n\n      \"free f(\"dynlib\")\"\n    end\n  else\n    if t_rex = 'SYSTEM'  |,                            /* Regina      */\n       t_rex = 'COMMAND' |,                            /* PC DOS 7    */\n       t_rex = 'CMD' then                              /* Object REXX */\n      do\n        htmlfile = space(idsn'.t'translate(time(), ' ', ':')'.html', 0)\n\n        do queued()\n          parse pull line\n          call lineout htmlfile, line\n        end\n      end\nreturn 0\n\n/***********************************************************************\n* XFER_AND_SHOW_HTML:                                                  *\n*                                                                      *\n* Transfer the html file to the PC via ISPF Workstation Agent and      *\n* start the application associated with extension .html                *\n***********************************************************************/\nxfer_and_show_html:\n  parse value data with sep ',' dir_pc (sep),\n                                htmlfile (sep),\n                                odsn (sep),\n                                ipaddr (sep),\n                                start_browser\n\n  /*********************************************************************\n  * Format the name of the html file for PC                            *\n  *********************************************************************/\n  if right(dir_pc, 2) \\= ':\\' then\n    dir_pc = strip(dir_pc, 'T', '/') || '/'\n\n  w = dir_pc || htmlfile\n\n  connected     = 0\n  was_connected = 0\n\n  /*********************************************************************\n  * Is user already connected to workstation?                          *\n  *********************************************************************/\n  \"ispexec vget zwscon shared\"\n  if rc     = 8 |,\n     zwscon = '' then\n    do\n      was_connected = 0\n\n      /*****************************************************************\n      * Start connection and check that we're really connected         *\n      *****************************************************************/\n      title  = strip(left(htmlfile, 64))\n\n      /*****************************************************************\n      * WSCON always returns rc 8 when a member has been opened in     *\n      * edit mode immediately before the WSCON service. So this        *\n      * sequence of commands is only there to be on the safe side ;-)  *\n      * Code from Stefan Brech via ISPF-L list                         *\n      *****************************************************************/\n      zedlmsg = ''\n      zedsmsg = ''\n      \"ispexec control display lock\"\n      \"ispexec display msg(isrz000)\"\n\n      \"ispexec wscon ip(ipaddr) \"     ||,\n                    \"title(title) \"   ||,\n                    \"codepage(1140) \" ||,\n                    \"charset(0695) \"  ||,\n                    \"noguidsp \"       ||,\n                    \"panel(onerror)\"\n\n      if rc = 0 then\n        connected = 1\n    end\n  else\n    do\n      connected     = 1\n      was_connected = 1\n    end\n\n  /*********************************************************************\n  * Issue message if still no connection exists                        *\n  *********************************************************************/\n  if connected = 0 then\n    \"ispexec setmsg msg(ispp605)\"\n  else\n    do\n      h = odsn\n\n      /*****************************************************************\n      * Put filenames in the ISPF pool & transfer file to PC           *\n      *****************************************************************/\n      \"ispexec filexfer host(h) ws(w) to(ws) text\"\n\n      /*****************************************************************\n      * and optionally start the corresponding browser                 *\n      *****************************************************************/\n      if translate(left(start_browser, 1)) = 'Y' then\n        \"ispexec select wscmd(\"w\") modeless min invis\"\n\n      /*****************************************************************\n      * Only close connection to the workstation if it hadn't been     *\n      * estabished before this exec                                    *\n      *****************************************************************/\n      if was_connected = 0 then\n        \"ispexec wsdiscon\"\n    end\nreturn 0\n\n/***********************************************************************\n* GENERATE_ISPF_CSS:                                                   *\n*                                                                      *\n* Generate the embedded CSS for the output file                        *\n***********************************************************************/\ngenerate_ispf_css:\n  signal get_ispf_css\n\n/*\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" +\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" >\n<!-- *|*FOOTER+\n*|* -->\n<head>\n<title>*|*TITLE+\n*|*</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />\n<style type=\"text/css\">\nbody\n  {\n   margin:0px;\n   overflow:hidden;\n   background-color:black;\n   color:lime;\n   font:normal 48px/52px \"FonT\";\n  }\n\n.floatleft\n  {\n   float:left;\n  }\n\n.rightheader\n  {\n   float:right;\n   text-align:right;\n  }\n\n.ul\n  {\n   text-decoration: underline;\n  }\n\n#headers\n  {\n   position:absolute;\n   top:0px;\n   left:0px;\n   width:500px;\n  }\n\n#extra\n  {\n   width:100%;\n   overflow:hidden;\n  }\n\n#fixed\n  {\n   width:100%;\n   overflow:hidden;\n  }\n\n#leftarea\n  {\n   float:left;\n   overflow:hidden;\n   height:200px;\n  }\n\n#mainarea\n  {\n   position:relative;\n   overflow:scroll;\n   height:2000px;\n   white-space:pre;\n   color:lime;\n  }\n\n#colto, #colfrom\n  {\n   color:aqua;\n  }\n\n#topofdata\n  {\n   position:absolute;\n   white-space:pre;\n   color:#7890f0;\n  }\n\n#bottomofdata\n  {\n   position:relative;\n   white-space:pre;\n   color:#7890f0;\n  }\n\n#measure\n  {\n   position:absolute;\n   top:1px;\n   visibility:hidden;\n  }\n\n#scrolltest\n  {\n   position:absolute;\n   overflow:hidden;\n   visibility:hidden;\n  }\n\nem             { font-style:normal; }\nem.b           { color:#7890f0; }\nem.f           { color:fuchsia; }\nem.l           { color:lime;    }\nem.r           { color:red;     }\nem.t           { color:aqua;    }\nem.w           { color:white;   }\nem.y           { color:yellow;  }\n\n</style>\n</head>\n<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n- - -->\n<!-- Copyright (C) 2007-2009 Small Office Solutions Ltd.               +\n    -->\n<!--               http://www.smallofficesolutions.co.uk               +\n    -->\n<!--                                                                   +\n    -->\n<!-- This program is free software; you can redistribute it and/or modi+\nfy  -->\n<!-- it under the terms of the GNU General Public License as published +\nby  -->\n<!-- the Free Software Foundation; either version 3 of the License, or +\n    -->\n<!-- (at your option) any later version.                               +\n    -->\n<!--                                                                   +\n    -->\n<!-- This program is distributed in the hope that it will be useful,   +\n    -->\n<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of    +\n    -->\n<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     +\n    -->\n<!-- GNU General Public License for more details.                      +\n    -->\n<!--                                                                   +\n    -->\n<!-- You should have received a copy of the GNU General Public License +\n    -->\n<!-- along with this program. If not, see <http://www.gnu.org/licenses/+\n>.  -->\n<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n- - -->\n\n<body onload=\"setwidth();\">\n <div id=\"scrolltest\">aaaaaaaaaaaaaaaaaaaaaa</div>\n <div id=\"measure\">1234567890&nbsp;This&nbsp;is&nbsp;a&nbsp;fixed&nbsp;+\n80&nbsp;characters&nbsp;width:&nbsp;do&nbsp;not&nbsp;change&nbsp;this+\n&nbsp;text!&nbsp;4567890</div>\n <div id=\"extra\">\n  <em class=\"ispfwhite\">&nbsp;&nbsp;&nbsp;<span class=\"ul\">F</span>ile+\n&nbsp;&nbsp;<span class=\"ul\">E</span>dit&nbsp;&nbsp;E<span class=\"ul\">d+\n</span>it_Settings&nbsp;&nbsp;<span class=\"ul\">M</span>enu&nbsp;&nbsp;+\n<span class=\"ul\">U</span>tilities&nbsp;&nbsp;<span class=\"ul\">C</span>+\nompilers&nbsp;&nbsp;<span class=\"ul\">T</span>est&nbsp;&nbsp;+\n<span class=\"ul\">H</span>elp</em><br />\n  <em class=\"ispfblue\">&nbsp;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+\n&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+\n&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+\n&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+\n&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+\n&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+\n&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+\n&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+\n&mdash;&mdash;&mdash;</em><br />\n </div>\n <div id=\"fixed\">\n  <span class=\"floatleft\"><em class=\"ispfturq\">&nbsp;VIEW&nbsp;&nbsp;+\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*|*DSN+\n*|*</em></span>\n  <br /><span style=\"white-space:nowrap;\"><em class=\"ispflime\">+\n&nbsp;Command ===></em> <em class=\"ispfturq\">+\n_________________________________________________</em></span>\n  <span id=\"headers\" class=\"rightheader\"><em class=\"ispflime\"><br />+\n<br />Columns</em> <span id=\"colfrom\">00001</span>&nbsp;<span id=+\n\"colto\">00072</span><br /><em class=\"ispflime\"> Scroll ===></em>&nbsp;+\n<em class=\"ispfturq\"><span class=\"ul\">CSR&nbsp;</span></em></span>\n </div>\n <div id=\"leftarea\">\n  <em class=\"ispfred\">&nbsp;******<br /> </em>\n  <em class=\"ispfblue\">\n  <script type=\"text/javascript\">\n//<!\u00ddCDATA\u00dd\n    seq = *|*SEQ+\n*|*\n    var a = \u00dd\u00a8;\n\n    if (seq <= 9999)\n    {\n      z = '00<br />&nbsp;'\n      for (var i = 0; i < seq; i++)\n        a\u00ddi\u00a8 = (i+10001).toString().substr(1);\n      document.write('&nbsp;'+a.join(z)+'00<br />');\n    }\n    else\n    {\n      z = '0<br />&nbsp;'\n      for (var i = 0; i < seq; i++)\n        a\u00ddi\u00a8 = (i+100001).toString().substr(1);\n      document.write('&nbsp;'+a.join(z)+'0<br />');\n    }\n//\u00a8\u00a8>\n  </script>\n  </em>\n  <em class=\"ispfred\">&nbsp;******</em>\n </div>\n<div class=\"floatleft\">&nbsp;</div>\n<div id=\"mainarea\"><span id=\"topofdata\">+\n***************************** Top of Data +\n******************************</span><!-- Formatted data follows; do +\nNOT break this line apart or insert additional line breaks..   -->\n*|*DATA+\n*|*\n<span id=\"bottomofdata\">**************************** Bottom of Data +\n****************************</span>\n</div>\n<script type=\"text/javascript\" defer=\"defer\">\n//<!\u00ddCDATA\u00dd\n  var fs2=0;  // the actual fs2 of the fixed-width text.\n  var fs=0;   // the actual number of pixels width of each character.\n  var ss=0;   // dimensions of a browser scrollbar (note: ss will be +\nNEGATIVE)\n\n  function ge(x) {return document.getElementById(x);}\n  function gs(x) {return document.getElementById(x).style;}\n  function setwidth() { // do initial sizing calculations and layout\n\n  var thisContainer = document.getElementById('mainarea');\n  if (thisContainer)\n    {\n     var onClickAction = 'scrollmain();';\n     thisContainer.onscroll = new Function(onClickAction);\n    }\n\n  ss=ge('scrolltest').offsetHeight;                    // get the +\nheight of a single line div without scrollbars\n  gs('scrolltest').overflow='scroll';                  // allow the +\nscrollbars to show\n  ss-=ge('scrolltest').offsetHeight;                   // find the +\ndifference (i.e. the height of a scrollbar - assume height of +\nhorizontal bar = width of vertical bar!\n\n  var wh=window.innerHeight?window.innerHeight:document.documentElement+\n.clientHeight?document.documentElement.clientHeight:document.body.+\nclientHeight;\n  var ww=window.innerWidth?window.innerWidth:document.documentElement.+\nclientWidth?document.documentElement.clientWidth:document.body.+\nclientWidth;\n      // determine the actual window inner height+width\n  fs2=Math.floor(ww/40);                               // \"FonT\" +\nis twice as high as it is wide; we need 80 columns; this is an +\napproximation only\n  while ((Math.floor(ge('measure').scrollWidth) > Math.floor(ww+ss)) +\n&& fs2>1) // iteratively reduce fs2 until 80 columns fits on-screen\n    {\n    fs2-=1;document.body.style.font='normal '+fs2+'px/'+(fs2+4)++\n'px \"FonT\"';\n    gs('measure').font='normal '+fs2+'px/'+(fs2+4)+'px \"FonT\"';\n    }\n  gs('fixed').width=ge('measure').scrollWidth+'px';    // set the +\nwidth of the header area\n  fs=ge('measure').scrollWidth / 80;                   // get the +\nwidth of a character\n  gs('headers').height=(4+fs2)+'px';                   // limit the +\nheight of the headers\n  gs('fixed').height=(8+(2*fs2))+'px';                 // fix the +\nheight of the header at just two rows\n  gs('fixed').width=ge('measure').scrollWidth+'px';\n  gs('headers').width=gs('fixed').width;\n  gs('mainarea').width=(ge('measure').scrollWidth-(fs*8)-ss)+'px'; +\n// set the width of the main area\n  gs('mainarea').height=(8+(wh+ss)-(6*fs2))+'px';      // set the main +\narea height\n  gs('leftarea').height=(8+(wh+ss)-(6*fs2)+ss)+'px';   // set the left +\narea height\n  gs('measure').display='none';                        // don't +\ndisplay our 80-character measure\n  gs('scrolltest').display='none';                     // don't +\ndisplay the scrollbar measuring div\n  scrollmain();                                        // set up the +\ninitial column numbers\n  ge('mainarea').scrollLeft=0;\n  }\n\n  function scrollmain() { // update the column indicators\n  var main=ge('mainarea');\n  var col='0000'+Math.floor((fs+(fs/2)+main.scrollLeft)/fs);   // get +\nthe leftmost column number\n  ge('colfrom').innerHTML=col.substr(col.length-5,5);          // trim +\nit and display\n  col='0000'+Math.floor((Math.floor(((fs/2)+main.scrollLeft)/fs)+Math.+\nfloor((Math.ceil(main.style.width.replace('px',''))+ss)/fs)));\n  ge('colto').innerHTML=col.substr(col.length-5,5);            // trim +\nand display the rightmost column number\n  ge('leftarea').scrollTop=main.scrollTop;                     // +\nscroll the left area in sync with the main area\n  gs('topofdata').left=main.scrollLeft+'px';                   // +\nreposition the top of data bar\n  gs('bottomofdata').left=main.scrollLeft+'px';                // +\nreposition the bottom of data bar\n  }\n//\u00a8\u00a8>\n</script>\n</body>\n</html>\n*/\n\nget_ispf_css:\n  out = ''\n\n  do i = sigl + 3 while pos('*' || '/', sourceline(i)) = 0\n    l = strip(left(sourceline(i), 72), 'T')\n\n    if pos('\"FonT\"', l) \\= 0 then\n      do\n        parse value l with pre '\"FonT\"' post\n        l = pre'\"'htmlfont'\"'post\n      end\n\n    if right(l, 1) = '+' then\n      out = out || substr(l, 1, length(l) - 1)\n    else\n      out = out || l || !br\n  end\nreturn out\n\n/***********************************************************************\n* MONITOR:                                                             *\n*                                                                      *\n* Display progress/status messages                                     *\n***********************************************************************/\nmonitor:\n  parse value data with zwinttl ',' text\n\n  if sysvar('SYSENV') = 'BACK' then\n    do\n      say text\n      return 0\n    end\n\n  content = ' 'text\n  shadow  = copies('W', 77)\n\n  \"ispexec control display lock\"\n  \"ispexec addpop  row(14) column(1)\"\n  \"ispexec display panel(monpanel)\"\n  \"ispexec control display restore\"\n\n  zwinttl = ''\nreturn 0\n\n/***********************************************************************\n* GET_OPTIONS:                                                         *\n*                                                                      *\n* This procedure gets the output options for the various EHIxxx macros *\n***********************************************************************/\nget_options:\n  parse value data with sep ',' macro\n\n  /*********************************************************************\n  * Set up defaults                                                    *\n  *********************************************************************/\n  viewhtml = 'YES'        /* View html output after generating?       */\n  xferwsa  = 'NO'         /* Transfer html to PC via ISPF WSA?        */\n  startff  = 'NO'         /* Start browser associated with .html?     */\n  htmltype = 'ISPF'       /* Reproduce very fancy ISPF Edit format    */\n  htmltype = 'STD'        /* Plain HTML                               */\n  htmlfont = 'Courier New'/* Default font                             */\n  progress = 100          /* Number of lines between 'Say' statements */\n\n  pcdir    = 'c:\\temp'    /* PC directory where html should be stored */\n\n  /*********************************************************************\n  * Override defaults for specific macros\n  *********************************************************************/\n  select\n    when macro = 'EHIASM' then\n      do\n        progress = 100\n      end\n\n    when macro = 'EHICOBOL' then\n      do\n        progress = 500\n      end\n\n    when macro = 'EHIJCL' then\n      do\n        progress = 25\n      end\n\n    when macro = 'EHINONE' then\n      do\n        progress = 500\n      end\n\n    when macro = 'EHIPLI' then\n      do\n        progress = 500\n      end\n\n    when macro = 'EHIREXX' then\n      do\n        progress = 100\n      end\n\n    when macro = 'EHISUPC' then\n      do\n        progress = 1000\n      end\n\n    otherwise nop\n  end\n\n  \"ispexec vget (ehixmit) shared\"\n/*!*/\n  if rc = 0 then\n    do\n      popup    = 0\n      progress = 0\n      viewhtml = 'NO'\n    end\n/*!*/\n\n  if popup          &,\n     t_rex  = 'TSO' &,\n     aspace = 'ISPF' then\n    do\n      call load_dynlib\n\n      \"ispexec libdef ispplib library id(\"dynlib\") stack\"\n      \"ispexec addpop row(10) column(-1)\"\n      \"ispexec vget (ipaddr) profile\"\n\n      do until rc \\= 0\n        \"ispexec display panel(\"moi\")\"\n      end\n\n      \"ispexec vput (ipaddr) profile\"\n      \"ispexec rempop\"\n    end\n\nreturn viewhtml || sep ||,\n       xferwsa  || sep ||,\n       startff  || sep ||,\n       htmltype || sep ||,\n       progress || sep ||,\n       pcdir    || sep ||,\n       htmlfont || sep ||,\n       ipaddr   || sep\n\n/***********************************************************************\n* LOAD_DYNLIB:                                                         *\n*                                                                      *\n* This procedure loads the via EPANQ generated panel, message and      *\n* skeleton code into a library. Note that there is no reason to use    *\n* different libraries for any of these objects, as long as they are    *\n* named differently|                                                   *\n***********************************************************************/\nload_dynlib:\ndynlib = 'dyn'random(99999)\nalloc  = \"alloc fi(\"dynlib\") rtdsn(sysdsname) \"   ||,\n                   \"lrecl(80) blksize(0) dir(5) \" ||,\n                   \"new delete reuse \"            ||,\n                   \"space(1,1)\"\nrc = bpxwdyn(alloc)\n\nif rc = 0 then\n  ispdyn = sysdsname\nelse\n  ispdyn = 'NOT FOUND'\n\n\"newstack\"\n\nmember = moi\n\nqueue ')attr default(' ||,\n      x2c(010203) ||,\n      ')'\nqueue '/' || '***************************************************' ||,\n      '*******************' || '/'\nqueue '/' || '*              (C) Copyright Robert AH Prins, 2007-' ||,\n      '2016              *' || '/'\nqueue '/' || '***************************************************' ||,\n      '*******************' || '/'\nqueue '/' || '*  ------------------------------------------------' ||,\n      '----------------  *' || '/'\nqueue '/' || '* | Date       | By   | Remarks                    ' ||,\n      '                | *' || '/'\nqueue '/' || '* |------------+------+----------------------------' ||,\n      '----------------| *' || '/'\nqueue '/' || '* |            |      |                            ' ||,\n      '                | *' || '/'\nqueue '/' || '* |------------+------+----------------------------' ||,\n      '----------------| *' || '/'\nqueue '/* | 2016-11-18 | RAHP | - remove ''EDIT'' html option    ' ||,\n      '            | */'\nqueue '/* |            |      | - always use ''html'' as extensio' ||,\n      'n           | */'\nqueue '/' || '* |            |      | - only \"Courier New\" font  ' ||,\n      '                | *' || '/'\nqueue '/' || '* |------------+------+----------------------------' ||,\n      '----------------| *' || '/'\nqueue '/' || '* | 2012-06-25 | RAHP | Add IP address             ' ||,\n      '                | *' || '/'\nqueue '/' || '* |------------+------+----------------------------' ||,\n      '----------------| *' || '/'\nqueue '/* | 2009-07-02 | RAHP | - make short CSS ''em'' colors th' ||,\n      'e default   | */'\nqueue '/' || '* |            |      | - allow progress interval u' ||,\n      'p to 5000       | *' || '/'\nqueue '/' || '* |------------+------+----------------------------' ||,\n      '----------------| *' || '/'\nqueue '/' || '* | 2009-04-01 | RAHP | Allow selection of font    ' ||,\n      '                | *' || '/'\nqueue '/' || '* |------------+------+----------------------------' ||,\n      '----------------| *' || '/'\nqueue '/' || '* | 2009-02-09 | RAHP | Allow other extension      ' ||,\n      '                | *' || '/'\nqueue '/' || '* |------------+------+----------------------------' ||,\n      '----------------| *' || '/'\nqueue '/' || '* | 2007-09-24 | RAHP | Initial version            ' ||,\n      '                | *' || '/'\nqueue '/' || '* |------------+------+----------------------------' ||,\n      '----------------| *' || '/'\nqueue '/' || '***************************************************' ||,\n      '*******************' || '/'\nqueue '/' || '* Panel - EHISUPP                                  ' ||,\n      '                  *' || '/'\nqueue '/' || '*                                                  ' ||,\n      '                  *' || '/'\nqueue '/' || '* This panel is used by the EHIxxxx edit macros to ' ||,\n      'display a number  *' || '/'\nqueue '/' || '* of user modifyable settings, such as the option t' ||,\n      'o transfer the    *' || '/'\nqueue '/' || '* generated HTML to the PC using the WSA, to displa' ||,\n      'y it, to select   *' || '/'\nqueue '/' || '* the format of the output, to set the progress ind' ||,\n      'icator and to     *' || '/'\nqueue '/' || '* set the PC directory.                            ' ||,\n      '                  *' || '/'\nqueue '/' || '***************************************************' ||,\n      '*******************' || '/'\nqueue ' 04 type(absl) ge(on)'\nqueue ' 05 type(pt)'\nqueue ' 08 type(ch)'\nqueue ' 09 type(fp)'\nqueue ' 0a type(nt)'\nqueue ' 0c type(nt) skip(on)'\nqueue ' 0b type(ab)'\nqueue ' 11 type(sac)'\nqueue ' 13 type(nef) padc(user)'\nqueue ' 19 type(dt)'\nqueue ' 22 type(wasl) skip(on) ge(on)'\nqueue ' 26 type(nef) caps(on) padc(user)'\nqueue ' 27 area(scrl) extend(on)'\nqueue ' 28 type(grpbox)'\nqueue ' 29 type(cef) padc(user) ckbox(on)'\nqueue ' 2a type(nef) caps(off) padc(user)'\nqueue ' '\nqueue ')body window(77,14) expand(||)'\nqueue x2c(05) ||,\n      ' | |' moi '- Processing defaults for' macro '| |'\nqueue x2c(09) ||,\n      'Command ===>' ||,\n      x2c(26) ||,\n      'zcmd                                                      ' ||,\n      '    ' ||,\n      x2c(0A) ||,\n      ''\nqueue ' '\nqueue x2c(09) ||,\n      'View HTML  . . . .' ||,\n      x2c(26) ||,\n      'z  ' ||,\n      x2c(0A11) ||,\n      '     (Yes/No)'\nqueue x2c(09) ||,\n      'HTML type  . . . .' ||,\n      x2c(26) ||,\n      'z   ' ||,\n      x2c(0A11) ||,\n      '    (STD/ISPF)'\nqueue ' '\nqueue x2c(09) ||,\n      'Progress . . . . .' ||,\n      x2c(26) ||,\n      'z   ' ||,\n      x2c(0A11) ||,\n      '    (Progress indicator)'\nqueue ' '\nqueue x2c(09) ||,\n      'xfer WSA . . . . .' ||,\n      x2c(26) ||,\n      'z  ' ||,\n      x2c(0A11) ||,\n      '     (Yes/No)'\nqueue x2c(09) ||,\n      'IP address . . . .' ||,\n      x2c(26) ||,\n      'z              ' ||,\n      x2c(0A) ||,\n      ''\nqueue x2c(09) ||,\n      'PC directory . . .' ||,\n      x2c(2A) ||,\n      'z                                                       ' ||,\n      x2c(0A) ||,\n      ''\nqueue x2c(09) ||,\n      'Start browser  . .' ||,\n      x2c(26) ||,\n      'z  ' ||,\n      x2c(0A11) ||,\n      '     (Yes/No)'\nqueue ' '\nqueue x2c(09) ||,\n      'Press' ||,\n      x2c(05) ||,\n      'ENTER' ||,\n      x2c(09) ||,\n      'to proceed or' ||,\n      x2c(05) ||,\n      'END' ||,\n      x2c(09) ||,\n      'to accept defaults'\nqueue ')init'\nqueue '  .zvars = ''(viewhtml +'\nqueue '             htmltype +'\nqueue '             progress +'\nqueue '             xferwsa +'\nqueue '             ipaddr +'\nqueue '             pcdir +'\nqueue '             startff)'''\nqueue ' '\nqueue '  &rtn = PFK(RETURN)'\nqueue ' '\nqueue '  if (&viewhtml = &z)'\nqueue '    &viewhtml = ''Yes'''\nqueue '  if (&htmltype = &z)'\nqueue '    &htmltype = ''STD'''\nqueue ' '\nqueue '  if (&progress = &z)'\nqueue '    &progress = 100'\nqueue ' '\nqueue '  if (&xferwsa = &z)'\nqueue '    &xferwsa  = ''No'''\nqueue '  if (&pcdir = &z)'\nqueue '    &pcdir    = ''c:\\temp'''\nqueue '  if (&startff = &z)'\nqueue '    &startff  = ''No'''\nqueue ' '\nqueue '  &htmlfont = ''Courier New'''\nqueue ')proc'\nqueue '  &pfkey = .pfkey'\nqueue ' '\nqueue '  if (&rtn \u00ac= &z)'\nqueue '    if (&pfkey = &rtn)'\nqueue '      .resp = END'\nqueue '      &resp = end'\nqueue ' '\nqueue '  if (.resp = END)'\nqueue '    &resp = END'\nqueue ' '\nqueue '  if (.resp \u00ac= END)'\nqueue '    &viewhtml = trans(trunc(&viewhtml, 1)'\nqueue '                      N,NO'\nqueue '                      *,YES)'\nqueue '    ver(&viewhtml nb list ''YES'' ''NO'')'\nqueue ' '\nqueue '    &htmltype = trans(trunc(&htmltype, 1)'\nqueue '                      I,ISPF'\nqueue '                      *,STD)'\nqueue '    ver(&htmltype nb list STD,ISPF)'\nqueue ' '\nqueue '    ver(&progress nb num)'\nqueue ' '\nqueue '    if (&progress = 0)'\nqueue '      &progress = 100'\nqueue ' '\nqueue '    if (&progress > 5000)'\nqueue '      &progress = 5000'\nqueue ' '\nqueue '    &xferwsa = trans(trunc(&xferwsa, 1)'\nqueue '                     Y,YES'\nqueue '                     *,NO)'\nqueue '    ver(&xferwsa  nb list ''YES'' ''NO'')'\nqueue ' '\nqueue '    if (&xferwsa = ''YES'')'\nqueue '      ver(&ipaddr nb ipaddr4)'\nqueue ' '\nqueue '    if (&pcdir = &z)'\nqueue '      &pcdir = ''c:\\temp'''\nqueue ' '\nqueue '    &startff = trans(trunc(&startff, 1)'\nqueue '                     Y,YES'\nqueue '                     *,NO)'\nqueue '    ver(&startff  nb list ''YES'' ''NO'')'\nqueue ' '\nqueue '    refresh(*)'\nqueue ' '\nqueue '    if (.msg \u00ac= '' '')'\nqueue '      .resp = ENTER'\nqueue ' '\nqueue '    if (.msg = '' '')'\nqueue '      .resp = END'\nqueue '      &resp = OK'\nqueue ')end'\n\ncall put_object\n\n\"newstack\"\n\nmember = 'MONPANEL'\n\nqueue ')attr'\nqueue '/' || '***************************************************' ||,\n      '*******************' || '/'\nqueue '/' || '*  ------------------------------------------------' ||,\n      '----------------  *' || '/'\nqueue '/' || '* | Date       | By   | Remarks                    ' ||,\n      '                | *' || '/'\nqueue '/' || '* |------------+------+----------------------------' ||,\n      '----------------| *' || '/'\nqueue '/' || '* |            |      |                            ' ||,\n      '                | *' || '/'\nqueue '/' || '* |------------+------+----------------------------' ||,\n      '----------------| *' || '/'\nqueue '/' || '* | 2009-07-27 | RAHP | Initial version            ' ||,\n      '                | *' || '/'\nqueue '/' || '* |------------+------+----------------------------' ||,\n      '----------------| *' || '/'\nqueue '/' || '***************************************************' ||,\n      '*******************' || '/'\nqueue '/' || '* Panel - MONPANEL                                 ' ||,\n      '                  *' || '/'\nqueue '/' || '*                                                  ' ||,\n      '                  *' || '/'\nqueue '/' || '* This is a one-line panel that can be used to send' ||,\n      ' status messages  *' || '/'\nqueue '/' || '* to the user and receive limited input.           ' ||,\n      '                  *' || '/'\nqueue '/' || '***************************************************' ||,\n      '*******************' || '/'\nqueue '  | area(dynamic) scroll(on) extend(on)'\nqueue '  W type(char) color(white)'\nqueue ')body window(77,1)'\nqueue '|content,shadow                                           ' ||,\n      '                  |'\nqueue ')init'\nqueue ')reinit'\nqueue '  refresh(*)'\nqueue ')proc'\nqueue '  &cur = .cursor'\nqueue '  &pos = .csrpos'\nqueue '  &pfp = .pfkey'\nqueue ')end'\n\nput_object:\n  tfil = 'tfil'random(9999)\n\n  \"alloc f(\"tfil\") da('\"ispdyn\"(\"member\")') shr reu\"\n  \"execio\" queued() \"diskw \"tfil\" (finis\"\n  \"free f(\"tfil\")\"\n\n  \"delstack\"\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EHIXMIT": {"ttr": 5380, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x02\\x01\\x162\\x9f\\x01\\x166\\x1f!\\x04\\x01\\x8f\\x00\\x00\\x00\\x00\\xd7\\xd9\\xc9\\xd5\\xd6@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2016-11-24T00:00:00", "modifydate": "2016-12-26T21:04:02", "lines": 399, "newlines": 0, "modlines": 0, "user": "PRINO"}, "text": "/* REXX exec to build EHI.EXEC from my own exec library               */\n/*** trace ?r ***************************************************** \\| *\n*               (C) Copyright Robert AH Prins, 2016-2016               *\n************************************************************************\n*  ------------------------------------------------------------------  *\n* | Date       | By   | Remarks                                      | *\n* |------------+------+----------------------------------------------| *\n* |            |      |                                              | *\n* |------------+------+----------------------------------------------| *\n* | 2016-12-26 | RAHP | Added EHIPAN                                 | *\n* |------------+------+----------------------------------------------| *\n* | 2016-11-24 | RAHP | Initial version - Changed version of MAKECBT | *\n* |------------+------+----------------------------------------------| *\n************************************************************************\n* EHIXMIT is a REXX exec to extract the relevant members from my own   *\n* exec library to the latest version of my EHIEXEC library.            *\n************************************************************************\n* Send questions, suggestions and/or bug reports to:                   *\n*                                                                      *\n* robert@prino.org / robert.ah.prins@gmail.com                         *\n*                                                                      *\n* Robert AH Prins                                                      *\n* Taboralaan 46                                                        *\n* 8400 Oostende                                                        *\n* Belgium                                                              *\n************************************************************************\n* This program is free software: you can redistribute it and/or        *\n* modify it under the terms of the GNU General Public License as       *\n* published by the Free Software Foundation, either version 3 of       *\n* the License, or (at your option) any later version.                  *\n*                                                                      *\n* This program is distributed in the hope that it will be useful,      *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of       *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *\n* GNU General Public License for more details.                         *\n*                                                                      *\n* You should have received a copy of the GNU General Public License    *\n* along with this program. If not, see <http://www.gnu.org/licenses/>  *\n***********************************************************************/\nparse source source\nparse value source with . . moi .\n\n/***********************************************************************\n* Get the date                                                         *\n***********************************************************************/\nnow  = date('S')\nnows = left(now, 4)'/'substr(now, 5, 2)'/'right(now, 2)\nnowd = left(now, 4)'-'substr(now, 5, 2)'-'right(now, 2)\n\n/***********************************************************************\n* Check for pseudo-recursive invocation as edit macro                  *\n***********************************************************************/\n\"ispexec vget (rexxparm) shared\"\n\nif rc = 0 then\n  do\n    \"ispexec verase (rexxparm) shared\"\n\n    \"isredit macro\"\n    \"isredit level 0\"\n\n    select\n      when rexxparm = '$$$INDEX' then\n        do\n          l = '$$$INDEX - This member, the index of PRINO.EHI.EXEC'\n          \"isredit line 1 = (L)\"\n\n          l = '$$README - Disclaimer'\n          \"isredit line_before 1 = (L)\"\n\n          \"isredit x all\"\n          \"isredit f '$$README' 1 first\"\n          \"isredit f 'GETVAR'   1 first\"\n\n          call get_members\n\n          do m = 1 by 1 while exec.m \\= -1\n            \"isredit f '\"exec.m\"' 1 first\"\n          end\n\n          \"isredit del x all\"\n          \"isredit builtin sort\"\n        end\n\n      otherwise\n        nop\n    end\n\n    \"isredit renum\"\n    \"isredit end\"\n\n    exit\n  end\n\n/***********************************************************************\n* Get my exec library (GETVAR retrieves client-site dependent data)    *\n***********************************************************************/\n$exec = getvar('execRAHP')\n$ehi  = userid()'.EHI.EXEC'\n\n\"ispexec lmerase dataset('\"$ehi\"')\"\n\n\"alloc f(ehi) da('\"$ehi\"') \" ||,\n             \"new reu \" ||,\n             \"space(30,30) dir(10) release \" ||,\n             \"recfm(f b) lrecl(80) blksize(0) dsntype(pds)\"\n\n/***********************************************************************\n* Copy selected members                                                *\n***********************************************************************/\ncall get_members\n\ndrop exec\ndrop ehi\n\n\"ispexec lminit dataid(exec) dataset('\"$exec\"') enq(shr)\"\n\"ispexec lminit dataid(ehi)  dataset('\"$ehi\"') enq(shr)\"\n\ndo m = 1 by 1 while exec.m \\= -1\n  \"ispexec lmcopy fromid(\"exec\") frommem(\"exec.m\") \" ||,\n                 \"todataid(\"ehi\") replace\"\nend\n\n\"ispexec lmfree dataid(\"exec\")\"\n\"ispexec lmfree dataid(\"ehi\")\"\n\n/***********************************************************************\n* Add the disclaimer and a sanitised 'GETVAR'                          *\n***********************************************************************/\ncall add_disclaimer\ncall add_getvar\n\n/***********************************************************************\n* Update the ISPF statistics for selected members                      *\n***********************************************************************/\ndrop ehi\n\n\"ispexec lminit dataid(\"ehi\") ddname(ehi) enq(shrw)\"\n\"ispexec lmopen dataid(\"ehi\") option(input)\"\n\n/***********************************************************************\n* Update the $$$INDEX member                                           *\n***********************************************************************/\nrexxparm = '$$$INDEX'\n\"ispexec vput (rexxparm) shared\"\n\"ispexec edit dataid(\"ehi\") member($$$INDEX) macro(\"moi\")\"\n\nstats = \"version(1) \"      ||,\n        \"modlevel(0) \"     ||,\n        \"modtime(00:00) \"  ||,\n        \"created4(\"nows\") \" ||,\n        \"moddate4(\"nows\") \" ||,\n        \"initsize(\"0\") \"   ||,\n        \"modrecs(\"0\") \"    ||,\n        \"user(prino)\"\n\n\"ispexec lmmstats dataid(\"ehi\") member($$$INDEX) \" || stats\n\"ispexec lmmstats dataid(\"ehi\") member($$README) \" || stats\n\"ispexec lmmstats dataid(\"ehi\") member(GETVAR) \"   || stats\n\n\"ispexec lmclose dataid(\"ehi\")\"\n\ntrap = outtrap('zap.')\n\"transmit TO.\"userid() \"da('\"$ehi\"') \"                       ||,\n                       \"outdsname('\"$ehi\".xmit') pds nolog \" ||,\n                       \"msgdsname('\"$ehi\"($$README)') \"      ||,\n                       \"nonotify sysout(z)\"\ntrap = outtrap('OFF')\n\n\"free f(ehi)\"\n\n\"ispexec lmerase dataset('\"$ehi\"')\"\n\n/***********************************************************************\n* Remove my userid and traces of current site                          *\n***********************************************************************/\n\"alloc f(xmit) da('\"$ehi\".xmit') reu\"\n\n\"execio 10 diskr xmit (stem inrec. finis\"\n\n/***********************************************************************\n* All data to be modified can be found before the INMR03 record        *\n***********************************************************************/\ns = ''\ndo r = 1 to inrec.0 until pos('INMR03', inrec.r) \\= 0\n  s = s || inrec.r\nend\n\n/***********************************************************************\n* Round times look so much nicer...                                    *\n***********************************************************************/\np = pos(date('S'), s)\nif p \\= 0 then\n  s = overlay(date('S')'120000', s, p)\n\n/***********************************************************************\n* Write back all changed data                                          *\n***********************************************************************/\ndo q = 1 to r\n  \"execio 1 diskru xmit\" q\n  pull zap\n\n  out = substr(s, 1 + 80 * (q - 1), 80)\n\n  push out\n  \"execio 1 diskw xmit (finis\"\nend\n\n\"free f(xmit)\"\n\ndo m = 1 by 1 while ehi.m \\= -1\n  \"ispexec vput (ehixmit) shared\"\n  \"ispexec view dataset('\"$exec\"(\"ehi.m\")') macro(ehirexx)\"\n  \"ispexec verase (ehixmit) shared\"\nend\nexit\n\n/***********************************************************************\n* ADD_DISCLAIMER:                                                      *\n*                                                                      *\n* Add the disclaimer to the dataset                                    *\n***********************************************************************/\nadd_disclaimer:\n  signal get_dis_text\n\n/*\n                          D I S C L A I M E R\n                          -------------------\n        This package is Copyright (C) Robert AH Prins 2007-$$$$\n\n  The REXX execs in this PDS are free software: you can redistribute\n  them and/or modify them under the terms of the GNU General Public\n  License as published by the Free Software Foundation, either version\n  3 of the License, or (at your option) any later version.\n\n  These REXX execs are distributed in the hope that they will be\n  useful, but WITHOUT ANY WARRANTY; without even the implied warranty\n  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n  General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with these execs. If not, see <http://www.gnu.org/licenses/>\n\n*/\n\nget_dis_text:\n  do i = sigl + 3 while substr(sourceline(i), 1, 2) \\= '*' || '/'\n    dis = left(sourceline(i), 72)\n\n    p = pos('$$$$', dis)\n    if p \\= 0 then\n      dis = overlay(left(date('S'), 4), dis, p, 4)\n\n    queue dis\n  end\n\n  \"alloc f(dis) da('\"$ehi\"($$README)') reu\"\n  \"execio\" queued() \"diskw dis (finis\"\n  \"free f(dis)\"\nreturn\n\n\n/***********************************************************************\n* GET_MEMBERS:                                                         *\n*                                                                      *\n* Build the list of members to process                                 *\n***********************************************************************/\nget_members:\n  exec.   = -1\n  exec.1  = '$$$INDEX'\n  exec.2  = 'EHIASM'\n  exec.3  = 'EHICOBOL'\n  exec.4  = 'EHIHELP'\n  exec.5  = 'EHIJCL'\n  exec.6  = 'EHINONE'\n  exec.7  = 'EHIPAN'\n  exec.8  = 'EHIPLI'\n  exec.9  = 'EHIREXX'\n  exec.10 = 'EHISUPC'\n  exec.11 = 'EHISUPP'\n  exec.12 = 'EHIXMIT'\n  exec.13 = 'GPLV3'\n\n  ehi.    = -1\n  ehi.1   = 'EHIASM'\n  ehi.2   = 'EHICOBOL'\n  ehi.3   = 'EHIHELP'\n  ehi.4   = 'EHIJCL'\n  ehi.5   = 'EHINONE'\n  ehi.6   = 'EHIPAN'\n  ehi.7   = 'EHIPLI'\n  ehi.8   = 'EHIREXX'\n  ehi.9   = 'EHISUPC'\n  ehi.10  = 'EHISUPP'\nreturn\n\n/***********************************************************************\n* ADD_GETVAR:                                                          *\n*                                                                      *\n* Add a sanitised 'GETVAR' member to the dataset                       *\n***********************************************************************/\nadd_getvar:\n  signal get_getvar_text\n\n/*\n/% REXX exec to return common values to calling execs                 %/\n/%** trace ?r ***************************************************** \\| *\n*               (C) Copyright Robert AH Prins, 1996-YYYY               *\n************************************************************************\n*  ------------------------------------------------------------------  *\n* | Date       | By   | Remarks                                      | *\n* |------------+------+----------------------------------------------| *\n* |            |      |                                              | *\n* |------------+------+----------------------------------------------| *\n* | YYYY-MM-DD | RAHP | Sanitised version for EHIXMIT                | *\n* |------------+------+----------------------------------------------| *\n* | 1996-05-24 | RAHP | Initial version                              | *\n* |------------+------+----------------------------------------------| *\n************************************************************************\n* GETVAR is a REXX exec to return a number of commonly used values to  *\n* the calling exec.                                                    *\n*                                                                      *\n* The objective of this exec is to make it possible to change the      *\n* commonly used values at one single location, instead of having to    *\n* change the values in every exec that uses them.                      *\n**********************************************************************%/\nparse arg $what\n\n$pref = userid()\n\nselect\n  when $what = 'execRAHP' then return $pref'rahp.exec'\n  when $what = 'XMITNODE' then return 'FROM'\n  otherwise                    return '?'\nend\n*/\n\nget_getvar_text:\n  do i = sigl + 3 while substr(sourceline(i), 1, 2) \\= '*' || '/'\n    dis = translate(left(sourceline(i), 72), '*', '%')\n\n    p = pos('YYYY-MM-DD', dis)\n    if p \\= 0 then\n      dis = overlay(nowd, dis, p, 10)\n\n    p = pos('YYYY', dis)\n    if p \\= 0 then\n      dis = overlay(left(now, 4), dis, p, 4)\n\n    queue dis\n  end\n\n  \"alloc f(dis) da('\"$ehi\"(getvar)') reu\"\n  \"execio\" queued() \"diskw dis (finis\"\n  \"free f(dis)\"\nreturn\n/* Email to myself with release notes **********************************\n* $$NOTE1 **************************************************************\nSubject:    EHILITE execs in ZIP'ed XMIT format - Final pre-chop version\nFrom:       robert@prino.org\nDate:       Wed, 26 Dec 2016 14:01:00 +0200\nTo:         robert@prino.org\n\nHi all,\n\nAttached is the \"final\" version of the ZIPped XMIT file containing the\nEHIxxxx hilite macros. The dataset contains the following members:\n\n$$$INDEX - This member, the index of PRINO.EHI.EXEC\n$$README - Disclaimer\nEHIASM   - Convert assembler to HTML with ISPF HILITE'ing\nEHICOBOL - Convert COBOL to HTML with ISPF HILITE'ing\nEHIHELP  - Common 'help' screen for the EHIJCL/PLI/REXX macros\nEHIJCL   - Convert JCL to HTML with ISPF HILITE'ing\nEHINONE  - Convert any text to HTML as non-HILITE'd ISPF Edit\nEHIPAN   - Convert ISPF panel source to HTML with ISPF HILITE'ing\nEHIPLI   - Convert PL/I to HTML with ISPF HILITE'ing\nEHIREXX  - Convert REXX to HTML with ISPF HILITE'ing\nEHISUPC  - Convert SuperC/Search-For output to HTML with ISPF HILITE'ing\nEHISUPP  - Factored out support routines for the EHIxxxx execs\nGPLV3    - Text of the GPL Version 3\n\nAs you can see, I've added a disclaimer, an index, the text of\nthe GPL V3 and two additional members,\n\nEHIXMIT  - the exec I use to automagically build\n           'PRINO.EHI.XMIT' from my own EXEC library\nGETVAR   - REXX exec to return common values to calling execs\n\nAgain, please give me some feedback - use <robert@prino.org> or\n<robert.ah.prins@gmail.com>\n\nRobert\n--\nRobert AH Prins\nMobile: +32 487 594312\nrobert@prino.org (Private)\nrobert.ah.prins@gmail.com (Private)\n***********************************************************************/\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EHIZIP": {"ttr": 5387, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\t\\x16\\x8f\\x01\\t\\x17?\\x00\\x00\\x00U\\x00\\x00\\x00\\x00\\xc3\\xd3\\xd6\\xc7\\xc7\\xc9\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-06-17T00:00:00", "modifydate": "2009-06-22T00:00:00", "lines": 85, "newlines": 0, "modlines": 0, "user": "CLOGGIE"}, "text": "/* REXX edit macro to shorten ISFF colors in IHExxxx generated output */\n/*** trace ?r ***************************************************** \\| *\n*               (C) Copyright Robert AH Prins, 2009-2009               *\n************************************************************************\n*  ------------------------------------------------------------------  *\n* | Date       | By   | Remarks                                      | *\n* |------------+------+----------------------------------------------| *\n* |            |      |                                              | *\n* |------------+------+----------------------------------------------| *\n* | 2009-06-22 | RAHP | Use '00'x in translate strings               | *\n* |------------+------+----------------------------------------------| *\n* | 2009-06-17 | RAHP | Initial version                              | *\n* |------------+------+----------------------------------------------| *\n************************************************************************\n* EHIZIP is a REXX edit macro that can be used to shorten the \"em\"     *\n* classnames for the ISPF colors in the EHIxxxx generated output files *\n* to make them a bit smaller, saving a bit of bandwidth.               *\n************************************************************************\n* Send questions, suggestions and/or bug reports to:                   *\n*                                                                      *\n* robert@prino.org / robert.ah.prins@gmail.com                         *\n*                                                                      *\n* Robert AH Prins                                                      *\n* Taboralaan 46                                                        *\n* 8400 Oostende                                                        *\n* Belgium                                                              *\n************************************************************************\n* This program is free software: you can redistribute it and/or        *\n* modify it under the terms of the GNU General Public License as       *\n* published by the Free Software Foundation, either version 3 of       *\n* the License, or (at your option) any later version.                  *\n*                                                                      *\n* This program is distributed in the hope that it will be useful,      *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of       *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *\n* GNU General Public License for more details.                         *\n*                                                                      *\n* You should have received a copy of the GNU General Public License    *\n* along with this program. If not, see <http://www.gnu.org/licenses/>  *\n***********************************************************************/\n\"isredit macro\"\nf.1 = '<em class=\"ispfblue\">'\nt.1 = '<em class=\"b\">'\n\nf.2 = '<em class=\"ispffuchsia\">'\nt.2 = '<em class=\"f\">'\n\nf.3 = '<em class=\"ispflime\">'\nt.3 = '<em class=\"l\">'\n\nf.4 = '<em class=\"ispfred\">'\nt.4 = '<em class=\"r\">'\n\nf.5 = '<em class=\"ispfturq\">'\nt.5 = '<em class=\"t\">'\n\nf.6 = '<em class=\"ispfwhite\">'\nt.6 = '<em class=\"w\">'\n\nf.7 = '<em class=\"ispfyellow\">'\nt.7 = '<em class=\"y\">'\n\nf.0 = 7\ns   = 0\n\n\"isredit c ' ' x'00' all\"\n\ndo c = 1 to f.0\n  f.c = translate(f.c, '00'x, ' ')\n  t.c = translate(t.c, '00'x, ' ')\n\n  \"isredit c x'\"c2x(f.c)\"' x'\"c2x(t.c)\"' all\"\n  \"isredit (CC, LC) = change_counts\"\n\n  s = s + cc * (length(f.c) - length(t.c))\nend\n\n\"isredit c x'00' ' ' all\"\n\"isredit reset\"\n\nzerralrm = 'NO'\nzerrsm   = ''\nzerrhm   = '*'\nzerrlm   = s 'characters removed from output file'\n\"ispexec setmsg msg(isrz002)\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EPANQ": {"ttr": 5633, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x063/\\x01\\t\\x11/\\x00\\x00\\x02X\\x00\\x00\\x00\\x00\\xc3\\xd3\\xd6\\xc7\\xc7\\xc9\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-11-28T00:00:00", "modifydate": "2009-04-22T00:00:00", "lines": 600, "newlines": 0, "modlines": 0, "user": "CLOGGIE"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "GETVAR": {"ttr": 5889, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x166\\x1f\\x01\\x166\\x1f\\x00\\x00\\x00\\x1e\\x00\\x00\\x00\\x00\\xd7\\xd9\\xc9\\xd5\\xd6@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2016-12-26T00:00:00", "modifydate": "2016-12-26T00:00:00", "lines": 30, "newlines": 0, "modlines": 0, "user": "PRINO"}, "text": "/* REXX exec to return common values to calling execs                 */\n/*** trace ?r ***************************************************** \\| *\n*               (C) Copyright Robert AH Prins, 1996-2016               *\n************************************************************************\n*  ------------------------------------------------------------------  *\n* | Date       | By   | Remarks                                      | *\n* |------------+------+----------------------------------------------| *\n* |            |      |                                              | *\n* |------------+------+----------------------------------------------| *\n* | 2016-12-26 | RAHP | Sanitised version for EHIXMIT                | *\n* |------------+------+----------------------------------------------| *\n* | 1996-05-24 | RAHP | Initial version                              | *\n* |------------+------+----------------------------------------------| *\n************************************************************************\n* GETVAR is a REXX exec to return a number of commonly used values to  *\n* the calling exec.                                                    *\n*                                                                      *\n* The objective of this exec is to make it possible to change the      *\n* commonly used values at one single location, instead of having to    *\n* change the values in every exec that uses them.                      *\n***********************************************************************/\nparse arg $what\n\n$pref = userid()\n\nselect\n  when $what = 'execRAHP' then return $pref'rahp.exec'\n  when $what = 'XMITNODE' then return 'FROM'\n  otherwise                    return '?'\nend\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GPLV3": {"ttr": 5891, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07\\x18\\x0f\\x01\\x07\\x18\\x0f\\x00\\x00\\x02\\xa9\\x00\\x00\\x00\\x00\\xc6\\xe2\\xc6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-06-29T00:00:00", "modifydate": "2007-06-29T00:00:00", "lines": 681, "newlines": 0, "modlines": 0, "user": "FSF"}, "text": "/* REXX - Text of the GPL V3                                          */\n/***********************************************************************\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds\nof works, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for\nincorporation into a dwelling.  In determining whether a product is a\nconsumer product, doubtful cases shall be resolved in favor of coverage.\nFor a particular product received by a particular user, \"normally used\"\nrefers to a typical or common use of that class of product, regardless\nof the status of the particular user or of the way in which the\nparticular user actually uses, or expects or is expected to use, the\nproduct.  A product is a consumer product regardless of whether the\nproduct has substantial commercial, industrial or non-consumer uses,\nunless such uses represent the only significant mode of use of the\nproduct.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product\nfrom a modified version of its Corresponding Source.  The information\nmust suffice to ensure that the continued functioning of the modified\nobject code is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to\na network may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders\nof that material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not convey it at all.  For example, if you agree to terms that\nobligate you to collect a royalty for further conveying from those to\nwhom you convey the Program, the only way you could satisfy both those\nterms and this License would be to refrain entirely from conveying the\nProgram.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in\ndetail to address new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT\nWARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE\nOF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU\nASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR\nCONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES\nARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT\nNOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES\nSUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE\nWITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN\nADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these\nterms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n  <one line to give the program's name and a brief idea of what it\n  does.> Copyright (C) <year>  <name of author>\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or (at\n  your option) any later version.\n\n  This program is distributed in the hope that it will be useful, but\n  WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\n  notice like this when it starts in an interactive mode:\n\n  <program>  Copyright (C) <year>  <name of author>\n  This program comes with ABSOLUTELY NO WARRANTY; for details type\n  `show w'.  This is free software, and you are welcome to redistribute\n  it under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the\nappropriate parts of the General Public License.  Of course, your\nprogram's commands might be different; for a GUI interface, you would\nuse an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  For more information on this, and how to apply and follow\nthe GNU GPL, see <http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your\nprogram into proprietary programs.  If your program is a subroutine\nlibrary, you may consider it more useful to permit linking proprietary\napplications with the library.  If this is what you want to do, use the\nGNU Lesser General Public License instead of this License.  But first,\nplease read <http://www.gnu.org/philosophy/why-not-lgpl.html>.\n***********************************************************************/\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MAKECBT": {"ttr": 6148, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x07'\\x0f\\x01\\t\\x18?\\x00\\x00\\x02\\xba\\x00\\x00\\x00\\x00\\xc3\\xd3\\xd6\\xc7\\xc7\\xc9\\xc5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-09-27T00:00:00", "modifydate": "2009-07-02T00:00:00", "lines": 698, "newlines": 0, "modlines": 0, "user": "CLOGGIE"}, "text": "/* REXX exec to build CBTTAPE.EXEC from my own exec library           */\n/*** trace ?r ***************************************************** \\| *\n*               (C) Copyright Robert AH Prins, 2007-2009               *\n************************************************************************\n*  ------------------------------------------------------------------  *\n* | Date       | By   | Remarks                                      | *\n* |------------+------+----------------------------------------------| *\n* |            |      |                                              | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-02 | RAHP | Update pro-forma email text                  | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-01 | RAHP | getvar('XMITNODE') -> sysvar('SYSNODE')      | *\n* |------------+------+----------------------------------------------| *\n* | 2009-06-17 | RAHP | Add EHIZIP to the set                        | *\n* |------------+------+----------------------------------------------| *\n* | 2009-04-22 | RAHP | Update comment                               | *\n* |------------+------+----------------------------------------------| *\n* | 2009-03-23 | RAHP | - add email with latest changes              | *\n* |            |      | - update name of transmitted dataset         | *\n* |------------+------+----------------------------------------------| *\n* | 2009-03-09 | RAHP | - add sanitised version of GETVAR            | *\n* |            |      | - update name of transmitted dataset         | *\n* |------------+------+----------------------------------------------| *\n* | 2009-02-09 | RAHP | - add maintainer added members to $$$INDEX   | *\n* |            |      | - RACF problem with 'xmit' extension @ NVSM  | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-27 | RAHP | Initial version - CBT release 475            | *\n* |------------+------+----------------------------------------------| *\n************************************************************************\n* MAKECBT is a REXX exec to extract the relevant members from my own   *\n* exec library to the latest version of my CBTTAPE library.            *\n************************************************************************\n* Send questions, suggestions and/or bug reports to:                   *\n*                                                                      *\n* robert@prino.org / robert.ah.prins@gmail.com                         *\n*                                                                      *\n* Robert AH Prins                                                      *\n* Taboralaan 46                                                        *\n* 8400 Oostende                                                        *\n* Belgium                                                              *\n************************************************************************\n* This program is free software: you can redistribute it and/or        *\n* modify it under the terms of the GNU General Public License as       *\n* published by the Free Software Foundation, either version 3 of       *\n* the License, or (at your option) any later version.                  *\n*                                                                      *\n* This program is distributed in the hope that it will be useful,      *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of       *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *\n* GNU General Public License for more details.                         *\n*                                                                      *\n* You should have received a copy of the GNU General Public License    *\n* along with this program. If not, see <http://www.gnu.org/licenses/>  *\n***********************************************************************/\nparse source source\nparse value source with . . moi .\n\n/***********************************************************************\n* Get the date                                                         *\n***********************************************************************/\nnow  = date('S')\nnows = left(now, 4)'/'substr(now, 5, 2)'/'right(now, 2)\nnowd = left(now, 4)'-'substr(now, 5, 2)'-'right(now, 2)\n\n/***********************************************************************\n* Check for pseudo-recursive invocation as edit macro                  *\n***********************************************************************/\n\"ispexec vget (rexxparm) shared\"\n\nif rc = 0 then\n  do\n    \"ispexec verase (rexxparm) shared\"\n\n    \"isredit macro\"\n    \"isredit level 0\"\n\n    select\n      when rexxparm = '$$$INDEX' then\n        do\n          l = '$$$INDEX - This member, the index of ROBERT.CBT769.EXEC'\n          \"isredit line 1 = (L)\"\n\n          l = '$$$$READ - Disclaimer'\n          \"isredit line_before 1 = (L)\"\n\n          l = '$$$#DATE - Added by CBT Tape maintainer'\n          \"isredit line_before 1 = (L)\"\n\n          l = '$$NOTE1  - Added by CBT Tape maintainer'\n          \"isredit line_before 1 = (L)\"\n\n          l = '@FILE769 - Added by CBT Tape maintainer'\n          \"isredit line_before 1 = (L)\"\n\n          \"isredit x all\"\n          \"isredit f '$$$$READ' 1 first\"\n          \"isredit f '$$$#DATE' 1 first\"\n          \"isredit f '$$NOTE1 ' 1 first\"\n          \"isredit f '@FILE769' 1 first\"\n          \"isredit f 'GETVAR'   1 first\"\n\n          call get_members\n\n          do m = 1 to mem.0\n            \"isredit f '\"mem.m\"' 1 first\"\n          end\n\n          \"isredit del x all\"\n          \"isredit sort\"\n        end\n\n      when rexxparm = 'QH' then\n        do\n          f = 'Prins$ 2007-2###'\n          t = 'Prins, 2007-'left(now, 4)\n          \"isredit c p'\"f\"' '\"t\"' first\"\n\n          \"isredit f '* |------------+------+-' first\"\n          \"isredit f '* |------------+------+-' next\"\n          \"isredit (L) = line .zcsr\"\n          \"isredit line_after .zcsr = (L)\"\n\n          l = '* |' nowd '| RAHP |',\n              'Remove embedded non-GPL XMIT file            | *'\n          \"isredit line_after .zcsr = (L)\"\n\n          call add_qh_note1\n\n          \"isredit f 'member = 'ispfhtml'' first\"\n          \"isredit (N) = linenum .zcsr\"\n          \"isredit label\" n + 1 \"= .A\"\n\n          \"isredit f 'queue x2c(E0C9D5D4D9F0F6)' first\"\n          \"isredit del .A .zcsr all\"\n\n          call add_qh_note2\n        end\n\n      otherwise\n        nop\n    end\n\n    \"isredit renum\"\n    \"isredit end\"\n\n    exit\n  end\n\n/***********************************************************************\n* Get my exec library (GETVAR retrieves client-site dependent data)    *\n***********************************************************************/\n$exec = getvar('execRAHP')\n$pds  = translate(getvar('PDS'))\n$seq  = translate(getvar('SEQ'))\n\n$cbt  = userid()'.CBT769.EXEC'\n$cbtp = userid()'.CBT769.EXEC'$pds\n\n/***********************************************************************\n* What now follows is a just an excercise in sillyness, but it's nice  *\n* to let the XMIT file always contain 'ROBERT.CBT769.EXEC', no matter  *\n* where this EXEC runs.                                                *\n*********************** Start of very silly code **********************/\n$req  = 'ROBERT.CBT769.EXEC'\n?pds  = strip($pds,, '.')\n\nlreq  = 2 +,\n        2 * words(translate($req, ' ', '.')) +,\n        length(space(translate($req, ' ', '.'), 0))\nlcbtp = 2 +,\n        2 * words(translate($cbtp, ' ', '.')) +,\n        length(space(translate($cbtp, ' ', '.'), 0))\n\nparse value $cbtp with q1 '.' q2 '.' q3 '.' q4\n\nif lcbtp \\= lreq then\n  do\n    ? = lcbtp - lreq\n\n    if ? > 0 then\n      do\n        do while ?   \\= 0 &,\n           length(q2) > 1\n          ?  = ? - 1\n          q2 = left(q2, length(q2) - 1)\n        end\n\n        if ? > 0 then\n          do while ?   \\= 0 &,\n             length(q3) > 1\n            ?  = ? - 1\n            q3 = left(q3, length(q3) - 1)\n          end\n      end\n    else\n      do\n        do while ?   \\= 0 &,\n           length(q2) < 8\n          ?  = ? + 1\n          q2 = left(q2, length(q2) + 1, 'X')\n        end\n\n        if ? < 0 then\n          do while ?   \\= 0 &,\n             length(q3) < 8\n            ?  = ? + 1\n            q3 = left(q3, length(q3) + 1, 'X')\n          end\n      end\n  end\n\nxreq = x2c(0003)x2c(0006)'ROBERT'x2c(0006)'CBT769'x2c(0004)'EXEC'\nif ?pds = '' then\n  xgen = x2c(0003)x2c(00)x2c(length(userid())) || userid() ||,\n                  x2c(00)x2c(length(q2))       || q2 ||,\n                  x2c(00)x2c(length(q3))       || q3 ||\nelse\n  xgen = x2c(0004)x2c(00)x2c(length(userid())) || userid() ||,\n                  x2c(00)x2c(length(q2))       || q2 ||,\n                  x2c(00)x2c(length(q3))       || q3 ||,\n                  x2c(00)x2c(length(?pds))     || ?pds\n\n$cbtp = userid()'.'q2'.'q3 || $pds\n/*********************** End of very silly code ***********************/\n\n\"ispexec lmerase dataset('\"$cbtp\"')\"\n\n\"alloc f(cbt) da('\"$cbtp\"') \" ||,\n             \"delete reu \" ||,\n             \"space(60,60) dir(10) release \" ||,\n             \"recfm(f b) lrecl(80) blksize(0) dsntype(pds)\"\n\n/***********************************************************************\n* Copy selected members                                                *\n***********************************************************************/\ncall get_members\n\ndrop exec\ndrop cbt\n\n\"ispexec lminit dataid(exec) dataset('\"$exec\"') enq(shr)\"\n\"ispexec lminit dataid(cbt)  dataset('\"$cbtp\"')  enq(exclu)\"\n\ndo m = 1 to mem.0\n  \"ispexec lmcopy fromid(\"exec\") frommem(\"mem.m\") \" ||,\n                 \"todataid(\"cbt\") replace\"\nend\n\n\"ispexec lmfree dataid(\"exec\")\"\n\"ispexec lmfree dataid(\"cbt\")\"\n\n/***********************************************************************\n* Add the disclaimer and a sanitised 'GETVAR'                          *\n***********************************************************************/\ncall add_disclaimer\ncall add_getvar\n\n/***********************************************************************\n* Update the ISPF statistics for selected members                      *\n***********************************************************************/\ndrop cbt\n\n\"ispexec lminit dataid(\"cbt\") ddname(cbt) enq(shrw)\"\n\"ispexec lmopen dataid(\"cbt\") option(input)\"\n\n/***********************************************************************\n* Update the $$$INDEX member                                           *\n***********************************************************************/\nrexxparm = '$$$INDEX'\n\"ispexec vput (rexxparm) shared\"\n\"ispexec edit dataid(\"cbt\") member($$$INDEX) macro(\"moi\")\"\n\nrexxparm = 'QH'\n\"ispexec vput (rexxparm) shared\"\n\"ispexec edit dataid(\"cbt\") member(QH) macro(\"moi\")\"\n\nrexxparm = 'GETVAR'\n\"ispexec vput (rexxparm) shared\"\n\"ispexec edit dataid(\"cbt\") member(GETVAR) macro(\"moi\")\"\n\nstats = \"version(1) \"      ||,\n        \"modlevel(0) \"     ||,\n        \"modtime(00:00) \"  ||,\n        \"created4(\"nows\") \" ||,\n        \"moddate4(\"nows\") \" ||,\n        \"initsize(\"0\") \"   ||,\n        \"modrecs(\"0\") \"    ||,\n        \"user(CLOGGIE)\"\n\n\"ispexec lmmstats dataid(\"cbt\") member($$$$READ) \" || stats\n\"ispexec lmmstats dataid(\"cbt\") member($$$INDEX) \" || stats\n\"ispexec lmmstats dataid(\"cbt\") member(GETVAR) \"   || stats\n\nstats = \"version(1) \"           ||,\n        \"modlevel(0) \"          ||,\n        \"modtime(00:00) \"       ||,\n        \"created4(2007/08/30) \" ||,\n        \"moddate4(\"nows\") \"     ||,\n        \"initsize(\"0\") \"        ||,\n        \"modrecs(\"0\") \"         ||,\n        \"user(CLOGGIE)\"\n\n\"ispexec lmmstats dataid(\"cbt\") member(QH) \" || stats\n\n\"ispexec lmclose dataid(\"cbt\")\"\n\n\"transmit TO.\"userid() \"da('\"$cbtp\"') \"                       ||,\n                       \"outdsname('\"$cbt\".xmit\"$seq\"') pds nolog \" ||,\n                       \"msgdsname('\"$cbtp\"($$$$READ)') \"      ||,\n                       \"nonotify sysout(*)\"\n\n\"free f(cbt)\"\n\n/***********************************************************************\n* Remove my userid and traces of current site                          *\n***********************************************************************/\n\"alloc f(xmit) da('\"$cbt\".xmit\"$seq\"') reu\"\n\n\"execio 10 diskr xmit (stem inrec. finis\"\n\n/***********************************************************************\n* All data to be modified can be found before the INMR03 record        *\n***********************************************************************/\ns = ''\ndo r = 1 to inrec.0 until pos('INMR03', inrec.r) \\= 0\n  s = s || inrec.r\nend\n\n/***********************************************************************\n* This replaces the generated name with 'ROBERT.CBT769.EXEC'           *\n*********************** Start of more silly code **********************/\np = pos(xgen, s)\nif p \\= 0 then\n  s = overlay(xreq, s, p)\n/*********************** End of more silly code ***********************/\n\nl = length(userid())\nselect\n  when l = 7 then moi = 'CLOGGIE'\n  when l = 6 then moi = 'ROBERT'\n  when l = 5 then moi = 'PRINO'\n  when l = 4 then moi = 'RAHP'\n  when l = 3 then moi = 'MOI'\n  otherwise       moi = left('XXXXXXX', l)\nend\n\n/***********************************************************************\n* Replace my userid with something innocuous - I wasn't silly enough   *\n* to actually modify the entire XMIT file to put in ROBERT everywhere. *\n***********************************************************************/\nold = d2c(l)userid()\nnew = d2c(l)moi\n\np = pos(old, s)\ndo while p \\= 0\n  s = substr(s, 1, p - 1) || new || substr(s, p + l + 1)\n  p = pos(old, s)\nend\n\n/***********************************************************************\n* Round times look so much nicer...                                    *\n***********************************************************************/\np = pos(date('S'), s)\nif p \\= 0 then\n  s = overlay(date('S')'120000', s, p)\n\n/***********************************************************************\n* I don't want you to know where this file came from :)                *\n***********************************************************************/\nnode = sysvar('SYSNODE')\n\np    = pos(x2c(length(node))node, s)\n\nif length(node) = 4 then\n  q = x2c(length(node))'FROM'\nelse\n  q = x2c(length(node))left('X', length(node), 'X')\n\nif p \\= 0 then\n  s = overlay(q, s, p)\n\n/***********************************************************************\n* Write back all changed data                                          *\n***********************************************************************/\ndo q = 1 to r\n  \"execio 1 diskru xmit\" q\n  pull zap\n\n  out = substr(s, 1 + 80 * (q - 1), 80)\n\n  push out\n  \"execio 1 diskw xmit (finis\"\nend\n\n\"free f(xmit)\"\nexit\n\n/***********************************************************************\n* ADD_DISCLAIMER:                                                      *\n*                                                                      *\n* Add the disclaimer to the dataset                                    *\n***********************************************************************/\nadd_disclaimer:\n  signal get_dis_text\n\n/*\n                          D I S C L A I M E R\n                          -------------------\n        This package is Copyright (C) Robert AH Prins 2007-$$$$\n\n  The REXX execs in this PDS are free software: you can redistribute\n  them and/or modify them under the terms of the GNU General Public\n  License as published by the Free Software Foundation, either version\n  3 of the License, or (at your option) any later version.\n\n  These REXX execs are distributed in the hope that they will be\n  useful, but WITHOUT ANY WARRANTY; without even the implied warranty\n  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n  General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with these execs. If not, see <http://www.gnu.org/licenses/>\n\n*/\n\nget_dis_text:\n  do i = sigl + 3 while substr(sourceline(i), 1, 2) \\= '*' || '/'\n    dis = left(sourceline(i), 72)\n\n    p = pos('$$$$', dis)\n    if p \\= 0 then\n      dis = overlay(left(date('S'), 4), dis, p, 4)\n\n    queue dis\n  end\n\n  \"alloc f(dis) da('\"$cbtp\"($$$$read)') reu\"\n  \"execio\" queued() \"diskw dis (finis\"\n  \"free f(dis)\"\nreturn\n\n/***********************************************************************\n* ADD_QH_NOTE1:                                                        *\n*                                                                      *\n* Add the QH note explaining how to get ISPFHTML                       *\n***********************************************************************/\nadd_qh_note1:\n  f = '* See <http://www.sillysot.com/mvs/>'\n\n  signal get_qh_text\n\n/*\n*                                                                      *\n* Important information:                                               *\n*                                                                      *\n* QH does NOT include the actual ISPFHTML code which is (C) Copyright  *\n* Doug Nadel or IBM. The XMIT file that contains the code and that     *\n* should be 'EPANQ'ed and added to this exec can be retrieved from     *\n* <http://www.sillysot.com/ftp/ispfhtml.xmi>                           *\n*                                                                      *\n* This exec should NEVER be distributed with Doug Nadel's non-GPL code *\n* embedded in it!                                                      *\n************************************************************************\n* Send questions and bug reports to:                                   *\n*                                                                      *\n* robert@prino.org / robert.ah.prins@gmail.com                         *\n*                                                                      *\n* Robert AH Prins                                                      *\n* Taboralaan 46                                                        *\n* 8400 Oostende                                                        *\n* Belgium                                                              *\n************************************************************************\n* This program is free software: you can redistribute it and/or        *\n* modify it under the terms of the GNU General Public License as       *\n* published by the Free Software Foundation, either version 3 of       *\n* the License, or (at your option) any later version.                  *\n*                                                                      *\n* This program is distributed in the hope that it will be useful,      *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of       *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *\n* GNU General Public License for more details.                         *\n*                                                                      *\n* You should have received a copy of the GNU General Public License    *\n* along with this program. If not, see <http://www.gnu.org/licenses/>  *\n*/\n\n/***********************************************************************\n* ADD_QH_NOTE2:                                                        *\n*                                                                      *\n* Add the note to get ISPFHTML and put the EPANQ'ed version into QH    *\n***********************************************************************/\nadd_qh_note2:\n  f = 'member = ''ispfhtml'''\n\n  signal get_qh_text\n\n/*\n\nsay 'Here you will have to put the output of the EPANQ''ed copy of'\nsay 'Doug Nadel''s ISPFHTML from <http://www.sillysot.com/mvs/>. It'\nsay 'is not included for copyright reasons.'\nsay\nsay 'You should use EPANQ with the ''BIN'' parameter to add a ''mere'''\nsay '582 lines of ''queue'' statements, rather than the 4682 that would'\nsay 'be added by just using ''EPANQ''.'\nsay\nsay 'Now download ISPFHTML.XMI, EPANQ it, add the code and try again|'\n\nexit\n*/\n\nget_qh_text:\n  l = 0\n\n  do i = sigl + 3 while substr(sourceline(i), 1, 2) \\= '*' || '/'\n    l      = l + 1\n    line.l = left(sourceline(i), 72)\n  end\n\n  line.0 = l\n\n  \"isredit f '\"f\"' first\"\n\n  do l = line.0 to 1 by -1\n    line = line.l\n    \"isredit line_after .zcsr = (LINE)\"\n  end\nreturn\n\n/***********************************************************************\n* GET_MEMBERS:                                                         *\n*                                                                      *\n* Build the list of members to process                                 *\n***********************************************************************/\nget_members:\n  mem.1  = '$$$INDEX'\n  mem.2  = 'EHIASM'\n  mem.3  = 'EHICOBOL'\n  mem.4  = 'EHIHELP'\n  mem.5  = 'EHIJCL'\n  mem.6  = 'EHINONE'\n  mem.7  = 'EHIPLI'\n  mem.8  = 'EHIREXX'\n  mem.9  = 'EHISUPC'\n  mem.10 = 'EHISUPP'\n  mem.11 = 'EHIZIP'\n  mem.12 = 'EPANQ'\n  mem.13 = 'GPLV3'\n  mem.14 = 'QH'\n  mem.15 = 'MAKECBT'\n  mem.0  = 15\nreturn\n\n/***********************************************************************\n* ADD_GETVAR:                                                          *\n*                                                                      *\n* Add a sanitised 'GETVAR' member to the dataset                       *\n***********************************************************************/\nadd_getvar:\n  signal get_getvar_text\n\n/*\n/% REXX exec to return common values to calling execs                 %/\n/%** trace ?r ***************************************************** \\| *\n*               (C) Copyright Robert AH Prins, 1996-YYYY               *\n************************************************************************\n*  ------------------------------------------------------------------  *\n* | Date       | By   | Remarks                                      | *\n* |------------+------+----------------------------------------------| *\n* |            |      |                                              | *\n* |------------+------+----------------------------------------------| *\n* | YYYY-MM-DD | RAHP | Sanitised version for CBTTAPE                | *\n* |------------+------+----------------------------------------------| *\n* | 1996-05-24 | RAHP | Initial version                              | *\n* |------------+------+----------------------------------------------| *\n************************************************************************\n* GETVAR is a REXX exec to return a number of commonly used values to  *\n* the calling exec.                                                    *\n*                                                                      *\n* The objective of this exec is to make it possible to change the      *\n* commonly used values at one single location, instead of having to    *\n* change the values in every exec that uses them.                      *\n**********************************************************************%/\nparse arg $what\n\n$pds  = ''\n$seq  = ''\n$pref = userid()\n\nselect\n  when $what = 'execRAHP' then return $pref'rahp.exec'$pds\n  when $what = 'PDS'      then return $pds\n  when $what = 'SEQ'      then return $seq\n  when $what = 'XMITNODE' then return 'FROM'\n  otherwise                    return '?'\nend\n*/\n\nget_getvar_text:\n  do i = sigl + 3 while substr(sourceline(i), 1, 2) \\= '*' || '/'\n    dis = translate(left(sourceline(i), 72), '*', '%')\n\n    p = pos('YYYY-MM-DD', dis)\n    if p \\= 0 then\n      dis = overlay(nowd, dis, p, 10)\n\n    p = pos('YYYY', dis)\n    if p \\= 0 then\n      dis = overlay(left(now, 4), dis, p, 4)\n\n    queue dis\n  end\n\n  \"alloc f(dis) da('\"$cbtp\"(getvar)') reu\"\n  \"execio\" queued() \"diskw dis (finis\"\n  \"free f(dis)\"\nreturn\n/* Email to sbgolob@cbttape.org and sknutson@cbttape.org ***************\nSubject: EHILITE execs in ZIP'ed XMIT format - Update of 2009-07-03\n\nHi Sam,\n\nAttached is an updated version of the ZIPped XMIT file for file CBT769\ncontaining the EHIxxxx hilite macros.\n\nAn incomplete list, see individual changelogs in the various members for\na more complete picture, of the updates I've made to the code:\n\n- the Javascript code to produce the fancy scrollable ISPF like HTML\n  has been updated and works again in Firefox 3.x\n- fixed a bug in the PL/I and REXX parsing code that would lead to the\n  '*** Bottom of Data ***' line being concatenated to the last dataline\n  when using Regina\n- all generated HTML is now completely W3C \"XHTML 1.0 Strict\" compliant\n- translate '<', '>', '\"' and '&' in output to HTML entities\n- the addition of 'GETVAR', and using it to retrieve some potentially\n  site-specific data, making it easier to customise the code. The change\n  was triggered by RACF limitations on the final qualifier at my current\n  employer.\n- process full SuperC Line compare output\n- process full SuperC File compare output (Beta)\n- process full SuperC Byte compare output (Beta)\n- addition of an 'HTML extension' selection field on the options pop-up\n- addition of an 'HTML font' selection field on the options pop-up\n- addition of a 'Compact HTML' selection field on the options pop-up, to\n  generate one-letter \"em\" classes, significantly reducing the size of\n  generated HTML files\n- brought PL/I keywords up to the level of Enterprise PLI V3.8.0\n- used BPXWDYN for non-DSNAME allocations, following a discussion in\n  bit.listserv.tsorexx about the inability of LISTDSI to retrieve the\n  dsname of datasets that might potentially end up on VIO\n\nThe dataset contains the following members:\n\n$$$$READ - Disclaimer\n$$$INDEX - The index of File 769\nEHIASM   - Convert assembler to HTML with ISPF HILITE'ing\nEHICOBOL - Convert COBOL to HTML with ISPF HILITE'ing\nEHIHELP  - Common 'help' screen for the EHIJCL/PLI/REXX macros\nEHIJCL   - Convert JCL to HTML with ISPF HILITE'ing\nEHINONE  - Convert any text to HTML as non-HILITE'd ISPF Edit\nEHIPLI   - Convert PL/I to HTML with ISPF HILITE'ing\nEHIREXX  - Convert REXX to HTML with ISPF HILITE'ing\nEHISUPC  - Convert SuperC/Search-For output to HTML with ISPF HILITE'ing\nEHISUPP  - Factored out support routines for the EHIxxxx execs\nEHIZIP   - Shorten ISPF colors generated by other EHIxxxx execs\nEPANQ    - Convert panel/message/skeleton to queue statements\nGETVAR   - Retrieve site-dependent data\nGPLV3    - Text of the GPL Version 3\nMAKECBT  - Exec to auto-build CBT769.EXEC from my own exec library\nQH       - Exec to invoke Doug Nadel's ISPFHTML utility\n\nTo run the macros, the EHIxxxx members and GETVAR are essential, but I\nhave added EPANQ, MAKECBT and QH as little bonuses.\n\nEPANQ   - this exec can be used to convert anything into a set of queue\n          statements, it can be used to update the embedded panel in\n          EHISUPP,\nMAKECBT - the exec I use to automagically build 'ROBERT.CBT769.XMIT'\n          from my own EXEC library and\nQH      - I use this exec to invoke Doug Nadel's ISPFHTML tool. In my\n          own copy I have embedded Doug's code by 'EPANQ'ing his\n          ISPFHTML.XMI file, but as that code is quite likely (C)\n          Copyright Doug Nadel (or more likely IBM), 'MAKECBT'\n          replaces it by a note how to get it.\n\nPlease note that the XMIT file contains a message dataset. It would be\nnice if this survived your adding the usual '$$$#DATE', '$$NOTE1' and\n'@FILE769' members.\n\nI would appreciate any feedback to <robert (a) prino (d) org>\n\nRobert\n--\nRobert AH Prins\nrobert (a) prino (d) org\nMobile: +32 487 594312\n***********************************************************************/\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "QH": {"ttr": 6405, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07$/\\x01\\t\\x18O\\x00\\x00\\x00\\xe8\\x00\\x00\\x00\\x00\\xc3\\xd3\\xd6\\xc7\\xc7\\xc9\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-08-30T00:00:00", "modifydate": "2009-07-03T00:00:00", "lines": 232, "newlines": 0, "modlines": 0, "user": "CLOGGIE"}, "text": "/* REXX exec to invoke Doug Nadel's ISPFHTML utility                  */\n/*** trace ?r ***************************************************** \\| *\n*               (C) Copyright Robert AH Prins, 2007-2009               *\n************************************************************************\n*  ------------------------------------------------------------------  *\n* | Date       | By   | Remarks                                      | *\n* |------------+------+----------------------------------------------| *\n* |            |      |                                              | *\n* |------------+------+----------------------------------------------| *\n* | 2009-07-03 | RAHP | Remove embedded non-GPL XMIT file            | *\n* |------------+------+----------------------------------------------| *\n* | 2009-03-16 | RAHP | Replace LISTDSI by BXPWDYN                   | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-24 | RAHP | Remove call to 'GETTEMP'                     | *\n* |------------+------+----------------------------------------------| *\n* | 2007-09-03 | RAHP | Include Doug Nadel's ISPFHTML load library   | *\n* |------------+------+----------------------------------------------| *\n* | 2007-08-30 | RAHP | Initial version                              | *\n* |------------+------+----------------------------------------------| *\n************************************************************************\n* QH is a REXX exec to invoke Doug Nadel's ISTPHTML utility to capture *\n* ISPF screens to HTML. Ideally it should be assigned to a PF key.     *\n*                                                                      *\n* See <http://www.sillysot.com/mvs/> for the manual                    *\n*                                                                      *\n* Important information:                                               *\n*                                                                      *\n* QH does NOT include the actual ISPFHTML code which is (C) Copyright  *\n* Doug Nadel or IBM. The XMIT file that contains the code and that     *\n* should be 'EPANQ'ed and added to this exec can be retrieved from     *\n* <http://www.sillysot.com/ftp/ispfhtml.xmi>                           *\n*                                                                      *\n* This exec should NEVER be distributed with Doug Nadel's non-GPL code *\n* embedded in it!                                                      *\n************************************************************************\n* Send questions and bug reports to:                                   *\n*                                                                      *\n* robert@prino.org / robert.ah.prins@gmail.com                         *\n*                                                                      *\n* Robert AH Prins                                                      *\n* Taboralaan 46                                                        *\n* 8400 Oostende                                                        *\n* Belgium                                                              *\n************************************************************************\n* This program is free software: you can redistribute it and/or        *\n* modify it under the terms of the GNU General Public License as       *\n* published by the Free Software Foundation, either version 3 of       *\n* the License, or (at your option) any later version.                  *\n*                                                                      *\n* This program is distributed in the hope that it will be useful,      *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of       *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *\n* GNU General Public License for more details.                         *\n*                                                                      *\n* You should have received a copy of the GNU General Public License    *\n* along with this program. If not, see <http://www.gnu.org/licenses/>  *\n***********************************************************************/\nparse source source\nparse value source with . . moi .\n\narg parm\n\nparm = translate(parm)\n!pds = getvar('PDS')\n\nrc = sysdsn(\"'\"userid()\".ispfhtml.load\"!pds\"'\")\nif rc \\= 'OK' then\n  do\n    call help\n    exit\n  end\n\nselect\n  when parm = ''     then opt = ''\n  when parm = 'NS'   then opt = ',nostart'\n  when parm = 'NE'   then opt = ',noend'\n  when parm = 'A'    then opt = ',append'\n  when parm = 'AN'   then opt = ',append,nostart,noend'\n  when parm = 'ANS'  then opt = ',append,nostart'\n  when parm = 'ANE'  then opt = ',append,noend'\n  otherwise\n    do\n      call help\n      exit\n    end\nend\n\n\"ispexec libdef ispllib \" ||,\n                \"dataset id('\"userid()\".ispfhtml.load\"!pds\"') stack\"\n\"ispexec select pgm(ispfhtml) parm(html\"opt\")\"\n\"ispexec libdef ispllib\"\nexit\n\n/***********************************************************************\n* HELP:                                                                *\n*                                                                      *\n* Display a small help panel                                           *\n***********************************************************************/\nhelp:\n  call load_dynlib\n\n  rc = sysdsn(\"'\"userid()\".ispfhtml.load\"!pds\"'\")\n  if rc \\= 'OK' then\n    do\n      queue \"receive indsn('\"ispdyn\"(ispfhtml)')\"\n      queue \"dsn(ispfhtml.load\"!pds\") sysout(a)\"\n\n      zcmd = ';'moi ?\n      \"ispexec control nondispl end\"\n      \"ispexec display panel(isr@prim)\"\n      exit\n    end\n\n  \"ispexec libdef ispplib library id(\"dynlib\") stack\"\n\n  zwinttl = 'QH Options'\n  \"ispexec addpop row(10) column(-1)\"\n  \"ispexec display panel (\"moi\")\"\n  \"ispexec rempop\"\n\n  \"ispexec libdef ispplib\"\n  \"free f(\"dynlib\")\"\nreturn\n\n/***********************************************************************\n* LOAD_DYNLIB:                                                         *\n*                                                                      *\n* This procedure loads the via EPANQ generated panel, message and      *\n* skeleton code into a library. Note that there is no reason to use    *\n* different libraries for any of these objects, as long as they are    *\n* named differently|                                                   *\n***********************************************************************/\nload_dynlib:\ndynlib = 'dyn'random(99999)\nalloc  = \"alloc fi(\"dynlib\") rtdsn(sysdsname) \"   ||,\n                   \"lrecl(80) blksize(0) dir(5) \" ||,\n                   \"new delete reuse \"            ||,\n                   \"space(1,1)\"\nrc = bpxwdyn(alloc)\n\nif rc = 0 then\n  ispdyn = sysdsname\nelse\n  ispdyn = 'NOT FOUND'\n\n\"newstack\"\n\nmember = moi\n\nqueue ')attr default(%$_)'\nqueue '/' || '***************************************************' ||,\n      '*******************' || '/'\nqueue '/' || '*              (C) Copyright Robert AH Prins, 2007-' ||,\n      '2007              *' || '/'\nqueue '/' || '***************************************************' ||,\n      '*******************' || '/'\nqueue '/' || '*  ------------------------------------------------' ||,\n      '----------------  *' || '/'\nqueue '/' || '* | Date       | By   | Remarks                    ' ||,\n      '                | *' || '/'\nqueue '/' || '* |------------+------+----------------------------' ||,\n      '----------------| *' || '/'\nqueue '/' || '* |            |      |                            ' ||,\n      '                | *' || '/'\nqueue '/' || '* |------------+------+----------------------------' ||,\n      '----------------| *' || '/'\nqueue '/' || '* | 2007-08-30 | RAHP | Initial version            ' ||,\n      '                | *' || '/'\nqueue '/' || '* |------------+------+----------------------------' ||,\n      '----------------| *' || '/'\nqueue '/' || '***************************************************' ||,\n      '*******************' || '/'\nqueue '/' || '* Panel - QH                                       ' ||,\n      '                  *' || '/'\nqueue '/' || '*                                                  ' ||,\n      '                  *' || '/'\nqueue '/' || '* This panel is used by the QH exec to display the ' ||,\n      'possible options  *' || '/'\nqueue '/' || '* available.                                       ' ||,\n      '                  *' || '/'\nqueue '/' || '***************************************************' ||,\n      '*******************' || '/'\nqueue ' \u00a2 type(text) intens(high) color(yellow)'\nqueue ' ~ type(text) intens(high) color(green)'\nqueue ' $ type(text) intens(high) color(yellow)'\nqueue ' '\nqueue ')body window(77,8)'\nqueue '%''?''  $-~Display this panel'\nqueue '%None $-~Capture the screen to a new file'\nqueue '%''NS'' $-~Capture screen to new file, without table start' ||,\n      'ing html'\nqueue '%''NE'' $-~Capture screen to new file, without table endin' ||,\n      'g html'\nqueue '%''A''  $-~Append screen to file'\nqueue '%''AN ''$-~Append screen to file, without table starting o' ||,\n      'r ending html'\nqueue '%''ANE''$-~Append screen to file, without table ending htm' ||,\n      'l'\nqueue '%''ANS''$-~Append screen to file, without table starting h' ||,\n      'tml'\nqueue ')init'\nqueue ')proc'\nqueue '  .resp = end'\nqueue ')end'\n\ncall put_object\n\n\"newstack\"\n\nmember = 'ispfhtml'\n\nsay 'Here you will have to put the output of the EPANQ''ed copy of'\nsay 'Doug Nadel''s ISPFHTML from <http://www.sillysot.com/mvs/>. It'\nsay 'is not included for copyright reasons.'\nsay\nsay 'You should use EPANQ with the ''BIN'' parameter to add a ''mere'''\nsay '582 lines of ''queue'' statements, rather than the 4682 that would'\nsay 'be added by just using ''EPANQ''.'\nsay\nsay 'Now download ISPFHTML.XMI, EPANQ it, add the code and try again|'\n\nexit\n\nput_object:\n  tfil = 'tfil'random(9999)\n\n  \"alloc f(\"tfil\") da('\"ispdyn\"(\"member\")') shr reu\"\n  \"execio\" queued() \"diskw \"tfil\" (finis\"\n  \"free f(\"tfil\")\"\n\n  \"delstack\"\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT769/FILE769.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT769", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}