/* REXX exec to build CBTTAPE.EXEC from my own exec library           */
/*** trace ?r ***************************************************** \| *
*               (C) Copyright Robert AH Prins, 2007-2009               *
************************************************************************
*  ------------------------------------------------------------------  *
* | Date       | By   | Remarks                                      | *
* |------------+------+----------------------------------------------| *
* |            |      |                                              | *
* |------------+------+----------------------------------------------| *
* | 2009-07-02 | RAHP | Update pro-forma email text                  | *
* |------------+------+----------------------------------------------| *
* | 2009-07-01 | RAHP | getvar('XMITNODE') -> sysvar('SYSNODE')      | *
* |------------+------+----------------------------------------------| *
* | 2009-06-17 | RAHP | Add EHIZIP to the set                        | *
* |------------+------+----------------------------------------------| *
* | 2009-04-22 | RAHP | Update comment                               | *
* |------------+------+----------------------------------------------| *
* | 2009-03-23 | RAHP | - add email with latest changes              | *
* |            |      | - update name of transmitted dataset         | *
* |------------+------+----------------------------------------------| *
* | 2009-03-09 | RAHP | - add sanitised version of GETVAR            | *
* |            |      | - update name of transmitted dataset         | *
* |------------+------+----------------------------------------------| *
* | 2009-02-09 | RAHP | - add maintainer added members to $$$INDEX   | *
* |            |      | - RACF problem with 'xmit' extension @ NVSM  | *
* |------------+------+----------------------------------------------| *
* | 2007-09-27 | RAHP | Initial version - CBT release 475            | *
* |------------+------+----------------------------------------------| *
************************************************************************
* MAKECBT is a REXX exec to extract the relevant members from my own   *
* exec library to the latest version of my CBTTAPE library.            *
************************************************************************
* Send questions, suggestions and/or bug reports to:                   *
*                                                                      *
* robert@prino.org / robert.ah.prins@gmail.com                         *
*                                                                      *
* Robert AH Prins                                                      *
* Taboralaan 46                                                        *
* 8400 Oostende                                                        *
* Belgium                                                              *
************************************************************************
* This program is free software: you can redistribute it and/or        *
* modify it under the terms of the GNU General Public License as       *
* published by the Free Software Foundation, either version 3 of       *
* the License, or (at your option) any later version.                  *
*                                                                      *
* This program is distributed in the hope that it will be useful,      *
* but WITHOUT ANY WARRANTY; without even the implied warranty of       *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *
* GNU General Public License for more details.                         *
*                                                                      *
* You should have received a copy of the GNU General Public License    *
* along with this program. If not, see <http://www.gnu.org/licenses/>  *
***********************************************************************/
parse source source
parse value source with . . moi .

/***********************************************************************
* Get the date                                                         *
***********************************************************************/
now  = date('S')
nows = left(now, 4)'/'substr(now, 5, 2)'/'right(now, 2)
nowd = left(now, 4)'-'substr(now, 5, 2)'-'right(now, 2)

/***********************************************************************
* Check for pseudo-recursive invocation as edit macro                  *
***********************************************************************/
"ispexec vget (rexxparm) shared"

if rc = 0 then
  do
    "ispexec verase (rexxparm) shared"

    "isredit macro"
    "isredit level 0"

    select
      when rexxparm = '$$$INDEX' then
        do
          l = '$$$INDEX - This member, the index of ROBERT.CBT769.EXEC'
          "isredit line 1 = (L)"

          l = '$$$$READ - Disclaimer'
          "isredit line_before 1 = (L)"

          l = '$$$#DATE - Added by CBT Tape maintainer'
          "isredit line_before 1 = (L)"

          l = '$$NOTE1  - Added by CBT Tape maintainer'
          "isredit line_before 1 = (L)"

          l = '@FILE769 - Added by CBT Tape maintainer'
          "isredit line_before 1 = (L)"

          "isredit x all"
          "isredit f '$$$$READ' 1 first"
          "isredit f '$$$#DATE' 1 first"
          "isredit f '$$NOTE1 ' 1 first"
          "isredit f '@FILE769' 1 first"
          "isredit f 'GETVAR'   1 first"

          call get_members

          do m = 1 to mem.0
            "isredit f '"mem.m"' 1 first"
          end

          "isredit del x all"
          "isredit sort"
        end

      when rexxparm = 'QH' then
        do
          f = 'Prins$ 2007-2###'
          t = 'Prins, 2007-'left(now, 4)
          "isredit c p'"f"' '"t"' first"

          "isredit f '* |------------+------+-' first"
          "isredit f '* |------------+------+-' next"
          "isredit (L) = line .zcsr"
          "isredit line_after .zcsr = (L)"

          l = '* |' nowd '| RAHP |',
              'Remove embedded non-GPL XMIT file            | *'
          "isredit line_after .zcsr = (L)"

          call add_qh_note1

          "isredit f 'member = 'ispfhtml'' first"
          "isredit (N) = linenum .zcsr"
          "isredit label" n + 1 "= .A"

          "isredit f 'queue x2c(E0C9D5D4D9F0F6)' first"
          "isredit del .A .zcsr all"

          call add_qh_note2
        end

      otherwise
        nop
    end

    "isredit renum"
    "isredit end"

    exit
  end

/***********************************************************************
* Get my exec library (GETVAR retrieves client-site dependent data)    *
***********************************************************************/
$exec = getvar('execRAHP')
$pds  = translate(getvar('PDS'))
$seq  = translate(getvar('SEQ'))

$cbt  = userid()'.CBT769.EXEC'
$cbtp = userid()'.CBT769.EXEC'$pds

/***********************************************************************
* What now follows is a just an excercise in sillyness, but it's nice  *
* to let the XMIT file always contain 'ROBERT.CBT769.EXEC', no matter  *
* where this EXEC runs.                                                *
*********************** Start of very silly code **********************/
$req  = 'ROBERT.CBT769.EXEC'
?pds  = strip($pds,, '.')

lreq  = 2 +,
        2 * words(translate($req, ' ', '.')) +,
        length(space(translate($req, ' ', '.'), 0))
lcbtp = 2 +,
        2 * words(translate($cbtp, ' ', '.')) +,
        length(space(translate($cbtp, ' ', '.'), 0))

parse value $cbtp with q1 '.' q2 '.' q3 '.' q4

if lcbtp \= lreq then
  do
    ? = lcbtp - lreq

    if ? > 0 then
      do
        do while ?   \= 0 &,
           length(q2) > 1
          ?  = ? - 1
          q2 = left(q2, length(q2) - 1)
        end

        if ? > 0 then
          do while ?   \= 0 &,
             length(q3) > 1
            ?  = ? - 1
            q3 = left(q3, length(q3) - 1)
          end
      end
    else
      do
        do while ?   \= 0 &,
           length(q2) < 8
          ?  = ? + 1
          q2 = left(q2, length(q2) + 1, 'X')
        end

        if ? < 0 then
          do while ?   \= 0 &,
             length(q3) < 8
            ?  = ? + 1
            q3 = left(q3, length(q3) + 1, 'X')
          end
      end
  end

xreq = x2c(0003)x2c(0006)'ROBERT'x2c(0006)'CBT769'x2c(0004)'EXEC'
if ?pds = '' then
  xgen = x2c(0003)x2c(00)x2c(length(userid())) || userid() ||,
                  x2c(00)x2c(length(q2))       || q2 ||,
                  x2c(00)x2c(length(q3))       || q3 ||
else
  xgen = x2c(0004)x2c(00)x2c(length(userid())) || userid() ||,
                  x2c(00)x2c(length(q2))       || q2 ||,
                  x2c(00)x2c(length(q3))       || q3 ||,
                  x2c(00)x2c(length(?pds))     || ?pds

$cbtp = userid()'.'q2'.'q3 || $pds
/*********************** End of very silly code ***********************/

"ispexec lmerase dataset('"$cbtp"')"

"alloc f(cbt) da('"$cbtp"') " ||,
             "delete reu " ||,
             "space(60,60) dir(10) release " ||,
             "recfm(f b) lrecl(80) blksize(0) dsntype(pds)"

/***********************************************************************
* Copy selected members                                                *
***********************************************************************/
call get_members

drop exec
drop cbt

"ispexec lminit dataid(exec) dataset('"$exec"') enq(shr)"
"ispexec lminit dataid(cbt)  dataset('"$cbtp"')  enq(exclu)"

do m = 1 to mem.0
  "ispexec lmcopy fromid("exec") frommem("mem.m") " ||,
                 "todataid("cbt") replace"
end

"ispexec lmfree dataid("exec")"
"ispexec lmfree dataid("cbt")"

/***********************************************************************
* Add the disclaimer and a sanitised 'GETVAR'                          *
***********************************************************************/
call add_disclaimer
call add_getvar

/***********************************************************************
* Update the ISPF statistics for selected members                      *
***********************************************************************/
drop cbt

"ispexec lminit dataid("cbt") ddname(cbt) enq(shrw)"
"ispexec lmopen dataid("cbt") option(input)"

/***********************************************************************
* Update the $$$INDEX member                                           *
***********************************************************************/
rexxparm = '$$$INDEX'
"ispexec vput (rexxparm) shared"
"ispexec edit dataid("cbt") member($$$INDEX) macro("moi")"

rexxparm = 'QH'
"ispexec vput (rexxparm) shared"
"ispexec edit dataid("cbt") member(QH) macro("moi")"

rexxparm = 'GETVAR'
"ispexec vput (rexxparm) shared"
"ispexec edit dataid("cbt") member(GETVAR) macro("moi")"

stats = "version(1) "      ||,
        "modlevel(0) "     ||,
        "modtime(00:00) "  ||,
        "created4("nows") " ||,
        "moddate4("nows") " ||,
        "initsize("0") "   ||,
        "modrecs("0") "    ||,
        "user(CLOGGIE)"

"ispexec lmmstats dataid("cbt") member($$$$READ) " || stats
"ispexec lmmstats dataid("cbt") member($$$INDEX) " || stats
"ispexec lmmstats dataid("cbt") member(GETVAR) "   || stats

stats = "version(1) "           ||,
        "modlevel(0) "          ||,
        "modtime(00:00) "       ||,
        "created4(2007/08/30) " ||,
        "moddate4("nows") "     ||,
        "initsize("0") "        ||,
        "modrecs("0") "         ||,
        "user(CLOGGIE)"

"ispexec lmmstats dataid("cbt") member(QH) " || stats

"ispexec lmclose dataid("cbt")"

"transmit TO."userid() "da('"$cbtp"') "                       ||,
                       "outdsname('"$cbt".xmit"$seq"') pds nolog " ||,
                       "msgdsname('"$cbtp"($$$$READ)') "      ||,
                       "nonotify sysout(*)"

"free f(cbt)"

/***********************************************************************
* Remove my userid and traces of current site                          *
***********************************************************************/
"alloc f(xmit) da('"$cbt".xmit"$seq"') reu"

"execio 10 diskr xmit (stem inrec. finis"

/***********************************************************************
* All data to be modified can be found before the INMR03 record        *
***********************************************************************/
s = ''
do r = 1 to inrec.0 until pos('INMR03', inrec.r) \= 0
  s = s || inrec.r
end

/***********************************************************************
* This replaces the generated name with 'ROBERT.CBT769.EXEC'           *
*********************** Start of more silly code **********************/
p = pos(xgen, s)
if p \= 0 then
  s = overlay(xreq, s, p)
/*********************** End of more silly code ***********************/

l = length(userid())
select
  when l = 7 then moi = 'CLOGGIE'
  when l = 6 then moi = 'ROBERT'
  when l = 5 then moi = 'PRINO'
  when l = 4 then moi = 'RAHP'
  when l = 3 then moi = 'MOI'
  otherwise       moi = left('XXXXXXX', l)
end

/***********************************************************************
* Replace my userid with something innocuous - I wasn't silly enough   *
* to actually modify the entire XMIT file to put in ROBERT everywhere. *
***********************************************************************/
old = d2c(l)userid()
new = d2c(l)moi

p = pos(old, s)
do while p \= 0
  s = substr(s, 1, p - 1) || new || substr(s, p + l + 1)
  p = pos(old, s)
end

/***********************************************************************
* Round times look so much nicer...                                    *
***********************************************************************/
p = pos(date('S'), s)
if p \= 0 then
  s = overlay(date('S')'120000', s, p)

/***********************************************************************
* I don't want you to know where this file came from :)                *
***********************************************************************/
node = sysvar('SYSNODE')

p    = pos(x2c(length(node))node, s)

if length(node) = 4 then
  q = x2c(length(node))'FROM'
else
  q = x2c(length(node))left('X', length(node), 'X')

if p \= 0 then
  s = overlay(q, s, p)

/***********************************************************************
* Write back all changed data                                          *
***********************************************************************/
do q = 1 to r
  "execio 1 diskru xmit" q
  pull zap

  out = substr(s, 1 + 80 * (q - 1), 80)

  push out
  "execio 1 diskw xmit (finis"
end

"free f(xmit)"
exit

/***********************************************************************
* ADD_DISCLAIMER:                                                      *
*                                                                      *
* Add the disclaimer to the dataset                                    *
***********************************************************************/
add_disclaimer:
  signal get_dis_text

/*
                          D I S C L A I M E R
                          -------------------
        This package is Copyright (C) Robert AH Prins 2007-$$$$

  The REXX execs in this PDS are free software: you can redistribute
  them and/or modify them under the terms of the GNU General Public
  License as published by the Free Software Foundation, either version
  3 of the License, or (at your option) any later version.

  These REXX execs are distributed in the hope that they will be
  useful, but WITHOUT ANY WARRANTY; without even the implied warranty
  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with these execs. If not, see <http://www.gnu.org/licenses/>

*/

get_dis_text:
  do i = sigl + 3 while substr(sourceline(i), 1, 2) \= '*' || '/'
    dis = left(sourceline(i), 72)

    p = pos('$$$$', dis)
    if p \= 0 then
      dis = overlay(left(date('S'), 4), dis, p, 4)

    queue dis
  end

  "alloc f(dis) da('"$cbtp"($$$$read)') reu"
  "execio" queued() "diskw dis (finis"
  "free f(dis)"
return

/***********************************************************************
* ADD_QH_NOTE1:                                                        *
*                                                                      *
* Add the QH note explaining how to get ISPFHTML                       *
***********************************************************************/
add_qh_note1:
  f = '* See <http://www.sillysot.com/mvs/>'

  signal get_qh_text

/*
*                                                                      *
* Important information:                                               *
*                                                                      *
* QH does NOT include the actual ISPFHTML code which is (C) Copyright  *
* Doug Nadel or IBM. The XMIT file that contains the code and that     *
* should be 'EPANQ'ed and added to this exec can be retrieved from     *
* <http://www.sillysot.com/ftp/ispfhtml.xmi>                           *
*                                                                      *
* This exec should NEVER be distributed with Doug Nadel's non-GPL code *
* embedded in it!                                                      *
************************************************************************
* Send questions and bug reports to:                                   *
*                                                                      *
* robert@prino.org / robert.ah.prins@gmail.com                         *
*                                                                      *
* Robert AH Prins                                                      *
* Taboralaan 46                                                        *
* 8400 Oostende                                                        *
* Belgium                                                              *
************************************************************************
* This program is free software: you can redistribute it and/or        *
* modify it under the terms of the GNU General Public License as       *
* published by the Free Software Foundation, either version 3 of       *
* the License, or (at your option) any later version.                  *
*                                                                      *
* This program is distributed in the hope that it will be useful,      *
* but WITHOUT ANY WARRANTY; without even the implied warranty of       *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the         *
* GNU General Public License for more details.                         *
*                                                                      *
* You should have received a copy of the GNU General Public License    *
* along with this program. If not, see <http://www.gnu.org/licenses/>  *
*/

/***********************************************************************
* ADD_QH_NOTE2:                                                        *
*                                                                      *
* Add the note to get ISPFHTML and put the EPANQ'ed version into QH    *
***********************************************************************/
add_qh_note2:
  f = 'member = ''ispfhtml'''

  signal get_qh_text

/*

say 'Here you will have to put the output of the EPANQ''ed copy of'
say 'Doug Nadel''s ISPFHTML from <http://www.sillysot.com/mvs/>. It'
say 'is not included for copyright reasons.'
say
say 'You should use EPANQ with the ''BIN'' parameter to add a ''mere'''
say '582 lines of ''queue'' statements, rather than the 4682 that would'
say 'be added by just using ''EPANQ''.'
say
say 'Now download ISPFHTML.XMI, EPANQ it, add the code and try again|'

exit
*/

get_qh_text:
  l = 0

  do i = sigl + 3 while substr(sourceline(i), 1, 2) \= '*' || '/'
    l      = l + 1
    line.l = left(sourceline(i), 72)
  end

  line.0 = l

  "isredit f '"f"' first"

  do l = line.0 to 1 by -1
    line = line.l
    "isredit line_after .zcsr = (LINE)"
  end
return

/***********************************************************************
* GET_MEMBERS:                                                         *
*                                                                      *
* Build the list of members to process                                 *
***********************************************************************/
get_members:
  mem.1  = '$$$INDEX'
  mem.2  = 'EHIASM'
  mem.3  = 'EHICOBOL'
  mem.4  = 'EHIHELP'
  mem.5  = 'EHIJCL'
  mem.6  = 'EHINONE'
  mem.7  = 'EHIPLI'
  mem.8  = 'EHIREXX'
  mem.9  = 'EHISUPC'
  mem.10 = 'EHISUPP'
  mem.11 = 'EHIZIP'
  mem.12 = 'EPANQ'
  mem.13 = 'GPLV3'
  mem.14 = 'QH'
  mem.15 = 'MAKECBT'
  mem.0  = 15
return

/***********************************************************************
* ADD_GETVAR:                                                          *
*                                                                      *
* Add a sanitised 'GETVAR' member to the dataset                       *
***********************************************************************/
add_getvar:
  signal get_getvar_text

/*
/% REXX exec to return common values to calling execs                 %/
/%** trace ?r ***************************************************** \| *
*               (C) Copyright Robert AH Prins, 1996-YYYY               *
************************************************************************
*  ------------------------------------------------------------------  *
* | Date       | By   | Remarks                                      | *
* |------------+------+----------------------------------------------| *
* |            |      |                                              | *
* |------------+------+----------------------------------------------| *
* | YYYY-MM-DD | RAHP | Sanitised version for CBTTAPE                | *
* |------------+------+----------------------------------------------| *
* | 1996-05-24 | RAHP | Initial version                              | *
* |------------+------+----------------------------------------------| *
************************************************************************
* GETVAR is a REXX exec to return a number of commonly used values to  *
* the calling exec.                                                    *
*                                                                      *
* The objective of this exec is to make it possible to change the      *
* commonly used values at one single location, instead of having to    *
* change the values in every exec that uses them.                      *
**********************************************************************%/
parse arg $what

$pds  = ''
$seq  = ''
$pref = userid()

select
  when $what = 'execRAHP' then return $pref'rahp.exec'$pds
  when $what = 'PDS'      then return $pds
  when $what = 'SEQ'      then return $seq
  when $what = 'XMITNODE' then return 'FROM'
  otherwise                    return '?'
end
*/

get_getvar_text:
  do i = sigl + 3 while substr(sourceline(i), 1, 2) \= '*' || '/'
    dis = translate(left(sourceline(i), 72), '*', '%')

    p = pos('YYYY-MM-DD', dis)
    if p \= 0 then
      dis = overlay(nowd, dis, p, 10)

    p = pos('YYYY', dis)
    if p \= 0 then
      dis = overlay(left(now, 4), dis, p, 4)

    queue dis
  end

  "alloc f(dis) da('"$cbtp"(getvar)') reu"
  "execio" queued() "diskw dis (finis"
  "free f(dis)"
return
/* Email to sbgolob@cbttape.org and sknutson@cbttape.org ***************
Subject: EHILITE execs in ZIP'ed XMIT format - Update of 2009-07-03

Hi Sam,

Attached is an updated version of the ZIPped XMIT file for file CBT769
containing the EHIxxxx hilite macros.

An incomplete list, see individual changelogs in the various members for
a more complete picture, of the updates I've made to the code:

- the Javascript code to produce the fancy scrollable ISPF like HTML
  has been updated and works again in Firefox 3.x
- fixed a bug in the PL/I and REXX parsing code that would lead to the
  '*** Bottom of Data ***' line being concatenated to the last dataline
  when using Regina
- all generated HTML is now completely W3C "XHTML 1.0 Strict" compliant
- translate '<', '>', '"' and '&' in output to HTML entities
- the addition of 'GETVAR', and using it to retrieve some potentially
  site-specific data, making it easier to customise the code. The change
  was triggered by RACF limitations on the final qualifier at my current
  employer.
- process full SuperC Line compare output
- process full SuperC File compare output (Beta)
- process full SuperC Byte compare output (Beta)
- addition of an 'HTML extension' selection field on the options pop-up
- addition of an 'HTML font' selection field on the options pop-up
- addition of a 'Compact HTML' selection field on the options pop-up, to
  generate one-letter "em" classes, significantly reducing the size of
  generated HTML files
- brought PL/I keywords up to the level of Enterprise PLI V3.8.0
- used BPXWDYN for non-DSNAME allocations, following a discussion in
  bit.listserv.tsorexx about the inability of LISTDSI to retrieve the
  dsname of datasets that might potentially end up on VIO

The dataset contains the following members:

$$$$READ - Disclaimer
$$$INDEX - The index of File 769
EHIASM   - Convert assembler to HTML with ISPF HILITE'ing
EHICOBOL - Convert COBOL to HTML with ISPF HILITE'ing
EHIHELP  - Common 'help' screen for the EHIJCL/PLI/REXX macros
EHIJCL   - Convert JCL to HTML with ISPF HILITE'ing
EHINONE  - Convert any text to HTML as non-HILITE'd ISPF Edit
EHIPLI   - Convert PL/I to HTML with ISPF HILITE'ing
EHIREXX  - Convert REXX to HTML with ISPF HILITE'ing
EHISUPC  - Convert SuperC/Search-For output to HTML with ISPF HILITE'ing
EHISUPP  - Factored out support routines for the EHIxxxx execs
EHIZIP   - Shorten ISPF colors generated by other EHIxxxx execs
EPANQ    - Convert panel/message/skeleton to queue statements
GETVAR   - Retrieve site-dependent data
GPLV3    - Text of the GPL Version 3
MAKECBT  - Exec to auto-build CBT769.EXEC from my own exec library
QH       - Exec to invoke Doug Nadel's ISPFHTML utility

To run the macros, the EHIxxxx members and GETVAR are essential, but I
have added EPANQ, MAKECBT and QH as little bonuses.

EPANQ   - this exec can be used to convert anything into a set of queue
          statements, it can be used to update the embedded panel in
          EHISUPP,
MAKECBT - the exec I use to automagically build 'ROBERT.CBT769.XMIT'
          from my own EXEC library and
QH      - I use this exec to invoke Doug Nadel's ISPFHTML tool. In my
          own copy I have embedded Doug's code by 'EPANQ'ing his
          ISPFHTML.XMI file, but as that code is quite likely (C)
          Copyright Doug Nadel (or more likely IBM), 'MAKECBT'
          replaces it by a note how to get it.

Please note that the XMIT file contains a message dataset. It would be
nice if this survived your adding the usual '$$$#DATE', '$$NOTE1' and
'@FILE769' members.

I would appreciate any feedback to <robert (a) prino (d) org>

Robert
--
Robert AH Prins
robert (a) prino (d) org
Mobile: +32 487 594312
***********************************************************************/
