{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012557000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1352078, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE674.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1352078, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1352078, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE674.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x16\\x03'", "DS1TRBAL": "b'\\xb6\\x9e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xbf\\x00\\x0e\\x04\\xc1\\x00\\x06\\x00\\x17'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04B\\x00\\x00\\x01\\x04\\x13?\\x01\\x04\\x13?\\x100\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf6@@@'", "ispf": {"version": "04.66", "flags": 0, "createdate": "2004-05-12T00:00:00", "modifydate": "2004-05-12T10:30:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-466"}, "text": "REGULAR CBT TAPE - VERSION 466    FILE:  674\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT466.FILE674\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   21 MEMBERS COUNTED; CUMULATIVE SIZE IS 12,312 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   05/12/04    10:30:49    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$INDEX": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00F\\x01\\x04\\x10_\\x01\\x04\\x13\\x1f\\x109\\x00\\x84\\x00\\x80\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2004-04-14T00:00:00", "modifydate": "2004-05-10T10:39:46", "lines": 132, "newlines": 128, "modlines": 0, "user": "MA133"}, "text": "****** Copied from www.robinandmariette.com/Mvs/Rexx/RexxUtils.asp *****\n\nRobin Murray's Rexx Tools/Utilities\n\nThese utilities have been tested using OS/390 2.10 as of March\n2004.  They will be tested on z/OS 1.4 as soon as possible.\n\nThese utilities are provided as is with no warranties or\nguarantees of any kind whatsoever.  Use at your own risk!\n\nThe libraries are in xmit format, and are zipped into an archive.\nTo install:\n\n    * Follow the instructions in the $RUNME member to recieve the\n      rest of the libs.\n    * In the SAMPLIB dataset, follow the directions in members\n      $INSTALL, $IVP, and $INSTAL2, in that order.\n    * If installing SVCDUMPS, follow the directions in members\n      $INSTALL, and $IVP of MA133.TSO.SVCDUMPS.SYSEXEC.\n\nLast updated:  8-May-2004\n\nUtility  Description\n\n$START   A model for starting most reasonably complex programs.\n         Just copy this into your new member and begin customizing\n         it.  For details on why I start rexx programs this way,\n         see my hints and tips section.\n\n$TBDISPL A model to display an ISPF table.  Copy this code into\n         your program and make a few adjustments to display your\n         table.  Contains boiler plate code for handling both\n         primary and line commands.\n\nAPARSTRP A program to strip off the comments from CA supplied\n         PTFs.  Used in conjunction with EACHMEM and possibly\n         FTPPDS.\n\nCOMPRESS A program to compress a PDS.  Can be run either as an\n         edit macro or as a TSO exec.  Useful when you get out of\n         space errors while in edit: simply enter COMPRESS on the\n         command line and save again.\n\nDELALL   Deletes all datasets beginning with the passed high\n         level qualifier(s).  Uses ISPF 3.4 masking if ISPF is\n         active for greater flexibility.\n\nDUPMEM   Checks for duplicate members of a concatenation. Pass the\n         DDName of the concatanation and a card deck will be generated\n         that can be fed to the PDS program to delete them.  LINKLIST\n         and LPALIST can also be passed as the DDName, and the current,\n         in-storage concatenation will be checked.\n\nEACHMEM  To process a PDS by calling the passed rexx program for\n         each member.  It's meant as a generalized service to\n         process all members of a PDS.\n\nFTPPDS   A utility to ftp a remote directory to a PDS or a PDS to\n         a remote directory.  Uses a profile dataset to store the\n         commands to be executed.  Can be run in batch or online.\n\nGO       A simple edit macro to execute the member you are\n         editing.  Simply enter GO on the command line along with\n         any parms to execute your program.  Pending changes are\n         automatically saved before the exec is run.  If the save\n         fails, a compress is run and the save is attempted\n         again.\n\nNJ       To navigate through lengthy and complex JCL.\n         Front-ends CA's JCLCHECK product with several ISPF\n         tables.  Presents several different views of the JCL\n         including datasets, programs, procedures, reports, and\n         JCL errors.  Allows you to select any line to take you\n         to the exact JCL source line to which it corresponds,\n         no matter if it's in stream or in a procedure.  Allows\n         you to zoom in to datasets on the dataset view.  See\n         the job navigator section for more details on this\n         powerful utility.\n\nQUOTES   A simple edit macro to flag lines that have uneven or\n         missing quotes.\n\nRESTART  An IOF rexx to process the joblog and create a series of\n         IDCAMS delete statements so that you can restart the job.\n\nSAVELIB  A quick way to make a backup copy of a PDS.\n\nSORTTB   To sort any ISPF table passed to it.  Pops up a small\n         panel where you can select Ascending or Decsending sort\n         sequences on any field in the table.  A good utility to\n         call from another program to allow complex sorting on a\n         table.\n\nSRCHGO   Used in the Search-For IBM utility to allow you to zoom\n         in from the lines in the search results list to edit the\n         target dataset where the line was found.\n\nSTARTUP  An ISPF session manager to allow you to create and\n         easily navigate thru many concurrent ISPF sessions.\n         Combines the functionality of the ISPF START, SCRNAME,\n         SWAP LIST, and SWAP XXX command into one easy to\n         remember command.  Allows dynamic command tables to be\n         built for each individual user.  See the startup command\n         section for more details.\n\nSWIMACRO A sample site-wide initial edit macro showing how to\n         create special protection for certain key system\n         datasets like SYS1.PARMLIB and others.  Ensures that\n         AUTOSAVE is OFF for these particular datasets so that\n         any changes will require a manual SAVE command before\n         leaving your edit session.\n\nCATLIBS  A new and unique way to concatenate the required TSO and\n         ISPF libraries at logon time.  Separates products into\n         convenient parmlib members that are assigned as needed\n         to each user group.  It's so flexible it can hardly\n         stand up.  Automatically recovers from missing /\n         enqueued / misspelled datasets.  See the CatLibs section\n         for more details.\n\nFinders  A group of find commands to quickly and easily find\n         source library members of various sorts and by various\n         methods.  See the find utilities section for more\n         details on this group of very useful programs.  They are\n         indispensible in our shop.\n\nSVCDUMPS A modern SVC dump manager. Creates a log of your SVC dumps.\n         Allows ISPF table interaction with the log of dumps. Allows\n         interactive archiving, recalling, tersing, ftping, deletion\n         etc.  All dump management can be automated using one\n         multi-purpose started task.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$HINTIPS": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00&\\x01\\x04\\x13?\\x01\\x04\\x13?\\x10)\\x00T\\x00T\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-12T00:00:00", "modifydate": "2004-05-12T10:29:26", "lines": 84, "newlines": 84, "modlines": 0, "user": "MA133"}, "text": "                     Rexx Hints and Tips\n\nI only have a couple of hints and tips for rexx users.  They are\njust ways of doing things that I've found useful.\n\nFirst of all, you should take a look at my startup model member.\nThis is what I use to create all but the simplest of programs.\n\nI establish the Error, Failure and Syntax signal routines as\nearly as possible.  Why?  As I understand it, when a signal\nroutine gets tripped, the rexx interpreter starts at the top of\nthe program and scans through to the end looking for the named\nroutine.  If they are tucked toward the end of the program,\nintervening syntax errors can make the error handling routines\nimpossible to find by the interpreter, so they will never get\ncontrol.  If these routines are parked at the top, it will almost\nalways find them, despite whatever gross syntax errors are\nencountered further on.\n\nEach of the \"standard\" signal routines in the model merely tell\nyou the line that the error occured on, then they call a common\ncleanup routine.  This is very useful to fix up the environment\nbefore returning to TSO.  It can contain such things reflecting\nthe source program name to the user (in case the program is\nnested), freeing allocated files, purging the data stack,\nnullifying outstanding ISPF LIBDEF's, or anything else that will\ngracefully recover from an error.  An example cleanup routine of\na really \"messy\" program that needs a good cleaning:\n\nCleanup:\nParse Pull Source        /* to tell user which program died */\nSay Source\n\nAddress TSO\n\"QSTACK\"; Stacks = RC;   /* to clean up the external data queue */\nDo Stacks; \"DELSTACK\"; End;\n\nx = Msg('OFF')\n\"FREE F(SOMEFILE)\"       /* to free up a file */\nx = Msg(x)\n\nAddress ISPEXEC\n\"CONTROL ERRORS RETURN\"  /* in case there's no active libdef yet */\n\"LIBDEF ISPTLIB\"\n\nReturn\n\nDoing the above will help ensure that you can rerun the exec even\nif you encounter problems in a previous run.\n\nA quick and dirty way to pass a complex set of parameters to an\nexec is to code this short routine:\n\nSomeRoutine:\nArg Vars .\n\nDo While Length(Vars) > 0\n  Parse Var Vars Var '=' Val ',' Vars\n  Interpret Var '= \"'Val'\"'\nEnd\n\nReturn\n\nThis will take a comma-delimited list of variables like\n\"x=1,y=joe,z=-3.14\", and set the variable to the values in the\nroutine just as you coded them.  The parse instrucuction will\nstrip off the first variable and value, and the following\ninterpret instruction will set the variable to the value.  This\nwill continue until all the variables and values have been\nprocessed.  Although this does not check for misspelled\nparameters, it's great for little utilities that you don't care\ntoo much about if something's not passed correctly.\n\nThis is pretty minor, but another general rule I try to follow is\nto always include a null token at the end of parse instructions\nto accept any arguments that I'm not expecting to receive.  It\nalso ensures that any trailing blanks are discarded.  So instead\nof coding \"Arg OneParm\", I code \"Arg OneParm .\".  I've always\nfound this makes the code more robust.  You never know when\nsomeone is going to add a comment to the args they are passing\nyou!\n\nI will add tips and hints to this page as I think of them.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$INTRO": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00B\\x01\\x04\\x13?\\x01\\x04\\x13?\\x10%\\x00\\x99\\x00\\x99\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-05-12T00:00:00", "modifydate": "2004-05-12T10:25:42", "lines": 153, "newlines": 153, "modlines": 0, "user": "MA133"}, "text": "                      INTRO TO REXX\n\nREXX is the language of choice for building workaday programming\ntools.  It is a sensible alternative to Assembly Language for\npanel handling under ISPF and for parsing reports and other\ntext-based input.  REXX execs are easy to change and don't need\nto be compiled.  The in-built TRACE function makes them simple to\ndebug.\n\nOS/390 REXX scripts can run in any MVS address space.  For\nexample, they can run as either batch jobs or TSO/E execs.  They\ncan issue TSO/E commands and use ISPF services, such as file\ntailoring, library management and panel display.\n\nFor more information on generating Java code using REXX see IBM's\nNetREXX home page.\n\n      Setting Up a User REXX Library\n\nThe following steps will set up a standard REXX library, so that\nREXX execs can be invoked from the TSO/E command line by member\nname only:\n\n* Identify any existing libraries allocated to SYSEXEC:\n\n==> TSO ISRDDN\n\n* Allocate a Fixed Block, 80-byte PDS called: userid.REXX.EXEC\n\n* Save the following text into a member called SETUP in the REXX\n  library, changing lib1, lib2 etc.  to the libraries already\n  allocated to SYSEXEC:\n\n/**** REXX ******************************/\n/* Allocate User REXX Library to SYSEXEC*/\n/****************************************/\n\n\"ALLOC FI(SYSEXEC) DA(REXX.EXEC,\",\n    \"'lib1','lib2','lib3') SHR REUSE\"\n\nIF RC = 0 THEN\n  ZEDSMSG = 'SYSEXEC allocated'\nELSE\n  ZEDSMSG = 'SYSEXEC allocation failed'\n\n\"ISPEXEC SETMSG MSG(ISRZ000)\"\n\nRETURN\n\n* Allocate the user REXX library to SYSEXEC:\n\n==> TSO EX REXX.EXEC(SETUP) EX\n\nRunning a Sample REXX Exec\n\nThis is an example of a simple REXX exec edit macro.  It excludes\nall lines of the member being edited except those containing the\nstring specified.\n\n* Save the following text into a member called IN in the REXX\n  library:\n\n/**** REXX ************************************/\n/* Exclude all lines except those with string */\n/**********************************************/\n\n\"ISREDIT MACRO (string)\"\n\n\"ISREDIT X ALL\"\n\"ISREDIT F ALL\" (string)\n\nRETURN\n\n* Run the exec by typing the following on the TSO/E command line,\n  replacing 'string' with the text to search for.  If the text\n  contains blanks, enclose it in apostrophes.\n\n==> IN string\n\n\nEdit Macros\n\nOne of the most useful REXX execs is an edit macro to change a\nspecified string in all members of a PDS.  In this example the\ndriver EXEC is called DOEDIT, and the edit macro containing the\nstring to change is called CHGALL.\n\n* Save the following text into a member called CHGALL in the REXX\n  library:\n\n/**** REXX ***/\n\"ISREDIT MACRO\"\n\"ISREDIT X ALL\"\n\"ISREDIT C ALL 'dr jekyll' 'mr hyde'\"\nRETURN\n\n* Save the following text in the REXX library as member DOEDIT:\n\n/************************ REXX ********************************/\n/* Edit all members of the currently allocated PDS except the */\n/* member being edited. Pass name of edit macro as only parm. */\n/**************************************************************/\n\"ISREDIT MACRO (editmac)\"\n/* Identify currently open PDS */\n\"ISREDIT (openpds) = DATAID\"\n/* Identify currently open member */\n\"ISREDIT (openmbr) = MEMBER\"\n\n/* Open PDS for input */\nADDRESS ISPEXEC\n\"LMOPEN DATAID(\"openpds\") OPTION(INPUT)\"\nmbr = ' '\nsaverc = 0\n\n/* Call edit macro for each member */\nDO WHILE saverc = 0\n  \"LMMLIST DATAID(\"openpds\") MEMBER(mbr) OPTION(LIST) STATS(NO)\"\n  saverc = rc\n  IF (saverc = 0) & (mbr \\= openmbr) THEN DO\n    \"EDIT DATAID(\"openpdsquot;) MEMBER(\"mbr\") MACRO(\"editmac\")\"\n  END\nEND\n\n/* Free and close PDS */\n\"LMMLIST DATAID(\"openpds\") OPTION(FREE)\"\n\"LMCLOSE DATAID(\"openpds\")\"\n\nEXIT\n\n* Now any PDS can be edited by opening a new member in the PDS\n  for edit (it needn't be saved) and typing on the TSO/E command\n  line:\n\n==> DOEDIT CHGALL\n\n\nTips and Tricks\n\n* It's easier to spot syntax errors when editing REXX execs if\n  they display in color.  To turn colors on, enter HILITE REXX on\n  the TSO/E command line.  The result should look like this:\n\n/* Read each line for update */\nDO cnt = 1 to max WHILE eof ='NO'\n  \"EXECIO 1 DISKRU TESTDD\"\n\n* For tips on date formats in REXX execs, check out IBM's article\n  on Handling DATES with REXX.\n\n* See also Google Group: comp.lang.rexx.\n\n  When a thing has been said, and said well, have no scruple.\n  Take it and copy it.  (Anatole France)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$RUNME": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x08\\x01\\x04\\t_\\x01\\x04\\x12\\x9f\\x151\\x00-\\x00\\x19\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2004-04-04T00:00:00", "modifydate": "2004-05-08T15:31:08", "lines": 45, "newlines": 25, "modlines": 0, "user": "MA133"}, "text": "//$RUNME   JOB (1005303),'ROBIN MURRAY',CLASS=P,\n//  MSGCLASS=X,REGION=8M,NOTIFY=&SYSUID\n//*\n//* RUNNING THIS JOB WILL RECEIVE ALL THE NECESSARY FILES FROM\n//* MEMBERS OF THIS PDS. TO RUN:\n//* 1) CHANGE ALL MA133.REXX.XMI TO THE NAME OF THIS PDS\n//* 2) CHANGE ALL MA133.TSO TO THE HLQ OF THE TARGET INSTALL LIBS\n//* 3) UPDATE THE JOBCARD ABOVE AND SUBMIT\n//*\n//TSOBATCH EXEC PGM=IKJEFT1A,DYNAMNBR=256\n//SYSEXEC  DD DSN=MA133.REXX.XMI,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSTSPRT DD SYSOUT=*\n//SYSTERM  DD SYSOUT=*\n//SYSTSIN  DD *\nRECBATCH 'MA133.REXX.XMI(ISPMLIB)'  -\n         'MA133.TSO.ISPMLIB'\nRECBATCH 'MA133.REXX.XMI(ISPPLIB)'  -\n         'MA133.TSO.ISPPLIB'\nRECBATCH 'MA133.REXX.XMI(DTLSOURC)' -\n         'MA133.TSO.ISPPLIB.DTLSOURC'\nRECBATCH 'MA133.REXX.XMI(ISPTLIB)'  -\n         'MA133.TSO.ISPTLIB'\nRECBATCH 'MA133.REXX.XMI(LOGON)'    -\n         'MA133.TSO.LOGON'\nRECBATCH 'MA133.REXX.XMI(LPARM)'    -\n         'MA133.TSO.LOGON.PARMLIB'\nRECBATCH 'MA133.REXX.XMI(PARMLIB)'  -\n         'MA133.TSO.PARMLIB'\nRECBATCH 'MA133.REXX.XMI(SAMPLIB)'  -\n         'MA133.TSO.SAMPLIB'\nRECBATCH 'MA133.REXX.XMI(SYSEXEC)'  -\n         'MA133.TSO.SYSEXEC'\nRECBATCH 'MA133.REXX.XMI(DUMPMLIB)'  -\n         'MA133.TSO.SVCDUMPS.ISPMLIB'\nRECBATCH 'MA133.REXX.XMI(DUMPPLIB)'  -\n         'MA133.TSO.SVCDUMPS.ISPPLIB'\nRECBATCH 'MA133.REXX.XMI(DUMPDTL)'  -\n         'MA133.TSO.SVCDUMPS.ISPPLIB.DTLSOURC'\nRECBATCH 'MA133.REXX.XMI(DUMPSLIB)'  -\n         'MA133.TSO.SVCDUMPS.ISPSLIB'\nRECBATCH 'MA133.REXX.XMI(DUMPEXEC)'  -\n         'MA133.TSO.SVCDUMPS.SYSEXEC'\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE674": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04B\\x00\\x00\\x01\\x04\\x13?\\x01\\x04\\x13?\\x100\\x00\\xa4\\x00\\xa4\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf6@@@'", "ispf": {"version": "04.66", "flags": 0, "createdate": "2004-05-12T00:00:00", "modifydate": "2004-05-12T10:30:00", "lines": 164, "newlines": 164, "modlines": 0, "user": "CBT-466"}, "text": "//***FILE 674 is from Robin Murray and contains a nice collection   *   FILE 674\n//*           of REXX-based utilities to help enhance your TSO      *   FILE 674\n//*           session toolbox.  Below is a description of the       *   FILE 674\n//*           tools in detail.                                      *   FILE 674\n//*                                                                 *   FILE 674\n//*           email   :  mvs@robinandmariette.com                   *   FILE 674\n//*           web site:  http://www.robinandmariette.com            *   FILE 674\n//*                                                                 *   FILE 674\n//*     These utilities have been tested using OS/390 2.10 as       *   FILE 674\n//*     of March 2004.  They will be tested on z/OS 1.4 as soon     *   FILE 674\n//*     as possible.                                                *   FILE 674\n//*                                                                 *   FILE 674\n//*     These utilities are provided as is with no warranties       *   FILE 674\n//*     or guarantees of any kind whatsoever.  Use at your own      *   FILE 674\n//*     risk!                                                       *   FILE 674\n//*                                                                 *   FILE 674\n//*     ---------------------------------------------------------   *   FILE 674\n//*                                                                 *   FILE 674\n//*     Copied from                                                 *   FILE 674\n//*     www.robinandmariette.com/Mvs/Rexx/RexxUtils.asp             *   FILE 674\n//*                                                                 *   FILE 674\n//*     Robin Murray's Rexx Tools/Utilities                         *   FILE 674\n//*                                                                 *   FILE 674\n//*     The libraries are in xmit format.  To install:              *   FILE 674\n//*                                                                 *   FILE 674\n//*         * Follow the instructions in the $RUNME member to       *   FILE 674\n//*           recieve the rest of the libs.                         *   FILE 674\n//*         * In the SAMPLIB dataset, follow the directions in      *   FILE 674\n//*           members $INSTALL, $IVP, and $INSTAL2, in that         *   FILE 674\n//*           order.                                                *   FILE 674\n//*         * If installing SVCDUMPS, follow the directions in      *   FILE 674\n//*           members $INSTALL, and $IVP of                         *   FILE 674\n//*           MA133.TSO.SVCDUMPS.SYSEXEC.                           *   FILE 674\n//*                                                                 *   FILE 674\n//*     Last updated:  8-May-2004                                   *   FILE 674\n//*                                                                 *   FILE 674\n//*     Utility  Description                                        *   FILE 674\n//*                                                                 *   FILE 674\n//*     $START   A model for starting most reasonably complex       *   FILE 674\n//*              programs.  Just copy this into your new member     *   FILE 674\n//*              and begin customizing it.  For details on why      *   FILE 674\n//*              I start rexx programs this way, see my hints       *   FILE 674\n//*              and tips section.                                  *   FILE 674\n//*                                                                 *   FILE 674\n//*     $TBDISPL A model to display an ISPF table.  Copy this       *   FILE 674\n//*              code into your program and make a few              *   FILE 674\n//*              adjustments to display your table.  Contains       *   FILE 674\n//*              boiler plate code for handling both primary        *   FILE 674\n//*              and line commands.                                 *   FILE 674\n//*                                                                 *   FILE 674\n//*     APARSTRP A program to strip off the comments from CA        *   FILE 674\n//*              supplied PTFs.  Used in conjunction with           *   FILE 674\n//*              EACHMEM and possibly FTPPDS.                       *   FILE 674\n//*                                                                 *   FILE 674\n//*     COMPRESS A program to compress a PDS.  Can be run either    *   FILE 674\n//*              as an edit macro or as a TSO exec.  Useful when    *   FILE 674\n//*              you get out of space errors while in edit:         *   FILE 674\n//*              simply enter COMPRESS on the command line and      *   FILE 674\n//*              save again.                                        *   FILE 674\n//*                                                                 *   FILE 674\n//*     DELALL   Deletes all datasets beginning with the passed     *   FILE 674\n//*              high level qualifier(s).  Uses ISPF 3.4            *   FILE 674\n//*              masking if ISPF is active for greater              *   FILE 674\n//*              flexibility.                                       *   FILE 674\n//*                                                                 *   FILE 674\n//*     DUPMEM   Checks for duplicate members of a concatenation.   *   FILE 674\n//*              Pass the DDName of the concatanation and a card    *   FILE 674\n//*              deck will be generated that can be fed to the      *   FILE 674\n//*              PDS program to delete them.  LINKLIST and          *   FILE 674\n//*              LPALIST can also be passed as the DDName, and      *   FILE 674\n//*              the current, in-storage concatenation will be      *   FILE 674\n//*              checked.                                           *   FILE 674\n//*                                                                 *   FILE 674\n//*     EACHMEM  To process a PDS by calling the passed rexx        *   FILE 674\n//*              program for each member.  It's meant as a          *   FILE 674\n//*              generalized service to process all members of      *   FILE 674\n//*              a PDS.                                             *   FILE 674\n//*                                                                 *   FILE 674\n//*     FTPPDS   A utility to ftp a remote directory to a PDS       *   FILE 674\n//*              or a PDS to a remote directory.  Uses a            *   FILE 674\n//*              profile dataset to store the commands to be        *   FILE 674\n//*              executed.  Can be run in batch or online.          *   FILE 674\n//*                                                                 *   FILE 674\n//*     GO       A simple edit macro to execute the member you      *   FILE 674\n//*              are editing.  Simply enter GO on the command       *   FILE 674\n//*              line along with any parms to execute your          *   FILE 674\n//*              program.  Pending changes are automatically        *   FILE 674\n//*              saved before the exec is run.  If the save         *   FILE 674\n//*              fails, a compress is run and the save is           *   FILE 674\n//*              attempted again.                                   *   FILE 674\n//*                                                                 *   FILE 674\n//*     NJ       To navigate through lengthy and complex JCL.       *   FILE 674\n//*              Front-ends CA's JCLCHECK product with several      *   FILE 674\n//*              ISPF tables.  Presents several different views     *   FILE 674\n//*              of the JCL including datasets, programs,           *   FILE 674\n//*              procedures, reports, and JCL errors.  Allows you   *   FILE 674\n//*              to select any line to take you to the exact JCL    *   FILE 674\n//*              source line to which it corresponds, no matter     *   FILE 674\n//*              if it's in stream or in a procedure.  Allows you   *   FILE 674\n//*              to zoom in to datasets on the dataset view.  See   *   FILE 674\n//*              the job navigator section for more details on      *   FILE 674\n//*              this powerful utility.                             *   FILE 674\n//*                                                                 *   FILE 674\n//*     QUOTES   A simple edit macro to flag lines that have        *   FILE 674\n//*              uneven or missing quotes.                          *   FILE 674\n//*                                                                 *   FILE 674\n//*     RESTART  An IOF rexx to process the joblog and create a     *   FILE 674\n//*              series of IDCAMS delete statements so that you     *   FILE 674\n//*              can restart the job.                               *   FILE 674\n//*                                                                 *   FILE 674\n//*     SAVELIB  A quick way to make a backup copy of a PDS.        *   FILE 674\n//*                                                                 *   FILE 674\n//*     SORTTB   To sort any ISPF table passed to it.  Pops up      *   FILE 674\n//*              a small panel where you can select Ascending       *   FILE 674\n//*              or Decsending sort sequences on any field in       *   FILE 674\n//*              the table.  A good utility to call from            *   FILE 674\n//*              another program to allow complex sorting on a      *   FILE 674\n//*              table.                                             *   FILE 674\n//*                                                                 *   FILE 674\n//*     SRCHGO   Used in the Search-For IBM utility to allow        *   FILE 674\n//*              you to zoom in from the lines in the search        *   FILE 674\n//*              results list to edit the target dataset where      *   FILE 674\n//*              the line was found.                                *   FILE 674\n//*                                                                 *   FILE 674\n//*     STARTUP  An ISPF session manager to allow you to create     *   FILE 674\n//*              and easily navigate thru many concurrent ISPF      *   FILE 674\n//*              sessions.  Combines the functionality of the       *   FILE 674\n//*              ISPF START, SCRNAME, SWAP LIST, and SWAP XXX       *   FILE 674\n//*              command into one easy to remember command.         *   FILE 674\n//*              Allows dynamic command tables to be built for      *   FILE 674\n//*              each individual user.  See the startup command     *   FILE 674\n//*              section for more details.                          *   FILE 674\n//*                                                                 *   FILE 674\n//*     SWIMACRO A sample site-wide initial edit macro showing      *   FILE 674\n//*              how to create special protection for certain       *   FILE 674\n//*              key system datasets like SYS1.PARMLIB and          *   FILE 674\n//*              others.  Ensures that AUTOSAVE is OFF for          *   FILE 674\n//*              these particular datasets so that any changes      *   FILE 674\n//*              will require a manual SAVE command before          *   FILE 674\n//*              leaving your edit session.                         *   FILE 674\n//*                                                                 *   FILE 674\n//*     CATLIBS  A new and unique way to concatenate the required   *   FILE 674\n//*              TSO and ISPF libraries at logon time.  Separates   *   FILE 674\n//*              products into convenient parmlib members that      *   FILE 674\n//*              are assigned as needed to each user group.  It's   *   FILE 674\n//*              so flexible it can hardly stand up.                *   FILE 674\n//*              Automatically recovers from missing / enqueued /   *   FILE 674\n//*              misspelled datasets.  See the CatLibs section      *   FILE 674\n//*              for more details.                                  *   FILE 674\n//*                                                                 *   FILE 674\n//*     Finders  A group of find commands to quickly and easily     *   FILE 674\n//*              find source library members of various sorts       *   FILE 674\n//*              and by various methods.  See the find utilities    *   FILE 674\n//*              section for more details on this group of very     *   FILE 674\n//*              useful programs.  They are indispensible in our    *   FILE 674\n//*              shop.                                              *   FILE 674\n//*                                                                 *   FILE 674\n//*     SVCDUMPS A modern SVC dump manager. Creates a log of        *   FILE 674\n//*              your SVC dumps.  Allows ISPF table interaction     *   FILE 674\n//*              with the log of dumps. Allows interactive          *   FILE 674\n//*              archiving, recalling, tersing, ftping, deletion    *   FILE 674\n//*              etc.  All dump management can be automated         *   FILE 674\n//*              using one multi-purpose started task.              *   FILE 674\n//*                                                                 *   FILE 674\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DTLSOURC": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x13?\\x01\\x04\\x13?\\t\\x19\\x02(\\x02(\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-12T00:00:00", "modifydate": "2004-05-12T09:19:00", "lines": 552, "newlines": 552, "modlines": 0, "user": "MA133"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "DUMPDTL": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x13?\\x01\\x04\\x13?\\t\\x19\\x01\\x0c\\x01\\x0c\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-12T00:00:00", "modifydate": "2004-05-12T09:19:00", "lines": 268, "newlines": 268, "modlines": 0, "user": "MA133"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "DUMPEXEC": {"ttr": 1032, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x13?\\x01\\x04\\x13?\\t\\x19\\x08\\xbc\\x08\\xbc\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-12T00:00:00", "modifydate": "2004-05-12T09:19:00", "lines": 2236, "newlines": 2236, "modlines": 0, "user": "MA133"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "DUMPMLIB": {"ttr": 2051, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x13?\\x01\\x04\\x13?\\t\\x19\\x000\\x000\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-12T00:00:00", "modifydate": "2004-05-12T09:19:00", "lines": 48, "newlines": 48, "modlines": 0, "user": "MA133"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "DUMPPLIB": {"ttr": 2053, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x13?\\x01\\x04\\x13?\\t\\x19\\x00\\xeb\\x00\\xeb\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-12T00:00:00", "modifydate": "2004-05-12T09:19:00", "lines": 235, "newlines": 235, "modlines": 0, "user": "MA133"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "DUMPSLIB": {"ttr": 2058, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x13?\\x01\\x04\\x13?\\t\\x19\\x00Y\\x00Y\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-12T00:00:00", "modifydate": "2004-05-12T09:19:00", "lines": 89, "newlines": 89, "modlines": 0, "user": "MA133"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "ISPMLIB": {"ttr": 2061, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x13?\\x01\\x04\\x13?\\t\\x19\\x00*\\x00*\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-12T00:00:00", "modifydate": "2004-05-12T09:19:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "MA133"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "ISPPLIB": {"ttr": 2063, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x13?\\x01\\x04\\x13?\\t\\x19\\x03\\x1d\\x03\\x1d\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-12T00:00:00", "modifydate": "2004-05-12T09:19:00", "lines": 797, "newlines": 797, "modlines": 0, "user": "MA133"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "ISPTLIB": {"ttr": 2564, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x13?\\x01\\x04\\x13?\\t\\x19\\x00\\xbb\\x00\\xbb\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-12T00:00:00", "modifydate": "2004-05-12T09:19:00", "lines": 187, "newlines": 187, "modlines": 0, "user": "MA133"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "LOGON": {"ttr": 2568, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x13?\\x01\\x04\\x13?\\t\\x19\\x03\\xdd\\x03\\xdd\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-12T00:00:00", "modifydate": "2004-05-12T09:19:00", "lines": 989, "newlines": 989, "modlines": 0, "user": "MA133"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "LPARM": {"ttr": 3076, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x13?\\x01\\x04\\x13?\\t\\x19\\x00\\x87\\x00\\x87\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-12T00:00:00", "modifydate": "2004-05-12T09:19:00", "lines": 135, "newlines": 135, "modlines": 0, "user": "MA133"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "PARMLIB": {"ttr": 3079, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x13?\\x01\\x04\\x13?\\t\\x19\\x00(\\x00(\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-12T00:00:00", "modifydate": "2004-05-12T09:19:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "MA133"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "RECBATCH": {"ttr": 3081, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00'\\x01\\x04\\to\\x01\\x04\\to\\x13\\x18\\x00%\\x00%\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-04-05T00:00:00", "modifydate": "2004-04-05T13:18:27", "lines": 37, "newlines": 37, "modlines": 0, "user": "MA133"}, "text": "/* rexx */\nArg DsnIn DsnOut .\n\nSignal On Failure\nSignal On Syntax\nSignal On Novalue\n\nReturn Main_Routine()\n/*-------------------------------------------------------------------*/\n/*- handle any problems encountered                                 -*/\n/*-------------------------------------------------------------------*/\nFailure: Say \"Failure occured on line\" Sigl; Call Cleanup; Exit(12);\nSyntax:  Say \"Syntax error on line\"    Sigl; Call Cleanup; Exit(12);\nNovalue: Say \"Novalue used on line\"    Sigl; Call Cleanup; Exit(12);\nCleanup:\nReturn\n/*-------------------------------------------------------------------*/\n/*- The main exec routine.                                          -*/\n/*-------------------------------------------------------------------*/\nMain_Routine:\n\nDsnIn = Strip(DsnIn,\"B\",\"'\")\nDsnOut = Strip(DsnOut,\"B\",\"'\")\n\nx = Prompt(\"ON\")\nQueue \"RESTORE DATASET('\"DsnOut\"')\"\nQueue \"END\"\n\"RECEIVE INDATASET('\"DsnIn\"') NODISPLAY NONAMES\"\nSaveRC = RC\nx = Prompt(x)\n\nIf SaveRC > 0 Then Do\n  Say 'Receive RC='SaveRC\n  Signal Failure\nEnd\n\nReturn 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SAMPLIB": {"ttr": 3083, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x13?\\x01\\x04\\x13?\\t\\x19\\x01\\xe5\\x01\\xe5\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-12T00:00:00", "modifydate": "2004-05-12T09:19:00", "lines": 485, "newlines": 485, "modlines": 0, "user": "MA133"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "SYSEXEC": {"ttr": 3333, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x13?\\x01\\x04\\x13?\\t\\x19\\x15\\xce\\x15\\xce\\x00\\x00\\xd4\\xc1\\xf1\\xf3\\xf3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-05-12T00:00:00", "modifydate": "2004-05-12T09:19:00", "lines": 5582, "newlines": 5582, "modlines": 0, "user": "MA133"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT674/FILE674.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT674", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}