//NEWUPDTE  JOB  (,E212),HAMLET,MSGCLASS=A,TIME=(,25),NOTIFY=           J0557738
//*
//DEFAULT OUTPUT DEFAULT=YES,UCS=P2UP,JESDS=ALL,OUTDISP=(HOLD,HOLD)
/*JOBPARM S=DEVT
//*
//*  ASSEMBLE SVCUPDTE
//*
//*ASMH EXEC PGM=IEV90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,NORENT)
//ASMH     EXEC PGM=ASMA90,REGION=4M,
// PARM='OBJECT,NODECK,XREF(SHORT),TERM,FLAG(0,NOCONT),USING(WARN(3))'
//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB
//         DD  DISP=SHR,DSN=SYS1.MODGEN
//SYSPRINT DD  SYSOUT=*
//SYSTERM  DD  SYSOUT=*
//SYSLIN   DD  DSN=&&OBJ1,UNIT=VIO,SPACE=(CYL,(2,2)),
//             DISP=(MOD,PASS),DCB=BLKSIZE=800
//SYSUT1   DD  SPACE=(CYL,(5,10)),UNIT=RIO
//SYSIN    DD  *
*PROCESS USING(WARN(3))                                             @14
         SYSSTATE ARCHLVL=2                                         @14
***********************************************************************
*                                                                     *
* Name: SVCUPDTE                                                      *
*                                                                     *
* Function: Dynamic install of ESR (SVC 109) & non-ESR Type 2/3/4     *
*           SVC                                                       *
*                                                                     *
* Purpose: This program defines an SVC routine to the system. It    @14
*          supports the installation of all ESR routed or standard  @14
*          SVC types 1, 2, 3/4, and 6. The installation of the SVC  @14
*          code is either temportary or for the life of the IPL     @14
*          depending on parameters supplied by the submitting uaer. @14
*                                                                     *
* Version/Release: V1R1                                               *
*                                                                     *
* Author:       J. Hamlet                                             *
*               Information Systems Division                          *
*               Mainframe Support Department                          *
*                                                                     *
* Installation: SAS Institute, Inc.                                   *
*               1 SAS Circle                                          *
*               Box 8000                                              *
*               Cary, N.C. 27511-8000                                 *
*                                                                     *
* Dependencies:    MVS/ESA 4.2.2 or above                           @14
*                  APF authorized                                     *
*                  SVCUPDTE for Type-1, 2, 3/4 & 6 ESR 109 SVC      @14
*                   installs                                        @14
*                                                                   @14
*               Protecting CLASS(#SNOMISC) profiles must exist for  @14
*               SVC or ESR SVC to be installed.                     @14
*                                                                   @14
*               Standard SVC protection profiles will be of the     @14
*               following form:                                     @14
*                                                                   @14
*               SVCUPDTE_nnn                                        @14
*                                                                   @14
*               where nnn is a 3 digit zoned decimal number in the  @14
*               range of 0-255 where the ESR routed SVC numbers of  @14
*               109, 116, 122 & 137 are excluded.                   @14
*                                                                   @14
*               ESR routed SVC protection profiles will be of the   @14
*               following form:                                     @14
*                                                                   @14
*               SVCUPDTE_aaabbb                                     @14
*                                                                   @14
*               where aaa is a 3 digit zoned decimal number         @14
*               representing the ESR routed SVC number and must be  @14
*               109, 116, 122 or 137 and bbb is the 3 digit zoned   @14
*               decimal function code whose range is dependent on   @14
*               the type of ESR SVC being installed. See the SVC    @14
*               parameter in the "Usage:" section below.            @14
*                                                                   @14
*                                                                   @14
* Restrictions: As currently implemented the invoking user must     @14
*               have read level authority to a pre-existing         @14
*               CL(#SNOMISC) profile that protects the SVC or ESR   @14
*               SVC slot requested by the input parameters.         @14
*                                                                   @14
* Module Type:  Procedure requires batch execution.                 @14
*                                                                   @14
* Attributes:   RENT, RMODE ANY, AMODE 31, PSW Keys 8 & zero,       @14
*                                                                   @14
*               Supervisor and problem state                        @14
*                                                                   @14
* Operation: This program defines an SVC routine to the system as a @14
*            replacement in the SVC or ESR SVC slot assigned to     @14
*            that SVC or it can list protecting RACF profiles for   @14
*            those SVC or ESR SVC slots defined for this program's  @14
*            usage in the CLASS(#SNOMISC).                          @14
*                                                                   @14
*            All SVC installations are temporary in nature and any  @14
*            newly installed SVC will be deleted when the address   @14
*            space executing the SVCUPDTE program is either stopped @14
*            via an OS STOP command or cancelled from execution by  @14
*            a Job Entry System or OS CANCEL command.               @14
*                                                                   @14
*            ENQ is used to prevent simultaneous installation of    @14
*            the same SVC by different jobs.                        @14
*                                                                   @14
* Usage: SVCUPDTE is invoked via JCL to either list existing        @14
*            CL(#SNOMISC) profiles used by this program along with  @14
*            a status report for these profiles showing any address @14
*            space that may be using an SVC or ESR SVC slot for     @14
*            testing purposes as handled by this program or the     @14
*            program can be used to perform a temporary install of  @14
*            SVC code for testing/development purposes.             @14
*                                                                   @14
*            A "LIST" request consists of a PARM field that         @14
*            contains only the text string LIST. Any other parame-  @14
*            ter specification will be considered to be an attempt  @14
*            to install or replace an SVC on the current system     @14
*            image.                                                 @14
*                                                                   @14
*            Minimum mode follows:                                  @14
*            =====================                                  @14
*                                                                   @14
*            // EXEC PGM=SVCUPDTE,PARM='LIST'                       @14
*                                                                   @14
*            The above requests that a list of the current profiles @14
*            and the usage status of those profiles is to be        @14
*            generated to a system generated ddname as a spin-      @14
*            sysout file since the SYSPRINT DD was missing.         @14
*                                                                   @14
*            Same as above but without using a spun sysout file:    @14
*            ===================================================    @14
*                                                                   @14
*            // EXEC PGM=SVCUPDTE,PARM='LIST'                       @14
*            //SYSPRINT DD SYSOUT=* <- optional                     @14
*                                                                   @14
*            SVC installs use the following JCL:                    @1*
*            ===================================                    @1*
*                                                                   @14
*            The SYSPRINT DD is not used for the SVC install path   @14
*                                                                   @14
*            // EXEC PGM=SVCUPDTE,PARM='parameters'                 @14
*            //SVCLIB DD DISP=SHR,DSN=data-set-name,                @14
*            //          FREE=CLOSE <- strongly suggested           @14
*            //SYSTSPRT DD SYSOUT=* <- optional                     @14
*                                                                   @14
*            In the above JCL we suggest that the data set name     @14
*            provided on the SVCLIB DD be freed when the program    @14
*            closes the associated DCB. If this is not done         @14
*            exclusive use of the library while the SVCUPDTE        @14
*            program is in execution.                               @14
*                                                                   @14
*            The SYSTSPRT DD being directed to a sysout class is    @14
*            optional. If there is an issue related to the parsing  @14
*            of the input parameters you should use the SYSTSPRT    @14
*            DD to gather as much information about the suspected   @14
*            parse failure before reportign the problem to the SAS  @14
*            Help Desk.                                             @14
*                                                                   @14
*          The description of the content of the above "parameters" @14
*          possibilities follows.                                   @14
*                                                                   @14
*          PARM='SVC(aaa,bbb), +                              @05@08@14
*                LMOD(cccccccc), +                            @05@08@14
*                ATTR(NPRMT,APF,AR),                                @14
*                LOCKS(LOCAL,CMS,SRM,SALLOC,DISP),                  @14
*                TYPE(t),                                           @14
*                GOODNITE(hhmm), +                                  @14
*                USER(uuuuuuuu)'                                    @14
*                                                                   @14
*          where;                                                   @14
*                                                                   @14
*            SVC  is the SVC number you want to install. There are  @14
*                 2 formats for requesting an SVC install;          @14
*                                                                   @14
*                 SVC(aaa) for a standard (non-ESR routed) SVC or   @14
*                 SVC(aaa,bbb) for an ESR-routed SVC where aaa is   @14
*                 the ESR routed SVC and bbb is the function code.  @14
*                 In the case of the SVC(aaa,bbb) format the aaa    @14
*                 value must be one of the following values;        @14
*                                                                   @14
*                 109 for a T3/4 ESR SVC                            @14
*                 116 for a T1 ESR SVC                              @14
*                 122 for a T2 ESR SVC                              @14
*                 137 for a T6 ESR SVC                              @14
*                                                                   @14
*                 The bbb value must be within an acceptable range  @14
*                 for the type of ESR SVC being defined where the   @14
*                 acceptable ranges are:                            @14
*                                                                   @14
*                 001-255 for a T3/4 ESR SVC (109)                  @14
*                 001-014 for a T1   ESR SVC (116)                  @14
*                 001-019 for a T2   ESR SVC (122)                  @14
*                 001-007 for a T6   ESR SVC (137)                  @14
*                                                                   @14
*                 Specification of an aaa value that is less than   @14
*                 200 that is not one of the above ESR routed SVC   @14
*                 numbers requires RACF global special priviledges  @14
*                 and read level access to the protecting profile   @14
*                 which must exist.                                 @14
*                                                                   @14
*                 Note: The SVC(aaa,bbb) format of this parameter   @14
*                       is mutually exclusive of the TYPE           @14
*                       parameter.                                  @14
*                                                                   @14
*                 The SVC parameter specification is required.      @14
*                                                                   @14
*            cccccccc is the name of a load module (or alias)       @14
*                 that you want to install as SVC nnn. It must      @14
*                 have the following attributes:                    @14
*                                                                   @14
*                 RENT                                              @14
*                 REFR                                              @14
*                 REUS                                              @14
*                 EXEC                                              @14
*                 Not OVLY phased                                   @14
*                 Not SCTR (Scatter) format                         @14
*                 Not RMODE=SPLIT                                   @14
*                 Not TEST/TESTRAN                                  @14
*                 AMODE 24 or AMODE 31                              @14
*                                                                   @14
*                 The load module to be installed must be loaded    @14
*                 from the 1st library that exists in the SVCLIB    @14
*                 concatenation sequence.                           @14
*                                                                   @14
*                 Note: A future release may alleviate this         @14
*                       restriction. Time just did not allow the    @14
*                       writing of the necessary code for this      @14
*                       release of the SVCUPDTE utility program.    @14
*                                                                   @14
*                 The LMOD parameter is required in all SVC         @14
*                 install attempts (non LIST executions).           @14
*                                                                   @14
*            ATTR(NPRMT,APF,AR) is the list of SVC attributes to be @14
*                 assigned to the newly installed SVC code where    @14
*                 all are optional. The supported and available SVC @14
*                 attributes are;                                   @14
*                                                                   @14
*                 NPRMT - SVC is not pre-emptable for I/O interrup- @14
*                        tions. If a non-preemptable SVC sustains   @14
*                        an I/O interrupt, the SVC, rather than the @14
*                        highest priority ready work will get       @14
*                        control when I/O processing is complete.   @14
*                        A non-preemtable SVC cannot issue other    @14
*                        SVCs and remain non-preemptable. If a non- @14
*                        preemtable SVC issdues a STAX DEFER=NO     @14
*                        macro the SVC routine remain non-preemp-   @14
*                        table until it exits.                      @14
*                         DEFAULT: SVC will be pre-emptible         @14
*                                                                   @14
*                 APF   - SVC caller must be APF authorized         @14
*                         DEFAULT: Caller does not need to be APF   @14
*                                  authorized.                      @14
*                                                                   @14
*                 AR    - SVC caller can be in Access Register (AR) @14
*                         ASC mode.                                 @14
*                         DEFAULT: AR mode callers are not          @14
*                                  supported.                       @14
*                                                                   @14
*                 Note: This parameter is optional.                 @14
*                                                                   @14
*            LOCKS(LOCAL,CMS,SRM,SALLOC,DISP) is the list of        @14
*                 available system locks for the SVC FLIH (First    @14
*                 Level INterrupt Handler) to obtain before the SVC @14
*                 entry point is given control on bahalf of the SVC @14
*                 caller. Several of these locks are restricted as  @14
*                 they could impact other users of the system in    @14
*                 the case of a problem in the introduced SVC code. @14
*                 The locks specifications supported are:           @14
*                                                                   @14
*                 LOCAL  - This is a local suspend lock used to     @14
*                         serialize functions and storage within a  @14
*                         local address space. One local lock       @14
*                         exists per address space. Type 3/4 SVCs   @14
*                         are always entered with the local lock    @14
*                         obtained regardless of wheter the local   @14
*                         lock was requested.                       @14
*                                                                   @14
*                 CMS    - This is a GLOBAL SUSPEND lock used for   @14
*                          serialization on more than one address   @14
*                          space when the serialization is not      @14
*                          provided by one or more of the other     @14
*                          available global locks. The CMS lock     @14
*                          provides global serialization when k     @14
*                          enablement is required. See the section  @14
*                          titled "Serialization Summary" in the    @14
*                          "z/OS Diagnosis: Reference" manual for   @14
*                          additional information.                  @14
*                                                                   @14
*                 Note: T3/4 SVCs can only request LOCAL or         @14
*                       LOCAL+CMS locks                             @14
*                                                                   @14
*                 The following lock specifications can only be     @14
*                 requested by a userid that has RACF Global        @14
*                 Special priviledges and also has ACCESS(READ)     @14
*                 authority for the protecting CLASS(#SNOMISC)      @14
*                 profile that protects the SVC of ESR SVC sllot.   @14
*                                                                   @14
*                 SRM    - This is a GLOBAL SPIN lock that          @14
*                         serializes SRM control blocks and         @14
*                         data used by the SRM/OPT/WLM components   @14
*                         of z/OS.                                  @14
*                                                                   @14
*                 SALLOC - This is a GLOBAL SPIN lock that          @14
*                         serializes external routines that enable  @14
*                         a processor for either an emergency       @14
*                         signal (EMS) or a malfunction alert (MA). @14
*                                                                   @14
*                 DISP   - This is a GLOBAL SPIN lock that          @14
*                         serializes certain global functions that  @14
*                         are controlled by the z/OS Dispatcher.    @14
*                         Some examples are WEB and TIMER queues    @14
*                         but there are a lot of others.            @14
*                                                                   @14
*                                                                   @14
*                 Note: If no LOCKS parameter is supplied you will  @14
*                       get the IBM default lock assignment for the @14
*                       SVC type being installed.                   @14
*                                                                   @14
*            TYPE(t) is the parameter that supplies the SVC type    @14
*                 that is to be installed. The possible values for  @14
*                 t are;                                            @14
*                                                                   @14
*                 1 - for a type 1 SVC                              @14
*                 2 - for a type 2 SVC                              @14
*                 3 - for a type 3 SVC                              @14
*                 4 - for a type 4 SVC                              @14
*                 6 - for a type 6 SVC                              @14
*                                                                   @14
*                 The TYPE specification and the SVC(aaa,bbb) form  @14
*                 of the SVC parameter are mutually exclusive.      @14
*                                                                   @14
*                 A type 3 SVC traditionally identified a function  @14
*                 that is contained in a single load module while   @14
*                 a type 4 SVC identified a a function that loads   @14
*                 additional modules. In the past one could         @14
*                 identify these loaded modules as IGC01nnn,...,    @14
*                 and IGC0xnnn. (IGC01nnn is the first module that  @14
*                 IGC00nnn loads, IGC02nnn is the second module     @14
*                 that IGC00nnn loads, etc.) These old conventions  @14
*                 no longer hold water and the SVCUPDTE program     @14
*                 although supporting both TYPE(3) and TYPE(4)      @14
*                 specifications it does not support the specifica- @14
*                 tion of more than one LMOD to provide the         @14
*                 traditional TYPE(4) environment. All know IBM     @14
*                 and vendor utilities used to display the SVC      @14
*                 table entries will show "T3/4" for either a type  @14
*                 3 or 4 SVC entry.                                 @14
*                                                                   @14
*                 For a non-ESR SVC installation...SVC(aaa) form    @14
*                 of the SVC parameter the TYPE parameter is        @14
*                 required.                                         @14
*                                                                   @14
*            GOODNITE(hhmm) is the parameter that supplies a time   @14
*                 later on the same execution day that the SVCUPDTE @14
*                 program will use to automatically uninstall the   @14
*                 installed SVC and place back in service the       @14
*                 previously existing SVC in the same SVC or ESR    @14
*                 SVC slot.                                         @14
*                                                                   @14
*                 This parameter is optional.                       @14
*                                                                   @14
*            USER(uuuuuuuu) parameter is used to supply a "filter"  @14
*                 userid. The logic is such that only this userid   @14
*                 will have access to the newly installed SVC code  @14
*                 while all other users of the SVC will have their  @14
*                 SVC requests sent to the old entry point.         @14
*                                                                   @14
*                 Note: When using the USER(uuuuuuuu) parameter     @14
*                       one must be aware that a single SVC or ESR  @14
*                       SVC slot supports both the old SVC and new  @14
*                       SVC code. Thus any ATTR or LOCKS assignment @14
*                       for the new SVC will be in place for the    @14
*                       old SVC callers also. Tus we discourage the @14
*                       use of the USER(uuuuuuuu) parameter in      @14
*                       combination with any change to the original @14
*                       SVC or ESR SVC slot's locks or attributes   @14
*                       supplied by any LOCKS or ATTR parameters    @14
*                       furnished by the user for the new SVC. A    @14
*                       case in point. Assume ATTR(APF) was speci-  @14
*                       fied in combination with the USER(uuuuuuuu) @14
*                       parameter for a replacement SVC. If this    @14
*                       was done the result would be that both the  @14
*                       calls to the old SVC and the calls to the   @14
*                       new SVC would have to come from an APF      @14
*                       authorized environment. This may not have   @14
*                       been the intent of the SVC installer.       @14
*                                                                   @14
* Return codes:                                                       *
*                                                                   @14
*        0  Successful completion: SVC has been installed and       @14
*           uninstalled or the requested LIST operation completed   @14
*           successfully                                            @14
*                                                                   @14
*        1  SVCUPDTE program not APF authorized                     @14
*                                                                   @14
*        2  Required SVCUPDTE profile does not exist                @14
*                                                                   @14
*        3  Required SVC keyword not present                        @14
*                                                                   @14
*        4  Required SVCLIB DDname missing                          @14
*                                                                   @14
*        6  Required IRRSEQ00 service not available                 @14
*                                                                   @14
*        8  User not authorized to add/replace SVC specified        @14
*                                                                   @14
*        9  ERRET routine driven for LOAD SVC                       @14
*                                                                   @14
*       10  Non-zero return code from IKJTSOEV service              @14
*                                                                   @14
*       12  ENQ for SVCUPDTE resource failed                        @14
*                                                                   @14
*       16  LMOD supplied module name not found on SVCLIB library   @14
*                                                                   @14
*       18  Unable to obtain IRRSEQ00 workarea                      @14
*                                                                   @14
*       19  Unable to obtain RIBs workarea                          @14
*                                                                   @14
*       20  Illegal execution environment                           @14
*                                                                   @14
*       24  Backing slot for requested SVC or ESR-SVC is not T2/3/4 @14
*           (obsolete)                                              @14
*                                                                   @14
*       26  Report sysout file allocation failure                   @14
*                                                                   @14
*       32  Open for report sysout file failed                      @14
*                                                                   @14
*       34  SAF extract failure                                     @14
*                                                                   @14
*       35  ESR T1/2/6 SVCs not supported (obsolete)                @14
*                                                                   @14
*       36  No SVCUPDTE profiles found                              @14
*                                                                   @14
*       37  EXTR000 - not CLASS(#SNOMISC) profile returned          @14
*                                                                   @14
*       38  EXTR000 - SD (Segment Descriptor) number returned was   @14
*           not 1                                                   @14
*                                                                   @14
*       39  EXTR000 - BASE segment not returned                     @14
*                                                                   @14
*       40  EXTR000 - Invalid length SVCUPDTE_* profile found on    @14
*           extract operation                                       @14
*                                                                   @14
*       41  CHKINUSE - unexpected GQSCAN return code received       @14
*                                                                   @14
*       42  Unable to acquire MLWTO workarea                        @14
*                                                                   @14
*       44  OPEN for SVCLIB data set failed                         @14
*                                                                   @14
*       48  SWAREQ request failed                                   @14
*                                                                   @14
*       52  SVCLIB not DSORG=PO/POE                                 @14
*                                                                   @14
*       56  SVCLIB not RECFM=U                                      @14
*                                                                   @14
*       60  SVCLIB library cannot be multi-volume                   @14
*                                                                   @14
*       64  Member name coded on SVCLIB (not supported)             @14
*                                                                   @14
*       68  Invalid LOCKS parameter supplied                        @14
*                                                                   @14
*       72  SVC number parameter supplied not numeric               @14
*                                                                   @14
*       73  SVCUPDTE reveral failed                                 @14
*                                                                   @14
*       76  GOODNITE time (hhmm) supplied parameter not numeric     @14
*                                                                   @14
*       80  SVC number not in range 0-255                           @14
*                                                                   @14
*       84  GOODNITE time (hhmm) supplied parameter out of range    @14
*                                                                   @14
*       88  GOODNITE time (hhmm) supplied time less than current    @14
*           time                                                    @14
*                                                                   @14
*       92  ESR T3/4 naming convention violation (obsolete)         @14
*                                                                   @14
*       96  LMOD module attribute requirements not met              @14
*                                                                   @14
*      100  LOAD for LMOD module failed                             @14
*                                                                   @14
*      104  LMOD module is RMODE=SPLIT                              @14
*                                                                   @14
*      105  LMOD module not marked RENT on SVCLIB                   @14
*                                                                   @14
*      106  LMOD module not marked REUS on SVCLIB                   @14
*                                                                   @14
*      107  LMOD module not marked REFR on SVCLIB                   @14
*                                                                   @14
*      108  LMOD module not marked EXEC on SVCLIB                   @14
*                                                                   @14
*      109  LMOD module cannot be marked OVLY on SVCLIB             @14
*                                                                   @14
*      110  LMOD module cannot be marked SCTR on SVCLIB             @14
*                                                                   @14
*      111  LMOD module cannot be marked SPLIT on SVCLIB            @14
*                                                                   @14
*      112  Bad lgic (loc #__) - R15=________                       @14
*                                                                   @14
*      113  LMOD module cannot be marked TEST/TESTRAN on SVCLIB     @14
*                                                                   @14
*      114  LMOD module must be on 1st library in any SVCLIB        @14
*           supplied concatenation sequence                         @14
*                                                                   @14
*      120  Insufficient CSA/ECSA for SVC module to be installed    @14
*                                                                   @14
*      121  Insufficient ESQA for USER filter code                  @14
*                                                                   @14
*      124  User not authorized to set requested LOCK               @14
*                                                                   @14
*      128  Missing input parameter/parameters                      @14
*                                                                   @14
*      132  Excessive input parameter length                        @14
*                                                                   @14
*      136  Invalid character(s) in input parameters found          @14
*                                                                   @14
*      137  IKJPARS failed parameter string                         @14
*                                                                   @14
*      140  Invalid PARM field found                                @14
*                                                                   @14
*      141  SVC or ESR SVC slot ENQ SYSTEM failed                   @14
*                                                                   @14
*      142  Non-ESR SVC request requires TYPE be specified          @14
*                                                                   @14
*      143  SVCUPDTE service request failed                         @14
*                                                                   @14
*      144  QEDIT failure                                           @14
*                                                                   @14
* Abends:                                                             *
*                                                                   @14
*      U901  - Unable to obtain ENQ for SYSZSVC table               @14
*                                                                   @14
*      U902  - QEDIT limit set failure                              @14
*                                                                   @14
*      U333  - Invalid logic detected during parse processing       @14
*                                                                   @14
*      U334  - Logic error detected in TYPE assignment              @14
*                                                                   @14
*      U1001 - Invalid SVC type passed parsing                      @14
*                                                                   @14
*                                                                     *
* Modification Log                                                    *
* ================                                                    *
* D a t e tag         Description of change & responsible party       *
* ======= === ======================================================= *
* 01Jun96 n/a -Genesis. Goal to reduce IPLs for SVC Type 3 installs.  *
*              **********************************************<SNOJRH> *
* 10Jun96 @01 -Leave SVC installed and exit if module was loaded from *
*              LPA and "goodnight" time missing in PARM.*****<SNOJRH> *
* 12Jun96 @02 -Issue ENQ on SYSZSVC/table to prevent simultaneous     *
*              updates.**************************************<SNOJRH> *
* 14Jun96 @03 -Restore address of old SVC after temporary install of  *
*              SVC.******************************************<SNOJRH> *
* 10Oct97 @04 -Fix "good-night" routine which hasn't been working for *
*              a while.**************************************<SNOJRH> *
* 28Oct98 @05 -Restrict access to new SVC to userid specified in PARM *
*              field. Idea from Gilbert Saint-Flour. Survive LPA      *
*              resident check when performing screen.********<SNOJRH> *
* 16Nov98 @06 -Support to install IGX00nnn named module as a Type-3   *
*              ESR function (only ESR SVC 109 supported).****<SNOJRH> *
* 01Dec98 @07 -Prevent conflict on ENQ when SVC 109 is being used for *
*              ESR install when ESR numbers are unique and being      *
*              tested simultaneously.************************<SNOJRH> *
* 01Dec98 @08 -PARM option for LOCAL and CMS locks for special test   *
*              requirements.*********************************<SNOJRH> *
* 27Nov01 @09 -Reviewed support for dynamic LPA and found CDNIP check *
*              following CHECKLPA label is sufficient and that the    *
*              ECVTDLPF (first) through ECVTDLPL (last) chain does    *
*              not need to be scanned for dynamic LPA queue           *
*              existence.************************************<SNOJRH> *
* 12Jul11 @10 -Updated for FLAG(PAGE0)***********************<SNOSEW> *
* 15Dec11 @11 -Support for Large Page Support...i.e support for       *
*              1MB page sizes. PGSER PROTECT|UNPROTECT operations are *
*              not supported for locations in the R/O Nucleus even if *
*              1MB page support is not enabled on the newer           *
*              processors the R/O Nucleus will be backed by 1MB       *
*              pages. If PGSER PROTECT|UNPROTECT operations are       *
*              attempted on the newer processors for areas in the     *
*              R/O nucleus a S18A abend will occur with the reason    *
*              code placed in GPR0 identifying the operation. The     *
*              code is now upward and downward compatible for all     *
*              supported z/OS releases.***************<SNOJRH/SNOSEW> *
* 15Dec11 @12 -Fix bug left over from @06 change where wrong register *
*              used to preserve ESR function code in the ESR# field.  *
*              **********************************************<SNOJRH> *
* 16Dec11 @13 -Fix bug left over from @07 change where SVCNO was used *
*              execute form of ENQ instead of RNAME. This resulted in *
*              the SVC number parameter being repeated twice as the   *
*              RNAME when an ESR SVC was involved instead of the SVC  *
*              number followed by the ESR number.************<SNOJRH> *
* 25Oct13 n/a -Replaced displacement branches with relative branches. *
*              **********************************************<SNOJRH> *
* 22Jul15 @14 -Version 2 Release 0 (total rewrite):                   *
*              -Program now designed to run from the system LNKLST    *
*               by verifying that it is not being executed under TEST *
*               or TESTAUTH.                                          *
*              -SVC load modules will now be loaded from SVCLIB       *
*               instead of STEPLIB.                                   *
*              -Above SVCLIB library does NOT need to be APF          *
*               authorized.                                           *
*              -Will now issue WTO indicating what user has installed *
*               what SVC.                                             *
*              -Requires batch execution now instead of as a started  *
*               procedure.                                            *
*              -Lots of new return codes added due to use of IRRSEQ00 *
*               (RACF Administration) service and support for users   *
*               requesting an inventory report of registered SVC slot *
*               profiles using that service.                          *
*              -Users attempting to install/replace an SVC will have  *
*               the following CLASS(#SNOMISC) rule checked:           *
*                                                                     *
*               SVCUPDTE_xxxyyy                                       *
*                                                                     *
*               where;                                                *
*                                                                     *
*               xxx is the SVC number and                             *
*                                                                     *
*               yyy is the ESR function code if xxx is an ESR routed  *
*                   SVC. The yyy portion is not present if the        *
*                   xxx portion represents a standard SVC.            *
*                                                                     *
*              **********************************************<SNOJRH> *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE 1                                                    @14
* Local macros                                                      @14
         SPACE 1                                                    @14
*-----------------------------------------------------------------* @14
*  $RWTO macro for writing messages to the operator where the WTO * @14
*  MF=L template is remote.                                       * @14
*-----------------------------------------------------------------* @14
         MACRO ,                                                    @14
&NAME    $RWTO &MSG,&WRITE=YES                                      @14
         AIF   ('&NAME' EQ '').NONAME                               @14
&NAME    DS    0H                                                   @14
.NONAME  ANOP                                                       @14
         AIF   (K'&MSG EQ 0).ERROR1                                 @14
         AIF   (K'&MSG GT 8).ERROR2                                 @14
         AIF   ('&MSG' EQ 'WTOD').NOMVC   Bypass MVC if msg set up  @14
         LARL  R1,&MSG                 Resolve long relative @      @14
         MVC   WTOD(&MSG.L),0(R1)      Copy WTO message to DWS area @14
         AIF   ('&WRITE' EQ 'NO').NOWRITE Bypass write if requested @14
.NOMVC   ANOP                                                       @14
         LA    R1,WTOD                 Load WTO address             @14
         XR    R0,R0                   Clear R0                     @14
         WTO   MF=(E,(1))               & issue message to operator @14
         MEXIT                                                      @14
.NOWRITE ANOP                                                       @14
         MEXIT                                                      @14
.ERROR1  MNOTE 8,'ERROR:  Message variable name missing'            @14
         MEXIT                                                      @14
.ERROR2  MNOTE 8,'ERROR:  Message variable name must be LT 8 bytes' @14
         MEND                                                       @14
*
SVCUPDTE CSECT
SVCUPDTE AMODE 31
SVCUPDTE RMODE ANY
*        USING SVCUPDTE,R15        Initial addressability           @14
*        J     RESUME              Go to resume point               @14
         J     MAIN000             Go to resume point               @14
*
PGMNAME  DC    CL8'SVCUPDTE'
PGMVER   DC    CL8'V2R0M0'                                          @14
PGMDATE  DC    CL8'&SYSDATC'
PGMTIME  DC    CL8'&SYSTIME'
*
*RESUME  DS    0H                                                   @14
MAIN000  DS    0H                                                   @14
*        DROP  R15                 Lose initial addressability
*        STM   R14,R12,12(R13)     Save caller's registers          @14
         BAKR  R14,0               Save status on linkage stack     @14
         LARL  R12,LTORG_AREA                                       @14
         USING (LTORG_AREA,LTORG_AREA_END),R12                      @14
         LAE   R12,0(R12,0)        Establish LTORG base             @14
*        BALR  R10,0               Set base register                @14
*        USING *,R10               Inform assembler                 @14
         L     R4,0(,R1)       R4->PARM address (preserve for PARSE)
         L     R0,=A(DWSLEN)                                        @14
*                                                                   @14
*        Obtain & clear working storage                             @14
*                                                                   @14
         STORAGE OBTAIN,           Get storage                      @14X
               LENGTH=(R0),                                         @14X
               LOC=BELOW,                                           @14X
               BNDRY=PAGE                                           @14
         AGO   .JRH0217A                                            @14
         GETMAIN R,LV=DYNAML       Get storage
         ST    R13,4(,R1)          Chain
         ST    R1,8(,R13)           save
         LR    R13,R1                areas
         USING DYNAM,R13           DWS addressability
         LA    R14,DYNAM+72        Clear work area
         LA    R15,DYNAML-72       """""""""""""""
         SLR   R1,R1               """""""""""""""
         MVCL  R14,R0              """""""""""""""
.JRH0217A ANOP                                                      @14
*                                                                   @14
*        Clear work area & set LSE indicator in stack               @14
*                                                                   @14
         LAE   R13,0(R1,0)         Load storage address             @14
         USING DWS,R13             Addressability                   @14
         LAE   R0,DWS              Clear                            @14
         L     R1,=A(DWSLEN)                                        @14
         LAE   R14,0(0,0)           storage                         @14
         SR    R15,R15                                              @14
         MVCL  R0,R14                area                           @14
*                                                                   @14
*        Initialize some one time only DWS fields                   @14
*                                                                   @14
         ST    R13,DWSADDR         Save DWS address (for ESTAEX)    @14
         MVC   SAVEAREA+4(4),=C'F1SA'  Put acronym in save area     @14
*                                                                   @14
         ST    R4,@INPARMS         Save @  parameters in DWS        @14
         XC    RETCODE,RETCODE     Clear higher level return code   @14
******************************************************************* @14
*                                                                 * @14
* Note: For all BRASL invoked subroutines called below the called * @14
*       routine is responsible for:                               * @14
*                                                                 * @14
*       1) Issuing an appropriate WTO regarding any failure       * @14
*       2) Returning here to exit with the return code from the   * @14
*          subroutine posted in the RETCODE field                 * @14
*                                                                 * @14
*        Perform main environmental checks before parsing         * @14
*        parameters.                                              * @14
*                                                                 * @14
******************************************************************* @14
         BRASL R14,INIT000         Perform initial checks           @14
         L     R15,RETCODE         Restore return code              @14
         LTR   R15,R15             Any errors ?                     @14
         JNZ   MAINX               ...jif so, MLT                   @14
*                                                                   @14
*        Acquire storage for RIBs return area                       @14
*                                                                   @14
*        -This area is common to reporting (LIST) & install         @14
*         operations and should be freed on exit from the mainline  @14
*         routine.                                                  @14
*                                                                   @14
         LARL  R1,RIBSPACE         Get @ of size of area to acquire @14
         L     R0,0(R1)            R0 = size of area to acquire     @14
         ST    R0,AMOUNTL          Save in GQSCAN structure         @14
         STORAGE OBTAIN,           Get working storage              @14X
               COND=YES,                                            @14X
               LENGTH=(R0),                                         @14X
               LOC=ANY,                                             @14X
               BNDRY=PAGE                                           @14
         LTR   R15,R15             Did we get the RIBs storage ?    @14
         JZ    MAIN010             ...jif yes, continue             @14
*                                                                   @14
*        Unable to acquire RIBs work area                           @14
*                                                                   @14
         $RWTO MSG018A,WRITE=YES                                    @14
         LHI   R15,BADENV19        Set return code                  @14
         ST    R15,RETCODE          & save it                       @14
         J     MAINX                 & go exit w/ return code       @14
*                                                                   @14
*        Clear obtained RIBs work area                              @14
*                                                                   @14
MAIN010  DS    0H                                                   @14
         OI    FLAGS,F1#RIBSA      Indicate RIBs area acquired      @14
         ST    R1,RIBS             Save pointer for later           @14
         ST    R1,RIBSPACE_p       Save pointer for refresh         @14
         LR    R2,R1               Dynamic address to R2 for MVCL   @14
         LARL  R3,RIBSPACE         Get size of area to clear        @14
         L     R3,0(R3)            R3 = size of area to clear       @14
         LA    R4,0                Source                           @14
         LA    R5,0                Source len of 0 + pad byte of 0  @14
         MVCL  R2,R4               Clear the dynamic RIBs storage   @14
*                                                                   @14
*        Check to see if invoker has system level privileges        @14
*                                                                   @14
         BRASL R14,SYSC000         Go check for system priviledges  @14
         L     R15,RETCODE         Restore return code              @14
         LTR   R15,R15             Any errors ?                     @14
         JNZ   MAINX               ...jif so, MLT                   @14
*                                                                   @14
*        Parse input parameters & stage for processing              @14
*                                                                   @14
*        J     GOLIST              <development - to skip parse>    @14
         BRASL R14,PARS000         Go parse input parameters        @14
         L     R15,RETCODE         Restore return code              @14
         LTR   R15,R15             Any errors ?                     @14
         JNZ   MAINX               ...jif so, MLT                   @14
*                                                                   @14
*        Was LIST requested ? If so go generate report              @14
*                                                                   @14
*        -LIST option skips environmental checks in ENV000          @14
*                                                                   @14
         TM    Parse_flags,Parse_LIST                               @14
         JNO   MAIN100                                              @14
GOLIST   DS    0H                  <development - to skip parse>    @14
         BRASL R14,REPORT          Generate SVC slot profile report @14
         J     MAINX               Just return for LIST option      @14
*                                                                   @14
* Note: Successful parse means at least minimum required            @14
*       parameters have been supplied and all flags regarding       @14
*       SVC attributes have been validated & set for the processing @14
*       phase.                                                      @14
*                                                                   @14
*        Perform environmental checks                               @14
*                                                                   @14
MAIN100  DS    0H                                                   @14
         BRASL R14,ENV000          Go check environmentals          @14
         L     R15,RETCODE         Restore return code              @14
         LTR   R15,R15             Any errors ?                     @14
         JNZ   MAINX               ...jif so, MLT                   @14
*                                                                   @14
*        Go load & install the SVC                                  @14
*                                                                   @14
         BRASL R14,INST000         Go install SVC                   @14
         L     R15,RETCODE         Restore return code              @14
         LTR   R15,R15             Any errors ?                     @14
         JNZ   MAINX               ...jif so, MLT                   @14
*                                                                   @14
*        Free RIBs work area if acquired                            @14
*                                                                   @14
MAINX    DS    0H                                                   @14
         TM    FLAGS,F1#RIBSA      Was RIBs work area acquired ?    @14
         JNO   MAINX_010           ...jif not , skip free           @14
         L     R9,AMOUNTL          R9 = size of area to free        @14
         L     R3,RIBS             R3 -> @ of area to free          @14
         STORAGE RELEASE,                                           @14X
               LENGTH=(R9),                                         @14X
               ADDR=(R3)           Free WIBs work area storage      @14
*                                                                   @14
*        Close any still open files                                 @14
*                                                                   @14
MAINX_010 DS   0H                                                   @14
         USING IHADCB,R10                                           @14
         LA    R10,SVCLIB          R10 -> SVCLIB DCB                @14
         TM    DCBOFLGS,DCBOFOPN   Is dataset open ?                @14
         JNO   MAINX_020           ...jif not, skip CLOSE           @14
         OI    W#OPNDO,X'80'       Indicate end of parameter list   @14
         CLOSE ((R10)),MODE=31,MF=(E,W#OPNDO) Close SVCLIB          @14
         DROP  R10                 Lose SVCLIB DCB addressability   @14
MAINX_020 DS   0H                                                   @14
         L     R9,RETCODE          Restore return code for caller   @14
         STORAGE RELEASE,                                           @14X
               LENGTH=DWSLEN,                                       @14X
               ADDR=(R13)          Free DSA storage                 @14
         LR    R15,R9              Set return code for caller       @14
         PR                    Return to caller via Linkage Stack   @14
*                                                                   @14
         TITLE 'SVCUPDTE - INST000 - setup && install SVC'          @14
******************************************************************* @14
*                                                                 * @14
* This routine is responsible for the following functions:        * @14
*                                                                 * @14
* 1) Obtain communications ECB address for support of the system  * @14
*    STOP command and disable SMF JWT recording.                  * @14
* 2) ENQueue on SVCUPDTE_xxx or SVCUPDTE_xxxyyy to serialize      * @14
*    update to specific SVC table entry by any other address      * @14
*    space on this same system.                                   * @14
* 3) Fetch SVC or ESR-SVC entry to be replaced and squirrel it    * @14
*    away in the OLDENTRY field. The entry point for the "old"    * @14
*    SVC table entry is also saved in the SVCENTRY_PTR field.     * @14
* 4) Obtain SP241 or SP228 CSA or ECSA as appropriate for the     * @14
*    loading of the "new" SVC code. The address of this area is   * @14
*    saved in the @CSAEPN field. The entry point address is       * @14
*    calculated and saved in the @CSAEPN@ field. The length of    * @14
*    this area is located in the MODSIZE field.                   * @14
* 5) Perform a directed load of the user's SVC code into the      * @14
*    area obtained in 4).                                         * @14
* 6) CLOSE the SVCLIB data set.                                   * @14
* 7) If USERID filtering is to be used obtain SP245 SQA storage   * @14
*    for copying and updating filter code which will become the   * @14
*    SVC/ESR slot's entry point value. The address of this area   * @14
*    is saved in the SQA_ADDR field. The length of this area is   * @14
*    the value of the CHKU500L equate.                            * @14
* 8) Construct SVCUDTE parameter list based on flags & attributes * @14
*    captured during parse processing for the "new" SVC entry.    * @14
* 9) Construct SVCUDTE parameter list based on the SVC entry      * @14
*    captured in the OLDENTRY field in 3) above.                  * @14
* 10) Enqueue on the SVC table to serialize SVC table update.     * @14
* 11) Update the SVC table                                        * @14
* 12) Release enqueue on the system SVC table                     * @14
* 13) If GOODNITE time specified issue STIMERM supplying address  * @14
*     of communications ECB and the GOODNITE exit routine's       * @14
*     address to be given control.                                * @14
* 14) Issue ESTAE to be given control on CANCEL command for this  * @14
*     address space                                               * @14
* 15) Issue LONG=YES WAIT for a STOP command (or CANCEL command)  * @14
*     Obtain enqueue on SVC table.                                * @14
* 16) Place old SVC entry back in the SVC slot.                   * @14
*     Release enqueue on SVC table.                               * @14
* 17) Free ESAQ storage occupied by filter code.                  * @14
* __) Free CSA/ECSA storage occupied by user's SVC code.          * @14
* __) Exit.                                                       * @14
*                                                                 * @14
******************************************************************* @14
INST000  DS    0H                                                   @14
         STM   R14,R12,SAVE@L1+12  Save caller's registers          @14
*
*        Disable SMF JWT
*
         MODESET KEY=ZERO,MODE=SUP
         L     R2,PSAAOLD-PSA(0,0) Our ASCB
         OI    ASCBRCTF-ASCB(R2),ASCBTOFF  Present S522 abends
*
*        Initialize console interface
*
         MODESET KEY=NZERO,MODE=PROB Return to TCB key
         L     R3,CVTPTR(0,0)      Get CVT address
         USING CVT,R3              CVT addressability
         L     R4,CVTTCBP          Get IEATCBP address
         DROP  R3                  Drop CVT
         L     R4,4(,R4)           Get current TCB address
         USING TCB,R4              TCB addressability
         L     R5,TCBJSCB          Get JSCB address
         DROP  R4                  Drop TCB
         USING IEZJSCB,R5          JSCB addressability
         L     R6,JSCBCSCB         Get CSCB address
         ST    R6,@CSCB            Save CSCB address
         USING CSCB,R6             CSCB addressability
         L     R8,CHCSCXP          R8 -> CSCX
         USING CSCX,R8             CSCX addressability
         L     R0,CHECBP           Load STOP/MODIFY ECB address
         ST    R0,CIBECB           Store ECB address in work area
         ICM   R7,B'1111',CHCIBP   Get CIB address
         LTR   R7,R7               Is it a START CIB ?
         JZ    INST005             ...jif not, we don't have one
         USING CIB,R7              CIB addressability
         CLI   CIBVERB,CIBSTART    Is this the START CIB ?
         JNE   INST005             ...jif not, keep it in the chain
         QEDIT ORIGIN=CHCIBP,BLOCK=(7) Free the START CIB
         LTR   R15,R15             Was the QEDIT successful ?
         JZ    INST005             ...jif so...go set CIB limit
*
*        Issue message about QEDIT failure (free)
*
         LR    R4,R15              Preserve QEDIT return code
         ST    R15,DWD             """"""""""""""""""""""""""
         $RWTO MSG914A,WRITE=NO
         LA    R14,DWD             R14 -> source area to convert    @14
         LA    R15,MSG914AA        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES                                       @14
         LHI   R15,BADQEDIT        Set return code                  @14
         ST    R15,RETCODE          & save it                       @14
         J     INSTX                 & make like trees
INST005  DS    0H                  Set CIB limit
         QEDIT ORIGIN=CHCIBP,CIBCTR=1  Set CIB limit to one
         LTR   R15,R15             Was the QEDIT successful ?
         JZ    INST007             ...jif so...go to resume point
*
*        Issue message about QEDIT failure (limit=1)
*
         LR    R4,R15              Preserve QEDIT return code
         ST    R15,DWD             """"""""""""""""""""""""""
         $RWTO MSG917A,WRITE=NO
         LA    R14,DWD             R14 -> source area to convert    @14
         LA    R15,MSG917AA        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES                                       @14
         LHI   R15,BADQEDIT        Set return code                  @14
         ST    R15,RETCODE          & save it                       @14
         J     INSTX                 & make like trees
*
*        CIBECB field contains communications ECB address
*
*                                                                   @14
*        ENQueue on SVC table entry slot as used by this program    @14
*                                                                   @14
*        Note: QNAME & RNAME already filled in by CHKINUSE routine  @14
*        Note: RNAME length found in RNAMEEL field also by CHKINUSE @14
*                                                                   @14
INST007  DS    0H                                                   @14
         MVC   ENQL(ENQMODLL),ENQMODL  Install model slot ENQ       @14
         XR    R7,R7               Clear RNAME length register      @14
         ICM   R7,B'0001',RNAMEEL  Insert length                    @14
         ENQ   (QNAME,RNAME,E,(R7),SYSTEM),RET=USE,MF=(E,ENQL)      @14
         ST    R15,DWD             Save return code                 @14
         LTR   R15,R15             Did we get the SVC slot ?        @14
         JZ    INST010             ...jif so                        @14
*                                                                   @14
*        Issue ENQ failure during install message                   @14
*                                                                   @14
         $RWTO MSG909A,WRITE=NO                                     @14
         LA    R14,DWD             R14 -> source area to convert    @14
         LA    R15,MSG909AA        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES                                       @14
         LHI   R15,BADFENQ         Set return code                  @14
         ST    R15,RETCODE          & save it                       @14
         J     INSTX                 & go exit w/ return code       @14
*                                                                   @14
*        We now have ENQ on SVC table slot used by this program     @14
*                                                                   @14
*        Fetch SVC table entry for base SVC number                  @14
*                                                                   @14
INST010  DS    0H                                                   @14
*        WTO   'INST010 - we obtained SVC slot ENQueue'             @14
         L     R3,CVTPTR(0,0)      R3->CVT                          @14
         USING CVTMAP,R3           CVT addressability               @14
         L     R4,CVTABEND         R4->Secondary CVT                @14
         DROP  R3                  Drop CVT                         @14
         USING SCVTSECT,R4         SCVT addressability              @14
         SLR   R5,R5               Clear for insert                 @14
         ICM   R5,B'0001',SVC#     Insert SVC number                @14
         SLL   R5,3                Multiply by 8                    @14
         AL    R5,SCVTSVCT         Add origin of SVC table          @14
         USING SVCENTRY,R5         SVC entry addressability         @14
         ST    R5,SVCENTRY_PTR     Save entry address               @14
*                                                                   @14
*        See if ESR SVC to fetch correct entry                      @14
*                                                                   @14
         TM    ATTR_FLAGS,ATTR_ESR ESR SVC request ?                @14
         JNO   INST020             ...jif not                       @14
*                                                                   @14
*        Adjust for ESR slot to fetch correct entry                 @14
*                                                                   @14
         XR    R1,R1               Clear for insert                 @14
         ICM   R1,B'0001',ESR#     Insert binary ESR #              @14
         SLL   R1,3                Multiply by 8                    @14
         L     R5,SVCEP            R5->ESR table                    @14
         LA    R5,SVCENTRY+8(R1)   R5->ESR entry                    @14
         ST    R5,SVCENTRY_PTR     Save ESR entry address           @14
INST020  DS    0H                                                   @14
         MVC   OLDENTRY,SVCENTRY   Save old SVC entry contents      @14
*        WTO   'INST020 - we obtained SVC slot info'                @14
         DROP  R5                  Drop SVC entry addressability    @14
*                                                                   @14
*        Obtain CSA/ECSA storage for user's SVC code                @14
*                                                                   @14
         L     R2,MODSIZE          Obtain in storage key 0          @14
         MODESET KEY=ZERO,MODE=SUP Go to Key 0 SUP state            @14
         TM    FLAGS,F1#AM31       AMODE = 31/64 module ?           @14
         JNO   INST030            ...jif not                        @14
* Obtain 31-bit ECSA SP228 storage for the load module              @14
         STORAGE OBTAIN,                                            @14X
               LOC=(31,64),                                         @14X
               LENGTH=(2),                                          @14X
               ADDR=(3),           Return address in GPR3           @14X
               SP=228,                                              @14X
               COND=YES                                             @14
         J     INST040             Go to common check               @14
* Obtain 24-bit CSA SP228 storage for the load module               @14
INST030  DS    0H                                                   @14
         STORAGE OBTAIN,                                            @14X
               LOC=(24,64),                                         @14X
               LENGTH=(2),                                          @14X
               ADDR=(3),           Return address in GPR3           @14X
               SP=228,                                              @14X
               COND=YES                                             @14
INST040  DS    0H                                                   @14
         LR    R4,R15             Save STORAGE return code          @14
         MODESET KEY=NZERO,MODE=PROB Return to K8 problem state     @14
         LTR   R4,R4              Did we get the ECSA/CSA ?         @14
         JZ    INST050            ...jif so                         @14
*                                                                   @14
*        Obtain for CSA/ECSA storage failed                         @14
*                                                                   @14
         $RWTO MSG130E,WRITE=NO                                     @14
         ST    R2,DWD             Save length in source location    @14
         LA    R14,DWD             R14 -> source area to convert    @14
         LA    R15,MSG130EA        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         MVC   MSG130EB,LMOD       Install LMOD name                @14
         $RWTO WTOD,WRITE=YES                                       @14
         LHI   R15,BADNOCSA        Set return code                  @14
         ST    R15,RETCODE          & save it                       @14
         J     INSTX                 & go exit w/ return code       @14
*                                                                   @14
*        Indicate we have CSA/ECSA - address is in GPR3             @14
*                                                                   @14
INST050  DS    0H                                                   @14
         OI    FLAGS,F1#GOTCSA     We have obtained CSA/ECSA        @14
         ST    R3,@CSAEPN          Save address for LOAD/free       @14
*        WTO   'INST050 - we obtained CSA/ECSA'                     @14
*                                                                   @14
*        Place user's LMOD in CSA/ECSA                              @14
*                                                                   @14
         MODESET MODE=SUP,KEY=ZERO                                  @14
         LA    R11,SVCLIB          R11 -> SVCLIB DCB                @14
         LOAD  DE=BLNAME,                                           @14X
               DCB=(R11),                                           @14X
               ERRET=INST060,      Error routine                    @14X
               ADRNAPF=(R3),                                        @14X
               SF=(E,LOAD4L)                                        @14
         LR    R4,R15              Preserve return code             @14
         LTR   R4,R4               Any LOAD problems ?              @14
         JZ    INST070                                              @14
*                                                                   @14
*        LOAD ERRET routine                                         @14
*                                                                   @14
* Note: When entered R1 contains the LOAD abend code and R15        @14
*       contains the reason code associated with the abend. Exit    @14
*       from this routine must include logic to close SVCLIB and    @14
*       free CSA/ECSA.                                              @14
*                                                                   @14
INST060  DS    0H                                                   @14
         ST    R1,DWD              Save R1  (abend code)            @14
         ST    R15,DWD+4           Save R15 (reason code)           @14
         MODESET MODE=PROB,KEY=NZERO                                @14
         $RWTO MSG100A,WRITE=NO    Install message template         @14
         LA    R1,DWD              Source for hex conversion        @14
         LA    R15,MSG100AA        Target for hex conversion        @14
         UNPK  0(9,R15),0(5,R1)    Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         LA    R1,DWD+4            Source for hex conversion        @14
         LA    R15,MSG100AB        Target for hex conversion        @14
         UNPK  0(9,R15),0(5,R1)    Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES      Write the message                @14
*                                                                   @14
*        Free the obtained CSA/ECSA storage we failed to use        @14
*                                                                   @14
INST062  DS    0H                                                   @14
         L     R1,@CSAEPN          Get address to free              @14
         L     R2,MODSIZE          Get length to free               @14
         MODESET KEY=ZERO,MODE=SUP Go to Key 0 Supervisor state     @14
         STORAGE RELEASE,                                           @14X
               ADDR=(1),                                            @14X
               LENGTH=(2),                                          @14X
               SP=228                                               @14
         MODESET KEY=NZERO,MODE=PROB Return to Key 8 Problem state  @14
         L     R1,RETCODE          Was return code                  @14
         LTR   R1,R1                already set ?                   @14
         JNZ   INSTX               ...jif so use it instead         @14
         LHI   R1,BADEPN3          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     INSTX                 and return to caller           @14
*                                                                   @14
*        We can CLOSE the SVCLIB DDname now                         @14
*                                                                   @14
INST070  DS    0H                                                   @14
         MODESET MODE=PROB,KEY=NZERO                                @14
         USING IHADCB,R10                                           @14
         LA    R10,SVCLIB          R10 -> SVCLIB DCB                @14
         OI    W#OPNDO,X'80'       Indicate end of parameter list   @14
         CLOSE ((R10)),MODE=31,MF=(E,W#OPNDO) Close SVCLIB          @14
         DROP  R10                 Lose SVCLIB DCB addressability   @14
*                                                                   @14
*        Adjust CSA/ECSA resident code for proper entry point       @14
*                                                                   @14
         L     R3,@CSAEPN          Get load point address           @14
         AL    R3,MODEPOFF         Add entry point offset           @14
         ST    R3,@CSAEPN@         Save for SVCUPDTE plist update   @14
*        WTO   'LMOD now in CSA/ECSA'                               @14
*                                                                   @14
*        Obtain SQA for USERID filtering if requested               @14
*                                                                   @14
         TM    PKW_used,PKW_USER   Was USER keyword supplied ?      @14
         JNO   INST090             ...jif not                       @14
         MODESET MODE=SUP,KEY=ZERO Supervisor state w/ Key 0        @14
         L     R2,=A(CHKU500L)     Get length to acquire            @14
         STORAGE OBTAIN,                                            @14X
               LOC=(31,64),                                         @14X
               LENGTH=(2),                                          @14X
               ADDR=(3),           Return address in GPR3           @14X
               SP=245,                                              @14X
               COND=YES                                             @14
         LR    R4,R15              Save return code                 @14
         MODESET MODE=PROB,KEY=NZERO Return to problem state        @14
         LTR   R4,R4               Did we get the storage ?         @14
         JZ    INST080             ...jif so                        @14
*                                                                   @14
*        SQA storage acquisition failed for USERID filter code      @14
*                                                                   @14
         $RWTO MSG131E,WRITE=YES                                    @14
         LHI   R1,BADNOSQA         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     INST062               and go free CSA/ECSA           @14
*                                                                   @14
*        Copy filter code to SQA - SQA address is in GPR3           @14
*                                                                   @14
INST080  DS    0H                                                   @14
         ST    R3,SQA_ADDR         Work-area in SQA                 @14
*        MODESET EXTKEY=ZERO       Go to key zero                @05@14
         MODESET KEY=ZERO          Go to key zero                   @14
         LARL  R5,CHKU500          R5 -> code source                @14
         MVC   0(CHKU500L,R3),0(R5) Move screening code to SQA      @14
         USING CHKU500,R3          Inform assembler                 @14
*                                                                   @14
*        Get new SVC @ in GPR and save in CHKU500N                  @14
*                                                                   @14
         L     R6,@CSAEPN@         Fetch new SVC entry point @      @14
         TM    FLAGS,F1#AM31       SVC AMODE31 ?                    @14
         JNO   INST082             ...jif not                       @14
         O     R6,=XL4'80000000'   Set hob-bit                      @14
INST082  DS    0H                                                   @14
         ST    R6,CHKU500N         @ new SVC                        @14
*                                                                   @14
*        Save old entry point @ in CHKU500O                         @14
*                                                                   @14
*        Note: SVC TYPE really should match to do this since we     @14
*              will be changing attributes & locks & possibly the   @14
*              TYPE.                                                @14
*                                                                   @14
         MVC   CHKU500O,OLDENTRY   @ old SVC                        @14
*                                                                   @14
*        Install filter USERID value                                @14
*                                                                   @14
         MVC   CHKU500U,USERID     User-ID                          @14
*                                                                   @14
*        Install SVC number for debug purposes                      @14
*                                                                   @14
         MVC   CHKU500#,SVCNO      SVC number                       @14
         MVC   CHKU500#+3(3),ESRSVCNO Install routing code (if any) @14
         DROP  R3                  CHKU500 in SQA                   @14
*                                                                   @14
*        SQA_ADDR field contains SVC screening code address here    @14
*                                                                   @14
         LR    R6,R3               SVC screening code            @05@14
         BSM   R6,0                set AMODE bit                    @05
*        MODESET EXTKEY=ZERO                                     @05@14
         MODESET KEY=ZERO                                        @05@14
*        WTO   'Screening code in SQA'                              @14
INST090  DS    0H                                                   @14
******************************************************************* @14
*                                                                 * @14
*        Build SVCUPDTE plist for new SVC code                    * @14
*                                                                 * @14
******************************************************************* @14
******************************************************************* @14
*                                                                 * @14
*        Build SVCUPDTE plist for new SVC code. The SVCUPDTE      * @14
*        plist representing the old SVC entry is built from the   * @14
*        content of the SVC table entry captured earlier in the   * @14
*        OLDENTRY field. The SVCUPDTE plist representing the      * @14
*        "new" SVC code is built from the following sources:      * @14
*                                                                 * @14
*        SVCUVERS - from SVCUMODL model template                  * @14
*        SVCUFC   - from SVCUMODL model template                  * @14
*        SVCUFLGS - SVCUFLGS_ESR bit set if ATTR_FLAGS.ATTR_ESR   * @14
*                   bit set                                       * @14
*        SVCUSVC  - Set from SVC# (copied)                        * @14
*        SVCUEP   - from @CSAEPN@ field content or if a USER      * @14
*                   filter is supplied from the SQA storage       * @14
*                   address located in the SQA_ADDR field. The    * @14
*                   hob-bit will be turned on if SQA_ADDR field   * @14
*                   is non-zero if USER filtering is used or else * @14
*                   turned on if FLAGS.F1#AM31 bit is on.         * @14
*        SVCUTYPE - from TYPEBIN field (copied)                   * @14
*        SVCUATTR - from multiple sources:                        * @14
*                   -SVCUATTR_NPRMPT set if ATTR_FLAGS.ATTR_NPRMT * @14
*                    flag set                                     * @14
*                   -SVCUATTR_AR     set if ATTR_FLAGS.ATTR_AR    * @14
*                    flag set                                     * @14
*                   -SVCUATTR_APF    set if ATTR_FLAGS.ATTR_APF   * @14
*                    flag set                                     * @14
*        SVCULCKS - from multiple sources:                        * @14
*                   -SVCULCKS_LOCAL  set if                       * @14
*                    LOCKS_FLAGS.LOCKS_LOCAL is set               * @14
*                   -SVCULCKS_CMS    set if                       * @14
*                    LOCKS_FLAGS.LOCKS_CMS   is set               * @14
*                   -SVCULCKS_SRM    set if                       * @14
*                    LOCKS_FLAGS.LOCKS_SRM   is set               * @14
*                   -SVCULCKS_SALLOC set if                       * @14
*                    LOCKS_FLAGS.LOCKS_SALLOC is set              * @14
*                   -SVCULCKS_DISP   set if                       * @14
*                    LOCKS_FLAGS.LOCKS_DISP   is set              * @14
*                                                                 * @14
*                   Note: The layout of the LOCKS_FLAGS byte is   * @14
*                         identical to the layout of the          * @14
*                         SVCULCKS byte so we will just copy the  * @14
*                         LOCKS_FLAGS byte to the SVCULCKS byte   * @14
*                         here.                                   * @14
*                                                                 * @14
*        SVCUESRC - from ESR# (copied) if the flag                * @14
*                   ATTR_FLAGS.ATTR_ESR is set                    @ @14
*                                                                 * @14
******************************************************************* @14
*                                                                   @14
         MVC   SVCUPLNEW,SVCUMODL  Install model                    @14
         LA    R3,SVCUPLNEW        R3 -> SVCUPDTE plist             @14
         USING SVCU,R3             Inform assembler                 @14
         L     R2,SQA_ADDR         Pick up possible filter code @   @14
         LTR   R2,R2               Was USER flter supplied ?        @14
         JZ    INST092             ...jif not, complete from CSA @  @14
*                                                                   @14
*        USER filter was supplied - address of SQA resident code    @14
*        will become SVC slot entry point                           @14
*                                                                   @14
         O     R2,=XL4'80000000'   Set hob-bit                      @14
         ST    R2,SVCUEP           Save as SVC entry point          @14
         J     INST100              and go handle SVCTP             @14
*                                                                   @14
*        USER filter was not supplied - address of entry point      @14
*        of loaded code in CSA/ECSA will become SVC slot entry      @14
*        point                                                      @14
*                                                                   @14
INST092  DS    0H                                                   @14
         L     R2,@CSAEPN@         R2 -> CSA/ECSA E.P. address      @14
         TM    FLAGS,F1#AM31       SVC AMODE31 ?                    @14
         JNO   INST094             ...jif not                       @14
         O     R2,=XL4'80000000'   Set hob-bit                      @14
INST094  DS    0H                                                   @14
         ST    R2,SVCUEP           Save as SVC entry point          @14
*                                                                   @14
*        Process SVC TYPE here for new SVC code                     @14
*                                                                   @14
*        Note: SVC type is mandatory on Execute form of the         @14
*              SVCUPDTE macro...this includes for ESR SVC router    @14
*              types.                                               @14
*                                                                   @14
INST100  DS    0H                                                   @14
         MVI   SVCUTYPE,x'04'      Assume T3/4 SVC                  @14
         CLI   SVC#,109            Was it ?                         @14
         JE    INST102             ...jif so                        @14
         MVI   SVCUTYPE,x'01'      Assume T1 SVC                    @14
         CLI   SVC#,116            Was it ?                         @14
         JE    INST102             ...jif so                        @14
         MVI   SVCUTYPE,x'02'      Assume T2 SVC                    @14
         CLI   SVC#,122            Was it ?                         @14
         JE    INST102             ...jif so                        @14
         MVI   SVCUTYPE,x'06'      Assume T6 SVC                    @14
         CLI   SVC#,137            Was it ?                         @14
         JE    INST102             ...jif so                        @14
         MVC   SVCUTYPE,TYPEBIN    Set SVC type from field          @14
*                                                                   @14
*        Process SVC LOCKS here for new SVC code                    @14
*                                                                   @14
INST102  DS    0H                                                   @14
         MVC   SVCULCKS,LOCKS_FLAGS Copy flags                      @14
*                                                                   @14
*        Process SVC ESR flag for new SVC code                      @14
*        Process SVC ESR #    for new SVC code                      @14
*                                                                   @14
         TM    ATTR_FLAGS,ATTR_ESR Request for part of the ESR ?    @14
         JNO   INST110             ...jif not                       @14
         OI    SVCUFLGS,SVCUFLGS_ESR Set ESR provided flag          @14
         MVC   SVCUESRC,ESR#       Copy routing code value          @14
*                                                                   @14
*        Process SVCUSVC for new SVC code                           @14
*                                                                   @14
INST110  DS    0H                                                   @14
         MVC   SVCUSVC,SVC#        Install SVC # to modify          @14
*                                                                   @14
*        Process SVC attributes for new SVC code                    @14
*                                                                   @14
         TM    ATTR_FLAGS,ATTR_NPRMT Non-preemptible requested ?    @14
         JNO   INST120             ...jif not                       @14
         OI    SVCUATTR,SVCUATTR_NPRMPT else set NPRMT bit          @14
INST120  DS    0H                                                   @14
         TM    ATTR_FLAGS,ATTR_AR  AR mode request ?                @14
         JNO   INST130             ...jif not                       @14
         OI    SVCUATTR,SVCUATTR_AR     else set AR bit             @14
INST130  DS    0H                                                   @14
         TM    ATTR_FLAGS,ATTR_APF APF state request ?              @14
         JNO   INST140             ...jif not                       @14
         OI    SVCUATTR,SVCUATTR_APF    else set APF bit            @14
******************************************************************* @14
*                                                                 * @14
*        Build SVCUPDTE plist for old SVC code                    * @14
*                                                                 * @14
******************************************************************* @14
******************************************************************* @14
*                                                                 * @14
*        Build SVCUPDTE plist for old SVC code. The SVCUPDTE      * @14
*        plist representing the old SVC entry is built from the   * @14
*        content of the SVC table entry captured earlier in the   * @14
*        OLDENTRY field. The SVCUPDTE plist representing the      * @14
*        "old" SVC code is built from the following sources where * @14
*        the SVC table entry mapping is provided by the SVCENTRY  * @14
*        dummy section mapping provided by IHASVC:                * @14
*                                                                 * @14
*        SVCUVERS - from SVCUMODL model template                  * @14
*        SVCUFC   - from SVCUMODL model template                  * @14
*        SVCUFLGS - SVCUFLGS_ESR bit set if ATTR_FLAGS.ATTR_ESR   * @14
*                   bit set                                       * @14
*        SVCUSVC  - Set from SVC# (copied)                        * @14
*        SVCUEP   - from SVCEP content (copied). This includes    * @14
*                   the hob-bit.                                  * @14
*        SVCUTYPE - from SVCTP field where:                       * @14
*                   -If SVCTP34 bits set then set to 0x04         * @14
*                   -If SVCTP2  bit  set then set to 0x02         * @14
*                   -If SVCTP6  bit  set then set to 0x06         * @14
*                                                                 * @14
*                   otherwise set to 0x01                         * @14
*                                                                 * @14
*        SVCUATTR - from multiple sources:                        * @14
*                   -SVCUATTR_NPRMPT set if SVCNP bit is on       * @14
*                   -SVCUATTR_AR     set if SVCAR bit is on       * @14
*                   -SVCUATTR_APF    set if SVCAPF bit is on      * @14
*        SVCULCKS - from multiple sources:                        * @14
*                   -SVCULCKS_LOCAL  set if SVCLL bit is on       * @14
*                   -SVCULCKS_CMS    set if SVCCMS bit is on      * @14
*                   -SVCULCKS_SRM    set if SVCOPT bit is on      * @14
*                   -SVCULCKS_SALLOC set if SVCALLOC bit is on    * @14
*                   -SVCULCKS_DISP   set if SVCDISP bit is on     * @14
*                                                                 * @14
*        SVCUESRC - from ESR# (copied) if the flag                * @14
*                   ATTR_FLAGS.ATTR_ESR is set                    @ @14
*                                                                 * @14
******************************************************************* @14
*                                                                   @14
INST140  DS    0H                                                   @14
         LA    R2,OLDENTRY         R2 -> copy of SVC table entry    @14
         USING SVCENTRY,R2         Inform assembler                 @14
         MVC   SVCUPLOLD,SVCUMODL  Install SVCUPDTE model           @14
         LA    R3,SVCUPLOLD        R3 -> SVCUPDTE plist             @14
*                                                                   @14
*        Set SVCUFLGS byte bits in plist                            @14
*                                                                   @14
         TM    ATTR_FLAGS,ATTR_ESR ESR entry ?                      @14
         JNO   INST150             ...jif not                       @14
         OI    SVCUFLGS,SVCUFLGS_ESR  Indicate ESR # given          @14
*                                                                   @14
*        Set SVCUSVC byte in plist                                  @14
*                                                                   @14
INST150  DS    0H                                                   @14
         MVC   SVCUSVC,SVC#        Set SVC # in plist               @14
*                                                                   @14
*        Set SVCUEP address in plist                                @14
*                                                                   @14
         MVC   SVCUEP,SVCEP        Copy old E.P @ w/ hob-bit        @14
*                                                                   @14
*        Set SVCUTYPE value in plist                                @14
*                                                                   @14
         AGO   .JH1106A                                            @14
*        Note: If ATTR_FLAGS.ATTR_ESR is set then we would have     @14
*              validated the type during oarse processing and the   @14
*              TYPE keyword is mutually exclusive with the ESR      @14
*              value on the SVCUPDTE macro. So the skinny is that   @14
*              we don't want to set SVCUTYPE if the ATTR_ESR flag   @14
*              has been set. All validations for range, etc. have   @14
*              already been performed to be here.                   @14
*                                                                   @14
         TM    ATTR_FLAGS,ATTR_ESR ESR SVC routing code request ?   @14
         JO    INST200             ...jif so, skip setting type     @14
.JH1106A ANOP                                                       @14
         TM    SVCTP,SVCTP34       Type 3/4 ?                       @14
         JNO   INST160             ...jif not                       @14
         MVI   SVCUTYPE,X'04'      Set to Type 3/4                  @14
         J     INST200             Go to reume point                @14
INST160  DS    0H                                                   @14
         TM    SVCTP,SVCTP2        Type 2 ?                         @14
         JNO   INST170             ...jif not                       @14
         MVI   SVCUTYPE,X'02'      Set to Type 2                    @14
         J     INST200             Go to reume point                @14
INST170  DS    0H                                                   @14
         TM    SVCTP,SVCTP6        Type 6 ?                         @14
         JNO   INST180             ...jif not                       @14
         MVI   SVCUTYPE,X'06'      Set to Type 6                    @14
         J     INST200             Go to reume point                @14
INST180  DS    0H                                                   @14
         MVI   SVCUTYPE,X'01'      Set to Type 1                    @14
*                                                                   @14
*        Set SVCUATTR value in plist                                @14
*                                                                   @14
INST200  DS    0H                                                   @14
         TM    SVCTP,SVCNP         Non-preemptable ?                @14
         JNO   INST210             ...jif not                       @14
         OI    SVCUATTR,SVCUATTR_NPRMPT else set NP flag            @14
INST210  DS    0H                                                   @14
         TM    SVCATTR3,SVCAR      Access Register mode allowed ?   @14
         JNO   INST220             ...jif not                       @14
         OI    SVCUATTR,SVCUATTR_AR    else set AR flag             @14
INST220  DS    0H                                                   @14
         TM    SVCTP,SVCAPF        APF only callers ?               @14
         JNO   INST230             ...jif not                       @14
         OI    SVCUATTR,SVCUATTR_APF   else set APF flag            @14
*                                                                   @14
*        Set SVCULCKS bits in plist                                 @14
*                                                                   @14
INST230  DS    0H                                                   @14
         TM    SVCLOCKS,SVCLL      Local lock set in old entry ?    @14
         JNO   INST240             ...jif not                       @14
         OI    SVCULCKS,SVCULCKS_LOCAL else set local lock bit      @14
INST240  DS    0H                                                   @14
         TM    SVCLOCKS,SVCCMS     CMS lock set in old entry ?      @14
         JNO   INST250             ...jif not                       @14
         OI    SVCULCKS,SVCULCKS_CMS   else set CMS lock bit        @14
INST250  DS    0H                                                   @14
         TM    SVCLOCKS,SVCOPT     SRM lock set in old entry ?      @14
         JNO   INST260             ...jif not                       @14
         OI    SVCULCKS,SVCULCKS_SRM   else set SRM lock bit        @14
INST260  DS    0H                                                   @14
         TM    SVCLOCKS,SVCALLOC   SALLOC lock set in old entry ?   @14
         JNO   INST270             ...jif not                       @14
         OI    SVCULCKS,SVCULCKS_SALLOC else set SALLOC lock bit    @14
INST270  DS    0H                                                   @14
         TM    SVCLOCKS,SVCDISP    DISP lock set in old entry ?     @14
         JNO   INST280             ...jif not                       @14
         OI    SVCULCKS,SVCULCKS_DISP   else set DISP lock bit      @14
*                                                                   @14
*        Set SVCUESRC value in plist                                @14
*                                                                   @14
INST280  DS    0H                                                   @14
         TM    ATTR_FLAGS,ATTR_ESR Part of ESR ?                    @14
         JNO   INST300             ...jif not                       @14
         MVC   SVCUESRC,ESR#       Copy ESR FC                      @14
         DROP  R3                  Drop SVCU                        @14
*                                                                   @14
*        At this point the SVCUPDTE plist for the new SVC to be     @14
*        installed is located in the SVCUPLNEW area and the         @14
*        SVCUPDTE plist for the old SVC to be re-installed on       @14
*        exit is located in the SVCUPLOLD area.                     @14
*                                                                   @14
*        Go to Key 0 Supervisor state                               @14
*                                                                   @14
INST300  DS    0H                                                   @14
         MODESET KEY=ZERO,MODE=SUP
*                                                                   @14
*        ENQueue on the SVC table                                   @14
*                                                                   @14
         MVC   ENQ_TABLE(ESVCTMODL),ESVCTMOD                        @14
         ENQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM
*
*        Did we get exclusive use of the resource ?
*
         ST    R15,DWD             Save ENQ return code/@ of area   @14
         LTR   R15,R15             Did we get the SVC table ?       @14
         JZ    INST310             ...jif so                        @14
*                                                                   @14
*        Issue SVC table ENQ failure & go clean up                  @14
*                                                                   @14
         MODESET MODE=PROB,KEY=NZERO                                @14
         $RWTO MSG910A,WRITE=YES                                    @14
         $RWTO MSG911A,WRITE=NO                                     @14
         LA    R14,DWD             R14 -> source area to convert    @14
         LA    R15,MSG911AA        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES                                       @14
         LHI   R15,BADENQ          Set return code                  @14
         ST    R15,RETCODE          & save it                       @14
         J     INSTX_FREE            & go exit w/ return code       @14
*
*        Save registers and update SVC table
*
*        Note: SVCUPDTE needs local addressability, Key 0 &
*              Supervisor state for minimum authorization. We
*              should already be in that state and key if the
*              above enqueue on the SVC table succeeded.
*
INST310  DS    0H                                                   @14
         STM   R14,R12,PUTSAVE+12  Borrow unused save area          @14
         BASR  R10,0               Macro internal addressability    @14
         USING *,R10               """""""""""""""""""""""""""""    @14
*                                                                   @14
*        Install the new SVC code using the SVCUPLNEW plist         @14
*                                                                   @14
         SVCUPDTE MF=(E,SVCUPLNEW)                                  @14
         DROP  R10             Drop internal macro addressability   @14
         LR    R4,R15              Preserve return code             @14
         ST    R15,DWD             Preserve return code             @14
*                                                                   @14
*        Drop ENQ on SVC table resource (on success or failure)     @14
*                                                                   @14
         DEQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14
*                                                                   @14
*        Check SVCUPDTE REPLACE operation return code               @14
*                                                                   @14
         LTR   R4,R4               Was update successful ?          @14
         JZ    INST320             ...jif successful                @14
*                                                                   @14
*        SVCUPDTE was not successful - issue message and clean up   @14
*                                                                   @14
         MODESET MODE=PROB,KEY=NZERO                                @14
         $RWTO MSG912A,WRITE=YES                                    @14
         $RWTO MSG913A,WRITE=NO                                     @14
         LA    R14,DWD             R14 -> source area to convert    @14
         LA    R15,MSG913AA        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES                                       @14
         LHI   R15,BADSVCUS        Set return code                  @14
         ST    R15,RETCODE          & save it                       @14
         J     INSTX_FREE            & go exit w/ return code       @14
*                                                                   @14
*        SVC table update was successful so we need to do the       @14
*        following:                                                 @14
*                                                                   @14
*        1) Issue MLWTO announcing what was done                    @14
*        2) Set STIMER if GOODNITE time provided                    @14
*        3) Set ESTAE for CANCEL                                    @14
*        4) Wait for STOP or CANCEL                                 @14
*                                                                   @14
INST320  DS    0H                                                   @14
         MODESET MODE=PROB,KEY=NZERO                                @14
         BRASL R14,MLWTO           Write out MLWTO message          @14
*                                                                   @14
*        Set timer if GOODNITE parameter was supplied               @14
*                                                                   @14
         MODESET KEY=NZERO,MODE=PROB Return to TCB key              @14
         CLI   ENDOFDAY,C'0'       Was GOODNITE supplied ?          @14
         JL    INST400             ...jif not, skip STIMERM         @14
*        L     R2,CIBECB           Get CIB ECB address              @14
         LA    R2,CIBECB           Get CIB ECB address              @14
         LARL  R4,GOODNITE         Resolve GOODNITE exit address    @14
         STIMERM SET,                                               @14X
               ID=TIMER_ID,        Token                            @14X
               EXIT=(R4),          Exit routine                     @14X
               LT=ENDOFDAY,        HHMMSSth                         @14X
               PARM=(R2),          ECB/CIB pointers                 @14X
               MF=(E,STIMER_L)                                      @14
*        WTO   'GOODNITE exit in effect'                            @14
*                                                                   @14
*        Set up ESTAE for CANCEL trap                               @14
*                                                                   @14
INST400  DS    0H                                                   @14
         LARL  R4,CANCEL           Resolve CANCEL exit address      @14
         ESTAE ((R4)),CT,                                        @03@14X
               PARAM=SAVE2,        ESTAE save area                  @14X
               TERM=YES,           Trap CANCEL commands             @14X
               MF=(E,ESTAEL)                                        @14
         L     R1,CIBECB           Get CIB ECB address              @14
         WAIT  1,ECB=(R1),LONG=YES WAIT for a STOP command          @14
*                                                                   @14
         ESTAE 0                   Do not trap CANCEL command again @14
*                                                                   @14
*        ENQueue on the SVC table                                   @14
*                                                                   @14
INST410  DS    0H                                                   @14
         MVC   ENQ_TABLE(ESVCTMODL),ESVCTMOD                        @14
         ENQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14
*                                                                   @14
*        Did we get exclusive use of the resource ?                 @14
*                                                                   @14
         ST    R15,DWD             Save ENQ return code/@ of area   @14
         LTR   R15,R15             Did we get the SVC table ?       @14
         JZ    INST430             ...jif so                        @14
*                                                                   @14
*        Issue WTO regarding failure and then retry                 @14
*                                                                   @14
         ST    R15,DWD            Save ENQ return code              @14
         L     R2,DOMID           Pick up possible previous msgid   @14
         LTR   R2,R2              Any previously issued message ?   @14
         JZ    INST420            ...jif not                        @14
         L     R1,DOMID           GET PREVIOUS MESSAGE ID NO.       @14
         DOM   MSG=(R1)           DELETE PREVIOUS MESSAGE           @14
INST420  DS    0H                                                   @14
         $RWTO MSG905I,WRITE=NO                                     @14
         LA    R14,DWD             R14 -> source area to convert    @14
         LA    R15,MSG905IA        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES                                       @14
         ST    R1,DOMID            Save msgid for later deletion    @14
         STIMER WAIT,DINTVL=HOWLONG Wait 5 seconds                  @14
         J     INST410               and go try again               @14
*                                                                   @14
*        We got the SVC table for this system image so update       @14
*        the SVC slot with the old information but DOM any          @14
*        outstanding WTO message we might have issued               @14
*                                                                   @14
INST430  DS    0H                                                   @14
         L     R2,DOMID           Pick up possible previous msgid   @14
         LTR   R2,R2              Any previously issued message ?   @14
         JZ    INST440            ...jif not                        @14
         L     R1,DOMID           GET PREVIOUS MESSAGE ID NO.       @14
         DOM   MSG=(R1)           DELETE PREVIOUS MESSAGE           @14
*                                                                   @14
*        Put the old SVC entry back                                 @14
*                                                                   @14
INST440  DS    0H                                                   @14
*        WTO   'We got the SVC table during backout'                @14
*                                                                   @14
         MODESET KEY=ZERO,MODE=SUP                                  @14
         BASR  R10,0               Macro internal addressability    @14
         USING *,R10               """""""""""""""""""""""""""""    @14
*                                                                   @14
*        Install the new SVC code using the SVCUPLNEW plist         @14
*                                                                   @14
         SVCUPDTE MF=(E,SVCUPLOLD)                                  @14
         DROP  R10             Drop internal macro addressability   @14
         LR    R4,R15              Preserve return code             @14
         ST    R15,DWD             Preserve return code             @14
*                                                                   @14
*        Drop ENQ on SVC table resource (on success or failure)     @14
*                                                                   @14
         DEQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14
*                                                                   @14
*        Check SVCUPDTE REPLACE operation return code               @14
*                                                                   @14
         MODESET KEY=NZERO,MODE=PROB                                @14
         LTR   R4,R4               Was update successful ?          @14
         JZ    INST450             ...jif successful                @14
*                                                                   @14
*        SVCUPDTE was not successful - issue message and clean up   @14
*        what we can                                                @14
*                                                                   @14
         $RWTO MSG918A,WRITE=YES                                    @14
         $RWTO MSG919A,WRITE=NO                                     @14
         LA    R14,DWD             R14 -> source area to convert    @14
         LA    R15,MSG919AA        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES                                       @14
*                                                                   @14
*        Go free any common areas we allocated anyway and expect    @14
*        abends if this SVC is called                               @14
*                                                                   @14
         LHI   R15,BADSVCUR        Set return code                  @14
         ST    R15,RETCODE          & save it                       @14
         J     INSTX_FREE          Go free our common areas         @14
*                                                                   @14
*        Old SVC entry was restored                                 @14
*                                                                   @14
INST450  DS    0H                                                   @14
         $RWTO MSG200I,WRITE=NO                                     @14
         LA    R14,OLDENTRY        R14 -> source area to convert    @14
         LA    R15,MSG200IA        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES                                       @14
*                                                                   @14
*        Go free any common areas we allocated                      @14
*                                                                   @14
         XR    R15,R15             Set return code                  @14
         ST    R15,RETCODE          & save it                       @14
         J     INSTX_FREE          Go free our common areas         @14



         AGO   .JH1113A
New code follows:




.JH1113A ANOP



         AGO   .JH1110A

*
*        Put old SVC entry back in place
*
         MODESET KEY=ZERO,MODE=SUP
*                                                                   @14
*        ENQueue on the SVC table                                   @14
*                                                                   @14
         MVC   ENQ_TABLE(ESVCTMODL),ESVCTMOD                        @14
         ENQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM
*
*        Did we get exclusive use of the resource ?
*
         ST    R15,DWD             Save ENQ return code/@ of area   @14
         LTR   R15,R15             Did we get the SVC table ?       @14
         JZ    INST330             ...jif so
         MODESET MODE=PROB,KEY=NZERO
*
*        Report unable to get SVC table and force U901 abend
*
         $RWTO MSG915A,WRITE=YES                                    @14
         $RWTO MSG916A,WRITE=YES                                    @14
         ABEND 901,DUMP                                             @14
*
*        Reverse the SVC table update
*
INST330  DS    0H
         MODESET KEY=ZERO,MODE=SUP
         STM   R14,R12,PUTSAVE+12  Borrow unused save area
         BASR  R10,0               Macro internal addressability    @14
         USING *,R10               """""""""""""""""""""""""""""    @14
*                                                                   @14
*        Install the new SVC code using the SVCUPLNEW plist         @14
*                                                                   @14
         SVCUPDTE MF=(E,SVCUPLOLD)
         DROP  R10             Drop internal macro addressability   @14
         LR    R4,R15              Preserve return code
         ST    R15,DWD             Preserve return code
*
*        Drop ENQ on SVC table resource (on success or failure)
*
         DEQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14
*
*        Check SVCUPDTE REPLACE operation return code
*
         LTR   R4,R4               Was update successful ?
*        JZ    INST320             ...jif successful
*
*        SVCUPDTE was not successful - issue message and clean up
*
         MODESET MODE=PROB,KEY=NZERO                                @14
         $RWTO MSG912A,WRITE=YES                                    @14
         $RWTO MSG913A,WRITE=NO                                     @14
         LA    R14,DWD             R14 -> source area to convert    @14
         LA    R15,MSG913AA        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES                                       @14
         LHI   R15,BADSVCUS        Set return code                  @14
         ST    R15,RETCODE          & save it                       @14
         J     INSTX_FREE            & go exit w/ return code       @14
*
*        Go free common areas (ECSA/CSA & ESQA)
*

* Failure at this point means we need to put the old SVC entry back
* and free all CSA/ECSA & ESQA areas


INST400  DS    0H                  Set CIB limit
         QEDIT ORIGIN=CHCIBP,CIBCTR=1  Set CIB limit to one
         LTR   R15,R15             Was the QEDIT successful ?
         JZ    INST410             ...jif so...go WAIT for something
         ABEND 902,DUMP            otherwise we have a problem
*
*  WAIT for a command ...
*
INST410  DS    0H

* Complete & issue MLWTO


WAITAGIN EQU   *
         L     R1,CIBECB           @ of command ECB
         WAIT  ECB=(R1)            Wait for a STOP cmd

.JH1110A ANOP



















*        WTO   'SVCPLNEW update done - check R13'
         DC    H'0'



         LA    R4,SVCUPLNEW
         LA    R5,SVCUPLOLD










* SVC & filter code are in common storage at this point and we have
* captured the old SVC slot. We can update the SQA resident code to
* include the "new" SVC address and then just install the address
* of the filter code in the SVC slot but we'll need to set the
* requested attributes & flags per the user's request.


.JH1103A ANOP




*                                                                   @14
*        Free ESQA storage if allocated before exit                 @14
*                                                                   @14
INSTX_FREE DS  0H                                                   @14
         L     R3,SQA_ADDR         Pick up possible ESQA address
         LTR   R3,R3               Did we obtain any ESQA ?
         JZ    INSTX_FREE_A        ...jif not
         L     R4,=A(CHKU500L)     Get length to free               @14
         MODESET KEY=ZERO,MODE=SUP
*
*        Free obtained ESQA storage
*
         STORAGE RELEASE,          Free                                X
               ADDR=((R3)),         the                                X
               LENGTH=((R4)),        filter area                       X
               SP=245
*                                                                   @14
*        Free and CSA/ECSA area allocated before exit               @14
*                                                                   @14
INSTX_FREE_A DS 0H                                                  @14
         L     R3,@CSAEPN          Get possible CSA/ECSA @ to free  @14
         LTR   R3,R3               Did we obtain any CSA/ECSA ?     @14
         JZ    INSTX_FREE_B        ...jif not
         L     R4,MODSIZE          Get length to free               @14
         MODESET KEY=ZERO,MODE=SUP
*
*        Free obtained CSA/ECSA storage
*
         STORAGE RELEASE,          Free                                X
               ADDR=((R3)),         the                                X
               LENGTH=((R4)),        new SVC code area                 X
               SP=228
*
*        Drop our ENQ on the SVC slot
*
INSTX_FREE_B DS 0H                                                  @14
         MODESET KEY=NZERO,MODE=PROB                                @14
*
*        Return to caller
*
INSTX    DS    0H                                                   @14
         LM    R14,R12,SAVE@L1+12  Restore caller's registers       @14
         BR    R14                 Return to caller                 @14
*                                                                   @14
         TITLE 'SVCUPDTE - REPORT - report SVC slot profiles'       @14
******************************************************************* @14
REPORT   DS    0H                                                   @14
         STM   R14,R12,REPORTSAVE+12                                @14
*                                                                   @14
*        See if SYSPRINT was JCL allocated & flag it if so          @14
*                                                                   @14
         L     R1,PSATOLD-PSA(,0)  R1 -> current TCB                @14
         L     R1,TCBTIO-TCB(R1)   R1 -> TIOT                       @14
         LA    R1,TIOELNGH-TIOT1(R1)  R1 -> 1st DDname in TIOT      @14
REPORT_002 DS  0H                                                   @14
         CLI   0(R1),X'00'         End of TIOT ?                    @14
         JE    REPORT_002B       ...jif so, SYSPRINT DD not in JCL  @14
         CLC   =CL8'SYSPRINT',TIOEDDNM-TIOELNGH(R1) SYSPRINT DD ?   @14
         JE    REPORT_002A         ...jif so                        @14
         XR    R2,R2               Clear for insert                 @14
         IC    R2,0(R1)            R2 = TIOELNGH for current entry  @14
         AR    R1,R2               Point to next TIOT DD entry      @14
         J     REPORT_002          Look at next DD entry            @14
*                                                                   @14
*      SYSPRINT JCL allocated, set flag to skip dynamic allocation  @14
*                                                                   @14
REPORT_002A DS 0H                                                   @14
         MVC   RDDN,=CL8'SYSPRINT' Install report DDname            @14
         OI    MYFLAGS,SYSPPRES    Indicate SYSPRINT in JCL         @14
         J     REPORT_002D         ...skip dynamic allocation       @14
REPORT_002B DS 0H                                                   @14
*                                                                   @14
*        Build SVC 99 request block & its extension for report file @14
*                                                                   @14
         LA    R1,$99RB            Get @ of SVC99 RB                @14
         USING S99RB,R1                                             @14
         ST    R1,$99RBPTR         Store pointer to RB              @14
*                                                                   @14
*        Fill in Request Block & Request Block Extension            @14
*                                                                   @14
         OI    $99RBPTR,S99RBPND   Mark end of list                 @14
         XC    S99RB(S99RBLEN),S99RB Clear entire list              @14
         MVI   S99RBLN,S99RBLEN    Move in length                   @14
         MVI   S99VERB,S99VRBAL    Move in ALLOCATE verb            @14
         LA    R0,$99STUPL         Get ptr to ALLOCATE TU pointers  @14
         ST    R0,S99TXTPP         Store in parameter list          @14
       MVI   S99FLAG1,S99NOMNT+S99CNENQ No mounts, cond ENQ on TIOT @14
*                                                                   @14
         LA    R2,$99RBX                                            @14
         USING S99RBX,R2                                            @14
         ST    R2,S99S99X              Set Request Block extension  @14
         MVC   S99EID,=CL6'S99RBX'                                  @14
         MVI   S99EVER,S99RBXVR                                     @14
         OI    S99EOPTS,S99EIMSG+S99EWTP                            @14
         DROP  R2                                                   @14
         DROP  R1                                                   @14
*                                                                   @14
*        Finish up text units for report file allocation            @14
*                                                                   @14
         XC    $99STUPL($99STL),$99STUPL Clear TU pointer list      @14
         LA    R0,$99STUPL        Get pointer to output TU pointers @14
         ST    R0,S99TXTPP-S99RB+$99RB Store in RB                  @14
         MVI   $99TEXT,C' '        First blank out everything       @14
         MVC   $99TEXT+1($99TEXTL),$99TEXT                          @14
         LA    R0,$99SYSOU         Get pointer to sysout test       @14
         ST    R0,$99SSYSP         Store in parameter list          @14
         LA    R0,$99FREC          Get pointer to free on close TU  @14
         ST    R0,$99SFREP         Store in parameter list          @14
         LA    R0,$99DDNK          Get pointer to return DDN TU     @14
         ST    R0,$99SDDNP         Store in parameter list          @14
         OI    $99SDDNP,S99TUPLN   Mark as last TU pointer          @14
         MVC   $99SYSOU(4),=AL2(DALSYSOU,0)                         @14
         MVC   $99FREC(4),=AL2(DALCLOSE,0)                          @14
         MVC   $99DDNK(6),=AL2(DALRTDDN,1,8)                        @14
         MVC   $99DDNK+6(8),=CL8' '                                 @14
*                                                                   @14
*        Allocate the sysout data set                               @14
*                                                                   @14
         LA    R1,$99RBPTR                                          @14
         DYNALLOC                  Allocate the SORTMSG DDname      @14
         ST    R15,$99R15          Save SVC 99 return code          @14
         LTR   R15,R15             Any problems ?                   @14
         JZ    REPORT_002C         ...jif not                       @14
*                                                                   @14
*        Display report file DYNALLOC failure information           @14
*                                                                   @14
         $RWTO MSG128E,WRITE=YES                                    @14
         LA    R2,$99RB            Get @ of SVC99 RB                @14
         USING S99RB,R2                                             @14
         $RWTO MSG129E,WRITE=NO                                     @14
         LA    R14,$99R15          R14 -> source area to convert    @14
         LA    R15,MSG129EA        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         LA    R14,S99ERROR        R14 -> source area to convert    @14
         LA    R15,MSG129EB        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         LA    R14,S99INFO         R14 -> source area to convert    @14
         LA    R15,MSG129EC        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES                                       @14
         DROP  R2                                                   @14
*                                                                   @14
         LHI   R15,BADENV25        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     REPORTX_A             & go return to caller          @14
*                                                                   @14
*        Capture returned report file DDname                        @14
*                                                                   @14
REPORT_002C DS 0H                                                   @14
         MVC   RDDN(8),=CL8' '     Save the DDname                  @14
         LH    R2,$99DDNK+S99TULNG-S99TUNIT Get length              @14
         BCTR  R2,0                Decrement for execute            @14
         EX    R2,RDDCPY           Save the output DDname           @14
*                                                                   @14
LTORG_AREA LOCTR ,                                                  @14
RDDCPY   MVC   RDDN(*-*),$99DDNK+S99TUPAR-S99TUNIT                  @14
SVCUPDTE LOCTR ,                                                    @14
*                                                                   @14
*        Prepare report file DCB - DDname in RDDN field             @14
*                                                                   @14
REPORT_002D DS 0H                                                   @14
         MVC   SPUTCODE,PUTCODE    Copy PUT routine below 16M       @14
         MVC   W#OPNDO,X#OPNDO     Install OPEN output execute list @14
         MVC   SYSPRINT,X#DCB1     Copy static DCB to DWS area      @14
         LA    R10,SYSPRINT        R10 -> SYSPRINT DCB              @14
         USING IHADCB,R10          DCB addressability               @14
         MVC SYSPRINT+DCBDDNAM-IHADCB(8),RDDN Install report DDname @14
*                                                                   @14
*        Open sysout report file using 24-bit storage               @14
*                                                                   @14
         OPEN  ((R10),),MODE=31,MF=(E,W#OPNDO)                      @14
*                                                                   @14
*        Make sure OPEN completed successfully                      @14
*                                                                   @14
         TM    DCBOFLGS,DCBOFOPN   Was OPEN successful ?            @14
         JO    REPORT_002E         ...jif so, continue              @14
*                                                                   @14
         DROP  R10                                                  @14
*                                                                   @14
*        Open for report file failed                                @14
*                                                                   @14
         $RWTO MSG146E,WRITE=YES                                    @14
         LHI   R15,BADENV31        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     REPORTX_A             and then return                @14
*                                                                   @14
*        Capture current date and time for headings                 @14
*                                                                   @14
REPORT_002E DS 0H                                                   @14
         BRASL R14,DATETIME        Go format current date & time    @14
*                                                                   @14
*        Force header page on first report line written             @14
*                                                                   @14
         MVC   Line_count,MAXLINES Set initial max lines/page       @14
         MVC   Page_count,=PL4'0'                                   @14
*                                                                   @14
*        Resolve IRRSEQ00 service routine (should be in LLA)        @14
*                                                                   @14
         LOAD  EP=IRRSEQ00,ERRET=REPORT_010                         @14
         ST    R0,@R_admin         Save service load module address @14
         J     REPORT_020           and continue                    @14
*                                                                   @14
*        Load of R_admin service routine failed                     @14
*                                                                   @14
REPORT_010 DS  0H                                                   @14
         ST    R1,DBWD             Save LOAD R1                     @14
         ST    R15,DBWD+4          Save LOAD R15                    @14
         $RWTO MSG115E,WRITE=YES                                    @14
         $RWTO MSG116E,WRITE=NO                                     @14
         LA    R14,DBWD            R14 -> source area to convert    @14
         LA    R15,MSG116EA        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         LA    R14,DBWD+4          R14 -> source area to convert    @14
         LA    R15,MSG116EB        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES                                       @14
         LHI   R1,BADENV5          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     EXITRCA              & go exit w/ return code        @14
*                                                                   @14
*        Allocate & clear a 64K workarea for use by IRRSEQ00        @14
*                                                                   @14
REPORT_020 DS  0H                                                   @14
         L     R0,=A(WORKAREA_SIZE) R0 = length to acquire          @14
         STORAGE OBTAIN,           Get working storage              @14X
               COND=YES,                                            @14X
               LENGTH=(R0),                                         @14X
               LOC=ANY,                                             @14X
               BNDRY=PAGE                                           @14
         LTR   R15,R15             Did we get the DWS storage ?     @14
         JZ    REPORT_030          ...jif yes, continue             @14
*                                                                   @14
*        Unable to acquire IRRSEQ00 work area                       @14
*                                                                   @14
         $RWTO MSG017A,WRITE=YES                                    @14
         LHI   R15,BADENV18        Set return code                  @14
         ST    R15,RETCODE          & save it                       @14
         J     REPORTX_A             & go exit w/ return code       @14
*                                                                   @14
*        Clear obtained IRRSEQ00 work area                          @14
*                                                                   @14
REPORT_030 DS  0H                                                   @14
         ST    R1,@WORKAREA        Save for later                   @14
         LR    R11,R1              Dynamic area addressability      @14
         LR    R2,R1               Dynamic address to R2 for MVCL   @14
         L     R3,=A(WORKAREA_SIZE) Get length to initialize        @14
         LA    R4,0                Source                           @14
         LA    R5,0                Source len of 0 + pad byte of 0  @14
         MVCL  R2,R4               Clear the dynamic area storage   @14
*                                                                   @14
*        Set up for IRRSEQ00 processing                             @14
*                                                                   @14
         XC    ALET,ALET            Use zero ALET                   @14
         XC    SAFRC,SAFRC          Initialize return/reason codes  @14
         XC    RACFRC,RACFRC                                        @14
         XC    RACFRS,RACFRS                                        @14
         XC    @ACEE,@ACEE          Not supplying "run-as" ACEE     @14
         XC    OUTMSG,OUTMSG        Clear output message pointer    @14
         LA    R10,RADPLIST         Point to input p-list           @14
         ST    R10,PLIST@           Save it                         @14
*                                                                   @14
*        Prepare parameter list for R_Admin service call            @14
*                                                                   @14
*        - First time through adjustments                           @14
*                                                                   @14
         MVI   SUBPOOL,127          Use subpool 127 by default      @14
         MVI   FUNCODE,ADMN_XTR_NEXT_RESOURCE Set General Resource  @14C
                                    class                           @14
         OI    MYFLAGS,NEXTREQ      Indicate a "next" request       @14
*                                                                   @14
*        In the Parm_list area, fill in version and class name.     @14
*                                                                   @14
         LA    R6,RADPLIST                                          @14
         USING ADMN_PROF_MAP,R6                                     @14
         MVI   ADMN_PROF_VERSION,0                                  @14
         MVC   ADMN_PROF_CLSNAME(8),=CL8'#SNOMISC'                  @14
* Set flag to bypass IRR.RADMIN.RLIST authorization checks          @14
         XR    R14,R14             Prime flag word with 0s          @14
         A     R14,=AL4(ADMN_PROF_SKIPAUTH)                         @14
         ST    R14,SAVEFLAG        Save options locally             @14
         ST    R14,ADMN_PROF_FLAG  Set the flag word                @14
*                                                                   @14
*        PROFILE must be specified unless this is a "next" request. @14
*        In this case, we set a single blank as the profile name,   @14
*        which starts at the very beginning of the class. The       @14
*        profile name is copied to the input profile name to the    @14
*        contiguous storage after the Parm_list storage.            @14
*                                                                   @14
*                                                                   @14
         LA    R8,9                 Use length of 1                 @14
         ST    R8,ADMN_PROF_NAMELEN Save length in plist header     @14
         MVC   EXTPROF(9),=CL9'SVCUPDTE_' Set search profile        @14
         DROP  R6                                                   @14
*                                                                   @14
*        Initialize IRRSEQ00 call parameter list.  That is, a list  @14
*        of addresses to the individual parameters set up above. If @14
*        this is our first or only call, we use the input parameter @14
*        list we set up in our dynamic area. Otherwise, we use the  @14
*        output buffer from the previous call. In either case, the  @14
*        correct address has been stored in R3.                     @14
*                                                                   @14
EXTR100  DS    0H                                                   @14
REPORT_100 DS  0H                  Top of EXTRACT loop              @14
         L     R1,@WORKAREA        Pick up IRRSEQ00 work area       @14
         ST    R1,WORKAREA@        Save in IRRSEQ00 parameters      @14
         LA    R1,ALET                                              @14
         ST    R1,ALET1@                                            @14
         ST    R1,ALET2@                                            @14
         ST    R1,ALET3@           0                                @14
         LA    R1,SAFRC                                             @14
         ST    R1,SAFRC@                                            @14
         LA    R1,RACFRC                                            @14
         ST    R1,RACFRC@                                           @14
         LA    R1,RACFRS                                            @14
         ST    R1,RACFRS@                                           @14
         LA    R1,FUNCODE                                           @14
         ST    R1,FUNCODE@                                          @14
         L     R1,PLIST@                                            @14
         ST    R1,RADPLIST@                                         @14
         LA    R1,USER                                              @14
         ST    R1,USER@                                             @14
         LA    R1,@ACEE                                             @14
         ST    R1,ACEE@                                             @14
         LA    R1,SUBPOOL                                           @14
         ST    R1,SUBPOOL@                                          @14
         LA    R1,OUTMSG                                            @14
         ST    R1,OUTMSG@                                           @14
         OC    OUTMSG@,=X'80000000'    Turn on VL bit in last parm  @14
*                                                                   @14
*        Call R_admin.  We've manually built the plist which would  @14
*        correspond to the following CALL statement (continuation   @14
*        characters omitted). *                                     @14
*                                                                   @14
*        CALL  IRRSEQ00,                                        x   @14
*              (@WORKAREA,                                      x   @14
*              ALET,SAFRC,                                      x   @14
*              ALET,RACFRC,                                     x   @14
*              ALET,RACFRS,                                     x   @14
*              FUNCODE,                                         x   @14
*              PLIST,                                           x   @14
*              0,0,        Not passing "run-as" user or ACEE    x   @14
*              SUBPOOL,                                         x   @14
*              OUTMSG),VL                                           @14
         MODESET MODE=SUP          Switch to supervisor state       @14
         LA    R1,WORKAREA@        Get list of addrs in R1          @14
         L     R15,@R_admin        Get IRRSEQ00 service address     @14
         BALR  R14,R15                                              @14
         MODESET MODE=PROB         Switch back to problem state     @14
*                                                                   @14
*        For extract-next, we are now finished with the previous    @14
*        output buffer, which we used as the input p-list for this  @14
*        R_admin call. Free its storage now.                        @14
*                                                                   @14
         LA    R1,RADPLIST         Get address of first p-list      @14
         L     R10,PLIST@          Get address of previous p-list   @14
         CR    R1,R10              Was input plist the first one?   @14
         JE    EXTR110             Yes, don't free autodata field!  @14
         USING ADMN_PROF_MAP,R10   Get addressability to previous   @14
         L     R0,ADMN_PROF_OUTLEN Output area size to R0           @14
         XR    R2,R2               Clear for insert                 @14
         IC    R2,ADMN_PROF_SPID   Get subpool from p-list header   @14
         DROP  R10                                                  @14
         FREEMAIN RU,SP=(2),       Freemain                         @14X
               LV=(0),              dynamic                         @14X
               A=(10)                area                           @14
*                                                                   @14
*        Test return code and issue an error message if non-zero    @14
*                                                                   @14
REPORT_110 DS  0H                  Top of EXTRACT loop              @14
EXTR110  DS    0H                                                   @14
         ICM   R5,B'1111',SAFRC    Get SAF return code              @14
         JZ    EXTR200                                              @14
*                                                                   @14
*        Let's also quietly ignore a "not found" condition for      @14
*        extract next if we've returned at least one profile.       @14
*                                                                   @14
         TM    MYFLAGS,NEXTREQ+FOUND1  A fruitful "next" request?   @14
         JNO   EXTR120              No, issue the message           @14
         LA    R10,4                Get "not found" rc              @14
         CR    R10,R5               SAF "not found" rc?             @14
         JNE   EXTR120              No, truly an error              @14
         C     R10,RACFRC           RACF "not found" rc?            @14
         JNE   EXTR120              No, truly an error              @14
         C     R10,RACFRS           RACF "not found" reason?        @14
         JE    EXITRCA             ...jif so, good return to caller @14
*                                                                   @14
*        Display failing RACF & SAF return codes & reason code      @14
*                                                                   @14
REPORT_120 DS  0H                  Top of EXTRACT loop              @14
EXTR120  DS    0H                                                   @14
         $RWTO MSG100E,WRITE=YES                                    @14
         $RWTO MSG101E,WRITE=NO                                     @14
         LA    R14,SAFRC           R14 -> source area to convert    @14
         LA    R15,MSG101EA        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         LA    R14,RACFRC          R14 -> source area to convert    @14
         LA    R15,MSG101EB        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         LA    R14,RACFRS          R14 -> source area to convert    @14
         LA    R15,MSG101EC        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES      Write the message                @14
*                                                                   @14
*        May want to display "spooky" profile information here if   @14
*        SAFRC=4/RACFRC=4/RACFRS=20 for cleanup reasons             @14
*                                                                   @14
         LHI   R15,BADSAF1         Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     EXITRCA               & go return to caller          @14
*                                                                   @14
*        R_admin worked! Verify that we obtained the BASE segment   @14
*        of a CLASS(#SNOMISC) profile that starts with the text     @14
*        string "SVCUPDTE_".                                        @14
*                                                                   @14
REPORT_200 DS  0H                  Top of EXTRACT loop              @14
EXTR200  DS    0H                                                   @14
         L     R1,OUTMSG            Get output address in R1        @14
         USING ADMN_PROF_MAP,R1     Get class/profile from output   @14
*                                                                   @14
*        Get profile length in R5                                   @14
*                                                                   @14
         L     R5,ADMN_PROF_NAMELEN Get profile name length         @14
*                                                                   @14
*        Verify profile name started with "SVCUPDTE_"               @14
*                                                                   @14
REPORT_210 DS  0H                  Top of EXTRACT loop              @14
EXTR210  DS    0H                                                   @14
         CLC   ADMN_PROF_PROFNAME(9),=CL9'SVCUPDTE_'                @14
         JE    EXTR220              ...jif so                       @14
*                                                                   @14
* Did we get at least one profile ? If so we're through             @14
* otherwise none were found to be defined                           @14
*                                                                   @14
         TM    MYFLAGS,FOUND1      Did we find at least one ?       @14
         JO    EXITRCA             ...jif yes, skip message         @14
         $RWTO MSG103E,WRITE=YES                                    @14
         LHI   R15,BADEXTR2        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     EXITRCA               & go return to caller          @14
*                                                                   @14
*        Verify CLASS(#SNOMISC) returned                            @14
*                                                                   @14
REPORT_220 DS  0H                  Top of EXTRACT loop              @14
EXTR220  DS    0H                                                   @14
         OI    MYFLAGS,FOUND1      Indicate we found a profile      @14
         CLC   ADMN_PROF_CLSNAME,=CL8'#SNOMISC' CLASS(#SNOMISC) ?   @14
         JE    EXTR230              ...jif so                       @14
         $RWTO MSG104E,WRITE=YES                                    @14
         LHI   R15,BADEXTR3        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     EXITRCA               & go return to caller          @14
*                                                                   @14
*        Verify # segment descriptors                               @14
*                                                                   @14
*        -We have a desirable profile so extract the following      @14
*         fields:                                                   @14
*                                                                   @14
*         From ADMN_PROF_MAP:                                       @14
*         ===================                                       @14
*         ADMN_PROF_PROFNAME (profile name)                         @14
*                                                                   @14
*         From ADMN_PROF_FIELDDESC:                                 @14
*         =========================                                 @14
*         When ADMN_PROF_SEGNAME = CL8'BASE'                        @14
*           Case 1: When ADMN_PROF_FIELDNAME = CL8'OWNER'           @14
*                    capture owner of the profile                   @14
*           Case 2: When ADMN_PROF_FIELDNAME = CL8'DATA'            @14
*                    capture installation data                      @14
*           Case 3: When ADMN_PROF_FIELDNAME = CL8'ACLCNT'          @14
*                    capture ACLID (userid) & ACLACS (auth)         @14
*                    subfields                                      @14
*                                                                   @14
*         Case 3 involves a repeating field structure while         @14
*         Cases 1 & 2 do not.                                       @14
*                                                                   @14
REPORT_230 DS  0H                  Top of EXTRACT loop              @14
EXTR230  DS    0H                                                   @14
*        WTO   'Found an SVCUPDTE profile'                          @14
         MVI   Current_profname,X'40'                               @14
     MVC  Current_profname+1(L'Current_profname-1),Current_profname @14
         L     R1,OUTMSG           Restore R1 profile base @        @14
*                                                                   @14
*        Verify length of profile valid - between 12 & 15 bytes     @14
*                                                                   @14
*        Note: Instead of shutting down the program here we will    @14
*              issue a WTO that tries to include at least the       @14
*              minimum profile name length in the text of the       @14
*              message and then we'll skip this profile and         @14
*              continue with the next SVCUPDTE_* profile in the     @14
*              CL(#SNOMISC). We will issue a return code to the end @14
*              user that indicates they should report the problem.  @14
*                                                                   @14
         CHI   R5,Minimum_profname_length                           @14
         JL    EXTR230_A           ...jif invalid length            @14
         CHI   R5,Maximum_profname_length                           @14
         JH    EXTR230_A           ...jif invalid length            @14
*                                                                   @14
* Always capture the profile name since length is valid             @14
*                                                                   @14
         LR    R4,R5               Copy profile name length         @14
         BCTR  R4,0                Make length executable           @14
         EX    R4,CPYPRF           Copy input PARM string           @14
         J     EXTR231           ...skip message since length valid @14
*                                                                   @14
*        Issue message about invalid profile in database            @14
*                                                                   @14
REPORT_230_A DS 0H                 Top of EXTRACT loop              @14
EXTR230_A DS   0H                                                   @14
         LR    R4,R5               Copy profile name length         @14
         CHI   R4,Maximum_profname_length                           @14
         JNH   EXTR230_B           Go make executable               @14
         LHI   R4,Maximum_profname_length                           @14
REPORT_230_B DS 0H                 Top of EXTRACT loop              @14
EXTR230_B DS   0H                                                   @14
         BCTR  R4,0                Make length executable           @14
         EX    R4,CPYPRF           Copy input PARM string           @14
*                                                                   @14
LTORG_AREA LOCTR ,                                                  @14
CPYPRF   MVC  Current_profname(*-*),ADMN_PROF_PROFNAME profile name @14
SVCUPDTE LOCTR ,                                                    @14
*                                                                   @14
         $RWTO MSG901W,WRITE=YES                                    @14
         $RWTO MSG902A,WRITE=NO                                     @14
         MVC   MSG902AA,Current_profname Copy profile name to WTO   @14
         $RWTO WTOD,WRITE=YES                                       @14
         L     R1,OUTMSG           Restore R1 profile base @        @14
*                                                                   @14
*        Now we need to skip the rest of this profile and pick up   @14
*        processing with the next profile.                          @14
*                                                                   @14
*        <Might be easier to just set a return code and return>     @14
*                                                                   @14
*        <Need a specific return code here and a flag>              @14
*                                                                   @14
         LHI   R15,BADEXTR6        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
*        J     EXITRCA               & go return to caller          @14
         J     EXTR290               & go after next profile        @14
*                                                                   @14
REPORT_231 DS  0H                  Top of EXTRACT loop              @14
EXTR231  DS    0H                                                   @14
         L     R2,ADMN_PROF_NUMSEG R2 = # segment descriptors       @14
         CHI   R2,1                Single segment descriptor ?      @14
         JE    EXTR240             ...jif so                        @14
         LTR   R2,R2               Are there any segments ?         @14
         JZ    EXTR290             ...jif not, bail out             @14
*                                                                   @14
*        Unexpected number of segment descriptors                   @14
*                                                                   @14
         $RWTO MSG105E,WRITE=YES                                    @14
         LHI   R15,BADEXTR4        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     EXITRCA               & go return to caller          @14
*                                                                   @14
*        Verify segment descriptor is for BASE segment              @14
*                                                                   @14
*        -R2 contains number of segments                            @14
*                                                                   @14
REPORT_240 DS  0H                  Top of EXTRACT loop              @14
EXTR240  DS    0H                                                   @14
         LA    R3,ADMN_PROF_PROFNAME Get addr of profile name       @14
         A     R3,ADMN_PROF_NAMELEN  Add length of profile name to  @14C
                                     get @ of 1st segment descriptor@14
         USING ADMN_PROF_SEGDESC,R3  Basing for segment descriptor  @14
*                                                                   @14
         L     R5,ADMN_PROF_FIELDOFFSET Get offset to 1st FD        @14
         AR    R5,R1                 Add to base to get address     @14
         USING ADMN_PROF_FIELDDESC,R5 Basing for field descriptor   @14
*                                                                   @14
REPORT_250 DS  0H                  Top of EXTRACT loop              @14
EXTR250  DS    0H                     <DOSEGS label>                @14
DOSEGS   DS    0H                     <DOSEGS label>                @14
         L     R4,ADMN_PROF_NUMFIELDS Number of field descriptors   @14C
                                     for this segment               @14
         LA    R8,ADMN_PROF_SEGNAME  Address of segment name        @14
         CLC   ADMN_PROF_SEGNAME,=CL8'BASE' BASE segment ?          @14
         JE    EXTR260                                              @14
         $RWTO MSG106E,WRITE=YES                                    @14
         L     R1,OUTMSG           Restore R1 profile base @        @14
         LHI   R15,BADEXTR5        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     EXITRCA               & go return to caller          @14
*                                                                   @14
*        Check for repeating fields case                            @14
*                                                                   @14
REPORT_260 DS  0H                  Top of EXTRACT loop              @14
EXTR260  DS    0H                    <DOFIELDS label>               @14
DOFIELDS DS    0H                    <DOFIELDS label>               @14
         XR    R9,R9                 Clear for insert               @14
         ICM   R9,B'0011',ADMN_PROF_FIELDTYPE   Get type of field   @14
         L     R8,=A(ADMN_PROF_RPTHDR) Is it a repeat field header ?@14
         CR    R9,R8                                                @14
*        JNE   EXTR270             ...jif not, get next field       @14
*        AGO   .JRH0127A                                            @14
         JE    REPEAT              ...jif repeat field              @14
*                                                                   @14
* Boolean fields & normal character fields land here. We're only    @14
* interested in The OWNER, DATA & UACC fields of the non-repeating  @14
* flavor.                                                           @14
*                                                                   @14
******************************************************************* @14
*                                                                 * @14
*        Handle OWNER field capture here                          * @14
*                                                                 * @14
******************************************************************* @14
*                                                                   @14
* Is this the OWNER field ?                                         @14
*                                                                   @14
         CLC   ADMN_PROF_FIELDNAME,=CL8'OWNER' OWNER field ?        @14
         JNE   EXTR260_B           ...jif so                        @14
*        WTO   'Found OWNER field'                                  @14
         L     R1,OUTMSG           Restore R1 profile base @        @14
*                                                                   @14
* Varify OWNER field length positive                                @14
*                                                                   @14
         ICM   R14,B'1111',ADMN_PROF_FIELDLEN R14 length of field   @14
         BCTR  R14,0               Make OWNER length executable     @14
         CHI   R14,0               Is length positive ?             @14
         JNM   EXTR260_A           ...jif so                        @14
*                                                                   @14
* Length of OWNER field invalid - report it and skip this profile   @14
*                                                                   @14
         $RWTO MSG903A,WRITE=YES                                    @14
         $RWTO MSG902A,WRITE=NO                                     @14
         MVC   MSG902AA,Current_profname Copy profile name to WTO   @14
         $RWTO WTOD,WRITE=YES                                       @14
         L     R1,OUTMSG           Restore R1 profile base @        @14
         J     EXTR290               & go after next profile        @14
REPORT_260_A DS 0H                 Top of EXTRACT loop              @14
EXTR260_A DS   0H                                                   @14
         LR    R10,R1              Get R_admin output buffer @      @14
         A     R10,ADMN_PROF_DATA_OFFSET Add data offset            @14
*                                                                   @14
* Capture OWNER field content - 8 byte maximum                      @14
*                                                                   @14
* -When landing here:                                               @14
*                                                                   @14
*  R14 contains executable length of OWNER field                    @14
*  R10 contains @ of OWNER field in R_admin buffer                  @14
*                                                                   @14
         MVI   Current_OWNER,X'40'                                  @14
         MVC   Current_OWNER+1(L'Current_OWNER-1),Current_OWNER     @14
         EX    R14,CPYOWNR         Copy OWNER field                 @14
*                                                                   @14
LTORG_AREA LOCTR ,                                                  @14
CPYOWNR  MVC   Current_OWNER(*-*),0(R10) Copy OWNER field           @14
SVCUPDTE LOCTR ,                                                    @14
*                                                                   @14
         J     NEXTFLD             Go get next field                @14
******************************************************************* @14
*                                                                 * @14
*        Handle DATA field capture here                           * @14
*                                                                 * @14
******************************************************************* @14
REPORT_260_B DS 0H                 Top of EXTRACT loop              @14
EXTR260_B DS   0H                    <DOFIELDS label>               @14
         CLC   ADMN_PROF_FIELDNAME,=CL8'DATA'  DATA field ?         @14
*        JNE   NEXTFLD             ...jif not, go get next field    @14
         JNE   EXTR260_C        ...jif not, go check next desirable @14
*                                                                   @14
* Capture DATA field content - 255 byte maximum                     @14
*                                                                   @14
*        WTO   'Found DATA field'                                   @14
         L     R1,OUTMSG           Restore R1 profile base @        @14
*                                                                   @14
* Varify DATA field length positive                                 @14
*                                                                   @14
         ICM   R14,B'1111',ADMN_PROF_FIELDLEN R14 length of field   @14
         BCTR  R14,0               Make OWNER length executable     @14
         CHI   R14,0               Is length positive ?             @14
         JNM   EXTR260_BB          ...jif so                        @14
*                                                                   @14
* Length of DATA field invalid - report it and skip this profile    @14
*                                                                   @14
         $RWTO MSG904A,WRITE=YES                                    @14
         $RWTO MSG902A,WRITE=NO                                     @14
         MVC   MSG902AA,Current_profname Copy profile name to WTO   @14
         $RWTO WTOD,WRITE=YES                                       @14
         L     R1,OUTMSG           Restore R1 profile base @        @14
         J     EXTR290               & go after next profile        @14
REPORT_260_BB DS 0H                Top of EXTRACT loop              @14
EXTR260_BB DS  0H                                                   @14
         CHI   R14,99              > 99 bytes ?                     @14
         JNH   EXTR260_BBB         ...jif not                       @14
         LHI   R14,99              Crop at 100 bytes                @14
REPORT_260_BBB DS 0H               Top of EXTRACT loop              @14
EXTR260_BBB DS 0H                                                   @14
         LR    R10,R1              Get R_admin output buffer @      @14
         A     R10,ADMN_PROF_DATA_OFFSET Add data offset            @14
*                                                                   @14
* Capture DATA field content - 100 byte maximum                     @14
*                                                                   @14
* -When landing here:                                               @14
*                                                                   @14
*  R14 contains executable length of DATA field                     @14
*  R10 contains @ of OWNER field in R_admin buffer                  @14
*                                                                   @14
         MVI   Current_DATA,X'40'                                   @14
         MVC   Current_DATA+1(L'Current_DATA-1),Current_DATA        @14
         EX    R14,CPYDATA         Copy DATA field                  @14
*                                                                   @14
LTORG_AREA LOCTR ,                                                  @14
CPYDATA  MVC   Current_DATA(*-*),0(R10) Copy DATA field             @14
SVCUPDTE LOCTR ,                                                    @14
*                                                                   @14
         J     NEXTFLD             ...jif not, go get next field    @14
******************************************************************* @14
*                                                                 * @14
*        Handle UACC field capture here                           * @14
*                                                                 * @14
******************************************************************* @14
REPORT_260_C DS 0H                 Top of EXTRACT loop              @14
EXTR260_C DS   0H                    <DOFIELDS label>               @14
         CLC   ADMN_PROF_FIELDNAME,=CL8'UACC'  UACC field ?         @14
         JNE   NEXTFLD             ...jif not, go get next field    @14
*                                                                   @14
* Capture UACC field content - 7 byte maximum                       @14
*                                                                   @14
*        WTO   'Found UACC field'                                   @14
         L     R1,OUTMSG           Restore R1 profile base @        @14
*                                                                   @14
* Varify UACC field length positive                                 @14
*                                                                   @14
         ICM   R14,B'1111',ADMN_PROF_FIELDLEN R14 length of field   @14
         BCTR  R14,0               Make OWNER length executable     @14
         CHI   R14,0               Is length positive ?             @14
         JNM   EXTR260_CC          ...jif so                        @14
*                                                                   @14
* Length of DATA field invalid - report it and skip this profile    @14
*                                                                   @14
         $RWTO MSG905A,WRITE=YES                                    @14
         $RWTO MSG902A,WRITE=NO                                     @14
         MVC   MSG902AA,Current_profname Copy profile name to WTO   @14
         $RWTO WTOD,WRITE=YES                                       @14
         L     R1,OUTMSG           Restore R1 profile base @        @14
         J     EXTR290               & go after next profile        @14
REPORT_260_CC DS 0H                Top of EXTRACT loop              @14
EXTR260_CC DS  0H                                                   @14
         CHI   R14,6               > 7 bytes ?                      @14
         JNH   EXTR260_CCC         ...jif not                       @14
         LHI   R14,6               Crop at 7 bytes                  @14
REPORT_260_CCC DS 0H               Top of EXTRACT loop              @14
EXTR260_CCC DS 0H                                                   @14
         LR    R10,R1              Get R_admin output buffer @      @14
         A     R10,ADMN_PROF_DATA_OFFSET Add data offset            @14
*                                                                   @14
* Capture UACC field content - 7 byte maximum                       @14
*                                                                   @14
* -When landing here:                                               @14
*                                                                   @14
*  R14 contains executable length of UACC field                     @14
*  R10 contains @ of OWNER field in R_admin buffer                  @14
*                                                                   @14
         MVI   Current_UACC,X'40'                                   @14
         MVC   Current_UACC+1(L'Current_UACC-1),Current_UACC        @14
         EX    R14,CPYUACC         Copy DATA field                  @14
*                                                                   @14
LTORG_AREA LOCTR ,                                                  @14
CPYUACC  MVC   Current_UACC(*-*),0(R10) Copy UACC field             @14
SVCUPDTE LOCTR ,                                                    @14
*                                                                   @14
         J     NEXTFLD             Go get next field                @14
*                                                                   @14
* Do we have the DATA & OWNER fields for this profile now ?         @14
*                                                                   @14
REPEAT   DS    0H                                                   @14
         BRAS  R14,DOREPEAT                                         @14
         J     NEXTFLD2                                             @14
.JRH0127A ANOP                                                      @14
*                                                                   @14
*        WTO the ADMN_PROF_FIELDNAME field                          @14
*                                                                   @14
         $RWTO MSG120I,WRITE=NO                                     @14
         MVC   MSG120IA,ADMN_PROF_FIELDNAME                         @14
         $RWTO WTOD,WRITE=YES                                       @14
*                                                                   @14
*        Set basing for next field descriptor. Decrement count of   @14
*        fields to see if we are finished.                          @14
*                                                                   @14
EXTR270  DS    0H                                                   @14
NEXTFLD  DS    0H                                                   @14
         LA    R5,ADMN_PROF_NEXTFIELD Get next FD address           @14
EXTR280  DS    0H                                                   @14
NEXTFLD2 DS    0H                                                   @14
         BRCT  R4,EXTR260          Decrement number of fields       @14
*                                                                   @14
*        Done with fields, check next segment                       @14
*                                                                   @14
*        Set basing for next segment descriptor. Decrement count    @14
*        of segments to see if we are finished. Note that R5 is     @14
*        already pointing to the first field descriptor in the next @14
*        segment.                                                   @14
*                                                                   @14
NEXTSEG  DS    0H                                                   @14
         LA    R3,ADMN_PROF_NEXTSEG  Get next SD address            @14
         BRCT  R2,EXTR250          Decrement number of segments     @14
*                                                                   @14
*        Done with segments, and hence with this profile. Loop back @14
*        for another R_admin call.                                  @14
*                                                                   @14
EXTR290  DS    0H                                                   @14
DONESEGS DS    0H                                                   @14
         TM    MYFLAGS,NEXTREQ       Is this a next request?        @14
         JZ    EXTR300               Done with segments, finish up  @14
*                                                                   @14
* If we encountered a ghost generic during extract-next, we need to @14
* stop looping. We do have an output block containing the profile   @14
* name, so we need to free it.                                      @14
*                                                                   @14
         TM    MYFLAGS,SPOOKY        Paranormal encounter?          @14
         JO    EXTR300               Yes, free output and bail out  @14
*                                                                   @14
* We use the output p-list as the input p-list for the next         @14
* iteration. R_admin will maintain the generic bit for us, but we   @14
* need to keep setting the name-only bit on each iteration, because @14
* R_admin does not propagate that one.                              @14
*                                                                   @14
*        AGO   .JRH10A                                              @14
         L     R2,ADMN_PROF_FLAG     Get output flags               @14
         A     R2,SAVEFLAG           Add back specified options     @14
         ST    R2,ADMN_PROF_FLAG     Save updated flag word         @14
*.JRH10A  ANOP                                                      @14
*                                                                   @14
         MVC   PLIST@,OUTMSG         Save output buffer for input   @14
         OI    MYFLAGS,FOUND1                                       @14
*                                                                   @14
* We have found a CL(#SNOMISC) SVCUPDTE_* profile and we need to    @14
* extract the content that we need. This content includes the       @14
* following:                                                        @14
*                                                                   @14
* From Base segment:                                                @14
* ==================                                                @14
* profile name                                                      @14
* installation data field                                           @14
* OWNER                                                             @14
* UACC                                                              @14
*                                                                   @14
* From repeating ACLCNT fields:                                     @14
* =============================                                     @14
* userids & access priviledges (ACLID & ACLACS)                     @14
*                                                                   @14
* The ACLCNT repeating field has 2 subfields we need (ACLID &       @14
* ACLACS) and it contains an occurrence count of the number of the  @14
* repeating ACLCNT content.                                         @14
*                                                                   @14
* We also need to perform an ENQ test to verify whether or not the  @14
* SVC slot is in use and report the address space that has any      @14
* outstanding ENQueue for that SYSTEM level resource.               @14
*                                                                   @14
*                                                                   @14
*                                                                   @14
*                                                                   @14
*                                                                   @14
*                                                                   @14
*                                                                   @14
         J     EXTR100               Yes, go get next               @14
*                                                                   @14
EXTR300  DS    0H                                                   @14
FREEOUT  DS    0H                                                   @14
         L     R0,ADMN_PROF_OUTLEN Output area size to R0           @14
         XR    R2,R2               Clear for insert                 @14
         IC    R2,SUBPOOL          Get specified subpool            @14
         FREEMAIN RU,SP=(2),       freemain                         @14X
               LV=(0),             dynamic                          @14X
               A=(1)               area                             @14
*                                                                   @14
         DROP  R1                                                   @14
*                                                                   @14
         DC    H'0'                <debug>                          @14
*                                                                   @14
*        If IRRSEQ00 loaded then delete it                          @14
*                                                                   @14
REPORTX_A DS   0H                                                   @14
EXITRCA  DS    0H                                                   @14
         L     R1,@R_admin         Is IRRSEQ00 loaded ?             @14
         LTR   R1,R1                                                @14
         JZ    REPORTX_B           ...jif not                       @14
         BASR  R10,0               Macro internal addressability    @14
         USING *,R10               """""""""""""""""""""""""""""    @14
         DELETE EP=IRRSEQ00        Delete the service from memory   @14
         DROP  R10             Drop internal macro addressability   @14
*                                                                   @14
*        If IRRSEQ00 common work area exists then free it           @14
*                                                                   @14
REPORTX_B DS   0H                                                   @14
         L     R1,@WORKAREA        Does IRRSEQ00 area exist ?       @14
         LTR   R1,R1               """"""""""""""""""""""""""       @14
         JZ    REPORTX_C           ...jif not                       @14
         L     R0,=A(WORKAREA_SIZE) Get length to free              @14
         STORAGE RELEASE,          Free                             @14X
               ADDR=(R1),           the DSNTAB                      @14X
               LENGTH=(R0)           work area                      @14
*                                                                   @14
*        If report file open then close it                          @14
*                                                                   @14
REPORTX_C DS   0H                                                   @14
         USING IHADCB,R10                                           @14
         LA    R10,SYSPRINT        R10 -> SYSPRINT DCB              @14
         TM    DCBOFLGS,DCBOFOPN   Is data set open ?               @14
         JNO   REPORTX             ...jif not                       @14
         OI    W#OPNDO,X'80'       Indicate end of parameter list   @14
         CLOSE ((R10)),MODE=31,MF=(E,W#OPNDO) Close SYSPRINT        @14
*                                                                   @14
         DROP  R10                                                  @14
*                                                                   @14
REPORTX  DS    0H                                                   @14
         LM    R14,R12,REPORTSAVE+12 Restore caller's registers     @14
         BR    R14                 Return to caller                 @14
*                                                                   @14
    TITLE 'SVCUPDTE - DOREPEAT - report BASE && SD elements'        @14
DOREPEAT DS    0H                                                   @14
******************************************************************* @14
*                                                                 * @14
* For repeat fields, cycle through each subfield for each         * @14
* occurrence after generating the report header lines for the     * @14
* current profile.                                                * @14
*                                                                 * @14
* Register input:  R5  = address of repeat field header           * @14
*                         descriptor                              * @14
*                  R14 = return address                           * @14
*                                                                 * @14
* Register output: R5 = address of the next field descriptor      * @14
*                       after the entire repeat field just        * @14
*                       processed                                 * @14
*                                                                 * @14
* Register usage:                                                 * @14
*  R6 - Number of occurrences of repeat field                     * @14
*  R7 - Number of subfields within each occurrence                * @14
*  R8 - Address of subfield descriptor                            * @14
*  R9 - Work register                                             * @14
*                                                                 * @14
******************************************************************* @14
         STM   R14,R12,DOREPEATSAVE+12 Save caller's registers      @14
*                                                                   @14
*        BRASL R14,Report_profile  Go report profile                @14
*        WTO   'DOREPEAT subroutine called'                         @14
         AGO   .JH0806A                                             @14
         $RWTO MSG700D,WRITE=NO                                     @14
         MVC   MSG700DA,Current_profname                            @14
         $RWTO WTOD,WRITE=YES                                       @14
         $RWTO MSG701D,WRITE=NO                                     @14
         MVC   MSG701DA,Current_DATA                                @14
         $RWTO WTOD,WRITE=YES                                       @14
         $RWTO MSG702D,WRITE=NO                                     @14
         MVC   MSG702DA,Current_OWNER                               @14
         MVC   MSG702DB,Current_UACC                                @14
         $RWTO WTOD,WRITE=YES                                       @14
.JH0806A ANOP                                                       @14
* Build profile + installation data line                            @14
         MVI   PRTLINE+0,C' '      Single space                     @14
         MVC   PRTLINE+1(L'Current_profname),Current_profname       @14
         MVC   PRTLINE+18(L'Current_DATA),Current_DATA              @14
         LA    R0,PRTLINE                                           @14
         BRASL R14,PUTLINE                                          @14
* Build owner + UACC line                                           @14
         MVC   PRTLINE+18(06),=CL6'Owner:'                          @14
         MVC   PRTLINE+25(08),Current_OWNER                         @14
         MVC   PRTLINE+34(05),=CL5'UACC:'                           @14
         MVC   PRTLINE+40(07),Current_UACC                          @14
         LA    R0,PRTLINE                                           @14
         BRASL R14,PUTLINE                                          @14
*                                                                   @14
*        Check to see if this SVC slot is currently in use by an    @14
*        SVCUPDTE installation task on the current system...that is @14
*        if the profile's installation data field does NOT start    @14
*        with the character string "SPECIAL". If the profile's      @14
*        installation data field starts with the character string   @14
*        special then we assume that the installation of this       @14
*        specific SVC does not use our facility so we do not want   @14
*        to erroneously report it as not being in use.              @14
*                                                                   @14
         CLC   =C'SPECIAL',Current_profname Is it SPECIAL ?         @14
         JE    DOREPEAT_020           Go resume profile processing  @14
         NI    Profile_flags,X'FF'-Profile_INUSE                    @14
         LA    R1,Current_profname R1 -> current profile name       @14
         BRASL R14,CHKINUSE        Go see if this profile is in use @14
* Build Status line                                                 @14
         MVC   PRTLINE+18(07),=CL7'Status:'                         @14
         TM    Profile_flags,Profile_INUSE Profile in use ?         @14
         JNO   DOREPEAT_010        ...jif not                       @14
*                                                                   @14
*        Profile found to be in use - report requestor information  @14
*                                                                   @14
         AGO   .JH0806B                                             @14
         $RWTO MSG705D,WRITE=NO                                     @14
         MVC   MSG705DA,INUSE_JOBNAME Install requestor job name    @14
         MVC   MSG705DB,INUSE_ASID    Install requestor ASID        @14
         $RWTO WTOD,WRITE=YES                                       @14
.JH0806B ANOP                                                       @14
* Following line added by @14 change                                @14
         MVC   PRTLINE+26(61),=CL61'SVC slot currently in use by job naX
               me 12345678 in ASID 0x1234.'                         @14
         MVC   PRTLINE+64(08),INUSE_JOBNAME                         @14
         MVC   PRTLINE+83(04),INUSE_ASID                            @14
         LA    R0,PRTLINE                                           @14
         BRASL R14,PUTLINE                                          @14
         J     DOREPEAT_020           Go resume profile processing  @14
*                                                                   @14
*        Profile found to not be in use - show status               @14
*                                                                   @14
DOREPEAT_010 DS 0H                                                  @14
         AGO   .JH0806C                                             @14
         $RWTO MSG704D,WRITE=YES                                    @14
.JH0806C ANOP                                                       @14
* Following line added by @14 change                                @14
         MVC   PRTLINE+26(57),=CL57'SVC slot is not currently in use byX
                the SVCUPDTE program.'                              @14
         LA    R0,PRTLINE                                           @14
         BRASL R14,PUTLINE                                          @14
*                                                                   @14
* Make sure we're dealing with an ACLCNT repeating field else skip  @14
* over all the subfields for repeating fields we're not interested  @14
* in processing.                                                    @14
*                                                                   @14
DOREPEAT_020 DS 0H                                                  @14
         NI    Profile_flags,X'FF'-Skip_repeat_field Reset flag     @14
         LA    R14,ADMN_PROF_FIELDNAME Get @ of field name          @14
         CLC   =CL8'ACLCNT',0(R14) ACLCNT repeat field ?            @14
         JE    DOREPEAT_100        ...jif yes, skip setting flag    @14
         OI    Profile_flags,Skip_repeat_field Set "skip" flag      @14
DOREPEAT_100 DS 0H                                                  @14
       NI    Profile_flags,X'FF'-Have_ACLID-Have_ACLACS Reset flags @14
         L     R6,ADMN_PROF_RPTNUM Get number of occurrences        @14
         LA    R8,ADMN_PROF_NEXTFIELD Get next FD address           @14
DOREPEAT_200 DS 0H                                                  @14
RPTOCC   DS    0H                                                   @14
         L     R7,ADMN_PROF_FIELDDIM Get # subfields per occurrence @14
         DROP  R5                  Drop ADMN_PROF_FIELDDESC         @14
        USING ADMN_PROF_FIELDDESC,R8 Basing for subfield descriptor @14
DOREPEAT_300 DS 0H                                                  @14
RPTSFLD  DS    0H                                                   @14
         LA    R14,ADMN_PROF_FIELDNAME Get @ of field name          @14
         L     R9,ADMN_PROF_FIELDLEN Get data length                @14
         BCTR  R9,0                Make length EXecutable           @14
         CLC   =CL8'ACLID',0(R14)  Is this ACLID (userid) field ?   @14
         JNE   DOREPEAT_400        ..jif not check next field       @14
         MVI   Current_ACLID,X'40'                                  @14
         MVC   Current_ACLID+1(L'Current_ACLID-1),Current_ACLID     @14
         L     R14,OUTMSG          Get R_admin output buffer @      @14
         A     R14,ADMN_PROF_DATA_OFFSET Add data offset            @14
         EX    R9,CPYACLID         Copy ACLID field data            @14
*                                                                   @14
LTORG_AREA LOCTR ,                                                  @14
CPYACLID MVC   Current_ACLID(*-*),0(R14) Copy ACLID data field      @14
SVCUPDTE LOCTR ,                                                    @14
*                                                                   @14
         OI    Profile_flags,Have_ACLID Set flag                    @14
         J     DOMSG1              Go get next FD                   @14
*                                                                   @14
DOREPEAT_400 DS 0H                                                  @14
         CLC   =CL8'ACLACS',0(R14) Is this ACLACS (auth) field ?    @14
         JNE   DOREPEAT_500        ..jif not check next field       @14
         MVI   Current_ACLACS,X'40'                                 @14
         MVC   Current_ACLACS+1(L'Current_ACLACS-1),Current_ACLACS  @14
         L     R14,OUTMSG          Get R_admin output buffer @      @14
         A     R14,ADMN_PROF_DATA_OFFSET Add data offset            @14
         EX    R9,CPYACLACS        Copy ACLACS field data           @14
*                                                                   @14
LTORG_AREA LOCTR ,                                                  @14
CPYACLACS MVC  Current_ACLACS(*-*),0(R14) Copy ACLACS data field    @14
SVCUPDTE LOCTR ,                                                    @14
*                                                                   @14
         OI    Profile_flags,Have_ACLACS Set flag                   @14
         J     DOMSG1              Go get next FD                   @14
*                                                                   @14
DOREPEAT_500 DS 0H                                                  @14
DOMSG1   DS    0H                                                   @14
         LA    R8,ADMN_PROF_NEXTFIELD Get next FD address           @14
         BRCT  R7,RPTSFLD          Loop if subfields remaining      @14
*        WTO   'Finished SD descriptors'                            @14
* Do we have both ACLID & ACLACS fields ?                           @14
         TM    Profile_flags,Have_ACLACS+Have_ACLID                 @14
         JNO   DOREPEAT_600        ...jif not                       @14
*        WTO   'We have found both ACLID && ACLACS'                 @14
*                                                                   @14
* Build ACLID: ACLACS WTO message                                   @14
*                                                                   @14
         AGO   .JH0806D                                             @14
         $RWTO MSG703D,WRITE=NO                                     @14
         MVC   MSG703DA,Current_ACLID                               @14
         MVC   MSG703DB,Current_ACLACS                              @14
         $RWTO WTOD,WRITE=YES                                       @14
.JH0806D ANOP                                                       @14
         MVC   PRTLINE+18(07),=CL7'ACLID: '                         @14
         MVC   PRTLINE+25(08),Current_ACLID                         @14
         MVC   PRTLINE+34(08),=CL8'ACLACS: '                        @14
         MVC   PRTLINE+42(07),Current_ACLACS                        @14
         LA    R0,PRTLINE                                           @14
         BRASL R14,PUTLINE                                          @14
DOREPEAT_600 DS 0H                                                  @14
         BRCT  R6,RPTOCC                                            @14
         LR    R5,R8            All done, set R5 to next FD address @14
         ST    R5,DOREPEATSAVE+40  Save in R5 slot for caller       @14
         LA    R0,PRTLINE        Print blank line profile seperator @14
         BRASL R14,PUTLINE                                          @14
DOREPEATX DS   0H                                                   @14
         LM    R14,R12,DOREPEATSAVE+12 Restore caller's registers   @14
         BR    R14                 Return to caller                 @14
*                                                                   @14
        TITLE 'PUTLINE  - Write line to report file && count lines' @14
*-----------------------------------------------------------------* @14
*                                                                 * @14
*        PUTLINE  - Write record to report file DCB. Record       * @14
*                   address located in GPR0 on entry. Returns to  * @14
*                   caller.                                       * @14
*                                                                 * @14
*-----------------------------------------------------------------* @14
PUTLINE  DS    0H                                                   @14
         STM   R14,R12,PUTSAVE+12  Save entry registers             @14
*                                                                   @14
*        Force header lines if needed                               @14
*                                                                   @14
         CP    Line_count,MAXLINES Force page headings ?            @14
         JL    PUTL002             ...jif not                       @14
*                                                                   @14
*        Generate the header lines                                  @14
*                                                                   @14
         ST    R0,SAVER0           Save entry R0 value              @14
         ZAP   Line_count,=P'5'    Set line count to 5 for headers  @14
         AP    Page_count,=P'1'    Bump page count                  @14
*                                                                   @14
         MVI   HDRLINE,C' '        Ripple to                        @14
         MVC   HDRLINE+1(L'HDRLINE-1),HDRLINE  blanks               @14
* Generate 1st header line                                          @14
         LARL  R14,USRHD#1                                          @14
         MVC   HDRLINE(USRHD#1L),0(R14) Header line #1              @14
*                                                                   @14
*        Install program name, program version, date & time         @14
*                                                                   @14
         LARL  R14,PGMNAME                                          @14
         MVC   UHDL1#1,0(R14)      Program name to header line      @14
         LARL  R14,PGMVER                                           @14
         MVC   UHDL1#2,0(R14)      Program version to header line   @14
         LARL  R14,PGMDATE                                          @14
         MVC   UHDL1#3,4(R14)      Program assembly date (MM)       @14
         MVC   UHDL1#4,6(R14)      Program assembly date (DD)       @14
         MVC   UHDL1#5,0(R14)      Program assembly date (YYYY)     @14
         LARL  R14,PGMTIME                                          @14
         MVC   UHDL1#6,0(R14)      Program assembly date (HH)       @14
         MVC   UHDL1#7,3(R14)      Program assembly date (HH)       @14
*                                                                   @14
*        Install page # EDIT pattern & EDIT it                      @14
*                                                                   @14
         MVC   UHDL1#8,EDIT_page_# Install EDit pattern             @14
         ED    UHDL1#8,Page_count  Install page # in print line     @14
         LA    R0,HDRLINE          R0 -> report line                @14
         BRASL R14,PUTHDR          Write the header line            @14
* Generate 2nd header line                                          @14
         LARL  R14,USRHD#2                                          @14
         MVC   HDRLINE(USRHD#2L),0(R14) Header line #2              @14
         MVC   UHDL2#1,HOURS                                        @14
         MVC   UHDL2#2,MINUTES                                      @14
         MVC   UHDL2#3,SECONDS                                      @14
         MVC   UHDL2#4,MONTH                                        @14
         MVC   UHDL2#5,DAY                                          @14
         MVC   UHDL2#6,YEAR                                         @14
         LA    R0,HDRLINE          R0 -> report line                @14
         BRASL R14,PUTHDR          Write the header line            @14
* Generate 3rd header line                                          @14
         LARL  R14,USRHD#3                                          @14
         MVC   HDRLINE(USRHD#3L),0(R14) Header line #3              @14
         LA    R0,HDRLINE          R0 -> report line                @14
         BRASL R14,PUTHDR          Write the header line            @14
* Generate 4th header line                                          @14
         LARL  R14,USRHD#4                                          @14
         MVC   HDRLINE(USRHD#4L),0(R14) Header line #4              @14
         LA    R0,HDRLINE          R0 -> report line                @14
         BRASL R14,PUTHDR          Write the header line            @14
* Generate 5th header line                                          @14
         LARL  R14,USRHD#5                                          @14
         MVC   HDRLINE(USRHD#5L),0(R14) Header line #5              @14
         LA    R0,HDRLINE          R0 -> report line                @14
         BRASL R14,PUTHDR          Write the header line            @14
         L     R0,SAVER0           Restore entry R0 value           @14
*                                                                   @14
*        Count line toward maximum per page by examining CC         @14
*                                                                   @14
*        Note: ANSI "overprint" (+) is not counted                  @14
*                                                                   @14
PUTL002  DS    0H                                                   @14
         LR    R1,R0               Copy R0 for tests                @14
         CLI   0(R1),C' '          Single space ?                   @14
         JNE   PUTL010             ...jif not                       @14
         AP    Line_count,=P'1'    otherwise increment by 1         @14
         J     PUTLINE@             and go to resume point          @14
PUTL010  DS    0H                                                   @14
         CLI   0(R1),C'1'          Form feed ?                      @14
         JNE   PUTL020             ...jif not                       @14
         AP    Line_count,=P'1'    otherwise increment by 1         @14
         J     PUTLINE@             and go to resume point          @14
PUTL020  DS    0H                                                   @14
         CLI   0(R1),C'0'          Double space ?                   @14
         JNE   PUTL030             ...jif not                       @14
         AP    Line_count,=P'2'    otherwise increment by 2         @14
         J     PUTLINE@             and go to resume point          @14
PUTL030  DS    0H                                                   @14
         CLI   0(R1),C'-'          Triple space ?                   @14
         JNE   PUTLINE@            ...jif not                       @14
         AP    Line_count,=P'3'    otherwise increment by 3         @14
*                                                                   @14
PUTLINE@ DS    0H                                                   @14
         LA    R1,SYSPRINT         R1 -> SYSPRINT DCB               @14
* Note: R0 on entry contains address of print line                  @14
         LA    R15,SPUTCODE        R15 -> PUT routine (<16MB)       @14
         BASSM R2,R15              Call PUT routine                 @14
         L     R2,PUTSAVE+20       Restore entry R0 to R2           @14
         MVI   0(R2),C' '          Clear area just processed        @14
         MVC   1(132,R2),0(R2)      to blanks                       @14
         LM    R14,R12,PUTSAVE+12  Restore entry registers          @14
         BR    R14                 Return to caller                 @14
*                                                                   @14
         TITLE 'SVCUPDTE - PUTHDR - Write header line'              @14
PUTHDR   DS    0H                                                   @14
         STM   R14,R12,PUTHDRSAVE+12  Save caller's GPRs            @14
* Note: R0 on entry contains address of print line                  @14
         LR    R2,R0               Save print record address        @14
         LA    R1,SYSPRINT         R1 -> SYSPRINT DCB               @14
         LA    R15,SPUTCODE        R15 -> PUT routine (<16MB)       @14
         BASSM R2,R15              Call PUT routine                 @14
         L     R2,PUTHDRSAVE+20    Restore entry R0 to R2           @14
         MVI   0(R2),C' '          Clear area just processed        @14
         MVC   1(132,R2),0(R2)      to blanks                       @14
         LM    R14,R12,PUTHDRSAVE+12 Restore entry registers        @14
         BR    R14                 Return to caller                 @14
*                                                                   @14
  TITLE 'SVCUPDTE - CHKINUSE - verify profile not in use on system' @14
******************************************************************* @14
* CHKINUSE                                                        * @14
*                                                                 * @14
*        This routine verifies that the SVC slot profile whose    * @14
*        text string value is passed in the Current_profname      * @14
*        field is not in use on this system. If it is found to be * @14
*        in use the flag Profile_flags.Profile_INUSE will be set  * @14
*        on an in addition the following fields will be populated * @14
*        for the caller's optional usage:                         * @14
*                                                                 * @14
*        INUSE_ASID    - ASID of address space using the profile  * @14
*        INUSE_JOBNAME - JOBNAME of address space using the       * @14
*                        profile at the current time              * @14
*                                                                 * @14
*        This routine expects the following fields to have        * @14
*        parsed values when called:                               * @14
*                                                                 * @14
*        Current_profname                                         * @14
*                                                                 * @14
*        This routine is called from the following 2 locations:   * @14
*                                                                 * @14
*        1) DOREPEAT when listing all SVCUPDTE profiles           * @14
*        2) ENV000 when verifying that the targeted SVC slot is   * @14
*           not already in use by another currently executing     * @14
*           address space.                                        * @14
*                                                                 * @14
*        This routine only returns a return code of BADQSCAN if   * @14
*        an unexpected return code is returned from the QSCAN     * @14
*        service. Currently the DOREPEAT routine does not check   * @14
*        this return code since it would only have occurred       * @14
*        during a list operation. The ENV000 routine on the other * @14
*        hand must check the return code. In the case of an       * @14
*        unexpected QSCAN return code messages SVCU906A &         * @14
*        SVCU907A messages will have always been issued.          * @14
*                                                                 * @14
******************************************************************* @14
CHKINUSE DS    0H                                                   @14
         STM   R14,R12,CHKINUSESAVE+12 Save caller's registers      @14
*                                                                   @14
         MVC   RIBS(RIBSINIL),RIBSINIT INITIALIZE RIB HOLDING AREA  @14
         MVC   GQSLIST(GQSMAPL),GQSMAP   INITIALIZE GQSCAN AREA     @14
         MVC   QNAME(L'Current_profname),Current_profname           @14
         L     R3,RIBSPACE_p       Refresh RIBs work area           @14
         ST    R3,RIBS              pointer                         @14
         L     R3,RIBS             R3 -> RIBs work area             @14
         L     R4,AMOUNTL             SET R4 TO AMOUNT OF RIB SPACE @14
         LA    R5,QNAME                POINT R5 TO QNAME FIELD      @14
         LA    R6,RNAME                POINT R6 TO RNAME FIELD      @14
         LA    R8,RNAME                Setup for finding length     @14
         XR    R7,R7                                                @14
         MVI   RNAMEBLK,X'40'          Set trailing blank           @14
*                                                                   @14
*        Calculate RNAME resource length                            @14
*                                                                   @14
CHKINUSE_010 DS 0H                                                  @14
         CLI   0(R8),X'40'             Do we have a blank?          @14
         JE    CHKINUSE_020            Yes,  go process             @14
         AHI   R7,1                    Add one to length            @14
         C     R7,=F'6'                Is the RNAME too long ?      @14
         JH    CHKINUSE_020            ...jif so, go process        @14
         AHI   R8,1                    Bump up one for search       @14
         J     CHKINUSE_010            Go back and look again       @14
CHKINUSE_020 DS 0H                                                  @14
         STCM  R7,B'0001',RNAMEEL  Save length for possible ENQ     @14
*                                                                   @14
* Development code starts:                                          @14
*                                                                   @14
*        CLC   Current_profname,=CL15'SVCUPDTE_109241'              @14
*        JNE   CHKINUSE_030                                         @14
*        MVC   QNAME(14),=C'SVCUPDTE109241'                         @14
**       BCTR  R7,0                                                 @14
*                                                                   @14
CHKINUSE_030 DS 0H                                                  @14
*                                                                   @14
* Development code ends:                                            @14
*                                                                   @14
         GQSCAN AREA=((R3),(R4)),                                   @14X
               RESNAME=((R5),(R6),(R7),SPECIFIC,8),                 @14X
               SCOPE=SYSTEM,                                        @14X
               MF=(E,GQSLIST)                                       @14
*                                                                   @14
*        Check GQSCAN return code                                   @14
*                                                                   @14
         CHI   R15,4               Slot in use ?                    @14
         JE    CHKINUSEX           ...jif not in use, just return   @14
         CHI   R15,0               Slot in use ?                    @14
         JNE   CHKINUSE_040 ...jif not in use, go report unexpected @14
*                                                                   @14
*        SVC slot found to be in use - capture RIBE job name & ASID @14
*                                                                   @14
         LR    R6,R0                                                @14
         SRL   R6,16               Get size of fixed RIB part       @14
         LR    R7,R0                                                @14
         SLL   R7,16                                                @14
         SRL   R7,16               Get size of fized RIBE part      @14
         USING RIB,R3                                               @14
         LR    R4,R3               Point at current RIB             @14
         AR    R4,R6               Add fixed length portion         @14
         AH    R4,RIBVLEN          Add variable length portion      @14
         USING RIBE,R4             Now pointing at 1st RIBE         @14
         MVC   INUSE_JOBNAME,RIBEJBNM Capture requestor job name    @14
*                                                                   @14
*        Format ASID as 4-byte hex for caller                       @14
*                                                                   @14
         LA    R14,RIBEASID        R14 -> area to be converted      @14
         LA    R15,DBWD            R15 -> temporary display area    @14
         UNPK  0(5,R15),0(3,R14) UNPacK into temporary display area @14
         MVZ   0(4,R15),=XL17'00'  MoVe Zone in temporary work area @14
         TR    0(4,R15),=C'0123456789ABCDEF' TRanslate display area @14
         MVI   4(R15),C' '         Overlay clobbered byte           @14
         MVC   INUSE_ASID,DBWD     Set field for caller             @14
         OI    Profile_flags,Profile_INUSE Set for caller           @14
         J     CHKINUSEX           Go return to caller              @14
*                                                                   @14
*        Format unexpected return code from GQSCAN report it        @14
*                                                                   @14
*        -Report R15 & R0 in all cases                              @14
*                                                                   @14
CHKINUSE_040 DS 0H                                                  @14
         ST    R15,DBWD            Save GQSCAN R15                  @14
         ST    R0,DBWD+4           Save GQSCAN R0                   @14
         $RWTO MSG906A,WRITE=NO                                     @14
* Install R15 value                                                 @14
         LA    R14,DBWD            R14 -> area to be converted      @14
         LA    R15,MSG906AA        R15 -> display area              @14
         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14
         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14
         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14
         MVI   8(R15),C' '         overlay clobbered byte           @14
* Install R0 value                                                  @14
         LA    R14,DBWD+4          R14 -> area to be converted      @14
         LA    R15,MSG906AB        R15 -> display area              @14
         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14
         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14
         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14
         MVI   8(R15),C'.'         overlay clobbered byte           @14
* Issue the return/reason code message                              @14
         $RWTO WTOD,WRITE=YES                                       @14
* Report the profile involved                                       @14
         $RWTO MSG907A,WRITE=NO                                     @14
         MVC   MSG907AA,Current_profname                            @14
         $RWTO WTOD,WRITE=YES                                       @14
* Set return code for caller                                        @14
         LHI   R15,BADQSCAN        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
CHKINUSEX DS   0H                                                   @14
         LM    R14,R12,CHKINUSESAVE+12 Restore caller's registers   @14
         BR    R14                 Return to caller                 @14
*                                                                   @14
         TITLE 'MLWTO - Issue MLWTO for event tracking'             @14
*-----------------------------------------------------------------* @14
*                                                                 * @14
*        MLWTO - Issue multi-line WTO tracking message            * @14
*                                                                 * @14
* This routine is responsible for constructing the multiline WTO  * @14
* used for event tracking and placing it in the system hardcopy   * @14
* log.                                                            * @14
*                                                                 * @14
* Note: This routine expects all fields necessary to be placed in * @14
*       any of the individual WTO lines has been harvested and    * @14
*       placed in the expected field in display format.           * @14
*                                                                 * @14
*-----------------------------------------------------------------* @14
MLWTO    DS    0H                                                   @14
         STM   R14,R12,MLWTOSAVE+12    Save caller's registers      @14
*                                                                   @14
*        Calculate size of MLWTO message area to acquire            @14
*                                                                   @14
*        LARL  R14,MLWTOSUFFIX     Point after MLWTO lines area     @14
*        LARL  R15,MLWTOPREFIX     Point before MLWTO lines area    @14
*        SR    R14,R15             R15 = length to acquire          @14
*        LR    R0,R14              R0 = length to acquire           @14
         LHI   R0,MLWTOTLEN        Get length to acquire            @14
         ST    R0,MLWTOLENGTH    Save length just in case we got it @14
         STORAGE OBTAIN,           Get storage                      @14X
               LENGTH=(R0),                                         @14X
               LOC=ANY                                              @14
*                                                                   @14
*        Did we get the storage ?                                   @14
*                                                                   @14
         LTR   R15,R15             Successful ?                     @14
         JZ    MLWTO_010           ...jif so                        @14
*                                                                   @14
*        Issue WTO indicating MLWTO area could not be acquired      @14
*                                                                   @14
         $RWTO MSG026A,WRITE=YES   Issue message                    @14
         LHI   R15,BADMLWTO        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     MLWTOX                & go return to caller          @14
*                                                                   @14
*        Prime MLWTO area for population & display                  @14
*                                                                   @14
MLWTO_010 DS   0H                                                   @14
         OI    MYFLAGS,MLWTOAREA   Indicate MLWTO area acquired     @14
         ST    R1,MLWTOLINES@      Save address for construction    @14
         LR    R2,R1               Copy MLWTO work area address     @14
         L     R3,MLWTOLENGTH      R3 = length to copy              @14
         LARL  R4,MLWTOPREFIX      R4 -> source location            @14
         L     R5,MLWTOLENGTH      R5 = length to copy              @14
         MVCL  R2,R4               Copy MLWTO lines to work area    @14
*                                                                   @14
*        Establish MLWTO area addressability                        @14
*                                                                   @14
         L     R3,MLWTOLINES@      R3 -> MLWTO work area            @14
         USING (MLWTOPREFIX,MLWTOSUFFIX),R3  Inform assembler       @14
*                                                                   @14
*        Populate MLWTO line data fields for display                @14
*                                                                   @14
* DATALINE2 fields                                                  @14
         MVC   DATALINE2_userid,EUSER                               @14
         MVC   DATALINE2_LMOD,LMOD                                  @14
         LA    R14,MODSIZE         R14 -> area to be converted      @14
         LA    R15,DATALINE2_SIZE  R15 -> display area              @14
         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14
         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14
         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14
         MVI   8(R15),C' '         overlay clobbered byte           @14
* DATALINE3 fields                                                  @14
         LA    R14,@CSAEPN@        R14 -> area to be converted      @14
         LA    R15,DATALINE3_EP    R15 -> display area              @14
         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14
         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14
         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14
         MVI   8(R15),C' '         overlay clobbered byte           @14
         LA    R14,@CSAEPN         R14 -> area to be converted      @14
         LA    R15,DATALINE3_LP    R15 -> display area              @14
         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14
         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14
         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14
         MVI   8(R15),C' '         overlay clobbered byte           @14
* DATALINE4 fields                                                  @14
         MVC   DATALINE4_AMODE,=CL3'ANY' Assume AMODE=ANY           @14
         TM    BLARMODE,BLMAMOD     AMODE=ANY ?                     @14
         JO    MLWTO_020            ...jif so, assumption correct   @14
         MVC   DATALINE4_AMODE,=CL3'31 ' Assume AMODE=31            @14
         TM    BLARMODE,BLAM31      AMODE=31 ?                      @14
         JO    MLWTO_020            ...jif so, assumption correct   @14
         MVC   DATALINE4_AMODE,=CL3'24 ' else AMODE 24 (for us)     @14
MLWTO_020 DS   0H                                                   @14
         MVC   DATALINE4_RMODE,=CL3'ANY' Assume RMODE ANY           @14
         TM    BLARMODE,BLRMANY     AMODE=ANY ?                     @14
         JO    MLWTO_030            ...jif so, assumption correct   @14
         MVC   DATALINE4_RMODE,=CL3'24 ' else set RMODE 24          @14
* Format old entry's entry point from captured entry (1st 4 bytes)  @14
MLWTO_030 DS   0H                                                   @14
         LA    R14,OLDENTRY        R14 -> area to be converted      @14
         LA    R15,DATALINE4_OLDEP R15 -> display area              @14
         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14
         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14
         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14
         MVI   8(R15),C' '         overlay clobbered byte           @14
* DATALINE5 fields                                                  @14
         MVC   DATALINE5_SVCLIB,DSN    Install SVCLIB data set name @14
         MVC   DATALINE5_VOLSER,VOL    Install SVCLIB volser        @14
* DATALINE6 fields                                                  @14
         MVC   DATALINE6_ESQA@,=CL8'N/A' Assume filter not present  @14
         L     R14,SQA_ADDR        Pick up possible filter code @   @14
         LTR   R14,R14             Was the filter code installed ?  @14
         JZ    MLWTO_040           ...jif not                       @14
         LA    R14,SQA_ADDR        R14 -> area to be converted      @14
         LA    R15,DATALINE6_ESQA@ R15 -> display area              @14
         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14
         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14
         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14
         MVI   8(R15),C' '         overlay clobbered byte           @14
* DATALINE7 fields - 1st 50 bytes of any PARM provided string       @14 ****
MLWTO_040 DS   0H                                                   @14
         XR    R4,R4               Clear work register              @14
         LH    R4,Input_parmlen Get full executable length of PARM  @14
*                                  Assume DATALINE8 will contain    @14
*                                   something                       @14
         CHI   R4,51               >= 51 bytes in length            @14
         JH    MLWTO_050         ...jif so, go move max of 50 bytes @14
* Move just for the length found in Input_parmlen                   @14
         LA    R7,DATALINE7_PARM   R7 -> target field for copy      @14
         LA    R8,Copied_input_parms R8 -> source field for copy    @14
         EX    R4,CAPDLPRM       Copy entire PARM string to display @14
*                                                                   @14
LTORG_AREA LOCTR ,                                                  @14
CAPDLPRM MVC   0(*-*,R7),0(R8)   Copy field R8 to R7                @14
SVCUPDTE LOCTR ,                                                    @14
         J     MLWTO_060                                            @14
*                                                                   @14
* Move max of 50 characters for DATALINE7 and then complete         @14
* DATALINE8 with the rest of the PARM string                        @14
*                                                                   @14
MLWTO_050 DS   0H                                                   @14
         LA    R7,DATALINE7_PARM   R7 -> target field for copy      @14
         LA    R8,Copied_input_parms R8 -> source field for copy    @14
         LHI   R4,50             Make length executable             @14
         EX    R4,CAPDLPRM     Copy 1st 50 bytes of PARM to display @14
*                                                                   @14
* Calculate length of residual move                                 @14
*                                                                   @14
         LA    R7,DATALINE8_PARM   R7 -> target field for copy      @14
         LA    R8,Copied_input_parms R8 -> source field for copy    @14
         AHI   R8,51               Skip over 1st 51 bytes of source @14
         LH    R4,Input_parmlen  Get full executable length of PARM @14
         S     R4,=F'51'           Reduce by part already displayed @14
         EX    R4,CAPDLPRM     Copy 2nd 50 bytes of PARM to display @14
*                                                                   @14
* We should be done with the MLWTO text lines                       @14
*                                                                   @14
MLWTO_060 DS   0H                                                   @14
*                                                                   @14
*        Issue MLWTO                                                @14
*                                                                   @14
         LARL  R2,VMC002I          R2 -> Model MLWTO                @14
         MVC   WTOD(VMC002IL),0(R2)    Install model MLWTO list     @14
         XR    R0,R0               Clear R0 for 1st multi-line WTO  @14
         WTO   TEXT=((CNTLLINE,),(STARLINE,),                       @14X
               (DATALINE2,),(DATALINE3,),(DATALINE4,),(DATALINE5,), @14X
               (DATALINE6,),(DATALINE7,),(DATALINE8,),              @14X
               (STARLINE2,)),                                       @14X
               MF=(E,WTOD)                                          @14
*                                                                   @14
         DROP  R3                  Drop MLWTO work area             @14
*                                                                   @14
*        Free MLWTO work area is one was allocated                  @14
*                                                                   @14
         TM    MYFLAGS,MLWTOAREA   Do we have the work area ?       @14
         JNO   MLWTOX              ...jif not, skip free            @14
         L     R0,MLWTOLENGTH      R0 = length to free              @14
         L     R1,MLWTOLINES@      R1 -> area to free               @14
*                                                                   @14
         STORAGE RELEASE,          Free                             @14X
               ADDR=(R1),           the DSNTAB                      @14X
               LENGTH=(R0)           work area                      @14
         NI    MYFLAGS,X'FF'-MLWTOAREA  Reset flag                  @14
*                                                                   @14
MLWTOX   DS    0H                                                   @14
         LM    R14,R12,MLWTOSAVE+12    Restore caller's registers   @14
         BR    R14                     Return to caller             @14
*                                                                   @14
         TITLE 'PARS000 - Parse input parameters'                   @14
*-----------------------------------------------------------------* @14
*                                                                 * @14
*        Parse input parameters for syntax & length in phase 1 of * @14
*        parse and context in light of other supplied parameters  * @14
*        is checked in phase 1 of the parse. Items that cannot be * @14
*        checked without opening the SVCLIB library are deferred  * @14
*        to processing performed in the ENV000 subroutine.        * @14
*                                                                 * @14
* Note: The parse processing will process the following keyword   * @14
*       fields & perform the listed checks:                       * @14
*                                                                 * @14
*       SVC#     - The 1 to 3 digit zoned decimal SVC number.     * @14
*                  This is a required keyword.                    * @14
*       TYPE     - Single zoned decimal digit of 1, 2, 3, 4 or 6. * @14
*                  This is required unless the SVC# parameter     * @14
*                  supplied is an ESR SVC # (109, 116, 122 or     * @14
*                  137).                                          * @14
*       MOD      - Up to 8 character load module member name that * @14
*                  must exist in the library specified on the     * @14
*                  SYSLIB DDname.                                 * @14
*       ATTRIB   - This parameter, if specified, has the          * @14
*                  following format:                              * @14
*                                                                 * @14
*                  ATTRIB=(a1,a2,a3,a4) where ax is one or more   * @14
*                  of the following attributes:                   * @14
*                                                                 * @14
*                  APF - Indicates that the SVC is restricted to  * @14
*                        authorized program callers. The absence  * @14
*                        of this attribute implies the SVC is NOT * @14
*                        restricted to authorized callers.        * @14
*                                                                 * @14
*                  AR  - Indicates that the SVC supports callers  * @14
*                        that are in AR ASC mode. The absence of  * @14
*                        this attribute implies that the SVC does * @14
*                        NOT support callers in AR ASC mode.      * @14
*                                                                 * @14
*                  NP  - Indicates that the SVC cannot be         * @14
*                        pre-empted for I/O operations. The       * @14
*                        absence of this attribute implies that   * @14
*                        the SVC can be pre-empted for I/O        * @14
*                        operations.                              * @14
*                                                                 * @14
*                  ASF - Indicates that the SVC can be assisted.  * @14
*                        The absence of this attribute indicates  * @14
*                        that the SVC is not assisted. This       * @14
*                        facility is NOT support on z/10 and      * @14
*                        higher level processors.                 * @14
*                                                                 * @14
*       LOCKS    - This parameter, if specified, has the          * @14
*                  following format:                              * @14
*                                                                 * @14
*                  LOCKS=(lock1,lock2,...,lockn) where lockx is   * @14
*                  one or more of the following lock types:       * @14
*                                                                 * @14
*                  LOCAL  - local lock                            * @14
*                  DISP   - dispatcher lock (global spin)         * @14
*                  SRM    - SRM/OPT lock (global spin)            * @14
*                  CMS    - Cross Memory Service lock             * @14
*                  SALLOC - space allocation lock (global spin)   * @14
*                                                                 * @14
*                  Note that the context of the supplied LOCKS in * @14
*                  regard to the SVC type and other supplied      * @14
*                  parameters is not checked during phase 1 of    * @14
*                  the parse operation. They are checked in phase * @14
*                  2 of the parse operation.                      * @14
*                                                                 * @14
*       GOODNITE - 4 zoned decimal digits representing HHMM value * @14
*                  later in the current day for the successfully  * @14
*                  installed SVC to be de-installed. This is an   * @14
*                  optional parameter.                            * @14
*       USERID   - 1 to 8 character userid filter which           * @14
*                  indicates that only address spaces owned by    * @14
*                  this userid are to access the new SVC. All     * @14
*                  other caller's of the SVC will get the old SVC * @14
*                  code. This parameter is optional.              * @14
*                                                                 * @14
*       The following fields are set as a result of this process- * @14
*       ing:                                                      * @14
*                                                                 * @14
*       SVC#   3 zoned decimal digit value in range 0-255         * @14
*       SVCNO  single byte binary value in range 1-255            * @14
*       LMOD   8 character left justified load module name        * @14
*       LOCKS_FLAGS - locks supplied indicator byte, where:       * @14
*                                                                 * @14
*                    X'80' - LOCAL lock requested                 * @14
*                    X'40' - CMS lock requested                   * @14
*                    X'20' - SRM lock requested                   * @14
*                    X'10' - SALLOC lock requested                * @14
*                    X'08' - DISP lock requested                  * @14
*                                                                 * @14
*                    Note: The LOCKS_FLAGS byte uses the same     * @14
*                          lock mappings used by the SVCENTRY     * @14
*                          DSECT (IHASVC) for direct replacement  * @14
*                          purposes.                              * @14
         AGO   .JRH99A

         DC    S(L'SVCNO,SVCNO)    1st operand
         DC    S(L'EPNAME,EPNAME)  2nd operand
         DC    S(L'LOCKS,LOCKS)    3rd operand                      @08
         DC    S(L'ENDOFDAY,ENDOFDAY) 4th operand
         DC    S(L'USERID,USERID)  5th operand                      @05


&NAPF    SETA    8                    VALUE OF THE APF BIT IN SVC ENTRY
&NAR     SETA    4                    VALUE OF AR BIT IN SVC ENTRY @L3A
&NNP     SETA    2                    VALUE OF THE NON-PREMPT

ATTR_FLAGS DS XL1                  Attributes requested flags       @14
ATTR_NPRMT EQU X'80'               -Non-preemptable requested       @14
ATTR_APF   EQU X'40'               -APF requested (APF=YES)         @14
ATTR_AR    EQU X'20'               -AR requested (AR=YES)           @14
ATTR_ESR   EQU X'10'               -ESR SVC request                 @14

PARSE subroutine needs to set the following:

SVC_TYPE DS    CL1                 SVC type for this request

ESRSVCNO DS    CL3                 ESR SVC number (109/116/122/137) @14
ATTR_FLAGS DS XL1                  Attributes requested flags       @14
LOCKS_FLAGS DS XL1                 Locks requested flags            @14
PROC_FLAGS DS XL1                  Processing requested flags       @14

*-----------------------------------------------------------------* @14
*                                                                 * @14
*        SVC type authorization requirements                      * @14
*                                                                 * @14
*-----------------------------------------------------------------* @14
SVC_BRXLE DC   A(SVC_START,SVC_entry_len,SVC_END-SVC_entry_len)     @14
*                                                                   @14
SVC_START DS   0H                                                   @14
         DC    C'1',AL1(SYSTEMS)   "SYSTEM" authorization required  @14
SVC_entry_len EQU *-SVC_START      Generate length of table entry   @14
         DC    C'2',AL1(AUTHUSER)                                   @14
         DC    C'3',AL1(AUTHUSER)                                   @14
         DC    C'4',AL1(AUTHUSER)                                   @14
         DC    C'6',AL1(AUTHUSER)                                   @14
SVC_END  EQU   *                                                    @14


.JRH99A  ANOP
*                                                                   @14
         TITLE 'SVCUPDTE - PARS000 - parse input parameters'        @14
*=================================================================* @14
*                                                                 * @14
*        P H A S E  1  parsing                                    * @14
*                                                                 * @14
* This routine is responsible for parsing the input parameter     * @14
* string. It will detect invalid parameters & syntax and return   * @14
* to the caller after issuing an appropriate WTO and setting a    * @14
* corresponding return code for that caller.                      * @14
*                                                                 * @14
* This routine is responsible for setting the following flags for * @14
* the caller:                                                     * @14
*                                                                 * @14
* Parse_flags.Parse_LIST    for LIST request                      * @14
* Parse_flags.Parse_INSTALL for INSTALL request                   * @14
*                                                                 * @14
* This routine is responsible for setting the following fields    * @14
* for their usage by the caller when an INSTALL request has been  * @14
* detected:                                                       * @14
*                                                                 * @14
* ______________                                                  * @14
*                                                                 * @14
*                                                                 * @14
* %Need SVC#, ESR#, set RNAME (for ENQueue processing)            * @14
* %Need LMOD                                                      * @14
* %Need LOCKS byte in same form as SVC table entry                * @14
* %Need ATTRibutes byte in same form as SVC table entry           * @14
* %Need _________________________________________________         * @14
*                                                                 * @14
* This program supports standard SVC & ESR SVC temporary          * @14
* installations as described below. The program is designed to    * @14
* remain in execution for the life of the IPL unless the install- * @14
* ing batch job is STOPped with a system command or cancelled by  * @14
* an authorized user or the GOODNITE time has been reached. Upon  * @14
* termination for any of these reasons the previous content of    * @14
* involved SVC or ESR SVC slot will be restored to its original   * @14
* content thereby placing old SVC code back into use. This is a   * @14
* testing/development vehicle and any permanent installation of   * @14
* an SVC will require the assistance of the systems programming   * @14
* staff to code the appropriate IEASVCxx entry, locate the module * @14
* in the appropriate IEAFIXxx, IEALPAxx or LPALSTxx members and   * @14
* placement of the module on an appropriate library available     * @14
* during NIP and post-NIP processing.                             * @14
*                                                                 * @14
* Standard SVC install                                            * @14
* ====================                                            * @14
* The semantics for the specification of a standard SVC (non-ESR) * @14
* are as follows:                                                 * @14
*                                                                 * @14
* SVC=nnn,LMOD=xxxxxxxx,TYPE=n,ATTR=(attr1,attr2,...,attr3),      * @14
*  LOCKS=(lock1,lock2,...,lockn),USER=uuuuuuuu,GOODNITE=hhmm      * @14
*                                                                 * @14
* ESR SVC install                                                 * @14
* ===============                                                 * @14
* The semantics for the specification of an ESR SVC are as        * @14
* follows:                                                        * @14
*                                                                 * @14
* SVC=(aaa,bbb),LMOD=xxxxxxxx,ATTR=(attr1,attr2,...,attr3),       * @14
*  LOCKS=(lock1,lock2,...,lockn),USER=uuuuuuuu,GOODNITE=hhmm      * @14
*                                                                 * @14
* Rules                                                           * @14
* =====                                                           * @14
* 01) For a standard SVC install the SVC nnn parameter must be a  * @14
*     1 to 3 digit zoned decimal number for which a CL(#SNOMISC)  * @14
*     profile exists in the RACF database in the form:            * @14
*                                                                 * @14
*     SVCUPDTE_nnn                                                * @14
*                                                                 * @14
*     and the RACF userid associated with the install must        * @14
*     possess AC(READ) priviledges for this resource.             * @14
*                                                                 * @14
* 02) For an ESR SVC install the SVC aaa parameter must be a 3    * @14
*     digit zoned decimal number equal to one of the following    * @14
*     values:             e RACF database in the form:            * @14
*                                                                 * @14
*     109 for a TYPE 3 or 4 ESR SVC                               * @14
*     116 for a TYPE 1 ESR SVC                                    * @14
*     122 for a TYPE 2 ESR SVC                                    * @14
*     137 for a TYPE 6 ESR SVC                                    * @14
*                                                                 * @14
*     When the ESR SVC form is used the bbb parameter must also   * @14
*     be a 1 to 3 digit zoned decimal number in a range specific  * @14
*     to the type of SVC as per the following table:              * @14
*                                                                 * @14
*     aaa Type Acceptable range for bbb value                     * @14
*     === ==== ==============================                     * @14
*     109  3/4 000-255                                            * @14
*     116   1  000-014                                            * @14
*     122   2  000-019                                            * @14
*     137   6  000-007                                            * @14
*                                                                 * @14
*     For this type install a CL(#SNOMISC) profile must exist on  * @14
*     the RACF database in the form:                              * @14
*                                                                 * @14
*     SVCUPDTE_aaabbb                                             * @14
*                                                                 * @14
*     where both aaa & bbb will be 3 digit zoned decimal numbers  * @14
*     and the RACF userid associated with the install must        * @14
*     possess AC(READ) priviledges for this resource.             * @14
*                                                                 * @14
* 03) The TYPE parameter and the ESR form of the SVC parameter    * @14
*     are mutually exclusive. TYPE when supplied must be a single * @14
*     zoned decimal number with the value of 1, 2, 3, 4 or 6.     * @14
*                                                                 * @14
* 04) While traditionally a type 3 SVC has identified a function  * @14
*     that is contained in a single load module and a type 4 SVC  * @14
*     has identified a function that loads additional modules     * @14
*     this program supports only the user supplying a single load * @14
*     module via the LMOD parameter. If you have a need to        * @14
*     install a traditional type 4 SVC contained over multiple    * @14
*     load modules you will need to open a request to have the    * @14
*     systems programming staff perform the installation for you. * @14
*                                                                 * @14
* 05) The lock1,lock2,...,lockn subparameters available are as    * @14
*     follow and require the listed level of authority to specify * @14
*     them:                                                       * @14
*                                                                 * @14
*      LOCK   Explanation & level of authority required           * @14
*     ====== ==================================================== * @14
*     LOCAL  LOCAL lock                                           * @14
*            Authority: AC(READ) to profile                       * @14
*     CMS    Cross Memory Services lock                           * @14
*            Authority: AC(READ) to profile                       * @14
*     SRM    System Resources Manager lock                        * @14
*            Authority: RACF global special & AC(READ)            * @14
*     SALLOC Space ALLOCation lock                                * @14
*            Authority: RACF global special & AC(READ)            * @14
*     DISP   Dispatcher lock                                      * @14
*            Authority: RACF global special & AC(READ)            * @14
*                                                                 * @14
*     Notes                                                       * @14
*     =====                                                       * @14
*     * A type 1 ESR or non-ESR SVC will default to having the    * @14
*       LOCAL lock and must not release the LOCAL lock. You do    * @14
*       not need to specify the LOCAL lock for a type 1 SVC as    * @14
*       LOCAL lock is automatically obtained for a type 1 SVC.    * @14
*     * A type 3/4 ESR or non-ESR SVC may not hold any global     * @14
*       spin locks                                                * @14
*     * A type 3/4 ESR or non-ESR SVC may only request that the   * @14
*       LOCAL or LOCAL & CMS locks be held on entry               * @14
*     * If you specify the CMS lock for SVC types 2, 3 or 4 you   * @14
*       must also specify the LOCAL lock.                         * @14
*     * A type 6 ESR or non-ESR SVC may not hold any locks        * @14
*     * Others? Future?                                           * @14
*                                                                 * @14
* 06) The attr1,attr2,...,attrn subparameters available are as    * @14
*     follow:                                                     * @14
*                                                                 * @14
*      ATTR   Explanation                                         * @14
*     ====== ==================================================== * @14
*     APF    SVC must be invoked by an APF authorized caller      * @14
*            Default: NO                                          * @14
*     AR     SVC can be invoked in Access Register mode           * @14
*            Default: NO                                          * @14
*     NPRMPT Non-preemptive SVC                                   * @14
*            Default: NO                                          * @14
*     ASF    SVC requires the SVC ASsist Facility                 * @14
*            Default: NO                                          * @14
*                                                                 * @14
*     In the case of the above subparameters the presence of the  * @14
*     above ATTR string implies the attribute is desired while    * @14
*     the absence of the ATTR string implies the attribute is not * @14
*     desired.                                                    * @14
*                                                                 * @14
*     The ASF option is not available on z/10 and more modern     * @14
*     processors. More on this later.                             * @14
*                                                                 * @14
*     Users installing ESR or non-ESR SVCs only need AC(READ)     * @14
*     authority for the covering SVCUPDTE_nnn or SVCUPDTE_aaabbb  * @14
*     profile to specifiy the above attributes.                   * @14
*                                                                 * @14
* 07) The LMOD parameter provides the true name of a load module  * @14
*     that exists on the SVCLIB library with the required         * @14
*     attributes of RENT, REUS, REFR, OVLY(NO), SPLIT(NO),        * @14
*     SCTR(NO) and EXEC. The load module can be any AMODE or      * @14
*     RMODE. AMODE31 SVC modules will be placed in extended CSA   * @14
*     or SQA or non-extended CSA or SQA based on the RMODE of the * @14
*     load module and the requirements of the SVC type. Any       * @14
*     RMODE64 module will be placed in 31-bit addressable         * @14
*     storage. For AMODE64 modules the AMODE31 bit will be set in * @14
*     the SVC table entry and it will be the responsibility of    * @14
*     SVC to recognize that the caller is in AMODE64 addressing   * @14
*     mode.                                                       * @14
*                                                                 * @14
* 08) The USER parameter provides a mechanism to restrict access  * @14
*     to the newly installed SVC to a single specific RACF userid * @14
*     as a filter. This is useful if for instance the SVC number  * @14
*     is buried in multiple locations and a developer needs to    * @14
*     test new SVC code without impacting other users of the same * @14
*     SVC number. If the USER parameter filter is supplied and    * @14
*     userid associated with the SVC call matches this parameter  * @14
*     the new SVC code will be invoked. Any other user of the SVC * @14
*     will be passed through to the old SVC code.                 * @14
*                                                                 * @14
* 09) The GOODNITE parameter specifies a future time on the same  * @14
*     day of execution when the new SVC code should be automati-  * @14
*     cally deinstalled and the SVCUPDTE program exiting.         * @14
*                                                                 * @14
*=================================================================* @14
PARS000  DS    0H                                                   @14
         STM   R14,R12,PARSSAVE+12     Save caller's GPRs           @14
         L     R2,@INPARMS         R2 -> parmlen + parmlist         @14
         CLC   =X'0000',0(R2)      Is there a parameter list ?      @14
* Could default to list here <FDIR>                                 @14
         JNE   PARS010             ...jif so, else handle here      @14
*                                                                   @14
*        No input parameters to parse - terminating error           @14
*                                                                   @14
         $RWTO MSG001A,WRITE=YES   Write details message            @14
         LHI   R15,BADPARM1        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
*                                                                   @14
*        Check for excessive paramater string length                @14
*                                                                   @14
PARS010  DS    0H                                                   @14
         LH    R3,0(R2)            Get length of parameters         @14
         CHI   R3,100              Greater than target work fields  @14
         JNH   PARS020             ...jif not                       @14
*                                                                   @14
*        Excessive parameter length                                 @14
*                                                                   @14
         $RWTO MSG002A,WRITE=YES   Write details message            @14
         LHI   R15,BADPARM2        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
*                                                                   @14
*        Make copies of input parameters for our use & debugging    @14
*                                                                   @14
PARS020  DS    0H                                                   @14
         BCTR  R3,0                Make it an executable length     @14
         STH   R3,Input_parmlen    Save it as an executable length  @14
         LA    R4,2(R2)            R4 -> parameter list string      @14
*                                                                   @14
* Copy the string to our work area for debugging and another copy   @14
* we can work with.                                                 @14
*                                                                   @14
         LARL  R1,CPYIPRMS         R1 -> EX instruction             @14
         LA    R14,Copied_input_parms R14 -> traget copy area       @14
         EX    R3,0(R1)            Make original copy of parameters @14
*                                                                   @14
LTORG_AREA LOCTR ,                                                  @14
CPYIPRMS MVC   0(*-*,R14),0(R4)    "Original" copy area             @14
SVCUPDTE LOCTR ,                                                    @14
*                                                                   @14
         LARL  R1,CPYIPRMS         R1 -> EX instruction             @14
         LA    R14,Work_input_parms R14 -> target copy area         @14
         EX    R3,0(R1)            Make original copy of parameters @14
*                                                                   @14
*        Work with work copy of the input parameter string &        @14
*        upper case the string                                      @14
*                                                                   @14
*       Note: Registers used & in effect are:                       @14
*                                                                   @14
*        R3  = executable length of input parameter string          @14
*        R7 -> Work copy of the parameter string                    @14
*                                                                   @14
         LA    R7,Work_input_parms R7 -> work copy of parameters    @14
*                                                                   @14
*        See if the input string contains invalid characters,...    @14
*        i.e. characters other than alphanumeric, national ($,#,@), @14
*        or characters other than alphanumeric, national ($,#,@),   @14
*        or special (, and $). These are the only ones currently    @14
*        supported. The left and right parentheses are supported    @14
*        in this implementation.                                    @14
*                                                                   @14
         SLR   R2,R2               Clear TRT work register          @14
         LARL  R4,TRTPARM1         Get translate table address      @14
         EX    R3,TRTIPRMS         <execute above instruction>      @14
*                                                                   @14
LTORG_AREA LOCTR ,                                                  @14
TRTIPRMS TRT   0(*-*,R7),0(R4)     Test working copy of string      @14
SVCUPDTE LOCTR ,                                                    @14
*                                                                   @14
         LTR   R2,R2               Non-zero function byte found ?   @14
         JZ    PARS030             ...jif not, else issue message   @14
*                                                                   @14
*        Unsupported characters found in input parameters           @14
*                                                                   @14
         $RWTO MSG003A,WRITE=YES   Write details message            @14
         LHI   R15,BADPARM3        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
*                                                                   @14
*        All characters provided in the input string were           @14
*        acceptable. We now need to translate to upper case while   @14
*        preserving; 1) national characters, 2) assignment          @14
*        character (=), 3) field separator character (comma) and    @14
*        4) subparameter list start & finish characters (left &     @14
*        right parentheses).                                        @14
*                                                                   @14
PARS030  DS    0H                                                   @14
         LARL  R4,HEXUPPER         Get conversion table address     @14
         EX    R3,UPIPRMS           to upper case                   @14
*                                                                   @14
LTORG_AREA LOCTR ,                                                  @14
UPIPRMS  TR    0(*-*,R7),0(R4)     Translate working copy of string @14
SVCUPDTE LOCTR ,                                                    @14
*                                                                   @14
*        We now have an upper case parameter string we can finally  @14
*        parse the parameter list string                            @14
*                                                                   @14
*        Valid parameter string options are:                        @14
*                                                                   @14
*        SVC=nnn or SVC=(aaa,bbb) - required for install            @14
*        LMOD=xxxxxxxx            - required for install            @14
*        ATTR=(a1,a2,...an)       - optional                        @14
*        LOCKS=(l1,l2,...ln)      - optional                        @14
*        GOODNITE=hhmm            - optional                        @14
*        USER=uuuuuuuu            - optional                        @14
*        TYPE=n                   - required if ESR form not used   @14
*                                                                   @14
* R7 -> upper cased working copy of the input parameter string      @14
* R3  = executable length of the parameter string                   @14
*                                                                   @14
* If length was 4 then check for LIST request (early check)         @14
*                                                                   @14
         CHI   R3,3                Length = 4 bytes ?               @14
         JNE   PARS040             ...if not, continue parse        @14
         CLC   =CL4'LIST',0(R7)    Was it the LIST option ?         @14
         JNE   PARS040             ...jif not, continue parse       @14
         OI    Parse_flags,Parse_LIST Set LIST as requested         @14
         J     PARSX               Just MLT for now                 @14

*        AGO   .JH0831A
*                                                                   @14
*        At this point:                                             @14
*                                                                   @14
*        R3  = executable length of input parameter string          @14
*        R7 -> Work copy of the parameter string                    @14
*                                                                   @14
*        We now need to call IKJTSOEV to establish a TSO/E          @14
*        environment in this program's address space. IKJTSOEV uses @14
*        the following parameters:                                  @14
*                                                                   @14
*        PARM1 is reserved                                          @14
*        PARM2 is a fullword that will contain the return code on   @14
*              return from IKJTSOEV                                 @14
*        PARM3 is a fullword that will contain the reason code on   @14
*              return from IKJTSOEV                                 @14
*        PARM4 is a fullword that will contain the abend code if an @14
*              abend occurs during IKJTSOEV environment service     @14
*              processing                                           @14
*        PARM5 is a fullword that will contain the address of the   @14
*              CPPL                                                 @14
*                                                                   @14
PARS040  DS    0H                                                   @14
         XC    PARM1,PARM1
         LA    R14,PARM1
         ST    R14,PLIST+0
         LA    R14,PARM2
         ST    R14,PLIST+4
         LA    R14,PARM3
         ST    R14,PLIST+8
         LA    R14,PARM4
         ST    R14,PLIST+12
         LA    R14,PARM5
         ST    R14,PLIST+16




         AGO   .JH0831C
         LA    R14,PLIST+0         <reserved>                       @14
         LA    R15,PLIST+4         @ return code                    @14
         LA    R0,PLIST+8          @ reason code                    @14
         LA    R1,PLIST+12         abend code                       @14
         LA    R2,PLIST+16         @ of CPPL                        @14
         STM   R14,R2,PLIST                                         @14
.JH0831C ANOP
         OI    PLIST+16,X'80'      Flag end of PARAMs               @14
         LARL  R2,PARS041          Put error routine @ in GPR2      @14
         LA    R1,PLIST                                             @14
         LINK  EP=IKJTSOEV,                                         @14X
               ERRET=((2)),                                         @14X
               SF=(E,PLIST+20)                                      @14
         L     R2,PARM2            Get return code parameter        @14
         LTR   R2,R2               Any problems ?
         JZ    PARS043             ...jif not
         J     PARS042             otherwise report
*                                                                   @14
*        Error occurred during IKJTSOEF processing - report it      @14
*        ERRET driven
*                                                                   @14
PARS041  DS    0H                                                   @14
         $RWTO MSG102E,WRITE=YES                                    @14
         LHI   R15,BADERRET        Set return code                  @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
*                                                                   @14
*        Error occurred during IKJTSOEF processing - report it      @14
*        -Return code non-zero                                      @14
*                                                                   @14
PARS042  DS    0H                                                   @14
         $RWTO MSG109E,WRITE=NO                                     @14
* Install PLIST+4 value                                             @14
         LA    R14,PLIST+4         R14 -> area to be converted      @14
         LA    R15,MSG109EA        R15 -> display area              @14
         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14
         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14
         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14
         MVI   8(R15),C' '         overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES                                       @14
         LHI   R15,BADTSOEV        Set return code                  @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
*                                                                   @14
*        Set up for IKJPARS usage - muck up command buffer          @14
*                                                                   @14
*        Note:                                                      @14
*        =====                                                      @14
*        1) PLIST+16 contains @ CPPL                                @14
*        2) R7 -> upper cased working copy of the input parameter   @14
*                 string                                            @14
*        3) R3  = executable length of the parameter string         @14
*                                                                   @14
* R7 -> upper cased working copy of the input parameter string      @14
* R3  = executable length of the parameter string                   @14
*                                                                   @14
PARS043  DS    0H
*        L     R2,PLIST+16         R2 -> CPPL
         L     R2,PARM5            R2 -> CPPL
         LR    R9,R2               <temp - debug>
         XC    PLIST(32),PLIST
         USING CPPL,R2
         MVC   UPT,CPPLUPT         A(UPT) to IKJPARS plist
         MVC   ECT,CPPLECT         A(ECT) to IKJPARS plist
         DROP   R2
         LA    R1,DWSECB
         ST    R1,ECB              A(ECB) to IKJPARS plist
         L     R1,=A(SVCCPL)
         ST    R1,PCL              A(PCL) to IKJPARS plist
         LA    R1,DWSANS
         ST    R1,ANS              A(ANS) to IKJPARS plist
*
*        Muck up a CBUF area for IKJPARS invocation
*
*        1) Need to update CPPLCBUF with alternative command buffer
*
         LR    R2,R3               Copy executable string length
         AHI   R2,5                Add 5 bytes
         STH   R2,BUFLEN           Save length in CBUF
         LA    R1,BUFLEN
         ST    R1,CBUF
         LA    R1,PLIST
         BASR  R10,0               Macro internal addressability
         USING *,R10               """""""""""""""""""""""""""""
         CALLTSSR EP=IKJPARS,MF=(E,(1))
         DROP  R10             Drop internal macro addressability
*
*        Was IKJPARS successful ?
*
         LTR   R15,R15             Good parse ?
         JZ    PARS1000            ...jif so
*
*        IKJPARS failed - report return code
*
         ST    R15,DWD             Save IKJPARS return code
         $RWTO MSG032A,WRITE=NO
         LA    R14,DWD             R14 -> source area to convert
         LA    R15,MSG032AA        R15 -> target display area
         UNPK  0(9,R15),0(5,R14)   Unpack
         MVZ   0(8,R15),=XL17'00'  Move zoned
         TR    0(8,R15),=C'0123456789ABCDEF' Translate
         MVI   8(R15),C' '         Overlay clobbered byte
         $RWTO WTOD,WRITE=NO
         LHI   R15,BADPARSE        Set return code                  @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
*=================================================================* @14
*                                                                 * @14
*        P H A S E  2  parsing (set internal flags)               * @14
*                                                                 * @14
* Logic here sets internal flags based upon elements set in the   * @14
* PDL structure returned by IKJPARS. The logical combinations of  * @14
* the provided elements will be checked in phase 3 of parse       * @14
* processing.                                                     * @14
*                                                                 * @14
*=================================================================* @14
PARS1000 DS    0H
*        WTO   'Phase 2 of parse entered'                           @14
*
         CLC   DWSANS,=XL4'FF000000'   Error in parse ?
         JNE   PARS1010            ...jif not
*
*        Parse error has occurred
*
         $RWTO MSG033A,WRITE=YES
         $RWTO MSG035A,WRITE=YES
         LHI   R15,BADPARSE        Set return code                  @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
*
*        See if LMOD was presented - it is required
*
PARS1010 DS    0H
         L     R9,DWSANS           R9 -> PDL
         USING DSVCCPL,R9          Obtain PDL addressability
         CLC   MMODKW(2),=H'1'     Was LMOD supplied ?
         JE    PARS1020            ...jif so
*
*        Required LMOD parameter missing
*
         $RWTO MSG034A,WRITE=YES
         LHI   R15,BADPARSE        Set return code                  @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
*
*        Validate length of LMOD parameter
*
PARS1020 DS    0H
*        WTO   'LMOD keyword detected'
*
         L     R14,MMOD            Load @ of LMOD subfield
         XR    R15,R15             Clear work register
         ICM   R15,B'0011',MMOD+4  Place subfield length in R15
         BCTR  R15,0               Decrement for execute
         LA    R10,LMOD            R10 -> target capture field
         EX    R15,CAPKW           Capture field value
LTORG_AREA LOCTR ,                                                  @14
CAPKW    MVC   0(*-*,R10),0(R14)   Capture keyword field            @14
SVCUPDTE LOCTR ,                                                    @14
*
*        Set LMOD available flag
*
         OI    PKW_used,PKW_LMOD   Indicate LMOD keyword used
*
*        See if USER was presented - it is optional
*
         CLC   MUSRKW(2),=H'1'     Was USER supplied ?
         JNE   PARS1030            ...jif not, it is optional
*
*        USER keyword was supplied
*
*        WTO   'USER keyword detected'
*
         L     R14,MUSR            Load @ of USER subfield
         XR    R15,R15             Clear work register
         ICM   R15,B'0011',MUSR+4  Place subfield length in R15
         BCTR  R15,0               Decrement for execute
         LA    R10,USERID          R10 -> target capture field
         EX    R15,CAPKW           Capture field value
*
*        Set USER available flag
*
         OI    PKW_used,PKW_USER   Indicate USER keyword used
*
*        See if TYPE was presented - it can be optional
*
PARS1030 DS    0H
         CLC   MTYPKW(2),=H'1'     Was TYPE supplied ?
         JNE   PARS1040            ...jif not, it can be optional
*
*        TYPE keyword was supplied
*
*        WTO   'TYPE keyword detected'
*
         L     R14,MTYP            Load @ of TYPE subfield
         XR    R15,R15             Clear work register
         ICM   R15,B'0011',MTYP+4  Place subfield length in R15
         BCTR  R15,0               Decrement for execute
         LA    R10,TYPE            R10 -> target capture field
         EX    R15,CAPKW           Capture field value
*
*        Set TYPE available flag
*
         OI    PKW_used,PKW_TYPE   Indicate TYPE keyword used
*
*        See if GOODNITE was presented - it is optional
*
PARS1040 DS    0H
         CLC   MGDNKW(2),=H'1'     Was GOODNITE supplied ?
         JNE   PARS1050            ...jif not, it is optional
*
*        GOODNITE keyword was supplied
*
* Note: Capture this in SHUTDOWN field right justified
*
*        WTO   'GOODNITE keyword detected'
*
*        Right justify the GOODNITE parameter in the SHUTDOWN field @14
*
         MVI   SHUTDOWN,X'F0'      Ripple SVC # to
         MVC   SHUTDOWN+1(L'SHUTDOWN-1),SHUTDOWN zeroes
         L     R14,MGDN            Load @ of GOODNITE subfield
         XR    R15,R15             Clear work register
         ICM   R15,B'0011',MGDN+4  Place subfield length in R15
         LHI   R7,4                Set maximum length in R7
         SR    R7,R15              Get offset in R7
         BCTR  R15,0               Decrement for execute
         LA    R10,SHUTDOWN        R10 -> target capture field
         AR    R10,R7              Calculate offset
         EX    R15,CAPKW           Capture field value
*
*        Set GOODNITE available flag
*
         OI    PKW_used,PKW_GOODNITE Indicate GOODNITE was used
*
*        See if LOCKS was presented - it is optional
*
PARS1050 DS    0H
         CLC   MLCKKW(2),=H'1'     Was LOCKS supplied ?
         JNE   PARS1100            ...jif not, it is optional
*
*        LOCKS keyword was supplied
*
*        WTO   'LOCKS keyword detected'
         OI    PKW_used,PKW_LOCKS  Set flag that LOCKS was present
*
*        See if LOCAL lock requested
*
         CLC   MLOCAL(2),=H'1'     Was LOCAL lock requested ?
         JNE   PARS1060            ...jif not
*
*        LOCAL lock was requested
*
*        WTO   'LOCKS=(LOCAL) detected'
         OI    LOCKS_FLAGS,LOCKS_LOCAL Set flag
*
*        See if CMS lock requested
*
PARS1060 DS    0H
         CLC   MCMS(2),=H'1'       Was CMS lock requested ?
         JNE   PARS1070            ...jif not
*
*        CMS lock was requested
*
*        WTO   'LOCKS=(CMS) detected'
         OI    LOCKS_FLAGS,LOCKS_CMS   Set flag
*
*        See if SRM lock requested
*
PARS1070 DS    0H
         CLC   MSRM(2),=H'1'       Was SRM lock requested ?
         JNE   PARS1080            ...jif not
*
*        SRM lock was requested
*
*        WTO   'LOCKS=(SRM) detected'
         OI    LOCKS_FLAGS,LOCKS_SRM   Set flag
*
*        See if SALLOC lock requested
*
PARS1080 DS    0H
         CLC   MSALLOC(2),=H'1'    Was SALLOC lock requested ?
         JNE   PARS1090            ...jif not
*
*        SALLOC lock was requested
*
*        WTO   'LOCKS=(SALLOC) detected'
         OI    LOCKS_FLAGS,LOCKS_SALLOC Set flag
*
*        See if DISP lock requested
*
PARS1090 DS    0H
         CLC   MDISP(2),=H'1'      Was DISP lock requested ?
         JNE   PARS1100            ...jif not
*
*        DISP lock was requested
*
*        WTO   'LOCKS=(DISP) detected'
         OI    LOCKS_FLAGS,LOCKS_DISP   Set flag
*
*        See if ATTR keyword was presented - it is optional
*
PARS1100 DS    0H
         CLC   MATRKW(2),=H'1'     Was ATTR keyword supplied ?
         JNE   PARS1200            ...jif not, it is optional
*
*        ATTR keyword was supplied
*
*        WTO   'ATTR keyword detected'
         OI    PKW_used,PKW_ATTR   Set flag that ATTR was present
*
*        See if NPRMT requested
*
         CLC   MNPRMT(2),=H'1'     Was NPRMT requested ?
         JNE   PARS1110            ...jif not
*
*        NPRMT was requested
*
*        WTO   'ATTR=(NPRMT) detected'
         OI    ATTR_FLAGS,ATTR_NPRMT  Set flag
*
*        See if APF requested
*
PARS1110 DS    0H
         CLC   MAPF(2),=H'1'       Was APF requested ?
         JNE   PARS1120            ...jif not
*
*        APF was requested
*
*        WTO   'ATTR=(APF) detected'
         OI    ATTR_FLAGS,ATTR_APF    Set flag
*
*        See if ASF requested
*
PARS1120 DS    0H
         CLC   MASF(2),=H'1'       Was ASF requested ?
         JNE   PARS1130            ...jif not
*
*        ASF was requested
*
*        WTO   'ATTR=(ASF) detected'
         OI    ATTR_FLAGS,ATTR_ASF    Set flag
*
*        See if AR requested
*
PARS1130 DS    0H
         CLC   MAR(2),=H'1'        Was AR requested ?
         JNE   PARS1200            ...jif not
*
*        AR was requested
*
*        WTO   'ATTR=(AR) detected'
         OI    ATTR_FLAGS,ATTR_AR    Set flag
*
*        See if SVC keyword supplied - it is required
*
PARS1200 DS    0H
         CLC   MSVCKW(2),=H'1'     Was SVC keyword supplied ?
         JNE   PARS1210            ...jif not, it is optional
*
*        SVC keyword was supplied
*
*        WTO   'SVC keyword detected'
         OI    PKW_used,PKW_SVC    Set flag that SVC was present
         J     PARS1220             and skip error return
*
*        Required SVC # was missing
*
PARS1210 DS    0H
         $RWTO MSG037A,WRITE=YES
         LHI   R15,NOSVC#          Set return code                  @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
*
*        Capture SVC number
*
* This code uses the following algorithm to right justify the
* SVC number in the target field:
*
* Maximum length of field minus length seen in PDL equals offset
* in target field to receive SVC number from the PDL. Examples
* follow:
*
* 1) PDL returns length of 2 in PDL whose maximum length is 3;
*
*    3 - 2 = 1
*
*    Thus EXecuted MVC instruction must have 1 added to the
*    location of the target field to right justify the value for
*    a PACK and convert to binary operation.
*
* 2) PDL returns length of 1 in PDL whose maximum length is 3;
*
*    3 - 1 = 2
*
*    Thus EXecuted MVC instruction must have 2 added to the
*    location of the target field to right justify the value for
*    a PACK and convert to binary operation.
*
* 3) PDL returns length of 3 in PDL whose maximum length is 3;
*
*    3 - 3 = 0
*
*    Thus EXecuted MVC instruction must have 0 added to the
*    location of the target field to right justify the value for
*    a PACK and convert to binary operation.
*
PARS1220 DS    0H
         MVI   SVCNO,X'F0'         Ripple SVC # to
         MVC   SVCNO+1(L'SVCNO-1),SVCNO zeroes
         L     R14,MSVC            Load @ of SVC# subfield
         XR    R15,R15             Clear work register
         ICM   R15,B'0011',MSVC+4  Place subfield length in R15
         LHI   R7,3                Set maximum length in R7
         SR    R7,R15              Get offset in R7
         BCTR  R15,0               Decrement for execute
         LA    R10,SVCNO           R10 -> target capture field
         AR    R10,R7              Calculate offset
         EX    R15,CAPKW           Capture field value
*
*        Pack & convert to binary the SVC number
*
* Note: SVCNO will always exist or we wouldn't be here so it is
*       not flagged
*
*        WTO   'SVC number found'
         PACK  DWD,SVCNO           Pack SVC number
         CVB   R1,DWD               Make it binary
         STC   R1,SVC#               and save for later use
*
* Make sure SVC# is not > 255
*
         C     R1,=F'255'          SVC # > 255 ?
         JNH   PARS1222            ...jif not, else invalid
*
* SVC # not in range 0-255 detected
*
         $RWTO MSG041A,WRITE=YES                                    @14
         LHI   R15,BADSVCN2        Invalid SVC # found
         ST    R15,RETCODE         Set to expose retcode to caller
         J     PARSX                and return to caller
*
*        See if optional routing code SVC number is present
*
PARS1222 DS    0H
         MVI   ESRSVCNO,X'40'      Ripple ESR SVC # to
         MVC   ESRSVCNO+1(L'ESRSVCNO-1),ESRSVCNO blanks
         L     R14,MSVCR           Load @ of ESR SVC routing code
         LTR   R14,R14             ESR SVC # present ?
         JZ    PARS2000            ...jif not - go free parse work
         MVI   ESRSVCNO,X'F0'      Ripple ESR SVC # to
         MVC   ESRSVCNO+1(L'ESRSVCNO-1),ESRSVCNO zeroes
         XR    R15,R15             Clear work register
         ICM   R15,B'0011',MSVCR+4 Place subfield length in R15
         LHI   R7,3                Set maximum length in R7
         SR    R7,R15              Get offset in R7
         BCTR  R15,0               Decrement for execute
         LA    R10,ESRSVCNO        R10 -> target capture field
         AR    R10,R7              Calculate offset
         EX    R15,CAPKW           Capture field value
*
*        Pack & convert to binary the ESR SVC number
*
*        WTO   'ESR SVC number found'
         OI    ATTR_FLAGS,ATTR_ESR Indicate ESR SVC request
         PACK  DWD,ESRSVCNO        Pack ESR SVC number
         CVB   R1,DWD               Make it binary
         STC   R1,ESR#               and save for later use
         ST    R1,ESR#FW              & in a fullword
*
*        We're through with TSO/E parse so free its workareas
*
PARS2000 DS    0H
*        WTO   'Freeing parse workareas'
         BASR  R10,0               Macro internal addressability
         USING *,R10               """""""""""""""""""""""""""""
         IKJRLSA ANS               Release IKJPARS storage
         DROP  R10              Drop macro expansion addressability
*=================================================================* @14
*                                                                 * @14
*        P H A S E  3  parsing (verify field content)             * @14
*                                                                 * @14
* Logic here verifies content of supplied fields as being valid   * @14
* in combination with other fields supplied. Fields verified here * @14
* are as followed:                                                * @14
*                                                                 * @14
* 1) TYPE was either 1, 2, 3, 4, or 6                             * @14
* 2) If ESR form was used that the SVC number was 109, 116, 122,  * @14
*    or 137.                                                      * @14
* 3) Each of the ESR routing SVC numbers in 2) above have a       * @14
*    maximum number of possibilities as per the following chart:  * @14
*                                                                 * @14
*    SVC#   Maxium value for ESR SVC function code                * @14
*    ==== ======================================================= * @14
*     109 255 entries (Type 3/4 ESR SVCs)                         * @14
*     116  14 entries (Type 1 SVCs)                               * @14
*     122  19 entries (Type 2 SVCs)                               * @14
*     137   7 entries (Type 6 SVCs)                               * @14
*                                                                 * @14
* 4) Enforce TYPE and ESR form as being mutually exclusive        * @14
* 5) The the GOODNITE time is in the range of 0001 to 2359        * @14
* 6) LOCAL lock __________________________                        * @14
* 7)                                                              * @14
*                                                                 * @14
*=================================================================* @14
*        WTO   'Checking TYPE'
         TM    PKW_used,PKW_TYPE   Was TYPE supplied ?
         JNO   PARS2100            ...jif not
*
* See if valid TYPE specification
*
         MVI   TYPEBIN,X'01'       Assume TYPE=1
         CLI   TYPE,C'1'           TYPE=1 ?
         JE    PARS2010            ...jif so
         MVI   TYPEBIN,X'02'       Assume TYPE=2
         CLI   TYPE,C'2'           TYPE=2 ?
         JE    PARS2010            ...jif so
         MVI   TYPEBIN,X'03'       Assume TYPE=3
         CLI   TYPE,C'3'           TYPE=3 ?
         JE    PARS2010            ...jif so
         MVI   TYPEBIN,X'04'       Assume TYPE=4
         CLI   TYPE,C'4'           TYPE=4 ?
         JE    PARS2010            ...jif so
         MVI   TYPEBIN,X'06'       Assume TYPE=6
         CLI   TYPE,C'6'           TYPE=6 ?
         JE    PARS2010            ...jif so
*
*        Issue message regarding invalid SVC TYPE specification
*
         $RWTO MSG019A,WRITE=YES
         $RWTO MSG027A,WRITE=YES
         LHI   R15,BADPARM4        Invalid parameter found
         ST    R15,RETCODE         Set to expose retcode to caller
         J     PARSX                and return to caller
*
* TYPE supplied valid, make sure ESR# not supplied
*
PARS2010 DS    0H
         TM    ATTR_FLAGS,ATTR_ESR Was ESR SVC # supplied ?
         JNO   PARS2020            ...jif not
*
* TYPE & SVC ESR # are mutually exclusive
*
         $RWTO MSG038A,WRITE=YES   Write details message            @14
         LHI   R15,BADPARM4        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
*                                                                   @14
* TYPE was supplied w/o ESR# so make sure SVC number is not a       @14
* routing SVC (109, 116, 122, or 137.                               @14
*                                                                   @14
PARS2020 DS    0H                                                   @14
*        WTO   'Checking for routing SVC w/ TYPE supplied'          @14
         CLI   SVC#,109            TYPE 3/4 routing ?               @14
         JE    PARS2021            ...jif so, illegal               @14
         CLI   SVC#,116            TYPE 1 routing ?                 @14
         JE    PARS2021            ...jif so, illegal               @14
         CLI   SVC#,122            TYPE 2 routing ?                 @14
         JE    PARS2021            ...jif so, illegal               @14
         CLI   SVC#,137            TYPE 6 routing ?                 @14
         JE    PARS2021            ...jif so, illegal               @14
         J     PARS2022            Possibly valid request           @14
*                                                                   @14
* Routing SVC # supplied with TYPE - not valid                      @14
*                                                                   @14
PARS2021 DS    0H                                                   @14
         $RWTO MSG039A,WRITE=YES   Write details message            @14
         LHI   R15,BADPARM4        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
*                                                                   @14
* We have a valid SVC w/ TYPE request - check for SVC# > 200        @14
*                                                                   @14
PARS2022 DS    0H                                                   @14
*        WTO   'Looks like valid TYPE w/ SVC w/o routing code'      @14
         CLI   SVC#,200            Is SVC # > or = 200              @14
         JNL   PARS2025            ...jif so, continue              @14
*                                                                   @14
* Specification of an SVC# of less than 200 requires RACF "Global   @14
* Special" privileges locally.                                      @14
*                                                                   @14
         TM    MYFLAGS,SPECIAL     RACF "global special" userid ?   @14
         JO    PARS2025           ...jif so, valid request (so far) @14
*                                                                   @14
* SVC # request < 200 requires RACF "global special" priviledges    @14
*                                                                   @14
         $RWTO MSG040A,WRITE=YES                                    @14
         LHI   R15,BADPARM4        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
*                                                                   @14
* SVC # >= 200 or RACF "global special" w/ SVC# < 200               @14
*                                                                   @14
PARS2025 DS    0H                                                   @14
*        WTO   'PARS2025 label passed - SVC and TYPE are valid'     @14
         J     PARS2200            Skip ESR function code checks    @14
*                                                                   @14
* TYPE was not supplied meaning that a routing SVC # and a valid    @14
* routing code are required - we check that here. This involves a   @14
* range check based on the SVC# (routing SVC) provided by the user. @14
*                                                                   @14
* At this point ESR#FW contains the supplied ESR# in routing code   @14
* in binary and we need to check the range based on the SVC type    @14
* which is in the SVC# one byte field                               @14
*                                                                   @14
PARS2100 DS    0H                                                   @14
         L     R2,ESR#FW           Load binary routing code         @14
*                                                                   @14
* Check for Router SVC # specification as it requires an ESR        @14
* function code also be specified                                   @14
*                                                                   @14
         CLI   SVC#,109            T3/4 ESR request ?               @14
         JE    PARS2105            ...jif so, continue              @14
         CLI   SVC#,116            T1 ESR request ?                 @14
         JE    PARS2105            ...jif so, continue              @14
         CLI   SVC#,122            T2 ESR request ?                 @14
         JE    PARS2105            ...jif so, continue              @14
         CLI   SVC#,137            T6 ESR request ?                 @14
         JE    PARS2105            ...jif so, continue              @14
*                                                                   @14
*        Use of SVC # that is not part of the ESR requires TYPE be  @14
*        specified so check that here. TYPEBIN would be non-zero    @14
*        if TYPE had been specified.                                @14
*                                                                   @14
         CLI   TYPEBIN,X'00'       TYPE specified by user ?         @14
         JNE   PARS2105            ...jif so                        @14
         $RWTO MSG048A,WRITE=YES                                    @14
         LHI   R15,BADTYPR         TYPE is required for non-ESR     @14
         ST    R15,RETCODE         Set to expose retcode to caller  @14
         J     PARSX                and return to caller            @14
*                                                                   @14
* The following code is common for all Router SVC specifications    @14
* so done once here                                                 @14
*                                                                   @14
PARS2105 DS    0H                                                   @14
         TM    ATTR_FLAGS,ATTR_ESR Was ESR SVC # supplied ?         @14
         JO    PARS2107            ...jif so                        @14
         $RWTO MSG047A,WRITE=YES                                    @14
         LHI   R15,BADPARM4        Invalid parameter found          @14
         ST    R15,RETCODE         Set to expose retcode to caller  @14
         J     PARSX                and return to caller            @14
*
* Check T3/4 SVC routing code specification
*
PARS2107 DS    0H
         CLI   SVC#,109            T3/4 ESR request ?
         JNE   PARS2110            ...jif not
*
* Make sure ESR routing code in range 0-255
*
         C     R2,=F'255'          > 255 routing code for T3/4 ?
         JNH   PARS2200            ...bif not, routing code is good @14
*
* Routing code must be in range 0-255 for T3/4 ESR SVC
*
         $RWTO MSG042A,WRITE=YES   Write details message            @14
         LHI   R15,BADPARM4        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
*
* Check T1 SVC routing code specification
*
PARS2110 DS    0H
         CLI   SVC#,116            T1 ESR request ?
         JNE   PARS2120            ...jif not
*
* Make sure ESR routing code in range 0-14
*
         C     R2,=F'14'           > 14 routing code for T1 ?
         JNH   PARS2200            ...bif not, routing code is good @14
*
* Routing code must be in range 0-14 for T1 ESR SVC
*
         $RWTO MSG043A,WRITE=YES   Write details message            @14
         LHI   R15,BADPARM4        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
*
* Check T2 SVC routing code specification
*
PARS2120 DS    0H
         CLI   SVC#,122            T2 ESR request ?
         JNE   PARS2130            ...jif not
*
* Make sure ESR routing code in range 0-19
*
         C     R2,=F'19'           > 19 routing code for T2 ?
         JNH   PARS2200            ...bif not, routing code is good @14
*
* Routing code must be in range 0-19 for T2 ESR SVC
*
         $RWTO MSG044A,WRITE=YES   Write details message            @14
         LHI   R15,BADPARM4        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
*
* Check T6 SVC routing code specification
*
PARS2130 DS    0H
         CLI   SVC#,137            T6 ESR request ?
         JNE   PARS2140            ...jif not
*
* Make sure ESR routing code in range 0-7
*
         C     R2,=F'7'            > 7 routing code for T6 ?
         JNH   PARS2200            ...bif not, routing code is good @14
*
* Routing code must be in range 0-7 for T6 ESR SVC
*
         $RWTO MSG045A,WRITE=YES   Write details message            @14
         LHI   R15,BADPARM4        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
*
*        Invalid logic intentional abend
*
PARS2140 DS    0H
         $RWTO MSG046A,WRITE=YES
         ABEND 333,DUMP            Force abend
*
*
*        Check GOODNITE time if supplied
*
*
PARS2200 DS    0H
*        WTO   'Checking GOODNITE time (hhmm)'
         TM    PKW_used,PKW_GOODNITE Was GOODNITE supplied ?
         JNO   PARS2300            ...jif not
*        WTO   'GOODNITE time (hhmm) was supplied'
*
* Handle GOODNITE time - make sure numeric
*
         UNPK  DWD,=X'0F'          DWD=F0F0F0F0F0F0F0F0
         MVN   DWD(4),SHUTDOWN     Move HHMM
         CLC   DWD(4),SHUTDOWN     hhmm numeric ?
         JE    PARS2205            ...jif so
*                                                                   @14
*        Goodnight time (HHMM) parameter not numeric                @14
*                                                                   @14
         $RWTO MSG076E,WRITE=YES   Write the message                @14
         LHI   R1,BADEOD1          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     PARSX               Go make like trees               @14
*                                                                   @14
*        Goodnight time (HHMM) parameter is numeric                 @14
*                                                                   @14
PARS2205 DS    0H
         XC    ENDOFDAY,ENDOFDAY
         MVC   ENDOFDAY,SHUTDOWN   HHMM -> HHMM0000
*
*        Make sure GOODNITE(0000) was not specified
*
         CLC   SHUTDOWN,=C'0000'   Illegal value ?
         JNE   PARS2210
*
*        Specified GOODNITE time out of range
*
PARS2206 DS    0H
         $RWTO MSG084E,WRITE=YES   Write the message                @14
         LHI   R1,BADEOD2          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     PARSX               Go make like trees               @14
*
* Verify hh (hours) in range 00-23
* Pack first 2 bytes and cvb and make sure <= 23 hours
*
PARS2210 DS    0H
         XC    DWD,DWD             Clear doubleword work area
         PACK  DWD+6(2),SHUTDOWN(2)  PACK 1st 2 bytes (HH)
         OI    DWD+7,X'0F'         Set + sign in last zone
         CVB   R1,DWD              Make HH binary
         C     R1,=F'23'           > 23 (HH) ?
         JH    PARS2206            ...jif so, HH out of 00-23 range
*
* Verify mm (minutes) in range 00-59
* Pack second 2 bytes and cvb and make sure <= 59 hours
*
         XC    DWD,DWD             Clear doubleword work area
         PACK  DWD+6(2),SHUTDOWN+2(2)  PACK 2nd 2 bytes (MM)
         OI    DWD+7,X'0F'         Set + sign in last zone
         CVB   R1,DWD              Make MM binary
         C     R1,=F'59'           > 59 (MM) ?
         JH    PARS2206            ...jif so, HH out of 00-23 range
*
* To be here the GOODNITE (HHMM) time was in the range of 0001-2359
*
*        WTO   'GOODNITE (HHMM) time was good'
*        J     PARSX
*
* Make sure GOODNITE time is later than the current time
*
* Note: HOURS for length of 4 bytes contains zoned decimal current
*       execution time in the form of HHMM...same format as the
*       field named SHUTDOWN. We just need to make both these
*       fields binary and compare them to make sure the SHUTDOWN
*       HHMM value is greater than the HOURS+MINUTES HHMM value.
*
         XC    DWD,DWD             Clear doubleword work area
         PACK  DWD+4(4),SHUTDOWN   PACK HHMM GOODNITE value
         OI    DWD+7,X'0F'         Set + sign in last zone
         CVB   R1,DWD              Make GOODNITE binary
         XC    DWD,DWD             Clear doubleword work area
         PACK  DWD+4(4),HOURS(4)   PACK HHMM HOURS+MINUTES value
         OI    DWD+7,X'0F'         Set + sign in last zone
         CVB   R2,DWD              Make current time binary
         CR    R2,R1               Current HHMM < GOODNITE HHMM ?
         JNH   PARS2300            ...jif so, HHMM is in the future
*                                                                   @14
*        Specified Goodnite time earlier than current time          @14
*                                                                   @14
         $RWTO MSG088E,WRITE=YES   Write the message                @14
         LHI   R1,BADEOD3          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     PARSX               Go make like trees               @14
*
* Since there's really nothing to check here for the ATTR
* specification we'll just check the LOCK combinations that are
* possible based upon the TYPE SVC being installed.
*
*        Set TYPE field from ESR# if not supplied
*
* If TYPE was not supplied we set it here based on the ESR SVC      @14
* number for purposes of performing the above checks. The mutually  @14
* exclusive test of TYPE with and ESR SVC number has already been   @14
* performed by this point so this won't get us in trouble.          @14
*                                                                   @14
PARS2300 DS    0H
         TM    PKW_used,PKW_TYPE   Was TYPE supplied ?              @14
         JO    PARS2305            ...jif so, skip TYPE assignment  @14
         CLI   SVC#,109            T3/4 ESR request ?               @14
         JNE   PARS2300A           ...jif not, continue             @14
         MVI   TYPE,C'3'           Set type 3/4                     @14
         J     PARS2305            Go to resume point               @14
PARS2300A DS   0H                                                   @14
         CLI   SVC#,116            T1 ESR request ?                 @14
         JNE   PARS2300B           ...jif not, continue             @14
         MVI   TYPE,C'1'           Set type 1                       @14
         J     PARS2305            Go to resume point               @14
PARS2300B DS   0H                                                   @14
         CLI   SVC#,122            T2 ESR request ?                 @14
         JNE   PARS2300C           ...jif not, continue             @14
         MVI   TYPE,C'2'           Set type 2                       @14
         J     PARS2305            Go to resume point               @14
PARS2300C DS   0H                                                   @14
         CLI   SVC#,137            T1 ESR request ?                 @14
         JNE   PARS2300D           ...jif not, continue             @14
         MVI   TYPE,C'1'           Set type 1                       @14
         J     PARS2305            Go to resume point               @14
*                                                                   @14
*        Logic error in TYPE assignment - please report             @14
*                                                                   @14
PARS2300D DS   0H                                                   @14
         $RWTO MSG050S,WRITE=YES                                    @14
         ABEND 334,DUMP                                             @14
*                                                                   @14
* Rules for LOCKs by type SVC are as follows:                       @14
* ===========================================                       @14
* 1) Type 1 SVC routines always receive control with the LOCAL lock @14
*    held and must not release the LOCAL lock. Additional locks may @14
*    be requested prior to entry via the IEASVCxx member of         @14
*    SYS1.PARMLIB or the SVCUPDTE macro or may be requested         @14
*    dynamically within the SVC routine. Unless specific locks are  @14
*    requested by the user we will not provide any locks for a      @14
*    type 1 standard or type 1 ESR routine.                         @14
* 2) Types 2, 3, and 4 may also request locks via the IEASVCxx      @14
*    member of SYS1.PARMLIB or the SVCUPDTE macro or may obtain     @14
*    them dynamically within the SVC routine. Again unless specific @14
*    locks are requested by the user we will not provide any locks  @14
*    for a type 2, 3, or 4 SVC.                                     @14
* 3) Types 1 & 2 may request that any locks be held on entry.       @14
* 4) Types 3 & 4 may only request that the LOCAL or LOCAL and CMS   @14
*    locks be held.                                                 @14
* 5) If no locks are held or obtained, or only suspend locks (CMS   @14
*    and LOCAL) are held or obtained, the SVC routine executes in   @14
*    supervisor state key zero, enabled mode.                       @14
* 6) If the CPU lock is held or obtained, the SVC routine executes  @14
*    in supervisor state, key zero, disabled mode. No SVCs may be   @14
*    issued.                                                        @14
* 7) SVCs may not take disabled page faults. Therefore, if the CPU  @14
*    lock is held, the SVC routines must ensure that any referenced @14
*    pages are fixed. For types 3 and 4, all pages containing code  @14
*    must be fixed.                                                 @14
* 8) An FRR may be defind for any SVC routine that holds or obtains @14
*    locks to provide for abnormal termination (See the manual)     @14
* 9) Type 6 may not request any locks.                              @14
* 10) We restrict SRM, SALLOC and DISP locks to individuals that    @14
*    posess RACF Global Special priviledges.                        @14
*                                                                   @14
PARS2305 DS    0H                                                   @14
         TM    PKW_used,PKW_LOCKS  Was LOCKS supplied ?             @14
         JNO   PARS2400            ...jif not, assign by TYPE       @14
*        WTO   'Checking restricted LOCKS subparameters'            @14
*                                                                   @14
*        LOCKS keyword was supplied and we need to check for        @14
*        valid locks requested by SVC TYPE. LOCKS available are     @14
*                                                                   @14
*        LOCAL                                                      @14
*        CMS                                                        @14
*        SRM    <- RACF Global Special required                     @14
*        SALLOC <- RACF Global Special required                     @14
*        DISP   <- RACF Global Special required                     @14
*                                                                   @14
         TM    LOCKS_FLAGS,LOCKS_SRM   SRM lock requested ?         @14
         JO    PARS2310            Go check for Global Special      @14
         TM    LOCKS_FLAGS,LOCKS_SALLOC SALLOC lock requested ?     @14
         JO    PARS2310            Go check for Global Special      @14
         TM    LOCKS_FLAGS,LOCKS_DISP  DISP lock requested ?        @14
         JO    PARS2310            Go check for Global Special      @14
         J     PARS2320            Go to resume point               @14
*                                                                   @14
*        Check for RACF Global Special authority                    @14
*                                                                   @14
*        Note: SRM, SALLOC & DISP locks require RACF Global         @14
*              Special authority                                    @14
*                                                                   @14
PARS2310 DS    0H                                                   @14
         TM    MYFLAGS,SPECIAL     RACF "global special" userid ?   @14
         JO    PARS2320            ...jif so, passed                @14
         $RWTO MSG049A,WRITE=YES                                    @14
         LHI   R15,BADLOCKS        Set return code and              @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX               Go MLT                           @14
*                                                                   @14
*        Check Type 6 SVC with locks                                @14
*                                                                   @14
PARS2320 DS    0H                                                   @14
         CLI   TYPE,C'6'           Type 6 ?                         @14
         JNE   PARS2330            ...jif not, go check 3/4         @14
* Type 6 cannot request locks of any type                           @14
         $RWTO MSG902I,WRITE=YES                                    @14
         LHI   R15,BADLOCKS        Set return code and              @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX               Go MLT                           @14
*
*        Type 3/4 can only request LOCAL or LOCAL + CMS locks
*
PARS2330 DS    0H                                                   @14
         CLI   TYPE,C'3'           Type 4 ?                         @14
         JE    PARS2340            ...jif so, do lock checks        @14
         CLI   TYPE,C'4'           Type 4 ?                         @14
         JE    PARS2340            ...jif so, do lock checks        @14
         J     PARS2400            else we don't care               @14
PARS2340 DS    0H                                                   @14
         TM    LOCKS_FLAGS,X'FF'-(LOCKS_LOCAL+LOCKS_CMS)            @14
         JZ    PARS2350            ...jif only LOCL and/or CMS      @14
* Type 3/4 can only request LOCAL or LOCAL + CMS                    @14
PARS2342 DS    0H                                                   @14
         $RWTO MSG901I,WRITE=YES                                    @14
         LHI   R15,BADLOCKS        Set return code and              @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX               Go MLT                           @14
*                                                                   @14
*        Verify that only LOCAL or LOCAL + CMS was specified        @14
*                                                                   @14
PARS2350 DS    0H                                                   @14
         TM    LOCKS_FLAGS,LOCKS_LOCAL+LOCKS_CMS                    @14
         JO    PARS2400            ...jif both present              @14
         TM    LOCKS_FLAGS,LOCKS_LOCAL                              @14
         JO    PARS2400            ...jif only LOCAL present        @14
         J     PARS2342            ...else reuse above logic        @14
*                                                                   @14
*        LOCKS were not specified so we won't assign any            @14
*                                                                   @14
PARS2400 DS    0H                                                   @14
         J     PARSX




.JH0831A ANOP                                                       @14
         AGO   .JH0831B                                             @14
*                                                                   @14
*        Continue parsing                                           @14
*                                                                   @14
PARS040  DS    0H                                                   @14
         LR    R4,R7               R4 -> beginning of string        @14
         LR    R6,R7               R6 -> beginning of string        @14
         AR    R6,R3               R6 -> last character in string   @14
*                                                                   @14
*        Make sure minimum length parmlist was supplied for install @14
*        operation...i.e.:                                          @14
*                                                                   @14
*        SVC=n,LMOD=x (executable length of 11)                     @14
*                                                                   @14
         CHI   R3,11               Length >= 11 bytes ?             @14
         JNL   PARS050             ...jif so, continue parse        @14
*                                                                   @14
*        Minumum length parameter list not supplied                 @14
*                                                                   @14
         $RWTO MSG006A,WRITE=YES   Write details message            @14
         LHI   R15,BADPARM4        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
*
*        Load initial parse values & pointers
*
*        R4 -> beginning of string
*        R5 =  residual length of string
*        R6 =  byte position of last byte in string
*
PARS050  DS    0H
         LA    R4,Work_input_parms R4 -> start of original string
         LH    R5,Input_parmlen    R5 = executable length of string
*        LA    R6,1(R6,R5)         R6 -> past last byte of string
         XC    Parse_flags,Parse_flags initialize flag byte
*
*        Look for primary keywords
*
* Note: Each routine branched to in the following logic is
*       responsible for setting R4 to point to the residual
*       portion of the string to parse and R5 to the residual
*       length of the string.
*
*        R4 -> start of residual string
*        R5 =  residual length of string
*
PARS060  DS    0H
*        CLC   =CL4'SVC=',0(R4)    SVC=
*        JE    PARSSVC             ...jif so
         CLC   =CL5'LMOD=',0(R4)   LMOD=
         JE    PARSLMOD            ...jif so
*        CLC   =CL5'ATTR=',0(R4)   ATTR=
*        JE    PARSATTR            ...jif so
*        CLC   =CL6'LOCKS=',0(R4)  LOCKS=
*        JE    PARSLOCKS           ...jif so
         CLC   =CL9'GOODNITE=',0(R4) GOODNITE=
         JE    PARSGOODNITE        ...jif so
         CLC   =CL5'TYPE=',0(R4)   TYPE=
         JE    PARSTYPE            ...jif so
         CLC   =CL5'USER=',0(R4)   USER=
         JE    PARSUSER            ...jif so
*
*        Primary keyword not recognized
*
         $RWTO MSG005A,WRITE=YES   Write details message            @14
         LHI   R15,BADPARM4        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
******************************************************************* @14
*                                                                 * @14
*        Parse LMOD= parameter                                    * @14
*                                                                 * @14
******************************************************************* @14
PARSLMOD DS    0H
*        WTO   'PARSLMOD entered'
         TM    PKW_used,PKW_LMOD   Has "LMOD=" already been seen ?
         JNO   PARSLMOD_100        ...jif not
*
*       Issue message about duplicate primary keyword specification @14
*
*       Note: This label is used by several routines (PARSLMOD_010)
*
PARSLMOD_010 DS 0H
         $RWTO MSG007A,WRITE=YES
         LHI   R15,BADPARM4        Duplicate keyword specification
         ST    R15,RETCODE         Set to expose retcode to caller
         J     PARSX                and return to caller
PARSLMOD_100 DS 0H
         OI    PKW_used,PKW_LMOD   Set "LMOD=" already seen flag
         S     R5,=F'5'            Decrement length for "LMOD="
         A     R4,=F'5'            Adjust scan start location
*
*        Scan for comma or end of string to harvest
*
         CLI   0(R4),C','          "Null" "LMOD=," ?
         JNE   PARSLMOD_110        ...jif not
*
*        Issue message about "Null" LMOD keyword
*
         $RWTO MSG012A,WRITE=YES
         LHI   R15,BADPARM4        Duplicate keyword specification
         ST    R15,RETCODE         Set to expose retcode to caller
         J     PARSX                and return to caller
PARSLMOD_110 DS 0H
         XR    R2,R2               Clear accumulator register
         LR    R7,R4             Preserve LMOD value start position
PARSLMOD_120 DS 0H
         CR    R4,R6               Past end of string ?
         JE    PARSLMOD_130        ...jif so
         CLI   0(R4),C','          End of value ?
         JE    PARSLMOD_130        ...jif so
         LA    R4,1(R4)            Increment string pointer
         LA    R2,1(R2)            Bump value length
*
*        Make sure 8 or less bytes
*
         CHI   R2,8                > 8 bytes ?
         JNH   PARSLMOD_120        ...jif not
*
*        Issue message about invalid length LMOD keyword value
*
         $RWTO MSG010A,WRITE=YES
         LHI   R15,BADPARM4        Duplicate keyword specification
         ST    R15,RETCODE         Set to expose retcode to caller
         J     PARSX                and return to caller
*
*        Capture LMOD value (executable length in R2)
*
*        R4 -> delimiter
*        R7 -> start of value
*
PARSLMOD_130 DS 0H
         CLI   00(R4),C','         Delimiter terminator ?
         JNE   PARSLMOD_132        ...jif not
         BCTR  R2,0                otherwise decrement length
PARSLMOD_132 DS 0H
         LA    R9,LMOD             R9 -> field to capture
         EX    R2,CAPKW            Capture field value
LTORG_AREA LOCTR ,                                                  @14
CAPKW    MVC   0(*-*,R9),0(R7)     Capture keyword field            @14
SVCUPDTE LOCTR ,                                                    @14
         CR    R4,R6               Last byte of string ?
         JE    PARS1000            Go to phase 2 of parse           @14
         LA    R4,1(R4)            Bump over delimiter
         LR    R5,R6               Adjust pointers
         SR    R5,R4                for next keyword in string
         J     PARS060               and go process it
******************************************************************* @14
*                                                                 * @14
*        Parse USER=xxxxxxxx parameter                            * @14
*                                                                 * @14
******************************************************************* @14
PARSUSER DS    0H
*        WTO   'PARSUSER entered'
         TM    PKW_used,PKW_USER   Has "USER=" already been seen ?
         JNO   PARSUSER_100        ...jif not
*
*       Issue message about duplicate primary keyword specification @14
*
         J     PARSLMOD_010        ...jif duplicate to common code
PARSUSER_100 DS 0H
         OI    PKW_used,PKW_USER   Set "USER=" already seen flag
         S     R5,=F'5'            Decrement length for "USER="
         A     R4,=F'5'            Adjust scan start location
*
*        Scan for comma or end of string to harvest
*
         CLI   0(R4),C','          "Null" "USER=," ?
         JNE   PARSUSER_110        ...jif not
*
*        Issue message about "Null" USER keyword
*
         $RWTO MSG013A,WRITE=YES
         LHI   R15,BADPARM4        Duplicate keyword specification
         ST    R15,RETCODE         Set to expose retcode to caller
         J     PARSX                and return to caller
PARSUSER_110 DS 0H
         XR    R2,R2               Clear accumulator register
         LR    R7,R4             Preserve USER value start position
PARSUSER_120 DS 0H
         CR    R4,R6               Past end of string ?
         JE    PARSUSER_130        ...jif so
         CLI   0(R4),C','          End of value ?
         JE    PARSUSER_130        ...jif so
         LA    R4,1(R4)            Increment string pointer
         LA    R2,1(R2)            Bump value length
*
*        Make sure 8 or less bytes
*
         CHI   R2,8                > 8 bytes ?
         JNH   PARSUSER_120        ...jif not
*
*        Issue message about invalid length USER keyword value
*
         $RWTO MSG011A,WRITE=YES
         LHI   R15,BADPARM4        Duplicate keyword specification
         ST    R15,RETCODE         Set to expose retcode to caller
         J     PARSX                and return to caller
*
*        Capture USER value (executable length in R2)
*
*        R4 -> delimiter or last character of string
*        R7 -> start of value
*
PARSUSER_130 DS 0H
         CLI   00(R4),C','         Delimiter terminator ?
         JNE   PARSUSER_132        ...jif not
         BCTR  R2,0                otherwise decrement length
PARSUSER_132 DS 0H
         LA    R9,USERID           R9 -> target field for capture
         EX    R2,CAPKW            Capture field value
         CR    R4,R6               Last byte of string ?
         JE    PARS1000            Go to phase 2 of parse           @14
         LA    R4,1(R4)            Bump over delimiter
         LR    R5,R6               Adjust pointers
         SR    R5,R4                for next keyword in string
         J     PARS060               and go process it
******************************************************************* @14
*                                                                 * @14
*        Parse TYPE=n parameter                                   * @14
*                                                                 * @14
******************************************************************* @14
PARSTYPE DS    0H
*        WTO   'PARSTYPE entered'
         TM    PKW_used,PKW_TYPE   Has "TYPE=" already been seen ?
         JNO   PARSTYPE_100        ...jif not
*
*       Issue message about duplicate primary keyword specification @14
*
*       Note: This label is used by several routines (PARSLMOD_010)
*
PARSTYPE_010 DS 0H
         $RWTO MSG007A,WRITE=YES
         LHI   R15,BADPARM4        Duplicate keyword specification
         ST    R15,RETCODE         Set to expose retcode to caller
         J     PARSX                and return to caller
PARSTYPE_100 DS 0H
         OI    PKW_used,PKW_TYPE   Set "TYPE=" already seen flag
         S     R5,=F'5'            Decrement length for "TYPE="
         A     R4,=F'5'            Adjust scan start location
*
*        Scan for comma or end of string to harvest
*
         CLI   0(R4),C','          "Null" "TYPE=," ?
         JNE   PARSTYPE_110        ...jif not
*
*        Issue message about "Null" TYPE keyword
*
         $RWTO MSG014A,WRITE=YES
         LHI   R15,BADPARM4        Duplicate keyword specification
         ST    R15,RETCODE         Set to expose retcode to caller
         J     PARSX                and return to caller
PARSTYPE_110 DS 0H
         XR    R2,R2               Clear accumulator register
         LR    R7,R4             Preserve TYPE value start position
PARSTYPE_120 DS 0H
         CR    R4,R6               Past end of string ?
         JE    PARSTYPE_130        ...jif so
         CLI   0(R4),C','          End of value ?
         JE    PARSTYPE_122        ...jif so
         LA    R4,1(R4)            Increment string pointer
         LA    R2,1(R2)            Bump value length
         J     PARSTYPE_120        Go check next string position
*
*        Make sure exactly 1 byte
*
PARSTYPE_122 DS 0H
         CHI   R2,1                1 byte ?
         JE    PARSTYPE_130        ...jif not
*
*        Issue message about invalid length TYPE keyword value
*
*        DC    H'0'                <debug>
         $RWTO MSG015A,WRITE=YES
         LHI   R15,BADPARM4        Duplicate keyword specification
         ST    R15,RETCODE         Set to expose retcode to caller
         J     PARSX                and return to caller
*
*        Capture TYPE value (executable length in R2)
*
*        R4 -> delimiter or last character of string
*        R7 -> start of value
*
PARSTYPE_130 DS 0H
         CLI   0(R4),C','          Delimiter terminator ?
         JNE   PARSTYPE_132        ...jif not
         BCTR  R2,0                otherwise decrement length
PARSTYPE_132 DS 0H
         CLI   0(R7),C'1'          TYPE=1
         JE    PARSTYPE_134
         CLI   0(R7),C'2'          TYPE=2
         JE    PARSTYPE_134
         CLI   0(R7),C'3'          TYPE=3
         JE    PARSTYPE_134
         CLI   0(R7),C'4'          TYPE=4
         JE    PARSTYPE_134
         CLI   0(R7),C'6'          TYPE=6
         JE    PARSTYPE_134
*
*        Issue message regarding invalid SVC TYPE specification
*
         $RWTO MSG019A,WRITE=YES
         $RWTO MSG027A,WRITE=YES
         LHI   R15,BADPARM4        Invalid parameter found
         ST    R15,RETCODE         Set to expose retcode to caller
         J     PARSX                and return to caller
*
* Note: The SVC type field in the SVCUPDTE plist will be set to the
*       appropriate value during phase 2 parse processing if no
*       errors are found durign phase 2 processing.
*
PARSTYPE_134 DS 0H
         LA    R9,TYPE             R9 -> target field for capture
         EX    R2,CAPKW            Capture field value
         CR    R4,R6               Last byte of string ?
         JE    PARS1000            Go to phase 2 of parse           @14
         LA    R4,1(R4)            Bump over delimiter
         LR    R5,R6               Adjust pointers
         SR    R5,R4                for next keyword in string
         J     PARS060               and go process it
******************************************************************* @14
*                                                                 * @14
*        Parse GOODNITE=hhmm parameter                            * @14
*                                                                 * @14
******************************************************************* @14
PARSGOODNITE DS 0H
*        WTO   'PARSGOODNITE entered'
         TM   PKW_used,PKW_GOODNITE "GOODNITE=" already been seen ?
         JNO   PARSGOODNITE_100    ...jif not
*
*       Issue message about duplicate primary keyword specification @14
*
         J     PARSLMOD_010        ...jif duplicate to common code
PARSGOODNITE_100 DS 0H
         OI    PKW_used,PKW_GOODNITE Set "GOODNITE=" seen flag
         S     R5,=F'9'            Decrement length for "GOODNITE="
         A     R4,=F'9'            Adjust scan start location
*
*        Scan for comma or end of string to harvest
*
         CLI   0(R4),C','          "Null" "GOODNITE=," ?
         JNE   PARSGOODNITE_110    ...jif not
*
*        Issue message about "Null" GOODNITE keyword
*
         $RWTO MSG030A,WRITE=YES
         LHI   R15,BADPARM4        Duplicate keyword specification
         ST    R15,RETCODE         Set to expose retcode to caller
         J     PARSX                and return to caller
PARSGOODNITE_110 DS 0H
         XR    R2,R2               Clear accumulator register
         LR    R7,R4          Preserve GOODNITE value start position
*
* We need to pick off hh (hours) & mm (minutes) here and make sure
* the hh value is in the range of 00-23 and the mm value is in the
* range of 00-59. A value of hhmm=0000 will simply be ignored. The
* length of the hhmm keyword value must be exactly 4 bytes. The
* validation of the hhmm range will be performed in phase 2 of the
* parse.
*
PARSGOODNITE_120 DS 0H
         CR    R4,R6               Past end of string ?
         JE    PARSGOODNITE_130    ...jif so
         CLI   0(R4),C','          End of value ?
         JE    PARSGOODNITE_122    ...jif so
         LA    R4,1(R4)            Increment string pointer
         LA    R2,1(R2)            Bump value length
         J     PARSGOODNITE_120    Go check next string position
*
*        Make sure exactly 4 bytes
*
PARSGOODNITE_122 DS 0H
         CHI   R2,4                4 bytes ?
         JE    PARSGOODNITE_130    ...jif not
*
*        Issue message about invalid length GOODNITE keyword value
*
*        DC    H'0'                <debug>
         $RWTO MSG031A,WRITE=YES
         LHI   R15,BADPARM4        Invalid length
         ST    R15,RETCODE         Set to expose retcode to caller
         J     PARSX                and return to caller
*
*        Capture GOODNITE value (executable length in R2)
*
*        R4 -> delimiter or last character of string
*        R7 -> start of value
*
PARSGOODNITE_130 DS 0H
         CLI   0(R4),C','          Delimiter terminator ?
         JNE   PARSGOODNITE_132    ...jif not
         BCTR  R2,0                otherwise decrement length
*
*        Capture the GOODNITE time and validate it
*
PARSGOODNITE_132 DS 0H
         LA    R9,SHUTDOWN         R9 -> target field for capture
         EX    R2,CAPKW            Capture field value
         CR    R4,R6               Last byte of string ?
         JE    PARS1000            Go to phase 2 of parse           @14
         LA    R4,1(R4)            Bump over delimiter
         LR    R5,R6               Adjust pointers
         SR    R5,R4                for next keyword in string
         J     PARS060               and go process it

*
* Following line added by @14 change
*SG031A  WTO   'SVCU031A - Invalid length GOODNITE parameter detected',
*              ROUTCDE=(11),MF=L                                    @14
*SG031AL EQU   *-MSG031A                                            @14


*        R4 -> start of residual string
*        R5 =  residual length of string


         AGO   .JH0825A
*                                                                   @14
* Entry at PARS060 is only for the first character of the string or @14
* for the next character after a comma. Logic beginning at this     @14
* label is simply responsible for determining the length of the     @14
* current candidate option for passing to the appropriate routine   @14
* for handling. The true length of the candidate option is saved    @14
* in Current_option_length for the processor involved just in case  @14
* the processor wants to reuse R3 and for debugging reasons.        @14
*                                                                   @14
PARS050  DS    0H                                                   @14
         LA    R5,1(R3)            Make R5 true length for the scan
         XC    Parse_flags,Parse_flags initialize flag byte

         LR    R4,R7               R4 -> beginning of string
         LR    R6,R7               R6 -> beginning of string
         AR    R6,R3               R6 -> last character in string
         LR    R5,R6               R5 -> last character in string
         SR    R5,R4               R5 = length of string
*
*        Look for primary keywords
*
* Note: Each routine branched to in the following logic is
*       responsible for setting R4 to point to the residual
*       portion of the string to parse and r5 to the residual
*       length of the string.
*
*        R4 -> start of string
*        R5 =  residual length of string
*
PARS060  DS    0H
         CLC   =CL4'SVC=',0(R4)    SVC=
         JE    PARSSVC             ...jif so
         CLC   =CL5'LMOD=',0(R4)   LMOD=
         JE    PARSLMOD            ...jif so
         CLC   =CL5'ATTR=',0(R4)   ATTR=
         JE    PARSATTR            ...jif so
         CLC   =CL6'LOCKS=',0(R4)  LOCKS=
         JE    PARSLOCKS           ...jif so
         CLC   =CL9'GOODNITE=',0(R4) GOODNITE=
         JE    PARSGOODNITE        ...jif so
         CLC   =CL5'TYPE=',0(R4)   TYPE=
         JE    PARSTYPE            ...jif so
         CLC   =CL5'USER=',0(R4)   USER=
         JE    PARSUSER            ...jif so
*
*        Primary keyword not recognized
*
         $RWTO MSG005A,WRITE=YES   Write details message            @14
         LHI   R15,BADPARM4        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14


*
*        Parse SVC=nnn or SVC=(aaa,bbb) forms
*
PARSSVC  DS    0H
*        WTO   'PARSSVC entered'
*
* Check to see if SVC=nnn or SVC=(aaa,bbb) form & handle
*
         DC    H'0'









PARSATTR DS    0H
         WTO   'PARSATTR entered'
         DC    H'0'
PARSLOCKS DS   0H
         WTO   'PARSLOCKS entered'
         DC    H'0'
PARSGOODNITE DS 0H
         WTO   'PARSGOODNITE entered'
         DC    H'0'
PARSTYPE DS    0H
         WTO   'PARSTYPE entered'
         DC    H'0'
******************************************************************* @14
*                                                                 * @14
*        Parse USER=xxxxxxxx parameter                            * @14
*                                                                 * @14
******************************************************************* @14
PARSUSER DS    0H
*        WTO   'PARSUSER entered'
         TM    PKW_used,PKW_USER   Has "USER=" already been seen ?
         JNO   PARSUSER_100        ...jif not
*
*       Issue message about duplicate primary keyword specification @14
*
         J     PARSLMOD_010        ...jif duplicate to common code
PARSUSER_100 DS 0H
         OI    PKW_used,PKW_USER   Set "USER=" already seen flag
         S     R5,=F'5'            Decrement length for "USER="
         A     R4,=F'5'            Adjust scan start location
         SLR   R2,R2               Clear TRT work register          @14
         LARL  R9,TRTPARM2         Get translate table address      @14
         EX    R5,SCANCOMA         scan string for comma only       @14
         JC    8,PARSUSER_120      ...jif end of string w/o delim
         JC    4,PARSUSER_110      ...jif more after delim
         OI    Parse_flags,No_more_data Indicate no more data
         LR    R8,R1               Preserve R1 over WTO
*        WTO   'No more data'
         LR    R1,R8               Restore R1 after WTO
*
*        More data exists after the delimiter
*
PARSUSER_110 DS 0H
         LR    R8,R1               Preserve R1 over WTO
*        WTO   'More data after delimiter'
         LR    R1,R8               Restore R1 after WTO
*
*        Capture USER= parameter (determine executable length)
*
         LR    R2,R1               R2 -> delimiter
         SR    R2,R4               R2 = true length of USER value
         BCTR  R2,0                Make length EXecutable
         CHI   R2,7                > 8 ?
         JH    PARSUSER_121        ...jif so
         LA    R9,USERID           R9 -> field to capture
         EX    R2,CAPKW            Capture field value
*
*        Adjust string scan starting location & residual length
*        for processing next possible keyword
*
         TM    Parse_flags,No_more_data Any more data ?
         JO    PARS1000            ...jif not, phase 2 processeing
         LR    R3,R1               R1 -> delimiter
         SR    R3,R4            R3 = length not including delimiter @14
         LA    R4,1(R3,R4)         R4 -> data after delimiter
         SR    R5,R3               R5 = residual length
         J     PARS060             Go scan for net keyword
*
*        End of string found w/o delimiter
*
PARSUSER_120 DS 0H
         LR    R8,R1               Preserve R1 over WTO
*        WTO   'End of string w/o delimiter'
         LR    R1,R8               Restore R1 after WTO
         BCTR  R5,0                Make length executable
         CHI   R5,7                > max modname length ?
         JNH   PARSUSER_122        ...jif not, capture USER= name
*
*        Issue message about invalid length USER= parameter
*
PARSUSER_121 DS 0H
         DC    H'0'                R8 -> delimiter ?
         $RWTO MSG011A,WRITE=YES
         LHI   R15,BADPARM4        Duplicate keyword specification
         ST    R15,RETCODE         Set to expose retcode to caller
         J     PARSX                and return to caller
*
*        Capture USER= parameter (executable length in R5)
*
PARSUSER_122 DS 0H
         LA    R9,USERID           R9 -> field to capture
         EX    R5,CAPKW            Capture field value
         J     PARS1000            Go to phase 2 of parse           @14
******************************************************************* @14
*                                                                 * @14
*        Parse LMOD= parameter                                    * @14
*                                                                 * @14
******************************************************************* @14
PARSLMOD DS    0H
*        WTO   'PARSLMOD entered'
         TM    PKW_used,PKW_LMOD   Has "LMOD=" already been seen ?
         JNO   PARSLMOD_100        ...jif not
*
*       Issue message about duplicate primary keyword specification @14
*
PARSLMOD_010 DS 0H
         $RWTO MSG007A,WRITE=YES
         LHI   R15,BADPARM4        Duplicate keyword specification
         ST    R15,RETCODE         Set to expose retcode to caller
         J     PARSX                and return to caller
PARSLMOD_100 DS 0H
         OI    PKW_used,PKW_LMOD   Set "LMOD=" already seen flag
         S     R5,=F'5'            Decrement length for "LMOD="
         A     R4,=F'5'            Adjust scan start location
*        BCTR  R5,0                Make length EXecutable
         SLR   R2,R2               Clear TRT work register          @14
         LARL  R9,TRTPARM2         Get translate table address      @14
         EX    R5,SCANCOMA         scan string for comma only       @14
*                                                                   @14
LTORG_AREA LOCTR ,                                                  @14
SCANCOMA TRT   0(*-*,R4),0(R9)     Scan for comma                   @14
SVCUPDTE LOCTR ,                                                    @14
         JC    8,PARSLMOD_120      ...jif end of string w/o delim
         JC    4,PARSLMOD_110      ...jif more after delim
         OI    Parse_flags,No_more_data Indicate no more data
         LR    R8,R1               Preserve R1 over WTO
         WTO   'No more data'
         LR    R1,R8               Restore R1 after WTO
*        DC    H'0'                ??????


*
*        More data exists after the delimiter
*
PARSLMOD_110 DS 0H
         LR    R8,R1               Preserve R1 over WTO
         WTO   'More data after delimiter'
         LR    R1,R8               Restore R1 after WTO
*
*        Capture LMOD= parameter (determine executable length)
*
         LR    R2,R1               R2 -> delimiter
         SR    R2,R4               R2 = true length of LMOD value
         BCTR  R2,0                Make length EXecutable
         CHI   R2,7                > 8 ?
         JH    PARSLMOD_121        ...jif so
         LA    R9,LMOD             R9 -> field to capture
         EX    R2,CAPKW            Capture field value
*
*        Adjust string scan starting location & residual length
*        for processing next possible keyword
*
         TM    Parse_flags,No_more_data Any more data ?
         JO    PARS1000            ...jif not, phase 2 processeing
         LR    R3,R1               R1 -> delimiter
         SR    R3,R4            R3 = length not including delimiter @14
         LA    R4,1(R3,R4)         R4 -> data after delimiter
         SR    R5,R3               R5 = residual length
         J     PARS060             Go scan for net keyword
*
*        End of string found w/o delimiter
*
PARSLMOD_120 DS 0H
         LR    R8,R1               Preserve R1 over WTO
         WTO   'End of string w/o delimiter'
         LR    R1,R8               Restore R1 after WTO
         BCTR  R5,0                Make length executable
         CHI   R5,7                > max modname length ?
         JNH   PARSLMOD_122        ...jif not, capture LMOD= name
*
*        Issue message about invalid length LMOD= parameter
*
PARSLMOD_121 DS 0H
         $RWTO MSG010A,WRITE=YES
         LHI   R15,BADPARM4        Duplicate keyword specification
         ST    R15,RETCODE         Set to expose retcode to caller
         J     PARSX                and return to caller
*
*        Capture LMOD= parameter (executable length in R5)
*
PARSLMOD_122 DS 0H
         LA    R9,LMOD             R9 -> field to capture
         EX    R5,CAPKW            Capture field value
LTORG_AREA LOCTR ,                                                  @14
CAPKW    MVC   0(*-*,R9),0(R4)     Capture keyword field            @14
SVCUPDTE LOCTR ,                                                    @14
         J     PARS1000            Go to phase 2 of parse           @14







         DC    H'0'





         AGO   .JH0820B







PKW_used DS    X
PKW_SVC  EQU   X'80'               SVC= keyword found
PKW_LMOD EQU   X'40'               LMOD= keyword found
PKW_ATTR EQU   X'20'               ATTR= keyword found
PKW_LOCKS EQU  X'10'               LOCKS= keyword found
PKW_GOODNITE EQU X'08'             GOODNITE= keyword found
PKW_USER EQU   X'04'               USER= keyword found
PKW_TYPE EQU   X'02'               TYPE= keyword found

.JH0820B ANOP






         AGO   .JH0820A
         LM    R1,R3,PKWBRXLE      Load BRXLE work registers
         USING PKWTENT,R1      Keyword table entry addressability
         XR    R8,R8               Clear work register
         ICM   R8,B'0001',PKWLEN   Insert table keyword length
         CR    R5,R8               long enough for compare ?

PKWTENT  DSECT
PKWLEN   DS    XL1                 keywork length



         AGO   .JH0819A
         ST    R5,Current_option_length Initialize max length
         LARL  R10,DELIMTAB       Point to TRT table for SCANTRT EX
         XR    R2,R2               Clear function byte register
PARS060  DS    0H
*NIT020  DS    0H
         BCTR  R5,0                Decrement length for execute
         EX    R5,SCANTRT          Scan input parameter string
*                                                                   @14
LTORG_AREA LOCTR ,                                                  @14
* R10 must point to translate table for next instruction
SCANTRT  TRT  0(*-*,R4),0(R10)     Test for character
SVCUPDTE LOCTR ,                                                    @14
*                                                                   @14
         JC    8,PARS080         ...jif end of string w/o delimiter
         JC    4,PARS070           ...jif more data after delimiter
         OI    Parse_flags,No_more_data Indicate no more data
PARS070  DS    0H
*NIT030  DS    0H
         LR    R3,R1               R1 -> delimiter in string (comma)
         SR    R3,R4           R3 = new length not including delimiter
         ST    R3,Current_option_length Save length for processor
*
* Verify that invalid function byte was not returned from the DELIMTAB
* translation table. If it was then we'll abend and R2 will contain
* the offending value.
*
         CHI   R2,10               Check against max function value
         JNH   PARS071             ...jif not high
Get INIT974 logic here


         JH    INIT974             ...go abend on bad function byte

PARS071  DS    0H
         SHI   R2,4                Adjust for table entry
         L     R15,VECTOR(R2)      R2 contains processor offset from
*                                   the DELIMTAB translate table
         BASR  R14,R15             Call the delimiter processor


PARS080  DS    0H


*                                                                   @14
*        Unsupported parameter option
*                                                                   @14
*ARS???  DS    0H                                                   @14
         $RWTO MSG005A,WRITE=YES   Write details message            @14
         LHI   R15,BADPARM4        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     PARSX                 & go return to caller          @14
.JH0819A ANOP



*
* Table of supported primary keywords
*
* The following table is processed by a BRXLE loop and contains
* pointeres to logic to be used in processing the parameter list
* with the keyword as the first field in each table entry
*
PKWBRXLE DC    A(PKWFIRST,PKWELNG,PKWLAST) BRXLE setup values
*
PKWFIRST DC    AL1(4)              Primary keyword length
         DC    CL11'SVC='          Primary keyword
         DC    AL1(PKW_SVC)        Primary keyword flag
         DC    XL3'00'             <filler>
         DC    A(PROC_SVC)         @ of processor routine
*
PKWELNG  EQU   *-PKWFIRST          Length of eash entry
*
         DC    AL1(5)              Primary keyword length
         DC    CL11'LMOD='         Primary keyword
         DC    AL1(PKW_LMOD)       Primary keyword flag
         DC    XL3'00'             <filler>
         DC    A(PROC_LMOD)        @ of processor routine
*
         DC    AL1(5)              Primary keyword length
         DC    CL11'ATTR='         Primary keyword
         DC    AL1(PKW_ATTR)       Primary keyword flag
         DC    XL3'00'             <filler>
         DC    A(PROC_ATTR)        @ of processor routine
*
         DC    AL1(6)              Primary keyword length
         DC    CL11'LOCKS='        Primary keyword
         DC    AL1(PKW_LOCKS)      Primary keyword flag
         DC    XL3'00'             <filler>
         DC    A(PROC_LOCKS)       @ of processor routine
*
         DC    AL1(9)              Primary keyword length
         DC    CL11'GOODNITE='     Primary keyword
         DC    AL1(PKW_GOODNITE)   Primary keyword flag
         DC    XL3'00'             <filler>
         DC    A(PROC_GOODNITE)    @ of processor routine
*
PKWLAST  DC    AL1(5)              Primary keyword length
         DC    CL11'USER='         Primary keyword
         DC    AL1(PKW_USER)       Primary keyword flag
         DC    XL3'00'             <filler>
         DC    A(PROC_USER)        @ of processor routine


PKW_used DS    X
PKW_SVC  EQU   X'80'               SVC= keyword found
PKW_LMOD EQU   X'40'               LMOD= keyword found
PKW_ATTR EQU   X'20'               ATTR= keyword found
PKW_LOCKS EQU  X'10'               LOCKS= keyword found
PKW_GOODNITE EQU X'08'             GOODNITE= keyword found
PKW_USER EQU   X'04'               USER= keyword found
PKW_TYPE EQU   X'02'               TYPE= keyword found

PROC_SVC DS    0H
PROC_LMOD DS   0H
PROC_ATTR DS   0H
PROC_LOCKS DS  0H
PROC_GOODNITE DS 0H
PROC_USER DS   0H
.JH0820A ANOP

.JH0825A ANOP

.JH0831B ANOP                                                       @14











PARSX    DS    0H                                                   @14
         LM    R14,R12,PARSSAVE+12     Restore caller's GPRs        @14
         BR    R14                 Return to caller                 @14
*                                                                   @19
         TITLE 'ENV000  - Check environmentals before processing'   @14
*-----------------------------------------------------------------* @14
*                                                                 * @14
*        Perform environmental checks that can be executed before * @14
*        executing SVC install.                                   * @14
*                                                                 * @14
* Note: These checks include the following items:                 * @14
*                                                                 * @14
*       1) Check for existence of protecting CL(#SNOMISC) profile * @14
*       1) Check user's authority to install this SVC             * @14
*       2) Check various SVC attribute & lock combinations for    * @14
*          validity (move to PARS000)                             * @14
*       3) OPEN SVCLIB library                                    * @14
*       4) BLDL for the specified LMOD parameter                  * @14
*       5) Requested module is not SPLIT format                   * @14
*       6) Requested module is RENT                               * @14
*       7) Requested module is REFR                               * @14
*       8) Requested module is REUS                               * @14
*       9) Requested module is AMODE24 or AMODE31                 * @14
*                                                                 * @14
* Note: When this routine is called the PARSE routine (or earlier * @14
*       processing) will have completed the following:            * @14
*                                                                 * @14
*       1) MYFLAG.SPECIAL will be set for a "systems"             * @14
*          priviledged userid                                     * @14
*       2) TYPE_SVC will contain a valid SVC # (1, 2, 3, 4 or 6)  * @14
*       3) All LOCKS_FLAGS flags representing individual locks    * @14
*          requested will be set                                  * @14
*       4) ATTR_FLAGS flags representing individual SVC           * @14
*          attributes such as NPRMT, APF, AR and ESR will have    * @14
*          been set                                               * @14
*       5) PROC_FLAGS.PROC_GOODNITE will be set indicating that a * @14
*          GOODNITE shutdown time was requested                   * @14
*       6) ATTR_FLAGS.ATTR_ESR will be set indicating the user    * @14
*          is requesting installation of an SVC requiring ESR     * @14
*          routing.                                               * @14
*       7) The SVCNO field will contain a 3 digit zoned decimal   * @14
*          SVC number in the range of 0-255.                      * @14
*       8) The ESRSVCNO field will contain a 3 digit zoned        * @14
*          decimal ESR function code that is appropriate for the  * @14
*          routing SVC number passed in the SVCNO field if the    * @14
*          ATTR_FLAGS.ATTR_ESR flag is set otherwise it will be   * @14
*          blank. The ranges of acceptable values for the various * @14
*          ESR types are as follows:                              * @14
*                                                                 * @14
*          SVCNO  Type Acceptable range for ESRSVCNO              * @14
*          =====  ==== =============================              * @14
*           109   3/4  000-255                                    * @14
*           116    1   000-014                                    * @14
*           122    2   000-019                                    * @14
*           137    6   000-007                                    * @14
*                                                                 * @14
*       In summary the following fields & flags are expected to   * @14
*       be set on entry to this routine:                          * @14
*                                                                 * @14
*       SVCNO                                                     * @14
*       ESRSVCNO                                                  * @14
*       Current_profname                                          * @14
*                                                                 * @14
*       Note: RACF "global special" buys the submitter nothing    * @14
*             in this program at this time (08/11/2015).          * @14
*                                                                 * @14
*                                                                 * @14
         AGO   .JRH997A                                             @14
*  Note: This routine uses the PROC_FLAGS.FAILED flag to allow    * @14
*        as many of the checks & tests executed within this       * @14
*        subroutine to be performed before returning to the       * @14
*        calling routine. Each test that can logically still be   * @14
*        executed even though an earlier test failed will be      * @14
*        executed if possible to identify as many issues as       * @14
*        possible for the submitting user in a single execution.  * @14
*        The PROC_FLAGS.FAILED flag does not result in a specific * @14
*        return code being returned to the caller and the caller  * @14
*        will simply see the last return code set in the RETCODE  * @14
*        field.                                                   * @14
.JRH997A ANOP                                                       @14
*                                                                 * @14
*-----------------------------------------------------------------* @14
ENV000   DS    0H                                                   @14
         STM   R14,R12,SAVE@L1+12  Save caller's GPRs               @14


         AGO   .JH0810A
<Begin new code>
*
*        Check that a profile exists for the SVC slot involved. If
*        there is no profile we will not allow the SVC to be
*        installed regardless of whether the invoking user has
*        RACF "Global Special" privileges".
*                                                                   @14
*        Test user's authorization to install this SVC              @14
*                                                                   @14
*        -The resource name to be checked will be the value located @14
*         in the Current_profname field constructed by the PARS000  @14
*         routine and will be in one ot the following two formats:  @14
*                                                                   @14
*         SVCUPDTE_nnn  where nnn is a standard SVC #               @14
*                                                                   @14
*          or                                                       @14
*                                                                   @14
*         SVCUPDTE_xxxyyy  where xxx is the ESR SVC # & yyy is the  @14
*                          ESR function code                        @14
*                                                                   @14
*         Examples:                                                 @14
*                                                                   @14
*         SVCUPDTE_109255 for ESR T3/4 SVC (109) with FC=255        @14
*         SVCUPDTE_213    for SVC 213                               @14
*                                                                   @14
*         The SVC# will be right justified & padded on the left     @14
*         with blanks                                               @14
*                                                                   @14
* Issue RACROUTE REQUEST=AUTH to validate existence of an         *
* SVCUPDTE profile and to check the user's authorization.         *
*                                                                 *
* Expected results & their meanings are:                          *
*                                                                 *
*  R15 SAFPRRET SAFPRREA           Meaning                        *
*  === ======== ======== ======================================== *
*  00    --       --     -RACROUTE REQUEST=VERIFY has completed   *
*                         successfully.                           *
*        00       n/a    -Valid RACF userid.                      *
*        04       --     -Verify token information                *
*                 0C     -Indicates TOKNIN was specified, but its *
*                         length was too large.                   *
*                 10     -Indicates a STOKEN was specified, but   *
*                         its length was too large.               *
*  04    --       --     -Requested function could not be         *
*                         completed. No RACF decision.            *
*        00       n/a    -ENVIR=VERIFY was specified without SAF  *
*                         installation exit processing.           *
*        04       n/a    -User profile not defined to RACF.       *
*        20       n/a    -RACF is not active.                     *
*        58       n/a    -RJE or NJE operator FACILITY class      *
*                         profile not found.                      *
*  08    --       --     -Requested function has failed.          *
*        08       n/a    -Password is not authorized.             *
*        0C       n/a    -Password has expired.                   *
*        10       n/a    -New password is invalid.                *
*        14       n/a    -User not defined to group.              *
*        18       n/a    -RACROUTE REQUEST=VERIFY was failed by   *
*                         installation exit routine.              *
*        1C       n/a    -User's access has been revoked.         *
*        24       n/a    -User's access to specified group has    *
*                         been revoked.                           *
*        28       n/a    -OIDCARD parameter is required but not   *
*                         specified.                              *
*        2C       n/a    -OIDCARD parameter is invalid for        *
*                         specified user.                         *
*        30       --     -User is not authorized to the port of   *
*                         entry in the TERMINAL, JESINPUT, or     *
*                         CONSOLE class.                          *
*                 00     -User not authorized to port of entry.   *
*                 04     -User not authorized to access the       *
*                         system on this day, or at this time of  *
*                         day.                                    *
*                 08     -indicates the port of entry may not be  *
*                         used on this day, or at this time of    *
*                         day. Note: The port of entry refers to  *
*                         the TERMINAL class, the JESINPUT class, *
*                         and the CONSOLE class ports of entry.   *
*        34       n/a    -User not authorized to use application. *
*        38       --     -SECLABEL checking failed.               *
*                 04     -MLACTIVE requires a SECLABEL; none was  *
*                         specified.                              *
*                 08     -User not authorized for SECLABEL.       *
*                 0C     -System was in a multilevel secure       *
*                         status, and the dominance check failed. *
*                 10     -Neither the user's nor the submitter's  *
*                         SECLABELs dominate. They are disjoint.  *
*        48       --     -Indicates that an unpriviledged user    *
*                         issued a RACROUTE=VERIFY in a tranquil  *
*                         state (MLQUIET).                        *
*        4C       --     -Nodes checking failed.                  *
*                 00     -Submitter's node is not allowed access  *
*                         to execution node.                      *
*                 04     -NJE failure: UACC of NONE for USERID    *
*                         type of NODES profile.                  *
*                 08     -NJE failure: UACC of NONE for GROUP     *
*                         type of NODES profile.                  *
*                 0C     -NJE failure: UACC of NONE for SECLABEL  *
*                         type of NODES profile.                  *
*                 10     -NJE failure: No local submit node       *
*                         specified.                              *
*                 14     -NJE failure: Reverification of transla- *
*                         ted values failed.                      *
*        50       --     -Surrogate submit attempt failed.        *
*                 04     -SURROGAT class is inactive.             *
*                 08     -Submitter is not permitted by the       *
*                         user's SURROGAT class profile.          *
*                 0C     -Submitter is not authorized to the      *
*                         SECLABEL under which the job is to run. *
*        50       --     -JESJOBS check failed.                   *
*  64    --       --     -CHECK subparameter of the RELEASE       *
*                         keyword was specified on the execute    *
*                         form of the RACROUTE REQUEST=VERIFY     *
*                         macro; however, the list form of the    *
*                         macro does not have the same release    *
*                         parameter. Macro processing terminates. *
*                                                                 *
* Note: I have included the full set of possible R15, RACF return *
*       codes and reason codes in the above table only for docu-  *
*       mentation purposes. The following table shows the expect- *
*       ed combinations for an install request that we'll fail... *
*       all others other than 0/0/0 will be failed.               *
*                                                                 *
*  R15 SAFPRRET SAFPRREA           Meaning                        *
*  === ======== ======== ======================================== *
*  00    00        0a    -User authorized for ATTR=READ           *
*  04    04       n/a    -User profile not defined to RACF.       *
*  08    1C       n/a    -User's access has been revoked.         *
*                                                                 *
<resume>





















*
*         SVCUPDTE macro layout (for generation changes)
*
SVCU_layout DSECT
SVCU_vers DS   XL1                 Version
SVCU_func DS   XL1                 Function code
SVCU_ESRflag DS XL1                ESR flag
SVCU_SVC2MOD DS XL1                SVC to modify
SVCU_SVCEP DS  F                   SVC entry point
SVCU_SVCtype DS XL1                SVC type
* Equates
SVCU_SVCattr DS XL1                SVC attributes
* Equates
SVCU_SVClocks DS XL1               SVC locks
* Equates
SVCU_SVCrc DS   XL1                SVC routing code
SVCU_SVCepname DS CL8              SVC entry point name


<End new code>
.JH0810A ANOP




* The following is for testing only
*        MVC   Current_profname(15),=CL15'SVCUPDTE_109204'
*        MVC   Current_profname(15),=CL15'SVCUPDTE_109117'
*        MVC   SVCNO,=CL3'109'
*        MVC   ESRSVCNO,=CL3'204'
*        MVC   ESRSVCNO,=CL3'117'
*        OI    ATTR_FLAGS,ATTR_ESR     Set flag for testing
* The above is for testing only



*                                                                   @14
*        Test user's authorization to install this SVC              @14
*                                                                   @14
*        -The resource name to be checked will be the value located @14
*         in the Current_profname field constructed by the PARS000  @14
*         routine and will be in one ot the following two formats:  @14
*                                                                   @14
*         SVCUPDTE_nnn  where nnn is a standard SVC #               @14
*                                                                   @14
*          or                                                       @14
*                                                                   @14
*         SVCUPDTE_xxxyyy  where xxx is the ESR SVC # & yyy is the  @14
*                          ESR function code                        @14
*                                                                   @14
*         Examples:                                                 @14
*                                                                   @14
*         SVCUPDTE_109255 for ESR T3/4 SVC (109) with FC=255        @14
*         SVCUPDTE_213    for SVC 213                               @14
*                                                                   @14
*         The SVC# will be right justified & padded on the left     @14
*         with blanks                                               @14
*                                                                   @14
         MVC   ENTITYW3,RESOURCE   Set "SVCUPDTE_" part             @14
         TM    ATTR_FLAGS,ATTR_ESR     Is this an ESR SVC request ? @14
         JNO   ENV010                  ...jif not                   @14
*                                                                   @14
*        This is an ESR SVC request - complete xxxyyy part          @14
*                                                                   @14
         MVC   ENTITYW3+9(3),SVCNO     Install ESRSVC number        @14
         MVC   ENTITYW3+12(3),ESRSVCNO Install function code        @14
         J     ENV020                  Go do check                  @14
*                                                                   @14
*        We are dealing with a standard SVC number (non-ESR)        @14
*                                                                   @14
ENV010   DS    0H                                                   @14
         MVC   ENTITYW3+9(3),SVCNO     Install SVC number           @14
*                                                                   @14
*        Set profile name for CHKINUSE usage & any error WTO        @14
*                                                                   @14
ENV020   DS    0H                                                   @14
         MVC   Current_profname,ENTITYW3 Copy profile name          @14
*                                                                   @14
*        Check for CL(#SNOMISC) SVCUPDTE_xxxyyy AC(READ)            @14
*                                                                   @14
         MVC   SAFRACFL(SAFRACLL),RACPATT Set RACROUTE base pattern @14
         LA    R2,ENTITW3L         Pick up buffer length            @14
         STH   R2,ENTITYW1         Store for RACROUTE call          @14
         XC    ENTITYW2,ENTITYW2   Clear resource name length       @14
         BASR  R10,0               Macro internal addressability    @14
         USING *,R10               """""""""""""""""""""""""""""    @14
         RACROUTE REQUEST=AUTH,                                     @14X
               ENTITYX=ENTITYW1,                                    @14X
               CLASS=FACILITY,                                      @14X
               ATTR=READ,                                           @14X
               WORKA=RACFWORK,                                      @14X
               LOG=NONE,           was ASIS                         @14X
               MSGSUPP=YES,        was NO                           @14X
               RELEASE=1.9.2,                                       @14X
               MF=(E,SAFRACFL)                                      @14
         DROP  R10             Drop internal macro addressability   @14
*                                                                   @14
* Save SAF R15 and RACF return code & reasons code for later use or @14
* diagnostics                                                       @14
*                                                                   @14
         ST    R15,SAFWR15         Save SAF return code             @14
         LA    R8,SAFRACFL     R8 -> RACROUTE Router Parameter list @14
         USING SAFP,R8         RACF Router parameter list address   @14
         L     R14,SAFPRRET        Pick up RACF return code         @14
         ST    R14,SAFWRRET        Save for later                   @14
         L     R14,SAFPRREA        Pick up RACF reason code         @14
         ST    R14,SAFWRREA        Save for later                   @14
         DROP  R8                  Drop SAFP addressability         @14
*                                                                   @14
*        Check RACROUTE return & reason codes                       @14
*                                                                   @14
         L     R15,SAFWR15         Pick up R15 from AUTH call       @14
         LTR   R15,R15             Verify completed successfully ?  @14
         JZ    ENV090              ...jif so, user is authorized    @14
*                                                                   @14
*        Verify that the profile actually existed                   @14
*                                                                   @14
* Expect 4/4 & n/a if no profile or                                 @14
*        8/8/0     if profile but user not authorized               @14
*                                                                   @14
         CLC   SAFWR15,=F'4'       No RACF decision                 @14
         JNE   ENV040              ...jif not, some other reason    @14
         CLC   SAFWRRET,=F'4'      Profile not defined ?            @14
         JNE   ENV040              ...jif not, some other reason    @14
*                                                                   @14
*        Profile does not exist - fail the request with a WTO & set @14
*        return code for caller.                                    @14
*                                                                   @14
         $RWTO MSG009A,WRITE=NO                                     @14
         MVC   MSG009AA,Current_profname Install profile            @14
         $RWTO WTOD,WRITE=YES                                       @14
         LHI   R15,NOPROF          Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     ENVX                  & go return to caller          @14
*                                                                   @14
*        User is not authorized to install this SVC                 @14
*                                                                   @14
ENV040   DS    0H                                                   @14
         $RWTO MSG008A,WRITE=NO    Prime the message area           @14
         MVC   MSG008AB,Current_profname                            @14
         $RWTO WTOD,WRITE=YES      Write the message                @14
         $RWTO MSG008I,WRITE=NO    Prime the message area           @14
* Install SAFRC, RACFRC & RACFRSN in WTO fields                     @14
         LA    R14,SAFWR15         R14 -> source area to convert    @14
         LA    R15,MSG008IA        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         LA    R14,SAFWRRET        R14 -> source area to convert    @14
         LA    R15,MSG008IB        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         LA    R14,SAFWRREA        R14 -> source area to convert    @14
         LA    R15,MSG008IC        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES      Write the message                @14
         LHI   R15,BADAUTH         Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     ENVX                  & go return to caller          @14
*                                                                   @14
*        User is authorized for SVCUPDTE_xxxyyy to be here          @14
*                                                                   @14
ENV090   DS    0H                                                   @14
         OI    MYFLAGS,AUTHUSER    User is authorized               @14
*                                                                   @14
*        Check to see if Current_profname resource is currently in  @14
*        use and if so report the current user of the resource &    @14
*        their ASID (done by 1) and set a return code for           @14
*        the caller. The CHKINUSE routine does the heavy lifting.   @14
*                                                                   @14
         BRASL R14,CHKINUSE        Go see if the resource is in use @14
         TM    Profile_flags,Profile_INUSE Was it in use ?          @14
         JNO   ENV092              ...jif resource is free          @14
*                                                                   @14
*        The SVC slot resource was found to be in use. In this case @14
*        the CHKINUSE routine will have set the following fields    @14
*        for us that we'll use in a WTO message before setting a    @14
*        failing return code and returning to the caller.           @14
*                                                                   @14
*        INUSE_ASID    - ASID of address space using the profile  * @14
*        INUSE_JOBNAME - JOBNAME of address space using the       * @14
*                                                                   @14
         $RWTO MSG908A,WRITE=NO                                     @14
         MVC   MSG908AA,Current_profname                            @14
         MVC   MSG908AB,INUSE_JOBNAME                               @14
         MVC   MSG908AC,INUSE_ASID                                  @14
         $RWTO WTOD,WRITE=YES                                       @14
         LHI   R15,BADENQ          Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     ENVX                  & go exit w/ return code       @14
*
* To be here the user is authorized to install the SVC and the
* backing reource for the requested SVC slot is not currently in
* use. We now will verify that the SVCLIB DD is present. If it is
* not present we'll issue a message indicating that the SVCLIB
* DDname is required.
*
* Check attributes of the SVCLIB allocation                       * @14
*                                                                 * @14
* This routine is responsible for the following:                  * @14
*                                                                 * @14
* 1) Make sure the SVCLIB DDname was provided                     * @14
* 2) Capture SVCLIB data set name & volser from SWA data          * @14
* 3) Make sure SVCLIB data set is on a single disk volume         * @14
* 4) Make sure SVCLIB DDname did not supply a member name         * @14
* 5) Make sure SVCLIB DSORG is PO/POE                             * @14
*                                                                 * @14
*-----------------------------------------------------------------* @14
ENV092   DS    0H                                                   @14
         L     R1,PSATOLD-PSA(0,0) R1 -> current TCB                @14
         L     R1,TCBTIO-TCB(R1)  R1 -> TIOT                        @14
         LA    R1,TIOELNGH-TIOT1(R1)  R1 -> 1st DDname in TIOT      @14
ENV092A  DS    0H                                                   @14
         CLI   0(R1),X'00'         End of TIOT ?                    @14
         JE    ENV092B             ...jif so, SVCLIB DD missing     @14
* Note: We reall need a new message for above                       @14
         CLC   =CL8'SVCLIB',TIOEDDNM-TIOELNGH(R1) SVCLIB DD ?       @14
         JE    ENV092C             ...jif so                        @14
         XR    R2,R2               Clear for insert                 @14
         IC    R2,0(R1)            R2 = TIOELNGH for current entry  @14
         AR    R1,R2               Point to next TIOT DD entry      @14
         J     ENV092A              and go check it out             @14
*                                                                   @14
*        SVCLIB DD not found - issue WTO & go exit                  @14
*                                                                   @14
ENV092B  DS    0H                                                   @14
         $RWTO MSG004A,WRITE=YES   Write message                    @14
         LHI   R1,BADENV3          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     ENVX                  & go exit w/ return code       @14
*                                                                   @14
*        SVCLIB DD was found - get JFCB for SVCLIB DD for tests     @14
*                                                                   @14
*        Note: R1 -> SVCLIB TIOT entry on entry to this label       @14
*                                                                   @14
ENV092C  DS    0H                                                   @14
         LA    R9,EPA              R9 -> EPA                        @14
         ST    R9,SWEPAPTR         Save in EPA pointer field        @14
*                                                                   @14
         USING ZB505,R9            EPA addressability               @14
*                                                                   @14
         XC    SWAEPA,SWAEPA       Initialize the EPA               @14
         MVC   SWVA,TIOEJFCB-TIOELNGH(R1) @JFCB token to EPA        @14
         XC    SWAREQRC,SWAREQRC   Clear return code work area      @14
         SWAREQ FCODE=RL,                                           @14X
               EPA=SWEPAPTR,                                        @14X
               UNAUTH=YES,                                          @14X
               MF=(E,SWAPARMS)                                      @14
         ST    R15,SWAREQRC        Save for debugging               @14
         LTR   R15,R15             Was function successful ?        @14
         JZ    ENV092D             ...jif so, go copy JFCB          @14
*                                                                   @14
*        SWAREQ encountered an error - just issue WTO with R15      @14
*                                                                   @14
*        Note: R15 from SWAREQ service is in SWAREQRC field         @14
*                                                                   @14
         $RWTO MSG048S,WRITE=NO                                     @14
         LA    R1,SWAREQRC         Source for hex conversion        @14
         LA    R15,MSG048SA        Target for hex conversion        @14
         UNPK  0(9,R15),0(5,R1)    Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES      Write the completed message      @14
         LHI   R1,BADSWA           Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     ENVX                  & go exit w/ return code       @14
*                                                                   @14
*        Capture SVCLIB data set name & volume                      @14
*                                                                   @14
ENV092D  DS    0H                                                   @14
         L     R14,SWBLKPTR        R14 -> JFCB                      @14
         MVC   JFCB,0(R14)         Copy JCFB to DWS for debugging   @14
         LA    R1,JFCB             R1 -> copied JFCB (from SWA)     @14
*                                                                   @14
         DROP  R9                  Drop EPA addressability          @14
*                                                                   @14
         USING IEFJFCBN,R1         JFCB addressability              @14
*                                                                   @14
         MVC   DSN,JFCBDSNM        Capture SVCLIB dsn for later     @14
         MVC   VOL,JFCBVOLS        Capture 1st volume               @14
*                                                                   @14
*        Make sure SVCLIB data set exists on a single disk volume   @14
*                                                                   @14
         CLI   JFCBNVOL,X'01'      On single disk volume ?          @14
         JE    ENV092E             ...jif so                        @14
*                                                                   @14
*        SVCLIB library is multi-volume - issue WTO & exit          @14
*                                                                   @14
         $RWTO MSG060E,WRITE=YES   Write the message                @14
         LHI   R1,BADMVOL          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     ENVX                  & go exit w/ return code       @14
*                                                                   @14
*        Make sure SVCLIB member name not specified                 @14
*                                                                   @14
ENV092E  DS    0H                                                   @14
         TM    JFCBELNM,X'FF'-X'40' Member name on SVCLIB ?         @14
         JZ    ENV092EA            ...jif not, continue checks      @14
*                                                                   @14
*        SVCLIB DDname specified a member name - issue WTO & exit   @14
*                                                                   @14
         $RWTO MSG064E,WRITE=YES   Write the message                @14
         LHI   R1,BADMEM1          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     ENVX                  & go exit w/ return code       @14
*                                                                   @14
*        Must open the SVCLIB DDname to get DSORG & RECFM unless    @14
*        we want to perform an OBTAIN                               @14
*                                                                   @14
* Copy input DCB to area below the 16MB line                        @14
*                                                                   @14
ENV092EA DS    0H                                                   @14
         MVC   SVCLIB,INDCB#       Copy model DCB to work area      @14
         MVC   W#OPNDI,X#OPNDI     Install OPEN input execute list  @14
         LA    R11,SVCLIB          R11 -> SVCLIB DCB                @14
         USING IHADCB,R11          Obtain addressability            @14
         OPEN  ((R11),INPUT),MODE=31,MF=(E,W#OPNDI) Open SVCLIB     @14
         TM    DCBOFLGS,DCBOFOPN   Open successful ?                @14
         JO    ENV092F             ...jif OPEN good                 @14
*                                                                   @14
*        OPEN for SVCLIB library failed                             @14
*                                                                   @14
         $RWTO MSG044E,WRITE=YES                                    @14
         LHI   R1,BADOPN1          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     ENVX                Go make like trees               @14
*                                                                   @14
*        Make sure SVCLIB is DSORG=PO/POE                           @14
*                                                                   @14
ENV092F  DS    0H                                                   @14
         TM    DCBDSRG1,DCBDSGPO   DSORG=PO ?                       @14
         JO    ENV092G             ...jif so                        @14
*        TM    JFCDSRG1,JFCORGPO   PO/POU DSORG ?                   @14
*        JO    ENV092G             ...jif so, skip error code       @14
*                                                                   @14
*        DSORG not PO/POE for SVCLIB - issue WTO & exit             @14
*                                                                   @14
         $RWTO MSG052E,WRITE=YES   Write the messge                 @14
         LHI   R1,BADDSORG         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     ENVX                Go make like trees               @14
*                                                                   @14
*        Make sure SVCLIB is RECFM=U                                @14
*                                                                   @14
ENV092G  DS    0H                                                   @14
*        TM    JFCRECFM,JFCUND     RECFM=U ?                        @14
         TM    DCBRECFM,DCBRECU    RECFM=U ?                        @14
*        JO    ENV092H             ...jif so, skip error code       @14
         JO    ENV092I             ...jif so, skip error code       @14
*                                                                   @14
         DROP  R1                  Lose JFCB addressability         @14
*                                                                   @14
*        RECFM not U for SVCLIB - issue WTO & exit                  @14
*                                                                   @14
         $RWTO MSG056E,WRITE=YES   Write the message                @14
         LHI   R1,BADRECFM         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     ENVX                Go make like trees               @14
*                                                                   @14
*        Additional SVCLIB library checks go here                   @14
*                                                                   @14
         AGO   .JH0812A
*
*        Open SVCLIB library for BLDL & LOAD processing
*
* Copy input DCB to area below the 16MB line                        @14
ENV092H  DS    0H                                                   @14
         MVC   SVCLIB,INDCB#       Copy model DCB to work area      @14
         MVC   W#OPNDI,X#OPNDI     Install OPEN input execute list  @14
         LA    R11,SVCLIB          R11 -> SVCLIB DCB                @14
         USING IHADCB,R11          Obtain addressability            @14
         OPEN  ((R11),INPUT),MODE=31,MF=(E,W#OPNDI) Open SVCLIB     @14
         TM    DCBOFLGS,DCBOFOPN   Open successful ?                @14
         JO    ENV092I             ...jif OPEN good                 @14
*                                                                   @14
*        OPEN for SVCLIB library failed                             @14
*                                                                   @14
         $RWTO MSG044E,WRITE=YES                                    @14
         LHI   R1,BADOPN1          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     ENVX                Go make like trees               @14
.JH0812A ANOP
* Update BLDLLIST for module name only                              @14
ENV092I  DS    0H                                                   @14
*        MVC   EPNAME,=CL8'LUA'    <development>
*        MVC   EPNAME,=CL8'CCNGRE' <development>
*        MVC   EPNAME,=CL8'VSMMON' <development> EP & LP differ
         MVC   BLDLLIST,=H'1'      Will get only one member         @14
         MVC   BLDLLL,=H'76'       Set LL to 76 bytes               @14
         MVC   BLNAME,EPNAME       Install SVC module name          @14
*                                                                   @14
         BLDL  (R11),BLDLLIST      Get the directory entry          @14
*                                                                   @14
         LTR   R8,R15              Was BLDL OK ?                    @14
         JZ    ENV092J             ...jif so                        @14
*                                                                   @14
*        BLDL failed for EPNAME module                              @14
*                                                                   @14
         STM   R15,R0,DWD          Save BLDL reaturn/reason codes   @14
         $RWTO MSG016A,WRITE=YES   Write the message                @14
         $RWTO MSG016I,WRITE=NO    Prime the WTO area w/ message    @14
*                                                                   @14
* Format BLDL return & reason codes into message                    @14
*                                                                   @14
* Note: Only low-order bytes need to be formatted (1 in/2 out)      @14
*                                                                   @14
         MVC   MSG016IA,EPNAME     Install EPNAME                   @14
* Format R15 (return code) byte                                     @14
         LA    R14,DWD+3           R14 -> source area to convert    @14
         LA    R15,MSG016IB        R15 -> target display area       @14
         UNPK  0(3,R15),0(2,R14)   unpack into display area         @14
         MVZ   0(2,R15),=XL17'00'  move zone into display area      @14
         TR    0(2,R15),=C'0123456789ABCDEF' translate              @14
         MVI   2(R15),C' '         overlay clobbered byte           @14
* Format R0  (reason code) byte                                     @14
         LA    R14,DWD+7           R14 -> source area to convert    @14
         LA    R15,MSG016IC        R15 -> target display area       @14
         UNPK  0(3,R15),0(2,R14)   unpack into display area         @14
         MVZ   0(2,R15),=XL17'00'  move zone into display area      @14
         TR    0(2,R15),=C'0123456789ABCDEF' translate              @14
         MVI   2(R15),C' '         overlay clobbered byte           @14
*                                                                   @14
*        CLOSE will be done by mainline code on exit in this case   @14
*                                                                   @14
         $RWTO WTOD,WRITE=YES      Write the message                @14
         LHI   R1,BADEPN1          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     ENVX                Go make like trees               @14
*                                                                   @14
*        Verify EPNAME module has the correct attributes            @14
*                                                                   @14
* Note: We must honor AMODE & RMODE for the EPNAME module in the    @14
*       respective SVC table entry                                  @14
*                                                                   @14
* Note: Acceptable modules must be marked EXEC, RENT, REFR, REUS    @14
*       and OVLY=NO                                                 @14
*                                                                   @14
* Note: RMODE=SPLIT information is not available unless either the  @14
*       CSVQUERY service is used or the LOAD macro expansion        @14
*       requested EXTINFO. This may be needed in the future. The    @14
*       only issue with those services (CSVQUERY/CSVINFO) is that   @14
*       the module must have been loaded to request this type of    @14
*       information.                                                @14
*                                                                   @14
ENV092J  DS    0H                                                   @14
         AGO   .JH0812B

 RMODE=SPLIT program object
  SASDTP.IBM.LOAD(CCNGRE)

.JH0812B ANOP
******************************************************************* @14
*                                                                 * @14
* It appears that the only 100% confident way to check for        * @14
* an RMODE=SPLIT module is to actually LOAD it into the private   * @14
* area and then use the CSVINFO service to obtain the information * @14
* needed. This means that we'd have to really perform 2 LOADs for * @14
* the user supplied module since the 1st LOAD would simply be     * @14
* used to obtain some additional information not provided by BLDL * @14
* such as RMODE=SPLIT information and we'd then have to DELETE    * @14
* this copy from the private area followed by a later LOAD with   * @14
* ADRNAPF=YES specified to direct the 2nd LOAD into CSA/ECSA as   * @14
* needed. For now we're going to just not check for RMODE=SPLIT   * @14
* beyond the understanding that a "true" RMODE=SPLIT module...    * @14
* i.e. one where some control sections are loaded below 16MB and  * @14
* some are loaded above 16MB...would be expected to have a        * @14
* BLMODLN value of zeroes.                                        * @14
*                                                                 * @14
* The problem is that if all control sections in the load module  * @14
* have the same RMODE regardless of whether SPLIT was specified   * @14
* then we'll still have a single extent AND the BLMODLN field     * @14
* will reflect the size of the load module or program object.     * @14
* Thus the only 100% confident way to check for RMODE=SPLIT is to * @14
* use the CSVINFO service and check the MODI_SPLIT flag of the    * @14
* CSVMODI macro defined areas.                                    * @14
*                                                                 * @14
* We're just going to check the BLMODLN field in our logic for now* @14
*                                                                 * @14
******************************************************************* @14
*
*        Check module's RMODE
*
*        Note: Only RMODE=24 or RMODE=ANY for main entry point are
*              acceptable
*
         TM    BLARMODE,BLLRMOD    LMOD RMODE=ANY ?
         JO    ENV093              ...jif so, go set 31-bit flag
         NI    FLAGS,X'FF'-F1#ECSA Reset 31-bit ECSA needed flag
         J     ENV093A             Go check AMODE
ENV093   DS    0H
         OI    FLAGS,F1#ECSA       Set 31-bit CSA/ECSA needed flag
*
*      Check module's AMODE (for setting SVC table entry point bit)
*
*      Note: AMODE=64 will be treated as AMODE=31 as far as the SVC
*            table entry updte goes
*
ENV093A  DS    0H
         TM    BLARMODE,BLMAMOD    AMODE=ANY ?
         JO    ENV093B             ...jif so, go set 31-bit flag
         TM    BLARMODE,BLAM31     AMODE=31 ?
         JO    ENV093B             ...jif so, go set 31-bit flag
         TM    BLARMODE,BIT7       AMODE=64 ?
         JO    ENV093B             ...jif so, go set 31-bit flag
         NI    FLAGS,X'FF'-F1#AM31 else reset 31-bit EP flag
         J     ENV093C             ...jif so, default to 24-bit
ENV093B  DS    0H
         OI    FLAGS,F1#AM31       Set 31-bit EP flag
*
*        Check module for RENT
*
ENV093C  DS    0H
         TM    BLMATTR1,BLA1RENT   Module must be RENT
         JO    ENV093D             ...jif RENT
*
*        Issue WTO that LMOD not RENT
*
         $RWTO MSG200A,WRITE=NO    Prime WTO area                   @14
         MVC   MSG200AA,LMOD       Copy LMOD name                   @14
         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14
         LHI   R1,BADNRENT         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     ENVX                Go make like trees               @14
*
*        Check module for REUS
*
ENV093D  DS    0H
         TM    BLMATTR1,BLA1REUS   Module must be REUS
         JO    ENV093E             ...jif REUS
*
*        Issue WTO that LMOD not REUS
*
         $RWTO MSG201A,WRITE=NO    Prime WTO area                   @14
         MVC   MSG201AA,LMOD       Copy LMOD name                   @14
         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14
         LHI   R1,BADNREUS         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     ENVX                Go make like trees               @14
*
*        Check module for REFR
*
ENV093E  DS    0H
         TM    BLMATTR1+1,BLA1REFR Module must be REFR
         JO    ENV093F             ...jif REFR
*
*        Issue WTO that LMOD not REFR
*
         $RWTO MSG202A,WRITE=NO    Prime WTO area                   @14
         MVC   MSG202AA,LMOD       Copy LMOD name                   @14
         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14
         LHI   R1,BADNREFR         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     ENVX                Go make like trees               @14
*
*        Check module for EXEC
*
ENV093F  DS    0H
         TM    BLMATTR1+1,BLA1EXEC Module must be EXEC
         JO    ENV093G             ...jif EXEC
*
*        Issue WTO that LMOD not executable
*
         $RWTO MSG203A,WRITE=NO    Prime WTO area                   @14
         MVC   MSG203AA,LMOD       Copy LMOD name                   @14
         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14
         LHI   R1,BADNEXEC         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     ENVX                Go make like trees               @14
*
*        Check module for OVLY (not supported)
*
ENV093G  DS    0H
*        TM    BLMATTR1+1,BLA1OVLY Module cannot be OVLY            @14
         TM    BLMATTR1,BLA1OVLY   Module cannot be OVLY            @14
         JNO   ENV093H             ...jif not OVLY
*
*        Issue WTO that LMOD cannot be OVLY format
*
         $RWTO MSG204A,WRITE=NO    Prime WTO area                   @14
         MVC   MSG204AA,LMOD       Copy LMOD name                   @14
         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14
         LHI   R1,BADNOVLY         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     ENVX                Go make like trees               @14
*
*        Check module for SCTR (not supported)
*
ENV093H  DS    0H
         TM    BLMATTR1+1,BLA1SCTR Module cannot be SCTR
         JNO   ENV093I             ...jif not OVLY
*
*        Issue WTO that LMOD cannot be SCTR format
*
         $RWTO MSG205A,WRITE=NO    Prime WTO area                   @14
         MVC   MSG205AA,LMOD       Copy LMOD name                   @14
         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14
         LHI   R1,BADNSCTR         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     ENVX                Go make like trees               @14
*
*        Check module for RMODE=SPLIT (not supported)
*
ENV093I  DS    0H
         SLR   R2,R2               Clear size to acquire register   @14
         ICM   R2,B'0111',BLMODLN  Get size of module               @14
         LTR   R2,R2               Was it possibly RMODE=SPLIT      @14
         JNZ   ENV093J             ...jif not likely                @14
*                                                                   @14
*        LMOD was RMODE=SPLIT (not supported)                       @14
*                                                                   @14
         $RWTO MSG206A,WRITE=NO    Prime WTO area                   @14
         MVC   MSG206AA,LMOD       Copy LMOD name                   @14
         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14
         LHI   R1,BADNSPLT         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     ENVX                Go make like trees               @14
*                                                                   @14
*        Check module for TEST (not supported)                      @14
*                                                                   @14
ENV093J  DS    0H                                                   @14
         TM    BLMATTR1,BLA1TEST   TEST/TESTRAN ?                   @14
         JNO   ENV093K             ...jif not TEST
*                                                                   @14
*        LMOD was TEST/TESTRAN (not supported)                      @14
*                                                                   @14
         $RWTO MSG207A,WRITE=NO    Prime WTO area                   @14
         MVC   MSG207AA,LMOD       Copy LMOD name                   @14
         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14
         LHI   R1,BADNTEST         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     ENVX                Go make like trees               @14
*                                                                   @14
*   Verify that module is on 1st library in concatenation sequence  @14
*                                                                   @14
ENV093K  DS    0H                                                   @14
         CLI   BLK,X'00'           1st library in concatenation ?   @14
         JE    ENV093L             ...jif so                        @14
         $RWTO MSG208A,WRITE=NO    Prime WTO area                   @14
         MVC   MSG208AA,LMOD       Copy LMOD name                   @14
         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14
         LHI   R1,BADNCNCT         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     ENVX                Go make like trees               @14
*                                                                   @14
*        Capture module size and entry point offset for reporting,  @14
*        storage acquisition & possible SVC table update.           @14
*                                                                   @14
*        When through:                                              @14
*                                                                   @14
*        MODSIZE will contain size of load module                   @14
*        MODEPOFF will contain entry point offset                   @14
*                                                                   @14
ENV093L  DS    0H                                                   @14
         XR    R2,R2               Clear work register              @14
         ICM   R2,B'0111',BLMODLN  Capture size                     @14
         ST    R2,MODSIZE           and save for later              @14
*                                                                   @14
*   Capture entry point offset for SVC table entry point adjustment @14
*                                                                   @14
         XR    R2,R2               Clear work register              @14
         ICM   R2,B'0111',BLEPADDR Capture entry point offset       @14
         ST    R2,MODEPOFF          and save for later              @14
         J     ENVX               <skip rest for now - development> @14
         AGO   .JH1022A                                             @14





*                                                                   @14
*        Check valid LOCK type combinations for TYPE_SVC            @14
*                                                                   @14
ENV100   DS    0H                                                   @14
         CLI   SVC_TYPE,TYPE1      Type 1 SVC ?                     @14
         JNE   ENV110              ...jif not                       @14
         TM    LOCKS_FLAGS,LOCKS_LOCAL Local lock requested ?       @14
         JNO   ENV200              ...jif not                       @14
* Local lock not valid for type 1 SVC specification                 @14
         $RWTO MSG068E,WRITE=YES   Write the message                @14
         $RWTO MSG900I,WRITE=YES   Write details message            @14
         LHI   R15,BADLOCKS        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     ENVX                  & go return to caller          @14
ENV110   DS    0H                                                   @14
         CLI   SVC_TYPE,TYPE2      Type 2 SVC ?                     @14
         JNE   ENV120              ...jif not                       @14
         J     ENV140              Any lock is possible for type 2  @14
ENV120   DS    0H                                                   @14
         CLI   SVC_TYPE,TYPE3      Type 3 SVC ?                     @14
         JE    ENV122              ...jif not                       @14
         CLI   SVC_TYPE,TYPE4      Type 4 SVC ?                     @14
         JNE   ENV130              ...jif not                       @14
* Type 3/4 SVCs can request only LOCAL or LOCAL & CMS locks         @14
* Type 3/4 SVCs must specify LOCAL if CMS is specified              @14
*<resume> (above needs a little work here)                          @14





ENV122   DS    0H                                                   @14
         TM    SVC_TYPE,X'FF'-LOCKS_LOCAL+LOCKS_CMS LOCAL+CMS locks @14
         JZ    ENV140              ..jif only LOCAL/LOCAL+CMS locks @14
         $RWTO MSG068E,WRITE=YES   Write the message                @14
         $RWTO MSG901I,WRITE=YES   Write details message            @14
         LHI   R15,BADLOCKS        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     ENVX                  & go return to caller          @14
ENV130   DS    0H                                                   @14
         CLI   SVC_TYPE,TYPE6      Type 6 SVC ?                     @14
         JNE   ENV140              ...jif not                       @14
         CLI   LOCKS_FLAGS,X'00'   Any locks requested ?            @14
         JE    ENV140                                               @14
* No locks are valid for type 6 SVC specification                   @14
         $RWTO MSG068E,WRITE=YES   Write the message                @14
         $RWTO MSG902I,WRITE=YES   Write details message            @14
         LHI   R15,BADLOCKS        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     ENVX                  & go return to caller          @14
*                                                                   @14
*        PARSE logic error - invalid SVC_TYPE value                 @14
*                                                                   @14
ENV140   DS    0H                                                   @14
         $RWTO MSG903E,WRITE=YES   Write the message                @14
         ABEND 1001,DUMP           U1001 abend                      @14
*                                                                   @14
*        SVC LOCKS tests passed - check specific LOCKS authority    @14
*                                                                   @14
* Note: This code loops through the LOCK_BRXLE table checking the   @14
*       requesting user's authority to specify the specific locks   @14
*       requested. The loop will not be exited until all the valid  @14
*       type locks have been checked unless no locks at all have    @14
*       been requested.                                             @14
*                                                                   @14
ENV200   DS    0H                                                   @14
         CLI   LOCKS_FLAGS,X'00'   Any LOCKS specified at all ?     @14
         JE    ENV300              ...jif not,                      @14
*                                                                   @14
*        Process the LOCKS authorization table entries              @14
*                                                                   @14
         LARL  R1,LOCK_BRXLE       R1 -> far away table             @14
         LM    R7,R9,0(R1)         Loop control for BRXLE loop      @14
         SLR   R6,R6                                                @14
ENV210   DS    0H                                                   @14
         ICM   R6,B'0001',0(R7)    Put lock value in bits 24-31     @14
         EX    R6,TMLOCK1          Was this lock requested ?        @14
*                                                                   @14
LTORG_AREA LOCTR ,                                                  @14
TMLOCK1  TM    LOCKS_FLAGS,*-*     Test for specific LOCK           @14
SVCUPDTE LOCTR ,                                                    @14
*                                                                   @14
         JNO   ENV290              ...jif not                       @14
*                                                                   @14
*        LOCK entry matched one requested by the user so check      @14
*        the user's authority to use the LOCK requested             @14
*                                                                   @14
         TM    7(R7),SPECIAL           user set this lock ?         @14
         JE    ENV290              ...jif so, go check next lock    @14
         TM    7(R7),AUTHUSER          user set this lock ?         @14
         JE    ENV290              ...jif so, go check next lock    @14
*                                                                   @14
*        User does not have authority to set this lock              @14
*                                                                   @14
* Note: R7 -> LOCK_BRXLE table entry for which the user is not      @14
*             authorized                                            @14
*                                                                   @14
         $RWTO MSG904E,WRITE=NO    Stage the WTO message            @14
         MVC   MSG904EA,1(R7)      Install the LOCK requested       @14
         $RWTO WTOD,WRITE=YES      Write the message                @14
         LHI   R15,AUTHLOCK        Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     ENVX                  & go return to caller          @14
ENV290   BRXLE R7,R8,ENV210        Loop through full table          @14
*                                                                   @14
*        To be here the user can set the keyword requested LOCKS &  @14
*        we now need to check specific SVC type authority           @14
*                                                                   @14
* Note: Only SYSTEMS personnel an install Type 1 or Type 6 SVCs     @14
*                                                                   @14
ENV300   DS    0H                                                   @14










* SVCNO & LMOD are required parameters
* Default is no locks NPRMPT=___,APF=___,AR=___












.JH1022A ANOP                                                       @14
ENVX     DS    0H                                                   @14
         LM    R14,R12,SAVE@L1+12  Restore caller's GPRs            @14
         BR    R14                 Return to caller                 @14
*                                                                   @14
*        AGO   .JH1022B                                             @14
*<resume here when ready>                                           @14

         AGO   .JH1105B                                             @14


*                                                                 * @14
*        Check JCL PARMS before we attempt the SVCLIB OPEN        * @14
*                                                                 * @14
MAIN0110 DS    0H                                                   @14
         L     R4,@INPARMS         Restore @ parameters for PARSE   @14
         L     R15,=A(PARSE)       Parse routine address
         BALR  R14,R15             Go parse parm into function,option
         DC    S(L'SVCNO,SVCNO)    1st operand
         DC    S(L'EPNAME,EPNAME)  2nd operand
         DC    S(L'LOCKS,LOCKS)    3rd operand                      @08
         DC    S(L'ENDOFDAY,ENDOFDAY) 4th operand
         DC    S(L'USERID,USERID)  5th operand                      @05
*EX 0,*                            <Debug only>
*                                                                   @14
*        Verify LOCKS parameter                                     @14
*                                                                   @14
*%FDIR: Need to retrieve SVC entry to check LOCKs for non type 2,   @14
*%FDIR: 3 & 4 SVCs                                                  @14
*                                                                   @14
         CLI   LOCKS,C' '          Any lock ?                       @08
*        JE    LOCK6               ...bif not                    @08@14
         JE    SVCNO2              ...jif not                       @14
         CLC   =C'C000 ',LOCKS     CMS+local ?                      @08
         JE    LOCK4               ...jif so                        @08
         CLC   =C'8000 ',LOCKS     Local lock ?                     @08
*        JNE   PARMERR             ..jif other, abend condition  @08@14
         JE    LOCK2               ...jif so, go set local lock     @14
*                                                                   @14
*        Invalid LOCKS parameter supplied - issue WTO & exit        @14
*                                                                   @14
         $RWTO MSG068E,WRITE=YES   Write the message                @14
         LHI   R1,BADLOCKS         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     EXIT                Go make like trees               @14
LOCK2    DS    0H                                                   @14
         MVI   LOCK#,SVCLL         Set local lock                @08@14
*        J     LOCK6               Skip next instruction         @08@14
         J     EOD10               Skip next instruction         @08@14
LOCK4    MVI   LOCK#,SVCLL+SVCCMS  Set CMS+local                 @08@14
*OCK6    DS    0H                                                @08@14
*                                                                   @14
*        Validate Goodnite time parameter is numeric                @14
*                                                                   @14
EOD10    DS    0H                                                   @14
         CLI   ENDOFDAY,C' '       ENDOFDAY specified ?
*        JE    INIT34              ...bif not                       @14
         JE    SVCNO2              ...jif not                       @14
         UNPK  DWD,=X'0F'          DWD=F0F0F0F0F0F0F0F0
         MVN   DWD(4),ENDOFDAY     Move HHMM
         CLC   DWD(4),ENDOFDAY     hhmm numeric ?
*        JNE   PARMERR             ...bif not, go abend             @14
         JE    EOD20               ...jif so, continue              @14
*                                                                   @14
*        Goodnight time (HHMM) parameter not numeric                @14
*                                                                   @14
         $RWTO MSG076E,WRITE=YES   Write the message                @14
         LHI   R1,BADEOD1          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     EXIT                Go make like trees               @14
*                                                                   @14
*        Validate Goodnite time parameter is in range               @14
*                                                                   @14
EOD20    DS    0H                                                   @14
         MVC   ENDOFDAY,DWD        HHMM -> HHMM0000 (STIMERM)       @14
         PACK  DWD,ENDOFDAY(4)     Make it decimal                  @14
         CVB   R5,DWD              Make it binary                   @14
         ST    R5,Parm_bin_Goodnight Save for later check           @14
         CHI   R5,2359             > maximum allowed ?              @14
         JH    EOD30               ...jif so                        @14
         CHI   R5,1                < minimum allowed ?              @14
         JL    EOD30               ...jif so                        @14
         J     EOD40               ...continue EOD checks           @14
*                                                                   @14
*        Specified Goodnite time out of range                       @14
*                                                                   @14
EOD30    DS    0H                                                   @14
         $RWTO MSG084E,WRITE=YES   Write the message                @14
         LHI   R1,BADEOD2          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     EXIT                Go make like trees               @14
*                                                                   @14
*        Verify Goodnight time > current time (current date)        @14
*                                                                   @14
*        Current time HHMM value in HOURS & MINUTES fields in       @14
*        zoned decimal format.                                      @14
*                                                                   @14
EOD40    DS    0H                                                   @14
         PACK  DWD,HOURS(4)        Pack current time (HHMM)         @14
         CVB   R5,DWD              Make it binary                   @14
         C     R5,Parm_bin_Goodnight Current > Goodnight time ?     @14
         JLE   SVCNO2              ...jif not                       @14
*                                                                   @14
*        Specified Goodnite time earlier than current time          @14
*                                                                   @14
         $RWTO MSG088E,WRITE=YES   Write the message                @14
         LHI   R1,BADEOD3          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     EXIT                Go make like trees               @14
*                                                                   @14
*        Verify SVCNO parameter                                     @14
*                                                                   @14
SVCNO2   DS    0H                                                   @08
         UNPK  DWD,=X'0F'          DWD=F0F0F0F0F0F0F0F0
         MVN   DWD(L'SVCNO),SVCNO  Move nnn portion
         CLC   DWD(L'SVCNO),SVCNO  nnn numeric ?
*        JNE   PARMERR             ...jif not, go abend             @14
         JE    SVCNO4              ...jif so, continue              @14
*                                                                   @14
*        SVC number parameter not numeric - issue WTO & exit        @14
*                                                                   @14
         $RWTO MSG072E,WRITE=YES   Write the message                @14
         LHI   R1,BADSVCNO         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     EXIT                Go make like trees               @14
*                                                                   @14
*        Verify SVC # is in 0-255 range                             @14
*                                                                   @14
SVCNO4   DS    0H                                                   @14
         PACK  DWD,SVCNO           Pack SVC number (NNN)
         CVB   R5,DWD               make it binary
         STC   R5,SVC#               and save SVC# for later
         CHI   R5,255              > 255 ?                          @14
         JH    SVCNO6              ...jif so                        @14
         CHI   R5,0                < 0 ?                            @14
         JL    SVCNO6              ...jif so                        @14
*
*        T1/2/6 ESR slots are off limits
*
         CHI   R5,116              T1-ESR ?                         @14
         JE    SVCNO5              ...jif so (illegal)              @14
         CHI   R5,122              T2-ESR ?                         @14
         JE    SVCNO5              ...jif so (illegal)              @14
         CHI   R5,137              T6-ESR ?                         @14
         JE    SVCNO5              ...jif so (illegal)              @14
         J     SVCNO8              Continue                         @14
*                                                                   @14
*        Indicate ESR T1/T2/T6 SVC entries not supported            @14
*                                                                   @14
SVCNO5   DS    0H                                                   @14
         $RWTO MSG036A,WRITE=YES   Write the message                @14
         LHI   R1,BADESRT          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     EXIT                  & go exit w/ return code       @14
*                                                                   @14
*        SVCNO parameter not in range 0-255 - issue WTO & exit      @14
*                                                                   @14
SVCNO6   DS    0H                                                   @14
         $RWTO MSG080E,WRITE=YES   Write the message                @14
         LHI   R1,BADSVCN2         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     EXIT                Go make like trees               @14
*
*        Retrieve old SVC entry
*
SVCNO8   DS    0H                                                   @14
         L     R3,CVTPTR(0,0)      R3->CVT                          @10
         USING CVTMAP,R3           CVT addressability
         L     R4,CVTABEND         R4->Secondary CVT
         DROP  R3                  Drop CVT
         USING SCVTSECT,R4         SCVT addressability
         SLR   R5,R5               Clear for insert                 @14
         ICM   R5,B'0001',SVC#     Insert SVC number                @14
         SLL   R5,3                Multiply by 8
         AL    R5,SCVTSVCT         Add origin of SVC table
         USING SVCENTRY,R5         SVC entry addressability
         ST    R5,SVCENTRY_PTR     Save entry address
         TM    SVCTP,SVCTP34       Type 3/4 ?                       @14
         JO    SVCNO10             ..jif so                         @14
         TM    SVCTP,SVCTP2        Residual is Type 2. Was it ?     @14
         JO    SVCNO10             ...jif so                        @14
*                                                                   @14
         DROP  R4                  Drop SCVT addressability         @14
*                                                                   @14
*        Existing SVC slot for SVC requested not Type 2/3/4         @14
*                                                                   @14
         $RWTO MSG029A,WRITE=YES   Write the message                @14
         LHI   R1,BADSVCN1         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     EXIT                Go make like trees               @14
*                                                                   @14
*        See if SVC # is ESR SVC for flag setting                   @14
*                                                                   @14
SVCNO10  DS    0H                                                   @14
         MVI   RNAME,C' '          Blank out ENQ RNAME via          @07
         MVC   RNAME+1(L'RNAME-1),RNAME ripple                      @07
         MVC   RNAME(3),SVCNO      Complete SVCNO part of RNAME     @07
*                                                                   @06
*        ESR   PARM='109,IGX00nnn'                                  @06
*                                                                   @06
         CLI   SVC#,109            T3/4 ESR ?                       @06
         JNE   SVCNO14             ...jif not                       @14
*                                                                   @14
*        Enforce ESR T3/4 naming conventions                        @14
*                                                                   @14
         UNPK  DWD,=X'0F'          DWD=F0F0F0F0F0F0F0F0             @06
         MVN   DWD(5),EPNAME+3     Move 00nnn from IGX00nnn         @06
         CLC   DWD(5),EPNAME+3     00nnn numeric ?                  @06
         JE    SVCNO12             ...jif so                        @14
*                                                                   @14
*        ESR T3/4 SVC naming convention violation                   @14
*                                                                   @14
         $RWTO MSG092E,WRITE=YES   Write the message                @14
         LHI   R1,BADSVCN3         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     EXIT                Go make like trees               @14
SVCNO12  DS    0H                                                   @14
         MVC   RNAME+3(3),EPNAME+5 Complete ESR part or RNAME       @07
         PACK  DWD,EPNAME+3(5)     Pack ESR number (NNN)            @06
         CVB   R1,DWD               make it binary                  @06
*        STC   R5,ESR#               and save ESR# for later     @06@12
         STC   R1,ESR#               and save ESR# for later        @12
         SLL   R1,3                Multiply by 8                    @06
         L     R5,SVCEP            R5->ESR table                    @06
         LA    R5,SVCENTRY+8(R1)   R5->ESR entry                    @06
         ST    R5,SVCENTRY_PTR     Save ESR entry address           @06
*                                                                   @06
SVCNO14  DS    0H                                                @06@14
         MVC   OLDENTRY,SVCENTRY   Save old SVC entry contents      @03
*                                                                   @14
         DROP  R5                  Drop SVC entry addressability    @14
*                                                                   @14
*%FDIR: Probably should enforce T1/2 SVC naming conventions here    @14
*                                                                   @14
*        OPEN the SVCLIB library for BLDL and LOAD processing       @14
*                                                                   @14
* Copy input DCB to area below the 16MB line                        @14
         MVC   SVCLIB,INDCB#       Copy model DCB to work area      @14
         MVC   W#OPNDI,X#OPNDI     Install OPEN input execute list  @14
* OPEN the load library containing IGC24CHK                         @14
         LA    R11,SVCLIB          R11 -> SVCLIB DCB                @14
         USING IHADCB,R11          Obtain addressability            @14
* OPEN the load library containing IGX24CHK code                    @14
         OPEN  ((R11),INPUT),MODE=31,MF=(E,W#OPNDI) Open SVCLIB     @14
         TM    DCBOFLGS,DCBOFOPN   Open successful ?                @14
         JO    EPN10               ...jif OPEN good                 @14
*                                                                   @14
*        OPEN for SVCLIB library failed                             @14
*                                                                   @14
         $RWTO MSG044E,WRITE=YES                                    @14
         LHI   R1,BADOPN1          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     EXIT                Go make like trees               @14
* Update BLDLLIST for module name only                              @14
EPN10    DS    0H                                                   @14
         MVC   BLDLLIST,=H'1'      Will get only one member         @14
         MVC   BLDLLL,=H'76'       Set LL to 76 bytes               @14
         MVC   BLNAME,EPNAME       Install SVC module name          @14
*                                                                   @14
         BLDL  (R11),BLDLLIST      Get the directory entry          @14
*                                                                   @14
         LTR   R8,R15              Was BLDL OK ?                    @14
         JZ    EPN20               ...jif so                        @14
*                                                                   @14
*        BLDL failed for EPNAME module                              @14
*                                                                   @14
         STM   R15,R0,DWD          Save BLDL reaturn/reason codes   @14
         $RWTO MSG016A,WRITE=YES   Write the message                @14
         $RWTO MSG016I,WRITE=NO    Prime the WTO area w/ message    @14
*                                                                   @14
* Format BLDL return & reason codes into message                    @14
*                                                                   @14
* Note: Only low-order bytes need to be formatted (1 in/2 out)      @14
*                                                                   @14
         MVC   MSG016IA,EPNAME     Install EPNAME                   @14
* Format R15 (return code) byte                                     @14
         LA    R14,DWD+3           R14 -> source area to convert    @14
         LA    R15,MSG016IB        R15 -> target display area       @14
         UNPK  0(3,R15),0(2,R14)   unpack into display area         @14
         MVZ   0(2,R15),=XL17'00'  move zone into display area      @14
         TR    0(2,R15),=C'0123456789ABCDEF' translate              @14
         MVI   2(R15),C' '         overlay clobbered byte           @14
* Format R0  (reason code) byte                                     @14
         LA    R14,DWD+7           R14 -> source area to convert    @14
         LA    R15,MSG016IC        R15 -> target display area       @14
         UNPK  0(3,R15),0(2,R14)   unpack into display area         @14
         MVZ   0(2,R15),=XL17'00'  move zone into display area      @14
         TR    0(2,R15),=C'0123456789ABCDEF' translate              @14
         MVI   2(R15),C' '         overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES      Write the message                @14
* CLOSE SVCLIB                                                      @14
         OI    W#OPNDI,X'80'       Indicate end of parameter list   @14
         CLOSE ((R11)),            Close SVCLIB library             @14X
               MODE=31,                                             @14X
               MF=(E,W#OPNDI)                                       @14
         LHI   R1,BADEPN1          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     EXIT                Go make like trees               @14
*                                                                   @14
*        Verify EPNAME module has the correct attributes            @14
*                                                                   @14
* Note: We must honor AMODE & RMODE for the EPNAME module in the    @14
*       respective SVC table entry                                  @14
*                                                                   @14
* Note: Acceptable modules must be marked EXEC, RENT, REFR, REUS    @14
*       and OVLY=NO                                                 @14
*                                                                   @14
* Note: RMODE=SPLIT information is not available unless either the  @14
*       CSVQUERY service is used or the LOAD macro expansion        @14
*       requested EXTINFO. This may be needed in the future         @14
*                                                                   @14
EPN20    DS    0H                                                   @14
         TM    BLMATTR1,BLA1EXEC   Executable ?                     @14
         JNO   EPN25               ...jif not                       @14
         TM    BLMATTR1,BLA1RENT   Reentrant ?                      @14
         JNO   EPN25               ...jif not                       @14
         TM    BLMATTR2,BLA1REFR   Refreshable ?                    @14
         JNO   EPN25               ...jif not                       @14
         TM    BLMATTR1,BLA1REUS   Reusable ?                       @14
         JNO   EPN25               ...jif not                       @14
         TM    BLMATTR1,BLA1OVLY   OVLY=YES ?                       @14
         JO    EPN25               ...jif so                        @14
         TM    BLMATTR1,BLA1SCTR   SCTR=YES ?                       @14
         JO    EPN25               ...jif so                        @14
         J     EPN30               Continue checks                  @14
*                                                                   @14
*        EPNAME module does not have correct attributes             @14
*                                                                   @14
EPN25    DS    0H                                                   @14
         $RWTO MSG096A,WRITE=YES   Write the message                @14
         $RWTO MSG096I,WRITE=YES   Write the message                @14


         AGO   .JRH998
         SR    R2,R2               Get size ...
         ICM   R2,B'0111',BLMODLN  ... of module
         MODESET KEY=ZERO          Go to key zero
         GETMAIN RU,LV=(R2),LOC=ANY,SP=228
         LR    R10,R1              Save @(IGX24CHK)
         LOAD  DE=BLNAME,DCB=(R11),ADDR=(R10),SF=(E,LOAD#L)
         MODESET KEY=NZERO         Revert to key 8
* Close the load library
         CLOSE ((R11)),MODE=31,MF=(E,W#OPNDI) Close SVCLIB library
         SPACE 1
         DROP  R11                 Finished with SVCLIB DCB
.JRH998  ANOP


* CLOSE SYSLIB                                                      @14
         OI    W#OPNDI,X'80'       Indicate end of parameter list   @14
         CLOSE ((R11)),            Close SVCLIB library             @14X
               MODE=31,                                             @14X
               MF=(E,W#OPNDI)                                       @14
         LHI   R1,BADEPN2          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     EXIT                Go make like trees               @14
*                                                                   @14
*        Attempt to OS LOAD the EPNAME module                       @14
*                                                                   @14
*        R11 -> SVCLIB DCB                                          @14
*                                                                   @14
EPN30    DS    0H                                                   @14
         LOAD  DE=BLNAME,                                           @14X
               DCB=(R11),                                           @14X
               ERRET=EPN35,        Error routine                    @14X
               SF=(E,LOAD4L)                                        @14
         LR    R3,R0               Preserve R0 from LOAD            @14
         LR    R4,R1               Preserve R1 from LOAD            @14
         LTR   R15,R15             Any LOAD problems ?              @14
         JZ    EPN40               ...jif not, continue checks      @14
*                                                                   @14
*        LOAD ERRET routine                                         @14
*                                                                   @14
* Note: When entered R1 contains the LOAD abend code and R15        @14
*       contains the reason code associated with the abend. Exit    @14
*       from this routine must include logic to close SVCLIB.       @14
*                                                                   @14
EPN35    DS    0H                                                   @14
         ST    R1,DWD              Save R1  (abend code)            @14
         ST    R15,DWD+4           Save R15 (reason code)           @14
         $RWTO MSG100A,WRITE=NO    Install message template         @14
         LA    R1,DWD              Source for hex conversion        @14
         LA    R15,MSG100AA        Target for hex conversion        @14
         UNPK  0(9,R15),0(5,R1)    Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         LA    R1,DWD+4            Source for hex conversion        @14
         LA    R15,MSG100AB        Target for hex conversion        @14
         UNPK  0(9,R15),0(5,R1)    Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES      Write the message                @14
* CLOSE SVCLIB                                                      @14
         OI    W#OPNDI,X'80'       Indicate end of parameter list   @14
         CLOSE ((R11)),            Close SVCLIB library             @14X
               MODE=31,                                             @14X
               MF=(E,W#OPNDI)                                       @14
         LHI   R1,BADEPN3          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     EXIT                Go make like trees               @14
*                                                                   @14
*        CLOSE the SVCLIB library                                   @14
*                                                                   @14
EPN40    DS    0H                                                   @14
         ST    R0,@LOADEP          Save @ of LOAD'd EPNAME          @14
         OI    W#OPNDI,X'80'       Indicate end of parameter list   @14
         CLOSE ((R11)),            Close SVCLIB library             @14X
               MODE=31,                                             @14X
               MF=(E,W#OPNDI)                                       @14
*                                                                   @14
         DROP  R11                 Finished with SYSLIB DCB         @14
*                                                                   @14
*        Check for RMODE=SPLIT for EPNAME module                    @14
*                                                                   @14
         SLR   R2,R2               Clear size to acquire register   @14
         ICM   R2,B'0111',BLMODLN  Get size of module               @14
         LTR   R2,R2               Was it possibly RMODE=SPLIT      @14
         JNZ   EPN50               ...jif not likely                @14
*                                                                   @14
*        EPNAME was RMODE=SPLIT                                     @14
*                                                                   @14
         $RWTO MSG104E,WRITE=YES                                    @14
         LHI   R1,BADEPN4          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     EXIT                Go make like trees               @14
*                                                                   @14
* If the module is a program object with the RMODE(SPLIT)           @14
* attribute the low-order three bytes contain zeros. To obtain the  @14
* length and load point information for each segment, issue the     @14
* CSVQUERY macro with the OUTXTLST parameter.                       @14
*                                                                   @14
EPN50    DS    0H                                                   @14
* Need to return to caller with good return code at this point      @14





*                                                                   @14
*        Insert ESR SVC return code in display format (4 bytes)     @14
*                                                                   @14
         LA    R14,DWD             R14 -> source area to convert    @14
         LA    R15,MSG112SB        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES                                       @14
*                                                                   @14
***********************************************************************
*                                                                     *
*        FUNCTION=INSTALL                                             *
*                                                                     *
*        User is authorized to install the EPNAME module as an SVC  @14
*        so acquire the proper ENQueue to protect us from someone   @14
*        else trying to install the same standard or ESR SVC #.     @14
*                                                                   @14
***********************************************************************
INSTALL  MVC   SVCULIST(MODELS_L),MODELS   MF=L macros
*                                                                   @11
*        ESR   PARM='109,IGX00nnn' ?                             @11@14
*                                                                   @11
INSTALL0 DS    0H                                                   @14
         CLI   SVC#,109            T3/4-ESR                      @11@14
         JNE   INSTALL1            ...jif not                       @11
         MVC   SVCULIST(MODELESR_L),MODELESR  MF=L macro            @11
         MVC   SVCUESR#,ESR#   Place 1-byte ESR# in SVCUPDTE plist  @11
INSTALL1 DS    0H                                                   @11
         MVC   SVCULOCK,LOCK#      Move lock indicators             @08
*        ENQ   (,SVCNO),MF=(E,ENQL) Serialize update                @13
         ENQ   (,RNAME),MF=(E,ENQL) Serialize update                @13
         LTR   R15,R15             ENQ OK ?
         JZ    INSTALL4            ...jif okay                      @14
*                                                                   @14
*        ENQUEUE for SVCUPDTE_nnn or SVCUPDTE_109nnn failed         @14
*                                                                   @14
*        Because of this failure we need to free resources, set     @14
*        our return code and then exit.                             @14
*                                                                   @14
         MODESET KEY=NZERO,MODE=PROB  Return to problem K8 state    @14
         $RWTO MSG012I,WRITE=YES   Write the message                @14
         LHI   R15,BADENQ          Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     EXIT                  & go exit w/ return code       @14
*                                                                   @14
*        We now need to obtain the necessary CSA/ECSA storage for   @14
*        the installation of the SVC. We need to use the RMODE of   @14
*        the EPNAME module to drive the allocation of either <16MB  @14
*        CSA or >16MB ECSA                                          @14
*                                                                   @14
         AGO   .JRH2                                                @14
INSTALL4 LOAD  EPLOC=EPNAME,       Name of SVC routine                 X
               GLOBAL=YES,          Load into SP241                    X
               SF=(E,LOAD4L)
.JRH2    ANOP                                                       @14
INSTALL4 DS    0H                                                   @14
         MODESET KEY=ZERO          We need Key0 for this            @14
         SLR   R2,R2               Clear size to copy register      @14
         ICM   R2,B'0111',BLMODLN  Get size to acquire              @14
         TM    BLARMODE,BLRMANY    RMODE=ANY ?                      @14
         JO    INSTALL5            ...jif so, go get 31-bit CSA     @14
*%FDIR: See BLDLLOA2/T code
* Get 24-bit CSA (SP241 K0)                                         @14
         STORAGE OBTAIN,           Get 24-bit CSA                   @14X
               LENGTH=((R2)),                                       @14X
               LOC=24,                                              @14X
               SP=241,                                              @14X
               KEY=0,                                               @14X
               COND=YES                                             @14
         J     INSTALL6            Go to resume point               @14
INSTALL5 DS    0H                                                   @14
         STORAGE OBTAIN,           Get 31-bit CSA                   @14X
               LENGTH=((R2)),                                       @14X
               LOC=31,                                              @14X
               SP=241,                                              @14X
               KEY=0,                                               @14X
               COND=YES                                             @14
INSTALL6 DS    0H                                                   @14
         LTR   R15,R15             Did we get the CSA/ECSA          @14
         JZ    INSTALL7            ...jif so, go copy module        @14
*                                                                   @14
*        CSA/ECSA request failed                                    @14
*                                                                   @14
         ST    R15,DWD             Save STORAGE return code         @14
         MODESET KEY=NZERO,MODE=PROB  Return to problem K8 state    @14
         $RWTO MSG120A,WRITE=NO    Stage the message template       @14
         LA    R14,DWD             R14 -> source area to convert    @14
         LA    R15,MSG120AA        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES      Write the message                @14



         LHI   R15,BADENQ          Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     EXIT                  & go exit w/ return code       @14
*                                                                   @14
*        Copy EPNAME module in PVT to CSA/ECSA                      @14
*                                                                   @14
INSTALL7 DS    0H                                                   @14
         ST    R1,@CSAEPN          Save @ of obtained CSA/ECSA      @14
         LR    R0,R1               R0 -> copy target area address   @14
         SLR   R1,R1               Clear size to copy register      @14
         ICM   R1,B'0111',BLMODLN  Get size of module               @14
         L     R14,@COPYEPN        R14 = source copy address        @14
         LR    R15,R1              R15 = copy length                @14
         MVCL  R0,R14              Copy EPNAME module to CSA/ECSA   @14
*
*        Sort out "true" entry point address in CSA/ECSA copy
*







         AGO   .JRH1A

Following is from IGXFE:

* SORT OUT THE ENTRY POINT ADDRESS
DOINSTAL EQU   *
         SR    R2,R2                    * GET @(EP) RELATIVE ...
         ICM   R2,B'0111',BLEPADDR      * ... TO START OF MODULE
         AR    R10,R2                   * COMPUTE ABSOLUTE ENTRY POINT
         O     R10,AMODE31              * SET AMODE 31 BIT
* AND INSTALL THE INTERCEPT ADDRESS IN THE ESR TABLE
ESRUPDTE EQU   *
         MODESET KEY=ZERO,MODE=SUP      * KEY ZERO/SUPERVISOR STATE
         ENQ   (SYSZSVC,TABLE,E,L'TABLE,SYSTEM),RET=NONE
         LRA   R2,SVCEP                 * R2 = REAL ADDRESS OF ESRT
         BC    8,DOLURA1                * JUMP IF OK TO PROCEED
         LA    R8,4                     * ELSE ...
         B     INSTDONE                 * ... REJECT UPDATE
DOLURA1  EQU   *
         LURA  R3,R2                    * CHECK REAL ADDRESS ...
         CLC   4(8,R3),IGX00024         * ... POINTS WHERE WE EXPECT
         BE    DOSTURA1                 * JUMP IF OK TO PROCEED
         LA    R8,8                     * ELSE ...
         B     INSTDONE                 * ... REJECT UPDATE
DOSTURA1 EQU   *
         STURA R10,R2                   * UPDATE ESR TABLE ENTRY
         SLR   R8,R8                    * AND SIGNAL UPDATE OK
INSTDONE EQU   *
         DEQ   (SYSZSVC,TABLE,L'TABLE,SYSTEM),RET=NONE
         MODESET KEY=NZERO,MODE=PROB    * KEY 8/PROBLEM STATE
         LTR   R8,R8                    * ESR TABLE UPDATE OK ?
         BNZ   BADUPDTE                 * NOPE
         SR    R9,R9                    * ALL OK, SO SET RC = X
* SUCCESS - TELL US ALL ABOUT IT
         MVC   X24I01I+16(8),BLNAME     * MOVE IN MODULE NAME
         LR    R3,R10                   * COPY NEW ADDRESS
         SLDL  R2,4                     * SHIFT IN A DUMMY SIGN NIBBLE
         STM   R2,R3,TEMP8              * STORE IT AS PSEUDO-PACKED
         UNPK  X24I01I+51(8),TEMP8+3(5) * UNPACK NEW ADDRESS
         NC    X24I01I+51(8),ZONEMASK   * CONVERT ZONES TO ZEROS
         TR    X24I01I+51(8),HEXTAB     * CONVERT TO EBCDIC
         SR    R0,R0                    * CLEAR RX (NO CONSOLE ID)
X24I01I  WTO   'X24I01I aaaaaaaa successfully installed at xxxxxxxx',
               ROUTCDE=2,DESC=3
         B     RETURN
         DROP  R11                      * FINISHED WITH ESR TABLE
.JRH1A   ANOP



























         LR    R6,R0               R6->Entry point
*
         LA    R9,DWD              R9 -> DWS subset                 @14
*        LA    R12,DWD             Inform assembler                 @14
*        SYNCH UPDATE,STATE=SUPV,RESTORE=YES Update SVC table entry @14
         BASR  R10,0               Macro internal addressability    @14
         USING *,R10               """""""""""""""""""""""""""""    @14
         LARL  R15,UPDATE          Resolve UPDATE entry point       @14
         SYNCH (R15),              Update                           @14X
               STATE=SUPV,          SVC table                       @14X
               RESTORE=YES           entry                          @14
         DROP  R10             Drop internal macro addressability   @14
*
         CLI   ENDOFDAY,C' '       Good night time specified ?      @04
         JNE   CHKUSER             ...bif so                        @04
         CLI   USERID,C' '         Userid screening requested ?     @05
         JNE   CHKUSER             ...Jif so                        @05
         AGO   .JH14077A                                            @14
* The following code has been rendered obsolete by the @14 change   @14
* since we use BLDL/LOAD from only the SVCLIB library and therefore @14
* neither LPA nor LLA will be searched for EPNAME. Previously if    @14
* LOADed EPNAME module was determined to be in xLPA we would simply @14
* exit without updating the SVC table. With the @14 change we no    @14
* longer perform GLOBAL=YES LOAD operations so this code is of no   @14
* use.                                                              @14
*                                                                   @01
*        Check if the module just loaded was in LPA.                @01
*        If it was, exit immediately.                               @01
*                                                                   @01
CHECKLPA L     R2,PSATOLD-PSA(0,0) My TCB                        @01@10
         USING TCB,R2                                               @01
         L     R2,TCBLLS           R2->last LLE                     @01
         USING LLE,R2                                               @01
         L     R2,LLECDPT          R2->Corresponding CDE or LPDE    @01
         USING CDENTRY,R2                                           @01
* Note: Following test also handles dynamic LPA case                @09
         TM    CDATTR,CDNIP        LPA module ?                     @01
         JNO   CHKUSER             ...bif not, check for userid     @05
         CLC   EPNAME,CDNAME       Right module ?                   @01
         JNE   CHKUSER             ...bif not, check for userid     @05
         CL    R6,CDENTPT          Right entry point address ?      @01
         JE    EXIT                ...bif so, make like trees       @01
.JH14077A ANOP                                                      @14
*                                                                   @05
******************************************************************* @05
*                                                                 * @05
*        FUNCTION=CHKUSER                                         * @05
*                                                                 * @05
*        Allocate storage in SQA, move the user-ID screening code * @05
*        into it and set its address into the SVC table.          * @05
*                                                                 * @05
******************************************************************* @05
*                                                                   @05
CHKUSER  CLI   USERID,C' '         Userid screening requested ?     @05
         JE    WAIT                ...bif not                       @05
*                                                                   @05
         GETMAIN RU,SP=245,LV=CHKU500L,LOC=ANY SQA space            @05
         ST    R1,SQA_ADDR         Work-area in SQA                 @05
*                                                                   @05
         MODESET EXTKEY=ZERO                                        @05
*        MVC   0(CHKU500L,R1),CHKU500 Move screening code to SQA @05@14
         LARL  R4,CHKU500          Resolve screening model code     @14
         MVC   0(CHKU500L,R1),0(R4)   Move screening code to SQA @05@14
*
         USING CHKU500,R1                                           @05
         ST    R6,CHKU500N         @ new SVC                        @05
         MVC   CHKU500O,OLDENTRY   @ old SVC                        @05
         MVC   CHKU500U,USERID     User-ID                          @05
         MVC   CHKU500#,SVCNO      SVC number                       @05
         DROP  R1                  CHKU500 in SQA                   @05
         LR    R6,R1               SVC screening code               @05
         BSM   R6,0                set AMODE bit                    @05
         MODESET EXTKEY=ZERO                                        @05
*                                                                   @05
*        LA    R12,DWD             R12->work area                @05@14
         LA    R9,DWD              R9 -> DWS portion                @14
*        SYNCH UPDATE,STATE=SUPV,RESTORE=YES Restore old SVC entr@05@14
         BASR  R10,0               Macro internal addressability    @14
         USING *,R10               """""""""""""""""""""""""""""    @14
         LARL  R15,UPDATE          Resolve UPDATE entry point       @14
         SYNCH (R15),              Update                           @14X
               STATE=SUPV,          SVC table entry                 @14X
               RESTORE=YES           entry                          @14
         DROP  R10             Drop internal macro addressability   @14
.JH1105B ANOP                                                       @14
*
***********************************************************************
*                                                                     *
*        FUNCTION=WAIT                                                *
*                                                                     *
*        This routine sets-up a timer for automatic shut-down         *
*        (if user specified a "good-night" time).  It then waits      *
*        on the communication ECB which is posted by a STOP           *
*        command or when the timer interval expires.                  *
*                                                                     *
***********************************************************************
*
WAIT     MODESET EXTKEY=ZERO       Enter Key 0
*
         L     R2,PSAAOLD-PSA(0,0) My ASCB                          @10
         OI    ASCBRCTF-ASCB(R2),ASCBTOFF   Prevent S522
*
         MODESET KEY=NZERO         Return to TCB key
*
         EXTRACT COMMADDR,FIELDS=COMM,MF=(E,EXTRACTL)
         L     R2,COMMADDR         ECB/CIB pointers
*
         CLI   ENDOFDAY,C'0'       Goodnight time specified ?
         JL    SET_RCVY            ...bif not, don't set STIMER
         LARL  R4,GOODNITE         Resolve GOODNITE exit address    @14
*        STIMERM SET,                                               @14
*              ID=TIMER_ID,        token                            @14
*              EXIT=GOODNITE,      Exit routine                     @14
*              LT=ENDOFDAY,        hhmmss                           @14
*              PARM=(R2),          ECB/CIB pointers                 @14
*              MF=(E,STIMER_L)                                      @14
         STIMERM SET,                                                  X
               ID=TIMER_ID,        token                               X
               EXIT=(R4),          Exit routine                     @14X
               LT=ENDOFDAY,        HHMMSSth                         @14X
               PARM=(R2),          ECB/CIB pointers                    X
               MF=(E,STIMER_L)
*                                                                   @03
*ET_RCVY ESTAE CANCEL,CT,                                        @03@14
SET_RCVY DS    0H                                                @03@14
         LARL  R4,CANCEL           Resolve CANCEL exit address      @14
         ESTAE ((R4)),CT,                                        @03@14X
               PARAM=SAVE2,        ESTAE save area                  @03X
               TERM=YES,           Trap CANCEL commands             @03X
               MF=(E,ESTAEL)                                        @03
*
         L     R1,0(,R2)           R1->Comm ECB
         WAIT  1,ECB=(R1),LONG=YES WAIT for a STOP command
*
         ESTAE 0               Do note trap CANCEL command again    @03
*                                                                   @03
******************************************************************* @03
*                                                                 * @03
*        FUNCTION=REMOVE                                          * @03
*                                                                 * @03
*        This routine re-instates the initial SVC entry saved in  * @03
*        the OLDENTRY area, frees up SQA storage and then returns * @03
*                                                                 * @03
******************************************************************* @03
*                                                                   @03
         L     R6,OLDENTRY         R6->old SVC slot entry specifics @03
*        LA    R12,DWD             R12->work area                @03@14
         LA    R9,DWD              R9 -> DWS portion             @03@14
*        SYNCH UPDATE,STATE=SUPV,RESTORE=YES Restore old SVC entr@03@14
         BASR  R10,0               Macro internal addressability    @14
         USING *,R10               """""""""""""""""""""""""""""    @14
         LARL  R15,UPDATE          Resolve UPDATE entry point       @14
         SYNCH (R15),              Restore old                      @14X
               STATE=SUPV,          SVC table                       @14X
               RESTORE=YES           entry                          @14
         DROP  R10             Drop internal macro addressability   @14
         ST    R15,RETCODE         Set return code                  @03
*                                                                   @03
         ICM   R1,B'1111',SQA_ADDR Work-area in SQA                 @05
         JZ    EXIT                ...bif not, make like trees      @05
         FREEMAIN RU,SP=245,A=(R1),LV=CHKU500L SQA space            @05
*
EXIT     DS    0H                                                   @14
         L     R9,RETCODE          Restore return code for caller   @14
         STORAGE RELEASE,                                           @14X
               LENGTH=DWSLEN,                                       @14X
               ADDR=(R13)          Free DSA storage                 @14
         LR    R15,R9              Set return code for caller       @14
         PR                    Return to caller via Linkage Stack   @14
*                                                                   @14
         TITLE 'SYSC000 - Check system level priviledges'           @14
*-----------------------------------------------------------------* @14
*                                                                 * @14
*        Check for system priviledges to bypass some checks       * @14
*                                                                 * @14
* This routine is responsible for setting the following flag(s):  * @14
*                                                                 * @14
* MYFLAGS.SPECIAL if user has global "special" priviledges        * @14
*                                                                 * @14
* Note: A user with RACF "special" priviledges is exempted from   * @14
*       the profile authorization check but the profile for any   * @14
*       SVC slot being targeted must still exist due to the       * @14
*       potential impact on the system by a mistyped SVC or ESR   * @14
*       number.                                                   * @14
*                                                                 * @14
*-----------------------------------------------------------------* @14
SYSC000  DS    0H                                                   @14
         STM   R14,R12,SAVE@L1+12  Save caller's GPRs               @14
*                                                                   @14
*        See if invoking user posseses RACF global "special"        @14
*        privileges                                                 @14
*                                                                   @14
         L     R2,PSATOLD-PSA(0,0) R2 -> our TCB                    @14
         USING TCB,R2                                               @14
         ICM   R2,B'1111',TCBSENV  R2 -> ACEE ?                     @14
         JNZ   SYSC010             ...jif so                        @14
         DROP  R2                                                   @14
         L     R2,PSAAOLD-PSA(0,0) R2 -> our ASCB                   @14
         USING ASCB,R2                                              @14
         L     R2,ASCBASXB         R2 -> our ASXB                   @14
         DROP  R2                                                   @14
         USING ASXB,R2                                              @14
         L     R2,ASXBSENV         R2 -> ACEE in effect             @14
         DROP  R2                                                   @14
*                                                                   @14
*        ACEE found, test global SPECIAL attribute                  @14
*                                                                   @14
SYSC010  DS    0H                                                   @14
         LTR   R2,R2               ACEE present ?                   @14
         JZ    SYSC020             ...jif not (strange condition!)  @14
         USING ACEE,R2                                              @14
         MVI   EUSER,C' '          Set field to blanks              @14
         MVC   EUSER+1(L'EUSER-1),EUSER via ripple                  @14
         SLR   R3,R3               Clear work register              @14
         ICM   R3,B'0001',ACEEUSRL Capture length                   @14
         BCTR  R3,0                Make length EXecutable           @14
         EX    R3,CAPEUSR          Save ACEEUSRI for displays       @14
*                                                                   @14
LTORG_AREA LOCTR ,                                                  @14
CAPEUSR  MVC   EUSER(*-*),ACEEUSRI Copy execution ACEE userid       @14
SVCUPDTE LOCTR ,                                                    @14
*                                                                   @14
         TM    ACEEFLG1,ACEESPEC   RACF "SPECIAL" userid ?          @14
         JNO   SYSC020                                              @14
*                                                                   @14
         DROP  R2                                                   @14
*                                                                   @14
*        Invoking user is RACF global "SPECIAL" userid              @14
*                                                                   @14
         OI    MYFLAGS,SPECIAL     Flag as global "SPECIAL"         @14
*                                                                   @14
*        Issue informational WTO for RACF global "SPECIAL" userid   @14
*                                                                   @14
         $RWTO MSG701I,WRITE=NO                                     @14
         MVC   MSG701IA,EUSER      Install execution ACEE userid    @14
         $RWTO WTOD,WRITE=YES                                       @14
         J     SYSC999              and MLT                         @14
SYSC020  DS    0H                                                   @14
SYSC999  DS    0H                                                   @14
SYSCX    DS    0H                                                   @14
         LM    R14,R12,SAVE@L1+12  Restore caller's GPRs            @14
         BR    R14                 Return to caller                 @14
*                                                                   @14
         AGO   .JH0811B
         TITLE 'Check_SVCLIB - Check SVCLIB allocation items'       @14
*-----------------------------------------------------------------* @14
*                                                                 * @14
* Check attributes of the SVCLIB allocation                       * @14
*                                                                 * @14
* This routine is responsible for the following:                  * @14
* 1) Make sure the SVCLIB DDname was provided                     * @14
* 2) Capture SVCLIB data set name & volser from SWA data          * @14
* 3) Make sure SVCLIB data set is on a single disk volume         * @14
* 4) Make sure SVCLIB DDname did not supply a member name         * @14
* 5) Make sure SVCLIB DSORG is PO/POE                             * @14
*                                                                 * @14
*-----------------------------------------------------------------* @14
Check_SVCLIB DS 0H                                                  @14
         STM   R14,R12,SAVE@L1+12  Save caller's GPRs               @14
*                                                                   @14
*        Make sure SVCLIB was provided                              @14
*                                                                   @14
         L     R1,PSATOLD-PSA(0,0) R1 -> current TCB                @14
         L     R1,TCBTIO-TCB(R1)  R1 -> TIOT                        @14
         LA    R1,TIOELNGH-TIOT1(R1)  R1 -> 1st DDname in TIOT      @14
Check_SVCLIB_010 DS 0H                                              @14
         CLI   0(R1),X'00'         End of TIOT ?                    @14
         JE    Check_SVCLIB_020    ...jif so, SYSLIB DD missing     @14
* Note: We reall need a new message for above                       @14
         CLC   =CL8'SVCLIB',TIOEDDNM-TIOELNGH(R1) SVCLIB DD ?       @14
         JE    Check_SVCLIB_030    ...jif so                        @14
         XR    R2,R2               Clear for insert                 @14
         IC    R2,0(R1)            R2 = TIOELNGH for current entry  @14
         AR    R1,R2               Point to next TIOT DD entry      @14
         J     Check_SVCLIB_010     and go check it out             @14
*                                                                   @14
*        SVCLIB DD not found - issue WTO & go exit                  @14
*                                                                   @14
Check_SVCLIB_020 DS 0H                                              @14
         $RWTO MSG004A,WRITE=YES   Write message                    @14
         LHI   R1,BADENV3          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     Check_SVCLIB_X        & go exit w/ return code       @14
*                                                                   @14
*        SVCLIB DD was found - get JFCB for SVCLIB DD for tests     @14
*                                                                   @14
*        Note: R1 -> SVCLIB TIOT entry on entry to this label       @14
*                                                                   @14
Check_SVCLIB_030 DS 0H                                              @14
         LA    R9,EPA              R9 -> EPA                        @14
         ST    R9,SWEPAPTR         Save in EPA pointer field        @14
*                                                                   @14
         USING ZB505,R9            EPA addressability               @14
*                                                                   @14
         XC    SWAEPA,SWAEPA       Initialize the EPA               @14
         MVC   SWVA,TIOEJFCB-TIOELNGH(R1) @JFCB token to EPA        @14
         XC    SWAREQRC,SWAREQRC   Clear return code work area      @14
         SWAREQ FCODE=RL,                                           @14X
               EPA=SWEPAPTR,                                        @14X
               UNAUTH=YES,                                          @14X
               MF=(E,SWAPARMS)                                      @14
         ST    R15,SWAREQRC        Save for debugging               @14
         LTR   R15,R15             Was function successful ?        @14
         JZ    Check_SVCLIB_040    ...jif so, go copy JFCB          @14
*                                                                   @14
*        SWAREQ encountered an error - just issue WTO with R15      @14
*                                                                   @14
*        Note: R15 from SWAREQ service is in SWAREQRC field         @14
*                                                                   @14
         $RWTO MSG048S,WRITE=NO                                     @14
         LA    R1,SWAREQRC         Source for hex conversion        @14
         LA    R15,MSG048SA        Target for hex conversion        @14
         UNPK  0(9,R15),0(5,R1)    Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES      Write the completed message      @14
         LHI   R1,BADSWA           Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     Check_SVCLIB_X        & go exit w/ return code       @14
*                                                                   @14
*        Capture SVCLIB data set name & volume                      @14
*                                                                   @14
Check_SVCLIB_040 DS 0H                                              @14
         L     R14,SWBLKPTR        R14 -> JFCB                      @14
         MVC   JFCB,0(R14)         Copy JCFB to DWS for debugging   @14
         LA    R1,JFCB             R1 -> copied JFCB (from SWA)     @14
*                                                                   @14
         DROP  R9                  Drop EPA addressability          @14
*                                                                   @14
         USING IEFJFCBN,R1         JFCB addressability              @14
*                                                                   @14
         MVC   DSN,JFCBDSNM        Capture SVCLIB dsn for later     @14
         MVC   VOL,JFCBVOLS        Capture 1st volume               @14
*                                                                   @14
*        Make sure SVCLIB data set exists on a single disk volume   @14
*                                                                   @14
         CLI   JFCBNVOL,X'01'      On single disk volume ?          @14
         JE    Check_SVCLIB_050    ...jif so                        @14
*                                                                   @14
*        SVCLIB library is multi-volume - issue WTO & exit          @14
*                                                                   @14
         $RWTO MSG060E,WRITE=YES   Write the message                @14
         LHI   R1,BADMVOL          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     Check_SVCLIB_X        & go exit w/ return code       @14
*                                                                   @14
*        Make sure SVCLIB member name not specified                 @14
*                                                                   @14
Check_SVCLIB_050 DS 0H                                              @14
         TM    JFCBELNM,X'FF'-X'40' Member name on SVCLIB ?         @14
         JZ    Check_SVCLIB_060    ...jif not, continue checks      @14
*                                                                   @14
*        SVCLIB DDname specified a member name - issue WTO & exit   @14
*                                                                   @14
         $RWTO MSG064E,WRITE=YES   Write the message                @14
         LHI   R1,BADMEM1          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     Check_SVCLIB_X        & go exit w/ return code       @14
*                                                                   @14
*        Make sure SVCLIB is DSORG=PO/POE                           @14
*                                                                   @14
Check_SVCLIB_060 DS 0H                                              @14
         TM    JFCDSRG1,JFCORGPO   PO/POU DSORG ?                   @14
         JO    Check_SVCLIB_070    ...jif so, skip error code       @14
*                                                                   @14
*        DSORG not PO/POE for SVCLIB - issue WTO & exit             @14
*                                                                   @14
         $RWTO MSG052E,WRITE=YES   Write the messge                 @14
         LHI   R1,BADDSORG         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     Check_SVCLIB_X      Go make like trees               @14
*                                                                   @14
*        Make sure SVCLIB is RECFM=U                                @14
*                                                                   @14
Check_SVCLIB_070 DS 0H                                              @14
         TM    JFCRECFM,JFCUND     RECFM=U ?                        @14
         JO    Check_SVCLIB_080    ...jif so, skip error code       @14
*                                                                   @14
         DROP  R1                  Lose JFCB addressability         @14
*                                                                   @14
*        RECFM not U for SVCLIB - issue WTO & exit                  @14
*                                                                   @14
         $RWTO MSG056E,WRITE=YES   Write the message                @14
         LHI   R1,BADRECFM         Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     Check_SVCLIB_X      Go make like trees               @14
*                                                                   @14
*        Additional SVCLIB library checks go here                   @14
*                                                                   @14
Check_SVCLIB_080 DS 0H                                              @14
*                                                                   @14
Check_SVCLIB_X DS 0H                                                @14
         LM    R14,R12,SAVE@L1+12  Restore caller's GPRs            @14
         BR    R14                 Return to caller                 @14
*                                                                   @14
.JH0811B ANOP
         TITLE 'DATETIME - Get date && time for headers'            @14
*-----------------------------------------------------------------* @14
*                                                                 * @14
* DATETIME                                                        * @14
*                                                                 * @14
*        This routine is responsible for capturing the current    * @14
*        date and time for report headers.                        * @14
*                                                                 * @14
*-----------------------------------------------------------------* @14
DATETIME DS    0H                                                   @14
         STM   R14,R12,DATETIMESAVE+12 Save caller's GPRs           @14
         STCK  STCKAREA            Get ""common" time for algorithm @14
*                                                                   @14
*        Send through IBM algorithm circa 1985                      @14
*                                                                   @14
         L     R15,CVTPTR          R15 -> CVT                       @14
         L     R15,CVTEXT2-CVTMAP(,R15) Point at CVT extension      @14
         USING CVTXTNT2,R15                                         @14
         LM    R0,R1,STCKAREA      Load TOD clock value             @14
         AL    R0,CVTLDTO          Add hi-order word                @14
         AL    R1,CVTLDTO+4        Add low-order word               @14
         JC    12,*+8              Carry ? Branch if not            @14
         AL    R0,=F'1'            Add carry                        @14
         SL    R0,CVTLSO           Subtract hi-order word           @14
         SL    R1,CVTLSO+4         Subtract low-order word          @14
         JC    3,*+6               Borrow ? Branch if not           @14
         BCTR  R0,0                Subtract the borrow              @14
         DROP  R15                 CVTXTNT2                         @14
         STM   R0,R1,STCK_Adjusted Save for STCKCONV                @14
*                                                                   @14
*        Format current date and time located in the field named    @14
*        STCK_Adjusted into a 24-character string located in the    @14
*        field named OUTAREA in the following format:               @14
*                                                                   @14
*           hhmmssthmiju0000MMDDYYYY                                @14
*                                                                   @14
*           where (left to right):                                  @14
*                                                                   @14
*            hh - is hours, based on a 24-hour clock                @14
*            mm - is minutes                                        @14
*            ss - is seconds                                        @14
*            t  - is tenths of a second                             @14
*            h  - is hundredths of a second                         @14
*            m  - is milliseconds                                   @14
*            i  - is ten-thousandths of a second                    @14
*            j  - is hundred-thousandths of a second                @14
*            u  - is microseconds                                   @14
*            0000 - is <filler>                                     @14
*            MM - is current month (01-12)                          @14
*            DD - is current day of month                           @14
*            YYYY - is current year                                 @14
*                                                                   @14
         LAM   R1,R1,=F'0'             Assure AR1 is 0              @14
         STCKCONV STCKVAL=STCK_Adjusted,                            @14X
               CONVVAL=OUTAREA,                                     @14X
               TIMETYPE=DEC,                                        @14X
               DATETYPE=MMDDYYYY,                                   @14X
               MF=(E,STCKCONVL)                                     @14
*                                                                   @14
*        Unpack OUTAREA and store into TIMEDATE area the result of  @14
*        the STCKCONV.                                              @14
*                                                                   @14
*        Note: The STCKCONV output is packed decimal *unsigned*,    @14
*              while the UNPK instruction expects a sign. Also note @14
*              that the maximum length operand that UNPK can handle @14
*              is only 15 bytes, just under what would be needed to @14
*              handle the character output area from STCKCONV for   @14
*              time. So, we will unpack OUTAREA a little at a time. @14
*              Fortunately, both the date and time portions of the  @14
*              STCKCONV output are multiples of 4 bytes. So we will @14
*              just loop through the OUTAREA area upacking 4 bytes  @14
*              at a time.                                           @14
*                                                                   @14
*              Packed format: '12 3C'X    ('C' is sign nibble) ==>  @14
*              UNPK output:   'F1 F2 C3'X (sign nibble and last hex @14
*                            digit are swapped in unpacked format!) @14
*                                                                   @14
*              This code "fakes" the sign nibble by unpacking *5*   @14
*              bytes at a time to get *4* bytes of valid unpacked   @14
*              output. The rightmost byte in the unpacked output    @14
*              (containing invalidly wapped digits) is simply       @14
*              discarded for the current unpack operation and       @14
*              picked up in the next unpack operation.              @14
*                                                                   @14
         LA    R3,4                Set loop bump increment, R3=4    @14
         LA    R4,8               Set TIMEDATE bump increment, R4=8 @14
         LA    R5,0                Set up loop counter:             @14
         SR    R5,R3                R5=-4                           @14
         LA    R6,OUTAREA-4        R6 -> source area -4             @14
         LA    R7,UNPKAREA         R7 -> UNPK area                  @14
         LA    R8,TIMEDATE-8       R8 -> target area -8             @14
DATETIME_100 DS 0H                                                  @14
         AR    R5,R3               Bump loop counter by +4          @14
         AR    R6,R3               Bump OUTAREA pointer by +4       @14
         AR    R8,R4               Bump TIMEDATE pointer by +8      @14
         UNPK  0(9,R7),0(5,R6)     UNPK OUTAREA+1 extra byte (sign) @14
         MVC   0(8,R8),0(R7)  Move UNPKAREA to TIMEDATE (drop sign) @14
         C     R5,=F'8'            Finished ?                       @14
         JNE   DATETIME_100        ...jif not, else fall thru done  @14
*                                                                   @14
DATEATIMEX DS  0H                                                   @14
         LM    R14,R12,DATETIMESAVE+12 Restore caller's GPRs        @14
         BR    R14                 Return to caller                 @14
*                                                                   @14
         TITLE 'INIT000 - Initial environmental checks'             @14
*-----------------------------------------------------------------* @14
*                                                                 * @14
* Perform initial environmental checks including the following:   * @14
*                                                                 * @14
* 1) Verify we're APF authorized                                  * @14
* 2) Make sure we're not under TEST/TESTAUTH                      * @14
* 3) ________________                                             * @14
*                                                                 * @14
*                                                                 * @14
*                                                                 * @14
*                                                                 * @14
*                                                                 * @14
* 3) Get local date & time for WTOs and report lines and GOODNITE * @14
*    time range check. Returns hhmmssthmiju0000MMDDYYYY formatted * @14
*    and adjusted time in OUTAREA field.                          * @14
* 4) Check & assign user's internal authority level               * @14
*                                                                 * @14
* Note: This routine is responsible for issuing any pertinent     * @14
*       WTO message(s) & for setting the return code for the      * @14
*       caller in the RETCODE field.                              * @14
*                                                                 * @14
* Note: Always returns to entry R14 address                       * @14
*                                                                 * @14
*-----------------------------------------------------------------* @14
INIT000  DS    0H                                                   @14
         STM   R14,R12,SAVE@L1+12  Save caller's GPRs               @14
*                                                                   @14
*        Initialize some fields                                     @14
*                                                                   @14
         MVI   LMOD,X'40'                                           @14
         MVC   LMOD+1(L'LMOD-1),LMOD                                @14
         MVI   USERID,X'40'                                         @14
         MVC   USERID+1(L'USERID-1),USERID                          @14
*
*        Check for required APF authorization
*
         TESTAUTH FCTN=1           Check APF status
         LTR   R15,R15             APF authorized ?
         JZ    INIT010             ...jif so                        @14
*                                                                   @14
*        Issue WTO indicating APF authorization needed              @14
*                                                                   @14
         $RWTO MSG028A,WRITE=YES                                    @14
         LHI   R1,NOTAPF           Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     INITX                 & go exit w/ return code       @14
*                                                                   @14
*        Make sure we're not under TEST/TESTAUTH                    @14
*                                                                   @14
INIT010  DS    0H                                                   @14
         L     R1,PSATOLD-PSA(0,0) @ TCB                            @14
         ICM   R1,B'0111',TCBTRNB-TCB(R1)  TEST/TESTAUTH ?          @14
         JZ    INIT011             ...jif not under TEST/TESTAUTH   @14
*                                                                   @14
*        Issue WTO indicating TEST/TESTAUTH environment illegal     @14
*                                                                   @14
         $RWTO MSG020A,WRITE=YES                                    @14
         LHI   R1,BADENV2          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     INITX                 & go exit w/ return code       @14
*                                                                   @14
* Prevent execution under TSO or USS environments so program can    @14
* reside in the active LNKLST set                                   @14
*                                                                   @14
INIT011  DS    0H                                                   @14
         L     R2,PSAAOLD-PSA(0,0) R2 -> ASCB address               @14
         USING ASCB,R2             Inform assembler                 @14
         L     R3,PSATOLD-PSA(0,0) Load current TCB address         @14
         USING TCB,R3              Establish addressability         @14
*                                                                   @14
*        Check for TSO address space                                @14
*                                                                   @14
         ICM   R15,B'1111',ASCBTSB Is there a TSB ?                 @14
         JZ    INIT012             ...jif not, continue             @14
*                                                                   @14
*        Issue WTO indicating TSO environment not supported         @14
*                                                                   @14
         $RWTO MSG021A,WRITE=YES                                    @14
         LHI   R1,BADENV2          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     INITX                 & go exit w/ return code       @14
*                                                                   @14
*        Check for forked/spawned address space                     @14
*                                                                   @14
INIT012  DS    0H                                                   @14
         L     R15,ASCBASSB        R15 -> ASSB address              @14
         TM    ASSBWMF1-ASSB(R15),ASSBFSAS Forked/Spawned ?         @14
         JNO   INIT013             ...jif not, continue             @14
*                                                                   @14
*     Issue WTO indicating forked/spawned environment not supported @14
*                                                                   @14
         $RWTO MSG022A,WRITE=YES                                    @14
         LHI   R1,BADENV2          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     INITX                 & go exit w/ return code       @14
*                                                                   @14
*        Make sure we're in batch address space (WLM or JES)        @14
*                                                                   @14
INIT013  DS    0H                                                   @14
         L     R15,ASCBCSCB        R15 -> CSSB address              @14
         TM    CHTRKID-CSCB(R15),CHINITID Initiated ?               @14
         JO    INIT014             ...jif so, continue              @14
*                                                                   @14
*        Issue WTO indicating we're not executing in batch          @14
*                                                                   @14
         $RWTO MSG023A,WRITE=YES                                    @14
         LHI   R1,BADENV2          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     INITX                 & go exit w/ return code       @14
*                                                                   @14
*        Make sure we're executing under the job step TCB           @14
*                                                                   @14
INIT014  DS    0H                                                   @14
         C     R3,TCBJSTCB         Are we the job step TCB ?        @14
         JE    INIT015             ...jif so, continue              @14
*                                                                   @14
*     Issue WTO indicating we're not running under the job step TCB @14
*                                                                   @14
         $RWTO MSG024A,WRITE=YES                                    @14
         LHI   R1,BADENV2          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     INITX                 & go exit w/ return code       @14
*                                                                   @14
*     Make sure we're 1st step in task (cannot be loaded by others) @14
*                                                                   @14
*                                                                   @14
*<wrong> - The following test does not work for an execution in a   @14
*<wrong>   job step other than the 1st in the job.                  @14
*                                                                   @14
INIT015  DS    0H                                                   @14
         AGO   .JH0914A
         L     R4,TCBJSCB          Load JSCB address                @14
         USING IEZJSCB,R4          Inform assembler                 @14
         L     R4,JSCBACT          Load the active JSCB address     @14
         CLI   JSCBSTEP,1         Are we the 1st step in the task ? @14
         JE    INIT016             ...jif so, continue              @14
.JH0914A ANOP
* New code follows:                                                 @14
         L     R15,PSATOLD-PSA(0,0)    Get TCB address              @14
         L     R15,TCBJSCB-TCB(,R15)   Get JSCB address             @14
         L     R15,JSCBACT-IEZJSCB(,R15) Get address of active JSCB @14
         CLC  JSCBPGMN-IEZJSCB(8,R15),=CL8'SVCUPDTE' Job step pgm ? @14
         JE    INIT016                 ...jif so, continue          @14
*                                                                   @14
*     Issue WTO indicating we're not 1st program in job step        @14
*                                                                   @14
         $RWTO MSG025A,WRITE=YES                                    @14
         LHI   R1,BADENV2          Set return code                  @14
         ST    R1,RETCODE           & save it                       @14
         J     INITX                 & go exit w/ return code       @14
*                                                                   @14
*        DROP  R2,R3,R4            Drop ASCB, TCB, JSCB             @14
         DROP  R2,R3               Drop ASCB, TCB                   @14
*                                                                   @14
INIT016  DS    0H                                                   @14
*                                                                   @14
*        Get local time & date for reports                          @14
*                                                                   @14
*        Get ""common" time for algorithm                           @14
*                                                                   @14
INIT020  DS    0H                                                   @14
         STCK  STCKAREA                                             @14
*                                                                   @14
* Send through IBM algorithm circa 1985                             @14
*                                                                   @14
         L     R15,CVTPTR              point at CVT                 @14
         L     R15,CVTEXT2-CVTMAP(,R15) point at CVT extension      @14
         USING CVTXTNT2,R15            Obtain addressdability       @14
         LM    R0,R1,STCKAREA          Load TOD clock value         @14
         AL    R0,CVTLDTO              Add hi-order word            @14
         AL    R1,CVTLDTO+4            Add low-order word           @14
         JC    12,*+8                  Carry ? Branch if not        @14
         AL    R0,=F'1'                Add carry                    @14
         SL    R0,CVTLSO               Subtract hi-order word       @14
         SL    R1,CVTLSO+4             Subtract low-order word      @14
         JC    3,*+6                   Borrow ? Branch if not       @14
         BCTR  R0,0                    Subtract the borrow          @14
         DROP  R15                     CVTXTNT2                     @14
         STM   R0,R1,STCK_Adjusted     Save for STCKCONV            @14
*                                                                   @14
* Format current date and time located in the field named           @14
* STCK_Adjusted into a 24-character string located in the field     @14
* field named OUTAREA in the following format:                      @14
*                                                                   @14
*           hhmmssthmiju0000MMDDYYYY                                @14
*                                                                   @14
*           where (left to right):                                  @14
*                                                                   @14
*            hh - is hours, based on a 24-hour clock                @14
*            mm - is minutes                                        @14
*            ss - is seconds                                        @14
*            t  - is tenths of a second                             @14
*            h  - is hundredths of a second                         @14
*            m  - is milliseconds                                   @14
*            i  - is ten-thousandths of a second                    @14
*            j  - is hundred-thousandths of a second                @14
*            u  - is microseconds                                   @14
*            0000 - is <filler>                                     @14
*            MM - is current month (01-12)                          @14
*            DD - is current day of month                           @14
*            YYYY - is current year                                 @14
*                                                                   @14
* This information will be used in verifying the Goodnight          @14
* invocation parameter if supplied & to generate any possible       @14
* MLWTO announcing the installation of the SVC if all verification  @14
* tests are passed.                                                 @14
*                                                                   @14
         LAM   R1,R1,=F'0'             Assure AR1 is 0              @14
         STCKCONV STCKVAL=STCK_Adjusted,                            @14X
               CONVVAL=OUTAREA,                                     @14X
               TIMETYPE=DEC,                                        @14X
               DATETYPE=MMDDYYYY,                                   @14X
               MF=(E,STCKCONVL)                                     @14
*                                                                   @14
* Unpack OUTAREA and store into TIMEDATE area the result of the     @14
* STCKCONV.                                                         @14
*                                                                   @14
* NOTE: The STCKCONV output is packed decimal *unsigned*, while the @14
*       UNPK instruction expects a sign. Also note that the maximum @14
*       length operand that UNPK can handle is only 15 bytes, just  @14
*       under what would be needed to handle the 16 character       @14
*       output area from STCKCONV for time. So, we will unpack      @14
*       OUTAREA a little at a time. Fortunately, both the date and  @14
*       time portions of the STCKCONV output are multiples of 4     @14
*       bytes. So we will just loop through the OUTAREA area        @14
*       upacking 4 bytes at a time.                                 @14
*                                                                   @14
*        Packed format: '12 3C'X    ('C' is sign nibble) ==>        @14
*        UNPK output:   'F1 F2 C3'X (sign nibble and last hex digit @14
*                                  are swapped in unpacked format!) @14
*                                                                   @14
*       This code "fakes" the sign nibble by unpacking *5* bytes at @14
*       a time to get *4* bytes of valid unpacked output. The       @14
*       rightmost byte in the unpacked output (containing invalidly @14
*       swapped digits) is simply discarded for the current unpack  @14
*       operation and picked up in the next unpack operation.       @14
*                                                                   @14
         LA    R3,4                Set loop bump increment, R3=4    @14
         LA    R4,8               Set TIMEDATE bump increment, R4=8 @14
         LA    R5,0                Set up loop counter:             @14
         SR    R5,R3                R5=-4                           @14
         LA    R6,OUTAREA-4        R6 -> source area -4             @14
         LA    R7,UNPKAREA         R7 -> UNPK area                  @14
         LA    R8,TIMEDATE-8       R8 -> target area -8             @14
INIT030  DS    0H                                                   @14
         AR    R5,R3               Bump loop counter by +4          @14
         AR    R6,R3               Bump OUTAREA pointer by +4       @14
         AR    R8,R4               Bump TIMEDATE pointer by +8      @14
         UNPK  0(9,R7),0(5,R6)     UNPK OUTAREA+1 extra byte (sign) @14
         MVC   0(8,R8),0(R7)  Move UNPKAREA to TIMEDATE (drop sign) @14
         C     R5,=F'8'            Finished ?                       @14
         JNE   INIT030             ...jif not                       @14
*                                                                   @14
*        Check invoking user's internal program authority           @14
*                                                                   @14









INITX    DS    0H                                                   @14
         LM    R14,R12,SAVE@L1+12  Restore caller's GPRs            @14
         BR    R14                 Return to caller                 @14
         DROP
*                                                                   @05
         TITLE 'CHKU500 - SVC userid screening routine'             @14
*-----------------------------------------------------------------* @05
*                                                                 * @05
*        USER-ID SCREENING ROUTINE                                * @05
*                                                                 * @05
*        This code is moved to SQA and executes from there each   * @05
*        time a program issues an SVC instruction for the new SVC.* @05
*        If the user-id of the invoker is equal to the user-id    * @05
*        specified in the parm, then the new SVC is invoked,      * @05
*        otherwise the old code is called.                        * @05
*                                                                 * @05
*-----------------------------------------------------------------* @05
*                                                                   @05
         USING TCB,R4              Inform assembler                 @05
         USING CHKU500,R6          <ditto>                          @05
         USING ASCB,R7             <ditto>                          @05
CHKU500  J     CHKU510             Branch around eye-catcher        @05
         DC    C'SVCUPDTE UTILITY - USER-ID SCREENING',0H'0'        @05
CHKU510  L     R2,PSAAOLD-PSA(0,0)   R2->my ASCB                 @05@10
         L     R2,ASCBASXB-ASCB(,R2) R2->my ASXB       .            @05
         ICM   R2,B'1111',ASXBSENV-ASXB(R2) R2->my ACEE             @05
         JZ    CHKU530             ...bif no ACEE, use old code     @05
         USING ACEE,R2                                              @05
         CLC   ACEEUSRI,CHKU500U   Authorized user ?                @05
         JE    CHKU540             ...bif so, use new code          @05
CHKU530  L     R6,CHKU500O         otherwise R6->old SVC            @05
         BSM   0,R6                and make like trees              @05
CHKU540  L     R6,CHKU500N         R6->new SVC                      @05
         BSM   0,R6                and make like trees              @05
CHKU500O DS    V                   Old SVC entry                    @05
CHKU500N DS    V                   New SVC entry                    @05
CHKU500U DS    CL8                 Authorized userid                @05
CHKU500# DS    C'XXXYYY'           SVC or ESR+SVC                @05@14
CHKU500L EQU   *-CHKU500                                            @05
         DROP  ,                                                    @05
*
         TITLE 'GOODNITE - End-Of-Day routine'                      @14
*---------------------------------------------------------------------*
*                                                                     *
*        END-OF-DAY ROUTINE                                           *
*                                                                     *
*        This routine executes at the end of the timer interval       *
*        when the user specified a "good-night" time in the parm.     *
*        It posts the communication ECB to simulate a STOP command    *
*        and allow the main-line to shutdown.                         *
*                                                                     *
*---------------------------------------------------------------------*
GOODNITE BALR  R10,0               Set local base register
         USING *,R10
         L     R2,4(,R1)           COMM ECB address
*@SNAP ((R1),8),((R2),4)
         MODESET KEY=ZERO          Switch to Key 0
         POST  (R2),0              Simulate STOP command
         SVC   3                   Exit
         DROP  ,                   Drop local addressability
*
         TITLE 'CANCEL - ESTAE exit to trap CANCEL commands'        @14
*-----------------------------------------------------------------* @03
*                                                                 * @03
*        ESTAE EXIT USED TO TRAP CANCEL COMMANDS                  * @03
*                                                                 * @03
* WARNING: This ESTAE exit currently assumes that the SDWA        * @14
*          address is always passed. This should be fixed in a    * @14
*          future enhancement or if it is determined to have      * @14
*          caused a problem before that time.                     * @14
*                                                                 * @14
* This exit expects the following:                                * @14
*                                                                 * @14
* -SVCPLOLD structure contains the SVCUPDTE plist for the         * @14
*  original SVC table entry when we began execution               * @14
*                                                                 * @14
*-----------------------------------------------------------------* @03
CANCEL   SAVE  (14,12),,*          Save caller's registers          @03
         BALR  R11,0               Set local addressability         @03
         USING *,R11               Inform assembler                 @03
         LARL  R12,LTORG_AREA                                       @14
         USING (LTORG_AREA,LTORG_AREA_END),R12                      @14
         LAE   R12,0(R12,0)        Establish LTORG base             @14
         LR    R8,R1               R8->SDWA                         @03
         USING SDWA,R8             Inform assembler                 @03
         LR    R0,R13              R0->caller's save area           @03
         L     R13,SDWAPARM        A(SAVE2)                         @03
         ST    R0,4(,R13)          Chain                            @03
         USING SAVE2,R13           Inform assembler                 @03
*                                                                   @03
* This exit must perform the following functions:                   @14
* 1) Enqueue on the system SVC table to serialize update            @14
* 2) Restore the old SVC entry                                      @14
*                                                                   @14
*                                                                   @14
*        ENQueue on the SVC table                                   @14
*                                                                   @14
CANC410  DS    0H                                                   @14
         MVC   ENQ_TABLE(ESVCTMODL),ESVCTMOD                        @14
         ENQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14
*                                                                   @14
*        Did we get exclusive use of the resource ?                 @14
*                                                                   @14
         ST    R15,DWD             Save ENQ return code/@ of area   @14
         LTR   R15,R15             Did we get the SVC table ?       @14
         JZ    CANC430             ...jif so                        @14
*                                                                   @14
*        Issue WTO regarding failure and then retry                 @14
*                                                                   @14
         ST    R15,DWD            Save ENQ return code              @14
         L     R2,DOMID           Pick up possible previous msgid   @14
         LTR   R2,R2              Any previously issued message ?   @14
         JZ    CANC420            ...jif not                        @14
         L     R1,DOMID           GET PREVIOUS MESSAGE ID NO.       @14
         DOM   MSG=(R1)           DELETE PREVIOUS MESSAGE           @14
CANC420  DS    0H                                                   @14
         $RWTO MSG906I,WRITE=NO                                     @14
         LA    R14,DWD             R14 -> source area to convert    @14
         LA    R15,MSG906IA        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES                                       @14
         ST    R1,DOMID            Save msgid for later deletion    @14
         STIMER WAIT,DINTVL=HOWLONG Wait 5 seconds                  @14
         J     CANC410               and go try again               @14
*                                                                   @14
*        We got the SVC table for this system image so update       @14
*        the SVC slot with the old information but DOM any          @14
*        outstanding WTO message we might have issued               @14
*                                                                   @14
CANC430  DS    0H                                                   @14
         L     R2,DOMID           Pick up possible previous msgid   @14
         LTR   R2,R2              Any previously issued message ?   @14
         JZ    CANC440            ...jif not                        @14
         L     R1,DOMID           GET PREVIOUS MESSAGE ID NO.       @14
         DOM   MSG=(R1)           DELETE PREVIOUS MESSAGE           @14
*                                                                   @14
*        Restore the old SVC entry content                          @14
*                                                                   @14
CANC440  DS    0H                                                   @14
*        WTO   'We got the SVC table during ESTAE processing'       @14
*                                                                   @14
         MODESET KEY=ZERO,MODE=SUP                                  @14
         BASR  R10,0               Macro internal addressability    @14
         USING *,R10               """""""""""""""""""""""""""""    @14
*                                                                   @14
*        Install the new SVC code using the SVCUPLNEW plist         @14
*                                                                   @14
         SVCUPDTE MF=(E,SVCUPLOLD)                                  @14
         DROP  R10             Drop internal macro addressability   @14
         LR    R4,R15              Preserve return code             @14
         ST    R15,DWD             Preserve return code             @14
*                                                                   @14
*        Drop ENQ on SVC table resource (on success or failure)     @14
*                                                                   @14
*        DEQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14
         DEQ   RET=HAVE,                                            @14X
               MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14
*                                                                   @14
*        Check SVCUPDTE REPLACE operation return code               @14
*                                                                   @14
         MODESET KEY=NZERO,MODE=PROB                                @14
         LTR   R4,R4               Was update successful ?          @14
         JZ    CANC450             ...jif successful                @14
*                                                                   @14
*        SVCUPDTE was not successful - issue message and clean up   @14
*        what we can                                                @14
*                                                                   @14
         $RWTO MSG918A,WRITE=YES                                    @14
         $RWTO MSG919A,WRITE=NO                                     @14
         LA    R14,DWD             R14 -> source area to convert    @14
         LA    R15,MSG919AA        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES                                       @14
*                                                                   @14
*        Go free any common areas we allocated anyway and expect    @14
*        abends if this SVC is called                               @14
*                                                                   @14
         LHI   R15,BADSVCUR        Set return code                  @14
         ST    R15,RETCODE          & save it                       @14
*%FDIR: Should set specific return code for this failure            @14
* We must free these areas ourself here                             @14
         J     CANCX_FREE          Go free our common areas         @14
*                                                                   @14
*        Old SVC entry was restored                                 @14
*                                                                   @14
CANC450  DS    0H                                                   @14
         $RWTO MSG200I,WRITE=NO                                     @14
         LA    R14,OLDENTRY        R14 -> source area to convert    @14
         LA    R15,MSG200IA        R15 -> target display area       @14
         UNPK  0(9,R15),0(5,R14)   Unpack                           @14
         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14
         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14
         MVI   8(R15),C' '         Overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES                                       @14
*                                                                   @14
*        Go free any common areas we allocated                      @14
*                                                                   @14
         XR    R15,R15             Set return code                  @14
         ST    R15,RETCODE          & save it                       @14
         J     CANCX_FREE          Go free our common areas         @14


*                                                                   @14
*        Free ESQA storage if allocated before exit                 @14
*                                                                   @14
CANCX_FREE DS  0H                                                   @14
         L     R3,SQA_ADDR         Pick up possible ESQA address
         LTR   R3,R3               Did we obtain any ESQA ?
         JZ    CANCX_FREE_A        ...jif not
         L     R4,=A(CHKU500L)     Get length to free               @14
         MODESET KEY=ZERO,MODE=SUP
*
*        Free obtained ESQA storage
*
         STORAGE RELEASE,          Free                                X
               ADDR=((R3)),         the                                X
               LENGTH=((R4)),        filter area                       X
               SP=245
         XC    SQA_ADDR,SQA_ADDR   Clear pointer                    @14
*                                                                   @14
*        Free and CSA/ECSA area allocated before exit               @14
*                                                                   @14
CANCX_FREE_A DS 0H                                                  @14
         L     R3,@CSAEPN          Get possible CSA/ECSA @ to free  @14
         LTR   R3,R3               Did we obtain any CSA/ECSA ?     @14
         JZ    CANCX_FREE_B        ...jif not
         L     R4,MODSIZE          Get length to free               @14
         MODESET KEY=ZERO,MODE=SUP
*
*        Free obtained CSA/ECSA storage
*
         STORAGE RELEASE,          Free                                X
               ADDR=((R3)),         the                                X
               LENGTH=((R4)),        new SVC code area                 X
               SP=228
         XC    @CSAEPN,@CSAEPN     Clear pointer                    @14
*
*        Return to caller (RTM)
*
CANCX_FREE_B DS 0H                                                  @14
         MODESET KEY=NZERO,MODE=PROB                                @14
CANCX    DS    0H                                                   @14
         L     R13,4(,R13)         Restore entry save area address  @14




         SETRP WKAREA=(R8),REGS=(14,12),RC=00 Set return parameters @03
         DROP  ,                   Lose local addressability        @03
.JH1116B ANOP













         AGO   .JH1116A                                             @14
* Old code follows:                                                 @14
         L     R6,OLDENTRY         R6->old SVC entry address        @03
*        LA    R12,DWD             R12->work area                @03@14
         LA    R9,DWD              R9 -> DWS portion             @03@14
         SYNCH UPDATE,             Update                        @03@14X
               STATE=SUPV,          SVC table                    @03@14X
               RESTORE=YES           entry                       @03@14
*                                                                   @03
         ICM   R1,B'1111',SQA_ADDR R1->work-area in SQA             @05
         JZ    CANCEL99            ...bif not there                 @05
         LA    R0,CHKU500L         R0 = length to free              @14
         FREEMAIN RU,SP=245,A=(R1),LV=((R0)) Free SQA space      @05@14
*                                                                   @03
CANCEL99 L     R13,4(,R13)         Restore entry save area address  @03






         SETRP WKAREA=(R8),REGS=(14,12),RC=00 Set return parameters @03
         DROP  ,                   Lose local addressability        @03
.JH1116A ANOP                                                       @14
*
         TITLE 'UPDATE - update SVC table routine'                  @14
*---------------------------------------------------------------------*
*                                                                     *
*        Update SVC Table Entry                                       *
*                                                                     *
* Note: Expects the following on entry -                              *
*        R6 -> SVC entry point                                        *
*        R9 -> DWS portion addressability                           @14
*                                                                     *
*---------------------------------------------------------------------*
UPDATE   BALR  R11,0               Local addressability
         USING *,R11               Inform assembler
*        USING DWD,R12                                              @14
         USING DWD,R9              DWS portion addressability       @14
         LARL  R12,LTORG_AREA                                       @14
         USING (LTORG_AREA,LTORG_AREA_END),R12                      @14
         LAE   R12,0(R12,0)        Establish LTORG base             @14
*
         ENQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @02
         MODESET EXTKEY=ZERO       Go to Key 0
         L     R5,SVCENTRY_PTR     R5->SVC table entry
         USING SVCENTRY,R5         Inform assembler
*
*        See if R/O nucleus backed by 1MB pages & avoid PGSER if so @11
*                                                                   @11
         L     R2,CVTPTR(0,0)      R2->CVT                          @11
         USING CVTMAP,R2           CVT addressability               @11
         TM    CVTFLAG2,CVTEDAT    Large Page support (R/O nucleus) @11
         JO    UPDATE1             ...jif so, Nucleus is R/O        @11
         DROP  R2                                                   @11
         CLI   SVC#,109            Is this ESR SVC 109 ?            @06
         JE    UPDATE6         ...bif so, skip SVCUPDTE usage       @06
*
UPDATE1  DS    0H                                                   @11
         SLR   R2,R2               Clear work register
         IC    R2,SVC#             Pick up SVC number
         SVCUPDTE (R2),                                                X
               EP=(R6),                                                X
               MF=(E,SVCULIST)
         LR    R3,R15          Set return code from SVCUPDTE service
         J     UPDATE7             Skip over ESR method             @06
*                                                                   @06
UPDATE6  EQU   *                   ESR SVC 109 entry update         @06
         PGSER R,UNPROTECT,A=SVCENTRY,EA=SVCENTRY+1 Unprotect SVC T @06
         ST    R6,SVCEP            Update ESRTABLE                  @06
         SLR   R3,R3               Set RC=0                         @06
         PGSER R,PROTECT,A=SVCENTRY,EA=SVCENTRY+1 Protect SVC entry @06
*                                                                   @06
UPDATE7  EQU   *                                                    @06
         DEQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @02
         LR    R15,R3              Pass return code
         SVC   3                   Goback to SYNCH
*                                                                   @14
         TITLE 'SVCUPDTE -- Report header lines'                    @14
* Following line added by @14 change                                @14
USRHD#1  DC    CL121'1Program: ________ V1R0M0 assembly Date/Time: MM/DX
               D/YYYY at HH:MM '                                    @14
         DC    C'Pagezzzzzzzn'                                      @14
USRHD#1L EQU   *-USRHD#1                                            @14
UHDL1#1  EQU   HDRLINE+10,8        Program name                     @14
UHDL1#2  EQU   HDRLINE+19,6        Program version                  @14
UHDL1#3  EQU   HDRLINE+46,2        Program date (MM)                @14
UHDL1#4  EQU   HDRLINE+49,2        Program date (DD)                @14
UHDL1#5  EQU   HDRLINE+52,4        Program date (YYYY)              @14
UHDL1#6  EQU   HDRLINE+60,2        Program time (HH)                @14
UHDL1#7  EQU   HDRLINE+63,2        Program time (MM)                @14
UHDL1#8  EQU   HDRLINE+125,8       Page Number                      @14
*                                                                   @14
         DS    0H                  <alignment>                      @14
USRHD#2  DC    C' Execution time: HH:MM:SS on 06/24/2014 '          @14
USRHD#2L EQU   *-USRHD#2                                            @14
UHDL2#1  EQU   HDRLINE+17,2        HH                               @14
UHDL2#2  EQU   HDRLINE+20,2        MM                               @14
UHDL2#3  EQU   HDRLINE+23,2        SS                               @14
UHDL2#4  EQU   HDRLINE+29,2        MM                               @14
UHDL2#5  EQU   HDRLINE+32,2        DD                               @14
UHDL2#6  EQU   HDRLINE+35,4        YYYY                             @14
*                                                                   @14
         DS    0H                  <alignment>                      @14
USRHD#3  DC    C' Title: Defined SVC slots && Current Usage Report' @14
USRHD#3L EQU   *-USRHD#3                                            @14
UHDL3#1  EQU   HDRLINE+18,7        Input parameter                  @14
*                                                                   @14
         DS    0H                  <alignment>                      @14
USRHD#4  DC    CL29'0    Profile                '                   @14
         DC    CL17'Installation Data'                              @14
USRHD#4L EQU   *-USRHD#4                                            @14
*                                                                   @14
         DS    0H                  <alignment>                      @14
USRHD#5  DC    CL17'+_______________  '                             @14
         DC    44C'_'                                               @14
USRHD#5L EQU   *-USRHD#5                                            @14
*                                                                   @14







         AGO   .JH0805A


0    Profile                Installation Data
+_______________  __________________________________________________
 12345678_nnnfff
    Profile                Installation Data
___________________________________________________________________
SVCUPDTE_nnnfff  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                 Owner: 12345678
                 Status: SVC slot is not currently in use.
    SVC slot currently in use by job nameENQTESTTin ASID 0x0048.
                  ACLID    ACLACS
                 ________ ________
                 12345678 CONTROL
                 12345678 ALTER
                 12345678 READ
                 12345678 UPDATE
                 12345678 NONE

Double space between entries


Profile            Owner    ACLID    ACLACS
SVCUPDTE_nnnfff  12345678  12345678 12345678

SVCU700D - Profile: SVCUPDTE_109200
SVCU701D - Installation data: JOHN HAMLET
SVCU702D - OWNER: SYS1       UACC: NONE
SVCU704D - Status: SVC slot is not currently in use.
SVCU703D - VINUGE  : ALTER
SVCU703D - SASJRH  : CONTROL


.JH0805A ANOP






*                                                                   @14
         TITLE 'SVCPCL   - PCL for IKJPARS'                         @14

* Syntax is:
* SVC(aaa,bbb),TYPE(n),LOCKS(LOCAL,CMS,SRM,SALLOC,DISP),
* ATTR(NPRMT,APF,AR,ASF),LMOD(xxxxxxxx),GOODNITE(nnnn),USER(xxxxxxxx)
*
SVCCPL   IKJPARM DSECT=DSVCCPL
SVCCPL   CSECT
SVCCPL   AMODE 31
SVCCPL   RMODE ANY
* SVC keyword
MSVCKW   IKJKEYWD
         IKJNAME 'SVC',SUBFLD=SUBMSVC
* TYPE keyword
MTYPKW   IKJKEYWD ,
         IKJNAME 'TYPE',SUBFLD=SUBMTYP
* LOCKS keyword
MLCKKW   IKJKEYWD
         IKJNAME 'LOCKS',SUBFLD=SUBMLCK
* ATTR keyword
MATRKW   IKJKEYWD ,
         IKJNAME 'ATTR',SUBFLD=SUBMATR
* LMOD keyword
MMODKW   IKJKEYWD
         IKJNAME 'LMOD',SUBFLD=SUBMMOD
* GOODNITE keyword
MGDNKW   IKJKEYWD ,
         IKJNAME 'GOODNITE',SUBFLD=SUBMGDN
* USER keyword
MUSRKW   IKJKEYWD
         IKJNAME 'USER',SUBFLD=SUBMUSR
*
* SUBFIELDS
*
* SVC(aaa,bbb)
SUBMSVC  IKJSUBF
MSVC     IKJIDENT 'SVC NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,            X
               MAXLNTH=3
MSVCR    IKJIDENT 'ROUTING NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,        X
               MAXLNTH=3
* TYPE(n)
SUBMTYP  IKJSUBF ,
MTYP     IKJIDENT 'SVC TYPE',UPPERCASE,FIRST=NUMERIC,                  X
               MAXLNTH=1
* LOCKS(LOCAL,CMS,SRM,SALLOC,DISP)
SUBMLCK  IKJSUBF
MLOCAL   IKJKEYWD
         IKJNAME 'LOCAL'
MCMS     IKJKEYWD
         IKJNAME 'CMS'
MSRM     IKJKEYWD
         IKJNAME 'SRM'
MSALLOC  IKJKEYWD
         IKJNAME 'SALLOC'
MDISP    IKJKEYWD
         IKJNAME 'DISP'
* ATTR(NPRMT,APF,AR,ASF)
SUBMATR  IKJSUBF
MNPRMT   IKJKEYWD
         IKJNAME 'NPRMT'
MAPF     IKJKEYWD
         IKJNAME 'APF'
MAR      IKJKEYWD
         IKJNAME 'AR'
MASF     IKJKEYWD
         IKJNAME 'ASF'
* GOODNITE(HHMM)
SUBMGDN  IKJSUBF
*GDN     IKJIDENT 'GOODNITE',UPPERCASE,FIRST=NUMERIC,OTHER=NUMERIC,   X
*              MAXLNTH=4
MGDN     IKJIDENT 'GOODNITE',UPPERCASE,                                X
               MAXLNTH=4,CHAR
* USER(xxxxxxxx)
SUBMUSR  IKJSUBF
*MUSR     IKJPOSIT USERID
MUSR     IKJIDENT 'USER',UPPERCASE,MAXLNTH=8,FIRST=ANY,OTHER=ANY
*
SUBMMOD  IKJSUBF
MMOD     IKJIDENT 'LOAD MODULE',UPPERCASE,FIRST=ALPHA,OTHER=ALPHA,     X
               MAXLNTH=8,CHAR
         IKJENDP
SVCUPDTE CSECT                     <Resume original CSECT>
*                                                                   @14
         TITLE 'TRTPARM1 - translation table for input parameters'  @14
TRTPARM1 DS    0H                  Translate table                  @14
*=================================================================* @14
* The following translate table is purely for validating the      * @14
* input parameter string as having only acceptable characters     * @14
* prior to that parameter string being parsed. Only alphanumeric, * @14
* national (@,#,$), and the special characters ",", ")", "(" and  * @14
* "$" are supported. The table is built for use with TRT where    * @14
* GPR2 will receive the function byte from the table. In this     * @14
* case, any non-zero function byte being returned in GPR2 would   * @14
* represent at least one illegal character was found in the       * @14
* tested area. Legal character positions contain X'00'.           * @14
*=================================================================* @14
*                    0 1 2 3 4 5 6 7 8 9 A B C D E F                @14
         DC    XL16'08080808080808080808080808080808'  00 - 0F      @14
         DC    XL16'08080808080808080808080808080808'  10 - 1F      @14
         DC    XL16'08080808080808080808080808080808'  20 - 2F      @14
         DC    XL16'08080808080808080808080808080808'  30 - 3F      @14
*                                              (                    @14
         DC    XL16'08080808080808080808080808000808'  40 - 4F      @14
*                                          $   )                    @14
         DC    XL16'08080808080808080808080008000808'  50 - 5F      @14
*                                          ,                        @14
         DC    XL16'08080808080808080808080008080808'  60 - 6F      @14
*                                          # @   =                  @14
         DC    XL16'08080808080808080808080000080008'  70 - 7F      @14
*                      a b c d e f g h i                            @14
         DC    XL16'08000000000000000000080808080808'  80 - 8F      @14
*                      j k l m n o p q r                            @14
         DC    XL16'08000000000000000000080808080808'  90 - 9F      @14
*                        s t u v w x y z                            @14
         DC    XL16'08080000000000000000080808080808'  A0 - AF      @14
         DC    XL16'08080808080808080808080808080808'  B0 - BF      @14
*                      A B C D E F G H I                            @14
         DC    XL16'08000000000000000000080808080808'  C0 - CF      @14
*                      J K L M N O P Q R                            @14
         DC    XL16'08000000000000000000080808080808'  D0 - DF      @14
*                        S T U V W X Y Z                            @14
         DC    XL16'08080000000000000000080808080808'  E0 - EF      @14
*                    0 1 2 3 4 5 6 7 8 9                            @14
         DC    XL16'00000000000000000000080808080808'  F0 - FF      @14
*                                                                   @14
         TITLE 'TRTPARM2 - translation table for comma only'        @14
TRTPARM2 DS    0H                  Translate table                  @14
*=================================================================* @14
* The following translate table is purely for locating commas in  * @14
* an input string. The table is built for use with TRT where GPR2 * @14
* will receive the function byte from the table. In this case,    * @14
* any non-zero function byte being returned in GPR2 would         * @14
* represent at least one illegal character was found in the       * @14
* tested area. Legal character positions contain X'00'.           * @14
*=================================================================* @14
*                    0 1 2 3 4 5 6 7 8 9 A B C D E F                @14
         DC    XL16'00000000000000000000000000000000'  00 - 0F      @14
         DC    XL16'00000000000000000000000000000000'  10 - 1F      @14
         DC    XL16'00000000000000000000000000000000'  20 - 2F      @14
         DC    XL16'00000000000000000000000000000000'  30 - 3F      @14
         DC    XL16'00000000000000000000000000000000'  40 - 4F      @14
         DC    XL16'00000000000000000000000000000000'  50 - 5F      @14
*                                          ,                        @14
         DC    XL16'00000000000000000000000400000000'  60 - 6F      @14
         DC    XL16'00000000000000000000000000000000'  70 - 7F      @14
         DC    XL16'00000000000000000000000000000000'  80 - 8F      @14
         DC    XL16'00000000000000000000000000000000'  90 - 9F      @14
         DC    XL16'00000000000000000000000000000000'  A0 - AF      @14
         DC    XL16'00000000000000000000000000000000'  B0 - BF      @14
         DC    XL16'00000000000000000000000000000000'  C0 - CF      @14
         DC    XL16'00000000000000000000000000000000'  D0 - DF      @14
         DC    XL16'00000000000000000000000000000000'  E0 - EF      @14
         DC    XL16'00000000000000000000000000000000'  F0 - FF      @14
*                                                                   @14
         TITLE 'HEXUPPER - translation table for input parameters'  @14
HEXUPPER DS    0H                                                   @14
*=================================================================* @14
* The following translate table is purely for upper casing the    * @14
* input parameter string which may contain alphanumeric or        * @14
* national ($,@,@) characters in the LMOD field for a Type 1 SVC  * @14
* along with the assignment ("=" sign) character and the comma    * @14
* field separator character. Blanks are not allowed at this time. * @14
* allowed at this time.                                           * @14
*=================================================================* @14
*                    0 1 2 3 4 5 6 7 8 9 A B C D E F                @14
         DC    XL16'00000000000000000000000000000000'  00 - 0F      @14
         DC    XL16'00000000000000000000000000000000'  10 - 1F      @14
         DC    XL16'00000000000000000000000000000000'  20 - 2F      @14
         DC    XL16'00000000000000000000000000000000'  30 - 3F      @14
*                                              (                    @14
         DC    XL16'000000000000000000000000004D0000'  40 - 4F      @14
*                                          $   )                    @14
         DC    XL16'00000000000000000000005B005D0000'  50 - 5F      @14
*                                          ,                        @14
         DC    XL16'00000000000000000000006B00000000'  60 - 6F      @14
*                                          # @   =                  @14
         DC    XL16'00000000000000000000007B7C007E00'  70 - 7F      @14
*                      a b c d e f g h i                            @14
         DC    XL16'00C1C2C3C4C5C6C7C8C9000000000000'  80 - 8F      @14
*                      j k l m n o p q r                            @14
         DC    XL16'00D1D2D3D4D5D6D7D8D9000000000000'  90 - 9F      @14
*                        s t u v w x y z                            @14
         DC    XL16'0000E2E3E4E5E6E7E8E9000000000000'  A0 - AF      @14
         DC    XL16'00000000000000000000000000000000'  B0 - BF      @14
*                      A B C D E F G H I                            @14
         DC    XL16'00C1C2C3C4C5C6C7C8C9000000000000'  C0 - CF      @14
*                      J K L M N O P Q R                            @14
         DC    XL16'00D1D2D3D4D5D6D7D8D9000000000000'  D0 - DF      @14
*                        S T U V W X Y Z                            @14
         DC    XL16'0000E2E3E4E5E6E7E8E9000000000000'  E0 - EF      @14
*                    0 1 2 3 4 5 6 7 8 9                            @14
         DC    XL16'F0F1F2F3F4F5F6F7F8F9000000000000'  F0 - FF      @14
*                                                                   @14
*                                                                   @14
         TITLE 'DELIMTAB - translation table for parm delimiters'   @14
DELIMTAB DS    0H                  Translate table                  @14
*=====================================================================*
* The following translate table is purely for identifying delimiters  *
* in the input parameter string. The only valid function byte in the  *
* table at this time is at X'6B', the EBCDIC comma location, and it's *
* value has been set to X'04' so that this value can be used as a     *
* displacement offest from a branch table origin by the caller.       *
*                                                                     *
* Additional delimiters can be added to the table if desired and they *
* should be documented here if such action is performed. All users of *
* this table will be impacted in some form or fashion by additions to *
* this table.                                                         *
*                                                                     *
* position value Comment                                              *
*   6B      04   Comma                                                *
*   7E      08   Equal                                                *
*   4D      0C   Left parenthesis                                     *
*   5D      10   Right parenthesis                                    *
*                                                                     *
*=====================================================================*
*                    0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    XL16'00000000000000000000000000000000'  00 - 0F
         DC    XL16'00000000000000000000000000000000'  10 - 1F
         DC    XL16'00000000000000000000000000000000'  20 - 2F
         DC    XL16'00000000000000000000000000000000'  30 - 3F
*                                              (
         DC    XL16'000000000000000000000000000C0000'  40 - 4F
*                                              )
         DC    XL16'00000000000000000000000000100000'  50 - 5F
*                                          ,
         DC    XL16'00000000000000000000000400000000'  60 - 6F
*                                                =
         DC    XL16'00000000000000000000000000000800'  70 - 7F
         DC    XL16'00000000000000000000000000000000'  80 - 8F
         DC    XL16'00000000000000000000000000000000'  90 - 9F
         DC    XL16'00000000000000000000000000000000'  A0 - AF
         DC    XL16'00000000000000000000000000000000'  B0 - BF
         DC    XL16'00000000000000000000000000000000'  C0 - CF
         DC    XL16'00000000000000000000000000000000'  D0 - DF
         DC    XL16'00000000000000000000000000000000'  E0 - EF
         DC    XL16'00000000000000000000000000000000'  F0 - FF
*
*
         TITLE 'Internal BRXLE && other tables && constants'        @14
*-----------------------------------------------------------------* @14
*                                                                 * @14
*        Valid LOCKS subparameters & authorization required       * @14
*                                                                 * @14
*        Note: The following is the layout of each entry in the   * @14
*              table:                                             * @14
*                                                                 * @14
*              Offset Length   Meaning/Purpose                    * @14
*              ====== ====== ==================================== * @14
*               +00     1    IHASVC SVCLOCKS equate for LOCK      * @14
*               +01     6    LOCK type keyword                    * @14
*               +07     1    Authority required to set this lock  * @14
*                                                                 * @14
*-----------------------------------------------------------------* @14
         PUSH  PRINT                                                @14
         PRINT DATA,GEN                                             @14
LOCK_BRXLE DC  A(LOCK_START,LOCK_entry_len,LOCK_END-LOCK_entry_len) @14
*                                                                   @14
LOCK_START DS  0H                                                   @14
         DC    AL1(SVCLL),C'LOCAL ',AL1(AUTHUSER)                   @14
LOCK_entry_len EQU *-LOCK_START    Generate length of table entry   @14
         DC    AL1(SVCDISP),C'DISP  ',AL1(SPECIAL)                  @14
         DC    AL1(SVCOPT),C'SRM   ',AL1(SPECIAL)                   @14
         DC    AL1(SVCCMS),C'CMS   ',AL1(AUTHUSER)                  @14
         DC    AL1(SVCALLOC),C'SALLOC',AL1(SPECIAL)                 @14
LOCK_END EQU   *                   End of LOCKS table               @14
         POP   PRINT                                                @14
*                                                                   @14
*        RIBs workarea size to acquire                              @14
*                                                                   @14
RIBSPACE DC    F'1024'         Size of GQSCAN wirkarea to acquire   @14
*                                                                   @14
*-----------------------------------------------------------------* @14
*                                                                 * @14
*        SVC type authorization requirements                      * @14
*                                                                 * @14
*-----------------------------------------------------------------* @14
SVC_BRXLE DC   A(SVC_START,SVC_entry_len,SVC_END-SVC_entry_len)     @14
*                                                                   @14
SVC_START DS   0H                                                   @14
         DC    C'1',AL1(AUTHUSER)                                   @14
SVC_entry_len EQU *-SVC_START      Generate length of table entry   @14
         DC    C'2',AL1(AUTHUSER)                                   @14
         DC    C'3',AL1(AUTHUSER)                                   @14
         DC    C'4',AL1(AUTHUSER)                                   @14
         DC    C'6',AL1(AUTHUSER)                                   @14
SVC_END  EQU   *                                                    @14
*                                                                   @14
BLANKS   DC    X'40'               Blank padding byte (MVCLs)       @14
*                                                                   @14
TYPE1    EQU   C'1'                TYpe 1 SVC                       @14
TYPE2    EQU   C'2'                TYpe 2 SVC                       @14
TYPE3    EQU   C'3'                TYpe 3 SVC                       @14
TYPE4    EQU   C'4'                TYpe 4 SVC                       @14
TYPE6    EQU   C'6'                TYpe 6 SVC                       @14
*                                                                   @14
*        SVC type w/ SVCTP (IHASVC) & SVCUPDTE macro equates        @14
*                                                                   @14
*        Layout is as follows:                                      @14
*                                                                   @14
*        +0 - Zoned decimal SVC type (1, 2, 3, 4, or 6)             @14
*        +1 - SVCUPDTE macro expansion equate (offset +08)          @14
*        +2 - IHASVC SVCTP field equate                             @14
*                                                                   @14
* Following line added by @14 change                                @14
SVC_types_BRXLE DC A(SVC_types_START,TYPES_entry_len,TYPES_end-TYPES_enX
               try_len)                                             @14
*                                                                   @14
SVC_types_START DS 0H
         DC    C'1',X'01',X'00'    Type 1 SVC equates
TYPES_entry_len EQU *-SVC_types_START                               @14
         DC    C'2',X'02',X'80'    Type 2 SVC equates
         DC    C'3',X'03',X'C0'    Type 3 or 4 SVC equates
         DC    C'4',X'04',X'C0'    Type 3 or 4 SVC equates
         DC    C'6',X'06',X'20'    Type 6 SVC equates
TYPES_end EQU  *-SVC_types_START                                    @14
*                                                                   @14
*        Multi-line WTO audit text                                  @14
*                                                                   @14
MLWTOPREFIX DS 0H                                                   @14
CNTLLINE DC    Y(34),CL34'SVCU000I SVC install audit report'        @14
* Following lines thru DATALINE8 added by @14 change                @14
*                         000000000111111111122222222223333333333444444
*                         123456789012345678901234567890123456789012345
*              4444555555555566666666667
*              6789012345678901234567890
STARLINE DC    Y(70),CL70'SVCU001I ************************************X
               *************************'                           @14
DATALINE2  DC  Y(70),CL70'SVCU002I * Installing userid=_        LMOD=_ X
                      SIZE: _          *'                           @14
DATALINE2_userid EQU DATALINE2+2+29,8  requesting uid               @14
DATALINE2_LMOD   EQU DATALINE2+2+43,8  LMOD                         @14
DATALINE2_SIZE   EQU DATALINE2+2+58,8  SIZE                         @14
*                                                                   @14
DATALINE3  DC  Y(70),CL70'SVCU003I * Entry_point: _        Load_point: X
               _                       *'                           @14
DATALINE3_EP     EQU DATALINE3+2+24,8  Entry Point                  @14
DATALINE3_LP     EQU DATALINE3+2+45,8  Load Point                   @14
*                                                                   @14
DATALINE4  DC  Y(70),CL70'SVCU004I * AMODE=_  RMODE=_   Old SVC entry pX
               oint: _                 *'                           @14
DATALINE4_AMODE  EQU DATALINE4+2+17,2  AMODE (31|24|ANY)            @14
DATALINE4_RMODE  EQU DATALINE4+2+26,3  RMODE (31|24|ANY)            @14
DATALINE4_OLDEP  EQU DATALINE4+2+51,8  Old SVC EP                   @14
*                                                                   @14
DATALINE5  DC  Y(70),CL70'SVCU005I * DSN=_                             X
                              / _      *'                           @14
DATALINE5_SVCLIB EQU DATALINE5+2+15,44 SVCLIB data set              @14
DATALINE5_VOLSER EQU DATALINE5+2+62,6  VOLSER for SVCLIB            @14
*                                                                   @14
DATALINE6  DC  Y(70),CL70'SVCU006I * Address of ESQA resident USER filtX
               er code is _            *'                           @14
DATALINE6_ESQA@ EQU DATALINE6+2+56,8 ESQA @ of filter code or "n/a" @14
*                                                                   @14
DATALINE7  DC  Y(70),CL70'SVCU007I * PARM: _                           X
                                       *'                           @14
DATALINE7_PARM EQU DATALINE7+2+17,51 1st 51 bytes of PARM field     @14
*                                                                   @14
DATALINE8  DC  Y(70),CL70'SVCU009I *                                   X
                                       *'                           @14
DATALINE8_PARM EQU DATALINE8+2+11,49 2nd 49 bytes of PARM field     @14
*                                                                   @14
STARLINE2 DC   Y(70),CL70'SVCU001I ************************************X
               *************************'                           @14
*                                                                   @14
MLWTOSUFFIX DS 0H                                                   @14
MLWTOTLEN EQU  MLWTOSUFFIX-MLWTOPREFIX Generate length              @14
*                                                                   @14
*        MLWTO model                                                @14
*                                                                   @14
* Following line added by @14 change                                @14
VMC002I  WTO   TEXT=((,C),(,D),(,D),(,D),(,D),(,D),(,D),(,D),(,D),(,D),X
               (,E)),                                               @14X
               ROUTCDE=(11),                                        @14X
               MF=L                                                 @14
VMC002IL EQU   *-VMC002I                                            @14
*              (,DE)),                                              @14
*                                                                   @14
         TITLE 'SVCUPDTE - Initialization related WTOs'             @14
******************************************************************* @14
*                                                                 * @14
*        Initialization/Environmental related WTOs                * @14
*                                                                 * @14
*        0nnA - Action required                                   * @14
*                                                                 * @14
******************************************************************* @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG200I  WTO   'SVCU200I - Old SVC entry point at ________ with all attX
               ributes and locks restored',ROUTCDE=(11),MF=L        @14
MSG200IL EQU   *-MSG200I                                            @14
MSG200IA EQU   WTOD+4+34,8         Old SVC entry point              @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG001A  WTO   'SVCU001A - PARM/PARMDD supplied input parameters missinX
               g - terminating',ROUTCDE=(11),MF=L                   @14
MSG001AL EQU   *-MSG001A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG002A  WTO   'SVCU002A - Excessive input parameter length (>200) - teX
               rminating',ROUTCDE=(11),MF=L                         @14
MSG002AL EQU   *-MSG002A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG003A  WTO   'SVCU003A - unsupported characters found in input parameX
               ter string',ROUTCDE=(11),MF=L                        @14
MSG003AL EQU   *-MSG003A                                            @14
*                                                                   @14
MSG004A  WTO   'SVCU004A - SVCLIB DD missing',                      @14X
               ROUTCDE=(11),MF=L                                    @14
MSG004AL EQU   *-MSG004A                                            @14
*                                                                   @14
MSG005A  WTO   'SVCU005A - Unsupported PARM field found',           @14X
               ROUTCDE=(11),MF=L                                    @14
MSG005AL EQU   *-MSG005A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG006A  WTO   'SVCU006A - Minimum length PARM not supplied for INSTALLX
                operation',                                         @14X
               ROUTCDE=(11),MF=L                                    @14
MSG006AL EQU   *-MSG006A                                            @14
*                                                                   @14
MSG007A  WTO   'SVCU007A - Duplicate keyword found in PARM field',  @14X
               ROUTCDE=(11),MF=L                                    @14
MSG007AL EQU   *-MSG007A                                            @14
*                                                                   @14
MSG010A  WTO   'SVCU010A - Invalid length LMOD parameter detected', @14X
               ROUTCDE=(11),MF=L                                    @14
MSG010AL EQU   *-MSG010A                                            @14
*
MSG011A  WTO   'SVCU011A - Invalid length USER parameter detected', @14X
               ROUTCDE=(11),MF=L                                    @14
MSG011AL EQU   *-MSG011A                                            @14
*                                                                   @14
MSG012A  WTO   'SVCU012A - "Null" LMOD keyword parameter detected', @14X
               ROUTCDE=(11),MF=L                                    @14
MSG012AL EQU   *-MSG012A                                            @14
*
MSG013A  WTO   'SVCU013A - "Null" USER keyword parameter detected', @14X
               ROUTCDE=(11),MF=L                                    @14
MSG013AL EQU   *-MSG013A                                            @14
*                                                                   @14
MSG014A  WTO   'SVCU014A - "Null" TYPE keyword parameter detected', @14X
               ROUTCDE=(11),MF=L                                    @14
MSG014AL EQU   *-MSG014A                                            @14
*
MSG015A  WTO   'SVCU015A - Invalid length TYPE parameter detected', @14X
               ROUTCDE=(11),MF=L                                    @14
MSG015AL EQU   *-MSG015A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG017A  WTO   'SVCU017A - Insufficient virtual storage for IRRSEQ00 woX
               rkarea',ROUTCDE=(11),MF=L                            @14
MSG017AL EQU   *-MSG017A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG018A  WTO   'SVCU018A - Insufficient virtual storage for RIBs workarX
               ea',ROUTCDE=(11),MF=L                                @14
MSG018AL EQU   *-MSG018A                                            @14
*
MSG019A  WTO   'SVCU019A - Invalid TYPE keyword specification',     @14X
               ROUTCDE=(11),MF=L                                    @14
MSG019AL EQU   *-MSG019A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG020A  WTO  'SVCU020A - SVCUPDTE cannot execute under TEST/TESTAUTH',X
               ROUTCDE=(11),MF=L                                    @14
MSG020AL EQU   *-MSG020A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG021A  WTO   'SVCU021A - illegal execution environment - cannot execuX
               te under TSO',ROUTCDE=(11),MF=L                      @14
MSG021AL EQU   *-MSG021A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG022A  WTO   'SVCU022A - illegal execution environment - fork/spawn',X
               ROUTCDE=(11),MF=L                                    @14
MSG022AL EQU   *-MSG022A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG023A  WTO   'SVCU023A - illegal execution environment - not batch', X
               ROUTCDE=(11),MF=L                                    @14
MSG023AL EQU   *-MSG023A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG024A  WTO   'SVCU024A - illegal execution environment - not job stepX
                TCB',ROUTCDE=(11),MF=L                              @14
MSG024AL EQU   *-MSG024A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG025A  WTO   'SVCU025A - illegal execution environment - not first prX
               ogram in TCB',ROUTCDE=(11),MF=L                      @14
MSG025AL EQU   *-MSG025A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG026A  WTO   'SVCU026A - Unable to obtain work area for MLWTO audit rX
               eport - Please report',ROUTCDE=(11),MF=L             @14
MSG026AL EQU   *-MSG026A                                            @14
*
MSG027A  WTO   'SVCU027A - TYPE must be 1, 2, 3, 4 or 6',           @14X
               ROUTCDE=(11),MF=L                                    @14
MSG027AL EQU   *-MSG027A                                            @14
*                                                                   @14
         TITLE 'SVCUPDTE - Environmental related WTOs'              @14
******************************************************************* @14
*                                                                 * @14
*        Environmental related WTOs = 1nnE series                 * @14
*                                                                 * @14
******************************************************************* @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG128E  WTO   'SVCU128E - REPORT - unable to allocate report sysout daX
               ta set. Please report.',ROUTCDE=(11),MF=L            @14
MSG128EL EQU   *-MSG128E                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG129E  WTO   'SVCU129E - REPORT - SVC99RC=________ S99ERROR=________ X
               S99INFO=________ ',ROUTCDE=(11),MF=L                 @14
MSG129EL EQU   *-MSG129E                                            @14
MSG129EA EQU   WTOD+32,8           SVC 99 R15 result                @14
MSG129EB EQU   WTOD+50,8           SVC 99 S99ERROR                  @14
MSG129EC EQU   WTOD+67,8           SVC 99 S99INFO                   @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG130E  WTO   'SVCU130E - Unable to obtain 0x12345678 bytes of CSA/ECSX
               A for LMOD=12345678',ROUTCDE=(11),MF=L               @14
MSG130EL EQU   *-MSG130E                                            @14
MSG130EA EQU   WTOD+34,8           CSA/ECSA amount                  @14
MSG130EB EQU   WTOD+70,8           LMOD name                        @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG131E  WTO   'SVCU131E - Unable to obtain SQA for USER filter code', X
               ROUTCDE=(11),MF=L                                    @14
MSG131EL EQU   *-MSG131E                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG146E  WTO   'SVCU146E - REPORT - OPEN for report file failed. PleaseX
                report.',ROUTCDE=(11),MF=L                          @14
MSG146EL EQU   *-MSG146E                                            @14
*                                                                   @14
MSG200A  WTO   'SVCU200A - LMOD=________ not marked RENT',          @14X
               ROUTCDE=(11),MF=L                                    @14
MSG200AL EQU   *-MSG200A                                            @14
MSG200AA EQU   WTOD+4+16,8         LMOD                             @14
*                                                                   @14
MSG201A  WTO   'SVCU201A - LMOD=________ not marked REUS',          @14X
               ROUTCDE=(11),MF=L                                    @14
MSG201AL EQU   *-MSG201A                                            @14
MSG201AA EQU   WTOD+4+16,8         LMOD                             @14
*                                                                   @14
MSG202A  WTO   'SVCU202A - LMOD=________ not marked REFR',          @14X
               ROUTCDE=(11),MF=L                                    @14
MSG202AL EQU   *-MSG202A                                            @14
MSG202AA EQU   WTOD+4+16,8         LMOD                             @14
*                                                                   @14
MSG203A  WTO   'SVCU203A - LMOD=________ not marked EXEC',          @14X
               ROUTCDE=(11),MF=L                                    @14
MSG203AL EQU   *-MSG203A                                            @14
MSG203AA EQU   WTOD+4+16,8         LMOD                             @14
*                                                                   @14
MSG204A  WTO   'SVCU204A - LMOD=________ cannot be OVLY format',    @14X
               ROUTCDE=(11),MF=L                                    @14
MSG204AL EQU   *-MSG204A                                            @14
MSG204AA EQU   WTOD+4+16,8         LMOD                             @14
*                                                                   @14
MSG205A  WTO   'SVCU205A - LMOD=________ cannot be SCTR format',    @14X
               ROUTCDE=(11),MF=L                                    @14
MSG205AL EQU   *-MSG205A                                            @14
MSG205AA EQU   WTOD+4+16,8         LMOD                             @14
*                                                                   @14
MSG206A  WTO   'SVCU206A - LMOD=________ cannot be RMODE=SPLIT',    @14X
               ROUTCDE=(11),MF=L                                    @14
MSG206AL EQU   *-MSG206A                                            @14
MSG206AA EQU   WTOD+4+16,8         LMOD                             @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG207A  WTO   'SVCU207A - LMOD=________ marked TEST/TESTRAN (not suppoX
               rted)',ROUTCDE=(11),MF=L                             @14
MSG207AL EQU   *-MSG207A                                            @14
MSG207AA EQU   WTOD+4+16,8         LMOD                             @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG208A  WTO   'SVCU208A - LMOD=________ not found on 1st library in SVX
               CLIB concatenation sequence',ROUTCDE=(11),MF=L       @14
MSG208AL EQU   *-MSG208A                                            @14
MSG208AA EQU   WTOD+4+16,8         LMOD                             @14
*                                                                   @14
         TITLE 'SVCUPDTE - RACF/SAF related WTOs'                   @14
******************************************************************* @14
*                                                                 * @14
*        RACF/SAF related WTOs = 2nnE series                      * @14
*                                                                 * @14
******************************************************************* @14
*                                                                   @14
         TITLE 'SVCUPDTE - Program error WTOs'                      @14
******************************************************************* @14
*                                                                 * @14
*        Program error WTOs = 3nnE series                         * @14
*                                                                 * @14
* Note: These are conditions that should not occur in the natural * @14
*       world.                                                    * @14
*                                                                 * @14
******************************************************************* @14
*                                                                   @14
         TITLE 'SVCUPDTE - ERROR level WTOs'                        @14
******************************************************************* @14
*                                                                 * @14
*        ERROR level WTOs                                         * @14
*                                                                 * @14
******************************************************************* @14
* Following line added by @14 change                                @14
MSG100E  WTO   'SVCU100E - SAF failure in EXTR000 routine. Please reporX
               t.',ROUTCDE=(11),MF=L                                @14
MSG100EL EQU   *-MSG100E                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG101E  WTO   'SVCU101E - SAFRC=________ RACFRC________ RACFRS=_______X
               _ ',ROUTCDE=(11),MF=L                                @14
MSG101EL EQU   *-MSG101E                                            @14
*                                                                   @14
MSG101EA EQU   WTOD+21,8           SAF Return Code                  @14
MSG101EB EQU   WTOD+36,8           RACF Return Code                 @14
MSG101EC EQU   WTOD+52,8           RACF Reason Code                 @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG102E  WTO   'SVCU102E - ERRET routine driven during IKJTSOEV LINK prX
               ocessing',                                           @14X
               ROUTCDE=11,MF=L                                      @14
MSG102EL EQU   *-MSG102E                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG103E  WTO   'SVCU103E - No SVCUPDTE profiles found in CLASS(#SNOMISCX
               )',ROUTCDE=(11),MF=L                                 @14
MSG103EL EQU   *-MSG103E                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG104E  WTO   'SVCU104E - CLASS(#SNOMISC) profile not returned. PleaseX
                report.',ROUTCDE=(11),MF=L                          @14
MSG104EL EQU   *-MSG104E                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG105E  WTO   'SVCU105E - Segment descriptor # not 1. Please report.',X
               ROUTCDE=(11),MF=L                                    @14
MSG105EL EQU   *-MSG105E                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG106E  WTO   'SVCU106E - Segment returned not BASE. Please report.', X
               ROUTCDE=(11),MF=L                                    @14
MSG106EL EQU   *-MSG106E                                            @14
*                                                                   @14
MSG107E  WTO   'SVCU107E - EPNAME module is RMODE=SPLIT',           @14X
               ROUTCDE=(11),MF=L                                    @14
MSG107EL EQU   *-MSG107E                                            @14
*                                                                   @14
MSG120I  WTO   'SVCU120I - ADMN_PROF_FIELDNAME=________ ',          @14X
               ROUTCDE=(11),MF=L                                    @14
MSG120IL EQU   *-MSG120I                                            @14
MSG120IA EQU   WTOD+35,8           ADMN_PROF_FIELDNAME value        @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG115E  WTO   'SVCU115E - R_admin service failed to load. Please reporX
               t.',ROUTCDE=(11),MF=L                                @14
MSG115EL EQU   *-MSG115E                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG116E  WTO   'SVCU116E - REPORT - LOAD R1=________ R15=________ ',   X
               ROUTCDE=(11),MF=L                                    @14
MSG116EL EQU   *-MSG116E                                            @14
*                                                                   @14
MSG116EA EQU   WTOD+4+28,8     LOAD R1 result (system completion)   @14
MSG116EB EQU   WTOD+4+41,8     LOAD R15 result (reason code)        @14
*                                                                   @14
         PUSH  PRINT                                                @14
         PRINT DATA,GEN                                             @14
*                                                                   @14
         TITLE 'SVCUPDTE - ACTION level WTOs'                       @14
******************************************************************* @14
*                                                                 * @14
*        ACTION level WTOs                                        * @14
*                                                                 * @14
******************************************************************* @14
*                                                                   @14
*        ZEROES                                                     @14
*                                                                   @14
*                                                                   @14
*        ONE HUNDREDS (initialization related events)               @14
*                                                                   @14
*                                                                   @14
*        TWO HUNDREDS (IRRSEQ00 extraction related events)          @14
*                                                                   @14
*                                                                   @14
*        NINE HUNDREDS (execution related events)                   @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG901W  WTO   'SVCU901W - Invalid length SVCUPDTE_* profile detected oX
               n database.',                                        @14X
               ROUTCDE=(11),MF=L                                    @14
MSG901WL EQU   *-MSG901W                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG902A  WTO   'SVCU902A - Profile starts with: _              . It wilX
               l be skipped in report.',                            @14X
               ROUTCDE=(11),MF=L                                    @14
MSG902AL EQU   *-MSG902A                                            @14
MSG902AA EQU   WTOD+36,15       Maximum len profile name to display @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG903A  WTO   'SVCU903A - Invalid length OWNER field detected on databX
               ase.',                                               @14X
               ROUTCDE=(11),MF=L                                    @14
MSG903AL EQU   *-MSG903A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG904A  WTO   'SVCU904A - Invalid length DATA field detected on databaX
               se.',                                                @14X
               ROUTCDE=(11),MF=L                                    @14
MSG904AL EQU   *-MSG904A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG905A  WTO   'SVCU905A - Invalid length UACC field detected on databaX
               se.',                                                @14X
               ROUTCDE=(11),MF=L                                    @14
MSG905AL EQU   *-MSG905A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG905I  WTO   'SVCU905I - ENQ for SVC table failed/R15=________ - retrX
               ying in 5 seconds',                                  @14X
               ROUTCDE=(11),                                        @14X
               DESC=3,                                              @14X
               MF=L                                                 @14
MSG905IL EQU   *-MSG905I                                            @14
MSG905IA EQU   WTOD+4+40,8         ENQ returned R15 value           @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG906I  WTO   'SVCU906I - ESTAE ENQ for SVC table failed/R15=________ X
               - retrying in 5 seconds',                            @14X
               ROUTCDE=(11),                                        @14X
               DESC=3,                                              @14X
               MF=L                                                 @14
MSG906IL EQU   *-MSG906I                                            @14
MSG906IA EQU   WTOD+4+46,8         ENQ returned R15 value           @14
*                                                                   @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG906A  WTO   'SVCU906A - Unexpected GQSCAN condition: R15=12345678 R0X
               =12345678. Please report.',                          @14X
               ROUTCDE=(11),MF=L                                    @14
MSG906AL EQU   *-MSG906A                                            @14
*                                                                   @14
MSG906AA EQU   WTOD+4+44,8         GQSCAN R15 value                 @14
MSG906AB EQU   WTOD+4+56,8         GQSCAN R0  value                 @14
*                                                                   @14
MSG907A  WTO   'SVCU907A - Profile involved was 123456789012345 ',  @14X
               ROUTCDE=(11),MF=L                                    @14
MSG907AL EQU   *-MSG907A                                            @14
MSG907AA EQU   WTOD+4+32,15        Profile involved in 906A message @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG908A  WTO   'SVCU908A - Resource _______________ found to be in use X
               by ________ in ASID 0x____',                         @14X
               ROUTCDE=(11),MF=L                                    @14
MSG908AL EQU   *-MSG908A                                            @14
MSG908AA EQU   WTOD+4+20,15        In use resource name             @14
MSG908AB EQU   WTOD+4+58,8         In use job name                  @14
MSG908AC EQU   WTOD+4+77,4         In use ASID                      @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG909A  WTO   'SVCU909A - Unexpected ENQ failure during install: R15=0X
               1234567 - Please report.',                           @14X
               ROUTCDE=(11),MF=L                                    @14
MSG909AL EQU   *-MSG909A                                            @14
*                                                                   @14
MSG909AA EQU   WTOD+4+54,8         ENQ R15 value                    @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG910A  WTO   'SVCU910A - Could not get exclusive use of QNAME=SVCZSVCX
               /RNAME=TABLE',                                       @14X
               ROUTCDE=(11),MF=L                                    @14
MSG910AL EQU   *-MSG910A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG911A  WTO   'SVCU911A - R15=________ - Please try again and report iX
               f it fails again',                                   @14X
               ROUTCDE=(11),MF=L                                    @14
MSG911AL EQU   *-MSG911A                                            @14
*                                                                   @14
MSG911AA EQU   WTOD+4+15,8         ENQ R15 value                    @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG912A  WTO   'SVCU912A - SVCUPDTE service for new SVC code failed',  X
               ROUTCDE=(11),MF=L                                    @14
MSG912AL EQU   *-MSG912A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG913A  WTO   'SVCU913A - SVCUPDTE service returned R15=12345678 - PleX
               ase report',                                         @14X
               ROUTCDE=(11),MF=L                                    @14
MSG913AL EQU   *-MSG913A                                            @14
*                                                                   @14
MSG913AA EQU   WTOD+4+41,8         ENQ R15 value                    @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG914A  WTO   'SVCU914A - QEDIT START free failure/R15=12345678 - PleaX
               se report',                                          @14X
               ROUTCDE=(11),MF=L                                    @14
MSG914AL EQU   *-MSG914A                                            @14
*                                                                   @14
MSG914AA EQU   WTOD+4+40,8         QEDIT R15 value                  @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG915A  WTO   'SVCU915A - Unable to obtain SVC table ENQ for reversal X
               - Please report',                                    @14X
               ROUTCDE=(11),MF=L                                    @14
MSG915AL EQU   *-MSG915A                                            @14
*                                                                   @14
MSG916A  WTO   'SVCU916A - ABEND 901 forced',                       @14X
               ROUTCDE=(11),MF=L                                    @14
MSG916AL EQU   *-MSG916A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG917A  WTO   'SVCU917A - QEDIT CIBCTR failure/R15=12345678 - Please rX
               eport',                                              @14X
               ROUTCDE=(11),MF=L                                    @14
MSG917AL EQU   *-MSG917A                                            @14
*                                                                   @14
MSG917AA EQU   WTOD+4+36,8         QEDIT R15 value                  @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG918A  WTO   'SVCU918A - SVCUPDTE service failed to restore old SVC',X
               ROUTCDE=(11),MF=L                                    @14
MSG918AL EQU   *-MSG918A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG919A  WTO   'SVCU919A - SVCUPDTE service R15=________ - Please reporX
               t',ROUTCDE=(11),MF=L                                 @14
MSG919AL EQU   *-MSG919A                                            @14
MSG919AA EQU   WTOD+4+32,8         SVCUPDTE service R15 value       @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG008A  WTO   'SVCU008A - user not authorized for CL(#SNOMISC) resourcX
               e _              ',ROUTCDE=(11),MF=L                 @14
MSG008AL EQU   *-MSG008A                                            @14
MSG008AB EQU   WTOD+4+57,15        CL(#SNOMISC) resource            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG009A  WTO   'SVCU009A - no protecting profile exists for SVCUPDTE_nnX
               n    - request is being failed ',ROUTCDE=(11),MF=L   @14
MSG009AL EQU   *-MSG009A                                            @14
MSG009AA EQU   WTOD+4+44,15        Missing profile name             @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG008I  WTO   'SVCU008I - AUTH check failed w/ R15=________ SAFRC=____X
               ____ SAFRSN=________ ',ROUTCDE=(11),MF=L             @14
MSG008IL EQU   *-MSG008I                                            @14
MSG008IA EQU   WTOD+4+36,8         RACF return code                 @14
MSG008IB EQU   WTOD+4+51,8         SAF return code                  @14
MSG008IC EQU   WTOD+4+67,8         SAF reason code                  @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG012I  WTO   'SVUC012I - ENQ failed - another copy of SVCUPDTE has cuX
               rrently installed the same SVC',ROUTCDE=(11),MF=L    @14
MSG012IL EQU   *-MSG012I                                            @14
*                                                                   @14
* Next line added by @14 change                                     @14
MSG016A  WTO   'SVCU016A - EPNAME module not found on SVCLIB library', X
               ROUTCDE=(11),MF=L                                    @14
MSG016AL EQU   *-MSG016A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG016I  WTO   'SVCU016I - EPNAME=________ failed with R15=__ R0=__ ', X
               ROUTCDE=(11),MF=L                                    @14
MSG016IL EQU   *-MSG016I                                            @14
MSG016IA EQU   WTOD+22,8           EPNAME                           @14
MSG016IB EQU   WTOD+47,2           BLDL return code (R15)           @14
MSG016IC EQU   WTOD+53,2           BLDL reason code (R0)            @14
*                                                                   @14
MSG028A  WTO   'SVCU028A - SVCUPDTE program is not APF authorized', @14X
               ROUTCDE=(11),MF=L                                    @14
MSG028AL EQU   *-MSG028A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG029A  WTO  'SVCU029A - Backing slot for requested SVCNO not T2/3/4',X
               ROUTCDE=(11),MF=L                                    @14
MSG029AL EQU   *-MSG029A                                            @14
*                                                                   @14
MSG030A  WTO   'SVCU030A - "Null" GOODNITE keyword specification',  @14X
               ROUTCDE=(11),MF=L                                    @14
MSG030AL EQU   *-MSG030A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG031A  WTO   'SVCU031A - Invalid length GOODNITE parameter detected',X
               ROUTCDE=(11),MF=L                                    @14
MSG031AL EQU   *-MSG031A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG032A  WTO   'SVCU032A - Invalid PARM field detected - IKJPARS RC=123X
               45678 ',ROUTCDE=11,MF=L                              @14
MSG032AL EQU   *-MSG032A                                            @14
MSG032AA EQU   WTOD+56,8           IKJPARS return code              @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG033A  WTO   'SVCU033A - IKJPARS returned ANSwer area value of 0xFF00X
               0000',ROUTCDE=11,MF=L                                @14
MSG033AL EQU   *-MSG033A                                            @14
*                                                                   @14
MSG034A  WTO   'SVCU034A - Required LMOD parameter missing',        @14X
               ROUTCDE=11,MF=L                                      @14
MSG034AL EQU   *-MSG034A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG035A  WTO   'SVCU035A - Check SYSTSPRT output for PARSE failure detaX
               ils',ROUTCDE=11,MF=L                                 @14
MSG035AL EQU   *-MSG035A                                            @14
*                                                                   @14
MSG036A  WTO   'SVCU036A - ESR T1/T2/T6 SVC entries not supported', @14X
               ROUTCDE=(11),MF=L                                    @14
MSG036AL EQU   *-MSG036A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG037A  WTO   'SVCU037A - Required SVC keyword specification missing',X
               ROUTCDE=(11),MF=L                                    @14
MSG037AL EQU   *-MSG037A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG038A  WTO   'SVCU038A - TYPE and ESR SVC# are mutually exclusive',  X
               ROUTCDE=(11),MF=L                                    @14
MSG038AL EQU   *-MSG038A                                            @14
*                                                                   @14
MSG039A  WTO   'SVCU039A - Routing SVC # supplied with TYPE',       @14X
               ROUTCDE=(11),MF=L                                    @14
MSG039AL EQU   *-MSG039A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG040A  WTO   'SVCU040A - SVC# request < 200 requires RACF "Global SpeX
               cial" authority',ROUTCDE=(11),MF=L                   @14
MSG040AL EQU   *-MSG040A                                            @14
*                                                                   @14
MSG041A  WTO   'SVCU041A - SVC# value not in range 0-255',          @14X
               ROUTCDE=(11),MF=L                                    @14
MSG041AL EQU   *-MSG041A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG042A  WTO   'SVCU042A - Routing code must be in range 0-255 for T3/4X
                ESR SVC',ROUTCDE=(11),MF=L                          @14
MSG042AL EQU   *-MSG042A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG043A  WTO   'SVCU043A - Routing code must be in range 0-14 for T1 ESX
               R SVC',ROUTCDE=(11),MF=L                             @14
MSG043AL EQU   *-MSG043A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG044A  WTO   'SVCU044A - Routing code must be in range 0-19 for T2 ESX
               R SVC',ROUTCDE=(11),MF=L                             @14
MSG044AL EQU   *-MSG044A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG045A  WTO   'SVCU045A - Routing code must be in range 0-7 for T6 ESRX
                SVC',ROUTCDE=(11),MF=L                              @14
MSG045AL EQU   *-MSG045A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG046A  WTO   'SVCU046A - Invalid SVC#/ESR# logic detected - abending X
               U333',ROUTCDE=(11),MF=L                              @14
MSG046AL EQU   *-MSG046A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG047A  WTO   'SVCU047A - Use of Router SVC# requires ESR function codX
               e be coded',ROUTCDE=(11),MF=L                        @14
MSG047AL EQU   *-MSG047A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG048A  WTO   'SVCU048A - Use of SVC # that is not part of the ESR reqX
               uires TYPE be specified.',ROUTCDE=(11),MF=L          @14
MSG048AL EQU   *-MSG048A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG049A  WTO   'SVCU049A - SRM, SALLOC and DISP locks can only be speciX
               fied by a RACF Global Special userid',               @14X
               ROUTCDE=(11),MF=L                                    @14
MSG049AL EQU   *-MSG049A                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG050S  WTO   'SVCU050S - logic error in TYPE assignment - abending U3X
               34',ROUTCDE=(11),MF=L                                @14
MSG050SL EQU   *-MSG050S                                            @14
*                                                                   @14
MSG044E  WTO   'SVCU044E - OPEN for SVCLIB library failed',         @14X
               ROUTCDE=(11),MF=L                                    @14
MSG044EL EQU   *-MSG044E                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG048S  WTO   'SVCU048S - SWAREQ UNAUTH=YES failure on SVCLIB - R15=__X
               ______ ',ROUTCDE=(11),MF=L                           @14
MSG048SL EQU   *-MSG048S                                            @14
MSG048SA EQU   WTOD+57,8           Offset to R15 hex display        @14
*                                                                   @14
MSG052E  WTO   'SVCU052E - SVCLIB data set not DSORG=PO/POE',       @14X
               ROUTCDE=(11),MF=L                                    @14
MSG052EL EQU   *-MSG052E                                            @14
*                                                                   @14
MSG056E  WTO   'SVCU056E - SVCLIB data set not RECFM=U',            @14X
               ROUTCDE=(11),MF=L                                    @14
MSG056EL EQU   *-MSG056E                                            @14
*                                                                   @14
MSG060E  WTO   'SVCU060E - SVCLIB library cannot be multi-volume',  @14X
               ROUTCDE=(11),MF=L                                    @14
MSG060EL EQU   *-MSG060E                                            @14
*                                                                   @14
* Next line added by @14 change                                     @14
MSG064E  WTO   'SVCU064E - Member specification for allowed on SVCLIB DX
               Dname',ROUTCDE=(11),MF=L                             @14
MSG064EL EQU   *-MSG064E                                            @14
*                                                                   @14
MSG068E  WTO   'SVCU068E - Invalid LOCKS parameter supplied',       @14X
               ROUTCDE=(11),MF=L                                    @14
MSG068EL EQU   *-MSG068E                                            @14
*                                                                   @14
MSG072E  WTO   'SVCU072E - SVC number parameter not numeric',       @14X
               ROUTCDE=(11),MF=L                                    @14
MSG072EL EQU   *-MSG072E                                            @14
*                                                                   @14
MSG076E  WTO   'SVCU076E - Goodnight (HHMM) parameter not numeric', @14X
               ROUTCDE=(11),MF=L                                    @14
MSG076EL EQU   *-MSG076E                                            @14
*                                                                   @14
MSG080E  WTO   'SVCU080E - SVCNO parameter not in range 0-255',     @14X
               ROUTCDE=(11),MF=L                                    @14
MSG080EL EQU   *-MSG080E                                            @14
*                                                                   @14
* Next line added by @14 change                                     @14
MSG084E  WTO   'SVCU084E - Goodnight (HHMM) parameter out of 0001-2359 X
               range',ROUTCDE=(11),MF=L                             @14
MSG084EL EQU   *-MSG084E                                            @14
*                                                                   @14
MSG088E  WTO   'SVCU088E - Goodnight time < current time (HHMM)',   @14X
               ROUTCDE=(11),MF=L                                    @14
MSG088EL EQU   *-MSG088E                                            @14
*                                                                   @14
MSG092E  WTO   'SVCU092E - ESR T3/4 naming convention violation',   @14X
               ROUTCDE=(11),MF=L                                    @14
MSG092EL EQU   *-MSG092E                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG096A  WTO   'SVCU096A - EPNAME module attribute requirements not metX
               ',ROUTCDE=(11),MF=L                                  @14
MSG096AL EQU   *-MSG092E                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG096I  WTO   'SVCU096I - module must be RENT, REFR, REUS, EXEC, OVLY=X
               NO, and SCTR=NO',ROUTCDE=(11),MF=L                   @14
MSG096IL EQU   *-MSG092E                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG100A  WTO   'SVCU100A - LOAD for EPNAME failed: R1=________ R15=____X
               ____ ',ROUTCDE=(11),MF=L                             @14
MSG100AL EQU   *-MSG100A                                            @14
MSG100AA EQU   WTOD+42,8           LOAD abend code                  @14
MSG100AB EQU   WTOD+55,8           LOAD reason code                 @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG108E  WTO   'SVCU108E - insufficient private storage for EPNAME copyX
               ',ROUTCDE=(11),MF=L                                  @14
MSG108EL EQU   *-MSG108E                                            @14
*                                                                   @14
MSG109E  WTO   'SVCU109E - IKJTSOEV returned RC=________ ',         @14X
               ROUTCDE=11,MF=L                                      @14
MSG109EL EQU   *-MSG109E                                            @14
MSG109EA EQU   WTOD+36,8                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG112S  WTO   'SVCU112S - Bad logic (loc #__) - R15=________ - please X
               report',ROUTCDE=(11),MF=L                            @14
MSG112SL EQU   *-MSG112S                                            @14
MSG112SA EQU   WTOD+31,2           Logic location identifier        @14
MSG112SB EQU   WTOD+41,8           R15 value                        @14
*                                                                   @14
* New line added by @14 change                                      @14
MSG120A  WTO   'SVCU120A - STORAGE OBTAIN for CSA/ECSA failed R15=_____X
               ___ ',ROUTCDE=(11),MF=L                              @14
MSG120AL EQU   *-MSG120A                                            @14
MSG120AA EQU   WTOD+54,8           STORAGE request return code      @14
*                                                                   @14
         TITLE 'Environmental condition message WTOs'               @14
MSG900I  WTO   'SVCU900I - Type 1 SVCs cannot specify LOCAL lock',  @14X
               ROUTCDE=(11),MF=L                                    @14
MSG900IL EQU   *-MSG900I                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG901I  WTO   'SVCU901I - Type 3/4 SVCs/ESR SVCs can use only LOCAL orX
                LOCAL+CMS locks',ROUTCDE=(11),MF=L                  @14
MSG901IL EQU   *-MSG901I                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG902I  WTO   'SVCU902I - Type 6 SVCs/ESR SVCs cannot specify any lockX
               s',ROUTCDE=(11),MF=L                                 @14
MSG902IL EQU   *-MSG902I                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG903E  WTO   'SVCU903E - LOGIC ERROR - Invalid SVC type passed parsinX
               g - ABEND U1001 forced',ROUTCDE=(11),MF=L            @14
MSG903EL EQU   *-MSG903E                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG904E  WTO   'SVCU904E - user not authorized to request LOCK=_23456 'X
               ,ROUTCDE=(11),MF=L                                   @14
MSG904EL EQU   *-MSG904E                                            @14
MSG904EA EQU   WTOD+50,6           LOAD reason code                 @14
         POP   PRINT                                                @14
*                                                                   @14
         TITLE 'SVCUPDTE - DIAGNOSTIC level WTOs'                   @14
MSG700D  WTO   'SVCU700D - Profile: 123456789012345 ',              @14X
               ROUTCDE=(11),MF=L                                    @14
MSG700DL EQU   *-MSG700D                                            @14
*                                                                   @14
MSG700DA EQU   WTOD+4+20,15        Profile name                     @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG701D  WTO   'SVCU701D - Installation data: 1234567890123456789012345X
               678901234567890 ',                                   @14X
               ROUTCDE=(11),MF=L                                    @14
MSG701DL EQU   *-MSG701D                                            @14
*                                                                   @14
MSG701DA EQU   WTOD+4+30,40        Profile installation data        @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG701I  WTO   'SVCU701I - RACF GLOBAL "SPECIAL" userid=         in effX
               ect',ROUTCDE=(11),MF=L                               @14
MSG701IL EQU   *-MSG701I                                            @14
MSG701IA EQU   WTOD+44,8           ACEEUSRI via EUSER               @14
*                                                                   @14
MSG702D  WTO   'SVCU702D - OWNER: 12345678   UACC: 1234567 ',       @14X
               ROUTCDE=(11),MF=L                                    @14
MSG702DL EQU   *-MSG702D                                            @14
*                                                                   @14
MSG702DA EQU   WTOD+4+18,8         Profile owner                    @14
MSG702DB EQU   WTOD+4+35,7         Profile default access           @14
*                                                                   @14
MSG703D  WTO   'SVCU703D - aclid___: aclacs_ ',                     @14X
               ROUTCDE=(11),MF=L                                    @14
MSG703DL EQU   *-MSG703D                                            @14
*                                                                   @14
MSG703DA EQU   WTOD+4+11,8         ACLID subfield value             @14
MSG703DB EQU   WTOD+4+21,7         ACLACS subfield value            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG704D  WTO   'SVCU704D - Status: SVC slot is not currently in use.', X
               ROUTCDE=(11),MF=L                                    @14
MSG704DL EQU   *-MSG704D                                            @14
*                                                                   @14
* Following line added by @14 change                                @14
MSG705D  WTO   'SVCU705D - Status: SVC slot currently in use by job namX
               e 12345678 in ASID 0x1234.',                         @14X
               ROUTCDE=(11),MF=L                                    @14
MSG705DL EQU   *-MSG705D                                            @14
*                                                                   @14
MSG705DA EQU   WTOD+4+57,8         GQSCAN requestor job name        @14
MSG705DB EQU   WTOD+4+76,4         GQSCAN requestor ASID            @14
*                                                                   @14
         TITLE 'SVCUPDTE -- Litterals && Constants'                 @14
         DS    0D                  Alignment                        @14
LTORG_AREA LOCTR ,                                                  @14
*                                                                   @14
*  Literal pool                                                     @14
*                                                                   @14
         LTORG                                                      @14
         AGO   .JH9996A                                             @14
VL       EQU   X'80000000'         31-bit AMODE indicator           @14
IGX00GSF EQU   203                 ESR-T3 SVC function code         @14
.JH9996A ANOP                                                       @14
         DS    D              Place STIMER value on D-WORD boundary @14
HOWLONG  DC    C'00000500'         Wait for 5 seconds               @14
*                hhmmssth          - for immediately above format   @14
*                                                                   @14
*       RIBS (Query command) initializer                            @14
*                                                                   @14
         DS    0F                                                   @14
RIBSINIT DC    A(0)                                                 @14
         DC    F'1024'                                              @14
         DC    CL8'SVCUPDTE'                                        @14
         DC    CL7'_ESRnnn'        SVC slot (ESR & non-ESR)         @14
RIBSINIL EQU   *-RIBSINIT                                           @14
*                                                                   @14
GQSMAP   GQSCAN MF=L                                                @14
GQSMAPL  EQU   *-GQSMAP                                             @14
*                                                                   @14
*        Numeric constants                                          @14
*                                                                   @14
Minimum_profname_length EQU X'000C' Minimum SVCUPDTE profile length @14
Maximum_profname_length EQU X'000F' Maximum SVCUPDTE profile length @14
*                                                                   @14
MAXLINES DC    PL2'64'             Set max lines/page count         @14
EDIT_page_# DC XL08'4020202020202021'          99,999k pattern      @14
*                                                                   @14
*        Model DCB for SYSPRINT                                     @14
*                                                                   @14
X#DCB1   DCB   DDNAME=*-*,DSORG=PS,MACRF=PM,RECFM=FA,LRECL=133      @14
X#DCB1L  EQU   *-X#DCB1            Length of model DCB              @14
*                                                                   @14
X#OPNDO  OPEN  (1,(OUTPUT)),MODE=31,MF=L OPEN/CLOSE execute list    @14
X#OPNDOL EQU   *-X#OPNDO           Length of OPEN list              @14
*                                                                   @14
PUTCODE  PUT   (1),(0)             PUT pattern code                 @14
         BSM   0,R2                Return                           @14
PUTLEN   EQU   *-PUTCODE           Length of PUT code               @14
*                                                                   @14
* Model DCB for SVCLIB (copied to <16MB storage)                    @14
*                                                                   @14
         DS    0F                                                   @14
INDCB#   DCB   DDNAME=SVCLIB,DSORG=PO,MACRF=R,RECFM=U               @14
INDCB#L  EQU   *-INDCB#            Generate length of model DCB     @14
*                                                                   @14
X#OPNDI  OPEN  (1,(INPUT)),MODE=31,MF=L OPEN/CLOSE execute list     @14
X#OPNDIL EQU   *-X#OPNDI           Generate length                  @14
*                                                                   @14
***********************************************************************
*                                                                     *
*        Model storage, moved to dynamic                              *
*                                                                     *
***********************************************************************
MODELS   DS    0H                                                   @14
SVCUMODL SVCUPDTE 0,REPLACE,TYPE=4,EP=0,MF=L
SVCUMODLL EQU  *-SVCUMODL          Generate length                  @14
*        ENQ   (QNAME1,*-*,E,L'SVCNO,SYSTEM),RET=USE,MF=L           @07
*        ENQ   (QNAME1,*-*,E,L'RNAME,SYSTEM),RET=USE,MF=L        @07@14
ENQMODL  ENQ   (QNAME1,*-*,E,L'RNAME,SYSTEM),RET=USE,MF=L           @14
ENQMODLL EQU   *-ENQMODL                                            @14
*        ENQ   (SYSZSVCQ,SYSZSVCR,E,,SYSTEM),MF=L                @02@14
ESVCTMOD ENQ   (SYSZSVCQ,SYSZSVCR,E,,SYSTEM),MF=L                @02@14
ESVCTMODL EQU  *-ESVCTMOD                                           @14
MODELS_L EQU   *-MODELS
*                                                                   @11
MODELESR SVCUPDTE 109,REPLACE,TYPE=4,EP=0,ESR=222,MF=L              @11
MODELESR_L EQU *-MODELESR                                           @11
*
QNAME1   DC    C'SVCUPDTE'         QNAME for ENQ
SYSZSVCQ DC    C'SYSZSVC '         QNAME for ENQ                    @02
SYSZSVCR DC    C'TABLE'            RNAME for ENQ                    @02
*                                                                   @14
RESOURCE DC    CL16'SVCUPDTE_       '                               @14
*                                                                   @14
*        REQUEST=AUTH,CLASS=FACILITY                                @14
*                                                                   @14
         DS    0D                                                   @14
RACPATT  RACROUTE REQUEST=AUTH,                                     @14X
               ENTITYX=*-*,                                         @14X
               CLASS=FACILITY,                                      @14X
               ATTR=READ,                                           @14X
               LOG=NONE,                                            @14X
               MSGSUPP=YES,                                         @14X
               RELEASE=1.9.2,                                       @14X
               WORKA=*-*,                                           @14X
               MF=L                                                 @14
*                                                                   @14
FACILITY DC    AL1(8),CL8'#SNOMISC' RACF CLASS for RACROUTE         @14
*                                                                   @14
LTORG_AREA_END DS 0D                                                @14
SVCUPDTE LOCTR ,                                                    @14
*
         TITLE 'PARSE - parse positional parameters routine'        @14
***********************************************************************
*                                                                     *
*        PARSE A COMMA-DELIMITED JCL PARM                             *
*                                                                     *
*        L     R15,=A(PARSE)                                          *
*        BALR  R14,R15                                                *
*        DC    S(L'PARM1,PARM1)        LENGTH,ADDR                    *
*        DC    S(L'PARM2,PARM2)        LENGTH,ADDR                    *
*                                                                     *
***********************************************************************
PARSE    CSECT
PARSE    AMODE 31
PARSE    RMODE ANY
         SAVE  (14,12),,PARSE      Save caller's registers
         BALR  R11,0               Set local base
         USING *,R11               Inform assembler
         LH    R5,0(,R4)           R5=length of PARM
         LA    R4,1(,R4)           R4->start of PARM - 1
         ALR   R5,R4               R5->last byte of PARM
*LOOP
PARS1    SLR   R0,R0               R0 = 00000000
         ICM   R0,B'0011',2(R14)   R0 = 0000BDDD
         SRDL  R0,12(0)            R0 = 0000000B, R1= BBB.....
         SRL   R1,20(0)            R1 = 00000DDD displacement
         ALR   R1,R13              Add caller's save area address
         LR    R6,R1               R6->target field
         LH    R7,0(,R14)          R7=length of target field
*
         LA    R2,1(,R4)           1st byte of current parameter
*--LOOP
PARS2    LA    R4,1(,R4)           Increment pointer
         CLR   R4,R5               End of PARM reached ?
         JH    PARS41              ...bif so, exit loop
         CLI   0(R4),C','          Delimiter ?
         JNE   PARS2               ...bif not, keep looking
*--ENDLOOP
PARS41   LR    R3,R4               R3->position of ','
         SR    R3,R2               R3=length of source parameter
         ICM   R3,B'1000',PARSEPAD Padding
         MVCL  R6,R2               Move source to target
PARS44   LA    R14,2+2(,R14)       R14->next target
         CLI   0(R14),0            Is this a field descriptor ?
         JE    PARS1               ...bif so, go process it
*ENDLOOP
         RETURN (0,12),T           Return with indicator
PARSEPAD DC    C' '                Padding
*                                                                   @14
         TITLE 'Dynamic working storage'                            @14
***********************************************************************
*                                                                     *
*        DYNAMIC STORAGE                                              *
*                                                                     *
***********************************************************************
*DYNAM    DSECT                                                     @14
DWS      DSECT                                                      @14
SAVEAREA DS    18F                 Save area                        @14
DOREPEATSAVE DS 18F                DOREPEAT save area               @14
CHKINUSESAVE DS 18F                CHKINUSE save area               @14
DATETIMESAVE DS 18F                DATETIME save area               @14
PUTSAVE  DS    18F                 PUTSAVE save area                @14
PUTHDRSAVE DS  18F                 HEADERS save area                @14
MLWTOSAVE DS   18F                 MLWTO save area                  @14
SAVE@L1  DS    18F                 Level 1 GPR save area            @14
PARSSAVE DS    18F                 PARS000 save area                @14
REPORTSAVE DS  18F                 REPORT register save area        @14
SAVE2    DS    18F                 Save area for ESTAE routine
SAVER0   DS    F                   R0 save area (PUTLINE)           @14
DOMID    DS    F                   Saved DOM msgid #                @14
MLWTOLINES@ DS F                   @ of MLWTO construction area     @14
MLWTOLENGTH DS F                  Length of MLWTO construction area @14
CIBECB   DS    F                   @ COMECBPT                       @14
@CSCB    DS    F                   @ CSCB                           @14
DWD      DS    D
DBWD     DS    D                                                    @14
DWSECB   DS    F                   IKJPARS ECB                      @14
DWSANS   DS    F                   IKJPARS answer area (PDL)        @14
@R_admin DS    F                   @ of loaded IRRSEQ00 routine     @14
SAVEFLAG DS    F                   Saved command-line options       @14
MODSIZE  DS    F                  Size of SVC module from BLDL      @14
MODEPOFF DS    F                  SVC module entry point offset     @14
EUSER    DS    CL8                 Address space level RACF userid  @14
Page_count DS  PL4                 Page counter                     @14
Line_count DS  PL2                 Page line count                  @14
         DS    0D                  Doubleword alignment             @14
SYSPRINT DS    XL(X#DCB1L)         SYSPRINT DCB area                @14
*                                                                   @14
         DS    0H                  Halfword alignment               @14
SPUTCODE DS    XL(PUTLEN)          PUT routine                      @14
*                                                                   @14
         DS    0F                  Fullword alignment               @14
W#OPNDO  DS    XL(X#OPNDOL)        Length of OPEN/CLOSE list        @14
PLIST@   DS    F                  Pointer to previous R_admin plist @14
SVCENTRY_PTR DS A(SVCENTRY)        SVC or ESR entry                 @06
DWSADDR  DS    F                   DWS address for ESTAEX routine   @14
@INPARMS DS    F                   @ of input parameters            @14
*
*        SVC 99 (SYSOUT) related fields
*
$99R15   DS    F                   Return code from SVC 99
$99RBPTR DS    F                   Pointer to SVC 99 RB
S99RBLEN EQU   S99RBEND-S99RB
$99RB    DS    (S99RBLEN)XL1       SVC 99 RB
$99RBX   DS    XL(S99RBXLN)        SVC 99 RB Extension
*        Pointers to TUs for ALLOCATE
$99STUPL DS    0F                  Pointers for SYSOUT ALLOC
$99SSYSP DS    F                   Ptr to SYSOUT TU
$99SFREP DS    F                   Ptr to FREE on CLOSE TU
$99SDDNP DS    F                   Ptr to RETURN output DDN TU
$99STL   EQU   *-$99STUPL
         ORG
*
*        Space for TUs which will contain variable information
*
$99TEXT  DS    0F                  Start of TUs
$99FREC  DS    4XL1                FREE ON CLOSE
$99DDNK  DS    14XL1               6 char header & 8 char DDname
$99SYSOU DS    CL7                 6 char header & 1 char class
$99TEXTL EQU   (*-$99TEXT)-1       -1 for use in clearing area
RDDN     DS    CL8                 Report sysout DDname
*                                                                   @14
*        Parse processing related work areas                        @14
*                                                                   @14
Input_parmlen DS H                 Original input parameter length  @14
Copied_input_parms DS CL100        Copy of original input parms     @14
BUFLEN   DS    H                   Length of command buffer         @14
BUFOFF   DS    H       Offset to 1st operand on true length in CBUF @14
Work_input_parms DS CL100          Work copy of input parameters    @14
*                                                                   @14
*        End of parse processing related work areas                 @14
*                                                                   @14
DSN      DS    CL44                SVCLIB data set name             @14
VOL      DS    CL6                 SVCLIB volser                    @14
FLAGS    DS    XL1             Execution time flags                 @14
F1#EPNL  EQU   X'80'           -EPNAME module copy exists in PVT    @14
F1#RIBSA EQU   X'40'           -RIBs work area acquired             @14
F1#ECSA  EQU   X'20'           -ECSA needed for SVC code (if on)    @14
*                              -CSA needed for SVC code (if off)    @14
F1#AM31  EQU   X'10'           -Use 31-bit EP in SVC slot           @14
F1#GOTCSA EQU  X'08'           -We have obtained CSA/ECSA           @14
*                                                                   @14
SVC_TYPE DS    CL1                 SVC type for this request        @14
*                                                                   @14
ESRSVCNO DS    CL3                 ESR SVC number (109/116/122/137) @14
*                                                                   @14
Current_option_length DS F   Length of current option for processor @14
*                                                                   @14
Parse_flags DS XL1                 Parse related flags              @14
Parse_LIST EQU X'80'               -LIST if 1 / INSTALL if 0        @14
Parse_SVC  EQU X'40'               -SVC= supplied                   @14
Parse_LMOD EQU X'20'               -LMOD= supplied                  @14
Parse_ATTR EQU X'10'               -ATTR= supplied                  @14
Parse_LOCKS EQU X'08'              -LOCKS= supplied                 @14
Parse_GOODNITE EQU X'04'           -GOODNITE= supplied              @14
Parse_USER EQU X'02'               -USER= supplied                  @14
No_more_data EQU X'01'             ...No more operands in data      @14
*
PKW_used DS    X
PKW_SVC  EQU   X'80'               SVC= keyword found
PKW_LMOD EQU   X'40'               LMOD= keyword found
PKW_ATTR EQU   X'20'               ATTR= keyword found
PKW_LOCKS EQU  X'10'               LOCKS= keyword found
PKW_GOODNITE EQU X'08'             GOODNITE= keyword found
PKW_USER EQU   X'04'               USER= keyword found
PKW_TYPE EQU   X'02'               TYPE= keyword found

*                                                                   @14
ATTR_FLAGS DS XL1                  Attributes requested flags       @14
ATTR_NPRMT EQU X'80'               -Non-preemptable requested       @14
ATTR_APF   EQU X'40'               -APF requested (APF=YES)         @14
ATTR_AR    EQU X'20'               -AR requested (AR=YES)           @14
ATTR_ESR   EQU X'10'               -ESR SVC request                 @14
ATTR_ASF   EQU X'08'               -ASF requested                   @14
*                                                                   @14
LOCKS_FLAGS DS XL1                 Locks requested flags            @14
LOCKS_LOCAL  EQU X'80'             -LOCAL lock requested            @14
LOCKS_CMS    EQU X'40'             -CMS lock requested              @14
LOCKS_SRM    EQU X'20'             -SRM lock requested              @14
LOCKS_SALLOC EQU X'10'             -SALLOC lock requested           @14
LOCKS_DISP   EQU X'08'             -DISPatcher lock requested       @14
*                                                                   @14
PROC_FLAGS DS XL1                  Processing requested flags       @14
PROC_GOODNITE EQU X'80'            -GOODNITE time was requested     @14
*                                                                   @14
         DS    0F                  Alignment                        @14
SVCLIB   DS    CL(INDCB#L)         Input DCB area                   @14
*                                                                   @14
         DS    0F                                                   @14
W#OPNDI  DS    XL(X#OPNDIL)        Length of OPEN/CLOSE list        @14
@WORKAREA DS   F                   @ of IRRSEQ00 work area          @14
WORKAREA_SIZE EQU 65536            Size of above work area          @14
ALET     DS    F                   ALET                             @14
SAFRC    DS    F                   SAF Return Code                  @14
RACFRC   DS    F                   RACF Return Code                 @14
RACFRS   DS    F                   RACF Reason Code                 @14
Current_profname DS CL15           Maximum length SVCUPDTE profile  @14
Current_OWNER DS CL8               Maximum length OWNER field       @14
Current_DATA DS CL100              1st 100 bytes of DATA field      @14
Current_UACC DS CL7                Maximum length UACC field        @14
Current_ACLID DS CL8               Maximum length ACLID field       @14
Current_ACLACS DS CL7              Maximum length ACLACS field      @14
INUSE_JOBNAME DS CL8              GQSCAN profile requestor job name @14
INUSE_ASID DS  CL8                 GQSCAN profile requestor ASID    @14
FUNCODE  DS    AL1                 R_Admin function code            @14
@ACEE    DS    F                   @ of ACEE                        @14
SUBPOOL  DS    AL1                                                  @14
OUTMSG   DS    F                                                    @14
RADPLIST DS    CL(ADMN_PROF_PROFNAME-ADMN_PROF_MAP) Plist header    @14
EXTPROF  DS    CL246                  Name of profile to extract    @14
*                                                                   @14
*        PLIST for IRRSEQ00...that is, a list of adresses to the    @14
*        actual Parameter data defined above                        @14
*                                                                   @14
*        The following is 13-0words in length and is redefined      @14
*                                                                   @14
WORKAREA@ DS   A                    1                               @14
ALET1@   DS    A                    2                               @14
SAFRC@   DS    A                    3                               @14
ALET2@   DS    A                    4                               @14
RACFRC@  DS    A                    5                               @14
ALET3@   DS    A                    6                               @14
RACFRS@  DS    A                    7                               @14
FUNCODE@ DS    A                    8                               @14
RADPLIST@ DS    A                   9                               @14
USER@    DS    A                   10                               @14
ACEE@    DS    A                   11                               @14
SUBPOOL@ DS    A                   12                               @14
OUTMSG@  DS    A                   13                               @14
         ORG   WORKAREA@                                            @14
PLIST    DS    13F                Redefined IRRSEQ00 plist          @14
         ORG   PLIST                                                @14
UPT      DS    F                                                    @14
ECT      DS    F                                                    @14
ECB      DS    F                                                    @14
PCL      DS    F                                                    @14
ANS      DS    F                                                    @14
CBUF     DS    F                                                    @14
UWAF     DS    F                                                    @14
VEWA     DS    F                                                    @14
         ORG   PLIST+52
PARM1    DS    F
PARM2    DS    F
PARM3    DS    F
PARM4    DS    F
PARM5    DS    F
*                                                                   @14
*                                                                   @14
* BLDL prime and result area                                        @14
*                                                                   @14
         AGO   .JH0812Z
BIT0     EQU   128
BIT1     EQU   64
BIT2     EQU   32
BIT3     EQU   16
BIT4     EQU   8
BIT5     EQU   4
BIT6     EQU   2
BIT7     EQU   1
*
.JH0812Z ANOP
         DS    0F                                                   @14
BLDLLIST DC    H'1'                # entries in list                @14
BLDLLL   DC    H'76'               Length of entry in list          @14
BLNAME   DC    CL8'IGX00nnn'       Name of module                   @14
BLTTR    DS    XL3                 TTR                              @14
BLK      DS    XL1                 * Concatenation data set number  @14
BLZ      DS    XL1                                                  @14
BLC      DS    XL1                                                  @14
BLTTRTX1 DS    XL3                 * TTR OF FIRST TEXT RECORD       @14
BLZ2     DS    XL1                 * ZEROS                          @14
BLTTRNL  DS    XL3                 * TTR OF NOTE LIST (IF ANY)      @14
BLNNOTEL DS    XL1                 * NUMBER OF NOTE LIST ENTRIES    @14
BLMATTR1 DS    XL2                 * MODULE ATTRIBUTES (1)          @14
BLA1RENT EQU   X'80'                 * REENTRANT                    @14
BLA1REUS EQU   X'40'                 * REUSABLE                     @14
BLA1OVLY EQU   X'20'                 * OVLY=YES                     @14
BLA1TEST EQU   X'10'                 * TEST/TESTRAN                 @14
BLA1SCTR EQU   X'04'                 * SCTR=YES                     @14
BLA1EXEC EQU   X'02'                 * EXECUTABLE                   @14
BLMODLN  DS    XL3                 * VIRTUAL STORAGE REQUIRED       @14
BLLTX1   DS    XL2                 * LENGTH OF FIRST TEXT RECORD    @14
BLEPADDR DS    XL3                 * MODULE ENTRY POINT             @14
BLMATTR2 DS    XL1                 * MODULE ATTRIBUTES (2)          @14
BLA1REFR EQU   X'01'                 * REFRESHABLE (2nd byte)       @14
BLARMODE DS    XL1                 * AMODE/RMODE FLAGS              @14
BLLRMOD  EQU   BIT3                  * Program residency mode
BLAAMOD  EQU   BIT4+BIT5             * Alias entry point AMODE
*                                      B'00' = AMODE 24
*                                      B'10' = AMODE 31
*                                      B'11' = AMODE ANY
*                                      B'01' = AMODE 64
BLMAMOD  EQU   BIT6+BIT7             * Main entry point AMODE
*                                      B'00' = AMODE 24
*                                      B'10' = AMODE 31
*                                      B'11' = AMODE ANY
*                                      B'01' = AMODE 64
BLRMANY  EQU   X'10'                 * RMODE = ANY                  @14
BLAM31   EQU   X'02'                 * AMODE = 31                   @14
BLRLDCNT DS    XL1                 * RLD COUNT                      @14
BLLSCLST DS    XL2                 * LENGTH OF SCATTER LIST         @14
BLLTRTAB DS    XL2                 * LENGTH OF TRANSLATION TABLE    @14
BLLESDTX DS    XL2                 * ESDID FOR FIRST TEXT RECORD    @14
BLLESDEP DS    XL2                 * ESDID FOR ENTRY POINTS         @14
BLMEMEPA DS    XL3                 * EPA OF 'REAL' MEMBER           @14
BLMEMNAM DS    XL8                 * NAME OF 'REAL' MEMBER          @14
         DS    XL22                <residual>                       @14
*                                                                   @14
WTOD     DS    CL200               Dynamic WTO construction area    @14
*                                                                   @14
@LOADEP  DS    F                   @ of LOAD'd EPNAME module        @14
@COPYEPN DS    F                   @ of copied EPNAME module        @14
@CSAEPN  DS    F                   @ of LMOD in in CSA/ECSA         @14
@CSAEPN@ DS    F                   @ of E.P. of LMOD in CSA/ECSA    @14
TIMER_ID DS    F
*                                                                   @14
* Date & time handling related fields                               @14
*                                                                   @14
Parm_bin_Goodnight DS F            Binary Goodnight time (HHMM)     @14
STCKAREA DS    D                   STCK result save area            @14
STCK_Adjusted DS D                 STCK adjusted result             @14
OUTAREA  DS    XL16                STCKCONV result area (16 bytes)  @14
STCKCONVL STCKCONV MF=L            STCKCONV work area               @14
UNPKAREA DS    CL9               * UNPK to 8 bytes + 1 to fake sign @14
TIMEDATE DS    CL24             Zoned decimal format of time & date @14
         ORG   TIMEDATE            Redefine TIMEDATE area           @14
*        HHMMSSthmiju0000MMDDYYYY                                   @14
HOURS    DS    CL2                 Hours                            @14
MINUTES  DS    CL2                 Minutes                          @14
SECONDS  DS    CL2                 Seconds                          @14
SUBSEC   DS    CL6                  subsecond values "thmiju"       @14
         DS    CL4                 <filler>                         @14
MONTH    DS    CL2                 Month                            @14
DAY      DS    CL2                 Day                              @14
YEAR     DS    CL4                 Year                             @14
* End of date & time handling fields                                @14
*                                                                   @14
* SWA processing related items                                      @14
*                                                                   @14
SWAREQRC DS    F                   SWAREQ RC                        @14
SWEPAPTR DS    F                   EPA pointer                      @14
EPA      DS    XL20                EPA non-rent area                @14
SWAPARMS SWAREQ MF=L               SWA request parameter list       @14
JFCB     DS    XL176               JFCB copy area (SVCLIB)          @14
*                                                                   @14
LOAD4L   LOAD  SF=L                LOAD model area
EXTRACTL EXTRACT *-*,FIELDS=COMM,MF=L EXTRACT model area
COMMADDR DS    A
ESTAEL   ESTAE MF=L                                                 @03
STIMER_L STIMERM SET,MF=L
RETCODE  DS    F                   Return code                      @14
*                                                                   @14
*        Return Code equates                                        @14
*                                                                   @14
NOTAPF   EQU   01                  SVCUPDTE not APF authorized      @14
NOPROF   EQU   02                  SVCUPDTE profile does not exist  @14
NOSVC#   EQU   03                  Required SVC keyword not present @14
BADENV3  EQU   04                  SVCLIB DD missing                @14
BADENV5  EQU   06                  -IRRSEQ00 service not found      @14
BADAUTH  EQU   08                  User not auth to add/replace SVC @14
BADERRET EQU   09                  ERRET routine driven             @14
BADTSOEV EQU   10                  Non-zero return from IKJTSOEV    @14
BADENQ   EQU   12                  ENQ for SVCUPDTE resource failed @14
BADEPN1  EQU   16         EPNAME module not found on SVCLIB Library @14
BADENV18 EQU   18               -Unable to obtain IRRSEQ00 workarea @14
BADENV19 EQU   19               -Unable to obtain RIBs workarea     @14
BADENV2  EQU   20                  Illegal execution environment    @14
BADSVCN1 EQU   24       Backing slot for requested SVCNO not T2/3/4 @14
BADENV25 EQU   26            -Report sysout file allocation failure @14
BADENV31 EQU   32               -Open for report sysout file failed @14
BADSAF1  EQU   34                  -SAF extract failure             @14
BADESRT  EQU   35                  ESR T1/T2/T6 SVCs not supported  @14
BADEXTR2 EQU   36                  -No SVCUPDTE profiles found      @14
BADEXTR3 EQU   37                  -EXTR000 - not CLASS(#SNOMISC)   @14
BADEXTR4 EQU   38                  -EXTR000 - SD # not 1            @14
BADEXTR5 EQU   39              -EXTR000 - BASE segment not returned @14
BADEXTR6 EQU   40                  -EXTR000 - Invalid length        @14C
                                               SVCUPDTE_* profile   @14C
                                               found on extract     @14
BADQSCAN EQU   41              -CHKINUSE - unexpected GQSCAN return @14
BADMLWTO EQU   42                 Unable to acquire MLWTO work area @14
BADOPN1  EQU   44                  OPEN for SVCLIB failed           @14
BADSWA   EQU   48                  SWAREQ request failed            @14
BADDSORG EQU   52                  SVCLIB not DSORG=PO/POE          @14
BADRECFM EQU   56                  SVCLIB not RECFM=U               @14
BADMVOL  EQU   60             SVCLIB library cannot be multi-volume @14
BADMEM1  EQU   64                  Member name coded on SVCLIB      @14
BADLOCKS EQU   68                  Invalid LOCKS parameter supplied @14
BADSVCNO EQU   72                  SVC number parameter not numeric @14
BADSVCUR EQU   73                  SVCUPDTE reversal failed         @14
BADEOD1  EQU   76       Goodnight time (HHMM) parameter not numeric @14
BADSVCN2 EQU   80                  SVC number not in range 0-255    @14
BADEOD2  EQU   84      Goodnight time (HHMM) parameter out of range @14
BADEOD3  EQU   88              Goodnight time < current time (HHMM) @14
BADSVCN3 EQU   92              ESR T3/4 naming convention violation @14
BADEPN2  EQU   96      EPNAME module attribute requirements not met @14
BADEPN3  EQU   100                 LOAD for EPNAME module failed    @14
BADEPN4  EQU   104                 EPNAME module is RMODE=SPLIT     @14
BADNRENT EQU   105                 LMOD not marked RENT on SVCLIB   @14
BADNREUS EQU   106                 LMOD not marked REUS on SVCLIB   @14
BADNREFR EQU   107                 LMOD not marked REFR on SVCLIB   @14
BADNEXEC EQU   108                 LMOD not marked EXEC on SVCLIB   @14
BADNOVLY EQU   109             LMOD cannot be marked OVLY on SVCLIB @14
BADNSCTR EQU   110             LMOD cannot be marked SCTR on SVCLIB @14
BADNSPLT EQU   111            LMOD cannot be marked SPLIT on SVCLIB @14
BADEPN5  EQU   108        <N/A>    Insufficient private for EPNAME  @14
BADLOGIC EQU   112                 Bad logic (loc #__) - R15=______ @14
BADNTEST EQU   113            LMOD cannot be marked TEST/TESTRAN    @14
BADNCNCT EQU   114            LMOD must be on 1st library on SVCLIB @14
*        EQU   116                 <available>                      @14
BADNOCSA EQU   120             Insufficient CSA/ECSA for SVC module @14
BADNOSQA EQU   121            Insufficient SQA/ESQA for USER filter @14
AUTHLOCK EQU   124        User not authorized to set requested LOCK @14
BADPARM1 EQU   128                 Missing PARM/PARMDD              @14
BADPARM2 EQU   132                 Excessive input parmeters length @14
BADPARM3 EQU   136                 Invalid characters in input      @14
BADPARSE EQU   137                 IKJPARS failed                   @14
*                                   parameter string                @14
BADPARM4 EQU   140                 Invalid PARM field found         @14
BADFENQ  EQU   141                 Slot ENQ failed                  @14
BADTYPR  EQU   142                 non-ESR request requires TYPE    @14
BADSVCUS EQU   143                 SVCUPDTE service request failed  @14
BADQEDIT EQU   144                 QEDIT failure                    @14
*                                                                   @14
MYFLAGS  DS    XL1                 Local processing flags           @14
NEXTREQ  EQU   X'80'               Indicates a next request         @14
FOUND1   EQU   X'40'               Indicates >=1 profiles found     @14
SPOOKY   EQU   X'20'               Indicates a ghost-generic found  @14
*        EQU   X'10'               <available>                      @14
SYSPPRES EQU   X'08'               SYSPRINT present in JCL          @14
MLWTOAREA EQU  X'04'               MLWTO area acquired              @14
AUTHUSER EQU   X'02'              Invoking user authorized to       @14C
                                   install SVC with locks           @14
SPECIAL  EQU   X'01'              Invoking user is global "special" @14
*                                                                   @14
*       FLAGS and its meanings                                      @14
*                                                                   @14
Profile_flags DS XL1               Profile related flags            @14
Skip_repeat_field EQU X'80'        -skip repeat field occurences    @14C
                                    for this field                  @14
Have_ACLID EQU X'40'               -ACLID captured                  @14
Have_ACLACS EQU X'20'              -ACLACS captured                 @14
Profile_INUSE EQU X'10'       -Profile for SVC slot already in use  @14
*                                                                   @14
*       Fields for GQSCAN query                                     @14
*                                                                   @14
RIBSPACE_p DS  F                   Pointer to RIBs work area        @14
         DS    0D                                                   @14
*IBS     DC    A(AMOUNT)                                            @14
RIBS     DS    A                   Pointer to RIBs work area        @14
AMOUNTL  DC    F'1024'                                              @14
QNAME    DC    CL8'SVCUPDTE'                                        @14
RNAME    DS    0CL7                                                 @14
         DC    CL1'_'              Underline                        @14
RNAME1   DC    CL3'ESR'            ESR SVC # or regular SVC #       @14
RNAME2   DC    CL3'fff'            ESR function code or blanks      @14
RNAMEBLK DC    X'40'               <trailing required blank>        @14
RNAMEEL  DS    X                   RNAME length for ENQ             @14
*                                                                   @14
*        RIBs return area (from GQSCAN)                             @14
*                                                                   @14
         DS    0D                                                   @14
*MOUNT   DS    256F                   RIB DATA AREA                 @14
*                                                                   @14
GQSLIST  GQSCAN MF=L                                                @14
*                                                                   @14
SQA_ADDR DS    A(CHKU500)          Work area in SQA
OLDENTRY DS    D                   Old SVC entry                    @03
SVCNO    DS    Z'222'              SVC number
         AGO   .JH0806G                                             @14
*                                                                   @14
* Skip the duplicate RNAME field definition until the LIST report   @14
* is working properly.                                              @14
* <WARNING> - The SVC install process currently uses this RNAME     @14
*             field. The usage between INSTALL & CHKINUSE must be   @14
*             cooperative.                                          @14
*                                                                   @14
*                                                                   @14
*                                                                   @14
RNAME    DS    CL6                 ENQ RNAME resource               @07
.JH0806G ANOP                                                       @14
EPNAME   DS    C'IGC0022B'         Name of SVC routine
         ORG   EPNAME              Name of SVC routine load module  @14
LMOD     DS    CL8                 Name of SVC routine load module  @14
LOCKS    DS    C'8000 '            Lock indtcators: 8000 or C000    @08
ENDOFDAY DC    Z'19000000'         CUTOFF TIME: HHMMSSHH
USER     DS    0CL9                                                 @14
USERLEN  DS    AL1                                                  @14
USERID   DS    CL8                 user-ID                          @05
TYPE     DS    CL1                 SVC TYPE                         @14
TYPEBIN  DS    XL1                 SVC TYPE in binary byte          @14
SVC#     DS    X                   SVC number in binary             @14
ESR#     DS    X                   ESR number in binary          @06@14
ESR#FW   DS    F                   ESR number in binary (fullword)  @14
SHUTDOWN DS    CL4                 GOODNITE time                    @06
LOCK#    DS    X'80'               Locks in binary: 80 or C0        @08
*
*        RACF model(s) workareas - redefined                        @14
*                                                                   @14
         DS    0D                                                   @14
RACF_DYN RACROUTE REQUEST=AUTH,                                        X
               RELEASE=1.8,                                         @14X
               MF=L
RACF_LEN EQU   *-RACF_DYN
         ORG   RACF_DYN            Redefine                         @14
SAFRACFL RACROUTE REQUEST=AUTH,                                     @14X
               ENTITYX=*-*,                                         @14X
               CLASS=FACILITY,                                      @14X
               MSGSUPP=YES,                                         @14X
               ATTR=READ,                                           @14X
               WORKA=*-*,                                           @14X
               LOG=NONE,                                            @14X
               RELEASE=1.9.2,                                       @14X
               MF=L                                                 @14
SAFRACLL EQU   *-SAFRACFL        Length of generated RACROUTE area  @14
*                                                                   @14
RACFWORK DS    64D                 RACROUTE WORK AREA (512 BYTES)
*                                                                   @14
*        Parameter lists initialized from "models"
*
SVCULIST SVCUPDTE 0,REPLACE,TYPE=4,EP=0,MF=L
         DS    0H                                                   @14
SVCUPLNEW DS   XL(SVCUMODLL)       SVCUPDTE plist for new SVC       @14
         DS    0H                                                   @14
SVCUPLOLD DS   XL(SVCUMODLL)       SVCUPDTE plist for old SVC       @14
         AGO   .JH1104A                                             @14
*                                                                   @14
*        SVCUPDTE macro expansion redefinitions for overrides       @14
*                                                                   @14
SVCUSVCM EQU   SVCULIST+03,1           SVC to modify                @14
SVCUEP   EQU   SVCULIST+04,4           E.P. of new SVC routine      @14
SVCUTYPE EQU   SVCULIST+08,1           SVC type                     @14
SVCUATTR EQU   SVCULIST+09,1           SVC attribute bits           @14
SVCULOCK EQU   SVCULIST+10,1           SVC locks                    @08
SVCUESR# EQU   SVCULIST+11,1           Extended SVC routing code    @11
*                                                                   @14
*        SVCUATTR equates                                           @14
*                                                                   @14
SVCUATTR_NPRMPT EQU X'02'          NPRMPT=YES                       @14
SVCUATTR_AR     EQU X'04'          AR = YES                         @14
SVCUATTR_APF    EQU X'08'          APF=YES                          @14
*                                                                   @14
*        SVCULOCK equates                                           @14
*                                                                   @14
SVCULOCK_LOCAL  EQU X'80'          LOCAL lock                       @14
SVCULOCK_CMS    EQU X'40'          CMS lock                         @14
SVCULOCK_SRM    EQU X'20'          SRM lock                         @14
SVCULOCK_SALLOC EQU X'10'          SALLOC lock                      @14
SVCULOCK_DISP   EQU X'08'          DISP lock                        @14
.JH1104A ANOP                                                       @14
*                                                                   @14
*ENQL     ENQ   (QNAME1,*-*,E,L'SVCNO,SYSTEMS),RET=USE,MF=L         @07
ENQL     ENQ   (QNAME1,*-*,E,L'RNAME,SYSTEMS),RET=USE,MF=L          @07
ENQ_TABLE ENQ  (SYSZSVCQ,SYSZSVCR,E,,SYSTEM),MF=L                   @02
*                                                                   @14
ENTITYW1 DS    H                   Length of buffer (w/o lengths)   @14
ENTITYW2 DS    H                   Length of resource name          @14
*                                                                   @14
ENTITYW3 DC    CL16' '                                              @14
ENTITW3L EQU   *-ENTITYW3          Generate length of resource      @14
*                                                                   @14
SAFWR15  DS    F                   SAF VERIFY R15 result            @14
SAFWRRET DS    F                   RACF return code from VERIFY     @14
SAFWRREA DS    F                   RACF reason code from VERIFY     @14
*                                                                   @14
HDRLINE  DS    CL133              Area for header line construction @14
PRTLINE  DS    CL133               Detail report line               @14
*                                                                   @14
DWSLEN   EQU   *-DWS               Generate DWS work area length    @14
*                                                                   @14
         TITLE 'Local provided dummy sections'                      @14
******************************************************************* @14
*                                                                 * @14
*        SVCUPDTE plist mapping                                   * @14
*                                                                 * @14
*        Note: This is SVCUPDTE version 1 mapping. This version   * @14
*              level mapping should be compared to any new        * @14
*              mappings that IBM may introduce in the future.     * @14
*                                                                 * @14
******************************************************************* @14
SVCU     DSECT                                                      @14
SVCUVERS DS    XL1                 SVCUPDTE version number          @14
SVCUFC   DS    XL1                 Function to be performed         @14
SVCUFC_replace EQU X'01'           -Replace SVC entry               @14
SVCUFLGS DS    XL1                 SVC flag, ESR flag               @14
SVCUFLGS_ESR EQU X'02'             -ESR # supplied                  @14
SVCUSVC  DS    XL1                 SVC to modify                    @14
SVCUEP   DS    F                   E.P. of new SVC routine          @14
SVCUTYPE DS    XL1                 SVC type                         @14
SVCUATTR DS    XL1                 SVC attribute bits               @14
SVCUATTR_NPRMPT EQU X'02'          -Non-preemptable                 @14
SVCUATTR_AR     EQU X'04'          -AR mode callers allowed         @14
SVCUATTR_APF    EQU X'08'          -APF callers only                @14
SVCULCKS DS    XL1                 SVC locks                        @14
SVCULCKS_LOCAL  EQU X'80'          -LOCAL lock                      @14
SVCULCKS_CMS    EQU X'40'          -CMS lock                        @14
SVCULCKS_SRM    EQU X'20'          -SRM lock                        @14
SVCULCKS_SALLOC EQU X'10'          -SALLOC lock                     @14
SVCULCKS_DISP   EQU X'08'          -DISP lock                       @14
SVCUESRC DS    XL1                 Extended SVC routing code        @14
SVCUNAME DS    XL8                 SVC entry point name             @14
*                                                                   @14
         TITLE 'System provided dummy sections'                     @14
         IHASVC LIST=YES               SVC TABLE ENTRY              @14
         PRINT NOGEN
         IRRPCOMP                                                   @14
         IHAPDS DSECT=YES                                           @14
         IHAPSA DSECT=YES
         CVT   DSECT=YES,LIST=NO
         AIF   (D'CVTEDAT).LPS01                                    @11
CVTEDAT  EQU   X'01'              Enhanced DAT support (Large Page) @11
.LPS01   ANOP                                                       @11
         IHASCVT DSECT=YES,LIST=NO     SECONDARY CVT
         IHAASCB DSECT=YES,LIST=NO
         IHAASXB
         IHAACEE
         IKJTCB DSECT=YES,LIST=NO
         IHALLE
         IHACDE
         IHASDWA DSECT=YES,VRAMAP=NO
         DCBD  DSORG=PS,DEVD=DA    DCB mapping                      @14
*                                                                   @14
         IEFTIOT1                  Generate TIOT mapping            @14
*                                                                   @14
IEFJFCBN DSECT                                                      @14
         IEFJFCBN LIST=YES                                          @14
*                                                                   @14
         IEFJESCT                                                   @14
*                                                                   @14
         IEFZB505 LOCEPAX=YES                                       @14
*                                                                   @14
         ICHSAFP DSECT=YES       Generate SAF Router parameter list @14
*                                                                   @14
         ISGRIB                    GRS RIBs                         @14
*                                                                   @14
         IHAASSB LIST=YES                                           @14
*                                                                   @14
         IEZJSCB ,                 Job Step Control Block           @14
*                                                                   @14
CSCB     DSECT                                                      @14
         IEECHAIN ,                Command Scheduling Control Block @14
*                                                                   @14
         IEFZB4D0 ,                SVC 99 DSECTS                    @14
*                                                                   @14
         IEFZB4D2 ,                SVC 99 EQU'S                     @14
*                                                                   @14
         IKJCPPL                                                    @14
*                                                                   @14
         DSECT                                                      @14
         IEZCOM                                                     @14
CIB      DSECT                                                      @14
         IEZCIB                                                     @14
         YREGS
SVCUPDTE CSECT                                                      @14
         END   SVCUPDTE
/*EOF
//

//LKED    EXEC PGM=IEWL,REGION=2M,PARM='MAP,RENT,AC=1',COND=(0,NE)
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,DELETE)
//*YSLMOD  DD DISP=SHR,DSN=SSD.TESTLIB(SVCUPDTE)
//*YSLMOD  DD DISP=SHR,DSN=SSD.TESTLIB(NEWUPDTE)
//SYSLMOD  DD DISP=SHR,DSN=SYS1.ZOSV2R02.DEVT.LINKLIB(SVCUPDTE)
//SYSPRINT DD SYSOUT=*
/*EOF
//

//
//
// 08/31/2015 backup of NEWUPDTE
// This backup was created before reverting the PARS000 subroutine
// from manual parse over to the use of IKJPARS.
//
//

RIBSPACE vs. AMOUNTL - move AMOUNT out of DWS to free 1K bytes



* hexconv - 1 byte in w/ 2 bytes out                                @14
         LA    R14,DWD+3           R14 -> source area to convert    @14
         LA    R15,MSG028AA        R15 -> target display area       @14
         UNPK  0(3,R15),0(2,R14)   unpack into display area         @14
         MVZ   0(2,R15),=XL17'00'  move zone into display area      @14
         TR    0(2,R15),=C'0123456789ABCDEF' translate              @14
         MVI   2(R15),C' '         overlay clobbered byte           @14
         $RWTO WTOD,WRITE=YES                                       @14
*                                                                   @14
*        Set return code and go exit                                @14
*                                                                   @14
         LHI   R15,BADENV1         Set return code to               @14
         ST    R15,RETCODE          expose to caller                @14
         J     EXIT                  & go exit w/ return code       @14



Do we need to worry about alias names??????


*   THIS CODE IS ENTERED WHEN MUST COMPLETE STEP IS INDICATED.
*   IT FIRST DETERMINES IF SET OR RESET AND THEN SETS THE CURRENT TCB.
*   THEN IT MAKES ALL TASKS IN THE JOB STEP NON-DISPATCHABLE.
         SPACE
         USING TCB,R4
* MUST COMPLETE STEP ROUTINE
*/*MCSTEP: E CODE 1*/
*/* D (YES,RESETSTP,NO,) THIS IS A RESET REQUEST*/
MCSTEP   TM    SWITCHES,UNDOIT      .IS THIS A RESET
         BO    RESETSTP            .YES
*/*SETSTP: P TURN ON SMC FLAG IN CALLER TCB*/
SETSTP   OI    TCBFLGS2,TCBFJMC    .SET MUST COMPLETE FLAG
*/* P TURN ON INHIBIT ASYNCH EXITS BIT IN CALLER TCB*/
         OI    TCBFLGS1,TCBFX      .INHIBIT ASYNCHRONOUS EXITS
         LR    R7,R15                  SAVE REG ACROSS SIGPS
*/* S (,MAIN1) SIGPCPUS: CLEAR OTHER CPUS OUT OF A.S.*/
         BAL   R12,SIGPCPUS            CLEAR OTHER CPUS OUT OF A.S.
         LR    R15,R7                  RESET REG
         B     MAIN1               .PROCEED DOWN TCB TREE
*/*RESETSTP: P TURN OFF SMC IN CALLER TCB*/
RESETSTP NI    TCBFLGS2,OFF-TCBFJMC         .RESET MUST COMPLETE
*/* P TURN OFF INHIBIT ASYNCH EXITS BIT IN CALLER TCB*/
         NI    TCBFLGS1,OFF-TCBFX  .ALLOW ASYNCHRONOUS EXITS
*/*MAIN1: L GET JSTCB (OR INIT TCB, IF ANY)*/
MAIN1    L     R10,TCBJSTCB        .GET CALLERS JOB STEP TCB
         DROP  R4



* IGX24CHK MODULE INTO THIS STORAGE
         SR    R2,R2                    * GET SIZE ...
         ICM   R2,B'0111',BLMODLN       * ... OF MODULE
         MODESET KEY=ZERO               * GET INTO KEY ZERO
         GETMAIN RU,LV=(R2),LOC=ANY,SP=228
         LR    R10,R1                   * SAVE @(IGX24CHK)
         LOAD  DE=BLNAME,DCB=(R11),ADDR=(R10)
         MODESET KEY=NZERO              * REVERT TO KEY 8
* CLOSE THE LOAD LIBRARY
         CLOSE ((R11)),MODE=31
         DROP  R11                      * FINISHED WITH DCB

X24I01A  WTOR  'X24I01A aaaaaaaa is at xxxxxxxx - OK to install front e+
               nd ?',REPLY,3,ECB,ROUTCDE=2
         WAIT  ECB=ECB                  * WAIT FOR RESPONSE
         CLC   REPLY,YES                * PERMISSION GRANTED ?
         BNE   DENIED                   * NO - QUIT
* INSERT THE ADDRESS OF THE 'REAL' IGX00024 INTO THE IGX24CHK MODULE
         MODESET KEY=ZERO               * GET INTO KEY ZERO
         MVC   28(4,R10),SVCEP          * STORE @IGX00024 IN IGX24CHK
         MODESET KEY=NZERO              * REVERT TO KEY 8
         EJECT
*----------------------------------------------------------------------
* PERMISSION GRANTED, SO INSTALL THE IGX00024 FRONT END INTERCEPT
*----------------------------------------------------------------------
* SORT OUT THE ENTRY POINT ADDRESS
DOINSTAL EQU   *
         SR    R2,R2                    * GET @(EP) RELATIVE ...
         ICM   R2,B'0111',BLEPADDR      * ... TO START OF MODULE
         AR    R10,R2                   * COMPUTE ABSOLUTE ENTRY POINT
         O     R10,AMODE31              * SET AMODE 31 BIT
* AND INSTALL THE INTERCEPT ADDRESS IN THE ESR TABLE
ESRUPDTE EQU   *
         MODESET KEY=ZERO,MODE=SUP      * KEY ZERO/SUPERVISOR STATE
         ENQ   (SYSZSVC,TABLE,E,L'TABLE,SYSTEM),RET=NONE
         LRA   R2,SVCEP                 * R2 = REAL ADDRESS OF ESRT
         BC    8,DOLURA1                * JUMP IF OK TO PROCEED
         LA    R8,4                     * ELSE ...
         B     INSTDONE                 * ... REJECT UPDATE


         AGO   .JRH9999
                      1111111111222222222233333333334
                4567890123456789012345678901234567890
* Following line added by @14 change                                @14
MSG112S  WTO   'SVC112S - Bad logic (loc #__) - R15=________ - please rX
               eport',ROUTCDE=(11),MF=L                             @14
MSG112SL EQU   *-MSG112S                                            @14
MSG112SA EQU   WTOD+30,2           Logic location identifier        @14
MSG112SB EQU   WTOD+40,8           R15 value                        @14
*                                                                   @14







* GETMAIN storage for the module and load the
* SVC module into this storage
DOLOAD   DS    0H
         SR    R2,R2               Get size ...
         ICM   R2,B'0111',BLMODLN  ... of module





FLags
=====
SVC is ESR
EPNAME is RMODE24
EPNAME is AMODE24
SVCLIB is open

      then open, bldl, load, close, etc.

.JRH9999 ANOP








SVCENTRY DSECT
SVCEP    DS    A                       SVC ENTRY POINT ADDRESS
SVCAMODE EQU   X'80'                   AMODE INDICATOR         @G860PXF
SVCATTR1 DS    0H                      ATTRIBUTES              @ZM45748
SVCTP    DS    B                       TYPE FIELD              @ZM45748
SVCTP1   EQU   X'00'                   TYPE 1 SVC
SVCTP2   EQU   X'80'                   TYPE 2 SVC
SVCTP34  EQU   X'C0'                   TYPE 3 OR 4 SVC
SVCTP6   EQU   X'20'                   TYPE  6 SVC             @Z40FPYK
SVCAPF   EQU   X'08'                   APF AUTHORIZED 1-AUTHORIZED
SVCESR   EQU   X'04'                   SVC IS A PART OF THE ESR
SVCNP    EQU   X'02'                   NON-PREEMPTIVE SVC      @Z40FPYK
SVCASF   EQU   X'01'                   SVC CAN BE ASSISTED     @G50EPXH
SVCATTR3 DS    B                       ATTRIBUTES                  @L2C
SVCAR    EQU   X'80'                   SVC MAY BE ISSUED IN AR ASC @L2A
*                                      MODE
SVCSSESR EQU   X'01'                   Only applies to a subsystem
*                                      screening table. Must be off
*                                      for SVC entries.            @L3A
SVCLOCKS DS    H                       LOCK ATTRIBUTES
SVCLL    EQU   X'80'                   LOCAL LOCK NEEDED
SVCCMS   EQU   X'40'                   CMS LOCK NEEDED
SVCOPT   EQU   X'20'                   OPT LOCK NEEDED
SVCALLOC EQU   X'10'                   SALLOC LOCK NEEDED
SVCDISP  EQU   X'08'                   DISP LOCK NEEDED
*
*  MAPPING FOR ESR TABLE ENTRY                                 @G860PXF
*
SVCESRAD EQU   SVCEP,4                 ADDRESS OF ESR TABLE IF @G860PXF
*                                      SVCESR IS ON            @G860PXF
SVCESRMX EQU   SVCATTR1,4              MAXIMUM ESR NUMBER      @G860PXF
*                                      SUPPORTED BY THIS ESR   @G860PXF

* Parse routine needs to support the following
*
* SVC=nnn       SVC number to be assigned or in the case of an ESR
*               function code the ESR SVC number for the type of
*               SVC to be installed.
*
* LMOD=xxxxxxxx SVC load module name
*
* LOCKS=(xxx,yyy,...) where parameters must be one or more of the
*       following:
*       LOCAL   - local lock needed
*       CMS     - general cross memory services lock
*       OPT     -
*       SALLOC  - space allocation lock
*       DISP    - dispatcher (serializes certain global functions,
*                 for example, TIMER queues.
*       CMSSEQDQ - ENQ/DEQ CMS lock - serializes ENQ/DEQ functions
*                  & control blocks
*       Default is: ????????? (review existing code)
*       Rules are: 1) Type 1 must not specify LOCAL (it is
*                     automatically assigned by the SVC FLIH before
*                     the SVC is given control)
*                  2) Type 6 cannot specify any locks
*                  3) Type 2, 3, or 4 must specify LOCAL if CMS
*                     specified
*                  4) Type 3 or 4 cannot specify a global spin lock
*
*                  See "Serialization Summary" chapter in the
*                  repective "z/OS - MVS Diagnosis: Reference"
*                  manual for additional information.
*
* APF=YES|NO    - SVC restricted to authorized programs
*         ==
* AR=YES|NO     - SVC can be issued by program in access register
*        ==       ASC mode.
* NPRMPT=YES|NO - SVC is non-preemptible (YES) or can be preempted
*            ==   (NO)
* TYPE=1|2|3|4|6 - SVC type. Default is 4.
*            =
* USER=xxxxxxxx  - Userid filter. Only this user gets the new SVC code
*
* Sample:
* LMOD=xxxxxxxx,LOCKS=(LOCAL,CMS),APF=YES,AR=YES,NPRMPT=YES,TYPE=N,
* GOODNITE=hhmm,USER=uuuuuuuu
*
* Insertion or replacement of Type 1 or Type 6 SVCs requires "systems"
* level priviledges...i.e. update access to SYS1.PARMLIB.
*
* Use of lock parameters other than LOCAL & CMS requires "systems"
* level priviledges.
*
* Use of attribute NPRMPT=YES requires "systems" level priviledges
*
* You cannot change the Type of a pre-existing SVC in the range of
* 0-199 or any ESR T3/4 SVC in the same range.
*
* For now any modification of a Type 1, 2 or 6 ESR SVC entry (116,
* 122, or 137) is off-limits.
*
*

*
* Get jobname for console messages
*
         L     R1,CVTPTR           R1 -> CVT
         L     R1,0(R1)            R1 -> current TCB
         L     R1,4(R1)            R1 -> TCB words
         L     R1,12(R1)           R1 -> TIOT
         MVC   Our_JOBNAME(8),0(R1) Set monitor task jobname for WTOs


// EXEC PGM=SVCUPPARM='SVC=109,LMOD=xxxxxxxx,LOCKS=(12345678,12345678,
//             12345678),APF=Y,AR=Y,NPRMPT=Y,TYPE=n,USER=xxxxxxxx,
//             GOODNITE=HHMM'

Obviously the maximum length of the parameters that can be supplied
exceeds 100 bytes.

TYPE=n is superfulous when SVC=nnn represents an ESR SVC number.

Doc for SVCUPDTE service says only CMS or LOCAL can be provided for
the LOCKS= parameter. Checked the macro and found the following:

.*02* INPUT -
.*       APF      AUTHORIZATION CODE FOR THE SVC
.*       AR       SVC MAY BE ISSUED IN ACCESS REGISTER MODE
.*       EP       POINTER DEFINED ENTRY POINT ADDRESS
.*       FUNC     IS THE OPERATION TO PERFORM
.*       LOCKS    LOCKS TO BE OBTAINED FOR SVC
.*                   TYPE 1 LOCKS DEFAULT TO
.*                      HAVING THE LOCAL LOCK
.*                   TYPE 3 + 4 MAY NOT HAVE ANY GLOBAL
.*                      SPIN LOCKS
.*                   TYPE 6 MAY NOT HAVE LOCKS
.*
.*       MF       TYPE OF SVCUPDTE MACRO
.*                  MF=(E,ADDR) EXECUTABLE
.*                    =L        PARAMETER LIST
.*                     STANDARD COMBINED LIST AND EXECUTABLE FORM
.*       NPRMPT   NON-PREEMPTIVE SVC
.*       RELATED  USER COMMENT
.*       SVC      IS THE SVC NUMBER WHOSE TABLE ENTRY IS TO BE
.*                MODIFIED
.*       TYPE     SVC TYPE
.*
.*    TOKEN            VALUE RANGE
.*    -----            -----------
.*     APF              YES,NO
.*     AR               YES,NO
.*     EP               POINTER-DEFINED ENTRY POINT ADDRESS
.*     FUNC          REPLACE,DELETE,EXTRACT,EXTRACTANY
.*     LOCKS    (LOCAL,DISP,SRM,CMS,SALLOC) <==================
.*     NPRMPT           YES,NO
.*     SVC              0-255
.*     TYPE             1-6
.*     EPNAME           1-8 CHARACTER NAME
.*
.*    TOKEN          MF=E            MF=L         MF=STANDARD
.*    -----          ----            ----         -----------
.*     APF           ERROR            OK              OK
.*     AR            ERROR            OK              OK
.*     EP OR EPNAME   OK**            OK**         MANDATORY+
.*     FUNC          ERROR         MANDATORY       MANDATORY
.*     LOCKS         ERROR            OK              OK
.*     NPRMPT        ERROR            OK              OK
.*     RELATED      OPTIONAL       OPTIONAL         OPTIONAL
.*     SVC            OK*             OK*          MANDATORY
.*     TYPE          ERROR         MANDATORY       MANDATORY

The following provides category & type information for locks (SVC & other)
Serialization summary:
http://pic.dhe.ibm.com/infocenter/zos/v1r12/index.jsp?topic=%2Fcom.ibm.zos.
r12.ieav200%2Fsersum.htm

*
ENTITY#A DC    H'17'               Length of buffer (w/o lengths)
ENTITY#B DC    H'00'               Length of resource name
FACILITY DC    AL1(8),CL8'#SNOMISC' RACF CLASS for RACROUTE
*
RESOURCE DC    CL17'SVCUPDTE_xxxyyy '




         MVC   SAFRACFL(SAFRACLL),RACPATT Set RACROUTE model
         LA    R2,ENTITYW3L        Pick up buffer length
         STH   R2,ENTITYW1         Store for RACROUTE call
         XC    ENTITYW2,ENTITYW2   Clear resource name length
         MVI   ENTITYW3,C' '       Blank out entity field via
         MVC   ENTITYW3+1(L'ENTITYW3-1),ENTITYW3 ripple
         MVC   ENTITYW3,RESOURCE   Copy model entity
*
         RACROUTE REQUEST=AUTH,                                        X
               ENTITYX=ENTITYW1,                                       X
               CLASS=FACILITY,                                         X
               ATTR=READ,                                              X
               WORKA=SAFWA,                                            X
               LOG=NONE,                                               X
               RELEASE=1.9.2,                                          X
               MF=(E,SAFRACFL)
*
* Save SAF R15 and RACF return code & reasons code for later use or
* diagnostics
*
         ST    R15,SAFWR15
         LA    R8,SAFRACFL     R8 -> RACROUTE Router Parameter list
         USING SAFP,R8         RACF Router parameter list address
         L     R14,SAFPRRET        Pick up RACF return code
         ST    R14,SAFWRRET        Save for later
         L     R14,SAFPRREA        Pick up RACF reason code
         ST    R14,SAFWRREA        Save for later
         DROP  R8                  Drop SAFP addressability
*
* Check to see if the invoking user is authorized to use program
*
         L     R15,SAFWR15         Pick up R15 from AUTH call
         C     R15,=F'0'           Verify completed successfully ?
         BE    INIT200             ...bif user authorized

         DS    0F
SAFRACFL RACROUTE REQUEST=AUTH,                                        X
               ENTITYX=ENTITY#A,                                       X
               CLASS=FACILITY,                                         X
               ATTR=READ,                                              X
               WORKA=SAFWA,                                            X
               LOG=NONE,                                               X
               RELEASE=1.9.2,                                          X
               MF=L
SAFRACLL EQU   *-SAFRACFL        Length of generated RACROUTE area




.*       CHECK FOR VALID, NON-DUPLICATE LOCKS
.*             - TYPE 1 DEFAULTS TO HAVING THE LOCAL LOCK
.*             - TYPE 3 + 4 MAY NOT HOLD ANY GLOBAL SPIN LOCK
.*             - TYPE 6 MAY NOT HOLD ANY LOCK

.* CHECK FOR TYPE 3 OR TYPE 4 SVC REQUESTING A GLOBAL SPIN LOCK
         AIF   (&TYPENUM NE 3 AND &TYPENUM NE 4).L0820   TYPE 3/4?
         AIF   (&TEMP NE &NSRM AND &TEMP NE &NSALLOC
               AND &TEMP NE &NDISP).L0820              SPIN LOCK?
   MNOTE 12,'TYPE 3/4 SVC CANNOT GET SPIN (&LOCKS(&INDEX1)) LOCK.'
&BADENT  SETC  'YES'                  FATAL ERROR DETECTED
.L0820   ANOP

Thus SRM, SALLOC & DISP are all spin locks




Following is from SNOJRH.MISC.JCLLIB(MLWTO):
============================================

*PROCESS USING(WARN(3))
         SYSSTATE ARCHLVL=2
MLWTO    TITLE '-----  Sample Multi-line WTO test  -----'
*
* Register equates
*
         YREGS
MLWTO    CSECT
MLWTO    AMODE 31
MLWTO    RMODE ANY
         SPLEVEL SET=4
         J     MAIN000             Go to resume point
*
PGMNAME  DC    CL8'MLWTO'
PGMVER   DC    CL6'V0R1M0'
PGMDATE  DC    CL8'&SYSDATC'       YYYYMMDD form
PGMTIME  DC    CL5'&SYSTIME'       HH.MM form
*
MAIN000  DS    0H
         BAKR  R14,0               Save status on linkage stack
         LARL  R12,LTORG_AREA
         USING (LTORG_AREA,LTORG_AREA_END),R12
         LAE   R12,0(R12,0)        Establish LTORG base
*
*        Obtain dynamic working storage
*
         L     R0,=A(DWSLEN)       R0 = length to acquire
         STORAGE OBTAIN,           Get wirking storage                 X
               COND=YES,                                               X
               LENGTH=(R0),                                            X
               LOC=24,                                                 X
               BNDRY=PAGE
         LTR   R15,R15             Did we get the DWS storage ?
         JZ    MAIN010             ...jif yes, continue
         WTO   'MLWTO - Initial STORAGE request failed - terminating wiX
               th U1001 abend',ROUTCDE=(11)
         ABEND 1001,DUMP
*
*        Clear work area & set LSE indicator in stack
*
MAIN010  DS    0H
         LR    R11,R1              Dynamic area addressability
         LR    R2,R1               Dynamic address to R2 for MVCL
         L     R3,=A(DWSLEN)       Get length to initialize
         LA    R4,0                Source
         LA    R5,0                Source len of 0 + pad byte of 0
         MVCL  R2,R4               Clear the dynamic area storage
*
         LR    R13,R11         Establish dynamic storage addressability
*
         MVC   4(4,R13),=CL4'F1SA' Linkage Stack indicator
         USING DWS,R13             DWS addressability
         EREG  R0,R1               Restore entry R1
         ST    R1,Entry_R1         Save entry R1 for later & diagnosis
*
         XR    R0,R0               Clear GPR0 for WTO
         MVC   DWSWTO(VMC002IL),VMC002I Install model WTOR list
         WTO   TEXT=((CNTLLINE,),(LABELINE,),                          +
               (DATALINE,),(DATALINE,),(DATALINE,),(DATALINE,),        +
               (DATALINE,),(DATALINE,),(DATALINE,),(DATALINE,)),       +
               MF=(E,DWSWTO)


         L     R11,RETCODE         R11 = RETCODE
         LR    R1,R13              Get DWS area address
         STORAGE RELEASE,          Free                                X
               ADDR=(R1),           the                                X
               LENGTH=DWSLEN         work area
         LR    R15,R11             Put RETCODE in R15
         EREG  R0,R1               Restore entry R0 & R1 values
EXITX    DS    0H
         PR    ,                   Restore status & return
*


LTORG_AREA LOCTR ,
*
*        Litteral pool
*
         LTORG ,
CNTLLINE DC    Y(34),CL34'ABC300I CONTROL LINE MESSAGE'
LABELINE DC    Y(70),CL70'FIELD1---- FIELD2---- FIELD3---- FIELD4----'
DATALINE DC    Y(70),CL70'DATA LINE DATA LINE DATA LINE DATA LINE'
*
*=====================================================================*
*                                                                     *
*        WTOs                                                         *
*                                                                     *
*=====================================================================*
         PUSH  PRINT
         PRINT ON,DATA,GEN
* Template for modified WTO text messages
*                     1111111111222222222233333333334444444444555555555
*               4567890123456789012345678901234567890123456789012345678
*
*              5666666666677777
*              9012345678901234
*
* Action WTOs
*
VMC003A  WTO   'VMC003A - VMCFINIT started SUB=____ - it must be starte+
               d SUB=MSTR, please restart',ROUTCDE=2,DESC=2,MF=L
VMC003AL EQU   *-VMC003A           Generate length of WTO list form
*
* Informational WTOs
*
VMC002I  WTO   TEXT=((,D),(,D),(,D),(,D),(,D),(,D),(,D),(,D),(,D),     +
               (,DE)),                                                 +
               AREAID=Z,                                               +
               DESC=(8,9,12),                                          +
               MCSFLAG=(NOTIME),                                       +
               MF=L
VMC002IL EQU   *-VMC002I
         POP   PRINT
*=====================================================================*
*                                                                     *
* Miscellaneous constants                                             *
*                                                                     *
*=====================================================================*
*
* WTO related constants
*
LTORG_AREA_END DS 0D
MLWTO    LOCTR ,
*
* Dynamic working storage mapping
*
DWS      DSECT                     DYNAMIC WORKING STORAGE
         DS    18F                 REGISTER SAVE AREA
Entry_R1 DS    F                   GPR1 value on entry to this program
RETCODE  DS    F                   Return code for caller
* MISCELLANEOUS WORK AREAS
DWSWORK  DS    2F                  WTOR parameter list area
@PARM    DS    F                   @ of input parameter list
WTORECB  DS    F                   WTOR ECB
DOMID    DS    F                   Message number for displayed message
REPLY    DS    CL9                 WTOR reply area
WORK9    DS    CL9                 9 byte hex conversion work area
* Keep next 3 lines together
         DS    0F
WTOLINEL DS    AL2                 70 bytes in maximum length
WTOLINE  DS    CL70                Dynamic WTO line area
         SPACE 1
WTOTXTP  EQU   WTOLINE+2,9         <task name>+X'40'
         LA    R4,WTOTXTP      R4  -> 1st position for task name in WTO
         DS    0F
DWSWTO   DS    CL400               DWSWTO area
DWSWTOL  EQU   *-DWSWTO            Length of WTOR area
* DWSWTO area equates for WTO message completion
VMC003AA EQU   DWSWTO+35,4         SSIBSSNM for SUB= in VMC003A message
VMC004IA EQU   DWSWTO+32,4         Subsystem name for VMC004I msg   @03
VMC004IB EQU   DWSWTO+47,4         ASID # area for VMC004I message  @03
VMC005IA EQU   DWSWTO+44,4         ASID # area for VMC005I message
VMC005IB EQU   DWSWTO+65,8         R15 display area for VMC005I message
VMC003RA EQU   DWSWTO+44,8         Hostname for VMC003R message
VMC013IA EQU   DWSWTO+31,4         S/S name for VMC013I message
VMC014IA EQU   DWSWTO+14,4         S/S name                         @02
VMC014IB EQU   DWSWTO+57,8         S/S initialization program       @02
VMC016IA EQU   DWSWTO+14,8         S/S initialization program       @02
VMC016IB EQU   DWSWTO+43,4         S/S name                         @02
VMC016IC EQU   DWSWTO+62,8         S/S NIP program return code      @02
VMC021IA EQU   DWSWTO+52,8         MVPTSSI rc for VMC021I message   @02
         SPACE 1
         DC    0D'0'
DWSLEN   EQU   *-DWS               GENERATE LENGTH OF WORKAREA
* Miscellaneous system dummy sections
         PRINT NOGEN
         CVT   DSECT=YES,LIST=NO   Generate CVT area mapping
         IKJTCB ,                  Generate TCB area mapping
         IEZJSCB ,                 Generate JSCB area mapping
         IHAPSA                    Generate Prefixed Save Area
         END   MLWTO






J0611294  +SVCU000I SVC install audit report 623                       C
 SVCU001I *************************************************************
 SVCU002I * Installing userid=xxxxxxxx LMOD=tttttttt SIZE: xxxxxxxx   *
 SVCU003I * Entry_point: xxxxxxxx Load_point: xxxxxxxx                *
 SVCU004I * AMODE=nn RMODE=nnn Old SVC entry point: xxxxxxxx          *
 SVCU005I * SYSLIB=12345678901234567890123456789012345678901234       *
 SVCU006I * SVC=(nnn,esr) Type=n LOCKS=(LOCAL,CMS,SRM,DISP,SALLOC)    *
 SVCU007I * ATTR=(AP,AR,NP,AS)                                        *
 SVCU008I * USER_filter=xxxxxxxx GOODNITE=hhmm                        *
 SVCU001I *************************************************************



