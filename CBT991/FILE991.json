{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013717000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2469012, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE991.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2469012, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2469012, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE991.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00&\\t'", "DS1TRBAL": "b'\\x1f\\x9c'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xd0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xd0\\x00\\x04\\x9a\\xc0\\xd8'", "b\"X\\xf4\\xfd\\xd0\\x00\\x00\\n\\x82\\x00\\n\\n\\x85\\x00\\x03\\x00'\"", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00\\x15\\x01\\x19\\x15\\x8f\\x01\\x19\\x15\\x8f\\x173\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-06-07T00:00:00", "modifydate": "2019-06-07T17:33:15", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-498"}, "text": "REGULAR CBT TAPE - VERSION 498    FILE:  991\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT498.FILE991\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 7 MEMBERS COUNTED; CUMULATIVE SIZE IS 23,037 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   06/07/19    17:33:15    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE991": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00\\x11\\x01\\x19\\x15\\x8f\\x01\\x19\\x15\\x8f\\x173\\x00$\\x00$\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-06-07T00:00:00", "modifydate": "2019-06-07T17:33:11", "lines": 36, "newlines": 36, "modlines": 0, "user": "CBT-498"}, "text": "//***FILE 991 is from John Hamlet and contains programs that are    *   FILE 991\n//*           useful.  Currently it contains a program to           *   FILE 991\n//*           temporarily install an SVC.                           *   FILE 991\n//*                                                                 *   FILE 991\n//*           email:  jrhamlet@bellsouth.net                        *   FILE 991\n//*                                                                 *   FILE 991\n//*           email:  sbgolob@cbttape.org    (alternate support)    *   FILE 991\n//*                                                                 *   FILE 991\n//*       Description of members:                                   *   FILE 991\n//*                                                                 *   FILE 991\n//*       SVCUPDTE - Temporarily install an SVC while this job is   *   FILE 991\n//*                  running.  It runs and waits.                   *   FILE 991\n//*                  Then it undoes itself, and the SVC install,    *   FILE 991\n//*                  when you cancel or stop the job.  You should   *   FILE 991\n//*                  use an unused jobname when running this batch  *   FILE 991\n//*                  job, so you don't get a \"duplicate jobname\"    *   FILE 991\n//*                  situation.                                     *   FILE 991\n//*                                                                 *   FILE 991\n//*                  Stopping the job with a P jobname is           *   FILE 991\n//*                  the preferred method of ending the install.    *   FILE 991\n//*                  Cancel will work, but you will get a S522      *   FILE 991\n//*                  instead of a RC = 0.                           *   FILE 991\n//*                                                                 *   FILE 991\n//*                  This version requires some special RACF        *   FILE 991\n//*                  profiles to be in place, to restrict users.    *   FILE 991\n//*                  Otherwise it won't run.                        *   FILE 991\n//*                                                                 *   FILE 991\n//*       SVCUPDTX - Temporarily install an SVC while this job is   *   FILE 991\n//*                  running.  It runs and waits.                   *   FILE 991\n//*                  Then it undoes itself, and the SVC install,    *   FILE 991\n//*                  when you cancel or stop the job.  This         *   FILE 991\n//*                  version bypasses some RACF checks, so you      *   FILE 991\n//*                  can run it if your id is SPECIAL, and you      *   FILE 991\n//*                  didn't install any of the RACF profiles it     *   FILE 991\n//*                  normally needs.                                *   FILE 991\n//*                                                                 *   FILE 991\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SVCUPD$1": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x002\\x01\\x19\\x12_\\x01\\x19\\x12_\\x16\\x14\\x00\\x08\\x00\\x05\\x00\\x00\\xe2\\xc1\\xd4\\xd7\\xd1\\xc3\\xd3@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-05-05T00:00:00", "modifydate": "2019-05-05T16:14:32", "lines": 8, "newlines": 5, "modlines": 0, "user": "SAMPJCL"}, "text": "//SBGOLOBN JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//*   THIS JCL ONLY WORKS IF THE RACF PROTECTIONS ARE DEFINED.\n//*\n// EXEC PGM=SVCUPDTX,PARM='LIST'\n//STEPLIB DD DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSPRINT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SVCUPD$2": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00P\\x01\\x19\\x12_\\x01\\x19\\x12_ (\\x00\\x15\\x00\\x05\\x00\\x00\\xe2\\xc1\\xd4\\xd7\\xd1\\xc3\\xd3@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2019-05-05T00:00:00", "modifydate": "2019-05-05T20:28:50", "lines": 21, "newlines": 5, "modlines": 0, "user": "SAMPJCL"}, "text": "//SBGOLO@$ JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//*   You can bypass most of the RACF protections if your\n//*   userid is marked as having the RACF SPECIAL attribute,\n//*   but you need to put some of the protections into place,\n//*   in the RACF database.\n//*\n//*   But if no RACF protections are defined, and you are SPECIAL,\n//*   then you should use the version called SVCUPDTX, which\n//*   will allow you to temporarily add an SVC.  This version\n//*   bypasses some of the RACF checks, but not all of them.\n//*\n//*   This job will not end, until you CANCEL or STOP it.  That\n//*   is why it has a weird jobname, so it should not make a\n//*   \"duplicate job name\" situation in conflict with other jobs.\n//*\n// EXEC PGM=SVCUPDTX,PARM='SVC(168),LMOD(RDHAPSVC),TYPE(3)'\n//STEPLIB DD DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SVCLIB  DD DISP=SHR,DSN=SYS1.W$$.LINKLIB,FREE=CLOSE  (LMOD IS HERE)\n//SYSTSPRT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SVCUPDT@": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x19\\x12_\\x01\\x19\\x12_\\x16\\x13\\x02N\\x02N\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-05-05T00:00:00", "modifydate": "2019-05-05T16:13:47", "lines": 590, "newlines": 590, "modlines": 0, "user": "HELP"}, "text": "***********************************************************************\n*                                                                     *\n* Name: SVCUPDTE          (THIS IS THE HELP MEMBER)                   *\n*                                                                     *\n* Function: Dynamic install of ESR (SVC 109) & non-ESR Type 2/3/4     *\n*           SVC    (Temporary install until job is cancelled)         *\n*                                                                     *\n* Purpose: This program defines an SVC routine to the system. It    @14\n*          supports the installation of all ESR routed or standard  @14\n*          SVC types 1, 2, 3/4, and 6. The installation of the SVC  @14\n*          code is either temportary or for the life of the IPL     @14\n*          depending on parameters supplied by the submitting uaer. @14\n*                                                                     *\n* Version/Release: V1R1                                               *\n*                                                                     *\n* Author:       J. Hamlet                                             *\n*               Information Systems Division                          *\n*               Mainframe Support Department                          *\n*                                                                     *\n*                                                                     *\n* Dependencies:    MVS/ESA 4.2.2 or above                           @14\n*                  APF authorized                                     *\n*                  SVCUPDTE for Type-1, 2, 3/4 & 6 ESR 109 SVC      @14\n*                   installs                                        @14\n*                                                                   @14\n*               Protecting CLASS(#SNOMISC) profiles must exist for  @14\n*               SVC or ESR SVC to be installed.                     @14\n*                                                                   @14\n*               Standard SVC protection profiles will be of the     @14\n*               following form:                                     @14\n*                                                                   @14\n*               SVCUPDTE_nnn                                        @14\n*                                                                   @14\n*               where nnn is a 3 digit zoned decimal number in the  @14\n*               range of 0-255 where the ESR routed SVC numbers of  @14\n*               109, 116, 122 & 137 are excluded.                   @14\n*                                                                   @14\n*               ESR routed SVC protection profiles will be of the   @14\n*               following form:                                     @14\n*                                                                   @14\n*               SVCUPDTE_aaabbb                                     @14\n*                                                                   @14\n*               where aaa is a 3 digit zoned decimal number         @14\n*               representing the ESR routed SVC number and must be  @14\n*               109, 116, 122 or 137 and bbb is the 3 digit zoned   @14\n*               decimal function code whose range is dependent on   @14\n*               the type of ESR SVC being installed. See the SVC    @14\n*               parameter in the \"Usage:\" section below.            @14\n*                                                                   @14\n*                                                                   @14\n* Restrictions: As currently implemented the invoking user must     @14\n*               have read level authority to a pre-existing         @14\n*               CL(#SNOMISC) profile that protects the SVC or ESR   @14\n*               SVC slot requested by the input parameters.         @14\n*                                                                   @14\n* Module Type:  Procedure requires batch execution.                 @14\n*                                                                   @14\n* Attributes:   RENT, RMODE ANY, AMODE 31, PSW Keys 8 & zero,       @14\n*                                                                   @14\n*               Supervisor and problem state                        @14\n*                                                                   @14\n* Operation: This program defines an SVC routine to the system as a @14\n*            replacement in the SVC or ESR SVC slot assigned to     @14\n*            that SVC or it can list protecting RACF profiles for   @14\n*            those SVC or ESR SVC slots defined for this program's  @14\n*            usage in the CLASS(#SNOMISC).                          @14\n*                                                                   @14\n*            All SVC installations are temporary in nature and any  @14\n*            newly installed SVC will be deleted when the address   @14\n*            space executing the SVCUPDTE program is either stopped @14\n*            via an OS STOP command or cancelled from execution by  @14\n*            a Job Entry System or OS CANCEL command.               @14\n*                                                                   @14\n*            ENQ is used to prevent simultaneous installation of    @14\n*            the same SVC by different jobs.                        @14\n*                                                                   @14\n* Usage: SVCUPDTE is invoked via JCL to either list existing        @14\n*            CL(#SNOMISC) profiles used by this program along with  @14\n*            a status report for these profiles showing any address @14\n*            space that may be using an SVC or ESR SVC slot for     @14\n*            testing purposes as handled by this program or the     @14\n*            program can be used to perform a temporary install of  @14\n*            SVC code for testing/development purposes.             @14\n*                                                                   @14\n*            A \"LIST\" request consists of a PARM field that         @14\n*            contains only the text string LIST. Any other parame-  @14\n*            ter specification will be considered to be an attempt  @14\n*            to install or replace an SVC on the current system     @14\n*            image.                                                 @14\n*                                                                   @14\n*            Minimum mode follows:                                  @14\n*            =====================                                  @14\n*                                                                   @14\n*            // EXEC PGM=SVCUPDTE,PARM='LIST'                       @14\n*                                                                   @14\n*            The above requests that a list of the current profiles @14\n*            and the usage status of those profiles is to be        @14\n*            generated to a system generated ddname as a spin-      @14\n*            sysout file since the SYSPRINT DD was missing.         @14\n*                                                                   @14\n*            Same as above but without using a spun sysout file:    @14\n*            ===================================================    @14\n*                                                                   @14\n*            // EXEC PGM=SVCUPDTE,PARM='LIST'                       @14\n*            //SYSPRINT DD SYSOUT=* <- optional                     @14\n*                                                                   @14\n*            SVC installs use the following JCL:                    @1*\n*            ===================================                    @1*\n*                                                                   @14\n*            The SYSPRINT DD is not used for the SVC install path   @14\n*                                                                   @14\n*            // EXEC PGM=SVCUPDTE,PARM='parameters'                 @14\n*            //SVCLIB DD DISP=SHR,DSN=data-set-name,                @14\n*            //          FREE=CLOSE <- strongly suggested           @14\n*            //SYSTSPRT DD SYSOUT=* <- optional                     @14\n*                                                                   @14\n*            In the above JCL we suggest that the data set name     @14\n*            provided on the SVCLIB DD be freed when the program    @14\n*            closes the associated DCB. If this is not done         @14\n*            exclusive use of the library while the SVCUPDTE        @14\n*            program is in execution.                               @14\n*                                                                   @14\n*            The SYSTSPRT DD being directed to a sysout class is    @14\n*            optional. If there is an issue related to the parsing  @14\n*            of the input parameters you should use the SYSTSPRT    @14\n*            DD to gather as much information about the suspected   @14\n*            parse failure before reportign the problem to the SAS  @14\n*            Help Desk.                                             @14\n*                                                                   @14\n*          The description of the content of the above \"parameters\" @14\n*          possibilities follows.                                   @14\n*                                                                   @14\n*          PARM='SVC(aaa,bbb), +                              @05@08@14\n*                LMOD(cccccccc), +                            @05@08@14\n*                ATTR(NPRMT,APF,AR),                                @14\n*                LOCKS(LOCAL,CMS,SRM,SALLOC,DISP),                  @14\n*                TYPE(t),                                           @14\n*                GOODNITE(hhmm), +                                  @14\n*                USER(uuuuuuuu)'                                    @14\n*                                                                   @14\n*          where;                                                   @14\n*                                                                   @14\n*            SVC  is the SVC number you want to install. There are  @14\n*                 2 formats for requesting an SVC install;          @14\n*                                                                   @14\n*                 SVC(aaa) for a standard (non-ESR routed) SVC or   @14\n*                 SVC(aaa,bbb) for an ESR-routed SVC where aaa is   @14\n*                 the ESR routed SVC and bbb is the function code.  @14\n*                 In the case of the SVC(aaa,bbb) format the aaa    @14\n*                 value must be one of the following values;        @14\n*                                                                   @14\n*                 109 for a T3/4 ESR SVC                            @14\n*                 116 for a T1 ESR SVC                              @14\n*                 122 for a T2 ESR SVC                              @14\n*                 137 for a T6 ESR SVC                              @14\n*                                                                   @14\n*                 The bbb value must be within an acceptable range  @14\n*                 for the type of ESR SVC being defined where the   @14\n*                 acceptable ranges are:                            @14\n*                                                                   @14\n*                 001-255 for a T3/4 ESR SVC (109)                  @14\n*                 001-014 for a T1   ESR SVC (116)                  @14\n*                 001-019 for a T2   ESR SVC (122)                  @14\n*                 001-007 for a T6   ESR SVC (137)                  @14\n*                                                                   @14\n*                 Specification of an aaa value that is less than   @14\n*                 200 that is not one of the above ESR routed SVC   @14\n*                 numbers requires RACF global special priviledges  @14\n*                 and read level access to the protecting profile   @14\n*                 which must exist.                                 @14\n*                                                                   @14\n*                 Note: The SVC(aaa,bbb) format of this parameter   @14\n*                       is mutually exclusive of the TYPE           @14\n*                       parameter.                                  @14\n*                                                                   @14\n*                 The SVC parameter specification is required.      @14\n*                                                                   @14\n*            cccccccc is the name of a load module (or alias)       @14\n*                 that you want to install as SVC nnn. It must      @14\n*                 have the following attributes:                    @14\n*                                                                   @14\n*                 RENT                                              @14\n*                 REFR                                              @14\n*                 REUS                                              @14\n*                 EXEC                                              @14\n*                 Not OVLY phased                                   @14\n*                 Not SCTR (Scatter) format                         @14\n*                 Not RMODE=SPLIT                                   @14\n*                 Not TEST/TESTRAN                                  @14\n*                 AMODE 24 or AMODE 31                              @14\n*                                                                   @14\n*                 The load module to be installed must be loaded    @14\n*                 from the 1st library that exists in the SVCLIB    @14\n*                 concatenation sequence.                           @14\n*                                                                   @14\n*                 Note: A future release may alleviate this         @14\n*                       restriction. Time just did not allow the    @14\n*                       writing of the necessary code for this      @14\n*                       release of the SVCUPDTE utility program.    @14\n*                                                                   @14\n*                 The LMOD parameter is required in all SVC         @14\n*                 install attempts (non LIST executions).           @14\n*                                                                   @14\n*            ATTR(NPRMT,APF,AR) is the list of SVC attributes to be @14\n*                 assigned to the newly installed SVC code where    @14\n*                 all are optional. The supported and available SVC @14\n*                 attributes are;                                   @14\n*                                                                   @14\n*                 NPRMT - SVC is not pre-emptable for I/O interrup- @14\n*                        tions. If a non-preemptable SVC sustains   @14\n*                        an I/O interrupt, the SVC, rather than the @14\n*                        highest priority ready work will get       @14\n*                        control when I/O processing is complete.   @14\n*                        A non-preemtable SVC cannot issue other    @14\n*                        SVCs and remain non-preemptable. If a non- @14\n*                        preemtable SVC issdues a STAX DEFER=NO     @14\n*                        macro the SVC routine remain non-preemp-   @14\n*                        table until it exits.                      @14\n*                         DEFAULT: SVC will be pre-emptible         @14\n*                                                                   @14\n*                 APF   - SVC caller must be APF authorized         @14\n*                         DEFAULT: Caller does not need to be APF   @14\n*                                  authorized.                      @14\n*                                                                   @14\n*                 AR    - SVC caller can be in Access Register (AR) @14\n*                         ASC mode.                                 @14\n*                         DEFAULT: AR mode callers are not          @14\n*                                  supported.                       @14\n*                                                                   @14\n*                 Note: This parameter is optional.                 @14\n*                                                                   @14\n*            LOCKS(LOCAL,CMS,SRM,SALLOC,DISP) is the list of        @14\n*                 available system locks for the SVC FLIH (First    @14\n*                 Level INterrupt Handler) to obtain before the SVC @14\n*                 entry point is given control on bahalf of the SVC @14\n*                 caller. Several of these locks are restricted as  @14\n*                 they could impact other users of the system in    @14\n*                 the case of a problem in the introduced SVC code. @14\n*                 The locks specifications supported are:           @14\n*                                                                   @14\n*                 LOCAL  - This is a local suspend lock used to     @14\n*                         serialize functions and storage within a  @14\n*                         local address space. One local lock       @14\n*                         exists per address space. Type 3/4 SVCs   @14\n*                         are always entered with the local lock    @14\n*                         obtained regardless of wheter the local   @14\n*                         lock was requested.                       @14\n*                                                                   @14\n*                 CMS    - This is a GLOBAL SUSPEND lock used for   @14\n*                          serialization on more than one address   @14\n*                          space when the serialization is not      @14\n*                          provided by one or more of the other     @14\n*                          available global locks. The CMS lock     @14\n*                          provides global serialization when k     @14\n*                          enablement is required. See the section  @14\n*                          titled \"Serialization Summary\" in the    @14\n*                          \"z/OS Diagnosis: Reference\" manual for   @14\n*                          additional information.                  @14\n*                                                                   @14\n*                 Note: T3/4 SVCs can only request LOCAL or         @14\n*                       LOCAL+CMS locks                             @14\n*                                                                   @14\n*                 The following lock specifications can only be     @14\n*                 requested by a userid that has RACF Global        @14\n*                 Special priviledges and also has ACCESS(READ)     @14\n*                 authority for the protecting CLASS(#SNOMISC)      @14\n*                 profile that protects the SVC of ESR SVC sllot.   @14\n*                                                                   @14\n*                 SRM    - This is a GLOBAL SPIN lock that          @14\n*                         serializes SRM control blocks and         @14\n*                         data used by the SRM/OPT/WLM components   @14\n*                         of z/OS.                                  @14\n*                                                                   @14\n*                 SALLOC - This is a GLOBAL SPIN lock that          @14\n*                         serializes external routines that enable  @14\n*                         a processor for either an emergency       @14\n*                         signal (EMS) or a malfunction alert (MA). @14\n*                                                                   @14\n*                 DISP   - This is a GLOBAL SPIN lock that          @14\n*                         serializes certain global functions that  @14\n*                         are controlled by the z/OS Dispatcher.    @14\n*                         Some examples are WEB and TIMER queues    @14\n*                         but there are a lot of others.            @14\n*                                                                   @14\n*                                                                   @14\n*                 Note: If no LOCKS parameter is supplied you will  @14\n*                       get the IBM default lock assignment for the @14\n*                       SVC type being installed.                   @14\n*                                                                   @14\n*            TYPE(t) is the parameter that supplies the SVC type    @14\n*                 that is to be installed. The possible values for  @14\n*                 t are;                                            @14\n*                                                                   @14\n*                 1 - for a type 1 SVC                              @14\n*                 2 - for a type 2 SVC                              @14\n*                 3 - for a type 3 SVC                              @14\n*                 4 - for a type 4 SVC                              @14\n*                 6 - for a type 6 SVC                              @14\n*                                                                   @14\n*                 The TYPE specification and the SVC(aaa,bbb) form  @14\n*                 of the SVC parameter are mutually exclusive.      @14\n*                                                                   @14\n*                 A type 3 SVC traditionally identified a function  @14\n*                 that is contained in a single load module while   @14\n*                 a type 4 SVC identified a a function that loads   @14\n*                 additional modules. In the past one could         @14\n*                 identify these loaded modules as IGC01nnn,...,    @14\n*                 and IGC0xnnn. (IGC01nnn is the first module that  @14\n*                 IGC00nnn loads, IGC02nnn is the second module     @14\n*                 that IGC00nnn loads, etc.) These old conventions  @14\n*                 no longer hold water and the SVCUPDTE program     @14\n*                 although supporting both TYPE(3) and TYPE(4)      @14\n*                 specifications it does not support the specifica- @14\n*                 tion of more than one LMOD to provide the         @14\n*                 traditional TYPE(4) environment. All know IBM     @14\n*                 and vendor utilities used to display the SVC      @14\n*                 table entries will show \"T3/4\" for either a type  @14\n*                 3 or 4 SVC entry.                                 @14\n*                                                                   @14\n*                 For a non-ESR SVC installation...SVC(aaa) form    @14\n*                 of the SVC parameter the TYPE parameter is        @14\n*                 required.                                         @14\n*                                                                   @14\n*            GOODNITE(hhmm) is the parameter that supplies a time   @14\n*                 later on the same execution day that the SVCUPDTE @14\n*                 program will use to automatically uninstall the   @14\n*                 installed SVC and place back in service the       @14\n*                 previously existing SVC in the same SVC or ESR    @14\n*                 SVC slot.                                         @14\n*                                                                   @14\n*                 This parameter is optional.                       @14\n*                                                                   @14\n*            USER(uuuuuuuu) parameter is used to supply a \"filter\"  @14\n*                 userid. The logic is such that only this userid   @14\n*                 will have access to the newly installed SVC code  @14\n*                 while all other users of the SVC will have their  @14\n*                 SVC requests sent to the old entry point.         @14\n*                                                                   @14\n*                 Note: When using the USER(uuuuuuuu) parameter     @14\n*                       one must be aware that a single SVC or ESR  @14\n*                       SVC slot supports both the old SVC and new  @14\n*                       SVC code. Thus any ATTR or LOCKS assignment @14\n*                       for the new SVC will be in place for the    @14\n*                       old SVC callers also. Tus we discourage the @14\n*                       use of the USER(uuuuuuuu) parameter in      @14\n*                       combination with any change to the original @14\n*                       SVC or ESR SVC slot's locks or attributes   @14\n*                       supplied by any LOCKS or ATTR parameters    @14\n*                       furnished by the user for the new SVC. A    @14\n*                       case in point. Assume ATTR(APF) was speci-  @14\n*                       fied in combination with the USER(uuuuuuuu) @14\n*                       parameter for a replacement SVC. If this    @14\n*                       was done the result would be that both the  @14\n*                       calls to the old SVC and the calls to the   @14\n*                       new SVC would have to come from an APF      @14\n*                       authorized environment. This may not have   @14\n*                       been the intent of the SVC installer.       @14\n*                                                                   @14\n* Return codes:                                                       *\n*                                                                   @14\n*        0  Successful completion: SVC has been installed and       @14\n*           uninstalled or the requested LIST operation completed   @14\n*           successfully                                            @14\n*                                                                   @14\n*        1  SVCUPDTE program not APF authorized                     @14\n*                                                                   @14\n*        2  Required SVCUPDTE profile does not exist                @14\n*                                                                   @14\n*        3  Required SVC keyword not present                        @14\n*                                                                   @14\n*        4  Required SVCLIB DDname missing                          @14\n*                                                                   @14\n*        6  Required IRRSEQ00 service not available                 @14\n*                                                                   @14\n*        8  User not authorized to add/replace SVC specified        @14\n*                                                                   @14\n*        9  ERRET routine driven for LOAD SVC                       @14\n*                                                                   @14\n*       10  Non-zero return code from IKJTSOEV service              @14\n*                                                                   @14\n*       12  ENQ for SVCUPDTE resource failed                        @14\n*                                                                   @14\n*       16  LMOD supplied module name not found on SVCLIB library   @14\n*                                                                   @14\n*       18  Unable to obtain IRRSEQ00 workarea                      @14\n*                                                                   @14\n*       19  Unable to obtain RIBs workarea                          @14\n*                                                                   @14\n*       20  Illegal execution environment                           @14\n*                                                                   @14\n*       24  Backing slot for requested SVC or ESR-SVC is not T2/3/4 @14\n*           (obsolete)                                              @14\n*                                                                   @14\n*       26  Report sysout file allocation failure                   @14\n*                                                                   @14\n*       32  Open for report sysout file failed                      @14\n*                                                                   @14\n*       34  SAF extract failure                                     @14\n*                                                                   @14\n*       35  ESR T1/2/6 SVCs not supported (obsolete)                @14\n*                                                                   @14\n*       36  No SVCUPDTE profiles found                              @14\n*                                                                   @14\n*       37  EXTR000 - not CLASS(#SNOMISC) profile returned          @14\n*                                                                   @14\n*       38  EXTR000 - SD (Segment Descriptor) number returned was   @14\n*           not 1                                                   @14\n*                                                                   @14\n*       39  EXTR000 - BASE segment not returned                     @14\n*                                                                   @14\n*       40  EXTR000 - Invalid length SVCUPDTE_* profile found on    @14\n*           extract operation                                       @14\n*                                                                   @14\n*       41  CHKINUSE - unexpected GQSCAN return code received       @14\n*                                                                   @14\n*       42  Unable to acquire MLWTO workarea                        @14\n*                                                                   @14\n*       44  OPEN for SVCLIB data set failed                         @14\n*                                                                   @14\n*       48  SWAREQ request failed                                   @14\n*                                                                   @14\n*       52  SVCLIB not DSORG=PO/POE                                 @14\n*                                                                   @14\n*       56  SVCLIB not RECFM=U                                      @14\n*                                                                   @14\n*       60  SVCLIB library cannot be multi-volume                   @14\n*                                                                   @14\n*       64  Member name coded on SVCLIB (not supported)             @14\n*                                                                   @14\n*       68  Invalid LOCKS parameter supplied                        @14\n*                                                                   @14\n*       72  SVC number parameter supplied not numeric               @14\n*                                                                   @14\n*       73  SVCUPDTE reveral failed                                 @14\n*                                                                   @14\n*       76  GOODNITE time (hhmm) supplied parameter not numeric     @14\n*                                                                   @14\n*       80  SVC number not in range 0-255                           @14\n*                                                                   @14\n*       84  GOODNITE time (hhmm) supplied parameter out of range    @14\n*                                                                   @14\n*       88  GOODNITE time (hhmm) supplied time less than current    @14\n*           time                                                    @14\n*                                                                   @14\n*       92  ESR T3/4 naming convention violation (obsolete)         @14\n*                                                                   @14\n*       96  LMOD module attribute requirements not met              @14\n*                                                                   @14\n*      100  LOAD for LMOD module failed                             @14\n*                                                                   @14\n*      104  LMOD module is RMODE=SPLIT                              @14\n*                                                                   @14\n*      105  LMOD module not marked RENT on SVCLIB                   @14\n*                                                                   @14\n*      106  LMOD module not marked REUS on SVCLIB                   @14\n*                                                                   @14\n*      107  LMOD module not marked REFR on SVCLIB                   @14\n*                                                                   @14\n*      108  LMOD module not marked EXEC on SVCLIB                   @14\n*                                                                   @14\n*      109  LMOD module cannot be marked OVLY on SVCLIB             @14\n*                                                                   @14\n*      110  LMOD module cannot be marked SCTR on SVCLIB             @14\n*                                                                   @14\n*      111  LMOD module cannot be marked SPLIT on SVCLIB            @14\n*                                                                   @14\n*      112  Bad lgic (loc #__) - R15=________                       @14\n*                                                                   @14\n*      113  LMOD module cannot be marked TEST/TESTRAN on SVCLIB     @14\n*                                                                   @14\n*      114  LMOD module must be on 1st library in any SVCLIB        @14\n*           supplied concatenation sequence                         @14\n*                                                                   @14\n*      120  Insufficient CSA/ECSA for SVC module to be installed    @14\n*                                                                   @14\n*      121  Insufficient ESQA for USER filter code                  @14\n*                                                                   @14\n*      124  User not authorized to set requested LOCK               @14\n*                                                                   @14\n*      128  Missing input parameter/parameters                      @14\n*                                                                   @14\n*      132  Excessive input parameter length                        @14\n*                                                                   @14\n*      136  Invalid character(s) in input parameters found          @14\n*                                                                   @14\n*      137  IKJPARS failed parameter string                         @14\n*                                                                   @14\n*      140  Invalid PARM field found                                @14\n*                                                                   @14\n*      141  SVC or ESR SVC slot ENQ SYSTEM failed                   @14\n*                                                                   @14\n*      142  Non-ESR SVC request requires TYPE be specified          @14\n*                                                                   @14\n*      143  SVCUPDTE service request failed                         @14\n*                                                                   @14\n*      144  QEDIT failure                                           @14\n*                                                                   @14\n* Abends:                                                             *\n*                                                                   @14\n*      U901  - Unable to obtain ENQ for SYSZSVC table               @14\n*                                                                   @14\n*      U902  - QEDIT limit set failure                              @14\n*                                                                   @14\n*      U333  - Invalid logic detected during parse processing       @14\n*                                                                   @14\n*      U334  - Logic error detected in TYPE assignment              @14\n*                                                                   @14\n*      U1001 - Invalid SVC type passed parsing                      @14\n*                                                                   @14\n*                                                                     *\n* Modification Log                                                    *\n* ================                                                    *\n* D a t e tag         Description of change & responsible party       *\n* ======= === ======================================================= *\n* 01Jun96 n/a -Genesis. Goal to reduce IPLs for SVC Type 3 installs.  *\n*              **********************************************<SNOJRH> *\n* 10Jun96 @01 -Leave SVC installed and exit if module was loaded from *\n*              LPA and \"goodnight\" time missing in PARM.*****<SNOJRH> *\n* 12Jun96 @02 -Issue ENQ on SYSZSVC/table to prevent simultaneous     *\n*              updates.**************************************<SNOJRH> *\n* 14Jun96 @03 -Restore address of old SVC after temporary install of  *\n*              SVC.******************************************<SNOJRH> *\n* 10Oct97 @04 -Fix \"good-night\" routine which hasn't been working for *\n*              a while.**************************************<SNOJRH> *\n* 28Oct98 @05 -Restrict access to new SVC to userid specified in PARM *\n*              field. Idea from Gilbert Saint-Flour. Survive LPA      *\n*              resident check when performing screen.********<SNOJRH> *\n* 16Nov98 @06 -Support to install IGX00nnn named module as a Type-3   *\n*              ESR function (only ESR SVC 109 supported).****<SNOJRH> *\n* 01Dec98 @07 -Prevent conflict on ENQ when SVC 109 is being used for *\n*              ESR install when ESR numbers are unique and being      *\n*              tested simultaneously.************************<SNOJRH> *\n* 01Dec98 @08 -PARM option for LOCAL and CMS locks for special test   *\n*              requirements.*********************************<SNOJRH> *\n* 27Nov01 @09 -Reviewed support for dynamic LPA and found CDNIP check *\n*              following CHECKLPA label is sufficient and that the    *\n*              ECVTDLPF (first) through ECVTDLPL (last) chain does    *\n*              not need to be scanned for dynamic LPA queue           *\n*              existence.************************************<SNOJRH> *\n* 12Jul11 @10 -Updated for FLAG(PAGE0)***********************<SNOSEW> *\n* 15Dec11 @11 -Support for Large Page Support...i.e support for       *\n*              1MB page sizes. PGSER PROTECT|UNPROTECT operations are *\n*              not supported for locations in the R/O Nucleus even if *\n*              1MB page support is not enabled on the newer           *\n*              processors the R/O Nucleus will be backed by 1MB       *\n*              pages. If PGSER PROTECT|UNPROTECT operations are       *\n*              attempted on the newer processors for areas in the     *\n*              R/O nucleus a S18A abend will occur with the reason    *\n*              code placed in GPR0 identifying the operation. The     *\n*              code is now upward and downward compatible for all     *\n*              supported z/OS releases.***************<SNOJRH/SNOSEW> *\n* 15Dec11 @12 -Fix bug left over from @06 change where wrong register *\n*              used to preserve ESR function code in the ESR# field.  *\n*              **********************************************<SNOJRH> *\n* 16Dec11 @13 -Fix bug left over from @07 change where SVCNO was used *\n*              execute form of ENQ instead of RNAME. This resulted in *\n*              the SVC number parameter being repeated twice as the   *\n*              RNAME when an ESR SVC was involved instead of the SVC  *\n*              number followed by the ESR number.************<SNOJRH> *\n* 25Oct13 n/a -Replaced displacement branches with relative branches. *\n*              **********************************************<SNOJRH> *\n* 22Jul15 @14 -Version 2 Release 0 (total rewrite):                   *\n*              -Program now designed to run from the system LNKLST    *\n*               by verifying that it is not being executed under TEST *\n*               or TESTAUTH.                                          *\n*              -SVC load modules will now be loaded from SVCLIB       *\n*               instead of STEPLIB.                                   *\n*              -Above SVCLIB library does NOT need to be APF          *\n*               authorized.                                           *\n*              -Will now issue WTO indicating what user has installed *\n*               what SVC.                                             *\n*              -Requires batch execution now instead of as a started  *\n*               procedure.                                            *\n*              -Lots of new return codes added due to use of IRRSEQ00 *\n*               (RACF Administration) service and support for users   *\n*               requesting an inventory report of registered SVC slot *\n*               profiles using that service.                          *\n*              -Users attempting to install/replace an SVC will have  *\n*               the following CLASS(#SNOMISC) rule checked:           *\n*                                                                     *\n*               SVCUPDTE_xxxyyy                                       *\n*                                                                     *\n*               where;                                                *\n*                                                                     *\n*               xxx is the SVC number and                             *\n*                                                                     *\n*               yyy is the ESR function code if xxx is an ESR routed  *\n*                   SVC. The yyy portion is not present if the        *\n*                   xxx portion represents a standard SVC.            *\n*                                                                     *\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SVCUPDTE": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00\\x16\\x01\\x15$\\x7f\\x01\\x19\\x12_\\x169+\\xb3!x\\x00\\x00\\xd1\\xc8\\xc1\\xd4\\xd3\\xc5\\xe3@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "2015-09-04T00:00:00", "modifydate": "2019-05-05T16:39:16", "lines": 11187, "newlines": 8568, "modlines": 0, "user": "JHAMLET"}, "text": "//NEWUPDTE  JOB  (,E212),HAMLET,MSGCLASS=A,TIME=(,25),NOTIFY=           J0557738\n//*\n//DEFAULT OUTPUT DEFAULT=YES,UCS=P2UP,JESDS=ALL,OUTDISP=(HOLD,HOLD)\n/*JOBPARM S=DEVT\n//*\n//*  ASSEMBLE SVCUPDTE\n//*\n//*ASMH EXEC PGM=IEV90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,NORENT)\n//ASMH     EXEC PGM=ASMA90,REGION=4M,\n// PARM='OBJECT,NODECK,XREF(SHORT),TERM,FLAG(0,NOCONT),USING(WARN(3))'\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJ1,UNIT=VIO,SPACE=(CYL,(2,2)),\n//             DISP=(MOD,PASS),DCB=BLKSIZE=800\n//SYSUT1   DD  SPACE=(CYL,(5,10)),UNIT=RIO\n//SYSIN    DD  *\n*PROCESS USING(WARN(3))                                             @14\n         SYSSTATE ARCHLVL=2                                         @14\n***********************************************************************\n*                                                                     *\n* Name: SVCUPDTE                                                      *\n*                                                                     *\n* Function: Dynamic install of ESR (SVC 109) & non-ESR Type 2/3/4     *\n*           SVC                                                       *\n*                                                                     *\n* Purpose: This program defines an SVC routine to the system. It    @14\n*          supports the installation of all ESR routed or standard  @14\n*          SVC types 1, 2, 3/4, and 6. The installation of the SVC  @14\n*          code is either temportary or for the life of the IPL     @14\n*          depending on parameters supplied by the submitting uaer. @14\n*                                                                     *\n* Version/Release: V1R1                                               *\n*                                                                     *\n* Author:       J. Hamlet                                             *\n*               Information Systems Division                          *\n*               Mainframe Support Department                          *\n*                                                                     *\n* Installation: SAS Institute, Inc.                                   *\n*               1 SAS Circle                                          *\n*               Box 8000                                              *\n*               Cary, N.C. 27511-8000                                 *\n*                                                                     *\n* Dependencies:    MVS/ESA 4.2.2 or above                           @14\n*                  APF authorized                                     *\n*                  SVCUPDTE for Type-1, 2, 3/4 & 6 ESR 109 SVC      @14\n*                   installs                                        @14\n*                                                                   @14\n*               Protecting CLASS(#SNOMISC) profiles must exist for  @14\n*               SVC or ESR SVC to be installed.                     @14\n*                                                                   @14\n*               Standard SVC protection profiles will be of the     @14\n*               following form:                                     @14\n*                                                                   @14\n*               SVCUPDTE_nnn                                        @14\n*                                                                   @14\n*               where nnn is a 3 digit zoned decimal number in the  @14\n*               range of 0-255 where the ESR routed SVC numbers of  @14\n*               109, 116, 122 & 137 are excluded.                   @14\n*                                                                   @14\n*               ESR routed SVC protection profiles will be of the   @14\n*               following form:                                     @14\n*                                                                   @14\n*               SVCUPDTE_aaabbb                                     @14\n*                                                                   @14\n*               where aaa is a 3 digit zoned decimal number         @14\n*               representing the ESR routed SVC number and must be  @14\n*               109, 116, 122 or 137 and bbb is the 3 digit zoned   @14\n*               decimal function code whose range is dependent on   @14\n*               the type of ESR SVC being installed. See the SVC    @14\n*               parameter in the \"Usage:\" section below.            @14\n*                                                                   @14\n*                                                                   @14\n* Restrictions: As currently implemented the invoking user must     @14\n*               have read level authority to a pre-existing         @14\n*               CL(#SNOMISC) profile that protects the SVC or ESR   @14\n*               SVC slot requested by the input parameters.         @14\n*                                                                   @14\n* Module Type:  Procedure requires batch execution.                 @14\n*                                                                   @14\n* Attributes:   RENT, RMODE ANY, AMODE 31, PSW Keys 8 & zero,       @14\n*                                                                   @14\n*               Supervisor and problem state                        @14\n*                                                                   @14\n* Operation: This program defines an SVC routine to the system as a @14\n*            replacement in the SVC or ESR SVC slot assigned to     @14\n*            that SVC or it can list protecting RACF profiles for   @14\n*            those SVC or ESR SVC slots defined for this program's  @14\n*            usage in the CLASS(#SNOMISC).                          @14\n*                                                                   @14\n*            All SVC installations are temporary in nature and any  @14\n*            newly installed SVC will be deleted when the address   @14\n*            space executing the SVCUPDTE program is either stopped @14\n*            via an OS STOP command or cancelled from execution by  @14\n*            a Job Entry System or OS CANCEL command.               @14\n*                                                                   @14\n*            ENQ is used to prevent simultaneous installation of    @14\n*            the same SVC by different jobs.                        @14\n*                                                                   @14\n* Usage: SVCUPDTE is invoked via JCL to either list existing        @14\n*            CL(#SNOMISC) profiles used by this program along with  @14\n*            a status report for these profiles showing any address @14\n*            space that may be using an SVC or ESR SVC slot for     @14\n*            testing purposes as handled by this program or the     @14\n*            program can be used to perform a temporary install of  @14\n*            SVC code for testing/development purposes.             @14\n*                                                                   @14\n*            A \"LIST\" request consists of a PARM field that         @14\n*            contains only the text string LIST. Any other parame-  @14\n*            ter specification will be considered to be an attempt  @14\n*            to install or replace an SVC on the current system     @14\n*            image.                                                 @14\n*                                                                   @14\n*            Minimum mode follows:                                  @14\n*            =====================                                  @14\n*                                                                   @14\n*            // EXEC PGM=SVCUPDTE,PARM='LIST'                       @14\n*                                                                   @14\n*            The above requests that a list of the current profiles @14\n*            and the usage status of those profiles is to be        @14\n*            generated to a system generated ddname as a spin-      @14\n*            sysout file since the SYSPRINT DD was missing.         @14\n*                                                                   @14\n*            Same as above but without using a spun sysout file:    @14\n*            ===================================================    @14\n*                                                                   @14\n*            // EXEC PGM=SVCUPDTE,PARM='LIST'                       @14\n*            //SYSPRINT DD SYSOUT=* <- optional                     @14\n*                                                                   @14\n*            SVC installs use the following JCL:                    @1*\n*            ===================================                    @1*\n*                                                                   @14\n*            The SYSPRINT DD is not used for the SVC install path   @14\n*                                                                   @14\n*            // EXEC PGM=SVCUPDTE,PARM='parameters'                 @14\n*            //SVCLIB DD DISP=SHR,DSN=data-set-name,                @14\n*            //          FREE=CLOSE <- strongly suggested           @14\n*            //SYSTSPRT DD SYSOUT=* <- optional                     @14\n*                                                                   @14\n*            In the above JCL we suggest that the data set name     @14\n*            provided on the SVCLIB DD be freed when the program    @14\n*            closes the associated DCB. If this is not done         @14\n*            exclusive use of the library while the SVCUPDTE        @14\n*            program is in execution.                               @14\n*                                                                   @14\n*            The SYSTSPRT DD being directed to a sysout class is    @14\n*            optional. If there is an issue related to the parsing  @14\n*            of the input parameters you should use the SYSTSPRT    @14\n*            DD to gather as much information about the suspected   @14\n*            parse failure before reportign the problem to the SAS  @14\n*            Help Desk.                                             @14\n*                                                                   @14\n*          The description of the content of the above \"parameters\" @14\n*          possibilities follows.                                   @14\n*                                                                   @14\n*          PARM='SVC(aaa,bbb), +                              @05@08@14\n*                LMOD(cccccccc), +                            @05@08@14\n*                ATTR(NPRMT,APF,AR),                                @14\n*                LOCKS(LOCAL,CMS,SRM,SALLOC,DISP),                  @14\n*                TYPE(t),                                           @14\n*                GOODNITE(hhmm), +                                  @14\n*                USER(uuuuuuuu)'                                    @14\n*                                                                   @14\n*          where;                                                   @14\n*                                                                   @14\n*            SVC  is the SVC number you want to install. There are  @14\n*                 2 formats for requesting an SVC install;          @14\n*                                                                   @14\n*                 SVC(aaa) for a standard (non-ESR routed) SVC or   @14\n*                 SVC(aaa,bbb) for an ESR-routed SVC where aaa is   @14\n*                 the ESR routed SVC and bbb is the function code.  @14\n*                 In the case of the SVC(aaa,bbb) format the aaa    @14\n*                 value must be one of the following values;        @14\n*                                                                   @14\n*                 109 for a T3/4 ESR SVC                            @14\n*                 116 for a T1 ESR SVC                              @14\n*                 122 for a T2 ESR SVC                              @14\n*                 137 for a T6 ESR SVC                              @14\n*                                                                   @14\n*                 The bbb value must be within an acceptable range  @14\n*                 for the type of ESR SVC being defined where the   @14\n*                 acceptable ranges are:                            @14\n*                                                                   @14\n*                 001-255 for a T3/4 ESR SVC (109)                  @14\n*                 001-014 for a T1   ESR SVC (116)                  @14\n*                 001-019 for a T2   ESR SVC (122)                  @14\n*                 001-007 for a T6   ESR SVC (137)                  @14\n*                                                                   @14\n*                 Specification of an aaa value that is less than   @14\n*                 200 that is not one of the above ESR routed SVC   @14\n*                 numbers requires RACF global special priviledges  @14\n*                 and read level access to the protecting profile   @14\n*                 which must exist.                                 @14\n*                                                                   @14\n*                 Note: The SVC(aaa,bbb) format of this parameter   @14\n*                       is mutually exclusive of the TYPE           @14\n*                       parameter.                                  @14\n*                                                                   @14\n*                 The SVC parameter specification is required.      @14\n*                                                                   @14\n*            cccccccc is the name of a load module (or alias)       @14\n*                 that you want to install as SVC nnn. It must      @14\n*                 have the following attributes:                    @14\n*                                                                   @14\n*                 RENT                                              @14\n*                 REFR                                              @14\n*                 REUS                                              @14\n*                 EXEC                                              @14\n*                 Not OVLY phased                                   @14\n*                 Not SCTR (Scatter) format                         @14\n*                 Not RMODE=SPLIT                                   @14\n*                 Not TEST/TESTRAN                                  @14\n*                 AMODE 24 or AMODE 31                              @14\n*                                                                   @14\n*                 The load module to be installed must be loaded    @14\n*                 from the 1st library that exists in the SVCLIB    @14\n*                 concatenation sequence.                           @14\n*                                                                   @14\n*                 Note: A future release may alleviate this         @14\n*                       restriction. Time just did not allow the    @14\n*                       writing of the necessary code for this      @14\n*                       release of the SVCUPDTE utility program.    @14\n*                                                                   @14\n*                 The LMOD parameter is required in all SVC         @14\n*                 install attempts (non LIST executions).           @14\n*                                                                   @14\n*            ATTR(NPRMT,APF,AR) is the list of SVC attributes to be @14\n*                 assigned to the newly installed SVC code where    @14\n*                 all are optional. The supported and available SVC @14\n*                 attributes are;                                   @14\n*                                                                   @14\n*                 NPRMT - SVC is not pre-emptable for I/O interrup- @14\n*                        tions. If a non-preemptable SVC sustains   @14\n*                        an I/O interrupt, the SVC, rather than the @14\n*                        highest priority ready work will get       @14\n*                        control when I/O processing is complete.   @14\n*                        A non-preemtable SVC cannot issue other    @14\n*                        SVCs and remain non-preemptable. If a non- @14\n*                        preemtable SVC issdues a STAX DEFER=NO     @14\n*                        macro the SVC routine remain non-preemp-   @14\n*                        table until it exits.                      @14\n*                         DEFAULT: SVC will be pre-emptible         @14\n*                                                                   @14\n*                 APF   - SVC caller must be APF authorized         @14\n*                         DEFAULT: Caller does not need to be APF   @14\n*                                  authorized.                      @14\n*                                                                   @14\n*                 AR    - SVC caller can be in Access Register (AR) @14\n*                         ASC mode.                                 @14\n*                         DEFAULT: AR mode callers are not          @14\n*                                  supported.                       @14\n*                                                                   @14\n*                 Note: This parameter is optional.                 @14\n*                                                                   @14\n*            LOCKS(LOCAL,CMS,SRM,SALLOC,DISP) is the list of        @14\n*                 available system locks for the SVC FLIH (First    @14\n*                 Level INterrupt Handler) to obtain before the SVC @14\n*                 entry point is given control on bahalf of the SVC @14\n*                 caller. Several of these locks are restricted as  @14\n*                 they could impact other users of the system in    @14\n*                 the case of a problem in the introduced SVC code. @14\n*                 The locks specifications supported are:           @14\n*                                                                   @14\n*                 LOCAL  - This is a local suspend lock used to     @14\n*                         serialize functions and storage within a  @14\n*                         local address space. One local lock       @14\n*                         exists per address space. Type 3/4 SVCs   @14\n*                         are always entered with the local lock    @14\n*                         obtained regardless of wheter the local   @14\n*                         lock was requested.                       @14\n*                                                                   @14\n*                 CMS    - This is a GLOBAL SUSPEND lock used for   @14\n*                          serialization on more than one address   @14\n*                          space when the serialization is not      @14\n*                          provided by one or more of the other     @14\n*                          available global locks. The CMS lock     @14\n*                          provides global serialization when k     @14\n*                          enablement is required. See the section  @14\n*                          titled \"Serialization Summary\" in the    @14\n*                          \"z/OS Diagnosis: Reference\" manual for   @14\n*                          additional information.                  @14\n*                                                                   @14\n*                 Note: T3/4 SVCs can only request LOCAL or         @14\n*                       LOCAL+CMS locks                             @14\n*                                                                   @14\n*                 The following lock specifications can only be     @14\n*                 requested by a userid that has RACF Global        @14\n*                 Special priviledges and also has ACCESS(READ)     @14\n*                 authority for the protecting CLASS(#SNOMISC)      @14\n*                 profile that protects the SVC of ESR SVC sllot.   @14\n*                                                                   @14\n*                 SRM    - This is a GLOBAL SPIN lock that          @14\n*                         serializes SRM control blocks and         @14\n*                         data used by the SRM/OPT/WLM components   @14\n*                         of z/OS.                                  @14\n*                                                                   @14\n*                 SALLOC - This is a GLOBAL SPIN lock that          @14\n*                         serializes external routines that enable  @14\n*                         a processor for either an emergency       @14\n*                         signal (EMS) or a malfunction alert (MA). @14\n*                                                                   @14\n*                 DISP   - This is a GLOBAL SPIN lock that          @14\n*                         serializes certain global functions that  @14\n*                         are controlled by the z/OS Dispatcher.    @14\n*                         Some examples are WEB and TIMER queues    @14\n*                         but there are a lot of others.            @14\n*                                                                   @14\n*                                                                   @14\n*                 Note: If no LOCKS parameter is supplied you will  @14\n*                       get the IBM default lock assignment for the @14\n*                       SVC type being installed.                   @14\n*                                                                   @14\n*            TYPE(t) is the parameter that supplies the SVC type    @14\n*                 that is to be installed. The possible values for  @14\n*                 t are;                                            @14\n*                                                                   @14\n*                 1 - for a type 1 SVC                              @14\n*                 2 - for a type 2 SVC                              @14\n*                 3 - for a type 3 SVC                              @14\n*                 4 - for a type 4 SVC                              @14\n*                 6 - for a type 6 SVC                              @14\n*                                                                   @14\n*                 The TYPE specification and the SVC(aaa,bbb) form  @14\n*                 of the SVC parameter are mutually exclusive.      @14\n*                                                                   @14\n*                 A type 3 SVC traditionally identified a function  @14\n*                 that is contained in a single load module while   @14\n*                 a type 4 SVC identified a a function that loads   @14\n*                 additional modules. In the past one could         @14\n*                 identify these loaded modules as IGC01nnn,...,    @14\n*                 and IGC0xnnn. (IGC01nnn is the first module that  @14\n*                 IGC00nnn loads, IGC02nnn is the second module     @14\n*                 that IGC00nnn loads, etc.) These old conventions  @14\n*                 no longer hold water and the SVCUPDTE program     @14\n*                 although supporting both TYPE(3) and TYPE(4)      @14\n*                 specifications it does not support the specifica- @14\n*                 tion of more than one LMOD to provide the         @14\n*                 traditional TYPE(4) environment. All know IBM     @14\n*                 and vendor utilities used to display the SVC      @14\n*                 table entries will show \"T3/4\" for either a type  @14\n*                 3 or 4 SVC entry.                                 @14\n*                                                                   @14\n*                 For a non-ESR SVC installation...SVC(aaa) form    @14\n*                 of the SVC parameter the TYPE parameter is        @14\n*                 required.                                         @14\n*                                                                   @14\n*            GOODNITE(hhmm) is the parameter that supplies a time   @14\n*                 later on the same execution day that the SVCUPDTE @14\n*                 program will use to automatically uninstall the   @14\n*                 installed SVC and place back in service the       @14\n*                 previously existing SVC in the same SVC or ESR    @14\n*                 SVC slot.                                         @14\n*                                                                   @14\n*                 This parameter is optional.                       @14\n*                                                                   @14\n*            USER(uuuuuuuu) parameter is used to supply a \"filter\"  @14\n*                 userid. The logic is such that only this userid   @14\n*                 will have access to the newly installed SVC code  @14\n*                 while all other users of the SVC will have their  @14\n*                 SVC requests sent to the old entry point.         @14\n*                                                                   @14\n*                 Note: When using the USER(uuuuuuuu) parameter     @14\n*                       one must be aware that a single SVC or ESR  @14\n*                       SVC slot supports both the old SVC and new  @14\n*                       SVC code. Thus any ATTR or LOCKS assignment @14\n*                       for the new SVC will be in place for the    @14\n*                       old SVC callers also. Tus we discourage the @14\n*                       use of the USER(uuuuuuuu) parameter in      @14\n*                       combination with any change to the original @14\n*                       SVC or ESR SVC slot's locks or attributes   @14\n*                       supplied by any LOCKS or ATTR parameters    @14\n*                       furnished by the user for the new SVC. A    @14\n*                       case in point. Assume ATTR(APF) was speci-  @14\n*                       fied in combination with the USER(uuuuuuuu) @14\n*                       parameter for a replacement SVC. If this    @14\n*                       was done the result would be that both the  @14\n*                       calls to the old SVC and the calls to the   @14\n*                       new SVC would have to come from an APF      @14\n*                       authorized environment. This may not have   @14\n*                       been the intent of the SVC installer.       @14\n*                                                                   @14\n* Return codes:                                                       *\n*                                                                   @14\n*        0  Successful completion: SVC has been installed and       @14\n*           uninstalled or the requested LIST operation completed   @14\n*           successfully                                            @14\n*                                                                   @14\n*        1  SVCUPDTE program not APF authorized                     @14\n*                                                                   @14\n*        2  Required SVCUPDTE profile does not exist                @14\n*                                                                   @14\n*        3  Required SVC keyword not present                        @14\n*                                                                   @14\n*        4  Required SVCLIB DDname missing                          @14\n*                                                                   @14\n*        6  Required IRRSEQ00 service not available                 @14\n*                                                                   @14\n*        8  User not authorized to add/replace SVC specified        @14\n*                                                                   @14\n*        9  ERRET routine driven for LOAD SVC                       @14\n*                                                                   @14\n*       10  Non-zero return code from IKJTSOEV service              @14\n*                                                                   @14\n*       12  ENQ for SVCUPDTE resource failed                        @14\n*                                                                   @14\n*       16  LMOD supplied module name not found on SVCLIB library   @14\n*                                                                   @14\n*       18  Unable to obtain IRRSEQ00 workarea                      @14\n*                                                                   @14\n*       19  Unable to obtain RIBs workarea                          @14\n*                                                                   @14\n*       20  Illegal execution environment                           @14\n*                                                                   @14\n*       24  Backing slot for requested SVC or ESR-SVC is not T2/3/4 @14\n*           (obsolete)                                              @14\n*                                                                   @14\n*       26  Report sysout file allocation failure                   @14\n*                                                                   @14\n*       32  Open for report sysout file failed                      @14\n*                                                                   @14\n*       34  SAF extract failure                                     @14\n*                                                                   @14\n*       35  ESR T1/2/6 SVCs not supported (obsolete)                @14\n*                                                                   @14\n*       36  No SVCUPDTE profiles found                              @14\n*                                                                   @14\n*       37  EXTR000 - not CLASS(#SNOMISC) profile returned          @14\n*                                                                   @14\n*       38  EXTR000 - SD (Segment Descriptor) number returned was   @14\n*           not 1                                                   @14\n*                                                                   @14\n*       39  EXTR000 - BASE segment not returned                     @14\n*                                                                   @14\n*       40  EXTR000 - Invalid length SVCUPDTE_* profile found on    @14\n*           extract operation                                       @14\n*                                                                   @14\n*       41  CHKINUSE - unexpected GQSCAN return code received       @14\n*                                                                   @14\n*       42  Unable to acquire MLWTO workarea                        @14\n*                                                                   @14\n*       44  OPEN for SVCLIB data set failed                         @14\n*                                                                   @14\n*       48  SWAREQ request failed                                   @14\n*                                                                   @14\n*       52  SVCLIB not DSORG=PO/POE                                 @14\n*                                                                   @14\n*       56  SVCLIB not RECFM=U                                      @14\n*                                                                   @14\n*       60  SVCLIB library cannot be multi-volume                   @14\n*                                                                   @14\n*       64  Member name coded on SVCLIB (not supported)             @14\n*                                                                   @14\n*       68  Invalid LOCKS parameter supplied                        @14\n*                                                                   @14\n*       72  SVC number parameter supplied not numeric               @14\n*                                                                   @14\n*       73  SVCUPDTE reveral failed                                 @14\n*                                                                   @14\n*       76  GOODNITE time (hhmm) supplied parameter not numeric     @14\n*                                                                   @14\n*       80  SVC number not in range 0-255                           @14\n*                                                                   @14\n*       84  GOODNITE time (hhmm) supplied parameter out of range    @14\n*                                                                   @14\n*       88  GOODNITE time (hhmm) supplied time less than current    @14\n*           time                                                    @14\n*                                                                   @14\n*       92  ESR T3/4 naming convention violation (obsolete)         @14\n*                                                                   @14\n*       96  LMOD module attribute requirements not met              @14\n*                                                                   @14\n*      100  LOAD for LMOD module failed                             @14\n*                                                                   @14\n*      104  LMOD module is RMODE=SPLIT                              @14\n*                                                                   @14\n*      105  LMOD module not marked RENT on SVCLIB                   @14\n*                                                                   @14\n*      106  LMOD module not marked REUS on SVCLIB                   @14\n*                                                                   @14\n*      107  LMOD module not marked REFR on SVCLIB                   @14\n*                                                                   @14\n*      108  LMOD module not marked EXEC on SVCLIB                   @14\n*                                                                   @14\n*      109  LMOD module cannot be marked OVLY on SVCLIB             @14\n*                                                                   @14\n*      110  LMOD module cannot be marked SCTR on SVCLIB             @14\n*                                                                   @14\n*      111  LMOD module cannot be marked SPLIT on SVCLIB            @14\n*                                                                   @14\n*      112  Bad lgic (loc #__) - R15=________                       @14\n*                                                                   @14\n*      113  LMOD module cannot be marked TEST/TESTRAN on SVCLIB     @14\n*                                                                   @14\n*      114  LMOD module must be on 1st library in any SVCLIB        @14\n*           supplied concatenation sequence                         @14\n*                                                                   @14\n*      120  Insufficient CSA/ECSA for SVC module to be installed    @14\n*                                                                   @14\n*      121  Insufficient ESQA for USER filter code                  @14\n*                                                                   @14\n*      124  User not authorized to set requested LOCK               @14\n*                                                                   @14\n*      128  Missing input parameter/parameters                      @14\n*                                                                   @14\n*      132  Excessive input parameter length                        @14\n*                                                                   @14\n*      136  Invalid character(s) in input parameters found          @14\n*                                                                   @14\n*      137  IKJPARS failed parameter string                         @14\n*                                                                   @14\n*      140  Invalid PARM field found                                @14\n*                                                                   @14\n*      141  SVC or ESR SVC slot ENQ SYSTEM failed                   @14\n*                                                                   @14\n*      142  Non-ESR SVC request requires TYPE be specified          @14\n*                                                                   @14\n*      143  SVCUPDTE service request failed                         @14\n*                                                                   @14\n*      144  QEDIT failure                                           @14\n*                                                                   @14\n* Abends:                                                             *\n*                                                                   @14\n*      U901  - Unable to obtain ENQ for SYSZSVC table               @14\n*                                                                   @14\n*      U902  - QEDIT limit set failure                              @14\n*                                                                   @14\n*      U333  - Invalid logic detected during parse processing       @14\n*                                                                   @14\n*      U334  - Logic error detected in TYPE assignment              @14\n*                                                                   @14\n*      U1001 - Invalid SVC type passed parsing                      @14\n*                                                                   @14\n*                                                                     *\n* Modification Log                                                    *\n* ================                                                    *\n* D a t e tag         Description of change & responsible party       *\n* ======= === ======================================================= *\n* 01Jun96 n/a -Genesis. Goal to reduce IPLs for SVC Type 3 installs.  *\n*              **********************************************<SNOJRH> *\n* 10Jun96 @01 -Leave SVC installed and exit if module was loaded from *\n*              LPA and \"goodnight\" time missing in PARM.*****<SNOJRH> *\n* 12Jun96 @02 -Issue ENQ on SYSZSVC/table to prevent simultaneous     *\n*              updates.**************************************<SNOJRH> *\n* 14Jun96 @03 -Restore address of old SVC after temporary install of  *\n*              SVC.******************************************<SNOJRH> *\n* 10Oct97 @04 -Fix \"good-night\" routine which hasn't been working for *\n*              a while.**************************************<SNOJRH> *\n* 28Oct98 @05 -Restrict access to new SVC to userid specified in PARM *\n*              field. Idea from Gilbert Saint-Flour. Survive LPA      *\n*              resident check when performing screen.********<SNOJRH> *\n* 16Nov98 @06 -Support to install IGX00nnn named module as a Type-3   *\n*              ESR function (only ESR SVC 109 supported).****<SNOJRH> *\n* 01Dec98 @07 -Prevent conflict on ENQ when SVC 109 is being used for *\n*              ESR install when ESR numbers are unique and being      *\n*              tested simultaneously.************************<SNOJRH> *\n* 01Dec98 @08 -PARM option for LOCAL and CMS locks for special test   *\n*              requirements.*********************************<SNOJRH> *\n* 27Nov01 @09 -Reviewed support for dynamic LPA and found CDNIP check *\n*              following CHECKLPA label is sufficient and that the    *\n*              ECVTDLPF (first) through ECVTDLPL (last) chain does    *\n*              not need to be scanned for dynamic LPA queue           *\n*              existence.************************************<SNOJRH> *\n* 12Jul11 @10 -Updated for FLAG(PAGE0)***********************<SNOSEW> *\n* 15Dec11 @11 -Support for Large Page Support...i.e support for       *\n*              1MB page sizes. PGSER PROTECT|UNPROTECT operations are *\n*              not supported for locations in the R/O Nucleus even if *\n*              1MB page support is not enabled on the newer           *\n*              processors the R/O Nucleus will be backed by 1MB       *\n*              pages. If PGSER PROTECT|UNPROTECT operations are       *\n*              attempted on the newer processors for areas in the     *\n*              R/O nucleus a S18A abend will occur with the reason    *\n*              code placed in GPR0 identifying the operation. The     *\n*              code is now upward and downward compatible for all     *\n*              supported z/OS releases.***************<SNOJRH/SNOSEW> *\n* 15Dec11 @12 -Fix bug left over from @06 change where wrong register *\n*              used to preserve ESR function code in the ESR# field.  *\n*              **********************************************<SNOJRH> *\n* 16Dec11 @13 -Fix bug left over from @07 change where SVCNO was used *\n*              execute form of ENQ instead of RNAME. This resulted in *\n*              the SVC number parameter being repeated twice as the   *\n*              RNAME when an ESR SVC was involved instead of the SVC  *\n*              number followed by the ESR number.************<SNOJRH> *\n* 25Oct13 n/a -Replaced displacement branches with relative branches. *\n*              **********************************************<SNOJRH> *\n* 22Jul15 @14 -Version 2 Release 0 (total rewrite):                   *\n*              -Program now designed to run from the system LNKLST    *\n*               by verifying that it is not being executed under TEST *\n*               or TESTAUTH.                                          *\n*              -SVC load modules will now be loaded from SVCLIB       *\n*               instead of STEPLIB.                                   *\n*              -Above SVCLIB library does NOT need to be APF          *\n*               authorized.                                           *\n*              -Will now issue WTO indicating what user has installed *\n*               what SVC.                                             *\n*              -Requires batch execution now instead of as a started  *\n*               procedure.                                            *\n*              -Lots of new return codes added due to use of IRRSEQ00 *\n*               (RACF Administration) service and support for users   *\n*               requesting an inventory report of registered SVC slot *\n*               profiles using that service.                          *\n*              -Users attempting to install/replace an SVC will have  *\n*               the following CLASS(#SNOMISC) rule checked:           *\n*                                                                     *\n*               SVCUPDTE_xxxyyy                                       *\n*                                                                     *\n*               where;                                                *\n*                                                                     *\n*               xxx is the SVC number and                             *\n*                                                                     *\n*               yyy is the ESR function code if xxx is an ESR routed  *\n*                   SVC. The yyy portion is not present if the        *\n*                   xxx portion represents a standard SVC.            *\n*                                                                     *\n*              **********************************************<SNOJRH> *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                    @14\n* Local macros                                                      @14\n         SPACE 1                                                    @14\n*-----------------------------------------------------------------* @14\n*  $RWTO macro for writing messages to the operator where the WTO * @14\n*  MF=L template is remote.                                       * @14\n*-----------------------------------------------------------------* @14\n         MACRO ,                                                    @14\n&NAME    $RWTO &MSG,&WRITE=YES                                      @14\n         AIF   ('&NAME' EQ '').NONAME                               @14\n&NAME    DS    0H                                                   @14\n.NONAME  ANOP                                                       @14\n         AIF   (K'&MSG EQ 0).ERROR1                                 @14\n         AIF   (K'&MSG GT 8).ERROR2                                 @14\n         AIF   ('&MSG' EQ 'WTOD').NOMVC   Bypass MVC if msg set up  @14\n         LARL  R1,&MSG                 Resolve long relative @      @14\n         MVC   WTOD(&MSG.L),0(R1)      Copy WTO message to DWS area @14\n         AIF   ('&WRITE' EQ 'NO').NOWRITE Bypass write if requested @14\n.NOMVC   ANOP                                                       @14\n         LA    R1,WTOD                 Load WTO address             @14\n         XR    R0,R0                   Clear R0                     @14\n         WTO   MF=(E,(1))               & issue message to operator @14\n         MEXIT                                                      @14\n.NOWRITE ANOP                                                       @14\n         MEXIT                                                      @14\n.ERROR1  MNOTE 8,'ERROR:  Message variable name missing'            @14\n         MEXIT                                                      @14\n.ERROR2  MNOTE 8,'ERROR:  Message variable name must be LT 8 bytes' @14\n         MEND                                                       @14\n*\nSVCUPDTE CSECT\nSVCUPDTE AMODE 31\nSVCUPDTE RMODE ANY\n*        USING SVCUPDTE,R15        Initial addressability           @14\n*        J     RESUME              Go to resume point               @14\n         J     MAIN000             Go to resume point               @14\n*\nPGMNAME  DC    CL8'SVCUPDTE'\nPGMVER   DC    CL8'V2R0M0'                                          @14\nPGMDATE  DC    CL8'&SYSDATC'\nPGMTIME  DC    CL8'&SYSTIME'\n*\n*RESUME  DS    0H                                                   @14\nMAIN000  DS    0H                                                   @14\n*        DROP  R15                 Lose initial addressability\n*        STM   R14,R12,12(R13)     Save caller's registers          @14\n         BAKR  R14,0               Save status on linkage stack     @14\n         LARL  R12,LTORG_AREA                                       @14\n         USING (LTORG_AREA,LTORG_AREA_END),R12                      @14\n         LAE   R12,0(R12,0)        Establish LTORG base             @14\n*        BALR  R10,0               Set base register                @14\n*        USING *,R10               Inform assembler                 @14\n         L     R4,0(,R1)       R4->PARM address (preserve for PARSE)\n         L     R0,=A(DWSLEN)                                        @14\n*                                                                   @14\n*        Obtain & clear working storage                             @14\n*                                                                   @14\n         STORAGE OBTAIN,           Get storage                      @14X\n               LENGTH=(R0),                                         @14X\n               LOC=BELOW,                                           @14X\n               BNDRY=PAGE                                           @14\n         AGO   .JRH0217A                                            @14\n         GETMAIN R,LV=DYNAML       Get storage\n         ST    R13,4(,R1)          Chain\n         ST    R1,8(,R13)           save\n         LR    R13,R1                areas\n         USING DYNAM,R13           DWS addressability\n         LA    R14,DYNAM+72        Clear work area\n         LA    R15,DYNAML-72       \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n         SLR   R1,R1               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n         MVCL  R14,R0              \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n.JRH0217A ANOP                                                      @14\n*                                                                   @14\n*        Clear work area & set LSE indicator in stack               @14\n*                                                                   @14\n         LAE   R13,0(R1,0)         Load storage address             @14\n         USING DWS,R13             Addressability                   @14\n         LAE   R0,DWS              Clear                            @14\n         L     R1,=A(DWSLEN)                                        @14\n         LAE   R14,0(0,0)           storage                         @14\n         SR    R15,R15                                              @14\n         MVCL  R0,R14                area                           @14\n*                                                                   @14\n*        Initialize some one time only DWS fields                   @14\n*                                                                   @14\n         ST    R13,DWSADDR         Save DWS address (for ESTAEX)    @14\n         MVC   SAVEAREA+4(4),=C'F1SA'  Put acronym in save area     @14\n*                                                                   @14\n         ST    R4,@INPARMS         Save @  parameters in DWS        @14\n         XC    RETCODE,RETCODE     Clear higher level return code   @14\n******************************************************************* @14\n*                                                                 * @14\n* Note: For all BRASL invoked subroutines called below the called * @14\n*       routine is responsible for:                               * @14\n*                                                                 * @14\n*       1) Issuing an appropriate WTO regarding any failure       * @14\n*       2) Returning here to exit with the return code from the   * @14\n*          subroutine posted in the RETCODE field                 * @14\n*                                                                 * @14\n*        Perform main environmental checks before parsing         * @14\n*        parameters.                                              * @14\n*                                                                 * @14\n******************************************************************* @14\n         BRASL R14,INIT000         Perform initial checks           @14\n         L     R15,RETCODE         Restore return code              @14\n         LTR   R15,R15             Any errors ?                     @14\n         JNZ   MAINX               ...jif so, MLT                   @14\n*                                                                   @14\n*        Acquire storage for RIBs return area                       @14\n*                                                                   @14\n*        -This area is common to reporting (LIST) & install         @14\n*         operations and should be freed on exit from the mainline  @14\n*         routine.                                                  @14\n*                                                                   @14\n         LARL  R1,RIBSPACE         Get @ of size of area to acquire @14\n         L     R0,0(R1)            R0 = size of area to acquire     @14\n         ST    R0,AMOUNTL          Save in GQSCAN structure         @14\n         STORAGE OBTAIN,           Get working storage              @14X\n               COND=YES,                                            @14X\n               LENGTH=(R0),                                         @14X\n               LOC=ANY,                                             @14X\n               BNDRY=PAGE                                           @14\n         LTR   R15,R15             Did we get the RIBs storage ?    @14\n         JZ    MAIN010             ...jif yes, continue             @14\n*                                                                   @14\n*        Unable to acquire RIBs work area                           @14\n*                                                                   @14\n         $RWTO MSG018A,WRITE=YES                                    @14\n         LHI   R15,BADENV19        Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     MAINX                 & go exit w/ return code       @14\n*                                                                   @14\n*        Clear obtained RIBs work area                              @14\n*                                                                   @14\nMAIN010  DS    0H                                                   @14\n         OI    FLAGS,F1#RIBSA      Indicate RIBs area acquired      @14\n         ST    R1,RIBS             Save pointer for later           @14\n         ST    R1,RIBSPACE_p       Save pointer for refresh         @14\n         LR    R2,R1               Dynamic address to R2 for MVCL   @14\n         LARL  R3,RIBSPACE         Get size of area to clear        @14\n         L     R3,0(R3)            R3 = size of area to clear       @14\n         LA    R4,0                Source                           @14\n         LA    R5,0                Source len of 0 + pad byte of 0  @14\n         MVCL  R2,R4               Clear the dynamic RIBs storage   @14\n*                                                                   @14\n*        Check to see if invoker has system level privileges        @14\n*                                                                   @14\n         BRASL R14,SYSC000         Go check for system priviledges  @14\n         L     R15,RETCODE         Restore return code              @14\n         LTR   R15,R15             Any errors ?                     @14\n         JNZ   MAINX               ...jif so, MLT                   @14\n*                                                                   @14\n*        Parse input parameters & stage for processing              @14\n*                                                                   @14\n*        J     GOLIST              <development - to skip parse>    @14\n         BRASL R14,PARS000         Go parse input parameters        @14\n         L     R15,RETCODE         Restore return code              @14\n         LTR   R15,R15             Any errors ?                     @14\n         JNZ   MAINX               ...jif so, MLT                   @14\n*                                                                   @14\n*        Was LIST requested ? If so go generate report              @14\n*                                                                   @14\n*        -LIST option skips environmental checks in ENV000          @14\n*                                                                   @14\n         TM    Parse_flags,Parse_LIST                               @14\n         JNO   MAIN100                                              @14\nGOLIST   DS    0H                  <development - to skip parse>    @14\n         BRASL R14,REPORT          Generate SVC slot profile report @14\n         J     MAINX               Just return for LIST option      @14\n*                                                                   @14\n* Note: Successful parse means at least minimum required            @14\n*       parameters have been supplied and all flags regarding       @14\n*       SVC attributes have been validated & set for the processing @14\n*       phase.                                                      @14\n*                                                                   @14\n*        Perform environmental checks                               @14\n*                                                                   @14\nMAIN100  DS    0H                                                   @14\n         BRASL R14,ENV000          Go check environmentals          @14\n         L     R15,RETCODE         Restore return code              @14\n         LTR   R15,R15             Any errors ?                     @14\n         JNZ   MAINX               ...jif so, MLT                   @14\n*                                                                   @14\n*        Go load & install the SVC                                  @14\n*                                                                   @14\n         BRASL R14,INST000         Go install SVC                   @14\n         L     R15,RETCODE         Restore return code              @14\n         LTR   R15,R15             Any errors ?                     @14\n         JNZ   MAINX               ...jif so, MLT                   @14\n*                                                                   @14\n*        Free RIBs work area if acquired                            @14\n*                                                                   @14\nMAINX    DS    0H                                                   @14\n         TM    FLAGS,F1#RIBSA      Was RIBs work area acquired ?    @14\n         JNO   MAINX_010           ...jif not , skip free           @14\n         L     R9,AMOUNTL          R9 = size of area to free        @14\n         L     R3,RIBS             R3 -> @ of area to free          @14\n         STORAGE RELEASE,                                           @14X\n               LENGTH=(R9),                                         @14X\n               ADDR=(R3)           Free WIBs work area storage      @14\n*                                                                   @14\n*        Close any still open files                                 @14\n*                                                                   @14\nMAINX_010 DS   0H                                                   @14\n         USING IHADCB,R10                                           @14\n         LA    R10,SVCLIB          R10 -> SVCLIB DCB                @14\n         TM    DCBOFLGS,DCBOFOPN   Is dataset open ?                @14\n         JNO   MAINX_020           ...jif not, skip CLOSE           @14\n         OI    W#OPNDO,X'80'       Indicate end of parameter list   @14\n         CLOSE ((R10)),MODE=31,MF=(E,W#OPNDO) Close SVCLIB          @14\n         DROP  R10                 Lose SVCLIB DCB addressability   @14\nMAINX_020 DS   0H                                                   @14\n         L     R9,RETCODE          Restore return code for caller   @14\n         STORAGE RELEASE,                                           @14X\n               LENGTH=DWSLEN,                                       @14X\n               ADDR=(R13)          Free DSA storage                 @14\n         LR    R15,R9              Set return code for caller       @14\n         PR                    Return to caller via Linkage Stack   @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - INST000 - setup && install SVC'          @14\n******************************************************************* @14\n*                                                                 * @14\n* This routine is responsible for the following functions:        * @14\n*                                                                 * @14\n* 1) Obtain communications ECB address for support of the system  * @14\n*    STOP command and disable SMF JWT recording.                  * @14\n* 2) ENQueue on SVCUPDTE_xxx or SVCUPDTE_xxxyyy to serialize      * @14\n*    update to specific SVC table entry by any other address      * @14\n*    space on this same system.                                   * @14\n* 3) Fetch SVC or ESR-SVC entry to be replaced and squirrel it    * @14\n*    away in the OLDENTRY field. The entry point for the \"old\"    * @14\n*    SVC table entry is also saved in the SVCENTRY_PTR field.     * @14\n* 4) Obtain SP241 or SP228 CSA or ECSA as appropriate for the     * @14\n*    loading of the \"new\" SVC code. The address of this area is   * @14\n*    saved in the @CSAEPN field. The entry point address is       * @14\n*    calculated and saved in the @CSAEPN@ field. The length of    * @14\n*    this area is located in the MODSIZE field.                   * @14\n* 5) Perform a directed load of the user's SVC code into the      * @14\n*    area obtained in 4).                                         * @14\n* 6) CLOSE the SVCLIB data set.                                   * @14\n* 7) If USERID filtering is to be used obtain SP245 SQA storage   * @14\n*    for copying and updating filter code which will become the   * @14\n*    SVC/ESR slot's entry point value. The address of this area   * @14\n*    is saved in the SQA_ADDR field. The length of this area is   * @14\n*    the value of the CHKU500L equate.                            * @14\n* 8) Construct SVCUDTE parameter list based on flags & attributes * @14\n*    captured during parse processing for the \"new\" SVC entry.    * @14\n* 9) Construct SVCUDTE parameter list based on the SVC entry      * @14\n*    captured in the OLDENTRY field in 3) above.                  * @14\n* 10) Enqueue on the SVC table to serialize SVC table update.     * @14\n* 11) Update the SVC table                                        * @14\n* 12) Release enqueue on the system SVC table                     * @14\n* 13) If GOODNITE time specified issue STIMERM supplying address  * @14\n*     of communications ECB and the GOODNITE exit routine's       * @14\n*     address to be given control.                                * @14\n* 14) Issue ESTAE to be given control on CANCEL command for this  * @14\n*     address space                                               * @14\n* 15) Issue LONG=YES WAIT for a STOP command (or CANCEL command)  * @14\n*     Obtain enqueue on SVC table.                                * @14\n* 16) Place old SVC entry back in the SVC slot.                   * @14\n*     Release enqueue on SVC table.                               * @14\n* 17) Free ESAQ storage occupied by filter code.                  * @14\n* __) Free CSA/ECSA storage occupied by user's SVC code.          * @14\n* __) Exit.                                                       * @14\n*                                                                 * @14\n******************************************************************* @14\nINST000  DS    0H                                                   @14\n         STM   R14,R12,SAVE@L1+12  Save caller's registers          @14\n*\n*        Disable SMF JWT\n*\n         MODESET KEY=ZERO,MODE=SUP\n         L     R2,PSAAOLD-PSA(0,0) Our ASCB\n         OI    ASCBRCTF-ASCB(R2),ASCBTOFF  Present S522 abends\n*\n*        Initialize console interface\n*\n         MODESET KEY=NZERO,MODE=PROB Return to TCB key\n         L     R3,CVTPTR(0,0)      Get CVT address\n         USING CVT,R3              CVT addressability\n         L     R4,CVTTCBP          Get IEATCBP address\n         DROP  R3                  Drop CVT\n         L     R4,4(,R4)           Get current TCB address\n         USING TCB,R4              TCB addressability\n         L     R5,TCBJSCB          Get JSCB address\n         DROP  R4                  Drop TCB\n         USING IEZJSCB,R5          JSCB addressability\n         L     R6,JSCBCSCB         Get CSCB address\n         ST    R6,@CSCB            Save CSCB address\n         USING CSCB,R6             CSCB addressability\n         L     R8,CHCSCXP          R8 -> CSCX\n         USING CSCX,R8             CSCX addressability\n         L     R0,CHECBP           Load STOP/MODIFY ECB address\n         ST    R0,CIBECB           Store ECB address in work area\n         ICM   R7,B'1111',CHCIBP   Get CIB address\n         LTR   R7,R7               Is it a START CIB ?\n         JZ    INST005             ...jif not, we don't have one\n         USING CIB,R7              CIB addressability\n         CLI   CIBVERB,CIBSTART    Is this the START CIB ?\n         JNE   INST005             ...jif not, keep it in the chain\n         QEDIT ORIGIN=CHCIBP,BLOCK=(7) Free the START CIB\n         LTR   R15,R15             Was the QEDIT successful ?\n         JZ    INST005             ...jif so...go set CIB limit\n*\n*        Issue message about QEDIT failure (free)\n*\n         LR    R4,R15              Preserve QEDIT return code\n         ST    R15,DWD             \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n         $RWTO MSG914A,WRITE=NO\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG914AA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,BADQEDIT        Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     INSTX                 & make like trees\nINST005  DS    0H                  Set CIB limit\n         QEDIT ORIGIN=CHCIBP,CIBCTR=1  Set CIB limit to one\n         LTR   R15,R15             Was the QEDIT successful ?\n         JZ    INST007             ...jif so...go to resume point\n*\n*        Issue message about QEDIT failure (limit=1)\n*\n         LR    R4,R15              Preserve QEDIT return code\n         ST    R15,DWD             \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n         $RWTO MSG917A,WRITE=NO\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG917AA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,BADQEDIT        Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     INSTX                 & make like trees\n*\n*        CIBECB field contains communications ECB address\n*\n*                                                                   @14\n*        ENQueue on SVC table entry slot as used by this program    @14\n*                                                                   @14\n*        Note: QNAME & RNAME already filled in by CHKINUSE routine  @14\n*        Note: RNAME length found in RNAMEEL field also by CHKINUSE @14\n*                                                                   @14\nINST007  DS    0H                                                   @14\n         MVC   ENQL(ENQMODLL),ENQMODL  Install model slot ENQ       @14\n         XR    R7,R7               Clear RNAME length register      @14\n         ICM   R7,B'0001',RNAMEEL  Insert length                    @14\n         ENQ   (QNAME,RNAME,E,(R7),SYSTEM),RET=USE,MF=(E,ENQL)      @14\n         ST    R15,DWD             Save return code                 @14\n         LTR   R15,R15             Did we get the SVC slot ?        @14\n         JZ    INST010             ...jif so                        @14\n*                                                                   @14\n*        Issue ENQ failure during install message                   @14\n*                                                                   @14\n         $RWTO MSG909A,WRITE=NO                                     @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG909AA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,BADFENQ         Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     INSTX                 & go exit w/ return code       @14\n*                                                                   @14\n*        We now have ENQ on SVC table slot used by this program     @14\n*                                                                   @14\n*        Fetch SVC table entry for base SVC number                  @14\n*                                                                   @14\nINST010  DS    0H                                                   @14\n*        WTO   'INST010 - we obtained SVC slot ENQueue'             @14\n         L     R3,CVTPTR(0,0)      R3->CVT                          @14\n         USING CVTMAP,R3           CVT addressability               @14\n         L     R4,CVTABEND         R4->Secondary CVT                @14\n         DROP  R3                  Drop CVT                         @14\n         USING SCVTSECT,R4         SCVT addressability              @14\n         SLR   R5,R5               Clear for insert                 @14\n         ICM   R5,B'0001',SVC#     Insert SVC number                @14\n         SLL   R5,3                Multiply by 8                    @14\n         AL    R5,SCVTSVCT         Add origin of SVC table          @14\n         USING SVCENTRY,R5         SVC entry addressability         @14\n         ST    R5,SVCENTRY_PTR     Save entry address               @14\n*                                                                   @14\n*        See if ESR SVC to fetch correct entry                      @14\n*                                                                   @14\n         TM    ATTR_FLAGS,ATTR_ESR ESR SVC request ?                @14\n         JNO   INST020             ...jif not                       @14\n*                                                                   @14\n*        Adjust for ESR slot to fetch correct entry                 @14\n*                                                                   @14\n         XR    R1,R1               Clear for insert                 @14\n         ICM   R1,B'0001',ESR#     Insert binary ESR #              @14\n         SLL   R1,3                Multiply by 8                    @14\n         L     R5,SVCEP            R5->ESR table                    @14\n         LA    R5,SVCENTRY+8(R1)   R5->ESR entry                    @14\n         ST    R5,SVCENTRY_PTR     Save ESR entry address           @14\nINST020  DS    0H                                                   @14\n         MVC   OLDENTRY,SVCENTRY   Save old SVC entry contents      @14\n*        WTO   'INST020 - we obtained SVC slot info'                @14\n         DROP  R5                  Drop SVC entry addressability    @14\n*                                                                   @14\n*        Obtain CSA/ECSA storage for user's SVC code                @14\n*                                                                   @14\n         L     R2,MODSIZE          Obtain in storage key 0          @14\n         MODESET KEY=ZERO,MODE=SUP Go to Key 0 SUP state            @14\n         TM    FLAGS,F1#AM31       AMODE = 31/64 module ?           @14\n         JNO   INST030            ...jif not                        @14\n* Obtain 31-bit ECSA SP228 storage for the load module              @14\n         STORAGE OBTAIN,                                            @14X\n               LOC=(31,64),                                         @14X\n               LENGTH=(2),                                          @14X\n               ADDR=(3),           Return address in GPR3           @14X\n               SP=228,                                              @14X\n               COND=YES                                             @14\n         J     INST040             Go to common check               @14\n* Obtain 24-bit CSA SP228 storage for the load module               @14\nINST030  DS    0H                                                   @14\n         STORAGE OBTAIN,                                            @14X\n               LOC=(24,64),                                         @14X\n               LENGTH=(2),                                          @14X\n               ADDR=(3),           Return address in GPR3           @14X\n               SP=228,                                              @14X\n               COND=YES                                             @14\nINST040  DS    0H                                                   @14\n         LR    R4,R15             Save STORAGE return code          @14\n         MODESET KEY=NZERO,MODE=PROB Return to K8 problem state     @14\n         LTR   R4,R4              Did we get the ECSA/CSA ?         @14\n         JZ    INST050            ...jif so                         @14\n*                                                                   @14\n*        Obtain for CSA/ECSA storage failed                         @14\n*                                                                   @14\n         $RWTO MSG130E,WRITE=NO                                     @14\n         ST    R2,DWD             Save length in source location    @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG130EA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         MVC   MSG130EB,LMOD       Install LMOD name                @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,BADNOCSA        Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     INSTX                 & go exit w/ return code       @14\n*                                                                   @14\n*        Indicate we have CSA/ECSA - address is in GPR3             @14\n*                                                                   @14\nINST050  DS    0H                                                   @14\n         OI    FLAGS,F1#GOTCSA     We have obtained CSA/ECSA        @14\n         ST    R3,@CSAEPN          Save address for LOAD/free       @14\n*        WTO   'INST050 - we obtained CSA/ECSA'                     @14\n*                                                                   @14\n*        Place user's LMOD in CSA/ECSA                              @14\n*                                                                   @14\n         MODESET MODE=SUP,KEY=ZERO                                  @14\n         LA    R11,SVCLIB          R11 -> SVCLIB DCB                @14\n         LOAD  DE=BLNAME,                                           @14X\n               DCB=(R11),                                           @14X\n               ERRET=INST060,      Error routine                    @14X\n               ADRNAPF=(R3),                                        @14X\n               SF=(E,LOAD4L)                                        @14\n         LR    R4,R15              Preserve return code             @14\n         LTR   R4,R4               Any LOAD problems ?              @14\n         JZ    INST070                                              @14\n*                                                                   @14\n*        LOAD ERRET routine                                         @14\n*                                                                   @14\n* Note: When entered R1 contains the LOAD abend code and R15        @14\n*       contains the reason code associated with the abend. Exit    @14\n*       from this routine must include logic to close SVCLIB and    @14\n*       free CSA/ECSA.                                              @14\n*                                                                   @14\nINST060  DS    0H                                                   @14\n         ST    R1,DWD              Save R1  (abend code)            @14\n         ST    R15,DWD+4           Save R15 (reason code)           @14\n         MODESET MODE=PROB,KEY=NZERO                                @14\n         $RWTO MSG100A,WRITE=NO    Install message template         @14\n         LA    R1,DWD              Source for hex conversion        @14\n         LA    R15,MSG100AA        Target for hex conversion        @14\n         UNPK  0(9,R15),0(5,R1)    Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         LA    R1,DWD+4            Source for hex conversion        @14\n         LA    R15,MSG100AB        Target for hex conversion        @14\n         UNPK  0(9,R15),0(5,R1)    Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES      Write the message                @14\n*                                                                   @14\n*        Free the obtained CSA/ECSA storage we failed to use        @14\n*                                                                   @14\nINST062  DS    0H                                                   @14\n         L     R1,@CSAEPN          Get address to free              @14\n         L     R2,MODSIZE          Get length to free               @14\n         MODESET KEY=ZERO,MODE=SUP Go to Key 0 Supervisor state     @14\n         STORAGE RELEASE,                                           @14X\n               ADDR=(1),                                            @14X\n               LENGTH=(2),                                          @14X\n               SP=228                                               @14\n         MODESET KEY=NZERO,MODE=PROB Return to Key 8 Problem state  @14\n         L     R1,RETCODE          Was return code                  @14\n         LTR   R1,R1                already set ?                   @14\n         JNZ   INSTX               ...jif so use it instead         @14\n         LHI   R1,BADEPN3          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     INSTX                 and return to caller           @14\n*                                                                   @14\n*        We can CLOSE the SVCLIB DDname now                         @14\n*                                                                   @14\nINST070  DS    0H                                                   @14\n         MODESET MODE=PROB,KEY=NZERO                                @14\n         USING IHADCB,R10                                           @14\n         LA    R10,SVCLIB          R10 -> SVCLIB DCB                @14\n         OI    W#OPNDO,X'80'       Indicate end of parameter list   @14\n         CLOSE ((R10)),MODE=31,MF=(E,W#OPNDO) Close SVCLIB          @14\n         DROP  R10                 Lose SVCLIB DCB addressability   @14\n*                                                                   @14\n*        Adjust CSA/ECSA resident code for proper entry point       @14\n*                                                                   @14\n         L     R3,@CSAEPN          Get load point address           @14\n         AL    R3,MODEPOFF         Add entry point offset           @14\n         ST    R3,@CSAEPN@         Save for SVCUPDTE plist update   @14\n*        WTO   'LMOD now in CSA/ECSA'                               @14\n*                                                                   @14\n*        Obtain SQA for USERID filtering if requested               @14\n*                                                                   @14\n         TM    PKW_used,PKW_USER   Was USER keyword supplied ?      @14\n         JNO   INST090             ...jif not                       @14\n         MODESET MODE=SUP,KEY=ZERO Supervisor state w/ Key 0        @14\n         L     R2,=A(CHKU500L)     Get length to acquire            @14\n         STORAGE OBTAIN,                                            @14X\n               LOC=(31,64),                                         @14X\n               LENGTH=(2),                                          @14X\n               ADDR=(3),           Return address in GPR3           @14X\n               SP=245,                                              @14X\n               COND=YES                                             @14\n         LR    R4,R15              Save return code                 @14\n         MODESET MODE=PROB,KEY=NZERO Return to problem state        @14\n         LTR   R4,R4               Did we get the storage ?         @14\n         JZ    INST080             ...jif so                        @14\n*                                                                   @14\n*        SQA storage acquisition failed for USERID filter code      @14\n*                                                                   @14\n         $RWTO MSG131E,WRITE=YES                                    @14\n         LHI   R1,BADNOSQA         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     INST062               and go free CSA/ECSA           @14\n*                                                                   @14\n*        Copy filter code to SQA - SQA address is in GPR3           @14\n*                                                                   @14\nINST080  DS    0H                                                   @14\n         ST    R3,SQA_ADDR         Work-area in SQA                 @14\n*        MODESET EXTKEY=ZERO       Go to key zero                @05@14\n         MODESET KEY=ZERO          Go to key zero                   @14\n         LARL  R5,CHKU500          R5 -> code source                @14\n         MVC   0(CHKU500L,R3),0(R5) Move screening code to SQA      @14\n         USING CHKU500,R3          Inform assembler                 @14\n*                                                                   @14\n*        Get new SVC @ in GPR and save in CHKU500N                  @14\n*                                                                   @14\n         L     R6,@CSAEPN@         Fetch new SVC entry point @      @14\n         TM    FLAGS,F1#AM31       SVC AMODE31 ?                    @14\n         JNO   INST082             ...jif not                       @14\n         O     R6,=XL4'80000000'   Set hob-bit                      @14\nINST082  DS    0H                                                   @14\n         ST    R6,CHKU500N         @ new SVC                        @14\n*                                                                   @14\n*        Save old entry point @ in CHKU500O                         @14\n*                                                                   @14\n*        Note: SVC TYPE really should match to do this since we     @14\n*              will be changing attributes & locks & possibly the   @14\n*              TYPE.                                                @14\n*                                                                   @14\n         MVC   CHKU500O,OLDENTRY   @ old SVC                        @14\n*                                                                   @14\n*        Install filter USERID value                                @14\n*                                                                   @14\n         MVC   CHKU500U,USERID     User-ID                          @14\n*                                                                   @14\n*        Install SVC number for debug purposes                      @14\n*                                                                   @14\n         MVC   CHKU500#,SVCNO      SVC number                       @14\n         MVC   CHKU500#+3(3),ESRSVCNO Install routing code (if any) @14\n         DROP  R3                  CHKU500 in SQA                   @14\n*                                                                   @14\n*        SQA_ADDR field contains SVC screening code address here    @14\n*                                                                   @14\n         LR    R6,R3               SVC screening code            @05@14\n         BSM   R6,0                set AMODE bit                    @05\n*        MODESET EXTKEY=ZERO                                     @05@14\n         MODESET KEY=ZERO                                        @05@14\n*        WTO   'Screening code in SQA'                              @14\nINST090  DS    0H                                                   @14\n******************************************************************* @14\n*                                                                 * @14\n*        Build SVCUPDTE plist for new SVC code                    * @14\n*                                                                 * @14\n******************************************************************* @14\n******************************************************************* @14\n*                                                                 * @14\n*        Build SVCUPDTE plist for new SVC code. The SVCUPDTE      * @14\n*        plist representing the old SVC entry is built from the   * @14\n*        content of the SVC table entry captured earlier in the   * @14\n*        OLDENTRY field. The SVCUPDTE plist representing the      * @14\n*        \"new\" SVC code is built from the following sources:      * @14\n*                                                                 * @14\n*        SVCUVERS - from SVCUMODL model template                  * @14\n*        SVCUFC   - from SVCUMODL model template                  * @14\n*        SVCUFLGS - SVCUFLGS_ESR bit set if ATTR_FLAGS.ATTR_ESR   * @14\n*                   bit set                                       * @14\n*        SVCUSVC  - Set from SVC# (copied)                        * @14\n*        SVCUEP   - from @CSAEPN@ field content or if a USER      * @14\n*                   filter is supplied from the SQA storage       * @14\n*                   address located in the SQA_ADDR field. The    * @14\n*                   hob-bit will be turned on if SQA_ADDR field   * @14\n*                   is non-zero if USER filtering is used or else * @14\n*                   turned on if FLAGS.F1#AM31 bit is on.         * @14\n*        SVCUTYPE - from TYPEBIN field (copied)                   * @14\n*        SVCUATTR - from multiple sources:                        * @14\n*                   -SVCUATTR_NPRMPT set if ATTR_FLAGS.ATTR_NPRMT * @14\n*                    flag set                                     * @14\n*                   -SVCUATTR_AR     set if ATTR_FLAGS.ATTR_AR    * @14\n*                    flag set                                     * @14\n*                   -SVCUATTR_APF    set if ATTR_FLAGS.ATTR_APF   * @14\n*                    flag set                                     * @14\n*        SVCULCKS - from multiple sources:                        * @14\n*                   -SVCULCKS_LOCAL  set if                       * @14\n*                    LOCKS_FLAGS.LOCKS_LOCAL is set               * @14\n*                   -SVCULCKS_CMS    set if                       * @14\n*                    LOCKS_FLAGS.LOCKS_CMS   is set               * @14\n*                   -SVCULCKS_SRM    set if                       * @14\n*                    LOCKS_FLAGS.LOCKS_SRM   is set               * @14\n*                   -SVCULCKS_SALLOC set if                       * @14\n*                    LOCKS_FLAGS.LOCKS_SALLOC is set              * @14\n*                   -SVCULCKS_DISP   set if                       * @14\n*                    LOCKS_FLAGS.LOCKS_DISP   is set              * @14\n*                                                                 * @14\n*                   Note: The layout of the LOCKS_FLAGS byte is   * @14\n*                         identical to the layout of the          * @14\n*                         SVCULCKS byte so we will just copy the  * @14\n*                         LOCKS_FLAGS byte to the SVCULCKS byte   * @14\n*                         here.                                   * @14\n*                                                                 * @14\n*        SVCUESRC - from ESR# (copied) if the flag                * @14\n*                   ATTR_FLAGS.ATTR_ESR is set                    @ @14\n*                                                                 * @14\n******************************************************************* @14\n*                                                                   @14\n         MVC   SVCUPLNEW,SVCUMODL  Install model                    @14\n         LA    R3,SVCUPLNEW        R3 -> SVCUPDTE plist             @14\n         USING SVCU,R3             Inform assembler                 @14\n         L     R2,SQA_ADDR         Pick up possible filter code @   @14\n         LTR   R2,R2               Was USER flter supplied ?        @14\n         JZ    INST092             ...jif not, complete from CSA @  @14\n*                                                                   @14\n*        USER filter was supplied - address of SQA resident code    @14\n*        will become SVC slot entry point                           @14\n*                                                                   @14\n         O     R2,=XL4'80000000'   Set hob-bit                      @14\n         ST    R2,SVCUEP           Save as SVC entry point          @14\n         J     INST100              and go handle SVCTP             @14\n*                                                                   @14\n*        USER filter was not supplied - address of entry point      @14\n*        of loaded code in CSA/ECSA will become SVC slot entry      @14\n*        point                                                      @14\n*                                                                   @14\nINST092  DS    0H                                                   @14\n         L     R2,@CSAEPN@         R2 -> CSA/ECSA E.P. address      @14\n         TM    FLAGS,F1#AM31       SVC AMODE31 ?                    @14\n         JNO   INST094             ...jif not                       @14\n         O     R2,=XL4'80000000'   Set hob-bit                      @14\nINST094  DS    0H                                                   @14\n         ST    R2,SVCUEP           Save as SVC entry point          @14\n*                                                                   @14\n*        Process SVC TYPE here for new SVC code                     @14\n*                                                                   @14\n*        Note: SVC type is mandatory on Execute form of the         @14\n*              SVCUPDTE macro...this includes for ESR SVC router    @14\n*              types.                                               @14\n*                                                                   @14\nINST100  DS    0H                                                   @14\n         MVI   SVCUTYPE,x'04'      Assume T3/4 SVC                  @14\n         CLI   SVC#,109            Was it ?                         @14\n         JE    INST102             ...jif so                        @14\n         MVI   SVCUTYPE,x'01'      Assume T1 SVC                    @14\n         CLI   SVC#,116            Was it ?                         @14\n         JE    INST102             ...jif so                        @14\n         MVI   SVCUTYPE,x'02'      Assume T2 SVC                    @14\n         CLI   SVC#,122            Was it ?                         @14\n         JE    INST102             ...jif so                        @14\n         MVI   SVCUTYPE,x'06'      Assume T6 SVC                    @14\n         CLI   SVC#,137            Was it ?                         @14\n         JE    INST102             ...jif so                        @14\n         MVC   SVCUTYPE,TYPEBIN    Set SVC type from field          @14\n*                                                                   @14\n*        Process SVC LOCKS here for new SVC code                    @14\n*                                                                   @14\nINST102  DS    0H                                                   @14\n         MVC   SVCULCKS,LOCKS_FLAGS Copy flags                      @14\n*                                                                   @14\n*        Process SVC ESR flag for new SVC code                      @14\n*        Process SVC ESR #    for new SVC code                      @14\n*                                                                   @14\n         TM    ATTR_FLAGS,ATTR_ESR Request for part of the ESR ?    @14\n         JNO   INST110             ...jif not                       @14\n         OI    SVCUFLGS,SVCUFLGS_ESR Set ESR provided flag          @14\n         MVC   SVCUESRC,ESR#       Copy routing code value          @14\n*                                                                   @14\n*        Process SVCUSVC for new SVC code                           @14\n*                                                                   @14\nINST110  DS    0H                                                   @14\n         MVC   SVCUSVC,SVC#        Install SVC # to modify          @14\n*                                                                   @14\n*        Process SVC attributes for new SVC code                    @14\n*                                                                   @14\n         TM    ATTR_FLAGS,ATTR_NPRMT Non-preemptible requested ?    @14\n         JNO   INST120             ...jif not                       @14\n         OI    SVCUATTR,SVCUATTR_NPRMPT else set NPRMT bit          @14\nINST120  DS    0H                                                   @14\n         TM    ATTR_FLAGS,ATTR_AR  AR mode request ?                @14\n         JNO   INST130             ...jif not                       @14\n         OI    SVCUATTR,SVCUATTR_AR     else set AR bit             @14\nINST130  DS    0H                                                   @14\n         TM    ATTR_FLAGS,ATTR_APF APF state request ?              @14\n         JNO   INST140             ...jif not                       @14\n         OI    SVCUATTR,SVCUATTR_APF    else set APF bit            @14\n******************************************************************* @14\n*                                                                 * @14\n*        Build SVCUPDTE plist for old SVC code                    * @14\n*                                                                 * @14\n******************************************************************* @14\n******************************************************************* @14\n*                                                                 * @14\n*        Build SVCUPDTE plist for old SVC code. The SVCUPDTE      * @14\n*        plist representing the old SVC entry is built from the   * @14\n*        content of the SVC table entry captured earlier in the   * @14\n*        OLDENTRY field. The SVCUPDTE plist representing the      * @14\n*        \"old\" SVC code is built from the following sources where * @14\n*        the SVC table entry mapping is provided by the SVCENTRY  * @14\n*        dummy section mapping provided by IHASVC:                * @14\n*                                                                 * @14\n*        SVCUVERS - from SVCUMODL model template                  * @14\n*        SVCUFC   - from SVCUMODL model template                  * @14\n*        SVCUFLGS - SVCUFLGS_ESR bit set if ATTR_FLAGS.ATTR_ESR   * @14\n*                   bit set                                       * @14\n*        SVCUSVC  - Set from SVC# (copied)                        * @14\n*        SVCUEP   - from SVCEP content (copied). This includes    * @14\n*                   the hob-bit.                                  * @14\n*        SVCUTYPE - from SVCTP field where:                       * @14\n*                   -If SVCTP34 bits set then set to 0x04         * @14\n*                   -If SVCTP2  bit  set then set to 0x02         * @14\n*                   -If SVCTP6  bit  set then set to 0x06         * @14\n*                                                                 * @14\n*                   otherwise set to 0x01                         * @14\n*                                                                 * @14\n*        SVCUATTR - from multiple sources:                        * @14\n*                   -SVCUATTR_NPRMPT set if SVCNP bit is on       * @14\n*                   -SVCUATTR_AR     set if SVCAR bit is on       * @14\n*                   -SVCUATTR_APF    set if SVCAPF bit is on      * @14\n*        SVCULCKS - from multiple sources:                        * @14\n*                   -SVCULCKS_LOCAL  set if SVCLL bit is on       * @14\n*                   -SVCULCKS_CMS    set if SVCCMS bit is on      * @14\n*                   -SVCULCKS_SRM    set if SVCOPT bit is on      * @14\n*                   -SVCULCKS_SALLOC set if SVCALLOC bit is on    * @14\n*                   -SVCULCKS_DISP   set if SVCDISP bit is on     * @14\n*                                                                 * @14\n*        SVCUESRC - from ESR# (copied) if the flag                * @14\n*                   ATTR_FLAGS.ATTR_ESR is set                    @ @14\n*                                                                 * @14\n******************************************************************* @14\n*                                                                   @14\nINST140  DS    0H                                                   @14\n         LA    R2,OLDENTRY         R2 -> copy of SVC table entry    @14\n         USING SVCENTRY,R2         Inform assembler                 @14\n         MVC   SVCUPLOLD,SVCUMODL  Install SVCUPDTE model           @14\n         LA    R3,SVCUPLOLD        R3 -> SVCUPDTE plist             @14\n*                                                                   @14\n*        Set SVCUFLGS byte bits in plist                            @14\n*                                                                   @14\n         TM    ATTR_FLAGS,ATTR_ESR ESR entry ?                      @14\n         JNO   INST150             ...jif not                       @14\n         OI    SVCUFLGS,SVCUFLGS_ESR  Indicate ESR # given          @14\n*                                                                   @14\n*        Set SVCUSVC byte in plist                                  @14\n*                                                                   @14\nINST150  DS    0H                                                   @14\n         MVC   SVCUSVC,SVC#        Set SVC # in plist               @14\n*                                                                   @14\n*        Set SVCUEP address in plist                                @14\n*                                                                   @14\n         MVC   SVCUEP,SVCEP        Copy old E.P @ w/ hob-bit        @14\n*                                                                   @14\n*        Set SVCUTYPE value in plist                                @14\n*                                                                   @14\n         AGO   .JH1106A                                            @14\n*        Note: If ATTR_FLAGS.ATTR_ESR is set then we would have     @14\n*              validated the type during oarse processing and the   @14\n*              TYPE keyword is mutually exclusive with the ESR      @14\n*              value on the SVCUPDTE macro. So the skinny is that   @14\n*              we don't want to set SVCUTYPE if the ATTR_ESR flag   @14\n*              has been set. All validations for range, etc. have   @14\n*              already been performed to be here.                   @14\n*                                                                   @14\n         TM    ATTR_FLAGS,ATTR_ESR ESR SVC routing code request ?   @14\n         JO    INST200             ...jif so, skip setting type     @14\n.JH1106A ANOP                                                       @14\n         TM    SVCTP,SVCTP34       Type 3/4 ?                       @14\n         JNO   INST160             ...jif not                       @14\n         MVI   SVCUTYPE,X'04'      Set to Type 3/4                  @14\n         J     INST200             Go to reume point                @14\nINST160  DS    0H                                                   @14\n         TM    SVCTP,SVCTP2        Type 2 ?                         @14\n         JNO   INST170             ...jif not                       @14\n         MVI   SVCUTYPE,X'02'      Set to Type 2                    @14\n         J     INST200             Go to reume point                @14\nINST170  DS    0H                                                   @14\n         TM    SVCTP,SVCTP6        Type 6 ?                         @14\n         JNO   INST180             ...jif not                       @14\n         MVI   SVCUTYPE,X'06'      Set to Type 6                    @14\n         J     INST200             Go to reume point                @14\nINST180  DS    0H                                                   @14\n         MVI   SVCUTYPE,X'01'      Set to Type 1                    @14\n*                                                                   @14\n*        Set SVCUATTR value in plist                                @14\n*                                                                   @14\nINST200  DS    0H                                                   @14\n         TM    SVCTP,SVCNP         Non-preemptable ?                @14\n         JNO   INST210             ...jif not                       @14\n         OI    SVCUATTR,SVCUATTR_NPRMPT else set NP flag            @14\nINST210  DS    0H                                                   @14\n         TM    SVCATTR3,SVCAR      Access Register mode allowed ?   @14\n         JNO   INST220             ...jif not                       @14\n         OI    SVCUATTR,SVCUATTR_AR    else set AR flag             @14\nINST220  DS    0H                                                   @14\n         TM    SVCTP,SVCAPF        APF only callers ?               @14\n         JNO   INST230             ...jif not                       @14\n         OI    SVCUATTR,SVCUATTR_APF   else set APF flag            @14\n*                                                                   @14\n*        Set SVCULCKS bits in plist                                 @14\n*                                                                   @14\nINST230  DS    0H                                                   @14\n         TM    SVCLOCKS,SVCLL      Local lock set in old entry ?    @14\n         JNO   INST240             ...jif not                       @14\n         OI    SVCULCKS,SVCULCKS_LOCAL else set local lock bit      @14\nINST240  DS    0H                                                   @14\n         TM    SVCLOCKS,SVCCMS     CMS lock set in old entry ?      @14\n         JNO   INST250             ...jif not                       @14\n         OI    SVCULCKS,SVCULCKS_CMS   else set CMS lock bit        @14\nINST250  DS    0H                                                   @14\n         TM    SVCLOCKS,SVCOPT     SRM lock set in old entry ?      @14\n         JNO   INST260             ...jif not                       @14\n         OI    SVCULCKS,SVCULCKS_SRM   else set SRM lock bit        @14\nINST260  DS    0H                                                   @14\n         TM    SVCLOCKS,SVCALLOC   SALLOC lock set in old entry ?   @14\n         JNO   INST270             ...jif not                       @14\n         OI    SVCULCKS,SVCULCKS_SALLOC else set SALLOC lock bit    @14\nINST270  DS    0H                                                   @14\n         TM    SVCLOCKS,SVCDISP    DISP lock set in old entry ?     @14\n         JNO   INST280             ...jif not                       @14\n         OI    SVCULCKS,SVCULCKS_DISP   else set DISP lock bit      @14\n*                                                                   @14\n*        Set SVCUESRC value in plist                                @14\n*                                                                   @14\nINST280  DS    0H                                                   @14\n         TM    ATTR_FLAGS,ATTR_ESR Part of ESR ?                    @14\n         JNO   INST300             ...jif not                       @14\n         MVC   SVCUESRC,ESR#       Copy ESR FC                      @14\n         DROP  R3                  Drop SVCU                        @14\n*                                                                   @14\n*        At this point the SVCUPDTE plist for the new SVC to be     @14\n*        installed is located in the SVCUPLNEW area and the         @14\n*        SVCUPDTE plist for the old SVC to be re-installed on       @14\n*        exit is located in the SVCUPLOLD area.                     @14\n*                                                                   @14\n*        Go to Key 0 Supervisor state                               @14\n*                                                                   @14\nINST300  DS    0H                                                   @14\n         MODESET KEY=ZERO,MODE=SUP\n*                                                                   @14\n*        ENQueue on the SVC table                                   @14\n*                                                                   @14\n         MVC   ENQ_TABLE(ESVCTMODL),ESVCTMOD                        @14\n         ENQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM\n*\n*        Did we get exclusive use of the resource ?\n*\n         ST    R15,DWD             Save ENQ return code/@ of area   @14\n         LTR   R15,R15             Did we get the SVC table ?       @14\n         JZ    INST310             ...jif so                        @14\n*                                                                   @14\n*        Issue SVC table ENQ failure & go clean up                  @14\n*                                                                   @14\n         MODESET MODE=PROB,KEY=NZERO                                @14\n         $RWTO MSG910A,WRITE=YES                                    @14\n         $RWTO MSG911A,WRITE=NO                                     @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG911AA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,BADENQ          Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     INSTX_FREE            & go exit w/ return code       @14\n*\n*        Save registers and update SVC table\n*\n*        Note: SVCUPDTE needs local addressability, Key 0 &\n*              Supervisor state for minimum authorization. We\n*              should already be in that state and key if the\n*              above enqueue on the SVC table succeeded.\n*\nINST310  DS    0H                                                   @14\n         STM   R14,R12,PUTSAVE+12  Borrow unused save area          @14\n         BASR  R10,0               Macro internal addressability    @14\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"    @14\n*                                                                   @14\n*        Install the new SVC code using the SVCUPLNEW plist         @14\n*                                                                   @14\n         SVCUPDTE MF=(E,SVCUPLNEW)                                  @14\n         DROP  R10             Drop internal macro addressability   @14\n         LR    R4,R15              Preserve return code             @14\n         ST    R15,DWD             Preserve return code             @14\n*                                                                   @14\n*        Drop ENQ on SVC table resource (on success or failure)     @14\n*                                                                   @14\n         DEQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14\n*                                                                   @14\n*        Check SVCUPDTE REPLACE operation return code               @14\n*                                                                   @14\n         LTR   R4,R4               Was update successful ?          @14\n         JZ    INST320             ...jif successful                @14\n*                                                                   @14\n*        SVCUPDTE was not successful - issue message and clean up   @14\n*                                                                   @14\n         MODESET MODE=PROB,KEY=NZERO                                @14\n         $RWTO MSG912A,WRITE=YES                                    @14\n         $RWTO MSG913A,WRITE=NO                                     @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG913AA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,BADSVCUS        Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     INSTX_FREE            & go exit w/ return code       @14\n*                                                                   @14\n*        SVC table update was successful so we need to do the       @14\n*        following:                                                 @14\n*                                                                   @14\n*        1) Issue MLWTO announcing what was done                    @14\n*        2) Set STIMER if GOODNITE time provided                    @14\n*        3) Set ESTAE for CANCEL                                    @14\n*        4) Wait for STOP or CANCEL                                 @14\n*                                                                   @14\nINST320  DS    0H                                                   @14\n         MODESET MODE=PROB,KEY=NZERO                                @14\n         BRASL R14,MLWTO           Write out MLWTO message          @14\n*                                                                   @14\n*        Set timer if GOODNITE parameter was supplied               @14\n*                                                                   @14\n         MODESET KEY=NZERO,MODE=PROB Return to TCB key              @14\n         CLI   ENDOFDAY,C'0'       Was GOODNITE supplied ?          @14\n         JL    INST400             ...jif not, skip STIMERM         @14\n*        L     R2,CIBECB           Get CIB ECB address              @14\n         LA    R2,CIBECB           Get CIB ECB address              @14\n         LARL  R4,GOODNITE         Resolve GOODNITE exit address    @14\n         STIMERM SET,                                               @14X\n               ID=TIMER_ID,        Token                            @14X\n               EXIT=(R4),          Exit routine                     @14X\n               LT=ENDOFDAY,        HHMMSSth                         @14X\n               PARM=(R2),          ECB/CIB pointers                 @14X\n               MF=(E,STIMER_L)                                      @14\n*        WTO   'GOODNITE exit in effect'                            @14\n*                                                                   @14\n*        Set up ESTAE for CANCEL trap                               @14\n*                                                                   @14\nINST400  DS    0H                                                   @14\n         LARL  R4,CANCEL           Resolve CANCEL exit address      @14\n         ESTAE ((R4)),CT,                                        @03@14X\n               PARAM=SAVE2,        ESTAE save area                  @14X\n               TERM=YES,           Trap CANCEL commands             @14X\n               MF=(E,ESTAEL)                                        @14\n         L     R1,CIBECB           Get CIB ECB address              @14\n         WAIT  1,ECB=(R1),LONG=YES WAIT for a STOP command          @14\n*                                                                   @14\n         ESTAE 0                   Do not trap CANCEL command again @14\n*                                                                   @14\n*        ENQueue on the SVC table                                   @14\n*                                                                   @14\nINST410  DS    0H                                                   @14\n         MVC   ENQ_TABLE(ESVCTMODL),ESVCTMOD                        @14\n         ENQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14\n*                                                                   @14\n*        Did we get exclusive use of the resource ?                 @14\n*                                                                   @14\n         ST    R15,DWD             Save ENQ return code/@ of area   @14\n         LTR   R15,R15             Did we get the SVC table ?       @14\n         JZ    INST430             ...jif so                        @14\n*                                                                   @14\n*        Issue WTO regarding failure and then retry                 @14\n*                                                                   @14\n         ST    R15,DWD            Save ENQ return code              @14\n         L     R2,DOMID           Pick up possible previous msgid   @14\n         LTR   R2,R2              Any previously issued message ?   @14\n         JZ    INST420            ...jif not                        @14\n         L     R1,DOMID           GET PREVIOUS MESSAGE ID NO.       @14\n         DOM   MSG=(R1)           DELETE PREVIOUS MESSAGE           @14\nINST420  DS    0H                                                   @14\n         $RWTO MSG905I,WRITE=NO                                     @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG905IA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         ST    R1,DOMID            Save msgid for later deletion    @14\n         STIMER WAIT,DINTVL=HOWLONG Wait 5 seconds                  @14\n         J     INST410               and go try again               @14\n*                                                                   @14\n*        We got the SVC table for this system image so update       @14\n*        the SVC slot with the old information but DOM any          @14\n*        outstanding WTO message we might have issued               @14\n*                                                                   @14\nINST430  DS    0H                                                   @14\n         L     R2,DOMID           Pick up possible previous msgid   @14\n         LTR   R2,R2              Any previously issued message ?   @14\n         JZ    INST440            ...jif not                        @14\n         L     R1,DOMID           GET PREVIOUS MESSAGE ID NO.       @14\n         DOM   MSG=(R1)           DELETE PREVIOUS MESSAGE           @14\n*                                                                   @14\n*        Put the old SVC entry back                                 @14\n*                                                                   @14\nINST440  DS    0H                                                   @14\n*        WTO   'We got the SVC table during backout'                @14\n*                                                                   @14\n         MODESET KEY=ZERO,MODE=SUP                                  @14\n         BASR  R10,0               Macro internal addressability    @14\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"    @14\n*                                                                   @14\n*        Install the new SVC code using the SVCUPLNEW plist         @14\n*                                                                   @14\n         SVCUPDTE MF=(E,SVCUPLOLD)                                  @14\n         DROP  R10             Drop internal macro addressability   @14\n         LR    R4,R15              Preserve return code             @14\n         ST    R15,DWD             Preserve return code             @14\n*                                                                   @14\n*        Drop ENQ on SVC table resource (on success or failure)     @14\n*                                                                   @14\n         DEQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14\n*                                                                   @14\n*        Check SVCUPDTE REPLACE operation return code               @14\n*                                                                   @14\n         MODESET KEY=NZERO,MODE=PROB                                @14\n         LTR   R4,R4               Was update successful ?          @14\n         JZ    INST450             ...jif successful                @14\n*                                                                   @14\n*        SVCUPDTE was not successful - issue message and clean up   @14\n*        what we can                                                @14\n*                                                                   @14\n         $RWTO MSG918A,WRITE=YES                                    @14\n         $RWTO MSG919A,WRITE=NO                                     @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG919AA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n*                                                                   @14\n*        Go free any common areas we allocated anyway and expect    @14\n*        abends if this SVC is called                               @14\n*                                                                   @14\n         LHI   R15,BADSVCUR        Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     INSTX_FREE          Go free our common areas         @14\n*                                                                   @14\n*        Old SVC entry was restored                                 @14\n*                                                                   @14\nINST450  DS    0H                                                   @14\n         $RWTO MSG200I,WRITE=NO                                     @14\n         LA    R14,OLDENTRY        R14 -> source area to convert    @14\n         LA    R15,MSG200IA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n*                                                                   @14\n*        Go free any common areas we allocated                      @14\n*                                                                   @14\n         XR    R15,R15             Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     INSTX_FREE          Go free our common areas         @14\n\n\n\n         AGO   .JH1113A\nNew code follows:\n\n\n\n\n.JH1113A ANOP\n\n\n\n         AGO   .JH1110A\n\n*\n*        Put old SVC entry back in place\n*\n         MODESET KEY=ZERO,MODE=SUP\n*                                                                   @14\n*        ENQueue on the SVC table                                   @14\n*                                                                   @14\n         MVC   ENQ_TABLE(ESVCTMODL),ESVCTMOD                        @14\n         ENQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM\n*\n*        Did we get exclusive use of the resource ?\n*\n         ST    R15,DWD             Save ENQ return code/@ of area   @14\n         LTR   R15,R15             Did we get the SVC table ?       @14\n         JZ    INST330             ...jif so\n         MODESET MODE=PROB,KEY=NZERO\n*\n*        Report unable to get SVC table and force U901 abend\n*\n         $RWTO MSG915A,WRITE=YES                                    @14\n         $RWTO MSG916A,WRITE=YES                                    @14\n         ABEND 901,DUMP                                             @14\n*\n*        Reverse the SVC table update\n*\nINST330  DS    0H\n         MODESET KEY=ZERO,MODE=SUP\n         STM   R14,R12,PUTSAVE+12  Borrow unused save area\n         BASR  R10,0               Macro internal addressability    @14\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"    @14\n*                                                                   @14\n*        Install the new SVC code using the SVCUPLNEW plist         @14\n*                                                                   @14\n         SVCUPDTE MF=(E,SVCUPLOLD)\n         DROP  R10             Drop internal macro addressability   @14\n         LR    R4,R15              Preserve return code\n         ST    R15,DWD             Preserve return code\n*\n*        Drop ENQ on SVC table resource (on success or failure)\n*\n         DEQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14\n*\n*        Check SVCUPDTE REPLACE operation return code\n*\n         LTR   R4,R4               Was update successful ?\n*        JZ    INST320             ...jif successful\n*\n*        SVCUPDTE was not successful - issue message and clean up\n*\n         MODESET MODE=PROB,KEY=NZERO                                @14\n         $RWTO MSG912A,WRITE=YES                                    @14\n         $RWTO MSG913A,WRITE=NO                                     @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG913AA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,BADSVCUS        Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     INSTX_FREE            & go exit w/ return code       @14\n*\n*        Go free common areas (ECSA/CSA & ESQA)\n*\n\n* Failure at this point means we need to put the old SVC entry back\n* and free all CSA/ECSA & ESQA areas\n\n\nINST400  DS    0H                  Set CIB limit\n         QEDIT ORIGIN=CHCIBP,CIBCTR=1  Set CIB limit to one\n         LTR   R15,R15             Was the QEDIT successful ?\n         JZ    INST410             ...jif so...go WAIT for something\n         ABEND 902,DUMP            otherwise we have a problem\n*\n*  WAIT for a command ...\n*\nINST410  DS    0H\n\n* Complete & issue MLWTO\n\n\nWAITAGIN EQU   *\n         L     R1,CIBECB           @ of command ECB\n         WAIT  ECB=(R1)            Wait for a STOP cmd\n\n.JH1110A ANOP\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*        WTO   'SVCPLNEW update done - check R13'\n         DC    H'0'\n\n\n\n         LA    R4,SVCUPLNEW\n         LA    R5,SVCUPLOLD\n\n\n\n\n\n\n\n\n\n\n* SVC & filter code are in common storage at this point and we have\n* captured the old SVC slot. We can update the SQA resident code to\n* include the \"new\" SVC address and then just install the address\n* of the filter code in the SVC slot but we'll need to set the\n* requested attributes & flags per the user's request.\n\n\n.JH1103A ANOP\n\n\n\n\n*                                                                   @14\n*        Free ESQA storage if allocated before exit                 @14\n*                                                                   @14\nINSTX_FREE DS  0H                                                   @14\n         L     R3,SQA_ADDR         Pick up possible ESQA address\n         LTR   R3,R3               Did we obtain any ESQA ?\n         JZ    INSTX_FREE_A        ...jif not\n         L     R4,=A(CHKU500L)     Get length to free               @14\n         MODESET KEY=ZERO,MODE=SUP\n*\n*        Free obtained ESQA storage\n*\n         STORAGE RELEASE,          Free                                X\n               ADDR=((R3)),         the                                X\n               LENGTH=((R4)),        filter area                       X\n               SP=245\n*                                                                   @14\n*        Free and CSA/ECSA area allocated before exit               @14\n*                                                                   @14\nINSTX_FREE_A DS 0H                                                  @14\n         L     R3,@CSAEPN          Get possible CSA/ECSA @ to free  @14\n         LTR   R3,R3               Did we obtain any CSA/ECSA ?     @14\n         JZ    INSTX_FREE_B        ...jif not\n         L     R4,MODSIZE          Get length to free               @14\n         MODESET KEY=ZERO,MODE=SUP\n*\n*        Free obtained CSA/ECSA storage\n*\n         STORAGE RELEASE,          Free                                X\n               ADDR=((R3)),         the                                X\n               LENGTH=((R4)),        new SVC code area                 X\n               SP=228\n*\n*        Drop our ENQ on the SVC slot\n*\nINSTX_FREE_B DS 0H                                                  @14\n         MODESET KEY=NZERO,MODE=PROB                                @14\n*\n*        Return to caller\n*\nINSTX    DS    0H                                                   @14\n         LM    R14,R12,SAVE@L1+12  Restore caller's registers       @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - REPORT - report SVC slot profiles'       @14\n******************************************************************* @14\nREPORT   DS    0H                                                   @14\n         STM   R14,R12,REPORTSAVE+12                                @14\n*                                                                   @14\n*        See if SYSPRINT was JCL allocated & flag it if so          @14\n*                                                                   @14\n         L     R1,PSATOLD-PSA(,0)  R1 -> current TCB                @14\n         L     R1,TCBTIO-TCB(R1)   R1 -> TIOT                       @14\n         LA    R1,TIOELNGH-TIOT1(R1)  R1 -> 1st DDname in TIOT      @14\nREPORT_002 DS  0H                                                   @14\n         CLI   0(R1),X'00'         End of TIOT ?                    @14\n         JE    REPORT_002B       ...jif so, SYSPRINT DD not in JCL  @14\n         CLC   =CL8'SYSPRINT',TIOEDDNM-TIOELNGH(R1) SYSPRINT DD ?   @14\n         JE    REPORT_002A         ...jif so                        @14\n         XR    R2,R2               Clear for insert                 @14\n         IC    R2,0(R1)            R2 = TIOELNGH for current entry  @14\n         AR    R1,R2               Point to next TIOT DD entry      @14\n         J     REPORT_002          Look at next DD entry            @14\n*                                                                   @14\n*      SYSPRINT JCL allocated, set flag to skip dynamic allocation  @14\n*                                                                   @14\nREPORT_002A DS 0H                                                   @14\n         MVC   RDDN,=CL8'SYSPRINT' Install report DDname            @14\n         OI    MYFLAGS,SYSPPRES    Indicate SYSPRINT in JCL         @14\n         J     REPORT_002D         ...skip dynamic allocation       @14\nREPORT_002B DS 0H                                                   @14\n*                                                                   @14\n*        Build SVC 99 request block & its extension for report file @14\n*                                                                   @14\n         LA    R1,$99RB            Get @ of SVC99 RB                @14\n         USING S99RB,R1                                             @14\n         ST    R1,$99RBPTR         Store pointer to RB              @14\n*                                                                   @14\n*        Fill in Request Block & Request Block Extension            @14\n*                                                                   @14\n         OI    $99RBPTR,S99RBPND   Mark end of list                 @14\n         XC    S99RB(S99RBLEN),S99RB Clear entire list              @14\n         MVI   S99RBLN,S99RBLEN    Move in length                   @14\n         MVI   S99VERB,S99VRBAL    Move in ALLOCATE verb            @14\n         LA    R0,$99STUPL         Get ptr to ALLOCATE TU pointers  @14\n         ST    R0,S99TXTPP         Store in parameter list          @14\n       MVI   S99FLAG1,S99NOMNT+S99CNENQ No mounts, cond ENQ on TIOT @14\n*                                                                   @14\n         LA    R2,$99RBX                                            @14\n         USING S99RBX,R2                                            @14\n         ST    R2,S99S99X              Set Request Block extension  @14\n         MVC   S99EID,=CL6'S99RBX'                                  @14\n         MVI   S99EVER,S99RBXVR                                     @14\n         OI    S99EOPTS,S99EIMSG+S99EWTP                            @14\n         DROP  R2                                                   @14\n         DROP  R1                                                   @14\n*                                                                   @14\n*        Finish up text units for report file allocation            @14\n*                                                                   @14\n         XC    $99STUPL($99STL),$99STUPL Clear TU pointer list      @14\n         LA    R0,$99STUPL        Get pointer to output TU pointers @14\n         ST    R0,S99TXTPP-S99RB+$99RB Store in RB                  @14\n         MVI   $99TEXT,C' '        First blank out everything       @14\n         MVC   $99TEXT+1($99TEXTL),$99TEXT                          @14\n         LA    R0,$99SYSOU         Get pointer to sysout test       @14\n         ST    R0,$99SSYSP         Store in parameter list          @14\n         LA    R0,$99FREC          Get pointer to free on close TU  @14\n         ST    R0,$99SFREP         Store in parameter list          @14\n         LA    R0,$99DDNK          Get pointer to return DDN TU     @14\n         ST    R0,$99SDDNP         Store in parameter list          @14\n         OI    $99SDDNP,S99TUPLN   Mark as last TU pointer          @14\n         MVC   $99SYSOU(4),=AL2(DALSYSOU,0)                         @14\n         MVC   $99FREC(4),=AL2(DALCLOSE,0)                          @14\n         MVC   $99DDNK(6),=AL2(DALRTDDN,1,8)                        @14\n         MVC   $99DDNK+6(8),=CL8' '                                 @14\n*                                                                   @14\n*        Allocate the sysout data set                               @14\n*                                                                   @14\n         LA    R1,$99RBPTR                                          @14\n         DYNALLOC                  Allocate the SORTMSG DDname      @14\n         ST    R15,$99R15          Save SVC 99 return code          @14\n         LTR   R15,R15             Any problems ?                   @14\n         JZ    REPORT_002C         ...jif not                       @14\n*                                                                   @14\n*        Display report file DYNALLOC failure information           @14\n*                                                                   @14\n         $RWTO MSG128E,WRITE=YES                                    @14\n         LA    R2,$99RB            Get @ of SVC99 RB                @14\n         USING S99RB,R2                                             @14\n         $RWTO MSG129E,WRITE=NO                                     @14\n         LA    R14,$99R15          R14 -> source area to convert    @14\n         LA    R15,MSG129EA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         LA    R14,S99ERROR        R14 -> source area to convert    @14\n         LA    R15,MSG129EB        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         LA    R14,S99INFO         R14 -> source area to convert    @14\n         LA    R15,MSG129EC        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         DROP  R2                                                   @14\n*                                                                   @14\n         LHI   R15,BADENV25        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     REPORTX_A             & go return to caller          @14\n*                                                                   @14\n*        Capture returned report file DDname                        @14\n*                                                                   @14\nREPORT_002C DS 0H                                                   @14\n         MVC   RDDN(8),=CL8' '     Save the DDname                  @14\n         LH    R2,$99DDNK+S99TULNG-S99TUNIT Get length              @14\n         BCTR  R2,0                Decrement for execute            @14\n         EX    R2,RDDCPY           Save the output DDname           @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nRDDCPY   MVC   RDDN(*-*),$99DDNK+S99TUPAR-S99TUNIT                  @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n*        Prepare report file DCB - DDname in RDDN field             @14\n*                                                                   @14\nREPORT_002D DS 0H                                                   @14\n         MVC   SPUTCODE,PUTCODE    Copy PUT routine below 16M       @14\n         MVC   W#OPNDO,X#OPNDO     Install OPEN output execute list @14\n         MVC   SYSPRINT,X#DCB1     Copy static DCB to DWS area      @14\n         LA    R10,SYSPRINT        R10 -> SYSPRINT DCB              @14\n         USING IHADCB,R10          DCB addressability               @14\n         MVC SYSPRINT+DCBDDNAM-IHADCB(8),RDDN Install report DDname @14\n*                                                                   @14\n*        Open sysout report file using 24-bit storage               @14\n*                                                                   @14\n         OPEN  ((R10),),MODE=31,MF=(E,W#OPNDO)                      @14\n*                                                                   @14\n*        Make sure OPEN completed successfully                      @14\n*                                                                   @14\n         TM    DCBOFLGS,DCBOFOPN   Was OPEN successful ?            @14\n         JO    REPORT_002E         ...jif so, continue              @14\n*                                                                   @14\n         DROP  R10                                                  @14\n*                                                                   @14\n*        Open for report file failed                                @14\n*                                                                   @14\n         $RWTO MSG146E,WRITE=YES                                    @14\n         LHI   R15,BADENV31        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     REPORTX_A             and then return                @14\n*                                                                   @14\n*        Capture current date and time for headings                 @14\n*                                                                   @14\nREPORT_002E DS 0H                                                   @14\n         BRASL R14,DATETIME        Go format current date & time    @14\n*                                                                   @14\n*        Force header page on first report line written             @14\n*                                                                   @14\n         MVC   Line_count,MAXLINES Set initial max lines/page       @14\n         MVC   Page_count,=PL4'0'                                   @14\n*                                                                   @14\n*        Resolve IRRSEQ00 service routine (should be in LLA)        @14\n*                                                                   @14\n         LOAD  EP=IRRSEQ00,ERRET=REPORT_010                         @14\n         ST    R0,@R_admin         Save service load module address @14\n         J     REPORT_020           and continue                    @14\n*                                                                   @14\n*        Load of R_admin service routine failed                     @14\n*                                                                   @14\nREPORT_010 DS  0H                                                   @14\n         ST    R1,DBWD             Save LOAD R1                     @14\n         ST    R15,DBWD+4          Save LOAD R15                    @14\n         $RWTO MSG115E,WRITE=YES                                    @14\n         $RWTO MSG116E,WRITE=NO                                     @14\n         LA    R14,DBWD            R14 -> source area to convert    @14\n         LA    R15,MSG116EA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         LA    R14,DBWD+4          R14 -> source area to convert    @14\n         LA    R15,MSG116EB        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R1,BADENV5          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXITRCA              & go exit w/ return code        @14\n*                                                                   @14\n*        Allocate & clear a 64K workarea for use by IRRSEQ00        @14\n*                                                                   @14\nREPORT_020 DS  0H                                                   @14\n         L     R0,=A(WORKAREA_SIZE) R0 = length to acquire          @14\n         STORAGE OBTAIN,           Get working storage              @14X\n               COND=YES,                                            @14X\n               LENGTH=(R0),                                         @14X\n               LOC=ANY,                                             @14X\n               BNDRY=PAGE                                           @14\n         LTR   R15,R15             Did we get the DWS storage ?     @14\n         JZ    REPORT_030          ...jif yes, continue             @14\n*                                                                   @14\n*        Unable to acquire IRRSEQ00 work area                       @14\n*                                                                   @14\n         $RWTO MSG017A,WRITE=YES                                    @14\n         LHI   R15,BADENV18        Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     REPORTX_A             & go exit w/ return code       @14\n*                                                                   @14\n*        Clear obtained IRRSEQ00 work area                          @14\n*                                                                   @14\nREPORT_030 DS  0H                                                   @14\n         ST    R1,@WORKAREA        Save for later                   @14\n         LR    R11,R1              Dynamic area addressability      @14\n         LR    R2,R1               Dynamic address to R2 for MVCL   @14\n         L     R3,=A(WORKAREA_SIZE) Get length to initialize        @14\n         LA    R4,0                Source                           @14\n         LA    R5,0                Source len of 0 + pad byte of 0  @14\n         MVCL  R2,R4               Clear the dynamic area storage   @14\n*                                                                   @14\n*        Set up for IRRSEQ00 processing                             @14\n*                                                                   @14\n         XC    ALET,ALET            Use zero ALET                   @14\n         XC    SAFRC,SAFRC          Initialize return/reason codes  @14\n         XC    RACFRC,RACFRC                                        @14\n         XC    RACFRS,RACFRS                                        @14\n         XC    @ACEE,@ACEE          Not supplying \"run-as\" ACEE     @14\n         XC    OUTMSG,OUTMSG        Clear output message pointer    @14\n         LA    R10,RADPLIST         Point to input p-list           @14\n         ST    R10,PLIST@           Save it                         @14\n*                                                                   @14\n*        Prepare parameter list for R_Admin service call            @14\n*                                                                   @14\n*        - First time through adjustments                           @14\n*                                                                   @14\n         MVI   SUBPOOL,127          Use subpool 127 by default      @14\n         MVI   FUNCODE,ADMN_XTR_NEXT_RESOURCE Set General Resource  @14C\n                                    class                           @14\n         OI    MYFLAGS,NEXTREQ      Indicate a \"next\" request       @14\n*                                                                   @14\n*        In the Parm_list area, fill in version and class name.     @14\n*                                                                   @14\n         LA    R6,RADPLIST                                          @14\n         USING ADMN_PROF_MAP,R6                                     @14\n         MVI   ADMN_PROF_VERSION,0                                  @14\n         MVC   ADMN_PROF_CLSNAME(8),=CL8'#SNOMISC'                  @14\n* Set flag to bypass IRR.RADMIN.RLIST authorization checks          @14\n         XR    R14,R14             Prime flag word with 0s          @14\n         A     R14,=AL4(ADMN_PROF_SKIPAUTH)                         @14\n         ST    R14,SAVEFLAG        Save options locally             @14\n         ST    R14,ADMN_PROF_FLAG  Set the flag word                @14\n*                                                                   @14\n*        PROFILE must be specified unless this is a \"next\" request. @14\n*        In this case, we set a single blank as the profile name,   @14\n*        which starts at the very beginning of the class. The       @14\n*        profile name is copied to the input profile name to the    @14\n*        contiguous storage after the Parm_list storage.            @14\n*                                                                   @14\n*                                                                   @14\n         LA    R8,9                 Use length of 1                 @14\n         ST    R8,ADMN_PROF_NAMELEN Save length in plist header     @14\n         MVC   EXTPROF(9),=CL9'SVCUPDTE_' Set search profile        @14\n         DROP  R6                                                   @14\n*                                                                   @14\n*        Initialize IRRSEQ00 call parameter list.  That is, a list  @14\n*        of addresses to the individual parameters set up above. If @14\n*        this is our first or only call, we use the input parameter @14\n*        list we set up in our dynamic area. Otherwise, we use the  @14\n*        output buffer from the previous call. In either case, the  @14\n*        correct address has been stored in R3.                     @14\n*                                                                   @14\nEXTR100  DS    0H                                                   @14\nREPORT_100 DS  0H                  Top of EXTRACT loop              @14\n         L     R1,@WORKAREA        Pick up IRRSEQ00 work area       @14\n         ST    R1,WORKAREA@        Save in IRRSEQ00 parameters      @14\n         LA    R1,ALET                                              @14\n         ST    R1,ALET1@                                            @14\n         ST    R1,ALET2@                                            @14\n         ST    R1,ALET3@           0                                @14\n         LA    R1,SAFRC                                             @14\n         ST    R1,SAFRC@                                            @14\n         LA    R1,RACFRC                                            @14\n         ST    R1,RACFRC@                                           @14\n         LA    R1,RACFRS                                            @14\n         ST    R1,RACFRS@                                           @14\n         LA    R1,FUNCODE                                           @14\n         ST    R1,FUNCODE@                                          @14\n         L     R1,PLIST@                                            @14\n         ST    R1,RADPLIST@                                         @14\n         LA    R1,USER                                              @14\n         ST    R1,USER@                                             @14\n         LA    R1,@ACEE                                             @14\n         ST    R1,ACEE@                                             @14\n         LA    R1,SUBPOOL                                           @14\n         ST    R1,SUBPOOL@                                          @14\n         LA    R1,OUTMSG                                            @14\n         ST    R1,OUTMSG@                                           @14\n         OC    OUTMSG@,=X'80000000'    Turn on VL bit in last parm  @14\n*                                                                   @14\n*        Call R_admin.  We've manually built the plist which would  @14\n*        correspond to the following CALL statement (continuation   @14\n*        characters omitted). *                                     @14\n*                                                                   @14\n*        CALL  IRRSEQ00,                                        x   @14\n*              (@WORKAREA,                                      x   @14\n*              ALET,SAFRC,                                      x   @14\n*              ALET,RACFRC,                                     x   @14\n*              ALET,RACFRS,                                     x   @14\n*              FUNCODE,                                         x   @14\n*              PLIST,                                           x   @14\n*              0,0,        Not passing \"run-as\" user or ACEE    x   @14\n*              SUBPOOL,                                         x   @14\n*              OUTMSG),VL                                           @14\n         MODESET MODE=SUP          Switch to supervisor state       @14\n         LA    R1,WORKAREA@        Get list of addrs in R1          @14\n         L     R15,@R_admin        Get IRRSEQ00 service address     @14\n         BALR  R14,R15                                              @14\n         MODESET MODE=PROB         Switch back to problem state     @14\n*                                                                   @14\n*        For extract-next, we are now finished with the previous    @14\n*        output buffer, which we used as the input p-list for this  @14\n*        R_admin call. Free its storage now.                        @14\n*                                                                   @14\n         LA    R1,RADPLIST         Get address of first p-list      @14\n         L     R10,PLIST@          Get address of previous p-list   @14\n         CR    R1,R10              Was input plist the first one?   @14\n         JE    EXTR110             Yes, don't free autodata field!  @14\n         USING ADMN_PROF_MAP,R10   Get addressability to previous   @14\n         L     R0,ADMN_PROF_OUTLEN Output area size to R0           @14\n         XR    R2,R2               Clear for insert                 @14\n         IC    R2,ADMN_PROF_SPID   Get subpool from p-list header   @14\n         DROP  R10                                                  @14\n         FREEMAIN RU,SP=(2),       Freemain                         @14X\n               LV=(0),              dynamic                         @14X\n               A=(10)                area                           @14\n*                                                                   @14\n*        Test return code and issue an error message if non-zero    @14\n*                                                                   @14\nREPORT_110 DS  0H                  Top of EXTRACT loop              @14\nEXTR110  DS    0H                                                   @14\n         ICM   R5,B'1111',SAFRC    Get SAF return code              @14\n         JZ    EXTR200                                              @14\n*                                                                   @14\n*        Let's also quietly ignore a \"not found\" condition for      @14\n*        extract next if we've returned at least one profile.       @14\n*                                                                   @14\n         TM    MYFLAGS,NEXTREQ+FOUND1  A fruitful \"next\" request?   @14\n         JNO   EXTR120              No, issue the message           @14\n         LA    R10,4                Get \"not found\" rc              @14\n         CR    R10,R5               SAF \"not found\" rc?             @14\n         JNE   EXTR120              No, truly an error              @14\n         C     R10,RACFRC           RACF \"not found\" rc?            @14\n         JNE   EXTR120              No, truly an error              @14\n         C     R10,RACFRS           RACF \"not found\" reason?        @14\n         JE    EXITRCA             ...jif so, good return to caller @14\n*                                                                   @14\n*        Display failing RACF & SAF return codes & reason code      @14\n*                                                                   @14\nREPORT_120 DS  0H                  Top of EXTRACT loop              @14\nEXTR120  DS    0H                                                   @14\n         $RWTO MSG100E,WRITE=YES                                    @14\n         $RWTO MSG101E,WRITE=NO                                     @14\n         LA    R14,SAFRC           R14 -> source area to convert    @14\n         LA    R15,MSG101EA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         LA    R14,RACFRC          R14 -> source area to convert    @14\n         LA    R15,MSG101EB        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         LA    R14,RACFRS          R14 -> source area to convert    @14\n         LA    R15,MSG101EC        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES      Write the message                @14\n*                                                                   @14\n*        May want to display \"spooky\" profile information here if   @14\n*        SAFRC=4/RACFRC=4/RACFRS=20 for cleanup reasons             @14\n*                                                                   @14\n         LHI   R15,BADSAF1         Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     EXITRCA               & go return to caller          @14\n*                                                                   @14\n*        R_admin worked! Verify that we obtained the BASE segment   @14\n*        of a CLASS(#SNOMISC) profile that starts with the text     @14\n*        string \"SVCUPDTE_\".                                        @14\n*                                                                   @14\nREPORT_200 DS  0H                  Top of EXTRACT loop              @14\nEXTR200  DS    0H                                                   @14\n         L     R1,OUTMSG            Get output address in R1        @14\n         USING ADMN_PROF_MAP,R1     Get class/profile from output   @14\n*                                                                   @14\n*        Get profile length in R5                                   @14\n*                                                                   @14\n         L     R5,ADMN_PROF_NAMELEN Get profile name length         @14\n*                                                                   @14\n*        Verify profile name started with \"SVCUPDTE_\"               @14\n*                                                                   @14\nREPORT_210 DS  0H                  Top of EXTRACT loop              @14\nEXTR210  DS    0H                                                   @14\n         CLC   ADMN_PROF_PROFNAME(9),=CL9'SVCUPDTE_'                @14\n         JE    EXTR220              ...jif so                       @14\n*                                                                   @14\n* Did we get at least one profile ? If so we're through             @14\n* otherwise none were found to be defined                           @14\n*                                                                   @14\n         TM    MYFLAGS,FOUND1      Did we find at least one ?       @14\n         JO    EXITRCA             ...jif yes, skip message         @14\n         $RWTO MSG103E,WRITE=YES                                    @14\n         LHI   R15,BADEXTR2        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     EXITRCA               & go return to caller          @14\n*                                                                   @14\n*        Verify CLASS(#SNOMISC) returned                            @14\n*                                                                   @14\nREPORT_220 DS  0H                  Top of EXTRACT loop              @14\nEXTR220  DS    0H                                                   @14\n         OI    MYFLAGS,FOUND1      Indicate we found a profile      @14\n         CLC   ADMN_PROF_CLSNAME,=CL8'#SNOMISC' CLASS(#SNOMISC) ?   @14\n         JE    EXTR230              ...jif so                       @14\n         $RWTO MSG104E,WRITE=YES                                    @14\n         LHI   R15,BADEXTR3        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     EXITRCA               & go return to caller          @14\n*                                                                   @14\n*        Verify # segment descriptors                               @14\n*                                                                   @14\n*        -We have a desirable profile so extract the following      @14\n*         fields:                                                   @14\n*                                                                   @14\n*         From ADMN_PROF_MAP:                                       @14\n*         ===================                                       @14\n*         ADMN_PROF_PROFNAME (profile name)                         @14\n*                                                                   @14\n*         From ADMN_PROF_FIELDDESC:                                 @14\n*         =========================                                 @14\n*         When ADMN_PROF_SEGNAME = CL8'BASE'                        @14\n*           Case 1: When ADMN_PROF_FIELDNAME = CL8'OWNER'           @14\n*                    capture owner of the profile                   @14\n*           Case 2: When ADMN_PROF_FIELDNAME = CL8'DATA'            @14\n*                    capture installation data                      @14\n*           Case 3: When ADMN_PROF_FIELDNAME = CL8'ACLCNT'          @14\n*                    capture ACLID (userid) & ACLACS (auth)         @14\n*                    subfields                                      @14\n*                                                                   @14\n*         Case 3 involves a repeating field structure while         @14\n*         Cases 1 & 2 do not.                                       @14\n*                                                                   @14\nREPORT_230 DS  0H                  Top of EXTRACT loop              @14\nEXTR230  DS    0H                                                   @14\n*        WTO   'Found an SVCUPDTE profile'                          @14\n         MVI   Current_profname,X'40'                               @14\n     MVC  Current_profname+1(L'Current_profname-1),Current_profname @14\n         L     R1,OUTMSG           Restore R1 profile base @        @14\n*                                                                   @14\n*        Verify length of profile valid - between 12 & 15 bytes     @14\n*                                                                   @14\n*        Note: Instead of shutting down the program here we will    @14\n*              issue a WTO that tries to include at least the       @14\n*              minimum profile name length in the text of the       @14\n*              message and then we'll skip this profile and         @14\n*              continue with the next SVCUPDTE_* profile in the     @14\n*              CL(#SNOMISC). We will issue a return code to the end @14\n*              user that indicates they should report the problem.  @14\n*                                                                   @14\n         CHI   R5,Minimum_profname_length                           @14\n         JL    EXTR230_A           ...jif invalid length            @14\n         CHI   R5,Maximum_profname_length                           @14\n         JH    EXTR230_A           ...jif invalid length            @14\n*                                                                   @14\n* Always capture the profile name since length is valid             @14\n*                                                                   @14\n         LR    R4,R5               Copy profile name length         @14\n         BCTR  R4,0                Make length executable           @14\n         EX    R4,CPYPRF           Copy input PARM string           @14\n         J     EXTR231           ...skip message since length valid @14\n*                                                                   @14\n*        Issue message about invalid profile in database            @14\n*                                                                   @14\nREPORT_230_A DS 0H                 Top of EXTRACT loop              @14\nEXTR230_A DS   0H                                                   @14\n         LR    R4,R5               Copy profile name length         @14\n         CHI   R4,Maximum_profname_length                           @14\n         JNH   EXTR230_B           Go make executable               @14\n         LHI   R4,Maximum_profname_length                           @14\nREPORT_230_B DS 0H                 Top of EXTRACT loop              @14\nEXTR230_B DS   0H                                                   @14\n         BCTR  R4,0                Make length executable           @14\n         EX    R4,CPYPRF           Copy input PARM string           @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nCPYPRF   MVC  Current_profname(*-*),ADMN_PROF_PROFNAME profile name @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         $RWTO MSG901W,WRITE=YES                                    @14\n         $RWTO MSG902A,WRITE=NO                                     @14\n         MVC   MSG902AA,Current_profname Copy profile name to WTO   @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         L     R1,OUTMSG           Restore R1 profile base @        @14\n*                                                                   @14\n*        Now we need to skip the rest of this profile and pick up   @14\n*        processing with the next profile.                          @14\n*                                                                   @14\n*        <Might be easier to just set a return code and return>     @14\n*                                                                   @14\n*        <Need a specific return code here and a flag>              @14\n*                                                                   @14\n         LHI   R15,BADEXTR6        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n*        J     EXITRCA               & go return to caller          @14\n         J     EXTR290               & go after next profile        @14\n*                                                                   @14\nREPORT_231 DS  0H                  Top of EXTRACT loop              @14\nEXTR231  DS    0H                                                   @14\n         L     R2,ADMN_PROF_NUMSEG R2 = # segment descriptors       @14\n         CHI   R2,1                Single segment descriptor ?      @14\n         JE    EXTR240             ...jif so                        @14\n         LTR   R2,R2               Are there any segments ?         @14\n         JZ    EXTR290             ...jif not, bail out             @14\n*                                                                   @14\n*        Unexpected number of segment descriptors                   @14\n*                                                                   @14\n         $RWTO MSG105E,WRITE=YES                                    @14\n         LHI   R15,BADEXTR4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     EXITRCA               & go return to caller          @14\n*                                                                   @14\n*        Verify segment descriptor is for BASE segment              @14\n*                                                                   @14\n*        -R2 contains number of segments                            @14\n*                                                                   @14\nREPORT_240 DS  0H                  Top of EXTRACT loop              @14\nEXTR240  DS    0H                                                   @14\n         LA    R3,ADMN_PROF_PROFNAME Get addr of profile name       @14\n         A     R3,ADMN_PROF_NAMELEN  Add length of profile name to  @14C\n                                     get @ of 1st segment descriptor@14\n         USING ADMN_PROF_SEGDESC,R3  Basing for segment descriptor  @14\n*                                                                   @14\n         L     R5,ADMN_PROF_FIELDOFFSET Get offset to 1st FD        @14\n         AR    R5,R1                 Add to base to get address     @14\n         USING ADMN_PROF_FIELDDESC,R5 Basing for field descriptor   @14\n*                                                                   @14\nREPORT_250 DS  0H                  Top of EXTRACT loop              @14\nEXTR250  DS    0H                     <DOSEGS label>                @14\nDOSEGS   DS    0H                     <DOSEGS label>                @14\n         L     R4,ADMN_PROF_NUMFIELDS Number of field descriptors   @14C\n                                     for this segment               @14\n         LA    R8,ADMN_PROF_SEGNAME  Address of segment name        @14\n         CLC   ADMN_PROF_SEGNAME,=CL8'BASE' BASE segment ?          @14\n         JE    EXTR260                                              @14\n         $RWTO MSG106E,WRITE=YES                                    @14\n         L     R1,OUTMSG           Restore R1 profile base @        @14\n         LHI   R15,BADEXTR5        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     EXITRCA               & go return to caller          @14\n*                                                                   @14\n*        Check for repeating fields case                            @14\n*                                                                   @14\nREPORT_260 DS  0H                  Top of EXTRACT loop              @14\nEXTR260  DS    0H                    <DOFIELDS label>               @14\nDOFIELDS DS    0H                    <DOFIELDS label>               @14\n         XR    R9,R9                 Clear for insert               @14\n         ICM   R9,B'0011',ADMN_PROF_FIELDTYPE   Get type of field   @14\n         L     R8,=A(ADMN_PROF_RPTHDR) Is it a repeat field header ?@14\n         CR    R9,R8                                                @14\n*        JNE   EXTR270             ...jif not, get next field       @14\n*        AGO   .JRH0127A                                            @14\n         JE    REPEAT              ...jif repeat field              @14\n*                                                                   @14\n* Boolean fields & normal character fields land here. We're only    @14\n* interested in The OWNER, DATA & UACC fields of the non-repeating  @14\n* flavor.                                                           @14\n*                                                                   @14\n******************************************************************* @14\n*                                                                 * @14\n*        Handle OWNER field capture here                          * @14\n*                                                                 * @14\n******************************************************************* @14\n*                                                                   @14\n* Is this the OWNER field ?                                         @14\n*                                                                   @14\n         CLC   ADMN_PROF_FIELDNAME,=CL8'OWNER' OWNER field ?        @14\n         JNE   EXTR260_B           ...jif so                        @14\n*        WTO   'Found OWNER field'                                  @14\n         L     R1,OUTMSG           Restore R1 profile base @        @14\n*                                                                   @14\n* Varify OWNER field length positive                                @14\n*                                                                   @14\n         ICM   R14,B'1111',ADMN_PROF_FIELDLEN R14 length of field   @14\n         BCTR  R14,0               Make OWNER length executable     @14\n         CHI   R14,0               Is length positive ?             @14\n         JNM   EXTR260_A           ...jif so                        @14\n*                                                                   @14\n* Length of OWNER field invalid - report it and skip this profile   @14\n*                                                                   @14\n         $RWTO MSG903A,WRITE=YES                                    @14\n         $RWTO MSG902A,WRITE=NO                                     @14\n         MVC   MSG902AA,Current_profname Copy profile name to WTO   @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         L     R1,OUTMSG           Restore R1 profile base @        @14\n         J     EXTR290               & go after next profile        @14\nREPORT_260_A DS 0H                 Top of EXTRACT loop              @14\nEXTR260_A DS   0H                                                   @14\n         LR    R10,R1              Get R_admin output buffer @      @14\n         A     R10,ADMN_PROF_DATA_OFFSET Add data offset            @14\n*                                                                   @14\n* Capture OWNER field content - 8 byte maximum                      @14\n*                                                                   @14\n* -When landing here:                                               @14\n*                                                                   @14\n*  R14 contains executable length of OWNER field                    @14\n*  R10 contains @ of OWNER field in R_admin buffer                  @14\n*                                                                   @14\n         MVI   Current_OWNER,X'40'                                  @14\n         MVC   Current_OWNER+1(L'Current_OWNER-1),Current_OWNER     @14\n         EX    R14,CPYOWNR         Copy OWNER field                 @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nCPYOWNR  MVC   Current_OWNER(*-*),0(R10) Copy OWNER field           @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         J     NEXTFLD             Go get next field                @14\n******************************************************************* @14\n*                                                                 * @14\n*        Handle DATA field capture here                           * @14\n*                                                                 * @14\n******************************************************************* @14\nREPORT_260_B DS 0H                 Top of EXTRACT loop              @14\nEXTR260_B DS   0H                    <DOFIELDS label>               @14\n         CLC   ADMN_PROF_FIELDNAME,=CL8'DATA'  DATA field ?         @14\n*        JNE   NEXTFLD             ...jif not, go get next field    @14\n         JNE   EXTR260_C        ...jif not, go check next desirable @14\n*                                                                   @14\n* Capture DATA field content - 255 byte maximum                     @14\n*                                                                   @14\n*        WTO   'Found DATA field'                                   @14\n         L     R1,OUTMSG           Restore R1 profile base @        @14\n*                                                                   @14\n* Varify DATA field length positive                                 @14\n*                                                                   @14\n         ICM   R14,B'1111',ADMN_PROF_FIELDLEN R14 length of field   @14\n         BCTR  R14,0               Make OWNER length executable     @14\n         CHI   R14,0               Is length positive ?             @14\n         JNM   EXTR260_BB          ...jif so                        @14\n*                                                                   @14\n* Length of DATA field invalid - report it and skip this profile    @14\n*                                                                   @14\n         $RWTO MSG904A,WRITE=YES                                    @14\n         $RWTO MSG902A,WRITE=NO                                     @14\n         MVC   MSG902AA,Current_profname Copy profile name to WTO   @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         L     R1,OUTMSG           Restore R1 profile base @        @14\n         J     EXTR290               & go after next profile        @14\nREPORT_260_BB DS 0H                Top of EXTRACT loop              @14\nEXTR260_BB DS  0H                                                   @14\n         CHI   R14,99              > 99 bytes ?                     @14\n         JNH   EXTR260_BBB         ...jif not                       @14\n         LHI   R14,99              Crop at 100 bytes                @14\nREPORT_260_BBB DS 0H               Top of EXTRACT loop              @14\nEXTR260_BBB DS 0H                                                   @14\n         LR    R10,R1              Get R_admin output buffer @      @14\n         A     R10,ADMN_PROF_DATA_OFFSET Add data offset            @14\n*                                                                   @14\n* Capture DATA field content - 100 byte maximum                     @14\n*                                                                   @14\n* -When landing here:                                               @14\n*                                                                   @14\n*  R14 contains executable length of DATA field                     @14\n*  R10 contains @ of OWNER field in R_admin buffer                  @14\n*                                                                   @14\n         MVI   Current_DATA,X'40'                                   @14\n         MVC   Current_DATA+1(L'Current_DATA-1),Current_DATA        @14\n         EX    R14,CPYDATA         Copy DATA field                  @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nCPYDATA  MVC   Current_DATA(*-*),0(R10) Copy DATA field             @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         J     NEXTFLD             ...jif not, go get next field    @14\n******************************************************************* @14\n*                                                                 * @14\n*        Handle UACC field capture here                           * @14\n*                                                                 * @14\n******************************************************************* @14\nREPORT_260_C DS 0H                 Top of EXTRACT loop              @14\nEXTR260_C DS   0H                    <DOFIELDS label>               @14\n         CLC   ADMN_PROF_FIELDNAME,=CL8'UACC'  UACC field ?         @14\n         JNE   NEXTFLD             ...jif not, go get next field    @14\n*                                                                   @14\n* Capture UACC field content - 7 byte maximum                       @14\n*                                                                   @14\n*        WTO   'Found UACC field'                                   @14\n         L     R1,OUTMSG           Restore R1 profile base @        @14\n*                                                                   @14\n* Varify UACC field length positive                                 @14\n*                                                                   @14\n         ICM   R14,B'1111',ADMN_PROF_FIELDLEN R14 length of field   @14\n         BCTR  R14,0               Make OWNER length executable     @14\n         CHI   R14,0               Is length positive ?             @14\n         JNM   EXTR260_CC          ...jif so                        @14\n*                                                                   @14\n* Length of DATA field invalid - report it and skip this profile    @14\n*                                                                   @14\n         $RWTO MSG905A,WRITE=YES                                    @14\n         $RWTO MSG902A,WRITE=NO                                     @14\n         MVC   MSG902AA,Current_profname Copy profile name to WTO   @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         L     R1,OUTMSG           Restore R1 profile base @        @14\n         J     EXTR290               & go after next profile        @14\nREPORT_260_CC DS 0H                Top of EXTRACT loop              @14\nEXTR260_CC DS  0H                                                   @14\n         CHI   R14,6               > 7 bytes ?                      @14\n         JNH   EXTR260_CCC         ...jif not                       @14\n         LHI   R14,6               Crop at 7 bytes                  @14\nREPORT_260_CCC DS 0H               Top of EXTRACT loop              @14\nEXTR260_CCC DS 0H                                                   @14\n         LR    R10,R1              Get R_admin output buffer @      @14\n         A     R10,ADMN_PROF_DATA_OFFSET Add data offset            @14\n*                                                                   @14\n* Capture UACC field content - 7 byte maximum                       @14\n*                                                                   @14\n* -When landing here:                                               @14\n*                                                                   @14\n*  R14 contains executable length of UACC field                     @14\n*  R10 contains @ of OWNER field in R_admin buffer                  @14\n*                                                                   @14\n         MVI   Current_UACC,X'40'                                   @14\n         MVC   Current_UACC+1(L'Current_UACC-1),Current_UACC        @14\n         EX    R14,CPYUACC         Copy DATA field                  @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nCPYUACC  MVC   Current_UACC(*-*),0(R10) Copy UACC field             @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         J     NEXTFLD             Go get next field                @14\n*                                                                   @14\n* Do we have the DATA & OWNER fields for this profile now ?         @14\n*                                                                   @14\nREPEAT   DS    0H                                                   @14\n         BRAS  R14,DOREPEAT                                         @14\n         J     NEXTFLD2                                             @14\n.JRH0127A ANOP                                                      @14\n*                                                                   @14\n*        WTO the ADMN_PROF_FIELDNAME field                          @14\n*                                                                   @14\n         $RWTO MSG120I,WRITE=NO                                     @14\n         MVC   MSG120IA,ADMN_PROF_FIELDNAME                         @14\n         $RWTO WTOD,WRITE=YES                                       @14\n*                                                                   @14\n*        Set basing for next field descriptor. Decrement count of   @14\n*        fields to see if we are finished.                          @14\n*                                                                   @14\nEXTR270  DS    0H                                                   @14\nNEXTFLD  DS    0H                                                   @14\n         LA    R5,ADMN_PROF_NEXTFIELD Get next FD address           @14\nEXTR280  DS    0H                                                   @14\nNEXTFLD2 DS    0H                                                   @14\n         BRCT  R4,EXTR260          Decrement number of fields       @14\n*                                                                   @14\n*        Done with fields, check next segment                       @14\n*                                                                   @14\n*        Set basing for next segment descriptor. Decrement count    @14\n*        of segments to see if we are finished. Note that R5 is     @14\n*        already pointing to the first field descriptor in the next @14\n*        segment.                                                   @14\n*                                                                   @14\nNEXTSEG  DS    0H                                                   @14\n         LA    R3,ADMN_PROF_NEXTSEG  Get next SD address            @14\n         BRCT  R2,EXTR250          Decrement number of segments     @14\n*                                                                   @14\n*        Done with segments, and hence with this profile. Loop back @14\n*        for another R_admin call.                                  @14\n*                                                                   @14\nEXTR290  DS    0H                                                   @14\nDONESEGS DS    0H                                                   @14\n         TM    MYFLAGS,NEXTREQ       Is this a next request?        @14\n         JZ    EXTR300               Done with segments, finish up  @14\n*                                                                   @14\n* If we encountered a ghost generic during extract-next, we need to @14\n* stop looping. We do have an output block containing the profile   @14\n* name, so we need to free it.                                      @14\n*                                                                   @14\n         TM    MYFLAGS,SPOOKY        Paranormal encounter?          @14\n         JO    EXTR300               Yes, free output and bail out  @14\n*                                                                   @14\n* We use the output p-list as the input p-list for the next         @14\n* iteration. R_admin will maintain the generic bit for us, but we   @14\n* need to keep setting the name-only bit on each iteration, because @14\n* R_admin does not propagate that one.                              @14\n*                                                                   @14\n*        AGO   .JRH10A                                              @14\n         L     R2,ADMN_PROF_FLAG     Get output flags               @14\n         A     R2,SAVEFLAG           Add back specified options     @14\n         ST    R2,ADMN_PROF_FLAG     Save updated flag word         @14\n*.JRH10A  ANOP                                                      @14\n*                                                                   @14\n         MVC   PLIST@,OUTMSG         Save output buffer for input   @14\n         OI    MYFLAGS,FOUND1                                       @14\n*                                                                   @14\n* We have found a CL(#SNOMISC) SVCUPDTE_* profile and we need to    @14\n* extract the content that we need. This content includes the       @14\n* following:                                                        @14\n*                                                                   @14\n* From Base segment:                                                @14\n* ==================                                                @14\n* profile name                                                      @14\n* installation data field                                           @14\n* OWNER                                                             @14\n* UACC                                                              @14\n*                                                                   @14\n* From repeating ACLCNT fields:                                     @14\n* =============================                                     @14\n* userids & access priviledges (ACLID & ACLACS)                     @14\n*                                                                   @14\n* The ACLCNT repeating field has 2 subfields we need (ACLID &       @14\n* ACLACS) and it contains an occurrence count of the number of the  @14\n* repeating ACLCNT content.                                         @14\n*                                                                   @14\n* We also need to perform an ENQ test to verify whether or not the  @14\n* SVC slot is in use and report the address space that has any      @14\n* outstanding ENQueue for that SYSTEM level resource.               @14\n*                                                                   @14\n*                                                                   @14\n*                                                                   @14\n*                                                                   @14\n*                                                                   @14\n*                                                                   @14\n*                                                                   @14\n         J     EXTR100               Yes, go get next               @14\n*                                                                   @14\nEXTR300  DS    0H                                                   @14\nFREEOUT  DS    0H                                                   @14\n         L     R0,ADMN_PROF_OUTLEN Output area size to R0           @14\n         XR    R2,R2               Clear for insert                 @14\n         IC    R2,SUBPOOL          Get specified subpool            @14\n         FREEMAIN RU,SP=(2),       freemain                         @14X\n               LV=(0),             dynamic                          @14X\n               A=(1)               area                             @14\n*                                                                   @14\n         DROP  R1                                                   @14\n*                                                                   @14\n         DC    H'0'                <debug>                          @14\n*                                                                   @14\n*        If IRRSEQ00 loaded then delete it                          @14\n*                                                                   @14\nREPORTX_A DS   0H                                                   @14\nEXITRCA  DS    0H                                                   @14\n         L     R1,@R_admin         Is IRRSEQ00 loaded ?             @14\n         LTR   R1,R1                                                @14\n         JZ    REPORTX_B           ...jif not                       @14\n         BASR  R10,0               Macro internal addressability    @14\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"    @14\n         DELETE EP=IRRSEQ00        Delete the service from memory   @14\n         DROP  R10             Drop internal macro addressability   @14\n*                                                                   @14\n*        If IRRSEQ00 common work area exists then free it           @14\n*                                                                   @14\nREPORTX_B DS   0H                                                   @14\n         L     R1,@WORKAREA        Does IRRSEQ00 area exist ?       @14\n         LTR   R1,R1               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"       @14\n         JZ    REPORTX_C           ...jif not                       @14\n         L     R0,=A(WORKAREA_SIZE) Get length to free              @14\n         STORAGE RELEASE,          Free                             @14X\n               ADDR=(R1),           the DSNTAB                      @14X\n               LENGTH=(R0)           work area                      @14\n*                                                                   @14\n*        If report file open then close it                          @14\n*                                                                   @14\nREPORTX_C DS   0H                                                   @14\n         USING IHADCB,R10                                           @14\n         LA    R10,SYSPRINT        R10 -> SYSPRINT DCB              @14\n         TM    DCBOFLGS,DCBOFOPN   Is data set open ?               @14\n         JNO   REPORTX             ...jif not                       @14\n         OI    W#OPNDO,X'80'       Indicate end of parameter list   @14\n         CLOSE ((R10)),MODE=31,MF=(E,W#OPNDO) Close SYSPRINT        @14\n*                                                                   @14\n         DROP  R10                                                  @14\n*                                                                   @14\nREPORTX  DS    0H                                                   @14\n         LM    R14,R12,REPORTSAVE+12 Restore caller's registers     @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n    TITLE 'SVCUPDTE - DOREPEAT - report BASE && SD elements'        @14\nDOREPEAT DS    0H                                                   @14\n******************************************************************* @14\n*                                                                 * @14\n* For repeat fields, cycle through each subfield for each         * @14\n* occurrence after generating the report header lines for the     * @14\n* current profile.                                                * @14\n*                                                                 * @14\n* Register input:  R5  = address of repeat field header           * @14\n*                         descriptor                              * @14\n*                  R14 = return address                           * @14\n*                                                                 * @14\n* Register output: R5 = address of the next field descriptor      * @14\n*                       after the entire repeat field just        * @14\n*                       processed                                 * @14\n*                                                                 * @14\n* Register usage:                                                 * @14\n*  R6 - Number of occurrences of repeat field                     * @14\n*  R7 - Number of subfields within each occurrence                * @14\n*  R8 - Address of subfield descriptor                            * @14\n*  R9 - Work register                                             * @14\n*                                                                 * @14\n******************************************************************* @14\n         STM   R14,R12,DOREPEATSAVE+12 Save caller's registers      @14\n*                                                                   @14\n*        BRASL R14,Report_profile  Go report profile                @14\n*        WTO   'DOREPEAT subroutine called'                         @14\n         AGO   .JH0806A                                             @14\n         $RWTO MSG700D,WRITE=NO                                     @14\n         MVC   MSG700DA,Current_profname                            @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         $RWTO MSG701D,WRITE=NO                                     @14\n         MVC   MSG701DA,Current_DATA                                @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         $RWTO MSG702D,WRITE=NO                                     @14\n         MVC   MSG702DA,Current_OWNER                               @14\n         MVC   MSG702DB,Current_UACC                                @14\n         $RWTO WTOD,WRITE=YES                                       @14\n.JH0806A ANOP                                                       @14\n* Build profile + installation data line                            @14\n         MVI   PRTLINE+0,C' '      Single space                     @14\n         MVC   PRTLINE+1(L'Current_profname),Current_profname       @14\n         MVC   PRTLINE+18(L'Current_DATA),Current_DATA              @14\n         LA    R0,PRTLINE                                           @14\n         BRASL R14,PUTLINE                                          @14\n* Build owner + UACC line                                           @14\n         MVC   PRTLINE+18(06),=CL6'Owner:'                          @14\n         MVC   PRTLINE+25(08),Current_OWNER                         @14\n         MVC   PRTLINE+34(05),=CL5'UACC:'                           @14\n         MVC   PRTLINE+40(07),Current_UACC                          @14\n         LA    R0,PRTLINE                                           @14\n         BRASL R14,PUTLINE                                          @14\n*                                                                   @14\n*        Check to see if this SVC slot is currently in use by an    @14\n*        SVCUPDTE installation task on the current system...that is @14\n*        if the profile's installation data field does NOT start    @14\n*        with the character string \"SPECIAL\". If the profile's      @14\n*        installation data field starts with the character string   @14\n*        special then we assume that the installation of this       @14\n*        specific SVC does not use our facility so we do not want   @14\n*        to erroneously report it as not being in use.              @14\n*                                                                   @14\n         CLC   =C'SPECIAL',Current_profname Is it SPECIAL ?         @14\n         JE    DOREPEAT_020           Go resume profile processing  @14\n         NI    Profile_flags,X'FF'-Profile_INUSE                    @14\n         LA    R1,Current_profname R1 -> current profile name       @14\n         BRASL R14,CHKINUSE        Go see if this profile is in use @14\n* Build Status line                                                 @14\n         MVC   PRTLINE+18(07),=CL7'Status:'                         @14\n         TM    Profile_flags,Profile_INUSE Profile in use ?         @14\n         JNO   DOREPEAT_010        ...jif not                       @14\n*                                                                   @14\n*        Profile found to be in use - report requestor information  @14\n*                                                                   @14\n         AGO   .JH0806B                                             @14\n         $RWTO MSG705D,WRITE=NO                                     @14\n         MVC   MSG705DA,INUSE_JOBNAME Install requestor job name    @14\n         MVC   MSG705DB,INUSE_ASID    Install requestor ASID        @14\n         $RWTO WTOD,WRITE=YES                                       @14\n.JH0806B ANOP                                                       @14\n* Following line added by @14 change                                @14\n         MVC   PRTLINE+26(61),=CL61'SVC slot currently in use by job naX\n               me 12345678 in ASID 0x1234.'                         @14\n         MVC   PRTLINE+64(08),INUSE_JOBNAME                         @14\n         MVC   PRTLINE+83(04),INUSE_ASID                            @14\n         LA    R0,PRTLINE                                           @14\n         BRASL R14,PUTLINE                                          @14\n         J     DOREPEAT_020           Go resume profile processing  @14\n*                                                                   @14\n*        Profile found to not be in use - show status               @14\n*                                                                   @14\nDOREPEAT_010 DS 0H                                                  @14\n         AGO   .JH0806C                                             @14\n         $RWTO MSG704D,WRITE=YES                                    @14\n.JH0806C ANOP                                                       @14\n* Following line added by @14 change                                @14\n         MVC   PRTLINE+26(57),=CL57'SVC slot is not currently in use byX\n                the SVCUPDTE program.'                              @14\n         LA    R0,PRTLINE                                           @14\n         BRASL R14,PUTLINE                                          @14\n*                                                                   @14\n* Make sure we're dealing with an ACLCNT repeating field else skip  @14\n* over all the subfields for repeating fields we're not interested  @14\n* in processing.                                                    @14\n*                                                                   @14\nDOREPEAT_020 DS 0H                                                  @14\n         NI    Profile_flags,X'FF'-Skip_repeat_field Reset flag     @14\n         LA    R14,ADMN_PROF_FIELDNAME Get @ of field name          @14\n         CLC   =CL8'ACLCNT',0(R14) ACLCNT repeat field ?            @14\n         JE    DOREPEAT_100        ...jif yes, skip setting flag    @14\n         OI    Profile_flags,Skip_repeat_field Set \"skip\" flag      @14\nDOREPEAT_100 DS 0H                                                  @14\n       NI    Profile_flags,X'FF'-Have_ACLID-Have_ACLACS Reset flags @14\n         L     R6,ADMN_PROF_RPTNUM Get number of occurrences        @14\n         LA    R8,ADMN_PROF_NEXTFIELD Get next FD address           @14\nDOREPEAT_200 DS 0H                                                  @14\nRPTOCC   DS    0H                                                   @14\n         L     R7,ADMN_PROF_FIELDDIM Get # subfields per occurrence @14\n         DROP  R5                  Drop ADMN_PROF_FIELDDESC         @14\n        USING ADMN_PROF_FIELDDESC,R8 Basing for subfield descriptor @14\nDOREPEAT_300 DS 0H                                                  @14\nRPTSFLD  DS    0H                                                   @14\n         LA    R14,ADMN_PROF_FIELDNAME Get @ of field name          @14\n         L     R9,ADMN_PROF_FIELDLEN Get data length                @14\n         BCTR  R9,0                Make length EXecutable           @14\n         CLC   =CL8'ACLID',0(R14)  Is this ACLID (userid) field ?   @14\n         JNE   DOREPEAT_400        ..jif not check next field       @14\n         MVI   Current_ACLID,X'40'                                  @14\n         MVC   Current_ACLID+1(L'Current_ACLID-1),Current_ACLID     @14\n         L     R14,OUTMSG          Get R_admin output buffer @      @14\n         A     R14,ADMN_PROF_DATA_OFFSET Add data offset            @14\n         EX    R9,CPYACLID         Copy ACLID field data            @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nCPYACLID MVC   Current_ACLID(*-*),0(R14) Copy ACLID data field      @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         OI    Profile_flags,Have_ACLID Set flag                    @14\n         J     DOMSG1              Go get next FD                   @14\n*                                                                   @14\nDOREPEAT_400 DS 0H                                                  @14\n         CLC   =CL8'ACLACS',0(R14) Is this ACLACS (auth) field ?    @14\n         JNE   DOREPEAT_500        ..jif not check next field       @14\n         MVI   Current_ACLACS,X'40'                                 @14\n         MVC   Current_ACLACS+1(L'Current_ACLACS-1),Current_ACLACS  @14\n         L     R14,OUTMSG          Get R_admin output buffer @      @14\n         A     R14,ADMN_PROF_DATA_OFFSET Add data offset            @14\n         EX    R9,CPYACLACS        Copy ACLACS field data           @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nCPYACLACS MVC  Current_ACLACS(*-*),0(R14) Copy ACLACS data field    @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         OI    Profile_flags,Have_ACLACS Set flag                   @14\n         J     DOMSG1              Go get next FD                   @14\n*                                                                   @14\nDOREPEAT_500 DS 0H                                                  @14\nDOMSG1   DS    0H                                                   @14\n         LA    R8,ADMN_PROF_NEXTFIELD Get next FD address           @14\n         BRCT  R7,RPTSFLD          Loop if subfields remaining      @14\n*        WTO   'Finished SD descriptors'                            @14\n* Do we have both ACLID & ACLACS fields ?                           @14\n         TM    Profile_flags,Have_ACLACS+Have_ACLID                 @14\n         JNO   DOREPEAT_600        ...jif not                       @14\n*        WTO   'We have found both ACLID && ACLACS'                 @14\n*                                                                   @14\n* Build ACLID: ACLACS WTO message                                   @14\n*                                                                   @14\n         AGO   .JH0806D                                             @14\n         $RWTO MSG703D,WRITE=NO                                     @14\n         MVC   MSG703DA,Current_ACLID                               @14\n         MVC   MSG703DB,Current_ACLACS                              @14\n         $RWTO WTOD,WRITE=YES                                       @14\n.JH0806D ANOP                                                       @14\n         MVC   PRTLINE+18(07),=CL7'ACLID: '                         @14\n         MVC   PRTLINE+25(08),Current_ACLID                         @14\n         MVC   PRTLINE+34(08),=CL8'ACLACS: '                        @14\n         MVC   PRTLINE+42(07),Current_ACLACS                        @14\n         LA    R0,PRTLINE                                           @14\n         BRASL R14,PUTLINE                                          @14\nDOREPEAT_600 DS 0H                                                  @14\n         BRCT  R6,RPTOCC                                            @14\n         LR    R5,R8            All done, set R5 to next FD address @14\n         ST    R5,DOREPEATSAVE+40  Save in R5 slot for caller       @14\n         LA    R0,PRTLINE        Print blank line profile seperator @14\n         BRASL R14,PUTLINE                                          @14\nDOREPEATX DS   0H                                                   @14\n         LM    R14,R12,DOREPEATSAVE+12 Restore caller's registers   @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n        TITLE 'PUTLINE  - Write line to report file && count lines' @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n*        PUTLINE  - Write record to report file DCB. Record       * @14\n*                   address located in GPR0 on entry. Returns to  * @14\n*                   caller.                                       * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nPUTLINE  DS    0H                                                   @14\n         STM   R14,R12,PUTSAVE+12  Save entry registers             @14\n*                                                                   @14\n*        Force header lines if needed                               @14\n*                                                                   @14\n         CP    Line_count,MAXLINES Force page headings ?            @14\n         JL    PUTL002             ...jif not                       @14\n*                                                                   @14\n*        Generate the header lines                                  @14\n*                                                                   @14\n         ST    R0,SAVER0           Save entry R0 value              @14\n         ZAP   Line_count,=P'5'    Set line count to 5 for headers  @14\n         AP    Page_count,=P'1'    Bump page count                  @14\n*                                                                   @14\n         MVI   HDRLINE,C' '        Ripple to                        @14\n         MVC   HDRLINE+1(L'HDRLINE-1),HDRLINE  blanks               @14\n* Generate 1st header line                                          @14\n         LARL  R14,USRHD#1                                          @14\n         MVC   HDRLINE(USRHD#1L),0(R14) Header line #1              @14\n*                                                                   @14\n*        Install program name, program version, date & time         @14\n*                                                                   @14\n         LARL  R14,PGMNAME                                          @14\n         MVC   UHDL1#1,0(R14)      Program name to header line      @14\n         LARL  R14,PGMVER                                           @14\n         MVC   UHDL1#2,0(R14)      Program version to header line   @14\n         LARL  R14,PGMDATE                                          @14\n         MVC   UHDL1#3,4(R14)      Program assembly date (MM)       @14\n         MVC   UHDL1#4,6(R14)      Program assembly date (DD)       @14\n         MVC   UHDL1#5,0(R14)      Program assembly date (YYYY)     @14\n         LARL  R14,PGMTIME                                          @14\n         MVC   UHDL1#6,0(R14)      Program assembly date (HH)       @14\n         MVC   UHDL1#7,3(R14)      Program assembly date (HH)       @14\n*                                                                   @14\n*        Install page # EDIT pattern & EDIT it                      @14\n*                                                                   @14\n         MVC   UHDL1#8,EDIT_page_# Install EDit pattern             @14\n         ED    UHDL1#8,Page_count  Install page # in print line     @14\n         LA    R0,HDRLINE          R0 -> report line                @14\n         BRASL R14,PUTHDR          Write the header line            @14\n* Generate 2nd header line                                          @14\n         LARL  R14,USRHD#2                                          @14\n         MVC   HDRLINE(USRHD#2L),0(R14) Header line #2              @14\n         MVC   UHDL2#1,HOURS                                        @14\n         MVC   UHDL2#2,MINUTES                                      @14\n         MVC   UHDL2#3,SECONDS                                      @14\n         MVC   UHDL2#4,MONTH                                        @14\n         MVC   UHDL2#5,DAY                                          @14\n         MVC   UHDL2#6,YEAR                                         @14\n         LA    R0,HDRLINE          R0 -> report line                @14\n         BRASL R14,PUTHDR          Write the header line            @14\n* Generate 3rd header line                                          @14\n         LARL  R14,USRHD#3                                          @14\n         MVC   HDRLINE(USRHD#3L),0(R14) Header line #3              @14\n         LA    R0,HDRLINE          R0 -> report line                @14\n         BRASL R14,PUTHDR          Write the header line            @14\n* Generate 4th header line                                          @14\n         LARL  R14,USRHD#4                                          @14\n         MVC   HDRLINE(USRHD#4L),0(R14) Header line #4              @14\n         LA    R0,HDRLINE          R0 -> report line                @14\n         BRASL R14,PUTHDR          Write the header line            @14\n* Generate 5th header line                                          @14\n         LARL  R14,USRHD#5                                          @14\n         MVC   HDRLINE(USRHD#5L),0(R14) Header line #5              @14\n         LA    R0,HDRLINE          R0 -> report line                @14\n         BRASL R14,PUTHDR          Write the header line            @14\n         L     R0,SAVER0           Restore entry R0 value           @14\n*                                                                   @14\n*        Count line toward maximum per page by examining CC         @14\n*                                                                   @14\n*        Note: ANSI \"overprint\" (+) is not counted                  @14\n*                                                                   @14\nPUTL002  DS    0H                                                   @14\n         LR    R1,R0               Copy R0 for tests                @14\n         CLI   0(R1),C' '          Single space ?                   @14\n         JNE   PUTL010             ...jif not                       @14\n         AP    Line_count,=P'1'    otherwise increment by 1         @14\n         J     PUTLINE@             and go to resume point          @14\nPUTL010  DS    0H                                                   @14\n         CLI   0(R1),C'1'          Form feed ?                      @14\n         JNE   PUTL020             ...jif not                       @14\n         AP    Line_count,=P'1'    otherwise increment by 1         @14\n         J     PUTLINE@             and go to resume point          @14\nPUTL020  DS    0H                                                   @14\n         CLI   0(R1),C'0'          Double space ?                   @14\n         JNE   PUTL030             ...jif not                       @14\n         AP    Line_count,=P'2'    otherwise increment by 2         @14\n         J     PUTLINE@             and go to resume point          @14\nPUTL030  DS    0H                                                   @14\n         CLI   0(R1),C'-'          Triple space ?                   @14\n         JNE   PUTLINE@            ...jif not                       @14\n         AP    Line_count,=P'3'    otherwise increment by 3         @14\n*                                                                   @14\nPUTLINE@ DS    0H                                                   @14\n         LA    R1,SYSPRINT         R1 -> SYSPRINT DCB               @14\n* Note: R0 on entry contains address of print line                  @14\n         LA    R15,SPUTCODE        R15 -> PUT routine (<16MB)       @14\n         BASSM R2,R15              Call PUT routine                 @14\n         L     R2,PUTSAVE+20       Restore entry R0 to R2           @14\n         MVI   0(R2),C' '          Clear area just processed        @14\n         MVC   1(132,R2),0(R2)      to blanks                       @14\n         LM    R14,R12,PUTSAVE+12  Restore entry registers          @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - PUTHDR - Write header line'              @14\nPUTHDR   DS    0H                                                   @14\n         STM   R14,R12,PUTHDRSAVE+12  Save caller's GPRs            @14\n* Note: R0 on entry contains address of print line                  @14\n         LR    R2,R0               Save print record address        @14\n         LA    R1,SYSPRINT         R1 -> SYSPRINT DCB               @14\n         LA    R15,SPUTCODE        R15 -> PUT routine (<16MB)       @14\n         BASSM R2,R15              Call PUT routine                 @14\n         L     R2,PUTHDRSAVE+20    Restore entry R0 to R2           @14\n         MVI   0(R2),C' '          Clear area just processed        @14\n         MVC   1(132,R2),0(R2)      to blanks                       @14\n         LM    R14,R12,PUTHDRSAVE+12 Restore entry registers        @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n  TITLE 'SVCUPDTE - CHKINUSE - verify profile not in use on system' @14\n******************************************************************* @14\n* CHKINUSE                                                        * @14\n*                                                                 * @14\n*        This routine verifies that the SVC slot profile whose    * @14\n*        text string value is passed in the Current_profname      * @14\n*        field is not in use on this system. If it is found to be * @14\n*        in use the flag Profile_flags.Profile_INUSE will be set  * @14\n*        on an in addition the following fields will be populated * @14\n*        for the caller's optional usage:                         * @14\n*                                                                 * @14\n*        INUSE_ASID    - ASID of address space using the profile  * @14\n*        INUSE_JOBNAME - JOBNAME of address space using the       * @14\n*                        profile at the current time              * @14\n*                                                                 * @14\n*        This routine expects the following fields to have        * @14\n*        parsed values when called:                               * @14\n*                                                                 * @14\n*        Current_profname                                         * @14\n*                                                                 * @14\n*        This routine is called from the following 2 locations:   * @14\n*                                                                 * @14\n*        1) DOREPEAT when listing all SVCUPDTE profiles           * @14\n*        2) ENV000 when verifying that the targeted SVC slot is   * @14\n*           not already in use by another currently executing     * @14\n*           address space.                                        * @14\n*                                                                 * @14\n*        This routine only returns a return code of BADQSCAN if   * @14\n*        an unexpected return code is returned from the QSCAN     * @14\n*        service. Currently the DOREPEAT routine does not check   * @14\n*        this return code since it would only have occurred       * @14\n*        during a list operation. The ENV000 routine on the other * @14\n*        hand must check the return code. In the case of an       * @14\n*        unexpected QSCAN return code messages SVCU906A &         * @14\n*        SVCU907A messages will have always been issued.          * @14\n*                                                                 * @14\n******************************************************************* @14\nCHKINUSE DS    0H                                                   @14\n         STM   R14,R12,CHKINUSESAVE+12 Save caller's registers      @14\n*                                                                   @14\n         MVC   RIBS(RIBSINIL),RIBSINIT INITIALIZE RIB HOLDING AREA  @14\n         MVC   GQSLIST(GQSMAPL),GQSMAP   INITIALIZE GQSCAN AREA     @14\n         MVC   QNAME(L'Current_profname),Current_profname           @14\n         L     R3,RIBSPACE_p       Refresh RIBs work area           @14\n         ST    R3,RIBS              pointer                         @14\n         L     R3,RIBS             R3 -> RIBs work area             @14\n         L     R4,AMOUNTL             SET R4 TO AMOUNT OF RIB SPACE @14\n         LA    R5,QNAME                POINT R5 TO QNAME FIELD      @14\n         LA    R6,RNAME                POINT R6 TO RNAME FIELD      @14\n         LA    R8,RNAME                Setup for finding length     @14\n         XR    R7,R7                                                @14\n         MVI   RNAMEBLK,X'40'          Set trailing blank           @14\n*                                                                   @14\n*        Calculate RNAME resource length                            @14\n*                                                                   @14\nCHKINUSE_010 DS 0H                                                  @14\n         CLI   0(R8),X'40'             Do we have a blank?          @14\n         JE    CHKINUSE_020            Yes,  go process             @14\n         AHI   R7,1                    Add one to length            @14\n         C     R7,=F'6'                Is the RNAME too long ?      @14\n         JH    CHKINUSE_020            ...jif so, go process        @14\n         AHI   R8,1                    Bump up one for search       @14\n         J     CHKINUSE_010            Go back and look again       @14\nCHKINUSE_020 DS 0H                                                  @14\n         STCM  R7,B'0001',RNAMEEL  Save length for possible ENQ     @14\n*                                                                   @14\n* Development code starts:                                          @14\n*                                                                   @14\n*        CLC   Current_profname,=CL15'SVCUPDTE_109241'              @14\n*        JNE   CHKINUSE_030                                         @14\n*        MVC   QNAME(14),=C'SVCUPDTE109241'                         @14\n**       BCTR  R7,0                                                 @14\n*                                                                   @14\nCHKINUSE_030 DS 0H                                                  @14\n*                                                                   @14\n* Development code ends:                                            @14\n*                                                                   @14\n         GQSCAN AREA=((R3),(R4)),                                   @14X\n               RESNAME=((R5),(R6),(R7),SPECIFIC,8),                 @14X\n               SCOPE=SYSTEM,                                        @14X\n               MF=(E,GQSLIST)                                       @14\n*                                                                   @14\n*        Check GQSCAN return code                                   @14\n*                                                                   @14\n         CHI   R15,4               Slot in use ?                    @14\n         JE    CHKINUSEX           ...jif not in use, just return   @14\n         CHI   R15,0               Slot in use ?                    @14\n         JNE   CHKINUSE_040 ...jif not in use, go report unexpected @14\n*                                                                   @14\n*        SVC slot found to be in use - capture RIBE job name & ASID @14\n*                                                                   @14\n         LR    R6,R0                                                @14\n         SRL   R6,16               Get size of fixed RIB part       @14\n         LR    R7,R0                                                @14\n         SLL   R7,16                                                @14\n         SRL   R7,16               Get size of fized RIBE part      @14\n         USING RIB,R3                                               @14\n         LR    R4,R3               Point at current RIB             @14\n         AR    R4,R6               Add fixed length portion         @14\n         AH    R4,RIBVLEN          Add variable length portion      @14\n         USING RIBE,R4             Now pointing at 1st RIBE         @14\n         MVC   INUSE_JOBNAME,RIBEJBNM Capture requestor job name    @14\n*                                                                   @14\n*        Format ASID as 4-byte hex for caller                       @14\n*                                                                   @14\n         LA    R14,RIBEASID        R14 -> area to be converted      @14\n         LA    R15,DBWD            R15 -> temporary display area    @14\n         UNPK  0(5,R15),0(3,R14) UNPacK into temporary display area @14\n         MVZ   0(4,R15),=XL17'00'  MoVe Zone in temporary work area @14\n         TR    0(4,R15),=C'0123456789ABCDEF' TRanslate display area @14\n         MVI   4(R15),C' '         Overlay clobbered byte           @14\n         MVC   INUSE_ASID,DBWD     Set field for caller             @14\n         OI    Profile_flags,Profile_INUSE Set for caller           @14\n         J     CHKINUSEX           Go return to caller              @14\n*                                                                   @14\n*        Format unexpected return code from GQSCAN report it        @14\n*                                                                   @14\n*        -Report R15 & R0 in all cases                              @14\n*                                                                   @14\nCHKINUSE_040 DS 0H                                                  @14\n         ST    R15,DBWD            Save GQSCAN R15                  @14\n         ST    R0,DBWD+4           Save GQSCAN R0                   @14\n         $RWTO MSG906A,WRITE=NO                                     @14\n* Install R15 value                                                 @14\n         LA    R14,DBWD            R14 -> area to be converted      @14\n         LA    R15,MSG906AA        R15 -> display area              @14\n         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14\n         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14\n         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14\n         MVI   8(R15),C' '         overlay clobbered byte           @14\n* Install R0 value                                                  @14\n         LA    R14,DBWD+4          R14 -> area to be converted      @14\n         LA    R15,MSG906AB        R15 -> display area              @14\n         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14\n         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14\n         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14\n         MVI   8(R15),C'.'         overlay clobbered byte           @14\n* Issue the return/reason code message                              @14\n         $RWTO WTOD,WRITE=YES                                       @14\n* Report the profile involved                                       @14\n         $RWTO MSG907A,WRITE=NO                                     @14\n         MVC   MSG907AA,Current_profname                            @14\n         $RWTO WTOD,WRITE=YES                                       @14\n* Set return code for caller                                        @14\n         LHI   R15,BADQSCAN        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\nCHKINUSEX DS   0H                                                   @14\n         LM    R14,R12,CHKINUSESAVE+12 Restore caller's registers   @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n         TITLE 'MLWTO - Issue MLWTO for event tracking'             @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n*        MLWTO - Issue multi-line WTO tracking message            * @14\n*                                                                 * @14\n* This routine is responsible for constructing the multiline WTO  * @14\n* used for event tracking and placing it in the system hardcopy   * @14\n* log.                                                            * @14\n*                                                                 * @14\n* Note: This routine expects all fields necessary to be placed in * @14\n*       any of the individual WTO lines has been harvested and    * @14\n*       placed in the expected field in display format.           * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nMLWTO    DS    0H                                                   @14\n         STM   R14,R12,MLWTOSAVE+12    Save caller's registers      @14\n*                                                                   @14\n*        Calculate size of MLWTO message area to acquire            @14\n*                                                                   @14\n*        LARL  R14,MLWTOSUFFIX     Point after MLWTO lines area     @14\n*        LARL  R15,MLWTOPREFIX     Point before MLWTO lines area    @14\n*        SR    R14,R15             R15 = length to acquire          @14\n*        LR    R0,R14              R0 = length to acquire           @14\n         LHI   R0,MLWTOTLEN        Get length to acquire            @14\n         ST    R0,MLWTOLENGTH    Save length just in case we got it @14\n         STORAGE OBTAIN,           Get storage                      @14X\n               LENGTH=(R0),                                         @14X\n               LOC=ANY                                              @14\n*                                                                   @14\n*        Did we get the storage ?                                   @14\n*                                                                   @14\n         LTR   R15,R15             Successful ?                     @14\n         JZ    MLWTO_010           ...jif so                        @14\n*                                                                   @14\n*        Issue WTO indicating MLWTO area could not be acquired      @14\n*                                                                   @14\n         $RWTO MSG026A,WRITE=YES   Issue message                    @14\n         LHI   R15,BADMLWTO        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     MLWTOX                & go return to caller          @14\n*                                                                   @14\n*        Prime MLWTO area for population & display                  @14\n*                                                                   @14\nMLWTO_010 DS   0H                                                   @14\n         OI    MYFLAGS,MLWTOAREA   Indicate MLWTO area acquired     @14\n         ST    R1,MLWTOLINES@      Save address for construction    @14\n         LR    R2,R1               Copy MLWTO work area address     @14\n         L     R3,MLWTOLENGTH      R3 = length to copy              @14\n         LARL  R4,MLWTOPREFIX      R4 -> source location            @14\n         L     R5,MLWTOLENGTH      R5 = length to copy              @14\n         MVCL  R2,R4               Copy MLWTO lines to work area    @14\n*                                                                   @14\n*        Establish MLWTO area addressability                        @14\n*                                                                   @14\n         L     R3,MLWTOLINES@      R3 -> MLWTO work area            @14\n         USING (MLWTOPREFIX,MLWTOSUFFIX),R3  Inform assembler       @14\n*                                                                   @14\n*        Populate MLWTO line data fields for display                @14\n*                                                                   @14\n* DATALINE2 fields                                                  @14\n         MVC   DATALINE2_userid,EUSER                               @14\n         MVC   DATALINE2_LMOD,LMOD                                  @14\n         LA    R14,MODSIZE         R14 -> area to be converted      @14\n         LA    R15,DATALINE2_SIZE  R15 -> display area              @14\n         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14\n         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14\n         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14\n         MVI   8(R15),C' '         overlay clobbered byte           @14\n* DATALINE3 fields                                                  @14\n         LA    R14,@CSAEPN@        R14 -> area to be converted      @14\n         LA    R15,DATALINE3_EP    R15 -> display area              @14\n         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14\n         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14\n         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14\n         MVI   8(R15),C' '         overlay clobbered byte           @14\n         LA    R14,@CSAEPN         R14 -> area to be converted      @14\n         LA    R15,DATALINE3_LP    R15 -> display area              @14\n         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14\n         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14\n         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14\n         MVI   8(R15),C' '         overlay clobbered byte           @14\n* DATALINE4 fields                                                  @14\n         MVC   DATALINE4_AMODE,=CL3'ANY' Assume AMODE=ANY           @14\n         TM    BLARMODE,BLMAMOD     AMODE=ANY ?                     @14\n         JO    MLWTO_020            ...jif so, assumption correct   @14\n         MVC   DATALINE4_AMODE,=CL3'31 ' Assume AMODE=31            @14\n         TM    BLARMODE,BLAM31      AMODE=31 ?                      @14\n         JO    MLWTO_020            ...jif so, assumption correct   @14\n         MVC   DATALINE4_AMODE,=CL3'24 ' else AMODE 24 (for us)     @14\nMLWTO_020 DS   0H                                                   @14\n         MVC   DATALINE4_RMODE,=CL3'ANY' Assume RMODE ANY           @14\n         TM    BLARMODE,BLRMANY     AMODE=ANY ?                     @14\n         JO    MLWTO_030            ...jif so, assumption correct   @14\n         MVC   DATALINE4_RMODE,=CL3'24 ' else set RMODE 24          @14\n* Format old entry's entry point from captured entry (1st 4 bytes)  @14\nMLWTO_030 DS   0H                                                   @14\n         LA    R14,OLDENTRY        R14 -> area to be converted      @14\n         LA    R15,DATALINE4_OLDEP R15 -> display area              @14\n         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14\n         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14\n         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14\n         MVI   8(R15),C' '         overlay clobbered byte           @14\n* DATALINE5 fields                                                  @14\n         MVC   DATALINE5_SVCLIB,DSN    Install SVCLIB data set name @14\n         MVC   DATALINE5_VOLSER,VOL    Install SVCLIB volser        @14\n* DATALINE6 fields                                                  @14\n         MVC   DATALINE6_ESQA@,=CL8'N/A' Assume filter not present  @14\n         L     R14,SQA_ADDR        Pick up possible filter code @   @14\n         LTR   R14,R14             Was the filter code installed ?  @14\n         JZ    MLWTO_040           ...jif not                       @14\n         LA    R14,SQA_ADDR        R14 -> area to be converted      @14\n         LA    R15,DATALINE6_ESQA@ R15 -> display area              @14\n         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14\n         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14\n         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14\n         MVI   8(R15),C' '         overlay clobbered byte           @14\n* DATALINE7 fields - 1st 50 bytes of any PARM provided string       @14 ****\nMLWTO_040 DS   0H                                                   @14\n         XR    R4,R4               Clear work register              @14\n         LH    R4,Input_parmlen Get full executable length of PARM  @14\n*                                  Assume DATALINE8 will contain    @14\n*                                   something                       @14\n         CHI   R4,51               >= 51 bytes in length            @14\n         JH    MLWTO_050         ...jif so, go move max of 50 bytes @14\n* Move just for the length found in Input_parmlen                   @14\n         LA    R7,DATALINE7_PARM   R7 -> target field for copy      @14\n         LA    R8,Copied_input_parms R8 -> source field for copy    @14\n         EX    R4,CAPDLPRM       Copy entire PARM string to display @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nCAPDLPRM MVC   0(*-*,R7),0(R8)   Copy field R8 to R7                @14\nSVCUPDTE LOCTR ,                                                    @14\n         J     MLWTO_060                                            @14\n*                                                                   @14\n* Move max of 50 characters for DATALINE7 and then complete         @14\n* DATALINE8 with the rest of the PARM string                        @14\n*                                                                   @14\nMLWTO_050 DS   0H                                                   @14\n         LA    R7,DATALINE7_PARM   R7 -> target field for copy      @14\n         LA    R8,Copied_input_parms R8 -> source field for copy    @14\n         LHI   R4,50             Make length executable             @14\n         EX    R4,CAPDLPRM     Copy 1st 50 bytes of PARM to display @14\n*                                                                   @14\n* Calculate length of residual move                                 @14\n*                                                                   @14\n         LA    R7,DATALINE8_PARM   R7 -> target field for copy      @14\n         LA    R8,Copied_input_parms R8 -> source field for copy    @14\n         AHI   R8,51               Skip over 1st 51 bytes of source @14\n         LH    R4,Input_parmlen  Get full executable length of PARM @14\n         S     R4,=F'51'           Reduce by part already displayed @14\n         EX    R4,CAPDLPRM     Copy 2nd 50 bytes of PARM to display @14\n*                                                                   @14\n* We should be done with the MLWTO text lines                       @14\n*                                                                   @14\nMLWTO_060 DS   0H                                                   @14\n*                                                                   @14\n*        Issue MLWTO                                                @14\n*                                                                   @14\n         LARL  R2,VMC002I          R2 -> Model MLWTO                @14\n         MVC   WTOD(VMC002IL),0(R2)    Install model MLWTO list     @14\n         XR    R0,R0               Clear R0 for 1st multi-line WTO  @14\n         WTO   TEXT=((CNTLLINE,),(STARLINE,),                       @14X\n               (DATALINE2,),(DATALINE3,),(DATALINE4,),(DATALINE5,), @14X\n               (DATALINE6,),(DATALINE7,),(DATALINE8,),              @14X\n               (STARLINE2,)),                                       @14X\n               MF=(E,WTOD)                                          @14\n*                                                                   @14\n         DROP  R3                  Drop MLWTO work area             @14\n*                                                                   @14\n*        Free MLWTO work area is one was allocated                  @14\n*                                                                   @14\n         TM    MYFLAGS,MLWTOAREA   Do we have the work area ?       @14\n         JNO   MLWTOX              ...jif not, skip free            @14\n         L     R0,MLWTOLENGTH      R0 = length to free              @14\n         L     R1,MLWTOLINES@      R1 -> area to free               @14\n*                                                                   @14\n         STORAGE RELEASE,          Free                             @14X\n               ADDR=(R1),           the DSNTAB                      @14X\n               LENGTH=(R0)           work area                      @14\n         NI    MYFLAGS,X'FF'-MLWTOAREA  Reset flag                  @14\n*                                                                   @14\nMLWTOX   DS    0H                                                   @14\n         LM    R14,R12,MLWTOSAVE+12    Restore caller's registers   @14\n         BR    R14                     Return to caller             @14\n*                                                                   @14\n         TITLE 'PARS000 - Parse input parameters'                   @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n*        Parse input parameters for syntax & length in phase 1 of * @14\n*        parse and context in light of other supplied parameters  * @14\n*        is checked in phase 1 of the parse. Items that cannot be * @14\n*        checked without opening the SVCLIB library are deferred  * @14\n*        to processing performed in the ENV000 subroutine.        * @14\n*                                                                 * @14\n* Note: The parse processing will process the following keyword   * @14\n*       fields & perform the listed checks:                       * @14\n*                                                                 * @14\n*       SVC#     - The 1 to 3 digit zoned decimal SVC number.     * @14\n*                  This is a required keyword.                    * @14\n*       TYPE     - Single zoned decimal digit of 1, 2, 3, 4 or 6. * @14\n*                  This is required unless the SVC# parameter     * @14\n*                  supplied is an ESR SVC # (109, 116, 122 or     * @14\n*                  137).                                          * @14\n*       MOD      - Up to 8 character load module member name that * @14\n*                  must exist in the library specified on the     * @14\n*                  SYSLIB DDname.                                 * @14\n*       ATTRIB   - This parameter, if specified, has the          * @14\n*                  following format:                              * @14\n*                                                                 * @14\n*                  ATTRIB=(a1,a2,a3,a4) where ax is one or more   * @14\n*                  of the following attributes:                   * @14\n*                                                                 * @14\n*                  APF - Indicates that the SVC is restricted to  * @14\n*                        authorized program callers. The absence  * @14\n*                        of this attribute implies the SVC is NOT * @14\n*                        restricted to authorized callers.        * @14\n*                                                                 * @14\n*                  AR  - Indicates that the SVC supports callers  * @14\n*                        that are in AR ASC mode. The absence of  * @14\n*                        this attribute implies that the SVC does * @14\n*                        NOT support callers in AR ASC mode.      * @14\n*                                                                 * @14\n*                  NP  - Indicates that the SVC cannot be         * @14\n*                        pre-empted for I/O operations. The       * @14\n*                        absence of this attribute implies that   * @14\n*                        the SVC can be pre-empted for I/O        * @14\n*                        operations.                              * @14\n*                                                                 * @14\n*                  ASF - Indicates that the SVC can be assisted.  * @14\n*                        The absence of this attribute indicates  * @14\n*                        that the SVC is not assisted. This       * @14\n*                        facility is NOT support on z/10 and      * @14\n*                        higher level processors.                 * @14\n*                                                                 * @14\n*       LOCKS    - This parameter, if specified, has the          * @14\n*                  following format:                              * @14\n*                                                                 * @14\n*                  LOCKS=(lock1,lock2,...,lockn) where lockx is   * @14\n*                  one or more of the following lock types:       * @14\n*                                                                 * @14\n*                  LOCAL  - local lock                            * @14\n*                  DISP   - dispatcher lock (global spin)         * @14\n*                  SRM    - SRM/OPT lock (global spin)            * @14\n*                  CMS    - Cross Memory Service lock             * @14\n*                  SALLOC - space allocation lock (global spin)   * @14\n*                                                                 * @14\n*                  Note that the context of the supplied LOCKS in * @14\n*                  regard to the SVC type and other supplied      * @14\n*                  parameters is not checked during phase 1 of    * @14\n*                  the parse operation. They are checked in phase * @14\n*                  2 of the parse operation.                      * @14\n*                                                                 * @14\n*       GOODNITE - 4 zoned decimal digits representing HHMM value * @14\n*                  later in the current day for the successfully  * @14\n*                  installed SVC to be de-installed. This is an   * @14\n*                  optional parameter.                            * @14\n*       USERID   - 1 to 8 character userid filter which           * @14\n*                  indicates that only address spaces owned by    * @14\n*                  this userid are to access the new SVC. All     * @14\n*                  other caller's of the SVC will get the old SVC * @14\n*                  code. This parameter is optional.              * @14\n*                                                                 * @14\n*       The following fields are set as a result of this process- * @14\n*       ing:                                                      * @14\n*                                                                 * @14\n*       SVC#   3 zoned decimal digit value in range 0-255         * @14\n*       SVCNO  single byte binary value in range 1-255            * @14\n*       LMOD   8 character left justified load module name        * @14\n*       LOCKS_FLAGS - locks supplied indicator byte, where:       * @14\n*                                                                 * @14\n*                    X'80' - LOCAL lock requested                 * @14\n*                    X'40' - CMS lock requested                   * @14\n*                    X'20' - SRM lock requested                   * @14\n*                    X'10' - SALLOC lock requested                * @14\n*                    X'08' - DISP lock requested                  * @14\n*                                                                 * @14\n*                    Note: The LOCKS_FLAGS byte uses the same     * @14\n*                          lock mappings used by the SVCENTRY     * @14\n*                          DSECT (IHASVC) for direct replacement  * @14\n*                          purposes.                              * @14\n         AGO   .JRH99A\n\n         DC    S(L'SVCNO,SVCNO)    1st operand\n         DC    S(L'EPNAME,EPNAME)  2nd operand\n         DC    S(L'LOCKS,LOCKS)    3rd operand                      @08\n         DC    S(L'ENDOFDAY,ENDOFDAY) 4th operand\n         DC    S(L'USERID,USERID)  5th operand                      @05\n\n\n&NAPF    SETA    8                    VALUE OF THE APF BIT IN SVC ENTRY\n&NAR     SETA    4                    VALUE OF AR BIT IN SVC ENTRY @L3A\n&NNP     SETA    2                    VALUE OF THE NON-PREMPT\n\nATTR_FLAGS DS XL1                  Attributes requested flags       @14\nATTR_NPRMT EQU X'80'               -Non-preemptable requested       @14\nATTR_APF   EQU X'40'               -APF requested (APF=YES)         @14\nATTR_AR    EQU X'20'               -AR requested (AR=YES)           @14\nATTR_ESR   EQU X'10'               -ESR SVC request                 @14\n\nPARSE subroutine needs to set the following:\n\nSVC_TYPE DS    CL1                 SVC type for this request\n\nESRSVCNO DS    CL3                 ESR SVC number (109/116/122/137) @14\nATTR_FLAGS DS XL1                  Attributes requested flags       @14\nLOCKS_FLAGS DS XL1                 Locks requested flags            @14\nPROC_FLAGS DS XL1                  Processing requested flags       @14\n\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n*        SVC type authorization requirements                      * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nSVC_BRXLE DC   A(SVC_START,SVC_entry_len,SVC_END-SVC_entry_len)     @14\n*                                                                   @14\nSVC_START DS   0H                                                   @14\n         DC    C'1',AL1(SYSTEMS)   \"SYSTEM\" authorization required  @14\nSVC_entry_len EQU *-SVC_START      Generate length of table entry   @14\n         DC    C'2',AL1(AUTHUSER)                                   @14\n         DC    C'3',AL1(AUTHUSER)                                   @14\n         DC    C'4',AL1(AUTHUSER)                                   @14\n         DC    C'6',AL1(AUTHUSER)                                   @14\nSVC_END  EQU   *                                                    @14\n\n\n.JRH99A  ANOP\n*                                                                   @14\n         TITLE 'SVCUPDTE - PARS000 - parse input parameters'        @14\n*=================================================================* @14\n*                                                                 * @14\n*        P H A S E  1  parsing                                    * @14\n*                                                                 * @14\n* This routine is responsible for parsing the input parameter     * @14\n* string. It will detect invalid parameters & syntax and return   * @14\n* to the caller after issuing an appropriate WTO and setting a    * @14\n* corresponding return code for that caller.                      * @14\n*                                                                 * @14\n* This routine is responsible for setting the following flags for * @14\n* the caller:                                                     * @14\n*                                                                 * @14\n* Parse_flags.Parse_LIST    for LIST request                      * @14\n* Parse_flags.Parse_INSTALL for INSTALL request                   * @14\n*                                                                 * @14\n* This routine is responsible for setting the following fields    * @14\n* for their usage by the caller when an INSTALL request has been  * @14\n* detected:                                                       * @14\n*                                                                 * @14\n* ______________                                                  * @14\n*                                                                 * @14\n*                                                                 * @14\n* %Need SVC#, ESR#, set RNAME (for ENQueue processing)            * @14\n* %Need LMOD                                                      * @14\n* %Need LOCKS byte in same form as SVC table entry                * @14\n* %Need ATTRibutes byte in same form as SVC table entry           * @14\n* %Need _________________________________________________         * @14\n*                                                                 * @14\n* This program supports standard SVC & ESR SVC temporary          * @14\n* installations as described below. The program is designed to    * @14\n* remain in execution for the life of the IPL unless the install- * @14\n* ing batch job is STOPped with a system command or cancelled by  * @14\n* an authorized user or the GOODNITE time has been reached. Upon  * @14\n* termination for any of these reasons the previous content of    * @14\n* involved SVC or ESR SVC slot will be restored to its original   * @14\n* content thereby placing old SVC code back into use. This is a   * @14\n* testing/development vehicle and any permanent installation of   * @14\n* an SVC will require the assistance of the systems programming   * @14\n* staff to code the appropriate IEASVCxx entry, locate the module * @14\n* in the appropriate IEAFIXxx, IEALPAxx or LPALSTxx members and   * @14\n* placement of the module on an appropriate library available     * @14\n* during NIP and post-NIP processing.                             * @14\n*                                                                 * @14\n* Standard SVC install                                            * @14\n* ====================                                            * @14\n* The semantics for the specification of a standard SVC (non-ESR) * @14\n* are as follows:                                                 * @14\n*                                                                 * @14\n* SVC=nnn,LMOD=xxxxxxxx,TYPE=n,ATTR=(attr1,attr2,...,attr3),      * @14\n*  LOCKS=(lock1,lock2,...,lockn),USER=uuuuuuuu,GOODNITE=hhmm      * @14\n*                                                                 * @14\n* ESR SVC install                                                 * @14\n* ===============                                                 * @14\n* The semantics for the specification of an ESR SVC are as        * @14\n* follows:                                                        * @14\n*                                                                 * @14\n* SVC=(aaa,bbb),LMOD=xxxxxxxx,ATTR=(attr1,attr2,...,attr3),       * @14\n*  LOCKS=(lock1,lock2,...,lockn),USER=uuuuuuuu,GOODNITE=hhmm      * @14\n*                                                                 * @14\n* Rules                                                           * @14\n* =====                                                           * @14\n* 01) For a standard SVC install the SVC nnn parameter must be a  * @14\n*     1 to 3 digit zoned decimal number for which a CL(#SNOMISC)  * @14\n*     profile exists in the RACF database in the form:            * @14\n*                                                                 * @14\n*     SVCUPDTE_nnn                                                * @14\n*                                                                 * @14\n*     and the RACF userid associated with the install must        * @14\n*     possess AC(READ) priviledges for this resource.             * @14\n*                                                                 * @14\n* 02) For an ESR SVC install the SVC aaa parameter must be a 3    * @14\n*     digit zoned decimal number equal to one of the following    * @14\n*     values:             e RACF database in the form:            * @14\n*                                                                 * @14\n*     109 for a TYPE 3 or 4 ESR SVC                               * @14\n*     116 for a TYPE 1 ESR SVC                                    * @14\n*     122 for a TYPE 2 ESR SVC                                    * @14\n*     137 for a TYPE 6 ESR SVC                                    * @14\n*                                                                 * @14\n*     When the ESR SVC form is used the bbb parameter must also   * @14\n*     be a 1 to 3 digit zoned decimal number in a range specific  * @14\n*     to the type of SVC as per the following table:              * @14\n*                                                                 * @14\n*     aaa Type Acceptable range for bbb value                     * @14\n*     === ==== ==============================                     * @14\n*     109  3/4 000-255                                            * @14\n*     116   1  000-014                                            * @14\n*     122   2  000-019                                            * @14\n*     137   6  000-007                                            * @14\n*                                                                 * @14\n*     For this type install a CL(#SNOMISC) profile must exist on  * @14\n*     the RACF database in the form:                              * @14\n*                                                                 * @14\n*     SVCUPDTE_aaabbb                                             * @14\n*                                                                 * @14\n*     where both aaa & bbb will be 3 digit zoned decimal numbers  * @14\n*     and the RACF userid associated with the install must        * @14\n*     possess AC(READ) priviledges for this resource.             * @14\n*                                                                 * @14\n* 03) The TYPE parameter and the ESR form of the SVC parameter    * @14\n*     are mutually exclusive. TYPE when supplied must be a single * @14\n*     zoned decimal number with the value of 1, 2, 3, 4 or 6.     * @14\n*                                                                 * @14\n* 04) While traditionally a type 3 SVC has identified a function  * @14\n*     that is contained in a single load module and a type 4 SVC  * @14\n*     has identified a function that loads additional modules     * @14\n*     this program supports only the user supplying a single load * @14\n*     module via the LMOD parameter. If you have a need to        * @14\n*     install a traditional type 4 SVC contained over multiple    * @14\n*     load modules you will need to open a request to have the    * @14\n*     systems programming staff perform the installation for you. * @14\n*                                                                 * @14\n* 05) The lock1,lock2,...,lockn subparameters available are as    * @14\n*     follow and require the listed level of authority to specify * @14\n*     them:                                                       * @14\n*                                                                 * @14\n*      LOCK   Explanation & level of authority required           * @14\n*     ====== ==================================================== * @14\n*     LOCAL  LOCAL lock                                           * @14\n*            Authority: AC(READ) to profile                       * @14\n*     CMS    Cross Memory Services lock                           * @14\n*            Authority: AC(READ) to profile                       * @14\n*     SRM    System Resources Manager lock                        * @14\n*            Authority: RACF global special & AC(READ)            * @14\n*     SALLOC Space ALLOCation lock                                * @14\n*            Authority: RACF global special & AC(READ)            * @14\n*     DISP   Dispatcher lock                                      * @14\n*            Authority: RACF global special & AC(READ)            * @14\n*                                                                 * @14\n*     Notes                                                       * @14\n*     =====                                                       * @14\n*     * A type 1 ESR or non-ESR SVC will default to having the    * @14\n*       LOCAL lock and must not release the LOCAL lock. You do    * @14\n*       not need to specify the LOCAL lock for a type 1 SVC as    * @14\n*       LOCAL lock is automatically obtained for a type 1 SVC.    * @14\n*     * A type 3/4 ESR or non-ESR SVC may not hold any global     * @14\n*       spin locks                                                * @14\n*     * A type 3/4 ESR or non-ESR SVC may only request that the   * @14\n*       LOCAL or LOCAL & CMS locks be held on entry               * @14\n*     * If you specify the CMS lock for SVC types 2, 3 or 4 you   * @14\n*       must also specify the LOCAL lock.                         * @14\n*     * A type 6 ESR or non-ESR SVC may not hold any locks        * @14\n*     * Others? Future?                                           * @14\n*                                                                 * @14\n* 06) The attr1,attr2,...,attrn subparameters available are as    * @14\n*     follow:                                                     * @14\n*                                                                 * @14\n*      ATTR   Explanation                                         * @14\n*     ====== ==================================================== * @14\n*     APF    SVC must be invoked by an APF authorized caller      * @14\n*            Default: NO                                          * @14\n*     AR     SVC can be invoked in Access Register mode           * @14\n*            Default: NO                                          * @14\n*     NPRMPT Non-preemptive SVC                                   * @14\n*            Default: NO                                          * @14\n*     ASF    SVC requires the SVC ASsist Facility                 * @14\n*            Default: NO                                          * @14\n*                                                                 * @14\n*     In the case of the above subparameters the presence of the  * @14\n*     above ATTR string implies the attribute is desired while    * @14\n*     the absence of the ATTR string implies the attribute is not * @14\n*     desired.                                                    * @14\n*                                                                 * @14\n*     The ASF option is not available on z/10 and more modern     * @14\n*     processors. More on this later.                             * @14\n*                                                                 * @14\n*     Users installing ESR or non-ESR SVCs only need AC(READ)     * @14\n*     authority for the covering SVCUPDTE_nnn or SVCUPDTE_aaabbb  * @14\n*     profile to specifiy the above attributes.                   * @14\n*                                                                 * @14\n* 07) The LMOD parameter provides the true name of a load module  * @14\n*     that exists on the SVCLIB library with the required         * @14\n*     attributes of RENT, REUS, REFR, OVLY(NO), SPLIT(NO),        * @14\n*     SCTR(NO) and EXEC. The load module can be any AMODE or      * @14\n*     RMODE. AMODE31 SVC modules will be placed in extended CSA   * @14\n*     or SQA or non-extended CSA or SQA based on the RMODE of the * @14\n*     load module and the requirements of the SVC type. Any       * @14\n*     RMODE64 module will be placed in 31-bit addressable         * @14\n*     storage. For AMODE64 modules the AMODE31 bit will be set in * @14\n*     the SVC table entry and it will be the responsibility of    * @14\n*     SVC to recognize that the caller is in AMODE64 addressing   * @14\n*     mode.                                                       * @14\n*                                                                 * @14\n* 08) The USER parameter provides a mechanism to restrict access  * @14\n*     to the newly installed SVC to a single specific RACF userid * @14\n*     as a filter. This is useful if for instance the SVC number  * @14\n*     is buried in multiple locations and a developer needs to    * @14\n*     test new SVC code without impacting other users of the same * @14\n*     SVC number. If the USER parameter filter is supplied and    * @14\n*     userid associated with the SVC call matches this parameter  * @14\n*     the new SVC code will be invoked. Any other user of the SVC * @14\n*     will be passed through to the old SVC code.                 * @14\n*                                                                 * @14\n* 09) The GOODNITE parameter specifies a future time on the same  * @14\n*     day of execution when the new SVC code should be automati-  * @14\n*     cally deinstalled and the SVCUPDTE program exiting.         * @14\n*                                                                 * @14\n*=================================================================* @14\nPARS000  DS    0H                                                   @14\n         STM   R14,R12,PARSSAVE+12     Save caller's GPRs           @14\n         L     R2,@INPARMS         R2 -> parmlen + parmlist         @14\n         CLC   =X'0000',0(R2)      Is there a parameter list ?      @14\n* Could default to list here <FDIR>                                 @14\n         JNE   PARS010             ...jif so, else handle here      @14\n*                                                                   @14\n*        No input parameters to parse - terminating error           @14\n*                                                                   @14\n         $RWTO MSG001A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM1        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*                                                                   @14\n*        Check for excessive paramater string length                @14\n*                                                                   @14\nPARS010  DS    0H                                                   @14\n         LH    R3,0(R2)            Get length of parameters         @14\n         CHI   R3,100              Greater than target work fields  @14\n         JNH   PARS020             ...jif not                       @14\n*                                                                   @14\n*        Excessive parameter length                                 @14\n*                                                                   @14\n         $RWTO MSG002A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM2        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*                                                                   @14\n*        Make copies of input parameters for our use & debugging    @14\n*                                                                   @14\nPARS020  DS    0H                                                   @14\n         BCTR  R3,0                Make it an executable length     @14\n         STH   R3,Input_parmlen    Save it as an executable length  @14\n         LA    R4,2(R2)            R4 -> parameter list string      @14\n*                                                                   @14\n* Copy the string to our work area for debugging and another copy   @14\n* we can work with.                                                 @14\n*                                                                   @14\n         LARL  R1,CPYIPRMS         R1 -> EX instruction             @14\n         LA    R14,Copied_input_parms R14 -> traget copy area       @14\n         EX    R3,0(R1)            Make original copy of parameters @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nCPYIPRMS MVC   0(*-*,R14),0(R4)    \"Original\" copy area             @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         LARL  R1,CPYIPRMS         R1 -> EX instruction             @14\n         LA    R14,Work_input_parms R14 -> target copy area         @14\n         EX    R3,0(R1)            Make original copy of parameters @14\n*                                                                   @14\n*        Work with work copy of the input parameter string &        @14\n*        upper case the string                                      @14\n*                                                                   @14\n*       Note: Registers used & in effect are:                       @14\n*                                                                   @14\n*        R3  = executable length of input parameter string          @14\n*        R7 -> Work copy of the parameter string                    @14\n*                                                                   @14\n         LA    R7,Work_input_parms R7 -> work copy of parameters    @14\n*                                                                   @14\n*        See if the input string contains invalid characters,...    @14\n*        i.e. characters other than alphanumeric, national ($,#,@), @14\n*        or characters other than alphanumeric, national ($,#,@),   @14\n*        or special (, and $). These are the only ones currently    @14\n*        supported. The left and right parentheses are supported    @14\n*        in this implementation.                                    @14\n*                                                                   @14\n         SLR   R2,R2               Clear TRT work register          @14\n         LARL  R4,TRTPARM1         Get translate table address      @14\n         EX    R3,TRTIPRMS         <execute above instruction>      @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nTRTIPRMS TRT   0(*-*,R7),0(R4)     Test working copy of string      @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         LTR   R2,R2               Non-zero function byte found ?   @14\n         JZ    PARS030             ...jif not, else issue message   @14\n*                                                                   @14\n*        Unsupported characters found in input parameters           @14\n*                                                                   @14\n         $RWTO MSG003A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM3        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*                                                                   @14\n*        All characters provided in the input string were           @14\n*        acceptable. We now need to translate to upper case while   @14\n*        preserving; 1) national characters, 2) assignment          @14\n*        character (=), 3) field separator character (comma) and    @14\n*        4) subparameter list start & finish characters (left &     @14\n*        right parentheses).                                        @14\n*                                                                   @14\nPARS030  DS    0H                                                   @14\n         LARL  R4,HEXUPPER         Get conversion table address     @14\n         EX    R3,UPIPRMS           to upper case                   @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nUPIPRMS  TR    0(*-*,R7),0(R4)     Translate working copy of string @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n*        We now have an upper case parameter string we can finally  @14\n*        parse the parameter list string                            @14\n*                                                                   @14\n*        Valid parameter string options are:                        @14\n*                                                                   @14\n*        SVC=nnn or SVC=(aaa,bbb) - required for install            @14\n*        LMOD=xxxxxxxx            - required for install            @14\n*        ATTR=(a1,a2,...an)       - optional                        @14\n*        LOCKS=(l1,l2,...ln)      - optional                        @14\n*        GOODNITE=hhmm            - optional                        @14\n*        USER=uuuuuuuu            - optional                        @14\n*        TYPE=n                   - required if ESR form not used   @14\n*                                                                   @14\n* R7 -> upper cased working copy of the input parameter string      @14\n* R3  = executable length of the parameter string                   @14\n*                                                                   @14\n* If length was 4 then check for LIST request (early check)         @14\n*                                                                   @14\n         CHI   R3,3                Length = 4 bytes ?               @14\n         JNE   PARS040             ...if not, continue parse        @14\n         CLC   =CL4'LIST',0(R7)    Was it the LIST option ?         @14\n         JNE   PARS040             ...jif not, continue parse       @14\n         OI    Parse_flags,Parse_LIST Set LIST as requested         @14\n         J     PARSX               Just MLT for now                 @14\n\n*        AGO   .JH0831A\n*                                                                   @14\n*        At this point:                                             @14\n*                                                                   @14\n*        R3  = executable length of input parameter string          @14\n*        R7 -> Work copy of the parameter string                    @14\n*                                                                   @14\n*        We now need to call IKJTSOEV to establish a TSO/E          @14\n*        environment in this program's address space. IKJTSOEV uses @14\n*        the following parameters:                                  @14\n*                                                                   @14\n*        PARM1 is reserved                                          @14\n*        PARM2 is a fullword that will contain the return code on   @14\n*              return from IKJTSOEV                                 @14\n*        PARM3 is a fullword that will contain the reason code on   @14\n*              return from IKJTSOEV                                 @14\n*        PARM4 is a fullword that will contain the abend code if an @14\n*              abend occurs during IKJTSOEV environment service     @14\n*              processing                                           @14\n*        PARM5 is a fullword that will contain the address of the   @14\n*              CPPL                                                 @14\n*                                                                   @14\nPARS040  DS    0H                                                   @14\n         XC    PARM1,PARM1\n         LA    R14,PARM1\n         ST    R14,PLIST+0\n         LA    R14,PARM2\n         ST    R14,PLIST+4\n         LA    R14,PARM3\n         ST    R14,PLIST+8\n         LA    R14,PARM4\n         ST    R14,PLIST+12\n         LA    R14,PARM5\n         ST    R14,PLIST+16\n\n\n\n\n         AGO   .JH0831C\n         LA    R14,PLIST+0         <reserved>                       @14\n         LA    R15,PLIST+4         @ return code                    @14\n         LA    R0,PLIST+8          @ reason code                    @14\n         LA    R1,PLIST+12         abend code                       @14\n         LA    R2,PLIST+16         @ of CPPL                        @14\n         STM   R14,R2,PLIST                                         @14\n.JH0831C ANOP\n         OI    PLIST+16,X'80'      Flag end of PARAMs               @14\n         LARL  R2,PARS041          Put error routine @ in GPR2      @14\n         LA    R1,PLIST                                             @14\n         LINK  EP=IKJTSOEV,                                         @14X\n               ERRET=((2)),                                         @14X\n               SF=(E,PLIST+20)                                      @14\n         L     R2,PARM2            Get return code parameter        @14\n         LTR   R2,R2               Any problems ?\n         JZ    PARS043             ...jif not\n         J     PARS042             otherwise report\n*                                                                   @14\n*        Error occurred during IKJTSOEF processing - report it      @14\n*        ERRET driven\n*                                                                   @14\nPARS041  DS    0H                                                   @14\n         $RWTO MSG102E,WRITE=YES                                    @14\n         LHI   R15,BADERRET        Set return code                  @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*                                                                   @14\n*        Error occurred during IKJTSOEF processing - report it      @14\n*        -Return code non-zero                                      @14\n*                                                                   @14\nPARS042  DS    0H                                                   @14\n         $RWTO MSG109E,WRITE=NO                                     @14\n* Install PLIST+4 value                                             @14\n         LA    R14,PLIST+4         R14 -> area to be converted      @14\n         LA    R15,MSG109EA        R15 -> display area              @14\n         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14\n         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14\n         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14\n         MVI   8(R15),C' '         overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,BADTSOEV        Set return code                  @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*                                                                   @14\n*        Set up for IKJPARS usage - muck up command buffer          @14\n*                                                                   @14\n*        Note:                                                      @14\n*        =====                                                      @14\n*        1) PLIST+16 contains @ CPPL                                @14\n*        2) R7 -> upper cased working copy of the input parameter   @14\n*                 string                                            @14\n*        3) R3  = executable length of the parameter string         @14\n*                                                                   @14\n* R7 -> upper cased working copy of the input parameter string      @14\n* R3  = executable length of the parameter string                   @14\n*                                                                   @14\nPARS043  DS    0H\n*        L     R2,PLIST+16         R2 -> CPPL\n         L     R2,PARM5            R2 -> CPPL\n         LR    R9,R2               <temp - debug>\n         XC    PLIST(32),PLIST\n         USING CPPL,R2\n         MVC   UPT,CPPLUPT         A(UPT) to IKJPARS plist\n         MVC   ECT,CPPLECT         A(ECT) to IKJPARS plist\n         DROP   R2\n         LA    R1,DWSECB\n         ST    R1,ECB              A(ECB) to IKJPARS plist\n         L     R1,=A(SVCCPL)\n         ST    R1,PCL              A(PCL) to IKJPARS plist\n         LA    R1,DWSANS\n         ST    R1,ANS              A(ANS) to IKJPARS plist\n*\n*        Muck up a CBUF area for IKJPARS invocation\n*\n*        1) Need to update CPPLCBUF with alternative command buffer\n*\n         LR    R2,R3               Copy executable string length\n         AHI   R2,5                Add 5 bytes\n         STH   R2,BUFLEN           Save length in CBUF\n         LA    R1,BUFLEN\n         ST    R1,CBUF\n         LA    R1,PLIST\n         BASR  R10,0               Macro internal addressability\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n         CALLTSSR EP=IKJPARS,MF=(E,(1))\n         DROP  R10             Drop internal macro addressability\n*\n*        Was IKJPARS successful ?\n*\n         LTR   R15,R15             Good parse ?\n         JZ    PARS1000            ...jif so\n*\n*        IKJPARS failed - report return code\n*\n         ST    R15,DWD             Save IKJPARS return code\n         $RWTO MSG032A,WRITE=NO\n         LA    R14,DWD             R14 -> source area to convert\n         LA    R15,MSG032AA        R15 -> target display area\n         UNPK  0(9,R15),0(5,R14)   Unpack\n         MVZ   0(8,R15),=XL17'00'  Move zoned\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate\n         MVI   8(R15),C' '         Overlay clobbered byte\n         $RWTO WTOD,WRITE=NO\n         LHI   R15,BADPARSE        Set return code                  @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*=================================================================* @14\n*                                                                 * @14\n*        P H A S E  2  parsing (set internal flags)               * @14\n*                                                                 * @14\n* Logic here sets internal flags based upon elements set in the   * @14\n* PDL structure returned by IKJPARS. The logical combinations of  * @14\n* the provided elements will be checked in phase 3 of parse       * @14\n* processing.                                                     * @14\n*                                                                 * @14\n*=================================================================* @14\nPARS1000 DS    0H\n*        WTO   'Phase 2 of parse entered'                           @14\n*\n         CLC   DWSANS,=XL4'FF000000'   Error in parse ?\n         JNE   PARS1010            ...jif not\n*\n*        Parse error has occurred\n*\n         $RWTO MSG033A,WRITE=YES\n         $RWTO MSG035A,WRITE=YES\n         LHI   R15,BADPARSE        Set return code                  @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*\n*        See if LMOD was presented - it is required\n*\nPARS1010 DS    0H\n         L     R9,DWSANS           R9 -> PDL\n         USING DSVCCPL,R9          Obtain PDL addressability\n         CLC   MMODKW(2),=H'1'     Was LMOD supplied ?\n         JE    PARS1020            ...jif so\n*\n*        Required LMOD parameter missing\n*\n         $RWTO MSG034A,WRITE=YES\n         LHI   R15,BADPARSE        Set return code                  @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*\n*        Validate length of LMOD parameter\n*\nPARS1020 DS    0H\n*        WTO   'LMOD keyword detected'\n*\n         L     R14,MMOD            Load @ of LMOD subfield\n         XR    R15,R15             Clear work register\n         ICM   R15,B'0011',MMOD+4  Place subfield length in R15\n         BCTR  R15,0               Decrement for execute\n         LA    R10,LMOD            R10 -> target capture field\n         EX    R15,CAPKW           Capture field value\nLTORG_AREA LOCTR ,                                                  @14\nCAPKW    MVC   0(*-*,R10),0(R14)   Capture keyword field            @14\nSVCUPDTE LOCTR ,                                                    @14\n*\n*        Set LMOD available flag\n*\n         OI    PKW_used,PKW_LMOD   Indicate LMOD keyword used\n*\n*        See if USER was presented - it is optional\n*\n         CLC   MUSRKW(2),=H'1'     Was USER supplied ?\n         JNE   PARS1030            ...jif not, it is optional\n*\n*        USER keyword was supplied\n*\n*        WTO   'USER keyword detected'\n*\n         L     R14,MUSR            Load @ of USER subfield\n         XR    R15,R15             Clear work register\n         ICM   R15,B'0011',MUSR+4  Place subfield length in R15\n         BCTR  R15,0               Decrement for execute\n         LA    R10,USERID          R10 -> target capture field\n         EX    R15,CAPKW           Capture field value\n*\n*        Set USER available flag\n*\n         OI    PKW_used,PKW_USER   Indicate USER keyword used\n*\n*        See if TYPE was presented - it can be optional\n*\nPARS1030 DS    0H\n         CLC   MTYPKW(2),=H'1'     Was TYPE supplied ?\n         JNE   PARS1040            ...jif not, it can be optional\n*\n*        TYPE keyword was supplied\n*\n*        WTO   'TYPE keyword detected'\n*\n         L     R14,MTYP            Load @ of TYPE subfield\n         XR    R15,R15             Clear work register\n         ICM   R15,B'0011',MTYP+4  Place subfield length in R15\n         BCTR  R15,0               Decrement for execute\n         LA    R10,TYPE            R10 -> target capture field\n         EX    R15,CAPKW           Capture field value\n*\n*        Set TYPE available flag\n*\n         OI    PKW_used,PKW_TYPE   Indicate TYPE keyword used\n*\n*        See if GOODNITE was presented - it is optional\n*\nPARS1040 DS    0H\n         CLC   MGDNKW(2),=H'1'     Was GOODNITE supplied ?\n         JNE   PARS1050            ...jif not, it is optional\n*\n*        GOODNITE keyword was supplied\n*\n* Note: Capture this in SHUTDOWN field right justified\n*\n*        WTO   'GOODNITE keyword detected'\n*\n*        Right justify the GOODNITE parameter in the SHUTDOWN field @14\n*\n         MVI   SHUTDOWN,X'F0'      Ripple SVC # to\n         MVC   SHUTDOWN+1(L'SHUTDOWN-1),SHUTDOWN zeroes\n         L     R14,MGDN            Load @ of GOODNITE subfield\n         XR    R15,R15             Clear work register\n         ICM   R15,B'0011',MGDN+4  Place subfield length in R15\n         LHI   R7,4                Set maximum length in R7\n         SR    R7,R15              Get offset in R7\n         BCTR  R15,0               Decrement for execute\n         LA    R10,SHUTDOWN        R10 -> target capture field\n         AR    R10,R7              Calculate offset\n         EX    R15,CAPKW           Capture field value\n*\n*        Set GOODNITE available flag\n*\n         OI    PKW_used,PKW_GOODNITE Indicate GOODNITE was used\n*\n*        See if LOCKS was presented - it is optional\n*\nPARS1050 DS    0H\n         CLC   MLCKKW(2),=H'1'     Was LOCKS supplied ?\n         JNE   PARS1100            ...jif not, it is optional\n*\n*        LOCKS keyword was supplied\n*\n*        WTO   'LOCKS keyword detected'\n         OI    PKW_used,PKW_LOCKS  Set flag that LOCKS was present\n*\n*        See if LOCAL lock requested\n*\n         CLC   MLOCAL(2),=H'1'     Was LOCAL lock requested ?\n         JNE   PARS1060            ...jif not\n*\n*        LOCAL lock was requested\n*\n*        WTO   'LOCKS=(LOCAL) detected'\n         OI    LOCKS_FLAGS,LOCKS_LOCAL Set flag\n*\n*        See if CMS lock requested\n*\nPARS1060 DS    0H\n         CLC   MCMS(2),=H'1'       Was CMS lock requested ?\n         JNE   PARS1070            ...jif not\n*\n*        CMS lock was requested\n*\n*        WTO   'LOCKS=(CMS) detected'\n         OI    LOCKS_FLAGS,LOCKS_CMS   Set flag\n*\n*        See if SRM lock requested\n*\nPARS1070 DS    0H\n         CLC   MSRM(2),=H'1'       Was SRM lock requested ?\n         JNE   PARS1080            ...jif not\n*\n*        SRM lock was requested\n*\n*        WTO   'LOCKS=(SRM) detected'\n         OI    LOCKS_FLAGS,LOCKS_SRM   Set flag\n*\n*        See if SALLOC lock requested\n*\nPARS1080 DS    0H\n         CLC   MSALLOC(2),=H'1'    Was SALLOC lock requested ?\n         JNE   PARS1090            ...jif not\n*\n*        SALLOC lock was requested\n*\n*        WTO   'LOCKS=(SALLOC) detected'\n         OI    LOCKS_FLAGS,LOCKS_SALLOC Set flag\n*\n*        See if DISP lock requested\n*\nPARS1090 DS    0H\n         CLC   MDISP(2),=H'1'      Was DISP lock requested ?\n         JNE   PARS1100            ...jif not\n*\n*        DISP lock was requested\n*\n*        WTO   'LOCKS=(DISP) detected'\n         OI    LOCKS_FLAGS,LOCKS_DISP   Set flag\n*\n*        See if ATTR keyword was presented - it is optional\n*\nPARS1100 DS    0H\n         CLC   MATRKW(2),=H'1'     Was ATTR keyword supplied ?\n         JNE   PARS1200            ...jif not, it is optional\n*\n*        ATTR keyword was supplied\n*\n*        WTO   'ATTR keyword detected'\n         OI    PKW_used,PKW_ATTR   Set flag that ATTR was present\n*\n*        See if NPRMT requested\n*\n         CLC   MNPRMT(2),=H'1'     Was NPRMT requested ?\n         JNE   PARS1110            ...jif not\n*\n*        NPRMT was requested\n*\n*        WTO   'ATTR=(NPRMT) detected'\n         OI    ATTR_FLAGS,ATTR_NPRMT  Set flag\n*\n*        See if APF requested\n*\nPARS1110 DS    0H\n         CLC   MAPF(2),=H'1'       Was APF requested ?\n         JNE   PARS1120            ...jif not\n*\n*        APF was requested\n*\n*        WTO   'ATTR=(APF) detected'\n         OI    ATTR_FLAGS,ATTR_APF    Set flag\n*\n*        See if ASF requested\n*\nPARS1120 DS    0H\n         CLC   MASF(2),=H'1'       Was ASF requested ?\n         JNE   PARS1130            ...jif not\n*\n*        ASF was requested\n*\n*        WTO   'ATTR=(ASF) detected'\n         OI    ATTR_FLAGS,ATTR_ASF    Set flag\n*\n*        See if AR requested\n*\nPARS1130 DS    0H\n         CLC   MAR(2),=H'1'        Was AR requested ?\n         JNE   PARS1200            ...jif not\n*\n*        AR was requested\n*\n*        WTO   'ATTR=(AR) detected'\n         OI    ATTR_FLAGS,ATTR_AR    Set flag\n*\n*        See if SVC keyword supplied - it is required\n*\nPARS1200 DS    0H\n         CLC   MSVCKW(2),=H'1'     Was SVC keyword supplied ?\n         JNE   PARS1210            ...jif not, it is optional\n*\n*        SVC keyword was supplied\n*\n*        WTO   'SVC keyword detected'\n         OI    PKW_used,PKW_SVC    Set flag that SVC was present\n         J     PARS1220             and skip error return\n*\n*        Required SVC # was missing\n*\nPARS1210 DS    0H\n         $RWTO MSG037A,WRITE=YES\n         LHI   R15,NOSVC#          Set return code                  @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*\n*        Capture SVC number\n*\n* This code uses the following algorithm to right justify the\n* SVC number in the target field:\n*\n* Maximum length of field minus length seen in PDL equals offset\n* in target field to receive SVC number from the PDL. Examples\n* follow:\n*\n* 1) PDL returns length of 2 in PDL whose maximum length is 3;\n*\n*    3 - 2 = 1\n*\n*    Thus EXecuted MVC instruction must have 1 added to the\n*    location of the target field to right justify the value for\n*    a PACK and convert to binary operation.\n*\n* 2) PDL returns length of 1 in PDL whose maximum length is 3;\n*\n*    3 - 1 = 2\n*\n*    Thus EXecuted MVC instruction must have 2 added to the\n*    location of the target field to right justify the value for\n*    a PACK and convert to binary operation.\n*\n* 3) PDL returns length of 3 in PDL whose maximum length is 3;\n*\n*    3 - 3 = 0\n*\n*    Thus EXecuted MVC instruction must have 0 added to the\n*    location of the target field to right justify the value for\n*    a PACK and convert to binary operation.\n*\nPARS1220 DS    0H\n         MVI   SVCNO,X'F0'         Ripple SVC # to\n         MVC   SVCNO+1(L'SVCNO-1),SVCNO zeroes\n         L     R14,MSVC            Load @ of SVC# subfield\n         XR    R15,R15             Clear work register\n         ICM   R15,B'0011',MSVC+4  Place subfield length in R15\n         LHI   R7,3                Set maximum length in R7\n         SR    R7,R15              Get offset in R7\n         BCTR  R15,0               Decrement for execute\n         LA    R10,SVCNO           R10 -> target capture field\n         AR    R10,R7              Calculate offset\n         EX    R15,CAPKW           Capture field value\n*\n*        Pack & convert to binary the SVC number\n*\n* Note: SVCNO will always exist or we wouldn't be here so it is\n*       not flagged\n*\n*        WTO   'SVC number found'\n         PACK  DWD,SVCNO           Pack SVC number\n         CVB   R1,DWD               Make it binary\n         STC   R1,SVC#               and save for later use\n*\n* Make sure SVC# is not > 255\n*\n         C     R1,=F'255'          SVC # > 255 ?\n         JNH   PARS1222            ...jif not, else invalid\n*\n* SVC # not in range 0-255 detected\n*\n         $RWTO MSG041A,WRITE=YES                                    @14\n         LHI   R15,BADSVCN2        Invalid SVC # found\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\n*\n*        See if optional routing code SVC number is present\n*\nPARS1222 DS    0H\n         MVI   ESRSVCNO,X'40'      Ripple ESR SVC # to\n         MVC   ESRSVCNO+1(L'ESRSVCNO-1),ESRSVCNO blanks\n         L     R14,MSVCR           Load @ of ESR SVC routing code\n         LTR   R14,R14             ESR SVC # present ?\n         JZ    PARS2000            ...jif not - go free parse work\n         MVI   ESRSVCNO,X'F0'      Ripple ESR SVC # to\n         MVC   ESRSVCNO+1(L'ESRSVCNO-1),ESRSVCNO zeroes\n         XR    R15,R15             Clear work register\n         ICM   R15,B'0011',MSVCR+4 Place subfield length in R15\n         LHI   R7,3                Set maximum length in R7\n         SR    R7,R15              Get offset in R7\n         BCTR  R15,0               Decrement for execute\n         LA    R10,ESRSVCNO        R10 -> target capture field\n         AR    R10,R7              Calculate offset\n         EX    R15,CAPKW           Capture field value\n*\n*        Pack & convert to binary the ESR SVC number\n*\n*        WTO   'ESR SVC number found'\n         OI    ATTR_FLAGS,ATTR_ESR Indicate ESR SVC request\n         PACK  DWD,ESRSVCNO        Pack ESR SVC number\n         CVB   R1,DWD               Make it binary\n         STC   R1,ESR#               and save for later use\n         ST    R1,ESR#FW              & in a fullword\n*\n*        We're through with TSO/E parse so free its workareas\n*\nPARS2000 DS    0H\n*        WTO   'Freeing parse workareas'\n         BASR  R10,0               Macro internal addressability\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n         IKJRLSA ANS               Release IKJPARS storage\n         DROP  R10              Drop macro expansion addressability\n*=================================================================* @14\n*                                                                 * @14\n*        P H A S E  3  parsing (verify field content)             * @14\n*                                                                 * @14\n* Logic here verifies content of supplied fields as being valid   * @14\n* in combination with other fields supplied. Fields verified here * @14\n* are as followed:                                                * @14\n*                                                                 * @14\n* 1) TYPE was either 1, 2, 3, 4, or 6                             * @14\n* 2) If ESR form was used that the SVC number was 109, 116, 122,  * @14\n*    or 137.                                                      * @14\n* 3) Each of the ESR routing SVC numbers in 2) above have a       * @14\n*    maximum number of possibilities as per the following chart:  * @14\n*                                                                 * @14\n*    SVC#   Maxium value for ESR SVC function code                * @14\n*    ==== ======================================================= * @14\n*     109 255 entries (Type 3/4 ESR SVCs)                         * @14\n*     116  14 entries (Type 1 SVCs)                               * @14\n*     122  19 entries (Type 2 SVCs)                               * @14\n*     137   7 entries (Type 6 SVCs)                               * @14\n*                                                                 * @14\n* 4) Enforce TYPE and ESR form as being mutually exclusive        * @14\n* 5) The the GOODNITE time is in the range of 0001 to 2359        * @14\n* 6) LOCAL lock __________________________                        * @14\n* 7)                                                              * @14\n*                                                                 * @14\n*=================================================================* @14\n*        WTO   'Checking TYPE'\n         TM    PKW_used,PKW_TYPE   Was TYPE supplied ?\n         JNO   PARS2100            ...jif not\n*\n* See if valid TYPE specification\n*\n         MVI   TYPEBIN,X'01'       Assume TYPE=1\n         CLI   TYPE,C'1'           TYPE=1 ?\n         JE    PARS2010            ...jif so\n         MVI   TYPEBIN,X'02'       Assume TYPE=2\n         CLI   TYPE,C'2'           TYPE=2 ?\n         JE    PARS2010            ...jif so\n         MVI   TYPEBIN,X'03'       Assume TYPE=3\n         CLI   TYPE,C'3'           TYPE=3 ?\n         JE    PARS2010            ...jif so\n         MVI   TYPEBIN,X'04'       Assume TYPE=4\n         CLI   TYPE,C'4'           TYPE=4 ?\n         JE    PARS2010            ...jif so\n         MVI   TYPEBIN,X'06'       Assume TYPE=6\n         CLI   TYPE,C'6'           TYPE=6 ?\n         JE    PARS2010            ...jif so\n*\n*        Issue message regarding invalid SVC TYPE specification\n*\n         $RWTO MSG019A,WRITE=YES\n         $RWTO MSG027A,WRITE=YES\n         LHI   R15,BADPARM4        Invalid parameter found\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\n*\n* TYPE supplied valid, make sure ESR# not supplied\n*\nPARS2010 DS    0H\n         TM    ATTR_FLAGS,ATTR_ESR Was ESR SVC # supplied ?\n         JNO   PARS2020            ...jif not\n*\n* TYPE & SVC ESR # are mutually exclusive\n*\n         $RWTO MSG038A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*                                                                   @14\n* TYPE was supplied w/o ESR# so make sure SVC number is not a       @14\n* routing SVC (109, 116, 122, or 137.                               @14\n*                                                                   @14\nPARS2020 DS    0H                                                   @14\n*        WTO   'Checking for routing SVC w/ TYPE supplied'          @14\n         CLI   SVC#,109            TYPE 3/4 routing ?               @14\n         JE    PARS2021            ...jif so, illegal               @14\n         CLI   SVC#,116            TYPE 1 routing ?                 @14\n         JE    PARS2021            ...jif so, illegal               @14\n         CLI   SVC#,122            TYPE 2 routing ?                 @14\n         JE    PARS2021            ...jif so, illegal               @14\n         CLI   SVC#,137            TYPE 6 routing ?                 @14\n         JE    PARS2021            ...jif so, illegal               @14\n         J     PARS2022            Possibly valid request           @14\n*                                                                   @14\n* Routing SVC # supplied with TYPE - not valid                      @14\n*                                                                   @14\nPARS2021 DS    0H                                                   @14\n         $RWTO MSG039A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*                                                                   @14\n* We have a valid SVC w/ TYPE request - check for SVC# > 200        @14\n*                                                                   @14\nPARS2022 DS    0H                                                   @14\n*        WTO   'Looks like valid TYPE w/ SVC w/o routing code'      @14\n         CLI   SVC#,200            Is SVC # > or = 200              @14\n         JNL   PARS2025            ...jif so, continue              @14\n*                                                                   @14\n* Specification of an SVC# of less than 200 requires RACF \"Global   @14\n* Special\" privileges locally.                                      @14\n*                                                                   @14\n         TM    MYFLAGS,SPECIAL     RACF \"global special\" userid ?   @14\n         JO    PARS2025           ...jif so, valid request (so far) @14\n*                                                                   @14\n* SVC # request < 200 requires RACF \"global special\" priviledges    @14\n*                                                                   @14\n         $RWTO MSG040A,WRITE=YES                                    @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*                                                                   @14\n* SVC # >= 200 or RACF \"global special\" w/ SVC# < 200               @14\n*                                                                   @14\nPARS2025 DS    0H                                                   @14\n*        WTO   'PARS2025 label passed - SVC and TYPE are valid'     @14\n         J     PARS2200            Skip ESR function code checks    @14\n*                                                                   @14\n* TYPE was not supplied meaning that a routing SVC # and a valid    @14\n* routing code are required - we check that here. This involves a   @14\n* range check based on the SVC# (routing SVC) provided by the user. @14\n*                                                                   @14\n* At this point ESR#FW contains the supplied ESR# in routing code   @14\n* in binary and we need to check the range based on the SVC type    @14\n* which is in the SVC# one byte field                               @14\n*                                                                   @14\nPARS2100 DS    0H                                                   @14\n         L     R2,ESR#FW           Load binary routing code         @14\n*                                                                   @14\n* Check for Router SVC # specification as it requires an ESR        @14\n* function code also be specified                                   @14\n*                                                                   @14\n         CLI   SVC#,109            T3/4 ESR request ?               @14\n         JE    PARS2105            ...jif so, continue              @14\n         CLI   SVC#,116            T1 ESR request ?                 @14\n         JE    PARS2105            ...jif so, continue              @14\n         CLI   SVC#,122            T2 ESR request ?                 @14\n         JE    PARS2105            ...jif so, continue              @14\n         CLI   SVC#,137            T6 ESR request ?                 @14\n         JE    PARS2105            ...jif so, continue              @14\n*                                                                   @14\n*        Use of SVC # that is not part of the ESR requires TYPE be  @14\n*        specified so check that here. TYPEBIN would be non-zero    @14\n*        if TYPE had been specified.                                @14\n*                                                                   @14\n         CLI   TYPEBIN,X'00'       TYPE specified by user ?         @14\n         JNE   PARS2105            ...jif so                        @14\n         $RWTO MSG048A,WRITE=YES                                    @14\n         LHI   R15,BADTYPR         TYPE is required for non-ESR     @14\n         ST    R15,RETCODE         Set to expose retcode to caller  @14\n         J     PARSX                and return to caller            @14\n*                                                                   @14\n* The following code is common for all Router SVC specifications    @14\n* so done once here                                                 @14\n*                                                                   @14\nPARS2105 DS    0H                                                   @14\n         TM    ATTR_FLAGS,ATTR_ESR Was ESR SVC # supplied ?         @14\n         JO    PARS2107            ...jif so                        @14\n         $RWTO MSG047A,WRITE=YES                                    @14\n         LHI   R15,BADPARM4        Invalid parameter found          @14\n         ST    R15,RETCODE         Set to expose retcode to caller  @14\n         J     PARSX                and return to caller            @14\n*\n* Check T3/4 SVC routing code specification\n*\nPARS2107 DS    0H\n         CLI   SVC#,109            T3/4 ESR request ?\n         JNE   PARS2110            ...jif not\n*\n* Make sure ESR routing code in range 0-255\n*\n         C     R2,=F'255'          > 255 routing code for T3/4 ?\n         JNH   PARS2200            ...bif not, routing code is good @14\n*\n* Routing code must be in range 0-255 for T3/4 ESR SVC\n*\n         $RWTO MSG042A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*\n* Check T1 SVC routing code specification\n*\nPARS2110 DS    0H\n         CLI   SVC#,116            T1 ESR request ?\n         JNE   PARS2120            ...jif not\n*\n* Make sure ESR routing code in range 0-14\n*\n         C     R2,=F'14'           > 14 routing code for T1 ?\n         JNH   PARS2200            ...bif not, routing code is good @14\n*\n* Routing code must be in range 0-14 for T1 ESR SVC\n*\n         $RWTO MSG043A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*\n* Check T2 SVC routing code specification\n*\nPARS2120 DS    0H\n         CLI   SVC#,122            T2 ESR request ?\n         JNE   PARS2130            ...jif not\n*\n* Make sure ESR routing code in range 0-19\n*\n         C     R2,=F'19'           > 19 routing code for T2 ?\n         JNH   PARS2200            ...bif not, routing code is good @14\n*\n* Routing code must be in range 0-19 for T2 ESR SVC\n*\n         $RWTO MSG044A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*\n* Check T6 SVC routing code specification\n*\nPARS2130 DS    0H\n         CLI   SVC#,137            T6 ESR request ?\n         JNE   PARS2140            ...jif not\n*\n* Make sure ESR routing code in range 0-7\n*\n         C     R2,=F'7'            > 7 routing code for T6 ?\n         JNH   PARS2200            ...bif not, routing code is good @14\n*\n* Routing code must be in range 0-7 for T6 ESR SVC\n*\n         $RWTO MSG045A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*\n*        Invalid logic intentional abend\n*\nPARS2140 DS    0H\n         $RWTO MSG046A,WRITE=YES\n         ABEND 333,DUMP            Force abend\n*\n*\n*        Check GOODNITE time if supplied\n*\n*\nPARS2200 DS    0H\n*        WTO   'Checking GOODNITE time (hhmm)'\n         TM    PKW_used,PKW_GOODNITE Was GOODNITE supplied ?\n         JNO   PARS2300            ...jif not\n*        WTO   'GOODNITE time (hhmm) was supplied'\n*\n* Handle GOODNITE time - make sure numeric\n*\n         UNPK  DWD,=X'0F'          DWD=F0F0F0F0F0F0F0F0\n         MVN   DWD(4),SHUTDOWN     Move HHMM\n         CLC   DWD(4),SHUTDOWN     hhmm numeric ?\n         JE    PARS2205            ...jif so\n*                                                                   @14\n*        Goodnight time (HHMM) parameter not numeric                @14\n*                                                                   @14\n         $RWTO MSG076E,WRITE=YES   Write the message                @14\n         LHI   R1,BADEOD1          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     PARSX               Go make like trees               @14\n*                                                                   @14\n*        Goodnight time (HHMM) parameter is numeric                 @14\n*                                                                   @14\nPARS2205 DS    0H\n         XC    ENDOFDAY,ENDOFDAY\n         MVC   ENDOFDAY,SHUTDOWN   HHMM -> HHMM0000\n*\n*        Make sure GOODNITE(0000) was not specified\n*\n         CLC   SHUTDOWN,=C'0000'   Illegal value ?\n         JNE   PARS2210\n*\n*        Specified GOODNITE time out of range\n*\nPARS2206 DS    0H\n         $RWTO MSG084E,WRITE=YES   Write the message                @14\n         LHI   R1,BADEOD2          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     PARSX               Go make like trees               @14\n*\n* Verify hh (hours) in range 00-23\n* Pack first 2 bytes and cvb and make sure <= 23 hours\n*\nPARS2210 DS    0H\n         XC    DWD,DWD             Clear doubleword work area\n         PACK  DWD+6(2),SHUTDOWN(2)  PACK 1st 2 bytes (HH)\n         OI    DWD+7,X'0F'         Set + sign in last zone\n         CVB   R1,DWD              Make HH binary\n         C     R1,=F'23'           > 23 (HH) ?\n         JH    PARS2206            ...jif so, HH out of 00-23 range\n*\n* Verify mm (minutes) in range 00-59\n* Pack second 2 bytes and cvb and make sure <= 59 hours\n*\n         XC    DWD,DWD             Clear doubleword work area\n         PACK  DWD+6(2),SHUTDOWN+2(2)  PACK 2nd 2 bytes (MM)\n         OI    DWD+7,X'0F'         Set + sign in last zone\n         CVB   R1,DWD              Make MM binary\n         C     R1,=F'59'           > 59 (MM) ?\n         JH    PARS2206            ...jif so, HH out of 00-23 range\n*\n* To be here the GOODNITE (HHMM) time was in the range of 0001-2359\n*\n*        WTO   'GOODNITE (HHMM) time was good'\n*        J     PARSX\n*\n* Make sure GOODNITE time is later than the current time\n*\n* Note: HOURS for length of 4 bytes contains zoned decimal current\n*       execution time in the form of HHMM...same format as the\n*       field named SHUTDOWN. We just need to make both these\n*       fields binary and compare them to make sure the SHUTDOWN\n*       HHMM value is greater than the HOURS+MINUTES HHMM value.\n*\n         XC    DWD,DWD             Clear doubleword work area\n         PACK  DWD+4(4),SHUTDOWN   PACK HHMM GOODNITE value\n         OI    DWD+7,X'0F'         Set + sign in last zone\n         CVB   R1,DWD              Make GOODNITE binary\n         XC    DWD,DWD             Clear doubleword work area\n         PACK  DWD+4(4),HOURS(4)   PACK HHMM HOURS+MINUTES value\n         OI    DWD+7,X'0F'         Set + sign in last zone\n         CVB   R2,DWD              Make current time binary\n         CR    R2,R1               Current HHMM < GOODNITE HHMM ?\n         JNH   PARS2300            ...jif so, HHMM is in the future\n*                                                                   @14\n*        Specified Goodnite time earlier than current time          @14\n*                                                                   @14\n         $RWTO MSG088E,WRITE=YES   Write the message                @14\n         LHI   R1,BADEOD3          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     PARSX               Go make like trees               @14\n*\n* Since there's really nothing to check here for the ATTR\n* specification we'll just check the LOCK combinations that are\n* possible based upon the TYPE SVC being installed.\n*\n*        Set TYPE field from ESR# if not supplied\n*\n* If TYPE was not supplied we set it here based on the ESR SVC      @14\n* number for purposes of performing the above checks. The mutually  @14\n* exclusive test of TYPE with and ESR SVC number has already been   @14\n* performed by this point so this won't get us in trouble.          @14\n*                                                                   @14\nPARS2300 DS    0H\n         TM    PKW_used,PKW_TYPE   Was TYPE supplied ?              @14\n         JO    PARS2305            ...jif so, skip TYPE assignment  @14\n         CLI   SVC#,109            T3/4 ESR request ?               @14\n         JNE   PARS2300A           ...jif not, continue             @14\n         MVI   TYPE,C'3'           Set type 3/4                     @14\n         J     PARS2305            Go to resume point               @14\nPARS2300A DS   0H                                                   @14\n         CLI   SVC#,116            T1 ESR request ?                 @14\n         JNE   PARS2300B           ...jif not, continue             @14\n         MVI   TYPE,C'1'           Set type 1                       @14\n         J     PARS2305            Go to resume point               @14\nPARS2300B DS   0H                                                   @14\n         CLI   SVC#,122            T2 ESR request ?                 @14\n         JNE   PARS2300C           ...jif not, continue             @14\n         MVI   TYPE,C'2'           Set type 2                       @14\n         J     PARS2305            Go to resume point               @14\nPARS2300C DS   0H                                                   @14\n         CLI   SVC#,137            T1 ESR request ?                 @14\n         JNE   PARS2300D           ...jif not, continue             @14\n         MVI   TYPE,C'1'           Set type 1                       @14\n         J     PARS2305            Go to resume point               @14\n*                                                                   @14\n*        Logic error in TYPE assignment - please report             @14\n*                                                                   @14\nPARS2300D DS   0H                                                   @14\n         $RWTO MSG050S,WRITE=YES                                    @14\n         ABEND 334,DUMP                                             @14\n*                                                                   @14\n* Rules for LOCKs by type SVC are as follows:                       @14\n* ===========================================                       @14\n* 1) Type 1 SVC routines always receive control with the LOCAL lock @14\n*    held and must not release the LOCAL lock. Additional locks may @14\n*    be requested prior to entry via the IEASVCxx member of         @14\n*    SYS1.PARMLIB or the SVCUPDTE macro or may be requested         @14\n*    dynamically within the SVC routine. Unless specific locks are  @14\n*    requested by the user we will not provide any locks for a      @14\n*    type 1 standard or type 1 ESR routine.                         @14\n* 2) Types 2, 3, and 4 may also request locks via the IEASVCxx      @14\n*    member of SYS1.PARMLIB or the SVCUPDTE macro or may obtain     @14\n*    them dynamically within the SVC routine. Again unless specific @14\n*    locks are requested by the user we will not provide any locks  @14\n*    for a type 2, 3, or 4 SVC.                                     @14\n* 3) Types 1 & 2 may request that any locks be held on entry.       @14\n* 4) Types 3 & 4 may only request that the LOCAL or LOCAL and CMS   @14\n*    locks be held.                                                 @14\n* 5) If no locks are held or obtained, or only suspend locks (CMS   @14\n*    and LOCAL) are held or obtained, the SVC routine executes in   @14\n*    supervisor state key zero, enabled mode.                       @14\n* 6) If the CPU lock is held or obtained, the SVC routine executes  @14\n*    in supervisor state, key zero, disabled mode. No SVCs may be   @14\n*    issued.                                                        @14\n* 7) SVCs may not take disabled page faults. Therefore, if the CPU  @14\n*    lock is held, the SVC routines must ensure that any referenced @14\n*    pages are fixed. For types 3 and 4, all pages containing code  @14\n*    must be fixed.                                                 @14\n* 8) An FRR may be defind for any SVC routine that holds or obtains @14\n*    locks to provide for abnormal termination (See the manual)     @14\n* 9) Type 6 may not request any locks.                              @14\n* 10) We restrict SRM, SALLOC and DISP locks to individuals that    @14\n*    posess RACF Global Special priviledges.                        @14\n*                                                                   @14\nPARS2305 DS    0H                                                   @14\n         TM    PKW_used,PKW_LOCKS  Was LOCKS supplied ?             @14\n         JNO   PARS2400            ...jif not, assign by TYPE       @14\n*        WTO   'Checking restricted LOCKS subparameters'            @14\n*                                                                   @14\n*        LOCKS keyword was supplied and we need to check for        @14\n*        valid locks requested by SVC TYPE. LOCKS available are     @14\n*                                                                   @14\n*        LOCAL                                                      @14\n*        CMS                                                        @14\n*        SRM    <- RACF Global Special required                     @14\n*        SALLOC <- RACF Global Special required                     @14\n*        DISP   <- RACF Global Special required                     @14\n*                                                                   @14\n         TM    LOCKS_FLAGS,LOCKS_SRM   SRM lock requested ?         @14\n         JO    PARS2310            Go check for Global Special      @14\n         TM    LOCKS_FLAGS,LOCKS_SALLOC SALLOC lock requested ?     @14\n         JO    PARS2310            Go check for Global Special      @14\n         TM    LOCKS_FLAGS,LOCKS_DISP  DISP lock requested ?        @14\n         JO    PARS2310            Go check for Global Special      @14\n         J     PARS2320            Go to resume point               @14\n*                                                                   @14\n*        Check for RACF Global Special authority                    @14\n*                                                                   @14\n*        Note: SRM, SALLOC & DISP locks require RACF Global         @14\n*              Special authority                                    @14\n*                                                                   @14\nPARS2310 DS    0H                                                   @14\n         TM    MYFLAGS,SPECIAL     RACF \"global special\" userid ?   @14\n         JO    PARS2320            ...jif so, passed                @14\n         $RWTO MSG049A,WRITE=YES                                    @14\n         LHI   R15,BADLOCKS        Set return code and              @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX               Go MLT                           @14\n*                                                                   @14\n*        Check Type 6 SVC with locks                                @14\n*                                                                   @14\nPARS2320 DS    0H                                                   @14\n         CLI   TYPE,C'6'           Type 6 ?                         @14\n         JNE   PARS2330            ...jif not, go check 3/4         @14\n* Type 6 cannot request locks of any type                           @14\n         $RWTO MSG902I,WRITE=YES                                    @14\n         LHI   R15,BADLOCKS        Set return code and              @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX               Go MLT                           @14\n*\n*        Type 3/4 can only request LOCAL or LOCAL + CMS locks\n*\nPARS2330 DS    0H                                                   @14\n         CLI   TYPE,C'3'           Type 4 ?                         @14\n         JE    PARS2340            ...jif so, do lock checks        @14\n         CLI   TYPE,C'4'           Type 4 ?                         @14\n         JE    PARS2340            ...jif so, do lock checks        @14\n         J     PARS2400            else we don't care               @14\nPARS2340 DS    0H                                                   @14\n         TM    LOCKS_FLAGS,X'FF'-(LOCKS_LOCAL+LOCKS_CMS)            @14\n         JZ    PARS2350            ...jif only LOCL and/or CMS      @14\n* Type 3/4 can only request LOCAL or LOCAL + CMS                    @14\nPARS2342 DS    0H                                                   @14\n         $RWTO MSG901I,WRITE=YES                                    @14\n         LHI   R15,BADLOCKS        Set return code and              @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX               Go MLT                           @14\n*                                                                   @14\n*        Verify that only LOCAL or LOCAL + CMS was specified        @14\n*                                                                   @14\nPARS2350 DS    0H                                                   @14\n         TM    LOCKS_FLAGS,LOCKS_LOCAL+LOCKS_CMS                    @14\n         JO    PARS2400            ...jif both present              @14\n         TM    LOCKS_FLAGS,LOCKS_LOCAL                              @14\n         JO    PARS2400            ...jif only LOCAL present        @14\n         J     PARS2342            ...else reuse above logic        @14\n*                                                                   @14\n*        LOCKS were not specified so we won't assign any            @14\n*                                                                   @14\nPARS2400 DS    0H                                                   @14\n         J     PARSX\n\n\n\n\n.JH0831A ANOP                                                       @14\n         AGO   .JH0831B                                             @14\n*                                                                   @14\n*        Continue parsing                                           @14\n*                                                                   @14\nPARS040  DS    0H                                                   @14\n         LR    R4,R7               R4 -> beginning of string        @14\n         LR    R6,R7               R6 -> beginning of string        @14\n         AR    R6,R3               R6 -> last character in string   @14\n*                                                                   @14\n*        Make sure minimum length parmlist was supplied for install @14\n*        operation...i.e.:                                          @14\n*                                                                   @14\n*        SVC=n,LMOD=x (executable length of 11)                     @14\n*                                                                   @14\n         CHI   R3,11               Length >= 11 bytes ?             @14\n         JNL   PARS050             ...jif so, continue parse        @14\n*                                                                   @14\n*        Minumum length parameter list not supplied                 @14\n*                                                                   @14\n         $RWTO MSG006A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*\n*        Load initial parse values & pointers\n*\n*        R4 -> beginning of string\n*        R5 =  residual length of string\n*        R6 =  byte position of last byte in string\n*\nPARS050  DS    0H\n         LA    R4,Work_input_parms R4 -> start of original string\n         LH    R5,Input_parmlen    R5 = executable length of string\n*        LA    R6,1(R6,R5)         R6 -> past last byte of string\n         XC    Parse_flags,Parse_flags initialize flag byte\n*\n*        Look for primary keywords\n*\n* Note: Each routine branched to in the following logic is\n*       responsible for setting R4 to point to the residual\n*       portion of the string to parse and R5 to the residual\n*       length of the string.\n*\n*        R4 -> start of residual string\n*        R5 =  residual length of string\n*\nPARS060  DS    0H\n*        CLC   =CL4'SVC=',0(R4)    SVC=\n*        JE    PARSSVC             ...jif so\n         CLC   =CL5'LMOD=',0(R4)   LMOD=\n         JE    PARSLMOD            ...jif so\n*        CLC   =CL5'ATTR=',0(R4)   ATTR=\n*        JE    PARSATTR            ...jif so\n*        CLC   =CL6'LOCKS=',0(R4)  LOCKS=\n*        JE    PARSLOCKS           ...jif so\n         CLC   =CL9'GOODNITE=',0(R4) GOODNITE=\n         JE    PARSGOODNITE        ...jif so\n         CLC   =CL5'TYPE=',0(R4)   TYPE=\n         JE    PARSTYPE            ...jif so\n         CLC   =CL5'USER=',0(R4)   USER=\n         JE    PARSUSER            ...jif so\n*\n*        Primary keyword not recognized\n*\n         $RWTO MSG005A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n******************************************************************* @14\n*                                                                 * @14\n*        Parse LMOD= parameter                                    * @14\n*                                                                 * @14\n******************************************************************* @14\nPARSLMOD DS    0H\n*        WTO   'PARSLMOD entered'\n         TM    PKW_used,PKW_LMOD   Has \"LMOD=\" already been seen ?\n         JNO   PARSLMOD_100        ...jif not\n*\n*       Issue message about duplicate primary keyword specification @14\n*\n*       Note: This label is used by several routines (PARSLMOD_010)\n*\nPARSLMOD_010 DS 0H\n         $RWTO MSG007A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\nPARSLMOD_100 DS 0H\n         OI    PKW_used,PKW_LMOD   Set \"LMOD=\" already seen flag\n         S     R5,=F'5'            Decrement length for \"LMOD=\"\n         A     R4,=F'5'            Adjust scan start location\n*\n*        Scan for comma or end of string to harvest\n*\n         CLI   0(R4),C','          \"Null\" \"LMOD=,\" ?\n         JNE   PARSLMOD_110        ...jif not\n*\n*        Issue message about \"Null\" LMOD keyword\n*\n         $RWTO MSG012A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\nPARSLMOD_110 DS 0H\n         XR    R2,R2               Clear accumulator register\n         LR    R7,R4             Preserve LMOD value start position\nPARSLMOD_120 DS 0H\n         CR    R4,R6               Past end of string ?\n         JE    PARSLMOD_130        ...jif so\n         CLI   0(R4),C','          End of value ?\n         JE    PARSLMOD_130        ...jif so\n         LA    R4,1(R4)            Increment string pointer\n         LA    R2,1(R2)            Bump value length\n*\n*        Make sure 8 or less bytes\n*\n         CHI   R2,8                > 8 bytes ?\n         JNH   PARSLMOD_120        ...jif not\n*\n*        Issue message about invalid length LMOD keyword value\n*\n         $RWTO MSG010A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\n*\n*        Capture LMOD value (executable length in R2)\n*\n*        R4 -> delimiter\n*        R7 -> start of value\n*\nPARSLMOD_130 DS 0H\n         CLI   00(R4),C','         Delimiter terminator ?\n         JNE   PARSLMOD_132        ...jif not\n         BCTR  R2,0                otherwise decrement length\nPARSLMOD_132 DS 0H\n         LA    R9,LMOD             R9 -> field to capture\n         EX    R2,CAPKW            Capture field value\nLTORG_AREA LOCTR ,                                                  @14\nCAPKW    MVC   0(*-*,R9),0(R7)     Capture keyword field            @14\nSVCUPDTE LOCTR ,                                                    @14\n         CR    R4,R6               Last byte of string ?\n         JE    PARS1000            Go to phase 2 of parse           @14\n         LA    R4,1(R4)            Bump over delimiter\n         LR    R5,R6               Adjust pointers\n         SR    R5,R4                for next keyword in string\n         J     PARS060               and go process it\n******************************************************************* @14\n*                                                                 * @14\n*        Parse USER=xxxxxxxx parameter                            * @14\n*                                                                 * @14\n******************************************************************* @14\nPARSUSER DS    0H\n*        WTO   'PARSUSER entered'\n         TM    PKW_used,PKW_USER   Has \"USER=\" already been seen ?\n         JNO   PARSUSER_100        ...jif not\n*\n*       Issue message about duplicate primary keyword specification @14\n*\n         J     PARSLMOD_010        ...jif duplicate to common code\nPARSUSER_100 DS 0H\n         OI    PKW_used,PKW_USER   Set \"USER=\" already seen flag\n         S     R5,=F'5'            Decrement length for \"USER=\"\n         A     R4,=F'5'            Adjust scan start location\n*\n*        Scan for comma or end of string to harvest\n*\n         CLI   0(R4),C','          \"Null\" \"USER=,\" ?\n         JNE   PARSUSER_110        ...jif not\n*\n*        Issue message about \"Null\" USER keyword\n*\n         $RWTO MSG013A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\nPARSUSER_110 DS 0H\n         XR    R2,R2               Clear accumulator register\n         LR    R7,R4             Preserve USER value start position\nPARSUSER_120 DS 0H\n         CR    R4,R6               Past end of string ?\n         JE    PARSUSER_130        ...jif so\n         CLI   0(R4),C','          End of value ?\n         JE    PARSUSER_130        ...jif so\n         LA    R4,1(R4)            Increment string pointer\n         LA    R2,1(R2)            Bump value length\n*\n*        Make sure 8 or less bytes\n*\n         CHI   R2,8                > 8 bytes ?\n         JNH   PARSUSER_120        ...jif not\n*\n*        Issue message about invalid length USER keyword value\n*\n         $RWTO MSG011A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\n*\n*        Capture USER value (executable length in R2)\n*\n*        R4 -> delimiter or last character of string\n*        R7 -> start of value\n*\nPARSUSER_130 DS 0H\n         CLI   00(R4),C','         Delimiter terminator ?\n         JNE   PARSUSER_132        ...jif not\n         BCTR  R2,0                otherwise decrement length\nPARSUSER_132 DS 0H\n         LA    R9,USERID           R9 -> target field for capture\n         EX    R2,CAPKW            Capture field value\n         CR    R4,R6               Last byte of string ?\n         JE    PARS1000            Go to phase 2 of parse           @14\n         LA    R4,1(R4)            Bump over delimiter\n         LR    R5,R6               Adjust pointers\n         SR    R5,R4                for next keyword in string\n         J     PARS060               and go process it\n******************************************************************* @14\n*                                                                 * @14\n*        Parse TYPE=n parameter                                   * @14\n*                                                                 * @14\n******************************************************************* @14\nPARSTYPE DS    0H\n*        WTO   'PARSTYPE entered'\n         TM    PKW_used,PKW_TYPE   Has \"TYPE=\" already been seen ?\n         JNO   PARSTYPE_100        ...jif not\n*\n*       Issue message about duplicate primary keyword specification @14\n*\n*       Note: This label is used by several routines (PARSLMOD_010)\n*\nPARSTYPE_010 DS 0H\n         $RWTO MSG007A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\nPARSTYPE_100 DS 0H\n         OI    PKW_used,PKW_TYPE   Set \"TYPE=\" already seen flag\n         S     R5,=F'5'            Decrement length for \"TYPE=\"\n         A     R4,=F'5'            Adjust scan start location\n*\n*        Scan for comma or end of string to harvest\n*\n         CLI   0(R4),C','          \"Null\" \"TYPE=,\" ?\n         JNE   PARSTYPE_110        ...jif not\n*\n*        Issue message about \"Null\" TYPE keyword\n*\n         $RWTO MSG014A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\nPARSTYPE_110 DS 0H\n         XR    R2,R2               Clear accumulator register\n         LR    R7,R4             Preserve TYPE value start position\nPARSTYPE_120 DS 0H\n         CR    R4,R6               Past end of string ?\n         JE    PARSTYPE_130        ...jif so\n         CLI   0(R4),C','          End of value ?\n         JE    PARSTYPE_122        ...jif so\n         LA    R4,1(R4)            Increment string pointer\n         LA    R2,1(R2)            Bump value length\n         J     PARSTYPE_120        Go check next string position\n*\n*        Make sure exactly 1 byte\n*\nPARSTYPE_122 DS 0H\n         CHI   R2,1                1 byte ?\n         JE    PARSTYPE_130        ...jif not\n*\n*        Issue message about invalid length TYPE keyword value\n*\n*        DC    H'0'                <debug>\n         $RWTO MSG015A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\n*\n*        Capture TYPE value (executable length in R2)\n*\n*        R4 -> delimiter or last character of string\n*        R7 -> start of value\n*\nPARSTYPE_130 DS 0H\n         CLI   0(R4),C','          Delimiter terminator ?\n         JNE   PARSTYPE_132        ...jif not\n         BCTR  R2,0                otherwise decrement length\nPARSTYPE_132 DS 0H\n         CLI   0(R7),C'1'          TYPE=1\n         JE    PARSTYPE_134\n         CLI   0(R7),C'2'          TYPE=2\n         JE    PARSTYPE_134\n         CLI   0(R7),C'3'          TYPE=3\n         JE    PARSTYPE_134\n         CLI   0(R7),C'4'          TYPE=4\n         JE    PARSTYPE_134\n         CLI   0(R7),C'6'          TYPE=6\n         JE    PARSTYPE_134\n*\n*        Issue message regarding invalid SVC TYPE specification\n*\n         $RWTO MSG019A,WRITE=YES\n         $RWTO MSG027A,WRITE=YES\n         LHI   R15,BADPARM4        Invalid parameter found\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\n*\n* Note: The SVC type field in the SVCUPDTE plist will be set to the\n*       appropriate value during phase 2 parse processing if no\n*       errors are found durign phase 2 processing.\n*\nPARSTYPE_134 DS 0H\n         LA    R9,TYPE             R9 -> target field for capture\n         EX    R2,CAPKW            Capture field value\n         CR    R4,R6               Last byte of string ?\n         JE    PARS1000            Go to phase 2 of parse           @14\n         LA    R4,1(R4)            Bump over delimiter\n         LR    R5,R6               Adjust pointers\n         SR    R5,R4                for next keyword in string\n         J     PARS060               and go process it\n******************************************************************* @14\n*                                                                 * @14\n*        Parse GOODNITE=hhmm parameter                            * @14\n*                                                                 * @14\n******************************************************************* @14\nPARSGOODNITE DS 0H\n*        WTO   'PARSGOODNITE entered'\n         TM   PKW_used,PKW_GOODNITE \"GOODNITE=\" already been seen ?\n         JNO   PARSGOODNITE_100    ...jif not\n*\n*       Issue message about duplicate primary keyword specification @14\n*\n         J     PARSLMOD_010        ...jif duplicate to common code\nPARSGOODNITE_100 DS 0H\n         OI    PKW_used,PKW_GOODNITE Set \"GOODNITE=\" seen flag\n         S     R5,=F'9'            Decrement length for \"GOODNITE=\"\n         A     R4,=F'9'            Adjust scan start location\n*\n*        Scan for comma or end of string to harvest\n*\n         CLI   0(R4),C','          \"Null\" \"GOODNITE=,\" ?\n         JNE   PARSGOODNITE_110    ...jif not\n*\n*        Issue message about \"Null\" GOODNITE keyword\n*\n         $RWTO MSG030A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\nPARSGOODNITE_110 DS 0H\n         XR    R2,R2               Clear accumulator register\n         LR    R7,R4          Preserve GOODNITE value start position\n*\n* We need to pick off hh (hours) & mm (minutes) here and make sure\n* the hh value is in the range of 00-23 and the mm value is in the\n* range of 00-59. A value of hhmm=0000 will simply be ignored. The\n* length of the hhmm keyword value must be exactly 4 bytes. The\n* validation of the hhmm range will be performed in phase 2 of the\n* parse.\n*\nPARSGOODNITE_120 DS 0H\n         CR    R4,R6               Past end of string ?\n         JE    PARSGOODNITE_130    ...jif so\n         CLI   0(R4),C','          End of value ?\n         JE    PARSGOODNITE_122    ...jif so\n         LA    R4,1(R4)            Increment string pointer\n         LA    R2,1(R2)            Bump value length\n         J     PARSGOODNITE_120    Go check next string position\n*\n*        Make sure exactly 4 bytes\n*\nPARSGOODNITE_122 DS 0H\n         CHI   R2,4                4 bytes ?\n         JE    PARSGOODNITE_130    ...jif not\n*\n*        Issue message about invalid length GOODNITE keyword value\n*\n*        DC    H'0'                <debug>\n         $RWTO MSG031A,WRITE=YES\n         LHI   R15,BADPARM4        Invalid length\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\n*\n*        Capture GOODNITE value (executable length in R2)\n*\n*        R4 -> delimiter or last character of string\n*        R7 -> start of value\n*\nPARSGOODNITE_130 DS 0H\n         CLI   0(R4),C','          Delimiter terminator ?\n         JNE   PARSGOODNITE_132    ...jif not\n         BCTR  R2,0                otherwise decrement length\n*\n*        Capture the GOODNITE time and validate it\n*\nPARSGOODNITE_132 DS 0H\n         LA    R9,SHUTDOWN         R9 -> target field for capture\n         EX    R2,CAPKW            Capture field value\n         CR    R4,R6               Last byte of string ?\n         JE    PARS1000            Go to phase 2 of parse           @14\n         LA    R4,1(R4)            Bump over delimiter\n         LR    R5,R6               Adjust pointers\n         SR    R5,R4                for next keyword in string\n         J     PARS060               and go process it\n\n*\n* Following line added by @14 change\n*SG031A  WTO   'SVCU031A - Invalid length GOODNITE parameter detected',\n*              ROUTCDE=(11),MF=L                                    @14\n*SG031AL EQU   *-MSG031A                                            @14\n\n\n*        R4 -> start of residual string\n*        R5 =  residual length of string\n\n\n         AGO   .JH0825A\n*                                                                   @14\n* Entry at PARS060 is only for the first character of the string or @14\n* for the next character after a comma. Logic beginning at this     @14\n* label is simply responsible for determining the length of the     @14\n* current candidate option for passing to the appropriate routine   @14\n* for handling. The true length of the candidate option is saved    @14\n* in Current_option_length for the processor involved just in case  @14\n* the processor wants to reuse R3 and for debugging reasons.        @14\n*                                                                   @14\nPARS050  DS    0H                                                   @14\n         LA    R5,1(R3)            Make R5 true length for the scan\n         XC    Parse_flags,Parse_flags initialize flag byte\n\n         LR    R4,R7               R4 -> beginning of string\n         LR    R6,R7               R6 -> beginning of string\n         AR    R6,R3               R6 -> last character in string\n         LR    R5,R6               R5 -> last character in string\n         SR    R5,R4               R5 = length of string\n*\n*        Look for primary keywords\n*\n* Note: Each routine branched to in the following logic is\n*       responsible for setting R4 to point to the residual\n*       portion of the string to parse and r5 to the residual\n*       length of the string.\n*\n*        R4 -> start of string\n*        R5 =  residual length of string\n*\nPARS060  DS    0H\n         CLC   =CL4'SVC=',0(R4)    SVC=\n         JE    PARSSVC             ...jif so\n         CLC   =CL5'LMOD=',0(R4)   LMOD=\n         JE    PARSLMOD            ...jif so\n         CLC   =CL5'ATTR=',0(R4)   ATTR=\n         JE    PARSATTR            ...jif so\n         CLC   =CL6'LOCKS=',0(R4)  LOCKS=\n         JE    PARSLOCKS           ...jif so\n         CLC   =CL9'GOODNITE=',0(R4) GOODNITE=\n         JE    PARSGOODNITE        ...jif so\n         CLC   =CL5'TYPE=',0(R4)   TYPE=\n         JE    PARSTYPE            ...jif so\n         CLC   =CL5'USER=',0(R4)   USER=\n         JE    PARSUSER            ...jif so\n*\n*        Primary keyword not recognized\n*\n         $RWTO MSG005A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n\n\n*\n*        Parse SVC=nnn or SVC=(aaa,bbb) forms\n*\nPARSSVC  DS    0H\n*        WTO   'PARSSVC entered'\n*\n* Check to see if SVC=nnn or SVC=(aaa,bbb) form & handle\n*\n         DC    H'0'\n\n\n\n\n\n\n\n\n\nPARSATTR DS    0H\n         WTO   'PARSATTR entered'\n         DC    H'0'\nPARSLOCKS DS   0H\n         WTO   'PARSLOCKS entered'\n         DC    H'0'\nPARSGOODNITE DS 0H\n         WTO   'PARSGOODNITE entered'\n         DC    H'0'\nPARSTYPE DS    0H\n         WTO   'PARSTYPE entered'\n         DC    H'0'\n******************************************************************* @14\n*                                                                 * @14\n*        Parse USER=xxxxxxxx parameter                            * @14\n*                                                                 * @14\n******************************************************************* @14\nPARSUSER DS    0H\n*        WTO   'PARSUSER entered'\n         TM    PKW_used,PKW_USER   Has \"USER=\" already been seen ?\n         JNO   PARSUSER_100        ...jif not\n*\n*       Issue message about duplicate primary keyword specification @14\n*\n         J     PARSLMOD_010        ...jif duplicate to common code\nPARSUSER_100 DS 0H\n         OI    PKW_used,PKW_USER   Set \"USER=\" already seen flag\n         S     R5,=F'5'            Decrement length for \"USER=\"\n         A     R4,=F'5'            Adjust scan start location\n         SLR   R2,R2               Clear TRT work register          @14\n         LARL  R9,TRTPARM2         Get translate table address      @14\n         EX    R5,SCANCOMA         scan string for comma only       @14\n         JC    8,PARSUSER_120      ...jif end of string w/o delim\n         JC    4,PARSUSER_110      ...jif more after delim\n         OI    Parse_flags,No_more_data Indicate no more data\n         LR    R8,R1               Preserve R1 over WTO\n*        WTO   'No more data'\n         LR    R1,R8               Restore R1 after WTO\n*\n*        More data exists after the delimiter\n*\nPARSUSER_110 DS 0H\n         LR    R8,R1               Preserve R1 over WTO\n*        WTO   'More data after delimiter'\n         LR    R1,R8               Restore R1 after WTO\n*\n*        Capture USER= parameter (determine executable length)\n*\n         LR    R2,R1               R2 -> delimiter\n         SR    R2,R4               R2 = true length of USER value\n         BCTR  R2,0                Make length EXecutable\n         CHI   R2,7                > 8 ?\n         JH    PARSUSER_121        ...jif so\n         LA    R9,USERID           R9 -> field to capture\n         EX    R2,CAPKW            Capture field value\n*\n*        Adjust string scan starting location & residual length\n*        for processing next possible keyword\n*\n         TM    Parse_flags,No_more_data Any more data ?\n         JO    PARS1000            ...jif not, phase 2 processeing\n         LR    R3,R1               R1 -> delimiter\n         SR    R3,R4            R3 = length not including delimiter @14\n         LA    R4,1(R3,R4)         R4 -> data after delimiter\n         SR    R5,R3               R5 = residual length\n         J     PARS060             Go scan for net keyword\n*\n*        End of string found w/o delimiter\n*\nPARSUSER_120 DS 0H\n         LR    R8,R1               Preserve R1 over WTO\n*        WTO   'End of string w/o delimiter'\n         LR    R1,R8               Restore R1 after WTO\n         BCTR  R5,0                Make length executable\n         CHI   R5,7                > max modname length ?\n         JNH   PARSUSER_122        ...jif not, capture USER= name\n*\n*        Issue message about invalid length USER= parameter\n*\nPARSUSER_121 DS 0H\n         DC    H'0'                R8 -> delimiter ?\n         $RWTO MSG011A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\n*\n*        Capture USER= parameter (executable length in R5)\n*\nPARSUSER_122 DS 0H\n         LA    R9,USERID           R9 -> field to capture\n         EX    R5,CAPKW            Capture field value\n         J     PARS1000            Go to phase 2 of parse           @14\n******************************************************************* @14\n*                                                                 * @14\n*        Parse LMOD= parameter                                    * @14\n*                                                                 * @14\n******************************************************************* @14\nPARSLMOD DS    0H\n*        WTO   'PARSLMOD entered'\n         TM    PKW_used,PKW_LMOD   Has \"LMOD=\" already been seen ?\n         JNO   PARSLMOD_100        ...jif not\n*\n*       Issue message about duplicate primary keyword specification @14\n*\nPARSLMOD_010 DS 0H\n         $RWTO MSG007A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\nPARSLMOD_100 DS 0H\n         OI    PKW_used,PKW_LMOD   Set \"LMOD=\" already seen flag\n         S     R5,=F'5'            Decrement length for \"LMOD=\"\n         A     R4,=F'5'            Adjust scan start location\n*        BCTR  R5,0                Make length EXecutable\n         SLR   R2,R2               Clear TRT work register          @14\n         LARL  R9,TRTPARM2         Get translate table address      @14\n         EX    R5,SCANCOMA         scan string for comma only       @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nSCANCOMA TRT   0(*-*,R4),0(R9)     Scan for comma                   @14\nSVCUPDTE LOCTR ,                                                    @14\n         JC    8,PARSLMOD_120      ...jif end of string w/o delim\n         JC    4,PARSLMOD_110      ...jif more after delim\n         OI    Parse_flags,No_more_data Indicate no more data\n         LR    R8,R1               Preserve R1 over WTO\n         WTO   'No more data'\n         LR    R1,R8               Restore R1 after WTO\n*        DC    H'0'                ??????\n\n\n*\n*        More data exists after the delimiter\n*\nPARSLMOD_110 DS 0H\n         LR    R8,R1               Preserve R1 over WTO\n         WTO   'More data after delimiter'\n         LR    R1,R8               Restore R1 after WTO\n*\n*        Capture LMOD= parameter (determine executable length)\n*\n         LR    R2,R1               R2 -> delimiter\n         SR    R2,R4               R2 = true length of LMOD value\n         BCTR  R2,0                Make length EXecutable\n         CHI   R2,7                > 8 ?\n         JH    PARSLMOD_121        ...jif so\n         LA    R9,LMOD             R9 -> field to capture\n         EX    R2,CAPKW            Capture field value\n*\n*        Adjust string scan starting location & residual length\n*        for processing next possible keyword\n*\n         TM    Parse_flags,No_more_data Any more data ?\n         JO    PARS1000            ...jif not, phase 2 processeing\n         LR    R3,R1               R1 -> delimiter\n         SR    R3,R4            R3 = length not including delimiter @14\n         LA    R4,1(R3,R4)         R4 -> data after delimiter\n         SR    R5,R3               R5 = residual length\n         J     PARS060             Go scan for net keyword\n*\n*        End of string found w/o delimiter\n*\nPARSLMOD_120 DS 0H\n         LR    R8,R1               Preserve R1 over WTO\n         WTO   'End of string w/o delimiter'\n         LR    R1,R8               Restore R1 after WTO\n         BCTR  R5,0                Make length executable\n         CHI   R5,7                > max modname length ?\n         JNH   PARSLMOD_122        ...jif not, capture LMOD= name\n*\n*        Issue message about invalid length LMOD= parameter\n*\nPARSLMOD_121 DS 0H\n         $RWTO MSG010A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\n*\n*        Capture LMOD= parameter (executable length in R5)\n*\nPARSLMOD_122 DS 0H\n         LA    R9,LMOD             R9 -> field to capture\n         EX    R5,CAPKW            Capture field value\nLTORG_AREA LOCTR ,                                                  @14\nCAPKW    MVC   0(*-*,R9),0(R4)     Capture keyword field            @14\nSVCUPDTE LOCTR ,                                                    @14\n         J     PARS1000            Go to phase 2 of parse           @14\n\n\n\n\n\n\n\n         DC    H'0'\n\n\n\n\n\n         AGO   .JH0820B\n\n\n\n\n\n\n\nPKW_used DS    X\nPKW_SVC  EQU   X'80'               SVC= keyword found\nPKW_LMOD EQU   X'40'               LMOD= keyword found\nPKW_ATTR EQU   X'20'               ATTR= keyword found\nPKW_LOCKS EQU  X'10'               LOCKS= keyword found\nPKW_GOODNITE EQU X'08'             GOODNITE= keyword found\nPKW_USER EQU   X'04'               USER= keyword found\nPKW_TYPE EQU   X'02'               TYPE= keyword found\n\n.JH0820B ANOP\n\n\n\n\n\n\n         AGO   .JH0820A\n         LM    R1,R3,PKWBRXLE      Load BRXLE work registers\n         USING PKWTENT,R1      Keyword table entry addressability\n         XR    R8,R8               Clear work register\n         ICM   R8,B'0001',PKWLEN   Insert table keyword length\n         CR    R5,R8               long enough for compare ?\n\nPKWTENT  DSECT\nPKWLEN   DS    XL1                 keywork length\n\n\n\n         AGO   .JH0819A\n         ST    R5,Current_option_length Initialize max length\n         LARL  R10,DELIMTAB       Point to TRT table for SCANTRT EX\n         XR    R2,R2               Clear function byte register\nPARS060  DS    0H\n*NIT020  DS    0H\n         BCTR  R5,0                Decrement length for execute\n         EX    R5,SCANTRT          Scan input parameter string\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\n* R10 must point to translate table for next instruction\nSCANTRT  TRT  0(*-*,R4),0(R10)     Test for character\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         JC    8,PARS080         ...jif end of string w/o delimiter\n         JC    4,PARS070           ...jif more data after delimiter\n         OI    Parse_flags,No_more_data Indicate no more data\nPARS070  DS    0H\n*NIT030  DS    0H\n         LR    R3,R1               R1 -> delimiter in string (comma)\n         SR    R3,R4           R3 = new length not including delimiter\n         ST    R3,Current_option_length Save length for processor\n*\n* Verify that invalid function byte was not returned from the DELIMTAB\n* translation table. If it was then we'll abend and R2 will contain\n* the offending value.\n*\n         CHI   R2,10               Check against max function value\n         JNH   PARS071             ...jif not high\nGet INIT974 logic here\n\n\n         JH    INIT974             ...go abend on bad function byte\n\nPARS071  DS    0H\n         SHI   R2,4                Adjust for table entry\n         L     R15,VECTOR(R2)      R2 contains processor offset from\n*                                   the DELIMTAB translate table\n         BASR  R14,R15             Call the delimiter processor\n\n\nPARS080  DS    0H\n\n\n*                                                                   @14\n*        Unsupported parameter option\n*                                                                   @14\n*ARS???  DS    0H                                                   @14\n         $RWTO MSG005A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n.JH0819A ANOP\n\n\n\n*\n* Table of supported primary keywords\n*\n* The following table is processed by a BRXLE loop and contains\n* pointeres to logic to be used in processing the parameter list\n* with the keyword as the first field in each table entry\n*\nPKWBRXLE DC    A(PKWFIRST,PKWELNG,PKWLAST) BRXLE setup values\n*\nPKWFIRST DC    AL1(4)              Primary keyword length\n         DC    CL11'SVC='          Primary keyword\n         DC    AL1(PKW_SVC)        Primary keyword flag\n         DC    XL3'00'             <filler>\n         DC    A(PROC_SVC)         @ of processor routine\n*\nPKWELNG  EQU   *-PKWFIRST          Length of eash entry\n*\n         DC    AL1(5)              Primary keyword length\n         DC    CL11'LMOD='         Primary keyword\n         DC    AL1(PKW_LMOD)       Primary keyword flag\n         DC    XL3'00'             <filler>\n         DC    A(PROC_LMOD)        @ of processor routine\n*\n         DC    AL1(5)              Primary keyword length\n         DC    CL11'ATTR='         Primary keyword\n         DC    AL1(PKW_ATTR)       Primary keyword flag\n         DC    XL3'00'             <filler>\n         DC    A(PROC_ATTR)        @ of processor routine\n*\n         DC    AL1(6)              Primary keyword length\n         DC    CL11'LOCKS='        Primary keyword\n         DC    AL1(PKW_LOCKS)      Primary keyword flag\n         DC    XL3'00'             <filler>\n         DC    A(PROC_LOCKS)       @ of processor routine\n*\n         DC    AL1(9)              Primary keyword length\n         DC    CL11'GOODNITE='     Primary keyword\n         DC    AL1(PKW_GOODNITE)   Primary keyword flag\n         DC    XL3'00'             <filler>\n         DC    A(PROC_GOODNITE)    @ of processor routine\n*\nPKWLAST  DC    AL1(5)              Primary keyword length\n         DC    CL11'USER='         Primary keyword\n         DC    AL1(PKW_USER)       Primary keyword flag\n         DC    XL3'00'             <filler>\n         DC    A(PROC_USER)        @ of processor routine\n\n\nPKW_used DS    X\nPKW_SVC  EQU   X'80'               SVC= keyword found\nPKW_LMOD EQU   X'40'               LMOD= keyword found\nPKW_ATTR EQU   X'20'               ATTR= keyword found\nPKW_LOCKS EQU  X'10'               LOCKS= keyword found\nPKW_GOODNITE EQU X'08'             GOODNITE= keyword found\nPKW_USER EQU   X'04'               USER= keyword found\nPKW_TYPE EQU   X'02'               TYPE= keyword found\n\nPROC_SVC DS    0H\nPROC_LMOD DS   0H\nPROC_ATTR DS   0H\nPROC_LOCKS DS  0H\nPROC_GOODNITE DS 0H\nPROC_USER DS   0H\n.JH0820A ANOP\n\n.JH0825A ANOP\n\n.JH0831B ANOP                                                       @14\n\n\n\n\n\n\n\n\n\n\n\nPARSX    DS    0H                                                   @14\n         LM    R14,R12,PARSSAVE+12     Restore caller's GPRs        @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @19\n         TITLE 'ENV000  - Check environmentals before processing'   @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n*        Perform environmental checks that can be executed before * @14\n*        executing SVC install.                                   * @14\n*                                                                 * @14\n* Note: These checks include the following items:                 * @14\n*                                                                 * @14\n*       1) Check for existence of protecting CL(#SNOMISC) profile * @14\n*       1) Check user's authority to install this SVC             * @14\n*       2) Check various SVC attribute & lock combinations for    * @14\n*          validity (move to PARS000)                             * @14\n*       3) OPEN SVCLIB library                                    * @14\n*       4) BLDL for the specified LMOD parameter                  * @14\n*       5) Requested module is not SPLIT format                   * @14\n*       6) Requested module is RENT                               * @14\n*       7) Requested module is REFR                               * @14\n*       8) Requested module is REUS                               * @14\n*       9) Requested module is AMODE24 or AMODE31                 * @14\n*                                                                 * @14\n* Note: When this routine is called the PARSE routine (or earlier * @14\n*       processing) will have completed the following:            * @14\n*                                                                 * @14\n*       1) MYFLAG.SPECIAL will be set for a \"systems\"             * @14\n*          priviledged userid                                     * @14\n*       2) TYPE_SVC will contain a valid SVC # (1, 2, 3, 4 or 6)  * @14\n*       3) All LOCKS_FLAGS flags representing individual locks    * @14\n*          requested will be set                                  * @14\n*       4) ATTR_FLAGS flags representing individual SVC           * @14\n*          attributes such as NPRMT, APF, AR and ESR will have    * @14\n*          been set                                               * @14\n*       5) PROC_FLAGS.PROC_GOODNITE will be set indicating that a * @14\n*          GOODNITE shutdown time was requested                   * @14\n*       6) ATTR_FLAGS.ATTR_ESR will be set indicating the user    * @14\n*          is requesting installation of an SVC requiring ESR     * @14\n*          routing.                                               * @14\n*       7) The SVCNO field will contain a 3 digit zoned decimal   * @14\n*          SVC number in the range of 0-255.                      * @14\n*       8) The ESRSVCNO field will contain a 3 digit zoned        * @14\n*          decimal ESR function code that is appropriate for the  * @14\n*          routing SVC number passed in the SVCNO field if the    * @14\n*          ATTR_FLAGS.ATTR_ESR flag is set otherwise it will be   * @14\n*          blank. The ranges of acceptable values for the various * @14\n*          ESR types are as follows:                              * @14\n*                                                                 * @14\n*          SVCNO  Type Acceptable range for ESRSVCNO              * @14\n*          =====  ==== =============================              * @14\n*           109   3/4  000-255                                    * @14\n*           116    1   000-014                                    * @14\n*           122    2   000-019                                    * @14\n*           137    6   000-007                                    * @14\n*                                                                 * @14\n*       In summary the following fields & flags are expected to   * @14\n*       be set on entry to this routine:                          * @14\n*                                                                 * @14\n*       SVCNO                                                     * @14\n*       ESRSVCNO                                                  * @14\n*       Current_profname                                          * @14\n*                                                                 * @14\n*       Note: RACF \"global special\" buys the submitter nothing    * @14\n*             in this program at this time (08/11/2015).          * @14\n*                                                                 * @14\n*                                                                 * @14\n         AGO   .JRH997A                                             @14\n*  Note: This routine uses the PROC_FLAGS.FAILED flag to allow    * @14\n*        as many of the checks & tests executed within this       * @14\n*        subroutine to be performed before returning to the       * @14\n*        calling routine. Each test that can logically still be   * @14\n*        executed even though an earlier test failed will be      * @14\n*        executed if possible to identify as many issues as       * @14\n*        possible for the submitting user in a single execution.  * @14\n*        The PROC_FLAGS.FAILED flag does not result in a specific * @14\n*        return code being returned to the caller and the caller  * @14\n*        will simply see the last return code set in the RETCODE  * @14\n*        field.                                                   * @14\n.JRH997A ANOP                                                       @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nENV000   DS    0H                                                   @14\n         STM   R14,R12,SAVE@L1+12  Save caller's GPRs               @14\n\n\n         AGO   .JH0810A\n<Begin new code>\n*\n*        Check that a profile exists for the SVC slot involved. If\n*        there is no profile we will not allow the SVC to be\n*        installed regardless of whether the invoking user has\n*        RACF \"Global Special\" privileges\".\n*                                                                   @14\n*        Test user's authorization to install this SVC              @14\n*                                                                   @14\n*        -The resource name to be checked will be the value located @14\n*         in the Current_profname field constructed by the PARS000  @14\n*         routine and will be in one ot the following two formats:  @14\n*                                                                   @14\n*         SVCUPDTE_nnn  where nnn is a standard SVC #               @14\n*                                                                   @14\n*          or                                                       @14\n*                                                                   @14\n*         SVCUPDTE_xxxyyy  where xxx is the ESR SVC # & yyy is the  @14\n*                          ESR function code                        @14\n*                                                                   @14\n*         Examples:                                                 @14\n*                                                                   @14\n*         SVCUPDTE_109255 for ESR T3/4 SVC (109) with FC=255        @14\n*         SVCUPDTE_213    for SVC 213                               @14\n*                                                                   @14\n*         The SVC# will be right justified & padded on the left     @14\n*         with blanks                                               @14\n*                                                                   @14\n* Issue RACROUTE REQUEST=AUTH to validate existence of an         *\n* SVCUPDTE profile and to check the user's authorization.         *\n*                                                                 *\n* Expected results & their meanings are:                          *\n*                                                                 *\n*  R15 SAFPRRET SAFPRREA           Meaning                        *\n*  === ======== ======== ======================================== *\n*  00    --       --     -RACROUTE REQUEST=VERIFY has completed   *\n*                         successfully.                           *\n*        00       n/a    -Valid RACF userid.                      *\n*        04       --     -Verify token information                *\n*                 0C     -Indicates TOKNIN was specified, but its *\n*                         length was too large.                   *\n*                 10     -Indicates a STOKEN was specified, but   *\n*                         its length was too large.               *\n*  04    --       --     -Requested function could not be         *\n*                         completed. No RACF decision.            *\n*        00       n/a    -ENVIR=VERIFY was specified without SAF  *\n*                         installation exit processing.           *\n*        04       n/a    -User profile not defined to RACF.       *\n*        20       n/a    -RACF is not active.                     *\n*        58       n/a    -RJE or NJE operator FACILITY class      *\n*                         profile not found.                      *\n*  08    --       --     -Requested function has failed.          *\n*        08       n/a    -Password is not authorized.             *\n*        0C       n/a    -Password has expired.                   *\n*        10       n/a    -New password is invalid.                *\n*        14       n/a    -User not defined to group.              *\n*        18       n/a    -RACROUTE REQUEST=VERIFY was failed by   *\n*                         installation exit routine.              *\n*        1C       n/a    -User's access has been revoked.         *\n*        24       n/a    -User's access to specified group has    *\n*                         been revoked.                           *\n*        28       n/a    -OIDCARD parameter is required but not   *\n*                         specified.                              *\n*        2C       n/a    -OIDCARD parameter is invalid for        *\n*                         specified user.                         *\n*        30       --     -User is not authorized to the port of   *\n*                         entry in the TERMINAL, JESINPUT, or     *\n*                         CONSOLE class.                          *\n*                 00     -User not authorized to port of entry.   *\n*                 04     -User not authorized to access the       *\n*                         system on this day, or at this time of  *\n*                         day.                                    *\n*                 08     -indicates the port of entry may not be  *\n*                         used on this day, or at this time of    *\n*                         day. Note: The port of entry refers to  *\n*                         the TERMINAL class, the JESINPUT class, *\n*                         and the CONSOLE class ports of entry.   *\n*        34       n/a    -User not authorized to use application. *\n*        38       --     -SECLABEL checking failed.               *\n*                 04     -MLACTIVE requires a SECLABEL; none was  *\n*                         specified.                              *\n*                 08     -User not authorized for SECLABEL.       *\n*                 0C     -System was in a multilevel secure       *\n*                         status, and the dominance check failed. *\n*                 10     -Neither the user's nor the submitter's  *\n*                         SECLABELs dominate. They are disjoint.  *\n*        48       --     -Indicates that an unpriviledged user    *\n*                         issued a RACROUTE=VERIFY in a tranquil  *\n*                         state (MLQUIET).                        *\n*        4C       --     -Nodes checking failed.                  *\n*                 00     -Submitter's node is not allowed access  *\n*                         to execution node.                      *\n*                 04     -NJE failure: UACC of NONE for USERID    *\n*                         type of NODES profile.                  *\n*                 08     -NJE failure: UACC of NONE for GROUP     *\n*                         type of NODES profile.                  *\n*                 0C     -NJE failure: UACC of NONE for SECLABEL  *\n*                         type of NODES profile.                  *\n*                 10     -NJE failure: No local submit node       *\n*                         specified.                              *\n*                 14     -NJE failure: Reverification of transla- *\n*                         ted values failed.                      *\n*        50       --     -Surrogate submit attempt failed.        *\n*                 04     -SURROGAT class is inactive.             *\n*                 08     -Submitter is not permitted by the       *\n*                         user's SURROGAT class profile.          *\n*                 0C     -Submitter is not authorized to the      *\n*                         SECLABEL under which the job is to run. *\n*        50       --     -JESJOBS check failed.                   *\n*  64    --       --     -CHECK subparameter of the RELEASE       *\n*                         keyword was specified on the execute    *\n*                         form of the RACROUTE REQUEST=VERIFY     *\n*                         macro; however, the list form of the    *\n*                         macro does not have the same release    *\n*                         parameter. Macro processing terminates. *\n*                                                                 *\n* Note: I have included the full set of possible R15, RACF return *\n*       codes and reason codes in the above table only for docu-  *\n*       mentation purposes. The following table shows the expect- *\n*       ed combinations for an install request that we'll fail... *\n*       all others other than 0/0/0 will be failed.               *\n*                                                                 *\n*  R15 SAFPRRET SAFPRREA           Meaning                        *\n*  === ======== ======== ======================================== *\n*  00    00        0a    -User authorized for ATTR=READ           *\n*  04    04       n/a    -User profile not defined to RACF.       *\n*  08    1C       n/a    -User's access has been revoked.         *\n*                                                                 *\n<resume>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*\n*         SVCUPDTE macro layout (for generation changes)\n*\nSVCU_layout DSECT\nSVCU_vers DS   XL1                 Version\nSVCU_func DS   XL1                 Function code\nSVCU_ESRflag DS XL1                ESR flag\nSVCU_SVC2MOD DS XL1                SVC to modify\nSVCU_SVCEP DS  F                   SVC entry point\nSVCU_SVCtype DS XL1                SVC type\n* Equates\nSVCU_SVCattr DS XL1                SVC attributes\n* Equates\nSVCU_SVClocks DS XL1               SVC locks\n* Equates\nSVCU_SVCrc DS   XL1                SVC routing code\nSVCU_SVCepname DS CL8              SVC entry point name\n\n\n<End new code>\n.JH0810A ANOP\n\n\n\n\n* The following is for testing only\n*        MVC   Current_profname(15),=CL15'SVCUPDTE_109204'\n*        MVC   Current_profname(15),=CL15'SVCUPDTE_109117'\n*        MVC   SVCNO,=CL3'109'\n*        MVC   ESRSVCNO,=CL3'204'\n*        MVC   ESRSVCNO,=CL3'117'\n*        OI    ATTR_FLAGS,ATTR_ESR     Set flag for testing\n* The above is for testing only\n\n\n\n*                                                                   @14\n*        Test user's authorization to install this SVC              @14\n*                                                                   @14\n*        -The resource name to be checked will be the value located @14\n*         in the Current_profname field constructed by the PARS000  @14\n*         routine and will be in one ot the following two formats:  @14\n*                                                                   @14\n*         SVCUPDTE_nnn  where nnn is a standard SVC #               @14\n*                                                                   @14\n*          or                                                       @14\n*                                                                   @14\n*         SVCUPDTE_xxxyyy  where xxx is the ESR SVC # & yyy is the  @14\n*                          ESR function code                        @14\n*                                                                   @14\n*         Examples:                                                 @14\n*                                                                   @14\n*         SVCUPDTE_109255 for ESR T3/4 SVC (109) with FC=255        @14\n*         SVCUPDTE_213    for SVC 213                               @14\n*                                                                   @14\n*         The SVC# will be right justified & padded on the left     @14\n*         with blanks                                               @14\n*                                                                   @14\n         MVC   ENTITYW3,RESOURCE   Set \"SVCUPDTE_\" part             @14\n         TM    ATTR_FLAGS,ATTR_ESR     Is this an ESR SVC request ? @14\n         JNO   ENV010                  ...jif not                   @14\n*                                                                   @14\n*        This is an ESR SVC request - complete xxxyyy part          @14\n*                                                                   @14\n         MVC   ENTITYW3+9(3),SVCNO     Install ESRSVC number        @14\n         MVC   ENTITYW3+12(3),ESRSVCNO Install function code        @14\n         J     ENV020                  Go do check                  @14\n*                                                                   @14\n*        We are dealing with a standard SVC number (non-ESR)        @14\n*                                                                   @14\nENV010   DS    0H                                                   @14\n         MVC   ENTITYW3+9(3),SVCNO     Install SVC number           @14\n*                                                                   @14\n*        Set profile name for CHKINUSE usage & any error WTO        @14\n*                                                                   @14\nENV020   DS    0H                                                   @14\n         MVC   Current_profname,ENTITYW3 Copy profile name          @14\n*                                                                   @14\n*        Check for CL(#SNOMISC) SVCUPDTE_xxxyyy AC(READ)            @14\n*                                                                   @14\n         MVC   SAFRACFL(SAFRACLL),RACPATT Set RACROUTE base pattern @14\n         LA    R2,ENTITW3L         Pick up buffer length            @14\n         STH   R2,ENTITYW1         Store for RACROUTE call          @14\n         XC    ENTITYW2,ENTITYW2   Clear resource name length       @14\n         BASR  R10,0               Macro internal addressability    @14\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"    @14\n         RACROUTE REQUEST=AUTH,                                     @14X\n               ENTITYX=ENTITYW1,                                    @14X\n               CLASS=FACILITY,                                      @14X\n               ATTR=READ,                                           @14X\n               WORKA=RACFWORK,                                      @14X\n               LOG=NONE,           was ASIS                         @14X\n               MSGSUPP=YES,        was NO                           @14X\n               RELEASE=1.9.2,                                       @14X\n               MF=(E,SAFRACFL)                                      @14\n         DROP  R10             Drop internal macro addressability   @14\n*                                                                   @14\n* Save SAF R15 and RACF return code & reasons code for later use or @14\n* diagnostics                                                       @14\n*                                                                   @14\n         ST    R15,SAFWR15         Save SAF return code             @14\n         LA    R8,SAFRACFL     R8 -> RACROUTE Router Parameter list @14\n         USING SAFP,R8         RACF Router parameter list address   @14\n         L     R14,SAFPRRET        Pick up RACF return code         @14\n         ST    R14,SAFWRRET        Save for later                   @14\n         L     R14,SAFPRREA        Pick up RACF reason code         @14\n         ST    R14,SAFWRREA        Save for later                   @14\n         DROP  R8                  Drop SAFP addressability         @14\n*                                                                   @14\n*        Check RACROUTE return & reason codes                       @14\n*                                                                   @14\n         L     R15,SAFWR15         Pick up R15 from AUTH call       @14\n         LTR   R15,R15             Verify completed successfully ?  @14\n         JZ    ENV090              ...jif so, user is authorized    @14\n*                                                                   @14\n*        Verify that the profile actually existed                   @14\n*                                                                   @14\n* Expect 4/4 & n/a if no profile or                                 @14\n*        8/8/0     if profile but user not authorized               @14\n*                                                                   @14\n         CLC   SAFWR15,=F'4'       No RACF decision                 @14\n         JNE   ENV040              ...jif not, some other reason    @14\n         CLC   SAFWRRET,=F'4'      Profile not defined ?            @14\n         JNE   ENV040              ...jif not, some other reason    @14\n*                                                                   @14\n*        Profile does not exist - fail the request with a WTO & set @14\n*        return code for caller.                                    @14\n*                                                                   @14\n         $RWTO MSG009A,WRITE=NO                                     @14\n         MVC   MSG009AA,Current_profname Install profile            @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,NOPROF          Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     ENVX                  & go return to caller          @14\n*                                                                   @14\n*        User is not authorized to install this SVC                 @14\n*                                                                   @14\nENV040   DS    0H                                                   @14\n         $RWTO MSG008A,WRITE=NO    Prime the message area           @14\n         MVC   MSG008AB,Current_profname                            @14\n         $RWTO WTOD,WRITE=YES      Write the message                @14\n         $RWTO MSG008I,WRITE=NO    Prime the message area           @14\n* Install SAFRC, RACFRC & RACFRSN in WTO fields                     @14\n         LA    R14,SAFWR15         R14 -> source area to convert    @14\n         LA    R15,MSG008IA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         LA    R14,SAFWRRET        R14 -> source area to convert    @14\n         LA    R15,MSG008IB        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         LA    R14,SAFWRREA        R14 -> source area to convert    @14\n         LA    R15,MSG008IC        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES      Write the message                @14\n         LHI   R15,BADAUTH         Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     ENVX                  & go return to caller          @14\n*                                                                   @14\n*        User is authorized for SVCUPDTE_xxxyyy to be here          @14\n*                                                                   @14\nENV090   DS    0H                                                   @14\n         OI    MYFLAGS,AUTHUSER    User is authorized               @14\n*                                                                   @14\n*        Check to see if Current_profname resource is currently in  @14\n*        use and if so report the current user of the resource &    @14\n*        their ASID (done by 1) and set a return code for           @14\n*        the caller. The CHKINUSE routine does the heavy lifting.   @14\n*                                                                   @14\n         BRASL R14,CHKINUSE        Go see if the resource is in use @14\n         TM    Profile_flags,Profile_INUSE Was it in use ?          @14\n         JNO   ENV092              ...jif resource is free          @14\n*                                                                   @14\n*        The SVC slot resource was found to be in use. In this case @14\n*        the CHKINUSE routine will have set the following fields    @14\n*        for us that we'll use in a WTO message before setting a    @14\n*        failing return code and returning to the caller.           @14\n*                                                                   @14\n*        INUSE_ASID    - ASID of address space using the profile  * @14\n*        INUSE_JOBNAME - JOBNAME of address space using the       * @14\n*                                                                   @14\n         $RWTO MSG908A,WRITE=NO                                     @14\n         MVC   MSG908AA,Current_profname                            @14\n         MVC   MSG908AB,INUSE_JOBNAME                               @14\n         MVC   MSG908AC,INUSE_ASID                                  @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,BADENQ          Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     ENVX                  & go exit w/ return code       @14\n*\n* To be here the user is authorized to install the SVC and the\n* backing reource for the requested SVC slot is not currently in\n* use. We now will verify that the SVCLIB DD is present. If it is\n* not present we'll issue a message indicating that the SVCLIB\n* DDname is required.\n*\n* Check attributes of the SVCLIB allocation                       * @14\n*                                                                 * @14\n* This routine is responsible for the following:                  * @14\n*                                                                 * @14\n* 1) Make sure the SVCLIB DDname was provided                     * @14\n* 2) Capture SVCLIB data set name & volser from SWA data          * @14\n* 3) Make sure SVCLIB data set is on a single disk volume         * @14\n* 4) Make sure SVCLIB DDname did not supply a member name         * @14\n* 5) Make sure SVCLIB DSORG is PO/POE                             * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nENV092   DS    0H                                                   @14\n         L     R1,PSATOLD-PSA(0,0) R1 -> current TCB                @14\n         L     R1,TCBTIO-TCB(R1)  R1 -> TIOT                        @14\n         LA    R1,TIOELNGH-TIOT1(R1)  R1 -> 1st DDname in TIOT      @14\nENV092A  DS    0H                                                   @14\n         CLI   0(R1),X'00'         End of TIOT ?                    @14\n         JE    ENV092B             ...jif so, SVCLIB DD missing     @14\n* Note: We reall need a new message for above                       @14\n         CLC   =CL8'SVCLIB',TIOEDDNM-TIOELNGH(R1) SVCLIB DD ?       @14\n         JE    ENV092C             ...jif so                        @14\n         XR    R2,R2               Clear for insert                 @14\n         IC    R2,0(R1)            R2 = TIOELNGH for current entry  @14\n         AR    R1,R2               Point to next TIOT DD entry      @14\n         J     ENV092A              and go check it out             @14\n*                                                                   @14\n*        SVCLIB DD not found - issue WTO & go exit                  @14\n*                                                                   @14\nENV092B  DS    0H                                                   @14\n         $RWTO MSG004A,WRITE=YES   Write message                    @14\n         LHI   R1,BADENV3          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                  & go exit w/ return code       @14\n*                                                                   @14\n*        SVCLIB DD was found - get JFCB for SVCLIB DD for tests     @14\n*                                                                   @14\n*        Note: R1 -> SVCLIB TIOT entry on entry to this label       @14\n*                                                                   @14\nENV092C  DS    0H                                                   @14\n         LA    R9,EPA              R9 -> EPA                        @14\n         ST    R9,SWEPAPTR         Save in EPA pointer field        @14\n*                                                                   @14\n         USING ZB505,R9            EPA addressability               @14\n*                                                                   @14\n         XC    SWAEPA,SWAEPA       Initialize the EPA               @14\n         MVC   SWVA,TIOEJFCB-TIOELNGH(R1) @JFCB token to EPA        @14\n         XC    SWAREQRC,SWAREQRC   Clear return code work area      @14\n         SWAREQ FCODE=RL,                                           @14X\n               EPA=SWEPAPTR,                                        @14X\n               UNAUTH=YES,                                          @14X\n               MF=(E,SWAPARMS)                                      @14\n         ST    R15,SWAREQRC        Save for debugging               @14\n         LTR   R15,R15             Was function successful ?        @14\n         JZ    ENV092D             ...jif so, go copy JFCB          @14\n*                                                                   @14\n*        SWAREQ encountered an error - just issue WTO with R15      @14\n*                                                                   @14\n*        Note: R15 from SWAREQ service is in SWAREQRC field         @14\n*                                                                   @14\n         $RWTO MSG048S,WRITE=NO                                     @14\n         LA    R1,SWAREQRC         Source for hex conversion        @14\n         LA    R15,MSG048SA        Target for hex conversion        @14\n         UNPK  0(9,R15),0(5,R1)    Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES      Write the completed message      @14\n         LHI   R1,BADSWA           Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                  & go exit w/ return code       @14\n*                                                                   @14\n*        Capture SVCLIB data set name & volume                      @14\n*                                                                   @14\nENV092D  DS    0H                                                   @14\n         L     R14,SWBLKPTR        R14 -> JFCB                      @14\n         MVC   JFCB,0(R14)         Copy JCFB to DWS for debugging   @14\n         LA    R1,JFCB             R1 -> copied JFCB (from SWA)     @14\n*                                                                   @14\n         DROP  R9                  Drop EPA addressability          @14\n*                                                                   @14\n         USING IEFJFCBN,R1         JFCB addressability              @14\n*                                                                   @14\n         MVC   DSN,JFCBDSNM        Capture SVCLIB dsn for later     @14\n         MVC   VOL,JFCBVOLS        Capture 1st volume               @14\n*                                                                   @14\n*        Make sure SVCLIB data set exists on a single disk volume   @14\n*                                                                   @14\n         CLI   JFCBNVOL,X'01'      On single disk volume ?          @14\n         JE    ENV092E             ...jif so                        @14\n*                                                                   @14\n*        SVCLIB library is multi-volume - issue WTO & exit          @14\n*                                                                   @14\n         $RWTO MSG060E,WRITE=YES   Write the message                @14\n         LHI   R1,BADMVOL          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                  & go exit w/ return code       @14\n*                                                                   @14\n*        Make sure SVCLIB member name not specified                 @14\n*                                                                   @14\nENV092E  DS    0H                                                   @14\n         TM    JFCBELNM,X'FF'-X'40' Member name on SVCLIB ?         @14\n         JZ    ENV092EA            ...jif not, continue checks      @14\n*                                                                   @14\n*        SVCLIB DDname specified a member name - issue WTO & exit   @14\n*                                                                   @14\n         $RWTO MSG064E,WRITE=YES   Write the message                @14\n         LHI   R1,BADMEM1          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                  & go exit w/ return code       @14\n*                                                                   @14\n*        Must open the SVCLIB DDname to get DSORG & RECFM unless    @14\n*        we want to perform an OBTAIN                               @14\n*                                                                   @14\n* Copy input DCB to area below the 16MB line                        @14\n*                                                                   @14\nENV092EA DS    0H                                                   @14\n         MVC   SVCLIB,INDCB#       Copy model DCB to work area      @14\n         MVC   W#OPNDI,X#OPNDI     Install OPEN input execute list  @14\n         LA    R11,SVCLIB          R11 -> SVCLIB DCB                @14\n         USING IHADCB,R11          Obtain addressability            @14\n         OPEN  ((R11),INPUT),MODE=31,MF=(E,W#OPNDI) Open SVCLIB     @14\n         TM    DCBOFLGS,DCBOFOPN   Open successful ?                @14\n         JO    ENV092F             ...jif OPEN good                 @14\n*                                                                   @14\n*        OPEN for SVCLIB library failed                             @14\n*                                                                   @14\n         $RWTO MSG044E,WRITE=YES                                    @14\n         LHI   R1,BADOPN1          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*                                                                   @14\n*        Make sure SVCLIB is DSORG=PO/POE                           @14\n*                                                                   @14\nENV092F  DS    0H                                                   @14\n         TM    DCBDSRG1,DCBDSGPO   DSORG=PO ?                       @14\n         JO    ENV092G             ...jif so                        @14\n*        TM    JFCDSRG1,JFCORGPO   PO/POU DSORG ?                   @14\n*        JO    ENV092G             ...jif so, skip error code       @14\n*                                                                   @14\n*        DSORG not PO/POE for SVCLIB - issue WTO & exit             @14\n*                                                                   @14\n         $RWTO MSG052E,WRITE=YES   Write the messge                 @14\n         LHI   R1,BADDSORG         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*                                                                   @14\n*        Make sure SVCLIB is RECFM=U                                @14\n*                                                                   @14\nENV092G  DS    0H                                                   @14\n*        TM    JFCRECFM,JFCUND     RECFM=U ?                        @14\n         TM    DCBRECFM,DCBRECU    RECFM=U ?                        @14\n*        JO    ENV092H             ...jif so, skip error code       @14\n         JO    ENV092I             ...jif so, skip error code       @14\n*                                                                   @14\n         DROP  R1                  Lose JFCB addressability         @14\n*                                                                   @14\n*        RECFM not U for SVCLIB - issue WTO & exit                  @14\n*                                                                   @14\n         $RWTO MSG056E,WRITE=YES   Write the message                @14\n         LHI   R1,BADRECFM         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*                                                                   @14\n*        Additional SVCLIB library checks go here                   @14\n*                                                                   @14\n         AGO   .JH0812A\n*\n*        Open SVCLIB library for BLDL & LOAD processing\n*\n* Copy input DCB to area below the 16MB line                        @14\nENV092H  DS    0H                                                   @14\n         MVC   SVCLIB,INDCB#       Copy model DCB to work area      @14\n         MVC   W#OPNDI,X#OPNDI     Install OPEN input execute list  @14\n         LA    R11,SVCLIB          R11 -> SVCLIB DCB                @14\n         USING IHADCB,R11          Obtain addressability            @14\n         OPEN  ((R11),INPUT),MODE=31,MF=(E,W#OPNDI) Open SVCLIB     @14\n         TM    DCBOFLGS,DCBOFOPN   Open successful ?                @14\n         JO    ENV092I             ...jif OPEN good                 @14\n*                                                                   @14\n*        OPEN for SVCLIB library failed                             @14\n*                                                                   @14\n         $RWTO MSG044E,WRITE=YES                                    @14\n         LHI   R1,BADOPN1          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n.JH0812A ANOP\n* Update BLDLLIST for module name only                              @14\nENV092I  DS    0H                                                   @14\n*        MVC   EPNAME,=CL8'LUA'    <development>\n*        MVC   EPNAME,=CL8'CCNGRE' <development>\n*        MVC   EPNAME,=CL8'VSMMON' <development> EP & LP differ\n         MVC   BLDLLIST,=H'1'      Will get only one member         @14\n         MVC   BLDLLL,=H'76'       Set LL to 76 bytes               @14\n         MVC   BLNAME,EPNAME       Install SVC module name          @14\n*                                                                   @14\n         BLDL  (R11),BLDLLIST      Get the directory entry          @14\n*                                                                   @14\n         LTR   R8,R15              Was BLDL OK ?                    @14\n         JZ    ENV092J             ...jif so                        @14\n*                                                                   @14\n*        BLDL failed for EPNAME module                              @14\n*                                                                   @14\n         STM   R15,R0,DWD          Save BLDL reaturn/reason codes   @14\n         $RWTO MSG016A,WRITE=YES   Write the message                @14\n         $RWTO MSG016I,WRITE=NO    Prime the WTO area w/ message    @14\n*                                                                   @14\n* Format BLDL return & reason codes into message                    @14\n*                                                                   @14\n* Note: Only low-order bytes need to be formatted (1 in/2 out)      @14\n*                                                                   @14\n         MVC   MSG016IA,EPNAME     Install EPNAME                   @14\n* Format R15 (return code) byte                                     @14\n         LA    R14,DWD+3           R14 -> source area to convert    @14\n         LA    R15,MSG016IB        R15 -> target display area       @14\n         UNPK  0(3,R15),0(2,R14)   unpack into display area         @14\n         MVZ   0(2,R15),=XL17'00'  move zone into display area      @14\n         TR    0(2,R15),=C'0123456789ABCDEF' translate              @14\n         MVI   2(R15),C' '         overlay clobbered byte           @14\n* Format R0  (reason code) byte                                     @14\n         LA    R14,DWD+7           R14 -> source area to convert    @14\n         LA    R15,MSG016IC        R15 -> target display area       @14\n         UNPK  0(3,R15),0(2,R14)   unpack into display area         @14\n         MVZ   0(2,R15),=XL17'00'  move zone into display area      @14\n         TR    0(2,R15),=C'0123456789ABCDEF' translate              @14\n         MVI   2(R15),C' '         overlay clobbered byte           @14\n*                                                                   @14\n*        CLOSE will be done by mainline code on exit in this case   @14\n*                                                                   @14\n         $RWTO WTOD,WRITE=YES      Write the message                @14\n         LHI   R1,BADEPN1          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*                                                                   @14\n*        Verify EPNAME module has the correct attributes            @14\n*                                                                   @14\n* Note: We must honor AMODE & RMODE for the EPNAME module in the    @14\n*       respective SVC table entry                                  @14\n*                                                                   @14\n* Note: Acceptable modules must be marked EXEC, RENT, REFR, REUS    @14\n*       and OVLY=NO                                                 @14\n*                                                                   @14\n* Note: RMODE=SPLIT information is not available unless either the  @14\n*       CSVQUERY service is used or the LOAD macro expansion        @14\n*       requested EXTINFO. This may be needed in the future. The    @14\n*       only issue with those services (CSVQUERY/CSVINFO) is that   @14\n*       the module must have been loaded to request this type of    @14\n*       information.                                                @14\n*                                                                   @14\nENV092J  DS    0H                                                   @14\n         AGO   .JH0812B\n\n RMODE=SPLIT program object\n  SASDTP.IBM.LOAD(CCNGRE)\n\n.JH0812B ANOP\n******************************************************************* @14\n*                                                                 * @14\n* It appears that the only 100% confident way to check for        * @14\n* an RMODE=SPLIT module is to actually LOAD it into the private   * @14\n* area and then use the CSVINFO service to obtain the information * @14\n* needed. This means that we'd have to really perform 2 LOADs for * @14\n* the user supplied module since the 1st LOAD would simply be     * @14\n* used to obtain some additional information not provided by BLDL * @14\n* such as RMODE=SPLIT information and we'd then have to DELETE    * @14\n* this copy from the private area followed by a later LOAD with   * @14\n* ADRNAPF=YES specified to direct the 2nd LOAD into CSA/ECSA as   * @14\n* needed. For now we're going to just not check for RMODE=SPLIT   * @14\n* beyond the understanding that a \"true\" RMODE=SPLIT module...    * @14\n* i.e. one where some control sections are loaded below 16MB and  * @14\n* some are loaded above 16MB...would be expected to have a        * @14\n* BLMODLN value of zeroes.                                        * @14\n*                                                                 * @14\n* The problem is that if all control sections in the load module  * @14\n* have the same RMODE regardless of whether SPLIT was specified   * @14\n* then we'll still have a single extent AND the BLMODLN field     * @14\n* will reflect the size of the load module or program object.     * @14\n* Thus the only 100% confident way to check for RMODE=SPLIT is to * @14\n* use the CSVINFO service and check the MODI_SPLIT flag of the    * @14\n* CSVMODI macro defined areas.                                    * @14\n*                                                                 * @14\n* We're just going to check the BLMODLN field in our logic for now* @14\n*                                                                 * @14\n******************************************************************* @14\n*\n*        Check module's RMODE\n*\n*        Note: Only RMODE=24 or RMODE=ANY for main entry point are\n*              acceptable\n*\n         TM    BLARMODE,BLLRMOD    LMOD RMODE=ANY ?\n         JO    ENV093              ...jif so, go set 31-bit flag\n         NI    FLAGS,X'FF'-F1#ECSA Reset 31-bit ECSA needed flag\n         J     ENV093A             Go check AMODE\nENV093   DS    0H\n         OI    FLAGS,F1#ECSA       Set 31-bit CSA/ECSA needed flag\n*\n*      Check module's AMODE (for setting SVC table entry point bit)\n*\n*      Note: AMODE=64 will be treated as AMODE=31 as far as the SVC\n*            table entry updte goes\n*\nENV093A  DS    0H\n         TM    BLARMODE,BLMAMOD    AMODE=ANY ?\n         JO    ENV093B             ...jif so, go set 31-bit flag\n         TM    BLARMODE,BLAM31     AMODE=31 ?\n         JO    ENV093B             ...jif so, go set 31-bit flag\n         TM    BLARMODE,BIT7       AMODE=64 ?\n         JO    ENV093B             ...jif so, go set 31-bit flag\n         NI    FLAGS,X'FF'-F1#AM31 else reset 31-bit EP flag\n         J     ENV093C             ...jif so, default to 24-bit\nENV093B  DS    0H\n         OI    FLAGS,F1#AM31       Set 31-bit EP flag\n*\n*        Check module for RENT\n*\nENV093C  DS    0H\n         TM    BLMATTR1,BLA1RENT   Module must be RENT\n         JO    ENV093D             ...jif RENT\n*\n*        Issue WTO that LMOD not RENT\n*\n         $RWTO MSG200A,WRITE=NO    Prime WTO area                   @14\n         MVC   MSG200AA,LMOD       Copy LMOD name                   @14\n         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14\n         LHI   R1,BADNRENT         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*\n*        Check module for REUS\n*\nENV093D  DS    0H\n         TM    BLMATTR1,BLA1REUS   Module must be REUS\n         JO    ENV093E             ...jif REUS\n*\n*        Issue WTO that LMOD not REUS\n*\n         $RWTO MSG201A,WRITE=NO    Prime WTO area                   @14\n         MVC   MSG201AA,LMOD       Copy LMOD name                   @14\n         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14\n         LHI   R1,BADNREUS         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*\n*        Check module for REFR\n*\nENV093E  DS    0H\n         TM    BLMATTR1+1,BLA1REFR Module must be REFR\n         JO    ENV093F             ...jif REFR\n*\n*        Issue WTO that LMOD not REFR\n*\n         $RWTO MSG202A,WRITE=NO    Prime WTO area                   @14\n         MVC   MSG202AA,LMOD       Copy LMOD name                   @14\n         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14\n         LHI   R1,BADNREFR         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*\n*        Check module for EXEC\n*\nENV093F  DS    0H\n         TM    BLMATTR1+1,BLA1EXEC Module must be EXEC\n         JO    ENV093G             ...jif EXEC\n*\n*        Issue WTO that LMOD not executable\n*\n         $RWTO MSG203A,WRITE=NO    Prime WTO area                   @14\n         MVC   MSG203AA,LMOD       Copy LMOD name                   @14\n         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14\n         LHI   R1,BADNEXEC         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*\n*        Check module for OVLY (not supported)\n*\nENV093G  DS    0H\n*        TM    BLMATTR1+1,BLA1OVLY Module cannot be OVLY            @14\n         TM    BLMATTR1,BLA1OVLY   Module cannot be OVLY            @14\n         JNO   ENV093H             ...jif not OVLY\n*\n*        Issue WTO that LMOD cannot be OVLY format\n*\n         $RWTO MSG204A,WRITE=NO    Prime WTO area                   @14\n         MVC   MSG204AA,LMOD       Copy LMOD name                   @14\n         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14\n         LHI   R1,BADNOVLY         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*\n*        Check module for SCTR (not supported)\n*\nENV093H  DS    0H\n         TM    BLMATTR1+1,BLA1SCTR Module cannot be SCTR\n         JNO   ENV093I             ...jif not OVLY\n*\n*        Issue WTO that LMOD cannot be SCTR format\n*\n         $RWTO MSG205A,WRITE=NO    Prime WTO area                   @14\n         MVC   MSG205AA,LMOD       Copy LMOD name                   @14\n         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14\n         LHI   R1,BADNSCTR         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*\n*        Check module for RMODE=SPLIT (not supported)\n*\nENV093I  DS    0H\n         SLR   R2,R2               Clear size to acquire register   @14\n         ICM   R2,B'0111',BLMODLN  Get size of module               @14\n         LTR   R2,R2               Was it possibly RMODE=SPLIT      @14\n         JNZ   ENV093J             ...jif not likely                @14\n*                                                                   @14\n*        LMOD was RMODE=SPLIT (not supported)                       @14\n*                                                                   @14\n         $RWTO MSG206A,WRITE=NO    Prime WTO area                   @14\n         MVC   MSG206AA,LMOD       Copy LMOD name                   @14\n         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14\n         LHI   R1,BADNSPLT         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*                                                                   @14\n*        Check module for TEST (not supported)                      @14\n*                                                                   @14\nENV093J  DS    0H                                                   @14\n         TM    BLMATTR1,BLA1TEST   TEST/TESTRAN ?                   @14\n         JNO   ENV093K             ...jif not TEST\n*                                                                   @14\n*        LMOD was TEST/TESTRAN (not supported)                      @14\n*                                                                   @14\n         $RWTO MSG207A,WRITE=NO    Prime WTO area                   @14\n         MVC   MSG207AA,LMOD       Copy LMOD name                   @14\n         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14\n         LHI   R1,BADNTEST         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*                                                                   @14\n*   Verify that module is on 1st library in concatenation sequence  @14\n*                                                                   @14\nENV093K  DS    0H                                                   @14\n         CLI   BLK,X'00'           1st library in concatenation ?   @14\n         JE    ENV093L             ...jif so                        @14\n         $RWTO MSG208A,WRITE=NO    Prime WTO area                   @14\n         MVC   MSG208AA,LMOD       Copy LMOD name                   @14\n         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14\n         LHI   R1,BADNCNCT         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*                                                                   @14\n*        Capture module size and entry point offset for reporting,  @14\n*        storage acquisition & possible SVC table update.           @14\n*                                                                   @14\n*        When through:                                              @14\n*                                                                   @14\n*        MODSIZE will contain size of load module                   @14\n*        MODEPOFF will contain entry point offset                   @14\n*                                                                   @14\nENV093L  DS    0H                                                   @14\n         XR    R2,R2               Clear work register              @14\n         ICM   R2,B'0111',BLMODLN  Capture size                     @14\n         ST    R2,MODSIZE           and save for later              @14\n*                                                                   @14\n*   Capture entry point offset for SVC table entry point adjustment @14\n*                                                                   @14\n         XR    R2,R2               Clear work register              @14\n         ICM   R2,B'0111',BLEPADDR Capture entry point offset       @14\n         ST    R2,MODEPOFF          and save for later              @14\n         J     ENVX               <skip rest for now - development> @14\n         AGO   .JH1022A                                             @14\n\n\n\n\n\n*                                                                   @14\n*        Check valid LOCK type combinations for TYPE_SVC            @14\n*                                                                   @14\nENV100   DS    0H                                                   @14\n         CLI   SVC_TYPE,TYPE1      Type 1 SVC ?                     @14\n         JNE   ENV110              ...jif not                       @14\n         TM    LOCKS_FLAGS,LOCKS_LOCAL Local lock requested ?       @14\n         JNO   ENV200              ...jif not                       @14\n* Local lock not valid for type 1 SVC specification                 @14\n         $RWTO MSG068E,WRITE=YES   Write the message                @14\n         $RWTO MSG900I,WRITE=YES   Write details message            @14\n         LHI   R15,BADLOCKS        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     ENVX                  & go return to caller          @14\nENV110   DS    0H                                                   @14\n         CLI   SVC_TYPE,TYPE2      Type 2 SVC ?                     @14\n         JNE   ENV120              ...jif not                       @14\n         J     ENV140              Any lock is possible for type 2  @14\nENV120   DS    0H                                                   @14\n         CLI   SVC_TYPE,TYPE3      Type 3 SVC ?                     @14\n         JE    ENV122              ...jif not                       @14\n         CLI   SVC_TYPE,TYPE4      Type 4 SVC ?                     @14\n         JNE   ENV130              ...jif not                       @14\n* Type 3/4 SVCs can request only LOCAL or LOCAL & CMS locks         @14\n* Type 3/4 SVCs must specify LOCAL if CMS is specified              @14\n*<resume> (above needs a little work here)                          @14\n\n\n\n\n\nENV122   DS    0H                                                   @14\n         TM    SVC_TYPE,X'FF'-LOCKS_LOCAL+LOCKS_CMS LOCAL+CMS locks @14\n         JZ    ENV140              ..jif only LOCAL/LOCAL+CMS locks @14\n         $RWTO MSG068E,WRITE=YES   Write the message                @14\n         $RWTO MSG901I,WRITE=YES   Write details message            @14\n         LHI   R15,BADLOCKS        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     ENVX                  & go return to caller          @14\nENV130   DS    0H                                                   @14\n         CLI   SVC_TYPE,TYPE6      Type 6 SVC ?                     @14\n         JNE   ENV140              ...jif not                       @14\n         CLI   LOCKS_FLAGS,X'00'   Any locks requested ?            @14\n         JE    ENV140                                               @14\n* No locks are valid for type 6 SVC specification                   @14\n         $RWTO MSG068E,WRITE=YES   Write the message                @14\n         $RWTO MSG902I,WRITE=YES   Write details message            @14\n         LHI   R15,BADLOCKS        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     ENVX                  & go return to caller          @14\n*                                                                   @14\n*        PARSE logic error - invalid SVC_TYPE value                 @14\n*                                                                   @14\nENV140   DS    0H                                                   @14\n         $RWTO MSG903E,WRITE=YES   Write the message                @14\n         ABEND 1001,DUMP           U1001 abend                      @14\n*                                                                   @14\n*        SVC LOCKS tests passed - check specific LOCKS authority    @14\n*                                                                   @14\n* Note: This code loops through the LOCK_BRXLE table checking the   @14\n*       requesting user's authority to specify the specific locks   @14\n*       requested. The loop will not be exited until all the valid  @14\n*       type locks have been checked unless no locks at all have    @14\n*       been requested.                                             @14\n*                                                                   @14\nENV200   DS    0H                                                   @14\n         CLI   LOCKS_FLAGS,X'00'   Any LOCKS specified at all ?     @14\n         JE    ENV300              ...jif not,                      @14\n*                                                                   @14\n*        Process the LOCKS authorization table entries              @14\n*                                                                   @14\n         LARL  R1,LOCK_BRXLE       R1 -> far away table             @14\n         LM    R7,R9,0(R1)         Loop control for BRXLE loop      @14\n         SLR   R6,R6                                                @14\nENV210   DS    0H                                                   @14\n         ICM   R6,B'0001',0(R7)    Put lock value in bits 24-31     @14\n         EX    R6,TMLOCK1          Was this lock requested ?        @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nTMLOCK1  TM    LOCKS_FLAGS,*-*     Test for specific LOCK           @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         JNO   ENV290              ...jif not                       @14\n*                                                                   @14\n*        LOCK entry matched one requested by the user so check      @14\n*        the user's authority to use the LOCK requested             @14\n*                                                                   @14\n         TM    7(R7),SPECIAL           user set this lock ?         @14\n         JE    ENV290              ...jif so, go check next lock    @14\n         TM    7(R7),AUTHUSER          user set this lock ?         @14\n         JE    ENV290              ...jif so, go check next lock    @14\n*                                                                   @14\n*        User does not have authority to set this lock              @14\n*                                                                   @14\n* Note: R7 -> LOCK_BRXLE table entry for which the user is not      @14\n*             authorized                                            @14\n*                                                                   @14\n         $RWTO MSG904E,WRITE=NO    Stage the WTO message            @14\n         MVC   MSG904EA,1(R7)      Install the LOCK requested       @14\n         $RWTO WTOD,WRITE=YES      Write the message                @14\n         LHI   R15,AUTHLOCK        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     ENVX                  & go return to caller          @14\nENV290   BRXLE R7,R8,ENV210        Loop through full table          @14\n*                                                                   @14\n*        To be here the user can set the keyword requested LOCKS &  @14\n*        we now need to check specific SVC type authority           @14\n*                                                                   @14\n* Note: Only SYSTEMS personnel an install Type 1 or Type 6 SVCs     @14\n*                                                                   @14\nENV300   DS    0H                                                   @14\n\n\n\n\n\n\n\n\n\n\n* SVCNO & LMOD are required parameters\n* Default is no locks NPRMPT=___,APF=___,AR=___\n\n\n\n\n\n\n\n\n\n\n\n\n.JH1022A ANOP                                                       @14\nENVX     DS    0H                                                   @14\n         LM    R14,R12,SAVE@L1+12  Restore caller's GPRs            @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n*        AGO   .JH1022B                                             @14\n*<resume here when ready>                                           @14\n\n         AGO   .JH1105B                                             @14\n\n\n*                                                                 * @14\n*        Check JCL PARMS before we attempt the SVCLIB OPEN        * @14\n*                                                                 * @14\nMAIN0110 DS    0H                                                   @14\n         L     R4,@INPARMS         Restore @ parameters for PARSE   @14\n         L     R15,=A(PARSE)       Parse routine address\n         BALR  R14,R15             Go parse parm into function,option\n         DC    S(L'SVCNO,SVCNO)    1st operand\n         DC    S(L'EPNAME,EPNAME)  2nd operand\n         DC    S(L'LOCKS,LOCKS)    3rd operand                      @08\n         DC    S(L'ENDOFDAY,ENDOFDAY) 4th operand\n         DC    S(L'USERID,USERID)  5th operand                      @05\n*EX 0,*                            <Debug only>\n*                                                                   @14\n*        Verify LOCKS parameter                                     @14\n*                                                                   @14\n*%FDIR: Need to retrieve SVC entry to check LOCKs for non type 2,   @14\n*%FDIR: 3 & 4 SVCs                                                  @14\n*                                                                   @14\n         CLI   LOCKS,C' '          Any lock ?                       @08\n*        JE    LOCK6               ...bif not                    @08@14\n         JE    SVCNO2              ...jif not                       @14\n         CLC   =C'C000 ',LOCKS     CMS+local ?                      @08\n         JE    LOCK4               ...jif so                        @08\n         CLC   =C'8000 ',LOCKS     Local lock ?                     @08\n*        JNE   PARMERR             ..jif other, abend condition  @08@14\n         JE    LOCK2               ...jif so, go set local lock     @14\n*                                                                   @14\n*        Invalid LOCKS parameter supplied - issue WTO & exit        @14\n*                                                                   @14\n         $RWTO MSG068E,WRITE=YES   Write the message                @14\n         LHI   R1,BADLOCKS         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\nLOCK2    DS    0H                                                   @14\n         MVI   LOCK#,SVCLL         Set local lock                @08@14\n*        J     LOCK6               Skip next instruction         @08@14\n         J     EOD10               Skip next instruction         @08@14\nLOCK4    MVI   LOCK#,SVCLL+SVCCMS  Set CMS+local                 @08@14\n*OCK6    DS    0H                                                @08@14\n*                                                                   @14\n*        Validate Goodnite time parameter is numeric                @14\n*                                                                   @14\nEOD10    DS    0H                                                   @14\n         CLI   ENDOFDAY,C' '       ENDOFDAY specified ?\n*        JE    INIT34              ...bif not                       @14\n         JE    SVCNO2              ...jif not                       @14\n         UNPK  DWD,=X'0F'          DWD=F0F0F0F0F0F0F0F0\n         MVN   DWD(4),ENDOFDAY     Move HHMM\n         CLC   DWD(4),ENDOFDAY     hhmm numeric ?\n*        JNE   PARMERR             ...bif not, go abend             @14\n         JE    EOD20               ...jif so, continue              @14\n*                                                                   @14\n*        Goodnight time (HHMM) parameter not numeric                @14\n*                                                                   @14\n         $RWTO MSG076E,WRITE=YES   Write the message                @14\n         LHI   R1,BADEOD1          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*                                                                   @14\n*        Validate Goodnite time parameter is in range               @14\n*                                                                   @14\nEOD20    DS    0H                                                   @14\n         MVC   ENDOFDAY,DWD        HHMM -> HHMM0000 (STIMERM)       @14\n         PACK  DWD,ENDOFDAY(4)     Make it decimal                  @14\n         CVB   R5,DWD              Make it binary                   @14\n         ST    R5,Parm_bin_Goodnight Save for later check           @14\n         CHI   R5,2359             > maximum allowed ?              @14\n         JH    EOD30               ...jif so                        @14\n         CHI   R5,1                < minimum allowed ?              @14\n         JL    EOD30               ...jif so                        @14\n         J     EOD40               ...continue EOD checks           @14\n*                                                                   @14\n*        Specified Goodnite time out of range                       @14\n*                                                                   @14\nEOD30    DS    0H                                                   @14\n         $RWTO MSG084E,WRITE=YES   Write the message                @14\n         LHI   R1,BADEOD2          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*                                                                   @14\n*        Verify Goodnight time > current time (current date)        @14\n*                                                                   @14\n*        Current time HHMM value in HOURS & MINUTES fields in       @14\n*        zoned decimal format.                                      @14\n*                                                                   @14\nEOD40    DS    0H                                                   @14\n         PACK  DWD,HOURS(4)        Pack current time (HHMM)         @14\n         CVB   R5,DWD              Make it binary                   @14\n         C     R5,Parm_bin_Goodnight Current > Goodnight time ?     @14\n         JLE   SVCNO2              ...jif not                       @14\n*                                                                   @14\n*        Specified Goodnite time earlier than current time          @14\n*                                                                   @14\n         $RWTO MSG088E,WRITE=YES   Write the message                @14\n         LHI   R1,BADEOD3          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*                                                                   @14\n*        Verify SVCNO parameter                                     @14\n*                                                                   @14\nSVCNO2   DS    0H                                                   @08\n         UNPK  DWD,=X'0F'          DWD=F0F0F0F0F0F0F0F0\n         MVN   DWD(L'SVCNO),SVCNO  Move nnn portion\n         CLC   DWD(L'SVCNO),SVCNO  nnn numeric ?\n*        JNE   PARMERR             ...jif not, go abend             @14\n         JE    SVCNO4              ...jif so, continue              @14\n*                                                                   @14\n*        SVC number parameter not numeric - issue WTO & exit        @14\n*                                                                   @14\n         $RWTO MSG072E,WRITE=YES   Write the message                @14\n         LHI   R1,BADSVCNO         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*                                                                   @14\n*        Verify SVC # is in 0-255 range                             @14\n*                                                                   @14\nSVCNO4   DS    0H                                                   @14\n         PACK  DWD,SVCNO           Pack SVC number (NNN)\n         CVB   R5,DWD               make it binary\n         STC   R5,SVC#               and save SVC# for later\n         CHI   R5,255              > 255 ?                          @14\n         JH    SVCNO6              ...jif so                        @14\n         CHI   R5,0                < 0 ?                            @14\n         JL    SVCNO6              ...jif so                        @14\n*\n*        T1/2/6 ESR slots are off limits\n*\n         CHI   R5,116              T1-ESR ?                         @14\n         JE    SVCNO5              ...jif so (illegal)              @14\n         CHI   R5,122              T2-ESR ?                         @14\n         JE    SVCNO5              ...jif so (illegal)              @14\n         CHI   R5,137              T6-ESR ?                         @14\n         JE    SVCNO5              ...jif so (illegal)              @14\n         J     SVCNO8              Continue                         @14\n*                                                                   @14\n*        Indicate ESR T1/T2/T6 SVC entries not supported            @14\n*                                                                   @14\nSVCNO5   DS    0H                                                   @14\n         $RWTO MSG036A,WRITE=YES   Write the message                @14\n         LHI   R1,BADESRT          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                  & go exit w/ return code       @14\n*                                                                   @14\n*        SVCNO parameter not in range 0-255 - issue WTO & exit      @14\n*                                                                   @14\nSVCNO6   DS    0H                                                   @14\n         $RWTO MSG080E,WRITE=YES   Write the message                @14\n         LHI   R1,BADSVCN2         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*\n*        Retrieve old SVC entry\n*\nSVCNO8   DS    0H                                                   @14\n         L     R3,CVTPTR(0,0)      R3->CVT                          @10\n         USING CVTMAP,R3           CVT addressability\n         L     R4,CVTABEND         R4->Secondary CVT\n         DROP  R3                  Drop CVT\n         USING SCVTSECT,R4         SCVT addressability\n         SLR   R5,R5               Clear for insert                 @14\n         ICM   R5,B'0001',SVC#     Insert SVC number                @14\n         SLL   R5,3                Multiply by 8\n         AL    R5,SCVTSVCT         Add origin of SVC table\n         USING SVCENTRY,R5         SVC entry addressability\n         ST    R5,SVCENTRY_PTR     Save entry address\n         TM    SVCTP,SVCTP34       Type 3/4 ?                       @14\n         JO    SVCNO10             ..jif so                         @14\n         TM    SVCTP,SVCTP2        Residual is Type 2. Was it ?     @14\n         JO    SVCNO10             ...jif so                        @14\n*                                                                   @14\n         DROP  R4                  Drop SCVT addressability         @14\n*                                                                   @14\n*        Existing SVC slot for SVC requested not Type 2/3/4         @14\n*                                                                   @14\n         $RWTO MSG029A,WRITE=YES   Write the message                @14\n         LHI   R1,BADSVCN1         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*                                                                   @14\n*        See if SVC # is ESR SVC for flag setting                   @14\n*                                                                   @14\nSVCNO10  DS    0H                                                   @14\n         MVI   RNAME,C' '          Blank out ENQ RNAME via          @07\n         MVC   RNAME+1(L'RNAME-1),RNAME ripple                      @07\n         MVC   RNAME(3),SVCNO      Complete SVCNO part of RNAME     @07\n*                                                                   @06\n*        ESR   PARM='109,IGX00nnn'                                  @06\n*                                                                   @06\n         CLI   SVC#,109            T3/4 ESR ?                       @06\n         JNE   SVCNO14             ...jif not                       @14\n*                                                                   @14\n*        Enforce ESR T3/4 naming conventions                        @14\n*                                                                   @14\n         UNPK  DWD,=X'0F'          DWD=F0F0F0F0F0F0F0F0             @06\n         MVN   DWD(5),EPNAME+3     Move 00nnn from IGX00nnn         @06\n         CLC   DWD(5),EPNAME+3     00nnn numeric ?                  @06\n         JE    SVCNO12             ...jif so                        @14\n*                                                                   @14\n*        ESR T3/4 SVC naming convention violation                   @14\n*                                                                   @14\n         $RWTO MSG092E,WRITE=YES   Write the message                @14\n         LHI   R1,BADSVCN3         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\nSVCNO12  DS    0H                                                   @14\n         MVC   RNAME+3(3),EPNAME+5 Complete ESR part or RNAME       @07\n         PACK  DWD,EPNAME+3(5)     Pack ESR number (NNN)            @06\n         CVB   R1,DWD               make it binary                  @06\n*        STC   R5,ESR#               and save ESR# for later     @06@12\n         STC   R1,ESR#               and save ESR# for later        @12\n         SLL   R1,3                Multiply by 8                    @06\n         L     R5,SVCEP            R5->ESR table                    @06\n         LA    R5,SVCENTRY+8(R1)   R5->ESR entry                    @06\n         ST    R5,SVCENTRY_PTR     Save ESR entry address           @06\n*                                                                   @06\nSVCNO14  DS    0H                                                @06@14\n         MVC   OLDENTRY,SVCENTRY   Save old SVC entry contents      @03\n*                                                                   @14\n         DROP  R5                  Drop SVC entry addressability    @14\n*                                                                   @14\n*%FDIR: Probably should enforce T1/2 SVC naming conventions here    @14\n*                                                                   @14\n*        OPEN the SVCLIB library for BLDL and LOAD processing       @14\n*                                                                   @14\n* Copy input DCB to area below the 16MB line                        @14\n         MVC   SVCLIB,INDCB#       Copy model DCB to work area      @14\n         MVC   W#OPNDI,X#OPNDI     Install OPEN input execute list  @14\n* OPEN the load library containing IGC24CHK                         @14\n         LA    R11,SVCLIB          R11 -> SVCLIB DCB                @14\n         USING IHADCB,R11          Obtain addressability            @14\n* OPEN the load library containing IGX24CHK code                    @14\n         OPEN  ((R11),INPUT),MODE=31,MF=(E,W#OPNDI) Open SVCLIB     @14\n         TM    DCBOFLGS,DCBOFOPN   Open successful ?                @14\n         JO    EPN10               ...jif OPEN good                 @14\n*                                                                   @14\n*        OPEN for SVCLIB library failed                             @14\n*                                                                   @14\n         $RWTO MSG044E,WRITE=YES                                    @14\n         LHI   R1,BADOPN1          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n* Update BLDLLIST for module name only                              @14\nEPN10    DS    0H                                                   @14\n         MVC   BLDLLIST,=H'1'      Will get only one member         @14\n         MVC   BLDLLL,=H'76'       Set LL to 76 bytes               @14\n         MVC   BLNAME,EPNAME       Install SVC module name          @14\n*                                                                   @14\n         BLDL  (R11),BLDLLIST      Get the directory entry          @14\n*                                                                   @14\n         LTR   R8,R15              Was BLDL OK ?                    @14\n         JZ    EPN20               ...jif so                        @14\n*                                                                   @14\n*        BLDL failed for EPNAME module                              @14\n*                                                                   @14\n         STM   R15,R0,DWD          Save BLDL reaturn/reason codes   @14\n         $RWTO MSG016A,WRITE=YES   Write the message                @14\n         $RWTO MSG016I,WRITE=NO    Prime the WTO area w/ message    @14\n*                                                                   @14\n* Format BLDL return & reason codes into message                    @14\n*                                                                   @14\n* Note: Only low-order bytes need to be formatted (1 in/2 out)      @14\n*                                                                   @14\n         MVC   MSG016IA,EPNAME     Install EPNAME                   @14\n* Format R15 (return code) byte                                     @14\n         LA    R14,DWD+3           R14 -> source area to convert    @14\n         LA    R15,MSG016IB        R15 -> target display area       @14\n         UNPK  0(3,R15),0(2,R14)   unpack into display area         @14\n         MVZ   0(2,R15),=XL17'00'  move zone into display area      @14\n         TR    0(2,R15),=C'0123456789ABCDEF' translate              @14\n         MVI   2(R15),C' '         overlay clobbered byte           @14\n* Format R0  (reason code) byte                                     @14\n         LA    R14,DWD+7           R14 -> source area to convert    @14\n         LA    R15,MSG016IC        R15 -> target display area       @14\n         UNPK  0(3,R15),0(2,R14)   unpack into display area         @14\n         MVZ   0(2,R15),=XL17'00'  move zone into display area      @14\n         TR    0(2,R15),=C'0123456789ABCDEF' translate              @14\n         MVI   2(R15),C' '         overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES      Write the message                @14\n* CLOSE SVCLIB                                                      @14\n         OI    W#OPNDI,X'80'       Indicate end of parameter list   @14\n         CLOSE ((R11)),            Close SVCLIB library             @14X\n               MODE=31,                                             @14X\n               MF=(E,W#OPNDI)                                       @14\n         LHI   R1,BADEPN1          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*                                                                   @14\n*        Verify EPNAME module has the correct attributes            @14\n*                                                                   @14\n* Note: We must honor AMODE & RMODE for the EPNAME module in the    @14\n*       respective SVC table entry                                  @14\n*                                                                   @14\n* Note: Acceptable modules must be marked EXEC, RENT, REFR, REUS    @14\n*       and OVLY=NO                                                 @14\n*                                                                   @14\n* Note: RMODE=SPLIT information is not available unless either the  @14\n*       CSVQUERY service is used or the LOAD macro expansion        @14\n*       requested EXTINFO. This may be needed in the future         @14\n*                                                                   @14\nEPN20    DS    0H                                                   @14\n         TM    BLMATTR1,BLA1EXEC   Executable ?                     @14\n         JNO   EPN25               ...jif not                       @14\n         TM    BLMATTR1,BLA1RENT   Reentrant ?                      @14\n         JNO   EPN25               ...jif not                       @14\n         TM    BLMATTR2,BLA1REFR   Refreshable ?                    @14\n         JNO   EPN25               ...jif not                       @14\n         TM    BLMATTR1,BLA1REUS   Reusable ?                       @14\n         JNO   EPN25               ...jif not                       @14\n         TM    BLMATTR1,BLA1OVLY   OVLY=YES ?                       @14\n         JO    EPN25               ...jif so                        @14\n         TM    BLMATTR1,BLA1SCTR   SCTR=YES ?                       @14\n         JO    EPN25               ...jif so                        @14\n         J     EPN30               Continue checks                  @14\n*                                                                   @14\n*        EPNAME module does not have correct attributes             @14\n*                                                                   @14\nEPN25    DS    0H                                                   @14\n         $RWTO MSG096A,WRITE=YES   Write the message                @14\n         $RWTO MSG096I,WRITE=YES   Write the message                @14\n\n\n         AGO   .JRH998\n         SR    R2,R2               Get size ...\n         ICM   R2,B'0111',BLMODLN  ... of module\n         MODESET KEY=ZERO          Go to key zero\n         GETMAIN RU,LV=(R2),LOC=ANY,SP=228\n         LR    R10,R1              Save @(IGX24CHK)\n         LOAD  DE=BLNAME,DCB=(R11),ADDR=(R10),SF=(E,LOAD#L)\n         MODESET KEY=NZERO         Revert to key 8\n* Close the load library\n         CLOSE ((R11)),MODE=31,MF=(E,W#OPNDI) Close SVCLIB library\n         SPACE 1\n         DROP  R11                 Finished with SVCLIB DCB\n.JRH998  ANOP\n\n\n* CLOSE SYSLIB                                                      @14\n         OI    W#OPNDI,X'80'       Indicate end of parameter list   @14\n         CLOSE ((R11)),            Close SVCLIB library             @14X\n               MODE=31,                                             @14X\n               MF=(E,W#OPNDI)                                       @14\n         LHI   R1,BADEPN2          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*                                                                   @14\n*        Attempt to OS LOAD the EPNAME module                       @14\n*                                                                   @14\n*        R11 -> SVCLIB DCB                                          @14\n*                                                                   @14\nEPN30    DS    0H                                                   @14\n         LOAD  DE=BLNAME,                                           @14X\n               DCB=(R11),                                           @14X\n               ERRET=EPN35,        Error routine                    @14X\n               SF=(E,LOAD4L)                                        @14\n         LR    R3,R0               Preserve R0 from LOAD            @14\n         LR    R4,R1               Preserve R1 from LOAD            @14\n         LTR   R15,R15             Any LOAD problems ?              @14\n         JZ    EPN40               ...jif not, continue checks      @14\n*                                                                   @14\n*        LOAD ERRET routine                                         @14\n*                                                                   @14\n* Note: When entered R1 contains the LOAD abend code and R15        @14\n*       contains the reason code associated with the abend. Exit    @14\n*       from this routine must include logic to close SVCLIB.       @14\n*                                                                   @14\nEPN35    DS    0H                                                   @14\n         ST    R1,DWD              Save R1  (abend code)            @14\n         ST    R15,DWD+4           Save R15 (reason code)           @14\n         $RWTO MSG100A,WRITE=NO    Install message template         @14\n         LA    R1,DWD              Source for hex conversion        @14\n         LA    R15,MSG100AA        Target for hex conversion        @14\n         UNPK  0(9,R15),0(5,R1)    Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         LA    R1,DWD+4            Source for hex conversion        @14\n         LA    R15,MSG100AB        Target for hex conversion        @14\n         UNPK  0(9,R15),0(5,R1)    Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES      Write the message                @14\n* CLOSE SVCLIB                                                      @14\n         OI    W#OPNDI,X'80'       Indicate end of parameter list   @14\n         CLOSE ((R11)),            Close SVCLIB library             @14X\n               MODE=31,                                             @14X\n               MF=(E,W#OPNDI)                                       @14\n         LHI   R1,BADEPN3          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*                                                                   @14\n*        CLOSE the SVCLIB library                                   @14\n*                                                                   @14\nEPN40    DS    0H                                                   @14\n         ST    R0,@LOADEP          Save @ of LOAD'd EPNAME          @14\n         OI    W#OPNDI,X'80'       Indicate end of parameter list   @14\n         CLOSE ((R11)),            Close SVCLIB library             @14X\n               MODE=31,                                             @14X\n               MF=(E,W#OPNDI)                                       @14\n*                                                                   @14\n         DROP  R11                 Finished with SYSLIB DCB         @14\n*                                                                   @14\n*        Check for RMODE=SPLIT for EPNAME module                    @14\n*                                                                   @14\n         SLR   R2,R2               Clear size to acquire register   @14\n         ICM   R2,B'0111',BLMODLN  Get size of module               @14\n         LTR   R2,R2               Was it possibly RMODE=SPLIT      @14\n         JNZ   EPN50               ...jif not likely                @14\n*                                                                   @14\n*        EPNAME was RMODE=SPLIT                                     @14\n*                                                                   @14\n         $RWTO MSG104E,WRITE=YES                                    @14\n         LHI   R1,BADEPN4          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*                                                                   @14\n* If the module is a program object with the RMODE(SPLIT)           @14\n* attribute the low-order three bytes contain zeros. To obtain the  @14\n* length and load point information for each segment, issue the     @14\n* CSVQUERY macro with the OUTXTLST parameter.                       @14\n*                                                                   @14\nEPN50    DS    0H                                                   @14\n* Need to return to caller with good return code at this point      @14\n\n\n\n\n\n*                                                                   @14\n*        Insert ESR SVC return code in display format (4 bytes)     @14\n*                                                                   @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG112SB        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n*                                                                   @14\n***********************************************************************\n*                                                                     *\n*        FUNCTION=INSTALL                                             *\n*                                                                     *\n*        User is authorized to install the EPNAME module as an SVC  @14\n*        so acquire the proper ENQueue to protect us from someone   @14\n*        else trying to install the same standard or ESR SVC #.     @14\n*                                                                   @14\n***********************************************************************\nINSTALL  MVC   SVCULIST(MODELS_L),MODELS   MF=L macros\n*                                                                   @11\n*        ESR   PARM='109,IGX00nnn' ?                             @11@14\n*                                                                   @11\nINSTALL0 DS    0H                                                   @14\n         CLI   SVC#,109            T3/4-ESR                      @11@14\n         JNE   INSTALL1            ...jif not                       @11\n         MVC   SVCULIST(MODELESR_L),MODELESR  MF=L macro            @11\n         MVC   SVCUESR#,ESR#   Place 1-byte ESR# in SVCUPDTE plist  @11\nINSTALL1 DS    0H                                                   @11\n         MVC   SVCULOCK,LOCK#      Move lock indicators             @08\n*        ENQ   (,SVCNO),MF=(E,ENQL) Serialize update                @13\n         ENQ   (,RNAME),MF=(E,ENQL) Serialize update                @13\n         LTR   R15,R15             ENQ OK ?\n         JZ    INSTALL4            ...jif okay                      @14\n*                                                                   @14\n*        ENQUEUE for SVCUPDTE_nnn or SVCUPDTE_109nnn failed         @14\n*                                                                   @14\n*        Because of this failure we need to free resources, set     @14\n*        our return code and then exit.                             @14\n*                                                                   @14\n         MODESET KEY=NZERO,MODE=PROB  Return to problem K8 state    @14\n         $RWTO MSG012I,WRITE=YES   Write the message                @14\n         LHI   R15,BADENQ          Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     EXIT                  & go exit w/ return code       @14\n*                                                                   @14\n*        We now need to obtain the necessary CSA/ECSA storage for   @14\n*        the installation of the SVC. We need to use the RMODE of   @14\n*        the EPNAME module to drive the allocation of either <16MB  @14\n*        CSA or >16MB ECSA                                          @14\n*                                                                   @14\n         AGO   .JRH2                                                @14\nINSTALL4 LOAD  EPLOC=EPNAME,       Name of SVC routine                 X\n               GLOBAL=YES,          Load into SP241                    X\n               SF=(E,LOAD4L)\n.JRH2    ANOP                                                       @14\nINSTALL4 DS    0H                                                   @14\n         MODESET KEY=ZERO          We need Key0 for this            @14\n         SLR   R2,R2               Clear size to copy register      @14\n         ICM   R2,B'0111',BLMODLN  Get size to acquire              @14\n         TM    BLARMODE,BLRMANY    RMODE=ANY ?                      @14\n         JO    INSTALL5            ...jif so, go get 31-bit CSA     @14\n*%FDIR: See BLDLLOA2/T code\n* Get 24-bit CSA (SP241 K0)                                         @14\n         STORAGE OBTAIN,           Get 24-bit CSA                   @14X\n               LENGTH=((R2)),                                       @14X\n               LOC=24,                                              @14X\n               SP=241,                                              @14X\n               KEY=0,                                               @14X\n               COND=YES                                             @14\n         J     INSTALL6            Go to resume point               @14\nINSTALL5 DS    0H                                                   @14\n         STORAGE OBTAIN,           Get 31-bit CSA                   @14X\n               LENGTH=((R2)),                                       @14X\n               LOC=31,                                              @14X\n               SP=241,                                              @14X\n               KEY=0,                                               @14X\n               COND=YES                                             @14\nINSTALL6 DS    0H                                                   @14\n         LTR   R15,R15             Did we get the CSA/ECSA          @14\n         JZ    INSTALL7            ...jif so, go copy module        @14\n*                                                                   @14\n*        CSA/ECSA request failed                                    @14\n*                                                                   @14\n         ST    R15,DWD             Save STORAGE return code         @14\n         MODESET KEY=NZERO,MODE=PROB  Return to problem K8 state    @14\n         $RWTO MSG120A,WRITE=NO    Stage the message template       @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG120AA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES      Write the message                @14\n\n\n\n         LHI   R15,BADENQ          Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     EXIT                  & go exit w/ return code       @14\n*                                                                   @14\n*        Copy EPNAME module in PVT to CSA/ECSA                      @14\n*                                                                   @14\nINSTALL7 DS    0H                                                   @14\n         ST    R1,@CSAEPN          Save @ of obtained CSA/ECSA      @14\n         LR    R0,R1               R0 -> copy target area address   @14\n         SLR   R1,R1               Clear size to copy register      @14\n         ICM   R1,B'0111',BLMODLN  Get size of module               @14\n         L     R14,@COPYEPN        R14 = source copy address        @14\n         LR    R15,R1              R15 = copy length                @14\n         MVCL  R0,R14              Copy EPNAME module to CSA/ECSA   @14\n*\n*        Sort out \"true\" entry point address in CSA/ECSA copy\n*\n\n\n\n\n\n\n\n         AGO   .JRH1A\n\nFollowing is from IGXFE:\n\n* SORT OUT THE ENTRY POINT ADDRESS\nDOINSTAL EQU   *\n         SR    R2,R2                    * GET @(EP) RELATIVE ...\n         ICM   R2,B'0111',BLEPADDR      * ... TO START OF MODULE\n         AR    R10,R2                   * COMPUTE ABSOLUTE ENTRY POINT\n         O     R10,AMODE31              * SET AMODE 31 BIT\n* AND INSTALL THE INTERCEPT ADDRESS IN THE ESR TABLE\nESRUPDTE EQU   *\n         MODESET KEY=ZERO,MODE=SUP      * KEY ZERO/SUPERVISOR STATE\n         ENQ   (SYSZSVC,TABLE,E,L'TABLE,SYSTEM),RET=NONE\n         LRA   R2,SVCEP                 * R2 = REAL ADDRESS OF ESRT\n         BC    8,DOLURA1                * JUMP IF OK TO PROCEED\n         LA    R8,4                     * ELSE ...\n         B     INSTDONE                 * ... REJECT UPDATE\nDOLURA1  EQU   *\n         LURA  R3,R2                    * CHECK REAL ADDRESS ...\n         CLC   4(8,R3),IGX00024         * ... POINTS WHERE WE EXPECT\n         BE    DOSTURA1                 * JUMP IF OK TO PROCEED\n         LA    R8,8                     * ELSE ...\n         B     INSTDONE                 * ... REJECT UPDATE\nDOSTURA1 EQU   *\n         STURA R10,R2                   * UPDATE ESR TABLE ENTRY\n         SLR   R8,R8                    * AND SIGNAL UPDATE OK\nINSTDONE EQU   *\n         DEQ   (SYSZSVC,TABLE,L'TABLE,SYSTEM),RET=NONE\n         MODESET KEY=NZERO,MODE=PROB    * KEY 8/PROBLEM STATE\n         LTR   R8,R8                    * ESR TABLE UPDATE OK ?\n         BNZ   BADUPDTE                 * NOPE\n         SR    R9,R9                    * ALL OK, SO SET RC = X\n* SUCCESS - TELL US ALL ABOUT IT\n         MVC   X24I01I+16(8),BLNAME     * MOVE IN MODULE NAME\n         LR    R3,R10                   * COPY NEW ADDRESS\n         SLDL  R2,4                     * SHIFT IN A DUMMY SIGN NIBBLE\n         STM   R2,R3,TEMP8              * STORE IT AS PSEUDO-PACKED\n         UNPK  X24I01I+51(8),TEMP8+3(5) * UNPACK NEW ADDRESS\n         NC    X24I01I+51(8),ZONEMASK   * CONVERT ZONES TO ZEROS\n         TR    X24I01I+51(8),HEXTAB     * CONVERT TO EBCDIC\n         SR    R0,R0                    * CLEAR RX (NO CONSOLE ID)\nX24I01I  WTO   'X24I01I aaaaaaaa successfully installed at xxxxxxxx',\n               ROUTCDE=2,DESC=3\n         B     RETURN\n         DROP  R11                      * FINISHED WITH ESR TABLE\n.JRH1A   ANOP\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n         LR    R6,R0               R6->Entry point\n*\n         LA    R9,DWD              R9 -> DWS subset                 @14\n*        LA    R12,DWD             Inform assembler                 @14\n*        SYNCH UPDATE,STATE=SUPV,RESTORE=YES Update SVC table entry @14\n         BASR  R10,0               Macro internal addressability    @14\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"    @14\n         LARL  R15,UPDATE          Resolve UPDATE entry point       @14\n         SYNCH (R15),              Update                           @14X\n               STATE=SUPV,          SVC table                       @14X\n               RESTORE=YES           entry                          @14\n         DROP  R10             Drop internal macro addressability   @14\n*\n         CLI   ENDOFDAY,C' '       Good night time specified ?      @04\n         JNE   CHKUSER             ...bif so                        @04\n         CLI   USERID,C' '         Userid screening requested ?     @05\n         JNE   CHKUSER             ...Jif so                        @05\n         AGO   .JH14077A                                            @14\n* The following code has been rendered obsolete by the @14 change   @14\n* since we use BLDL/LOAD from only the SVCLIB library and therefore @14\n* neither LPA nor LLA will be searched for EPNAME. Previously if    @14\n* LOADed EPNAME module was determined to be in xLPA we would simply @14\n* exit without updating the SVC table. With the @14 change we no    @14\n* longer perform GLOBAL=YES LOAD operations so this code is of no   @14\n* use.                                                              @14\n*                                                                   @01\n*        Check if the module just loaded was in LPA.                @01\n*        If it was, exit immediately.                               @01\n*                                                                   @01\nCHECKLPA L     R2,PSATOLD-PSA(0,0) My TCB                        @01@10\n         USING TCB,R2                                               @01\n         L     R2,TCBLLS           R2->last LLE                     @01\n         USING LLE,R2                                               @01\n         L     R2,LLECDPT          R2->Corresponding CDE or LPDE    @01\n         USING CDENTRY,R2                                           @01\n* Note: Following test also handles dynamic LPA case                @09\n         TM    CDATTR,CDNIP        LPA module ?                     @01\n         JNO   CHKUSER             ...bif not, check for userid     @05\n         CLC   EPNAME,CDNAME       Right module ?                   @01\n         JNE   CHKUSER             ...bif not, check for userid     @05\n         CL    R6,CDENTPT          Right entry point address ?      @01\n         JE    EXIT                ...bif so, make like trees       @01\n.JH14077A ANOP                                                      @14\n*                                                                   @05\n******************************************************************* @05\n*                                                                 * @05\n*        FUNCTION=CHKUSER                                         * @05\n*                                                                 * @05\n*        Allocate storage in SQA, move the user-ID screening code * @05\n*        into it and set its address into the SVC table.          * @05\n*                                                                 * @05\n******************************************************************* @05\n*                                                                   @05\nCHKUSER  CLI   USERID,C' '         Userid screening requested ?     @05\n         JE    WAIT                ...bif not                       @05\n*                                                                   @05\n         GETMAIN RU,SP=245,LV=CHKU500L,LOC=ANY SQA space            @05\n         ST    R1,SQA_ADDR         Work-area in SQA                 @05\n*                                                                   @05\n         MODESET EXTKEY=ZERO                                        @05\n*        MVC   0(CHKU500L,R1),CHKU500 Move screening code to SQA @05@14\n         LARL  R4,CHKU500          Resolve screening model code     @14\n         MVC   0(CHKU500L,R1),0(R4)   Move screening code to SQA @05@14\n*\n         USING CHKU500,R1                                           @05\n         ST    R6,CHKU500N         @ new SVC                        @05\n         MVC   CHKU500O,OLDENTRY   @ old SVC                        @05\n         MVC   CHKU500U,USERID     User-ID                          @05\n         MVC   CHKU500#,SVCNO      SVC number                       @05\n         DROP  R1                  CHKU500 in SQA                   @05\n         LR    R6,R1               SVC screening code               @05\n         BSM   R6,0                set AMODE bit                    @05\n         MODESET EXTKEY=ZERO                                        @05\n*                                                                   @05\n*        LA    R12,DWD             R12->work area                @05@14\n         LA    R9,DWD              R9 -> DWS portion                @14\n*        SYNCH UPDATE,STATE=SUPV,RESTORE=YES Restore old SVC entr@05@14\n         BASR  R10,0               Macro internal addressability    @14\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"    @14\n         LARL  R15,UPDATE          Resolve UPDATE entry point       @14\n         SYNCH (R15),              Update                           @14X\n               STATE=SUPV,          SVC table entry                 @14X\n               RESTORE=YES           entry                          @14\n         DROP  R10             Drop internal macro addressability   @14\n.JH1105B ANOP                                                       @14\n*\n***********************************************************************\n*                                                                     *\n*        FUNCTION=WAIT                                                *\n*                                                                     *\n*        This routine sets-up a timer for automatic shut-down         *\n*        (if user specified a \"good-night\" time).  It then waits      *\n*        on the communication ECB which is posted by a STOP           *\n*        command or when the timer interval expires.                  *\n*                                                                     *\n***********************************************************************\n*\nWAIT     MODESET EXTKEY=ZERO       Enter Key 0\n*\n         L     R2,PSAAOLD-PSA(0,0) My ASCB                          @10\n         OI    ASCBRCTF-ASCB(R2),ASCBTOFF   Prevent S522\n*\n         MODESET KEY=NZERO         Return to TCB key\n*\n         EXTRACT COMMADDR,FIELDS=COMM,MF=(E,EXTRACTL)\n         L     R2,COMMADDR         ECB/CIB pointers\n*\n         CLI   ENDOFDAY,C'0'       Goodnight time specified ?\n         JL    SET_RCVY            ...bif not, don't set STIMER\n         LARL  R4,GOODNITE         Resolve GOODNITE exit address    @14\n*        STIMERM SET,                                               @14\n*              ID=TIMER_ID,        token                            @14\n*              EXIT=GOODNITE,      Exit routine                     @14\n*              LT=ENDOFDAY,        hhmmss                           @14\n*              PARM=(R2),          ECB/CIB pointers                 @14\n*              MF=(E,STIMER_L)                                      @14\n         STIMERM SET,                                                  X\n               ID=TIMER_ID,        token                               X\n               EXIT=(R4),          Exit routine                     @14X\n               LT=ENDOFDAY,        HHMMSSth                         @14X\n               PARM=(R2),          ECB/CIB pointers                    X\n               MF=(E,STIMER_L)\n*                                                                   @03\n*ET_RCVY ESTAE CANCEL,CT,                                        @03@14\nSET_RCVY DS    0H                                                @03@14\n         LARL  R4,CANCEL           Resolve CANCEL exit address      @14\n         ESTAE ((R4)),CT,                                        @03@14X\n               PARAM=SAVE2,        ESTAE save area                  @03X\n               TERM=YES,           Trap CANCEL commands             @03X\n               MF=(E,ESTAEL)                                        @03\n*\n         L     R1,0(,R2)           R1->Comm ECB\n         WAIT  1,ECB=(R1),LONG=YES WAIT for a STOP command\n*\n         ESTAE 0               Do note trap CANCEL command again    @03\n*                                                                   @03\n******************************************************************* @03\n*                                                                 * @03\n*        FUNCTION=REMOVE                                          * @03\n*                                                                 * @03\n*        This routine re-instates the initial SVC entry saved in  * @03\n*        the OLDENTRY area, frees up SQA storage and then returns * @03\n*                                                                 * @03\n******************************************************************* @03\n*                                                                   @03\n         L     R6,OLDENTRY         R6->old SVC slot entry specifics @03\n*        LA    R12,DWD             R12->work area                @03@14\n         LA    R9,DWD              R9 -> DWS portion             @03@14\n*        SYNCH UPDATE,STATE=SUPV,RESTORE=YES Restore old SVC entr@03@14\n         BASR  R10,0               Macro internal addressability    @14\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"    @14\n         LARL  R15,UPDATE          Resolve UPDATE entry point       @14\n         SYNCH (R15),              Restore old                      @14X\n               STATE=SUPV,          SVC table                       @14X\n               RESTORE=YES           entry                          @14\n         DROP  R10             Drop internal macro addressability   @14\n         ST    R15,RETCODE         Set return code                  @03\n*                                                                   @03\n         ICM   R1,B'1111',SQA_ADDR Work-area in SQA                 @05\n         JZ    EXIT                ...bif not, make like trees      @05\n         FREEMAIN RU,SP=245,A=(R1),LV=CHKU500L SQA space            @05\n*\nEXIT     DS    0H                                                   @14\n         L     R9,RETCODE          Restore return code for caller   @14\n         STORAGE RELEASE,                                           @14X\n               LENGTH=DWSLEN,                                       @14X\n               ADDR=(R13)          Free DSA storage                 @14\n         LR    R15,R9              Set return code for caller       @14\n         PR                    Return to caller via Linkage Stack   @14\n*                                                                   @14\n         TITLE 'SYSC000 - Check system level priviledges'           @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n*        Check for system priviledges to bypass some checks       * @14\n*                                                                 * @14\n* This routine is responsible for setting the following flag(s):  * @14\n*                                                                 * @14\n* MYFLAGS.SPECIAL if user has global \"special\" priviledges        * @14\n*                                                                 * @14\n* Note: A user with RACF \"special\" priviledges is exempted from   * @14\n*       the profile authorization check but the profile for any   * @14\n*       SVC slot being targeted must still exist due to the       * @14\n*       potential impact on the system by a mistyped SVC or ESR   * @14\n*       number.                                                   * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nSYSC000  DS    0H                                                   @14\n         STM   R14,R12,SAVE@L1+12  Save caller's GPRs               @14\n*                                                                   @14\n*        See if invoking user posseses RACF global \"special\"        @14\n*        privileges                                                 @14\n*                                                                   @14\n         L     R2,PSATOLD-PSA(0,0) R2 -> our TCB                    @14\n         USING TCB,R2                                               @14\n         ICM   R2,B'1111',TCBSENV  R2 -> ACEE ?                     @14\n         JNZ   SYSC010             ...jif so                        @14\n         DROP  R2                                                   @14\n         L     R2,PSAAOLD-PSA(0,0) R2 -> our ASCB                   @14\n         USING ASCB,R2                                              @14\n         L     R2,ASCBASXB         R2 -> our ASXB                   @14\n         DROP  R2                                                   @14\n         USING ASXB,R2                                              @14\n         L     R2,ASXBSENV         R2 -> ACEE in effect             @14\n         DROP  R2                                                   @14\n*                                                                   @14\n*        ACEE found, test global SPECIAL attribute                  @14\n*                                                                   @14\nSYSC010  DS    0H                                                   @14\n         LTR   R2,R2               ACEE present ?                   @14\n         JZ    SYSC020             ...jif not (strange condition!)  @14\n         USING ACEE,R2                                              @14\n         MVI   EUSER,C' '          Set field to blanks              @14\n         MVC   EUSER+1(L'EUSER-1),EUSER via ripple                  @14\n         SLR   R3,R3               Clear work register              @14\n         ICM   R3,B'0001',ACEEUSRL Capture length                   @14\n         BCTR  R3,0                Make length EXecutable           @14\n         EX    R3,CAPEUSR          Save ACEEUSRI for displays       @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nCAPEUSR  MVC   EUSER(*-*),ACEEUSRI Copy execution ACEE userid       @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         TM    ACEEFLG1,ACEESPEC   RACF \"SPECIAL\" userid ?          @14\n         JNO   SYSC020                                              @14\n*                                                                   @14\n         DROP  R2                                                   @14\n*                                                                   @14\n*        Invoking user is RACF global \"SPECIAL\" userid              @14\n*                                                                   @14\n         OI    MYFLAGS,SPECIAL     Flag as global \"SPECIAL\"         @14\n*                                                                   @14\n*        Issue informational WTO for RACF global \"SPECIAL\" userid   @14\n*                                                                   @14\n         $RWTO MSG701I,WRITE=NO                                     @14\n         MVC   MSG701IA,EUSER      Install execution ACEE userid    @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         J     SYSC999              and MLT                         @14\nSYSC020  DS    0H                                                   @14\nSYSC999  DS    0H                                                   @14\nSYSCX    DS    0H                                                   @14\n         LM    R14,R12,SAVE@L1+12  Restore caller's GPRs            @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n         AGO   .JH0811B\n         TITLE 'Check_SVCLIB - Check SVCLIB allocation items'       @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n* Check attributes of the SVCLIB allocation                       * @14\n*                                                                 * @14\n* This routine is responsible for the following:                  * @14\n* 1) Make sure the SVCLIB DDname was provided                     * @14\n* 2) Capture SVCLIB data set name & volser from SWA data          * @14\n* 3) Make sure SVCLIB data set is on a single disk volume         * @14\n* 4) Make sure SVCLIB DDname did not supply a member name         * @14\n* 5) Make sure SVCLIB DSORG is PO/POE                             * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nCheck_SVCLIB DS 0H                                                  @14\n         STM   R14,R12,SAVE@L1+12  Save caller's GPRs               @14\n*                                                                   @14\n*        Make sure SVCLIB was provided                              @14\n*                                                                   @14\n         L     R1,PSATOLD-PSA(0,0) R1 -> current TCB                @14\n         L     R1,TCBTIO-TCB(R1)  R1 -> TIOT                        @14\n         LA    R1,TIOELNGH-TIOT1(R1)  R1 -> 1st DDname in TIOT      @14\nCheck_SVCLIB_010 DS 0H                                              @14\n         CLI   0(R1),X'00'         End of TIOT ?                    @14\n         JE    Check_SVCLIB_020    ...jif so, SYSLIB DD missing     @14\n* Note: We reall need a new message for above                       @14\n         CLC   =CL8'SVCLIB',TIOEDDNM-TIOELNGH(R1) SVCLIB DD ?       @14\n         JE    Check_SVCLIB_030    ...jif so                        @14\n         XR    R2,R2               Clear for insert                 @14\n         IC    R2,0(R1)            R2 = TIOELNGH for current entry  @14\n         AR    R1,R2               Point to next TIOT DD entry      @14\n         J     Check_SVCLIB_010     and go check it out             @14\n*                                                                   @14\n*        SVCLIB DD not found - issue WTO & go exit                  @14\n*                                                                   @14\nCheck_SVCLIB_020 DS 0H                                              @14\n         $RWTO MSG004A,WRITE=YES   Write message                    @14\n         LHI   R1,BADENV3          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     Check_SVCLIB_X        & go exit w/ return code       @14\n*                                                                   @14\n*        SVCLIB DD was found - get JFCB for SVCLIB DD for tests     @14\n*                                                                   @14\n*        Note: R1 -> SVCLIB TIOT entry on entry to this label       @14\n*                                                                   @14\nCheck_SVCLIB_030 DS 0H                                              @14\n         LA    R9,EPA              R9 -> EPA                        @14\n         ST    R9,SWEPAPTR         Save in EPA pointer field        @14\n*                                                                   @14\n         USING ZB505,R9            EPA addressability               @14\n*                                                                   @14\n         XC    SWAEPA,SWAEPA       Initialize the EPA               @14\n         MVC   SWVA,TIOEJFCB-TIOELNGH(R1) @JFCB token to EPA        @14\n         XC    SWAREQRC,SWAREQRC   Clear return code work area      @14\n         SWAREQ FCODE=RL,                                           @14X\n               EPA=SWEPAPTR,                                        @14X\n               UNAUTH=YES,                                          @14X\n               MF=(E,SWAPARMS)                                      @14\n         ST    R15,SWAREQRC        Save for debugging               @14\n         LTR   R15,R15             Was function successful ?        @14\n         JZ    Check_SVCLIB_040    ...jif so, go copy JFCB          @14\n*                                                                   @14\n*        SWAREQ encountered an error - just issue WTO with R15      @14\n*                                                                   @14\n*        Note: R15 from SWAREQ service is in SWAREQRC field         @14\n*                                                                   @14\n         $RWTO MSG048S,WRITE=NO                                     @14\n         LA    R1,SWAREQRC         Source for hex conversion        @14\n         LA    R15,MSG048SA        Target for hex conversion        @14\n         UNPK  0(9,R15),0(5,R1)    Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES      Write the completed message      @14\n         LHI   R1,BADSWA           Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     Check_SVCLIB_X        & go exit w/ return code       @14\n*                                                                   @14\n*        Capture SVCLIB data set name & volume                      @14\n*                                                                   @14\nCheck_SVCLIB_040 DS 0H                                              @14\n         L     R14,SWBLKPTR        R14 -> JFCB                      @14\n         MVC   JFCB,0(R14)         Copy JCFB to DWS for debugging   @14\n         LA    R1,JFCB             R1 -> copied JFCB (from SWA)     @14\n*                                                                   @14\n         DROP  R9                  Drop EPA addressability          @14\n*                                                                   @14\n         USING IEFJFCBN,R1         JFCB addressability              @14\n*                                                                   @14\n         MVC   DSN,JFCBDSNM        Capture SVCLIB dsn for later     @14\n         MVC   VOL,JFCBVOLS        Capture 1st volume               @14\n*                                                                   @14\n*        Make sure SVCLIB data set exists on a single disk volume   @14\n*                                                                   @14\n         CLI   JFCBNVOL,X'01'      On single disk volume ?          @14\n         JE    Check_SVCLIB_050    ...jif so                        @14\n*                                                                   @14\n*        SVCLIB library is multi-volume - issue WTO & exit          @14\n*                                                                   @14\n         $RWTO MSG060E,WRITE=YES   Write the message                @14\n         LHI   R1,BADMVOL          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     Check_SVCLIB_X        & go exit w/ return code       @14\n*                                                                   @14\n*        Make sure SVCLIB member name not specified                 @14\n*                                                                   @14\nCheck_SVCLIB_050 DS 0H                                              @14\n         TM    JFCBELNM,X'FF'-X'40' Member name on SVCLIB ?         @14\n         JZ    Check_SVCLIB_060    ...jif not, continue checks      @14\n*                                                                   @14\n*        SVCLIB DDname specified a member name - issue WTO & exit   @14\n*                                                                   @14\n         $RWTO MSG064E,WRITE=YES   Write the message                @14\n         LHI   R1,BADMEM1          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     Check_SVCLIB_X        & go exit w/ return code       @14\n*                                                                   @14\n*        Make sure SVCLIB is DSORG=PO/POE                           @14\n*                                                                   @14\nCheck_SVCLIB_060 DS 0H                                              @14\n         TM    JFCDSRG1,JFCORGPO   PO/POU DSORG ?                   @14\n         JO    Check_SVCLIB_070    ...jif so, skip error code       @14\n*                                                                   @14\n*        DSORG not PO/POE for SVCLIB - issue WTO & exit             @14\n*                                                                   @14\n         $RWTO MSG052E,WRITE=YES   Write the messge                 @14\n         LHI   R1,BADDSORG         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     Check_SVCLIB_X      Go make like trees               @14\n*                                                                   @14\n*        Make sure SVCLIB is RECFM=U                                @14\n*                                                                   @14\nCheck_SVCLIB_070 DS 0H                                              @14\n         TM    JFCRECFM,JFCUND     RECFM=U ?                        @14\n         JO    Check_SVCLIB_080    ...jif so, skip error code       @14\n*                                                                   @14\n         DROP  R1                  Lose JFCB addressability         @14\n*                                                                   @14\n*        RECFM not U for SVCLIB - issue WTO & exit                  @14\n*                                                                   @14\n         $RWTO MSG056E,WRITE=YES   Write the message                @14\n         LHI   R1,BADRECFM         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     Check_SVCLIB_X      Go make like trees               @14\n*                                                                   @14\n*        Additional SVCLIB library checks go here                   @14\n*                                                                   @14\nCheck_SVCLIB_080 DS 0H                                              @14\n*                                                                   @14\nCheck_SVCLIB_X DS 0H                                                @14\n         LM    R14,R12,SAVE@L1+12  Restore caller's GPRs            @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n.JH0811B ANOP\n         TITLE 'DATETIME - Get date && time for headers'            @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n* DATETIME                                                        * @14\n*                                                                 * @14\n*        This routine is responsible for capturing the current    * @14\n*        date and time for report headers.                        * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nDATETIME DS    0H                                                   @14\n         STM   R14,R12,DATETIMESAVE+12 Save caller's GPRs           @14\n         STCK  STCKAREA            Get \"\"common\" time for algorithm @14\n*                                                                   @14\n*        Send through IBM algorithm circa 1985                      @14\n*                                                                   @14\n         L     R15,CVTPTR          R15 -> CVT                       @14\n         L     R15,CVTEXT2-CVTMAP(,R15) Point at CVT extension      @14\n         USING CVTXTNT2,R15                                         @14\n         LM    R0,R1,STCKAREA      Load TOD clock value             @14\n         AL    R0,CVTLDTO          Add hi-order word                @14\n         AL    R1,CVTLDTO+4        Add low-order word               @14\n         JC    12,*+8              Carry ? Branch if not            @14\n         AL    R0,=F'1'            Add carry                        @14\n         SL    R0,CVTLSO           Subtract hi-order word           @14\n         SL    R1,CVTLSO+4         Subtract low-order word          @14\n         JC    3,*+6               Borrow ? Branch if not           @14\n         BCTR  R0,0                Subtract the borrow              @14\n         DROP  R15                 CVTXTNT2                         @14\n         STM   R0,R1,STCK_Adjusted Save for STCKCONV                @14\n*                                                                   @14\n*        Format current date and time located in the field named    @14\n*        STCK_Adjusted into a 24-character string located in the    @14\n*        field named OUTAREA in the following format:               @14\n*                                                                   @14\n*           hhmmssthmiju0000MMDDYYYY                                @14\n*                                                                   @14\n*           where (left to right):                                  @14\n*                                                                   @14\n*            hh - is hours, based on a 24-hour clock                @14\n*            mm - is minutes                                        @14\n*            ss - is seconds                                        @14\n*            t  - is tenths of a second                             @14\n*            h  - is hundredths of a second                         @14\n*            m  - is milliseconds                                   @14\n*            i  - is ten-thousandths of a second                    @14\n*            j  - is hundred-thousandths of a second                @14\n*            u  - is microseconds                                   @14\n*            0000 - is <filler>                                     @14\n*            MM - is current month (01-12)                          @14\n*            DD - is current day of month                           @14\n*            YYYY - is current year                                 @14\n*                                                                   @14\n         LAM   R1,R1,=F'0'             Assure AR1 is 0              @14\n         STCKCONV STCKVAL=STCK_Adjusted,                            @14X\n               CONVVAL=OUTAREA,                                     @14X\n               TIMETYPE=DEC,                                        @14X\n               DATETYPE=MMDDYYYY,                                   @14X\n               MF=(E,STCKCONVL)                                     @14\n*                                                                   @14\n*        Unpack OUTAREA and store into TIMEDATE area the result of  @14\n*        the STCKCONV.                                              @14\n*                                                                   @14\n*        Note: The STCKCONV output is packed decimal *unsigned*,    @14\n*              while the UNPK instruction expects a sign. Also note @14\n*              that the maximum length operand that UNPK can handle @14\n*              is only 15 bytes, just under what would be needed to @14\n*              handle the character output area from STCKCONV for   @14\n*              time. So, we will unpack OUTAREA a little at a time. @14\n*              Fortunately, both the date and time portions of the  @14\n*              STCKCONV output are multiples of 4 bytes. So we will @14\n*              just loop through the OUTAREA area upacking 4 bytes  @14\n*              at a time.                                           @14\n*                                                                   @14\n*              Packed format: '12 3C'X    ('C' is sign nibble) ==>  @14\n*              UNPK output:   'F1 F2 C3'X (sign nibble and last hex @14\n*                            digit are swapped in unpacked format!) @14\n*                                                                   @14\n*              This code \"fakes\" the sign nibble by unpacking *5*   @14\n*              bytes at a time to get *4* bytes of valid unpacked   @14\n*              output. The rightmost byte in the unpacked output    @14\n*              (containing invalidly wapped digits) is simply       @14\n*              discarded for the current unpack operation and       @14\n*              picked up in the next unpack operation.              @14\n*                                                                   @14\n         LA    R3,4                Set loop bump increment, R3=4    @14\n         LA    R4,8               Set TIMEDATE bump increment, R4=8 @14\n         LA    R5,0                Set up loop counter:             @14\n         SR    R5,R3                R5=-4                           @14\n         LA    R6,OUTAREA-4        R6 -> source area -4             @14\n         LA    R7,UNPKAREA         R7 -> UNPK area                  @14\n         LA    R8,TIMEDATE-8       R8 -> target area -8             @14\nDATETIME_100 DS 0H                                                  @14\n         AR    R5,R3               Bump loop counter by +4          @14\n         AR    R6,R3               Bump OUTAREA pointer by +4       @14\n         AR    R8,R4               Bump TIMEDATE pointer by +8      @14\n         UNPK  0(9,R7),0(5,R6)     UNPK OUTAREA+1 extra byte (sign) @14\n         MVC   0(8,R8),0(R7)  Move UNPKAREA to TIMEDATE (drop sign) @14\n         C     R5,=F'8'            Finished ?                       @14\n         JNE   DATETIME_100        ...jif not, else fall thru done  @14\n*                                                                   @14\nDATEATIMEX DS  0H                                                   @14\n         LM    R14,R12,DATETIMESAVE+12 Restore caller's GPRs        @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n         TITLE 'INIT000 - Initial environmental checks'             @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n* Perform initial environmental checks including the following:   * @14\n*                                                                 * @14\n* 1) Verify we're APF authorized                                  * @14\n* 2) Make sure we're not under TEST/TESTAUTH                      * @14\n* 3) ________________                                             * @14\n*                                                                 * @14\n*                                                                 * @14\n*                                                                 * @14\n*                                                                 * @14\n*                                                                 * @14\n* 3) Get local date & time for WTOs and report lines and GOODNITE * @14\n*    time range check. Returns hhmmssthmiju0000MMDDYYYY formatted * @14\n*    and adjusted time in OUTAREA field.                          * @14\n* 4) Check & assign user's internal authority level               * @14\n*                                                                 * @14\n* Note: This routine is responsible for issuing any pertinent     * @14\n*       WTO message(s) & for setting the return code for the      * @14\n*       caller in the RETCODE field.                              * @14\n*                                                                 * @14\n* Note: Always returns to entry R14 address                       * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nINIT000  DS    0H                                                   @14\n         STM   R14,R12,SAVE@L1+12  Save caller's GPRs               @14\n*                                                                   @14\n*        Initialize some fields                                     @14\n*                                                                   @14\n         MVI   LMOD,X'40'                                           @14\n         MVC   LMOD+1(L'LMOD-1),LMOD                                @14\n         MVI   USERID,X'40'                                         @14\n         MVC   USERID+1(L'USERID-1),USERID                          @14\n*\n*        Check for required APF authorization\n*\n         TESTAUTH FCTN=1           Check APF status\n         LTR   R15,R15             APF authorized ?\n         JZ    INIT010             ...jif so                        @14\n*                                                                   @14\n*        Issue WTO indicating APF authorization needed              @14\n*                                                                   @14\n         $RWTO MSG028A,WRITE=YES                                    @14\n         LHI   R1,NOTAPF           Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     INITX                 & go exit w/ return code       @14\n*                                                                   @14\n*        Make sure we're not under TEST/TESTAUTH                    @14\n*                                                                   @14\nINIT010  DS    0H                                                   @14\n         L     R1,PSATOLD-PSA(0,0) @ TCB                            @14\n         ICM   R1,B'0111',TCBTRNB-TCB(R1)  TEST/TESTAUTH ?          @14\n         JZ    INIT011             ...jif not under TEST/TESTAUTH   @14\n*                                                                   @14\n*        Issue WTO indicating TEST/TESTAUTH environment illegal     @14\n*                                                                   @14\n         $RWTO MSG020A,WRITE=YES                                    @14\n         LHI   R1,BADENV2          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     INITX                 & go exit w/ return code       @14\n*                                                                   @14\n* Prevent execution under TSO or USS environments so program can    @14\n* reside in the active LNKLST set                                   @14\n*                                                                   @14\nINIT011  DS    0H                                                   @14\n         L     R2,PSAAOLD-PSA(0,0) R2 -> ASCB address               @14\n         USING ASCB,R2             Inform assembler                 @14\n         L     R3,PSATOLD-PSA(0,0) Load current TCB address         @14\n         USING TCB,R3              Establish addressability         @14\n*                                                                   @14\n*        Check for TSO address space                                @14\n*                                                                   @14\n         ICM   R15,B'1111',ASCBTSB Is there a TSB ?                 @14\n         JZ    INIT012             ...jif not, continue             @14\n*                                                                   @14\n*        Issue WTO indicating TSO environment not supported         @14\n*                                                                   @14\n         $RWTO MSG021A,WRITE=YES                                    @14\n         LHI   R1,BADENV2          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     INITX                 & go exit w/ return code       @14\n*                                                                   @14\n*        Check for forked/spawned address space                     @14\n*                                                                   @14\nINIT012  DS    0H                                                   @14\n         L     R15,ASCBASSB        R15 -> ASSB address              @14\n         TM    ASSBWMF1-ASSB(R15),ASSBFSAS Forked/Spawned ?         @14\n         JNO   INIT013             ...jif not, continue             @14\n*                                                                   @14\n*     Issue WTO indicating forked/spawned environment not supported @14\n*                                                                   @14\n         $RWTO MSG022A,WRITE=YES                                    @14\n         LHI   R1,BADENV2          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     INITX                 & go exit w/ return code       @14\n*                                                                   @14\n*        Make sure we're in batch address space (WLM or JES)        @14\n*                                                                   @14\nINIT013  DS    0H                                                   @14\n         L     R15,ASCBCSCB        R15 -> CSSB address              @14\n         TM    CHTRKID-CSCB(R15),CHINITID Initiated ?               @14\n         JO    INIT014             ...jif so, continue              @14\n*                                                                   @14\n*        Issue WTO indicating we're not executing in batch          @14\n*                                                                   @14\n         $RWTO MSG023A,WRITE=YES                                    @14\n         LHI   R1,BADENV2          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     INITX                 & go exit w/ return code       @14\n*                                                                   @14\n*        Make sure we're executing under the job step TCB           @14\n*                                                                   @14\nINIT014  DS    0H                                                   @14\n         C     R3,TCBJSTCB         Are we the job step TCB ?        @14\n         JE    INIT015             ...jif so, continue              @14\n*                                                                   @14\n*     Issue WTO indicating we're not running under the job step TCB @14\n*                                                                   @14\n         $RWTO MSG024A,WRITE=YES                                    @14\n         LHI   R1,BADENV2          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     INITX                 & go exit w/ return code       @14\n*                                                                   @14\n*     Make sure we're 1st step in task (cannot be loaded by others) @14\n*                                                                   @14\n*                                                                   @14\n*<wrong> - The following test does not work for an execution in a   @14\n*<wrong>   job step other than the 1st in the job.                  @14\n*                                                                   @14\nINIT015  DS    0H                                                   @14\n         AGO   .JH0914A\n         L     R4,TCBJSCB          Load JSCB address                @14\n         USING IEZJSCB,R4          Inform assembler                 @14\n         L     R4,JSCBACT          Load the active JSCB address     @14\n         CLI   JSCBSTEP,1         Are we the 1st step in the task ? @14\n         JE    INIT016             ...jif so, continue              @14\n.JH0914A ANOP\n* New code follows:                                                 @14\n         L     R15,PSATOLD-PSA(0,0)    Get TCB address              @14\n         L     R15,TCBJSCB-TCB(,R15)   Get JSCB address             @14\n         L     R15,JSCBACT-IEZJSCB(,R15) Get address of active JSCB @14\n         CLC  JSCBPGMN-IEZJSCB(8,R15),=CL8'SVCUPDTE' Job step pgm ? @14\n         JE    INIT016                 ...jif so, continue          @14\n*                                                                   @14\n*     Issue WTO indicating we're not 1st program in job step        @14\n*                                                                   @14\n         $RWTO MSG025A,WRITE=YES                                    @14\n         LHI   R1,BADENV2          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     INITX                 & go exit w/ return code       @14\n*                                                                   @14\n*        DROP  R2,R3,R4            Drop ASCB, TCB, JSCB             @14\n         DROP  R2,R3               Drop ASCB, TCB                   @14\n*                                                                   @14\nINIT016  DS    0H                                                   @14\n*                                                                   @14\n*        Get local time & date for reports                          @14\n*                                                                   @14\n*        Get \"\"common\" time for algorithm                           @14\n*                                                                   @14\nINIT020  DS    0H                                                   @14\n         STCK  STCKAREA                                             @14\n*                                                                   @14\n* Send through IBM algorithm circa 1985                             @14\n*                                                                   @14\n         L     R15,CVTPTR              point at CVT                 @14\n         L     R15,CVTEXT2-CVTMAP(,R15) point at CVT extension      @14\n         USING CVTXTNT2,R15            Obtain addressdability       @14\n         LM    R0,R1,STCKAREA          Load TOD clock value         @14\n         AL    R0,CVTLDTO              Add hi-order word            @14\n         AL    R1,CVTLDTO+4            Add low-order word           @14\n         JC    12,*+8                  Carry ? Branch if not        @14\n         AL    R0,=F'1'                Add carry                    @14\n         SL    R0,CVTLSO               Subtract hi-order word       @14\n         SL    R1,CVTLSO+4             Subtract low-order word      @14\n         JC    3,*+6                   Borrow ? Branch if not       @14\n         BCTR  R0,0                    Subtract the borrow          @14\n         DROP  R15                     CVTXTNT2                     @14\n         STM   R0,R1,STCK_Adjusted     Save for STCKCONV            @14\n*                                                                   @14\n* Format current date and time located in the field named           @14\n* STCK_Adjusted into a 24-character string located in the field     @14\n* field named OUTAREA in the following format:                      @14\n*                                                                   @14\n*           hhmmssthmiju0000MMDDYYYY                                @14\n*                                                                   @14\n*           where (left to right):                                  @14\n*                                                                   @14\n*            hh - is hours, based on a 24-hour clock                @14\n*            mm - is minutes                                        @14\n*            ss - is seconds                                        @14\n*            t  - is tenths of a second                             @14\n*            h  - is hundredths of a second                         @14\n*            m  - is milliseconds                                   @14\n*            i  - is ten-thousandths of a second                    @14\n*            j  - is hundred-thousandths of a second                @14\n*            u  - is microseconds                                   @14\n*            0000 - is <filler>                                     @14\n*            MM - is current month (01-12)                          @14\n*            DD - is current day of month                           @14\n*            YYYY - is current year                                 @14\n*                                                                   @14\n* This information will be used in verifying the Goodnight          @14\n* invocation parameter if supplied & to generate any possible       @14\n* MLWTO announcing the installation of the SVC if all verification  @14\n* tests are passed.                                                 @14\n*                                                                   @14\n         LAM   R1,R1,=F'0'             Assure AR1 is 0              @14\n         STCKCONV STCKVAL=STCK_Adjusted,                            @14X\n               CONVVAL=OUTAREA,                                     @14X\n               TIMETYPE=DEC,                                        @14X\n               DATETYPE=MMDDYYYY,                                   @14X\n               MF=(E,STCKCONVL)                                     @14\n*                                                                   @14\n* Unpack OUTAREA and store into TIMEDATE area the result of the     @14\n* STCKCONV.                                                         @14\n*                                                                   @14\n* NOTE: The STCKCONV output is packed decimal *unsigned*, while the @14\n*       UNPK instruction expects a sign. Also note that the maximum @14\n*       length operand that UNPK can handle is only 15 bytes, just  @14\n*       under what would be needed to handle the 16 character       @14\n*       output area from STCKCONV for time. So, we will unpack      @14\n*       OUTAREA a little at a time. Fortunately, both the date and  @14\n*       time portions of the STCKCONV output are multiples of 4     @14\n*       bytes. So we will just loop through the OUTAREA area        @14\n*       upacking 4 bytes at a time.                                 @14\n*                                                                   @14\n*        Packed format: '12 3C'X    ('C' is sign nibble) ==>        @14\n*        UNPK output:   'F1 F2 C3'X (sign nibble and last hex digit @14\n*                                  are swapped in unpacked format!) @14\n*                                                                   @14\n*       This code \"fakes\" the sign nibble by unpacking *5* bytes at @14\n*       a time to get *4* bytes of valid unpacked output. The       @14\n*       rightmost byte in the unpacked output (containing invalidly @14\n*       swapped digits) is simply discarded for the current unpack  @14\n*       operation and picked up in the next unpack operation.       @14\n*                                                                   @14\n         LA    R3,4                Set loop bump increment, R3=4    @14\n         LA    R4,8               Set TIMEDATE bump increment, R4=8 @14\n         LA    R5,0                Set up loop counter:             @14\n         SR    R5,R3                R5=-4                           @14\n         LA    R6,OUTAREA-4        R6 -> source area -4             @14\n         LA    R7,UNPKAREA         R7 -> UNPK area                  @14\n         LA    R8,TIMEDATE-8       R8 -> target area -8             @14\nINIT030  DS    0H                                                   @14\n         AR    R5,R3               Bump loop counter by +4          @14\n         AR    R6,R3               Bump OUTAREA pointer by +4       @14\n         AR    R8,R4               Bump TIMEDATE pointer by +8      @14\n         UNPK  0(9,R7),0(5,R6)     UNPK OUTAREA+1 extra byte (sign) @14\n         MVC   0(8,R8),0(R7)  Move UNPKAREA to TIMEDATE (drop sign) @14\n         C     R5,=F'8'            Finished ?                       @14\n         JNE   INIT030             ...jif not                       @14\n*                                                                   @14\n*        Check invoking user's internal program authority           @14\n*                                                                   @14\n\n\n\n\n\n\n\n\n\nINITX    DS    0H                                                   @14\n         LM    R14,R12,SAVE@L1+12  Restore caller's GPRs            @14\n         BR    R14                 Return to caller                 @14\n         DROP\n*                                                                   @05\n         TITLE 'CHKU500 - SVC userid screening routine'             @14\n*-----------------------------------------------------------------* @05\n*                                                                 * @05\n*        USER-ID SCREENING ROUTINE                                * @05\n*                                                                 * @05\n*        This code is moved to SQA and executes from there each   * @05\n*        time a program issues an SVC instruction for the new SVC.* @05\n*        If the user-id of the invoker is equal to the user-id    * @05\n*        specified in the parm, then the new SVC is invoked,      * @05\n*        otherwise the old code is called.                        * @05\n*                                                                 * @05\n*-----------------------------------------------------------------* @05\n*                                                                   @05\n         USING TCB,R4              Inform assembler                 @05\n         USING CHKU500,R6          <ditto>                          @05\n         USING ASCB,R7             <ditto>                          @05\nCHKU500  J     CHKU510             Branch around eye-catcher        @05\n         DC    C'SVCUPDTE UTILITY - USER-ID SCREENING',0H'0'        @05\nCHKU510  L     R2,PSAAOLD-PSA(0,0)   R2->my ASCB                 @05@10\n         L     R2,ASCBASXB-ASCB(,R2) R2->my ASXB       .            @05\n         ICM   R2,B'1111',ASXBSENV-ASXB(R2) R2->my ACEE             @05\n         JZ    CHKU530             ...bif no ACEE, use old code     @05\n         USING ACEE,R2                                              @05\n         CLC   ACEEUSRI,CHKU500U   Authorized user ?                @05\n         JE    CHKU540             ...bif so, use new code          @05\nCHKU530  L     R6,CHKU500O         otherwise R6->old SVC            @05\n         BSM   0,R6                and make like trees              @05\nCHKU540  L     R6,CHKU500N         R6->new SVC                      @05\n         BSM   0,R6                and make like trees              @05\nCHKU500O DS    V                   Old SVC entry                    @05\nCHKU500N DS    V                   New SVC entry                    @05\nCHKU500U DS    CL8                 Authorized userid                @05\nCHKU500# DS    C'XXXYYY'           SVC or ESR+SVC                @05@14\nCHKU500L EQU   *-CHKU500                                            @05\n         DROP  ,                                                    @05\n*\n         TITLE 'GOODNITE - End-Of-Day routine'                      @14\n*---------------------------------------------------------------------*\n*                                                                     *\n*        END-OF-DAY ROUTINE                                           *\n*                                                                     *\n*        This routine executes at the end of the timer interval       *\n*        when the user specified a \"good-night\" time in the parm.     *\n*        It posts the communication ECB to simulate a STOP command    *\n*        and allow the main-line to shutdown.                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nGOODNITE BALR  R10,0               Set local base register\n         USING *,R10\n         L     R2,4(,R1)           COMM ECB address\n*@SNAP ((R1),8),((R2),4)\n         MODESET KEY=ZERO          Switch to Key 0\n         POST  (R2),0              Simulate STOP command\n         SVC   3                   Exit\n         DROP  ,                   Drop local addressability\n*\n         TITLE 'CANCEL - ESTAE exit to trap CANCEL commands'        @14\n*-----------------------------------------------------------------* @03\n*                                                                 * @03\n*        ESTAE EXIT USED TO TRAP CANCEL COMMANDS                  * @03\n*                                                                 * @03\n* WARNING: This ESTAE exit currently assumes that the SDWA        * @14\n*          address is always passed. This should be fixed in a    * @14\n*          future enhancement or if it is determined to have      * @14\n*          caused a problem before that time.                     * @14\n*                                                                 * @14\n* This exit expects the following:                                * @14\n*                                                                 * @14\n* -SVCPLOLD structure contains the SVCUPDTE plist for the         * @14\n*  original SVC table entry when we began execution               * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @03\nCANCEL   SAVE  (14,12),,*          Save caller's registers          @03\n         BALR  R11,0               Set local addressability         @03\n         USING *,R11               Inform assembler                 @03\n         LARL  R12,LTORG_AREA                                       @14\n         USING (LTORG_AREA,LTORG_AREA_END),R12                      @14\n         LAE   R12,0(R12,0)        Establish LTORG base             @14\n         LR    R8,R1               R8->SDWA                         @03\n         USING SDWA,R8             Inform assembler                 @03\n         LR    R0,R13              R0->caller's save area           @03\n         L     R13,SDWAPARM        A(SAVE2)                         @03\n         ST    R0,4(,R13)          Chain                            @03\n         USING SAVE2,R13           Inform assembler                 @03\n*                                                                   @03\n* This exit must perform the following functions:                   @14\n* 1) Enqueue on the system SVC table to serialize update            @14\n* 2) Restore the old SVC entry                                      @14\n*                                                                   @14\n*                                                                   @14\n*        ENQueue on the SVC table                                   @14\n*                                                                   @14\nCANC410  DS    0H                                                   @14\n         MVC   ENQ_TABLE(ESVCTMODL),ESVCTMOD                        @14\n         ENQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14\n*                                                                   @14\n*        Did we get exclusive use of the resource ?                 @14\n*                                                                   @14\n         ST    R15,DWD             Save ENQ return code/@ of area   @14\n         LTR   R15,R15             Did we get the SVC table ?       @14\n         JZ    CANC430             ...jif so                        @14\n*                                                                   @14\n*        Issue WTO regarding failure and then retry                 @14\n*                                                                   @14\n         ST    R15,DWD            Save ENQ return code              @14\n         L     R2,DOMID           Pick up possible previous msgid   @14\n         LTR   R2,R2              Any previously issued message ?   @14\n         JZ    CANC420            ...jif not                        @14\n         L     R1,DOMID           GET PREVIOUS MESSAGE ID NO.       @14\n         DOM   MSG=(R1)           DELETE PREVIOUS MESSAGE           @14\nCANC420  DS    0H                                                   @14\n         $RWTO MSG906I,WRITE=NO                                     @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG906IA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         ST    R1,DOMID            Save msgid for later deletion    @14\n         STIMER WAIT,DINTVL=HOWLONG Wait 5 seconds                  @14\n         J     CANC410               and go try again               @14\n*                                                                   @14\n*        We got the SVC table for this system image so update       @14\n*        the SVC slot with the old information but DOM any          @14\n*        outstanding WTO message we might have issued               @14\n*                                                                   @14\nCANC430  DS    0H                                                   @14\n         L     R2,DOMID           Pick up possible previous msgid   @14\n         LTR   R2,R2              Any previously issued message ?   @14\n         JZ    CANC440            ...jif not                        @14\n         L     R1,DOMID           GET PREVIOUS MESSAGE ID NO.       @14\n         DOM   MSG=(R1)           DELETE PREVIOUS MESSAGE           @14\n*                                                                   @14\n*        Restore the old SVC entry content                          @14\n*                                                                   @14\nCANC440  DS    0H                                                   @14\n*        WTO   'We got the SVC table during ESTAE processing'       @14\n*                                                                   @14\n         MODESET KEY=ZERO,MODE=SUP                                  @14\n         BASR  R10,0               Macro internal addressability    @14\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"    @14\n*                                                                   @14\n*        Install the new SVC code using the SVCUPLNEW plist         @14\n*                                                                   @14\n         SVCUPDTE MF=(E,SVCUPLOLD)                                  @14\n         DROP  R10             Drop internal macro addressability   @14\n         LR    R4,R15              Preserve return code             @14\n         ST    R15,DWD             Preserve return code             @14\n*                                                                   @14\n*        Drop ENQ on SVC table resource (on success or failure)     @14\n*                                                                   @14\n*        DEQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14\n         DEQ   RET=HAVE,                                            @14X\n               MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14\n*                                                                   @14\n*        Check SVCUPDTE REPLACE operation return code               @14\n*                                                                   @14\n         MODESET KEY=NZERO,MODE=PROB                                @14\n         LTR   R4,R4               Was update successful ?          @14\n         JZ    CANC450             ...jif successful                @14\n*                                                                   @14\n*        SVCUPDTE was not successful - issue message and clean up   @14\n*        what we can                                                @14\n*                                                                   @14\n         $RWTO MSG918A,WRITE=YES                                    @14\n         $RWTO MSG919A,WRITE=NO                                     @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG919AA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n*                                                                   @14\n*        Go free any common areas we allocated anyway and expect    @14\n*        abends if this SVC is called                               @14\n*                                                                   @14\n         LHI   R15,BADSVCUR        Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n*%FDIR: Should set specific return code for this failure            @14\n* We must free these areas ourself here                             @14\n         J     CANCX_FREE          Go free our common areas         @14\n*                                                                   @14\n*        Old SVC entry was restored                                 @14\n*                                                                   @14\nCANC450  DS    0H                                                   @14\n         $RWTO MSG200I,WRITE=NO                                     @14\n         LA    R14,OLDENTRY        R14 -> source area to convert    @14\n         LA    R15,MSG200IA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n*                                                                   @14\n*        Go free any common areas we allocated                      @14\n*                                                                   @14\n         XR    R15,R15             Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     CANCX_FREE          Go free our common areas         @14\n\n\n*                                                                   @14\n*        Free ESQA storage if allocated before exit                 @14\n*                                                                   @14\nCANCX_FREE DS  0H                                                   @14\n         L     R3,SQA_ADDR         Pick up possible ESQA address\n         LTR   R3,R3               Did we obtain any ESQA ?\n         JZ    CANCX_FREE_A        ...jif not\n         L     R4,=A(CHKU500L)     Get length to free               @14\n         MODESET KEY=ZERO,MODE=SUP\n*\n*        Free obtained ESQA storage\n*\n         STORAGE RELEASE,          Free                                X\n               ADDR=((R3)),         the                                X\n               LENGTH=((R4)),        filter area                       X\n               SP=245\n         XC    SQA_ADDR,SQA_ADDR   Clear pointer                    @14\n*                                                                   @14\n*        Free and CSA/ECSA area allocated before exit               @14\n*                                                                   @14\nCANCX_FREE_A DS 0H                                                  @14\n         L     R3,@CSAEPN          Get possible CSA/ECSA @ to free  @14\n         LTR   R3,R3               Did we obtain any CSA/ECSA ?     @14\n         JZ    CANCX_FREE_B        ...jif not\n         L     R4,MODSIZE          Get length to free               @14\n         MODESET KEY=ZERO,MODE=SUP\n*\n*        Free obtained CSA/ECSA storage\n*\n         STORAGE RELEASE,          Free                                X\n               ADDR=((R3)),         the                                X\n               LENGTH=((R4)),        new SVC code area                 X\n               SP=228\n         XC    @CSAEPN,@CSAEPN     Clear pointer                    @14\n*\n*        Return to caller (RTM)\n*\nCANCX_FREE_B DS 0H                                                  @14\n         MODESET KEY=NZERO,MODE=PROB                                @14\nCANCX    DS    0H                                                   @14\n         L     R13,4(,R13)         Restore entry save area address  @14\n\n\n\n\n         SETRP WKAREA=(R8),REGS=(14,12),RC=00 Set return parameters @03\n         DROP  ,                   Lose local addressability        @03\n.JH1116B ANOP\n\n\n\n\n\n\n\n\n\n\n\n\n\n         AGO   .JH1116A                                             @14\n* Old code follows:                                                 @14\n         L     R6,OLDENTRY         R6->old SVC entry address        @03\n*        LA    R12,DWD             R12->work area                @03@14\n         LA    R9,DWD              R9 -> DWS portion             @03@14\n         SYNCH UPDATE,             Update                        @03@14X\n               STATE=SUPV,          SVC table                    @03@14X\n               RESTORE=YES           entry                       @03@14\n*                                                                   @03\n         ICM   R1,B'1111',SQA_ADDR R1->work-area in SQA             @05\n         JZ    CANCEL99            ...bif not there                 @05\n         LA    R0,CHKU500L         R0 = length to free              @14\n         FREEMAIN RU,SP=245,A=(R1),LV=((R0)) Free SQA space      @05@14\n*                                                                   @03\nCANCEL99 L     R13,4(,R13)         Restore entry save area address  @03\n\n\n\n\n\n\n         SETRP WKAREA=(R8),REGS=(14,12),RC=00 Set return parameters @03\n         DROP  ,                   Lose local addressability        @03\n.JH1116A ANOP                                                       @14\n*\n         TITLE 'UPDATE - update SVC table routine'                  @14\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Update SVC Table Entry                                       *\n*                                                                     *\n* Note: Expects the following on entry -                              *\n*        R6 -> SVC entry point                                        *\n*        R9 -> DWS portion addressability                           @14\n*                                                                     *\n*---------------------------------------------------------------------*\nUPDATE   BALR  R11,0               Local addressability\n         USING *,R11               Inform assembler\n*        USING DWD,R12                                              @14\n         USING DWD,R9              DWS portion addressability       @14\n         LARL  R12,LTORG_AREA                                       @14\n         USING (LTORG_AREA,LTORG_AREA_END),R12                      @14\n         LAE   R12,0(R12,0)        Establish LTORG base             @14\n*\n         ENQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @02\n         MODESET EXTKEY=ZERO       Go to Key 0\n         L     R5,SVCENTRY_PTR     R5->SVC table entry\n         USING SVCENTRY,R5         Inform assembler\n*\n*        See if R/O nucleus backed by 1MB pages & avoid PGSER if so @11\n*                                                                   @11\n         L     R2,CVTPTR(0,0)      R2->CVT                          @11\n         USING CVTMAP,R2           CVT addressability               @11\n         TM    CVTFLAG2,CVTEDAT    Large Page support (R/O nucleus) @11\n         JO    UPDATE1             ...jif so, Nucleus is R/O        @11\n         DROP  R2                                                   @11\n         CLI   SVC#,109            Is this ESR SVC 109 ?            @06\n         JE    UPDATE6         ...bif so, skip SVCUPDTE usage       @06\n*\nUPDATE1  DS    0H                                                   @11\n         SLR   R2,R2               Clear work register\n         IC    R2,SVC#             Pick up SVC number\n         SVCUPDTE (R2),                                                X\n               EP=(R6),                                                X\n               MF=(E,SVCULIST)\n         LR    R3,R15          Set return code from SVCUPDTE service\n         J     UPDATE7             Skip over ESR method             @06\n*                                                                   @06\nUPDATE6  EQU   *                   ESR SVC 109 entry update         @06\n         PGSER R,UNPROTECT,A=SVCENTRY,EA=SVCENTRY+1 Unprotect SVC T @06\n         ST    R6,SVCEP            Update ESRTABLE                  @06\n         SLR   R3,R3               Set RC=0                         @06\n         PGSER R,PROTECT,A=SVCENTRY,EA=SVCENTRY+1 Protect SVC entry @06\n*                                                                   @06\nUPDATE7  EQU   *                                                    @06\n         DEQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @02\n         LR    R15,R3              Pass return code\n         SVC   3                   Goback to SYNCH\n*                                                                   @14\n         TITLE 'SVCUPDTE -- Report header lines'                    @14\n* Following line added by @14 change                                @14\nUSRHD#1  DC    CL121'1Program: ________ V1R0M0 assembly Date/Time: MM/DX\n               D/YYYY at HH:MM '                                    @14\n         DC    C'Pagezzzzzzzn'                                      @14\nUSRHD#1L EQU   *-USRHD#1                                            @14\nUHDL1#1  EQU   HDRLINE+10,8        Program name                     @14\nUHDL1#2  EQU   HDRLINE+19,6        Program version                  @14\nUHDL1#3  EQU   HDRLINE+46,2        Program date (MM)                @14\nUHDL1#4  EQU   HDRLINE+49,2        Program date (DD)                @14\nUHDL1#5  EQU   HDRLINE+52,4        Program date (YYYY)              @14\nUHDL1#6  EQU   HDRLINE+60,2        Program time (HH)                @14\nUHDL1#7  EQU   HDRLINE+63,2        Program time (MM)                @14\nUHDL1#8  EQU   HDRLINE+125,8       Page Number                      @14\n*                                                                   @14\n         DS    0H                  <alignment>                      @14\nUSRHD#2  DC    C' Execution time: HH:MM:SS on 06/24/2014 '          @14\nUSRHD#2L EQU   *-USRHD#2                                            @14\nUHDL2#1  EQU   HDRLINE+17,2        HH                               @14\nUHDL2#2  EQU   HDRLINE+20,2        MM                               @14\nUHDL2#3  EQU   HDRLINE+23,2        SS                               @14\nUHDL2#4  EQU   HDRLINE+29,2        MM                               @14\nUHDL2#5  EQU   HDRLINE+32,2        DD                               @14\nUHDL2#6  EQU   HDRLINE+35,4        YYYY                             @14\n*                                                                   @14\n         DS    0H                  <alignment>                      @14\nUSRHD#3  DC    C' Title: Defined SVC slots && Current Usage Report' @14\nUSRHD#3L EQU   *-USRHD#3                                            @14\nUHDL3#1  EQU   HDRLINE+18,7        Input parameter                  @14\n*                                                                   @14\n         DS    0H                  <alignment>                      @14\nUSRHD#4  DC    CL29'0    Profile                '                   @14\n         DC    CL17'Installation Data'                              @14\nUSRHD#4L EQU   *-USRHD#4                                            @14\n*                                                                   @14\n         DS    0H                  <alignment>                      @14\nUSRHD#5  DC    CL17'+_______________  '                             @14\n         DC    44C'_'                                               @14\nUSRHD#5L EQU   *-USRHD#5                                            @14\n*                                                                   @14\n\n\n\n\n\n\n\n         AGO   .JH0805A\n\n\n0    Profile                Installation Data\n+_______________  __________________________________________________\n 12345678_nnnfff\n    Profile                Installation Data\n___________________________________________________________________\nSVCUPDTE_nnnfff  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n                 Owner: 12345678\n                 Status: SVC slot is not currently in use.\n    SVC slot currently in use by job nameENQTESTTin ASID 0x0048.\n                  ACLID    ACLACS\n                 ________ ________\n                 12345678 CONTROL\n                 12345678 ALTER\n                 12345678 READ\n                 12345678 UPDATE\n                 12345678 NONE\n\nDouble space between entries\n\n\nProfile            Owner    ACLID    ACLACS\nSVCUPDTE_nnnfff  12345678  12345678 12345678\n\nSVCU700D - Profile: SVCUPDTE_109200\nSVCU701D - Installation data: JOHN HAMLET\nSVCU702D - OWNER: SYS1       UACC: NONE\nSVCU704D - Status: SVC slot is not currently in use.\nSVCU703D - VINUGE  : ALTER\nSVCU703D - SASJRH  : CONTROL\n\n\n.JH0805A ANOP\n\n\n\n\n\n\n*                                                                   @14\n         TITLE 'SVCPCL   - PCL for IKJPARS'                         @14\n\n* Syntax is:\n* SVC(aaa,bbb),TYPE(n),LOCKS(LOCAL,CMS,SRM,SALLOC,DISP),\n* ATTR(NPRMT,APF,AR,ASF),LMOD(xxxxxxxx),GOODNITE(nnnn),USER(xxxxxxxx)\n*\nSVCCPL   IKJPARM DSECT=DSVCCPL\nSVCCPL   CSECT\nSVCCPL   AMODE 31\nSVCCPL   RMODE ANY\n* SVC keyword\nMSVCKW   IKJKEYWD\n         IKJNAME 'SVC',SUBFLD=SUBMSVC\n* TYPE keyword\nMTYPKW   IKJKEYWD ,\n         IKJNAME 'TYPE',SUBFLD=SUBMTYP\n* LOCKS keyword\nMLCKKW   IKJKEYWD\n         IKJNAME 'LOCKS',SUBFLD=SUBMLCK\n* ATTR keyword\nMATRKW   IKJKEYWD ,\n         IKJNAME 'ATTR',SUBFLD=SUBMATR\n* LMOD keyword\nMMODKW   IKJKEYWD\n         IKJNAME 'LMOD',SUBFLD=SUBMMOD\n* GOODNITE keyword\nMGDNKW   IKJKEYWD ,\n         IKJNAME 'GOODNITE',SUBFLD=SUBMGDN\n* USER keyword\nMUSRKW   IKJKEYWD\n         IKJNAME 'USER',SUBFLD=SUBMUSR\n*\n* SUBFIELDS\n*\n* SVC(aaa,bbb)\nSUBMSVC  IKJSUBF\nMSVC     IKJIDENT 'SVC NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,            X\n               MAXLNTH=3\nMSVCR    IKJIDENT 'ROUTING NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,        X\n               MAXLNTH=3\n* TYPE(n)\nSUBMTYP  IKJSUBF ,\nMTYP     IKJIDENT 'SVC TYPE',UPPERCASE,FIRST=NUMERIC,                  X\n               MAXLNTH=1\n* LOCKS(LOCAL,CMS,SRM,SALLOC,DISP)\nSUBMLCK  IKJSUBF\nMLOCAL   IKJKEYWD\n         IKJNAME 'LOCAL'\nMCMS     IKJKEYWD\n         IKJNAME 'CMS'\nMSRM     IKJKEYWD\n         IKJNAME 'SRM'\nMSALLOC  IKJKEYWD\n         IKJNAME 'SALLOC'\nMDISP    IKJKEYWD\n         IKJNAME 'DISP'\n* ATTR(NPRMT,APF,AR,ASF)\nSUBMATR  IKJSUBF\nMNPRMT   IKJKEYWD\n         IKJNAME 'NPRMT'\nMAPF     IKJKEYWD\n         IKJNAME 'APF'\nMAR      IKJKEYWD\n         IKJNAME 'AR'\nMASF     IKJKEYWD\n         IKJNAME 'ASF'\n* GOODNITE(HHMM)\nSUBMGDN  IKJSUBF\n*GDN     IKJIDENT 'GOODNITE',UPPERCASE,FIRST=NUMERIC,OTHER=NUMERIC,   X\n*              MAXLNTH=4\nMGDN     IKJIDENT 'GOODNITE',UPPERCASE,                                X\n               MAXLNTH=4,CHAR\n* USER(xxxxxxxx)\nSUBMUSR  IKJSUBF\n*MUSR     IKJPOSIT USERID\nMUSR     IKJIDENT 'USER',UPPERCASE,MAXLNTH=8,FIRST=ANY,OTHER=ANY\n*\nSUBMMOD  IKJSUBF\nMMOD     IKJIDENT 'LOAD MODULE',UPPERCASE,FIRST=ALPHA,OTHER=ALPHA,     X\n               MAXLNTH=8,CHAR\n         IKJENDP\nSVCUPDTE CSECT                     <Resume original CSECT>\n*                                                                   @14\n         TITLE 'TRTPARM1 - translation table for input parameters'  @14\nTRTPARM1 DS    0H                  Translate table                  @14\n*=================================================================* @14\n* The following translate table is purely for validating the      * @14\n* input parameter string as having only acceptable characters     * @14\n* prior to that parameter string being parsed. Only alphanumeric, * @14\n* national (@,#,$), and the special characters \",\", \")\", \"(\" and  * @14\n* \"$\" are supported. The table is built for use with TRT where    * @14\n* GPR2 will receive the function byte from the table. In this     * @14\n* case, any non-zero function byte being returned in GPR2 would   * @14\n* represent at least one illegal character was found in the       * @14\n* tested area. Legal character positions contain X'00'.           * @14\n*=================================================================* @14\n*                    0 1 2 3 4 5 6 7 8 9 A B C D E F                @14\n         DC    XL16'08080808080808080808080808080808'  00 - 0F      @14\n         DC    XL16'08080808080808080808080808080808'  10 - 1F      @14\n         DC    XL16'08080808080808080808080808080808'  20 - 2F      @14\n         DC    XL16'08080808080808080808080808080808'  30 - 3F      @14\n*                                              (                    @14\n         DC    XL16'08080808080808080808080808000808'  40 - 4F      @14\n*                                          $   )                    @14\n         DC    XL16'08080808080808080808080008000808'  50 - 5F      @14\n*                                          ,                        @14\n         DC    XL16'08080808080808080808080008080808'  60 - 6F      @14\n*                                          # @   =                  @14\n         DC    XL16'08080808080808080808080000080008'  70 - 7F      @14\n*                      a b c d e f g h i                            @14\n         DC    XL16'08000000000000000000080808080808'  80 - 8F      @14\n*                      j k l m n o p q r                            @14\n         DC    XL16'08000000000000000000080808080808'  90 - 9F      @14\n*                        s t u v w x y z                            @14\n         DC    XL16'08080000000000000000080808080808'  A0 - AF      @14\n         DC    XL16'08080808080808080808080808080808'  B0 - BF      @14\n*                      A B C D E F G H I                            @14\n         DC    XL16'08000000000000000000080808080808'  C0 - CF      @14\n*                      J K L M N O P Q R                            @14\n         DC    XL16'08000000000000000000080808080808'  D0 - DF      @14\n*                        S T U V W X Y Z                            @14\n         DC    XL16'08080000000000000000080808080808'  E0 - EF      @14\n*                    0 1 2 3 4 5 6 7 8 9                            @14\n         DC    XL16'00000000000000000000080808080808'  F0 - FF      @14\n*                                                                   @14\n         TITLE 'TRTPARM2 - translation table for comma only'        @14\nTRTPARM2 DS    0H                  Translate table                  @14\n*=================================================================* @14\n* The following translate table is purely for locating commas in  * @14\n* an input string. The table is built for use with TRT where GPR2 * @14\n* will receive the function byte from the table. In this case,    * @14\n* any non-zero function byte being returned in GPR2 would         * @14\n* represent at least one illegal character was found in the       * @14\n* tested area. Legal character positions contain X'00'.           * @14\n*=================================================================* @14\n*                    0 1 2 3 4 5 6 7 8 9 A B C D E F                @14\n         DC    XL16'00000000000000000000000000000000'  00 - 0F      @14\n         DC    XL16'00000000000000000000000000000000'  10 - 1F      @14\n         DC    XL16'00000000000000000000000000000000'  20 - 2F      @14\n         DC    XL16'00000000000000000000000000000000'  30 - 3F      @14\n         DC    XL16'00000000000000000000000000000000'  40 - 4F      @14\n         DC    XL16'00000000000000000000000000000000'  50 - 5F      @14\n*                                          ,                        @14\n         DC    XL16'00000000000000000000000400000000'  60 - 6F      @14\n         DC    XL16'00000000000000000000000000000000'  70 - 7F      @14\n         DC    XL16'00000000000000000000000000000000'  80 - 8F      @14\n         DC    XL16'00000000000000000000000000000000'  90 - 9F      @14\n         DC    XL16'00000000000000000000000000000000'  A0 - AF      @14\n         DC    XL16'00000000000000000000000000000000'  B0 - BF      @14\n         DC    XL16'00000000000000000000000000000000'  C0 - CF      @14\n         DC    XL16'00000000000000000000000000000000'  D0 - DF      @14\n         DC    XL16'00000000000000000000000000000000'  E0 - EF      @14\n         DC    XL16'00000000000000000000000000000000'  F0 - FF      @14\n*                                                                   @14\n         TITLE 'HEXUPPER - translation table for input parameters'  @14\nHEXUPPER DS    0H                                                   @14\n*=================================================================* @14\n* The following translate table is purely for upper casing the    * @14\n* input parameter string which may contain alphanumeric or        * @14\n* national ($,@,@) characters in the LMOD field for a Type 1 SVC  * @14\n* along with the assignment (\"=\" sign) character and the comma    * @14\n* field separator character. Blanks are not allowed at this time. * @14\n* allowed at this time.                                           * @14\n*=================================================================* @14\n*                    0 1 2 3 4 5 6 7 8 9 A B C D E F                @14\n         DC    XL16'00000000000000000000000000000000'  00 - 0F      @14\n         DC    XL16'00000000000000000000000000000000'  10 - 1F      @14\n         DC    XL16'00000000000000000000000000000000'  20 - 2F      @14\n         DC    XL16'00000000000000000000000000000000'  30 - 3F      @14\n*                                              (                    @14\n         DC    XL16'000000000000000000000000004D0000'  40 - 4F      @14\n*                                          $   )                    @14\n         DC    XL16'00000000000000000000005B005D0000'  50 - 5F      @14\n*                                          ,                        @14\n         DC    XL16'00000000000000000000006B00000000'  60 - 6F      @14\n*                                          # @   =                  @14\n         DC    XL16'00000000000000000000007B7C007E00'  70 - 7F      @14\n*                      a b c d e f g h i                            @14\n         DC    XL16'00C1C2C3C4C5C6C7C8C9000000000000'  80 - 8F      @14\n*                      j k l m n o p q r                            @14\n         DC    XL16'00D1D2D3D4D5D6D7D8D9000000000000'  90 - 9F      @14\n*                        s t u v w x y z                            @14\n         DC    XL16'0000E2E3E4E5E6E7E8E9000000000000'  A0 - AF      @14\n         DC    XL16'00000000000000000000000000000000'  B0 - BF      @14\n*                      A B C D E F G H I                            @14\n         DC    XL16'00C1C2C3C4C5C6C7C8C9000000000000'  C0 - CF      @14\n*                      J K L M N O P Q R                            @14\n         DC    XL16'00D1D2D3D4D5D6D7D8D9000000000000'  D0 - DF      @14\n*                        S T U V W X Y Z                            @14\n         DC    XL16'0000E2E3E4E5E6E7E8E9000000000000'  E0 - EF      @14\n*                    0 1 2 3 4 5 6 7 8 9                            @14\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9000000000000'  F0 - FF      @14\n*                                                                   @14\n*                                                                   @14\n         TITLE 'DELIMTAB - translation table for parm delimiters'   @14\nDELIMTAB DS    0H                  Translate table                  @14\n*=====================================================================*\n* The following translate table is purely for identifying delimiters  *\n* in the input parameter string. The only valid function byte in the  *\n* table at this time is at X'6B', the EBCDIC comma location, and it's *\n* value has been set to X'04' so that this value can be used as a     *\n* displacement offest from a branch table origin by the caller.       *\n*                                                                     *\n* Additional delimiters can be added to the table if desired and they *\n* should be documented here if such action is performed. All users of *\n* this table will be impacted in some form or fashion by additions to *\n* this table.                                                         *\n*                                                                     *\n* position value Comment                                              *\n*   6B      04   Comma                                                *\n*   7E      08   Equal                                                *\n*   4D      0C   Left parenthesis                                     *\n*   5D      10   Right parenthesis                                    *\n*                                                                     *\n*=====================================================================*\n*                    0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    XL16'00000000000000000000000000000000'  00 - 0F\n         DC    XL16'00000000000000000000000000000000'  10 - 1F\n         DC    XL16'00000000000000000000000000000000'  20 - 2F\n         DC    XL16'00000000000000000000000000000000'  30 - 3F\n*                                              (\n         DC    XL16'000000000000000000000000000C0000'  40 - 4F\n*                                              )\n         DC    XL16'00000000000000000000000000100000'  50 - 5F\n*                                          ,\n         DC    XL16'00000000000000000000000400000000'  60 - 6F\n*                                                =\n         DC    XL16'00000000000000000000000000000800'  70 - 7F\n         DC    XL16'00000000000000000000000000000000'  80 - 8F\n         DC    XL16'00000000000000000000000000000000'  90 - 9F\n         DC    XL16'00000000000000000000000000000000'  A0 - AF\n         DC    XL16'00000000000000000000000000000000'  B0 - BF\n         DC    XL16'00000000000000000000000000000000'  C0 - CF\n         DC    XL16'00000000000000000000000000000000'  D0 - DF\n         DC    XL16'00000000000000000000000000000000'  E0 - EF\n         DC    XL16'00000000000000000000000000000000'  F0 - FF\n*\n*\n         TITLE 'Internal BRXLE && other tables && constants'        @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n*        Valid LOCKS subparameters & authorization required       * @14\n*                                                                 * @14\n*        Note: The following is the layout of each entry in the   * @14\n*              table:                                             * @14\n*                                                                 * @14\n*              Offset Length   Meaning/Purpose                    * @14\n*              ====== ====== ==================================== * @14\n*               +00     1    IHASVC SVCLOCKS equate for LOCK      * @14\n*               +01     6    LOCK type keyword                    * @14\n*               +07     1    Authority required to set this lock  * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\n         PUSH  PRINT                                                @14\n         PRINT DATA,GEN                                             @14\nLOCK_BRXLE DC  A(LOCK_START,LOCK_entry_len,LOCK_END-LOCK_entry_len) @14\n*                                                                   @14\nLOCK_START DS  0H                                                   @14\n         DC    AL1(SVCLL),C'LOCAL ',AL1(AUTHUSER)                   @14\nLOCK_entry_len EQU *-LOCK_START    Generate length of table entry   @14\n         DC    AL1(SVCDISP),C'DISP  ',AL1(SPECIAL)                  @14\n         DC    AL1(SVCOPT),C'SRM   ',AL1(SPECIAL)                   @14\n         DC    AL1(SVCCMS),C'CMS   ',AL1(AUTHUSER)                  @14\n         DC    AL1(SVCALLOC),C'SALLOC',AL1(SPECIAL)                 @14\nLOCK_END EQU   *                   End of LOCKS table               @14\n         POP   PRINT                                                @14\n*                                                                   @14\n*        RIBs workarea size to acquire                              @14\n*                                                                   @14\nRIBSPACE DC    F'1024'         Size of GQSCAN wirkarea to acquire   @14\n*                                                                   @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n*        SVC type authorization requirements                      * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nSVC_BRXLE DC   A(SVC_START,SVC_entry_len,SVC_END-SVC_entry_len)     @14\n*                                                                   @14\nSVC_START DS   0H                                                   @14\n         DC    C'1',AL1(AUTHUSER)                                   @14\nSVC_entry_len EQU *-SVC_START      Generate length of table entry   @14\n         DC    C'2',AL1(AUTHUSER)                                   @14\n         DC    C'3',AL1(AUTHUSER)                                   @14\n         DC    C'4',AL1(AUTHUSER)                                   @14\n         DC    C'6',AL1(AUTHUSER)                                   @14\nSVC_END  EQU   *                                                    @14\n*                                                                   @14\nBLANKS   DC    X'40'               Blank padding byte (MVCLs)       @14\n*                                                                   @14\nTYPE1    EQU   C'1'                TYpe 1 SVC                       @14\nTYPE2    EQU   C'2'                TYpe 2 SVC                       @14\nTYPE3    EQU   C'3'                TYpe 3 SVC                       @14\nTYPE4    EQU   C'4'                TYpe 4 SVC                       @14\nTYPE6    EQU   C'6'                TYpe 6 SVC                       @14\n*                                                                   @14\n*        SVC type w/ SVCTP (IHASVC) & SVCUPDTE macro equates        @14\n*                                                                   @14\n*        Layout is as follows:                                      @14\n*                                                                   @14\n*        +0 - Zoned decimal SVC type (1, 2, 3, 4, or 6)             @14\n*        +1 - SVCUPDTE macro expansion equate (offset +08)          @14\n*        +2 - IHASVC SVCTP field equate                             @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nSVC_types_BRXLE DC A(SVC_types_START,TYPES_entry_len,TYPES_end-TYPES_enX\n               try_len)                                             @14\n*                                                                   @14\nSVC_types_START DS 0H\n         DC    C'1',X'01',X'00'    Type 1 SVC equates\nTYPES_entry_len EQU *-SVC_types_START                               @14\n         DC    C'2',X'02',X'80'    Type 2 SVC equates\n         DC    C'3',X'03',X'C0'    Type 3 or 4 SVC equates\n         DC    C'4',X'04',X'C0'    Type 3 or 4 SVC equates\n         DC    C'6',X'06',X'20'    Type 6 SVC equates\nTYPES_end EQU  *-SVC_types_START                                    @14\n*                                                                   @14\n*        Multi-line WTO audit text                                  @14\n*                                                                   @14\nMLWTOPREFIX DS 0H                                                   @14\nCNTLLINE DC    Y(34),CL34'SVCU000I SVC install audit report'        @14\n* Following lines thru DATALINE8 added by @14 change                @14\n*                         000000000111111111122222222223333333333444444\n*                         123456789012345678901234567890123456789012345\n*              4444555555555566666666667\n*              6789012345678901234567890\nSTARLINE DC    Y(70),CL70'SVCU001I ************************************X\n               *************************'                           @14\nDATALINE2  DC  Y(70),CL70'SVCU002I * Installing userid=_        LMOD=_ X\n                      SIZE: _          *'                           @14\nDATALINE2_userid EQU DATALINE2+2+29,8  requesting uid               @14\nDATALINE2_LMOD   EQU DATALINE2+2+43,8  LMOD                         @14\nDATALINE2_SIZE   EQU DATALINE2+2+58,8  SIZE                         @14\n*                                                                   @14\nDATALINE3  DC  Y(70),CL70'SVCU003I * Entry_point: _        Load_point: X\n               _                       *'                           @14\nDATALINE3_EP     EQU DATALINE3+2+24,8  Entry Point                  @14\nDATALINE3_LP     EQU DATALINE3+2+45,8  Load Point                   @14\n*                                                                   @14\nDATALINE4  DC  Y(70),CL70'SVCU004I * AMODE=_  RMODE=_   Old SVC entry pX\n               oint: _                 *'                           @14\nDATALINE4_AMODE  EQU DATALINE4+2+17,2  AMODE (31|24|ANY)            @14\nDATALINE4_RMODE  EQU DATALINE4+2+26,3  RMODE (31|24|ANY)            @14\nDATALINE4_OLDEP  EQU DATALINE4+2+51,8  Old SVC EP                   @14\n*                                                                   @14\nDATALINE5  DC  Y(70),CL70'SVCU005I * DSN=_                             X\n                              / _      *'                           @14\nDATALINE5_SVCLIB EQU DATALINE5+2+15,44 SVCLIB data set              @14\nDATALINE5_VOLSER EQU DATALINE5+2+62,6  VOLSER for SVCLIB            @14\n*                                                                   @14\nDATALINE6  DC  Y(70),CL70'SVCU006I * Address of ESQA resident USER filtX\n               er code is _            *'                           @14\nDATALINE6_ESQA@ EQU DATALINE6+2+56,8 ESQA @ of filter code or \"n/a\" @14\n*                                                                   @14\nDATALINE7  DC  Y(70),CL70'SVCU007I * PARM: _                           X\n                                       *'                           @14\nDATALINE7_PARM EQU DATALINE7+2+17,51 1st 51 bytes of PARM field     @14\n*                                                                   @14\nDATALINE8  DC  Y(70),CL70'SVCU009I *                                   X\n                                       *'                           @14\nDATALINE8_PARM EQU DATALINE8+2+11,49 2nd 49 bytes of PARM field     @14\n*                                                                   @14\nSTARLINE2 DC   Y(70),CL70'SVCU001I ************************************X\n               *************************'                           @14\n*                                                                   @14\nMLWTOSUFFIX DS 0H                                                   @14\nMLWTOTLEN EQU  MLWTOSUFFIX-MLWTOPREFIX Generate length              @14\n*                                                                   @14\n*        MLWTO model                                                @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nVMC002I  WTO   TEXT=((,C),(,D),(,D),(,D),(,D),(,D),(,D),(,D),(,D),(,D),X\n               (,E)),                                               @14X\n               ROUTCDE=(11),                                        @14X\n               MF=L                                                 @14\nVMC002IL EQU   *-VMC002I                                            @14\n*              (,DE)),                                              @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - Initialization related WTOs'             @14\n******************************************************************* @14\n*                                                                 * @14\n*        Initialization/Environmental related WTOs                * @14\n*                                                                 * @14\n*        0nnA - Action required                                   * @14\n*                                                                 * @14\n******************************************************************* @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG200I  WTO   'SVCU200I - Old SVC entry point at ________ with all attX\n               ributes and locks restored',ROUTCDE=(11),MF=L        @14\nMSG200IL EQU   *-MSG200I                                            @14\nMSG200IA EQU   WTOD+4+34,8         Old SVC entry point              @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG001A  WTO   'SVCU001A - PARM/PARMDD supplied input parameters missinX\n               g - terminating',ROUTCDE=(11),MF=L                   @14\nMSG001AL EQU   *-MSG001A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG002A  WTO   'SVCU002A - Excessive input parameter length (>200) - teX\n               rminating',ROUTCDE=(11),MF=L                         @14\nMSG002AL EQU   *-MSG002A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG003A  WTO   'SVCU003A - unsupported characters found in input parameX\n               ter string',ROUTCDE=(11),MF=L                        @14\nMSG003AL EQU   *-MSG003A                                            @14\n*                                                                   @14\nMSG004A  WTO   'SVCU004A - SVCLIB DD missing',                      @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG004AL EQU   *-MSG004A                                            @14\n*                                                                   @14\nMSG005A  WTO   'SVCU005A - Unsupported PARM field found',           @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG005AL EQU   *-MSG005A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG006A  WTO   'SVCU006A - Minimum length PARM not supplied for INSTALLX\n                operation',                                         @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG006AL EQU   *-MSG006A                                            @14\n*                                                                   @14\nMSG007A  WTO   'SVCU007A - Duplicate keyword found in PARM field',  @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG007AL EQU   *-MSG007A                                            @14\n*                                                                   @14\nMSG010A  WTO   'SVCU010A - Invalid length LMOD parameter detected', @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG010AL EQU   *-MSG010A                                            @14\n*\nMSG011A  WTO   'SVCU011A - Invalid length USER parameter detected', @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG011AL EQU   *-MSG011A                                            @14\n*                                                                   @14\nMSG012A  WTO   'SVCU012A - \"Null\" LMOD keyword parameter detected', @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG012AL EQU   *-MSG012A                                            @14\n*\nMSG013A  WTO   'SVCU013A - \"Null\" USER keyword parameter detected', @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG013AL EQU   *-MSG013A                                            @14\n*                                                                   @14\nMSG014A  WTO   'SVCU014A - \"Null\" TYPE keyword parameter detected', @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG014AL EQU   *-MSG014A                                            @14\n*\nMSG015A  WTO   'SVCU015A - Invalid length TYPE parameter detected', @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG015AL EQU   *-MSG015A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG017A  WTO   'SVCU017A - Insufficient virtual storage for IRRSEQ00 woX\n               rkarea',ROUTCDE=(11),MF=L                            @14\nMSG017AL EQU   *-MSG017A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG018A  WTO   'SVCU018A - Insufficient virtual storage for RIBs workarX\n               ea',ROUTCDE=(11),MF=L                                @14\nMSG018AL EQU   *-MSG018A                                            @14\n*\nMSG019A  WTO   'SVCU019A - Invalid TYPE keyword specification',     @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG019AL EQU   *-MSG019A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG020A  WTO  'SVCU020A - SVCUPDTE cannot execute under TEST/TESTAUTH',X\n               ROUTCDE=(11),MF=L                                    @14\nMSG020AL EQU   *-MSG020A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG021A  WTO   'SVCU021A - illegal execution environment - cannot execuX\n               te under TSO',ROUTCDE=(11),MF=L                      @14\nMSG021AL EQU   *-MSG021A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG022A  WTO   'SVCU022A - illegal execution environment - fork/spawn',X\n               ROUTCDE=(11),MF=L                                    @14\nMSG022AL EQU   *-MSG022A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG023A  WTO   'SVCU023A - illegal execution environment - not batch', X\n               ROUTCDE=(11),MF=L                                    @14\nMSG023AL EQU   *-MSG023A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG024A  WTO   'SVCU024A - illegal execution environment - not job stepX\n                TCB',ROUTCDE=(11),MF=L                              @14\nMSG024AL EQU   *-MSG024A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG025A  WTO   'SVCU025A - illegal execution environment - not first prX\n               ogram in TCB',ROUTCDE=(11),MF=L                      @14\nMSG025AL EQU   *-MSG025A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG026A  WTO   'SVCU026A - Unable to obtain work area for MLWTO audit rX\n               eport - Please report',ROUTCDE=(11),MF=L             @14\nMSG026AL EQU   *-MSG026A                                            @14\n*\nMSG027A  WTO   'SVCU027A - TYPE must be 1, 2, 3, 4 or 6',           @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG027AL EQU   *-MSG027A                                            @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - Environmental related WTOs'              @14\n******************************************************************* @14\n*                                                                 * @14\n*        Environmental related WTOs = 1nnE series                 * @14\n*                                                                 * @14\n******************************************************************* @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG128E  WTO   'SVCU128E - REPORT - unable to allocate report sysout daX\n               ta set. Please report.',ROUTCDE=(11),MF=L            @14\nMSG128EL EQU   *-MSG128E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG129E  WTO   'SVCU129E - REPORT - SVC99RC=________ S99ERROR=________ X\n               S99INFO=________ ',ROUTCDE=(11),MF=L                 @14\nMSG129EL EQU   *-MSG129E                                            @14\nMSG129EA EQU   WTOD+32,8           SVC 99 R15 result                @14\nMSG129EB EQU   WTOD+50,8           SVC 99 S99ERROR                  @14\nMSG129EC EQU   WTOD+67,8           SVC 99 S99INFO                   @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG130E  WTO   'SVCU130E - Unable to obtain 0x12345678 bytes of CSA/ECSX\n               A for LMOD=12345678',ROUTCDE=(11),MF=L               @14\nMSG130EL EQU   *-MSG130E                                            @14\nMSG130EA EQU   WTOD+34,8           CSA/ECSA amount                  @14\nMSG130EB EQU   WTOD+70,8           LMOD name                        @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG131E  WTO   'SVCU131E - Unable to obtain SQA for USER filter code', X\n               ROUTCDE=(11),MF=L                                    @14\nMSG131EL EQU   *-MSG131E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG146E  WTO   'SVCU146E - REPORT - OPEN for report file failed. PleaseX\n                report.',ROUTCDE=(11),MF=L                          @14\nMSG146EL EQU   *-MSG146E                                            @14\n*                                                                   @14\nMSG200A  WTO   'SVCU200A - LMOD=________ not marked RENT',          @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG200AL EQU   *-MSG200A                                            @14\nMSG200AA EQU   WTOD+4+16,8         LMOD                             @14\n*                                                                   @14\nMSG201A  WTO   'SVCU201A - LMOD=________ not marked REUS',          @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG201AL EQU   *-MSG201A                                            @14\nMSG201AA EQU   WTOD+4+16,8         LMOD                             @14\n*                                                                   @14\nMSG202A  WTO   'SVCU202A - LMOD=________ not marked REFR',          @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG202AL EQU   *-MSG202A                                            @14\nMSG202AA EQU   WTOD+4+16,8         LMOD                             @14\n*                                                                   @14\nMSG203A  WTO   'SVCU203A - LMOD=________ not marked EXEC',          @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG203AL EQU   *-MSG203A                                            @14\nMSG203AA EQU   WTOD+4+16,8         LMOD                             @14\n*                                                                   @14\nMSG204A  WTO   'SVCU204A - LMOD=________ cannot be OVLY format',    @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG204AL EQU   *-MSG204A                                            @14\nMSG204AA EQU   WTOD+4+16,8         LMOD                             @14\n*                                                                   @14\nMSG205A  WTO   'SVCU205A - LMOD=________ cannot be SCTR format',    @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG205AL EQU   *-MSG205A                                            @14\nMSG205AA EQU   WTOD+4+16,8         LMOD                             @14\n*                                                                   @14\nMSG206A  WTO   'SVCU206A - LMOD=________ cannot be RMODE=SPLIT',    @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG206AL EQU   *-MSG206A                                            @14\nMSG206AA EQU   WTOD+4+16,8         LMOD                             @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG207A  WTO   'SVCU207A - LMOD=________ marked TEST/TESTRAN (not suppoX\n               rted)',ROUTCDE=(11),MF=L                             @14\nMSG207AL EQU   *-MSG207A                                            @14\nMSG207AA EQU   WTOD+4+16,8         LMOD                             @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG208A  WTO   'SVCU208A - LMOD=________ not found on 1st library in SVX\n               CLIB concatenation sequence',ROUTCDE=(11),MF=L       @14\nMSG208AL EQU   *-MSG208A                                            @14\nMSG208AA EQU   WTOD+4+16,8         LMOD                             @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - RACF/SAF related WTOs'                   @14\n******************************************************************* @14\n*                                                                 * @14\n*        RACF/SAF related WTOs = 2nnE series                      * @14\n*                                                                 * @14\n******************************************************************* @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - Program error WTOs'                      @14\n******************************************************************* @14\n*                                                                 * @14\n*        Program error WTOs = 3nnE series                         * @14\n*                                                                 * @14\n* Note: These are conditions that should not occur in the natural * @14\n*       world.                                                    * @14\n*                                                                 * @14\n******************************************************************* @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - ERROR level WTOs'                        @14\n******************************************************************* @14\n*                                                                 * @14\n*        ERROR level WTOs                                         * @14\n*                                                                 * @14\n******************************************************************* @14\n* Following line added by @14 change                                @14\nMSG100E  WTO   'SVCU100E - SAF failure in EXTR000 routine. Please reporX\n               t.',ROUTCDE=(11),MF=L                                @14\nMSG100EL EQU   *-MSG100E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG101E  WTO   'SVCU101E - SAFRC=________ RACFRC________ RACFRS=_______X\n               _ ',ROUTCDE=(11),MF=L                                @14\nMSG101EL EQU   *-MSG101E                                            @14\n*                                                                   @14\nMSG101EA EQU   WTOD+21,8           SAF Return Code                  @14\nMSG101EB EQU   WTOD+36,8           RACF Return Code                 @14\nMSG101EC EQU   WTOD+52,8           RACF Reason Code                 @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG102E  WTO   'SVCU102E - ERRET routine driven during IKJTSOEV LINK prX\n               ocessing',                                           @14X\n               ROUTCDE=11,MF=L                                      @14\nMSG102EL EQU   *-MSG102E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG103E  WTO   'SVCU103E - No SVCUPDTE profiles found in CLASS(#SNOMISCX\n               )',ROUTCDE=(11),MF=L                                 @14\nMSG103EL EQU   *-MSG103E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG104E  WTO   'SVCU104E - CLASS(#SNOMISC) profile not returned. PleaseX\n                report.',ROUTCDE=(11),MF=L                          @14\nMSG104EL EQU   *-MSG104E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG105E  WTO   'SVCU105E - Segment descriptor # not 1. Please report.',X\n               ROUTCDE=(11),MF=L                                    @14\nMSG105EL EQU   *-MSG105E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG106E  WTO   'SVCU106E - Segment returned not BASE. Please report.', X\n               ROUTCDE=(11),MF=L                                    @14\nMSG106EL EQU   *-MSG106E                                            @14\n*                                                                   @14\nMSG107E  WTO   'SVCU107E - EPNAME module is RMODE=SPLIT',           @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG107EL EQU   *-MSG107E                                            @14\n*                                                                   @14\nMSG120I  WTO   'SVCU120I - ADMN_PROF_FIELDNAME=________ ',          @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG120IL EQU   *-MSG120I                                            @14\nMSG120IA EQU   WTOD+35,8           ADMN_PROF_FIELDNAME value        @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG115E  WTO   'SVCU115E - R_admin service failed to load. Please reporX\n               t.',ROUTCDE=(11),MF=L                                @14\nMSG115EL EQU   *-MSG115E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG116E  WTO   'SVCU116E - REPORT - LOAD R1=________ R15=________ ',   X\n               ROUTCDE=(11),MF=L                                    @14\nMSG116EL EQU   *-MSG116E                                            @14\n*                                                                   @14\nMSG116EA EQU   WTOD+4+28,8     LOAD R1 result (system completion)   @14\nMSG116EB EQU   WTOD+4+41,8     LOAD R15 result (reason code)        @14\n*                                                                   @14\n         PUSH  PRINT                                                @14\n         PRINT DATA,GEN                                             @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - ACTION level WTOs'                       @14\n******************************************************************* @14\n*                                                                 * @14\n*        ACTION level WTOs                                        * @14\n*                                                                 * @14\n******************************************************************* @14\n*                                                                   @14\n*        ZEROES                                                     @14\n*                                                                   @14\n*                                                                   @14\n*        ONE HUNDREDS (initialization related events)               @14\n*                                                                   @14\n*                                                                   @14\n*        TWO HUNDREDS (IRRSEQ00 extraction related events)          @14\n*                                                                   @14\n*                                                                   @14\n*        NINE HUNDREDS (execution related events)                   @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG901W  WTO   'SVCU901W - Invalid length SVCUPDTE_* profile detected oX\n               n database.',                                        @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG901WL EQU   *-MSG901W                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG902A  WTO   'SVCU902A - Profile starts with: _              . It wilX\n               l be skipped in report.',                            @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG902AL EQU   *-MSG902A                                            @14\nMSG902AA EQU   WTOD+36,15       Maximum len profile name to display @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG903A  WTO   'SVCU903A - Invalid length OWNER field detected on databX\n               ase.',                                               @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG903AL EQU   *-MSG903A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG904A  WTO   'SVCU904A - Invalid length DATA field detected on databaX\n               se.',                                                @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG904AL EQU   *-MSG904A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG905A  WTO   'SVCU905A - Invalid length UACC field detected on databaX\n               se.',                                                @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG905AL EQU   *-MSG905A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG905I  WTO   'SVCU905I - ENQ for SVC table failed/R15=________ - retrX\n               ying in 5 seconds',                                  @14X\n               ROUTCDE=(11),                                        @14X\n               DESC=3,                                              @14X\n               MF=L                                                 @14\nMSG905IL EQU   *-MSG905I                                            @14\nMSG905IA EQU   WTOD+4+40,8         ENQ returned R15 value           @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG906I  WTO   'SVCU906I - ESTAE ENQ for SVC table failed/R15=________ X\n               - retrying in 5 seconds',                            @14X\n               ROUTCDE=(11),                                        @14X\n               DESC=3,                                              @14X\n               MF=L                                                 @14\nMSG906IL EQU   *-MSG906I                                            @14\nMSG906IA EQU   WTOD+4+46,8         ENQ returned R15 value           @14\n*                                                                   @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG906A  WTO   'SVCU906A - Unexpected GQSCAN condition: R15=12345678 R0X\n               =12345678. Please report.',                          @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG906AL EQU   *-MSG906A                                            @14\n*                                                                   @14\nMSG906AA EQU   WTOD+4+44,8         GQSCAN R15 value                 @14\nMSG906AB EQU   WTOD+4+56,8         GQSCAN R0  value                 @14\n*                                                                   @14\nMSG907A  WTO   'SVCU907A - Profile involved was 123456789012345 ',  @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG907AL EQU   *-MSG907A                                            @14\nMSG907AA EQU   WTOD+4+32,15        Profile involved in 906A message @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG908A  WTO   'SVCU908A - Resource _______________ found to be in use X\n               by ________ in ASID 0x____',                         @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG908AL EQU   *-MSG908A                                            @14\nMSG908AA EQU   WTOD+4+20,15        In use resource name             @14\nMSG908AB EQU   WTOD+4+58,8         In use job name                  @14\nMSG908AC EQU   WTOD+4+77,4         In use ASID                      @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG909A  WTO   'SVCU909A - Unexpected ENQ failure during install: R15=0X\n               1234567 - Please report.',                           @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG909AL EQU   *-MSG909A                                            @14\n*                                                                   @14\nMSG909AA EQU   WTOD+4+54,8         ENQ R15 value                    @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG910A  WTO   'SVCU910A - Could not get exclusive use of QNAME=SVCZSVCX\n               /RNAME=TABLE',                                       @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG910AL EQU   *-MSG910A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG911A  WTO   'SVCU911A - R15=________ - Please try again and report iX\n               f it fails again',                                   @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG911AL EQU   *-MSG911A                                            @14\n*                                                                   @14\nMSG911AA EQU   WTOD+4+15,8         ENQ R15 value                    @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG912A  WTO   'SVCU912A - SVCUPDTE service for new SVC code failed',  X\n               ROUTCDE=(11),MF=L                                    @14\nMSG912AL EQU   *-MSG912A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG913A  WTO   'SVCU913A - SVCUPDTE service returned R15=12345678 - PleX\n               ase report',                                         @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG913AL EQU   *-MSG913A                                            @14\n*                                                                   @14\nMSG913AA EQU   WTOD+4+41,8         ENQ R15 value                    @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG914A  WTO   'SVCU914A - QEDIT START free failure/R15=12345678 - PleaX\n               se report',                                          @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG914AL EQU   *-MSG914A                                            @14\n*                                                                   @14\nMSG914AA EQU   WTOD+4+40,8         QEDIT R15 value                  @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG915A  WTO   'SVCU915A - Unable to obtain SVC table ENQ for reversal X\n               - Please report',                                    @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG915AL EQU   *-MSG915A                                            @14\n*                                                                   @14\nMSG916A  WTO   'SVCU916A - ABEND 901 forced',                       @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG916AL EQU   *-MSG916A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG917A  WTO   'SVCU917A - QEDIT CIBCTR failure/R15=12345678 - Please rX\n               eport',                                              @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG917AL EQU   *-MSG917A                                            @14\n*                                                                   @14\nMSG917AA EQU   WTOD+4+36,8         QEDIT R15 value                  @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG918A  WTO   'SVCU918A - SVCUPDTE service failed to restore old SVC',X\n               ROUTCDE=(11),MF=L                                    @14\nMSG918AL EQU   *-MSG918A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG919A  WTO   'SVCU919A - SVCUPDTE service R15=________ - Please reporX\n               t',ROUTCDE=(11),MF=L                                 @14\nMSG919AL EQU   *-MSG919A                                            @14\nMSG919AA EQU   WTOD+4+32,8         SVCUPDTE service R15 value       @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG008A  WTO   'SVCU008A - user not authorized for CL(#SNOMISC) resourcX\n               e _              ',ROUTCDE=(11),MF=L                 @14\nMSG008AL EQU   *-MSG008A                                            @14\nMSG008AB EQU   WTOD+4+57,15        CL(#SNOMISC) resource            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG009A  WTO   'SVCU009A - no protecting profile exists for SVCUPDTE_nnX\n               n    - request is being failed ',ROUTCDE=(11),MF=L   @14\nMSG009AL EQU   *-MSG009A                                            @14\nMSG009AA EQU   WTOD+4+44,15        Missing profile name             @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG008I  WTO   'SVCU008I - AUTH check failed w/ R15=________ SAFRC=____X\n               ____ SAFRSN=________ ',ROUTCDE=(11),MF=L             @14\nMSG008IL EQU   *-MSG008I                                            @14\nMSG008IA EQU   WTOD+4+36,8         RACF return code                 @14\nMSG008IB EQU   WTOD+4+51,8         SAF return code                  @14\nMSG008IC EQU   WTOD+4+67,8         SAF reason code                  @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG012I  WTO   'SVUC012I - ENQ failed - another copy of SVCUPDTE has cuX\n               rrently installed the same SVC',ROUTCDE=(11),MF=L    @14\nMSG012IL EQU   *-MSG012I                                            @14\n*                                                                   @14\n* Next line added by @14 change                                     @14\nMSG016A  WTO   'SVCU016A - EPNAME module not found on SVCLIB library', X\n               ROUTCDE=(11),MF=L                                    @14\nMSG016AL EQU   *-MSG016A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG016I  WTO   'SVCU016I - EPNAME=________ failed with R15=__ R0=__ ', X\n               ROUTCDE=(11),MF=L                                    @14\nMSG016IL EQU   *-MSG016I                                            @14\nMSG016IA EQU   WTOD+22,8           EPNAME                           @14\nMSG016IB EQU   WTOD+47,2           BLDL return code (R15)           @14\nMSG016IC EQU   WTOD+53,2           BLDL reason code (R0)            @14\n*                                                                   @14\nMSG028A  WTO   'SVCU028A - SVCUPDTE program is not APF authorized', @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG028AL EQU   *-MSG028A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG029A  WTO  'SVCU029A - Backing slot for requested SVCNO not T2/3/4',X\n               ROUTCDE=(11),MF=L                                    @14\nMSG029AL EQU   *-MSG029A                                            @14\n*                                                                   @14\nMSG030A  WTO   'SVCU030A - \"Null\" GOODNITE keyword specification',  @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG030AL EQU   *-MSG030A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG031A  WTO   'SVCU031A - Invalid length GOODNITE parameter detected',X\n               ROUTCDE=(11),MF=L                                    @14\nMSG031AL EQU   *-MSG031A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG032A  WTO   'SVCU032A - Invalid PARM field detected - IKJPARS RC=123X\n               45678 ',ROUTCDE=11,MF=L                              @14\nMSG032AL EQU   *-MSG032A                                            @14\nMSG032AA EQU   WTOD+56,8           IKJPARS return code              @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG033A  WTO   'SVCU033A - IKJPARS returned ANSwer area value of 0xFF00X\n               0000',ROUTCDE=11,MF=L                                @14\nMSG033AL EQU   *-MSG033A                                            @14\n*                                                                   @14\nMSG034A  WTO   'SVCU034A - Required LMOD parameter missing',        @14X\n               ROUTCDE=11,MF=L                                      @14\nMSG034AL EQU   *-MSG034A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG035A  WTO   'SVCU035A - Check SYSTSPRT output for PARSE failure detaX\n               ils',ROUTCDE=11,MF=L                                 @14\nMSG035AL EQU   *-MSG035A                                            @14\n*                                                                   @14\nMSG036A  WTO   'SVCU036A - ESR T1/T2/T6 SVC entries not supported', @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG036AL EQU   *-MSG036A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG037A  WTO   'SVCU037A - Required SVC keyword specification missing',X\n               ROUTCDE=(11),MF=L                                    @14\nMSG037AL EQU   *-MSG037A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG038A  WTO   'SVCU038A - TYPE and ESR SVC# are mutually exclusive',  X\n               ROUTCDE=(11),MF=L                                    @14\nMSG038AL EQU   *-MSG038A                                            @14\n*                                                                   @14\nMSG039A  WTO   'SVCU039A - Routing SVC # supplied with TYPE',       @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG039AL EQU   *-MSG039A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG040A  WTO   'SVCU040A - SVC# request < 200 requires RACF \"Global SpeX\n               cial\" authority',ROUTCDE=(11),MF=L                   @14\nMSG040AL EQU   *-MSG040A                                            @14\n*                                                                   @14\nMSG041A  WTO   'SVCU041A - SVC# value not in range 0-255',          @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG041AL EQU   *-MSG041A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG042A  WTO   'SVCU042A - Routing code must be in range 0-255 for T3/4X\n                ESR SVC',ROUTCDE=(11),MF=L                          @14\nMSG042AL EQU   *-MSG042A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG043A  WTO   'SVCU043A - Routing code must be in range 0-14 for T1 ESX\n               R SVC',ROUTCDE=(11),MF=L                             @14\nMSG043AL EQU   *-MSG043A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG044A  WTO   'SVCU044A - Routing code must be in range 0-19 for T2 ESX\n               R SVC',ROUTCDE=(11),MF=L                             @14\nMSG044AL EQU   *-MSG044A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG045A  WTO   'SVCU045A - Routing code must be in range 0-7 for T6 ESRX\n                SVC',ROUTCDE=(11),MF=L                              @14\nMSG045AL EQU   *-MSG045A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG046A  WTO   'SVCU046A - Invalid SVC#/ESR# logic detected - abending X\n               U333',ROUTCDE=(11),MF=L                              @14\nMSG046AL EQU   *-MSG046A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG047A  WTO   'SVCU047A - Use of Router SVC# requires ESR function codX\n               e be coded',ROUTCDE=(11),MF=L                        @14\nMSG047AL EQU   *-MSG047A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG048A  WTO   'SVCU048A - Use of SVC # that is not part of the ESR reqX\n               uires TYPE be specified.',ROUTCDE=(11),MF=L          @14\nMSG048AL EQU   *-MSG048A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG049A  WTO   'SVCU049A - SRM, SALLOC and DISP locks can only be speciX\n               fied by a RACF Global Special userid',               @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG049AL EQU   *-MSG049A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG050S  WTO   'SVCU050S - logic error in TYPE assignment - abending U3X\n               34',ROUTCDE=(11),MF=L                                @14\nMSG050SL EQU   *-MSG050S                                            @14\n*                                                                   @14\nMSG044E  WTO   'SVCU044E - OPEN for SVCLIB library failed',         @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG044EL EQU   *-MSG044E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG048S  WTO   'SVCU048S - SWAREQ UNAUTH=YES failure on SVCLIB - R15=__X\n               ______ ',ROUTCDE=(11),MF=L                           @14\nMSG048SL EQU   *-MSG048S                                            @14\nMSG048SA EQU   WTOD+57,8           Offset to R15 hex display        @14\n*                                                                   @14\nMSG052E  WTO   'SVCU052E - SVCLIB data set not DSORG=PO/POE',       @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG052EL EQU   *-MSG052E                                            @14\n*                                                                   @14\nMSG056E  WTO   'SVCU056E - SVCLIB data set not RECFM=U',            @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG056EL EQU   *-MSG056E                                            @14\n*                                                                   @14\nMSG060E  WTO   'SVCU060E - SVCLIB library cannot be multi-volume',  @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG060EL EQU   *-MSG060E                                            @14\n*                                                                   @14\n* Next line added by @14 change                                     @14\nMSG064E  WTO   'SVCU064E - Member specification for allowed on SVCLIB DX\n               Dname',ROUTCDE=(11),MF=L                             @14\nMSG064EL EQU   *-MSG064E                                            @14\n*                                                                   @14\nMSG068E  WTO   'SVCU068E - Invalid LOCKS parameter supplied',       @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG068EL EQU   *-MSG068E                                            @14\n*                                                                   @14\nMSG072E  WTO   'SVCU072E - SVC number parameter not numeric',       @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG072EL EQU   *-MSG072E                                            @14\n*                                                                   @14\nMSG076E  WTO   'SVCU076E - Goodnight (HHMM) parameter not numeric', @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG076EL EQU   *-MSG076E                                            @14\n*                                                                   @14\nMSG080E  WTO   'SVCU080E - SVCNO parameter not in range 0-255',     @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG080EL EQU   *-MSG080E                                            @14\n*                                                                   @14\n* Next line added by @14 change                                     @14\nMSG084E  WTO   'SVCU084E - Goodnight (HHMM) parameter out of 0001-2359 X\n               range',ROUTCDE=(11),MF=L                             @14\nMSG084EL EQU   *-MSG084E                                            @14\n*                                                                   @14\nMSG088E  WTO   'SVCU088E - Goodnight time < current time (HHMM)',   @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG088EL EQU   *-MSG088E                                            @14\n*                                                                   @14\nMSG092E  WTO   'SVCU092E - ESR T3/4 naming convention violation',   @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG092EL EQU   *-MSG092E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG096A  WTO   'SVCU096A - EPNAME module attribute requirements not metX\n               ',ROUTCDE=(11),MF=L                                  @14\nMSG096AL EQU   *-MSG092E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG096I  WTO   'SVCU096I - module must be RENT, REFR, REUS, EXEC, OVLY=X\n               NO, and SCTR=NO',ROUTCDE=(11),MF=L                   @14\nMSG096IL EQU   *-MSG092E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG100A  WTO   'SVCU100A - LOAD for EPNAME failed: R1=________ R15=____X\n               ____ ',ROUTCDE=(11),MF=L                             @14\nMSG100AL EQU   *-MSG100A                                            @14\nMSG100AA EQU   WTOD+42,8           LOAD abend code                  @14\nMSG100AB EQU   WTOD+55,8           LOAD reason code                 @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG108E  WTO   'SVCU108E - insufficient private storage for EPNAME copyX\n               ',ROUTCDE=(11),MF=L                                  @14\nMSG108EL EQU   *-MSG108E                                            @14\n*                                                                   @14\nMSG109E  WTO   'SVCU109E - IKJTSOEV returned RC=________ ',         @14X\n               ROUTCDE=11,MF=L                                      @14\nMSG109EL EQU   *-MSG109E                                            @14\nMSG109EA EQU   WTOD+36,8                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG112S  WTO   'SVCU112S - Bad logic (loc #__) - R15=________ - please X\n               report',ROUTCDE=(11),MF=L                            @14\nMSG112SL EQU   *-MSG112S                                            @14\nMSG112SA EQU   WTOD+31,2           Logic location identifier        @14\nMSG112SB EQU   WTOD+41,8           R15 value                        @14\n*                                                                   @14\n* New line added by @14 change                                      @14\nMSG120A  WTO   'SVCU120A - STORAGE OBTAIN for CSA/ECSA failed R15=_____X\n               ___ ',ROUTCDE=(11),MF=L                              @14\nMSG120AL EQU   *-MSG120A                                            @14\nMSG120AA EQU   WTOD+54,8           STORAGE request return code      @14\n*                                                                   @14\n         TITLE 'Environmental condition message WTOs'               @14\nMSG900I  WTO   'SVCU900I - Type 1 SVCs cannot specify LOCAL lock',  @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG900IL EQU   *-MSG900I                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG901I  WTO   'SVCU901I - Type 3/4 SVCs/ESR SVCs can use only LOCAL orX\n                LOCAL+CMS locks',ROUTCDE=(11),MF=L                  @14\nMSG901IL EQU   *-MSG901I                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG902I  WTO   'SVCU902I - Type 6 SVCs/ESR SVCs cannot specify any lockX\n               s',ROUTCDE=(11),MF=L                                 @14\nMSG902IL EQU   *-MSG902I                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG903E  WTO   'SVCU903E - LOGIC ERROR - Invalid SVC type passed parsinX\n               g - ABEND U1001 forced',ROUTCDE=(11),MF=L            @14\nMSG903EL EQU   *-MSG903E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG904E  WTO   'SVCU904E - user not authorized to request LOCK=_23456 'X\n               ,ROUTCDE=(11),MF=L                                   @14\nMSG904EL EQU   *-MSG904E                                            @14\nMSG904EA EQU   WTOD+50,6           LOAD reason code                 @14\n         POP   PRINT                                                @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - DIAGNOSTIC level WTOs'                   @14\nMSG700D  WTO   'SVCU700D - Profile: 123456789012345 ',              @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG700DL EQU   *-MSG700D                                            @14\n*                                                                   @14\nMSG700DA EQU   WTOD+4+20,15        Profile name                     @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG701D  WTO   'SVCU701D - Installation data: 1234567890123456789012345X\n               678901234567890 ',                                   @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG701DL EQU   *-MSG701D                                            @14\n*                                                                   @14\nMSG701DA EQU   WTOD+4+30,40        Profile installation data        @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG701I  WTO   'SVCU701I - RACF GLOBAL \"SPECIAL\" userid=         in effX\n               ect',ROUTCDE=(11),MF=L                               @14\nMSG701IL EQU   *-MSG701I                                            @14\nMSG701IA EQU   WTOD+44,8           ACEEUSRI via EUSER               @14\n*                                                                   @14\nMSG702D  WTO   'SVCU702D - OWNER: 12345678   UACC: 1234567 ',       @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG702DL EQU   *-MSG702D                                            @14\n*                                                                   @14\nMSG702DA EQU   WTOD+4+18,8         Profile owner                    @14\nMSG702DB EQU   WTOD+4+35,7         Profile default access           @14\n*                                                                   @14\nMSG703D  WTO   'SVCU703D - aclid___: aclacs_ ',                     @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG703DL EQU   *-MSG703D                                            @14\n*                                                                   @14\nMSG703DA EQU   WTOD+4+11,8         ACLID subfield value             @14\nMSG703DB EQU   WTOD+4+21,7         ACLACS subfield value            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG704D  WTO   'SVCU704D - Status: SVC slot is not currently in use.', X\n               ROUTCDE=(11),MF=L                                    @14\nMSG704DL EQU   *-MSG704D                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG705D  WTO   'SVCU705D - Status: SVC slot currently in use by job namX\n               e 12345678 in ASID 0x1234.',                         @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG705DL EQU   *-MSG705D                                            @14\n*                                                                   @14\nMSG705DA EQU   WTOD+4+57,8         GQSCAN requestor job name        @14\nMSG705DB EQU   WTOD+4+76,4         GQSCAN requestor ASID            @14\n*                                                                   @14\n         TITLE 'SVCUPDTE -- Litterals && Constants'                 @14\n         DS    0D                  Alignment                        @14\nLTORG_AREA LOCTR ,                                                  @14\n*                                                                   @14\n*  Literal pool                                                     @14\n*                                                                   @14\n         LTORG                                                      @14\n         AGO   .JH9996A                                             @14\nVL       EQU   X'80000000'         31-bit AMODE indicator           @14\nIGX00GSF EQU   203                 ESR-T3 SVC function code         @14\n.JH9996A ANOP                                                       @14\n         DS    D              Place STIMER value on D-WORD boundary @14\nHOWLONG  DC    C'00000500'         Wait for 5 seconds               @14\n*                hhmmssth          - for immediately above format   @14\n*                                                                   @14\n*       RIBS (Query command) initializer                            @14\n*                                                                   @14\n         DS    0F                                                   @14\nRIBSINIT DC    A(0)                                                 @14\n         DC    F'1024'                                              @14\n         DC    CL8'SVCUPDTE'                                        @14\n         DC    CL7'_ESRnnn'        SVC slot (ESR & non-ESR)         @14\nRIBSINIL EQU   *-RIBSINIT                                           @14\n*                                                                   @14\nGQSMAP   GQSCAN MF=L                                                @14\nGQSMAPL  EQU   *-GQSMAP                                             @14\n*                                                                   @14\n*        Numeric constants                                          @14\n*                                                                   @14\nMinimum_profname_length EQU X'000C' Minimum SVCUPDTE profile length @14\nMaximum_profname_length EQU X'000F' Maximum SVCUPDTE profile length @14\n*                                                                   @14\nMAXLINES DC    PL2'64'             Set max lines/page count         @14\nEDIT_page_# DC XL08'4020202020202021'          99,999k pattern      @14\n*                                                                   @14\n*        Model DCB for SYSPRINT                                     @14\n*                                                                   @14\nX#DCB1   DCB   DDNAME=*-*,DSORG=PS,MACRF=PM,RECFM=FA,LRECL=133      @14\nX#DCB1L  EQU   *-X#DCB1            Length of model DCB              @14\n*                                                                   @14\nX#OPNDO  OPEN  (1,(OUTPUT)),MODE=31,MF=L OPEN/CLOSE execute list    @14\nX#OPNDOL EQU   *-X#OPNDO           Length of OPEN list              @14\n*                                                                   @14\nPUTCODE  PUT   (1),(0)             PUT pattern code                 @14\n         BSM   0,R2                Return                           @14\nPUTLEN   EQU   *-PUTCODE           Length of PUT code               @14\n*                                                                   @14\n* Model DCB for SVCLIB (copied to <16MB storage)                    @14\n*                                                                   @14\n         DS    0F                                                   @14\nINDCB#   DCB   DDNAME=SVCLIB,DSORG=PO,MACRF=R,RECFM=U               @14\nINDCB#L  EQU   *-INDCB#            Generate length of model DCB     @14\n*                                                                   @14\nX#OPNDI  OPEN  (1,(INPUT)),MODE=31,MF=L OPEN/CLOSE execute list     @14\nX#OPNDIL EQU   *-X#OPNDI           Generate length                  @14\n*                                                                   @14\n***********************************************************************\n*                                                                     *\n*        Model storage, moved to dynamic                              *\n*                                                                     *\n***********************************************************************\nMODELS   DS    0H                                                   @14\nSVCUMODL SVCUPDTE 0,REPLACE,TYPE=4,EP=0,MF=L\nSVCUMODLL EQU  *-SVCUMODL          Generate length                  @14\n*        ENQ   (QNAME1,*-*,E,L'SVCNO,SYSTEM),RET=USE,MF=L           @07\n*        ENQ   (QNAME1,*-*,E,L'RNAME,SYSTEM),RET=USE,MF=L        @07@14\nENQMODL  ENQ   (QNAME1,*-*,E,L'RNAME,SYSTEM),RET=USE,MF=L           @14\nENQMODLL EQU   *-ENQMODL                                            @14\n*        ENQ   (SYSZSVCQ,SYSZSVCR,E,,SYSTEM),MF=L                @02@14\nESVCTMOD ENQ   (SYSZSVCQ,SYSZSVCR,E,,SYSTEM),MF=L                @02@14\nESVCTMODL EQU  *-ESVCTMOD                                           @14\nMODELS_L EQU   *-MODELS\n*                                                                   @11\nMODELESR SVCUPDTE 109,REPLACE,TYPE=4,EP=0,ESR=222,MF=L              @11\nMODELESR_L EQU *-MODELESR                                           @11\n*\nQNAME1   DC    C'SVCUPDTE'         QNAME for ENQ\nSYSZSVCQ DC    C'SYSZSVC '         QNAME for ENQ                    @02\nSYSZSVCR DC    C'TABLE'            RNAME for ENQ                    @02\n*                                                                   @14\nRESOURCE DC    CL16'SVCUPDTE_       '                               @14\n*                                                                   @14\n*        REQUEST=AUTH,CLASS=FACILITY                                @14\n*                                                                   @14\n         DS    0D                                                   @14\nRACPATT  RACROUTE REQUEST=AUTH,                                     @14X\n               ENTITYX=*-*,                                         @14X\n               CLASS=FACILITY,                                      @14X\n               ATTR=READ,                                           @14X\n               LOG=NONE,                                            @14X\n               MSGSUPP=YES,                                         @14X\n               RELEASE=1.9.2,                                       @14X\n               WORKA=*-*,                                           @14X\n               MF=L                                                 @14\n*                                                                   @14\nFACILITY DC    AL1(8),CL8'#SNOMISC' RACF CLASS for RACROUTE         @14\n*                                                                   @14\nLTORG_AREA_END DS 0D                                                @14\nSVCUPDTE LOCTR ,                                                    @14\n*\n         TITLE 'PARSE - parse positional parameters routine'        @14\n***********************************************************************\n*                                                                     *\n*        PARSE A COMMA-DELIMITED JCL PARM                             *\n*                                                                     *\n*        L     R15,=A(PARSE)                                          *\n*        BALR  R14,R15                                                *\n*        DC    S(L'PARM1,PARM1)        LENGTH,ADDR                    *\n*        DC    S(L'PARM2,PARM2)        LENGTH,ADDR                    *\n*                                                                     *\n***********************************************************************\nPARSE    CSECT\nPARSE    AMODE 31\nPARSE    RMODE ANY\n         SAVE  (14,12),,PARSE      Save caller's registers\n         BALR  R11,0               Set local base\n         USING *,R11               Inform assembler\n         LH    R5,0(,R4)           R5=length of PARM\n         LA    R4,1(,R4)           R4->start of PARM - 1\n         ALR   R5,R4               R5->last byte of PARM\n*LOOP\nPARS1    SLR   R0,R0               R0 = 00000000\n         ICM   R0,B'0011',2(R14)   R0 = 0000BDDD\n         SRDL  R0,12(0)            R0 = 0000000B, R1= BBB.....\n         SRL   R1,20(0)            R1 = 00000DDD displacement\n         ALR   R1,R13              Add caller's save area address\n         LR    R6,R1               R6->target field\n         LH    R7,0(,R14)          R7=length of target field\n*\n         LA    R2,1(,R4)           1st byte of current parameter\n*--LOOP\nPARS2    LA    R4,1(,R4)           Increment pointer\n         CLR   R4,R5               End of PARM reached ?\n         JH    PARS41              ...bif so, exit loop\n         CLI   0(R4),C','          Delimiter ?\n         JNE   PARS2               ...bif not, keep looking\n*--ENDLOOP\nPARS41   LR    R3,R4               R3->position of ','\n         SR    R3,R2               R3=length of source parameter\n         ICM   R3,B'1000',PARSEPAD Padding\n         MVCL  R6,R2               Move source to target\nPARS44   LA    R14,2+2(,R14)       R14->next target\n         CLI   0(R14),0            Is this a field descriptor ?\n         JE    PARS1               ...bif so, go process it\n*ENDLOOP\n         RETURN (0,12),T           Return with indicator\nPARSEPAD DC    C' '                Padding\n*                                                                   @14\n         TITLE 'Dynamic working storage'                            @14\n***********************************************************************\n*                                                                     *\n*        DYNAMIC STORAGE                                              *\n*                                                                     *\n***********************************************************************\n*DYNAM    DSECT                                                     @14\nDWS      DSECT                                                      @14\nSAVEAREA DS    18F                 Save area                        @14\nDOREPEATSAVE DS 18F                DOREPEAT save area               @14\nCHKINUSESAVE DS 18F                CHKINUSE save area               @14\nDATETIMESAVE DS 18F                DATETIME save area               @14\nPUTSAVE  DS    18F                 PUTSAVE save area                @14\nPUTHDRSAVE DS  18F                 HEADERS save area                @14\nMLWTOSAVE DS   18F                 MLWTO save area                  @14\nSAVE@L1  DS    18F                 Level 1 GPR save area            @14\nPARSSAVE DS    18F                 PARS000 save area                @14\nREPORTSAVE DS  18F                 REPORT register save area        @14\nSAVE2    DS    18F                 Save area for ESTAE routine\nSAVER0   DS    F                   R0 save area (PUTLINE)           @14\nDOMID    DS    F                   Saved DOM msgid #                @14\nMLWTOLINES@ DS F                   @ of MLWTO construction area     @14\nMLWTOLENGTH DS F                  Length of MLWTO construction area @14\nCIBECB   DS    F                   @ COMECBPT                       @14\n@CSCB    DS    F                   @ CSCB                           @14\nDWD      DS    D\nDBWD     DS    D                                                    @14\nDWSECB   DS    F                   IKJPARS ECB                      @14\nDWSANS   DS    F                   IKJPARS answer area (PDL)        @14\n@R_admin DS    F                   @ of loaded IRRSEQ00 routine     @14\nSAVEFLAG DS    F                   Saved command-line options       @14\nMODSIZE  DS    F                  Size of SVC module from BLDL      @14\nMODEPOFF DS    F                  SVC module entry point offset     @14\nEUSER    DS    CL8                 Address space level RACF userid  @14\nPage_count DS  PL4                 Page counter                     @14\nLine_count DS  PL2                 Page line count                  @14\n         DS    0D                  Doubleword alignment             @14\nSYSPRINT DS    XL(X#DCB1L)         SYSPRINT DCB area                @14\n*                                                                   @14\n         DS    0H                  Halfword alignment               @14\nSPUTCODE DS    XL(PUTLEN)          PUT routine                      @14\n*                                                                   @14\n         DS    0F                  Fullword alignment               @14\nW#OPNDO  DS    XL(X#OPNDOL)        Length of OPEN/CLOSE list        @14\nPLIST@   DS    F                  Pointer to previous R_admin plist @14\nSVCENTRY_PTR DS A(SVCENTRY)        SVC or ESR entry                 @06\nDWSADDR  DS    F                   DWS address for ESTAEX routine   @14\n@INPARMS DS    F                   @ of input parameters            @14\n*\n*        SVC 99 (SYSOUT) related fields\n*\n$99R15   DS    F                   Return code from SVC 99\n$99RBPTR DS    F                   Pointer to SVC 99 RB\nS99RBLEN EQU   S99RBEND-S99RB\n$99RB    DS    (S99RBLEN)XL1       SVC 99 RB\n$99RBX   DS    XL(S99RBXLN)        SVC 99 RB Extension\n*        Pointers to TUs for ALLOCATE\n$99STUPL DS    0F                  Pointers for SYSOUT ALLOC\n$99SSYSP DS    F                   Ptr to SYSOUT TU\n$99SFREP DS    F                   Ptr to FREE on CLOSE TU\n$99SDDNP DS    F                   Ptr to RETURN output DDN TU\n$99STL   EQU   *-$99STUPL\n         ORG\n*\n*        Space for TUs which will contain variable information\n*\n$99TEXT  DS    0F                  Start of TUs\n$99FREC  DS    4XL1                FREE ON CLOSE\n$99DDNK  DS    14XL1               6 char header & 8 char DDname\n$99SYSOU DS    CL7                 6 char header & 1 char class\n$99TEXTL EQU   (*-$99TEXT)-1       -1 for use in clearing area\nRDDN     DS    CL8                 Report sysout DDname\n*                                                                   @14\n*        Parse processing related work areas                        @14\n*                                                                   @14\nInput_parmlen DS H                 Original input parameter length  @14\nCopied_input_parms DS CL100        Copy of original input parms     @14\nBUFLEN   DS    H                   Length of command buffer         @14\nBUFOFF   DS    H       Offset to 1st operand on true length in CBUF @14\nWork_input_parms DS CL100          Work copy of input parameters    @14\n*                                                                   @14\n*        End of parse processing related work areas                 @14\n*                                                                   @14\nDSN      DS    CL44                SVCLIB data set name             @14\nVOL      DS    CL6                 SVCLIB volser                    @14\nFLAGS    DS    XL1             Execution time flags                 @14\nF1#EPNL  EQU   X'80'           -EPNAME module copy exists in PVT    @14\nF1#RIBSA EQU   X'40'           -RIBs work area acquired             @14\nF1#ECSA  EQU   X'20'           -ECSA needed for SVC code (if on)    @14\n*                              -CSA needed for SVC code (if off)    @14\nF1#AM31  EQU   X'10'           -Use 31-bit EP in SVC slot           @14\nF1#GOTCSA EQU  X'08'           -We have obtained CSA/ECSA           @14\n*                                                                   @14\nSVC_TYPE DS    CL1                 SVC type for this request        @14\n*                                                                   @14\nESRSVCNO DS    CL3                 ESR SVC number (109/116/122/137) @14\n*                                                                   @14\nCurrent_option_length DS F   Length of current option for processor @14\n*                                                                   @14\nParse_flags DS XL1                 Parse related flags              @14\nParse_LIST EQU X'80'               -LIST if 1 / INSTALL if 0        @14\nParse_SVC  EQU X'40'               -SVC= supplied                   @14\nParse_LMOD EQU X'20'               -LMOD= supplied                  @14\nParse_ATTR EQU X'10'               -ATTR= supplied                  @14\nParse_LOCKS EQU X'08'              -LOCKS= supplied                 @14\nParse_GOODNITE EQU X'04'           -GOODNITE= supplied              @14\nParse_USER EQU X'02'               -USER= supplied                  @14\nNo_more_data EQU X'01'             ...No more operands in data      @14\n*\nPKW_used DS    X\nPKW_SVC  EQU   X'80'               SVC= keyword found\nPKW_LMOD EQU   X'40'               LMOD= keyword found\nPKW_ATTR EQU   X'20'               ATTR= keyword found\nPKW_LOCKS EQU  X'10'               LOCKS= keyword found\nPKW_GOODNITE EQU X'08'             GOODNITE= keyword found\nPKW_USER EQU   X'04'               USER= keyword found\nPKW_TYPE EQU   X'02'               TYPE= keyword found\n\n*                                                                   @14\nATTR_FLAGS DS XL1                  Attributes requested flags       @14\nATTR_NPRMT EQU X'80'               -Non-preemptable requested       @14\nATTR_APF   EQU X'40'               -APF requested (APF=YES)         @14\nATTR_AR    EQU X'20'               -AR requested (AR=YES)           @14\nATTR_ESR   EQU X'10'               -ESR SVC request                 @14\nATTR_ASF   EQU X'08'               -ASF requested                   @14\n*                                                                   @14\nLOCKS_FLAGS DS XL1                 Locks requested flags            @14\nLOCKS_LOCAL  EQU X'80'             -LOCAL lock requested            @14\nLOCKS_CMS    EQU X'40'             -CMS lock requested              @14\nLOCKS_SRM    EQU X'20'             -SRM lock requested              @14\nLOCKS_SALLOC EQU X'10'             -SALLOC lock requested           @14\nLOCKS_DISP   EQU X'08'             -DISPatcher lock requested       @14\n*                                                                   @14\nPROC_FLAGS DS XL1                  Processing requested flags       @14\nPROC_GOODNITE EQU X'80'            -GOODNITE time was requested     @14\n*                                                                   @14\n         DS    0F                  Alignment                        @14\nSVCLIB   DS    CL(INDCB#L)         Input DCB area                   @14\n*                                                                   @14\n         DS    0F                                                   @14\nW#OPNDI  DS    XL(X#OPNDIL)        Length of OPEN/CLOSE list        @14\n@WORKAREA DS   F                   @ of IRRSEQ00 work area          @14\nWORKAREA_SIZE EQU 65536            Size of above work area          @14\nALET     DS    F                   ALET                             @14\nSAFRC    DS    F                   SAF Return Code                  @14\nRACFRC   DS    F                   RACF Return Code                 @14\nRACFRS   DS    F                   RACF Reason Code                 @14\nCurrent_profname DS CL15           Maximum length SVCUPDTE profile  @14\nCurrent_OWNER DS CL8               Maximum length OWNER field       @14\nCurrent_DATA DS CL100              1st 100 bytes of DATA field      @14\nCurrent_UACC DS CL7                Maximum length UACC field        @14\nCurrent_ACLID DS CL8               Maximum length ACLID field       @14\nCurrent_ACLACS DS CL7              Maximum length ACLACS field      @14\nINUSE_JOBNAME DS CL8              GQSCAN profile requestor job name @14\nINUSE_ASID DS  CL8                 GQSCAN profile requestor ASID    @14\nFUNCODE  DS    AL1                 R_Admin function code            @14\n@ACEE    DS    F                   @ of ACEE                        @14\nSUBPOOL  DS    AL1                                                  @14\nOUTMSG   DS    F                                                    @14\nRADPLIST DS    CL(ADMN_PROF_PROFNAME-ADMN_PROF_MAP) Plist header    @14\nEXTPROF  DS    CL246                  Name of profile to extract    @14\n*                                                                   @14\n*        PLIST for IRRSEQ00...that is, a list of adresses to the    @14\n*        actual Parameter data defined above                        @14\n*                                                                   @14\n*        The following is 13-0words in length and is redefined      @14\n*                                                                   @14\nWORKAREA@ DS   A                    1                               @14\nALET1@   DS    A                    2                               @14\nSAFRC@   DS    A                    3                               @14\nALET2@   DS    A                    4                               @14\nRACFRC@  DS    A                    5                               @14\nALET3@   DS    A                    6                               @14\nRACFRS@  DS    A                    7                               @14\nFUNCODE@ DS    A                    8                               @14\nRADPLIST@ DS    A                   9                               @14\nUSER@    DS    A                   10                               @14\nACEE@    DS    A                   11                               @14\nSUBPOOL@ DS    A                   12                               @14\nOUTMSG@  DS    A                   13                               @14\n         ORG   WORKAREA@                                            @14\nPLIST    DS    13F                Redefined IRRSEQ00 plist          @14\n         ORG   PLIST                                                @14\nUPT      DS    F                                                    @14\nECT      DS    F                                                    @14\nECB      DS    F                                                    @14\nPCL      DS    F                                                    @14\nANS      DS    F                                                    @14\nCBUF     DS    F                                                    @14\nUWAF     DS    F                                                    @14\nVEWA     DS    F                                                    @14\n         ORG   PLIST+52\nPARM1    DS    F\nPARM2    DS    F\nPARM3    DS    F\nPARM4    DS    F\nPARM5    DS    F\n*                                                                   @14\n*                                                                   @14\n* BLDL prime and result area                                        @14\n*                                                                   @14\n         AGO   .JH0812Z\nBIT0     EQU   128\nBIT1     EQU   64\nBIT2     EQU   32\nBIT3     EQU   16\nBIT4     EQU   8\nBIT5     EQU   4\nBIT6     EQU   2\nBIT7     EQU   1\n*\n.JH0812Z ANOP\n         DS    0F                                                   @14\nBLDLLIST DC    H'1'                # entries in list                @14\nBLDLLL   DC    H'76'               Length of entry in list          @14\nBLNAME   DC    CL8'IGX00nnn'       Name of module                   @14\nBLTTR    DS    XL3                 TTR                              @14\nBLK      DS    XL1                 * Concatenation data set number  @14\nBLZ      DS    XL1                                                  @14\nBLC      DS    XL1                                                  @14\nBLTTRTX1 DS    XL3                 * TTR OF FIRST TEXT RECORD       @14\nBLZ2     DS    XL1                 * ZEROS                          @14\nBLTTRNL  DS    XL3                 * TTR OF NOTE LIST (IF ANY)      @14\nBLNNOTEL DS    XL1                 * NUMBER OF NOTE LIST ENTRIES    @14\nBLMATTR1 DS    XL2                 * MODULE ATTRIBUTES (1)          @14\nBLA1RENT EQU   X'80'                 * REENTRANT                    @14\nBLA1REUS EQU   X'40'                 * REUSABLE                     @14\nBLA1OVLY EQU   X'20'                 * OVLY=YES                     @14\nBLA1TEST EQU   X'10'                 * TEST/TESTRAN                 @14\nBLA1SCTR EQU   X'04'                 * SCTR=YES                     @14\nBLA1EXEC EQU   X'02'                 * EXECUTABLE                   @14\nBLMODLN  DS    XL3                 * VIRTUAL STORAGE REQUIRED       @14\nBLLTX1   DS    XL2                 * LENGTH OF FIRST TEXT RECORD    @14\nBLEPADDR DS    XL3                 * MODULE ENTRY POINT             @14\nBLMATTR2 DS    XL1                 * MODULE ATTRIBUTES (2)          @14\nBLA1REFR EQU   X'01'                 * REFRESHABLE (2nd byte)       @14\nBLARMODE DS    XL1                 * AMODE/RMODE FLAGS              @14\nBLLRMOD  EQU   BIT3                  * Program residency mode\nBLAAMOD  EQU   BIT4+BIT5             * Alias entry point AMODE\n*                                      B'00' = AMODE 24\n*                                      B'10' = AMODE 31\n*                                      B'11' = AMODE ANY\n*                                      B'01' = AMODE 64\nBLMAMOD  EQU   BIT6+BIT7             * Main entry point AMODE\n*                                      B'00' = AMODE 24\n*                                      B'10' = AMODE 31\n*                                      B'11' = AMODE ANY\n*                                      B'01' = AMODE 64\nBLRMANY  EQU   X'10'                 * RMODE = ANY                  @14\nBLAM31   EQU   X'02'                 * AMODE = 31                   @14\nBLRLDCNT DS    XL1                 * RLD COUNT                      @14\nBLLSCLST DS    XL2                 * LENGTH OF SCATTER LIST         @14\nBLLTRTAB DS    XL2                 * LENGTH OF TRANSLATION TABLE    @14\nBLLESDTX DS    XL2                 * ESDID FOR FIRST TEXT RECORD    @14\nBLLESDEP DS    XL2                 * ESDID FOR ENTRY POINTS         @14\nBLMEMEPA DS    XL3                 * EPA OF 'REAL' MEMBER           @14\nBLMEMNAM DS    XL8                 * NAME OF 'REAL' MEMBER          @14\n         DS    XL22                <residual>                       @14\n*                                                                   @14\nWTOD     DS    CL200               Dynamic WTO construction area    @14\n*                                                                   @14\n@LOADEP  DS    F                   @ of LOAD'd EPNAME module        @14\n@COPYEPN DS    F                   @ of copied EPNAME module        @14\n@CSAEPN  DS    F                   @ of LMOD in in CSA/ECSA         @14\n@CSAEPN@ DS    F                   @ of E.P. of LMOD in CSA/ECSA    @14\nTIMER_ID DS    F\n*                                                                   @14\n* Date & time handling related fields                               @14\n*                                                                   @14\nParm_bin_Goodnight DS F            Binary Goodnight time (HHMM)     @14\nSTCKAREA DS    D                   STCK result save area            @14\nSTCK_Adjusted DS D                 STCK adjusted result             @14\nOUTAREA  DS    XL16                STCKCONV result area (16 bytes)  @14\nSTCKCONVL STCKCONV MF=L            STCKCONV work area               @14\nUNPKAREA DS    CL9               * UNPK to 8 bytes + 1 to fake sign @14\nTIMEDATE DS    CL24             Zoned decimal format of time & date @14\n         ORG   TIMEDATE            Redefine TIMEDATE area           @14\n*        HHMMSSthmiju0000MMDDYYYY                                   @14\nHOURS    DS    CL2                 Hours                            @14\nMINUTES  DS    CL2                 Minutes                          @14\nSECONDS  DS    CL2                 Seconds                          @14\nSUBSEC   DS    CL6                  subsecond values \"thmiju\"       @14\n         DS    CL4                 <filler>                         @14\nMONTH    DS    CL2                 Month                            @14\nDAY      DS    CL2                 Day                              @14\nYEAR     DS    CL4                 Year                             @14\n* End of date & time handling fields                                @14\n*                                                                   @14\n* SWA processing related items                                      @14\n*                                                                   @14\nSWAREQRC DS    F                   SWAREQ RC                        @14\nSWEPAPTR DS    F                   EPA pointer                      @14\nEPA      DS    XL20                EPA non-rent area                @14\nSWAPARMS SWAREQ MF=L               SWA request parameter list       @14\nJFCB     DS    XL176               JFCB copy area (SVCLIB)          @14\n*                                                                   @14\nLOAD4L   LOAD  SF=L                LOAD model area\nEXTRACTL EXTRACT *-*,FIELDS=COMM,MF=L EXTRACT model area\nCOMMADDR DS    A\nESTAEL   ESTAE MF=L                                                 @03\nSTIMER_L STIMERM SET,MF=L\nRETCODE  DS    F                   Return code                      @14\n*                                                                   @14\n*        Return Code equates                                        @14\n*                                                                   @14\nNOTAPF   EQU   01                  SVCUPDTE not APF authorized      @14\nNOPROF   EQU   02                  SVCUPDTE profile does not exist  @14\nNOSVC#   EQU   03                  Required SVC keyword not present @14\nBADENV3  EQU   04                  SVCLIB DD missing                @14\nBADENV5  EQU   06                  -IRRSEQ00 service not found      @14\nBADAUTH  EQU   08                  User not auth to add/replace SVC @14\nBADERRET EQU   09                  ERRET routine driven             @14\nBADTSOEV EQU   10                  Non-zero return from IKJTSOEV    @14\nBADENQ   EQU   12                  ENQ for SVCUPDTE resource failed @14\nBADEPN1  EQU   16         EPNAME module not found on SVCLIB Library @14\nBADENV18 EQU   18               -Unable to obtain IRRSEQ00 workarea @14\nBADENV19 EQU   19               -Unable to obtain RIBs workarea     @14\nBADENV2  EQU   20                  Illegal execution environment    @14\nBADSVCN1 EQU   24       Backing slot for requested SVCNO not T2/3/4 @14\nBADENV25 EQU   26            -Report sysout file allocation failure @14\nBADENV31 EQU   32               -Open for report sysout file failed @14\nBADSAF1  EQU   34                  -SAF extract failure             @14\nBADESRT  EQU   35                  ESR T1/T2/T6 SVCs not supported  @14\nBADEXTR2 EQU   36                  -No SVCUPDTE profiles found      @14\nBADEXTR3 EQU   37                  -EXTR000 - not CLASS(#SNOMISC)   @14\nBADEXTR4 EQU   38                  -EXTR000 - SD # not 1            @14\nBADEXTR5 EQU   39              -EXTR000 - BASE segment not returned @14\nBADEXTR6 EQU   40                  -EXTR000 - Invalid length        @14C\n                                               SVCUPDTE_* profile   @14C\n                                               found on extract     @14\nBADQSCAN EQU   41              -CHKINUSE - unexpected GQSCAN return @14\nBADMLWTO EQU   42                 Unable to acquire MLWTO work area @14\nBADOPN1  EQU   44                  OPEN for SVCLIB failed           @14\nBADSWA   EQU   48                  SWAREQ request failed            @14\nBADDSORG EQU   52                  SVCLIB not DSORG=PO/POE          @14\nBADRECFM EQU   56                  SVCLIB not RECFM=U               @14\nBADMVOL  EQU   60             SVCLIB library cannot be multi-volume @14\nBADMEM1  EQU   64                  Member name coded on SVCLIB      @14\nBADLOCKS EQU   68                  Invalid LOCKS parameter supplied @14\nBADSVCNO EQU   72                  SVC number parameter not numeric @14\nBADSVCUR EQU   73                  SVCUPDTE reversal failed         @14\nBADEOD1  EQU   76       Goodnight time (HHMM) parameter not numeric @14\nBADSVCN2 EQU   80                  SVC number not in range 0-255    @14\nBADEOD2  EQU   84      Goodnight time (HHMM) parameter out of range @14\nBADEOD3  EQU   88              Goodnight time < current time (HHMM) @14\nBADSVCN3 EQU   92              ESR T3/4 naming convention violation @14\nBADEPN2  EQU   96      EPNAME module attribute requirements not met @14\nBADEPN3  EQU   100                 LOAD for EPNAME module failed    @14\nBADEPN4  EQU   104                 EPNAME module is RMODE=SPLIT     @14\nBADNRENT EQU   105                 LMOD not marked RENT on SVCLIB   @14\nBADNREUS EQU   106                 LMOD not marked REUS on SVCLIB   @14\nBADNREFR EQU   107                 LMOD not marked REFR on SVCLIB   @14\nBADNEXEC EQU   108                 LMOD not marked EXEC on SVCLIB   @14\nBADNOVLY EQU   109             LMOD cannot be marked OVLY on SVCLIB @14\nBADNSCTR EQU   110             LMOD cannot be marked SCTR on SVCLIB @14\nBADNSPLT EQU   111            LMOD cannot be marked SPLIT on SVCLIB @14\nBADEPN5  EQU   108        <N/A>    Insufficient private for EPNAME  @14\nBADLOGIC EQU   112                 Bad logic (loc #__) - R15=______ @14\nBADNTEST EQU   113            LMOD cannot be marked TEST/TESTRAN    @14\nBADNCNCT EQU   114            LMOD must be on 1st library on SVCLIB @14\n*        EQU   116                 <available>                      @14\nBADNOCSA EQU   120             Insufficient CSA/ECSA for SVC module @14\nBADNOSQA EQU   121            Insufficient SQA/ESQA for USER filter @14\nAUTHLOCK EQU   124        User not authorized to set requested LOCK @14\nBADPARM1 EQU   128                 Missing PARM/PARMDD              @14\nBADPARM2 EQU   132                 Excessive input parmeters length @14\nBADPARM3 EQU   136                 Invalid characters in input      @14\nBADPARSE EQU   137                 IKJPARS failed                   @14\n*                                   parameter string                @14\nBADPARM4 EQU   140                 Invalid PARM field found         @14\nBADFENQ  EQU   141                 Slot ENQ failed                  @14\nBADTYPR  EQU   142                 non-ESR request requires TYPE    @14\nBADSVCUS EQU   143                 SVCUPDTE service request failed  @14\nBADQEDIT EQU   144                 QEDIT failure                    @14\n*                                                                   @14\nMYFLAGS  DS    XL1                 Local processing flags           @14\nNEXTREQ  EQU   X'80'               Indicates a next request         @14\nFOUND1   EQU   X'40'               Indicates >=1 profiles found     @14\nSPOOKY   EQU   X'20'               Indicates a ghost-generic found  @14\n*        EQU   X'10'               <available>                      @14\nSYSPPRES EQU   X'08'               SYSPRINT present in JCL          @14\nMLWTOAREA EQU  X'04'               MLWTO area acquired              @14\nAUTHUSER EQU   X'02'              Invoking user authorized to       @14C\n                                   install SVC with locks           @14\nSPECIAL  EQU   X'01'              Invoking user is global \"special\" @14\n*                                                                   @14\n*       FLAGS and its meanings                                      @14\n*                                                                   @14\nProfile_flags DS XL1               Profile related flags            @14\nSkip_repeat_field EQU X'80'        -skip repeat field occurences    @14C\n                                    for this field                  @14\nHave_ACLID EQU X'40'               -ACLID captured                  @14\nHave_ACLACS EQU X'20'              -ACLACS captured                 @14\nProfile_INUSE EQU X'10'       -Profile for SVC slot already in use  @14\n*                                                                   @14\n*       Fields for GQSCAN query                                     @14\n*                                                                   @14\nRIBSPACE_p DS  F                   Pointer to RIBs work area        @14\n         DS    0D                                                   @14\n*IBS     DC    A(AMOUNT)                                            @14\nRIBS     DS    A                   Pointer to RIBs work area        @14\nAMOUNTL  DC    F'1024'                                              @14\nQNAME    DC    CL8'SVCUPDTE'                                        @14\nRNAME    DS    0CL7                                                 @14\n         DC    CL1'_'              Underline                        @14\nRNAME1   DC    CL3'ESR'            ESR SVC # or regular SVC #       @14\nRNAME2   DC    CL3'fff'            ESR function code or blanks      @14\nRNAMEBLK DC    X'40'               <trailing required blank>        @14\nRNAMEEL  DS    X                   RNAME length for ENQ             @14\n*                                                                   @14\n*        RIBs return area (from GQSCAN)                             @14\n*                                                                   @14\n         DS    0D                                                   @14\n*MOUNT   DS    256F                   RIB DATA AREA                 @14\n*                                                                   @14\nGQSLIST  GQSCAN MF=L                                                @14\n*                                                                   @14\nSQA_ADDR DS    A(CHKU500)          Work area in SQA\nOLDENTRY DS    D                   Old SVC entry                    @03\nSVCNO    DS    Z'222'              SVC number\n         AGO   .JH0806G                                             @14\n*                                                                   @14\n* Skip the duplicate RNAME field definition until the LIST report   @14\n* is working properly.                                              @14\n* <WARNING> - The SVC install process currently uses this RNAME     @14\n*             field. The usage between INSTALL & CHKINUSE must be   @14\n*             cooperative.                                          @14\n*                                                                   @14\n*                                                                   @14\n*                                                                   @14\nRNAME    DS    CL6                 ENQ RNAME resource               @07\n.JH0806G ANOP                                                       @14\nEPNAME   DS    C'IGC0022B'         Name of SVC routine\n         ORG   EPNAME              Name of SVC routine load module  @14\nLMOD     DS    CL8                 Name of SVC routine load module  @14\nLOCKS    DS    C'8000 '            Lock indtcators: 8000 or C000    @08\nENDOFDAY DC    Z'19000000'         CUTOFF TIME: HHMMSSHH\nUSER     DS    0CL9                                                 @14\nUSERLEN  DS    AL1                                                  @14\nUSERID   DS    CL8                 user-ID                          @05\nTYPE     DS    CL1                 SVC TYPE                         @14\nTYPEBIN  DS    XL1                 SVC TYPE in binary byte          @14\nSVC#     DS    X                   SVC number in binary             @14\nESR#     DS    X                   ESR number in binary          @06@14\nESR#FW   DS    F                   ESR number in binary (fullword)  @14\nSHUTDOWN DS    CL4                 GOODNITE time                    @06\nLOCK#    DS    X'80'               Locks in binary: 80 or C0        @08\n*\n*        RACF model(s) workareas - redefined                        @14\n*                                                                   @14\n         DS    0D                                                   @14\nRACF_DYN RACROUTE REQUEST=AUTH,                                        X\n               RELEASE=1.8,                                         @14X\n               MF=L\nRACF_LEN EQU   *-RACF_DYN\n         ORG   RACF_DYN            Redefine                         @14\nSAFRACFL RACROUTE REQUEST=AUTH,                                     @14X\n               ENTITYX=*-*,                                         @14X\n               CLASS=FACILITY,                                      @14X\n               MSGSUPP=YES,                                         @14X\n               ATTR=READ,                                           @14X\n               WORKA=*-*,                                           @14X\n               LOG=NONE,                                            @14X\n               RELEASE=1.9.2,                                       @14X\n               MF=L                                                 @14\nSAFRACLL EQU   *-SAFRACFL        Length of generated RACROUTE area  @14\n*                                                                   @14\nRACFWORK DS    64D                 RACROUTE WORK AREA (512 BYTES)\n*                                                                   @14\n*        Parameter lists initialized from \"models\"\n*\nSVCULIST SVCUPDTE 0,REPLACE,TYPE=4,EP=0,MF=L\n         DS    0H                                                   @14\nSVCUPLNEW DS   XL(SVCUMODLL)       SVCUPDTE plist for new SVC       @14\n         DS    0H                                                   @14\nSVCUPLOLD DS   XL(SVCUMODLL)       SVCUPDTE plist for old SVC       @14\n         AGO   .JH1104A                                             @14\n*                                                                   @14\n*        SVCUPDTE macro expansion redefinitions for overrides       @14\n*                                                                   @14\nSVCUSVCM EQU   SVCULIST+03,1           SVC to modify                @14\nSVCUEP   EQU   SVCULIST+04,4           E.P. of new SVC routine      @14\nSVCUTYPE EQU   SVCULIST+08,1           SVC type                     @14\nSVCUATTR EQU   SVCULIST+09,1           SVC attribute bits           @14\nSVCULOCK EQU   SVCULIST+10,1           SVC locks                    @08\nSVCUESR# EQU   SVCULIST+11,1           Extended SVC routing code    @11\n*                                                                   @14\n*        SVCUATTR equates                                           @14\n*                                                                   @14\nSVCUATTR_NPRMPT EQU X'02'          NPRMPT=YES                       @14\nSVCUATTR_AR     EQU X'04'          AR = YES                         @14\nSVCUATTR_APF    EQU X'08'          APF=YES                          @14\n*                                                                   @14\n*        SVCULOCK equates                                           @14\n*                                                                   @14\nSVCULOCK_LOCAL  EQU X'80'          LOCAL lock                       @14\nSVCULOCK_CMS    EQU X'40'          CMS lock                         @14\nSVCULOCK_SRM    EQU X'20'          SRM lock                         @14\nSVCULOCK_SALLOC EQU X'10'          SALLOC lock                      @14\nSVCULOCK_DISP   EQU X'08'          DISP lock                        @14\n.JH1104A ANOP                                                       @14\n*                                                                   @14\n*ENQL     ENQ   (QNAME1,*-*,E,L'SVCNO,SYSTEMS),RET=USE,MF=L         @07\nENQL     ENQ   (QNAME1,*-*,E,L'RNAME,SYSTEMS),RET=USE,MF=L          @07\nENQ_TABLE ENQ  (SYSZSVCQ,SYSZSVCR,E,,SYSTEM),MF=L                   @02\n*                                                                   @14\nENTITYW1 DS    H                   Length of buffer (w/o lengths)   @14\nENTITYW2 DS    H                   Length of resource name          @14\n*                                                                   @14\nENTITYW3 DC    CL16' '                                              @14\nENTITW3L EQU   *-ENTITYW3          Generate length of resource      @14\n*                                                                   @14\nSAFWR15  DS    F                   SAF VERIFY R15 result            @14\nSAFWRRET DS    F                   RACF return code from VERIFY     @14\nSAFWRREA DS    F                   RACF reason code from VERIFY     @14\n*                                                                   @14\nHDRLINE  DS    CL133              Area for header line construction @14\nPRTLINE  DS    CL133               Detail report line               @14\n*                                                                   @14\nDWSLEN   EQU   *-DWS               Generate DWS work area length    @14\n*                                                                   @14\n         TITLE 'Local provided dummy sections'                      @14\n******************************************************************* @14\n*                                                                 * @14\n*        SVCUPDTE plist mapping                                   * @14\n*                                                                 * @14\n*        Note: This is SVCUPDTE version 1 mapping. This version   * @14\n*              level mapping should be compared to any new        * @14\n*              mappings that IBM may introduce in the future.     * @14\n*                                                                 * @14\n******************************************************************* @14\nSVCU     DSECT                                                      @14\nSVCUVERS DS    XL1                 SVCUPDTE version number          @14\nSVCUFC   DS    XL1                 Function to be performed         @14\nSVCUFC_replace EQU X'01'           -Replace SVC entry               @14\nSVCUFLGS DS    XL1                 SVC flag, ESR flag               @14\nSVCUFLGS_ESR EQU X'02'             -ESR # supplied                  @14\nSVCUSVC  DS    XL1                 SVC to modify                    @14\nSVCUEP   DS    F                   E.P. of new SVC routine          @14\nSVCUTYPE DS    XL1                 SVC type                         @14\nSVCUATTR DS    XL1                 SVC attribute bits               @14\nSVCUATTR_NPRMPT EQU X'02'          -Non-preemptable                 @14\nSVCUATTR_AR     EQU X'04'          -AR mode callers allowed         @14\nSVCUATTR_APF    EQU X'08'          -APF callers only                @14\nSVCULCKS DS    XL1                 SVC locks                        @14\nSVCULCKS_LOCAL  EQU X'80'          -LOCAL lock                      @14\nSVCULCKS_CMS    EQU X'40'          -CMS lock                        @14\nSVCULCKS_SRM    EQU X'20'          -SRM lock                        @14\nSVCULCKS_SALLOC EQU X'10'          -SALLOC lock                     @14\nSVCULCKS_DISP   EQU X'08'          -DISP lock                       @14\nSVCUESRC DS    XL1                 Extended SVC routing code        @14\nSVCUNAME DS    XL8                 SVC entry point name             @14\n*                                                                   @14\n         TITLE 'System provided dummy sections'                     @14\n         IHASVC LIST=YES               SVC TABLE ENTRY              @14\n         PRINT NOGEN\n         IRRPCOMP                                                   @14\n         IHAPDS DSECT=YES                                           @14\n         IHAPSA DSECT=YES\n         CVT   DSECT=YES,LIST=NO\n         AIF   (D'CVTEDAT).LPS01                                    @11\nCVTEDAT  EQU   X'01'              Enhanced DAT support (Large Page) @11\n.LPS01   ANOP                                                       @11\n         IHASCVT DSECT=YES,LIST=NO     SECONDARY CVT\n         IHAASCB DSECT=YES,LIST=NO\n         IHAASXB\n         IHAACEE\n         IKJTCB DSECT=YES,LIST=NO\n         IHALLE\n         IHACDE\n         IHASDWA DSECT=YES,VRAMAP=NO\n         DCBD  DSORG=PS,DEVD=DA    DCB mapping                      @14\n*                                                                   @14\n         IEFTIOT1                  Generate TIOT mapping            @14\n*                                                                   @14\nIEFJFCBN DSECT                                                      @14\n         IEFJFCBN LIST=YES                                          @14\n*                                                                   @14\n         IEFJESCT                                                   @14\n*                                                                   @14\n         IEFZB505 LOCEPAX=YES                                       @14\n*                                                                   @14\n         ICHSAFP DSECT=YES       Generate SAF Router parameter list @14\n*                                                                   @14\n         ISGRIB                    GRS RIBs                         @14\n*                                                                   @14\n         IHAASSB LIST=YES                                           @14\n*                                                                   @14\n         IEZJSCB ,                 Job Step Control Block           @14\n*                                                                   @14\nCSCB     DSECT                                                      @14\n         IEECHAIN ,                Command Scheduling Control Block @14\n*                                                                   @14\n         IEFZB4D0 ,                SVC 99 DSECTS                    @14\n*                                                                   @14\n         IEFZB4D2 ,                SVC 99 EQU'S                     @14\n*                                                                   @14\n         IKJCPPL                                                    @14\n*                                                                   @14\n         DSECT                                                      @14\n         IEZCOM                                                     @14\nCIB      DSECT                                                      @14\n         IEZCIB                                                     @14\n         YREGS\nSVCUPDTE CSECT                                                      @14\n         END   SVCUPDTE\n/*EOF\n//\n\n//LKED    EXEC PGM=IEWL,REGION=2M,PARM='MAP,RENT,AC=1',COND=(0,NE)\n//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,DELETE)\n//*YSLMOD  DD DISP=SHR,DSN=SSD.TESTLIB(SVCUPDTE)\n//*YSLMOD  DD DISP=SHR,DSN=SSD.TESTLIB(NEWUPDTE)\n//SYSLMOD  DD DISP=SHR,DSN=SYS1.ZOSV2R02.DEVT.LINKLIB(SVCUPDTE)\n//SYSPRINT DD SYSOUT=*\n/*EOF\n//\n\n//\n//\n// 08/31/2015 backup of NEWUPDTE\n// This backup was created before reverting the PARS000 subroutine\n// from manual parse over to the use of IKJPARS.\n//\n//\n\nRIBSPACE vs. AMOUNTL - move AMOUNT out of DWS to free 1K bytes\n\n\n\n* hexconv - 1 byte in w/ 2 bytes out                                @14\n         LA    R14,DWD+3           R14 -> source area to convert    @14\n         LA    R15,MSG028AA        R15 -> target display area       @14\n         UNPK  0(3,R15),0(2,R14)   unpack into display area         @14\n         MVZ   0(2,R15),=XL17'00'  move zone into display area      @14\n         TR    0(2,R15),=C'0123456789ABCDEF' translate              @14\n         MVI   2(R15),C' '         overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n*                                                                   @14\n*        Set return code and go exit                                @14\n*                                                                   @14\n         LHI   R15,BADENV1         Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     EXIT                  & go exit w/ return code       @14\n\n\n\nDo we need to worry about alias names??????\n\n\n*   THIS CODE IS ENTERED WHEN MUST COMPLETE STEP IS INDICATED.\n*   IT FIRST DETERMINES IF SET OR RESET AND THEN SETS THE CURRENT TCB.\n*   THEN IT MAKES ALL TASKS IN THE JOB STEP NON-DISPATCHABLE.\n         SPACE\n         USING TCB,R4\n* MUST COMPLETE STEP ROUTINE\n*/*MCSTEP: E CODE 1*/\n*/* D (YES,RESETSTP,NO,) THIS IS A RESET REQUEST*/\nMCSTEP   TM    SWITCHES,UNDOIT      .IS THIS A RESET\n         BO    RESETSTP            .YES\n*/*SETSTP: P TURN ON SMC FLAG IN CALLER TCB*/\nSETSTP   OI    TCBFLGS2,TCBFJMC    .SET MUST COMPLETE FLAG\n*/* P TURN ON INHIBIT ASYNCH EXITS BIT IN CALLER TCB*/\n         OI    TCBFLGS1,TCBFX      .INHIBIT ASYNCHRONOUS EXITS\n         LR    R7,R15                  SAVE REG ACROSS SIGPS\n*/* S (,MAIN1) SIGPCPUS: CLEAR OTHER CPUS OUT OF A.S.*/\n         BAL   R12,SIGPCPUS            CLEAR OTHER CPUS OUT OF A.S.\n         LR    R15,R7                  RESET REG\n         B     MAIN1               .PROCEED DOWN TCB TREE\n*/*RESETSTP: P TURN OFF SMC IN CALLER TCB*/\nRESETSTP NI    TCBFLGS2,OFF-TCBFJMC         .RESET MUST COMPLETE\n*/* P TURN OFF INHIBIT ASYNCH EXITS BIT IN CALLER TCB*/\n         NI    TCBFLGS1,OFF-TCBFX  .ALLOW ASYNCHRONOUS EXITS\n*/*MAIN1: L GET JSTCB (OR INIT TCB, IF ANY)*/\nMAIN1    L     R10,TCBJSTCB        .GET CALLERS JOB STEP TCB\n         DROP  R4\n\n\n\n* IGX24CHK MODULE INTO THIS STORAGE\n         SR    R2,R2                    * GET SIZE ...\n         ICM   R2,B'0111',BLMODLN       * ... OF MODULE\n         MODESET KEY=ZERO               * GET INTO KEY ZERO\n         GETMAIN RU,LV=(R2),LOC=ANY,SP=228\n         LR    R10,R1                   * SAVE @(IGX24CHK)\n         LOAD  DE=BLNAME,DCB=(R11),ADDR=(R10)\n         MODESET KEY=NZERO              * REVERT TO KEY 8\n* CLOSE THE LOAD LIBRARY\n         CLOSE ((R11)),MODE=31\n         DROP  R11                      * FINISHED WITH DCB\n\nX24I01A  WTOR  'X24I01A aaaaaaaa is at xxxxxxxx - OK to install front e+\n               nd ?',REPLY,3,ECB,ROUTCDE=2\n         WAIT  ECB=ECB                  * WAIT FOR RESPONSE\n         CLC   REPLY,YES                * PERMISSION GRANTED ?\n         BNE   DENIED                   * NO - QUIT\n* INSERT THE ADDRESS OF THE 'REAL' IGX00024 INTO THE IGX24CHK MODULE\n         MODESET KEY=ZERO               * GET INTO KEY ZERO\n         MVC   28(4,R10),SVCEP          * STORE @IGX00024 IN IGX24CHK\n         MODESET KEY=NZERO              * REVERT TO KEY 8\n         EJECT\n*----------------------------------------------------------------------\n* PERMISSION GRANTED, SO INSTALL THE IGX00024 FRONT END INTERCEPT\n*----------------------------------------------------------------------\n* SORT OUT THE ENTRY POINT ADDRESS\nDOINSTAL EQU   *\n         SR    R2,R2                    * GET @(EP) RELATIVE ...\n         ICM   R2,B'0111',BLEPADDR      * ... TO START OF MODULE\n         AR    R10,R2                   * COMPUTE ABSOLUTE ENTRY POINT\n         O     R10,AMODE31              * SET AMODE 31 BIT\n* AND INSTALL THE INTERCEPT ADDRESS IN THE ESR TABLE\nESRUPDTE EQU   *\n         MODESET KEY=ZERO,MODE=SUP      * KEY ZERO/SUPERVISOR STATE\n         ENQ   (SYSZSVC,TABLE,E,L'TABLE,SYSTEM),RET=NONE\n         LRA   R2,SVCEP                 * R2 = REAL ADDRESS OF ESRT\n         BC    8,DOLURA1                * JUMP IF OK TO PROCEED\n         LA    R8,4                     * ELSE ...\n         B     INSTDONE                 * ... REJECT UPDATE\n\n\n         AGO   .JRH9999\n                      1111111111222222222233333333334\n                4567890123456789012345678901234567890\n* Following line added by @14 change                                @14\nMSG112S  WTO   'SVC112S - Bad logic (loc #__) - R15=________ - please rX\n               eport',ROUTCDE=(11),MF=L                             @14\nMSG112SL EQU   *-MSG112S                                            @14\nMSG112SA EQU   WTOD+30,2           Logic location identifier        @14\nMSG112SB EQU   WTOD+40,8           R15 value                        @14\n*                                                                   @14\n\n\n\n\n\n\n\n* GETMAIN storage for the module and load the\n* SVC module into this storage\nDOLOAD   DS    0H\n         SR    R2,R2               Get size ...\n         ICM   R2,B'0111',BLMODLN  ... of module\n\n\n\n\n\nFLags\n=====\nSVC is ESR\nEPNAME is RMODE24\nEPNAME is AMODE24\nSVCLIB is open\n\n      then open, bldl, load, close, etc.\n\n.JRH9999 ANOP\n\n\n\n\n\n\n\n\nSVCENTRY DSECT\nSVCEP    DS    A                       SVC ENTRY POINT ADDRESS\nSVCAMODE EQU   X'80'                   AMODE INDICATOR         @G860PXF\nSVCATTR1 DS    0H                      ATTRIBUTES              @ZM45748\nSVCTP    DS    B                       TYPE FIELD              @ZM45748\nSVCTP1   EQU   X'00'                   TYPE 1 SVC\nSVCTP2   EQU   X'80'                   TYPE 2 SVC\nSVCTP34  EQU   X'C0'                   TYPE 3 OR 4 SVC\nSVCTP6   EQU   X'20'                   TYPE  6 SVC             @Z40FPYK\nSVCAPF   EQU   X'08'                   APF AUTHORIZED 1-AUTHORIZED\nSVCESR   EQU   X'04'                   SVC IS A PART OF THE ESR\nSVCNP    EQU   X'02'                   NON-PREEMPTIVE SVC      @Z40FPYK\nSVCASF   EQU   X'01'                   SVC CAN BE ASSISTED     @G50EPXH\nSVCATTR3 DS    B                       ATTRIBUTES                  @L2C\nSVCAR    EQU   X'80'                   SVC MAY BE ISSUED IN AR ASC @L2A\n*                                      MODE\nSVCSSESR EQU   X'01'                   Only applies to a subsystem\n*                                      screening table. Must be off\n*                                      for SVC entries.            @L3A\nSVCLOCKS DS    H                       LOCK ATTRIBUTES\nSVCLL    EQU   X'80'                   LOCAL LOCK NEEDED\nSVCCMS   EQU   X'40'                   CMS LOCK NEEDED\nSVCOPT   EQU   X'20'                   OPT LOCK NEEDED\nSVCALLOC EQU   X'10'                   SALLOC LOCK NEEDED\nSVCDISP  EQU   X'08'                   DISP LOCK NEEDED\n*\n*  MAPPING FOR ESR TABLE ENTRY                                 @G860PXF\n*\nSVCESRAD EQU   SVCEP,4                 ADDRESS OF ESR TABLE IF @G860PXF\n*                                      SVCESR IS ON            @G860PXF\nSVCESRMX EQU   SVCATTR1,4              MAXIMUM ESR NUMBER      @G860PXF\n*                                      SUPPORTED BY THIS ESR   @G860PXF\n\n* Parse routine needs to support the following\n*\n* SVC=nnn       SVC number to be assigned or in the case of an ESR\n*               function code the ESR SVC number for the type of\n*               SVC to be installed.\n*\n* LMOD=xxxxxxxx SVC load module name\n*\n* LOCKS=(xxx,yyy,...) where parameters must be one or more of the\n*       following:\n*       LOCAL   - local lock needed\n*       CMS     - general cross memory services lock\n*       OPT     -\n*       SALLOC  - space allocation lock\n*       DISP    - dispatcher (serializes certain global functions,\n*                 for example, TIMER queues.\n*       CMSSEQDQ - ENQ/DEQ CMS lock - serializes ENQ/DEQ functions\n*                  & control blocks\n*       Default is: ????????? (review existing code)\n*       Rules are: 1) Type 1 must not specify LOCAL (it is\n*                     automatically assigned by the SVC FLIH before\n*                     the SVC is given control)\n*                  2) Type 6 cannot specify any locks\n*                  3) Type 2, 3, or 4 must specify LOCAL if CMS\n*                     specified\n*                  4) Type 3 or 4 cannot specify a global spin lock\n*\n*                  See \"Serialization Summary\" chapter in the\n*                  repective \"z/OS - MVS Diagnosis: Reference\"\n*                  manual for additional information.\n*\n* APF=YES|NO    - SVC restricted to authorized programs\n*         ==\n* AR=YES|NO     - SVC can be issued by program in access register\n*        ==       ASC mode.\n* NPRMPT=YES|NO - SVC is non-preemptible (YES) or can be preempted\n*            ==   (NO)\n* TYPE=1|2|3|4|6 - SVC type. Default is 4.\n*            =\n* USER=xxxxxxxx  - Userid filter. Only this user gets the new SVC code\n*\n* Sample:\n* LMOD=xxxxxxxx,LOCKS=(LOCAL,CMS),APF=YES,AR=YES,NPRMPT=YES,TYPE=N,\n* GOODNITE=hhmm,USER=uuuuuuuu\n*\n* Insertion or replacement of Type 1 or Type 6 SVCs requires \"systems\"\n* level priviledges...i.e. update access to SYS1.PARMLIB.\n*\n* Use of lock parameters other than LOCAL & CMS requires \"systems\"\n* level priviledges.\n*\n* Use of attribute NPRMPT=YES requires \"systems\" level priviledges\n*\n* You cannot change the Type of a pre-existing SVC in the range of\n* 0-199 or any ESR T3/4 SVC in the same range.\n*\n* For now any modification of a Type 1, 2 or 6 ESR SVC entry (116,\n* 122, or 137) is off-limits.\n*\n*\n\n*\n* Get jobname for console messages\n*\n         L     R1,CVTPTR           R1 -> CVT\n         L     R1,0(R1)            R1 -> current TCB\n         L     R1,4(R1)            R1 -> TCB words\n         L     R1,12(R1)           R1 -> TIOT\n         MVC   Our_JOBNAME(8),0(R1) Set monitor task jobname for WTOs\n\n\n// EXEC PGM=SVCUPPARM='SVC=109,LMOD=xxxxxxxx,LOCKS=(12345678,12345678,\n//             12345678),APF=Y,AR=Y,NPRMPT=Y,TYPE=n,USER=xxxxxxxx,\n//             GOODNITE=HHMM'\n\nObviously the maximum length of the parameters that can be supplied\nexceeds 100 bytes.\n\nTYPE=n is superfulous when SVC=nnn represents an ESR SVC number.\n\nDoc for SVCUPDTE service says only CMS or LOCAL can be provided for\nthe LOCKS= parameter. Checked the macro and found the following:\n\n.*02* INPUT -\n.*       APF      AUTHORIZATION CODE FOR THE SVC\n.*       AR       SVC MAY BE ISSUED IN ACCESS REGISTER MODE\n.*       EP       POINTER DEFINED ENTRY POINT ADDRESS\n.*       FUNC     IS THE OPERATION TO PERFORM\n.*       LOCKS    LOCKS TO BE OBTAINED FOR SVC\n.*                   TYPE 1 LOCKS DEFAULT TO\n.*                      HAVING THE LOCAL LOCK\n.*                   TYPE 3 + 4 MAY NOT HAVE ANY GLOBAL\n.*                      SPIN LOCKS\n.*                   TYPE 6 MAY NOT HAVE LOCKS\n.*\n.*       MF       TYPE OF SVCUPDTE MACRO\n.*                  MF=(E,ADDR) EXECUTABLE\n.*                    =L        PARAMETER LIST\n.*                     STANDARD COMBINED LIST AND EXECUTABLE FORM\n.*       NPRMPT   NON-PREEMPTIVE SVC\n.*       RELATED  USER COMMENT\n.*       SVC      IS THE SVC NUMBER WHOSE TABLE ENTRY IS TO BE\n.*                MODIFIED\n.*       TYPE     SVC TYPE\n.*\n.*    TOKEN            VALUE RANGE\n.*    -----            -----------\n.*     APF              YES,NO\n.*     AR               YES,NO\n.*     EP               POINTER-DEFINED ENTRY POINT ADDRESS\n.*     FUNC          REPLACE,DELETE,EXTRACT,EXTRACTANY\n.*     LOCKS    (LOCAL,DISP,SRM,CMS,SALLOC) <==================\n.*     NPRMPT           YES,NO\n.*     SVC              0-255\n.*     TYPE             1-6\n.*     EPNAME           1-8 CHARACTER NAME\n.*\n.*    TOKEN          MF=E            MF=L         MF=STANDARD\n.*    -----          ----            ----         -----------\n.*     APF           ERROR            OK              OK\n.*     AR            ERROR            OK              OK\n.*     EP OR EPNAME   OK**            OK**         MANDATORY+\n.*     FUNC          ERROR         MANDATORY       MANDATORY\n.*     LOCKS         ERROR            OK              OK\n.*     NPRMPT        ERROR            OK              OK\n.*     RELATED      OPTIONAL       OPTIONAL         OPTIONAL\n.*     SVC            OK*             OK*          MANDATORY\n.*     TYPE          ERROR         MANDATORY       MANDATORY\n\nThe following provides category & type information for locks (SVC & other)\nSerialization summary:\nhttp://pic.dhe.ibm.com/infocenter/zos/v1r12/index.jsp?topic=%2Fcom.ibm.zos.\nr12.ieav200%2Fsersum.htm\n\n*\nENTITY#A DC    H'17'               Length of buffer (w/o lengths)\nENTITY#B DC    H'00'               Length of resource name\nFACILITY DC    AL1(8),CL8'#SNOMISC' RACF CLASS for RACROUTE\n*\nRESOURCE DC    CL17'SVCUPDTE_xxxyyy '\n\n\n\n\n         MVC   SAFRACFL(SAFRACLL),RACPATT Set RACROUTE model\n         LA    R2,ENTITYW3L        Pick up buffer length\n         STH   R2,ENTITYW1         Store for RACROUTE call\n         XC    ENTITYW2,ENTITYW2   Clear resource name length\n         MVI   ENTITYW3,C' '       Blank out entity field via\n         MVC   ENTITYW3+1(L'ENTITYW3-1),ENTITYW3 ripple\n         MVC   ENTITYW3,RESOURCE   Copy model entity\n*\n         RACROUTE REQUEST=AUTH,                                        X\n               ENTITYX=ENTITYW1,                                       X\n               CLASS=FACILITY,                                         X\n               ATTR=READ,                                              X\n               WORKA=SAFWA,                                            X\n               LOG=NONE,                                               X\n               RELEASE=1.9.2,                                          X\n               MF=(E,SAFRACFL)\n*\n* Save SAF R15 and RACF return code & reasons code for later use or\n* diagnostics\n*\n         ST    R15,SAFWR15\n         LA    R8,SAFRACFL     R8 -> RACROUTE Router Parameter list\n         USING SAFP,R8         RACF Router parameter list address\n         L     R14,SAFPRRET        Pick up RACF return code\n         ST    R14,SAFWRRET        Save for later\n         L     R14,SAFPRREA        Pick up RACF reason code\n         ST    R14,SAFWRREA        Save for later\n         DROP  R8                  Drop SAFP addressability\n*\n* Check to see if the invoking user is authorized to use program\n*\n         L     R15,SAFWR15         Pick up R15 from AUTH call\n         C     R15,=F'0'           Verify completed successfully ?\n         BE    INIT200             ...bif user authorized\n\n         DS    0F\nSAFRACFL RACROUTE REQUEST=AUTH,                                        X\n               ENTITYX=ENTITY#A,                                       X\n               CLASS=FACILITY,                                         X\n               ATTR=READ,                                              X\n               WORKA=SAFWA,                                            X\n               LOG=NONE,                                               X\n               RELEASE=1.9.2,                                          X\n               MF=L\nSAFRACLL EQU   *-SAFRACFL        Length of generated RACROUTE area\n\n\n\n\n.*       CHECK FOR VALID, NON-DUPLICATE LOCKS\n.*             - TYPE 1 DEFAULTS TO HAVING THE LOCAL LOCK\n.*             - TYPE 3 + 4 MAY NOT HOLD ANY GLOBAL SPIN LOCK\n.*             - TYPE 6 MAY NOT HOLD ANY LOCK\n\n.* CHECK FOR TYPE 3 OR TYPE 4 SVC REQUESTING A GLOBAL SPIN LOCK\n         AIF   (&TYPENUM NE 3 AND &TYPENUM NE 4).L0820   TYPE 3/4?\n         AIF   (&TEMP NE &NSRM AND &TEMP NE &NSALLOC\n               AND &TEMP NE &NDISP).L0820              SPIN LOCK?\n   MNOTE 12,'TYPE 3/4 SVC CANNOT GET SPIN (&LOCKS(&INDEX1)) LOCK.'\n&BADENT  SETC  'YES'                  FATAL ERROR DETECTED\n.L0820   ANOP\n\nThus SRM, SALLOC & DISP are all spin locks\n\n\n\n\nFollowing is from SNOJRH.MISC.JCLLIB(MLWTO):\n============================================\n\n*PROCESS USING(WARN(3))\n         SYSSTATE ARCHLVL=2\nMLWTO    TITLE '-----  Sample Multi-line WTO test  -----'\n*\n* Register equates\n*\n         YREGS\nMLWTO    CSECT\nMLWTO    AMODE 31\nMLWTO    RMODE ANY\n         SPLEVEL SET=4\n         J     MAIN000             Go to resume point\n*\nPGMNAME  DC    CL8'MLWTO'\nPGMVER   DC    CL6'V0R1M0'\nPGMDATE  DC    CL8'&SYSDATC'       YYYYMMDD form\nPGMTIME  DC    CL5'&SYSTIME'       HH.MM form\n*\nMAIN000  DS    0H\n         BAKR  R14,0               Save status on linkage stack\n         LARL  R12,LTORG_AREA\n         USING (LTORG_AREA,LTORG_AREA_END),R12\n         LAE   R12,0(R12,0)        Establish LTORG base\n*\n*        Obtain dynamic working storage\n*\n         L     R0,=A(DWSLEN)       R0 = length to acquire\n         STORAGE OBTAIN,           Get wirking storage                 X\n               COND=YES,                                               X\n               LENGTH=(R0),                                            X\n               LOC=24,                                                 X\n               BNDRY=PAGE\n         LTR   R15,R15             Did we get the DWS storage ?\n         JZ    MAIN010             ...jif yes, continue\n         WTO   'MLWTO - Initial STORAGE request failed - terminating wiX\n               th U1001 abend',ROUTCDE=(11)\n         ABEND 1001,DUMP\n*\n*        Clear work area & set LSE indicator in stack\n*\nMAIN010  DS    0H\n         LR    R11,R1              Dynamic area addressability\n         LR    R2,R1               Dynamic address to R2 for MVCL\n         L     R3,=A(DWSLEN)       Get length to initialize\n         LA    R4,0                Source\n         LA    R5,0                Source len of 0 + pad byte of 0\n         MVCL  R2,R4               Clear the dynamic area storage\n*\n         LR    R13,R11         Establish dynamic storage addressability\n*\n         MVC   4(4,R13),=CL4'F1SA' Linkage Stack indicator\n         USING DWS,R13             DWS addressability\n         EREG  R0,R1               Restore entry R1\n         ST    R1,Entry_R1         Save entry R1 for later & diagnosis\n*\n         XR    R0,R0               Clear GPR0 for WTO\n         MVC   DWSWTO(VMC002IL),VMC002I Install model WTOR list\n         WTO   TEXT=((CNTLLINE,),(LABELINE,),                          +\n               (DATALINE,),(DATALINE,),(DATALINE,),(DATALINE,),        +\n               (DATALINE,),(DATALINE,),(DATALINE,),(DATALINE,)),       +\n               MF=(E,DWSWTO)\n\n\n         L     R11,RETCODE         R11 = RETCODE\n         LR    R1,R13              Get DWS area address\n         STORAGE RELEASE,          Free                                X\n               ADDR=(R1),           the                                X\n               LENGTH=DWSLEN         work area\n         LR    R15,R11             Put RETCODE in R15\n         EREG  R0,R1               Restore entry R0 & R1 values\nEXITX    DS    0H\n         PR    ,                   Restore status & return\n*\n\n\nLTORG_AREA LOCTR ,\n*\n*        Litteral pool\n*\n         LTORG ,\nCNTLLINE DC    Y(34),CL34'ABC300I CONTROL LINE MESSAGE'\nLABELINE DC    Y(70),CL70'FIELD1---- FIELD2---- FIELD3---- FIELD4----'\nDATALINE DC    Y(70),CL70'DATA LINE DATA LINE DATA LINE DATA LINE'\n*\n*=====================================================================*\n*                                                                     *\n*        WTOs                                                         *\n*                                                                     *\n*=====================================================================*\n         PUSH  PRINT\n         PRINT ON,DATA,GEN\n* Template for modified WTO text messages\n*                     1111111111222222222233333333334444444444555555555\n*               4567890123456789012345678901234567890123456789012345678\n*\n*              5666666666677777\n*              9012345678901234\n*\n* Action WTOs\n*\nVMC003A  WTO   'VMC003A - VMCFINIT started SUB=____ - it must be starte+\n               d SUB=MSTR, please restart',ROUTCDE=2,DESC=2,MF=L\nVMC003AL EQU   *-VMC003A           Generate length of WTO list form\n*\n* Informational WTOs\n*\nVMC002I  WTO   TEXT=((,D),(,D),(,D),(,D),(,D),(,D),(,D),(,D),(,D),     +\n               (,DE)),                                                 +\n               AREAID=Z,                                               +\n               DESC=(8,9,12),                                          +\n               MCSFLAG=(NOTIME),                                       +\n               MF=L\nVMC002IL EQU   *-VMC002I\n         POP   PRINT\n*=====================================================================*\n*                                                                     *\n* Miscellaneous constants                                             *\n*                                                                     *\n*=====================================================================*\n*\n* WTO related constants\n*\nLTORG_AREA_END DS 0D\nMLWTO    LOCTR ,\n*\n* Dynamic working storage mapping\n*\nDWS      DSECT                     DYNAMIC WORKING STORAGE\n         DS    18F                 REGISTER SAVE AREA\nEntry_R1 DS    F                   GPR1 value on entry to this program\nRETCODE  DS    F                   Return code for caller\n* MISCELLANEOUS WORK AREAS\nDWSWORK  DS    2F                  WTOR parameter list area\n@PARM    DS    F                   @ of input parameter list\nWTORECB  DS    F                   WTOR ECB\nDOMID    DS    F                   Message number for displayed message\nREPLY    DS    CL9                 WTOR reply area\nWORK9    DS    CL9                 9 byte hex conversion work area\n* Keep next 3 lines together\n         DS    0F\nWTOLINEL DS    AL2                 70 bytes in maximum length\nWTOLINE  DS    CL70                Dynamic WTO line area\n         SPACE 1\nWTOTXTP  EQU   WTOLINE+2,9         <task name>+X'40'\n         LA    R4,WTOTXTP      R4  -> 1st position for task name in WTO\n         DS    0F\nDWSWTO   DS    CL400               DWSWTO area\nDWSWTOL  EQU   *-DWSWTO            Length of WTOR area\n* DWSWTO area equates for WTO message completion\nVMC003AA EQU   DWSWTO+35,4         SSIBSSNM for SUB= in VMC003A message\nVMC004IA EQU   DWSWTO+32,4         Subsystem name for VMC004I msg   @03\nVMC004IB EQU   DWSWTO+47,4         ASID # area for VMC004I message  @03\nVMC005IA EQU   DWSWTO+44,4         ASID # area for VMC005I message\nVMC005IB EQU   DWSWTO+65,8         R15 display area for VMC005I message\nVMC003RA EQU   DWSWTO+44,8         Hostname for VMC003R message\nVMC013IA EQU   DWSWTO+31,4         S/S name for VMC013I message\nVMC014IA EQU   DWSWTO+14,4         S/S name                         @02\nVMC014IB EQU   DWSWTO+57,8         S/S initialization program       @02\nVMC016IA EQU   DWSWTO+14,8         S/S initialization program       @02\nVMC016IB EQU   DWSWTO+43,4         S/S name                         @02\nVMC016IC EQU   DWSWTO+62,8         S/S NIP program return code      @02\nVMC021IA EQU   DWSWTO+52,8         MVPTSSI rc for VMC021I message   @02\n         SPACE 1\n         DC    0D'0'\nDWSLEN   EQU   *-DWS               GENERATE LENGTH OF WORKAREA\n* Miscellaneous system dummy sections\n         PRINT NOGEN\n         CVT   DSECT=YES,LIST=NO   Generate CVT area mapping\n         IKJTCB ,                  Generate TCB area mapping\n         IEZJSCB ,                 Generate JSCB area mapping\n         IHAPSA                    Generate Prefixed Save Area\n         END   MLWTO\n\n\n\n\n\n\nJ0611294  +SVCU000I SVC install audit report 623                       C\n SVCU001I *************************************************************\n SVCU002I * Installing userid=xxxxxxxx LMOD=tttttttt SIZE: xxxxxxxx   *\n SVCU003I * Entry_point: xxxxxxxx Load_point: xxxxxxxx                *\n SVCU004I * AMODE=nn RMODE=nnn Old SVC entry point: xxxxxxxx          *\n SVCU005I * SYSLIB=12345678901234567890123456789012345678901234       *\n SVCU006I * SVC=(nnn,esr) Type=n LOCKS=(LOCAL,CMS,SRM,DISP,SALLOC)    *\n SVCU007I * ATTR=(AP,AR,NP,AS)                                        *\n SVCU008I * USER_filter=xxxxxxxx GOODNITE=hhmm                        *\n SVCU001I *************************************************************\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SVCUPDTX": {"ttr": 5379, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x11\\x01\\x15$\\x7f\\x01\\x19\\x12_\\x179+\\xaf!x\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "2015-09-04T00:00:00", "modifydate": "2019-05-05T17:39:11", "lines": 11183, "newlines": 8568, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//*\n//*  ASSEMBLE SVCUPDTE\n//*\n//*ASMH EXEC PGM=IEV90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF,NORENT)\n//ASMH     EXEC PGM=ASMA90,REGION=4M,\n// PARM='OBJECT,NODECK,XREF(SHORT),TERM,FLAG(0,NOCONT),USING(WARN(3))'\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJ1,UNIT=SYSALLDA,SPACE=(CYL,(2,2)),\n//             DISP=(MOD,PASS),DCB=BLKSIZE=800\n//SYSUT1   DD  SPACE=(CYL,(5,10)),UNIT=SYSALLDA\n//SYSIN    DD  *\n*PROCESS USING(WARN(3))                                             @14\n         SYSSTATE ARCHLVL=2                                         @14\n***********************************************************************\n*                                                                     *\n* Name: SVCUPDTE                                                      *\n*                                                                     *\n* Function: Dynamic install of ESR (SVC 109) & non-ESR Type 2/3/4     *\n*           SVC                                                       *\n*                                                                     *\n* Purpose: This program defines an SVC routine to the system. It    @14\n*          supports the installation of all ESR routed or standard  @14\n*          SVC types 1, 2, 3/4, and 6. The installation of the SVC  @14\n*          code is either temportary or for the life of the IPL     @14\n*          depending on parameters supplied by the submitting uaer. @14\n*                                                                     *\n* Version/Release: V1R1                                               *\n*                                                                     *\n* Author:       J. Hamlet                                             *\n*               Information Systems Division                          *\n*               Mainframe Support Department                          *\n*                                                                     *\n* Installation: SAS Institute, Inc.                                   *\n*               1 SAS Circle                                          *\n*               Box 8000                                              *\n*               Cary, N.C. 27511-8000                                 *\n*                                                                     *\n* Dependencies:    MVS/ESA 4.2.2 or above                           @14\n*                  APF authorized                                     *\n*                  SVCUPDTE for Type-1, 2, 3/4 & 6 ESR 109 SVC      @14\n*                   installs                                        @14\n*                                                                   @14\n*               Protecting CLASS(#SNOMISC) profiles must exist for  @14\n*               SVC or ESR SVC to be installed.                     @14\n*                                                                   @14\n*               Standard SVC protection profiles will be of the     @14\n*               following form:                                     @14\n*                                                                   @14\n*               SVCUPDTE_nnn                                        @14\n*                                                                   @14\n*               where nnn is a 3 digit zoned decimal number in the  @14\n*               range of 0-255 where the ESR routed SVC numbers of  @14\n*               109, 116, 122 & 137 are excluded.                   @14\n*                                                                   @14\n*               ESR routed SVC protection profiles will be of the   @14\n*               following form:                                     @14\n*                                                                   @14\n*               SVCUPDTE_aaabbb                                     @14\n*                                                                   @14\n*               where aaa is a 3 digit zoned decimal number         @14\n*               representing the ESR routed SVC number and must be  @14\n*               109, 116, 122 or 137 and bbb is the 3 digit zoned   @14\n*               decimal function code whose range is dependent on   @14\n*               the type of ESR SVC being installed. See the SVC    @14\n*               parameter in the \"Usage:\" section below.            @14\n*                                                                   @14\n*                                                                   @14\n* Restrictions: As currently implemented the invoking user must     @14\n*               have read level authority to a pre-existing         @14\n*               CL(#SNOMISC) profile that protects the SVC or ESR   @14\n*               SVC slot requested by the input parameters.         @14\n*                                                                   @14\n* Module Type:  Procedure requires batch execution.                 @14\n*                                                                   @14\n* Attributes:   RENT, RMODE ANY, AMODE 31, PSW Keys 8 & zero,       @14\n*                                                                   @14\n*               Supervisor and problem state                        @14\n*                                                                   @14\n* Operation: This program defines an SVC routine to the system as a @14\n*            replacement in the SVC or ESR SVC slot assigned to     @14\n*            that SVC or it can list protecting RACF profiles for   @14\n*            those SVC or ESR SVC slots defined for this program's  @14\n*            usage in the CLASS(#SNOMISC).                          @14\n*                                                                   @14\n*            All SVC installations are temporary in nature and any  @14\n*            newly installed SVC will be deleted when the address   @14\n*            space executing the SVCUPDTE program is either stopped @14\n*            via an OS STOP command or cancelled from execution by  @14\n*            a Job Entry System or OS CANCEL command.               @14\n*                                                                   @14\n*            ENQ is used to prevent simultaneous installation of    @14\n*            the same SVC by different jobs.                        @14\n*                                                                   @14\n* Usage: SVCUPDTE is invoked via JCL to either list existing        @14\n*            CL(#SNOMISC) profiles used by this program along with  @14\n*            a status report for these profiles showing any address @14\n*            space that may be using an SVC or ESR SVC slot for     @14\n*            testing purposes as handled by this program or the     @14\n*            program can be used to perform a temporary install of  @14\n*            SVC code for testing/development purposes.             @14\n*                                                                   @14\n*            A \"LIST\" request consists of a PARM field that         @14\n*            contains only the text string LIST. Any other parame-  @14\n*            ter specification will be considered to be an attempt  @14\n*            to install or replace an SVC on the current system     @14\n*            image.                                                 @14\n*                                                                   @14\n*            Minimum mode follows:                                  @14\n*            =====================                                  @14\n*                                                                   @14\n*            // EXEC PGM=SVCUPDTE,PARM='LIST'                       @14\n*                                                                   @14\n*            The above requests that a list of the current profiles @14\n*            and the usage status of those profiles is to be        @14\n*            generated to a system generated ddname as a spin-      @14\n*            sysout file since the SYSPRINT DD was missing.         @14\n*                                                                   @14\n*            Same as above but without using a spun sysout file:    @14\n*            ===================================================    @14\n*                                                                   @14\n*            // EXEC PGM=SVCUPDTE,PARM='LIST'                       @14\n*            //SYSPRINT DD SYSOUT=* <- optional                     @14\n*                                                                   @14\n*            SVC installs use the following JCL:                    @1*\n*            ===================================                    @1*\n*                                                                   @14\n*            The SYSPRINT DD is not used for the SVC install path   @14\n*                                                                   @14\n*            // EXEC PGM=SVCUPDTE,PARM='parameters'                 @14\n*            //SVCLIB DD DISP=SHR,DSN=data-set-name,                @14\n*            //          FREE=CLOSE <- strongly suggested           @14\n*            //SYSTSPRT DD SYSOUT=* <- optional                     @14\n*                                                                   @14\n*            In the above JCL we suggest that the data set name     @14\n*            provided on the SVCLIB DD be freed when the program    @14\n*            closes the associated DCB. If this is not done         @14\n*            exclusive use of the library while the SVCUPDTE        @14\n*            program is in execution.                               @14\n*                                                                   @14\n*            The SYSTSPRT DD being directed to a sysout class is    @14\n*            optional. If there is an issue related to the parsing  @14\n*            of the input parameters you should use the SYSTSPRT    @14\n*            DD to gather as much information about the suspected   @14\n*            parse failure before reportign the problem to the SAS  @14\n*            Help Desk.                                             @14\n*                                                                   @14\n*          The description of the content of the above \"parameters\" @14\n*          possibilities follows.                                   @14\n*                                                                   @14\n*          PARM='SVC(aaa,bbb), +                              @05@08@14\n*                LMOD(cccccccc), +                            @05@08@14\n*                ATTR(NPRMT,APF,AR),                                @14\n*                LOCKS(LOCAL,CMS,SRM,SALLOC,DISP),                  @14\n*                TYPE(t),                                           @14\n*                GOODNITE(hhmm), +                                  @14\n*                USER(uuuuuuuu)'                                    @14\n*                                                                   @14\n*          where;                                                   @14\n*                                                                   @14\n*            SVC  is the SVC number you want to install. There are  @14\n*                 2 formats for requesting an SVC install;          @14\n*                                                                   @14\n*                 SVC(aaa) for a standard (non-ESR routed) SVC or   @14\n*                 SVC(aaa,bbb) for an ESR-routed SVC where aaa is   @14\n*                 the ESR routed SVC and bbb is the function code.  @14\n*                 In the case of the SVC(aaa,bbb) format the aaa    @14\n*                 value must be one of the following values;        @14\n*                                                                   @14\n*                 109 for a T3/4 ESR SVC                            @14\n*                 116 for a T1 ESR SVC                              @14\n*                 122 for a T2 ESR SVC                              @14\n*                 137 for a T6 ESR SVC                              @14\n*                                                                   @14\n*                 The bbb value must be within an acceptable range  @14\n*                 for the type of ESR SVC being defined where the   @14\n*                 acceptable ranges are:                            @14\n*                                                                   @14\n*                 001-255 for a T3/4 ESR SVC (109)                  @14\n*                 001-014 for a T1   ESR SVC (116)                  @14\n*                 001-019 for a T2   ESR SVC (122)                  @14\n*                 001-007 for a T6   ESR SVC (137)                  @14\n*                                                                   @14\n*                 Specification of an aaa value that is less than   @14\n*                 200 that is not one of the above ESR routed SVC   @14\n*                 numbers requires RACF global special priviledges  @14\n*                 and read level access to the protecting profile   @14\n*                 which must exist.                                 @14\n*                                                                   @14\n*                 Note: The SVC(aaa,bbb) format of this parameter   @14\n*                       is mutually exclusive of the TYPE           @14\n*                       parameter.                                  @14\n*                                                                   @14\n*                 The SVC parameter specification is required.      @14\n*                                                                   @14\n*            cccccccc is the name of a load module (or alias)       @14\n*                 that you want to install as SVC nnn. It must      @14\n*                 have the following attributes:                    @14\n*                                                                   @14\n*                 RENT                                              @14\n*                 REFR                                              @14\n*                 REUS                                              @14\n*                 EXEC                                              @14\n*                 Not OVLY phased                                   @14\n*                 Not SCTR (Scatter) format                         @14\n*                 Not RMODE=SPLIT                                   @14\n*                 Not TEST/TESTRAN                                  @14\n*                 AMODE 24 or AMODE 31                              @14\n*                                                                   @14\n*                 The load module to be installed must be loaded    @14\n*                 from the 1st library that exists in the SVCLIB    @14\n*                 concatenation sequence.                           @14\n*                                                                   @14\n*                 Note: A future release may alleviate this         @14\n*                       restriction. Time just did not allow the    @14\n*                       writing of the necessary code for this      @14\n*                       release of the SVCUPDTE utility program.    @14\n*                                                                   @14\n*                 The LMOD parameter is required in all SVC         @14\n*                 install attempts (non LIST executions).           @14\n*                                                                   @14\n*            ATTR(NPRMT,APF,AR) is the list of SVC attributes to be @14\n*                 assigned to the newly installed SVC code where    @14\n*                 all are optional. The supported and available SVC @14\n*                 attributes are;                                   @14\n*                                                                   @14\n*                 NPRMT - SVC is not pre-emptable for I/O interrup- @14\n*                        tions. If a non-preemptable SVC sustains   @14\n*                        an I/O interrupt, the SVC, rather than the @14\n*                        highest priority ready work will get       @14\n*                        control when I/O processing is complete.   @14\n*                        A non-preemtable SVC cannot issue other    @14\n*                        SVCs and remain non-preemptable. If a non- @14\n*                        preemtable SVC issdues a STAX DEFER=NO     @14\n*                        macro the SVC routine remain non-preemp-   @14\n*                        table until it exits.                      @14\n*                         DEFAULT: SVC will be pre-emptible         @14\n*                                                                   @14\n*                 APF   - SVC caller must be APF authorized         @14\n*                         DEFAULT: Caller does not need to be APF   @14\n*                                  authorized.                      @14\n*                                                                   @14\n*                 AR    - SVC caller can be in Access Register (AR) @14\n*                         ASC mode.                                 @14\n*                         DEFAULT: AR mode callers are not          @14\n*                                  supported.                       @14\n*                                                                   @14\n*                 Note: This parameter is optional.                 @14\n*                                                                   @14\n*            LOCKS(LOCAL,CMS,SRM,SALLOC,DISP) is the list of        @14\n*                 available system locks for the SVC FLIH (First    @14\n*                 Level INterrupt Handler) to obtain before the SVC @14\n*                 entry point is given control on bahalf of the SVC @14\n*                 caller. Several of these locks are restricted as  @14\n*                 they could impact other users of the system in    @14\n*                 the case of a problem in the introduced SVC code. @14\n*                 The locks specifications supported are:           @14\n*                                                                   @14\n*                 LOCAL  - This is a local suspend lock used to     @14\n*                         serialize functions and storage within a  @14\n*                         local address space. One local lock       @14\n*                         exists per address space. Type 3/4 SVCs   @14\n*                         are always entered with the local lock    @14\n*                         obtained regardless of wheter the local   @14\n*                         lock was requested.                       @14\n*                                                                   @14\n*                 CMS    - This is a GLOBAL SUSPEND lock used for   @14\n*                          serialization on more than one address   @14\n*                          space when the serialization is not      @14\n*                          provided by one or more of the other     @14\n*                          available global locks. The CMS lock     @14\n*                          provides global serialization when k     @14\n*                          enablement is required. See the section  @14\n*                          titled \"Serialization Summary\" in the    @14\n*                          \"z/OS Diagnosis: Reference\" manual for   @14\n*                          additional information.                  @14\n*                                                                   @14\n*                 Note: T3/4 SVCs can only request LOCAL or         @14\n*                       LOCAL+CMS locks                             @14\n*                                                                   @14\n*                 The following lock specifications can only be     @14\n*                 requested by a userid that has RACF Global        @14\n*                 Special priviledges and also has ACCESS(READ)     @14\n*                 authority for the protecting CLASS(#SNOMISC)      @14\n*                 profile that protects the SVC of ESR SVC sllot.   @14\n*                                                                   @14\n*                 SRM    - This is a GLOBAL SPIN lock that          @14\n*                         serializes SRM control blocks and         @14\n*                         data used by the SRM/OPT/WLM components   @14\n*                         of z/OS.                                  @14\n*                                                                   @14\n*                 SALLOC - This is a GLOBAL SPIN lock that          @14\n*                         serializes external routines that enable  @14\n*                         a processor for either an emergency       @14\n*                         signal (EMS) or a malfunction alert (MA). @14\n*                                                                   @14\n*                 DISP   - This is a GLOBAL SPIN lock that          @14\n*                         serializes certain global functions that  @14\n*                         are controlled by the z/OS Dispatcher.    @14\n*                         Some examples are WEB and TIMER queues    @14\n*                         but there are a lot of others.            @14\n*                                                                   @14\n*                                                                   @14\n*                 Note: If no LOCKS parameter is supplied you will  @14\n*                       get the IBM default lock assignment for the @14\n*                       SVC type being installed.                   @14\n*                                                                   @14\n*            TYPE(t) is the parameter that supplies the SVC type    @14\n*                 that is to be installed. The possible values for  @14\n*                 t are;                                            @14\n*                                                                   @14\n*                 1 - for a type 1 SVC                              @14\n*                 2 - for a type 2 SVC                              @14\n*                 3 - for a type 3 SVC                              @14\n*                 4 - for a type 4 SVC                              @14\n*                 6 - for a type 6 SVC                              @14\n*                                                                   @14\n*                 The TYPE specification and the SVC(aaa,bbb) form  @14\n*                 of the SVC parameter are mutually exclusive.      @14\n*                                                                   @14\n*                 A type 3 SVC traditionally identified a function  @14\n*                 that is contained in a single load module while   @14\n*                 a type 4 SVC identified a a function that loads   @14\n*                 additional modules. In the past one could         @14\n*                 identify these loaded modules as IGC01nnn,...,    @14\n*                 and IGC0xnnn. (IGC01nnn is the first module that  @14\n*                 IGC00nnn loads, IGC02nnn is the second module     @14\n*                 that IGC00nnn loads, etc.) These old conventions  @14\n*                 no longer hold water and the SVCUPDTE program     @14\n*                 although supporting both TYPE(3) and TYPE(4)      @14\n*                 specifications it does not support the specifica- @14\n*                 tion of more than one LMOD to provide the         @14\n*                 traditional TYPE(4) environment. All know IBM     @14\n*                 and vendor utilities used to display the SVC      @14\n*                 table entries will show \"T3/4\" for either a type  @14\n*                 3 or 4 SVC entry.                                 @14\n*                                                                   @14\n*                 For a non-ESR SVC installation...SVC(aaa) form    @14\n*                 of the SVC parameter the TYPE parameter is        @14\n*                 required.                                         @14\n*                                                                   @14\n*            GOODNITE(hhmm) is the parameter that supplies a time   @14\n*                 later on the same execution day that the SVCUPDTE @14\n*                 program will use to automatically uninstall the   @14\n*                 installed SVC and place back in service the       @14\n*                 previously existing SVC in the same SVC or ESR    @14\n*                 SVC slot.                                         @14\n*                                                                   @14\n*                 This parameter is optional.                       @14\n*                                                                   @14\n*            USER(uuuuuuuu) parameter is used to supply a \"filter\"  @14\n*                 userid. The logic is such that only this userid   @14\n*                 will have access to the newly installed SVC code  @14\n*                 while all other users of the SVC will have their  @14\n*                 SVC requests sent to the old entry point.         @14\n*                                                                   @14\n*                 Note: When using the USER(uuuuuuuu) parameter     @14\n*                       one must be aware that a single SVC or ESR  @14\n*                       SVC slot supports both the old SVC and new  @14\n*                       SVC code. Thus any ATTR or LOCKS assignment @14\n*                       for the new SVC will be in place for the    @14\n*                       old SVC callers also. Tus we discourage the @14\n*                       use of the USER(uuuuuuuu) parameter in      @14\n*                       combination with any change to the original @14\n*                       SVC or ESR SVC slot's locks or attributes   @14\n*                       supplied by any LOCKS or ATTR parameters    @14\n*                       furnished by the user for the new SVC. A    @14\n*                       case in point. Assume ATTR(APF) was speci-  @14\n*                       fied in combination with the USER(uuuuuuuu) @14\n*                       parameter for a replacement SVC. If this    @14\n*                       was done the result would be that both the  @14\n*                       calls to the old SVC and the calls to the   @14\n*                       new SVC would have to come from an APF      @14\n*                       authorized environment. This may not have   @14\n*                       been the intent of the SVC installer.       @14\n*                                                                   @14\n* Return codes:                                                       *\n*                                                                   @14\n*        0  Successful completion: SVC has been installed and       @14\n*           uninstalled or the requested LIST operation completed   @14\n*           successfully                                            @14\n*                                                                   @14\n*        1  SVCUPDTE program not APF authorized                     @14\n*                                                                   @14\n*        2  Required SVCUPDTE profile does not exist                @14\n*                                                                   @14\n*        3  Required SVC keyword not present                        @14\n*                                                                   @14\n*        4  Required SVCLIB DDname missing                          @14\n*                                                                   @14\n*        6  Required IRRSEQ00 service not available                 @14\n*                                                                   @14\n*        8  User not authorized to add/replace SVC specified        @14\n*                                                                   @14\n*        9  ERRET routine driven for LOAD SVC                       @14\n*                                                                   @14\n*       10  Non-zero return code from IKJTSOEV service              @14\n*                                                                   @14\n*       12  ENQ for SVCUPDTE resource failed                        @14\n*                                                                   @14\n*       16  LMOD supplied module name not found on SVCLIB library   @14\n*                                                                   @14\n*       18  Unable to obtain IRRSEQ00 workarea                      @14\n*                                                                   @14\n*       19  Unable to obtain RIBs workarea                          @14\n*                                                                   @14\n*       20  Illegal execution environment                           @14\n*                                                                   @14\n*       24  Backing slot for requested SVC or ESR-SVC is not T2/3/4 @14\n*           (obsolete)                                              @14\n*                                                                   @14\n*       26  Report sysout file allocation failure                   @14\n*                                                                   @14\n*       32  Open for report sysout file failed                      @14\n*                                                                   @14\n*       34  SAF extract failure                                     @14\n*                                                                   @14\n*       35  ESR T1/2/6 SVCs not supported (obsolete)                @14\n*                                                                   @14\n*       36  No SVCUPDTE profiles found                              @14\n*                                                                   @14\n*       37  EXTR000 - not CLASS(#SNOMISC) profile returned          @14\n*                                                                   @14\n*       38  EXTR000 - SD (Segment Descriptor) number returned was   @14\n*           not 1                                                   @14\n*                                                                   @14\n*       39  EXTR000 - BASE segment not returned                     @14\n*                                                                   @14\n*       40  EXTR000 - Invalid length SVCUPDTE_* profile found on    @14\n*           extract operation                                       @14\n*                                                                   @14\n*       41  CHKINUSE - unexpected GQSCAN return code received       @14\n*                                                                   @14\n*       42  Unable to acquire MLWTO workarea                        @14\n*                                                                   @14\n*       44  OPEN for SVCLIB data set failed                         @14\n*                                                                   @14\n*       48  SWAREQ request failed                                   @14\n*                                                                   @14\n*       52  SVCLIB not DSORG=PO/POE                                 @14\n*                                                                   @14\n*       56  SVCLIB not RECFM=U                                      @14\n*                                                                   @14\n*       60  SVCLIB library cannot be multi-volume                   @14\n*                                                                   @14\n*       64  Member name coded on SVCLIB (not supported)             @14\n*                                                                   @14\n*       68  Invalid LOCKS parameter supplied                        @14\n*                                                                   @14\n*       72  SVC number parameter supplied not numeric               @14\n*                                                                   @14\n*       73  SVCUPDTE reveral failed                                 @14\n*                                                                   @14\n*       76  GOODNITE time (hhmm) supplied parameter not numeric     @14\n*                                                                   @14\n*       80  SVC number not in range 0-255                           @14\n*                                                                   @14\n*       84  GOODNITE time (hhmm) supplied parameter out of range    @14\n*                                                                   @14\n*       88  GOODNITE time (hhmm) supplied time less than current    @14\n*           time                                                    @14\n*                                                                   @14\n*       92  ESR T3/4 naming convention violation (obsolete)         @14\n*                                                                   @14\n*       96  LMOD module attribute requirements not met              @14\n*                                                                   @14\n*      100  LOAD for LMOD module failed                             @14\n*                                                                   @14\n*      104  LMOD module is RMODE=SPLIT                              @14\n*                                                                   @14\n*      105  LMOD module not marked RENT on SVCLIB                   @14\n*                                                                   @14\n*      106  LMOD module not marked REUS on SVCLIB                   @14\n*                                                                   @14\n*      107  LMOD module not marked REFR on SVCLIB                   @14\n*                                                                   @14\n*      108  LMOD module not marked EXEC on SVCLIB                   @14\n*                                                                   @14\n*      109  LMOD module cannot be marked OVLY on SVCLIB             @14\n*                                                                   @14\n*      110  LMOD module cannot be marked SCTR on SVCLIB             @14\n*                                                                   @14\n*      111  LMOD module cannot be marked SPLIT on SVCLIB            @14\n*                                                                   @14\n*      112  Bad lgic (loc #__) - R15=________                       @14\n*                                                                   @14\n*      113  LMOD module cannot be marked TEST/TESTRAN on SVCLIB     @14\n*                                                                   @14\n*      114  LMOD module must be on 1st library in any SVCLIB        @14\n*           supplied concatenation sequence                         @14\n*                                                                   @14\n*      120  Insufficient CSA/ECSA for SVC module to be installed    @14\n*                                                                   @14\n*      121  Insufficient ESQA for USER filter code                  @14\n*                                                                   @14\n*      124  User not authorized to set requested LOCK               @14\n*                                                                   @14\n*      128  Missing input parameter/parameters                      @14\n*                                                                   @14\n*      132  Excessive input parameter length                        @14\n*                                                                   @14\n*      136  Invalid character(s) in input parameters found          @14\n*                                                                   @14\n*      137  IKJPARS failed parameter string                         @14\n*                                                                   @14\n*      140  Invalid PARM field found                                @14\n*                                                                   @14\n*      141  SVC or ESR SVC slot ENQ SYSTEM failed                   @14\n*                                                                   @14\n*      142  Non-ESR SVC request requires TYPE be specified          @14\n*                                                                   @14\n*      143  SVCUPDTE service request failed                         @14\n*                                                                   @14\n*      144  QEDIT failure                                           @14\n*                                                                   @14\n* Abends:                                                             *\n*                                                                   @14\n*      U901  - Unable to obtain ENQ for SYSZSVC table               @14\n*                                                                   @14\n*      U902  - QEDIT limit set failure                              @14\n*                                                                   @14\n*      U333  - Invalid logic detected during parse processing       @14\n*                                                                   @14\n*      U334  - Logic error detected in TYPE assignment              @14\n*                                                                   @14\n*      U1001 - Invalid SVC type passed parsing                      @14\n*                                                                   @14\n*                                                                     *\n* Modification Log                                                    *\n* ================                                                    *\n* D a t e tag         Description of change & responsible party       *\n* ======= === ======================================================= *\n* 01Jun96 n/a -Genesis. Goal to reduce IPLs for SVC Type 3 installs.  *\n*              **********************************************<SNOJRH> *\n* 10Jun96 @01 -Leave SVC installed and exit if module was loaded from *\n*              LPA and \"goodnight\" time missing in PARM.*****<SNOJRH> *\n* 12Jun96 @02 -Issue ENQ on SYSZSVC/table to prevent simultaneous     *\n*              updates.**************************************<SNOJRH> *\n* 14Jun96 @03 -Restore address of old SVC after temporary install of  *\n*              SVC.******************************************<SNOJRH> *\n* 10Oct97 @04 -Fix \"good-night\" routine which hasn't been working for *\n*              a while.**************************************<SNOJRH> *\n* 28Oct98 @05 -Restrict access to new SVC to userid specified in PARM *\n*              field. Idea from Gilbert Saint-Flour. Survive LPA      *\n*              resident check when performing screen.********<SNOJRH> *\n* 16Nov98 @06 -Support to install IGX00nnn named module as a Type-3   *\n*              ESR function (only ESR SVC 109 supported).****<SNOJRH> *\n* 01Dec98 @07 -Prevent conflict on ENQ when SVC 109 is being used for *\n*              ESR install when ESR numbers are unique and being      *\n*              tested simultaneously.************************<SNOJRH> *\n* 01Dec98 @08 -PARM option for LOCAL and CMS locks for special test   *\n*              requirements.*********************************<SNOJRH> *\n* 27Nov01 @09 -Reviewed support for dynamic LPA and found CDNIP check *\n*              following CHECKLPA label is sufficient and that the    *\n*              ECVTDLPF (first) through ECVTDLPL (last) chain does    *\n*              not need to be scanned for dynamic LPA queue           *\n*              existence.************************************<SNOJRH> *\n* 12Jul11 @10 -Updated for FLAG(PAGE0)***********************<SNOSEW> *\n* 15Dec11 @11 -Support for Large Page Support...i.e support for       *\n*              1MB page sizes. PGSER PROTECT|UNPROTECT operations are *\n*              not supported for locations in the R/O Nucleus even if *\n*              1MB page support is not enabled on the newer           *\n*              processors the R/O Nucleus will be backed by 1MB       *\n*              pages. If PGSER PROTECT|UNPROTECT operations are       *\n*              attempted on the newer processors for areas in the     *\n*              R/O nucleus a S18A abend will occur with the reason    *\n*              code placed in GPR0 identifying the operation. The     *\n*              code is now upward and downward compatible for all     *\n*              supported z/OS releases.***************<SNOJRH/SNOSEW> *\n* 15Dec11 @12 -Fix bug left over from @06 change where wrong register *\n*              used to preserve ESR function code in the ESR# field.  *\n*              **********************************************<SNOJRH> *\n* 16Dec11 @13 -Fix bug left over from @07 change where SVCNO was used *\n*              execute form of ENQ instead of RNAME. This resulted in *\n*              the SVC number parameter being repeated twice as the   *\n*              RNAME when an ESR SVC was involved instead of the SVC  *\n*              number followed by the ESR number.************<SNOJRH> *\n* 25Oct13 n/a -Replaced displacement branches with relative branches. *\n*              **********************************************<SNOJRH> *\n* 22Jul15 @14 -Version 2 Release 0 (total rewrite):                   *\n*              -Program now designed to run from the system LNKLST    *\n*               by verifying that it is not being executed under TEST *\n*               or TESTAUTH.                                          *\n*              -SVC load modules will now be loaded from SVCLIB       *\n*               instead of STEPLIB.                                   *\n*              -Above SVCLIB library does NOT need to be APF          *\n*               authorized.                                           *\n*              -Will now issue WTO indicating what user has installed *\n*               what SVC.                                             *\n*              -Requires batch execution now instead of as a started  *\n*               procedure.                                            *\n*              -Lots of new return codes added due to use of IRRSEQ00 *\n*               (RACF Administration) service and support for users   *\n*               requesting an inventory report of registered SVC slot *\n*               profiles using that service.                          *\n*              -Users attempting to install/replace an SVC will have  *\n*               the following CLASS(#SNOMISC) rule checked:           *\n*                                                                     *\n*               SVCUPDTE_xxxyyy                                       *\n*                                                                     *\n*               where;                                                *\n*                                                                     *\n*               xxx is the SVC number and                             *\n*                                                                     *\n*               yyy is the ESR function code if xxx is an ESR routed  *\n*                   SVC. The yyy portion is not present if the        *\n*                   xxx portion represents a standard SVC.            *\n*                                                                     *\n*              **********************************************<SNOJRH> *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                    @14\n* Local macros                                                      @14\n         SPACE 1                                                    @14\n*-----------------------------------------------------------------* @14\n*  $RWTO macro for writing messages to the operator where the WTO * @14\n*  MF=L template is remote.                                       * @14\n*-----------------------------------------------------------------* @14\n         MACRO ,                                                    @14\n&NAME    $RWTO &MSG,&WRITE=YES                                      @14\n         AIF   ('&NAME' EQ '').NONAME                               @14\n&NAME    DS    0H                                                   @14\n.NONAME  ANOP                                                       @14\n         AIF   (K'&MSG EQ 0).ERROR1                                 @14\n         AIF   (K'&MSG GT 8).ERROR2                                 @14\n         AIF   ('&MSG' EQ 'WTOD').NOMVC   Bypass MVC if msg set up  @14\n         LARL  R1,&MSG                 Resolve long relative @      @14\n         MVC   WTOD(&MSG.L),0(R1)      Copy WTO message to DWS area @14\n         AIF   ('&WRITE' EQ 'NO').NOWRITE Bypass write if requested @14\n.NOMVC   ANOP                                                       @14\n         LA    R1,WTOD                 Load WTO address             @14\n         XR    R0,R0                   Clear R0                     @14\n         WTO   MF=(E,(1))               & issue message to operator @14\n         MEXIT                                                      @14\n.NOWRITE ANOP                                                       @14\n         MEXIT                                                      @14\n.ERROR1  MNOTE 8,'ERROR:  Message variable name missing'            @14\n         MEXIT                                                      @14\n.ERROR2  MNOTE 8,'ERROR:  Message variable name must be LT 8 bytes' @14\n         MEND                                                       @14\n*\nSVCUPDTE CSECT\nSVCUPDTE AMODE 31\nSVCUPDTE RMODE ANY\n*        USING SVCUPDTE,R15        Initial addressability           @14\n*        J     RESUME              Go to resume point               @14\n         J     MAIN000             Go to resume point               @14\n*\nPGMNAME  DC    CL8'SVCUPDTE'\nPGMVER   DC    CL8'V2R0M0'                                          @14\nPGMDATE  DC    CL8'&SYSDATC'\nPGMTIME  DC    CL8'&SYSTIME'\n*\n*RESUME  DS    0H                                                   @14\nMAIN000  DS    0H                                                   @14\n*        DROP  R15                 Lose initial addressability\n*        STM   R14,R12,12(R13)     Save caller's registers          @14\n         BAKR  R14,0               Save status on linkage stack     @14\n         LARL  R12,LTORG_AREA                                       @14\n         USING (LTORG_AREA,LTORG_AREA_END),R12                      @14\n         LAE   R12,0(R12,0)        Establish LTORG base             @14\n*        BALR  R10,0               Set base register                @14\n*        USING *,R10               Inform assembler                 @14\n         L     R4,0(,R1)       R4->PARM address (preserve for PARSE)\n         L     R0,=A(DWSLEN)                                        @14\n*                                                                   @14\n*        Obtain & clear working storage                             @14\n*                                                                   @14\n         STORAGE OBTAIN,           Get storage                      @14X\n               LENGTH=(R0),                                         @14X\n               LOC=BELOW,                                           @14X\n               BNDRY=PAGE                                           @14\n         AGO   .JRH0217A                                            @14\n         GETMAIN R,LV=DYNAML       Get storage\n         ST    R13,4(,R1)          Chain\n         ST    R1,8(,R13)           save\n         LR    R13,R1                areas\n         USING DYNAM,R13           DWS addressability\n         LA    R14,DYNAM+72        Clear work area\n         LA    R15,DYNAML-72       \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n         SLR   R1,R1               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n         MVCL  R14,R0              \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n.JRH0217A ANOP                                                      @14\n*                                                                   @14\n*        Clear work area & set LSE indicator in stack               @14\n*                                                                   @14\n         LAE   R13,0(R1,0)         Load storage address             @14\n         USING DWS,R13             Addressability                   @14\n         LAE   R0,DWS              Clear                            @14\n         L     R1,=A(DWSLEN)                                        @14\n         LAE   R14,0(0,0)           storage                         @14\n         SR    R15,R15                                              @14\n         MVCL  R0,R14                area                           @14\n*                                                                   @14\n*        Initialize some one time only DWS fields                   @14\n*                                                                   @14\n         ST    R13,DWSADDR         Save DWS address (for ESTAEX)    @14\n         MVC   SAVEAREA+4(4),=C'F1SA'  Put acronym in save area     @14\n*                                                                   @14\n         ST    R4,@INPARMS         Save @  parameters in DWS        @14\n         XC    RETCODE,RETCODE     Clear higher level return code   @14\n******************************************************************* @14\n*                                                                 * @14\n* Note: For all BRASL invoked subroutines called below the called * @14\n*       routine is responsible for:                               * @14\n*                                                                 * @14\n*       1) Issuing an appropriate WTO regarding any failure       * @14\n*       2) Returning here to exit with the return code from the   * @14\n*          subroutine posted in the RETCODE field                 * @14\n*                                                                 * @14\n*        Perform main environmental checks before parsing         * @14\n*        parameters.                                              * @14\n*                                                                 * @14\n******************************************************************* @14\n         BRASL R14,INIT000         Perform initial checks           @14\n         L     R15,RETCODE         Restore return code              @14\n         LTR   R15,R15             Any errors ?                     @14\n         JNZ   MAINX               ...jif so, MLT                   @14\n*                                                                   @14\n*        Acquire storage for RIBs return area                       @14\n*                                                                   @14\n*        -This area is common to reporting (LIST) & install         @14\n*         operations and should be freed on exit from the mainline  @14\n*         routine.                                                  @14\n*                                                                   @14\n         LARL  R1,RIBSPACE         Get @ of size of area to acquire @14\n         L     R0,0(R1)            R0 = size of area to acquire     @14\n         ST    R0,AMOUNTL          Save in GQSCAN structure         @14\n         STORAGE OBTAIN,           Get working storage              @14X\n               COND=YES,                                            @14X\n               LENGTH=(R0),                                         @14X\n               LOC=ANY,                                             @14X\n               BNDRY=PAGE                                           @14\n         LTR   R15,R15             Did we get the RIBs storage ?    @14\n         JZ    MAIN010             ...jif yes, continue             @14\n*                                                                   @14\n*        Unable to acquire RIBs work area                           @14\n*                                                                   @14\n         $RWTO MSG018A,WRITE=YES                                    @14\n         LHI   R15,BADENV19        Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     MAINX                 & go exit w/ return code       @14\n*                                                                   @14\n*        Clear obtained RIBs work area                              @14\n*                                                                   @14\nMAIN010  DS    0H                                                   @14\n         OI    FLAGS,F1#RIBSA      Indicate RIBs area acquired      @14\n         ST    R1,RIBS             Save pointer for later           @14\n         ST    R1,RIBSPACE_p       Save pointer for refresh         @14\n         LR    R2,R1               Dynamic address to R2 for MVCL   @14\n         LARL  R3,RIBSPACE         Get size of area to clear        @14\n         L     R3,0(R3)            R3 = size of area to clear       @14\n         LA    R4,0                Source                           @14\n         LA    R5,0                Source len of 0 + pad byte of 0  @14\n         MVCL  R2,R4               Clear the dynamic RIBs storage   @14\n*                                                                   @14\n*        Check to see if invoker has system level privileges        @14\n*                                                                   @14\n         BRASL R14,SYSC000         Go check for system priviledges  @14\n         L     R15,RETCODE         Restore return code              @14\n         LTR   R15,R15             Any errors ?                     @14\n         JNZ   MAINX               ...jif so, MLT                   @14\n*                                                                   @14\n*        Parse input parameters & stage for processing              @14\n*                                                                   @14\n*        J     GOLIST              <development - to skip parse>    @14\n         BRASL R14,PARS000         Go parse input parameters        @14\n         L     R15,RETCODE         Restore return code              @14\n         LTR   R15,R15             Any errors ?                     @14\n         JNZ   MAINX               ...jif so, MLT                   @14\n*                                                                   @14\n*        Was LIST requested ? If so go generate report              @14\n*                                                                   @14\n*        -LIST option skips environmental checks in ENV000          @14\n*                                                                   @14\n         TM    Parse_flags,Parse_LIST                               @14\n         JNO   MAIN100                                              @14\nGOLIST   DS    0H                  <development - to skip parse>    @14\n         BRASL R14,REPORT          Generate SVC slot profile report @14\n         J     MAINX               Just return for LIST option      @14\n*                                                                   @14\n* Note: Successful parse means at least minimum required            @14\n*       parameters have been supplied and all flags regarding       @14\n*       SVC attributes have been validated & set for the processing @14\n*       phase.                                                      @14\n*                                                                   @14\n*        Perform environmental checks                               @14\n*                                                                   @14\nMAIN100  DS    0H                                                   @14\n         BRASL R14,ENV000          Go check environmentals          @14\n         L     R15,RETCODE         Restore return code              @14\n         LTR   R15,R15             Any errors ?                     @14\n         JNZ   MAINX               ...jif so, MLT                   @14\n*                                                                   @14\n*        Go load & install the SVC                                  @14\n*                                                                   @14\n         BRASL R14,INST000         Go install SVC                   @14\n         L     R15,RETCODE         Restore return code              @14\n         LTR   R15,R15             Any errors ?                     @14\n         JNZ   MAINX               ...jif so, MLT                   @14\n*                                                                   @14\n*        Free RIBs work area if acquired                            @14\n*                                                                   @14\nMAINX    DS    0H                                                   @14\n         TM    FLAGS,F1#RIBSA      Was RIBs work area acquired ?    @14\n         JNO   MAINX_010           ...jif not , skip free           @14\n         L     R9,AMOUNTL          R9 = size of area to free        @14\n         L     R3,RIBS             R3 -> @ of area to free          @14\n         STORAGE RELEASE,                                           @14X\n               LENGTH=(R9),                                         @14X\n               ADDR=(R3)           Free WIBs work area storage      @14\n*                                                                   @14\n*        Close any still open files                                 @14\n*                                                                   @14\nMAINX_010 DS   0H                                                   @14\n         USING IHADCB,R10                                           @14\n         LA    R10,SVCLIB          R10 -> SVCLIB DCB                @14\n         TM    DCBOFLGS,DCBOFOPN   Is dataset open ?                @14\n         JNO   MAINX_020           ...jif not, skip CLOSE           @14\n         OI    W#OPNDO,X'80'       Indicate end of parameter list   @14\n         CLOSE ((R10)),MODE=31,MF=(E,W#OPNDO) Close SVCLIB          @14\n         DROP  R10                 Lose SVCLIB DCB addressability   @14\nMAINX_020 DS   0H                                                   @14\n         L     R9,RETCODE          Restore return code for caller   @14\n         STORAGE RELEASE,                                           @14X\n               LENGTH=DWSLEN,                                       @14X\n               ADDR=(R13)          Free DSA storage                 @14\n         LR    R15,R9              Set return code for caller       @14\n         PR                    Return to caller via Linkage Stack   @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - INST000 - setup && install SVC'          @14\n******************************************************************* @14\n*                                                                 * @14\n* This routine is responsible for the following functions:        * @14\n*                                                                 * @14\n* 1) Obtain communications ECB address for support of the system  * @14\n*    STOP command and disable SMF JWT recording.                  * @14\n* 2) ENQueue on SVCUPDTE_xxx or SVCUPDTE_xxxyyy to serialize      * @14\n*    update to specific SVC table entry by any other address      * @14\n*    space on this same system.                                   * @14\n* 3) Fetch SVC or ESR-SVC entry to be replaced and squirrel it    * @14\n*    away in the OLDENTRY field. The entry point for the \"old\"    * @14\n*    SVC table entry is also saved in the SVCENTRY_PTR field.     * @14\n* 4) Obtain SP241 or SP228 CSA or ECSA as appropriate for the     * @14\n*    loading of the \"new\" SVC code. The address of this area is   * @14\n*    saved in the @CSAEPN field. The entry point address is       * @14\n*    calculated and saved in the @CSAEPN@ field. The length of    * @14\n*    this area is located in the MODSIZE field.                   * @14\n* 5) Perform a directed load of the user's SVC code into the      * @14\n*    area obtained in 4).                                         * @14\n* 6) CLOSE the SVCLIB data set.                                   * @14\n* 7) If USERID filtering is to be used obtain SP245 SQA storage   * @14\n*    for copying and updating filter code which will become the   * @14\n*    SVC/ESR slot's entry point value. The address of this area   * @14\n*    is saved in the SQA_ADDR field. The length of this area is   * @14\n*    the value of the CHKU500L equate.                            * @14\n* 8) Construct SVCUDTE parameter list based on flags & attributes * @14\n*    captured during parse processing for the \"new\" SVC entry.    * @14\n* 9) Construct SVCUDTE parameter list based on the SVC entry      * @14\n*    captured in the OLDENTRY field in 3) above.                  * @14\n* 10) Enqueue on the SVC table to serialize SVC table update.     * @14\n* 11) Update the SVC table                                        * @14\n* 12) Release enqueue on the system SVC table                     * @14\n* 13) If GOODNITE time specified issue STIMERM supplying address  * @14\n*     of communications ECB and the GOODNITE exit routine's       * @14\n*     address to be given control.                                * @14\n* 14) Issue ESTAE to be given control on CANCEL command for this  * @14\n*     address space                                               * @14\n* 15) Issue LONG=YES WAIT for a STOP command (or CANCEL command)  * @14\n*     Obtain enqueue on SVC table.                                * @14\n* 16) Place old SVC entry back in the SVC slot.                   * @14\n*     Release enqueue on SVC table.                               * @14\n* 17) Free ESAQ storage occupied by filter code.                  * @14\n* __) Free CSA/ECSA storage occupied by user's SVC code.          * @14\n* __) Exit.                                                       * @14\n*                                                                 * @14\n******************************************************************* @14\nINST000  DS    0H                                                   @14\n         STM   R14,R12,SAVE@L1+12  Save caller's registers          @14\n*\n*        Disable SMF JWT\n*\n         MODESET KEY=ZERO,MODE=SUP\n         L     R2,PSAAOLD-PSA(0,0) Our ASCB\n         OI    ASCBRCTF-ASCB(R2),ASCBTOFF  Present S522 abends\n*\n*        Initialize console interface\n*\n         MODESET KEY=NZERO,MODE=PROB Return to TCB key\n         L     R3,CVTPTR(0,0)      Get CVT address\n         USING CVT,R3              CVT addressability\n         L     R4,CVTTCBP          Get IEATCBP address\n         DROP  R3                  Drop CVT\n         L     R4,4(,R4)           Get current TCB address\n         USING TCB,R4              TCB addressability\n         L     R5,TCBJSCB          Get JSCB address\n         DROP  R4                  Drop TCB\n         USING IEZJSCB,R5          JSCB addressability\n         L     R6,JSCBCSCB         Get CSCB address\n         ST    R6,@CSCB            Save CSCB address\n         USING CSCB,R6             CSCB addressability\n         L     R8,CHCSCXP          R8 -> CSCX\n         USING CSCX,R8             CSCX addressability\n         L     R0,CHECBP           Load STOP/MODIFY ECB address\n         ST    R0,CIBECB           Store ECB address in work area\n         ICM   R7,B'1111',CHCIBP   Get CIB address\n         LTR   R7,R7               Is it a START CIB ?\n         JZ    INST005             ...jif not, we don't have one\n         USING CIB,R7              CIB addressability\n         CLI   CIBVERB,CIBSTART    Is this the START CIB ?\n         JNE   INST005             ...jif not, keep it in the chain\n         QEDIT ORIGIN=CHCIBP,BLOCK=(7) Free the START CIB\n         LTR   R15,R15             Was the QEDIT successful ?\n         JZ    INST005             ...jif so...go set CIB limit\n*\n*        Issue message about QEDIT failure (free)\n*\n         LR    R4,R15              Preserve QEDIT return code\n         ST    R15,DWD             \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n         $RWTO MSG914A,WRITE=NO\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG914AA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,BADQEDIT        Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     INSTX                 & make like trees\nINST005  DS    0H                  Set CIB limit\n         QEDIT ORIGIN=CHCIBP,CIBCTR=1  Set CIB limit to one\n         LTR   R15,R15             Was the QEDIT successful ?\n         JZ    INST007             ...jif so...go to resume point\n*\n*        Issue message about QEDIT failure (limit=1)\n*\n         LR    R4,R15              Preserve QEDIT return code\n         ST    R15,DWD             \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n         $RWTO MSG917A,WRITE=NO\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG917AA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,BADQEDIT        Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     INSTX                 & make like trees\n*\n*        CIBECB field contains communications ECB address\n*\n*                                                                   @14\n*        ENQueue on SVC table entry slot as used by this program    @14\n*                                                                   @14\n*        Note: QNAME & RNAME already filled in by CHKINUSE routine  @14\n*        Note: RNAME length found in RNAMEEL field also by CHKINUSE @14\n*                                                                   @14\nINST007  DS    0H                                                   @14\n         MVC   ENQL(ENQMODLL),ENQMODL  Install model slot ENQ       @14\n         XR    R7,R7               Clear RNAME length register      @14\n         ICM   R7,B'0001',RNAMEEL  Insert length                    @14\n         ENQ   (QNAME,RNAME,E,(R7),SYSTEM),RET=USE,MF=(E,ENQL)      @14\n         ST    R15,DWD             Save return code                 @14\n         LTR   R15,R15             Did we get the SVC slot ?        @14\n         JZ    INST010             ...jif so                        @14\n*                                                                   @14\n*        Issue ENQ failure during install message                   @14\n*                                                                   @14\n         $RWTO MSG909A,WRITE=NO                                     @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG909AA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,BADFENQ         Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     INSTX                 & go exit w/ return code       @14\n*                                                                   @14\n*        We now have ENQ on SVC table slot used by this program     @14\n*                                                                   @14\n*        Fetch SVC table entry for base SVC number                  @14\n*                                                                   @14\nINST010  DS    0H                                                   @14\n*        WTO   'INST010 - we obtained SVC slot ENQueue'             @14\n         L     R3,CVTPTR(0,0)      R3->CVT                          @14\n         USING CVTMAP,R3           CVT addressability               @14\n         L     R4,CVTABEND         R4->Secondary CVT                @14\n         DROP  R3                  Drop CVT                         @14\n         USING SCVTSECT,R4         SCVT addressability              @14\n         SLR   R5,R5               Clear for insert                 @14\n         ICM   R5,B'0001',SVC#     Insert SVC number                @14\n         SLL   R5,3                Multiply by 8                    @14\n         AL    R5,SCVTSVCT         Add origin of SVC table          @14\n         USING SVCENTRY,R5         SVC entry addressability         @14\n         ST    R5,SVCENTRY_PTR     Save entry address               @14\n*                                                                   @14\n*        See if ESR SVC to fetch correct entry                      @14\n*                                                                   @14\n         TM    ATTR_FLAGS,ATTR_ESR ESR SVC request ?                @14\n         JNO   INST020             ...jif not                       @14\n*                                                                   @14\n*        Adjust for ESR slot to fetch correct entry                 @14\n*                                                                   @14\n         XR    R1,R1               Clear for insert                 @14\n         ICM   R1,B'0001',ESR#     Insert binary ESR #              @14\n         SLL   R1,3                Multiply by 8                    @14\n         L     R5,SVCEP            R5->ESR table                    @14\n         LA    R5,SVCENTRY+8(R1)   R5->ESR entry                    @14\n         ST    R5,SVCENTRY_PTR     Save ESR entry address           @14\nINST020  DS    0H                                                   @14\n         MVC   OLDENTRY,SVCENTRY   Save old SVC entry contents      @14\n*        WTO   'INST020 - we obtained SVC slot info'                @14\n         DROP  R5                  Drop SVC entry addressability    @14\n*                                                                   @14\n*        Obtain CSA/ECSA storage for user's SVC code                @14\n*                                                                   @14\n         L     R2,MODSIZE          Obtain in storage key 0          @14\n         MODESET KEY=ZERO,MODE=SUP Go to Key 0 SUP state            @14\n         TM    FLAGS,F1#AM31       AMODE = 31/64 module ?           @14\n         JNO   INST030            ...jif not                        @14\n* Obtain 31-bit ECSA SP228 storage for the load module              @14\n         STORAGE OBTAIN,                                            @14X\n               LOC=(31,64),                                         @14X\n               LENGTH=(2),                                          @14X\n               ADDR=(3),           Return address in GPR3           @14X\n               SP=228,                                              @14X\n               COND=YES                                             @14\n         J     INST040             Go to common check               @14\n* Obtain 24-bit CSA SP228 storage for the load module               @14\nINST030  DS    0H                                                   @14\n         STORAGE OBTAIN,                                            @14X\n               LOC=(24,64),                                         @14X\n               LENGTH=(2),                                          @14X\n               ADDR=(3),           Return address in GPR3           @14X\n               SP=228,                                              @14X\n               COND=YES                                             @14\nINST040  DS    0H                                                   @14\n         LR    R4,R15             Save STORAGE return code          @14\n         MODESET KEY=NZERO,MODE=PROB Return to K8 problem state     @14\n         LTR   R4,R4              Did we get the ECSA/CSA ?         @14\n         JZ    INST050            ...jif so                         @14\n*                                                                   @14\n*        Obtain for CSA/ECSA storage failed                         @14\n*                                                                   @14\n         $RWTO MSG130E,WRITE=NO                                     @14\n         ST    R2,DWD             Save length in source location    @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG130EA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         MVC   MSG130EB,LMOD       Install LMOD name                @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,BADNOCSA        Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     INSTX                 & go exit w/ return code       @14\n*                                                                   @14\n*        Indicate we have CSA/ECSA - address is in GPR3             @14\n*                                                                   @14\nINST050  DS    0H                                                   @14\n         OI    FLAGS,F1#GOTCSA     We have obtained CSA/ECSA        @14\n         ST    R3,@CSAEPN          Save address for LOAD/free       @14\n*        WTO   'INST050 - we obtained CSA/ECSA'                     @14\n*                                                                   @14\n*        Place user's LMOD in CSA/ECSA                              @14\n*                                                                   @14\n         MODESET MODE=SUP,KEY=ZERO                                  @14\n         LA    R11,SVCLIB          R11 -> SVCLIB DCB                @14\n         LOAD  DE=BLNAME,                                           @14X\n               DCB=(R11),                                           @14X\n               ERRET=INST060,      Error routine                    @14X\n               ADRNAPF=(R3),                                        @14X\n               SF=(E,LOAD4L)                                        @14\n         LR    R4,R15              Preserve return code             @14\n         LTR   R4,R4               Any LOAD problems ?              @14\n         JZ    INST070                                              @14\n*                                                                   @14\n*        LOAD ERRET routine                                         @14\n*                                                                   @14\n* Note: When entered R1 contains the LOAD abend code and R15        @14\n*       contains the reason code associated with the abend. Exit    @14\n*       from this routine must include logic to close SVCLIB and    @14\n*       free CSA/ECSA.                                              @14\n*                                                                   @14\nINST060  DS    0H                                                   @14\n         ST    R1,DWD              Save R1  (abend code)            @14\n         ST    R15,DWD+4           Save R15 (reason code)           @14\n         MODESET MODE=PROB,KEY=NZERO                                @14\n         $RWTO MSG100A,WRITE=NO    Install message template         @14\n         LA    R1,DWD              Source for hex conversion        @14\n         LA    R15,MSG100AA        Target for hex conversion        @14\n         UNPK  0(9,R15),0(5,R1)    Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         LA    R1,DWD+4            Source for hex conversion        @14\n         LA    R15,MSG100AB        Target for hex conversion        @14\n         UNPK  0(9,R15),0(5,R1)    Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES      Write the message                @14\n*                                                                   @14\n*        Free the obtained CSA/ECSA storage we failed to use        @14\n*                                                                   @14\nINST062  DS    0H                                                   @14\n         L     R1,@CSAEPN          Get address to free              @14\n         L     R2,MODSIZE          Get length to free               @14\n         MODESET KEY=ZERO,MODE=SUP Go to Key 0 Supervisor state     @14\n         STORAGE RELEASE,                                           @14X\n               ADDR=(1),                                            @14X\n               LENGTH=(2),                                          @14X\n               SP=228                                               @14\n         MODESET KEY=NZERO,MODE=PROB Return to Key 8 Problem state  @14\n         L     R1,RETCODE          Was return code                  @14\n         LTR   R1,R1                already set ?                   @14\n         JNZ   INSTX               ...jif so use it instead         @14\n         LHI   R1,BADEPN3          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     INSTX                 and return to caller           @14\n*                                                                   @14\n*        We can CLOSE the SVCLIB DDname now                         @14\n*                                                                   @14\nINST070  DS    0H                                                   @14\n         MODESET MODE=PROB,KEY=NZERO                                @14\n         USING IHADCB,R10                                           @14\n         LA    R10,SVCLIB          R10 -> SVCLIB DCB                @14\n         OI    W#OPNDO,X'80'       Indicate end of parameter list   @14\n         CLOSE ((R10)),MODE=31,MF=(E,W#OPNDO) Close SVCLIB          @14\n         DROP  R10                 Lose SVCLIB DCB addressability   @14\n*                                                                   @14\n*        Adjust CSA/ECSA resident code for proper entry point       @14\n*                                                                   @14\n         L     R3,@CSAEPN          Get load point address           @14\n         AL    R3,MODEPOFF         Add entry point offset           @14\n         ST    R3,@CSAEPN@         Save for SVCUPDTE plist update   @14\n*        WTO   'LMOD now in CSA/ECSA'                               @14\n*                                                                   @14\n*        Obtain SQA for USERID filtering if requested               @14\n*                                                                   @14\n         TM    PKW_used,PKW_USER   Was USER keyword supplied ?      @14\n         JNO   INST090             ...jif not                       @14\n         MODESET MODE=SUP,KEY=ZERO Supervisor state w/ Key 0        @14\n         L     R2,=A(CHKU500L)     Get length to acquire            @14\n         STORAGE OBTAIN,                                            @14X\n               LOC=(31,64),                                         @14X\n               LENGTH=(2),                                          @14X\n               ADDR=(3),           Return address in GPR3           @14X\n               SP=245,                                              @14X\n               COND=YES                                             @14\n         LR    R4,R15              Save return code                 @14\n         MODESET MODE=PROB,KEY=NZERO Return to problem state        @14\n         LTR   R4,R4               Did we get the storage ?         @14\n         JZ    INST080             ...jif so                        @14\n*                                                                   @14\n*        SQA storage acquisition failed for USERID filter code      @14\n*                                                                   @14\n         $RWTO MSG131E,WRITE=YES                                    @14\n         LHI   R1,BADNOSQA         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     INST062               and go free CSA/ECSA           @14\n*                                                                   @14\n*        Copy filter code to SQA - SQA address is in GPR3           @14\n*                                                                   @14\nINST080  DS    0H                                                   @14\n         ST    R3,SQA_ADDR         Work-area in SQA                 @14\n*        MODESET EXTKEY=ZERO       Go to key zero                @05@14\n         MODESET KEY=ZERO          Go to key zero                   @14\n         LARL  R5,CHKU500          R5 -> code source                @14\n         MVC   0(CHKU500L,R3),0(R5) Move screening code to SQA      @14\n         USING CHKU500,R3          Inform assembler                 @14\n*                                                                   @14\n*        Get new SVC @ in GPR and save in CHKU500N                  @14\n*                                                                   @14\n         L     R6,@CSAEPN@         Fetch new SVC entry point @      @14\n         TM    FLAGS,F1#AM31       SVC AMODE31 ?                    @14\n         JNO   INST082             ...jif not                       @14\n         O     R6,=XL4'80000000'   Set hob-bit                      @14\nINST082  DS    0H                                                   @14\n         ST    R6,CHKU500N         @ new SVC                        @14\n*                                                                   @14\n*        Save old entry point @ in CHKU500O                         @14\n*                                                                   @14\n*        Note: SVC TYPE really should match to do this since we     @14\n*              will be changing attributes & locks & possibly the   @14\n*              TYPE.                                                @14\n*                                                                   @14\n         MVC   CHKU500O,OLDENTRY   @ old SVC                        @14\n*                                                                   @14\n*        Install filter USERID value                                @14\n*                                                                   @14\n         MVC   CHKU500U,USERID     User-ID                          @14\n*                                                                   @14\n*        Install SVC number for debug purposes                      @14\n*                                                                   @14\n         MVC   CHKU500#,SVCNO      SVC number                       @14\n         MVC   CHKU500#+3(3),ESRSVCNO Install routing code (if any) @14\n         DROP  R3                  CHKU500 in SQA                   @14\n*                                                                   @14\n*        SQA_ADDR field contains SVC screening code address here    @14\n*                                                                   @14\n         LR    R6,R3               SVC screening code            @05@14\n         BSM   R6,0                set AMODE bit                    @05\n*        MODESET EXTKEY=ZERO                                     @05@14\n         MODESET KEY=ZERO                                        @05@14\n*        WTO   'Screening code in SQA'                              @14\nINST090  DS    0H                                                   @14\n******************************************************************* @14\n*                                                                 * @14\n*        Build SVCUPDTE plist for new SVC code                    * @14\n*                                                                 * @14\n******************************************************************* @14\n******************************************************************* @14\n*                                                                 * @14\n*        Build SVCUPDTE plist for new SVC code. The SVCUPDTE      * @14\n*        plist representing the old SVC entry is built from the   * @14\n*        content of the SVC table entry captured earlier in the   * @14\n*        OLDENTRY field. The SVCUPDTE plist representing the      * @14\n*        \"new\" SVC code is built from the following sources:      * @14\n*                                                                 * @14\n*        SVCUVERS - from SVCUMODL model template                  * @14\n*        SVCUFC   - from SVCUMODL model template                  * @14\n*        SVCUFLGS - SVCUFLGS_ESR bit set if ATTR_FLAGS.ATTR_ESR   * @14\n*                   bit set                                       * @14\n*        SVCUSVC  - Set from SVC# (copied)                        * @14\n*        SVCUEP   - from @CSAEPN@ field content or if a USER      * @14\n*                   filter is supplied from the SQA storage       * @14\n*                   address located in the SQA_ADDR field. The    * @14\n*                   hob-bit will be turned on if SQA_ADDR field   * @14\n*                   is non-zero if USER filtering is used or else * @14\n*                   turned on if FLAGS.F1#AM31 bit is on.         * @14\n*        SVCUTYPE - from TYPEBIN field (copied)                   * @14\n*        SVCUATTR - from multiple sources:                        * @14\n*                   -SVCUATTR_NPRMPT set if ATTR_FLAGS.ATTR_NPRMT * @14\n*                    flag set                                     * @14\n*                   -SVCUATTR_AR     set if ATTR_FLAGS.ATTR_AR    * @14\n*                    flag set                                     * @14\n*                   -SVCUATTR_APF    set if ATTR_FLAGS.ATTR_APF   * @14\n*                    flag set                                     * @14\n*        SVCULCKS - from multiple sources:                        * @14\n*                   -SVCULCKS_LOCAL  set if                       * @14\n*                    LOCKS_FLAGS.LOCKS_LOCAL is set               * @14\n*                   -SVCULCKS_CMS    set if                       * @14\n*                    LOCKS_FLAGS.LOCKS_CMS   is set               * @14\n*                   -SVCULCKS_SRM    set if                       * @14\n*                    LOCKS_FLAGS.LOCKS_SRM   is set               * @14\n*                   -SVCULCKS_SALLOC set if                       * @14\n*                    LOCKS_FLAGS.LOCKS_SALLOC is set              * @14\n*                   -SVCULCKS_DISP   set if                       * @14\n*                    LOCKS_FLAGS.LOCKS_DISP   is set              * @14\n*                                                                 * @14\n*                   Note: The layout of the LOCKS_FLAGS byte is   * @14\n*                         identical to the layout of the          * @14\n*                         SVCULCKS byte so we will just copy the  * @14\n*                         LOCKS_FLAGS byte to the SVCULCKS byte   * @14\n*                         here.                                   * @14\n*                                                                 * @14\n*        SVCUESRC - from ESR# (copied) if the flag                * @14\n*                   ATTR_FLAGS.ATTR_ESR is set                    @ @14\n*                                                                 * @14\n******************************************************************* @14\n*                                                                   @14\n         MVC   SVCUPLNEW,SVCUMODL  Install model                    @14\n         LA    R3,SVCUPLNEW        R3 -> SVCUPDTE plist             @14\n         USING SVCU,R3             Inform assembler                 @14\n         L     R2,SQA_ADDR         Pick up possible filter code @   @14\n         LTR   R2,R2               Was USER flter supplied ?        @14\n         JZ    INST092             ...jif not, complete from CSA @  @14\n*                                                                   @14\n*        USER filter was supplied - address of SQA resident code    @14\n*        will become SVC slot entry point                           @14\n*                                                                   @14\n         O     R2,=XL4'80000000'   Set hob-bit                      @14\n         ST    R2,SVCUEP           Save as SVC entry point          @14\n         J     INST100              and go handle SVCTP             @14\n*                                                                   @14\n*        USER filter was not supplied - address of entry point      @14\n*        of loaded code in CSA/ECSA will become SVC slot entry      @14\n*        point                                                      @14\n*                                                                   @14\nINST092  DS    0H                                                   @14\n         L     R2,@CSAEPN@         R2 -> CSA/ECSA E.P. address      @14\n         TM    FLAGS,F1#AM31       SVC AMODE31 ?                    @14\n         JNO   INST094             ...jif not                       @14\n         O     R2,=XL4'80000000'   Set hob-bit                      @14\nINST094  DS    0H                                                   @14\n         ST    R2,SVCUEP           Save as SVC entry point          @14\n*                                                                   @14\n*        Process SVC TYPE here for new SVC code                     @14\n*                                                                   @14\n*        Note: SVC type is mandatory on Execute form of the         @14\n*              SVCUPDTE macro...this includes for ESR SVC router    @14\n*              types.                                               @14\n*                                                                   @14\nINST100  DS    0H                                                   @14\n         MVI   SVCUTYPE,x'04'      Assume T3/4 SVC                  @14\n         CLI   SVC#,109            Was it ?                         @14\n         JE    INST102             ...jif so                        @14\n         MVI   SVCUTYPE,x'01'      Assume T1 SVC                    @14\n         CLI   SVC#,116            Was it ?                         @14\n         JE    INST102             ...jif so                        @14\n         MVI   SVCUTYPE,x'02'      Assume T2 SVC                    @14\n         CLI   SVC#,122            Was it ?                         @14\n         JE    INST102             ...jif so                        @14\n         MVI   SVCUTYPE,x'06'      Assume T6 SVC                    @14\n         CLI   SVC#,137            Was it ?                         @14\n         JE    INST102             ...jif so                        @14\n         MVC   SVCUTYPE,TYPEBIN    Set SVC type from field          @14\n*                                                                   @14\n*        Process SVC LOCKS here for new SVC code                    @14\n*                                                                   @14\nINST102  DS    0H                                                   @14\n         MVC   SVCULCKS,LOCKS_FLAGS Copy flags                      @14\n*                                                                   @14\n*        Process SVC ESR flag for new SVC code                      @14\n*        Process SVC ESR #    for new SVC code                      @14\n*                                                                   @14\n         TM    ATTR_FLAGS,ATTR_ESR Request for part of the ESR ?    @14\n         JNO   INST110             ...jif not                       @14\n         OI    SVCUFLGS,SVCUFLGS_ESR Set ESR provided flag          @14\n         MVC   SVCUESRC,ESR#       Copy routing code value          @14\n*                                                                   @14\n*        Process SVCUSVC for new SVC code                           @14\n*                                                                   @14\nINST110  DS    0H                                                   @14\n         MVC   SVCUSVC,SVC#        Install SVC # to modify          @14\n*                                                                   @14\n*        Process SVC attributes for new SVC code                    @14\n*                                                                   @14\n         TM    ATTR_FLAGS,ATTR_NPRMT Non-preemptible requested ?    @14\n         JNO   INST120             ...jif not                       @14\n         OI    SVCUATTR,SVCUATTR_NPRMPT else set NPRMT bit          @14\nINST120  DS    0H                                                   @14\n         TM    ATTR_FLAGS,ATTR_AR  AR mode request ?                @14\n         JNO   INST130             ...jif not                       @14\n         OI    SVCUATTR,SVCUATTR_AR     else set AR bit             @14\nINST130  DS    0H                                                   @14\n         TM    ATTR_FLAGS,ATTR_APF APF state request ?              @14\n         JNO   INST140             ...jif not                       @14\n         OI    SVCUATTR,SVCUATTR_APF    else set APF bit            @14\n******************************************************************* @14\n*                                                                 * @14\n*        Build SVCUPDTE plist for old SVC code                    * @14\n*                                                                 * @14\n******************************************************************* @14\n******************************************************************* @14\n*                                                                 * @14\n*        Build SVCUPDTE plist for old SVC code. The SVCUPDTE      * @14\n*        plist representing the old SVC entry is built from the   * @14\n*        content of the SVC table entry captured earlier in the   * @14\n*        OLDENTRY field. The SVCUPDTE plist representing the      * @14\n*        \"old\" SVC code is built from the following sources where * @14\n*        the SVC table entry mapping is provided by the SVCENTRY  * @14\n*        dummy section mapping provided by IHASVC:                * @14\n*                                                                 * @14\n*        SVCUVERS - from SVCUMODL model template                  * @14\n*        SVCUFC   - from SVCUMODL model template                  * @14\n*        SVCUFLGS - SVCUFLGS_ESR bit set if ATTR_FLAGS.ATTR_ESR   * @14\n*                   bit set                                       * @14\n*        SVCUSVC  - Set from SVC# (copied)                        * @14\n*        SVCUEP   - from SVCEP content (copied). This includes    * @14\n*                   the hob-bit.                                  * @14\n*        SVCUTYPE - from SVCTP field where:                       * @14\n*                   -If SVCTP34 bits set then set to 0x04         * @14\n*                   -If SVCTP2  bit  set then set to 0x02         * @14\n*                   -If SVCTP6  bit  set then set to 0x06         * @14\n*                                                                 * @14\n*                   otherwise set to 0x01                         * @14\n*                                                                 * @14\n*        SVCUATTR - from multiple sources:                        * @14\n*                   -SVCUATTR_NPRMPT set if SVCNP bit is on       * @14\n*                   -SVCUATTR_AR     set if SVCAR bit is on       * @14\n*                   -SVCUATTR_APF    set if SVCAPF bit is on      * @14\n*        SVCULCKS - from multiple sources:                        * @14\n*                   -SVCULCKS_LOCAL  set if SVCLL bit is on       * @14\n*                   -SVCULCKS_CMS    set if SVCCMS bit is on      * @14\n*                   -SVCULCKS_SRM    set if SVCOPT bit is on      * @14\n*                   -SVCULCKS_SALLOC set if SVCALLOC bit is on    * @14\n*                   -SVCULCKS_DISP   set if SVCDISP bit is on     * @14\n*                                                                 * @14\n*        SVCUESRC - from ESR# (copied) if the flag                * @14\n*                   ATTR_FLAGS.ATTR_ESR is set                    @ @14\n*                                                                 * @14\n******************************************************************* @14\n*                                                                   @14\nINST140  DS    0H                                                   @14\n         LA    R2,OLDENTRY         R2 -> copy of SVC table entry    @14\n         USING SVCENTRY,R2         Inform assembler                 @14\n         MVC   SVCUPLOLD,SVCUMODL  Install SVCUPDTE model           @14\n         LA    R3,SVCUPLOLD        R3 -> SVCUPDTE plist             @14\n*                                                                   @14\n*        Set SVCUFLGS byte bits in plist                            @14\n*                                                                   @14\n         TM    ATTR_FLAGS,ATTR_ESR ESR entry ?                      @14\n         JNO   INST150             ...jif not                       @14\n         OI    SVCUFLGS,SVCUFLGS_ESR  Indicate ESR # given          @14\n*                                                                   @14\n*        Set SVCUSVC byte in plist                                  @14\n*                                                                   @14\nINST150  DS    0H                                                   @14\n         MVC   SVCUSVC,SVC#        Set SVC # in plist               @14\n*                                                                   @14\n*        Set SVCUEP address in plist                                @14\n*                                                                   @14\n         MVC   SVCUEP,SVCEP        Copy old E.P @ w/ hob-bit        @14\n*                                                                   @14\n*        Set SVCUTYPE value in plist                                @14\n*                                                                   @14\n         AGO   .JH1106A                                            @14\n*        Note: If ATTR_FLAGS.ATTR_ESR is set then we would have     @14\n*              validated the type during oarse processing and the   @14\n*              TYPE keyword is mutually exclusive with the ESR      @14\n*              value on the SVCUPDTE macro. So the skinny is that   @14\n*              we don't want to set SVCUTYPE if the ATTR_ESR flag   @14\n*              has been set. All validations for range, etc. have   @14\n*              already been performed to be here.                   @14\n*                                                                   @14\n         TM    ATTR_FLAGS,ATTR_ESR ESR SVC routing code request ?   @14\n         JO    INST200             ...jif so, skip setting type     @14\n.JH1106A ANOP                                                       @14\n         TM    SVCTP,SVCTP34       Type 3/4 ?                       @14\n         JNO   INST160             ...jif not                       @14\n         MVI   SVCUTYPE,X'04'      Set to Type 3/4                  @14\n         J     INST200             Go to reume point                @14\nINST160  DS    0H                                                   @14\n         TM    SVCTP,SVCTP2        Type 2 ?                         @14\n         JNO   INST170             ...jif not                       @14\n         MVI   SVCUTYPE,X'02'      Set to Type 2                    @14\n         J     INST200             Go to reume point                @14\nINST170  DS    0H                                                   @14\n         TM    SVCTP,SVCTP6        Type 6 ?                         @14\n         JNO   INST180             ...jif not                       @14\n         MVI   SVCUTYPE,X'06'      Set to Type 6                    @14\n         J     INST200             Go to reume point                @14\nINST180  DS    0H                                                   @14\n         MVI   SVCUTYPE,X'01'      Set to Type 1                    @14\n*                                                                   @14\n*        Set SVCUATTR value in plist                                @14\n*                                                                   @14\nINST200  DS    0H                                                   @14\n         TM    SVCTP,SVCNP         Non-preemptable ?                @14\n         JNO   INST210             ...jif not                       @14\n         OI    SVCUATTR,SVCUATTR_NPRMPT else set NP flag            @14\nINST210  DS    0H                                                   @14\n         TM    SVCATTR3,SVCAR      Access Register mode allowed ?   @14\n         JNO   INST220             ...jif not                       @14\n         OI    SVCUATTR,SVCUATTR_AR    else set AR flag             @14\nINST220  DS    0H                                                   @14\n         TM    SVCTP,SVCAPF        APF only callers ?               @14\n         JNO   INST230             ...jif not                       @14\n         OI    SVCUATTR,SVCUATTR_APF   else set APF flag            @14\n*                                                                   @14\n*        Set SVCULCKS bits in plist                                 @14\n*                                                                   @14\nINST230  DS    0H                                                   @14\n         TM    SVCLOCKS,SVCLL      Local lock set in old entry ?    @14\n         JNO   INST240             ...jif not                       @14\n         OI    SVCULCKS,SVCULCKS_LOCAL else set local lock bit      @14\nINST240  DS    0H                                                   @14\n         TM    SVCLOCKS,SVCCMS     CMS lock set in old entry ?      @14\n         JNO   INST250             ...jif not                       @14\n         OI    SVCULCKS,SVCULCKS_CMS   else set CMS lock bit        @14\nINST250  DS    0H                                                   @14\n         TM    SVCLOCKS,SVCOPT     SRM lock set in old entry ?      @14\n         JNO   INST260             ...jif not                       @14\n         OI    SVCULCKS,SVCULCKS_SRM   else set SRM lock bit        @14\nINST260  DS    0H                                                   @14\n         TM    SVCLOCKS,SVCALLOC   SALLOC lock set in old entry ?   @14\n         JNO   INST270             ...jif not                       @14\n         OI    SVCULCKS,SVCULCKS_SALLOC else set SALLOC lock bit    @14\nINST270  DS    0H                                                   @14\n         TM    SVCLOCKS,SVCDISP    DISP lock set in old entry ?     @14\n         JNO   INST280             ...jif not                       @14\n         OI    SVCULCKS,SVCULCKS_DISP   else set DISP lock bit      @14\n*                                                                   @14\n*        Set SVCUESRC value in plist                                @14\n*                                                                   @14\nINST280  DS    0H                                                   @14\n         TM    ATTR_FLAGS,ATTR_ESR Part of ESR ?                    @14\n         JNO   INST300             ...jif not                       @14\n         MVC   SVCUESRC,ESR#       Copy ESR FC                      @14\n         DROP  R3                  Drop SVCU                        @14\n*                                                                   @14\n*        At this point the SVCUPDTE plist for the new SVC to be     @14\n*        installed is located in the SVCUPLNEW area and the         @14\n*        SVCUPDTE plist for the old SVC to be re-installed on       @14\n*        exit is located in the SVCUPLOLD area.                     @14\n*                                                                   @14\n*        Go to Key 0 Supervisor state                               @14\n*                                                                   @14\nINST300  DS    0H                                                   @14\n         MODESET KEY=ZERO,MODE=SUP\n*                                                                   @14\n*        ENQueue on the SVC table                                   @14\n*                                                                   @14\n         MVC   ENQ_TABLE(ESVCTMODL),ESVCTMOD                        @14\n         ENQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM\n*\n*        Did we get exclusive use of the resource ?\n*\n         ST    R15,DWD             Save ENQ return code/@ of area   @14\n         LTR   R15,R15             Did we get the SVC table ?       @14\n         JZ    INST310             ...jif so                        @14\n*                                                                   @14\n*        Issue SVC table ENQ failure & go clean up                  @14\n*                                                                   @14\n         MODESET MODE=PROB,KEY=NZERO                                @14\n         $RWTO MSG910A,WRITE=YES                                    @14\n         $RWTO MSG911A,WRITE=NO                                     @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG911AA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,BADENQ          Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     INSTX_FREE            & go exit w/ return code       @14\n*\n*        Save registers and update SVC table\n*\n*        Note: SVCUPDTE needs local addressability, Key 0 &\n*              Supervisor state for minimum authorization. We\n*              should already be in that state and key if the\n*              above enqueue on the SVC table succeeded.\n*\nINST310  DS    0H                                                   @14\n         STM   R14,R12,PUTSAVE+12  Borrow unused save area          @14\n         BASR  R10,0               Macro internal addressability    @14\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"    @14\n*                                                                   @14\n*        Install the new SVC code using the SVCUPLNEW plist         @14\n*                                                                   @14\n         SVCUPDTE MF=(E,SVCUPLNEW)                                  @14\n         DROP  R10             Drop internal macro addressability   @14\n         LR    R4,R15              Preserve return code             @14\n         ST    R15,DWD             Preserve return code             @14\n*                                                                   @14\n*        Drop ENQ on SVC table resource (on success or failure)     @14\n*                                                                   @14\n         DEQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14\n*                                                                   @14\n*        Check SVCUPDTE REPLACE operation return code               @14\n*                                                                   @14\n         LTR   R4,R4               Was update successful ?          @14\n         JZ    INST320             ...jif successful                @14\n*                                                                   @14\n*        SVCUPDTE was not successful - issue message and clean up   @14\n*                                                                   @14\n         MODESET MODE=PROB,KEY=NZERO                                @14\n         $RWTO MSG912A,WRITE=YES                                    @14\n         $RWTO MSG913A,WRITE=NO                                     @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG913AA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,BADSVCUS        Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     INSTX_FREE            & go exit w/ return code       @14\n*                                                                   @14\n*        SVC table update was successful so we need to do the       @14\n*        following:                                                 @14\n*                                                                   @14\n*        1) Issue MLWTO announcing what was done                    @14\n*        2) Set STIMER if GOODNITE time provided                    @14\n*        3) Set ESTAE for CANCEL                                    @14\n*        4) Wait for STOP or CANCEL                                 @14\n*                                                                   @14\nINST320  DS    0H                                                   @14\n         MODESET MODE=PROB,KEY=NZERO                                @14\n         BRASL R14,MLWTO           Write out MLWTO message          @14\n*                                                                   @14\n*        Set timer if GOODNITE parameter was supplied               @14\n*                                                                   @14\n         MODESET KEY=NZERO,MODE=PROB Return to TCB key              @14\n         CLI   ENDOFDAY,C'0'       Was GOODNITE supplied ?          @14\n         JL    INST400             ...jif not, skip STIMERM         @14\n*        L     R2,CIBECB           Get CIB ECB address              @14\n         LA    R2,CIBECB           Get CIB ECB address              @14\n         LARL  R4,GOODNITE         Resolve GOODNITE exit address    @14\n         STIMERM SET,                                               @14X\n               ID=TIMER_ID,        Token                            @14X\n               EXIT=(R4),          Exit routine                     @14X\n               LT=ENDOFDAY,        HHMMSSth                         @14X\n               PARM=(R2),          ECB/CIB pointers                 @14X\n               MF=(E,STIMER_L)                                      @14\n*        WTO   'GOODNITE exit in effect'                            @14\n*                                                                   @14\n*        Set up ESTAE for CANCEL trap                               @14\n*                                                                   @14\nINST400  DS    0H                                                   @14\n         LARL  R4,CANCEL           Resolve CANCEL exit address      @14\n         ESTAE ((R4)),CT,                                        @03@14X\n               PARAM=SAVE2,        ESTAE save area                  @14X\n               TERM=YES,           Trap CANCEL commands             @14X\n               MF=(E,ESTAEL)                                        @14\n         L     R1,CIBECB           Get CIB ECB address              @14\n         WAIT  1,ECB=(R1),LONG=YES WAIT for a STOP command          @14\n*                                                                   @14\n         ESTAE 0                   Do not trap CANCEL command again @14\n*                                                                   @14\n*        ENQueue on the SVC table                                   @14\n*                                                                   @14\nINST410  DS    0H                                                   @14\n         MVC   ENQ_TABLE(ESVCTMODL),ESVCTMOD                        @14\n         ENQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14\n*                                                                   @14\n*        Did we get exclusive use of the resource ?                 @14\n*                                                                   @14\n         ST    R15,DWD             Save ENQ return code/@ of area   @14\n         LTR   R15,R15             Did we get the SVC table ?       @14\n         JZ    INST430             ...jif so                        @14\n*                                                                   @14\n*        Issue WTO regarding failure and then retry                 @14\n*                                                                   @14\n         ST    R15,DWD            Save ENQ return code              @14\n         L     R2,DOMID           Pick up possible previous msgid   @14\n         LTR   R2,R2              Any previously issued message ?   @14\n         JZ    INST420            ...jif not                        @14\n         L     R1,DOMID           GET PREVIOUS MESSAGE ID NO.       @14\n         DOM   MSG=(R1)           DELETE PREVIOUS MESSAGE           @14\nINST420  DS    0H                                                   @14\n         $RWTO MSG905I,WRITE=NO                                     @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG905IA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         ST    R1,DOMID            Save msgid for later deletion    @14\n         STIMER WAIT,DINTVL=HOWLONG Wait 5 seconds                  @14\n         J     INST410               and go try again               @14\n*                                                                   @14\n*        We got the SVC table for this system image so update       @14\n*        the SVC slot with the old information but DOM any          @14\n*        outstanding WTO message we might have issued               @14\n*                                                                   @14\nINST430  DS    0H                                                   @14\n         L     R2,DOMID           Pick up possible previous msgid   @14\n         LTR   R2,R2              Any previously issued message ?   @14\n         JZ    INST440            ...jif not                        @14\n         L     R1,DOMID           GET PREVIOUS MESSAGE ID NO.       @14\n         DOM   MSG=(R1)           DELETE PREVIOUS MESSAGE           @14\n*                                                                   @14\n*        Put the old SVC entry back                                 @14\n*                                                                   @14\nINST440  DS    0H                                                   @14\n*        WTO   'We got the SVC table during backout'                @14\n*                                                                   @14\n         MODESET KEY=ZERO,MODE=SUP                                  @14\n         BASR  R10,0               Macro internal addressability    @14\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"    @14\n*                                                                   @14\n*        Install the new SVC code using the SVCUPLNEW plist         @14\n*                                                                   @14\n         SVCUPDTE MF=(E,SVCUPLOLD)                                  @14\n         DROP  R10             Drop internal macro addressability   @14\n         LR    R4,R15              Preserve return code             @14\n         ST    R15,DWD             Preserve return code             @14\n*                                                                   @14\n*        Drop ENQ on SVC table resource (on success or failure)     @14\n*                                                                   @14\n         DEQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14\n*                                                                   @14\n*        Check SVCUPDTE REPLACE operation return code               @14\n*                                                                   @14\n         MODESET KEY=NZERO,MODE=PROB                                @14\n         LTR   R4,R4               Was update successful ?          @14\n         JZ    INST450             ...jif successful                @14\n*                                                                   @14\n*        SVCUPDTE was not successful - issue message and clean up   @14\n*        what we can                                                @14\n*                                                                   @14\n         $RWTO MSG918A,WRITE=YES                                    @14\n         $RWTO MSG919A,WRITE=NO                                     @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG919AA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n*                                                                   @14\n*        Go free any common areas we allocated anyway and expect    @14\n*        abends if this SVC is called                               @14\n*                                                                   @14\n         LHI   R15,BADSVCUR        Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     INSTX_FREE          Go free our common areas         @14\n*                                                                   @14\n*        Old SVC entry was restored                                 @14\n*                                                                   @14\nINST450  DS    0H                                                   @14\n         $RWTO MSG200I,WRITE=NO                                     @14\n         LA    R14,OLDENTRY        R14 -> source area to convert    @14\n         LA    R15,MSG200IA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n*                                                                   @14\n*        Go free any common areas we allocated                      @14\n*                                                                   @14\n         XR    R15,R15             Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     INSTX_FREE          Go free our common areas         @14\n\n\n\n         AGO   .JH1113A\nNew code follows:\n\n\n\n\n.JH1113A ANOP\n\n\n\n         AGO   .JH1110A\n\n*\n*        Put old SVC entry back in place\n*\n         MODESET KEY=ZERO,MODE=SUP\n*                                                                   @14\n*        ENQueue on the SVC table                                   @14\n*                                                                   @14\n         MVC   ENQ_TABLE(ESVCTMODL),ESVCTMOD                        @14\n         ENQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM\n*\n*        Did we get exclusive use of the resource ?\n*\n         ST    R15,DWD             Save ENQ return code/@ of area   @14\n         LTR   R15,R15             Did we get the SVC table ?       @14\n         JZ    INST330             ...jif so\n         MODESET MODE=PROB,KEY=NZERO\n*\n*        Report unable to get SVC table and force U901 abend\n*\n         $RWTO MSG915A,WRITE=YES                                    @14\n         $RWTO MSG916A,WRITE=YES                                    @14\n         ABEND 901,DUMP                                             @14\n*\n*        Reverse the SVC table update\n*\nINST330  DS    0H\n         MODESET KEY=ZERO,MODE=SUP\n         STM   R14,R12,PUTSAVE+12  Borrow unused save area\n         BASR  R10,0               Macro internal addressability    @14\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"    @14\n*                                                                   @14\n*        Install the new SVC code using the SVCUPLNEW plist         @14\n*                                                                   @14\n         SVCUPDTE MF=(E,SVCUPLOLD)\n         DROP  R10             Drop internal macro addressability   @14\n         LR    R4,R15              Preserve return code\n         ST    R15,DWD             Preserve return code\n*\n*        Drop ENQ on SVC table resource (on success or failure)\n*\n         DEQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14\n*\n*        Check SVCUPDTE REPLACE operation return code\n*\n         LTR   R4,R4               Was update successful ?\n*        JZ    INST320             ...jif successful\n*\n*        SVCUPDTE was not successful - issue message and clean up\n*\n         MODESET MODE=PROB,KEY=NZERO                                @14\n         $RWTO MSG912A,WRITE=YES                                    @14\n         $RWTO MSG913A,WRITE=NO                                     @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG913AA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,BADSVCUS        Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     INSTX_FREE            & go exit w/ return code       @14\n*\n*        Go free common areas (ECSA/CSA & ESQA)\n*\n\n* Failure at this point means we need to put the old SVC entry back\n* and free all CSA/ECSA & ESQA areas\n\n\nINST400  DS    0H                  Set CIB limit\n         QEDIT ORIGIN=CHCIBP,CIBCTR=1  Set CIB limit to one\n         LTR   R15,R15             Was the QEDIT successful ?\n         JZ    INST410             ...jif so...go WAIT for something\n         ABEND 902,DUMP            otherwise we have a problem\n*\n*  WAIT for a command ...\n*\nINST410  DS    0H\n\n* Complete & issue MLWTO\n\n\nWAITAGIN EQU   *\n         L     R1,CIBECB           @ of command ECB\n         WAIT  ECB=(R1)            Wait for a STOP cmd\n\n.JH1110A ANOP\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*        WTO   'SVCPLNEW update done - check R13'\n         DC    H'0'\n\n\n\n         LA    R4,SVCUPLNEW\n         LA    R5,SVCUPLOLD\n\n\n\n\n\n\n\n\n\n\n* SVC & filter code are in common storage at this point and we have\n* captured the old SVC slot. We can update the SQA resident code to\n* include the \"new\" SVC address and then just install the address\n* of the filter code in the SVC slot but we'll need to set the\n* requested attributes & flags per the user's request.\n\n\n.JH1103A ANOP\n\n\n\n\n*                                                                   @14\n*        Free ESQA storage if allocated before exit                 @14\n*                                                                   @14\nINSTX_FREE DS  0H                                                   @14\n         L     R3,SQA_ADDR         Pick up possible ESQA address\n         LTR   R3,R3               Did we obtain any ESQA ?\n         JZ    INSTX_FREE_A        ...jif not\n         L     R4,=A(CHKU500L)     Get length to free               @14\n         MODESET KEY=ZERO,MODE=SUP\n*\n*        Free obtained ESQA storage\n*\n         STORAGE RELEASE,          Free                                X\n               ADDR=((R3)),         the                                X\n               LENGTH=((R4)),        filter area                       X\n               SP=245\n*                                                                   @14\n*        Free and CSA/ECSA area allocated before exit               @14\n*                                                                   @14\nINSTX_FREE_A DS 0H                                                  @14\n         L     R3,@CSAEPN          Get possible CSA/ECSA @ to free  @14\n         LTR   R3,R3               Did we obtain any CSA/ECSA ?     @14\n         JZ    INSTX_FREE_B        ...jif not\n         L     R4,MODSIZE          Get length to free               @14\n         MODESET KEY=ZERO,MODE=SUP\n*\n*        Free obtained CSA/ECSA storage\n*\n         STORAGE RELEASE,          Free                                X\n               ADDR=((R3)),         the                                X\n               LENGTH=((R4)),        new SVC code area                 X\n               SP=228\n*\n*        Drop our ENQ on the SVC slot\n*\nINSTX_FREE_B DS 0H                                                  @14\n         MODESET KEY=NZERO,MODE=PROB                                @14\n*\n*        Return to caller\n*\nINSTX    DS    0H                                                   @14\n         LM    R14,R12,SAVE@L1+12  Restore caller's registers       @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - REPORT - report SVC slot profiles'       @14\n******************************************************************* @14\nREPORT   DS    0H                                                   @14\n         STM   R14,R12,REPORTSAVE+12                                @14\n*                                                                   @14\n*        See if SYSPRINT was JCL allocated & flag it if so          @14\n*                                                                   @14\n         L     R1,PSATOLD-PSA(,0)  R1 -> current TCB                @14\n         L     R1,TCBTIO-TCB(R1)   R1 -> TIOT                       @14\n         LA    R1,TIOELNGH-TIOT1(R1)  R1 -> 1st DDname in TIOT      @14\nREPORT_002 DS  0H                                                   @14\n         CLI   0(R1),X'00'         End of TIOT ?                    @14\n         JE    REPORT_002B       ...jif so, SYSPRINT DD not in JCL  @14\n         CLC   =CL8'SYSPRINT',TIOEDDNM-TIOELNGH(R1) SYSPRINT DD ?   @14\n         JE    REPORT_002A         ...jif so                        @14\n         XR    R2,R2               Clear for insert                 @14\n         IC    R2,0(R1)            R2 = TIOELNGH for current entry  @14\n         AR    R1,R2               Point to next TIOT DD entry      @14\n         J     REPORT_002          Look at next DD entry            @14\n*                                                                   @14\n*      SYSPRINT JCL allocated, set flag to skip dynamic allocation  @14\n*                                                                   @14\nREPORT_002A DS 0H                                                   @14\n         MVC   RDDN,=CL8'SYSPRINT' Install report DDname            @14\n         OI    MYFLAGS,SYSPPRES    Indicate SYSPRINT in JCL         @14\n         J     REPORT_002D         ...skip dynamic allocation       @14\nREPORT_002B DS 0H                                                   @14\n*                                                                   @14\n*        Build SVC 99 request block & its extension for report file @14\n*                                                                   @14\n         LA    R1,$99RB            Get @ of SVC99 RB                @14\n         USING S99RB,R1                                             @14\n         ST    R1,$99RBPTR         Store pointer to RB              @14\n*                                                                   @14\n*        Fill in Request Block & Request Block Extension            @14\n*                                                                   @14\n         OI    $99RBPTR,S99RBPND   Mark end of list                 @14\n         XC    S99RB(S99RBLEN),S99RB Clear entire list              @14\n         MVI   S99RBLN,S99RBLEN    Move in length                   @14\n         MVI   S99VERB,S99VRBAL    Move in ALLOCATE verb            @14\n         LA    R0,$99STUPL         Get ptr to ALLOCATE TU pointers  @14\n         ST    R0,S99TXTPP         Store in parameter list          @14\n       MVI   S99FLAG1,S99NOMNT+S99CNENQ No mounts, cond ENQ on TIOT @14\n*                                                                   @14\n         LA    R2,$99RBX                                            @14\n         USING S99RBX,R2                                            @14\n         ST    R2,S99S99X              Set Request Block extension  @14\n         MVC   S99EID,=CL6'S99RBX'                                  @14\n         MVI   S99EVER,S99RBXVR                                     @14\n         OI    S99EOPTS,S99EIMSG+S99EWTP                            @14\n         DROP  R2                                                   @14\n         DROP  R1                                                   @14\n*                                                                   @14\n*        Finish up text units for report file allocation            @14\n*                                                                   @14\n         XC    $99STUPL($99STL),$99STUPL Clear TU pointer list      @14\n         LA    R0,$99STUPL        Get pointer to output TU pointers @14\n         ST    R0,S99TXTPP-S99RB+$99RB Store in RB                  @14\n         MVI   $99TEXT,C' '        First blank out everything       @14\n         MVC   $99TEXT+1($99TEXTL),$99TEXT                          @14\n         LA    R0,$99SYSOU         Get pointer to sysout test       @14\n         ST    R0,$99SSYSP         Store in parameter list          @14\n         LA    R0,$99FREC          Get pointer to free on close TU  @14\n         ST    R0,$99SFREP         Store in parameter list          @14\n         LA    R0,$99DDNK          Get pointer to return DDN TU     @14\n         ST    R0,$99SDDNP         Store in parameter list          @14\n         OI    $99SDDNP,S99TUPLN   Mark as last TU pointer          @14\n         MVC   $99SYSOU(4),=AL2(DALSYSOU,0)                         @14\n         MVC   $99FREC(4),=AL2(DALCLOSE,0)                          @14\n         MVC   $99DDNK(6),=AL2(DALRTDDN,1,8)                        @14\n         MVC   $99DDNK+6(8),=CL8' '                                 @14\n*                                                                   @14\n*        Allocate the sysout data set                               @14\n*                                                                   @14\n         LA    R1,$99RBPTR                                          @14\n         DYNALLOC                  Allocate the SORTMSG DDname      @14\n         ST    R15,$99R15          Save SVC 99 return code          @14\n         LTR   R15,R15             Any problems ?                   @14\n         JZ    REPORT_002C         ...jif not                       @14\n*                                                                   @14\n*        Display report file DYNALLOC failure information           @14\n*                                                                   @14\n         $RWTO MSG128E,WRITE=YES                                    @14\n         LA    R2,$99RB            Get @ of SVC99 RB                @14\n         USING S99RB,R2                                             @14\n         $RWTO MSG129E,WRITE=NO                                     @14\n         LA    R14,$99R15          R14 -> source area to convert    @14\n         LA    R15,MSG129EA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         LA    R14,S99ERROR        R14 -> source area to convert    @14\n         LA    R15,MSG129EB        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         LA    R14,S99INFO         R14 -> source area to convert    @14\n         LA    R15,MSG129EC        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         DROP  R2                                                   @14\n*                                                                   @14\n         LHI   R15,BADENV25        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     REPORTX_A             & go return to caller          @14\n*                                                                   @14\n*        Capture returned report file DDname                        @14\n*                                                                   @14\nREPORT_002C DS 0H                                                   @14\n         MVC   RDDN(8),=CL8' '     Save the DDname                  @14\n         LH    R2,$99DDNK+S99TULNG-S99TUNIT Get length              @14\n         BCTR  R2,0                Decrement for execute            @14\n         EX    R2,RDDCPY           Save the output DDname           @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nRDDCPY   MVC   RDDN(*-*),$99DDNK+S99TUPAR-S99TUNIT                  @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n*        Prepare report file DCB - DDname in RDDN field             @14\n*                                                                   @14\nREPORT_002D DS 0H                                                   @14\n         MVC   SPUTCODE,PUTCODE    Copy PUT routine below 16M       @14\n         MVC   W#OPNDO,X#OPNDO     Install OPEN output execute list @14\n         MVC   SYSPRINT,X#DCB1     Copy static DCB to DWS area      @14\n         LA    R10,SYSPRINT        R10 -> SYSPRINT DCB              @14\n         USING IHADCB,R10          DCB addressability               @14\n         MVC SYSPRINT+DCBDDNAM-IHADCB(8),RDDN Install report DDname @14\n*                                                                   @14\n*        Open sysout report file using 24-bit storage               @14\n*                                                                   @14\n         OPEN  ((R10),),MODE=31,MF=(E,W#OPNDO)                      @14\n*                                                                   @14\n*        Make sure OPEN completed successfully                      @14\n*                                                                   @14\n         TM    DCBOFLGS,DCBOFOPN   Was OPEN successful ?            @14\n         JO    REPORT_002E         ...jif so, continue              @14\n*                                                                   @14\n         DROP  R10                                                  @14\n*                                                                   @14\n*        Open for report file failed                                @14\n*                                                                   @14\n         $RWTO MSG146E,WRITE=YES                                    @14\n         LHI   R15,BADENV31        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     REPORTX_A             and then return                @14\n*                                                                   @14\n*        Capture current date and time for headings                 @14\n*                                                                   @14\nREPORT_002E DS 0H                                                   @14\n         BRASL R14,DATETIME        Go format current date & time    @14\n*                                                                   @14\n*        Force header page on first report line written             @14\n*                                                                   @14\n         MVC   Line_count,MAXLINES Set initial max lines/page       @14\n         MVC   Page_count,=PL4'0'                                   @14\n*                                                                   @14\n*        Resolve IRRSEQ00 service routine (should be in LLA)        @14\n*                                                                   @14\n         LOAD  EP=IRRSEQ00,ERRET=REPORT_010                         @14\n         ST    R0,@R_admin         Save service load module address @14\n         J     REPORT_020           and continue                    @14\n*                                                                   @14\n*        Load of R_admin service routine failed                     @14\n*                                                                   @14\nREPORT_010 DS  0H                                                   @14\n         ST    R1,DBWD             Save LOAD R1                     @14\n         ST    R15,DBWD+4          Save LOAD R15                    @14\n         $RWTO MSG115E,WRITE=YES                                    @14\n         $RWTO MSG116E,WRITE=NO                                     @14\n         LA    R14,DBWD            R14 -> source area to convert    @14\n         LA    R15,MSG116EA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         LA    R14,DBWD+4          R14 -> source area to convert    @14\n         LA    R15,MSG116EB        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R1,BADENV5          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXITRCA              & go exit w/ return code        @14\n*                                                                   @14\n*        Allocate & clear a 64K workarea for use by IRRSEQ00        @14\n*                                                                   @14\nREPORT_020 DS  0H                                                   @14\n         L     R0,=A(WORKAREA_SIZE) R0 = length to acquire          @14\n         STORAGE OBTAIN,           Get working storage              @14X\n               COND=YES,                                            @14X\n               LENGTH=(R0),                                         @14X\n               LOC=ANY,                                             @14X\n               BNDRY=PAGE                                           @14\n         LTR   R15,R15             Did we get the DWS storage ?     @14\n         JZ    REPORT_030          ...jif yes, continue             @14\n*                                                                   @14\n*        Unable to acquire IRRSEQ00 work area                       @14\n*                                                                   @14\n         $RWTO MSG017A,WRITE=YES                                    @14\n         LHI   R15,BADENV18        Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     REPORTX_A             & go exit w/ return code       @14\n*                                                                   @14\n*        Clear obtained IRRSEQ00 work area                          @14\n*                                                                   @14\nREPORT_030 DS  0H                                                   @14\n         ST    R1,@WORKAREA        Save for later                   @14\n         LR    R11,R1              Dynamic area addressability      @14\n         LR    R2,R1               Dynamic address to R2 for MVCL   @14\n         L     R3,=A(WORKAREA_SIZE) Get length to initialize        @14\n         LA    R4,0                Source                           @14\n         LA    R5,0                Source len of 0 + pad byte of 0  @14\n         MVCL  R2,R4               Clear the dynamic area storage   @14\n*                                                                   @14\n*        Set up for IRRSEQ00 processing                             @14\n*                                                                   @14\n         XC    ALET,ALET            Use zero ALET                   @14\n         XC    SAFRC,SAFRC          Initialize return/reason codes  @14\n         XC    RACFRC,RACFRC                                        @14\n         XC    RACFRS,RACFRS                                        @14\n         XC    @ACEE,@ACEE          Not supplying \"run-as\" ACEE     @14\n         XC    OUTMSG,OUTMSG        Clear output message pointer    @14\n         LA    R10,RADPLIST         Point to input p-list           @14\n         ST    R10,PLIST@           Save it                         @14\n*                                                                   @14\n*        Prepare parameter list for R_Admin service call            @14\n*                                                                   @14\n*        - First time through adjustments                           @14\n*                                                                   @14\n         MVI   SUBPOOL,127          Use subpool 127 by default      @14\n         MVI   FUNCODE,ADMN_XTR_NEXT_RESOURCE Set General Resource  @14C\n                                    class                           @14\n         OI    MYFLAGS,NEXTREQ      Indicate a \"next\" request       @14\n*                                                                   @14\n*        In the Parm_list area, fill in version and class name.     @14\n*                                                                   @14\n         LA    R6,RADPLIST                                          @14\n         USING ADMN_PROF_MAP,R6                                     @14\n         MVI   ADMN_PROF_VERSION,0                                  @14\n         MVC   ADMN_PROF_CLSNAME(8),=CL8'#SNOMISC'                  @14\n* Set flag to bypass IRR.RADMIN.RLIST authorization checks          @14\n         XR    R14,R14             Prime flag word with 0s          @14\n         A     R14,=AL4(ADMN_PROF_SKIPAUTH)                         @14\n         ST    R14,SAVEFLAG        Save options locally             @14\n         ST    R14,ADMN_PROF_FLAG  Set the flag word                @14\n*                                                                   @14\n*        PROFILE must be specified unless this is a \"next\" request. @14\n*        In this case, we set a single blank as the profile name,   @14\n*        which starts at the very beginning of the class. The       @14\n*        profile name is copied to the input profile name to the    @14\n*        contiguous storage after the Parm_list storage.            @14\n*                                                                   @14\n*                                                                   @14\n         LA    R8,9                 Use length of 1                 @14\n         ST    R8,ADMN_PROF_NAMELEN Save length in plist header     @14\n         MVC   EXTPROF(9),=CL9'SVCUPDTE_' Set search profile        @14\n         DROP  R6                                                   @14\n*                                                                   @14\n*        Initialize IRRSEQ00 call parameter list.  That is, a list  @14\n*        of addresses to the individual parameters set up above. If @14\n*        this is our first or only call, we use the input parameter @14\n*        list we set up in our dynamic area. Otherwise, we use the  @14\n*        output buffer from the previous call. In either case, the  @14\n*        correct address has been stored in R3.                     @14\n*                                                                   @14\nEXTR100  DS    0H                                                   @14\nREPORT_100 DS  0H                  Top of EXTRACT loop              @14\n         L     R1,@WORKAREA        Pick up IRRSEQ00 work area       @14\n         ST    R1,WORKAREA@        Save in IRRSEQ00 parameters      @14\n         LA    R1,ALET                                              @14\n         ST    R1,ALET1@                                            @14\n         ST    R1,ALET2@                                            @14\n         ST    R1,ALET3@           0                                @14\n         LA    R1,SAFRC                                             @14\n         ST    R1,SAFRC@                                            @14\n         LA    R1,RACFRC                                            @14\n         ST    R1,RACFRC@                                           @14\n         LA    R1,RACFRS                                            @14\n         ST    R1,RACFRS@                                           @14\n         LA    R1,FUNCODE                                           @14\n         ST    R1,FUNCODE@                                          @14\n         L     R1,PLIST@                                            @14\n         ST    R1,RADPLIST@                                         @14\n         LA    R1,USER                                              @14\n         ST    R1,USER@                                             @14\n         LA    R1,@ACEE                                             @14\n         ST    R1,ACEE@                                             @14\n         LA    R1,SUBPOOL                                           @14\n         ST    R1,SUBPOOL@                                          @14\n         LA    R1,OUTMSG                                            @14\n         ST    R1,OUTMSG@                                           @14\n         OC    OUTMSG@,=X'80000000'    Turn on VL bit in last parm  @14\n*                                                                   @14\n*        Call R_admin.  We've manually built the plist which would  @14\n*        correspond to the following CALL statement (continuation   @14\n*        characters omitted). *                                     @14\n*                                                                   @14\n*        CALL  IRRSEQ00,                                        x   @14\n*              (@WORKAREA,                                      x   @14\n*              ALET,SAFRC,                                      x   @14\n*              ALET,RACFRC,                                     x   @14\n*              ALET,RACFRS,                                     x   @14\n*              FUNCODE,                                         x   @14\n*              PLIST,                                           x   @14\n*              0,0,        Not passing \"run-as\" user or ACEE    x   @14\n*              SUBPOOL,                                         x   @14\n*              OUTMSG),VL                                           @14\n         MODESET MODE=SUP          Switch to supervisor state       @14\n         LA    R1,WORKAREA@        Get list of addrs in R1          @14\n         L     R15,@R_admin        Get IRRSEQ00 service address     @14\n         BALR  R14,R15                                              @14\n         MODESET MODE=PROB         Switch back to problem state     @14\n*                                                                   @14\n*        For extract-next, we are now finished with the previous    @14\n*        output buffer, which we used as the input p-list for this  @14\n*        R_admin call. Free its storage now.                        @14\n*                                                                   @14\n         LA    R1,RADPLIST         Get address of first p-list      @14\n         L     R10,PLIST@          Get address of previous p-list   @14\n         CR    R1,R10              Was input plist the first one?   @14\n         JE    EXTR110             Yes, don't free autodata field!  @14\n         USING ADMN_PROF_MAP,R10   Get addressability to previous   @14\n         L     R0,ADMN_PROF_OUTLEN Output area size to R0           @14\n         XR    R2,R2               Clear for insert                 @14\n         IC    R2,ADMN_PROF_SPID   Get subpool from p-list header   @14\n         DROP  R10                                                  @14\n         FREEMAIN RU,SP=(2),       Freemain                         @14X\n               LV=(0),              dynamic                         @14X\n               A=(10)                area                           @14\n*                                                                   @14\n*        Test return code and issue an error message if non-zero    @14\n*                                                                   @14\nREPORT_110 DS  0H                  Top of EXTRACT loop              @14\nEXTR110  DS    0H                                                   @14\n         ICM   R5,B'1111',SAFRC    Get SAF return code              @14\n         JZ    EXTR200                                              @14\n*                                                                   @14\n*        Let's also quietly ignore a \"not found\" condition for      @14\n*        extract next if we've returned at least one profile.       @14\n*                                                                   @14\n         TM    MYFLAGS,NEXTREQ+FOUND1  A fruitful \"next\" request?   @14\n         JNO   EXTR120              No, issue the message           @14\n         LA    R10,4                Get \"not found\" rc              @14\n         CR    R10,R5               SAF \"not found\" rc?             @14\n         JNE   EXTR120              No, truly an error              @14\n         C     R10,RACFRC           RACF \"not found\" rc?            @14\n         JNE   EXTR120              No, truly an error              @14\n         C     R10,RACFRS           RACF \"not found\" reason?        @14\n         JE    EXITRCA             ...jif so, good return to caller @14\n*                                                                   @14\n*        Display failing RACF & SAF return codes & reason code      @14\n*                                                                   @14\nREPORT_120 DS  0H                  Top of EXTRACT loop              @14\nEXTR120  DS    0H                                                   @14\n         $RWTO MSG100E,WRITE=YES                                    @14\n         $RWTO MSG101E,WRITE=NO                                     @14\n         LA    R14,SAFRC           R14 -> source area to convert    @14\n         LA    R15,MSG101EA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         LA    R14,RACFRC          R14 -> source area to convert    @14\n         LA    R15,MSG101EB        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         LA    R14,RACFRS          R14 -> source area to convert    @14\n         LA    R15,MSG101EC        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES      Write the message                @14\n*                                                                   @14\n*        May want to display \"spooky\" profile information here if   @14\n*        SAFRC=4/RACFRC=4/RACFRS=20 for cleanup reasons             @14\n*                                                                   @14\n         LHI   R15,BADSAF1         Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     EXITRCA               & go return to caller          @14\n*                                                                   @14\n*        R_admin worked! Verify that we obtained the BASE segment   @14\n*        of a CLASS(#SNOMISC) profile that starts with the text     @14\n*        string \"SVCUPDTE_\".                                        @14\n*                                                                   @14\nREPORT_200 DS  0H                  Top of EXTRACT loop              @14\nEXTR200  DS    0H                                                   @14\n         L     R1,OUTMSG            Get output address in R1        @14\n         USING ADMN_PROF_MAP,R1     Get class/profile from output   @14\n*                                                                   @14\n*        Get profile length in R5                                   @14\n*                                                                   @14\n         L     R5,ADMN_PROF_NAMELEN Get profile name length         @14\n*                                                                   @14\n*        Verify profile name started with \"SVCUPDTE_\"               @14\n*                                                                   @14\nREPORT_210 DS  0H                  Top of EXTRACT loop              @14\nEXTR210  DS    0H                                                   @14\n         CLC   ADMN_PROF_PROFNAME(9),=CL9'SVCUPDTE_'                @14\n         JE    EXTR220              ...jif so                       @14\n*                                                                   @14\n* Did we get at least one profile ? If so we're through             @14\n* otherwise none were found to be defined                           @14\n*                                                                   @14\n         TM    MYFLAGS,FOUND1      Did we find at least one ?       @14\n         JO    EXITRCA             ...jif yes, skip message         @14\n         $RWTO MSG103E,WRITE=YES                                    @14\n         LHI   R15,BADEXTR2        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     EXITRCA               & go return to caller          @14\n*                                                                   @14\n*        Verify CLASS(#SNOMISC) returned                            @14\n*                                                                   @14\nREPORT_220 DS  0H                  Top of EXTRACT loop              @14\nEXTR220  DS    0H                                                   @14\n         OI    MYFLAGS,FOUND1      Indicate we found a profile      @14\n         CLC   ADMN_PROF_CLSNAME,=CL8'#SNOMISC' CLASS(#SNOMISC) ?   @14\n         JE    EXTR230              ...jif so                       @14\n         $RWTO MSG104E,WRITE=YES                                    @14\n         LHI   R15,BADEXTR3        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     EXITRCA               & go return to caller          @14\n*                                                                   @14\n*        Verify # segment descriptors                               @14\n*                                                                   @14\n*        -We have a desirable profile so extract the following      @14\n*         fields:                                                   @14\n*                                                                   @14\n*         From ADMN_PROF_MAP:                                       @14\n*         ===================                                       @14\n*         ADMN_PROF_PROFNAME (profile name)                         @14\n*                                                                   @14\n*         From ADMN_PROF_FIELDDESC:                                 @14\n*         =========================                                 @14\n*         When ADMN_PROF_SEGNAME = CL8'BASE'                        @14\n*           Case 1: When ADMN_PROF_FIELDNAME = CL8'OWNER'           @14\n*                    capture owner of the profile                   @14\n*           Case 2: When ADMN_PROF_FIELDNAME = CL8'DATA'            @14\n*                    capture installation data                      @14\n*           Case 3: When ADMN_PROF_FIELDNAME = CL8'ACLCNT'          @14\n*                    capture ACLID (userid) & ACLACS (auth)         @14\n*                    subfields                                      @14\n*                                                                   @14\n*         Case 3 involves a repeating field structure while         @14\n*         Cases 1 & 2 do not.                                       @14\n*                                                                   @14\nREPORT_230 DS  0H                  Top of EXTRACT loop              @14\nEXTR230  DS    0H                                                   @14\n*        WTO   'Found an SVCUPDTE profile'                          @14\n         MVI   Current_profname,X'40'                               @14\n     MVC  Current_profname+1(L'Current_profname-1),Current_profname @14\n         L     R1,OUTMSG           Restore R1 profile base @        @14\n*                                                                   @14\n*        Verify length of profile valid - between 12 & 15 bytes     @14\n*                                                                   @14\n*        Note: Instead of shutting down the program here we will    @14\n*              issue a WTO that tries to include at least the       @14\n*              minimum profile name length in the text of the       @14\n*              message and then we'll skip this profile and         @14\n*              continue with the next SVCUPDTE_* profile in the     @14\n*              CL(#SNOMISC). We will issue a return code to the end @14\n*              user that indicates they should report the problem.  @14\n*                                                                   @14\n         CHI   R5,Minimum_profname_length                           @14\n         JL    EXTR230_A           ...jif invalid length            @14\n         CHI   R5,Maximum_profname_length                           @14\n         JH    EXTR230_A           ...jif invalid length            @14\n*                                                                   @14\n* Always capture the profile name since length is valid             @14\n*                                                                   @14\n         LR    R4,R5               Copy profile name length         @14\n         BCTR  R4,0                Make length executable           @14\n         EX    R4,CPYPRF           Copy input PARM string           @14\n         J     EXTR231           ...skip message since length valid @14\n*                                                                   @14\n*        Issue message about invalid profile in database            @14\n*                                                                   @14\nREPORT_230_A DS 0H                 Top of EXTRACT loop              @14\nEXTR230_A DS   0H                                                   @14\n         LR    R4,R5               Copy profile name length         @14\n         CHI   R4,Maximum_profname_length                           @14\n         JNH   EXTR230_B           Go make executable               @14\n         LHI   R4,Maximum_profname_length                           @14\nREPORT_230_B DS 0H                 Top of EXTRACT loop              @14\nEXTR230_B DS   0H                                                   @14\n         BCTR  R4,0                Make length executable           @14\n         EX    R4,CPYPRF           Copy input PARM string           @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nCPYPRF   MVC  Current_profname(*-*),ADMN_PROF_PROFNAME profile name @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         $RWTO MSG901W,WRITE=YES                                    @14\n         $RWTO MSG902A,WRITE=NO                                     @14\n         MVC   MSG902AA,Current_profname Copy profile name to WTO   @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         L     R1,OUTMSG           Restore R1 profile base @        @14\n*                                                                   @14\n*        Now we need to skip the rest of this profile and pick up   @14\n*        processing with the next profile.                          @14\n*                                                                   @14\n*        <Might be easier to just set a return code and return>     @14\n*                                                                   @14\n*        <Need a specific return code here and a flag>              @14\n*                                                                   @14\n         LHI   R15,BADEXTR6        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n*        J     EXITRCA               & go return to caller          @14\n         J     EXTR290               & go after next profile        @14\n*                                                                   @14\nREPORT_231 DS  0H                  Top of EXTRACT loop              @14\nEXTR231  DS    0H                                                   @14\n         L     R2,ADMN_PROF_NUMSEG R2 = # segment descriptors       @14\n         CHI   R2,1                Single segment descriptor ?      @14\n         JE    EXTR240             ...jif so                        @14\n         LTR   R2,R2               Are there any segments ?         @14\n         JZ    EXTR290             ...jif not, bail out             @14\n*                                                                   @14\n*        Unexpected number of segment descriptors                   @14\n*                                                                   @14\n         $RWTO MSG105E,WRITE=YES                                    @14\n         LHI   R15,BADEXTR4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     EXITRCA               & go return to caller          @14\n*                                                                   @14\n*        Verify segment descriptor is for BASE segment              @14\n*                                                                   @14\n*        -R2 contains number of segments                            @14\n*                                                                   @14\nREPORT_240 DS  0H                  Top of EXTRACT loop              @14\nEXTR240  DS    0H                                                   @14\n         LA    R3,ADMN_PROF_PROFNAME Get addr of profile name       @14\n         A     R3,ADMN_PROF_NAMELEN  Add length of profile name to  @14C\n                                     get @ of 1st segment descriptor@14\n         USING ADMN_PROF_SEGDESC,R3  Basing for segment descriptor  @14\n*                                                                   @14\n         L     R5,ADMN_PROF_FIELDOFFSET Get offset to 1st FD        @14\n         AR    R5,R1                 Add to base to get address     @14\n         USING ADMN_PROF_FIELDDESC,R5 Basing for field descriptor   @14\n*                                                                   @14\nREPORT_250 DS  0H                  Top of EXTRACT loop              @14\nEXTR250  DS    0H                     <DOSEGS label>                @14\nDOSEGS   DS    0H                     <DOSEGS label>                @14\n         L     R4,ADMN_PROF_NUMFIELDS Number of field descriptors   @14C\n                                     for this segment               @14\n         LA    R8,ADMN_PROF_SEGNAME  Address of segment name        @14\n         CLC   ADMN_PROF_SEGNAME,=CL8'BASE' BASE segment ?          @14\n         JE    EXTR260                                              @14\n         $RWTO MSG106E,WRITE=YES                                    @14\n         L     R1,OUTMSG           Restore R1 profile base @        @14\n         LHI   R15,BADEXTR5        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     EXITRCA               & go return to caller          @14\n*                                                                   @14\n*        Check for repeating fields case                            @14\n*                                                                   @14\nREPORT_260 DS  0H                  Top of EXTRACT loop              @14\nEXTR260  DS    0H                    <DOFIELDS label>               @14\nDOFIELDS DS    0H                    <DOFIELDS label>               @14\n         XR    R9,R9                 Clear for insert               @14\n         ICM   R9,B'0011',ADMN_PROF_FIELDTYPE   Get type of field   @14\n         L     R8,=A(ADMN_PROF_RPTHDR) Is it a repeat field header ?@14\n         CR    R9,R8                                                @14\n*        JNE   EXTR270             ...jif not, get next field       @14\n*        AGO   .JRH0127A                                            @14\n         JE    REPEAT              ...jif repeat field              @14\n*                                                                   @14\n* Boolean fields & normal character fields land here. We're only    @14\n* interested in The OWNER, DATA & UACC fields of the non-repeating  @14\n* flavor.                                                           @14\n*                                                                   @14\n******************************************************************* @14\n*                                                                 * @14\n*        Handle OWNER field capture here                          * @14\n*                                                                 * @14\n******************************************************************* @14\n*                                                                   @14\n* Is this the OWNER field ?                                         @14\n*                                                                   @14\n         CLC   ADMN_PROF_FIELDNAME,=CL8'OWNER' OWNER field ?        @14\n         JNE   EXTR260_B           ...jif so                        @14\n*        WTO   'Found OWNER field'                                  @14\n         L     R1,OUTMSG           Restore R1 profile base @        @14\n*                                                                   @14\n* Varify OWNER field length positive                                @14\n*                                                                   @14\n         ICM   R14,B'1111',ADMN_PROF_FIELDLEN R14 length of field   @14\n         BCTR  R14,0               Make OWNER length executable     @14\n         CHI   R14,0               Is length positive ?             @14\n         JNM   EXTR260_A           ...jif so                        @14\n*                                                                   @14\n* Length of OWNER field invalid - report it and skip this profile   @14\n*                                                                   @14\n         $RWTO MSG903A,WRITE=YES                                    @14\n         $RWTO MSG902A,WRITE=NO                                     @14\n         MVC   MSG902AA,Current_profname Copy profile name to WTO   @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         L     R1,OUTMSG           Restore R1 profile base @        @14\n         J     EXTR290               & go after next profile        @14\nREPORT_260_A DS 0H                 Top of EXTRACT loop              @14\nEXTR260_A DS   0H                                                   @14\n         LR    R10,R1              Get R_admin output buffer @      @14\n         A     R10,ADMN_PROF_DATA_OFFSET Add data offset            @14\n*                                                                   @14\n* Capture OWNER field content - 8 byte maximum                      @14\n*                                                                   @14\n* -When landing here:                                               @14\n*                                                                   @14\n*  R14 contains executable length of OWNER field                    @14\n*  R10 contains @ of OWNER field in R_admin buffer                  @14\n*                                                                   @14\n         MVI   Current_OWNER,X'40'                                  @14\n         MVC   Current_OWNER+1(L'Current_OWNER-1),Current_OWNER     @14\n         EX    R14,CPYOWNR         Copy OWNER field                 @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nCPYOWNR  MVC   Current_OWNER(*-*),0(R10) Copy OWNER field           @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         J     NEXTFLD             Go get next field                @14\n******************************************************************* @14\n*                                                                 * @14\n*        Handle DATA field capture here                           * @14\n*                                                                 * @14\n******************************************************************* @14\nREPORT_260_B DS 0H                 Top of EXTRACT loop              @14\nEXTR260_B DS   0H                    <DOFIELDS label>               @14\n         CLC   ADMN_PROF_FIELDNAME,=CL8'DATA'  DATA field ?         @14\n*        JNE   NEXTFLD             ...jif not, go get next field    @14\n         JNE   EXTR260_C        ...jif not, go check next desirable @14\n*                                                                   @14\n* Capture DATA field content - 255 byte maximum                     @14\n*                                                                   @14\n*        WTO   'Found DATA field'                                   @14\n         L     R1,OUTMSG           Restore R1 profile base @        @14\n*                                                                   @14\n* Varify DATA field length positive                                 @14\n*                                                                   @14\n         ICM   R14,B'1111',ADMN_PROF_FIELDLEN R14 length of field   @14\n         BCTR  R14,0               Make OWNER length executable     @14\n         CHI   R14,0               Is length positive ?             @14\n         JNM   EXTR260_BB          ...jif so                        @14\n*                                                                   @14\n* Length of DATA field invalid - report it and skip this profile    @14\n*                                                                   @14\n         $RWTO MSG904A,WRITE=YES                                    @14\n         $RWTO MSG902A,WRITE=NO                                     @14\n         MVC   MSG902AA,Current_profname Copy profile name to WTO   @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         L     R1,OUTMSG           Restore R1 profile base @        @14\n         J     EXTR290               & go after next profile        @14\nREPORT_260_BB DS 0H                Top of EXTRACT loop              @14\nEXTR260_BB DS  0H                                                   @14\n         CHI   R14,99              > 99 bytes ?                     @14\n         JNH   EXTR260_BBB         ...jif not                       @14\n         LHI   R14,99              Crop at 100 bytes                @14\nREPORT_260_BBB DS 0H               Top of EXTRACT loop              @14\nEXTR260_BBB DS 0H                                                   @14\n         LR    R10,R1              Get R_admin output buffer @      @14\n         A     R10,ADMN_PROF_DATA_OFFSET Add data offset            @14\n*                                                                   @14\n* Capture DATA field content - 100 byte maximum                     @14\n*                                                                   @14\n* -When landing here:                                               @14\n*                                                                   @14\n*  R14 contains executable length of DATA field                     @14\n*  R10 contains @ of OWNER field in R_admin buffer                  @14\n*                                                                   @14\n         MVI   Current_DATA,X'40'                                   @14\n         MVC   Current_DATA+1(L'Current_DATA-1),Current_DATA        @14\n         EX    R14,CPYDATA         Copy DATA field                  @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nCPYDATA  MVC   Current_DATA(*-*),0(R10) Copy DATA field             @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         J     NEXTFLD             ...jif not, go get next field    @14\n******************************************************************* @14\n*                                                                 * @14\n*        Handle UACC field capture here                           * @14\n*                                                                 * @14\n******************************************************************* @14\nREPORT_260_C DS 0H                 Top of EXTRACT loop              @14\nEXTR260_C DS   0H                    <DOFIELDS label>               @14\n         CLC   ADMN_PROF_FIELDNAME,=CL8'UACC'  UACC field ?         @14\n         JNE   NEXTFLD             ...jif not, go get next field    @14\n*                                                                   @14\n* Capture UACC field content - 7 byte maximum                       @14\n*                                                                   @14\n*        WTO   'Found UACC field'                                   @14\n         L     R1,OUTMSG           Restore R1 profile base @        @14\n*                                                                   @14\n* Varify UACC field length positive                                 @14\n*                                                                   @14\n         ICM   R14,B'1111',ADMN_PROF_FIELDLEN R14 length of field   @14\n         BCTR  R14,0               Make OWNER length executable     @14\n         CHI   R14,0               Is length positive ?             @14\n         JNM   EXTR260_CC          ...jif so                        @14\n*                                                                   @14\n* Length of DATA field invalid - report it and skip this profile    @14\n*                                                                   @14\n         $RWTO MSG905A,WRITE=YES                                    @14\n         $RWTO MSG902A,WRITE=NO                                     @14\n         MVC   MSG902AA,Current_profname Copy profile name to WTO   @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         L     R1,OUTMSG           Restore R1 profile base @        @14\n         J     EXTR290               & go after next profile        @14\nREPORT_260_CC DS 0H                Top of EXTRACT loop              @14\nEXTR260_CC DS  0H                                                   @14\n         CHI   R14,6               > 7 bytes ?                      @14\n         JNH   EXTR260_CCC         ...jif not                       @14\n         LHI   R14,6               Crop at 7 bytes                  @14\nREPORT_260_CCC DS 0H               Top of EXTRACT loop              @14\nEXTR260_CCC DS 0H                                                   @14\n         LR    R10,R1              Get R_admin output buffer @      @14\n         A     R10,ADMN_PROF_DATA_OFFSET Add data offset            @14\n*                                                                   @14\n* Capture UACC field content - 7 byte maximum                       @14\n*                                                                   @14\n* -When landing here:                                               @14\n*                                                                   @14\n*  R14 contains executable length of UACC field                     @14\n*  R10 contains @ of OWNER field in R_admin buffer                  @14\n*                                                                   @14\n         MVI   Current_UACC,X'40'                                   @14\n         MVC   Current_UACC+1(L'Current_UACC-1),Current_UACC        @14\n         EX    R14,CPYUACC         Copy DATA field                  @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nCPYUACC  MVC   Current_UACC(*-*),0(R10) Copy UACC field             @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         J     NEXTFLD             Go get next field                @14\n*                                                                   @14\n* Do we have the DATA & OWNER fields for this profile now ?         @14\n*                                                                   @14\nREPEAT   DS    0H                                                   @14\n         BRAS  R14,DOREPEAT                                         @14\n         J     NEXTFLD2                                             @14\n.JRH0127A ANOP                                                      @14\n*                                                                   @14\n*        WTO the ADMN_PROF_FIELDNAME field                          @14\n*                                                                   @14\n         $RWTO MSG120I,WRITE=NO                                     @14\n         MVC   MSG120IA,ADMN_PROF_FIELDNAME                         @14\n         $RWTO WTOD,WRITE=YES                                       @14\n*                                                                   @14\n*        Set basing for next field descriptor. Decrement count of   @14\n*        fields to see if we are finished.                          @14\n*                                                                   @14\nEXTR270  DS    0H                                                   @14\nNEXTFLD  DS    0H                                                   @14\n         LA    R5,ADMN_PROF_NEXTFIELD Get next FD address           @14\nEXTR280  DS    0H                                                   @14\nNEXTFLD2 DS    0H                                                   @14\n         BRCT  R4,EXTR260          Decrement number of fields       @14\n*                                                                   @14\n*        Done with fields, check next segment                       @14\n*                                                                   @14\n*        Set basing for next segment descriptor. Decrement count    @14\n*        of segments to see if we are finished. Note that R5 is     @14\n*        already pointing to the first field descriptor in the next @14\n*        segment.                                                   @14\n*                                                                   @14\nNEXTSEG  DS    0H                                                   @14\n         LA    R3,ADMN_PROF_NEXTSEG  Get next SD address            @14\n         BRCT  R2,EXTR250          Decrement number of segments     @14\n*                                                                   @14\n*        Done with segments, and hence with this profile. Loop back @14\n*        for another R_admin call.                                  @14\n*                                                                   @14\nEXTR290  DS    0H                                                   @14\nDONESEGS DS    0H                                                   @14\n         TM    MYFLAGS,NEXTREQ       Is this a next request?        @14\n         JZ    EXTR300               Done with segments, finish up  @14\n*                                                                   @14\n* If we encountered a ghost generic during extract-next, we need to @14\n* stop looping. We do have an output block containing the profile   @14\n* name, so we need to free it.                                      @14\n*                                                                   @14\n         TM    MYFLAGS,SPOOKY        Paranormal encounter?          @14\n         JO    EXTR300               Yes, free output and bail out  @14\n*                                                                   @14\n* We use the output p-list as the input p-list for the next         @14\n* iteration. R_admin will maintain the generic bit for us, but we   @14\n* need to keep setting the name-only bit on each iteration, because @14\n* R_admin does not propagate that one.                              @14\n*                                                                   @14\n*        AGO   .JRH10A                                              @14\n         L     R2,ADMN_PROF_FLAG     Get output flags               @14\n         A     R2,SAVEFLAG           Add back specified options     @14\n         ST    R2,ADMN_PROF_FLAG     Save updated flag word         @14\n*.JRH10A  ANOP                                                      @14\n*                                                                   @14\n         MVC   PLIST@,OUTMSG         Save output buffer for input   @14\n         OI    MYFLAGS,FOUND1                                       @14\n*                                                                   @14\n* We have found a CL(#SNOMISC) SVCUPDTE_* profile and we need to    @14\n* extract the content that we need. This content includes the       @14\n* following:                                                        @14\n*                                                                   @14\n* From Base segment:                                                @14\n* ==================                                                @14\n* profile name                                                      @14\n* installation data field                                           @14\n* OWNER                                                             @14\n* UACC                                                              @14\n*                                                                   @14\n* From repeating ACLCNT fields:                                     @14\n* =============================                                     @14\n* userids & access priviledges (ACLID & ACLACS)                     @14\n*                                                                   @14\n* The ACLCNT repeating field has 2 subfields we need (ACLID &       @14\n* ACLACS) and it contains an occurrence count of the number of the  @14\n* repeating ACLCNT content.                                         @14\n*                                                                   @14\n* We also need to perform an ENQ test to verify whether or not the  @14\n* SVC slot is in use and report the address space that has any      @14\n* outstanding ENQueue for that SYSTEM level resource.               @14\n*                                                                   @14\n*                                                                   @14\n*                                                                   @14\n*                                                                   @14\n*                                                                   @14\n*                                                                   @14\n*                                                                   @14\n         J     EXTR100               Yes, go get next               @14\n*                                                                   @14\nEXTR300  DS    0H                                                   @14\nFREEOUT  DS    0H                                                   @14\n         L     R0,ADMN_PROF_OUTLEN Output area size to R0           @14\n         XR    R2,R2               Clear for insert                 @14\n         IC    R2,SUBPOOL          Get specified subpool            @14\n         FREEMAIN RU,SP=(2),       freemain                         @14X\n               LV=(0),             dynamic                          @14X\n               A=(1)               area                             @14\n*                                                                   @14\n         DROP  R1                                                   @14\n*                                                                   @14\n         DC    H'0'                <debug>                          @14\n*                                                                   @14\n*        If IRRSEQ00 loaded then delete it                          @14\n*                                                                   @14\nREPORTX_A DS   0H                                                   @14\nEXITRCA  DS    0H                                                   @14\n         L     R1,@R_admin         Is IRRSEQ00 loaded ?             @14\n         LTR   R1,R1                                                @14\n         JZ    REPORTX_B           ...jif not                       @14\n         BASR  R10,0               Macro internal addressability    @14\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"    @14\n         DELETE EP=IRRSEQ00        Delete the service from memory   @14\n         DROP  R10             Drop internal macro addressability   @14\n*                                                                   @14\n*        If IRRSEQ00 common work area exists then free it           @14\n*                                                                   @14\nREPORTX_B DS   0H                                                   @14\n         L     R1,@WORKAREA        Does IRRSEQ00 area exist ?       @14\n         LTR   R1,R1               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"       @14\n         JZ    REPORTX_C           ...jif not                       @14\n         L     R0,=A(WORKAREA_SIZE) Get length to free              @14\n         STORAGE RELEASE,          Free                             @14X\n               ADDR=(R1),           the DSNTAB                      @14X\n               LENGTH=(R0)           work area                      @14\n*                                                                   @14\n*        If report file open then close it                          @14\n*                                                                   @14\nREPORTX_C DS   0H                                                   @14\n         USING IHADCB,R10                                           @14\n         LA    R10,SYSPRINT        R10 -> SYSPRINT DCB              @14\n         TM    DCBOFLGS,DCBOFOPN   Is data set open ?               @14\n         JNO   REPORTX             ...jif not                       @14\n         OI    W#OPNDO,X'80'       Indicate end of parameter list   @14\n         CLOSE ((R10)),MODE=31,MF=(E,W#OPNDO) Close SYSPRINT        @14\n*                                                                   @14\n         DROP  R10                                                  @14\n*                                                                   @14\nREPORTX  DS    0H                                                   @14\n         LM    R14,R12,REPORTSAVE+12 Restore caller's registers     @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n    TITLE 'SVCUPDTE - DOREPEAT - report BASE && SD elements'        @14\nDOREPEAT DS    0H                                                   @14\n******************************************************************* @14\n*                                                                 * @14\n* For repeat fields, cycle through each subfield for each         * @14\n* occurrence after generating the report header lines for the     * @14\n* current profile.                                                * @14\n*                                                                 * @14\n* Register input:  R5  = address of repeat field header           * @14\n*                         descriptor                              * @14\n*                  R14 = return address                           * @14\n*                                                                 * @14\n* Register output: R5 = address of the next field descriptor      * @14\n*                       after the entire repeat field just        * @14\n*                       processed                                 * @14\n*                                                                 * @14\n* Register usage:                                                 * @14\n*  R6 - Number of occurrences of repeat field                     * @14\n*  R7 - Number of subfields within each occurrence                * @14\n*  R8 - Address of subfield descriptor                            * @14\n*  R9 - Work register                                             * @14\n*                                                                 * @14\n******************************************************************* @14\n         STM   R14,R12,DOREPEATSAVE+12 Save caller's registers      @14\n*                                                                   @14\n*        BRASL R14,Report_profile  Go report profile                @14\n*        WTO   'DOREPEAT subroutine called'                         @14\n         AGO   .JH0806A                                             @14\n         $RWTO MSG700D,WRITE=NO                                     @14\n         MVC   MSG700DA,Current_profname                            @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         $RWTO MSG701D,WRITE=NO                                     @14\n         MVC   MSG701DA,Current_DATA                                @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         $RWTO MSG702D,WRITE=NO                                     @14\n         MVC   MSG702DA,Current_OWNER                               @14\n         MVC   MSG702DB,Current_UACC                                @14\n         $RWTO WTOD,WRITE=YES                                       @14\n.JH0806A ANOP                                                       @14\n* Build profile + installation data line                            @14\n         MVI   PRTLINE+0,C' '      Single space                     @14\n         MVC   PRTLINE+1(L'Current_profname),Current_profname       @14\n         MVC   PRTLINE+18(L'Current_DATA),Current_DATA              @14\n         LA    R0,PRTLINE                                           @14\n         BRASL R14,PUTLINE                                          @14\n* Build owner + UACC line                                           @14\n         MVC   PRTLINE+18(06),=CL6'Owner:'                          @14\n         MVC   PRTLINE+25(08),Current_OWNER                         @14\n         MVC   PRTLINE+34(05),=CL5'UACC:'                           @14\n         MVC   PRTLINE+40(07),Current_UACC                          @14\n         LA    R0,PRTLINE                                           @14\n         BRASL R14,PUTLINE                                          @14\n*                                                                   @14\n*        Check to see if this SVC slot is currently in use by an    @14\n*        SVCUPDTE installation task on the current system...that is @14\n*        if the profile's installation data field does NOT start    @14\n*        with the character string \"SPECIAL\". If the profile's      @14\n*        installation data field starts with the character string   @14\n*        special then we assume that the installation of this       @14\n*        specific SVC does not use our facility so we do not want   @14\n*        to erroneously report it as not being in use.              @14\n*                                                                   @14\n         CLC   =C'SPECIAL',Current_profname Is it SPECIAL ?         @14\n         JE    DOREPEAT_020           Go resume profile processing  @14\n         NI    Profile_flags,X'FF'-Profile_INUSE                    @14\n         LA    R1,Current_profname R1 -> current profile name       @14\n         BRASL R14,CHKINUSE        Go see if this profile is in use @14\n* Build Status line                                                 @14\n         MVC   PRTLINE+18(07),=CL7'Status:'                         @14\n         TM    Profile_flags,Profile_INUSE Profile in use ?         @14\n         JNO   DOREPEAT_010        ...jif not                       @14\n*                                                                   @14\n*        Profile found to be in use - report requestor information  @14\n*                                                                   @14\n         AGO   .JH0806B                                             @14\n         $RWTO MSG705D,WRITE=NO                                     @14\n         MVC   MSG705DA,INUSE_JOBNAME Install requestor job name    @14\n         MVC   MSG705DB,INUSE_ASID    Install requestor ASID        @14\n         $RWTO WTOD,WRITE=YES                                       @14\n.JH0806B ANOP                                                       @14\n* Following line added by @14 change                                @14\n         MVC   PRTLINE+26(61),=CL61'SVC slot currently in use by job naX\n               me 12345678 in ASID 0x1234.'                         @14\n         MVC   PRTLINE+64(08),INUSE_JOBNAME                         @14\n         MVC   PRTLINE+83(04),INUSE_ASID                            @14\n         LA    R0,PRTLINE                                           @14\n         BRASL R14,PUTLINE                                          @14\n         J     DOREPEAT_020           Go resume profile processing  @14\n*                                                                   @14\n*        Profile found to not be in use - show status               @14\n*                                                                   @14\nDOREPEAT_010 DS 0H                                                  @14\n         AGO   .JH0806C                                             @14\n         $RWTO MSG704D,WRITE=YES                                    @14\n.JH0806C ANOP                                                       @14\n* Following line added by @14 change                                @14\n         MVC   PRTLINE+26(57),=CL57'SVC slot is not currently in use byX\n                the SVCUPDTE program.'                              @14\n         LA    R0,PRTLINE                                           @14\n         BRASL R14,PUTLINE                                          @14\n*                                                                   @14\n* Make sure we're dealing with an ACLCNT repeating field else skip  @14\n* over all the subfields for repeating fields we're not interested  @14\n* in processing.                                                    @14\n*                                                                   @14\nDOREPEAT_020 DS 0H                                                  @14\n         NI    Profile_flags,X'FF'-Skip_repeat_field Reset flag     @14\n         LA    R14,ADMN_PROF_FIELDNAME Get @ of field name          @14\n         CLC   =CL8'ACLCNT',0(R14) ACLCNT repeat field ?            @14\n         JE    DOREPEAT_100        ...jif yes, skip setting flag    @14\n         OI    Profile_flags,Skip_repeat_field Set \"skip\" flag      @14\nDOREPEAT_100 DS 0H                                                  @14\n       NI    Profile_flags,X'FF'-Have_ACLID-Have_ACLACS Reset flags @14\n         L     R6,ADMN_PROF_RPTNUM Get number of occurrences        @14\n         LA    R8,ADMN_PROF_NEXTFIELD Get next FD address           @14\nDOREPEAT_200 DS 0H                                                  @14\nRPTOCC   DS    0H                                                   @14\n         L     R7,ADMN_PROF_FIELDDIM Get # subfields per occurrence @14\n         DROP  R5                  Drop ADMN_PROF_FIELDDESC         @14\n        USING ADMN_PROF_FIELDDESC,R8 Basing for subfield descriptor @14\nDOREPEAT_300 DS 0H                                                  @14\nRPTSFLD  DS    0H                                                   @14\n         LA    R14,ADMN_PROF_FIELDNAME Get @ of field name          @14\n         L     R9,ADMN_PROF_FIELDLEN Get data length                @14\n         BCTR  R9,0                Make length EXecutable           @14\n         CLC   =CL8'ACLID',0(R14)  Is this ACLID (userid) field ?   @14\n         JNE   DOREPEAT_400        ..jif not check next field       @14\n         MVI   Current_ACLID,X'40'                                  @14\n         MVC   Current_ACLID+1(L'Current_ACLID-1),Current_ACLID     @14\n         L     R14,OUTMSG          Get R_admin output buffer @      @14\n         A     R14,ADMN_PROF_DATA_OFFSET Add data offset            @14\n         EX    R9,CPYACLID         Copy ACLID field data            @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nCPYACLID MVC   Current_ACLID(*-*),0(R14) Copy ACLID data field      @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         OI    Profile_flags,Have_ACLID Set flag                    @14\n         J     DOMSG1              Go get next FD                   @14\n*                                                                   @14\nDOREPEAT_400 DS 0H                                                  @14\n         CLC   =CL8'ACLACS',0(R14) Is this ACLACS (auth) field ?    @14\n         JNE   DOREPEAT_500        ..jif not check next field       @14\n         MVI   Current_ACLACS,X'40'                                 @14\n         MVC   Current_ACLACS+1(L'Current_ACLACS-1),Current_ACLACS  @14\n         L     R14,OUTMSG          Get R_admin output buffer @      @14\n         A     R14,ADMN_PROF_DATA_OFFSET Add data offset            @14\n         EX    R9,CPYACLACS        Copy ACLACS field data           @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nCPYACLACS MVC  Current_ACLACS(*-*),0(R14) Copy ACLACS data field    @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         OI    Profile_flags,Have_ACLACS Set flag                   @14\n         J     DOMSG1              Go get next FD                   @14\n*                                                                   @14\nDOREPEAT_500 DS 0H                                                  @14\nDOMSG1   DS    0H                                                   @14\n         LA    R8,ADMN_PROF_NEXTFIELD Get next FD address           @14\n         BRCT  R7,RPTSFLD          Loop if subfields remaining      @14\n*        WTO   'Finished SD descriptors'                            @14\n* Do we have both ACLID & ACLACS fields ?                           @14\n         TM    Profile_flags,Have_ACLACS+Have_ACLID                 @14\n         JNO   DOREPEAT_600        ...jif not                       @14\n*        WTO   'We have found both ACLID && ACLACS'                 @14\n*                                                                   @14\n* Build ACLID: ACLACS WTO message                                   @14\n*                                                                   @14\n         AGO   .JH0806D                                             @14\n         $RWTO MSG703D,WRITE=NO                                     @14\n         MVC   MSG703DA,Current_ACLID                               @14\n         MVC   MSG703DB,Current_ACLACS                              @14\n         $RWTO WTOD,WRITE=YES                                       @14\n.JH0806D ANOP                                                       @14\n         MVC   PRTLINE+18(07),=CL7'ACLID: '                         @14\n         MVC   PRTLINE+25(08),Current_ACLID                         @14\n         MVC   PRTLINE+34(08),=CL8'ACLACS: '                        @14\n         MVC   PRTLINE+42(07),Current_ACLACS                        @14\n         LA    R0,PRTLINE                                           @14\n         BRASL R14,PUTLINE                                          @14\nDOREPEAT_600 DS 0H                                                  @14\n         BRCT  R6,RPTOCC                                            @14\n         LR    R5,R8            All done, set R5 to next FD address @14\n         ST    R5,DOREPEATSAVE+40  Save in R5 slot for caller       @14\n         LA    R0,PRTLINE        Print blank line profile seperator @14\n         BRASL R14,PUTLINE                                          @14\nDOREPEATX DS   0H                                                   @14\n         LM    R14,R12,DOREPEATSAVE+12 Restore caller's registers   @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n        TITLE 'PUTLINE  - Write line to report file && count lines' @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n*        PUTLINE  - Write record to report file DCB. Record       * @14\n*                   address located in GPR0 on entry. Returns to  * @14\n*                   caller.                                       * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nPUTLINE  DS    0H                                                   @14\n         STM   R14,R12,PUTSAVE+12  Save entry registers             @14\n*                                                                   @14\n*        Force header lines if needed                               @14\n*                                                                   @14\n         CP    Line_count,MAXLINES Force page headings ?            @14\n         JL    PUTL002             ...jif not                       @14\n*                                                                   @14\n*        Generate the header lines                                  @14\n*                                                                   @14\n         ST    R0,SAVER0           Save entry R0 value              @14\n         ZAP   Line_count,=P'5'    Set line count to 5 for headers  @14\n         AP    Page_count,=P'1'    Bump page count                  @14\n*                                                                   @14\n         MVI   HDRLINE,C' '        Ripple to                        @14\n         MVC   HDRLINE+1(L'HDRLINE-1),HDRLINE  blanks               @14\n* Generate 1st header line                                          @14\n         LARL  R14,USRHD#1                                          @14\n         MVC   HDRLINE(USRHD#1L),0(R14) Header line #1              @14\n*                                                                   @14\n*        Install program name, program version, date & time         @14\n*                                                                   @14\n         LARL  R14,PGMNAME                                          @14\n         MVC   UHDL1#1,0(R14)      Program name to header line      @14\n         LARL  R14,PGMVER                                           @14\n         MVC   UHDL1#2,0(R14)      Program version to header line   @14\n         LARL  R14,PGMDATE                                          @14\n         MVC   UHDL1#3,4(R14)      Program assembly date (MM)       @14\n         MVC   UHDL1#4,6(R14)      Program assembly date (DD)       @14\n         MVC   UHDL1#5,0(R14)      Program assembly date (YYYY)     @14\n         LARL  R14,PGMTIME                                          @14\n         MVC   UHDL1#6,0(R14)      Program assembly date (HH)       @14\n         MVC   UHDL1#7,3(R14)      Program assembly date (HH)       @14\n*                                                                   @14\n*        Install page # EDIT pattern & EDIT it                      @14\n*                                                                   @14\n         MVC   UHDL1#8,EDIT_page_# Install EDit pattern             @14\n         ED    UHDL1#8,Page_count  Install page # in print line     @14\n         LA    R0,HDRLINE          R0 -> report line                @14\n         BRASL R14,PUTHDR          Write the header line            @14\n* Generate 2nd header line                                          @14\n         LARL  R14,USRHD#2                                          @14\n         MVC   HDRLINE(USRHD#2L),0(R14) Header line #2              @14\n         MVC   UHDL2#1,HOURS                                        @14\n         MVC   UHDL2#2,MINUTES                                      @14\n         MVC   UHDL2#3,SECONDS                                      @14\n         MVC   UHDL2#4,MONTH                                        @14\n         MVC   UHDL2#5,DAY                                          @14\n         MVC   UHDL2#6,YEAR                                         @14\n         LA    R0,HDRLINE          R0 -> report line                @14\n         BRASL R14,PUTHDR          Write the header line            @14\n* Generate 3rd header line                                          @14\n         LARL  R14,USRHD#3                                          @14\n         MVC   HDRLINE(USRHD#3L),0(R14) Header line #3              @14\n         LA    R0,HDRLINE          R0 -> report line                @14\n         BRASL R14,PUTHDR          Write the header line            @14\n* Generate 4th header line                                          @14\n         LARL  R14,USRHD#4                                          @14\n         MVC   HDRLINE(USRHD#4L),0(R14) Header line #4              @14\n         LA    R0,HDRLINE          R0 -> report line                @14\n         BRASL R14,PUTHDR          Write the header line            @14\n* Generate 5th header line                                          @14\n         LARL  R14,USRHD#5                                          @14\n         MVC   HDRLINE(USRHD#5L),0(R14) Header line #5              @14\n         LA    R0,HDRLINE          R0 -> report line                @14\n         BRASL R14,PUTHDR          Write the header line            @14\n         L     R0,SAVER0           Restore entry R0 value           @14\n*                                                                   @14\n*        Count line toward maximum per page by examining CC         @14\n*                                                                   @14\n*        Note: ANSI \"overprint\" (+) is not counted                  @14\n*                                                                   @14\nPUTL002  DS    0H                                                   @14\n         LR    R1,R0               Copy R0 for tests                @14\n         CLI   0(R1),C' '          Single space ?                   @14\n         JNE   PUTL010             ...jif not                       @14\n         AP    Line_count,=P'1'    otherwise increment by 1         @14\n         J     PUTLINE@             and go to resume point          @14\nPUTL010  DS    0H                                                   @14\n         CLI   0(R1),C'1'          Form feed ?                      @14\n         JNE   PUTL020             ...jif not                       @14\n         AP    Line_count,=P'1'    otherwise increment by 1         @14\n         J     PUTLINE@             and go to resume point          @14\nPUTL020  DS    0H                                                   @14\n         CLI   0(R1),C'0'          Double space ?                   @14\n         JNE   PUTL030             ...jif not                       @14\n         AP    Line_count,=P'2'    otherwise increment by 2         @14\n         J     PUTLINE@             and go to resume point          @14\nPUTL030  DS    0H                                                   @14\n         CLI   0(R1),C'-'          Triple space ?                   @14\n         JNE   PUTLINE@            ...jif not                       @14\n         AP    Line_count,=P'3'    otherwise increment by 3         @14\n*                                                                   @14\nPUTLINE@ DS    0H                                                   @14\n         LA    R1,SYSPRINT         R1 -> SYSPRINT DCB               @14\n* Note: R0 on entry contains address of print line                  @14\n         LA    R15,SPUTCODE        R15 -> PUT routine (<16MB)       @14\n         BASSM R2,R15              Call PUT routine                 @14\n         L     R2,PUTSAVE+20       Restore entry R0 to R2           @14\n         MVI   0(R2),C' '          Clear area just processed        @14\n         MVC   1(132,R2),0(R2)      to blanks                       @14\n         LM    R14,R12,PUTSAVE+12  Restore entry registers          @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - PUTHDR - Write header line'              @14\nPUTHDR   DS    0H                                                   @14\n         STM   R14,R12,PUTHDRSAVE+12  Save caller's GPRs            @14\n* Note: R0 on entry contains address of print line                  @14\n         LR    R2,R0               Save print record address        @14\n         LA    R1,SYSPRINT         R1 -> SYSPRINT DCB               @14\n         LA    R15,SPUTCODE        R15 -> PUT routine (<16MB)       @14\n         BASSM R2,R15              Call PUT routine                 @14\n         L     R2,PUTHDRSAVE+20    Restore entry R0 to R2           @14\n         MVI   0(R2),C' '          Clear area just processed        @14\n         MVC   1(132,R2),0(R2)      to blanks                       @14\n         LM    R14,R12,PUTHDRSAVE+12 Restore entry registers        @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n  TITLE 'SVCUPDTE - CHKINUSE - verify profile not in use on system' @14\n******************************************************************* @14\n* CHKINUSE                                                        * @14\n*                                                                 * @14\n*        This routine verifies that the SVC slot profile whose    * @14\n*        text string value is passed in the Current_profname      * @14\n*        field is not in use on this system. If it is found to be * @14\n*        in use the flag Profile_flags.Profile_INUSE will be set  * @14\n*        on an in addition the following fields will be populated * @14\n*        for the caller's optional usage:                         * @14\n*                                                                 * @14\n*        INUSE_ASID    - ASID of address space using the profile  * @14\n*        INUSE_JOBNAME - JOBNAME of address space using the       * @14\n*                        profile at the current time              * @14\n*                                                                 * @14\n*        This routine expects the following fields to have        * @14\n*        parsed values when called:                               * @14\n*                                                                 * @14\n*        Current_profname                                         * @14\n*                                                                 * @14\n*        This routine is called from the following 2 locations:   * @14\n*                                                                 * @14\n*        1) DOREPEAT when listing all SVCUPDTE profiles           * @14\n*        2) ENV000 when verifying that the targeted SVC slot is   * @14\n*           not already in use by another currently executing     * @14\n*           address space.                                        * @14\n*                                                                 * @14\n*        This routine only returns a return code of BADQSCAN if   * @14\n*        an unexpected return code is returned from the QSCAN     * @14\n*        service. Currently the DOREPEAT routine does not check   * @14\n*        this return code since it would only have occurred       * @14\n*        during a list operation. The ENV000 routine on the other * @14\n*        hand must check the return code. In the case of an       * @14\n*        unexpected QSCAN return code messages SVCU906A &         * @14\n*        SVCU907A messages will have always been issued.          * @14\n*                                                                 * @14\n******************************************************************* @14\nCHKINUSE DS    0H                                                   @14\n         STM   R14,R12,CHKINUSESAVE+12 Save caller's registers      @14\n*                                                                   @14\n         MVC   RIBS(RIBSINIL),RIBSINIT INITIALIZE RIB HOLDING AREA  @14\n         MVC   GQSLIST(GQSMAPL),GQSMAP   INITIALIZE GQSCAN AREA     @14\n         MVC   QNAME(L'Current_profname),Current_profname           @14\n         L     R3,RIBSPACE_p       Refresh RIBs work area           @14\n         ST    R3,RIBS              pointer                         @14\n         L     R3,RIBS             R3 -> RIBs work area             @14\n         L     R4,AMOUNTL             SET R4 TO AMOUNT OF RIB SPACE @14\n         LA    R5,QNAME                POINT R5 TO QNAME FIELD      @14\n         LA    R6,RNAME                POINT R6 TO RNAME FIELD      @14\n         LA    R8,RNAME                Setup for finding length     @14\n         XR    R7,R7                                                @14\n         MVI   RNAMEBLK,X'40'          Set trailing blank           @14\n*                                                                   @14\n*        Calculate RNAME resource length                            @14\n*                                                                   @14\nCHKINUSE_010 DS 0H                                                  @14\n         CLI   0(R8),X'40'             Do we have a blank?          @14\n         JE    CHKINUSE_020            Yes,  go process             @14\n         AHI   R7,1                    Add one to length            @14\n         C     R7,=F'6'                Is the RNAME too long ?      @14\n         JH    CHKINUSE_020            ...jif so, go process        @14\n         AHI   R8,1                    Bump up one for search       @14\n         J     CHKINUSE_010            Go back and look again       @14\nCHKINUSE_020 DS 0H                                                  @14\n         STCM  R7,B'0001',RNAMEEL  Save length for possible ENQ     @14\n*                                                                   @14\n* Development code starts:                                          @14\n*                                                                   @14\n*        CLC   Current_profname,=CL15'SVCUPDTE_109241'              @14\n*        JNE   CHKINUSE_030                                         @14\n*        MVC   QNAME(14),=C'SVCUPDTE109241'                         @14\n**       BCTR  R7,0                                                 @14\n*                                                                   @14\nCHKINUSE_030 DS 0H                                                  @14\n*                                                                   @14\n* Development code ends:                                            @14\n*                                                                   @14\n         GQSCAN AREA=((R3),(R4)),                                   @14X\n               RESNAME=((R5),(R6),(R7),SPECIFIC,8),                 @14X\n               SCOPE=SYSTEM,                                        @14X\n               MF=(E,GQSLIST)                                       @14\n*                                                                   @14\n*        Check GQSCAN return code                                   @14\n*                                                                   @14\n         CHI   R15,4               Slot in use ?                    @14\n         JE    CHKINUSEX           ...jif not in use, just return   @14\n         CHI   R15,0               Slot in use ?                    @14\n         JNE   CHKINUSE_040 ...jif not in use, go report unexpected @14\n*                                                                   @14\n*        SVC slot found to be in use - capture RIBE job name & ASID @14\n*                                                                   @14\n         LR    R6,R0                                                @14\n         SRL   R6,16               Get size of fixed RIB part       @14\n         LR    R7,R0                                                @14\n         SLL   R7,16                                                @14\n         SRL   R7,16               Get size of fized RIBE part      @14\n         USING RIB,R3                                               @14\n         LR    R4,R3               Point at current RIB             @14\n         AR    R4,R6               Add fixed length portion         @14\n         AH    R4,RIBVLEN          Add variable length portion      @14\n         USING RIBE,R4             Now pointing at 1st RIBE         @14\n         MVC   INUSE_JOBNAME,RIBEJBNM Capture requestor job name    @14\n*                                                                   @14\n*        Format ASID as 4-byte hex for caller                       @14\n*                                                                   @14\n         LA    R14,RIBEASID        R14 -> area to be converted      @14\n         LA    R15,DBWD            R15 -> temporary display area    @14\n         UNPK  0(5,R15),0(3,R14) UNPacK into temporary display area @14\n         MVZ   0(4,R15),=XL17'00'  MoVe Zone in temporary work area @14\n         TR    0(4,R15),=C'0123456789ABCDEF' TRanslate display area @14\n         MVI   4(R15),C' '         Overlay clobbered byte           @14\n         MVC   INUSE_ASID,DBWD     Set field for caller             @14\n         OI    Profile_flags,Profile_INUSE Set for caller           @14\n         J     CHKINUSEX           Go return to caller              @14\n*                                                                   @14\n*        Format unexpected return code from GQSCAN report it        @14\n*                                                                   @14\n*        -Report R15 & R0 in all cases                              @14\n*                                                                   @14\nCHKINUSE_040 DS 0H                                                  @14\n         ST    R15,DBWD            Save GQSCAN R15                  @14\n         ST    R0,DBWD+4           Save GQSCAN R0                   @14\n         $RWTO MSG906A,WRITE=NO                                     @14\n* Install R15 value                                                 @14\n         LA    R14,DBWD            R14 -> area to be converted      @14\n         LA    R15,MSG906AA        R15 -> display area              @14\n         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14\n         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14\n         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14\n         MVI   8(R15),C' '         overlay clobbered byte           @14\n* Install R0 value                                                  @14\n         LA    R14,DBWD+4          R14 -> area to be converted      @14\n         LA    R15,MSG906AB        R15 -> display area              @14\n         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14\n         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14\n         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14\n         MVI   8(R15),C'.'         overlay clobbered byte           @14\n* Issue the return/reason code message                              @14\n         $RWTO WTOD,WRITE=YES                                       @14\n* Report the profile involved                                       @14\n         $RWTO MSG907A,WRITE=NO                                     @14\n         MVC   MSG907AA,Current_profname                            @14\n         $RWTO WTOD,WRITE=YES                                       @14\n* Set return code for caller                                        @14\n         LHI   R15,BADQSCAN        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\nCHKINUSEX DS   0H                                                   @14\n         LM    R14,R12,CHKINUSESAVE+12 Restore caller's registers   @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n         TITLE 'MLWTO - Issue MLWTO for event tracking'             @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n*        MLWTO - Issue multi-line WTO tracking message            * @14\n*                                                                 * @14\n* This routine is responsible for constructing the multiline WTO  * @14\n* used for event tracking and placing it in the system hardcopy   * @14\n* log.                                                            * @14\n*                                                                 * @14\n* Note: This routine expects all fields necessary to be placed in * @14\n*       any of the individual WTO lines has been harvested and    * @14\n*       placed in the expected field in display format.           * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nMLWTO    DS    0H                                                   @14\n         STM   R14,R12,MLWTOSAVE+12    Save caller's registers      @14\n*                                                                   @14\n*        Calculate size of MLWTO message area to acquire            @14\n*                                                                   @14\n*        LARL  R14,MLWTOSUFFIX     Point after MLWTO lines area     @14\n*        LARL  R15,MLWTOPREFIX     Point before MLWTO lines area    @14\n*        SR    R14,R15             R15 = length to acquire          @14\n*        LR    R0,R14              R0 = length to acquire           @14\n         LHI   R0,MLWTOTLEN        Get length to acquire            @14\n         ST    R0,MLWTOLENGTH    Save length just in case we got it @14\n         STORAGE OBTAIN,           Get storage                      @14X\n               LENGTH=(R0),                                         @14X\n               LOC=ANY                                              @14\n*                                                                   @14\n*        Did we get the storage ?                                   @14\n*                                                                   @14\n         LTR   R15,R15             Successful ?                     @14\n         JZ    MLWTO_010           ...jif so                        @14\n*                                                                   @14\n*        Issue WTO indicating MLWTO area could not be acquired      @14\n*                                                                   @14\n         $RWTO MSG026A,WRITE=YES   Issue message                    @14\n         LHI   R15,BADMLWTO        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     MLWTOX                & go return to caller          @14\n*                                                                   @14\n*        Prime MLWTO area for population & display                  @14\n*                                                                   @14\nMLWTO_010 DS   0H                                                   @14\n         OI    MYFLAGS,MLWTOAREA   Indicate MLWTO area acquired     @14\n         ST    R1,MLWTOLINES@      Save address for construction    @14\n         LR    R2,R1               Copy MLWTO work area address     @14\n         L     R3,MLWTOLENGTH      R3 = length to copy              @14\n         LARL  R4,MLWTOPREFIX      R4 -> source location            @14\n         L     R5,MLWTOLENGTH      R5 = length to copy              @14\n         MVCL  R2,R4               Copy MLWTO lines to work area    @14\n*                                                                   @14\n*        Establish MLWTO area addressability                        @14\n*                                                                   @14\n         L     R3,MLWTOLINES@      R3 -> MLWTO work area            @14\n         USING (MLWTOPREFIX,MLWTOSUFFIX),R3  Inform assembler       @14\n*                                                                   @14\n*        Populate MLWTO line data fields for display                @14\n*                                                                   @14\n* DATALINE2 fields                                                  @14\n         MVC   DATALINE2_userid,EUSER                               @14\n         MVC   DATALINE2_LMOD,LMOD                                  @14\n         LA    R14,MODSIZE         R14 -> area to be converted      @14\n         LA    R15,DATALINE2_SIZE  R15 -> display area              @14\n         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14\n         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14\n         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14\n         MVI   8(R15),C' '         overlay clobbered byte           @14\n* DATALINE3 fields                                                  @14\n         LA    R14,@CSAEPN@        R14 -> area to be converted      @14\n         LA    R15,DATALINE3_EP    R15 -> display area              @14\n         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14\n         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14\n         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14\n         MVI   8(R15),C' '         overlay clobbered byte           @14\n         LA    R14,@CSAEPN         R14 -> area to be converted      @14\n         LA    R15,DATALINE3_LP    R15 -> display area              @14\n         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14\n         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14\n         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14\n         MVI   8(R15),C' '         overlay clobbered byte           @14\n* DATALINE4 fields                                                  @14\n         MVC   DATALINE4_AMODE,=CL3'ANY' Assume AMODE=ANY           @14\n         TM    BLARMODE,BLMAMOD     AMODE=ANY ?                     @14\n         JO    MLWTO_020            ...jif so, assumption correct   @14\n         MVC   DATALINE4_AMODE,=CL3'31 ' Assume AMODE=31            @14\n         TM    BLARMODE,BLAM31      AMODE=31 ?                      @14\n         JO    MLWTO_020            ...jif so, assumption correct   @14\n         MVC   DATALINE4_AMODE,=CL3'24 ' else AMODE 24 (for us)     @14\nMLWTO_020 DS   0H                                                   @14\n         MVC   DATALINE4_RMODE,=CL3'ANY' Assume RMODE ANY           @14\n         TM    BLARMODE,BLRMANY     AMODE=ANY ?                     @14\n         JO    MLWTO_030            ...jif so, assumption correct   @14\n         MVC   DATALINE4_RMODE,=CL3'24 ' else set RMODE 24          @14\n* Format old entry's entry point from captured entry (1st 4 bytes)  @14\nMLWTO_030 DS   0H                                                   @14\n         LA    R14,OLDENTRY        R14 -> area to be converted      @14\n         LA    R15,DATALINE4_OLDEP R15 -> display area              @14\n         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14\n         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14\n         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14\n         MVI   8(R15),C' '         overlay clobbered byte           @14\n* DATALINE5 fields                                                  @14\n         MVC   DATALINE5_SVCLIB,DSN    Install SVCLIB data set name @14\n         MVC   DATALINE5_VOLSER,VOL    Install SVCLIB volser        @14\n* DATALINE6 fields                                                  @14\n         MVC   DATALINE6_ESQA@,=CL8'N/A' Assume filter not present  @14\n         L     R14,SQA_ADDR        Pick up possible filter code @   @14\n         LTR   R14,R14             Was the filter code installed ?  @14\n         JZ    MLWTO_040           ...jif not                       @14\n         LA    R14,SQA_ADDR        R14 -> area to be converted      @14\n         LA    R15,DATALINE6_ESQA@ R15 -> display area              @14\n         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14\n         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14\n         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14\n         MVI   8(R15),C' '         overlay clobbered byte           @14\n* DATALINE7 fields - 1st 50 bytes of any PARM provided string       @14 ****\nMLWTO_040 DS   0H                                                   @14\n         XR    R4,R4               Clear work register              @14\n         LH    R4,Input_parmlen Get full executable length of PARM  @14\n*                                  Assume DATALINE8 will contain    @14\n*                                   something                       @14\n         CHI   R4,51               >= 51 bytes in length            @14\n         JH    MLWTO_050         ...jif so, go move max of 50 bytes @14\n* Move just for the length found in Input_parmlen                   @14\n         LA    R7,DATALINE7_PARM   R7 -> target field for copy      @14\n         LA    R8,Copied_input_parms R8 -> source field for copy    @14\n         EX    R4,CAPDLPRM       Copy entire PARM string to display @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nCAPDLPRM MVC   0(*-*,R7),0(R8)   Copy field R8 to R7                @14\nSVCUPDTE LOCTR ,                                                    @14\n         J     MLWTO_060                                            @14\n*                                                                   @14\n* Move max of 50 characters for DATALINE7 and then complete         @14\n* DATALINE8 with the rest of the PARM string                        @14\n*                                                                   @14\nMLWTO_050 DS   0H                                                   @14\n         LA    R7,DATALINE7_PARM   R7 -> target field for copy      @14\n         LA    R8,Copied_input_parms R8 -> source field for copy    @14\n         LHI   R4,50             Make length executable             @14\n         EX    R4,CAPDLPRM     Copy 1st 50 bytes of PARM to display @14\n*                                                                   @14\n* Calculate length of residual move                                 @14\n*                                                                   @14\n         LA    R7,DATALINE8_PARM   R7 -> target field for copy      @14\n         LA    R8,Copied_input_parms R8 -> source field for copy    @14\n         AHI   R8,51               Skip over 1st 51 bytes of source @14\n         LH    R4,Input_parmlen  Get full executable length of PARM @14\n         S     R4,=F'51'           Reduce by part already displayed @14\n         EX    R4,CAPDLPRM     Copy 2nd 50 bytes of PARM to display @14\n*                                                                   @14\n* We should be done with the MLWTO text lines                       @14\n*                                                                   @14\nMLWTO_060 DS   0H                                                   @14\n*                                                                   @14\n*        Issue MLWTO                                                @14\n*                                                                   @14\n         LARL  R2,VMC002I          R2 -> Model MLWTO                @14\n         MVC   WTOD(VMC002IL),0(R2)    Install model MLWTO list     @14\n         XR    R0,R0               Clear R0 for 1st multi-line WTO  @14\n         WTO   TEXT=((CNTLLINE,),(STARLINE,),                       @14X\n               (DATALINE2,),(DATALINE3,),(DATALINE4,),(DATALINE5,), @14X\n               (DATALINE6,),(DATALINE7,),(DATALINE8,),              @14X\n               (STARLINE2,)),                                       @14X\n               MF=(E,WTOD)                                          @14\n*                                                                   @14\n         DROP  R3                  Drop MLWTO work area             @14\n*                                                                   @14\n*        Free MLWTO work area is one was allocated                  @14\n*                                                                   @14\n         TM    MYFLAGS,MLWTOAREA   Do we have the work area ?       @14\n         JNO   MLWTOX              ...jif not, skip free            @14\n         L     R0,MLWTOLENGTH      R0 = length to free              @14\n         L     R1,MLWTOLINES@      R1 -> area to free               @14\n*                                                                   @14\n         STORAGE RELEASE,          Free                             @14X\n               ADDR=(R1),           the DSNTAB                      @14X\n               LENGTH=(R0)           work area                      @14\n         NI    MYFLAGS,X'FF'-MLWTOAREA  Reset flag                  @14\n*                                                                   @14\nMLWTOX   DS    0H                                                   @14\n         LM    R14,R12,MLWTOSAVE+12    Restore caller's registers   @14\n         BR    R14                     Return to caller             @14\n*                                                                   @14\n         TITLE 'PARS000 - Parse input parameters'                   @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n*        Parse input parameters for syntax & length in phase 1 of * @14\n*        parse and context in light of other supplied parameters  * @14\n*        is checked in phase 1 of the parse. Items that cannot be * @14\n*        checked without opening the SVCLIB library are deferred  * @14\n*        to processing performed in the ENV000 subroutine.        * @14\n*                                                                 * @14\n* Note: The parse processing will process the following keyword   * @14\n*       fields & perform the listed checks:                       * @14\n*                                                                 * @14\n*       SVC#     - The 1 to 3 digit zoned decimal SVC number.     * @14\n*                  This is a required keyword.                    * @14\n*       TYPE     - Single zoned decimal digit of 1, 2, 3, 4 or 6. * @14\n*                  This is required unless the SVC# parameter     * @14\n*                  supplied is an ESR SVC # (109, 116, 122 or     * @14\n*                  137).                                          * @14\n*       MOD      - Up to 8 character load module member name that * @14\n*                  must exist in the library specified on the     * @14\n*                  SYSLIB DDname.                                 * @14\n*       ATTRIB   - This parameter, if specified, has the          * @14\n*                  following format:                              * @14\n*                                                                 * @14\n*                  ATTRIB=(a1,a2,a3,a4) where ax is one or more   * @14\n*                  of the following attributes:                   * @14\n*                                                                 * @14\n*                  APF - Indicates that the SVC is restricted to  * @14\n*                        authorized program callers. The absence  * @14\n*                        of this attribute implies the SVC is NOT * @14\n*                        restricted to authorized callers.        * @14\n*                                                                 * @14\n*                  AR  - Indicates that the SVC supports callers  * @14\n*                        that are in AR ASC mode. The absence of  * @14\n*                        this attribute implies that the SVC does * @14\n*                        NOT support callers in AR ASC mode.      * @14\n*                                                                 * @14\n*                  NP  - Indicates that the SVC cannot be         * @14\n*                        pre-empted for I/O operations. The       * @14\n*                        absence of this attribute implies that   * @14\n*                        the SVC can be pre-empted for I/O        * @14\n*                        operations.                              * @14\n*                                                                 * @14\n*                  ASF - Indicates that the SVC can be assisted.  * @14\n*                        The absence of this attribute indicates  * @14\n*                        that the SVC is not assisted. This       * @14\n*                        facility is NOT support on z/10 and      * @14\n*                        higher level processors.                 * @14\n*                                                                 * @14\n*       LOCKS    - This parameter, if specified, has the          * @14\n*                  following format:                              * @14\n*                                                                 * @14\n*                  LOCKS=(lock1,lock2,...,lockn) where lockx is   * @14\n*                  one or more of the following lock types:       * @14\n*                                                                 * @14\n*                  LOCAL  - local lock                            * @14\n*                  DISP   - dispatcher lock (global spin)         * @14\n*                  SRM    - SRM/OPT lock (global spin)            * @14\n*                  CMS    - Cross Memory Service lock             * @14\n*                  SALLOC - space allocation lock (global spin)   * @14\n*                                                                 * @14\n*                  Note that the context of the supplied LOCKS in * @14\n*                  regard to the SVC type and other supplied      * @14\n*                  parameters is not checked during phase 1 of    * @14\n*                  the parse operation. They are checked in phase * @14\n*                  2 of the parse operation.                      * @14\n*                                                                 * @14\n*       GOODNITE - 4 zoned decimal digits representing HHMM value * @14\n*                  later in the current day for the successfully  * @14\n*                  installed SVC to be de-installed. This is an   * @14\n*                  optional parameter.                            * @14\n*       USERID   - 1 to 8 character userid filter which           * @14\n*                  indicates that only address spaces owned by    * @14\n*                  this userid are to access the new SVC. All     * @14\n*                  other caller's of the SVC will get the old SVC * @14\n*                  code. This parameter is optional.              * @14\n*                                                                 * @14\n*       The following fields are set as a result of this process- * @14\n*       ing:                                                      * @14\n*                                                                 * @14\n*       SVC#   3 zoned decimal digit value in range 0-255         * @14\n*       SVCNO  single byte binary value in range 1-255            * @14\n*       LMOD   8 character left justified load module name        * @14\n*       LOCKS_FLAGS - locks supplied indicator byte, where:       * @14\n*                                                                 * @14\n*                    X'80' - LOCAL lock requested                 * @14\n*                    X'40' - CMS lock requested                   * @14\n*                    X'20' - SRM lock requested                   * @14\n*                    X'10' - SALLOC lock requested                * @14\n*                    X'08' - DISP lock requested                  * @14\n*                                                                 * @14\n*                    Note: The LOCKS_FLAGS byte uses the same     * @14\n*                          lock mappings used by the SVCENTRY     * @14\n*                          DSECT (IHASVC) for direct replacement  * @14\n*                          purposes.                              * @14\n         AGO   .JRH99A\n\n         DC    S(L'SVCNO,SVCNO)    1st operand\n         DC    S(L'EPNAME,EPNAME)  2nd operand\n         DC    S(L'LOCKS,LOCKS)    3rd operand                      @08\n         DC    S(L'ENDOFDAY,ENDOFDAY) 4th operand\n         DC    S(L'USERID,USERID)  5th operand                      @05\n\n\n&NAPF    SETA    8                    VALUE OF THE APF BIT IN SVC ENTRY\n&NAR     SETA    4                    VALUE OF AR BIT IN SVC ENTRY @L3A\n&NNP     SETA    2                    VALUE OF THE NON-PREMPT\n\nATTR_FLAGS DS XL1                  Attributes requested flags       @14\nATTR_NPRMT EQU X'80'               -Non-preemptable requested       @14\nATTR_APF   EQU X'40'               -APF requested (APF=YES)         @14\nATTR_AR    EQU X'20'               -AR requested (AR=YES)           @14\nATTR_ESR   EQU X'10'               -ESR SVC request                 @14\n\nPARSE subroutine needs to set the following:\n\nSVC_TYPE DS    CL1                 SVC type for this request\n\nESRSVCNO DS    CL3                 ESR SVC number (109/116/122/137) @14\nATTR_FLAGS DS XL1                  Attributes requested flags       @14\nLOCKS_FLAGS DS XL1                 Locks requested flags            @14\nPROC_FLAGS DS XL1                  Processing requested flags       @14\n\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n*        SVC type authorization requirements                      * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nSVC_BRXLE DC   A(SVC_START,SVC_entry_len,SVC_END-SVC_entry_len)     @14\n*                                                                   @14\nSVC_START DS   0H                                                   @14\n         DC    C'1',AL1(SYSTEMS)   \"SYSTEM\" authorization required  @14\nSVC_entry_len EQU *-SVC_START      Generate length of table entry   @14\n         DC    C'2',AL1(AUTHUSER)                                   @14\n         DC    C'3',AL1(AUTHUSER)                                   @14\n         DC    C'4',AL1(AUTHUSER)                                   @14\n         DC    C'6',AL1(AUTHUSER)                                   @14\nSVC_END  EQU   *                                                    @14\n\n\n.JRH99A  ANOP\n*                                                                   @14\n         TITLE 'SVCUPDTE - PARS000 - parse input parameters'        @14\n*=================================================================* @14\n*                                                                 * @14\n*        P H A S E  1  parsing                                    * @14\n*                                                                 * @14\n* This routine is responsible for parsing the input parameter     * @14\n* string. It will detect invalid parameters & syntax and return   * @14\n* to the caller after issuing an appropriate WTO and setting a    * @14\n* corresponding return code for that caller.                      * @14\n*                                                                 * @14\n* This routine is responsible for setting the following flags for * @14\n* the caller:                                                     * @14\n*                                                                 * @14\n* Parse_flags.Parse_LIST    for LIST request                      * @14\n* Parse_flags.Parse_INSTALL for INSTALL request                   * @14\n*                                                                 * @14\n* This routine is responsible for setting the following fields    * @14\n* for their usage by the caller when an INSTALL request has been  * @14\n* detected:                                                       * @14\n*                                                                 * @14\n* ______________                                                  * @14\n*                                                                 * @14\n*                                                                 * @14\n* %Need SVC#, ESR#, set RNAME (for ENQueue processing)            * @14\n* %Need LMOD                                                      * @14\n* %Need LOCKS byte in same form as SVC table entry                * @14\n* %Need ATTRibutes byte in same form as SVC table entry           * @14\n* %Need _________________________________________________         * @14\n*                                                                 * @14\n* This program supports standard SVC & ESR SVC temporary          * @14\n* installations as described below. The program is designed to    * @14\n* remain in execution for the life of the IPL unless the install- * @14\n* ing batch job is STOPped with a system command or cancelled by  * @14\n* an authorized user or the GOODNITE time has been reached. Upon  * @14\n* termination for any of these reasons the previous content of    * @14\n* involved SVC or ESR SVC slot will be restored to its original   * @14\n* content thereby placing old SVC code back into use. This is a   * @14\n* testing/development vehicle and any permanent installation of   * @14\n* an SVC will require the assistance of the systems programming   * @14\n* staff to code the appropriate IEASVCxx entry, locate the module * @14\n* in the appropriate IEAFIXxx, IEALPAxx or LPALSTxx members and   * @14\n* placement of the module on an appropriate library available     * @14\n* during NIP and post-NIP processing.                             * @14\n*                                                                 * @14\n* Standard SVC install                                            * @14\n* ====================                                            * @14\n* The semantics for the specification of a standard SVC (non-ESR) * @14\n* are as follows:                                                 * @14\n*                                                                 * @14\n* SVC=nnn,LMOD=xxxxxxxx,TYPE=n,ATTR=(attr1,attr2,...,attr3),      * @14\n*  LOCKS=(lock1,lock2,...,lockn),USER=uuuuuuuu,GOODNITE=hhmm      * @14\n*                                                                 * @14\n* ESR SVC install                                                 * @14\n* ===============                                                 * @14\n* The semantics for the specification of an ESR SVC are as        * @14\n* follows:                                                        * @14\n*                                                                 * @14\n* SVC=(aaa,bbb),LMOD=xxxxxxxx,ATTR=(attr1,attr2,...,attr3),       * @14\n*  LOCKS=(lock1,lock2,...,lockn),USER=uuuuuuuu,GOODNITE=hhmm      * @14\n*                                                                 * @14\n* Rules                                                           * @14\n* =====                                                           * @14\n* 01) For a standard SVC install the SVC nnn parameter must be a  * @14\n*     1 to 3 digit zoned decimal number for which a CL(#SNOMISC)  * @14\n*     profile exists in the RACF database in the form:            * @14\n*                                                                 * @14\n*     SVCUPDTE_nnn                                                * @14\n*                                                                 * @14\n*     and the RACF userid associated with the install must        * @14\n*     possess AC(READ) priviledges for this resource.             * @14\n*                                                                 * @14\n* 02) For an ESR SVC install the SVC aaa parameter must be a 3    * @14\n*     digit zoned decimal number equal to one of the following    * @14\n*     values:             e RACF database in the form:            * @14\n*                                                                 * @14\n*     109 for a TYPE 3 or 4 ESR SVC                               * @14\n*     116 for a TYPE 1 ESR SVC                                    * @14\n*     122 for a TYPE 2 ESR SVC                                    * @14\n*     137 for a TYPE 6 ESR SVC                                    * @14\n*                                                                 * @14\n*     When the ESR SVC form is used the bbb parameter must also   * @14\n*     be a 1 to 3 digit zoned decimal number in a range specific  * @14\n*     to the type of SVC as per the following table:              * @14\n*                                                                 * @14\n*     aaa Type Acceptable range for bbb value                     * @14\n*     === ==== ==============================                     * @14\n*     109  3/4 000-255                                            * @14\n*     116   1  000-014                                            * @14\n*     122   2  000-019                                            * @14\n*     137   6  000-007                                            * @14\n*                                                                 * @14\n*     For this type install a CL(#SNOMISC) profile must exist on  * @14\n*     the RACF database in the form:                              * @14\n*                                                                 * @14\n*     SVCUPDTE_aaabbb                                             * @14\n*                                                                 * @14\n*     where both aaa & bbb will be 3 digit zoned decimal numbers  * @14\n*     and the RACF userid associated with the install must        * @14\n*     possess AC(READ) priviledges for this resource.             * @14\n*                                                                 * @14\n* 03) The TYPE parameter and the ESR form of the SVC parameter    * @14\n*     are mutually exclusive. TYPE when supplied must be a single * @14\n*     zoned decimal number with the value of 1, 2, 3, 4 or 6.     * @14\n*                                                                 * @14\n* 04) While traditionally a type 3 SVC has identified a function  * @14\n*     that is contained in a single load module and a type 4 SVC  * @14\n*     has identified a function that loads additional modules     * @14\n*     this program supports only the user supplying a single load * @14\n*     module via the LMOD parameter. If you have a need to        * @14\n*     install a traditional type 4 SVC contained over multiple    * @14\n*     load modules you will need to open a request to have the    * @14\n*     systems programming staff perform the installation for you. * @14\n*                                                                 * @14\n* 05) The lock1,lock2,...,lockn subparameters available are as    * @14\n*     follow and require the listed level of authority to specify * @14\n*     them:                                                       * @14\n*                                                                 * @14\n*      LOCK   Explanation & level of authority required           * @14\n*     ====== ==================================================== * @14\n*     LOCAL  LOCAL lock                                           * @14\n*            Authority: AC(READ) to profile                       * @14\n*     CMS    Cross Memory Services lock                           * @14\n*            Authority: AC(READ) to profile                       * @14\n*     SRM    System Resources Manager lock                        * @14\n*            Authority: RACF global special & AC(READ)            * @14\n*     SALLOC Space ALLOCation lock                                * @14\n*            Authority: RACF global special & AC(READ)            * @14\n*     DISP   Dispatcher lock                                      * @14\n*            Authority: RACF global special & AC(READ)            * @14\n*                                                                 * @14\n*     Notes                                                       * @14\n*     =====                                                       * @14\n*     * A type 1 ESR or non-ESR SVC will default to having the    * @14\n*       LOCAL lock and must not release the LOCAL lock. You do    * @14\n*       not need to specify the LOCAL lock for a type 1 SVC as    * @14\n*       LOCAL lock is automatically obtained for a type 1 SVC.    * @14\n*     * A type 3/4 ESR or non-ESR SVC may not hold any global     * @14\n*       spin locks                                                * @14\n*     * A type 3/4 ESR or non-ESR SVC may only request that the   * @14\n*       LOCAL or LOCAL & CMS locks be held on entry               * @14\n*     * If you specify the CMS lock for SVC types 2, 3 or 4 you   * @14\n*       must also specify the LOCAL lock.                         * @14\n*     * A type 6 ESR or non-ESR SVC may not hold any locks        * @14\n*     * Others? Future?                                           * @14\n*                                                                 * @14\n* 06) The attr1,attr2,...,attrn subparameters available are as    * @14\n*     follow:                                                     * @14\n*                                                                 * @14\n*      ATTR   Explanation                                         * @14\n*     ====== ==================================================== * @14\n*     APF    SVC must be invoked by an APF authorized caller      * @14\n*            Default: NO                                          * @14\n*     AR     SVC can be invoked in Access Register mode           * @14\n*            Default: NO                                          * @14\n*     NPRMPT Non-preemptive SVC                                   * @14\n*            Default: NO                                          * @14\n*     ASF    SVC requires the SVC ASsist Facility                 * @14\n*            Default: NO                                          * @14\n*                                                                 * @14\n*     In the case of the above subparameters the presence of the  * @14\n*     above ATTR string implies the attribute is desired while    * @14\n*     the absence of the ATTR string implies the attribute is not * @14\n*     desired.                                                    * @14\n*                                                                 * @14\n*     The ASF option is not available on z/10 and more modern     * @14\n*     processors. More on this later.                             * @14\n*                                                                 * @14\n*     Users installing ESR or non-ESR SVCs only need AC(READ)     * @14\n*     authority for the covering SVCUPDTE_nnn or SVCUPDTE_aaabbb  * @14\n*     profile to specifiy the above attributes.                   * @14\n*                                                                 * @14\n* 07) The LMOD parameter provides the true name of a load module  * @14\n*     that exists on the SVCLIB library with the required         * @14\n*     attributes of RENT, REUS, REFR, OVLY(NO), SPLIT(NO),        * @14\n*     SCTR(NO) and EXEC. The load module can be any AMODE or      * @14\n*     RMODE. AMODE31 SVC modules will be placed in extended CSA   * @14\n*     or SQA or non-extended CSA or SQA based on the RMODE of the * @14\n*     load module and the requirements of the SVC type. Any       * @14\n*     RMODE64 module will be placed in 31-bit addressable         * @14\n*     storage. For AMODE64 modules the AMODE31 bit will be set in * @14\n*     the SVC table entry and it will be the responsibility of    * @14\n*     SVC to recognize that the caller is in AMODE64 addressing   * @14\n*     mode.                                                       * @14\n*                                                                 * @14\n* 08) The USER parameter provides a mechanism to restrict access  * @14\n*     to the newly installed SVC to a single specific RACF userid * @14\n*     as a filter. This is useful if for instance the SVC number  * @14\n*     is buried in multiple locations and a developer needs to    * @14\n*     test new SVC code without impacting other users of the same * @14\n*     SVC number. If the USER parameter filter is supplied and    * @14\n*     userid associated with the SVC call matches this parameter  * @14\n*     the new SVC code will be invoked. Any other user of the SVC * @14\n*     will be passed through to the old SVC code.                 * @14\n*                                                                 * @14\n* 09) The GOODNITE parameter specifies a future time on the same  * @14\n*     day of execution when the new SVC code should be automati-  * @14\n*     cally deinstalled and the SVCUPDTE program exiting.         * @14\n*                                                                 * @14\n*=================================================================* @14\nPARS000  DS    0H                                                   @14\n         STM   R14,R12,PARSSAVE+12     Save caller's GPRs           @14\n         L     R2,@INPARMS         R2 -> parmlen + parmlist         @14\n         CLC   =X'0000',0(R2)      Is there a parameter list ?      @14\n* Could default to list here <FDIR>                                 @14\n         JNE   PARS010             ...jif so, else handle here      @14\n*                                                                   @14\n*        No input parameters to parse - terminating error           @14\n*                                                                   @14\n         $RWTO MSG001A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM1        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*                                                                   @14\n*        Check for excessive paramater string length                @14\n*                                                                   @14\nPARS010  DS    0H                                                   @14\n         LH    R3,0(R2)            Get length of parameters         @14\n         CHI   R3,100              Greater than target work fields  @14\n         JNH   PARS020             ...jif not                       @14\n*                                                                   @14\n*        Excessive parameter length                                 @14\n*                                                                   @14\n         $RWTO MSG002A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM2        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*                                                                   @14\n*        Make copies of input parameters for our use & debugging    @14\n*                                                                   @14\nPARS020  DS    0H                                                   @14\n         BCTR  R3,0                Make it an executable length     @14\n         STH   R3,Input_parmlen    Save it as an executable length  @14\n         LA    R4,2(R2)            R4 -> parameter list string      @14\n*                                                                   @14\n* Copy the string to our work area for debugging and another copy   @14\n* we can work with.                                                 @14\n*                                                                   @14\n         LARL  R1,CPYIPRMS         R1 -> EX instruction             @14\n         LA    R14,Copied_input_parms R14 -> traget copy area       @14\n         EX    R3,0(R1)            Make original copy of parameters @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nCPYIPRMS MVC   0(*-*,R14),0(R4)    \"Original\" copy area             @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         LARL  R1,CPYIPRMS         R1 -> EX instruction             @14\n         LA    R14,Work_input_parms R14 -> target copy area         @14\n         EX    R3,0(R1)            Make original copy of parameters @14\n*                                                                   @14\n*        Work with work copy of the input parameter string &        @14\n*        upper case the string                                      @14\n*                                                                   @14\n*       Note: Registers used & in effect are:                       @14\n*                                                                   @14\n*        R3  = executable length of input parameter string          @14\n*        R7 -> Work copy of the parameter string                    @14\n*                                                                   @14\n         LA    R7,Work_input_parms R7 -> work copy of parameters    @14\n*                                                                   @14\n*        See if the input string contains invalid characters,...    @14\n*        i.e. characters other than alphanumeric, national ($,#,@), @14\n*        or characters other than alphanumeric, national ($,#,@),   @14\n*        or special (, and $). These are the only ones currently    @14\n*        supported. The left and right parentheses are supported    @14\n*        in this implementation.                                    @14\n*                                                                   @14\n         SLR   R2,R2               Clear TRT work register          @14\n         LARL  R4,TRTPARM1         Get translate table address      @14\n         EX    R3,TRTIPRMS         <execute above instruction>      @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nTRTIPRMS TRT   0(*-*,R7),0(R4)     Test working copy of string      @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         LTR   R2,R2               Non-zero function byte found ?   @14\n         JZ    PARS030             ...jif not, else issue message   @14\n*                                                                   @14\n*        Unsupported characters found in input parameters           @14\n*                                                                   @14\n         $RWTO MSG003A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM3        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*                                                                   @14\n*        All characters provided in the input string were           @14\n*        acceptable. We now need to translate to upper case while   @14\n*        preserving; 1) national characters, 2) assignment          @14\n*        character (=), 3) field separator character (comma) and    @14\n*        4) subparameter list start & finish characters (left &     @14\n*        right parentheses).                                        @14\n*                                                                   @14\nPARS030  DS    0H                                                   @14\n         LARL  R4,HEXUPPER         Get conversion table address     @14\n         EX    R3,UPIPRMS           to upper case                   @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nUPIPRMS  TR    0(*-*,R7),0(R4)     Translate working copy of string @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n*        We now have an upper case parameter string we can finally  @14\n*        parse the parameter list string                            @14\n*                                                                   @14\n*        Valid parameter string options are:                        @14\n*                                                                   @14\n*        SVC=nnn or SVC=(aaa,bbb) - required for install            @14\n*        LMOD=xxxxxxxx            - required for install            @14\n*        ATTR=(a1,a2,...an)       - optional                        @14\n*        LOCKS=(l1,l2,...ln)      - optional                        @14\n*        GOODNITE=hhmm            - optional                        @14\n*        USER=uuuuuuuu            - optional                        @14\n*        TYPE=n                   - required if ESR form not used   @14\n*                                                                   @14\n* R7 -> upper cased working copy of the input parameter string      @14\n* R3  = executable length of the parameter string                   @14\n*                                                                   @14\n* If length was 4 then check for LIST request (early check)         @14\n*                                                                   @14\n         CHI   R3,3                Length = 4 bytes ?               @14\n         JNE   PARS040             ...if not, continue parse        @14\n         CLC   =CL4'LIST',0(R7)    Was it the LIST option ?         @14\n         JNE   PARS040             ...jif not, continue parse       @14\n         OI    Parse_flags,Parse_LIST Set LIST as requested         @14\n         J     PARSX               Just MLT for now                 @14\n\n*        AGO   .JH0831A\n*                                                                   @14\n*        At this point:                                             @14\n*                                                                   @14\n*        R3  = executable length of input parameter string          @14\n*        R7 -> Work copy of the parameter string                    @14\n*                                                                   @14\n*        We now need to call IKJTSOEV to establish a TSO/E          @14\n*        environment in this program's address space. IKJTSOEV uses @14\n*        the following parameters:                                  @14\n*                                                                   @14\n*        PARM1 is reserved                                          @14\n*        PARM2 is a fullword that will contain the return code on   @14\n*              return from IKJTSOEV                                 @14\n*        PARM3 is a fullword that will contain the reason code on   @14\n*              return from IKJTSOEV                                 @14\n*        PARM4 is a fullword that will contain the abend code if an @14\n*              abend occurs during IKJTSOEV environment service     @14\n*              processing                                           @14\n*        PARM5 is a fullword that will contain the address of the   @14\n*              CPPL                                                 @14\n*                                                                   @14\nPARS040  DS    0H                                                   @14\n         XC    PARM1,PARM1\n         LA    R14,PARM1\n         ST    R14,PLIST+0\n         LA    R14,PARM2\n         ST    R14,PLIST+4\n         LA    R14,PARM3\n         ST    R14,PLIST+8\n         LA    R14,PARM4\n         ST    R14,PLIST+12\n         LA    R14,PARM5\n         ST    R14,PLIST+16\n\n\n\n\n         AGO   .JH0831C\n         LA    R14,PLIST+0         <reserved>                       @14\n         LA    R15,PLIST+4         @ return code                    @14\n         LA    R0,PLIST+8          @ reason code                    @14\n         LA    R1,PLIST+12         abend code                       @14\n         LA    R2,PLIST+16         @ of CPPL                        @14\n         STM   R14,R2,PLIST                                         @14\n.JH0831C ANOP\n         OI    PLIST+16,X'80'      Flag end of PARAMs               @14\n         LARL  R2,PARS041          Put error routine @ in GPR2      @14\n         LA    R1,PLIST                                             @14\n         LINK  EP=IKJTSOEV,                                         @14X\n               ERRET=((2)),                                         @14X\n               SF=(E,PLIST+20)                                      @14\n         L     R2,PARM2            Get return code parameter        @14\n         LTR   R2,R2               Any problems ?\n         JZ    PARS043             ...jif not\n         J     PARS042             otherwise report\n*                                                                   @14\n*        Error occurred during IKJTSOEF processing - report it      @14\n*        ERRET driven\n*                                                                   @14\nPARS041  DS    0H                                                   @14\n         $RWTO MSG102E,WRITE=YES                                    @14\n         LHI   R15,BADERRET        Set return code                  @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*                                                                   @14\n*        Error occurred during IKJTSOEF processing - report it      @14\n*        -Return code non-zero                                      @14\n*                                                                   @14\nPARS042  DS    0H                                                   @14\n         $RWTO MSG109E,WRITE=NO                                     @14\n* Install PLIST+4 value                                             @14\n         LA    R14,PLIST+4         R14 -> area to be converted      @14\n         LA    R15,MSG109EA        R15 -> display area              @14\n         UNPK  0(9,R15),0(5,R14)   unpack into display area         @14\n         MVZ   0(8,R15),=XL17'00'  move zone to display area        @14\n         TR    0(8,R15),=C'0123456789ABCDEF' translate display area @14\n         MVI   8(R15),C' '         overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,BADTSOEV        Set return code                  @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*                                                                   @14\n*        Set up for IKJPARS usage - muck up command buffer          @14\n*                                                                   @14\n*        Note:                                                      @14\n*        =====                                                      @14\n*        1) PLIST+16 contains @ CPPL                                @14\n*        2) R7 -> upper cased working copy of the input parameter   @14\n*                 string                                            @14\n*        3) R3  = executable length of the parameter string         @14\n*                                                                   @14\n* R7 -> upper cased working copy of the input parameter string      @14\n* R3  = executable length of the parameter string                   @14\n*                                                                   @14\nPARS043  DS    0H\n*        L     R2,PLIST+16         R2 -> CPPL\n         L     R2,PARM5            R2 -> CPPL\n         LR    R9,R2               <temp - debug>\n         XC    PLIST(32),PLIST\n         USING CPPL,R2\n         MVC   UPT,CPPLUPT         A(UPT) to IKJPARS plist\n         MVC   ECT,CPPLECT         A(ECT) to IKJPARS plist\n         DROP   R2\n         LA    R1,DWSECB\n         ST    R1,ECB              A(ECB) to IKJPARS plist\n         L     R1,=A(SVCCPL)\n         ST    R1,PCL              A(PCL) to IKJPARS plist\n         LA    R1,DWSANS\n         ST    R1,ANS              A(ANS) to IKJPARS plist\n*\n*        Muck up a CBUF area for IKJPARS invocation\n*\n*        1) Need to update CPPLCBUF with alternative command buffer\n*\n         LR    R2,R3               Copy executable string length\n         AHI   R2,5                Add 5 bytes\n         STH   R2,BUFLEN           Save length in CBUF\n         LA    R1,BUFLEN\n         ST    R1,CBUF\n         LA    R1,PLIST\n         BASR  R10,0               Macro internal addressability\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n         CALLTSSR EP=IKJPARS,MF=(E,(1))\n         DROP  R10             Drop internal macro addressability\n*\n*        Was IKJPARS successful ?\n*\n         LTR   R15,R15             Good parse ?\n         JZ    PARS1000            ...jif so\n*\n*        IKJPARS failed - report return code\n*\n         ST    R15,DWD             Save IKJPARS return code\n         $RWTO MSG032A,WRITE=NO\n         LA    R14,DWD             R14 -> source area to convert\n         LA    R15,MSG032AA        R15 -> target display area\n         UNPK  0(9,R15),0(5,R14)   Unpack\n         MVZ   0(8,R15),=XL17'00'  Move zoned\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate\n         MVI   8(R15),C' '         Overlay clobbered byte\n         $RWTO WTOD,WRITE=NO\n         LHI   R15,BADPARSE        Set return code                  @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*=================================================================* @14\n*                                                                 * @14\n*        P H A S E  2  parsing (set internal flags)               * @14\n*                                                                 * @14\n* Logic here sets internal flags based upon elements set in the   * @14\n* PDL structure returned by IKJPARS. The logical combinations of  * @14\n* the provided elements will be checked in phase 3 of parse       * @14\n* processing.                                                     * @14\n*                                                                 * @14\n*=================================================================* @14\nPARS1000 DS    0H\n*        WTO   'Phase 2 of parse entered'                           @14\n*\n         CLC   DWSANS,=XL4'FF000000'   Error in parse ?\n         JNE   PARS1010            ...jif not\n*\n*        Parse error has occurred\n*\n         $RWTO MSG033A,WRITE=YES\n         $RWTO MSG035A,WRITE=YES\n         LHI   R15,BADPARSE        Set return code                  @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*\n*        See if LMOD was presented - it is required\n*\nPARS1010 DS    0H\n         L     R9,DWSANS           R9 -> PDL\n         USING DSVCCPL,R9          Obtain PDL addressability\n         CLC   MMODKW(2),=H'1'     Was LMOD supplied ?\n         JE    PARS1020            ...jif so\n*\n*        Required LMOD parameter missing\n*\n         $RWTO MSG034A,WRITE=YES\n         LHI   R15,BADPARSE        Set return code                  @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*\n*        Validate length of LMOD parameter\n*\nPARS1020 DS    0H\n*        WTO   'LMOD keyword detected'\n*\n         L     R14,MMOD            Load @ of LMOD subfield\n         XR    R15,R15             Clear work register\n         ICM   R15,B'0011',MMOD+4  Place subfield length in R15\n         BCTR  R15,0               Decrement for execute\n         LA    R10,LMOD            R10 -> target capture field\n         EX    R15,CAPKW           Capture field value\nLTORG_AREA LOCTR ,                                                  @14\nCAPKW    MVC   0(*-*,R10),0(R14)   Capture keyword field            @14\nSVCUPDTE LOCTR ,                                                    @14\n*\n*        Set LMOD available flag\n*\n         OI    PKW_used,PKW_LMOD   Indicate LMOD keyword used\n*\n*        See if USER was presented - it is optional\n*\n         CLC   MUSRKW(2),=H'1'     Was USER supplied ?\n         JNE   PARS1030            ...jif not, it is optional\n*\n*        USER keyword was supplied\n*\n*        WTO   'USER keyword detected'\n*\n         L     R14,MUSR            Load @ of USER subfield\n         XR    R15,R15             Clear work register\n         ICM   R15,B'0011',MUSR+4  Place subfield length in R15\n         BCTR  R15,0               Decrement for execute\n         LA    R10,USERID          R10 -> target capture field\n         EX    R15,CAPKW           Capture field value\n*\n*        Set USER available flag\n*\n         OI    PKW_used,PKW_USER   Indicate USER keyword used\n*\n*        See if TYPE was presented - it can be optional\n*\nPARS1030 DS    0H\n         CLC   MTYPKW(2),=H'1'     Was TYPE supplied ?\n         JNE   PARS1040            ...jif not, it can be optional\n*\n*        TYPE keyword was supplied\n*\n*        WTO   'TYPE keyword detected'\n*\n         L     R14,MTYP            Load @ of TYPE subfield\n         XR    R15,R15             Clear work register\n         ICM   R15,B'0011',MTYP+4  Place subfield length in R15\n         BCTR  R15,0               Decrement for execute\n         LA    R10,TYPE            R10 -> target capture field\n         EX    R15,CAPKW           Capture field value\n*\n*        Set TYPE available flag\n*\n         OI    PKW_used,PKW_TYPE   Indicate TYPE keyword used\n*\n*        See if GOODNITE was presented - it is optional\n*\nPARS1040 DS    0H\n         CLC   MGDNKW(2),=H'1'     Was GOODNITE supplied ?\n         JNE   PARS1050            ...jif not, it is optional\n*\n*        GOODNITE keyword was supplied\n*\n* Note: Capture this in SHUTDOWN field right justified\n*\n*        WTO   'GOODNITE keyword detected'\n*\n*        Right justify the GOODNITE parameter in the SHUTDOWN field @14\n*\n         MVI   SHUTDOWN,X'F0'      Ripple SVC # to\n         MVC   SHUTDOWN+1(L'SHUTDOWN-1),SHUTDOWN zeroes\n         L     R14,MGDN            Load @ of GOODNITE subfield\n         XR    R15,R15             Clear work register\n         ICM   R15,B'0011',MGDN+4  Place subfield length in R15\n         LHI   R7,4                Set maximum length in R7\n         SR    R7,R15              Get offset in R7\n         BCTR  R15,0               Decrement for execute\n         LA    R10,SHUTDOWN        R10 -> target capture field\n         AR    R10,R7              Calculate offset\n         EX    R15,CAPKW           Capture field value\n*\n*        Set GOODNITE available flag\n*\n         OI    PKW_used,PKW_GOODNITE Indicate GOODNITE was used\n*\n*        See if LOCKS was presented - it is optional\n*\nPARS1050 DS    0H\n         CLC   MLCKKW(2),=H'1'     Was LOCKS supplied ?\n         JNE   PARS1100            ...jif not, it is optional\n*\n*        LOCKS keyword was supplied\n*\n*        WTO   'LOCKS keyword detected'\n         OI    PKW_used,PKW_LOCKS  Set flag that LOCKS was present\n*\n*        See if LOCAL lock requested\n*\n         CLC   MLOCAL(2),=H'1'     Was LOCAL lock requested ?\n         JNE   PARS1060            ...jif not\n*\n*        LOCAL lock was requested\n*\n*        WTO   'LOCKS=(LOCAL) detected'\n         OI    LOCKS_FLAGS,LOCKS_LOCAL Set flag\n*\n*        See if CMS lock requested\n*\nPARS1060 DS    0H\n         CLC   MCMS(2),=H'1'       Was CMS lock requested ?\n         JNE   PARS1070            ...jif not\n*\n*        CMS lock was requested\n*\n*        WTO   'LOCKS=(CMS) detected'\n         OI    LOCKS_FLAGS,LOCKS_CMS   Set flag\n*\n*        See if SRM lock requested\n*\nPARS1070 DS    0H\n         CLC   MSRM(2),=H'1'       Was SRM lock requested ?\n         JNE   PARS1080            ...jif not\n*\n*        SRM lock was requested\n*\n*        WTO   'LOCKS=(SRM) detected'\n         OI    LOCKS_FLAGS,LOCKS_SRM   Set flag\n*\n*        See if SALLOC lock requested\n*\nPARS1080 DS    0H\n         CLC   MSALLOC(2),=H'1'    Was SALLOC lock requested ?\n         JNE   PARS1090            ...jif not\n*\n*        SALLOC lock was requested\n*\n*        WTO   'LOCKS=(SALLOC) detected'\n         OI    LOCKS_FLAGS,LOCKS_SALLOC Set flag\n*\n*        See if DISP lock requested\n*\nPARS1090 DS    0H\n         CLC   MDISP(2),=H'1'      Was DISP lock requested ?\n         JNE   PARS1100            ...jif not\n*\n*        DISP lock was requested\n*\n*        WTO   'LOCKS=(DISP) detected'\n         OI    LOCKS_FLAGS,LOCKS_DISP   Set flag\n*\n*        See if ATTR keyword was presented - it is optional\n*\nPARS1100 DS    0H\n         CLC   MATRKW(2),=H'1'     Was ATTR keyword supplied ?\n         JNE   PARS1200            ...jif not, it is optional\n*\n*        ATTR keyword was supplied\n*\n*        WTO   'ATTR keyword detected'\n         OI    PKW_used,PKW_ATTR   Set flag that ATTR was present\n*\n*        See if NPRMT requested\n*\n         CLC   MNPRMT(2),=H'1'     Was NPRMT requested ?\n         JNE   PARS1110            ...jif not\n*\n*        NPRMT was requested\n*\n*        WTO   'ATTR=(NPRMT) detected'\n         OI    ATTR_FLAGS,ATTR_NPRMT  Set flag\n*\n*        See if APF requested\n*\nPARS1110 DS    0H\n         CLC   MAPF(2),=H'1'       Was APF requested ?\n         JNE   PARS1120            ...jif not\n*\n*        APF was requested\n*\n*        WTO   'ATTR=(APF) detected'\n         OI    ATTR_FLAGS,ATTR_APF    Set flag\n*\n*        See if ASF requested\n*\nPARS1120 DS    0H\n         CLC   MASF(2),=H'1'       Was ASF requested ?\n         JNE   PARS1130            ...jif not\n*\n*        ASF was requested\n*\n*        WTO   'ATTR=(ASF) detected'\n         OI    ATTR_FLAGS,ATTR_ASF    Set flag\n*\n*        See if AR requested\n*\nPARS1130 DS    0H\n         CLC   MAR(2),=H'1'        Was AR requested ?\n         JNE   PARS1200            ...jif not\n*\n*        AR was requested\n*\n*        WTO   'ATTR=(AR) detected'\n         OI    ATTR_FLAGS,ATTR_AR    Set flag\n*\n*        See if SVC keyword supplied - it is required\n*\nPARS1200 DS    0H\n         CLC   MSVCKW(2),=H'1'     Was SVC keyword supplied ?\n         JNE   PARS1210            ...jif not, it is optional\n*\n*        SVC keyword was supplied\n*\n*        WTO   'SVC keyword detected'\n         OI    PKW_used,PKW_SVC    Set flag that SVC was present\n         J     PARS1220             and skip error return\n*\n*        Required SVC # was missing\n*\nPARS1210 DS    0H\n         $RWTO MSG037A,WRITE=YES\n         LHI   R15,NOSVC#          Set return code                  @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*\n*        Capture SVC number\n*\n* This code uses the following algorithm to right justify the\n* SVC number in the target field:\n*\n* Maximum length of field minus length seen in PDL equals offset\n* in target field to receive SVC number from the PDL. Examples\n* follow:\n*\n* 1) PDL returns length of 2 in PDL whose maximum length is 3;\n*\n*    3 - 2 = 1\n*\n*    Thus EXecuted MVC instruction must have 1 added to the\n*    location of the target field to right justify the value for\n*    a PACK and convert to binary operation.\n*\n* 2) PDL returns length of 1 in PDL whose maximum length is 3;\n*\n*    3 - 1 = 2\n*\n*    Thus EXecuted MVC instruction must have 2 added to the\n*    location of the target field to right justify the value for\n*    a PACK and convert to binary operation.\n*\n* 3) PDL returns length of 3 in PDL whose maximum length is 3;\n*\n*    3 - 3 = 0\n*\n*    Thus EXecuted MVC instruction must have 0 added to the\n*    location of the target field to right justify the value for\n*    a PACK and convert to binary operation.\n*\nPARS1220 DS    0H\n         MVI   SVCNO,X'F0'         Ripple SVC # to\n         MVC   SVCNO+1(L'SVCNO-1),SVCNO zeroes\n         L     R14,MSVC            Load @ of SVC# subfield\n         XR    R15,R15             Clear work register\n         ICM   R15,B'0011',MSVC+4  Place subfield length in R15\n         LHI   R7,3                Set maximum length in R7\n         SR    R7,R15              Get offset in R7\n         BCTR  R15,0               Decrement for execute\n         LA    R10,SVCNO           R10 -> target capture field\n         AR    R10,R7              Calculate offset\n         EX    R15,CAPKW           Capture field value\n*\n*        Pack & convert to binary the SVC number\n*\n* Note: SVCNO will always exist or we wouldn't be here so it is\n*       not flagged\n*\n*        WTO   'SVC number found'\n         PACK  DWD,SVCNO           Pack SVC number\n         CVB   R1,DWD               Make it binary\n         STC   R1,SVC#               and save for later use\n*\n* Make sure SVC# is not > 255\n*\n         C     R1,=F'255'          SVC # > 255 ?\n         JNH   PARS1222            ...jif not, else invalid\n*\n* SVC # not in range 0-255 detected\n*\n         $RWTO MSG041A,WRITE=YES                                    @14\n         LHI   R15,BADSVCN2        Invalid SVC # found\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\n*\n*        See if optional routing code SVC number is present\n*\nPARS1222 DS    0H\n         MVI   ESRSVCNO,X'40'      Ripple ESR SVC # to\n         MVC   ESRSVCNO+1(L'ESRSVCNO-1),ESRSVCNO blanks\n         L     R14,MSVCR           Load @ of ESR SVC routing code\n         LTR   R14,R14             ESR SVC # present ?\n         JZ    PARS2000            ...jif not - go free parse work\n         MVI   ESRSVCNO,X'F0'      Ripple ESR SVC # to\n         MVC   ESRSVCNO+1(L'ESRSVCNO-1),ESRSVCNO zeroes\n         XR    R15,R15             Clear work register\n         ICM   R15,B'0011',MSVCR+4 Place subfield length in R15\n         LHI   R7,3                Set maximum length in R7\n         SR    R7,R15              Get offset in R7\n         BCTR  R15,0               Decrement for execute\n         LA    R10,ESRSVCNO        R10 -> target capture field\n         AR    R10,R7              Calculate offset\n         EX    R15,CAPKW           Capture field value\n*\n*        Pack & convert to binary the ESR SVC number\n*\n*        WTO   'ESR SVC number found'\n         OI    ATTR_FLAGS,ATTR_ESR Indicate ESR SVC request\n         PACK  DWD,ESRSVCNO        Pack ESR SVC number\n         CVB   R1,DWD               Make it binary\n         STC   R1,ESR#               and save for later use\n         ST    R1,ESR#FW              & in a fullword\n*\n*        We're through with TSO/E parse so free its workareas\n*\nPARS2000 DS    0H\n*        WTO   'Freeing parse workareas'\n         BASR  R10,0               Macro internal addressability\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n         IKJRLSA ANS               Release IKJPARS storage\n         DROP  R10              Drop macro expansion addressability\n*=================================================================* @14\n*                                                                 * @14\n*        P H A S E  3  parsing (verify field content)             * @14\n*                                                                 * @14\n* Logic here verifies content of supplied fields as being valid   * @14\n* in combination with other fields supplied. Fields verified here * @14\n* are as followed:                                                * @14\n*                                                                 * @14\n* 1) TYPE was either 1, 2, 3, 4, or 6                             * @14\n* 2) If ESR form was used that the SVC number was 109, 116, 122,  * @14\n*    or 137.                                                      * @14\n* 3) Each of the ESR routing SVC numbers in 2) above have a       * @14\n*    maximum number of possibilities as per the following chart:  * @14\n*                                                                 * @14\n*    SVC#   Maxium value for ESR SVC function code                * @14\n*    ==== ======================================================= * @14\n*     109 255 entries (Type 3/4 ESR SVCs)                         * @14\n*     116  14 entries (Type 1 SVCs)                               * @14\n*     122  19 entries (Type 2 SVCs)                               * @14\n*     137   7 entries (Type 6 SVCs)                               * @14\n*                                                                 * @14\n* 4) Enforce TYPE and ESR form as being mutually exclusive        * @14\n* 5) The the GOODNITE time is in the range of 0001 to 2359        * @14\n* 6) LOCAL lock __________________________                        * @14\n* 7)                                                              * @14\n*                                                                 * @14\n*=================================================================* @14\n*        WTO   'Checking TYPE'\n         TM    PKW_used,PKW_TYPE   Was TYPE supplied ?\n         JNO   PARS2100            ...jif not\n*\n* See if valid TYPE specification\n*\n         MVI   TYPEBIN,X'01'       Assume TYPE=1\n         CLI   TYPE,C'1'           TYPE=1 ?\n         JE    PARS2010            ...jif so\n         MVI   TYPEBIN,X'02'       Assume TYPE=2\n         CLI   TYPE,C'2'           TYPE=2 ?\n         JE    PARS2010            ...jif so\n         MVI   TYPEBIN,X'03'       Assume TYPE=3\n         CLI   TYPE,C'3'           TYPE=3 ?\n         JE    PARS2010            ...jif so\n         MVI   TYPEBIN,X'04'       Assume TYPE=4\n         CLI   TYPE,C'4'           TYPE=4 ?\n         JE    PARS2010            ...jif so\n         MVI   TYPEBIN,X'06'       Assume TYPE=6\n         CLI   TYPE,C'6'           TYPE=6 ?\n         JE    PARS2010            ...jif so\n*\n*        Issue message regarding invalid SVC TYPE specification\n*\n         $RWTO MSG019A,WRITE=YES\n         $RWTO MSG027A,WRITE=YES\n         LHI   R15,BADPARM4        Invalid parameter found\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\n*\n* TYPE supplied valid, make sure ESR# not supplied\n*\nPARS2010 DS    0H\n         TM    ATTR_FLAGS,ATTR_ESR Was ESR SVC # supplied ?\n         JNO   PARS2020            ...jif not\n*\n* TYPE & SVC ESR # are mutually exclusive\n*\n         $RWTO MSG038A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*                                                                   @14\n* TYPE was supplied w/o ESR# so make sure SVC number is not a       @14\n* routing SVC (109, 116, 122, or 137.                               @14\n*                                                                   @14\nPARS2020 DS    0H                                                   @14\n*        WTO   'Checking for routing SVC w/ TYPE supplied'          @14\n         CLI   SVC#,109            TYPE 3/4 routing ?               @14\n         JE    PARS2021            ...jif so, illegal               @14\n         CLI   SVC#,116            TYPE 1 routing ?                 @14\n         JE    PARS2021            ...jif so, illegal               @14\n         CLI   SVC#,122            TYPE 2 routing ?                 @14\n         JE    PARS2021            ...jif so, illegal               @14\n         CLI   SVC#,137            TYPE 6 routing ?                 @14\n         JE    PARS2021            ...jif so, illegal               @14\n         J     PARS2022            Possibly valid request           @14\n*                                                                   @14\n* Routing SVC # supplied with TYPE - not valid                      @14\n*                                                                   @14\nPARS2021 DS    0H                                                   @14\n         $RWTO MSG039A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*                                                                   @14\n* We have a valid SVC w/ TYPE request - check for SVC# > 200        @14\n*                                                                   @14\nPARS2022 DS    0H                                                   @14\n*        WTO   'Looks like valid TYPE w/ SVC w/o routing code'      @14\n         CLI   SVC#,200            Is SVC # > or = 200              @14\n         JNL   PARS2025            ...jif so, continue              @14\n*                                                                   @14\n* Specification of an SVC# of less than 200 requires RACF \"Global   @14\n* Special\" privileges locally.                                      @14\n*                                                                   @14\n         TM    MYFLAGS,SPECIAL     RACF \"global special\" userid ?   @14\n         JO    PARS2025           ...jif so, valid request (so far) @14\n*                                                                   @14\n* SVC # request < 200 requires RACF \"global special\" priviledges    @14\n*                                                                   @14\n         $RWTO MSG040A,WRITE=YES                                    @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*                                                                   @14\n* SVC # >= 200 or RACF \"global special\" w/ SVC# < 200               @14\n*                                                                   @14\nPARS2025 DS    0H                                                   @14\n*        WTO   'PARS2025 label passed - SVC and TYPE are valid'     @14\n         J     PARS2200            Skip ESR function code checks    @14\n*                                                                   @14\n* TYPE was not supplied meaning that a routing SVC # and a valid    @14\n* routing code are required - we check that here. This involves a   @14\n* range check based on the SVC# (routing SVC) provided by the user. @14\n*                                                                   @14\n* At this point ESR#FW contains the supplied ESR# in routing code   @14\n* in binary and we need to check the range based on the SVC type    @14\n* which is in the SVC# one byte field                               @14\n*                                                                   @14\nPARS2100 DS    0H                                                   @14\n         L     R2,ESR#FW           Load binary routing code         @14\n*                                                                   @14\n* Check for Router SVC # specification as it requires an ESR        @14\n* function code also be specified                                   @14\n*                                                                   @14\n         CLI   SVC#,109            T3/4 ESR request ?               @14\n         JE    PARS2105            ...jif so, continue              @14\n         CLI   SVC#,116            T1 ESR request ?                 @14\n         JE    PARS2105            ...jif so, continue              @14\n         CLI   SVC#,122            T2 ESR request ?                 @14\n         JE    PARS2105            ...jif so, continue              @14\n         CLI   SVC#,137            T6 ESR request ?                 @14\n         JE    PARS2105            ...jif so, continue              @14\n*                                                                   @14\n*        Use of SVC # that is not part of the ESR requires TYPE be  @14\n*        specified so check that here. TYPEBIN would be non-zero    @14\n*        if TYPE had been specified.                                @14\n*                                                                   @14\n         CLI   TYPEBIN,X'00'       TYPE specified by user ?         @14\n         JNE   PARS2105            ...jif so                        @14\n         $RWTO MSG048A,WRITE=YES                                    @14\n         LHI   R15,BADTYPR         TYPE is required for non-ESR     @14\n         ST    R15,RETCODE         Set to expose retcode to caller  @14\n         J     PARSX                and return to caller            @14\n*                                                                   @14\n* The following code is common for all Router SVC specifications    @14\n* so done once here                                                 @14\n*                                                                   @14\nPARS2105 DS    0H                                                   @14\n         TM    ATTR_FLAGS,ATTR_ESR Was ESR SVC # supplied ?         @14\n         JO    PARS2107            ...jif so                        @14\n         $RWTO MSG047A,WRITE=YES                                    @14\n         LHI   R15,BADPARM4        Invalid parameter found          @14\n         ST    R15,RETCODE         Set to expose retcode to caller  @14\n         J     PARSX                and return to caller            @14\n*\n* Check T3/4 SVC routing code specification\n*\nPARS2107 DS    0H\n         CLI   SVC#,109            T3/4 ESR request ?\n         JNE   PARS2110            ...jif not\n*\n* Make sure ESR routing code in range 0-255\n*\n         C     R2,=F'255'          > 255 routing code for T3/4 ?\n         JNH   PARS2200            ...bif not, routing code is good @14\n*\n* Routing code must be in range 0-255 for T3/4 ESR SVC\n*\n         $RWTO MSG042A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*\n* Check T1 SVC routing code specification\n*\nPARS2110 DS    0H\n         CLI   SVC#,116            T1 ESR request ?\n         JNE   PARS2120            ...jif not\n*\n* Make sure ESR routing code in range 0-14\n*\n         C     R2,=F'14'           > 14 routing code for T1 ?\n         JNH   PARS2200            ...bif not, routing code is good @14\n*\n* Routing code must be in range 0-14 for T1 ESR SVC\n*\n         $RWTO MSG043A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*\n* Check T2 SVC routing code specification\n*\nPARS2120 DS    0H\n         CLI   SVC#,122            T2 ESR request ?\n         JNE   PARS2130            ...jif not\n*\n* Make sure ESR routing code in range 0-19\n*\n         C     R2,=F'19'           > 19 routing code for T2 ?\n         JNH   PARS2200            ...bif not, routing code is good @14\n*\n* Routing code must be in range 0-19 for T2 ESR SVC\n*\n         $RWTO MSG044A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*\n* Check T6 SVC routing code specification\n*\nPARS2130 DS    0H\n         CLI   SVC#,137            T6 ESR request ?\n         JNE   PARS2140            ...jif not\n*\n* Make sure ESR routing code in range 0-7\n*\n         C     R2,=F'7'            > 7 routing code for T6 ?\n         JNH   PARS2200            ...bif not, routing code is good @14\n*\n* Routing code must be in range 0-7 for T6 ESR SVC\n*\n         $RWTO MSG045A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*\n*        Invalid logic intentional abend\n*\nPARS2140 DS    0H\n         $RWTO MSG046A,WRITE=YES\n         ABEND 333,DUMP            Force abend\n*\n*\n*        Check GOODNITE time if supplied\n*\n*\nPARS2200 DS    0H\n*        WTO   'Checking GOODNITE time (hhmm)'\n         TM    PKW_used,PKW_GOODNITE Was GOODNITE supplied ?\n         JNO   PARS2300            ...jif not\n*        WTO   'GOODNITE time (hhmm) was supplied'\n*\n* Handle GOODNITE time - make sure numeric\n*\n         UNPK  DWD,=X'0F'          DWD=F0F0F0F0F0F0F0F0\n         MVN   DWD(4),SHUTDOWN     Move HHMM\n         CLC   DWD(4),SHUTDOWN     hhmm numeric ?\n         JE    PARS2205            ...jif so\n*                                                                   @14\n*        Goodnight time (HHMM) parameter not numeric                @14\n*                                                                   @14\n         $RWTO MSG076E,WRITE=YES   Write the message                @14\n         LHI   R1,BADEOD1          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     PARSX               Go make like trees               @14\n*                                                                   @14\n*        Goodnight time (HHMM) parameter is numeric                 @14\n*                                                                   @14\nPARS2205 DS    0H\n         XC    ENDOFDAY,ENDOFDAY\n         MVC   ENDOFDAY,SHUTDOWN   HHMM -> HHMM0000\n*\n*        Make sure GOODNITE(0000) was not specified\n*\n         CLC   SHUTDOWN,=C'0000'   Illegal value ?\n         JNE   PARS2210\n*\n*        Specified GOODNITE time out of range\n*\nPARS2206 DS    0H\n         $RWTO MSG084E,WRITE=YES   Write the message                @14\n         LHI   R1,BADEOD2          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     PARSX               Go make like trees               @14\n*\n* Verify hh (hours) in range 00-23\n* Pack first 2 bytes and cvb and make sure <= 23 hours\n*\nPARS2210 DS    0H\n         XC    DWD,DWD             Clear doubleword work area\n         PACK  DWD+6(2),SHUTDOWN(2)  PACK 1st 2 bytes (HH)\n         OI    DWD+7,X'0F'         Set + sign in last zone\n         CVB   R1,DWD              Make HH binary\n         C     R1,=F'23'           > 23 (HH) ?\n         JH    PARS2206            ...jif so, HH out of 00-23 range\n*\n* Verify mm (minutes) in range 00-59\n* Pack second 2 bytes and cvb and make sure <= 59 hours\n*\n         XC    DWD,DWD             Clear doubleword work area\n         PACK  DWD+6(2),SHUTDOWN+2(2)  PACK 2nd 2 bytes (MM)\n         OI    DWD+7,X'0F'         Set + sign in last zone\n         CVB   R1,DWD              Make MM binary\n         C     R1,=F'59'           > 59 (MM) ?\n         JH    PARS2206            ...jif so, HH out of 00-23 range\n*\n* To be here the GOODNITE (HHMM) time was in the range of 0001-2359\n*\n*        WTO   'GOODNITE (HHMM) time was good'\n*        J     PARSX\n*\n* Make sure GOODNITE time is later than the current time\n*\n* Note: HOURS for length of 4 bytes contains zoned decimal current\n*       execution time in the form of HHMM...same format as the\n*       field named SHUTDOWN. We just need to make both these\n*       fields binary and compare them to make sure the SHUTDOWN\n*       HHMM value is greater than the HOURS+MINUTES HHMM value.\n*\n         XC    DWD,DWD             Clear doubleword work area\n         PACK  DWD+4(4),SHUTDOWN   PACK HHMM GOODNITE value\n         OI    DWD+7,X'0F'         Set + sign in last zone\n         CVB   R1,DWD              Make GOODNITE binary\n         XC    DWD,DWD             Clear doubleword work area\n         PACK  DWD+4(4),HOURS(4)   PACK HHMM HOURS+MINUTES value\n         OI    DWD+7,X'0F'         Set + sign in last zone\n         CVB   R2,DWD              Make current time binary\n         CR    R2,R1               Current HHMM < GOODNITE HHMM ?\n         JNH   PARS2300            ...jif so, HHMM is in the future\n*                                                                   @14\n*        Specified Goodnite time earlier than current time          @14\n*                                                                   @14\n         $RWTO MSG088E,WRITE=YES   Write the message                @14\n         LHI   R1,BADEOD3          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     PARSX               Go make like trees               @14\n*\n* Since there's really nothing to check here for the ATTR\n* specification we'll just check the LOCK combinations that are\n* possible based upon the TYPE SVC being installed.\n*\n*        Set TYPE field from ESR# if not supplied\n*\n* If TYPE was not supplied we set it here based on the ESR SVC      @14\n* number for purposes of performing the above checks. The mutually  @14\n* exclusive test of TYPE with and ESR SVC number has already been   @14\n* performed by this point so this won't get us in trouble.          @14\n*                                                                   @14\nPARS2300 DS    0H\n         TM    PKW_used,PKW_TYPE   Was TYPE supplied ?              @14\n         JO    PARS2305            ...jif so, skip TYPE assignment  @14\n         CLI   SVC#,109            T3/4 ESR request ?               @14\n         JNE   PARS2300A           ...jif not, continue             @14\n         MVI   TYPE,C'3'           Set type 3/4                     @14\n         J     PARS2305            Go to resume point               @14\nPARS2300A DS   0H                                                   @14\n         CLI   SVC#,116            T1 ESR request ?                 @14\n         JNE   PARS2300B           ...jif not, continue             @14\n         MVI   TYPE,C'1'           Set type 1                       @14\n         J     PARS2305            Go to resume point               @14\nPARS2300B DS   0H                                                   @14\n         CLI   SVC#,122            T2 ESR request ?                 @14\n         JNE   PARS2300C           ...jif not, continue             @14\n         MVI   TYPE,C'2'           Set type 2                       @14\n         J     PARS2305            Go to resume point               @14\nPARS2300C DS   0H                                                   @14\n         CLI   SVC#,137            T1 ESR request ?                 @14\n         JNE   PARS2300D           ...jif not, continue             @14\n         MVI   TYPE,C'1'           Set type 1                       @14\n         J     PARS2305            Go to resume point               @14\n*                                                                   @14\n*        Logic error in TYPE assignment - please report             @14\n*                                                                   @14\nPARS2300D DS   0H                                                   @14\n         $RWTO MSG050S,WRITE=YES                                    @14\n         ABEND 334,DUMP                                             @14\n*                                                                   @14\n* Rules for LOCKs by type SVC are as follows:                       @14\n* ===========================================                       @14\n* 1) Type 1 SVC routines always receive control with the LOCAL lock @14\n*    held and must not release the LOCAL lock. Additional locks may @14\n*    be requested prior to entry via the IEASVCxx member of         @14\n*    SYS1.PARMLIB or the SVCUPDTE macro or may be requested         @14\n*    dynamically within the SVC routine. Unless specific locks are  @14\n*    requested by the user we will not provide any locks for a      @14\n*    type 1 standard or type 1 ESR routine.                         @14\n* 2) Types 2, 3, and 4 may also request locks via the IEASVCxx      @14\n*    member of SYS1.PARMLIB or the SVCUPDTE macro or may obtain     @14\n*    them dynamically within the SVC routine. Again unless specific @14\n*    locks are requested by the user we will not provide any locks  @14\n*    for a type 2, 3, or 4 SVC.                                     @14\n* 3) Types 1 & 2 may request that any locks be held on entry.       @14\n* 4) Types 3 & 4 may only request that the LOCAL or LOCAL and CMS   @14\n*    locks be held.                                                 @14\n* 5) If no locks are held or obtained, or only suspend locks (CMS   @14\n*    and LOCAL) are held or obtained, the SVC routine executes in   @14\n*    supervisor state key zero, enabled mode.                       @14\n* 6) If the CPU lock is held or obtained, the SVC routine executes  @14\n*    in supervisor state, key zero, disabled mode. No SVCs may be   @14\n*    issued.                                                        @14\n* 7) SVCs may not take disabled page faults. Therefore, if the CPU  @14\n*    lock is held, the SVC routines must ensure that any referenced @14\n*    pages are fixed. For types 3 and 4, all pages containing code  @14\n*    must be fixed.                                                 @14\n* 8) An FRR may be defind for any SVC routine that holds or obtains @14\n*    locks to provide for abnormal termination (See the manual)     @14\n* 9) Type 6 may not request any locks.                              @14\n* 10) We restrict SRM, SALLOC and DISP locks to individuals that    @14\n*    posess RACF Global Special priviledges.                        @14\n*                                                                   @14\nPARS2305 DS    0H                                                   @14\n         TM    PKW_used,PKW_LOCKS  Was LOCKS supplied ?             @14\n         JNO   PARS2400            ...jif not, assign by TYPE       @14\n*        WTO   'Checking restricted LOCKS subparameters'            @14\n*                                                                   @14\n*        LOCKS keyword was supplied and we need to check for        @14\n*        valid locks requested by SVC TYPE. LOCKS available are     @14\n*                                                                   @14\n*        LOCAL                                                      @14\n*        CMS                                                        @14\n*        SRM    <- RACF Global Special required                     @14\n*        SALLOC <- RACF Global Special required                     @14\n*        DISP   <- RACF Global Special required                     @14\n*                                                                   @14\n         TM    LOCKS_FLAGS,LOCKS_SRM   SRM lock requested ?         @14\n         JO    PARS2310            Go check for Global Special      @14\n         TM    LOCKS_FLAGS,LOCKS_SALLOC SALLOC lock requested ?     @14\n         JO    PARS2310            Go check for Global Special      @14\n         TM    LOCKS_FLAGS,LOCKS_DISP  DISP lock requested ?        @14\n         JO    PARS2310            Go check for Global Special      @14\n         J     PARS2320            Go to resume point               @14\n*                                                                   @14\n*        Check for RACF Global Special authority                    @14\n*                                                                   @14\n*        Note: SRM, SALLOC & DISP locks require RACF Global         @14\n*              Special authority                                    @14\n*                                                                   @14\nPARS2310 DS    0H                                                   @14\n         TM    MYFLAGS,SPECIAL     RACF \"global special\" userid ?   @14\n         JO    PARS2320            ...jif so, passed                @14\n         $RWTO MSG049A,WRITE=YES                                    @14\n         LHI   R15,BADLOCKS        Set return code and              @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX               Go MLT                           @14\n*                                                                   @14\n*        Check Type 6 SVC with locks                                @14\n*                                                                   @14\nPARS2320 DS    0H                                                   @14\n         CLI   TYPE,C'6'           Type 6 ?                         @14\n         JNE   PARS2330            ...jif not, go check 3/4         @14\n* Type 6 cannot request locks of any type                           @14\n         $RWTO MSG902I,WRITE=YES                                    @14\n         LHI   R15,BADLOCKS        Set return code and              @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX               Go MLT                           @14\n*\n*        Type 3/4 can only request LOCAL or LOCAL + CMS locks\n*\nPARS2330 DS    0H                                                   @14\n         CLI   TYPE,C'3'           Type 4 ?                         @14\n         JE    PARS2340            ...jif so, do lock checks        @14\n         CLI   TYPE,C'4'           Type 4 ?                         @14\n         JE    PARS2340            ...jif so, do lock checks        @14\n         J     PARS2400            else we don't care               @14\nPARS2340 DS    0H                                                   @14\n         TM    LOCKS_FLAGS,X'FF'-(LOCKS_LOCAL+LOCKS_CMS)            @14\n         JZ    PARS2350            ...jif only LOCL and/or CMS      @14\n* Type 3/4 can only request LOCAL or LOCAL + CMS                    @14\nPARS2342 DS    0H                                                   @14\n         $RWTO MSG901I,WRITE=YES                                    @14\n         LHI   R15,BADLOCKS        Set return code and              @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX               Go MLT                           @14\n*                                                                   @14\n*        Verify that only LOCAL or LOCAL + CMS was specified        @14\n*                                                                   @14\nPARS2350 DS    0H                                                   @14\n         TM    LOCKS_FLAGS,LOCKS_LOCAL+LOCKS_CMS                    @14\n         JO    PARS2400            ...jif both present              @14\n         TM    LOCKS_FLAGS,LOCKS_LOCAL                              @14\n         JO    PARS2400            ...jif only LOCAL present        @14\n         J     PARS2342            ...else reuse above logic        @14\n*                                                                   @14\n*        LOCKS were not specified so we won't assign any            @14\n*                                                                   @14\nPARS2400 DS    0H                                                   @14\n         J     PARSX\n\n\n\n\n.JH0831A ANOP                                                       @14\n         AGO   .JH0831B                                             @14\n*                                                                   @14\n*        Continue parsing                                           @14\n*                                                                   @14\nPARS040  DS    0H                                                   @14\n         LR    R4,R7               R4 -> beginning of string        @14\n         LR    R6,R7               R6 -> beginning of string        @14\n         AR    R6,R3               R6 -> last character in string   @14\n*                                                                   @14\n*        Make sure minimum length parmlist was supplied for install @14\n*        operation...i.e.:                                          @14\n*                                                                   @14\n*        SVC=n,LMOD=x (executable length of 11)                     @14\n*                                                                   @14\n         CHI   R3,11               Length >= 11 bytes ?             @14\n         JNL   PARS050             ...jif so, continue parse        @14\n*                                                                   @14\n*        Minumum length parameter list not supplied                 @14\n*                                                                   @14\n         $RWTO MSG006A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n*\n*        Load initial parse values & pointers\n*\n*        R4 -> beginning of string\n*        R5 =  residual length of string\n*        R6 =  byte position of last byte in string\n*\nPARS050  DS    0H\n         LA    R4,Work_input_parms R4 -> start of original string\n         LH    R5,Input_parmlen    R5 = executable length of string\n*        LA    R6,1(R6,R5)         R6 -> past last byte of string\n         XC    Parse_flags,Parse_flags initialize flag byte\n*\n*        Look for primary keywords\n*\n* Note: Each routine branched to in the following logic is\n*       responsible for setting R4 to point to the residual\n*       portion of the string to parse and R5 to the residual\n*       length of the string.\n*\n*        R4 -> start of residual string\n*        R5 =  residual length of string\n*\nPARS060  DS    0H\n*        CLC   =CL4'SVC=',0(R4)    SVC=\n*        JE    PARSSVC             ...jif so\n         CLC   =CL5'LMOD=',0(R4)   LMOD=\n         JE    PARSLMOD            ...jif so\n*        CLC   =CL5'ATTR=',0(R4)   ATTR=\n*        JE    PARSATTR            ...jif so\n*        CLC   =CL6'LOCKS=',0(R4)  LOCKS=\n*        JE    PARSLOCKS           ...jif so\n         CLC   =CL9'GOODNITE=',0(R4) GOODNITE=\n         JE    PARSGOODNITE        ...jif so\n         CLC   =CL5'TYPE=',0(R4)   TYPE=\n         JE    PARSTYPE            ...jif so\n         CLC   =CL5'USER=',0(R4)   USER=\n         JE    PARSUSER            ...jif so\n*\n*        Primary keyword not recognized\n*\n         $RWTO MSG005A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n******************************************************************* @14\n*                                                                 * @14\n*        Parse LMOD= parameter                                    * @14\n*                                                                 * @14\n******************************************************************* @14\nPARSLMOD DS    0H\n*        WTO   'PARSLMOD entered'\n         TM    PKW_used,PKW_LMOD   Has \"LMOD=\" already been seen ?\n         JNO   PARSLMOD_100        ...jif not\n*\n*       Issue message about duplicate primary keyword specification @14\n*\n*       Note: This label is used by several routines (PARSLMOD_010)\n*\nPARSLMOD_010 DS 0H\n         $RWTO MSG007A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\nPARSLMOD_100 DS 0H\n         OI    PKW_used,PKW_LMOD   Set \"LMOD=\" already seen flag\n         S     R5,=F'5'            Decrement length for \"LMOD=\"\n         A     R4,=F'5'            Adjust scan start location\n*\n*        Scan for comma or end of string to harvest\n*\n         CLI   0(R4),C','          \"Null\" \"LMOD=,\" ?\n         JNE   PARSLMOD_110        ...jif not\n*\n*        Issue message about \"Null\" LMOD keyword\n*\n         $RWTO MSG012A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\nPARSLMOD_110 DS 0H\n         XR    R2,R2               Clear accumulator register\n         LR    R7,R4             Preserve LMOD value start position\nPARSLMOD_120 DS 0H\n         CR    R4,R6               Past end of string ?\n         JE    PARSLMOD_130        ...jif so\n         CLI   0(R4),C','          End of value ?\n         JE    PARSLMOD_130        ...jif so\n         LA    R4,1(R4)            Increment string pointer\n         LA    R2,1(R2)            Bump value length\n*\n*        Make sure 8 or less bytes\n*\n         CHI   R2,8                > 8 bytes ?\n         JNH   PARSLMOD_120        ...jif not\n*\n*        Issue message about invalid length LMOD keyword value\n*\n         $RWTO MSG010A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\n*\n*        Capture LMOD value (executable length in R2)\n*\n*        R4 -> delimiter\n*        R7 -> start of value\n*\nPARSLMOD_130 DS 0H\n         CLI   00(R4),C','         Delimiter terminator ?\n         JNE   PARSLMOD_132        ...jif not\n         BCTR  R2,0                otherwise decrement length\nPARSLMOD_132 DS 0H\n         LA    R9,LMOD             R9 -> field to capture\n         EX    R2,CAPKW            Capture field value\nLTORG_AREA LOCTR ,                                                  @14\nCAPKW    MVC   0(*-*,R9),0(R7)     Capture keyword field            @14\nSVCUPDTE LOCTR ,                                                    @14\n         CR    R4,R6               Last byte of string ?\n         JE    PARS1000            Go to phase 2 of parse           @14\n         LA    R4,1(R4)            Bump over delimiter\n         LR    R5,R6               Adjust pointers\n         SR    R5,R4                for next keyword in string\n         J     PARS060               and go process it\n******************************************************************* @14\n*                                                                 * @14\n*        Parse USER=xxxxxxxx parameter                            * @14\n*                                                                 * @14\n******************************************************************* @14\nPARSUSER DS    0H\n*        WTO   'PARSUSER entered'\n         TM    PKW_used,PKW_USER   Has \"USER=\" already been seen ?\n         JNO   PARSUSER_100        ...jif not\n*\n*       Issue message about duplicate primary keyword specification @14\n*\n         J     PARSLMOD_010        ...jif duplicate to common code\nPARSUSER_100 DS 0H\n         OI    PKW_used,PKW_USER   Set \"USER=\" already seen flag\n         S     R5,=F'5'            Decrement length for \"USER=\"\n         A     R4,=F'5'            Adjust scan start location\n*\n*        Scan for comma or end of string to harvest\n*\n         CLI   0(R4),C','          \"Null\" \"USER=,\" ?\n         JNE   PARSUSER_110        ...jif not\n*\n*        Issue message about \"Null\" USER keyword\n*\n         $RWTO MSG013A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\nPARSUSER_110 DS 0H\n         XR    R2,R2               Clear accumulator register\n         LR    R7,R4             Preserve USER value start position\nPARSUSER_120 DS 0H\n         CR    R4,R6               Past end of string ?\n         JE    PARSUSER_130        ...jif so\n         CLI   0(R4),C','          End of value ?\n         JE    PARSUSER_130        ...jif so\n         LA    R4,1(R4)            Increment string pointer\n         LA    R2,1(R2)            Bump value length\n*\n*        Make sure 8 or less bytes\n*\n         CHI   R2,8                > 8 bytes ?\n         JNH   PARSUSER_120        ...jif not\n*\n*        Issue message about invalid length USER keyword value\n*\n         $RWTO MSG011A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\n*\n*        Capture USER value (executable length in R2)\n*\n*        R4 -> delimiter or last character of string\n*        R7 -> start of value\n*\nPARSUSER_130 DS 0H\n         CLI   00(R4),C','         Delimiter terminator ?\n         JNE   PARSUSER_132        ...jif not\n         BCTR  R2,0                otherwise decrement length\nPARSUSER_132 DS 0H\n         LA    R9,USERID           R9 -> target field for capture\n         EX    R2,CAPKW            Capture field value\n         CR    R4,R6               Last byte of string ?\n         JE    PARS1000            Go to phase 2 of parse           @14\n         LA    R4,1(R4)            Bump over delimiter\n         LR    R5,R6               Adjust pointers\n         SR    R5,R4                for next keyword in string\n         J     PARS060               and go process it\n******************************************************************* @14\n*                                                                 * @14\n*        Parse TYPE=n parameter                                   * @14\n*                                                                 * @14\n******************************************************************* @14\nPARSTYPE DS    0H\n*        WTO   'PARSTYPE entered'\n         TM    PKW_used,PKW_TYPE   Has \"TYPE=\" already been seen ?\n         JNO   PARSTYPE_100        ...jif not\n*\n*       Issue message about duplicate primary keyword specification @14\n*\n*       Note: This label is used by several routines (PARSLMOD_010)\n*\nPARSTYPE_010 DS 0H\n         $RWTO MSG007A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\nPARSTYPE_100 DS 0H\n         OI    PKW_used,PKW_TYPE   Set \"TYPE=\" already seen flag\n         S     R5,=F'5'            Decrement length for \"TYPE=\"\n         A     R4,=F'5'            Adjust scan start location\n*\n*        Scan for comma or end of string to harvest\n*\n         CLI   0(R4),C','          \"Null\" \"TYPE=,\" ?\n         JNE   PARSTYPE_110        ...jif not\n*\n*        Issue message about \"Null\" TYPE keyword\n*\n         $RWTO MSG014A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\nPARSTYPE_110 DS 0H\n         XR    R2,R2               Clear accumulator register\n         LR    R7,R4             Preserve TYPE value start position\nPARSTYPE_120 DS 0H\n         CR    R4,R6               Past end of string ?\n         JE    PARSTYPE_130        ...jif so\n         CLI   0(R4),C','          End of value ?\n         JE    PARSTYPE_122        ...jif so\n         LA    R4,1(R4)            Increment string pointer\n         LA    R2,1(R2)            Bump value length\n         J     PARSTYPE_120        Go check next string position\n*\n*        Make sure exactly 1 byte\n*\nPARSTYPE_122 DS 0H\n         CHI   R2,1                1 byte ?\n         JE    PARSTYPE_130        ...jif not\n*\n*        Issue message about invalid length TYPE keyword value\n*\n*        DC    H'0'                <debug>\n         $RWTO MSG015A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\n*\n*        Capture TYPE value (executable length in R2)\n*\n*        R4 -> delimiter or last character of string\n*        R7 -> start of value\n*\nPARSTYPE_130 DS 0H\n         CLI   0(R4),C','          Delimiter terminator ?\n         JNE   PARSTYPE_132        ...jif not\n         BCTR  R2,0                otherwise decrement length\nPARSTYPE_132 DS 0H\n         CLI   0(R7),C'1'          TYPE=1\n         JE    PARSTYPE_134\n         CLI   0(R7),C'2'          TYPE=2\n         JE    PARSTYPE_134\n         CLI   0(R7),C'3'          TYPE=3\n         JE    PARSTYPE_134\n         CLI   0(R7),C'4'          TYPE=4\n         JE    PARSTYPE_134\n         CLI   0(R7),C'6'          TYPE=6\n         JE    PARSTYPE_134\n*\n*        Issue message regarding invalid SVC TYPE specification\n*\n         $RWTO MSG019A,WRITE=YES\n         $RWTO MSG027A,WRITE=YES\n         LHI   R15,BADPARM4        Invalid parameter found\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\n*\n* Note: The SVC type field in the SVCUPDTE plist will be set to the\n*       appropriate value during phase 2 parse processing if no\n*       errors are found durign phase 2 processing.\n*\nPARSTYPE_134 DS 0H\n         LA    R9,TYPE             R9 -> target field for capture\n         EX    R2,CAPKW            Capture field value\n         CR    R4,R6               Last byte of string ?\n         JE    PARS1000            Go to phase 2 of parse           @14\n         LA    R4,1(R4)            Bump over delimiter\n         LR    R5,R6               Adjust pointers\n         SR    R5,R4                for next keyword in string\n         J     PARS060               and go process it\n******************************************************************* @14\n*                                                                 * @14\n*        Parse GOODNITE=hhmm parameter                            * @14\n*                                                                 * @14\n******************************************************************* @14\nPARSGOODNITE DS 0H\n*        WTO   'PARSGOODNITE entered'\n         TM   PKW_used,PKW_GOODNITE \"GOODNITE=\" already been seen ?\n         JNO   PARSGOODNITE_100    ...jif not\n*\n*       Issue message about duplicate primary keyword specification @14\n*\n         J     PARSLMOD_010        ...jif duplicate to common code\nPARSGOODNITE_100 DS 0H\n         OI    PKW_used,PKW_GOODNITE Set \"GOODNITE=\" seen flag\n         S     R5,=F'9'            Decrement length for \"GOODNITE=\"\n         A     R4,=F'9'            Adjust scan start location\n*\n*        Scan for comma or end of string to harvest\n*\n         CLI   0(R4),C','          \"Null\" \"GOODNITE=,\" ?\n         JNE   PARSGOODNITE_110    ...jif not\n*\n*        Issue message about \"Null\" GOODNITE keyword\n*\n         $RWTO MSG030A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\nPARSGOODNITE_110 DS 0H\n         XR    R2,R2               Clear accumulator register\n         LR    R7,R4          Preserve GOODNITE value start position\n*\n* We need to pick off hh (hours) & mm (minutes) here and make sure\n* the hh value is in the range of 00-23 and the mm value is in the\n* range of 00-59. A value of hhmm=0000 will simply be ignored. The\n* length of the hhmm keyword value must be exactly 4 bytes. The\n* validation of the hhmm range will be performed in phase 2 of the\n* parse.\n*\nPARSGOODNITE_120 DS 0H\n         CR    R4,R6               Past end of string ?\n         JE    PARSGOODNITE_130    ...jif so\n         CLI   0(R4),C','          End of value ?\n         JE    PARSGOODNITE_122    ...jif so\n         LA    R4,1(R4)            Increment string pointer\n         LA    R2,1(R2)            Bump value length\n         J     PARSGOODNITE_120    Go check next string position\n*\n*        Make sure exactly 4 bytes\n*\nPARSGOODNITE_122 DS 0H\n         CHI   R2,4                4 bytes ?\n         JE    PARSGOODNITE_130    ...jif not\n*\n*        Issue message about invalid length GOODNITE keyword value\n*\n*        DC    H'0'                <debug>\n         $RWTO MSG031A,WRITE=YES\n         LHI   R15,BADPARM4        Invalid length\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\n*\n*        Capture GOODNITE value (executable length in R2)\n*\n*        R4 -> delimiter or last character of string\n*        R7 -> start of value\n*\nPARSGOODNITE_130 DS 0H\n         CLI   0(R4),C','          Delimiter terminator ?\n         JNE   PARSGOODNITE_132    ...jif not\n         BCTR  R2,0                otherwise decrement length\n*\n*        Capture the GOODNITE time and validate it\n*\nPARSGOODNITE_132 DS 0H\n         LA    R9,SHUTDOWN         R9 -> target field for capture\n         EX    R2,CAPKW            Capture field value\n         CR    R4,R6               Last byte of string ?\n         JE    PARS1000            Go to phase 2 of parse           @14\n         LA    R4,1(R4)            Bump over delimiter\n         LR    R5,R6               Adjust pointers\n         SR    R5,R4                for next keyword in string\n         J     PARS060               and go process it\n\n*\n* Following line added by @14 change\n*SG031A  WTO   'SVCU031A - Invalid length GOODNITE parameter detected',\n*              ROUTCDE=(11),MF=L                                    @14\n*SG031AL EQU   *-MSG031A                                            @14\n\n\n*        R4 -> start of residual string\n*        R5 =  residual length of string\n\n\n         AGO   .JH0825A\n*                                                                   @14\n* Entry at PARS060 is only for the first character of the string or @14\n* for the next character after a comma. Logic beginning at this     @14\n* label is simply responsible for determining the length of the     @14\n* current candidate option for passing to the appropriate routine   @14\n* for handling. The true length of the candidate option is saved    @14\n* in Current_option_length for the processor involved just in case  @14\n* the processor wants to reuse R3 and for debugging reasons.        @14\n*                                                                   @14\nPARS050  DS    0H                                                   @14\n         LA    R5,1(R3)            Make R5 true length for the scan\n         XC    Parse_flags,Parse_flags initialize flag byte\n\n         LR    R4,R7               R4 -> beginning of string\n         LR    R6,R7               R6 -> beginning of string\n         AR    R6,R3               R6 -> last character in string\n         LR    R5,R6               R5 -> last character in string\n         SR    R5,R4               R5 = length of string\n*\n*        Look for primary keywords\n*\n* Note: Each routine branched to in the following logic is\n*       responsible for setting R4 to point to the residual\n*       portion of the string to parse and r5 to the residual\n*       length of the string.\n*\n*        R4 -> start of string\n*        R5 =  residual length of string\n*\nPARS060  DS    0H\n         CLC   =CL4'SVC=',0(R4)    SVC=\n         JE    PARSSVC             ...jif so\n         CLC   =CL5'LMOD=',0(R4)   LMOD=\n         JE    PARSLMOD            ...jif so\n         CLC   =CL5'ATTR=',0(R4)   ATTR=\n         JE    PARSATTR            ...jif so\n         CLC   =CL6'LOCKS=',0(R4)  LOCKS=\n         JE    PARSLOCKS           ...jif so\n         CLC   =CL9'GOODNITE=',0(R4) GOODNITE=\n         JE    PARSGOODNITE        ...jif so\n         CLC   =CL5'TYPE=',0(R4)   TYPE=\n         JE    PARSTYPE            ...jif so\n         CLC   =CL5'USER=',0(R4)   USER=\n         JE    PARSUSER            ...jif so\n*\n*        Primary keyword not recognized\n*\n         $RWTO MSG005A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n\n\n*\n*        Parse SVC=nnn or SVC=(aaa,bbb) forms\n*\nPARSSVC  DS    0H\n*        WTO   'PARSSVC entered'\n*\n* Check to see if SVC=nnn or SVC=(aaa,bbb) form & handle\n*\n         DC    H'0'\n\n\n\n\n\n\n\n\n\nPARSATTR DS    0H\n         WTO   'PARSATTR entered'\n         DC    H'0'\nPARSLOCKS DS   0H\n         WTO   'PARSLOCKS entered'\n         DC    H'0'\nPARSGOODNITE DS 0H\n         WTO   'PARSGOODNITE entered'\n         DC    H'0'\nPARSTYPE DS    0H\n         WTO   'PARSTYPE entered'\n         DC    H'0'\n******************************************************************* @14\n*                                                                 * @14\n*        Parse USER=xxxxxxxx parameter                            * @14\n*                                                                 * @14\n******************************************************************* @14\nPARSUSER DS    0H\n*        WTO   'PARSUSER entered'\n         TM    PKW_used,PKW_USER   Has \"USER=\" already been seen ?\n         JNO   PARSUSER_100        ...jif not\n*\n*       Issue message about duplicate primary keyword specification @14\n*\n         J     PARSLMOD_010        ...jif duplicate to common code\nPARSUSER_100 DS 0H\n         OI    PKW_used,PKW_USER   Set \"USER=\" already seen flag\n         S     R5,=F'5'            Decrement length for \"USER=\"\n         A     R4,=F'5'            Adjust scan start location\n         SLR   R2,R2               Clear TRT work register          @14\n         LARL  R9,TRTPARM2         Get translate table address      @14\n         EX    R5,SCANCOMA         scan string for comma only       @14\n         JC    8,PARSUSER_120      ...jif end of string w/o delim\n         JC    4,PARSUSER_110      ...jif more after delim\n         OI    Parse_flags,No_more_data Indicate no more data\n         LR    R8,R1               Preserve R1 over WTO\n*        WTO   'No more data'\n         LR    R1,R8               Restore R1 after WTO\n*\n*        More data exists after the delimiter\n*\nPARSUSER_110 DS 0H\n         LR    R8,R1               Preserve R1 over WTO\n*        WTO   'More data after delimiter'\n         LR    R1,R8               Restore R1 after WTO\n*\n*        Capture USER= parameter (determine executable length)\n*\n         LR    R2,R1               R2 -> delimiter\n         SR    R2,R4               R2 = true length of USER value\n         BCTR  R2,0                Make length EXecutable\n         CHI   R2,7                > 8 ?\n         JH    PARSUSER_121        ...jif so\n         LA    R9,USERID           R9 -> field to capture\n         EX    R2,CAPKW            Capture field value\n*\n*        Adjust string scan starting location & residual length\n*        for processing next possible keyword\n*\n         TM    Parse_flags,No_more_data Any more data ?\n         JO    PARS1000            ...jif not, phase 2 processeing\n         LR    R3,R1               R1 -> delimiter\n         SR    R3,R4            R3 = length not including delimiter @14\n         LA    R4,1(R3,R4)         R4 -> data after delimiter\n         SR    R5,R3               R5 = residual length\n         J     PARS060             Go scan for net keyword\n*\n*        End of string found w/o delimiter\n*\nPARSUSER_120 DS 0H\n         LR    R8,R1               Preserve R1 over WTO\n*        WTO   'End of string w/o delimiter'\n         LR    R1,R8               Restore R1 after WTO\n         BCTR  R5,0                Make length executable\n         CHI   R5,7                > max modname length ?\n         JNH   PARSUSER_122        ...jif not, capture USER= name\n*\n*        Issue message about invalid length USER= parameter\n*\nPARSUSER_121 DS 0H\n         DC    H'0'                R8 -> delimiter ?\n         $RWTO MSG011A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\n*\n*        Capture USER= parameter (executable length in R5)\n*\nPARSUSER_122 DS 0H\n         LA    R9,USERID           R9 -> field to capture\n         EX    R5,CAPKW            Capture field value\n         J     PARS1000            Go to phase 2 of parse           @14\n******************************************************************* @14\n*                                                                 * @14\n*        Parse LMOD= parameter                                    * @14\n*                                                                 * @14\n******************************************************************* @14\nPARSLMOD DS    0H\n*        WTO   'PARSLMOD entered'\n         TM    PKW_used,PKW_LMOD   Has \"LMOD=\" already been seen ?\n         JNO   PARSLMOD_100        ...jif not\n*\n*       Issue message about duplicate primary keyword specification @14\n*\nPARSLMOD_010 DS 0H\n         $RWTO MSG007A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\nPARSLMOD_100 DS 0H\n         OI    PKW_used,PKW_LMOD   Set \"LMOD=\" already seen flag\n         S     R5,=F'5'            Decrement length for \"LMOD=\"\n         A     R4,=F'5'            Adjust scan start location\n*        BCTR  R5,0                Make length EXecutable\n         SLR   R2,R2               Clear TRT work register          @14\n         LARL  R9,TRTPARM2         Get translate table address      @14\n         EX    R5,SCANCOMA         scan string for comma only       @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nSCANCOMA TRT   0(*-*,R4),0(R9)     Scan for comma                   @14\nSVCUPDTE LOCTR ,                                                    @14\n         JC    8,PARSLMOD_120      ...jif end of string w/o delim\n         JC    4,PARSLMOD_110      ...jif more after delim\n         OI    Parse_flags,No_more_data Indicate no more data\n         LR    R8,R1               Preserve R1 over WTO\n         WTO   'No more data'\n         LR    R1,R8               Restore R1 after WTO\n*        DC    H'0'                ??????\n\n\n*\n*        More data exists after the delimiter\n*\nPARSLMOD_110 DS 0H\n         LR    R8,R1               Preserve R1 over WTO\n         WTO   'More data after delimiter'\n         LR    R1,R8               Restore R1 after WTO\n*\n*        Capture LMOD= parameter (determine executable length)\n*\n         LR    R2,R1               R2 -> delimiter\n         SR    R2,R4               R2 = true length of LMOD value\n         BCTR  R2,0                Make length EXecutable\n         CHI   R2,7                > 8 ?\n         JH    PARSLMOD_121        ...jif so\n         LA    R9,LMOD             R9 -> field to capture\n         EX    R2,CAPKW            Capture field value\n*\n*        Adjust string scan starting location & residual length\n*        for processing next possible keyword\n*\n         TM    Parse_flags,No_more_data Any more data ?\n         JO    PARS1000            ...jif not, phase 2 processeing\n         LR    R3,R1               R1 -> delimiter\n         SR    R3,R4            R3 = length not including delimiter @14\n         LA    R4,1(R3,R4)         R4 -> data after delimiter\n         SR    R5,R3               R5 = residual length\n         J     PARS060             Go scan for net keyword\n*\n*        End of string found w/o delimiter\n*\nPARSLMOD_120 DS 0H\n         LR    R8,R1               Preserve R1 over WTO\n         WTO   'End of string w/o delimiter'\n         LR    R1,R8               Restore R1 after WTO\n         BCTR  R5,0                Make length executable\n         CHI   R5,7                > max modname length ?\n         JNH   PARSLMOD_122        ...jif not, capture LMOD= name\n*\n*        Issue message about invalid length LMOD= parameter\n*\nPARSLMOD_121 DS 0H\n         $RWTO MSG010A,WRITE=YES\n         LHI   R15,BADPARM4        Duplicate keyword specification\n         ST    R15,RETCODE         Set to expose retcode to caller\n         J     PARSX                and return to caller\n*\n*        Capture LMOD= parameter (executable length in R5)\n*\nPARSLMOD_122 DS 0H\n         LA    R9,LMOD             R9 -> field to capture\n         EX    R5,CAPKW            Capture field value\nLTORG_AREA LOCTR ,                                                  @14\nCAPKW    MVC   0(*-*,R9),0(R4)     Capture keyword field            @14\nSVCUPDTE LOCTR ,                                                    @14\n         J     PARS1000            Go to phase 2 of parse           @14\n\n\n\n\n\n\n\n         DC    H'0'\n\n\n\n\n\n         AGO   .JH0820B\n\n\n\n\n\n\n\nPKW_used DS    X\nPKW_SVC  EQU   X'80'               SVC= keyword found\nPKW_LMOD EQU   X'40'               LMOD= keyword found\nPKW_ATTR EQU   X'20'               ATTR= keyword found\nPKW_LOCKS EQU  X'10'               LOCKS= keyword found\nPKW_GOODNITE EQU X'08'             GOODNITE= keyword found\nPKW_USER EQU   X'04'               USER= keyword found\nPKW_TYPE EQU   X'02'               TYPE= keyword found\n\n.JH0820B ANOP\n\n\n\n\n\n\n         AGO   .JH0820A\n         LM    R1,R3,PKWBRXLE      Load BRXLE work registers\n         USING PKWTENT,R1      Keyword table entry addressability\n         XR    R8,R8               Clear work register\n         ICM   R8,B'0001',PKWLEN   Insert table keyword length\n         CR    R5,R8               long enough for compare ?\n\nPKWTENT  DSECT\nPKWLEN   DS    XL1                 keywork length\n\n\n\n         AGO   .JH0819A\n         ST    R5,Current_option_length Initialize max length\n         LARL  R10,DELIMTAB       Point to TRT table for SCANTRT EX\n         XR    R2,R2               Clear function byte register\nPARS060  DS    0H\n*NIT020  DS    0H\n         BCTR  R5,0                Decrement length for execute\n         EX    R5,SCANTRT          Scan input parameter string\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\n* R10 must point to translate table for next instruction\nSCANTRT  TRT  0(*-*,R4),0(R10)     Test for character\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         JC    8,PARS080         ...jif end of string w/o delimiter\n         JC    4,PARS070           ...jif more data after delimiter\n         OI    Parse_flags,No_more_data Indicate no more data\nPARS070  DS    0H\n*NIT030  DS    0H\n         LR    R3,R1               R1 -> delimiter in string (comma)\n         SR    R3,R4           R3 = new length not including delimiter\n         ST    R3,Current_option_length Save length for processor\n*\n* Verify that invalid function byte was not returned from the DELIMTAB\n* translation table. If it was then we'll abend and R2 will contain\n* the offending value.\n*\n         CHI   R2,10               Check against max function value\n         JNH   PARS071             ...jif not high\nGet INIT974 logic here\n\n\n         JH    INIT974             ...go abend on bad function byte\n\nPARS071  DS    0H\n         SHI   R2,4                Adjust for table entry\n         L     R15,VECTOR(R2)      R2 contains processor offset from\n*                                   the DELIMTAB translate table\n         BASR  R14,R15             Call the delimiter processor\n\n\nPARS080  DS    0H\n\n\n*                                                                   @14\n*        Unsupported parameter option\n*                                                                   @14\n*ARS???  DS    0H                                                   @14\n         $RWTO MSG005A,WRITE=YES   Write details message            @14\n         LHI   R15,BADPARM4        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     PARSX                 & go return to caller          @14\n.JH0819A ANOP\n\n\n\n*\n* Table of supported primary keywords\n*\n* The following table is processed by a BRXLE loop and contains\n* pointeres to logic to be used in processing the parameter list\n* with the keyword as the first field in each table entry\n*\nPKWBRXLE DC    A(PKWFIRST,PKWELNG,PKWLAST) BRXLE setup values\n*\nPKWFIRST DC    AL1(4)              Primary keyword length\n         DC    CL11'SVC='          Primary keyword\n         DC    AL1(PKW_SVC)        Primary keyword flag\n         DC    XL3'00'             <filler>\n         DC    A(PROC_SVC)         @ of processor routine\n*\nPKWELNG  EQU   *-PKWFIRST          Length of eash entry\n*\n         DC    AL1(5)              Primary keyword length\n         DC    CL11'LMOD='         Primary keyword\n         DC    AL1(PKW_LMOD)       Primary keyword flag\n         DC    XL3'00'             <filler>\n         DC    A(PROC_LMOD)        @ of processor routine\n*\n         DC    AL1(5)              Primary keyword length\n         DC    CL11'ATTR='         Primary keyword\n         DC    AL1(PKW_ATTR)       Primary keyword flag\n         DC    XL3'00'             <filler>\n         DC    A(PROC_ATTR)        @ of processor routine\n*\n         DC    AL1(6)              Primary keyword length\n         DC    CL11'LOCKS='        Primary keyword\n         DC    AL1(PKW_LOCKS)      Primary keyword flag\n         DC    XL3'00'             <filler>\n         DC    A(PROC_LOCKS)       @ of processor routine\n*\n         DC    AL1(9)              Primary keyword length\n         DC    CL11'GOODNITE='     Primary keyword\n         DC    AL1(PKW_GOODNITE)   Primary keyword flag\n         DC    XL3'00'             <filler>\n         DC    A(PROC_GOODNITE)    @ of processor routine\n*\nPKWLAST  DC    AL1(5)              Primary keyword length\n         DC    CL11'USER='         Primary keyword\n         DC    AL1(PKW_USER)       Primary keyword flag\n         DC    XL3'00'             <filler>\n         DC    A(PROC_USER)        @ of processor routine\n\n\nPKW_used DS    X\nPKW_SVC  EQU   X'80'               SVC= keyword found\nPKW_LMOD EQU   X'40'               LMOD= keyword found\nPKW_ATTR EQU   X'20'               ATTR= keyword found\nPKW_LOCKS EQU  X'10'               LOCKS= keyword found\nPKW_GOODNITE EQU X'08'             GOODNITE= keyword found\nPKW_USER EQU   X'04'               USER= keyword found\nPKW_TYPE EQU   X'02'               TYPE= keyword found\n\nPROC_SVC DS    0H\nPROC_LMOD DS   0H\nPROC_ATTR DS   0H\nPROC_LOCKS DS  0H\nPROC_GOODNITE DS 0H\nPROC_USER DS   0H\n.JH0820A ANOP\n\n.JH0825A ANOP\n\n.JH0831B ANOP                                                       @14\n\n\n\n\n\n\n\n\n\n\n\nPARSX    DS    0H                                                   @14\n         LM    R14,R12,PARSSAVE+12     Restore caller's GPRs        @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @19\n         TITLE 'ENV000  - Check environmentals before processing'   @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n*        Perform environmental checks that can be executed before * @14\n*        executing SVC install.                                   * @14\n*                                                                 * @14\n* Note: These checks include the following items:                 * @14\n*                                                                 * @14\n*       1) Check for existence of protecting CL(#SNOMISC) profile * @14\n*       1) Check user's authority to install this SVC             * @14\n*       2) Check various SVC attribute & lock combinations for    * @14\n*          validity (move to PARS000)                             * @14\n*       3) OPEN SVCLIB library                                    * @14\n*       4) BLDL for the specified LMOD parameter                  * @14\n*       5) Requested module is not SPLIT format                   * @14\n*       6) Requested module is RENT                               * @14\n*       7) Requested module is REFR                               * @14\n*       8) Requested module is REUS                               * @14\n*       9) Requested module is AMODE24 or AMODE31                 * @14\n*                                                                 * @14\n* Note: When this routine is called the PARSE routine (or earlier * @14\n*       processing) will have completed the following:            * @14\n*                                                                 * @14\n*       1) MYFLAG.SPECIAL will be set for a \"systems\"             * @14\n*          priviledged userid                                     * @14\n*       2) TYPE_SVC will contain a valid SVC # (1, 2, 3, 4 or 6)  * @14\n*       3) All LOCKS_FLAGS flags representing individual locks    * @14\n*          requested will be set                                  * @14\n*       4) ATTR_FLAGS flags representing individual SVC           * @14\n*          attributes such as NPRMT, APF, AR and ESR will have    * @14\n*          been set                                               * @14\n*       5) PROC_FLAGS.PROC_GOODNITE will be set indicating that a * @14\n*          GOODNITE shutdown time was requested                   * @14\n*       6) ATTR_FLAGS.ATTR_ESR will be set indicating the user    * @14\n*          is requesting installation of an SVC requiring ESR     * @14\n*          routing.                                               * @14\n*       7) The SVCNO field will contain a 3 digit zoned decimal   * @14\n*          SVC number in the range of 0-255.                      * @14\n*       8) The ESRSVCNO field will contain a 3 digit zoned        * @14\n*          decimal ESR function code that is appropriate for the  * @14\n*          routing SVC number passed in the SVCNO field if the    * @14\n*          ATTR_FLAGS.ATTR_ESR flag is set otherwise it will be   * @14\n*          blank. The ranges of acceptable values for the various * @14\n*          ESR types are as follows:                              * @14\n*                                                                 * @14\n*          SVCNO  Type Acceptable range for ESRSVCNO              * @14\n*          =====  ==== =============================              * @14\n*           109   3/4  000-255                                    * @14\n*           116    1   000-014                                    * @14\n*           122    2   000-019                                    * @14\n*           137    6   000-007                                    * @14\n*                                                                 * @14\n*       In summary the following fields & flags are expected to   * @14\n*       be set on entry to this routine:                          * @14\n*                                                                 * @14\n*       SVCNO                                                     * @14\n*       ESRSVCNO                                                  * @14\n*       Current_profname                                          * @14\n*                                                                 * @14\n*       Note: RACF \"global special\" buys the submitter nothing    * @14\n*             in this program at this time (08/11/2015).          * @14\n*                                                                 * @14\n*                                                                 * @14\n         AGO   .JRH997A                                             @14\n*  Note: This routine uses the PROC_FLAGS.FAILED flag to allow    * @14\n*        as many of the checks & tests executed within this       * @14\n*        subroutine to be performed before returning to the       * @14\n*        calling routine. Each test that can logically still be   * @14\n*        executed even though an earlier test failed will be      * @14\n*        executed if possible to identify as many issues as       * @14\n*        possible for the submitting user in a single execution.  * @14\n*        The PROC_FLAGS.FAILED flag does not result in a specific * @14\n*        return code being returned to the caller and the caller  * @14\n*        will simply see the last return code set in the RETCODE  * @14\n*        field.                                                   * @14\n.JRH997A ANOP                                                       @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nENV000   DS    0H                                                   @14\n         STM   R14,R12,SAVE@L1+12  Save caller's GPRs               @14\n\n\n         AGO   .JH0810A\n<Begin new code>\n*\n*        Check that a profile exists for the SVC slot involved. If\n*        there is no profile we will not allow the SVC to be\n*        installed regardless of whether the invoking user has\n*        RACF \"Global Special\" privileges\".\n*                                                                   @14\n*        Test user's authorization to install this SVC              @14\n*                                                                   @14\n*        -The resource name to be checked will be the value located @14\n*         in the Current_profname field constructed by the PARS000  @14\n*         routine and will be in one ot the following two formats:  @14\n*                                                                   @14\n*         SVCUPDTE_nnn  where nnn is a standard SVC #               @14\n*                                                                   @14\n*          or                                                       @14\n*                                                                   @14\n*         SVCUPDTE_xxxyyy  where xxx is the ESR SVC # & yyy is the  @14\n*                          ESR function code                        @14\n*                                                                   @14\n*         Examples:                                                 @14\n*                                                                   @14\n*         SVCUPDTE_109255 for ESR T3/4 SVC (109) with FC=255        @14\n*         SVCUPDTE_213    for SVC 213                               @14\n*                                                                   @14\n*         The SVC# will be right justified & padded on the left     @14\n*         with blanks                                               @14\n*                                                                   @14\n* Issue RACROUTE REQUEST=AUTH to validate existence of an         *\n* SVCUPDTE profile and to check the user's authorization.         *\n*                                                                 *\n* Expected results & their meanings are:                          *\n*                                                                 *\n*  R15 SAFPRRET SAFPRREA           Meaning                        *\n*  === ======== ======== ======================================== *\n*  00    --       --     -RACROUTE REQUEST=VERIFY has completed   *\n*                         successfully.                           *\n*        00       n/a    -Valid RACF userid.                      *\n*        04       --     -Verify token information                *\n*                 0C     -Indicates TOKNIN was specified, but its *\n*                         length was too large.                   *\n*                 10     -Indicates a STOKEN was specified, but   *\n*                         its length was too large.               *\n*  04    --       --     -Requested function could not be         *\n*                         completed. No RACF decision.            *\n*        00       n/a    -ENVIR=VERIFY was specified without SAF  *\n*                         installation exit processing.           *\n*        04       n/a    -User profile not defined to RACF.       *\n*        20       n/a    -RACF is not active.                     *\n*        58       n/a    -RJE or NJE operator FACILITY class      *\n*                         profile not found.                      *\n*  08    --       --     -Requested function has failed.          *\n*        08       n/a    -Password is not authorized.             *\n*        0C       n/a    -Password has expired.                   *\n*        10       n/a    -New password is invalid.                *\n*        14       n/a    -User not defined to group.              *\n*        18       n/a    -RACROUTE REQUEST=VERIFY was failed by   *\n*                         installation exit routine.              *\n*        1C       n/a    -User's access has been revoked.         *\n*        24       n/a    -User's access to specified group has    *\n*                         been revoked.                           *\n*        28       n/a    -OIDCARD parameter is required but not   *\n*                         specified.                              *\n*        2C       n/a    -OIDCARD parameter is invalid for        *\n*                         specified user.                         *\n*        30       --     -User is not authorized to the port of   *\n*                         entry in the TERMINAL, JESINPUT, or     *\n*                         CONSOLE class.                          *\n*                 00     -User not authorized to port of entry.   *\n*                 04     -User not authorized to access the       *\n*                         system on this day, or at this time of  *\n*                         day.                                    *\n*                 08     -indicates the port of entry may not be  *\n*                         used on this day, or at this time of    *\n*                         day. Note: The port of entry refers to  *\n*                         the TERMINAL class, the JESINPUT class, *\n*                         and the CONSOLE class ports of entry.   *\n*        34       n/a    -User not authorized to use application. *\n*        38       --     -SECLABEL checking failed.               *\n*                 04     -MLACTIVE requires a SECLABEL; none was  *\n*                         specified.                              *\n*                 08     -User not authorized for SECLABEL.       *\n*                 0C     -System was in a multilevel secure       *\n*                         status, and the dominance check failed. *\n*                 10     -Neither the user's nor the submitter's  *\n*                         SECLABELs dominate. They are disjoint.  *\n*        48       --     -Indicates that an unpriviledged user    *\n*                         issued a RACROUTE=VERIFY in a tranquil  *\n*                         state (MLQUIET).                        *\n*        4C       --     -Nodes checking failed.                  *\n*                 00     -Submitter's node is not allowed access  *\n*                         to execution node.                      *\n*                 04     -NJE failure: UACC of NONE for USERID    *\n*                         type of NODES profile.                  *\n*                 08     -NJE failure: UACC of NONE for GROUP     *\n*                         type of NODES profile.                  *\n*                 0C     -NJE failure: UACC of NONE for SECLABEL  *\n*                         type of NODES profile.                  *\n*                 10     -NJE failure: No local submit node       *\n*                         specified.                              *\n*                 14     -NJE failure: Reverification of transla- *\n*                         ted values failed.                      *\n*        50       --     -Surrogate submit attempt failed.        *\n*                 04     -SURROGAT class is inactive.             *\n*                 08     -Submitter is not permitted by the       *\n*                         user's SURROGAT class profile.          *\n*                 0C     -Submitter is not authorized to the      *\n*                         SECLABEL under which the job is to run. *\n*        50       --     -JESJOBS check failed.                   *\n*  64    --       --     -CHECK subparameter of the RELEASE       *\n*                         keyword was specified on the execute    *\n*                         form of the RACROUTE REQUEST=VERIFY     *\n*                         macro; however, the list form of the    *\n*                         macro does not have the same release    *\n*                         parameter. Macro processing terminates. *\n*                                                                 *\n* Note: I have included the full set of possible R15, RACF return *\n*       codes and reason codes in the above table only for docu-  *\n*       mentation purposes. The following table shows the expect- *\n*       ed combinations for an install request that we'll fail... *\n*       all others other than 0/0/0 will be failed.               *\n*                                                                 *\n*  R15 SAFPRRET SAFPRREA           Meaning                        *\n*  === ======== ======== ======================================== *\n*  00    00        0a    -User authorized for ATTR=READ           *\n*  04    04       n/a    -User profile not defined to RACF.       *\n*  08    1C       n/a    -User's access has been revoked.         *\n*                                                                 *\n<resume>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*\n*         SVCUPDTE macro layout (for generation changes)\n*\nSVCU_layout DSECT\nSVCU_vers DS   XL1                 Version\nSVCU_func DS   XL1                 Function code\nSVCU_ESRflag DS XL1                ESR flag\nSVCU_SVC2MOD DS XL1                SVC to modify\nSVCU_SVCEP DS  F                   SVC entry point\nSVCU_SVCtype DS XL1                SVC type\n* Equates\nSVCU_SVCattr DS XL1                SVC attributes\n* Equates\nSVCU_SVClocks DS XL1               SVC locks\n* Equates\nSVCU_SVCrc DS   XL1                SVC routing code\nSVCU_SVCepname DS CL8              SVC entry point name\n\n\n<End new code>\n.JH0810A ANOP\n\n\n\n\n* The following is for testing only\n*        MVC   Current_profname(15),=CL15'SVCUPDTE_109204'\n*        MVC   Current_profname(15),=CL15'SVCUPDTE_109117'\n*        MVC   SVCNO,=CL3'109'\n*        MVC   ESRSVCNO,=CL3'204'\n*        MVC   ESRSVCNO,=CL3'117'\n*        OI    ATTR_FLAGS,ATTR_ESR     Set flag for testing\n* The above is for testing only\n\n\n*                                                                   @14\n*        Test user's authorization to install this SVC              @14\n*                                                                   @14\n*        -The resource name to be checked will be the value located @14\n*         in the Current_profname field constructed by the PARS000  @14\n*         routine and will be in one ot the following two formats:  @14\n*                                                                   @14\n*         SVCUPDTE_nnn  where nnn is a standard SVC #               @14\n*                                                                   @14\n*          or                                                       @14\n*                                                                   @14\n*         SVCUPDTE_xxxyyy  where xxx is the ESR SVC # & yyy is the  @14\n*                          ESR function code                        @14\n*                                                                   @14\n*         Examples:                                                 @14\n*                                                                   @14\n*         SVCUPDTE_109255 for ESR T3/4 SVC (109) with FC=255        @14\n*         SVCUPDTE_213    for SVC 213                               @14\n*                                                                   @14\n*         The SVC# will be right justified & padded on the left     @14\n*         with blanks                                               @14\n*                                                                   @14\n         MVC   ENTITYW3,RESOURCE   Set \"SVCUPDTE_\" part             @14\n         TM    ATTR_FLAGS,ATTR_ESR     Is this an ESR SVC request ? @14\n         JNO   ENV010                  ...jif not                   @14\n*                                                                   @14\n*        This is an ESR SVC request - complete xxxyyy part          @14\n*                                                                   @14\n         MVC   ENTITYW3+9(3),SVCNO     Install ESRSVC number        @14\n         MVC   ENTITYW3+12(3),ESRSVCNO Install function code        @14\n         J     ENV020                  Go do check                  @14\n*                                                                   @14\n*        We are dealing with a standard SVC number (non-ESR)        @14\n*                                                                   @14\nENV010   DS    0H                                                   @14\n         MVC   ENTITYW3+9(3),SVCNO     Install SVC number           @14\n*                                                                   @14\n*        Set profile name for CHKINUSE usage & any error WTO        @14\n*                                                                   @14\nENV020   DS    0H                                                   @14\n         MVC   Current_profname,ENTITYW3 Copy profile name          @14\n*                                                                   @14\n*        Check for CL(#SNOMISC) SVCUPDTE_xxxyyy AC(READ)            @14\n*                                                                   @14\n         MVC   SAFRACFL(SAFRACLL),RACPATT Set RACROUTE base pattern @14\n         LA    R2,ENTITW3L         Pick up buffer length            @14\n         STH   R2,ENTITYW1         Store for RACROUTE call          @14\n         XC    ENTITYW2,ENTITYW2   Clear resource name length       @14\n         BASR  R10,0               Macro internal addressability    @14\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"    @14\n         RACROUTE REQUEST=AUTH,                                     @14X\n               ENTITYX=ENTITYW1,                                    @14X\n               CLASS=FACILITY,                                      @14X\n               ATTR=READ,                                           @14X\n               WORKA=RACFWORK,                                      @14X\n               LOG=NONE,           was ASIS                         @14X\n               MSGSUPP=YES,        was NO                           @14X\n               RELEASE=1.9.2,                                       @14X\n               MF=(E,SAFRACFL)                                      @14\n         DROP  R10             Drop internal macro addressability   @14\n*                                                                   @14\n* Save SAF R15 and RACF return code & reasons code for later use or @14\n* diagnostics                                                       @14\n*                                                                   @14\n         ST    R15,SAFWR15         Save SAF return code             @14\n         LA    R8,SAFRACFL     R8 -> RACROUTE Router Parameter list @14\n         USING SAFP,R8         RACF Router parameter list address   @14\n         L     R14,SAFPRRET        Pick up RACF return code         @14\n         ST    R14,SAFWRRET        Save for later                   @14\n         L     R14,SAFPRREA        Pick up RACF reason code         @14\n         ST    R14,SAFWRREA        Save for later                   @14\n         DROP  R8                  Drop SAFP addressability         @14\n*                                                                   @14\n*        Check RACROUTE return & reason codes                       @14\n*                                                                   @14\n         L     R15,SAFWR15         Pick up R15 from AUTH call       @14\n         LTR   R15,R15             Verify completed successfully ?  @14\n         JZ    ENV090              ...jif so, user is authorized    @14\n*                                                                   @14\n*        Verify that the profile actually existed                   @14\n*                                                                   @14\n* Expect 4/4 & n/a if no profile or                                 @14\n*        8/8/0     if profile but user not authorized               @14\n*                                                                   @14\n         J     ENV040              BYPASS CHECK\n         CLC   SAFWR15,=F'4'       No RACF decision                 @14\n         JNE   ENV040              ...jif not, some other reason    @14\n         CLC   SAFWRRET,=F'4'      Profile not defined ?            @14\n         JNE   ENV040              ...jif not, some other reason    @14\n*                                                                   @14\n*        Profile does not exist - fail the request with a WTO & set @14\n*        return code for caller.                                    @14\n*                                                                   @14\n         $RWTO MSG009A,WRITE=NO                                     @14\n         MVC   MSG009AA,Current_profname Install profile            @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,NOPROF          Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     ENVX                  & go return to caller          @14\n*                                                                   @14\n*        User is not authorized to install this SVC                 @14\n*                                                                   @14\nENV040   DS    0H                                                   @14\n         J     ENV090              BYPASS CHECK\n         $RWTO MSG008A,WRITE=NO    Prime the message area           @14\n         MVC   MSG008AB,Current_profname                            @14\n         $RWTO WTOD,WRITE=YES      Write the message                @14\n         $RWTO MSG008I,WRITE=NO    Prime the message area           @14\n* Install SAFRC, RACFRC & RACFRSN in WTO fields                     @14\n         LA    R14,SAFWR15         R14 -> source area to convert    @14\n         LA    R15,MSG008IA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         LA    R14,SAFWRRET        R14 -> source area to convert    @14\n         LA    R15,MSG008IB        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         LA    R14,SAFWRREA        R14 -> source area to convert    @14\n         LA    R15,MSG008IC        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES      Write the message                @14\n         LHI   R15,BADAUTH         Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     ENVX                  & go return to caller          @14\n*                                                                   @14\n*        User is authorized for SVCUPDTE_xxxyyy to be here          @14\n*                                                                   @14\nENV090   DS    0H                                                   @14\n         OI    MYFLAGS,AUTHUSER    User is authorized               @14\n*                                                                   @14\n*        Check to see if Current_profname resource is currently in  @14\n*        use and if so report the current user of the resource &    @14\n*        their ASID (done by 1) and set a return code for           @14\n*        the caller. The CHKINUSE routine does the heavy lifting.   @14\n*                                                                   @14\n         BRASL R14,CHKINUSE        Go see if the resource is in use @14\n         TM    Profile_flags,Profile_INUSE Was it in use ?          @14\n         JNO   ENV092              ...jif resource is free          @14\n*                                                                   @14\n*        The SVC slot resource was found to be in use. In this case @14\n*        the CHKINUSE routine will have set the following fields    @14\n*        for us that we'll use in a WTO message before setting a    @14\n*        failing return code and returning to the caller.           @14\n*                                                                   @14\n*        INUSE_ASID    - ASID of address space using the profile  * @14\n*        INUSE_JOBNAME - JOBNAME of address space using the       * @14\n*                                                                   @14\n         $RWTO MSG908A,WRITE=NO                                     @14\n         MVC   MSG908AA,Current_profname                            @14\n         MVC   MSG908AB,INUSE_JOBNAME                               @14\n         MVC   MSG908AC,INUSE_ASID                                  @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         LHI   R15,BADENQ          Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     ENVX                  & go exit w/ return code       @14\n*\n* To be here the user is authorized to install the SVC and the\n* backing reource for the requested SVC slot is not currently in\n* use. We now will verify that the SVCLIB DD is present. If it is\n* not present we'll issue a message indicating that the SVCLIB\n* DDname is required.\n*\n* Check attributes of the SVCLIB allocation                       * @14\n*                                                                 * @14\n* This routine is responsible for the following:                  * @14\n*                                                                 * @14\n* 1) Make sure the SVCLIB DDname was provided                     * @14\n* 2) Capture SVCLIB data set name & volser from SWA data          * @14\n* 3) Make sure SVCLIB data set is on a single disk volume         * @14\n* 4) Make sure SVCLIB DDname did not supply a member name         * @14\n* 5) Make sure SVCLIB DSORG is PO/POE                             * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nENV092   DS    0H                                                   @14\n         L     R1,PSATOLD-PSA(0,0) R1 -> current TCB                @14\n         L     R1,TCBTIO-TCB(R1)  R1 -> TIOT                        @14\n         LA    R1,TIOELNGH-TIOT1(R1)  R1 -> 1st DDname in TIOT      @14\nENV092A  DS    0H                                                   @14\n         CLI   0(R1),X'00'         End of TIOT ?                    @14\n         JE    ENV092B             ...jif so, SVCLIB DD missing     @14\n* Note: We reall need a new message for above                       @14\n         CLC   =CL8'SVCLIB',TIOEDDNM-TIOELNGH(R1) SVCLIB DD ?       @14\n         JE    ENV092C             ...jif so                        @14\n         XR    R2,R2               Clear for insert                 @14\n         IC    R2,0(R1)            R2 = TIOELNGH for current entry  @14\n         AR    R1,R2               Point to next TIOT DD entry      @14\n         J     ENV092A              and go check it out             @14\n*                                                                   @14\n*        SVCLIB DD not found - issue WTO & go exit                  @14\n*                                                                   @14\nENV092B  DS    0H                                                   @14\n         $RWTO MSG004A,WRITE=YES   Write message                    @14\n         LHI   R1,BADENV3          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                  & go exit w/ return code       @14\n*                                                                   @14\n*        SVCLIB DD was found - get JFCB for SVCLIB DD for tests     @14\n*                                                                   @14\n*        Note: R1 -> SVCLIB TIOT entry on entry to this label       @14\n*                                                                   @14\nENV092C  DS    0H                                                   @14\n         LA    R9,EPA              R9 -> EPA                        @14\n         ST    R9,SWEPAPTR         Save in EPA pointer field        @14\n*                                                                   @14\n         USING ZB505,R9            EPA addressability               @14\n*                                                                   @14\n         XC    SWAEPA,SWAEPA       Initialize the EPA               @14\n         MVC   SWVA,TIOEJFCB-TIOELNGH(R1) @JFCB token to EPA        @14\n         XC    SWAREQRC,SWAREQRC   Clear return code work area      @14\n         SWAREQ FCODE=RL,                                           @14X\n               EPA=SWEPAPTR,                                        @14X\n               UNAUTH=YES,                                          @14X\n               MF=(E,SWAPARMS)                                      @14\n         ST    R15,SWAREQRC        Save for debugging               @14\n         LTR   R15,R15             Was function successful ?        @14\n         JZ    ENV092D             ...jif so, go copy JFCB          @14\n*                                                                   @14\n*        SWAREQ encountered an error - just issue WTO with R15      @14\n*                                                                   @14\n*        Note: R15 from SWAREQ service is in SWAREQRC field         @14\n*                                                                   @14\n         $RWTO MSG048S,WRITE=NO                                     @14\n         LA    R1,SWAREQRC         Source for hex conversion        @14\n         LA    R15,MSG048SA        Target for hex conversion        @14\n         UNPK  0(9,R15),0(5,R1)    Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES      Write the completed message      @14\n         LHI   R1,BADSWA           Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                  & go exit w/ return code       @14\n*                                                                   @14\n*        Capture SVCLIB data set name & volume                      @14\n*                                                                   @14\nENV092D  DS    0H                                                   @14\n         L     R14,SWBLKPTR        R14 -> JFCB                      @14\n         MVC   JFCB,0(R14)         Copy JCFB to DWS for debugging   @14\n         LA    R1,JFCB             R1 -> copied JFCB (from SWA)     @14\n*                                                                   @14\n         DROP  R9                  Drop EPA addressability          @14\n*                                                                   @14\n         USING IEFJFCBN,R1         JFCB addressability              @14\n*                                                                   @14\n         MVC   DSN,JFCBDSNM        Capture SVCLIB dsn for later     @14\n         MVC   VOL,JFCBVOLS        Capture 1st volume               @14\n*                                                                   @14\n*        Make sure SVCLIB data set exists on a single disk volume   @14\n*                                                                   @14\n         CLI   JFCBNVOL,X'01'      On single disk volume ?          @14\n         JE    ENV092E             ...jif so                        @14\n*                                                                   @14\n*        SVCLIB library is multi-volume - issue WTO & exit          @14\n*                                                                   @14\n         $RWTO MSG060E,WRITE=YES   Write the message                @14\n         LHI   R1,BADMVOL          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                  & go exit w/ return code       @14\n*                                                                   @14\n*        Make sure SVCLIB member name not specified                 @14\n*                                                                   @14\nENV092E  DS    0H                                                   @14\n         TM    JFCBELNM,X'FF'-X'40' Member name on SVCLIB ?         @14\n         JZ    ENV092EA            ...jif not, continue checks      @14\n*                                                                   @14\n*        SVCLIB DDname specified a member name - issue WTO & exit   @14\n*                                                                   @14\n         $RWTO MSG064E,WRITE=YES   Write the message                @14\n         LHI   R1,BADMEM1          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                  & go exit w/ return code       @14\n*                                                                   @14\n*        Must open the SVCLIB DDname to get DSORG & RECFM unless    @14\n*        we want to perform an OBTAIN                               @14\n*                                                                   @14\n* Copy input DCB to area below the 16MB line                        @14\n*                                                                   @14\nENV092EA DS    0H                                                   @14\n         MVC   SVCLIB,INDCB#       Copy model DCB to work area      @14\n         MVC   W#OPNDI,X#OPNDI     Install OPEN input execute list  @14\n         LA    R11,SVCLIB          R11 -> SVCLIB DCB                @14\n         USING IHADCB,R11          Obtain addressability            @14\n         OPEN  ((R11),INPUT),MODE=31,MF=(E,W#OPNDI) Open SVCLIB     @14\n         TM    DCBOFLGS,DCBOFOPN   Open successful ?                @14\n         JO    ENV092F             ...jif OPEN good                 @14\n*                                                                   @14\n*        OPEN for SVCLIB library failed                             @14\n*                                                                   @14\n         $RWTO MSG044E,WRITE=YES                                    @14\n         LHI   R1,BADOPN1          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*                                                                   @14\n*        Make sure SVCLIB is DSORG=PO/POE                           @14\n*                                                                   @14\nENV092F  DS    0H                                                   @14\n         TM    DCBDSRG1,DCBDSGPO   DSORG=PO ?                       @14\n         JO    ENV092G             ...jif so                        @14\n*        TM    JFCDSRG1,JFCORGPO   PO/POU DSORG ?                   @14\n*        JO    ENV092G             ...jif so, skip error code       @14\n*                                                                   @14\n*        DSORG not PO/POE for SVCLIB - issue WTO & exit             @14\n*                                                                   @14\n         $RWTO MSG052E,WRITE=YES   Write the messge                 @14\n         LHI   R1,BADDSORG         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*                                                                   @14\n*        Make sure SVCLIB is RECFM=U                                @14\n*                                                                   @14\nENV092G  DS    0H                                                   @14\n*        TM    JFCRECFM,JFCUND     RECFM=U ?                        @14\n         TM    DCBRECFM,DCBRECU    RECFM=U ?                        @14\n*        JO    ENV092H             ...jif so, skip error code       @14\n         JO    ENV092I             ...jif so, skip error code       @14\n*                                                                   @14\n         DROP  R1                  Lose JFCB addressability         @14\n*                                                                   @14\n*        RECFM not U for SVCLIB - issue WTO & exit                  @14\n*                                                                   @14\n         $RWTO MSG056E,WRITE=YES   Write the message                @14\n         LHI   R1,BADRECFM         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*                                                                   @14\n*        Additional SVCLIB library checks go here                   @14\n*                                                                   @14\n         AGO   .JH0812A\n*\n*        Open SVCLIB library for BLDL & LOAD processing\n*\n* Copy input DCB to area below the 16MB line                        @14\nENV092H  DS    0H                                                   @14\n         MVC   SVCLIB,INDCB#       Copy model DCB to work area      @14\n         MVC   W#OPNDI,X#OPNDI     Install OPEN input execute list  @14\n         LA    R11,SVCLIB          R11 -> SVCLIB DCB                @14\n         USING IHADCB,R11          Obtain addressability            @14\n         OPEN  ((R11),INPUT),MODE=31,MF=(E,W#OPNDI) Open SVCLIB     @14\n         TM    DCBOFLGS,DCBOFOPN   Open successful ?                @14\n         JO    ENV092I             ...jif OPEN good                 @14\n*                                                                   @14\n*        OPEN for SVCLIB library failed                             @14\n*                                                                   @14\n         $RWTO MSG044E,WRITE=YES                                    @14\n         LHI   R1,BADOPN1          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n.JH0812A ANOP\n* Update BLDLLIST for module name only                              @14\nENV092I  DS    0H                                                   @14\n*        MVC   EPNAME,=CL8'LUA'    <development>\n*        MVC   EPNAME,=CL8'CCNGRE' <development>\n*        MVC   EPNAME,=CL8'VSMMON' <development> EP & LP differ\n         MVC   BLDLLIST,=H'1'      Will get only one member         @14\n         MVC   BLDLLL,=H'76'       Set LL to 76 bytes               @14\n         MVC   BLNAME,EPNAME       Install SVC module name          @14\n*                                                                   @14\n         BLDL  (R11),BLDLLIST      Get the directory entry          @14\n*                                                                   @14\n         LTR   R8,R15              Was BLDL OK ?                    @14\n         JZ    ENV092J             ...jif so                        @14\n*                                                                   @14\n*        BLDL failed for EPNAME module                              @14\n*                                                                   @14\n         STM   R15,R0,DWD          Save BLDL reaturn/reason codes   @14\n         $RWTO MSG016A,WRITE=YES   Write the message                @14\n         $RWTO MSG016I,WRITE=NO    Prime the WTO area w/ message    @14\n*                                                                   @14\n* Format BLDL return & reason codes into message                    @14\n*                                                                   @14\n* Note: Only low-order bytes need to be formatted (1 in/2 out)      @14\n*                                                                   @14\n         MVC   MSG016IA,EPNAME     Install EPNAME                   @14\n* Format R15 (return code) byte                                     @14\n         LA    R14,DWD+3           R14 -> source area to convert    @14\n         LA    R15,MSG016IB        R15 -> target display area       @14\n         UNPK  0(3,R15),0(2,R14)   unpack into display area         @14\n         MVZ   0(2,R15),=XL17'00'  move zone into display area      @14\n         TR    0(2,R15),=C'0123456789ABCDEF' translate              @14\n         MVI   2(R15),C' '         overlay clobbered byte           @14\n* Format R0  (reason code) byte                                     @14\n         LA    R14,DWD+7           R14 -> source area to convert    @14\n         LA    R15,MSG016IC        R15 -> target display area       @14\n         UNPK  0(3,R15),0(2,R14)   unpack into display area         @14\n         MVZ   0(2,R15),=XL17'00'  move zone into display area      @14\n         TR    0(2,R15),=C'0123456789ABCDEF' translate              @14\n         MVI   2(R15),C' '         overlay clobbered byte           @14\n*                                                                   @14\n*        CLOSE will be done by mainline code on exit in this case   @14\n*                                                                   @14\n         $RWTO WTOD,WRITE=YES      Write the message                @14\n         LHI   R1,BADEPN1          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*                                                                   @14\n*        Verify EPNAME module has the correct attributes            @14\n*                                                                   @14\n* Note: We must honor AMODE & RMODE for the EPNAME module in the    @14\n*       respective SVC table entry                                  @14\n*                                                                   @14\n* Note: Acceptable modules must be marked EXEC, RENT, REFR, REUS    @14\n*       and OVLY=NO                                                 @14\n*                                                                   @14\n* Note: RMODE=SPLIT information is not available unless either the  @14\n*       CSVQUERY service is used or the LOAD macro expansion        @14\n*       requested EXTINFO. This may be needed in the future. The    @14\n*       only issue with those services (CSVQUERY/CSVINFO) is that   @14\n*       the module must have been loaded to request this type of    @14\n*       information.                                                @14\n*                                                                   @14\nENV092J  DS    0H                                                   @14\n         AGO   .JH0812B\n\n RMODE=SPLIT program object\n  SASDTP.IBM.LOAD(CCNGRE)\n\n.JH0812B ANOP\n******************************************************************* @14\n*                                                                 * @14\n* It appears that the only 100% confident way to check for        * @14\n* an RMODE=SPLIT module is to actually LOAD it into the private   * @14\n* area and then use the CSVINFO service to obtain the information * @14\n* needed. This means that we'd have to really perform 2 LOADs for * @14\n* the user supplied module since the 1st LOAD would simply be     * @14\n* used to obtain some additional information not provided by BLDL * @14\n* such as RMODE=SPLIT information and we'd then have to DELETE    * @14\n* this copy from the private area followed by a later LOAD with   * @14\n* ADRNAPF=YES specified to direct the 2nd LOAD into CSA/ECSA as   * @14\n* needed. For now we're going to just not check for RMODE=SPLIT   * @14\n* beyond the understanding that a \"true\" RMODE=SPLIT module...    * @14\n* i.e. one where some control sections are loaded below 16MB and  * @14\n* some are loaded above 16MB...would be expected to have a        * @14\n* BLMODLN value of zeroes.                                        * @14\n*                                                                 * @14\n* The problem is that if all control sections in the load module  * @14\n* have the same RMODE regardless of whether SPLIT was specified   * @14\n* then we'll still have a single extent AND the BLMODLN field     * @14\n* will reflect the size of the load module or program object.     * @14\n* Thus the only 100% confident way to check for RMODE=SPLIT is to * @14\n* use the CSVINFO service and check the MODI_SPLIT flag of the    * @14\n* CSVMODI macro defined areas.                                    * @14\n*                                                                 * @14\n* We're just going to check the BLMODLN field in our logic for now* @14\n*                                                                 * @14\n******************************************************************* @14\n*\n*        Check module's RMODE\n*\n*        Note: Only RMODE=24 or RMODE=ANY for main entry point are\n*              acceptable\n*\n         TM    BLARMODE,BLLRMOD    LMOD RMODE=ANY ?\n         JO    ENV093              ...jif so, go set 31-bit flag\n         NI    FLAGS,X'FF'-F1#ECSA Reset 31-bit ECSA needed flag\n         J     ENV093A             Go check AMODE\nENV093   DS    0H\n         OI    FLAGS,F1#ECSA       Set 31-bit CSA/ECSA needed flag\n*\n*      Check module's AMODE (for setting SVC table entry point bit)\n*\n*      Note: AMODE=64 will be treated as AMODE=31 as far as the SVC\n*            table entry updte goes\n*\nENV093A  DS    0H\n         TM    BLARMODE,BLMAMOD    AMODE=ANY ?\n         JO    ENV093B             ...jif so, go set 31-bit flag\n         TM    BLARMODE,BLAM31     AMODE=31 ?\n         JO    ENV093B             ...jif so, go set 31-bit flag\n         TM    BLARMODE,BIT7       AMODE=64 ?\n         JO    ENV093B             ...jif so, go set 31-bit flag\n         NI    FLAGS,X'FF'-F1#AM31 else reset 31-bit EP flag\n         J     ENV093C             ...jif so, default to 24-bit\nENV093B  DS    0H\n         OI    FLAGS,F1#AM31       Set 31-bit EP flag\n*\n*        Check module for RENT\n*\nENV093C  DS    0H\n         TM    BLMATTR1,BLA1RENT   Module must be RENT\n         JO    ENV093D             ...jif RENT\n*\n*        Issue WTO that LMOD not RENT\n*\n         $RWTO MSG200A,WRITE=NO    Prime WTO area                   @14\n         MVC   MSG200AA,LMOD       Copy LMOD name                   @14\n         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14\n         LHI   R1,BADNRENT         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*\n*        Check module for REUS\n*\nENV093D  DS    0H\n         TM    BLMATTR1,BLA1REUS   Module must be REUS\n         JO    ENV093E             ...jif REUS\n*\n*        Issue WTO that LMOD not REUS\n*\n         $RWTO MSG201A,WRITE=NO    Prime WTO area                   @14\n         MVC   MSG201AA,LMOD       Copy LMOD name                   @14\n         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14\n         LHI   R1,BADNREUS         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*\n*        Check module for REFR\n*\nENV093E  DS    0H\n         TM    BLMATTR1+1,BLA1REFR Module must be REFR\n         JO    ENV093F             ...jif REFR\n*\n*        Issue WTO that LMOD not REFR\n*\n         $RWTO MSG202A,WRITE=NO    Prime WTO area                   @14\n         MVC   MSG202AA,LMOD       Copy LMOD name                   @14\n         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14\n         LHI   R1,BADNREFR         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*\n*        Check module for EXEC\n*\nENV093F  DS    0H\n         TM    BLMATTR1+1,BLA1EXEC Module must be EXEC\n         JO    ENV093G             ...jif EXEC\n*\n*        Issue WTO that LMOD not executable\n*\n         $RWTO MSG203A,WRITE=NO    Prime WTO area                   @14\n         MVC   MSG203AA,LMOD       Copy LMOD name                   @14\n         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14\n         LHI   R1,BADNEXEC         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*\n*        Check module for OVLY (not supported)\n*\nENV093G  DS    0H\n*        TM    BLMATTR1+1,BLA1OVLY Module cannot be OVLY            @14\n         TM    BLMATTR1,BLA1OVLY   Module cannot be OVLY            @14\n         JNO   ENV093H             ...jif not OVLY\n*\n*        Issue WTO that LMOD cannot be OVLY format\n*\n         $RWTO MSG204A,WRITE=NO    Prime WTO area                   @14\n         MVC   MSG204AA,LMOD       Copy LMOD name                   @14\n         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14\n         LHI   R1,BADNOVLY         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*\n*        Check module for SCTR (not supported)\n*\nENV093H  DS    0H\n         TM    BLMATTR1+1,BLA1SCTR Module cannot be SCTR\n         JNO   ENV093I             ...jif not OVLY\n*\n*        Issue WTO that LMOD cannot be SCTR format\n*\n         $RWTO MSG205A,WRITE=NO    Prime WTO area                   @14\n         MVC   MSG205AA,LMOD       Copy LMOD name                   @14\n         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14\n         LHI   R1,BADNSCTR         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*\n*        Check module for RMODE=SPLIT (not supported)\n*\nENV093I  DS    0H\n         SLR   R2,R2               Clear size to acquire register   @14\n         ICM   R2,B'0111',BLMODLN  Get size of module               @14\n         LTR   R2,R2               Was it possibly RMODE=SPLIT      @14\n         JNZ   ENV093J             ...jif not likely                @14\n*                                                                   @14\n*        LMOD was RMODE=SPLIT (not supported)                       @14\n*                                                                   @14\n         $RWTO MSG206A,WRITE=NO    Prime WTO area                   @14\n         MVC   MSG206AA,LMOD       Copy LMOD name                   @14\n         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14\n         LHI   R1,BADNSPLT         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*                                                                   @14\n*        Check module for TEST (not supported)                      @14\n*                                                                   @14\nENV093J  DS    0H                                                   @14\n         TM    BLMATTR1,BLA1TEST   TEST/TESTRAN ?                   @14\n         JNO   ENV093K             ...jif not TEST\n*                                                                   @14\n*        LMOD was TEST/TESTRAN (not supported)                      @14\n*                                                                   @14\n         $RWTO MSG207A,WRITE=NO    Prime WTO area                   @14\n         MVC   MSG207AA,LMOD       Copy LMOD name                   @14\n         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14\n         LHI   R1,BADNTEST         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*                                                                   @14\n*   Verify that module is on 1st library in concatenation sequence  @14\n*                                                                   @14\nENV093K  DS    0H                                                   @14\n         CLI   BLK,X'00'           1st library in concatenation ?   @14\n         JE    ENV093L             ...jif so                        @14\n         $RWTO MSG208A,WRITE=NO    Prime WTO area                   @14\n         MVC   MSG208AA,LMOD       Copy LMOD name                   @14\n         $RWTO WTOD,WRITE=YES      Issue the WTO                    @14\n         LHI   R1,BADNCNCT         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     ENVX                Go make like trees               @14\n*                                                                   @14\n*        Capture module size and entry point offset for reporting,  @14\n*        storage acquisition & possible SVC table update.           @14\n*                                                                   @14\n*        When through:                                              @14\n*                                                                   @14\n*        MODSIZE will contain size of load module                   @14\n*        MODEPOFF will contain entry point offset                   @14\n*                                                                   @14\nENV093L  DS    0H                                                   @14\n         XR    R2,R2               Clear work register              @14\n         ICM   R2,B'0111',BLMODLN  Capture size                     @14\n         ST    R2,MODSIZE           and save for later              @14\n*                                                                   @14\n*   Capture entry point offset for SVC table entry point adjustment @14\n*                                                                   @14\n         XR    R2,R2               Clear work register              @14\n         ICM   R2,B'0111',BLEPADDR Capture entry point offset       @14\n         ST    R2,MODEPOFF          and save for later              @14\n         J     ENVX               <skip rest for now - development> @14\n         AGO   .JH1022A                                             @14\n\n\n\n\n\n*                                                                   @14\n*        Check valid LOCK type combinations for TYPE_SVC            @14\n*                                                                   @14\nENV100   DS    0H                                                   @14\n         CLI   SVC_TYPE,TYPE1      Type 1 SVC ?                     @14\n         JNE   ENV110              ...jif not                       @14\n         TM    LOCKS_FLAGS,LOCKS_LOCAL Local lock requested ?       @14\n         JNO   ENV200              ...jif not                       @14\n* Local lock not valid for type 1 SVC specification                 @14\n         $RWTO MSG068E,WRITE=YES   Write the message                @14\n         $RWTO MSG900I,WRITE=YES   Write details message            @14\n         LHI   R15,BADLOCKS        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     ENVX                  & go return to caller          @14\nENV110   DS    0H                                                   @14\n         CLI   SVC_TYPE,TYPE2      Type 2 SVC ?                     @14\n         JNE   ENV120              ...jif not                       @14\n         J     ENV140              Any lock is possible for type 2  @14\nENV120   DS    0H                                                   @14\n         CLI   SVC_TYPE,TYPE3      Type 3 SVC ?                     @14\n         JE    ENV122              ...jif not                       @14\n         CLI   SVC_TYPE,TYPE4      Type 4 SVC ?                     @14\n         JNE   ENV130              ...jif not                       @14\n* Type 3/4 SVCs can request only LOCAL or LOCAL & CMS locks         @14\n* Type 3/4 SVCs must specify LOCAL if CMS is specified              @14\n*<resume> (above needs a little work here)                          @14\n\n\n\n\n\nENV122   DS    0H                                                   @14\n         TM    SVC_TYPE,X'FF'-LOCKS_LOCAL+LOCKS_CMS LOCAL+CMS locks @14\n         JZ    ENV140              ..jif only LOCAL/LOCAL+CMS locks @14\n         $RWTO MSG068E,WRITE=YES   Write the message                @14\n         $RWTO MSG901I,WRITE=YES   Write details message            @14\n         LHI   R15,BADLOCKS        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     ENVX                  & go return to caller          @14\nENV130   DS    0H                                                   @14\n         CLI   SVC_TYPE,TYPE6      Type 6 SVC ?                     @14\n         JNE   ENV140              ...jif not                       @14\n         CLI   LOCKS_FLAGS,X'00'   Any locks requested ?            @14\n         JE    ENV140                                               @14\n* No locks are valid for type 6 SVC specification                   @14\n         $RWTO MSG068E,WRITE=YES   Write the message                @14\n         $RWTO MSG902I,WRITE=YES   Write details message            @14\n         LHI   R15,BADLOCKS        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     ENVX                  & go return to caller          @14\n*                                                                   @14\n*        PARSE logic error - invalid SVC_TYPE value                 @14\n*                                                                   @14\nENV140   DS    0H                                                   @14\n         $RWTO MSG903E,WRITE=YES   Write the message                @14\n         ABEND 1001,DUMP           U1001 abend                      @14\n*                                                                   @14\n*        SVC LOCKS tests passed - check specific LOCKS authority    @14\n*                                                                   @14\n* Note: This code loops through the LOCK_BRXLE table checking the   @14\n*       requesting user's authority to specify the specific locks   @14\n*       requested. The loop will not be exited until all the valid  @14\n*       type locks have been checked unless no locks at all have    @14\n*       been requested.                                             @14\n*                                                                   @14\nENV200   DS    0H                                                   @14\n         CLI   LOCKS_FLAGS,X'00'   Any LOCKS specified at all ?     @14\n         JE    ENV300              ...jif not,                      @14\n*                                                                   @14\n*        Process the LOCKS authorization table entries              @14\n*                                                                   @14\n         LARL  R1,LOCK_BRXLE       R1 -> far away table             @14\n         LM    R7,R9,0(R1)         Loop control for BRXLE loop      @14\n         SLR   R6,R6                                                @14\nENV210   DS    0H                                                   @14\n         ICM   R6,B'0001',0(R7)    Put lock value in bits 24-31     @14\n         EX    R6,TMLOCK1          Was this lock requested ?        @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nTMLOCK1  TM    LOCKS_FLAGS,*-*     Test for specific LOCK           @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         JNO   ENV290              ...jif not                       @14\n*                                                                   @14\n*        LOCK entry matched one requested by the user so check      @14\n*        the user's authority to use the LOCK requested             @14\n*                                                                   @14\n         TM    7(R7),SPECIAL           user set this lock ?         @14\n         JE    ENV290              ...jif so, go check next lock    @14\n         TM    7(R7),AUTHUSER          user set this lock ?         @14\n         JE    ENV290              ...jif so, go check next lock    @14\n*                                                                   @14\n*        User does not have authority to set this lock              @14\n*                                                                   @14\n* Note: R7 -> LOCK_BRXLE table entry for which the user is not      @14\n*             authorized                                            @14\n*                                                                   @14\n         $RWTO MSG904E,WRITE=NO    Stage the WTO message            @14\n         MVC   MSG904EA,1(R7)      Install the LOCK requested       @14\n         $RWTO WTOD,WRITE=YES      Write the message                @14\n         LHI   R15,AUTHLOCK        Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     ENVX                  & go return to caller          @14\nENV290   BRXLE R7,R8,ENV210        Loop through full table          @14\n*                                                                   @14\n*        To be here the user can set the keyword requested LOCKS &  @14\n*        we now need to check specific SVC type authority           @14\n*                                                                   @14\n* Note: Only SYSTEMS personnel an install Type 1 or Type 6 SVCs     @14\n*                                                                   @14\nENV300   DS    0H                                                   @14\n\n\n\n\n\n\n\n\n\n\n* SVCNO & LMOD are required parameters\n* Default is no locks NPRMPT=___,APF=___,AR=___\n\n\n\n\n\n\n\n\n\n\n\n\n.JH1022A ANOP                                                       @14\nENVX     DS    0H                                                   @14\n         LM    R14,R12,SAVE@L1+12  Restore caller's GPRs            @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n*        AGO   .JH1022B                                             @14\n*<resume here when ready>                                           @14\n\n         AGO   .JH1105B                                             @14\n\n\n*                                                                 * @14\n*        Check JCL PARMS before we attempt the SVCLIB OPEN        * @14\n*                                                                 * @14\nMAIN0110 DS    0H                                                   @14\n         L     R4,@INPARMS         Restore @ parameters for PARSE   @14\n         L     R15,=A(PARSE)       Parse routine address\n         BALR  R14,R15             Go parse parm into function,option\n         DC    S(L'SVCNO,SVCNO)    1st operand\n         DC    S(L'EPNAME,EPNAME)  2nd operand\n         DC    S(L'LOCKS,LOCKS)    3rd operand                      @08\n         DC    S(L'ENDOFDAY,ENDOFDAY) 4th operand\n         DC    S(L'USERID,USERID)  5th operand                      @05\n*EX 0,*                            <Debug only>\n*                                                                   @14\n*        Verify LOCKS parameter                                     @14\n*                                                                   @14\n*%FDIR: Need to retrieve SVC entry to check LOCKs for non type 2,   @14\n*%FDIR: 3 & 4 SVCs                                                  @14\n*                                                                   @14\n         CLI   LOCKS,C' '          Any lock ?                       @08\n*        JE    LOCK6               ...bif not                    @08@14\n         JE    SVCNO2              ...jif not                       @14\n         CLC   =C'C000 ',LOCKS     CMS+local ?                      @08\n         JE    LOCK4               ...jif so                        @08\n         CLC   =C'8000 ',LOCKS     Local lock ?                     @08\n*        JNE   PARMERR             ..jif other, abend condition  @08@14\n         JE    LOCK2               ...jif so, go set local lock     @14\n*                                                                   @14\n*        Invalid LOCKS parameter supplied - issue WTO & exit        @14\n*                                                                   @14\n         $RWTO MSG068E,WRITE=YES   Write the message                @14\n         LHI   R1,BADLOCKS         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\nLOCK2    DS    0H                                                   @14\n         MVI   LOCK#,SVCLL         Set local lock                @08@14\n*        J     LOCK6               Skip next instruction         @08@14\n         J     EOD10               Skip next instruction         @08@14\nLOCK4    MVI   LOCK#,SVCLL+SVCCMS  Set CMS+local                 @08@14\n*OCK6    DS    0H                                                @08@14\n*                                                                   @14\n*        Validate Goodnite time parameter is numeric                @14\n*                                                                   @14\nEOD10    DS    0H                                                   @14\n         CLI   ENDOFDAY,C' '       ENDOFDAY specified ?\n*        JE    INIT34              ...bif not                       @14\n         JE    SVCNO2              ...jif not                       @14\n         UNPK  DWD,=X'0F'          DWD=F0F0F0F0F0F0F0F0\n         MVN   DWD(4),ENDOFDAY     Move HHMM\n         CLC   DWD(4),ENDOFDAY     hhmm numeric ?\n*        JNE   PARMERR             ...bif not, go abend             @14\n         JE    EOD20               ...jif so, continue              @14\n*                                                                   @14\n*        Goodnight time (HHMM) parameter not numeric                @14\n*                                                                   @14\n         $RWTO MSG076E,WRITE=YES   Write the message                @14\n         LHI   R1,BADEOD1          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*                                                                   @14\n*        Validate Goodnite time parameter is in range               @14\n*                                                                   @14\nEOD20    DS    0H                                                   @14\n         MVC   ENDOFDAY,DWD        HHMM -> HHMM0000 (STIMERM)       @14\n         PACK  DWD,ENDOFDAY(4)     Make it decimal                  @14\n         CVB   R5,DWD              Make it binary                   @14\n         ST    R5,Parm_bin_Goodnight Save for later check           @14\n         CHI   R5,2359             > maximum allowed ?              @14\n         JH    EOD30               ...jif so                        @14\n         CHI   R5,1                < minimum allowed ?              @14\n         JL    EOD30               ...jif so                        @14\n         J     EOD40               ...continue EOD checks           @14\n*                                                                   @14\n*        Specified Goodnite time out of range                       @14\n*                                                                   @14\nEOD30    DS    0H                                                   @14\n         $RWTO MSG084E,WRITE=YES   Write the message                @14\n         LHI   R1,BADEOD2          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*                                                                   @14\n*        Verify Goodnight time > current time (current date)        @14\n*                                                                   @14\n*        Current time HHMM value in HOURS & MINUTES fields in       @14\n*        zoned decimal format.                                      @14\n*                                                                   @14\nEOD40    DS    0H                                                   @14\n         PACK  DWD,HOURS(4)        Pack current time (HHMM)         @14\n         CVB   R5,DWD              Make it binary                   @14\n         C     R5,Parm_bin_Goodnight Current > Goodnight time ?     @14\n         JLE   SVCNO2              ...jif not                       @14\n*                                                                   @14\n*        Specified Goodnite time earlier than current time          @14\n*                                                                   @14\n         $RWTO MSG088E,WRITE=YES   Write the message                @14\n         LHI   R1,BADEOD3          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*                                                                   @14\n*        Verify SVCNO parameter                                     @14\n*                                                                   @14\nSVCNO2   DS    0H                                                   @08\n         UNPK  DWD,=X'0F'          DWD=F0F0F0F0F0F0F0F0\n         MVN   DWD(L'SVCNO),SVCNO  Move nnn portion\n         CLC   DWD(L'SVCNO),SVCNO  nnn numeric ?\n*        JNE   PARMERR             ...jif not, go abend             @14\n         JE    SVCNO4              ...jif so, continue              @14\n*                                                                   @14\n*        SVC number parameter not numeric - issue WTO & exit        @14\n*                                                                   @14\n         $RWTO MSG072E,WRITE=YES   Write the message                @14\n         LHI   R1,BADSVCNO         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*                                                                   @14\n*        Verify SVC # is in 0-255 range                             @14\n*                                                                   @14\nSVCNO4   DS    0H                                                   @14\n         PACK  DWD,SVCNO           Pack SVC number (NNN)\n         CVB   R5,DWD               make it binary\n         STC   R5,SVC#               and save SVC# for later\n         CHI   R5,255              > 255 ?                          @14\n         JH    SVCNO6              ...jif so                        @14\n         CHI   R5,0                < 0 ?                            @14\n         JL    SVCNO6              ...jif so                        @14\n*\n*        T1/2/6 ESR slots are off limits\n*\n         CHI   R5,116              T1-ESR ?                         @14\n         JE    SVCNO5              ...jif so (illegal)              @14\n         CHI   R5,122              T2-ESR ?                         @14\n         JE    SVCNO5              ...jif so (illegal)              @14\n         CHI   R5,137              T6-ESR ?                         @14\n         JE    SVCNO5              ...jif so (illegal)              @14\n         J     SVCNO8              Continue                         @14\n*                                                                   @14\n*        Indicate ESR T1/T2/T6 SVC entries not supported            @14\n*                                                                   @14\nSVCNO5   DS    0H                                                   @14\n         $RWTO MSG036A,WRITE=YES   Write the message                @14\n         LHI   R1,BADESRT          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                  & go exit w/ return code       @14\n*                                                                   @14\n*        SVCNO parameter not in range 0-255 - issue WTO & exit      @14\n*                                                                   @14\nSVCNO6   DS    0H                                                   @14\n         $RWTO MSG080E,WRITE=YES   Write the message                @14\n         LHI   R1,BADSVCN2         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*\n*        Retrieve old SVC entry\n*\nSVCNO8   DS    0H                                                   @14\n         L     R3,CVTPTR(0,0)      R3->CVT                          @10\n         USING CVTMAP,R3           CVT addressability\n         L     R4,CVTABEND         R4->Secondary CVT\n         DROP  R3                  Drop CVT\n         USING SCVTSECT,R4         SCVT addressability\n         SLR   R5,R5               Clear for insert                 @14\n         ICM   R5,B'0001',SVC#     Insert SVC number                @14\n         SLL   R5,3                Multiply by 8\n         AL    R5,SCVTSVCT         Add origin of SVC table\n         USING SVCENTRY,R5         SVC entry addressability\n         ST    R5,SVCENTRY_PTR     Save entry address\n         TM    SVCTP,SVCTP34       Type 3/4 ?                       @14\n         JO    SVCNO10             ..jif so                         @14\n         TM    SVCTP,SVCTP2        Residual is Type 2. Was it ?     @14\n         JO    SVCNO10             ...jif so                        @14\n*                                                                   @14\n         DROP  R4                  Drop SCVT addressability         @14\n*                                                                   @14\n*        Existing SVC slot for SVC requested not Type 2/3/4         @14\n*                                                                   @14\n         $RWTO MSG029A,WRITE=YES   Write the message                @14\n         LHI   R1,BADSVCN1         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*                                                                   @14\n*        See if SVC # is ESR SVC for flag setting                   @14\n*                                                                   @14\nSVCNO10  DS    0H                                                   @14\n         MVI   RNAME,C' '          Blank out ENQ RNAME via          @07\n         MVC   RNAME+1(L'RNAME-1),RNAME ripple                      @07\n         MVC   RNAME(3),SVCNO      Complete SVCNO part of RNAME     @07\n*                                                                   @06\n*        ESR   PARM='109,IGX00nnn'                                  @06\n*                                                                   @06\n         CLI   SVC#,109            T3/4 ESR ?                       @06\n         JNE   SVCNO14             ...jif not                       @14\n*                                                                   @14\n*        Enforce ESR T3/4 naming conventions                        @14\n*                                                                   @14\n         UNPK  DWD,=X'0F'          DWD=F0F0F0F0F0F0F0F0             @06\n         MVN   DWD(5),EPNAME+3     Move 00nnn from IGX00nnn         @06\n         CLC   DWD(5),EPNAME+3     00nnn numeric ?                  @06\n         JE    SVCNO12             ...jif so                        @14\n*                                                                   @14\n*        ESR T3/4 SVC naming convention violation                   @14\n*                                                                   @14\n         $RWTO MSG092E,WRITE=YES   Write the message                @14\n         LHI   R1,BADSVCN3         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\nSVCNO12  DS    0H                                                   @14\n         MVC   RNAME+3(3),EPNAME+5 Complete ESR part or RNAME       @07\n         PACK  DWD,EPNAME+3(5)     Pack ESR number (NNN)            @06\n         CVB   R1,DWD               make it binary                  @06\n*        STC   R5,ESR#               and save ESR# for later     @06@12\n         STC   R1,ESR#               and save ESR# for later        @12\n         SLL   R1,3                Multiply by 8                    @06\n         L     R5,SVCEP            R5->ESR table                    @06\n         LA    R5,SVCENTRY+8(R1)   R5->ESR entry                    @06\n         ST    R5,SVCENTRY_PTR     Save ESR entry address           @06\n*                                                                   @06\nSVCNO14  DS    0H                                                @06@14\n         MVC   OLDENTRY,SVCENTRY   Save old SVC entry contents      @03\n*                                                                   @14\n         DROP  R5                  Drop SVC entry addressability    @14\n*                                                                   @14\n*%FDIR: Probably should enforce T1/2 SVC naming conventions here    @14\n*                                                                   @14\n*        OPEN the SVCLIB library for BLDL and LOAD processing       @14\n*                                                                   @14\n* Copy input DCB to area below the 16MB line                        @14\n         MVC   SVCLIB,INDCB#       Copy model DCB to work area      @14\n         MVC   W#OPNDI,X#OPNDI     Install OPEN input execute list  @14\n* OPEN the load library containing IGC24CHK                         @14\n         LA    R11,SVCLIB          R11 -> SVCLIB DCB                @14\n         USING IHADCB,R11          Obtain addressability            @14\n* OPEN the load library containing IGX24CHK code                    @14\n         OPEN  ((R11),INPUT),MODE=31,MF=(E,W#OPNDI) Open SVCLIB     @14\n         TM    DCBOFLGS,DCBOFOPN   Open successful ?                @14\n         JO    EPN10               ...jif OPEN good                 @14\n*                                                                   @14\n*        OPEN for SVCLIB library failed                             @14\n*                                                                   @14\n         $RWTO MSG044E,WRITE=YES                                    @14\n         LHI   R1,BADOPN1          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n* Update BLDLLIST for module name only                              @14\nEPN10    DS    0H                                                   @14\n         MVC   BLDLLIST,=H'1'      Will get only one member         @14\n         MVC   BLDLLL,=H'76'       Set LL to 76 bytes               @14\n         MVC   BLNAME,EPNAME       Install SVC module name          @14\n*                                                                   @14\n         BLDL  (R11),BLDLLIST      Get the directory entry          @14\n*                                                                   @14\n         LTR   R8,R15              Was BLDL OK ?                    @14\n         JZ    EPN20               ...jif so                        @14\n*                                                                   @14\n*        BLDL failed for EPNAME module                              @14\n*                                                                   @14\n         STM   R15,R0,DWD          Save BLDL reaturn/reason codes   @14\n         $RWTO MSG016A,WRITE=YES   Write the message                @14\n         $RWTO MSG016I,WRITE=NO    Prime the WTO area w/ message    @14\n*                                                                   @14\n* Format BLDL return & reason codes into message                    @14\n*                                                                   @14\n* Note: Only low-order bytes need to be formatted (1 in/2 out)      @14\n*                                                                   @14\n         MVC   MSG016IA,EPNAME     Install EPNAME                   @14\n* Format R15 (return code) byte                                     @14\n         LA    R14,DWD+3           R14 -> source area to convert    @14\n         LA    R15,MSG016IB        R15 -> target display area       @14\n         UNPK  0(3,R15),0(2,R14)   unpack into display area         @14\n         MVZ   0(2,R15),=XL17'00'  move zone into display area      @14\n         TR    0(2,R15),=C'0123456789ABCDEF' translate              @14\n         MVI   2(R15),C' '         overlay clobbered byte           @14\n* Format R0  (reason code) byte                                     @14\n         LA    R14,DWD+7           R14 -> source area to convert    @14\n         LA    R15,MSG016IC        R15 -> target display area       @14\n         UNPK  0(3,R15),0(2,R14)   unpack into display area         @14\n         MVZ   0(2,R15),=XL17'00'  move zone into display area      @14\n         TR    0(2,R15),=C'0123456789ABCDEF' translate              @14\n         MVI   2(R15),C' '         overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES      Write the message                @14\n* CLOSE SVCLIB                                                      @14\n         OI    W#OPNDI,X'80'       Indicate end of parameter list   @14\n         CLOSE ((R11)),            Close SVCLIB library             @14X\n               MODE=31,                                             @14X\n               MF=(E,W#OPNDI)                                       @14\n         LHI   R1,BADEPN1          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*                                                                   @14\n*        Verify EPNAME module has the correct attributes            @14\n*                                                                   @14\n* Note: We must honor AMODE & RMODE for the EPNAME module in the    @14\n*       respective SVC table entry                                  @14\n*                                                                   @14\n* Note: Acceptable modules must be marked EXEC, RENT, REFR, REUS    @14\n*       and OVLY=NO                                                 @14\n*                                                                   @14\n* Note: RMODE=SPLIT information is not available unless either the  @14\n*       CSVQUERY service is used or the LOAD macro expansion        @14\n*       requested EXTINFO. This may be needed in the future         @14\n*                                                                   @14\nEPN20    DS    0H                                                   @14\n         TM    BLMATTR1,BLA1EXEC   Executable ?                     @14\n         JNO   EPN25               ...jif not                       @14\n         TM    BLMATTR1,BLA1RENT   Reentrant ?                      @14\n         JNO   EPN25               ...jif not                       @14\n         TM    BLMATTR2,BLA1REFR   Refreshable ?                    @14\n         JNO   EPN25               ...jif not                       @14\n         TM    BLMATTR1,BLA1REUS   Reusable ?                       @14\n         JNO   EPN25               ...jif not                       @14\n         TM    BLMATTR1,BLA1OVLY   OVLY=YES ?                       @14\n         JO    EPN25               ...jif so                        @14\n         TM    BLMATTR1,BLA1SCTR   SCTR=YES ?                       @14\n         JO    EPN25               ...jif so                        @14\n         J     EPN30               Continue checks                  @14\n*                                                                   @14\n*        EPNAME module does not have correct attributes             @14\n*                                                                   @14\nEPN25    DS    0H                                                   @14\n         $RWTO MSG096A,WRITE=YES   Write the message                @14\n         $RWTO MSG096I,WRITE=YES   Write the message                @14\n\n\n         AGO   .JRH998\n         SR    R2,R2               Get size ...\n         ICM   R2,B'0111',BLMODLN  ... of module\n         MODESET KEY=ZERO          Go to key zero\n         GETMAIN RU,LV=(R2),LOC=ANY,SP=228\n         LR    R10,R1              Save @(IGX24CHK)\n         LOAD  DE=BLNAME,DCB=(R11),ADDR=(R10),SF=(E,LOAD#L)\n         MODESET KEY=NZERO         Revert to key 8\n* Close the load library\n         CLOSE ((R11)),MODE=31,MF=(E,W#OPNDI) Close SVCLIB library\n         SPACE 1\n         DROP  R11                 Finished with SVCLIB DCB\n.JRH998  ANOP\n\n\n* CLOSE SYSLIB                                                      @14\n         OI    W#OPNDI,X'80'       Indicate end of parameter list   @14\n         CLOSE ((R11)),            Close SVCLIB library             @14X\n               MODE=31,                                             @14X\n               MF=(E,W#OPNDI)                                       @14\n         LHI   R1,BADEPN2          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*                                                                   @14\n*        Attempt to OS LOAD the EPNAME module                       @14\n*                                                                   @14\n*        R11 -> SVCLIB DCB                                          @14\n*                                                                   @14\nEPN30    DS    0H                                                   @14\n         LOAD  DE=BLNAME,                                           @14X\n               DCB=(R11),                                           @14X\n               ERRET=EPN35,        Error routine                    @14X\n               SF=(E,LOAD4L)                                        @14\n         LR    R3,R0               Preserve R0 from LOAD            @14\n         LR    R4,R1               Preserve R1 from LOAD            @14\n         LTR   R15,R15             Any LOAD problems ?              @14\n         JZ    EPN40               ...jif not, continue checks      @14\n*                                                                   @14\n*        LOAD ERRET routine                                         @14\n*                                                                   @14\n* Note: When entered R1 contains the LOAD abend code and R15        @14\n*       contains the reason code associated with the abend. Exit    @14\n*       from this routine must include logic to close SVCLIB.       @14\n*                                                                   @14\nEPN35    DS    0H                                                   @14\n         ST    R1,DWD              Save R1  (abend code)            @14\n         ST    R15,DWD+4           Save R15 (reason code)           @14\n         $RWTO MSG100A,WRITE=NO    Install message template         @14\n         LA    R1,DWD              Source for hex conversion        @14\n         LA    R15,MSG100AA        Target for hex conversion        @14\n         UNPK  0(9,R15),0(5,R1)    Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         LA    R1,DWD+4            Source for hex conversion        @14\n         LA    R15,MSG100AB        Target for hex conversion        @14\n         UNPK  0(9,R15),0(5,R1)    Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES      Write the message                @14\n* CLOSE SVCLIB                                                      @14\n         OI    W#OPNDI,X'80'       Indicate end of parameter list   @14\n         CLOSE ((R11)),            Close SVCLIB library             @14X\n               MODE=31,                                             @14X\n               MF=(E,W#OPNDI)                                       @14\n         LHI   R1,BADEPN3          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*                                                                   @14\n*        CLOSE the SVCLIB library                                   @14\n*                                                                   @14\nEPN40    DS    0H                                                   @14\n         ST    R0,@LOADEP          Save @ of LOAD'd EPNAME          @14\n         OI    W#OPNDI,X'80'       Indicate end of parameter list   @14\n         CLOSE ((R11)),            Close SVCLIB library             @14X\n               MODE=31,                                             @14X\n               MF=(E,W#OPNDI)                                       @14\n*                                                                   @14\n         DROP  R11                 Finished with SYSLIB DCB         @14\n*                                                                   @14\n*        Check for RMODE=SPLIT for EPNAME module                    @14\n*                                                                   @14\n         SLR   R2,R2               Clear size to acquire register   @14\n         ICM   R2,B'0111',BLMODLN  Get size of module               @14\n         LTR   R2,R2               Was it possibly RMODE=SPLIT      @14\n         JNZ   EPN50               ...jif not likely                @14\n*                                                                   @14\n*        EPNAME was RMODE=SPLIT                                     @14\n*                                                                   @14\n         $RWTO MSG104E,WRITE=YES                                    @14\n         LHI   R1,BADEPN4          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     EXIT                Go make like trees               @14\n*                                                                   @14\n* If the module is a program object with the RMODE(SPLIT)           @14\n* attribute the low-order three bytes contain zeros. To obtain the  @14\n* length and load point information for each segment, issue the     @14\n* CSVQUERY macro with the OUTXTLST parameter.                       @14\n*                                                                   @14\nEPN50    DS    0H                                                   @14\n* Need to return to caller with good return code at this point      @14\n\n\n\n\n\n*                                                                   @14\n*        Insert ESR SVC return code in display format (4 bytes)     @14\n*                                                                   @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG112SB        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n*                                                                   @14\n***********************************************************************\n*                                                                     *\n*        FUNCTION=INSTALL                                             *\n*                                                                     *\n*        User is authorized to install the EPNAME module as an SVC  @14\n*        so acquire the proper ENQueue to protect us from someone   @14\n*        else trying to install the same standard or ESR SVC #.     @14\n*                                                                   @14\n***********************************************************************\nINSTALL  MVC   SVCULIST(MODELS_L),MODELS   MF=L macros\n*                                                                   @11\n*        ESR   PARM='109,IGX00nnn' ?                             @11@14\n*                                                                   @11\nINSTALL0 DS    0H                                                   @14\n         CLI   SVC#,109            T3/4-ESR                      @11@14\n         JNE   INSTALL1            ...jif not                       @11\n         MVC   SVCULIST(MODELESR_L),MODELESR  MF=L macro            @11\n         MVC   SVCUESR#,ESR#   Place 1-byte ESR# in SVCUPDTE plist  @11\nINSTALL1 DS    0H                                                   @11\n         MVC   SVCULOCK,LOCK#      Move lock indicators             @08\n*        ENQ   (,SVCNO),MF=(E,ENQL) Serialize update                @13\n         ENQ   (,RNAME),MF=(E,ENQL) Serialize update                @13\n         LTR   R15,R15             ENQ OK ?\n         JZ    INSTALL4            ...jif okay                      @14\n*                                                                   @14\n*        ENQUEUE for SVCUPDTE_nnn or SVCUPDTE_109nnn failed         @14\n*                                                                   @14\n*        Because of this failure we need to free resources, set     @14\n*        our return code and then exit.                             @14\n*                                                                   @14\n         MODESET KEY=NZERO,MODE=PROB  Return to problem K8 state    @14\n         $RWTO MSG012I,WRITE=YES   Write the message                @14\n         LHI   R15,BADENQ          Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     EXIT                  & go exit w/ return code       @14\n*                                                                   @14\n*        We now need to obtain the necessary CSA/ECSA storage for   @14\n*        the installation of the SVC. We need to use the RMODE of   @14\n*        the EPNAME module to drive the allocation of either <16MB  @14\n*        CSA or >16MB ECSA                                          @14\n*                                                                   @14\n         AGO   .JRH2                                                @14\nINSTALL4 LOAD  EPLOC=EPNAME,       Name of SVC routine                 X\n               GLOBAL=YES,          Load into SP241                    X\n               SF=(E,LOAD4L)\n.JRH2    ANOP                                                       @14\nINSTALL4 DS    0H                                                   @14\n         MODESET KEY=ZERO          We need Key0 for this            @14\n         SLR   R2,R2               Clear size to copy register      @14\n         ICM   R2,B'0111',BLMODLN  Get size to acquire              @14\n         TM    BLARMODE,BLRMANY    RMODE=ANY ?                      @14\n         JO    INSTALL5            ...jif so, go get 31-bit CSA     @14\n*%FDIR: See BLDLLOA2/T code\n* Get 24-bit CSA (SP241 K0)                                         @14\n         STORAGE OBTAIN,           Get 24-bit CSA                   @14X\n               LENGTH=((R2)),                                       @14X\n               LOC=24,                                              @14X\n               SP=241,                                              @14X\n               KEY=0,                                               @14X\n               COND=YES                                             @14\n         J     INSTALL6            Go to resume point               @14\nINSTALL5 DS    0H                                                   @14\n         STORAGE OBTAIN,           Get 31-bit CSA                   @14X\n               LENGTH=((R2)),                                       @14X\n               LOC=31,                                              @14X\n               SP=241,                                              @14X\n               KEY=0,                                               @14X\n               COND=YES                                             @14\nINSTALL6 DS    0H                                                   @14\n         LTR   R15,R15             Did we get the CSA/ECSA          @14\n         JZ    INSTALL7            ...jif so, go copy module        @14\n*                                                                   @14\n*        CSA/ECSA request failed                                    @14\n*                                                                   @14\n         ST    R15,DWD             Save STORAGE return code         @14\n         MODESET KEY=NZERO,MODE=PROB  Return to problem K8 state    @14\n         $RWTO MSG120A,WRITE=NO    Stage the message template       @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG120AA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES      Write the message                @14\n\n\n\n         LHI   R15,BADENQ          Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     EXIT                  & go exit w/ return code       @14\n*                                                                   @14\n*        Copy EPNAME module in PVT to CSA/ECSA                      @14\n*                                                                   @14\nINSTALL7 DS    0H                                                   @14\n         ST    R1,@CSAEPN          Save @ of obtained CSA/ECSA      @14\n         LR    R0,R1               R0 -> copy target area address   @14\n         SLR   R1,R1               Clear size to copy register      @14\n         ICM   R1,B'0111',BLMODLN  Get size of module               @14\n         L     R14,@COPYEPN        R14 = source copy address        @14\n         LR    R15,R1              R15 = copy length                @14\n         MVCL  R0,R14              Copy EPNAME module to CSA/ECSA   @14\n*\n*        Sort out \"true\" entry point address in CSA/ECSA copy\n*\n\n\n\n\n\n\n\n         AGO   .JRH1A\n\nFollowing is from IGXFE:\n\n* SORT OUT THE ENTRY POINT ADDRESS\nDOINSTAL EQU   *\n         SR    R2,R2                    * GET @(EP) RELATIVE ...\n         ICM   R2,B'0111',BLEPADDR      * ... TO START OF MODULE\n         AR    R10,R2                   * COMPUTE ABSOLUTE ENTRY POINT\n         O     R10,AMODE31              * SET AMODE 31 BIT\n* AND INSTALL THE INTERCEPT ADDRESS IN THE ESR TABLE\nESRUPDTE EQU   *\n         MODESET KEY=ZERO,MODE=SUP      * KEY ZERO/SUPERVISOR STATE\n         ENQ   (SYSZSVC,TABLE,E,L'TABLE,SYSTEM),RET=NONE\n         LRA   R2,SVCEP                 * R2 = REAL ADDRESS OF ESRT\n         BC    8,DOLURA1                * JUMP IF OK TO PROCEED\n         LA    R8,4                     * ELSE ...\n         B     INSTDONE                 * ... REJECT UPDATE\nDOLURA1  EQU   *\n         LURA  R3,R2                    * CHECK REAL ADDRESS ...\n         CLC   4(8,R3),IGX00024         * ... POINTS WHERE WE EXPECT\n         BE    DOSTURA1                 * JUMP IF OK TO PROCEED\n         LA    R8,8                     * ELSE ...\n         B     INSTDONE                 * ... REJECT UPDATE\nDOSTURA1 EQU   *\n         STURA R10,R2                   * UPDATE ESR TABLE ENTRY\n         SLR   R8,R8                    * AND SIGNAL UPDATE OK\nINSTDONE EQU   *\n         DEQ   (SYSZSVC,TABLE,L'TABLE,SYSTEM),RET=NONE\n         MODESET KEY=NZERO,MODE=PROB    * KEY 8/PROBLEM STATE\n         LTR   R8,R8                    * ESR TABLE UPDATE OK ?\n         BNZ   BADUPDTE                 * NOPE\n         SR    R9,R9                    * ALL OK, SO SET RC = X\n* SUCCESS - TELL US ALL ABOUT IT\n         MVC   X24I01I+16(8),BLNAME     * MOVE IN MODULE NAME\n         LR    R3,R10                   * COPY NEW ADDRESS\n         SLDL  R2,4                     * SHIFT IN A DUMMY SIGN NIBBLE\n         STM   R2,R3,TEMP8              * STORE IT AS PSEUDO-PACKED\n         UNPK  X24I01I+51(8),TEMP8+3(5) * UNPACK NEW ADDRESS\n         NC    X24I01I+51(8),ZONEMASK   * CONVERT ZONES TO ZEROS\n         TR    X24I01I+51(8),HEXTAB     * CONVERT TO EBCDIC\n         SR    R0,R0                    * CLEAR RX (NO CONSOLE ID)\nX24I01I  WTO   'X24I01I aaaaaaaa successfully installed at xxxxxxxx',\n               ROUTCDE=2,DESC=3\n         B     RETURN\n         DROP  R11                      * FINISHED WITH ESR TABLE\n.JRH1A   ANOP\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n         LR    R6,R0               R6->Entry point\n*\n         LA    R9,DWD              R9 -> DWS subset                 @14\n*        LA    R12,DWD             Inform assembler                 @14\n*        SYNCH UPDATE,STATE=SUPV,RESTORE=YES Update SVC table entry @14\n         BASR  R10,0               Macro internal addressability    @14\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"    @14\n         LARL  R15,UPDATE          Resolve UPDATE entry point       @14\n         SYNCH (R15),              Update                           @14X\n               STATE=SUPV,          SVC table                       @14X\n               RESTORE=YES           entry                          @14\n         DROP  R10             Drop internal macro addressability   @14\n*\n         CLI   ENDOFDAY,C' '       Good night time specified ?      @04\n         JNE   CHKUSER             ...bif so                        @04\n         CLI   USERID,C' '         Userid screening requested ?     @05\n         JNE   CHKUSER             ...Jif so                        @05\n         AGO   .JH14077A                                            @14\n* The following code has been rendered obsolete by the @14 change   @14\n* since we use BLDL/LOAD from only the SVCLIB library and therefore @14\n* neither LPA nor LLA will be searched for EPNAME. Previously if    @14\n* LOADed EPNAME module was determined to be in xLPA we would simply @14\n* exit without updating the SVC table. With the @14 change we no    @14\n* longer perform GLOBAL=YES LOAD operations so this code is of no   @14\n* use.                                                              @14\n*                                                                   @01\n*        Check if the module just loaded was in LPA.                @01\n*        If it was, exit immediately.                               @01\n*                                                                   @01\nCHECKLPA L     R2,PSATOLD-PSA(0,0) My TCB                        @01@10\n         USING TCB,R2                                               @01\n         L     R2,TCBLLS           R2->last LLE                     @01\n         USING LLE,R2                                               @01\n         L     R2,LLECDPT          R2->Corresponding CDE or LPDE    @01\n         USING CDENTRY,R2                                           @01\n* Note: Following test also handles dynamic LPA case                @09\n         TM    CDATTR,CDNIP        LPA module ?                     @01\n         JNO   CHKUSER             ...bif not, check for userid     @05\n         CLC   EPNAME,CDNAME       Right module ?                   @01\n         JNE   CHKUSER             ...bif not, check for userid     @05\n         CL    R6,CDENTPT          Right entry point address ?      @01\n         JE    EXIT                ...bif so, make like trees       @01\n.JH14077A ANOP                                                      @14\n*                                                                   @05\n******************************************************************* @05\n*                                                                 * @05\n*        FUNCTION=CHKUSER                                         * @05\n*                                                                 * @05\n*        Allocate storage in SQA, move the user-ID screening code * @05\n*        into it and set its address into the SVC table.          * @05\n*                                                                 * @05\n******************************************************************* @05\n*                                                                   @05\nCHKUSER  CLI   USERID,C' '         Userid screening requested ?     @05\n         JE    WAIT                ...bif not                       @05\n*                                                                   @05\n         GETMAIN RU,SP=245,LV=CHKU500L,LOC=ANY SQA space            @05\n         ST    R1,SQA_ADDR         Work-area in SQA                 @05\n*                                                                   @05\n         MODESET EXTKEY=ZERO                                        @05\n*        MVC   0(CHKU500L,R1),CHKU500 Move screening code to SQA @05@14\n         LARL  R4,CHKU500          Resolve screening model code     @14\n         MVC   0(CHKU500L,R1),0(R4)   Move screening code to SQA @05@14\n*\n         USING CHKU500,R1                                           @05\n         ST    R6,CHKU500N         @ new SVC                        @05\n         MVC   CHKU500O,OLDENTRY   @ old SVC                        @05\n         MVC   CHKU500U,USERID     User-ID                          @05\n         MVC   CHKU500#,SVCNO      SVC number                       @05\n         DROP  R1                  CHKU500 in SQA                   @05\n         LR    R6,R1               SVC screening code               @05\n         BSM   R6,0                set AMODE bit                    @05\n         MODESET EXTKEY=ZERO                                        @05\n*                                                                   @05\n*        LA    R12,DWD             R12->work area                @05@14\n         LA    R9,DWD              R9 -> DWS portion                @14\n*        SYNCH UPDATE,STATE=SUPV,RESTORE=YES Restore old SVC entr@05@14\n         BASR  R10,0               Macro internal addressability    @14\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"    @14\n         LARL  R15,UPDATE          Resolve UPDATE entry point       @14\n         SYNCH (R15),              Update                           @14X\n               STATE=SUPV,          SVC table entry                 @14X\n               RESTORE=YES           entry                          @14\n         DROP  R10             Drop internal macro addressability   @14\n.JH1105B ANOP                                                       @14\n*\n***********************************************************************\n*                                                                     *\n*        FUNCTION=WAIT                                                *\n*                                                                     *\n*        This routine sets-up a timer for automatic shut-down         *\n*        (if user specified a \"good-night\" time).  It then waits      *\n*        on the communication ECB which is posted by a STOP           *\n*        command or when the timer interval expires.                  *\n*                                                                     *\n***********************************************************************\n*\nWAIT     MODESET EXTKEY=ZERO       Enter Key 0\n*\n         L     R2,PSAAOLD-PSA(0,0) My ASCB                          @10\n         OI    ASCBRCTF-ASCB(R2),ASCBTOFF   Prevent S522\n*\n         MODESET KEY=NZERO         Return to TCB key\n*\n         EXTRACT COMMADDR,FIELDS=COMM,MF=(E,EXTRACTL)\n         L     R2,COMMADDR         ECB/CIB pointers\n*\n         CLI   ENDOFDAY,C'0'       Goodnight time specified ?\n         JL    SET_RCVY            ...bif not, don't set STIMER\n         LARL  R4,GOODNITE         Resolve GOODNITE exit address    @14\n*        STIMERM SET,                                               @14\n*              ID=TIMER_ID,        token                            @14\n*              EXIT=GOODNITE,      Exit routine                     @14\n*              LT=ENDOFDAY,        hhmmss                           @14\n*              PARM=(R2),          ECB/CIB pointers                 @14\n*              MF=(E,STIMER_L)                                      @14\n         STIMERM SET,                                                  X\n               ID=TIMER_ID,        token                               X\n               EXIT=(R4),          Exit routine                     @14X\n               LT=ENDOFDAY,        HHMMSSth                         @14X\n               PARM=(R2),          ECB/CIB pointers                    X\n               MF=(E,STIMER_L)\n*                                                                   @03\n*ET_RCVY ESTAE CANCEL,CT,                                        @03@14\nSET_RCVY DS    0H                                                @03@14\n         LARL  R4,CANCEL           Resolve CANCEL exit address      @14\n         ESTAE ((R4)),CT,                                        @03@14X\n               PARAM=SAVE2,        ESTAE save area                  @03X\n               TERM=YES,           Trap CANCEL commands             @03X\n               MF=(E,ESTAEL)                                        @03\n*\n         L     R1,0(,R2)           R1->Comm ECB\n         WAIT  1,ECB=(R1),LONG=YES WAIT for a STOP command\n*\n         ESTAE 0               Do note trap CANCEL command again    @03\n*                                                                   @03\n******************************************************************* @03\n*                                                                 * @03\n*        FUNCTION=REMOVE                                          * @03\n*                                                                 * @03\n*        This routine re-instates the initial SVC entry saved in  * @03\n*        the OLDENTRY area, frees up SQA storage and then returns * @03\n*                                                                 * @03\n******************************************************************* @03\n*                                                                   @03\n         L     R6,OLDENTRY         R6->old SVC slot entry specifics @03\n*        LA    R12,DWD             R12->work area                @03@14\n         LA    R9,DWD              R9 -> DWS portion             @03@14\n*        SYNCH UPDATE,STATE=SUPV,RESTORE=YES Restore old SVC entr@03@14\n         BASR  R10,0               Macro internal addressability    @14\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"    @14\n         LARL  R15,UPDATE          Resolve UPDATE entry point       @14\n         SYNCH (R15),              Restore old                      @14X\n               STATE=SUPV,          SVC table                       @14X\n               RESTORE=YES           entry                          @14\n         DROP  R10             Drop internal macro addressability   @14\n         ST    R15,RETCODE         Set return code                  @03\n*                                                                   @03\n         ICM   R1,B'1111',SQA_ADDR Work-area in SQA                 @05\n         JZ    EXIT                ...bif not, make like trees      @05\n         FREEMAIN RU,SP=245,A=(R1),LV=CHKU500L SQA space            @05\n*\nEXIT     DS    0H                                                   @14\n         L     R9,RETCODE          Restore return code for caller   @14\n         STORAGE RELEASE,                                           @14X\n               LENGTH=DWSLEN,                                       @14X\n               ADDR=(R13)          Free DSA storage                 @14\n         LR    R15,R9              Set return code for caller       @14\n         PR                    Return to caller via Linkage Stack   @14\n*                                                                   @14\n         TITLE 'SYSC000 - Check system level priviledges'           @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n*        Check for system priviledges to bypass some checks       * @14\n*                                                                 * @14\n* This routine is responsible for setting the following flag(s):  * @14\n*                                                                 * @14\n* MYFLAGS.SPECIAL if user has global \"special\" priviledges        * @14\n*                                                                 * @14\n* Note: A user with RACF \"special\" priviledges is exempted from   * @14\n*       the profile authorization check but the profile for any   * @14\n*       SVC slot being targeted must still exist due to the       * @14\n*       potential impact on the system by a mistyped SVC or ESR   * @14\n*       number.                                                   * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nSYSC000  DS    0H                                                   @14\n         STM   R14,R12,SAVE@L1+12  Save caller's GPRs               @14\n*                                                                   @14\n*        See if invoking user posseses RACF global \"special\"        @14\n*        privileges                                                 @14\n*                                                                   @14\n         L     R2,PSATOLD-PSA(0,0) R2 -> our TCB                    @14\n         USING TCB,R2                                               @14\n         ICM   R2,B'1111',TCBSENV  R2 -> ACEE ?                     @14\n         JNZ   SYSC010             ...jif so                        @14\n         DROP  R2                                                   @14\n         L     R2,PSAAOLD-PSA(0,0) R2 -> our ASCB                   @14\n         USING ASCB,R2                                              @14\n         L     R2,ASCBASXB         R2 -> our ASXB                   @14\n         DROP  R2                                                   @14\n         USING ASXB,R2                                              @14\n         L     R2,ASXBSENV         R2 -> ACEE in effect             @14\n         DROP  R2                                                   @14\n*                                                                   @14\n*        ACEE found, test global SPECIAL attribute                  @14\n*                                                                   @14\nSYSC010  DS    0H                                                   @14\n         LTR   R2,R2               ACEE present ?                   @14\n         JZ    SYSC020             ...jif not (strange condition!)  @14\n         USING ACEE,R2                                              @14\n         MVI   EUSER,C' '          Set field to blanks              @14\n         MVC   EUSER+1(L'EUSER-1),EUSER via ripple                  @14\n         SLR   R3,R3               Clear work register              @14\n         ICM   R3,B'0001',ACEEUSRL Capture length                   @14\n         BCTR  R3,0                Make length EXecutable           @14\n         EX    R3,CAPEUSR          Save ACEEUSRI for displays       @14\n*                                                                   @14\nLTORG_AREA LOCTR ,                                                  @14\nCAPEUSR  MVC   EUSER(*-*),ACEEUSRI Copy execution ACEE userid       @14\nSVCUPDTE LOCTR ,                                                    @14\n*                                                                   @14\n         TM    ACEEFLG1,ACEESPEC   RACF \"SPECIAL\" userid ?          @14\n         JNO   SYSC020                                              @14\n*                                                                   @14\n         DROP  R2                                                   @14\n*                                                                   @14\n*        Invoking user is RACF global \"SPECIAL\" userid              @14\n*                                                                   @14\n         OI    MYFLAGS,SPECIAL     Flag as global \"SPECIAL\"         @14\n*                                                                   @14\n*        Issue informational WTO for RACF global \"SPECIAL\" userid   @14\n*                                                                   @14\n         $RWTO MSG701I,WRITE=NO                                     @14\n         MVC   MSG701IA,EUSER      Install execution ACEE userid    @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         J     SYSC999              and MLT                         @14\nSYSC020  DS    0H                                                   @14\nSYSC999  DS    0H                                                   @14\nSYSCX    DS    0H                                                   @14\n         LM    R14,R12,SAVE@L1+12  Restore caller's GPRs            @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n         AGO   .JH0811B\n         TITLE 'Check_SVCLIB - Check SVCLIB allocation items'       @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n* Check attributes of the SVCLIB allocation                       * @14\n*                                                                 * @14\n* This routine is responsible for the following:                  * @14\n* 1) Make sure the SVCLIB DDname was provided                     * @14\n* 2) Capture SVCLIB data set name & volser from SWA data          * @14\n* 3) Make sure SVCLIB data set is on a single disk volume         * @14\n* 4) Make sure SVCLIB DDname did not supply a member name         * @14\n* 5) Make sure SVCLIB DSORG is PO/POE                             * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nCheck_SVCLIB DS 0H                                                  @14\n         STM   R14,R12,SAVE@L1+12  Save caller's GPRs               @14\n*                                                                   @14\n*        Make sure SVCLIB was provided                              @14\n*                                                                   @14\n         L     R1,PSATOLD-PSA(0,0) R1 -> current TCB                @14\n         L     R1,TCBTIO-TCB(R1)  R1 -> TIOT                        @14\n         LA    R1,TIOELNGH-TIOT1(R1)  R1 -> 1st DDname in TIOT      @14\nCheck_SVCLIB_010 DS 0H                                              @14\n         CLI   0(R1),X'00'         End of TIOT ?                    @14\n         JE    Check_SVCLIB_020    ...jif so, SYSLIB DD missing     @14\n* Note: We reall need a new message for above                       @14\n         CLC   =CL8'SVCLIB',TIOEDDNM-TIOELNGH(R1) SVCLIB DD ?       @14\n         JE    Check_SVCLIB_030    ...jif so                        @14\n         XR    R2,R2               Clear for insert                 @14\n         IC    R2,0(R1)            R2 = TIOELNGH for current entry  @14\n         AR    R1,R2               Point to next TIOT DD entry      @14\n         J     Check_SVCLIB_010     and go check it out             @14\n*                                                                   @14\n*        SVCLIB DD not found - issue WTO & go exit                  @14\n*                                                                   @14\nCheck_SVCLIB_020 DS 0H                                              @14\n         $RWTO MSG004A,WRITE=YES   Write message                    @14\n         LHI   R1,BADENV3          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     Check_SVCLIB_X        & go exit w/ return code       @14\n*                                                                   @14\n*        SVCLIB DD was found - get JFCB for SVCLIB DD for tests     @14\n*                                                                   @14\n*        Note: R1 -> SVCLIB TIOT entry on entry to this label       @14\n*                                                                   @14\nCheck_SVCLIB_030 DS 0H                                              @14\n         LA    R9,EPA              R9 -> EPA                        @14\n         ST    R9,SWEPAPTR         Save in EPA pointer field        @14\n*                                                                   @14\n         USING ZB505,R9            EPA addressability               @14\n*                                                                   @14\n         XC    SWAEPA,SWAEPA       Initialize the EPA               @14\n         MVC   SWVA,TIOEJFCB-TIOELNGH(R1) @JFCB token to EPA        @14\n         XC    SWAREQRC,SWAREQRC   Clear return code work area      @14\n         SWAREQ FCODE=RL,                                           @14X\n               EPA=SWEPAPTR,                                        @14X\n               UNAUTH=YES,                                          @14X\n               MF=(E,SWAPARMS)                                      @14\n         ST    R15,SWAREQRC        Save for debugging               @14\n         LTR   R15,R15             Was function successful ?        @14\n         JZ    Check_SVCLIB_040    ...jif so, go copy JFCB          @14\n*                                                                   @14\n*        SWAREQ encountered an error - just issue WTO with R15      @14\n*                                                                   @14\n*        Note: R15 from SWAREQ service is in SWAREQRC field         @14\n*                                                                   @14\n         $RWTO MSG048S,WRITE=NO                                     @14\n         LA    R1,SWAREQRC         Source for hex conversion        @14\n         LA    R15,MSG048SA        Target for hex conversion        @14\n         UNPK  0(9,R15),0(5,R1)    Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES      Write the completed message      @14\n         LHI   R1,BADSWA           Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     Check_SVCLIB_X        & go exit w/ return code       @14\n*                                                                   @14\n*        Capture SVCLIB data set name & volume                      @14\n*                                                                   @14\nCheck_SVCLIB_040 DS 0H                                              @14\n         L     R14,SWBLKPTR        R14 -> JFCB                      @14\n         MVC   JFCB,0(R14)         Copy JCFB to DWS for debugging   @14\n         LA    R1,JFCB             R1 -> copied JFCB (from SWA)     @14\n*                                                                   @14\n         DROP  R9                  Drop EPA addressability          @14\n*                                                                   @14\n         USING IEFJFCBN,R1         JFCB addressability              @14\n*                                                                   @14\n         MVC   DSN,JFCBDSNM        Capture SVCLIB dsn for later     @14\n         MVC   VOL,JFCBVOLS        Capture 1st volume               @14\n*                                                                   @14\n*        Make sure SVCLIB data set exists on a single disk volume   @14\n*                                                                   @14\n         CLI   JFCBNVOL,X'01'      On single disk volume ?          @14\n         JE    Check_SVCLIB_050    ...jif so                        @14\n*                                                                   @14\n*        SVCLIB library is multi-volume - issue WTO & exit          @14\n*                                                                   @14\n         $RWTO MSG060E,WRITE=YES   Write the message                @14\n         LHI   R1,BADMVOL          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     Check_SVCLIB_X        & go exit w/ return code       @14\n*                                                                   @14\n*        Make sure SVCLIB member name not specified                 @14\n*                                                                   @14\nCheck_SVCLIB_050 DS 0H                                              @14\n         TM    JFCBELNM,X'FF'-X'40' Member name on SVCLIB ?         @14\n         JZ    Check_SVCLIB_060    ...jif not, continue checks      @14\n*                                                                   @14\n*        SVCLIB DDname specified a member name - issue WTO & exit   @14\n*                                                                   @14\n         $RWTO MSG064E,WRITE=YES   Write the message                @14\n         LHI   R1,BADMEM1          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     Check_SVCLIB_X        & go exit w/ return code       @14\n*                                                                   @14\n*        Make sure SVCLIB is DSORG=PO/POE                           @14\n*                                                                   @14\nCheck_SVCLIB_060 DS 0H                                              @14\n         TM    JFCDSRG1,JFCORGPO   PO/POU DSORG ?                   @14\n         JO    Check_SVCLIB_070    ...jif so, skip error code       @14\n*                                                                   @14\n*        DSORG not PO/POE for SVCLIB - issue WTO & exit             @14\n*                                                                   @14\n         $RWTO MSG052E,WRITE=YES   Write the messge                 @14\n         LHI   R1,BADDSORG         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     Check_SVCLIB_X      Go make like trees               @14\n*                                                                   @14\n*        Make sure SVCLIB is RECFM=U                                @14\n*                                                                   @14\nCheck_SVCLIB_070 DS 0H                                              @14\n         TM    JFCRECFM,JFCUND     RECFM=U ?                        @14\n         JO    Check_SVCLIB_080    ...jif so, skip error code       @14\n*                                                                   @14\n         DROP  R1                  Lose JFCB addressability         @14\n*                                                                   @14\n*        RECFM not U for SVCLIB - issue WTO & exit                  @14\n*                                                                   @14\n         $RWTO MSG056E,WRITE=YES   Write the message                @14\n         LHI   R1,BADRECFM         Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     Check_SVCLIB_X      Go make like trees               @14\n*                                                                   @14\n*        Additional SVCLIB library checks go here                   @14\n*                                                                   @14\nCheck_SVCLIB_080 DS 0H                                              @14\n*                                                                   @14\nCheck_SVCLIB_X DS 0H                                                @14\n         LM    R14,R12,SAVE@L1+12  Restore caller's GPRs            @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n.JH0811B ANOP\n         TITLE 'DATETIME - Get date && time for headers'            @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n* DATETIME                                                        * @14\n*                                                                 * @14\n*        This routine is responsible for capturing the current    * @14\n*        date and time for report headers.                        * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nDATETIME DS    0H                                                   @14\n         STM   R14,R12,DATETIMESAVE+12 Save caller's GPRs           @14\n         STCK  STCKAREA            Get \"\"common\" time for algorithm @14\n*                                                                   @14\n*        Send through IBM algorithm circa 1985                      @14\n*                                                                   @14\n         L     R15,CVTPTR          R15 -> CVT                       @14\n         L     R15,CVTEXT2-CVTMAP(,R15) Point at CVT extension      @14\n         USING CVTXTNT2,R15                                         @14\n         LM    R0,R1,STCKAREA      Load TOD clock value             @14\n         AL    R0,CVTLDTO          Add hi-order word                @14\n         AL    R1,CVTLDTO+4        Add low-order word               @14\n         JC    12,*+8              Carry ? Branch if not            @14\n         AL    R0,=F'1'            Add carry                        @14\n         SL    R0,CVTLSO           Subtract hi-order word           @14\n         SL    R1,CVTLSO+4         Subtract low-order word          @14\n         JC    3,*+6               Borrow ? Branch if not           @14\n         BCTR  R0,0                Subtract the borrow              @14\n         DROP  R15                 CVTXTNT2                         @14\n         STM   R0,R1,STCK_Adjusted Save for STCKCONV                @14\n*                                                                   @14\n*        Format current date and time located in the field named    @14\n*        STCK_Adjusted into a 24-character string located in the    @14\n*        field named OUTAREA in the following format:               @14\n*                                                                   @14\n*           hhmmssthmiju0000MMDDYYYY                                @14\n*                                                                   @14\n*           where (left to right):                                  @14\n*                                                                   @14\n*            hh - is hours, based on a 24-hour clock                @14\n*            mm - is minutes                                        @14\n*            ss - is seconds                                        @14\n*            t  - is tenths of a second                             @14\n*            h  - is hundredths of a second                         @14\n*            m  - is milliseconds                                   @14\n*            i  - is ten-thousandths of a second                    @14\n*            j  - is hundred-thousandths of a second                @14\n*            u  - is microseconds                                   @14\n*            0000 - is <filler>                                     @14\n*            MM - is current month (01-12)                          @14\n*            DD - is current day of month                           @14\n*            YYYY - is current year                                 @14\n*                                                                   @14\n         LAM   R1,R1,=F'0'             Assure AR1 is 0              @14\n         STCKCONV STCKVAL=STCK_Adjusted,                            @14X\n               CONVVAL=OUTAREA,                                     @14X\n               TIMETYPE=DEC,                                        @14X\n               DATETYPE=MMDDYYYY,                                   @14X\n               MF=(E,STCKCONVL)                                     @14\n*                                                                   @14\n*        Unpack OUTAREA and store into TIMEDATE area the result of  @14\n*        the STCKCONV.                                              @14\n*                                                                   @14\n*        Note: The STCKCONV output is packed decimal *unsigned*,    @14\n*              while the UNPK instruction expects a sign. Also note @14\n*              that the maximum length operand that UNPK can handle @14\n*              is only 15 bytes, just under what would be needed to @14\n*              handle the character output area from STCKCONV for   @14\n*              time. So, we will unpack OUTAREA a little at a time. @14\n*              Fortunately, both the date and time portions of the  @14\n*              STCKCONV output are multiples of 4 bytes. So we will @14\n*              just loop through the OUTAREA area upacking 4 bytes  @14\n*              at a time.                                           @14\n*                                                                   @14\n*              Packed format: '12 3C'X    ('C' is sign nibble) ==>  @14\n*              UNPK output:   'F1 F2 C3'X (sign nibble and last hex @14\n*                            digit are swapped in unpacked format!) @14\n*                                                                   @14\n*              This code \"fakes\" the sign nibble by unpacking *5*   @14\n*              bytes at a time to get *4* bytes of valid unpacked   @14\n*              output. The rightmost byte in the unpacked output    @14\n*              (containing invalidly wapped digits) is simply       @14\n*              discarded for the current unpack operation and       @14\n*              picked up in the next unpack operation.              @14\n*                                                                   @14\n         LA    R3,4                Set loop bump increment, R3=4    @14\n         LA    R4,8               Set TIMEDATE bump increment, R4=8 @14\n         LA    R5,0                Set up loop counter:             @14\n         SR    R5,R3                R5=-4                           @14\n         LA    R6,OUTAREA-4        R6 -> source area -4             @14\n         LA    R7,UNPKAREA         R7 -> UNPK area                  @14\n         LA    R8,TIMEDATE-8       R8 -> target area -8             @14\nDATETIME_100 DS 0H                                                  @14\n         AR    R5,R3               Bump loop counter by +4          @14\n         AR    R6,R3               Bump OUTAREA pointer by +4       @14\n         AR    R8,R4               Bump TIMEDATE pointer by +8      @14\n         UNPK  0(9,R7),0(5,R6)     UNPK OUTAREA+1 extra byte (sign) @14\n         MVC   0(8,R8),0(R7)  Move UNPKAREA to TIMEDATE (drop sign) @14\n         C     R5,=F'8'            Finished ?                       @14\n         JNE   DATETIME_100        ...jif not, else fall thru done  @14\n*                                                                   @14\nDATEATIMEX DS  0H                                                   @14\n         LM    R14,R12,DATETIMESAVE+12 Restore caller's GPRs        @14\n         BR    R14                 Return to caller                 @14\n*                                                                   @14\n         TITLE 'INIT000 - Initial environmental checks'             @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n* Perform initial environmental checks including the following:   * @14\n*                                                                 * @14\n* 1) Verify we're APF authorized                                  * @14\n* 2) Make sure we're not under TEST/TESTAUTH                      * @14\n* 3) ________________                                             * @14\n*                                                                 * @14\n*                                                                 * @14\n*                                                                 * @14\n*                                                                 * @14\n*                                                                 * @14\n* 3) Get local date & time for WTOs and report lines and GOODNITE * @14\n*    time range check. Returns hhmmssthmiju0000MMDDYYYY formatted * @14\n*    and adjusted time in OUTAREA field.                          * @14\n* 4) Check & assign user's internal authority level               * @14\n*                                                                 * @14\n* Note: This routine is responsible for issuing any pertinent     * @14\n*       WTO message(s) & for setting the return code for the      * @14\n*       caller in the RETCODE field.                              * @14\n*                                                                 * @14\n* Note: Always returns to entry R14 address                       * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nINIT000  DS    0H                                                   @14\n         STM   R14,R12,SAVE@L1+12  Save caller's GPRs               @14\n*                                                                   @14\n*        Initialize some fields                                     @14\n*                                                                   @14\n         MVI   LMOD,X'40'                                           @14\n         MVC   LMOD+1(L'LMOD-1),LMOD                                @14\n         MVI   USERID,X'40'                                         @14\n         MVC   USERID+1(L'USERID-1),USERID                          @14\n*\n*        Check for required APF authorization\n*\n         TESTAUTH FCTN=1           Check APF status\n         LTR   R15,R15             APF authorized ?\n         JZ    INIT010             ...jif so                        @14\n*                                                                   @14\n*        Issue WTO indicating APF authorization needed              @14\n*                                                                   @14\n         $RWTO MSG028A,WRITE=YES                                    @14\n         LHI   R1,NOTAPF           Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     INITX                 & go exit w/ return code       @14\n*                                                                   @14\n*        Make sure we're not under TEST/TESTAUTH                    @14\n*                                                                   @14\nINIT010  DS    0H                                                   @14\n         L     R1,PSATOLD-PSA(0,0) @ TCB                            @14\n         ICM   R1,B'0111',TCBTRNB-TCB(R1)  TEST/TESTAUTH ?          @14\n         JZ    INIT011             ...jif not under TEST/TESTAUTH   @14\n*                                                                   @14\n*        Issue WTO indicating TEST/TESTAUTH environment illegal     @14\n*                                                                   @14\n         $RWTO MSG020A,WRITE=YES                                    @14\n         LHI   R1,BADENV2          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     INITX                 & go exit w/ return code       @14\n*                                                                   @14\n* Prevent execution under TSO or USS environments so program can    @14\n* reside in the active LNKLST set                                   @14\n*                                                                   @14\nINIT011  DS    0H                                                   @14\n         L     R2,PSAAOLD-PSA(0,0) R2 -> ASCB address               @14\n         USING ASCB,R2             Inform assembler                 @14\n         L     R3,PSATOLD-PSA(0,0) Load current TCB address         @14\n         USING TCB,R3              Establish addressability         @14\n*                                                                   @14\n*        Check for TSO address space                                @14\n*                                                                   @14\n         ICM   R15,B'1111',ASCBTSB Is there a TSB ?                 @14\n         JZ    INIT012             ...jif not, continue             @14\n*                                                                   @14\n*        Issue WTO indicating TSO environment not supported         @14\n*                                                                   @14\n         $RWTO MSG021A,WRITE=YES                                    @14\n         LHI   R1,BADENV2          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     INITX                 & go exit w/ return code       @14\n*                                                                   @14\n*        Check for forked/spawned address space                     @14\n*                                                                   @14\nINIT012  DS    0H                                                   @14\n         L     R15,ASCBASSB        R15 -> ASSB address              @14\n         TM    ASSBWMF1-ASSB(R15),ASSBFSAS Forked/Spawned ?         @14\n         JNO   INIT013             ...jif not, continue             @14\n*                                                                   @14\n*     Issue WTO indicating forked/spawned environment not supported @14\n*                                                                   @14\n         $RWTO MSG022A,WRITE=YES                                    @14\n         LHI   R1,BADENV2          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     INITX                 & go exit w/ return code       @14\n*                                                                   @14\n*        Make sure we're in batch address space (WLM or JES)        @14\n*                                                                   @14\nINIT013  DS    0H                                                   @14\n         L     R15,ASCBCSCB        R15 -> CSSB address              @14\n         TM    CHTRKID-CSCB(R15),CHINITID Initiated ?               @14\n         JO    INIT014             ...jif so, continue              @14\n*                                                                   @14\n*        Issue WTO indicating we're not executing in batch          @14\n*                                                                   @14\n         $RWTO MSG023A,WRITE=YES                                    @14\n         LHI   R1,BADENV2          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     INITX                 & go exit w/ return code       @14\n*                                                                   @14\n*        Make sure we're executing under the job step TCB           @14\n*                                                                   @14\nINIT014  DS    0H                                                   @14\n         C     R3,TCBJSTCB         Are we the job step TCB ?        @14\n         JE    INIT015             ...jif so, continue              @14\n*                                                                   @14\n*     Issue WTO indicating we're not running under the job step TCB @14\n*                                                                   @14\n         $RWTO MSG024A,WRITE=YES                                    @14\n         LHI   R1,BADENV2          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     INITX                 & go exit w/ return code       @14\n*                                                                   @14\n*     Make sure we're 1st step in task (cannot be loaded by others) @14\n*                                                                   @14\n*                                                                   @14\n*<wrong> - The following test does not work for an execution in a   @14\n*<wrong>   job step other than the 1st in the job.                  @14\n*                                                                   @14\nINIT015  DS    0H                                                   @14\n         AGO   .JH0914A\n         L     R4,TCBJSCB          Load JSCB address                @14\n         USING IEZJSCB,R4          Inform assembler                 @14\n         L     R4,JSCBACT          Load the active JSCB address     @14\n         CLI   JSCBSTEP,1         Are we the 1st step in the task ? @14\n         JE    INIT016             ...jif so, continue              @14\n.JH0914A ANOP\n* New code follows:                                                 @14\n         L     R15,PSATOLD-PSA(0,0)    Get TCB address              @14\n         L     R15,TCBJSCB-TCB(,R15)   Get JSCB address             @14\n         L     R15,JSCBACT-IEZJSCB(,R15) Get address of active JSCB @14\n         CLC  JSCBPGMN-IEZJSCB(8,R15),=CL8'SVCUPDTX' Job step pgm ? @14\n         JE    INIT016                 ...jif so, continue          @14\n*                                                                   @14\n*     Issue WTO indicating we're not 1st program in job step        @14\n*                                                                   @14\n         $RWTO MSG025A,WRITE=YES                                    @14\n         LHI   R1,BADENV2          Set return code                  @14\n         ST    R1,RETCODE           & save it                       @14\n         J     INITX                 & go exit w/ return code       @14\n*                                                                   @14\n*        DROP  R2,R3,R4            Drop ASCB, TCB, JSCB             @14\n         DROP  R2,R3               Drop ASCB, TCB                   @14\n*                                                                   @14\nINIT016  DS    0H                                                   @14\n*                                                                   @14\n*        Get local time & date for reports                          @14\n*                                                                   @14\n*        Get \"\"common\" time for algorithm                           @14\n*                                                                   @14\nINIT020  DS    0H                                                   @14\n         STCK  STCKAREA                                             @14\n*                                                                   @14\n* Send through IBM algorithm circa 1985                             @14\n*                                                                   @14\n         L     R15,CVTPTR              point at CVT                 @14\n         L     R15,CVTEXT2-CVTMAP(,R15) point at CVT extension      @14\n         USING CVTXTNT2,R15            Obtain addressdability       @14\n         LM    R0,R1,STCKAREA          Load TOD clock value         @14\n         AL    R0,CVTLDTO              Add hi-order word            @14\n         AL    R1,CVTLDTO+4            Add low-order word           @14\n         JC    12,*+8                  Carry ? Branch if not        @14\n         AL    R0,=F'1'                Add carry                    @14\n         SL    R0,CVTLSO               Subtract hi-order word       @14\n         SL    R1,CVTLSO+4             Subtract low-order word      @14\n         JC    3,*+6                   Borrow ? Branch if not       @14\n         BCTR  R0,0                    Subtract the borrow          @14\n         DROP  R15                     CVTXTNT2                     @14\n         STM   R0,R1,STCK_Adjusted     Save for STCKCONV            @14\n*                                                                   @14\n* Format current date and time located in the field named           @14\n* STCK_Adjusted into a 24-character string located in the field     @14\n* field named OUTAREA in the following format:                      @14\n*                                                                   @14\n*           hhmmssthmiju0000MMDDYYYY                                @14\n*                                                                   @14\n*           where (left to right):                                  @14\n*                                                                   @14\n*            hh - is hours, based on a 24-hour clock                @14\n*            mm - is minutes                                        @14\n*            ss - is seconds                                        @14\n*            t  - is tenths of a second                             @14\n*            h  - is hundredths of a second                         @14\n*            m  - is milliseconds                                   @14\n*            i  - is ten-thousandths of a second                    @14\n*            j  - is hundred-thousandths of a second                @14\n*            u  - is microseconds                                   @14\n*            0000 - is <filler>                                     @14\n*            MM - is current month (01-12)                          @14\n*            DD - is current day of month                           @14\n*            YYYY - is current year                                 @14\n*                                                                   @14\n* This information will be used in verifying the Goodnight          @14\n* invocation parameter if supplied & to generate any possible       @14\n* MLWTO announcing the installation of the SVC if all verification  @14\n* tests are passed.                                                 @14\n*                                                                   @14\n         LAM   R1,R1,=F'0'             Assure AR1 is 0              @14\n         STCKCONV STCKVAL=STCK_Adjusted,                            @14X\n               CONVVAL=OUTAREA,                                     @14X\n               TIMETYPE=DEC,                                        @14X\n               DATETYPE=MMDDYYYY,                                   @14X\n               MF=(E,STCKCONVL)                                     @14\n*                                                                   @14\n* Unpack OUTAREA and store into TIMEDATE area the result of the     @14\n* STCKCONV.                                                         @14\n*                                                                   @14\n* NOTE: The STCKCONV output is packed decimal *unsigned*, while the @14\n*       UNPK instruction expects a sign. Also note that the maximum @14\n*       length operand that UNPK can handle is only 15 bytes, just  @14\n*       under what would be needed to handle the 16 character       @14\n*       output area from STCKCONV for time. So, we will unpack      @14\n*       OUTAREA a little at a time. Fortunately, both the date and  @14\n*       time portions of the STCKCONV output are multiples of 4     @14\n*       bytes. So we will just loop through the OUTAREA area        @14\n*       upacking 4 bytes at a time.                                 @14\n*                                                                   @14\n*        Packed format: '12 3C'X    ('C' is sign nibble) ==>        @14\n*        UNPK output:   'F1 F2 C3'X (sign nibble and last hex digit @14\n*                                  are swapped in unpacked format!) @14\n*                                                                   @14\n*       This code \"fakes\" the sign nibble by unpacking *5* bytes at @14\n*       a time to get *4* bytes of valid unpacked output. The       @14\n*       rightmost byte in the unpacked output (containing invalidly @14\n*       swapped digits) is simply discarded for the current unpack  @14\n*       operation and picked up in the next unpack operation.       @14\n*                                                                   @14\n         LA    R3,4                Set loop bump increment, R3=4    @14\n         LA    R4,8               Set TIMEDATE bump increment, R4=8 @14\n         LA    R5,0                Set up loop counter:             @14\n         SR    R5,R3                R5=-4                           @14\n         LA    R6,OUTAREA-4        R6 -> source area -4             @14\n         LA    R7,UNPKAREA         R7 -> UNPK area                  @14\n         LA    R8,TIMEDATE-8       R8 -> target area -8             @14\nINIT030  DS    0H                                                   @14\n         AR    R5,R3               Bump loop counter by +4          @14\n         AR    R6,R3               Bump OUTAREA pointer by +4       @14\n         AR    R8,R4               Bump TIMEDATE pointer by +8      @14\n         UNPK  0(9,R7),0(5,R6)     UNPK OUTAREA+1 extra byte (sign) @14\n         MVC   0(8,R8),0(R7)  Move UNPKAREA to TIMEDATE (drop sign) @14\n         C     R5,=F'8'            Finished ?                       @14\n         JNE   INIT030             ...jif not                       @14\n*                                                                   @14\n*        Check invoking user's internal program authority           @14\n*                                                                   @14\n\n\n\n\n\n\n\n\n\nINITX    DS    0H                                                   @14\n         LM    R14,R12,SAVE@L1+12  Restore caller's GPRs            @14\n         BR    R14                 Return to caller                 @14\n         DROP\n*                                                                   @05\n         TITLE 'CHKU500 - SVC userid screening routine'             @14\n*-----------------------------------------------------------------* @05\n*                                                                 * @05\n*        USER-ID SCREENING ROUTINE                                * @05\n*                                                                 * @05\n*        This code is moved to SQA and executes from there each   * @05\n*        time a program issues an SVC instruction for the new SVC.* @05\n*        If the user-id of the invoker is equal to the user-id    * @05\n*        specified in the parm, then the new SVC is invoked,      * @05\n*        otherwise the old code is called.                        * @05\n*                                                                 * @05\n*-----------------------------------------------------------------* @05\n*                                                                   @05\n         USING TCB,R4              Inform assembler                 @05\n         USING CHKU500,R6          <ditto>                          @05\n         USING ASCB,R7             <ditto>                          @05\nCHKU500  J     CHKU510             Branch around eye-catcher        @05\n         DC    C'SVCUPDTE UTILITY - USER-ID SCREENING',0H'0'        @05\nCHKU510  L     R2,PSAAOLD-PSA(0,0)   R2->my ASCB                 @05@10\n         L     R2,ASCBASXB-ASCB(,R2) R2->my ASXB       .            @05\n         ICM   R2,B'1111',ASXBSENV-ASXB(R2) R2->my ACEE             @05\n         JZ    CHKU530             ...bif no ACEE, use old code     @05\n         USING ACEE,R2                                              @05\n         CLC   ACEEUSRI,CHKU500U   Authorized user ?                @05\n         JE    CHKU540             ...bif so, use new code          @05\nCHKU530  L     R6,CHKU500O         otherwise R6->old SVC            @05\n         BSM   0,R6                and make like trees              @05\nCHKU540  L     R6,CHKU500N         R6->new SVC                      @05\n         BSM   0,R6                and make like trees              @05\nCHKU500O DS    V                   Old SVC entry                    @05\nCHKU500N DS    V                   New SVC entry                    @05\nCHKU500U DS    CL8                 Authorized userid                @05\nCHKU500# DS    C'XXXYYY'           SVC or ESR+SVC                @05@14\nCHKU500L EQU   *-CHKU500                                            @05\n         DROP  ,                                                    @05\n*\n         TITLE 'GOODNITE - End-Of-Day routine'                      @14\n*---------------------------------------------------------------------*\n*                                                                     *\n*        END-OF-DAY ROUTINE                                           *\n*                                                                     *\n*        This routine executes at the end of the timer interval       *\n*        when the user specified a \"good-night\" time in the parm.     *\n*        It posts the communication ECB to simulate a STOP command    *\n*        and allow the main-line to shutdown.                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nGOODNITE BALR  R10,0               Set local base register\n         USING *,R10\n         L     R2,4(,R1)           COMM ECB address\n*@SNAP ((R1),8),((R2),4)\n         MODESET KEY=ZERO          Switch to Key 0\n         POST  (R2),0              Simulate STOP command\n         SVC   3                   Exit\n         DROP  ,                   Drop local addressability\n*\n         TITLE 'CANCEL - ESTAE exit to trap CANCEL commands'        @14\n*-----------------------------------------------------------------* @03\n*                                                                 * @03\n*        ESTAE EXIT USED TO TRAP CANCEL COMMANDS                  * @03\n*                                                                 * @03\n* WARNING: This ESTAE exit currently assumes that the SDWA        * @14\n*          address is always passed. This should be fixed in a    * @14\n*          future enhancement or if it is determined to have      * @14\n*          caused a problem before that time.                     * @14\n*                                                                 * @14\n* This exit expects the following:                                * @14\n*                                                                 * @14\n* -SVCPLOLD structure contains the SVCUPDTE plist for the         * @14\n*  original SVC table entry when we began execution               * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @03\nCANCEL   SAVE  (14,12),,*          Save caller's registers          @03\n         BALR  R11,0               Set local addressability         @03\n         USING *,R11               Inform assembler                 @03\n         LARL  R12,LTORG_AREA                                       @14\n         USING (LTORG_AREA,LTORG_AREA_END),R12                      @14\n         LAE   R12,0(R12,0)        Establish LTORG base             @14\n         LR    R8,R1               R8->SDWA                         @03\n         USING SDWA,R8             Inform assembler                 @03\n         LR    R0,R13              R0->caller's save area           @03\n         L     R13,SDWAPARM        A(SAVE2)                         @03\n         ST    R0,4(,R13)          Chain                            @03\n         USING SAVE2,R13           Inform assembler                 @03\n*                                                                   @03\n* This exit must perform the following functions:                   @14\n* 1) Enqueue on the system SVC table to serialize update            @14\n* 2) Restore the old SVC entry                                      @14\n*                                                                   @14\n*                                                                   @14\n*        ENQueue on the SVC table                                   @14\n*                                                                   @14\nCANC410  DS    0H                                                   @14\n         MVC   ENQ_TABLE(ESVCTMODL),ESVCTMOD                        @14\n         ENQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14\n*                                                                   @14\n*        Did we get exclusive use of the resource ?                 @14\n*                                                                   @14\n         ST    R15,DWD             Save ENQ return code/@ of area   @14\n         LTR   R15,R15             Did we get the SVC table ?       @14\n         JZ    CANC430             ...jif so                        @14\n*                                                                   @14\n*        Issue WTO regarding failure and then retry                 @14\n*                                                                   @14\n         ST    R15,DWD            Save ENQ return code              @14\n         L     R2,DOMID           Pick up possible previous msgid   @14\n         LTR   R2,R2              Any previously issued message ?   @14\n         JZ    CANC420            ...jif not                        @14\n         L     R1,DOMID           GET PREVIOUS MESSAGE ID NO.       @14\n         DOM   MSG=(R1)           DELETE PREVIOUS MESSAGE           @14\nCANC420  DS    0H                                                   @14\n         $RWTO MSG906I,WRITE=NO                                     @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG906IA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n         ST    R1,DOMID            Save msgid for later deletion    @14\n         STIMER WAIT,DINTVL=HOWLONG Wait 5 seconds                  @14\n         J     CANC410               and go try again               @14\n*                                                                   @14\n*        We got the SVC table for this system image so update       @14\n*        the SVC slot with the old information but DOM any          @14\n*        outstanding WTO message we might have issued               @14\n*                                                                   @14\nCANC430  DS    0H                                                   @14\n         L     R2,DOMID           Pick up possible previous msgid   @14\n         LTR   R2,R2              Any previously issued message ?   @14\n         JZ    CANC440            ...jif not                        @14\n         L     R1,DOMID           GET PREVIOUS MESSAGE ID NO.       @14\n         DOM   MSG=(R1)           DELETE PREVIOUS MESSAGE           @14\n*                                                                   @14\n*        Restore the old SVC entry content                          @14\n*                                                                   @14\nCANC440  DS    0H                                                   @14\n*        WTO   'We got the SVC table during ESTAE processing'       @14\n*                                                                   @14\n         MODESET KEY=ZERO,MODE=SUP                                  @14\n         BASR  R10,0               Macro internal addressability    @14\n         USING *,R10               \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"    @14\n*                                                                   @14\n*        Install the new SVC code using the SVCUPLNEW plist         @14\n*                                                                   @14\n         SVCUPDTE MF=(E,SVCUPLOLD)                                  @14\n         DROP  R10             Drop internal macro addressability   @14\n         LR    R4,R15              Preserve return code             @14\n         ST    R15,DWD             Preserve return code             @14\n*                                                                   @14\n*        Drop ENQ on SVC table resource (on success or failure)     @14\n*                                                                   @14\n*        DEQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14\n         DEQ   RET=HAVE,                                            @14X\n               MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @14\n*                                                                   @14\n*        Check SVCUPDTE REPLACE operation return code               @14\n*                                                                   @14\n         MODESET KEY=NZERO,MODE=PROB                                @14\n         LTR   R4,R4               Was update successful ?          @14\n         JZ    CANC450             ...jif successful                @14\n*                                                                   @14\n*        SVCUPDTE was not successful - issue message and clean up   @14\n*        what we can                                                @14\n*                                                                   @14\n         $RWTO MSG918A,WRITE=YES                                    @14\n         $RWTO MSG919A,WRITE=NO                                     @14\n         LA    R14,DWD             R14 -> source area to convert    @14\n         LA    R15,MSG919AA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n*                                                                   @14\n*        Go free any common areas we allocated anyway and expect    @14\n*        abends if this SVC is called                               @14\n*                                                                   @14\n         LHI   R15,BADSVCUR        Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n*%FDIR: Should set specific return code for this failure            @14\n* We must free these areas ourself here                             @14\n         J     CANCX_FREE          Go free our common areas         @14\n*                                                                   @14\n*        Old SVC entry was restored                                 @14\n*                                                                   @14\nCANC450  DS    0H                                                   @14\n         $RWTO MSG200I,WRITE=NO                                     @14\n         LA    R14,OLDENTRY        R14 -> source area to convert    @14\n         LA    R15,MSG200IA        R15 -> target display area       @14\n         UNPK  0(9,R15),0(5,R14)   Unpack                           @14\n         MVZ   0(8,R15),=XL17'00'  Move zoned                       @14\n         TR    0(8,R15),=C'0123456789ABCDEF' Translate              @14\n         MVI   8(R15),C' '         Overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n*                                                                   @14\n*        Go free any common areas we allocated                      @14\n*                                                                   @14\n         XR    R15,R15             Set return code                  @14\n         ST    R15,RETCODE          & save it                       @14\n         J     CANCX_FREE          Go free our common areas         @14\n\n\n*                                                                   @14\n*        Free ESQA storage if allocated before exit                 @14\n*                                                                   @14\nCANCX_FREE DS  0H                                                   @14\n         L     R3,SQA_ADDR         Pick up possible ESQA address\n         LTR   R3,R3               Did we obtain any ESQA ?\n         JZ    CANCX_FREE_A        ...jif not\n         L     R4,=A(CHKU500L)     Get length to free               @14\n         MODESET KEY=ZERO,MODE=SUP\n*\n*        Free obtained ESQA storage\n*\n         STORAGE RELEASE,          Free                                X\n               ADDR=((R3)),         the                                X\n               LENGTH=((R4)),        filter area                       X\n               SP=245\n         XC    SQA_ADDR,SQA_ADDR   Clear pointer                    @14\n*                                                                   @14\n*        Free and CSA/ECSA area allocated before exit               @14\n*                                                                   @14\nCANCX_FREE_A DS 0H                                                  @14\n         L     R3,@CSAEPN          Get possible CSA/ECSA @ to free  @14\n         LTR   R3,R3               Did we obtain any CSA/ECSA ?     @14\n         JZ    CANCX_FREE_B        ...jif not\n         L     R4,MODSIZE          Get length to free               @14\n         MODESET KEY=ZERO,MODE=SUP\n*\n*        Free obtained CSA/ECSA storage\n*\n         STORAGE RELEASE,          Free                                X\n               ADDR=((R3)),         the                                X\n               LENGTH=((R4)),        new SVC code area                 X\n               SP=228\n         XC    @CSAEPN,@CSAEPN     Clear pointer                    @14\n*\n*        Return to caller (RTM)\n*\nCANCX_FREE_B DS 0H                                                  @14\n         MODESET KEY=NZERO,MODE=PROB                                @14\nCANCX    DS    0H                                                   @14\n         L     R13,4(,R13)         Restore entry save area address  @14\n\n\n\n\n         SETRP WKAREA=(R8),REGS=(14,12),RC=00 Set return parameters @03\n         DROP  ,                   Lose local addressability        @03\n.JH1116B ANOP\n\n\n\n\n\n\n\n\n\n\n\n\n\n         AGO   .JH1116A                                             @14\n* Old code follows:                                                 @14\n         L     R6,OLDENTRY         R6->old SVC entry address        @03\n*        LA    R12,DWD             R12->work area                @03@14\n         LA    R9,DWD              R9 -> DWS portion             @03@14\n         SYNCH UPDATE,             Update                        @03@14X\n               STATE=SUPV,          SVC table                    @03@14X\n               RESTORE=YES           entry                       @03@14\n*                                                                   @03\n         ICM   R1,B'1111',SQA_ADDR R1->work-area in SQA             @05\n         JZ    CANCEL99            ...bif not there                 @05\n         LA    R0,CHKU500L         R0 = length to free              @14\n         FREEMAIN RU,SP=245,A=(R1),LV=((R0)) Free SQA space      @05@14\n*                                                                   @03\nCANCEL99 L     R13,4(,R13)         Restore entry save area address  @03\n\n\n\n\n\n\n         SETRP WKAREA=(R8),REGS=(14,12),RC=00 Set return parameters @03\n         DROP  ,                   Lose local addressability        @03\n.JH1116A ANOP                                                       @14\n*\n         TITLE 'UPDATE - update SVC table routine'                  @14\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Update SVC Table Entry                                       *\n*                                                                     *\n* Note: Expects the following on entry -                              *\n*        R6 -> SVC entry point                                        *\n*        R9 -> DWS portion addressability                           @14\n*                                                                     *\n*---------------------------------------------------------------------*\nUPDATE   BALR  R11,0               Local addressability\n         USING *,R11               Inform assembler\n*        USING DWD,R12                                              @14\n         USING DWD,R9              DWS portion addressability       @14\n         LARL  R12,LTORG_AREA                                       @14\n         USING (LTORG_AREA,LTORG_AREA_END),R12                      @14\n         LAE   R12,0(R12,0)        Establish LTORG base             @14\n*\n         ENQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @02\n         MODESET EXTKEY=ZERO       Go to Key 0\n         L     R5,SVCENTRY_PTR     R5->SVC table entry\n         USING SVCENTRY,R5         Inform assembler\n*\n*        See if R/O nucleus backed by 1MB pages & avoid PGSER if so @11\n*                                                                   @11\n         L     R2,CVTPTR(0,0)      R2->CVT                          @11\n         USING CVTMAP,R2           CVT addressability               @11\n         TM    CVTFLAG2,CVTEDAT    Large Page support (R/O nucleus) @11\n         JO    UPDATE1             ...jif so, Nucleus is R/O        @11\n         DROP  R2                                                   @11\n         CLI   SVC#,109            Is this ESR SVC 109 ?            @06\n         JE    UPDATE6         ...bif so, skip SVCUPDTE usage       @06\n*\nUPDATE1  DS    0H                                                   @11\n         SLR   R2,R2               Clear work register\n         IC    R2,SVC#             Pick up SVC number\n         SVCUPDTE (R2),                                                X\n               EP=(R6),                                                X\n               MF=(E,SVCULIST)\n         LR    R3,R15          Set return code from SVCUPDTE service\n         J     UPDATE7             Skip over ESR method             @06\n*                                                                   @06\nUPDATE6  EQU   *                   ESR SVC 109 entry update         @06\n         PGSER R,UNPROTECT,A=SVCENTRY,EA=SVCENTRY+1 Unprotect SVC T @06\n         ST    R6,SVCEP            Update ESRTABLE                  @06\n         SLR   R3,R3               Set RC=0                         @06\n         PGSER R,PROTECT,A=SVCENTRY,EA=SVCENTRY+1 Protect SVC entry @06\n*                                                                   @06\nUPDATE7  EQU   *                                                    @06\n         DEQ   MF=(E,ENQ_TABLE)    SYSZSVC/TABLE/SYSTEM             @02\n         LR    R15,R3              Pass return code\n         SVC   3                   Goback to SYNCH\n*                                                                   @14\n         TITLE 'SVCUPDTE -- Report header lines'                    @14\n* Following line added by @14 change                                @14\nUSRHD#1  DC    CL121'1Program: ________ V1R0M0 assembly Date/Time: MM/DX\n               D/YYYY at HH:MM '                                    @14\n         DC    C'Pagezzzzzzzn'                                      @14\nUSRHD#1L EQU   *-USRHD#1                                            @14\nUHDL1#1  EQU   HDRLINE+10,8        Program name                     @14\nUHDL1#2  EQU   HDRLINE+19,6        Program version                  @14\nUHDL1#3  EQU   HDRLINE+46,2        Program date (MM)                @14\nUHDL1#4  EQU   HDRLINE+49,2        Program date (DD)                @14\nUHDL1#5  EQU   HDRLINE+52,4        Program date (YYYY)              @14\nUHDL1#6  EQU   HDRLINE+60,2        Program time (HH)                @14\nUHDL1#7  EQU   HDRLINE+63,2        Program time (MM)                @14\nUHDL1#8  EQU   HDRLINE+125,8       Page Number                      @14\n*                                                                   @14\n         DS    0H                  <alignment>                      @14\nUSRHD#2  DC    C' Execution time: HH:MM:SS on 06/24/2014 '          @14\nUSRHD#2L EQU   *-USRHD#2                                            @14\nUHDL2#1  EQU   HDRLINE+17,2        HH                               @14\nUHDL2#2  EQU   HDRLINE+20,2        MM                               @14\nUHDL2#3  EQU   HDRLINE+23,2        SS                               @14\nUHDL2#4  EQU   HDRLINE+29,2        MM                               @14\nUHDL2#5  EQU   HDRLINE+32,2        DD                               @14\nUHDL2#6  EQU   HDRLINE+35,4        YYYY                             @14\n*                                                                   @14\n         DS    0H                  <alignment>                      @14\nUSRHD#3  DC    C' Title: Defined SVC slots && Current Usage Report' @14\nUSRHD#3L EQU   *-USRHD#3                                            @14\nUHDL3#1  EQU   HDRLINE+18,7        Input parameter                  @14\n*                                                                   @14\n         DS    0H                  <alignment>                      @14\nUSRHD#4  DC    CL29'0    Profile                '                   @14\n         DC    CL17'Installation Data'                              @14\nUSRHD#4L EQU   *-USRHD#4                                            @14\n*                                                                   @14\n         DS    0H                  <alignment>                      @14\nUSRHD#5  DC    CL17'+_______________  '                             @14\n         DC    44C'_'                                               @14\nUSRHD#5L EQU   *-USRHD#5                                            @14\n*                                                                   @14\n\n\n\n\n\n\n\n         AGO   .JH0805A\n\n\n0    Profile                Installation Data\n+_______________  __________________________________________________\n 12345678_nnnfff\n    Profile                Installation Data\n___________________________________________________________________\nSVCUPDTE_nnnfff  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n                 Owner: 12345678\n                 Status: SVC slot is not currently in use.\n    SVC slot currently in use by job nameENQTESTTin ASID 0x0048.\n                  ACLID    ACLACS\n                 ________ ________\n                 12345678 CONTROL\n                 12345678 ALTER\n                 12345678 READ\n                 12345678 UPDATE\n                 12345678 NONE\n\nDouble space between entries\n\n\nProfile            Owner    ACLID    ACLACS\nSVCUPDTE_nnnfff  12345678  12345678 12345678\n\nSVCU700D - Profile: SVCUPDTE_109200\nSVCU701D - Installation data: JOHN HAMLET\nSVCU702D - OWNER: SYS1       UACC: NONE\nSVCU704D - Status: SVC slot is not currently in use.\nSVCU703D - VINUGE  : ALTER\nSVCU703D - SASJRH  : CONTROL\n\n\n.JH0805A ANOP\n\n\n\n\n\n\n*                                                                   @14\n         TITLE 'SVCPCL   - PCL for IKJPARS'                         @14\n\n* Syntax is:\n* SVC(aaa,bbb),TYPE(n),LOCKS(LOCAL,CMS,SRM,SALLOC,DISP),\n* ATTR(NPRMT,APF,AR,ASF),LMOD(xxxxxxxx),GOODNITE(nnnn),USER(xxxxxxxx)\n*\nSVCCPL   IKJPARM DSECT=DSVCCPL\nSVCCPL   CSECT\nSVCCPL   AMODE 31\nSVCCPL   RMODE ANY\n* SVC keyword\nMSVCKW   IKJKEYWD\n         IKJNAME 'SVC',SUBFLD=SUBMSVC\n* TYPE keyword\nMTYPKW   IKJKEYWD ,\n         IKJNAME 'TYPE',SUBFLD=SUBMTYP\n* LOCKS keyword\nMLCKKW   IKJKEYWD\n         IKJNAME 'LOCKS',SUBFLD=SUBMLCK\n* ATTR keyword\nMATRKW   IKJKEYWD ,\n         IKJNAME 'ATTR',SUBFLD=SUBMATR\n* LMOD keyword\nMMODKW   IKJKEYWD\n         IKJNAME 'LMOD',SUBFLD=SUBMMOD\n* GOODNITE keyword\nMGDNKW   IKJKEYWD ,\n         IKJNAME 'GOODNITE',SUBFLD=SUBMGDN\n* USER keyword\nMUSRKW   IKJKEYWD\n         IKJNAME 'USER',SUBFLD=SUBMUSR\n*\n* SUBFIELDS\n*\n* SVC(aaa,bbb)\nSUBMSVC  IKJSUBF\nMSVC     IKJIDENT 'SVC NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,            X\n               MAXLNTH=3\nMSVCR    IKJIDENT 'ROUTING NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,        X\n               MAXLNTH=3\n* TYPE(n)\nSUBMTYP  IKJSUBF ,\nMTYP     IKJIDENT 'SVC TYPE',UPPERCASE,FIRST=NUMERIC,                  X\n               MAXLNTH=1\n* LOCKS(LOCAL,CMS,SRM,SALLOC,DISP)\nSUBMLCK  IKJSUBF\nMLOCAL   IKJKEYWD\n         IKJNAME 'LOCAL'\nMCMS     IKJKEYWD\n         IKJNAME 'CMS'\nMSRM     IKJKEYWD\n         IKJNAME 'SRM'\nMSALLOC  IKJKEYWD\n         IKJNAME 'SALLOC'\nMDISP    IKJKEYWD\n         IKJNAME 'DISP'\n* ATTR(NPRMT,APF,AR,ASF)\nSUBMATR  IKJSUBF\nMNPRMT   IKJKEYWD\n         IKJNAME 'NPRMT'\nMAPF     IKJKEYWD\n         IKJNAME 'APF'\nMAR      IKJKEYWD\n         IKJNAME 'AR'\nMASF     IKJKEYWD\n         IKJNAME 'ASF'\n* GOODNITE(HHMM)\nSUBMGDN  IKJSUBF\n*GDN     IKJIDENT 'GOODNITE',UPPERCASE,FIRST=NUMERIC,OTHER=NUMERIC,   X\n*              MAXLNTH=4\nMGDN     IKJIDENT 'GOODNITE',UPPERCASE,                                X\n               MAXLNTH=4,CHAR\n* USER(xxxxxxxx)\nSUBMUSR  IKJSUBF\n*MUSR     IKJPOSIT USERID\nMUSR     IKJIDENT 'USER',UPPERCASE,MAXLNTH=8,FIRST=ANY,OTHER=ANY\n*\nSUBMMOD  IKJSUBF\nMMOD     IKJIDENT 'LOAD MODULE',UPPERCASE,FIRST=ALPHA,OTHER=ALPHA,     X\n               MAXLNTH=8,CHAR\n         IKJENDP\nSVCUPDTE CSECT                     <Resume original CSECT>\n*                                                                   @14\n         TITLE 'TRTPARM1 - translation table for input parameters'  @14\nTRTPARM1 DS    0H                  Translate table                  @14\n*=================================================================* @14\n* The following translate table is purely for validating the      * @14\n* input parameter string as having only acceptable characters     * @14\n* prior to that parameter string being parsed. Only alphanumeric, * @14\n* national (@,#,$), and the special characters \",\", \")\", \"(\" and  * @14\n* \"$\" are supported. The table is built for use with TRT where    * @14\n* GPR2 will receive the function byte from the table. In this     * @14\n* case, any non-zero function byte being returned in GPR2 would   * @14\n* represent at least one illegal character was found in the       * @14\n* tested area. Legal character positions contain X'00'.           * @14\n*=================================================================* @14\n*                    0 1 2 3 4 5 6 7 8 9 A B C D E F                @14\n         DC    XL16'08080808080808080808080808080808'  00 - 0F      @14\n         DC    XL16'08080808080808080808080808080808'  10 - 1F      @14\n         DC    XL16'08080808080808080808080808080808'  20 - 2F      @14\n         DC    XL16'08080808080808080808080808080808'  30 - 3F      @14\n*                                              (                    @14\n         DC    XL16'08080808080808080808080808000808'  40 - 4F      @14\n*                                          $   )                    @14\n         DC    XL16'08080808080808080808080008000808'  50 - 5F      @14\n*                                          ,                        @14\n         DC    XL16'08080808080808080808080008080808'  60 - 6F      @14\n*                                          # @   =                  @14\n         DC    XL16'08080808080808080808080000080008'  70 - 7F      @14\n*                      a b c d e f g h i                            @14\n         DC    XL16'08000000000000000000080808080808'  80 - 8F      @14\n*                      j k l m n o p q r                            @14\n         DC    XL16'08000000000000000000080808080808'  90 - 9F      @14\n*                        s t u v w x y z                            @14\n         DC    XL16'08080000000000000000080808080808'  A0 - AF      @14\n         DC    XL16'08080808080808080808080808080808'  B0 - BF      @14\n*                      A B C D E F G H I                            @14\n         DC    XL16'08000000000000000000080808080808'  C0 - CF      @14\n*                      J K L M N O P Q R                            @14\n         DC    XL16'08000000000000000000080808080808'  D0 - DF      @14\n*                        S T U V W X Y Z                            @14\n         DC    XL16'08080000000000000000080808080808'  E0 - EF      @14\n*                    0 1 2 3 4 5 6 7 8 9                            @14\n         DC    XL16'00000000000000000000080808080808'  F0 - FF      @14\n*                                                                   @14\n         TITLE 'TRTPARM2 - translation table for comma only'        @14\nTRTPARM2 DS    0H                  Translate table                  @14\n*=================================================================* @14\n* The following translate table is purely for locating commas in  * @14\n* an input string. The table is built for use with TRT where GPR2 * @14\n* will receive the function byte from the table. In this case,    * @14\n* any non-zero function byte being returned in GPR2 would         * @14\n* represent at least one illegal character was found in the       * @14\n* tested area. Legal character positions contain X'00'.           * @14\n*=================================================================* @14\n*                    0 1 2 3 4 5 6 7 8 9 A B C D E F                @14\n         DC    XL16'00000000000000000000000000000000'  00 - 0F      @14\n         DC    XL16'00000000000000000000000000000000'  10 - 1F      @14\n         DC    XL16'00000000000000000000000000000000'  20 - 2F      @14\n         DC    XL16'00000000000000000000000000000000'  30 - 3F      @14\n         DC    XL16'00000000000000000000000000000000'  40 - 4F      @14\n         DC    XL16'00000000000000000000000000000000'  50 - 5F      @14\n*                                          ,                        @14\n         DC    XL16'00000000000000000000000400000000'  60 - 6F      @14\n         DC    XL16'00000000000000000000000000000000'  70 - 7F      @14\n         DC    XL16'00000000000000000000000000000000'  80 - 8F      @14\n         DC    XL16'00000000000000000000000000000000'  90 - 9F      @14\n         DC    XL16'00000000000000000000000000000000'  A0 - AF      @14\n         DC    XL16'00000000000000000000000000000000'  B0 - BF      @14\n         DC    XL16'00000000000000000000000000000000'  C0 - CF      @14\n         DC    XL16'00000000000000000000000000000000'  D0 - DF      @14\n         DC    XL16'00000000000000000000000000000000'  E0 - EF      @14\n         DC    XL16'00000000000000000000000000000000'  F0 - FF      @14\n*                                                                   @14\n         TITLE 'HEXUPPER - translation table for input parameters'  @14\nHEXUPPER DS    0H                                                   @14\n*=================================================================* @14\n* The following translate table is purely for upper casing the    * @14\n* input parameter string which may contain alphanumeric or        * @14\n* national ($,@,@) characters in the LMOD field for a Type 1 SVC  * @14\n* along with the assignment (\"=\" sign) character and the comma    * @14\n* field separator character. Blanks are not allowed at this time. * @14\n* allowed at this time.                                           * @14\n*=================================================================* @14\n*                    0 1 2 3 4 5 6 7 8 9 A B C D E F                @14\n         DC    XL16'00000000000000000000000000000000'  00 - 0F      @14\n         DC    XL16'00000000000000000000000000000000'  10 - 1F      @14\n         DC    XL16'00000000000000000000000000000000'  20 - 2F      @14\n         DC    XL16'00000000000000000000000000000000'  30 - 3F      @14\n*                                              (                    @14\n         DC    XL16'000000000000000000000000004D0000'  40 - 4F      @14\n*                                          $   )                    @14\n         DC    XL16'00000000000000000000005B005D0000'  50 - 5F      @14\n*                                          ,                        @14\n         DC    XL16'00000000000000000000006B00000000'  60 - 6F      @14\n*                                          # @   =                  @14\n         DC    XL16'00000000000000000000007B7C007E00'  70 - 7F      @14\n*                      a b c d e f g h i                            @14\n         DC    XL16'00C1C2C3C4C5C6C7C8C9000000000000'  80 - 8F      @14\n*                      j k l m n o p q r                            @14\n         DC    XL16'00D1D2D3D4D5D6D7D8D9000000000000'  90 - 9F      @14\n*                        s t u v w x y z                            @14\n         DC    XL16'0000E2E3E4E5E6E7E8E9000000000000'  A0 - AF      @14\n         DC    XL16'00000000000000000000000000000000'  B0 - BF      @14\n*                      A B C D E F G H I                            @14\n         DC    XL16'00C1C2C3C4C5C6C7C8C9000000000000'  C0 - CF      @14\n*                      J K L M N O P Q R                            @14\n         DC    XL16'00D1D2D3D4D5D6D7D8D9000000000000'  D0 - DF      @14\n*                        S T U V W X Y Z                            @14\n         DC    XL16'0000E2E3E4E5E6E7E8E9000000000000'  E0 - EF      @14\n*                    0 1 2 3 4 5 6 7 8 9                            @14\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9000000000000'  F0 - FF      @14\n*                                                                   @14\n*                                                                   @14\n         TITLE 'DELIMTAB - translation table for parm delimiters'   @14\nDELIMTAB DS    0H                  Translate table                  @14\n*=====================================================================*\n* The following translate table is purely for identifying delimiters  *\n* in the input parameter string. The only valid function byte in the  *\n* table at this time is at X'6B', the EBCDIC comma location, and it's *\n* value has been set to X'04' so that this value can be used as a     *\n* displacement offest from a branch table origin by the caller.       *\n*                                                                     *\n* Additional delimiters can be added to the table if desired and they *\n* should be documented here if such action is performed. All users of *\n* this table will be impacted in some form or fashion by additions to *\n* this table.                                                         *\n*                                                                     *\n* position value Comment                                              *\n*   6B      04   Comma                                                *\n*   7E      08   Equal                                                *\n*   4D      0C   Left parenthesis                                     *\n*   5D      10   Right parenthesis                                    *\n*                                                                     *\n*=====================================================================*\n*                    0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    XL16'00000000000000000000000000000000'  00 - 0F\n         DC    XL16'00000000000000000000000000000000'  10 - 1F\n         DC    XL16'00000000000000000000000000000000'  20 - 2F\n         DC    XL16'00000000000000000000000000000000'  30 - 3F\n*                                              (\n         DC    XL16'000000000000000000000000000C0000'  40 - 4F\n*                                              )\n         DC    XL16'00000000000000000000000000100000'  50 - 5F\n*                                          ,\n         DC    XL16'00000000000000000000000400000000'  60 - 6F\n*                                                =\n         DC    XL16'00000000000000000000000000000800'  70 - 7F\n         DC    XL16'00000000000000000000000000000000'  80 - 8F\n         DC    XL16'00000000000000000000000000000000'  90 - 9F\n         DC    XL16'00000000000000000000000000000000'  A0 - AF\n         DC    XL16'00000000000000000000000000000000'  B0 - BF\n         DC    XL16'00000000000000000000000000000000'  C0 - CF\n         DC    XL16'00000000000000000000000000000000'  D0 - DF\n         DC    XL16'00000000000000000000000000000000'  E0 - EF\n         DC    XL16'00000000000000000000000000000000'  F0 - FF\n*\n*\n         TITLE 'Internal BRXLE && other tables && constants'        @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n*        Valid LOCKS subparameters & authorization required       * @14\n*                                                                 * @14\n*        Note: The following is the layout of each entry in the   * @14\n*              table:                                             * @14\n*                                                                 * @14\n*              Offset Length   Meaning/Purpose                    * @14\n*              ====== ====== ==================================== * @14\n*               +00     1    IHASVC SVCLOCKS equate for LOCK      * @14\n*               +01     6    LOCK type keyword                    * @14\n*               +07     1    Authority required to set this lock  * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\n         PUSH  PRINT                                                @14\n         PRINT DATA,GEN                                             @14\nLOCK_BRXLE DC  A(LOCK_START,LOCK_entry_len,LOCK_END-LOCK_entry_len) @14\n*                                                                   @14\nLOCK_START DS  0H                                                   @14\n         DC    AL1(SVCLL),C'LOCAL ',AL1(AUTHUSER)                   @14\nLOCK_entry_len EQU *-LOCK_START    Generate length of table entry   @14\n         DC    AL1(SVCDISP),C'DISP  ',AL1(SPECIAL)                  @14\n         DC    AL1(SVCOPT),C'SRM   ',AL1(SPECIAL)                   @14\n         DC    AL1(SVCCMS),C'CMS   ',AL1(AUTHUSER)                  @14\n         DC    AL1(SVCALLOC),C'SALLOC',AL1(SPECIAL)                 @14\nLOCK_END EQU   *                   End of LOCKS table               @14\n         POP   PRINT                                                @14\n*                                                                   @14\n*        RIBs workarea size to acquire                              @14\n*                                                                   @14\nRIBSPACE DC    F'1024'         Size of GQSCAN wirkarea to acquire   @14\n*                                                                   @14\n*-----------------------------------------------------------------* @14\n*                                                                 * @14\n*        SVC type authorization requirements                      * @14\n*                                                                 * @14\n*-----------------------------------------------------------------* @14\nSVC_BRXLE DC   A(SVC_START,SVC_entry_len,SVC_END-SVC_entry_len)     @14\n*                                                                   @14\nSVC_START DS   0H                                                   @14\n         DC    C'1',AL1(AUTHUSER)                                   @14\nSVC_entry_len EQU *-SVC_START      Generate length of table entry   @14\n         DC    C'2',AL1(AUTHUSER)                                   @14\n         DC    C'3',AL1(AUTHUSER)                                   @14\n         DC    C'4',AL1(AUTHUSER)                                   @14\n         DC    C'6',AL1(AUTHUSER)                                   @14\nSVC_END  EQU   *                                                    @14\n*                                                                   @14\nBLANKS   DC    X'40'               Blank padding byte (MVCLs)       @14\n*                                                                   @14\nTYPE1    EQU   C'1'                TYpe 1 SVC                       @14\nTYPE2    EQU   C'2'                TYpe 2 SVC                       @14\nTYPE3    EQU   C'3'                TYpe 3 SVC                       @14\nTYPE4    EQU   C'4'                TYpe 4 SVC                       @14\nTYPE6    EQU   C'6'                TYpe 6 SVC                       @14\n*                                                                   @14\n*        SVC type w/ SVCTP (IHASVC) & SVCUPDTE macro equates        @14\n*                                                                   @14\n*        Layout is as follows:                                      @14\n*                                                                   @14\n*        +0 - Zoned decimal SVC type (1, 2, 3, 4, or 6)             @14\n*        +1 - SVCUPDTE macro expansion equate (offset +08)          @14\n*        +2 - IHASVC SVCTP field equate                             @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nSVC_types_BRXLE DC A(SVC_types_START,TYPES_entry_len,TYPES_end-TYPES_enX\n               try_len)                                             @14\n*                                                                   @14\nSVC_types_START DS 0H\n         DC    C'1',X'01',X'00'    Type 1 SVC equates\nTYPES_entry_len EQU *-SVC_types_START                               @14\n         DC    C'2',X'02',X'80'    Type 2 SVC equates\n         DC    C'3',X'03',X'C0'    Type 3 or 4 SVC equates\n         DC    C'4',X'04',X'C0'    Type 3 or 4 SVC equates\n         DC    C'6',X'06',X'20'    Type 6 SVC equates\nTYPES_end EQU  *-SVC_types_START                                    @14\n*                                                                   @14\n*        Multi-line WTO audit text                                  @14\n*                                                                   @14\nMLWTOPREFIX DS 0H                                                   @14\nCNTLLINE DC    Y(34),CL34'SVCU000I SVC install audit report'        @14\n* Following lines thru DATALINE8 added by @14 change                @14\n*                         000000000111111111122222222223333333333444444\n*                         123456789012345678901234567890123456789012345\n*              4444555555555566666666667\n*              6789012345678901234567890\nSTARLINE DC    Y(70),CL70'SVCU001I ************************************X\n               *************************'                           @14\nDATALINE2  DC  Y(70),CL70'SVCU002I * Installing userid=_        LMOD=_ X\n                      SIZE: _          *'                           @14\nDATALINE2_userid EQU DATALINE2+2+29,8  requesting uid               @14\nDATALINE2_LMOD   EQU DATALINE2+2+43,8  LMOD                         @14\nDATALINE2_SIZE   EQU DATALINE2+2+58,8  SIZE                         @14\n*                                                                   @14\nDATALINE3  DC  Y(70),CL70'SVCU003I * Entry_point: _        Load_point: X\n               _                       *'                           @14\nDATALINE3_EP     EQU DATALINE3+2+24,8  Entry Point                  @14\nDATALINE3_LP     EQU DATALINE3+2+45,8  Load Point                   @14\n*                                                                   @14\nDATALINE4  DC  Y(70),CL70'SVCU004I * AMODE=_  RMODE=_   Old SVC entry pX\n               oint: _                 *'                           @14\nDATALINE4_AMODE  EQU DATALINE4+2+17,2  AMODE (31|24|ANY)            @14\nDATALINE4_RMODE  EQU DATALINE4+2+26,3  RMODE (31|24|ANY)            @14\nDATALINE4_OLDEP  EQU DATALINE4+2+51,8  Old SVC EP                   @14\n*                                                                   @14\nDATALINE5  DC  Y(70),CL70'SVCU005I * DSN=_                             X\n                              / _      *'                           @14\nDATALINE5_SVCLIB EQU DATALINE5+2+15,44 SVCLIB data set              @14\nDATALINE5_VOLSER EQU DATALINE5+2+62,6  VOLSER for SVCLIB            @14\n*                                                                   @14\nDATALINE6  DC  Y(70),CL70'SVCU006I * Address of ESQA resident USER filtX\n               er code is _            *'                           @14\nDATALINE6_ESQA@ EQU DATALINE6+2+56,8 ESQA @ of filter code or \"n/a\" @14\n*                                                                   @14\nDATALINE7  DC  Y(70),CL70'SVCU007I * PARM: _                           X\n                                       *'                           @14\nDATALINE7_PARM EQU DATALINE7+2+17,51 1st 51 bytes of PARM field     @14\n*                                                                   @14\nDATALINE8  DC  Y(70),CL70'SVCU009I *                                   X\n                                       *'                           @14\nDATALINE8_PARM EQU DATALINE8+2+11,49 2nd 49 bytes of PARM field     @14\n*                                                                   @14\nSTARLINE2 DC   Y(70),CL70'SVCU001I ************************************X\n               *************************'                           @14\n*                                                                   @14\nMLWTOSUFFIX DS 0H                                                   @14\nMLWTOTLEN EQU  MLWTOSUFFIX-MLWTOPREFIX Generate length              @14\n*                                                                   @14\n*        MLWTO model                                                @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nVMC002I  WTO   TEXT=((,C),(,D),(,D),(,D),(,D),(,D),(,D),(,D),(,D),(,D),X\n               (,E)),                                               @14X\n               ROUTCDE=(11),                                        @14X\n               MF=L                                                 @14\nVMC002IL EQU   *-VMC002I                                            @14\n*              (,DE)),                                              @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - Initialization related WTOs'             @14\n******************************************************************* @14\n*                                                                 * @14\n*        Initialization/Environmental related WTOs                * @14\n*                                                                 * @14\n*        0nnA - Action required                                   * @14\n*                                                                 * @14\n******************************************************************* @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG200I  WTO   'SVCU200I - Old SVC entry point at ________ with all attX\n               ributes and locks restored',ROUTCDE=(11),MF=L        @14\nMSG200IL EQU   *-MSG200I                                            @14\nMSG200IA EQU   WTOD+4+34,8         Old SVC entry point              @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG001A  WTO   'SVCU001A - PARM/PARMDD supplied input parameters missinX\n               g - terminating',ROUTCDE=(11),MF=L                   @14\nMSG001AL EQU   *-MSG001A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG002A  WTO   'SVCU002A - Excessive input parameter length (>200) - teX\n               rminating',ROUTCDE=(11),MF=L                         @14\nMSG002AL EQU   *-MSG002A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG003A  WTO   'SVCU003A - unsupported characters found in input parameX\n               ter string',ROUTCDE=(11),MF=L                        @14\nMSG003AL EQU   *-MSG003A                                            @14\n*                                                                   @14\nMSG004A  WTO   'SVCU004A - SVCLIB DD missing',                      @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG004AL EQU   *-MSG004A                                            @14\n*                                                                   @14\nMSG005A  WTO   'SVCU005A - Unsupported PARM field found',           @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG005AL EQU   *-MSG005A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG006A  WTO   'SVCU006A - Minimum length PARM not supplied for INSTALLX\n                operation',                                         @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG006AL EQU   *-MSG006A                                            @14\n*                                                                   @14\nMSG007A  WTO   'SVCU007A - Duplicate keyword found in PARM field',  @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG007AL EQU   *-MSG007A                                            @14\n*                                                                   @14\nMSG010A  WTO   'SVCU010A - Invalid length LMOD parameter detected', @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG010AL EQU   *-MSG010A                                            @14\n*\nMSG011A  WTO   'SVCU011A - Invalid length USER parameter detected', @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG011AL EQU   *-MSG011A                                            @14\n*                                                                   @14\nMSG012A  WTO   'SVCU012A - \"Null\" LMOD keyword parameter detected', @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG012AL EQU   *-MSG012A                                            @14\n*\nMSG013A  WTO   'SVCU013A - \"Null\" USER keyword parameter detected', @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG013AL EQU   *-MSG013A                                            @14\n*                                                                   @14\nMSG014A  WTO   'SVCU014A - \"Null\" TYPE keyword parameter detected', @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG014AL EQU   *-MSG014A                                            @14\n*\nMSG015A  WTO   'SVCU015A - Invalid length TYPE parameter detected', @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG015AL EQU   *-MSG015A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG017A  WTO   'SVCU017A - Insufficient virtual storage for IRRSEQ00 woX\n               rkarea',ROUTCDE=(11),MF=L                            @14\nMSG017AL EQU   *-MSG017A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG018A  WTO   'SVCU018A - Insufficient virtual storage for RIBs workarX\n               ea',ROUTCDE=(11),MF=L                                @14\nMSG018AL EQU   *-MSG018A                                            @14\n*\nMSG019A  WTO   'SVCU019A - Invalid TYPE keyword specification',     @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG019AL EQU   *-MSG019A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG020A  WTO  'SVCU020A - SVCUPDTE cannot execute under TEST/TESTAUTH',X\n               ROUTCDE=(11),MF=L                                    @14\nMSG020AL EQU   *-MSG020A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG021A  WTO   'SVCU021A - illegal execution environment - cannot execuX\n               te under TSO',ROUTCDE=(11),MF=L                      @14\nMSG021AL EQU   *-MSG021A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG022A  WTO   'SVCU022A - illegal execution environment - fork/spawn',X\n               ROUTCDE=(11),MF=L                                    @14\nMSG022AL EQU   *-MSG022A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG023A  WTO   'SVCU023A - illegal execution environment - not batch', X\n               ROUTCDE=(11),MF=L                                    @14\nMSG023AL EQU   *-MSG023A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG024A  WTO   'SVCU024A - illegal execution environment - not job stepX\n                TCB',ROUTCDE=(11),MF=L                              @14\nMSG024AL EQU   *-MSG024A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG025A  WTO   'SVCU025A - illegal execution environment - not first prX\n               ogram in TCB',ROUTCDE=(11),MF=L                      @14\nMSG025AL EQU   *-MSG025A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG026A  WTO   'SVCU026A - Unable to obtain work area for MLWTO audit rX\n               eport - Please report',ROUTCDE=(11),MF=L             @14\nMSG026AL EQU   *-MSG026A                                            @14\n*\nMSG027A  WTO   'SVCU027A - TYPE must be 1, 2, 3, 4 or 6',           @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG027AL EQU   *-MSG027A                                            @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - Environmental related WTOs'              @14\n******************************************************************* @14\n*                                                                 * @14\n*        Environmental related WTOs = 1nnE series                 * @14\n*                                                                 * @14\n******************************************************************* @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG128E  WTO   'SVCU128E - REPORT - unable to allocate report sysout daX\n               ta set. Please report.',ROUTCDE=(11),MF=L            @14\nMSG128EL EQU   *-MSG128E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG129E  WTO   'SVCU129E - REPORT - SVC99RC=________ S99ERROR=________ X\n               S99INFO=________ ',ROUTCDE=(11),MF=L                 @14\nMSG129EL EQU   *-MSG129E                                            @14\nMSG129EA EQU   WTOD+32,8           SVC 99 R15 result                @14\nMSG129EB EQU   WTOD+50,8           SVC 99 S99ERROR                  @14\nMSG129EC EQU   WTOD+67,8           SVC 99 S99INFO                   @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG130E  WTO   'SVCU130E - Unable to obtain 0x12345678 bytes of CSA/ECSX\n               A for LMOD=12345678',ROUTCDE=(11),MF=L               @14\nMSG130EL EQU   *-MSG130E                                            @14\nMSG130EA EQU   WTOD+34,8           CSA/ECSA amount                  @14\nMSG130EB EQU   WTOD+70,8           LMOD name                        @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG131E  WTO   'SVCU131E - Unable to obtain SQA for USER filter code', X\n               ROUTCDE=(11),MF=L                                    @14\nMSG131EL EQU   *-MSG131E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG146E  WTO   'SVCU146E - REPORT - OPEN for report file failed. PleaseX\n                report.',ROUTCDE=(11),MF=L                          @14\nMSG146EL EQU   *-MSG146E                                            @14\n*                                                                   @14\nMSG200A  WTO   'SVCU200A - LMOD=________ not marked RENT',          @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG200AL EQU   *-MSG200A                                            @14\nMSG200AA EQU   WTOD+4+16,8         LMOD                             @14\n*                                                                   @14\nMSG201A  WTO   'SVCU201A - LMOD=________ not marked REUS',          @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG201AL EQU   *-MSG201A                                            @14\nMSG201AA EQU   WTOD+4+16,8         LMOD                             @14\n*                                                                   @14\nMSG202A  WTO   'SVCU202A - LMOD=________ not marked REFR',          @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG202AL EQU   *-MSG202A                                            @14\nMSG202AA EQU   WTOD+4+16,8         LMOD                             @14\n*                                                                   @14\nMSG203A  WTO   'SVCU203A - LMOD=________ not marked EXEC',          @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG203AL EQU   *-MSG203A                                            @14\nMSG203AA EQU   WTOD+4+16,8         LMOD                             @14\n*                                                                   @14\nMSG204A  WTO   'SVCU204A - LMOD=________ cannot be OVLY format',    @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG204AL EQU   *-MSG204A                                            @14\nMSG204AA EQU   WTOD+4+16,8         LMOD                             @14\n*                                                                   @14\nMSG205A  WTO   'SVCU205A - LMOD=________ cannot be SCTR format',    @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG205AL EQU   *-MSG205A                                            @14\nMSG205AA EQU   WTOD+4+16,8         LMOD                             @14\n*                                                                   @14\nMSG206A  WTO   'SVCU206A - LMOD=________ cannot be RMODE=SPLIT',    @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG206AL EQU   *-MSG206A                                            @14\nMSG206AA EQU   WTOD+4+16,8         LMOD                             @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG207A  WTO   'SVCU207A - LMOD=________ marked TEST/TESTRAN (not suppoX\n               rted)',ROUTCDE=(11),MF=L                             @14\nMSG207AL EQU   *-MSG207A                                            @14\nMSG207AA EQU   WTOD+4+16,8         LMOD                             @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG208A  WTO   'SVCU208A - LMOD=________ not found on 1st library in SVX\n               CLIB concatenation sequence',ROUTCDE=(11),MF=L       @14\nMSG208AL EQU   *-MSG208A                                            @14\nMSG208AA EQU   WTOD+4+16,8         LMOD                             @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - RACF/SAF related WTOs'                   @14\n******************************************************************* @14\n*                                                                 * @14\n*        RACF/SAF related WTOs = 2nnE series                      * @14\n*                                                                 * @14\n******************************************************************* @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - Program error WTOs'                      @14\n******************************************************************* @14\n*                                                                 * @14\n*        Program error WTOs = 3nnE series                         * @14\n*                                                                 * @14\n* Note: These are conditions that should not occur in the natural * @14\n*       world.                                                    * @14\n*                                                                 * @14\n******************************************************************* @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - ERROR level WTOs'                        @14\n******************************************************************* @14\n*                                                                 * @14\n*        ERROR level WTOs                                         * @14\n*                                                                 * @14\n******************************************************************* @14\n* Following line added by @14 change                                @14\nMSG100E  WTO   'SVCU100E - SAF failure in EXTR000 routine. Please reporX\n               t.',ROUTCDE=(11),MF=L                                @14\nMSG100EL EQU   *-MSG100E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG101E  WTO   'SVCU101E - SAFRC=________ RACFRC________ RACFRS=_______X\n               _ ',ROUTCDE=(11),MF=L                                @14\nMSG101EL EQU   *-MSG101E                                            @14\n*                                                                   @14\nMSG101EA EQU   WTOD+21,8           SAF Return Code                  @14\nMSG101EB EQU   WTOD+36,8           RACF Return Code                 @14\nMSG101EC EQU   WTOD+52,8           RACF Reason Code                 @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG102E  WTO   'SVCU102E - ERRET routine driven during IKJTSOEV LINK prX\n               ocessing',                                           @14X\n               ROUTCDE=11,MF=L                                      @14\nMSG102EL EQU   *-MSG102E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG103E  WTO   'SVCU103E - No SVCUPDTE profiles found in CLASS(#SNOMISCX\n               )',ROUTCDE=(11),MF=L                                 @14\nMSG103EL EQU   *-MSG103E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG104E  WTO   'SVCU104E - CLASS(#SNOMISC) profile not returned. PleaseX\n                report.',ROUTCDE=(11),MF=L                          @14\nMSG104EL EQU   *-MSG104E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG105E  WTO   'SVCU105E - Segment descriptor # not 1. Please report.',X\n               ROUTCDE=(11),MF=L                                    @14\nMSG105EL EQU   *-MSG105E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG106E  WTO   'SVCU106E - Segment returned not BASE. Please report.', X\n               ROUTCDE=(11),MF=L                                    @14\nMSG106EL EQU   *-MSG106E                                            @14\n*                                                                   @14\nMSG107E  WTO   'SVCU107E - EPNAME module is RMODE=SPLIT',           @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG107EL EQU   *-MSG107E                                            @14\n*                                                                   @14\nMSG120I  WTO   'SVCU120I - ADMN_PROF_FIELDNAME=________ ',          @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG120IL EQU   *-MSG120I                                            @14\nMSG120IA EQU   WTOD+35,8           ADMN_PROF_FIELDNAME value        @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG115E  WTO   'SVCU115E - R_admin service failed to load. Please reporX\n               t.',ROUTCDE=(11),MF=L                                @14\nMSG115EL EQU   *-MSG115E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG116E  WTO   'SVCU116E - REPORT - LOAD R1=________ R15=________ ',   X\n               ROUTCDE=(11),MF=L                                    @14\nMSG116EL EQU   *-MSG116E                                            @14\n*                                                                   @14\nMSG116EA EQU   WTOD+4+28,8     LOAD R1 result (system completion)   @14\nMSG116EB EQU   WTOD+4+41,8     LOAD R15 result (reason code)        @14\n*                                                                   @14\n         PUSH  PRINT                                                @14\n         PRINT DATA,GEN                                             @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - ACTION level WTOs'                       @14\n******************************************************************* @14\n*                                                                 * @14\n*        ACTION level WTOs                                        * @14\n*                                                                 * @14\n******************************************************************* @14\n*                                                                   @14\n*        ZEROES                                                     @14\n*                                                                   @14\n*                                                                   @14\n*        ONE HUNDREDS (initialization related events)               @14\n*                                                                   @14\n*                                                                   @14\n*        TWO HUNDREDS (IRRSEQ00 extraction related events)          @14\n*                                                                   @14\n*                                                                   @14\n*        NINE HUNDREDS (execution related events)                   @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG901W  WTO   'SVCU901W - Invalid length SVCUPDTE_* profile detected oX\n               n database.',                                        @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG901WL EQU   *-MSG901W                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG902A  WTO   'SVCU902A - Profile starts with: _              . It wilX\n               l be skipped in report.',                            @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG902AL EQU   *-MSG902A                                            @14\nMSG902AA EQU   WTOD+36,15       Maximum len profile name to display @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG903A  WTO   'SVCU903A - Invalid length OWNER field detected on databX\n               ase.',                                               @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG903AL EQU   *-MSG903A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG904A  WTO   'SVCU904A - Invalid length DATA field detected on databaX\n               se.',                                                @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG904AL EQU   *-MSG904A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG905A  WTO   'SVCU905A - Invalid length UACC field detected on databaX\n               se.',                                                @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG905AL EQU   *-MSG905A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG905I  WTO   'SVCU905I - ENQ for SVC table failed/R15=________ - retrX\n               ying in 5 seconds',                                  @14X\n               ROUTCDE=(11),                                        @14X\n               DESC=3,                                              @14X\n               MF=L                                                 @14\nMSG905IL EQU   *-MSG905I                                            @14\nMSG905IA EQU   WTOD+4+40,8         ENQ returned R15 value           @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG906I  WTO   'SVCU906I - ESTAE ENQ for SVC table failed/R15=________ X\n               - retrying in 5 seconds',                            @14X\n               ROUTCDE=(11),                                        @14X\n               DESC=3,                                              @14X\n               MF=L                                                 @14\nMSG906IL EQU   *-MSG906I                                            @14\nMSG906IA EQU   WTOD+4+46,8         ENQ returned R15 value           @14\n*                                                                   @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG906A  WTO   'SVCU906A - Unexpected GQSCAN condition: R15=12345678 R0X\n               =12345678. Please report.',                          @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG906AL EQU   *-MSG906A                                            @14\n*                                                                   @14\nMSG906AA EQU   WTOD+4+44,8         GQSCAN R15 value                 @14\nMSG906AB EQU   WTOD+4+56,8         GQSCAN R0  value                 @14\n*                                                                   @14\nMSG907A  WTO   'SVCU907A - Profile involved was 123456789012345 ',  @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG907AL EQU   *-MSG907A                                            @14\nMSG907AA EQU   WTOD+4+32,15        Profile involved in 906A message @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG908A  WTO   'SVCU908A - Resource _______________ found to be in use X\n               by ________ in ASID 0x____',                         @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG908AL EQU   *-MSG908A                                            @14\nMSG908AA EQU   WTOD+4+20,15        In use resource name             @14\nMSG908AB EQU   WTOD+4+58,8         In use job name                  @14\nMSG908AC EQU   WTOD+4+77,4         In use ASID                      @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG909A  WTO   'SVCU909A - Unexpected ENQ failure during install: R15=0X\n               1234567 - Please report.',                           @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG909AL EQU   *-MSG909A                                            @14\n*                                                                   @14\nMSG909AA EQU   WTOD+4+54,8         ENQ R15 value                    @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG910A  WTO   'SVCU910A - Could not get exclusive use of QNAME=SVCZSVCX\n               /RNAME=TABLE',                                       @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG910AL EQU   *-MSG910A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG911A  WTO   'SVCU911A - R15=________ - Please try again and report iX\n               f it fails again',                                   @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG911AL EQU   *-MSG911A                                            @14\n*                                                                   @14\nMSG911AA EQU   WTOD+4+15,8         ENQ R15 value                    @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG912A  WTO   'SVCU912A - SVCUPDTE service for new SVC code failed',  X\n               ROUTCDE=(11),MF=L                                    @14\nMSG912AL EQU   *-MSG912A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG913A  WTO   'SVCU913A - SVCUPDTE service returned R15=12345678 - PleX\n               ase report',                                         @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG913AL EQU   *-MSG913A                                            @14\n*                                                                   @14\nMSG913AA EQU   WTOD+4+41,8         ENQ R15 value                    @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG914A  WTO   'SVCU914A - QEDIT START free failure/R15=12345678 - PleaX\n               se report',                                          @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG914AL EQU   *-MSG914A                                            @14\n*                                                                   @14\nMSG914AA EQU   WTOD+4+40,8         QEDIT R15 value                  @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG915A  WTO   'SVCU915A - Unable to obtain SVC table ENQ for reversal X\n               - Please report',                                    @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG915AL EQU   *-MSG915A                                            @14\n*                                                                   @14\nMSG916A  WTO   'SVCU916A - ABEND 901 forced',                       @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG916AL EQU   *-MSG916A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG917A  WTO   'SVCU917A - QEDIT CIBCTR failure/R15=12345678 - Please rX\n               eport',                                              @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG917AL EQU   *-MSG917A                                            @14\n*                                                                   @14\nMSG917AA EQU   WTOD+4+36,8         QEDIT R15 value                  @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG918A  WTO   'SVCU918A - SVCUPDTE service failed to restore old SVC',X\n               ROUTCDE=(11),MF=L                                    @14\nMSG918AL EQU   *-MSG918A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG919A  WTO   'SVCU919A - SVCUPDTE service R15=________ - Please reporX\n               t',ROUTCDE=(11),MF=L                                 @14\nMSG919AL EQU   *-MSG919A                                            @14\nMSG919AA EQU   WTOD+4+32,8         SVCUPDTE service R15 value       @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG008A  WTO   'SVCU008A - user not authorized for CL(#SNOMISC) resourcX\n               e _              ',ROUTCDE=(11),MF=L                 @14\nMSG008AL EQU   *-MSG008A                                            @14\nMSG008AB EQU   WTOD+4+57,15        CL(#SNOMISC) resource            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG009A  WTO   'SVCU009A - no protecting profile exists for SVCUPDTE_nnX\n               n    - request is being failed ',ROUTCDE=(11),MF=L   @14\nMSG009AL EQU   *-MSG009A                                            @14\nMSG009AA EQU   WTOD+4+44,15        Missing profile name             @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG008I  WTO   'SVCU008I - AUTH check failed w/ R15=________ SAFRC=____X\n               ____ SAFRSN=________ ',ROUTCDE=(11),MF=L             @14\nMSG008IL EQU   *-MSG008I                                            @14\nMSG008IA EQU   WTOD+4+36,8         RACF return code                 @14\nMSG008IB EQU   WTOD+4+51,8         SAF return code                  @14\nMSG008IC EQU   WTOD+4+67,8         SAF reason code                  @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG012I  WTO   'SVUC012I - ENQ failed - another copy of SVCUPDTE has cuX\n               rrently installed the same SVC',ROUTCDE=(11),MF=L    @14\nMSG012IL EQU   *-MSG012I                                            @14\n*                                                                   @14\n* Next line added by @14 change                                     @14\nMSG016A  WTO   'SVCU016A - EPNAME module not found on SVCLIB library', X\n               ROUTCDE=(11),MF=L                                    @14\nMSG016AL EQU   *-MSG016A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG016I  WTO   'SVCU016I - EPNAME=________ failed with R15=__ R0=__ ', X\n               ROUTCDE=(11),MF=L                                    @14\nMSG016IL EQU   *-MSG016I                                            @14\nMSG016IA EQU   WTOD+22,8           EPNAME                           @14\nMSG016IB EQU   WTOD+47,2           BLDL return code (R15)           @14\nMSG016IC EQU   WTOD+53,2           BLDL reason code (R0)            @14\n*                                                                   @14\nMSG028A  WTO   'SVCU028A - SVCUPDTE program is not APF authorized', @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG028AL EQU   *-MSG028A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG029A  WTO  'SVCU029A - Backing slot for requested SVCNO not T2/3/4',X\n               ROUTCDE=(11),MF=L                                    @14\nMSG029AL EQU   *-MSG029A                                            @14\n*                                                                   @14\nMSG030A  WTO   'SVCU030A - \"Null\" GOODNITE keyword specification',  @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG030AL EQU   *-MSG030A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG031A  WTO   'SVCU031A - Invalid length GOODNITE parameter detected',X\n               ROUTCDE=(11),MF=L                                    @14\nMSG031AL EQU   *-MSG031A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG032A  WTO   'SVCU032A - Invalid PARM field detected - IKJPARS RC=123X\n               45678 ',ROUTCDE=11,MF=L                              @14\nMSG032AL EQU   *-MSG032A                                            @14\nMSG032AA EQU   WTOD+56,8           IKJPARS return code              @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG033A  WTO   'SVCU033A - IKJPARS returned ANSwer area value of 0xFF00X\n               0000',ROUTCDE=11,MF=L                                @14\nMSG033AL EQU   *-MSG033A                                            @14\n*                                                                   @14\nMSG034A  WTO   'SVCU034A - Required LMOD parameter missing',        @14X\n               ROUTCDE=11,MF=L                                      @14\nMSG034AL EQU   *-MSG034A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG035A  WTO   'SVCU035A - Check SYSTSPRT output for PARSE failure detaX\n               ils',ROUTCDE=11,MF=L                                 @14\nMSG035AL EQU   *-MSG035A                                            @14\n*                                                                   @14\nMSG036A  WTO   'SVCU036A - ESR T1/T2/T6 SVC entries not supported', @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG036AL EQU   *-MSG036A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG037A  WTO   'SVCU037A - Required SVC keyword specification missing',X\n               ROUTCDE=(11),MF=L                                    @14\nMSG037AL EQU   *-MSG037A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG038A  WTO   'SVCU038A - TYPE and ESR SVC# are mutually exclusive',  X\n               ROUTCDE=(11),MF=L                                    @14\nMSG038AL EQU   *-MSG038A                                            @14\n*                                                                   @14\nMSG039A  WTO   'SVCU039A - Routing SVC # supplied with TYPE',       @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG039AL EQU   *-MSG039A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG040A  WTO   'SVCU040A - SVC# request < 200 requires RACF \"Global SpeX\n               cial\" authority',ROUTCDE=(11),MF=L                   @14\nMSG040AL EQU   *-MSG040A                                            @14\n*                                                                   @14\nMSG041A  WTO   'SVCU041A - SVC# value not in range 0-255',          @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG041AL EQU   *-MSG041A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG042A  WTO   'SVCU042A - Routing code must be in range 0-255 for T3/4X\n                ESR SVC',ROUTCDE=(11),MF=L                          @14\nMSG042AL EQU   *-MSG042A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG043A  WTO   'SVCU043A - Routing code must be in range 0-14 for T1 ESX\n               R SVC',ROUTCDE=(11),MF=L                             @14\nMSG043AL EQU   *-MSG043A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG044A  WTO   'SVCU044A - Routing code must be in range 0-19 for T2 ESX\n               R SVC',ROUTCDE=(11),MF=L                             @14\nMSG044AL EQU   *-MSG044A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG045A  WTO   'SVCU045A - Routing code must be in range 0-7 for T6 ESRX\n                SVC',ROUTCDE=(11),MF=L                              @14\nMSG045AL EQU   *-MSG045A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG046A  WTO   'SVCU046A - Invalid SVC#/ESR# logic detected - abending X\n               U333',ROUTCDE=(11),MF=L                              @14\nMSG046AL EQU   *-MSG046A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG047A  WTO   'SVCU047A - Use of Router SVC# requires ESR function codX\n               e be coded',ROUTCDE=(11),MF=L                        @14\nMSG047AL EQU   *-MSG047A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG048A  WTO   'SVCU048A - Use of SVC # that is not part of the ESR reqX\n               uires TYPE be specified.',ROUTCDE=(11),MF=L          @14\nMSG048AL EQU   *-MSG048A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG049A  WTO   'SVCU049A - SRM, SALLOC and DISP locks can only be speciX\n               fied by a RACF Global Special userid',               @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG049AL EQU   *-MSG049A                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG050S  WTO   'SVCU050S - logic error in TYPE assignment - abending U3X\n               34',ROUTCDE=(11),MF=L                                @14\nMSG050SL EQU   *-MSG050S                                            @14\n*                                                                   @14\nMSG044E  WTO   'SVCU044E - OPEN for SVCLIB library failed',         @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG044EL EQU   *-MSG044E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG048S  WTO   'SVCU048S - SWAREQ UNAUTH=YES failure on SVCLIB - R15=__X\n               ______ ',ROUTCDE=(11),MF=L                           @14\nMSG048SL EQU   *-MSG048S                                            @14\nMSG048SA EQU   WTOD+57,8           Offset to R15 hex display        @14\n*                                                                   @14\nMSG052E  WTO   'SVCU052E - SVCLIB data set not DSORG=PO/POE',       @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG052EL EQU   *-MSG052E                                            @14\n*                                                                   @14\nMSG056E  WTO   'SVCU056E - SVCLIB data set not RECFM=U',            @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG056EL EQU   *-MSG056E                                            @14\n*                                                                   @14\nMSG060E  WTO   'SVCU060E - SVCLIB library cannot be multi-volume',  @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG060EL EQU   *-MSG060E                                            @14\n*                                                                   @14\n* Next line added by @14 change                                     @14\nMSG064E  WTO   'SVCU064E - Member specification for allowed on SVCLIB DX\n               Dname',ROUTCDE=(11),MF=L                             @14\nMSG064EL EQU   *-MSG064E                                            @14\n*                                                                   @14\nMSG068E  WTO   'SVCU068E - Invalid LOCKS parameter supplied',       @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG068EL EQU   *-MSG068E                                            @14\n*                                                                   @14\nMSG072E  WTO   'SVCU072E - SVC number parameter not numeric',       @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG072EL EQU   *-MSG072E                                            @14\n*                                                                   @14\nMSG076E  WTO   'SVCU076E - Goodnight (HHMM) parameter not numeric', @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG076EL EQU   *-MSG076E                                            @14\n*                                                                   @14\nMSG080E  WTO   'SVCU080E - SVCNO parameter not in range 0-255',     @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG080EL EQU   *-MSG080E                                            @14\n*                                                                   @14\n* Next line added by @14 change                                     @14\nMSG084E  WTO   'SVCU084E - Goodnight (HHMM) parameter out of 0001-2359 X\n               range',ROUTCDE=(11),MF=L                             @14\nMSG084EL EQU   *-MSG084E                                            @14\n*                                                                   @14\nMSG088E  WTO   'SVCU088E - Goodnight time < current time (HHMM)',   @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG088EL EQU   *-MSG088E                                            @14\n*                                                                   @14\nMSG092E  WTO   'SVCU092E - ESR T3/4 naming convention violation',   @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG092EL EQU   *-MSG092E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG096A  WTO   'SVCU096A - EPNAME module attribute requirements not metX\n               ',ROUTCDE=(11),MF=L                                  @14\nMSG096AL EQU   *-MSG092E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG096I  WTO   'SVCU096I - module must be RENT, REFR, REUS, EXEC, OVLY=X\n               NO, and SCTR=NO',ROUTCDE=(11),MF=L                   @14\nMSG096IL EQU   *-MSG092E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG100A  WTO   'SVCU100A - LOAD for EPNAME failed: R1=________ R15=____X\n               ____ ',ROUTCDE=(11),MF=L                             @14\nMSG100AL EQU   *-MSG100A                                            @14\nMSG100AA EQU   WTOD+42,8           LOAD abend code                  @14\nMSG100AB EQU   WTOD+55,8           LOAD reason code                 @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG108E  WTO   'SVCU108E - insufficient private storage for EPNAME copyX\n               ',ROUTCDE=(11),MF=L                                  @14\nMSG108EL EQU   *-MSG108E                                            @14\n*                                                                   @14\nMSG109E  WTO   'SVCU109E - IKJTSOEV returned RC=________ ',         @14X\n               ROUTCDE=11,MF=L                                      @14\nMSG109EL EQU   *-MSG109E                                            @14\nMSG109EA EQU   WTOD+36,8                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG112S  WTO   'SVCU112S - Bad logic (loc #__) - R15=________ - please X\n               report',ROUTCDE=(11),MF=L                            @14\nMSG112SL EQU   *-MSG112S                                            @14\nMSG112SA EQU   WTOD+31,2           Logic location identifier        @14\nMSG112SB EQU   WTOD+41,8           R15 value                        @14\n*                                                                   @14\n* New line added by @14 change                                      @14\nMSG120A  WTO   'SVCU120A - STORAGE OBTAIN for CSA/ECSA failed R15=_____X\n               ___ ',ROUTCDE=(11),MF=L                              @14\nMSG120AL EQU   *-MSG120A                                            @14\nMSG120AA EQU   WTOD+54,8           STORAGE request return code      @14\n*                                                                   @14\n         TITLE 'Environmental condition message WTOs'               @14\nMSG900I  WTO   'SVCU900I - Type 1 SVCs cannot specify LOCAL lock',  @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG900IL EQU   *-MSG900I                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG901I  WTO   'SVCU901I - Type 3/4 SVCs/ESR SVCs can use only LOCAL orX\n                LOCAL+CMS locks',ROUTCDE=(11),MF=L                  @14\nMSG901IL EQU   *-MSG901I                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG902I  WTO   'SVCU902I - Type 6 SVCs/ESR SVCs cannot specify any lockX\n               s',ROUTCDE=(11),MF=L                                 @14\nMSG902IL EQU   *-MSG902I                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG903E  WTO   'SVCU903E - LOGIC ERROR - Invalid SVC type passed parsinX\n               g - ABEND U1001 forced',ROUTCDE=(11),MF=L            @14\nMSG903EL EQU   *-MSG903E                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG904E  WTO   'SVCU904E - user not authorized to request LOCK=_23456 'X\n               ,ROUTCDE=(11),MF=L                                   @14\nMSG904EL EQU   *-MSG904E                                            @14\nMSG904EA EQU   WTOD+50,6           LOAD reason code                 @14\n         POP   PRINT                                                @14\n*                                                                   @14\n         TITLE 'SVCUPDTE - DIAGNOSTIC level WTOs'                   @14\nMSG700D  WTO   'SVCU700D - Profile: 123456789012345 ',              @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG700DL EQU   *-MSG700D                                            @14\n*                                                                   @14\nMSG700DA EQU   WTOD+4+20,15        Profile name                     @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG701D  WTO   'SVCU701D - Installation data: 1234567890123456789012345X\n               678901234567890 ',                                   @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG701DL EQU   *-MSG701D                                            @14\n*                                                                   @14\nMSG701DA EQU   WTOD+4+30,40        Profile installation data        @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG701I  WTO   'SVCU701I - RACF GLOBAL \"SPECIAL\" userid=         in effX\n               ect',ROUTCDE=(11),MF=L                               @14\nMSG701IL EQU   *-MSG701I                                            @14\nMSG701IA EQU   WTOD+44,8           ACEEUSRI via EUSER               @14\n*                                                                   @14\nMSG702D  WTO   'SVCU702D - OWNER: 12345678   UACC: 1234567 ',       @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG702DL EQU   *-MSG702D                                            @14\n*                                                                   @14\nMSG702DA EQU   WTOD+4+18,8         Profile owner                    @14\nMSG702DB EQU   WTOD+4+35,7         Profile default access           @14\n*                                                                   @14\nMSG703D  WTO   'SVCU703D - aclid___: aclacs_ ',                     @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG703DL EQU   *-MSG703D                                            @14\n*                                                                   @14\nMSG703DA EQU   WTOD+4+11,8         ACLID subfield value             @14\nMSG703DB EQU   WTOD+4+21,7         ACLACS subfield value            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG704D  WTO   'SVCU704D - Status: SVC slot is not currently in use.', X\n               ROUTCDE=(11),MF=L                                    @14\nMSG704DL EQU   *-MSG704D                                            @14\n*                                                                   @14\n* Following line added by @14 change                                @14\nMSG705D  WTO   'SVCU705D - Status: SVC slot currently in use by job namX\n               e 12345678 in ASID 0x1234.',                         @14X\n               ROUTCDE=(11),MF=L                                    @14\nMSG705DL EQU   *-MSG705D                                            @14\n*                                                                   @14\nMSG705DA EQU   WTOD+4+57,8         GQSCAN requestor job name        @14\nMSG705DB EQU   WTOD+4+76,4         GQSCAN requestor ASID            @14\n*                                                                   @14\n         TITLE 'SVCUPDTE -- Litterals && Constants'                 @14\n         DS    0D                  Alignment                        @14\nLTORG_AREA LOCTR ,                                                  @14\n*                                                                   @14\n*  Literal pool                                                     @14\n*                                                                   @14\n         LTORG                                                      @14\n         AGO   .JH9996A                                             @14\nVL       EQU   X'80000000'         31-bit AMODE indicator           @14\nIGX00GSF EQU   203                 ESR-T3 SVC function code         @14\n.JH9996A ANOP                                                       @14\n         DS    D              Place STIMER value on D-WORD boundary @14\nHOWLONG  DC    C'00000500'         Wait for 5 seconds               @14\n*                hhmmssth          - for immediately above format   @14\n*                                                                   @14\n*       RIBS (Query command) initializer                            @14\n*                                                                   @14\n         DS    0F                                                   @14\nRIBSINIT DC    A(0)                                                 @14\n         DC    F'1024'                                              @14\n         DC    CL8'SVCUPDTE'                                        @14\n         DC    CL7'_ESRnnn'        SVC slot (ESR & non-ESR)         @14\nRIBSINIL EQU   *-RIBSINIT                                           @14\n*                                                                   @14\nGQSMAP   GQSCAN MF=L                                                @14\nGQSMAPL  EQU   *-GQSMAP                                             @14\n*                                                                   @14\n*        Numeric constants                                          @14\n*                                                                   @14\nMinimum_profname_length EQU X'000C' Minimum SVCUPDTE profile length @14\nMaximum_profname_length EQU X'000F' Maximum SVCUPDTE profile length @14\n*                                                                   @14\nMAXLINES DC    PL2'64'             Set max lines/page count         @14\nEDIT_page_# DC XL08'4020202020202021'          99,999k pattern      @14\n*                                                                   @14\n*        Model DCB for SYSPRINT                                     @14\n*                                                                   @14\nX#DCB1   DCB   DDNAME=*-*,DSORG=PS,MACRF=PM,RECFM=FA,LRECL=133      @14\nX#DCB1L  EQU   *-X#DCB1            Length of model DCB              @14\n*                                                                   @14\nX#OPNDO  OPEN  (1,(OUTPUT)),MODE=31,MF=L OPEN/CLOSE execute list    @14\nX#OPNDOL EQU   *-X#OPNDO           Length of OPEN list              @14\n*                                                                   @14\nPUTCODE  PUT   (1),(0)             PUT pattern code                 @14\n         BSM   0,R2                Return                           @14\nPUTLEN   EQU   *-PUTCODE           Length of PUT code               @14\n*                                                                   @14\n* Model DCB for SVCLIB (copied to <16MB storage)                    @14\n*                                                                   @14\n         DS    0F                                                   @14\nINDCB#   DCB   DDNAME=SVCLIB,DSORG=PO,MACRF=R,RECFM=U               @14\nINDCB#L  EQU   *-INDCB#            Generate length of model DCB     @14\n*                                                                   @14\nX#OPNDI  OPEN  (1,(INPUT)),MODE=31,MF=L OPEN/CLOSE execute list     @14\nX#OPNDIL EQU   *-X#OPNDI           Generate length                  @14\n*                                                                   @14\n***********************************************************************\n*                                                                     *\n*        Model storage, moved to dynamic                              *\n*                                                                     *\n***********************************************************************\nMODELS   DS    0H                                                   @14\nSVCUMODL SVCUPDTE 0,REPLACE,TYPE=4,EP=0,MF=L\nSVCUMODLL EQU  *-SVCUMODL          Generate length                  @14\n*        ENQ   (QNAME1,*-*,E,L'SVCNO,SYSTEM),RET=USE,MF=L           @07\n*        ENQ   (QNAME1,*-*,E,L'RNAME,SYSTEM),RET=USE,MF=L        @07@14\nENQMODL  ENQ   (QNAME1,*-*,E,L'RNAME,SYSTEM),RET=USE,MF=L           @14\nENQMODLL EQU   *-ENQMODL                                            @14\n*        ENQ   (SYSZSVCQ,SYSZSVCR,E,,SYSTEM),MF=L                @02@14\nESVCTMOD ENQ   (SYSZSVCQ,SYSZSVCR,E,,SYSTEM),MF=L                @02@14\nESVCTMODL EQU  *-ESVCTMOD                                           @14\nMODELS_L EQU   *-MODELS\n*                                                                   @11\nMODELESR SVCUPDTE 109,REPLACE,TYPE=4,EP=0,ESR=222,MF=L              @11\nMODELESR_L EQU *-MODELESR                                           @11\n*\nQNAME1   DC    C'SVCUPDTE'         QNAME for ENQ\nSYSZSVCQ DC    C'SYSZSVC '         QNAME for ENQ                    @02\nSYSZSVCR DC    C'TABLE'            RNAME for ENQ                    @02\n*                                                                   @14\nRESOURCE DC    CL16'SVCUPDTE_       '                               @14\n*                                                                   @14\n*        REQUEST=AUTH,CLASS=FACILITY                                @14\n*                                                                   @14\n         DS    0D                                                   @14\nRACPATT  RACROUTE REQUEST=AUTH,                                     @14X\n               ENTITYX=*-*,                                         @14X\n               CLASS=FACILITY,                                      @14X\n               ATTR=READ,                                           @14X\n               LOG=NONE,                                            @14X\n               MSGSUPP=YES,                                         @14X\n               RELEASE=1.9.2,                                       @14X\n               WORKA=*-*,                                           @14X\n               MF=L                                                 @14\n*                                                                   @14\nFACILITY DC    AL1(8),CL8'#SNOMISC' RACF CLASS for RACROUTE         @14\n*                                                                   @14\nLTORG_AREA_END DS 0D                                                @14\nSVCUPDTE LOCTR ,                                                    @14\n*\n         TITLE 'PARSE - parse positional parameters routine'        @14\n***********************************************************************\n*                                                                     *\n*        PARSE A COMMA-DELIMITED JCL PARM                             *\n*                                                                     *\n*        L     R15,=A(PARSE)                                          *\n*        BALR  R14,R15                                                *\n*        DC    S(L'PARM1,PARM1)        LENGTH,ADDR                    *\n*        DC    S(L'PARM2,PARM2)        LENGTH,ADDR                    *\n*                                                                     *\n***********************************************************************\nPARSE    CSECT\nPARSE    AMODE 31\nPARSE    RMODE ANY\n         SAVE  (14,12),,PARSE      Save caller's registers\n         BALR  R11,0               Set local base\n         USING *,R11               Inform assembler\n         LH    R5,0(,R4)           R5=length of PARM\n         LA    R4,1(,R4)           R4->start of PARM - 1\n         ALR   R5,R4               R5->last byte of PARM\n*LOOP\nPARS1    SLR   R0,R0               R0 = 00000000\n         ICM   R0,B'0011',2(R14)   R0 = 0000BDDD\n         SRDL  R0,12(0)            R0 = 0000000B, R1= BBB.....\n         SRL   R1,20(0)            R1 = 00000DDD displacement\n         ALR   R1,R13              Add caller's save area address\n         LR    R6,R1               R6->target field\n         LH    R7,0(,R14)          R7=length of target field\n*\n         LA    R2,1(,R4)           1st byte of current parameter\n*--LOOP\nPARS2    LA    R4,1(,R4)           Increment pointer\n         CLR   R4,R5               End of PARM reached ?\n         JH    PARS41              ...bif so, exit loop\n         CLI   0(R4),C','          Delimiter ?\n         JNE   PARS2               ...bif not, keep looking\n*--ENDLOOP\nPARS41   LR    R3,R4               R3->position of ','\n         SR    R3,R2               R3=length of source parameter\n         ICM   R3,B'1000',PARSEPAD Padding\n         MVCL  R6,R2               Move source to target\nPARS44   LA    R14,2+2(,R14)       R14->next target\n         CLI   0(R14),0            Is this a field descriptor ?\n         JE    PARS1               ...bif so, go process it\n*ENDLOOP\n         RETURN (0,12),T           Return with indicator\nPARSEPAD DC    C' '                Padding\n*                                                                   @14\n         TITLE 'Dynamic working storage'                            @14\n***********************************************************************\n*                                                                     *\n*        DYNAMIC STORAGE                                              *\n*                                                                     *\n***********************************************************************\n*DYNAM    DSECT                                                     @14\nDWS      DSECT                                                      @14\nSAVEAREA DS    18F                 Save area                        @14\nDOREPEATSAVE DS 18F                DOREPEAT save area               @14\nCHKINUSESAVE DS 18F                CHKINUSE save area               @14\nDATETIMESAVE DS 18F                DATETIME save area               @14\nPUTSAVE  DS    18F                 PUTSAVE save area                @14\nPUTHDRSAVE DS  18F                 HEADERS save area                @14\nMLWTOSAVE DS   18F                 MLWTO save area                  @14\nSAVE@L1  DS    18F                 Level 1 GPR save area            @14\nPARSSAVE DS    18F                 PARS000 save area                @14\nREPORTSAVE DS  18F                 REPORT register save area        @14\nSAVE2    DS    18F                 Save area for ESTAE routine\nSAVER0   DS    F                   R0 save area (PUTLINE)           @14\nDOMID    DS    F                   Saved DOM msgid #                @14\nMLWTOLINES@ DS F                   @ of MLWTO construction area     @14\nMLWTOLENGTH DS F                  Length of MLWTO construction area @14\nCIBECB   DS    F                   @ COMECBPT                       @14\n@CSCB    DS    F                   @ CSCB                           @14\nDWD      DS    D\nDBWD     DS    D                                                    @14\nDWSECB   DS    F                   IKJPARS ECB                      @14\nDWSANS   DS    F                   IKJPARS answer area (PDL)        @14\n@R_admin DS    F                   @ of loaded IRRSEQ00 routine     @14\nSAVEFLAG DS    F                   Saved command-line options       @14\nMODSIZE  DS    F                  Size of SVC module from BLDL      @14\nMODEPOFF DS    F                  SVC module entry point offset     @14\nEUSER    DS    CL8                 Address space level RACF userid  @14\nPage_count DS  PL4                 Page counter                     @14\nLine_count DS  PL2                 Page line count                  @14\n         DS    0D                  Doubleword alignment             @14\nSYSPRINT DS    XL(X#DCB1L)         SYSPRINT DCB area                @14\n*                                                                   @14\n         DS    0H                  Halfword alignment               @14\nSPUTCODE DS    XL(PUTLEN)          PUT routine                      @14\n*                                                                   @14\n         DS    0F                  Fullword alignment               @14\nW#OPNDO  DS    XL(X#OPNDOL)        Length of OPEN/CLOSE list        @14\nPLIST@   DS    F                  Pointer to previous R_admin plist @14\nSVCENTRY_PTR DS A(SVCENTRY)        SVC or ESR entry                 @06\nDWSADDR  DS    F                   DWS address for ESTAEX routine   @14\n@INPARMS DS    F                   @ of input parameters            @14\n*\n*        SVC 99 (SYSOUT) related fields\n*\n$99R15   DS    F                   Return code from SVC 99\n$99RBPTR DS    F                   Pointer to SVC 99 RB\nS99RBLEN EQU   S99RBEND-S99RB\n$99RB    DS    (S99RBLEN)XL1       SVC 99 RB\n$99RBX   DS    XL(S99RBXLN)        SVC 99 RB Extension\n*        Pointers to TUs for ALLOCATE\n$99STUPL DS    0F                  Pointers for SYSOUT ALLOC\n$99SSYSP DS    F                   Ptr to SYSOUT TU\n$99SFREP DS    F                   Ptr to FREE on CLOSE TU\n$99SDDNP DS    F                   Ptr to RETURN output DDN TU\n$99STL   EQU   *-$99STUPL\n         ORG\n*\n*        Space for TUs which will contain variable information\n*\n$99TEXT  DS    0F                  Start of TUs\n$99FREC  DS    4XL1                FREE ON CLOSE\n$99DDNK  DS    14XL1               6 char header & 8 char DDname\n$99SYSOU DS    CL7                 6 char header & 1 char class\n$99TEXTL EQU   (*-$99TEXT)-1       -1 for use in clearing area\nRDDN     DS    CL8                 Report sysout DDname\n*                                                                   @14\n*        Parse processing related work areas                        @14\n*                                                                   @14\nInput_parmlen DS H                 Original input parameter length  @14\nCopied_input_parms DS CL100        Copy of original input parms     @14\nBUFLEN   DS    H                   Length of command buffer         @14\nBUFOFF   DS    H       Offset to 1st operand on true length in CBUF @14\nWork_input_parms DS CL100          Work copy of input parameters    @14\n*                                                                   @14\n*        End of parse processing related work areas                 @14\n*                                                                   @14\nDSN      DS    CL44                SVCLIB data set name             @14\nVOL      DS    CL6                 SVCLIB volser                    @14\nFLAGS    DS    XL1             Execution time flags                 @14\nF1#EPNL  EQU   X'80'           -EPNAME module copy exists in PVT    @14\nF1#RIBSA EQU   X'40'           -RIBs work area acquired             @14\nF1#ECSA  EQU   X'20'           -ECSA needed for SVC code (if on)    @14\n*                              -CSA needed for SVC code (if off)    @14\nF1#AM31  EQU   X'10'           -Use 31-bit EP in SVC slot           @14\nF1#GOTCSA EQU  X'08'           -We have obtained CSA/ECSA           @14\n*                                                                   @14\nSVC_TYPE DS    CL1                 SVC type for this request        @14\n*                                                                   @14\nESRSVCNO DS    CL3                 ESR SVC number (109/116/122/137) @14\n*                                                                   @14\nCurrent_option_length DS F   Length of current option for processor @14\n*                                                                   @14\nParse_flags DS XL1                 Parse related flags              @14\nParse_LIST EQU X'80'               -LIST if 1 / INSTALL if 0        @14\nParse_SVC  EQU X'40'               -SVC= supplied                   @14\nParse_LMOD EQU X'20'               -LMOD= supplied                  @14\nParse_ATTR EQU X'10'               -ATTR= supplied                  @14\nParse_LOCKS EQU X'08'              -LOCKS= supplied                 @14\nParse_GOODNITE EQU X'04'           -GOODNITE= supplied              @14\nParse_USER EQU X'02'               -USER= supplied                  @14\nNo_more_data EQU X'01'             ...No more operands in data      @14\n*\nPKW_used DS    X\nPKW_SVC  EQU   X'80'               SVC= keyword found\nPKW_LMOD EQU   X'40'               LMOD= keyword found\nPKW_ATTR EQU   X'20'               ATTR= keyword found\nPKW_LOCKS EQU  X'10'               LOCKS= keyword found\nPKW_GOODNITE EQU X'08'             GOODNITE= keyword found\nPKW_USER EQU   X'04'               USER= keyword found\nPKW_TYPE EQU   X'02'               TYPE= keyword found\n\n*                                                                   @14\nATTR_FLAGS DS XL1                  Attributes requested flags       @14\nATTR_NPRMT EQU X'80'               -Non-preemptable requested       @14\nATTR_APF   EQU X'40'               -APF requested (APF=YES)         @14\nATTR_AR    EQU X'20'               -AR requested (AR=YES)           @14\nATTR_ESR   EQU X'10'               -ESR SVC request                 @14\nATTR_ASF   EQU X'08'               -ASF requested                   @14\n*                                                                   @14\nLOCKS_FLAGS DS XL1                 Locks requested flags            @14\nLOCKS_LOCAL  EQU X'80'             -LOCAL lock requested            @14\nLOCKS_CMS    EQU X'40'             -CMS lock requested              @14\nLOCKS_SRM    EQU X'20'             -SRM lock requested              @14\nLOCKS_SALLOC EQU X'10'             -SALLOC lock requested           @14\nLOCKS_DISP   EQU X'08'             -DISPatcher lock requested       @14\n*                                                                   @14\nPROC_FLAGS DS XL1                  Processing requested flags       @14\nPROC_GOODNITE EQU X'80'            -GOODNITE time was requested     @14\n*                                                                   @14\n         DS    0F                  Alignment                        @14\nSVCLIB   DS    CL(INDCB#L)         Input DCB area                   @14\n*                                                                   @14\n         DS    0F                                                   @14\nW#OPNDI  DS    XL(X#OPNDIL)        Length of OPEN/CLOSE list        @14\n@WORKAREA DS   F                   @ of IRRSEQ00 work area          @14\nWORKAREA_SIZE EQU 65536            Size of above work area          @14\nALET     DS    F                   ALET                             @14\nSAFRC    DS    F                   SAF Return Code                  @14\nRACFRC   DS    F                   RACF Return Code                 @14\nRACFRS   DS    F                   RACF Reason Code                 @14\nCurrent_profname DS CL15           Maximum length SVCUPDTE profile  @14\nCurrent_OWNER DS CL8               Maximum length OWNER field       @14\nCurrent_DATA DS CL100              1st 100 bytes of DATA field      @14\nCurrent_UACC DS CL7                Maximum length UACC field        @14\nCurrent_ACLID DS CL8               Maximum length ACLID field       @14\nCurrent_ACLACS DS CL7              Maximum length ACLACS field      @14\nINUSE_JOBNAME DS CL8              GQSCAN profile requestor job name @14\nINUSE_ASID DS  CL8                 GQSCAN profile requestor ASID    @14\nFUNCODE  DS    AL1                 R_Admin function code            @14\n@ACEE    DS    F                   @ of ACEE                        @14\nSUBPOOL  DS    AL1                                                  @14\nOUTMSG   DS    F                                                    @14\nRADPLIST DS    CL(ADMN_PROF_PROFNAME-ADMN_PROF_MAP) Plist header    @14\nEXTPROF  DS    CL246                  Name of profile to extract    @14\n*                                                                   @14\n*        PLIST for IRRSEQ00...that is, a list of adresses to the    @14\n*        actual Parameter data defined above                        @14\n*                                                                   @14\n*        The following is 13-0words in length and is redefined      @14\n*                                                                   @14\nWORKAREA@ DS   A                    1                               @14\nALET1@   DS    A                    2                               @14\nSAFRC@   DS    A                    3                               @14\nALET2@   DS    A                    4                               @14\nRACFRC@  DS    A                    5                               @14\nALET3@   DS    A                    6                               @14\nRACFRS@  DS    A                    7                               @14\nFUNCODE@ DS    A                    8                               @14\nRADPLIST@ DS    A                   9                               @14\nUSER@    DS    A                   10                               @14\nACEE@    DS    A                   11                               @14\nSUBPOOL@ DS    A                   12                               @14\nOUTMSG@  DS    A                   13                               @14\n         ORG   WORKAREA@                                            @14\nPLIST    DS    13F                Redefined IRRSEQ00 plist          @14\n         ORG   PLIST                                                @14\nUPT      DS    F                                                    @14\nECT      DS    F                                                    @14\nECB      DS    F                                                    @14\nPCL      DS    F                                                    @14\nANS      DS    F                                                    @14\nCBUF     DS    F                                                    @14\nUWAF     DS    F                                                    @14\nVEWA     DS    F                                                    @14\n         ORG   PLIST+52\nPARM1    DS    F\nPARM2    DS    F\nPARM3    DS    F\nPARM4    DS    F\nPARM5    DS    F\n*                                                                   @14\n*                                                                   @14\n* BLDL prime and result area                                        @14\n*                                                                   @14\n         AGO   .JH0812Z\nBIT0     EQU   128\nBIT1     EQU   64\nBIT2     EQU   32\nBIT3     EQU   16\nBIT4     EQU   8\nBIT5     EQU   4\nBIT6     EQU   2\nBIT7     EQU   1\n*\n.JH0812Z ANOP\n         DS    0F                                                   @14\nBLDLLIST DC    H'1'                # entries in list                @14\nBLDLLL   DC    H'76'               Length of entry in list          @14\nBLNAME   DC    CL8'IGX00nnn'       Name of module                   @14\nBLTTR    DS    XL3                 TTR                              @14\nBLK      DS    XL1                 * Concatenation data set number  @14\nBLZ      DS    XL1                                                  @14\nBLC      DS    XL1                                                  @14\nBLTTRTX1 DS    XL3                 * TTR OF FIRST TEXT RECORD       @14\nBLZ2     DS    XL1                 * ZEROS                          @14\nBLTTRNL  DS    XL3                 * TTR OF NOTE LIST (IF ANY)      @14\nBLNNOTEL DS    XL1                 * NUMBER OF NOTE LIST ENTRIES    @14\nBLMATTR1 DS    XL2                 * MODULE ATTRIBUTES (1)          @14\nBLA1RENT EQU   X'80'                 * REENTRANT                    @14\nBLA1REUS EQU   X'40'                 * REUSABLE                     @14\nBLA1OVLY EQU   X'20'                 * OVLY=YES                     @14\nBLA1TEST EQU   X'10'                 * TEST/TESTRAN                 @14\nBLA1SCTR EQU   X'04'                 * SCTR=YES                     @14\nBLA1EXEC EQU   X'02'                 * EXECUTABLE                   @14\nBLMODLN  DS    XL3                 * VIRTUAL STORAGE REQUIRED       @14\nBLLTX1   DS    XL2                 * LENGTH OF FIRST TEXT RECORD    @14\nBLEPADDR DS    XL3                 * MODULE ENTRY POINT             @14\nBLMATTR2 DS    XL1                 * MODULE ATTRIBUTES (2)          @14\nBLA1REFR EQU   X'01'                 * REFRESHABLE (2nd byte)       @14\nBLARMODE DS    XL1                 * AMODE/RMODE FLAGS              @14\nBLLRMOD  EQU   BIT3                  * Program residency mode\nBLAAMOD  EQU   BIT4+BIT5             * Alias entry point AMODE\n*                                      B'00' = AMODE 24\n*                                      B'10' = AMODE 31\n*                                      B'11' = AMODE ANY\n*                                      B'01' = AMODE 64\nBLMAMOD  EQU   BIT6+BIT7             * Main entry point AMODE\n*                                      B'00' = AMODE 24\n*                                      B'10' = AMODE 31\n*                                      B'11' = AMODE ANY\n*                                      B'01' = AMODE 64\nBLRMANY  EQU   X'10'                 * RMODE = ANY                  @14\nBLAM31   EQU   X'02'                 * AMODE = 31                   @14\nBLRLDCNT DS    XL1                 * RLD COUNT                      @14\nBLLSCLST DS    XL2                 * LENGTH OF SCATTER LIST         @14\nBLLTRTAB DS    XL2                 * LENGTH OF TRANSLATION TABLE    @14\nBLLESDTX DS    XL2                 * ESDID FOR FIRST TEXT RECORD    @14\nBLLESDEP DS    XL2                 * ESDID FOR ENTRY POINTS         @14\nBLMEMEPA DS    XL3                 * EPA OF 'REAL' MEMBER           @14\nBLMEMNAM DS    XL8                 * NAME OF 'REAL' MEMBER          @14\n         DS    XL22                <residual>                       @14\n*                                                                   @14\nWTOD     DS    CL200               Dynamic WTO construction area    @14\n*                                                                   @14\n@LOADEP  DS    F                   @ of LOAD'd EPNAME module        @14\n@COPYEPN DS    F                   @ of copied EPNAME module        @14\n@CSAEPN  DS    F                   @ of LMOD in in CSA/ECSA         @14\n@CSAEPN@ DS    F                   @ of E.P. of LMOD in CSA/ECSA    @14\nTIMER_ID DS    F\n*                                                                   @14\n* Date & time handling related fields                               @14\n*                                                                   @14\nParm_bin_Goodnight DS F            Binary Goodnight time (HHMM)     @14\nSTCKAREA DS    D                   STCK result save area            @14\nSTCK_Adjusted DS D                 STCK adjusted result             @14\nOUTAREA  DS    XL16                STCKCONV result area (16 bytes)  @14\nSTCKCONVL STCKCONV MF=L            STCKCONV work area               @14\nUNPKAREA DS    CL9               * UNPK to 8 bytes + 1 to fake sign @14\nTIMEDATE DS    CL24             Zoned decimal format of time & date @14\n         ORG   TIMEDATE            Redefine TIMEDATE area           @14\n*        HHMMSSthmiju0000MMDDYYYY                                   @14\nHOURS    DS    CL2                 Hours                            @14\nMINUTES  DS    CL2                 Minutes                          @14\nSECONDS  DS    CL2                 Seconds                          @14\nSUBSEC   DS    CL6                  subsecond values \"thmiju\"       @14\n         DS    CL4                 <filler>                         @14\nMONTH    DS    CL2                 Month                            @14\nDAY      DS    CL2                 Day                              @14\nYEAR     DS    CL4                 Year                             @14\n* End of date & time handling fields                                @14\n*                                                                   @14\n* SWA processing related items                                      @14\n*                                                                   @14\nSWAREQRC DS    F                   SWAREQ RC                        @14\nSWEPAPTR DS    F                   EPA pointer                      @14\nEPA      DS    XL20                EPA non-rent area                @14\nSWAPARMS SWAREQ MF=L               SWA request parameter list       @14\nJFCB     DS    XL176               JFCB copy area (SVCLIB)          @14\n*                                                                   @14\nLOAD4L   LOAD  SF=L                LOAD model area\nEXTRACTL EXTRACT *-*,FIELDS=COMM,MF=L EXTRACT model area\nCOMMADDR DS    A\nESTAEL   ESTAE MF=L                                                 @03\nSTIMER_L STIMERM SET,MF=L\nRETCODE  DS    F                   Return code                      @14\n*                                                                   @14\n*        Return Code equates                                        @14\n*                                                                   @14\nNOTAPF   EQU   01                  SVCUPDTE not APF authorized      @14\nNOPROF   EQU   02                  SVCUPDTE profile does not exist  @14\nNOSVC#   EQU   03                  Required SVC keyword not present @14\nBADENV3  EQU   04                  SVCLIB DD missing                @14\nBADENV5  EQU   06                  -IRRSEQ00 service not found      @14\nBADAUTH  EQU   08                  User not auth to add/replace SVC @14\nBADERRET EQU   09                  ERRET routine driven             @14\nBADTSOEV EQU   10                  Non-zero return from IKJTSOEV    @14\nBADENQ   EQU   12                  ENQ for SVCUPDTE resource failed @14\nBADEPN1  EQU   16         EPNAME module not found on SVCLIB Library @14\nBADENV18 EQU   18               -Unable to obtain IRRSEQ00 workarea @14\nBADENV19 EQU   19               -Unable to obtain RIBs workarea     @14\nBADENV2  EQU   20                  Illegal execution environment    @14\nBADSVCN1 EQU   24       Backing slot for requested SVCNO not T2/3/4 @14\nBADENV25 EQU   26            -Report sysout file allocation failure @14\nBADENV31 EQU   32               -Open for report sysout file failed @14\nBADSAF1  EQU   34                  -SAF extract failure             @14\nBADESRT  EQU   35                  ESR T1/T2/T6 SVCs not supported  @14\nBADEXTR2 EQU   36                  -No SVCUPDTE profiles found      @14\nBADEXTR3 EQU   37                  -EXTR000 - not CLASS(#SNOMISC)   @14\nBADEXTR4 EQU   38                  -EXTR000 - SD # not 1            @14\nBADEXTR5 EQU   39              -EXTR000 - BASE segment not returned @14\nBADEXTR6 EQU   40                  -EXTR000 - Invalid length        @14C\n                                               SVCUPDTE_* profile   @14C\n                                               found on extract     @14\nBADQSCAN EQU   41              -CHKINUSE - unexpected GQSCAN return @14\nBADMLWTO EQU   42                 Unable to acquire MLWTO work area @14\nBADOPN1  EQU   44                  OPEN for SVCLIB failed           @14\nBADSWA   EQU   48                  SWAREQ request failed            @14\nBADDSORG EQU   52                  SVCLIB not DSORG=PO/POE          @14\nBADRECFM EQU   56                  SVCLIB not RECFM=U               @14\nBADMVOL  EQU   60             SVCLIB library cannot be multi-volume @14\nBADMEM1  EQU   64                  Member name coded on SVCLIB      @14\nBADLOCKS EQU   68                  Invalid LOCKS parameter supplied @14\nBADSVCNO EQU   72                  SVC number parameter not numeric @14\nBADSVCUR EQU   73                  SVCUPDTE reversal failed         @14\nBADEOD1  EQU   76       Goodnight time (HHMM) parameter not numeric @14\nBADSVCN2 EQU   80                  SVC number not in range 0-255    @14\nBADEOD2  EQU   84      Goodnight time (HHMM) parameter out of range @14\nBADEOD3  EQU   88              Goodnight time < current time (HHMM) @14\nBADSVCN3 EQU   92              ESR T3/4 naming convention violation @14\nBADEPN2  EQU   96      EPNAME module attribute requirements not met @14\nBADEPN3  EQU   100                 LOAD for EPNAME module failed    @14\nBADEPN4  EQU   104                 EPNAME module is RMODE=SPLIT     @14\nBADNRENT EQU   105                 LMOD not marked RENT on SVCLIB   @14\nBADNREUS EQU   106                 LMOD not marked REUS on SVCLIB   @14\nBADNREFR EQU   107                 LMOD not marked REFR on SVCLIB   @14\nBADNEXEC EQU   108                 LMOD not marked EXEC on SVCLIB   @14\nBADNOVLY EQU   109             LMOD cannot be marked OVLY on SVCLIB @14\nBADNSCTR EQU   110             LMOD cannot be marked SCTR on SVCLIB @14\nBADNSPLT EQU   111            LMOD cannot be marked SPLIT on SVCLIB @14\nBADEPN5  EQU   108        <N/A>    Insufficient private for EPNAME  @14\nBADLOGIC EQU   112                 Bad logic (loc #__) - R15=______ @14\nBADNTEST EQU   113            LMOD cannot be marked TEST/TESTRAN    @14\nBADNCNCT EQU   114            LMOD must be on 1st library on SVCLIB @14\n*        EQU   116                 <available>                      @14\nBADNOCSA EQU   120             Insufficient CSA/ECSA for SVC module @14\nBADNOSQA EQU   121            Insufficient SQA/ESQA for USER filter @14\nAUTHLOCK EQU   124        User not authorized to set requested LOCK @14\nBADPARM1 EQU   128                 Missing PARM/PARMDD              @14\nBADPARM2 EQU   132                 Excessive input parmeters length @14\nBADPARM3 EQU   136                 Invalid characters in input      @14\nBADPARSE EQU   137                 IKJPARS failed                   @14\n*                                   parameter string                @14\nBADPARM4 EQU   140                 Invalid PARM field found         @14\nBADFENQ  EQU   141                 Slot ENQ failed                  @14\nBADTYPR  EQU   142                 non-ESR request requires TYPE    @14\nBADSVCUS EQU   143                 SVCUPDTE service request failed  @14\nBADQEDIT EQU   144                 QEDIT failure                    @14\n*                                                                   @14\nMYFLAGS  DS    XL1                 Local processing flags           @14\nNEXTREQ  EQU   X'80'               Indicates a next request         @14\nFOUND1   EQU   X'40'               Indicates >=1 profiles found     @14\nSPOOKY   EQU   X'20'               Indicates a ghost-generic found  @14\n*        EQU   X'10'               <available>                      @14\nSYSPPRES EQU   X'08'               SYSPRINT present in JCL          @14\nMLWTOAREA EQU  X'04'               MLWTO area acquired              @14\nAUTHUSER EQU   X'02'              Invoking user authorized to       @14C\n                                   install SVC with locks           @14\nSPECIAL  EQU   X'01'              Invoking user is global \"special\" @14\n*                                                                   @14\n*       FLAGS and its meanings                                      @14\n*                                                                   @14\nProfile_flags DS XL1               Profile related flags            @14\nSkip_repeat_field EQU X'80'        -skip repeat field occurences    @14C\n                                    for this field                  @14\nHave_ACLID EQU X'40'               -ACLID captured                  @14\nHave_ACLACS EQU X'20'              -ACLACS captured                 @14\nProfile_INUSE EQU X'10'       -Profile for SVC slot already in use  @14\n*                                                                   @14\n*       Fields for GQSCAN query                                     @14\n*                                                                   @14\nRIBSPACE_p DS  F                   Pointer to RIBs work area        @14\n         DS    0D                                                   @14\n*IBS     DC    A(AMOUNT)                                            @14\nRIBS     DS    A                   Pointer to RIBs work area        @14\nAMOUNTL  DC    F'1024'                                              @14\nQNAME    DC    CL8'SVCUPDTE'                                        @14\nRNAME    DS    0CL7                                                 @14\n         DC    CL1'_'              Underline                        @14\nRNAME1   DC    CL3'ESR'            ESR SVC # or regular SVC #       @14\nRNAME2   DC    CL3'fff'            ESR function code or blanks      @14\nRNAMEBLK DC    X'40'               <trailing required blank>        @14\nRNAMEEL  DS    X                   RNAME length for ENQ             @14\n*                                                                   @14\n*        RIBs return area (from GQSCAN)                             @14\n*                                                                   @14\n         DS    0D                                                   @14\n*MOUNT   DS    256F                   RIB DATA AREA                 @14\n*                                                                   @14\nGQSLIST  GQSCAN MF=L                                                @14\n*                                                                   @14\nSQA_ADDR DS    A(CHKU500)          Work area in SQA\nOLDENTRY DS    D                   Old SVC entry                    @03\nSVCNO    DS    Z'222'              SVC number\n         AGO   .JH0806G                                             @14\n*                                                                   @14\n* Skip the duplicate RNAME field definition until the LIST report   @14\n* is working properly.                                              @14\n* <WARNING> - The SVC install process currently uses this RNAME     @14\n*             field. The usage between INSTALL & CHKINUSE must be   @14\n*             cooperative.                                          @14\n*                                                                   @14\n*                                                                   @14\n*                                                                   @14\nRNAME    DS    CL6                 ENQ RNAME resource               @07\n.JH0806G ANOP                                                       @14\nEPNAME   DS    C'IGC0022B'         Name of SVC routine\n         ORG   EPNAME              Name of SVC routine load module  @14\nLMOD     DS    CL8                 Name of SVC routine load module  @14\nLOCKS    DS    C'8000 '            Lock indtcators: 8000 or C000    @08\nENDOFDAY DC    Z'19000000'         CUTOFF TIME: HHMMSSHH\nUSER     DS    0CL9                                                 @14\nUSERLEN  DS    AL1                                                  @14\nUSERID   DS    CL8                 user-ID                          @05\nTYPE     DS    CL1                 SVC TYPE                         @14\nTYPEBIN  DS    XL1                 SVC TYPE in binary byte          @14\nSVC#     DS    X                   SVC number in binary             @14\nESR#     DS    X                   ESR number in binary          @06@14\nESR#FW   DS    F                   ESR number in binary (fullword)  @14\nSHUTDOWN DS    CL4                 GOODNITE time                    @06\nLOCK#    DS    X'80'               Locks in binary: 80 or C0        @08\n*\n*        RACF model(s) workareas - redefined                        @14\n*                                                                   @14\n         DS    0D                                                   @14\nRACF_DYN RACROUTE REQUEST=AUTH,                                        X\n               RELEASE=1.8,                                         @14X\n               MF=L\nRACF_LEN EQU   *-RACF_DYN\n         ORG   RACF_DYN            Redefine                         @14\nSAFRACFL RACROUTE REQUEST=AUTH,                                     @14X\n               ENTITYX=*-*,                                         @14X\n               CLASS=FACILITY,                                      @14X\n               MSGSUPP=YES,                                         @14X\n               ATTR=READ,                                           @14X\n               WORKA=*-*,                                           @14X\n               LOG=NONE,                                            @14X\n               RELEASE=1.9.2,                                       @14X\n               MF=L                                                 @14\nSAFRACLL EQU   *-SAFRACFL        Length of generated RACROUTE area  @14\n*                                                                   @14\nRACFWORK DS    64D                 RACROUTE WORK AREA (512 BYTES)\n*                                                                   @14\n*        Parameter lists initialized from \"models\"\n*\nSVCULIST SVCUPDTE 0,REPLACE,TYPE=4,EP=0,MF=L\n         DS    0H                                                   @14\nSVCUPLNEW DS   XL(SVCUMODLL)       SVCUPDTE plist for new SVC       @14\n         DS    0H                                                   @14\nSVCUPLOLD DS   XL(SVCUMODLL)       SVCUPDTE plist for old SVC       @14\n         AGO   .JH1104A                                             @14\n*                                                                   @14\n*        SVCUPDTE macro expansion redefinitions for overrides       @14\n*                                                                   @14\nSVCUSVCM EQU   SVCULIST+03,1           SVC to modify                @14\nSVCUEP   EQU   SVCULIST+04,4           E.P. of new SVC routine      @14\nSVCUTYPE EQU   SVCULIST+08,1           SVC type                     @14\nSVCUATTR EQU   SVCULIST+09,1           SVC attribute bits           @14\nSVCULOCK EQU   SVCULIST+10,1           SVC locks                    @08\nSVCUESR# EQU   SVCULIST+11,1           Extended SVC routing code    @11\n*                                                                   @14\n*        SVCUATTR equates                                           @14\n*                                                                   @14\nSVCUATTR_NPRMPT EQU X'02'          NPRMPT=YES                       @14\nSVCUATTR_AR     EQU X'04'          AR = YES                         @14\nSVCUATTR_APF    EQU X'08'          APF=YES                          @14\n*                                                                   @14\n*        SVCULOCK equates                                           @14\n*                                                                   @14\nSVCULOCK_LOCAL  EQU X'80'          LOCAL lock                       @14\nSVCULOCK_CMS    EQU X'40'          CMS lock                         @14\nSVCULOCK_SRM    EQU X'20'          SRM lock                         @14\nSVCULOCK_SALLOC EQU X'10'          SALLOC lock                      @14\nSVCULOCK_DISP   EQU X'08'          DISP lock                        @14\n.JH1104A ANOP                                                       @14\n*                                                                   @14\n*ENQL     ENQ   (QNAME1,*-*,E,L'SVCNO,SYSTEMS),RET=USE,MF=L         @07\nENQL     ENQ   (QNAME1,*-*,E,L'RNAME,SYSTEMS),RET=USE,MF=L          @07\nENQ_TABLE ENQ  (SYSZSVCQ,SYSZSVCR,E,,SYSTEM),MF=L                   @02\n*                                                                   @14\nENTITYW1 DS    H                   Length of buffer (w/o lengths)   @14\nENTITYW2 DS    H                   Length of resource name          @14\n*                                                                   @14\nENTITYW3 DC    CL16' '                                              @14\nENTITW3L EQU   *-ENTITYW3          Generate length of resource      @14\n*                                                                   @14\nSAFWR15  DS    F                   SAF VERIFY R15 result            @14\nSAFWRRET DS    F                   RACF return code from VERIFY     @14\nSAFWRREA DS    F                   RACF reason code from VERIFY     @14\n*                                                                   @14\nHDRLINE  DS    CL133              Area for header line construction @14\nPRTLINE  DS    CL133               Detail report line               @14\n*                                                                   @14\nDWSLEN   EQU   *-DWS               Generate DWS work area length    @14\n*                                                                   @14\n         TITLE 'Local provided dummy sections'                      @14\n******************************************************************* @14\n*                                                                 * @14\n*        SVCUPDTE plist mapping                                   * @14\n*                                                                 * @14\n*        Note: This is SVCUPDTE version 1 mapping. This version   * @14\n*              level mapping should be compared to any new        * @14\n*              mappings that IBM may introduce in the future.     * @14\n*                                                                 * @14\n******************************************************************* @14\nSVCU     DSECT                                                      @14\nSVCUVERS DS    XL1                 SVCUPDTE version number          @14\nSVCUFC   DS    XL1                 Function to be performed         @14\nSVCUFC_replace EQU X'01'           -Replace SVC entry               @14\nSVCUFLGS DS    XL1                 SVC flag, ESR flag               @14\nSVCUFLGS_ESR EQU X'02'             -ESR # supplied                  @14\nSVCUSVC  DS    XL1                 SVC to modify                    @14\nSVCUEP   DS    F                   E.P. of new SVC routine          @14\nSVCUTYPE DS    XL1                 SVC type                         @14\nSVCUATTR DS    XL1                 SVC attribute bits               @14\nSVCUATTR_NPRMPT EQU X'02'          -Non-preemptable                 @14\nSVCUATTR_AR     EQU X'04'          -AR mode callers allowed         @14\nSVCUATTR_APF    EQU X'08'          -APF callers only                @14\nSVCULCKS DS    XL1                 SVC locks                        @14\nSVCULCKS_LOCAL  EQU X'80'          -LOCAL lock                      @14\nSVCULCKS_CMS    EQU X'40'          -CMS lock                        @14\nSVCULCKS_SRM    EQU X'20'          -SRM lock                        @14\nSVCULCKS_SALLOC EQU X'10'          -SALLOC lock                     @14\nSVCULCKS_DISP   EQU X'08'          -DISP lock                       @14\nSVCUESRC DS    XL1                 Extended SVC routing code        @14\nSVCUNAME DS    XL8                 SVC entry point name             @14\n*                                                                   @14\n         TITLE 'System provided dummy sections'                     @14\n         IHASVC LIST=YES               SVC TABLE ENTRY              @14\n         PRINT NOGEN\n         IRRPCOMP                                                   @14\n         IHAPDS DSECT=YES                                           @14\n         IHAPSA DSECT=YES\n         CVT   DSECT=YES,LIST=NO\n         AIF   (D'CVTEDAT).LPS01                                    @11\nCVTEDAT  EQU   X'01'              Enhanced DAT support (Large Page) @11\n.LPS01   ANOP                                                       @11\n         IHASCVT DSECT=YES,LIST=NO     SECONDARY CVT\n         IHAASCB DSECT=YES,LIST=NO\n         IHAASXB\n         IHAACEE\n         IKJTCB DSECT=YES,LIST=NO\n         IHALLE\n         IHACDE\n         IHASDWA DSECT=YES,VRAMAP=NO\n         DCBD  DSORG=PS,DEVD=DA    DCB mapping                      @14\n*                                                                   @14\n         IEFTIOT1                  Generate TIOT mapping            @14\n*                                                                   @14\nIEFJFCBN DSECT                                                      @14\n         IEFJFCBN LIST=YES                                          @14\n*                                                                   @14\n         IEFJESCT                                                   @14\n*                                                                   @14\n         IEFZB505 LOCEPAX=YES                                       @14\n*                                                                   @14\n         ICHSAFP DSECT=YES       Generate SAF Router parameter list @14\n*                                                                   @14\n         ISGRIB                    GRS RIBs                         @14\n*                                                                   @14\n         IHAASSB LIST=YES                                           @14\n*                                                                   @14\n         IEZJSCB ,                 Job Step Control Block           @14\n*                                                                   @14\nCSCB     DSECT                                                      @14\n         IEECHAIN ,                Command Scheduling Control Block @14\n*                                                                   @14\n         IEFZB4D0 ,                SVC 99 DSECTS                    @14\n*                                                                   @14\n         IEFZB4D2 ,                SVC 99 EQU'S                     @14\n*                                                                   @14\n         IKJCPPL                                                    @14\n*                                                                   @14\n         DSECT                                                      @14\n         IEZCOM                                                     @14\nCIB      DSECT                                                      @14\n         IEZCIB                                                     @14\n         YREGS\nSVCUPDTE CSECT                                                      @14\n         END   SVCUPDTE\n//LKED    EXEC PGM=IEWL,REGION=2M,PARM='MAP,RENT,AC=1',COND=(0,NE)\n//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,DELETE)\n//*YSLMOD  DD DISP=SHR,DSN=SSD.TESTLIB(SVCUPDTE)\n//*YSLMOD  DD DISP=SHR,DSN=SSD.TESTLIB(NEWUPDTE)\n//SYSLMOD  DD DISP=SHR,DSN=SYS1.W$$.LINKLIB(SVCUPDTX)\n//SYSPRINT DD SYSOUT=*\n//\n\n//\n//\n// 08/31/2015 backup of NEWUPDTE\n// This backup was created before reverting the PARS000 subroutine\n// from manual parse over to the use of IKJPARS.\n//\n//\n\nRIBSPACE vs. AMOUNTL - move AMOUNT out of DWS to free 1K bytes\n\n\n\n* hexconv - 1 byte in w/ 2 bytes out                                @14\n         LA    R14,DWD+3           R14 -> source area to convert    @14\n         LA    R15,MSG028AA        R15 -> target display area       @14\n         UNPK  0(3,R15),0(2,R14)   unpack into display area         @14\n         MVZ   0(2,R15),=XL17'00'  move zone into display area      @14\n         TR    0(2,R15),=C'0123456789ABCDEF' translate              @14\n         MVI   2(R15),C' '         overlay clobbered byte           @14\n         $RWTO WTOD,WRITE=YES                                       @14\n*                                                                   @14\n*        Set return code and go exit                                @14\n*                                                                   @14\n         LHI   R15,BADENV1         Set return code to               @14\n         ST    R15,RETCODE          expose to caller                @14\n         J     EXIT                  & go exit w/ return code       @14\n\n\n\nDo we need to worry about alias names??????\n\n\n*   THIS CODE IS ENTERED WHEN MUST COMPLETE STEP IS INDICATED.\n*   IT FIRST DETERMINES IF SET OR RESET AND THEN SETS THE CURRENT TCB.\n*   THEN IT MAKES ALL TASKS IN THE JOB STEP NON-DISPATCHABLE.\n         SPACE\n         USING TCB,R4\n* MUST COMPLETE STEP ROUTINE\n*/*MCSTEP: E CODE 1*/\n*/* D (YES,RESETSTP,NO,) THIS IS A RESET REQUEST*/\nMCSTEP   TM    SWITCHES,UNDOIT      .IS THIS A RESET\n         BO    RESETSTP            .YES\n*/*SETSTP: P TURN ON SMC FLAG IN CALLER TCB*/\nSETSTP   OI    TCBFLGS2,TCBFJMC    .SET MUST COMPLETE FLAG\n*/* P TURN ON INHIBIT ASYNCH EXITS BIT IN CALLER TCB*/\n         OI    TCBFLGS1,TCBFX      .INHIBIT ASYNCHRONOUS EXITS\n         LR    R7,R15                  SAVE REG ACROSS SIGPS\n*/* S (,MAIN1) SIGPCPUS: CLEAR OTHER CPUS OUT OF A.S.*/\n         BAL   R12,SIGPCPUS            CLEAR OTHER CPUS OUT OF A.S.\n         LR    R15,R7                  RESET REG\n         B     MAIN1               .PROCEED DOWN TCB TREE\n*/*RESETSTP: P TURN OFF SMC IN CALLER TCB*/\nRESETSTP NI    TCBFLGS2,OFF-TCBFJMC         .RESET MUST COMPLETE\n*/* P TURN OFF INHIBIT ASYNCH EXITS BIT IN CALLER TCB*/\n         NI    TCBFLGS1,OFF-TCBFX  .ALLOW ASYNCHRONOUS EXITS\n*/*MAIN1: L GET JSTCB (OR INIT TCB, IF ANY)*/\nMAIN1    L     R10,TCBJSTCB        .GET CALLERS JOB STEP TCB\n         DROP  R4\n\n\n\n* IGX24CHK MODULE INTO THIS STORAGE\n         SR    R2,R2                    * GET SIZE ...\n         ICM   R2,B'0111',BLMODLN       * ... OF MODULE\n         MODESET KEY=ZERO               * GET INTO KEY ZERO\n         GETMAIN RU,LV=(R2),LOC=ANY,SP=228\n         LR    R10,R1                   * SAVE @(IGX24CHK)\n         LOAD  DE=BLNAME,DCB=(R11),ADDR=(R10)\n         MODESET KEY=NZERO              * REVERT TO KEY 8\n* CLOSE THE LOAD LIBRARY\n         CLOSE ((R11)),MODE=31\n         DROP  R11                      * FINISHED WITH DCB\n\nX24I01A  WTOR  'X24I01A aaaaaaaa is at xxxxxxxx - OK to install front e+\n               nd ?',REPLY,3,ECB,ROUTCDE=2\n         WAIT  ECB=ECB                  * WAIT FOR RESPONSE\n         CLC   REPLY,YES                * PERMISSION GRANTED ?\n         BNE   DENIED                   * NO - QUIT\n* INSERT THE ADDRESS OF THE 'REAL' IGX00024 INTO THE IGX24CHK MODULE\n         MODESET KEY=ZERO               * GET INTO KEY ZERO\n         MVC   28(4,R10),SVCEP          * STORE @IGX00024 IN IGX24CHK\n         MODESET KEY=NZERO              * REVERT TO KEY 8\n         EJECT\n*----------------------------------------------------------------------\n* PERMISSION GRANTED, SO INSTALL THE IGX00024 FRONT END INTERCEPT\n*----------------------------------------------------------------------\n* SORT OUT THE ENTRY POINT ADDRESS\nDOINSTAL EQU   *\n         SR    R2,R2                    * GET @(EP) RELATIVE ...\n         ICM   R2,B'0111',BLEPADDR      * ... TO START OF MODULE\n         AR    R10,R2                   * COMPUTE ABSOLUTE ENTRY POINT\n         O     R10,AMODE31              * SET AMODE 31 BIT\n* AND INSTALL THE INTERCEPT ADDRESS IN THE ESR TABLE\nESRUPDTE EQU   *\n         MODESET KEY=ZERO,MODE=SUP      * KEY ZERO/SUPERVISOR STATE\n         ENQ   (SYSZSVC,TABLE,E,L'TABLE,SYSTEM),RET=NONE\n         LRA   R2,SVCEP                 * R2 = REAL ADDRESS OF ESRT\n         BC    8,DOLURA1                * JUMP IF OK TO PROCEED\n         LA    R8,4                     * ELSE ...\n         B     INSTDONE                 * ... REJECT UPDATE\n\n\n         AGO   .JRH9999\n                      1111111111222222222233333333334\n                4567890123456789012345678901234567890\n* Following line added by @14 change                                @14\nMSG112S  WTO   'SVC112S - Bad logic (loc #__) - R15=________ - please rX\n               eport',ROUTCDE=(11),MF=L                             @14\nMSG112SL EQU   *-MSG112S                                            @14\nMSG112SA EQU   WTOD+30,2           Logic location identifier        @14\nMSG112SB EQU   WTOD+40,8           R15 value                        @14\n*                                                                   @14\n\n\n\n\n\n\n\n* GETMAIN storage for the module and load the\n* SVC module into this storage\nDOLOAD   DS    0H\n         SR    R2,R2               Get size ...\n         ICM   R2,B'0111',BLMODLN  ... of module\n\n\n\n\n\nFLags\n=====\nSVC is ESR\nEPNAME is RMODE24\nEPNAME is AMODE24\nSVCLIB is open\n\n      then open, bldl, load, close, etc.\n\n.JRH9999 ANOP\n\n\n\n\n\n\n\n\nSVCENTRY DSECT\nSVCEP    DS    A                       SVC ENTRY POINT ADDRESS\nSVCAMODE EQU   X'80'                   AMODE INDICATOR         @G860PXF\nSVCATTR1 DS    0H                      ATTRIBUTES              @ZM45748\nSVCTP    DS    B                       TYPE FIELD              @ZM45748\nSVCTP1   EQU   X'00'                   TYPE 1 SVC\nSVCTP2   EQU   X'80'                   TYPE 2 SVC\nSVCTP34  EQU   X'C0'                   TYPE 3 OR 4 SVC\nSVCTP6   EQU   X'20'                   TYPE  6 SVC             @Z40FPYK\nSVCAPF   EQU   X'08'                   APF AUTHORIZED 1-AUTHORIZED\nSVCESR   EQU   X'04'                   SVC IS A PART OF THE ESR\nSVCNP    EQU   X'02'                   NON-PREEMPTIVE SVC      @Z40FPYK\nSVCASF   EQU   X'01'                   SVC CAN BE ASSISTED     @G50EPXH\nSVCATTR3 DS    B                       ATTRIBUTES                  @L2C\nSVCAR    EQU   X'80'                   SVC MAY BE ISSUED IN AR ASC @L2A\n*                                      MODE\nSVCSSESR EQU   X'01'                   Only applies to a subsystem\n*                                      screening table. Must be off\n*                                      for SVC entries.            @L3A\nSVCLOCKS DS    H                       LOCK ATTRIBUTES\nSVCLL    EQU   X'80'                   LOCAL LOCK NEEDED\nSVCCMS   EQU   X'40'                   CMS LOCK NEEDED\nSVCOPT   EQU   X'20'                   OPT LOCK NEEDED\nSVCALLOC EQU   X'10'                   SALLOC LOCK NEEDED\nSVCDISP  EQU   X'08'                   DISP LOCK NEEDED\n*\n*  MAPPING FOR ESR TABLE ENTRY                                 @G860PXF\n*\nSVCESRAD EQU   SVCEP,4                 ADDRESS OF ESR TABLE IF @G860PXF\n*                                      SVCESR IS ON            @G860PXF\nSVCESRMX EQU   SVCATTR1,4              MAXIMUM ESR NUMBER      @G860PXF\n*                                      SUPPORTED BY THIS ESR   @G860PXF\n\n* Parse routine needs to support the following\n*\n* SVC=nnn       SVC number to be assigned or in the case of an ESR\n*               function code the ESR SVC number for the type of\n*               SVC to be installed.\n*\n* LMOD=xxxxxxxx SVC load module name\n*\n* LOCKS=(xxx,yyy,...) where parameters must be one or more of the\n*       following:\n*       LOCAL   - local lock needed\n*       CMS     - general cross memory services lock\n*       OPT     -\n*       SALLOC  - space allocation lock\n*       DISP    - dispatcher (serializes certain global functions,\n*                 for example, TIMER queues.\n*       CMSSEQDQ - ENQ/DEQ CMS lock - serializes ENQ/DEQ functions\n*                  & control blocks\n*       Default is: ????????? (review existing code)\n*       Rules are: 1) Type 1 must not specify LOCAL (it is\n*                     automatically assigned by the SVC FLIH before\n*                     the SVC is given control)\n*                  2) Type 6 cannot specify any locks\n*                  3) Type 2, 3, or 4 must specify LOCAL if CMS\n*                     specified\n*                  4) Type 3 or 4 cannot specify a global spin lock\n*\n*                  See \"Serialization Summary\" chapter in the\n*                  repective \"z/OS - MVS Diagnosis: Reference\"\n*                  manual for additional information.\n*\n* APF=YES|NO    - SVC restricted to authorized programs\n*         ==\n* AR=YES|NO     - SVC can be issued by program in access register\n*        ==       ASC mode.\n* NPRMPT=YES|NO - SVC is non-preemptible (YES) or can be preempted\n*            ==   (NO)\n* TYPE=1|2|3|4|6 - SVC type. Default is 4.\n*            =\n* USER=xxxxxxxx  - Userid filter. Only this user gets the new SVC code\n*\n* Sample:\n* LMOD=xxxxxxxx,LOCKS=(LOCAL,CMS),APF=YES,AR=YES,NPRMPT=YES,TYPE=N,\n* GOODNITE=hhmm,USER=uuuuuuuu\n*\n* Insertion or replacement of Type 1 or Type 6 SVCs requires \"systems\"\n* level priviledges...i.e. update access to SYS1.PARMLIB.\n*\n* Use of lock parameters other than LOCAL & CMS requires \"systems\"\n* level priviledges.\n*\n* Use of attribute NPRMPT=YES requires \"systems\" level priviledges\n*\n* You cannot change the Type of a pre-existing SVC in the range of\n* 0-199 or any ESR T3/4 SVC in the same range.\n*\n* For now any modification of a Type 1, 2 or 6 ESR SVC entry (116,\n* 122, or 137) is off-limits.\n*\n*\n\n*\n* Get jobname for console messages\n*\n         L     R1,CVTPTR           R1 -> CVT\n         L     R1,0(R1)            R1 -> current TCB\n         L     R1,4(R1)            R1 -> TCB words\n         L     R1,12(R1)           R1 -> TIOT\n         MVC   Our_JOBNAME(8),0(R1) Set monitor task jobname for WTOs\n\n\n// EXEC PGM=SVCUPPARM='SVC=109,LMOD=xxxxxxxx,LOCKS=(12345678,12345678,\n//             12345678),APF=Y,AR=Y,NPRMPT=Y,TYPE=n,USER=xxxxxxxx,\n//             GOODNITE=HHMM'\n\nObviously the maximum length of the parameters that can be supplied\nexceeds 100 bytes.\n\nTYPE=n is superfulous when SVC=nnn represents an ESR SVC number.\n\nDoc for SVCUPDTE service says only CMS or LOCAL can be provided for\nthe LOCKS= parameter. Checked the macro and found the following:\n\n.*02* INPUT -\n.*       APF      AUTHORIZATION CODE FOR THE SVC\n.*       AR       SVC MAY BE ISSUED IN ACCESS REGISTER MODE\n.*       EP       POINTER DEFINED ENTRY POINT ADDRESS\n.*       FUNC     IS THE OPERATION TO PERFORM\n.*       LOCKS    LOCKS TO BE OBTAINED FOR SVC\n.*                   TYPE 1 LOCKS DEFAULT TO\n.*                      HAVING THE LOCAL LOCK\n.*                   TYPE 3 + 4 MAY NOT HAVE ANY GLOBAL\n.*                      SPIN LOCKS\n.*                   TYPE 6 MAY NOT HAVE LOCKS\n.*\n.*       MF       TYPE OF SVCUPDTE MACRO\n.*                  MF=(E,ADDR) EXECUTABLE\n.*                    =L        PARAMETER LIST\n.*                     STANDARD COMBINED LIST AND EXECUTABLE FORM\n.*       NPRMPT   NON-PREEMPTIVE SVC\n.*       RELATED  USER COMMENT\n.*       SVC      IS THE SVC NUMBER WHOSE TABLE ENTRY IS TO BE\n.*                MODIFIED\n.*       TYPE     SVC TYPE\n.*\n.*    TOKEN            VALUE RANGE\n.*    -----            -----------\n.*     APF              YES,NO\n.*     AR               YES,NO\n.*     EP               POINTER-DEFINED ENTRY POINT ADDRESS\n.*     FUNC          REPLACE,DELETE,EXTRACT,EXTRACTANY\n.*     LOCKS    (LOCAL,DISP,SRM,CMS,SALLOC) <==================\n.*     NPRMPT           YES,NO\n.*     SVC              0-255\n.*     TYPE             1-6\n.*     EPNAME           1-8 CHARACTER NAME\n.*\n.*    TOKEN          MF=E            MF=L         MF=STANDARD\n.*    -----          ----            ----         -----------\n.*     APF           ERROR            OK              OK\n.*     AR            ERROR            OK              OK\n.*     EP OR EPNAME   OK**            OK**         MANDATORY+\n.*     FUNC          ERROR         MANDATORY       MANDATORY\n.*     LOCKS         ERROR            OK              OK\n.*     NPRMPT        ERROR            OK              OK\n.*     RELATED      OPTIONAL       OPTIONAL         OPTIONAL\n.*     SVC            OK*             OK*          MANDATORY\n.*     TYPE          ERROR         MANDATORY       MANDATORY\n\nThe following provides category & type information for locks (SVC & other)\nSerialization summary:\nhttp://pic.dhe.ibm.com/infocenter/zos/v1r12/index.jsp?topic=%2Fcom.ibm.zos.\nr12.ieav200%2Fsersum.htm\n\n*\nENTITY#A DC    H'17'               Length of buffer (w/o lengths)\nENTITY#B DC    H'00'               Length of resource name\nFACILITY DC    AL1(8),CL8'#SNOMISC' RACF CLASS for RACROUTE\n*\nRESOURCE DC    CL17'SVCUPDTE_xxxyyy '\n\n\n\n\n         MVC   SAFRACFL(SAFRACLL),RACPATT Set RACROUTE model\n         LA    R2,ENTITYW3L        Pick up buffer length\n         STH   R2,ENTITYW1         Store for RACROUTE call\n         XC    ENTITYW2,ENTITYW2   Clear resource name length\n         MVI   ENTITYW3,C' '       Blank out entity field via\n         MVC   ENTITYW3+1(L'ENTITYW3-1),ENTITYW3 ripple\n         MVC   ENTITYW3,RESOURCE   Copy model entity\n*\n         RACROUTE REQUEST=AUTH,                                        X\n               ENTITYX=ENTITYW1,                                       X\n               CLASS=FACILITY,                                         X\n               ATTR=READ,                                              X\n               WORKA=SAFWA,                                            X\n               LOG=NONE,                                               X\n               RELEASE=1.9.2,                                          X\n               MF=(E,SAFRACFL)\n*\n* Save SAF R15 and RACF return code & reasons code for later use or\n* diagnostics\n*\n         ST    R15,SAFWR15\n         LA    R8,SAFRACFL     R8 -> RACROUTE Router Parameter list\n         USING SAFP,R8         RACF Router parameter list address\n         L     R14,SAFPRRET        Pick up RACF return code\n         ST    R14,SAFWRRET        Save for later\n         L     R14,SAFPRREA        Pick up RACF reason code\n         ST    R14,SAFWRREA        Save for later\n         DROP  R8                  Drop SAFP addressability\n*\n* Check to see if the invoking user is authorized to use program\n*\n         L     R15,SAFWR15         Pick up R15 from AUTH call\n         C     R15,=F'0'           Verify completed successfully ?\n         BE    INIT200             ...bif user authorized\n\n         DS    0F\nSAFRACFL RACROUTE REQUEST=AUTH,                                        X\n               ENTITYX=ENTITY#A,                                       X\n               CLASS=FACILITY,                                         X\n               ATTR=READ,                                              X\n               WORKA=SAFWA,                                            X\n               LOG=NONE,                                               X\n               RELEASE=1.9.2,                                          X\n               MF=L\nSAFRACLL EQU   *-SAFRACFL        Length of generated RACROUTE area\n\n\n\n\n.*       CHECK FOR VALID, NON-DUPLICATE LOCKS\n.*             - TYPE 1 DEFAULTS TO HAVING THE LOCAL LOCK\n.*             - TYPE 3 + 4 MAY NOT HOLD ANY GLOBAL SPIN LOCK\n.*             - TYPE 6 MAY NOT HOLD ANY LOCK\n\n.* CHECK FOR TYPE 3 OR TYPE 4 SVC REQUESTING A GLOBAL SPIN LOCK\n         AIF   (&TYPENUM NE 3 AND &TYPENUM NE 4).L0820   TYPE 3/4?\n         AIF   (&TEMP NE &NSRM AND &TEMP NE &NSALLOC\n               AND &TEMP NE &NDISP).L0820              SPIN LOCK?\n   MNOTE 12,'TYPE 3/4 SVC CANNOT GET SPIN (&LOCKS(&INDEX1)) LOCK.'\n&BADENT  SETC  'YES'                  FATAL ERROR DETECTED\n.L0820   ANOP\n\nThus SRM, SALLOC & DISP are all spin locks\n\n\n\n\nFollowing is from SNOJRH.MISC.JCLLIB(MLWTO):\n============================================\n\n*PROCESS USING(WARN(3))\n         SYSSTATE ARCHLVL=2\nMLWTO    TITLE '-----  Sample Multi-line WTO test  -----'\n*\n* Register equates\n*\n         YREGS\nMLWTO    CSECT\nMLWTO    AMODE 31\nMLWTO    RMODE ANY\n         SPLEVEL SET=4\n         J     MAIN000             Go to resume point\n*\nPGMNAME  DC    CL8'MLWTO'\nPGMVER   DC    CL6'V0R1M0'\nPGMDATE  DC    CL8'&SYSDATC'       YYYYMMDD form\nPGMTIME  DC    CL5'&SYSTIME'       HH.MM form\n*\nMAIN000  DS    0H\n         BAKR  R14,0               Save status on linkage stack\n         LARL  R12,LTORG_AREA\n         USING (LTORG_AREA,LTORG_AREA_END),R12\n         LAE   R12,0(R12,0)        Establish LTORG base\n*\n*        Obtain dynamic working storage\n*\n         L     R0,=A(DWSLEN)       R0 = length to acquire\n         STORAGE OBTAIN,           Get wirking storage                 X\n               COND=YES,                                               X\n               LENGTH=(R0),                                            X\n               LOC=24,                                                 X\n               BNDRY=PAGE\n         LTR   R15,R15             Did we get the DWS storage ?\n         JZ    MAIN010             ...jif yes, continue\n         WTO   'MLWTO - Initial STORAGE request failed - terminating wiX\n               th U1001 abend',ROUTCDE=(11)\n         ABEND 1001,DUMP\n*\n*        Clear work area & set LSE indicator in stack\n*\nMAIN010  DS    0H\n         LR    R11,R1              Dynamic area addressability\n         LR    R2,R1               Dynamic address to R2 for MVCL\n         L     R3,=A(DWSLEN)       Get length to initialize\n         LA    R4,0                Source\n         LA    R5,0                Source len of 0 + pad byte of 0\n         MVCL  R2,R4               Clear the dynamic area storage\n*\n         LR    R13,R11         Establish dynamic storage addressability\n*\n         MVC   4(4,R13),=CL4'F1SA' Linkage Stack indicator\n         USING DWS,R13             DWS addressability\n         EREG  R0,R1               Restore entry R1\n         ST    R1,Entry_R1         Save entry R1 for later & diagnosis\n*\n         XR    R0,R0               Clear GPR0 for WTO\n         MVC   DWSWTO(VMC002IL),VMC002I Install model WTOR list\n         WTO   TEXT=((CNTLLINE,),(LABELINE,),                          +\n               (DATALINE,),(DATALINE,),(DATALINE,),(DATALINE,),        +\n               (DATALINE,),(DATALINE,),(DATALINE,),(DATALINE,)),       +\n               MF=(E,DWSWTO)\n\n\n         L     R11,RETCODE         R11 = RETCODE\n         LR    R1,R13              Get DWS area address\n         STORAGE RELEASE,          Free                                X\n               ADDR=(R1),           the                                X\n               LENGTH=DWSLEN         work area\n         LR    R15,R11             Put RETCODE in R15\n         EREG  R0,R1               Restore entry R0 & R1 values\nEXITX    DS    0H\n         PR    ,                   Restore status & return\n*\n\n\nLTORG_AREA LOCTR ,\n*\n*        Litteral pool\n*\n         LTORG ,\nCNTLLINE DC    Y(34),CL34'ABC300I CONTROL LINE MESSAGE'\nLABELINE DC    Y(70),CL70'FIELD1---- FIELD2---- FIELD3---- FIELD4----'\nDATALINE DC    Y(70),CL70'DATA LINE DATA LINE DATA LINE DATA LINE'\n*\n*=====================================================================*\n*                                                                     *\n*        WTOs                                                         *\n*                                                                     *\n*=====================================================================*\n         PUSH  PRINT\n         PRINT ON,DATA,GEN\n* Template for modified WTO text messages\n*                     1111111111222222222233333333334444444444555555555\n*               4567890123456789012345678901234567890123456789012345678\n*\n*              5666666666677777\n*              9012345678901234\n*\n* Action WTOs\n*\nVMC003A  WTO   'VMC003A - VMCFINIT started SUB=____ - it must be starte+\n               d SUB=MSTR, please restart',ROUTCDE=2,DESC=2,MF=L\nVMC003AL EQU   *-VMC003A           Generate length of WTO list form\n*\n* Informational WTOs\n*\nVMC002I  WTO   TEXT=((,D),(,D),(,D),(,D),(,D),(,D),(,D),(,D),(,D),     +\n               (,DE)),                                                 +\n               AREAID=Z,                                               +\n               DESC=(8,9,12),                                          +\n               MCSFLAG=(NOTIME),                                       +\n               MF=L\nVMC002IL EQU   *-VMC002I\n         POP   PRINT\n*=====================================================================*\n*                                                                     *\n* Miscellaneous constants                                             *\n*                                                                     *\n*=====================================================================*\n*\n* WTO related constants\n*\nLTORG_AREA_END DS 0D\nMLWTO    LOCTR ,\n*\n* Dynamic working storage mapping\n*\nDWS      DSECT                     DYNAMIC WORKING STORAGE\n         DS    18F                 REGISTER SAVE AREA\nEntry_R1 DS    F                   GPR1 value on entry to this program\nRETCODE  DS    F                   Return code for caller\n* MISCELLANEOUS WORK AREAS\nDWSWORK  DS    2F                  WTOR parameter list area\n@PARM    DS    F                   @ of input parameter list\nWTORECB  DS    F                   WTOR ECB\nDOMID    DS    F                   Message number for displayed message\nREPLY    DS    CL9                 WTOR reply area\nWORK9    DS    CL9                 9 byte hex conversion work area\n* Keep next 3 lines together\n         DS    0F\nWTOLINEL DS    AL2                 70 bytes in maximum length\nWTOLINE  DS    CL70                Dynamic WTO line area\n         SPACE 1\nWTOTXTP  EQU   WTOLINE+2,9         <task name>+X'40'\n         LA    R4,WTOTXTP      R4  -> 1st position for task name in WTO\n         DS    0F\nDWSWTO   DS    CL400               DWSWTO area\nDWSWTOL  EQU   *-DWSWTO            Length of WTOR area\n* DWSWTO area equates for WTO message completion\nVMC003AA EQU   DWSWTO+35,4         SSIBSSNM for SUB= in VMC003A message\nVMC004IA EQU   DWSWTO+32,4         Subsystem name for VMC004I msg   @03\nVMC004IB EQU   DWSWTO+47,4         ASID # area for VMC004I message  @03\nVMC005IA EQU   DWSWTO+44,4         ASID # area for VMC005I message\nVMC005IB EQU   DWSWTO+65,8         R15 display area for VMC005I message\nVMC003RA EQU   DWSWTO+44,8         Hostname for VMC003R message\nVMC013IA EQU   DWSWTO+31,4         S/S name for VMC013I message\nVMC014IA EQU   DWSWTO+14,4         S/S name                         @02\nVMC014IB EQU   DWSWTO+57,8         S/S initialization program       @02\nVMC016IA EQU   DWSWTO+14,8         S/S initialization program       @02\nVMC016IB EQU   DWSWTO+43,4         S/S name                         @02\nVMC016IC EQU   DWSWTO+62,8         S/S NIP program return code      @02\nVMC021IA EQU   DWSWTO+52,8         MVPTSSI rc for VMC021I message   @02\n         SPACE 1\n         DC    0D'0'\nDWSLEN   EQU   *-DWS               GENERATE LENGTH OF WORKAREA\n* Miscellaneous system dummy sections\n         PRINT NOGEN\n         CVT   DSECT=YES,LIST=NO   Generate CVT area mapping\n         IKJTCB ,                  Generate TCB area mapping\n         IEZJSCB ,                 Generate JSCB area mapping\n         IHAPSA                    Generate Prefixed Save Area\n         END   MLWTO\n\n\n\n\n\n\nJ0611294  +SVCU000I SVC install audit report 623                       C\n SVCU001I *************************************************************\n SVCU002I * Installing userid=xxxxxxxx LMOD=tttttttt SIZE: xxxxxxxx   *\n SVCU003I * Entry_point: xxxxxxxx Load_point: xxxxxxxx                *\n SVCU004I * AMODE=nn RMODE=nnn Old SVC entry point: xxxxxxxx          *\n SVCU005I * SYSLIB=12345678901234567890123456789012345678901234       *\n SVCU006I * SVC=(nnn,esr) Type=n LOCKS=(LOCAL,CMS,SRM,DISP,SALLOC)    *\n SVCU007I * ATTR=(AP,AR,NP,AS)                                        *\n SVCU008I * USER_filter=xxxxxxxx GOODNITE=hhmm                        *\n SVCU001I *************************************************************\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT991/FILE991.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT991", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}