Interactive Short DisAssembler (ISDA)

User's Guide

1 Introduction

ISDA is a small tool for supporting diagnosis in a z/OS environment
under ISPF and IPCS. There exist various disassemblers which deal
mainly with load modules. The IPCS list subcommand can do
disassembling as well based on dump contents.

Due to some discomfort with this tool there arose the idea to
combine the technique shown by Doug Nadel in his vcursor utility
with some rexx code to implement the relations between symbolic
and machine instructions. The result was a cursor sensitive
disassembler that starts its work at a position defined by the
user and shows the symbolic instructions in a pop up window under
ISPF or in a list screen under IPCS.

Positioning:

1. ISDA is not intended to work as a reengineering tool, but to
show the data and control flow inside a relatively short sequence
of instructions.

2. ISDA works on any type of screen content under ISPF or IPCS
containing machine code instructions (e.g. SVCDUMPs, CEEDUMPs,
SYSUDUMPs, and the like).

2 Architecture and Installation

ISDA is capable of dealing with arbitrary screen sizes and does
not need any configuration input besides that described below
under Invocation.

The utility is completely written in rexx. The whole stuff is
embedded in a single source file. It runs under ISPF as well as
under IPCS whilst it detects the appropriate runtime environment
by itself.

ISDA operates on information provided by the ISPF variable
ZSCREENI which contains the pure Image of an ISPF screen. It
grabs the data and reformats them into lines in order to
associate coordinates and cursor positions (the latter provided
by ISPF variable ZSCREENC).

Under IPCS ISDA accesses dump data by invoking the evaluate
subcommand.

There exist several panels that are part of the rexx source. They
are built dynamically during runtime (as in vcursor).

To install ISDA it should be put into a library which is part of
a SYSPROC concatenation.

* For operation under ISPF a PF-key should be assigned to the
Command TSO %ISDA.

For operation under IPCS a PF-key should be assigned to the
Command IPCS %ISDA

3 Invocation and Output

Invocation and output differ depending on the environment. Under
IPCS the rules follow the principles of rexx scripts for IPCS,
under ISPF (further named as non-IPCS) there have to be made some
additional definitions for screen coordinates and output.

3.1 Invocation of ISDA in a non-IPCS Environment

In this environment the invocation of ISDA is a 2-step process,
since ISDA needs to know where the left margin of the dump
begins. Despite it starts disassembling at the cursor position,
subsequent lines of the dump are captured from this defined left
margin up to the rightmost character which is obviously a pair of
hex chars.

1st Step: set left margin and number of rows
To set the left margin and the row amount, simply call ISDA as a
TSO command without parameters:

TSO %ISDA

As a result you get an ISPF panel

In a SYSUDUMP instructions normally begin at screen column 11.
Therefore you enter:  TSO %ISDA 11 5 for getting up to 5 rows of
instructions, beginning at column 11.

Now ISDA is ready for disassembling.

2nd Step: doing Disassembly

In order to get the symbolic instructions, just assign the Command

TSO %ISDA

to a PF-Key, e.g. PF20.
Then place the cursor at the beginning of the code sequence and
hit <PF20>.

Disassembling Portions of a SYSUDUMP

After hitting <PF20> you see the symbolic instructions.

Disassembling the neighbourhood of a PSW-Address in a LE Dump

Since LE dumps contain only a small amount of instructions
related to an error, ISDA is suitable for displaying these
instructions around a PSW- Address. You place the cursor at the
beginning of the instruction sequence and hit <PF20>

3.2 Additional Output from ISDA in a non-IPCS Environment

As far as the user does not enter additional parameters when
invoking ISDA, output is presented in a pop up window.  However,
there exists a possibility to get the symbolic instructions
additionally in a temporary file that can be accessed by the
editor. To accomplish this, invoke ISDA with the P (protocol)
option:

TSO %ISDA 11 5 P

In this example, ISDA starts at column 11, grabs 5 rows of dump
and writes the symbolic instructions additionally to file SDADBG.
This file can be accessed via DDLIST:

Via the clipboard of the editor this content can be brought
everywhere in the system.

3.3 Invocation of ISDA in an IPCS Environment

Due to architectural differences between IPCS and ISPF, calling
ISDA in an IPCS Environment differs slightly from that described
above. Additionally, in IPCS output from ISDA is not brought into
a popup-window, but displayed by using the note subcommand of
IPCS.

1st Step: Set Number of Bytes and Debug-Level

Within IPCS, ISDA may be called as:

ipcs %isda <Number of Bytes>

As a line command under IPCS.

<Number of Bytes> can assume a value between 8 and 512.

For the sake of simplicity it is recommended, to assign a PF-Key
(as in the former examples, it is again PF20) to the command:

IPCS %ISDA <Number of Bytes>

If the user wants to get additional output, e.g. for debugging
purposes, the command has to be assigned in that way:

IPCS %ISDA <Number of Bytes> 0 D

This causes ISDA to provide additional output to control its
internal behaviour.

Note: There exists another option:

IPCS %ISDA <Number of Bytes> 0 T

In this case the rexx trace is switched on. Be careful when using
it, lots of rows in TSO line mode will be produced. Use it only
in case of strange errors.

2nd Step: doing Disassembly

After having set the amount of data to be disassembled, just
place the cursor at the beginning of the instruction sequence and
hit PF8.

Note that, different from a non-IPCS display, the absolute
starting address from the beginning of the instruction sequence
is displayed on the left.

4 About the Author

Arthur Fichtl is a freelance consultant, based in
Bavaria/Germany.

He can be reached via email: mailto:fichtla@acm.org

In the course of beginning with dump analysis he felt the need
to have a handy utility to show the symbolic Opcodes of machine
instructions together with the addresses inside a dump since
nobody is able to remember all the about 750 variations of
instruction codes that exist for a zSeries processor.
