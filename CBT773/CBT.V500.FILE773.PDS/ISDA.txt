/* REXX Interactive Short DisAssembler                              */
/*                                                                  */
/*------------------------------------------------------------------*/
/*      Copyright A.Fichtl, using ideas from Doug Nadel (VCURSOR)   */
/*      contact: fichtla@acm.org                                    */
/*      Updates February 2009: z9 & z10 Opcodes are supported now   */
/*                                                                  */
/*------------------------------------------------------------------*/
/* Interprets a chunk of dumped values      (Hexa as Char)          */
/* as a sequence of machine instructions                            */
/* Input:   Hexa-as-Char String, presented by zscreeni variable     */
/* Output:  Sequence of instructions, in Assembler listing format   */
/* Requirement:  the sequence of hexa-chars must appear without     */
/* non-hexa chars (except Blanks and x'00' (for IPCS Output)        */
/* Coordinates of Begin of Disassembly, output options              */
/*                                                                  */
/* In case filemode is desired, the input file is expected in       */
/* DDNAME(FINISDA); either a PS Dataset or a member of a PO Dataset */
/* can be allocated with this DDNAME *prior* to start ISDA.         */
/* To view the output, start ISDA with 'P' as 3rd parameter and     */
/* look at temporary file with DDNAME(SDADBG)                       */
/*                                                                  */
/* Syntax of Parameter insrc: F.<start>.<len>, where start denotes  */
/* the startcol to be read and len the length of the part of the    */
/*  row that contains machine code.                                 */
/* e.g.: insrc = 'F.5.30' means to start at col 5  and to process   */
/*       30 Bytes of machine code in each row.                      */
/* In case of doubts, look at the source.                           */
/*                                                                  */
/*                                                                  */
/* NB: It is necessary that this part of the file contains          */
/*     only HEX-codes, no decoration or comments are possible;      */
/*                                                                  */
/* so: clean the contents  according to this requirement            */
/* Exception: Spaces or NULLS  (i.e. X'40' or x'00') are possible   */
/* and will be ignored.                                             */
/*------------------------------------------------------------------*/

/*      Start-col, # of rows, debug-Options, filemode-Parms*/
parse upper arg tcstco tcnmrows sdadbg insrc

Address ispexec
"control errors return"

signal on syntax
numeric digits (11)

call prolog
/* trace r */
call DisasmProlog

if ipcsmode then address ipcs

hex_string = getHexString(tcstco tcnmrows)

lhexs = length(hex_string)
if ddd then call prt 'lhexs' 'hex_string'

/* Disassembly W/ and W'out Debug */
call disasm(hex_string sdadbg)

call getservice

call epilog 0

/***************************************************/
/* Prepare the Dialog                              */
prolog:
/***************************************************/


"VGET (ZSCREENI,ZSCREENC)"  /* Extract screen image and cursor pos  */
"VGET (ZSCREEND,ZSCREENW)"
"VGET ZSCREEN"
"VGET Zpanelid"

/* are we in IPCS ? */
 if pos('BLS', Zpanelid) = 1,
 then ipcsmode = 1  /* we are in IPCS, interpret coordinates different*/
 else ipcsmode = 0  /* and do not initialize ISPF-environment         */

if substr(insrc, 1, 1) = 'F',
then filemode = 1
else filemode = 0

if filemode = 0 & ipcsmode = 0,
then ispfmode = 1
else ispfmode = 0

/* sdadbg controls debug- or protocol information */
/* valid chars are:                               */
/* 'D' writes debug output to temp file           */
/* 'P' writes disassembly output to temp file     */
/* 'T' switches trace on                          */
ddd = 0; ppp = 0
select
when sdadbg = 'D' then ddd = 1
when sdadbg = 'P' then ppp = 1
otherwise nop
end /*select*/

if ddd | ppp then do
   datetime = date() time()
   call prt 'datetime'

   if filemode,
   then do
      file = MLISTA('FINISDA')
      call prt 'file'
   end

end

select
when ipcsmode then call prepareIPCS
when filemode then call prepareFile
when ispfmode then call prepareISPF
end /*select*/

/* trace r */
return

/********************************/
mlista: /* get DSN+Membername   */
/********************************/

address tso

arg ddn /* DDName of concern */

cmd = 'lista st'
q=outtrap(trap.,10000,concat)
cmd /* command to be trapped */
q=outtrap(off)

do i  = 1 to trap.0
   if wordpos(ddn, trap.i) = 1 ,
    & wordpos('KEEP', trap.i) = 2
    then do
      j = i-1
      dsn = trap.j
      leave i
    end
end
drop trap.

return dsn

/********************************/
/********************************/
/* initialize IPCS-environment  */
prepareIPCS:
/********************************/

base_address   = d2x(0)
if datatype(tcstco) = 'NUM',
then do
   "vput (tcstco tcnmrows sdadbg insrc) profile"
end

return

/********************************/
/* initialize file Input        */
preparefile:
/********************************/

address tso
/* parse the other parts of the filemode-parameter */
recstart = 1; reclen = 80 /* these are the defaults */
parse var insrc . '.' recstart '.' reclen
/* say recstart reclen */

"execio * diskr FINISDA (stem mcx. finis"

if rc /= 0 | mcx.0 = 0,
then do
   say 'file FINISDA not readable or empty'
   exit 8
end

return

/********************************/
/* initialize ISPF-environment  */
prepareISPF:
/********************************/

ddname='$VCSR$'zscreen

Address tso "alloc f("ddname") reuse new",
            " del dso(po) dir(2) sp(3) track recfm(f b) lrecl(80)"
"LIBDEF ISPPLIB LIBRARY ID("ddname")"

"LMINIT DATAID(DID1) DDNAME("ddname") ENQ(shrw)"
"LMOPEN DATAID("DID1") OPTION(OUTPUT)"

if tcstco = 0  & TCNMROWS = 0,
then do
   tcstco = 'X'; TCNMROWS = 'Y'
   "vput (tcstco tcnmrows sdadbg insrc)"
   call epilog 4
end

if datatype(tcstco) /= 'NUM' | datatype(TCNMROWS) /= 'NUM',
then do
   "vget (tcstco tcnmrows sdadbg insrc)"

   if datatype(tcstco) /= 'NUM' | datatype(TCNMROWS) /= 'NUM',
   then do
      call constructHelp  /* display when <HELP> was pressed  */
      call getCoordinates /* ask for screen coordinates       */
      call epilog 0       /* and stop                         */
   end

end
else do
   call putCoordinates
   call epilog 4
end

if ddd then call prt 'tcstco'  'tcnmrows'

return

/*****************************************/
/* Prepare Disassembly                   */
DisasmProlog:
/*****************************************/

IMnemo_old = ''
resultdump = ''; hexdump_1  = ''
old_hxoc = ' '
decaddress = 0
xad = d2x(0)
exXBRM = 'ABCDEF012478'

return

/***************************************************/
epilog:
/***************************************************/
arg lastcc

 /*   say ipcsmode*/

if ipcsmode,
then call dnote
else do
   "LMFREE DATAID("DID1")"
   call dwrite
end

exit lastcc

/***************************************************/
/* Prompt User for Coordinates                     */
getCoordinates:
/***************************************************/

Call write   ")ATTR"
Call write   "+ TYPE(NT)"
Call write   "@ TYPE(PT)"
Call write   "? TYPE(CH)"
Call write   "9 TYPE(input)"
Call write   "# TYPE(output) just(asis) caps(off)"
Call write   ")BODY WINDOW(72,12)"
Call write   "                @Cursor Sensitive Action+"
Call write   "+Call ISDA as a command with parameters "

/* different interpretation of coordinates inside IPCS */
Call write   "+"
if ipcsmode,
then do
   Call write "to invoke ISDA from IPCS assign a PFKey to: 'IPCS ISDA'"
   Call write,
   "+inside IPCS the default amount of Bytes to be disassembled is 512+"
   Call write  "+to change it call ISDA with a different value+"
end
else do
   Call write   "+<start-col>  <No of rows> and <Debug-Option> (D/P/T):"
   Call write   "+TSO ISDA <sc> <Nr> D/P/T+"
end

Call write   "+and press <ENTER>+"
Call write   "+"
Call write   "+press <Help> to get additional advice"
Call write   "+"
Call write   "+After that call ISDA without parameters"
Call write   "+to beginn disassembly place cursor on 1st instruction"
Call write   "+and press <ENTER>+"
Call write   ")INIT"
Call write   ".help = sdahelp"
Call write   ")PROC"
Call write   ")END"
"LMMADD DATAID("DID1") MEMBER(initS)"
"LMclose DATAID("DID1")"
"ADDPOP"
"DISPLAY PANEL(inits)"
"REMPOP"
"LMFREE DATAID("DID1")"
"LIBDEF ISPPLIB"
Address tso
"FREE F("ddname")"
 /* "lista"*/

return

/***************************************************/
/* Dialog zur Benachrichtigung der Koordinaten     */
putCoordinates:
/***************************************************/

Call write   ")ATTR"
Call write   "+ TYPE(NT)"
Call write   "@ TYPE(PT)"
Call write   "? TYPE(CH)"
Call write   "9 TYPE(input)"
Call write   "# TYPE(output) just(asis) caps(off)"
Call write   ")BODY WINDOW(35,2)"
Call write   "+Column &tcstco and row &TCNMROWS"
Call write   "+have been saved"
Call write   ")PROC"
Call write   "vput (tcstco TCNMROWS sdadbg)"
Call write   ")END"
"LMMADD DATAID("DID1") MEMBER(msgs)"
"ADDPOP column(20) row(10)"
"DISPLAY PANEL(msgs)"
"REMPOP"
"LMFREE DATAID("DID1")"
"LIBDEF ISPPLIB"

Address tso
"FREE F("ddname")"

return

/***************************************************/
/* extract hexa string from dump-screen or IPCS    */
getHexString:
/***************************************************/

/* trace i */
arg scol durow /* Startcol, # of Dumprows */

if filemode = 0,
then do
   /* 1st: partition zscreeni according to limits */
   do idr = 1 to zscreend /* loop over all screen rows */
      xdr.idr = substr(zscreeni, 1+(idr-1)*zscreenw, zscreenw-1)

      if verify(xdr.idr, ' ') > 0,
       & ddd then call prt 'idr' 'xdr.idr'

   end

   /* 2nd: determine position of cursor in xdr.idr */
   CurColPos = zscreenc // ZSCREENW  +1      /* cursor column position */

   if ddd then call prt 'zscreenc' 'ZSCREENW'

   zsro = zscreenc/ZSCREENW -.5
   rxo = format(zsro, 3,0) +1 /* row number on screen   */
   if ddd then call prt 'zsro' 'rxo'
end

/* 3rd get rawdump in a way depending on type of dump panel */
select
when ipcsmode then  call obtain_from_IPCS
when filemode then  call obtain_from_file
otherwise  /*ISPF*/ call obtain_from_screen
end /*select*/

return resultdump

/***************************************************/
/* get rawdump from zscreeni                       */
obtain_from_screen:
/***************************************************/

do idr = 1 to durow
   ldr = rxo+idr-1
   if ddd then call prt 'idr' 'ldr'

   if idr = 1, /* special treatment for 1st line of interest */
   then rawdump = substr(xdr.ldr, CurColPos)
   else rawdump = substr(xdr.ldr, tcstco)

   upper rawdump
   rawdump = translate(rawdump, ' ', x2c('00'))  /* IPCS-Separators */
   end_of_rawd_1 = verify(rawdump, '0123456789ABCDEF ')
   if ddd & verify(rawdump, ' ') /= 0,
   then call prt 'rawdump'

   if  end_of_rawd_1 = 1,  /* end of dump area */
   then leave idr

   if  end_of_rawd_1 = 0,
   then eostr = length(rawdump)      /* total Hex            */
   else eostr = end_of_rawd_1 - 1    /* beware of right side */

   hexdump_1 = hexdump_1 || strip(substr(rawdump, 1, eostr))

end

if ddd then call prt 'end_of_rawd_1'

/* remove all blanks*/
do l = 1 to words(hexdump_1)
   resultdump = resultdump || word(hexdump_1, l)
end

return

/***************************************************/
/* get rawdump from inputfile (for test purposes)  */
/* contents are expected in file MACHINE           */
obtain_from_file:
/***************************************************/

mlines = mcx.0
if ddd then call prt  'mlines'

do idr = 1 to mlines
   xline = substr(mcx.idr, recstart, reclen)
/*    say xline */
   hexdump_1 = hexdump_1 || strip(xline)
end

/* remove all blanks & Nulls */
hexdump_1 = translate(hexdump_1, ' ', x2c(00))
do l = 1 to words(hexdump_1)
   resultdump = resultdump || word(hexdump_1, l)
end

return

/******************************************************************/
/* extracts dump data from an IPCS dump via evaluate subcommand   */
obtain_from_IPCS:
/******************************************************************/
/* 1st get dump address from screen */
base_address   = word(xdr.rxo, 1) /* the address on the left side */

/* not a valid part of the screen ? */
if verify(base_address, 'ABCDEF0123456789') > 0
then call epilog 4

distance       = 4*(CurColPos-12)/11     /* convert byte offset */
decimal_offset = format(distance, 3, 0); /* to decimal offset   */

hxasf = substr(base_address, 8, 1) /* test for odd start */

if hxasf = '0' then nop            /* not an odd address */
else decimal_offset    = 0         /* recalculate offset */

decaddress = x2d(base_address) + decimal_offset

if ddd,
then do
   call prt 'decaddress' 'base_address'
   call prt 'distance' 'decimal_offset'
end

/* determine amount of bytes to be disassembled */
if datatype(tcstco) = 'NUM',
then amount = min(max(8, tcstco), 512)
else do
  address ispexec "vget (tcstco) profile"
  if datatype(tcstco) = 'NUM',
  then amount = min(max(8, tcstco), 512)
  else amount = 64  /* Default */
end
 /* say amount*/

address ipcs
resultdump = ObtainData(base_address decimal_offset amount)

return

/*-------------------------------------------------*/
ObtainData: procedure expose storage.
/*-------------------------------------------------*/
/* Function:  ObtainData                           */
/*                                                 */
/*  Retrieve data from the dump.  Invoke the IPCS  */
/*  EVALUATE subcommand as necessary to access     */
/*  512-byte blocks of data from the IPCS dump     */
/*  source and store the data in variable          */
/*  "storage."                                     */
/*                                                 */
/* Input:     Description of data to access:       */
/*                                                 */
/*  Hex address of data.                           */
/*  Decimal position from the hex address of the   */
/*   first byte to access.                         */
/*  Decimal length of the data to access.          */
/*                                                 */
/* Output:    Requested data is returned.          */
/*-------------------------------------------------*/

arg hexaddress  decposition declength

queue 'Start Disassembly at:' hexaddress 'offset:',
      decposition 'length: ' declength

 /* Indicate for IPCS that
    it is an address       */
hexaddressdot = hexaddress || '.'

address ipcs,
"EVALUATE" hexaddressdot,
  "position("decposition") LENGTH("declength") ",
 "REXX(STORAGE(XXX) unformatted)"
 /*  "note '"hexaddress "' asis"*/
 /*  "position(0) LENGTH(32)  check"*/

if rc > 0 then call epilog 8

return c2x(substr(xxx, 1, declength))

/*-------------------------------------------------*/
AccessError: nop
/*-------------------------------------------------*/
  GEN$='IPCS Evaluate subcommand unable',
        'to access storage'
  "NOTE '"GEN$"' ASIS"
  if rc>0 then exit 24;
exit 20

/******************************************************************/
AccessError:
/******************************************************************/

say 'Error during Evaluate processing'
call epilog 8

/******************************************************************/
/* Interprets a set of dump contents (Hexa as Char) as a sequence */
/* of machine instructions                                        */
/* Input:   Hexa-as-Char String                                   */
/* Output:  suqence of instructions, separated by '9' (X'4f')     */
/* requwired: the dumpstring must not contain no-hex symbols and  */
/*            has to begin with a opcdoe to start disassembly     */
disasm:
/*****************************************************************/

arg dumpstring  debug

opsnsi = 0        /* is altered in skipOverConstants    */
miniprogram = ''  /* receives the sequence of instructions in  */
                  /* Assembler-style, separated by x'4f'       */
stnsi = 1         /* Start of next sequential instruction  */

/* Concatenated Sequence of all Hex-Instructions */
hexinstruction = ''
old_instruction = '' /* previous Instruction */

call initializeOpcodes /* Initial values for stems           */
if sdadbg = 'T' then trace i

/* loop over the whole string       */
do until  stnsi >= length(dumpstring)

   xinstruction = getInstruction(stnsi) /* fetch in Hexa-Format */
   if ddd then call prt 'xinstruction'

   /*  take care of overflow  */
   if xinstruction = '?' then   leave

   hexinstruction = hexinstruction || '|'       ||,
                    word(xinstruction, 2)
   sinstruction = decode(xinstruction)  /* translate into Assembler*/
   if ddd then call prt 'sinstruction'

   miniprogram  =  miniprogram || '|' || sinstruction

   if opsnsi > 0,        /* is altered in skipOverConstants           */
   then do               /* display them and skip to next instruction */
      call displayConstants stnsi opsnsi
      stnsi = opsnsi
   end                     /* 1st Word Opcode */
   else stnsi = stnsi + length(word(xinstruction, 2))

   if ddd then call prt 'opsnsi' 'stnsi'

end

return

/*********************************************/
/* after a B D2(R15) an area fo constants is */
/* assumed. It is displayed in DC-Format     */
displayConstants:
/*********************************************/
arg st oi
constantlength = oi-st-8

if constantlength < 1,
then nop

else do
   constants = substr(dumpstring, ipos+8, constantlength)
   lconst = length(constants)

   numrows = format((lconst -4)/8,, 0)
   rstbyte = lconst // 8

   if ddd then call prt 'numrows' 'rstbyte'

   do lcl = 1 to numrows
      call collectConstants  (lcl-1)*8 8
   end

   if rstbyte > 0, /* there is something left ... */
   then do
      call collectConstants  (lcl-1)*8 rstbyte
   end
end

 /* say constants*/
return

/*********************************************/
collectConstants:
/*********************************************/

arg costart colen
if ddd then call prt 'costart' 'colen'

hexdata = substr(constants, 1 + costart, colen)
if verify(hexdata, '1234567890ABCDEF') > 0,
then return

hexinstruction = hexinstruction || '|' || hexdata
hexvalue = 'DC      C''' || x2c(value(hexdata)) || ''''
/* calculate offsets and addresses */
xd = d2x(decaddress)
xad = xad || '|' || xd /* prepare for display */
decaddress = decaddress + 4


if ddd then call prt 'hexdata' 'hexvalue'

miniprogram  =  miniprogram || '|' || hexvalue

return

/*********************************************/
/* define type & length of instruction       */
getInstruction:
/**********************************************/

arg ipos  /* Position in dumpstring */

if datatype(ipos) /= 'NUM'  ,
then return '?'  /* no appropriate value  */

/* hxopc = OpCode (Hexa)           */
/* hxopc is the 1st Byte that is sufficient for defining type & length*/
/*  except  RRE- und RRF- instructions */
hxopc = substr(dumpstring, ipos, 2)

scan_length = min(12, length(dumpstring))
hexinstr = substr(dumpstring, ipos, scan_length)
if ddd then call prt 'hexinstr'

opsnsi= 0                      /* is altered in skipOverConstants    */

if pos('47F0F', hexinstr) = 1, /* B D2(R15) at beginning of module ? */
then call skipOverConstants

if is4Bytes(hxopc) = 1,
then hexaopcod = substr(dumpstring, ipos, 4) /* 4-Byte-Opcode Extract */
else do
    hexaopcod = getMnemoOpcode(hexinstr) /* assemble Hexa-OpCode */
end

if ddd then call prt 'hexaopcod'

Inst_Form = getInstruction_Format(hexaopcod)

/* Length in Halfwords */
I_Length = of.Inst_Form.#hw

if ddd then call prt 'Inst_Form' 'I_Length'

if datatype(I_Length) /= 'NUM', /* invalid opcode */
then return '?'

/* calculate offsets and addresses */
xd = d2x(decaddress)
xad = xad || '|' || xd /* prepare for display */
decaddress = decaddress + I_Length*2

if ddd then call prt 'decaddress'   'xd'

/* return Opcode together with Instruction in Hexa-Format */
 if datatype(I_Length) /= 'NUM',
 then return '?'  /* not an appropriate value */

if Inst_Form = 'BR' |,
   Inst_Form = 'BX',
then hxo = substr(hxo, 1, 2)

if ddd then call prt 'hxo'
return hxo substr(dumpstring, ipos, I_Length*4)

/********************************************************/
/* at the beginning of a module there are DCs which are */
/* displayed and the position of the next               */
/* instruction is detected                              */
skipOverConstants:
/***********************************************************/
/* Offset to instruction  */
ofnsi = x2d('0' || substr(hexinstr, 6, 3))
numhw = ofnsi - 2 /* Number of halfwords to be interpreted as DC*/

if ddd then call prt 'ofnsi' 'numhw'
numhw = max(0, numhw)

/* Position of nsi */
if numhw > 0,
then do
   opsnsi = ipos + ofnsi*2  /* points to next instruction */
   /* test */ ohxins = substr(dumpstring, opsnsi, 12) /* test*/
end
else opsnsi = 0

if ddd then call prt 'opsnsi' 'ohxins'


return

/********************************************************/
/* Evaluates Instruction Format, additionally respecting */
/* the Condition Code (CC) of the previous instruction   */
/* (because of n Branch-Mnemonics                        */
getInstruction_Format:
/********************************************************/

arg hxo /* hexadecimal Opcode */

if substr(hxo, 1, 2) = '07' |,
   substr(hxo, 1, 2) = '47',
then do
  if pos(substr(hxo, 3, 1), exXBRM) > 0,
  then nop  /* extended Branch mnemonics exist */

  else do
     zxo = substr(hxo, 1, 2)  /* reduce format to BC-Format */
     oform = opcode.zxo.format
     if ddd then call prt 'oform'
     return oform
  end

end

oform = opcode.hxo.format

return oform

/***********************************************/
/* Decodes Hexa Instruction to symbolic        */
decode:
/***********************************************/

arg opc hxinst /* Opcode Hex-Instruction */

IMnemo_old = IMnemo
IMnemo = opcode.opc.mnemo
IType  = opcode.opc.format

if ddd then call prt 'IMnemo' 'IType'
/* say  'IMnemo' 'IType' */
/* say   IMnemo   IType */

/* Check for special menmonics in case of TM*-Instructions */
decodedOperands = transOperands(IType hxinst)

IMnemo = xpform(IMnemo, 7)

return IMnemo decodedOperands

/**********************************************/
/* expand String s to fixed length  l         */
xpform: procedure
/**********************************************/

arg s, l
ls = length(s)

if ls < l,
then s2 = s ||copies(' ', l-ls)
else s2 = s

return s2

/*****************************************/
/* translate internal format of Operands */
/* into Display-Format                   */
transOperands:
/***************************************/

arg instype hexinstr /* Instruction-Type, Hexa-Instruction */


/* unit of size is the halfbyte    */
OpcodeLength = of.instype.lenOpCode /* *2  in Halfbytes */

/* Display-Layout, 1st Layout-Element is always at Position 1 */
displo = of.instype.layout
if ddd then call prt 'OpcodeLength'   'displo'

DisplayOperation = ''

if ddd then call prt 'of.instype.#operands.0'
do lop = 1 to of.instype.#operands.0 /* go thru all operands */

   /* Display-sequence */
   dispElem = substr(of.instype.sequence, lop, 1)
   if ddd then call prt 'lop' 'dispElem'

   /* Length of Display-Operand */
   LenSubOperand = of.instype.#operands.#len.dispElem

   /* Operand for Output  */
   OfsSubOperand = OpcodeLength + getOfsSubOperand(dispElem)
   xoperand = strip(substr(hexinstr, OfsSubOperand, LenSubOperand))

   if ddd then call prt 'OfsSubOperand' 'LenSubOperand'

   doperand = x2d(xoperand, 8)
   if ddd then call prt 'xoperand' 'doperand'

   /* special treatment for some instruction types */
   doperand = specials(lop  instype  doperand xoperand)

   /* convert into readable format */
   DisplayOperation = DisplayOperation ||,
     fillLayout(displo  doperand)

   ls = pos('#', displo)
   if ls > 0 then, /* work in progress ? */
   displo = substr(displo, ls+1)

   else do
     endofdisplo = length(displo)
     if endofdisplo > 0,
     then DisplayOperation = substr(displo, endofdisplo)
   end

end

return DisplayOperation

/************************************************/
/* special treatment for some instruction types */
specials:
/************************************************/

arg lp  it dop xop

if ddd then call prt 'lp' 'it'
select

when lp = 2 & it = 'SS',   /* when SS, add 1 to length */
then do
  sdop = dop+1
end

when lp = 2 & it = 'RSL',  /* when RSL, add 1 to length */
then do
  sdop = dop+1
end

when (lp = 2 | lp = 5),
   & it = 'SSA',   /* when SSA, add 1 to length fields */
then do
  sdop = dop+1
end

when lp = 4,
   & it = 'SSI',   /* when SSI, add 1 to length fields */
then do
  sdop = dop+1
end

when it = 'RI3',           /* when RI3 Displacement in HW */
then do
  if dop > 32767,          /* respect negative Displacements */
  then dop = dop - 65536

  sdop = dop*2

  if sdop > 0,
  then sdop = '+' || sdop
end

when lp = 2 & it = 'RI1',  /* display Halfwords  */
then do
  if dop > 32767, /* negative halfword */
  then sdop = dop - x2d('ffff') -1
  else sdop = translate(format(dop, 6), '0', ' ')
end

when (it = 'SIYL' |,  /* when SIY (logical/arithmetic), */
      it = 'SIYA'),   /* scramble address parts         */
   & lp = 1,
then do
  xdop = substr(xop, 4, 2) || substr(xop, 1, 3) /* rearrange parts */
  sdop = x2d(xdop)
  if ddd then call prt 'xop' 'sdop'
end

when it = 'SIYL',  /* when SIYL, translate 3rd operand to Bit */
   & lp = 3,
then do
/*   say xdop dop */
  xdop = d2x(dop)  /* 1st re-translate to hex */
  sdop = x2b(xdop) /* translate to Bit*/
  if ddd then call prt 'xdop' 'sdop'
end

when it = 'RI2',   /* when RI2, scramble address parts */
   & lp = 2,
then do
  xdop = xop       /* use hex value   */
  sdop = x2b(xdop) /* translate to Bit*/
  if ddd then call prt 'xdop' 'sdop'
end

when it = 'RIET',   /* when RIET, use MASK Format */
   & lp = 3,
then do
  xdop = xop       /* use hex value   */
  sdop = x2b(xdop) /* translate to Bit*/
  if ddd then call prt 'xdop' 'sdop'
end

when it = 'RIE2',   /* when RIE2, use MASK Format */
   & lp = 3,
then do
  xdop = xop       /* use hex value   */
  sdop = x2b(xdop) /* translate to Bit*/
  if ddd then call prt 'xdop' 'sdop'
end

when it = 'SI2',   /* when RI2, scramble address parts */
   & lp = 3,
then do
  xdop = xop       /* use hex value   */
  sdop = x2b(xdop) /* translate to Bit*/
  if ddd then call prt 'xdop' 'sdop'
end

when it = 'RRF2',  /* when RRF2, scramble address parts */
   & lp = 2,
then do
  xdop = d2x(dop)  /* 1st re-translate to hex */
  sdop = x2b(xdop) /* 2nd translate to Bit    */
end

when it = 'RRFM',  /* when RRFM, use Mask Format */
   & lp = 3,
then do
  xdop = d2x(dop)  /* 1st re-translate to hex */
  sdop = x2b(xdop) /* 2nd translate to Bit    */
end

when it = 'RRF4',  /* when RRF4, use Mask Format */
   & lp = 4,
then do
  xdop = d2x(dop)  /* 1st re-translate to hex */
  sdop = x2b(xdop) /* 2nd translate to Bit    */
end

when it = 'RS2',  /* when RS2, scramble address parts */
   & lp = 2,
then do
  xdop = d2x(dop)  /* 1st re-translate to hex */
  sdop = x2b(xdop) /* 2nd translate to Bit    */
end

when it = 'RIL2',  /* when RIL2 (address), scramble address parts */
   & lp = 1,
then do
  xdop = d2x(dop)  /* 1st re-translate to hex */
  sdop = x2b(xdop) /* 2nd translate to Bit    */
  if ddd then call prt 'dop' 'xdop'
  sdop = 2*dop     /* Transform from HW to Bytes */
  if ddd then call prt 'sdop' 'dop'
end

when it = 'RIL2',  /* when RIL2 (address), scramble address parts */
   & lp = 2,
then do
  xdop = d2x(dop)  /* 1st re-translate to hex */
  sdop = x2b(xdop) /* 2nd translate to Bit    */
  if ddd then call prt 'dop' 'xdop'
  sdop = 2*dop     /* Transform from HW to Bytes */
  if ddd then call prt 'sdop' 'dop'
end

when (it = 'RSI' | it = 'RIER'),
   & lp = 3,
then do
  sdop = 2*dop     /* Transform from HW to Bytes */
end

when it = 'RILR',
   & lp = 2,
then do
  sdop = 2*dop
end

when it = 'RI4',
   & lp = 2,
then do
  sdop = 2*dop
end

when it = 'RI4',
   & lp = 2,
then do
  sdop = 2*dop
end


when it = 'RSY2', /* when RSY2, scramble address parts */
   & lp = 2,
then do
  xdop = d2x(dop)  /* 1st re-translate to hex */
  sdop = x2b(xdop) /* 2nd translate to Bit    */
end

otherwise sdop = dop
end

if ddd then call prt 'dop' 'sdop'
return sdop

/***************************************/
/* provide Offset of a Sub-Operand     */
getOfsSubOperand:
/***************************************/

arg #dispe  /* no. of Display-Element */

/* special treatment for last Sub-Operand */
if datatype(of.instype.#operands.#ofs.#dispe) = 'NUM',
then do
   /* mind space inside an operation */
   totalOffset = of.instype.#operands.#ofs.#dispe + 1
   if ddd then call prt '#dispe' 'totalOffset'
end

else do  /* normal treatment for normal sub-operands */
   totalOffset = 1

   if #dispe > 1,
   then do j = 1 to #dispe-1

      /* mind space inside an operation */
      if datatype(of.instype.#operands.#ofs.j) = 'NUM',
      then do
         totalOffset = of.instype.#operands.#ofs.j  +,
                       of.instype.#operands.#len.j  +1
      end
      else totalOffset = totalOffset + of.instype.#operands.#len.j

      if ddd then call prt 'j' 'totalOffset'
   end

end

return totalOffset

/***************************************/
/* fill Layout-Element with content    */
fillLayout:
/***************************************/
arg d  o

parse var d left '#' rite
suboperand = left || o

if length(rite) = 1,  /* take brackets */
then suboperand = suboperand || rite

return suboperand

/***************************************/
/* get Mnemo-Opcode                    */
getMnemoOpcode:
/***************************************/

arg hx  /* hexa-Instruction, length*/

hx_1 = substr(hx, 1, 2)  /* maximum length of Opcodes */
lxpm = getXtendedBranchMnemonics(hx)  /* convert BC */

if lxpm > 0, /* eXtendedBranchMnemonics */
then do
   hxopcode = substr(hx, 1, lxpm)
end

else do
   spo = wordpos(hx_1, split_opcodes)

   if ddd then call prt 'spo'
   if spo > 0, /* new, splitted Opcode */
   then select

     when spo = 1, /*  A5xx, RI-Type  */
        then hx_2  = '0' || substr(hx, 4, 1) /* rest of opcode   */

     when spo = 2, /*  A7xx, RI-Type  */
        & substr(hx, 4, 1) /= '4',        /* Long Immediates    */
        then hx_2  = '0' || substr(hx, 4, 1) /* rest of opcode   */

     when spo = 2, /*  A7xx, RI-Type  */
        & substr(hx, 4, 1) = '4',    /* Jump-Mnemonics     */
        then hx_2  = substr(hx, 3, 2)        /* rest of opcode   */

     when spo = 3, /*  C0xx, RIL-Type */
        then hx_2  = substr(hx, 4, 1)        /* rest of opcode   */

     when spo = 4, /*  C2xx, RIL-Type */
        then hx_2  = substr(hx, 4, 1)        /* rest of opcode   */

     when spo = 5, /*  C6xx, RIL-Type */
        then hx_2  = substr(hx, 4, 1)        /* rest of opcode   */

     when spo = 6, /*  EBxx, RSY1-Type */
        then hx_2  = substr(hx, 11, 2)       /* rest of opcode   */

     when spo = 7, /*  ECxx, RIE-Type */
        then hx_2  = substr(hx, 11, 2)       /* rest of opcode   */

     when spo = 8, /*  EDxx, RXE-Type */
        then hx_2  = substr(hx, 11, 2)       /* rest of opcode   */

     when spo = 9, /*  E3xx, RSY1-Type */
        then hx_2  = substr(hx, 11, 2)       /* rest of opcode   */

     when spo = 10, /*  C8xx, SSF-Type */
        then hx_2  = '0' || substr(hx, 4, 1)       /* rest of opcode   */

     when spo = 11, /*  C4xx, RIL-Type */
        then hx_2  = substr(hx, 4, 1)        /* rest of opcode   */

     otherwise hx_2 = ''
   end

   else do
      /* find other Opcodes longer than 2 */
      spo = wordpos(hx_1, long_opcodes)
      if ddd then call prt 'spo'

      if spo > 0,
      then hx_2 = substr(hx, 3, 2)
      else hx_2 = ''

   end /*else*/

   hxopcode = hx_1 || hx_2
end /*else*/

if ddd then call prt 'hxopcode'

if checkForMask(hxopcode)
then hxopcode = hxopcode || 'M'

if ddd then call prt 'hxopcode'

return hxopcode

/*********************************************/
checkForMask:  /* checks for TM-Relevance    */
/*********************************************/
arg hxoc /* actual hex-opcode */
expandit = 0


select
when wordpos(hxoc, Test_under_Mask) > 0,
then do
   old_hxoc = 'M' /* remember Test Under Mask */
end

when substr(hxoc, 1, 2) = '47' |,/* Jumps or Branches */
     substr(hxoc, 1, 2) = '07' |,
    (substr(hxoc, 1, 2) = 'A7' &,
     substr(hxoc, 4, 1) = '4') |,
    (substr(hxoc, 1, 2) = 'C0' &,
     substr(hxoc, 4, 1) = '4'),
then do
    if old_hxoc = 'M',
    then expandit = 1
end


otherwise do
   old_hxoc = ' '
   expandit = 0
end
end /*selec*/

/* Special case: x7E: */
if  (substr(hxoc, 1, 3) = '47E' |,
     substr(hxoc, 1, 3) = '07E'),
   & old_hxoc /= 'M',
then expandit = 1

if ddd then call prt 'old_hxoc'    'expandit'

return expandit

/*********************************************/
/* In case of BC-Opcodes lengthen Hex-Opcode */
getXtendedBranchMnemonics:
/*********************************************/

arg hxx
if substr(hxx, 1, 2) = '47',    /* BC      */
 | substr(hxx, 1, 2) = '07',    /* BCR, J  */
then do
   return 3     /* take 3rd Halfbyte of Opcode */
end


return 0

/***************************************/
/* set initial values                  */
initializeOpcodes:
/***************************************/

/* SPLIT_OPCODES = 'A5 A7 C0 C2 EB EC ED E3' */
SPLIT_OPCODES   = 'A5 A7 C0 C2 C6 EB EC ED E3 C8 C4'
LONG_OPCODES    = 'B2 B3 B9 E5 01'
Test_under_Mask = 'A700 A701 A702 A703 91 EB51'
/*
if substr(mnemo, 1, 1) = 'J' |
   substr(hxopcode, 1, 2) = '07' |
   substr(hxopcode, 1 ,2) = '47' |
*/
 /* XtendedBranchMnemonics_Suffix = 'C D F 0 2 4 7 8'*/

trace off
OPCODE.AC.FORMAT = 'SI' ; OPCODE.AC.MNEMO = 'STNSM'
OPCODE.AD.FORMAT = 'SI' ; OPCODE.AD.MNEMO = 'STOSM'
OPCODE.AE.FORMAT = 'RS1' ; OPCODE.AE.MNEMO = 'SIGP'
OPCODE.AF.FORMAT = 'SI' ; OPCODE.AF.MNEMO = 'MC'
OPCODE.A50A.FORMAT = 'RI2' ; OPCODE.A50A.MNEMO = 'OILH'
OPCODE.A50B.FORMAT = 'RI1' ; OPCODE.A50B.MNEMO = 'OILL'
OPCODE.A50C.FORMAT = 'RI1' ; OPCODE.A50C.MNEMO = 'LLIHH'
OPCODE.A50D.FORMAT = 'RI1' ; OPCODE.A50D.MNEMO = 'LLIHL'
OPCODE.A50E.FORMAT = 'RI1' ; OPCODE.A50E.MNEMO = 'LLILH'
OPCODE.A50F.FORMAT = 'RI1' ; OPCODE.A50F.MNEMO = 'LLILL'
OPCODE.A500.FORMAT = 'RI1' ; OPCODE.A500.MNEMO = 'IIHH'
OPCODE.A501.FORMAT = 'RI1' ; OPCODE.A501.MNEMO = 'IIHL'
OPCODE.A502.FORMAT = 'RI1' ; OPCODE.A502.MNEMO = 'IILH'
OPCODE.A503.FORMAT = 'RI1' ; OPCODE.A503.MNEMO = 'IILL'
OPCODE.A504.FORMAT = 'RI1' ; OPCODE.A504.MNEMO = 'NIHH'
OPCODE.A505.FORMAT = 'RI1' ; OPCODE.A505.MNEMO = 'NIHL'
OPCODE.A506.FORMAT = 'RI2' ; OPCODE.A506.MNEMO = 'NILH'
OPCODE.A507.FORMAT = 'RI1' ; OPCODE.A507.MNEMO = 'NILL'
OPCODE.A508.FORMAT = 'RI1' ; OPCODE.A508.MNEMO = 'OIHH'
OPCODE.A509.FORMAT = 'RI1' ; OPCODE.A509.MNEMO = 'OIHL'
OPCODE.A7A4.FORMAT = 'RI3' ; OPCODE.A7A4.MNEMO = 'JHE'
OPCODE.A7B4.FORMAT = 'RI3' ; OPCODE.A7B4.MNEMO = 'JNL'
OPCODE.AFC0.FORMAT = 'RI3' ; OPCODE.A7B4.MNEMO = 'DWIM'
OPCODE.A7B4M.FORMAT= 'RI3M' ; OPCODE.A7B4M.MNEMO = 'JNM'
OPCODE.A7C4.FORMAT = 'RI3' ; OPCODE.A7C4.MNEMO = 'JLE'
OPCODE.A7D4.FORMAT = 'RI3' ; OPCODE.A7D4.MNEMO = 'JNH'
OPCODE.A7D4M.FORMAT= 'RI3M' ; OPCODE.A7D4M.MNEMO = 'JNP'
OPCODE.A7E4.FORMAT = 'RI3' ; OPCODE.A7E4.MNEMO = 'JNO'
OPCODE.A7E4M.FORMAT= 'RI3M'; OPCODE.A7E4M.MNEMO= 'JNO'
OPCODE.A7F4.FORMAT = 'RI3' ; OPCODE.A7F4.MNEMO = 'J'
OPCODE.A70A.FORMAT = 'RI1' ; OPCODE.A70A.MNEMO = 'AHI'
OPCODE.A70B.FORMAT = 'RI1' ; OPCODE.A70B.MNEMO = 'AGHI'
OPCODE.A70C.FORMAT = 'RI1' ; OPCODE.A70C.MNEMO = 'MHI'
OPCODE.A70D.FORMAT = 'RI1' ; OPCODE.A70D.MNEMO = 'MGHI'
OPCODE.A70E.FORMAT = 'RI1' ; OPCODE.A70E.MNEMO = 'CHI'
OPCODE.A70F.FORMAT = 'RI1' ; OPCODE.A70F.MNEMO = 'CGHI'
OPCODE.A700.FORMAT = 'RI2' ; OPCODE.A700.MNEMO = 'TMH'
OPCODE.A701.FORMAT = 'RI2' ; OPCODE.A701.MNEMO = 'TML'
OPCODE.A702.FORMAT = 'RI2' ; OPCODE.A702.MNEMO = 'TMHH'
OPCODE.A703.FORMAT = 'RI2' ; OPCODE.A703.MNEMO = 'TMHL'
OPCODE.A704.FORMAT = 'RI4' ; OPCODE.A704.MNEMO = 'BRC'
OPCODE.A705.FORMAT = 'RI4' ; OPCODE.A705.MNEMO = 'BRAS'
OPCODE.A706.FORMAT = 'RI4' ; OPCODE.A706.MNEMO = 'BRCT'
OPCODE.A707.FORMAT = 'RI4' ; OPCODE.A707.MNEMO = 'BRCTG'
OPCODE.A708.FORMAT = 'RI1' ; OPCODE.A708.MNEMO = 'LHI'
OPCODE.A709.FORMAT = 'RI1' ; OPCODE.A709.MNEMO = 'LGHI'
OPCODE.A714.FORMAT = 'RI3' ; OPCODE.A714.MNEMO = 'JO'
OPCODE.A714M.FORMAT= 'RI3' ; OPCODE.A714M.MNEMO = 'JO'
OPCODE.A724.FORMAT = 'RI3' ; OPCODE.A724.MNEMO = 'JH'
OPCODE.A724M.FORMAT= 'RI3' ; OPCODE.A724M.MNEMO= 'JP'
OPCODE.A734.FORMAT = 'RI3' ; OPCODE.A734.MNEMO = 'JNLE'
OPCODE.A744.FORMAT = 'RI3' ; OPCODE.A744.MNEMO = 'JL'
OPCODE.A744M.FORMAT= 'RI3'  ; OPCODE.A744M.MNEMO = 'JM'
OPCODE.A754.FORMAT = 'RI3' ; OPCODE.A754.MNEMO = 'JNHE'
OPCODE.A764.FORMAT = 'RI3' ; OPCODE.A764.MNEMO = 'JLH'
OPCODE.A774.FORMAT = 'RI3' ; OPCODE.A774.MNEMO = 'JNE'
OPCODE.A774M.FORMAT= 'RI3' ; OPCODE.A774M.MNEMO = 'JNZ'
OPCODE.A784.FORMAT = 'RI3' ; OPCODE.A784.MNEMO = 'JE'
OPCODE.A784M.FORMAT = 'RI3' ; OPCODE.A784M.MNEMO = 'JZ'
OPCODE.A794.FORMAT = 'RI3' ; OPCODE.A794.MNEMO = 'JNLH'
OPCODE.A8.FORMAT = 'RS1' ; OPCODE.A8.MNEMO = 'MVCLE'
OPCODE.A9.FORMAT = 'RS1' ; OPCODE.A9.MNEMO = 'CLCLE'
OPCODE.BA.FORMAT = 'RS1' ; OPCODE.BA.MNEMO = 'CS'
OPCODE.BB.FORMAT = 'RS1' ; OPCODE.BB.MNEMO = 'CDS'
OPCODE.BD.FORMAT = 'RS2' ; OPCODE.BD.MNEMO = 'CLM'
OPCODE.BE.FORMAT = 'RS2' ; OPCODE.BE.MNEMO = 'STCM'
OPCODE.BF.FORMAT = 'RS2' ; OPCODE.BF.MNEMO = 'ICM'
OPCODE.B1.FORMAT = 'RX' ; OPCODE.B1.MNEMO = 'LRA'
OPCODE.B2A5.FORMAT = 'RRE2' ; OPCODE.B2A5.MNEMO = 'TRE'
OPCODE.B2A6.FORMAT = 'RRE2' ; OPCODE.B2A6.MNEMO = 'CUUTF'
OPCODE.B2A7.FORMAT = 'RRE2' ; OPCODE.B2A7.MNEMO = 'CUTFU'
OPCODE.B2B1.FORMAT = 'S' ; OPCODE.B2B1.MNEMO = 'STFL'
OPCODE.B2B2.FORMAT = 'S' ; OPCODE.B2B2.MNEMO = 'LPSWE'
OPCODE.B2FF.FORMAT = 'S' ; OPCODE.B2FF.MNEMO = 'TRAP4'
OPCODE.B20A.FORMAT = 'S' ; OPCODE.B20A.MNEMO = 'SPKA'
OPCODE.B20B.FORMAT = 'S' ; OPCODE.B20B.MNEMO = 'IPK'
OPCODE.B20D.FORMAT = 'S' ; OPCODE.B20D.MNEMO = 'PTLB'
OPCODE.B202.FORMAT = 'S' ; OPCODE.B202.MNEMO = 'STIDP'
OPCODE.B204.FORMAT = 'S' ; OPCODE.B204.MNEMO = 'SCK'
OPCODE.B205.FORMAT = 'S' ; OPCODE.B205.MNEMO = 'STCK'
OPCODE.B206.FORMAT = 'S' ; OPCODE.B206.MNEMO = 'SCKC'
OPCODE.B207.FORMAT = 'S' ; OPCODE.B207.MNEMO = 'STCKC'
OPCODE.B208.FORMAT = 'S' ; OPCODE.B208.MNEMO = 'SPT'
OPCODE.B209.FORMAT = 'S' ; OPCODE.B209.MNEMO = 'STPT'
OPCODE.B21A.FORMAT = 'S' ; OPCODE.B21A.MNEMO = 'CFC'
OPCODE.B210.FORMAT = 'S' ; OPCODE.B210.MNEMO = 'SPX'
OPCODE.B211.FORMAT = 'S' ; OPCODE.B211.MNEMO = 'STPX'
OPCODE.B212.FORMAT = 'S' ; OPCODE.B212.MNEMO = 'STAP'
OPCODE.B214.FORMAT = 'S' ; OPCODE.B214.MNEMO = 'SIE'
OPCODE.B218.FORMAT = 'S' ; OPCODE.B218.MNEMO = 'PC'
OPCODE.B219.FORMAT = 'S' ; OPCODE.B219.MNEMO = 'SAC'
OPCODE.B22A.FORMAT = 'RRE2' ; OPCODE.B22A.MNEMO = 'RRBE'
OPCODE.B22B.FORMAT = 'RRE2' ; OPCODE.B22B.MNEMO = 'SSKE'
OPCODE.B22C.FORMAT = 'RRE2' ; OPCODE.B22C.MNEMO = 'TB'
OPCODE.B22D.FORMAT = 'RRE2' ; OPCODE.B22D.MNEMO = 'DXR'
OPCODE.B22E.FORMAT = 'RRE2' ; OPCODE.B22E.MNEMO = 'PGIN'
OPCODE.B22F.FORMAT = 'RRE2' ; OPCODE.B22F.MNEMO = 'PGOUT'
OPCODE.B221.FORMAT = 'RRE2' ; OPCODE.B221.MNEMO = 'IPTE'
OPCODE.B222.FORMAT = 'RRE1' ; OPCODE.B222.MNEMO = 'IPM'
OPCODE.B223.FORMAT = 'RRE2' ; OPCODE.B223.MNEMO = 'IVSK'
OPCODE.B224.FORMAT = 'RRE1' ; OPCODE.B224.MNEMO = 'IAC'
OPCODE.B225.FORMAT = 'RRE1' ; OPCODE.B225.MNEMO = 'SSAR'
OPCODE.B99F.FORMAT = 'RRE1' ; OPCODE.B99F.MNEMO = 'SSAIR'
OPCODE.B226.FORMAT = 'RRE1' ; OPCODE.B226.MNEMO = 'EPAR'
OPCODE.B227.FORMAT = 'RRE1' ; OPCODE.B227.MNEMO = 'ESAR'
OPCODE.B99A.FORMAT = 'RRE1' ; OPCODE.B99A.MNEMO = 'EPAIR'
OPCODE.B99B.FORMAT = 'RRE1' ; OPCODE.B99B.MNEMO = 'ESAIR'
OPCODE.B228.FORMAT = 'RRE2' ; OPCODE.B228.MNEMO = 'PT'
OPCODE.B229.FORMAT = 'RRE2' ; OPCODE.B229.MNEMO = 'ISKE'
OPCODE.B23A.FORMAT = 'S' ; OPCODE.B23A.MNEMO = 'STCPS'
OPCODE.B23B.FORMAT = 'S' ; OPCODE.B23B.MNEMO = 'RCHP'
OPCODE.B23C.FORMAT = 'S' ; OPCODE.B23C.MNEMO = 'SCHM'
OPCODE.B230.FORMAT = 'S' ; OPCODE.B230.MNEMO = 'CSCH'
OPCODE.B231.FORMAT = 'S' ; OPCODE.B231.MNEMO = 'HSCH'
OPCODE.B232.FORMAT = 'S' ; OPCODE.B232.MNEMO = 'MSCH'
OPCODE.B233.FORMAT = 'S' ; OPCODE.B233.MNEMO = 'SSCH'
OPCODE.B234.FORMAT = 'S' ; OPCODE.B234.MNEMO = 'STSCH'
OPCODE.B235.FORMAT = 'S' ; OPCODE.B235.MNEMO = 'TSCH'
OPCODE.B236.FORMAT = 'S' ; OPCODE.B236.MNEMO = 'TPI'
OPCODE.B237.FORMAT = 'S' ; OPCODE.B237.MNEMO = 'SAL'
OPCODE.B238.FORMAT = 'S' ; OPCODE.B238.MNEMO = 'RSCH'
OPCODE.B239.FORMAT = 'S' ; OPCODE.B239.MNEMO = 'STCRW'
OPCODE.B24A.FORMAT = 'RRE2' ; OPCODE.B24A.MNEMO = 'ESTA'
OPCODE.B24B.FORMAT = 'RRE2' ; OPCODE.B24B.MNEMO = 'LURA'
OPCODE.B24C.FORMAT = 'RRE2' ; OPCODE.B24C.MNEMO = 'TAR'
OPCODE.B24D.FORMAT = 'RRE2' ; OPCODE.B24D.MNEMO = 'CPYA'
OPCODE.B24E.FORMAT = 'RRE2' ; OPCODE.B24E.MNEMO = 'SAR'
OPCODE.B24F.FORMAT = 'RRE2' ; OPCODE.B24F.MNEMO = 'EAR'
OPCODE.B240.FORMAT = 'RRE2' ; OPCODE.B240.MNEMO = 'BAKR'
OPCODE.B241.FORMAT = 'RRE2' ; OPCODE.B241.MNEMO = 'CKSM'
OPCODE.B244.FORMAT = 'RRE2' ; OPCODE.B244.MNEMO = 'SQDR'
OPCODE.B245.FORMAT = 'RRE2' ; OPCODE.B245.MNEMO = 'SQER'
OPCODE.B246.FORMAT = 'RRE2' ; OPCODE.B246.MNEMO = 'STURA'
OPCODE.B247.FORMAT = 'RRE1' ; OPCODE.B247.MNEMO = 'MSTA'
OPCODE.B248.FORMAT = 'S' ; OPCODE.B248.MNEMO = 'PALB'
OPCODE.B249.FORMAT = 'RRE2' ; OPCODE.B249.MNEMO = 'EREG'
OPCODE.B25A.FORMAT = 'RRE2' ; OPCODE.B25A.MNEMO = 'BSA'
OPCODE.B25D.FORMAT = 'RRE2' ; OPCODE.B25D.MNEMO = 'CLST'
OPCODE.B25E.FORMAT = 'RRE2' ; OPCODE.B25E.MNEMO = 'SRST'
OPCODE.B9BE.FORMAT = 'RRE2' ; OPCODE.B9BE.MNEMO = 'SRSTU'
OPCODE.B250.FORMAT = 'RRE2' ; OPCODE.B250.MNEMO = 'CSP'
OPCODE.B252.FORMAT = 'RRE2' ; OPCODE.B252.MNEMO = 'MSR'
OPCODE.B254.FORMAT = 'RRE2' ; OPCODE.B254.MNEMO = 'MVPG'
OPCODE.B255.FORMAT = 'RRE2' ; OPCODE.B255.MNEMO = 'MVST'
OPCODE.B257.FORMAT = 'RRE2' ; OPCODE.B257.MNEMO = 'CUSE'
OPCODE.B258.FORMAT = 'RRE2' ; OPCODE.B258.MNEMO = 'BSG'
OPCODE.B263.FORMAT = 'RRE2' ; OPCODE.B263.MNEMO = 'CMPSC'
OPCODE.B27D.FORMAT = 'S' ; OPCODE.B27D.MNEMO = 'STSI'
OPCODE.B274.FORMAT = 'S' ; OPCODE.B274.MNEMO = 'SIGA'
OPCODE.B276.FORMAT = 'S' ; OPCODE.B276.MNEMO = 'XSCH'
OPCODE.B277.FORMAT = 'S' ; OPCODE.B277.MNEMO = 'RP'
OPCODE.B278.FORMAT = 'S' ; OPCODE.B278.MNEMO = 'STCKE'
OPCODE.B279.FORMAT = 'S' ; OPCODE.B279.MNEMO = 'SACF'
OPCODE.B29C.FORMAT = 'S' ; OPCODE.B29C.MNEMO = 'STFPC'
OPCODE.B29D.FORMAT = 'S' ; OPCODE.B29D.MNEMO = 'LFPC'
OPCODE.B299.FORMAT = 'S' ; OPCODE.B299.MNEMO = 'SRNM'
OPCODE.B3AA.FORMAT = 'RRF2' ; OPCODE.B3AA.MNEMO = 'CGXBR'
OPCODE.B3A4.FORMAT = 'RRE2' ; OPCODE.B3A4.MNEMO = 'CEGBR'
OPCODE.B3A5.FORMAT = 'RRE2' ; OPCODE.B3A5.MNEMO = 'CDGBR'
OPCODE.B3A6.FORMAT = 'RRE2' ; OPCODE.B3A6.MNEMO = 'CXGBR'
OPCODE.B3A8.FORMAT = 'RRF2' ; OPCODE.B3A8.MNEMO = 'CGEBR'
OPCODE.B3A9.FORMAT = 'RRF2' ; OPCODE.B3A9.MNEMO = 'CGDBR'
OPCODE.B3BA.FORMAT = 'RRF2' ; OPCODE.B3BA.MNEMO = 'CFXR'
OPCODE.B3B4.FORMAT = 'RRE2' ; OPCODE.B3B4.MNEMO = 'CEFR'
OPCODE.B3B5.FORMAT = 'RRE2' ; OPCODE.B3B5.MNEMO = 'CDFR'
OPCODE.B3B6.FORMAT = 'RRE2' ; OPCODE.B3B6.MNEMO = 'CXFR'
OPCODE.B3B8.FORMAT = 'RRF2' ; OPCODE.B3B8.MNEMO = 'CFER'
OPCODE.B3B9.FORMAT = 'RRF2' ; OPCODE.B3B9.MNEMO = 'CFDR'
OPCODE.B3CA.FORMAT = 'RRF2' ; OPCODE.B3CA.MNEMO = 'CGXR'
OPCODE.B3C4.FORMAT = 'RRE2' ; OPCODE.B3C4.MNEMO = 'CEGR'
OPCODE.B3C5.FORMAT = 'RRE2' ; OPCODE.B3C5.MNEMO = 'CDGR'
OPCODE.B3C6.FORMAT = 'RRE2' ; OPCODE.B3C6.MNEMO = 'CXGR'
OPCODE.B3C8.FORMAT = 'RRF2' ; OPCODE.B3C8.MNEMO = 'CGER'
OPCODE.B3C9.FORMAT = 'RRF2' ; OPCODE.B3C9.MNEMO = 'CGDR'
OPCODE.B30A.FORMAT = 'RRE2' ; OPCODE.B30A.MNEMO = 'AEBR'
OPCODE.B30B.FORMAT = 'RRE2' ; OPCODE.B30B.MNEMO = 'SEBR'
OPCODE.B30C.FORMAT = 'RRE2' ; OPCODE.B30C.MNEMO = 'MDEBR'
OPCODE.B30D.FORMAT = 'RRE2' ; OPCODE.B30D.MNEMO = 'DEBR'
OPCODE.B30E.FORMAT = 'RRF1' ; OPCODE.B30E.MNEMO = 'MAEBR'
OPCODE.B30F.FORMAT = 'RRF1' ; OPCODE.B30F.MNEMO = 'MSEBR'
OPCODE.B300.FORMAT = 'RRE2' ; OPCODE.B300.MNEMO = 'LPEBR'
OPCODE.B301.FORMAT = 'RRE2' ; OPCODE.B301.MNEMO = 'LNEBR'
OPCODE.B302.FORMAT = 'RRE2' ; OPCODE.B302.MNEMO = 'LTEBR'
OPCODE.B303.FORMAT = 'RRE2' ; OPCODE.B303.MNEMO = 'LCEBR'
OPCODE.B304.FORMAT = 'RRE2' ; OPCODE.B304.MNEMO = 'LDEBR'
OPCODE.B305.FORMAT = 'RRE2' ; OPCODE.B305.MNEMO = 'LXDBR'
OPCODE.B306.FORMAT = 'RRE2' ; OPCODE.B306.MNEMO = 'LXEBR'
OPCODE.B307.FORMAT = 'RRE2' ; OPCODE.B307.MNEMO = 'MXDBR'
OPCODE.B308.FORMAT = 'RRE2' ; OPCODE.B308.MNEMO = 'KEBR'
OPCODE.B309.FORMAT = 'RRE2' ; OPCODE.B309.MNEMO = 'CEBR'
OPCODE.B31A.FORMAT = 'RRE2' ; OPCODE.B31A.MNEMO = 'ADBR'
OPCODE.B31B.FORMAT = 'RRE2' ; OPCODE.B31B.MNEMO = 'SDBR'
OPCODE.B31C.FORMAT = 'RRE2' ; OPCODE.B31C.MNEMO = 'MDBR'
OPCODE.B31D.FORMAT = 'RRE2' ; OPCODE.B31D.MNEMO = 'DDBR'
OPCODE.B31E.FORMAT = 'RRF1' ; OPCODE.B31E.MNEMO = 'MADBR'
OPCODE.B31F.FORMAT = 'RRF1' ; OPCODE.B31F.MNEMO = 'MSDBR'
OPCODE.B310.FORMAT = 'RRE2' ; OPCODE.B310.MNEMO = 'LPDBR'
OPCODE.B311.FORMAT = 'RRE2' ; OPCODE.B311.MNEMO = 'LNDBR'
OPCODE.B312.FORMAT = 'RRE2' ; OPCODE.B312.MNEMO = 'LTDBR'
OPCODE.B313.FORMAT = 'RRE2' ; OPCODE.B313.MNEMO = 'LCDBR'
OPCODE.B314.FORMAT = 'RRE2' ; OPCODE.B314.MNEMO = 'SQEBR'
OPCODE.B315.FORMAT = 'RRE2' ; OPCODE.B315.MNEMO = 'SQDBR'
OPCODE.B316.FORMAT = 'RRE2' ; OPCODE.B316.MNEMO = 'SQXBR'
OPCODE.B317.FORMAT = 'RRE2' ; OPCODE.B317.MNEMO = 'MEEBR'
OPCODE.B318.FORMAT = 'RRE2' ; OPCODE.B318.MNEMO = 'KDBR'
OPCODE.B319.FORMAT = 'RRE2' ; OPCODE.B319.MNEMO = 'CDBR'
OPCODE.B32E.FORMAT = 'RRF1' ; OPCODE.B32E.MNEMO = 'MAER'
OPCODE.B32F.FORMAT = 'RRF1' ; OPCODE.B32F.MNEMO = 'MSER'
OPCODE.B33C.FORMAT = 'RRF1' ; OPCODE.B33C.MNEMO = 'MAYHR'
OPCODE.B338.FORMAT = 'RRF1' ; OPCODE.B338.MNEMO = 'MAYLR'
OPCODE.B324.FORMAT = 'RRE2' ; OPCODE.B324.MNEMO = 'LDER'
OPCODE.B325.FORMAT = 'RRE2' ; OPCODE.B325.MNEMO = 'LXDR'
OPCODE.B326.FORMAT = 'RRE2' ; OPCODE.B326.MNEMO = 'LXER'
OPCODE.B33E.FORMAT = 'RRF1' ; OPCODE.B33E.MNEMO = 'MADR'
OPCODE.B33F.FORMAT = 'RRF1' ; OPCODE.B33F.MNEMO = 'MSDR'
OPCODE.B336.FORMAT = 'RRE2' ; OPCODE.B336.MNEMO = 'SQXR'
OPCODE.B337.FORMAT = 'RRE2' ; OPCODE.B337.MNEMO = 'MEER'
OPCODE.B34A.FORMAT = 'RRE2' ; OPCODE.B34A.MNEMO = 'AXBR'
OPCODE.B34B.FORMAT = 'RRE2' ; OPCODE.B34B.MNEMO = 'SXBR'
OPCODE.B34C.FORMAT = 'RRE2' ; OPCODE.B34C.MNEMO = 'MXBR'
OPCODE.B34D.FORMAT = 'RRE2' ; OPCODE.B34D.MNEMO = 'DXBR'
OPCODE.B340.FORMAT = 'RRE2' ; OPCODE.B340.MNEMO = 'LPXBR'
OPCODE.B341.FORMAT = 'RRE2' ; OPCODE.B341.MNEMO = 'LNXBR'
OPCODE.B342.FORMAT = 'RRE2' ; OPCODE.B342.MNEMO = 'LTXBR'
OPCODE.B343.FORMAT = 'RRE2' ; OPCODE.B343.MNEMO = 'LCXBR'
OPCODE.B344.FORMAT = 'RRE2' ; OPCODE.B344.MNEMO = 'LEDBR'
OPCODE.B345.FORMAT = 'RRE2' ; OPCODE.B345.MNEMO = 'LDXBR'
OPCODE.B346.FORMAT = 'RRE2' ; OPCODE.B346.MNEMO = 'LEXBR'
OPCODE.B347.FORMAT = 'RRF2' ; OPCODE.B347.MNEMO = 'FIXBR'
OPCODE.B348.FORMAT = 'RRE2' ; OPCODE.B348.MNEMO = 'KXBR'
OPCODE.B349.FORMAT = 'RRE2' ; OPCODE.B349.MNEMO = 'CXBR'
OPCODE.B35B.FORMAT = 'RRF4' ; OPCODE.B35B.MNEMO = 'DIDBR'
OPCODE.B35F.FORMAT = 'RRF2' ; OPCODE.B35F.MNEMO = 'FIDBR'
OPCODE.B350.FORMAT = 'RRF2' ; OPCODE.B350.MNEMO = 'TBEDR'
OPCODE.B351.FORMAT = 'RRF2' ; OPCODE.B351.MNEMO = 'TBDR'
OPCODE.B353.FORMAT = 'RRF4' ; OPCODE.B353.MNEMO = 'DIEBR'
OPCODE.B357.FORMAT = 'RRF2' ; OPCODE.B357.MNEMO = 'FIEBR'
OPCODE.B358.FORMAT = 'RRE2' ; OPCODE.B358.MNEMO = 'THDER'
OPCODE.B359.FORMAT = 'RRE2' ; OPCODE.B359.MNEMO = 'THDR'
OPCODE.B360.FORMAT = 'RRE2' ; OPCODE.B360.MNEMO = 'LPXR'
OPCODE.B361.FORMAT = 'RRE2' ; OPCODE.B361.MNEMO = 'LNXR'
OPCODE.B362.FORMAT = 'RRE2' ; OPCODE.B362.MNEMO = 'LTXR'
OPCODE.B363.FORMAT = 'RRE2' ; OPCODE.B363.MNEMO = 'LCXR'
OPCODE.B365.FORMAT = 'RRE2' ; OPCODE.B365.MNEMO = 'LXR'
OPCODE.B366.FORMAT = 'RRE2' ; OPCODE.B366.MNEMO = 'LEXR'
OPCODE.B367.FORMAT = 'RRE2' ; OPCODE.B367.MNEMO = 'FIXR'
OPCODE.B369.FORMAT = 'RRE2' ; OPCODE.B369.MNEMO = 'CXR'
OPCODE.B37F.FORMAT = 'RRE2' ; OPCODE.B37F.MNEMO = 'FIDR'
OPCODE.B374.FORMAT = 'RRE1' ; OPCODE.B374.MNEMO = 'LZER'
OPCODE.B375.FORMAT = 'RRE1' ; OPCODE.B375.MNEMO = 'LZDR'
OPCODE.B376.FORMAT = 'RRE1' ; OPCODE.B376.MNEMO = 'LZXR'
OPCODE.B377.FORMAT = 'RRE2' ; OPCODE.B377.MNEMO = 'FIER'
OPCODE.B38C.FORMAT = 'RRE1' ; OPCODE.B38C.MNEMO = 'EFPC'
OPCODE.B384.FORMAT = 'RRE1' ; OPCODE.B384.MNEMO = 'SFPC'
OPCODE.B39A.FORMAT = 'RRF2' ; OPCODE.B39A.MNEMO = 'CFXBR'
OPCODE.B394.FORMAT = 'RRE2' ; OPCODE.B394.MNEMO = 'CEFBR'
OPCODE.B395.FORMAT = 'RRE2' ; OPCODE.B395.MNEMO = 'CDFBR'
OPCODE.B396.FORMAT = 'RRE2' ; OPCODE.B396.MNEMO = 'CXFBR'
OPCODE.B398.FORMAT = 'RRF2' ; OPCODE.B398.MNEMO = 'CFEBR'
OPCODE.B399.FORMAT = 'RRF2' ; OPCODE.B399.MNEMO = 'CFDBR'
OPCODE.B6.FORMAT = 'RS1' ; OPCODE.B6.MNEMO = 'STCTL'
OPCODE.B7.FORMAT = 'RS1' ; OPCODE.B7.MNEMO = 'LCTL'
OPCODE.86.FORMAT = 'RS1' ; OPCODE.86.MNEMO = 'BXH'
OPCODE.87.FORMAT = 'RS1' ; OPCODE.87.MNEMO = 'BXLE'
OPCODE.9A.FORMAT = 'RS1' ; OPCODE.9A.MNEMO = 'LAM'
OPCODE.9B.FORMAT = 'RS1' ; OPCODE.9B.MNEMO = 'STAM'
OPCODE.90.FORMAT = 'RS1' ; OPCODE.90.MNEMO = 'STM'
OPCODE.98.FORMAT = 'RS1' ; OPCODE.98.MNEMO = 'LM'
OPCODE.99.FORMAT = 'RS1' ; OPCODE.99.MNEMO = 'TRACE'
OPCODE.B90A.FORMAT = 'RRE2' ; OPCODE.B90A.MNEMO = 'ALGR'
OPCODE.B90B.FORMAT = 'RRE2' ; OPCODE.B90B.MNEMO = 'SLGR'
OPCODE.B90C.FORMAT = 'RRE2' ; OPCODE.B90C.MNEMO = 'MSGR'
OPCODE.B90D.FORMAT = 'RRE2' ; OPCODE.B90D.MNEMO = 'DSGR'
OPCODE.B90E.FORMAT = 'RRE2' ; OPCODE.B90E.MNEMO = 'EREGG'
OPCODE.B90F.FORMAT = 'RRE2' ; OPCODE.B90F.MNEMO = 'LRVGR'
OPCODE.B900.FORMAT = 'RRE2' ; OPCODE.B900.MNEMO = 'LPGR'
OPCODE.B901.FORMAT = 'RRE2' ; OPCODE.B901.MNEMO = 'LNGR'
OPCODE.B902.FORMAT = 'RRE2' ; OPCODE.B902.MNEMO = 'LTGR'
OPCODE.B903.FORMAT = 'RRE2' ; OPCODE.B903.MNEMO = 'LCGR'
OPCODE.B904.FORMAT = 'RRE2' ; OPCODE.B904.MNEMO = 'LGR'
OPCODE.B905.FORMAT = 'RRE2' ; OPCODE.B905.MNEMO = 'LURAG'
OPCODE.B908.FORMAT = 'RRE2' ; OPCODE.B908.MNEMO = 'AGR'
OPCODE.B909.FORMAT = 'RRE2' ; OPCODE.B909.MNEMO = 'SGR'
OPCODE.B91A.FORMAT = 'RRE2' ; OPCODE.B91A.MNEMO = 'ALGFR'
OPCODE.B91B.FORMAT = 'RRE2' ; OPCODE.B91B.MNEMO = 'SLGFR'
OPCODE.B91C.FORMAT = 'RRE2' ; OPCODE.B91C.MNEMO = 'MSGFR'
OPCODE.B91D.FORMAT = 'RRE2' ; OPCODE.B91D.MNEMO = 'DSGFR'
OPCODE.B91E.FORMAT = 'RRE2' ; OPCODE.B91E.MNEMO = 'KMAC'
OPCODE.B91F.FORMAT = 'RRE2' ; OPCODE.B91F.MNEMO = 'LRVR'
OPCODE.B910.FORMAT = 'RRE2' ; OPCODE.B910.MNEMO = 'LPGFR'
OPCODE.B911.FORMAT = 'RRE2' ; OPCODE.B911.MNEMO = 'LNGFR'
OPCODE.B912.FORMAT = 'RRE2' ; OPCODE.B912.MNEMO = 'LTGFR'
OPCODE.B913.FORMAT = 'RRE2' ; OPCODE.B913.MNEMO = 'LCGFR'
OPCODE.B914.FORMAT = 'RRE2' ; OPCODE.B914.MNEMO = 'LGFR'
OPCODE.B916.FORMAT = 'RRE2' ; OPCODE.B916.MNEMO = 'LLGFR'
OPCODE.B917.FORMAT = 'RRE2' ; OPCODE.B917.MNEMO = 'LLGTR'
OPCODE.B918.FORMAT = 'RRE2' ; OPCODE.B918.MNEMO = 'AGFR'
OPCODE.B919.FORMAT = 'RRE2' ; OPCODE.B919.MNEMO = 'SGFR'
OPCODE.B92E.FORMAT = 'RRE2' ; OPCODE.B92E.MNEMO = 'KM'
OPCODE.B92F.FORMAT = 'RRE2' ; OPCODE.B92F.MNEMO = 'KMC'
OPCODE.B920.FORMAT = 'RRE2' ; OPCODE.B920.MNEMO = 'CGR'
OPCODE.B921.FORMAT = 'RRE2' ; OPCODE.B921.MNEMO = 'CLGR'
OPCODE.B925.FORMAT = 'RRE2' ; OPCODE.B925.MNEMO = 'STURG'
OPCODE.B93E.FORMAT = 'RRE2' ; OPCODE.B93E.MNEMO = 'KIMD'
OPCODE.B93F.FORMAT = 'RRE2' ; OPCODE.B93F.MNEMO = 'KLMD'
OPCODE.B930.FORMAT = 'RRE2' ; OPCODE.B930.MNEMO = 'CGFR'
OPCODE.B931.FORMAT = 'RRE2' ; OPCODE.B931.MNEMO = 'CLGFR'
OPCODE.B946.FORMAT = 'RRE2' ; OPCODE.B946.MNEMO = 'BCTGR'
OPCODE.B98A.FORMAT = 'RRE2' ; OPCODE.B98A.MNEMO = 'CSPG'
OPCODE.B98D.FORMAT = 'RRE2' ; OPCODE.B98D.MNEMO = 'EPSW'
OPCODE.B98E.FORMAT = 'RRF2' ; OPCODE.B98E.MNEMO = 'IDTE'
OPCODE.B980.FORMAT = 'RRE2' ; OPCODE.B980.MNEMO = 'NGR'
OPCODE.B981.FORMAT = 'RRE2' ; OPCODE.B981.MNEMO = 'OGR'
OPCODE.B982.FORMAT = 'RRE2' ; OPCODE.B982.MNEMO = 'XGR'
OPCODE.B986.FORMAT = 'RRE2' ; OPCODE.B986.MNEMO = 'MLGR'
OPCODE.B987.FORMAT = 'RRE2' ; OPCODE.B987.MNEMO = 'DLGR'
OPCODE.B988.FORMAT = 'RRE2' ; OPCODE.B988.MNEMO = 'ALCGR'
OPCODE.B989.FORMAT = 'RRE2' ; OPCODE.B989.MNEMO = 'SLBGR'
OPCODE.B99D.FORMAT = 'RRE1' ; OPCODE.B99D.MNEMO = 'ESEA'
OPCODE.B990.FORMAT = 'RRE2' ; OPCODE.B990.MNEMO = 'TRTT'
OPCODE.B991.FORMAT = 'RRE2' ; OPCODE.B991.MNEMO = 'TRTO'
OPCODE.B992.FORMAT = 'RRF2' ; OPCODE.B992.MNEMO = 'TROT'
OPCODE.B993.FORMAT = 'RRF2' ; OPCODE.B993.MNEMO = 'TROO'
OPCODE.B996.FORMAT = 'RRE2' ; OPCODE.B996.MNEMO = 'MLR'
OPCODE.B997.FORMAT = 'RRE2' ; OPCODE.B997.MNEMO = 'DLR'
OPCODE.B998.FORMAT = 'RRE2' ; OPCODE.B998.MNEMO = 'ALCR'
OPCODE.B999.FORMAT = 'RRE2' ; OPCODE.B999.MNEMO = 'SLBR'
OPCODE.C0B4.FORMAT = 'RIL2' ; OPCODE.C0B4.MNEMO = 'JNL'
OPCODE.C0B4M.FORMAT ='RIL2M' ; OPCODE.C0B4M.MNEMO = 'JNM'
OPCODE.C0D4.FORMAT = 'RIL2'  ; OPCODE.C0D4.MNEMO = 'JNH'
OPCODE.C0D4M.FORMAT = 'RIL2M' ; OPCODE.C0D4M.MNEMO = 'JNP'
OPCODE.C0E4.FORMAT = 'RIL2'  ; OPCODE.C0E4.MNEMO = 'JGNO'
OPCODE.C0F4.FORMAT = 'RIL2'  ; OPCODE.C0F4.MNEMO = 'JG'
OPCODE.C00.FORMAT = 'RIL2' ; OPCODE.C00.MNEMO = 'LARL'
OPCODE.C04.FORMAT  = 'RIL2' ; OPCODE.C04.MNEMO  = 'BRCL'
OPCODE.C005.FORMAT = 'RIL2' ; OPCODE.C005.MNEMO = 'JASL'
OPCODE.C014.FORMAT = 'RIL2'  ; OPCODE.C014.MNEMO = 'JGO'
OPCODE.C024.FORMAT = 'RIL2'  ; OPCODE.C024.MNEMO = 'JGH'
OPCODE.C024M.FORMAT = 'RIL2M' ; OPCODE.C024M.MNEMO = 'JGP'
OPCODE.C034.FORMAT = 'RIL2'  ; OPCODE.C034.MNEMO = 'JGNLE'
OPCODE.C044.FORMAT = 'RIL2'  ; OPCODE.C044.MNEMO = 'JGL'
OPCODE.C044M.FORMAT = 'RIL2' ; OPCODE.C044M.MNEMO = 'JGM'
OPCODE.C054.FORMAT = 'RIL2'  ; OPCODE.C054.MNEMO = 'JGNHE'
OPCODE.C064.FORMAT = 'RIL2'  ; OPCODE.C064.MNEMO = 'JGLH'
OPCODE.C074.FORMAT = 'RIL2'  ; OPCODE.C074.MNEMO = 'JGNE'
OPCODE.C074M.FORMAT = 'RIL2M' ; OPCODE.C074M.MNEMO = 'JGNZ'
OPCODE.C084.FORMAT = 'RIL2'  ; OPCODE.C084.MNEMO = 'JGE'
OPCODE.C084M.FORMAT = 'RIL2' ; OPCODE.C084M.MNEMO = 'JGZ'
OPCODE.C094.FORMAT = 'RIL2'  ; OPCODE.C094.MNEMO = 'JGNLH'
OPCODE.C094.FORMAT = 'RIL2'  ; OPCODE.C094.MNEMO = 'JGNLH'
OPCODE.C2F.FORMAT = 'RIL1' ; OPCODE.C2F.MNEMO = 'CLFI'
OPCODE.C2C.FORMAT = 'RIL1' ; OPCODE.C2C.MNEMO = 'CGFI'
OPCODE.C2B.FORMAT = 'RIL1' ; OPCODE.C2B.MNEMO = 'ALFI'
OPCODE.C28.FORMAT = 'RIL1' ; OPCODE.C28.MNEMO = 'AGFI'
OPCODE.C2A.FORMAT = 'RIL1' ; OPCODE.C2A.MNEMO = 'ALGFI'
OPCODE.C2E.FORMAT = 'RIL1' ; OPCODE.C2E.MNEMO = 'CLGFI'
OPCODE.C25.FORMAT = 'RIL1' ; OPCODE.C25.MNEMO = 'SLFI'
OPCODE.C24.FORMAT = 'RIL1' ; OPCODE.C24.MNEMO = 'SLGFI'
OPCODE.DA.FORMAT = 'SSR' ; OPCODE.DA.MNEMO = 'MVCP'
OPCODE.DB.FORMAT = 'SSR' ; OPCODE.DB.MNEMO = 'MVCS'
OPCODE.DC.FORMAT = 'SS' ; OPCODE.DC.MNEMO = 'TR'
OPCODE.DD.FORMAT = 'SS' ; OPCODE.DD.MNEMO = 'TRT'
OPCODE.DE.FORMAT = 'SS' ; OPCODE.DE.MNEMO = 'ED'
OPCODE.DF.FORMAT = 'SS' ; OPCODE.DF.MNEMO = 'EDMK'
OPCODE.D1.FORMAT = 'SS' ; OPCODE.D1.MNEMO = 'MVN'
OPCODE.D2.FORMAT = 'SS' ; OPCODE.D2.MNEMO = 'MVC'
OPCODE.D3.FORMAT = 'SS' ; OPCODE.D3.MNEMO = 'MVZ'
OPCODE.D4.FORMAT = 'SS' ; OPCODE.D4.MNEMO = 'NC'
OPCODE.D5.FORMAT = 'SS' ; OPCODE.D5.MNEMO = 'CLC'
OPCODE.D6.FORMAT = 'SS' ; OPCODE.D6.MNEMO = 'OC'
OPCODE.D7.FORMAT = 'SS' ; OPCODE.D7.MNEMO = 'XC'
OPCODE.D9.FORMAT = 'SSR' ; OPCODE.D9.MNEMO = 'MVCK'
OPCODE.EA.FORMAT = 'SS' ; OPCODE.EA.MNEMO = 'UNPKA'
OPCODE.EE.FORMAT = 'SSL' ; OPCODE.EE.MNEMO = 'PLO'
OPCODE.EF.FORMAT = 'SSM' ; OPCODE.EF.MNEMO = 'LMD'
OPCODE.E1.FORMAT = 'SSI' ; OPCODE.E1.MNEMO = 'PKU'
OPCODE.E2.FORMAT = 'SS'  ; OPCODE.E2.MNEMO = 'UNPKU'
OPCODE.E50E.FORMAT = 'SSE' ; OPCODE.E50E.MNEMO = 'MVCSK'
OPCODE.E50F.FORMAT = 'SSE' ; OPCODE.E50F.MNEMO = 'MVCDK'
OPCODE.E500.FORMAT = 'SSE' ; OPCODE.E500.MNEMO = 'LASP'
OPCODE.E501.FORMAT = 'SSE' ; OPCODE.E501.MNEMO = 'TPROT'
OPCODE.E502.FORMAT = 'SSE' ; OPCODE.E502.MNEMO = 'STRAG'
OPCODE.E8.FORMAT = 'SS' ; OPCODE.E8.MNEMO = 'MVCIN'
OPCODE.E9.FORMAT = 'SSI' ; OPCODE.E9.MNEMO = 'PKA'
OPCODE.FA.FORMAT = 'SSA' ; OPCODE.FA.MNEMO = 'AP'
OPCODE.FB.FORMAT = 'SSA' ; OPCODE.FB.MNEMO = 'SP'
OPCODE.FC.FORMAT = 'SSA' ; OPCODE.FC.MNEMO = 'MP'
OPCODE.FD.FORMAT = 'SSA' ; OPCODE.FD.MNEMO = 'DP'
OPCODE.F0.FORMAT = 'SS3' ; OPCODE.F0.MNEMO = 'SRP'
OPCODE.F1.FORMAT = 'SSA' ; OPCODE.F1.MNEMO = 'MVO'
OPCODE.F2.FORMAT = 'SSA' ; OPCODE.F2.MNEMO = 'PACK'
OPCODE.F3.FORMAT = 'SSA' ; OPCODE.F3.MNEMO = 'UNPK'
OPCODE.F8.FORMAT = 'SSA' ; OPCODE.F8.MNEMO = 'ZAP'
OPCODE.F9.FORMAT = 'SSA' ; OPCODE.F9.MNEMO = 'CP'
OPCODE.0A.FORMAT = 'II' ; OPCODE.0A.MNEMO = 'SVC'
OPCODE.0B.FORMAT = 'RR' ; OPCODE.0B.MNEMO = 'BSM'
OPCODE.0C.FORMAT = 'RR' ; OPCODE.0C.MNEMO = 'BASSM'
OPCODE.0D.FORMAT = 'RR' ; OPCODE.0D.MNEMO = 'BASR'
OPCODE.0E.FORMAT = 'RR' ; OPCODE.0E.MNEMO = 'MVCL'
OPCODE.0F.FORMAT = 'RR' ; OPCODE.0F.MNEMO = 'CLCL'
OPCODE.01FF.FORMAT = 'E' ; OPCODE.01FF.MNEMO = 'TRAP2'
OPCODE.010B.FORMAT = 'E' ; OPCODE.010B.MNEMO = 'TAM'
OPCODE.010C.FORMAT = 'E' ; OPCODE.010C.MNEMO = 'SAM24'
OPCODE.010D.FORMAT = 'E' ; OPCODE.010D.MNEMO = 'SAM31'
OPCODE.010E.FORMAT = 'E' ; OPCODE.010E.MNEMO = 'SAM64'
OPCODE.0101.FORMAT = 'E' ; OPCODE.0101.MNEMO = 'PR'
OPCODE.0102.FORMAT = 'E' ; OPCODE.0102.MNEMO = 'UPT'
OPCODE.0107.FORMAT = 'E' ; OPCODE.0107.MNEMO = 'SCKPF'
OPCODE.04.FORMAT = 'RR0' ; OPCODE.04.MNEMO = 'SPM'
OPCODE.05.FORMAT = 'RR' ; OPCODE.05.MNEMO = 'BALR'
OPCODE.06.FORMAT = 'RR' ; OPCODE.06.MNEMO = 'BCTR'
OPCODE.07.FORMAT  = 'BR' ; OPCODE.07.MNEMO = 'BCR'
OPCODE.07B.FORMAT = 'RRB' ; OPCODE.07B.MNEMO = 'BNLR'
OPCODE.07BM.FORMAT= 'RRM' ; OPCODE.07BM.MNEMO = 'BNMR'
OPCODE.07C.FORMAT = 'RRB' ; OPCODE.07C.MNEMO = 'BLER'
OPCODE.07D.FORMAT = 'RRB' ; OPCODE.07D.MNEMO = 'BNHR'
OPCODE.07DM.FORMAT = 'RRM' ; OPCODE.07DM.MNEMO = 'BNPR'
OPCODE.07EM.FORMAT= 'RRM' ; OPCODE.07EM.MNEMO = 'BNOR'
OPCODE.07F.FORMAT = 'RRB' ; OPCODE.07F.MNEMO  = 'BR'
OPCODE.070.FORMAT = 'RRB' ; OPCODE.070.MNEMO  = 'NOPR'
OPCODE.071M.FORMAT= 'RRM' ; OPCODE.071M.MNEMO = 'BOR'
OPCODE.071.FORMAT=  'RRM' ; OPCODE.071.MNEMO  = 'BOR'
OPCODE.072.FORMAT = 'RRB' ; OPCODE.072.MNEMO  = 'BHR'
OPCODE.074.FORMAT = 'RRB' ; OPCODE.074.MNEMO  = 'BLR'
OPCODE.074M.FORMAT= 'RRM' ; OPCODE.074M.MNEMO = 'BMR'
OPCODE.077.FORMAT = 'RRB' ; OPCODE.077.MNEMO  = 'BNER'
OPCODE.077M.FORMAT= 'RRM' ; OPCODE.077M.MNEMO = 'BNZR'
OPCODE.078.FORMAT = 'RRB' ; OPCODE.078.MNEMO  = 'BER'
OPCODE.078M.FORMAT= 'RRM' ; OPCODE.078M.MNEMO = 'BZR'
OPCODE.1A.FORMAT = 'RR' ; OPCODE.1A.MNEMO = 'AR'
OPCODE.1B.FORMAT = 'RR' ; OPCODE.1B.MNEMO = 'SR'
OPCODE.1C.FORMAT = 'RR' ; OPCODE.1C.MNEMO = 'MR'
OPCODE.1D.FORMAT = 'RR' ; OPCODE.1D.MNEMO = 'DR'
OPCODE.1E.FORMAT = 'RR' ; OPCODE.1E.MNEMO = 'ALR'
OPCODE.1F.FORMAT = 'RR' ; OPCODE.1F.MNEMO = 'SLR'
OPCODE.10.FORMAT = 'RR' ; OPCODE.10.MNEMO = 'LPR'
OPCODE.11.FORMAT = 'RR' ; OPCODE.11.MNEMO = 'LNR'
OPCODE.12.FORMAT = 'RR' ; OPCODE.12.MNEMO = 'LTR'
OPCODE.13.FORMAT = 'RR' ; OPCODE.13.MNEMO = 'LCR'
OPCODE.14.FORMAT = 'RR' ; OPCODE.14.MNEMO = 'NR'
OPCODE.15.FORMAT = 'RR' ; OPCODE.15.MNEMO = 'CLR'
OPCODE.16.FORMAT = 'RR' ; OPCODE.16.MNEMO = 'OR'
OPCODE.17.FORMAT = 'RR' ; OPCODE.17.MNEMO = 'XR'
OPCODE.18.FORMAT = 'RR' ; OPCODE.18.MNEMO = 'LR'
OPCODE.19.FORMAT = 'RR' ; OPCODE.19.MNEMO = 'CR'
OPCODE.2A.FORMAT = 'RR' ; OPCODE.2A.MNEMO = 'ADR'
OPCODE.2B.FORMAT = 'RR' ; OPCODE.2B.MNEMO = 'SDR'
OPCODE.2C.FORMAT = 'RR' ; OPCODE.2C.MNEMO = 'MDR'
OPCODE.2D.FORMAT = 'RR' ; OPCODE.2D.MNEMO = 'DDR'
OPCODE.2E.FORMAT = 'RR' ; OPCODE.2E.MNEMO = 'AWR'
OPCODE.2F.FORMAT = 'RR' ; OPCODE.2F.MNEMO = 'SWR'
OPCODE.20.FORMAT = 'RR' ; OPCODE.20.MNEMO = 'LPDR'
OPCODE.21.FORMAT = 'RR' ; OPCODE.21.MNEMO = 'LNDR'
OPCODE.22.FORMAT = 'RR' ; OPCODE.22.MNEMO = 'LTDR'
OPCODE.23.FORMAT = 'RR' ; OPCODE.23.MNEMO = 'LCDR'
OPCODE.24.FORMAT = 'RR' ; OPCODE.24.MNEMO = 'HDR'
OPCODE.25.FORMAT = 'RR' ; OPCODE.25.MNEMO = 'LDXR'
OPCODE.26.FORMAT = 'RR' ; OPCODE.26.MNEMO = 'MXR'
OPCODE.27.FORMAT = 'RR' ; OPCODE.27.MNEMO = 'MXDR'
OPCODE.28.FORMAT = 'RR' ; OPCODE.28.MNEMO = 'LDR'
OPCODE.29.FORMAT = 'RR' ; OPCODE.29.MNEMO = 'CDR'
OPCODE.3A.FORMAT = 'RR' ; OPCODE.3A.MNEMO = 'AER'
OPCODE.3B.FORMAT = 'RR' ; OPCODE.3B.MNEMO = 'SER'
OPCODE.3C.FORMAT = 'RR' ; OPCODE.3C.MNEMO = 'MDER'
OPCODE.3D.FORMAT = 'RR' ; OPCODE.3D.MNEMO = 'DER'
OPCODE.3E.FORMAT = 'RR' ; OPCODE.3E.MNEMO = 'AUR'
OPCODE.3F.FORMAT = 'RR' ; OPCODE.3F.MNEMO = 'SUR'
OPCODE.30.FORMAT = 'RR' ; OPCODE.30.MNEMO = 'LPER'
OPCODE.31.FORMAT = 'RR' ; OPCODE.31.MNEMO = 'LNER'
OPCODE.32.FORMAT = 'RR' ; OPCODE.32.MNEMO = 'LTER'
OPCODE.33.FORMAT = 'RR' ; OPCODE.33.MNEMO = 'LCER'
OPCODE.34.FORMAT = 'RR' ; OPCODE.34.MNEMO = 'HER'
OPCODE.35.FORMAT = 'RR' ; OPCODE.35.MNEMO = 'LEDR'
OPCODE.36.FORMAT = 'RR' ; OPCODE.36.MNEMO = 'AXR'
OPCODE.37.FORMAT = 'RR' ; OPCODE.37.MNEMO = 'SXR'
OPCODE.38.FORMAT = 'RR' ; OPCODE.38.MNEMO = 'LER'
OPCODE.39.FORMAT = 'RR' ; OPCODE.39.MNEMO = 'CER'
OPCODE.4A.FORMAT = 'RX' ; OPCODE.4A.MNEMO = 'AH'
OPCODE.4B.FORMAT = 'RX' ; OPCODE.4B.MNEMO = 'SH'
OPCODE.4C.FORMAT = 'RX' ; OPCODE.4C.MNEMO = 'MH'
OPCODE.4D.FORMAT = 'RX' ; OPCODE.4D.MNEMO = 'BAS'
OPCODE.4E.FORMAT = 'RX' ; OPCODE.4E.MNEMO = 'CVD'
OPCODE.4F.FORMAT = 'RX' ; OPCODE.4F.MNEMO = 'CVB'
OPCODE.40.FORMAT = 'RX' ; OPCODE.40.MNEMO = 'STH'
OPCODE.41.FORMAT = 'RX' ; OPCODE.41.MNEMO = 'LA'
OPCODE.42.FORMAT = 'RX' ; OPCODE.42.MNEMO = 'STC'
OPCODE.43.FORMAT = 'RX' ; OPCODE.43.MNEMO = 'IC'
OPCODE.44.FORMAT = 'RX' ; OPCODE.44.MNEMO = 'EX'
OPCODE.45.FORMAT = 'RX' ; OPCODE.45.MNEMO = 'BAL'
OPCODE.46.FORMAT = 'RX' ; OPCODE.46.MNEMO = 'BCT'
OPCODE.47.FORMAT = 'BX' ; OPCODE.47.MNEMO = 'BC'
OPCODE.47A.FORMAT = 'RXB' ; OPCODE.47A.MNEMO = 'BHE'
OPCODE.47B.FORMAT = 'RXB' ; OPCODE.47B.MNEMO = 'BNL'
OPCODE.47BM.FORMAT= 'RXM' ; OPCODE.47BM.MNEMO = 'BNM'
OPCODE.47C.FORMAT = 'RXB' ; OPCODE.47C.MNEMO = 'BLE'
OPCODE.47D.FORMAT = 'RXB' ; OPCODE.47D.MNEMO = 'BNH'
OPCODE.47DM.FORMAT = 'RXM' ; OPCODE.47DM.MNEMO = 'BNP'
OPCODE.47EM.FORMAT= 'RXM' ; OPCODE.47EM.MNEMO = 'BNO'
OPCODE.47F.FORMAT = 'RXB' ; OPCODE.47F.MNEMO = 'B'
OPCODE.470.FORMAT = 'RXB' ; OPCODE.470.MNEMO = 'NOP'
OPCODE.471.FORMAT=  'RXB' ; OPCODE.471.MNEMO = 'BO'
OPCODE.471M.FORMAT= 'RXB' ; OPCODE.471M.MNEMO = 'BO'
OPCODE.472.FORMAT = 'RXB' ; OPCODE.472.MNEMO = 'BH'
OPCODE.474.FORMAT = 'RXB' ; OPCODE.474.MNEMO = 'BL'
OPCODE.474M.FORMAT= 'RXM' ; OPCODE.474M.MNEMO = 'BM'
OPCODE.477.FORMAT = 'RXB' ; OPCODE.477.MNEMO = 'BNE'
OPCODE.477M.FORMAT= 'RXM' ; OPCODE.477M.MNEMO = 'BNZ'
OPCODE.478.FORMAT = 'RXB' ; OPCODE.478.MNEMO = 'BE'
OPCODE.478M.FORMAT= 'RXM' ; OPCODE.478M.MNEMO = 'BZ'
OPCODE.48.FORMAT = 'RX' ; OPCODE.48.MNEMO = 'LH'
OPCODE.49.FORMAT = 'RX' ; OPCODE.49.MNEMO = 'CH'
OPCODE.5A.FORMAT = 'RX' ; OPCODE.5A.MNEMO = 'A'
OPCODE.5B.FORMAT = 'RX' ; OPCODE.5B.MNEMO = 'S'
OPCODE.5C.FORMAT = 'RX' ; OPCODE.5C.MNEMO = 'M'
OPCODE.5D.FORMAT = 'RX' ; OPCODE.5D.MNEMO = 'D'
OPCODE.5E.FORMAT = 'RX' ; OPCODE.5E.MNEMO = 'AL'
OPCODE.5F.FORMAT = 'RX' ; OPCODE.5F.MNEMO = 'SL'
OPCODE.50.FORMAT = 'RX' ; OPCODE.50.MNEMO = 'ST'
OPCODE.51.FORMAT = 'RX' ; OPCODE.51.MNEMO = 'LAE'
OPCODE.54.FORMAT = 'RX' ; OPCODE.54.MNEMO = 'N'
OPCODE.55.FORMAT = 'RX' ; OPCODE.55.MNEMO = 'CL'
OPCODE.56.FORMAT = 'RX' ; OPCODE.56.MNEMO = 'O'
OPCODE.57.FORMAT = 'RX' ; OPCODE.57.MNEMO = 'X'
OPCODE.58.FORMAT = 'RX' ; OPCODE.58.MNEMO = 'L'
OPCODE.59.FORMAT = 'RX' ; OPCODE.59.MNEMO = 'C'
OPCODE.6A.FORMAT = 'RX' ; OPCODE.6A.MNEMO = 'AD'
OPCODE.6B.FORMAT = 'RX' ; OPCODE.6B.MNEMO = 'SD'
OPCODE.6C.FORMAT = 'RX' ; OPCODE.6C.MNEMO = 'MD'
OPCODE.6D.FORMAT = 'RX' ; OPCODE.6D.MNEMO = 'DD'
OPCODE.6E.FORMAT = 'RX' ; OPCODE.6E.MNEMO = 'AW'
OPCODE.6F.FORMAT = 'RX' ; OPCODE.6F.MNEMO = 'SW'
OPCODE.60.FORMAT = 'RX' ; OPCODE.60.MNEMO = 'STD'
OPCODE.67.FORMAT = 'RX' ; OPCODE.67.MNEMO = 'MXD'
OPCODE.68.FORMAT = 'RX' ; OPCODE.68.MNEMO = 'LD'
OPCODE.69.FORMAT = 'RX' ; OPCODE.69.MNEMO = 'CD'
OPCODE.7A.FORMAT = 'RX' ; OPCODE.7A.MNEMO = 'AE'
OPCODE.7B.FORMAT = 'RX' ; OPCODE.7B.MNEMO = 'SE'
OPCODE.7C.FORMAT = 'RX' ; OPCODE.7C.MNEMO = 'MDE'
OPCODE.7D.FORMAT = 'RX' ; OPCODE.7D.MNEMO = 'DE'
OPCODE.7E.FORMAT = 'RX' ; OPCODE.7E.MNEMO = 'AU'
OPCODE.7F.FORMAT = 'RX' ; OPCODE.7F.MNEMO = 'SU'
OPCODE.70.FORMAT = 'RX' ; OPCODE.70.MNEMO = 'STE'
OPCODE.71.FORMAT = 'RX' ; OPCODE.71.MNEMO = 'MS'
OPCODE.78.FORMAT = 'RX' ; OPCODE.78.MNEMO = 'LE'
OPCODE.79.FORMAT = 'RX' ; OPCODE.79.MNEMO = 'CE'
OPCODE.8A.FORMAT = 'RS'; OPCODE.8A.MNEMO = 'SRA'
OPCODE.8B.FORMAT = 'RS'; OPCODE.8B.MNEMO = 'SLA'
OPCODE.8C.FORMAT = 'RS'; OPCODE.8C.MNEMO = 'SRDL'
OPCODE.8D.FORMAT = 'RS'; OPCODE.8D.MNEMO = 'SLDL'
OPCODE.8E.FORMAT = 'RS'; OPCODE.8E.MNEMO = 'SRDA'
OPCODE.8F.FORMAT = 'RS'; OPCODE.8F.MNEMO = 'SLDA'
OPCODE.88.FORMAT = 'RS'; OPCODE.88.MNEMO = 'SRL'
OPCODE.89.FORMAT = 'RS'; OPCODE.89.MNEMO = 'SLL'
OPCODE.80.FORMAT = 'S' ; OPCODE.80.MNEMO = 'SSM'
OPCODE.82.FORMAT = 'S' ; OPCODE.82.MNEMO = 'LPSW'
OPCODE.84.FORMAT = 'RSI' ; OPCODE.84.MNEMO = 'BRXH'
OPCODE.85.FORMAT = 'RSI' ; OPCODE.85.MNEMO = 'BRXLE'
OPCODE.91.FORMAT = 'SI2'; OPCODE.91.MNEMO = 'TM'
OPCODE.92.FORMAT = 'SI' ; OPCODE.92.MNEMO = 'MVI'
OPCODE.93.FORMAT = 'S' ; OPCODE.93.MNEMO = 'TS'
OPCODE.94.FORMAT = 'SI' ; OPCODE.94.MNEMO = 'NI'
OPCODE.95.FORMAT = 'SI' ; OPCODE.95.MNEMO = 'CLI'
OPCODE.96.FORMAT = 'SI' ; OPCODE.96.MNEMO = 'OI'
OPCODE.97.FORMAT = 'SI' ; OPCODE.97.MNEMO = 'XI'
OPCODE.EBC0.FORMAT = 'RSL' ; OPCODE.EBC0.MNEMO = 'TP'
OPCODE.EB0A.FORMAT = 'RSY1' ; OPCODE.EB0A.MNEMO = 'SRAG'
OPCODE.EB0B.FORMAT = 'RSY1' ; OPCODE.EB0B.MNEMO = 'SLAG'
OPCODE.EB0C.FORMAT = 'RSY1' ; OPCODE.EB0C.MNEMO = 'SRLG'
OPCODE.EB0D.FORMAT = 'RSY1' ; OPCODE.EB0D.MNEMO = 'SLLG'
OPCODE.EB0F.FORMAT = 'RSY1' ; OPCODE.EB0F.MNEMO = 'TRACG'
OPCODE.EB04.FORMAT = 'RSY1' ; OPCODE.EB04.MNEMO = 'LMG'
OPCODE.EB1C.FORMAT = 'RSY1' ; OPCODE.EB1C.MNEMO = 'RLLG'
OPCODE.EB1D.FORMAT = 'RSY1' ; OPCODE.EB1D.MNEMO = 'RLL'
OPCODE.EB14.FORMAT = 'RSY1' ; OPCODE.EB14.MNEMO = 'CSY'
OPCODE.EB2C.FORMAT = 'RSY2' ; OPCODE.EB2C.MNEMO = 'STCMH'
OPCODE.EB2D.FORMAT = 'RSY2' ; OPCODE.EB2D.MNEMO = 'STCMY'
OPCODE.EB2F.FORMAT = 'RSY1' ; OPCODE.EB2F.MNEMO = 'LCTLG'
OPCODE.EB20.FORMAT = 'RSY2' ; OPCODE.EB20.MNEMO = 'CLMH'
OPCODE.EB21.FORMAT = 'RSY2' ; OPCODE.EB21.MNEMO = 'CLMY'
OPCODE.EB24.FORMAT = 'RSY1' ; OPCODE.EB24.MNEMO = 'STMG'
OPCODE.EB25.FORMAT = 'RSY1' ; OPCODE.EB25.MNEMO = 'STCTG'
OPCODE.EB26.FORMAT = 'RSY1' ; OPCODE.EB26.MNEMO = 'STMH'
OPCODE.EB3E.FORMAT = 'RSY1' ; OPCODE.EB3E.MNEMO = 'CDSG'
OPCODE.EB30.FORMAT = 'RSY1' ; OPCODE.EB30.MNEMO = 'CSG'
OPCODE.EB31.FORMAT = 'RSY1' ; OPCODE.EB31.MNEMO = 'CDSY'
OPCODE.EB44.FORMAT = 'RSY1' ; OPCODE.EB44.MNEMO = 'BXHG'
OPCODE.EB45.FORMAT = 'RSY1' ; OPCODE.EB45.MNEMO = 'BXLEG'
OPCODE.EB8E.FORMAT = 'RSY1' ; OPCODE.EB8E.MNEMO = 'MVCLU'
OPCODE.EB8F.FORMAT = 'RSY1' ; OPCODE.EB8F.MNEMO = 'CLCLU'
OPCODE.EB80.FORMAT = 'RSY2' ; OPCODE.EB80.MNEMO = 'ICMH'
OPCODE.EB81.FORMAT = 'RSY2' ; OPCODE.EB81.MNEMO = 'ICMY'
OPCODE.EB9A.FORMAT = 'RSY1' ; OPCODE.EB9A.MNEMO = 'LAMY'
OPCODE.EB9B.FORMAT = 'RSY1' ; OPCODE.EB9B.MNEMO = 'STAMY'
OPCODE.EB90.FORMAT = 'RSY1' ; OPCODE.EB90.MNEMO = 'STMY'
OPCODE.EB96.FORMAT = 'RSY1' ; OPCODE.EB96.MNEMO = 'LMH'
OPCODE.EB98.FORMAT = 'RSY1' ; OPCODE.EB98.MNEMO = 'LMY'
OPCODE.EB51.FORMAT = 'SIYL' ; OPCODE.EB51.MNEMO = 'TMY'
OPCODE.EB52.FORMAT = 'SIYA' ; OPCODE.EB52.MNEMO = 'MVIY'
OPCODE.EB54.FORMAT = 'SIYL' ; OPCODE.EB54.MNEMO = 'NIY'
OPCODE.EB55.FORMAT = 'SIYA' ; OPCODE.EB55.MNEMO = 'CLIY'
OPCODE.EB56.FORMAT = 'SIYL' ; OPCODE.EB56.MNEMO = 'OIY'
OPCODE.EB57.FORMAT = 'SIYL' ; OPCODE.EB57.MNEMO = 'XIY'
OPCODE.EC44.FORMAT = 'RIER' ; OPCODE.EC44.MNEMO = 'BRXHG'
OPCODE.EC45.FORMAT = 'RIER' ; OPCODE.EC45.MNEMO = 'BRXLG'
OPCODE.ED0A.FORMAT = 'RXE' ; OPCODE.ED0A.MNEMO = 'AEB'
OPCODE.ED0B.FORMAT = 'RXE' ; OPCODE.ED0B.MNEMO = 'SEB'
OPCODE.ED1B.FORMAT = 'RXE' ; OPCODE.ED1B.MNEMO = 'SDB'
OPCODE.ED0C.FORMAT = 'RXE' ; OPCODE.ED0C.MNEMO = 'MDEB'
OPCODE.ED0D.FORMAT = 'RXE' ; OPCODE.ED0D.MNEMO = 'DEB'
OPCODE.ED0E.FORMAT = 'RXF' ; OPCODE.ED0E.MNEMO = 'MAEB'
OPCODE.ED0F.FORMAT = 'RXF' ; OPCODE.ED0F.MNEMO = 'MSEB'
OPCODE.ED04.FORMAT = 'RXE' ; OPCODE.ED04.MNEMO = 'LDEB'
OPCODE.ED05.FORMAT = 'RXE' ; OPCODE.ED05.MNEMO = 'LXDB'
OPCODE.ED06.FORMAT = 'RXE' ; OPCODE.ED06.MNEMO = 'LXEB'
OPCODE.ED07.FORMAT = 'RXE' ; OPCODE.ED07.MNEMO = 'MXDB'
OPCODE.ED08.FORMAT = 'RXE' ; OPCODE.ED08.MNEMO = 'KEB'
OPCODE.ED09.FORMAT = 'RXE' ; OPCODE.ED09.MNEMO = 'CEB'
OPCODE.ED0A.FORMAT = 'RXE' ; OPCODE.ED0A.MNEMO = 'AEB'
OPCODE.ED1A.FORMAT = 'RXE' ; OPCODE.ED1A.MNEMO = 'ADB'
OPCODE.ED1C.FORMAT = 'RXE' ; OPCODE.ED1C.MNEMO = 'MDB'
OPCODE.ED1D.FORMAT = 'RXE' ; OPCODE.ED1D.MNEMO = 'DDB'
OPCODE.ED1E.FORMAT = 'RXF' ; OPCODE.ED1E.MNEMO = 'MADB'
OPCODE.ED1F.FORMAT = 'RXF' ; OPCODE.ED1F.MNEMO = 'MSDB'
OPCODE.ED10.FORMAT = 'RXE' ; OPCODE.ED10.MNEMO = 'TCEB'
OPCODE.ED11.FORMAT = 'RXE' ; OPCODE.ED11.MNEMO = 'TCDB'
OPCODE.ED12.FORMAT = 'RXE' ; OPCODE.ED12.MNEMO = 'TCXB'
OPCODE.ED14.FORMAT = 'RXE' ; OPCODE.ED14.MNEMO = 'SQEB'
OPCODE.ED15.FORMAT = 'RXE' ; OPCODE.ED15.MNEMO = 'SQDB'
OPCODE.ED17.FORMAT = 'RXE' ; OPCODE.ED17.MNEMO = 'MEEB'
OPCODE.ED18.FORMAT = 'RXE' ; OPCODE.ED18.MNEMO = 'KDB'
OPCODE.ED19.FORMAT = 'RXE' ; OPCODE.ED19.MNEMO = 'CDB'
OPCODE.ED2E.FORMAT = 'RXF' ; OPCODE.ED2E.MNEMO = 'MAE'
OPCODE.ED2F.FORMAT = 'RXF' ; OPCODE.ED2F.MNEMO = 'MSE'
OPCODE.ED24.FORMAT = 'RXE' ; OPCODE.ED24.MNEMO = 'LDE'
OPCODE.ED25.FORMAT = 'RXE' ; OPCODE.ED25.MNEMO = 'LXD'
OPCODE.ED26.FORMAT = 'RXE' ; OPCODE.ED26.MNEMO = 'LXE'
OPCODE.ED3E.FORMAT = 'RXF' ; OPCODE.ED3E.MNEMO = 'MAD'
OPCODE.ED3F.FORMAT = 'RXF' ; OPCODE.ED3F.MNEMO = 'MSD'
OPCODE.ED34.FORMAT = 'RXE' ; OPCODE.ED34.MNEMO = 'SQE'
OPCODE.ED35.FORMAT = 'RXE' ; OPCODE.ED35.MNEMO = 'SQD'
OPCODE.ED37.FORMAT = 'RXE' ; OPCODE.ED37.MNEMO = 'MEE'
OPCODE.ED64.FORMAT = 'RXY' ; OPCODE.ED64.MNEMO = 'LEY'
OPCODE.ED65.FORMAT = 'RXY' ; OPCODE.ED65.MNEMO = 'LDY'
OPCODE.ED66.FORMAT = 'RXY' ; OPCODE.ED66.MNEMO = 'STEY'
OPCODE.ED67.FORMAT = 'RXY' ; OPCODE.ED67.MNEMO = 'STDY'
OPCODE.E30A.FORMAT = 'RXY' ; OPCODE.E30A.MNEMO = 'ALG'
OPCODE.E30B.FORMAT = 'RXY' ; OPCODE.E30B.MNEMO = 'SLG'
OPCODE.E30C.FORMAT = 'RXY' ; OPCODE.E30C.MNEMO = 'RXE'
OPCODE.E30D.FORMAT = 'RXY' ; OPCODE.E30D.MNEMO = 'DSG'
OPCODE.E30E.FORMAT = 'RXE' ; OPCODE.E30E.MNEMO = 'CVBG'
OPCODE.E30F.FORMAT = 'RXE' ; OPCODE.E30F.MNEMO = 'LRVG'
OPCODE.E303.FORMAT = 'RXY' ; OPCODE.E303.MNEMO = 'LRAG'
OPCODE.E304.FORMAT = 'RXE' ; OPCODE.E304.MNEMO = 'LG'
OPCODE.E306.FORMAT = 'RXY' ; OPCODE.E306.MNEMO = 'CVBY'
OPCODE.E308.FORMAT = 'RXE' ; OPCODE.E308.MNEMO = 'AG'
OPCODE.E309.FORMAT = 'RXY' ; OPCODE.E309.MNEMO = 'SG'
OPCODE.E31A.FORMAT = 'RXY' ; OPCODE.E31A.MNEMO = 'ALGF'
OPCODE.E31B.FORMAT = 'RXY' ; OPCODE.E31B.MNEMO = 'SLGF'
OPCODE.E30C.FORMAT = 'RXY' ; OPCODE.E30C.MNEMO = 'MSG'
OPCODE.E31C.FORMAT = 'RXY' ; OPCODE.E31C.MNEMO = 'MSGF'
OPCODE.E31D.FORMAT = 'RXY' ; OPCODE.E31D.MNEMO = 'DSGF'
OPCODE.E31E.FORMAT = 'RXY' ; OPCODE.E31E.MNEMO = 'LRV'
OPCODE.E31F.FORMAT = 'RXY' ; OPCODE.E31F.MNEMO = 'LRVH'
OPCODE.E313.FORMAT = 'RXY' ; OPCODE.E313.MNEMO = 'LRAY'
OPCODE.E314.FORMAT = 'RXY' ; OPCODE.E314.MNEMO = 'LGF'
OPCODE.E315.FORMAT = 'RXY' ; OPCODE.E315.MNEMO = 'LGH'
OPCODE.E316.FORMAT = 'RXY' ; OPCODE.E316.MNEMO = 'LLGF'
OPCODE.E317.FORMAT = 'RXY' ; OPCODE.E317.MNEMO = 'LLGT'
OPCODE.E318.FORMAT = 'RXY' ; OPCODE.E318.MNEMO = 'AGF'
OPCODE.E319.FORMAT = 'RXY' ; OPCODE.E319.MNEMO = 'SGF'
OPCODE.E32E.FORMAT = 'RXY' ; OPCODE.E32E.MNEMO = 'CVDG'
OPCODE.E32F.FORMAT = 'RXY' ; OPCODE.E32F.MNEMO = 'STRVG'
OPCODE.E320.FORMAT = 'RXY' ; OPCODE.E320.MNEMO = 'CG'
OPCODE.E321.FORMAT = 'RXY' ; OPCODE.E321.MNEMO = 'CLG'
OPCODE.E324.FORMAT = 'RXY' ; OPCODE.E324.MNEMO = 'STG'
OPCODE.E326.FORMAT = 'RXY' ; OPCODE.E326.MNEMO = 'CVDY'
OPCODE.E33E.FORMAT = 'RXY' ; OPCODE.E33E.MNEMO = 'STRV'
OPCODE.E33F.FORMAT = 'RXY' ; OPCODE.E33F.MNEMO = 'STRVH'
OPCODE.E330.FORMAT = 'RXY' ; OPCODE.E330.MNEMO = 'CGF'
OPCODE.E331.FORMAT = 'RXY' ; OPCODE.E331.MNEMO = 'CLGF'
OPCODE.E346.FORMAT = 'RXY' ; OPCODE.E346.MNEMO = 'BCTG'
OPCODE.E35A.FORMAT = 'RXY' ; OPCODE.E35A.MNEMO = 'AY'
OPCODE.E35B.FORMAT = 'RXY' ; OPCODE.E35B.MNEMO = 'SY'
OPCODE.E35E.FORMAT = 'RXY' ; OPCODE.E35E.MNEMO = 'ALY'
OPCODE.E35F.FORMAT = 'RXY' ; OPCODE.E35F.MNEMO = 'SLY'
OPCODE.E350.FORMAT = 'RXY' ; OPCODE.E350.MNEMO = 'STY'
OPCODE.E351.FORMAT = 'RXY' ; OPCODE.E351.MNEMO = 'MSY'
OPCODE.E354.FORMAT = 'RXY' ; OPCODE.E354.MNEMO = 'NY'
OPCODE.E355.FORMAT = 'RXY' ; OPCODE.E355.MNEMO = 'CLY'
OPCODE.E356.FORMAT = 'RXY' ; OPCODE.E356.MNEMO = 'OY'
OPCODE.E357.FORMAT = 'RXY' ; OPCODE.E357.MNEMO = 'XY'
OPCODE.E358.FORMAT = 'RXY' ; OPCODE.E358.MNEMO = 'LY'
OPCODE.E359.FORMAT = 'RXY' ; OPCODE.E359.MNEMO = 'CY'
OPCODE.E37A.FORMAT = 'RXY' ; OPCODE.E37A.MNEMO = 'AHY'
OPCODE.E37B.FORMAT = 'RXY' ; OPCODE.E37B.MNEMO = 'SHY'
OPCODE.E370.FORMAT = 'RXY' ; OPCODE.E370.MNEMO = 'STHY'
OPCODE.E371.FORMAT = 'RXY' ; OPCODE.E371.MNEMO = 'LAY'
OPCODE.E372.FORMAT = 'RXY' ; OPCODE.E372.MNEMO = 'STCY'
OPCODE.E373.FORMAT = 'RXY' ; OPCODE.E373.MNEMO = 'ICY'
OPCODE.E376.FORMAT = 'RXY' ; OPCODE.E376.MNEMO = 'LB'
OPCODE.E377.FORMAT = 'RXY' ; OPCODE.E377.MNEMO = 'LGB'
OPCODE.E378.FORMAT = 'RXY' ; OPCODE.E378.MNEMO = 'LHY'
OPCODE.E379.FORMAT = 'RXY' ; OPCODE.E379.MNEMO = 'CHY'
OPCODE.E38E.FORMAT = 'RXY' ; OPCODE.E38E.MNEMO = 'STPQ'
OPCODE.E38F.FORMAT = 'RXY' ; OPCODE.E38F.MNEMO = 'LPQ'
OPCODE.E380.FORMAT = 'RXY' ; OPCODE.E380.MNEMO = 'NG'
OPCODE.E381.FORMAT = 'RXY' ; OPCODE.E381.MNEMO = 'OG'
OPCODE.E382.FORMAT = 'RXY' ; OPCODE.E382.MNEMO = 'XG'
OPCODE.E386.FORMAT = 'RXY' ; OPCODE.E386.MNEMO = 'MLG'
OPCODE.E387.FORMAT = 'RXY' ; OPCODE.E387.MNEMO = 'DLG'
OPCODE.E388.FORMAT = 'RXY' ; OPCODE.E388.MNEMO = 'ALCG'
OPCODE.E389.FORMAT = 'RXY' ; OPCODE.E389.MNEMO = 'SLBG'
OPCODE.E390.FORMAT = 'RXY' ; OPCODE.E390.MNEMO = 'LLGC'
OPCODE.E391.FORMAT = 'RXY' ; OPCODE.E391.MNEMO = 'LLGH'
OPCODE.E396.FORMAT = 'RXY' ; OPCODE.E396.MNEMO = 'ML'
OPCODE.E397.FORMAT = 'RXY' ; OPCODE.E397.MNEMO = 'DL'
OPCODE.E398.FORMAT = 'RXY' ; OPCODE.E398.MNEMO = 'ALC'
OPCODE.E399.FORMAT = 'RXY' ; OPCODE.E399.MNEMO = 'SLB'
/*z9z10*/ OPCODE.B22B.FORMAT = 'RRF2' ; OPCODE.B22B.MNEMO = 'SSKE'
/*z9z10*/ OPCODE.B27C.FORMAT = 'S' ; OPCODE.B27C.MNEMO = 'STCKF'
/*z9z10*/ OPCODE.B2A6.FORMAT = 'RRF2' ; OPCODE.B2A6.MNEMO = 'CU21'
/*z9z10*/ OPCODE.B2A6.FORMAT = 'RRF2' ; OPCODE.B2A6.MNEMO = 'CUUTF'
/*z9z10*/ OPCODE.B2A7.FORMAT = 'RRF2' ; OPCODE.B2A7.MNEMO = 'CU12'
/*z9z10*/ OPCODE.B2A7.FORMAT = 'RRF2' ; OPCODE.B2A7.MNEMO = 'CUTFU'
/*z9z10*/ OPCODE.B2B0.FORMAT = 'S' ; OPCODE.B2B0.MNEMO = 'STFLE'
/*z9z10*/ OPCODE.B2B9.FORMAT = 'S' ; OPCODE.B2B9.MNEMO = 'SRNMT'
/*z9z10*/ OPCODE.B2BD.FORMAT = 'S' ; OPCODE.B2BD.MNEMO = 'LFAS'
/*z9z10*/ OPCODE.B338.FORMAT = 'RRF2' ; OPCODE.B338.MNEMO = 'MAYLR'
/*z9z10*/ OPCODE.B339.FORMAT = 'RRF1' ; OPCODE.B339.MNEMO = 'MYLR'
/*z9z10*/ OPCODE.B33A.FORMAT = 'RRF2' ; OPCODE.B33A.MNEMO = 'MAYR'
/*z9z10*/ OPCODE.B33B.FORMAT = 'RRF1' ; OPCODE.B33B.MNEMO = 'MYR'
/*z9z10*/ OPCODE.B33C.FORMAT = 'RRF2' ; OPCODE.B33C.MNEMO = 'MAYHR'
/*z9z10*/ OPCODE.B33D.FORMAT = 'RRF1' ; OPCODE.B33D.MNEMO = 'MYHR'
/*z9z10*/ OPCODE.B370.FORMAT = 'RRE2' ; OPCODE.B370.MNEMO = 'LPDFR'
/*z9z10*/ OPCODE.B371.FORMAT = 'RRE2' ; OPCODE.B371.MNEMO = 'LNDFR'
/*z9z10*/ OPCODE.B372.FORMAT = 'RRF1' ; OPCODE.B372.MNEMO = 'CPSDR'
/*z9z10*/ OPCODE.B373.FORMAT = 'RRE2' ; OPCODE.B373.MNEMO = 'LCDFR'
/*z9z10*/ OPCODE.B385.FORMAT = 'RRE1' ; OPCODE.B385.MNEMO = 'SFASR'
/*z9z10*/ OPCODE.B3C1.FORMAT = 'RRE2' ; OPCODE.B3C1.MNEMO = 'LDGR'
/*z9z10*/ OPCODE.B3CD.FORMAT = 'RRE2' ; OPCODE.B3CD.MNEMO = 'LGDR'
/*z9z10*/ OPCODE.B3D6.FORMAT = 'RRE2' ; OPCODE.B3D6.MNEMO = 'LTDTR'
/*z9z10*/ OPCODE.B3D7.FORMAT = 'RRF3' ; OPCODE.B3D7.MNEMO = 'FIDTR'
/*z9z10*/ OPCODE.B3D4.FORMAT = 'RRFM' ; OPCODE.B3D4.MNEMO = 'LDETR'
/*z9z10*/ OPCODE.B3D5.FORMAT = 'RRF3' ; OPCODE.B3D5.MNEMO = 'LEDTR'
/*z9z10*/ OPCODE.B3DD.FORMAT = 'RRF3' ; OPCODE.B3DD.MNEMO = 'LDXTR'
/*z9z10*/ OPCODE.B3D2.FORMAT = 'RRR' ; OPCODE.B3D2.MNEMO = 'ADTR'
/*z9z10*/ OPCODE.B3DA.FORMAT = 'RRR' ; OPCODE.B3DA.MNEMO = 'AXTR'
/*z9z10*/ OPCODE.B3D1.FORMAT = 'RRR' ; OPCODE.B3D1.MNEMO = 'DDTR'
/*z9z10*/ OPCODE.B3D9.FORMAT = 'RRR' ; OPCODE.B3D9.MNEMO = 'DXTR'
/*z9z10*/ OPCODE.B3D0.FORMAT = 'RRR' ; OPCODE.B3D0.MNEMO = 'MDTR'
/*z9z10*/ OPCODE.B3D8.FORMAT = 'RRR' ; OPCODE.B3D8.MNEMO = 'MXTR'
/*z9z10*/ OPCODE.B3D3.FORMAT = 'RRR' ; OPCODE.B3D3.MNEMO = 'SDTR'
/*z9z10*/ OPCODE.B3DB.FORMAT = 'RRR' ; OPCODE.B3DB.MNEMO = 'SXTR'
/*z9z10*/ OPCODE.B3DC.FORMAT = 'RRFM' ; OPCODE.B3DC.MNEMO = 'LXDTR'
/*z9z10*/ OPCODE.B3DE.FORMAT = 'RRE2' ; OPCODE.B3DE.MNEMO = 'LTXTR'
/*z9z10*/ OPCODE.B3DF.FORMAT = 'RRF3' ; OPCODE.B3DF.MNEMO = 'FIXTR'
/*z9z10*/ OPCODE.B3E0.FORMAT = 'RRE2' ; OPCODE.B3E0.MNEMO = 'KDTR'
/*z9z10*/ OPCODE.B3E1.FORMAT = 'RRF2' ; OPCODE.B3E1.MNEMO = 'CGDTR'
/*z9z10*/ OPCODE.B3E2.FORMAT = 'RRE2' ; OPCODE.B3E2.MNEMO = 'CUDTR'
/*z9z10*/ OPCODE.B3E3.FORMAT = 'RRF2' ; OPCODE.B3E3.MNEMO = 'CSDTR'
/*z9z10*/ OPCODE.B3E4.FORMAT = 'RRE2' ; OPCODE.B3E4.MNEMO = 'CDTR'
/*z9z10*/ OPCODE.B3E5.FORMAT = 'RRE2' ; OPCODE.B3E5.MNEMO = 'EEDTR'
/*z9z10*/ OPCODE.B3E7.FORMAT = 'RRE2' ; OPCODE.B3E7.MNEMO = 'ESDTR'
/*z9z10*/ OPCODE.B3E8.FORMAT = 'RRE2' ; OPCODE.B3E8.MNEMO = 'KXTR'
/*z9z10*/ OPCODE.B3E9.FORMAT = 'RRF2' ; OPCODE.B3E9.MNEMO = 'CGXTR'
/*z9z10*/ OPCODE.B3EA.FORMAT = 'RRE2' ; OPCODE.B3EA.MNEMO = 'CUXTR'
/*z9z10*/ OPCODE.B3EB.FORMAT = 'RRF2' ; OPCODE.B3EB.MNEMO = 'CSXTR'
/*z9z10*/ OPCODE.B3EC.FORMAT = 'RRE2' ; OPCODE.B3EC.MNEMO = 'CXTR'
/*z9z10*/ OPCODE.B3ED.FORMAT = 'RRE2' ; OPCODE.B3ED.MNEMO = 'EEXTR'
/*z9z10*/ OPCODE.B3EF.FORMAT = 'RRE2' ; OPCODE.B3EF.MNEMO = 'ESXTR'
/*z9z10*/ OPCODE.B3F1.FORMAT = 'RRE2' ; OPCODE.B3F1.MNEMO = 'CDGTR'
/*z9z10*/ OPCODE.B3F2.FORMAT = 'RRE2' ; OPCODE.B3F2.MNEMO = 'CDUTR'
/*z9z10*/ OPCODE.B3F3.FORMAT = 'RRE2' ; OPCODE.B3F3.MNEMO = 'CDSTR'
/*z9z10*/ OPCODE.B3F4.FORMAT = 'RRE2' ; OPCODE.B3F4.MNEMO = 'CEDTR'
/*z9z10*/ OPCODE.B3F5.FORMAT = 'RRF4' ; OPCODE.B3F5.MNEMO = 'QADTR'
/*z9z10*/ OPCODE.B3F6.FORMAT = 'RRF1' ; OPCODE.B3F6.MNEMO = 'IEDTR'
/*z9z10*/ OPCODE.B3F7.FORMAT = 'RRF4' ; OPCODE.B3F7.MNEMO = 'RRDTR'
/*z9z10*/ OPCODE.B3F9.FORMAT = 'RRE2' ; OPCODE.B3F9.MNEMO = 'CXGTR'
/*z9z10*/ OPCODE.B3FA.FORMAT = 'RRE2' ; OPCODE.B3FA.MNEMO = 'CXUTR'
/*z9z10*/ OPCODE.B3FB.FORMAT = 'RRE2' ; OPCODE.B3FB.MNEMO = 'CXSTR'
/*z9z10*/ OPCODE.B3FC.FORMAT = 'RRE2' ; OPCODE.B3FC.MNEMO = 'CEXTR'
/*z9z10*/ OPCODE.B3FD.FORMAT = 'RRF4' ; OPCODE.B3FD.MNEMO = 'QAXTR'
/*z9z10*/ OPCODE.B3FE.FORMAT = 'RRF1' ; OPCODE.B3FE.MNEMO = 'IEXTR'
/*z9z10*/ OPCODE.B3FF.FORMAT = 'RRF4' ; OPCODE.B3FF.MNEMO = 'RRXTR'
/*z9z10*/ OPCODE.B906.FORMAT = 'RRE2' ; OPCODE.B906.MNEMO = 'LGBR'
/*z9z10*/ OPCODE.B907.FORMAT = 'RRE2' ; OPCODE.B907.MNEMO = 'LGHR'
/*z9z10*/ OPCODE.B926.FORMAT = 'RRE2' ; OPCODE.B926.MNEMO = 'LBR'
/*z9z10*/ OPCODE.B927.FORMAT = 'RRE2' ; OPCODE.B927.MNEMO = 'LHR'
/*z9z10*/ OPCODE.B960.FORMAT = 'RRFM' ; OPCODE.B960.MNEMO = 'CGRT'
/*z9z10*/ OPCODE.B961.FORMAT = 'RRFM' ; OPCODE.B961.MNEMO = 'CLGRT'
/*z9z10*/ OPCODE.B972.FORMAT = 'RRFM' ; OPCODE.B972.MNEMO = 'CRT'
/*z9z10*/ OPCODE.B973.FORMAT = 'RRFM' ; OPCODE.B973.MNEMO = 'CLRT'
/*z9z10*/ OPCODE.B983.FORMAT = 'RRE2' ; OPCODE.B983.MNEMO = 'FLOGR'
/*z9z10*/ OPCODE.B984.FORMAT = 'RRE2' ; OPCODE.B984.MNEMO = 'LLGCR'
/*z9z10*/ OPCODE.B985.FORMAT = 'RRE2' ; OPCODE.B985.MNEMO = 'LLGHR'
/*z9z10*/ OPCODE.B990.FORMAT = 'RRFM' ; OPCODE.B990.MNEMO = 'TRTT'
/*z9z10*/ OPCODE.B991.FORMAT = 'RRFM' ; OPCODE.B991.MNEMO = 'TRTO'
/*z9z10*/ OPCODE.B992.FORMAT = 'RRFM' ; OPCODE.B992.MNEMO = 'TROT'
/*z9z10*/ OPCODE.B993.FORMAT = 'RRFM' ; OPCODE.B993.MNEMO = 'TROO'
/*z9z10*/ OPCODE.B9BF.FORMAT = 'RRFM' ; OPCODE.B9BF.MNEMO = 'TRTE'
/*z9z10*/ OPCODE.B9BD.FORMAT = 'RRFM' ; OPCODE.B9BD.MNEMO = 'TRTRE'
/*z9z10*/ OPCODE.D0.FORMAT = 'SS' ; OPCODE.D0.MNEMO = 'TRTR'
/*z9z10*/ OPCODE.B994.FORMAT = 'RRE2' ; OPCODE.B994.MNEMO = 'LLCR'
/*z9z10*/ OPCODE.B995.FORMAT = 'RRE2' ; OPCODE.B995.MNEMO = 'LLHR'
/*z9z10*/ OPCODE.B9A2.FORMAT = 'RRE1' ; OPCODE.B9A2.MNEMO = 'PTF'
/*z9z10*/ OPCODE.B99E.FORMAT = 'RRE2' ; OPCODE.B99E.MNEMO = 'PTI'
/*z9z10*/ OPCODE.0104.FORMAT = 'E' ;    OPCODE.0104.MNEMO = 'PTFF'
/*z9z10*/ OPCODE.B9AA.FORMAT = 'RRF4' ; OPCODE.B9AA.MNEMO = 'LPTEA'
/*z9z10*/ OPCODE.B9AF.FORMAT = 'RRE2' ; OPCODE.B9AF.MNEMO = 'PFMF'
/*z9z10*/ OPCODE.B9B0.FORMAT = 'RRF2' ; OPCODE.B9B0.MNEMO = 'CU14'
/*z9z10*/ OPCODE.B9B1.FORMAT = 'RRF2' ; OPCODE.B9B1.MNEMO = 'CU24'
/*z9z10*/ OPCODE.B9B2.FORMAT = 'RRE2' ; OPCODE.B9B2.MNEMO = 'CU41'
/*z9z10*/ OPCODE.B9B3.FORMAT = 'RRE2' ; OPCODE.B9B3.MNEMO = 'CU42'
/*z9z10*/ OPCODE.C01.FORMAT = 'RIL1' ; OPCODE.C01.MNEMO = 'LGFI'
/*z9z10*/ OPCODE.C05.FORMAT = 'RILR' ; OPCODE.C05.MNEMO = 'BRASL'
/*z9z10*/ OPCODE.C06.FORMAT = 'RIL1' ; OPCODE.C06.MNEMO = 'XIHF'
/*z9z10*/ OPCODE.C07.FORMAT = 'RIL1' ; OPCODE.C07.MNEMO = 'XILF'
/*z9z10*/ OPCODE.C08.FORMAT = 'RIL1' ; OPCODE.C08.MNEMO = 'IIHF'
/*z9z10*/ OPCODE.C09.FORMAT = 'RIL1' ; OPCODE.C09.MNEMO = 'IILF'
/*z9z10*/ OPCODE.C0A.FORMAT = 'RIL1' ; OPCODE.C0A.MNEMO = 'NIHF'
/*z9z10*/ OPCODE.C0B.FORMAT = 'RIL1' ; OPCODE.C0B.MNEMO = 'NILF'
/*z9z10*/ OPCODE.C0C.FORMAT = 'RIL1' ; OPCODE.C0C.MNEMO = 'OIHF'
/*z9z10*/ OPCODE.C0D.FORMAT = 'RIL1' ; OPCODE.C0D.MNEMO = 'OILF'
/*z9z10*/ OPCODE.C0E.FORMAT = 'RIL1' ; OPCODE.C0E.MNEMO = 'LLIHF'
/*z9z10*/ OPCODE.C0F.FORMAT = 'RIL1' ; OPCODE.C0F.MNEMO = 'LLILF'
/*z9z10*/ OPCODE.C29.FORMAT = 'RIL1' ; OPCODE.C29.MNEMO = 'AFI'
/*z9z10*/ OPCODE.C2B.FORMAT = 'RIL1' ; OPCODE.C2B.MNEMO = 'ALFI'
/*z9z10*/ OPCODE.C2D.FORMAT = 'RIL1' ; OPCODE.C2D.MNEMO = 'CFI'
/*z9z10*/ OPCODE.C21.FORMAT = 'RIL1' ; OPCODE.C21.MNEMO = 'MSFI'
/*z9z10*/ OPCODE.C20.FORMAT = 'RIL1' ; OPCODE.C20.MNEMO = 'MSGFI'
/*z9z10*/ OPCODE.C42.FORMAT = 'RILR' ; OPCODE.C42.MNEMO = 'LLHRL'
/*z9z10*/ OPCODE.C44.FORMAT = 'RILR' ; OPCODE.C44.MNEMO = 'LGHRL'
/*z9z10*/ OPCODE.C45.FORMAT = 'RILR' ; OPCODE.C45.MNEMO = 'LHRL'
/*z9z10*/ OPCODE.C46.FORMAT = 'RILR' ; OPCODE.C46.MNEMO = 'LLGHRL'
/*z9z10*/ OPCODE.C47.FORMAT = 'RILR' ; OPCODE.C47.MNEMO = 'STHRL'
/*z9z10*/ OPCODE.C48.FORMAT = 'RILR' ; OPCODE.C48.MNEMO = 'LGRL'
/*z9z10*/ OPCODE.C4B.FORMAT = 'RILR' ; OPCODE.C4B.MNEMO = 'STGRL'
/*z9z10*/ OPCODE.C4C.FORMAT = 'RILR' ; OPCODE.C4C.MNEMO = 'LGFRL'
/*z9z10*/ OPCODE.C4D.FORMAT = 'RILR' ; OPCODE.C4D.MNEMO = 'LRL'
/*z9z10*/ OPCODE.C4E.FORMAT = 'RILR' ; OPCODE.C4E.MNEMO = 'LLGFRL'
/*z9z10*/ OPCODE.C4F.FORMAT = 'RILR' ; OPCODE.C4F.MNEMO = 'STRL'
/*z9z10*/ OPCODE.C60.FORMAT = 'RILR' ; OPCODE.C60.MNEMO = 'EXRL'
/*z9z10*/ OPCODE.C62.FORMAT = 'RILR' ; OPCODE.C62.MNEMO = 'PFDRL'
/*z9z10*/ OPCODE.C64.FORMAT = 'RILR' ; OPCODE.C64.MNEMO = 'CGHRL'
/*z9z10*/ OPCODE.C65.FORMAT = 'RILR' ; OPCODE.C65.MNEMO = 'CHRL'
/*z9z10*/ OPCODE.C66.FORMAT = 'RILR' ; OPCODE.C66.MNEMO = 'CLGHRL'
/*z9z10*/ OPCODE.C67.FORMAT = 'RILR' ; OPCODE.C67.MNEMO = 'CLHRL'
/*z9z10*/ OPCODE.C68.FORMAT = 'RIL2' ; OPCODE.C68.MNEMO = 'CGRL'
/*z9z10*/ OPCODE.C6A.FORMAT = 'RIL2' ; OPCODE.C6A.MNEMO = 'CLGRL'
/*z9z10*/ OPCODE.C6C.FORMAT = 'RIL2' ; OPCODE.C6C.MNEMO = 'CGFRL'
/*z9z10*/ OPCODE.C6D.FORMAT = 'RIL2' ; OPCODE.C6D.MNEMO = 'CRL'
/*z9z10*/ OPCODE.C6E.FORMAT = 'RILR' ; OPCODE.C6E.MNEMO = 'CLGFRL'
/*z9z10*/ OPCODE.C6F.FORMAT = 'RILR' ; OPCODE.C6F.MNEMO = 'CLRL'
/*z9z10*/ OPCODE.C800.FORMAT = 'SSF' ; OPCODE.C800.MNEMO = 'MVCOS'
/*z9z10*/ OPCODE.C801.FORMAT = 'SSF' ; OPCODE.C801.MNEMO = 'ECTG'
/*z9z10*/ OPCODE.C802.FORMAT = 'SSF' ; OPCODE.C802.MNEMO = 'CSST'
/*z9z10*/ OPCODE.E302.FORMAT = 'RXY' ; OPCODE.E302.MNEMO = 'LTG'
/*z9z10*/ OPCODE.E312.FORMAT = 'RXY' ; OPCODE.E312.MNEMO = 'LT'
/*z9z10*/ OPCODE.E394.FORMAT = 'RXY' ; OPCODE.E394.MNEMO = 'LLC'
/*z9z10*/ OPCODE.E395.FORMAT = 'RXY' ; OPCODE.E395.MNEMO = 'LLH'
/*z9z10*/ OPCODE.E332.FORMAT = 'RXY' ; OPCODE.E332.MNEMO = 'LTGF'
/*z9z10*/ OPCODE.E334.FORMAT = 'RXY' ; OPCODE.E334.MNEMO = 'CGH'
/*z9z10*/ OPCODE.E336.FORMAT = 'RXY' ; OPCODE.E336.MNEMO = 'PFD'
/*z9z10*/ OPCODE.E35C.FORMAT = 'RXY' ; OPCODE.E35C.MNEMO = 'MFY'
/*z9z10*/ OPCODE.E375.FORMAT = 'RXY' ; OPCODE.E375.MNEMO = 'LAEY'
/*z9z10*/ OPCODE.E37C.FORMAT = 'RXY' ; OPCODE.E37C.MNEMO = 'MHY'
/*z9z10*/ OPCODE.E544.FORMAT = 'SIL' ; OPCODE.E544.MNEMO = 'MVHHI'
/*z9z10*/ OPCODE.E548.FORMAT = 'SIL' ; OPCODE.E548.MNEMO = 'MVGHI'
/*z9z10*/ OPCODE.E54C.FORMAT = 'SIL' ; OPCODE.E54C.MNEMO = 'MVHI'
/*z9z10*/ OPCODE.E554.FORMAT = 'SIL' ; OPCODE.E554.MNEMO = 'CHHSI'
/*z9z10*/ OPCODE.E555.FORMAT = 'SIL' ; OPCODE.E555.MNEMO = 'CLHHSI'
/*z9z10*/ OPCODE.E558.FORMAT = 'SIL' ; OPCODE.E558.MNEMO = 'CGHSI'
/*z9z10*/ OPCODE.E559.FORMAT = 'SIL' ; OPCODE.E559.MNEMO = 'CLGHSI'
/*z9z10*/ OPCODE.E55C.FORMAT = 'SIL' ; OPCODE.E55C.MNEMO = 'CHSI'
/*z9z10*/ OPCODE.E55D.FORMAT = 'SIL' ; OPCODE.E55D.MNEMO = 'CLFHSI'
/*z9z10*/ OPCODE.EB4C.FORMAT = 'RSY1' ; OPCODE.EB4C.MNEMO = 'ECAG'
/*z9z10*/ OPCODE.EB6A.FORMAT = 'SIYA' ; OPCODE.EB6A.MNEMO = 'ASI'
/*z9z10*/ OPCODE.EB6E.FORMAT = 'SIYA' ; OPCODE.EB6E.MNEMO = 'ALSI'
/*z9z10*/ OPCODE.EB7A.FORMAT = 'SIYA' ; OPCODE.EB7A.MNEMO = 'AGSI'
/*z9z10*/ OPCODE.EB7E.FORMAT = 'SIYA' ; OPCODE.EB7E.MNEMO = 'ALGSI'
/*z9z10*/ OPCODE.EC54.FORMAT = 'RIE5' ; OPCODE.EC54.MNEMO = 'RNSBG'
/*z9z10*/ OPCODE.EC55.FORMAT = 'RIE5' ; OPCODE.EC55.MNEMO = 'RISBG'
/*z9z10*/ OPCODE.EC56.FORMAT = 'RIE5' ; OPCODE.EC56.MNEMO = 'ROSBG'
/*z9z10*/ OPCODE.EC57.FORMAT = 'RIE5' ; OPCODE.EC57.MNEMO = 'RXSBG'
/*z9z10*/ OPCODE.EC64.FORMAT = 'RIET' ; OPCODE.EC64.MNEMO = 'CGRJ'
/*z9z10*/ OPCODE.EC65.FORMAT = 'RIET' ; OPCODE.EC65.MNEMO = 'CLGRJ'
/*z9z10*/ OPCODE.EC70.FORMAT = 'RIE2' ; OPCODE.EC70.MNEMO = 'CGIT'
/*z9z10*/ OPCODE.EC71.FORMAT = 'RIE2' ; OPCODE.EC71.MNEMO = 'CLGIT'
/*z9z10*/ OPCODE.EC72.FORMAT = 'RIE2' ; OPCODE.EC72.MNEMO = 'CIT'
/*z9z10*/ OPCODE.EC73.FORMAT = 'RIE2' ; OPCODE.EC73.MNEMO = 'CLFIT'
/*z9z10*/ OPCODE.EC76.FORMAT = 'RIET' ; OPCODE.EC76.MNEMO = 'CRJ'
/*z9z10*/ OPCODE.EC77.FORMAT = 'RIET' ; OPCODE.EC77.MNEMO = 'CLRJ'
/*z9z10*/ OPCODE.EC7C.FORMAT = 'RIET' ; OPCODE.EC7C.MNEMO = 'CGIJ'
/*z9z10*/ OPCODE.EC7D.FORMAT = 'RIET' ; OPCODE.EC7D.MNEMO = 'CLGIJ'
/*z9z10*/ OPCODE.EC7E.FORMAT = 'RIET' ; OPCODE.EC7E.MNEMO = 'CIJ'
/*z9z10*/ OPCODE.EC7F.FORMAT = 'RIET' ; OPCODE.EC7F.MNEMO = 'CLIJ'
/*z9z10*/ OPCODE.ECE4.FORMAT = 'RRS' ; OPCODE.ECE4.MNEMO = 'CGRB'
/*z9z10*/ OPCODE.ECE5.FORMAT = 'RRS' ; OPCODE.ECE5.MNEMO = 'CLGRB'
/*z9z10*/ OPCODE.ECF6.FORMAT = 'RRS' ; OPCODE.ECF6.MNEMO = 'CRB'
/*z9z10*/ OPCODE.ECF7.FORMAT = 'RRS' ; OPCODE.ECF7.MNEMO = 'CLRB'
/*z9z10*/ OPCODE.ECFC.FORMAT = 'RIS' ; OPCODE.ECFC.MNEMO = 'CGIB'
/*z9z10*/ OPCODE.ECFD.FORMAT = 'RIS' ; OPCODE.ECFD.MNEMO = 'CLGIB'
/*z9z10*/ OPCODE.ECFE.FORMAT = 'RIS' ; OPCODE.ECFE.MNEMO = 'CIB'
/*z9z10*/ OPCODE.ECFF.FORMAT = 'RIS' ; OPCODE.ECFF.MNEMO = 'CLIB'
/*z9z10*/ OPCODE.ED38.FORMAT = 'RXF' ; OPCODE.ED38.MNEMO = 'MAYL'
/*z9z10*/ OPCODE.ED39.FORMAT = 'RXF' ; OPCODE.ED39.MNEMO = 'MYL'
/*z9z10*/ OPCODE.ED3A.FORMAT = 'RXF' ; OPCODE.ED3A.MNEMO = 'MAY'
/*z9z10*/ OPCODE.ED3B.FORMAT = 'RXF' ; OPCODE.ED3B.MNEMO = 'MY'
/*z9z10*/ OPCODE.ED3C.FORMAT = 'RXF' ; OPCODE.ED3C.MNEMO = 'MAYH'
/*z9z10*/ OPCODE.ED3D.FORMAT = 'RXF' ; OPCODE.ED3D.MNEMO = 'MYH'
/*z9z10*/ OPCODE.ED40.FORMAT = 'RXF' ; OPCODE.ED40.MNEMO = 'SLDT'
/*z9z10*/ OPCODE.ED41.FORMAT = 'RXF' ; OPCODE.ED41.MNEMO = 'SRDT'
/*z9z10*/ OPCODE.ED48.FORMAT = 'RXF' ; OPCODE.ED48.MNEMO = 'SLXT'
/*z9z10*/ OPCODE.ED49.FORMAT = 'RXF' ; OPCODE.ED49.MNEMO = 'SRXT'
/*z9z10*/ OPCODE.ED50.FORMAT = 'RXE' ; OPCODE.ED50.MNEMO = 'TDCET'
/*z9z10*/ OPCODE.ED51.FORMAT = 'RXE' ; OPCODE.ED51.MNEMO = 'TDGET'
/*z9z10*/ OPCODE.ED54.FORMAT = 'RXE' ; OPCODE.ED54.MNEMO = 'TDCDT'
/*z9z10*/ OPCODE.ED55.FORMAT = 'RXE' ; OPCODE.ED55.MNEMO = 'TDGDT'
/*z9z10*/ OPCODE.ED58.FORMAT = 'RXE' ; OPCODE.ED58.MNEMO = 'TDCXT'
/*z9z10*/ OPCODE.ED59.FORMAT = 'RXE' ; OPCODE.ED59.MNEMO = 'TDGXT'
/*z9z10*/ OPCODE.010A.FORMAT = 'E' ; OPCODE.010A.MNEMO = 'PFPO'
/* Syntax:   Byte             < -- Halfbyte -- >
                 Format  #hw  l(oc) #operands.#len lO1 lO2 lO3 lO4 lO5 lO6
              of.E  .#hw= 1     2      0
              of.I  .#hw= 1     1      1   2
              of.RR .#hw= 1     1      2   1   1
              of.RRE2.#hw= 2    2      2   1   1
              of.RRF2.#hw= 2    2      3   1   1    1
              of.RX .#hw= 2     2      4   1   1    1    3
              of.RXB.#hw= 2     3      4   1   1    1    3
              of.RXE.#hw= 3     1      5   1   1    1    3    2
              of.RXF.#hw= 3     1      6   1   1    1    3    1  2
              of.RXY.#hw= 3     1      6   1   1    1    3    1  2
              of.RS1 .#hw= 2    1      4   1   1    1    3
              of.RSY1.#hw= 3    1      6   1   1    1    3    2  2
              of.RSL.#hw= 3     1      4   1   1    3    2
              of.RSI.#hw= 2     1      3   1   1    4
              of.RI .#hw= 2     1      3   1   1    4
              of.RIE.#hw= 3     1      4   1   1    4    2
              of.SI .#hw= 2     1      3   2   1    3
              of.SIYL.#hw= 3    1      3   2   1    3
              of.S  .#hw= 2     2      2   1   3
              of.SS .#hw= 3     1      5   2   1    3    1    2
              of.SSA.#hw= 3     1      6   1   1    1    3    1  2
              of.SSE.#hw= 3     2      4   1   3    1    3         */

of.E.#hw = 1
of.E.#operands.0 = 0
of.E.lenOpCode = 4
of.E.layout =    '#'

of.II.#hw = 1
of.II.#operands.0 = 1
of.II.#operands.#len.1 = 2
of.II.lenOpCode = 2
of.II.layout =   '#'
of.II.sequence = '1'         /* display sequence            */

of.RI1.#hw = 2
of.RI1.#operands.0 = 2
of.RI1.#operands.#len.1 = 1
of.RI1.#operands.#len.2 = 4
of.RI1.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */
of.RI1.lenOpCode = 2
of.RI1.layout  =   'R#,#'  /* R1,I2 */
of.RI1.sequence = '12'          /* display sequence            */

of.RI2.#hw = 2
of.RI2.#operands.0 = 2
of.RI2.#operands.#len.1 = 1
of.RI2.#operands.#len.2 = 2
of.RI2.#operands.#ofs.2 = 4   /* Offset of sub-Op from Start */
of.RI2.lenOpCode = 2
of.RI2.layout  = 'R#,B''#'''     /* R1,M2 */
of.RI2.sequence = '12'          /* display sequence            */

of.RI4.#hw = 2
of.RI4.#operands.0 = 2
of.RI4.#operands.#len.1 = 1
of.RI4.#operands.#len.2 = 4
of.RI4.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */
of.RI4.lenOpCode = 2
of.RI4.layout  = 'R#,*+#'      /* R1,I2 */
of.RI4.sequence = '12'          /* display sequence            */

of.RI3.#hw = 2
of.RI3.#operands.0 = 1
of.RI3.#operands.#len.1 = 4
of.RI3.lenOpCode = 4
of.RI3.layout  = '*#'          /* I1  */
of.RI3.sequence = '1'          /* display sequence            */

of.RIE2.#hw = 3
of.RIE2.#operands.0 = 3
of.RIE2.#operands.#len.1 = 1
of.RIE2.#operands.#ofs.2 = 2
of.RIE2.#operands.#len.2 = 4
of.RIE2.#operands.#len.3 = 1
of.RIE2.lenOpCode = 2
of.RIE2.layout  = 'R#,#,B''#'''   /* R1,I2,M3    */
of.RIE2.sequence = '123'         /* display sequence            */

of.RIE3.#hw = 3
of.RIE3.#operands.0 = 3
of.RIE3.#operands.#len.1 = 1
of.RIE3.#operands.#len.2 = 1
of.RIE3.#operands.#len.3 = 4
of.RIE3.lenOpCode = 2
of.RIE3.layout  = 'R#,R#,#'      /* R1,R3,I2    */
of.RIE3.sequence = '123'         /* display sequence            */

of.RIER.#hw = 3
of.RIER.#operands.0 = 3
of.RIER.#operands.#len.1 = 1
of.RIER.#operands.#len.2 = 1
of.RIER.#operands.#len.3 = 4
of.RIER.lenOpCode = 2
of.RIER.layout  = 'R#,R#,*+#'      /* R1,R3,I2    */
of.RIER.sequence = '123'         /* display sequence            */

of.RIE4.#hw = 3
of.RIE4.#operands.0 = 4
of.RIE4.#operands.#len.1 = 1
of.RIE4.#operands.#len.2 = 1
of.RIE4.#operands.#len.3 = 4
of.RIE4.#operands.#len.4 = 1
of.RIE4.lenOpCode = 2
of.RIE4.layout  = 'R#,R#,#,#'    /* R1,R2,M3,I4 */
of.RIE4.sequence = '1243'        /* display sequence            */

of.RIET.#hw = 3
of.RIET.#operands.0 = 4
of.RIET.#operands.#len.1 = 1
of.RIET.#operands.#len.2 = 1
of.RIET.#operands.#len.3 = 4
of.RIET.#operands.#len.4 = 1
of.RIET.lenOpCode = 2
of.RIET.layout  = 'R#,#,B''#'',*+#'    /* R1,R2,M3,I4 */
of.RIET.sequence = '1423'        /* display sequence            */

of.RIE5.#hw = 3
of.RIE5.#operands.0 = 5
of.RIE5.#operands.#len.1 = 1
of.RIE5.#operands.#len.2 = 1
of.RIE5.#operands.#len.3 = 2
of.RIE5.#operands.#len.4 = 2
of.RIE5.#operands.#len.5 = 2
of.RIE5.lenOpCode = 2
of.RIE5.layout  = 'R#,R#,#,#,#'     /* R1,R2,I3,I4,I5 */
of.RIE5.sequence = '12345'         /* display sequence            */

of.RIL2.#hw = 3                 /* Register Immediate Address    */
of.RIL2.#operands.0 = 2
of.RIL2.#operands.#len.1 = 1
of.RIL2.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */
of.RIL2.#operands.#len.2 = 8
of.RIL2.lenOpCode = 2
of.RIL2.layout = 'B''#'',*+#'  /* M1,I2 */
of.RIL2.sequence = '12'        /* display sequence            */

of.ril1.#hw = 3                /* Register Immediate Arithmetic */
of.ril1.#operands.0 = 2
of.ril1.#operands.#len.1 = 1
of.rIl1.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */
of.ril1.#operands.#len.2 = 8
of.ril1.lenOpCode = 2
of.ril1.layout = 'R#,#'        /* R1,I2 */
of.ril1.sequence = '12'        /* display sequence            */

of.RILR.#hw = 3                /* Register Immediate Relocatable*/
of.RILR.#operands.0 = 2
of.RILR.#operands.#len.1 = 1
of.RILR.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */
of.RILR.#operands.#len.2 = 8
of.RILR.lenOpCode = 2
of.RILR.layout = 'R#,*+#'      /* R1,I2 */
of.RILR.sequence = '12'        /* display sequence            */


of.RIL2.#hw = 3
of.RIL2.#operands.0 = 2
of.RIL2.#operands.#len.1 = 1
of.RIL2.#operands.#ofs.2 = 3   /* Offset of sub-Op from Start */
of.RIL2.#operands.#len.2 = 8
of.RIL2.lenOpCode = 2
of.RIL2.layout = 'R#,*+#'        /* R1,I2 */
of.RIL2.sequence = '12'        /* display sequence            */

of.RIL2m.#hw = 3               /* Register Immediate Address  Mask*/
of.RIL2m.#operands.0 = 2
of.RIL2m.#operands.#len.1 = 1
of.RIL2m.#operands.#len.2 = 8
of.RIL2m.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */
of.RIL2m.lenOpCode = 2
of.RIL2m.layout = 'B''#'',*+#'  /* M1,I2 */
of.RIL2m.sequence = '12'        /* display sequence            */

of.RRM.#hw = 1
of.RRM.#operands.0 = 1
of.RRM.#operands.#len.1 = 1
of.RRM.lenOpCode = 3
of.RRM.layout  = 'R#'          /* R1 */
of.RRM.sequence = '1'          /* display sequence            */

of.RR0.#hw = 1
of.RR0.#operands.0 = 1
of.RR0.#operands.#len.1 = 1
of.RR0.lenOpCode = 2
of.RR0.layout  = 'R#'          /* R1 */
of.RR0.sequence = '1'          /* display sequence            */

of.RR.#hw = 1
of.RR.#operands.0 = 2
of.RR.#operands.#len.1 = 1
of.RR.#operands.#len.2 = 2
of.RR.lenOpCode = 2
of.RR.layout   = 'R#,R#'         /* R1,R2 */
of.RR.sequence = '12'           /* display sequence            */

of.BR.#hw = 1
of.BR.#operands.0 = 2
of.BR.#operands.#len.1 = 1
of.BR.#operands.#len.2 = 2
of.BR.lenOpCode = 2
of.BR.layout   = '#,R#'         /* R1,R2 */
of.BR.sequence = '12'           /* display sequence            */

of.RRB.#hw = 1                 /* BCR Opcodes */
of.RRB.#operands.0 = 1
of.RRB.#operands.#len.1 = 1
of.RRB.lenOpCode = 3
of.RRB.layout  = 'R#'          /* R1 */
of.RRB.sequence = '1'          /* display sequence            */

of.RRE1.#hw = 2
of.RRE1.#operands.0 = 1
of.RRE1.#operands.#ofs.1 = 2  /* Offset of sub-Op from Start */
of.RRE1.#operands.#len.1 = 1
of.RRE1.lenOpCode = 4
of.RRE1.Layout = 'R#'          /* R1, R2                      */
of.RRE1.sequence = '1'         /* display sequence            */

of.RRE2.#hw = 2
of.RRE2.#operands.0 = 2
of.RRE2.#operands.#ofs.1 = 2  /* Offset of sub-Op from Start */
of.RRE2.#operands.#len.1 = 1
of.RRE2.#operands.#len.2 = 1
of.RRE2.lenOpCode = 4
of.RRE2.Layout = 'R#,R#'        /* R1, R2                      */
of.RRE2.sequence = '12'         /* display sequence            */

of.RRR.#hw = 2
of.RRR.#operands.0 = 3
/* of.RRR.#operands.#ofs.1 = 2   Offset of sub-Op from Start */
of.RRR.#operands.#len.1 = 1
of.RRR.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */
of.RRR.#operands.#len.2 = 1
of.RRR.#operands.#len.3 = 1
of.RRR.lenOpCode = 4
of.RRR.Layout = 'R#,R#,R#'         /* R1, R2                      */
of.RRR.sequence = '231'          /* display sequence            */

of.RRF1.#hw = 2
of.RRF1.#operands.0 = 3
of.RRF1.#operands.#len.1 = 1
of.RRF1.#operands.#len.2 = 2
of.RRF1.#operands.#ofs.2 = 1   /* Offset of sub-Op from Start */
of.RRF1.#operands.#len.3 = 3
of.RRF1.lenOpCode = 4
of.RRF1.Layout = 'R#,R#,R#'      /* R1,R3,R2                    */
of.RRF1.sequence = '123'         /* display sequence            */

of.RRF2.#hw = 2
of.RRF2.#operands.0 = 3
of.RRF2.#operands.#len.1 = 1
of.RRF2.#operands.#len.2 = 1
of.RRF2.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */
of.RRF2.#operands.#len.3 = 1
of.RRF2.lenOpCode = 4
of.RRF2.Layout = 'R#,B''#'',R#'       /* R1,M3,R2                    */
of.RRF2.sequence = '231'         /* display sequence            */


of.RRF3.#hw = 2
of.RRF3.#operands.0 = 4
of.RRF3.#operands.#len.1 = 1
of.RRF3.#operands.#len.2 = 1
of.RRF3.#operands.#len.3 = 1
of.RRF3.#operands.#len.4 = 1
of.RRF3.lenOpCode = 4
of.RRF3.Layout = 'R#,#,R#,#'       /* R1,M3,R2,R4                 */
of.RRF3.sequence = '3142'        /* display sequence            */

of.RRFM.#hw = 2
of.RRFM.#operands.0 = 3
of.RRFM.#operands.#len.1 = 1
of.RRFM.#operands.#ofs.1 = 2   /* Offset of sub-Op from Start */
of.RRFM.#operands.#len.2 = 1
of.RRFM.#operands.#len.3 = 1
of.RRFM.lenOpCode = 4
of.RRFM.Layout = 'R#,R#,B''#'''    /* R1,R2,M4                    */
of.RRFM.sequence = '312'           /* display sequence            */

of.RRF4.#hw = 2
of.RRF4.#operands.0 = 4
of.RRF4.#operands.#len.1 = 1
of.RRF4.#operands.#len.2 = 1
of.RRF4.#operands.#len.3 = 1
of.RRF4.#operands.#len.4 = 1
of.RRF4.lenOpCode = 4
of.RRF4.Layout = 'R#,R#,R#,B''#'''  /* R1,R3,R2,M4              */
of.RRF4.sequence = '3142'           /* display sequence         */



of.RS.#hw = 2
of.RS.#operands.0 = 3
of.RS.#operands.#len.1 = 1
of.RS.#operands.#len.2 = 1
of.RS.#operands.#ofs.2 = 2
of.RS.#operands.#len.3 = 3
of.RS.Layout = 'R#,#(R#)'      /* R1,D2(B2)                   */
of.RS.sequence = '132'         /* display sequence            */
of.RS.lenOpCode = 2

of.RS1.#hw = 2
of.RS1.#operands.0 = 4
of.RS1.#operands.#len.1 = 1
of.RS1.#operands.#len.2 = 1
of.RS1.#operands.#len.3 = 1
of.RS1.#operands.#len.4 = 3
of.RS1.Layout = 'R#,R#,#(R#)'  /* R1,R3,D2(B2)                */
of.RS1.sequence = '1243'       /* display sequence            */
of.RS1.lenOpCode = 2

of.RS2.#hw = 2
of.RS2.#operands.0 = 4
of.RS2.#operands.#len.1 = 1
of.RS2.#operands.#len.2 = 1
of.RS2.#operands.#len.3 = 1
of.RS2.#operands.#len.4 = 3
of.RS2.Layout = 'R#,B''#'',#(R#)'  /* R1,M3,D2(B2)                */
of.RS2.sequence = '1243'       /* display sequence            */
of.RS2.lenOpCode = 2

of.RSI.#hw = 2
of.RSI.#operands.0 = 3
of.RSI.#operands.#len.1 = 1
of.RSI.#operands.#len.2 = 1
of.RSI.#operands.#len.3 = 4
of.RSI.lenOpCode = 2
of.RSI.Layout = 'R#,R#,*+#'     /* R1,R3,I2                    */
of.RSI.sequence = '123'

of.RSL.#hw = 3
of.RSL.#operands.0 = 3
of.RSL.#operands.#len.1 = 1
of.RSL.#operands.#len.2 = 1
of.RSL.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */
of.RSL.#operands.#len.3 = 3
of.RSL.lenOpCode = 2
of.RSL.sequence = '312'         /* display sequence            */
of.RSL.Layout = '#(#,R#)'       /* D1(L1,B1)                   */

of.RSY1.#hw = 3
of.RSY1.#operands.0 = 4
of.RSY1.#operands.#len.1 = 1
of.RSY1.#operands.#len.2 = 1
of.RSY1.#operands.#len.3 = 1
of.RSY1.#operands.#len.4 = 3
of.RSY1.lenOpCode = 2
of.RSY1.Layout = 'R#,R#,#(R#)'  /* R1,R3,D2(B2)                */
of.RSY1.sequence = '1243'       /* display sequence            */

of.RSY2.#hw = 3
of.RSY2.#operands.0 = 4
of.RSY2.#operands.#len.1 = 1
of.RSY2.#operands.#len.2 = 1
of.RSY2.#operands.#len.3 = 1
of.RSY2.#operands.#len.4 = 3
of.RSY2.lenOpCode = 2
of.RSY2.Layout = 'R#,B''#'',#(R#)' /* R1,M3,D2(B2)                */
of.RSY2.sequence = '1243'          /* display sequence            */

of.RX.#hw = 2
of.RX.#operands.0 = 4
of.RX.#operands.#len.1 = 1
of.RX.#operands.#len.2 = 1
of.RX.#operands.#len.3 = 1
of.RX.#operands.#len.4 = 3
of.RX.lenOpCode = 2
of.RX.layout   = 'R#,#(R#,R#)'  /* R1,D2(X2,B2) */
of.RX.sequence = '1423'         /* display sequence            */

of.BX.#hw = 2
of.BX.#operands.0 = 4
of.BX.#operands.#len.1 = 1
of.BX.#operands.#len.2 = 1
of.BX.#operands.#len.3 = 1
of.BX.#operands.#len.4 = 3
of.BX.lenOpCode = 2
of.BX.layout   = '#,#(R#,R#)'  /* R1,D2(X2,B2) */
of.BX.sequence = '1423'         /* display sequence            */

of.RXB.#hw = 2                  /* Fur Test Under Mask */
of.RXB.#operands.0 = 3
of.RXB.#operands.#len.1 = 1
of.RXB.#operands.#len.2 = 1
of.RXB.#operands.#len.3 = 3
of.RXB.lenOpCode = 3
of.RXB.layout   = '#(R#,R#)'    /* D2(X2,B2)                   */
of.RXB.sequence = '312'         /* display sequence            */

of.RXM.#hw = 2                  /* Fur Test Under Mask */
of.RXM.#operands.0 = 3
of.RXM.#operands.#len.1 = 1
of.RXM.#operands.#len.2 = 1
of.RXM.#operands.#len.3 = 3
of.RXM.lenOpCode = 3
of.RXM.layout   = '#(R#,R#)'    /* D2(X2,B2)                   */
of.RXM.sequence = '312'        /* display sequence            */

of.RXE.#hw = 3
of.RXE.#operands.0 = 4
of.RXE.#operands.#len.1 = 1
of.RXE.#operands.#len.2 = 1
of.RXE.#operands.#len.3 = 1
of.RXE.#operands.#len.4 = 3
of.RXE.lenOpCode = 2
of.RXE.layout   = 'R#,#(R#,R#)' /* R1,D2(X2,B2) */
of.RXE.sequence = '1423'        /* display sequence            */

of.RXF.#hw = 3
of.RXF.#operands.0 = 5
of.RXF.#operands.#len.1 = 1
of.RXF.#operands.#len.2 = 1
of.RXF.#operands.#len.3 = 1
of.RXF.#operands.#len.4 = 3
of.RXF.#operands.#len.5 = 1
of.RXF.lenOpCode = 2
of.RXF.layout   = 'R#,R#,#(R#,R#)' /* R1,R3,D2(X2,B2)     */
of.RXF.sequence = '51423'       /* display sequence        */

of.RIS.#hw = 3
of.RIS.#operands.0 = 5
of.RIS.#operands.#len.1 = 1
of.RIS.#operands.#len.2 = 1
of.RIS.#operands.#len.3 = 1
of.RIS.#operands.#len.4 = 3
of.RIS.#operands.#len.5 = 2
of.RIS.lenOpCode = 2
of.RIS.layout   = 'R#,#,#,#(R#)' /* R1,I2,M3,D4(B4)     */
of.RIS.sequence = '15243'       /* display sequence        */

of.RRS.#hw = 3
of.RRS.#operands.0 = 5
of.RRS.#operands.#len.1 = 1
of.RRS.#operands.#len.2 = 1
of.RRS.#operands.#len.3 = 1
of.RRS.#operands.#len.4 = 3
of.RRS.#operands.#len.5 = 1
of.RRS.lenOpCode = 2
of.RRS.layout   = 'R#,R#,#,#(R#)' /* R1,R2,M3,D4(B4)     */
of.RRS.sequence = '12543'       /* display sequence        */

of.RXY.#hw = 3
of.RXY.#operands.0 = 4
of.RXY.#operands.#len.1 = 1
of.RXY.#operands.#len.2 = 1
of.RXY.#operands.#len.3 = 1
of.RXY.#operands.#len.4 = 3
of.RXY.lenOpCode = 2
of.RXY.layout   = 'R#,#(R#,R#)' /* R1,D2(X2,B2)     */
of.RXY.sequence = '1423'        /* display sequence       */

of.S.#hw = 2
of.S.#operands.0 = 2
of.S.#operands.#len.1 = 1
of.S.#operands.#len.2 = 3
of.S.lenOpCode = 4
of.S.layout   = '#(R#)'           /* D2(B2)                 */
of.S.sequence = '21'          /* display sequence        */

of.SI.#hw = 2
of.SI.#operands.0 = 3
of.SI.#operands.#len.1 = 2
of.SI.#operands.#len.2 = 1
of.SI.#operands.#len.3 = 3
of.SI.lenOpCode = 2
of.SI.layout   = '#(R#),#'    /* D1(B1),I2              */
of.SI.sequence = '321'        /* display sequence        */

of.SIL.#hw = 3
of.SIL.#operands.0 = 3
of.SIL.#operands.#len.1 = 1
of.SIL.#operands.#len.2 = 3
of.SIL.#operands.#len.3 = 4
of.SIL.lenOpCode = 4
of.SIL.layout  = '#(R#),#'    /* D1(B1),I2              */
of.SIL.sequence = '213'       /* display sequence        */

of.SI2.#hw = 2
of.SI2.#operands.0 = 3
of.SI2.#operands.#len.1 = 2
of.SI2.#operands.#len.2 = 1
of.SI2.#operands.#len.3 = 3
of.SI2.lenOpCode = 2
of.SI2.layout   = '#(R#),B''#'''    /* D1(B1),I2              */
of.SI2.sequence = '321'        /* display sequence        */

of.SIYL.#hw = 3
of.SIYL.#operands.0 = 3
of.SIYL.#operands.#len.1 = 2
of.SIYL.#operands.#len.2 = 1
of.SIYL.#operands.#len.3 = 5
of.SIYL.lenOpCode = 2
of.SIYL.layout  = '#(R#),B''#'''    /* D1(B1),I2              */
of.SIYL.sequence = '321'       /* display sequence       */

of.SIYA.#hw = 3
of.SIYA.#operands.0 = 3
of.SIYA.#operands.#len.1 = 2
of.SIYA.#operands.#len.2 = 1
of.SIYA.#operands.#len.3 = 5
of.SIYA.lenOpCode = 2
of.SIYA.layout  = '#(R#),#'    /* D1(B1),I2              */
of.SIYA.sequence = '321'       /* display sequence       */

of.SSM.#hw = 3
of.SSM.#operands.0 = 6
of.SSM.#operands.#len.1 = 1
of.SSM.#operands.#len.2 = 1
of.SSM.#operands.#len.3 = 1
of.SSM.#operands.#len.4 = 3
of.SSM.#operands.#len.5 = 1
of.SSM.#operands.#len.6 = 3
of.SSM.lenOpCode = 2
of.SSM.layout  = 'R#,R#,#(R#),#(R#)' /* R1,R3,D2(B2),D4(B4)   */
of.SSM.sequence = '124352'           /* display sequence      */

of.SSR.#hw = 3
of.SSR.#operands.0 = 6
of.SSR.#operands.#len.1 = 1
of.SSR.#operands.#len.2 = 1
of.SSR.#operands.#len.3 = 1
of.SSR.#operands.#len.4 = 3
of.SSR.#operands.#len.5 = 1
of.SSR.#operands.#len.6 = 3
of.SSR.lenOpCode = 2
of.SSR.layout  = '#(R#,R#),#(R#),R#' /* D1(R1,B1),D2(B2),R3   */
of.SSR.sequence = '413652'           /* display sequence      */

of.SSL.#hw = 3
of.SSL.#operands.0 = 6
of.SSL.#operands.#len.1 = 1
of.SSL.#operands.#len.2 = 1
of.SSL.#operands.#len.3 = 1
of.SSL.#operands.#len.4 = 3
of.SSL.#operands.#len.5 = 1
of.SSL.#operands.#len.6 = 3
of.SSL.lenOpCode = 2
of.SSL.layout  = 'R#,#(R#),R#,#(R#)' /* D1(R1,B1),D2(B2),R3   */
of.SSL.sequence = '143265'           /* display sequence      */

of.SS.#hw = 3
of.SS.#operands.0 = 5
of.SS.#operands.#len.1 = 2
of.SS.#operands.#len.2 = 1
of.SS.#operands.#len.3 = 3
of.SS.#operands.#len.4 = 1
of.SS.#operands.#len.5 = 3
of.SS.lenOpCode = 2
of.SS.layout   = '#(#,R#),#(R#)' /* D1(L1,B1),D2(B2)       */
of.SS.sequence = '31254'         /* display sequence      */

of.SSI.#hw = 3
of.SSI.#operands.0 = 5
of.SSI.#operands.#len.1 = 2
of.SSI.#operands.#len.2 = 1
of.SSI.#operands.#len.3 = 3
of.SSI.#operands.#len.4 = 1
of.SSI.#operands.#len.5 = 3
of.SSI.lenOpCode = 2
of.SSI.layout  = '#(R#),#(#,R#)' /* D1(B1),D2(L2,B2)      */
of.SSI.sequence = '32514'        /* display sequence      */

of.SSA.#hw = 3
of.SSA.#operands.0 = 6
of.SSA.#operands.#len.1 = 1
of.SSA.#operands.#len.2 = 1
of.SSA.#operands.#len.3 = 1
of.SSA.#operands.#len.4 = 3
of.SSA.#operands.#len.5 = 1
of.SSA.#operands.#len.6 = 3
of.SSA.lenOpCode = 2
of.SSA.layout   = '#(#,R#),#(#,R#)' /* D1(L1,B1),D2(L2,B2)   */
of.SSA.sequence = '413625'          /* display sequence      */

of.SS3.#hw = 3
of.SS3.#operands.0 = 6
of.SS3.#operands.#len.1 = 1
of.SS3.#operands.#len.2 = 1
of.SS3.#operands.#len.3 = 1
of.SS3.#operands.#len.4 = 3
of.SS3.#operands.#len.5 = 1
of.SS3.#operands.#len.6 = 3
of.SS3.lenOpCode = 2
of.SS3.layout   = '#(#,R#),#(R#),#'    /* D1(L1,B1),D2(B2),I3     */
of.SS3.sequence = '413652'              /* display sequence        */

of.SSE.#hw = 3
of.SSE.#operands.0 = 4
of.SSE.#operands.#len.1 = 1
of.SSE.#operands.#len.2 = 3
of.SSE.#operands.#len.3 = 1
of.SSE.#operands.#len.4 = 3
of.SSE.lenOpCode = 4
of.SSE.layout   = '#(R#),#(R#)'   /* D1(B1),D2(B2)           */
of.SSE.sequence = '2143'          /* display sequence        */

of.SSF.#hw = 3
of.SSF.#operands.0 = 5
of.SSF.#operands.#len.1 = 1
of.SSF.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */
of.SSF.#operands.#len.2 = 1
of.SSF.#operands.#len.3 = 3
of.SSF.#operands.#len.4 = 1
of.SSF.#operands.#len.5 = 3
of.SSF.lenOpCode = 2
of.SSF.layout   = '#(R#),#(R#),R#'   /* D1(B1),D2(B2),R3        */
of.SSF.sequence = '32541'         /* display sequence        */

return

/**********************************************/
/* Tests for 4-Byte Opcode                   */
is4Bytes:
/**********************************************/

arg fstbyte

select
when wordpos(fstbyte, 'B2 B3 B9') = 0,
then return 0

otherwise return 1

end

/*********************************************************/
getservice:
/*********************************************************/

if ipcsmode = 0,
then do
   call makeInstructionTable 0
   call displayInstructionTable
   "tbend disastab"
end

else do /* inside ipcs */
   ppp = 1
   call makeInstructionTable 1
end

return

/*********************************************************/
/* create table of instructions; this routine works      */
/* differently in a native ISPF and an IPCS environment  */
makeInstructionTable:
/*********************************************************/
arg ipm  /* ipcsmode */

if ipm = 0 then "tbcreate disastab nowrite  names(xofs hxc mnc)"

xright = ''; mright = ''
TableRow# = 0

parse var hexinstruction xleft '|' xright
parse var miniprogram    mleft '|' mright
parse var xad            aleft '|' aright

/* loop over all instructions */
do until xright = '' | mright = ''
   parse var xright xleft '|' xright
   parse var mright mleft '|' mright
   parse var aright aleft '|' aright

   hxc  = xleft
   mnc  = mleft
   if ipm = 0,
   then xofs = '+' || right(aleft, 3,'0') /* hex offset  */
   else xofs = xform(aleft, 12)           /* hex address */

   if ppp then queue    xofs ' ' xform(hxc, 14) mnc

   if ipm = 0 then "tbadd disastab"

   TableRow# = TableRow# + 1

   hexinstruction = xright
   miniprogram    = mright
   xad            = aright
end
if ppp then queue ' '

Return

/**********************************************/
/* expand String s to fixed length  l         */
xform:
/**********************************************/

arg s, l
ls = length(s)

if ls < l,
then s2 = s ||copies(' ', l-ls)
else s2 = s

return s2

/*********************************************************/
displayInstructionTable:
/*********************************************************/

/*
"LIBDEF  ISPPLIB LIBRARY ID("ddname")"
"LMINIT DATAID(DID1) DDNAME("ddname") ENQ(shrw)"
"LMOPEN DATAID("DID1") OPTION(OUTPUT)"
*/
Call write   ")PANEL "
Call write   ")ATTR  "
Call write   " @ TYPE(INPUT)  INTENS(HIGH) JUST(LEFT) CAPS(ON)"
Call write   " $ TYPE(OUTPUT) INTENS(LOW)  JUST(ASIS) SKIP(ON)"
Call write   " + TYPE(TEXT)   INTENS(LOW)             SKIP(ON)"
Call write   ")BODY window(60, 18)  "
Call write   "%COMMAND ===>_ZCMD                    + "
Call write   "%&MSG                                 + "
Call write   "%     Instructions                    + "
Call write   "+---- ----------------------------------------------+ "
Call write   ")MODEL "
Call write   "$xofs   $hxc         $mnc                           + "
Call write   ")INIT"
Call write   ".cursor = zcmd"
Call write   ")PROC  "
Call write   " &MSG = &Z"
Call write   " &MXXTRAIL = &Z "
Call write   " .CURSOR = ZCMD  "
Call write   "&CNAME = .CURSOR"
Call write   ")END   "

"LMMADD  DATAID("DID1") MEMBER(DISAS)"
"LMFREE  DATAID("DID1")"
"ADDPOP  "
"TBTOP   DISASTAB"
"TBDISPL DISASTAB PANEL(DISAS) csrrow(1)"
 /* "LMclose DATAID("DID1")"*/

"REMPOP  "
"LIBDEF ISPPLIB"
Address tso
if filemode = 0,
then "FREE F("ddname")"
else say 'Result is written to File SDADBG  (use ISPF-Command DDLIST)'

Return

/********************************************************/
syntax:
/********************************************************/
say 'Error' rc 'in line' sigl':' "ERRORTEXT"(rc)
say "SOURCELINE"(sigl)
say 'hexinstr, OfsSubOperand, LenSubOperand'
say hexinstr  OfsSubOperand  LenSubOperand
call dwrite

exit 8

/********************************************************/
access_error:
/********************************************************/
say 'Error' rc 'in line' sigl':' "ERRORTEXT"(rc)
say "SOURCELINE"(sigl)
say 'new_length new_length ipcs_eval_limit'
say  new_length new_length ipcs_eval_limit
call dwrite

exit 8

/********************************************************/
prt:  /* Debug Output                                   */
/********************************************************/
trace off

arg #s1 #s2

#t1 = value(#s1)
if #s2 /= '',
then do
   #t2 = value(#s2)
   queue xpform(#s1 || ':', 16) #t1 '   ' xpform(#s2 || ':', 16) #t2
end
else queue xpform(#s1 || ':', 16) #t1

return

/***********************************/
dwrite:  /* Output on file(sdadbg) */
/**********************************/

if queued() > 0,
then do
   queue ''
   address tso
   "alloc fi(sdadbg) new tracks space(3 3) ",
   "recfm(f b) lrecl(132) dsorg(ps) reuse"

   "execio * diskw  sdadbg (finis"
end

return

/*******************************************************/
dnote:  /* output via IPCS-Note subcommand             */
/*******************************************************/

do while queued() > 0
   pull iline

   ipapo =pos('''', iline)  /* special treatment of apostrophes */
   if ipapo > 0,
   then do
      iline = translate(iline, '_', '''')
      ap = pos('_', iline)
      kline = xtendApost(ap iline)
      iline = translate(kline, '''' , '_')
   end
 /*    say 'iline' iline*/
   "NOTE '"iline"' ASIS"
end

return

/********************************************************/
xtendApost:  /* double apostrophes  for note ...        */
/********************************************************/
arg ip il  /* ip = 1st position of '''' */

jp = ip+1
ik = substr(il, jp) /* deal with right part */
parse var ik left '_' rite
jline = substr(il, 1, ip) || '_' || left || '__' || rite

return jline



/********************************************************/
write:
/********************************************************/

Parse Arg  p1

"LMPUT DATAID("DID1") MODE(INVAR) DATALOC(P1) DATALEN(80)"
Return

/***************************************************/
/* Construct Help Panel                            */
constructHelp:
/***************************************************/
trace off

/* read help panel content from source an write to did1 */
do lhc = 3000 to 4000

   if pos('+~\/"9$', sourceline(lhc)) = 1,
   then do lhw = lhc+1 to 4000

      if pos('+~\/"9$', sourceline(lhw)) = 1,
      then leave lhc

      Call write sourceline(lhw)
   end lhw

end lhc
"LMMADD DATAID("DID1") MEMBER(sdahelp)"
 /* "LMclose DATAID("DID1")"*/

return

/**********************************************************/
/*
+~\/"9$ Begin of Help Panel - do *not* remove this line
)ATTR
 + TYPE(NT)
 ? TYPE(ET)
 ¬ TYPE(TEXT) INTENS(HIGH) SKIP(ON) COLOR(YELLOW) HILITE(REVERSE)
 ` AREA(SCRL) EXTEND(ON)
)BODY EXPAND(@@)
¬ ISDA-TUTORIAL +@ @                                 @ @¬                +
%COMMAND ===>_ZCMD
`helptext                                                                      `
)AREA  helptext
ISDA%Small DisAssembler+produces an assembler listing of hexadecimal
opcodes. It is an ISPF based tool to support the analysis of dumps of
all kinds and operates directly on any ISPF screen, thus enabling the
user to work with IPCS dumps, lists of SYSUDUMPs, CEEDUMPs and the like.
ISDA is written in Rexx and may be modified according to specific needs.
It covers zSeries Opcodes up to the Sixth Edition (April, 2007) of the POPs.
To start ISDA in an ISPF Session it must know the coordinates of the dump area
inside a screen.  These coordinates have to be entered via
%TSO ISDA <StartCol> <Number of Rows> <debug level>+
NB: The Start Col is the Col on the %screen.+ For IPCS dumps a value of
    12 would fit. The right boundary for analyis is calculated automatically.
    Criterion is the first non hex character.
Subsequent calls of ISDA use these coordinates.
ISDA stops disassembly after the first unknown opcode

debug level may have one of the following values:
%P+ protocol level, lists the statements in a temporary file with ddname(sdadbg)
%D+ debuglevel, lists internal values in the same temporary file
%T+ trace level, switches on %trace i+ during disassembly
other values are ignored and no additional output will be issued

To work with ISDA the command ¬TSO ISDA+       <without parameters>
should be assigned to a PF Key. ISDA then starts disassembling from the
cursor position
)INIT
)PROC
)END
+~\/"9$ End of Help Panel - do *not* remove this line
*/
