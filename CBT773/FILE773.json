{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012751000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 8817900, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE773.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 8817900, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 8817900, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE773.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x87\\n'", "DS1TRBAL": "b'PZ'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05A\\x00\\x03\\x05J\\x00\\x03\\x00\\x88'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t\\x05o\\x01\\t\\x05o\\x10R\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-02-25T00:00:00", "modifydate": "2009-02-25T10:52:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-478"}, "text": "REGULAR CBT TAPE - VERSION 478    FILE:  773\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT478.FILE773\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 8 MEMBERS COUNTED; CUMULATIVE SIZE IS 83,970 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   02/25/09    10:52:36    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "##README": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x008\\x01\\x073O\\x01\\t\\x05?\\t#\\x00\\x0f\\x00\\x04\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2007-11-30T00:00:00", "modifydate": "2009-02-22T09:23:38", "lines": 15, "newlines": 4, "modlines": 0, "user": "SBGOLOB"}, "text": "------------------------------------------------------------------\n     README File for the Interactive Short Disassembler\n------------------------------------------------------------------\nThis PO-Datset contains the 3 files:\n\n##README        This file\n\nISDA            The rexx source of isda\n\nISDAUG          ISDA User's Guide as an EBCDIC text file\n\nISDADOC         ISDA User's Guide as an MSWORD doc file\n\nISDARTF         ISDA User's Guide as an RTF file\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE773": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t\\x05o\\x01\\t\\x05o\\x10R\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-02-25T00:00:00", "modifydate": "2009-02-25T10:52:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "CBT-478"}, "text": "//***FILE 773 is from Arthur Fichtl and contains an interactive     *   FILE 773\n//*           disassembler which interprets a chunk of dumped       *   FILE 773\n//*           values as though they are machine instructions.       *   FILE 773\n//*           This program, which is called ISDA, is written        *   FILE 773\n//*           entirely in REXX.                                     *   FILE 773\n//*                                                                 *   FILE 773\n//*       email:  fichtla@acm.org                                   *   FILE 773\n//*                                                                 *   FILE 773\n//*       Members of this pds:                                      *   FILE 773\n//*                                                                 *   FILE 773\n//*       ##README  -  Explains members of this pds                 *   FILE 773\n//*       ISDA      -  REXX source for ISDA                         *   FILE 773\n//*       ISDADOC   -  MSWORD doc for ISDA - better than ISDAUG     *   FILE 773\n//*       ISDAUG    -  EBCDIC text doc for ISDA                     *   FILE 773\n//*                                                                 *   FILE 773\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ISDA": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01Q\\x00\\x13\\x01\\x085\\x8f\\x01\\t\\x05o\\x106\\x0c\\r\\nH\\x00\\x00\\xc1\\xc6\\xc9\\xc3\\xc8\\xe3\\xd3@@@'", "ispf": {"version": "01.81", "flags": 0, "createdate": "2008-12-23T00:00:00", "modifydate": "2009-02-25T10:36:13", "lines": 3085, "newlines": 2632, "modlines": 0, "user": "AFICHTL"}, "text": "/* REXX Interactive Short DisAssembler                              */\n/*                                                                  */\n/*------------------------------------------------------------------*/\n/*      Copyright A.Fichtl, using ideas from Doug Nadel (VCURSOR)   */\n/*      contact: fichtla@acm.org                                    */\n/*      Updates February 2009: z9 & z10 Opcodes are supported now   */\n/*                                                                  */\n/*------------------------------------------------------------------*/\n/* Interprets a chunk of dumped values      (Hexa as Char)          */\n/* as a sequence of machine instructions                            */\n/* Input:   Hexa-as-Char String, presented by zscreeni variable     */\n/* Output:  Sequence of instructions, in Assembler listing format   */\n/* Requirement:  the sequence of hexa-chars must appear without     */\n/* non-hexa chars (except Blanks and x'00' (for IPCS Output)        */\n/* Coordinates of Begin of Disassembly, output options              */\n/*                                                                  */\n/* In case filemode is desired, the input file is expected in       */\n/* DDNAME(FINISDA); either a PS Dataset or a member of a PO Dataset */\n/* can be allocated with this DDNAME *prior* to start ISDA.         */\n/* To view the output, start ISDA with 'P' as 3rd parameter and     */\n/* look at temporary file with DDNAME(SDADBG)                       */\n/*                                                                  */\n/* Syntax of Parameter insrc: F.<start>.<len>, where start denotes  */\n/* the startcol to be read and len the length of the part of the    */\n/*  row that contains machine code.                                 */\n/* e.g.: insrc = 'F.5.30' means to start at col 5  and to process   */\n/*       30 Bytes of machine code in each row.                      */\n/* In case of doubts, look at the source.                           */\n/*                                                                  */\n/*                                                                  */\n/* NB: It is necessary that this part of the file contains          */\n/*     only HEX-codes, no decoration or comments are possible;      */\n/*                                                                  */\n/* so: clean the contents  according to this requirement            */\n/* Exception: Spaces or NULLS  (i.e. X'40' or x'00') are possible   */\n/* and will be ignored.                                             */\n/*------------------------------------------------------------------*/\n\n/*      Start-col, # of rows, debug-Options, filemode-Parms*/\nparse upper arg tcstco tcnmrows sdadbg insrc\n\nAddress ispexec\n\"control errors return\"\n\nsignal on syntax\nnumeric digits (11)\n\ncall prolog\n/* trace r */\ncall DisasmProlog\n\nif ipcsmode then address ipcs\n\nhex_string = getHexString(tcstco tcnmrows)\n\nlhexs = length(hex_string)\nif ddd then call prt 'lhexs' 'hex_string'\n\n/* Disassembly W/ and W'out Debug */\ncall disasm(hex_string sdadbg)\n\ncall getservice\n\ncall epilog 0\n\n/***************************************************/\n/* Prepare the Dialog                              */\nprolog:\n/***************************************************/\n\n\n\"VGET (ZSCREENI,ZSCREENC)\"  /* Extract screen image and cursor pos  */\n\"VGET (ZSCREEND,ZSCREENW)\"\n\"VGET ZSCREEN\"\n\"VGET Zpanelid\"\n\n/* are we in IPCS ? */\n if pos('BLS', Zpanelid) = 1,\n then ipcsmode = 1  /* we are in IPCS, interpret coordinates different*/\n else ipcsmode = 0  /* and do not initialize ISPF-environment         */\n\nif substr(insrc, 1, 1) = 'F',\nthen filemode = 1\nelse filemode = 0\n\nif filemode = 0 & ipcsmode = 0,\nthen ispfmode = 1\nelse ispfmode = 0\n\n/* sdadbg controls debug- or protocol information */\n/* valid chars are:                               */\n/* 'D' writes debug output to temp file           */\n/* 'P' writes disassembly output to temp file     */\n/* 'T' switches trace on                          */\nddd = 0; ppp = 0\nselect\nwhen sdadbg = 'D' then ddd = 1\nwhen sdadbg = 'P' then ppp = 1\notherwise nop\nend /*select*/\n\nif ddd | ppp then do\n   datetime = date() time()\n   call prt 'datetime'\n\n   if filemode,\n   then do\n      file = MLISTA('FINISDA')\n      call prt 'file'\n   end\n\nend\n\nselect\nwhen ipcsmode then call prepareIPCS\nwhen filemode then call prepareFile\nwhen ispfmode then call prepareISPF\nend /*select*/\n\n/* trace r */\nreturn\n\n/********************************/\nmlista: /* get DSN+Membername   */\n/********************************/\n\naddress tso\n\narg ddn /* DDName of concern */\n\ncmd = 'lista st'\nq=outtrap(trap.,10000,concat)\ncmd /* command to be trapped */\nq=outtrap(off)\n\ndo i  = 1 to trap.0\n   if wordpos(ddn, trap.i) = 1 ,\n    & wordpos('KEEP', trap.i) = 2\n    then do\n      j = i-1\n      dsn = trap.j\n      leave i\n    end\nend\ndrop trap.\n\nreturn dsn\n\n/********************************/\n/********************************/\n/* initialize IPCS-environment  */\nprepareIPCS:\n/********************************/\n\nbase_address   = d2x(0)\nif datatype(tcstco) = 'NUM',\nthen do\n   \"vput (tcstco tcnmrows sdadbg insrc) profile\"\nend\n\nreturn\n\n/********************************/\n/* initialize file Input        */\npreparefile:\n/********************************/\n\naddress tso\n/* parse the other parts of the filemode-parameter */\nrecstart = 1; reclen = 80 /* these are the defaults */\nparse var insrc . '.' recstart '.' reclen\n/* say recstart reclen */\n\n\"execio * diskr FINISDA (stem mcx. finis\"\n\nif rc /= 0 | mcx.0 = 0,\nthen do\n   say 'file FINISDA not readable or empty'\n   exit 8\nend\n\nreturn\n\n/********************************/\n/* initialize ISPF-environment  */\nprepareISPF:\n/********************************/\n\nddname='$VCSR$'zscreen\n\nAddress tso \"alloc f(\"ddname\") reuse new\",\n            \" del dso(po) dir(2) sp(3) track recfm(f b) lrecl(80)\"\n\"LIBDEF ISPPLIB LIBRARY ID(\"ddname\")\"\n\n\"LMINIT DATAID(DID1) DDNAME(\"ddname\") ENQ(shrw)\"\n\"LMOPEN DATAID(\"DID1\") OPTION(OUTPUT)\"\n\nif tcstco = 0  & TCNMROWS = 0,\nthen do\n   tcstco = 'X'; TCNMROWS = 'Y'\n   \"vput (tcstco tcnmrows sdadbg insrc)\"\n   call epilog 4\nend\n\nif datatype(tcstco) /= 'NUM' | datatype(TCNMROWS) /= 'NUM',\nthen do\n   \"vget (tcstco tcnmrows sdadbg insrc)\"\n\n   if datatype(tcstco) /= 'NUM' | datatype(TCNMROWS) /= 'NUM',\n   then do\n      call constructHelp  /* display when <HELP> was pressed  */\n      call getCoordinates /* ask for screen coordinates       */\n      call epilog 0       /* and stop                         */\n   end\n\nend\nelse do\n   call putCoordinates\n   call epilog 4\nend\n\nif ddd then call prt 'tcstco'  'tcnmrows'\n\nreturn\n\n/*****************************************/\n/* Prepare Disassembly                   */\nDisasmProlog:\n/*****************************************/\n\nIMnemo_old = ''\nresultdump = ''; hexdump_1  = ''\nold_hxoc = ' '\ndecaddress = 0\nxad = d2x(0)\nexXBRM = 'ABCDEF012478'\n\nreturn\n\n/***************************************************/\nepilog:\n/***************************************************/\narg lastcc\n\n /*   say ipcsmode*/\n\nif ipcsmode,\nthen call dnote\nelse do\n   \"LMFREE DATAID(\"DID1\")\"\n   call dwrite\nend\n\nexit lastcc\n\n/***************************************************/\n/* Prompt User for Coordinates                     */\ngetCoordinates:\n/***************************************************/\n\nCall write   \")ATTR\"\nCall write   \"+ TYPE(NT)\"\nCall write   \"@ TYPE(PT)\"\nCall write   \"? TYPE(CH)\"\nCall write   \"9 TYPE(input)\"\nCall write   \"# TYPE(output) just(asis) caps(off)\"\nCall write   \")BODY WINDOW(72,12)\"\nCall write   \"                @Cursor Sensitive Action+\"\nCall write   \"+Call ISDA as a command with parameters \"\n\n/* different interpretation of coordinates inside IPCS */\nCall write   \"+\"\nif ipcsmode,\nthen do\n   Call write \"to invoke ISDA from IPCS assign a PFKey to: 'IPCS ISDA'\"\n   Call write,\n   \"+inside IPCS the default amount of Bytes to be disassembled is 512+\"\n   Call write  \"+to change it call ISDA with a different value+\"\nend\nelse do\n   Call write   \"+<start-col>  <No of rows> and <Debug-Option> (D/P/T):\"\n   Call write   \"+TSO ISDA <sc> <Nr> D/P/T+\"\nend\n\nCall write   \"+and press <ENTER>+\"\nCall write   \"+\"\nCall write   \"+press <Help> to get additional advice\"\nCall write   \"+\"\nCall write   \"+After that call ISDA without parameters\"\nCall write   \"+to beginn disassembly place cursor on 1st instruction\"\nCall write   \"+and press <ENTER>+\"\nCall write   \")INIT\"\nCall write   \".help = sdahelp\"\nCall write   \")PROC\"\nCall write   \")END\"\n\"LMMADD DATAID(\"DID1\") MEMBER(initS)\"\n\"LMclose DATAID(\"DID1\")\"\n\"ADDPOP\"\n\"DISPLAY PANEL(inits)\"\n\"REMPOP\"\n\"LMFREE DATAID(\"DID1\")\"\n\"LIBDEF ISPPLIB\"\nAddress tso\n\"FREE F(\"ddname\")\"\n /* \"lista\"*/\n\nreturn\n\n/***************************************************/\n/* Dialog zur Benachrichtigung der Koordinaten     */\nputCoordinates:\n/***************************************************/\n\nCall write   \")ATTR\"\nCall write   \"+ TYPE(NT)\"\nCall write   \"@ TYPE(PT)\"\nCall write   \"? TYPE(CH)\"\nCall write   \"9 TYPE(input)\"\nCall write   \"# TYPE(output) just(asis) caps(off)\"\nCall write   \")BODY WINDOW(35,2)\"\nCall write   \"+Column &tcstco and row &TCNMROWS\"\nCall write   \"+have been saved\"\nCall write   \")PROC\"\nCall write   \"vput (tcstco TCNMROWS sdadbg)\"\nCall write   \")END\"\n\"LMMADD DATAID(\"DID1\") MEMBER(msgs)\"\n\"ADDPOP column(20) row(10)\"\n\"DISPLAY PANEL(msgs)\"\n\"REMPOP\"\n\"LMFREE DATAID(\"DID1\")\"\n\"LIBDEF ISPPLIB\"\n\nAddress tso\n\"FREE F(\"ddname\")\"\n\nreturn\n\n/***************************************************/\n/* extract hexa string from dump-screen or IPCS    */\ngetHexString:\n/***************************************************/\n\n/* trace i */\narg scol durow /* Startcol, # of Dumprows */\n\nif filemode = 0,\nthen do\n   /* 1st: partition zscreeni according to limits */\n   do idr = 1 to zscreend /* loop over all screen rows */\n      xdr.idr = substr(zscreeni, 1+(idr-1)*zscreenw, zscreenw-1)\n\n      if verify(xdr.idr, ' ') > 0,\n       & ddd then call prt 'idr' 'xdr.idr'\n\n   end\n\n   /* 2nd: determine position of cursor in xdr.idr */\n   CurColPos = zscreenc // ZSCREENW  +1      /* cursor column position */\n\n   if ddd then call prt 'zscreenc' 'ZSCREENW'\n\n   zsro = zscreenc/ZSCREENW -.5\n   rxo = format(zsro, 3,0) +1 /* row number on screen   */\n   if ddd then call prt 'zsro' 'rxo'\nend\n\n/* 3rd get rawdump in a way depending on type of dump panel */\nselect\nwhen ipcsmode then  call obtain_from_IPCS\nwhen filemode then  call obtain_from_file\notherwise  /*ISPF*/ call obtain_from_screen\nend /*select*/\n\nreturn resultdump\n\n/***************************************************/\n/* get rawdump from zscreeni                       */\nobtain_from_screen:\n/***************************************************/\n\ndo idr = 1 to durow\n   ldr = rxo+idr-1\n   if ddd then call prt 'idr' 'ldr'\n\n   if idr = 1, /* special treatment for 1st line of interest */\n   then rawdump = substr(xdr.ldr, CurColPos)\n   else rawdump = substr(xdr.ldr, tcstco)\n\n   upper rawdump\n   rawdump = translate(rawdump, ' ', x2c('00'))  /* IPCS-Separators */\n   end_of_rawd_1 = verify(rawdump, '0123456789ABCDEF ')\n   if ddd & verify(rawdump, ' ') /= 0,\n   then call prt 'rawdump'\n\n   if  end_of_rawd_1 = 1,  /* end of dump area */\n   then leave idr\n\n   if  end_of_rawd_1 = 0,\n   then eostr = length(rawdump)      /* total Hex            */\n   else eostr = end_of_rawd_1 - 1    /* beware of right side */\n\n   hexdump_1 = hexdump_1 || strip(substr(rawdump, 1, eostr))\n\nend\n\nif ddd then call prt 'end_of_rawd_1'\n\n/* remove all blanks*/\ndo l = 1 to words(hexdump_1)\n   resultdump = resultdump || word(hexdump_1, l)\nend\n\nreturn\n\n/***************************************************/\n/* get rawdump from inputfile (for test purposes)  */\n/* contents are expected in file MACHINE           */\nobtain_from_file:\n/***************************************************/\n\nmlines = mcx.0\nif ddd then call prt  'mlines'\n\ndo idr = 1 to mlines\n   xline = substr(mcx.idr, recstart, reclen)\n/*    say xline */\n   hexdump_1 = hexdump_1 || strip(xline)\nend\n\n/* remove all blanks & Nulls */\nhexdump_1 = translate(hexdump_1, ' ', x2c(00))\ndo l = 1 to words(hexdump_1)\n   resultdump = resultdump || word(hexdump_1, l)\nend\n\nreturn\n\n/******************************************************************/\n/* extracts dump data from an IPCS dump via evaluate subcommand   */\nobtain_from_IPCS:\n/******************************************************************/\n/* 1st get dump address from screen */\nbase_address   = word(xdr.rxo, 1) /* the address on the left side */\n\n/* not a valid part of the screen ? */\nif verify(base_address, 'ABCDEF0123456789') > 0\nthen call epilog 4\n\ndistance       = 4*(CurColPos-12)/11     /* convert byte offset */\ndecimal_offset = format(distance, 3, 0); /* to decimal offset   */\n\nhxasf = substr(base_address, 8, 1) /* test for odd start */\n\nif hxasf = '0' then nop            /* not an odd address */\nelse decimal_offset    = 0         /* recalculate offset */\n\ndecaddress = x2d(base_address) + decimal_offset\n\nif ddd,\nthen do\n   call prt 'decaddress' 'base_address'\n   call prt 'distance' 'decimal_offset'\nend\n\n/* determine amount of bytes to be disassembled */\nif datatype(tcstco) = 'NUM',\nthen amount = min(max(8, tcstco), 512)\nelse do\n  address ispexec \"vget (tcstco) profile\"\n  if datatype(tcstco) = 'NUM',\n  then amount = min(max(8, tcstco), 512)\n  else amount = 64  /* Default */\nend\n /* say amount*/\n\naddress ipcs\nresultdump = ObtainData(base_address decimal_offset amount)\n\nreturn\n\n/*-------------------------------------------------*/\nObtainData: procedure expose storage.\n/*-------------------------------------------------*/\n/* Function:  ObtainData                           */\n/*                                                 */\n/*  Retrieve data from the dump.  Invoke the IPCS  */\n/*  EVALUATE subcommand as necessary to access     */\n/*  512-byte blocks of data from the IPCS dump     */\n/*  source and store the data in variable          */\n/*  \"storage.\"                                     */\n/*                                                 */\n/* Input:     Description of data to access:       */\n/*                                                 */\n/*  Hex address of data.                           */\n/*  Decimal position from the hex address of the   */\n/*   first byte to access.                         */\n/*  Decimal length of the data to access.          */\n/*                                                 */\n/* Output:    Requested data is returned.          */\n/*-------------------------------------------------*/\n\narg hexaddress  decposition declength\n\nqueue 'Start Disassembly at:' hexaddress 'offset:',\n      decposition 'length: ' declength\n\n /* Indicate for IPCS that\n    it is an address       */\nhexaddressdot = hexaddress || '.'\n\naddress ipcs,\n\"EVALUATE\" hexaddressdot,\n  \"position(\"decposition\") LENGTH(\"declength\") \",\n \"REXX(STORAGE(XXX) unformatted)\"\n /*  \"note '\"hexaddress \"' asis\"*/\n /*  \"position(0) LENGTH(32)  check\"*/\n\nif rc > 0 then call epilog 8\n\nreturn c2x(substr(xxx, 1, declength))\n\n/*-------------------------------------------------*/\nAccessError: nop\n/*-------------------------------------------------*/\n  GEN$='IPCS Evaluate subcommand unable',\n        'to access storage'\n  \"NOTE '\"GEN$\"' ASIS\"\n  if rc>0 then exit 24;\nexit 20\n\n/******************************************************************/\nAccessError:\n/******************************************************************/\n\nsay 'Error during Evaluate processing'\ncall epilog 8\n\n/******************************************************************/\n/* Interprets a set of dump contents (Hexa as Char) as a sequence */\n/* of machine instructions                                        */\n/* Input:   Hexa-as-Char String                                   */\n/* Output:  suqence of instructions, separated by '9' (X'4f')     */\n/* requwired: the dumpstring must not contain no-hex symbols and  */\n/*            has to begin with a opcdoe to start disassembly     */\ndisasm:\n/*****************************************************************/\n\narg dumpstring  debug\n\nopsnsi = 0        /* is altered in skipOverConstants    */\nminiprogram = ''  /* receives the sequence of instructions in  */\n                  /* Assembler-style, separated by x'4f'       */\nstnsi = 1         /* Start of next sequential instruction  */\n\n/* Concatenated Sequence of all Hex-Instructions */\nhexinstruction = ''\nold_instruction = '' /* previous Instruction */\n\ncall initializeOpcodes /* Initial values for stems           */\nif sdadbg = 'T' then trace i\n\n/* loop over the whole string       */\ndo until  stnsi >= length(dumpstring)\n\n   xinstruction = getInstruction(stnsi) /* fetch in Hexa-Format */\n   if ddd then call prt 'xinstruction'\n\n   /*  take care of overflow  */\n   if xinstruction = '?' then   leave\n\n   hexinstruction = hexinstruction || '|'       ||,\n                    word(xinstruction, 2)\n   sinstruction = decode(xinstruction)  /* translate into Assembler*/\n   if ddd then call prt 'sinstruction'\n\n   miniprogram  =  miniprogram || '|' || sinstruction\n\n   if opsnsi > 0,        /* is altered in skipOverConstants           */\n   then do               /* display them and skip to next instruction */\n      call displayConstants stnsi opsnsi\n      stnsi = opsnsi\n   end                     /* 1st Word Opcode */\n   else stnsi = stnsi + length(word(xinstruction, 2))\n\n   if ddd then call prt 'opsnsi' 'stnsi'\n\nend\n\nreturn\n\n/*********************************************/\n/* after a B D2(R15) an area fo constants is */\n/* assumed. It is displayed in DC-Format     */\ndisplayConstants:\n/*********************************************/\narg st oi\nconstantlength = oi-st-8\n\nif constantlength < 1,\nthen nop\n\nelse do\n   constants = substr(dumpstring, ipos+8, constantlength)\n   lconst = length(constants)\n\n   numrows = format((lconst -4)/8,, 0)\n   rstbyte = lconst // 8\n\n   if ddd then call prt 'numrows' 'rstbyte'\n\n   do lcl = 1 to numrows\n      call collectConstants  (lcl-1)*8 8\n   end\n\n   if rstbyte > 0, /* there is something left ... */\n   then do\n      call collectConstants  (lcl-1)*8 rstbyte\n   end\nend\n\n /* say constants*/\nreturn\n\n/*********************************************/\ncollectConstants:\n/*********************************************/\n\narg costart colen\nif ddd then call prt 'costart' 'colen'\n\nhexdata = substr(constants, 1 + costart, colen)\nif verify(hexdata, '1234567890ABCDEF') > 0,\nthen return\n\nhexinstruction = hexinstruction || '|' || hexdata\nhexvalue = 'DC      C''' || x2c(value(hexdata)) || ''''\n/* calculate offsets and addresses */\nxd = d2x(decaddress)\nxad = xad || '|' || xd /* prepare for display */\ndecaddress = decaddress + 4\n\n\nif ddd then call prt 'hexdata' 'hexvalue'\n\nminiprogram  =  miniprogram || '|' || hexvalue\n\nreturn\n\n/*********************************************/\n/* define type & length of instruction       */\ngetInstruction:\n/**********************************************/\n\narg ipos  /* Position in dumpstring */\n\nif datatype(ipos) /= 'NUM'  ,\nthen return '?'  /* no appropriate value  */\n\n/* hxopc = OpCode (Hexa)           */\n/* hxopc is the 1st Byte that is sufficient for defining type & length*/\n/*  except  RRE- und RRF- instructions */\nhxopc = substr(dumpstring, ipos, 2)\n\nscan_length = min(12, length(dumpstring))\nhexinstr = substr(dumpstring, ipos, scan_length)\nif ddd then call prt 'hexinstr'\n\nopsnsi= 0                      /* is altered in skipOverConstants    */\n\nif pos('47F0F', hexinstr) = 1, /* B D2(R15) at beginning of module ? */\nthen call skipOverConstants\n\nif is4Bytes(hxopc) = 1,\nthen hexaopcod = substr(dumpstring, ipos, 4) /* 4-Byte-Opcode Extract */\nelse do\n    hexaopcod = getMnemoOpcode(hexinstr) /* assemble Hexa-OpCode */\nend\n\nif ddd then call prt 'hexaopcod'\n\nInst_Form = getInstruction_Format(hexaopcod)\n\n/* Length in Halfwords */\nI_Length = of.Inst_Form.#hw\n\nif ddd then call prt 'Inst_Form' 'I_Length'\n\nif datatype(I_Length) /= 'NUM', /* invalid opcode */\nthen return '?'\n\n/* calculate offsets and addresses */\nxd = d2x(decaddress)\nxad = xad || '|' || xd /* prepare for display */\ndecaddress = decaddress + I_Length*2\n\nif ddd then call prt 'decaddress'   'xd'\n\n/* return Opcode together with Instruction in Hexa-Format */\n if datatype(I_Length) /= 'NUM',\n then return '?'  /* not an appropriate value */\n\nif Inst_Form = 'BR' |,\n   Inst_Form = 'BX',\nthen hxo = substr(hxo, 1, 2)\n\nif ddd then call prt 'hxo'\nreturn hxo substr(dumpstring, ipos, I_Length*4)\n\n/********************************************************/\n/* at the beginning of a module there are DCs which are */\n/* displayed and the position of the next               */\n/* instruction is detected                              */\nskipOverConstants:\n/***********************************************************/\n/* Offset to instruction  */\nofnsi = x2d('0' || substr(hexinstr, 6, 3))\nnumhw = ofnsi - 2 /* Number of halfwords to be interpreted as DC*/\n\nif ddd then call prt 'ofnsi' 'numhw'\nnumhw = max(0, numhw)\n\n/* Position of nsi */\nif numhw > 0,\nthen do\n   opsnsi = ipos + ofnsi*2  /* points to next instruction */\n   /* test */ ohxins = substr(dumpstring, opsnsi, 12) /* test*/\nend\nelse opsnsi = 0\n\nif ddd then call prt 'opsnsi' 'ohxins'\n\n\nreturn\n\n/********************************************************/\n/* Evaluates Instruction Format, additionally respecting */\n/* the Condition Code (CC) of the previous instruction   */\n/* (because of n Branch-Mnemonics                        */\ngetInstruction_Format:\n/********************************************************/\n\narg hxo /* hexadecimal Opcode */\n\nif substr(hxo, 1, 2) = '07' |,\n   substr(hxo, 1, 2) = '47',\nthen do\n  if pos(substr(hxo, 3, 1), exXBRM) > 0,\n  then nop  /* extended Branch mnemonics exist */\n\n  else do\n     zxo = substr(hxo, 1, 2)  /* reduce format to BC-Format */\n     oform = opcode.zxo.format\n     if ddd then call prt 'oform'\n     return oform\n  end\n\nend\n\noform = opcode.hxo.format\n\nreturn oform\n\n/***********************************************/\n/* Decodes Hexa Instruction to symbolic        */\ndecode:\n/***********************************************/\n\narg opc hxinst /* Opcode Hex-Instruction */\n\nIMnemo_old = IMnemo\nIMnemo = opcode.opc.mnemo\nIType  = opcode.opc.format\n\nif ddd then call prt 'IMnemo' 'IType'\n/* say  'IMnemo' 'IType' */\n/* say   IMnemo   IType */\n\n/* Check for special menmonics in case of TM*-Instructions */\ndecodedOperands = transOperands(IType hxinst)\n\nIMnemo = xpform(IMnemo, 7)\n\nreturn IMnemo decodedOperands\n\n/**********************************************/\n/* expand String s to fixed length  l         */\nxpform: procedure\n/**********************************************/\n\narg s, l\nls = length(s)\n\nif ls < l,\nthen s2 = s ||copies(' ', l-ls)\nelse s2 = s\n\nreturn s2\n\n/*****************************************/\n/* translate internal format of Operands */\n/* into Display-Format                   */\ntransOperands:\n/***************************************/\n\narg instype hexinstr /* Instruction-Type, Hexa-Instruction */\n\n\n/* unit of size is the halfbyte    */\nOpcodeLength = of.instype.lenOpCode /* *2  in Halfbytes */\n\n/* Display-Layout, 1st Layout-Element is always at Position 1 */\ndisplo = of.instype.layout\nif ddd then call prt 'OpcodeLength'   'displo'\n\nDisplayOperation = ''\n\nif ddd then call prt 'of.instype.#operands.0'\ndo lop = 1 to of.instype.#operands.0 /* go thru all operands */\n\n   /* Display-sequence */\n   dispElem = substr(of.instype.sequence, lop, 1)\n   if ddd then call prt 'lop' 'dispElem'\n\n   /* Length of Display-Operand */\n   LenSubOperand = of.instype.#operands.#len.dispElem\n\n   /* Operand for Output  */\n   OfsSubOperand = OpcodeLength + getOfsSubOperand(dispElem)\n   xoperand = strip(substr(hexinstr, OfsSubOperand, LenSubOperand))\n\n   if ddd then call prt 'OfsSubOperand' 'LenSubOperand'\n\n   doperand = x2d(xoperand, 8)\n   if ddd then call prt 'xoperand' 'doperand'\n\n   /* special treatment for some instruction types */\n   doperand = specials(lop  instype  doperand xoperand)\n\n   /* convert into readable format */\n   DisplayOperation = DisplayOperation ||,\n     fillLayout(displo  doperand)\n\n   ls = pos('#', displo)\n   if ls > 0 then, /* work in progress ? */\n   displo = substr(displo, ls+1)\n\n   else do\n     endofdisplo = length(displo)\n     if endofdisplo > 0,\n     then DisplayOperation = substr(displo, endofdisplo)\n   end\n\nend\n\nreturn DisplayOperation\n\n/************************************************/\n/* special treatment for some instruction types */\nspecials:\n/************************************************/\n\narg lp  it dop xop\n\nif ddd then call prt 'lp' 'it'\nselect\n\nwhen lp = 2 & it = 'SS',   /* when SS, add 1 to length */\nthen do\n  sdop = dop+1\nend\n\nwhen lp = 2 & it = 'RSL',  /* when RSL, add 1 to length */\nthen do\n  sdop = dop+1\nend\n\nwhen (lp = 2 | lp = 5),\n   & it = 'SSA',   /* when SSA, add 1 to length fields */\nthen do\n  sdop = dop+1\nend\n\nwhen lp = 4,\n   & it = 'SSI',   /* when SSI, add 1 to length fields */\nthen do\n  sdop = dop+1\nend\n\nwhen it = 'RI3',           /* when RI3 Displacement in HW */\nthen do\n  if dop > 32767,          /* respect negative Displacements */\n  then dop = dop - 65536\n\n  sdop = dop*2\n\n  if sdop > 0,\n  then sdop = '+' || sdop\nend\n\nwhen lp = 2 & it = 'RI1',  /* display Halfwords  */\nthen do\n  if dop > 32767, /* negative halfword */\n  then sdop = dop - x2d('ffff') -1\n  else sdop = translate(format(dop, 6), '0', ' ')\nend\n\nwhen (it = 'SIYL' |,  /* when SIY (logical/arithmetic), */\n      it = 'SIYA'),   /* scramble address parts         */\n   & lp = 1,\nthen do\n  xdop = substr(xop, 4, 2) || substr(xop, 1, 3) /* rearrange parts */\n  sdop = x2d(xdop)\n  if ddd then call prt 'xop' 'sdop'\nend\n\nwhen it = 'SIYL',  /* when SIYL, translate 3rd operand to Bit */\n   & lp = 3,\nthen do\n/*   say xdop dop */\n  xdop = d2x(dop)  /* 1st re-translate to hex */\n  sdop = x2b(xdop) /* translate to Bit*/\n  if ddd then call prt 'xdop' 'sdop'\nend\n\nwhen it = 'RI2',   /* when RI2, scramble address parts */\n   & lp = 2,\nthen do\n  xdop = xop       /* use hex value   */\n  sdop = x2b(xdop) /* translate to Bit*/\n  if ddd then call prt 'xdop' 'sdop'\nend\n\nwhen it = 'RIET',   /* when RIET, use MASK Format */\n   & lp = 3,\nthen do\n  xdop = xop       /* use hex value   */\n  sdop = x2b(xdop) /* translate to Bit*/\n  if ddd then call prt 'xdop' 'sdop'\nend\n\nwhen it = 'RIE2',   /* when RIE2, use MASK Format */\n   & lp = 3,\nthen do\n  xdop = xop       /* use hex value   */\n  sdop = x2b(xdop) /* translate to Bit*/\n  if ddd then call prt 'xdop' 'sdop'\nend\n\nwhen it = 'SI2',   /* when RI2, scramble address parts */\n   & lp = 3,\nthen do\n  xdop = xop       /* use hex value   */\n  sdop = x2b(xdop) /* translate to Bit*/\n  if ddd then call prt 'xdop' 'sdop'\nend\n\nwhen it = 'RRF2',  /* when RRF2, scramble address parts */\n   & lp = 2,\nthen do\n  xdop = d2x(dop)  /* 1st re-translate to hex */\n  sdop = x2b(xdop) /* 2nd translate to Bit    */\nend\n\nwhen it = 'RRFM',  /* when RRFM, use Mask Format */\n   & lp = 3,\nthen do\n  xdop = d2x(dop)  /* 1st re-translate to hex */\n  sdop = x2b(xdop) /* 2nd translate to Bit    */\nend\n\nwhen it = 'RRF4',  /* when RRF4, use Mask Format */\n   & lp = 4,\nthen do\n  xdop = d2x(dop)  /* 1st re-translate to hex */\n  sdop = x2b(xdop) /* 2nd translate to Bit    */\nend\n\nwhen it = 'RS2',  /* when RS2, scramble address parts */\n   & lp = 2,\nthen do\n  xdop = d2x(dop)  /* 1st re-translate to hex */\n  sdop = x2b(xdop) /* 2nd translate to Bit    */\nend\n\nwhen it = 'RIL2',  /* when RIL2 (address), scramble address parts */\n   & lp = 1,\nthen do\n  xdop = d2x(dop)  /* 1st re-translate to hex */\n  sdop = x2b(xdop) /* 2nd translate to Bit    */\n  if ddd then call prt 'dop' 'xdop'\n  sdop = 2*dop     /* Transform from HW to Bytes */\n  if ddd then call prt 'sdop' 'dop'\nend\n\nwhen it = 'RIL2',  /* when RIL2 (address), scramble address parts */\n   & lp = 2,\nthen do\n  xdop = d2x(dop)  /* 1st re-translate to hex */\n  sdop = x2b(xdop) /* 2nd translate to Bit    */\n  if ddd then call prt 'dop' 'xdop'\n  sdop = 2*dop     /* Transform from HW to Bytes */\n  if ddd then call prt 'sdop' 'dop'\nend\n\nwhen (it = 'RSI' | it = 'RIER'),\n   & lp = 3,\nthen do\n  sdop = 2*dop     /* Transform from HW to Bytes */\nend\n\nwhen it = 'RILR',\n   & lp = 2,\nthen do\n  sdop = 2*dop\nend\n\nwhen it = 'RI4',\n   & lp = 2,\nthen do\n  sdop = 2*dop\nend\n\nwhen it = 'RI4',\n   & lp = 2,\nthen do\n  sdop = 2*dop\nend\n\n\nwhen it = 'RSY2', /* when RSY2, scramble address parts */\n   & lp = 2,\nthen do\n  xdop = d2x(dop)  /* 1st re-translate to hex */\n  sdop = x2b(xdop) /* 2nd translate to Bit    */\nend\n\notherwise sdop = dop\nend\n\nif ddd then call prt 'dop' 'sdop'\nreturn sdop\n\n/***************************************/\n/* provide Offset of a Sub-Operand     */\ngetOfsSubOperand:\n/***************************************/\n\narg #dispe  /* no. of Display-Element */\n\n/* special treatment for last Sub-Operand */\nif datatype(of.instype.#operands.#ofs.#dispe) = 'NUM',\nthen do\n   /* mind space inside an operation */\n   totalOffset = of.instype.#operands.#ofs.#dispe + 1\n   if ddd then call prt '#dispe' 'totalOffset'\nend\n\nelse do  /* normal treatment for normal sub-operands */\n   totalOffset = 1\n\n   if #dispe > 1,\n   then do j = 1 to #dispe-1\n\n      /* mind space inside an operation */\n      if datatype(of.instype.#operands.#ofs.j) = 'NUM',\n      then do\n         totalOffset = of.instype.#operands.#ofs.j  +,\n                       of.instype.#operands.#len.j  +1\n      end\n      else totalOffset = totalOffset + of.instype.#operands.#len.j\n\n      if ddd then call prt 'j' 'totalOffset'\n   end\n\nend\n\nreturn totalOffset\n\n/***************************************/\n/* fill Layout-Element with content    */\nfillLayout:\n/***************************************/\narg d  o\n\nparse var d left '#' rite\nsuboperand = left || o\n\nif length(rite) = 1,  /* take brackets */\nthen suboperand = suboperand || rite\n\nreturn suboperand\n\n/***************************************/\n/* get Mnemo-Opcode                    */\ngetMnemoOpcode:\n/***************************************/\n\narg hx  /* hexa-Instruction, length*/\n\nhx_1 = substr(hx, 1, 2)  /* maximum length of Opcodes */\nlxpm = getXtendedBranchMnemonics(hx)  /* convert BC */\n\nif lxpm > 0, /* eXtendedBranchMnemonics */\nthen do\n   hxopcode = substr(hx, 1, lxpm)\nend\n\nelse do\n   spo = wordpos(hx_1, split_opcodes)\n\n   if ddd then call prt 'spo'\n   if spo > 0, /* new, splitted Opcode */\n   then select\n\n     when spo = 1, /*  A5xx, RI-Type  */\n        then hx_2  = '0' || substr(hx, 4, 1) /* rest of opcode   */\n\n     when spo = 2, /*  A7xx, RI-Type  */\n        & substr(hx, 4, 1) /= '4',        /* Long Immediates    */\n        then hx_2  = '0' || substr(hx, 4, 1) /* rest of opcode   */\n\n     when spo = 2, /*  A7xx, RI-Type  */\n        & substr(hx, 4, 1) = '4',    /* Jump-Mnemonics     */\n        then hx_2  = substr(hx, 3, 2)        /* rest of opcode   */\n\n     when spo = 3, /*  C0xx, RIL-Type */\n        then hx_2  = substr(hx, 4, 1)        /* rest of opcode   */\n\n     when spo = 4, /*  C2xx, RIL-Type */\n        then hx_2  = substr(hx, 4, 1)        /* rest of opcode   */\n\n     when spo = 5, /*  C6xx, RIL-Type */\n        then hx_2  = substr(hx, 4, 1)        /* rest of opcode   */\n\n     when spo = 6, /*  EBxx, RSY1-Type */\n        then hx_2  = substr(hx, 11, 2)       /* rest of opcode   */\n\n     when spo = 7, /*  ECxx, RIE-Type */\n        then hx_2  = substr(hx, 11, 2)       /* rest of opcode   */\n\n     when spo = 8, /*  EDxx, RXE-Type */\n        then hx_2  = substr(hx, 11, 2)       /* rest of opcode   */\n\n     when spo = 9, /*  E3xx, RSY1-Type */\n        then hx_2  = substr(hx, 11, 2)       /* rest of opcode   */\n\n     when spo = 10, /*  C8xx, SSF-Type */\n        then hx_2  = '0' || substr(hx, 4, 1)       /* rest of opcode   */\n\n     when spo = 11, /*  C4xx, RIL-Type */\n        then hx_2  = substr(hx, 4, 1)        /* rest of opcode   */\n\n     otherwise hx_2 = ''\n   end\n\n   else do\n      /* find other Opcodes longer than 2 */\n      spo = wordpos(hx_1, long_opcodes)\n      if ddd then call prt 'spo'\n\n      if spo > 0,\n      then hx_2 = substr(hx, 3, 2)\n      else hx_2 = ''\n\n   end /*else*/\n\n   hxopcode = hx_1 || hx_2\nend /*else*/\n\nif ddd then call prt 'hxopcode'\n\nif checkForMask(hxopcode)\nthen hxopcode = hxopcode || 'M'\n\nif ddd then call prt 'hxopcode'\n\nreturn hxopcode\n\n/*********************************************/\ncheckForMask:  /* checks for TM-Relevance    */\n/*********************************************/\narg hxoc /* actual hex-opcode */\nexpandit = 0\n\n\nselect\nwhen wordpos(hxoc, Test_under_Mask) > 0,\nthen do\n   old_hxoc = 'M' /* remember Test Under Mask */\nend\n\nwhen substr(hxoc, 1, 2) = '47' |,/* Jumps or Branches */\n     substr(hxoc, 1, 2) = '07' |,\n    (substr(hxoc, 1, 2) = 'A7' &,\n     substr(hxoc, 4, 1) = '4') |,\n    (substr(hxoc, 1, 2) = 'C0' &,\n     substr(hxoc, 4, 1) = '4'),\nthen do\n    if old_hxoc = 'M',\n    then expandit = 1\nend\n\n\notherwise do\n   old_hxoc = ' '\n   expandit = 0\nend\nend /*selec*/\n\n/* Special case: x7E: */\nif  (substr(hxoc, 1, 3) = '47E' |,\n     substr(hxoc, 1, 3) = '07E'),\n   & old_hxoc /= 'M',\nthen expandit = 1\n\nif ddd then call prt 'old_hxoc'    'expandit'\n\nreturn expandit\n\n/*********************************************/\n/* In case of BC-Opcodes lengthen Hex-Opcode */\ngetXtendedBranchMnemonics:\n/*********************************************/\n\narg hxx\nif substr(hxx, 1, 2) = '47',    /* BC      */\n | substr(hxx, 1, 2) = '07',    /* BCR, J  */\nthen do\n   return 3     /* take 3rd Halfbyte of Opcode */\nend\n\n\nreturn 0\n\n/***************************************/\n/* set initial values                  */\ninitializeOpcodes:\n/***************************************/\n\n/* SPLIT_OPCODES = 'A5 A7 C0 C2 EB EC ED E3' */\nSPLIT_OPCODES   = 'A5 A7 C0 C2 C6 EB EC ED E3 C8 C4'\nLONG_OPCODES    = 'B2 B3 B9 E5 01'\nTest_under_Mask = 'A700 A701 A702 A703 91 EB51'\n/*\nif substr(mnemo, 1, 1) = 'J' |\n   substr(hxopcode, 1, 2) = '07' |\n   substr(hxopcode, 1 ,2) = '47' |\n*/\n /* XtendedBranchMnemonics_Suffix = 'C D F 0 2 4 7 8'*/\n\ntrace off\nOPCODE.AC.FORMAT = 'SI' ; OPCODE.AC.MNEMO = 'STNSM'\nOPCODE.AD.FORMAT = 'SI' ; OPCODE.AD.MNEMO = 'STOSM'\nOPCODE.AE.FORMAT = 'RS1' ; OPCODE.AE.MNEMO = 'SIGP'\nOPCODE.AF.FORMAT = 'SI' ; OPCODE.AF.MNEMO = 'MC'\nOPCODE.A50A.FORMAT = 'RI2' ; OPCODE.A50A.MNEMO = 'OILH'\nOPCODE.A50B.FORMAT = 'RI1' ; OPCODE.A50B.MNEMO = 'OILL'\nOPCODE.A50C.FORMAT = 'RI1' ; OPCODE.A50C.MNEMO = 'LLIHH'\nOPCODE.A50D.FORMAT = 'RI1' ; OPCODE.A50D.MNEMO = 'LLIHL'\nOPCODE.A50E.FORMAT = 'RI1' ; OPCODE.A50E.MNEMO = 'LLILH'\nOPCODE.A50F.FORMAT = 'RI1' ; OPCODE.A50F.MNEMO = 'LLILL'\nOPCODE.A500.FORMAT = 'RI1' ; OPCODE.A500.MNEMO = 'IIHH'\nOPCODE.A501.FORMAT = 'RI1' ; OPCODE.A501.MNEMO = 'IIHL'\nOPCODE.A502.FORMAT = 'RI1' ; OPCODE.A502.MNEMO = 'IILH'\nOPCODE.A503.FORMAT = 'RI1' ; OPCODE.A503.MNEMO = 'IILL'\nOPCODE.A504.FORMAT = 'RI1' ; OPCODE.A504.MNEMO = 'NIHH'\nOPCODE.A505.FORMAT = 'RI1' ; OPCODE.A505.MNEMO = 'NIHL'\nOPCODE.A506.FORMAT = 'RI2' ; OPCODE.A506.MNEMO = 'NILH'\nOPCODE.A507.FORMAT = 'RI1' ; OPCODE.A507.MNEMO = 'NILL'\nOPCODE.A508.FORMAT = 'RI1' ; OPCODE.A508.MNEMO = 'OIHH'\nOPCODE.A509.FORMAT = 'RI1' ; OPCODE.A509.MNEMO = 'OIHL'\nOPCODE.A7A4.FORMAT = 'RI3' ; OPCODE.A7A4.MNEMO = 'JHE'\nOPCODE.A7B4.FORMAT = 'RI3' ; OPCODE.A7B4.MNEMO = 'JNL'\nOPCODE.AFC0.FORMAT = 'RI3' ; OPCODE.A7B4.MNEMO = 'DWIM'\nOPCODE.A7B4M.FORMAT= 'RI3M' ; OPCODE.A7B4M.MNEMO = 'JNM'\nOPCODE.A7C4.FORMAT = 'RI3' ; OPCODE.A7C4.MNEMO = 'JLE'\nOPCODE.A7D4.FORMAT = 'RI3' ; OPCODE.A7D4.MNEMO = 'JNH'\nOPCODE.A7D4M.FORMAT= 'RI3M' ; OPCODE.A7D4M.MNEMO = 'JNP'\nOPCODE.A7E4.FORMAT = 'RI3' ; OPCODE.A7E4.MNEMO = 'JNO'\nOPCODE.A7E4M.FORMAT= 'RI3M'; OPCODE.A7E4M.MNEMO= 'JNO'\nOPCODE.A7F4.FORMAT = 'RI3' ; OPCODE.A7F4.MNEMO = 'J'\nOPCODE.A70A.FORMAT = 'RI1' ; OPCODE.A70A.MNEMO = 'AHI'\nOPCODE.A70B.FORMAT = 'RI1' ; OPCODE.A70B.MNEMO = 'AGHI'\nOPCODE.A70C.FORMAT = 'RI1' ; OPCODE.A70C.MNEMO = 'MHI'\nOPCODE.A70D.FORMAT = 'RI1' ; OPCODE.A70D.MNEMO = 'MGHI'\nOPCODE.A70E.FORMAT = 'RI1' ; OPCODE.A70E.MNEMO = 'CHI'\nOPCODE.A70F.FORMAT = 'RI1' ; OPCODE.A70F.MNEMO = 'CGHI'\nOPCODE.A700.FORMAT = 'RI2' ; OPCODE.A700.MNEMO = 'TMH'\nOPCODE.A701.FORMAT = 'RI2' ; OPCODE.A701.MNEMO = 'TML'\nOPCODE.A702.FORMAT = 'RI2' ; OPCODE.A702.MNEMO = 'TMHH'\nOPCODE.A703.FORMAT = 'RI2' ; OPCODE.A703.MNEMO = 'TMHL'\nOPCODE.A704.FORMAT = 'RI4' ; OPCODE.A704.MNEMO = 'BRC'\nOPCODE.A705.FORMAT = 'RI4' ; OPCODE.A705.MNEMO = 'BRAS'\nOPCODE.A706.FORMAT = 'RI4' ; OPCODE.A706.MNEMO = 'BRCT'\nOPCODE.A707.FORMAT = 'RI4' ; OPCODE.A707.MNEMO = 'BRCTG'\nOPCODE.A708.FORMAT = 'RI1' ; OPCODE.A708.MNEMO = 'LHI'\nOPCODE.A709.FORMAT = 'RI1' ; OPCODE.A709.MNEMO = 'LGHI'\nOPCODE.A714.FORMAT = 'RI3' ; OPCODE.A714.MNEMO = 'JO'\nOPCODE.A714M.FORMAT= 'RI3' ; OPCODE.A714M.MNEMO = 'JO'\nOPCODE.A724.FORMAT = 'RI3' ; OPCODE.A724.MNEMO = 'JH'\nOPCODE.A724M.FORMAT= 'RI3' ; OPCODE.A724M.MNEMO= 'JP'\nOPCODE.A734.FORMAT = 'RI3' ; OPCODE.A734.MNEMO = 'JNLE'\nOPCODE.A744.FORMAT = 'RI3' ; OPCODE.A744.MNEMO = 'JL'\nOPCODE.A744M.FORMAT= 'RI3'  ; OPCODE.A744M.MNEMO = 'JM'\nOPCODE.A754.FORMAT = 'RI3' ; OPCODE.A754.MNEMO = 'JNHE'\nOPCODE.A764.FORMAT = 'RI3' ; OPCODE.A764.MNEMO = 'JLH'\nOPCODE.A774.FORMAT = 'RI3' ; OPCODE.A774.MNEMO = 'JNE'\nOPCODE.A774M.FORMAT= 'RI3' ; OPCODE.A774M.MNEMO = 'JNZ'\nOPCODE.A784.FORMAT = 'RI3' ; OPCODE.A784.MNEMO = 'JE'\nOPCODE.A784M.FORMAT = 'RI3' ; OPCODE.A784M.MNEMO = 'JZ'\nOPCODE.A794.FORMAT = 'RI3' ; OPCODE.A794.MNEMO = 'JNLH'\nOPCODE.A8.FORMAT = 'RS1' ; OPCODE.A8.MNEMO = 'MVCLE'\nOPCODE.A9.FORMAT = 'RS1' ; OPCODE.A9.MNEMO = 'CLCLE'\nOPCODE.BA.FORMAT = 'RS1' ; OPCODE.BA.MNEMO = 'CS'\nOPCODE.BB.FORMAT = 'RS1' ; OPCODE.BB.MNEMO = 'CDS'\nOPCODE.BD.FORMAT = 'RS2' ; OPCODE.BD.MNEMO = 'CLM'\nOPCODE.BE.FORMAT = 'RS2' ; OPCODE.BE.MNEMO = 'STCM'\nOPCODE.BF.FORMAT = 'RS2' ; OPCODE.BF.MNEMO = 'ICM'\nOPCODE.B1.FORMAT = 'RX' ; OPCODE.B1.MNEMO = 'LRA'\nOPCODE.B2A5.FORMAT = 'RRE2' ; OPCODE.B2A5.MNEMO = 'TRE'\nOPCODE.B2A6.FORMAT = 'RRE2' ; OPCODE.B2A6.MNEMO = 'CUUTF'\nOPCODE.B2A7.FORMAT = 'RRE2' ; OPCODE.B2A7.MNEMO = 'CUTFU'\nOPCODE.B2B1.FORMAT = 'S' ; OPCODE.B2B1.MNEMO = 'STFL'\nOPCODE.B2B2.FORMAT = 'S' ; OPCODE.B2B2.MNEMO = 'LPSWE'\nOPCODE.B2FF.FORMAT = 'S' ; OPCODE.B2FF.MNEMO = 'TRAP4'\nOPCODE.B20A.FORMAT = 'S' ; OPCODE.B20A.MNEMO = 'SPKA'\nOPCODE.B20B.FORMAT = 'S' ; OPCODE.B20B.MNEMO = 'IPK'\nOPCODE.B20D.FORMAT = 'S' ; OPCODE.B20D.MNEMO = 'PTLB'\nOPCODE.B202.FORMAT = 'S' ; OPCODE.B202.MNEMO = 'STIDP'\nOPCODE.B204.FORMAT = 'S' ; OPCODE.B204.MNEMO = 'SCK'\nOPCODE.B205.FORMAT = 'S' ; OPCODE.B205.MNEMO = 'STCK'\nOPCODE.B206.FORMAT = 'S' ; OPCODE.B206.MNEMO = 'SCKC'\nOPCODE.B207.FORMAT = 'S' ; OPCODE.B207.MNEMO = 'STCKC'\nOPCODE.B208.FORMAT = 'S' ; OPCODE.B208.MNEMO = 'SPT'\nOPCODE.B209.FORMAT = 'S' ; OPCODE.B209.MNEMO = 'STPT'\nOPCODE.B21A.FORMAT = 'S' ; OPCODE.B21A.MNEMO = 'CFC'\nOPCODE.B210.FORMAT = 'S' ; OPCODE.B210.MNEMO = 'SPX'\nOPCODE.B211.FORMAT = 'S' ; OPCODE.B211.MNEMO = 'STPX'\nOPCODE.B212.FORMAT = 'S' ; OPCODE.B212.MNEMO = 'STAP'\nOPCODE.B214.FORMAT = 'S' ; OPCODE.B214.MNEMO = 'SIE'\nOPCODE.B218.FORMAT = 'S' ; OPCODE.B218.MNEMO = 'PC'\nOPCODE.B219.FORMAT = 'S' ; OPCODE.B219.MNEMO = 'SAC'\nOPCODE.B22A.FORMAT = 'RRE2' ; OPCODE.B22A.MNEMO = 'RRBE'\nOPCODE.B22B.FORMAT = 'RRE2' ; OPCODE.B22B.MNEMO = 'SSKE'\nOPCODE.B22C.FORMAT = 'RRE2' ; OPCODE.B22C.MNEMO = 'TB'\nOPCODE.B22D.FORMAT = 'RRE2' ; OPCODE.B22D.MNEMO = 'DXR'\nOPCODE.B22E.FORMAT = 'RRE2' ; OPCODE.B22E.MNEMO = 'PGIN'\nOPCODE.B22F.FORMAT = 'RRE2' ; OPCODE.B22F.MNEMO = 'PGOUT'\nOPCODE.B221.FORMAT = 'RRE2' ; OPCODE.B221.MNEMO = 'IPTE'\nOPCODE.B222.FORMAT = 'RRE1' ; OPCODE.B222.MNEMO = 'IPM'\nOPCODE.B223.FORMAT = 'RRE2' ; OPCODE.B223.MNEMO = 'IVSK'\nOPCODE.B224.FORMAT = 'RRE1' ; OPCODE.B224.MNEMO = 'IAC'\nOPCODE.B225.FORMAT = 'RRE1' ; OPCODE.B225.MNEMO = 'SSAR'\nOPCODE.B99F.FORMAT = 'RRE1' ; OPCODE.B99F.MNEMO = 'SSAIR'\nOPCODE.B226.FORMAT = 'RRE1' ; OPCODE.B226.MNEMO = 'EPAR'\nOPCODE.B227.FORMAT = 'RRE1' ; OPCODE.B227.MNEMO = 'ESAR'\nOPCODE.B99A.FORMAT = 'RRE1' ; OPCODE.B99A.MNEMO = 'EPAIR'\nOPCODE.B99B.FORMAT = 'RRE1' ; OPCODE.B99B.MNEMO = 'ESAIR'\nOPCODE.B228.FORMAT = 'RRE2' ; OPCODE.B228.MNEMO = 'PT'\nOPCODE.B229.FORMAT = 'RRE2' ; OPCODE.B229.MNEMO = 'ISKE'\nOPCODE.B23A.FORMAT = 'S' ; OPCODE.B23A.MNEMO = 'STCPS'\nOPCODE.B23B.FORMAT = 'S' ; OPCODE.B23B.MNEMO = 'RCHP'\nOPCODE.B23C.FORMAT = 'S' ; OPCODE.B23C.MNEMO = 'SCHM'\nOPCODE.B230.FORMAT = 'S' ; OPCODE.B230.MNEMO = 'CSCH'\nOPCODE.B231.FORMAT = 'S' ; OPCODE.B231.MNEMO = 'HSCH'\nOPCODE.B232.FORMAT = 'S' ; OPCODE.B232.MNEMO = 'MSCH'\nOPCODE.B233.FORMAT = 'S' ; OPCODE.B233.MNEMO = 'SSCH'\nOPCODE.B234.FORMAT = 'S' ; OPCODE.B234.MNEMO = 'STSCH'\nOPCODE.B235.FORMAT = 'S' ; OPCODE.B235.MNEMO = 'TSCH'\nOPCODE.B236.FORMAT = 'S' ; OPCODE.B236.MNEMO = 'TPI'\nOPCODE.B237.FORMAT = 'S' ; OPCODE.B237.MNEMO = 'SAL'\nOPCODE.B238.FORMAT = 'S' ; OPCODE.B238.MNEMO = 'RSCH'\nOPCODE.B239.FORMAT = 'S' ; OPCODE.B239.MNEMO = 'STCRW'\nOPCODE.B24A.FORMAT = 'RRE2' ; OPCODE.B24A.MNEMO = 'ESTA'\nOPCODE.B24B.FORMAT = 'RRE2' ; OPCODE.B24B.MNEMO = 'LURA'\nOPCODE.B24C.FORMAT = 'RRE2' ; OPCODE.B24C.MNEMO = 'TAR'\nOPCODE.B24D.FORMAT = 'RRE2' ; OPCODE.B24D.MNEMO = 'CPYA'\nOPCODE.B24E.FORMAT = 'RRE2' ; OPCODE.B24E.MNEMO = 'SAR'\nOPCODE.B24F.FORMAT = 'RRE2' ; OPCODE.B24F.MNEMO = 'EAR'\nOPCODE.B240.FORMAT = 'RRE2' ; OPCODE.B240.MNEMO = 'BAKR'\nOPCODE.B241.FORMAT = 'RRE2' ; OPCODE.B241.MNEMO = 'CKSM'\nOPCODE.B244.FORMAT = 'RRE2' ; OPCODE.B244.MNEMO = 'SQDR'\nOPCODE.B245.FORMAT = 'RRE2' ; OPCODE.B245.MNEMO = 'SQER'\nOPCODE.B246.FORMAT = 'RRE2' ; OPCODE.B246.MNEMO = 'STURA'\nOPCODE.B247.FORMAT = 'RRE1' ; OPCODE.B247.MNEMO = 'MSTA'\nOPCODE.B248.FORMAT = 'S' ; OPCODE.B248.MNEMO = 'PALB'\nOPCODE.B249.FORMAT = 'RRE2' ; OPCODE.B249.MNEMO = 'EREG'\nOPCODE.B25A.FORMAT = 'RRE2' ; OPCODE.B25A.MNEMO = 'BSA'\nOPCODE.B25D.FORMAT = 'RRE2' ; OPCODE.B25D.MNEMO = 'CLST'\nOPCODE.B25E.FORMAT = 'RRE2' ; OPCODE.B25E.MNEMO = 'SRST'\nOPCODE.B9BE.FORMAT = 'RRE2' ; OPCODE.B9BE.MNEMO = 'SRSTU'\nOPCODE.B250.FORMAT = 'RRE2' ; OPCODE.B250.MNEMO = 'CSP'\nOPCODE.B252.FORMAT = 'RRE2' ; OPCODE.B252.MNEMO = 'MSR'\nOPCODE.B254.FORMAT = 'RRE2' ; OPCODE.B254.MNEMO = 'MVPG'\nOPCODE.B255.FORMAT = 'RRE2' ; OPCODE.B255.MNEMO = 'MVST'\nOPCODE.B257.FORMAT = 'RRE2' ; OPCODE.B257.MNEMO = 'CUSE'\nOPCODE.B258.FORMAT = 'RRE2' ; OPCODE.B258.MNEMO = 'BSG'\nOPCODE.B263.FORMAT = 'RRE2' ; OPCODE.B263.MNEMO = 'CMPSC'\nOPCODE.B27D.FORMAT = 'S' ; OPCODE.B27D.MNEMO = 'STSI'\nOPCODE.B274.FORMAT = 'S' ; OPCODE.B274.MNEMO = 'SIGA'\nOPCODE.B276.FORMAT = 'S' ; OPCODE.B276.MNEMO = 'XSCH'\nOPCODE.B277.FORMAT = 'S' ; OPCODE.B277.MNEMO = 'RP'\nOPCODE.B278.FORMAT = 'S' ; OPCODE.B278.MNEMO = 'STCKE'\nOPCODE.B279.FORMAT = 'S' ; OPCODE.B279.MNEMO = 'SACF'\nOPCODE.B29C.FORMAT = 'S' ; OPCODE.B29C.MNEMO = 'STFPC'\nOPCODE.B29D.FORMAT = 'S' ; OPCODE.B29D.MNEMO = 'LFPC'\nOPCODE.B299.FORMAT = 'S' ; OPCODE.B299.MNEMO = 'SRNM'\nOPCODE.B3AA.FORMAT = 'RRF2' ; OPCODE.B3AA.MNEMO = 'CGXBR'\nOPCODE.B3A4.FORMAT = 'RRE2' ; OPCODE.B3A4.MNEMO = 'CEGBR'\nOPCODE.B3A5.FORMAT = 'RRE2' ; OPCODE.B3A5.MNEMO = 'CDGBR'\nOPCODE.B3A6.FORMAT = 'RRE2' ; OPCODE.B3A6.MNEMO = 'CXGBR'\nOPCODE.B3A8.FORMAT = 'RRF2' ; OPCODE.B3A8.MNEMO = 'CGEBR'\nOPCODE.B3A9.FORMAT = 'RRF2' ; OPCODE.B3A9.MNEMO = 'CGDBR'\nOPCODE.B3BA.FORMAT = 'RRF2' ; OPCODE.B3BA.MNEMO = 'CFXR'\nOPCODE.B3B4.FORMAT = 'RRE2' ; OPCODE.B3B4.MNEMO = 'CEFR'\nOPCODE.B3B5.FORMAT = 'RRE2' ; OPCODE.B3B5.MNEMO = 'CDFR'\nOPCODE.B3B6.FORMAT = 'RRE2' ; OPCODE.B3B6.MNEMO = 'CXFR'\nOPCODE.B3B8.FORMAT = 'RRF2' ; OPCODE.B3B8.MNEMO = 'CFER'\nOPCODE.B3B9.FORMAT = 'RRF2' ; OPCODE.B3B9.MNEMO = 'CFDR'\nOPCODE.B3CA.FORMAT = 'RRF2' ; OPCODE.B3CA.MNEMO = 'CGXR'\nOPCODE.B3C4.FORMAT = 'RRE2' ; OPCODE.B3C4.MNEMO = 'CEGR'\nOPCODE.B3C5.FORMAT = 'RRE2' ; OPCODE.B3C5.MNEMO = 'CDGR'\nOPCODE.B3C6.FORMAT = 'RRE2' ; OPCODE.B3C6.MNEMO = 'CXGR'\nOPCODE.B3C8.FORMAT = 'RRF2' ; OPCODE.B3C8.MNEMO = 'CGER'\nOPCODE.B3C9.FORMAT = 'RRF2' ; OPCODE.B3C9.MNEMO = 'CGDR'\nOPCODE.B30A.FORMAT = 'RRE2' ; OPCODE.B30A.MNEMO = 'AEBR'\nOPCODE.B30B.FORMAT = 'RRE2' ; OPCODE.B30B.MNEMO = 'SEBR'\nOPCODE.B30C.FORMAT = 'RRE2' ; OPCODE.B30C.MNEMO = 'MDEBR'\nOPCODE.B30D.FORMAT = 'RRE2' ; OPCODE.B30D.MNEMO = 'DEBR'\nOPCODE.B30E.FORMAT = 'RRF1' ; OPCODE.B30E.MNEMO = 'MAEBR'\nOPCODE.B30F.FORMAT = 'RRF1' ; OPCODE.B30F.MNEMO = 'MSEBR'\nOPCODE.B300.FORMAT = 'RRE2' ; OPCODE.B300.MNEMO = 'LPEBR'\nOPCODE.B301.FORMAT = 'RRE2' ; OPCODE.B301.MNEMO = 'LNEBR'\nOPCODE.B302.FORMAT = 'RRE2' ; OPCODE.B302.MNEMO = 'LTEBR'\nOPCODE.B303.FORMAT = 'RRE2' ; OPCODE.B303.MNEMO = 'LCEBR'\nOPCODE.B304.FORMAT = 'RRE2' ; OPCODE.B304.MNEMO = 'LDEBR'\nOPCODE.B305.FORMAT = 'RRE2' ; OPCODE.B305.MNEMO = 'LXDBR'\nOPCODE.B306.FORMAT = 'RRE2' ; OPCODE.B306.MNEMO = 'LXEBR'\nOPCODE.B307.FORMAT = 'RRE2' ; OPCODE.B307.MNEMO = 'MXDBR'\nOPCODE.B308.FORMAT = 'RRE2' ; OPCODE.B308.MNEMO = 'KEBR'\nOPCODE.B309.FORMAT = 'RRE2' ; OPCODE.B309.MNEMO = 'CEBR'\nOPCODE.B31A.FORMAT = 'RRE2' ; OPCODE.B31A.MNEMO = 'ADBR'\nOPCODE.B31B.FORMAT = 'RRE2' ; OPCODE.B31B.MNEMO = 'SDBR'\nOPCODE.B31C.FORMAT = 'RRE2' ; OPCODE.B31C.MNEMO = 'MDBR'\nOPCODE.B31D.FORMAT = 'RRE2' ; OPCODE.B31D.MNEMO = 'DDBR'\nOPCODE.B31E.FORMAT = 'RRF1' ; OPCODE.B31E.MNEMO = 'MADBR'\nOPCODE.B31F.FORMAT = 'RRF1' ; OPCODE.B31F.MNEMO = 'MSDBR'\nOPCODE.B310.FORMAT = 'RRE2' ; OPCODE.B310.MNEMO = 'LPDBR'\nOPCODE.B311.FORMAT = 'RRE2' ; OPCODE.B311.MNEMO = 'LNDBR'\nOPCODE.B312.FORMAT = 'RRE2' ; OPCODE.B312.MNEMO = 'LTDBR'\nOPCODE.B313.FORMAT = 'RRE2' ; OPCODE.B313.MNEMO = 'LCDBR'\nOPCODE.B314.FORMAT = 'RRE2' ; OPCODE.B314.MNEMO = 'SQEBR'\nOPCODE.B315.FORMAT = 'RRE2' ; OPCODE.B315.MNEMO = 'SQDBR'\nOPCODE.B316.FORMAT = 'RRE2' ; OPCODE.B316.MNEMO = 'SQXBR'\nOPCODE.B317.FORMAT = 'RRE2' ; OPCODE.B317.MNEMO = 'MEEBR'\nOPCODE.B318.FORMAT = 'RRE2' ; OPCODE.B318.MNEMO = 'KDBR'\nOPCODE.B319.FORMAT = 'RRE2' ; OPCODE.B319.MNEMO = 'CDBR'\nOPCODE.B32E.FORMAT = 'RRF1' ; OPCODE.B32E.MNEMO = 'MAER'\nOPCODE.B32F.FORMAT = 'RRF1' ; OPCODE.B32F.MNEMO = 'MSER'\nOPCODE.B33C.FORMAT = 'RRF1' ; OPCODE.B33C.MNEMO = 'MAYHR'\nOPCODE.B338.FORMAT = 'RRF1' ; OPCODE.B338.MNEMO = 'MAYLR'\nOPCODE.B324.FORMAT = 'RRE2' ; OPCODE.B324.MNEMO = 'LDER'\nOPCODE.B325.FORMAT = 'RRE2' ; OPCODE.B325.MNEMO = 'LXDR'\nOPCODE.B326.FORMAT = 'RRE2' ; OPCODE.B326.MNEMO = 'LXER'\nOPCODE.B33E.FORMAT = 'RRF1' ; OPCODE.B33E.MNEMO = 'MADR'\nOPCODE.B33F.FORMAT = 'RRF1' ; OPCODE.B33F.MNEMO = 'MSDR'\nOPCODE.B336.FORMAT = 'RRE2' ; OPCODE.B336.MNEMO = 'SQXR'\nOPCODE.B337.FORMAT = 'RRE2' ; OPCODE.B337.MNEMO = 'MEER'\nOPCODE.B34A.FORMAT = 'RRE2' ; OPCODE.B34A.MNEMO = 'AXBR'\nOPCODE.B34B.FORMAT = 'RRE2' ; OPCODE.B34B.MNEMO = 'SXBR'\nOPCODE.B34C.FORMAT = 'RRE2' ; OPCODE.B34C.MNEMO = 'MXBR'\nOPCODE.B34D.FORMAT = 'RRE2' ; OPCODE.B34D.MNEMO = 'DXBR'\nOPCODE.B340.FORMAT = 'RRE2' ; OPCODE.B340.MNEMO = 'LPXBR'\nOPCODE.B341.FORMAT = 'RRE2' ; OPCODE.B341.MNEMO = 'LNXBR'\nOPCODE.B342.FORMAT = 'RRE2' ; OPCODE.B342.MNEMO = 'LTXBR'\nOPCODE.B343.FORMAT = 'RRE2' ; OPCODE.B343.MNEMO = 'LCXBR'\nOPCODE.B344.FORMAT = 'RRE2' ; OPCODE.B344.MNEMO = 'LEDBR'\nOPCODE.B345.FORMAT = 'RRE2' ; OPCODE.B345.MNEMO = 'LDXBR'\nOPCODE.B346.FORMAT = 'RRE2' ; OPCODE.B346.MNEMO = 'LEXBR'\nOPCODE.B347.FORMAT = 'RRF2' ; OPCODE.B347.MNEMO = 'FIXBR'\nOPCODE.B348.FORMAT = 'RRE2' ; OPCODE.B348.MNEMO = 'KXBR'\nOPCODE.B349.FORMAT = 'RRE2' ; OPCODE.B349.MNEMO = 'CXBR'\nOPCODE.B35B.FORMAT = 'RRF4' ; OPCODE.B35B.MNEMO = 'DIDBR'\nOPCODE.B35F.FORMAT = 'RRF2' ; OPCODE.B35F.MNEMO = 'FIDBR'\nOPCODE.B350.FORMAT = 'RRF2' ; OPCODE.B350.MNEMO = 'TBEDR'\nOPCODE.B351.FORMAT = 'RRF2' ; OPCODE.B351.MNEMO = 'TBDR'\nOPCODE.B353.FORMAT = 'RRF4' ; OPCODE.B353.MNEMO = 'DIEBR'\nOPCODE.B357.FORMAT = 'RRF2' ; OPCODE.B357.MNEMO = 'FIEBR'\nOPCODE.B358.FORMAT = 'RRE2' ; OPCODE.B358.MNEMO = 'THDER'\nOPCODE.B359.FORMAT = 'RRE2' ; OPCODE.B359.MNEMO = 'THDR'\nOPCODE.B360.FORMAT = 'RRE2' ; OPCODE.B360.MNEMO = 'LPXR'\nOPCODE.B361.FORMAT = 'RRE2' ; OPCODE.B361.MNEMO = 'LNXR'\nOPCODE.B362.FORMAT = 'RRE2' ; OPCODE.B362.MNEMO = 'LTXR'\nOPCODE.B363.FORMAT = 'RRE2' ; OPCODE.B363.MNEMO = 'LCXR'\nOPCODE.B365.FORMAT = 'RRE2' ; OPCODE.B365.MNEMO = 'LXR'\nOPCODE.B366.FORMAT = 'RRE2' ; OPCODE.B366.MNEMO = 'LEXR'\nOPCODE.B367.FORMAT = 'RRE2' ; OPCODE.B367.MNEMO = 'FIXR'\nOPCODE.B369.FORMAT = 'RRE2' ; OPCODE.B369.MNEMO = 'CXR'\nOPCODE.B37F.FORMAT = 'RRE2' ; OPCODE.B37F.MNEMO = 'FIDR'\nOPCODE.B374.FORMAT = 'RRE1' ; OPCODE.B374.MNEMO = 'LZER'\nOPCODE.B375.FORMAT = 'RRE1' ; OPCODE.B375.MNEMO = 'LZDR'\nOPCODE.B376.FORMAT = 'RRE1' ; OPCODE.B376.MNEMO = 'LZXR'\nOPCODE.B377.FORMAT = 'RRE2' ; OPCODE.B377.MNEMO = 'FIER'\nOPCODE.B38C.FORMAT = 'RRE1' ; OPCODE.B38C.MNEMO = 'EFPC'\nOPCODE.B384.FORMAT = 'RRE1' ; OPCODE.B384.MNEMO = 'SFPC'\nOPCODE.B39A.FORMAT = 'RRF2' ; OPCODE.B39A.MNEMO = 'CFXBR'\nOPCODE.B394.FORMAT = 'RRE2' ; OPCODE.B394.MNEMO = 'CEFBR'\nOPCODE.B395.FORMAT = 'RRE2' ; OPCODE.B395.MNEMO = 'CDFBR'\nOPCODE.B396.FORMAT = 'RRE2' ; OPCODE.B396.MNEMO = 'CXFBR'\nOPCODE.B398.FORMAT = 'RRF2' ; OPCODE.B398.MNEMO = 'CFEBR'\nOPCODE.B399.FORMAT = 'RRF2' ; OPCODE.B399.MNEMO = 'CFDBR'\nOPCODE.B6.FORMAT = 'RS1' ; OPCODE.B6.MNEMO = 'STCTL'\nOPCODE.B7.FORMAT = 'RS1' ; OPCODE.B7.MNEMO = 'LCTL'\nOPCODE.86.FORMAT = 'RS1' ; OPCODE.86.MNEMO = 'BXH'\nOPCODE.87.FORMAT = 'RS1' ; OPCODE.87.MNEMO = 'BXLE'\nOPCODE.9A.FORMAT = 'RS1' ; OPCODE.9A.MNEMO = 'LAM'\nOPCODE.9B.FORMAT = 'RS1' ; OPCODE.9B.MNEMO = 'STAM'\nOPCODE.90.FORMAT = 'RS1' ; OPCODE.90.MNEMO = 'STM'\nOPCODE.98.FORMAT = 'RS1' ; OPCODE.98.MNEMO = 'LM'\nOPCODE.99.FORMAT = 'RS1' ; OPCODE.99.MNEMO = 'TRACE'\nOPCODE.B90A.FORMAT = 'RRE2' ; OPCODE.B90A.MNEMO = 'ALGR'\nOPCODE.B90B.FORMAT = 'RRE2' ; OPCODE.B90B.MNEMO = 'SLGR'\nOPCODE.B90C.FORMAT = 'RRE2' ; OPCODE.B90C.MNEMO = 'MSGR'\nOPCODE.B90D.FORMAT = 'RRE2' ; OPCODE.B90D.MNEMO = 'DSGR'\nOPCODE.B90E.FORMAT = 'RRE2' ; OPCODE.B90E.MNEMO = 'EREGG'\nOPCODE.B90F.FORMAT = 'RRE2' ; OPCODE.B90F.MNEMO = 'LRVGR'\nOPCODE.B900.FORMAT = 'RRE2' ; OPCODE.B900.MNEMO = 'LPGR'\nOPCODE.B901.FORMAT = 'RRE2' ; OPCODE.B901.MNEMO = 'LNGR'\nOPCODE.B902.FORMAT = 'RRE2' ; OPCODE.B902.MNEMO = 'LTGR'\nOPCODE.B903.FORMAT = 'RRE2' ; OPCODE.B903.MNEMO = 'LCGR'\nOPCODE.B904.FORMAT = 'RRE2' ; OPCODE.B904.MNEMO = 'LGR'\nOPCODE.B905.FORMAT = 'RRE2' ; OPCODE.B905.MNEMO = 'LURAG'\nOPCODE.B908.FORMAT = 'RRE2' ; OPCODE.B908.MNEMO = 'AGR'\nOPCODE.B909.FORMAT = 'RRE2' ; OPCODE.B909.MNEMO = 'SGR'\nOPCODE.B91A.FORMAT = 'RRE2' ; OPCODE.B91A.MNEMO = 'ALGFR'\nOPCODE.B91B.FORMAT = 'RRE2' ; OPCODE.B91B.MNEMO = 'SLGFR'\nOPCODE.B91C.FORMAT = 'RRE2' ; OPCODE.B91C.MNEMO = 'MSGFR'\nOPCODE.B91D.FORMAT = 'RRE2' ; OPCODE.B91D.MNEMO = 'DSGFR'\nOPCODE.B91E.FORMAT = 'RRE2' ; OPCODE.B91E.MNEMO = 'KMAC'\nOPCODE.B91F.FORMAT = 'RRE2' ; OPCODE.B91F.MNEMO = 'LRVR'\nOPCODE.B910.FORMAT = 'RRE2' ; OPCODE.B910.MNEMO = 'LPGFR'\nOPCODE.B911.FORMAT = 'RRE2' ; OPCODE.B911.MNEMO = 'LNGFR'\nOPCODE.B912.FORMAT = 'RRE2' ; OPCODE.B912.MNEMO = 'LTGFR'\nOPCODE.B913.FORMAT = 'RRE2' ; OPCODE.B913.MNEMO = 'LCGFR'\nOPCODE.B914.FORMAT = 'RRE2' ; OPCODE.B914.MNEMO = 'LGFR'\nOPCODE.B916.FORMAT = 'RRE2' ; OPCODE.B916.MNEMO = 'LLGFR'\nOPCODE.B917.FORMAT = 'RRE2' ; OPCODE.B917.MNEMO = 'LLGTR'\nOPCODE.B918.FORMAT = 'RRE2' ; OPCODE.B918.MNEMO = 'AGFR'\nOPCODE.B919.FORMAT = 'RRE2' ; OPCODE.B919.MNEMO = 'SGFR'\nOPCODE.B92E.FORMAT = 'RRE2' ; OPCODE.B92E.MNEMO = 'KM'\nOPCODE.B92F.FORMAT = 'RRE2' ; OPCODE.B92F.MNEMO = 'KMC'\nOPCODE.B920.FORMAT = 'RRE2' ; OPCODE.B920.MNEMO = 'CGR'\nOPCODE.B921.FORMAT = 'RRE2' ; OPCODE.B921.MNEMO = 'CLGR'\nOPCODE.B925.FORMAT = 'RRE2' ; OPCODE.B925.MNEMO = 'STURG'\nOPCODE.B93E.FORMAT = 'RRE2' ; OPCODE.B93E.MNEMO = 'KIMD'\nOPCODE.B93F.FORMAT = 'RRE2' ; OPCODE.B93F.MNEMO = 'KLMD'\nOPCODE.B930.FORMAT = 'RRE2' ; OPCODE.B930.MNEMO = 'CGFR'\nOPCODE.B931.FORMAT = 'RRE2' ; OPCODE.B931.MNEMO = 'CLGFR'\nOPCODE.B946.FORMAT = 'RRE2' ; OPCODE.B946.MNEMO = 'BCTGR'\nOPCODE.B98A.FORMAT = 'RRE2' ; OPCODE.B98A.MNEMO = 'CSPG'\nOPCODE.B98D.FORMAT = 'RRE2' ; OPCODE.B98D.MNEMO = 'EPSW'\nOPCODE.B98E.FORMAT = 'RRF2' ; OPCODE.B98E.MNEMO = 'IDTE'\nOPCODE.B980.FORMAT = 'RRE2' ; OPCODE.B980.MNEMO = 'NGR'\nOPCODE.B981.FORMAT = 'RRE2' ; OPCODE.B981.MNEMO = 'OGR'\nOPCODE.B982.FORMAT = 'RRE2' ; OPCODE.B982.MNEMO = 'XGR'\nOPCODE.B986.FORMAT = 'RRE2' ; OPCODE.B986.MNEMO = 'MLGR'\nOPCODE.B987.FORMAT = 'RRE2' ; OPCODE.B987.MNEMO = 'DLGR'\nOPCODE.B988.FORMAT = 'RRE2' ; OPCODE.B988.MNEMO = 'ALCGR'\nOPCODE.B989.FORMAT = 'RRE2' ; OPCODE.B989.MNEMO = 'SLBGR'\nOPCODE.B99D.FORMAT = 'RRE1' ; OPCODE.B99D.MNEMO = 'ESEA'\nOPCODE.B990.FORMAT = 'RRE2' ; OPCODE.B990.MNEMO = 'TRTT'\nOPCODE.B991.FORMAT = 'RRE2' ; OPCODE.B991.MNEMO = 'TRTO'\nOPCODE.B992.FORMAT = 'RRF2' ; OPCODE.B992.MNEMO = 'TROT'\nOPCODE.B993.FORMAT = 'RRF2' ; OPCODE.B993.MNEMO = 'TROO'\nOPCODE.B996.FORMAT = 'RRE2' ; OPCODE.B996.MNEMO = 'MLR'\nOPCODE.B997.FORMAT = 'RRE2' ; OPCODE.B997.MNEMO = 'DLR'\nOPCODE.B998.FORMAT = 'RRE2' ; OPCODE.B998.MNEMO = 'ALCR'\nOPCODE.B999.FORMAT = 'RRE2' ; OPCODE.B999.MNEMO = 'SLBR'\nOPCODE.C0B4.FORMAT = 'RIL2' ; OPCODE.C0B4.MNEMO = 'JNL'\nOPCODE.C0B4M.FORMAT ='RIL2M' ; OPCODE.C0B4M.MNEMO = 'JNM'\nOPCODE.C0D4.FORMAT = 'RIL2'  ; OPCODE.C0D4.MNEMO = 'JNH'\nOPCODE.C0D4M.FORMAT = 'RIL2M' ; OPCODE.C0D4M.MNEMO = 'JNP'\nOPCODE.C0E4.FORMAT = 'RIL2'  ; OPCODE.C0E4.MNEMO = 'JGNO'\nOPCODE.C0F4.FORMAT = 'RIL2'  ; OPCODE.C0F4.MNEMO = 'JG'\nOPCODE.C00.FORMAT = 'RIL2' ; OPCODE.C00.MNEMO = 'LARL'\nOPCODE.C04.FORMAT  = 'RIL2' ; OPCODE.C04.MNEMO  = 'BRCL'\nOPCODE.C005.FORMAT = 'RIL2' ; OPCODE.C005.MNEMO = 'JASL'\nOPCODE.C014.FORMAT = 'RIL2'  ; OPCODE.C014.MNEMO = 'JGO'\nOPCODE.C024.FORMAT = 'RIL2'  ; OPCODE.C024.MNEMO = 'JGH'\nOPCODE.C024M.FORMAT = 'RIL2M' ; OPCODE.C024M.MNEMO = 'JGP'\nOPCODE.C034.FORMAT = 'RIL2'  ; OPCODE.C034.MNEMO = 'JGNLE'\nOPCODE.C044.FORMAT = 'RIL2'  ; OPCODE.C044.MNEMO = 'JGL'\nOPCODE.C044M.FORMAT = 'RIL2' ; OPCODE.C044M.MNEMO = 'JGM'\nOPCODE.C054.FORMAT = 'RIL2'  ; OPCODE.C054.MNEMO = 'JGNHE'\nOPCODE.C064.FORMAT = 'RIL2'  ; OPCODE.C064.MNEMO = 'JGLH'\nOPCODE.C074.FORMAT = 'RIL2'  ; OPCODE.C074.MNEMO = 'JGNE'\nOPCODE.C074M.FORMAT = 'RIL2M' ; OPCODE.C074M.MNEMO = 'JGNZ'\nOPCODE.C084.FORMAT = 'RIL2'  ; OPCODE.C084.MNEMO = 'JGE'\nOPCODE.C084M.FORMAT = 'RIL2' ; OPCODE.C084M.MNEMO = 'JGZ'\nOPCODE.C094.FORMAT = 'RIL2'  ; OPCODE.C094.MNEMO = 'JGNLH'\nOPCODE.C094.FORMAT = 'RIL2'  ; OPCODE.C094.MNEMO = 'JGNLH'\nOPCODE.C2F.FORMAT = 'RIL1' ; OPCODE.C2F.MNEMO = 'CLFI'\nOPCODE.C2C.FORMAT = 'RIL1' ; OPCODE.C2C.MNEMO = 'CGFI'\nOPCODE.C2B.FORMAT = 'RIL1' ; OPCODE.C2B.MNEMO = 'ALFI'\nOPCODE.C28.FORMAT = 'RIL1' ; OPCODE.C28.MNEMO = 'AGFI'\nOPCODE.C2A.FORMAT = 'RIL1' ; OPCODE.C2A.MNEMO = 'ALGFI'\nOPCODE.C2E.FORMAT = 'RIL1' ; OPCODE.C2E.MNEMO = 'CLGFI'\nOPCODE.C25.FORMAT = 'RIL1' ; OPCODE.C25.MNEMO = 'SLFI'\nOPCODE.C24.FORMAT = 'RIL1' ; OPCODE.C24.MNEMO = 'SLGFI'\nOPCODE.DA.FORMAT = 'SSR' ; OPCODE.DA.MNEMO = 'MVCP'\nOPCODE.DB.FORMAT = 'SSR' ; OPCODE.DB.MNEMO = 'MVCS'\nOPCODE.DC.FORMAT = 'SS' ; OPCODE.DC.MNEMO = 'TR'\nOPCODE.DD.FORMAT = 'SS' ; OPCODE.DD.MNEMO = 'TRT'\nOPCODE.DE.FORMAT = 'SS' ; OPCODE.DE.MNEMO = 'ED'\nOPCODE.DF.FORMAT = 'SS' ; OPCODE.DF.MNEMO = 'EDMK'\nOPCODE.D1.FORMAT = 'SS' ; OPCODE.D1.MNEMO = 'MVN'\nOPCODE.D2.FORMAT = 'SS' ; OPCODE.D2.MNEMO = 'MVC'\nOPCODE.D3.FORMAT = 'SS' ; OPCODE.D3.MNEMO = 'MVZ'\nOPCODE.D4.FORMAT = 'SS' ; OPCODE.D4.MNEMO = 'NC'\nOPCODE.D5.FORMAT = 'SS' ; OPCODE.D5.MNEMO = 'CLC'\nOPCODE.D6.FORMAT = 'SS' ; OPCODE.D6.MNEMO = 'OC'\nOPCODE.D7.FORMAT = 'SS' ; OPCODE.D7.MNEMO = 'XC'\nOPCODE.D9.FORMAT = 'SSR' ; OPCODE.D9.MNEMO = 'MVCK'\nOPCODE.EA.FORMAT = 'SS' ; OPCODE.EA.MNEMO = 'UNPKA'\nOPCODE.EE.FORMAT = 'SSL' ; OPCODE.EE.MNEMO = 'PLO'\nOPCODE.EF.FORMAT = 'SSM' ; OPCODE.EF.MNEMO = 'LMD'\nOPCODE.E1.FORMAT = 'SSI' ; OPCODE.E1.MNEMO = 'PKU'\nOPCODE.E2.FORMAT = 'SS'  ; OPCODE.E2.MNEMO = 'UNPKU'\nOPCODE.E50E.FORMAT = 'SSE' ; OPCODE.E50E.MNEMO = 'MVCSK'\nOPCODE.E50F.FORMAT = 'SSE' ; OPCODE.E50F.MNEMO = 'MVCDK'\nOPCODE.E500.FORMAT = 'SSE' ; OPCODE.E500.MNEMO = 'LASP'\nOPCODE.E501.FORMAT = 'SSE' ; OPCODE.E501.MNEMO = 'TPROT'\nOPCODE.E502.FORMAT = 'SSE' ; OPCODE.E502.MNEMO = 'STRAG'\nOPCODE.E8.FORMAT = 'SS' ; OPCODE.E8.MNEMO = 'MVCIN'\nOPCODE.E9.FORMAT = 'SSI' ; OPCODE.E9.MNEMO = 'PKA'\nOPCODE.FA.FORMAT = 'SSA' ; OPCODE.FA.MNEMO = 'AP'\nOPCODE.FB.FORMAT = 'SSA' ; OPCODE.FB.MNEMO = 'SP'\nOPCODE.FC.FORMAT = 'SSA' ; OPCODE.FC.MNEMO = 'MP'\nOPCODE.FD.FORMAT = 'SSA' ; OPCODE.FD.MNEMO = 'DP'\nOPCODE.F0.FORMAT = 'SS3' ; OPCODE.F0.MNEMO = 'SRP'\nOPCODE.F1.FORMAT = 'SSA' ; OPCODE.F1.MNEMO = 'MVO'\nOPCODE.F2.FORMAT = 'SSA' ; OPCODE.F2.MNEMO = 'PACK'\nOPCODE.F3.FORMAT = 'SSA' ; OPCODE.F3.MNEMO = 'UNPK'\nOPCODE.F8.FORMAT = 'SSA' ; OPCODE.F8.MNEMO = 'ZAP'\nOPCODE.F9.FORMAT = 'SSA' ; OPCODE.F9.MNEMO = 'CP'\nOPCODE.0A.FORMAT = 'II' ; OPCODE.0A.MNEMO = 'SVC'\nOPCODE.0B.FORMAT = 'RR' ; OPCODE.0B.MNEMO = 'BSM'\nOPCODE.0C.FORMAT = 'RR' ; OPCODE.0C.MNEMO = 'BASSM'\nOPCODE.0D.FORMAT = 'RR' ; OPCODE.0D.MNEMO = 'BASR'\nOPCODE.0E.FORMAT = 'RR' ; OPCODE.0E.MNEMO = 'MVCL'\nOPCODE.0F.FORMAT = 'RR' ; OPCODE.0F.MNEMO = 'CLCL'\nOPCODE.01FF.FORMAT = 'E' ; OPCODE.01FF.MNEMO = 'TRAP2'\nOPCODE.010B.FORMAT = 'E' ; OPCODE.010B.MNEMO = 'TAM'\nOPCODE.010C.FORMAT = 'E' ; OPCODE.010C.MNEMO = 'SAM24'\nOPCODE.010D.FORMAT = 'E' ; OPCODE.010D.MNEMO = 'SAM31'\nOPCODE.010E.FORMAT = 'E' ; OPCODE.010E.MNEMO = 'SAM64'\nOPCODE.0101.FORMAT = 'E' ; OPCODE.0101.MNEMO = 'PR'\nOPCODE.0102.FORMAT = 'E' ; OPCODE.0102.MNEMO = 'UPT'\nOPCODE.0107.FORMAT = 'E' ; OPCODE.0107.MNEMO = 'SCKPF'\nOPCODE.04.FORMAT = 'RR0' ; OPCODE.04.MNEMO = 'SPM'\nOPCODE.05.FORMAT = 'RR' ; OPCODE.05.MNEMO = 'BALR'\nOPCODE.06.FORMAT = 'RR' ; OPCODE.06.MNEMO = 'BCTR'\nOPCODE.07.FORMAT  = 'BR' ; OPCODE.07.MNEMO = 'BCR'\nOPCODE.07B.FORMAT = 'RRB' ; OPCODE.07B.MNEMO = 'BNLR'\nOPCODE.07BM.FORMAT= 'RRM' ; OPCODE.07BM.MNEMO = 'BNMR'\nOPCODE.07C.FORMAT = 'RRB' ; OPCODE.07C.MNEMO = 'BLER'\nOPCODE.07D.FORMAT = 'RRB' ; OPCODE.07D.MNEMO = 'BNHR'\nOPCODE.07DM.FORMAT = 'RRM' ; OPCODE.07DM.MNEMO = 'BNPR'\nOPCODE.07EM.FORMAT= 'RRM' ; OPCODE.07EM.MNEMO = 'BNOR'\nOPCODE.07F.FORMAT = 'RRB' ; OPCODE.07F.MNEMO  = 'BR'\nOPCODE.070.FORMAT = 'RRB' ; OPCODE.070.MNEMO  = 'NOPR'\nOPCODE.071M.FORMAT= 'RRM' ; OPCODE.071M.MNEMO = 'BOR'\nOPCODE.071.FORMAT=  'RRM' ; OPCODE.071.MNEMO  = 'BOR'\nOPCODE.072.FORMAT = 'RRB' ; OPCODE.072.MNEMO  = 'BHR'\nOPCODE.074.FORMAT = 'RRB' ; OPCODE.074.MNEMO  = 'BLR'\nOPCODE.074M.FORMAT= 'RRM' ; OPCODE.074M.MNEMO = 'BMR'\nOPCODE.077.FORMAT = 'RRB' ; OPCODE.077.MNEMO  = 'BNER'\nOPCODE.077M.FORMAT= 'RRM' ; OPCODE.077M.MNEMO = 'BNZR'\nOPCODE.078.FORMAT = 'RRB' ; OPCODE.078.MNEMO  = 'BER'\nOPCODE.078M.FORMAT= 'RRM' ; OPCODE.078M.MNEMO = 'BZR'\nOPCODE.1A.FORMAT = 'RR' ; OPCODE.1A.MNEMO = 'AR'\nOPCODE.1B.FORMAT = 'RR' ; OPCODE.1B.MNEMO = 'SR'\nOPCODE.1C.FORMAT = 'RR' ; OPCODE.1C.MNEMO = 'MR'\nOPCODE.1D.FORMAT = 'RR' ; OPCODE.1D.MNEMO = 'DR'\nOPCODE.1E.FORMAT = 'RR' ; OPCODE.1E.MNEMO = 'ALR'\nOPCODE.1F.FORMAT = 'RR' ; OPCODE.1F.MNEMO = 'SLR'\nOPCODE.10.FORMAT = 'RR' ; OPCODE.10.MNEMO = 'LPR'\nOPCODE.11.FORMAT = 'RR' ; OPCODE.11.MNEMO = 'LNR'\nOPCODE.12.FORMAT = 'RR' ; OPCODE.12.MNEMO = 'LTR'\nOPCODE.13.FORMAT = 'RR' ; OPCODE.13.MNEMO = 'LCR'\nOPCODE.14.FORMAT = 'RR' ; OPCODE.14.MNEMO = 'NR'\nOPCODE.15.FORMAT = 'RR' ; OPCODE.15.MNEMO = 'CLR'\nOPCODE.16.FORMAT = 'RR' ; OPCODE.16.MNEMO = 'OR'\nOPCODE.17.FORMAT = 'RR' ; OPCODE.17.MNEMO = 'XR'\nOPCODE.18.FORMAT = 'RR' ; OPCODE.18.MNEMO = 'LR'\nOPCODE.19.FORMAT = 'RR' ; OPCODE.19.MNEMO = 'CR'\nOPCODE.2A.FORMAT = 'RR' ; OPCODE.2A.MNEMO = 'ADR'\nOPCODE.2B.FORMAT = 'RR' ; OPCODE.2B.MNEMO = 'SDR'\nOPCODE.2C.FORMAT = 'RR' ; OPCODE.2C.MNEMO = 'MDR'\nOPCODE.2D.FORMAT = 'RR' ; OPCODE.2D.MNEMO = 'DDR'\nOPCODE.2E.FORMAT = 'RR' ; OPCODE.2E.MNEMO = 'AWR'\nOPCODE.2F.FORMAT = 'RR' ; OPCODE.2F.MNEMO = 'SWR'\nOPCODE.20.FORMAT = 'RR' ; OPCODE.20.MNEMO = 'LPDR'\nOPCODE.21.FORMAT = 'RR' ; OPCODE.21.MNEMO = 'LNDR'\nOPCODE.22.FORMAT = 'RR' ; OPCODE.22.MNEMO = 'LTDR'\nOPCODE.23.FORMAT = 'RR' ; OPCODE.23.MNEMO = 'LCDR'\nOPCODE.24.FORMAT = 'RR' ; OPCODE.24.MNEMO = 'HDR'\nOPCODE.25.FORMAT = 'RR' ; OPCODE.25.MNEMO = 'LDXR'\nOPCODE.26.FORMAT = 'RR' ; OPCODE.26.MNEMO = 'MXR'\nOPCODE.27.FORMAT = 'RR' ; OPCODE.27.MNEMO = 'MXDR'\nOPCODE.28.FORMAT = 'RR' ; OPCODE.28.MNEMO = 'LDR'\nOPCODE.29.FORMAT = 'RR' ; OPCODE.29.MNEMO = 'CDR'\nOPCODE.3A.FORMAT = 'RR' ; OPCODE.3A.MNEMO = 'AER'\nOPCODE.3B.FORMAT = 'RR' ; OPCODE.3B.MNEMO = 'SER'\nOPCODE.3C.FORMAT = 'RR' ; OPCODE.3C.MNEMO = 'MDER'\nOPCODE.3D.FORMAT = 'RR' ; OPCODE.3D.MNEMO = 'DER'\nOPCODE.3E.FORMAT = 'RR' ; OPCODE.3E.MNEMO = 'AUR'\nOPCODE.3F.FORMAT = 'RR' ; OPCODE.3F.MNEMO = 'SUR'\nOPCODE.30.FORMAT = 'RR' ; OPCODE.30.MNEMO = 'LPER'\nOPCODE.31.FORMAT = 'RR' ; OPCODE.31.MNEMO = 'LNER'\nOPCODE.32.FORMAT = 'RR' ; OPCODE.32.MNEMO = 'LTER'\nOPCODE.33.FORMAT = 'RR' ; OPCODE.33.MNEMO = 'LCER'\nOPCODE.34.FORMAT = 'RR' ; OPCODE.34.MNEMO = 'HER'\nOPCODE.35.FORMAT = 'RR' ; OPCODE.35.MNEMO = 'LEDR'\nOPCODE.36.FORMAT = 'RR' ; OPCODE.36.MNEMO = 'AXR'\nOPCODE.37.FORMAT = 'RR' ; OPCODE.37.MNEMO = 'SXR'\nOPCODE.38.FORMAT = 'RR' ; OPCODE.38.MNEMO = 'LER'\nOPCODE.39.FORMAT = 'RR' ; OPCODE.39.MNEMO = 'CER'\nOPCODE.4A.FORMAT = 'RX' ; OPCODE.4A.MNEMO = 'AH'\nOPCODE.4B.FORMAT = 'RX' ; OPCODE.4B.MNEMO = 'SH'\nOPCODE.4C.FORMAT = 'RX' ; OPCODE.4C.MNEMO = 'MH'\nOPCODE.4D.FORMAT = 'RX' ; OPCODE.4D.MNEMO = 'BAS'\nOPCODE.4E.FORMAT = 'RX' ; OPCODE.4E.MNEMO = 'CVD'\nOPCODE.4F.FORMAT = 'RX' ; OPCODE.4F.MNEMO = 'CVB'\nOPCODE.40.FORMAT = 'RX' ; OPCODE.40.MNEMO = 'STH'\nOPCODE.41.FORMAT = 'RX' ; OPCODE.41.MNEMO = 'LA'\nOPCODE.42.FORMAT = 'RX' ; OPCODE.42.MNEMO = 'STC'\nOPCODE.43.FORMAT = 'RX' ; OPCODE.43.MNEMO = 'IC'\nOPCODE.44.FORMAT = 'RX' ; OPCODE.44.MNEMO = 'EX'\nOPCODE.45.FORMAT = 'RX' ; OPCODE.45.MNEMO = 'BAL'\nOPCODE.46.FORMAT = 'RX' ; OPCODE.46.MNEMO = 'BCT'\nOPCODE.47.FORMAT = 'BX' ; OPCODE.47.MNEMO = 'BC'\nOPCODE.47A.FORMAT = 'RXB' ; OPCODE.47A.MNEMO = 'BHE'\nOPCODE.47B.FORMAT = 'RXB' ; OPCODE.47B.MNEMO = 'BNL'\nOPCODE.47BM.FORMAT= 'RXM' ; OPCODE.47BM.MNEMO = 'BNM'\nOPCODE.47C.FORMAT = 'RXB' ; OPCODE.47C.MNEMO = 'BLE'\nOPCODE.47D.FORMAT = 'RXB' ; OPCODE.47D.MNEMO = 'BNH'\nOPCODE.47DM.FORMAT = 'RXM' ; OPCODE.47DM.MNEMO = 'BNP'\nOPCODE.47EM.FORMAT= 'RXM' ; OPCODE.47EM.MNEMO = 'BNO'\nOPCODE.47F.FORMAT = 'RXB' ; OPCODE.47F.MNEMO = 'B'\nOPCODE.470.FORMAT = 'RXB' ; OPCODE.470.MNEMO = 'NOP'\nOPCODE.471.FORMAT=  'RXB' ; OPCODE.471.MNEMO = 'BO'\nOPCODE.471M.FORMAT= 'RXB' ; OPCODE.471M.MNEMO = 'BO'\nOPCODE.472.FORMAT = 'RXB' ; OPCODE.472.MNEMO = 'BH'\nOPCODE.474.FORMAT = 'RXB' ; OPCODE.474.MNEMO = 'BL'\nOPCODE.474M.FORMAT= 'RXM' ; OPCODE.474M.MNEMO = 'BM'\nOPCODE.477.FORMAT = 'RXB' ; OPCODE.477.MNEMO = 'BNE'\nOPCODE.477M.FORMAT= 'RXM' ; OPCODE.477M.MNEMO = 'BNZ'\nOPCODE.478.FORMAT = 'RXB' ; OPCODE.478.MNEMO = 'BE'\nOPCODE.478M.FORMAT= 'RXM' ; OPCODE.478M.MNEMO = 'BZ'\nOPCODE.48.FORMAT = 'RX' ; OPCODE.48.MNEMO = 'LH'\nOPCODE.49.FORMAT = 'RX' ; OPCODE.49.MNEMO = 'CH'\nOPCODE.5A.FORMAT = 'RX' ; OPCODE.5A.MNEMO = 'A'\nOPCODE.5B.FORMAT = 'RX' ; OPCODE.5B.MNEMO = 'S'\nOPCODE.5C.FORMAT = 'RX' ; OPCODE.5C.MNEMO = 'M'\nOPCODE.5D.FORMAT = 'RX' ; OPCODE.5D.MNEMO = 'D'\nOPCODE.5E.FORMAT = 'RX' ; OPCODE.5E.MNEMO = 'AL'\nOPCODE.5F.FORMAT = 'RX' ; OPCODE.5F.MNEMO = 'SL'\nOPCODE.50.FORMAT = 'RX' ; OPCODE.50.MNEMO = 'ST'\nOPCODE.51.FORMAT = 'RX' ; OPCODE.51.MNEMO = 'LAE'\nOPCODE.54.FORMAT = 'RX' ; OPCODE.54.MNEMO = 'N'\nOPCODE.55.FORMAT = 'RX' ; OPCODE.55.MNEMO = 'CL'\nOPCODE.56.FORMAT = 'RX' ; OPCODE.56.MNEMO = 'O'\nOPCODE.57.FORMAT = 'RX' ; OPCODE.57.MNEMO = 'X'\nOPCODE.58.FORMAT = 'RX' ; OPCODE.58.MNEMO = 'L'\nOPCODE.59.FORMAT = 'RX' ; OPCODE.59.MNEMO = 'C'\nOPCODE.6A.FORMAT = 'RX' ; OPCODE.6A.MNEMO = 'AD'\nOPCODE.6B.FORMAT = 'RX' ; OPCODE.6B.MNEMO = 'SD'\nOPCODE.6C.FORMAT = 'RX' ; OPCODE.6C.MNEMO = 'MD'\nOPCODE.6D.FORMAT = 'RX' ; OPCODE.6D.MNEMO = 'DD'\nOPCODE.6E.FORMAT = 'RX' ; OPCODE.6E.MNEMO = 'AW'\nOPCODE.6F.FORMAT = 'RX' ; OPCODE.6F.MNEMO = 'SW'\nOPCODE.60.FORMAT = 'RX' ; OPCODE.60.MNEMO = 'STD'\nOPCODE.67.FORMAT = 'RX' ; OPCODE.67.MNEMO = 'MXD'\nOPCODE.68.FORMAT = 'RX' ; OPCODE.68.MNEMO = 'LD'\nOPCODE.69.FORMAT = 'RX' ; OPCODE.69.MNEMO = 'CD'\nOPCODE.7A.FORMAT = 'RX' ; OPCODE.7A.MNEMO = 'AE'\nOPCODE.7B.FORMAT = 'RX' ; OPCODE.7B.MNEMO = 'SE'\nOPCODE.7C.FORMAT = 'RX' ; OPCODE.7C.MNEMO = 'MDE'\nOPCODE.7D.FORMAT = 'RX' ; OPCODE.7D.MNEMO = 'DE'\nOPCODE.7E.FORMAT = 'RX' ; OPCODE.7E.MNEMO = 'AU'\nOPCODE.7F.FORMAT = 'RX' ; OPCODE.7F.MNEMO = 'SU'\nOPCODE.70.FORMAT = 'RX' ; OPCODE.70.MNEMO = 'STE'\nOPCODE.71.FORMAT = 'RX' ; OPCODE.71.MNEMO = 'MS'\nOPCODE.78.FORMAT = 'RX' ; OPCODE.78.MNEMO = 'LE'\nOPCODE.79.FORMAT = 'RX' ; OPCODE.79.MNEMO = 'CE'\nOPCODE.8A.FORMAT = 'RS'; OPCODE.8A.MNEMO = 'SRA'\nOPCODE.8B.FORMAT = 'RS'; OPCODE.8B.MNEMO = 'SLA'\nOPCODE.8C.FORMAT = 'RS'; OPCODE.8C.MNEMO = 'SRDL'\nOPCODE.8D.FORMAT = 'RS'; OPCODE.8D.MNEMO = 'SLDL'\nOPCODE.8E.FORMAT = 'RS'; OPCODE.8E.MNEMO = 'SRDA'\nOPCODE.8F.FORMAT = 'RS'; OPCODE.8F.MNEMO = 'SLDA'\nOPCODE.88.FORMAT = 'RS'; OPCODE.88.MNEMO = 'SRL'\nOPCODE.89.FORMAT = 'RS'; OPCODE.89.MNEMO = 'SLL'\nOPCODE.80.FORMAT = 'S' ; OPCODE.80.MNEMO = 'SSM'\nOPCODE.82.FORMAT = 'S' ; OPCODE.82.MNEMO = 'LPSW'\nOPCODE.84.FORMAT = 'RSI' ; OPCODE.84.MNEMO = 'BRXH'\nOPCODE.85.FORMAT = 'RSI' ; OPCODE.85.MNEMO = 'BRXLE'\nOPCODE.91.FORMAT = 'SI2'; OPCODE.91.MNEMO = 'TM'\nOPCODE.92.FORMAT = 'SI' ; OPCODE.92.MNEMO = 'MVI'\nOPCODE.93.FORMAT = 'S' ; OPCODE.93.MNEMO = 'TS'\nOPCODE.94.FORMAT = 'SI' ; OPCODE.94.MNEMO = 'NI'\nOPCODE.95.FORMAT = 'SI' ; OPCODE.95.MNEMO = 'CLI'\nOPCODE.96.FORMAT = 'SI' ; OPCODE.96.MNEMO = 'OI'\nOPCODE.97.FORMAT = 'SI' ; OPCODE.97.MNEMO = 'XI'\nOPCODE.EBC0.FORMAT = 'RSL' ; OPCODE.EBC0.MNEMO = 'TP'\nOPCODE.EB0A.FORMAT = 'RSY1' ; OPCODE.EB0A.MNEMO = 'SRAG'\nOPCODE.EB0B.FORMAT = 'RSY1' ; OPCODE.EB0B.MNEMO = 'SLAG'\nOPCODE.EB0C.FORMAT = 'RSY1' ; OPCODE.EB0C.MNEMO = 'SRLG'\nOPCODE.EB0D.FORMAT = 'RSY1' ; OPCODE.EB0D.MNEMO = 'SLLG'\nOPCODE.EB0F.FORMAT = 'RSY1' ; OPCODE.EB0F.MNEMO = 'TRACG'\nOPCODE.EB04.FORMAT = 'RSY1' ; OPCODE.EB04.MNEMO = 'LMG'\nOPCODE.EB1C.FORMAT = 'RSY1' ; OPCODE.EB1C.MNEMO = 'RLLG'\nOPCODE.EB1D.FORMAT = 'RSY1' ; OPCODE.EB1D.MNEMO = 'RLL'\nOPCODE.EB14.FORMAT = 'RSY1' ; OPCODE.EB14.MNEMO = 'CSY'\nOPCODE.EB2C.FORMAT = 'RSY2' ; OPCODE.EB2C.MNEMO = 'STCMH'\nOPCODE.EB2D.FORMAT = 'RSY2' ; OPCODE.EB2D.MNEMO = 'STCMY'\nOPCODE.EB2F.FORMAT = 'RSY1' ; OPCODE.EB2F.MNEMO = 'LCTLG'\nOPCODE.EB20.FORMAT = 'RSY2' ; OPCODE.EB20.MNEMO = 'CLMH'\nOPCODE.EB21.FORMAT = 'RSY2' ; OPCODE.EB21.MNEMO = 'CLMY'\nOPCODE.EB24.FORMAT = 'RSY1' ; OPCODE.EB24.MNEMO = 'STMG'\nOPCODE.EB25.FORMAT = 'RSY1' ; OPCODE.EB25.MNEMO = 'STCTG'\nOPCODE.EB26.FORMAT = 'RSY1' ; OPCODE.EB26.MNEMO = 'STMH'\nOPCODE.EB3E.FORMAT = 'RSY1' ; OPCODE.EB3E.MNEMO = 'CDSG'\nOPCODE.EB30.FORMAT = 'RSY1' ; OPCODE.EB30.MNEMO = 'CSG'\nOPCODE.EB31.FORMAT = 'RSY1' ; OPCODE.EB31.MNEMO = 'CDSY'\nOPCODE.EB44.FORMAT = 'RSY1' ; OPCODE.EB44.MNEMO = 'BXHG'\nOPCODE.EB45.FORMAT = 'RSY1' ; OPCODE.EB45.MNEMO = 'BXLEG'\nOPCODE.EB8E.FORMAT = 'RSY1' ; OPCODE.EB8E.MNEMO = 'MVCLU'\nOPCODE.EB8F.FORMAT = 'RSY1' ; OPCODE.EB8F.MNEMO = 'CLCLU'\nOPCODE.EB80.FORMAT = 'RSY2' ; OPCODE.EB80.MNEMO = 'ICMH'\nOPCODE.EB81.FORMAT = 'RSY2' ; OPCODE.EB81.MNEMO = 'ICMY'\nOPCODE.EB9A.FORMAT = 'RSY1' ; OPCODE.EB9A.MNEMO = 'LAMY'\nOPCODE.EB9B.FORMAT = 'RSY1' ; OPCODE.EB9B.MNEMO = 'STAMY'\nOPCODE.EB90.FORMAT = 'RSY1' ; OPCODE.EB90.MNEMO = 'STMY'\nOPCODE.EB96.FORMAT = 'RSY1' ; OPCODE.EB96.MNEMO = 'LMH'\nOPCODE.EB98.FORMAT = 'RSY1' ; OPCODE.EB98.MNEMO = 'LMY'\nOPCODE.EB51.FORMAT = 'SIYL' ; OPCODE.EB51.MNEMO = 'TMY'\nOPCODE.EB52.FORMAT = 'SIYA' ; OPCODE.EB52.MNEMO = 'MVIY'\nOPCODE.EB54.FORMAT = 'SIYL' ; OPCODE.EB54.MNEMO = 'NIY'\nOPCODE.EB55.FORMAT = 'SIYA' ; OPCODE.EB55.MNEMO = 'CLIY'\nOPCODE.EB56.FORMAT = 'SIYL' ; OPCODE.EB56.MNEMO = 'OIY'\nOPCODE.EB57.FORMAT = 'SIYL' ; OPCODE.EB57.MNEMO = 'XIY'\nOPCODE.EC44.FORMAT = 'RIER' ; OPCODE.EC44.MNEMO = 'BRXHG'\nOPCODE.EC45.FORMAT = 'RIER' ; OPCODE.EC45.MNEMO = 'BRXLG'\nOPCODE.ED0A.FORMAT = 'RXE' ; OPCODE.ED0A.MNEMO = 'AEB'\nOPCODE.ED0B.FORMAT = 'RXE' ; OPCODE.ED0B.MNEMO = 'SEB'\nOPCODE.ED1B.FORMAT = 'RXE' ; OPCODE.ED1B.MNEMO = 'SDB'\nOPCODE.ED0C.FORMAT = 'RXE' ; OPCODE.ED0C.MNEMO = 'MDEB'\nOPCODE.ED0D.FORMAT = 'RXE' ; OPCODE.ED0D.MNEMO = 'DEB'\nOPCODE.ED0E.FORMAT = 'RXF' ; OPCODE.ED0E.MNEMO = 'MAEB'\nOPCODE.ED0F.FORMAT = 'RXF' ; OPCODE.ED0F.MNEMO = 'MSEB'\nOPCODE.ED04.FORMAT = 'RXE' ; OPCODE.ED04.MNEMO = 'LDEB'\nOPCODE.ED05.FORMAT = 'RXE' ; OPCODE.ED05.MNEMO = 'LXDB'\nOPCODE.ED06.FORMAT = 'RXE' ; OPCODE.ED06.MNEMO = 'LXEB'\nOPCODE.ED07.FORMAT = 'RXE' ; OPCODE.ED07.MNEMO = 'MXDB'\nOPCODE.ED08.FORMAT = 'RXE' ; OPCODE.ED08.MNEMO = 'KEB'\nOPCODE.ED09.FORMAT = 'RXE' ; OPCODE.ED09.MNEMO = 'CEB'\nOPCODE.ED0A.FORMAT = 'RXE' ; OPCODE.ED0A.MNEMO = 'AEB'\nOPCODE.ED1A.FORMAT = 'RXE' ; OPCODE.ED1A.MNEMO = 'ADB'\nOPCODE.ED1C.FORMAT = 'RXE' ; OPCODE.ED1C.MNEMO = 'MDB'\nOPCODE.ED1D.FORMAT = 'RXE' ; OPCODE.ED1D.MNEMO = 'DDB'\nOPCODE.ED1E.FORMAT = 'RXF' ; OPCODE.ED1E.MNEMO = 'MADB'\nOPCODE.ED1F.FORMAT = 'RXF' ; OPCODE.ED1F.MNEMO = 'MSDB'\nOPCODE.ED10.FORMAT = 'RXE' ; OPCODE.ED10.MNEMO = 'TCEB'\nOPCODE.ED11.FORMAT = 'RXE' ; OPCODE.ED11.MNEMO = 'TCDB'\nOPCODE.ED12.FORMAT = 'RXE' ; OPCODE.ED12.MNEMO = 'TCXB'\nOPCODE.ED14.FORMAT = 'RXE' ; OPCODE.ED14.MNEMO = 'SQEB'\nOPCODE.ED15.FORMAT = 'RXE' ; OPCODE.ED15.MNEMO = 'SQDB'\nOPCODE.ED17.FORMAT = 'RXE' ; OPCODE.ED17.MNEMO = 'MEEB'\nOPCODE.ED18.FORMAT = 'RXE' ; OPCODE.ED18.MNEMO = 'KDB'\nOPCODE.ED19.FORMAT = 'RXE' ; OPCODE.ED19.MNEMO = 'CDB'\nOPCODE.ED2E.FORMAT = 'RXF' ; OPCODE.ED2E.MNEMO = 'MAE'\nOPCODE.ED2F.FORMAT = 'RXF' ; OPCODE.ED2F.MNEMO = 'MSE'\nOPCODE.ED24.FORMAT = 'RXE' ; OPCODE.ED24.MNEMO = 'LDE'\nOPCODE.ED25.FORMAT = 'RXE' ; OPCODE.ED25.MNEMO = 'LXD'\nOPCODE.ED26.FORMAT = 'RXE' ; OPCODE.ED26.MNEMO = 'LXE'\nOPCODE.ED3E.FORMAT = 'RXF' ; OPCODE.ED3E.MNEMO = 'MAD'\nOPCODE.ED3F.FORMAT = 'RXF' ; OPCODE.ED3F.MNEMO = 'MSD'\nOPCODE.ED34.FORMAT = 'RXE' ; OPCODE.ED34.MNEMO = 'SQE'\nOPCODE.ED35.FORMAT = 'RXE' ; OPCODE.ED35.MNEMO = 'SQD'\nOPCODE.ED37.FORMAT = 'RXE' ; OPCODE.ED37.MNEMO = 'MEE'\nOPCODE.ED64.FORMAT = 'RXY' ; OPCODE.ED64.MNEMO = 'LEY'\nOPCODE.ED65.FORMAT = 'RXY' ; OPCODE.ED65.MNEMO = 'LDY'\nOPCODE.ED66.FORMAT = 'RXY' ; OPCODE.ED66.MNEMO = 'STEY'\nOPCODE.ED67.FORMAT = 'RXY' ; OPCODE.ED67.MNEMO = 'STDY'\nOPCODE.E30A.FORMAT = 'RXY' ; OPCODE.E30A.MNEMO = 'ALG'\nOPCODE.E30B.FORMAT = 'RXY' ; OPCODE.E30B.MNEMO = 'SLG'\nOPCODE.E30C.FORMAT = 'RXY' ; OPCODE.E30C.MNEMO = 'RXE'\nOPCODE.E30D.FORMAT = 'RXY' ; OPCODE.E30D.MNEMO = 'DSG'\nOPCODE.E30E.FORMAT = 'RXE' ; OPCODE.E30E.MNEMO = 'CVBG'\nOPCODE.E30F.FORMAT = 'RXE' ; OPCODE.E30F.MNEMO = 'LRVG'\nOPCODE.E303.FORMAT = 'RXY' ; OPCODE.E303.MNEMO = 'LRAG'\nOPCODE.E304.FORMAT = 'RXE' ; OPCODE.E304.MNEMO = 'LG'\nOPCODE.E306.FORMAT = 'RXY' ; OPCODE.E306.MNEMO = 'CVBY'\nOPCODE.E308.FORMAT = 'RXE' ; OPCODE.E308.MNEMO = 'AG'\nOPCODE.E309.FORMAT = 'RXY' ; OPCODE.E309.MNEMO = 'SG'\nOPCODE.E31A.FORMAT = 'RXY' ; OPCODE.E31A.MNEMO = 'ALGF'\nOPCODE.E31B.FORMAT = 'RXY' ; OPCODE.E31B.MNEMO = 'SLGF'\nOPCODE.E30C.FORMAT = 'RXY' ; OPCODE.E30C.MNEMO = 'MSG'\nOPCODE.E31C.FORMAT = 'RXY' ; OPCODE.E31C.MNEMO = 'MSGF'\nOPCODE.E31D.FORMAT = 'RXY' ; OPCODE.E31D.MNEMO = 'DSGF'\nOPCODE.E31E.FORMAT = 'RXY' ; OPCODE.E31E.MNEMO = 'LRV'\nOPCODE.E31F.FORMAT = 'RXY' ; OPCODE.E31F.MNEMO = 'LRVH'\nOPCODE.E313.FORMAT = 'RXY' ; OPCODE.E313.MNEMO = 'LRAY'\nOPCODE.E314.FORMAT = 'RXY' ; OPCODE.E314.MNEMO = 'LGF'\nOPCODE.E315.FORMAT = 'RXY' ; OPCODE.E315.MNEMO = 'LGH'\nOPCODE.E316.FORMAT = 'RXY' ; OPCODE.E316.MNEMO = 'LLGF'\nOPCODE.E317.FORMAT = 'RXY' ; OPCODE.E317.MNEMO = 'LLGT'\nOPCODE.E318.FORMAT = 'RXY' ; OPCODE.E318.MNEMO = 'AGF'\nOPCODE.E319.FORMAT = 'RXY' ; OPCODE.E319.MNEMO = 'SGF'\nOPCODE.E32E.FORMAT = 'RXY' ; OPCODE.E32E.MNEMO = 'CVDG'\nOPCODE.E32F.FORMAT = 'RXY' ; OPCODE.E32F.MNEMO = 'STRVG'\nOPCODE.E320.FORMAT = 'RXY' ; OPCODE.E320.MNEMO = 'CG'\nOPCODE.E321.FORMAT = 'RXY' ; OPCODE.E321.MNEMO = 'CLG'\nOPCODE.E324.FORMAT = 'RXY' ; OPCODE.E324.MNEMO = 'STG'\nOPCODE.E326.FORMAT = 'RXY' ; OPCODE.E326.MNEMO = 'CVDY'\nOPCODE.E33E.FORMAT = 'RXY' ; OPCODE.E33E.MNEMO = 'STRV'\nOPCODE.E33F.FORMAT = 'RXY' ; OPCODE.E33F.MNEMO = 'STRVH'\nOPCODE.E330.FORMAT = 'RXY' ; OPCODE.E330.MNEMO = 'CGF'\nOPCODE.E331.FORMAT = 'RXY' ; OPCODE.E331.MNEMO = 'CLGF'\nOPCODE.E346.FORMAT = 'RXY' ; OPCODE.E346.MNEMO = 'BCTG'\nOPCODE.E35A.FORMAT = 'RXY' ; OPCODE.E35A.MNEMO = 'AY'\nOPCODE.E35B.FORMAT = 'RXY' ; OPCODE.E35B.MNEMO = 'SY'\nOPCODE.E35E.FORMAT = 'RXY' ; OPCODE.E35E.MNEMO = 'ALY'\nOPCODE.E35F.FORMAT = 'RXY' ; OPCODE.E35F.MNEMO = 'SLY'\nOPCODE.E350.FORMAT = 'RXY' ; OPCODE.E350.MNEMO = 'STY'\nOPCODE.E351.FORMAT = 'RXY' ; OPCODE.E351.MNEMO = 'MSY'\nOPCODE.E354.FORMAT = 'RXY' ; OPCODE.E354.MNEMO = 'NY'\nOPCODE.E355.FORMAT = 'RXY' ; OPCODE.E355.MNEMO = 'CLY'\nOPCODE.E356.FORMAT = 'RXY' ; OPCODE.E356.MNEMO = 'OY'\nOPCODE.E357.FORMAT = 'RXY' ; OPCODE.E357.MNEMO = 'XY'\nOPCODE.E358.FORMAT = 'RXY' ; OPCODE.E358.MNEMO = 'LY'\nOPCODE.E359.FORMAT = 'RXY' ; OPCODE.E359.MNEMO = 'CY'\nOPCODE.E37A.FORMAT = 'RXY' ; OPCODE.E37A.MNEMO = 'AHY'\nOPCODE.E37B.FORMAT = 'RXY' ; OPCODE.E37B.MNEMO = 'SHY'\nOPCODE.E370.FORMAT = 'RXY' ; OPCODE.E370.MNEMO = 'STHY'\nOPCODE.E371.FORMAT = 'RXY' ; OPCODE.E371.MNEMO = 'LAY'\nOPCODE.E372.FORMAT = 'RXY' ; OPCODE.E372.MNEMO = 'STCY'\nOPCODE.E373.FORMAT = 'RXY' ; OPCODE.E373.MNEMO = 'ICY'\nOPCODE.E376.FORMAT = 'RXY' ; OPCODE.E376.MNEMO = 'LB'\nOPCODE.E377.FORMAT = 'RXY' ; OPCODE.E377.MNEMO = 'LGB'\nOPCODE.E378.FORMAT = 'RXY' ; OPCODE.E378.MNEMO = 'LHY'\nOPCODE.E379.FORMAT = 'RXY' ; OPCODE.E379.MNEMO = 'CHY'\nOPCODE.E38E.FORMAT = 'RXY' ; OPCODE.E38E.MNEMO = 'STPQ'\nOPCODE.E38F.FORMAT = 'RXY' ; OPCODE.E38F.MNEMO = 'LPQ'\nOPCODE.E380.FORMAT = 'RXY' ; OPCODE.E380.MNEMO = 'NG'\nOPCODE.E381.FORMAT = 'RXY' ; OPCODE.E381.MNEMO = 'OG'\nOPCODE.E382.FORMAT = 'RXY' ; OPCODE.E382.MNEMO = 'XG'\nOPCODE.E386.FORMAT = 'RXY' ; OPCODE.E386.MNEMO = 'MLG'\nOPCODE.E387.FORMAT = 'RXY' ; OPCODE.E387.MNEMO = 'DLG'\nOPCODE.E388.FORMAT = 'RXY' ; OPCODE.E388.MNEMO = 'ALCG'\nOPCODE.E389.FORMAT = 'RXY' ; OPCODE.E389.MNEMO = 'SLBG'\nOPCODE.E390.FORMAT = 'RXY' ; OPCODE.E390.MNEMO = 'LLGC'\nOPCODE.E391.FORMAT = 'RXY' ; OPCODE.E391.MNEMO = 'LLGH'\nOPCODE.E396.FORMAT = 'RXY' ; OPCODE.E396.MNEMO = 'ML'\nOPCODE.E397.FORMAT = 'RXY' ; OPCODE.E397.MNEMO = 'DL'\nOPCODE.E398.FORMAT = 'RXY' ; OPCODE.E398.MNEMO = 'ALC'\nOPCODE.E399.FORMAT = 'RXY' ; OPCODE.E399.MNEMO = 'SLB'\n/*z9z10*/ OPCODE.B22B.FORMAT = 'RRF2' ; OPCODE.B22B.MNEMO = 'SSKE'\n/*z9z10*/ OPCODE.B27C.FORMAT = 'S' ; OPCODE.B27C.MNEMO = 'STCKF'\n/*z9z10*/ OPCODE.B2A6.FORMAT = 'RRF2' ; OPCODE.B2A6.MNEMO = 'CU21'\n/*z9z10*/ OPCODE.B2A6.FORMAT = 'RRF2' ; OPCODE.B2A6.MNEMO = 'CUUTF'\n/*z9z10*/ OPCODE.B2A7.FORMAT = 'RRF2' ; OPCODE.B2A7.MNEMO = 'CU12'\n/*z9z10*/ OPCODE.B2A7.FORMAT = 'RRF2' ; OPCODE.B2A7.MNEMO = 'CUTFU'\n/*z9z10*/ OPCODE.B2B0.FORMAT = 'S' ; OPCODE.B2B0.MNEMO = 'STFLE'\n/*z9z10*/ OPCODE.B2B9.FORMAT = 'S' ; OPCODE.B2B9.MNEMO = 'SRNMT'\n/*z9z10*/ OPCODE.B2BD.FORMAT = 'S' ; OPCODE.B2BD.MNEMO = 'LFAS'\n/*z9z10*/ OPCODE.B338.FORMAT = 'RRF2' ; OPCODE.B338.MNEMO = 'MAYLR'\n/*z9z10*/ OPCODE.B339.FORMAT = 'RRF1' ; OPCODE.B339.MNEMO = 'MYLR'\n/*z9z10*/ OPCODE.B33A.FORMAT = 'RRF2' ; OPCODE.B33A.MNEMO = 'MAYR'\n/*z9z10*/ OPCODE.B33B.FORMAT = 'RRF1' ; OPCODE.B33B.MNEMO = 'MYR'\n/*z9z10*/ OPCODE.B33C.FORMAT = 'RRF2' ; OPCODE.B33C.MNEMO = 'MAYHR'\n/*z9z10*/ OPCODE.B33D.FORMAT = 'RRF1' ; OPCODE.B33D.MNEMO = 'MYHR'\n/*z9z10*/ OPCODE.B370.FORMAT = 'RRE2' ; OPCODE.B370.MNEMO = 'LPDFR'\n/*z9z10*/ OPCODE.B371.FORMAT = 'RRE2' ; OPCODE.B371.MNEMO = 'LNDFR'\n/*z9z10*/ OPCODE.B372.FORMAT = 'RRF1' ; OPCODE.B372.MNEMO = 'CPSDR'\n/*z9z10*/ OPCODE.B373.FORMAT = 'RRE2' ; OPCODE.B373.MNEMO = 'LCDFR'\n/*z9z10*/ OPCODE.B385.FORMAT = 'RRE1' ; OPCODE.B385.MNEMO = 'SFASR'\n/*z9z10*/ OPCODE.B3C1.FORMAT = 'RRE2' ; OPCODE.B3C1.MNEMO = 'LDGR'\n/*z9z10*/ OPCODE.B3CD.FORMAT = 'RRE2' ; OPCODE.B3CD.MNEMO = 'LGDR'\n/*z9z10*/ OPCODE.B3D6.FORMAT = 'RRE2' ; OPCODE.B3D6.MNEMO = 'LTDTR'\n/*z9z10*/ OPCODE.B3D7.FORMAT = 'RRF3' ; OPCODE.B3D7.MNEMO = 'FIDTR'\n/*z9z10*/ OPCODE.B3D4.FORMAT = 'RRFM' ; OPCODE.B3D4.MNEMO = 'LDETR'\n/*z9z10*/ OPCODE.B3D5.FORMAT = 'RRF3' ; OPCODE.B3D5.MNEMO = 'LEDTR'\n/*z9z10*/ OPCODE.B3DD.FORMAT = 'RRF3' ; OPCODE.B3DD.MNEMO = 'LDXTR'\n/*z9z10*/ OPCODE.B3D2.FORMAT = 'RRR' ; OPCODE.B3D2.MNEMO = 'ADTR'\n/*z9z10*/ OPCODE.B3DA.FORMAT = 'RRR' ; OPCODE.B3DA.MNEMO = 'AXTR'\n/*z9z10*/ OPCODE.B3D1.FORMAT = 'RRR' ; OPCODE.B3D1.MNEMO = 'DDTR'\n/*z9z10*/ OPCODE.B3D9.FORMAT = 'RRR' ; OPCODE.B3D9.MNEMO = 'DXTR'\n/*z9z10*/ OPCODE.B3D0.FORMAT = 'RRR' ; OPCODE.B3D0.MNEMO = 'MDTR'\n/*z9z10*/ OPCODE.B3D8.FORMAT = 'RRR' ; OPCODE.B3D8.MNEMO = 'MXTR'\n/*z9z10*/ OPCODE.B3D3.FORMAT = 'RRR' ; OPCODE.B3D3.MNEMO = 'SDTR'\n/*z9z10*/ OPCODE.B3DB.FORMAT = 'RRR' ; OPCODE.B3DB.MNEMO = 'SXTR'\n/*z9z10*/ OPCODE.B3DC.FORMAT = 'RRFM' ; OPCODE.B3DC.MNEMO = 'LXDTR'\n/*z9z10*/ OPCODE.B3DE.FORMAT = 'RRE2' ; OPCODE.B3DE.MNEMO = 'LTXTR'\n/*z9z10*/ OPCODE.B3DF.FORMAT = 'RRF3' ; OPCODE.B3DF.MNEMO = 'FIXTR'\n/*z9z10*/ OPCODE.B3E0.FORMAT = 'RRE2' ; OPCODE.B3E0.MNEMO = 'KDTR'\n/*z9z10*/ OPCODE.B3E1.FORMAT = 'RRF2' ; OPCODE.B3E1.MNEMO = 'CGDTR'\n/*z9z10*/ OPCODE.B3E2.FORMAT = 'RRE2' ; OPCODE.B3E2.MNEMO = 'CUDTR'\n/*z9z10*/ OPCODE.B3E3.FORMAT = 'RRF2' ; OPCODE.B3E3.MNEMO = 'CSDTR'\n/*z9z10*/ OPCODE.B3E4.FORMAT = 'RRE2' ; OPCODE.B3E4.MNEMO = 'CDTR'\n/*z9z10*/ OPCODE.B3E5.FORMAT = 'RRE2' ; OPCODE.B3E5.MNEMO = 'EEDTR'\n/*z9z10*/ OPCODE.B3E7.FORMAT = 'RRE2' ; OPCODE.B3E7.MNEMO = 'ESDTR'\n/*z9z10*/ OPCODE.B3E8.FORMAT = 'RRE2' ; OPCODE.B3E8.MNEMO = 'KXTR'\n/*z9z10*/ OPCODE.B3E9.FORMAT = 'RRF2' ; OPCODE.B3E9.MNEMO = 'CGXTR'\n/*z9z10*/ OPCODE.B3EA.FORMAT = 'RRE2' ; OPCODE.B3EA.MNEMO = 'CUXTR'\n/*z9z10*/ OPCODE.B3EB.FORMAT = 'RRF2' ; OPCODE.B3EB.MNEMO = 'CSXTR'\n/*z9z10*/ OPCODE.B3EC.FORMAT = 'RRE2' ; OPCODE.B3EC.MNEMO = 'CXTR'\n/*z9z10*/ OPCODE.B3ED.FORMAT = 'RRE2' ; OPCODE.B3ED.MNEMO = 'EEXTR'\n/*z9z10*/ OPCODE.B3EF.FORMAT = 'RRE2' ; OPCODE.B3EF.MNEMO = 'ESXTR'\n/*z9z10*/ OPCODE.B3F1.FORMAT = 'RRE2' ; OPCODE.B3F1.MNEMO = 'CDGTR'\n/*z9z10*/ OPCODE.B3F2.FORMAT = 'RRE2' ; OPCODE.B3F2.MNEMO = 'CDUTR'\n/*z9z10*/ OPCODE.B3F3.FORMAT = 'RRE2' ; OPCODE.B3F3.MNEMO = 'CDSTR'\n/*z9z10*/ OPCODE.B3F4.FORMAT = 'RRE2' ; OPCODE.B3F4.MNEMO = 'CEDTR'\n/*z9z10*/ OPCODE.B3F5.FORMAT = 'RRF4' ; OPCODE.B3F5.MNEMO = 'QADTR'\n/*z9z10*/ OPCODE.B3F6.FORMAT = 'RRF1' ; OPCODE.B3F6.MNEMO = 'IEDTR'\n/*z9z10*/ OPCODE.B3F7.FORMAT = 'RRF4' ; OPCODE.B3F7.MNEMO = 'RRDTR'\n/*z9z10*/ OPCODE.B3F9.FORMAT = 'RRE2' ; OPCODE.B3F9.MNEMO = 'CXGTR'\n/*z9z10*/ OPCODE.B3FA.FORMAT = 'RRE2' ; OPCODE.B3FA.MNEMO = 'CXUTR'\n/*z9z10*/ OPCODE.B3FB.FORMAT = 'RRE2' ; OPCODE.B3FB.MNEMO = 'CXSTR'\n/*z9z10*/ OPCODE.B3FC.FORMAT = 'RRE2' ; OPCODE.B3FC.MNEMO = 'CEXTR'\n/*z9z10*/ OPCODE.B3FD.FORMAT = 'RRF4' ; OPCODE.B3FD.MNEMO = 'QAXTR'\n/*z9z10*/ OPCODE.B3FE.FORMAT = 'RRF1' ; OPCODE.B3FE.MNEMO = 'IEXTR'\n/*z9z10*/ OPCODE.B3FF.FORMAT = 'RRF4' ; OPCODE.B3FF.MNEMO = 'RRXTR'\n/*z9z10*/ OPCODE.B906.FORMAT = 'RRE2' ; OPCODE.B906.MNEMO = 'LGBR'\n/*z9z10*/ OPCODE.B907.FORMAT = 'RRE2' ; OPCODE.B907.MNEMO = 'LGHR'\n/*z9z10*/ OPCODE.B926.FORMAT = 'RRE2' ; OPCODE.B926.MNEMO = 'LBR'\n/*z9z10*/ OPCODE.B927.FORMAT = 'RRE2' ; OPCODE.B927.MNEMO = 'LHR'\n/*z9z10*/ OPCODE.B960.FORMAT = 'RRFM' ; OPCODE.B960.MNEMO = 'CGRT'\n/*z9z10*/ OPCODE.B961.FORMAT = 'RRFM' ; OPCODE.B961.MNEMO = 'CLGRT'\n/*z9z10*/ OPCODE.B972.FORMAT = 'RRFM' ; OPCODE.B972.MNEMO = 'CRT'\n/*z9z10*/ OPCODE.B973.FORMAT = 'RRFM' ; OPCODE.B973.MNEMO = 'CLRT'\n/*z9z10*/ OPCODE.B983.FORMAT = 'RRE2' ; OPCODE.B983.MNEMO = 'FLOGR'\n/*z9z10*/ OPCODE.B984.FORMAT = 'RRE2' ; OPCODE.B984.MNEMO = 'LLGCR'\n/*z9z10*/ OPCODE.B985.FORMAT = 'RRE2' ; OPCODE.B985.MNEMO = 'LLGHR'\n/*z9z10*/ OPCODE.B990.FORMAT = 'RRFM' ; OPCODE.B990.MNEMO = 'TRTT'\n/*z9z10*/ OPCODE.B991.FORMAT = 'RRFM' ; OPCODE.B991.MNEMO = 'TRTO'\n/*z9z10*/ OPCODE.B992.FORMAT = 'RRFM' ; OPCODE.B992.MNEMO = 'TROT'\n/*z9z10*/ OPCODE.B993.FORMAT = 'RRFM' ; OPCODE.B993.MNEMO = 'TROO'\n/*z9z10*/ OPCODE.B9BF.FORMAT = 'RRFM' ; OPCODE.B9BF.MNEMO = 'TRTE'\n/*z9z10*/ OPCODE.B9BD.FORMAT = 'RRFM' ; OPCODE.B9BD.MNEMO = 'TRTRE'\n/*z9z10*/ OPCODE.D0.FORMAT = 'SS' ; OPCODE.D0.MNEMO = 'TRTR'\n/*z9z10*/ OPCODE.B994.FORMAT = 'RRE2' ; OPCODE.B994.MNEMO = 'LLCR'\n/*z9z10*/ OPCODE.B995.FORMAT = 'RRE2' ; OPCODE.B995.MNEMO = 'LLHR'\n/*z9z10*/ OPCODE.B9A2.FORMAT = 'RRE1' ; OPCODE.B9A2.MNEMO = 'PTF'\n/*z9z10*/ OPCODE.B99E.FORMAT = 'RRE2' ; OPCODE.B99E.MNEMO = 'PTI'\n/*z9z10*/ OPCODE.0104.FORMAT = 'E' ;    OPCODE.0104.MNEMO = 'PTFF'\n/*z9z10*/ OPCODE.B9AA.FORMAT = 'RRF4' ; OPCODE.B9AA.MNEMO = 'LPTEA'\n/*z9z10*/ OPCODE.B9AF.FORMAT = 'RRE2' ; OPCODE.B9AF.MNEMO = 'PFMF'\n/*z9z10*/ OPCODE.B9B0.FORMAT = 'RRF2' ; OPCODE.B9B0.MNEMO = 'CU14'\n/*z9z10*/ OPCODE.B9B1.FORMAT = 'RRF2' ; OPCODE.B9B1.MNEMO = 'CU24'\n/*z9z10*/ OPCODE.B9B2.FORMAT = 'RRE2' ; OPCODE.B9B2.MNEMO = 'CU41'\n/*z9z10*/ OPCODE.B9B3.FORMAT = 'RRE2' ; OPCODE.B9B3.MNEMO = 'CU42'\n/*z9z10*/ OPCODE.C01.FORMAT = 'RIL1' ; OPCODE.C01.MNEMO = 'LGFI'\n/*z9z10*/ OPCODE.C05.FORMAT = 'RILR' ; OPCODE.C05.MNEMO = 'BRASL'\n/*z9z10*/ OPCODE.C06.FORMAT = 'RIL1' ; OPCODE.C06.MNEMO = 'XIHF'\n/*z9z10*/ OPCODE.C07.FORMAT = 'RIL1' ; OPCODE.C07.MNEMO = 'XILF'\n/*z9z10*/ OPCODE.C08.FORMAT = 'RIL1' ; OPCODE.C08.MNEMO = 'IIHF'\n/*z9z10*/ OPCODE.C09.FORMAT = 'RIL1' ; OPCODE.C09.MNEMO = 'IILF'\n/*z9z10*/ OPCODE.C0A.FORMAT = 'RIL1' ; OPCODE.C0A.MNEMO = 'NIHF'\n/*z9z10*/ OPCODE.C0B.FORMAT = 'RIL1' ; OPCODE.C0B.MNEMO = 'NILF'\n/*z9z10*/ OPCODE.C0C.FORMAT = 'RIL1' ; OPCODE.C0C.MNEMO = 'OIHF'\n/*z9z10*/ OPCODE.C0D.FORMAT = 'RIL1' ; OPCODE.C0D.MNEMO = 'OILF'\n/*z9z10*/ OPCODE.C0E.FORMAT = 'RIL1' ; OPCODE.C0E.MNEMO = 'LLIHF'\n/*z9z10*/ OPCODE.C0F.FORMAT = 'RIL1' ; OPCODE.C0F.MNEMO = 'LLILF'\n/*z9z10*/ OPCODE.C29.FORMAT = 'RIL1' ; OPCODE.C29.MNEMO = 'AFI'\n/*z9z10*/ OPCODE.C2B.FORMAT = 'RIL1' ; OPCODE.C2B.MNEMO = 'ALFI'\n/*z9z10*/ OPCODE.C2D.FORMAT = 'RIL1' ; OPCODE.C2D.MNEMO = 'CFI'\n/*z9z10*/ OPCODE.C21.FORMAT = 'RIL1' ; OPCODE.C21.MNEMO = 'MSFI'\n/*z9z10*/ OPCODE.C20.FORMAT = 'RIL1' ; OPCODE.C20.MNEMO = 'MSGFI'\n/*z9z10*/ OPCODE.C42.FORMAT = 'RILR' ; OPCODE.C42.MNEMO = 'LLHRL'\n/*z9z10*/ OPCODE.C44.FORMAT = 'RILR' ; OPCODE.C44.MNEMO = 'LGHRL'\n/*z9z10*/ OPCODE.C45.FORMAT = 'RILR' ; OPCODE.C45.MNEMO = 'LHRL'\n/*z9z10*/ OPCODE.C46.FORMAT = 'RILR' ; OPCODE.C46.MNEMO = 'LLGHRL'\n/*z9z10*/ OPCODE.C47.FORMAT = 'RILR' ; OPCODE.C47.MNEMO = 'STHRL'\n/*z9z10*/ OPCODE.C48.FORMAT = 'RILR' ; OPCODE.C48.MNEMO = 'LGRL'\n/*z9z10*/ OPCODE.C4B.FORMAT = 'RILR' ; OPCODE.C4B.MNEMO = 'STGRL'\n/*z9z10*/ OPCODE.C4C.FORMAT = 'RILR' ; OPCODE.C4C.MNEMO = 'LGFRL'\n/*z9z10*/ OPCODE.C4D.FORMAT = 'RILR' ; OPCODE.C4D.MNEMO = 'LRL'\n/*z9z10*/ OPCODE.C4E.FORMAT = 'RILR' ; OPCODE.C4E.MNEMO = 'LLGFRL'\n/*z9z10*/ OPCODE.C4F.FORMAT = 'RILR' ; OPCODE.C4F.MNEMO = 'STRL'\n/*z9z10*/ OPCODE.C60.FORMAT = 'RILR' ; OPCODE.C60.MNEMO = 'EXRL'\n/*z9z10*/ OPCODE.C62.FORMAT = 'RILR' ; OPCODE.C62.MNEMO = 'PFDRL'\n/*z9z10*/ OPCODE.C64.FORMAT = 'RILR' ; OPCODE.C64.MNEMO = 'CGHRL'\n/*z9z10*/ OPCODE.C65.FORMAT = 'RILR' ; OPCODE.C65.MNEMO = 'CHRL'\n/*z9z10*/ OPCODE.C66.FORMAT = 'RILR' ; OPCODE.C66.MNEMO = 'CLGHRL'\n/*z9z10*/ OPCODE.C67.FORMAT = 'RILR' ; OPCODE.C67.MNEMO = 'CLHRL'\n/*z9z10*/ OPCODE.C68.FORMAT = 'RIL2' ; OPCODE.C68.MNEMO = 'CGRL'\n/*z9z10*/ OPCODE.C6A.FORMAT = 'RIL2' ; OPCODE.C6A.MNEMO = 'CLGRL'\n/*z9z10*/ OPCODE.C6C.FORMAT = 'RIL2' ; OPCODE.C6C.MNEMO = 'CGFRL'\n/*z9z10*/ OPCODE.C6D.FORMAT = 'RIL2' ; OPCODE.C6D.MNEMO = 'CRL'\n/*z9z10*/ OPCODE.C6E.FORMAT = 'RILR' ; OPCODE.C6E.MNEMO = 'CLGFRL'\n/*z9z10*/ OPCODE.C6F.FORMAT = 'RILR' ; OPCODE.C6F.MNEMO = 'CLRL'\n/*z9z10*/ OPCODE.C800.FORMAT = 'SSF' ; OPCODE.C800.MNEMO = 'MVCOS'\n/*z9z10*/ OPCODE.C801.FORMAT = 'SSF' ; OPCODE.C801.MNEMO = 'ECTG'\n/*z9z10*/ OPCODE.C802.FORMAT = 'SSF' ; OPCODE.C802.MNEMO = 'CSST'\n/*z9z10*/ OPCODE.E302.FORMAT = 'RXY' ; OPCODE.E302.MNEMO = 'LTG'\n/*z9z10*/ OPCODE.E312.FORMAT = 'RXY' ; OPCODE.E312.MNEMO = 'LT'\n/*z9z10*/ OPCODE.E394.FORMAT = 'RXY' ; OPCODE.E394.MNEMO = 'LLC'\n/*z9z10*/ OPCODE.E395.FORMAT = 'RXY' ; OPCODE.E395.MNEMO = 'LLH'\n/*z9z10*/ OPCODE.E332.FORMAT = 'RXY' ; OPCODE.E332.MNEMO = 'LTGF'\n/*z9z10*/ OPCODE.E334.FORMAT = 'RXY' ; OPCODE.E334.MNEMO = 'CGH'\n/*z9z10*/ OPCODE.E336.FORMAT = 'RXY' ; OPCODE.E336.MNEMO = 'PFD'\n/*z9z10*/ OPCODE.E35C.FORMAT = 'RXY' ; OPCODE.E35C.MNEMO = 'MFY'\n/*z9z10*/ OPCODE.E375.FORMAT = 'RXY' ; OPCODE.E375.MNEMO = 'LAEY'\n/*z9z10*/ OPCODE.E37C.FORMAT = 'RXY' ; OPCODE.E37C.MNEMO = 'MHY'\n/*z9z10*/ OPCODE.E544.FORMAT = 'SIL' ; OPCODE.E544.MNEMO = 'MVHHI'\n/*z9z10*/ OPCODE.E548.FORMAT = 'SIL' ; OPCODE.E548.MNEMO = 'MVGHI'\n/*z9z10*/ OPCODE.E54C.FORMAT = 'SIL' ; OPCODE.E54C.MNEMO = 'MVHI'\n/*z9z10*/ OPCODE.E554.FORMAT = 'SIL' ; OPCODE.E554.MNEMO = 'CHHSI'\n/*z9z10*/ OPCODE.E555.FORMAT = 'SIL' ; OPCODE.E555.MNEMO = 'CLHHSI'\n/*z9z10*/ OPCODE.E558.FORMAT = 'SIL' ; OPCODE.E558.MNEMO = 'CGHSI'\n/*z9z10*/ OPCODE.E559.FORMAT = 'SIL' ; OPCODE.E559.MNEMO = 'CLGHSI'\n/*z9z10*/ OPCODE.E55C.FORMAT = 'SIL' ; OPCODE.E55C.MNEMO = 'CHSI'\n/*z9z10*/ OPCODE.E55D.FORMAT = 'SIL' ; OPCODE.E55D.MNEMO = 'CLFHSI'\n/*z9z10*/ OPCODE.EB4C.FORMAT = 'RSY1' ; OPCODE.EB4C.MNEMO = 'ECAG'\n/*z9z10*/ OPCODE.EB6A.FORMAT = 'SIYA' ; OPCODE.EB6A.MNEMO = 'ASI'\n/*z9z10*/ OPCODE.EB6E.FORMAT = 'SIYA' ; OPCODE.EB6E.MNEMO = 'ALSI'\n/*z9z10*/ OPCODE.EB7A.FORMAT = 'SIYA' ; OPCODE.EB7A.MNEMO = 'AGSI'\n/*z9z10*/ OPCODE.EB7E.FORMAT = 'SIYA' ; OPCODE.EB7E.MNEMO = 'ALGSI'\n/*z9z10*/ OPCODE.EC54.FORMAT = 'RIE5' ; OPCODE.EC54.MNEMO = 'RNSBG'\n/*z9z10*/ OPCODE.EC55.FORMAT = 'RIE5' ; OPCODE.EC55.MNEMO = 'RISBG'\n/*z9z10*/ OPCODE.EC56.FORMAT = 'RIE5' ; OPCODE.EC56.MNEMO = 'ROSBG'\n/*z9z10*/ OPCODE.EC57.FORMAT = 'RIE5' ; OPCODE.EC57.MNEMO = 'RXSBG'\n/*z9z10*/ OPCODE.EC64.FORMAT = 'RIET' ; OPCODE.EC64.MNEMO = 'CGRJ'\n/*z9z10*/ OPCODE.EC65.FORMAT = 'RIET' ; OPCODE.EC65.MNEMO = 'CLGRJ'\n/*z9z10*/ OPCODE.EC70.FORMAT = 'RIE2' ; OPCODE.EC70.MNEMO = 'CGIT'\n/*z9z10*/ OPCODE.EC71.FORMAT = 'RIE2' ; OPCODE.EC71.MNEMO = 'CLGIT'\n/*z9z10*/ OPCODE.EC72.FORMAT = 'RIE2' ; OPCODE.EC72.MNEMO = 'CIT'\n/*z9z10*/ OPCODE.EC73.FORMAT = 'RIE2' ; OPCODE.EC73.MNEMO = 'CLFIT'\n/*z9z10*/ OPCODE.EC76.FORMAT = 'RIET' ; OPCODE.EC76.MNEMO = 'CRJ'\n/*z9z10*/ OPCODE.EC77.FORMAT = 'RIET' ; OPCODE.EC77.MNEMO = 'CLRJ'\n/*z9z10*/ OPCODE.EC7C.FORMAT = 'RIET' ; OPCODE.EC7C.MNEMO = 'CGIJ'\n/*z9z10*/ OPCODE.EC7D.FORMAT = 'RIET' ; OPCODE.EC7D.MNEMO = 'CLGIJ'\n/*z9z10*/ OPCODE.EC7E.FORMAT = 'RIET' ; OPCODE.EC7E.MNEMO = 'CIJ'\n/*z9z10*/ OPCODE.EC7F.FORMAT = 'RIET' ; OPCODE.EC7F.MNEMO = 'CLIJ'\n/*z9z10*/ OPCODE.ECE4.FORMAT = 'RRS' ; OPCODE.ECE4.MNEMO = 'CGRB'\n/*z9z10*/ OPCODE.ECE5.FORMAT = 'RRS' ; OPCODE.ECE5.MNEMO = 'CLGRB'\n/*z9z10*/ OPCODE.ECF6.FORMAT = 'RRS' ; OPCODE.ECF6.MNEMO = 'CRB'\n/*z9z10*/ OPCODE.ECF7.FORMAT = 'RRS' ; OPCODE.ECF7.MNEMO = 'CLRB'\n/*z9z10*/ OPCODE.ECFC.FORMAT = 'RIS' ; OPCODE.ECFC.MNEMO = 'CGIB'\n/*z9z10*/ OPCODE.ECFD.FORMAT = 'RIS' ; OPCODE.ECFD.MNEMO = 'CLGIB'\n/*z9z10*/ OPCODE.ECFE.FORMAT = 'RIS' ; OPCODE.ECFE.MNEMO = 'CIB'\n/*z9z10*/ OPCODE.ECFF.FORMAT = 'RIS' ; OPCODE.ECFF.MNEMO = 'CLIB'\n/*z9z10*/ OPCODE.ED38.FORMAT = 'RXF' ; OPCODE.ED38.MNEMO = 'MAYL'\n/*z9z10*/ OPCODE.ED39.FORMAT = 'RXF' ; OPCODE.ED39.MNEMO = 'MYL'\n/*z9z10*/ OPCODE.ED3A.FORMAT = 'RXF' ; OPCODE.ED3A.MNEMO = 'MAY'\n/*z9z10*/ OPCODE.ED3B.FORMAT = 'RXF' ; OPCODE.ED3B.MNEMO = 'MY'\n/*z9z10*/ OPCODE.ED3C.FORMAT = 'RXF' ; OPCODE.ED3C.MNEMO = 'MAYH'\n/*z9z10*/ OPCODE.ED3D.FORMAT = 'RXF' ; OPCODE.ED3D.MNEMO = 'MYH'\n/*z9z10*/ OPCODE.ED40.FORMAT = 'RXF' ; OPCODE.ED40.MNEMO = 'SLDT'\n/*z9z10*/ OPCODE.ED41.FORMAT = 'RXF' ; OPCODE.ED41.MNEMO = 'SRDT'\n/*z9z10*/ OPCODE.ED48.FORMAT = 'RXF' ; OPCODE.ED48.MNEMO = 'SLXT'\n/*z9z10*/ OPCODE.ED49.FORMAT = 'RXF' ; OPCODE.ED49.MNEMO = 'SRXT'\n/*z9z10*/ OPCODE.ED50.FORMAT = 'RXE' ; OPCODE.ED50.MNEMO = 'TDCET'\n/*z9z10*/ OPCODE.ED51.FORMAT = 'RXE' ; OPCODE.ED51.MNEMO = 'TDGET'\n/*z9z10*/ OPCODE.ED54.FORMAT = 'RXE' ; OPCODE.ED54.MNEMO = 'TDCDT'\n/*z9z10*/ OPCODE.ED55.FORMAT = 'RXE' ; OPCODE.ED55.MNEMO = 'TDGDT'\n/*z9z10*/ OPCODE.ED58.FORMAT = 'RXE' ; OPCODE.ED58.MNEMO = 'TDCXT'\n/*z9z10*/ OPCODE.ED59.FORMAT = 'RXE' ; OPCODE.ED59.MNEMO = 'TDGXT'\n/*z9z10*/ OPCODE.010A.FORMAT = 'E' ; OPCODE.010A.MNEMO = 'PFPO'\n/* Syntax:   Byte             < -- Halfbyte -- >\n                 Format  #hw  l(oc) #operands.#len lO1 lO2 lO3 lO4 lO5 lO6\n              of.E  .#hw= 1     2      0\n              of.I  .#hw= 1     1      1   2\n              of.RR .#hw= 1     1      2   1   1\n              of.RRE2.#hw= 2    2      2   1   1\n              of.RRF2.#hw= 2    2      3   1   1    1\n              of.RX .#hw= 2     2      4   1   1    1    3\n              of.RXB.#hw= 2     3      4   1   1    1    3\n              of.RXE.#hw= 3     1      5   1   1    1    3    2\n              of.RXF.#hw= 3     1      6   1   1    1    3    1  2\n              of.RXY.#hw= 3     1      6   1   1    1    3    1  2\n              of.RS1 .#hw= 2    1      4   1   1    1    3\n              of.RSY1.#hw= 3    1      6   1   1    1    3    2  2\n              of.RSL.#hw= 3     1      4   1   1    3    2\n              of.RSI.#hw= 2     1      3   1   1    4\n              of.RI .#hw= 2     1      3   1   1    4\n              of.RIE.#hw= 3     1      4   1   1    4    2\n              of.SI .#hw= 2     1      3   2   1    3\n              of.SIYL.#hw= 3    1      3   2   1    3\n              of.S  .#hw= 2     2      2   1   3\n              of.SS .#hw= 3     1      5   2   1    3    1    2\n              of.SSA.#hw= 3     1      6   1   1    1    3    1  2\n              of.SSE.#hw= 3     2      4   1   3    1    3         */\n\nof.E.#hw = 1\nof.E.#operands.0 = 0\nof.E.lenOpCode = 4\nof.E.layout =    '#'\n\nof.II.#hw = 1\nof.II.#operands.0 = 1\nof.II.#operands.#len.1 = 2\nof.II.lenOpCode = 2\nof.II.layout =   '#'\nof.II.sequence = '1'         /* display sequence            */\n\nof.RI1.#hw = 2\nof.RI1.#operands.0 = 2\nof.RI1.#operands.#len.1 = 1\nof.RI1.#operands.#len.2 = 4\nof.RI1.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */\nof.RI1.lenOpCode = 2\nof.RI1.layout  =   'R#,#'  /* R1,I2 */\nof.RI1.sequence = '12'          /* display sequence            */\n\nof.RI2.#hw = 2\nof.RI2.#operands.0 = 2\nof.RI2.#operands.#len.1 = 1\nof.RI2.#operands.#len.2 = 2\nof.RI2.#operands.#ofs.2 = 4   /* Offset of sub-Op from Start */\nof.RI2.lenOpCode = 2\nof.RI2.layout  = 'R#,B''#'''     /* R1,M2 */\nof.RI2.sequence = '12'          /* display sequence            */\n\nof.RI4.#hw = 2\nof.RI4.#operands.0 = 2\nof.RI4.#operands.#len.1 = 1\nof.RI4.#operands.#len.2 = 4\nof.RI4.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */\nof.RI4.lenOpCode = 2\nof.RI4.layout  = 'R#,*+#'      /* R1,I2 */\nof.RI4.sequence = '12'          /* display sequence            */\n\nof.RI3.#hw = 2\nof.RI3.#operands.0 = 1\nof.RI3.#operands.#len.1 = 4\nof.RI3.lenOpCode = 4\nof.RI3.layout  = '*#'          /* I1  */\nof.RI3.sequence = '1'          /* display sequence            */\n\nof.RIE2.#hw = 3\nof.RIE2.#operands.0 = 3\nof.RIE2.#operands.#len.1 = 1\nof.RIE2.#operands.#ofs.2 = 2\nof.RIE2.#operands.#len.2 = 4\nof.RIE2.#operands.#len.3 = 1\nof.RIE2.lenOpCode = 2\nof.RIE2.layout  = 'R#,#,B''#'''   /* R1,I2,M3    */\nof.RIE2.sequence = '123'         /* display sequence            */\n\nof.RIE3.#hw = 3\nof.RIE3.#operands.0 = 3\nof.RIE3.#operands.#len.1 = 1\nof.RIE3.#operands.#len.2 = 1\nof.RIE3.#operands.#len.3 = 4\nof.RIE3.lenOpCode = 2\nof.RIE3.layout  = 'R#,R#,#'      /* R1,R3,I2    */\nof.RIE3.sequence = '123'         /* display sequence            */\n\nof.RIER.#hw = 3\nof.RIER.#operands.0 = 3\nof.RIER.#operands.#len.1 = 1\nof.RIER.#operands.#len.2 = 1\nof.RIER.#operands.#len.3 = 4\nof.RIER.lenOpCode = 2\nof.RIER.layout  = 'R#,R#,*+#'      /* R1,R3,I2    */\nof.RIER.sequence = '123'         /* display sequence            */\n\nof.RIE4.#hw = 3\nof.RIE4.#operands.0 = 4\nof.RIE4.#operands.#len.1 = 1\nof.RIE4.#operands.#len.2 = 1\nof.RIE4.#operands.#len.3 = 4\nof.RIE4.#operands.#len.4 = 1\nof.RIE4.lenOpCode = 2\nof.RIE4.layout  = 'R#,R#,#,#'    /* R1,R2,M3,I4 */\nof.RIE4.sequence = '1243'        /* display sequence            */\n\nof.RIET.#hw = 3\nof.RIET.#operands.0 = 4\nof.RIET.#operands.#len.1 = 1\nof.RIET.#operands.#len.2 = 1\nof.RIET.#operands.#len.3 = 4\nof.RIET.#operands.#len.4 = 1\nof.RIET.lenOpCode = 2\nof.RIET.layout  = 'R#,#,B''#'',*+#'    /* R1,R2,M3,I4 */\nof.RIET.sequence = '1423'        /* display sequence            */\n\nof.RIE5.#hw = 3\nof.RIE5.#operands.0 = 5\nof.RIE5.#operands.#len.1 = 1\nof.RIE5.#operands.#len.2 = 1\nof.RIE5.#operands.#len.3 = 2\nof.RIE5.#operands.#len.4 = 2\nof.RIE5.#operands.#len.5 = 2\nof.RIE5.lenOpCode = 2\nof.RIE5.layout  = 'R#,R#,#,#,#'     /* R1,R2,I3,I4,I5 */\nof.RIE5.sequence = '12345'         /* display sequence            */\n\nof.RIL2.#hw = 3                 /* Register Immediate Address    */\nof.RIL2.#operands.0 = 2\nof.RIL2.#operands.#len.1 = 1\nof.RIL2.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */\nof.RIL2.#operands.#len.2 = 8\nof.RIL2.lenOpCode = 2\nof.RIL2.layout = 'B''#'',*+#'  /* M1,I2 */\nof.RIL2.sequence = '12'        /* display sequence            */\n\nof.ril1.#hw = 3                /* Register Immediate Arithmetic */\nof.ril1.#operands.0 = 2\nof.ril1.#operands.#len.1 = 1\nof.rIl1.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */\nof.ril1.#operands.#len.2 = 8\nof.ril1.lenOpCode = 2\nof.ril1.layout = 'R#,#'        /* R1,I2 */\nof.ril1.sequence = '12'        /* display sequence            */\n\nof.RILR.#hw = 3                /* Register Immediate Relocatable*/\nof.RILR.#operands.0 = 2\nof.RILR.#operands.#len.1 = 1\nof.RILR.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */\nof.RILR.#operands.#len.2 = 8\nof.RILR.lenOpCode = 2\nof.RILR.layout = 'R#,*+#'      /* R1,I2 */\nof.RILR.sequence = '12'        /* display sequence            */\n\n\nof.RIL2.#hw = 3\nof.RIL2.#operands.0 = 2\nof.RIL2.#operands.#len.1 = 1\nof.RIL2.#operands.#ofs.2 = 3   /* Offset of sub-Op from Start */\nof.RIL2.#operands.#len.2 = 8\nof.RIL2.lenOpCode = 2\nof.RIL2.layout = 'R#,*+#'        /* R1,I2 */\nof.RIL2.sequence = '12'        /* display sequence            */\n\nof.RIL2m.#hw = 3               /* Register Immediate Address  Mask*/\nof.RIL2m.#operands.0 = 2\nof.RIL2m.#operands.#len.1 = 1\nof.RIL2m.#operands.#len.2 = 8\nof.RIL2m.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */\nof.RIL2m.lenOpCode = 2\nof.RIL2m.layout = 'B''#'',*+#'  /* M1,I2 */\nof.RIL2m.sequence = '12'        /* display sequence            */\n\nof.RRM.#hw = 1\nof.RRM.#operands.0 = 1\nof.RRM.#operands.#len.1 = 1\nof.RRM.lenOpCode = 3\nof.RRM.layout  = 'R#'          /* R1 */\nof.RRM.sequence = '1'          /* display sequence            */\n\nof.RR0.#hw = 1\nof.RR0.#operands.0 = 1\nof.RR0.#operands.#len.1 = 1\nof.RR0.lenOpCode = 2\nof.RR0.layout  = 'R#'          /* R1 */\nof.RR0.sequence = '1'          /* display sequence            */\n\nof.RR.#hw = 1\nof.RR.#operands.0 = 2\nof.RR.#operands.#len.1 = 1\nof.RR.#operands.#len.2 = 2\nof.RR.lenOpCode = 2\nof.RR.layout   = 'R#,R#'         /* R1,R2 */\nof.RR.sequence = '12'           /* display sequence            */\n\nof.BR.#hw = 1\nof.BR.#operands.0 = 2\nof.BR.#operands.#len.1 = 1\nof.BR.#operands.#len.2 = 2\nof.BR.lenOpCode = 2\nof.BR.layout   = '#,R#'         /* R1,R2 */\nof.BR.sequence = '12'           /* display sequence            */\n\nof.RRB.#hw = 1                 /* BCR Opcodes */\nof.RRB.#operands.0 = 1\nof.RRB.#operands.#len.1 = 1\nof.RRB.lenOpCode = 3\nof.RRB.layout  = 'R#'          /* R1 */\nof.RRB.sequence = '1'          /* display sequence            */\n\nof.RRE1.#hw = 2\nof.RRE1.#operands.0 = 1\nof.RRE1.#operands.#ofs.1 = 2  /* Offset of sub-Op from Start */\nof.RRE1.#operands.#len.1 = 1\nof.RRE1.lenOpCode = 4\nof.RRE1.Layout = 'R#'          /* R1, R2                      */\nof.RRE1.sequence = '1'         /* display sequence            */\n\nof.RRE2.#hw = 2\nof.RRE2.#operands.0 = 2\nof.RRE2.#operands.#ofs.1 = 2  /* Offset of sub-Op from Start */\nof.RRE2.#operands.#len.1 = 1\nof.RRE2.#operands.#len.2 = 1\nof.RRE2.lenOpCode = 4\nof.RRE2.Layout = 'R#,R#'        /* R1, R2                      */\nof.RRE2.sequence = '12'         /* display sequence            */\n\nof.RRR.#hw = 2\nof.RRR.#operands.0 = 3\n/* of.RRR.#operands.#ofs.1 = 2   Offset of sub-Op from Start */\nof.RRR.#operands.#len.1 = 1\nof.RRR.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */\nof.RRR.#operands.#len.2 = 1\nof.RRR.#operands.#len.3 = 1\nof.RRR.lenOpCode = 4\nof.RRR.Layout = 'R#,R#,R#'         /* R1, R2                      */\nof.RRR.sequence = '231'          /* display sequence            */\n\nof.RRF1.#hw = 2\nof.RRF1.#operands.0 = 3\nof.RRF1.#operands.#len.1 = 1\nof.RRF1.#operands.#len.2 = 2\nof.RRF1.#operands.#ofs.2 = 1   /* Offset of sub-Op from Start */\nof.RRF1.#operands.#len.3 = 3\nof.RRF1.lenOpCode = 4\nof.RRF1.Layout = 'R#,R#,R#'      /* R1,R3,R2                    */\nof.RRF1.sequence = '123'         /* display sequence            */\n\nof.RRF2.#hw = 2\nof.RRF2.#operands.0 = 3\nof.RRF2.#operands.#len.1 = 1\nof.RRF2.#operands.#len.2 = 1\nof.RRF2.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */\nof.RRF2.#operands.#len.3 = 1\nof.RRF2.lenOpCode = 4\nof.RRF2.Layout = 'R#,B''#'',R#'       /* R1,M3,R2                    */\nof.RRF2.sequence = '231'         /* display sequence            */\n\n\nof.RRF3.#hw = 2\nof.RRF3.#operands.0 = 4\nof.RRF3.#operands.#len.1 = 1\nof.RRF3.#operands.#len.2 = 1\nof.RRF3.#operands.#len.3 = 1\nof.RRF3.#operands.#len.4 = 1\nof.RRF3.lenOpCode = 4\nof.RRF3.Layout = 'R#,#,R#,#'       /* R1,M3,R2,R4                 */\nof.RRF3.sequence = '3142'        /* display sequence            */\n\nof.RRFM.#hw = 2\nof.RRFM.#operands.0 = 3\nof.RRFM.#operands.#len.1 = 1\nof.RRFM.#operands.#ofs.1 = 2   /* Offset of sub-Op from Start */\nof.RRFM.#operands.#len.2 = 1\nof.RRFM.#operands.#len.3 = 1\nof.RRFM.lenOpCode = 4\nof.RRFM.Layout = 'R#,R#,B''#'''    /* R1,R2,M4                    */\nof.RRFM.sequence = '312'           /* display sequence            */\n\nof.RRF4.#hw = 2\nof.RRF4.#operands.0 = 4\nof.RRF4.#operands.#len.1 = 1\nof.RRF4.#operands.#len.2 = 1\nof.RRF4.#operands.#len.3 = 1\nof.RRF4.#operands.#len.4 = 1\nof.RRF4.lenOpCode = 4\nof.RRF4.Layout = 'R#,R#,R#,B''#'''  /* R1,R3,R2,M4              */\nof.RRF4.sequence = '3142'           /* display sequence         */\n\n\n\nof.RS.#hw = 2\nof.RS.#operands.0 = 3\nof.RS.#operands.#len.1 = 1\nof.RS.#operands.#len.2 = 1\nof.RS.#operands.#ofs.2 = 2\nof.RS.#operands.#len.3 = 3\nof.RS.Layout = 'R#,#(R#)'      /* R1,D2(B2)                   */\nof.RS.sequence = '132'         /* display sequence            */\nof.RS.lenOpCode = 2\n\nof.RS1.#hw = 2\nof.RS1.#operands.0 = 4\nof.RS1.#operands.#len.1 = 1\nof.RS1.#operands.#len.2 = 1\nof.RS1.#operands.#len.3 = 1\nof.RS1.#operands.#len.4 = 3\nof.RS1.Layout = 'R#,R#,#(R#)'  /* R1,R3,D2(B2)                */\nof.RS1.sequence = '1243'       /* display sequence            */\nof.RS1.lenOpCode = 2\n\nof.RS2.#hw = 2\nof.RS2.#operands.0 = 4\nof.RS2.#operands.#len.1 = 1\nof.RS2.#operands.#len.2 = 1\nof.RS2.#operands.#len.3 = 1\nof.RS2.#operands.#len.4 = 3\nof.RS2.Layout = 'R#,B''#'',#(R#)'  /* R1,M3,D2(B2)                */\nof.RS2.sequence = '1243'       /* display sequence            */\nof.RS2.lenOpCode = 2\n\nof.RSI.#hw = 2\nof.RSI.#operands.0 = 3\nof.RSI.#operands.#len.1 = 1\nof.RSI.#operands.#len.2 = 1\nof.RSI.#operands.#len.3 = 4\nof.RSI.lenOpCode = 2\nof.RSI.Layout = 'R#,R#,*+#'     /* R1,R3,I2                    */\nof.RSI.sequence = '123'\n\nof.RSL.#hw = 3\nof.RSL.#operands.0 = 3\nof.RSL.#operands.#len.1 = 1\nof.RSL.#operands.#len.2 = 1\nof.RSL.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */\nof.RSL.#operands.#len.3 = 3\nof.RSL.lenOpCode = 2\nof.RSL.sequence = '312'         /* display sequence            */\nof.RSL.Layout = '#(#,R#)'       /* D1(L1,B1)                   */\n\nof.RSY1.#hw = 3\nof.RSY1.#operands.0 = 4\nof.RSY1.#operands.#len.1 = 1\nof.RSY1.#operands.#len.2 = 1\nof.RSY1.#operands.#len.3 = 1\nof.RSY1.#operands.#len.4 = 3\nof.RSY1.lenOpCode = 2\nof.RSY1.Layout = 'R#,R#,#(R#)'  /* R1,R3,D2(B2)                */\nof.RSY1.sequence = '1243'       /* display sequence            */\n\nof.RSY2.#hw = 3\nof.RSY2.#operands.0 = 4\nof.RSY2.#operands.#len.1 = 1\nof.RSY2.#operands.#len.2 = 1\nof.RSY2.#operands.#len.3 = 1\nof.RSY2.#operands.#len.4 = 3\nof.RSY2.lenOpCode = 2\nof.RSY2.Layout = 'R#,B''#'',#(R#)' /* R1,M3,D2(B2)                */\nof.RSY2.sequence = '1243'          /* display sequence            */\n\nof.RX.#hw = 2\nof.RX.#operands.0 = 4\nof.RX.#operands.#len.1 = 1\nof.RX.#operands.#len.2 = 1\nof.RX.#operands.#len.3 = 1\nof.RX.#operands.#len.4 = 3\nof.RX.lenOpCode = 2\nof.RX.layout   = 'R#,#(R#,R#)'  /* R1,D2(X2,B2) */\nof.RX.sequence = '1423'         /* display sequence            */\n\nof.BX.#hw = 2\nof.BX.#operands.0 = 4\nof.BX.#operands.#len.1 = 1\nof.BX.#operands.#len.2 = 1\nof.BX.#operands.#len.3 = 1\nof.BX.#operands.#len.4 = 3\nof.BX.lenOpCode = 2\nof.BX.layout   = '#,#(R#,R#)'  /* R1,D2(X2,B2) */\nof.BX.sequence = '1423'         /* display sequence            */\n\nof.RXB.#hw = 2                  /* Fur Test Under Mask */\nof.RXB.#operands.0 = 3\nof.RXB.#operands.#len.1 = 1\nof.RXB.#operands.#len.2 = 1\nof.RXB.#operands.#len.3 = 3\nof.RXB.lenOpCode = 3\nof.RXB.layout   = '#(R#,R#)'    /* D2(X2,B2)                   */\nof.RXB.sequence = '312'         /* display sequence            */\n\nof.RXM.#hw = 2                  /* Fur Test Under Mask */\nof.RXM.#operands.0 = 3\nof.RXM.#operands.#len.1 = 1\nof.RXM.#operands.#len.2 = 1\nof.RXM.#operands.#len.3 = 3\nof.RXM.lenOpCode = 3\nof.RXM.layout   = '#(R#,R#)'    /* D2(X2,B2)                   */\nof.RXM.sequence = '312'        /* display sequence            */\n\nof.RXE.#hw = 3\nof.RXE.#operands.0 = 4\nof.RXE.#operands.#len.1 = 1\nof.RXE.#operands.#len.2 = 1\nof.RXE.#operands.#len.3 = 1\nof.RXE.#operands.#len.4 = 3\nof.RXE.lenOpCode = 2\nof.RXE.layout   = 'R#,#(R#,R#)' /* R1,D2(X2,B2) */\nof.RXE.sequence = '1423'        /* display sequence            */\n\nof.RXF.#hw = 3\nof.RXF.#operands.0 = 5\nof.RXF.#operands.#len.1 = 1\nof.RXF.#operands.#len.2 = 1\nof.RXF.#operands.#len.3 = 1\nof.RXF.#operands.#len.4 = 3\nof.RXF.#operands.#len.5 = 1\nof.RXF.lenOpCode = 2\nof.RXF.layout   = 'R#,R#,#(R#,R#)' /* R1,R3,D2(X2,B2)     */\nof.RXF.sequence = '51423'       /* display sequence        */\n\nof.RIS.#hw = 3\nof.RIS.#operands.0 = 5\nof.RIS.#operands.#len.1 = 1\nof.RIS.#operands.#len.2 = 1\nof.RIS.#operands.#len.3 = 1\nof.RIS.#operands.#len.4 = 3\nof.RIS.#operands.#len.5 = 2\nof.RIS.lenOpCode = 2\nof.RIS.layout   = 'R#,#,#,#(R#)' /* R1,I2,M3,D4(B4)     */\nof.RIS.sequence = '15243'       /* display sequence        */\n\nof.RRS.#hw = 3\nof.RRS.#operands.0 = 5\nof.RRS.#operands.#len.1 = 1\nof.RRS.#operands.#len.2 = 1\nof.RRS.#operands.#len.3 = 1\nof.RRS.#operands.#len.4 = 3\nof.RRS.#operands.#len.5 = 1\nof.RRS.lenOpCode = 2\nof.RRS.layout   = 'R#,R#,#,#(R#)' /* R1,R2,M3,D4(B4)     */\nof.RRS.sequence = '12543'       /* display sequence        */\n\nof.RXY.#hw = 3\nof.RXY.#operands.0 = 4\nof.RXY.#operands.#len.1 = 1\nof.RXY.#operands.#len.2 = 1\nof.RXY.#operands.#len.3 = 1\nof.RXY.#operands.#len.4 = 3\nof.RXY.lenOpCode = 2\nof.RXY.layout   = 'R#,#(R#,R#)' /* R1,D2(X2,B2)     */\nof.RXY.sequence = '1423'        /* display sequence       */\n\nof.S.#hw = 2\nof.S.#operands.0 = 2\nof.S.#operands.#len.1 = 1\nof.S.#operands.#len.2 = 3\nof.S.lenOpCode = 4\nof.S.layout   = '#(R#)'           /* D2(B2)                 */\nof.S.sequence = '21'          /* display sequence        */\n\nof.SI.#hw = 2\nof.SI.#operands.0 = 3\nof.SI.#operands.#len.1 = 2\nof.SI.#operands.#len.2 = 1\nof.SI.#operands.#len.3 = 3\nof.SI.lenOpCode = 2\nof.SI.layout   = '#(R#),#'    /* D1(B1),I2              */\nof.SI.sequence = '321'        /* display sequence        */\n\nof.SIL.#hw = 3\nof.SIL.#operands.0 = 3\nof.SIL.#operands.#len.1 = 1\nof.SIL.#operands.#len.2 = 3\nof.SIL.#operands.#len.3 = 4\nof.SIL.lenOpCode = 4\nof.SIL.layout  = '#(R#),#'    /* D1(B1),I2              */\nof.SIL.sequence = '213'       /* display sequence        */\n\nof.SI2.#hw = 2\nof.SI2.#operands.0 = 3\nof.SI2.#operands.#len.1 = 2\nof.SI2.#operands.#len.2 = 1\nof.SI2.#operands.#len.3 = 3\nof.SI2.lenOpCode = 2\nof.SI2.layout   = '#(R#),B''#'''    /* D1(B1),I2              */\nof.SI2.sequence = '321'        /* display sequence        */\n\nof.SIYL.#hw = 3\nof.SIYL.#operands.0 = 3\nof.SIYL.#operands.#len.1 = 2\nof.SIYL.#operands.#len.2 = 1\nof.SIYL.#operands.#len.3 = 5\nof.SIYL.lenOpCode = 2\nof.SIYL.layout  = '#(R#),B''#'''    /* D1(B1),I2              */\nof.SIYL.sequence = '321'       /* display sequence       */\n\nof.SIYA.#hw = 3\nof.SIYA.#operands.0 = 3\nof.SIYA.#operands.#len.1 = 2\nof.SIYA.#operands.#len.2 = 1\nof.SIYA.#operands.#len.3 = 5\nof.SIYA.lenOpCode = 2\nof.SIYA.layout  = '#(R#),#'    /* D1(B1),I2              */\nof.SIYA.sequence = '321'       /* display sequence       */\n\nof.SSM.#hw = 3\nof.SSM.#operands.0 = 6\nof.SSM.#operands.#len.1 = 1\nof.SSM.#operands.#len.2 = 1\nof.SSM.#operands.#len.3 = 1\nof.SSM.#operands.#len.4 = 3\nof.SSM.#operands.#len.5 = 1\nof.SSM.#operands.#len.6 = 3\nof.SSM.lenOpCode = 2\nof.SSM.layout  = 'R#,R#,#(R#),#(R#)' /* R1,R3,D2(B2),D4(B4)   */\nof.SSM.sequence = '124352'           /* display sequence      */\n\nof.SSR.#hw = 3\nof.SSR.#operands.0 = 6\nof.SSR.#operands.#len.1 = 1\nof.SSR.#operands.#len.2 = 1\nof.SSR.#operands.#len.3 = 1\nof.SSR.#operands.#len.4 = 3\nof.SSR.#operands.#len.5 = 1\nof.SSR.#operands.#len.6 = 3\nof.SSR.lenOpCode = 2\nof.SSR.layout  = '#(R#,R#),#(R#),R#' /* D1(R1,B1),D2(B2),R3   */\nof.SSR.sequence = '413652'           /* display sequence      */\n\nof.SSL.#hw = 3\nof.SSL.#operands.0 = 6\nof.SSL.#operands.#len.1 = 1\nof.SSL.#operands.#len.2 = 1\nof.SSL.#operands.#len.3 = 1\nof.SSL.#operands.#len.4 = 3\nof.SSL.#operands.#len.5 = 1\nof.SSL.#operands.#len.6 = 3\nof.SSL.lenOpCode = 2\nof.SSL.layout  = 'R#,#(R#),R#,#(R#)' /* D1(R1,B1),D2(B2),R3   */\nof.SSL.sequence = '143265'           /* display sequence      */\n\nof.SS.#hw = 3\nof.SS.#operands.0 = 5\nof.SS.#operands.#len.1 = 2\nof.SS.#operands.#len.2 = 1\nof.SS.#operands.#len.3 = 3\nof.SS.#operands.#len.4 = 1\nof.SS.#operands.#len.5 = 3\nof.SS.lenOpCode = 2\nof.SS.layout   = '#(#,R#),#(R#)' /* D1(L1,B1),D2(B2)       */\nof.SS.sequence = '31254'         /* display sequence      */\n\nof.SSI.#hw = 3\nof.SSI.#operands.0 = 5\nof.SSI.#operands.#len.1 = 2\nof.SSI.#operands.#len.2 = 1\nof.SSI.#operands.#len.3 = 3\nof.SSI.#operands.#len.4 = 1\nof.SSI.#operands.#len.5 = 3\nof.SSI.lenOpCode = 2\nof.SSI.layout  = '#(R#),#(#,R#)' /* D1(B1),D2(L2,B2)      */\nof.SSI.sequence = '32514'        /* display sequence      */\n\nof.SSA.#hw = 3\nof.SSA.#operands.0 = 6\nof.SSA.#operands.#len.1 = 1\nof.SSA.#operands.#len.2 = 1\nof.SSA.#operands.#len.3 = 1\nof.SSA.#operands.#len.4 = 3\nof.SSA.#operands.#len.5 = 1\nof.SSA.#operands.#len.6 = 3\nof.SSA.lenOpCode = 2\nof.SSA.layout   = '#(#,R#),#(#,R#)' /* D1(L1,B1),D2(L2,B2)   */\nof.SSA.sequence = '413625'          /* display sequence      */\n\nof.SS3.#hw = 3\nof.SS3.#operands.0 = 6\nof.SS3.#operands.#len.1 = 1\nof.SS3.#operands.#len.2 = 1\nof.SS3.#operands.#len.3 = 1\nof.SS3.#operands.#len.4 = 3\nof.SS3.#operands.#len.5 = 1\nof.SS3.#operands.#len.6 = 3\nof.SS3.lenOpCode = 2\nof.SS3.layout   = '#(#,R#),#(R#),#'    /* D1(L1,B1),D2(B2),I3     */\nof.SS3.sequence = '413652'              /* display sequence        */\n\nof.SSE.#hw = 3\nof.SSE.#operands.0 = 4\nof.SSE.#operands.#len.1 = 1\nof.SSE.#operands.#len.2 = 3\nof.SSE.#operands.#len.3 = 1\nof.SSE.#operands.#len.4 = 3\nof.SSE.lenOpCode = 4\nof.SSE.layout   = '#(R#),#(R#)'   /* D1(B1),D2(B2)           */\nof.SSE.sequence = '2143'          /* display sequence        */\n\nof.SSF.#hw = 3\nof.SSF.#operands.0 = 5\nof.SSF.#operands.#len.1 = 1\nof.SSF.#operands.#ofs.2 = 2   /* Offset of sub-Op from Start */\nof.SSF.#operands.#len.2 = 1\nof.SSF.#operands.#len.3 = 3\nof.SSF.#operands.#len.4 = 1\nof.SSF.#operands.#len.5 = 3\nof.SSF.lenOpCode = 2\nof.SSF.layout   = '#(R#),#(R#),R#'   /* D1(B1),D2(B2),R3        */\nof.SSF.sequence = '32541'         /* display sequence        */\n\nreturn\n\n/**********************************************/\n/* Tests for 4-Byte Opcode                   */\nis4Bytes:\n/**********************************************/\n\narg fstbyte\n\nselect\nwhen wordpos(fstbyte, 'B2 B3 B9') = 0,\nthen return 0\n\notherwise return 1\n\nend\n\n/*********************************************************/\ngetservice:\n/*********************************************************/\n\nif ipcsmode = 0,\nthen do\n   call makeInstructionTable 0\n   call displayInstructionTable\n   \"tbend disastab\"\nend\n\nelse do /* inside ipcs */\n   ppp = 1\n   call makeInstructionTable 1\nend\n\nreturn\n\n/*********************************************************/\n/* create table of instructions; this routine works      */\n/* differently in a native ISPF and an IPCS environment  */\nmakeInstructionTable:\n/*********************************************************/\narg ipm  /* ipcsmode */\n\nif ipm = 0 then \"tbcreate disastab nowrite  names(xofs hxc mnc)\"\n\nxright = ''; mright = ''\nTableRow# = 0\n\nparse var hexinstruction xleft '|' xright\nparse var miniprogram    mleft '|' mright\nparse var xad            aleft '|' aright\n\n/* loop over all instructions */\ndo until xright = '' | mright = ''\n   parse var xright xleft '|' xright\n   parse var mright mleft '|' mright\n   parse var aright aleft '|' aright\n\n   hxc  = xleft\n   mnc  = mleft\n   if ipm = 0,\n   then xofs = '+' || right(aleft, 3,'0') /* hex offset  */\n   else xofs = xform(aleft, 12)           /* hex address */\n\n   if ppp then queue    xofs ' ' xform(hxc, 14) mnc\n\n   if ipm = 0 then \"tbadd disastab\"\n\n   TableRow# = TableRow# + 1\n\n   hexinstruction = xright\n   miniprogram    = mright\n   xad            = aright\nend\nif ppp then queue ' '\n\nReturn\n\n/**********************************************/\n/* expand String s to fixed length  l         */\nxform:\n/**********************************************/\n\narg s, l\nls = length(s)\n\nif ls < l,\nthen s2 = s ||copies(' ', l-ls)\nelse s2 = s\n\nreturn s2\n\n/*********************************************************/\ndisplayInstructionTable:\n/*********************************************************/\n\n/*\n\"LIBDEF  ISPPLIB LIBRARY ID(\"ddname\")\"\n\"LMINIT DATAID(DID1) DDNAME(\"ddname\") ENQ(shrw)\"\n\"LMOPEN DATAID(\"DID1\") OPTION(OUTPUT)\"\n*/\nCall write   \")PANEL \"\nCall write   \")ATTR  \"\nCall write   \" @ TYPE(INPUT)  INTENS(HIGH) JUST(LEFT) CAPS(ON)\"\nCall write   \" $ TYPE(OUTPUT) INTENS(LOW)  JUST(ASIS) SKIP(ON)\"\nCall write   \" + TYPE(TEXT)   INTENS(LOW)             SKIP(ON)\"\nCall write   \")BODY window(60, 18)  \"\nCall write   \"%COMMAND ===>_ZCMD                    + \"\nCall write   \"%&MSG                                 + \"\nCall write   \"%     Instructions                    + \"\nCall write   \"+---- ----------------------------------------------+ \"\nCall write   \")MODEL \"\nCall write   \"$xofs   $hxc         $mnc                           + \"\nCall write   \")INIT\"\nCall write   \".cursor = zcmd\"\nCall write   \")PROC  \"\nCall write   \" &MSG = &Z\"\nCall write   \" &MXXTRAIL = &Z \"\nCall write   \" .CURSOR = ZCMD  \"\nCall write   \"&CNAME = .CURSOR\"\nCall write   \")END   \"\n\n\"LMMADD  DATAID(\"DID1\") MEMBER(DISAS)\"\n\"LMFREE  DATAID(\"DID1\")\"\n\"ADDPOP  \"\n\"TBTOP   DISASTAB\"\n\"TBDISPL DISASTAB PANEL(DISAS) csrrow(1)\"\n /* \"LMclose DATAID(\"DID1\")\"*/\n\n\"REMPOP  \"\n\"LIBDEF ISPPLIB\"\nAddress tso\nif filemode = 0,\nthen \"FREE F(\"ddname\")\"\nelse say 'Result is written to File SDADBG  (use ISPF-Command DDLIST)'\n\nReturn\n\n/********************************************************/\nsyntax:\n/********************************************************/\nsay 'Error' rc 'in line' sigl':' \"ERRORTEXT\"(rc)\nsay \"SOURCELINE\"(sigl)\nsay 'hexinstr, OfsSubOperand, LenSubOperand'\nsay hexinstr  OfsSubOperand  LenSubOperand\ncall dwrite\n\nexit 8\n\n/********************************************************/\naccess_error:\n/********************************************************/\nsay 'Error' rc 'in line' sigl':' \"ERRORTEXT\"(rc)\nsay \"SOURCELINE\"(sigl)\nsay 'new_length new_length ipcs_eval_limit'\nsay  new_length new_length ipcs_eval_limit\ncall dwrite\n\nexit 8\n\n/********************************************************/\nprt:  /* Debug Output                                   */\n/********************************************************/\ntrace off\n\narg #s1 #s2\n\n#t1 = value(#s1)\nif #s2 /= '',\nthen do\n   #t2 = value(#s2)\n   queue xpform(#s1 || ':', 16) #t1 '   ' xpform(#s2 || ':', 16) #t2\nend\nelse queue xpform(#s1 || ':', 16) #t1\n\nreturn\n\n/***********************************/\ndwrite:  /* Output on file(sdadbg) */\n/**********************************/\n\nif queued() > 0,\nthen do\n   queue ''\n   address tso\n   \"alloc fi(sdadbg) new tracks space(3 3) \",\n   \"recfm(f b) lrecl(132) dsorg(ps) reuse\"\n\n   \"execio * diskw  sdadbg (finis\"\nend\n\nreturn\n\n/*******************************************************/\ndnote:  /* output via IPCS-Note subcommand             */\n/*******************************************************/\n\ndo while queued() > 0\n   pull iline\n\n   ipapo =pos('''', iline)  /* special treatment of apostrophes */\n   if ipapo > 0,\n   then do\n      iline = translate(iline, '_', '''')\n      ap = pos('_', iline)\n      kline = xtendApost(ap iline)\n      iline = translate(kline, '''' , '_')\n   end\n /*    say 'iline' iline*/\n   \"NOTE '\"iline\"' ASIS\"\nend\n\nreturn\n\n/********************************************************/\nxtendApost:  /* double apostrophes  for note ...        */\n/********************************************************/\narg ip il  /* ip = 1st position of '''' */\n\njp = ip+1\nik = substr(il, jp) /* deal with right part */\nparse var ik left '_' rite\njline = substr(il, 1, ip) || '_' || left || '__' || rite\n\nreturn jline\n\n\n\n/********************************************************/\nwrite:\n/********************************************************/\n\nParse Arg  p1\n\n\"LMPUT DATAID(\"DID1\") MODE(INVAR) DATALOC(P1) DATALEN(80)\"\nReturn\n\n/***************************************************/\n/* Construct Help Panel                            */\nconstructHelp:\n/***************************************************/\ntrace off\n\n/* read help panel content from source an write to did1 */\ndo lhc = 3000 to 4000\n\n   if pos('+~\\/\"9$', sourceline(lhc)) = 1,\n   then do lhw = lhc+1 to 4000\n\n      if pos('+~\\/\"9$', sourceline(lhw)) = 1,\n      then leave lhc\n\n      Call write sourceline(lhw)\n   end lhw\n\nend lhc\n\"LMMADD DATAID(\"DID1\") MEMBER(sdahelp)\"\n /* \"LMclose DATAID(\"DID1\")\"*/\n\nreturn\n\n/**********************************************************/\n/*\n+~\\/\"9$ Begin of Help Panel - do *not* remove this line\n)ATTR\n + TYPE(NT)\n ? TYPE(ET)\n \u00ac TYPE(TEXT) INTENS(HIGH) SKIP(ON) COLOR(YELLOW) HILITE(REVERSE)\n ` AREA(SCRL) EXTEND(ON)\n)BODY EXPAND(@@)\n\u00ac ISDA-TUTORIAL +@ @                                 @ @\u00ac                +\n%COMMAND ===>_ZCMD\n`helptext                                                                      `\n)AREA  helptext\nISDA%Small DisAssembler+produces an assembler listing of hexadecimal\nopcodes. It is an ISPF based tool to support the analysis of dumps of\nall kinds and operates directly on any ISPF screen, thus enabling the\nuser to work with IPCS dumps, lists of SYSUDUMPs, CEEDUMPs and the like.\nISDA is written in Rexx and may be modified according to specific needs.\nIt covers zSeries Opcodes up to the Sixth Edition (April, 2007) of the POPs.\nTo start ISDA in an ISPF Session it must know the coordinates of the dump area\ninside a screen.  These coordinates have to be entered via\n%TSO ISDA <StartCol> <Number of Rows> <debug level>+\nNB: The Start Col is the Col on the %screen.+ For IPCS dumps a value of\n    12 would fit. The right boundary for analyis is calculated automatically.\n    Criterion is the first non hex character.\nSubsequent calls of ISDA use these coordinates.\nISDA stops disassembly after the first unknown opcode\n\ndebug level may have one of the following values:\n%P+ protocol level, lists the statements in a temporary file with ddname(sdadbg)\n%D+ debuglevel, lists internal values in the same temporary file\n%T+ trace level, switches on %trace i+ during disassembly\nother values are ignored and no additional output will be issued\n\nTo work with ISDA the command \u00acTSO ISDA+       <without parameters>\nshould be assigned to a PF Key. ISDA then starts disassembling from the\ncursor position\n)INIT\n)PROC\n)END\n+~\\/\"9$ End of Help Panel - do *not* remove this line\n*/\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISDADOC": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\t\\x05?\\x01\\t\\x05?\\x08U\\x0bT\\x0bT\\x00\\x00\\xd4\\xe2\\xe6\\xd6\\xd9\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-02-22T00:00:00", "modifydate": "2009-02-22T08:55:00", "lines": 2900, "newlines": 2900, "modlines": 0, "user": "MSWORD"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "ISDARTF": {"ttr": 2826, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x00 \\x00\\x01\\t\\x05?\\x01\\t\\x05?\\t2\\xff\\xff\\xff\\xff\\x00\\x00\\xd9\\xe3\\xc6@@@@@\\x00\\x01/\\xaa\\x00\\x00\\xff\\xff\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.00", "flags": 32, "createdate": "2009-02-22T00:00:00", "modifydate": "2009-02-22T09:32:00", "lines": 65535, "newlines": 65535, "modlines": 0, "user": "RTF"}, "mimetype": "text/rtf", "datatype": "binary", "extension": ".rtf"}, "ISDAUG": {"ttr": 34565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00Q\\x01\\x073\\x7f\\x01\\x073\\x7f\\x128\\x00\\xbf\\x00\\x95\\x00\\x00\\xd8\\xe7\\xf1\\xf0\\xf8\\xf7\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2007-12-03T00:00:00", "modifydate": "2007-12-03T12:38:51", "lines": 191, "newlines": 149, "modlines": 0, "user": "QX10871"}, "text": "Interactive Short DisAssembler (ISDA)\n\nUser's Guide\n\n1 Introduction\n\nISDA is a small tool for supporting diagnosis in a z/OS environment\nunder ISPF and IPCS. There exist various disassemblers which deal\nmainly with load modules. The IPCS list subcommand can do\ndisassembling as well based on dump contents.\n\nDue to some discomfort with this tool there arose the idea to\ncombine the technique shown by Doug Nadel in his vcursor utility\nwith some rexx code to implement the relations between symbolic\nand machine instructions. The result was a cursor sensitive\ndisassembler that starts its work at a position defined by the\nuser and shows the symbolic instructions in a pop up window under\nISPF or in a list screen under IPCS.\n\nPositioning:\n\n1. ISDA is not intended to work as a reengineering tool, but to\nshow the data and control flow inside a relatively short sequence\nof instructions.\n\n2. ISDA works on any type of screen content under ISPF or IPCS\ncontaining machine code instructions (e.g. SVCDUMPs, CEEDUMPs,\nSYSUDUMPs, and the like).\n\n2 Architecture and Installation\n\nISDA is capable of dealing with arbitrary screen sizes and does\nnot need any configuration input besides that described below\nunder Invocation.\n\nThe utility is completely written in rexx. The whole stuff is\nembedded in a single source file. It runs under ISPF as well as\nunder IPCS whilst it detects the appropriate runtime environment\nby itself.\n\nISDA operates on information provided by the ISPF variable\nZSCREENI which contains the pure Image of an ISPF screen. It\ngrabs the data and reformats them into lines in order to\nassociate coordinates and cursor positions (the latter provided\nby ISPF variable ZSCREENC).\n\nUnder IPCS ISDA accesses dump data by invoking the evaluate\nsubcommand.\n\nThere exist several panels that are part of the rexx source. They\nare built dynamically during runtime (as in vcursor).\n\nTo install ISDA it should be put into a library which is part of\na SYSPROC concatenation.\n\n* For operation under ISPF a PF-key should be assigned to the\nCommand TSO %ISDA.\n\nFor operation under IPCS a PF-key should be assigned to the\nCommand IPCS %ISDA\n\n3 Invocation and Output\n\nInvocation and output differ depending on the environment. Under\nIPCS the rules follow the principles of rexx scripts for IPCS,\nunder ISPF (further named as non-IPCS) there have to be made some\nadditional definitions for screen coordinates and output.\n\n3.1 Invocation of ISDA in a non-IPCS Environment\n\nIn this environment the invocation of ISDA is a 2-step process,\nsince ISDA needs to know where the left margin of the dump\nbegins. Despite it starts disassembling at the cursor position,\nsubsequent lines of the dump are captured from this defined left\nmargin up to the rightmost character which is obviously a pair of\nhex chars.\n\n1st Step: set left margin and number of rows\nTo set the left margin and the row amount, simply call ISDA as a\nTSO command without parameters:\n\nTSO %ISDA\n\nAs a result you get an ISPF panel\n\nIn a SYSUDUMP instructions normally begin at screen column 11.\nTherefore you enter:  TSO %ISDA 11 5 for getting up to 5 rows of\ninstructions, beginning at column 11.\n\nNow ISDA is ready for disassembling.\n\n2nd Step: doing Disassembly\n\nIn order to get the symbolic instructions, just assign the Command\n\nTSO %ISDA\n\nto a PF-Key, e.g. PF20.\nThen place the cursor at the beginning of the code sequence and\nhit <PF20>.\n\nDisassembling Portions of a SYSUDUMP\n\nAfter hitting <PF20> you see the symbolic instructions.\n\nDisassembling the neighbourhood of a PSW-Address in a LE Dump\n\nSince LE dumps contain only a small amount of instructions\nrelated to an error, ISDA is suitable for displaying these\ninstructions around a PSW- Address. You place the cursor at the\nbeginning of the instruction sequence and hit <PF20>\n\n3.2 Additional Output from ISDA in a non-IPCS Environment\n\nAs far as the user does not enter additional parameters when\ninvoking ISDA, output is presented in a pop up window.  However,\nthere exists a possibility to get the symbolic instructions\nadditionally in a temporary file that can be accessed by the\neditor. To accomplish this, invoke ISDA with the P (protocol)\noption:\n\nTSO %ISDA 11 5 P\n\nIn this example, ISDA starts at column 11, grabs 5 rows of dump\nand writes the symbolic instructions additionally to file SDADBG.\nThis file can be accessed via DDLIST:\n\nVia the clipboard of the editor this content can be brought\neverywhere in the system.\n\n3.3 Invocation of ISDA in an IPCS Environment\n\nDue to architectural differences between IPCS and ISPF, calling\nISDA in an IPCS Environment differs slightly from that described\nabove. Additionally, in IPCS output from ISDA is not brought into\na popup-window, but displayed by using the note subcommand of\nIPCS.\n\n1st Step: Set Number of Bytes and Debug-Level\n\nWithin IPCS, ISDA may be called as:\n\nipcs %isda <Number of Bytes>\n\nAs a line command under IPCS.\n\n<Number of Bytes> can assume a value between 8 and 512.\n\nFor the sake of simplicity it is recommended, to assign a PF-Key\n(as in the former examples, it is again PF20) to the command:\n\nIPCS %ISDA <Number of Bytes>\n\nIf the user wants to get additional output, e.g. for debugging\npurposes, the command has to be assigned in that way:\n\nIPCS %ISDA <Number of Bytes> 0 D\n\nThis causes ISDA to provide additional output to control its\ninternal behaviour.\n\nNote: There exists another option:\n\nIPCS %ISDA <Number of Bytes> 0 T\n\nIn this case the rexx trace is switched on. Be careful when using\nit, lots of rows in TSO line mode will be produced. Use it only\nin case of strange errors.\n\n2nd Step: doing Disassembly\n\nAfter having set the amount of data to be disassembled, just\nplace the cursor at the beginning of the instruction sequence and\nhit PF8.\n\nNote that, different from a non-IPCS display, the absolute\nstarting address from the beginning of the instruction sequence\nis displayed on the left.\n\n4 About the Author\n\nArthur Fichtl is a freelance consultant, based in\nBavaria/Germany.\n\nHe can be reached via email: mailto:fichtla@acm.org\n\nIn the course of beginning with dump analysis he felt the need\nto have a handy utility to show the symbolic Opcodes of machine\ninstructions together with the addresses inside a dump since\nnobody is able to remember all the about 750 variations of\ninstruction codes that exist for a zSeries processor.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TISDA": {"ttr": 34569, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00\\x17\\x01\\t\\x02\\x7f\\x01\\t\\x05\\x1f\\x10\\x06\\x00\\x0e\\x00\\x03\\x00\\x00\\xc1\\xc6\\xc9\\xc3\\xc8\\xe3\\xd3@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "2009-01-27T00:00:00", "modifydate": "2009-02-20T10:06:17", "lines": 14, "newlines": 3, "modlines": 0, "user": "AFICHTL"}, "text": "/* rexx Test ISDA with filemode */\naddress tso\n/* alloc file containing machine codes (i.e. HLASM Listing) */\n/* \"alloc da( test.cliy.list ) fi( finisda) shr reuse\" */\n/* \"alloc da( T.original.LIST  ) fi( finisda) shr reuse\" */\n   \"alloc da( Totalopc.LIST  ) fi( finisda) shr reuse\"\n/* \"alloc da(mvs.data(test) ) fi( finisda) shr reuse\" */\ntcstco = 0        /* meaningless in filemode */\ntcnmrows = 0      /* meaningless in filemode */\nsdadbg = 'P'      /* write output to DDNAME(SDADBG)                 */\ninsrc = 'F.9.14'  /* start in col 09 and read 14 chars in each line */\n/*  insrc = 'F.1.16' */\ncall isda tcstco tcnmrows sdadbg insrc\nexit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT773/FILE773.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT773", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}