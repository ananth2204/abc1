SNA route planning

The following REXX EXEC automates the process of route
planning and the definition of ACF products in small to
medium networks. It is not intended as a substitute for the IBM
specialist programs for network planning such as RTG and
NETDA. With this EXEC, versions of which have been written
for CMS and TSO, you are able to:

o      Generate PATH macros for VTAM and NCP nodes

o      Generate routing tables describing the network.

The input file (fnPARM) contains a description of all the
subareas and links in the network. The output files (fnPATH
and fnRPRT) contain the PATH macros ready for insertion into
the VTAM and NCP nodes and the routing tables that help in
COS table design and in any recovery actions when a link fails.

The program permits the customization of three values:

1      VRMAX - the maximum number of virtual routes that you
      want to design.

2      ERMAX - the maximum number of explicit routes
      permitted by ACF products (be sure of this!).

3      TGMAX - the maximum number of transmission groups
      crossed by any routes (to limit the route length).


SRPEXEC REXX

/*REXX*/
/*********************************************************************/
/* SNA ROUTE PLANNING - (TSO VERSION )                               */
/* FORMAT IS : SRP <PARMMP>                                          */
/* PARMMP : PARMS MEMBER-NAME PREFIX (MAX. 4 CHARS.)                 */
/* (EXAMPLE : PARMMP = NET1 --> PARMS MEMBER NAME = NET1PARM         */
/*                              PATH MACROS       = NET1PATH         */
/*                              SUMMARY REPORTS   = NET1RPRT         */
/* THE SRP EXEC AUTOMATES THE PROCESS OF SMALL-MEDIUM NETWORK ROUTES */
/* PLANNING AND DEFINITION.                                          */
/* IT GENERATES THE PATH MACROS FOR VTAM AND NCP NODES, AND A SERIES */
/* OF TABLES CONTAINING THE SUBAREAS DESCRIPTION, THE LINKS          */
/* DESCRIPTION, THE VIRTUAL ROUTE SUMMARY, AND THE TRASMISSION GROUP */
/* SUMMARY.                                                          */
/*********************************************************************/
TRACE
/* THESE THREE VALUES MAY BE CUSTOMIZED                              */
VRMAX=8           /* MAX. NUMBER OF VIRTUAL ROUTES TO DESIGN         */
ERMAX=8           /* MAX. NUMBER OF EXPLICIT ROUTES PERMITTED        */
TGMAX=8           /* MAX. NUMBER OF T.G. CROSSED BY ANY ROUTES       */
PARSE UPPER ARG PARMMP
IF PARMMP="" THEN DO
  SAY "MISSING ARGUMENT : PARAMETERS MEMBER-NAME PREFIX"
  EXIT 12
END
/* FILES SETTING                                                     */
PARMFILE=PARMMP||"PARM"   /* PARAMETERS       */
OUTFILE=PARMMP||"PATH"    /* PATH MACROS      */
RPTFILE=PARMMP||"RPRT"    /* REPORTS          */
XPARM="'OLICOMP.FRM.CNTL("PARMFILE")'"
X=SYSDSN(XPARM)
IF X<>"OK" THEN DO
  SAY "MISSING MEMBER : " PARMFILE
  EXIT 8
END
"ALLOC DA('OLICOMP.FRM.CNTL("||PARMFILE||")') F("PARMFILE") SHR"
IF RC¬=0 THEN SAY "FILE " PARMFILE " MISSING"
"ALLOC DA('OLICOMP.FRM.CNTL("||OUTFILE||")') F("OUTFILE") SHR REUSE"
IF RC¬=0 THEN SAY "FILE " OUTFILE " MISSING"
"ALLOC DA('OLICOMP.FRM.CNTL("||RPTFILE||")') F("RPTFILE") SHR REUSE"
IF RC¬=0 THEN SAY "FILE " RPTFILE " MISSING"
ER.=""
VR.=""
ERVR.=""
VRER.=""
SAY "++++++++++++++++++++++++++++++++++++++++"
SAY "+        SNA ROUTE PLANNING            +"
SAY "++++++++++++++++++++++++++++++++++++++++"
SAY
SAY "READING PARAMETERS..."
SAY
/* READ PARAMETERS FILE                                              */
"EXECIO * DISKR " PARMFILE " (FINIS STEM PARMS."
P=1
/* VALIDATE PARAMETERS - SA AND LINK DEFINITION                      */
HOSTSA=0;NCPSA=0;TOTSA=0;LNUM=0;CLNUM=0;LLNUM=0;MATRIX=""
DO FOREVER
  CALL READ
  IF PARM="END" THEN LEAVE
  SELECT
    WHEN STRIP(LEFT(PARM,2))="SA" THEN DO
      PARSE VAR PARM . "=" SAID "," "=" SAT .
      IF SAT="HOST" THEN DO
        HOSTSA=HOSTSA+1
        TOTSA=TOTSA+1
        SA.TOTSA=SAID
        SANAME.TOTSA="H"||HOSTSA
        SATYPE.TOTSA="HOST"
        MATRIX = MATRIX||SAID||" "
      END
      ELSE
        IF SAT="NCP" THEN DO
          NCPSA=NCPSA+1
          TOTSA=TOTSA+1
          SA.TOTSA=SAID
          SANAME.TOTSA="N"||NCPSA
          SATYPE.TOTSA="NCP"
          MATRIX = MATRIX||SAID||" "
        END
        ELSE SAY PARM "** INVALID CARD **"
    END
    WHEN STRIP(LEFT(PARM,2))="LI" THEN DO
      PARSE VAR PARM . "(" OSA "," DSA ")" "=" TG "," "=" LTYPE .
      IF FIND(MATRIX,OSA)=0 | FIND(MATRIX,DSA)=0 THEN DO
        SAY PARM "** INVALID SUBAREA **"
      END
      IF TG<1 | TG>255 THEN DO
        SAY PARM "** INVALID TG **"
      END
      IF LTYPE¬="C" THEN DO
        IF LTYPE¬="L" THEN DO
          SAY PARM "** INVALID LINK TYPE **"
        END
      END
      LNUM=LNUM+1
      OSA=RIGHT(OSA,3,"0")
      DSA=RIGHT(DSA,3,"0")
      LINK.LNUM=OSA||"."||TG||"."||DSA
      IF LTYPE="C" THEN DO
        CLNUM=CLNUM+1
        LNAME.LNUM=LTYPE||CLNUM
        LTYPE.LNUM="CHANNEL"
      END
      ELSE DO
        LLNUM=LLNUM+1
        LNAME.LNUM=LTYPE||LLNUM
        LTYPE.LNUM="LINE"
      END
    END
    OTHERWISE SAY PARM "** INVALID CARD **"
  END
END
/* SA TABLE CREATION                                                 */
HSA.=""
DSA.=""
DO I=1 TO HOSTSA
  HSA.I=SA.I
  II=VALUE(HSA.I)
  HSAFLAG.II=1
  DSA.I=HSA.I
END
DO I=HOSTSA+1 TO TOTSA
  DSA.I=SA.I
END
SAY "CONTINUE ? (Y/N)"
PULL ANS
IF ANS<>"Y" THEN EXIT
SAY "ROUTES SEARCH IN PROGRESS..."
/* SEARCH ALL POSSIBLE ROUTES BETWEEN SUBAREAS                       */
DO CUR=1 TO LNUM
  J=LNUM+CUR
  PARSE VAR LINK.CUR ORIG "." TG "." DEST
  LINK.J=DEST||"."||TG||"."||ORIG
END
LNUM=LNUM*2
/* START FROM LEVEL 1                                                */
L=1
I=1
DO CUR=1 TO LNUM
  PARSE VAR LINK.CUR ORIG.CUR "." TG.CUR "." DEST.CUR
  ROUTE.I.L=ORIG.CUR||"."||TG.CUR||"."||DEST.CUR
  I=I+1
END
CT.L=I-1
/* CONTINUE ON NEXT LEVELS UNTIL ALL ROUTES ARE EXHAUSTED            */
NL=L+1
DO FOREVER
  I=1
  DO J=1 TO CT.L
    DO SCAN=1 TO LNUM
      PARSE VAR LINK.SCAN ORIG.SCAN "." TG.SCAN "." DEST.SCAN
      IF RIGHT(ROUTE.J.L,3)=ORIG.SCAN THEN DO
        TGDEST.SCAN=TG.SCAN||"."||DEST.SCAN
        IF INDEX(ROUTE.J.L,TGDEST.SCAN)=0  THEN DO
          IF INDEX(ROUTE.J.L,DEST.SCAN)=0  THEN DO
            ROUTE.I.NL=ROUTE.J.L||"."||TGDEST.SCAN
            I=I+1
          END
        END
      END
    END
  END
  CT.NL=I-1
  IF CT.NL=0 THEN LEAVE
  L=L+1;NL=NL+1
END
SAY "VIRTUAL ROUTES ASSIGNMENT IN PROGRESS..."
/* ASSIGN TO EVERY ROUTE THE VIRTUAL ROUTE NUMBER STARTING FROM      */
/* THE SHORTEST ROUTE THAT WILL BE ASSIGNED TO VR0                   */
VR.="";TG.=""
DO I=1 TO L
  DO J=1 TO CT.I
    OSA=STRIP(LEFT(ROUTE.J.I,3),'L',0)
    DSA=STRIP(RIGHT(ROUTE.J.I,3),'L',0)
    DO VV=1 TO VRMAX
      VR#=VV-1
      IF VR.OSA.DSA.VR#=""
      THEN DO
        VR.OSA.DSA.VR#=ROUTE.J.I
        VR.DSA.OSA.VR#=INV(ROUTE.J.I)
        LEAVE
      END
      ELSE
      IF VR.OSA.DSA.VR#=ROUTE.J.I | VR.DSA.OSA.VR#=ROUTE.J.I THEN LEAVE
    END
  END
END
SAY "EXPLICIT ROUTES SEARCH IN PROGRESS..."
VRER.=""
/* FIND ALL EXPLICIT ROUTES RESOLVING CONFLICT                       */
DO J=1 TO TOTSA
  DSA=VALUE(DSA.J)
  NEXTER#=1
  DO I=1 TO TOTSA
    OSA=VALUE(DSA.I)
    IF DSA=OSA THEN ITERATE
    DO KK=VRMAX TO 1 BY -1
/*  DO KK=1 TO NVR+1         */
      VR#=KK-1
      IF VR.OSA.DSA.VR#="" THEN DO
        ITERATE
      END
      ADSA=(LENGTH(VR.OSA.DSA.VR#)-3)/6
      IF ADSA>TGMAX THEN ITERATE
      ER#=0
      NAFLAG.=0;AUFLAG.=0;ADFLAG.=0;GFLAG=0
/* CHECK CONFLICT                                                    */
      DO E=1 TO NEXTER#
        WOSA=OSA
        EE=E-1
        DO W=1 TO ADSA
          IF ER.DSA.WOSA.EE=""
          THEN DO
            NAFLAG.EE=1
          END
          ELSE DO
            IF ER.DSA.WOSA.EE=SUBSTR(VR.OSA.DSA.VR#,((W-1)*6+5),5)
            THEN DO
              AUFLAG.EE=1
            END
            ELSE DO
              ADFLAG.EE=1
            END
          END
          WOSA=STRIP(SUBSTR(VR.OSA.DSA.VR#,((W-1)*6+7),3),'L',0)
        END
      END
/* CHECK E.R. NUMBER                                                 */
      CNEXTER#=NEXTER#
      DO FF=1 TO CNEXTER#
        F=FF-1
        IF (NAFLAG.F=1 | AUFLAG.F=1) & ADFLAG.F=0
        THEN DO
          ER#=F;GFLAG=1;LEAVE
        END
        IF ADFLAG.F=1 THEN DO
          IF FF=CNEXTER# THEN DO
            ER#=NEXTER#;NEXTER#=NEXTER#+1;NAFLAG.ER#=1;LEAVE
          END
        END
      END
      IF ER#<ERMAX THEN DO
        ERVR.OSA.DSA.VR#=ER#
        VRER.DSA.OSA.ER#=VR#
/* E.R. NUMBER ASSIGNMENT                                            */
        WOSA=OSA
        DO W=1 TO ADSA
         IF NAFLAG.ER#=1 | ADFLAG.ER#=1 | GFLAG=1
         THEN DO
     ER.DSA.WOSA.ER#=STRIP(SUBSTR(VR.OSA.DSA.VR#,((W-1)*6+5),5),'L',0)
           WOSA=STRIP(RIGHT(ER.DSA.WOSA.ER#,3),'L',0)
         END
        END
      END
    END
  END
END
SAY "PATH REPORT GENERATION IN PROGRESS..."
OUT.="";O=0
CALL WRITE ("***********************************")
CALL WRITE ("*     SNA  ROUTE  PLANNING        *")
CALL WRITE ("***********************************")
CALL WRITE ("")
CALL WRITE ("")
DO I=1 TO TOTSA
  OSA=VALUE(DSA.I)
  CALL WRITE ("****************** SUBAREA " OSA)
  DO J=1 TO TOTSA
    DSA=VALUE(DSA.J)
    IF DSA=OSA THEN ITERATE
    CALL WRITE ("")
    CALL WRITE ("PATH     DESTSA = " DSA)
    DO V=1 TO ERMAX
      ER#=V-1
      WVR=VRER.DSA.OSA.ER#
      IF WVR="" | ERVR.OSA.DSA.WVR="" | ERVR.DSA.OSA.WVR=""
        THEN ITERATE
      ADJSA=STRIP(RIGHT(ER.DSA.OSA.ER#,3),'L',0)
      TG=LEFT(ER.DSA.OSA.ER#,1)
      CALL WRITE ("         ER"||ER# "= ("||ADJSA||","||TG||")")
    END
    IF HSAFLAG.OSA=1 THEN
    DO V=1 TO VRMAX
      VR#=V-1
      IF ERVR.OSA.DSA.VR#<>"" & ERVR.DSA.OSA.VR#<>"" THEN DO
      CALL WRITE ("         VR"||VR# "=" ERVR.OSA.DSA.VR#)
      END
    END
  END
  CALL WRITE ("")
END
"EXECIO " O " DISKW " OUTFILE " (FINIS STEM OUT."
"FREE F(" OUTFILE ")"
SAY "SUMMARY REPORT GENERATION IN PROGRESS..."
OUT.="";O=0
CALL WRITE ("***********************************")
CALL WRITE ("*     SNA  ROUTE  PLANNING        *")
CALL WRITE ("***********************************")
CALL WRITE ("")
CALL WRITE ("VRMAX = " VRMAX " - ERMAX = " ERMAX " - TGMAX = " TGMAX)
CALL WRITE ("")
CALL WRITE ("")
CALL WRITE ("***********************************")
CALL WRITE ("*         SUBAREA TABLE           *")
CALL WRITE ("***********************************")
CALL WRITE ("")
CALL WRITE ("----------------------------")
CALL WRITE ("|   SA   |  TYPE  |  NAME  |")
CALL WRITE ("|        |        |        |")
CALL SASORT
DO I=1 TO TOTSA
SA.I=RIGHT(SA.I,5);SAT.I=LEFT(SATYPE.I,4);SAN.I=CENTER(SANAME.I,4)
CALL WRITE ("|" SA.I " | " SAT.I " | " SAN.I " |")
END
CALL WRITE ("----------------------------")
CALL WRITE ("")
CALL WRITE ("")
CALL WRITE ("***********************************")
CALL WRITE ("*         LINK    TABLE           *")
CALL WRITE ("***********************************")
CALL WRITE ("")
CALL WRITE ("-----------------------------------")
CALL WRITE ("|  OSA-DSA  |  TYPE   | TG | NAME |")
CALL WRITE ("|           |         |    |      |")
CALL LKSORT
DO I=1 TO LNUM/2
  PARSE VAR LINK.I OSA "." TG "." DSA
  OSA=STRIP(OSA,'L',0)
  DSA=STRIP(DSA,'L',0)
  ODSA=CENTER(OSA||"-"||DSA,9);LT.I=LEFT(LTYPE.I,7);LN.I=LEFT(LNAME.I,4)
CALL WRITE ("|" ODSA "|" LT.I "| " TG "|" LN.I "|")
END
CALL WRITE ("-----------------------------------")
CALL WRITE ("")
CALL WRITE ("")
CALL WRITE ("***********************************")
CALL WRITE ("*     VIRTUAL ROUTE TABLE         *")
CALL WRITE ("***********************************")
DO I=1 TO TOTSA
  OSA=VALUE(DSA.I)
  DO J=1 TO TOTSA
    DSA=VALUE(DSA.J)
    IF OSA=DSA THEN ITERATE
    IF HSAFLAG.OSA¬=1 & HSAFLAG.DSA¬=1 THEN ITERATE
    CALL WRITE ("")
    CALL WRITE ("    OSA=" OSA "   DSA=" DSA)
    CALL WRITE ("------------------------------------")
    CALL WRITE ("| VRN | ERN | RERN |       ROUTE    ")
    CALL WRITE ("|     |     |      |                ")
    DO K=1 TO VRMAX
      VR#=K-1
      IF VR.OSA.DSA.VR#<>"" & ERVR.OSA.DSA.VR#<>"",
      & ERVR.DSA.OSA.VR# <>"" THEN DO
        VR=CENTER(VR#,3)
        ER=CENTER(ERVR.OSA.DSA.VR#,3)
        RER=CENTER(ERVR.DSA.OSA.VR#,4)
        ROUTE=CONV(VR.OSA.DSA.VR#)
        CALL WRITE ("|" VR "|" ER "|" RER "|" ROUTE)
      END
    END
    CALL WRITE ("------------------------------------")
  END
END
CALL WRITE ("")
CALL WRITE ("")
CALL WRITE ("***********************************")
CALL WRITE ("*     T. G.         TABLE         *")
CALL WRITE ("***********************************")
DO L=1 TO LNUM/2
  CALL WRITE ("")
  CALL WRITE ("------------------------------------")
  CALL WRITE ("| SA  | SA  | TGN | (SA,SA,VRN)    |")
  CALL WRITE ("|     |     |     |                |")
  DO I=1 TO TOTSA
    OSA=VALUE(DSA.I)
    DO J=1 TO TOTSA
      DSA=VALUE(DSA.J)
      IF OSA=DSA THEN ITERATE
      IF HSAFLAG.OSA¬=1 & HSAFLAG.DSA¬=1 THEN ITERATE
      DO E=1 TO VRMAX
        VR#=E-1
        IF VR.OSA.DSA.VR#="" THEN ITERATE
        ELSE IF INDEX(VR.OSA.DSA.VR#,LINK.L)¬=0 THEN DO
          SA1=CENTER(STRIP(LEFT(LINK.L,3),'L',0),3)
          SA2=CENTER(STRIP(RIGHT(LINK.L,3),'L',0),3)
          TG=CENTER(SUBSTR(LINK.L,5,1),3)
          TRIP=LEFT("("||OSA||","||DSA||","||VR#||")",12)
          CALL WRITE ("|" SA1 "|" SA2  "|" TG "|" TRIP "  |")
        END
      END
    END
  END
  CALL WRITE ("------------------------------------")
END
"EXECIO " O " DISKW " RPTFILE " (FINIS STEM OUT."
"FREE F(" RPTFILE ")"
SAY "SRP EXEC ENDED SUCCESSFULLY."
EXIT RC
/* ************************************** */
CONV:
PARSE ARG ROU
CROU=""
CNLI=(LENGTH(ROU)-3)/6
DO CL=1 TO CNLI+1
  CSA=SUBSTR(ROU,(CL-1)*6+1,3)
  CTG=SUBSTR(ROU,(CL-1)*6+5,1)
  DO CI=1 TO TOTSA
    IF CSA=SA.CI THEN DO
      CROU=CROU||STRIP(SANAME.CI)
      LEAVE
    END
  END
  IF CTG¬="" THEN CROU=CROU||".TG"||CTG||"."
END
RETURN CROU

/* ************************************** */
READ:
DO FOREVER
 IF LEFT(PARMS.P,1)<>"*" THEN LEAVE
 ELSE P=P+1
END
PARM=STRIP(PARMS.P)
P=P+1
RETURN PARM
/* ************************************** */
SASORT:
DO J=TOTSA TO 1 BY -1
  DO I=1 TO J
    IF SANAME.I>SANAME.J THEN DO
      SAW=SA.I;SA.I=SA.J;SA.J=SAW
      SATYPEW=SATYPE.I;SATYPE.I=SATYPE.J;SATYPE.J=SATYPEW
      SANAMEW=SANAME.I;SANAME.I=SANAME.J;SANAME.J=SANAMEW
    END
  END
END
RETURN
/* ************************************** */
LKSORT:
DO J=LNUM/2 TO 1 BY -1
  DO I=1 TO J
    IF LNAME.I>LNAME.J THEN DO
      LINKW=LINK.I;LINK.I=LINK.J;LINK.J=LINKW
      LTYPEW=LTYPE.I;LTYPE.I=LTYPE.J;LTYPE.J=LTYPEW
      LNAMEW=LNAME.I;LNAME.I=LNAME.J;LNAME.J=LNAMEW
    END
  END
END
RETURN
/* ************************************** */
INV:
PARSE ARG ROUTE
INVROUTE=RIGHT(ROUTE,3)
INSA=(LENGTH(ROUTE)-3)/6
DO Q=INSA TO 1 BY -1
  INVROUTE=INVROUTE||SUBSTR(ROUTE,(Q-1)*6+4,3)
  INVROUTE=INVROUTE||SUBSTR(ROUTE,(Q-1)*6+1,3)
END
RETURN INVROUTE
/* ************************************** */
WRITE:
PARSE ARG OUTPUT
O=O+1
OUT.O=OUTPUT
RETURN


SAMPLE INPUT

* input parameters of SRP EXEC
* all parms start from col. 1
* this is a comment
*
* host subarea description
* SA=xxx,TYPE=HOST ------- xxx : subarea number
*
SA=1,TYPE=HOST
*
* ncp subarea description
* SA=xxx,TYPE=NCP -------- xxx : subarea number
*
SA=2,TYPE=NCP
SA=3,TYPE=NCP
SA=4,TYPE=NCP
*
* link description
* LINK=(xxx,yyy) ------- (xxx,yyy) : link adjacent subarea numbers
* TG=zzz --------------- zzz : link transmission group number
* TYPE=C|L ------------- C=channel link - L=line link
*
LINK=(1,2),TG=1,TYPE=C
LINK=(2,3),TG=1,TYPE=L
LINK=(2,4),TG=1,TYPE=L
LINK=(2,4),TG=2,TYPE=L
*
* must be the last card
END


SAMPLE OUTPUT

Generated PATH macros

***********************************
*     SNA  ROUTE  PLANNING        *
***********************************


****************** SUBAREA  1

PATH     DESTSA =  2
         ER0 = (2,1)
         VR0 = 0

PATH     DESTSA =  3
         ER0 = (2,1)
         VR0 = 0

PATH     DESTSA =  4
         ER0 = (2,1)
         ER1 = (2,1)
         VR0 = 1
         VR1 = 0

****************** SUBAREA  2

PATH     DESTSA =  1
         ER0 = (1,1)

PATH     DESTSA =  3
         ER0 = (3,1)

PATH     DESTSA =  4
         ER0 = (4,2)
         ER1 = (4,1)

****************** SUBAREA  3

PATH     DESTSA =  1
         ER0 = (2,1)

PATH     DESTSA =  2
         ER0 = (2,1)

PATH     DESTSA =  4
         ER0 = (2,1)
         ER1 = (2,1)

****************** SUBAREA  4

PATH     DESTSA =  1
         ER0 = (2,2)
         ER1 = (2,1)

PATH     DESTSA =  2
         ER0 = (2,2)
         ER1 = (2,1)

PATH     DESTSA =  3
         ER0 = (2,2)
         ER1 = (2,1)

Sample report

***********************************
*     SNA  ROUTE  PLANNING        *
***********************************


***********************************
*         SUBAREA TABLE           *
***********************************

----------------------------  THIS TABLE SUMMARIZES THE CHARACTERISTICS
|   SA   |  TYPE  |  NAME  |  OF ANY SUBAREA
|        |        |        |
|     1  |  HOST  |   H1   |  SA : SUBAREA NUMBER
|     2  |  NCP   |   N1   |  TYPE : SUBAREA TYPE
|     3  |  NCP   |   N2   |  NAME : SUBAREA NAME (ASSIGNED BY EXEC)
|     4  |  NCP   |   N3   |
----------------------------


***********************************
*         LINK    TABLE           *
***********************************

-----------------------------------  THIS TABLE SUMMARIZES THE
|  OSA-DSA  |  TYPE   | TG | NAME |  CHARACTERISTICS OF ANY LINK
|           |         |    |      |
|    1-2    | CHANNEL |  1 | C1   |  OSA-DSA : COUPLE OF SUBAREAS
|    2-3    | LINE    |  1 | L1   |            CONNECTED BY THIS LINK
|    2-4    | LINE    |  1 | L2   |  TYPE : LINK TYPE
|    2-4    | LINE    |  2 | L3   |  TG : LINK TRANSMISSION GROUP NUMBER
-----------------------------------  NAME : LINK NAME (ASSIGNED BY EXEC)


***********************************
*     VIRTUAL ROUTE TABLE         *
***********************************

    OSA= 1    DSA= 2
------------------------------------  THIS TABLE DESCRIBES THE ROUTE
| VRN | ERN | RERN |       ROUTE      ASSOCIATED WITH ANY VIRTUAL ROUTE
|     |     |      |                  WITH ITS EXPLICIT ROUTE AND
|  0  |  0  |  0   | H1.TG1.N1        REVERSE EXPLICIT ROUTE NUMBER
------------------------------------
                                      OSA : ORIGIN SUBAREA OF THIS ROUTE
    OSA= 1    DSA= 3                  DSA : DESTINATION SUBAREA OF THIS
------------------------------------        ROUTE
| VRN | ERN | RERN |       ROUTE      VRN : VIRTUAL ROUTE NUMBER
|     |     |      |                  ERN : EXPLICIT ROUTE NUMBER
|  0  |  0  |  0   | H1.TG1.N1.TG1.N2 RERN : REVERSE EXPLICIT ROUTE
------------------------------------         NUMBER
                                      ROUTE : ROUTE DESCRIPTION
    OSA= 1    DSA= 4
------------------------------------
| VRN | ERN | RERN |       ROUTE
|     |     |      |
|  0  |  1  |  1   | H1.TG1.N1.TG1.N3
|  1  |  0  |  0   | H1.TG1.N1.TG2.N3
------------------------------------

    OSA= 2    DSA= 1
------------------------------------
| VRN | ERN | RERN |       ROUTE
|     |     |      |
|  0  |  0  |  0   | N1.TG1.H1
------------------------------------

    OSA= 3    DSA= 1
------------------------------------
| VRN | ERN | RERN |       ROUTE
|     |     |      |
|  0  |  0  |  0   | N2.TG1.N1.TG1.H1
------------------------------------

    OSA= 4    DSA= 1
------------------------------------
| VRN | ERN | RERN |       ROUTE
|     |     |      |
|  0  |  1  |  1   | N3.TG1.N1.TG1.H1
|  1  |  0  |  0   | N3.TG2.N1.TG1.H1
------------------------------------


***********************************
*     T. G.         TABLE         *
***********************************

------------------------------------  THIS TABLE SUMMARIZES THE T.G.
| SA  | SA  | TGN | (SA,SA,VRN)    |  NUMBER AND ALL VIRTUAL ROUTES
|     |     |     |                |  USING THIS T.G.
|  1  |  2  |  1  | (1,2,0)        |
|  1  |  2  |  1  | (1,3,0)        |  SA : SUBAREA CONNECTED TO THIS
|  1  |  2  |  1  | (1,4,0)        |       TRANSMISSION GROUP
|  1  |  2  |  1  | (1,4,1)        |  TGN : TRANSMISSION GROUP NUMBER
------------------------------------  VRN : VIRTUAL ROUTE NUMBER USING
                                            THIS TRANSMISSION GROUP
------------------------------------
| SA  | SA  | TGN | (SA,SA,VRN)    |
|     |     |     |                |
|  2  |  3  |  1  | (1,3,0)        |
------------------------------------

------------------------------------
| SA  | SA  | TGN | (SA,SA,VRN)    |
|     |     |     |                |
|  2  |  4  |  1  | (1,4,0)        |
------------------------------------

------------------------------------
| SA  | SA  | TGN | (SA,SA,VRN)    |
|     |     |     |                |
|  2  |  4  |  2  | (1,4,1)        |
------------------------------------


Ferrero Regis Maurizio
Systems Engineer (Italy)

