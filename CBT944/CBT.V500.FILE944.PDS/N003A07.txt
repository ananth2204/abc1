NCP and VM/VTAM

We are a VM/SP installation and run VM/VTAM to support
our terminal network.  We also run NCP in our 3720
communications controller, which is attached and running
under the control of our VM/VTAM system.  To support NCP
we also run SSP, which is the utility used to generate, load,
and dump the communications controller, whether it be a 3705,
3720, or 3725.

To simplify the procedure of generating, loading, and dumping
our NCP, I have come up with the following REXX EXECs.
Much of the material contained in these EXECs was extracted
from the IBM manual SC30-3348 Network Control Program
and System Support Program Generation and Loading Guide.

Basically, there are three EXECs: VMPEP, which assembles
and generates the NCP load modules; LOADNCP, which uses
the SSP utilities to load the communications controller with the
generated load modules; and DUMPNCP, which uses the SSP
utilities to obtain a formatted dump of the NCP.


VMPEP EXEC

VMPEP takes the NCP source input file and creates the load
library and load modules necessary to load into the
communications controller.  There are options in the EXEC to
specify the name of your input file, the model and version of
the NCP and communications controller (the appropriate
system LOADLIBs and TXTLIBs will then be used during
compilation), as well as various other options.

/********************************************************************/
/*                        NCP GENERATION EXEC                       */
/* CORRECT FORM FOR INVOKING THE EXEC:                              */
/*     VMPEP FN=gen_fn,FT=gen_ft,FM=gen_fm,                         */
/*           V=version,M=model,L=loadlib,T=test                     */
/*        1. GEN_FN, GEN_FT, GEN_FM, is the Filename, Filetype,     */
/*           and Filemode of the Source input file containing your  */
/*           NCP/EP statements to be assembled.                     */
/*        2. V is the Version of NCP that you are running           */
/*           (see table below for valid options)                    */
/*        3. M is the model of your communcications controller      */
/*           (see table below for valid options)                    */
/*        4. L is the Filename of the resulting NCP loadlib that    */
/*           will be produced.                                      */
/*        5. T is an option that will allow for assemblies only     */
/*           to take place, no LOADLIB will be generated.  When     */
/*           T=YES is specified, the GEN_FN is set to "NEW".  This  */
/*           allows new versions of your NCP source deck to be      */
/*           changed and assembled without affecting your existing  */
/*           Source or Loadlib files.                               */
/* IF NO PARAMETERS ARE SPECIFIED, THE FOLLOWING DEFAULTS ARE TAKEN */
/*    FILENAME = DC3720                                             */
/*    FILETYPE = VTAMLST                                            */
/*    FILEMODE = V                                                  */
/*    VERSION  = V4S                                                */
/*    MODEL    = 3720                                               */
/*    LOADLIB  = NCPLOAD                                            */
/*    TEST     = NO                                                 */
/* THE ASSIGNMENT OF THE MACRO AND OBJECT LIBRARY NAMES IS DERIVED  */
/* FROM THE PARAMETERS PASSED ON THE COMMAND LINE; THEY MAY RESIDE  */
/* ON ANY ACCESSED DISK.                                            */
/*                           M O D E L                              */
/*                 3705         3725         3720                   */
/*             --------------------------------------               */
/*     V3     |  MAC3705   |  MAC3725   |  NOT       |              */
/*  V         |  OBJ3705   |  OBJ3725   |  SUPPORTED |              */
/*  E         |--------------------------------------|              */
/*  R  V4     |  NOT       |  NOT       |  NOT       |              */
/*  S         |  SUPPORTED |  SUPPORTED |  SUPPORTED |              */
/*  I         |--------------------------------------|              */
/*  O  V4R2   |  NOT       |  MAC3725   |  MAC3725   |              */
/*  N         |  SUPPORTED |  OBJ3725   |  OBJ3725   |              */
/*            |--------------------------------------|              */
/*     V4     |  NOT       |  NOT       |  MAC3725   |              */
/*     SUBSET |  SUPPORTED |  SUPPORTED |  OBJ3725   |              */
/*             --------------------------------------               */
/********************************************************************/
/*  Setup Work                                                  */
   ADDRESS COMMAND                    /* ENSURE CP/CMS ENVIRONMENT  */
   TRACE 0
   HI = '1DE8'x
   LO = '1D60'x
  'CP SCREEN ALL DEFAULT NONE'
/*  Issue the Requirements to run this exec                     */
   VMFCLEAR
   SAY ' '
   SAY HI||'REQUIREMENTS to run the VMPEP exec'||LO
   SAY HI||'--------------------------------------------------------------'||LO
   SAY '1. This exec must be run from a TEMP disk ... Accessed as "A"'
   SAY '2. TEMP disk must be at least 50 cylinders ... to hold output.'
   SAY '3. Storage must have been defined at 16M ... then IPL''ed 190.'
   SAY '4. After IPL, "ACCESS (NOPROF"  so no disks were accessed.'
   SAY ' '
  SAY 'Either '||HI||'ENTER'||LO||' to Continue or '||HI||'EXIT'||LO||' to Quit'
   SAY ' '
   PULL ANSWR
   SELECT
      WHEN ANSWR = 'EXIT' THEN EXIT
      WHEN ANSWR = 'HX' THEN EXIT
      WHEN ANSWR = 'E' THEN EXIT
   OTHERWISE
      NOP
   END
/*  Access the disks, receive the Parameters                     */
   'ACC 35B B'                         /* NCP Run Disk               */
   'ACC 343 K'                         /* SSP Run Disk               */
   'ACC 298 V'                         /* VM/VTAM 191 Config Disk    */
   VMFCLEAR
   GEN_FN=""                           /* INITIALIZE VARIABLES       */
   GEN_FT=""
   GEN_FM=""
   VERSION=""
   MODEL=""
   LLIB=""
   TEST=""
   ARG REST                            /* GET PARAMS FROM COMMAND    */
   REST=TRANSLATE(REST,' ',',')        /* GET RID OF COMMAS          */
   COUNT=WORDS(REST)
   LPCNT=1
/*  Parse the Parameters into individual variables               */
   DO WHILE LPCNT<=COUNT               /* LOOP THROUGH ONCE FOR EACH */
     TEMP=WORD(REST,LPCNT)             /* WORD IN THE STRING         */
     PARSE VALUE TEMP WITH FRONT '=' BACK
     SELECT
       WHEN (ABBREV(TEMP,'FN')) THEN
         GEN_FN=BACK
       WHEN (ABBREV(TEMP,'FT')) THEN   /* SET APPROPRIATE VARIABLE   */
         GEN_FT=BACK                   /* ACCORDING TO THE ASSIGNMENT*/
       WHEN (ABBREV(TEMP,'FM')) THEN   /* MADE ON THE COMMAND LINE   */
         GEN_FM=BACK
       WHEN (ABBREV(TEMP,'V')) THEN
         VERSION=BACK
       WHEN (ABBREV(TEMP,'M')) THEN
         MODEL=BACK
       WHEN (ABBREV(TEMP,'L')) THEN
         LLIB=BACK
       WHEN (ABBREV(TEMP,'T')) THEN
         TEST=BACK
       OTHERWISE
         SAY TEMP" IS NOT VALID, IGNORED"
     END                               /* END SELECT                 */
     LPCNT=LPCNT+1
   END                                 /* END DO                     */
/*  Check for Defaults to set                                    */
   SAY ' '
   SAY HI||'STATUS messages'||LO
   SAY HI||'--------------------------------------------------------------'||LO
   IF GEN_FN="" THEN DO                /* DEFAULT FILENAME           */
      GEN_FN="DC3720"                  /* IF NOT CODED               */
   END
   SAY " Defaulting to Filename = "GEN_FN
   IF GEN_FT="" THEN DO                /* DEFAULT FILETYPE           */
      GEN_FT="VTAMLST"
   END
   IF TEST="YES" THEN DO               /* ASSEMBLY RUN ?             */
      GEN_FT="NEW"                     /* IF NOT CODED               */
   END
   SAY " Defaulting to Filetype = "GEN_FT
   IF GEN_FM="" THEN DO                /* DEFAULT FILEMODE           */
      GEN_FM="V"                       /* IF NOT CODED               */
   END
   SAY " Defaulting to Filemode = "GEN_FM
   IF VERSION="" THEN DO               /* VERSION DEFAULTS TO V3     */
      VERSION="V4S"
   END
   SAY " Defaulting to Version  = "VERSION
   IF MODEL="" THEN DO                 /* MODEL DEFAULTS TO 3720     */
      MODEL="3720"
      SAY " Defaulting to Model    = "MODEL
   END
   IF LLIB="" THEN DO                  /* MODEL DEFAULTS TO 3720     */
      LLIB="NCPLOAD"
      say " Defaulting to Loadlib  = "LLIB
   END
   IF TEST="YES" THEN DO               /* RUN ASSEMBLY ONLY       */
      GEN_FT="NEW"                     /* FIND "NEW" FILE            */
      SAY HI||"TEST"||LO||" run requested - will only do ASSEMBLIES"
      SAY ""
   END
/*  Validate that the NCP Source file exists                     */
  'STATE' GEN_FN GEN_FT GEN_FM         /* SEE IF GEN EXISTS ON DISK  */
   IF RC Â¬= 0 THEN DO
     SAY GEN_FN GEN_FT GEN_FM "DOES NOT EXIST"
     EXIT RC                           /* EXIT IF GEN DOESN'T EXIST  */
   END
/*  Select the appropriate MACRO and OBJECT libraries            */
   SELECT
     WHEN (VERSION="V3")&(MODEL="3705") THEN DO
         MACRO=MAC3705                 /* FOR V3 & 3705              */
         OBJECT=OBJ3705                /*                            */
     END
     WHEN (VERSION="V3")&(MODEL="3725") THEN DO
         MACRO=MAC3725                 /* FOR V3 & 3725              */
         OBJECT=OBJ3725                /*                            */
     END
     WHEN (VERSION="V4R2")&((MODEL="3725")|(MODEL="3720")) THEN DO
         MACRO=MAC3725                 /* FOR V4R2 & 3725|3720       */
         OBJECT=OBJ3725                /*                            */
     END
     WHEN (VERSION="V4S")&(MODEL="3720") THEN DO
         MACRO=MAC3725                 /* FOR V4 SUBSET & 3720       */
         OBJECT=OBJ3725                /*                            */
     END
     OTHERWISE DO
         SAY "VERSION = "VERSION" NOT VALID WITH MODEL ="MODEL
         SAY "WHEN RUNNING UNDER VM"
         EXIT
     END
   END                                 /* END SELECT                 */
/*  Validate that the libraries exist                            */
   'ESTATE' MACRO 'MACLIB *'           /* SEE IF MACLIB EXISTS       */
   IF RC Â¬= 0 THEN DO
     SAY "ERROR IN ACCESSING" MACRO "MACLIB"
     EXIT RC                           /* EXIT IF GEN DOESN'T EXIST  */
   END
   'ESTATE' OBJECT 'TXTLIB *'          /* SEE IF TXTLIB EXISTS       */
   IF RC Â¬= 0 THEN DO
     SAY "ERROR IN ACCESSING" OBJECT "TXTLIB"
     EXIT RC                           /* EXIT IF GEN DOESN'T EXIST  */
   END
/*  Setup filedefs for all files                                 */
 /* CLEAR ALL OLD FILEDEFS                                           */
   'FILEDEF * CLEAR'
 /* THE DBWORKFL IS NEEDED ONLY WHEN THERE IS NOT ENOUGH VIRTUAL     */
 /* MEMORY TO HOLD ALL OF NDF'S WORK DATA.  IF YOU FIND THAT YOU     */
 /* ARE RUNNING OUT OF MEMORY, UNCOMMENT THE NEXT LINE               */
 /*'FILEDEF DBWORKFL DISK DBWORKFL FILE A ( XTENT 40'                */
 /* MACRO LIBRARIES USED IN THE TABLE ASSEMBLY PHASE OF NDF          */
   'FILEDEF SYSLIB DISK' MACRO 'MACLIB *'
   'GLOBAL MACLIB' MACRO
 /* INPUT FILE WITH NCP/EP GENERATION STATEMENTS                     */
   'FILEDEF GENDECK DISK' GEN_FN GEN_FT GEN_FM
 /* GENERATION VALIDATION STEP OUTPUT                                */
   'FILEDEF SYSPRINT DISK' GEN_FN 'LISTING A'
 /* NDF SUMMARY LISTING                                              */
   'FILEDEF PRINTER TERM'
 /* SOURCE FOR TABLE 1 ASSEMBLY - OUTPUT FROM GENERATION VALIDATION  */
   'FILEDEF TBL1SRCE DISK TABLE1 SOURCE A'
 /* LISTING FROM THE TABLE1 ASSEMBLY                                 */
   'FILEDEF TBL1LST DISK TABLE1 LISTING A'
 /* TEXT OUTPUT FROM THE TABLE1 ASSEMBLY                             */
   'FILEDEF TBL1OBJ DISK TABLE1 TEXT A'
 /* SOURCE FOR TABLE 2 ASSEMBLY - OUTPUT FROM GENERATION VALIDATION  */
   'FILEDEF TBL2SRCE DISK TABLE2 SOURCE A'
 /* LISTING FROM THE TABLE2 ASSEMBLY                                 */
   'FILEDEF TBL2LIST DISK TABLE2 LISTING A'
 /* TEXT OUTPUT FROM THE TABLE2 ASSEMBLY                             */
   'FILEDEF TBL2OBJ DISK TABLE2 TEXT A'
 /* LINK EDIT CARDS OUTPUT FROM THE GENERATION VALIDATION STEP       */
   'FILEDEF LNKSTMT DISK NCPINCL TEXT A'
 /* TEMPORARY WORK FILE USED BY THE TABLE ASSEMBLIES                 */
   'FILEDEF SYSUT1 DISK SYSUT1 TEMP A4 (BLOCK 4000'
/*  Run the Network Definition Facility                          */
   'ICNRTNDF'
   IF RC Â¬= 0 THEN DO
       SAY "*** ERROR IN EXECUTING NDF (ICNRTNDF) ***"
       SAY "Return Code = "RC
       SAY ""
       EXIT RC
   END
/*  Put TEXT output from table assemblies into a simulated PDS   */
   'TXTLIB GEN OBJ TABLE1 TABLE2'
   IF RC Â¬= 0 THEN DO
       SAY "CANNOT FIND TABLE1 TEXT OR TABLE2 TEXT"
       EXIT 99
   END
/*  ERASE temporary work files                                   */
   'ERASE SYSUT1 TEMP A'
   'ERASE TABLE1 SOURCE A'
   'ERASE TABLE2 SOURCE A'
   'ERASE TABLE1 TEXT A'
   'ERASE TABLE2 TEXT A'
/*  Issue more FILEDEFs for the LINK EDITs                       */
 /* FILDEFS FOR THE LINK EDIT STEP                                   */
   'FILEDEF SYSUT1 CLEAR'
   'FILEDEF' OBJECT 'DISK' OBJECT 'TXTLIB *'
 /* NCP/EP TABLE TEXT                                                */
   'FILEDEF SYSPUNCH DISK OBJ TXTLIB A'
 /* NAME OF OUTPUT LIBRARY FOR THE LOAD MODULE                       */
   'FILEDEF SYSLMOD DISK' GEN_FN 'LOADLIB A'
/*  Run the LINKAGE EDITOR                                       */
   'LKED NCPINCL (MAP NCAL NOTERM LET LIST ALIGN2 SIZE 512K'
/*  Check to see if this is ASSEMBLY only                         */
   IF TEST="YES" THEN DO            /* RUN ASSEMBLY ONLY             */
     SAY ' '
     SAY 'T=YES was requested, ASSEMBLY and LINK EDIT complete'
     SAY 'Listings now reside on 191 'A' disk'
     SAY HI||'Exiting ...........'||LO
     SAY ' '
     EXIT
   END
/*  Copy all files to the correct Production disks               */
   VMFCLEAR
   SAY ' '
   SAY HI||'STATUS messages'||LO
   SAY HI||'--------------------------------------------------------------'||LO
   SAY 'Copying  LOADLIB, LISTING, and LKEDIT files to'
   SAY 'NCP RUN disk (35B) as filename  ==>  'LLIB
   SAY ' '
 /* CHANGE THE GEN_FN TO LLIB                                        */
   'RENAME 'GEN_FN' LOADLIB A 'LLIB' = ='
   'RENAME 'GEN_FN' LISTING A 'LLIB' = ='
   'RENAME  NCPINCL LKEDIT  A 'LLIB' = ='
 /* COPY NECESSARY MEMBERS TO NCP RUN DISK (35B)                     */
   'COPY 'LLIB' LOADLIB A = = B (REP'
   'COPY 'LLIB' LISTING A = = B (REP'
   'COPY 'LLIB' LKEDIT  A = = B (REP'
/*  Let them know we're all DONE                                 */
   SAY ' '
   SAY HI||'*** NCP/EP PEP GENERATION FINISHED ***'||LO
   SAY ' '
   EXIT RC


LOAD NCP EXEC

Once you have created the NCP LOADLIB with VMPEP, you
can use the LOADNCP program to load the communications
controller.  Although most installations will load their
controller through VM/VTAM and the
VARY,ACT...,LOAD=YES command, there may be times
when VM/VTAM is not up and it is necessary to load the
controller.  This program will do the job.  The one-line file
NCP LOADCARD must reside on your 191 A disk at the time
LOADNCP is run and is required by the SSP utility that
actually loads the box.  See the documentation at the beginning
of program LOADNCP for an explanation of what needs to be
changed in file NCP LOADCARD.

 /********************************************************************/
 /*                        NCP LOAD EXEC                             */
 /* CORRECT FORM FOR INVOKING THE EXEC:                              */
 /*     LOADNCP VTAM=addr,L=loadlib                                  */
 /*        1. ADDR is the virtual address of your Communications     */
 /*           controller.  Your Communications controller must       */
 /*           have been previously detached from your VM/VTAM        */
 /*           service machine and attached to this machine as        */
 /*           this address.                                          */
 /*        2. LOADLIB is the name of the LOADLIB that was generated  */
 /*           from your NCP source statements (this is the L         */
 /*           parameter in the VMPEP exec)                           */
 /*        3. To run this exec, the communications controller        */
 /*           must be detached from the VTAM service machine and     */
 /*           attached to the userid running this exec.              */
 /*        4. The NCP LOADCARD file must be edited and the UNIT=     */
 /*           parameter must be changed to reflect the virtual       */
 /*           address of the controller attached to this machine.    */
 /*           This is the same value specified for ADDR.             */
 /*        5. The NCP LOADCARD file must be edited and the           */
 /*           LOADMOD= parameter must be changed to reflect which    */
 /*           member in loadlib L contains the desired NCP           */
 /*           load module (generally, this will be the filename      */
 /*           of your source NCP file).                              */
 /* IF NO PARAMETERS ARE SPECIFIED, THE FOLLOWING DEFAULTS ARE TAKEN */
 /*    ADDR     =  040                                               */
 /*    LOADLIB  =  NCPLOAD                                           */
 /********************************************************************/
/*  Setup Work                                                   */
   ADDRESS COMMAND                     /* ENSURE CP/CMS ENVIRONMENT  */
   TRACE 0
   HI = '1DE8'x
   LO = '1D60'x
  'CP SCREEN ALL DEFAULT NONE'
/*  Issue the Requirements to run this exec                      */
   VMFCLEAR
   SAY ' '
   SAY HI||'REQUIREMENTS to run the LOADNCP exec'||LO
   SAY HI||'--------------------------------------------------------------'||LO
   SAY '1. You must be linked to the disk containing your NCP LOADLIB'
   SAY '2. The controller to be loaded must be ATTACHED to this machine'
   SAY ' '
  SAY 'Either '||HI||'ENTER'||LO||' to continue or '||HI||'EXIT'||LO||' to quit'
   SAY ' '
   PULL ANSWR
   SELECT
      WHEN ANSWR = 'EXIT' THEN EXIT
      WHEN ANSWR = 'HX' THEN EXIT
      WHEN ANSWR = 'E' THEN EXIT
   OTHERWISE
      NOP
   END
/*  Access the disks, receive the Parameters                     */
   'SET CMSTYPE HT'
   'ACC 35B B'                         /* NCP Run Disk               */
   'ACC 343 K'                         /* SSP Run Disk               */
   'SET CMSTYPE RT'
   VMFCLEAR
   ADDR=""                             /* INITIALIZE VARIABLES       */
   LLIB=""
   ARG REST                            /* GET PARAMS FROM COMMAND    */
   REST=TRANSLATE(REST,' ',','         /* GET RID OF COMMAS          */
   COUNT=WORDS(REST)
   LPCNT=1
/*  Parse the Parameters into individual variables               */
   DO WHILE LPCNT<=COUNT               /* LOOP THROUGH ONCE FOR EACH */
     TEMP=WORD(REST,LPCNT)             /* WORD IN THE STRING         */
     PARSE VALUE TEMP WITH FRONT '=' BACK
     SELECT
       WHEN (ABBREV(TEMP,'VTAM')) THEN
         ADDR=BACK
       WHEN (ABBREV(TEMP,'L')) THEN
         LLIB=BACK
       OTHERWISE
         SAY TEMP" IS NOT VALID, IGNORED"
     END                               /* END SELECT                 */
     LPCNT=LPCNT+1
   END                                 /* END DO                     */
/*  Check for Defaults to set                                    */
   SAY ' '
   SAY HI||'STATUS messages'||LO
   SAY HI||'--------------------------------------------------------------'||LO
   IF ADDR="" THEN DO                  /* DEFAULT ADDRESS            */
      ADDR="040"                       /* IF NOT CODED               */
   END
   SAY " Defaulting to Controller Address = "ADDR
   IF LLIB="" THEN DO                  /* DEFAULT LOADLIB            */
      LLIB="NCPLOAD"                   /* IF NOT CODED               */
   END
   SAY " Defaulting to NCP Loadlib = "LLIB
/*  Validate Arguments                                           */
   PARSE UPPER VALUE DIAG(8,'QUERY 'ADDR) With RESULT '15'x .
   PARSE UPPER VALUE RESULT With CTLR . . . ATTACH_ID .
   CTLR = STRIP(CTLR)
   ATTACH_ID = STRIP(ATTACH_ID)
   IF CTLR Â¬= "CTLR" THEN DO
      SAY ' '
      SAY ' Address 'ADDR' is not a valid communications controller'
      SAY ' Exiting ....'
      EXIT
   End
   IF ATTACH_ID Â¬= USERID() THEN DO
      SAY ' '
      SAY ' Controller 'ADDR' is not attached to this userid'
      SAY ' Controller 'ADDR' is currently attached to userid 'ATTACH_ID
      SAY ' Exiting ....'
      EXIT
   End
/*  Validate that the NCP LOADCARD file exists                   */
   'STATE NCP LOADCARD A'
    IF RC Â¬= 0 THEN DO
      SAY ' '
      SAY ' NCP LOADCARD file does not exist on your A disk'
      SAY ' EXITing......'
      EXIT
    END
/*  Setup filedefs for all files                                 */
  'FILEDEF * CLEAR'
  'FILEDEF SYSPRINT TERMINAL'
  'FILEDEF SYSUT1   DISK 'LLIB' LOADLIB B'
  'FILEDEF SYSIN    DISK NCP LOADCARD A'
/*  Begin LOADing                                                */
  SAY ' '
  'IFLOADRN'
  IF RC Â¬= 0 THEN DO
     SAVERC = RC
     SAY ' '
     SAY ' ERROR Loading Communications controller'
     SAY ' IFLOADRN Return Code = 'SAVERC
     SAY ' Controller NOT loaded'
     SAY ' '
     EXIT
  END
  ELSE DO
     SAY ' '
     SAY ' Controller LOADED Successfully'
     SAY ' '
  END
/*  And EXIT                                                     */
  SAY ' '
  EXIT


NCP LOADCARD

LOAD LOADMOD=DC3720,UNIT=040


DUMPNCP EXEC

Finally, we have DUMPNCP, which is a program to obtain a
formatted dump of the NCP residing in your communications
controller.  Several situations may require that a dump of your
NCP is available, most occurring during problem resolution
with IBM support.  This program also requires a one-line file
titled NCP DUMPCARD to be present on your 191 A disk, and
contains dump options that govern how your NCP dump will
be taken.  These options are defined in the IBM manual
mentioned previously.  With this and the proper NCP Data
Areas manual, much tuning and error information can be
extracted regarding the performance of your communications
controller.

 /********************************************************************/
 /*                        NCP DUMP EXEC                             */
 /* CORRECT FORM FOR INVOKING THE EXEC:                              */
 /*     DUMPNCP  VTAM=addr,TEMP=cuu                                  */
 /*        1. ADDR is the virtual address of your communications     */
 /*           controller.  Your communications controller must       */
 /*           have been previously detached from your VM/VTAM        */
 /*           service machine and attached to this machine at        */
 /*           this address.                                          */
 /*        2. CUU is the address of a TEMP disk that will be used    */
 /*           to hold the dump output.  This disk should be at       */
 /*           least 20 cylinders on a 3375 DASD unit.                */
 /* IF NO PARAMETERS ARE SPECIFIED, THE FOLLOWING DEFAULTS ARE TAKEN */
 /*    ADDR     = 040                                                */
 /*    CUU      = 199                                                */
 /********************************************************************/
/*  Setup Work                                                   */
   ADDRESS COMMAND                     /* ENSURE CP/CMS ENVIRONMENT  */
   TRACE O
   HI = '1DE8'x
   LO = '1D60'x
  'CP SCREEN ALL DEFAULT NONE'
/*  Issue the Requirements to run this exec                      */
   VMFCLEAR
   SAY ' '
   SAY HI||'REQUIREMENTS to run the DUMPNCP exec'||LO
   SAY HI||'--------------------------------------------------------------'||LO
   SAY '1. You must have a TEMP disk of at least 20 cyl. to hold the dump'
   SAY '2. The controller to be dumped must be ATTACHED to this machine'
   SAY ' '
  SAY 'Either '||HI||'ENTER'||LO||' to continue or '||HI||'EXIT'||LO||' to quit'
   SAY ' '
   PULL ANSWR
   SELECT
      WHEN ANSWR = 'EXIT' THEN EXIT
      WHEN ANSWR = 'HX' THEN EXIT
      WHEN ANSWR = 'E' THEN EXIT
   OTHERWISE
      NOP
   END
/*  Access the disks, receive the Parameters                     */
   'SET CMSTYPE HT'
   'ACC 35B B'                         /* NCP Run Disk               */
   'ACC 343 K'                         /* SSP Run Disk               */
   'SET CMSTYPE RT'
   VMFCLEAR
   ADDR=""                             /* INITIALIZE VARIABLES       */
   CUU=""
   ARG REST                            /* GET PARAMS FROM COMMAND    */
   REST=TRANSLATE(RES,' ',',')         /* GET RID OF COMMAS          */
   COUNT=WORDS(REST)
   LPCNT=1
/*  Parse the Parameters into individual variables               */
   DO WHILE LPCNT<=COUNT               /* LOOP THROUGH ONCE FOR EACH */
     TEMP=WORD(REST,LPCNT)             /* WORD IN THE STRING         */
     PARSE VALUE TEMP WITH FRONT '=' BACK
     SELECT
       WHEN (ABBREV(TEMP,'VTAM')) THEN
         ADDR=BACK
       WHEN (ABBREV(TEMP,'TEMP')) THEN
         CUU=BACK
       OTHERWISE
         SAY TEMP" IS NOT VALID, IGNORED"
     END                               /* END SELECT                 */
     LPCNT=LPCNT+1
   END                                 /* END DO                     */
/*  Check for Defaults to set                                    */
   SAY ' '
   SAY HI||'STATUS messages'||LO
   SAY HI||'--------------------------------------------------------------'||LO
   IF ADDR="" THEN DO                  /* DEFAULT ADDRESS            */
      ADDR="040"                       '* IF NOT CODED               */
   END
   SAY " Defaulting to Controller Address = "ADDR
   IF CUU="" THEN DO                   /* DEFAULT CUU                */
      CUU="199"
   END
   SAY " Defaulting to TEMP disk address  = "CUU
/*  Validate Arguments                                           */
   'SET CMSTYPE HT'
   'ACCESS ' CUU 'Z'
   'SET CMSTYPE RT'
   IF RC Â¬= 0 THEN DO
      SAY ' '
      SAY ' Error ACCESSing TEMP disk at address ==> 'CUU
      SAY ' Exiting ....'
      EXIT
   End
   PARSE UPPER VALUE DIAG(8,'QUERY 'ADDR) With RESULT '15'x .
   PARSE UPPER VALUE RESULT With CTLR . . . ATTACH_ID .
   CTLR = STRIP(CTLR)
   ATTACH_ID = STRIP(ATTACH_ID)
   IF CTLR Â¬= "CTLR" THEN DO
      SAY ' '
      SAY ' Address 'ADDR' is not a valid communications controller'
      SAY ' Exiting ....'
      EXIT
   End
   IF ATTACH_ID Â¬= USERID() THEN DO
      SAY ' '
      SAY ' Controller 'ADDR' is not attached to this userid'
      SAY ' Controller 'ADDR' is currently attached to userid 'ATTACH_ID
      SAY ' Exiting ....'
      EXIT
   End
/*  Validate that the NCP DUMPCARD file exists                   */
  'STATE NCP DUMPCARD A'
   IF RC Â¬= 0 THEN DO
     SAY ' '
     SAY ' NCP DUMPCARD file does not exist on your A disk'
     SAY ' EXITing......'
     EXIT
   END
/*  Setup filedefs for all files                                 */
  'FILEDEF * CLEAR'
  'FILEDEF SYSPRINT DISK NCP LISTING Z'
  'FILEDEF SYSUT2   DISK NCP DUMP Z (RECFM F BLKSIZE 512 XTENT 62500)'
  'FILEDEF SYSIN    DISK NCP DUMPCARD A'
/*  Begin Dumping                                                */
  SAY ' '
  'IFLREAD 3725 'ADDR
  IF RC Â¬= 0 THEN DO
     SAVERC = RC
     SAY ' '
     SAY ' ERROR Dumping Communications controller'
     SAY ' IFLREAD Return Code = 'SAVERC
     SAY ' Controller NOT dumped'
     SAY ' '
     EXIT
  END
  ELSE DO
     SAY ' '
     SAY ' Controller DUMPED Successfully...Proceeding with FORMAT....'
     SAY ' '
  END
/*  Begin Formatting                                             */
  'IFLDUMP'
  IF RC Â¬= 0 THEN DO
     SAVERC = RC
     SAY ' '
     SAY ' ERROR Formatting Communications controller'
     SAY ' IFLDUMP Return Code = 'SAVERC
     SAY ' Controller Dump NOT Formatted'
     SAY ' '
     EXIT
  END
  ELSE DO
     SAY ' '
     SAY ' Communications controller dumped and formatted successfully'
     SAY ' '
  END
/*  And EXIT                                                      */
  SAY ' '
  EXIT


NCP DUMPCARD

DUMP FROMADDR=000,FORMAT=Y,BUF=F


Kevin Potter
Systems Programming Manager
Douglas County (USA)

