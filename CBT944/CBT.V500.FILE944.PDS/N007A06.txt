NetView application development using VIEW

When our operations department requested an application to
execute under NetView, I wrote a REXX EXEC that utilizes
the NetView VIEW command processor.

VIEW is a powerful feature of the NetView product which
allows users to create panels using various colours and
highlighting criteria. When I originally looked at developing
the application I considered using NetView Assembler macros.
These are very cumbersome and rely heavily on coding 3270
datastreams. I decided to use VIEW because of its ease of use
and the methods it uses to control the screen, and its flexible
approach to displaying data.

The application that I developed provides an interface to the
user allowing him to issue NetView commands and to monitor
the changing status of tape devices indicated by the changing
colours on the screen. The VIEW command is structured in the
following way:

      VIEW name1 name2 MSG|NOMSG INPUT|NOINPUT

o      name1 - this is an application name used by the NetView
      program. This name allows the user to name the
      application.

o      name2 - the name of the panel to be displayed.

o      MSG - this allows the panel to be interrupted to receive
      messages or to be updated without pressing the ENTER
      key. This allows status changes to be shown dynamically.

o      NOMSG - this is the default setting and forces the
      NetView user to press the ENTER key to obtain an
      indication of a change in status.

o      INPUT - will return useful information, such as last key
      pressed, cursor location, etc.

o      NOINPUT - treats all input as commands.

The panels that can be created using the VIEW command allow
colour and highlighting to be controlled using attribute symbols
or attribute variables. Obviously how data is displayed is
dependent on the type of terminal device being utilized.

Attribute symbols are defined in the panel source code. There
are two attribute sets available for use. The one that is used is
controlled by an option coded at the start of the panel
definition.

For example, if you code three asterisks at the start of the panel
the default attribute set (AT1) is used. If you code three
asterisks followed by the character string AT2, then the
alternate attribute set will be used. The facilities available in
each attribute set are shown below.


ATTRIBUTE SET ONE (AT1)

Colour                       Symbol    Hex char   Intensity    Field
WHITE                          %         X'6C'      HIGH       TEXT
REVERSED WHITE                 }         X'D0'      HIGH       TEXT
UNDERSCORED WHITE              !         X'5A'      HIGH       TEXT
WHITE                          ~         X'A1'      HIGH       INPUT
TURQUOISE                      $         X'5B'      HIGH       TEXT
UNDERSCORED TURQUOISE          \         X'E0'      HIGH       TEXT
BLUE                           +         X'4E'      NORMAL     TEXT
REVERSED BLUE                  {         X'C0'      HIGH       TEXT
GREEN                          @         X'7C'      NORMAL     TEXT
YELLOW                         ¬         X'5F'      NORMAL     TEXT
PINK                           |         X'6A'      NORMAL     TEXT
RED                            #         X'4A'      HIGH       TEXT


ATTRIBUTE SET TWO (AT2)

Colour                       Symbol    Hex char   Intensity    Field
WHITE                          %         X'6C'      HIGH       TEXT
REVERSED WHITE                 }         X'D0'      HIGH       TEXT
REVERSED RED                   !         X'5A'      HIGH       TEXT
WHITE                          ~         X'A1'      HIGH       TEXT
TURQUOISE                      $         X'5B'      NORMAL     TEXT
REVERSED TURQUOISE             \         X'E0'      NORMAL     TEXT
BLUE                           +         X'4E'      NORMAL     TEXT
REVERSED BLUE                  {         X'C0'      NORMAL     TEXT
GREEN                          @         X'7C'      NORMAL     TEXT
YELLOW                         ¬         X'5F'      NORMAL     TEXT
REVERSED YELLOW                |         X'6A'      NORMAL     TEXT
BLINKING RED                   #         X'4A'      NORMAL     TEXT

Certain rules exist that relate to attribute sets and their usage on
panels. These are detailed in the NetView Customization
manual. In contrast, attribute variables are actually assigned in
the command procedure or REXX EXEC that is being used to
drive the application.  Again rules exist for their usage:
however, this method of defining attributes allows much more
flexible design. The potential values for attribute variables are
as follows.

F = FIELD

Values

FA      Protected data that cannot be entered on a displayed
      panel. This is the default setting.

F1      Unprotected data that can be entered.

I = INTENSITY

Values

IN      Normal
IH      High
ID      Dark, non-displayable data.

C = COLOUR

Values

CD      Default for device
CW      White or neutral
CB      Blue
CR      Red
CP      Pink
CG      Green
CT      Turquoise
CY      Yellow.

H = HIGHLIGHT

Values

HD      Default extended highlighting
HB      Blinking
HR      Reverse video
HU      Underscored.

U = CURSOR

Values

UN      Cursor will not be placed at this field.
UY      Cursor will be placed at the beginning of this field. This
      must be specified for only one variable on the panel.

APPLICATION DESIGN

When I designed the application it was decided that it would be
the front end for our tape operators and would be invoked at
sign-on. This meant that the operators would have to be able to
issue commands from the panel and, if another component of
NetView was utilized, upon completion, the tape application
would always be re-invoked. This is achieved by using the
VIEW command and in NetView terminology is known as a
'rollable' application. The way in which NetView is designed
forces the controlling application (the tape application in this
instance) to be suspended until a command entered from the
panel completes. This was undesirable and I overcame the
problem by using the CMD HIGH command in the REXX
EXEC. This command queues the entered command for
execution then returns to the invoking REXX EXEC.

The NetView program itself allows multiple copies of a
command processor or application to be executed at once.
Because our application is one that will be running constantly
this can cause problems to occur if more than one copy is
executed at a time under the same NetView task. This could
cause the ROLL effect of the application to behave in
unpredictable ways. To overcome this I used the UNIQUE
command. By coding the SIGNAL ON HALT and UNIQUE, I
ensured that error messages are trapped and that the ROLL
application is always re-invoked.

Three special variables are provided to help manage full-screen
input. These are:

REXX and HLL    NetView CLIST     Description
VIEWAID         &VIEWAID          The AID key used to
                                  enter input.
VIEWCURROW      &VIEWCURROW       The cursor location
                                  (ROW) when the AID key was pressed.
VIEWCURCOL      &VIEWCURCOL       The cursor location
                                  (COLUMN) when the AID key was pressed.

The values of these variables will depend on how the panel is
used. VIEWAID can have values of PF1, PF2 - 24, PA1, PA2,
and PA3. If PA1, PA2, or PA3 are pressed the other two
variables are not set, only VIEWAID is set. The other variables
are only set if the PF keys are used or if ENTER is pressed.

The application I designed is very simple. The tape operators
initially wanted to be able to see the changing status of tape
drives while performing other tasks. When a tape operator
signs on to the master tape operator user-id the application is
started. It sets up the necessary environment and initializes
several attribute variables. It then calls an internal subroutine to
issue MVS DISPLAY UNIT commands for the six tape drives
in question. From this it sets up further display variables, and if
a tape is already mounted on one of these devices it resets the
previously set attribute variables. The reason for this reset will
be explained later.

Once all variables are set it uses a special command to place
the values into the GLOBAL variable pool. It then enters a
display section. Using the VIEW command the first panel is
displayed. The panel will show boxes representing the tape
devices and the status of the devices will be displayed
underneath the boxes. The variables are set to display in green
if the device is not in use. If the device is in use then the
variables are set to display in yellow. This is the reason for the
previous reset. If the MVS DISPLAY command shows that a
volume is mounted on a tape drive then the original setting of
the variable is changed to allow the variable to be displayed in
yellow.

The operator can then monitor tape status changes throughout
the day as the colours change from green to yellow. Once the
initial application has been started the status changes are
recorded by trapping MVS tape mount messages using
NetView Message Automation Tables.

The application is now started and the initial panel displayed.
The operator can enter NetView commands on the command
line or use the PF keys defined to the application to end the
application, display the second panel which contains on-line
help information, or perform other functions. The second panel
is displayed if the PF8 key is pressed or if the operator types
NEXT and presses the ENTER key. This panel is a simple help
panel and is controlled in the same way as the first panel by
using the VIEW command.

Because the initial panel is issued with the MSG parameter, the
panel can be updated without the operator having to press the
ENTER key. The application utilizes this feature of the VIEW
command by using NetView message automation tables. All
we want to do is change the status of the global variables if a
tape is mounted on a device, or if the tape is de-mounted.


MAIN TAPE ALLOCATION REXX EXEC

/* REXX */
/*       ********************************************************    */
/*       * PROGRAM NAME: BTAPAPL.                               *    */
/*       * PROGRAMMER:   JOHN BRADLEY.                          *    */
/*       * PURPOSE.                                             *    */
/*       * THIS APPLICATION WAS DESIGNED TO HELP OUR OPERATIONS *    */
/*       * PERSONNEL MONITOR THE STATUS OF OUR TAPE AND         *    */
/*       * CARTRIDGE DRIVES. IT IS NOT MEANT TO BE A            *    */
/*       * COMPREHENSIVE TAPE AND CARTRIDGE MONITOR.            *    */
/*       * WHEN THE TAPE OPERATOR SIGNS ONTO THE SYSTEM THE     *    */
/*       * APPLICATION IS STARTED AND THE TAPE STATUSES ARE     *    */
/*       * OBTAINED.                                            *    */
/*       * STANDARD STATUS WITH NO TAPE IN USE IS DISPLAYED     *    */
/*       * IN GREEN.                                            *    */
/*       * MESSAGE AUTOMATION TABLE ENTRIES ARE USED TO CHANGE  *    */
/*       * THE COLOUR TO YELLOW IF A TAPE IS MOUNTED ON A       *    */
/*       * DRIVE.                                               *    */
/*       * PANELS: THE APPLICATION USES BTAPPNL1 AND BTAPAPL2.  *    */
/*       * EXECS:  REXX EXEC BTAPAPL2 IS USED BY THE MESSAGE    *    */
/*       *         AUTOMATION.                                  *    */
/*       ********************************************************    */
/*       * INITSECT IS USED TO INITIALIZE THE ENVIRONMENT AND   *    */
/*       * SETUP ATTRIBUTES FOR VARIOUS VARIABLES.              *    */
/*       ********************************************************    */
INITSECT:
SIGNAL ON HALT                         /* USE WITH NETVIEW VIEW.     */
'UNIQUE PROMOTE'                       /* ONLY BTAPAPL APPLICATION.  */
IF RC = 4 THEN EXIT -5                 /* BAD RC FROM UNIQUE.        */
SIGNAL ON ERROR                        /* SETUP SIGNAL ON ERROR.     */
$VAR1 = 'FA IH CG HR UN'               /* SETUP DISPLAY VARIABLE     */
$VAR2 = 'FA IH CG HR UN'               /* ATTRIBUTES.                */
$VAR3 = 'FA IH CG HR UN'
$VAR4 = 'FA IH CG HR UN'
$VAR5 = 'FA IH CG HR UN'
$VAR6 = 'FA IH CG HR UN'
$VAR7 = 'FA IH CG HR UN'
$VAR8 = 'FA IH CG HR UN'
$VAR9 = 'FA IH CG HR UN'
$VAR10 = 'FA IH CG HR UN'
$VAR11 = 'FA IH CG HR UN'
$VAR12 = 'FA IH CG HR UN'
$COMMAND = 'FI          UY'            /* SETUP INPUT VARIABLE.      */
/*       ********************************************************    */
/*       * PROCSECT IS USED TO CALL A SUBROUTINE THAT PERFORMS  *    */
/*       * PROCESSING TO INITIALIZE FURTHER VARIABLES FROM      *    */
/*       * OUTPUT OBTAINED USING THE MVS DISPLAY COMMAND.       *    */
/*       ********************************************************    */
PROCSECT:
CALL DISPSUB 440                       /* CALL SUBROUTINE.           */
U440 = UNITNME1                        /* PUT UNITNAME INTO VAR.     */
S440 = UNITSTS1                        /* PUT UNIT STATUS INTO VAR.  */
IF VOLSTAT1 ¬= '' THEN                 /* IF TAPE ON DRIVE THEN      */
   DO                                  /* SETUP VARIABLES TO DISPLAY */
    $VAR1 = 'FA IH CY HR UN'           /* AS YELLOW INSTEAD OF       */
    $VAR3 = 'FA IH CY HR UN'           /* GREEN.                     */
   END
CALL DISPSUB 441                       /* CALL SUBROUTINE.           */
U441 = UNITNME1                        /* PUT UNITNAME INTO VAR.     */
S441 = UNITSTS1                        /* PUT UNIT STATUS INTO VAR.  */
IF VOLSTAT1 ¬= '' THEN                 /* IF TAPE ON DRIVE THEN      */
   DO                                  /* SETPU VARIABLES TO DISPLAY */
   $VAR2 = 'FA IH CY HR UN'            /* AS YELLOW INSTEAD OF       */
   $VAR4 = 'FA IH CY HR UN'            /* GREEN.                     */
  END
CALL DISPSUB C00                       /* CALL SUBROUTINE.           */
UC00 = UNITNME1                        /* PUT UNITNAME INTO VAR.     */
SC00 = UNITSTS1                        /* PUT UNIT STATUS INTO VAR.  */
IF VOLSTAT1 ¬= '' THEN                 /* IF TAPE ON DRIVE THEN      */
   DO                                  /* SETUP VARIABLES TO DISPLAY */
    $VAR5 = 'FA IH CY HR UN'           /* AS YELLOW INSTEAD OF       */
    $VAR9 = 'FA IH CY HR UN'           /* GREEN.                     */
   END
CALL DISPSUB C01                       /* CALL SUBROUTINE.           */
UC01 = UNITNME1                        /* PUT UNITNAME INTO VAR.     */
SC01 = UNITSTS1                        /* PUT UNIT STATUS INTO VAR.  */
IF VOLSTAT1 ¬= '' THEN                 /* IF TAPE ON DRIVE THEN      */
   DO                                  /* SETUP VARIABLES TO DISPLAY */
    $VAR6 = 'FA IH CY HR UN'           /* AS YELLOW INSTEAD OF       */
    $VAR10 = 'FA IH CY HR UN'          /* GREEN.                     */
   END
CALL DISPSUB C08                       /* CALL SUBROUTINE.           */
UC08 = UNITNME1                        /* PUT UNITNAME INTO VAR.     */
SC08 = UNITSTS1                        /* PUT UNIT STATUS INTO VAR.  */
IF VOLSTAT1 ¬= '' THEN                 /* IF TAPE ON DRIVE THEN      */
   DO                                  /* SETUP VARIABLES TO DISPLAY */
    $VAR7 = 'FA IH CY HR UN'           /* AS YELLOW INSTEAD OF       */
    $VAR11 = 'FA IH CY HR UN'          /* GREEN.                     */
   END
CALL DISPSUB C09                       /* CALL SUBROUTINE.           */
UC09 = UNITNME1                        /* PUT UNITNAME INTO VAR.     */
SC09 = UNITSTS1                        /* PUT UNIT STATUS INTO VAR.  */
IF VOLSTAT1 ¬= '' THEN                 /* IF TAPE ON DRIVE THEN      */
   DO                                  /* SETUP VARIABLES TO DISPLAY */
    $VAR8 = 'FA IH CY HR UN'           /* AS YELLOW INSTEAD OF       */
    $VAR12 = 'FA IH CY HR UN'          /* GREEN.                     */
   END
/*       ********************************************************    */
/*       * FOLLOWING COMMAND IS USED TO CREATE GLOBAL VARIABLES *    */
/*       * FROM THE VARIABLES INITIALIZED IN PREVIOUS SECTION   *    */
/*       * AND THIS SECTION.                                    *    */
/*       ********************************************************    */
'GLOBALV PUTC $VAR1,$VAR2,$VAR3,$VAR4,$VAR5,$VAR6',
              '$VAR7,$VAR8,$VAR9,$VAR10,$VAR11,$VAR12',
              'S440,S441,SC00,SC01,SC08,SC09'
/*       ********************************************************    */
/*       * DISPSECT DISPLAYS THE INITIAL PANEL FOR BTAPAPL.     *    */
/*       * THE APPLICATION IS CREATED AS ROLLABLE.              *    */
/*       * COMMANDS CAN BE ISSUED FROM THE PANEL.               *    */
/*       * THE PFKEYS USED BY THE APPLICATION FOLLOW STANDARD   *    */
/*       * NETVIEW DESIGN.                                      *    */
/*       ********************************************************    */
DISPSECT:
 DO FOREVER                                 /* LOOP FOREVER.         */
    COMMAND = '00'X                         /* CLEAR CMDLINE FOR INP */
    'VIEW BTAPAPPL BTAPPNL1 MSG INPUT'      /* PUT PANEL ON SCREEN.  */
    UPPER COMMAND                           /* TRANSLATE INPUT.      */
    SELECT                                  /* CONTROL PFKEYS.       */
     WHEN VIEWAID = PF2 THEN EXIT
     WHEN VIEWAID = PF3 THEN CMD HIGH RETURN
     WHEN VIEWAID = PF6 THEN CMD HIGH ROLL
     WHEN VIEWAID = PF8 THEN CALL DISPSEC2
     WHEN VIEWAID = ENTER THEN
      SELECT
       WHEN COMMAND = NEXT THEN CALL DISPSEC2
       WHEN COMMAND ¬= ' ' THEN
        DO
         'CMD HIGH' COMMAND
        END
         OTHERWISE NOP
      END
       OTHERWISE NOP
    END
 END
EXIT
/*       ********************************************************    */
/*       * DISPSEC2 DISPLAYS THE INITIAL PANEL FOR BTAPAPL.     *    */
/*       * THE APPLICATION IS CREATED AS ROLLABLE.              *    */
/*       * COMMANDS CAN BE ISSUED FROM THE PANEL.               *    */
/*       * THE PFKEYS USED BY THE APPLICATION FOLLOW STANDARD   *    */
/*       * NETVIEW DESIGN.                                      *    */
/*       ********************************************************    */
DISPSEC2:
 DO FOREVER                                 /* LOOP FOREVER.         */
    COMMAND = '00'X                         /* CLEAR CMDLINE FOR INP */
    'VIEW BTAPAPPL BTAPPNL2 MSG INPUT'      /* PUT PANEL ON SCREEN.  */
    UPPER COMMAND                           /* TRANSLATE INPUT.      */
    SELECT                                  /* CONTROL PFKEYS.       */
     WHEN VIEWAID = PF2 THEN EXIT
     WHEN VIEWAID = PF3 THEN CMD HIGH RETURN
     WHEN VIEWAID = PF6 THEN CMD HIGH ROLL
     WHEN VIEWAID = PF7 THEN RETURN
     WHEN VIEWAID = ENTER THEN
      SELECT
       WHEN COMMAND = BACK THEN RETURN
       WHEN COMMAND ¬= ' ' THEN
        DO
         'CMD HIGH' COMMAND
        END
         OTHERWISE NOP
      END
       OTHERWISE NOP
    END
 END
RETURN
/*       ********************************************************    */
/*       * DISPSUB IS THE SUBROUTINE THAT IS USED TO ISSUE      *    */
/*       * MVS DISPLAY COMMANDS AND TRAP THE OUTPUT TO USE      *    */
/*       * VARIOUS FIELDS TO INITIALIZE VARIABLES.              *    */
/*       ********************************************************    */
DISPSUB:
ARG UNITPRM                            /* OBTAIN PARAMETER.          */
UNITNME1 = ' '                         /* INITIALIZE VARIABLES.      */
UNITTYP1 = ' '
UNITSTS1 = ' '
VOLSER1 = ' '
VOLSTAT1 = ' '
FLUSHQ                                 /* START MESSAGE PROCESSING.  */
'TRAP AND SUPPRESS ONLY MESSAGES IEE450I'
'MVS D U,,,'UNITPRM',1'
'WAIT 5 SECONDS FOR MESSAGES'
SELECT
 WHEN EVENT() = 'M' THEN
  DO
   'MSGREAD'
   'GETMLINE LINE' 3
   'PARSEL2R LINE UNITNME1 UNITTYP1 UNITSTS1 VOLSER1 VOLSTAT1'
  END
END
RETURN                                 /* RETURN TO MAIN PROCESSING. */
/*       ********************************************************    */
/*       * ERROR AND HALT ARE ROUTINES THAT ARE ENTERED IF THE  *    */
/*       * PREVIOUS SIGNAL COMMANDS ARE FIRED.                  *    */
/*       ********************************************************    */
ERROR:
EXIT -6
HALT:
EXIT -7


PANEL BTAPPNL1

/*       ********************************************************    */
/*       * PANEL DEFINITION.                                    *    */
/*       * NETVIEW MAIN DISPLAY PANEL FOR BTAPAPL.              *    */
/*       ********************************************************    */
*** AT2
+BTAPPNL1
¬                    O N L I N E   T A P E   M O N I T O R
$
$
¬                                 T A P E S
$
$                  &VAR1     $                   &VAR2     $
$                  &VAR3     $                   &VAR4     $
$
$                     &U440$                        &U441$
$                   &S440    $                    &S441    $
$
¬                            C A R T R I D G E S
$
$        &VAR5     $    &VAR6     $    &VAR7     $    &VAR8     $
$        &VAR9     $    &VAR10    $    &VAR11    $    &VAR12    $
$
$           &UC00$         &UC01$         &UC08$         &UC09$
$         &SC00    $     &SC01    $     &SC08    $     &SC09    $
$
%ACTION===>&COMMAND                                                    %
$
$        PF2= End  PF3= Return  PF6= Roll  PF8= Forward


PANEL BTAPPNL2

/*       ********************************************************    */
/*       * PANEL DEFINITION.                                    *    */
/*       * btapapl SECONDARY DISPLAY PANEL       .              *    */
/*       ********************************************************    */
*** AT2
+BTAPPNL2
¬                    O N L I N E   T A P E   M O N I T O R
$
$
$   This system allows the current status of our tape drives to be
$   monitored.
$
$   The previous panel displays the status as@GREEN$when the tape
$   drive is not in use.
$
$   If a tape drive is in use then it will be displayed in¬YELLOW$.
$
$   The unit address and MVS status are displayed below the tape
$   status display.
$
$   Any available%NETVIEW$commands can be issued from the%COMMAND$line
$   and once complete the tape application will be re-instated.
$
$   Use the%PFKEYS$to control the flow of the panels being displayed.
$
%ACTION===>&COMMAND                                                    %
$
$        PF2= End  PF3= Return  PF6= Roll  PF7= Back


Message Automation Table statements

*        **************************************************************
*        * MESSAGE AUTOMATION STATEMENTS FOR BTAPAPL REXX EXEC.       *
*        **************************************************************
 IF MSGID='TMS001' & TOKEN(2)='IEF233A' & TEXT = .A
  THEN EXEC(CMD('BTAPAPL2 ' A)
  ROUTE(ONE STS01));
*
 IF MSGID='TMS001' & TOKEN(2)='IEF233D' & TEXT = .A
  THEN EXEC(CMD('BTAPAPL2 ' A)
  ROUTE(ONE STS01));
*
 IF MSGID='IEF234E' & TEXT = .A
  THEN EXEC(CMD('BTAPAPL3 ' A)
  ROUTE(ONE STS01));


BTAPAPL2 REXX EXEC

When a tape management message is issued to the operator's
master console and the second word in the message is
'IEF233A', the message text is captured and the following sub-
application is called.

/* REXX */
/*       ********************************************************    */
/*       * BTAPAPL2 IS CALLED BY MESSAGE AUTOMATION TO UPDATE   *    */
/*       * THE BTAPPNL1 SCREEN.                                 *    */
/*       ********************************************************    */
ARG PARMSTR
'PARSEL2R PARMSTR PARM1 PARM2 PARM3'
IF SUBSTR(PARM3,1,3) = 440 THEN
   DO
    'GLOBALV GETC $VAR1,$VAR3'
    $VAR1 = 'FA IH CY HR UN'
    $VAR3 = 'FA IH CY HR UN'
    'GLOBALV PUTC $VAR1,$VAR3'
   END
IF SUBSTR(PARM3,1,3) = 441 THEN
   DO
    'GLOBALV GETC $VAR2,$VAR4'
    $VAR2 = 'FA IH CY HR UN'
    $VAR4 = 'FA IH CY HR UN'
    'GLOBALV PUTC $VAR2,$VAR4'
   END
IF SUBSTR(PARM3,1,3) = C00 THEN
   DO
    'GLOBALV GETC $VAR5,$VAR9'
    $VAR5 = 'FA IH CY HR UN'
    $VAR9 = 'FA IH CY HR UN'
    'GLOBALV PUTC $VAR5,$VAR9'
   END
IF SUBSTR(PARM3,1,3) = C01 THEN
   DO
    'GLOBALV GETC $VAR6,$VAR10'
    $VAR6 = 'FA IH CY HR UN'
    $VAR10 = 'FA IH CY HR UN'
    'GLOBALV PUTC $VAR6,$VAR10'
   END
IF SUBSTR(PARM3,1,3) = C08 THEN
   DO
    'GLOBALV GETC $VAR7,$VAR11'
    $VAR7 = 'FA IH CY HR UN'
    $VAR11 = 'FA IH CY HR UN'
    'GLOBALV PUTC $VAR7,$VAR11'
   END
IF SUBSTR(PARM3,1,3) = C09 THEN
   DO
    'GLOBALV GETC $VAR8,$VAR12'
    $VAR8 = 'FA IH CY HR UN'
    $VAR12 = 'FA IH CY HR UN'
    'GLOBALV PUTC $VAR8,$VAR12'
   END
EXIT


BTAPAPL3 REXX EXEC

The application is passed the text of the message that has
caused it to be called. The application then checks to see which
device has issued the tape mount message. Once it has
identified this it updates the global variables and places them
back in the global pool. Once this has occurred the main
application display will change to show the tape device as
being used, and the colour of the box presented on the panel
for that tape device will change from green to yellow.

The second message automation statement works in the same
way but for a different mount message. The last statement calls
the application presented below.

/* REXX */
/*       ********************************************************    */
/*       * BTAPAPL3 IS CALLED BY MESSAGE AUTOMATION TO UPDATE   *    */
/*       * THE BTAPAPL1 SCREEN.                                 *    */
/*       ********************************************************    */
ARG PARMSTR2
'PARSEL2R PARMSTR2 PARM1 PARM2'
IF SUBSTR(PARM2,1,3) = 440 THEN
   DO
    'GLOBALV GETC $VAR1,$VAR3'
    $VAR1 = 'FA IH CG HR UN'
    $VAR3 = 'FA IH CG HR UN'
    'GLOBALV PUTC $VAR1,$VAR3'
   END
IF SUBSTR(PARM2,1,3) = 441 THEN
   DO
    'GLOBALV GETC $VAR2,$VAR4'
    $VAR2 = 'FA IH CG HR UN'
    $VAR4 = 'FA IH CG HR UN'
    'GLOBALV PUTC $VAR2,$VAR4'
   END
IF SUBSTR(PARM2,1,3) = C00 THEN
   DO
    'GLOBALV GETC $VAR5,$VAR9'
    $VAR5 = 'FA IH CG HR UN'
    $VAR9 = 'FA IH CG HR UN'
    'GLOBALV PUTC $VAR5,$VAR9'
   END
IF SUBSTR(PARM2,1,3) = CO1 THEN
   DO
    'GLOBALV GETC $VAR6,$VAR10'
    $VAR6 = 'FA IH CG HR UN'
    $VAR10 = 'FA IH CG HR UN'
    'GLOBALV PUTC $VAR6,$VAR10'
   END
IF SUBSTR(PARM2,1,3) = C08 THEN
   DO
    'GLOBALV GETC $VAR7,$VAR11'
    $VAR7 = 'FA IH CG HR UN'
    $VAR11 = 'FA IH CG HR UN'
    'GLOBALV PUTC $VAR7,$VAR11'
   END
IF SUBSTR(PARM2,1,3) = C09 THEN
   DO
    'GLOBALV GETC $VAR8,$VAR12'
    $VAR8 = 'FA IH CG HR UN'
    $VAR12 = 'FA IH CG HR UN'
    'GLOBALV PUTC $VAR8,$VAR12'
   END
EXIT

This is the opposite of the previous application and is called
when the device is no longer being used. This REXX EXEC
will reset the global variables so that the display can show the
tape device in green. The message table entries should be
placed in the live NetView message automation table which is
normally contained in the NetView DSIPARM dataset.


ERROR MESSAGES

Finally, I should mention that the VIEW command provides a
number of return codes that need to be trapped in case of
errors. My application does not utilize any of them; however,
for more complex applications it can be useful to use them. I
have presented these below. These codes can be trapped by
using a supplied NetView command list named SHOWCODE.

Code      Meaning

 4            Panel not found in CNMPNL1 or CNMMSGF datasets.
 8            Panel format definition incorrect.
16            VIEW invoked with invalid parameters.
24            Full screen command processor available to OST only.
28            Logical record length of panel not 80 bytes.
32            Unrecoverable error resulted from macro call.
36            Internal programming error occurred.
81            Panel definition format invalid.
82            Panel definition format invalid. Greater than 9600 bytes.
83            Panel definition format invalid. Comment lines
      incorrectly placed in panel definition.
84            Panel definition format invalid. More than 24 lines for display.
85            Panel definition format invalid. More than one
      command line defined.

The SHOWCODE command list can be used to produce
NetView messages for each of the above return codes. The list
below shows the messages associated with the particular return
codes.

Code      Message

 4            CNM335I
 8            CNM336I
16            CNM338I
24            CNM340I
28            CNM341I
32            CNM342I
36            CNM343I
81-85      CNM336I

This article has covered features of NetView that can be used
to design very powerful applications and has also highlighted
how message automation can be used to design applications
that require no operator intervention.


John Bradley
Senior Technical Support Engineer (UK)

