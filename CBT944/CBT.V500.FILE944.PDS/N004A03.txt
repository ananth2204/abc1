Problems with VM/VTAM

Like many other users, we have had problems with VM/VTAM
sending messages only to its secondary user (usually
OPERATOR).  If, for example, somebody from the network
group wanted to do something to the network, it had to be done
in the computer room at the operator's terminal.

Our solution involved setting up a new VM/CMS machine,
called VTAMSRVC, as VTAM's secondary user instead of
OPERATOR.  This VTAM service machine is logged on as the
network console in the computer room.

By using the CMS virtual screen facility, we are able to catch
the console output in a normal CMS file instead of displaying it
on the console.  This file can then be routed to the user making
the request.  These are the components of our system.

o      The VTAM EXEC, which awakes VTAMSRVC with
      SMSG and the VTAM command and displays the output
      from the command on your console so it seems that you
      are VTAM's secondary user.

o      The WACHT EXEC, which waits for the VTAM
      commands to issue the SNDCOM EXEC, which issues the
      VTAM command and sends the result to the user who
      asked for it.

o      The V, D, and Z EXECs on VTAMSRVC's 191, so
      VTAMSRVC can act as a normal secondary user from VTAM.

Take care to define the virtual screen (the first line in the
WACHT EXEC) large enough to hold your biggest display.  In
our case 200 is enough.

Figure 1 shows what the console output might look like if the
user issued the command, VTAM D NET,ID=NCP1.


The following procedures have run on an IBM 4381-R14 with
VM/HPO 5.0 and VTAM/VM 3.1.2 and on a Hitachi EX33
with VM/HPO 5.2 and VTAM/VM 3.1.2


WACHT EXEC

/*****************************************/
/* VTAMSRVC WACHT EXEC                   */
/* this exec reacts on wakeup SMSG       */
/*****************************************/
'DEFINE VSCREEN MESSAGE 200 72 2 0'     /* define virtual screen */
do forever                              /* never ending story */
     'VMFCLEAR'
say 'waiting for commands ......'       /* display active message on console */
     'wakeup (smsg'
     parse upper pull smsg wie opdracht    /* look who's talking */
     com = subword(opdracht,1,1)           /* which command */
     select
     when smsg = 'STOP' then exit
     when (wie = 'OPERATOR' & com ='D') |, /* these users */
          (wie = 'USER2'    & com ='D') |, /* may display */
          (wie = 'USER3'    & com ='D') |, /* something */
          (wie = 'HERMSEN'  & com ='D') |,
          (wie = 'USERETC'  & com ='D')
     then 'EXEC SNDCOM' wie opdracht
     when (wie = 'OPERATOR' & com ='V') |, /* these users */
          (wie = 'USER2'    & com ='V') |, /* may change  */
          (wie = 'USER3'    & com ='V') |, /* something */
          (wie = 'HERMSEN'  & com ='V') |,
          (wie = 'USERETC'  & com ='V')
     then 'EXEC SNDCOM' wie opdracht
     when (wie = 'OPERATOR' & com ='Z')/* this user may shutdown the network */
     then 'EXEC SNDCOM' wie opdracht
     otherwise tell wie 'You are not authorized to use command' opdracht
     end
end


SNDCOM EXEC

/*****************************************/
/* VTAMSRVC SNDCOM EXEC                  */
/* this exec sends the  commands         */
/*****************************************/
trace n
parse arg wie opdracht                     /* get command and user */
'SET FULLSCREEN ON'                        /* make console output go */
'ROUTE * TO MESSAGE'                       /* to cms file */
say 'Command' opdracht 'van' wie           /* who's talking */
'ERASE MESSAGE LOGFILE A'                  /* get rid off the old stuff */
'CP SEND VTAMVM81 VTAM' opdracht           /* send the command */
'CP SLEEP 3 SEC'                           /* wait for it */
'WAITT VSCREEN MESSAGE'                    /* wait for completion */
/*'FINIS MESSAGE LOGFILE A'*/              /* maybe close the file */
'SENDFILE MESSAGE LOGFILE TO ' wie '(NOLOG'/* here it is */
'CLEAR VSCREEN MESSAGE'                    /* clean up for next */
'CLEAR VSCREEN CMS'                        /* commands to display */
'SET FULLSCREEN OFF'
'CLRSCRN'


D EXEC

/*****************************************/
/* VTAMSRVC D EXEC                       */
/* this exec sends the D command         */
/* when VTAMSRVC is inactive             */
/*****************************************/
parse arg opdracht
'CP SEND VTAMVM81 VTAM D' opdracht


V EXEC

/*****************************************/
/* VTAMSRVC V EXEC                       */
/* this exec sends the V command         */
/* when VTAMSRVC is inactive             */
/*****************************************/
parse arg opdracht
'CP SEND VTAMVM81 VTAM V' opdracht


Z EXEC

/*****************************************/
/* VTAMSRVC Z EXEC                       */
/* this exec sends the Z command         */
/* when VTAMSRVC is inactive             */
/*****************************************/
parse arg opdracht
'CP SEND VTAMVM81 VTAM Z' opdracht


VTAM EXEC

/*****************************************/
/* VTAM-secondary user simulation        */
/* syntax:  VTAM  vtam command           */
/*****************************************/
/* see if there's something in your RDR  */
/*****************************************/
trace n
hi = '1de8'X
lo = '1d60'X
'Q RDR * ALL (STACK'             /* stack your rdr files */
if queued() Â¬= 1
then do
aantal_files = queued()          /* save number of files */
     parse pull .                /* take header */
     do until queued() = 0       /* take the rest */
        parse pull origin file .
        if origin = 'VTAMSRVC'
   then do
        'PUR RDR' file      /* purge the old ones */
        aantal_files = aantal_files - 1 /* 1 less */
        end
        else reader = 'GEVULD'
        end                      /* end do until */
     end                         /* end then do */
else 'DESBUF'                    /* clear the stack */
/*****************************************/
/* send command to VTAMSRVC              */
/*****************************************/
parse upper arg tekst            /* see what the command is */
'SM VTAMSRVC' tekst              /* and send it to VTAMSRVC */
/*****************************************/
/* receive VTAMSRVC console file         */
/*****************************************/
take_file:
if reader = 'GEVULD'
then 'SLEEP 5 SEC'               /* wait until the file is */
'WAKEUP (RDR'                    /* in your rdr */
'Q RDR * ALL CL T (STACK'
if queued() > aantal_files       /* if there are any */
then do until queued() = 0       /* then take them */
     parse pull origin file .
     if origin = 'VTAMSRVC'      /* but only from VTAMSRVC */
     then 'RECEIVE' file 'VTAMSRVC FILE A (REPL NOL'
     end                         /* end do until */
else signal take_file            /* see if there are more */
/*****************************************/
/* read VTAMSRVC FILE                    */
/*****************************************/
'EXECIO * DISKR VTAMSRVC FILE A' /* read it */
'CLRSCRN'
say hi copies('-',80) lo         /* display 80 dashes */
do index = 1 to queued()         /* and display it */
   parse pull regel.index
   regel.index = strip(regel.index)
   say hi regel.index lo         /* on your console */
   end                           /* end do */
say hi copies('-',80) lo         /* display 80 dashes */
'ERASE VTAMSRVC FILE A'          /* and throw it away */


Joop Hermsen
Senior Systems Programmer
VNU Dagbladengroep BV (The Netherlands)

