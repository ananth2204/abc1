NetView VSAM administration


NETVIEW DATABASE REORGANIZATION OR CLEAR-OUT

Because of the volume of network data that a site can capture
and thus record, NetView session monitor databases frequently
become full or require reorganizing.  This situation often
occurs during prime shift when it is not desirable to close
NetView to perform the required database tasks.  Normally an
AAU022I message is issued, which covers a multitude of
database problems, being accompanied by major and minor
return codes 8 and 28 respectively which indicate that the
database can no longer record session information.

At this point NetView will allow a user to switch recording to a
secondary database (using SWLD S), however it will not
permit you to perform various IDCAMS functions to
reorganize or clear it out with back-up, without closing
NetView and then restarting it.

By utilizing the Access Method Services ALTER NEWNAME
command referencing dataset names rather than DDNAMEs in
the JCL, which gets around NetView's original enqueue, we
can then perform whatever functions are required.  This is
often a suitable case for message automation and by placing the
necessary statements in your message automation table (default
is DSIMSG01) the reorganization or clear could be fired off as
a started task (this could be a batch job in Release 3).  The two
examples shown below detail two popular applications for this
technique.  Remember to switch to the secondary database
before this and to switch back after if required.

Example 1: back-up and clear-out

This example backs up the database to a sequential dataset,
which may be a GDG if required, and then deletes and re-
defines the database.  In future this 'old' data could be restored
by IDCAMS REPRO if session history is required for that
period.

//BACKCLR  JOB (ACCT#),'BACKUP AND CLEAR',CLASS=?,MSGCLASS=?
//STEP1    EXEC PGM=IDCAMS,REGION=4096
//SYSPRINT DD  SYSOUT=U
//SYSUDUMP DD  SYSOUT=U
//BACKUP   DD  DSN=NETVIEW.BACKUP.DATABASE,DISP=(,CATLG),
//            DCB=(LRECL=4090,BLKSIZE=4094,RECFM=VB),
//            SPACE=(CYL,(nnn,nnn)),UNIT=DISK
//SYSIN    DD  *
 ALTER 'NETVIEW.PRIMARY.DATABASE'  NEWNAME('NETVIEW.PRIMARY.OLD')
 ALTER 'NETVIEW.PRIMARY.DATABASE.DATA'  -
          NEWNAME('NETVIEW.PRIMARY.OLD.DATA')
 ALTER 'NETVIEW.PRIMARY.DATABASE.INDEX' -
          NEWNAME('NETVIEW.PRIMARY.OLD.INDEX')
 IF LASTCC EQ 0 THEN -
   REPRO IDS('NETVIEW.PRIMARY.OLD') OFILE(BACKUP)
 IF LASTCC EQ 0 THEN -
   DELETE 'NETVIEW.PRIMARY.OLD' PURGE CLUSTER
 IF LASTCC EQ 0 THEN -
   DEFINE CLUSTER(NAME(NETVIEW.PRIMARY.NEW) -
                  INDEXED
                  .
           DATA NAME(NETVIEW.PRIMARY.NEW.DATA
                  .
           INDEX NAME(NETVIEW.PRIMARY.NEW.INDEX
                  .
                  .)
 IF LASTCC EQ 0 THEN -
   ALTER 'NETVIEW.PRIMARY.NEW' NEWNAME('NETVIEW.PRIMARY.DATABASE')
   ALTER 'NETVIEW.PRIMARY.NEW.DATA'  -
          NEWNAME('NETVIEW.PRIMARY.DATABASE.DATA')
   ALTER 'NETVIEW.PRIMARY.NEW.INDEX' -
          NEWNAME('NETVIEW.PRIMARY.DATABASE.INDEX')

Example 2: re-organization

This example copies the database to a work file, deletes and re-
defines the database, and then copies the data back.  The work
file is in fact a permanent dataset and is required to be in case
of problems re-defining the database or copying the data back,
thus whatever happens a copy of the data will always exist.

//REORG    JOB (ACCT#),'REORG',CLASS=?,MSGCLASS=?
//STEP1    EXEC PGM=IDCAMS,REGION=4096
//SYSPRINT DD  SYSOUT=U
//SYSUDUMP DD  SYSOUT=U
//BACKUP   DD  DSN=NETVIEW.BACKUP.WORKFILE,DISP=SHR
//SYSIN    DD  *
 ALTER 'NETVIEW.PRIMARY.DATABASE'  NEWNAME('NETVIEW.PRIMARY.OLD')
 ALTER 'NETVIEW.PRIMARY.DATABASE.DATA'   -
           NEWNAME('NETVIEW.PRIMARY.OLD.DATA')
 ALTER 'NETVIEW.PRIMARY.DATABASE.INDEX'  -
           NEWNAME('NETVIEW.PRIMARY.OLD.INDEX')
 IF LASTCC EQ 0 THEN -
   REPRO IDS(NETVIEW.PRIMARY.OLD) OFILE(BACKUP)
 IF LASTCC EQ 0 THEN -
   DELETE 'NETVIEW.PRIMARY.OLD' PURGE CLUSTER
 IF LASTCC EQ 0 THEN -
   DEFINE CLUSTER(NAME(NETVIEW.PRIMARY.NEW) -
                  INDEXED
                  .
           DATA NAME(NETVIEW.PRIMARY.NEW.DATA
                  .
           INDEX NAME(NETVIEW.PRIMARY.NEW.INDEX
                  .
                  .)
 IF LASTCC EQ 0 THEN -
   REPRO INFILE(BACKUP) ODS(NETVIEW.PRIMARY.NEW)
 IF LASTCC EQ 0 THEN -
   ALTER 'NETVIEW.PRIMARY.NEW' NEWNAME('NETVIEW.PRIMARY.DATABASE')
   ALTER 'NETVIEW.PRIMARY.NEW.DATA' -
              NEWNAME('NETVIEW.PRIMARY.DATABASE.DATA')
   ALTER 'NETVIEW.PRIMARY.NEW.INDEX' -
              NEWNAME('NETVIEW.PRIMARY.DATABASE.INDEX')


LOG BACK-UP

NetView permits you to define two log datasets, primary and
secondary, when one of these becomes full NetView will
automatically switch to the next log.  As this switch is
performed, any data that existed in what is now the current log
is lost.  To overcome this loss of data, NetView administration
personnel can archive or print the logs using NetView message
automation and utilities.

The following example shows the statements required in the
message table, CLIST member, and job control required to trap
the relevant message and act upon it.

Automation member in PARMLIB (default DSIMSG01)

IF &MSGID = 'DSI546I'
   THEN EXECMD('LOGPRIM');

This traps a switch to the primary log, to detect the activation
of the secondary check for message-id DSI547I.

CLIST member LOGPRIM in NetView CLIST library

CLIST LOGPRIM
&CONTROL ERR
  &SUBMIT 'NETVIEW.JOBLIB(LOGPRIM)'  /* submit job see not above    */
  &EXIT                /* quit out of clist after submit            */

The submit command is not supported in releases prior to
Release 3, however it is possible to initiate a started task to do
this using 'MVS S procname'.

Job control LOGPRIM or LOGSEC

//LOGPRIM   JOB (ACCT#),'NETWORK LOG BACKUP',CLASS=?,MSGCLASS=?
//STEP1     EXEC PGM=DSIPRT
//PRINTLOG  DD   DSN=NETVIEW.SECONDARY.LOG,DISP=SHR,AMP=AMORG
//DSILT     DD   DSN=NETVIEW.LOG.BACKUP(+1),DISP=(,CATLG)
//                SPACE=(CYL,(10,10),RLSE),
//                DCB=(RECFM=FB,LRECL=132,BLKSIZE=4096),UNIT=DISK
//SYSPRINT  DD   SYSOUT=U
//DSIINP    DD   DUMMY

In the above example, the log is copied to a GDG.  If you want
to print the contents simply change the DSILT to SYSOUT=A.
The primary dataset has just become active, thus the secondary
log is the one that is copied.  In brief, the log back-up is fired
off when the DSI546I or DSI547I message is issued - the
message has the following format:

       DSI546I PRIMARY NETVIEW DATASET IS NOW ACTIVE.

The message automation member DSIMSG01 is searched and a
match should occur with the above 'IF' statements.  The
EXECMD executes the CLIST specified within brackets, in
this case LOGPRIM, which in turn submits the job to copy or
print the log.

S M Thomas
Consultant (UK)

