Getting started with LU6.2

As an architecture, SNA LU6.2 has been around for many
years but now finally IBM has committed itself to code with
the introduction of an Application Program Interface (API) for
Advanced Program to Program Communication (APPC) in
ACF/VTAM Version 3.2.  This is achieved by a new macro,
APPCCMD, which drives the APPC interfaces and makes
LU6.2 available to the application programmer.  Unfortunately
the implementation is not the high-level interface expected and
though the intricacies of session control and data flow
(chaining, bracketing, contention bidding, etc) have been
absorbed by VTAM, the programmer is still expected to deal
with ACBs, RPLs, and exits.  Those of us who have spent
many unhappy hours (weeks, months?) wrestling with VTAM
application programs using earlier LU protocols will appreciate
that just getting active and running is the main obstacle.  Once
this has been achieved the real work of the application program
can be introduced.  Indeed it has often proved necessary to
develop prototype code to unravel the mysteries before design
work could commence seriously.  This article will draw from
early experience using the new facility to pick out the salient
requirements of the APPCCMD macro to enable quick and
simple implementations of applications that use LU6.2 - the
real work is then up to you.

The temptation to build never-ending interactive transactions
should be avoided since LU6.2 is not really intended as a real-
time conversational protocol and, if used as such, is complex
and fraught with problems.  Allocate a conversation, initiate
the application transaction, transfer the resultant data, and
deallocate the conversation.  Forget expedited flows and
contention bidding, LU6.2 is controlled by the concept of
'finite state machines'.  In effect an application is either the
sender or the receiver and if an LU6.2 verb (APPCCMD
macro) is issued in the wrong state, the conversation is failed
with a state error.  Wherever possible specify OPTCD=SYN so
that GPR15 can be checked for errors (this check has been
omitted from the sample code for the sake of brevity).  When
an error is encountered (ie GPR15 is non-zero), give up.
Because LU6.2 acts as a front end for application-level
programs, it hides session control and conversational protocol,
which makes diagnosing and handling errors tricky.  Recovery
is difficult and often impossible, so for this first article we will
assume that all is well and leave error handling for another
time.


APPLICATION PROGRAM 1

This program is the initiator of the LU6.2 conversation.  For
ease of reading, this code is not re-entrant and the comments
are extracted as notes following the code.

          Entry protocol

          OPEN    LU62ACB                       note (1)
          LA      R5,LU62FMH5                   note (2)
          USING   ISTFMH5,R5
          MVC     FM5TPNAM,LU62TPNM
          MVI     FM5LNTPN,X'12'
          MVI     FM5LENTH,X'1C'
          APPCCMD CONTROL=ALLOC,                note (3)
                  RPL=LU62RPL,
                  ACB=LU62ACB,
                  LUNAME=LU62PLU,
                  LOGMODE=LU62MODE,
                  AREA=LU62FMH5,
                  AAREA=LU62RPLX,
                  QUALITY=ALLOCD
          LA      R6,LU62RPLX                   note (4)
          USING   ISTRPL6,R6
          MVC     LU62CID,RPL6CNVD
          APPCCMD CONTROL=PREPARE_TO_RECEIVE,   note (5)
                  RPL=LU62RPL,
                  ACB=LU62ACB,
                  CONVID=LU62CID
          APPCCMD CONTROL=RECEIVE_AND_WAIT,     note (6)
                  RPL=LU62RPL,
                  ACB=LU62ACB,
                  CONVID=LU62CID,
                  AREA=TRANDATA,
                  AREALEN=TRANDLEN,
                  FILL=LL,
                  QUALITY=SPEC

          Data now available in TRANDATA

          APPCCMD CONTROL=DEALLOC,              note (7)
                  RPL=LU62RPL,
                  AAREA=LU62RPLX,
                  ACB=LU62ACB,
                  CONVID=LU62CID,
                  QUALITY=FLUSH,
                  OPTCD=SYN

          Exit protocol

LU62RPL   RPL     AM=VTAM
LU62RPLX  ISTRPL6
LU62ACB   ACB     AM=VTAM,MACRF=LOGON,APPLID=LU62NAME
LU62NAME  DC      XL1'08',C'LU62APPL'
LU62PLU   DC      XL1'08',C'LU62PAPP'
LU62CID   DS      XL4
LU62FMH5  DS      XL255
LU62TPNM  DC      C'transaction_name',XL3'00'
TRANDATA  DS      0F
TRANDLEN  DC      H'nnnn+2'
          DS      XLnnnn

Notes

1      An OPEN to identify the APPL name must be issued.  A
      VTAM major node containing a definition for the
      application ACB must be active:

               VBUILD TYPE=APPL
      LU62APPL APPL   ACB=LU62APPL,APPC=YES

2      LU6.2 protocol requires an exchange of a Function
      Management Header type 5 which must contain the name
      of the transaction to be executed by the remove
      application.

3      Requests VTAM to allocate a session with the remote
      application and wait (QUALITY=ALLOCD) until
      complete.  The remote partner application LU must be
      defined as a cross-domain resource to VTAM like this:

               VBUILD TYPE=CDRSC
      LU62PAPP CDRSC  CDRM=cdrm-name,ISTATUS=ACTIVE

      In essence the LU6.2 ALLOCATE is a LOGON followed
      by a SEND with OPTCD=FMHDR.  The ALLOC
      specifies a LOGMODE which must be defined in a suitable
      VTAM MODETAB.  A typical entry would be as follows:

      LU62MODE MODEENT LOGMODE=LU62MODE
               FMPROF=X'40',
               TSPROF=X'00',
               PRIPROT=X'..',
               COMPROT=X'4080',
               RUSIZES=X'....',
               PSERVIC=X'060000000000000000000000'

      Since VTAM handles session control for the conversation,
      much of the LOGMODE entry is not relevant.  What is
      important is the RU size.

4      This extracts the conversation identity allocated by VTAM.
      This is equivalent to the Communications-id (CID) of
      earlier LU protocols and must be supplied via the
      CONVID parameter on all APPCCMD requests.

5      By default the initiator of the conversation is in send mode,
      therefore the conversation must be turned round to receive
      the results of the remote transaction.

6      This receives the data from the remote transaction.

7      This terminates the conversation and flushes a deallocate
      across to the remote application.


APPLICATION PROGRAM 2

This program represents the receiving end of the LU6.2
conversation.

           Entry protocol

           OPEN     LU62ACB                        note (1)
           WAIT     ECB=WAKECB
           APPCCMD  CONTROL=RCVFMH5,               note (2)
                    RPL=LU62RPL,
                    ACB=LU62ACB,
                    AREA=LU62FMH5,
                    AAREA=LU62RPLX
           LA       R5,LU62FMH5
           USING    ISTFMH5,R5
           MVC      LU62TPNM,FM5TPNAM

           LA       R1,TRANADDR                    note (3)
           CALL     transaction_name  (LU62TPNM)

           LH       R2,TRANDLEN                    note (4)
           APPCCMD  CONTROL=SEND,
                    QUALITY=DATA,
                    CONVID=LU62CID,
                    RPL=LU62RPL,
                    ACB=LU62ACB,
                    AREA=TRANDATA,
                    RECLEN=(2),
                    OPTCD=SYN
           APPCCMD  CONTROL=SEND,                  note (5)
                    QUALITY=FLUSH,
                    CONVID=LU62CID,
                    RPL=LU62RPL,
                    ACB=LU62ACB,
                    OPTCD=SYN
           APPCCMD  CONTROL=PREPARE_TO_RECEIVE,    note (6)
                    RPL=LU62RPL,
                    ACB=LU62ACB,
                    CONVID=LU62CID
           APPCCMD  CONTROL=RECEIVE_AND_WAIT,      note (7)
                    RPL=LU62RPL,
                    ACB=LU62ACB,
                    CONVID=LU62CID,
                    AREA=TRANDATA,
                    AREALEN=TRANDLEN,
                    FILL=LL,
                    QUALITY=SPEC

           Exit protocol

LU62RPL    RPL      AM=VTAM
LU62RPLX   ISTRPL6
LU62ACB    ACB      AM=VTAM,APPLID=LU62PAPP,EXLST=LU62LIST
LU62LIST   EXLST    AM=VTAM,ATTN=LU62ATTN
LU62PLU    DS       XL1'08',C'LU62PAPP'
LU62CID    DS       XL4
LU62FMH5   DS       XL255
WAKECB     DC       F'0'
TRANADDR   DS       A(TRANDATA)
TRANDATA   DS       0F
TRANDLEN   DC       H'nnnn+2'
           DS       XLnnnn
           CSECT    ,                              note (8)
LU62ATTN   DS       0H

           Entry protocol

           LR       R2,R1
           L        R3,=A(LU62CID)
           MVC      0(R3,4),20(R2)
           L        R4,=A(WAKECB)
           POST     (4)

           Exit protocol

Notes

1      Waits for notification of the conversation to arrive.

2      Receives the FMH5 from the conversation originator and
      extracts the transaction name.  Note that the allocated
      conversation is initially in receive mode.

3      Calls the transaction program and provides an area for it to
      return any data.

4      Sends the data generated by the transaction back to the
      conversation originator.

5      This flushes the conversation to ensure that the data is sent
      to the conversation originator, which has a receive
      outstanding ready.

6      Turns the conversation round ready to receive the
      deallocate from the conversation originator.

7      This receive will be satisfied by the deallocate flushed
      from the conversation originator.

8      The ATTN exit is scheduled when an FMH5 is received
      for the application.  Extracts the conversation
      identity,which is passed in a parameter list when VTAM
      schedules the exit.  This must be supplied via the CONVID
      parameter on all APPCCMD requests.

Brian Alford
Systems Consultant
Aranda (UK)

