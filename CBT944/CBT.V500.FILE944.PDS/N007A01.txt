LU6.2 mapped conversations using APPCCMD

The following article expands on the article Miscellaneous
LU6.2 functions, which appeared in the March 1992 issue of
SNA Update.

APPCCMD in VTAM does not support mapped conversations
(mapped conversation verbs are supported as pass-through
functions according to VTAM Programming for LU6.2),
although there are ways in which the VTAM programmer may
implement them. There can be some confusion over the
difference between option set 246 (data mapping) and option
set 291 (mapped conversation LU services component).

Appendix A in the Transaction Programmer's Reference for
LU Type 6.2 describes these option sets. The mapped
conversation LU services component option set (291) allows
implementation of a mapped conversation LU services
component program, which processes mapped conversation
verbs. This option can be used on what the manual describes as
'basic conversations' only (this wording is rather unfortunate: it
would be better to refer to the 'basic conversation protocol
boundary' - see below) and relates to the TYPE parameter of
the ALLOCATE, DEALLOCATE, and SEND_ERROR verbs.
Data mapping option set (246) allows a program using mapped
conversations to request mapping of the data by the local and
remote LUs. This option set relates to the MAP_NAME
parameter of the MC_SEND_DATA,
MC_RECEIVE_AND_WAIT, MC_RECEIVE_ IMMEDIATE,
and DEFINE_LOCAL_LU verbs and to the DATA_MAPPING
parameter of the DEFINE_TP and DISPLAY_TP verbs.

If you want your VTAM program to support both basic and
mapped conversations, you have to implement option set 291
or at least accept and initiate mapped conversations and use the
GDS format structure that flows on mapped conversations. If,
on mapped conversations, you want to implement something
like the Abstract Syntax Notation of the OSI Reference Model,
option set 246 could be implemented to convey the name of the
data structure and encoding/decoding rules to be used.

In the LU6.2 architecture, there are two sets of verbs that
correspond to two protocol boundaries: basic and mapped. The
mapped conversation protocol boundary supports mapped
conversations and the basic conversation protocol boundary
supports both basic and mapped conversations (with option
291). When you allocate the conversation, the TYPE parameter
of the ALLOCATE verb specifies either
BASIC_CONVERSATION or MAPPED_CONVERSATION.
This is implemented in your VTAM program by coding MVI
FM5RSCTP,FM5BASIC or MVI FM5RSCTP,FM5MAPED
into FMH5 before performing the APPCCMD
CONTROL=ALLOC. If your VTAM program is the target
transaction program, you look at FM5RSCTP to see if the
conversation is basic (X'D0') or mapped (X'D1').

At the basic conversation protocol boundary, the data is sent
and received as logical records, ie:  ll,data, where ll is a two-
byte length field and data is anything and is transparent to the
protocol boundary. However, if you are implementing option
291, for mapped conversations, all data transferred at the basic
conversation protocol boundary should be represented as GDS
variables with SNA-defined formats. The Presentation Services
component PS.MC at the other end of the conversation requires
this so that it can support the remote Transaction Program (TP)
at the mapped conversation protocol boundary and transform
GDS variables into mapped conversation records and vice
versa. If this is not done or you make an error, you will
typically get RCPRI=X'0044' (service error truncating). The
remote mapped conversation LU services component (PS.MC)
has issued a SEND_ERROR TYPE(SVC). If you are
communicating with a mapped CICS TP, PS.MC would be
CICS.

The SNA LU6.2 Reference: Peer Protocols, SC31-6808 in
Chapter 7 about PS-mapped conversation verbs, explains how
to construct these GDS variables. The following types of GDS
variables (with GDS-id) flow on mapped conversations:
application data (12FF), null data (12F1), user control data
(12F2), error data (12F4), error log (12E1), and, if data
mapping (option 246) is implemented, map name (12F3).

The easiest way to learn how to build and use these GDS
variables is to make some CICS prototype TPs, activate VTAM
tracing, and study the traces.

It might be a good idea to use these GDS variables (implement
option 291) even if you just intend to use basic conversations.
Your programs should be more consistent and easier to trace
and debug. Also, if it should be necessary to support mapped
conversations, this could be done by just performing a MVI
FM5RSCTP,FM5MAPED.

CICS APPC, APPC/MVS, and CPI-C all support mapped and
basic conversations. However, you can not have a mapped
conversation at the basic conversation protocol boundary as
you can with APPCCMD. A mapped conversation must be at
the mapped conversation protocol boundary and a basic
conversation must be at the basic conversation protocol
boundary.

The programs that follow, LU62RECV and LU62SEND, can
have a basic or mapped conversation against each other. The
programs are for an existing mapped front-end CICS TP to
back-end CA-IDMS/DC TP conversations so that LU62SEND
can have a conversation against the CA-IDMS/DC TP and
LU62RECV can have a conversation against the CICS TP.

The LOGMODE table and APPL definitions are also included.
PARSESS=YES is specified; however, the programs are not
made to support parallel sessions.


LOGMODE TABLE

MSLU62T  MODETAB
LU62EVIT MODEENT LOGMODE=LU62EVIT,                                    X
               COS=MEDIUM,                                            X
               FMPROF=X'13',                                          X
               TSPROF=X'07',                                          X
               PRIPROT=X'B0',                                         X
               SECPROT=X'B0',                                         X
               COMPROT=X'50B1',                                       X
               RUSIZES=X'8787',                                       X
               ENCR=B'0000',                                          X
               PSERVIC='060200000000000000102F00'                     X
         MODEEND
         END


APPL DEFINITIONS

MA1EVIT  VBUILD TYPE=APPL
LU62SEND APPL ACBNAME=LU62SEND,APPC=YES,MODETAB=MSLU62T,              X
              DLOGMOD=LU62EVIT,EAS=2,DSESLIM=2,DMINWNL=1,DMINWNR=1,   X
              PARSESS=YES
LU62RECV APPL ACBNAME=LU62RECV,APPC=YES,MODETAB=MSLU62T,              X
              DLOGMOD=LU62EVIT,EAS=2,DSESLIM=2,DMINWNL=1,DMINWNR=1,   X
              PARSESS=YES


LU62RECV SOURCE CODE

***********************************************************************
*  THIS IS A QUICK (AND DIRTY) AND INCOMPLETE (NO ERRROR HANDLING)    *
*  PROTOTYPE VTAM APPC PROGRAM TO DO SOME LU6.2 TESTING               *
*  IT HAS ALSO BEEN USED AS A BACKEND PROGRAM TO A FRONTEND MAPPED    *
*  CICS TRANSACTION PROGRAM.                                          *
***********************************************************************
LU62RECV AMODE 31
LU62RECV RMODE 24
LU62RECV CSECT
         SAVE  (14,12)
         LR    R2,R15
         USING LU62RECV,R2
         LR    R11,R13
         LA    R13,SAVE
         ST    R11,SAVE+4
         ST    R13,SAVE+8
         LA    R4,RPL1
         USING IFGRPL,R4
         LA    R5,RPLX
         USING ISTRPL6X,R5
         OPEN  (SNAP,(OUTPUT))
         OPEN  ACB1
         LTR   R8,R15
         BZ    OPENOK
         SHOWCB AM=VTAM,ACB=ACB1,FIELDS=ERROR,AREA=OPNERR,LENGTH=4
         L     R9,OPNERR           OPEN ERROR CODE
         DC    F'1'                ABEND
OPENOK   DS    0H
         SETLOGON RPL=RPL1,ACB=ACB1,OPTCD=START
         LTR   R8,R15
         BZ    SETLOK
         ICM   R9,15,RPLRTNCD
         L     R10,RPLSSEI
         DC    F'2'
SETLOK   DS    0H
         INQUIRE RPL=RPL1,ACB=ACB1,NIB=NIB1,OPTCD=APPSTAT
         CLI   RPLFDB3,0           PARTNER READY TO ESTABLISH SESSION?
         BE    INQOK
         WTO   'PARTNER NOT READY',ROUTCDE=11
         STIMER WAIT,BINTVL=SEC20  WAIT A BIT AND INQUIRE AGAIN
         B     SETLOK
INQOK    DS    0H
         CLI   CNOS,0              ATTN EXIT DRIVEN FOR CNOS?
         BE    CNOSDO              THEN DO NOT DO AN APPCCMD CNOS
         MVI   CNOS,0              CLEAR FLAG
         LM    R8,R9,SLCNS         CNOS SESSION LIMITS DATA STRUCTURE
         SNAP  DCB=SNAP,PDATA=REGS,ID=1   LET US LOOK AT IT
         B     CNOSOK
CNOSDO   DS    0H    NEGOTIATE SESSION LIMITS, USE VALUES FROM APPL
         APPCCMD CONTROL=OPRCNTL,                                      *
               QUALIFY=CNOS,                                           *
               RPL=RPL1,                                               *
               ACB=ACB1,                                               *
               AAREA=RPLX,                                             *
               LOGMODE=LU62EVIT,                                       *
               LUNAME=LU62SEND
         LTR   R8,R15
         BZ    CNOSOK
         ICM   R9,15,RPLRTNCD
         L     R10,RPL6RC
         L     R11,RPL6RCV1
         L     R12,RPL6SNSI
         DC    F'3'
CNOSOK   DS    0H
         SNAP  DCB=SNAP,STORAGE=(RPL1,END1),PDATA=REGS,ID=2
NEXT     WAIT  ECB=ECB1             WAIT FOR POST FROM ATTN OR TPEND
         MVC   WECB1,ECB1           SAVE ECB
         XC    ECB1,ECB1            CLEAR ECBL
         CLI   WECB1+3,2            TPEND EXIT?
         BE    CLOSEDO
         APPCCMD CONTROL=RCVFMH5,                                      *
               RPL=RPL1,                                               *
               ACB=ACB1,                                               *
               AREA=ATTNFMH5,                                          *
               AAREA=RPLX,                                             *
               AREALEN=255,                                            *
               OPTCD=SYN
         LTR   R8,R15
         BZ    FMH5OK
         ICM   R9,15,RPLRTNCD
         L     R10,RPL6RC
         L     R11,RPL6RCV1
         L     R12,RPL6SNSI
         DC    F'4'
FMH5OK   DS    0H
         MVC   CONVID1,RPL6CNVD
         SNAP  DCB=SNAP,STORAGE=(RPL1,END1),PDATA=REGS,ID=3
         APPCCMD CONTROL=RECEIVE,                                      *
               QUALIFY=SPEC,                                           *
               RPL=RPL1,                                               *
               ACB=ACB1,                                               *
               CONVID=CONVID1,                                         *
               AREA=AREA1,                                             *
               AAREA=RPLX,                                             *
               AREALEN=L'AREA1,                                        *
               FILL=LL,                                                *
               OPTCD=SYN
         LTR   R8,R15
         BZ    RECVOK
         ICM   R9,15,RPLRTNCD
         L     R10,RPL6RC
         L     R11,RPL6RCV1
         L     R12,RPL6SNSI
         DC    F'5'
RECVOK   DS    0H
         SNAP  DCB=SNAP,STORAGE=(RPL1,END1),PDATA=REGS,ID=4
         APPCCMD CONTROL=DEALLOC,                                      *
               QUALIFY=DATACON,                                        *
               RPL=RPL1,                                               *
               ACB=ACB1,                                               *
               CONVID=CONVID1,                                         *
               AREA=AREA2,                                             *
               AAREA=RPLX,                                             *
               RECLEN=AREA2LN,                                         *
               OPTCD=SYN
         LTR   R8,R15
         BZ    DEALOK
         ICM   R9,15,RPLRTNCD
         L     R10,RPL6RC
         L     R11,RPL6RCV1
         L     R12,RPL6SNSI
         DC    F'6'
DEALOK   DS    0H
         SNAP  DCB=SNAP,STORAGE=(RPL1,END1),PDATA=REGS,ID=6
         B     NEXT
CLOSEDO  DS    0H
         CLOSE ACB1
         CLOSE SNAP
         L     R13,4(,R13)
         RETURN (14,12),RC=0
OPNERR   DC    F'0'
ECB1     DC    F'0'
WECB1    DC    F'0'
SEC20    DC    F'2000'
CONVID1  DC    F'0'
SAVE     DS    18F
         LTORG
         DS    0D
ACB1     ACB   AM=VTAM,MACRF=LOGON,APPLID=LU62NAME,EXLST=ATEXLST
ATEXLST  EXLST AM=VTAM,ATTN=ATTN1,TPEND=TPEND
NIB1     NIB   MODE=RECORD,NAME=LU62SEND
LU62NAME DC    AL1(8),C'LU62RECV'
         DS    0D
RPL1     RPL   AM=VTAM
RPLX     ISTRPL6
         DC    C'FMH5'
ATTNFMH5 DC    XL255'00'
         DC    C'RECV'
AREA1    DC    XL255'FF'
END1     DC    C'SEND'
AREA2    DC    Y(AREA2LN),X'12FF'       LLID   (GDS VARIABLE)
         DC    C'DATA FROM LU62RECV'
AREA2LN  EQU   *-AREA2
SNAP     DCB   DDNAME=SNAP,DSORG=PS,MACRF=(W),LRECL=125,BLKSIZE=1632,  *
               RECFM=VBA
TPEND    DS    0H
         LR    R2,R15
         USING TPEND,R2
         LR    R3,R14
         L     R4,=A(ECB1)
         POST  (R4),2             POST MAINLINE
         LR    R14,R3
         BR    R14
         LTORG
ATTN1    DS    0H
         LR    R2,R15
         USING ATTN1,R2
         L     R7,AATTNID            ADDR TRACE TABLE
         MVC   0(4,R7),12(R1)        SAVE NAME OF EVENT IN TRACE TABLE
         LA    R7,4(,R7)             NEXT ENTRY IN TRACE TABLE
         ST    R7,AATTNID            STORE ADDR OF NEXT ENTRY
         CLC   =C'FMH5',12(R1)       FMH5 RECEIVED?
         BE    FMH5DO
         CLC   =C'LOSS',12(R1)       SESSION LOST?
         BE    LOSSDO
         CLC   =C'CNOS',12(R1)       CNOS RECEIVED?
         BNER  R14
         L     R4,16(,R1)            READ-ONLY RPL
         L     R6,RPLAREA            POINTER TO SES.LIMIT.DATA.STRUCT.
         MVC   SLCNS(7),0(R6)        ISTSLCNS
         MVI   CNOS,255              FLAG FOR CNOS RECEIVED
         BR    R14
FMH5DO   LR    R3,R14
         L     R4,=A(ECB1)
         POST  (R4),0                POST MAINLINE, FMH5 PENDING
         LR    R14,R3
         BR    R14
LOSSDO   BR    R14                   SESSION(S) LOST (APPL ATTNLOSS=)
CNOS     DC    X'00'
SLCNS    DC    D'0'
AATTNID  DC    A(ATTNID)
ATTNID   DC    CL64' '
         LTORG
         IFGACB AM=VTAM
         IFGRPL AM=VTAM
         YREGS
         END


LU62SEND SOURCE CODE

***********************************************************************
*  THIS IS A QUICK (AND DIRTY) AND INCOMPLETE (NO ERRROR HANDLING)    *
*  PROTOTYPE VTAM APPC PROGRAM TO DO SOME LU6.2 TESTING               *
*  IT HAS ALSO BEEN USED AS A FRONTEND PROGRAM TO A BACKEND MAPPED    *
*  IDMS-DC TRANSACTION PROGRAM.                                       *
***********************************************************************
LU62SEND AMODE 31
LU62SEND RMODE 24
LU62SEND CSECT
         SAVE  (14,12)
         LR    R2,R15
         USING LU62SEND,R2
         LR    R11,R13
         LA    R13,SAVE
         ST    R11,SAVE+4
         ST    R13,SAVE+8
         LA    R4,RPL1
         USING IFGRPL,R4
         LA    R5,RPLX
         USING ISTRPL6X,R5
         OPEN  (SNAP,(OUTPUT))
         OPEN  ACB1
         LTR   R8,R15
         BZ    OPENOK
         SHOWCB AM=VTAM,ACB=ACB1,FIELDS=ERROR,AREA=OPNERR,LENGTH=4
         L     R9,OPNERR           OPEN ERROR CODE
         DC    F'1'                ABEND
OPENOK   DS    0H
         SETLOGON RPL=RPL1,ACB=ACB1,OPTCD=START
         LTR   R8,R15
         BZ    SETLOK
         ICM   R9,15,RPLRTNCD
         L     R10,RPLSSEI
         DC    F'2'
SETLOK   DS    0H
         INQUIRE RPL=RPL1,ACB=ACB1,NIB=NIB1,OPTCD=APPSTAT
         CLI   RPLFDB3,0     PARTNER READY TO ESTABLISH SESSION?
         BE    INQOK
         WTO   'PARTNER NOT READY',ROUTCDE=11
         STIMER WAIT,BINTVL=SEC20  WAIT A BIT AND INQUIRE AGAIN
         B     SETLOK
INQOK    DS    0H
         CLI   CNOS,0              ATTN EXIT DRIVEN FOR CNOS?
         BE    CNOSDO              THEN DO NOT DO AN APPCCMD CNOS
         MVI   CNOS,0              CLEAR FLAG
         LM    R8,R9,SLCNS         CNOS SESSION LIMITS DATA STRUCTURE
         SNAP  DCB=SNAP,PDATA=REGS,ID=1   LET US LOOK AT IT
         B     CNOSOK
CNOSDO   DS    0H    NEGOTIATE SESSION LIMITS, USE VALUES FROM APPL
         APPCCMD CONTROL=OPRCNTL,                                      *
               QUALIFY=CNOS,                                           *
               RPL=RPL1,                                               *
               ACB=ACB1,                                               *
               AAREA=RPLX,                                             *
               LOGMODE=LU62EVIT,                                       *
               LUNAME=LU62RECV
         LTR   R8,R15
         BZ    CNOSOK
         ICM   R9,15,RPLRTNCD
         L     R10,RPL6RC
         L     R11,RPL6RCV1
         L     R12,RPL6SNSI
         DC    F'3'
CNOSOK   DS    0H
         SNAP  DCB=SNAP,STORAGE=(RPL1,END1),PDATA=REGS,ID=2
         APPCCMD CONTROL=ALLOC,                                        *
               QUALIFY=ALLOCD,                                         *
               LUNAME=LU62RECV,                                        *
               RPL=RPL1,                                               *
               ACB=ACB1,                                               *
               AAREA=RPLX,                                             *
               LOGMODE=LU62EVIT,                                       *
               AREA=FMH5,                                              *
               RECLEN=LFMH5
         LTR   R8,R15
         BZ    FMH5OK
         ICM   R9,15,RPLRTNCD
         L     R10,RPL6RC
         L     R11,RPL6RCV1
         L     R12,RPL6SNSI
         DC    F'4'
FMH5OK   DS    0H
         MVC   CONVID1,RPL6CNVD
         SNAP  DCB=SNAP,STORAGE=(RPL1,END1),PDATA=REGS,ID=3
         APPCCMD CONTROL=SEND,                                         *
               QUALIFY=DATA,                                           *
               RPL=RPL1,                                               *
               ACB=ACB1,                                               *
               CONVID=CONVID1,                                         *
               AREA=AREA2,                                             *
               AAREA=RPLX,                                             *
               RECLEN=AREA2LN,                                         *
               OPTCD=SYN
         LTR   R8,R15
         BZ    SENDOK
         ICM   R9,15,RPLRTNCD
         L     R10,RPL6RC
         L     R11,RPL6RCV1
         L     R12,RPL6SNSI
         DC    F'5'
SENDOK   DS    0H
         SNAP  DCB=SNAP,STORAGE=(RPL1,END1),PDATA=REGS,ID=4
         APPCCMD CONTROL=RECEIVE,                                      *
               QUALIFY=SPEC,                                           *
               RPL=RPL1,                                               *
               ACB=ACB1,                                               *
               CONVID=CONVID1,                                         *
               AREA=AREA1,                                             *
               AAREA=RPLX,                                             *
               AREALEN=L'AREA1,                                        *
               FILL=LL,                                                *
               OPTCD=SYN
         LTR   R8,R15
         BZ    RECVOK
         ICM   R9,15,RPLRTNCD
         L     R10,RPL6RC
         L     R11,RPL6RCV1
         L     R12,RPL6SNSI
         DC    F'6'
RECVOK   DS    0H
         SNAP  DCB=SNAP,STORAGE=(RPL1,END1),PDATA=REGS,ID=5
         APPCCMD CONTROL=SEND,                                         *
               QUALIFY=CONFRMD,                                        *
               RPL=RPL1,                                               *
               ACB=ACB1,                                               *
               CONVID=CONVID1,                                         *
               AAREA=RPLX,                                             *
               OPTCD=SYN
         LTR   R8,R15
         BZ    CONFOK
         ICM   R9,15,RPLRTNCD
         L     R10,RPL6RC
         L     R11,RPL6RCV1
         L     R12,RPL6SNSI
         DC    F'7'
CONFOK   DS    0H
         SNAP  DCB=SNAP,STORAGE=(RPL1,END1),PDATA=REGS,ID=6
CLOSEDO  DS    0H
         CLOSE ACB1
         CLOSE SNAP
         L     R13,4(,R13)
         RETURN (14,12),RC=0
CNOS     DC    X'00'
SLCNS    DC    D'0'
SEC20    DC    F'2000'
OPNERR   DC    F'0'
CONVID1  DC    F'0'
SAVE     DS    18F
         LTORG
         DS    0D
ACB1     ACB   AM=VTAM,MACRF=LOGON,APPLID=LU62NAME
NIB1     NIB   MODE=RECORD,NAME=LU62RECV
LU62NAME DC    AL1(8),C'LU62SEND'
         DS    0D
RPL1     RPL   AM=VTAM
RPLX     ISTRPL6
         DC    C'FMH5'
FMH5     DC    AL1(LFMH5)
         DC    X'0502FF0003D10040'    MAPPED, SYNCLEVEL 1
*                         IF YOU WANT BASIC, CODE D0 INSTEAD OF D1
         DC    AL1(L'TPN)
TPN      DC    CL8'TPNRECV'           TRANSACTION PROGRAM NAME
         DC    XL3'00'
LFMH5    EQU   *-FMH5
         DC    C'RECV'
AREA1    DC    XL255'FF'
END1     DC    C'SEND'
AREA2    DC    Y(AREA2LN),X'12FF'     LLID  (GDS VARIABLE)
         DC    C'DATA FROM LU62SEND'
AREA2LN  EQU   *-AREA2
SNAP     DCB   DDNAME=SNAP,DSORG=PS,MACRF=(W),LRECL=125,BLKSIZE=1632,  *
               RECFM=VBA
         IFGACB AM=VTAM
         IFGRPL AM=VTAM
         YREGS
         END


Edvin Vik
Systems Engineer Specialist
Amdahl (Norway)                                                  c Amdahl 1992

