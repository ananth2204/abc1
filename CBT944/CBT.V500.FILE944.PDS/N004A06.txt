Error recovery in LU6.2

Article three in this series of examinations of the fundamentals
of the LU6.2 support offered by the APPCCMD macro in
ACF/VTAM 3.2 onwards will discuss error detection and
recovery.  Although the subject will be dealt with in some
technical depth a large part of the article will concentrate on the
design aspects of error recovery.

LU6.2 support is rich with possibilities for errors and the IBM
documentation contains immense detail on the many different
errors and how the application program is notified.  Error
recovery would appear to revolve around detailed examination
of return codes and condition codes to determine what action to
take.  Designers and programmers familiar with other high-
level interfaces such as VSAM and indeed the pre-LU6.2
VTAM API will recognise the somewhat mystical world of the
feedback information and the conditional retry code.
Mercifully we are spared the EXECRPL function of VSAM
which allows re-execution of a failed macro instruction and
therefore the potential for compounding the original error.
However, as we shall see, the LU6.2 support API does allow
for re-issuing previously failed macros under controlled
conditions.  Much more thought needs to be given to the design
of error recovery for LU6.2 applications than for many other
types of applications.  LU6.2 applications cross system and
perhaps company boundaries and support transactions that
could interface to complex and valuable databases.  The
potential dangers in rogue transactions, intermittent errors,
transient failures, etc, is enormous and should not be taken
lightly.  This article will concentrate on the development of a
structured approach to error detection and recovery.

There are three categories of errors which can occur in LU6.2-
oriented applications: transaction errors, protocol errors, and
application errors.  Each is related to a distinct area of
functionality and leads to the failure of different functions.

o      Transaction errors - errors in the transaction being run by
      the application.  Such errors include invalid data, failed
      database calls, or program logic errors.  Transaction errors
      result in a failure of the active transaction but do not affect
      the active conversation or the LU6.2 application.

o      Protocol errors - errors in the LU6.2 protocol or the
      Application Program Interface.  Primarily these will be
      APPCCMD macro failures caused by state errors (invalid
      sequence of macro calls) and bad parameters such as an
      invalid RPL or extension.  Protocol errors result in a
      failure of the active conversation leaving the transaction in
      doubt but having no direct effect on the application.

o      Application errors - errors in either the application logic or
      the interfaces to the containing system.  This could be the
      failure of the host system, a VTAM failure, or a logic error
      in the application.  Application errors result in a failure of
      the application and, by implication, the conversation.  The
      transaction is left in doubt.

First apply a sensible context to the subject of errors.  Most
errors will occur during the development of the application.  It
is unlikely that severe errors will occur during normal
operation, since they should have been screened out during
testing.  Application development and testing should have
removed most of the following problems:

o      Protocol logic errors, such as invalid macro sequences and
      bad macro parameters or an invalid RPL or RPL extension.

o      Program logic errors, such as system abends (SOC4,
      SOC1, etc), and bad logic (loops, branch errors, etc).

o      Transaction errors, such as invalid database calls.

This article is not concerned about program faults, protocol
errors, and run-time support errors.  What we are most
concerned about is the occurrence of errors relating to LU6.2 in
clean code.

Following completion of an APPCCMD macro call, VTAM
sets a general return code in GPR15.  Currently only two codes
are set:

o      GPR15=00, which means that the macro was processed
      successfully.

o      GPR15=04, which means that VTAM could not process
      the macro.

In addition, VTAM sets what is termed either a conditional
completion code or recovery action code in GPR0.  Error
recovery decisions are based on the codes in both GPR15 and
GPR0.  These codes approximate to what would formerly have
been the RTNCD and FDBK2 codes in the RPL.  Although the
two RPL fields may be set, unfortunately they do not always
reveal the whole picture, which means that all previously
learned RPL error condition handling is not applicable to
LU6.2.

The majority of RC=04 errors are due to logic faults which, as
has already been argued, should be filtered out during testing.
One condition that is worth detecting and handling is the
rejection of the request due to an environmental problem such
as VTAM halting.  In this case, GPR0 is set to X'10' and the
application should attempt to close down.  For all other
GPR15=04 errors the application should abend to allow
debugging.

Successful handling of the macro by VTAM does not
necessarily mean that all is well.  VTAM applies the
completely illogical concept of degrees of success!  If
GPR15=00 then GPR0 should be checked for a value of X'0B'
which means that some further information is available.

This may not be a problem or it may be what is termed a
recoverable error condition implying that, although the macro
worked, it did not quite work properly and that maybe some
action is required to clean up or not, or something like that.  In
the RPL extension block supplied on the APPCCMD macro
call are two return code fields:

o      RPL6RCPR - the primary return code, referred to as
      RCPRI in most documentation.  This gives the primary
      reason for an error.

o      RPL6RCSC - the secondary return code, referred to as
      RCSEC in the documentation.  This adds granularity to the
      primary reason.

There are many combinations of values for these two fields.
What values get set is a complex question depending on the
APPCCMD macro being issued, the parameters chosen, the
mode of invocation (SYN or ASY), the local environment, and
possibly feedback from the partner application.  In essence,
RCPRI relates to the LU6.2 service being invoked and RCSEC
indicates the error.  General guidelines are difficult to draw,
painstaking study of all the likely conditions is the only
answer.

To a large extent, how much error handling is included in the
design will depend upon the design of the LU6.2 applications
to be contacted and the design of any applications that will
contact the one being developed.  If all nodes in the LU6.2
network have clean applications with agreed session parameters
and limits, most of the allocate and data flow errors will not
occur.  If the application is in fact 'shooting in the dark' and
being similarly 'shot at', the entire gambit of errors is possible.
There are then the questions of which errors are acceptable,
which are recoverable, which are re-negotiable, and what
action to take if the error is accepted.  To cope with this, it is
recommended that a generalized error recovery routine is
developed.  This should have the prime aim of keeping the
application alive by rejecting failures, and recording sufficient
information to allow either on-line interrogation or post-
analysis, whichever is operationally necessary.


CALLING THE GENERAL ANALYSE ROUTINE

MACALL    DS         OH
          APPCCMD    CONTROL=.....,       < Any APPCCMD macro >
                     ....., etc
          LA         R1,RPLLIST           Pass RPL address list
          LTR        R15,R15              Return code set in  GPR15
          BNZ        ABORT                ?
          LTR        R0,R0                Fail transaction if RC>0
          BZ         OK                   Conditional code set ?
          BAL        R14,ANALYSE          All OK if not
          LTR        R15,R15              Call general analyse rout-
          BZ         OK                   ine
          CH         R15,=H'04'           No action required ?
          BE         MACALL               Proceed
          CH         R15,=H'08'           Retry possible ?
          BE         CONVFAIL             Go retry
          CH         R15,=H'12'           Conversation failed ?
          BE         TRANABRT             Go tidy up
          CH         R15,=H'16'           Transaction must abort ?
          BE         APPLABND             Go do it
          B          APPLABND             Application must abend ?
OK        DS         0H                   Go do it
                                          Should not  occur  condit-
CONVFAIL  DS         0H                   tion
          APPCCMD    CONTROL=REJECT,
                     QUALIFY=CONV,
                     RPL=LU62RPL,
                     AAREA=LU62RPLX,
                     CONVID=LU62CID,
                     OPTCD=SYN
RPLLIST   DS         0F
          DC         A(LU62RPL)
          DC         A(LU62RPLX)
LU62RPL   RPL        AM=VTAM
LU62RPLX  ISTRPL6


SAMPLE GENERAL ANALYSE ROUTINE

*  APPCCMD Macro Call General Analyse Routine
*  On Entry : GPR1 contains the address of a  two word address list
*                A(RPL)
*                A(RPL Extension)
*  On Exit  : GPR15 contains one of the following action codes :
*              00 - acceptable error, ignore
*              04 - retryable error, re-issue the macro
*              08 - failed, cannot retry, conversation failed
*              12 - transaction must be aborted
*              16 - application must terminate
*             LOGDATA field contains received data if available
*             ERRORTYP contains error TYPE from partner application
ANALYSE   DS         0H
          ST         R14,SAVER14          Save    caller     return
          LM         R6,R7,0(R1)          address
          USING      ISTRPL,R6            Set addressability ...
          USING      ISTRPL6,R7           ... to RPL and ...
          LA         R2,EMATRIX           ... RPL extension
SCANLOOP  DS         0H                   Start of error matrix
          CLC        RPL6RC,0(R2)
          BE         FOUND                This RCPRI/RCSEC pair ?
          LA         R2,5(,R2)            Error matched
          CLI        0(R2),X'FF'          Bump R2 to next error
          BE         UNKNOWN              End of matrix
          B          SCANLOOP             Unknown error
                                          Keep looking
FOUND     DS         0H
          TM         RPL6RTUN,RPL6RLOG    Log  received   indicator
          BNO        EXIT                 set ?
          APPCCMD    CONTROL=RECEIVE,     Quick exit if not
                     QUALIFY=SPEC,
                     RPL=(R6),
                     AAREA=(R7),
                     AREA=LOGDATA,
                     AREALEN=255,
                     FILL=LL,
                     OPTCD=SYN
          LTR        R15,R15
          BZ         ANALYSE2             Log data received OK ?
                                          Go extract data
*  Failure to retrieve the log data is a serious protocol error,
*  the session must be terminated immediately and the error matrix
*  action code overridden with a transaction failure condition.
*  Notice that the conversation id is not specified, the same RPL
*  is used. The conversation will terminate with the session.
          APPCCMD     CONTROL=REJECT,
                      QUALIFY=SESSION,
                      RPL=(R6),
                      AAREA=(R7),
                      OPTCD=SYN
          LA          R15,12              Set action code = 12
          L           R14,SAVER14         Restore   caller   return
          BR          R14                 address
                                          Return to caller
*  At this point the log data can be analysed and recorded
ANALYSE2  DS         0H
          MVC        LOGMLUNM(8),RPL6LU   LU name in log message
          MVC        ERRORTYP,RPL6TYPE    Save error type
          CLC        LOGDATA+2,=X'12E1'   Valid Log Data GDS id ?
          BNE        EXIT                 Ignore if not
          LH         R3,LOGDATA+4         Length of Product set id
          BCTR       R3,0                 Decrement for EX MVC
          CH         R3,=H'01'            Not specified ?
          BE         *+8                  Skip move
          EX         R3,MOVEPSET          Move to log message
          LA         R4,LOGDATA+1         Point to message text ...
          AR         R4,R3                ... in log data message
          LH         R3,0(,R4)            Length of message text
          BCTR       R3,0                 Decrement for EX MVC
          CH         R3,=H'01'            No data present ?
          BE         *+8                  Skip move
          EX         R3,MOVETEXT          Move text to log message
*   Record log data (Eg run-time log, MVS console etc).
EXIT      DS         0H
          SR         R15,R15
          IC         R15,4(,R2)           Action code in R15
          L          R14,SAVER14          Restore   caller   return
          BR         R14                  address
                                          Return to caller
UNKNOWN   DS         0H
          LA         R15,20               Set  "should  not  occur"
          L          R14,SAVER14          code
          BR         R14                  Restore   caller   return
                                          address
                                          Return to caller
MOVEPSET  MVC        LOGMPSET(0),LOGDATA+6
MOVETEXT  MVC        LOGMTEXT(0),0(R4)
SAVER14   DS         A
LOGDATA   DS         CL255
ERRORTYP  DC         X'00'
LOGMSG    DS         0CL200
LOGMLUNM  DC         CL8' '
LOGMPSET  DC         CL8' '
LOGMTEXT  DC         CL184
*   Error matrix, action codes shown are general recommendations,
*   they may be revised to conform with specific application
*   requirements.
EMATRIX  DS   0H
*               RCPRI   RCSEC   ACTION
         DC   X'0000',X'0000',X'00'
         DC   X'0000',X'0001',X'00'
         DC   X'0000',X'0002',X'00'
         DC   X'0000',X'0003',X'08'
         DC   X'0000',X'0004',X'00'
         DC   X'0000',X'0005',X'08'
         DC   X'0004',X'0000',X'08'
         DC   X'0004',X'0001',X'04'
         DC   X'0004',X'0002',X'08'
         DC   X'0004',X'0003',X'08'
         DC   X'0004',X'0004',X'08'
         DC   X'0004',X'0005',X'08'
         DC   X'0004',X'0006',X'00'
         DC   X'0004',X'0007',X'00'
         DC   X'0004',X'0008',X'08'
         DC   X'0004',X'0009',X'0C'
         DC   X'0004',X'000A',X'04'
         DC   X'0004',X'000B',X'08'
         DC   X'0004',X'000D',X'08'
                   .
                   .
         DC   X'0008',X'0000',X'08'
         DC   X'0008',X'0001',X'04'
         DC   X'0008',X'0002',X'04'
         DC   X'0008',X'0003',X'08'
                   .
                   .
         DC   X'0050',X'0000',X'0C'
                   .
                   .
         DC   X'FF'
*  For the sake of brevity the matrix has been truncated, if you
*  use this method then the matrix must include all possible
*  combinations of RCPRI and RCSEC otherwise the "should not occur"
*  condition with which the matrix is terminated will be raised.

At first glance this routine may not appear to be very efficient
as it involves a large scanning loop, but remember that it will
only be called in the event of an error and hopefully the vast
majority of calls to the routine will exit after a few instructions
as there will not have been a problem.  The key value of this
approach is that the mainline program is not confused with an
excessive amount of error checking.  However, there is no
reason why error checking for specific macros cannot be
handled in the main line if the analyse routine is not sensitive
enough.

A note of caution: the sample code shows APPCCMD macros
being issued during error conditions.  Always remember that an
APPCCMD macro should only be issued if the current finite
state of the session or conversation allows.  Failure to observe
this rule will simply compound the attempted error recovery.
For example, it is not always possible to deallocate a
conversation using CONTROL=DEALLOC when there has
been a data flow error, instead CONTROL=REJECT,
QUALIFY=CONV should be used.  However if the state of the
conversation is uncertain then this too could cause an error, in
which case CONTROL=REJECT,QUALIFY=SESSION should
be used.  This will terminate the session and any conversation
that it is supporting irrespective of the state of that
conversation.


USE OF EXITS

Anyone familiar with pre-LU6.2 VTAM application
programming may be puzzled by the lack of discussion relating
to exits.  RPL exits are supported on most APPCCMD macro
calls which specify OPTCD=ASY and their use is at the
discretion of the application designer.  Three application level
exits that relate to errors are still supported: LERAD, SYNAD,
and TPEND.  Their function and the design necessary is
identical to pre-LU6.2 applications.  As discussed earlier,
when an APPCCMD macro completes, GPR15 is set with a
general return code.  However, if LERAD and SYNAD exits
are supplied, one of them is scheduled (usually the LERAD)
when an APPCCMD macro completes with a general return
code of non-zero.  The exit is then responsible for setting both
the return code in GPR15 and the condition code in GPR0
which will then be available to the NSI following the
APPCCMD macro.  Use of exits is a matter of personal choice.
This article has expressed the author's preference for not using
exits for several reasons.  First, exits are scheduled by VTAM
using SVC6.  The environment under which the exit runs is not
clearly defined and has certain restrictions.  If error recovery is
placed in the main line, the environment is under the control of
the application.  Second, the design and coding of exits is
complex since addressability must be established and checks
made to detect recursive calls and unexpected errors.  Testing
and debugging is also complex since VTAM must be persuaded
to schedule the exit.  Finally, LU6.2 support is a move in the
direction of a higher level interface to communications
protocol.  It is far more productive to be able to forget tortuous
low-level coding and concentrate on functionality.  But the
decision is yours.


USING LOG DATA

Provision has been made in the LU6.2 support to utilize LU6.2
protocol to allow applications to communicate errors in a
controlled manner.  This is achieved via support for the LU6.2
SEND_ERROR verb which causes a Function Management
Header Type 7 to flow.  FMH7 is used to send conversation or
session error notification from one LU to another.  In addition,
the LU reporting the error condition can send an error message
provided it conforms to the LU6.2 architecture requirements as
a formatted GDS variable.  The message is called an Error Log
Variable and has the following format:

o      LL  ID  error data

LL is the total length of the GDS structure (including 2 bytes
for the length field itself) and the GDS-id must be X'12E1'.
Error data is in two parts: the product set-id subvector followed
by the error message text subvector.  Supplying the product
set-id is optional but the length field must still be set to X'02'.

The following code illustrates the use of error notification:

           APPCCMD    CONTROL=SEND,
                      QUALIFY=ERROR,
                      RPL=LU62RPL,
                      AAREA=LU62RPLX,
                      AREA=LOGDATA,
                      OPTCD=SYN,
                      TYPE=PROGRAM
LOGDATA    DS         0F
           DC         X'0021',X'12E1'
           DC         X'0002'
           DC         X'001B'
           DC         C'INVALID TRANSACTION PARMS'

This code would cause a waiting APPCCMD macro on the
partner system to complete and generate the data processed by
the general analysis routine shown earlier.  It is recommended
that error notification uses LU6.2 protocol via the
CONTROL=SEND, QUALIFY=ERROR and GDS structured
log data.  This simplifies debugging and ensures that the
application has a standard that can be detected by all other applications.

Notice that the APPCCMD macro has the parameter
TYPE=PROGRAM coded.  This tells VTAM that the error
being reported is in a transaction program.  Two other error
types are possible:

o      SERVICE - for errors relating to LU6.2, services
      supported by the application itself (eg conversation
      mapping).  Very little short term use can be made of this.
      In the longer term, applications that support LU6.2 service
      functions that can be accessed by other applications can
      use this type to notify errors in the service.

o      USER - for errors defined by the application design.  This
      basically means define whatever you want with the proviso
      that the receiving partner application(s) must be able to
      understand it.

The error type is propagated to the partner application and
RPL6TYPE is set in the RPL extension for the active
conversation.  If TYPE=USER is coded then sense information
can be placed in the FMH7 by using the SENSE=sense-data
parameter.  There is some confusion in the documentation as to
the exact role of the FMH7.  It is the protocol mechanism used
by the VTAM LU6.2 support on one system to inform the
equivalent VTAM LU6.2 support on the partner system that
there has been an error.  The FMH7 is not available to the
LU6.2 applications (there is no equivalent of the RCVFMH5
macro call) although, as indicated above, they can affect the
contents of the FMH7 by providing log data or sense
information.  Applications are made aware of the error
condition by bad APPCCMD return codes.  In effect error
information is being transported transparently between systems
using LU6.2 protocol.


ABNORMALLY TERMINATING CONVERSATIONS

One possibility for an application to maintain integrity is to
terminate a troublesome conversation.  This is achieved via the
APPCCMD macro
CONTROL=DEALLOC,QUALIFY=qualifier with one of four
qualifiers.  Three of the qualifiers correspond to the
PROGRAM, SERVICE, and USER values of the TYPE
parameter on the APPCCMD macro
CONTROL=SEND,QUALIFY=ERROR,TYPE= type.  The
fourth qualifier allows for failures caused by time-outs.  Each
of the qualifiers maps to a sense code in the FMH7 used by the
VTAM LU6.2 support.  At the partner application, all
APPCCMD macro calls issued against the conversation will
fail with RCPRI=X'0014' for QUALIFY=ABNDPROG,
RCPRI=X'0018' for qualify=ABNDSERV, RCPRI=X'001C'
for QUALIFY=ABND-TIME.


SUMMARY

Design of error detection and recovery is important as LU6.2
applications live in a far more dynamic environment than pre-
LU6.2 VTAM applications.  Decide on a methodology and
apply it consistently to all errors.  Use QUALIFY=SPEC rather
that ANY because for some errors, in particular allocation
failures, the error notification is returned in APPCCMD macros
following the original CONTROL=ALLOC.  Use
OPTCD=SYN for single threaded applications.  Check GPR15
following each APPCCMD macro call.  Do not attempt to
recover from GPR15=04 conditions, simply fail the application
since these will almost certainly be due to a program bug.  For
GPR15=00 and GPR0=X'0B' conditions, screen the values of
RCPRI and RCSEC in the RPL extension for the conditions
that require some recovery action.  Use LU6.2 protocol to
handle all errors - this means issuing APPCCMD macros
consistent with the finite state to exchange error information
and gracefully terminate conversations and sessions.

Brian Alford
Systems Consultant
Aranda (UK)

