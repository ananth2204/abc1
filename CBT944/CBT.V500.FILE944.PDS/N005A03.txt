Miscellaneous LU6.2 functions

This next article in the series which examines the LU6.2
implementation of ACF/VTAM Version 3.3 will explore some
of the more intricate aspects of the LU6.2 protocol, in
particular, synchronization, security and data mapping.
Because LU6.2 is an application-level protocol it is to be
expected that there will be application-level functions and
facilities within the protocol. However, support for these
functions lies with the application program itself. Using LU6.2
protocol, applications negotiate with each other which
functions are to be in effect across the sessions between them,
and VTAM records the information. To a large extent, the
LU6.2 functions implemented by the user application pass
transparently through VTAM: the VTAM LU6.2 support
routines simply verify that what is being passed complies with
the LU6.2 protocol requirements.


Security

Security is supported at two levels: session and conversation.
Session-level security relates to the interaction between the
VTAM applications that are maintaining the LU6.2
conversations. Conversation-level security relates to the
interaction between the transactions being supported by the
applications. In other words, session-level security is
responsible for controlling one application accessing another
while conversation-level security is responsible for controlling
access to transactions.

To implement session-level security, a new RACF class,
APPCLU, must be activated and the LUs of all applications
that are to be allowed to establish sessions must be defined.
The required identification information is carried in the
expanded BIND image which means that checking and
validation can be performed by VTAM when a session request
is received. Session-level security is the mechanism by which
installations can prevent access to an application by
unauthorized applications and so need not concern the LU6.2
application directly.

Conversation-level security is supported via the FMH5 used
during conversation allocation. Following the variable length
transaction name in the FMH5, various optional subfields can
be specified, the first of which is the access security
information. A typical access security subfield structure would
look something like:

      DC    X'12'                 Total length of subfields
      DC    X'08'                 Length of user-id subfield
      DC    X'02'                 Subfield type = user-id
      DC    C'USER001'            User-id
      DC    X'09'                 Length of password sub-field
      DC    X'01'                 Sub-field type = password
      DC    C'QWERTY  '           Password

To implement conversation-level security, either the SECACPT
operand on the APPL statement can be coded or the
CONVSEC profile added to the APPCLU RACF class. (A
third possibility exists via use of APPCCMD
CONTROL=OPRCNTL,QUALIFY=CNOS macros but this is
much trickier to code and unnecessarily complex.) Three
options are possible:

o      NONE - security access information not supported (default).

o      CONV - security access information allowed.

o      ALREADYV - security access information allowed and
      additionally the user-id can be pre-verified by the
      conversation initiator.

It is necessary to tell VTAM that conversation-level security is
in effect so that it can determine whether the security access
subfields will be present in the FMH5 and therefore require
verification. If the partner LU does not support security
subfields, VTAM will remove the subfields from the FMH5.
The already verified option allows the initiator of the
conversation to tell the partner that the user-id has already been
verified locally. If this is used then FM5FLAG2=FM5UIDAV
must be set in the FMH5, in which case it is not necessary to
supply the password. Sample code illustrating the use of
security access is shown at the end of this article - it consists of
a rather strange mixture of VTAM and application security.
There is much debate concerning peer-to-peer security and
whether the application layer is the correct position for it. IBM
currently have little option since the RACF databases reside on
the mainframe, however PU type 2.1 supports some security
features which suggests that the function could possibly be
moved out more into the network. Until this debate is resolved,
an alternative (and possibly more secure) method worth
considering is to format the user-id and password into the PIP
data specified in the FMH5 and remove VTAM from the game.


Synchronization

Synchronization is the process by which two transactions agree
on a defined point during processing. It is a form of
checkpointing co-ordinated on two separate systems. The most
common reason for synchronization is to enable positioning for
transaction back-out in the event of problems but there are
many other possible reasons such as logging or log switches,
freeing of locked resources, and implementation of two-phase
commit protocol. LU6.2 architecture protocol specification
allows for the synchronization of application and transaction
activity and reference to the Transaction Programmers
Reference manual for LU6.2 shows that the level of
synchronization can be negotiated during conversation
allocation and actioned by the CONFIRM, SYNCPT, and
BACKOUT verbs. However, VTAM LU6.2 protocol support
does not itself implement sync point services: it offers what is
colourfully termed 'pass-through support', which loosely
translated means "do it yourself and I promise not to get in the
way". Although the requirement for synchronization can be
specified by setting the FM5FLAG3 flag in the FMH5 during
conversation allocation, the significance of this is left to the
application and there is no implementation of the SYNCPT and
BACKOUT verbs. In essence VTAM has been positioned to
support sync point services but does not deliver - yet. Without
doubt the sync point function will become available at some
point but whether or how this will be in VTAM is not clear - it
may be a separate MVS/ESA-level function.

Three levels of synchronization are defined by LU6.2
architecture:

o      NONE - sync point not supported
      (FM5FLAG3=FM5NONE this is the default setting in the FMH5).

o      CONFIRM - sync points are supported by
      CONFIRM/CONFIRMED protocol
      (FM5FLAG3=FM5CONFM).

o      SYNCPT - full sync point support including SYNCPT,
      BACKOUT, and CONFIRM (FM5FLAG3=FM5CSB).

In effect the only readily available synchronization is the use of
CONFIRM and CONFIRMED together with the ability to
FLUSH the conversation buffer maintained by VTAM.
Although VTAM performs no synchronization activity when
these options are used (apart from buffer flushing) it does
police their use by resetting the conversation state if necessary.
A confirm request from send state leaves the state unchanged
but any pending state (receive, send, deallocate etc) is set to a
definite state (subject of course to errors).

Confirm, confirmed, and flush are qualifiers of the
CONTROL=SEND parameter of the APPCCMD macro. An
illustration of how these are used follows.


Application program 1

CHKSYNC  DS    0H
         APPCCMD CONTROL=OPRCNTL,    Request information ...
               QUALIFY=DISPLAY,       ... relating to partner ...
               RPL=LU62RPL,           ... application to check ...
               AREA=LU62DISP,         ... whether confirm level ...
               AREALEN=100,           ... synchronization is ...
               AAREA=LU62RPLX,        ... in effect
               LUNAME=LU62PART,
               LUMODE=LU62MODE,
               OPTCD=SYN
*
         LA    R5,LU62DISP           Set addressability ...
         USING ISTSLD,R5             ... to display block
         TM    SLDLU1,SLDCONF        Confirm supported ?
         BNO   SKIPCNFM              Skip confirm

*
*            CONFIRM RESOURCE(LU62CID) ;
*
         APPCCMD CONTROL=SEND,       Send request for ...
               QUALIFY=CONFIRM,       ... confirmation to ...
               RPL=LU62RPL,           ... partner application
               AAREA=LU62RPLX,
               CONVID=LU62CID,
               OPTCD=SYN
*
* Check macro return codes to determine if confirmation was received.
* If all was OK then GPR15 and GPR0 will contain 0000. If the partner
* transaction returned SEND_ERROR then GPR0 will contain X'0B' and the
* RPL6RC(RPL6PRI) field of the RPL extension block will contain a reason
* code
*
         LTR   R15,R15               Macro completed OK ?
         BNZ   ABEND                 Disastrous error if not
         LTR   R0,R0                 Conditional completion ?
         BZ    CONFRMOK              Confirm successful
         LA    R6,LU62RPLX           Set addressability ...
         USING ISTRPL6X,R6           ... to RPL extension
         CLC   RPL6PRI,=X'0030'      SEND_ERROR TYPE(PROG) ?
         BE    SENDERRP
         CLC   RPL6PRI,=X'0034'      SEND_ERROR TYPE(Program) ?
         BE    SENDERRP
         CLC   RPL6PRI,=X'0038'      SEND_ERROR TYPE(Program) ?
         BE    SENDERRP
         CLC   RPL6PRI,=X'003C'      SEND_ERROR TYPE(Service) ?
         BE    SENDERRS
         CLC   RPL6PRI,=X'0040'      SEND_ERROR TYPE(Service) ?
         BE    SENDERRS
         CLC   RPL6PRI,=X'0044'      SEND_ERROR TYPE(Service) ?
         BE    SENDERRS
          .        .
          .        .
LU62RPL  RPL   AM=VTAM
LU62RPLX ISTRPL6
LU62DISP DS    XL100
LU62DATA DS    CL256
         ISTSLD

If an attempt is made to send a confirmation request for a
session which does not support synchronization, ie one that has
SYNC_LEVEL(NONE) specified, then a parameter check error
is raised. Therefore a check is made on the sync level by
requesting a copy of the display block for the partner
application LU. For LU6.2 applications, VTAM maintains an
LU mode table or LM table, which associates partner LU
names and the various modes, characteristics, and features that
are in effect. Information relating to partner applications can be
extracted from the LM table via an APPCCMD
CONTROL=OPRCNTL,QUALIFY=DISPLAY macro
specifying the partner LU name and mode name as shown in
the above code. The information is returned in a formatted
block known as the DEFINE/DISPLAY block and this can be
checked for the options that are in effect such as the negotiated
synchronization level. The
CONTROL=SEND,QUALIFY=CONFIRM is flushed
immediately to the partner application together with any data
that may be waiting to be sent .


Partner Program 2

         APPCCMD CONTROL=RECEIVE,    Outstanding receive ...
               QUALIFY=SPEC,          ... for conversation ...
               RPL=LU62RPL,           ... with other application
               AREA=LU62DATA,
               AAREA=LU62RPLX,
               CONVID=LU62CID,
               OPTCD=SYN
*
         LA    R6,LU62RPLX           Set addressability ...
         USING ISTRPL6X,R6           ... to RPL extension
         TM    RPL6RCV1,RPL6WCFM     Confirm received ?
         BNO   SKIPCNFM              Skip confirm
*
*   If all is well return a CONFIRMED response
*
*            CONFIRMED RESOURCE(LU62CID)
*
         APPCCMD CONTROL=SEND,       Send confirmation ...
               QUALIFY=CONFRMD,       ... response to ...
               RPL=LU62RPL,           ... partner application
               AAREA=LU62RPLX,
               CONVID=LU62CID,
               RECLEN=0,
               CONMODE=CS,
               OPTCD=SYN
*
*   If all is not well return a SEND_ERROR response
*
*            SEND_ERROR RESOURCE(LU62CID)
*                       TYPE(PROG)
*
         APPCCMD CONTROL=SEND,       Send an error ...
               QUALIFY=ERROR,         ... response to ...
               RPL=LU62RPL,           ... partner application
               AAREA=LU62RPLX,
               CONVID=LU62CID,
               TYPE=PROGRAM,
               RECLEN=0,
               OPTCD=SYN

The WHAT_RECEIVED field of the RPL extension must be
examined for confirmation request
(RPL6RCV1=RPL6WCFM). When set, the active transaction
must carry out whatever synchronization activity is necessary
and respond to the initiating transaction with either
CONTROL=CONFRMD if all is well or CONTROL=ERROR
if there is a problem. The error type could either be
TYPE=PROGRAM, which the initiating transaction translates
as meaning a sync failure, or TYPE=USER with a supplied
sense code if a more sensitive response is required (ie exactly
what failed). Since synchronization is effectively an LU6.2
function implemented by the application it is arguable that
TYPE=SERVICE should be the response since a
synchronization failure is a service failure. For simplicity,
TYPE=PROGRAM with accompanying LOG data is
recommended.

Implementation of more sophisticated sync point control must
be coded in the application. A previous article in this series
strongly recommended the use of GDS for all conversation
exchanges. If this recommendation is followed, sync point
control can flow easily in the normal data flow if a set of GDS-
ids which correspond to sync point control and response is
defined. The partner applications must contain logic to detect
these GDS-ids and act accordingly. This brings us neatly onto
another LU6.2 function which is only nominally supported.


Conversation Mapping

Data flow normally consists of logical records and, with a basic
conversation, the receiving transaction must interpret the
structure and format of the data. The LU6.2 architecture
supports the concept of mapped conversations. Data flow in a
mapped conversation is formatted by data formatting services
in what is effectively an SNA presentation services layer
implementation. That at least is the theory and the SNA
Transaction Programmers Reference manual for LU6.2
expands on mapped conversations at great length. However,
documentation relating to the APPCCMD macro interface to
the VTAM LU6.2 support routines is quite explicit that the API
does not support mapped conversations. Rather, it is suggested
that the application must provide its own API to translate
mapped conversation requests into APPCCMD macros. The
only concession is that the standard FMH5 contains a flag
(FM5RSCTP) which can be set to enable agreement between
applications on whether conversation mapping is to be used:

o      FM5RSCTP=FM5BASIC - basic conversation

o      FM5RSCTP=FM5MAPED - mapped conversation.

Apart from that it is up to you. VTAM only supports basic
conversations. Mapped conversations are probably only of
value when fixed format data is involved such as when screen
images are being exchanged in a query/response transaction.
Apart from that, there is a vague hint that sync point control
may be placed in mapped conversations. This is probably
because synchronization control is a function of the
presentation services layer in the ISO network model.

As stated earlier, conversation-level security, synchronization,
and mapping agreement are implemented via the FMH5 during
conversation allocation. The following code illustrates how this
is achieved (note that for completeness the full formatting of
the FMH5 is shown - this includes merging details from coding
examples in previous articles):

Conversation initiator

         LA    R5,LU62FMH5           Address Skeleton ...
         USING ISTFM5,R5             ... FMH5
         MVI   FM5LENTH,X'0F'        Length of FMH5 header
         OI    FM5FLAG1,FM5TYPE5     Set FMH type 5
         MVC   FM5TYPE,X'02FF'       Set FMH5 type=attach
*
         OI    FM5RSCTP,FM5MAPED     Indicate mapped conversation
*
         OI    FM5FLAG3,FM5CSB       Indicate full sync support
*
         MVC   FM5TPNAM,LU62TPNM     Transaction name and...
         MVI   FM5LNTPN,X'05'        ... length in FMH5
*
         OI    FM5FLAG2,FM5UIDAV     Show userid verified
         LA    R6,18(,R5)            Address access security ...
         USING FM5ASI,R6             ... information subfields
         MVI   FM5LNASI,X'09'        Set ASI subfields length
         LA    R6,FM5ASEC            Point to ASI subfields
         DROP  R6                     Drop ASI addressability
         USING FM5ACCSE,R6           Address ASI subfield
         MVI   FM5ASLL,X'08'         Set length of subfield
         OI    FM5ASTY,FM5ASIID      Set subfield type = userid
         MVC   FM5ASDA(7),LU62USER   Set userid in subfield
*
         DROP  R6                    Drop ASI addressability
         LA    R6,9(,R6)             Skip past ASI fields
         USING FM5LUOW1,R6           Address LUW identifier field
         MVI   FM5LNLUW,X'00'        Set LUW length to zero
*
         DROP  R6                    Drop LUW addressability
         LA    R6,1(,R6)             Skip past LUW fields
         USING FM5CVCOR,R6           Address correlator field
         MVI   FM5LNCCS,X'00'        Set length to zero
*
         DROP  R6
         OI    FM5FLAG2,FM5PIPPR     Set PIP=YES indicator
         LA    R6,1(,R6)             Address PIP data ...
         USING FM5PIPFM,R6           ... field in FMH5
         MVC   FM5PIPGD,=X'12F5'     Set PIP data GDS ID
         MVC   FM5PIPLN,=X'0019'     Set PIP data GDS length
*
         LA    R6,4(,R6)             Address PIP subfields ...
         USING FM5PIPSM,R6           ... in FMH5
         MVC   FM5PIPSG,=X'12E2'     Set subfield GDS ID
         MVC   FM5PIPSL,=X'0009'     Set subfield GDS length
         MVC   FM5PIPSD,=C'LEVEL'    Move data to PIP subfield
*
         LA    R6,9(,R6)             Address next PIP subfield
         MVC   FM5PIPSG,=X'12E2'     Set subfield GDS ID
         MVC   FM5PIPSL,=X'000C'     Set subfield GDS length
         MVC   FM5PIPSD,=C'01017896' Move data to PIP subfield
*
*        ALLOCATE   LU_NAME(PARTNER)
*                   TPN(LU62TPNM)
*                   SECURITY(PGM(USER_ID(user-id)))
*                   SYNC_LEVEL(SYNCPT)
*                   TYPE(BASIC_CONVERSATION)
*                   PIP(YES)
*
         APPCCMD CONTROL=ALLOC,
               QUALIFY=ALLOCD,
               RPL=LU62RPL,
               ACB=LU62ACB,
               LUNAME=LU62PLU,
               LOGMODE=LU62MODE,
               AREA=LU62FMH5,
               RECLEN=63,
               OPTCD=SYN,
               AAREA=LU62RPLX
LU62RPL  RPL    AM=VTAM
LU62RPLX ISTRPL6
LU62ACB  ACB   AM=VTAM,MACRF=LOGON,APPLID=LU62NAME
LU62NAME DC    XL1'08',C'LU62APPL'
LU62PLU  DC    XL1'07',C'PARTNER'
LU62USER DC    C'USER001'
LU62CID  DS    XL4
LU62FMH5 DS    XL255
LU62TPNM DC    C'STOCK'
         ISTFM5

Now a word of caution: there is a wonderful inconsistency in
the formatting of the data areas of the FMH5. Each data
structure begins with a length field which shows how much
data is present. For all cases except the PIP data field and
subfields, this length does not include the length field itself.
The PIP data is different because it is delivered  as a GDS data
structure to the partner application.

Conversation partner ATTN exit

ATTN     DS    0H
         Entry protocol
         CLC   12(4,R1),=C'FMH5'     ATTN driven for FMH5 ?
         BE    ATTNFMH5
         .
         .
*
ATTNFMH5 DS    0H
         APPCCMD CONTROL=RCVFMH5,    Receive the ...
               RPL=LU62RPL,           ... FMH5 sent ...
               ACB=LU62ACB,           ... by the ...
               AREA=LU62FMH5,         ... conversation ...
               AAREA=LU62RPLX,        ... initiator
               AREALEN=255,
               OPTCD=SYN
         LA    R6,LU62RPLX           Set addressability ...
         USING ISTRPL6X,R6           ... to RPL extension
         MVC   LU62LUNM,RPL6LU       Extract LU name ...
         MVC   LU62MODE,RPL6MODE     ... session mode ...
         MVC   LU62CID,RPL6CNVD      ... and conversation id
         DROP  R6
*
         LA    R5,LU62FMH5           Set addressability ...
         USING ISTFM5,R5             ... to FMH5
         TM    FM5RSCTP,FM5MAPED     Mapped conversation ?

         TM    FM5FLAG3,FM5CSB       Sync support ?

         SR    R6,R6                 Length of FMH5 fixed ...
         IC    R6,FM5LENTH           ... portion in R6
         AR    R6,R5                 Point R6 to ASI
         USING FM5ASI,R6             Address ASI in FMH5
         CLI   FM5LNASI,X'00'        ASI fields present ?
         BE    SKIPASI
         .
         .
SKIPASI  DS    0H
         SR    R2,R2                 Skip past ...
         IC    R2,FM5LNASI           ... ASI fields ...
         LA    R2,1(,R2)             ... in FMH5
         AR    R6,R2
         DROP  R6
         USING FM5LUOW1,R6
         CLI   FM5LNLUW,X'00'        LUW present ?
         BE    SKIPLUW
         .
         .
SKIPLUW  DS    0H
         IC    R2,FM5LNLUWI          Skip past ...
         LA    R2,1(,R2)             ... LUW fields ...
         AR    R6,R2                 ... in FMH5
         DROP  R6
         USING FM5CVCOR,R6
         CLI   FM5LNCCS,X'00'        Correlator field present ?
         BE    SKIPCOR
         .
         .
SKIPCOR  DS    0H
         TM    FM5FLAG2,FM5PIPPR     PIP data present ?
         BNO   SKIPPIP
         LA    R2,DATABUFF
PIPRCV   DS    0H
         APPCCMD CONTROL=RECEIVE,    Receive PIP data
               RPL=LU62RPL,
               ACB=LU62ACB,
               CONVID=LU62CID,
               AREA=(2),
               AREALEN=PIPDLEN,
               FILL=LL,
               QUALIFY=SPEC,
               OPTCD=SYN
         TM    RPL6RCV1,RPL6WDAC     Complete PIP record ?
         BO    ALLPIP                Proceed
         TM    RPL6RCV1,RPL6WDAI     More PIP data to come ?
         BNO   ERROR                 Must be a problem
         LA    R2,24(,R2)            Move area along buffer
         B     PIPRCV                Go receive some more
ALLPIP   DS    0H
         LA    R6,DATABUFF           Address PIP data ...
         USING FM5PIPFM,R6           ... in logical record
         CLC   FM5PIPGD,=X'12F5'     Verify valid PIP GDS id
         BNE   BADPIP                Error if not
         LH    R2,FM5PIPLN           PIP data length in R2
         LA    R6,4(,R6)             Address PIP subfields ...
         USING FM5PIPSM,R6           ... in logical record
         SH    R2,=H'4'              Decrement PIP data length
         LA    R4,PIPPARM1           Address first PIP parm
PIPLOOP  DS    0H
         CLC   FM5PIPSG,=X'12E2'    Valid PIP subfield GDS id ?
         BNE   BADPIP               Error if not
         SR    R3,R3
         ICM   R3,3,FM5PIPSL        Length of PIP subfield
         SH    R3,=H'3'             Prepare for execute move
         EX    R3,MOVEDATA          Move data to parm list
         LA    R4,20(,R4)           Prepare to extract next parm
         CLI   0(R4),X'FF'          Too many PIP parms ?
         BE    TOOMANY              Exit loop
         SR    R2,R3                Decrement PIP data length
         LTR   R2,R2                End of PIP data subfields ?
         BNZ   PIPLOOP              Continue if not
*
SKIPPIP  DS    0H
         .     .
*
MOVEDATA MVC   0(0,R4),4(R6)
*
PIPDLEN  DC    H'48'
PIPPARM1 DC    CL20' '
PIPPARM2 DC    CL20' '
    .     .       .
    .     .       .
PIPPARMn DC    CL20' '
         DC    X'FF'
DATABUFF DS    4000X

The partner transaction issues a CONTROL=RCVFMH5 to
obtain the FMH5. The maximum possible length of the FMH5
is 255 bytes so always allow for this; the actual length will be
in the FMH5 itself (FM5LENTH) or it can be found in the
RECLEN field of the RPL. Use should be made of an identical
mapping DSECT to extract the formatted data from the FMH5
- the code will obviously be the reverse of the originating
application that formatted the FMH5. Note that it is essential to
ensure that the DSECTs are at the same SNA version and
release level. Remember that the PIP data must be obtained by
a subsequent CONTROL=RECEIVE as it is not logically part
of the FMH5 - the FMH5 simply contains an indicator that PIP
data is available.

It is highly likely that there will be a rapid expansion in the
number and scope of the functions and facilities of LU6.2 - the
current level of support in VTAM is fairly basic but provides a
platform on which to build.


Brian Alford
Systems Consultant
Aranda (UK)

