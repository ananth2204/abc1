NCCF CLISTs and NetView

Attracted by the message automation facilities of NetView, we
decided to install release 3 to replace the NCCF 2.2 program
we were running.  Since no mention was made of problems
with CLISTs, we assumed that our NCCF CLISTs would
continue to run.  This proved not to be the case.


CLIST &WAIT PROBLEMS

Any CLIST that issued an &WAIT command (issuing a
command to VTAM or to NetView and then trapping the
responses in order to process the message replies) in most cases
would hang mysteriously with an outstanding wait after
trapping only one or two of the responses returned.  Some
would time out without having been driven by any of the
messages we knew were being received.

A deeper perusal of the manuals revealed the existence of a
supplied program to automate the conversion of CLISTs into
REXX.  The converted programs failed in just the same way.

Further investigation by IBM and ourselves revealed that the
message processing internal to NetView was very different
from that of NCCF.  Previously, message responses from
VTAM had been passed to CLISTs individually and any one of
them was capable of driving the &WAIT. Under NetView, a
whole raft of message responses from VTAM is often passed as
a single Multi-Line Write To Operator (MLWTO) message and
only the very first message is capable of driving the &WAIT.
This meant that most of the messages that our CLISTs were
waiting for were simply being missed.

One answer was to rewrite most of our CLISTs using the
GETMLINE, GETMSIZE, and PARSEL2R commands; to split
up the messages; and then branch to the appropriate sub-
routines to process the messages - potentially a lengthy, error-
prone, and rather dull task.


A BOLT-ON SOLUTION

The better solution proved to be to develop some code which
could simply be bolted on to a CLIST irrespective of its logic.
Once the code (which is the subject of this article) was
developed, all our CLISTs were converted and functioning
perfectly in less than 30 minutes.

Use a utility to search your NCCF CLIST libraries for the
character string '&WAIT'.  Any CLIST that uses this
command is a potential candidate for conversion.  Those which
issue a command to VTAM or NetView will almost certainly
require it.

Copy these subroutines at the bottom of the failing CLIST.
Ensure that the subroutine names supplied do not already exist
elsewhere in the CLIST.


SPLIT

-SPLIT
OVERRIDE DISPLAY=NO
GETMSIZE MLWTOSIZE
&MSGNUMBER = 1
-SPL123
&IF &MSGNUMBER > &MLWTOSIZE &THEN &GOTO -SPL124
GETMLINE MESSAGE &MSGNUMBER
GETMTYPE TYPE &MSGNUMBER
PARSEL2R MESSAGE MSGID MSGSTR
&TYPE&MSGNUMBER = &TYPE
&ID&MSGNUMBER = &MSGID
&STR&MSGNUMBER = &MSGSTR
&MSG&MSGNUMBER = &MESSAGE
&MSGNUMBER = &MSGNUMBER + 1
??EXCMD &OPID SPLWAIT &MESSAGE
&GOTO -SPL123
-SPL124
OVERRIDE DISPLAY=DEFAULT
&WAIT CONTINUE


SAY

-SAY
GETMSIZE MSGSIZE
GETMLINE MESSAGX &MSGSIZE
PARSEL2R MESSAGX &MSGID MSGSTR
&MSGID = &SUBSTR &MSGID 2
&IF &MSGID = 'IST097I' &THEN &GOTO -SKIP
&WRITE '>>>> ' &MSGID &MSGSTR ' <<<<'
-SKIP
&WAIT CONTINUE

Then, if you are trying to trap VTAM message responses, for
example, include this line as the first message to be trapped in
your &WAIT:

       IST*=-SPLIT,+

This will ensure that all VTAM message responses are trapped
and processed by the subroutines.

Include this line as the last message to be trapped in your
&WAIT:

       #*=-SAY

This ensures that if your CLIST receives any messages it is not
expressly designed to trap, they will be issued to the screen and
not simply lost.

Then, prefix with '#' all the message identifiers that your
CLIST was originally designed to trap.  For example, a line in
the CLIST &WAIT:

       IST350I=-MAJOR,+
will become

       #IST350I=-MAJOR,+


EXAMPLE

The CLIST segment below has the required changes
highlighted as an example:

&CONTROL ERR
&CGLOBAL DOMN,SUBN,DOMD
&WAIT SUPPRESS CONTWAIT
&I   = 0
&SP5 = '     '
&SP9 = '         '
&SEL = &1
CLEAR
&IF .&SEL EQ . &THEN &GOTO -MAJONLY
&WAIT 'D NET,APPLS',+
      IST*=-SPLIT,+
      #IST350I=-IGNORE,+
      #IST080I=-MINOR,+
      #IST360I=-IGNORE,+
      #IST089I=-MAJOR2,+
      #IST314I=-LAST2,+
      #%=-SAY
&WRITE APPLS: CLIST TERMINATED DURING WAIT BY OPERATOR
&EXIT -1
-MAJOR2
&FLAG1 = 0
&IF X&1 NE X&SEL &THEN &GOTO -IGNORE
&FLAG1 = 1
&MAJF  = 1
&WRITE ******************************************************
&WRITE * APPLICATION PROGRAM MAJOR NODE &SEL
&WRITE *=====================================================
&WRITE * DOMAIN &DOMN - SUBAREA &SUBN
&WRITE ******************************************************
&WAIT CONTINUE
-MAJONLY
&WAIT 'D NET,APPLS',+
       IST*=-SPLIT,+
       #IST350I=-IGNORE,+
       #IST080I=-IGNORE,+
       #IST360I=-IGNORE,+
       #IST0891=-MAJOR1,+
       #IST314I=-LAST1,+
       #*=-SAY
&WRITE APPLS: CLIST TERMINATED DURING WAIT BY OPERATOR
&EXIT -1
-IGNORE
&WAIT CONTINUE
-MAJOR1
&MAJ = &1
&LEN = &LENGTH &MAJ
&LEN = 9 - &LEN
&PAD = &SUBSTR &SP9 1 &LEN
&MAJ = &CONCAT &MAJ &PAD
&MAJ = &CONCAT &MAJ &6
&MAJ = &CONCAT &MAJ &SP5
&I = &I + 1
&MAJ&I = &MAJ
&WAIT CONTINUE
-MINOR
&IF &FLAG EQ 0 &THEN &GOTO -MINLOOPE
&NOD1 = &1

This simple editing is all that is required to convert each
CLIST, but you also require a module which must be defined
to NetView in the DSICMD member of the NetView
PARMLIB.  The CMDMDL statement required is highlighted
in the example below:

* BHS CMDMDL STATEMENTS                                          *
*----------------------------------------------------------------*
IML2    CMDMDL   MOD=IML2
SPLWAIT CMDMDL   MOD=SPLWAIT,RES=Y,ECHO=N,PARSE=N
         END


SPLWAIT
SPLWAITA CSECT
         DSICBS DSICWB,DSIMVT,DSIPDB,DSISVL,DSISWB,DSITIB,DSITVB,      X
               PRINT=NO
*  SAVE REGISTERS AND SET UP BASE REGISTER                            *
         USING *,R15
         B     START1
         DC    C'SPLWAITA  &SYSDATE. AT &SYSTIME.'
START1   DS    0H
         STM   R14,R12,R12(R13)       SAVE REGISTERS
         DROP  R15
         LR    R12,R15                SET BASE REGISTER
         USING SPLWAITA,R12
*  ADDRESSABILITY                                                     *
         LR    R11,R1                 LOAD CWB ADDR
         USING DSICWB,R11             R11 BASE FOR COMMAND WORK BLOCK
         LA    R1,CWBSAVEA            USE CWBSAVEA FOR SAVEAREA
         ST    R1,8(R13)              STORE MY SA INTO CALLERS SA
         ST    R13,4(R1)              STORE CALLERS SA IN MINE
         LR    R13,R1                 R13 HAS MY SAVEAREA ADDRESS
*  ADDRESSABILITY                                                     *
         L     R10,CWBTIB             GET DSITIB ADDRESS
         USING DSITIB,R10             ESTABLISH ADDRESSABILITY
         L     R9,TIBTVB              GET DSITVB ADDRESS
         USING DSITVB,R9              ESTABLISH ADDRESSABILITY
         L     R8,TVBMVT              GET DSIMVT ADDRESS
         USING DSIMVT,R8              ESTABLISH ADDRESSABILITY
         XC    CWBADATD,CWBADATD      ZERO AUTODATA AREA
         SLR   R15,R15                ZERO RETURN CODE REGISTER
*        MAIN PROCESSING                                              *
         DSIDATIM AREA=DATETIME,FORMAT=BINARY
         LA    R2,MSGBUFF        SET ADDRESSABILITY TO BUFHDR
         USING BUFHDR,R2         R2 IS BASE FOR BUFHDR
         LA    R1,BUFLENG
         STH   R1,HDRBLENG       SET BUFFER LENGTH
         LA    R1,BUFHDRND-BUFHDR  OFFSET TO MSG TEXT
         STH   R1,HDRTDISP         PUT OFFSET IN HEADER
         MVI   HDRMTYPE,HDRTYPEL   TITLE LINE MESSAGE
         MVC   HDRDOMID,MVTCURAN   PUT DOMAIN ID IN HEADER
         L     R1,TIME             GET TIME
         ST    R1,HDRTSTMP         PUT TIME IN HEADER
         LA    R1,L'TITLE1         GET LENGTH OF 1ST TITLE LINE
         STH   R1,HDRMLENG         PUT LENGTH IN BUFFER HEADER
         MVI   HDRIND,HDRLNEND     INDICATE TITLE LINE
         L     R5,CWBBUF           FIND THE MESSAGE...
         USING MYBUF,R5
         LH    R7,HSRMLENG         AND ITS LENGTH
         SH    R7,SPLWAIT          MINUS LENGTH OF 'SPLWAIT ' COMMAND
         SH    R7,EXTRAONE         ONE MORE AS WELL
         MVC   MESSAGE,SPACES      INITIALIZE BUFFER
         EX    R7,EX2
         MVI   MESSAGE,C'#'  MAKE MESSAGE IDENTIFIABLE TO CLIST &WAIT
*        MVC   MESSAGE(L'TITLE1),TITLE1  MOVE MESSAGE TO BUFFER
SENDMSG  DSIPSS SWB=CWBSWB,TYPE=OUTPUT,BFR=(2),OPTIONS=MSG
         B     RETURN
*  EXECUTED INSTRUCTIONS                                              *
EX2      MVC   MESSAGE+1(0),MSSSAGE ...AND MOVE TO BUFFER
*  CONSTANTS                                                          *
SPLWAIT  DC    XL2'0008'
EXTRAONE DC    XL2'0001'
SPACES   DC    CL72' '
RETURN   EQU   *
         L     R13,4(R13)             GET CALLERS SAVEAREA ADDRESS
         L     R14,12(R13)            RESTORE REG14
         LM    R0,R12,20(R13)         RESTORE REGS
         BR    R14                    RETURN
         LTORG
TITLE1   DC    CL72'#ST097I MY FAKE MESSAGE'
DSICWB   DSECT
         ORG   CWBADATD               AUTODATA AREA
DATETIME DS    0D
DATE     DS    F
TIME     DS    F
MSGBUFF  DS    0F
         DS    XL(BUFHDRND-BUFHDR)
MESSAGE  DS    CL72
OVERLAP  DS    CL1
BUFLENG  EQU   *-MSGBUFF
         DS    XL(256-(*-CWBADATD))   AUTODATA LENGTH CHECK
MYBUF    DSECT
MSBUF    DS    0XL44
HSRMLENG DS    XL2
HSBMLENG DS    XL2
HSRIND   DS    XL1
HSRMTYPE DS    XL1
HSRTDISP DS    XL2
HSRTSTMP DS    XL4
HSRDOMID DS    XL8
RSSERVED DS    XL4
HSRNEXTM DS    XL4
HSRSENDR DS    XL8
CSMMAND  DS    XL8
MSSSAGE  DS    XL72
         END

It should be assembled and linked with a job and procedure
similar to the following:

//*  JCL TO ASSEMBLE AN NCCF LOAD MODULE.
//ASSEM     EXEC ASMHCT,
//          PARM.C='NODECK,OBJECT,XREF(SHORT),RENT',
//          PARM.L='LIST,XREF,MAP,RENT'
//*  ABOVE PARM OVERRIDES ARE VALID FOR 'SPLWAIT' ONLY
//*  ASMHCT DIFFERS FROM ASMHCL ONLY IN THAT IT REFERENCES
//*  THE NETVIEW MACRO LIBRARY AS WELL AS THE SYS1 ONE
//C.SYSIN   DD   DSN=TYB.NETV.ASM(SPLWAIT),DISP=SHR
//L.SYSLMOD DD   DSN=$NETV.USERLNK(SPLWAIT),DISP=SHR,UNIT=3380
//* LIB: SYS1.PROCLIB(ASMHCT)
//* GDE: MVS/SP SYSTEM IPO PROGRAM PRODUCT GUIDE
//* DOC: THIS PROCEDURE EXECUTES ASSEMBLER H AND
//*      LINK-EDITS THE NEWLY ASSEMBLED PROGRAM
//C       EXEC PGM=IEV90,PARM='NODECK,OBJECT,XREF(SHORT)'
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=$NETV.MACLIB,DISP=SHR
//SYSLIN   DD  DSN=&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,
//             DISP=(MOD,PASS),
//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)
//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),UNIT=VIO,
//             DCB=BUFNO=1
//L       EXEC PGM=IEWL,COND=(5,LT,C),
//      PARM='LIST,XREF,MAP,RMODE=24,AMODE=24'
//SYSPRINT DD  SYSOUT=*
//SYSLMOD  DD  SPACE=(CYL,(1,1,1)),DSN=&LOD(X),DISP=(,PASS),
//             UNIT=VIO,DCB=BUFNO=1
//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),UNIT=VIO,
//             DCB=BUFNO=1
//SYSLIN   DD  DSN=&OBJ,DISP=(OLD,PASS)
//         DD  DDNAME=SYSIN

Notice that the module must be linked as re-entrant into a load
library that is accessible to NetView, perhaps using a STEPLIB
in the JCL for NetView start-up.


MISCELLANEOUS PROBLEMS

We found another two minor problems in converting our
CLISTs to run under NetView.  One was that some of the
message formats for NetView messages had altered so that one
of our CLISTs using &SUBSTR to reference a portion of a
message was instead missing the relevant part of the message.
The other problem was that &MSGID and &MSGSTR are not
automatically set on receipt of a message under NetView as
they were under NCCF.  You must use GETMLINE and
PARSEL2R to set them in that part of your CLIST that
attempts any processing of this sort.  Bear in mind that the
messages you receive and process with these commands in the
parts of your own CLIST will, if you have made use of the
contents of this article, be prefixed with '#'.

Ron Ellis
Senior Systems Programmer
Storehouse Retail Services (UK)

