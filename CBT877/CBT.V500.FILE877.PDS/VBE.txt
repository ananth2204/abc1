/*REXX****************************************************************/
/*                                                                   */
/* Name: VBE -- Common part for V,B,E macros                         */
/*                                                                   */
/************************************* Vladimir Mestovski, 2012 ******/

trace 'O'
signal on novalue
arg PGMNAME

"ISPEXEC" 'CONTROL ERRORS RETURN'  /* RETURN TO MACRO IF ERROR */

valid_for_dsn = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$#@()."
valid_for_var = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$#@"
delimiter_for_dsn = ", ='"
delimiter_for_var = "().&"

"ISREDIT (user) = USER_STATE"
"ISREDIT" '(LPTR,CPOS) = CURSOR'
"ISREDIT" '(DATA) = LINE .ZCSR'
"ISREDIT" '(LAST) = LINENUM .ZLAST'
"ISREDIT" '(LRECL) = LRECL'

if datatype(LAST)='CHAR' then do;
 say "*ERROR* YOU should remove any pending line commands";
 say "        from the line command area first, then try again...";
 exit 8;
end;

If (lptr > last)  |,
   (lptr < 1)     |,
   (cpos > lrecl) |,
   (cpos < 1) Then
  DO
    zedsmsg = "Invalid position"
    zedlmsg = "Cursor is positioned outside data area"
    "ISREDIT" 'CURSOR =' lptr cpos
    "ISPEXEC" 'SETMSG MSG(ISRZ001)'
    exit 0
  End

If Verify(Substr(data,cpos,1),valid_for_dsn) <> 0 Then
  DO
    zedsmsg = "Invalid field"
    zedlmsg = "Cursor is positioned on a field that is not valid for a",
               " data set name"
    "ISREDIT" 'CURSOR =' lptr cpos
    "ISPEXEC" 'SETMSG MSG(ISRZ001)'
    exit 0
  End

dsn = get_dsn(cpos data)

msg = Sysdsn("'"dsn"'");
If msg <> "OK" Then
  DO
    zedsmsg = msg
    zedlmsg = "Could not open data set" dsn
    "ISREDIT" 'CURSOR =' lptr cpos
    "ISPEXEC" 'SETMSG MSG(ISRZ001)'
    exit 0
  End
Else
  DO
    "ISPEXEC" PGMNAME "DATASET('"dsn"')"
    if rc  > 4 then do;
    zedsmsg = PGMNAME "failed. RC="rc
    zedlmsg = "Could not open data set" dsn
    "ISREDIT" 'CURSOR =' lptr cpos
    "ISPEXEC" 'SETMSG MSG(ISRZ001)'
    exit 0
    end;
  End

"ISREDIT USER_STATE = (user)"
"ISREDIT RESET FIND"
"ISREDIT" 'CURSOR =' lptr cpos
exit

/****************************************************************/
/* Return DSN extracted from a line pointed by the cursor       */
/* Arguments:                                                   */
/*    1. current cursor position                                */
/*    2. string that contains DSN                               */
/****************************************************************/
get_dsn:
trace 'O'
Parse arg cpos field
                                        /* Find start position of dsn */
Do i = cpos to 1 by -1
  If Verify(Substr(field,i,1),delimiter_for_dsn) = 0 Then Leave
End
start = i+1
                                        /* Find end position of dsn   */
Do i = cpos to lrecl
  If Verify(Substr(field,i,1),delimiter_for_dsn) = 0 Then Leave
End
len = i-start
                                        /* Extract dsn                */
dsn = substr(field,start,len)
                                        /* Check for (dsn)            */
if substr(dsn,1,1) = '(' & substr(dsn,length(dsn),1) = ')' then
parse var dsn '(' dsn ')'
else                                    /* Check for (dsn,            */
if substr(dsn,1,1) = '(' & substr(dsn,length(dsn),1) <> ')' then
parse var dsn '(' dsn
                                        /* If no vars, done           */
if index(dsn,'&')=0 then
Return dsn
                                        /* Start processing &vars     */
_SYSUID=userid()                        /* Assign &SYSUID             */

if index(dsn,'&')>0 then do;            /* If dsn still has &vars...  */
 Call getSETvars;                       /* Extract SET vars           */
 Call getPROCvars;                      /* Extract PROC vars          */
 Call setVars                           /* Substitute &vars           */
End;

Do while index(dsn,'..')>0;             /* Replace '..' with '.'      */
 parse var dsn beg '..' rest
 dsn=beg||'.'||rest
End;

Return dsn

/*********************************************************************\
| Extract 5 &vars from // PROC card and assign as '_vars'             |
|  //RPE218  PROC TYPE='CPE',HLQR='MDCP',SYS='DB2A'                   |
|          _TYPE='CPE'; _HLQR='MDCP' _SYS='DB2A'                      |
\*********************************************************************/
getPROCvars:
 trace 'O'
 "ISREDIT FIND FIRST ' PROC ' NX"
 if rc<>0 then return
 "ISREDIT RESET FIND"
 "ISREDIT (procline) = LINE .ZCSR"
 if word(procline,2)<>'PROC' then return;
 parse var procline slash . parms .
 if substr(slash,1,2)<>'//' |,
    substr(slash,1,3)='//*' |,
    parms='' then return;
 parse Value parms',' with v.1 ',' v.2 ',' v.3 ',' v.4 ',' v.5 ',' .
 do i=1 to 5 while v.i<>'';
  parse var v.i varc '=' valuec
  if substr(valuec,1,1)="'" then
   parse var valuec "'" valuec "'"
  interpret "_"varc"='"valuec"'"
end;
return;

/*********************************************************************\
| Extract '&vars' from all SET cards and assign as '_vars'            |
|  //  SET M=TTR314             _M='TTR314'                           |
|  //  SET L=&M                 _L='&M'                               |
\*********************************************************************/
getSETvars:
trace 'O'
"ISREDIT FIND FIRST ' SET ' NX"
Do i=1 by 1 while rc=0
 'ISREDIT (setline) = LINE .ZCSR'
 parse var setline slash set var.i .
 if substr(slash,1,2)='//' &,
    substr(slash,3,1)<>'*' &,
    set='SET' & index(var.i,'=')>0 then do;
  parse var var.i varc '=' valuec
  if substr(valuec,1,1)="'" then
   parse var valuec "'" valuec "'"
  interpret "_"varc"='"valuec"'"
 end;
 "ISREDIT RFIND"
End;
"ISREDIT RESET FIND"
return;

/*********************************************************************\
| Set '&vars' in dsn using '_vars' assigned above.                    |
| Ten levels of assignmets are allowed.                               |
|                                                                     |
\*********************************************************************/
setVars:
 trace 'O'
 Do 10 while index(dsn,'&')>0;
  parse var dsn beg '&' varx
  Do i = 1 to length(varx)
   If Verify(Substr(varx,i,1),delimiter_for_var) = 0 Then Leave
  End
  varc='_'substr(varx,1,i-1);
  rest=substr(varx,i);
  varc=Value(varc);
  if substr(varc,1,1)='_' then leave
  dsn = beg||varc||rest
 End;
  if substr(varc,1,1)='_' | substr(varc,1,1)='&' then
  say "*ERROR* Value for &"substr(varc,2) "not found";
return;
