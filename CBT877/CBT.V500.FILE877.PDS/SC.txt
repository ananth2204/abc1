/*REXX****************************************************************/
/*                                                                   */
/* Name: SC                                                          */
/*                                                                   */
/* Author:  V MESTOVSKI                                              */
/*                                                                   */
/* Function: SC calls SUPERC for a pair of data set names            */
/*           where the cursor is currently positioned                */
/*                                                                   */
/* Syntax:   From within an view session, enter 'SC' on the command  */
/*           line, position the cursor on a first dsname (second     */
/*           one should be on next line under the cursor)            */
/*           on the screen and press ENTER.                          */
/*********************************************************************/

trace 'o'
signal on novalue
"ISREDIT" 'MACRO (OPT1) PROCESS'
"ISPEXEC" 'CONTROL ERRORS RETURN'  /* RETURN TO MACRO IF ERROR */

If opt1 = "?" Then
Do
  Call help
  exit
End
if opt1='' then opt1=arg(1)
valid_for_dsn = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$#@()."
delimiter = ", ='"
zedsmsg = ''
zedlmsg = ''

"ISREDIT" '(LPTR,CPOS) = CURSOR'
"ISREDIT" '(DATA) = LINE .ZCSR'
"ISREDIT" '(LAST) = LINENUM .ZLAST'
"ISREDIT" '(LRECL) = LRECL'

If (lptr > last) |,
   (lptr+1 > last) |,
   (lptr < 1) |,
   (cpos > lrecl) |,
   (cpos < 1) Then
  DO
    zedsmsg = "Invalid position"
    zedlmsg = "Put cursor on the 1-st DSN"
    Signal EXIT2
  End
If Verify(Substr(data,cpos,1),valid_for_dsn) <> 0 Then
  DO
    zedsmsg = "Invalid field"
    zedlmsg = "Cursor is positioned on a field that is not valid for a",
               " data set name"
    Signal EXIT2
  End

dsn1 = embedded_string(cpos data)
msg = Sysdsn("'"dsn1"'");
If msg <> "OK" Then
  DO
    zedsmsg = msg
    zedlmsg = "Could not open data set" dsn1
    Signal EXIT2
  End

do lptr = lptr+1 to last
 "ISREDIT" '(statusx) = XSTATUS' lptr
 if statusx = 'X' then iterate; else leave;
end;
"ISREDIT" 'CURSOR =' lptr cpos
"ISREDIT" '(LPTR,CPOS) = CURSOR'
"ISREDIT" '(DATA) = LINE .ZCSR'
If Verify(Substr(data,cpos,1),valid_for_dsn) <> 0 Then
  DO
    zedsmsg = "Invalid 2nd field"
    zedlmsg = "Cursor is positioned on a field that is not valid for a",
               " data set name"
    Signal EXIT2
  End
dsn2 = embedded_string(cpos data)
msg = Sysdsn("'"dsn2"'");
If msg <> "OK" Then
  DO
    zedsmsg = msg
    zedlmsg = "Could not open data set" dsn2
    Signal EXIT2
  End
Else
  DO
  trace 'O'
    Address TSO "ALLOC FI(NEWDD) DA('"dsn1"') REUSE SHR "
    Address TSO "ALLOC FI(OLDDD) DA('"dsn2"') REUSE SHR "
    Address TSO "ALLOC FI(SYSIN) DUMMY        REUSE SHR "
    listdsn = "SUPERC.LIST"
    if SYSDSN(listdsn) = 'OK' then
    Address TSO "ALLOC FI(OUTDD) DA("listdsn") REUSE SHR"
    else
    Address TSO "ALLOC FI(OUTDD) DA("listdsn") REUSE NEW CATALOG",
                "UNIT(SYSDA) RECFM(F B A) LRECL(133) DSORG(PS) ",
                "SPACE(50,50) CYLINDERS RELEASE"

    Address ispexec "SELECT PGM(ISRSUPC) PARM(DELTAL,LINECMP)"
  trace 'O'
    if rc >1  then do;
     zedsmsg = "SUPERC failed. RC="rc
     zedlmsg = "SUPERC failed. RC="rc
     Signal EXIT
    end;
    "ISPEXEC VIEW DATASET(SUPERC.LIST)"
    if rc <> 0 then do;
     zedsmsg = "VIEW failed. RC="rc
     zedlmsg = "Could not open data set &SYSUID.SUPERC.LIST"
     Signal EXIT
    end
  End
EXIT:
    Address TSO "FREE  FI(NEWDD)"
    Address TSO "FREE  FI(OLDDD)"
    Address TSO "FREE  FI(SYSIN)"
    Address TSO "FREE  FI(OUTDD)"
EXIT2:
"ISPEXEC" 'SETMSG MSG(ISRZ001)'
"ISREDIT" 'CURSOR =' lptr cpos
exit

/****************************************************************/
/* Return a string delimited by defined delimiter               */
/* Arguments:                                                   */
/*    1. current cursor position                                */
/*    2. string that contains the embedded string               */
/****************************************************************/
embedded_string:
Parse arg position feld
Do i = cpos to 1 by -1
  If Verify(Substr(feld,i,1),delimiter) = 0 Then
  Leave
End
from_pos = i+1

Do i = cpos to lrecl
  If Verify(Substr(feld,i,1),delimiter) = 0 Then
  Leave
End
laenge = i - from_pos

return_string = substr(feld,from_pos,laenge)

if substr(return_string,1,1) = '(' &,
   substr(return_string,length(return_string),1) = ')' then
parse var return_string '(' return_string ')'

if substr(return_string,1,8) = '&SYSUID.' then
return_string = userid()||substr(return_string,9)

if opt1<>'' then
return_string = opt1||return_string

Return return_string

/****************************************************************/
/* With a little help from my friend....                        */
/****************************************************************/
Help:
  inline = '/*'
  Do i = 1 by 1 Until Substr(inline,1,2) <> '/*'
    inline = Substr(Sourceline(i),1,79)
    say inline
  End
Return
