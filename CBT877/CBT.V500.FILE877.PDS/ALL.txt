/*Rexx**************** < ISPF Edit ALL macro > ************************/
/*                                                                    */
/*                                +-WORD---------+                    */
/*>>--ALL--+-------------------+--+-CHAR---------+--+-------------+-><*/
/*         '-string-expression-'  '-PREFIX-------'  '-col1-+------'   */
/*         '-PROC-or-CALL-or-?-'  '-SUFFIX-------'         '-col2-'   */
/*                                                                    */
/* Use the ALL macro to display a specified collection of lines       */
/* for editing, while excluding others from display.                  */
/*                                                                    */
/* 1. Enter ALL on the command line, position the cursor on a word    */
/*    somewhere on the screen and press ENTER. Only lines with the    */
/*    word will be displayed.                                         */
/*    Put the cursor on a point in DCLTABLE.FIELD if you want to      */
/*    capture both words.                                             */
/* 2. To make all lines visible starting from needed line put         */
/*    the cursor on a blank of the line and run ALL.                  */
/* 3. PROC allows to display all procedure names of a PLI program.    */
/* 4. CALL allows to display all procedure names and CALL operators   */
/* 5. Use KEYS command to assign ALL to a function key.               */
/* 6. Use a string expression if you want to display lines with       */
/*    different words. Valid boolean operators are ¬,&,|,&¬,|¬.       */
/*                                                                    */
/* Examples:                     Display all lines                    */
/*           ALL ABC          -- with ABC chars                       */
/*           ALL ¬'ABC'       -- with out ABC chars                   */
/*           ALL 'ABC'&'XYZ'  -- with ABC and XYZ chars               */
/*           ALL "A'C"|"XYZ"  -- with A'C or XYZ chars                */
/*           ALL 'ABC'&¬'XYZ' -- with ABC and w/o XYZ chars           */
/*                                                                    */
/* Author: Vladimir Mestovski,v2gri033@us.ibm.com,IBA,Minsk,Belarus   */
/* Version: 1.0 ************************************June 2003**********/

trace 'o'
'ISPEXEC CONTROL ERRORS RETURN'
'ISREDIT MACRO (parms) PROCESS'
if parms = '?' then Exit (help());
'ISREDIT (user) = USER_STATE'
'ISREDIT (hrow,hcol) = CURSOR'
'ISREDIT (row,col) = CURSOR'; /* say 'row='row 'col='col */
'ISREDIT (last)    = LINENUM .ZLAST'
'ISREDIT (lrecl)   = LRECL'
'ISREDIT (recfm)   = RECFM'
'ISREDIT (nummode,numtype) = NUMBER'
'ISREDIT (col1,col2) = BOUNDS'
'ISREDIT (scan) = SCAN'
'ISREDIT SCAN OFF'
worddelimiter  = " :,;=<>'.|!%¬&*()-+{}Ý¨\/`"""

/*------------------------ M a i n l i n e ---------------------------*/

If parms = '' & row > 0 & row <= last,
              & col > 0 & col <= lrecl Then
Exit (runCsrRequest(row,col));

If parms = '' Then
Exit (runResetAll());

If translate(parms) = 'PROC' Then
Exit (runPROCrequest());

If translate(parms) = 'CALL' Then
Exit (runCALLrequest());

s = getFirstChar(parms)
if s='' then
Exit (runSimpleRequest(parms));

Exit (runFullRequest(parms));

/*--------------------------------------------------------------------*/
runResetAll:
  'ISREDIT RESET'
  Return (restoreState(0))
/*--------------------------------------------------------------------*/
runPROCrequest:
  'ISREDIT RESET'
  'ISREDIT EXCLUDE ALL'
/*"ISREDIT FIND 'PROC' ALL WORD X"*/
  'ISREDIT FIND : ALL SUFFIX X 2 25'
  "ISREDIT EXCLUDE '/*' ALL 1 3"
  Return (restoreState(rc));
/*--------------------------------------------------------------------*/
runCALLrequest:
  'ISREDIT RESET'
  'ISREDIT EXCLUDE ALL'
  'ISREDIT FIND : ALL SUFFIX X 2 25'
  "ISREDIT FIND 'CALL' ALL WORD X"
  "ISREDIT EXCLUDE '/*' ALL 1 3"
  Return (restoreState(rc));
/*--------------------------------------------------------------------*/
runSimpleRequest: parse arg parms
  if parms = '' then
  Exit (runResetAll());
  Call runFirstFind parms;
  'ISREDIT EXCLUDE ALL'
  'ISREDIT FIND ALL X' parms
  Return (restoreState(rc));
/*--------------------------------------------------------------------*/
runFirstFind: parse arg sword;
  cmdfind = 'ISREDIT FIND FIRST' sword;cmdfind;
  if rc=4  then Exit (ErrorExit("String not found",cmdfind,rc))
  if rc=12 then Exit (ErrorExit("Put string in quotes",cmdfind,rc))
  if rc>12 then Exit (ErrorExit("Inconsistent parameters",cmdfind,rc))
  Return 0
/*--------------------------------------------------------------------*/
runCsrRequest: parse arg lptr,cpos
  'ISREDIT (data) = LINE .ZCSR'
  Return (runSimpleRequest(getCsrWord(data,cpos)));
/*--------------------------------------------------------------------*/
getCsrWord: parse arg feld,cpos;
  if substr(feld,cpos,1) = '' then
  Exit (runResetAll());
  if substr(feld,cpos,1) = '.' then shift=1; else shift=0;
  Do i=cpos-shift to 1 by -1 ,
  While (Verify(Substr(feld,i,1),worddelimiter)¬=0);End;
  Do j=cpos+shift to Length(feld),
  While (Verify(Substr(feld,j,1),worddelimiter)¬=0);End;
  If i=j then
  Exit (ErrorExit('Put cursor on a word','i,j='i feld,4))
  Return ("'"substr(feld,i+1,j-i-1)"' WORD")
/*--------------------------------------------------------------------*/
runFullRequest: parse arg parms;
  Interpret,
  "Parse var parms expression "lastpos(s,parms)+1" rest"
  Parse Var expression operator (s) string (s) expression
  Do i=1 while (string¬='')
   rc=runCmds(getCmds(operator,i),s||string||s,strip(rest));
   Parse Var expression operator (s) string (s) expression
  End;
  Return (restoreState(rc));
/*--------------------------------------------------------------------*/
getCmds: parse arg opr,i
   Select;
    When opr=''  & i=1 then Return('RESET SCAN FFIND XALL XFIND UPMAX')
    When opr='¬' & i=1 then Return('RESET XALL XFIND FLIP UPMAX'      )
    When opr='|'       then Return('XFIND UPMAX'                      )
    When opr='&'       then Return('NXFIND UPMAX'                     )
    When opr='&¬'      then Return('FLIP XFIND FLIP UPMAX'            )
    When opr='|¬'      then Return('NFIND UPMAX')
    Otherwise
      Exit (ErrorExit('Invalid operator' opr,'opr='opr 'i='i,12))
   End;
   Return ('')
/*--------------------------------------------------------------------*/
runCmds: parse arg commands,string,operands
  target = string operands
  Do w = 1 to Words(commands)
   cmd = Word(commands,w)
   Select;
    When cmd = 'RESET'  then 'ISREDIT RESET'
    When cmd = 'SCAN'   then 'ISREDIT SCAN OFF'
    When cmd = 'FFIND'  then Call runFirstFind target
    When cmd = 'XALL'   then 'ISREDIT EXCLUDE ALL'
    When cmd = 'XFIND'  then 'ISREDIT FIND ALL X' target
    When cmd = 'FLIP'   then 'ISREDIT FLIP'
    When cmd = 'UPMAX'  then 'ISREDIT UP MAX'
    When cmd = 'NXFIND' then
       do r=0 while (getLine(r,'NX')=0);
        'ISREDIT FIND .ZCSR .ZCSR NX' target
         if rc=4 then 'ISREDIT FLIP .ZCSR .ZCSR'
       end
    When cmd = 'NFIND'  then
       do r=0 while (getLine(r,'X')=0);
        'ISREDIT FIND .ZCSR .ZCSR X' target
        'ISREDIT FLIP .ZCSR .ZCSR'
       end
    Otherwise NOP;
   End;
  End;
  Return rc;
/*----------- Put the cursor on first/next X or NX data line ---------*/
getLine: procedure; parse arg crow,status;
  if crow /= 0 then
  'ISREDIT (crow,cpos) = CURSOR'
  do rr = crow+1 until (xstatus=status|cc/=0)
  'ISREDIT CURSOR = 'rr '0'; cc=rc;
  'ISREDIT (xstatus) = XSTATUS .ZCSR'
  end
  Return cc
/*--------------------------------------------------------------------*/
restoreState: parse arg src
  'ISREDIT USER_STATE = (user)'
  'ISREDIT SCAN = 'scan
  Select;
   When hcol=0 then src=1
   When hrow>last then 'ISREDIT LOCATE .ZL'
   Otherwise do;
      'ISREDIT CURSOR = (hrow,hcol)'
      'ISREDIT LOCATE' hrow
   end;
  End
  Return src
/*--------------------------------------------------------------------*/
getEndColumn:
  Return('72')
/*--------------------------------------------------------------------*/
getStartColumn:
  Return('1');
/*--------------------------------------------------------------------*/
getFirstChar:
  Parse Value Space(parms,0) With s1 2 s2 3 .
  If s1 ='¬' & (s2 = '"' | s2 = "'") then Return(s2)
  If s1¬='¬' & (s1 = '"' | s1 = "'") then Return(s1)
  Return('')
/*--------------------------------------------------------------------*/
ErrorExit: parse arg zedsmsg,zedlmsg,rcode
  "ISREDIT RESET"
  "ISPEXEC SETMSG MSG(ISRZ001)"
  Return (restoreState(rcode));
/*--------------------------------------------------------------------*/
Help:
  Do i = 1 by 1 While (Substr(Sourceline(i),1,2)='/*')
   say Substr(Sourceline(i),3,67)
  End
  Return 0
/*-Debug.--Calls: rc=sayZCSRline(rc) ---------------------------------*/
sayZCSRLine: procedure; arg src;
  trace 'o';
  'ISREDIT (num) = LINENUM .ZCSR';
  'ISREDIT (row,col) = CURSOR';
  'ISREDIT (data) = LINE .ZCSR';
  'ISREDIT (xstatus) = XSTATUS .ZCSR'
  say src xstatus num col substr(data,1,50)
  Return src
