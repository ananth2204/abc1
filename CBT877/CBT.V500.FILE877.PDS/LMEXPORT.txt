/*REXX****************************************************************/
/* LMEXPORT moves  a member to OBSOLETE lib supporting $$DIR$$ mbr   */
/*  Format: LMEXPORT 'DSNfrom(MBRfrom)' TO 'DSNobsolete'             */
/*****************************************************************VM**/
trace 'O'
signal on Error
parse arg "'" DSNfrom "(" member ")'" 'TO' "'" DSNto "'" .
If DSNfrom = '' | member = '' | DSNto = ''
then do; say '*ERROR* Invalid syntax'; exit 8; end

parse var DSNfrom hlq'.'proj'.'type .
o=substr(type,1,1)
Address ISPEXEC
"CONTROL ERRORS RETURN"
say "Allocating input '"DSNfrom"' ..."
"LMINIT  DATAID(DDfrom) DATASET('"DSNfrom"') ENQ(SHR)"
say "Allocating output dataset '"DSNto"'..."
"LMINIT DATAID(DDTO)   DATASET('"DSNto"')   ENQ(SHRW)"
"LMOPEN  DATAID("DDto") OPTION(INPUT)"
say 'Finding directory member $$DIR$$ ...'
signal Off Error
"LMMFIND DATAID("DDto") MEMBER($$DIR$$)"
if rc<>0 then do;
 if rc=8 then
 do;
   signal on Error
   say '*WARNING* Member $$DIR$$ not found, will create...'
  "LMCLOSE DATAID("DDto")"
  "LMOPEN  DATAID("DDto") OPTION(OUTPUT)"
  entry1=,
'NewName  OldName              Installation task              Added'
  entry2=,
'-------- -------- ------------------------------------ -------------------'
  "LMPUT   DATAID("DDto") DATALOC(entry1) DATALEN("length(entry1)") ",
           "MODE(INVAR)"
  "LMPUT   DATAID("DDto") DATALOC(entry2) DATALEN("length(entry2)") ",
           "MODE(INVAR)"
  ZLCNORC=2; ZLUSER=userid()
  ZLCDATE=date('O'); ZLMDATE=date('O'); ZLMTIME=time();
  "LMMADD  DATAID("DDto") MEMBER($$DIR$$) STATS(YES)"
  "LMCLOSE DATAID("DDto")"
  "LMOPEN  DATAID("DDto") OPTION(INPUT)"
  "LMMFIND DATAID("DDto") MEMBER($$DIR$$)"
 end;
 else Signal Error
end;
say "Reading directory member $$DIR$$ ..."
Signal Off Error
  maxN=0
  entry.0=0
  entry=copies(' ',80)
  "LMGET DATAID("DDto") DATALOC(entry) DATALEN(entrylen)" ,
           "MODE(INVAR) MAXLEN(5000)"
do i=1 by 1 while rc=0
  entry.i=entry; entry.0=i
  parse var entry iNewName .
  parse var iNewName io 2 innnnnnn .
  if io=o & datatype(innnnnnn,'W')
   then maxN=max(maxN,innnnnnn)
  entry=copies(' ',80)
  "LMGET DATAID("DDto") DATALOC(entry) DATALEN(entrylen)" ,
           "MODE(INVAR) MAXLEN(5000)"
end;
if rc<>8 then Signal Error

Signal On Error
nNewName=o||right(maxN+1,7,'0')
say "New member name will be" nNewName"..."
i=entry.0+1; entry.0=i;
"ISPEXEC VGET (TASK)"
if TASK='' then TASK='Installation TASK not defined'
entry.i=nNewName left(member,8) left(TASK,36),
        date('S') time()
"LMCLOSE DATAID("DDto")"

say 'Moving member' member 'as ' nNewName '...'
"LMMOVE FROMID("DDFROM") FROMMEM("member") ",
             "TODATAID("DDTO"  )   TOMEM("nNewName")"

"LMOPEN  DATAID("DDto") OPTION(OUTPUT)"

say "Updating member $$DIR$$ ..."
do i=1 to entry.0
  entry=entry.i
  "LMPUT   DATAID("DDto") DATALOC(entry) DATALEN("length(entry)") ",
           "MODE(INVAR)"
end;
ZLCNORC=entry.0; ZLUSER=userid()
  ZLCDATE=date('O'); ZLMDATE=date('O'); ZLMTIME=time();
"LMMREP  DATAID("DDto") MEMBER($$DIR$$) STATS(YES)"

"LMCLOSE DATAID("DDto")"
"LMFREE  DATAID("DDto")"
Exit 0;

Error:
 say '*ERROR*' strip(ZERRLM)
 "LMCLOSE DATAID("DDto")"
 "LMFREE DATAID("DDto")"
 Exit 12
