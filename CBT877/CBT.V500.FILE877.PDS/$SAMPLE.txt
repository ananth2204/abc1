************************************************************************
* Sample of a MAKE file.
******************************************Vladimir Mestovski 2012*******
*
* MAKE file is input for MAKE tool that executes actions from the file.
* MAKE tool is started by entering the MAKESUB command in the command
* line when you opened the file in View or Edit mode. The command
* saves the current state of the file into a temporary file and submits
* a MAKESUB job (MAKEnnn) to interpret and execute actions within it
* (hidden from view lines by X/XX prefix commands are bypassed).
*
* MAKE file looks like a collection of different control cards
* for different environments/applications joined together in one place,
* no need to create special JCLs for each of them to execute.
* The first word of make statements indicates the need application
* to which statements are designed, i.e.
*       REXX,TSO,QMF,DSN,JCL,SPUFI(DSNTEP2/4),SQL(BSPUFI)
*
* Before running of the MAKESUB command use the MAKESCAN command first
* to find missing continuation signs(+) in the file.
* Use HILITE REXX to color the file to see if a quote is missing.
*
* Since a MAKE file has full data set names it is convenient to use
* V(view),E(edit),B(browse) macros inside it.
* Use also SC(SuperC) macro to compare two data sets/members and
* VDIR macro when you inside of a $DIR$ member to view a member.
* ALL is a macro that shows all lines with a word pointed by the cursor
* and hides others.
*
* Use KEYS in the command line to assign your F-keys, like this:
*
*'F1=SC   F2=ALL     F4=V       F5=Rfind    F9=E/VDIR' <-- Shift+F9
*
*               *** I N S T A L L A T I O N ***
* Before the first use of the tool you should adjust MAKEINI member
* to specify values for variables. The member contains jcl for MAKEnnn
* job, adjust it as well.
* To acivate the MAKE tool copy all members to a library allocated
* as SYSPROC in your ISPF session or concantenate new library with the
* tool in LOGON.CLIST or as LOGON Command:
*       CONCATD FI(SYSPROC) DA('your.lib.REXX') BEFORE SHR
* If you do not have the SLEEP command in your STEPLIB library you can
* add the command with SLEEP member, compile job.
* Note. The file contains PDS with RECFM=F to satisfy XMIT manager.
*       Although most likely you have other libraries in SYSPROC
*       with RECFM=V. In this case you should recreate the tool library
*       with RECFM=V.
************************************************************************
*
*                         'REXX commands'
*                          -------------
*
************************************************************************

* '1. LMCOPY -- Copy Members of a Data Set'
* +-------------+------------------------------------------------------
* | REXX LMCOPY | 'DSNfrom(MEMBERfrom)' +
* |             | 'DSNto(MEMBERto)'     ÝREPLACE|BACKUP¨
* +-------------+------------------------------------------------------
* where BACKUP moves MEMBERto to the 'DSNto.OBSOLETE' library first
* (if exists) using LMEXPORT command (see below)

REXX LMCOPY 'MDCT.HOLD.VM.USERPROC(CPE240)' +
            'MDCT.TEST.USERPROC(CPE240)'    REPLACE

* '2. LMMOVE -- Move Members of a Data Set'
* +-------------+------------------------------------------------------
* | REXX LMCOPY | 'DSNfrom(MEMBERfrom)' +
* |             | 'DSNto(MEMBERto)' ÝREPLACE¨
* +-------------+------------------------------------------------------
* Once the data has been moved, the MEMBERfrom is deteted.

REXX LMMOVE 'MDCT.HOLD.VM.USERPROC(CPE240)' +
            'MDCT.TEST.USERPROC(CPE240)'    REPLACE

* '3. LMMREN -- Rename a Data Set Member'
* +-------------+------------------------------------------------------
* | REXX LMMREN | 'DSNfrom(MEMBERfrom)' NEWNAME(MBRto)
* |             |
* +-------------+------------------------------------------------------

REXX LMMREN 'MDCT.HOLD.VM.USERPROC(CPE240)' NEWNAME(XXX240)

* '4. LMMDEL -- Delete a Member from a Data Set'
* +-------------+------------------------------------------------------
* | REXX LMMDEL | 'DSNfrom(MEMBERfrom)'
* |             |
* +-------------+------------------------------------------------------

REXX LMMDEL 'MDCT.HOLD.VM.USERPROC(XXX240)'

* '5. LMEXPORT -- Export a Data Set Member'
* +---------------+----------------------------------------------------
* | REXX LMEXPORT | 'DSNfrom(MBRfrom)' TO 'DSNobsolete'
* |               |
* +---------------+----------------------------------------------------
* Move the MBRfrom to DSNobsolete with new generated member name
* like Mnnnnnnn. New and old member names are stored into the $$DIR$$
* member created automatically if not exists.

REXX   LMEXPORT 'MDCT.TEST.SORTCARD(CPE240U1)' +
          TO    'MDCT.TEST.SORTCARD.OBSOLETE'

* '6. LMIMPORT -- Import a Data Set Member'
* +---------------+----------------------------------------------------
* | REXX LMIMPORT | 'DSNto(MBRto)' FROM 'DSNobsolete' ÝREPLACE¨
* |               |
* +---------------+----------------------------------------------------
* Restore the latest MBRto member exported by LMEXPORT.

REXX   LMIMPORT 'MDCT.TEST.USERPROC(CPE240)'   +
          FROM  'MDCT.TEST.USERPROC.OBSOLETE'  REPLACE

* '7. LMMSTATS -- Change ISPF statistic of a Data Set Member'
* +---------------+----------------------------------------------------
* | REXX LMMSTATS | 'DSN(MBR)' USER(id) CREATED(yy/mm/dd)
* |               | MODDATE(yy/mm/dd) MODTIME(hh:mm)
* +---------------+----------------------------------------------------
* Restore the latest MBRto member exported by LMEXPORT.

REXX   LMMSTATS 'MDCT.PROD.C(A1)' USER(V2IBAVM) +
                CREATED(11/05/26) MODDATE(11/06/20) MODTIME(07:37)

* '8. LMCLONE  -- Clone a Data Set Member'
* +---------------+----------------------------------------------------
* | REXX LMCLONE  | 'DSNfrom(MBRfrom)' 'DSNto(MBRto)' ÝREPLACE¨
* |               |
* +---------------+----------------------------------------------------
* Copy MBRfrom to MBRto then Edit MBRto using commands in CLONEMBR

SET CLONEMBR='MDCT.HOLD.VM.CLONE(TMDFP)'
*                                  +--->  C  <HLQ> MDFP
REXX LMCLONE 'MDCT.TOOLS.CNTL(QMFEXPRT)' +
             'MDCT.TEMP.SORTCARD(QMFEXPRT)' REPLACE

* '9. LMEDIT   -- Edit a Data Set Member'
* +---------------+----------------------------------------------------
* | REXX LMCLONE  | 'DSN(MBR)'
* |               |
* +---------------+----------------------------------------------------
* Edit MBR with commands from CLONEMBR member

SET CLONEMBR='MDCT.HOLD.VM.CLONE(TMDFP)'
REXX LMCLONE 'MDCT.TEMP.SORTCARD(QMFEXPRT)'

* '10. WSUBMIT  -- SUBMIT a job and wait for its end'
* +---------------+----------------------------------------------------
* | REXX WSUBMIT  | 'DSN' ÝMAXWAIT=nn¨
* |               |
* +---------------+----------------------------------------------------
* nn - number of seconds of TOTAL time (not CPU). Default is 3600 secs.
* The command needs SLEEP command available as a TSO command.

REXX WSUBMIT 'MDCT.TEMP.SORTCARD(QMFEXPRT)' MAXWAIT=90000

* '11. QEXPORT  -- Export a QMF object using $$DIR$$ member of DSNto'
* +---------------+----------------------------------------------------
* |               | QUERY
* | REXX QEXPORT  | PROC    QMFname  TO 'DSNto' Ý(ERASE¨
* |               | FORM
* +---------------+----------------------------------------------------
* Name of member in DSNto is generated and placed into $$DIR$$ member
* together with QMFname. ERASE deletes the object in QMF.

SET SSID=DB2A
REXX    QEXPORT QUERY MDCT.AUDIT_UPDATE_Q +
                   TO 'MDCT.TEST.QMFLIB'

* '12. QIMPORT  -- Import a QMF object using $$DIR$$ member of DSNto'
* +---------------+----------------------------------------------------
* |               | QUERY
* | REXX QIMPORT  | PROC    QMFname  FROM 'DSNfrom'
* |               | FORM
* +---------------+----------------------------------------------------
* Import the latest member with QMFname in the $$DIR$$ member

SET SSID=DB2E
REXX    QIMPORT QUERY MDCT.AUDIT_UPDATE_Q +
                 FROM 'MDCT.TEST.QMFLIB'

************************************************************************
*
*                      'DSN/DB2 commands'
*                      -----------------
*
************************************************************************
SET SSID=DB2A
DSN -TERM UTILITY ('CPE127') -- no authority
DSN -DIS DB(TR57VDB1) SPACENAM(T57VT105) LIMIT(*)
DSN -STOP  DATABASE(TR57VDB1) SPACE(T57VT105)
DSN -START DATABASE(TR57VDB1) SPACE(T57VT105) ACCESS(RW)
DSN -DIS DB(TR57VDB1) SPACENAM(T57VT105) LIMIT(*)
SET SSID=DB2E
DSN FREE PLAN (BSPUFIV);
DSN BIND PACKAGE (BYDB2LABE.BSPUFIV) +
DSN      MEMBER(BSPUFI) DBPROTOCOL(DRDA) +
DSN      ACTION(REPLACE) ISOLATION(UR) CURRENTDATA(NO) +
DSN      LIB(MDCT.PROD.DBRMLIB)
DSN BIND PACKAGE (BYDB2LAB.BSPUFIV) +
DSN      MEMBER(BSPUFI) DBPROTOCOL(DRDA) +
DSN      ACTION(REPLACE) ISOLATION(UR) CURRENTDATA(NO) +
DSN      LIB(MDCT.PROD.DBRMLIB)
DSN BIND PLAN(BSPUFIV) +
DSN      PKLIST(BYDB2LABE.BSPUFIV.BSPUFI,BYDB2LAB.BSPUFIV.BSPUFI) +
DSN      ACT(REP) ISOLATION(UR) RETAIN  CURRENTDATA(NO) SQLRULES(DB2)
************************************************************************
*
*                    'Run SPUFI (DSNTEP2/4)'
*                     ---------------------
*
************************************************************************
SET SSID=DB2E
SPUFI SET CURRENT SQLID='MDCT';
SPUFI DROP ALIAS MDCT.CPEIN_EXP_LOTS222;
SPUFI CREATE ALIAS MDCT.CPEIN_EXP_LOTS222 FOR CPEIN.EXP_LOTS;
SET SSID=DB2A
SPUFI SET CURRENT SQLID='MDQ1T';
SPUFI GRANT SELECT ON TABLE Q1TIN.UGR_RULES TO TOMU;
*
SPUFI SELECT RULE_TYPE, ACTIVE_IND, INT1 AS VERSION_ID
SPUFI   FROM CPEIN.TOM_RULES
SPUFI  WHERE RULE_TYPE='COPYHQ1T';
************************************************************************
*
*                       'Run SQL (BSPUFI) -- CBT484.FILE866'
*                        ----------------
*
************************************************************************
SET SSID=DB2E
SQL SET CURRENT SQLID='MDCT';
SQL WRITE CSV FILE 'MDCT.TEMP.CPEIN.RULES.CSV'
SQL  SELECT * FROM CPEIN.TOM_RULES
SQL   WHERE RULE_TYPE='COPYHQ1T';
* and so on ... see CBT484.FILE866
************************************************************************
*
*                      'Run TSO commands'
*                      -----------------
*
************************************************************************
TSO DEFINE GDG (NAME('MDCT.TEMP.GDGTEST') LIM(7) SCRATCH)
TSO DELETE 'MDCT.TEMP.GDGTEST' GDG FORCE
* TSO0 ignores RC<>0
TSO0 DELETE 'MDCT.HOLD.VM.TEMP2'
TSO ALLOCATE DSNAME('MDCT.HOLD.VM.TEMP2') +
             NEW DSORG(PS) RECFM(F,B) LRECL(94) +
             SPACE(100,100) CYLINDERS RELEASE +
             UNIT(SYSDA) MAXVOL(15) CATALOG
* Run OCOPY
TSO ALLOC FI(I) DA('MDCT.HOLD.VM.DRIVER(Q2DRIVER)') SHR REUSE
TSO ALLOC FI(O) DA('MDCP.TTR029.DRIVER') SHR REUSE
TSO OCOPY INDD(I) OUTDD(O)
* Run a program with SQL
TSO ALLOCATE FI(ENDMON)  DSN('MDCT.JXRPE245.UNLOAD') OLD RELEASE REUSE
TSO ALLOCATE FI(SENDMSG) DSN('MDCT.RPE47.SENDMSG')   SHR REUSE
TSO ALLOCATE FI(SUMMARY) SYSOUT(H) REUSE LRECL(133) RECFM(F,B,A)
TSO ALLOCATE FI(CONTROL) SYSOUT(H) REUSE LRECL(133) RECFM(F,B,A)
SET SSID=DB2E
DSN RUN  PROGRAM(RPE47) PLAN(RPE47) LIB('MDCT.PROD.LOADLIB')
* REXEC to AIX
TSO ALLOC FI(NETRC) DA('MDCP.PROD.PASSWORD(TIMIGSP)') REUSE SHR
TSO REXEC pokxpr1p7.pok.ibm.com +
cp /u1/tomq2/hold/TTR110A.Q2.CAP.conf +
   /u1/tomq2/conf/TIM/TTR110A.Q2.CAP.conf +
;+
cp /u1/tomq2/hold/TTR110.Q2.CAP.conf +
   /u1/tomq2/conf/TIM/TTR110.Q2.CAP.conf
* Submit a job. No wait its end.
TSO SUBMIT 'MDCT.TEST.CNTL(IEFBR14)'
* Send DONE note
TSO XMIT IBMUS.V2GRI033 MSGFILE(DONE)
* Send a message to an MVS user
TSO SEND '*** $SAMPLE COMPLETED ***' USER(V2IBAVM)
* Run FTP
TSO ALLOC FI(NETRC) DA('MDCV.PROD.PASSWORD(TOMLIB)') SHR REUSE
STACK btvlabe.btv.ibm.com
STACK quote site filetype=jes
STACK get 'MDCT.HOLD.VM.CNTL(IEFBR14)'  XXX (REPLACE
STACK QUIT
TSO FTP
* and so on...
************************************************************************
*'RUN A JCL. If //JOB missed then //userid()||X JOB is added'
************************************************************************
************************************************************************
*
*                            'Run JCL'
*                             --------
*
************************************************************************
* If the job fails, MAXRC=12 allows to continue make file
SET MAXRC=12
//TTR087Z  JOB ($29HKZA,BIN333,EFK334,DEPTHKZA),'BOB',
// TIME=(5),MSGLEVEL=(1,1),MSGCLASS=H,NOTIFY=&SYSUID,REGION=4M
//*
//RUN    EXEC PGM=IKJEFT01,DYNAMNBR=50
//SYSTSIN   DD *
  DSN SYSTEM(DB2E)
  RUN  PROGRAM(TTR087Z) PLAN(TTR087Z) +
       LIB('MDCT.PROD.LOADLIB') +
       PARMS('VERSIONS=7,POS=1,DELAY=1 + ...')
//FLATFILE  DD  DSN=MDCT.HA.FLATFILE.TTR087Z,DISP=SHR
//SYSTSPRT  DD SYSOUT=*
//SYSPRINT  DD SYSOUT=*
//ABEND  EXEC PGM=JTERM,COND=(4,GE,RUN)
//* The next '// ' must exist to find the end of this jcl
//
* Reset MAXRC
SET MAXRC=4
* next SET is for JCL w/o JOB card
SET JCLLIB=MDCT.PROD.USERPROC
* Run IEBGENER ...
//COPY00   EXEC PGM=IEBGENER
//SYSPRINT DD SYSOUT=*
//SYSUT1   DD DSN=MDCP.TTR029.DRIVER,DISP=SHR
//SYSUT2   DD DSN=MDCP.TTR029.DRIVER.BACKUP(+1),
//         DISP=(NEW,CATLG,DELETE),
//         LIKE=MDCP.TTR029.DRIVER
//SYSIN DD DUMMY
//
************************************************************************
*
*                        'Run QMF'
*                        ---------
*
************************************************************************
SET SSID=DB2E
QMF    DI TABLE BYDB2LAB.CPEINT.IO_BOMTREE
QMF    SAVE DATA AS CPEIN.IO_BOMTREE             (CONFIRM=NO
SET SSID=DB2A
QMF    DI TABLE CPEIN.TOM_RULES
QMF    EXPORT DATA TO TOMRULES (C=N
SET SSID=DB2E
QMF    IMPORT DATA FROM TOMRULES
QMF    SAVE   DATA AS   CPEIN.TOM_RULES (CONFIRM=NO
* Runnig test cases in QMF ....
QMF ERASE TABLE T (CONFIRM=NO
QMF IMPORT QUERY FROM 'MDCT.HOLD.VM.MAKETEST(C209Q0)'
QMF PRINT QUERY         (PAGENO=NO DATETIME=NO WIDTH=132 LENGTH=CONT
QMF RUN QUERY
QMF SAVE DATA AS T (CONFIRM=NO
*
QMF SET GLOBAL (STAGE_PN='''0000046D6047'''
#INCLUDE QMF 'MDCT.HOLD.VM.MAKETEST(C209T1)'
*
QMF SET GLOBAL (STAGE_PN='''0000070P5710'''
#INCLUDE QMF 'MDCT.HOLD.VM.MAKETEST(C209T1)'
* and so on, any QMF commands
************************************************************************
*'#INCLUDE external MAKE files:'
************************************************************************
*#INCLUDE QMF      'MDCT.HOLD.VM.MAKETEST(QMF1)'
*#INCLUDE DSN      'MDCT.HOLD.VM.MAKETEST(DSN1)'
*#INCLUDE SPUFI    'MDCT.HOLD.VM.MAKETEST(SPUFI1)'
*#INCLUDE MAKE     'MDCT.HOLD.VM.MAKETEST(MAKE1)'
*#INCLUDE MAKEFILE 'MDCT.HOLD.VM.MAKETEST(MAKE2)'

* Hidden #INCLUDE in jcl... can be used as test automation tool
* MAKE tool splits job to several ones to run make file between them.
//*#INCLUDE MAKEFILE 'MDCT.HOLD.VM.MAKETEST(SLPFT32)'
*
************************************************************************
*'Stop processing'
************************************************************************
EXIT
************************************************************************
*'Make commands to collect this tool'
************************************************************************
TSO0 DELETE 'V2IBAVM.CBT484.FILE9NN.XMI'
TSO0 DELETE 'V2IBAVM.TEMP.REXX'
TSO ALLOCATE DSNAME('V2IBAVM.TEMP.REXX') +
             NEW DSORG(PO) DIR(10) RECFM(F,B) LRECL(80) +
             SPACE(1,1) CYLINDERS RELEASE +
             UNIT(SYSDA) CATALOG
TSO ALLOCATE DSNAME('V2IBAVM.CBT484.FILE9NN.XMI') +
             NEW DSORG(PS) RECFM(F,B) LRECL(80) +
             SPACE(1,1) CYLINDERS RELEASE +
             UNIT(SYSDA) CATALOG
REXX LMCOPY 'MDCT.HOLD.VM.REXX($SAMPLE)'  'V2IBAVM.TEMP.REXX($SAMPLE)'
REXX LMCOPY 'MDCT.HOLD.VM.REXX(LMCOPY)'   'V2IBAVM.TEMP.REXX(LMCOPY)'
* * *
REXX LMCOPY 'MDCT.HOLD.VM.REXX(VDIR)'     'V2IBAVM.TEMP.REXX(VDIR)'
REXX LMCOPY 'MDCT.PROD.COMPILE(ASLEEP2)'  'V2IBAVM.TEMP.REXX(SLEEP)'

TSO XMIT X.X DA('V2IBAVM.TEMP.REXX') +
          OUTDA('V2IBAVM.CBT484.FILE9NN.XMI')

TSO XMIT IBMUS.V2GRI033 DA('V2IBAVM.CBT484.FILE9NN.XMI') NOLOG
EXIT
