/*REXX*****************************************************************/
/*                                                                    */
/* MAKE -- run commands from DD:MAKEFILE                              */
/*                                                                    */
/********************************************Vladimir Mestovski 2012***/
trace 'O'
Signal On Error
Signal On Syntax
arg ssid scan .
Address ISPEXEC "CONTROL ERRORS RETURN"

"MAKEINI"
Address ISPEXEC "VGET (mkSSID mkJCLLIB mkSQL mkSPUFI)";
TASK=''; sqlid=Userid(); maxrc=4; JCLLIB=mkJCLLIB; JOB='';
CLONEMBR=''; CLONETYP='';
if ssid='' then ssid=mkSSID;
Address ISPEXEC "VPUT (ssid TASK sqlid maxrc JCLLIB JOB ",
                      "CLONEMBR CLONEMBR)"
Call ReadCmdFile;

Call CheckSyntax;
if scan='YES' then do;
   say '*** MAKE completed SCAN successfully'
   Exit 0;
end;

eof=0
curi=1
Call GetCmdGroup
Do while eof=0
  Select;
   When cmd = 'SET'      then Call cmdSET
   When cmd = 'TSO'      then Call cmdTSO
   When cmd = 'TSO0'     then Call cmdTSO0
   When cmd = 'QMF'      then Call cmdQMF
   When cmd = 'REXX'     then Call cmdREXX
   When cmd = 'DSN'      then Call cmdDSN
   When cmd = 'FTP'      then Call cmdFTP
   When cmd = 'SPUFI'    then Call cmdSPUFI
   When cmd = 'SQL'      then Call cmdSQL
   When cmd = 'STACK'    then Call cmdSTACK
   When cmd = '#INCLUDE' then Call cmdINCLUDE
   When cmd = '//'       then Call cmdJCL
   When cmd = '#'        then Call cmdComment
   When cmd = 'EXIT'     then Leave
   Otherwise
     say
     say '*ERROR*' cmdgroup.1
     say '*ERROR*' "'"cmd"'" 'is unknown'
     Signal Error
  End
  Call GetCmdGroup
End

  Address TSO "END"
  Address MVS "DELSTACK"
  say '*** MAKE completed'
  zispfrc = 0
  'ISPEXEC VPUT (zispfrc)'

exit 0
/*-------------------------------------------------------------*/
CheckSyntax:
 Do s=1 to cmdarray.0
  if substr(cmdarray.s,1,1) = '#'
  then Parse Var cmdarray.s . tline
  else Parse Var cmdarray.s tline
  if scan='YES' then say right(s,4,'0') tline
  parse var cmdarray.s cmd .
  if cmd <> 'SET'      &,
     cmd <> 'TSO'      &,
     cmd <> 'TSO0'     &,
     cmd <> 'QMF'      &,
     cmd <> 'FTP'      &,
     cmd <> 'REXX'     &,
     cmd <> 'DSN'      &,
     cmd <> 'SPUFI'    &,
     cmd <> 'SQL'      &,
     cmd <> 'STACK'    &,
     cmd <> '#INCLUDE' &,
     cmd <> 'EXIT'     &,
     cmd <> '#'        &,
     cmd <> '//'      then do;
   if scan<>'YES' then
   do z=1 to s;
    if substr(cmdarray.z,1,1) = '#'
    then Parse Var cmdarray.z . tline
    else Parse Var cmdarray.z tline
    say right(z,4,'0') tline
   end
   say
   say '*ERROR*' "'"cmd"'" 'is unknown',
  '(not in SET,TSO,TSO0,QMF,REXX,DSN,SPUFI,#INCLUDE,STACK,//,EXIT,FTP)'
   Signal Error
  end;
 end;
 return

/*-------------------------------------------------------------*/
GetCmdGroup:
 if curi > cmdarray.0 then do; eof=1; return; end
 c=1;
 cmdgroup.=;
 cmdgroup.1 = cmdarray.curi
 parse var cmdarray.curi cmd .
 Do curi=curi+1 to cmdarray.0
  parse var cmdarray.curi cmd2 .
  if cmd<>cmd2 then leave
  if cmd='#INCLUDE' then leave
  c=c+1; cmdgroup.c = cmdarray.curi;
 End
 cmdgroup.0=c
 return

/*-------------------------------------------------------------*/
ReadCmdFile:
 'EXECIO * DISKR MAKEFILE (STEM cmdfile1. FINIS'
 if rc<> 0 then signal Error
 k=0;
 includes = 1;
 Do while includes > 0
 includes = 0;
 do i=1 to cmdfile1.0
  if word(cmdfile1.i,1)='#INCLUDE' | word(cmdfile1.i,1)='//*#INCLUDE'
  then do;
    if word(cmdfile1.i,1)='//*#INCLUDE' then do;
     k=k+1; cmdfile.k='//';
     k=k+1;
     cmdfile.k = '#INCLUDE' word(cmdfile1.i,2) word(cmdfile1.i,3)
     includes = 1;
     iterate;
    end
    includes = 1;
    parse var cmdfile1.i . env dsn .
   'ALLOC FI(MAKEINCL) DA('dsn') REUSE SHR'
    if rc<> 0 then signal Error
   'EXECIO * DISKR MAKEINCL (STEM include. FINIS'
    if rc<> 0 then signal Error
    lastword = ' ';
    do in=1 to include.0;
     if strip(include.in)='' then iterate
      k=k+1;
      if word(include.in,1)=env | env='MAKE' | env='MAKEFILE'
      then cmdfile.k=strip(include.in)
      else if env<>'SPUFI' & env<>'SQL' &,
              (lastword = '+' | lastword = '-')
           then cmdfile.k=strip(include.in)
           else  cmdfile.k=env strip(include.in)
      lastword = word(include.in,words(include.in));
    end
  end;
  else do;
    k=k+1
    cmdfile.k=cmdfile1.i
  end
 end
 cmdfile.0=k
 do i=1 to k; cmdfile1.i = cmdfile.i; end; cmdfile1.0=k; k=0;
 End
 k=0; cmdarray.=; cmdarray.0=0;
 do i=1 to cmdfile.0
  cmd = ''
  if substr(cmdfile.i,1,2)='//' then
   do i=i to cmdfile.0
     cmd ='// 'substr(cmdfile.i,1,72)
     k=k+1; cmdarray.k=cmd; cmdarray.0=k;
     if cmd = '// //' then leave
   end
  if i>cmdfile.0 then iterate
  if cmd = '// //' then iterate
  if substr(cmdfile.i,1,1)='*' then iterate
  if substr(cmdfile.i,1,1)='#' then cmdfile.i='# 'cmdfile.i
  cmd=strip(cmdfile.i)
  cmdlen=length(cmd)
  if cmdlen=0 then iterate
  cmdcont=substr(cmd,cmdlen,1)
  if cmdcont='+' then
  do i=i+1 to cmdfile.0
   parse var cmd cmd '+'
   if substr(cmdfile.i,1,1)='*' then iterate
   cmd2=strip(cmdfile.i)
   if cmdlen=0 then leave
   cmd=cmd||cmd2
   cmdlen=length(cmd)
   cmdcont=substr(cmd,cmdlen,1)
   if cmdcont<>'+' then leave
  end;
  k=k+1; cmdarray.k=cmd; cmdarray.0=k;
 end;
 if cmdarray.0=0 then do;
   say '*ERROR* Make file does not have any command to execute'
   Signal Error
 end
 return

/*-------------------------------------------------------------*/
cmdTSO0:
 Signal Off Error
 do i=1 to cmdgroup.0
 say ''
 say date('S') time() copies('-',50)
 say ''
   say cmdgroup.i
   parse var cmdgroup.i . curcmd
   address TSO curcmd
 end
 return
/*-------------------------------------------------------------*/
cmdREXX:
cmdTSO:
 if maxrc<>0 then Signal Off Error
 do i=1 to cmdgroup.0
 say ''
 say date('S') time() copies('-',50)
 say ''
   say cmdgroup.i
   parse var cmdgroup.i . curcmd
   address TSO curcmd
   if rc<> 0 then say '*** RC = 'rc
   if rc<0 | rc>maxrc then Signal Error
 end
 return
/*-------------------------------------------------------------*/
cmdSTACK:
 Address MVS "DELSTACK"
 do i=1 to cmdgroup.0
   parse var cmdgroup.i . 7 curcmd
   say cmdgroup.i
   QUEUE curcmd
 end
 return
/*-------------------------------------------------------------*/
cmdSPUFI:
 say ''
 say date('S') time() copies('-',50)
 say ''
 say "DSN SYSTEM ("ssid")"
 if maxrc<>0 then Signal Off Error
 do i=1 to cmdgroup.0
  say cmdgroup.i
  parse var cmdgroup.i . curcmd
  if curcmd='' then curcmd=' ';
  Queue curcmd
 end
 Queue "END"
 Queue ""
 Address MVS "EXECIO * DISKW SYSIN (FINIS)"
 Queue "RUN" mkSPUFI "PARMS('ALIGN(LHS)')"
 Address TSO "DSN SYSTEM ("ssid")"
 if rc<> 0 then say '*** RC = 'rc
 if rc<0 | rc>maxrc then Signal Error
 Address MVS "DELSTACK"
return
/*-------------------------------------------------------------*/
cmdSQL:
 say ''
 say date('S') time() copies('-',50)
 say ''
 say "DSN SYSTEM ("ssid")"
 if maxrc<>0 then Signal Off Error
 do i=1 to cmdgroup.0
  say cmdgroup.i
  parse var cmdgroup.i . curcmd
  if curcmd='' then curcmd=' ';
  Queue curcmd
 end
/* Queue "END" */
 Queue ""
 Address MVS "EXECIO * DISKW INSQL (FINIS)"
 Queue "RUN" mkSQL
 Address TSO "DSN SYSTEM ("ssid")"
 if rc<> 0 then say '*** RC = 'rc
 if rc<0 | rc>maxrc then Signal Error
 Address MVS "DELSTACK"
return
/*-------------------------------------------------------------*/
cmdComment:
 say ''
 do i=1 to cmdgroup.0
  parse var cmdgroup.i . curcmd
  say curcmd
 end
 return
/*-------------------------------------------------------------*/
cmdSET:
 say ''
 say date('S') time() copies('-',50)
 say ''
 do i=1 to cmdgroup.0
   say cmdgroup.i
   parse var cmdgroup.i . curcmd
   parse var curcmd label'='val
   if label = ''  then do;
    say '*ERROR* Invalid syntax'
    signal error
   end
   Interpret curcmd;
   'ISPEXEC VPUT ('label')'
 end
 return
/*-------------------------------------------------------------*/
cmdINCLUDE:
 say ''
 say date('S') time() copies('-',50)
 say ''
   say cmdgroup.1
   parse var cmdgroup.1 . env dsn .
   'ALLOC FI(MAKEINCL) DA('dsn') REUSE SHR'
    if rc<> 0 then signal Error
   'EXECIO * DISKR MAKEINCL (STEM cmdgroup. FINIS'
    if rc<> 0 then signal Error
    do i=1 to cmdgroup.0
     cmdgroup.i=env cmdgroup.i
    end;
  Select;
   When env = 'QMF'     then Call cmdQMF
   When env = 'SPUFI'   then Call cmdSPUFI
   When env = 'SQL'     then Call cmdSQL
   When env = 'DSN'     then Call cmdDSN
   Otherwise
     say
     say '*ERROR*' cmdgroup.1
     say '*ERROR*' "'"env"'" 'is unknown, not in QMF,SPUFI,DSN,SQL'
     Signal Error
  End
 return
/*-------------------------------------------------------------*/
cmdDSN:
 say ''
 say date('S') time() copies('-',50)
 say ''
 parse var cmdgroup.1 w1 w2 '(' w3 ')' .
 if w1='DSN'& w2='SYSTEM'
  then do; tsocmd = cmdgroup.1;            starti=2;end
  else do; tsocmd = "DSN SYSTEM ("ssid")"; starti=1; end
 say tsocmd
 if maxrc<>0 then Signal Off Error
 do i=starti to cmdgroup.0
  say cmdgroup.i
  parse var cmdgroup.i . curcmd
  Queue curcmd
 end
 Queue "END"
 Queue ""
 Address TSO tsocmd
 if rc<> 0 then say '*** RC = 'rc
 if rc<0 | rc>maxrc then Signal Error
 Address MVS "DELSTACK"
return
/*-------------------------------------------------------------*/
cmdFTP:
 say ''
 say date('S') time() copies('-',50)
 say ''
 if maxrc<>0 then Signal Off Error
 do i=2 to cmdgroup.0
  say cmdgroup.i
  parse var cmdgroup.i . curcmd
  Queue curcmd
 end
 Queue "QUIT"
 Queue ""
 Address TSO cmdgroup.1
 if rc<> 0 then say '*** RC = 'rc
 if rc<0 | rc>maxrc then Signal Error
 Address MVS "DELSTACK"
return
/*-------------------------------------------------------------*/
/*-------------------------------------------------------------*/
cmdJCL:
 say ''
 say date('S') time() copies('-',50)
 say ''
 jobi = 0; jcl.=''; jcl.0=0;
 do i=1 to cmdgroup.0
  parse var cmdgroup.i . curcmd
  if i=1 & word(curcmd,2) <> 'JOB' then
  do;
    if JOB = '' then jobname = userid()'X'; else jobname = JOB;
    JOB = '';
    do j=1 to 3
      Address "ISPEXEC" 'VGET (mkJCL'j')';
      jcl.j=value('mkJCL'j)
      x=SetVar('_mkJOB',jobname)
      x=SetVar('_mkJCLLIB',JCLLIB)
      x=SetVar('_sysuid',userid())
  say jcl.j
    end;
    jcl.0=3;
  end;
  jobi=jcl.0+1; jcl.jobi=curcmd; say curcmd;  jcl.0=jobi;
 end
 tempjcl = 'TEMP.JCL'
 Signal Off Error
 x=outtrap('o.')
 'DELETE 'tempjcl
 x=outtrap('OFF')
 Signal On  Error
 Address TSO "ALLOC FI(TEMPJCL) DA("tempjcl") REUSE NEW CATALOG",
             "UNIT(SYSDA) RECFM(F B) LRECL(80) DSORG(PS) ",
             "SPACE(5,5) CYLINDERS RELEASE"
 "EXECIO * DISKW TEMPJCL (stem jcl. FINIS"
 if maxrc<>0 then Signal Off Error
 'WSUBMIT' tempjcl
 if rc<> 0 then say '*** RC = 'rc
 if rc<0 | rc>maxrc then Signal Error
 x=outtrap('o.')
 'DELETE 'tempjcl
 x=outtrap('OFF')
return

SetVar: parse arg what,towhat
  p=index(jcl.j,what);
  if p>0 then
  jcl.j=substr(jcl.j,1,p-1)||towhat||substr(jcl.j,p+length(what))
  return 0;
/*-------------------------------------------------------------*/
cmdQMF:
 Signal Off Error
 say ''
 say date('S') time() copies('-',50)
 say ''
 say 'QMF START (S='ssid 'DSQSCMD=DSQSCMDE DSQSMODE=BATCH'
 CALL DSQCIX 'START (S='ssid 'DSQSCMD=DSQSCMDE DSQSMODE=BATCH'
 IF DSQ_RETURN_CODE <> DSQ_SUCCESS THEN CALL PGMEXIT 8
 do i=1 to cmdgroup.0
   say cmdgroup.i
   parse var cmdgroup.i . curcmd
   if substr(curcmd,1,2)='--' then iterate
   parse var curcmd curcmd ' --' .
   CALL DSQCIX curcmd
   IF DSQ_RETURN_CODE <> DSQ_SUCCESS THEN DO;
    SAY DSQ_MESSAGE_TEXT
    CALL PGMEXIT 8
   END;
   IF WORD(DSQ_MESSAGE_TEXT,1) <> 'OK,' THEN DO;
    SAY DSQ_MESSAGE_TEXT
    IF INDEX(DSQ_MESSAGE_TEXT,'ABEND') > 0 THEN
    CALL PGMEXIT 8
   END
 end
 CALL DSQCIX 'EXIT'
 return
 PGMEXIT:
   ARG RETCODE
   ZERRLM = "see DSQDEBUG output for detail info."
   say
   say '*ERROR* RC='DSQ_RETURN_CODE strip(ZERRLM)
   CALL DSQCIX 'EXIT'
   Signal Error
/*-------------------------------------------------------------*/
Error:
  Address TSO "END"
  Address MVS "DELSTACK"
Error2:
  say
  say '*ERROR* MAKE failed'
  say
  zispfrc = 12
  'ISPEXEC VPUT (zispfrc)'
  Exit 0   /* zispfrc */
Syntax:
  say 'REXX error' rc 'in line' sigl':' "ERRORTEXT"(rc)
  say "SOURCELINE"(sigl)
  signal Error2
