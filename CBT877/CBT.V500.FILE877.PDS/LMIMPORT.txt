/*REXX****************************************************************/
/* LMIMPORT restore a member from OBSOLETE lib                       */
/*  Format: LMIMPORT 'DSNto(MBRto)' FROM 'DSNobsolete' ÝREPLACE¨     */
/*****************************************************************VM**/
trace 'O'
signal on Error
parse arg "'" DSNto "(" member ")'" 'FROM' "'" DSNfrom "'" opt
If DSNfrom = '' | member = '' | DSNto = '' |,
   (opt <> '' & opt <> 'REPLACE')
then do; say '*ERROR* Invalid syntax'; exit 8; end

Address ISPEXEC
"CONTROL ERRORS RETURN"

say "Allocating input '"DSNfrom"' ..."
"LMINIT  DATAID(DDfrom) DATASET('"DSNfrom"') ENQ(SHR)"

say "Allocating output '"DSNto"'..."
"LMINIT DATAID(DDTO)   DATASET('"DSNto"')   ENQ(SHR)"

"LMOPEN  DATAID("DDfrom") OPTION(INPUT)"
say 'Finding directory member $$DIR$$ ...'
"LMMFIND DATAID("DDfrom") MEMBER($$DIR$$)"

say "Reading directory member $$DIR$$ ..."

MBRfrom=''
signal off error
"LMGET DATAID("DDfrom") DATALOC(entry) DATALEN(entrylen)" ,
           "MODE(INVAR) MAXLEN(5000)"
do i=1 by 1 while rc=0
  parse var entry iMBRname imember .
  if imember = member
   then do; MBRfrom=iMBRname; ientry=entry; end
  "LMGET DATAID("DDfrom") DATALOC(entry) DATALEN(entrylen)" ,
           "MODE(INVAR) MAXLEN(5000)"
end;
if rc<>8 then Signal Error
Signal On Error
if MBRfrom='' then
 do; ZERRLM='No entry for' member 'found'; Signal Error; end

say "Found" ientry

"LMCLOSE DATAID("DDfrom")"

say 'Copying member' MBRfrom 'as ' member '...'
"LMCOPY FROMID("DDFROM") FROMMEM("MBRfrom") ",
       "TODATAID("DDTO"  ) TOMEM("member")" opt

"LMFREE  DATAID("DDfrom")"
"LMFREE  DATAID("DDto")"
Exit 0;

Error:
 say '*ERROR*' strip(ZERRLM)
 "LMCLOSE DATAID("DDfrom")"
 "LMFREE DATAID("DDfrom")"
 "LMFREE DATAID("DDto")"
 Exit 12
