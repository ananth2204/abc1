{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012637000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE710.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE710.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x08'", "DS1TRBAL": "b'\\x91\\xf6'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xec\\x00\\t\\x04\\xec\\x00\\r\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Q\\x00D\\x01\\x11\\x04/\\x01\\x11\\x04/\\x16A\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf1@@@'", "ispf": {"version": "04.81", "flags": 0, "createdate": "2011-02-11T00:00:00", "modifydate": "2011-02-11T16:41:44", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-481"}, "text": "REGULAR CBT TAPE - VERSION 481    FILE:  710\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT481.FILE710\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    3200    PO\n\n   PDS117I 13 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,235 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   02/11/11    16:41:44    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$BSP": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00F\\x01\\x05\\x04O\\x01\\x05\\x04O##\\x00!\\x00!\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-02-13T00:00:00", "modifydate": "2005-02-13T23:23:46", "lines": 33, "newlines": 33, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:     Re: BSPAUTH\nFrom:        somitcw@yahoo.com\nDate:        Sun, 13 Feb 2005 17:18:38 -0500\nTo:          SBGolob@CBTtape.org\n\nAt 08:42 2/13/2005, Sam Golob wrote:\nHi Wayne,\n\n    I am looking at your DDU package.  Where can I get\nyour BSPAUTH macro?  Or do I have to roll my own.\nCan you send yours to me, and the auth mechanism?\nThanks in advance.\n\nSincerely,   Sam Golob\n\n\nHi Sam,\n\n   BSP anything is Volker's stuff.\n\n   The JCL shows SYS2.MACLIB\n\n   A yahoo search turns up:\n http://www.bsp-gmbh.com/turnkey/cookbook/svc244.html\n\n   The SVC was already in my copy of MVS Tur(n)key #4\nso I didn't need to assemble it.\n\n   OS/390 and zOS do not need BSPAUTH.  A PARMLIB\nupdate and PARMLIB command will work.\n\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE710": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Q\\x006\\x01\\x11\\x04/\\x01\\x11\\x04/\\x16A\\x00\\x08\\x00\\x08\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf1@@@'", "ispf": {"version": "04.81", "flags": 0, "createdate": "2011-02-11T00:00:00", "modifydate": "2011-02-11T16:41:36", "lines": 8, "newlines": 8, "modlines": 0, "user": "CBT-481"}, "text": "//***FILE 710 is two TSO commands to display disk dataset records   *   FILE 710\n//*           or disk volume records.  These commands were meant    *   FILE 710\n//*           to work both on MVS 3.8 under Hercules, or under      *   FILE 710\n//*           OS/390 and z/OS.  All necessary ingredients to get    *   FILE 710\n//*           these commands to work, are hopefully included here.  *   FILE 710\n//*                                                                 *   FILE 710\n//*           email:  somitcw@yahoo.com                             *   FILE 710\n//*                                                                 *   FILE 710\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BOX": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x19\\x01\\x05\\x04O\\x01\\x05\\x04O#$\\x00u\\x00u\\x00\\x00\\xc8\\xc5\\xd9\\xc3\\xf0\\xf1@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-02-13T00:00:00", "modifydate": "2005-02-13T23:24:19", "lines": 117, "newlines": 117, "modlines": 0, "user": "HERC01"}, "text": "*  SYS2.MACLIB(BOX):\n         MACRO\n&LABEL   BOX   &COMM,&ID=,&TITLE=,&HEAD=,&CTL1=SPACE,&CTL2=SPACE,      -\n               &PRINT=,&HDR=,&CTR=NO\n         GBLB  &BOXID\n         GBLB  &P\n         GBLC  &BOXHDR\n         LCLA  &I,&J,&N\n         LCLB  &BCTR\n         LCLC  &BID,&BTITLE,&BCOMM,&BLANK,&BCTL1,&BCTL2\n         AIF   (&P).NB01\n.NB01    ANOP\n&BLANK   SETC  '                                                       -\n                              '\n&BCTR    SETB  ('&CTR' NE 'NO')\n.*\n.*       TURN PRINT ON IF NECESSARY\n.*\n         AIF   (T'&PRINT EQ 'O').TESTID\n         PUSH  PRINT\n         PRINT ON,GEN\n.*\n.*       PICK UP ID FIELD\n.*\n.TESTID  AIF   ('&ID' EQ '' AND '&LABEL' EQ '').TESTHDR\n         AIF   ('&ID' EQ '' OR '&LABEL' EQ '').TESTPRV\n         MNOTE 4,'BOX001: ID SPECIFIED TWICE - LABEL FIELD IGNORED'\n.TESTPRV AIF   (NOT &BOXID).SETID\n         MNOTE 4,'BOX002: ID ALREADY SPECIFIED - THIS ONE IGNORED'\n         AGO   .TESTHDR\n.SETID   ANOP\n&BOXID   SETB  1\n&BID     SETC  '&ID'\n         AIF   ('&ID' NE '').TESTHDR\n&BID     SETC  '&LABEL'\n.*\n.*       PICK UP HEADER SPECIFICATION\n.*\n.TESTHDR AIF   (T'&HDR EQ 'O' AND T'&HEAD EQ 'O').TESTTTL\n&BOXHDR  SETC  '&HDR&HEAD'\n         AIF   ('&BOXHDR'(1,1) NE '''').TESTTTL\n&BOXHDR  SETC  '&BOXHDR'(2,K'&BOXHDR-2)\n.*\n.*       PICK UP TITLE SPECIFICATION\n.*\n.TESTTTL AIF   (T'&TITLE EQ 'O').TSTCTL1\n&BTITLE  SETC  '&TITLE'\n         AIF   ('&BTITLE'(1,1) NE '''').GENTTL\n&BTITLE  SETC  '&BTITLE'(2,K'&BTITLE-2)\n.GENTTL  ANOP\n&BID     TITLE '&BOXHDR&BTITLE'\n         AGO   .GENCOMM\n.*\n.*       GENERATE LISTING CONTROL IF APPROPRIATE\n.*\n.TSTCTL1 AIF   (T'&CTL1 EQ 'O').GENCOMM\n&BCTL1   SETC  '&CTL1'\n         AIF   ('&BCTL1'(1,1) NE '''').GENCTL1\n&BCTL1   SETC  '&BCTL1'(2,K'&BCTL1-2)\n.GENCTL1 ANOP\n         &BCTL1\n.*\n.*       GENERATE COMMENTS\n.*\n.GENCOMM AIF   (T'&COMM EQ 'O').MEND\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n&N       SETA  N'&SYSLIST\n&I       SETA  1\n.COMLOOP ANOP\n&BCOMM   SETC  '&SYSLIST(&I)'\n         AIF   ('&BCOMM' EQ '' OR '&BCOMM' EQ '''''').NXTCOMM\n         AIF   ('&BCOMM'(1,1) NE '''').TESTLEN\n&BCOMM   SETC  '&BCOMM'(2,K'&BCOMM-2)\n.TESTLEN AIF   (K'&BCOMM LE 56).MNOTE\n&J       SETA  56\n.SCAN    AIF   ('&BCOMM'(&J,1) EQ ' ').MNOTE1\n&J       SETA  &J-1\n         AIF   (&J GE 10).SCAN\n&J       SETA  56\n.MNOTE1  AIF   (&BCTR).CENTRE1\n&BTITLE  SETC  '&BLANK'(1,8).'&BCOMM'(1,&J-1).'&BLANK'\n         AGO   .STAR1\n.CENTRE1 ANOP\n&BTITLE  SETC  '&BLANK'(1,32-&J/2).'&BCOMM'(1,&J-1).'&BLANK'\n.STAR1   ANOP\n&BTITLE  SETC  '&BTITLE'(1,68).'*'\n         MNOTE *,'&BTITLE'\n&BCOMM   SETC  '&BCOMM'(&J+1,K'&BCOMM-&J)\n         AIF   (K'&BCOMM GE 56).TESTLEN\n.MNOTE   AIF   (&BCTR).CENTRE\n&BCOMM   SETC  '&BLANK'(1,8).'&BCOMM'.'&BLANK'\n         AGO   .STAR\n.CENTRE  ANOP\n&BCOMM   SETC  '&BLANK'(1,(63-K'&BCOMM)/2).'&BCOMM'.'&BLANK'\n.STAR    ANOP\n&BCOMM   SETC  '&BCOMM'(1,68).'*'\n         MNOTE *,'&BCOMM'\n.NXTCOMM ANOP\n&I       SETA  &I+1\n         AIF   (&I LE &N).COMLOOP\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*       TEST SECOND LISTING CONTROL\n.*\n         AIF   (T'&CTL2 EQ 'O').MEND\n&BCTL2   SETC  '&CTL2'\n         AIF   ('&BCTL2'(1,1) NE '''').GENCTL2\n&BCTL2   SETC  '&BCTL2'(2,K'&BCTL1-2)\n.GENCTL2 ANOP\n         &BCTL2\n.MEND    ANOP\n         AIF   (T'&PRINT EQ 'O').NB02\n         POP   PRINT\n.NB02    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BSPAUTH": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x003\\x01\\x05\\x04O\\x01\\x05\\x04O#$\\x00\\x16\\x00\\x16\\x00\\x00\\xc8\\xc5\\xd9\\xc3\\xf0\\xf1@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-02-13T00:00:00", "modifydate": "2005-02-13T23:24:33", "lines": 22, "newlines": 22, "modlines": 0, "user": "HERC01"}, "text": "*  SYS2.MACLIB(BSPAUTH):\n         MACRO\n&LABEL BSPAUTH &FUNC                  , default base register\n         COPY  BSPGLBLS               , get name of globals\n         COPY  BSPSGLBL               , set global values\n&LABEL   DS    0H\n         AIF   ('&FUNC' EQ 'ON').AUTHON\n         AIF   ('&FUNC' EQ 'OFF').AUTHOFF\n         MNOTE '*,No parm specified, BSPAUTH OFF assumed'\n.AUTHOFF ANOP\n         BOX   'Turning of authorization via SVC',CTR=YES\n         SR    0,0                    , clear R0, required by SVC\n         SR    1,1                    , indicate no authorization\n         SVC   &BSPASVC               , issue SVC\n         MEXIT\n.AUTHON  ANOP\n         BOX   'Turning on authorization via SVC',CTR=YES\n         SR    0,0                    , clear R0, required by SVC\n         LA    1,1                    , indicate authorization req\n         SVC   &BSPASVC               , issue SVC\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BSPGLBLS": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00!\\x01\\x05\\x04O\\x01\\x05\\x04O#%\\x00\\x10\\x00\\x11\\x00\\x00\\xc8\\xc5\\xd9\\xc3\\xf0\\xf1@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-02-13T00:00:00", "modifydate": "2005-02-13T23:25:21", "lines": 16, "newlines": 17, "modlines": 0, "user": "HERC01"}, "text": "*  SYS2.MACLIB(BSPGLBLS):\n         GBLC  &BSPAUTH               , Program authors\n         GBLC  &BSPCSCT               , Current CSECT name\n         GBLC  &BSPMOD                , Modification level\n         GBLC  &BSPPRFX               , Program Prefix Chars\n         GBLC  &BSPPRGM               , Program id string\n         GBLC  &BSPVER                , Program version number\n         GBLC  &BSPASVC               , Authorization SVC number\n*\n*  SYS2.MACLIB(BSPSGLBL):\n&BSPAUTH SETC  'V.BANDKE, BSP GmbH'   , PROGRAM AUTHORS\n&BSPMOD  SETC  '0'                    , MODIFICATION LEVEL\n&BSPPRFX SETC  'BSP'                  , PROGRAM PREFIX CHARS\n&BSPPRGM SETC  'BSPMAIN'              , PROGRAM ID STRING\n&BSPVER  SETC  '1'                    , VERSION NUMBER\n&BSPASVC SETC  '244'                  , Authorization SVC number\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DDU": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x10\\x00\\x00\\x01\\x044O\\x01\\x044O\\x17@\\x00\\n\\x00\\x16\\x00\\x00\\xc8\\xc5\\xd9\\xc3\\xf0\\xf1@@@@'", "ispf": {"version": "80.16", "flags": 0, "createdate": "2004-12-09T00:00:00", "modifydate": "2004-12-09T17:40:00", "lines": 10, "newlines": 22, "modlines": 0, "user": "HERC01"}, "text": "        PROC 1 DATASET VOLUME()\n        CONTROL NOMSG\n        FREE FILE(X)\n        CONTROL MSG\n        IF &LENGTH(&VOLUME) NE 0 THEN +\n          ALLOC F(X) DA(&DATASET) UNIT(SYSDA) VOL(&VOLUME) SHR\n        IF &LENGTH(&VOLUME) EQ 0 THEN ALLOC FILE(X) DA(&DATASET) SHR\n        DDUX\n        FREE FILE(X)\n        EXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDUVOL": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x02\\x00\\x00\\x01\\x044O\\x01\\x044O\\x17A\\x00\\x08\\x00\\n\\x00\\x00\\xc8\\xc5\\xd9\\xc3\\xf0\\xf1@@@@'", "ispf": {"version": "80.02", "flags": 0, "createdate": "2004-12-09T00:00:00", "modifydate": "2004-12-09T17:41:00", "lines": 8, "newlines": 10, "modlines": 0, "user": "HERC01"}, "text": "        PROC 1 VOLUME\n        CONTROL NOMSG\n        FREE FILE(X)\n        CONTROL MSG\n        ALLOC F(X) UNIT(SYSDA) VOLUME(&VOLUME) TRACKS SPACE(1 1) DELETE\n        DDUVOLX\n        FREE FILE(X)\n        EXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDUVOLX": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x06\\x003\\x01\\x044O\\x01\\x05\\x04O#&\\x01\\x97\\x01\\x99\\x00\\x00\\xc8\\xc5\\xd9\\xc3\\xf0\\xf1@@@@'", "ispf": {"version": "80.06", "flags": 0, "createdate": "2004-12-09T00:00:00", "modifydate": "2005-02-13T23:26:33", "lines": 407, "newlines": 409, "modlines": 0, "user": "HERC01"}, "text": "//HERC01D  JOB (XXXXXXXX,XXXX,1439,9999),DDUX-SOMITCW,\n//             NOTIFY=HERC01,\n//             MSGCLASS=X,CLASS=A,COND=(0,NE)\n//ASMFCL   EXEC ASMFCL,PARM.LKED='AC=1',  AC=1 to allow VSAM access\n//             MAC1='SYS2.MACLIB'         for MACRO BSPAUTH\nPASS     TITLE 'DDUVOLX - - - TSO command to display disk records'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*     This program displays disk records on TSO terminals.\n*     It first requests an address to display. ( CCHHR format)\n*     Then it reads and displays the record's count field.\n*     Then it reads and displays the key and data areas.\n*     Then it starts over.\n*\n*     DDUX displays data set records\n*     DDUVOLX displays disk volume records\n*     The \"X\" is to allow CLISTs DDU and DDUVOL\n*\n*     Blame: somitcw@yahoo.com\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nDDUVOLX  CSECT ,\n         USING *,R15              Set temporary base register\n         SAVE  (14,12),,'DDUVOLX.&SYSDATE..&SYSTIME'    Save reg.s\n         LA    R12,SAVEAREA       Load the address of the new save area\n         ST    R12,8(,R13)        Connect old and new save areas\n         ST    R13,4(,R12)        Connect old and new save areas\n         LR    R13,R12            Connect old and new save areas\n         DROP  R15                Drop the temporary base register\n         LR    R12,R15            Load the program's base register\n         USING DDUVOLX,R12        Give the assembler the new base\nOPEN     DS    0H\n         BSPAUTH ON               Allow VSAM file display and MODESET\n         OPEN  DCB                OPEN the file\n         L     R11,DCB+44         Load DEB address\n         MODESET KEY=ZERO         Obtain key zero\n         MVC   38(10,R11),EXTENT  Set new extent\n         MODESET KEY=NZERO        Obtain key eight\n         BSPAUTH OFF              APF no longer needed\n         MVC   CCHHR1(4),38(R11)  Set default to the beginning extent\n         MVI   CCHHR1+4,0         Set default to record 1\n         UNPK  WORK(9),38(5,R11)  Unpack the beginning extent\n         TR    WORK(8),TABLE2     Change X'FA'-X'FF' to C'A'-C'F'\n         MVC   BEGIN(8),WORK      Put beginning extent into the message\n*        UNPK  WORK(9),42(5,R11)  Unpack the ending extent\n*        TR    WORK(8),TABLE2     Change X'FA'-X'FF' to C'A'-C'F'\n*        MVC   ENDING(8),WORK     Put ending extent into the message\n         TPUT  BEGIN,L'BEGIN      Display the beginning extent\n*        TPUT  ENDING,L'ENDING    Display the ending extent\nTGET     DS    0H\n         TPUT  MESSAGE,L'MESSAGE  Display message upon the TSO terminal\n         MVC   INPUT,SPACES       Set input data area to spaces\n         TGET  INPUT,10           Accept address to display\n         OC    INPUT,SPACES       Change all letters to capital\n         TPUT  INPUT,10           Echo address to display\n         CLC   END,INPUT          See if 'END' has been entered\n         BE    ENDOFJOB           If yes, go to end-of-program\n         CLI   INPUT,C' '         See if spaces entered\n         BE    READDISK           If spaces, go to read the disk record\n         CLI   INPUT+L'INPUT-1,C' ' See if 10 bytes not entered\n         BE    TGET               If not 10 bytes, go try again\n         TR    INPUT,TABLE1       Change all input for conversion\n         PACK  WORK(6),INPUT(11)  Pack the input address\n         SLR   R1,R1              Clear a work register\n         IC    R1,WORK+4          Load the record number\n         BCTR  R1,0               Drop the record number by one\n         STC   R1,WORK+4          Store the previous record number\n         MVC   CCHHR1(5),WORK     Move the address to the first IOB\nREADDISK DS    0H\n         EXCP  IOB1               Read the record's count field\n         WAIT  ECB=ECB            Wait for the excp to complete\n         MVC   CCHHR1,COUNT       Update CCHHR1 for next record\n         CLI   ECB,X'7F'          See if good read\n         BNE   IOERROR1           Go to CLOSE and re-OPEN the file\n         UNPK  DISPCNTC,COUNT(3)   Convert cylinder number for display\n         UNPK  DISPCNTH,COUNT+2(3) Convert track number    for display\n         UNPK  DISPCNTR,COUNT+4(2) Convert record number   for display\n         UNPK  DISPCNTK,COUNT+5(2) Convert key length      for display\n         UNPK  DISPCNTD,COUNT+6(3) Convert data length     for display\n         TR    DISPCNT,TABLE2     Change X'FA'-X'FF' to C'A'-C'F'\n         MVI   DISPCNTC+4,C','    Put a comma after cylinder number\n         MVI   DISPCNTH+4,C','    Put a comma after track number\n         MVI   DISPCNTR+2,C','    Put a comma after record number\n         MVI   DISPCNTK+2,C','    Put a comma after key length\n         TPUT  DISPCNT,L'DISPCNT-1  Display count field\n         CLC   COUNT+5(3),F0      See if an end of file record\n         BZ    EOFFOUND           If no length, display 'end of file'\n         MVC   CCHHR2,COUNT       Set seek location for second read\n         SLR   R0,R0              Clear a work register\n         SLR   R10,R10            Clear a work register\n         IC    R0,COUNT+5         Load the key length of the record\n         ICM   R10,B'0011',COUNT+6 Load the data length of the record\n         AR    R0,R10             Find the length of the buffer\n         LR    R10,R0             Save the length of the buffer\n         STH   R0,CCWREAD+6       Save the length of the buffer\n         GETMAIN RU,LV=(0)        Get storage to read the record\n*\n         LR    R11,R1             Save the address of storage obtained\n         STCM  R11,B'0111',CCWREAD+1  Put buffer address in read CCW\n         EXCP  IOB2               READ the record's key and data\n         WAIT  ECB=ECB            Wait for the EXCP to complete\n         CLI   ECB,X'7F'          See if a good READ\n         BNE   IOERROR2           Go to CLOSE and re-OPEN the file\n*\n* Routine to display a record\n* Input registers        R10=Full length    R11=Starting address\n* Work Regs.  R5=Work-register  R6=Length-working-with  R7=Displacement\n*             R8=Current-length   R9=Current-address\n*\n*    Output display record format:\n* DDDDD  XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX  *CCCCCCCCCCCCCCCC*\n*        Same as last line\n*\n         SLR   R7,R7              Load starting displacement\n         LR    R8,R10             Load length for working\n         LR    R9,R11             Load address for working\n         B     LOOP2              Go print the first record\nLOOP     DS    0H\n         CH    R8,H16             See if a short display\n         BL    LOOP2              If short, skip same-as logic\n         CLC   DISPLAYC,0(R9)     See if old record the same\n         BNE   LOOP2              If not, go process\n         CLI   SAMESW,1           Check same-data switch\n         BE    LOOP3              If set, skip display\n         MVI   SAMESW,1           Set same-data switch\n         TPUT  SAMEDATA,L'SAMEDATA  Display 'Same as last line'\n         B     LOOP3              Go skip display of line\nLOOP2    DS    0H\n         MVI   SAMESW,0           Clear same-data switch\n         LTR   R8,R8              See if any data left to display\n         BNP   FREEMAIN           If finished, go free the record\n         MVI   DISPLAY,C' '       Clear display area to spaces\n         MVC   DISPLAY+1(L'DISPLAY-1),DISPLAY  Display area to spaces\n         CVD   R7,WORK            Store new displacement\n         UNPK  DISPLAYD,WORK+5(3) Unpack the displacement\n         OI    DISPLAYD+4,X'F0'   Correct the sign\n         LR    R6,R8              Load length of record left\n         CH    R6,H16             See if over 16 bytes\n         BNH   SHORTREC           If not over 16 bytes, don't reset\n         LA    R6,16              Set length to work with as 16\nSHORTREC DS    0H\n         BCTR  R6,0               Drop length to display by 1\n         EX    R6,MVC             Move data from buffer to DISPLAYC\n         UNPK  WORK33(9),DISPLAYC(5) Convert first word to display\n         UNPK  WORK33+8(9),DISPLAYC+4(5) Convert 2nd word to display\n         UNPK  WORK33+16(9),DISPLAYC+8(5) Convert 3rd word to display\n         UNPK  WORK33+24(9),DISPLAYC+12(5) Convert 4th word to display\n         TR    WORK33(L'WORK33-1),TABLE2  Change hex letters to display\n         MVI   WORK32,C' '          Clear work area to spaces\n         MVC   WORK32+1(L'WORK32-1),WORK32  Clear work area to spaces\n         LA    R5,1(R6,R6)        Load length of good data\n         EX    R5,MVC2            Move good data from WORK33 to WORK32\n         MVC   DISPLAY1(8),WORK32    Move first word to display\n         MVC   DISPLAY2(8),WORK32+8  Move secord word to display\n         MVC   DISPLAY3(8),WORK32+16 Move third word to display\n         MVC   DISPLAY4(8),WORK32+24 Move fourth word to display\n         MVI   DISPLAYC-1,C'*'    Put in beginning asterick\n         LA    R5,DISPLAYC(R6)    Find end of char. display area\n         MVI   1(R5),C'*'         Put ending asterick past char.display\n         TPUT  DISPLAY,L'DISPLAY  Display data upon tha TSO terminal\nLOOP3    DS    0H\n         LA    R7,16(,R7)         Bump displacement up for display\n         SH    R8,H16             Bump length left down to display\n         LA    R9,16(,R9)         Bump address up to display\n         B     LOOP               Return to mainline code\nFREEMAIN DS    0H\n         LR    R0,R10             Load length to free\n         LR    R1,R11             Load address to free\n         FREEMAIN R,LV=(0),A=(1)  Free the I/O buffer\n         B     TGET               Go to request next address to display\nMVC      MVC   DISPLAYC(1),0(R9)  Move data to display area\nMVC2     MVC   WORK32(1),WORK33   Move data to display area\nEOFFOUND DS    0H\n         TPUT  EOFMSG,L'EOFMSG    Display 'End of file'\n         B     TGET               Go to get next request\n         EJECT\nIOERROR1 DS    0H\n         TPUT  IOE1MSG,L'IOE1MSG  Display 'I/O error, IOB #1 follows'\n         BAL   R14,IOB1TRC        Go display the IOB in error\n         CLOSE DCB                Close the file\n         XC    ECB,ECB            Clear the ECB just in case\n         MVI   IOB1,X'40'         Re-set IOB request type just in case\n         XC    IOB1+1(4),IOB1+1   Clear some flags in IOB just in case\n         B     OPEN               Go to re-open the file\n         SPACE 3\nIOERROR2 DS    0H\n         TPUT  IOE2MSG,L'IOE2MSG  Display 'I/O error, IOB #2 follows'\n         BAL   R14,IOB2TRC        Go display the IOB in error\n         CLOSE DCB                Close the file\n         XC    ECB,ECB            Clear the ECB just in case\n         MVI   IOB2,X'40'         Re-set IOB request type just in case\n         XC    IOB2+1(4),IOB2+1   Clear some flags in IOB just in case\n         B     OPEN               Go to re-open the file\nENDOFJOB DS    0H\n         CLOSE DCB                Close the file\n         L     R13,4(,R13)        Restore the caller's save area addr.\n         RETURN (14,12),RC=0      Return to caller\n         SPACE\nIOB1TRC  DS    0H\n         UNPK  DISP1(9),IOB1(5)   Change hex numbers to display\n         UNPK  DISP2(9),IOB1+4(5) Change hex numbers to display\n         UNPK  DISP3(9),IOB1+8(5) Change hex numbers to display\n         UNPK  DISP4(9),IOB1+12(5) Change hex numbers to display\n         UNPK  DISP5(9),IOB1+16(5) Change hex numbers to display\n         UNPK  DISP6(9),IOB1+20(5) Change hex numbers to display\n         UNPK  DISP7(9),IOB1+24(5) Change hex numbers to display\n         UNPK  DISP8(9),IOB1+28(5) Change hex numbers to display\n         TR    DISP,TABLE2        Change hex numbers to display\n         MVI   DISP1+8,C' '       Clear extra garbage after UNPK\n         MVI   DISP2+8,C' '       Clear extra garbage after UNPK\n         MVI   DISP3+8,C' '       Clear extra garbage after UNPK\n         MVI   DISP4+8,C' '       Clear extra garbage after UNPK\n         MVI   DISP5+8,C' '       Clear extra garbage after UNPK\n         MVI   DISP6+8,C' '       Clear extra garbage after UNPK\n         MVI   DISP7+8,C' '       Clear extra garbage after UNPK\n         TPUT  DISP,71            Display data upon the TSO terminal\n         BR    R14                Return to trace mainline code\n         SPACE\nIOB2TRC  DS    0H\n         UNPK  DISPA(9),IOB2(5)   Change hex numbers to display\n         UNPK  DISPB(9),IOB2+4(5) Change hex numbers to display\n         UNPK  DISPC(9),IOB2+8(5) Change hex numbers to display\n         UNPK  DISPD(9),IOB2+12(5) Change hex numbers to display\n         UNPK  DISPE(9),IOB2+16(5) Change hex numbers to display\n         UNPK  DISPF(9),IOB2+20(5) Change hex numbers to display\n         UNPK  DISPG(9),IOB2+24(5) Change hex numbers to display\n         UNPK  DISPH(9),IOB2+28(5) Change hex numbers to display\n         TR    DISPA,TABLE2       Change hex numbers to display\n         MVI   DISPA+8,C' '       Clear extra garbage after UNPK\n         MVI   DISPB+8,C' '       Clear extra garbage after UNPK\n         MVI   DISPC+8,C' '       Clear extra garbage after UNPK\n         MVI   DISPD+8,C' '       Clear extra garbage after UNPK\n         MVI   DISPE+8,C' '       Clear extra garbage after UNPK\n         MVI   DISPF+8,C' '       Clear extra garbage after UNPK\n         MVI   DISPG+8,C' '       Clear extra garbage after UNPK\n         TPUT  DISPA,71           Display data upon the TSO terminal\n         BR    R14                Return to trace mainline code\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*      Work Area and Constants\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nSAVEAREA DC    18F'0'             Register save area\nWORK     DS    L                  Work area\nWORK32   DS    CL32               32 byte work area\nINPUT    DS    CL10               Address to display in display shifted\nWORK33   DS    CL33               33 byte work area\nBEGIN    DC    CL34'CCCCHHHH01 is the beggining record'\nENDING   DC    CL29'CCCCHHHH is the ending track '\n* *  THE FOLLOWING ELEVEN LINES MUST STAY TOGETHER  * * * * * * * * * *\nDISPCNT  DS    0CL53              Data to display and pad\n         DC    CL4'CYL='\nDISPCNTC DS    CL5                Data to display and pad\n         DC    CL5' TRK='\nDISPCNTH DS    CL5                Data to display and pad\n         DC    CL5' Rec='\nDISPCNTR DS    CL3                Data to display and pad\n         DC    CL8' KeyLen='\nDISPCNTK DS    CL3                Data to display and pad\n         DC    CL10' Data-len='\nDISPCNTD DS    CL5                Data to display and pad\n* *  The preceeding eleven lines must stay together * * * * * * * * * *\n* * The following ten lines must stay together  * * * * * * * * * * * *\nDISPLAY  DS    0CL63\nDISPLAYD DS    CL5                Displacement within record\n         DS    CL2                Spaces\nDISPLAY1 DS    CL9                Data to display and pad\nDISPLAY2 DS    CL9                Data to display and pad\nDISPLAY3 DS    CL9                Data to display and pad\nDISPLAY4 DS    CL9                Data to display and pad\n         DS    CL3                Spaces and room for a single quote\nDISPLAYC DS    CL16               Data in display format\n         DS    CL1                Room for a single quote ( tick mark )\n* * The preceeding ten lines must stay together * * * * * * * * * * * *\n* * The following nine lines must stay together * * * * * * * * * * * *\nDISP     DS    0CL72              Data to display and pad\nDISP1    DS    CL9                Data to display and pad\nDISP2    DS    CL9                Data to display and pad\nDISP3    DS    CL9                Data to display and pad\nDISP4    DS    CL9                Data to display and pad\nDISP5    DS    CL9                Data to display and pad\nDISP6    DS    CL9                Data to display and pad\nDISP7    DS    CL9                Data to display and pad\nDISP8    DS    CL9                Data to display and pad\n* * The preceeding nine lines must stay together  * * * * * * * * * * *\n* * The following nine lines must stay together * * * * * * * * * * * *\nDISPA    DS    0CL72              Data to display and pad\n         DS    CL9                Data to display and pad\nDISPB    DS    CL9                Data to display and pad\nDISPC    DS    CL9                Data to display and pad\nDISPD    DS    CL9                Data to display and pad\nDISPE    DS    CL9                Data to display and pad\nDISPF    DS    CL9                Data to display and pad\nDISPG    DS    CL9                Data to display and pad\nDISPH    DS    CL9                Data to display and pad\n* * The preceeding nine lines must stay together  * * * * * * * * * * *\nSAMEDATA DC    CL24'       Same as last line'  Duplicate line display\nSAMESW   DS    XL1                Same-data switch\nEND      DC    CL3'END'           Data for end-of-program compare\nSPACES   DC    CL10' '            Constant of spaces\nF0       DC    F'0'               Constant of binary zeroes for compare\nH16      DC    H'16'              Constant for compare\n*\n*                   CCCCHHHHCCCCHHHHLLLL\n* EXTENT DC    XL10'0000000003BE000B2CF4'  New extent\n*                   Start   End     Tracks\n*               CYL0-TRK0 CYL958-TRK11 11508\n*\n*                   CCCCHHHHCCCCHHHHLLLL\nEXTENT   DC    XL10'00000000FFFFFFFFFFFF'  New extent\n*                   Start   End     Tracks\n*            CYL0-TRK0 CYL65535-TRK65535 65535\n*\nMESSAGE  DC    CL49'Enter CCHHR to display, must be 10 digits, or END'\nEOFMSG   DC    CL29'* * * *  End of file  * * * *'\nIOE1MSG  DC    CL43'* * * *  I/O Error, IOB #1 Follows  * * * *'\nIOE2MSG  DC    CL43'* * * *  I/O Error, IOB #2 Follows  * * * *'\nTABLE1   DS    0XL256             Translation table\n         DC    192X'FF'           Hex 00-BF invalid\n         DC    XL16'FF0A0B0C0D0E0FFFFFFFFFFFFFFFFFFF'  C0-CF\n         DC    32X'FF'            Hex D0-EF invalid\n         DC    XL16'00010203040506070809FFFFFFFFFFFF'  F0-FF\nTABLE2   EQU   *\n         DC    64CL1'.'           Invalid characters\n         DC    XL16'404142434445464748494A4B4C4D4E4F' Special Char.\n         DC    XL16'505152535455565758595A5B5C5D5E5F' Special Char.\n         DC    XL16'606162636465666768696A6B6C6D6E6F' Special Char.\n         DC    XL16'707172737475767778797A7B7C7D7E7F' Special Char.\n         DC    XL16'808182838485868788898A8B8C8D8E8F' Lower-case char.\n         DC    XL16'909192939495969798999A9B9C9D9E9F' Lower-case char.\n         DC    XL16'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF' Lower-case char.\n         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF' Lower-case char.\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF' Upper-case char.\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF' Upper-case char.\n         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF' Upper-case char.\n         DC    CL16'0123456789ABCDEF'  Numbers and converted stuff\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*      DCB, IOBs, ECB, and CCWs\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nECB      DC    F'0'               Event Control Block\nCOUNT    DS    D                  Count input area\nDCB      DCB   DDNAME=X,          DDName                               X\n               MACRF=E,           MACRO reference                      X\n               DSORG=PS           Data Set organization\nIOB1     DS    0D                 IOB to read a count field\n         DC    XL4'40000000'      Command chaining used\n         DC    A(ECB)             Address of the ECB\nCSW1     DC    D'0'               Channel Status Word\n         DC    A(CCW1)            Address of the Channel Command string\n         DC    A(DCB)             Address of the Data Control Block\n         DC    A(0)               IOB restart\n         DC    XL4'0'             Flags and counters\nSEEK1    DC    D'0'               Seek address\nCCHHR1   EQU   SEEK1+3,5          CCHHR to display in binary format\nIOB2     DS    0D                 IOB to read a count field\n         DC    XL4'40000000'      Command chaining used\n         DC    A(ECB)             Address of the ECB\nCSW2     DC    D'0'               Channel Status Word\n         DC    A(CCW2)            Address of the Channel Command string\n         DC    A(DCB)             Address of the Data Control Block\n         DC    A(0)               IOB restart\n         DC    XL4'0'             Flags and counters\nSEEK2    DC    D'0'               Seek address\nCCHHR2   EQU   SEEK2+3,5          CCHHR to display in binary format\n         DS    0D                 Insure alignment\n* CCW1   CCW   7,SEEK1+1,X'40',6  Seek to cylinder and head (MVS does)\nCCW1     CCW   X'31',SEEK1+3,X'40',5  Search for record before one read\n         CCW   8,*-8,0,0          TIC back until search complete\n         CCW   X'92',COUNT,0,8    Read the count field\n         DS    0D                 Insure alignment\n* CCW2   CCW   7,SEEK2+1,X'40',6  Seek to cylinder and head (MVS does)\nCCW2     CCW   X'31',SEEK2+3,X'40',5  Search for record before one read\n         CCW   8,*-8,0,0          TIC back until search complete\nCCWREAD  CCW   X'0E',*-*,0,*-*    Read the key and data areas\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*      Register equates\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nR0       EQU   0                  Register equate for register 0\nR1       EQU   1                  Register equate for register 1\nR2       EQU   2                  Register equate for register 2\nR3       EQU   3                  Register equate for register 3\nR4       EQU   4                  Register equate for register 4\nR5       EQU   5                  Register equate for register 5\nR6       EQU   6                  Register equate for register 6\nR7       EQU   7                  Register equate for register 7\nR8       EQU   8                  Register equate for register 8\nR9       EQU   9                  Register equate for register 9\nR10      EQU   10                 Register equate for register 10\nR11      EQU   11                 Register equate for register 11\nR12      EQU   12                 Register equate for register 12\nR13      EQU   13                 Register equate for register 13\nR14      EQU   14                 Register equate for register 14\nR15      EQU   15                 Register equate for register 15\n         END   ,                  The end of the program\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB,DISP=SHR,SPACE=\n NAME DDUVOLX\n//CHECKCC  EXEC PGM=IEFBR14\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DDUX": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x08\\x00I\\x01\\x044O\\x01\\x05\\x04O#&\\x01\\x97\\x01\\x95\\x00\\x00\\xc8\\xc5\\xd9\\xc3\\xf0\\xf1@@@@'", "ispf": {"version": "80.08", "flags": 0, "createdate": "2004-12-09T00:00:00", "modifydate": "2005-02-13T23:26:49", "lines": 407, "newlines": 405, "modlines": 0, "user": "HERC01"}, "text": "//HERC01D  JOB (XXXXXXXX,XXXX,1439,9999),DDUX-SOMITCW,\n//             NOTIFY=HERC01,\n//             MSGCLASS=X,CLASS=A,COND=(0,NE)\n//ASMFCL   EXEC ASMFCL,PARM.LKED='AC=1',  AC=1 to allow VSAM access\n//             MAC1='SYS2.MACLIB' For BSPAUTH MACRO\nPASS     TITLE 'DDUX - - - TSO command to display disk records'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*     This program displays disk records on TSO terminals.\n*     It first requests an address to display. ( CCHHR format)\n*     Then it reads and displays the record's count field.\n*     Then it reads and displays the key and data areas.\n*     Then it starts over.\n*\n*     DDUX displays data set records\n*     DDUVOLX displays disk volume records\n*     The \"X\" is to allow CLISTs DDU and DDUVOL\n*\n*     Blame: somitcw@yahoo.com\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nDDUX     CSECT ,\n         USING *,R15              Set temporary base register\n         SAVE  (14,12),,'DDUX.&SYSDATE..&SYSTIME'    Save reg.s\n         LA    R12,SAVEAREA       Load the address of the new save area\n         ST    R12,8(,R13)        Connect old and new save areas\n         ST    R13,4(,R12)        Connect old and new save areas\n         LR    R13,R12            Connect old and new save areas\n         DROP  R15                Drop the temporary base register\n         LR    R12,R15            Load the program's base register\n         USING DDUX,R12           Give the assembler the new base\nOPEN     DS    0H\n         BSPAUTH ON               Allow VSAM file display and MODESET\n         OPEN  DCB                OPEN the file\n         L     R11,DCB+44         Load DEB address\n*        MODESET KEY=ZERO         Obtain key zero\n*        MVC   38(10,R11),EXTENT  Set new extent\n*        MODESET KEY=NZERO        Obtain key eight\n         BSPAUTH OFF              APF no longer needed\n         MVC   CCHHR1(4),38(R11)  Set default to the beginning extent\n         MVI   CCHHR1+4,0         Set default to record 1\n         UNPK  WORK(9),38(5,R11)  Unpack the beginning extent\n         TR    WORK(8),TABLE2     Change X'FA'-X'FF' to C'A'-C'F'\n         MVC   BEGIN(8),WORK      Put beginning extent into the message\n         UNPK  WORK(9),42(5,R11)  Unpack the ending extent\n         TR    WORK(8),TABLE2     Change X'FA'-X'FF' to C'A'-C'F'\n         MVC   ENDING(8),WORK     Put ending extent into the message\n         TPUT  BEGIN,L'BEGIN      Display the beginning extent\n         TPUT  ENDING,L'ENDING    Display the ending extent\nTGET     DS    0H\n         TPUT  MESSAGE,L'MESSAGE  Display message upon the TSO terminal\n         MVC   INPUT,SPACES       Set input data area to spaces\n         TGET  INPUT,10           Accept address to display\n         OC    INPUT,SPACES       Change all letters to capital\n         TPUT  INPUT,10           Echo address to display\n         CLC   END,INPUT          See if 'END' has been entered\n         BE    ENDOFJOB           If yes, go to end-of-program\n         CLI   INPUT,C' '         See if spaces entered\n         BE    READDISK           If spaces, go to read the disk record\n         CLI   INPUT+L'INPUT-1,C' ' See if 10 bytes not entered\n         BE    TGET               If not 10 bytes, go try again\n         TR    INPUT,TABLE1       Change all input for conversion\n         PACK  WORK(6),INPUT(11)  Pack the input address\n         SLR   R1,R1              Clear a work register\n         IC    R1,WORK+4          Load the record number\n         BCTR  R1,0               Drop the record number by one\n         STC   R1,WORK+4          Store the previous record number\n         MVC   CCHHR1(5),WORK     Move the address to the first IOB\nREADDISK DS    0H\n         EXCP  IOB1               Read the record's count field\n         WAIT  ECB=ECB            Wait for the excp to complete\n         MVC   CCHHR1,COUNT       Update CCHHR1 for next record\n         CLI   ECB,X'7F'          See if good read\n         BNE   IOERROR1           Go to CLOSE and re-OPEN the file\n         UNPK  DISPCNTC,COUNT(3)   Convert cylinder number for display\n         UNPK  DISPCNTH,COUNT+2(3) Convert track number    for display\n         UNPK  DISPCNTR,COUNT+4(2) Convert record number   for display\n         UNPK  DISPCNTK,COUNT+5(2) Convert key length      for display\n         UNPK  DISPCNTD,COUNT+6(3) Convert data length     for display\n         TR    DISPCNT,TABLE2     Change X'FA'-X'FF' to C'A'-C'F'\n         MVI   DISPCNTC+4,C','    Put a comma after cylinder number\n         MVI   DISPCNTH+4,C','    Put a comma after track number\n         MVI   DISPCNTR+2,C','    Put a comma after record number\n         MVI   DISPCNTK+2,C','    Put a comma after key length\n         TPUT  DISPCNT,L'DISPCNT-1  Display count field\n         CLC   COUNT+5(3),F0      See if an end of file record\n         BZ    EOFFOUND           If no length, display 'end of file'\n         MVC   CCHHR2,COUNT       Set seek location for second read\n         SLR   R0,R0              Clear a work register\n         SLR   R10,R10            Clear a work register\n         IC    R0,COUNT+5         Load the key length of the record\n         ICM   R10,B'0011',COUNT+6 Load the data length of the record\n         AR    R0,R10             Find the length of the buffer\n         LR    R10,R0             Save the length of the buffer\n         STH   R0,CCWREAD+6       Save the length of the buffer\n         GETMAIN RU,LV=(0)        Get storage to read the record\n*\n         LR    R11,R1             Save the address of storage obtained\n         STCM  R11,B'0111',CCWREAD+1  Put buffer address in read CCW\n         EXCP  IOB2               READ the record's key and data\n         WAIT  ECB=ECB            Wait for the EXCP to complete\n         CLI   ECB,X'7F'          See if a good READ\n         BNE   IOERROR2           Go to CLOSE and re-OPEN the file\n*\n* Routine to display a record\n* Input registers        R10=Full length    R11=Starting address\n* Work Regs.  R5=Work-register  R6=Length-working-with  R7=Displacement\n*             R8=Current-length   R9=Current-address\n*\n*    Output display record format:\n* DDDDD  XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX  *CCCCCCCCCCCCCCCC*\n*        Same as last line\n*\n         SLR   R7,R7              Load starting displacement\n         LR    R8,R10             Load length for working\n         LR    R9,R11             Load address for working\n         B     LOOP2              Go print the first record\nLOOP     DS    0H\n         CH    R8,H16             See if a short display\n         BL    LOOP2              If short, skip same-as logic\n         CLC   DISPLAYC,0(R9)     See if old record the same\n         BNE   LOOP2              If not, go process\n         CLI   SAMESW,1           Check same-data switch\n         BE    LOOP3              If set, skip display\n         MVI   SAMESW,1           Set same-data switch\n         TPUT  SAMEDATA,L'SAMEDATA  Display 'Same as last line'\n         B     LOOP3              Go skip display of line\nLOOP2    DS    0H\n         MVI   SAMESW,0           Clear same-data switch\n         LTR   R8,R8              See if any data left to display\n         BNP   FREEMAIN           If finished, go free the record\n         MVI   DISPLAY,C' '       Clear display area to spaces\n         MVC   DISPLAY+1(L'DISPLAY-1),DISPLAY  Display area to spaces\n         CVD   R7,WORK            Store new displacement\n         UNPK  DISPLAYD,WORK+5(3) Unpack the displacement\n         OI    DISPLAYD+4,X'F0'   Correct the sign\n         LR    R6,R8              Load length of record left\n         CH    R6,H16             See if over 16 bytes\n         BNH   SHORTREC           If not over 16 bytes, don't reset\n         LA    R6,16              Set length to work with as 16\nSHORTREC DS    0H\n         BCTR  R6,0               Drop length to display by 1\n         EX    R6,MVC             Move data from buffer to DISPLAYC\n         UNPK  WORK33(9),DISPLAYC(5) Convert first word to display\n         UNPK  WORK33+8(9),DISPLAYC+4(5) Convert 2nd word to display\n         UNPK  WORK33+16(9),DISPLAYC+8(5) Convert 3rd word to display\n         UNPK  WORK33+24(9),DISPLAYC+12(5) Convert 4th word to display\n         TR    WORK33(L'WORK33-1),TABLE2  Change hex letters to display\n         MVI   WORK32,C' '          Clear work area to spaces\n         MVC   WORK32+1(L'WORK32-1),WORK32  Clear work area to spaces\n         LA    R5,1(R6,R6)        Load length of good data\n         EX    R5,MVC2            Move good data from WORK33 to WORK32\n         MVC   DISPLAY1(8),WORK32    Move first word to display\n         MVC   DISPLAY2(8),WORK32+8  Move secord word to display\n         MVC   DISPLAY3(8),WORK32+16 Move third word to display\n         MVC   DISPLAY4(8),WORK32+24 Move fourth word to display\n         MVI   DISPLAYC-1,C'*'    Put in beginning asterick\n         LA    R5,DISPLAYC(R6)    Find end of char. display area\n         MVI   1(R5),C'*'         Put ending asterick past char.display\n         TPUT  DISPLAY,L'DISPLAY  Display data upon tha TSO terminal\nLOOP3    DS    0H\n         LA    R7,16(,R7)         Bump displacement up for display\n         SH    R8,H16             Bump length left down to display\n         LA    R9,16(,R9)         Bump address up to display\n         B     LOOP               Return to mainline code\nFREEMAIN DS    0H\n         LR    R0,R10             Load length to free\n         LR    R1,R11             Load address to free\n         FREEMAIN R,LV=(0),A=(1)  Free the I/O buffer\n         B     TGET               Go to request next address to display\nMVC      MVC   DISPLAYC(1),0(R9)  Move data to display area\nMVC2     MVC   WORK32(1),WORK33   Move data to display area\nEOFFOUND DS    0H\n         TPUT  EOFMSG,L'EOFMSG    Display 'End of file'\n         B     TGET               Go to get next request\n         EJECT\nIOERROR1 DS    0H\n         TPUT  IOE1MSG,L'IOE1MSG  Display 'I/O error, IOB #1 follows'\n         BAL   R14,IOB1TRC        Go display the IOB in error\n         CLOSE DCB                Close the file\n         XC    ECB,ECB            Clear the ECB just in case\n         MVI   IOB1,X'40'         Re-set IOB request type just in case\n         XC    IOB1+1(4),IOB1+1   Clear some flags in IOB just in case\n         B     OPEN               Go to re-open the file\n         SPACE 3\nIOERROR2 DS    0H\n         TPUT  IOE2MSG,L'IOE2MSG  Display 'I/O error, IOB #2 follows'\n         BAL   R14,IOB2TRC        Go display the IOB in error\n         CLOSE DCB                Close the file\n         XC    ECB,ECB            Clear the ECB just in case\n         MVI   IOB2,X'40'         Re-set IOB request type just in case\n         XC    IOB2+1(4),IOB2+1   Clear some flags in IOB just in case\n         B     OPEN               Go to re-open the file\nENDOFJOB DS    0H\n         CLOSE DCB                Close the file\n         L     R13,4(,R13)        Restore the caller's save area addr.\n         RETURN (14,12),RC=0      Return to caller\n         SPACE\nIOB1TRC  DS    0H\n         UNPK  DISP1(9),IOB1(5)   Change hex numbers to display\n         UNPK  DISP2(9),IOB1+4(5) Change hex numbers to display\n         UNPK  DISP3(9),IOB1+8(5) Change hex numbers to display\n         UNPK  DISP4(9),IOB1+12(5) Change hex numbers to display\n         UNPK  DISP5(9),IOB1+16(5) Change hex numbers to display\n         UNPK  DISP6(9),IOB1+20(5) Change hex numbers to display\n         UNPK  DISP7(9),IOB1+24(5) Change hex numbers to display\n         UNPK  DISP8(9),IOB1+28(5) Change hex numbers to display\n         TR    DISP,TABLE2        Change hex numbers to display\n         MVI   DISP1+8,C' '       Clear extra garbage after UNPK\n         MVI   DISP2+8,C' '       Clear extra garbage after UNPK\n         MVI   DISP3+8,C' '       Clear extra garbage after UNPK\n         MVI   DISP4+8,C' '       Clear extra garbage after UNPK\n         MVI   DISP5+8,C' '       Clear extra garbage after UNPK\n         MVI   DISP6+8,C' '       Clear extra garbage after UNPK\n         MVI   DISP7+8,C' '       Clear extra garbage after UNPK\n         TPUT  DISP,71            Display data upon the TSO terminal\n         BR    R14                Return to trace mainline code\n         SPACE\nIOB2TRC  DS    0H\n         UNPK  DISPA(9),IOB2(5)   Change hex numbers to display\n         UNPK  DISPB(9),IOB2+4(5) Change hex numbers to display\n         UNPK  DISPC(9),IOB2+8(5) Change hex numbers to display\n         UNPK  DISPD(9),IOB2+12(5) Change hex numbers to display\n         UNPK  DISPE(9),IOB2+16(5) Change hex numbers to display\n         UNPK  DISPF(9),IOB2+20(5) Change hex numbers to display\n         UNPK  DISPG(9),IOB2+24(5) Change hex numbers to display\n         UNPK  DISPH(9),IOB2+28(5) Change hex numbers to display\n         TR    DISPA,TABLE2       Change hex numbers to display\n         MVI   DISPA+8,C' '       Clear extra garbage after UNPK\n         MVI   DISPB+8,C' '       Clear extra garbage after UNPK\n         MVI   DISPC+8,C' '       Clear extra garbage after UNPK\n         MVI   DISPD+8,C' '       Clear extra garbage after UNPK\n         MVI   DISPE+8,C' '       Clear extra garbage after UNPK\n         MVI   DISPF+8,C' '       Clear extra garbage after UNPK\n         MVI   DISPG+8,C' '       Clear extra garbage after UNPK\n         TPUT  DISPA,71           Display data upon the TSO terminal\n         BR    R14                Return to trace mainline code\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*      Work Area and Constants\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nSAVEAREA DC    18F'0'             Register save area\nWORK     DS    L                  Work area\nWORK32   DS    CL32               32 byte work area\nINPUT    DS    CL10               Address to display in display shifted\nWORK33   DS    CL33               33 byte work area\nBEGIN    DC    CL34'CCCCHHHH01 is the beggining record'\nENDING   DC    CL29'CCCCHHHH is the ending track '\n* *  THE FOLLOWING ELEVEN LINES MUST STAY TOGETHER  * * * * * * * * * *\nDISPCNT  DS    0CL53              Data to display and pad\n         DC    CL4'CYL='\nDISPCNTC DS    CL5                Data to display and pad\n         DC    CL5' TRK='\nDISPCNTH DS    CL5                Data to display and pad\n         DC    CL5' Rec='\nDISPCNTR DS    CL3                Data to display and pad\n         DC    CL8' KeyLen='\nDISPCNTK DS    CL3                Data to display and pad\n         DC    CL10' Data-len='\nDISPCNTD DS    CL5                Data to display and pad\n* *  The preceeding eleven lines must stay together * * * * * * * * * *\n* * The following ten lines must stay together  * * * * * * * * * * * *\nDISPLAY  DS    0CL63\nDISPLAYD DS    CL5                Displacement within record\n         DS    CL2                Spaces\nDISPLAY1 DS    CL9                Data to display and pad\nDISPLAY2 DS    CL9                Data to display and pad\nDISPLAY3 DS    CL9                Data to display and pad\nDISPLAY4 DS    CL9                Data to display and pad\n         DS    CL3                Spaces and room for a single quote\nDISPLAYC DS    CL16               Data in display format\n         DS    CL1                Room for a single quote ( tick mark )\n* * The preceeding ten lines must stay together * * * * * * * * * * * *\n* * The following nine lines must stay together * * * * * * * * * * * *\nDISP     DS    0CL72              Data to display and pad\nDISP1    DS    CL9                Data to display and pad\nDISP2    DS    CL9                Data to display and pad\nDISP3    DS    CL9                Data to display and pad\nDISP4    DS    CL9                Data to display and pad\nDISP5    DS    CL9                Data to display and pad\nDISP6    DS    CL9                Data to display and pad\nDISP7    DS    CL9                Data to display and pad\nDISP8    DS    CL9                Data to display and pad\n* * The preceeding nine lines must stay together  * * * * * * * * * * *\n* * The following nine lines must stay together * * * * * * * * * * * *\nDISPA    DS    0CL72              Data to display and pad\n         DS    CL9                Data to display and pad\nDISPB    DS    CL9                Data to display and pad\nDISPC    DS    CL9                Data to display and pad\nDISPD    DS    CL9                Data to display and pad\nDISPE    DS    CL9                Data to display and pad\nDISPF    DS    CL9                Data to display and pad\nDISPG    DS    CL9                Data to display and pad\nDISPH    DS    CL9                Data to display and pad\n* * The preceeding nine lines must stay together  * * * * * * * * * * *\nSAMEDATA DC    CL24'       Same as last line'  Duplicate line display\nSAMESW   DS    XL1                Same-data switch\nEND      DC    CL3'END'           Data for end-of-program compare\nSPACES   DC    CL10' '            Constant of spaces\nF0       DC    F'0'               Constant of binary zeroes for compare\nH16      DC    H'16'              Constant for compare\n*\n*                   CCCCHHHHCCCCHHHHLLLL\n* EXTENT DC    XL10'0000000003BE000B2CF4'  New extent\n*                   Start   End     Tracks\n*               CYL0-TRK0 CYL958-TRK11 11508\n*\n*                   CCCCHHHHCCCCHHHHLLLL\n* EXTENT DC    XL10'00000000FFFFFFFFFFFF'  New extent\n*                   Start   End     Tracks\n*            CYL0-TRK0 CYL65535-TRK65535 65535\n*\nMESSAGE  DC    CL49'Enter CCHHR to display, must be 10 digits, or END'\nEOFMSG   DC    CL29'* * * *  End of file  * * * *'\nIOE1MSG  DC    CL43'* * * *  I/O Error, IOB #1 Follows  * * * *'\nIOE2MSG  DC    CL43'* * * *  I/O Error, IOB #2 Follows  * * * *'\nTABLE1   DS    0XL256             Translation table\n         DC    192X'FF'           Hex 00-BF invalid\n         DC    XL16'FF0A0B0C0D0E0FFFFFFFFFFFFFFFFFFF'  C0-CF\n         DC    32X'FF'            Hex D0-EF invalid\n         DC    XL16'00010203040506070809FFFFFFFFFFFF'  F0-FF\nTABLE2   EQU   *\n         DC    64CL1'.'           Invalid characters\n         DC    XL16'404142434445464748494A4B4C4D4E4F' Special Char.\n         DC    XL16'505152535455565758595A5B5C5D5E5F' Special Char.\n         DC    XL16'606162636465666768696A6B6C6D6E6F' Special Char.\n         DC    XL16'707172737475767778797A7B7C7D7E7F' Special Char.\n         DC    XL16'808182838485868788898A8B8C8D8E8F' Lower-case char.\n         DC    XL16'909192939495969798999A9B9C9D9E9F' Lower-case char.\n         DC    XL16'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF' Lower-case char.\n         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF' Lower-case char.\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF' Upper-case char.\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF' Upper-case char.\n         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF' Upper-case char.\n         DC    CL16'0123456789ABCDEF'  Numbers and converted stuff\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*      DCB, IOBs, ECB, and CCWs\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nECB      DC    F'0'               Event Control Block\nCOUNT    DS    D                  Count input area\nDCB      DCB   DDNAME=X,          DDName                               X\n               MACRF=E,           MACRO reference                      X\n               DSORG=PS           Data Set organization\nIOB1     DS    0D                 IOB to read a count field\n         DC    XL4'40000000'      Command chaining used\n         DC    A(ECB)             Address of the ECB\nCSW1     DC    D'0'               Channel Status Word\n         DC    A(CCW1)            Address of the Channel Command string\n         DC    A(DCB)             Address of the Data Control Block\n         DC    A(0)               IOB restart\n         DC    XL4'0'             Flags and counters\nSEEK1    DC    D'0'               Seek address\nCCHHR1   EQU   SEEK1+3,5          CCHHR to display in binary format\nIOB2     DS    0D                 IOB to read a count field\n         DC    XL4'40000000'      Command chaining used\n         DC    A(ECB)             Address of the ECB\nCSW2     DC    D'0'               Channel Status Word\n         DC    A(CCW2)            Address of the Channel Command string\n         DC    A(DCB)             Address of the Data Control Block\n         DC    A(0)               IOB restart\n         DC    XL4'0'             Flags and counters\nSEEK2    DC    D'0'               Seek address\nCCHHR2   EQU   SEEK2+3,5          CCHHR to display in binary format\n         DS    0D                 Insure alignment\n* CCW1   CCW   7,SEEK1+1,X'40',6  Seek to cylinder and head (MVS does)\nCCW1     CCW   X'31',SEEK1+3,X'40',5  Search for record before one read\n         CCW   8,*-8,0,0          TIC back until search complete\n         CCW   X'92',COUNT,0,8    Read the count field\n         DS    0D                 Insure alignment\n* CCW2   CCW   7,SEEK2+1,X'40',6  Seek to cylinder and head (MVS does)\nCCW2     CCW   X'31',SEEK2+3,X'40',5  Search for record before one read\n         CCW   8,*-8,0,0          TIC back until search complete\nCCWREAD  CCW   X'0E',*-*,0,*-*    Read the key and data areas\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*      Register equates\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nR0       EQU   0                  Register equate for register 0\nR1       EQU   1                  Register equate for register 1\nR2       EQU   2                  Register equate for register 2\nR3       EQU   3                  Register equate for register 3\nR4       EQU   4                  Register equate for register 4\nR5       EQU   5                  Register equate for register 5\nR6       EQU   6                  Register equate for register 6\nR7       EQU   7                  Register equate for register 7\nR8       EQU   8                  Register equate for register 8\nR9       EQU   9                  Register equate for register 9\nR10      EQU   10                 Register equate for register 10\nR11      EQU   11                 Register equate for register 11\nR12      EQU   12                 Register equate for register 12\nR13      EQU   13                 Register equate for register 13\nR14      EQU   14                 Register equate for register 14\nR15      EQU   15                 Register equate for register 15\n         END   ,                  The end of the program\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB,DISP=SHR,SPACE=\n NAME DDUX\n//CHECKCC  EXEC PGM=IEFBR14\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LOADLIB": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x05\\x04O\\x01\\x05\\x04O#1\\x00[\\x00[\\x00\\x00\\xc8\\xc5\\xd9\\xc3\\xf0\\xf1@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-02-13T00:00:00", "modifydate": "2005-02-13T23:31:00", "lines": 91, "newlines": 91, "modlines": 0, "user": "HERC01"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "SVC244$": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x03\\x01\\x05\\x04O\\x01\\x05\\x04O#(\\x00I\\x00J\\x00\\x00\\xc8\\xc5\\xd9\\xc3\\xf0\\xf1@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-02-13T00:00:00", "modifydate": "2005-02-13T23:28:03", "lines": 73, "newlines": 74, "modlines": 0, "user": "HERC01"}, "text": "*  SYS1.SETUP.CNTL(SVC244$):\n//SVC244 JOB   (SETUP),\n//             'Build SVC 244',\n//             CLASS=S,\n//             MSGCLASS=A,\n//             MSGLEVEL=(1,1)\n//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n//*\n//*  This job builds SVC 244 which can be used to set/unset the\n//*  authorization bit in the JSCB\n//*\n//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n//ASMSVC  EXEC PGM=IFOX00,\n//             PARM='XREF(SHORT),LIST,DECK,NOOBJ',\n//             REGION=1024K\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSUT2   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSUT3   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB,DCB=BLKSIZE=32720\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=SYS2.MACLIB\n//SYSPUNCH DD  DISP=(,PASS),UNIT=VIO,SPACE=(CYL,(1,1)),\n//             DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB)\n//SYSIN    DD  *\n         TITLE ' SVC 244 - Toggle Authorization '\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  Name: IGC0024D\n*\n*  Type: Assembler source\n*\n*  Desc: Type 3/4 SVC for setting/unsetting JSCBAUTH\n*\n*  Regs at Entry:\n*\n*          R0 must be 0\n*          R1 = Request code.  R1 = 1 ===> Authon\n*                                else ===> Authoff\n*          R2       undetermined\n*          R3  ---> CVT\n*          R4  ---> TCB\n*          R5  ---> SVRB\n*          R6  ---> Entry point\n*          R7  ---> ASCB\n*          R8  ---> undetermined\n*          R9  ---> undetermined\n*          R10 ---> undetermined\n*          R11 ---> undetermined\n*          R12 ---> undetermined\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nIGC0024D CSECT                             , SVC 244\n         REGISTER                          , equates\n         USING *,6                         , use R6 as base register\n         LTR   R0,R0                       , R0 = 0 ?\n         BNZR  R14                         , return if not\n         L     R11,180(,R4)                , R11 = JSCB (from TCBJSCB)\n         BCT   1,AUTHOFF                   , R1 NOT = 1 ==> Authoff\n         OI    236(R11),X'01'              , set JSCBAUTH on\n         BR    R14                         , and return\nAUTHOFF  NI    236(11),255-X'01'           , set JSCBAUTH off\n         BR    R14                         , and return\n         END                               , of SVC 244\n//LINK    EXEC PGM=IEWL,\n//             REGION=1024K,\n//             COND=(0,LT),\n//             PARM='LIST,MAP.RENT,REUS,REFR'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DISP=(OLD,DELETE),DSN=*.ASMSVC.SYSPUNCH\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.LPALIB(IGC0024D)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TOTAPED": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'P\\x04\\x00\\x00\\x01\\x044O\\x01\\x044O\\x18\\x01\\x00\\x1f\\x00\\x16\\x00\\x00\\xc8\\xc5\\xd9\\xc3\\xf0\\xf1@@@@'", "ispf": {"version": "80.04", "flags": 0, "createdate": "2004-12-09T00:00:00", "modifydate": "2004-12-09T18:01:00", "lines": 31, "newlines": 22, "modlines": 0, "user": "HERC01"}, "text": "//HERC01T JOB  X,TOTAPED-SOMITCW,CLASS=A,MSGCLASS=D\n//*\n//SOURCE  EXEC PGM=IEBCOPY\n//SYSPRINT DD  SYSOUT=*\n COPY OUTDD=SYSUT2,INDD=SYSUT1\n SELECT MEMBER=(DDUX,DDUVOLX,TOTAPED)\n//SYSUT1   DD  DISP=SHR,DSN=HERC01.A.DATA\n//SYSUT2   DD  DISP=(,KEEP),DSN=DDU.SOURCE,\n//             UNIT=TAPE,VOL=(,RETAIN),LABEL=1\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(5,5))\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(5,5))\n//*\n//CLIST   EXEC PGM=IEBCOPY\n//SYSPRINT DD  SYSOUT=*\n COPY OUTDD=SYSUT2,INDD=SYSUT1\n SELECT MEMBER=(DDU,DDUVOL)\n//SYSUT1   DD  DISP=SHR,DSN=SYS1.CMDPROC\n//SYSUT2   DD  DISP=(,KEEP),DSN=DDU.CMDPROC,\n//             VOL=(,RETAIN,REF=*.SOURCE.SYSUT2),LABEL=2\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(5,5))\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(5,5))\n//*\n//CMDLIB  EXEC PGM=IEBCOPY\n//SYSPRINT DD  SYSOUT=*\n COPY OUTDD=SYSUT2,INDD=SYSUT1\n SELECT MEMBER=(DDUX,DDUVOLX)\n//SYSUT1   DD  DISP=SHR,DSN=SYS2.CMDLIB\n//SYSUT2   DD  DISP=(,KEEP),DSN=DDU.CMDLIB,\n//             VOL=REF=*.CLIST.SYSUT2,LABEL=3\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(5,5))\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(5,5))\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT710/FILE710.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT710", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}