{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012000000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 646646, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE418.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE418.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0c\\t'", "DS1TRBAL": "b'j\\x1e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\t\\x00\\x04\\x03\\n\\x00\\x01\\x00\\r'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$DOC": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n  THIS IS AN INDEX OF WHAT IS ON THIS FILE.  FOR A MORE COMPLETE\n  DESCRIPTION OF EACH PROGRAM/MODIFICATION, PLEASE LOOK AT THE COMMENTS\n  IN THE MEMBER.\n\n  AS ALWAYS, THE STANDARD DISCLAIMER APPLIES.  THESE MODIFICATIONS WERE\n  THOROUGHLY TESTED AT OUR MVS/XA 2.1.3. SHOP.  MODIFY AS YOU SEE FIT.\n\n    NOTE:  FOR A DEEPER UNDERSTANDING OF ANY OF THESE PROGRAMS,\n           PLEASE READ THE PROGRAM COMMENTS.\n\n           FOR ANY QUESTIONS MY COMPANY AND PHONE IS AS FOLLOWS:\n\n           TOM BRYANT\n           SOFTWARE SPECIALIST\n           COMBINED INTERNATIONAL\n           5050 NORTH BROADWAY\n           CHICAGO, ILLINOIS  60640\n\n           PHONE: (312) 769-8414\n\n\n        PROGRAM/\n        MODIFICATION         DESCRIPTION\n        _____________    __________________________________\n\n        ACFSCAN           ACF2 LOGONID EXPIRATION UTILITY\n                          TO EXPIRE LOGONIDS NOT USED IN\n                          31 DAYS.  THIS PROGRAM USES A\n                          USER-DEFINED DATE-SET (LIDSETP)\n                          FIELD IF ACC-DATE IS BLANK.\n\n        IGGPRE00         THIS IS A DF/DS DASDM EXIT THAT WILL ALLOW\n                          AN INSTALLATION USING ACF2 TO CONTROL DASDM\n                          ALLOCATION USING RESOURCE RULES.  ADDED A\n                                                            _______\n                          SIMULATED WARN MODE VIA USE OF THE\n                          __________________________________\n                          RESOURCE $USERDATA STATEMENT.\n                          _____________________________\n\n                          NOTE: I CORRECTED A PROBLEM WITH RANDOM\n                                ABEND0C4S DUE TO RELOADING A SAVE/WORK\n                                AREA INCORRECTLY.  COMMENTS ARE IN\n                                THE CODE.\n\n\n        LIDCHK            INTERROGATE THE IN-STORAGE ACF2 LOGONID USING\n                          THE SAME MASKING CONCEPTS AS ACF2 RULE\n                          VALIDATION.  THIS ROUTINE PLACES A RETURN\n                          CODE IN REGISTER 15 INDICATING IF THE\n                          LOGONID MATCHES THE PARM (OR PARM MASK).\n\n\n        LGNPARMS          ACF2 LOGON PARAMETER EXIT TO\n                          PROMPT THE TSO USER FOR A PROJECT\n                          CODE AT LOGON TIME.  THIS CODE\n                          IS APPENDED ONTO THE FIXED\n                          ACCOUNTING INFORMATION AND\n                          WRITTEN TO SMF.\n\n        LGNPXIT           ACF2 LOGON POST-VALIDATION EXIT\n                          THAT WILL ALLOW USAGE OF TSO\n                          BY ACF2 RESOURCE VALIDATIONS\n                          OF VTAM LUNAMES.  THIS EXIT CAN\n                          BE USED FOR TSO DIAL-UP ACCESS\n                          PROTECTION IF YOUR DIAL-UP LUNAMES\n                          ARE A DIFFERENT NAMING CONVENTION\n                          FROM YOUR LOCALS.\n\n        IEFUTL            THIS SMF EXIT WILL ALLOW A\n                          DIFFERENT JOB WAIT TIME FOR TSO\n                          USERS VERSUS BATCH JOBS.  A TABLE\n                          IS DEFINED FOR JOB WAIT TIMES BY\n                          THE FIRST 2 DIGITS OF THE TSO\n                          USERID.  DEFAULT JOB WAIT TIME IS\n                          30 MINUTES.\n\n                          THIS EXIT WILL NOT CHANGE IF THE\n                          SMFPRMXX JWT VALUE IS CHANGED.\n\n        ISGGRNL0          FOR THOSE SHOPS WHICH CANNOT USE THE\n                          GRS RNL LISTS IN SYS1.PARMLIB ( ADDED AT\n                          MVS/XA 2.1.2. LEVEL), HERE IS A MACRO\n                          GRSDEF THAT WILL TAKE YOUR HARDCODED GRS\n                          RNL ENTRY LENGTHS AND DYNAMICALLY FIGURE\n                          THEM OUT.  RIGHT AFTER THE MACRO IS THE\n                          SOURCE CODE WE USED TO USE BACK THEN.\n\n        IVP3480           WILL PERFORM INSTALLATION VERIFICATION\n                          PROCEDURES USING THE HIGH-SPEED BLOCK\n                          SEARCH FACILITY WITH 3480S IN FULL FUNCTION\n                          MODE.\n\n\n        MCS               UTILITY PROGRAM TO DISPLAY THE\n                          MASTER CONSOLE ( WILL RUN ON\n                          MVS/SP OR MVS/XA AN XA VERSION\n                          OF THE DIDOCS COMMAND )\n\n        MTP               TSO PROGRAM TO DISPLAY ALL TAPE MOUNTS PENDING\n                          ON A SYSTEM SIMILAR TO RESOLVE/XA WITHOUT\n                          THE OVERHEAD.\n\n\n        S000160           DFP 1.0. CHECKPOINT RESTART ZAP\n                          TO ALLOW OS CHECKPOINTS ON\n                          SHARED DASD\n\n        S000180  DFP 2.1  DFP 2.1  CHECKPOINT RESTART ZAP\n                          TO ALLOW OS CHECKPOINTS ON\n                          SHARED DASD\n\n        VLDEXIT           AN ACF2 DATASET PRE-VALIDATION\n                          EXIT TO LIMIT ALL ALLOCATE /\n                          SCRATCH / RENAME FUNCTIONS ON\n                          DATASETS WITH THE MIDDLE -\n                          INDEX NAME OF TEST TO VOLUMES\n                          BEGINNNING WITH STM3**\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$INDEX": {"ttr": 519, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "1\n\n\n   Member Name                     Description\n+  ___________                     ___________\n\n\n   ACFXPIRE                        An updated version of my original\n                                   ACF2 Logonid Expiration utility\n                                   program that new uses the ACF2\n                                   EXTENDED Alter Request Entry\n                                   (ARE) control block structure\n                                   recommended by the vendor.\n\n                                   At the end of all Logonid expiration ,\n                                   this program now has added logic\n                                   to issue an operator command to\n                                   perform an ACF2 BACKUP operation.\n\n                                   NOTE: The JCL to execute this\n                                         program must specify\n                                         FREE=CLOSE for the //LIDS\n                                         DDNAME since ACF2 must\n                                         have sole control of\n                                         the sequential backup\n                                         Logonid database file.\n\n                                   This version of the program no\n                                   longer has the report associated\n                                   with it of what Logonids will be\n                                   expired.  The report has been split\n                                   out to a separate program at my\n                                   company since its use is minimal\n                                   with our security department.\n                                   SEE PROGRAM ACFEXPDT BELOW.\n\n\n   ACFVIOS                         ACF2 utility program that will\n                                   copy the ACF2 security violation\n                                   counter (SEC-VIO) to user-defined\n                                   fields and will SUSPEND any logonid\n                                   with 6 or more violations.  See\n                                   the code for more information.\n1\n\n\n   Member Name                     Description\n+  ___________                     ___________\n\n\n   IVP3480                         Some changes to my 3480 cartridge\n                                   installation verification procedure:\n\n                        - Change the DATA BUFFER from 24K to 32K.\n                          32K IS THE HIGHEST BLOCK SIZE YOU CAN USE.\n\n                        - Added EQUATE of DCBOPTW to DCBBIT0 after use\n                          of DCBD MACRO DSECT to indicate WRITE VALIDITY\n                          CHECK for 3480 devices.\n\n                        - Set EQUATE for TAPE-WRITE-IMMEDIATE MODE\n                          to DCBOPTW from DCBBIT0 for better program\n                          understanding.\n\n                        - Add additional SYNCDEV MACRO after we are in\n                          TAPE-WRITE-IMMEDIATE MODE to inquire about\n                          number of data blocks.\n\n                        - issue a return code message on the LAST CLOSE\n                          of this program.\n\n                        - corrected comments where possible for clarity.\n\n\n   ACFEXPDT                        This is a simulation version of\n                                   the ACFXPIRE program that will\n                                   produce a report of what logonids\n                                   will be expired by the ACFXPIRE\n                                   program.\n\n\n   USERCFDE                        This is our ACF2 user @CFDE entries\n                                   needed for the ACFVIOS utility\n                                   program.\n\n\n   USERLID                         This is our ACF2 user Logonid fields\n                                   needed for the ACFVIOS utility\n                                   program.\n\n\n       NOTE:  See the comments in the code for more information.\n\n\n\n       I have made some corrections and additions to items currently\n    on the SHARE CBT tape.  They are as follows:\n\n\n\n    Entry                 Change(s)\n+   ______________        ______________________________________\n\n\n\n    MCS                   Added VTAM fullscreen support in order\n                          to not have NOTIFY messages written\n                          over a fullscreen display.\n\n                          Added code to save the old,original\n                          authorization index value in register\n                          0 after the AXSET instruction in order\n                          to reset the authorization index back\n                          to what it was.  You would think the\n                          AXFRE would do it - it doesn't.\n\n\n    IEFUTL                Added code to IEFUTL to allows batch jobs\n                          with a tape mount pending to be allowed\n                          a different time extension than TSO\n                          sessions or non-tape-mount-pending jobs.\n\n\n    IGGPRE00              Added a simulated ACF2 WARN mode via use\n                          of the $USERDATA rule entry field.\n\n                          Corrected intermittent ABEND S0C4s by\n                          correcting every use of the WKADSCT (dsect)\n                          to use r13 and not r4  (I was dropping\n                          72 bytes this way indexing into the\n                          WTOANSW user WTO area).  The WTOANSW\n                          user WTO area was enlarged to 200 bytes\n                          from 100 bytes as a safety valve.\n\n                          Loading of a second base register was\n                          short by 1 byte.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ACFEXPDT": {"ttr": 522, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ACFEXPDT CSECT\n TITLE 'ACF2 USER-WRITTEN LOGONID EXPIRATION UTILITY SIMULATION'\n**********************************************************************\n* NAME       -   ACFEXPDT                                            *\n*                                                                    *\n* AUTHOR     -   T. BRYANT                                           *\n*                                                                    *\n* FUNCTION   -   SCAN THE PRIMARY ACF2 SEQUENTIAL BACKUP DATABASE    *\n*                AND EXPIRE SELECTED LOGONIDS NOT USED IN 31 DAYS.   *\n*                                                                    *\n*                (SIMULATION ONLY !)                                 *\n*                                                                    *\n*                                                                    *\n* INPUT      -   ACF2 PRIMARY SEQUENTIAL BACKUP DATABASE             *\n*                                                                    *\n* OUTPUT     -   VIA SYSPRINT LISTING                                *\n*                                                                    *\n* SYSTEM     -   MVS/XA 2.1.3.                                       *\n*                                                                    *\n* DATE       -   04/18/86                                            *\n*                                                                    *\n* LAST                                                               *\n* MODIFIED   -   12/15/87                                            *\n*                                                                    *\n* MACROS/DSECTS  ACCVT,LIDREC,ACFINCVT                               *\n*                                                                    *\n* REGISTERS  -   R0    -  *** USED BY MVS ***                        *\n*                R1    -  *** USED BY MVS ***                        *\n*                R2    -  *** UNUSED ***                             *\n*                R3    -  LIDREC ADDRESS                             *\n*                R4    -  CURRENT MONTH VALUE                        *\n*                R5    -  TODAY'S YEAR VALUE                         *\n*                R6    -  LAST-USED YEAR VALUE                       *\n*                R7    -  *** UNUSED ***                             *\n*                R8    -  *** UNUSED ***                             *\n*                R9    -  *** UNUSED ***                             *\n*                R10   -  *** UNUSED ***                             *\n*                R11   -  *** UNUSED ***                             *\n*                R12   -  *** UNUSED ***                             *\n*                R13   -  SYSTEM SAVE AREA ADDRESS                   *\n*                R14   -  RETURN TO MVS BRANCH ADDRESS               *\n*                R15   -  ACFEXPDT PROGRAM ENTRY POINT ADDRESS       *\n*                                                                    *\n* LANGUAGE   -    OS/VS ASSEMBLER                                    *\n*                                                                    *\n* ATTRIBUTES -    PROBLEM KEY 8.                                     *\n*                                                                    *\n**********************************************************************\n        EJECT\n**********************************************************************\n* PROGRAM FUNCTIONAL DESCRIPTION:                                    *\n*                                                                    *\n*               1.) ACFEXPDT READS THE ACF2 PRIMARY SEQUENTIAL BACKUP*\n*                   LOGONID DATABASE AND COMPARES THE DATE OF LAST   *\n*                   SYSTEM ACCESS WITH THE CURRENT DATE.             *\n*                                                                    *\n*  CHANGED BY                                                        *\n*  CR #14758    2.) IF THE DATE-SET FIELD HAS THE CHARACTER '&' THEN *\n*                   THIS IS A PROTOTYPE LOGONID WHICH WILL NEVER BE  *\n*                   EXPIRED.                                         *\n*  CHANGED BY                                                        *\n*  CR #13293    3.) IF DATE OF LAST ACCESS (ACC-DATE) = 0 THEN       *\n*                                                                    *\n*                      DO                                            *\n*                          IF SETUP DATE (DATE-SET) IS GREATER THAN  *\n*                          31 THEN EXPIRE THE LOGONID (SIMULATED)    *\n*                      END                                           *\n*                                                                    *\n*  CHANGED BY                                                        *\n*  CR #13293    4.) IF DATE OF LAST ACCESS (ACC-DATE) \u00ac= 0 THEN      *\n*                                                                    *\n*                      DO                                            *\n*                          IF ACC-DATE IS GREATER THAN 31 THEN       *\n*                          EXPIRE THE LOGONID (SIMULATED)            *\n*                      END                                           *\n**********************************************************************\n        EJECT\n**********************************************************************\n*                   IF ANY OF THE FOLLOWING IS TRUE THEN THE         *\n*                   LOGONID WILL NEVER BE EXPIRED!                   *\n*                                                                    *\n*                   - ANY USER PRIVILEGES (NON-CNCL,SECURITY,ETC.)   *\n*                                                                    *\n*                   - LOGONIDS BEGINNING WITH SS                     *\n**********************************************************************\n         STM   R14,R12,12(R13)              SAVE REGISTERS\n         LR    R12,R15                      ENTRY POINT ADDRESS LOAD\n         USING ACFEXPDT,R12                 SET ADDRESSABILITY\n         LR    R3,R13                       SAVE SYSTEM ADDRESS\n         ST    R13,SAVEAREA+4               SYSTEM ADDR IN MY SAVEAREA\n         LA    R13,SAVEAREA                 ADDRESS OF MY SAVEAREA\n         ST    R13,8(R3)                    MY SAVEAREA PUT IN SYSTEM\n*********************************************\n*   FIRST CHECK TO SEE IF ACF2 IS ALIVE AND *\n*   AND WELL!                               *\n*********************************************\n         ACFINCVT R1,NONE=NOACF2   IF NO ACF2 BRANCH TO NOACF2 LABEL\n*********************************************\n*   PERFORM EDIT CHECKING TO SEE IF WE ARE  *\n*   GOING TO EXPIRE ANY LOGONIDS            *\n*   (SIMULATED).                            *\n*********************************************\n         OPEN  (LIDS,(INPUT))     OPEN ACF2 PRIMARY SEQUENTIAL DSN\n         TM    LIDS+48,GOODOPEN   WAS OPEN SUCCESSFULL???\n         BZ    LIDSNO             NO, ISSUE MSG AND END\n         OPEN  (SYSPRINT,(OUTPUT))   OPEN OUTPUT REPORT\n         TM    SYSPRINT+48,GOODOPEN  WAS OPEN SUCCESSFULL??\n         BZ    PRINTNO            NO, ISSUE MSG AND END\nREADID   GET   LIDS               R1 ADDRESS HAS INPUT AREA\n         LR    R3,R1              SAVE IT IN R3\n         LA    R3,4(R3)           BUMP PAST RDW\n         USING LIDREC,R3          SET ADDRESSABILITY TO IT\n         ICM   R1,15,LIDEXPDT     LOAD EXPIRE FIELD\n         O     R1,MAKEPACK        MAKE SURE IT IS PACKED\n         ST    R1,LIDEXPDT        PUT BACK IN FIELD\n         CP    LIDEXPDT,PZERO4    LOGONID IN EXPIRE STATE?\n         BNE   READID              NO, READ NEXT LOGONID\n*********************************************\n*   IF THE DATE-SET LOGONID FIELD HAS THE   *\n*   CHARACTER '&' THEN IT A PROTOTYPE       *\n*   LOGONID WHICH WILL NEVER EXPIRE.        *\n*********************************************\n         CLC   LIDIAPS,ANDSGN     IS IT AN AMPERSAND?\n         BE    READID             YES, BYPASS PROCESSING IT\n         CLC   LIDLID(2),SSPGMR   IS LOGONID A SYSTEMS SUPPORT PGMR\n         BE    READID             YES, BYPASS PROCESSING IT\n         CLI   LIDTFLAG,LIDTUSR   IS THIS A NORMAL USER?\n         BE    SPECATTR           YES, ANY SPECIAL ATTRIBUTES?\n         B     READID             SECURITY,AUDIT,CONSULT,PROJ LEADER\nSPECATTR TM    LIDMFLG,LIDMRST+LIDMNCNL+LIDMRSTA+LIDMSTC ATTRIBUTES?\n         BNZ   READID             IF SO BYPASS PROCESSING IT\n*********************************************\n*   DETERMINE IF THE LOGONID HAS NOT BEEN   *\n*   USED FOR 31 DAYS.                       *\n*********************************************\n         TM    HEADSW,ON                HAVE WE ALREADY GENERATED RPT?\n         BO    CHKLID                   YES, GO CHECK LIDREC\n         TIME  DEC                      GET TODAY'S DATE AND TIME\n         ST    R0,WORKF                 STORE TIME OF DAY\n         UNPK  WORK7,WORKF              UNPACK TIME\n         MVC   TIME(2),WORK7            MOVE HOURS\n         MVC   TIME+3(2),WORK7+2        MOVE MINUTES\n         ST    R1,DATENOW               SAVE DATE FOR AREPACK\n         ST    R1,WORKF                 STORE DATE\n         UNPK  WORK7,WORKF              UNPACK DATE\n         MVC   DATE+6(2),WORK7+2        MOVE YEAR\n         TM    WORKF+1,X'01'            IS IT AN ODD YEAR?\n         BO    NOLEAP                     YES, CAN NOT BE LEAP YEAR\n         TM    WORKF+1,X'12'            EVEN YEAR - IS IT LEAP YEAR?\n         BM    NOLEAP                     NO, LEAVE FEBRUARY AT 28\n         AP    FEB,=P'1'                  YES, MAKE FEB. 29 DAYS\n         SPACE 1\nNOLEAP   DS    0H\n         LA    R15,12                   SET COUNTER TO 12 MONTHS\n         LA    R4,MONTHS                POINT TO TABLE\n         SPACE 1\nMONTHLP  DS    0H                       FIND WHICH MONTH LOOP\n         AP    MONTH,=P'1'              ADD ONE TO MONTH COUNTER\n         SP    WORKF+2(2),0(2,R4)       SUBT DAYS IN MONTH\n         BNP   MONTHFD                    ANY DAYS LEFT?\n         LA    R4,2(,R4)                POINT TO NEXT MONTH IN TABLE\n         BCT   R15,MONTHLP              GO CHECK THIS MONTH\n         SPACE 1\nMONTHFD  DS    0H                       FOUND WHICH MONTH IT IS\n         AP    WORKF+2(2),0(2,R4)       ADD DAYS IN MONTH BACK IN\n         OI    WORKF+3,X'0F'            INSURE PRINTABLE CHAR\n         UNPK  DATE+3(2),WORKF+2(2)     UNPACK DAY OF MONTH\n         OI    MONTH+1,X'0F'            INSURE PRINTABLE CHAR\n         UNPK  DATE(2),MONTH            UNPACK MONTH\n         ZAP   MONTH,PZERO2             INITIALIZE MONTH FIELD\n         OI    HEADSW,ON                INDICATE TIME/DATE DONE\nCHKLID   EQU   *\n*********************************************\n*   CHECK THE DATE OF LAST ACCESS           *\n*   (ACC-DATE).                             *\n*                                           *\n*   IF IT IS 0 THEN USE THE DATE-SET IAP    *\n*   FIELD TO CALCULATE DATE LAST USED.      *\n*                                           *\n*   IF IT IS NOT 0 THEN USE THE ACC-DATE    *\n*   DATE OF LAST ACCESS FIELD TO CALCULATE  *\n*   LAST DATE USED.                         *\n*********************************************\n         ICM   R1,15,LIDADATE           LOAD ACC-DATE FIELD\n         O     R1,MAKEPACK              MAKE SURE IT IS PACKED\n         ST    R1,LIDADATE              PUT BACK IN FIELD\n         CP    LIDADATE,PZERO4          ACC-DATE IS 0?\n         BNE   NOT0\n         ICM   R1,15,LIDSETP            LOAD DATE-SET FIELD\n         O     R1,MAKEPACK              MAKE SURE IT IS PACKED\n         ST    R1,LIDSETP               PUT BACK IN FIELD\n         CP    LIDSETP,PZERO4           IS DATE-SET 0 - SHOULDNT BE\n         BNE   SETDATE                     IF NOT, SET WORK FIELD\n         MVC   LIDSETP,MAY1986          SET MAY 1ST,1986 AS DEFAULT\nSETDATE  ZAP   PACKDATE,LIDSETP         USE DATE-SET FOR CALCULATION\n         B     FIGURE31                 SEE IF USED WITHIN 31 DAYS\n*\nNOT0     ZAP   PACKDATE,LIDADATE        USE ACC-DATE FOR CALCULATION\n*\nFIGURE31 LA    R1,DATENOW               ADDRESS OF TODAY'S DATE\n         SLR   R5,R5                    ZERO OUT\n         ICM   R5,12,0(R1)              GET TODAY'S YEAR VALUE\n         SRL   R5,16                    SHIFT TO LOW-ORDER POSITIONS\n         LA    R1,PACKDATE              ADDRESS OF LAST-USED DATE\n         SLR   R6,R6                    ZERO OUT\n         ICM   R6,12,0(R1)              GET LAST-USED YEAR VALUE\n         SRL   R6,16                    SHIFT TO LOW-ORDER POSITIONS\n         CR    R5,R6                    ARE THEY EQUAL?\n         BE    SHORTSUB                 WE CAN DO SIMPLE SUBTRACT\n         SLR   R5,R5                    ZERO OUT\n         TM    PACKDATE+1,X'01'         IS IT AN ODD YEAR?\n         BO    NOLEAPYR                   YES, CAN NOT BE LEAP YEAR\n         ZAP   WORKP3,DAY366            366 DAYS TO A LEAP YEAR\n         B     SUBPACK                  GO DO SUBTRACT\nNOLEAPYR ZAP   WORKP3,DAY365            365 DAYS TO A LEAP YEAR\nSUBPACK  SP    WORKP3,PACKDATE+2(2)     HOW MANY DAYS LEFT LAST YEAR\n         AP    WORKP3,DATENOW+2(2)      HOW MANY DAYS USED THIS YEAR\n         ZAP   DAYNO,WORKP3             PUT BACK IN DAYNO FIELD\n         B     COMPPACK                 GO DO COMPARE\nSHORTSUB ZAP   DAYNO,DATENOW+2(2)       NO. OF DAYS SINCE LAST ACCESS\n         SP    DAYNO,PACKDATE+2(2)      NO. OF DAYS SINCE LAST ACCESS\nCOMPPACK CP    DAYNO,P31                LOGONID NOT USED 31 DAYS\n         BL    READID                    NO, READ NEXT ID\n*********************************************\n*   WE HAVE FOUND A LOGONID NOT USED FOR 31 *\n*   DAYS.  ADD THIS TO OUR LIST FOR THE     *\n*   SYSPRINT OUTPUT DATASET.                *\n*   THE LOGONID AND NUMBER OF DAYS IT WAS   *\n*   NOT USED.                               *\n*********************************************\nREPORT   OI    USEREXP,EXPRPT     AT LEAST 1 TO-BE-EXPIRED USER\n         ZAP   PACKDATE,PZERO4          RE-ZERO WORK PACKED DATE\n         CP    LINECNT,P55              NEED ANOTHER PAGE?\n         BH    HEADING                    YES, GO TO NEXT PAGE\n         CP    LINECNT,PZERO2           DO WE NEED HEADER LINES?\n         BNZ   LINEPUT\nHEADING  AP    PAGECNT,PONE             INCREMENT PAGE COUNTER\n         MVC   PAGENO,MASK              EDIT MASK\n         ED    PAGENO,PAGECNT\n         PUT   SYSPRINT,HEADER\n         MVC   CC,DBLSPC                SET CARRIAGE CONTROL TO 1\n         ZAP   LINECNT,PTWO\nLINEPUT  MVC   LOGONID(6),LIDLID        MOVE IN EXPIRED LOGONID\n         MVC   NAME,LIDNAME             MOVE IN LOGONID NAME\n         MVC   PHONE,LIDPHONE           MOVE IN LOGONID PHONE NUMBER\n         MVC   DAYSNUM,MASK             EDIT MASK\n         ED    DAYSNUM,DAYNO+2          PRINT NUMBER OF DAYS\nPUTIT    PUT   SYSPRINT,RPTLINE         LOGONID UNUSED\n         MVC   CC,BLANK                 SET CARRIAGE CONTROL TO 1\n         AP    LINECNT,PONE             REPORT LINE AND SPACE\n         B     READID                       READ NEXT LOGONID\nFINIS    CLOSE (LIDS,,SYSPRINT)             CLOSE FILES\n         L     R13,SAVEAREA+4           SYSTEM SAVE AREA ADDRESS\n         RETURN (14,12),RC=0            RESTORE REGISTERS R15=0\n*********************************************\n*        E R R O R   R O U T I N E S        *\n*********************************************\nLIDSNO   WTO  'ACF2 PRIMARY SEQUENTIAL LOGONID DATABASE OPEN FAILED'\n         B     FINIS\nPRINTNO  WTO  'ACF2 SYSPRINT OPEN FAILED'\n         CLOSE LIDS\n         B     FINIS\nNOACF2   WTO  'ACF2 IS NOT ACTIVE'\n         B     FINIS\n*********************************************\n*         C O N S T A N T S                 *\n*                                           *\n*              AND                          *\n*                                           *\n*         E Q U A T E S                     *\n*********************************************\nSAVEAREA DS    18F\nMASK     DC    X'40202021'\nGOODOPEN EQU   X'10'             GOOD OPEN INDICATOR\nDBLSPC   DC    C'0'              DOUBLE SPACE INDICATOR\nANDSGN   DC    X'50'             DATE-SET NEVER EXPIRE INDICATOR\nEXPRPT   EQU   X'FF'             REPORT INDICATOR\nUSEREXP  DS    X\nDBLWORD  DS    D\nDAY31    DS    H'31'\nHEADER   DS    0CL133\n         DC    C'1'\nBLANK    DC    C' '\nDATE     DC    C'MM/DD/YY'       CURRENT DATE - CHARACTER\n         DC    5C' '\nTIME     DC    C'HH.MM'          CURRENT TIME - CHARACTER\n         DC    4C' '\n         DC    C'LOGONID'\n         DC    2C' '\n         DC    C'NAME'\n         DC    21C' '\n         DC    C'PHONE'\n         DC    6C' '\n         DC    C'DAYS SINCE LAST USED'\n         DC    6C' '\n         DC    C'PAGE'\n         DC    2C' '\nPAGENO   DC    CL4'  '\n         DC    4C' '\n         SPACE 3\nRPTLINE  DS    0CL133\nCC       DC    C' '\n         DC    23C' '\nLOGONID  DS    CL6\n         DC    3C' '\nNAME     DC    CL20' '\n         DC    CL5' '\nPHONE    DC    CL5' '\n         DC    4C' '\nDAYSNUM  DC    CL4' '\n         DC    63C' '\n         SPACE 3\nMONTH    DC    PL2'0'         COUNTER TO DETERMINE WHICH MONTH OF YEAR\n         SPACE 1\nMONTHS   DC    P'31'          NUMBER OF DAYS EACH A MONTH - JANUARY\nFEB      DC    P'28',P'31',P'30',P'31',P'30'\n         DC    P'31',P'31',P'30',P'31',P'30',P'31'\n         SPACE 3\nPACKDATE DS    PL4            DATE USED FOR CALCULATIONS (CR #13293)\nPZERO2   DC    PL2'0'         PACKED VALUE OF 0 LENGTH OF 2\nPZERO4   DC    PL4'0'         PACKED VALUE OF 0 LENGTH OF 4\nP31      DC    PL4'31'        NO. OF DAYS LOGONID NOT USED\nP55      DC    PL2'55'        PAGE COUNT LIMIT\nON       EQU   X'FF'          AT LEAST ONE LOGONID EXPIRED INDICATOR\nHEADSW   DS    CL1            ALREADY GENERATED TIME AND DATE\nPAGECNT  DC    PL2'0'         PAGE COUNT FIELD\nLINECNT  DC    PL2'0'         LINE COUNT FIELD\nDAYNO    DC    PL4'0'         FULL BYTE WORK AREA\nWORKF    DC    F'0'           FULL BYTE WORK AREA\nDATENOW  DC    F'0'           FULL BYTE WORK AREA\nWORK2    DC    XL2'0'         TWO BYTE WORK AREA\nWORK1    DC    XL1'0'         ONE BYTE WORK AREA\nWORK7    DC    XL7'0'         SEVEN BYTE WORK AREA\nWORKP3   DC    PL3'0'\nDAY365   DC    PL3'365'\nDAY366   DC    PL3'366'\n         DS    0P\nMAY1986  DC    XL4'0086121F'  MAY 1ST,1986\nSSPGMR   DC    C'SS'          SYSTEMS SUPPORT PROGRAMMER\nLIDS     DCB   DDNAME=LIDS,DSORG=PS,MACRF=GL,EODAD=FINIS\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,            *\n               BLKSIZE=1330,RECFM=FBA\nPONE     DC    PL1'1'         PACKED VALUE OF 1\nPTWO     DC    PL1'2'         PACKED VALUE OF 2\nMAKEPACK DC    F'15'          FORCE FIELD TO PACKED FORMAT\n**********************\n*   D S E C T S      *\n**********************\n         REGISTER\n         ACCVT\n         LIDREC DSECT=YES\n         END  ACFEXPDT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACFSCAN": {"ttr": 772, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*          DATA SET ACFSCAN    AT LEVEL 001 AS OF 10/27/86\nACFSCAN  CSECT\n TITLE 'ACF2 USER-WRITTEN LOGONID EXPIRATION UTILITY'\n**********************************************************************\n* NAME       -   ACFSCAN                                             *\n*                                                                    *\n* AUTHOR     -   T. BRYANT                                           *\n*                                                                    *\n* FUNCTION   -   SCAN THE PRIMARY ACF2 SEQUENTIAL BACKUP DATABASE    *\n*                AND EXPIRE SELECTED LOGONIDS NOT USED IN 31 DAYS.   *\n*                                                                    *\n* INPUT      -   ACF2 PRIMARY SEQUENTIAL BACKUP DATABASE             *\n*                                                                    *\n* OUTPUT     -   VIA SYSPRINT LISTING                                *\n*                                                                    *\n* SYSTEM     -   MVS/XA 2.1.3.                                       *\n*                                                                    *\n* DATE       -   04/18/86                                            *\n*                                                                    *\n* LAST                                                               *\n* MODIFIED   -   10/21/86                                            *\n*                                                                    *\n* MACROS/DSECTS  ACCVT,ACUCB,ACARE,LIDREC,ACFINCVT,MODESET           *\n*                                                                    *\n* ACF2                                                               *\n* ROUTINES   -   $ACFGCVT                                            *\n*                                                                    *\n* REGISTERS  -   R0    -  **USED BY MVS**                            *\n*                R1    -  **USED BY MVS**                            *\n*                R2    -  **UNUSED**                                 *\n*                R3    -  LIDREC ADDRESS                             *\n*                R4    -  CURRENT MONTH VALUE                        *\n*                R5    -  **UNUSED**                                 *\n*                R6    -  ANY VALUE INDICATES LEAP YEAR              *\n*                R7    -  WORK REGISTER                              *\n*                R8    -  **UNUSED**                                 *\n*                R9    -  **UNUSED**                                 *\n*                R10   -  ADDRESS OF ACALT ERRMSG                    *\n*                R11   -  **UNUSED**                                 *\n*                R12   -  **UNUSED**                                 *\n*                R13   -  SYSTEM SAVE AREA ADDRESS                   *\n*                R14   -  RETURN TO MVS BRANCH ADDRESS               *\n*                R15   -  ACFSCAN PROGRAM ENTRY POINT ADDRESS        *\n*                                                                    *\n* LANGUAGE   -    OS/VS ASSEMBLER                                    *\n*                                                                    *\n* PRIVILEGES -    NONE                                               *\n*                                                                    *\n* ATTRIBUTES -    SUPERVISOR KEY 0 FOR ACTUAL LOGONID EXPIRATION     *\n*                 ROUTINE. PROBLEM KEY 8 FOR REMAINDER OF PROGRAM.   *\n*                                                                    *\n**********************************************************************\n        EJECT\n**********************************************************************\n* PROGRAM FUNCTIONAL DESCRIPTION:                                    *\n*                                                                    *\n*               1.) ACFSCAN READS THE ACF2 PRIMARY SEQUENTIAL BACKUP *\n*                   LOGONID DATABASE AND COMPARES THE DATE OF LAST   *\n*                   SYSTEM ACCESS WITH THE CURRENT DATE.             *\n*                                                                    *\n*  CHANGED BY                                                        *\n*  CR #13293    2.) IF DATE OF LAST ACCESS (ACC-DATE) = 0 THEN       *\n*                                                                    *\n*                      DO                                            *\n*                          IF SETUP DATE (DATE-SET) IS GREATER THAN  *\n*                          31 THEN EXPIRE THE LOGONID                *\n*                      END                                           *\n*                                                                    *\n*  CHANGED BY                                                        *\n*  CR #13293    3.) IF DATE OF LAST ACCESS (ACC-DATE) \u00ac= 0 THEN      *\n*                                                                    *\n*                      DO                                            *\n*                          IF ACC-DATE IS GREATER THAN 31 THEN       *\n*                          EXPIRE THE LOGONID                        *\n*                      END                                           *\n**********************************************************************\n        EJECT\n**********************************************************************\n*                   IF ANY OF THE FOLLOWING IS TRUE THEN THE         *\n*                   LOGONID WILL NEVER BE EXPIRED!                   *\n*                                                                    *\n*                   - ANY USER PRIVILEGES (NON-CNCL,SECURITY,ETC.)   *\n*                                                                    *\n*                   - LOGONIDS BEGINNING WITH SS                     *\n**********************************************************************\n         STM   R14,R12,12(R13)              SAVE REGISTERS\n         LR    R12,R15                      ENTRY POINT ADDRESS LOAD\n         USING ACFSCAN,R12                  SET ADDRESSABILITY\n         LR    R3,R13                       SAVE SYSTEM ADDRESS\n         ST    R13,SAVEAREA+4               SYSTEM ADDR IN MY SAVEAREA\n         LA    R13,SAVEAREA                 ADDRESS OF MY SAVEAREA\n         ST    R13,8(R3)                    MY SAVEAREA PUT IN SYSTEM\n*********************************************\n*   FIRST CHECK TO SEE IF ACF2 IS ALIVE AND *\n*   AND WELL!                               *\n*********************************************\n        ACFINCVT R1,NONE=NOACF2   IF NO ACF2 BRANCH TO NOACF2 LABEL\n*********************************************\n*   PERFORM EDIT CHECKING TO SEE IF WE ARE  *\n*   GOING TO EXPIRE ANY LOGONIDS.           *\n*********************************************\n         OPEN  (LIDS,(INPUT))     OPEN ACF2 PRIMARY SEQUENTIAL DSN\n         TM    LIDS+48,GOODOPEN   WAS OPEN SUCCESSFULL???\n         BZ    LIDSNO             NO, ISSUE MSG AND END\n         OPEN  (SYSPRINT,(OUTPUT))   OPEN OUTPUT REPORT\n         TM    SYSPRINT+48,GOODOPEN  WAS OPEN SUCCESSFULL??\n         BZ    PRINTNO            NO, ISSUE MSG AND END\nREADID   GET   LIDS               R1 ADDRESS HAS INPUT AREA\n         LR    R3,R1              SAVE IT IN R3\n         LA    R3,4(R3)           BUMP PAST RDW\n         USING LIDREC,R3          SET ADDRESSABILITY TO IT\n         ICM   R1,15,LIDEXPDT     LOAD EXPIRE FIELD\n         O     R1,MAKEPACK        MAKE SURE IT IS PACKED\n         ST    R1,LIDEXPDT        PUT BACK IN FIELD\n         CP    LIDEXPDT,PZERO4    LOGONID IN EXPIRE STATE?\n         BNE   READID              NO, READ NEXT LOGONID\n         CLC   LIDLID(2),SSPGMR   IS LOGONID A SYSTEMS SUPPORT PGMR\n         BE    READID             YES, BYPASS PROCESSING IT\n         CLI   LIDTFLAG,LIDTUSR   IS THIS A NORMAL USER?\n         BE    SPECATTR           YES, ANY SPECIAL ATTRIBUTES?\n         B     READID             SECURITY,AUDIT,CONSULT,PROJ LEADER\nSPECATTR TM    LIDMFLG,LIDMRST+LIDMNCNL+LIDMRSTA+LIDMSTC ATTRIBUTES?\n         BNZ   READID             IF SO BYPASS PROCESSING IT\n*********************************************\n*   DETERMINE IF THE LOGONID HAS NOT BEEN   *\n*   USED FOR 31 DAYS.                       *\n*********************************************\n         TM    HEADSW,ON                HAVE WE ALREADY GENERATED RPT?\n         BO    CHKLID                   YES, GO CHECK LIDREC\n         TIME  DEC                      GET TODAY'S DATE AND TIME\n         ST    R0,WORKF                 STORE TIME OF DAY\n         UNPK  WORK7,WORKF              UNPACK TIME\n         MVC   TIME(2),WORK7            MOVE HOURS\n         MVC   TIME+3(2),WORK7+2        MOVE MINUTES\n         ST    R1,DATENOW               SAVE DATE FOR AREPACK\n         ST    R1,WORKF                 STORE DATE\n         UNPK  WORK7,WORKF              UNPACK DATE\n         MVC   DATE+6(2),WORK7+2        MOVE YEAR\n         TM    WORKF+1,X'01'            IS IT AN ODD YEAR?\n         BO    NOLEAP                     YES, CAN NOT BE LEAP YEAR\n         TM    WORKF+1,X'12'            EVEN YEAR - IS IT LEAP YEAR?\n         BM    NOLEAP                     NO, LEAVE FEBRUARY AT 28\n         AP    FEB,=P'1'                  YES, MAKE FEB. 29 DAYS\n         SPACE 1\nNOLEAP   DS    0H\n         LA    R15,12                   SET COUNTER TO 12 MONTHS\n         LA    R4,MONTHS                POINT TO TABLE\n         SPACE 1\nMONTHLP  DS    0H                       FIND WHICH MONTH LOOP\n         AP    MONTH,=P'1'              ADD ONE TO MONTH COUNTER\n         SP    WORKF+2(2),0(2,R4)       SUBT DAYS IN MONTH\n         BNP   MONTHFD                    ANY DAYS LEFT?\n         LA    R4,2(,R4)                POINT TO NEXT MONTH IN TABLE\n         BCT   R15,MONTHLP              GO CHECK THIS MONTH\n         SPACE 1\nMONTHFD  DS    0H                       FOUND WHICH MONTH IT IS\n         AP    WORKF+2(2),0(2,R4)       ADD DAYS IN MONTH BACK IN\n         OI    WORKF+3,X'0F'            INSURE PRINTABLE CHAR\n         UNPK  DATE+3(2),WORKF+2(2)     UNPACK DAY OF MONTH\n         OI    MONTH+1,X'0F'            INSURE PRINTABLE CHAR\n         UNPK  DATE(2),MONTH            UNPACK MONTH\n         ZAP   MONTH,PZERO2             INITIALIZE MONTH FIELD\n         OI    HEADSW,ON                INDICATE TIME/DATE DONE\nCHKLID   EQU   *\n*********************************************\n*   CHECK THE DATE OF LAST ACCESS           *\n*   (ACC-DATE).                             *\n*                                           *\n*   IF IT IS 0 THEN USE THE DATE-SET IAP    *\n*   FIELD TO CALCULATE DATE LAST USED.      *\n*                                           *\n*   IF IT IS NOT 0 THEN USE THE ACC-DATE    *\n*   DATE OF LAST ACCESS FIELD TO CALCULATE  *\n*   LAST DATE USED.                         *\n*********************************************\n         ICM   R1,15,LIDADATE           LOAD ACC-DATE FIELD\n         O     R1,MAKEPACK              MAKE SURE IT IS PACKED\n         ST    R1,LIDADATE              PUT BACK IN FIELD\n         CP    LIDADATE,PZERO4          ACC-DATE IS 0?\n         BNE   NOT0\n         ICM   R1,15,LIDSETP            LOAD DATE-SET FIELD\n         O     R1,MAKEPACK              MAKE SURE IT IS PACKED\n         ST    R1,LIDSETP               PUT BACK IN FIELD\n         CP    LIDSETP,PZERO4           IS DATE-SET 0 - SHOULDNT BE\n         BNE   SETDATE                     IF NOT, SET WORK FIELD\n         MVC   LIDSETP,MAY1986          SET MAY 1ST,1986 AS DEFAULT\nSETDATE  ZAP   PACKDATE,LIDSETP         USE DATE-SET FOR CALCULATION\n         B     FIGURE31                 SEE IF USED WITHIN 31 DAYS\n*\nNOT0     ZAP   PACKDATE,LIDADATE        USE ACC-DATE FOR CALCULATION\n*\nFIGURE31 LA    R1,DATENOW               ADDRESS OF TODAY'S DATE\n         SLR   R5,R5                    ZERO OUT\n         ICM   R5,12,0(R1)              GET TODAY'S YEAR VALUE\n         SRL   R5,16                    SHIFT TO LOW-ORDER POSITIONS\n         LA    R1,PACKDATE              ADDRESS OF LAST-USED DATE\n         SLR   R6,R6                    ZERO OUT\n         ICM   R6,12,0(R1)              GET LAST-USED YEAR VALUE\n         SRL   R6,16                    SHIFT TO LOW-ORDER POSITIONS\n         CR    R5,R6                    ARE THEY EQUAL?\n         BE    SHORTSUB                 WE CAN DO SIMPLE SUBTRACT\n         SLR   R5,R5                    ZERO OUT\n         TM    PACKDATE+1,X'01'         IS IT AN ODD YEAR?\n         BO    NOLEAPYR                   YES, CAN NOT BE LEAP YEAR\n         ZAP   WORKP3,DAY366            366 DAYS TO A LEAP YEAR\n         B     SUBPACK                  GO DO SUBTRACT\nNOLEAPYR ZAP   WORKP3,DAY365            365 DAYS TO A LEAP YEAR\nSUBPACK  SP    WORKP3,PACKDATE+2(2)     HOW MANY DAYS LEFT LAST YEAR\n         AP    WORKP3,DATENOW+2(2)      HOW MANY DAYS USED THIS YEAR\n         ZAP   DAYNO,WORKP3             PUT BACK IN DAYNO FIELD\n         B     COMPPACK                 GO DO COMPARE\nSHORTSUB ZAP   DAYNO,DATENOW+2(2)       NO. OF DAYS SINCE LAST ACCESS\n         SP    DAYNO,PACKDATE+2(2)      NO. OF DAYS SINCE LAST ACCESS\nCOMPPACK CP    DAYNO,P31                LOGONID NOT USED 31 DAYS\n         BL    READID                    NO, READ NEXT ID\n*********************************************\n*   WE HAVE FOUND A LOGONID NOT USED FOR 31 *\n*   DAYS.  ISSUE INTERNAL ACF2 REQUEST FOR  *\n*   LOGONID EXPIRATION AND WRITE TO SYSPRINT*\n*   THE LOGONID AND NUMBER OF DAYS IT WAS   *\n*   NOT USED.                               *\n*********************************************\n*XPIRE   B     REPORT             **** DIAGNOSIS ONLY ****\nXPIRE    OI    USEREXP,EXPRPT     AT LEAST 1 TO-BE-EXPIRED USER\n         MVI   ACAFCN,2           SET LID-UPDATE FUNCTION\n         MVI   ACASFCN,ACASALT    CHANGE LOGONID TO EXPIRED\n         MVC   ACAMSG,=A(ERRMSG)  SET MESSAGE ADDR\n         MVC   ACALID,LIDLID      SET LOGONID TO BE EXPIRED\n         MVC   ACAUCB,=X'FFFFFFFF'  SET TO NON-ZERO FOR APF AUTH\n         MVC   ACAAREB,=A(ARE)      SET TO BUFFER OF ARE'S (ALTER REQ\n         ZAP   AREPACK,DATENOW      SET DATE TO EXPIRE\n         LA    R1,ARELNTH            ARE BUFFER LENGTH\n         ST    R1,ACAAREL         SET IN BLOCK\n         MODESET KEY=ZERO\n         ACFSVC ACALT,TYPE=A,NONE=ENDDATA,CVT=FIND EXPIRE LOGONID\n         LTR   R15,R15\n         BZ    RC0\n         LA    R10,WTOMSG+4\n         WTO   MF=(E,(R10))        ISSUE ERRMSG\n         B     FINIS\nRC0      MODESET KEY=NZERO\nREPORT   ZAP   PACKDATE,PZERO4          RE-ZERO WORK PACKED DATE\n         CP    LINECNT,P55              NEED ANOTHER PAGE?\n         BH    HEADING                    YES, GO TO NEXT PAGE\n         CP    LINECNT,PZERO2           DO WE NEED HEADER LINES?\n         BNZ   LINEPUT\nHEADING  AP    PAGECNT,PONE             INCREMENT PAGE COUNTER\n         MVC   PAGENO,MASK              EDIT MASK\n         ED    PAGENO,PAGECNT\n         PUT   SYSPRINT,HEADER\n         MVC   CC,DBLSPC                SET CARRIAGE CONTROL TO 1\n         ZAP   LINECNT,PTWO\nLINEPUT  MVC   LOGONID(6),LIDLID        MOVE IN EXPIRED LOGONID\n         MVC   NAME,LIDNAME             MOVE IN LOGONID NAME\n         MVC   PHONE,LIDPHONE           MOVE IN LOGONID PHONE NUMBER\n         MVC   DAYSNUM,MASK             EDIT MASK\n         ED    DAYSNUM,DAYNO+2          PRINT NUMBER OF DAYS\nPUTIT    PUT   SYSPRINT,RPTLINE         LOGONID UNUSED\n         MVC   CC,BLANK                 SET CARRIAGE CONTROL TO 1\n         AP    LINECNT,PONE             REPORT LINE AND SPACE\n         B     READID\nLIDSNO   WTL  'ACF2 PRIMARY SEQUENTIAL LOGONID DATABASE OPEN FAILED'\n         B     FINIS\nPRINTNO  WTL  'ACF2 SYSPRINT OPEN FAILED'\n         CLOSE LIDS\n         B     FINIS\nNOACF2   WTO  'ACF2 IS NOT ACTIVE'\n         B     FINIS\nENDDATA  SLR   R15,R15\n         CLOSE (LIDS,,SYSPRINT)\nFINIS    L     R13,SAVEAREA+4               SYSTEM SAVE AREA ADDRESS\n         RETURN (14,12),RC=0                RESTORE REGISTERS R15=0\n*********************************************\n*  C O N S T A N T S  AND  E Q U A T E S    *\n*********************************************\nSAVEAREA DS    18F\nMASK     DC    X'40202021'\nGOODOPEN EQU   X'10'             GOOD OPEN INDICATOR\nDBLSPC   DC    C'0'              DOUBLE SPACE INDICATOR\nEXPRPT   EQU   X'FF'             REPORT INDICATOR\nUSEREXP  DS    X\nDBLWORD  DS    D\nDAY31    DS    H'31'\nHEADER   DS    0CL133\n         DC    C'1'\nBLANK    DC    C' '\nDATE     DC    C'MM/DD/YY'       CURRENT DATE - CHARACTER\n         DC    5C' '\nTIME     DC    C'HH.MM'          CURRENT TIME - CHARACTER\n         DC    4C' '\n         DC    C'LOGONID'\n         DC    2C' '\n         DC    C'NAME'\n         DC    21C' '\n         DC    C'PHONE'\n         DC    6C' '\n         DC    C'DAYS SINCE LAST USED'\n         DC    6C' '\n         DC    C'PAGE'\n         DC    2C' '\nPAGENO   DC    CL4'  '\n         DC    4C' '\n         SPACE 3\nRPTLINE  DS    0CL133\nCC       DC    C' '\n         DC    23C' '\nLOGONID  DS    CL6\n         DC    3C' '\nNAME     DC    CL20' '\n         DC    CL5' '\nPHONE    DC    CL5' '\n         DC    4C' '\nDAYSNUM  DC    CL4' '\n         DC    63C' '\n         SPACE 3\nMONTH    DC    PL2'0'         COUNTER TO DETERMINE WHICH MONTH OF YEAR\n         SPACE 1\nMONTHS   DC    P'31'          NUMBER OF DAYS EACH A MONTH - JANUARY\nFEB      DC    P'28',P'31',P'30',P'31',P'30'\n         DC    P'31',P'31',P'30',P'31',P'30',P'31'\n         SPACE 3\nPACKDATE DS    PL4            DATE USED FOR CALCULATIONS (CR #13293)\nPZERO2   DC    PL2'0'         PACKED VALUE OF 0 LENGTH OF 2\nPZERO4   DC    PL4'0'         PACKED VALUE OF 0 LENGTH OF 4\nP31      DC    PL4'31'        NO. OF DAYS LOGONID NOT USED\nP55      DC    PL2'55'        PAGE COUNT LIMIT\nON       EQU   X'FF'          AT LEAST ONE LOGONID EXPIRED INDICATOR\nHEADSW   DS    CL1            ALREADY GENERATED TIME AND DATE\nPAGECNT  DC    PL2'0'         PAGE COUNT FIELD\nLINECNT  DC    PL2'0'         LINE COUNT FIELD\nDAYNO    DC    PL4'0'         FULL BYTE WORK AREA\nWORKF    DC    F'0'           FULL BYTE WORK AREA\nDATENOW  DC    F'0'           FULL BYTE WORK AREA\nWORK2    DC    XL2'0'         TWO BYTE WORK AREA\nWORK1    DC    XL1'0'         ONE BYTE WORK AREA\nWORK7    DC    XL7'0'         SEVEN BYTE WORK AREA\nWORKP3   DC    PL3'0'\nDAY365   DC    PL3'365'\nDAY366   DC    PL3'366'\n         DS    0P\nMAY1986  DC    XL4'0086121F'  MAY 1ST,1986\nSSPGMR   DC    C'SS'          SYSTEMS SUPPORT PROGRAMMER\nLIDS     DCB   DDNAME=LIDS,DSORG=PS,MACRF=GL,EODAD=ENDDATA\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,            *\n               BLKSIZE=1330,RECFM=FBA\nPONE     DC    PL1'1'         PACKED VALUE OF 1\nPTWO     DC    PL1'2'         PACKED VALUE OF 2\nMAKEPACK DC    F'15'          FORCE FIELD TO PACKED FORMAT\n         ACALT DSECT=NO           PARM LIST FOR LID UPDATE FUNCTION\n*********************************************\n*  ALTER REQUEST ENTRY FOR THE LID UPDATE   *\n*  FUNCTION.                                *\n*********************************************\nARE      DC    AL2(ARELNTH)       LENGTH OF ARE\n         DC    X'80'              ONE AND ONLY ENTRY\n         DC    AL1(AREPREP)       REPLACE PACKED FIELD\n         DC    CL8'EXPIRE'        NAME OF FIELD TO MODIFY\n         DC    X'0000'            RESERVED\n         DC    XL2'4'             MUST BE 4 FOR FUNCTION AREPREP\nAREPACK  DC    PL4'0'             MOVE CURRENT PACKED DATE HERE\nARELNTH  EQU   *-ARE\nWTOMSG   DS    0F\n         DC    AL2(WTOMSGL-4)\nMCSFLAG  DC    B'1000000000000000'\nERRMSG   DS    CL128             ACALT MESSAGE AREA\nDESCFLG  DC    B'1000000000000000'\nROUTFLG  DC    B'0000000000100000'\nWTOMSGL  EQU   *-WTOMSG\n**********************\n*   D S E C T S      *\n**********************\nAREPREP  EQU   5\n         REGISTER\n         ACCVT\n         LIDREC DSECT=YES\n         END  ACFSCAN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACFVIOS": {"ttr": 779, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ACFVIOS  CSECT\n TITLE 'ACF2 AUTOMATIC HANDLING OF VIOLATION COUNTERS'\n**********************************************************************\n* NAME       -   ACFVIOS                                             *\n*                                                                    *\n* AUTHOR     -   T. BRYANT                                           *\n*                                                                    *\n* FUNCTION   -   THIS PROGRAM WILL PERFORM AUTOMATIC HANDLING OF     *\n*                THE USER-DEFINED ACF2 VIOLATION COUNTERS.           *\n*                                                                    *\n* INPUT      -   ACF2 PRIMARY SEQUENTIAL BACKUP DATABASE             *\n*                                                                    *\n* OUTPUT     -   NONE                                                *\n*                                                                    *\n* SYSTEM     -   MVS/XA 2.1.7.                                       *\n*                                                                    *\n* DATE       -   11/29/87                                            *\n*                                                                    *\n* MACROS     -   ACFINCVT,ACFSVC,CLOSE,GET,OPEN,MODESET,WTO          *\n*                                                                    *\n* DSECTS     -   ACCVT,LIDREC                                        *\n*                                                                    *\n*                                                                    *\n* REGISTERS  -   R0    -  ***  UNUSED BY MVS ***                     *\n*                R1    -  ***  UNUSED BY MVS ***                     *\n*                R2    -  ***  UNUSED   ***                          *\n*                R3    -  ACF2 CVT ADDRESS                           *\n*                R4    -  LIDREC ADDRESS                             *\n*                R5    -  SEC-VIO LOAD HALFWORD VALUE                *\n*                R6    -  ANY VALUE INDICATES LEAP YEAR              *\n*                R7    -  ADDRESS OF ACALT ERRMSG                    *\n*                R8    -  ***  UNUSED   ***                          *\n*                R9    -  ***  UNUSED   ***                          *\n*                R10   -  ***  UNUSED   ***                          *\n*                R11   -  ***  UNUSED   ***                          *\n*                R12   -  BASE REGISTER                              *\n*                R13   -  SYSTEM SAVE AREA ADDRESS                   *\n*                R14   -  RETURN TO MVS BRANCH ADDRESS               *\n*                R15   -  ACFVIOS PROGRAM ENTRY POINT ADDRESS        *\n*                                                                    *\n* LANGUAGE   -    OS/VS ASSEMBLER                                    *\n*                                                                    *\n* PRIVILEGES -    NONE                                               *\n*                                                                    *\n* ATTRIBUTES -    SUPERVISOR KEY 0 FOR ACF2 DATABASE UPDATE ROUTINE. *\n*                 AND ISSUANCE OF F ACF2,BACKUP OPERATOR COMMAND.    *\n*                 PROBLEM KEY 8 FOR REMAINDER OF PROGRAM.            *\n*                                                                    *\n**********************************************************************\n**********************************************************************\n*                                                                    *\n* PROGRAM FUNCTIONAL DESCRIPTION:                                    *\n*                                                                    *\n*                                                                    *\n*               1.) ACFVIOS READS THE ACF2 PRIMARY SEQUENTIAL BACKUP *\n*                   LOGONID DATABASE AND GETS THE ACF2 SECURITY      *\n*                   VIOLATION COUNTER (SEC-VIO).                     *\n*                                                                    *\n*                                                                    *\n*               2.) THE AMOUNT IN SEC-VIO SHOULD BE ADDED TO THE     *\n*                   CONTENTS OF THESE TWO FIELDS:                    *\n*                                                                    *\n*                   VIOS-MTD     ===>  MONTH-TO-DATE VIOLATIONS      *\n*                                                                    *\n*                   VIOS-CUM     ===>  TOTAL VIOLATIONS SINCE        *\n*                                      LOGONID WAS CREATED           *\n*                                                                    *\n*                                                                    *\n*               3.) SUSPEND ALL NON-RESTRICT,NON-STC LOGONIDS WITH   *\n*                   MORE THAN 5 VIOLATIONS IN THE SEC-VIO FIELD.     *\n*                                                                    *\n*                                                                    *\n*               4.) ZERO-OUT THE SEC-VIO FIELD FOR ALL LOGONIDS.     *\n*                                                                    *\n*                                                                    *\n*               5.) AFTER ALL LOGONIDS PROCESSED, ISSUE THE          *\n*                   'F ACF2,BACKUP' OPERATOR COMMAND AND NOTIFY      *\n*                   OPERATOR VIA WTO (IN WHITE) THAT BACKUP WAS      *\n*                   INITIATED.                                       *\n*                                                                    *\n**********************************************************************\n*********************************************\n*   CREATE PROGRAM EYECATCHER FOR A DUMP.   *\n*********************************************\n         USING ACFVIOS,R15              TEMP ADDRESSABILITY\n         B     ICATCHER                 BRANCH AROUND EYECATCHER\n         DC    C'ACFVIOS'               ACFVIOS PROGRAM\n         DC    C' '\n         DC    C'&SYSDATE'              GREGORIAN DATE\n         DC    C' '\n         DC    C'&SYSTIME'              GREGORIAN TIME\n         DS    0H                       RE-ESTABLISH ALIGNMENT\nICATCHER EQU   *\n         DROP  R15                  DONE WITH TEMP ADDRESSABILITY NOW\n*********************************************\n*   PERFORM ENTRY LOGIC.                    *\n*********************************************\n         STM   R14,R12,12(R13)          SAVE REGISTERS\n         LR    R12,R15                  ENTRY POINT ADDRESS LOAD\n         USING ACFVIOS,R12              SET ADDRESSABILITY\n         LR    R3,R13                   SAVE SYSTEM ADDRESS\n         ST    R13,SAVEAREA+4           SYSTEM ADDR IN MY SAVEAREA\n         LA    R13,SAVEAREA             ADDRESS OF MY SAVEAREA\n         ST    R13,8(R3)                MY SAVEAREA PUT IN SYSTEM\n*********************************************\n*   IF ACF2 IS ACTIVE, GET THE ACCVT        *\n*   ADDRESS AND SET ADDRESSABILITY TO IT    *\n*   FOR CVT=HAVE USE OF ACFSVC.             *\n*********************************************\n        ACFINCVT R3,NONE=NOACF2         GET ACF2 CVT (INLINE CODE)\n        USING  ACCVT,R3                 SET ADDRESSABILITY\n*********************************************\n*   PERFORM EDIT CHECKING TO SEE IF WE ARE  *\n*   GOING TO EXPIRE ANY LOGONIDS.           *\n*********************************************\n         OPEN  (LIDS,(INPUT))           OPEN BACKUP DATABASE\n         TM    LIDS+48,GOODOPEN         WAS OPEN SUCCESSFULL?\n         BZ    LIDSNO                   IF NOT, ISSUE MSG AND END\nREADID   GET   LIDS                     R1 HAS ADDRESS OF INPUT AREA\n         LR    R4,R1                    SAVE IT IN REGISTER 3\n         LA    R4,4(R4)                 BUMP PAST 4 BYTE RDW\n         USING LIDREC,R4                SET ADDRESSABILITY\n*********************************************\n*   THIS IS THE RESTRICTION LIST FOR THIS   *\n*   PROGRAM:                                *\n*                                           *\n*   1.)  NO SS LOGONIDS WILL GO THROUGH     *\n*        THIS CODE.                         *\n*                                           *\n*   2.)  DO NOT PROCESS CANCELLED LOGONIDS  *\n*                                           *\n*   3.)  DO NOT PROCESS SUSPENDED LOGONIDS  *\n*                                           *\n*   4.)  DO NOT PROCESS EXPIRED LOGONIDS    *\n*********************************************\n         CLC   LIDLID(2),SSPGMR         A SYSTEMS SUPPORT LOGONID\n         BE    READID                   IF SO, BYPASS PROCESSING\n         TM    LIDCFLAG,LIDCCAN+LIDCSUS CANCELLED OR SUSPENDED\n         BM    READID                   IF SO, BYPASS PROCESSING\n         CP    LIDEXPDT,PZERO4          LOGONID EXPIRED\n         BNE   READID                   IF SO, BYPASS PROCESSING\n*********************************************\n*   ADD THE SEC-VIO VALUE TO THE FOLLOWING  *\n*   FIELDS:                                 *\n*                                           *\n*   VIOS-MTD (LIDVMTD)   MONTH-TO-DATE      *\n*   VIOS-CUM (LIDVCUM)   TOTAL FOR LOGONID  *\n*                                           *\n*   THE RESULTING TOTALS SHOULD BE REPLACED *\n*   IN THE ACF2 DATABASE.                   *\n*********************************************\nCHKLID   XC    SECVIOV,SECVIOV          INITIALIZE EXTENDED ARE FIELD\n         XC    VIOMTDV,VIOMTDV          INITIALIZE EXTENDED ARE FIELD\n         XC    VIOCUMV,VIOCUMV          INITIALIZE EXTENDED ARE FIELD\n         XC    SUSPDV,SUSPDV            SET DEFAULT TO NOSUSPEND\n         LH    R5,LIDSECV               LOAD SEC-VIO\n         LTR   R5,R5                    ANY VALUE IN SEC-VIO?\n         BZ    READID                   IF NO VALUE THEN READ NEXT ID\n         LH    R1,LIDVMTD               LOAD VIOS-MTD\n         AR    R1,R5                    ADD SEC-VIO TO IT\n         ST    R1,VIOMTDV               SAVE IN XARE\n         LH    R1,LIDVCUM               LOAD VIOS-CUM\n         AR    R1,R5                    ADD SEC-VIO TO IT\n         ST    R1,VIOCUMV               SAVE IN ALTER REQUEST ENTRY\n*********************************************\n*   BUILD STATIC PORTION OF TYPE=A ACF2     *\n*   DATABASE ALTERATION PARAMETER LIST.     *\n*********************************************\n         MVI   ACAFCN,2                 SET LID UPDATE FUNCTION\n         MVI   ACASFCN,ACASALT          ALTER LOGONID RECORD\n         MVC   ACALID,LIDLID            SET LOGONID TO BE UPDATED\n         MVC   ACAUCB,WORDFFFF          SET FOR SUPERCALL\n         LA    R1,ERRMSG                OUR ERROR MESSAGE WORK AREA\n         ST    R1,ACAMSG                STORE IN ACALT CONTROL BLOCK\n*********************************************\n*   INVOKE TYPE=A DATABASE ALTERATION SVC   *\n*   TO REPLACE THE VIOS-MTD AND VIOS-CUM    *\n*   WITH OUR COMPUTED VALUES.               *\n*********************************************\n         LA    R1,VIOMTD                ADDRESS OF FIRST XARE\n         ST    R1,ACAAREB               SET IN ACALT BLOCK\n         LA    R1,VIOMTDL+VIOCUML       TOTAL XARE LENGTHS\n         ST    R1,ACAAREL               SET IN ACALT BLOCK\n         MODESET MODE=SUP,KEY=ZERO      SUPERVISOR STATE KEY 0\n         ACFSVC ACALT,TYPE=A,NONE=ENDLIDS,CVT=HAVE    UPDATE FIELDS\n         LR    R2,R15                   SAVE RETURN CODE\n         MODESET MODE=PROB,KEY=NZERO    PROBLEM STATE KEY 8\n         LTR   R2,R2                    WAS RETURN CODE GOOD?\n         BZ    SUSPPROC                 IF SO, CONTINUE\n         LA    R7,WTOMSG+4              SET ACF2 BUILD WTO\n         WTO   MF=(E,(R7))              ISSUE ACF2 ERROR MESSAGE\n*********************************************\n*   INVOKE TYPE=A DATABASE ALTERATION SVC   *\n*   TO SUSPEND THE LOGONID IF THE LOGONID   *\n*   DOES NOT HAVE THE 'RESTRICT' OR 'STC'   *\n*   ATTRIBUTE AND HAS MORE THAN 5 SECURITY  *\n*   VIOLATIONS (SEC-VIO).                   *\n*********************************************\nSUSPPROC TM    LIDMFLG,LIDMRST+LIDMSTC  RESTRICT OR STC ONLY\n         BNZ   SECPROC                  IF SO, DO NOT SUSPEND!\n         CH    R5,H5                    DO WE HAVE 5 VIOLATIONS?\n         BNH   SECPROC                  IF NOT, GO ZERO OUT SEC-VIO\n         LA    R1,SUSPD                 ADDRESS OF FIRST XARE\n         ST    R1,ACAAREB               SET IN ACALT BLOCK\n         LA    R1,SUSPDL                TOTAL XARE LENGTHS\n         ST    R1,ACAAREL               SET IN ACALT BLOCK\n         MVI   SUSPDV,SUSPNDID          INDICATE LOGONID SUSPENSION\n         MODESET MODE=SUP,KEY=ZERO      SUPERVISOR STATE KEY 0\n         ACFSVC ACALT,TYPE=A,NONE=ENDLIDS,CVT=HAVE    UPDATE FIELDS\n         LR    R2,R15                   SAVE RETURN CODE\n         MODESET MODE=PROB,KEY=NZERO    PROBLEM STATE KEY 8\n         LTR   R2,R2                    WAS RETURN CODE GOOD?\n         BZ    SECPROC                  IF SO, CONTINUE\n         LA    R7,WTOMSG+4              SET ACF2 BUILD WTO\n         WTO   MF=(E,(R7))              ISSUE ACF2 ERROR MESSAGE\n*********************************************\n*   INVOKE TYPE=A DATABASE ALTERATION SVC   *\n*   TO REPLACE THE SEC-VIO ACF2 FIELD WITH  *\n*   OUR VALUE IN ORDER TO ZERO IT OUT.      *\n*********************************************\nSECPROC  LA    R1,SECVIO                ADDRESS OF FIRST XARE\n         ST    R1,ACAAREB               SET IN ACALT BLOCK\n         LA    R1,SECVIOL               TOTAL XARE LENGTHS\n         ST    R1,ACAAREL               SET IN ACALT BLOCK\n         MODESET MODE=SUP,KEY=ZERO      SUPERVISOR STATE KEY 0\n         ACFSVC ACALT,TYPE=A,NONE=ENDLIDS,CVT=HAVE    UPDATE FIELDS\n         LR    R2,R15                   SAVE RETURN CODE\n         MODESET MODE=PROB,KEY=NZERO    PROBLEM STATE KEY 8\n         LTR   R2,R2                    WAS RETURN CODE GOOD?\n         BZ    NEXTLID                  IF SO, CLOSE INPUT FILE\n         LA    R7,WTOMSG+4              SET ACF2 BUILD WTO\n         WTO   MF=(E,(R7))              ISSUE ACF2 ERROR MESSAGE\nNEXTLID  B     READID                   GET NEXT LOGONID\n*********************************************\n*   AFTER ALL LOGONID PROCESSING, ISSUE     *\n*   THE 'F ACF2,BACKUP' OPERATOR COMMAND    *\n*   TO UPDATE THE BACKUP SEQUENTIAL         *\n*   DATABASE.                               *\n*********************************************\nENDLIDS  CLOSE (LIDS)                   CLOSE SEQUENTIAL DATABASE\n         WTO   'ACFVIOS:  ACF2 BACKUP INITIATED',ROUTCDE=1,DESC=2\n         MODESET MODE=SUP,KEY=ZERO      SUPERVISOR STATE KEY 0\n         LA    R1,OPERCMD               ADDRESS OF MESSAGE\n         SR    R0,R0                    ZERO REGISTER 0\n         SVC   34                       ISSUE OPERATOR COMMAND\n         MODESET MODE=PROB,KEY=NZERO    PROBLEM STATE KEY 8\n*********************************************\n*   PERFORM EXIT LOGIC.                     *\n*********************************************\nFINIS    L     R13,SAVEAREA+4           SYSTEM SAVE AREA ADDRESS\n         SR    R15,R15                  SET GOOD RETURN CODE\n         LM    R0,R12,20(R13)           RESTORE ALL EXCEPT 14,15\n         L     R14,12(R13)              RESTORE RETURN ADDRESS\n         BR    R14                      RETURN TO CALLER\n*********************************************\n*   ERROR ROUTINES.                         *\n*********************************************\nNOACF2   WTO  'ACFVIOS: ACF2 IS NOT ACTIVE',                           +\n               ROUTCDE=1,DESC=2\n         B     FINIS\nLIDSNO   WTO  'ACFVIOS: LIDS INPUT FILE OPEN FAILED',                  +\n               ROUTCDE=1,DESC=2\n         B     FINIS\n*********************************************\n*        C O N S T A N T S                  *\n*********************************************\nSAVEAREA DS    18F\nWORDFFFF DC    XL4'FFFFFFFF'  INDICATE SUPERCALL FUNCTION\nH5       DC    H'5'\nX1       DC    X'1'\nUSEREXP  DS    XL1            REPORT INDICATOR BYTE\nPZERO4   DC    PL4'0'         PACKED VALUE OF 0 LENGTH OF 4\nSSPGMR   DC    C'SS'          SYSTEMS SUPPORT PROGRAMMER\nOPERCMD  DC    0D'0'\n         DC    AL2(L'BKPCMD+4)           4 BYTES PLUS COMMAND LENGTH\n         DC    XL2'00'                   FILLER\nBKPCMD   DC    C'F ACF2,BACKUP'          OPERATOR COMMAND\n*********************************************\n*        D C B    DEFINITIONS               *\n*********************************************\nLIDS     DCB   DDNAME=LIDS,DSORG=PS,MACRF=GL,EODAD=ENDLIDS\n*********************************************\n*  LOGONID DATABASE UPDATE PARAMETER LIST   *\n*********************************************\n         ACALT DSECT=NO           PARM LIST FOR LID UPDATE FUNCTION\n*********************************************\n*                                           *\n*  EXTENDED ALTER REQUEST ENTRIES FOR:      *\n*                                           *\n*  VIOS-MTD      MONTH-TO-DATE VIOLATIONS   *\n*  VIOS-CUM      CUMULATIVE VIOLATIONS      *\n*                                           *\n*********************************************\n         DS    0H                 ROUND UP TO HALFWORD BOUNDARY\nVIOMTD   DC    AL2(VIOMTDL)       LENGTH OF ALTER REQUEST ENTRY\n         DC    X'00'              MORE ENTRIES FOLLOW\n         DC    AL1(AREBREP)       REPLACE BINARY FIELD\n         DC    CL8'VIOS-MTD'      NAME OF FIELD TO MODIFY\n         DC    X'1000'            INDICATES AN EXTENDED ARE\n         DC    AL2(VIOMTDF-VIOMTD) LENGTH OF FIXED SECTION\n         DC    AL2(VIOMTDF-VIOMTD) OFFSET TO VALUE SECTION\nVIOMTDF  DC    XL2'4'             MUST BE 4 FOR AREBREP\nVIOMTDV  DS    XL4                MOVE BINARY VALUE HERE\nVIOMTDL  EQU   *-VIOMTD           TOTAL LENGTH OF VIOMTD\n         DS    0H                 ROUND UP TO HALFWORD BOUNDARY\nVIOCUM   DC    AL2(VIOCUML)       LENGTH OF ALTER REQUEST ENTRY\n         DC    X'80'              INDICATES LAST ALTER REQUEST ENTRY\n         DC    AL1(AREBREP)       REPLACE BINARY FIELD\n         DC    CL8'VIOS-CUM'      NAME OF FIELD TO MODIFY\n         DC    X'1000'            INDICATES AN EXTENDED ARE\n         DC    AL2(VIOCUMF-VIOCUM) LENGTH OF FIXED SECTION\n         DC    AL2(VIOCUMF-VIOCUM) OFFSET TO VALUE SECTION\nVIOCUMF  DC    XL2'4'             MUST BE 4 FOR AREBREP\nVIOCUMV  DS    XL4                MOVE BINARY VALUE HERE\nVIOCUML  EQU   *-VIOCUM           TOTAL LENGTH OF VIOCUM\n*********************************************\n*                                           *\n*  EXTENDED ALTER REQUEST ENTRIES FOR:      *\n*                                           *\n*  SUSPEND       LOGONID SUSPEND INDICATOR  *\n*                                           *\n*********************************************\n         DS    0H                 ROUND UP TO HALFWORD BOUNDARY\nSUSPD    DC    AL2(SUSPDL)        LENGTH OF ALTER REQUEST ENTRY\n         DC    X'80'              INDICATES LAST ALTER REQUEST ENTRY\n         DC    AL1(ARESREP)       REPLACE SWITCH FIELD\n         DC    CL8'SUSPEND'       NAME OF FIELD TO MODIFY\n         DC    X'1000'            INDICATES AN EXTENDED ARE\n         DC    AL2(SUSPDF-SUSPD)  LENGTH OF FIXED SECTION\n         DC    AL2(SUSPDF-SUSPD)  OFFSET TO VALUE SECTION\nSUSPDF   DC    XL2'1'             MUST BE 1 FOR ARESREP\nSUSPDV   DS    XL1                MOVE SWITCH VALUE HERE\nSUSPDL   EQU   *-SUSPD            TOTAL LENGTH OF SUSPD\n*********************************************\n*                                           *\n*  EXTENDED ALTER REQUEST ENTRY FOR:        *\n*                                           *\n*  SEC-VIO       ACF2 SECURITY VIOLATION    *\n*                COUNTER                    *\n*                                           *\n*********************************************\n         DS    0H                 ROUND UP TO HALFWORD BOUNDARY\nSECVIO   DC    AL2(SECVIOL)       LENGTH OF ALTER REQUEST ENTRY\n         DC    X'80'              INDICATES LAST ALTER REQUEST ENTRY\n         DC    AL1(AREBREP)       REPLACE BINARY FIELD\n         DC    CL8'SEC-VIO'       NAME OF FIELD TO MODIFY\n         DC    X'1000'            INDICATES AN EXTENDED ARE\n         DC    AL2(SECVIOF-SECVIO) LENGTH OF FIXED SECTION\n         DC    AL2(SECVIOF-SECVIO) OFFSET TO VALUE SECTION\nSECVIOF  DC    XL2'4'             MUST BE 4 FOR AREBREP\nSECVIOV  DS    XL4                MOVE BINARY VALUE HERE\nSECVIOL  EQU   *-SECVIO           TOTAL LENGTH OF SECVIO\n*********************************************\n*  EXPANSION OF WRITE-TO-OPERATOR (WTO)     *\n*  MESSAGE FOR ACALT MESSAGE AREA           *\n*********************************************\nWTOMSG   DS    0F\n         DC    AL2(WTOMSGL-4)\nMCSFLAG  DC    B'1000000000000000'\nERRMSG   DS    CL128              ACALT MESSAGE AREA\nDESCFLG  DC    B'1000000000000000'\nROUTFLG  DC    B'0000000000100000'\nWTOMSGL  EQU   *-WTOMSG\n*********************************************\n*        D S E C T S   AND                  *\n*        E Q U A T E S                      *\n*********************************************\nAREBREP  EQU   1                  INDICATES REPLACE BINARY FIELD\nARESREP  EQU   6                  INDICATES REPLACE SWITCH FIELD\nSUSPNDID EQU   X'10'\nGOODOPEN EQU   X'10'\nHEXFF    EQU   X'FF'\n         REGISTER\n         ACCVT\n         LIDREC DSECT=YES\n         END  ACFVIOS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACFXPIRE": {"ttr": 1030, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ACFXPIRE CSECT\n TITLE 'ACF2 USER-WRITTEN LOGONID EXPIRATION UTILITY'\n**********************************************************************\n* NAME       -   ACFXPIRE                                            *\n*                                                                    *\n* AUTHOR     -   T. BRYANT                                           *\n*                                                                    *\n* FUNCTION   -   SCAN THE PRIMARY ACF2 SEQUENTIAL BACKUP DATABASE    *\n*                AND EXPIRE SELECTED LOGONIDS NOT USED IN 31 DAYS.   *\n*                                                                    *\n* INPUT      -   ACF2 PRIMARY SEQUENTIAL BACKUP DATABASE             *\n*                                                                    *\n* OUTPUT     -   NONE                                                *\n*                                                                    *\n* SYSTEM     -   MVS/XA 2.1.7.                                       *\n*                                                                    *\n* DATE       -   04/18/86                                            *\n*                                                                    *\n* LAST                                                               *\n* MODIFIED   -   12/30/87                                            *\n*                                                                    *\n* MACROS/DSECTS  ACCVT,ACARE,LIDREC,ACFINCVT,MODESET                 *\n*                                                                    *\n* REGISTERS  -   R0    -  *** USED BY MVS ***                        *\n*                R1    -  *** USED BY MVS ***                        *\n*                R2    -  USED BY TRANSLATE INSTRUCTIONS             *\n*                R3    -  ACF2 CVT ADDRESS                           *\n*                R4    -  LIDREC ADDRESS                             *\n*                R5    -  TODAY'S YEAR VALUE                         *\n*                R6    -  LAST-USED YEAR VALUE                       *\n*                R7    -  ADDRESS OF ACALT ERRMSG                    *\n*                R8    -  *** UNUSED ***                             *\n*                R9    -  *** UNUSED ***                             *\n*                R10   -  *** UNUSED ***                             *\n*                R11   -  *** UNUSED ***                             *\n*                R12   -  *** UNUSED ***                             *\n*                R13   -  SYSTEM SAVE AREA ADDRESS                   *\n*                R14   -  RETURN TO MVS BRANCH ADDRESS               *\n*                R15   -  ACFXPIRE PROGRAM ENTRY POINT ADDRESS       *\n*                                                                    *\n* LANGUAGE   -    OS/VS ASSEMBLER                                    *\n*                                                                    *\n* PRIVILEGES -    NONE                                               *\n*                                                                    *\n* ATTRIBUTES -    SUPERVISOR KEY 0 FOR ACTUAL LOGONID EXPIRATION     *\n*                 ROUTINE. PROBLEM KEY 8 FOR REMAINDER OF PROGRAM.   *\n*                                                                    *\n**********************************************************************\n        EJECT\n**********************************************************************\n* PROGRAM FUNCTIONAL DESCRIPTION:                                    *\n*                                                                    *\n*               1.) ACFXPIRE READS THE ACF2 PRIMARY SEQUENTIAL BACKUP*\n*                   LOGONID DATABASE AND COMPARES THE DATE OF LAST   *\n*                   SYSTEM ACCESS WITH THE CURRENT DATE.             *\n*                                                                    *\n*  CHANGED BY                                                        *\n*  CR #14758    2.) IF THE DATE-SET FIELD HAS THE CHARACTER '&' THEN *\n*                   THIS IS A PROTOTYPE LOGONID WHICH WILL NEVER BE  *\n*                   EXPIRED.                                         *\n*  CHANGED BY                                                        *\n*  CR #13293    3.) IF DATE OF LAST ACCESS (ACC-DATE) = 0 THEN       *\n*                                                                    *\n*                      DO                                            *\n*                          IF SETUP DATE (DATE-SET) IS GREATER THAN  *\n*                          31 THEN EXPIRE THE LOGONID                *\n*                      END                                           *\n*                                                                    *\n*  CHANGED BY                                                        *\n*  CR #13293    4.) IF DATE OF LAST ACCESS (ACC-DATE) \u00ac= 0 THEN      *\n*                                                                    *\n*                      DO                                            *\n*                          IF ACC-DATE IS GREATER THAN 31 THEN       *\n*                          EXPIRE THE LOGONID                        *\n*                      END                                           *\n**********************************************************************\n        EJECT\n**********************************************************************\n*                   IF ANY OF THE FOLLOWING IS TRUE THEN THE         *\n*                   LOGONID WILL NEVER BE EXPIRED!                   *\n*                                                                    *\n*                   - ANY USER PRIVILEGES (NON-CNCL,SECURITY,ETC.)   *\n*                                                                    *\n*                   - LOGONIDS BEGINNING WITH SS                     *\n**********************************************************************\n        EJECT\n**********************************************************************\n*                                                                    *\n*  ADDED BY                                                          *\n*  CR #20587                                                         *\n*                                                                    *\n*       THE ACFSVC MACRO WAS CHANGED TO CVT=HAVE TO BUILD INLINE     *\n*       CODE INSTEAD OF INVOKING THE $ACFGCVT MODULE EXTERNAL TO     *\n*       THIS PROGRAM.                                                *\n*                                                                    *\n*       THE INFORMATION ASSET PROTECTION GROUP HAS REQUESTED THAT    *\n*       THE REPORT BE DELETED FROM THIS PROGRAM SINCE IT IS NO       *\n*       LONGER NEEDED.  REDID REGISTER SETTINGS FOR CLARITY.         *\n*                                                                    *\n*       THIS PROGRAM NOW USED EXTENDED ALTER REQUEST ENTRIES FOR     *\n*       FUTURE RELEASE COMPATIBILITY.                                *\n*                                                                    *\n**********************************************************************\n         STM   R14,R12,12(R13)              SAVE REGISTERS\n         LR    R12,R15                      ENTRY POINT ADDRESS LOAD\n         USING ACFXPIRE,R12                 SET ADDRESSABILITY\n         LR    R3,R13                       SAVE SYSTEM ADDRESS\n         ST    R13,SAVEAREA+4               SYSTEM ADDR IN MY SAVEAREA\n         LA    R13,SAVEAREA                 ADDRESS OF MY SAVEAREA\n         ST    R13,8(R3)                    MY SAVEAREA PUT IN SYSTEM\n*********************************************\n*   FIRST CHECK TO SEE IF ACF2 IS ALIVE AND *\n*   AND WELL!                               *\n*********************************************\n         ACFINCVT R3,NONE=NOACF2   IF NO ACF2 BRANCH TO NOACF2 LABEL\n         USING ACCVT,R3\n*********************************************\n*   PERFORM EDIT CHECKING TO SEE IF WE ARE  *\n*   GOING TO EXPIRE ANY LOGONIDS.           *\n*********************************************\n         OPEN  (LIDS,(INPUT))     OPEN ACF2 PRIMARY SEQUENTIAL DSN\n         TM    LIDS+48,GOODOPEN   WAS OPEN SUCCESSFULL???\n         BZ    LIDSNO             NO, ISSUE MSG AND END\nREADID   GET   LIDS               R1 ADDRESS HAS INPUT AREA\n         LR    R4,R1              SAVE IT IN R4\n         LA    R4,4(R4)           BUMP PAST RDW\n         USING LIDREC,R4          SET ADDRESSABILITY TO IT\n         ICM   R1,15,LIDEXPDT     LOAD EXPIRE FIELD\n         O     R1,MAKEPACK        MAKE SURE IT IS PACKED\n         ST    R1,LIDEXPDT        PUT BACK IN FIELD\n         CP    LIDEXPDT,PZERO4    LOGONID IN EXPIRE STATE?\n         BNE   READID              NO, READ NEXT LOGONID\n*********************************************\n*   IF THE DATE-SET LOGONID FIELD HAS THE   *\n*   CHARACTER '&' THEN IT A PROTOTYPE       *\n*   LOGONID WHICH WILL NEVER EXPIRE.        *\n*********************************************\n         CLC   LIDIAPS,ANDSGN     IS IT AN AMPERSAND?\n         BE    READID             YES, BYPASS PROCESSING IT\n         CLC   LIDLID(2),SSPGMR   IS LOGONID A SYSTEMS SUPPORT PGMR\n         BE    READID             YES, BYPASS PROCESSING IT\n         CLI   LIDTFLAG,LIDTUSR   IS THIS A NORMAL USER?\n         BE    SPECATTR           YES, ANY SPECIAL ATTRIBUTES?\n         B     READID             SECURITY,AUDIT,CONSULT,PROJ LEADER\nSPECATTR TM    LIDMFLG,LIDMRST+LIDMNCNL+LIDMRSTA+LIDMSTC ATTRIBUTES?\n         BNZ   READID             IF SO BYPASS PROCESSING IT\n*********************************************\n*   DETERMINE IF THE LOGONID HAS NOT BEEN   *\n*   USED FOR 31 DAYS.                       *\n*                                           *\n*   CHECK THE DATE OF LAST ACCESS           *\n*   (ACC-DATE).                             *\n*                                           *\n*   IF IT IS 0 THEN USE THE DATE-SET IAP    *\n*   FIELD TO CALCULATE DATE LAST USED.      *\n*                                           *\n*   IF IT IS NOT 0 THEN USE THE ACC-DATE    *\n*   DATE OF LAST ACCESS FIELD TO CALCULATE  *\n*   LAST DATE USED.                         *\n*********************************************\n         ICM   R1,15,LIDADATE           LOAD ACC-DATE FIELD\n         O     R1,MAKEPACK              MAKE SURE IT IS PACKED\n         ST    R1,LIDADATE              PUT BACK IN FIELD\n         CP    LIDADATE,PZERO4          ACC-DATE IS 0?\n         BNE   NOT0\n         ICM   R1,15,LIDSETP            LOAD DATE-SET FIELD\n         O     R1,MAKEPACK              MAKE SURE IT IS PACKED\n         ST    R1,LIDSETP               PUT BACK IN FIELD\n         CP    LIDSETP,PZERO4           IS DATE-SET 0 - SHOULDNT BE\n         BNE   SETDATE                     IF NOT, SET WORK FIELD\n         MVC   LIDSETP,MAY1986          SET MAY 1ST,1986 AS DEFAULT\nSETDATE  ZAP   PACKDATE,LIDSETP         USE DATE-SET FOR CALCULATION\n         B     FIGURE31                 SEE IF USED WITHIN 31 DAYS\n*\nNOT0     ZAP   PACKDATE,LIDADATE        USE ACC-DATE FOR CALCULATION\n*\nFIGURE31 TIME  DEC                      GET TIME (R0) AND DATE (R1)\n         ST    R1,DATENOW               SAVE TODAY'S DATE FOR LATER\n         LA    R1,DATENOW               ADDRESS OF TODAY'S DATE\n         SLR   R5,R5                    ZERO OUT\n         ICM   R5,12,0(R1)              GET TODAY'S YEAR VALUE\n         SRL   R5,16                    SHIFT TO LOW-ORDER POSITIONS\n         LA    R1,PACKDATE              ADDRESS OF LAST-USED DATE\n         SLR   R6,R6                    ZERO OUT\n         ICM   R6,12,0(R1)              GET LAST-USED YEAR VALUE\n         SRL   R6,16                    SHIFT TO LOW-ORDER POSITIONS\n         CR    R5,R6                    ARE THEY EQUAL?\n         BE    SHORTSUB                 WE CAN DO SIMPLE SUBTRACT\n         SLR   R5,R5                    ZERO OUT\n         TM    PACKDATE+1,X'01'         IS IT AN ODD YEAR?\n         BO    NOLEAPYR                   YES, CAN NOT BE LEAP YEAR\n         ZAP   WORKP3,DAY366            366 DAYS TO A LEAP YEAR\n         B     SUBPACK                  GO DO SUBTRACT\nNOLEAPYR ZAP   WORKP3,DAY365            365 DAYS TO A LEAP YEAR\nSUBPACK  SP    WORKP3,PACKDATE+2(2)     HOW MANY DAYS LEFT LAST YEAR\n         AP    WORKP3,DATENOW+2(2)      HOW MANY DAYS USED THIS YEAR\n         ZAP   DAYNO,WORKP3             PUT BACK IN DAYNO FIELD\n         B     COMPPACK                 GO DO COMPARE\nSHORTSUB ZAP   DAYNO,DATENOW+2(2)       NO. OF DAYS SINCE LAST ACCESS\n         SP    DAYNO,PACKDATE+2(2)      NO. OF DAYS SINCE LAST ACCESS\nCOMPPACK CP    DAYNO,P31                LOGONID NOT USED 31 DAYS\n         BL    READID                    NO, READ NEXT ID\n*********************************************\n*   WE HAVE FOUND A LOGONID NOT USED FOR 31 *\n*   DAYS.  ISSUE INTERNAL ACF2 REQUEST FOR  *\n*   LOGONID EXPIRATION.                     *\n*********************************************\n         MVI   ACAFCN,2                 SET LID UPDATE FUNCTION\n         MVI   ACASFCN,ACASALT          LOGONID TO EXPIRED\n         LA    R1,ERRMSG                LOAD MESSAGE ADDRESS\n         ST    R1,ACAMSG                SET IN ACF2 CONTROL BLOCK\n         MVC   ACALID,LIDLID            SET LOGONID TO BE EXPIRED\n         MVC   ACAUCB,WORDFFFF          SET FOR SUPERCALL\n         LA    R1,EXPIRE                ADDRESS OF OUR XARE\n         ST    R1,ACAAREB               SET IN ACF2 CONTROL BLOCK\n         ZAP   EXPIREV,DATENOW          SET DATE TO EXPIRE\n         LA    R1,EXPIREL               SET XARE BUFFER LENGTH\n         ST    R1,ACAAREL               SET IN ACF2 CONTROL BLOCK\n         MODESET MODE=SUP,KEY=ZERO      SUPERVISOR STATE KEY 0\n         ACFSVC ACALT,TYPE=A,NONE=ENDLIDS,CVT=HAVE    EXPIRE LOGONID\n         LR    R2,R15                   SAVE RETURN CODE\n         MODESET MODE=PROB,KEY=NZERO    PROBLEM STATE KEY 8\n         LTR   R2,R2                    WAS RETURN CODE GOOD?\n         BZ    READID                   READ NEXT LOGONID\n         LA    R7,WTOMSG+4              SET ACF2 BUILD WTO\n         WTO   MF=(E,(R7))              ISSUE ACF2 ERROR MESSAGE\n*********************************************\n*   AFTER ALL LOGONID PROCESSING, ISSUE     *\n*   THE 'F ACF2,BACKUP' OPERATOR COMMAND    *\n*   TO UPDATE THE BACKUP SEQUENTIAL         *\n*   DATABASE.                               *\n*********************************************\nENDLIDS  CLOSE (LIDS)                   CLOSE SEQUENTIAL DATABASE\n         WTO   'ACFXPIRE:  ACF2 BACKUP INITIATED',ROUTCDE=1,DESC=2\n         MODESET MODE=SUP,KEY=ZERO      SUPERVISOR STATE KEY 0\n         LA    R1,OPERCMD               ADDRESS OF MESSAGE\n         SR    R0,R0                    ZERO REGISTER 0\n         SVC   34                       ISSUE OPERATOR COMMAND\n         MODESET MODE=PROB,KEY=NZERO    PROBLEM STATE KEY 8\n*********************************************\n*   PERFORM EXIT LOGIC.                     *\n*********************************************\nFINIS    L     R13,SAVEAREA+4           SYSTEM SAVE AREA ADDRESS\n         SR    R15,R15                  SET GOOD RETURN CODE\n         LM    R0,R12,20(R13)           RESTORE ALL EXCEPT 14,15\n         L     R14,12(R13)              RESTORE RETURN ADDRESS\n         BR    R14                      RETURN TO CALLER\n*********************************************\n*   ERROR ROUTINES.                         *\n*********************************************\nNOACF2   WTO  'ACFXPIRE: ACF2 IS NOT ACTIVE',                          +\n               ROUTCDE=1,DESC=2\n         B     FINIS\nLIDSNO   WTO  'ACFXPIRE: LIDS INPUT FILE OPEN FAILED',                 +\n               ROUTCDE=1,DESC=2\n         B     FINIS\n*********************************************\n*  C O N S T A N T S  AND  E Q U A T E S    *\n*********************************************\nSAVEAREA DS    18F\nANDSGN   DC    X'50'          DATE-SET NEVER EXPIRE INDICATOR\nPACKDATE DS    PL4            DATE USED FOR CALCULATIONS (CR #13293)\nPZERO2   DC    PL2'0'         PACKED VALUE OF 0 LENGTH OF 2\nPZERO4   DC    PL4'0'         PACKED VALUE OF 0 LENGTH OF 4\nP31      DC    PL4'31'        NO. OF DAYS LOGONID NOT USED\nON       EQU   X'FF'          AT LEAST ONE LOGONID EXPIRED INDICATOR\nDAYNO    DC    PL4'0'         FULL BYTE WORK AREA\nWORKF    DC    F'0'           FULL BYTE WORK AREA\nDATENOW  DC    F'0'           FULL BYTE WORK AREA\nWORKP3   DC    PL3'0'\nDAY365   DC    PL3'365'\nDAY366   DC    PL3'366'\n         DS    0P\nMAY1986  DC    XL4'0086121F'  MAY 1ST,1986\nSSPGMR   DC    C'SS'          SYSTEMS SUPPORT PROGRAMMER\nLIDS     DCB   DDNAME=LIDS,DSORG=PS,MACRF=GL,EODAD=ENDLIDS\nWORDFFFF DC    XL4'FFFFFFFF'  INDICATE SUPERCALL FUNCTION\nMAKEPACK DC    F'15'          FORCE FIELD TO PACKED FORMAT\nOPERCMD  DC    0D'0'\n         DC    AL2(L'BKPCMD+4)           4 BYTES PLUS COMMAND LENGTH\n         DC    XL2'00'                   FILLER\nBKPCMD   DC    C'F ACF2,BACKUP'          OPERATOR COMMAND\n         ACALT DSECT=NO       PARM LIST FOR LID UPDATE FUNCTION\n*********************************************\n*                                           *\n*  EXTENDED ALTER REQUEST ENTRY FOR:        *\n*                                           *\n*  EXPIRE        ACF2 EXPIRED LOGONID       *\n*                DATE.                      *\n*                                           *\n*********************************************\n         DS    0H                 ROUND UP TO HALFWORD BOUNDARY\nEXPIRE   DC    AL2(EXPIREL)       LENGTH OF ALTER REQUEST ENTRY\n         DC    X'80'              INDICATES LAST ALTER REQUEST ENTRY\n         DC    AL1(AREPREP)       REPLACE PACKED FIELD\n         DC    CL8'EXPIRE'        NAME OF FIELD TO MODIFY\n         DC    X'1000'            INDICATES AN EXTENDED ARE\n         DC    AL2(EXPIREF-EXPIRE) LENGTH OF FIXED SECTION\n         DC    AL2(EXPIREF-EXPIRE) OFFSET TO VALUE SECTION\nEXPIREF  DC    XL2'4'             MUST BE 4 FOR AREPREP\nEXPIREV  DS    XL4                MOVE PACKED VALUE HERE\nEXPIREL  EQU   *-EXPIRE           TOTAL LENGTH OF EXPIRE\n*********************************************\n*  EXPANSION OF WRITE-TO-OPERATOR (WTO)     *\n*  MESSAGE FOR ACALT MESSAGE AREA           *\n*********************************************\nWTOMSG   DS    0F\n         DC    AL2(WTOMSGL-4)\nMCSFLAG  DC    B'1000000000000000'\nERRMSG   DS    CL128              ACALT MESSAGE AREA\nDESCFLG  DC    B'1000000000000000'\nROUTFLG  DC    B'0000000000100000'\nWTOMSGL  EQU   *-WTOMSG\n**********************\n*   D S E C T S      *\n**********************\nAREPREP  EQU   5                  INDICATES REPLACE PACKED FIELD\nGOODOPEN EQU   X'10'          GOOD OPEN INDICATOR\n         REGISTER\n         ACCVT\n         LIDREC DSECT=YES\n         END  ACFXPIRE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUTL": {"ttr": 1281, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " TITLE 'SMF IEFUTL FOR CONTINUOUS JOB WAIT TIME LIMIT'\n**********************************************************************\n* NAME       -   IEFUTL                                              *\n*                                                                    *\n* AUTHOR     -   T. BRYANT                                           *\n*                                                                    *\n* FUNCTION   -   ALLOW CONTROL OF CONTINUOUS WAIT TIME (FROM         *\n*                SMFPRMXX JWT PARAMETER) FROM THIS PROGRAM.          *\n*                SEE GENERAL LOGIC BELOW.                            *\n*                                                                    *\n* INPUT          R0   -    BINARY VALUE AS FOLLOWS:                  *\n* REGISTER                                                           *\n* VALUES                   0 - JOB CPU TIME LIMIT EXPIRED            *\n*                          4 - STEP CPU TIME LIMIT EXPIRED           *\n*                          8 - CONTINUOUS WAIT TIME LIMIT FOR THE    *\n*                              JOB EXPIRED (SMFPRMXX JWT PARAMETER)  *\n*                                                                    *\n*                R1   -    COMMON EXIT PARAMETER LIST (MAPPED BY     *\n*                              IEFJMR)                               *\n*                                                                    *\n* OUTPUT         R15  -    BINARY VALUE AS FOLLOWS:                  *\n* RETURN                                                             *\n* CODES                    0 - JOB PROCESSING IS TO BE CANCELLED     *\n*                          4 - JOB PROCESSING IS TO BE CONTINUED     *\n*                              WITH A TIME EXTENSION IN TIMER UNITS  *\n*                          8 - JOB PROCESSING IS TO BE CONTINUED     *\n*                              WITH A TIME EXTENSION IN SECONDS.     *\n*                                                                    *\n*                R1   -    BINARY VALUE OF TIME EXTENSION            *\n**********************************************************************\n         EJECT\n**********************************************************************\n* SYSTEM     -   MVS/XA                                              *\n*                                                                    *\n* DATE       -   07/29/87                                            *\n*                                                                    *\n* MACROS     -   GETMAIN,FREEMAIN,EXTRACT,LOCASCB                    *\n*                                                                    *\n* DSECTS     -   CVT,IHAASCB,IEESMCA,IEFJMR,IEFUCBOB,IHAPSA          *\n*                REGISTER                                            *\n*                                                                    *\n* REGISTERS  -   R0   -   INPUT PARAMETER REGISTER                   *\n*                R1   -   INPUT PARAMETER REGISTER                   *\n*                R2   -   TRT AND WORK REGISTER                      *\n*                R3   -   COMMON EXIT PARAMETER LIST ADDRESS         *\n*                R4   -   ADDRESS OF OUR ASCB                        *\n*                R5   -   ADDRESS OF TSO USERID OR BATCH JOBNAME     *\n*                R6   -   NUMBER OF OUR LOOKUP TABLE ENTRIES         *\n*                R7   -   ADDRESS OF A TABLE ENTRY                   *\n*                R8   -   NUMBER OF SECONDS FOR EXTENSION            *\n*                R9   -   ADDRESS OF PSA                             *\n*               R10   -   ADDRESS OF SAVE/WORK AREA FOR PACK         *\n*               R11   -   ** UNUSED **                               *\n*               R12   -   BASE REGISTER                              *\n*               R13   -   SYSTEM SAVE AREA ADDRESS                   *\n*               R14   -   RETURN ADDRESS                             *\n*               R15   -   ENTRY POINT ADDRESS/RETURN CODE            *\n*                                                                    *\n* LANGUAGE   -    OS/VS ASSEMBLER                                    *\n*                                                                    *\n* ATTRIBUTES -    REENTRANT,REFRESHABLE SUPERVISOR STATE KEY 0       *\n**********************************************************************\n         EJECT\n**********************************************************************\n*                                                                    *\n* GENERAL    -    TEST REGISTER 0 FOR 8 (CONTINUOUS WAIT TIME        *\n* LOGIC           LIMIT EXCEEDED FOR JOB).                           *\n*                                                                    *\n*                 IF REGISTER 0 IS NOT EQUAL TO 8 THEN LEAVE EXIT.   *\n*                                                                    *\n* |               IF THE JOB IS NOT A TSO SESSION (JMRFIND BIT       *\n* |               SETTING OFF IN JMRINDC) THEN CHECK TO SEE IF       *\n* |               THERE ARE ANY TAPE MOUNTS PENDING.  IF SO, THEN    *\n* |               EXTEND JOB WAIT TIME BY DEFAULT VALUE.  IF NOT,    *\n* |               ISSUE ABEND 522 IMMEDIATELY.                       *\n*                                                                    *\n**********************************************************************\n*                                                                    *\n*                 IF THE FIRST BYTE OF THE JMRUSEID FIELD IS         *\n*                 A X'40', THEN SET IT TO A C'1' TO INDICATE THAT    *\n*                 WE ARE GOING THROUGH THIS EXIT FOR THE FIRST TIME. *\n*                                                                    *\n*                 R15 = 8 AND EXIT PROGRAM.                          *\n*                                                                    *\n*                 IF THE FIRST BYTE OF THE JMRUSEID FIELD IS         *\n*                 A C'1', THEN SET IT TO A C'X' TO INDICATE THAT     *\n*                 A 522 ABEND WILL RESULT.                           *\n*                                                                    *\n*                 R15 = 0 AND EXIT PROGRAM.                          *\n*                                                                    *\n**********************************************************************\n*                                                                    *\n*  TIME EXTENSION                                                    *\n*  LOGIC:                                                            *\n*                 LOAD THE SMF JWTIME INITIALIZATION PARAMETER IN    *\n*                 FIELD SMCASJWT IN THE SMCA.                        *\n*                                                                    *\n*                 SUBTRACT THE SMF JWTIME INTIALIZATION PARAMETER    *\n*                 TIME FROM THE STORAGE TABLE JOB WAIT TIME FIELD.   *\n*                                                                    *\n*                 EXTEND THE JOB BY THE DIFFERENCE.                  *\n*                                                                    *\n**********************************************************************\n         EJECT\n************************************************************\n*   PERFORM REENTRANT HOUSEKEEPING.                        *\n************************************************************\nIEFUTL   CSECT\n         USING IEFUTL,R15           TEMPORARY ADDRESSABILITY\n         B     BYPASS               BRANCH AROUND EYECATCHER\n         DC    C'IEFUTL'            IEFUTL PROGRAM\n         DC    C' '\n         DC    C'&SYSDATE'          GREGORIAN DATE\n         DC    C' '\n         DC    C'&SYSTIME'          GREGORIAN DATE\nBYPASS   DS    0H                   RE-ESTABLISH ALIGNMENT\n         DROP  R15                  DONE WITH TEMP BASE NOW\n         STM   R14,R12,12(R13)      SAVE REGISTERS\n         LR    R12,R15              SET BASE REGISTER\n         USING IEFUTL,R12           SET ADDRESSABILITY\n************************************************************\n*   ONLY PROCESS IF CONTINUOUS WAIT TIME EXCEEDED.         *\n************************************************************\n         CH    R0,CONTWAIT          CONTINUOUS WAIT TIME EXCEEDED?\n         BNE   NOTIMEOT               IF NOT, CANCEL JOB\n************************************************************\n*   GET SAVE AND WORK AREA.                                *\n************************************************************\n         LA    R0,WORKL             SAVE AND WORK AREA\n         GETMAIN R,LV=(0)           STORAGE FOR SAVE AREA\n         ST    R13,4(R1)            SYSTEM S/A INTO OUR S/A\n         ST    R1,8(R13)            OUR S/A INTO SYSTEM S/A\n         LR    R13,R1               OUR S/A ADDRESS IN R13\n         L     R1,4(R13)            RELOAD SYSTEM S/A ADDRESS\n         LM    R0,R1,20(R1)         RELOAD REGS 0 AND 1\n         SR    R9,R9                SET TO ADDRESS LOCATION 0\n         USING PSA,R9               SET ADDRESSABILITY TO IT\n************************************************************\n*   HAVE WE BEEN THROUGH THIS EXIT BEFORE.                 *\n*                                                          *\n*   EXTRACT MVS/XA JWT FROM SMCA.                          *\n************************************************************\n         L     R3,0(R1)             COMMON EXIT PARAMETER LIST\n         USING JMR,R3               SET ADDRESSABILITY\n         CLC   JMRUSEID(1),CHAR1    2ND TIME IN THIS EXIT\n         BE    EXIT522              SORRY, A 522 ABEND WILL RESULT\n         L     R1,CVTLOC            GET CVT ADDRESS\n         USING CVT,R1               DSECT CVT\n         L     R1,CVTSMCA           GET SMCA ADDRESS\n         DROP  R1                   DONE WITH DSECT NOW!\n         USING SMCABASE,R1          DSECT SMCA\n         LR    R10,R13              ADDRESS OF S/A\n         USING WORKA,R10            DSECT IT\n         MVC   PACKSJWT+7(1),=X'0C' MAKE SURE IT IS PACKED\n         PACK  PACKSJWT,SMCASJWT    GET IN PACKED FORMAT\n         DROP  R1                   DONE WITH DSECT NOW!\n************************************************************\n*   CHECK TO SEE IF THIS IS A TSO SESSION OR A BATCH JOB.  *\n************************************************************\n         TM    JMRINDC,JMRFIND      TSO SESSION?\n         BO    TSOSESS                YES, GO PROCESS\n*    WTO  'IEFUTL: BATCH JOB PROCESSING SECTION',ROUTCDE=1,DESC=1\n*\n*\n*\n************************************************************\n* B A T C H    J O B    P R O C E S S I N G  S E C T I O N *\n************************************************************\n*\n************************************************************\n*  GET THE JOBNAME AND SEARCH ALL ONLINE TAPE UNITS FOR    *\n*  TAPE MOUNT PENDINGS USING MVS/XA IOSVSUCB SERVICE       *\n*  ROUTINE FOR OUR JOBNAME.                                *\n*                                                          *\n*  IF THERE ARE ANY TAPE MOUNTS PENDING, EXTEND THE JOB    *\n*  BY THE DEFAULT JOB WAIT TIME.                           *\n*                                                          *\n*  IF THERE ARE NO TAPE MOUNTS PENDING, ISSUE ABEND 522    *\n*  IMMEDIATELY.                                            *\n************************************************************\nBATCHJOB L     R1,CVTLOC           GET CVT ADDRESS\n         USING CVT,R1              DSECT CVT\n         L     R1,CVTUCBSC         LOAD UCB SCAN SERVICE ROUTINE\n         ST    R1,OURUCBSC         SAVE IN OUR WORK AREA\n         DROP  R1                  DONE WITH DSECT NOW!\n         L     R4,PSAAOLD          CURRENT ASCB ADDRESS\n         USING ASCB,R4             SET ADDRESSABILITY\n         L     R5,ASCBJBNI         ADDRESS OF BATCH JOB\n         DROP  R4                  DONE WITH DSECT NOW!\n************************************************************\n*   INITIALIZE OUR IOSVSUCB WORK AREA.                     *\n*   BUILD OUR PARMLIST FOR THE IOSVSUCB ROUTINE.           *\n************************************************************\n         TR    UCBWRK,TRTAB        SET TO BINARY ZEROES\n         LA    R1,UCBWRK           OUR 100-BYTE WORK AREA\n         ST    R1,UCBWRKA          SAVE IN PARMLIST\n         LA    R1,UCBDEVT          OUR DEVICE CLASS\n         ST    R1,UCBDEVTA         SAVE IN PARMLIST\n         MVI   UCBDEVT,UCB3TAPE    INDICATE TAPE UCBS ONLY\n         LA    R1,UCBADDR          OUR UCB ADDRESS POINTER\n         ST    R1,UCBADDRA         SAVE IN PARMLIST\n         OI    UCBADDR,X'80'       TURN ON HIGH-ORDER BIT\n************************************************************\n*   GO EXECUTE THE IOSVSUCB ROUTINE.                       *\n************************************************************\nTAPEUCB  LA    R1,UCBWRKA          ADDRESS OF PARAMETER LIST\n         L     R15,OURUCBSC        GET SCAN SERVICE ADDRESS\n         BALR  R14,R15             EXECUTE IT\n         LTR   R15,R15             NO MORE TAPE UCBS?\n         BNZ   EXIT522             IF NONE, THEN ISSUE 522 ABEND\n************************************************************\n*   WE HAVE GOT A TAPE UCB.  CHECK TO SEE IF TAPE UCB      *\n*   IS STANDARD UCB AND NOT UCB EXTENSION.  ALSO CHECK FOR *\n*   ONLINE AND A MOUNT PENDING STATUS.                     *\n************************************************************\n         L     R2,UCBADDR          GET RETURNED TAPE UCB ADDR\n         USING UCB,R2              DSECT IT\n         CLI   UCBID,X'FF'         A STANDARD UCB ?\n         BNE   TAPEUCB                IF NOT, GET ANOTHER UCB\n         TM    UCBSTAT,UCBONLI     IS TAPE UNIT ONLINE ?\n         BNO   TAPEUCB                IF NOT, GET ANOTHER UCB\n         TM    UCBDMCT,UCBMOUNT    IS TAPE MOUNT PENDING ?\n         BNO   TAPEUCB                IF NOT, GET ANOTHER UCB\n************************************************************\n*   GET THE ASID OF THE ADDRESS SPACE USING THIS TAPE      *\n*   UCB FROM THE UCB EXTENSIONS AREA.  CHECK THE ASCB      *\n*   AND GET THE JOBNAME.  SEE IF IT IS OUR JOBNAME.        *\n************************************************************\n         L     R1,UCBEXTPT         GET UCB TAPE EXTENSION\n         USING UCBCMEXT,R1         SET ADDRESSABILITY\n         LH    R1,UCBASID          GET ASID FOR THIS TAPE UCB\n         DROP  R1,R2               DONE WITH ADDRESSABILITY\n         LOCASCB ASID=(R1)         GET ASCB FOR THIS TAPE UCB\n         LTR   R1,R1               DO WE HAVE A VALID ASCB?\n         BP    GOTASCB               IF SO, GET ITS JOBNAME\n         B     TAPEUCB               IF NOT, GET NEXT UCB\nGOTASCB  LR    R2,R1               SAVE ASCB ADDRESS\n         USING ASCB,R2             SET ADDRESSABILITY\n         L     R1,ASCBJBNI         POINTER TO BATCH JOBNAME\n         CLC   0(8,R1),0(R5)       TAPE JOBNAME = OUR JOBNAME?\n         BE    DEFAULT               IF SO THEN SET DEFAULT WAIT TIME\n         B     TAPEUCB               IF NOT, GET NEXT UCB\n*\n*\n************************************************************\n*  T S O    S E S S I O N   P R O C E S S I N G            *\n*           S E C T I O N                                  *\n************************************************************\n*\n************************************************************\n*  EXTRACT ADDRESS OF TSO USERID FROM CURRENT ASCB.        *\n************************************************************\nTSOSESS  L     R1,CVTLOC            GET CVT ADDRESS\n         USING CVT,R1               DSECT CVT\n         DROP  R1                   DONE WITH DSECT NOW!\n         L     R4,PSAAOLD           CURRENT ASCB ADDRESS\n         USING ASCB,R4              SET ADDRESSABILITY\n         L     R5,ASCBJBNS          ADDRESS OF TSO USERID\n         DROP  R4                  DONE WITH DSECT NOW!\n************************************************************\n*  OUR TABLE JOB WAIT TIME MINUS THE MVS/XA SYSTEM JOB     *\n*  WAIT TIME.                                              *\n************************************************************\n         LA    R6,AUTHENT           NUMBER OF TABLE ENTRIES\n         LA    R7,AUTHTBL           ADDRESS OF LOOKUP TABLE\nAUTHLOOP CLC   0(2,R5),0(R7)        MATCH ON 2 DIGIT AREA CODE?\n         BE    LOADVAL              ===> A MATCH - PROCESS\n         BCT   R6,AUTHLOOP          IF OUT OF LOOP - CONTINUE\n************************************************************\n*  IF THE TSO SESSION IS NOT FOUND IN THE TABLE - USE A    *\n*  DEFAULT JOB WAIT TIME OF 30 MINUTES (FOR BATCH DEFAULT  *\n*  ALSO).                                                  *\n************************************************************\nDEFAULT  LA    R8,30                DEFAULT OF 30 MINUTES\n         B     GETJWT               FIGURE SMF JWT TIME\nLOADVAL  LH    R8,2(R7)             GET LAST TWO BYTE TIME VALUE\nGETJWT   CVB   R15,PACKSJWT         PUT SMF JWTIME IN R15\n         DROP  R10                  DONE WITH DSECT NOW\n         SR    R8,R15               SUBTRACT IBM SMF JWTIME VALUE\n         BP    TIMELEFT             IF POSITIVE, MULTIPLY BY 60\n         B     EXIT522              IF NEGATIVE, ISSUE 522 ABEND\n************************************************************\n*  THE TABLE JWTIME MINUS THE IBM JWTIME HAS YIELDED A     *\n*  POSITIVE RESULT SO ALLOW ONE EXTENSION.                 *\n************************************************************\nTIMELEFT MH    R8,SIXTY             CONVERT TO SECONDS\n         MVC   JMRUSEID(1),CHAR1    ONE AND ONLY TIME EXTENSION\n         LA    R0,WORKL             SAVE AREA LENGTH\n         LR    R1,R13               LOAD OUR S/A ADDRESS\n         L     R13,4(R13)           RESTORE SYSTEM S/A ADDRESS\n         FREEMAIN R,LV=(0),A=(1)    FREE SAVE AREA\n         LR    R15,R8               SAVE NUMBER OF SECONDS TO EXTEND\n         LM    R0,R12,20(R13)       RESTORE REGISTERS 0 THRU 12\n         LR    R1,R15          ==>  RESET NUMBER OF SECONDS TO EXTEND\n         L     R14,12(R13)          RESTORE RETURN ADDRESS\n         LA    R15,8           ==>  A SECONDS TYPE EXTENSION RC=8\n         BR    R14                  RETURN TO CALLER\n************************************************************\n*  THE TABLE JWTIME MINUS THE IBM JWTIME HAS YIELDED A     *\n*  NEGATIVE RESULT INDICATING THAT A 522 ABEND SHOULD      *\n*  RESULT.                                                 *\n************************************************************\nEXIT522  MVC   JMRUSEID(1),CHARX    WE'VE BEEN HERE BEFORE\n         LA    R0,WORKL             SAVE AREA LENGTH\n         LR    R1,R13               LOAD OUR S/A ADDRESS\n         L     R13,4(R13)           RESTORE SYSTEM S/A ADDRESS\n         FREEMAIN R,LV=(0),A=(1)    FREE SAVE AREA\nNOTIMEOT LM    R0,R12,20(R13)       RESTORE REGISTERS 0 THRU 12\n         L     R14,12(R13)          RESTORE RETURN ADDRESS\n         SLR   R15,R15         ==>  INDICATE 522 ABEND RC=0\n         BR    R14                  RETURN TO CALLER\n************************************************************\n*        C O N S T A N T S\n************************************************************\nCHAR1    DC    C'1'\nCHARX    DC    C'X'\nBINZERO  EQU   0                    A BINARY 0\nSIXTY    DC    H'60'                SECONDS INDICATOR\nCONTWAIT DC    H'8'                 CONTINUOUS WAIT\nCVTLOC   EQU   16                   CVT ADDRESS OFFSET\nTRTAB    DC    256X'00'             BINARY ZERO TRANSLATE TABLE\n         LTORG\n************************************************************\n*        T S O    S E S S I O N    L O O K U P             *\n*        T A B L E                                         *\n************************************************************\nAUTHTBL  DS    0H\n         DC    CL2'SS',AL2(10)   SS TSO IDS 10 MINUTE JOB WAIT\n         DC    CL2'ZZ',AL2(05)   ZZ TSO IDS 05 MINUTE JOB WAIT\n         DC    CL2'ZZ',AL2(05)   ZZ TSO IDS 05 MINUTE JOB WAIT\nAUTHENT  EQU   (*-AUTHTBL)/4     NO. OF TABLE ENTRIES\n************************************************************\n*        D S E C T S                                       *\n************************************************************\nWORKA    DSECT\nSAVEAREA DS    18F\n         DS    0D            FORCE DOUBLEWORD ALIGNMENT\nPACKSJWT DS    PL8           PACKED SMCASJWT VALUE\n         DS    0F            FORCE FULLWORD ALIGNMENT\nOURUCBSC DS    F             LOADED FROM CVTUCBSC CVT VCON\nUCBWRKA  DS    F             ADDRESS OF UCBWRK 100-BYTE WORK AREA\nUCBDEVTA DS    F             ADDRESS OF DEVICE CLASS BYTE\nUCBADDRA DS    F             ADDRESS OF WORD TO CONTAIN UCB ADDRESS\nUCBADDR  DS    F             ADDRESS OF WORD TO CONTAIN UCB ADDRESS\n         DS    0D            FORCE DOUBLEWORD ALIGNMENT\nUCBWRK   DS    XL100         IOSVSUCB 100-BYTE WORK AREA\nUCBDEVT  DS    XL1           DEVICE CLASS BYTE - TAPE\nWORKL    EQU   *-WORKA\n         CVT    DSECT=YES,LIST=NO\n         IHAPSA DSECT=YES,LIST=NO\n         IHAASCB\n         IEESMCA\n         IEFJMR\nUCB      DSECT\n         IEFUCBOB LIST=YES,PREFIX=NO\n         REGISTER\n         END     IEFUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IGGPRE00": {"ttr": 1288, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "IGGPRE00 CSECT\n**********************************************************************\n* NAME       -   IGGPRE00                                            *\n*                                                                    *\n* AUTHOR     -   T. BRYANT                                           *\n*                                                                    *\n* FUNCTION   -   LIMIT NEW DATASET ALLOCATION BY VOLUME SERIAL       *\n*                NUMBER RANGE (SUCH AS STM-,VSM-,ETC) VIA ACF2       *\n*                RESOURCE VALIDATION ON VOLUME NAME.                 *\n* INPUT                                                              *\n* PARAMETER                                                          *\n* REGISTER   -   R1  -    DASDM EXIT PARAMETER LIST                  *\n*                                                                    *\n* SYSTEM     -   MVS/SP AND MVS/XA                                   *\n*                                                                    *\n* DATE       -   12/04/86                                            *\n*                                                                    *\n* MACROS     -   GETMAIN,FREEMAIN,ACFINCVT,ACFGUCB,WTO               *\n*                                                                    *\n* DSECTS     -   IECIEXPL,ACCVT,ACFINCVT,ACFGUCB                     *\n*                ACFASVT,IHAPSA,IHAASCB,ACCVT,ACUCB,IEFUCBOB         *\n*                                                                    *\n*                                                                    *\n* REGISTERS  -   R0   -   *** USED BY MVS ***                        *\n*                R1   -   *** USED BY MVS ***                        *\n*                R2   -   SAVE REGISTER FOR DASDM RETURN CODE        *\n*                R3   -   EXIT PARAMETER LIST FROM REGISTER 1        *\n*                R4   -   ACF2 RESOURCE VALIDATION DSECT ADDRESS     *\n*                R5   -   ACF2 CVT ADDRESS                           *\n*                R6   -   ACF2 ACUCB ADDRESS                         *\n*                R7   -   WTO ERROR MESSAGE WORK AREA ADDRESS        *\n*                R8   -     *** UNUSED ***                           *\n*                R9   -     *** UNUSED ***                           *\n*               R10   -     *** UNUSED ***                           *\n*               R11   -   1ST BASE REGISTER                          *\n*               R12   -   2ND BASE REGISTER                          *\n*               R13   -   SYSTEM SAVE AREA ADDRESS                   *\n*               R14   -   RETURN ADDRESS                             *\n*               R15   -   ENTRY POINT AND RETURN CODES               *\n*                                                                    *\n* PROGRAM    -  ONLY NON-VIO ALLOCATE DASDM ACCESSES WILL BE         *\n* LOGIC         PROCESSED.                                           *\n*                                                                    *\n*               GET THE VOLUME SERIAL NUMBER FROM THE UCB ADDRESS    *\n*               AND PERFORM AN ACF2 RESOURCE CALL BASED ON THE       *\n*               VOLUME SERIAL NUMBER TO A PRE-STORED ACF2 RESOURCE   *\n*               RULE.                                                *\n*                                                                    *\n*               IF ACF2 RECOMMENDS TO LOG THIS REQUEST A CICA        *\n*               DASDM WARNING MESSAGE IS WRITTEN TO THE USERS        *\n*               JOBLOG AND AN ACF2 RESOURCE LOGGING RECORD IS        *\n*               CREATED.  A RETURN CODE OF 0 IS PASSED TO DASDM      *\n*               TO ALLOW THIS REQUEST.                               *\n*                                                                    *\n*  |----------| IF ACF2 RECOMMENDS TO DENY THIS REQUEST BUT A        *\n*  |  ADDED   | $USERDATA(WARN) IS DETECTED IN THE ACGREDTA ACGRSRC  *\n*  |          | RULE BUFFER FIELD,  ACF2 WILL LOG THIS ACCESS AS     *\n*  | 10/30/86 | A VIOLATION.  A DASDM WARNING MESSAGE IS WRITTEN TO  *\n*  |          | THE USERS JOBLOG AND AN ACF2 RESOURCE LOGGING RECORD *\n*  |          | IS CREATED.  A RETURN CODE OF 0 IS PASSED TO DASDM   *\n*  |----------| TO ALLOW THIS REQUEST.                               *\n*                                                                    *\n*               IF ACF2 RECOMMENDS TO DENY THIS REQUEST A CICA       *\n*               DASDM ABORT MESSAGE IS WRITTEN TO THE USERS          *\n*               JOBLOG AND AN ACF2 RESOURCE LOGGING RECORD IS        *\n*               CREATED.  A RETURN CODE OF 8 IS PASSED TO DASDM      *\n*               TO DENY THIS REQUEST.                                *\n*                                                                    *\n* PROGRAM    -  CORRECT OF INTERMITTENT ABEND0C4S IN IGGPRE00 WAS    *\n* CORRECTIONS   DONE BY CORRECTING EVERY USE OF THE WKADSCT TO USE   *\n*               R13 AND NOT R4 (I WAS DROPPING 72 BYTES THIS WAY     *\n*               INDEXING INTO THE WTOANSW USER WTO AREA.) THE WTOANSW*\n*               USER WTO AREA WAS ENLARGED TO 200 BYTES FROM 100 AS  *\n*               A SAFETY VALVE.                                      *\n*                                                                    *\n*               LOADING OF A SECOND BASE REGISTER WAS SHORT BY 1     *\n*               BYTE.                                                *\n**********************************************************************\n         USING IGGPRE00,R15                 TEMP ADDRESSABILITY\n         B     DASDFC                       BRANCH AROUND EYECATCHER\n         DC    C'IGGPRE00'                  IGGPRE00 PROGRAM\n         DC    C' '\n         DC    C'&SYSDATE'                  GREGORIAN DATE\n         DC    C' '\n         DC    C'&SYSTIME'                  GREGORIAN TIME\n         DS    0H                           RE-ESTABLISH ALIGNMENT\nDASDFC   EQU   *\n         USING EXITPARM,R1                  SET ADDRESSABILITY TO IT\n         CLI   IEXFUNC,IEXALL               ALLOCATE FUNCTION?\n         BE    CHKVIO                           IF SO, SEE IF VIO\n         B     CLEAR15\nCHKVIO   TM    IEXFLAG,IEXVIO               VIO DATASET\n         BZ    PROCESS                          IF NOT PROCESS NOW\nCLEAR15  SLR   R15,R15                      GOOD RETURN CODE\n         BR    R14                          BACK TO MVS NOW\n         DROP  R1,R15                       DONE WITH ADDRESSABILITY\n********************************************\n*  PERFORM REENTRANT ENTRY                 *\n*  HOUSEKEEPING.                           *\n********************************************\nPROCESS  STM   R14,R12,12(R13)              SAVE REGISTERS\n         LR    R11,R15                      SET BASE REGISTER\n         USING IGGPRE00,R11,R12             SET ADDRESSABILITY\n         LA    R0,WKALEN                    SAVE AREA AND WORK AREA\n         GETMAIN R,LV=(0)                   GETMAIN OUR SAVE AREA\n         ST    R13,4(R1)                    SYSTEM S/A INTO OUR S/A\n         ST    R1,8(R13)                    OUR S/A INTO SYSTEM S/A\n         LR    R13,R1                       OUR S/A ADDRESS IN R13\n         L     R1,4(R13)                    RELOAD SYSTEM S/A ADDRESS\n         LM    R0,R1,20(R1)                 RELOAD REGS 0 AND 1\n         LA    R12,4095(R11)                LOAD 2ND BASE REGISTER\n         LA    R12,1(R12)\n********************************************\n*  CLEAR AND INITIALIZE ENTRY/RESOURCE     *\n*  PARAMETER BLOCK.                        *\n********************************************\n         LR    R3,R1                        EXIT PARAMETER LIST ADDRESS\n         USING EXITPARM,R3                  SET ADDRESSABILITY TO IT\n         LR    R4,R13                       OUR SAVE/WORK AREA ADDRESS\n         LA    R4,72(R4)                    OUR WORK AREA ADDRESS\n         LR    R0,R4                        GET ADDRESS TO CLEAR\n         LR    R14,R4                       GET ADDRESS TO CLEAR\n         LA    R1,WKALEN-72                 SET LENGTH TO CLEAR\n         SR    R15,R15                      SECOND LENGTH TO ZERO\n         MVCL  R0,R14                       BINARY ZERO STORAGE\n********************************************\n*  GET ACF2 CVT VIA SUBSYSTEM INTERFACE    *\n*  CONTROL BLOCKS                          *\n********************************************\n         ACFINCVT R5,NONE=EXIT0             GET ACF2 CVT\n         USING ACCVT,R5                     SET ADDRESSABILITY TO IT\n         USING ACGRSRC,R4                   SET ADDRESSABILITY TO IT\n         TR    ACGRNAME,TRTAB40             BLANK OUT RESOURCE NAME\n         ACFGUCB (6),NONE=EXIT0,INLINE=YES,SYS=AOS2  ACUCB ADDRESS\n         USING ACUCB,R6\n         L     R1,ACULRECP                  ADDRESS OF LOGONID RECORD\n         USING LIDREC,R1                    DSECT IT\n         SLR   R2,R2                        INSURE RC=0\n         CLC   LIDLID(2),SS                 A TECH SUPPORT LOGONID\n         BE    EXIT0                        DOES NOT GO THRU EXIT!\n         DROP  R1                           DONE WITH DSECT NOW\n********************************************\n* SET UP RESOURCE ENTRY/RESOURCE PARAMETER *\n* BLOCK                                    *\n********************************************\n         LR    R1,R6                        SAVE ACUCB ADDRESS\n         ST    R1,ACGUCB                    SAVE FOR RESOURCE CALL\n         MVI   ACGFCN,4                     SET FUNCTION CODE\n         MVI   ACGSFCN,ACGSINP              INTERPRET FUNCTION\n         MVI   ACGRFLGS,0                   INIT RETURN FLAGS\n         LA    R1,MESSAGE                   MESSAGE AREA ADDRESS\n         ST    R1,ACGMSG                    STORE IN CONTROL BLOCK\n         LA    R1,RULEDATA                  RULE DATA AREA ADDRESS\n         ST    R1,ACGREDTA                  STORE IN CONTROL BLOCK\n         LA    R1,L'RULEDATA                RULE DATA AREA LENGTH\n         ST    R1,ACGREDTL                  STORE IN CONTROL BLOCK\n         MVC   ACGRTYPE,RESTYPE             RESOURCE TYPE = RVOL\n         L     R1,IEXUCB                    DASDM UCB ADDRESS\n         USING UCB,R1                       SET UCB ADDRESSABILITY\n         MVC   ACGRNAME(6),UCBVOLI          SET RESOURCE VOLUME NAME\n         DROP  R1                           DONE WITH ADDRESSABILITY\n********************************************\n* ISSUE ACF2 RESOURCE VALIDATION CALL      *\n********************************************\n         ACFSVC ACGRSRC,TYPE=A,CVT=HAVE,NONE=EXIT0\n         LTR   R15,R15                      ACF2 CALL SUCCESSFULL?\n         DROP  R5                           DONE WITH ADDRESSABILITY\n         BZ    CHKFLG                       YES, CHECK FLAG BYTE\n********************************************\n* IF NO RULE WAS FOUND (RULE DATA LENGTH   *\n* IS X'FFFF'), THEN ALLOW ACCESS. THIS IS  *\n* TO ELIMINATE THE REQUIREMENT FOR A       *\n* GLOBAL RULE OF THE FORM:                 *\n*                                          *\n*     $KEY(********) TYPE(VOL)             *\n*            ALLOW                         *\n*                                          *\n*                                          *\n* NOTE: THIS GLOBAL RULE IS NEEDED TO      *\n*       DEACTIVATE ACF2 INTERNAL SECURITY  *\n*       LOGGING.                           *\n********************************************\n         SLR   R15,R15                      MAKE SURE R15 IS 0\n         L     R1,ACGREDTA                  ADDRESS OF RULE BUFFER\n         CLC   FOXES,0(R1)                  ANY RULE FOUND\n         BE    NORULE                       IF NONE, ALLOW ACCESS\n********************************************\n* ACF2 SVC CALL WAS SUCCESSFULL (R15=0)    *\n*                                          *\n* IF THE RULE SPECIFIES ALLOW -            *\n* ALLOW THE ACCESS                         *\n*                                          *\n* (IF THE RULE SPECIFIED LOG               *\n*  THE LOGGING OPERATION HAS               *\n*  ALREADY COMPLETED)                      *\n*                                          *\n* IF THE RULE SPECIFIES PREVENT -          *\n* ABORT AND LOG THE ACCESS                 *\n********************************************\nCHKFLG   CLI   ACGRFLGS,0              DID ACF2 ALLOW ACCESS?\n         BE    EXIT0                   IF 0, ALLOW ACCESS\n********************************************\n* CHECK TO SEE IF THIS IS A REAL ABORT OR  *\n* IS THERE A $USERDATA(WARN) TO INDICATE   *\n* RUNNING THE RULE IN WARN-ONLY MODE.      *\n********************************************\nABORT    L     R1,ACGREDTA             ADDRESS OF RULE BUFFER\n         CLC   0(2,R1),ZERO2           ANY $USERDATA FIELD?\n         BNE   WARN                        IF SO, CHECK FOR WARN MODE\n********************************************\n* ABORT THE REQUEST BY ADDING USER-BUILT   *\n* ABORT MESSAGE TO USERS JOBLOG AND SETTING*\n* RETURN CODE TO 8 TO FAIL DASDM REQUEST.  *\n********************************************\n         LR    R1,R13                  OUR SAVE/WORK AREA\n         USING WKADSCT,R1              OUR WORK DSECT\n         LA    R7,WTOANSW              OUR WTO WORK AREA\n         USING VIOMSGD,R7              WTO OUTPUT DSECT\n         DROP  R1                      DONE WITH DSECT NOW\n         TR    0(VIOMSGL,R7),TRTAB40   FIRST BLANK IT OUT\n         MVC   0(VIOMSGL,R7),VIOMSG    INITIALIZE WTO AREA\n         MVC   VOLVIO,ACGRNAME         VOLUME NAME\n         TR    DSNVIO(22),TRTAB40      CLEAR DSNAME FIELD\n         L     R15,IEXDSN              ADDRESS OF DSNAME\n         MVC   DSNVIO(22),0(R15)       DSNAME (FIRST 22 CHARACTERS)\n         LA    R2,8                    TELL DASDM TO REJECT REQUEST\n         WTO   MF=(E,(R7))             TELL USER ABOUT IT\n         WTO   MF=(E,MEDMSG)           TO CONTACT MEDIA MANAGEMENT\n         B     EXIT8                   AND FAIL IT\n********************************************\n* CHECK FOR A $USERDATA(WARN) IN THE RULE  *\n* BUFFER.  IF IT IS FOUND, LET ACF2 LOG    *\n* THE ACCESS VIOLATION.  ISSUE A WARNING   *\n* WTO MESSAGE AND SET A RETURN CODE OF 0   *\n* TO LET DASDM ALLOW THIS REQUEST.         *\n********************************************\nWARN     LR    R1,R13                  OUR SAVE/WORK AREA\n         USING WKADSCT,R1              OUR WORK DSECT\n         LA    R7,WTOANSW              OUR WTO WORK AREA\n         USING WRNMSGD,R7              WTO OUTPUT DSECT\n         DROP  R1                      DONE WITH DSECT NOW\n         TR    0(WRNMSGL,R7),TRTAB40   FIRST BLANK IT OUT\n         MVC   0(WRNMSGL,R7),WRNMSG    INITIALIZE WTO AREA\n         MVC   VOLWRN,ACGRNAME         VOLUME NAME\n         TR    DSNWRN(22),TRTAB40      CLEAR DSNAME FIELD\n         L     R15,IEXDSN              ADDRESS OF DSNAME\n         MVC   DSNWRN(22),0(R15)       DSNAME (FIRST 22 CHARACTERS)\n         WTO   MF=(E,(R7))             TELL USER ABOUT IT\n         WTO   MF=(E,MEDMSG)           TO CONTACT MEDIA MANAGEMENT\n         B     EXIT0                   BUT ALLOW THE REQUEST\n********************************************\n* SET RETURN CODE TO DASDM AND FREE THE    *\n* GETMAINED SAVE AREA AND ACF2 WORK AREA   *\n********************************************\nNORULE   EQU   *                       PROCESSING IF NO RULE FOUND\nEXIT0    SLR   R2,R2                   INSURE RC=0\nEXIT8    LR    R1,R13                  LOAD OUR S/A ADDRESS\n         L     R13,4(,R13)             RESTORE SYSTEM S/A ADDRESS\n         LA    R0,WKALEN               GET LENGTH\n         FREEMAIN R,LV=(0),A=(1)       FREE S/A\n         LR    R15,R2                  SET RETURN CODE FOR DASDM\n         LM    R0,R12,20(R13)          RESTORE ALL EXCEPT 14,15\n         L     R14,12(R13)             RESTORE RETURN ADDRESS\n         BR    R14                     RETURN TO CALLER\n********************************************\n*     C O N S T A N T S   E T C.           *\n********************************************\nSS       DC    C'SS'                   TECH SUPPORT LOGONID\nRESTYPE  DC    C'RVOL'                 RESOURCE TYPE\nFOXES    DC    X'FFFFFFFF'             NO RECORD INDICATOR\nZERO2    DC    X'0000'                 LNTH OF $USERDATA FROM ACGREDTA\nTRTAB40  DC    256X'40'                BLANKS TRANSLATE TABLE\nVIOMSG   DS    0F\n         DC    AL2(VIOMSGL-4)\n         DC    B'1000000000000000'\n         DC    CL31'IGGPRE00: ALLOCATE FOR DATASET '\n         DC    CL22'                      '    DSNAME\n         DC    C' ON VOLUME '\n         DC    CL6'      '                     VOLUME\n         DC    C' DENIED BY INSTALLATION EXIT'\n         DC    B'0000000000000000'\n         DC    B'0000000000100000'   ROUTCDE=11\nVIOMSGL  EQU   *-VIOMSG\nWRNMSG   DS    0F\n         DC    AL2(WRNMSGL-4)\n         DC    B'1000000000000000'\n         DC    CL31'IGGPRE00: ALLOCATE FOR DATASET '\n         DC    CL22'                      '    DSNAME\n         DC    C' ON VOLUME '\n         DC    CL6'      '                     VOLUME\n         DC    C' WILL SOON BE DENIED'\n         DC    B'0000000000000000'\n         DC    B'0000000000100000'   ROUTCDE=11\nWRNMSGL  EQU   *-WRNMSG\nMEDMSG   DS    0F\n         DC    AL2(MEDMSGL-4)\n         DC    B'1000000000000000'\n         DC    C'IGGPRE00: CONTACT MEDIA MANAGEMENT FOR ASSISTANCE'\n         DC    B'0000000000000000'\n         DC    B'0000000000100000'   ROUTCDE=11\nMEDMSGL  EQU   *-MEDMSG\n         LTORG\n********************************************\n*        D S E C T S  E T C.               *\n********************************************\nWKADSCT  DSECT\nSAVEAREA DS    18F                     SAVE AREA\n         TITLE 'ACF2 RESOURCE PARAMETER LIST BLOCK'\n         ACGRSRC DSECT=NO\n         SPACE\n*        ACF2 RULE DATA AREA\nRULEDATA DS    CL132                   RULE DATA AREA\n*        RULE DATA AREA: (HALFWORD LENGTH $USERDATA + $USERDATA) +\n*                        (HALFWORD LENGTH RULE DATA + RULE DATA) =\n*                        (2 + 64) + (2 + 64) = 132\n**********************************************************************\n*        ACF2 MESSAGE AREA\nMESSAGE  DS    CL128                   MESSAGE AREA\nWTOANSW  DS    CL200                   USER WTO AREA\nWKALEN   EQU   *-WKADSCT            TOTAL LENGTH OF WORKAREA\n********************************************\n*     USER-DEVELOPED ABORT MESSAGE DSECT.  *\n********************************************\nVIOMSGD  DSECT\n         DS    CL4     VIOMSGL AND BIT FLAGS\n         DS    CL31    IGGPRE00: ALLOCATE FOR DATASET\nDSNVIO   DS    CL22    FIRST 22 BYTES OF DATASET\n         DS    CL11    ON VOLUME\nVOLVIO   DS    CL6        VOLSER\n*        DS    CL??    DENIED BY INSTALLATION EXIT\n         SPACE\n********************************************\n*     USER-DEVELOPED WARN MESSAGE DSECT.   *\n********************************************\nWRNMSGD  DSECT\n         DS    CL4     WRNMSGL AND BIT FLAGS\n         DS    CL31    IGGPRE00: ALLOCATE FOR DATASET\nDSNWRN   DS    CL22    FIRST 22 BYTES OF DATASET\n         DS    CL11    ON VOLUME\nVOLWRN   DS    CL6        VOLSER\n*        DS    CL??    WILL SOON BE DENIED\n         SPACE\n*****************************************\n*        D S E C T S                    *\n*****************************************\nEXITPARM IECIEXPL                DASDM EXIT PARAMETER LIST\n*        PRINT  NOGEN\n         TITLE 'ACF2 COMMUNICATIONS VECTOR TABLE'\n         ACCVT  DSECT=YES\n         TITLE 'ACF2 USER CONTROL BLOCK'\n         ACUCB  DSECT=YES\n         TITLE 'ACF2 ADDRESS SPACE VECTOR TABLE'\n         ACFASVT DSECT=YES\n         TITLE 'ACF2 LOGONID RECORD'\n         LIDREC DSECT=YES\n         TITLE 'MVS COMMUNICATIONS VECTOR TABLE'\n         CVT    DSECT=YES\n         TITLE 'MVS PREFIXED STORAGE AREA'\n         IHAPSA\n         TITLE 'MVS ADDRESS SPACE CONTROL BLOCK'\n         IHAASCB\n         TITLE 'MVS UNIT CONTROL BLOCK DSECT'\nUCB      DSECT\n         IEFUCBOB\n         REGISTER\n         END IGGPRE00\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ISGGRNL0": {"ttr": 1541, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*          DATA SET ISGGRNL0   AT LEVEL 001 AS OF 11/21/86\n TITLE ' ISGGRNL0 - GRS RESOURCE NAME LISTS FOR COMBINED INSURANCE'\nISGGRNL0 CSECT\n         MACRO\n.********************************************************************.\n.*       THE GRSDEF MACRO DEFINITION WILL DEFINE GRS RESOURCE       *.\n.*       NAME LIST (RNL) DEFINITIONS.  THE USER MUST CREATE THE     *.\n.*       RESOURCE NAME LIST ENTRY POINT DEFINITION NAMES            *.\n.*       (ISGSIRNL,ISGSERNL,ISGRCRNL) AND INCLUDE THE END-OF-LIST   *.\n.*       (RNLESIEX,RNLESEEX,RNLERCEX) NAMES.  ALL ADDITIONAL        *.\n.*       INFORMATION ON GLOBAL RESOURCE SERIALIZATION RESOURCE      *.\n.*       NAME LISTS SHOULD REFER TO THE OS/VS2 MVS SPL:SUPERVISOR.  *.\n.*                                          04/05/84   TOM BRYANT   *.\n.********************************************************************.\n         GRSDEF &TYPE=,     GENERIC OR NON-GENERIC ENTRY               *\n               &QNAME=,     ENQ/RESERVE QNAME                          *\n               &RNAME=      ENQ/RESERVE RNAME\n         LCLA  &RNAMEL      LENGTH OF RNAME\n         LCLC  &RNAMEC      CHARACTER STRING RNAME\n         AIF   ('&TYPE' EQ 'GENERIC').GENER\n         AIF   ('&TYPE' EQ 'NONGENERIC').NGENER\n         AGO   .BADTYPE\n.NGENER  ANOP\n         DC    AL1(00)      NON-GENERIC ENTRY TYPE  HEX 00\n         AGO   .CHKRNML\n.GENER   ANOP\n         DC    AL1(64)      GENERIC ENTRY TYPE      HEX 40\n.CHKRNML ANOP\n&RNAMEC  SETC  '&RNAME'\n&RNAMEL  SETA  K'&RNAMEC\n         AIF   ('&RNAME' NE '').NORNME\n         DC    AL1(00)      NO RNAME VALUE\n         AGO   .CHKQNM\n.NORNME  ANOP\n         DC    AL1(&RNAMEL) LENGTH OF RNAME\n.CHKQNM  ANOP\n         DC    CL8'&QNAME'  QNAME\n         AIF   ('&RNAMEC' EQ '').FINIS\n         AIF   ('&TYPE' EQ 'GENERIC').PARTIAL\n         DC    C'&RNAMEC'   ACTUAL RNAME\n         AGO   .FINIS\n.PARTIAL ANOP\n         DC    C'&RNAMEC'   PARTIAL RNAME\n.FINIS   MEXIT\n.***********************************.\n.*       ERROR MESSAGES            *.\n.***********************************.\n.BADTYPE ANOP\n         MNOTE 20,'TYPE PARAMETER MUST BE GENERIC OR NONGENERIC'\n         MEND\n**********************************************************************\n*   START OF SPECIFICATIONS                                          *\n*                                                                    *\n*   MODULE-NAME = ISGGRNL0                                           *\n*                                                                    *\n*   CSECT-NAME = ISGGRNL0                                            *\n*                                                                    *\n*   DESCRIPTIVE-NAME = GLOBAL RESOURCE SERIALIZATION                 *\n*                      RESOURCE NAME LISTS                           *\n*                                                                    *\n*   STATUS = MVS/SP 1.3.3  JBB1329                                   *\n*            MVS/XA 2.1.1  JBB2110                                   *\n*                                                                    *\n*   FUNCTION = THIS NON-EXECUTABLE MODULE CONTAINS THE DEFAULT       *\n*              RESOURCE NAME LISTS (RNLS) TO BE USED BY GLOBAL       *\n*              RESOURCE SERIALIZATION (GRS). THREE LISTS ARE         *\n*              PROVIDED:                                             *\n*                                                                    *\n*              ISGSIRNL - THE \"SYSTEM INCLUSION\" LIST                *\n*              ISGSERNL - THE \"SYSTEMS EXCLUSION\" LIST               *\n*              ISGRCRNL - THE \"RESERVE CONVERSION\" LIST              *\n*                                                                    *\n*   MACRO 'GRSDEF' IN SS.PROD.MACLIB WILL DEFINE ALL USER ENTRIES    *\n*   (EXCEPT THE ISGSIRNL,ISGSERNL AND ISGRCRNL NAMES).               *\n*                                                                    *\n*   CHANGE HISTORY:                                                  *\n*                                                                    *\n*   11/12/84           ADDED GENERIC ACFVSAM QNAME ENTRY TO          *\n*                      EXCLUSION LIST AND NONGENERIC RNAME           *\n*                      OF SYS1.DAE (NEXT MVS/XA RELEASE) WITH        *\n*                      QNAME OF SYSDSN. ADDED SYS9- FOR TEMPORARY    *\n*                                                                    *\n*   11/12/84           ADDED SYS9- FOR TEMPORARY DATASETS EXCLUDED   *\n*                      FROM GRS INCLUSION PROCESSING FROM 1990 TO    *\n*                      1999.\n*                                                                    *\n*   11/12/84           ADDED ACF2 HIGH-LEVEL INDICES TO GENERIC      *\n*                      SYSVSAM QNAME IN GRS EXCLUSION RNL FOR THE    *\n*                      ACF2 VSAM DATABASES FOR MVS/SP 1.3.3 AND      *\n*                      MVS/XA 2.1.1 DFP LEVELS.                      *\n*                                                                    *\n*   04/12/85           JES2 CHECKPOINT RESERVE NAMED WAS INCORRECTLY *\n*                      PLACED IN THE INCLUSION RNL.  IT WAS MOVED TO *\n*                      THE EXCLUSION RNL SO AS NOT TO BE PROCESSED   *\n*                      BY GRS.                                       *\n**********************************************************************\n         EJECT\nISGGRNL0 CSECT\n         DC    C'ISGGRNL0'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\n         ENTRY ISGSIRNL\n         ENTRY ISGRCRNL\n         ENTRY ISGSERNL\nLAST     EQU   X'80'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  ISGSIRNL - INCLUSION RESOURCE NAME LIST                            *\n*                                                                     *\n***********************************************************************\n         SPACE\n         DS    0D\n         DC    CL8'ISGSIRNL'\nISGSIRNL EQU   *\n*************************************************\n*                                               *\n*        G E N E R I C    E N T R I E S         *\n*                                               *\n*************************************************\n         GRSDEF TYPE=GENERIC,QNAME=SYSDSN,RNAME=CICA.PROD\n         GRSDEF TYPE=GENERIC,QNAME=SYSDSN,RNAME=CICA.TEST\n         GRSDEF TYPE=GENERIC,QNAME=SYSDSN,RNAME=SS.PROD\n         GRSDEF TYPE=GENERIC,QNAME=SYSDSN,RNAME=SS.TEST\n         GRSDEF TYPE=GENERIC,QNAME=SYSDSN,RNAME=AL.PROD\n         GRSDEF TYPE=GENERIC,QNAME=SYSDSN,RNAME=AL.TEST\n         GRSDEF TYPE=GENERIC,QNAME=SYSDSN,RNAME=FA.PROD\n         GRSDEF TYPE=GENERIC,QNAME=SYSDSN,RNAME=FA.TEST\n         GRSDEF TYPE=GENERIC,QNAME=SYSDSN,RNAME=LF.PROD\n         GRSDEF TYPE=GENERIC,QNAME=SYSDSN,RNAME=LF.TEST\n         GRSDEF TYPE=GENERIC,QNAME=SYSDSN,RNAME=OP.PROD\n         GRSDEF TYPE=GENERIC,QNAME=SPFDSN\n         GRSDEF TYPE=GENERIC,QNAME=SYSIKJUA\n         GRSDEF TYPE=GENERIC,QNAME=SYSIKJBC\n*************************************************\n*                                               *\n*  N O N G E N E R I C    E N T R I E S         *\n*                                               *\n*************************************************\n         GRSDEF TYPE=NONGENERIC,QNAME=SYSDSN,RNAME=SYS1.VLINKLIB\n         GRSDEF TYPE=NONGENERIC,QNAME=SYSDSN,RNAME=SYS1.ULINKLIB\n         GRSDEF TYPE=NONGENERIC,QNAME=SYSDSN,RNAME=SYS1.MLINKLIB\n         GRSDEF TYPE=NONGENERIC,QNAME=SYSDSN,RNAME=SYS1.TLINKLIB\n         GRSDEF TYPE=NONGENERIC,QNAME=SYSDSN,RNAME=SYS1.XLINKLIB\nRNLESIEX EQU   *\n         DC    AL1(LAST)          * END-OF-LIST ENTRY\n         DC    XL1'00'            * NO RNAME\n         DC    CL8'RNLESIEX'      * SPECIAL NAME FOR INCLUSION LIST\n         EJECT\n***********************************************************************\n*                                                                     *\n*  ISGSERNL - EXCLUSION RESOURCE NAME LIST                            *\n*                                                                     *\n***********************************************************************\n         DS    0D\n         DC    CL8'ISGSERNL'\nISGSERNL EQU   *\n*************************************************\n*                                               *\n*        G E N E R I C    E N T R I E S         *\n*                                               *\n*************************************************\n***************************************************\n*  AT THE MVS/SP 1.3.3 AND MVS/XA 2.1.1 DFP LEVEL,*\n*  ALL 'SYSVSAM' QNAME ACCESSES FOR THE ACF2 VSAM *\n*  DATABASES SHOULD NOT USE GRS.                  *\n***************************************************\n         GRSDEF TYPE=GENERIC,QNAME=SYSVSAM,RNAME=VCICA1\n         GRSDEF TYPE=GENERIC,QNAME=SYSVSAM,RNAME=VCICA2\n***************************************************\n*  ALL 'SYSDSN' ACCESSES TO THE ACF2 VSAM CLUSTERS*\n*  SHOULD NOT USE GRS.  THIS WILL PREVENT PROBLEM *\n*  WITH 'P ACF2' WHEN GRS RING IS BROKEN OR HAS   *\n*  BEEN PREMATURELY DISCONNECTED.                 *\n***************************************************\n         GRSDEF TYPE=GENERIC,QNAME=SYSDSN,RNAME=VCICA1\n         GRSDEF TYPE=GENERIC,QNAME=SYSDSN,RNAME=VCICA2\n***************************************************\n*  ALL ACF2 DATABASE VALIDATIONS USE THE 'ACFVSAM'*\n*  NAME AND CANNOT TOLERATE GRS PROCESSING.       *\n***************************************************\n         GRSDEF TYPE=GENERIC,QNAME=ACFVSAM\n         GRSDEF TYPE=GENERIC,QNAME=SYSDSN,RNAME=SYS1.DUMP  DUMP DSNS\n         GRSDEF TYPE=GENERIC,QNAME=SYSDSN,RNAME=SYS1.MAN   SMF DSNS\n         GRSDEF TYPE=GENERIC,QNAME=SYSDSN,RNAME=SYS1.PAGE  PAGE DSNS\n         GRSDEF TYPE=GENERIC,QNAME=SYSDSN,RNAME=SYS8   TEMP DSNS\n         GRSDEF TYPE=GENERIC,QNAME=SYSDSN,RNAME=SYS9   TEMP DSNS\n         GRSDEF TYPE=GENERIC,QNAME=SYSCTLG    OS CVOL\n         GRSDEF TYPE=GENERIC,QNAME=SYSIGGV2   VSAM MASTER CATALOG\n         GRSDEF TYPE=GENERIC,QNAME=SYSZRPLW   DF/EF\n         GRSDEF TYPE=GENERIC,QNAME=SYSZVVDS   DF/EF\n         GRSDEF TYPE=GENERIC,QNAME=SYSVTOC    VTOC\n         GRSDEF TYPE=GENERIC,QNAME=SYSZJES2   JES2 CHECKPOINT\n*************************************************\n*                                               *\n*  N O N G E N E R I C    E N T R I E S         *\n*                                               *\n*************************************************\n         GRSDEF TYPE=NONGENERIC,QNAME=SYSDSN,RNAME=SYS1.DCMLIB\n         GRSDEF TYPE=NONGENERIC,QNAME=SYSDSN,RNAME=SYS1.LOGREC\n         GRSDEF TYPE=NONGENERIC,QNAME=SYSDSN,RNAME=SYS1.NUCLEUS\n         GRSDEF TYPE=NONGENERIC,QNAME=SYSDSN,RNAME=SYS1.STGINDEX\n         GRSDEF TYPE=NONGENERIC,QNAME=SYSDSN,RNAME=SYS1.SVCLIB\n         GRSDEF TYPE=NONGENERIC,QNAME=SYSDSN,RNAME=PASSWORD\n***************************************************\n*  MVS/XA 2.1.1 ADDED THE 'SYS1.DAE' DATASET FOR  *\n*  SVC DUMP SUPPRESSION.  MVS ALWAYS HAS RESERVE  *\n*  ABILITY TO THIS DATASET NEEDED FOR SYSTEM IPL. *\n***************************************************\n     GRSDEF TYPE=NONGENERIC,QNAME=SYSDSN,RNAME=SYS1.DAE\nRNLESEEX EQU   *\n         DC    AL1(LAST)          * END-OF-LIST ENTRY\n         DC    XL1'00'            * NO RNAME\n         DC    CL8'RNLESEEX'      * SPECIAL NAME FOR EXCLUSION LIST\n         EJECT\n***********************************************************************\n*                                                                     *\n*  ISGRCRNL - RESERVE CONVERSION RESOURCE NAME LIST                   *\n*                                                                     *\n***********************************************************************\n         DS    0D\n         DC    CL8'ISGRCRNL'\nISGRCRNL EQU   *\n*************************************************\n*                                               *\n*        G E N E R I C    E N T R I E S         *\n*                                               *\n*************************************************\n         GRSDEF TYPE=GENERIC,QNAME=SYSIEWLP    LINKAGE EDITOR\n         GRSDEF TYPE=GENERIC,QNAME=SPZAPLIB    IMASPZAP\n         GRSDEF TYPE=GENERIC,QNAME=UCC11CMT    UCC11 CMT\n         GRSDEF TYPE=GENERIC,QNAME=UCC11RSV    UCC11 JEHF\n         GRSDEF TYPE=GENERIC,QNAME=SPFDSN      ISPF/PDF\nRNLERCEX EQU   *\n         DC    AL1(LAST)          * END-OF-LIST ENTRY\n         DC    XL1'00'            * NO RNAME\n         DC    CL8'RNLERCEX'      * SPECIAL NAME FOR RESERVE CONVERSION\n         END   ISGGRNL0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IVP3480": {"ttr": 1546, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "**********************************************************************\n*                                                                    *\n* NAME       -   IVP3480                                             *\n*                                                                    *\n* AUTHOR     -   T. BRYANT                                           *\n*                                                                    *\n* FUNCTION   -   PERFORM INSTALLATION VERIFICATION OF 3480           *\n*                TAPE DRIVES IN FULL-FUNCTION MODE.                  *\n*                                                                    *\n* INPUT      -   NONE                                                *\n*                                                                    *\n* OUTPUT     -   VIA WTO FACILITY                                    *\n*                3480 CARTRIDGE WORKFILE                             *\n*                                                                    *\n* SYSTEM     -   MVS/XA                                              *\n*                                                                    *\n* DATE       -   07/05/88                                            *\n*                                                                    *\n* MACROS     -   CLOSE,DEVTYPE,OPEN,MGCR,MODESET,MSGDISP,NOTE,       *\n*                POINT,RDJFCB,SYNCDEV,WRITE,WTO                      *\n*                                                                    *\n* DSECTS     -   IHADVA,IEZDEB,IEFUCBOB                              *\n*                                                                    *\n*                                                                    *\n* REGISTERS  -   R0   -  *** USED BY MVS ***                         *\n*                R1   -  *** USED BY MVS ***                         *\n*                R2   -  WORK REGISTER AND CURRENT RETURN CODE       *\n*                R3   -  RECORD OUTPUT COUNTER AND WORK REGISTER     *\n*                R4   -  NEXT BLOCK ID IN MAIN STORAGE               *\n*                R5   -  NEXT BLOCK ID IN CONTROL UNIT BUFFER        *\n*                R6   -  BRANCH AND LINK REGISTER                    *\n*                R7   -  GETMAINED STORAGE FOR BLOCK WRITE           *\n*                R8   -  OUR TAPE DEB ADDRESS                        *\n*                R9   -  OUR TAPE UCB ADDRESS                        *\n*               R10   -  *** UNUSED ***                              *\n*               R11   -  *** UNUSED ***                              *\n*               R12   -  BASE REGISTER                               *\n*               R13   -  SYSTEM SAVE AREA ADDRESS                    *\n*               R14   -  RETURN ADDRESS                              *\n*               R15   -  ENTRY POINT ADDRESS AND RETURN CODE         *\n*                                                                    *\n**********************************************************************\n         EJECT\n**********************************************************************\n* LANGUAGE   -    OS/VS ASSEMBLER                                    *\n*                                                                    *\n* PRIVILEGES -    APF-AUTHORIZED FOR MGCR ROUTINE TO UNLOAD TAPE.    *\n*                                                                    *\n* OVERVIEW   -    3480 PROCESSING MACROS WILL ISSUE A WTO WITH THE   *\n*                 RETURN CODE.                                       *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*   1.)  ISSUE A DEVICE TYPE MACRO (DEVTYPE) TO MAKE SURE            *\n*                                                                    *\n*        OUR TAPE ALLOCATION IS A 3480 CARTRIDGE.                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*   2.)  OPEN THE DCB AND GETMAIN 32K OF STORAGE.                    *\n*                                                                    *\n*        WRITE 100 32K BLOCKS TO THE CARTRIDGE.                      *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*        THE USE OF A 32K BLOCK IS THE MAXIMUM BLOCK SIZE            *\n*                                                                    *\n*        SUPPORTED FOR THE 3480 TAPE SUBSYSTEM.  WE ARE              *\n*                                                                    *\n*        ENSURING THAT NO DATA BUFFERING IS OCCURRING IN             *\n*                                                                    *\n*        THE ACCESS METHOD BY USING THE BASIC SEQUENTIAL             *\n*                                                                    *\n*        ACCESS METHOD (BSAM) AND WRITING 32K BLOCKS.                *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*   3.)  ISSUE THE NOTE TYPE=ABS TO SAVE THE 3480 BLOCKID            *\n*                                                                    *\n*        OF THE LAST BLOCK TO BE WRITTEN IN STORAGE FOR OUR          *\n*                                                                    *\n*        DCB AND TO REPORT ON THE LEVEL OF 3480 CONTROL UNIT         *\n*                                                                    *\n*        DATA BUFFERING.  SAVE REGISTER 0 AND 1 CONTENTS FROM        *\n*                                                                    *\n*        ISSUANCE OF THE NOTE TYPE=ABS MACRO FOR LATER               *\n*                                                                    *\n*        PROCESSING.                                                 *\n*                                                                    *\n*                                                                    *\n**********************************************************************\n         EJECT\n**********************************************************************\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*   4.)  ISSUE CLOSE FOR OUR DCB AND POSITION THE FILE TO            *\n*                                                                    *\n*        REREAD BEFORE OPENING IT.                                   *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*   5.)  FROM REGISTER 0 AND 1 SAVED VALUES OF THE NOTE TYPE=ABS     *\n*                                                                    *\n*        MACRO, FIGURE OUT HOW MANY DATA BLOCKS ARE LEFT             *\n*                                                                    *\n*        IN THE 3480 CONTROL UNIT BUFFER.                            *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*   6.)  POSITION TO THE LAST BLOCK WRITTEN USING THE POINT          *\n*                                                                    *\n*        MACRO USING THE PREVIOUSLY SAVED 3480 BLOCKID.              *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*   7.)  WRITE ANOTHER 100 32K BLOCKS AND THEN ISSUE THE             *\n*                                                                    *\n*        SYNCDEV MACRO TO FORCE ALL DATA TO BE WRITTEN               *\n*                                                                    *\n*        FROM THE 3480 CONTROL UNIT BUFFER TO THE CARTRIDGE          *\n*                                                                    *\n*        BEFORE ANY OTHER COMMANDS ARE PERFORMED.                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*   8.)  CLOSE TAPE OUTPUT DCB AND POSITION THE FILE TO REREAD BEFORE*\n*                                                                    *\n*        REOPENING IT.  MODIFY THE TAPE OUTPUT DCB TO PERFORM IN     *\n*                                                                    *\n*        TAPE-WRITE-IMMEDIATE (OPTCD=W) MODE.                        *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*   9.)  USE RDJFCB AND OPEN TYPE=J TO TEST ANOTHER                  *\n*                                                                    *\n*        HIGH-SPEED BLOCK SEARCH TECHNIQUE.                          *\n*                                                                    *\n*                                                                    *\n**********************************************************************\n         EJECT\n**********************************************************************\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*  10.)  WRITE ANOTHER 100 32K BLOCKS TO THE 3480 TAPE               *\n*                                                                    *\n*        OUTPUT DCB IN TAPE-WRITE-IMMEDIATE MODE.                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*  11.)  ISSUE A SECOND SYNCDEV MACRO FOR INQUIRY ONLY               *\n*                                                                    *\n*        OF THE NUMBER OF DATA BLOCKS IN THE 3480 CONTROL            *\n*                                                                    *\n*        UNIT BUFFER.                                                *\n*                                                                    *\n*                                                                    *\n*        ATTENTION:  THIS VALUE MUST BE 0 OR WE ARE NOT              *\n*                                                                    *\n*                    OPERATING IN TAPE-WRITE-IMMEDIATE               *\n*                                                                    *\n*                    MODE!                                           *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*  12.)  FREEMAIN THE 32K GETMAINED WORKAREA.                        *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*  13.)  ISSUE THE MSGDISP RDY MACRO TO DISPLAY THE MESSAGE          *\n*                                                                    *\n*        'BYEBYE' ON THE 3480 TAPE UNIT DISPLAY.                     *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*  14.)  CLOSE TAPE OUTPUT DCB AND ISSUE UNLOAD OPERATOR COMMAND     *\n*        FOR ALLOCATED TAPE DRIVE.                                   *\n*                                                                    *\n*                                                                    *\n**********************************************************************\n         EJECT\n*\n*\n*************************************************\n*        PERFORM ENTRY HOUSEKEEPING             *\n*************************************************\n*\n*\nIVP3480  CSECT\n         STM   R14,R12,12(R13)              SAVE REGISTERS\n         LR    R12,R15                      ENTRY POINT ADDRESS LOAD\n         USING IVP3480,R12                  SET ADDRESSABILITY\n         LR    R3,R13                       SAVE SYSTEM ADDRESS\n         ST    R13,SAVEAREA+4               SYSTEM ADDR IN MY SAVEAREA\n         LA    R13,SAVEAREA                 ADDRESS OF MY SAVEAREA\n         ST    R13,8(R3)                    MY SAVEAREA PUT IN SYSTEM\n*\n*\n*************************************************\n*        ISSUE DEVTYPE MACRO TO MAKE SURE WE    *\n*        HAVE A 3480 CARTRIDGE TAPE3480         *\n*        ALLOCATION.                            *\n*************************************************\n*\n*\n         DEVTYPE D3480,DEVAREA\n         CH    R15,H4                       DDNAME TAPE3480 THERE?\n         BNE   MAPDEV                         IF SO, MAP DEVAREA\n         WTO   MF=(E,MSGNODD)               NO TAPE3480 DDNAME\n         B     FINIS                        AND EXIT\nMAPDEV   LA    R1,DEVAREA                   ADDRESS OF DEVTYPE AREA\n         USING DVAREA,R1                    SET ADDRESSABILITY\n         L     R1,DVAUCBTY                  UCBTYPE FULLWORD\n         DROP  R1                           DONE WITH DSECT NOW\n         C     R1,FULFUNC                   FULL FUNCTION 3480\n         BE    OPN3480                        IF SO, PROCESS\n         WTO   MF=(E,MSG3480)               NOT A 3480 CARTRIDGE\n         B     FINIS                        AND EXIT\n*\n*\n*************************************************\n*        OPEN OUR TAPE DCB.                     *\n*************************************************\n*\n*\nOPN3480  OPEN  (TAPE3480,(OUTPUT))          OPEN FILE\n         LA    R1,TAPE3480                  ADDRESS OF TAPE DCB\n         SR    R15,R15                      CLEAR FOR LATER USE\n         USING IHADCB,R1                    DSECT IT\n         TM    DCBOFLGS,DCBOFOPN            WAS OPEN SUCCESSFUL?\n         BO    GOODOPN1                     IF SO, THEN CONTINUE\n         IC    R2,DCBOFLGS                  LOAD DCBOFLGS FIELD\n         WTO   MF=(E,BADOPEN1)              INDICATE OPEN FAILED\n         B     FINIS                        AND EXIT\n         DROP  R1                           DONE WITH DSECT NOW\nGOODOPN1 WTO   MF=(E,MSGOPEN1)              INDICATE SUCCESSFUL OPEN\n*\n*\n*************************************************\n*        GETMAIN 32K TO WRITE 32K BLOCKS        *\n*        TO THE TAPE3480 DCB.                   *\n*************************************************\n*\n*\nGETSTGE  GETMAIN R,LV=K32                   GET THIS WORK AREA\n         LR    R7,R1                        SAVE ADDRESS\n         LA    R1,MSGGETM                   ADDRESS OF WTO MESSAGE\n         BAL   R6,ISSUWTO                   ISSUE MESSAGE\n         LR    R0,R7                        GET ADDRESS TO CLEAR\n         LR    R14,R0                       SET IT AGAIN\n         L     R1,F32                       SET LENGTH TO CLEAR\n         SR    R15,R15                      SECOND LENGTH TO ZERO\n         MVCL  R0,R14                       STORAGE TO BINARY ZEROES\n*\n*\n*************************************************\n*        SET UP LOOP TO WRITE OUT 100           *\n*        32K BLOCKS TO THE TAPE3480 DCB.        *\n*************************************************\n*\n*\n         L     R3,N100                      SET COUNTER FOR 100\nLOOP1    WRITE DECB1,SF,TAPE3480,(R7),K32   WRITE A BLOCK TO TAPE\n         CHECK DECB1                        WAS WRITE O.K.?\n         BCT   R3,LOOP1                     GOBACK\n*\n*\n*************************************************\n*        SAVE THE 3480 BLOCK ID OF THE NEXT     *\n*        DATA BLOCK TO BE WRITTEN.              *\n*************************************************\n*\n*\n         NOTE  TAPE3480,TYPE=ABS            SAVE 3480 BLOCK ID\n         LR    R4,R0                     BLOCK ID IN MAIN STORAGE\n         LR    R5,R1                     BLOCK ID IN CNTL UNIT BUFFER\n         ST    R4,BLOCKID                   SAVE FOR LATER OPEN TYPE=J\n         CVD   R15,DBLWRD                   SAVE RETURN CODE\n         LA    R1,MSGNOTE                   ADDRESS OF WTO MESSAGE\n         BAL   R6,ISSUWTO                   ISSUE MESSAGE\n*\n*\n*************************************************\n*                                               *\n*        AFTER ISSUANCE OF THE NOTE TYPE=ABS    *\n*        MACRO IN WRITE MODE ONLY               *\n*                                               *\n*                                               *\n* R1 ==> THE NEXT DATA BLOCK FROM CONTROL UNIT  *\n*        BUFFER TO BE WRITTEN TO THE TAPE       *\n*                                               *\n*         ***MINUS***                           *\n*                                               *\n* R0 ==> THE NEXT DATA BLOCK FROM PROCESSOR TO  *\n*        THE CONTROL UNIT                       *\n*                                               *\n*                                               *\n*         ***EQUALS***                          *\n*                                               *\n*        THE CURRENT LEVEL OF CONTROL UNIT DATA *\n*        BUFFERING IN WRITE MODE.               *\n*                                               *\n*        ISSUE MESSAGE ON DATA BUFFERING AND    *\n*        CLOSE THE FILE AND REOPEN FOR POINT    *\n*        PROCESSING.                            *\n*************************************************\n*\n*\n         LA    R2,NOTEDSPL                  POINT TO RC FIELD\n         LR    R0,R4                        CPU TO CONTROL UNIT\n         LR    R1,R5                        CONTROL UNIT TO TAPE\n         N     R0,ANDMASK                   ZERO 12 HIGH-ORDER BITS\n         N     R1,ANDMASK                   ZERO 12 HIGH-ORDER BITS\n         SR    R1,R0                        DATA BUFFERING?\n         CVD   R1,DBLWRD                    SAVE VALUE\n         MVC   0(L'EDMASK1,R2),EDMASK1      MOVE IN EDIT MASK\n         ED    0(L'EDMASK1,R2),DBLWRD+4     MAKE PRINTABLE\n         WTO   MF=(E,NOTEMSG)               ISSUE MESSAGE\n         CLOSE (TAPE3480,REREAD)            CLOSE AND FORCE REREAD\n         OPEN  (TAPE3480,(OUTPUT))          OPEN FILE\n         LA    R1,TAPE3480                  ADDRESS OF TAPE DCB\n         SR    R15,R15                      CLEAR FOR LATER USE\n         USING IHADCB,R1                    DSECT IT\n         TM    DCBOFLGS,DCBOFOPN            WAS OPEN SUCCESSFUL?\n         BO    GOODOPN2                     IF SO, THEN CONTINUE\n         IC    R2,DCBOFLGS                  LOAD DCBOFLGS FIELD\n         WTO   MF=(E,BADOPEN2)              INDICATE OPEN FAILED\n         B     FINIS                        AND EXIT\n         DROP  R1                           DONE WITH DSECT NOW\nGOODOPN2 WTO   MF=(E,MSGOPEN2)              INDICATE SUCCESSFUL OPEN\n*\n*\n*************************************************\n*        USE THE POINT MACRO TO REPOSITION TO   *\n*        THE LAST BLOCK ID THAT WAS IN STORAGE  *\n*        AT THE TIME THE NOTE TYPE=ABS WAS      *\n*        ISSUED.                                *\n*************************************************\n*\n*\n         POINT TAPE3480,(R4),TYPE=ABS       LAST BLOCKID\n         LA    R1,MSGPOINT                  ADDRESS OF WTO MESSAGE\n         BAL   R6,ISSUWTO                   ISSUE MESSAGE\n*\n*\n*************************************************\n*        SET UP LOOP TO WRITE OUT A SECOND      *\n*        GROUP OF 100 32K BLOCKS TO THE         *\n*        TAPE3480 DCB.                          *\n*************************************************\n*\n*\n         L     R3,N100                      SET COUNTER FOR 100\nLOOP2    WRITE DECB2,SF,TAPE3480,(R7),K32   WRITE A BLOCK TO TAPE\n         CHECK DECB2                        WAS WRITE O.K.?\n         BCT   R3,LOOP2                     GOBACK\n*\n*\n*************************************************\n*        ISSUE THE 3480 SYNCDEV MACRO TO FORCE  *\n*        ANY BUFFERED BLOCKS TO BE WRITTEN TO   *\n*        TAPE AND THEN CLOSE THE FILE.          *\n*************************************************\n*\n*\n         SYNCDEV DCB=TAPE3480,INQ=NO,BUFBLK=0  FORCE BLOCKS TO TAPE\n         LA    R1,MSGSYNC                   ADDRESS OF WTO MESSAGE\n         BAL   R6,ISSUWTO                   ISSUE MESSAGE\n         CLOSE (TAPE3480,REREAD)            CLOSE TO MODIFY DCB\n*\n*\n*************************************************\n*        MODIFY THE TAPE3480 DCB TO FORCE 3480  *\n*        TAPE-WRITE-IMMEDIATE MODE (SHOULD BE   *\n*        NO CONTROL UNIT BUFFERING) AND REOPEN  *\n*        THE TAPE3480 DCB UTILIZING ANOTHER     *\n*        HIGH-SPEED BLOCK SEARCH TECHNIQUE.     *\n*************************************************\n*\n*\n         LA    R1,TAPE3480                  ADDRESS OF TAPE DCB\n         USING IHADCB,R1                    DSECT IT\n         OI    DCBOPTCD,DCBOPTW             TAPE WRITE IMMEDIATE MODE\n         DROP  R1                           DONE WITH DSECT NOW\n         RDJFCB (TAPE3480)                  READ JFCB OF TAPE DCB\n         LA    R1,MSGJFCB                   ADDRESS OF WTO MESSAGE\n         BAL   R6,ISSUWTO                   ISSUE MESSAGE\n         MVC   JFCRBIDO,BLOCKID             BLOCKID FROM NOTE\n         OI    JFCBFLG3,JFCPOSID            TELL JFCB ABOUT BLOCKID\n         OPEN  (TAPE3480,(OUTPUT)),TYPE=J   CONTINUE OPEN PROCESS\n         LA    R1,TAPE3480                  ADDRESS OF TAPE DCB\n         SR    R15,R15                      CLEAR FOR LATER USE\n         USING IHADCB,R1                    DSECT IT\n         TM    DCBOFLGS,DCBOFOPN            WAS OPEN SUCCESSFUL?\n         BO    GOODOPN3                     IF SO, THEN CONTINUE\n         IC    R2,DCBOFLGS                  LOAD DCBOFLGS FIELD\n         WTO   MF=(E,BADOPEN3)              INDICATE OPEN FAILED\n         B     FINIS                        AND EXIT\n         DROP  R1                           DONE WITH DSECT NOW\nGOODOPN3 WTO   MF=(E,MSGOPEN3)              INDICATE SUCCESSFUL OPEN\n*\n*\n*************************************************\n*        SET UP LOOP TO WRITE OUT A THIRD       *\n*        GROUP OF 100 32K BLOCKS TO THE         *\n*        TAPE3480 DCB IN TAPE-WRITE-IMMEDIATE   *\n*        MODE.                                  *\n*************************************************\n*\n*\n         L     R3,N100                      SET COUNTER FOR 100\nLOOP3    WRITE DECB3,SF,TAPE3480,(R7),K32   WRITE A BLOCK TO TAPE\n         CHECK DECB3                        WAS WRITE O.K.?\n         BCT   R3,LOOP3                     GOBACK\n*\n*\n*************************************************\n*        ISSUE THE 3480 SYNCDEV MACRO TO        *\n*        INQUIRE HOW MANY DATA BLOCKS ARE IN    *\n*        THE BUFFER.                            *\n*                                               *\n*        ATTENTION:  IF THIS VALUE IS NOT 0     *\n*                    WE ARE NOT IN TAPE-WRITE-  *\n*                    IMMEDIATE MODE.            *\n*************************************************\n*\n*\n         SYNCDEV DCB=TAPE3480,INQ=YES       HOW MANY BLOCKS IN BUFFER?\n         LR    R14,R0                       DATA BLOCKS IN REGISTER 0\n         LA    R1,MSGSYNC                   ADDRESS OF WTO MESSAGE\n         BAL   R6,ISSUWTO                   ISSUE MESSAGE\n         LA    R2,SYNCDSPL                  POINT TO RC FIELD\n         LR    R1,R14                       NO. OF BLOCKS IN BUFFER\n         CVD   R1,DBLWRD                    SAVE VALUE\n         MVC   0(L'EDMASK1,R2),EDMASK1      MOVE IN EDIT MASK\n         ED    0(L'EDMASK1,R2),DBLWRD+4     MAKE PRINTABLE\n         WTO   MF=(E,TWIMSG)                ISSUE MESSAGE\n*\n*\n*************************************************\n*        FREEMAIN OUR 32K BLOCK OF WORKAREA.    *\n*************************************************\n*\n*\n         LR    R1,R7                        32K ADDRESS AREA\n         FREEMAIN R,LV=K32,A=(1)            FREE WORK AREA\n         LA    R1,MSGFREM                   ADDRESS OF WTO MESSAGE\n         BAL   R6,ISSUWTO                   ISSUE MESSAGE\n*\n*\n*************************************************\n*        ISSUE THE MSGDISP MACRO TO INDICATE    *\n*        THAT WE ARE DONE PROCESSING.           *\n*************************************************\n*\n*\n         MSGDISP RDY,DCB=TAPE3480,TXT='BYEBYE'\n         LA    R1,MSGDISP                   ADDRESS OF WTO MESSAGE\n         BAL   R6,ISSUWTO                   ISSUE MESSAGE\n*\n*\n*************************************************\n*        GET UCB ADDRESS FROM OUR DEB           *\n*        FOR LATER ISSUANCE OF TAPE UNLOAD      *\n*        COMMAND.                               *\n*************************************************\n*\n*\n         LA    R1,TAPE3480                  ADDRESS OF TAPE DCB\n         USING IHADCB,R1                    DSECT IT\n         L     R8,DCBDEBAD                  GET DEB ADDRESS (NO PREFIX)\n         SH    R8,=H'36'                    BACKUP FOR DEB PREFIX\n         DROP  R1                           DONE WITH DSECT NOW\n         USING DEB,R8                       SET ADDRESSABILITY\n         ICM   R9,7,DEBSUCBA+1              GET UCB ADDRESS (NO PREFIX)\n         USING UCB,R9                       SET ADDRESSABILITY\n         MVC   UNLCMD+7(3),UCBNAME          3 CHARACTER UCB ADDRESS\n         DROP  R8,R9                        DONE WITH DSECTS NOW\n*\n*\n*************************************************\n*        CLOSE TAPE OUTPUT DCB AND UNLOAD TAPE. *\n*************************************************\n*\n*\n         CLOSE (TAPE3480,REWIND)            CLOSE AND FORCE REWIND\n         MODESET MODE=SUP,KEY=ZERO          SUPERVISOR STATE - KEY 0\n         SR    R0,R0                        ZERO REGISTER 0\n         LA    R1,OPERCMD                   ADDRESS OF MESSAGE\n         MGCR  (1)                          ISSUE OPERATOR COMMAND\n         MODESET MODE=PROB,KEY=NZERO        PROBLEM STATE - KEY 8\n         SR    R2,R2                        SET GOOD RETURN CODE\n*\n*\n*************************************************\n*        PERFORM EXIT HOUSEKEEPING              *\n*************************************************\n*\n*\nFINIS    LR    R15,R2                       SET RETURN CODE\n         L     R13,SAVEAREA+4               SYSTEM SAVE AREA ADDRESS\n         LM    R0,R12,20(R13)               RESTORE ALL EXCEPT 14,15\n         L     R14,12(R13)                  RESTORE RETURN ADDRESS\n         BR    R14                          RETURN TO CALLER\n*\n*\n*************************************************\n*        ROUTINE TO ISSUE WTO RETURN CODE AND   *\n*        OTHER INFORMATIONAL MESSAGES TO THE    *\n*        JOB LOG.                               *\n*************************************************\n*\n*\nISSUWTO  CVD   R15,DBLWRD                   SAVE RETURN CODE\n         LA    R2,MSGDSPL(R1)               POINT TO RETURN CODE\n         MVC   0(L'EDMASK,R2),EDMASK        MOVE IN EDIT MASK\n         ED    0(L'EDMASK,R2),DBLWRD+6      MAKE PRINTABLE\n         WTO   MF=(E,(R1))                  ISSUE MESSAGE\n         BR    R6\n*\n*\n*************************************************\n*        C O N S T A N T S                      *\n*************************************************\n*\n*\nSAVEAREA DS    18F\nH4       DC    H'4'                    HALFWORD OF 4\nDBLWRD   DS    D                       TO CONVERT REGISTER TO DECIMAL\nDEVAREA  DC    2F'0'                   DEVTYPE ANSWER AREA\nN100     DC    F'100'                  100 BLOCKS\nFULFUNC  DS    0F                      FULLWORD ALIGNMENT\n         DC    X'78008080'             FULL FUNCTION 3480 UNIT\nANDMASK  DS    0F                      TURN OFF\n         DC    XL4'000FFFFF'           12 HIGH-ORDER BITS\nF32      DC    F'32760'                32K AREA FULLWORD\nK32      EQU   32760                   32K AREA\nMSGDSPL  EQU   33+4                    INDEX INTO RETURN CODE FIELD\nEDMASK   DC    XL4'40202120'           LAST DIGIT SIGNIFICANCE\nEDMASK1  DC    XL8'4020202020202120'   LAST DIGIT SIGNIFICANCE\nD3480    DC    CL8'TAPE3480'\nBLANK    DC    C' '\nBLOCKID  DS    F                       BLOCK ID FROM NOTE TYPE=ABS\nJFCBPTR  DC    X'87',AL3(JFCB3480)     A SINGLE JFCB EXIT\n         DC    AL3(JFCB3480)           ADDRESS OF JFCB AREA\nJFCB3480 DS    XL176                   JFCB AREA FOR 3480 TAPE DCB\n         ORG   JFCB3480                RESET LOCATION COUNTER BACK\n         IEFJFCBN LIST=YES\n         ORG   ,                       CONTINUE LOCATION COUNTER\n*\n*\n*************************************************\n*        I N F O R M A T I O N A L              *\n*        M E S S A G E S                        *\n*************************************************\n*\n*\nNOTEMSG WTO 'IVP3480: NOTE MACRO: BUFFERED DATA BLOCKS XXXXXXXX',MF=L\nNOTEDSPL EQU *-8\nTWIMSG WTO 'IVP3480: TWI MODE - THIS VALUE MUST BE 0 ===>XXXXXXXX',MF=L\nSYNCDSPL EQU *-8\nOPERCMD  DC    0D'0'\n         DC    AL2(L'UNLCMD+4)          4 BYTES PLUS COMMAND LENGTH\n         DC    XL2'00'                  FILLER\nUNLCMD   DC    C'UNLOAD XXX'            OPERATOR COMMAND\n*\n*\n*************************************************\n*        E R R O R                              *\n*        M E S S A G E S                        *\n*************************************************\n*\n*\nMSGNODD  WTO 'IVP3480: DDNAME TAPE3480 NOT FOUND',MF=L\nMSG3480  WTO 'IVP3480: DEVICE TYPE IS NOT 3480',MF=L\nBADOPEN1 WTO 'IVP3480: 1ST OPEN FAILED - DCBOFLGS IN R15',MF=L\nBADOPEN2 WTO 'IVP3480: 2ND OPEN FAILED - DCBOFLGS IN R15',MF=L\nBADOPEN3 WTO 'IVP3480: 3RD OPEN FAILED - DCBOFLGS IN R15',MF=L\n*\n*\n*************************************************\n*        R E T U R N    C O D E                 *\n*        M E S S A G E S                        *\n*************************************************\n*\n*\nMSGGETM  WTO 'IVP3480: GETMAIN  RETURN CODE IS  XXX',MF=L\nMSGNOTE  WTO 'IVP3480: NOTE     RETURN CODE IS  XXX',MF=L\nMSGPOINT WTO 'IVP3480: POINT    RETURN CODE IS  XXX',MF=L\nMSGSYNC  WTO 'IVP3480: SYNCDEV  RETURN CODE IS  XXX',MF=L\nMSGJFCB  WTO 'IVP3480: RDJFCB   RETURN CODE IS  XXX',MF=L\nMSGFREM  WTO 'IVP3480: FREEMAIN RETURN CODE IS  XXX',MF=L\nMSGDISP  WTO 'IVP3480: MSGDISP  RETURN CODE IS  XXX',MF=L\n*\n*\n*************************************************\n*        C O M P L E T I O N                    *\n*        M E S S A G E S                        *\n*************************************************\n*\n*\nMSGOPEN1 WTO 'IVP3480: 1ST OPEN SUCCESSFUL',MF=L\nMSGOPEN2 WTO 'IVP3480: 2ND OPEN SUCCESSFUL',MF=L\nMSGOPEN3 WTO 'IVP3480: 3RD OPEN SUCCESSFUL',MF=L\n*\n*\n*************************************************\n*        D C B   D E F I N I T I O N S          *\n*************************************************\n*\n*\nTAPE3480 DCB DDNAME=TAPE3480,DSORG=PS,MACRF=(WP),LRECL=32760,          *\n               BLKSIZE=32760,RECFM=F,EXLST=JFCBPTR\n*\n*\n*************************************************\n*        D S E C T S                            *\n*************************************************\n*\n*\n         DCBD  DEVD=TA\nDCBOPTW  EQU   DCBBIT0      WRITE VALIDITY CHECK (3480 ONLY)\n         IHADVA   DSECT=YES\n         IEZDEB   LIST=YES\nUCB      DSECT\n         IEFUCBOB LIST=YES,PREFIX=NO\n         REGISTER\n         END   IVP3480\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IVP3480J": {"ttr": 1801, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//SSTPB1T JOB (0100,1541,78377,0,000000000000),BRYANT,\n// CLASS=Q,MSGCLASS=X,NOTIFY=SSTPB1,TYPRUN=HOLD\n//OUTPUT1 OUTPUT DEFAULT=YES,JESDS=ALL,PAGEDEF=2UP\n//*******************************************************************//\n//*                                                                 *//\n//* 3480 FULL FUNCTION MODE IVP                                     *//\n//*                                                                 *//\n//*                                                                 *//\n//* TO TEST MAINTENANCE APPLIED TO 3480 TAPE CARTRIDGE SUPPORT IN   *//\n//* FULL FUNCTION MODE.  ONE FEATURE TESTED IS A HIGH-SPEED         *//\n//* TAPE SEARCH BY THE NEW BLOCK ID DEFINED BY THE 3480 HARDWARE/   *//\n//* SOFTWARE SUPPORT.                                               *//\n//*                                                                 *//\n//* THE IVP3480 MESSAGES SHOULD APPEAR EXACTLY AS FOLLOWS:          *//\n//*                                                                 *//\n//*                                                                 *//\n//*  IVP3480: 1ST OPEN SUCCESSFUL                                   *//\n//*  IVP3480: GETMAIN  RETURN CODE IS    0                          *//\n//*  IVP3480: NOTE     RETURN CODE IS    0                          *//\n//*  IVP3480: NOTE MACRO: BUFFERED DATA BLOCKS        ?             *//\n//*  IVP3480: 2ND OPEN SUCCESSFUL                                   *//\n//*  IVP3480: POINT    RETURN CODE IS    0                          *//\n//*  IVP3480: SYNCDEV  RETURN CODE IS    0                          *//\n//*  IVP3480: RDJFCB   RETURN CODE IS    0                          *//\n//*  IVP3480: 3RD OPEN SUCCESSFUL                                   *//\n//*  IVP3480: SYNCDEV  RETURN CODE IS    0                          *//\n//*  IVP3480: TWI MODE - THIS VALUE MUST BE 0 ===>       ?          *//\n//*  IVP3480: FREEMAIN RETURN CODE IS    0                          *//\n//*  IEC271I MESSAGE DISPLAY 'BYEBYE' ON CUU ISSUED BY JOB JOBNAME  *//\n//*  IVP3480: MSGDISP  RETURN CODE IS    0                          *//\n//*  UNLOAD CUU                                                     *//\n//*                                                                 *//\n//*                                                                 *//\n//*  ATTENTION =====> TWI MODE MUST BE 0 OR THE 3480 TAPE-WRITE     *//\n//*                   IMMEDIATE SOFTWARE IS NOT WORKING!            *//\n//*                                                                 *//\n//*                                                                 *//\n//*  WHERE   ???   IS THE NUMBER OF BUFFERED DATA BLOCKS IN THE     *//\n//*                CONTROL UNIT                                     *//\n//*                                                                 *//\n//*  WHERE JOBNAME IS THE JOBNAME OF THE TSO SUBMITTOR.             *//\n//*                                                                 *//\n//*  WHERE CUU     IS THE 3480 TAPE UNIT BEING USED BY THIS PROGRAM.*//\n//*                                                                 *//\n//*******************************************************************//\n//IVP3480  EXEC  PGM=IVP3480\n//SYSUDUMP DD  SYSOUT=*\n//*******************************************//\n//*                                         *//\n//*   DO NOT CHANGE TEMPORARY DATASET NAME  *//\n//*   AND DISPOSITION SPECIFICATION FOR     *//\n//*   THE TAPE3480 DD STATEMENT.            *//\n//*                                         *//\n//*******************************************//\n//TAPE3480 DD  DSNAME=&&IVP3480,\n//             DISP=(,DELETE,DELETE),\n//             UNIT=(CART,,DEFER)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LGNPARMS": {"ttr": 1803, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*          DATA SET LGNPARMS   AT LEVEL 001 AS OF 10/24/85\nLGNPARMS CSECT\n**********************************************************************\n* NAME       -   LGNPARMS                                            *\n*                                                                    *\n* AUTHOR     -   T. BRYANT                                           *\n*                                                                    *\n* FUNCTION   -   THE LOGON PARAMETER EXIT (LGNPARMS) ALLOWS AN       *\n*                INSTALLATION TO EXAMINE AND ALTER THE LOGONID       *\n*                PARAMETERS THROUGH ACF2.  IN OUR CASE, THE TSO      *\n*                PROJECT CODE ENTERED BY THE TSO USER WILL BE        *\n*                APPENDED TO THE IN-STORAGE TSO ACCOUNTING FIELD     *\n*                (FLDACCT).  ACF2 WILL THEN USE THIS INFORMATION     *\n*                TO BUILD THE JCL IN THE LOGON WORK AREA (LWA).      *\n* INPUT                                                              *\n* PARAMETER                                                          *\n* REGISTER   -   R1  -    ADDRESS OF THE ACFLDWA CONTROL BLOCK       *\n*                                                                    *\n* SYSTEM     -   MVS/SP AND MVS/XA                                   *\n*                                                                    *\n* DATE       -   10/24/85                                            *\n*                                                                    *\n* MACROS     -   FREEMAIN,GETMAIN,STFSMODE,TGET,TPUT                 *\n*                                                                    *\n* REGISTERS  -   R0   -   *** USED BY MVS ***                        *\n*                R1   -   ADDRESS OF LOGON WORK AREA                 *\n*                R2   -   USED BY TRANSLATE AND TEST INSTRUCTION     *\n*                R3   -   ADDRESS OF GETMAINED SCREEN STORAGE        *\n*                R4   -   ADDRESS OF GETMAINED SCREEN STORAGE LENGTH *\n*                R5   -   ADDRESS OF PROJECT CODE REPLY BUFFER       *\n*                R6   -   ADDRESS OF ACFLDWA                         *\n*                R7   -   LENGTH OF TSO PROJECT CODE                 *\n*                R8   -   LGNPARMS RETURN CODE TO ACF2               *\n*                R9   -   *** UNUSED BY THIS PROGRAM ***             *\n*               R10   -   *** UNUSED BY THIS PROGRAM ***             *\n*               R11   -   *** UNUSED BY THIS PROGRAM ***             *\n*               R12   -   BASE REGISTER                              *\n*               R13   -   SYSTEM SAVE AREA ADDRESS                   *\n*               R14   -   RETURN ADDRESS                             *\n*               R15   -   ENTRY POINT AND RETURN CODES               *\n**********************************************************************\n         USING LGNPARMS,R15            TEMPORARY ADDRESSABILITY\n         B     STMREGS                 BRANCH AROUND EYECATCHER\n         DC    C'LGNPARMS'             LGNPARMS PROGRAM\n         DC    C' '\n         DC    C'&SYSDATE'             GREGORIAN DATE\n         DC    C' '\n         DC    C'&SYSTIME'             GREGORIAN DATE\n         DS    0H                      RE-ESTABLISH ALIGNMENT\nSTMREGS  EQU   *\n         DROP  R15                     DONE WITH ADDRESSABILITY\n*****************************************\n*  PERFORM REENTRANT ENTRY              *\n*  HOUSEKEEPING.                        *\n*****************************************\n         STM   R14,R12,12(R13)              SAVE REGISTERS\n         LR    R12,R15                      SET BASE REGISTER\n         USING LGNPARMS,R12                 SET ADDRESSABILITY\n         GETMAIN R,LV=72                    GETMAIN OUR SAVE AREA\n         ST    R13,4(R1)                    SYSTEM S/A INTO OUR S/A\n         ST    R1,8(R13)                    OUR S/A INTO SYSTEM S/A\n         LR    R13,R1                       OUR S/A ADDRESS IN R13\n         L     R1,4(R13)                    RELOAD SYSTEM S/A ADDRESS\n         LM    R0,R1,20(R1)                 RELOAD REGS 0 AND 1\n*****************************************\n*  SET ADDRESSABILITY TO THE ACFLDWA    *\n*  LWA EXIT PARAMETER LIST.             *\n*****************************************\n         LR    R6,R1                        SAVE ACFLDWA ADDRESS\n         USING ACFLDWA,R6                   SET ADDRESSABILITY TO IT\n*****************************************\n*  WAIT ONE SECOND TO ALLOW ACF01137    *\n*  LAST LOGON ACCESS MESSAGE TO APPEAR. *\n*****************************************\n         STIMER WAIT,BINTVL=ONESEC          WAIT 1 SECOND\n*****************************************\n*  INFORM VTAM THAT WE ARE USING        *\n*  3270 FULLSCREEN SUPPORT.  GETMAIN    *\n*  WORK STORAGE TO BUILD SCREEN.        *\n*****************************************\n         STFSMODE ON,INITIAL=YES            SET VTAM FULLSCREEN MODE\n         LA    R0,SCRLNTH                   SCREEN LENGTH\n         GETMAIN R,LV=(0)                   GET STORAGE\n         LR    R3,R1                        STORAGE ADDRESS\n         MVC   0(SCRLNTH,R3),SCREEN         MOVE SCREEN FORMAT\n         LA    R4,SCRLNTH                   SCREEN LENGTH\n         LA    R5,PROJCDE(R3)               LOCATE PROJECT CODE\n*****************************************\n*  CHECK PROJECT CODE FOR VALID         *\n*  ALPHANUMERIC FIELDS.  IF NOT BUILD   *\n*  ERROR MESSAGE INTO CURRENT SCREEN    *\n*  AND REISSUE SCREEN.                  *\n*                                       *\n*  FREE SCREEN STORAGE AFTER USER HAS   *\n*  ENTERED PROJECT CODE.                *\n*****************************************\nFUL3270  TPUT  (3),(4),FULLSCR              ISSUE FULLSCREEN MESSAGE\n         TGET  (5),12,EDIT,WAIT             WAIT FOR RESPONSE\n         LTR   R8,R15                       WAS PA1 ENTERED?\n         BNZ   EXIT                         FAIL LOGON NOW!\n*****************************************\n*  CHECK THE PROJECT CODE ENTERED TO SEE*\n*  IF IT IS AT LEAST SIX (6) DIGITS IN  *\n*  LENGTH AND VALID ALPHANUERMIC.  IF   *\n*  NOT BUILD ERROR MESSAGE INTO CURRENT *\n*  SCREEN AND REISSUE MESSAGE TO USER.  *\n*****************************************\n         SR    R2,R2             CLEAR TRT-USED REGISTER 2\n         TRT   0(6,R5),TABLANK   LOOK FOR BLANK CHARACTER\n         BNZ   LESS6             LESS THAN 6 POS - ISSUE MESSAGE\n         OC    0(12,R5),UPPERCSE FLIP TO UPPER CASE\n         TRT   0(12,R5),TABCDE ANY NON-ALPHANUMERICS FOUND?\n         BZ    PROCESS           IF NONE - APPEND CODE TO FLDACCT\n         B     NOALPHA            IF SOME FOUND THEN EXIT\n*****************************************\n*  APPEND THE PROJECT CODE TO THE       *\n*  END OF THE IN-STORAGE LOGONID        *\n*  FLDACCT FIELD.                       *\n*****************************************\nPROCESS  TPUT  CLRSCR,CLRSCRL,FULLSCR       FORCE CLEARING OF SCREEN\n         STFSMODE ON,INITIAL=NO             SET VTAM LINE MODE\n         SR    R7,R7                        CLEAR REGISTER 2\n         LR    R15,R5                       ADDRESS OF PROJECT CODE\n         LA    R14,12                       BCT VALUE\n         BCTR  R15,0                        MINUS 1 FOR INCR LOOP\nINCR     LA    R15,1(R15)                   POINT TO NEXT CHARACTER\n         CLI   0(R15),BLANK                 VALUE OF X'40'?\n         BNE   GOINCR                        NO, GET NEXT DIGIT\n         B     APPEND                        YES, BUILD JCL AND SUBMIT\nGOINCR   AH    R7,H1                        ADD 1\n         BCT   R14,INCR                     GET NEXT DIGIT\n*****************************************\n*  AT THIS POINT WE HAVE A VALID TSO    *\n*  PROJECT CODE.  APPEND THIS CODE ONTO *\n*  THE END OF THE ACF2 IN-STORAGE       *\n*  FLDACCT FIELD.                       *\n*****************************************\nAPPEND   L     R15,FLDACCT                  IN-STORAGE LIDREC\n         LA    R15,81+13(R15)               END OF FLDACCT\n         MVI   0(15),T                      POS. 14 LETTER T\n         LR    R1,R7                        GET PROJECT CODE LENGTH\n         BCTR  R1,0                         DECREMENT FOR EXECUTE\n         EX    R1,MVCACCT                   APPEND TO END OF FLDACCT\n         SR    R8,R8                        INDICATE ZERO RETURN CODE\n*****************************************\n*  PERFORM REENTRANT EXIT HOUSEKEEPING. *\n*  AND SET RETURN CODE FROM REGISTER 8. *\n*****************************************\nEXIT     FREEMAIN R,LV=(4),A=(3)            FREE WORK AREA\n         LR    R1,R13                       LOAD OUR S/A ADDRESS\n         L     R13,4(,R13)                  RESTORE SYSTEM S/A ADDRESS\n         FREEMAIN R,LV=72,A=(1)             FREE S/A\n         LR    R15,R8                       ==> SET RETURN CODE\n         LM    R0,R12,20(R13)               RESTORE ALL EXCEPT 14,15\n         L     R14,12(R13)                  RESTORE RETURN ADDRESS\n         BR    R14                          RETURN TO CALLER\n*******************************************************************\n*        E X E C U T E D    I N S T R U C T I O N S               *\n*******************************************************************\nMVCACCT  MVC   1(0,R15),0(R5)               FLDACCT+14\n*******************************************************************\n*        E R R O R                                                *\n*        R O U T I N E                                            *\n*        S E C T I O N                                            *\n*******************************************************************\n*****************************************\n*  THE TSO USER HAS ENTERED LESS THAN   *\n*  A SIX (6) DIGIT PROJECT CODE.        *\n*  BUILD ERROR MESSAGE INTO CURRENT     *\n*  FULLSCREEN AND REISSUE SCREEN TO TSO *\n*  USER.                                *\n*****************************************\nLESS6    LA    R1,ERRDSPL(R3)               ERROR MESSAGE BUFFER\n         XC    0(L'PADCHAR,R1),0(R1)        SET TO BINARY ZEROES\n         MVC   0(L6MSGL,R1),L6MSG           WRITE ERROR MESSAGE\n         MVC   0(L'UPPERCSE,R5),UPPERCSE    INITIALIZE TO BLANKS\n         B     FUL3270                      REFRESH FULLSCREEN MESSAGE\n*****************************************\n*  THE TSO USER HAS ENTERED AT LEAST    *\n*  ONE (1) NON-ALPHANUMERIC FIELD.      *\n*  BUILD ERROR MESSAGE INTO CURRENT     *\n*  FULLSCREEN AND REISSUE SCREEN TO TSO *\n*  USER SHOWING BAD VALUE TO CORRECT.   *\n*****************************************\nNOALPHA  LA    R1,ERRDSPL(R3)               ERROR MESSAGE BUFFER\n         XC    0(L'PADCHAR,R1),0(R1)        SET TO BINARY ZEROES\n         MVC   0(ALPHAMGL,R1),ALPHAMG       WRITE ERROR MESSAGE\n         MVC   ALPHACDL(12,R1),0(R5)        SHOW BAD PROJECT CODE\n         MVC   0(L'UPPERCSE,R5),UPPERCSE    INITIALIZE TO BLANKS\n         B     FUL3270                      REFRESH FULLSCREEN MESSAGE\n*******************************************************************\n*        M E S S A G E                                            *\n*        S E C T I O N                                            *\n*******************************************************************\nH1       DC    H'1'\nONESEC   DC    F'100'    1 SECOND DELAY\n*****************************************\n*  TSO PROJECT CODE PROMPT SCREEN.      *\n*****************************************\nSCREEN   DS    0F                             ALIGN SCREEN TO FULLWORD\n         DC    X'F1'                          WCC-ERASE WRITE\n         DC    X'11'                          SET BUFFER ADDRESS\n         DC    X'4040'                        SBA AT ROW 1  COLUMN 1\n         DC    X'3C'                          REPEAT TO ADDR (CLEAR)\n         DC    X'5D7F'                        ROW 24 COLUMN 80\n         DC    X'00'                          FILL CHARACTER\n         DC    X'11'                          SET BUFFER ADDRESS\n         DC    X'4A5A'                        ROW 9  COLUMN 27\n         DC    X'13'                          INSERT CURSOR FOR CLEAR\n*****************************************\n*  TUTORIAL FOR PROJECT CODE.           *\n*****************************************\n         DC    X'11'                          SET BUFFER ADDRESS\n         DC    X'C5C1'                        ROW 5 COLUMN 3\n         DC    X'1D'                          START FIELD\n         DC    X'F0'                          ATTRIB-(P S)\n         DC    C'PROJECT CODE MUST BE AN ALPHANUMERIC VALUE'\n         DC    X'1D'                          START FIELD\n         DC    X'F8'                          ATTRIB-(P S H)\n         DC    C'6'\n         DC    X'1D'                          START FIELD\n         DC    X'F0'                          ATTRIB-(P S)\n         DC    C'TO'\n         DC    X'1D'                          START FIELD\n         DC    X'F8'                          ATTRIB-(P S H)\n         DC    C'12'\n         DC    X'1D'                          START FIELD\n         DC    X'F0'                          ATTRIB-(P S)\n         DC    C'DIGITS'\n         DC    X'1D'                          START FIELD\n         DC    X'F8'                          ATTRIB-(P S H)\n         DC    C' (A-Z 0-9 # OR -)'\n**********************************************\n*  ASK USER FOR PROJECT CODE.                *\n**********************************************\n         DC    X'11'                          SET BUFFER ADDRESS\n         DC    X'4AC1'                        ROW 9 COLUMN 2\n         DC    X'1D'                          START FIELD\n         DC    X'F0'                          ATTRIB-(P S)\n         DC    C'ENTER PROJECT CODE ===>'\n         DC    X'1D'                          START FIELD\n         DC    X'C8'                          ATTRIB-(U S H)\nPROJCDE  EQU   *-SCREEN                PROJECT CODE DISPLACEMENT\n         DC    12X'40'                        PROJECT CODE\n         DC    X'1D'                          START FIELD\n         DC    X'F0'                          ATTRIB-(P S)\nERRDSPL  EQU   *-SCREEN                ERROR MESSAGE DISPLACEMENT\nPADCHAR  DC    XL70'00'                       ** PAD CHARACTERS **\n*\nSCRLNTH  EQU   *-SCREEN             SCREEN LENGTH DISPLACEMENT\nUPPERCSE DC    XL12'404040404040404040404040'\n*****************************************\n* CLEAR TSO PROJECT CODE PROMPT SCREEN. *\n*****************************************\nCLRSCR   DS    0F                             ALIGN SCREEN TO FULLWORD\n         DC    X'F1'                          WCC-ERASE WRITE\n         DC    X'11'                          SET BUFFER ADDRESS\n         DC    X'4040'                        SBA AT ROW 1  COLUMN 1\n         DC    X'3C'                          REPEAT TO ADDR (CLEAR)\n         DC    X'5D7F'                        ROW 24 COLUMN 80\n         DC    X'00'                          FILL CHARACTER\n         DC    X'11'                          SET BUFFER ADDRESS\n         DC    X'4040'                        ROW 1  COLUMN  1\n         DC    X'13'                          INSERT CURSOR FOR CLEAR\nCLRSCRL  EQU   *-CLRSCR\n*******************************************************************\n*        E R R O R                                                *\n*        M E S S A G E S                                          *\n*******************************************************************\nL6MSG    DC    X'1150D11DF8',C'PROJECT CODE MUST BE AT LEAST '\n         DC    C'6 DIGITS IN LENGTH'\nL6MSGL   EQU   *-L6MSG\nALPHAMG  DC    X'1150D11DF8',C'PROJECT CODE              NOT A VALID'\n         DC    C' ALPHANUMERIC VALUE'\nALPHAMGL EQU   *-ALPHAMG\nALPHACDL EQU   18                   PROJECT CODE MESSAGE DISPLACEMENT\n*******************************************************************\n*        E M E R G E N C Y                                        *\n*        M E S S A G E S                                          *\n*******************************************************************\nTABCDE   DC    256X'FF'         *** REVERSE TRANSLATE TABLE ***\n         ORG   TABCDE+X'40'                     BLANK CHARACTER\n         DC    X'00'\n         ORG   TABCDE+X'60'                     -   CHARACTER\n         DC    X'00'\n         ORG   TABCDE+X'7B'                     #   CHARACTER\n         DC    X'00'\n         ORG   TABCDE+X'C1'                     A-I CHARACTERS\n         DC    9X'00'\n         ORG   TABCDE+X'D1'                     J-R CHARACTERS\n         DC    9X'00'\n         ORG   TABCDE+X'E2'                     S-Z CHARACTERS\n         DC    8X'00'\n         ORG   TABCDE+X'F0'                     0-9 CHARACTERS\n         DC    10X'00'\n         ORG\nTABLANK  DC    256X'00'         *** TRANSLATE TABLE TO CHECK BLANK ***\n         ORG   TABLANK+X'40'\n         DC    X'FF'\n         ORG\nBLANK    EQU   X'40'\n*******************************************************************\n*        D S E C T S                                              *\n*******************************************************************\n         TITLE 'LGNPARMS: PARAMETER LIST FOR LWAEXIT'\n         ACFLDWA DSECT\n         TITLE 'LGNPARMS: IN-STORAGE LOGONID'\n         LIDREC DSECT=YES\n         REGISTER            REGISTER EQUATES\nT        EQU    C'T'         LETTER T IN POSITION 14\n         END    LGNPARMS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LGNPXIT": {"ttr": 2054, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*          DATA SET LGNPXIT    AT LEVEL 001 AS OF 07/07/86\nLGNPXIT  TITLE 'ACF2 LOGON POST-VALIDATION EXIT'\n***********************************************************************\n*                                                                     *\n*       PURPOSE                                                       *\n*               TO VALIDATE LOGONID AGAINST RESOURCE 'TSO' WHICH      *\n*       WILL SPECIFY A VTAM LUNAME USED FOR TSO DIAL-UP ACCESS ONLY.  *\n*                                                                     *\n*       MODULE  - LGNPXIT           03/24/85  TOM BRYANT              *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*        LGNPXIT  ENTERS HERE                                         *\n*                                                                     *\n*       PROCESSING -                                                  *\n*                                                                     *\n*  TO VALIDATE TSO LOGON SOURCE AGAINST GENERALIZED                   *\n*  RESOURCE RULES WITH A TYPE OF 'RTSO'.                              *\n*  THIS WILL ALLOW THE CONTROL OF TSO DIALUPS WITHOUT HAVING TO       *\n*  MAINTAIN LARGE DEFINITIONS OF SOURCE GROUPS.                       *\n*                                                                     *\n*  FOR EXAMPLE: THE FOLLOWING RULE WOULD ALLOW ANY USER WITH THE      *\n*  PROPER UID STRING TO LOGON FROM SOURCE CAPC****. ALL OTHER LOGONS  *\n*  WOULD BE PREVENTED. IF NO RULE EXISTS THE LOGON IS ALLOWED.        *\n*                                                                     *\n*          $KEY(CAPC****) TYPE(TSO)                                   *\n*             UID(****************SS-) ALLOW                          *\n*             UID(-) PREVENT                                          *\n*                                                                     *\n*  NOTE: TO USE MASKING IN THE RESOURCE KEY SPECIFY @RESDIR (R,TSO)   *\n*        IN THE ACF2 FIELD DEFINITION RECORD                          *\n*                                                                     *\n*  REGISTERS UPON ENTRY.                                              *\n*    R0  = THE ADDRESS OF THE ACVALD PARAMETER LIST.                  *\n*                                                                     *\n*    R1  = THE ADDRESS OF THE LOGON WORK AREA (LWA), AS IT IS         *\n*          NORMALLY PASSED TO IKJEFLD BY TSO.                         *\n*                                                                     *\n*    R13 = A SAVE AREA ADDRESS.                                       *\n*                                                                     *\n*    R14 = THE RETURN ADDRESS..                                       *\n*                                                                     *\n*    R15 = THE ENTRY ADDRESS.                                         *\n*                                                                     *\n*  REGISTERS UPON RETURN.                                             *\n*    R15 = RETURN CODE.                                               *\n*                                                                     *\n*  RETURN CODES FROM THIS EXIT ARE:                                   *\n*    0 = ALLOW LOGON TO CONTINUE, USING ANY MODIFIED DATA.            *\n*                                                                     *\n*   >0 = CANCEL TSO SESSION.                                          *\n***********************************************************************\nLGNPXITX CSECT\n         USING LGNPXITX,R15            TEMPORARY ADDRESSABILITY\n         B     STMREGS                 BRANCH AROUND EYECATCHER\n         DC    C'LGNPXITX'             LGNPXITX PROGRAM\n         DC    C' '\n         DC    C'&SYSDATE'             GREGORIAN DATE\n         DC    C' '\n         DC    C'&SYSTIME'             GREGORIAN DATE\n         DS    0H                      RE-ESTABLISH ALIGNMENT\nSTMREGS  EQU   *\n         DROP  R15                     DONE WITH ADDRESSABILITY\n         EJECT\n         STM   R14,R12,12(R13)         SAVE CALLING REGISTER\n         LR    R11,R15                 SET FIRST BASE REGISTER\n         USING LGNPXIT,R11             SET ADDRESSIBLITY\n         LR    R9,R0                   SAVE \"ACVALD\" ACF FIELD\n         USING ACVALD,R9               MAP ACF CONTROL BLOCK\n         SPACE\n***********************************************************************\n*        GETMAIN A WORK AREA  . . .                                   *\n***********************************************************************\n         LA    R0,WKALEN               GET LENGTH TO GET\n         GETMAIN R,LV=(0)              AND GET SOME STORAGE\n         SPACE\n         USING WKADSCT,R13             SET ADDRESSIBLITY TO IT\n         LA    R2,0(R1)                GET ADDRESS TO CLEAR\n         LA    R4,0(R1)                SET IT AGAIN\n         LA    R3,WKALEN               SET LENGTH TO CLEAR\n         XR    R5,R5                   SET SECOND LENGTH TO ZERO\n         MVCL  R2,R4                   CLEAR STORAGE\n         ST    R13,4(R1)               SAVE SAVE AREA ADDRESS\n         ST    R1,8(R13)               SET MY SAVE AREA ADDRESS\n         LR    R13,R1                  SET SAVE AREA POINTER\n         EJECT\n         SPACE\n**********************************************************************\n*                                                                    *\n*        THIS SECURITY ID IS EXEMPT FROM ACF2 LOGON SOURCE VALIDATION*\n*        THIS LID WOULD BE USED IF A RULE PREVENTING ALL TSO USERS   *\n*        FROM LOGGING ONTO ALL SOURCES WAS ACCIDENTALLY BUILT.       *\n*                                                                    *\n**********************************************************************\n         CLC   =C'SSTPB1',ACVLID   IS IT THE SOFTWARE SECURITY LID ?\n         BE    RETURN00            YES - SKIP ACF2 LOGON SOURCE VALID.\n**********************************************************************\n*                                                                    *\n*        CLEAR AND INITIALIZE ENTRY/RESOURCE PARAMETER BLOCK.        *\n*                                                                    *\n**********************************************************************\n         XC    ACGRSRC(ACGRSLEN),ACGRSRC  ZERO PARM BLOCK\n         MVI   ACGRNAME,C' '              CLEAR RESOURCE NAME\n         MVC   ACGRNAME+1(L'ACGRNAME-1),ACGRNAME\n         SPACE\n**********************************************************************\n*                                                                    *\n*        GET THE ACUCB CONTROL BLOCK                                 *\n*                                                                    *\n**********************************************************************\n         ACFINCVT R3,NONE=RETURN00      GET ACF2 CVT\n         USING ACCVT,R3                 MAP ACF2 CVT\n         SPACE\n**********************************************************************\n*                                                                    *\n*        BUILD DUMMY ACUCB                                           *\n*                                                                    *\n**********************************************************************\n         LA    R14,ACUCB              GET FIRST BYTE\n         LA    R15,ACULEN             LENGTH OF ACUCB\n         XR    R1,R1                  LENGTH, FILLER\n         MVCL  R14,0                  ZERO ACUCB\n         MVC   ACULID,ACVLID          GET LOGONID\n         MVC   ACUUIDP,ACVUIDB        ADDRESS OF UID\n         MVC   ACULRECP,ACVRECB       ADDRESS OF LIDREC\n*\n         L     R1,CVTPTR              GET THE CVT ADDRESS\n         L     R1,CVTSMCA-CVT(R1)     GET SMF CPUID\n         MVC   ACUSCPU,SMCASID-SMCABASE(R1)   COPY IT TO ACUCB\n*\n         ACF$TCB REG=R1,TCB=GET,MODE=CVT  GET CURRENT CVT ADDRESS\n         L     R1,TCBTIO-TCB(R1)      NOW GET TIOT ADDRESS\n         MVC   ACUSJOBN,0(R1)         COPY JOBNAME TO ACUCB\n         MVC   ACUSTEP,8(R1)          COPY STEPNAME TO ACUCB\n*\n         TIME  BIN                    GET TIME/DATE\n         STCM  R0,15,ACUSMTIM         DEFINE TIME STAMP\n         STCM  R1,15,ACUSMDAT          AND DATE STAMP FOR SMF\n         MVC   ACUSRTIM(8),ACUSMTIM   SET \"READER TIME/DATE\"\n*\n         MVC   ACUSUIF,=CL8' '        SMF USER IDENTIFICATION\n         MVC   ACUJESID,=CL8' '       JES2 JOB NUMBER\n*        MVC   ACUTIDNT,ACVSRCE       SOURCE ID\n**********************************************************************\n*        IN ACF2 3.1.3, THE ACVSRCE FIELD WAS FOUND TO HAVE GARBAGE  *\n*        IN IT, THE TSO/VTAM LOGICAL UNIT (LU) NAME WILL BE READ VIA *\n*        THE TIMESHARING CONTROL BLOCK (TSB) OFF OF THE ADDRESS      *\n*        SPACE CONTROL BLOCK (ASCB).                                 *\n*                                                                    *\n*        FROM THE GENERALIZED RESOURCE LOGGING AND VIOLATION REPORTS,*\n*        MASTER JCL PROGRAM PROCESSING (MSTJCL00) ATTACHES THIS EXIT *\n*        IN AN UNAUTHORIZED STATE.  DUE TO THIS FACT IS IS NECESSARY *\n*        TO USE THE SOFTWARE AUTHORIZATION SVC TO TURN ON THE        *\n*        JSCBAUTH BIT TO ALLOW MODESET PROCESSING.   TOM BRYANT      *\n**********************************************************************\n         LA    R0,1                   LOAD VALUE TO SVC 255\n         SVC   255                    TO GET AUTHORIZED\n         MODESET KEY=ZERO,MODE=SUP    SUPERVISOR STATE - KEY 0\n         LA    R1,16                  CVT ADDRESS\n         L     R1,0(R1)               BEGINNING OF CVT\n         L     R1,0(R1)               GET CVTTCBP LIST\n         L     R2,8(R1)               GET CURRENT ASCB ADDRESS\n         USING ASCB,R2                DSECT ASCB\n         L     R2,ASCBTSB             GET TSB ADDRESS\n         DROP  R2                     DONE WITH ASCB DSECT NOW\n         USING TSB,R2                 DSECT TSB\n         MVC   ACVSRCE,TSBTRMID       TERMINAL SYMBOLIC NAME\n         DROP  R2                     DONE WITH TSB DSECT NOW\n         SLR   R0,R0                  LOAD VALUE TO SVC 255\n         SVC   255                    TO GET UNAUTHORIZED\n         MODESET KEY=NZERO,MODE=PROB  KEY 8\n         MVC   ACUTIDNT,ACVSRCE       SOURCE ID\n         MVC   ACUPGM,=C'LOGON'       PROGRAM NAME\n         MVC   ACUSPGM,ACUPGM         COPY TO CURRENT PROGRAM NAME\n         MVC   ACUSLIB,=CL44'SYS1.LINKLIB'  DEFAULT TO LINKLIST\n         MVC   ACUSLVOL,=CL8' '       BLANKS FOR LINKLIST\n         MVI   ACUT2FLG,ACUT2JOB      PGM/LIB IS CURRENT\n         MVC   ACUSKEY,=CL8' '        DSNAME HIGH LEVEL INDEX\n**********************************************************************\n*                                                                    *\n*        SET UP RESOURCE ENTRY/RESOURCE PARAMETER BLOCK.             *\n*                                                                    *\n**********************************************************************\n         LA    R4,ACUCB                 ADDRESS OF THE ACUCB\n         ST    R4,ACGUCB                ADDRESS OF ACUCB FOR RES. CALL\n         MVI   ACGFCN,4                FUNCTION CODE\n         MVI   ACGSFCN,ACGSINP         SUB FUNCTION - INTERPRET\n         MVI   ACGRFLGS,0              INIT RETURN FLAGS\n         LA    R1,MESSAGE              MESSAGE AREA ADDRESS\n         ST    R1,ACGMSG\n         LA    R1,RULEDATA             RULE DATA AREA ADDRESS\n         ST    R1,ACGREDTA\n         LA    R1,L'RULEDATA           RULE DATA AREA LENGTH\n         ST    R1,ACGREDTL\n         MVC   ACGRTYPE,RESTYPE        RESOURCE TYPE = RTSO\n         MVC   ACGMODID,=CL8'LGNPXIT ' MODULE NAME FOR SMF RECORDING\n         SPACE\n**********************************************************************\n*                                                                    *\n*        OBTAIN THE LOGICAL SOURCE NAME FROM THE ACVALD PARM LIST    *\n*                                                                    *\n**********************************************************************\n         MVC   ACGRNAME(L'ACVSRCE),ACVSRCE  MOVE SOURCE NAME\n         EJECT\n**********************************************************************\n*                                                                    *\n*        ISSUE ACF2 RESOURCE VALIDATION CALL                         *\n*                                                                    *\n**********************************************************************\n         ACFSVC ACGRSRC,TYPE=A,CVT=HAVE,NONE=RETURN00\n         LTR   R15,R15                 WAS ACF2 SVC CALL SUCCESSFULL!\n         DROP  R3                      DONE WITH ACCVT ADDRESSABILITY!\n         BZ    CHKFLG                  YES, CHECK RESOURCE FLAG\n         SPACE\n**********************************************************************\n*                                                                    *\n*        IF NO RULE WAS FOUND (RULE DATA LENGTH IS X'FFFF'), THEN    *\n*        ALLOW ACCESS. THIS IS TO ELIMINATE THE REQUIREMENT FOR A    *\n*        GLOBAL RULE OF THE FORM:                                    *\n*                                                                    *\n*              $KEY(********) TYPE(TSO)                              *\n*                ALLOW                                               *\n*                                                                    *\n*            NOTE:   FOR A SPECIFICATION OF 'LOG' THE ACF2 SVC HAS   *\n*                    ALREADY LOGGED THE ENTRY BEFORE WE CHECK THE    *\n*                    RULE BUFFER ADDRESS.                            *\n**********************************************************************\n         L     R1,ACGREDTA             LOAD ADDRESS OF RULE BUFFER\n         CLC   FOXES,0(R1)             ANY RULE FOUND?\n         BE    RETURN00                NO RULE FOUND, ALLOW ACCESS\n**********************************************************************\n*                                                                    *\n*        ACF2 SVC CALL WAS SUCCESSFULL (R15=0)                       *\n*                                                                    *\n*        IF THE RULE SPECIFIES ALLOW - ALLOW THE ACCESS              *\n*                                                                    *\n*        IF THE RULE SPECIFIED LOG THE LOGGING OPERATION HAS         *\n*         ALREADY COMPLETED  (SEE NOTE IN ABOVE SECTION              *\n*                                                                    *\n*        IF THE RULE SPECIFIES VERIFY  - ABORT AND LOG THE ACCESS    *\n*                                                                    *\n*        IF THE RULE SPECIFIES PREVENT - ABORT AND LOG THE ACCESS    *\n*                                                                    *\n**********************************************************************\nCHKFLG   CLI   ACGRFLGS,0               DID ACF2 ALLOW ACCESS?\n         BE    RETURN00                 IF SO, ALLOW ACCESS\n         B     ABORT                    IF NOT 0 ABORT ACCESS\n         EJECT\n**********************************************************************\n*                                                                    *\n*        CONVERT ACF2 MESSAGE TO WTO FORMAT AND ISSUE WTO            *\n*        SETUP FOR TPUT ERROR MESSAGE                                *\n*                                                                    *\n*        BRANCH TO TPUT ROUTINE                                      *\n*                                                                    *\n**********************************************************************\nABORT    LH    R1,MESSAGE               GET MESSAGE LENGTH\n         LA    R1,MESSAGE(R1)           NEXT AVAILABLE BYTE IN MSG\n         MVC   0(L'ROUTE,R1),ROUTE      ADD ROUTING CODES\n         MVI   MESSAGE+1,X'80'          AND MCS FLAG\n         WTO   MF=(E,MESSAGE)           ISSUE THE WTO\n         LM    R3,R5,=A(SRCEB,SRCEMSGL,SRCEE) SETUP OF MULTI TPUT\nRESTLUP  LR    R1,R3                    SET MESSAGE ADDRESS\n         LR    R0,R4                    SET MESSAGE LENGTH\n         TPUT  (1),(0),R                SEND THE MESSAGE\n         BXLE  R3,R4,RESTLUP            SEND ALL MESSAGES\n         STIMER WAIT,BINTVL=READMSG     ALLOW USER TO READ MULTI TPUT\n         LA    R15,8                    SET TO KILL USER\n         B     RETURN                   RETURN WITH BAD RC\n         SPACE\n***********************************************************************\n*        FREEMAIN WORK AREA AND RETURN TO USER WITH PRE-SET RETURN CDE*\n***********************************************************************\nRETURN00 SR    R15,R15                 SET ZERO RETURN CODE\nRETURN   L     R11,4(R13)              GET SAVE AREA ADDRESS\n         LR    R2,R15                  GET RETURN CODE\n         LA    R0,WKALEN               GET LENGTH\n         LR    R1,R13                  GET ADDRESS TO FREE\n         FREEMAIN R,LV=(0),A=(1)       AND FREE IT\n         LR    R13,R11                 RE-SET SAVE AREA POINTER\n         LR    R15,R2                  SET RETURN CODE\n         L     R14,12(R13)             GET RETURN POINT\n         LM    R0,R12,20(R13)          GET THE REST\n         BR    R14                     AND RETURN\n         EJECT\n***********************************************************************\n*        CONSTANTS WORKAREAS AND DSECTS  . . . . .                    *\n***********************************************************************\nRESTYPE  DC    C'RTSO'                 RESOURCE TYPE\nFOXES    DC    X'FFFFFFFF'             NO RECORD INDICATOR\nROUTE    DC    X'000080A0'             WTO ROUTING CODES\nREADMSG  DC    F'500'                  5 SECONDS TO READ MULTI TPUT\n         SPACE\n***********************************************************************\n*        TPUT ERROR MESSAGES                                          *\n***********************************************************************\n         SPACE\nSRCEB    DC   C'                                                   '\nSRCEMSGL EQU  *-SRCEB\n         DC   C' ##################################################'\n         DC   C' # YOU ARE NOT AUTHORIZED FOR TSO DIAL-UP ACCESS! #'\n         DC   C' #                                                #'\n         DC   C' # PLEASE CONTACT YOUR SECURITY ADMINISTRATOR     #'\n         DC   C' # FOR AN AUTHORIZATION REQUEST.                  #'\n         DC   C' ##################################################'\nSRCEE    EQU  *-2\n         SPACE\n         LTORG\n         EJECT\n***********************************************************************\n*        DSECT WORK AREA FOR THE PROGRAM   . . . .                    *\n***********************************************************************\nWKADSCT  DSECT\nWKSAVEA  DS    9D                      SAVE AREA FOR PROGRAM\n         SPACE\n*        ACF2 ACGRSCR CONTROL BLOCK\n         ACGRSRC DSECT=NO              RESOURCE PARM BLOCK\n*        ACF2 ACUCB   CONTROL BLOCK\n         ACUCB   DSECT=NO              ACF2 USER CONTROL BLOCK\n         SPACE\n*        ACF2 RULE DATA AREA\nRULEDATA DS    CL132                   RULE DATA AREA\n*        RULE DATA AREA: (HALFWORD LENGTH $USERDATA + $USERDATA) +\n*                        (HALFWORD LENGTH RULE DATA + RULE DATA) =\n*                        (2 + 64) + (2 + 64) = 132\n**********************************************************************\n         SPACE\n*        ACF2 MESSAGE AREA\nMESSAGE  DS    CL128                   MESSAGE AREA\n*        DEBUG WORK AREA\n*        DEBUGWRK\nWKALEN   EQU   *-WKADSCT               CALC LENGTH\n         SPACE\n         IHAASCB\n         IKJTSB\n***********************************************************************\n*           ACF2 VALIDATION CONTROL BLOCK AND LOGONID RECORD          *\n***********************************************************************\n         TITLE 'ACF2 LOGON POST-VALIDATION EXIT - ACVALD'\n         ACVALD DSECT=YES\n         TITLE 'ACF2 LOGON POST-VALIDATION EXIT - ACCVT'\n         ACCVT  DSECT=YES\n         TITLE 'ACF2 LOGON POST-VALIDATION EXIT - ACFASVT'\n         ACFASVT DSECT=YES\n         TITLE 'ACF2 LOGON POST-VALIDATION EXIT - LIDREC'\n         LIDREC DSECT=YES\n         TITLE 'ACF2 LOGON POST-VALIDATION EXIT - CVT'\n         CVT    DSECT=YES\n         TITLE 'ACF2 LOGON POST-VALIDATION EXIT - IKJTCB'\n         IKJTCB DSECT=YES\n         TITLE 'ACF2 LOGON POST-VALIDATION EXIT - IEESMCA'\n         IEESMCA\n         PRINT GEN\n         TITLE 'ACF2 LOGON POST-VALIDATION EXIT'\n         REGISTER\n         END   LGNPXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LIDCHK": {"ttr": 2305, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "LIDCHK   CSECT\n**********************************************************************\n* NAME       -   LIDCHK                                              *\n*                                                                    *\n* AUTHOR     -   T. BRYANT                                           *\n*                                                                    *\n* FUNCTIONS  -   THIS PROGRAM WILL READ THE USER'S IN-STORAGE ACF2   *\n*      LOGONID AND COMPARE IN TO AN INPUT PARM CONTAINING A LOGONID  *\n*      OR LOGONID MASK.  IN THE INPUT PARAMETER, AN ASTERISK (*) IS  *\n*      A MATCH FOR ONE LOGONID POSITION.  A DASH (-) WILL STOP       *\n*      FURTHER PARAMETER CHECKING AND CONSIDER IT A MATCH FOR        *\n*      ALL REMAINING POSITIONS OF THE IN-STORAGE LOGONID.            *\n*                                                                    *\n* INPUT      -   PARAMETER GREATER THAN 2 CHARACTERS BUT NOT GREATER *\n*                THAN 6 CHARACTERS                                   *\n*                                                                    *\n* OUTPUT     -   CONDITION CODES PLACED IN REGISTER 15               *\n*                                                                    *\n*                RETURN CODE             DISPOSITION                 *\n*                                                                    *\n*                4                       BAD INPUT PARAMETER         *\n*                8                       LOGONID MASK DOES NOT MATCH *\n*                                                                    *\n* SYSTEM     -   ALL MVS SYSTEMS                                     *\n*                                                                    *\n* DATE       -   06/04/85                                            *\n*                                                                    *\n* MACROS     -   ACINCVT,ACFGUCB,ACCVT,ACFASVT,LIDREC                *\n*                GETMAIN,CVT,IHAPSA,IHAASCB,REGISTER                 *\n*                                                                    *\n* REGISTERS  -   R0   -   *** UNUSED BY MVS ***                      *\n*                R1   -   *** UNUSED BY MVS ***                      *\n*                R2   -   *** UNUSED BY MVS ***                      *\n*                R3   -   *** UNUSED BY PROGRAM ***                  *\n*                R4   -   ADDRESS OF ACF2 CVT AND WORK REGISTER      *\n*                R5   -   ADDRESS OF ACF2 UCB AND WORK REGISTER      *\n*                R6   -   ADDRESS OF LOGONID RECORD                  *\n*                R7   -   WORK REGISTER                              *\n*                R8   -   WORK REGISTER                              *\n*                R9   -   WORK REGISTER                              *\n*               R10   -   *** UNUSED BY PROGRAM ***                  *\n*               R11   -   *** UNUSED BY PROGRAM ***                  *\n*               R12   -   BASE REGISER                               *\n*               R13   -   SYSTEM SAVE AREA ADDRESS                   *\n*               R14   -   RETURN ADDRESS                             *\n*               R15   -   RETURN CODE                                *\n**********************************************************************\n         STM   R14,R12,12(R13)      SAVE REGISTERS\n         LR    R12,R15              SET BASE REGISTER\n         USING LIDCHK,R12           SET ADDRESSABILITY\n         GETMAIN R,LV=72            GETMAIN OUR SAVE AREA\n         ST    R13,4(R1)            SYSTEM S/A INTO OUR S/A\n         ST    R1,8(R13)            OUR S/A INTO SYSTEM S/A\n         LR    R13,R1               OUR S/A ADDRESS IN R13\n         L     R1,4(R13)            RELOAD SYSTEM S/A ADDRESS\n         L     R1,24(R1)            RELOAD REGISTER 1 PARAMETER\n         SPACE 1\n         L     R3,0(R1)             SAVE PARAMETER REGISTER\n         ACFINCVT R4,NONE=MATCHLID  IF NO ACF2 LEAVE EXIT NOW\n         USING ACCVT,R4             SET ADDRESSABILITY TO IT\n         ACFGUCB (5),NONE=MATCHLID,INLINE=YES,SYS=AOS2\n         USING ACUCB,R5             SET ADDRESSABILITY TO IT\n         L     R6,ACULRECP          ADDRESS OF LOGONID RECORD\n         USING LIDREC,R6            SET ADDRESSABILITY TO IT\n         DROP  R4,R5                DONE WITH DSECTS NOW\n         LH    R7,0(R3)             GET LENGTH OF PARAMETER\n         CH    R7,H6                IS PARAMETER GREATER THAN 6 DIGITS\n         BNH   NEXTCHK              IF SO, FAIL THE TEST\n         LA    R4,4                 INDICATE BAD INPUT PARAMETER\n         B     NOMATCH                 GO FAIL REQUEST\nNEXTCHK  CH    R7,H3                MUST BE AT LEAST 3 DIGITS LONG\n         BNL   ANYDASH              IF SO CHECK FOR DASH (-)\n         LA    R4,4                 INDICATE BAD INPUT PARAMETER\n         B     NOMATCH                 GO FAIL REQUEST\nANYDASH  LR    R4,R7                SAVE INPUT PARAMETER LENGTH\n         BCTR  R4,0                 SUBTRACT 1 FOR EXECUTE\n         EX    R4,EXINS             HAVE WE FOUND A DASH (-)\n         BNZ   CHKLNTH              NO, CHECK FOR FULL INPUT PARM\nGOTDASH  LA    R1,2(R3)             ADDRESS OF ACTUAL INPUT PARM\n         LA    R1,0(R4,R1)          LOOK AT LAST BYTE\n         CLC   0(1,R1),DASH         IS IT A DASH (-)\n         BE    TESTLID              YES, BEGIN TESTING\nCHKLNTH  CH    R7,H6                INPUT PARM MUST BE 6 DIGITS NOW!\n         BE    TESTLID              YES, FINALLY TEST THIS LOGONID!\n         LA    R4,4                 INDICATE BAD INPUT PARAMETER\n         B     NOMATCH                 GO FAIL REQUEST\n         SPACE 2\nTESTLID  LA    R8,LIDLID            ADDRESS OF IN-STORAGE LOGONID\n         LA    R9,2(R3)             ADDRESS OF ACTUAL INPUT PARM\n         OC    0(6,R9),UPERCASE     FLIP PARAMETER TO UPPER CASE\nCLCLID   CLC   0(1,R9),DASH         IS THIS POSITION MASKED?\n         BE    MATCHLID             IF SO, PASS GOOD RETURN CODE NOW!\n         CLC   0(1,R9),ASTERISK     IS THIS POSITION MASKED?\n         BE    INCRMENT             IF SO, CHECK NEXT POSITION\n         CLC   0(0,R8),0(R9)        DO THESE BYTES MATCH?\n         BE    INCRMENT\n         LA    R4,8                 INDICATE NO MATCH\n         B     NOMATCH\n         SPACE 1\nINCRMENT AH    R8,H1                NEXT PARAMETER POSITION\n         AH    R9,H1                NEXT LOGONID POSITION\n         BCT   R7,CLCLID            GO COMPARE NEXT POSITION\n***********************************************************************\n*        IF WE FALL THROUGH THIS LOGIC OUR COMPARISONS ARE FINISHED   *\n*        AND A GOOD RETURN CODE IS ISSUED.                            *\n***********************************************************************\nMATCHLID LR    R1,R13               LOAD OUR S/A ADDRESS\n         L     R13,4(R13)           RESTORE SYSTEM S/A ADDRESS\n         FREEMAIN R,LV=72,A=(1)     FREE S/A\n         LM    R0,R12,20(R13)       RESTORE ALL EXCEPT 14,15\n         L     R14,12(R13)          RESTORE RETURN ADDRESS\n         SLR   R15,R15              SET GOOD RETURN CODE\n         BR    R14                  RETURN TO CALLER\nNOMATCH  LR    R1,R13               LOAD OUR S/A ADDRESS\n         L     R13,4(R13)           RESTORE SYSTEM S/A ADDRESS\n         FREEMAIN R,LV=72,A=(1)     FREE S/A\n         LR    R15,R4               SET BAD RETURN CODE\n         LM    R0,R12,20(R13)       RESTORE ALL EXCEPT 14,15\n         L     R14,12(R13)          RESTORE RETURN ADDRESS\n         BR    R14                  RETURN TO CALLER\n         LTORG\nDASH     DC    C'-'                 WILD CARD MATCH FOR REMAINDER\nASTERISK DC    C'*'                 WILD CARD MATCH FOR 1 DIGIT\nH1       DC    H'1'                 INCREMENT VALUE\nH3       DC    H'3'\nH6       DC    H'6'\nUPERCASE DC    XL6'404040404040'\nEXINS    TRT   0(0,R4),TRTAB\nTRTAB    DC    256X'00'         TRANSLATE TABLE\n         ORG   TRTAB+C'-'\n         DC    X'FF'\n         ORG\n***********************************************************************\n*        DSECTS USED IN THIS PROGRAM                                  *\n***********************************************************************\n         TITLE 'LIDCHK: TEST FOR LOGONID MASK - CVT'\n         CVT    DSECT=YES\n         TITLE 'LIDCHK: TEST FOR LOGONID MASK - IHAPSA'\n         IHAPSA DSECT=YES\n         TITLE 'LIDCHK: TEST FOR LOGONID MASK - IHAASCB'\n         IHAASCB DSECT=YES\n         TITLE 'LIDCHK: TEST FOR LOGONID MASK - ACCVT'\n         ACCVT  DSECT=YES\n         TITLE 'LIDCHK: TEST FOR LOGONID MASK - ACUCB'\n         ACUCB  DSECT=YES\n         TITLE 'LIDCHK: TEST FOR LOGONID MASK - ACFASVT'\n         ACFASVT DSECT=YES\n         TITLE 'LIDCHK: TEST FOR LOGONID MASK - LIDREC'\n         LIDREC DSECT=YES\n         REGISTER\n         END    LIDCHK\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MCS": {"ttr": 2309, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "MCS      TITLE      'DISPLAY MASTER CONSOLE SIB ON TSO TERMINAL'\n***********************************************************************\n*                                                                     *\n* TO USE:                                                             *\n*                                                                     *\n*     1) ENTER MCS. YOU MUST BE OUTSIDE OF SPF DUE TO SPF/APF         *\n*        AUTHORIZATION RESTRICTIONS. (OR USE AN AUTHORIZATION SVC     *\n*        TO TURN ON THE JSCBAUTH BIT FOR THE CURRENT TCB).            *\n*                                                                     *\n*     2) THE MASTER CONSOLE SCREEN IMAGE BUFFER WILL BE DISPLAYED ON  *\n*        YOUR TSO TERMINAL. FOR USERS WITH OPER AUTHORITY, AN INPUT   *\n*        BUFFER WILL BE PROVIDED AT THE BOTTOM OF THE SCREEN WHICH    *\n*        CAN BE USED TO ENTER ANY MVS OR JES2 COMMAND. IF YOU HIT     *\n*        ENTER WITHOUT ANY COMMAND, THE SCREEN WILL BE UPDATED AND    *\n*        REDISPLAYED.  IF YOU DON'T WANT THE COMMAND ECHOED ON THE    *\n*        CONSOLE, PRECEED THE COMMAND WITH A NOT SIGN (\u00ac).            *\n*                                                                     *\n*     3) TO PLACE YOURSELF INTO AUTO-ROLL MODE, HIT THE PA2 KEY.      *\n*        THIS WILL REFRESH THE SCREEN EVERY SECOND. TO RETURN TO      *\n*        NORMAL MODE, HIT THE PA1 KEY.                                *\n*                                                                     *\n*     4) TO TERMINATE MCS, HIT ANY PF KEY.                            *\n*                                                                     *\n*                                                                     *\n* CHANGE HISTORY:                                                     *\n*                                                                     *\n*     1) I DISCOVERED AN INTERESTING FACT THAT WHEN YOU EXTRACT       *\n*        ANOTHER ADDRESS SPACE'S AUTHORIZATION INDEX (AXEXT) AND      *\n*        USE THAT VALUE TO SET YOUR AUTHORIZATION INDEX (AXSET)       *\n*        THE AX VALUE YOU SET DOES NOT RETURN BACK TO YOUR ORIGINAL   *\n*        VALUE BY FREEING THE AUTHORIZATION INDEX (AXFRE).            *\n*                                                                     *\n*        A SECOND SET SECONDARY ADDRESS SPACE (SSAR) ATTEMPT BY A     *\n*        PROGRAM IMMEDIATELY AFTER THIS MAY OR MAY NOT REQUIRE A      *\n*        AXEXT OR AXSET SEQUENCE OF INSTRUCTIONS BEFORE ISSUING THE   *\n*        SSAR INSTRUCTION SINCE THE AX VALUE WAS PREVIOUSLY SET AND   *\n*        WILL STAY THAT VALUE UNLESS EXPLICITY CHANGED OR ADDRESS     *\n*        SPACE COMPLETION.                                            *\n*                                                                     *\n*        I CHANGED MCS TO SAVE THE USERS ORIGINAL AX VALUE AND        *\n*        RESTORE IT UPON COMPLETION OF MCS.  07/10/87  TOM BRYANT     *\n*                                                                     *\n*     2) SINCE THE CONSOLE ASID HAS CHANGED A LOT IN MVS THROUGH THE  *\n*        YEARS (SEE DIAGRAM BELOW), I DECIDED TO SEARCH FOR THE       *\n*        CONSOLE ASCB/ASID AND LOAD THE ASID WHEN FOUND FOR LATER     *\n*        SSAR PROCESSING.        02/04/87   TOM BRYANT                *\n*                                                                     *\n*        ASID 5 FOR MVS/SP 1.3.0.                                     *\n*        ASID 6 FOR MVS/XA PRE-DFP 2.1.0.                             *\n*        ASID 7 FOR MVS/XA DFP 2.1.0.                                 *\n*                                                                     *\n*     3) ADDED THE VTAM STFSMODE AND STLINENO TO PREVENT YOUR TERMINAL*\n*        MESSAGES BEING OVERLAID BY A FULLSCREEN WRITE AND TO ENSURE  *\n*        THAT THE NEXT NON-FULLSCREEN WRITE BEGINS ON LINE 1.         *\n*        02/04/87    TOM BRYANT                                       *\n*                                                                     *\n*     4) DUE TO 3290 TERMINAL PA2 PROBLEMS, THE PA2 FUNCTION HAS BEEN *\n*        DISABLED UNTIL RESOLUTION OF THE 3290 PROBLEM.  THE PA2 WILL *\n*        PERFORM A 'REDISPLAY' INSTEAD OF GOING TO A TIMER ROUTINE.   *\n*        02/04/87    TOM BRYANT                                       *\n*                                                                     *\n*     5) I ADDED SUPPORT FOR CHECKING THE ACF2 IN-STORAGE LOGONID TO  *\n*        A HARDCODED TABLE IN THIS PROGRAM.  IF YOU DONT WANT TO USE  *\n*        ACF2, JUST REMOVE THE CODE AND UNCOMMENT THE LINES I         *\n*        COMMENTED OUT.                 01/15/88    TOM BRYANT        *\n*                                                                     *\n*     6) MVS/XA 2.2.0. SUPPORT HAS BEEN ADDED.  THE RDCM AND TDCM     *\n*        CONSOLE CONTROL BLOCKS WERE MOVED FROM THE NUCLEUS TO        *\n*        SUBPOOL 229 OF THE CONSOLE ADDRESS SPACE.  I HAVE THE CODE   *\n*        FOR XA220 AND PRE-XA220.  PERFORM A FIND ON 'RDCM' TO        *\n*        MODIFY FOR YOUR SHOP.          06/02/88    TOM BRYANT        *\n*                                                                     *\n*                                                                     *\n*        IF ANYONE HAS SUCCESSFULLY RUN WITH AUTOROLL USING A 3290    *\n*        PLEASE CALL ME AT (312) 769-8414.  02/04/87  TOM BRYANT      *\n*                                                                     *\n***********************************************************************\n         EJECT\nMCS      CSECT\n*\n*\n***********************************************************************\n*                                                                     *\n*        ENTRANCE JUNK                                                *\n*                                                                     *\n***********************************************************************\n*\n*\n         SAVE  (14,12),,CONSOLE_DISPLAY_ON_TSO_TERMINAL\n         LR    R12,R15             USE R12 AS PROG BASE\n         USING MCS,R12             TELL ASSEMBLER ABOUT BASE REG\n         LR    R9,R1               SAVE ADDR OF CPPL\n         USING CPPL,R9             TELL ASSEMBLER\n         ST    R13,SAVE+4          CHAIN\n         LA    R3,SAVE              SAVE\n         ST    R3,8(,R13)            AREAS\n         LR    R13,R3                 TOGETHER\n         EJECT\n*\n*\n***********************************************************************\n*                                                                     *\n*        ESTABLISH ENVIRONMENT                                        *\n*                                                                     *\n***********************************************************************\n*\n*\n         GTSIZE\n         LTR   R0,R0               IS THIS A 3270 TYPE DEVICE\n         BZ    ERROR               NO - CANNOT BE MCS CONSOLE\n*\n*\n***********************************************************************\n*        NOTE: I ADDED AN ACF2 CHECK FOR THE IN-STORAGE LOGONID TO    *\n*              ONLY ALLOW CETAIN USER GROUPS TO USE THIS PROGRAM.     *\n*              THE OLD CHECKING AGAINST THE PSCB HAS BEEN COMMENTED   *\n*              OUT (IF YOU WISH TO USE IT INSTEAD).  TOM BRYANT       *\n***********************************************************************\n*\n*\n         ACFINCVT R1,NONE=NOACF2   IF NO ACF2 LEAVE EXIT NOW\n         USING ACCVT,R1            SET ADDRESSABILITY TO IT\n         ACFGUCB (1),NONE=NOACF2,INLINE=YES,SYS=AOS2\n         DROP  R1                  DONE WITH ADDRESSABILITY\n         USING ACUCB,R1            SET ADDRESSABILITY TO IT\n         L     R1,ACULRECP         ADDRESS OF LOGONID RECORD\n         DROP  R1                  DONE WITH ADDRESSABILITY\n         LA    R14,AUTHENT         NUMBER OF TABLE ENTRIES\n         LA    R15,AUTHTBL         ADDRESS OF LOOKUP TABLE\nAUTHLOOP CLC   0(2,R1),0(R15)      LID PFX EQUAL TO TABLE ENTRY ?\n         BE    GETAUTH             ===> YES, USER MAY USE THIS PROGRAM\n         LA    R15,2(R15)          POINT TO NEXT TABLE ENTRY\n         BCT   R14,AUTHLOOP        IF MORE ENTRIES - GO CHECK\n         B     BADAUTH             ===> USER NOT AUTHORIZED\nGETAUTH  EQU   *                   GET DYNAMIC APF AUTHORIZATION\n         OI    BITS,AUTHFLG        INDICATE COMMAND AUTHORITY\n*\n*\n*\n*\n*        L     R4,CPPLPSCB         GET ADDR OF PSCB\n*        USING PSCB,R4\n         LA    R0,1                ** TURN ON AUTHORIZATION **\n         SVC   255                 ** ISSUE AUTHORIZATION SVC **\n*        CLC   PSCBUSER(2),=CL2'SS' IS THIS A SYSTEMS PROGRAMMER?\n*        BNE   CHKAUTH             NO, DON'T SET SYSPFLG\n*        OI    BITS,SYSPFLG        SET SYSPFLG\n*\n*\n***********************************************************************\n*        NOTE: A NON-SS USER OF MCS MUST USE IT OUTSIDE OF ISPF/PDF   *\n*              DUE TO THE AUTHORIZATION SVC ONLY ALLOWING SS-PREFIXED *\n*              USERS.   TOM BRYANT                                    *\n***********************************************************************\n*\n*\n*CHKAUTH  DS    0H\n*        TM    PSCBATR1,PSCBCTRL   DOES USER HAVE OPER AUTH\n*        BZ    NOTAUTH             NO, SKIP SETTING AUTH BIT\n*        OI    BITS,AUTHFLG        INDICATE COMMAND AUTHORITY\n*        DROP  R4\nNOTAUTH  DS    0H\n         STAX  STAXEXIT            ESTABLISH ATTENTION EXIT\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   STAXERR             BRANCH ON ERROR\n         ESTAE ESTAEXIT            ESTABLISH ESTAE EXIT\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ESTAERR             BRANCH ON ERROR\n*\n*\n***********************************************************************\n*                                                                     *\n*        SEARCH FOR CONSOLE ASCB/ASID STARTING WITH HIGHEST ASCB      *\n*        IN ORDER TO GET ASID FOR LATER SSAR INSTRUCTION.             *\n*                                                                     *\n***********************************************************************\n*\n*\n         L     R1,CVTPTR           GET ADDR OF CVT\n         USING CVTMAP,R1           SET ADDRESSABILITY\n         L     R14,CVTASCBH        HIGHEST ASCB ADDRESS\n         USING ASCB,R14            SET ADDRESSABILITY\nLOOPNM   ICM   R15,15,ASCBJBNI     IS IT A BATCH JOB ?\n         BZ    NOBATCH              IF NOT, CHECK IF STC\n         B     CHKJOBNM            CHECK JOBNAME\nNOBATCH  ICM   R15,15,ASCBJBNS     IS IS A STARTED TASK ?\n         BZ    NXTASCB             IF NOT, GET NEXT ASCB\nCHKJOBNM CLC   0(8,R15),CNSL       CONSOLE ADDRESS SPACE?\n         BE    PROCESS               IF SO, GET ASID\nNXTASCB  ICM   R14,15,ASCBFWDP     GET NEXT ASCB\n         BZ    FINIS               IF NO MORE LEAVE NOW!\n         B     LOOPNM              CONTINUE THE SEARCH\nPROCESS  LH    R4,ASCBASID         LOAD CONSOLE ASID FOR SSAR\n         DROP  R1,R14              DONE WITH ADDRESSABILITY\n*\n*\n***********************************************************************\n*                                                                     *\n*        PREPARE FOR FULLSCREEN OPERATIONS                            *\n*                                                                     *\n***********************************************************************\n*\n*\n         STFSMODE ON,INITIAL=YES   LET VTAM KNOW ABOUT FULLSCREEN\n         LA    R1,ERASE            POINT TO ERASE CNTL CHARS\n         LA    R0,L'ERASE          GET THE LENGTH\n         TPUT  (1),(0),FULLSCR     ERASE THE 3270 SCREEN\n         MODESET KEY=ZERO,MODE=SUP GET INTO SUPERVISOR STATE/KEY ZERO\n         AXRES AXLIST=AXLIST       RESERVE AN AX\n         EPAR  R1                  EXTRACT PRIMARY ASN\n         AXEXT ASID=(1)            EXTRACT OUR AX INTO R0\n         ST    R0,OLDAX            SAVE OUR ORIGINAL AX VALUE\n         AXEXT ASID=(4)            EXTRACT AX OF CONSOLE INTO R0\n         AXSET AX=(0)              SET OUR AX TO THAT OF CONSOLE\n         SSAR  R4                  SET 'CONSOLE' AS SEC'NDY ADDR SPC\n         EJECT\n*\n*\n***********************************************************************\n*                                                                     *\n*        INITIALIZE POINTERS                                          *\n*                                                                     *\n***********************************************************************\n*\n*\n         L     R5,CVTPTR           GET ADDR OF CVT\n         USING CVTMAP,R5\n         L     R5,CVTCUCB          GET CONSOLE UCM BASE ADDR\n         DROP  R5\n         LA    R5,0(,R5)           INSURANCE\n         S     R5,=F'4'            BACK UP FOUR BYTES\n         L     R5,0(,R5)           GET ADDR OF UCM PREFIX\n         USING UCMPRFX,R5\n         L     R5,UCMMCENT         GET ADDR OF MASTER CONSOLE UCM\n         DROP  R5\n         USING UCMLIST,R5\n         MVC   CONSOLE,UCMID       GET CONSOLE UCMID\n*\n*\n***********************************************************************\n*                                                                     *\n*        NOTE:  IF YOU SHOP IS AT A LEVEL BELOW MVS/XA 2.2.0. THE     *\n*               RDCM CONTROL BLOCK WILL BE ACCESSED OUT OF THE        *\n*               NUCLEUS.  I HAVE SET THIS AS THE DEFAULT.             *\n*                                                                     *\n***********************************************************************\n*\n*\n         L     R6,UCMXB            GET ADDR OF RDCM\n         L     R7,0(,R6)           GET ADDR OF TDCM\n*\n*\n***********************************************************************\n*                                                                     *\n*        NOTE:  IF YOU SHOP IS AT THE MVS/XA 2.2.0. LEVEL THE RDCM    *\n*               RDCM CONTROL BLOCK AREA IS LOCATED IN SUBPOOL 229     *\n*               IN THE CONSOLE ADDRESS SPACE.  USE THE FOLLOWING      *\n*               CODE TO REFLECT THIS CHANGE AND COMMENT OUT THE       *\n*               2 INSTRUCTIONS ABOVE FOR PRE-XA220.                   *\n*                                                                     *\n***********************************************************************\n*\n*\n*        LA    R1,4                LENGTH FOR MVCP\n*        SLR   R0,R0               ZERO R0 FOR MVCP\n*        MVCP  RDCM(R1),X'1C'(R5),R0       RDCM ADDRESS IN CONSOLE\n*        L     R6,RDCM                     SET RDCM INTO REG 6\n*\n*\n*        LA    R1,4                LENGTH FOR MVCP\n*        SLR   R0,R0               ZERO R0 FOR MVCP\n*        MVCP  TDCM(R1),X'00'(R6),R0       TDCM ADDRESS IN CONSOLE\n*        L     R7,TDCM                     SET TDCM INTO REG 7\n*\n*\n***********************************************************************\n         LA    R1,4                LENGTH FOR MVCP\n         SLR   R0,R0               ZERO R0 FOR MVCP\n         MVCP  SIBPTR(R1),X'30'(R7),R0 MOVE ADDR OF SCREEN IMAGE BUFFER\n         L     R2,SIBPTR           PICK UP SIB POINTER\n         SH    R2,=H'6'            BACK UP SIX BYTES (FOR CNTL CHARS)\n         L     R3,=A(21*84)        DISPLAY 21 LINES (79-DATA/5-CONTROL)\n         STM   R2,R3,SAVER23       SAVE SIB ADDRESS/LENGTH\n         B     DISPLAY             SKIP OVER TIMER ROUTINE\n         EJECT\n*\n*\n***********************************************************************\n*                                                                     *\n*        TIMER ROUTINE                                                *\n*                                                                     *\n***********************************************************************\n*\n*\n         DS    0D                  ALIGNMENT\nTIMER    DS    0H\n         NI    BITS,255-ATTNFLG    RESET ATTN FLAG\n         OI    BITS,TIMEFLG        SET TIMER FLAG\n         STIMER WAIT,DINTVL=WAITTIME WAIT FOR 1 SEC\n*\n*\n***********************************************************************\n*                                                                     *\n*        DISPLAY CONSOLE SCREEN                                       *\n*                                                                     *\n***********************************************************************\n*\n*\nDISPLAY  DS    0H\n         LM    R2,R3,SAVER23       RESTORE SIB ADDRESS/LENGTH\n         LA    R10,SCREEN          POINT TO MY SCREEN AREA\n         SSAR  R4                  R4 CONTAINS ASID FOR 'CONSOLE'\n         SLR   R0,R0               ZERO R0 FOR MVCP\nMVCP     DS    0H\n         MVCP  0(R3,R10),0(R2),R0  MOVE SIB TO MY ADDRESS SPACE\n         BZ    GOTITALL            MAKE SURE WE GOT IT ALL\n         A     R2,=F'256'          ADJUST REGS FOR MVCP\n         A     R10,=F'256'               \"      \"\n         S     R3,=F'256'                \"      \"\n         B     MVCP                GO GET THE REST\nGOTITALL DS    0H\n         LA    R10,SCREEN-1        BACK UP ONE FOR WCC X'C3'\n         MVI   WCC,X'C3'           NORMAL WCC (RESTORE/RESET)\n         L     R11,SAVER23+4       GET LEN FOR TPUT\n         LA    R11,1(,R11)         LEN +1 FOR WCC\n         XC    CMDBUFF,CMDBUFF     BLANK CMDBUFF\n         TM    BITS,ATTNFLG+TIMEFLG CHECK FLAG BITS\n         BZ    CHEKAUTH            NEITHER ONE - GO CHECK AUTH\n         BO    RESET               BOTH - RESET BITS AND MSG AREA\n         TM    BITS,TIMEFLG        ARE WE IN AUTO-ROLL MODE?\n         BO    ROLLMODE            YES, GO DISPLAY AUTO-ROLL MSG\n*                                  NO, MUST BE A RESHOW REQUEST!\n         MVI   WCC,X'C2'           SPECIAL WCC (RESTORE/NO RESET)\n         L     R1,SAVELEN          GET LENGTH TO MOVE COMMAND TEXT\n         EX    R1,MOVESAVE         MOVE SAVECMD TO CMDBUFF\n         NI    BITS,255-ATTNFLG    RESET ATTN FLAG\n         B     CHEKAUTH            GO TO CHECK AUTH ROUTINE\nROLLMODE DS    0H\n         LA    R8,0(R11,R10)       POINT TO END OF SCREEN BUFFER\n         MVC   0(AUTOL,R8),AUTO    DISPLAY AUTO-ROLL MESSAGE\n         LA    R11,AUTOL(,R11)     INCREMENT TPUT COUNT\n         B     TPUT                DISPLAY SIB WITH AUTO-ROLL MSG\nRESET    DS    0H\n         NI    BITS,255-ATTNFLG+TIMEFLG  ELSE RESET ATTN AND TIME FLAGS\n         LA    R8,0(R11,R10)       POINT TO END OF SCREEN BUFFER\n         MVI   0(R8),0             BLANK AUTO-ROLL MSG (ELSE, IT WILL\n         MVC   1(AUTOL-1,R8),0(R8) LEFT SHOWING FOR NON-AUTH USERS)\n         LA    R11,AUTOL(,R11)     INCREMENT TPUT COUNT\nCHEKAUTH DS    0H\n         TM    BITS,AUTHFLG        ALLOW COMMANDS?\n         BZ    TPUT                NO - BRANCH\n         LA    R8,0(R11,R10)       POINT TO END OF SCREEN BUFFER\n         MVC   0(READLEN,R8),READ  SETUP INPUT FIELD ON SCREEN\n         LA    R11,READLEN(,R11)   INCREMENT TPUT COUNT\nTPUT     DS    0H\n*    THE FOLLOWING TWO LINES ARE NECESSARY BECAUSE, IN ORDER TO ISSUE\n*    ANY SVC'S, PRIMARY AND SECONDARY ASN'S NEED TO BE THE SAME.\n         EPAR  R1                  EXTRACT PRIMARY ASN\n         SSAR  R1                  SET SECONDARY ASN TO CURRENT PRIMARY\n         TPUT  (10),(11),FULLSCR   WRITE THE SCREEN IMAGE BUFFER\n         TM    BITS,TIMEFLG        ARE WE IN AUTO-ROLL MODE?\n         BO    TIMER               GO WAIT SOME MORE\n         TGET  REPLY,166,ASIS      INPUT AND/OR CONTINUE\n         LTR   R15,R15             GOOD READ ?\n         BZ    ACTION              IF SO THEN BRANCH\n         TCLEARQ  INPUT            ELSE CLEAR BUFFERS\n         B     DISPLAY             AND REDISPLAY\n         EJECT\n*\n*\n***********************************************************************\n*                                                                     *\n*        DETERMINE RESPONSE FROM TERMINAL                             *\n*                                                                     *\n***********************************************************************\n*\n*\nACTION   DS    0H\n         CLI   REPLY,X'6E'         PA2 KEY?\n*        BE    TIMER               YES - ENTER AUTO-ROLL MODE\n         BE    DISPLAY             *** PA2 HAS BEEN DISABLED ***\n         CLI   REPLY,X'60'         NO ACTION BY 3270 OPERATOR\n         BE    DISPLAY             YES - REDISPLAY\n         CLI   REPLY,X'7D'         ENTER KEY STRUCK ?\n         BNE   EOJ                 NO - END OF PROG\n         EJECT\n*\n*\n***********************************************************************\n*                                                                     *\n*        TEST FOR AUTHORITY TO ENTER COMMANDS                         *\n*                                                                     *\n***********************************************************************\n*\n*\n         TM    BITS,AUTHFLG        ALLOW COMMANDS?\n         BZ    DISPLAY             NO - REDISPLAY\n         SH    R1,=H'7'            LENGTH TO RECOVER INPUT COMMAND\n         BM    DISPLAY             NONE ENTERED - REDISPLAY\n         MVI   COMMAND+4,C' '      BLANK COMMAND BUFFER\n         MVC   COMMAND+5(159),COMMAND+4  FINISH BLANKING BUFFER\n         EX    R1,SPACES           ALL BLANKS ENTERED?\n         BE    DISPLAY             YES - REDISPLAY\n         EX    R1,INSERT           MVC   COMMAND+4(0),REPLY+6\n         ST    R1,SAVELEN\n         MVC   SAVECMD(160),COMMAND+4 SAVE COMMAND BUFFER TEXT\n         LA    R1,5(,R1)           GET COMMAND LEN+4\n         STH   R1,COMMAND          STORE INTO RDW\n         CLI   COMMAND+4,C'\u00ac'      TEST FOR NO-ECHO COMMAND (\u00ac)\n         BE    NOTSIGN             SKIP WTO IF PRESENT\n         TM    BITS,SYSPFLG        SYSTEMS PROGRAMMER?\n         BO    ISSUECMD            IF SO, SKIP WTO\n         LA    R1,COMMAND          PUT MSG ADDR INTO REG 1\n         OI    2(R1),X'41'         REG0 + QREG0\n         OI    3(R1),X'04'         NO HARD COPY\n         SR    R0,R0               ZERO R0 FOR INSERT\n         IC    R0,CONSOLE          INSERT MASTER CONSOLE ID\n         SVC   35                  ISSUE WTO - DISPLAY COMMAND\n         B     ISSUECMD            GO ISSUE THE COMMAND\nNOTSIGN  DS    0H\n         MVI   COMMAND+4,C' '      CLEAR THE NOT SIGN (\u00ac)\nISSUECMD DS    0H\n         LA    R1,COMMAND          PUT MSG ADDRESS INTO REG 1\n         SR    R0,R0               ZERO R0 FOR INSERT\n         IC    R0,CONSOLE          INSERT MASTER CONSOLE ID\n         SVC   34                  SCHEDULE CSCB\n         XC    COMMAND,COMMAND     ZERO MCS FLAGS IN CASE OF REPLY\n         B     DISPLAY             NOW REDISPLAY\n         EJECT\n*\n*\n***********************************************************************\n*                                                                     *\n*        END OF JOB ROUTINE                                           *\n*                                                                     *\n***********************************************************************\n*\n*\nEOJ      DS    0H\n         LA    R1,ERASE            POINT TO ERASE CNTL CHARS\n         LA    R0,L'ERASE          GET THE LENGTH\n         TPUT  (1),(0),FULLSCR     ERASE THE 3270 SCREEN\n         EPAR  R1                  EXTRACT PRIMARY ASN\n         SSAR  R1                  SET SECONDARY ASN TO CURRENT PRIMARY\n         L     R0,OLDAX            RELOAD OUR ORIGINAL AX VALUE\n         AXSET AX=(0)              SET OUR AX TO THAT OF US\n         AXFRE AXLIST=AXLIST       FREE THE AX\n         MODESET KEY=NZERO,MODE=PROB SET PROTECT KEY TO NONZERO\n         SLR   R0,R0               ** TURN OFF AUTHORIZATION **\n         SVC   255                 ** ISSUE AUTHORIZATION SVC **\n         ESTAE 0                   DELETE ESTAE EXIT\nSTAXOFF  DS    0H\n         STAX\nRETURN   DS    0H\nFINIS    STFSMODE OFF,INITIAL=NO   NO MORE FULLSCREEN WRITES\n         STLINENO LINE=1,MODE=OFF  GO BACK TO LINE 1 FOR NEXT ONE\nNOACF2   L     R13,SAVE+4          RESTORE SAVE AREA POINTER\n         RETURN (14,12),T,RC=0     RETURN\n         EJECT\n*\n*\n***********************************************************************\n*                                                                     *\n*        ERROR ROUTINES                                               *\n*                                                                     *\n***********************************************************************\n*\n*\nERROR    DS    0H\n         LA    R1,ERRORMSG         LOAD ADDRESS OF MESSAGE\n         LA    R0,L'ERRORMSG       LOAD LENGTH OF MESSAGE\n         TPUT  (1),(0),R           TELL USER ABOUT ERROR\n         B     RETURN\nBADAUTH  DS    0H\n         LA    R1,AUTHMSG          LOAD ADDRESS OF MESSAGE\n         LA    R0,L'AUTHMSG        LOAD LENGTH OF MESSAGE\n         TPUT  (1),(0),R           TELL USER ABOUT ERROR\n         B     RETURN\nSTAXERR  DS    0H\n         LA    R1,STAXMSG          LOAD ADDRESS OF MESSAGE\n         LA    R0,L'STAXMSG        LOAD LENGTH OF MESSAGE\n         TPUT  (1),(0),R           TELL USER ABOUT ERROR\n         B     RETURN\nESTAERR  DS    0H\n         LA    R1,ESTAEMSG         LOAD ADDRESS OF MESSAGE\n         LA    R0,L'ESTAEMSG       LOAD LENGTH OF MESSAGE\n         TPUT  (1),(0),R           TELL USER ABOUT ERROR\n         B     STAXOFF\n         EJECT\n*\n*\n***********************************************************************\n*                                                                     *\n*        ESTAE EXIT ROUTINE                                           *\n*                                                                     *\n***********************************************************************\n*\n*\nESTAEXIT DS    0H\n         USING ESTAEXIT,R15\n         MODESET KEY=NZERO,MODE=PROB SET PROTECT KEY TO NONZERO\n         STAX\n         XR    R15,R15             SET CODE FOR ABEND\n         BR    R14                 GO TO ABNORMAL TERMINATION\n         DROP  R15\n         EJECT\n*\n*\n***********************************************************************\n*                                                                     *\n*        STAX EXIT ROUTINE                                            *\n*                                                                     *\n***********************************************************************\n*\n*\nSTAXEXIT DS    0H\n         USING STAXEXIT,R15\n         OI    BITS,ATTNFLG        SET ATTN FLAG\n         BR    R14                 RETURN\n         DROP  R15\n         EJECT\n*\n**       LITERALS\n*\n         LTORG\n         SPACE 2\n*\n**       EQUATES\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n*\n**       EXECUTED INSTRUCTIONS\n*\nINSERT   MVC   COMMAND+4(0),REPLY+6\nSPACES   CLC   REPLY+6(0),COMMAND+4\nMOVESAVE MVC   CMDBUFF(0),SAVECMD\n         SPACE 2\n*\n**       MESSAGES\n*\nCNSLE    DC    C'CONSOLE'\nERRORMSG DC    C'MCS MUST BE INVOKED FROM A DISPLAY TERMINAL'\nAUTHMSG  DC    C'YOU ARE NOT AUTHORIZED TO USE MCS'\nSTAXMSG  DC    C'ERROR ESTABLISHING STAX EXIT'\nESTAEMSG DC    C'ERROR ESTABLISHING ESTAE EXIT'\n         SPACE 2\n*\n**       CONSTANTS AND WORK AREAS\n*\nSAVE     DC    18F'0'              SAVE AREA\nOLDAX    DS    F                   OUR ORIGINAL AX VALUE ON PGM ENTRY\nSAVER23  DC    2F'0'               SIB POINTER AND LENGTH SAVE AREA\nSIBPTR   DS    F                   POINTER TO SCREEN IMAGE BUFFER\nRDCM     DS    F                   HOLD RDCM FOR MVS/XA 2.2.0.\nTDCM     DS    F                   HOLD TDCM FOR MVS/XA 2.2.0.\nAXLIST   DC    H'1',H'0'           AXRES PARM LIST\n*                HHMMSSHT\nWAITTIME DC    C'00000100'         1 SECOND WAIT TIME\nCONSOLE  DC    XL1'00'             CONSOLE ID FROM UCMID\nCNSL     DC    CL8'CONSOLE'\n*\n*\nAUTHTBL  DS    0H\n         DC    CL2'SS'     TECHNICAL SERVICES USERS\n         DC    CL2'CM'     CAPACITY MANAGEMENT USERS\n         DC    CL2'SS'     TECHNICAL SERVICES USERS\n         DC    CL2'SS'     TECHNICAL SERVICES USERS\n         DC    CL2'SS'     TECHNICAL SERVICES USERS\nAUTHENT  EQU   (*-AUTHTBL)/2     NO. OF TABLE ENTRIES\n*\n*\nBITS     DC    X'0'                PROGRAM SWITCHES\nAUTHFLG  EQU   X'80'\nATTNFLG  EQU   X'40'\nTIMEFLG  EQU   X'20'\nSYSPFLG  EQU   X'10'\n*\nAUTO     DC    X'115A501DE813',C' MCS AUTO-ROLL MODE / HIT PA1 TO RETURX\n               N TO NORMAL MODE'\nAUTOL    EQU   *-AUTO\nERASE    DC    X'27F5401D40'       USED TO CLEAR 3270 TERMINAL BUFFER\nCOMMAND  DC    F'0'\n         DC    CL160' '            OPERATOR COMMAND\nSAVECMD  DC    CL160' '            OPERATOR COMMAND SAVE AREA\nSAVELEN  DC    F'0'                LENGTH FOR SAVECMD\nREPLY    DC    XL166'00'           OPERATOR COMMAND SAVE AREA\nREAD     DC    X'115A501DC913'     SET HIGHINTENS/UNPROT/MDT FIELD\nCMDBUFF  DC    XL166'00'           INPUT FROM TERMINAL\n         DC    X'1D60'             SET PROT FIELD\nREADLEN  EQU   *-READ              LENGTH OF READ AREA\nWCC      DC    X'C3'               WCC\nSCREEN   DS    CL1024              IMAGE OF\n         DS    CL1024              CONSOLE BUFFER\n*\n**       DSECTS\n*\n*        PRINT ON,NOGEN\n         TITLE 'MCS: TEST FOR LOGONID MASK - IHAPSA'\n         IHAPSA DSECT=YES\n         TITLE 'MCS: TEST FOR LOGONID MASK - IHAASCB'\n         IHAASCB DSECT=YES\n         TITLE 'MCS: TEST FOR LOGONID MASK - ACCVT'\n         ACCVT  DSECT=YES\n         TITLE 'MCS: TEST FOR LOGONID MASK - ACUCB'\n         ACUCB  DSECT=YES\n         TITLE 'MCS: TEST FOR LOGONID MASK - ACFASVT'\n         ACFASVT DSECT=YES\n         TITLE 'MCS: TEST FOR LOGONID MASK - LIDREC'\n         LIDREC DSECT=YES\n         IKJCPPL\n         SPACE 2\n*        IKJPSCB\n         SPACE 2\n         CVT   DSECT=YES,PREFIX=YES,LIST=YES\n         SPACE 2\n         IEECUCM FORMAT=NEW\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MCSOLD": {"ttr": 2566, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "MCS      TITLE      'DISPLAY MASTER CONSOLE SIB ON TSO TERMINAL'\n***********************************************************************\n*                                                                     *\n* TO USE:                                                             *\n*                                                                     *\n*     1) ENTER MCS. YOU MUST BE OUTSIDE OF SPF DUE TO SPF/APF         *\n*        AUTHORIZATION RESTRICTIONS. (OR USE AN AUTHORIZATION SVC     *\n*        TO TURN ON THE JSCBAUTH BIT FOR THE CURRENT TCB).            *\n*                                                                     *\n*     2) THE MASTER CONSOLE SCREEN IMAGE BUFFER WILL BE DISPLAYED ON  *\n*        YOUR TSO TERMINAL. FOR USERS WITH OPER AUTHORITY, AN INPUT   *\n*        BUFFER WILL BE PROVIDED AT THE BOTTOM OF THE SCREEN WHICH    *\n*        CAN BE USED TO ENTER ANY MVS OR JES2 COMMAND. IF YOU HIT     *\n*        ENTER WITHOUT ANY COMMAND, THE SCREEN WILL BE UPDATED AND    *\n*        REDISPLAYED.  IF YOU DON'T WANT THE COMMAND ECHOED ON THE    *\n*        CONSOLE, PRECEED THE COMMAND WITH A NOT SIGN (\u00ac).            *\n*                                                                     *\n*     3) TO PLACE YOURSELF INTO AUTO-ROLL MODE, HIT THE PA2 KEY.      *\n*        THIS WILL REFRESH THE SCREEN EVERY SECOND. TO RETURN TO      *\n*        NORMAL MODE, HIT THE PA1 KEY.                                *\n*                                                                     *\n*     4) TO TERMINATE MCS, HIT ANY PF KEY.                            *\n*                                                                     *\n*                                                                     *\n* CHANGE HISTORY:                                                     *\n*                                                                     *\n*     1) I DISCOVERED AN INTERESTING FACT THAT WHEN YOU EXTRACT       *\n*        ANOTHER ADDRESS SPACE'S AUTHORIZATION INDEX (AXEXT) AND      *\n*        USE THAT VALUE TO SET YOUR AUTHORIZATION INDEX (AXSET)       *\n*        THE AX VALUE YOU SET DOES NOT RETURN BACK TO YOUR ORIGINAL   *\n*        VALUE BY FREEING THE AUTHORIZATION INDEX (AXFRE).            *\n*                                                                     *\n*        A SECOND SET SECONDARY ADDRESS SPACE (SSAR) ATTEMPT BY A     *\n*        PROGRAM IMMEDIATELY AFTER THIS MAY OR MAY NOT REQUIRE A      *\n*        AXEXT OR AXSET SEQUENCE OF INSTRUCTIONS BEFORE ISSUING THE   *\n*        SSAR INSTRUCTION SINCE THE AX VALUE WAS PREVIOUSLY SET AND   *\n*        WILL STAY THAT VALUE UNLESS EXPLICITY CHANGED OR ADDRESS     *\n*        SPACE COMPLETION.                                            *\n*                                                                     *\n*        I CHANGED MCS TO SAVE THE USERS ORIGINAL AX VALUE AND        *\n*        RESTORE IT UPON COMPLETION OF MCS.  07/10/87  TOM BRYANT     *\n*                                                                     *\n*     2) SINCE THE CONSOLE ASID HAS CHANGED A LOT IN MVS THROUGH THE  *\n*        YEARS (SEE DIAGRAM BELOW), I DECIDED TO SEARCH FOR THE       *\n*        CONSOLE ASCB/ASID AND LOAD THE ASID WHEN FOUND FOR LATER     *\n*        SSAR PROCESSING.        02/04/87   TOM BRYANT                *\n*                                                                     *\n*        ASID 5 FOR MVS/SP 1.3.0.                                     *\n*        ASID 6 FOR MVS/XA PRE-DFP 2.1.0.                             *\n*        ASID 7 FOR MVS/XA DFP 2.1.0.                                 *\n*                                                                     *\n*     3) ADDED THE VTAM STFSMODE AND STLINENO TO PREVENT YOUR TERMINAL*\n*        MESSAGES BEING OVERLAID BY A FULLSCREEN WRITE AND TO ENSURE  *\n*        THAT THE NEXT NON-FULLSCREEN WRITE BEGINS ON LINE 1.         *\n*        02/04/87    TOM BRYANT                                       *\n*                                                                     *\n*     4) DUE TO 3290 TERMINAL PA2 PROBLEMS, THE PA2 FUNCTION HAS BEEN *\n*        DISABLED UNTIL RESOLUTION OF THE 3290 PROBLEM.  THE PA2 WILL *\n*        PERFORM A 'REDISPLAY' INSTEAD OF GOING TO A TIMER ROUTINE.   *\n*                                                                     *\n*                                                                     *\n*        IF ANYONE HAS SUCCESSFULLY RUN WITH AUTOROLL USING A 3290    *\n*        PLEASE CALL ME AT (312) 769-8414.  02/04/87  TOM BRYANT      *\n*                                                                     *\n***********************************************************************\n         EJECT\nMCS      CSECT\n***********************************************************************\n*                                                                     *\n*        ENTRANCE JUNK                                                *\n*                                                                     *\n***********************************************************************\n         SAVE  (14,12),,CONSOLE_DISPLAY_ON_TSO_TERMINAL\n         LR    R12,R15             USE R12 AS PROG BASE\n         USING MCS,R12             TELL ASSEMBLER ABOUT BASE REG\n         LR    R9,R1               SAVE ADDR OF CPPL\n         USING CPPL,R9             TELL ASSEMBLER\n         ST    R13,SAVE+4          CHAIN\n         LA    R3,SAVE              SAVE\n         ST    R3,8(,R13)            AREAS\n         LR    R13,R3                 TOGETHER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ESTABLISH ENVIRONMENT                                        *\n*                                                                     *\n***********************************************************************\n         GTSIZE\n         LTR   R0,R0               IS THIS A 3270 TYPE DEVICE\n         BZ    ERROR               NO - CANNOT BE MCS CONSOLE\n         L     R4,CPPLPSCB         GET ADDR OF PSCB\n         USING PSCB,R4\n         LA    R0,1                ** TURN ON AUTHORIZATION **\n         SVC   255                 ** ISSUE AUTHORIZATION SVC **\n         CLC   PSCBUSER(2),=CL2'SS' IS THIS A SYSTEMS PROGRAMMER?\n         BNE   CHKAUTH             NO, DON'T SET SYSPFLG\n         OI    BITS,SYSPFLG        SET SYSPFLG\n***********************************************************************\n*        NOTE: A NON-SS USER OF MCS MUST USE IT OUTSIDE OF ISPF/PDF   *\n*              DUE TO THE AUTHORIZATION SVC ONLY ALLOWING SS-PREFIXED *\n*              USERS.   TOM BRYANT                                    *\n***********************************************************************\nCHKAUTH  DS    0H\n         TM    PSCBATR1,PSCBCTRL   DOES USER HAVE OPER AUTH\n         BZ    NOTAUTH             NO, SKIP SETTING AUTH BIT\n         OI    BITS,AUTHFLG        INDICATE COMMAND AUTHORITY\n         DROP  R4\nNOTAUTH  DS    0H\n         STAX  STAXEXIT            ESTABLISH ATTENTION EXIT\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   STAXERR             BRANCH ON ERROR\n         ESTAE ESTAEXIT            ESTABLISH ESTAE EXIT\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ESTAERR             BRANCH ON ERROR\n***********************************************************************\n*                                                                     *\n*        SEARCH FOR CONSOLE ASCB/ASID STARTING WITH HIGHEST ASCB      *\n*        IN ORDER TO GET ASID FOR LATER SSAR INSTRUCTION.             *\n*                                                                     *\n***********************************************************************\n         L     R1,CVTPTR           GET ADDR OF CVT\n         USING CVTMAP,R1           SET ADDRESSABILITY\n         L     R14,CVTASCBH        HIGHEST ASCB ADDRESS\n         USING ASCB,R14            SET ADDRESSABILITY\nLOOPNM   ICM   R15,15,ASCBJBNI     IS IT A BATCH JOB ?\n         BZ    NOBATCH              IF NOT, CHECK IF STC\n         B     CHKJOBNM            CHECK JOBNAME\nNOBATCH  ICM   R15,15,ASCBJBNS     IS IS A STARTED TASK ?\n         BZ    NXTASCB             IF NOT, GET NEXT ASCB\nCHKJOBNM CLC   0(8,R15),CNSL       CONSOLE ADDRESS SPACE?\n         BE    PROCESS               IF SO, GET ASID\nNXTASCB  ICM   R14,15,ASCBFWDP     GET NEXT ASCB\n         BZ    FINIS               IF NO MORE LEAVE NOW!\n         B     LOOPNM              CONTINUE THE SEARCH\nPROCESS  LH    R4,ASCBASID         LOAD CONSOLE ASID FOR SSAR\n         DROP  R1,R14              DONE WITH ADDRESSABILITY\n***********************************************************************\n*                                                                     *\n*        PREPARE FOR FULLSCREEN OPERATIONS                            *\n*                                                                     *\n***********************************************************************\n         STFSMODE ON,INITIAL=YES   LET VTAM KNOW ABOUT FULLSCREEN\n         LA    R1,ERASE            POINT TO ERASE CNTL CHARS\n         LA    R0,L'ERASE          GET THE LENGTH\n         TPUT  (1),(0),FULLSCR     ERASE THE 3270 SCREEN\n         MODESET KEY=ZERO,MODE=SUP GET INTO SUPERVISOR STATE/KEY ZERO\n         AXRES AXLIST=AXLIST       RESERVE AN AX\n         EPAR  R1                  EXTRACT PRIMARY ASN\n         AXEXT ASID=(1)            EXTRACT OUR AX INTO R0\n         ST    R0,OLDAX            SAVE OUR ORIGINAL AX VALUE\n         AXEXT ASID=(4)            EXTRACT AX OF CONSOLE INTO R0\n         AXSET AX=(0)              SET OUR AX TO THAT OF CONSOLE\n         SSAR  R4                  SET 'CONSOLE' AS SEC'NDY ADDR SPC\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INITIALIZE POINTERS                                          *\n*                                                                     *\n***********************************************************************\n         L     R5,CVTPTR           GET ADDR OF CVT\n         USING CVTMAP,R5\n         L     R5,CVTCUCB          GET CONSOLE UCM BASE ADDR\n         DROP  R5\n         LA    R5,0(,R5)           INSURANCE\n         S     R5,=F'4'            BACK UP FOUR BYTES\n         L     R5,0(,R5)           GET ADDR OF UCM PREFIX\n         USING UCMPRFX,R5\n         L     R5,UCMMCENT         GET ADDR OF MASTER CONSOLE UCM\n         DROP  R5\n         USING UCMLIST,R5\n         MVC   CONSOLE,UCMID       GET CONSOLE UCMID\n         L     R6,UCMXB            GET ADDR OF RDCM\n         L     R7,0(,R6)           GET ADDR OF TDCM\n         LA    R1,4                LENGTH FOR MVCP\n         SLR   R0,R0               ZERO R0 FOR MVCP\n         MVCP  SIBPTR(R1),X'30'(R7),R0 MOVE ADDR OF SCREEN IMAGE BUFFER\n         L     R2,SIBPTR           PICK UP SIB POINTER\n         SH    R2,=H'6'            BACK UP SIX BYTES (FOR CNTL CHARS)\n         L     R3,=A(21*84)        DISPLAY 21 LINES (79-DATA/5-CONTROL)\n         STM   R2,R3,SAVER23       SAVE SIB ADDRESS/LENGTH\n         B     DISPLAY             SKIP OVER TIMER ROUTINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TIMER ROUTINE                                                *\n*                                                                     *\n***********************************************************************\n         DS    0D                  ALIGNMENT\nTIMER    DS    0H\n         NI    BITS,255-ATTNFLG    RESET ATTN FLAG\n         OI    BITS,TIMEFLG        SET TIMER FLAG\n         STIMER WAIT,DINTVL=WAITTIME WAIT FOR 1 SEC\n***********************************************************************\n*                                                                     *\n*        DISPLAY CONSOLE SCREEN                                       *\n*                                                                     *\n***********************************************************************\nDISPLAY  DS    0H\n         LM    R2,R3,SAVER23       RESTORE SIB ADDRESS/LENGTH\n         LA    R10,SCREEN          POINT TO MY SCREEN AREA\n         SSAR  R4                  R4 CONTAINS ASID FOR 'CONSOLE'\n         SLR   R0,R0               ZERO R0 FOR MVCP\nMVCP     DS    0H\n         MVCP  0(R3,R10),0(R2),R0  MOVE SIB TO MY ADDRESS SPACE\n         BZ    GOTITALL            MAKE SURE WE GOT IT ALL\n         A     R2,=F'256'          ADJUST REGS FOR MVCP\n         A     R10,=F'256'               \"      \"\n         S     R3,=F'256'                \"      \"\n         B     MVCP                GO GET THE REST\nGOTITALL DS    0H\n         LA    R10,SCREEN-1        BACK UP ONE FOR WCC X'C3'\n         MVI   WCC,X'C3'           NORMAL WCC (RESTORE/RESET)      CICA\n         L     R11,SAVER23+4       GET LEN FOR TPUT\n         LA    R11,1(,R11)         LEN +1 FOR WCC\n         XC    CMDBUFF,CMDBUFF     BLANK CMDBUFF                   CICA\n         TM    BITS,ATTNFLG+TIMEFLG CHECK FLAG BITS                CICA\n         BZ    CHEKAUTH            NEITHER ONE - GO CHECK AUTH     CICA\n         BO    RESET               BOTH - RESET BITS AND MSG AREA  CICA\n         TM    BITS,TIMEFLG        ARE WE IN AUTO-ROLL MODE?       CICA\n         BO    ROLLMODE            YES, GO DISPLAY AUTO-ROLL MSG   CICA\n*                                  NO, MUST BE A RESHOW REQUEST!   CICA\n         MVI   WCC,X'C2'           SPECIAL WCC (RESTORE/NO RESET)  CICA\n         L     R1,SAVELEN          GET LENGTH TO MOVE COMMAND TEXT CICA\n         EX    R1,MOVESAVE         MOVE SAVECMD TO CMDBUFF         CICA\n         NI    BITS,255-ATTNFLG    RESET ATTN FLAG                 CICA\n         B     CHEKAUTH            GO TO CHECK AUTH ROUTINE        CICA\nROLLMODE DS    0H                                                  CICA\n         LA    R8,0(R11,R10)       POINT TO END OF SCREEN BUFFER\n         MVC   0(AUTOL,R8),AUTO    DISPLAY AUTO-ROLL MESSAGE\n         LA    R11,AUTOL(,R11)     INCREMENT TPUT COUNT\n         B     TPUT                DISPLAY SIB WITH AUTO-ROLL MSG\nRESET    DS    0H                                                  CICA\n         NI    BITS,255-ATTNFLG+TIMEFLG  ELSE RESET ATTN AND TIME FLAGS\n         LA    R8,0(R11,R10)       POINT TO END OF SCREEN BUFFER\n         MVI   0(R8),0             BLANK AUTO-ROLL MSG (ELSE, IT WILL\n         MVC   1(AUTOL-1,R8),0(R8) LEFT SHOWING FOR NON-AUTH USERS)\n         LA    R11,AUTOL(,R11)     INCREMENT TPUT COUNT\nCHEKAUTH DS    0H\n         TM    BITS,AUTHFLG        ALLOW COMMANDS?\n         BZ    TPUT                NO - BRANCH\n         LA    R8,0(R11,R10)       POINT TO END OF SCREEN BUFFER\n         MVC   0(READLEN,R8),READ  SETUP INPUT FIELD ON SCREEN\n         LA    R11,READLEN(,R11)   INCREMENT TPUT COUNT\nTPUT     DS    0H\n*    THE FOLLOWING TWO LINES ARE NECESSARY BECAUSE, IN ORDER TO ISSUE\n*    ANY SVC'S, PRIMARY AND SECONDARY ASN'S NEED TO BE THE SAME.\n         EPAR  R1                  EXTRACT PRIMARY ASN\n         SSAR  R1                  SET SECONDARY ASN TO CURRENT PRIMARY\n         TPUT  (10),(11),FULLSCR   WRITE THE SCREEN IMAGE BUFFER\n         TM    BITS,TIMEFLG        ARE WE IN AUTO-ROLL MODE?\n         BO    TIMER               GO WAIT SOME MORE\n         TGET  REPLY,166,ASIS      INPUT AND/OR CONTINUE\n         LTR   R15,R15             GOOD READ ?\n         BZ    ACTION              IF SO THEN BRANCH\n         TCLEARQ  INPUT            ELSE CLEAR BUFFERS\n         B     DISPLAY             AND REDISPLAY\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DETERMINE RESPONSE FROM TERMINAL                             *\n*                                                                     *\n***********************************************************************\nACTION   DS    0H\n         CLI   REPLY,X'6E'         PA2 KEY?\n*        BE    TIMER               YES - ENTER AUTO-ROLL MODE\n         BE    DISPLAY             *** PA2 HAS BEEN DISABLED ***   CICA\n         CLI   REPLY,X'60'         NO ACTION BY 3270 OPERATOR\n         BE    DISPLAY             YES - REDISPLAY\n         CLI   REPLY,X'7D'         ENTER KEY STRUCK ?\n         BNE   EOJ                 NO - END OF PROG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TEST FOR AUTHORITY TO ENTER COMMANDS                         *\n*                                                                     *\n***********************************************************************\n         TM    BITS,AUTHFLG        ALLOW COMMANDS?\n         BZ    DISPLAY             NO - REDISPLAY\n         SH    R1,=H'7'            LENGTH TO RECOVER INPUT COMMAND\n         BM    DISPLAY             NONE ENTERED - REDISPLAY\n         MVI   COMMAND+4,C' '      BLANK COMMAND BUFFER\n         MVC   COMMAND+5(159),COMMAND+4  FINISH BLANKING BUFFER\n         EX    R1,SPACES           ALL BLANKS ENTERED?\n         BE    DISPLAY             YES - REDISPLAY\n         EX    R1,INSERT           MVC   COMMAND+4(0),REPLY+6\n         ST    R1,SAVELEN                                          CICA\n         MVC   SAVECMD(160),COMMAND+4 SAVE COMMAND BUFFER TEXT     CICA\n         LA    R1,5(,R1)           GET COMMAND LEN+4\n         STH   R1,COMMAND          STORE INTO RDW\n         CLI   COMMAND+4,C'\u00ac'      TEST FOR NO-ECHO COMMAND (\u00ac)\n         BE    NOTSIGN             SKIP WTO IF PRESENT\n         TM    BITS,SYSPFLG        SYSTEMS PROGRAMMER?\n         BO    ISSUECMD            IF SO, SKIP WTO\n         LA    R1,COMMAND          PUT MSG ADDR INTO REG 1\n         OI    2(R1),X'41'         REG0 + QREG0\n         OI    3(R1),X'04'         NO HARD COPY\n         SR    R0,R0               ZERO R0 FOR INSERT\n         IC    R0,CONSOLE          INSERT MASTER CONSOLE ID\n         SVC   35                  ISSUE WTO - DISPLAY COMMAND\n         B     ISSUECMD            GO ISSUE THE COMMAND\nNOTSIGN  DS    0H\n         MVI   COMMAND+4,C' '      CLEAR THE NOT SIGN (\u00ac)\nISSUECMD DS    0H\n         LA    R1,COMMAND          PUT MSG ADDRESS INTO REG 1\n         SR    R0,R0               ZERO R0 FOR INSERT\n         IC    R0,CONSOLE          INSERT MASTER CONSOLE ID\n         SVC   34                  SCHEDULE CSCB\n         XC    COMMAND,COMMAND     ZERO MCS FLAGS IN CASE OF REPLY\n         B     DISPLAY             NOW REDISPLAY\n         EJECT\n***********************************************************************\n*                                                                     *\n*        END OF JOB ROUTINE                                           *\n*                                                                     *\n***********************************************************************\nEOJ      DS    0H\n         LA    R1,ERASE            POINT TO ERASE CNTL CHARS\n         LA    R0,L'ERASE          GET THE LENGTH\n         TPUT  (1),(0),FULLSCR     ERASE THE 3270 SCREEN\n         EPAR  R1                  EXTRACT PRIMARY ASN\n         SSAR  R1                  SET SECONDARY ASN TO CURRENT PRIMARY\n         L     R0,OLDAX            RELOAD OUR ORIGINAL AX VALUE\n         AXSET AX=(0)              SET OUR AX TO THAT OF US\n         AXFRE AXLIST=AXLIST       FREE THE AX\n         MODESET KEY=NZERO,MODE=PROB SET PROTECT KEY TO NONZERO\n         SLR   R0,R0               ** TURN OFF AUTHORIZATION **\n         SVC   255                 ** ISSUE AUTHORIZATION SVC **\n         ESTAE 0                   DELETE ESTAE EXIT\nSTAXOFF  DS    0H\n         STAX\nRETURN   DS    0H\nFINIS    STFSMODE OFF,INITIAL=NO   NO MORE FULLSCREEN WRITES\n         STLINENO LINE=1,MODE=OFF  GO BACK TO LINE 1 FOR NEXT ONE\n         L     R13,SAVE+4          RESTORE SAVE AREA POINTER\n         RETURN (14,12),T,RC=0     RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ERROR ROUTINES                                               *\n*                                                                     *\n***********************************************************************\nERROR    DS    0H\n         LA    R1,ERRORMSG         LOAD ADDRESS OF MESSAGE\n         LA    R0,L'ERRORMSG       LOAD LENGTH OF MESSAGE\n         TPUT  (1),(0),R           TELL USER ABOUT ERROR\n         B     RETURN\nSTAXERR  DS    0H\n         LA    R1,STAXMSG          LOAD ADDRESS OF MESSAGE\n         LA    R0,L'STAXMSG        LOAD LENGTH OF MESSAGE\n         TPUT  (1),(0),R           TELL USER ABOUT ERROR\n         B     RETURN\nESTAERR  DS    0H\n         LA    R1,ESTAEMSG         LOAD ADDRESS OF MESSAGE\n         LA    R0,L'ESTAEMSG       LOAD LENGTH OF MESSAGE\n         TPUT  (1),(0),R           TELL USER ABOUT ERROR\n         B     STAXOFF\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ESTAE EXIT ROUTINE                                           *\n*                                                                     *\n***********************************************************************\nESTAEXIT DS    0H\n         USING ESTAEXIT,R15\n         MODESET KEY=NZERO,MODE=PROB SET PROTECT KEY TO NONZERO\n         STAX\n         XR    R15,R15             SET CODE FOR ABEND\n         BR    R14                 GO TO ABNORMAL TERMINATION\n         DROP  R15\n         EJECT\n***********************************************************************\n*                                                                     *\n*        STAX EXIT ROUTINE                                            *\n*                                                                     *\n***********************************************************************\nSTAXEXIT DS    0H\n         USING STAXEXIT,R15\n         OI    BITS,ATTNFLG        SET ATTN FLAG\n         BR    R14                 RETURN\n         DROP  R15\n         EJECT\n*\n**       LITERALS\n*\n         LTORG\n         SPACE 2\n*\n**       EQUATES\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n*\n**       EXECUTED INSTRUCTIONS\n*\nINSERT   MVC   COMMAND+4(0),REPLY+6\nSPACES   CLC   REPLY+6(0),COMMAND+4\nMOVESAVE MVC   CMDBUFF(0),SAVECMD                                  CICA\n         SPACE 2\n*\n**       MESSAGES\n*\nCNSLE    DC    C'CONSOLE'\nERRORMSG DC    C'MCS MUST BE INVOKED FROM A DISPLAY TERMINAL'\nSTAXMSG  DC    C'ERROR ESTABLISHING STAX EXIT'\nESTAEMSG DC    C'ERROR ESTABLISHING ESTAE EXIT'\n         SPACE 2\n*\n**       CONSTANTS AND WORK AREAS\n*\nSAVE     DC    18F'0'              SAVE AREA\nOLDAX    DS    F                   OUR ORIGINAL AX VALUE ON PGM ENTRY\nSAVER23  DC    2F'0'               SIB POINTER AND LENGTH SAVE AREA\nSIBPTR   DS    F                   POINTER TO SCREEN IMAGE BUFFER\nAXLIST   DC    H'1',H'0'           AXRES PARM LIST\n*                HHMMSSHT\nWAITTIME DC    C'00000100'         1 SECOND WAIT TIME\nCONSOLE  DC    XL1'00'             CONSOLE ID FROM UCMID\nCNSL     DC    CL8'CONSOLE'\n*\nBITS     DC    X'0'                PROGRAM SWITCHES\nAUTHFLG  EQU   X'80'\nATTNFLG  EQU   X'40'\nTIMEFLG  EQU   X'20'\nSYSPFLG  EQU   X'10'\n*\nAUTO     DC    X'115A501DE813',C' MCS AUTO-ROLL MODE / HIT PA1 TO RETURX\n               N TO NORMAL MODE'\nAUTOL    EQU   *-AUTO\nERASE    DC    X'27F5401D40'       USED TO CLEAR 3270 TERMINAL BUFFER\nCOMMAND  DC    F'0'\n         DC    CL160' '            OPERATOR COMMAND\nSAVECMD  DC    CL160' '            OPERATOR COMMAND SAVE AREA      CICA\nSAVELEN  DC    F'0'                LENGTH FOR SAVECMD              CICA\nREPLY    DC    XL166'00'           OPERATOR COMMAND SAVE AREA      CICA\nREAD     DC    X'115A501DC913'     SET HIGHINTENS/UNPROT/MDT FIELD CICA\nCMDBUFF  DC    XL166'00'           INPUT FROM TERMINAL             CICA\n         DC    X'1D60'             SET PROT FIELD                  CICA\nREADLEN  EQU   *-READ              LENGTH OF READ AREA             CICA\nWCC      DC    X'C3'               WCC                             CICA\nSCREEN   DS    CL1024              IMAGE OF\n         DS    CL1024              CONSOLE BUFFER\n         EJECT\n*\n**       DSECTS\n*\n         PRINT ON,NOGEN\n         IKJCPPL\n         SPACE 2\n         IKJPSCB\n         SPACE 2\n         CVT   DSECT=YES,PREFIX=YES,LIST=YES\n         SPACE 2\n         IEECUCM FORMAT=NEW\n         IHAASCB\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MTP": {"ttr": 2820, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " TITLE 'MTP:  LET TSO USER KNOW ABOUT TAPE AND CART MOUNT PENDINGS'\n**********************************************************************\n* NAME       -   MTP                                                 *\n*                                                                    *\n* AUTHOR     -   T. BRYANT                                           *\n*                                                                    *\n* FUNCTION   -   ISSUE MESSAGE TO TSO USER ABOUT TAPE AND            *\n*                CARTRIDGE MOUNTS PENDING.                           *\n*                                                                    *\n* INPUT      -   NONE                                                *\n*                                                                    *\n* OUTPUT     -   VIA TPUT TSO SERVICE ROUTINE                        *\n*                                                                    *\n* SYSTEM     -   MVS/XA                                              *\n*                                                                    *\n* DATE       -   11/23/86                                            *\n*                                                                    *\n* MACROS     -   GETMAIN,FREEMAIN,LOCASCB                            *\n*                                                                    *\n* DSECTS     -   CVT,IEFUCBOB,IHAASCB,REGISTER                       *\n*                                                                    *\n*                                                                    *\n* REGISTERS  -   R0   - MVS USAGE ONLY REGISTER                      *\n*                R1   - MVS USAGE ONLY REGISTER                      *\n*                R2   - USED BY TRANSLATE                            *\n*                R3   - CVT ADDRESS                                  *\n*                R4   - TAPE UCB ADDRESS                             *\n*                R5   - ASCB ADDRESS USING TAPE UCB                  *\n*                R6   - COUNTER OF HOW MANY TPUTS ISSUED             *\n*                R7   - *** UNUSED BY PROGRAM ***                    *\n*                R8   - *** UNUSED BY PROGRAM ***                    *\n*                R9   - *** UNUSED BY PROGRAM ***                    *\n*               R10   - *** UNUSED BY PROGRAM ***                    *\n*               R11   - *** UNUSED BY PROGRAM ***                    *\n*               R12   - 1ST BASE REGISTER                            *\n*               R13   - SYSTEM SAVE AREA/WORK AREA ADDRESS           *\n*               R14   - RETURN ADDRESS                               *\n*               R15   - ENTRY POINT ADDRESS                          *\n*                                                                    *\n* LANGUAGE   -    OS/VS ASSEMBLER                                    *\n*                                                                    *\n* PRIVILEGES -    NONE                                               *\n*                                                                    *\n* ATTRIBUTES -    PROBLEM PROGRAM KEY 8                              *\n**********************************************************************\n************************************************************\n*   PERFORM REENTRANT HOUSEKEEPING.                        *\n************************************************************\nMTP      CSECT\n         USING MTP,R15             TEMPORARY ADDRESSABILITY\n         B     BYPASS              BRANCH AROUND EYECATCHER\n         DC    C'MTP'              MTP PROGRAM\n         DC    C' '\n         DC    C'&SYSDATE'         GREGORIAN DATE\n         DC    C' '\n         DC    C'&SYSTIME'         GREGORIAN DATE\nBYPASS   DS    0H                  RE-ESTABLISH ALIGNMENT\n         DROP  R15                 DONE WITH TEMP BASE NOW\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             SET BASE REGISTER\n         USING MTP,R12             SET ADDRESSABILITY\n************************************************************\n*   GET SAVE AND WORK AREA.                                *\n************************************************************\n         LA    R0,WORKL            ADDRESS OF SAVE/WORK AREA\n         GETMAIN R,LV=(0)          STORAGE FOR SAVE AREA\n         ST    R13,4(R1)           SYSTEM S/A INTO OUR S/A\n         ST    R1,8(R13)           OUR S/A INTO SYSTEM S/A\n         LR    R13,R1              OUR S/A ADDRESS IN R13\n         L     R1,4(R13)           RELOAD SYSTEM S/A ADDRESS\n         LM    R0,R1,20(R1)        RELOAD REGS 0 AND 1\n************************************************************\n*   INITIALIZE OUR IOSVSUCB WORK AREA AND GET              *\n*   ADDRESSABILITY TO THE CVT.                             *\n************************************************************\n         LR    R10,R13             ADDRESS OF SAVE/WORK AREA\n         USING WORKA,R10           SET ADDRESSABILITY TO IT\n         TR    UCBWRK,TRTAB        SET TO BINARY ZEROES\n         USING CVT,R3              DSECT IT\n         L     R3,CVTPTR           GET CVT ADDRESS\n************************************************************\n*   BUILD OUR PARMLIST FOR THE IOSVSUCB ROUTINE.           *\n************************************************************\n         LA    R1,UCBWRK           OUR 100-BYTE WORK AREA\n         ST    R1,UCBWRKA          SAVE IN PARMLIST\n         LA    R1,UCBDEVT          OUR DEVICE CLASS\n         ST    R1,UCBDEVTA         SAVE IN PARMLIST\n         MVI   UCBDEVT,UCB3TAPE    INDICATE TAPE UCBS ONLY\n         LA    R1,UCBADDR          OUR UCB ADDRESS POINTER\n         ST    R1,UCBADDRA         SAVE IN PARMLIST\n         OI    UCBADDR,X'80'       TURN ON HIGH-ORDER BIT\n         MVC   UCBTPUT(NOPENDL),NOPEND  SET NO MOUNT PENDING MESSAGE\n*                                  IF NONE ARE LATER FOUND\n************************************************************\n*   GO EXECUTE THE IOSVSUCB ROUTINE.                       *\n************************************************************\nTAPEUCB  LA    R1,UCBWRKA          ADDRESS OF PARAMETER LIST\n         L     R15,CVTUCBSC        GET SCAN SERVICE ADDRESS\n         BALR  R14,R15             EXECUTE IT\n         LTR   R15,R15             ANY UCB RETURNED?\n         BNZ   FINIS               IF NONE, THEN FINISH\n************************************************************\n*   WE HAVE GOT A TAPE UCB.  CHECK TO SEE IF TAPE UCB      *\n*   IS STANDARD UCB AND NOT UCB EXTENSION.  ALSO CHECK FOR *\n*   ONLINE AND A MOUNT PENDING STATUS.                     *\n************************************************************\n         L     R4,UCBADDR          GET RETURNED TAPE UCB ADDR\n         USING UCB,R4              DSECT IT\n         CLI   UCBID,X'FF'         A STANDARD UCB ?\n         BNE   TAPEUCB                IF NOT, GET ANOTHER UCB\n         TM    UCBSTAT,UCBONLI     IS TAPE UNIT ONLINE ?\n         BNO   TAPEUCB                IF NOT, GET ANOTHER UCB\n         TM    UCBDMCT,UCBMOUNT    IS TAPE MOUNT PENDING ?\n         BNO   TAPEUCB                IF NOT, GET ANOTHER UCB\n************************************************************\n*   GET THE ASID OF THE ADDRESS SPACE USING THIS TAPE      *\n*   UCB FROM THE UCB EXTENSIONS AREA.  CHECK THE ASCB      *\n*   AND GET THE JOBNAME.                                   *\n************************************************************\n         L     R1,UCBEXTPT         GET UCB TAPE EXTENSION\n         USING UCBCMEXT,R1         SET ADDRESSABILITY\n         LH    R1,UCBASID          GET ASID FOR THIS TAPE UCB\n         DROP  R1                     DONE WITH REGISTER NOW\n         LOCASCB ASID=(R1)         GET ASCB FOR THIS TAPE UCB\n         LTR   R1,R1               DO WE HAVE A VALID ASCB?\n         BP    GOTASCB               IF SO, GET ITS JOBNAME\n         B     TAPEUCB               IF NOT, GET NEXT UCB\nGOTASCB  LR    R5,R1               SAVE ASCB ADDRESS\n         USING ASCB,R5             SET ADDRESSABILITY\n         ICM   R1,15,ASCBJBNI      POINTER TO BATCH JOBNAME\n         BZ    NOBATCH              IF 0, MUST BE NON-BATCH\n         B     BLDTPUT\nNOBATCH  ICM   R1,15,ASCBJBNS      POINTER TO NON-BATCH JOBNAME\n         BZ    ABEND                IF 0, MUST ABEND!!!!\nABEND    DC    X'0000'             ** ABEND 0C1 **\n************************************************************\n*   BEGIN CREATING TPUT MOUNT PENDING MESSAGE              *\n************************************************************\nBLDTPUT  MVC   UCBTPUT(CHARL),CHAR INITIALIZE WTO AREA\n         LA    R15,UCBTPUT         ADDRESS OF WTO AREA\n         USING MSGPEND,R15         SET ADDRESSABILITY\n         MVC   MSGJOB,0(R1)        MOVE IN JOBNAME\n         MVC   MSGCUU,UCBNAME      MOVE IN TAPE UCB\n         CLI   UCBVOLI,X'FF'       IS IT A SCRATCH VOLSER\n         BNE   SETVOL              MOVE IN THE VOLSER\n         MVC   MSGVOL,SCRTCH        INDICATE A SCRATCH VOLSER\n         B     TEST3480            CHECK FOR 3480 DEVICE\nSETVOL   MVC   MSGVOL,UCBVOLI      MOVE IN TAPE VOLSER\nTEST3480 TM    UCBTBYT4,UCB3480    IS IT 3480 DEVICE\n         BNO   SET3420\n         MVC   MSGTYP,DEV3480      SET TO 3480 DEVICE\n         B     ISUTPUT             GO ISSUE TPUT\nSET3420  MVC   MSGTYP,DEV3420      SET TO 3420 DEVICE\nISUTPUT  TPUT  UCBTPUT,CHARL       ISSUE TPUT MESSAGE\n         B     TAPEUCB             LOOK FOR MORE TAPE UCBS\n************************************************************\n*   PERFORM REENTRANT EXIT LINKAGE.                        *\n************************************************************\nFINIS    CLC   UCBTPUT(L'NOMOUNTS),NOMOUNTS   WE FOUND NONE\n         BNE   EXIT                  IF AT LEAST 1 FOUND - EXIT\n         TPUT  UCBTPUT,NOPENDL     ISSUE NO MOUNTS PENDING MSG\nEXIT     LA    R0,WORKL            SAVE AREA LENGTH\n         LR    R1,R13              LOAD OUR S/A ADDRESS\n         L     R13,4(R13)          RESTORE SYSTEM S/A ADDRESS\n         FREEMAIN R,LV=(0),A=(1)   FREE S/A\n         LM    R0,R12,20(R13)      RESTORE ALL EXCEPT 14,15\n         L     R14,12(R13)         RESTORE RETURN ADDRESS\n         SLR   R15,R15             SET GOOD RETURN CODE\n         BR    R14                 RETURN TO CALLER\n************************************************************\n*        C O N S T A N T S                                 *\n************************************************************\nDEV3420  DC    C'(3420)'\nDEV3480  DC    C'(3480)'\nSCRTCH   DC    C'SCRTCH'\nNOPEND   DS    0C\nNOMOUNTS DC    CL17'NO MOUNTS PENDING'\nNOPENDL  EQU   *-NOPEND\n*\nCHAR     DS    0C\n         DC    CL17'MOUNT PENDING FOR'\n         DC    CL1' '\nVOL      DC    CL6'VVVVVV'\n         DC    CL1' '\n         DC    CL5'UNIT='\nCUU      DC    CL3'CUU'\n         DC    CL1' '\n         DC    CL6'(34XX)'\n         DC    CL1' '\n         DC    CL8'JOBNAME='\n         DC    CL8'JJJJJJJJ'\nCHARL    EQU   *-CHAR\n*\nTRTAB    DC    256X'00'      TRANSLATE TABLE\n************************************************************\n*        D S E C T S                                       *\n************************************************************\nWORKA    DSECT\nSAVEAREA DS    18F           MY SAVE AREA\nUCBWRKA  DS    F             ADDRESS OF UCBWRK 100-BYTE WORK AREA\nUCBDEVTA DS    F             ADDRESS OF DEVICE CLASS BYTE\nUCBADDRA DS    F             ADDRESS OF WORD TO CONTAIN UCB ADDRESS\n*\nUCBADDR  DS    F             ADDRESS OF WORD TO CONTAIN UCB ADDRESS\n         DS    0D            FORCE DOUBLEWORD ALIGNMENT\nUCBWRK   DS    XL100         IOSVSUCB 100-BYTE WORK AREA\nUCBDEVT  DS    XL1           DEVICE CLASS BYTE - TAPE\nUCBTPUT  DS    XL50          TPUT AREA\nWORKL    EQU   *-WORKA\nMSGPEND  DSECT\n         DS    CL17          MOUNT PENDING FOR\n         DS    CL1\nMSGVOL   DS    CL6           VVVVVV\n         DS    CL1\n         DS    CL5           UNIT=\nMSGCUU   DS    CL3           CUU\n         DS    CL1\nMSGTYP   DS    CL6           (34XX)\n         DS    CL1\n         DS    CL8           JOBNAME=\nMSGJOB   DS    CL8           JJJJJJJJ\n         CVT DSECT=YES,LIST=NO\nUCB      DSECT\n         IEFUCBOB LIST=YES,PREFIX=NO\n         IHAASCB\n         REGISTER\n         END   MTP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "S000160": {"ttr": 2825, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(S000160) .\n++ VER(Z038) FMID(HBB2102) .\n++ ZAP(IEAVTRML)  DISTLIB(AOSC5)  .\n   NAME IGC0001C IEAVTRML\n   VER 0000 0000,0000,0000,0000,0000,0000\n   VER 000C 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000\n   REP 0000 C4C6,E2D4,D9C3,D3F0\n   REP 000C C2D5,D1D4,E3C5,D9D4,0000,0000\n   IDRDATA  S000160\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "S000180": {"ttr": 2827, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(S000180) .\n++ VER(Z038) FMID(HDP2210) PRE(UZ80867) .\n++ ZAP(IHJACP00) .\n   NAME IGC0006C IGC0006C\n   VER 0996 9120,5011,4710\n   REP 099A 4700\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USERCFDE": {"ttr": 2829, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "***************************************************************\n*                                                             *\n*                                                             *\n*               U S E R C F D E                               *\n*                                                             *\n*    THESE ARE THE @CFDE FDR MACROS FOR THE USER DEFINED      *\n*    FIELDS IN THE LOGONID RECORD. FOR EACH @CFDE MACRO       *\n*    SPECIFIED HERE A CORRESPONDING FIELD MUST BE             *\n*    DEFINED IN THE USERLID MODULE TO BE INCLUDED IN THE      *\n*    LOGONID RECORD.                                          *\n*                                                             *\n*                                                             *\n*                                                             *\n*                        LAST UPDATED ON 10/04/87  T.BRYANT   *\n***************************************************************\n*\n*\n***************************************************************\n*                                                             *\n*                                                             *\n*  PRIVILEGES  ======>      GROUP 2                           *\n*                                                             *\n*                                                             *\n***************************************************************\n*\n*\n   @CFDE CICSPROD,LIDI1FLG,BIT,                                        +\n               GROUP=2,                                                +\n               ALTER=SECURITY+ACCOUNT,                                 +\n               LIST=ALL,                                               +\n               BITMAP=LIDI1F1,                                         +\n               FLAGS=NULL\n*\n*\n   @CFDE CICSTEST,LIDI1FLG,BIT,                                        +\n               GROUP=2,                                                +\n               ALTER=SECURITY+ACCOUNT,                                 +\n               LIST=ALL,                                               +\n               BITMAP=LIDI1F2,                                         +\n               FLAGS=NULL\n*\n*\n***************************************************************\n*                                                             *\n*                                                             *\n*  STATISTICS  ======>      GROUP 6   (ACF2-DEFINED GROUP)    *\n*                                                             *\n*                                                             *\n***************************************************************\n*\n*\n   @CFDE VIOS-CUM,LIDVCUM,BINARY,                               UM99901+\n               GROUP=6,                                         UM99901+\n               ALTER=SECURITY,                                  UM99901+\n               LIST=SECURITY,                                   UM99901+\n               FLAGS=NULL+RESTRICT,                             UM99901+\n               ZERO=YES                                         UM99901\n*\n*\n   @CFDE VIOS-MTD,LIDVMTD,BINARY,                               UM99901+\n               GROUP=6,                                         UM99901+\n               ALTER=SECURITY,                                  UM99901+\n               LIST=SECURITY,                                   UM99901+\n               FLAGS=NULL+RESTRICT,                             UM99901+\n               ZERO=YES                                         UM99901\n*\n*\n***************************************************************\n*                                                             *\n*                                                             *\n*  IAP         ======>      GROUP 11                          *\n*                                                             *\n*                                                             *\n***************************************************************\n*\n*\n   @CFDE EXCPTN,LIDXCPTN,CHAR,                                         +\n               GROUP=11,                                               +\n               ALTER=SECURITY,                                         +\n               LIST=SECURITY,                                          +\n               FLAGS=NULL+RESTRICT,                                    +\n               ZERO=YES\n*\n*\n   @CFDE IAP-CNTL,LIDIAPCL,CHAR,                                       +\n               GROUP=11,                                               +\n               ALTER=SECURITY,                                         +\n               LIST=SECURITY,                                          +\n               FLAGS=NULL+RESTRICT,                                    +\n               ZERO=YES\n*\n*\n   @CFDE EXT-AUTH,LIDEXATH,CHAR,                                       +\n               GROUP=11,                                               +\n               ALTER=SECURITY,                                         +\n               LIST=SECURITY,                                          +\n               FLAGS=NULL+RESTRICT,                                    +\n               ZERO=YES\n*\n*\n   @CFDE SPEC-ACS,LIDSPACS,CHAR,                                       +\n               GROUP=11,                                               +\n               ALTER=SECURITY,                                         +\n               LIST=SECURITY,                                          +\n               FLAGS=NULL+RESTRICT,                                    +\n               ZERO=YES\n*\n*\n   @CFDE AUTH-OVR,LIDAUTHO,CHAR,                                       +\n               GROUP=11,                                               +\n               ALTER=SECURITY+ACCOUNT,                                 +\n               LIST=ALL,                                               +\n               FLAGS=NULL\n*\n*\n   @CFDE FUNC-GRP,LIDFUNC,CHAR,                                        +\n               GROUP=11,                                               +\n               ALTER=SECURITY+ACCOUNT,                                 +\n               LIST=ALL,                                               +\n               FLAGS=NULL\n*\n*\n   @CFDE AUTH-LVL,LIDAUTHL,CHAR,                                       +\n               GROUP=11,                                               +\n               ALTER=SECURITY+ACCOUNT,                                 +\n               LIST=ALL,                                               +\n               FLAGS=NULL\n*\n*\n   @CFDE CLUSTER,LIDCLUS,CHAR,                                         +\n               GROUP=11,                                               +\n               ALTER=SECURITY+ACCOUNT,                                 +\n               LIST=ALL,                                               +\n               FLAGS=NULL\n*\n*\n   @CFDE SUB-LMTR,LIDSUBL,CHAR,                                        +\n               GROUP=11,                                               +\n               ALTER=SECURITY+ACCOUNT,                                 +\n               LIST=ALL,                                               +\n               FLAGS=NULL\n*\n*\n   @CFDE IAP-SEC,LIDIAPS,CHAR,                                         +\n               GROUP=11,                                               +\n               ALTER=SECURITY,                                         +\n               LIST=SECURITY,                                          +\n               FLAGS=NULL+RESTRICT,                                    +\n               ZERO=YES\n*\n*\n   @CFDE DIALUP,LIDDIAL,CHAR,                                          +\n               GROUP=11,                                               +\n               ALTER=SECURITY+ACCOUNT,                                 +\n               LIST=SECURITY+ACCOUNT,                                  +\n               FLAGS=NULL\n*\n*\n   @CFDE POSITION,LIDPOST,CHAR,                                        +\n               GROUP=11,                                               +\n               ALTER=SECURITY+ACCOUNT,                                 +\n               LIST=ALL,                                               +\n               FLAGS=NULL,                                             +\n               ZERO=YES\n*\n*\n***************************************************************\n*                                                             *\n*                                                             *\n*  ACCOUNTING  ======>      GROUP 12                          *\n*                                                             *\n*                                                             *\n***************************************************************\n*\n*\n   @CFDE COMPANY,LIDCMPY,CHAR,                                         +\n               GROUP=12,                                               +\n               ALTER=SECURITY+ACCOUNT,                                 +\n               LIST=ALL\n*\n   @CFDE COST-CTR,LIDCOSC,CHAR,                                        +\n               GROUP=12,                                               +\n               ALTER=SECURITY+ACCOUNT,                                 +\n               LIST=ALL,                                               +\n               FLAGS=NULL\n*\n*\n*************************************************************** UM99901\n*                                                             * UM99901\n*                                                             * UM99901\n*  GENERAL     ======>      GROUP 13                          * UM99901\n*                                                             * UM99901\n*                                                             * UM99901\n*************************************************************** UM99901\n*\n*\n   @CFDE DATE-SET,LIDSETP,PACKED,                               UM99901+\n               GROUP=13,                                        UM99901+\n               ALTER=SECURITY+ACCOUNT,                          UM99901+\n               LIST=ALL,                                        UM99901+\n               ZERO=YES                                         UM99901\n*\n*\n   @CFDE SUPV,LIDSUPV,CHAR,                                     UM99901+\n               GROUP=13,                                        UM99901+\n               ALTER=SECURITY+ACCOUNT,                          UM99901+\n               LIST=SECURITY+ACCOUNT                            UM99901\n*\n*\n   @CFDE SUPV-FON,LIDSPHON,CHAR,        FORMERLY SUP-PHON       UM99901+\n               GROUP=13,                                        UM99901+\n               ALTER=SECURITY+ACCOUNT,                          UM99901+\n               LIST=SECURITY+ACCOUNT                            UM99901\n*\n*\n   @CFDE LOC-CITY,LIDLCTY,CHAR,                                 UM99901+\n               GROUP=13,                                        UM99901+\n               ALTER=SECURITY+ACCOUNT,                          UM99901+\n               LIST=ALL,                                        UM99901+\n               FLAGS=NULL                                       UM99901\n*\n*\n   @CFDE LOC-BLDG,LIDLBLG,CHAR,                                 UM99901+\n               GROUP=13,                                        UM99901+\n               ALTER=SECURITY+ACCOUNT,                          UM99901+\n               LIST=ALL,                                        UM99901+\n               FLAGS=NULL                                       UM99901\n*\n*\n   @CFDE LOC-FLR,LIDLFLR,CHAR,                                  UM99901+\n               GROUP=13,                                        UM99901+\n               ALTER=SECURITY+ACCOUNT,                          UM99901+\n               LIST=ALL,                                        UM99901+\n               FLAGS=NULL                                       UM99901\n*\n*\n************* END OF USERCFDE *******************************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USERLID": {"ttr": 3075, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*        COPY  USERLID             IN LIDREC MACRO\n********************************************************************\n*                                                                  *\n*  USERLID - THIS SOURCE MATERIAL IS COPIED INTO THE USER          *\n*            DEFINITION SECTION OF THE LOGONID RECORD 'DSECT'.     *\n*            THE INSTALLATION MAY REPLACE THIS MODULE OR           *\n*            EDIT IN ITEMS WHICH ARE TO BE DEFINED BY @CFDE        *\n*            MACRO ENTRIES IN THE ACFFDR.  THE LENGTH ATTRIBUTE    *\n*            OF EACH SYMBOL DEFINED HERE IS USED IN THE RELATED    *\n*            @CFDE MACRO EXPANSION.                                *\n*                                                                  *\n*                                                                  *\n*  NOTE -- THE TOTAL LENGTH OF ALL INSTALLATION ADDED SYMBOLS      *\n*          SHOULD NOT EXCEED 192(DECIMAL), C0(HEX) BYTES.          *\n*                                                                  *\n*                                                                  *\n*                                                                  *\n*  ATTENTION:  ANY USERLID FIELD BEGINNING WITH THE INITIALS OF    *\n*              'OLD' INDICATES THAT THIS FIELD WAS PREVIOUSLY      *\n*              DELETED AND IS NOW ELIGIBLE FOR REUSE.              *\n*                                                                  *\n*                                                                  *\n*                        LAST UPDATED ON 10/04/87  T.BRYANT        *\n********************************************************************\n*\n*\n         DS    X            FIELD USED IN ACF2 3.1.3.\n         DS    F            FULLWORD FOR OLD FIRECALL EXIT\nLIDSPHON DS    CL13         SUPERVISORS PHONE\nOLDPADL  DS    CL3          LEFT-JUSTIFIED UID FIELD PAD (REM)\nOLDPADR  DS    CL2          RIGHT-JUSTIFIED UID FIELD PAD\nLIDXCPTN DS    CL1          EXCEPTION CODE\nLIDIAPCL DS    CL5          IAP CONTROL CODE\nLIDAUTHO DS    CL2          AUTHORIZATION OVERRIDE\nLIDFUNC  DS    CL3          FUNCTIONAL GROUP\nLIDAUTHL DS    CL1          AUTHORIZATION LEVEL\nLIDEXATH DS    CL1          EXTENDED AUTHORIZATION LEVEL\nLIDSPACS DS    CL1          SPECIAL FACILITY ACCESS CODE\nLIDCLUS  DS    CL2          CLUSTER CODE\nLIDSUBL  DS    CL1          SUB-LIMITER\nLIDIAPS  DS    CL1          IAP - SECURITY CODE\nLIDSETP  DS    PL4          DATE LOGONID WAS CREATED\nLIDSUPV  DS    CL25         SUPERVISOR'S NAME (NOW 25 POS.)\nOLDSUPV  DS    CL5          SUPERVISOR'S NAME (LAST 5 BYTES)\nLIDCMPY  DS    CL4          ACCOUNTING - COMPANY CODE\nOLDDIV   DS    CL4          ACCOUNTING - DIVISION\nOLDMAJD  DS    CL2          ACCOUNTING - MAJOR DEPT\nOLDDPTT  DS    CL3          ACCOUNTING - DEPARTMENT\nLIDLCTY  DS    CL3          LOCATION-CITY\nLIDLBLG  DS    CL1          LOCATION-BUILDING\nLIDLFLR  DS    CL2          LOCATION-FLOOR\nLIDDIAL  DS    CL1          DIAL-UP CODE\nLIDPOST  DS    CL1          POSITION CODE\nOLDDEPT  DS    CL5          ACCOUNTING - DEPARTMENT\nLIDVMTD  DS    H            SECURITY VIOLATIONS - MONTH TO DATE\nLIDVCUM  DS    H            SECURITY VIOLATIONS - CUMULATIVE\nLIDCOSC  DS    CL7          COST CENTER\n*\n*\n************* END OF USERLID **********************************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VLDEXIT": {"ttr": 3077, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " TITLE 'ACF2 PRE-VALIDATION EXIT FOR TEST DATASET ALLOCATIONS'\nVLDEXIT  $PROLOG 12\n**********************************************************************\n* NAME       -   VLDEXIT                                             *\n*                                                                    *\n* AUTHOR     -   T. BRYANT                                           *\n*                                                                    *\n* FUNCTION   -   ACF2 PRE-VALIDATION EXIT TO CONTROL                 *\n*                ALLOCATE/RENAME/SCRATCH DATASET OPERATIONS ON       *\n*                TEST (MIDDLE-INDEX DATASET NAME) DATASETS           *\n*                ON NON-TEST VOLUMES. (STM3** ARE TEST VOLUMES).     *\n*                                                                    *\n*                                                                    *\n* INPUT     R1 --> ACF$USER PARMLIST                                 *\n*           R0 --> ADDRESS OF LOGON ID RECORD                        *\n*                                                                    *\n**********************************************************************\n         EJECT\n**********************************************************************\n* OUTPUT    R15 =  0, RESUME STANDARD ACF2 VALIDATION                *\n*               =  4, BYPASS ACF2 VALDATION, PERMIT ACCESS, NO LOG   *\n*               =  8, TERMINATE ACCESS, NO LOG                       *\n*               = 12, BYPASS VALIDATION, PERMIT ACCESS AND LOG       *\n*               = 16, TERMINATE ACCESS AND LOG                       *\n*               = 20, TERMINATE ONLY IF IN ABORT MODE                *\n*               = 24, RETRY THE ENTIRE SVC REQUEST                   *\n*               = 28, INVOKE VALIDATION EXIT                         *\n*               = 32, INVOKE DSNGEN EXIT                             *\n*               = 36, ALLOW ACCESS, ISSUE WARN MSGS, LOG             *\n*               = 40, TAKE SVC DUMP AND CONTINUE(RC=0)               *\n*               = 44, SUPPRESS WTO, USE RC=12 RETURN                 *\n*               = 48, SUPPRESS WTO, USE RC=16 RETURN                 *\n*               = 52, SUPPRESS WTO, USE RC= 0 RETURN                 *\n*               =255, TAKE AN SVC DUMP, ABORT                        *\n*                                                                    *\n* MACROS     -  RETURN,WTO,$PROLOG,GETMAIN,FREEMAIN                  *\n*                                                                    *\n* DSECTS     -  ACSXP,ACUCB                                          *\n*                                                                    *\n* REGISTERS  - R0  -  ACF2 POINTER TO LIDREC                         *\n*              R1  -  NOT USED BY PROGRAM                            *\n*              R2  -  ADDRESS OF 2ND LEVEL INDEX NAME                *\n*              R3  -  ADDRESS OF PERIOD FOLLOWING 2ND LEVEL INDEX NM *\n*              R4  -  LENGTH OF 2ND LEVEL INDEX NAME                 *\n*              R5  -  ADDRESS OF 6 CHARACTER VOLUME NAME             *\n*              R6  -  INDEX MAX DIGIT VALUE OF 8                     *\n*              R7  -  LENGTH OF ACTUAL DATASET NAME                  *\n*              R8  -  POINTER TO DATASET WTO OUTPUT FIELD            *\n*              R9  -  POINTER TO LIDREC (COPIED FROM R0)             *\n*              R10 -  POINTER TO GETMAIN'D AREA FOR WTOMSG           *\n*              R11 -  USER PARMLIST ADDRESS                          *\n*              R13 -  SAVEAREA ADDRESS                               *\n*              R14 -  RETURN ADDRESS                                 *\n*              R15 -  ENTRY ADDRESS,  RETURN CODE AT EXIT            *\n*                                                                    *\n* LANGUAGE   - ASSEMBLER H                                           *\n*                                                                    *\n* ATTRIBUTES - AUTHORIZED, KEY 0 AND RE-ENTRANT                      *\n**********************************************************************\n         EJECT\n**********************************************************************\n* PSUEDOCODE - TAPE OPEN/CLOSE/EOV REQUEST WILL CAUSE A RETURN       *\n*              ACF2 AND NORMAL DATASET VALIDATION.                   *\n*                                                                    *\n*              IF LOGONID MAKING THIS ACCESS IS NON-CNCL OR          *\n*              PREFIX(********) RESUME STANDARD ACF2 VALIDATION.     *\n*                                                                    *\n*              READ THE MODIFIABLE DATASET NAME(ACCUDSN)             *\n*              IF MIDDLE-INDEX NAME = 'TEST' AND THE                 *\n*              ACCESS ATTEMPT IS AN ALLOCATE/SCRATCH/RENAME          *\n*              THEN                                                  *\n*                DO                                                  *\n*                   READ THE MODIFIABLE DATASET VOLUME(ACCUVOL)      *\n*                   IF FIRST 4 CHARACTERS OF ACCUVOL = 'STM3' THEN   *\n*                     DO                                             *\n*                         IF THE ACUCB LOGONID FIRST 2 DIGITS        *\n*                         ARE SS FOR SYSTEM SUPPORT THEN             *\n*                             DO                                     *\n*                               SET REGISTER 15 WITH CONDITION CODE  *\n*                               12 INDICATING BYPASS ACF2 VALIDATION *\n*                               PERMIT ACCESS AND LOG                *\n*                             END                                    *\n*                       SET REGISTER 15 WITH CONDITION CODE 48       *\n*                       (TERMINATE ACCESS AND LOG)                   *\n*                       ISSUE A WRITE TO PROGRAMMER MESSAGE          *\n*                     END                                            *\n*                END                                                 *\n*                                                                    *\n*  TOM BRYANT                                                        *\n*  COMBINED INSURANCE COMPANY OF AMERICA                             *\n*  5050 NORTH BROADWAY AVENUE                                        *\n*  CHICAGO,ILLINOIS 60640  (312) 275-8000 X8414                      *\n**********************************************************************\n         SLR   R10,R10                      ZERO OUT R10\n         LR    R9,R0                        GET ADDRESS OF LIDREC\n         USING LIDREC,R9                    ADDRESSABILITY TO LIDREC\n         TM    LIDMFLG,LIDMNCNL             NON-CNCL USER?\n         BO    RC0                          NO, PERFORM NORMAL VALD\n         CLC   LIDPFX(8),SOFTMASK           PREFIX(********)?\n         BE    RC0                          NO, PERFORM NORMAL VALD\n         SLR   R15,R15                      RETURN CODE REGISTER\n         LR    R11,R1                       SAVE PARMLIST ADDRESS\n         USING ACSXP,R11                    SET ADDRESSABILITY\n         CLI   ACUUFLG3,ACUU3VSM            VSAM OPEN REQUEST?\n         BE    PROCESS                       YES, PROCESS\n         CLI   ACUUFLG3,ACUU3CMS            CATLG MGMT FUNCTION?\n         BE    PROCESS                       YES, PROCESS\n         CLI   ACUUFLG3,ACUU3DSD            NEW DATASET ALLOCATION?\n         BE    PROCESS                       YES, PROCESS\n         CLI   ACUUFLG3,ACUU3REN            RENAME FUNCTION?\n         BE    PROCESS                       YES, PROCESS\n         CLI   ACUUFLG3,ACUU3SCR            SCRATCH FUNCTION?\n         BE    PROCESS                       YES, PROCESS\n         B     RC0                          NO, PERFORM NORMAL VALD\nPROCESS  L     R7,ACUUDSN                   GET DSNAME ADDRESS\n         LR    R2,R7\nDSNLONG  CLC   0(1,R7),ZERO                 BINARY ZERO\n         BE    GOTLNTH\n         CLC   0(1,R7),BLANK                OR BLANK DLM?\n         BE    GOTLNTH\n         LA    R7,1(R7)                     INCREMENT BY 1\n         B     DSNLONG\nGOTLNTH  SR    R7,R2                        LENGTH OF DSN IN R7\n         LA    R6,8                         SET MAXIMUM INDEX LENGTH\nINDEX#1  CLC   0(1,R2),PERIOD               FIND PERIOD AFTER 1ST INDEX\n         BE    FOUND#1                        YES, PROCESS\n         LA    R2,1(R2)                     INCREMENT BY 1\n         BCT   R6,INDEX#1                   GO LOOK FOR PERIOD DLM\nFOUND#1  LA    R6,8                         SET MAXIMUM INDEX LENGTH\n         LA    R2,1(R2)                     POINT TO SECOND INDEX NAME\n         LR    R3,R2                        USE REG 3 FOR HIGH DLM\nINDEX#2  CLC   0(1,R3),PERIOD               FIND PERIOD AFTER 2ND INDEX\n         BE    FOUND#2                        YES, PROCESS\n         LA    R3,1(R3)                     INCREMENT BY 1\n         BCT   R6,INDEX#2                   GO LOOK FOR PERIOD DLM\nFOUND#2  LR    R4,R3                        SAVE HIGH ADDRESS\n         SLR   R4,R2                        GET LENGTH OF 2ND INDEX\n         CH    R4,FOUR                      MIDDLE INDEX NAME 4 CHARS\n         BNE   RC0\n         CLC   0(R4,R2),TEST                IS MIDDLE NAME 'TEST'?\n         BNE   RC0                           NO, PERFORM NORMAL VALD\n         LA    R0,WTOMSGL                   WORKAREA FOR WTO ROUT 11\n         GETMAIN R,LV=(0)\n         LR    R10,R1                       SAVE FOR LATER DSECT\n         USING WTODSECT,R10                 SET ADDRESSABILITY TO IT\n         MVC   0(WTOMSGL,R10),WTOMSG        INITIALIZE WTO AREA\n         L     R2,ACUUDSN                   GET BEGINNING OF DATASET\n         LA    R8,DSNAME-WTOMSG(R10)        POINT TO OUTPUT FIELD\n         CH    R7,H22                       IS DSN > 22 CHARACTERS\n         BNH   DSNOK                         IT IS LESS, PROCESS\n         LA    R7,22                        SET MAX DSNAME ALLOWED\nDSNOK    BCTR  R7,0                         SUBTRACT 1 FOR EXECUTE\n         EX    R7,MOVEDSN                   SAVE FIRST 22 CHARS OF DSN\n         L     R5,ACUUVOL                   GET VOLUME NAME\n         MVC   DSVOLME,0(R5)                GET VOLUME NAME IN WTO\n         CLC   0(L'WORKVOL,R5),WORKVOL      IS IT A WORK VOLUME???\n         BE    RC0                           YES, PERFORM NORMAL VALD\n         CLI   ACUUFLG3,ACUU3VSM            VSAM OPEN ALLOCATION\n         BE    VSAMOPEN                       YES, SET WTO MSG\n         CLI   ACUUFLG3,ACUU3CMS            CATLG MGMT FUNCTION\n         BE    CTLGFUNC                       YES, SET WTO MSG\n         CLI   ACUUFLG3,ACUU3DSD            NEW DATASET ALLOCATION\n         BE    NEWDSD                         YES, SET WTO MSG\n         CLI   ACUUFLG3,ACUU3REN            RENAME DSNAME FUNCTION\n         BE    RENFUNC                        YES, SET WTO MSG\n         CLI   ACUUFLG3,ACUU3SCR            SCRATCH DSNAME FUNCTION\n         BE    SCRFUNC                        YES, SET WTO MSG\n         B     RC0                          PERFORM NORMAL VALD\nVSAMOPEN MVC   DSFUNC,VSAM#                 VSAM OPEN MESSAGE\n         B     FAIL\nCTLGFUNC MVC   DSFUNC,CTLG#                 CATLG MGMT MESSAGE\n         B     FAIL\nNEWDSD   MVC   DSFUNC,ALLOC#                ALLOCATION MESSAGE\n         B     FAIL\nRENFUNC  MVC   DSFUNC,RENAME#               RENAME MESSAGE\n         B     FAIL\nSCRFUNC  MVC   DSFUNC,SCRATCH#              SCRATCH MESSAGE\nFAIL     WTO   MF=(E,(R10))                 ISSUE MSG FOR USER\n         LA    R0,WTOMSGL                   GETMAIN LENGTH\n         FREEMAIN R,LV=(0),A=(10)           FREE WTOMSG WORKAREA\n         $EPILOG 48                         TERMINATE,LOG, NO ACF2 WTO\nRC0      SLR   R15,R15                      ZERO REG 15\nFINIS    LTR   R10,R10                      DID WE ISSUE WTOMSG?\n         BZ    ENDPGM\n         LA    R0,WTOMSGL                   GETMAIN LENGTH\n         FREEMAIN R,LV=(0),A=(10)           FREE WTOMSG WORKAREA\nENDPGM   $EPILOG\nWTOMSG   DS    0F\n         DC    AL2(WTOMSGL-4)\nMCSFLAG  DC    B'1000000000000000'\nFUNCTION DC    CL30'                             '\nDSNAME   DC    CL22'                      '\n         DC    C' ON VOLUME '\nVOLUME   DS    CL6\n         DC    C' DENIED BY INSTALLATION EXIT'\nDESCFLG  DC    B'0000000000000000'\nROUTFLG  DC    B'0000000000100000'   ROUTCDE=11\nWTOMSGL  EQU   *-WTOMSG\nVSAM#    DC    C'      DATASET VSAM OPEN FOR'\nCTLG#    DC    C'DATASET CATALOG REQUEST FOR'\nALLOC#   DC    C'       DATASET ALLOCATE FOR'\nRENAME#  DC    C'         DATASET RENAME FOR'\nSCRATCH# DC    C'        DATASET SCRATCH FOR'\nWORKVOL  DC    C'STM3'\nTEST     DC    C'TEST'\nFOUR     DC    H'4'\nBLANK    DC    C' '\nPERIOD   DC    C'.'\nZERO     DC    X'00'\nH22      DC    H'22'\nMOVEDSN  MVC   0(0,R8),0(R2)\nSOFTMASK DC    XL8'00'       PREFIX(********) REALLY BINARY ZEROES!\nSS       DC    C'SS'         SYSTEM SUPPORT PREFIX LOGONID\n         LTORG\nWTODSECT DSECT\n         DS    CL4     WTOMSGL AND BIT FLAGS\nDSFUNC   DS    CL30    DATASET FUNCTION MESSAGE\nDSDSN    DS    CL22    FIRST 22 BYTES OF DATASET\n         DS    CL11    ON VOLUME\nDSVOLME  DS    CL6        VOLSER\n         DS    CL28    DENIED BY INSTALLATION EXIT\n         LIDREC DSECT=YES\n         ACSXP DSECT=YES\n         END VLDEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT418/FILE418.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT418", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}