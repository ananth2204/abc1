{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012355000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE567.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE567.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\x14'", "DS1TRBAL": "b'\\x11\\xee'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x049\\x00\\x0b\\x049\\x00\\r\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x10o\\x01\\x02\\x10o\\x131\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-16T00:00:00", "modifydate": "2002-04-16T13:31:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 445    FILE:  567\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT445.FILE567\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 6 MEMBERS COUNTED; CUMULATIVE SIZE IS 480 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/16/02    13:31:57    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Y\\x01\\x02\\x10o\\x01\\x02\\x10o\\x13\\x15\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc3\\xd3\\xc1\\xd9\\xd2\\xd1@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-16T00:00:00", "modifydate": "2002-04-16T13:15:59", "lines": 27, "newlines": 27, "modlines": 0, "user": "CLARKJ"}, "text": "       LLA Module Fetch Analysis Tools\n\n       **DISCLAIMER**\n       NO WARRANTY IS MADE TO THE ACCURACY OF THE PROGRAMS OR\n       RELATED MATERIAL AND NO RESPONSIBILITY IS ASSUMED FOR\n       ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE\n       USE OF THIS SOFTWARE.  IT IS THE USER'S RESPONSIBILITY\n       TO EVALUATE THE USEFULNESS OF THE MATERIAL SUPPLIED.\n\n       This library contains the following members:\n\n       $$DOC    - This member\n\n       CSVLLIX2 - LLA exit that collects module fetch information\n                  for LLA managed libraries.  The exit obtains\n                  storage in the LLA address space.  A WTO is\n                  issued with the address of this storage area.\n                  The usage information contained in the storage\n                  area can be viewed with any MVS monitor or tool\n                  that displays another task's storage.  The exit\n                  has been tested with OS/390 2.10.\n\n       SMFLLA     SAS program that reports I/O activity in LLA.\n                  The program has been tested with OS/390 2.10.\n\n       SMF41S     SAS program that summarizes SMF type 41 records.\n                  The program has been tested with OS/390 2.10.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE567": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x003\\x01\\x01\\x02_\\x01\\x02\\x10o\\x13'\\x00#\\x00\\x02\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-01-25T00:00:00", "modifydate": "2002-04-16T13:27:33", "lines": 35, "newlines": 2, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 567 is from Clark Jennings, and contains some tools to    *   FILE 567\n//*           monitor LLA performance and to report on SMF Type 41  *   FILE 567\n//*           records.  This file also has a CSVLLIX2 exit to       *   FILE 567\n//*           capture module fetch information.                     *   FILE 567\n//*                                                                 *   FILE 567\n//*           email:  clarkjennings@yahoo.com                       *   FILE 567\n//*                                                                 *   FILE 567\n//*   LLA Module Fetch Analysis Tools                               *   FILE 567\n//*                                                                 *   FILE 567\n//*   **DISCLAIMER**                                                *   FILE 567\n//*   NO WARRANTY IS MADE TO THE ACCURACY OF THE PROGRAMS OR        *   FILE 567\n//*   RELATED MATERIAL AND NO RESPONSIBILITY IS ASSUMED FOR         *   FILE 567\n//*   ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE         *   FILE 567\n//*   USE OF THIS SOFTWARE.  IT IS THE USER'S RESPONSIBILITY        *   FILE 567\n//*   TO EVALUATE THE USEFULNESS OF THE MATERIAL SUPPLIED.          *   FILE 567\n//*                                                                 *   FILE 567\n//*   This library contains the following members:                  *   FILE 567\n//*                                                                 *   FILE 567\n//*   $$DOC    - This member                                        *   FILE 567\n//*                                                                 *   FILE 567\n//*   CSVLLIX2 - LLA exit that collects module fetch information    *   FILE 567\n//*              for LLA managed libraries.  The exit obtains       *   FILE 567\n//*              storage in the LLA address space.  A WTO is        *   FILE 567\n//*              issued with the address of this storage area.      *   FILE 567\n//*              The usage information contained in the storage     *   FILE 567\n//*              area can be viewed with any MVS monitor or tool    *   FILE 567\n//*              that displays another task's storage.  The exit    *   FILE 567\n//*              has been tested with OS/390 2.10.                  *   FILE 567\n//*                                                                 *   FILE 567\n//*   SMFLLA     SAS program that reports I/O activity in LLA.      *   FILE 567\n//*              The program has been tested with OS/390 2.10.      *   FILE 567\n//*                                                                 *   FILE 567\n//*   SMF41S     SAS program that summarizes SMF type 41 records.   *   FILE 567\n//*              The program has been tested with OS/390 2.10.      *   FILE 567\n//*                                                                 *   FILE 567\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CSVLLIX2": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x10o\\x01\\x02\\x10o\\x13\\x16\\x00\\xf4\\x00\\xf4\\x00\\x00\\xc3\\xd3\\xc1\\xd9\\xd2\\xd1@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-16T00:00:00", "modifydate": "2002-04-16T13:16:00", "lines": 244, "newlines": 244, "modlines": 0, "user": "CLARKJ"}, "text": "//ASSMBLE EXEC ASMHCL,\n//     PARM.L='RENT,XREF,LIST,MAP'\n//C.SYSLIB DD DSN=SYS1.MACLIB,DISP=SHR\n//       DD  DSN=SYS1.AMODGEN,DISP=SHR\n//C.SYSIN DD *\n         TITLE 'CSVLLIX2 - LLA MODULE STAGING INSTALLATION EXIT'\nCSVLLIX2 CSECT\n         EJECT\n***********************************************************************\n* STANDARD ENTRY LINKAGE TO LLA STAGING INSTALLATION EXIT.            *\n***********************************************************************\nCSVLLIX2 AMODE 31\nCSVLLIX2 RMODE ANY\n         USING *,R15\n         MODID\n         STM   R14,R12,12(R13)         SAVE ENTRY REGISTERS.\n         LR    R11,R15                 INITIALIZE CODE REGISTER.\n         DROP  R15                     DROP TEMPORARY ADDRESSABILITY.\n         USING CSVLLIX2,R11            ESTABLISH R11 AS CODE REGISTER.\n         LR    R2,R1                   SET UP PARM ADDRESSABILITY\n         USING LLP2,R2                 ADDRESSABILITY TO LLP2.\n***********************************************************************\n* TEST FOR WORKAREA, GET ONE IF FIRST ENTRY                           *\n***********************************************************************\n         L     R6,LLP2USER             POINTER TO OUR FULLWORD\n         L     R6,0(R6)                ADDR OF OUR WORKAREA.\n         LTR   R6,R6\n         BNZ   MAIN                    NONZERO, ALREADY GOT AREA\n         L     R0,GETMLEN              GETMAIN LENGTH\n         GETMAIN RU,LV=(0)             GET SOME STORAGE\n         L     R6,LLP2USER             POINTER TO OUR FULLWORD\n         ST    R1,0(R6)                SAVE WORKAREA ADDRESS\n*\n         LR    R6,R1                   ADDRESS HEADER\n         USING STATHDR,R6              ADDRESSABILITY TO HEADER\n         MVC   TOTCALL,=F'0'           FORMAT HEADER\n         ZAP   LSTDATE,=PL1'0'         ZERO DATE\n         ZAP   LSTTIME,=PL1'0'         ZERO TIME\n         ST    R6,WORK1                SAVE FOR UNPK\n         MVC   STATMSG(MSG1LEN),WTOMSG1\n         UNPK  STATMSG+31(9),WORK1(5)  TRANSLATE ADDR TO DISPLAY\n         TR    STATMSG+31(8),TBL\n         MVI   STATMSG+39,C' '\n         LA    R1,STATMSG\n         WTO   MF=(E,(1))              SHOW STAT AREA ADDRESS\n*\n         LA    R3,NUMDSNS              LOAD COUNTER\n         LA    R7,HDRLEN(R6)           ADDRESS 1ST DSN\n         USING STATDSN,R7\nFMTDSN   EQU   *\n         MVI   DSNAME,C' '            FORMAT DSN AREA\n         MVC   DSNAME+1(L'DSNAME-1),DSNAME\n         MVC   DSNFTCH,=F'0'\n         MVC   DSNLLA,=F'0'\n*\n         LA    R4,NUMMODS              LOAD COUNTER\n         LA    R8,DSNLEN(R7)           ADDRESS 1ST MOD\n         USING STATMOD,R8\nFMTMOD   EQU   *\n         MVI   MODNAME,C' '            FORMAT DSN AREA\n         MVC   MODNAME+1(L'MODNAME-1),MODNAME\n         MVC   MODFTCH,=F'0'\n         MVC   MODLLA,=F'0'\n         LA    R8,MODLEN(R8)           POINT NEXT AREA\n         BCT   R4,FMTMOD               LOOP BACK FOR ANOTHER MOD\n*\n         LR    R7,R8                   R8 POINTS START NEXT DSN\n         BCT   R3,FMTDSN               LOOP BACK FOR ANOTHER MOD\n         EJECT\n***********************************************************************\n* PROCESS STATISTICS FOR THIS INVOCATION                              *\n***********************************************************************\nMAIN     EQU    *\n         LA    R1,1\n         A     R1,TOTCALL              UPDATE NUMBER INVOCATIONS\n         ST    R1,TOTCALL\n         TIME  DEC                     GET CURRENT TIME\n         ST    R0,LSTTIME              UPDATE TIMESTAMP\n         ST    R1,LSTDATE\n         L     R9,LLP2XPTR             ADDR OF EXTENSION\n         USING LLP2X,R9\n         LA    R3,NUMDSNS              LOAD COUNTER\n         LA    R7,HDRLEN(R6)           ADDRESS 1ST DSN\nFINDDSN  EQU   *\n         CLC   DSNAME(4),=C'    '      EMPTY SLOT?\n         BE    ADDDSN                  YES, USE IT\n         CLC   DSNAME,LLP2XDSN         SAME DATASET?\n         BE    UPDDSN                  YES, UPDATE IT\n         LA    R7,NXTDSN(R7)           POINT TO NEXT DSN\n         BCT   R3,FINDDSN\n         B     EXIT                    CAN'T PROCESS, EXIT\n*\nADDDSN   EQU   *\n         MVC   DSNAME,LLP2XDSN         MOVE IN DSN\n         DROP  R9\nUPDDSN   EQU   *\n         L     R9,LLP2EPTR             POINT TO FIRST ENTRY POINT\n         USING LLP2EP,R9\n         L     R5,LLP2EPCT             COUNT ENTRY POINTS\nNEXTEP   EQU   *\n         L     R1,LLP2PFCT             PROGRAM FETCH COUNT\n         A     R1,LLP2LFCT             LLA FETCH COUNT\n         LTR   R1,R1                   ZERO?\n         BZ    BUMP                    YES, IGNORE\n         LA    R10,LLP2PDS2            PDS DIRECTORY\n         USING PDS2,R10\n         LA    R4,NUMMODS              LOAD COUNTER\n         LA    R8,DSNLEN(R7)           ADDRESS 1ST MOD\nFINDMOD  EQU   *\n         CLC   MODNAME(4),=C'    '     EMPTY SLOT?\n         BE    ADDMOD                  YES, USE IT\n         CLC   MODNAME,PDS2NAME        SAME MODULE?\n         BE    UPDMOD                  YES, UPDATE IT\n         LA    R8,MODLEN(R8)           POINT TO NEXT DSN\n         BCT   R4,FINDMOD\n*\n         LA    R4,NUMMODS              LOAD COUNTER\n         LA    R8,DSNLEN(R7)           ADDRESS 1ST MOD\n         L     R1,MODFTCH              PROGRAM FETCH COUNT\n         A     R1,MODLLA               LLA FETCH COUNT\n         ST    R1,WORK1                INIT FETCH COUNT\n         ST    R8,WORK2                INIT MOD ENTRY ADDRESS\nFINDMIN  EQU   *\n         L     R1,MODFTCH              PROGRAM FETCH COUNT\n         A     R1,MODLLA               LLA FETCH COUNT\n         C     R1,WORK1                SMALLER\n         BNL   FINDMN1                 NO, TRY AGAIN\n         ST    R1,WORK1                SAVE NEW MIN COUNT\n         ST    R8,WORK2                SAVE ADDRESS OF MOD ENTRY\nFINDMN1  EQU   *\n         LA    R8,MODLEN(R8)           POINT TO NEXT DSN\n         BCT   R4,FINDMIN\n         L     R1,LLP2PFCT             PROGRAM FETCH COUNT\n         A     R1,LLP2LFCT             LLA FETCH COUNT\n         C     R1,WORK1                HIGHER?\n         BNH   INCDSN                  NO,  IGNORE\n         L     R8,WORK2                YES, OVERLAY ENTRY\n         LTR   R8,R8                   MAKE SURE ITS SET\n         BZ    INCDSN                  NO GOOD, IGNORE\nADDMOD   EQU   *\n         MVC   MODNAME,PDS2NAME        MOVE NAME\n         MVC   MODFTCH,=F'0'           FETCH COUNT\n         MVC   MODLLA,=F'0'            LOOKASIDE COUNT\nUPDMOD   EQU   *\n         L     R1,LLP2PFCT             PROGRAM FETCH COUNT\n         A     R1,MODFTCH              UPDATE NUMBER FETCHES\n         ST    R1,MODFTCH\n         L     R1,LLP2LFCT             LOOKASIDE COUNT\n         A     R1,MODLLA               UPDATE NUMBER LOOKASIDES\n         ST    R1,MODLLA\nINCDSN   EQU   *\n         L     R1,LLP2PFCT             PROGRAM FETCH COUNT\n         A     R1,DSNFTCH              UPDATE NUMBER FETCHES\n         ST    R1,DSNFTCH\n         L     R1,LLP2LFCT             LOOKASIDE COUNT\n         A     R1,DSNLLA               UPDATE NUMBER LOOKASIDES\n         ST    R1,DSNLLA\nBUMP     EQU   *\n         A     R9,LLP2EPLN             POINT TO NEXT ENTRY POINT\n         BCT   R5,NEXTEP\n         B     EXIT                    ONLY ADD TO DSN COUNTS\n         DROP  R9\n***********************************************************************\n* STANDARD EXIT LINKAGE.                                              *\n***********************************************************************\nEXIT     EQU   *\n         LA    R15,#RCIX2_EVALUATE     LET LLA DECIDE TO STAGE\n         LA    R0,#RSIX2_EVALUATE\n         L     R14,12(,R13)            RESTORE THE RETURN ADDRESS.\n         LM    R1,R12,24(R13)          RESTORE OTHERS EXCEPT R15 AND R0\n         BR    R14                     RETURN TO THE CALLER.\n         EJECT\n***********************************************************************\n*        CONSTANTS\n***********************************************************************\nTBL      DS    0CL256                        TRANSLATE HEX TO DISPLAY\n         DC    240C'.'\n         DC    CL16'0123456789ABCDEF'\n*\nWTOMSG1  WTO   'CSVLLIX2 GETMAIN ADDRESS = XXXXXXXXX',                 X\n               ROUTCDE=(2),DESC=(4),MF=L\nMSG1LEN  EQU   *-WTOMSG1\n*\nGETMLEN  DC    A(GETLEN)                     LENGTH FOR GETMAIN\n         LTORG\n         EJECT\n***********************************************************************\n*        REGISTER ASSIGNMENTS                                         *\n***********************************************************************\n         SPACE\nR0       EQU   0                       Register 0\nR1       EQU   1                       Input parameter address\nR2       EQU   2                       Register 2\nR3       EQU   3                       Register 3\nR4       EQU   4                       Register 4\nR5       EQU   5                       Register 5\nR6       EQU   6                       Register 6\nR7       EQU   7                       Register 7\nR8       EQU   8                       Code register\nR9       EQU   9                       Register 9\nR10      EQU   10                      Register 10\nR11      EQU   11                      Register 11\nR12      EQU   12                      Register 12.\nR13      EQU   13                      Save area address\nR14      EQU   14                      Return address\nR15      EQU   15                      Entry point address at entry,\n*                                      return code at exit.\n         EJECT\n***********************************************************************\n*        DSECTS TO DESCRIBE STATISTICS WORKAREA\n***********************************************************************\nNUMDSNS  EQU   64                      NUMBER DATASETS\nNUMMODS  EQU   48                      NUMBER MODULES\nGETLEN   EQU   HDRLEN+(NUMDSNS*(DSNLEN+(NUMMODS*MODLEN)))\nNXTDSN   EQU   DSNLEN+(NUMMODS*MODLEN) OFFSET TO NEXT DSN\nLLEPLEN  EQU   LLP2PDS2-LLP2EP+L'LLP2PDS2 LENGTH OF LLP2EP\n*\nSTATHDR  DSECT                         STATISTICS AREA HEADER\nTOTCALL  DS    F                       NUMBER CALLS TO EXIT\nLSTDATE  DS    PL4                     DATE LAST INVOCATION\nLSTTIME  DS    PL4                     TIME LAST INVOCATION\nSTATMSG  DS    CL45                    WORK AREA FOR MESSAGE\nWORK1    DS    F                       WORK AREA\nWORK2    DS    F                       WORK AREA\nHDRLEN   EQU   *-STATHDR\n*\nSTATDSN  DSECT                         STATISTICS AREA DATASET DETAIL\nDSNAME   DS    CL44                    DATASET NAME\nDSNFTCH  DS    F                       NUMBER DISK FETCHES\nDSNLLA   DS    F                       NUMBER LLA  FETCHES\nDSNLEN   EQU   *-STATDSN\n*\nSTATMOD  DSECT                         STATISTICS AREA MODULE DETAIL\nMODNAME  DS    CL8                     DATASET NAME\nMODFTCH  DS    F                       NUMBER DISK FETCHES\nMODLLA   DS    F                       NUMBER LLA  FETCHES\nMODLEN   EQU   *-STATMOD\n*\n         EJECT\n         IHALLP2\n         IHAPDS\n         END\n/*\n//L.SYSLMOD DD DSN=SYS1.LINKLIB(CSVLLIX2),DISP=SHR\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SMFLLA": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x10o\\x01\\x02\\x10o\\x13\\x16\\x00I\\x00I\\x00\\x00\\xc3\\xd3\\xc1\\xd9\\xd2\\xd1@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-16T00:00:00", "modifydate": "2002-04-16T13:16:00", "lines": 73, "newlines": 73, "modlines": 0, "user": "CLARKJ"}, "text": "//SAS      EXEC SAS\n//FT11F001 DD  SYSOUT=*\n//FT12F001 DD  SYSOUT=*\n//SMF      DD  DSN=<YOUR SMF DATA>,DISP=SHR\nDATA\n  INTERVAL(KEEP=STEPEND  JOBNAME  STEPBEGN SHIFT STEPNAME\n       PROGRAM  DATE  DEVADDR T30DD  EXCPS);\n*********************************************************************;\nLENGTH SHIFT $ 9;\nLENGTH DSORG $ 2;\nINFILE SMF COLUMN=C;\nINPUT @2  RECID PIB1. @;\n\nIF RECID NE 30 THEN DELETE;\n\n  INPUT\n         @03  STEPEND  SMFSTAMP8.\n         @11  SYSID    $4.\n         @19  SUBTYPE  PIB2.\n         @21  SSOFF    PIB4.\n         @25  SSLEN    PIB2.\n         @27  SSNUM    PIB2.\n         @29  IDOFF    PIB4.\n         @33  IDLEB    PIB2.\n         @35  IDNUM    PIB2.\n         @93  EXOFF    PIB4.\n         @97  EXLEB    PIB2.\n         @99  EXNUM    PIB2. @;\nFORMAT STEPEND STEPBEGN CLOSTIME DATETIME17.;\n\nIF SUBTYPE NE 2 AND SUBTYPE NE 3 THEN DELETE;\n\nSSOFF = SSOFF - 3;\nIDOFF = IDOFF - 3;\nEXOFF = EXOFF - 3;\nINPUT @IDOFF    JOBNAME  $8.\n      @IDOFF+8  PROGRAM  $8.\n      @IDOFF+16 STEPNAME $8.\n      @IDOFF+56 STEPBEGN SMFSTAMP8.\n      @IDOFF+64 RDRTIME  $8. @;\nIF JOBNAME NE 'LLA' THEN DELETE;\nDATE=DATEPART(STEPEND);\nFORMAT DATE DATE7.;\nBEGHOUR=HOUR(STEPBEGN);\nENDHOUR=HOUR(STEPEND);\n\nIF (BEGHOUR >8 AND BEGHOUR <17) OR\n   (BEGHOUR < 9 AND ENDHOUR > 9) THEN SHIFT='PRIME';\nELSE SHIFT='OFF-PRIME';\n*********************************************************************\n       PROCESS  TYPE 30, SUBTYPE 2 (INTERVAL RECORDS)\n           AND  TYPE 30, SUBTYPE 3 (STEP TERM RECORDS)\n*********************************************************************\n ;\nIF EXNUM = 0 THEN RETURN;\nDISP = EXOFF;\nDO I = 1 TO EXNUM;\n  INPUT @DISP    UCBTYP3 $1.\n        @DISP+2  DEVADDR PIB2.\n        @DISP+4  T30DD   $8.\n        @DISP+12 EXCPS   PIB4.\n        @DISP+18 CONNECT PIB4. @;\n  FORMAT DEVADDR CUA HEX4.;\n  IF EXCPS > 0 THEN OUTPUT INTERVAL;\n  DISP = DISP + EXLEB;\n  END;\nRETURN;\n**************************************************************;\nPROC SORT DATA=INTERVAL;\nBY JOBNAME T30DD STEPBEGN;\nPROC PRINT NOOBS ;\n**************************************************************;\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SMF41S": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x10o\\x01\\x02\\x10o\\x13\\x16\\x00Y\\x00Y\\x00\\x00\\xc3\\xd3\\xc1\\xd9\\xd2\\xd1@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-16T00:00:00", "modifydate": "2002-04-16T13:16:00", "lines": 89, "newlines": 89, "modlines": 0, "user": "CLARKJ"}, "text": "//SAS      EXEC SAS\n//FT11F001 DD  SYSOUT=*\n//FT12F001 DD  SYSOUT=*\n//FT22F001 DD  SYSOUT=*\n//SMF      DD  DSN=<YOUR SMF DATA>,DISP=SHR   <========\nDATA RECS;\n  INFILE SMF;\n*******************************************************\n*\n*     SELECT RECORD TYPE 41 SUBTYPE 3 AND PREPARE\n*     TO EXTRACT VLF STATISTICS\n*\n******************************************************* ;\n  INPUT @2  RECID   PIB1. @;\n  IF RECID EQ 41;\n  INPUT @3  ENDED   SMFSTAMP8.\n        @11 SYSID   $4.\n        @19 SUBTYP  PIB2. @;\n  IF SUBTYP EQ 3;\n  INPUT @57 VLFOFF  PIB4.\n        @61 VLFLEN  PIB2.\n        @63 VLFCNT  PIB2. @;\n  VLFOFF = VLFOFF - 3;\n  DATE=DATEPART(ENDED);\n  TIME=TIMEPART(ENDED);\n  HOUR=HOUR(TIME);\n*******************************************************\n*\n*     CUT ONE RECORD FOR EACH VLF CLASS\n*\n******************************************************* ;\nIF VLFCNT > 0 THEN DO;\n  OFFSET = VLFOFF;\n  DO NDX = 1 TO VLFCNT;\n    INPUT @OFFSET    CLASS    $8.\n          @OFFSET+8  MAXVIRT  PIB4.\n          @OFFSET+12 USEDVIRT PIB4.\n          @OFFSET+16 SEARCHES PIB4.\n          @OFFSET+20 HITS     PIB4.\n          @OFFSET+24 ADDS     PIB4.\n          @OFFSET+28 DELETES  PIB4.\n          @OFFSET+32 TRIMS    PIB4.\n          @OFFSET+36 MAXOBJCT PIB4. @;\n    OFFSET=OFFSET+VLFLEN;\n    MAXVIRT  = MAXVIRT  * 4096;\n    USEDVIRT = USEDVIRT * 4096;\n    OUTPUT;\n  END;\nEND;\nPROC SORT ;\n  BY SYSID DATE CLASS HOUR;\nPROC MEANS SUM MAX NOPRINT;\n  VAR MAXVIRT USEDVIRT SEARCHES HITS\n      ADDS DELETES TRIMS MAXOBJCT;\n  OUTPUT OUT=SUM1\n      SUM = S1 S2 SEARCHES HITS ADDS DELETES TRIMS S3\n      MAX = MAXVIRT USEDVIRT M1 M2 M3 M4 M5 MAXOBJCT;\n  BY SYSID DATE CLASS HOUR;\nPROC PRINT NOOBS ;\n  FORMAT DATE MMDDYY.\n         MAXVIRT COMMA13. USEDVIRT COMMA13.\n         SEARCHES COMMA13. HITS COMMA13. ADDS COMMA13.\n         DELETES  COMMA13. TRIMS COMMA13. MAXOBJCT  COMMA13.;\n  VAR CLASS HOUR MAXVIRT USEDVIRT SEARCHES HITS\n                 ADDS DELETES TRIMS MAXOBJCT;\n  SUM SEARCHES HITS ADDS DELETES TRIMS;\n  BY SYSID DATE;\n  TITLE1 'INFORMATION SYSTEMS';\n  TITLE2 'VLF USAGE STATISTICS';\nPROC MEANS DATA=RECS SUM MAX NOPRINT;\n  VAR MAXVIRT USEDVIRT SEARCHES HITS\n      ADDS DELETES TRIMS MAXOBJCT;\n  OUTPUT OUT=SUM2\n      SUM = S1 S2 SEARCHES HITS ADDS DELETES TRIMS S3\n      MAX = MAXVIRT USEDVIRT M1 M2 M3 M4 M5 MAXOBJCT;\n  BY SYSID DATE CLASS;\nPROC PRINTTO UNIT=22;\nPROC PRINT NOOBS ;\n  FORMAT DATE MMDDYY.\n         MAXVIRT COMMA13. USEDVIRT COMMA13.\n         SEARCHES COMMA13. HITS COMMA13. ADDS COMMA13.\n         DELETES  COMMA13. TRIMS COMMA13. MAXOBJCT  COMMA13.;\n  VAR CLASS MAXVIRT USEDVIRT SEARCHES HITS\n            ADDS DELETES TRIMS MAXOBJCT;\n  SUM SEARCHES HITS ADDS DELETES TRIMS;\n  BY SYSID DATE;\n  TITLE1 'INFORMATION SYSTEMS';\n  TITLE2 'VLF USAGE STATISTICS';\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT567/FILE567.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT567", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}