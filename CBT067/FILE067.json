{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011146000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE067.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE067.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x05'", "DS1TRBAL": "b'~\\x92'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00l\\x00\\x01\\x00l\\x00\\x04\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$DOC": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* THIS FILE CONTAINS TWO EXITS THAT ARE USED TO CONTROL VIO ALLOCATION\n* SIZE, FORCE TSO TEMPORARY DATA SETS TO DEDICATED TSO \"PUBLIC\" VOLUMES,\n* AND A FEW OTHER MISCELLANEOUS FUNCTIONS.  THESE EXITS ARE FOR MVS/XA\n* AND HAVE BEEN RUN UNDER MVS/SP2.1.2, MVS/SP2.1.3, AND MVS/SP2.1.7\n* FOR A TOTAL OF ABOUT THREE YEARS.                           12/23/87\n*\n*\n*THE EXITS ARE:\n*\n*IEFDB401:\n*  SVC99 EXIT TO ALLOCATE TSO TEMPORARY DATASETS TO A TSO ONLY SCRATCH\n*  PACK AND CONTROL THE SIZE OF VIO DATA SETS FROM TSO.  THIS EXIT\n*  CHANGES THE UNIT NAME FOR ALL DYNAMIC ALLOCATIONS TO SUPPORT THE\n*  FOLLOWING FUNCTIONS:\n*     1) CONTROL VIO ALLOCATION SIZE.  THIS REQUIRES THE USER TO\n*         SPECIFY UNIT(VIOALLOC).  UNIT=VIOALLOC IS NOT VALID IN THE\n*         SYSGEN PARAMETERS.  IF THE SPACE= SPECIFIES A VALID AMOUNT\n*         OF DISK SPACE, THE UNIT= IS CHANGED TO UNIT=VIODA WHICH IS\n*         A 3340.  IF UNIT=VIODA IS CODED IN THE JCL OR THE SPACE= IS\n*         TOO LARGE, THE UNIT= IS CHANGED TO UNIT=SYSDA.\n*     2) FORCE TSO TEMPORARY DATASETS TO A DEDICATED \"PUBLIC\" VOLUME.\n*         UNIT(VIOALLOC) IS SPECIFIED TO INVOKE THIS SERVICE.  IF THE\n*         SPACE= IS MET IN 1) ABOVE, THE DATASET GOES TO VIO; OTHERWISE\n*         A CHECK IS MADE TO VERIFY THAT THE DYNAMIC ALLOCATION IS MADE\n*         BY A TSO USER.  IF IT IS A TSO USER, UNIT=TSODA IS USED TO\n*         FORCE TSO DATASETS TO DEDICATED TSO \"PUBLIC\" VOLUMES.  ANY\n*         ATTEMPT TO CODE UNIT(TSODA) IS REPLACED BY UNIT(SYSDA).\n*     3) VERIFY THAT ALL IMS ALLOCATION OF AN INTERNAL READER COMES\n*         FROM PROGRAM O9061S75.  THIS IS TO ENSURE THAT ACF2 HAS THE\n*         CORRECT SYSTEM ID FOR JOBS SUBMITTED BY IMS TRANSACTIONS.  AN\n*         ATTEMPT TO VIOLATE ACF2 REQUIREMENTS GETS THE USER A S0C3.\n*     4) UNIT=DISK IS SUBSTITUTED FOR ALL UNIT=XXXX WHERE XXXX IS\n*         EXACTLY FOUR CHARACTERS LONG.\n*\n*\n*IEFUJV:\n*  SMF EXIT TO CHANGE JCL TO MEET COMPANY STANDARDS.  IT SUPPORTS THE\n*  MSVGP= PARAMETER FOR A NON-3850 ENVIRONMENT, CONTROLS VIO SPACE\n*  ALLOCATION AND SEVERAL OTHER MISCELLANEOUS FUNCTIONS.  SUPPORTS THE\n*  FOLLOWING FUNCTIONS:\n*\n*   I. JOB CARD -- NO ACTION\n*\n*  II. EXEC CARD\n*     1) WRITE AN SMF TYPE 131 RECORD IF A PROC IS EXECUTED.  THIS IS\n*         TO ALLOW DETERMINATION WHICH PROCS ARE USED AND WHICH ARE NOT\n*\n* III. DD CARD\n*     1) CONTROL VIO ALLOCATION SIZE.  THIS REQUIRES THE USER TO\n*         SPECIFY UNIT=VIOALLOC.  UNIT=VIOALLOC IS NOT VALID IN THE\n*         SYSGEN PARAMETERS.  IF THE SPACE= SPECIFIES A VALID AMOUNT\n*         OF DISK SPACE, THE UNIT= IS CHANGED TO UNIT=VIODA WHICH IS\n*         A 3340.  IF UNIT=VIODA IS CODED IN THE JCL OR THE SPACE= IS\n*         TOO LARGE, THE UNIT= IS CHANGED TO UNIT=SYSDA.  THIS JOB HAS\n*         THE NAME OF TWO BATCH JOBS THAT ARE ALLOWED TO USE VIO,\n*         OTHERWISE VIO IS RESTRICTED TO TSO USERS ONLY.  BOTH UNIT=\n*         AND SPACE= MUST BE ON THE SAME CARD FOR THIS TO WORK.  UNIT=\n*         MUST ALSO BE THE LAST PARAMETER ON THE LAST CARD OF A DD\n*         CARD CONCATENATION.\n*     2) FORCE TSO TEMPORARY DATASETS TO A DEDICATED \"PUBLIC\" VOLUME.\n*         UNIT=VIOALLOC IS SPECIFIED TO INVOKE THIS SERVICE.  IF THE\n*         SPACE= IS MET IN 1) ABOVE, THE DATASET GOES TO VIO; OTHERWISE\n*         A CHECK IS MADE TO VERIFY THAT THE DYNAMIC ALLOCATION IS MADE\n*         BY A TSO USER.  IF IT IS A TSO USER, UNIT=TSODA IS USED TO\n*         FORCE TSO DATASETS TO DEDICATED TSO \"PUBLIC\" VOLUMES.  ANY\n*         ATTEMPT TO CODE UNIT(TSODA) IS REPLACED BY UNIT(SYSDA).  BOTH\n*         UNIT= AND SPACE= MUST BE ON THE SAME CARD FOR THIS TO WORK.\n*     3) MSVGP=GDGDAn IS OUR INSTALLATION SPECIFICATION FOR DISK GDG\n*         DATASETS (CURRENTLY 2 3380-BE4 UNITS WORTH).  THE CODE TO\n*         IMPLEMENT THIS IS IN THIS EXIT.  MSVGP= MUST BE THE ONLY\n*         USEFUL INFORMATION ON THE LAST CARD OF A DD CARD CONTINUATION\n*         FOR THIS TO WORK BECAUSE THE ENTIRE CARD IS REPLACED.\n*     4) THE ARCHAIC FORM OF THE INTERNAL READER IS CHANGED TO THE\n*         CURRENTLY SUPPORTED VERSION.\n*\n*\n* ANY PROBLEMS OR QUESTIONS PLEASE CALL:\n*        JAMES F. COOK\n*        THE COCA-COLA COMPANY\n*        ONE COCA-COLA PLAZA, NW\n*        ATLANTA, GEORGIA 30313\n*          (404) 765-1522\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEFDB401": {"ttr": 519, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*          DATA SET IEFDB401   AT LEVEL 006 AS OF 12/22/87\nIEFDB401 TITLE 'IEFDB401--SVC 99 EXIT TO CONTROL DYNAMIC ALLOCATION'\n         PRINT NOGEN\nIEFDB401 CSECT\nIEFDB401 AMODE ANY\nIEFDB401 RMODE ANY\n*\n*  SVC99 EXIT TO ALLOCATE TSO TEMPORARY DATASETS TO A TSO ONLY SCRATCH\n*  PACK AND CONTROL THE SIZE OF VIO DATA SETS FROM TSO.  THIS EXIT\n*  CHANGES THE UNIT NAME FOR ALL DYNAMIC ALLOCATIONS TO SUPPORT THE\n*  FOLLOWING FUNCTIONS:\n*     1) CONTROL VIO ALLOCATION SIZE.  THIS REQUIRES THE USER TO\n*         SPECIFY UNIT(VIOALLOC).  UNIT=VIOALLOC IS NOT VALID IN THE\n*         SYSGEN PARAMETERS.  IF THE SPACE= SPECIFIES A VALID AMOUNT\n*         OF DISK SPACE, THE UNIT= IS CHANGED TO UNIT=VIODA WHICH IS\n*         A 3340.  IF UNIT=VIODA IS CODED IN THE JCL OR THE SPACE= IS\n*         TOO LARGE, THE UNIT= IS CHANGED TO UNIT=SYSDA.\n*     2) FORCE TSO TEMPORARY DATASETS TO A DEDICATED \"PUBLIC\" VOLUME.\n*         UNIT(VIOALLOC) IS SPECIFIED TO INVOKE THIS SERVICE.  IF THE\n*         SPACE= IS MET IN 1) ABOVE, THE DATASET GOES TO VIO; OTHERWISE\n*         A CHECK IS MADE TO VERIFY THAT THE DYNAMIC ALLOCATION IS MADE\n*         BY A TSO USER.  IF IT IS A TSO USER, UNIT=TSODA IS USED TO\n*         FORCE TSO DATASETS TO DEDICATED TSO \"PUBLIC\" VOLUMES.  ANY\n*         ATTEMPT TO CODE UNIT(TSODA) IS REPLACED BY UNIT(SYSDA).\n*     3) VERIFY THAT ALL IMS ALLOCATION OF AN INTERNAL READER COMES\n*         FROM PROGRAM O9061S75.  THIS IS TO ENSURE THAT ACF2 HAS THE\n*         CORRECT SYSTEM ID FOR JOBS SUBMITTED BY IMS TRANSACTIONS.  AN\n*         ATTEMPT TO VIOLATE ACF2 REQUIREMENTS GETS THE USER A S0C3.\n*     4) UNIT=DISK IS SUBSTITUTED FOR ALL UNIT=XXXX WHERE XXXX IS\n*         EXACTLY FOUR CHARACTERS LONG.\n*\n*  TSO IS VERY DEPENDENT ON TEMPORARY DATASETS TO PERFORM SOME OF ITS\n*  FUNCTIONS (COMPILE, ETC.).  PERFORMANCE IMPROVEMENTS ARE AVAILABLE\n*  BY SEPARATING TEMPORARY, WORK DATASETS FROM THE PERMANENT DATASETS\n*  THAT ALL TSO USERS KEEP ON THEIR PRIMARY PACKS.  SINCE THE UNITNAME\n*  FOR ALL NEW TSO DATASETS MUST BE SPECIFIED IN SYS1.UADS,  IT IS\n*  DIFFICULT TO SEPARATE THESE DATASETS.  THIS EXIT WILL CHANGE THE\n*  UNITNAME FOR TEMPORARY DATASETS FROM THAT SPECIFIED IN SYS1.UADS TO\n*  A UNITNAME OF YOUR CHOICE (SPECIFIED IN THE \"UNITTEXT\" DC BELOW).\n*  THIS ALLOWS MOVING TEMPORARIES TO ANY WORK PACKS YOU LIKE OR\n*  DEDICATING WORK/SCRATCH PACKS TO TSO USERS.\n*\n*  CODE IS INCLUDED TO CONTROL THE SIZE OF VIO DATA SETS FROM TSO.\n*\n*  CODE IS INCLUDED TO CONTROL THE USE OF DYNAMIC \"INTRDR\" ALLOCATION\n*  FROM IMS MPP REGIONS.\n*\n         REGEQU\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         USING IEFDB401,R12\n         B     AROUNDC\n         DC    CL8'IEFDB401'\n         DC    CL9' &SYSDATE.'\n         DC    CL7' &SYSTIME.'\nAROUNDC  LR    R11,R1\n         USING PARMFLD,R11       IEFDB401 PARAMETERS\n         L     R6,WORKAA          A(A(WORK AREA))\n         L     R6,0(R6)           A(WORK AREA)\n         L     R7,WORKLENA        A(LENGTH)\n         L     R7,0(R7)           LENGTH OF WORK AREA\n         SRL   R7,1\n         LA    R5,LENGTH\n         CR    R7,R5              IS THERE ENOUGH WORK AREA??\n         BL    GETOUTQU\n         LA    R5,0(R7,R6)\n         ST    R13,4(R5)\n         ST    R5,8(R13)\n         LR    R13,R5\n         USING WORKAREA,R13\n         MVC   EYECATCH,=CL24'   IEFDB401 WORK AREA'\n         NI    FLAG,X'00'         INITIALIZE FLAG\n         SR    R8,R8\n         ST    R8,THREEPLS\n         ST    R8,PRIMESPC\n         ST    R8,SECNDSPC\n         ST    R8,BLKLNSPC\n         L     R9,PGMNAMEA\n         MVC   PGMNAME,0(R9)  SAVE PROGRAM NAME FOR LATER CHECKING\n         CLC   =C'ADFMDF03',PGMNAME IS THIS THE SESSION MANAGER?\n         BNE   SESSMGR         NO, LET IT GO\n         MVC   PGMNAME,=C'IKJEFT01'\n         SPACE 1\nSESSMGR  L     R9,SV99IRBA        A(REQ BLK)\n         USING S99RB,R9\n         CLI   S99VERB,S99VRBAL   IS THIS AN ALLOCATE BY DSN\n         BNE   ZERORC              NO\n         L     R3,S99TXTPP\n         USING S99TUPL,R3\n         SPACE 1\nLOOP     L     R4,S99TUPTR\n         USING S99TUNIT,R4\n         LTR   R4,R4\n         BZ    CHECK\n         CLC   S99TUKEY,=AL2(DALDSNAM)  CHECK FOR SPECIFIC FUNCTIONS\n         BE    DSNAMEP\n         CLC   S99TUKEY,=AL2(DALTRK)\n         BE    TRACKS\n         CLC   S99TUKEY,=AL2(DALCYL)\n         BE    CYLINDER\n         CLC   S99TUKEY,=AL2(DALBLKLN)\n         BE    ALLOCBLK\n         CLC   S99TUKEY,=AL2(DALPRIME)\n         BE    ALLOCPRM\n         CLC   S99TUKEY,=AL2(DALSECND)\n         BE    ALLOCSEC\n         CLC   S99TUKEY,=AL2(DALROUND)\n         BE    CYLINDER\n         CLC   S99TUKEY,=AL2(DALSTATS)\n         BE    STATP\n         CLC   S99TUKEY,=AL2(DALUNIT)\n         BE    UNITP\n         CLC   S99TUKEY,=AL2(DALDUMMY)\n         BE    ZERORC\n         CLC   S99TUKEY,=AL2(DALTERM)\n         BE    ZERORC\n         CLC   S99TUKEY,=AL2(DALSSNM)\n         BE    ZERORC\n         CLC   S99TUKEY,=AL2(DALSPGNM)\n         BE    IMSINTRD\nCHECK    TM    S99TUPTR,S99TUPLN  LAST ONE?\n         BO    END\n         LA    R3,4(R3)\n         B     LOOP\n         SPACE 1\nDSNAMEP  CLI   S99TUPAR,C'&&'      TEMP DSN?\n         BNE   ZERORC\n         OI    FLAG,FLAGDSN\n         B     CHECK\n         SPACE 1\nUNITP    OI    FLAG,FLAGUNIT\n         CLC   =C'VIO',S99TUPAR\n         BNE   ZERORC\n         OI    FLAG,FLAGVIO\n         ST    R3,UNITS99B\n         ST    R4,UNITS99A\n         CLC   S99TULNG,=H'4'\n         BNE   CHECK\n         MVC   S99TUPAR(4),=C'DISK'\n         B     CHECK\n         SPACE 1\nSTATP    TM    S99TUPAR,X'09'     DISP=OLD | DISP=SHR\n         BM    ZERORC\n         TM    S99TUPAR,X'04'     DISP=NEW\n         BO    CHECK\n         OI    FLAG,FLAGSTAT\n         B     CHECK\n         SPACE 1\nCYLINDER OI    FLAG,FLAGCYL\n         B     CHECK\nTRACKS   OI    FLAG,FLAGTRK\n         B     CHECK\n         SPACE 1\nALLOCPRM MVC   THREEBYT,S99TUPAR\n         MVC   PRIMESPC,THREEPLS\n         B     CHECK\n         SPACE 1\nALLOCSEC MVC   THREEBYT,S99TUPAR\n         MVC   SECNDSPC,THREEPLS\n         B     CHECK\n         SPACE 1\nALLOCBLK MVC   THREEBYT,S99TUPAR\n         MVC   BLKLNSPC,THREEPLS\n         B     CHECK\n         SPACE 1\nEND      TM    FLAG,FLAGUNIT\n         BO    VIOCHECK\n         CLC   =C'IKJEFT01',PGMNAME\n         BNE   VIOCHECK\n         NI    S99TUPTR,X'FF'-S99TUPLN     TURN OFF LAST ONE BIT\n         AH    R3,=H'4'           ADD TO POINTERS\n         LA    R8,UNITTEXT\n         ST    R8,S99TUPTR        STORE NEW POINTER ADDRESS\n         OI    S99TUPTR,S99TUPLN  TURN ON LAST ONE BIT\n         B     ZERORC\n         SPACE 1\nVIOCHECK TM    FLAG,FLAGVIO\n         BZ    ZERORC\n         CLC   =C'IKJEFT01',PGMNAME\n         BNE   MVCSYS\n         L     R1,SECNDSPC\n         LA    R8,15          MULTIPLY BY 15 MAXIMUM EXTENTS\n         MR    R0,R8\n         LR    R8,R1\n         A     R8,PRIMESPC\n         TM    FLAG,FLAGTRK   ALLOCATION IN TRACKS?\n         BO    CALCTRK\n         TM    FLAG,FLAGCYL   ALLOCATION IN CYLINDERS?\n         BNO   CALCBLK\n         L     R1,=F'12'      3340 TRACKS/CYLINDER\n         MR    R0,R8\n         LR    R8,R1\nCALCTRK  L     R1,=F'8368'    3340 BYTES/TRACK\nFINALCAL MR    R0,R8\n         C     R1,=F'2097153' ALLOW 2M TO USE VIO\n         BL    ZERORC\n         B     MVCSYS\nCALCBLK  L     R1,BLKLNSPC\n         B     FINALCAL\nMVCSYS   L     R4,UNITS99A    REPLACE THE UNIT NAME\n         CLC   =C'VIO',S99TUPAR\n         BNE   ZERORC\n         CLC   =C'IKJEFT01',PGMNAME IS THIS TSO?\n         BNE   MVCSYS1\n         L     R3,UNITS99B    LOAD ADDRESS OF POINTER\n         LA    R8,UNITTEXT    LOAD NEW ADDRESS FOR POINTER\n         TM    S99TUPTR,S99TUPLN\n         BNO   STNEWPTR\n         O     R8,=X'80000000' SET END OF TEXT INDICATOR\nSTNEWPTR ST    R8,S99TUPTR       STORE POINTER TO UNITTEXT\nMVCSYS1  MVC   S99TUPAR(3),=C'SYS'\n         SPACE 1\nIMSINTRD L     R8,JOBNAMEA    CHECK FOR IMS MPP REGION NAME\n         CLC   =C'O9600',0(R8)\n         BNE   ZERORC           NOT IMS, FORGET IT\n         CLC   =CL2' ',6(R8)\n         BNE   ZERORC           NOT IMS, FORGET IT\n         CLC   =H'6',S99TULNG IS THE LENGTH OF THE OPERAND = 6?\n         BNE   ZERORC\n         CLC   =C'INTRDR',S99TUPAR IS THE SYSOUT PGM NAME CORRECT?\n         BNE   ZERORC           NO, FORGET IT\n         DROP  R3,R4,R9\n         USING PSA,0          POINT TO PSA\n         L     R3,PSAAOLD     LOAD CURRENT ASCB POINTER\n         USING ASCB,R3        POINT TO ASCB\n         L     R4,ASCBASXB    LOAD POINTER TO ASXB\n         DROP  0,R3\n         USING ASXB,R4\n         L     R4,ASXBFTCB    LOAD POINTER TO TCB FOR IEAVAR30\n         DROP  R4\n         USING TCB,R4\n         L     R4,TCBLTC      LOAD POINTER TO TCB FOR IEFSB605\n         LTR   R4,R4           IS THIS TCB ZERO?\n         BZ    NOTZERO          YES, KILL IT\n         L     R4,TCBLTC      LOAD POINTER TO TCB FOR IEFIIC\n         LTR   R4,R4           IS THIS TCB ZERO?\n         BZ    NOTZERO          YES, KILL IT\n         L     R4,TCBLTC      LOAD POINTER TO TCB FOR A9590A07\n         LTR   R4,R4           IS THIS TCB ZERO?\n         BZ    NOTZERO          YES, KILL IT\n         L     R4,TCBLTC      LOAD POINTER TO TCB FOR DFSPCC20\n         LTR   R4,R4           IS THIS TCB ZERO?\n         BZ    NOTZERO          YES, KILL IT\n         L     R4,TCBLTC      LOAD POINTER TO TCB FOR O9061S75\n         LA    R4,0(R4)        DROP ANY HIGH ORDER BIT(S)\n         LTR   R4,R4           IS THIS TCB ZERO?\n         BZ    NOTZERO          YES, KILL IT\n         L     R5,TCBRBP      POINTER TO CURRENT REQUEST BLOCK\n         DROP  R4\n         USING RBBASIC,R5\nIMSLOOP  L     R6,RBLINK      POINTER TO OLDER REQUEST BLOCK\n         LA    R6,0(R6)       CHECK FOR THE OLDEST REQUEST BLOCK\n         CR    R6,R4          IS THIS THE OLDEST REQUEST BLOCK?\n         BE    IMSLOOP1        YES, CHECK THE CDE\n         LR    R5,R6          USE THE OLDER RB ADDRESS\n         B     IMSLOOP\nIMSLOOP1 L     R6,RBCDE       POINTER TO CDE FOR PROGRAM\n         DROP  R5\n         USING CDENTRY,R6\n         CLC   =C'O9061S75',CDNAME CHECK THE PROGRAM NAME\n         BNE   NOTZERO         WRONG, KILL IT\n         TM    CDATTR2,CDSYSLIB CHECK FOR AUTHORIZED LIBRARY\n         BO    ZERORC           YES, LET IT GO\n         DROP  R6\n         EX    R5,*           BLOW BECAUSE NOT AUTHORIZED LIBRARY\n*                               EVENTUALLY THE IMS SYSTEM PROGRAMMER\n*                               WILL GET IT CORRECT.\nNOTZERO  EX    R6,*           BLOW THE PROGRAM FOR A VALID ERROR.\n         L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         LA    R15,4\n         BR    R14\n         SPACE 2\nZERORC   L     R13,4(R13)\nGETOUTQU LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\n         SPACE 1\nUNITTEXT DC    X'0015'\n         DC    X'0001'\n         DC    X'0008'\n         DC    C'SYSTSODA'\n         SPACE 1\n         LTORG\n         SPACE 2\nPARMFLD  DSECT\nSV99IRBA DS    F              ADDRESS OF SVC99 INPUT REQUEST BLOCK, ETC\nWORKAA   DS    F              ADDRESS OF THE WORK AREA ADDRESS\nWORKLENA DS    F              ADDRESS OF THE LENGTH OF THE WORK AREA\nJOBNAMEA DS    F              ADDRESS OF THE JOB NAME\nPGMRNAMA DS    F              ADDRESS OF THE PROGRAMMER NAME\nJOBACCTA DS    F              ADDRESS OF THE JOB ACCOUNT INFO\nSTEPNAMA DS    F              ADDRESS OF THE STEP NAME\nPGMNAMEA DS    F              ADDRESS OF THE PROGRAM NAME\nSTPACCTA DS    F              ADDRESS OF THE STEP ACCOUNT INFO\n         SPACE 1\nWORKAREA DSECT\n         DS    18F\nTHREEPLS DS    0F\n         DS    X\nTHREEBYT DS    XL3\nPRIMESPC DS    F              SPACE ALLOCATION PRIMARY VALUE\nSECNDSPC DS    F              SPACE ALLOCATION SECONDARY VALUE\nBLKLNSPC DS    F              AVERAGE BLOCK LENGTH\nUNITS99A DS    F              POINTER TO THE UNIT=  S99TUNIT\nUNITS99B DS    F              ADDRESS OF POINTER TO THE UNIT=\nFLAG     DS    XL1\nFLAGDSN  EQU   X'80'          DSNAME FOUND\nFLAGUNIT EQU   X'40'          UNIT FOUND\nFLAGCYL  EQU   X'20'          CYLINDER ALLOCATION\nFLAGTRK  EQU   X'10'          TRACK ALLOCATION\nFLAGVIO  EQU   X'08'          VIO UNIT NAME\nFLAGSTAT EQU   X'01'          DISP=MOD\nPGMNAME  DS    CL8            PROGRAM NAME FOR LATER CHECKING\nEYECATCH DC    CL24'   IEFDB401 WORK AREA'\nLENGTH   EQU   *-WORKAREA\n         SPACE 1\n         IHAPSA DSECT=YES     REQUIRES SYS1.AMODGEN\n         IHAASCB\n         IHAASXB\n         IKJTCB\n         IHACDE\n         IHARB\n         EJECT\n         PRINT GEN\n         IEFZB4D0\n         EJECT\n         IEFZB4D2\n         END   IEFDB401\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEFUJV": {"ttr": 525, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*          DATA SET IEFUJV     AT LEVEL 013 AS OF 12/22/87\nIEFUJV   TITLE 'IEFUJV -- IEFUJV SMF EXIT'\n*\n*  SMF EXIT TO CHANGE JCL TO MEET COMPANY STANDARDS.  IT SUPPORTS THE\n*  MSVGP= PARAMETER FOR A NON-3850 ENVIRONMENT, CONTROLS VIO SPACE\n*  ALLOCATION AND SEVERAL OTHER MISCELLANEOUS FUNCTIONS.  SUPPORTS THE\n*  FOLLOWING FUNCTIONS:\n*\n*   I. JOB CARD -- NO ACTION\n*\n*  II. EXEC CARD\n*     1) WRITE AN SMF TYPE 131 RECORD IF A PROC IS EXECUTED.  THIS IS\n*         TO ALLOW DETERMINATION WHICH PROCS ARE USED AND WHICH ARE NOT\n*\n* III. DD CARD\n*     1) CONTROL VIO ALLOCATION SIZE.  THIS REQUIRES THE USER TO\n*         SPECIFY UNIT=VIOALLOC.  UNIT=VIOALLOC IS NOT VALID IN THE\n*         SYSGEN PARAMETERS.  IF THE SPACE= SPECIFIES A VALID AMOUNT\n*         OF DISK SPACE, THE UNIT= IS CHANGED TO UNIT=VIODA WHICH IS\n*         A 3340.  IF UNIT=VIODA IS CODED IN THE JCL OR THE SPACE= IS\n*         TOO LARGE, THE UNIT= IS CHANGED TO UNIT=SYSDA.  THIS JOB HAS\n*         THE NAME OF TWO BATCH JOBS THAT ARE ALLOWED TO USE VIO,\n*         OTHERWISE VIO IS RESTRICTED TO TSO USERS ONLY.  BOTH UNIT=\n*         AND SPACE= MUST BE ON THE SAME CARD FOR THIS TO WORK.  UNIT=\n*         MUST ALSO BE THE LAST PARAMETER ON THE LAST CARD OF A DD\n*         CARD CONCATENATION.\n*     2) FORCE TSO TEMPORARY DATASETS TO A DEDICATED \"PUBLIC\" VOLUME.\n*         UNIT=VIOALLOC IS SPECIFIED TO INVOKE THIS SERVICE.  IF THE\n*         SPACE= IS MET IN 1) ABOVE, THE DATASET GOES TO VIO; OTHERWISE\n*         A CHECK IS MADE TO VERIFY THAT THE DYNAMIC ALLOCATION IS MADE\n*         BY A TSO USER.  IF IT IS A TSO USER, UNIT=TSODA IS USED TO\n*         FORCE TSO DATASETS TO DEDICATED TSO \"PUBLIC\" VOLUMES.  ANY\n*         ATTEMPT TO CODE UNIT(TSODA) IS REPLACED BY UNIT(SYSDA).  BOTH\n*         UNIT= AND SPACE= MUST BE ON THE SAME CARD FOR THIS TO WORK.\n*     3) MSVGP=GDGDAn IS OUR INSTALLATION SPECIFICATION FOR DISK GDG\n*         DATASETS (CURRENTLY 2 3380-BE4 UNITS WORTH).  THE CODE TO\n*         IMPLEMENT THIS IS IN THIS EXIT.  MSVGP= MUST BE THE ONLY\n*         USEFUL INFORMATION ON THE LAST CARD OF A DD CARD CONTINUATION\n*         FOR THIS TO WORK BECAUSE THE ENTIRE CARD IS REPLACED.\n*     4) THE ARCHAIC FORM OF THE INTERNAL READER IS CHANGED TO THE\n*         CURRENTLY SUPPORTED VERSION.\n*\n*\n* IEFUJV -THIS WAS THE PROGRAM WHICH WAS RECOVERD FROM THE OBJECT DECK\n*         THRU DELINK/DISASSEMPLE.THE PROGRAM WAS WRITTEN ORIGINALLY\n*         BY WADE FRANKLIN.\n* 03-23-79 : COMMENTS ADDED TO THE DISASSEMBLED DECK.  T.Y.\n* 04-05-79 : (C1) SUPPORT MSVGP=GDGDA1 FOR \"GDGCYL\" DASD'S. T.Y\n* 09-07-79 : (C2) SUPPORT MSVGP=GDGDA2 (SAME TARGET DASD AS GDGDA1) AJP\n* 02-19-82 : (C3) ADDED SOME COMMENTS.   R.S.\n* 09-25-82 : (C4) ADD HANDLING FOR VIO DATASETS ON VIRTUAL 3340. JFC\n* 02-16-83 : (C5) CHANGED ALLOCATION FROM CYL TO TRK AND REMOVED\n*                 ROUND FROM 19069 BLOCK ALLOCATION.  CFH\n* 01-27-84 : (C6) REMOVED TIME=1439 OVERRIDE FROM EXEC CARD. JFC\n* 08-16-84 : (C7) CONVERTED PROGRAM TO 31-BIT ADDRESSING. JFC\n* 06-26-87 : (C8) ALLOW VIO FOR CORPORATE FINANCIAL CONSOLIDATION  JFC\n*\n*********************************************************************C3\n*                                                                    C3\n*  NAME - IEFUJV                                                     C3\n*                                                                    C3\n*  FUNCTION -                                                        C3\n*     THIS ROUTINE RECEIVES CONTROL FROM THE CONVERTER BEFORE EACH   C3\n*     JCL STATEMENT IS CONVERTED, FROM THE CONVERTER AFTER ALL JCL   C3\n*     HAS BEEN CONVERTED, AND FROM THE INTERPRETER AFTER ALL JCL HAS C3\n*     BEEN INTERPRETED.  (NOTE THAT JES2 ALSO HAS AN EXIT, HASPRSCN, C3\n*     BETWEEN THE FINAL CONVERTER EXIT AND THE INTERPRETER EXIT.)    C3\n*                                                                    C3\n*     AS MENTIONED ABOVE, THE ORIGINAL SOURCE WAS LOST, AND I FOR    C3\n*     ONE AM NOT CERTAIN WHAT ALL IS DONE HERE, MUCH LESS WHY.       C3\n*     WE SEEM TO DO THE FOLLOWING:                                   C3\n*        JOB CARD:                                                   C3\n*             NO ACTION.                                             C7\n*        EXEC CARD:                                                  C3\n*             \"TIME=1440\", IF CODED, IS CHANGED TO 1439. **DELETED** C6\n*             AN SMF TYPE 131 (USER) RECORD IS WRITTEN IF A PROC IS  C3\n*                BEING EXECUTED.  (WE USE THESE TO RUN OCCASIONAL    C3\n*                REPORTS ON WHICH PROCS IN PROCLIB ARE GETTING USED.)C3\n*        DD CARD:                                                    C3\n*             \"UNIT=INTRDR\" IS CHANGED TO \"SYSOUT=(A,INTRDR)\".       C3\n*             \"MSVGP\" IS CHANGED TO UNIT AND SPACE PARAMETERS FOR    C3\n*                GDGCYL.  THE UNIT PARAMETER IS \"UNIT=(GDGCYL,1)\";   C3\n*                SPACE IS \"(19069,240,RLSE,,ROUND)\" FOR MSVGP=GDGDA1,C3\n*                OR \"(CYL,(10,1),RLSE)\" FOR GDGDA2.  IF THE JOBNAME  C3\n*                BEGINS WITH \"Q\" OR \"R\" (AQUA-CHEM), \"UNIT=(AQGDG,1),C3\n*                SPACE=(TRK,(30,30),RLSE)\" IS USED INSTEAD.  ANY     C3\n*                MSVGP OPERAND OTHER THAN GDGDA1 OR GDGDA2 IS        C3\n*                INVALID, AND THE DD CARD IS LEFT ALONE (AND WILL    C3\n*                GIVE A JCL ERROR).  NOTE THAT THE ENTIRE CARD       C3\n*                CONTAINING MSVGP IS REPLACED BY A CARD CONTAINING   C3\n*                UNIT AND SPACE; THIS IMPLIES THAT (1) MSVGP MUST BE C3\n*                ON A CONTINUATION CARD, (2) IT MUST BE THE LAST     C3\n*                CONTINUATION CARD FOR THAT DD, (3) ANY OTHER        C3\n*                PARAMETERS ON THE SAME CARD WITH MSVGP WILL BE      C3\n*                DELETED, AND (4) THERE MUST NOT BE UNIT OR SPACE    C3\n*                PARAMETERS ON ONE OF THE OTHER CARDS OF THAT DD.    C3\n*        PROC CARD:                                                  C3\n*             NO ACTION.  (THIS ENTRY WAS NEW WITH SE/2).            C3\n*        FINAL CONVERTER CALL:                                       C3\n*             NO ACTION.  (THE OLD SOURCE USED TO PUT THE CURRENT    C3\n*                TIME OF DAY INTO THE USER COMMUNICATION FIELD IN    C3\n*                THE CEPA.  NO ONE KNOWS WHY.)                       C3\n*        FINAL INTERPRETER CALL:                                     C3\n*             NO ACTION.  (ALSO NEW WITH SE/2.)                      C3\n*  INPUT -                                                           C3\n*     R1 POINTS TO A LIST OF FOUR ADDRESSES:                         C3\n*        1.  ADDRESS OF THE COMMON EXIT PARAMETER AREA               C3\n*        2.  ADDRESS OF THE 80-BYTE JCL STATEMENT                    C3\n*        3.  ADDRESS OF A ONE-BYTE INDICATOR SHOWING WHICH TYPE OF   C3\n*                ENTRY                                               C3\n*        4.  ADDRESS OF A ONE-BYTE INDICATOR DESCRIBING CERTAIN JES  C3\n*                CONVERTER PARM VALUES.  (NEW WITH SE/2; WE DON'T    C3\n*                USE IT.)                                            C3\n*  OUTPUT -                                                          C3\n*     R15 = 0 TO CONTINUE, 4 TO CANCEL THE JOB.                      C3\n*  REGISTER USAGE -                                                  C3\n*     R0 - WORK REGISTER                                             C3\n*     R1 - GETMAIN/TRT WORK REGISTER                                 C3\n*     R2 - TRT WORK REGISTER                                         C3\n*     R3 - POINTER TO COMMON EXIT PARAMETER DSECT                    C3\n*     R4 - POINTER TO JCL STATEMENT DSECT                            C3\n*     R5 - POINTER TO RECORD DESCRIPTOR BYTE                         C3\n*     R6 - POINTER TO WORK AREA DSECT (SET BY GETMAIN)               C3\n*     R7 - SET TO COL 1  OF JCL STATEMENT                            C3\n*     R8 - SET TO COL 71 OF JCL STATEMENT                            C3\n*     R9 - WORK REG                                                  C3\n*     R10- WORK REG                                                  C3\n*     R11- WORK REG                                                  C3\n*     R12- BASE REGISTER                                             C3\n*     R13- SAVE AREA POINTER                                         C3\n*     R14- RETURN REGISTER                                           C3\n*     R15- RETURN CODE REGISTER (0=CONTINUE,4=CANCEL JOB)            C3\n*  PROGRAMMING NOTES -                                               C3\n*     IEFUJV IS A SINGLE LOAD MODULE IN LPA.  MUST BE REENTRANT.     C3\n*********************************************************************C3\nUSERUJV1 CSECT\nUSERUJV1 AMODE 31             CSECT NAME CHANGED TO SUPPORT ASM2'S IXR\nUSERUJV1 RMODE ANY              LINKEDITS\n         USING *,R12\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         B     START\n         DC    C'IEFUJV  '\n         DC    C'&SYSDATE',C' &SYSTIME'\nSTART    LM    R3,R5,0(R1)         PICK UP FIRST 3 PARAMETERS\n         LA    R7,0(0,R4)          ADDRESS OF COL 1 OF JCL STMT\n         LA    R8,71(0,R4)         ADDRESS OF COL 72 OF JCL STMT\n         CLI   0(R5),X'04'         IS A DD STMT ENTRY?\n         BE    DDCARDP             BR IF YES\n         CLI   0(R5),X'02'         IS THIS AN EXEC STMT ENTRY?\n         BE    EXECP               BR IF YES\n         B     RETURNOK            DON'T DO ANYTHING FOR OTHER ENTRIES\n         SPACE 3\nDDCARDP  LR    R1,R7               SET POINTER TO COL.1 OF JCL\nDDCP1    LR    R9,R8               GET COL1.73 IN REG 9\n         LA    R1,1(R1)            ADVANCE POINTER\n         SR    R9,R1               SET RANGE FOR SCAN\n         BNP   CHKMSVGP            AT THE END OF A CARD?            C1\n         EX    R9,TRT6             IS THERE A 'U' IN A CARD?\n         BZ    CHKMSVGP            RETURN IF NO                     C1\n         CLC   UNITVIO,0(R1)       UNIT=VIO?                        C4\n         BE    VIOCHECK             YES, HANDLE IT                  C4\n         CLC   UNITVIO1,0(R1)      UNIT=(VIO?                       C4\n         BE    VI0CHECK             YES, HANDLE IT                  C4\n         CLC   UNITINTR,0(R1)      UNIT=INTRDR?\n         BNE   DDCP1                BR IF NO\n         LR    R9,R8               SET POINTER BACK TO COL.1\n         SR    R9,R1               SET UP # OF CHARACTERS TO MOV\n         EX    R9,MVCINTR          MOVE \"SYSOUT=(A,INTRDR),....\"\n         B     RETURNOK            GO BACK\nCHKMSVGP CLI   2(R7),C' '          IS COL.3 BLANK?                  C1\n         BNE   RETURNOK            RETURN IF NOT CONTINUATION STMT  C1\n         LA    R1,3(R7)            START SCAN AT COL.4              C1\n         LA    R9,15(R7)           STOP AT COL.60                   C1\n         SR    R9,R1               SET SCAN RANGE                   C1\n         EX    R9,RTRM             LOOKING FOR A 'M'                C1\n         LR    R10,R1              SAVE POSITION OF A 'M'           C1\n         BZ    RETURNOK            RETURN IF NO 'M'                 C1\n         CLC   0(L'MSVGP,R1),MSVGP IS IT A 'MSVGP='?                C1\n         BNE   RETURNOK            RETURN IF NO                     C1\n         CLI   6(R1),C'('          IS C'(' AFTER MSVGP= ?           C1\n         BNE   CHKGDGDA            BR IF YES                        C1\n         LA    R1,1(R1)            ADJUST POINTER                   C1\nCHKGDGDA CLC   6(6,R1),GDGDA1      IS IT A 'GDGDA1'?                C1\n         BE    GOTGDGD1            BR IF YES                        C2\n         CLC   6(6,R1),GDGDA2      IS IT A 'GDGDA2' ?               C2\n         BNE   RETURNOK            BR IF NO                         C2\n         MVC   0(L'CGDGDA2,R10),CGDGDA2                             C2\n         B     RETURNOK                                             C3\nGOTGDGD1 MVC   0(L'CGDGDA1,R10),CGDGDA1    REPLACE MSVGP WITH UNIT& C2\n         B     RETURNOK            RETURN                 SPACE     C1\n*                                                                   C1\nRTRM     TRT   0(*-*,R1),TRTBM     TO BE EXECUTED                   C1\n         SPACE 3\nVIOCHECK CLC   VIOALLOC,0(R1)      ONLY ALLOW THIS TO PASS          C4\n         BE    VIOCK00                                              C4\n         NOP   RETURNON                                             C4\n         B     VIOCK0                                               C4\nVIOCK00  MVC   0(13,R1),=C'UNIT=VIODA   '                           C4\nVIOCK0   CLC   =C'UNIT=VIODA ',0(R1) GUARANTEE VIO IS CORRECT       C4\n         BE    VIOCK2                                               C4\nVIOCK1   MVC   5(3,R1),=C'SYS'     MOVE DATASET TO \"SYSDA\"          C4\n         B     RETURNOK                                             C4\nVIOCK2   CLC   =C'O3800A',0(R3)    IS THIS FOR CFC?                 C8\n         BE    VIOCK2A              YES, CHECK IT FURTHER           C8\n         CLC   =C'O3800B',0(R3)    IS THIS FOR CFC?                 C8\n         BE    VIOCK2A              YES, CHECK IT FURTHER           C8\n         TM    29(R3),X'01'        IS IT A TSO USERID?              C4\n         BNO   VIOCK1               NO, KILL IT                     C4\nVIOCK2A  LA    R9,5(R1)            HANG ON TO ADDRESS OF \"VIODA \"   C4\n         LR    R11,R7              SAVE THE START OF THE CARD       C4\n         L     R10,=F'-1'          LOAD THE INCREMENT VALUE         C4\nVIOCK3   CLC   =C'SPACE=',0(R1)    FIND THE \"SPACE=\"                C4\n         BE    VIOCK4                                               C4\n         BXH   R1,R10,VIOCK3       LOOP UNTIL THE START OF THE CARD C4\n         B     RETURNOK            END OF CARD                      C4\nVIOCK4   LH    R11,=H'1'           INITIALIZE TO 1                  C4\n         LA    R1,7(R1)            POINT TO SPACE TYPE              C4\n         CLC   =C'CYL',0(R1)       CYLINDER ALLOCATION              C4\n         BNE   VIOCK5              TRY AGAIN                        C4\n         LH    R11,=H'12'          TRACK/CYLINDER ON 3340           C4\n         B     VIOCK6                                               C4\nVIOCK5   CLC   =C'TRK',0(R1)       TRACK ALLOCATION                 C4\n         BNE   VIOCK7              MUST BE BLOCKS                   C4\nVIOCK6   LH    R0,=H'8368'         BYTES/TRACK ON 3340              C4\n         MR    R10,R0              BYTES/UNIT IN R11                C4\n         LA    R1,4(R1)            SKIP TO SIZE                     C4\n         B     VIOCK8                                               C4\nVIOCK7   LR    R10,R1              SAVE ADDRESS OF START            C4\n         LR    R11,R9              CALCULATE LENGTH OF TRT          C4\n         SR    R11,R10                                              C4\n         EX    R11,TRT7            FIND THE CLOSEST COMMA           C4\n         BCTR  R1,0                                                 C4\n         SR    R1,R10\n         EX    R1,PACKINST         PACK THE BLOCK SIZE              C4\n         CVB   R11,1(R8)           BYTES/UNIT IN R11                C4\n         LA    R1,2(R1,R10)        SKIP TO SIZE                     C4\nVIOCK8   CLI   0(R1),C'('          OPEN PAREN?                      C4\n         BNE   VIOCK9                                               C4\n         LA    R1,1(R1)            SKIP (                           C4\n         TM    0(R1),C'0'                                           C4\n         BNO   RETURNON                                             C4\nVIOCK9   LR    R2,R1               SAVE POINTER TO PRIMARY SPACE    C4\n         LR    R0,R11              SAVE THE VALUE FOR CALCULATIONS  C4\n         LR    R11,R9              SAVE POINTER TO END OF CARD      C4\n         LA    R10,1                                                C4\nVIOCK10  CLI   0(R1),C','          IS THIS THE END OF THE FIELD?    C4\n         BE    VIOCK11                                              C4\n         CLI   0(R1),C')'                                           C4\n         BE    VIOCK11              YES, HANDLE IT                  C4\n         BXLE  R1,R10,VIOCK10       NO, TRY AGAIN                   C4\n         B     RETURNOK             OOPS, JCL ERROR                 C4\nVIOCK11  BCTR  R1,0                NOW CONVERT IT TO NUMERIC        C4\n         SR    R1,R2                                                C4\n         LR    R10,R2                                               C4\n         EX    R1,PACKINST                                          C4\n         CVB   R11,1(R8)           PRIMARY SPACE IN R11             C4\n         LA    R1,1(R1,R10)        POINTER TO NEXT SEPARATOR        C4\n         CLI   0(R1),C')'          IS THERE A SECONDARY ALLOCATION  C4\n         BE    VIOCK14              NO, FORGET IT                   C4\n         LA    R1,1(R1)            NEXT POSITION                    C4\n         CLI   0(R1),C','          SKIPPED SECONDARY                C4\n         BE    VIOCK14                                              C4\n         CLI   0(R1),C'&&'         IS IT SYMBOLIC?                  C4\n         BE    RETURNON                                             C4\n         TM    0(R1),C'0'          IS IT NUMERIC                    C4\n         BNO   RETURNOK                                             C4\n         ST    R11,1(R8)           SAVE NUMBER OF PRIMARY EXTENTS   C4\n         LR    R2,R1               SAVE START OF SECONDARY FIELD    C4\n         LR    R11,R9                                               C4\n         LA    R10,1                                                C4\nVIOCK12  CLI   0(R1),C','          END OF SECONDARY ALLOCATION?     C4\n         BE    VIOCK13                                              C4\n         CLI   0(R1),C')'                                           C4\n         BE    VIOCK13              YES                             C4\n         BXLE  R1,R10,VIOCK12      LOOP UNTIL I FIND SOMETHING      C4\n         B     RETURNOK            OOPS, JCL ERROR                  C4\nVIOCK13  SR    R1,R2               LENGTH OF FIELD                  C4\n         LR    R10,R2                                               C4\n         BCTR  R1,0                                                 C4\n         L     R2,1(R8)            LOAD NUMBER OF SECONDARY EXTENTS C4\n         EX    R1,PACKINST         CONVERT VALUE INTO BINARY        C4\n         CVB   R11,1(R8)                                            C4\n         MH    R11,=H'15'          NUMBER OF SECONDARY EXTENTS      C4\n         AR    R11,R2              TOTAL NUMBER OF EXTENTS          C4\nVIOCK14  MR    R10,R0              TOTAL SIZE OF ALLOCATION         C4\n         C     R11,=F'2097153'     MAXIMUM SIZE OF THE VIO ALLOC    C4\n         BNH   RETURNOK             OK, GET OUT                     C4\n         TM    29(R3),X'01'        IS IT A TSO USERID?              C8\n         BNO   VIOCK15              NO, KILL IT                     C8\n         MVC   0(8,R9),=C'SYSTSODA' ALLOW TSO TO RUN ON SPECIAL PACKC4\n         B     RETURNOK                                             C4\nVIOCK15  MVC   0(3,R9),=C'SYS'      MOVE BATCH BACK TO \"SYSDA\"      C8\n         B     RETURNOK                                             C8\nVI0CHECK MVC   6(3,R1),=C'SYS'     MOVE DATASET TO \"SYSDA\"          C4\n         B     RETURNOK                                             C4\n         SPACE 1                                                    C4\nPACKINST PACK  1(8,R8),0(*-*,R10)                                   C4\n         EJECT\nEXECP    LR    R1,R7               CHECK TIME PARAMETERS\n         LR    R9,R8               SET REG9 TO COL.73\n         SR    R9,R1               SET SEARCH RANGE\n         BNP   EXECP9              BR IF AT THE END OF A CARD\n         EX    R9,TRT2             IS THERE A ' '?\n         BZ    EXECP9              BR IF NO BLANKS\n         LA    R1,1(R1)            GO TO NEXT SEARCH\n         LR    R9,R8\n         SR    R9,R1\n         EX    R9,TRT3              IS THERE A 'E'?\n         BE    EXECP9               BR IF NO E'S\n         BCTR  R1,0                                8.13    650.43\n         CLC   =C' EXEC ',0(R1)     IS IT ' EXEC '?\n         BNE   EXECP9                BR IF NO\n         LA    R1,5(R1)             ADVANCE POINTER AFTER ' EXEC '\n         LR    R10,R1\n         LR    R9,R8\n         SR    R9,R1\n         EX    R9,TRT4              IS THERE A 'P'?\n         BZ    EXECP2               BR IF NO\n         CLC   =C'PGM=',0(R1)       IS IT A 'PGM='?\n         BE    EXECP9                BR IF YES\n         CLC   =C'PROC=',0(R1)      IS IT A 'PROC='?\n         BNE   EXECP2                BR IF NO\n         LA    R1,5(R1)             ADVANCE BEYOND 'PROC='\n         B     EXECP4               GO TO THE SMFWTR\nEXECP2   LR    R1,R10\n         BCTR  R1,0\nEXECP3   CLI   1(R1),C' '           FOLLOWED BY A BLANK?\n         LA    R1,1(R1)\n         BE    EXECP3               BR IF YES\nEXECP4   LR    R10,R1\n         LR    R9,R8\n         SR    R9,R1\n         EX    R9,TRT7              IS THERE A ' '?\n         BZ    EXECP9               BR IF NO\n         SR    R1,R10\n         BNH   EXECP9               BR IF AT THE END OF A CARD?\n         C     R1,=F'8'             IS A REMAINDER LESS THAN 8?\n         BH    EXECP9               BR IF YES\n         LR    R9,R1\n         PRINT NOGEN\n         GETMAIN RU,LV=56,SP=241,LOC=(BELOW,ANY)\n         LR    R11,R1\n         MVC   0(L'SMFHDR,R11),SMFHDR MOVE SMF HEADER TO BUFFER\n         MVC   14(4,R11),16(R3)          SYSTEM ID\n         MVC   18(16,R11),0(R3)          JOBNAME & TIMESTAMP\n         MVC   34(8,R11),20(R3)          USER ID\n         MVC   42(8,R11),=CL8' '         BLANKS\n         EX    R9,MVCPROC                PROC NAME\n         TIME  BIN\n         STM   R0,R1,6(R11)\n         SMFWTM (R11)\n         FREEMAIN RU,LV=56,A=(R11),SP=241\nEXECP9   LR    R1,R7\n         B     RETURNOK            GO BACK\n         SPACE 3\nMVCINTR  MVC   0(*-*,R1),INTRDR\nMVCPROC  MVC   42(*-*,R11),0(R10)\nTRT2     TRT   0(*-*,R1),TRTB2\nTRT3     TRT   0(*-*,R1),TRTB3\nTRT4     TRT   0(*-*,R1),TRTB4\nTRT6     TRT   0(*-*,R1),TRTB6\nTRT7     TRT   0(*-*,R1),TRTB7\n         SPACE 2\nRETURNOK XR    R15,R15                 CLEAR R15 TO CONTINUE PROCESS\n         B     RETURN                  RETURN\n         SPACE 1\nRETURNON LA    R15,4                     SET 4 IN REG15\nRETURN   L     R14,12(R13)\n         LM    R0,R12,20(R13)\n         BR    R14\n         SPACE 1\n         LTORG\n         EJECT\n*    TRANSLATE TABLES\nTRTB2    DC    32X'0000'\n         DC    C' '\nTRTB4    DC    X'000000'\n         DC    53X'00000000'\n         DC    C'P'              C'P' = X'D7'\nTRTB5    DC    X'000000'\n         DC    56X'00000000'\n         DC    C'T'                  C 'T' = X'E3'\nTRTB6    DC    X'000000'\n         DC    56X'00000000'\n         DC    X'00'\n         DC    C'U'                  C 'U' = X'E4'\nTRTB3    DC    X'0000'\n         DC    48X'00000000'\n         DC    X'000000'\n         DC    C'E'                  C'E' = X'C5'\nTRTB7    DC    16X'00000000'\n         DC    C' '                  C' ' = X'4-'\n         DC    X'000000'\n         DC    9X'00000000'\n         DC    X'000000'\n         DC    C','                  C',' = X'6B'\n         DC    37X'00000000'\n*\n         DC    64X'00'                                              C1\nTRTBM    EQU   *-212                                                C1\n         DC    C'M'                                                 C1\n         DC    43X'00'                                              C1\nINTRDR   DC    CL72'SYSOUT=(A,INTRDR),DCB=(RECFM=F,BLKSIZE=80)'\nSMFHDR   DC    X'003200000283'\nUNITINTR DC    C'UNIT=INTRDR'\nUNITVIO  DC    C'UNIT=VIO'\nUNITVIO1 DC    C'UNIT=(VIO'\nVIOALLOC DC    C'UNIT=VIOALLOC'\n*                                                                    C1\nMSVGP    DC    C'MSVGP='                                             C1\nGDGDA1   DC    C'GDGDA1'                                             C1\nGDGDA2   DC    C'GDGDA2'                                             C2\n*   NOTE: ENSURE THAT THE REPLACEMENT CARDS WILL NOT BE IN CC 72...  C2\n*         ...IF THE REPLACEMENT OPERAND STARTS IN CC 16.             C2\nCGDGDA1  DC  C'UNIT=(GDGCYL,1),SPACE=(23476,240,RLSE)        **REPLD**'\nCGDGDA2  DC  C'UNIT=(GDGCYL,1),SPACE=(TRK,(300,15),RLSE) *REPLACED*' C5\n         PRINT NOGEN\n         REGEQU\n         END   USERUJV1\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT067/FILE067.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT067", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}