*---------------------------------------------------------------------*
*  Copyright 2011 by Clemson University Research Foundation           *
*                                                                     *
*  Licensed under the Apache License, Version 2.0 (the "License");    *
*  you may not use this file except in compliance with the License.   *
*  You may obtain a copy of the License in this library as member     *
*  $LICENSE, or from                                                  *
*                                                                     *
*      http://www.apache.org/licenses/LICENSE-2.0                     *
*                                                                     *
*  Unless required by applicable law or agreed to in writing,         *
*  software distributed under the License is distributed on an "AS    *
*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either    *
*  express or implied.  See the License for the specific language     *
*  governing permissions and limitations under the License.           *
*---------------------------------------------------------------------*
 TITLE 'SRVESMAC: Environment Support Service Processor Symbols && Macr+
               os.'
*---------------------------------------------------------------------*
*
*  Copy File:  SRVESMAC
*
*  Purpose:    Environment Support service processor symbols & macros.
*
*  Description: See "Service Processors User's Guide and Reference".
*
*  Change
*  History   2011/10/20 JCB - Patch rollup for CBT tape distribution
*
*---------------------------------------------------------------------*
***********************************************************************
***********************************************************************
**                                                                   **
**                     Symbol Definitions                            **
**                                                                   **
***********************************************************************
***********************************************************************
*
* Global declarations for all symbols defined here.
*
  GBLA &START,&TERMINATE,&SUCCESSFUL
  GBLC &ENVIRONMENT_SUPPORT,&MVS_ENVIRONMENT_SUPPORT
  GBLC &ES_MVS_MESSAGE_EXIT
  GBLA &ES_START,&ES_TERMINATE,&ES_OBTAIN_STORAGE
  GBLA &ES_RELEASE_STORAGE,&ES_LOAD_MODULE,&ES_UNLOAD_MODULE
  GBLA &ES_DISPLAY_MESSAGE,&ES_SAVE_DEBUG_INFO,&ES_DISPLAY_DEBUG_INFO
  GBLA &ES_DISPLAY_DEBUG_INFO_AND_ABEND,&ES_CLEAR_DEBUG_INFO
  GBLA &ES_GET_USERID,&ES_GET_GROUP,&ES_GET_CACCT
  GBLA &ES_GET_SYSRES_VOLUME_NAME,&ES_GET_TERMINAL_NAME
  GBLA &ES_GET_JOBCARD_NAME_FIELD,&ES_GET_JOBCARD_ROOM
  GBLA &ES_GET_TSU_STC_OR_JOB,&ES_GET_JOBID
  GBLA &ES_GET_DEFAULT_DESTINATION,&ES_GET_PREFIX,&ES_GET_TIME
  GBLA &ES_GET_GMT_TIME
  GBLA &ES_GET_FORMATTED_TIME
  GBLA &ES_SUCCESS,&ES_SUCCESSFUL
  GBLA &ES_MISSING_EXIT_ROUTINE,&ES_INTERNAL_ERROR
  GBLA &ES_INVALID_FUNCTION
  GBLA &ES_COULD_NOT_LOCATE,&ES_INVALID_BOUNDARY,&ES_INVALID_LOCATION
  GBLA &ES_INVALID_ACTION,&ES_CLEAR_DEBUG_INHIBITED
  GBLA &ES_STORAGE_NOT_AVAILABLE,&ES_STORAGE_NOT_RELEASED
  GBLA &ES_UNDETERMINED,&ES_MODULE_NOT_LOADED,&ES_MODULE_NOT_UNLOADED
  GBLA &ES_DOUBLEWORD_BOUNDARY,&ES_PAGE_BOUNDARY,&ES_LOCATION_ANY
  GBLA &ES_LOCATION_BELOW,&ES_DEBUG_ID_GDI,&ES_DEBUG_ID_TEXT
  GBLA &ES_DEBUG_ID_HEX
  GBLA &ES_LM_STANDARD,&ES_LM_MNT_ONLY,&ES_LM_NO_LOAD
  GBLA &ES_CDI_EXECUTE,&ES_CDI_INHIBIT,&ES_CDI_ENABLE
  GBLA &ES_OC_MNT,&ES_OC_STDMNT,&ES_OC_NOSTDMNT
*
* Common function codes for *all* service processors.
*
&START                                  SETA 1
&TERMINATE                              SETA 2
*
* Common return codes for *all* service processors.
*
&SUCCESS                                SETA 0
&SUCCESSFUL                             SETA &SUCCESSFUL
*
* Entry point names for all Environment Support service processors.
*
&ENVIRONMENT_SUPPORT      SETC '''SRVES   '''  Generic Env. Support.
&MVS_ENVIRONMENT_SUPPORT  SETC '''SRVESMVS'''  MVS Environment Support.
&ES_MVS_MESSAGE_EXIT      SETC '''SRVESX01'''  Message exit module.
*
* Function codes for Environment Support:
*
&ES_START                               SETA  &START
&ES_TERMINATE                           SETA  &TERMINATE
&ES_OBTAIN_STORAGE                      SETA  3
&ES_RELEASE_STORAGE                     SETA  4
&ES_LOAD_MODULE                         SETA  5
&ES_UNLOAD_MODULE                       SETA  6
&ES_DISPLAY_MESSAGE                     SETA  7
&ES_SAVE_DEBUG_INFO                     SETA  8
&ES_DISPLAY_DEBUG_INFO                  SETA  9
&ES_DISPLAY_DEBUG_INFO_AND_ABEND        SETA 10
&ES_CLEAR_DEBUG_INFO                    SETA 11
&ES_GET_USERID                          SETA 12
&ES_GET_GROUP                           SETA 13
&ES_GET_CACCT                           SETA 14
&ES_GET_SYSRES_VOLUME_NAME              SETA 15
&ES_GET_TERMINAL_NAME                   SETA 16
&ES_GET_JOBCARD_NAME_FIELD              SETA 17
&ES_GET_JOBCARD_ROOM                    SETA 18
&ES_GET_TSU_STC_OR_JOB                  SETA 19
&ES_GET_JOBID                           SETA 20
&ES_GET_DEFAULT_DESTINATION             SETA 21
&ES_GET_PREFIX                          SETA 22
&ES_GET_TIME                            SETA 23
&ES_GET_FORMATTED_TIME                  SETA 24
&ES_GET_GMT_TIME                        SETA 25
*
* Return codes from Environment Support.
*
&ES_SUCCESS                             SETA  0
&ES_SUCCESSFUL                          SETA  &ES_SUCCESS
&ES_MISSING_EXIT_ROUTINE                SETA  1
&ES_INTERNAL_ERROR                      SETA  2
&ES_INVALID_FUNCTION                    SETA  4
&ES_COULD_NOT_LOCATE                    SETA  8
&ES_INVALID_BOUNDARY                    SETA 12
&ES_INVALID_LOCATION                    SETA 16
&ES_INVALID_ACTION                      SETA 17
&ES_CLEAR_DEBUG_INHIBITED               SETA 18
&ES_STORAGE_NOT_AVAILABLE               SETA 20
&ES_STORAGE_NOT_RELEASED                SETA 24
&ES_UNDETERMINED                        SETA 28
&ES_MODULE_NOT_LOADED                   SETA 32
&ES_MODULE_NOT_UNLOADED                 SETA 36
&ES_WRONG_NUMBER_OF_PARMS               SETA 40
    DEFUCOND MACRO=SRV##RC,NAME=SUCCESS
    DEFUCOND MACRO=SRV##RC,NAME=ES_SUCCESS
    DEFUCOND MACRO=SRV##RC,NAME=ES_SUCCESSFUL
    DEFUCOND MACRO=SRV##RC,NAME=ES_MISSING_EXIT_ROUTINE
    DEFUCOND MACRO=SRV##RC,NAME=ES_INTERNAL_ERROR
    DEFUCOND MACRO=SRV##RC,NAME=ES_INVALID_FUNCTION
    DEFUCOND MACRO=SRV##RC,NAME=ES_COULD_NOT_LOCATE
    DEFUCOND MACRO=SRV##RC,NAME=ES_INVALID_BOUNDARY
    DEFUCOND MACRO=SRV##RC,NAME=ES_INVALID_LOCATION
    DEFUCOND MACRO=SRV##RC,NAME=ES_INVALID_ACTION
    DEFUCOND MACRO=SRV##RC,NAME=ES_CLEAR_DEBUG_INHIBITED
    DEFUCOND MACRO=SRV##RC,NAME=ES_STORAGE_NOT_AVAILABLE
    DEFUCOND MACRO=SRV##RC,NAME=ES_STORAGE_NOT_RELEASED
    DEFUCOND MACRO=SRV##RC,NAME=ES_UNDETERMINED
    DEFUCOND MACRO=SRV##RC,NAME=ES_MODULE_NOT_LOADED
    DEFUCOND MACRO=SRV##RC,NAME=ES_MODULE_NOT_UNLOADED
    DEFUCOND MACRO=SRV##RC,NAME=ES_WRONG_NUMBER_OF_PARMS
*
* Search criteria for ES_LOAD_MODULE function.
*
&ES_LM_STANDARD                         SETA 1  *default*
&ES_LM_MNT_ONLY                         SETA 2  Only if named in MNT.
&ES_LM_NO_LOAD                          SETA 3  Do not load.
*
* Storage boundaries for the &ES_OBTAIN_STORAGE function.
*
&ES_DOUBLEWORD_BOUNDARY                 SETA 1
&ES_PAGE_BOUNDARY                       SETA 2
*
* Storage locations for the &ES_OBTAIN_STORAGE function.
*
&ES_LOCATION_ANY                        SETA 1
&ES_LOCATION_BELOW                      SETA 2
*
* Debug identifiers for various DEBUG functions.
*
&ES_DEBUG_ID_GDI                        SETA 1
&ES_DEBUG_ID_TEXT                       SETA 2
&ES_DEBUG_ID_HEX                        SETA 3
*
* Action-codes for ES_CLEAR_DEBUG_INFO function.
*
&ES_CDI_EXECUTE                         SETA 1
&ES_CDI_INHIBIT                         SETA 2
&ES_CDI_ENABLE                          SETA 3
*---------------------------------------------------------------------*
* The symbols below define exit-specific function codes.              *
*---------------------------------------------------------------------*
 GBLA &ES_X01_ISSUE_MESSAGE
*
* Exit-specific function codes.
*
&ES_X01_ISSUE_MESSAGE       SETA          3
*
* Option codes used during START to indicate how the file will be used.
*
*                            |-BYTE  1-|
&ES_OC_MNT          SETA 128 |X... ....|Bit-mask for STDMNT:
&ES_OC_STDMNT       SETA   0 |0... ....|  Standard MNT.
&ES_OC_NOSTDMNT     SETA 128 |1... ....|  No Standard MNT.
&ES_OC_RESERVED     SETA   0 |.000 0000|Reserved bits.
                            EJECT
***********************************************************************
***********************************************************************
**                                                                   **
**                     Macro Definitions                             **
**                                                                   **
***********************************************************************
***********************************************************************
*---------------------------------------------------------------------*
*                                                                     *
*  Macro:      ES_ESV                                                 *
*  Purpose:    This macro is used to map the Environment Support      *
*              Vector.                                                *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
&TAG     ES_ESV &DSECT=YES,&PREFIX=ESV
         LCLC  &I,&NAME
&I       SETC  '&PREFIX'
&NAME    SETC  '&PREFIX'
         AIF   ('&TAG' EQ '').NOTAG
&NAME    SETC  '&TAG'
.NOTAG   ANOP
         AIF ('&DSECT' EQ 'NO').NODSECT
&NAME    DSECT
         AGO .TG1
.NODSECT ANOP
&NAME    DS    0F
.TG1     ANOP
&I.ID    DS    CL4         CONTROL BLOCK ID
&I.IDT   EQU   C'ESV '     CONTROL BLOCK ID TEXT
&I.LEN   DS    H           LENGTH OF ESV
&I.VER   DS    X           VERSION
&I.REL   DS    X           RELEASE
*---------------------------------------------------------------------*
*  The following ten (10) fields are addressed with hardcoded
*  displacements by Structured Macros ##PEOS and ##PPOS.
*---------------------------------------------------------------------*
&I.ALGET     DS  A      +8 Address of linkage GETMAIN                 |
&I.ULGET     DS  A     +12 User parameter for linkage GETMAIN         |
&I.ALFRE     DS  A     +16 Address of linkage FREEMAIN                |
&I.ULFRE     DS  A     +20 User parameter for linkage FREEMAIN        |
&I.ESEPA     DS  A     +24 Environment support EPA address            |
&I.ESTKN     DS  A     +28 Environment support TOKEN                  |
&I.DBBTM     DS  A     +32 Bottom of stack                            |
&I.DBTOP     DS  A     +36 Top of stack                               |
&I.DBLMT     DS  A     +40 Limit address of stack                     |
&I.DBINHIBIT DS  X     +44 ClearDebug Inhibit Count (0 if auto-clear) |
*---------------------------------------------------------------------*
         DS    3X          Reserved for future expansion; must-be-zeros
         DS    8F          Reserved for future expansion; must-be-zeros
         SPACE
&I.CBLEN EQU   *-&NAME     Length of ESV.
         MEND
*---------------------------------------------------------------------*
*                                                                     *
*  Macro:      ES_GDI                                                 *
*  Purpose:    This macro is used to map the General Debugging        *
*              Information data area that is passed to the            *
*              ES_SAVE_DEBUG_INFO function.                           *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
&TAG     ES_GDI &DSECT=YES,&PREFIX=GDI
         LCLC  &I,&NAME
&I       SETC  '&PREFIX'
&NAME    SETC  '&PREFIX'
         AIF   ('&TAG' EQ '').NOTAG
&NAME    SETC  '&TAG'
.NOTAG   ANOP
         AIF ('&DSECT' EQ 'NO').NODSECT
&NAME    DSECT
         AGO .TG1
.NODSECT ANOP
&NAME    DS    0F
.TG1     ANOP
         SPACE 1
*---------------------------------------------------------------------*
*                                                                     *
* General Debugging Information area                                  *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
&I.MODID DS    A        | Address of module ID.
&I.OFFST DS    H        | Offset of error.
&I.RC    DS    H        | Return code.
&I.REGS  DS    16F      | Registers at time of error.
         DS    0F       | Round GDI up to a fullword length.
&I.CBLEN EQU   *-&NAME  | Length of GDI.
         MEND
*---------------------------------------------------------------------*
*                                                                     *
*  Macro:      ES_MNT                                                 *
*  Purpose:    This macro is used to map the Environment Support      *
*              Module Name Table.                                     *
*                                                                     *
*---------------------------------------------------------------------*
             MACRO
&LABEL       ES_MNT &DSECT=YES,&ID=ES_MNT
             LCLC  &I,&NAME
&I           SETC  '&ID'
&NAME        SETC  '&ID'
             AIF   ('&LABEL' EQ '').NOLABEL
&NAME        SETC  '&LABEL'
.NOLABEL     ANOP
             AIF ('&DSECT' EQ 'NO').NODSECT
&NAME        DSECT                | Module Name Table Mapping:
             AGO .GEN_FIELDS
.NODSECT     ANOP
&NAME        DS  0F               | Module Name Table Mapping:
.GEN_FIELDS  ANOP
&I.NAME      DS  CL8              |   Module's Generic Name.
&I.TRUENAME  DS  CL8              |   Module's True Name.
&I.END       EQU X'00'            |   End-of-MNT Marker value.
&I.EPA       DS  A                |   Module's EPA or zero (for LOAD).
&I.CBLEN     EQU *-&NAME          | Length of Module Name Table.
             MEND
*---------------------------------------------------------------------*
*                                                                     *
*  Macro:      ES_MODULE_NAME                                         *
*  Purpose:    This macro is used to create entries in an Environment *
*              Support Module Name Table.                             *
*  Note:       NAME= and TRUENAME= must be given as quoted strings.   *
*              If TRUENAME= is not specified, it will be set to NAME. *
*              DCAMODE=31 indicate that high bit of adcon should be   *
*              set to 1.                                              *
*                                                                     *
*---------------------------------------------------------------------*
                  MACRO
&LABEL            ES_MODULE_NAME &TYPE,&NAME=,&TRUENAME=,              +
               &DCAMODE=,&WXTRN=
                  LCLC  &L_WXTRN,&L_TRUE
.*
.* Generate a TYPE = START entry.
.*
                  AIF   ('&TYPE' NE 'START').END
                  AIF   ('&NAME' EQ '').NAME_MISSING
                  AIF   ('&NAME'(1,1) NE '''').NAME_NOT_QUOTED
&LABEL            DS    0F              | Start of Module Name Table:
                  DC    A(MNT&SYSNDX.1) |   Address of first entry.
                  DC    CL8&NAME        |   This module's name.
                  DC    CL8'&SYSDATE'   |   Compile date.
                  DC    CL6'&SYSTIME'   |   Compile time.
MNT&SYSNDX.1      DS    0F              |   End of prefix data.
                  MEXIT
.*
.* Generate a TYPE = END entry.
.*
.END              AIF   ('&TYPE' NE 'END').ENTRY
&LABEL            DC    X'00'           | End of Module Name Table.
                  MEXIT
.*
.* Generate a module name entry.
.*
.ENTRY            AIF   ('&TYPE' NE '').TYPE_ERROR
                  AIF   ('&NAME' EQ '').NAME_MISSING
                  AIF   ('&NAME'(1,1) NE '''').NAME_NOT_QUOTED
&L_TRUE           SETC  '&TRUENAME'
                  AIF   ('&L_TRUE' EQ '').USE_NAME
                  AIF   ('&L_TRUE'(1,1) NE '''').TRUE_NOT_QUOTED
                  AGO   .GOT_TRUE
.USE_NAME         ANOP
&L_TRUE           SETC  '&NAME'
.GOT_TRUE         ANOP
                  AIF   ('&WXTRN' EQ '').USE_TRUE
                  AIF   ('&WXTRN'(1,1) NE '''').WXTRN_NOT_QUOTED
&L_WXTRN          SETC  '&WXTRN'
                  AGO   .REMOVE_WXTRN_QUOTES
.USE_TRUE         ANOP
&L_WXTRN          SETC  '&L_TRUE'
.REMOVE_WXTRN_QUOTES ANOP
&L_WXTRN          SETC  '&L_WXTRN'(2,K'&L_WXTRN-2)
.SYM_LOOP         AIF   ('&L_WXTRN' EQ '').SYM_NULL
                  AIF   ('&L_WXTRN'(K'&L_WXTRN,1) NE ' ').PAST_SYM
&L_WXTRN          SETC  '&L_WXTRN'(1,K'&L_WXTRN-1)
                  AGO   .SYM_LOOP
.PAST_SYM         ANOP
&LABEL            DC    CL8&NAME.       |   Module's Generic Name.
                  DC    CL8&L_TRUE.     |   Module's True Name.
                  AIF   (D'&L_WXTRN).ADCON
                  WXTRN &L_WXTRN        |   Define as weak-external.
                  AIF   ('&DCAMODE' EQ '').ADCON
                  AIF   ('&DCAMODE' EQ '24').ADCON
                  AIF   ('&DCAMODE' NE '31').BAD_DCAMODE
&L_WXTRN          SETC  'X''80000000''+&L_WXTRN'
.ADCON            DC    A(&L_WXTRN)     |   Module's EPA.
                  MEXIT
.TYPE_ERROR       MNOTE 8,'INVALID TYPE &TYPE'
                  MEXIT
.NAME_MISSING     MNOTE 8,'NAME= must be specified.'
                  MEXIT
.NAME_NOT_QUOTED  MNOTE 8,'NAME must be a quoted string.'
                  MEXIT
.TRUE_NOT_QUOTED  MNOTE 8,'TRUENAME must be a quoted string.'
                  MEXIT
.WXTRN_NOT_QUOTED MNOTE 8,'WXTRN must be a quoted string.'
                  MEXIT
.SYM_NULL         MNOTE 8,'TRUENAME= or NAME= is null.'
                  MEXIT
.BAD_DCAMODE      MNOTE 8,'DCAMODE=&DCAMODE is not valid.'
                  MEND
                  MACRO
*---------------------------------------------------------------------*
*
*  MACRO:      ES_DBI
*
*  TITLE:      DeBug Info Mapping Macro
*
*  PURPOSE:    This macro maps a debug info entry.
*
*  SPECIAL     The entries mapped by this macro are used in
*  NOTES:      conjunction with the &es_save_debug_info function
*              of an Environment Support service processor.
*
*  CHANGE
*  HISTORY:    05/13/87 MGG - New
*
*---------------------------------------------------------------------*
&TAG     ES_DBI &DSECT=YES,&ID=DBI
         LCLC  &I,&NAME
         GBLA  &ES_DEBUG_ID_GDI,&ES_DEBUG_ID_TEXT,&ES_DEBUG_ID_HEX
&I       SETC  '&ID'
&NAME    SETC  '&ID'
         AIF   ('&TAG' EQ '').NOTAG
&NAME    SETC  '&TAG'
.NOTAG   ANOP
         AIF ('&DSECT' EQ 'NO').NODSECT
&NAME    DSECT
         AGO .TG1
.NODSECT ANOP
&NAME    DS    0F
.TG1     ANOP
         SPACE 1
         SPACE 1                      |
&I.LEN   DS    H                      | Length of entry.
&I.TY    DS    X                      | Type of entry.
&I.TYGDI EQU   &ES_DEBUG_ID_GDI       |  General debug information.
&I.TYTXT EQU   &ES_DEBUG_ID_TEXT      |  Text.
&I.TYHEX EQU   &ES_DEBUG_ID_HEX       |  Hex information.
&I.VAR   EQU   *                      | Variable information.
         SPACE 1                      |
* Type 1 Debug Info - General Debug Info.
         ORG   &I.VAR                 |
&I.1OFST DS    H                      | Offset of error.
&I.1RC   DS    H                      | Return code.
&I.1REGS DS    XL(16*4)               | Registers at time of error.
&I.1FLEN EQU   *-&I                   | Length of fixed part
&I.1MODI EQU   *                      | (variable) module id.
         SPACE 1                      |
* Type 2 Debug Info - Reason Information.
         ORG   &I.VAR                 |
&I.2     EQU   *                      | (variable) Reason information.
         SPACE 1                      |
* Type 3 Debug Info - Text.           |
*     The debug information is a one byte length followed by name
*     followed by another one byte length followed by the text.
         ORG   &I.VAR                 |
&I.3     EQU   *                      | Variable info described above.
         SPACE 1                      |
* Type 4 Debug Info - Hex.            |
*     The debug information is a one byte length followed by name
*     followed by another one byte length followed by the hex.
         ORG   &I.VAR                 |
&I.4     EQU   *                      | Variable info described above.
         SPACE 1                      |
         DS    0F                     |
         SPACE 1                      |
&I.CBLEN EQU   *-&NAME                | Length of DBI.
         MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_ID                                                      *
*                                                                     *
* Purpose: Establish default values for a specific service processor  *
*          and associate them with the specified ID name. The values  *
*          are stored in the following created global variables:      *
*                                                                     *
* Variable Name                     Description                       *
* -------------  ---------------------------------------------------- *
* #$&ID.$#IDMAC  Name of macro that created the ID: ES_ID.            *
* #$&ID.$#ESID   Service processor's Environment Support ID.          *
* #$&ID.$#ESVA   Tag for ESVA Kept for Environment Support ID's only. *
* #$&ID.$#EPN    Tag for Service processor's Entry Point Name.        *
* #$&ID.$#EPA    Tag for Service processor's Entry Point Address.     *
* #$&ID.$#TKN    Tag for Service processor's Entry Point Token.       *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_ID &ID=,&ESVA=,&SPEPNAME=,&SPEPA=,&SPTOKEN=
         GBLC  &PWA,&PSD,&DEFAULT_ENVIRONMENT_SUPPORT_ID
         LCLC  &V_ESVA
         LCLB  &GEN_PWA
.*
.* Invoke SRV##ID to create globals used by all ID's.
.*
         SRV##ID SET,                                                  +
               ID=&ID.,IDMAC=ES_ID,ESID=&ID.,SPEPNAME=&SPEPNAME,       +
               SPEPA=&SPEPA,SPTOKEN=&SPTOKEN.
.*
.* Create the global variables specific to environment support's ID.
.*
&V_ESVA   SETC '#$&ID.$#ESVA'      ESVA tag's variable name.
          GBLC  &(&V_ESVA)         Create ESVA tag's variable.
&(&V_ESVA) SETC '&ESVA'            Remember the specified ESVA.
.*
.* If this is the first Environment Support ID, make it the default.
.*
          AIF   ('&DEFAULT_ENVIRONMENT_SUPPORT_ID' NE '').ID_DEF
&DEFAULT_ENVIRONMENT_SUPPORT_ID SETC '&ID'    ESID to use by default.
.ID_DEF   MNOTE *,'Default environment support ID is &DEFAULT_ENVIRONME+
               NT_SUPPORT_ID..'
.*
.* Generate PWA fields for those values that are defaulting.
.*
&GEN_PWA  SETB (&GEN_PWA OR ('&ESVA' EQ ''))
          AIF  (NOT &GEN_PWA).NO_PWA
          PWA   TYPE=PARTIAL    | Generate fields for Env. Sup.
.*        AIF   ('&ESVA' NE '').ENDPWA
&(&V_ESVA) SETC '&PWA.&ID._ESVA'
&(&V_ESVA) DS   A               |   Environment Support's ESV Address.
.ENDPWA   ENDPWA ,              | End of generated PWA fields.
.NO_PWA   ANOP
          MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_MVS_LOAD                                                *
* Purpose: Generate MVS code to load an environment support module.   *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_MVS_LOAD &ID=,&SPEPNAME=,&SPEPA=
         GBLC  &MVS_ENVIRONMENT_SUPPORT
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
.*
.* Obtain service processor ID values and generate an MVS load instr.
.*
         SRV##ID GET,REQUIRED=(SPEPA),                                 +
               ID=&ID,IDMAC=(ES_ID),SPEPNAME=&SPEPNAME,                +
               SPEPA=&SPEPA
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         AIF  ('&#_IDEPN' NE '').GOTEPN
&#_IDEPN SETC '&MVS_ENVIRONMENT_SUPPORT' This macro is MVS anyways.
.GOTEPN  AIF  ('&#_IDEPN'(1,1) NE '''').LOAD
&#_IDEPN SETC '=CL8&#_IDEPN'              | Use literal for EPLOC.
.LOAD    LOAD EPLOC=&#_IDEPN              |  Load Env. Support.
         ST   R0,&#_IDEPA                 | Save its EPA.
         MEXIT
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_MVS_UNLOAD                                              *
* Purpose: Generate MVS code to unload a module.                      *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_MVS_UNLOAD &ID=,&SPEPNAME=,&SPEPA=
         GBLC  &MVS_ENVIRONMENT_SUPPORT
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
.*
.* Obtain service processor ID values and generate an MVS delete instr.
.*
         SRV##ID GET,REQUIRED=(SPEPA),                                 +
               ID=&ID,IDMAC=(ES_ID),SPEPNAME=&SPEPNAME,                +
               SPEPA=&SPEPA
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         AIF  ('&#_IDEPN' NE '').GOTEPN
&#_IDEPN SETC '&MVS_ENVIRONMENT_SUPPORT' This macro is MVS anyways.
.GOTEPN  AIF  ('&#_IDEPN'(1,1) NE '''').LOAD
&#_IDEPN SETC   '=CL8&#_IDEPN'             | Use literal for EPLOC.
.LOAD    DELETE EPLOC=&#_IDEPN             | Delete specified module.
         XC     &#_IDEPA,&#_IDEPA          | Clear its EPA.
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_START                                                   *
* Purpose: Generate code to start a new environment support session.  *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_START &ID=,&SPEPA=,&SPTOKEN=,&ESVA=,&MNT=,&EXITINFO=,      +
               &OPTIONS=,&OPTIONVALUE=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_START                  SETC in open code.
         GBLA  &ES_OC_MNT,&ES_OC_STDMNT,&ES_OC_NOSTDMNT
         LCLA  &I,&J,
         LCLC  &O_NAME(2)                 Option names, paired up.
         LCLB  &O_SET(2)                  Names specified, paired up.
         LCLA  &O_VALUE,&O2_VALUE,&O3_VALUE,&O4_VALUE
.*
.* Obtain service processor ID values and start environment support.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN,ESVA),                    +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,                      +
               SPTOKEN=&SPTOKEN,ESVA=&ESVA.
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         MVC   &#_IDTKN,=F'0'            | Insure TOKEN = 0.
.*
.* Generate the OPTIONS parameter for ES_START.
.*
.*   The symbols in O_NAME are option keywords that may be specified.
.*
.*
               AIF  ('&OPTIONS' NE '').OPT_KWDS
&L_OPTIONS     SETC '&OPTIONVALUE'
               AGO  .PAST_OPTIONS
.OPT_KWDS      ANOP
&O_NAME(1)     SETC 'STDMNT','NOSTDMNT'
.*                  1 2 3 4 5 6 7 8 9 + 1 2 3 4 5 6 7 8 9
&O_SET(1)      SETB 0,0
&I             SETA 0
.O_KWD_LOOP    AIF  (&I GE N'&OPTIONS).PAST_OPT
&I             SETA &I+1
&J             SETA 1
.O_NAME_LOOP   AIF  (&J GT N'&O_NAME).PAST_NAME
               AIF  ('&OPTIONS(&I)' EQ '&O_NAME(&J)').PAST_NAME
&J             SETA &J+1
               AGO  .O_NAME_LOOP
.PAST_NAME     AIF   (&J LE N'&O_NAME).O_CHK_SET
               MNOTE 8,'Option &OPTIONS(&I) is invalid.'
               AGO   .O_KWD_LOOP
.O_CHK_SET     AIF   (NOT (&O_SET(&J))).O_SET_OPT
               MNOTE 8,'Option &OPTIONS(&I) already specified.'
               AGO   .O_KWD_LOOP
.O_SET_OPT     ANOP
&O_SET(&J)     SETB  1
               AGO   .O_KWD_LOOP
.PAST_OPT      ANOP
.*
.* Check for mutually exclusive keywords and other invalid combos.
.*
&L_OPTIONS SETC  'STDMNT and NOSTDMNT'
           AIF   (&O_SET(1) AND &O_SET(2)).MUTEX  (STDMNT NOSTDMNT)
           AGO   .PAST_MUTEX
.MUTEX     MNOTE 8,'Options &L_OPTIONS are mutually exclusive'
.PAST_MUTEX ANOP
.*
.* Build the option-bytes that will be used.
.*
&O_VALUE       SETA  0
&O2_VALUE      SETA  0
&O3_VALUE      SETA  0
&O4_VALUE      SETA  0
&O_VALUE       SETA  &O_VALUE+(&O_SET(1)*(&ES_OC_STDMNT))
&O_VALUE       SETA  &O_VALUE+(&O_SET(2)*(&ES_OC_NOSTDMNT))
&L_OPTIONS     SETC  '=AL1(&O_VALUE,&O2_VALUE,&O3_VALUE,&O4_VALUE)'
               AGO   .PAST_OPTIONS
.PAST_OPTIONS  ANOP
         ##PLIST START
         ##PLIST PARM,&#_IDTKN,&ES_START,&#_IDESVA
         AIF     ('&L_OPTIONS' NE '').OPTPRM
         AIF     ('&EXITINFO' NE '').XIPRM
         AIF     ('&MNT'      EQ '').CALLX
         ##PLIST PARM,&MNT
         AGO     .CALLX
.XIPRM   ##PLIST PARM,&MNT,&EXITINFO
         AGO     .CALLX
.OPTPRM  ##PLIST PARM,&MNT,&EXITINFO,&L_OPTIONS
.NO_OPTIONS ANOP
.CALLX   ##PLIST END,VL
         CALLX   &#_IDEPA                | Invoke Environment Support.
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_TERMINATE                                               *
* Purpose: Generate code to terminate an environment support session. *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_TERMINATE &ID=,&SPEPA=,&SPTOKEN=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_TERMINATE              SETC in open code.
.*
.* Obtain service processor ID values and terminate env. sup.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         CALLX &#_IDEPA,(&#_IDTKN,&ES_TERMINATE),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_OBTAIN_STORAGE                                          *
* Purpose: Generate code to obtain a new piece of storage.            *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_OBTAIN_STORAGE &ID=,&SPEPA=,&SPTOKEN=,                     +
               &SIZE=,&SUBPOOL=,&BOUNDARY=,&LOCATION=,&ADDRESS=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_OBTAIN_STORAGE
         GBLA  &ES_DOUBLEWORD_BOUNDARY,&ES_PAGE_BOUNDARY
         GBLA  &ES_LOCATION_ANY,&ES_LOCATION_BELOW
         LCLC  &L_SUBPOOL,&L_BOUNDARY,&L_LOCATION
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Check for the presence of required keywords.
.*
         AIF   (T'&SIZE NE 'O').SIZE_PR
         MNOTE 8,'SIZE is a required keyword.'
         MEXIT
.SIZE_PR AIF   (T'&ADDRESS NE 'O').ADDR_PR
         MNOTE 8,'ADDRESS is a required keyword.'
         MEXIT
.ADDR_PR ANOP
.*
.* Set up parameters for SUBPOOL, BOUNDARY, and LOCATION keywords.
.*
&L_SUBPOOL    SETC '&SUBPOOL'
              AIF ('&SUBPOOL' NE '').PAST_SP
&L_SUBPOOL    SETC '0'
.PAST_SP      ANOP
              AIF ('&BOUNDARY' EQ '').BOUND_DOUBLE
              AIF ('&BOUNDARY' EQ 'DOUBLEWORD').BOUND_DOUBLE
              AIF ('&BOUNDARY' EQ 'PAGE').BOUND_PAGE
              MNOTE 8,'BOUNDARY must be either DOUBLEWORD or PAGE.'
              MEXIT
.BOUND_DOUBLE ANOP
&L_BOUNDARY   SETC '&ES_DOUBLEWORD_BOUNDARY'
              AGO  .PAST_BOUND
.BOUND_PAGE   ANOP
&L_BOUNDARY   SETC '&ES_PAGE_BOUNDARY'
.PAST_BOUND   ANOP
              AIF ('&LOCATION' EQ '').LOC_ANY
              AIF ('&LOCATION' EQ 'ANY').LOC_ANY
              AIF ('&LOCATION' EQ 'BELOW').LOC_BELOW
              MNOTE 8,'LOCATION must be either ANY or BELOW.'
              MEXIT
.LOC_ANY      ANOP
&L_LOCATION   SETC '&ES_LOCATION_ANY'
              AGO  .PAST_LOC
.LOC_BELOW    ANOP
&L_LOCATION   SETC '&ES_LOCATION_BELOW'
.PAST_LOC    ANOP
.*
.* Generate the CALLX to obtain storage.
.*
         CALLX &#_IDEPA,(&#_IDTKN,&ES_OBTAIN_STORAGE,&SIZE,            +
               &L_SUBPOOL,&L_BOUNDARY,&L_LOCATION,&ADDRESS),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_RELEASE_STORAGE                                         *
* Purpose: Generate code to release a piece of storage.               *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_RELEASE_STORAGE &ID=,&SPEPA=,&SPTOKEN=,                    +
               &SIZE=,&SUBPOOL=,&ADDRESS=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_RELEASE_STORAGE
         LCLC  &L_SUBPOOL
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Check for the presence of required keywords.
.*
         AIF   (T'&SIZE NE 'O').SIZE_PR
         MNOTE 8,'SIZE is a required keyword.'
         MEXIT
.SIZE_PR AIF   (T'&ADDRESS NE 'O').ADDR_PR
         MNOTE 8,'ADDRESS is a required keyword.'
         MEXIT
.ADDR_PR ANOP
.*
.* Set up the parameter for the SUBPOOL keyword.
.*
&L_SUBPOOL    SETC '&SUBPOOL'
              AIF ('&SUBPOOL' NE '').PAST_SP
&L_SUBPOOL    SETC '0'
.PAST_SP      ANOP
.*
.* Generate the CALLX to release storage.
.*
         CALLX &#_IDEPA,(&#_IDTKN,&ES_RELEASE_STORAGE,&SIZE,           +
               &L_SUBPOOL,&ADDRESS),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_LOAD_MODULE                                             *
* Purpose: Generate the environment support call to load a module.    *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_LOAD_MODULE &ID=,&SPEPA=,&SPTOKEN=,                        +
               &SPID=,&EPNAME=,&EPA=,&TYPE=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_LOAD_MODULE
         GBLA  &ES_LM_STANDARD,&ES_LM_MNT_ONLY,&ES_LM_NO_LOAD
         LCLC  &L_EPA,&L_TKN,&L_TYPE
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
&L_EPA   SETC '&#_IDEPA'     | Save Env. Sup. EPA in local variable.
&L_TKN   SETC '&#_IDTKN'     | Save Env. Sup. TOKEN in local variable.
.*
.* Obtain ID values for service processor being loaded.
.*
         SRV##ID GET,REQUIRED=(SPEPNAME,SPEPA),                        +
               ID=&SPID.,SPEPNAME=&EPNAME.,SPEPA=&EPA.
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Generate the CALLX to load a module.
.*
         ##PLIST START
         ##PLIST PARM,&L_TKN,&ES_LOAD_MODULE
         ##PLIST PARM,&#_IDEPN,&#_IDEPA
         AIF   ('&TYPE' EQ '').PAST_TYPE
         AIF   ('&TYPE' EQ 'STANDARD').TYPE_STD
         AIF   ('&TYPE' EQ 'MNT_ONLY').TYPE_MNT
         AIF   ('&TYPE' EQ 'NO_LOAD').TYPE_NOLD
         MNOTE 8,'Invalid value for TYPE; must be STANDARD, MNT_ONLY, o+
               r NO_LOAD'
         MEXIT
.TYPE_STD  ##PLIST PARM,&ES_LM_STANDARD
           AGO     .PAST_TYPE
.TYPE_MNT  ##PLIST PARM,&ES_LM_MNT_ONLY
           AGO     .PAST_TYPE
.TYPE_NOLD ##PLIST PARM,&ES_LM_NO_LOAD
.PAST_TYPE ANOP
           ##PLIST END,VL
           CALLX   &L_EPA
.MEXIT     MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_UNLOAD_MODULE                                           *
* Purpose: Generate the environment support call to load a module.    *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_UNLOAD_MODULE &ID=,&SPEPA=,&SPTOKEN=,                      +
               &SPID=,&EPNAME=,&EPA=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_UNLOAD_MODULE
         LCLC  &L_EPA,&L_TKN
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
&L_EPA   SETC '&#_IDEPA'     | Save Env. Sup. EPA in local variable.
&L_TKN   SETC '&#_IDTKN'     | Save Env. Sup. TOKEN in local variable.
.*
.* Obtain ID values for service processor (or module) being loaded.
.*
         SRV##ID GET,REQUIRED=(SPEPNAME),                              +
               ID=&SPID.,SPEPNAME=&EPNAME.,SPEPA=&EPA.
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Generate the CALLX to unload a module.
.*
         AIF   ('&#_IDEPA' NE '').CALL2
         CALLX &L_EPA,(&L_TKN,&ES_UNLOAD_MODULE,&#_IDEPN),VL
         MEXIT
.CALL2   CALLX &L_EPA,(&L_TKN,&ES_UNLOAD_MODULE,&#_IDEPN,&#_IDEPA),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_DISPLAY_MESSAGE                                         *
* Purpose: Generate code to display a message.                        *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_DISPLAY_MESSAGE &ID=,&SPEPA=,&SPTOKEN=,&MESSAGE=
         GBLA  &ES_DISPLAY_MESSAGE SETC in open code.
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         LCLC  &L_ADDR,&L_LEN
         LCLA  &I,&L
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Decode the MESSAGE= keyword to get an address and length.
.*
              AIF ('&MESSAGE' EQ '').NO_MESSAGE
              AIF (N'&MESSAGE EQ 2).MSG_TAGLEN
              AIF (N'&MESSAGE EQ 1).MSG_TAGONLY
              MNOTE 8,'Too many subparameters for MESSAGE keyword.'
              MEXIT
.MSG_TAGLEN   ANOP
&L_ADDR       SETC '&MESSAGE(1)'          | Set addr.
&L_LEN        SETC '&MESSAGE(2)'          | Set len.
              AGO  .PAST_MESSAGE          |
.MSG_TAGONLY  ANOP
              AIF ('&MESSAGE'(1,1) EQ '''').MSG_LITERAL
&L_ADDR       SETC '&MESSAGE'             | Set addr to tag_name.
&L_LEN        SETC '=A(L''&MESSAGE)'      | Set len to L'tag_name.
              AGO  .PAST_MESSAGE          |
.MSG_LITERAL  ANOP                        |
&L_ADDR       SETC '&MESSAGE'             | Set addr to actual literal.
&L            SETA 0                      | Length counter = 0.
&I            SETA 2                      | Index counter -> past '.
.MSG_LOOP     AIF  (&I GE K'&L_ADDR).MSG_ELOOP       Loop over message.
              AIF  ('&L_ADDR'(&I,1) NE '''').MSG_TXT If doubled quotes.
&I            SETA &I+1                   |            Advance past '.
.MSG_TXT      ANOP                        |          EndIf.
&L            SETA &L+1                   |   Add one to length.
&I            SETA &I+1                   |   Advance to next position.
              AGO  .MSG_LOOP              | End of counting loop.
.MSG_ELOOP    ANOP                        |
&L_LEN        SETC '&L'                   | Set length parameter.
              AGO  .PAST_MESSAGE
.NO_MESSAGE   MNOTE 8,'MESSAGE is a required keyword.'
              MEXIT
.PAST_MESSAGE ANOP
.*
.* Generate the DISPLAY_MESSAGE call statement.
.*
           CALLX &#_IDEPA,(&#_IDTKN,&ES_DISPLAY_MESSAGE,&L_ADDR,       +
               &L_LEN),VL
.MEXIT     MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_SAVE_DEBUG_INFO                                         *
* Purpose: Generate code to save debugging information.               *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_SAVE_DEBUG_INFO &ID=,&SPEPA=,&SPTOKEN=,                    +
               &GDI=,&TEXT=,&HEX=,&LABEL=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_DEBUG_ID_GDI,&ES_DEBUG_ID_TEXT,&ES_DEBUG_ID_HEX
         GBLA  &ES_SAVE_DEBUG_INFO SETC in open code.
         LCLC  &L_DEBUG_ID,&L_ADDR,&L_LEN,&L_LABEL,&L_LABEL_LEN
         LCLA  &I,&L
         LCLB  &S_GDI,&S_TEXT,&S_HEX
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Check optional LABEL keyword.
.*
&L_LABEL     SETC ''
&L_LABEL_LEN SETC ''
         AIF ('&LABEL' EQ '').PAST_LABEL
              AIF ('&LABEL'(1,1) EQ '''').LBL_LITERAL
              AIF (N'&LABEL EQ 1).LBL_TAGONLY
              AIF (N'&LABEL EQ 2).LBL_TAGLEN
              MNOTE 8,'Too many subparameters for LABEL keyword.'
              MEXIT
.LBL_TAGLEN   ANOP
&L_LABEL      SETC '&LABEL(1)'            | Set addr.
&L_LABEL_LEN  SETC '&LABEL(2)'            | Set len.
              AGO  .PAST_LABEL            |
.LBL_TAGONLY  ANOP
&L_LABEL      SETC '&LABEL'               | Set addr to tag_name.
&L_LABEL_LEN  SETC '=A(L''&LABEL)'        | Set len to L'tag_name.
              AGO  .PAST_LABEL            |
.LBL_LITERAL  ANOP                        |
&L_LABEL      SETC '&LABEL'               | Set addr to actual literal.
&L            SETA 0                      | Length counter = 0.
&I            SETA 2                      | Index counter -> past '.
.LBL_LOOP     AIF  (&I GE K'&L_LABEL).LBL_ELOOP      Loop over TEXT.
              AIF  ('&L_LABEL'(&I,1) NE '''').LBL_LBL If doubled quotes
&I            SETA &I+1                   |            Advance past '.
.LBL_LBL      ANOP                        |          EndIf.
&L            SETA &L+1                   |   Add one to length.
&I            SETA &I+1                   |   Advance to next position.
              AGO  .LBL_LOOP              | End of counting loop.
.LBL_ELOOP    ANOP                        |
&L_LABEL_LEN  SETC '&L'                   | Set length parameter.
.PAST_LABEL   ANOP
.*
.* Check keywords GDI, TEXT, and HEX: exactly one must be specified.
.*
&S_GDI   SETB  ('&GDI'  NE '')      TRUE if GDI was specified.
&S_TEXT  SETB  ('&TEXT' NE '')      TRUE if TEXT was specified.
&S_HEX   SETB  ('&HEX'  NE '')      TRUE if HEX was specified.
         AIF   (NOT (&S_GDI OR &S_TEXT OR &S_HEX)).K_MISS
         AIF   (&S_GDI  AND (&S_TEXT OR &S_HEX)).MTX_ERR
         AIF   (&S_TEXT AND (&S_GDI  OR &S_HEX)).MTX_ERR
         AIF   (&S_HEX  AND (&S_GDI  OR &S_TEXT)).MTX_ERR
         AGO   .PASTKWD
.K_MISS  MNOTE 8,'Keyword GDI, TEXT or HEX must be specified.'
         MEXIT
.MTX_ERR MNOTE 8,'Keywords GDI, TEXT, and HEX are mutually exclusive.'
         MEXIT
.PASTKWD ANOP
.*
.* Decode the GDI/TEXT/HEX keyword to get an address and length.
.*
         AIF (&S_GDI).USE_GDI
         AIF (&S_TEXT).USE_TEXT
         AIF (&S_HEX).USE_HEX
         MNOTE 12,'Internal error in ES_SAVE_DEBUG_INFO.'
              MEXIT
.USE_GDI      ANOP
&L_DEBUG_ID   SETC '&ES_DEBUG_ID_GDI'
&L_ADDR       SETC '&GDI'
              AGO  .CALLX
.USE_TEXT     ANOP
&L_DEBUG_ID   SETC '&ES_DEBUG_ID_TEXT'
              AIF ('&TEXT'(1,1) EQ '''').TXT_LITERAL
              AIF (N'&TEXT EQ 1).TXT_TAGONLY
              AIF (N'&TEXT EQ 2).TXT_TAGLEN
              MNOTE 8,'Too many subparameters for TEXT keyword.'
              MEXIT
.TXT_TAGLEN   ANOP
&L_ADDR       SETC '&TEXT(1)'             | Set addr.
&L_LEN        SETC '&TEXT(2)'             | Set len.
              AGO  .PAST_TEXT             |
.TXT_TAGONLY  ANOP
&L_ADDR       SETC '&TEXT'                | Set addr to tag_name.
&L_LEN        SETC '=A(L''&TEXT)'         | Set len to L'tag_name.
              AGO  .PAST_TEXT             |
.TXT_LITERAL  ANOP                        |
&L_ADDR       SETC '&TEXT'                | Set addr to actual literal.
&L            SETA 0                      | Length counter = 0.
&I            SETA 2                      | Index counter -> past '.
.TXT_LOOP     AIF  (&I GE K'&L_ADDR).TXT_ELOOP       Loop over TEXT.
              AIF  ('&L_ADDR'(&I,1) NE '''').TXT_TXT If doubled quotes.
&I            SETA &I+1                   |            Advance past '.
.TXT_TXT      ANOP                        |          EndIf.
&L            SETA &L+1                   |   Add one to length.
&I            SETA &I+1                   |   Advance to next position.
              AGO  .TXT_LOOP              | End of counting loop.
.TXT_ELOOP    ANOP                        |
&L_LEN        SETC '&L'                   | Set length parameter.
.PAST_TEXT    AGO  .CALLX
.USE_HEX      ANOP
&L_DEBUG_ID   SETC '&ES_DEBUG_ID_HEX'
              AIF (N'&HEX EQ 1).HEX_TAGONLY
              AIF (N'&HEX EQ 2).HEX_TAGLEN
              MNOTE 8,'Too many subparameters for HEX keyword.'
              MEXIT
.HEX_TAGLEN   ANOP
&L_ADDR       SETC '&HEX(1)'              | Set addr.
&L_LEN        SETC '&HEX(2)'              | Set len.
              AGO  .PAST_HEX              |
.HEX_TAGONLY  ANOP
&L_ADDR       SETC '&HEX'                 | Set addr to tag_name.
&L_LEN        SETC '=A(L''&HEX)'          | Set len to L'tag_name.
.PAST_HEX     AGO  .CALLX
.*
.* Generate the SAVE_DEBUG_INFO call statement.
.*
.CALLX     ##PLIST START
           ##PLIST PARM,&#_IDTKN,&ES_SAVE_DEBUG_INFO,&L_DEBUG_ID
           ##PLIST PARM,&L_ADDR
           AIF     ('&L_LABEL_LEN' NE '').PARM3
           AIF     ('&L_LABEL'     NE '').PARM2
           AIF     ('&L_LEN'       NE '').PARM1
           AGO     .PARM_END
.PARM1     ##PLIST PARM,&L_LEN
           AGO     .PARM_END
.PARM2     ##PLIST PARM,&L_LEN,&L_LABEL
           AGO     .PARM_END
.PARM3     ##PLIST PARM,&L_LEN,&L_LABEL,&L_LABEL_LEN
.PARM_END  ##PLIST END,VL
           CALLX   &#_IDEPA
.MEXIT     MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_DISPLAY_DEBUG_INFO                                      *
* Purpose: Generate code to display debugging information.            *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_DISPLAY_DEBUG_INFO &ID=,&SPEPA=,&SPTOKEN=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_DISPLAY_DEBUG_INFO SETC in open code.
.*
.* Obtain service processor ID values and generate the CALLX.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         CALLX &#_IDEPA,(&#_IDTKN,&ES_DISPLAY_DEBUG_INFO),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_DISPLAY_DEBUG_INFO_AND_ABEND                            *
* Purpose: Generate code to display debugging information.            *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_DISPLAY_DEBUG_INFO_AND_ABEND &ID=,&SPEPA=,&SPTOKEN=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_DISPLAY_DEBUG_INFO_AND_ABEND SETC in open code.
.*
.* Obtain service processor ID values and generate the CALLX.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         CALLX &#_IDEPA,(&#_IDTKN,&ES_DISPLAY_DEBUG_INFO_AND_ABEND),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_CLEAR_DEBUG_INFO                                        *
* Purpose: Generate code to display debugging information.            *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_CLEAR_DEBUG_INFO &ID=,&SPEPA=,&SPTOKEN=,&ACTION=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_CLEAR_DEBUG_INFO SETC in open code.
         GBLA  &ES_CDI_EXECUTE,&ES_CDI_INHIBIT,&ES_CDI_ENABLE
         LCLC  &L_ACTION
.*
.* Obtain service processor ID values and generate the CALLX.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Process the optional ACTION keyword.
.*
             AIF  ('&ACTION' EQ 'EXECUTE').ACTNX
             AIF  ('&ACTION' EQ 'INHIBIT').ACTNI
             AIF  ('&ACTION' EQ 'ENABLE').ACTNE
&L_ACTION    SETC '&ACTION'
             AGO  .PAST_ACTION
.ACTNX       ANOP
&L_ACTION    SETC '&ES_CDI_EXECUTE'
             AGO  .PAST_ACTION
.ACTNI       ANOP
&L_ACTION    SETC '&ES_CDI_INHIBIT'
             AGO  .PAST_ACTION
.ACTNE       ANOP
&L_ACTION    SETC '&ES_CDI_ENABLE'
.PAST_ACTION ANOP
.*
.* Generate the subroutine call to ES_CLEAR_DEBUG_INFO
.*
         ##PLIST START
         ##PLIST PARM,&#_IDTKN,&ES_CLEAR_DEBUG_INFO
         AIF     ('&ACTION' EQ '').CALLX
         ##PLIST PARM,&L_ACTION
.CALLX   ##PLIST END,VL
         CALLX   &#_IDEPA
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_GET_USERID                                              *
* Purpose: Generate code to extract the RACF Userid under which the   *
*          current address space is running.                          *
*                                                                     *
*          Keyword                    Description                     *
*          --------  -----------------------------------------------  *
*          USERID    Seven character RACF Userid.                     *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_GET_USERID &ID=,&SPEPA=,&SPTOKEN=,&USERID=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_GET_USERID SETC in open code.
.*
.* Obtain service processor ID values and generate the CALLX.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         AIF  ('&USERID' NE '').CALL1
         MNOTE 8,'USERID is a required keyword.'
         MEXIT
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&ES_GET_USERID,&USERID.),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_GET_GROUP                                               *
* Purpose: Generate code to extract the RACF Group name under which   *
*          the current address space is running.                      *
*                                                                     *
*          Keyword                    Description                     *
*          --------  -----------------------------------------------  *
*          GROUP     Eight character RACF Group name.                 *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_GET_GROUP &ID=,&SPEPA=,&SPTOKEN=,&GROUP=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_GET_GROUP SETC in open code.
.*
.* Obtain service processor ID values and generate the CALLX.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         AIF  ('&GROUP' NE '').CALL1
         MNOTE 8,'GROUP is a required keyword.'
         MEXIT
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&ES_GET_GROUP,&GROUP.),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_GET_CACCT                                               *
* Purpose: Generate code to extract this address space's CACCT.       *
*                                                                     *
*          Keyword                    Description                     *
*          --------  -----------------------------------------------  *
*          CACCT     Eight character Computer Center Account number.  *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_GET_CACCT &ID=,&SPEPA=,&SPTOKEN=,&CACCT=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_GET_CACCT SETC in open code.
.*
.* Obtain service processor ID values and generate the CALLX.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         AIF  ('&CACCT' NE '').CALL1
         MNOTE 8,'CACCT is a required keyword.'
         MEXIT
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&ES_GET_CACCT,&CACCT.),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_GET_SYSRES_VOLUME_NAME                                  *
* Purpose: Generate code to obtain the current Sysres volume's VOLSER *
*                                                                     *
*          Keyword                    Description                     *
*          --------  -----------------------------------------------  *
*          VOLSER    Six character volume serial name.                *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_GET_SYSRES_VOLUME_NAME &ID=,&SPEPA=,&SPTOKEN=,&VOLSER=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_GET_SYSRES_VOLUME_NAME SETC in open code.
.*
.* Obtain service processor ID values and generate the CALLX.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         AIF  ('&VOLSER' NE '').CALL1
         MNOTE 8,'VOLSER is a required keyword.'
         MEXIT
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&ES_GET_SYSRES_VOLUME_NAME,&VOLSER.),+
               VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_GET_TERMINAL_NAME                                       *
* Purpose: Generate code to obtain this user's terminal name.         *
*                                                                     *
*          Keyword                    Description                     *
*          --------  -----------------------------------------------  *
*          NAME      Eight character terminal name.                   *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_GET_TERMINAL_NAME &ID=,&SPEPA=,&SPTOKEN=,&NAME=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_GET_TERMINAL_NAME SETC in open code.
.*
.* Obtain service processor ID values and generate the CALLX.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         AIF  ('&NAME' NE '').CALL1
         MNOTE 8,'NAME is a required keyword.'
         MEXIT
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&ES_GET_TERMINAL_NAME,&NAME.),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_GET_JOBCARD_NAME_FIELD                                  *
* Purpose: Generate code to obtain the 20-character programmer name   *
*          field from this address space's JOB card.                  *
*                                                                     *
*          Keyword                    Description                     *
*          --------  -----------------------------------------------  *
*          NAME      Twenty character programmer name field.          *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_GET_JOBCARD_NAME_FIELD &ID=,&SPEPA=,&SPTOKEN=,&NAME=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_GET_JOBCARD_NAME_FIELD SETC in open code.
.*
.* Obtain service processor ID values and generate the CALLX.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         AIF  ('&NAME' NE '').CALL1
         MNOTE 8,'NAME is a required keyword.'
         MEXIT
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&ES_GET_JOBCARD_NAME_FIELD,&NAME.),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_GET_JOBCARD_ROOM                                        *
* Purpose: Generate code to extract this address space's ROOM.        *
*                                                                     *
*          Keyword                    Description                     *
*          --------  -----------------------------------------------  *
*          ROOM      Four character room number from JOB card.        *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_GET_JOBCARD_ROOM &ID=,&SPEPA=,&SPTOKEN=,&ROOM=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_GET_JOBCARD_ROOM SETC in open code.
.*
.* Obtain service processor ID values and generate the CALLX.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         AIF  ('&ROOM' NE '').CALL1
         MNOTE 8,'ROOM is a required keyword.'
         MEXIT
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&ES_GET_JOBCARD_ROOM,&ROOM.),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_GET_TSU_STC_OR_JOB                                      *
* Purpose: Generate code to extract this address space's type.        *
*                                                                     *
*          Keyword                    Description                     *
*          --------  -----------------------------------------------  *
*          TYPE      Three character indicator of address space type: *
*                    'TSU' - TSO Session.                             *
*                    'JOB' - Batch job.                               *
*                    'STC' - Started Task.                            *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_GET_TSU_STC_OR_JOB &ID=,&SPEPA=,&SPTOKEN=,&TYPE=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_GET_TSU_STC_OR_JOB SETC in open code.
.*
.* Obtain service processor ID values and generate the CALLX.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         AIF  ('&TYPE' NE '').CALL1
         MNOTE 8,'TYPE is a required keyword.'
         MEXIT
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&ES_GET_TSU_STC_OR_JOB,&TYPE.),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_GET_JOBID                                               *
* Purpose: Generate code to extract this job's job identifier.        *
*                                                                     *
*          Keyword                    Description                     *
*          --------  -----------------------------------------------  *
*          JOBID     Location for eight character job identifier.     *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_GET_JOBID &ID=,&SPEPA=,&SPTOKEN=,&JOBID=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_GET_JOBID SETC in open code.
.*
.* Obtain service processor ID values and generate the CALLX.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         AIF  ('&JOBID' NE '').CALL1
         MNOTE 8,'JOBID is a required keyword.'
         MEXIT
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&ES_GET_JOBID,&JOBID.),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_GET_DEFAULT_DESTINATION                                 *
* Purpose: Generate code to obtain this user's default printer dest.  *
*                                                                     *
*          Keyword                    Description                     *
*          --------  -----------------------------------------------  *
*          DEST      Location for eight character printer destination *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_GET_DEFAULT_DESTINATION &ID=,&SPEPA=,&SPTOKEN=,&DEST=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_GET_DEFAULT_DESTINATION SETC in open code.
.*
.* Obtain service processor ID values and generate the CALLX.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         AIF  ('&DEST' NE '').CALL1
         MNOTE 8,'DEST is a required keyword.'
         MEXIT
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&ES_GET_DEFAULT_DESTINATION,&DEST.), +
               VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_GET_PREFIX                                              *
* Purpose: Generate code to extract this user's DSNAME prefix.        *
*                                                                     *
*          Keyword                     Description                    *
*          --------   ----------------------------------------------- *
*          PREFIX     Location for eight character TSO dsname prefix. *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_GET_PREFIX &ID=,&SPEPA=,&SPTOKEN=,&PREFIX=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_GET_PREFIX SETC in open code.
.*
.* Obtain service processor ID values and generate the CALLX.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         AIF  ('&PREFIX' NE '').CALL1
         MNOTE 8,'PREFIX is a required keyword.'
         MEXIT
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&ES_GET_PREFIX,&PREFIX.),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_GET_TIME                                                *
* Purpose: Generate code to obtain current time and date. All of the  *
*          following keywords are optional.                           *
*                                                                     *
*          Keyword                     Description                    *
*          --------   ----------------------------------------------- *
*          TIME       Location for time of day in .01 second units.   *
*          DATE       Location for date in packed decimal CCYYDDDs.   *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_GET_TIME &ID=,&SPEPA=,&SPTOKEN=,&TIME=,&DATE=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_GET_TIME SETC in open code.
.*
.* Obtain service processor ID values and generate the CALLX.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.CALL2   CALLX &#_IDEPA,(&#_IDTKN,&ES_GET_TIME,&TIME.,&DATE.),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_GET_GMT_TIME                                            *
* Purpose: Generate code to obtain current time and date. All of the  *
*          following keywords are optional.                           *
*                                                                     *
*          Keyword                     Description                    *
*          --------   ----------------------------------------------- *
*          TIME       Location for time of day in .01 second units.   *
*          DATE       Location for date in packed decimal CCYYDDDs.   *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_GET_GMT_TIME &ID=,&SPEPA=,&SPTOKEN=,&TIME=,&DATE=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_GET_GMT_TIME SETC in open code.
.*
.* Obtain service processor ID values and generate the CALLX.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.CALL2   CALLX &#_IDEPA,(&#_IDTKN,&ES_GET_GMT_TIME,&TIME.,&DATE.),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_GET_FORMATTED_TIME                                      *
* Purpose: Generate code to obtain current time and date. All of the  *
*          following keywords are optional.                           *
*                                                                     *
*          Keyword                     Description                    *
*          --------   ----------------------------------------------- *
*          TIME       Specifies a location for time as HH:MM:SS.TH    *
*          GREGORIAN  Specifies a location for date as MM/DD/YY       *
*          JULIAN     Specifies a location for date as CCYY.DDD       *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ES_GET_FORMATTED_TIME &ID=,&SPEPA=,&SPTOKEN=,                 +
               &TIME=,&GREGORIAN=,&JULIAN=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ES_GET_FORMATTED_TIME SETC in open code.
.*
.* Obtain service processor ID values and generate the CALLX.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=(ES_ID),SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         AIF  ('&JULIAN' EQ '' AND '&GREGORIAN' EQ '').CALL3
         AIF  ('&JULIAN' EQ '').CALL2
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&ES_GET_FORMATTED_TIME,&TIME.,       +
               &GREGORIAN.,&JULIAN),VL
         MEXIT
.CALL2   CALLX &#_IDEPA,(&#_IDTKN,&ES_GET_FORMATTED_TIME,&TIME.,       +
               &GREGORIAN.),VL
         MEXIT
.CALL3   CALLX &#_IDEPA,(&#_IDTKN,&ES_GET_FORMATTED_TIME,&TIME.),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ES_PARMLIST                                                *
* Purpose: Map environment support's parameter list.                  *
*---------------------------------------------------------------------*
         MACRO
         ES_PARMLIST
PARMLIST DSECT ,     PARAMETER LIST   |
PRMAPWA  DS    A     ADDRESS OF PWA ANCHOR
PRMAFNCD DS    A     ADDRESS OF FUNCTION CODE
         SPACE 1                      |
*---------------------------------------------------------------------*
*  REST OF PARAMETER LIST DEPENDS ON FUNCTION CODE.
*---------------------------------------------------------------------*
         SPACE 1                      |
PRMFD    DS    0A    FUNCTION DEPENDENT PARMS
         SPACE 1                      |
*---------------------------------------------------------------------*
*  PARAMETERS FOR FUNCTION START.
*---------------------------------------------------------------------*
         SPACE 1                      |
         ORG   PRMFD                  |
PRM1ESV  DS    A     ADDRESS OF ESV ANCHOR WORD
PRM1MNT  DS    A     (OPTIONAL) APPLICATION SERVICE NAME TABLE
PRM1XNFO DS    A     (OPTIONAL) Exit Information word.
PRM1OPTS DS    A     (OPTIONAL) Options.
         SPACE 1                      |
*---------------------------------------------------------------------*
*  PARAMETERS FOR FUNCTION TERMINATE.
*---------------------------------------------------------------------*
         SPACE 1                      |
         ORG   PRMFD                  |
* THERE ARE NO EXTRA PARAMETERS
         SPACE 1                      |
*---------------------------------------------------------------------*
*  PARAMETERS FOR FUNCTION DISPLAY_MESSAGE
*---------------------------------------------------------------------*
            ORG   PRMFD               |
PRM_DM_TEXT DS A                      | -> C'text of message'
PRM_DM_LEN  DS F                      | -> F(length of text)
*---------------------------------------------------------------------*
*  PARAMETERS FOR FUNCTION OBTAIN_STORAGE.
*---------------------------------------------------------------------*
         SPACE 1                      |
         ORG   PRMFD                  |
PRMGSIZE DS    A                      | -> F(SIZE OF STORAGE)
PRMGSP   DS    A                      | -> F(SUBPOOL NUMBER)
PRMGBDY  DS    A                      | -> F(BOUNDARY)
PRMGLOC  DS    A                      | -> F(LOCATION)
PRMGADDR DS    A                      | -> F(ADDRESS RETURN AREA)
         SPACE 1                      |
*---------------------------------------------------------------------*
*  PARAMETERS FOR FUNCTION RELEASE_STORAGE.
*---------------------------------------------------------------------*
         SPACE 1                      |
         ORG   PRMFD                  |
PRMFSIZE DS    A                      | -> F(SIZE OF STORAGE)
PRMFSP   DS    A                      | -> F(SUBPOOL NUMBER)
PRMFADDR DS    A                      | -> F(ADDRESS RETURN AREA)
         SPACE 1                      |
*---------------------------------------------------------------------*
*  PARAMETERS FOR FUNCTION LOAD_MODULE.
*---------------------------------------------------------------------*
         SPACE 1                      |
         ORG   PRMFD                  |
PRMLEPNM DS    A                      | -> EP NAME
PRMLEPA  DS    A                      | -> EP ADDRESS RETURNED FOR LOAD
PRMLPATH DS    A                      | -> Search path criteria.
         SPACE 1                      |
*---------------------------------------------------------------------*
*  PARAMETERS FOR CLEAR DEBUG INFO.
*---------------------------------------------------------------------*
         SPACE 1                      |
         ORG   PRMFD                  |
PRMCDACT DS    F                      | -> Action to perform (optional)
         SPACE 1                      |
*---------------------------------------------------------------------*
*  PARAMETERS FOR SAVE DEBUG INFO.
*---------------------------------------------------------------------*
         SPACE 1                      |
         ORG   PRMFD                  |
PRMVTYPE DS    A                      | -> FULLWORD TYPE
PRMVTD   EQU   *                      | TYPE DEPENDENT INFO
*---------------------------------------------------------------------*
*  TYPE DEPENDENT INFO FOR SAVE DEBUG INFO TYPE OF GENERAL DEBUG INFO.
*---------------------------------------------------------------------*
         ORG   PRMVTD                 |
PRMVAGDI DS    A                      |
*---------------------------------------------------------------------*
*  TYPE DEPENDENT INFO FOR SAVE DEBUG INFO TYPE OF TEXT AND HEX.
*---------------------------------------------------------------------*
         ORG   PRMVTD                 |
PRMVTXS  DS    A                      |
PRMVTXSL DS    A                      |
PRMVTXN  DS    A                      |
PRMVTXNL DS    A                      |
         SPACE 1                      |
*---------------------------------------------------------------------*
*  PARAMETER LIST FOR &ES_GET_... SERVICE PROCESSORS.
*---------------------------------------------------------------------*
            ORG   PRMFD                  |
PRMAR1      DS    A     ADDRESS OF RETURN VALUE 1
PRMAR2      DS    A     ADDRESS OF RETURN VALUE 2
PRMAR3      DS    A     ADDRESS OF RETURN VALUE 2
            ORG   ,                      |
PARMLIST_L  EQU *-PARMLIST
            MEND
