.*
.* The GML text below is a skeleton reference chapter for one service
.* processor.  The suggested approach for writing a new chapter is to
.*    1) create a new member called SRVDOCxx, where xx is the two
.*       letter service processor identification code.
.*    2) copy this member into it.
.*    3) Change all occurrances of the skeleton names below to the
.*       appropriate values.
.*    4) format a copy of the manual with the new chapter included.
.*    5) use the formatted copy of the new chapter to decided what
.*       changes/additions/deletions need to be made.
.*
.*   <srvproc_name>  - The name used when referring to the service
.*                     processor in general. e.g. "String Handler",
.*                     "Environment Support", "Memory Manager", etc.
.*   <srvload_sym>   - The symbolic name used for the load module, such
.*                     as STRING_HANDLER, MVS_ENVIRONMENT_SUPPORT, etc.
.*   <srvload_name>  - The actual name of the load module identified by
.*                     <srvload_sym>, such as SRVSTR or SRVMVSES.       .
.*   <>              - The two-letter code assigned to the service
.*                     processor, such as ES, ST, MM, SY, or FI.
.*   <func_name>     - The name used for specific function's reference
.*                     section.  This name would be something like
.*                     ES_LOAD_MODULE, ST_FORMAT, etc.
.*   idid            - The header id used on the section for the xx_ID
.*                     macro.
.*
.*
.* Lines that begin with .*===> describe what should appear in the
.*   text at that point or provide information on how something should
.*   be formatted.
.*
.**********************************************************************
.*                                                                    *
.*                    Chapter. Printline                              *
.*                                                                    *
.**********************************************************************
:h1.Printline
:p.
The Printline service processor is intended to simplify report writing
by managing such typical "housekeeping" tasks of report writing
as headers and footers,
page ejects, and page numbers.  This can reduce the complexity of
programs that need to produce reports, freeing the developer to
concentrate on other aspects of the report program.
:p.
The Printline service processor is dependent on the MVS operating
system environment, primarily due to its use of QSAM.
:p.
The Printline service processor can make use of the String Handler to
construct header, footer and data lines from String Handler control
strings and source parameters.  Heading and footing definitions may be
added, changed or deleted dynamically.  Page counters are defined as
part of a heading or footing data line: while the actual counters reside
in the caller's storage, they are incremented automatically by
Printline, and formatted under control of the associated format control
string.  Multiple page counters may be defined at once, and they need
not contain the same values.
.*--------------------------------------------------------------------*
:h3.Basic Operation Of Printline
.*--------------------------------------------------------------------*
:p.Printline has three types of lines: :hp1.header:ehp1. lines,
:hp1.footer:ehp1. lines, and :hp1.data:ehp1. lines.  Header and footer
lines are generally established once, and remain "current" until
either Printline is told to remove them or Printline is terminated.
Data lines are printed as they are passed to Printline.  If a data line
would not fit on the current page, Printline will print any footers
that are currently defined, then print any headers that are defined.
Any page counters active at the time will be incremented.  The caller
can also force a page "break" to occur by calling a Printline function.
.*
:p.Printline uses the OS file handler for output.  When the OS file
handler is started, option ISOCC and RECORDLENGTH=(4,maxlnsz) is
specified.
.*
:p.By default, Printline will print exactly what is passed to it,
preserving lowercase data.  An option can be used to cause Printline
to convert everything it prints to uppercase.  This may be a
consideration if reports produced using Printline might print on
uppercase-only printers.
.*--------------------------------------------------------------------*
:h3.The Format Of A Page
.*--------------------------------------------------------------------*
:p.Printline allows its caller to define the format of a report's page
in terms of:
:ul.
:li.The length of the page (number of total print lines),
:li.The :hp1.header:ehp1., or those lines that appear at the top
of each page,
:li.The :hp1.footer:ehp1., or those lines that appear at the bottom
of each page,
:li.The body of the page.
:eul.
:p.Printline provides function macros to manage each of these
components a report: these are defined below.
.*
:h4.The Length Of The Page
.*
:p.When a Printline session is started, the caller specifies the space
on a page available for printing.  The default page length is 66 print
lines.  The actual space available for printing data is determined by
the total page length minus any headers and footers defined.  Since
headers and footers can be defined, changed or removed in mid-report,
the amount of space available for printing data may change.  The
:#x.PL_QUERY_LINES_LEFT:e#x. function can return the amount of space
remaining on the current page at any point in a Printline session.
.*
:h4.Headers
.*
:p.Headers as defined by Printline, appear at the top of each printed
page.  When a page break occurs (by either reaching the end of the
current page or calling the :#x.PL_PAGE_BREAK:e#x. function), the
headers are printed according to the current header definition.
.*
:p.Header lines are defined individually by the
:#x.PL_SET_HEADER:e#x. and :#x.PL_SET_FORMATTED_HEADER:e#x. functions,
and may be subsequently removed by the
:#x.PL_RESET_HEADER:e#x. function.
Each header line is assigned a "line number":  this number is used
to determine the order that header lines are printed in.
A header may be redefined "in-place" using the same line number,
even if the number or size of its parameters changes.
The line numbers do not need to be consecutive:  in fact, header lines
can be inserted by using a line number value between existing line
numbers.  This example shows how a header line can be inserted
and later removed in mid-report, as shown in
:figref refid=plhdrex..
:fig id=plhdrex.
:xmp.
PL_SET_HEADER  ID=PL,LINE=10,STRING='1  The first header line.'
PL_SET_HEADER  ID=PL,LINE=20,STRING='0  The last header line.'
      :                         :
PL_PRINT       ID=PL, ...           Print some stuff.
      :                         :
PL_SET_HEADER  ID=PL,LINE=15,STRING='0  An inserted header line.'
      :                         :
PL_PRINT       ID=PL, ...           Print some more stuff.
      :                         :
PL_RESET_HEADER  ID=PL,LINE=15
:exmp.
:figcap.Printline Header Definition Example
:efig.
.*
:p.Printline requires each print line provided by its caller to
contain an ASA carriage control character as its first character.
This allows the caller to retain some control over the appearance of
the report.  While Printline does not set or change carriage control
characters itself, it uses the carriage controls provided by its
caller to count the number of lines printed and remaining on the
current page.  The first header line on a page should contain a
carriage control character of '1', to ensure that a page eject occurs
before that line is printed.
.*
:p.When using :#x.PL_SET_FORMATTED_HEADER:e#x., the caller can provide
a fullword that will be treated as a :hp1.page counter:ehp1..  The
page number is coded as one of the String Formatter's substitution
parameters in the :#x.SOURCE=:e#x. parameter:  Printline is told which
parameter to use as the page counter via the :#x.PAGENUM:e#x. parameter,
which provides the position of the page number's address in the
:#x.SOURCE=:e#x. list, as shown in :figref refid=plfmthd..
:fig id=plfmthd.
:xmp.
PL_SET_FORMATTED_HEADER  ID=PL,                                       +
                LINE=10,                                              +
                STRING=format_string,                                 +
                SOURCE=(todays_date,page_number),                     +
                PAGENUM=2
         :                     :
format_string  DC  C'1  Date: {CL8}       This is the report that you +
                     always wanted.                  Page: {IL4}'
todays_date    DS  CL8
page_number    DS  F
:exmp.
:figcap.Sample Header Definition With Page Counter
:efig.
:p.In this case, the second :#x.SOURCE:e#x. parameter provides the
address of the page counter: hence, the :#x.PAGENUM:e#x. parameter
specifies a value of "2".  Multiple page numbers may be defined
throughout the report, although only one may be defined per header or
footer line:  each will be auto-incremented as the header or footer
referencing it is printed.  The page counter values should be
initially set to zero, but may be modified by the calling program at
any time.  These counter fields are incremented each time they are
printed:  hence, they should not be referred to by more than one
header or footer definition at a time.
.*
:h4.Footers
.*
:p.Footers, if defined, will appear at the bottom of each page printed.
Footers may be used for legends, footnotes, or to provide additional
information that should appear on each page of a report.  Like headers,
footer lines are defined with unique "line numbers", which determine
the order in which the footer lines are printed.
.*
:p.Footer lines are defined individually by the
:#x.PL_SET_FOOTER:e#x. and :#x.PL_SET_FORMATTED_FOOTER:e#x. functions,
and removed by the :#x.PL_RESET_FOOTER:e#x. function, in much the same
way as headers are defined.  Unlike headers, however, Printline needs
to know how many lines to reserve as footer space, since it needs to
be able to skip to the footer area if a page eject is forced by
:#x.PL_PAGE_BREAK:e#x.. The
:#x.PL_RESERVE_FOOTER:e#x. function will reserve a number of lines at
the bottom of a report page for footer lines.
.*
:p.Like headers, footers may contain page counters, which are treated
the same way as page counters in headers.  Use the
:#x.PL_SET_FORMATTED_FOOTER:e#x. function to define page counters in
footer lines.  These counter fields are incremented each time they are
printed:  hence, they should not be referred to by more than one
header or footer definition at a time.
.*
:h4.The Body Of The Page
.*
After any headers have been defined and the space reserved by
:#x.PL_RESERVE_FOOTER:e#x. has been deducted, the space remaining on
a page is available for the body of the report.  Use the
:#x.PL_PRINT:e#x. and :#x.PL_PRINT_FORMATTED:e#x. functions to write
data lines to the report.
.*--------------------------------------------------------------------*
:h3.Obtaining Printline Symbols &amp. Macros
.*--------------------------------------------------------------------*
:p.
Printline's symbols and interface macros can be found in the
assembler copy member :#x.SRVPLMAC:e#x.. This member contains symbols
naming Printline's load module, function codes, return codes,
and parameter values.  It also contains macros for using all of the
Printline's functions. The following statement or its equivalent
should appear at the beginning of any program that uses the
Printline:
:xmp.
   COPY SRVPLMAC      Obtain Printline's symbols & macros.
:exmp.
.*===> if there is more than one load module that implements the
.*===> service processor's protocol, that should be mentioned here.
.*--------------------------------------------------------------------*
:h3.Establishing Printline Defaults
.*--------------------------------------------------------------------*
Some parameters are general to Printline and not specific to
any function.  These parameters include its load module name
(:#xi.PL_epname:e#xi.), entry point address
(:#xi.PL_epa:e#xi.), and token value
(:#xi.PL_token:e#xi.). The :#x.PL_ID:e#x. macro (see
:hdref refid=idid.) can be used to establish defaults for these
parameters and associate them with a unique service processor
identifier.  The identifier may then be supplied on any Printline
macro instruction to refer to the default parameter values.
.*--------------------------------------------------------------------*
:h3.Identifying Printline
.*--------------------------------------------------------------------*
:p.
The Printline service processor resides in the load module named by
the following symbol definition in copy member :#x.SRVPLMAC:e#x.:
:xmp.
&amp.PRINT_LINE       SETC  '''SRVMVSPL  '''
:exmp.
This symbolic name should be used as the service processor entry point
name for Printline as shown in the following :#x.PL_ID:e#x.
macro instruction.
:xmp.
PL_ID ID=ST,SPEPNAME=&amp.PRINT_LINE       Set Printline Defaults.
:exmp.
.*--------------------------------------------------------------------*
:h3.Loading Printline
.*--------------------------------------------------------------------*
:p.
The recommended method for loading Printline is through
Environment Support's :#x.ES_LOAD_MODULE:e#x. function, as shown in
the following example:
:xmp.
ES_LOAD_MODULE ID=ES,SPID=PL            Load Printline
:exmp.
.*--------------------------------------------------------------------*
:h3.Common Parameters
.*--------------------------------------------------------------------*
:p.There are several parameters common to many
Printline
function calls.  These are:
:plist.
:pLt.id_name
:pLd.specifies the name of a service processor identifier created by the
:#x.PL_ID:e#x. macro which will be used by the :#x.PL_START:e#x.
macro to automatically obtain values for :#xi.PL_epa:e#xi.
and
:#xi.PL_token:e#xi.. This parameter is required unless both
:#xi.PL_epa:e#xi. and :#xi.PL_token:e#xi. are
specified.
:pLt.PL_epname
:pLd.the entry point name of the Printline service processor module
that is being used.
:pLt.PL_epa
:pLd.specifies the label of a fullword in storage that contains the
entry point address of an already-started Date/Time Services service
processor.  The value specified by :#xi.PL_epa:e#xi.
overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:pLt.PL_token
:pLd.specifies the label of a fullword in storage that contains the
value returned by :#x.PL_START:e#x. for the
:#xi.PL_token:e#xi. parameter.  The value specified by
:#xi.PL_token:e#xi. overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:eplist.
.*--------------------------------------------------------------------*
:h3.Return Codes
.*--------------------------------------------------------------------*
:p.
Printline may issue any of the following return codes in
various situations.  Some of the return codes may be received from any
call to Date/Time Services, while others are specific to individual
functions.
.*---------------------------------------------------------------------*
.* ReturnCode section: table of return codes and their meanings.
.*
.*===> This section should be elimitated for things that do not have
.*===> return codes, such as the PL_ID macro or data-mapping macros.
.*
.* :rclist.
.* :rcn.number           | One rcn/rct/rcd triple for each return code
.* :rct.symbol           | that the function may generate.
.* :rcd.description      |
.* :erclist.
.*
.*---------------------------------------------------------------------*
:rclist.
:rcn.0
:rct.PL_SUCCESS
:rcd.The Printline
function has completed successfully.
:rcn.1
:rct.PL_INVALID_FUNCTION
:rcd.Printline does not support this function code.
:rcn.2
:rct.PL_INVALID_NUMBER_OF_PARMS
:rcd.The Printline
function received an invalid number of
parameters.  This may be due to an improperly coded CALLX or PLIST
macro, or the inadvertent use of the NOVL option.
:rcn.3
:rct.PL_INVALID_PL_ID
:rcd.The Printline service processor detected an invalid
PWA address in :#x.PL_token:e#x..
:rcn.4
:rct.PL_MEMORY_MANAGER_ERROR
:rcd.An attempt to invoke the Memory Manager resulted in an error.
Debug information should be available via the ES_DISPLAY_DEBUG_INFO
function.
:rcn.5
:rct.PL_CANNOT_OPEN_DCB
:rcd.The DDname provided by the caller could not be used to OPEN the
report file.  A "DDNAME MISSING" message may accompany this error.
:rcn.6
:rct.PL_ENVIRONMENT_SUPPORT_ERROR
:rcd.An attempt to invoke Environment Support resulted in an error.
Debug information should be available via the ES_DISPLAY_DEBUG_INFO
function.
:rcn.7
:rct.PL_STRING_HANDLER_ERROR
:rcd.An error was detected by the String Handler while attempting
to format a footer line for printing.
Debug information should be available via the ES_DISPLAY_DEBUG_INFO
function.
:rcn.8
:rct.PL_PRINT_LINE_TRUNCATED
:rcd.The length of string :#x.print_string:e#x. exceeded the maximum
line length specified on the :#x.PL_START:e#x. macro.  The portion of
:#x.print_string:e#x. that would fit in the print line is printed.
:rcn.9
:rct.Reserved
:rcd.This return code is currently unused.
:rcn.10
:rct.PL_HEADER_NOT_FOUND
:rcd.The header referred to by :hp1.line_number:ehp1. was not found.
:rcn.11
:rct.PL_FOOTER_NOT_FOUND
:rcd.The header referred to by :hp1.line_number:ehp1. was not found.
:rcn.12
:rct.PL_INVALID_PAGEDISP
:rcd.The :hp1.pagenum:ehp1. parameter's value was greater than the
number of
:hp1.source:ehp1. parameters.
:rcn.13
:rct.PL_INVALID_SIZELENGTH
:rcd.The :hp1.sizelength:ehp1. parameter is not valid.  It may only be
a fullword integer between 1 and 4.
:rcn.14
:rct.PL_MISSING_PARAMETER
:rcd.A required parameter is missing.
:rcn.15
:rct.PL_HEADER_LINE_TRUNCATED
:rcd.A simple or formatted header line
has exceeded
:#x.MaxLineSize:e#x. in length.  The
un-truncated portion of the
header line is printed.  Note that by the
time the caller is informed of this error, several header lines may
have been printed.
:rcn.16
:rct.PL_FOOTER_LINE_TRUNCATED
:rcd.A simple or formatted footer line
has exceeded
:#x.MaxLineSize:e#x. in length.  The
un-truncated portion of the
footer line is printed.  Note that by the
time the caller is informed of this error, several footer lines may
have been printed.
:erclist.
.*--------------------------------------------------------------------*
:h2.Printline Service Processor Functions
.*--------------------------------------------------------------------*
:p.
The remaining sections of this chapter describe all functions provided
by the Printline service processor, arranged in alphabetical order.
Each function's description begins on a new page, and the name of the
function being described appears in the top outside corner of every
page.
.**********************************************************************
:func name='PL_ID' id=idid.Establish Default Printline Values
.**********************************************************************
:p.The :#x.PL_ID:e#x. macro is used to establish default values for
use by other Printline macros, which may access those values
through a unique identifier, :#xi.id_name:e#xi., specified by
the user.  When allowed to generate default values, this macro will
create Program Work Area (PWA) storage for :#xi.PL_epa:e#xi.
and
:#xi.PL_token:e#xi.. These values, whether generated by the
macro or provided by the user, are accessable from all other
Printline macros via the :#x.ID=:e#x.:#xi.id_name:e#xi. parameter.
:mac.
PL_ID ID=:hp1.id_name:ehp1.
   &lbt.,SPEPNAME=:hp1.PL_epname:ehp1.&rbt.
   &lbt.,SPEPA=:hp1.PL_epa:ehp1.&rbt.
   &lbt.,SPTOKEN=:hp1.PL_token:ehp1.&rbt.
   &lbt.,ESID=:hp1.esid_name:ehp1.&rbt.
   &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
   &lbt.,SIZELENGTH=:hp1.integer:ehp1.&rbt.
:emac.
.*****
:plist.
:pLt.esid_name
:pLd.the name of a service processor identifier, created by the
:#x.ES_ID:e#x.  macro, which will be used by the :#x.PL_ID:e#x. macro to
automatically obtain the value for :#x.esv:e#x. (see below).
:pLt.esva
:pLd.Specifies the label of a fullword in storage that contains (or
will contain) the address of the Environment Support Vector
(:#x.ESV:e#x.) created by the :#x.ES_START:e#x. function.
:pLt.sizelength
:pLd.An integer value from 1 and 4
that determines the size, in bytes, of all
values representing string lengths by the String Handler.  For example,
a :hp1.sizelength:ehp1. value of 4 would cause all lengths returned by
the String Handler to be 4 bytes in length.
:eplist.
:fh3.Examples
:p.
The following :#x.PL_ID:e#x. macro will associate everything required by
the Printline macros with the service processor identifier :#x.PL:e#x.,
as well as establish the :#x.sizelength:e#x. value for the Printline
session.
:xmp.
    PL_ID  ID=PL,
           SPEPNAME=&amp.PRINT_LINE,
           SPEPA=PWA_PL_ENTRY,
           SPTOKEN=PWA_PL_TOKEN,
           ESID=ES,
           ESVA=PWA_ESVA,
           SIZELENGTH=4
.sp 2
PWA_PL_ENTRY  DS    F         Entrypoint for Printline
PWA_PL_TOKEN  DS    F         Unique token for Printline session
PWA_ESVA      DS    F         Environment Support Vector address
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Force A Page Break'
:func id=plpgbrk  name='PL_PAGE_BREAK'.&temp.
.**********************************************************************
:p.
The :#x.PL_PAGE_BREAK:e#x. function causes a page break to occur
immediately.  As a result, footers (if any) are printed at the bottom
of the page, and the next call to :#x.PL_PRINT:e#x. or
:#x.PL_PRINT_FORMATTED:e#x. will cause headers (if any) to be
printed.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
PL_PAGE_BREAK ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.PL_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.PL_token:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.PL_epa:ehp1.,&cont.
(:hp1.PL_token:ehp1.,&amp.PL_PAGE_BREAK)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
.* There are no function-specific parameters for PL_PAGE_BREAK.
.*---------------------------------------------------------------------*
:fh3.Examples
The following Printline macro forces a page break to occur.
:xmp.
PL_PAGE_BREAK ID=PL
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Unformatted Print'
:func id=plprint  name='PL_PRINT'.&temp.
.**********************************************************************
:p.
The :#x.PL_PRINT:e#x. function prints an unformatted data line.
The data line must have an ASA carriage control character as its
first character,
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
PL_PRINT ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.PL_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.PL_token:ehp1.&rbt.
   ,STRING=&lbr.:hp1.print_string:ehp1. | &cont.
:hp1.(print_string,string_len):ehp1.&rbr.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.PL_epa:ehp1.,&cont.
(:hp1.PL_token:ehp1.,&amp.PL_PRINT,&cont.
:hp1.print_string:ehp1.,:hp1.string_len:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.print_string
:pLd.Specifies a character string to be printed.
:pLt.string_len
:pLd.Provides the length of :#x.print_string:e#x.. This operand is not
required on the :#x.PL_PRINT:e#x. macro if the macro can determine the
length attribute of :#x.print_string:e#x..
The
:hp1.string_len:ehp1. value may be coded as an integer or other
numeric term, or may refer to a field in storage of
:hp1.size_length:ehp1. bytes in length, containing the string's length.
:eplist.
.*---------------------------------------------------------------------*
:fh3.Examples
The following Printline macro causes an unformatted print to occur.
:xmp.
PL_PRINT ID=PL,&cont.
STRING==C"0 This data line will be double-spaced."
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Formatted Print'
:func id=plfmprt  name='PL_PRINT_FORMATTED'.&temp.
.**********************************************************************
:p.
The :#x.PL_PRINT_FORMATTED:e#x.
function uses the String Handler to
format and print a data line.
The data line (as produced by the String Handler)
must have an ASA carriage control character as its
first character.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
PL_PRINT_FORMATTED ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.PL_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.PL_token:ehp1.&rbt.
   ,CONTROL=&lbr.:hp1.format_string:ehp1. | &cont.
:hp1.(format_string,string_len):ehp1.&rbr.
   ,SOURCE=&lbr.:hp1.(source1,source2,...):ehp1.&rbr.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.PL_epa:ehp1.,&cont.
(:hp1.PL_token:ehp1.,&amp.PL_PRINT_FORMATTED,&cont.
:hp1.format_string:ehp1.,&cont.
:hp1.string_len:ehp1.
             &lbt.,:hp1.arguments:ehp1.&rbt.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.format_string
:pLd.Specifies the String Handler format string.
:pLt.string_len
:pLd.Provides the length of :#x.format_string:e#x.. This operand is not
required on the :#x.PL_PRINT_FORMATTED:e#x.
macro if the macro can determine the
length attribute of :#x.print_string:e#x..
The
:hp1.string_len:ehp1. value may be coded as an integer or other
numeric term, or may refer to a field in storage of
:hp1.size_length:ehp1. bytes in length, containing the string's length.
:pLt.source
:pLd.Specifies up to 50 substitution parameters to be processed by
the String Handler.
:eplist.
.*---------------------------------------------------------------------*
:fh3.Examples
The following Printline macro requests a formatted print.
:xmp.
PL_PRINT_FORMATTED ID=PL,
          STRING==C"0 Line &lbr.I&rbr.   A &lbr.CL20&rbr. print line.",
          SOURCE=(LINECTR,RPTNAME)
.sp
LINECTR  DC   F'35'
SPACING  DC   CL20"double-spaced"
:exmp.
:p.As a result, the following is produced:
:xmp.
 Line 35   A double-spaced print line.
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Query Remaining Lines On A Page'
:func id=plqleft  name='PL_QUERY_LINES_LEFT'.&temp.
.**********************************************************************
:p.
The :#x.PL_QUERY_LINES_LEFT:e#x.
function returns the number of lines remaining on the current page.
This is computed using the current line pointer and the footer space
reserved at the bottom
of the page. Note that
:#x.PL_QUERY_LINES_LEFT:e#x.
will cause headers to be printed if
there are no headers yet on the current page.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
PL_QUERY_LINES_LEFT ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.PL_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.PL_token:ehp1.&rbt.
   ,LINES=:hp1.lines_remaining:ehp1.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.PL_epa:ehp1.,&cont.
(:hp1.PL_token:ehp1.,&amp.PL_PAGE_BREAK,:hp1.lines_remaining:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.lines_remaining
:pLd.specifies the address of a fullword where the
:#x.PL_QUERY_LINES_LEFT:e#x. function will return the number of lines
remaining on the current page.
:eplist.
.*---------------------------------------------------------------------*
:fh3.Examples
The following Printline macro returns the lines remaining on the
current page.
:xmp.
     PL_QUERY_LINES_LEFT  ID=PL,LINES=PWA_Lines_Remaining
                :
                :
PWA_Lines_Remaining  DS   F
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Reserve Footer Space'
:func id=plrsvft  name='PL_RESERVE_FOOTER'.&temp.
.**********************************************************************
:p.
The :#x.PL_RESERVE_FOOTER:e#x.  function reserves a number of lines at
the bottom of each page for footer space.  If footers are used, the
value specified via
:#x.PL_RESERVE_FOOTER:e#x.  is used in conjunction with the
:#x.pagesize:e#x. parameter of
:#x.PL_START:e#x. to determine when and where page footers need to be
printed.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
PL_RESERVE_FOOTER ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.PL_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.PL_token:ehp1.&rbt.
   ,LINES=:hp1.footer_space:ehp1.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.PL_epa:ehp1.,&cont.
(:hp1.PL_token:ehp1.,&amp.PL_RESERVE_FOOTER,&cont.
:hp1.footer_space:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.footer_space
:pLd.Specifies the number of lines to be reserved at the bottom of
each page for footer space.
:eplist.
.*---------------------------------------------------------------------*
:fh3.Examples
The following Printline macro requests 5 lines of
footer space to be reserved.
:xmp.
PL_RESERVE_FOOTER ID=PL,&cont.
LINES=5
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Delete Footer Definitions'
:func id=plrstft  name='PL_RESET_FOOTER'.&temp.
.**********************************************************************
:p.
The :#x.PL_RESET_FOOTER:e#x.
function deletes one or all existing footer definitions.
The footers are referred to by their line number: if a line number
of zero is specified, all existing footer definitions are deleted.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
PL_RESET_FOOTER ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.PL_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.PL_token:ehp1.&rbt.
   ,LINE=:hp1.line_number:ehp1.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.PL_epa:ehp1.,&cont.
(:hp1.PL_token:ehp1.,&amp.PL_RESET_FOOTER,&cont.
:hp1.line_number:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.line_number
:pLd.Specifies an integer value denoting the footer line to be deleted.
A :hp1.line_number:ehp1. value of zero requests all existing footer
definitions to be deleted.
:eplist.
.*---------------------------------------------------------------------*
:fh3.Examples
The following Printline macro requests the footer created as line 10
to be deleted.
:xmp.
PL_RESET_FOOTER ID=PL,&cont.
LINE=10
:exmp.
This example requests all footer definitions to be deleted.
:xmp.
PL_RESET_FOOTER ID=PL,&cont.
LINE=0
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Delete Header Definitions'
:func id=plrsthd  name='PL_RESET_HEADER'.&temp.
.**********************************************************************
:p.
The :#x.PL_RESET_HEADER:e#x.
function deletes one or all existing header definitions.
The headers are referred to by their line number: if a line number
of zero is specified, all existing header definitions are deleted.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
PL_RESET_HEADER ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.PL_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.PL_token:ehp1.&rbt.
   ,LINE=:hp1.line_number:ehp1.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.PL_epa:ehp1.,&cont.
(:hp1.PL_token:ehp1.,&amp.PL_RESET_HEADER,&cont.
:hp1.line_number:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.line_number
:pLd.Specifies an integer value denoting the header line to be deleted.
A :hp1.line_number:ehp1. value of zero requests all existing header
definitions to be deleted.
:eplist.
.*---------------------------------------------------------------------*
:fh3.Examples
The following Printline macro requests the header created as line 10
to be deleted.
:xmp.
PL_RESET_HEADER ID=PL,&cont.
LINE=10
:exmp.
This example requests all header definitions to be deleted.
:xmp.
PL_RESET_HEADER ID=PL,&cont.
LINE=0
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Establish Simple Footers'
:func id=plsetft  name='PL_SET_FOOTER'.&temp.
.**********************************************************************
:p.
The :#x.PL_SET_FOOTER:e#x. function defines a footer line to the
Printline session.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
PL_SET_FOOTER ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.PL_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.PL_token:ehp1.&rbt.
   ,LINE=:hp1.line_number:ehp1.
   ,STRING=&lbr.:hp1.string_spec:ehp1. | &cont.
:hp1.(string_spec,string_len):ehp1.&rbr.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.PL_epa:ehp1.,(:hp1.PL_token:ehp1.,&amp.PL_SET_FOOTER,&cont.
:hp1.line_number:ehp1.,&cont.
:hp1.string_spec:ehp1.,
             :hp1.string_len:ehp1.)
.*===> If there are alternate forms, where the parameter list is
.*===> significantly different depending on the first few parameter
.*===> values, do something like the following:
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.line_number
:pLd.Specifies an integer value denoting this footer line's relative
position among other footer lines.  Footer lines are printed in
ascending line number order.  The line numbers need not be contiguous:
indeed, it may be desirable to 'insert' footer definitions under
program control.  If a line number specifies an already-defined footer
line, that footer line's definition is replaced.
The :hp1.line_number:ehp1. parameter may be coded as an integer or as
the address of a fullword.
:pLt.string_spec
:pLd.Specifies the character string, including ASA carriage control,
for the footer definition. The :hp1.string_spec:ehp1. may be coded as a
character literal or as the address of a character string.
:pLt.string_len
:pLd.Specifies the length of the footer's :hp1.string_spec:ehp1. value.
If :hp1.string_len:ehp1. is not specified, the PL_SET_FOOTER macro
will try to use the length attribute of :hp1.string_spec:ehp1..
The
:hp1.string_len:ehp1. value may be coded as an integer or other
numeric term, or may refer to a field in storage of
:hp1.size_length:ehp1. bytes in length, containing the string's length.
:eplist.
.*---------------------------------------------------------------------*
.* Optional sections for describing how to use the function/macro.
.*---------------------------------------------------------------------*
:fh3.Examples
:p.The following example will define a simple footer line.  Since the
first character of the footer string is a '0', this footer line will
always be double-spaced (i.e. preceded by a blank line).
The footer's line number is set to 10, for
subsequent reference by other
:#x.PL_SET_FOOTER:e#x.,
:#x.PL_SET_FORMATTED_FOOTER:e#x., and
:#x.PL_RESET_FOOTER:e#x. macros.
:xmp.
PL_SET_FOOTER ID=PL,
          LINE=10,
          STRING==C"0 This footer line causes a double-space to occur."
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Establish Formatted Footers'
:func id=plfmtft  name='PL_SET_FORMATTED_FOOTER'.&temp.
.**********************************************************************
:p.
The :#x.PL_SET_FORMATTED_FOOTER:e#x.
function defines a footer line to the
Printline session. The footer line will be formatted by the
String Handler before it is printed, thus allowing variable data to
be included in report footers.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
PL_SET_FORMATTED_FOOTER ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.PL_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.PL_token:ehp1.&rbt.
   ,LINE=:hp1.line_number:ehp1.
   ,CONTROL=&lbr.:hp1.format_spec:ehp1. | &cont.
:hp1.(fmtspec,fmtlen):ehp1.&rbr.
   &lbt.,PAGENUM=:hp1.page_offset:ehp1.&rbt.
   &lbt.,SOURCE=&lbr.:hp1.source | &cont.
:hp1.(source1,source2,...):ehp1.&rbr.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.PL_epa:ehp1.,&cont.
(:hp1.PL_token:ehp1.,&amp.PL_SET_FORMATTED_FOOTER,&cont.
:hp1.line_number:ehp1.,&cont.
:hp1.format_spec:ehp1.,
             :hp1.format_length:ehp1.,&cont.
&lbr.:hp1.pagedisp:ehp1.,&cont.
:hp1.arguments:ehp1.&rbr.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.line_number
:pLd.Specifies an integer value denoting this footer line's relative
position among other footer lines.  Footer lines are printed in
ascending line number order.  The line numbers need not be contiguous:
indeed, it may be desirable to 'insert' footer definitions under
program control.  If a line number specifies an already-defined footer
line, that footer line's definition is replaced.
The :hp1.line_number:ehp1. parameter may be coded as an integer or as
the address of a fullword.
:pLt.format_spec
:pLd.Specifies a format specification string,
including ASA carriage control,
for the footer definition. The :hp1.format_spec:ehp1. may be coded as a
character literal or as the address of a character string.
:pLt.format_length
:pLd.Specifies the length of the footer's :hp1.format_spec:ehp1. value.
If :hp1.format_length:ehp1. is not specified, the
PL_SET_FORMATTED_FOOTER macro
will try to use the length attribute of :hp1.format_spec:ehp1..  The
:hp1.format_length:ehp1. value may be coded as an integer or other
numeric term, or may refer to a field in storage of
:hp1.size_length:ehp1. bytes in length, containing the string's length.
:pLt.page_disp
:pLd.Specifies the displacement into the list of
:hp1.source:ehp1. parameters
where the Printline service processor will find a page number.
For example, a :hp1.page_disp:ehp1. value of "3" tells Printline that
the third :hp1.source:ehp1. parameter should be treated as a page
number.  Page numbers defined in this way are auto-incremented by
Printline as page ejects occur.
:pLt.source
:pLd.Specifies source values for the String Handler to substitute into
the format specification provided by :hp1.format_spec:ehp1.
Up to 50 substitution values may be specified.
:eplist.
.*---------------------------------------------------------------------*
:fh3.Examples
The following Printline macro will establish a formatted footer line.
The definition includes a page number (fullword
"PAGECTR") which will be
formatted as the first substitution parameter in the format string.  The
PAGECTR field is also auto-incremented at each page eject.
:xmp.
PL_SET_FORMATTED_FOOTER ID=PL,
              LINE=10,
              CONTROL=FORMAT,
              PAGENUM=1,
              SOURCE=(PAGECTR,RPTNAME)
.sp
PAGECTR  DC   F'0'
RPTNAME  DC   CL20"Macneil-Lehrer"
FORMAT   DC   C"0 Page &lbr.I&rbr.   The &lbr.CL20&rbr. Report."
:exmp.
The resulting string is printed as part of each subsequent page's
footer:
:xmp.
  Page 1     The MacNeil-Lehrer Report.
:exmp.
Because of the carriage control of '0', this footer line will always be
preceded by a blank line.
:efunc.
.**********************************************************************
.se temp = 'Establish Formatted Headers'
:func id=plfmthd  name='PL_SET_FORMATTED_HEADER'.&temp.
.**********************************************************************
:p.
The :#x.PL_SET_FORMATTED_HEADER:e#x.
function defines a header line to the
Printline session. The header line will be formatted by the
String Handler before it is printed, thus allowing variable data to
be included in report headers.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
PL_SET_FORMATTED_HEADER ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.PL_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.PL_token:ehp1.&rbt.
   ,LINE=:hp1.line_number:ehp1.
   ,CONTROL=&lbr.:hp1.format_spec:ehp1. | &cont.
:hp1.(fmtspec,fmtlen):ehp1.&rbr.
   &lbt.,PAGENUM=:hp1.page_offset:ehp1.&rbt.
   &lbt.,SOURCE=&lbr.:hp1.source | &cont.
:hp1.(source1,source2,...):ehp1.&rbr.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.PL_epa:ehp1.,&cont.
(:hp1.PL_token:ehp1.,&amp.PL_SET_FORMATTED_HEADER,&cont.
:hp1.line_number:ehp1.,
             :hp1.format_spec:ehp1.,&cont.
:hp1.format_length:ehp1.,&cont.
&lbr.:hp1.pagedisp:ehp1.,&cont.
:hp1.arguments:ehp1.&rbr.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.line_number
:pLd.Specifies an integer value denoting this header line's relative
position among other header lines.  Header lines are printed in
ascending line number order.  The line numbers need not be contiguous:
indeed, it may be desirable to 'insert' header definitions under
program control.  If a line number specifies an already-defined header
line, that header line's definition is replaced.
The :hp1.line_number:ehp1. parameter may be coded as an integer or as
the address of a fullword.
:pLt.format_spec
:pLd.Specifies a format specification string,
including ASA carriage control,
for the header definition. The :hp1.format_spec:ehp1. may be coded as a
character literal or as the address of a character string.
:pLt.format_length
:pLd.Specifies the length of the header's :hp1.format_spec:ehp1. value.
If :hp1.format_length:ehp1. is not specified, the
PL_SET_FORMATTED_HEADER macro
will try to use the length attribute of :hp1.format_spec:ehp1..  The
:hp1.format_length:ehp1. value may be coded as an integer or other
numeric term, or may refer to a field in storage of
:hp1.size_length:ehp1. bytes in length, containing the string's length.
:pLt.page_disp
:pLd.Specifies the displacement into the list of
:hp1.source:ehp1. parameters
where the Printline service processor will find a page number.
For example, a :hp1.page_disp:ehp1. value of "3" tells Printline that
the third :hp1.source:ehp1. parameter should be treated as a page
number.  Page numbers defined in this way are auto-incremented by
Printline as page ejects occur.
:pLt.source
:pLd.Specifies source values for the String Handler to substitute into
the format specification provided by :hp1.format_spec:ehp1.
Up to 50 substitution values may be specified.
:eplist.
.*---------------------------------------------------------------------*
:fh3.Examples
The following Printline macro will establish a formatted header line.
The definition includes a page number (fullword
"PAGECTR") which will be
formatted as the first substitution parameter in the format string.  The
PAGECTR field is also auto-incremented at each page eject.
:xmp.
PL_SET_FORMATTED_HEADER ID=PL,
              LINE=10,
              control=FORMAT,
              PAGENUM=1,
              SOURCE=(PAGECTR,RPTNAME)
.sp
PAGECTR  DC   F'0'
RPTNAME  DC   CL20"Macneil-Lehrer"
FORMAT   DC   C"1 Page &lbr.I&rbr.   The &lbr.CL20&rbr. Report."
:exmp.
The resulting string is printed as part of each subsequent page's
header:
:xmp.
  Page 1     The MacNeil-Lehrer Report.
:exmp.
Because of the carriage control of '1', this header line will always be
printed at the top of a new page.
:efunc.
.**********************************************************************
.se temp = 'Establish Simple Headers'
:func id=plsethd  name='PL_SET_HEADER'.&temp.
.**********************************************************************
:p.
The :#x.PL_SET_HEADER:e#x. function defines a header line to the
Printline session.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
PL_SET_HEADER ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.PL_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.PL_token:ehp1.&rbt.
   ,LINE=:hp1.line_number:ehp1.
   ,STRING=&lbr.:hp1.string_spec:ehp1. | &cont.
:hp1.(string_spec,string_len):ehp1.&rbr.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.PL_epa:ehp1.,(:hp1.PL_token:ehp1.,&amp.PL_SET_HEADER,&cont.
:hp1.line_number:ehp1.,&cont.
:hp1.string_spec:ehp1.,
              :hp1.string_len:ehp1.)
.*===> If there are alternate forms, where the parameter list is
.*===> significantly different depending on the first few parameter
.*===> values, do something like the following:
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.line_number
:pLd.Specifies an integer value denoting this header line's relative
position among other header lines.  Header lines are printed in
ascending line number order.  The line numbers need not be contiguous:
indeed, it may be desirable to 'insert' header definitions under
program control.  If a line number specifies an already-defined header
line, that header line's definition is replaced.
The :hp1.line_number:ehp1. parameter may be coded as an integer or as
the address of a fullword.
:pLt.string_spec
:pLd.Specifies the character string, including ASA carriage control,
for the header definition. The :hp1.string_spec:ehp1. may be coded as a
character literal or as the address of a character string.
:pLt.string_len
:pLd.Specifies the length of the header's :hp1.string_spec:ehp1. value.
If :hp1.string_len:ehp1. is not specified, the PL_SET_HEADER macro
will try to use the length attribute of :hp1.string_spec:ehp1..  The
:hp1.string_len:ehp1. value may be coded as an integer or other
numeric term, or may refer to a field in storage of
:hp1.size_length:ehp1. bytes in length, containing the string's length.
:eplist.
.*---------------------------------------------------------------------*
.* Optional sections for describing how to use the function/macro.
.*---------------------------------------------------------------------*
:fh3.Examples
:p.The following example will define a simple header line.  Since the
first character of the header string is a '1', this header line will
always cause a page eject.  The header's line number is set to 10, for
subsequent reference by other
:#x.PL_SET_HEADER:e#x.,
:#x.PL_SET_FORMATTED_HEADER:e#x., and
:#x.PL_RESET_HEADER:e#x. macros.
:xmp.
PL_SET_HEADER ID=PL,
              LINE=10,
              STRING==C"1 This header line causes a page eject."
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Begin A Printline Session'
:func id=plstart name='PL_START'.&temp.
.**********************************************************************
:p.
The :#x.PL_START:e#x. function establishes
a new Printline session and returns its session identifier in the
:hp1.pl_token:ehp1. parameter.  The page size, maximum line length
and size of fields specifying string lengths are determined by the
:hp1.pagesize:ehp1., :hp1.maxlinesize:ehp1. and :hp1.sizelength:ehp1.
operands, respectively.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
PL_START ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.PL_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.PL_token:ehp1.&rbt.
   &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
   ,DDNAME=:hp1.ddname:ehp1.
   &lbt.,PAGESIZE=&lbr.:hp1.pagesize:ehp1. | &cont.
:hp2.66:ehp2.&rbr.&rbt.
   &lbt.,MAXLNSZ=&lbr.:hp1.maximum_linesize:ehp1. | &cont.
:hp2.133:ehp2.&rbr.&rbt.
   &lbt.,SIZELENGTH=&lbr.:hp1.integer:ehp1. | &cont.
:hp2.2:ehp2.&rbr.&rbt.
   &lbt.,OPTIONS=(:hp1.option_list:ehp1.)&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.PL_epa:ehp1.,(:hp1.PL_token:ehp1.,&amp.PL_START,&cont.
:hp1.esva:ehp1.,&cont.
:hp1.ddname:ehp1.,&cont.
:hp1.pagesize:ehp1.,&cont.
:hp1.maxlinesize:ehp1.,
              :hp1.sizelength:ehp1.,:hp1.option_byte:ehp1.)
.*===> If there are alternate forms, where the parameter list is
.*===> significantly different depending on the first few parameter
.*===> values, do something like the following:
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.esva
:pLd.Specifies the label of a fullword in storage that contains the
address of the Environment Support Vector (ESV) created by the
ES_START function.
:pLt.ddname
:pLd.Specifies the DDname that this Printline session will use to
write its
output.  The default DCB attributes are RECFM=VBA,LRECL=maxlinesize,
BLKSIZE=LRECL+4; however, any DCB attribute combination acceptable
to the OS File Handler is acceptable to Printline.
:pLt.pagesize
:pLd.Specifies the number of lines that the report page should contain.
This value is used to determine when Printline should print headers and
footers, as well as increment page counters.
:pLt.maxlinesize
:pLd.Specifies a field containing the maximum linesize that Printline
should write.  This value will become the logical record length of the
report file produced.  Should a data, header or footer line's length
exceed the maxlinesize value, the line will be truncated and printed,
and a truncation error will be returned.
:pLt.sizelength
:pLd.An integer value from 1 and 4 that determines the size, in bytes,
of all values representing string lengths by the String Handler.  For
example, a :hp1.sizelength:ehp1. value of 4 would cause all lengths
returned by the String Handler to be 4 bytes in length.
:pLt.option_list
:pLd.A list of additional options for this PrintLine session. If
multiple option values are specified, they must be enclosed in
parentheses.
The only
option currently supported is :hp1.FOLD:ehp1..
:ul.
:li.:hp2.FOLD:ehp2. - All output produced by PrintLine should be
folded to uppercase.  If using the CALLX form to call
:hp1.PL_START:ehp1., the FOLD option corresponds to a bit setting of
X'80' in the option byte.
:eul.
:eplist.
.*---------------------------------------------------------------------*
.* Optional sections for describing how to use the function/macro.
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
.* Examples showing how to use it and neat ways to take advantage of
.* the function's capabilities.
.*
.*===> If one or two separate examples are being done, simply use
.*===>
.*===> :fh3.Example 1
.*===>   ...example 1 stuff...
.*===> :fh3.Example 2
.*===>   ...example 2 stuff...
.*===>
.*===> If a whole system of related examples are being done, use
.*===>
.*===> :fh3.Examples
.*===>   ....description general to all examples.
.*===> :h5.Example 1
.*===>   ...example 1 stuff...
.*===> :h5.Example 2
.*===>   ...example 2 stuff...
.*===>
.*---------------------------------------------------------------------*
:fh3.Examples
:p.
The following :#x.PL_START:e#x.
macro will initialize a Printline session.  Invoking PL_START will
cause the following to occur:
:ul compact.
:li.The SPTOKEN value is set to the new Printline session's unique
token value.
:li.Blocksize information from the DD statement referred to by
:#x.ddname:e#x. is merged into Printline's report DCB.
:li.The report file referred to by
:#x.ddname:e#x. is opened.
:li.All headers, footers and data lines are to be converted to
uppercase.
:eul.
:xmp.
    PL_START ID=PL,
             SPEPNAME=&amp.PRINT_LINE,
             SPEPA=PWA_PL_ENTRY,
             SPTOKEN=PWA_PL_TOKEN,
             ESID=ES,
             ESVA=PWA_ESVA,
             SIZELENGTH=4,
             DDNAME==C'SYSPRINT',
             OPTIONS=(FOLD)
.sp 2
PWA_PL_ENTRY  DS    F         Entrypoint for Printline
PWA_PL_TOKEN  DS    F         Unique token for Printline session
PWA_ESVA      DS    F         Environment Support Vector address
:exmp.
:p.In this example, the :#x.SPEPNAME:e#x., :#x.SPEPA:e#x.,
:#x.SPTOKEN:e#x., :#x.ESID:e#x., :#x.ESVA:e#x. and :#x.SIZELENGTH:e#x.
parameters are included only for completeness.  They may be specified
on the :#x.PL_ID:e#x. macro and omitted from the call to
:#x.PL_START:e#x., as follows:
:xmp.
    PL_START ID=PL,
             DDNAME==C'SYSPRINT'
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Terminate A Printline Session'
:func id=plterm name='PL_TERMINATE'.&temp.
.**********************************************************************
:p.
The :#x.PL_TERMINATE:e#x. function concludes
the Printline session identified by the
:hp1.pl_token:ehp1. parameter, and releases any resources held
by the Printline service processor.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
PL_TERMINATE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.PL_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.PL_token:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.PL_epa:ehp1.,(:hp1.PL_token:ehp1.,&amp.PL_TERMINATE)
.*===> If there are alternate forms, where the parameter list is
.*===> significantly different depending on the first few parameter
.*===> values, do something like the following:
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
.* There are no function-specific parameters for PL_TERMINATE.
.*---------------------------------------------------------------------*
.* Optional sections for describing how to use the function/macro.
.*---------------------------------------------------------------------*
.*===> If one or two separate examples are being done, simply use
.*===>
.*===> :fh3.Example 1
.*===>   ...example 1 stuff...
.*===> :fh3.Example 2
.*===>   ...example 2 stuff...
.*===>
.*===> If a whole system of related examples are being done, use
.*===>
.*===> :fh3.Examples
.*===>   ....description general to all examples.
.*===> :h5.Example 1
.*===>   ...example 1 stuff...
.*===> :h5.Example 2
.*===>   ...example 2 stuff...
.*===>
.*---------------------------------------------------------------------*
:fh3.Examples
:p.The following :#x.PL_TERMINATE:e#x. macro will cause Printline to
close its report file and release any resources that it acquired.
:xmp.
PL_TERMINATE ID=PL
:exmp.
:efunc.
