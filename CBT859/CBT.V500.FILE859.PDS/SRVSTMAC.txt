*---------------------------------------------------------------------*
*  Copyright 2011 by Clemson University Research Foundation           *
*                                                                     *
*  Licensed under the Apache License, Version 2.0 (the "License");    *
*  you may not use this file except in compliance with the License.   *
*  You may obtain a copy of the License in this library as member     *
*  $LICENSE, or from                                                  *
*                                                                     *
*      http://www.apache.org/licenses/LICENSE-2.0                     *
*                                                                     *
*  Unless required by applicable law or agreed to in writing,         *
*  software distributed under the License is distributed on an "AS    *
*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either    *
*  express or implied.  See the License for the specific language     *
*  governing permissions and limitations under the License.           *
*---------------------------------------------------------------------*
 TITLE 'SRVSTMAC: String Handler Service Processor Symbols && Macros.'
*---------------------------------------------------------------------*
*
*  Copy File:  SRVSTMAC
*
*  Purpose:    String Handler service processor symbols and macros.
*
*  Description: See "Service Processors User's Guide and Reference".
*
*  Change
*  History:    04/04/89 MJM - New
*              06/18/07 MJM - Added return codes.
*
*---------------------------------------------------------------------*
*
***********************************************************************
***********************************************************************
**                                                                   **
**                     Symbol Definitions                            **
**                                                                   **
***********************************************************************
***********************************************************************
*
* Global declarations for all string handler symbols.
*
 GBLC &STRING_HANDLER
 GBLC &ST_STRING_HANDLER
 GBLA &ST_START,&ST_TERMINATE,&ST_FORMAT,&ST_FORMAT2
 GBLA &ST_STRING_TO_INTEGER,&ST_INTEGER_TO_STRING
 GBLA &ST_SUCCESS,&ST_INVALID_FUNCTION
 GBLA &ST_INVALID_SIZELENGTH,&ST_TRUNCATED
 GBLA &ST_OVERLAP
 GBLA &ST_INTERNAL_ERROR
 GBLA &ST_INVALID_SOURCE_LENGTH,&ST_INVALID_SOURCE_FORMAT
 GBLA &ST_MAGNITUDE
 GBLA &ST_FORMAT_COLUMN_TOO_LARGE,&ST_FORMAT_COLUMN_TOO_SMALL
 GBLA &ST_FORMAT_LENGTH_TOO_LARGE,&ST_FORMAT_LENGTH_TOO_SMALL
 GBLA &ST_FORMAT_MULTIPLE_TOO_SMALL
 GBLA &ST_FORMAT_PRECISION_TOO_SMALL,&ST_FORMAT_MISSING_ARGUMENT
 GBLA &ST_FORMAT_MISSING_COLUMN_VALUE,&ST_FORMAT_MISSING_LENGTH_VALUE
 GBLA &ST_FORMAT_MISSING_MULTIPLE_VALUE
 GBLA &ST_FORMAT_MISSING_PRECISION_VALUE,&ST_FORMAT_TYPE_REQUIRED
 GBLA &ST_FORMAT_SPEC_EMPTY,&ST_FORMAT_SPEC_NOT_ENDED
 GBLA &ST_FORMAT_UNSUPPORTED_KEYWORD,&ST_FORMAT_UNSUPPORTED_TYPE
 GBLA &ST_FORMAT_UNSUPPORTED_ITEM,&ST_FORMAT_PAD_TYPE_CONFLICT
 GBLA &ST_FORMAT_KEYWORD_CONFLICT,&ST_FORMAT_QST_TYPE_CONFLICT
 GBLA &ST_FORMAT_FILL_TOO_LONG
 GBLA &ST_BYTE,&ST_HALFWORD,&ST_THREE_BYTE,&ST_FULLWORD
*
* Entry Point name for the string handler.
*
&STRING_HANDLER                         SETC '''SRVST   '''
&ST_STRING_HANDLER                      SETC '''SRVST   '''
*
* Function codes.
*
&ST_START                               SETA 1
&ST_TERMINATE                           SETA 2
&ST_FORMAT                              SETA 3
&ST_STRING_TO_INTEGER                   SETA 4
&ST_INTEGER_TO_STRING                   SETA 5
&ST_FORMAT2                             SETA 6
*
* Return codes.
*
&ST_SUCCESS                             SETA 0
&ST_INVALID_FUNCTION                    SETA 1
&ST_INVALID_SIZELENGTH                  SETA 2
&ST_TRUNCATED                           SETA 3
&ST_OVERLAP                             SETA 4
&ST_INTERNAL_ERROR                      SETA 5
&ST_WRONG_NUMBER_OF_PARAMETERS          SETA 6
&ST_INVALID_SOURCE_LENGTH               SETA 7
&ST_INVALID_SOURCE_FORMAT               SETA 8
&ST_MAGNITUDE                           SETA 9
&ST_FORMAT_COLUMN_TOO_LARGE             SETA 10
&ST_FORMAT_COLUMN_TOO_SMALL             SETA 11
&ST_FORMAT_LENGTH_TOO_LARGE             SETA 12
&ST_FORMAT_LENGTH_TOO_SMALL             SETA 13
&ST_FORMAT_PRECISION_TOO_SMALL          SETA 14
&ST_FORMAT_MISSING_ARGUMENT             SETA 15
&ST_FORMAT_MISSING_COLUMN_VALUE         SETA 16
&ST_FORMAT_MISSING_LENGTH_VALUE         SETA 17
&ST_FORMAT_MISSING_PRECISION_VALUE      SETA 18
&ST_FORMAT_TYPE_REQUIRED                SETA 19
&ST_FORMAT_SPEC_EMPTY                   SETA 20
&ST_FORMAT_SPEC_NOT_ENDED               SETA 21
&ST_FORMAT_UNSUPPORTED_KEYWORD          SETA 22
&ST_FORMAT_UNSUPPORTED_TYPE             SETA 23
&ST_FORMAT_UNSUPPORTED_ITEM             SETA 24
&ST_FORMAT_PAD_TYPE_CONFLICT            SETA 25
&ST_FORMAT_FILL_TOO_LONG                SETA 26
&ST_FORMAT_MISSING_MULTIPLE_VALUE       SETA 27
&ST_FORMAT_MULTIPLE_TOO_SMALL           SETA 28
&ST_FORMAT_MULTIPLE_NOT_ALLOWED         SETA 29
&ST_FORMAT_KEYWORD_CONFLICT             SETA 30
&ST_FORMAT_QST_TYPE_CONFLICT            SETA 31
 DEFUCOND MACRO=SRV##RC,NAME=ST_SUCCESS
 DEFUCOND MACRO=SRV##RC,NAME=ST_INVALID_FUNCTION
 DEFUCOND MACRO=SRV##RC,NAME=ST_INVALID_SIZELENGTH
 DEFUCOND MACRO=SRV##RC,NAME=ST_TRUNCATED
 DEFUCOND MACRO=SRV##RC,NAME=ST_OVERLAP
 DEFUCOND MACRO=SRV##RC,NAME=ST_INTERNAL_ERROR
 DEFUCOND MACRO=SRV##RC,NAME=ST_WRONG_NUMBER_OF_PARAMETERS
 DEFUCOND MACRO=SRV##RC,NAME=ST_INVALID_SOURCE_LENGTH
 DEFUCOND MACRO=SRV##RC,NAME=ST_INVALID_SOURCE_FORMAT
 DEFUCOND MACRO=SRV##RC,NAME=ST_MAGNITUDE
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_COLUMN_TOO_LARGE
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_COLUMN_TOO_SMALL
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_LENGTH_TOO_LARGE
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_LENGTH_TOO_SMALL
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_MISSING_MULTIPLE_VALUE
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_MULTIPLE_TOO_SMALL
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_PRECISION_TOO_SMALL
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_MISSING_ARGUMENT
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_MISSING_COLUMN_VALUE
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_MISSING_LENGTH_VALUE
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_MISSING_PRECISION_VALUE
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_TYPE_REQUIRED
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_SPEC_EMPTY
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_SPEC_NOT_ENDED
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_UNSUPPORTED_KEYWORD
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_UNSUPPORTED_TYPE
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_UNSUPPORTED_ITEM
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_PAD_TYPE_CONFLICT
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_FILL_TOO_LONG
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_KEYWORD_CONFLICT
 DEFUCOND MACRO=SRV##RC,NAME=ST_FORMAT_QST_TYPE_CONFLICT
*
* Valid SIZELENGTH values.
*
&ST_BYTE                                SETA 1
&ST_HALFWORD                            SETA 2
&ST_THREE_BYTE                          SETA 3
&ST_FULLWORD                            SETA 4
                        EJECT
***********************************************************************
***********************************************************************
**                                                                   **
**                     Macro Definitions                             **
**                                                                   **
***********************************************************************
***********************************************************************
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ST_ID                                                      *
*                                                                     *
* Purpose: Establish default values for a specific service processor  *
*          and associate them with the specified ID name. The values  *
*          are stored in the following created global variables:      *
*                                                                     *
* Variable Name                     Description                       *
* -------------  ---------------------------------------------------- *
* #$&ID.$#IDMAC  Name of macro that created the ID: ST_ID.            *
* #$&ID.$#ESID   Service processor's Environment Support ID.          *
* #$&ID.$#EPN    Tag for Service processor's Entry Point Name.        *
* #$&ID.$#EPA    Tag for Service processor's Entry Point Address.     *
* #$&ID.$#TKN    Tag for Service processor's Entry Point Token.       *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ST_ID &ID=,&ESVA=,&SPEPNAME=,&SPEPA=,&SPTOKEN=,&ESID=,        +
               &SIZELENGTH=,&STRING=,&RESULTLEN=
         LCLC  &V_STRING(2),&V_RESULTLEN,&V_SIZELENGTH
         LCLC  &L_EPNAME
         GBLC  &STRING_HANDLER
.*
.* If no EPNAME was specified, use the generic String Handler.
.*
&L_EPNAME SETC '&SPEPNAME'
          AIF  ('&L_EPNAME' NE '').PAST_EPN
&L_EPNAME SETC '&STRING_HANDLER'
.PAST_EPN ANOP
.*
.* Invoke SRV##ID to create globals used by all ID's.
.*
         SRV##ID SET,                                                  +
               ID=&ID.,IDMAC=ST_ID,ESID=&ESID.,SPEPNAME=&L_EPNAME,     +
               SPEPA=&SPEPA,SPTOKEN=&SPTOKEN.
.*
.* Establish defaults for parameters specific to the string handler.
.*
&V_SIZELENGTH    SETC '#$&ID.$#SIZELENGTH'  Variable for SIZELENGTH=.
                 GBLC &(&V_SIZELENGTH)      Declare global variable.
&(&V_SIZELENGTH) SETC ''                    Set sizelength's default.
                 AIF  ('&SIZELENGTH' EQ '').GOT_SIZELENGTH
                 AIF  (T'&SIZELENGTH EQ 'N').SL_NUMERIC
                 MNOTE 8,'If SIZELENGTH is specified on the ST_ID macro+
               , it must be a self-defining numeric value.'
                 AGO   .GOT_SIZELENGTH
.SL_NUMERIC      ANOP
&(&V_SIZELENGTH) SETC '&SIZELENGTH'         Copy value (or nulls).
.GOT_SIZELENGTH  ANOP
.*
&V_STRING(1)     SETC '#$&ID.$#STRING1'     Variable for STRING=.
&V_STRING(2)     SETC '#$&ID.$#STRING2'     Variable for STRING=.
                 GBLC &(&V_STRING(1)),&(&V_STRING(2))
.*
&(&V_STRING(1))  SETC '&STRING(1)'
&(&V_STRING(2))  SETC '&STRING(2)'
.*
&V_RESULTLEN     SETC '#$&ID.$#RESULTLEN'   Variable for RESULTLEN=.
                 GBLC &(&V_RESULTLEN)
&(&V_RESULTLEN)  SETC '&RESULTLEN'
                 MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ST_START                                                   *
* Purpose: Generate code to start a new string handler session.       *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ST_START &ID=,&SPEPA=,&SPTOKEN=,&ESVA=,&SIZELENGTH=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ST_START                  SETC in open code.
         LCLC  &V_SIZELENGTH
         LCLC  &L_SIZELENGTH
.*
.* Obtain service processor ID values and start string handler.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN,ESVA),                    +
               ID=&ID,IDMAC=ST_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN,       +
               ESVA=&ESVA.
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Obtain the value for the SIZELENGTH keyword.
.*
&V_SIZELENGTH    SETC '#$&ID.$#SIZELENGTH'  Variable for SIZELENGTH=.
                 GBLC &(&V_SIZELENGTH)      Declare global variable.
&L_SIZELENGTH    SETC '&(&V_SIZELENGTH)'    Set default value.
                 AIF  ('&L_SIZELENGTH' EQ '').SL_OKAY
                 AIF  ('&SIZELENGTH' EQ '').SL_DONE
                 AIF  ('&L_SIZELENGTH' EQ '&SIZELENGTH').SL_DONE
                 MNOTE 4,'Warning: SIZELENGTH was specified with a diff+
               erent value on the ST_ID ID=&ID. instruction.'
.SL_OKAY         ANOP
&L_SIZELENGTH    SETC '&SIZELENGTH'
.SL_DONE         ANOP
.*
.* Generate the call to the ST_START function.
.*
         MVC   &#_IDTKN,=F'0'            | Insure TOKEN = 0.
         ##PLIST START
         ##PLIST PARM,&#_IDTKN,&ST_START,&#_IDESVA
         AIF     ('&L_SIZELENGTH' EQ '').CALLX
.PARM1   ##PLIST PARM,&L_SIZELENGTH
.CALLX   ##PLIST END,VL                  | Finish off parm list.
         CALLX   &#_IDEPA                | Invoke String Handler.
         MEXIT
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ST_TERMINATE                                               *
* Purpose: Generate code to terminate a string handler session.       *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ST_TERMINATE &ID=,&SPEPA=,&SPTOKEN=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ST_TERMINATE              SETC in open code.
.*
.* Obtain service processor ID values and terminate service processor.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=ST_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         CALLX &#_IDEPA,(&#_IDTKN,&ST_TERMINATE),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ST_FORMAT                                                  *
* Purpose: Build a formatted string from arguments, based on a format *
*          control string.                                            *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ST_FORMAT &ID=,&SPEPA=,&SPTOKEN=,                             +
               &CONTROL=,&SOURCE=,&SOURCELIST=,&STRING=,&RESULTLEN=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ST_FORMAT,&ST_FORMAT2
         LCLC  &C_ADDR,&C_LEN
         LCLC  &S_ADDR,&S_LEN
         LCLC  &V_STRING(2),&V_RESULTLEN,&V_SIZELENGTH
         LCLC  &L_STRING(2),&L_RSLTLEN
         LCLA  &N
         LCLC  &KEYWORD
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=ST_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
&V_SIZELENGTH  SETC '#$&ID.$#SIZELENGTH'  Variable for SIZELENGTH=.
               GBLC &(&V_SIZELENGTH)      Declare global variable.
.*
.* If STRING= or RESULTLEN= are missing, supply default values.
.*
&L_STRING(1)    SETC '&STRING(1)'
&L_STRING(2)    SETC '&STRING(2)'
                AIF ('&L_STRING(1)' NE '').STRING_NBLK
&V_STRING(1)    SETC '#$&ID.$#STRING1'     Variable for STRING=.
&V_STRING(2)    SETC '#$&ID.$#STRING2'     Variable for STRING=.
                GBLC &(&V_STRING(1))       Declare global variable.
                GBLC &(&V_STRING(2))       Declare global variable.
&L_STRING(1)    SETC '&(&V_STRING(1))'     Copy default value.
&L_STRING(2)    SETC '&(&V_STRING(2))'     Copy default value.
.STRING_NBLK    ANOP
.*
&L_RSLTLEN     SETC '&RESULTLEN'
               AIF ('&RESULTLEN' NE '').RESLT_NBLK
&V_RESULTLEN   SETC '#$&ID.$#RESULTLEN'   Variable for RESULTLEN=.
               GBLC &(&V_RESULTLEN)       Declare global variable.
&L_RSLTLEN     SETC '&(&V_RESULTLEN)'     Copy default value.
.RESLT_NBLK    ANOP
.*
.* Process the CONTROL keyword to get an address and length.
.*
&KEYWORD      SETC 'CONTROL'
              AIF ('&CONTROL' EQ '').NO_CONTROL
              AIF (N'&CONTROL EQ 1).CTL_TAGONLY  CONTROL=tag.
              AIF (N'&CONTROL EQ 2).CTL_TAGLEN   CONTROL=(tag,len).
              MNOTE 8,'Too many subparameters for CONTROL keyword.'
              MEXIT
.*
.CTL_TAGLEN   ANOP
&C_ADDR       SETC '&CONTROL(1)'          | Set addr.
&C_LEN        SETC '&CONTROL(2)'          | Set len.
              AGO  .PAST_CONTROL          |
.CTL_TAGONLY  AIF  ('&(&V_SIZELENGTH)' EQ '').NO_SIZELENGTH
              AIF  ('&CONTROL'(1,1) EQ '''').CTL_LITERAL
&C_ADDR       SETC '&CONTROL'             | Set addr to tag_name.
&C_LEN        SETC '=AL&(&V_SIZELENGTH).(L''&CONTROL)'  Get tag length.
              AGO  .PAST_CONTROL          |
.CTL_LITERAL  ANOP                        |
&C_ADDR       SETC '&CONTROL'             | Set addr to actual literal.
&L            SETA 0                      | Length counter = 0.
&I            SETA 2                      | Index counter -> past '.
.CTL_LOOP     AIF  (&I GE K'&C_ADDR).CTL_ELOOP       Loop over CONTROL.
              AIF  ('&C_ADDR'(&I,1) NE '''').CTL_TXT If doubled quotes.
&I            SETA &I+1                   |            Advance past '.
.CTL_TXT      ANOP                        |          EndIf.
&L            SETA &L+1                   |   Add one to length.
&I            SETA &I+1                   |   Advance to next position.
              AGO  .CTL_LOOP              | End of counting loop.
.CTL_ELOOP    ANOP                        |
&C_LEN        SETC '=AL&(&V_SIZELENGTH).(&L)'  Set length parameter.
              AGO  .PAST_CONTROL
.NO_CONTROL   MNOTE 8,'CONTROL is a required keyword.'
              MEXIT
.PAST_CONTROL ANOP
.*
.* Process the STRING keyword to get an address and length.
.*
&KEYWORD      SETC 'STRING'
              AIF ('&L_STRING(1)' EQ '').NO_STRING
              AIF ('&L_STRING(1)'(1,1) EQ '''').STR_LITERAL
              AIF ('&L_STRING(2)' EQ '').STR_TAGONLY
&S_ADDR       SETC '&L_STRING(1)'         | Set addr.
&S_LEN        SETC '&L_STRING(2)'         | Set len.
              AGO  .PAST_STRING           |
.STR_TAGONLY  AIF  ('&(&V_SIZELENGTH)' EQ '').NO_SIZELENGTH
&S_ADDR       SETC '&L_STRING(1)'         | Set addr to tag_name.
&S_LEN        SETC '=AL&(&V_SIZELENGTH).(L''&L_STRING(1))'
              AGO  .PAST_STRING           |
.STR_LITERAL  ANOP                        |
              MNOTE 8,'STRING string cannot be a literal.'
              MEXIT
.NO_STRING    MNOTE 8,'STRING is a required keyword.'
              MEXIT
.PAST_STRING  ANOP
.*
.* Check to see that SOURCE and SOURCELIST weren't both specified.
.*
        AIF  ('&SOURCELIST' EQ '' OR '&SOURCE' EQ '').PAST_SOURCE
        MNOTE 8,'Keywords SOURCE and SOURCELIST are mutually exclusive'
        MEXIT
.PAST_SOURCE ANOP
.*
.* Generate the CALLX to the string handler.
.*
         ##PLIST START
         AIF  ('&SOURCELIST' NE '').FORMAT2
         ##PLIST PARM,&#_IDTKN,&ST_FORMAT,&S_ADDR,&S_LEN,&L_RSLTLEN
         ##PLIST PARM,&C_ADDR,&C_LEN
&N       SETA    1
.SOURCES AIF     (&N GT N'&SOURCE).CALLX
         ##PLIST PARM,&SOURCE(&N)
&N       SETA    &N+1
         AGO     .SOURCES
.FORMAT2 ##PLIST PARM,&#_IDTKN,&ST_FORMAT2,&S_ADDR,&S_LEN,&L_RSLTLEN
         ##PLIST PARM,&C_ADDR,&C_LEN,&SOURCELIST(1),&SOURCELIST(2)
.CALLX   ##PLIST END,VL
         CALLX   &#_IDEPA
         MEXIT
.*
.* Generate an error message when SIZELENGTH is needed but ¬available.
.*
.NO_SIZELENGTH ANOP
         MNOTE 8,'Explicit lengths must be specified unless the SIZELEN+
               GTH keyword has been coded on the ST_ID macro.'
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ST_STRING_TO_INTEGER                                       *
* Purpose: Convert a text string to a signed binary fullword integer. *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ST_STRING_TO_INTEGER &ID=,&SPEPA=,&SPTOKEN=,                  +
               &STRING=,&INTEGER=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ST_STRING_TO_INTEGER
         LCLC  &V_SIZELENGTH,&V_STRING(2)
         LCLC  &S_ADDR,&S_LEN
         LCLC  &L_STRING(2)
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=ST_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
&V_SIZELENGTH  SETC '#$&ID.$#SIZELENGTH'  Variable for SIZELENGTH=.
               GBLC &(&V_SIZELENGTH)      Declare global variable.
.*
.* Process the STRING keyword to get an address and length.
.*
                AIF   (N'&STRING LE 2).STRING1
                MNOTE 8,'Too many subparameters for STRING keyword.'
                MEXIT
.STRING1        ANOP
&L_STRING(1)    SETC '&STRING(1)'
&L_STRING(2)    SETC '&STRING(2)'
                AIF ('&L_STRING(1)' NE '').GOT_STRING
&V_STRING(1)    SETC '#$&ID.$#STRING1'     Variable for STRING=.
&V_STRING(2)    SETC '#$&ID.$#STRING2'     Variable for STRING=.
                GBLC &(&V_STRING(1))       Declare global variable.
                GBLC &(&V_STRING(2))       Declare global variable.
&L_STRING(1)    SETC '&(&V_STRING(1))'     Copy default value.
&L_STRING(2)    SETC '&(&V_STRING(2))'     Copy default value.
.GOT_STRING     ANOP
                AIF ('&L_STRING(1)' EQ '').NO_STRING
                AIF ('&L_STRING(2)' EQ '').STR_TAGONLY
&S_ADDR         SETC '&L_STRING(1)'         | Set addr.
&S_LEN          SETC '&L_STRING(2)'         | Set len.
                AGO  .PAST_STRING           |
.STR_TAGONLY    AIF  ('&(&V_SIZELENGTH)' EQ '').NO_SIZELENGTH
                AIF ('&L_STRING(1)'(1,1) EQ '''').STR_LITERAL
&S_ADDR         SETC '&L_STRING(1)'         | Set addr to tag_name.
&S_LEN          SETC '=AL&(&V_SIZELENGTH).(L''&L_STRING(1))'
                AGO  .PAST_STRING           |
.STR_LITERAL    ANOP                        |
&S_ADDR         SETC '&L_STRING(1)'         | Set addr to value.
&L              SETA 0                      | Length counter = 0.
&I              SETA 2                      | Index counter -> past '.
.STR_LOOP       AIF  (&I GE K'&S_ADDR).STR_ELOOP     Loop over STRING.
                AIF  ('&S_ADDR'(&I,1) NE '''').STR_TXT If doubled.
&I              SETA &I+1                   |             Advance.
.STR_TXT        ANOP                        |          EndIf.
&L              SETA &L+1                   |   Add one to length.
&I              SETA &I+1                   |   Advance.
                AGO  .STR_LOOP              | End of counting loop.
.STR_ELOOP      ANOP                        |
&S_LEN          SETC '=AL&(&V_SIZELENGTH).(&L)'  Set length parameter.
                AGO  .PAST_STRING
.NO_STRING      MNOTE 8,'STRING is a required keyword.'
                MEXIT
.PAST_STRING    ANOP
.*
.* Verify that the INTEGER keyword was specified.
.*
              AIF   ('&INTEGER' NE '').PAST_INTEGER
.NO_INTEGER   MNOTE 8,'INTEGER is a required keyword.'
              MEXIT
.PAST_INTEGER ANOP
.*
.* Generate the conversion call to the string handler.
.*
         CALLX &#_IDEPA,(&#_IDTKN,&ST_STRING_TO_INTEGER,&S_ADDR,&S_LEN,+
               &INTEGER),VL
         MEXIT
.NO_SIZELENGTH ANOP
         MNOTE 8,'Explicit string lengths must be provided unless SIZEL+
                ENGTH was specified on the ST_ID macro.'
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   ST_INTEGER_TO_STRING                                       *
* Purpose: Convert a signed binary fullword integer to text.          *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         ST_INTEGER_TO_STRING &ID=,&SPEPA=,&SPTOKEN=,                  +
               &INTEGER=,&STRING=,&RESULTLEN=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &ST_INTEGER_TO_STRING
         LCLC  &V_SIZELENGTH,&V_STRING(2),&V_RESULTLEN
         LCLC  &L_STRING(2)
         LCLC  &S_ADDR,&S_LEN,&L_RSLTLEN
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=ST_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
&V_SIZELENGTH  SETC '#$&ID.$#SIZELENGTH'  Variable for SIZELENGTH=.
               GBLC &(&V_SIZELENGTH)      Declare global variable.
.*
&L_RSLTLEN     SETC '&RESULTLEN'
               AIF ('&RESULTLEN' NE '').RESLT_NBLK
&V_RESULTLEN   SETC '#$&ID.$#RESULTLEN'   Variable for RESULTLEN=.
               GBLC &(&V_RESULTLEN)       Declare global variable.
&L_RSLTLEN     SETC '&(&V_RESULTLEN)'     Copy default value.
.RESLT_NBLK    ANOP
.*
.* Process the STRING keyword to get an address and length.
.*
                AIF   (N'&STRING LE 2).STRING1
                MNOTE 8,'Too many subparameters for STRING keyword.'
                MEXIT
.STRING1        ANOP
&L_STRING(1)    SETC '&STRING(1)'
&L_STRING(2)    SETC '&STRING(2)'
                AIF ('&L_STRING(1)' NE '').GOT_STRING
&V_STRING(1)    SETC '#$&ID.$#STRING1'     Variable for STRING=.
&V_STRING(2)    SETC '#$&ID.$#STRING2'     Variable for STRING=.
                GBLC &(&V_STRING(1))       Declare global variable.
                GBLC &(&V_STRING(2))       Declare global variable.
&L_STRING(1)    SETC '&(&V_STRING(1))'     Copy default value.
&L_STRING(2)    SETC '&(&V_STRING(2))'     Copy default value.
.GOT_STRING     AIF ('&L_STRING(1)' EQ '').NO_STRING
                AIF ('&L_STRING(2)' EQ '').STR_TAGONLY
&S_ADDR         SETC '&L_STRING(1)'         | Set addr.
&S_LEN          SETC '&L_STRING(2)'         | Set len.
                AGO  .PAST_STRING           |
.STR_TAGONLY    AIF  ('&(&V_SIZELENGTH)' EQ '').NO_SIZELENGTH
                AIF ('&L_STRING(1)'(1,1) EQ '''').STR_LITERAL
&S_ADDR         SETC '&L_STRING(1)'         | Set addr to tag_name.
&S_LEN          SETC '=AL&(&V_SIZELENGTH).(L''&L_STRING(1))'
                AGO  .PAST_STRING           |
.STR_LITERAL    ANOP                        |
                MNOTE 8,'Cannot use a literal for STRING.'
                MEXIT
.NO_STRING      MNOTE 8,'STRING is a required keyword.'
                MEXIT
.PAST_STRING    ANOP
.*
.* Verify that the INTEGER keyword was specified.
.*
              AIF   ('&INTEGER' NE '').PAST_INTEGER
.NO_INTEGER   MNOTE 8,'INTEGER is a required keyword.'
              MEXIT
.PAST_INTEGER ANOP
.*
.* Generate the conversion call to the string handler.
.*
         CALLX &#_IDEPA,(&#_IDTKN,&ST_INTEGER_TO_STRING,&INTEGER,      +
               &S_ADDR,&S_LEN,&L_RSLTLEN),VL
         MEXIT
.NO_SIZELENGTH ANOP
         MNOTE 8,'Explicit lengths must be provided unless the SIZELENG+
                TH keyword is specified on the ST_ID macro.'
.MEXIT   MEND
