.*SRVST***************************************************************
.*                                                                    *
.*                    Chapter. String Handler                         *
.*                                                                    *
.**********************************************************************
:h1 id=srvst.String Handler
:p.
The String Handler provides common functions for string manipulation,
including formatting functions and data conversions.
:p.
Applications use the string handler to convert back and forth between
textual and non-textual representations of data, and to manipulate text
strings.  The most heavily used function of the string handler is the
:#x.ST_FORMAT:e#x. function, which can construct a text string from an
arbitrary number of (text and non-text) parameters.
:#x.ST_FORMAT:e#x. is extremely useful for constructing error
messages that contain imbedded information.
.*--------------------------------------------------------------------*
:h2.Preparing to Use the String Handler
.*--------------------------------------------------------------------*
:p.
The String Handler operates independently of its execution environment
and may be used with any Environment Support service processor.  Like
any service processor, the String Handler must be loaded and started
before its functions can be used.  This process is fully covered in
:hdref refid=part1 page=no. and will not be repeated here.
:p.
The String Handler's service processor identification code is :#xb.ST:e#xb.
so:
:ul.
:li.the :#x.COPY:e#x. member is :#x.SRV:#xb.ST:e#xb.MAC:e#x.,
:li.the load module, named by symbol :#x.&amp.ST_STRING_HANDLER:e#x., is
:#x.SRV:#xb.ST:e#xb.:e#x.,
:li.and the names of all symbols, macros, and conditions begin with the
prefix :#xb.ST_:e#xb..
:eul.
:p.
Global String Handler stuff goes here as well as tips on how to make
better use of it.
.*--------------------------------------------------------------------*
:h2.Common Parameters
.*--------------------------------------------------------------------*
:p.
Several parameters are common to all String Handler function calls.
These parameters are listed below:
.*****
:plist.
:pLt.id_name
:pLd.specifies the name of a service processor identifier created by the
:#x.ST_ID:e#x. macro which will be used by all other function invocation
macros to automatically obtain values for :#xi.st_epa:e#xi. and
:#xi.st_token:e#xi.. This parameter is required unless both
:#xi.st_epa:e#xi. and :#xi.st_token:e#xi. are specified.
:pLt.st_epa
:pLd.a fullword in storage containing the entry point address of the
String Handler service processor.  The value specified by
:#xi.st_epa:e#xi.  overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:pLt.st_token
:pLd.specifies the label of a fullword in storage that contains the
value (to be) returned by :#x.ST_START:e#x. for the
:#xi.st_token:e#xi. parameter.  The value specified by
:#xi.st_token:e#xi. overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:eplist.
.*--------------------------------------------------------------------*
:h2.Complete List of String Handler Return Codes
.*--------------------------------------------------------------------*
:p.
Many return codes can be returned from each function.  In the function
descriptions later in this chapter, the most common return codes
returned by the particular function are documented.  The following
is a complete list of String Handler return codes.
.*****
:rclist.
:rcn.0
:rct.ST_SUCCESS
:rcd.The invoked String Handler function performed the requested
service without encountering any problems.
:rcn.1
:rct.ST_INVALID_FUNCTION
:rcd.An invalid :#xi.FunctionCode:e#xi. (the second parameter in any
service processor function call) was specified.
:rcn.2:rct.ST_INVALID_SIZELENGTH
:rcd.The value specified for :#xi.sizelength:e#xi. was not :#xb.1:e#xb.,
:#xb.2:e#xb., :#xb.3:e#xb., or :#xb.4:e#xb..
:rcn.3
:rct.ST_TRUNCATED
:rcd.The formatted string was too long to fit into the area specified
by :#xi.string:e#xi. and the only the first :#xi.string_length:e#xi.
characters were used.  :#xi.Result_length:e#xi. has been set to the
length of the truncated result and is equal to :#xi.string_length:e#xi..
:rcn.4
:rct.ST_OVERLAP
:rcd.The area referenced by :#xi.string:e#xi. overlaps in storage with
the control string or a source argument.  Results are unpredictable
because the overlap could be detected at any point in the formatting
process.  Formatting was halted immediately and :#xi.result_length:e#xi.
has been set to the length of the formatted string up to the point of
error.
:rcn.5
:rct.ST_INTERNAL_ERROR
:rcd.The String Handler detected an error during an internal consistancy
check.  This is likely a problem with the String Handler itself and not
the program that called it.
:rcn.6
:rct.ST_WRONG_NUMBER_OF_ PARAMETERS
:rcd.The :#x.ST_FORMAT:e#x. function has seven (7) required parameters,
and :#x.ST_FORMAT2:e#xi. has nine (9) required parameters.  Less than
the required number of parameters were coded.
:rcn.7
:rct.ST_INVALID_SOURCE_LENGTH
:rcd.The length of a source argument, as specified with the format
specifier :#xb.L:e#xb.:#xi.length:e#xi. was outside the supported
range of lengths for that argument's type.  See :hdref refid=stctl. for
more information.
:rcn.8
:rct.ST_INVALID_SOURCE_FORMAT
:rcd.The text in :#xi.string:e#xi. does not conform to the required
format, and could not be converted to an integer.
:rcn.9
:rct.ST_MAGNITUDE
:rcd.:#x.ST_FORMAT:e#x.: the length of a source argument, as specified
with the format specifier :#xb.L:e#xb.:#xi.length:e#xi. was too large to
represent as a fullword signed binary integer.
:p.:#x.ST_STRING_TO_INTEGER:e#x.:  the value represented by the digits
in :#xi.string:e#xi. is too large to be contained in a fullword binary
value.  It must be between -2147483648 and 2147483647.
:rcn.10
:rct.ST_FORMAT_COLUMN_TOO_LARGE
:rcd.The specified column position was beyond the end of the area
referenced by :#xi.string:e#xi..  That is, it was larger than the value
of :#xi.string_length:e#xi..
:rcn.11
:rct.ST_FORMAT_COLUMN_TOO_SMALL
:rcd.The specified column position was negative.
:rcn.12
:rct.ST_FORMAT_LENGTH_TOO_LARGE
:rcd.The length specified in a format specification was larger than the
maximum allowed length for that type.
:rcn.13
:rct.ST_FORMAT_LENGTH_TOO_SMALL
:rcd.The length specified in a format specification was smaller than the
minimum allowed length for that type.
:rcn.14
:rct.ST_FORMAT_PRECISION_ TOO_SMALL
:rcd.The precision specified in a format specification was negative or
zero.  It must be positive.
:rcn.15
:rct.ST_FORMAT_MISSING_ARGUMENT
:rcd.The format specifications in the control string referenced more
:#xi.arguments:e#xi. than were present.
:rcn.16
:rct.ST_FORMAT_MISSING_ COLUMN_VALUE
:rcd.A format specification contained a relative column
(:#x.@+:e#x. or :#x.@-:e#x.), with no column number or question mark.
:rcn.17
:rct.ST_FORMAT_MISSING_ LENGTH_VALUE
:rcd.A format specification contained the :#xb.L:e#xb. of the
:#xb.L:e#xb.:#xi.length:e#xi. item, but the :#xi.length:e#xi. part
(an integer or question mark) was not specified.
:rcn.18
:rct.ST_FORMAT_MISSING_ PRECISION_VALUE
:rcd.A format specification contained the :#xb..:e#xb. of the
:#xb..:e#xb.:#xi.precision:e#xi. item, but the :#xi.precision:e#xi.
part (an integer or question mark) was not specified.
:rcn.19
:rct.ST_FORMAT_TYPE_REQUIRED
:rcd.A format specification contained one or more items associated
with the :#xi.type:e#xi. item, but no :#xi.type:e#xi. was specified.
:rcn.20
:rct.ST_FORMAT_SPEC_EMPTY
:rcd.A format specification contained no items within the enclosing
braces.
:rcn.21
:rct.ST_FORMAT_SPEC_NOT_ENDED
:rcd.The closing brace was not present for a format specification.
Check the :#xi.control_length:e#xi. parameter to insure that it was
correct.
:rcn.22
:rct.ST_FORMAT_UNSUPPORTED_ KEYWORD
:rcd.A keyword was specified that is not in :tref refid=fskwds..
:rcn.23
:rct.ST_FORMAT_UNSUPPORTED_TYPE
:rcd.A :#xi.type:e#xi. was specified that is not in
:tref refid=fstcds..
:rcn.24
:rct.ST_FORMAT_UNSUPPORTED_ITEM
:rcd.An item was specified that did not conform to the syntax for
format specifications described on page :spotref refid=fssyntx..
:rcn.25
:rct.ST_FORMAT_PAD_TYPE_CONFLICT
:rcd.A leading zero was specified with :#xi.width:e#xi., but the
:#xi.type:e#xi. item specified a non-numeric :#xi.argument:e#xi..
:rcn.26
:rct.ST_FORMAT_FILL_TOO_LONG
:rcd.The fill pattern supplied within an :#x.ST_FORMAT:e#x.
format-specification was longer than 256 characters, the
maximum length permitted for fill patterns.
:rcn.27
:rct.ST_FORMAT_MISSING_ MULTIPLE_VALUE
:rcd.A format specification contained the :#xb.M:e#xb. of the
:#xb.M:e#xb.:#xi.multiple:e#xi. item, but the :#xi.multiple:e#xi. part
(an integer or question mark) was not specified.
:rcn.28
:rct.ST_FORMAT_MULTIPLE_ TOO_SMALL
:rcd.The specified multiple was zero.
:rcn.29
:rct.ST_FORMAT_MULTIPLE_ NOT_ALLOWED
:rcd.You cannot specify Multiple in conjunction with keywords
CENTER, RIGHT, or FILL.
:rcn.30
:rct.ST_FORMAT_KEYWORD_CONFLICT
:rcd.Mutually exclusive keywords were specified. CSV and QST cannot be
specified with CENTER, RIGHT, or FILL.
:rcn.31
:rct.ST_FORMAT_QST_TYPE_CONFLICT
:rcd.Keyword QST requires type character.
:erclist.
.*--------------------------------------------------------------------*
:h2.String Handler Service Processor Functions
.*--------------------------------------------------------------------*
:p.
The remaining sections of this chapter describe all functions provided
by the String Handler service processor, arranged in alphabetical order.
Each function's description begins on a new page, and the name of the
function being described appears in the top outside corner of every
page.
.**********************************************************************
.se temp = 'Build a Text String from Arbitrary Parameters'
:func id=stfrmt name='ST_FORMAT'.&temp.
.**********************************************************************
:i1.control string
:i1.format specification
:i1.format
:i1.formatting
:p.
The :#x.ST_FORMAT:e#x. function constructs a formatted string from an
arbitrary number of input sources and places it in the area specified by
the :#xi.string:e#xi. parameter. A control string, consisting
of ordinary text and imbedded :hp1.format specifications:ehp1., is used
to guide the formatting process.  The resulting string will appear
similar to the control string, except that the format specifications
will be replaced with the data they indicate.
:p.
This function is most useful for formatting messages.  Contextual
information can easily be included in a message to assist the user in
diagnosing and correcting problems.  Consider the following message,
which is produced by the :#x.FI_START:e#x. function of the File Handler:
:xmp.
:spot id=fi104e.
'FI00104E Member &lbr.CL8&rbr. not in &lbr.CL? TRIM&rbr..',&cont.
MEMBER,DSNAME,DSNAME_LENGTH
:exmp.
When the File Handler invokes :#x.ST_FORMAT:e#x., the member name and
dataset name will be inserted into the message text itself to produce a
formatted message such as the following:
:xmp.
'FI00104E Member LABELS not in HENRY.ISPF.SOURCE.'
:exmp.
:mac.
ST_FORMAT ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.st_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.st_token:ehp1.&rbt.
   ,CONTROL=&lbr.:hp1.control:ehp1. | &cont.
(:hp1.control:ehp1.,:hp1.control_length:ehp1.)&rbr.
  &lbt.,SOURCE=(:hp1.argument:ehp1.&cont.
&lbr.,:hp1.argument:ehp1.&rbr.) | &cont.
SOURCELIST=(:hp1.arglist:ehp1.,:hp1.argcount:ehp1.)&rbt.
  &lbt.,STRING=&lbr.:hp1.string:ehp1. | &cont.
(:hp1.string:ehp1.,:hp1.string_length:ehp1.)&rbr.&rbt.
  &lbt.,RESULTLEN=:hp1.result_length:ehp1.&rbt.
:emac.
:callx.
CALLX :hp1.st_epa:ehp1.,(:hp1.st_token:ehp1.,&amp.ST_FORMAT,&cont.
:hp1.string:ehp1.,:hp1.string_length:ehp1.,&cont.
&lbt.:hp1.result_length:ehp1.&rbt.,
              :hp1.control:ehp1.,:hp1.control_length:ehp1.&cont.
&lbr.,:hp1.argument:ehp1.&rbr.)

- or -

CALLX :hp1.st_epa:ehp1.,(:hp1.st_token:ehp1.,&amp.ST_FORMAT2,&cont.
:hp1.string:ehp1.,:hp1.string_length:ehp1.,&cont.
&lbt.:hp1.result_length:ehp1.&rbt.,
              :hp1.control:ehp1.,:hp1.control_length:ehp1.,&cont.
:hp1.arglist:ehp1.,:hp1.argcount:ehp1.)
:ecallx.
.*****
:plist.
:pLt.control
:pLd.specifies the label of a string containing information to guide the
formatting process.  See the section below, :hdref refid=stctl., for how
this string should be specified.
:pLt.control_length
:pLd.specifies the label of a signed binary integer indicating the
length of the string identified by the :#xi.control:e#xi.
parameter. The
:#xi.control_length:e#xi. parameter may be from one to four
bytes in length, as determined by the :#xi.sizelength:e#xi.
parameter of the :#x.ST_START:e#x. function.
:note.The macro form of :#x.ST_FORMAT:e#x. will attempt to generate a
value for :#xi.control_length:e#xi. automatically if it is not
specified.  In order to generate the right value, however,
:#xi.sizelength:e#xi. must have previously been specified on the
:#x.ST_ID:e#x. macro.
:pLt.string
:pLd.specifies the area of storage in which the formatted string will be
constructed.
:pLt.string_length
:pLd.specifies the label of a signed binary integer indicating the
length of the area referenced by :#xi.string:e#xi..  This parameter may
be from one to four bytes in length, as determined by the
:#xi.sizelength:e#xi. parameter of the :#x.ST_START:e#x.
function.
:note.The macro form of :#x.ST_FORMAT:e#x. will attempt to generate a
value for :#xi.string_length:e#xi. automatically if it is not
specified.  In order to generate the right value, however,
:#xi.sizelength:e#xi. must have previously been specified on the
:#x.ST_ID:e#x. macro.
:pLt.result_length
:pLd.specifies a field into which a signed binary integer containing the
length of the formatted string will be placed.  The
:#xi.result_length:e#xi. parameter may be from one to four
bytes in length, as determined by the :#xi.sizelength:e#xi.
parameter of the
:#x.ST_START:e#x. function.
:pLt.&lbr.argument&rbr.
:pLd.Values in storage that are referenced by format specifications
imbedded in the :#xi.control:e#xi. string.  The number of
:#xi.argument:e#xi.s required, as well as their data formats,
is determined by the format specifications imbedded in the control
string.
:pLt.arglist
:pLd.References a separate parameter list that contains the
:#xi.argument:e#xi.s referenced by format specifications.  This
parameter requires the :#xi.argcount:e#xi. parameter also, and is only
used with the :#x.ST_FORMAT2:e#x. interface to the format function.
:pLt.argcount
:pLd.Specifies a signed fullword in storage containing the number of
:#xi.argument:e#xi.s contained in :#xi.arglist:e#xi..
:eplist.
:fh3 id=stctl.Specifying Control Strings
:p.
The :#xi.control:e#xi. parameter is a character string consisting of
normal text intermixed with :hp1.format specifications:ehp1. that acts
as a template to guide the formatting process.  The control string
below, for example, contains two format specifications:
:xmp.
'FI00104E Member &lbr.CL8&rbr. not in &lbr.CL? TRIM&rbr..'
:exmp.
As :#x.ST_FORMAT:e#x.  scans :#xi.control:e#xi. from left to right, it
builds a formatted string in the area referenced by the
:#xi.string:e#xi. parameter.  Normal text is copied directly to the
:#xi.string:e#xi. area.  When a format specification is encountered,
:#x.ST_FORMAT:e#x. suspends the copying of normal text and performs the
operation indicated by the format specification.  It then resumes its
scan of the control string following the format specification.
:p.
Each format specification may call for values to be taken from one or
more :#xi.argument:e#xi.s, which are always referenced in consecutive
order: first, second, third, etc.  The value of an :#xi.argument:e#xi.
is never modified by :#x.ST_FORMAT:e#x., although a formatted copy of
that value may be placed in :#xi.string:e#xi..  A format specification
is distinguished from surrounding text in the :#xi.control:e#xi. string
with braces (:#xb.&lbr. &rbr.:e#xb.) and has one of the following forms,
where brackets (&lbt. &rbt.) indicate optional items.
:spot id=fssyntx.
:sl.
:li.
:#xb.&lbr.:e#xb.&cont.
&lbt.:#xb.0:e#xb.&rbt.&lbt.:#xi.width:e#xi.&rbt.&cont.
&lbt.:#xb..:e#xb.:#xi.precision:e#xi.&rbt.&cont.
&lbt.:#xb.@:e#xb.&lbt.:#xi.column:e#xi.&rbt.&rbt.&cont.
:#xi.type:e#xi.&cont.
&lbt.:#xb.L:e#xb.:#xi.length:e#xi.&rbt.&cont.
&lbt.:#xb.M:e#xb.:#xi.multiple:e#xi.&rbt.&cont.
&lbt. :#xi.keyword...:e#xi.&rbt.&cont.
:#xb.&rbr.:e#xb.
:li.
:#xb.&lbr.:e#xb.&cont.
:#xb.@:e#xb.&lbt.:#xi.column:e#xi.&rbt.&cont.
:#xb.&rbr.:e#xb.
:li.
:#xb.&lbr.:e#xb.&cont.
:#xb.&lbr.:e#xb.&cont.
:esl.
:p.
In the syntax above, :#xi.type:e#xi. is a single letter that references
an associated source :#xi.argument:e#xi., and
&lbt.:#xi.keyword...:e#xi.&rbt. is a list of words that provide optional
formatting information.
:p.
:#xi.Arguments:e#xi. are taken in the same order as the items in a format
specification that reference them (i.e.&rbl.:#xi.width:e#xi. first, then
:#xi.precision:e#xi.,
:#xi.column:e#xi.,
:#xi.type:e#xi., and :#xi.length:e#xi.).
:p.
:#xi.Width:e#xi., :#xi.precision:e#xi., :#xi.column:e#xi.,
:#xi.length:e#xi., and :#xi.multiple:e#xi. are all integers that can be
coded as either a sequence of digits or as a question mark
(:#xb.?:e#xb.) to reference the value contained in an associated
:#xi.argument:e#xi..  When a question mark is used, the referenced
:#xi.argument:e#xi. must be a signed binary integer that is
:#xi.sizelength:e#xi. bytes in length (see the :#xi.sizelength:e#xi.
parameter of :#x.ST_START:e#x. on page :spotref refid=sizelen.).
Optionally,
:#xi.sizelength:e#xi. can be overridden for a given :#xi.argument:e#xi. by
suffixing the question mark with an integer value of 1, 2, 3, or 4.  For
example, :xph.{CL?2}:exph. indicates that the length :#xi.argument:e#xi. is
a halfword value (the 2 following the question mark) regardless of the value
originally specified for :#xi.sizelength:e#xi..  The override applies only to
the one :#xi.argument:e#xi.&emdash.it does not change the :#xi.sizelength:e#xi.
parameter's value.
:p.
No blanks can appear within a format specification, except between
keywords.  If any part of a format specification is invalid, the length
of the text formatted so far will be returned in
:#xi.result_length:e#xi. and a return code indicating the problem will
be set.  The discussion below covers the basics of format specifications
and describes the general operation of :#x.ST_FORMAT:e#x. with respect
to the control string.
:fh4.Type
:p.
In practice, most format specifications are fairly simple because almost
everything is optional (as indicated by all the brackets).  In fact, the
large majority contain only :#xi.type:e#xi. and perhaps one other item.
As a general rule, format specifications are built around
:#xi.type:e#xi., with the remaining items being used to supply
additional information.
:p.
:#xi.Type:e#xi. is a single letter that denotes both a source argument's
layout and the way it should be formatted.  The presence of
:#xi.type:e#xi. in a format specification indicates that there is an
associated :#xi.argument:e#xi. that should be formatted in a certain
way, and that the format specification itself is acting as a placeholder
to indicate the where the formatted text should be placed within
:#xi.string:e#xi..  For example, the control string
:xmp.
'The character &lbr.C&rbr. was encountered &lbr.I&rbr. times.'
:exmp.
contains two format specifications, each of which only specifies
:#xi.type:e#xi..  This control string requires two associated
:#xi.argument:e#xi.s, one for each format specification.  The format
specification :#x.&lbr.C&rbr.:e#x. indicates that a single character
should be taken from the first :#xi.argument:e#xi. and placed in
:#xi.string:e#xi. following :#x.'The character ':e#x..  Similarly,
:#x.&lbr.I&rbr.:e#x. indicates that a textual representation of the four
byte binary integer referenced by the second :#xi.argument:e#xi. should
placed in :#xi.string:e#xi. following :#x.' was encountered ':e#x..  The
resulting string would look like this:
:xmp.
'The character Z was encountered 437 times.'
:exmp.
:p.
The supported values for :#xi.type:e#xi. are listed below.  The default,
minimum, and maximum lengths for :#xi.argument:e#xi.s of each type are
listed in :tref refid=fslns..
:tdef id=fstcdsd cols='0.40i *' align='center left'
      frame=box rules=vert hdframe=rules
      compact mindepth=p5.
:table id=fstcds refid=fstcdsd.
:tcap.Format Specification Types
:thd.
:c.Type
:c.Description
:ethd.
:tft refid=fstcdsd temp.
:c.
:etft.
:row.
:c.:#x.A:e#x.
:c.Format an unsigned binary integer as a hexadecimal number.  For
example, if a four byte integer containing the decimal value 2375373
were formatted with this type, it would appear as :#x.243ECD:e#x..
:row.
:c.:#x.B:e#x.
:c.Format one or more characters (arbitrary byte values) as a sequence
of binary digits.  Example: the EBCDIC character :#x.'A':e#x. would
format as :#x.11000001:e#x. (hexadecimal :#x.'C1':e#x.).
:row.
:c.:#x.C:e#x.
:c.Format one or more characters (arbitrary byte values) asis.  That is,
the character(s) referenced by the associated :#xi.argument:e#xi. should
be copied without modification to the appropriate position in
:#xi.string:e#xi..
:row.
:c.:#x.I:e#x.
:c.Format a signed binary integer as a decimal number.  Example:
:#x.-32768:e#x..
:row.
:c.:#x.U:e#x.
:c.Format an unsigned binary integer as a decimal number.  Example:
:#x.65535:e#x..
:row.
:c.:#x.X:e#x.
:c.Format one or more characters (arbitrary byte values) as a sequence
of hexadecimal digits. Example: the EBCDIC character :#x.'A':e#x. would
format as :#x.C1:e#x. (binary :#x.11000001:e#x.).
:etable.
:fh4.Length
:p.
Each :#xi.argument:e#xi. referenced by :#xi.type:e#xi. has a default
length.  For example, integers referenced with the format specification
:#x.&lbr.I&rbr.:e#x. are assumed to be four bytes in length.  Explicit
lengths can be specified in format specifications with the
:#xb.L:e#xb.:#xi.length:e#xi. item.  For example, the format
specification :#x.&lbr.IL2&rbr.:e#x. references a two byte signed integer.
:p.
:#xi.Length:e#xi. may be specified with a number coded directly in the
format specification or, if the actual length is not known until
execution time, as a question mark (:#xb.?:e#xb.) to indicate that
length of the :#xi.argument:e#xi.  to be formatted is contained in yet
another :#xi.argument:e#xi..  For example, suppose a word of some
unknown length was desired instead of a single character and the number
of occurrances was held in a two byte value.  The new control string
would look like the following:
:xmp.
'The word &lbr.CL?&rbr. was encountered &lbr.IL2&rbr. times.'
:exmp.
and would produce a result that looked like:
:xmp.
'The word SUPERCALAFRAGALISTIC was encountered 138 times.'
:exmp.
This control string would require :hp1.three:ehp1. arguments: one for
the character string to insert, one for its length, and one for the
number.  The arguments would have to be specified in that order, and the
size of the integer containing the word's length would be determined by
the :#xi.sizelength:e#xi. parameter of the :#x.ST_START:e#x. function.
:p.
Each type of data has minimum, maximum, and default source lengths
(specified in bytes):
.getw symbol=fslc1 gmltype=table text='Default'
.getw symbol=fslc2 gmltype=table text='Minimum'
.getw symbol=fslc3 gmltype=table text='Maximum'
:tdef id=fslnsd cols='0.40i &fslc1. &fslc2. &fslc3.'
      align='center right right right'
      frame=box rules=vert hdframe=rules compact mindepth=p5.
:table id=fslns refid=fslnsd.
:tcap.Format Specification Source Lengths
:thd.
:c.Type
:c.Default
:c.Minimum
:c.Maximum
:ethd.
:tft refid=fslnsd temp.
:c.
:etft.
:row.
:c.:#x.A:e#x.
:c.4
:c.1
:c.4
:row.
:c.:#x.B:e#x.
:c.1
:c.1
:c.256
:row.
:c.:#x.C:e#x.
:c.1
:c.0
:c.65535
:row.
:c.:#x.I:e#x.
:c.4
:c.1
:c.4
:row.
:c.:#x.U:e#x.
:c.4
:c.1
:c.4
:row.:c.:#x.X:e#x.
:c.1
:c.0
:c.65535
:etable.
:fh4.Multiple
:p.
:#xi.Multiple:e#xi. may be specified with a number coded directly in the
format specification or as a question mark (:#xb.?:e#xb.) to indicate
that multiple is contained in yet another :#xi.argument:e#xi..
:p.
When :#xi.Multiple:e#xi. is specified, the source value is treated as
an array, where each element is the same type and length. Multiple can
used with any type.  For character strings, TRIM applies to each element
of the array.
:p.
Each element in the array will be formatted based on type and output
with no separating characters unless the CSV keyword is also specified.
:p.
When :#xi.Multiple:e#xi. is specified, CENTER, RIGHT, and FILL aren't
allowed.
:fh4.Width
:p.
:#xi.Width:e#xi. is used to specify the minimum amount of space that
should be reserved in :#xi.string:e#xi. for formatted text.  More
space will be used if needed, but if the text is shorter than
:#xi.width:e#xi., it will be padded with blanks (to the right for
character types and to the left for numeric types).  Like
:#xi.length:e#xi., :#xi.width:e#xi. may be specified as a number or a
question mark.  Expanding on the example used so far, the following
control string might be used:
:xmp.
'The word &lbr.15CL?&rbr. was encountered &lbr.5IL2&rbr. times.'
:exmp.
which, if used several times with different values, would produce
results that looked like:
:xmp.
'The word SUPERCALAFRAGALISTIC was encountered   138 times.'
'The word HELLO           was encountered    27 times.'
'The word GOODBYE         was encountered    14 times.'
'The word CALIFORNIA      was encountered     0 times.'
:exmp.
:p.
An additional feature of :#xi.width:e#xi. is available for numeric data
types only: if a :#xi.width:e#xi. is coded with a leading zero, the
number will be formatted with leading zeros.  For example, the control
string
:xmp.
'The word &lbr.15CL?&rbr. was encountered &lbr.05IL2&rbr. times.'
:exmp.
would produce these results instead:
:xmp.
'The word SUPERCALAFRAGALISTIC was encountered 00138 times.'
'The word HELLO           was encountered 00027 times.'
'The word GOODBYE         was encountered 00014 times.'
'The word CALIFORNIA      was encountered 00000 times.'
:exmp.
:fh4.Precision
:p.
:#xb..:e#xb.:#xi.Precision:e#xi. can also be specified as a number or a
question mark, but has a different meaning than :#xi.width:e#xi..  For
non-numeric data, :#xi.precision:e#xi. specifies the :hp1.maximum:ehp1.
amount of space that the formatted text may use; if the text is longer,
only the first :#xi.precision:e#xi. characters will be placed in
:#xi.string:e#xi..  In the example above, if a :#xi.precision:e#xi. of
:#x.15:e#x. were added to the first format specification:
:xmp.
'The word &lbr.15.15CL?&rbr. was encountered &lbr.05IL2&rbr. times.'
:exmp.
it would have produced
:xmp.
'The word SUPERCALAFRAGAL was encountered 00138 times.'
'The word HELLO           was encountered 00027 times.'
'The word GOODBYE         was encountered 00014 times.'
'The word CALIFORNIA      was encountered 00000 times.'
:exmp.
:#xb..:e#xb.:#xi.Precision:e#xi. currently has no meaning for numeric
data, but when real numbers (fixed point or floating point) are
supported, it will specify the number of significant digits to the right
of the decimal mark.
:fh4.Column
:p.
During the process of formatting, :#x.ST_FORMAT:e#x. maintains a pointer
to the current column position within :#xi.string:e#xi..  This column
position, denoted by the symbol :#xb.@:e#xb., is initially set to 1.
Whenever text (from the control string itself or from a formatting
operation) is added to :#xi.string:e#xi. it is placed in the position
indicated by :#xb.@:e#xb..  After the text has been added, :#xb.@:e#xb.
is automatically updated to the column in :#xi.string:e#xi. immediately
following the new text.  This automatic operation produces the expected
results: the resulting string looks like the original control string
except that format specifications (acting as placeholders) have been
replaced with formatted text.  The column position can also be adjusted
with format specifications, giving application programs the ability to
control the exact placement of text within the formatted string.
:p.
:#xb.@:e#xb.&lbt.:#xi.Column:e#xi.&rbt. sets the value of :#xb.@:e#xb.
to a new column position, which can be anywhere in the :#xi.string:e#xi.
area (even beyond the end of all text formatted so far).  It may be
specified alone or as part of a format specification containing
:#xi.type:e#xi..  In both cases, the value of :#xb.@:e#xb. is set before
any text movement occurs.  The new position specified by
:#xi.column:e#xi. can be an actual column number, or it can be a
question mark that indicates the value for column is contained in an
:#xi.argument:e#xi..  Either way, the number or question mark can be
prefixed by a plus (:#xb.+:e#xb.) or minus (:#xb.-:e#xb.)  sign to
indicate that the new column is relative to the current one.
:p.
:#x.ST_FORMAT:e#x. also maintains a :hp1.high-water:ehp1. mark, which is
always equal to the highest column position reached during formatting.
If :#xb.@:e#xb. is specified without a column number the current
position is set to the high-water mark, where new text will be appended
to the string being formatted.
:p.
When formatting is complete, :#x.ST_FORMAT:e#x. reduces the high-water
mark by one column to produce :#xi.result_length:e#xi..  This final
value is normally equal to the column position of the last character
placed in :#xi.string:e#xi. and is considered to be the final length of
the formatted text.  However, since format specifications can jump to
any column position, portions of the :#xi.string:e#xi. area may have
been skipped over and left untouched by :#x.ST_FORMAT:e#x.  This is the
way :#x.ST_FORMAT:e#x. was designed to work, but it may produce
unexpected results if uninitialized portions of :#xi.string:e#xi. are
skipped over during formatting.
:fh4.Keywords
:p.
:#xi.Keyword:e#xi.s are used to specify formatting options that cannot
really be specified any other way.  The control string below, for
example, contains a format specifcation that uses the keywords
:#x.CAPS:e#x. and :#x.CENTER:e#x. to place text in the center of a line
that will be printed as a page header.
:xmp.
'{?CL? CAPS CENTER}'
:exmp.
If :#x.ST_FORMAT:e#x. were invoked with this control string and the
three arguments :#x.(80,'Year&rbl.to&rbl.Date&rbl.Totals',19):e#x.,
the following line would result:
:xmp.
                              YEAR TO DATE TOTALS
:exmp.
:p.
The available keywords are listed in :tref refid=fskwds page=no. below.
Some of these keywords can only be used with specific :#xi.type:e#xi.s,
as indicated in their description.
:tdef id=fskwdsd cols='0.80i *'
      frame=box rules=vert hdframe=rules split=yes
      compact mindepth=p5.
:table id=fskwds refid=fskwdsd.
:tcap.Format Specification Keywords
:thd.
:c.Keyword
:c.Description
:ethd.
:tft refid=fskwdsd temp.
:c.
:etft.
:row.
:c.:#x.CAPS:e#x.
:c.Fold lowercase letters to capitals.
This keyword only applies to type :#xb.C:e#xb..
:row.
:c.:#x.C1ST:e#x.
:c.Capitalize the first letter of the formatted argument.
This keyword only applies to type :#xb.C:e#xb..
:row.
:c.:#x.CENTER:e#x.
:c.Center the formatted argument in the field, padding it to the left
and right with blanks.
:row.
:c.:#x.CSV:e#x.
:c.Separate multiple values with commas. This keyword only applies when
a multiple is specified.
:row.
:c.:#x.FILL:e#x. or :#x.F:e#x.
:c.When the formatted argument does not extend to the end of the format
field, format the remainder of the field using a fill pattern.
:p.
Zero or more copies of the fill pattern are concatenated and placed such
that the result ends at the final position of the format field.  If the
space to be filled is not an exact multple of the size of the fill
pattern, one or more blanks will be used :hp1.before:ehp1. filling to
make up the remainder.  The default fill pattern is :#x." .":e#x..  Fill
patterns may be specified in parenthesis following the :#x.FILL:e#x.
keyword as:
:ul compact.
:li.
A string enclosed in quotes, optionally prefixed with :#xb.C:e#xb..
Either single or double quotes may be used to delimit string, so long as
they are matched properly.  If a quote of the same type as the delimiter
is used within the string, two quotes must be used to represent one.
Examples: :#x.F(" -"):e#xb. and :#x.FILL(C' -'):e#x..
:li.
A hexadecimal string.  Examples: :#x.FILL(X"4060"):e#x.,
:#x.F(X"00"):e#x., and :#x.F(X'9F'):e#x..
:li.
A question mark (referencing the next supplied argument), optionally
followed by :#xb.L:e#xb. and a length (either an integer or a
question mark to refer to the argument following the fill pattern
argument).  If no length is supplied, the default length is one.
Examples: :#x.F(?):e#x., :#x.FILL(?L2):e#xb., and :#x.FILL(?L?):e#x..
:li.
If the supplied fill pattern does not fit any of the above types, the
entire sequence of characters between parentheses will be assumed to be
the intended fill pattern.  Examples: :#x.FILL(&rbl..):e#x. and
:#x.F(&rbl.-):e#x..
:eul.
:p.
The maximum length for a fill pattern from any source is 256 bytes.  A
zero-length fill pattern is replaced by the default: " .".
:row.
:c.:#x.LEFT:e#x.
:c.Left-justify the formatted argument in the field, padding it with
blanks if necessary in order to fill in the field.
:row.
:c.:#x.QST:e#x.
:c.Format the argument as a quoted string, with the text wrapped in
single quotes, and each imbedded quote doubled.
:row.
:c.:#x.RELATIVE:e#x.
:c.For integers only: append the resulting formatted integer with the
characters :#xb.st:e#xb., :#xb.nd:e#xb., :#xb.rd:e#xb., or :#xb.th:e#xb.
to indicate a relative number (e.g. 1st, 2nd, 3rd, 4th, etc).
:row.
:c.:#x.RIGHT:e#x.
:c.Right-justify the formatted argument in the field, prefixing it with
blanks or zeros if necessary in order to fill in the field.
:row.
:c.:#x.TRIM:e#x. or :#x.T:e#x.
:c.Remove trailing blanks from the formatted data before performing any
justification.  This keyword only applies to type :#xb.C:e#xb..
:etable.
:fh4.Braces
:p.
Since braces are used to distinguish format specifications from
surrounding text, an opening brace cannot be coded as part of the normal
text.  The format specification :#xb.&lbr.&lbr.:e#xb. provides a way
around this problem: it is treated as if it were a single
:#xb.&lbr:e#xb. in normal text.  For example, the control string
:xmp.
This is a control string containing {{ braces }.
:exmp.
would result in the following formatted string:
:xmp.
This is a control string containing { braces }.
:exmp.
:fh3.Examples
:spot id=fmtxmp.
:p.
The examples below are all coded using the macro interface to the
:#x.ST_FORMAT:e#x. function.  They assume that instructions similar
to the following have been executed to provide default values for the
:#x.STRING:e#x., :#x.RESULTLEN:e#x., and :#x.SIZELENGTH:e#x. keywords.
:xmp.
      ES_ID ID=ES,SPEPNAME=&amp.ES_MVS_ENVIRONMENT_SUPPORT
      ST_ID ID=ST,SPEPNAME=&amp.STRING_HANDLER,STRING=LINE,            +
            RESULTLEN=LINE_LEN,SIZELENGTH=2
*
      ES_MVS_LOAD    ID=ES               Load Environment Support.
      ES_START       ID=ES               Start Environment Support.
      ES_LOAD_MODULE ID=ES,SPID=ST       Load the String Handler.
      ST_START       ID=ST               Start the String Handler.
*
      :hp2. ...... ST_FORMAT examples go here ..... :ehp2.
.br
*
            PWA
LINE_LEN    DS    F                Length of string within LINE.
LINE        DS    CL80             String returned by ST_FORMAT.
            ENDPWA
:exmp.
Translated to call statements, each of the formatting examples would
look something like this:
:xmp.
CALL ST_EPA,(ST_TOKEN,&ST_FORMAT,LINE,=AL2(L'LINE),LINE_LEN, ... )
:exmp.
:H5.Example 1
:p.
This example uses the address (:#x.A:e#x.) type to display a dump of the
current (or saved) contents of all sixteen general registers.
:xmp.
 STM                R0,R15,REGS    Save all registers in storage.
 ST_FORMAT          ID=ST,CONTROL=REG_LIST,SOURCE=('REGS',0,7,REGS)
 ES_DISPLAY_MESSAGE ID=ES,MESSAGE=(LINE,LINE_LEN)
 ST_FORMAT          ID=ST,CONTROL=REG_LIST,SOURCE=&cont.
('    ',8,15,REGS+(7*4))
 ES_DISPLAY_MESSAGE ID=ES,MESSAGE=(LINE,LINE_LEN)
 .
 .
 .
REGS      DS  16F          <--- Registers 0-15 saved here.
REG_LIST  DC  C'{CL4} {1A}-{1A}: {08A} {08A} {08A} {08A} {08A} &cont.
{08A} {08A} {08A}'
:exmp.
would produce output that looks like the following:
:xmp.
REGS 0-7: 0000DEB4 0000002C 0000DEB4 0000002C &cont.
00000018 007D5540 02729FEC 00000000
     8-F: 0000DED8 0000002C 0272EDE4 0000DE8C &cont.
0272DDF8 00011818 8272EE20 0272EDE4
:exmp.
:H5.Example 2
:p.
This example uses the :#x.FILL:e#x. keyword to demonstrate how a report
might use fill patterns to assist in lining up values to names.  The
three :#x.ST_FORMAT:e#x. statements below:
:xmp.
 ST_FORMAT  ID=ST,CONTROL=LINE_CONTROL,
                  SOURCE=('NAME',4,PWA_NAME,=A(L'PWA_NAME))
 ES_DISPLAY_MESSAGE ID=ES,MESSAGE=(LINE,LINE_LEN)
 ST_FORMAT  ID=ST,CONTROL='{25CL? FILL(C" .")} {CL?}',
                  SOURCE=('STREET ADDR',11,PWA_STREET,=A(L'PWA_STREET))
 ES_DISPLAY_MESSAGE ID=ES,MESSAGE=(LINE,LINE_LEN)
 ST_FORMAT  ID=ST,CONTROL='{25CL? FILL(C" .")} {CL?}',
                  SOURCE=('CITY & STATE',12,PWA_CITYST,=A(L'PWA_CITYST))
 ES_DISPLAY_MESSAGE ID=ES,MESSAGE=(LINE,LINE_LEN)
 .
 .
 .
LINE_CONTROL  DC  C'{25CL? FILL(C" .")} {CL?}'
:exmp.
might produce the lines:
:xmp.
NAME  . . . . . . . . . . Donald Duck
STREET ADDR . . . . . . . 132 Mallard Lane
CITY & STATE  . . . . . . Drake City, D.Q.
:exmp.
:efunc.
.**********************************************************************
:func name='ST_ID' id=stid.Establish Default String Handler Values
.**********************************************************************
:p.The :#x.ST_ID:e#x. macro is used to establish default values for
use by other String Handler macros, which may access those values
through a unique identifier, :#xi.id_name:e#xi., specified by
the user.  When allowed to generate default values, this macro will
create Program Work Area (PWA) storage for :#xi.st_epa:e#xi.
and
:#xi.st_token:e#xi.. These values, whether generated by the
macro or provided by the user, are accessable from all other String
Handler macros via the :#x.ID=:e#x.:#xi.id_name:e#xi.
parameter.
:mac.
ST_ID ID=:hp1.id_name:ehp1.
  &lbt.,SPEPNAME=:hp1.st_epname:ehp1.&rbt.
  &lbt.,SPEPA=:hp1.st_epa:ehp1.&rbt.
  &lbt.,SPTOKEN=:hp1.st_token:ehp1.&rbt.
  &lbt.,ESID=:hp1.esid_name:ehp1.&rbt.
  &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
  &lbt.,SIZELENGTH=:hp1.sizelength:ehp1.&rbt.
  &lbt.,STRING=&lbr.:hp1.string:ehp1. | &cont.
(:hp1.string:ehp1.,:hp1.string_length:ehp1.)&rbr.&rbt.
  &lbt.,RESULTLEN=:hp1.result_length:ehp1.&rbt.
:emac.
.*****
:plist.
:pLt.id_name
:pLd.the identifier to assign to the service processor identifier
:#x.(SPID):e#x. being established.  This name must be unique for all
service processor identifiers.
:pLt.st_epname
:pLd.the entry point name of the String Handler service processor module
being used.  This value defaults to :#x.'SRVST   ':e#x..
:pLt.st_epa
:pLd.a fullword that will contain the entry point address of the String
Handler service processor, after it has been loaded into storage.
:pLt.st_token
:pLd.a fullword that will contain a unique value, assigned by the
:#x.ST_START:e#x. function.  This value must be used for all String
Handler function calls.
:pLt.esid_name
:pLd.the name of a service processor identifier, created by the
:#x.ES_ID:e#x.  macro, which will be used by the :#x.ST_ID:e#x. macro to
automatically obtain the value for :#x.esv:e#x. (see below).
:pLt.esva
:pLd.specifies the label of a fullword in storage that contains (or
will contain) the address of the Environment Support Vector
(:#x.ESV:e#x.) created by the :#x.ES_START:e#x. function.
:pLt.sizelength
:pLd.If specified, :#xi.sizelength:e#xi. supplies a default value for
the :#x.ST_START:e#x. function.  Refer to :hdref refid=ststrt. for a
full description of this parameter.
:pLt.string
.br
string_length
.br
result_length
:pLd.If specified, these parameters supply default values for like-named
parameters of other String Handler function macros.  For example, if
:#xi.result_length:e#xi. were specified on the :#x.ST_ID:e#x.
instruction but not on a subsequent :#x.ST_INTEGER_TO_STRING:e#x.
instruction, the default value would be used.
:eplist.
:fh3.Example 1
:p.
:xmp.
ST_ID ID=ES,SPEPNAME=&STRING_HANDLER
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Convert Binary Integer to String'
:func name='ST_INTEGER_TO_STRING'.&temp.
.**********************************************************************
:p.
The :#x.ST_INTEGER_TO_STRING:e#x. function produces a string that is
equal to the textual representation of a fullword signed binary integer.
The result will be a string of one or more digits with leading zeros
removed, prefixed with a minus sign (:#x.:hp2.-:ehp2.:e#x.) if the
integer is negative.
:mac.
ST_INTEGER_TO_STRING ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.st_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.st_token:ehp1.&rbt.
   ,INTEGER=:hp1.integer:ehp1.
   ,STRING=&lbr.:hp1.string:ehp1. | &cont.
(:hp1.string:ehp1.,:hp1.string_length:ehp1.)&rbr.
   ,RESULTLEN=:hp1.result_length:ehp1
:emac.
:callx.
CALLX &cont.
:hp1.st_epa:ehp1.,(:hp1.st_token:ehp1.,&amp.ST_INTEGER_TO_STRING,&cont.
:hp1.integer:ehp1.,:hp1.string:ehp1.,
              :hp1.string_length:ehp1.,:hp1.result_length:ehp1.)
:ecallx.
.*****
:plist.
:pLt.integer
:pLd.specifies the label of a fullword in storage containing a signed
binary integer in two's complement format.
:pLt.string
:pLd.specifies the label of an area in storage where a string containing
the textual equivalent of the value in :#xi.integer:e#xi.
should be placed.
:pLt.string_length
:pLd.specifies the label of a signed binary integer equal to the length
of the storage indicated by the :#xi.string:e#xi. parameter.  The
:#xi.stringlen:e#xi. parameter may be from one to four bytes
in length, as determined by the :#xi.sizelength:e#xi. parameter of
the :#x.ST_START:e#x. function.
:note.The macro form of :#x.ST_INTEGER_TO_STRING:e#x. will attempt to
generate a value for :#xi.string_length:e#xi. automatically if it is
not specified.  In order to generate the right value, however,
:#xi.sizelength:e#xi. must have previously been specified on the
:#x.ST_ID:e#x. macro.
:pLt.result_length
:pLd.specifies the label of a fullword in storage in which the
:#x.ST_INTEGER_TO_STRING:e#x. function will place a signed binary
integer equal to the length of the resulting string.
:eplist.
:efunc.
.**********************************************************************
:func id=ststrt name='ST_START'.Begin a String Handler Session
.**********************************************************************
:p.
The :#x.ST_START:e#x. function establishes a new session with the
String Handler and returns its session identifier in the
:#xi.st_token:e#xi. parameter.  The size (number of bytes) of the
numbers used to specify string lengths to the String Handler may be
specified with the :#xi.sizelength:e#xi. parameter. Halfword length
values are the default, but a session may be established using byte,
halfword, three-byte, or fullword length values.
:mac.
ST_START ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.st_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.st_token:ehp1.&rbt.
  &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
  &lbt.,SIZELENGTH=:hp1.sizelength:ehp1.&rbt.
:emac.
:callx.
CALLX :hp1.st_epa:ehp1.,(:hp1.st_token:ehp1.,&amp.ST_START,&cont.
:hp1.esva:ehp1.&lbt.,:hp1.sizelength:ehp1.&rbt.)
:ecallx.
.*****
:plist.
:pLt.sizelength
:spot id=sizelen.
:pLd.this parameter is a signed fullword integer that determines the
size, in bytes, of all values used to represent string lengths in the
String Handler session being started.  All length-values passed to the
String Handler or returned by the String Handler will be of this size.
If, for example, :#xi.sizelength:e#xi. = :#x.2:e#x. (the default) then
all lengths would be represented as halfword values.
:p.
The macro forms of all String Handler functions will attempt to generate
values for string lengths automatically if they are not specified.  In
order for these macros to generate the right values, however,
:#xi.sizelength:e#xi. must be specified on the :#x.ST_ID:e#x. macro, and
it must be a self-defining term.  That is, it must be an actual number
(i.e. :#xb.2:e#xb.) or a reference to a symbolic variable (e.g.
:#xb.&amp.ST_FULLWORD:e#xb.) that has been set to a numeric value with
the assembler :#x.SETA:e#x. directive.  The following symbols are
available for this purpose: :#xb.&amp.ST_BYTE:e#xb.,
:#xb.&amp.ST_HALFWORD:e#xb., :#xb.&amp.ST_THREE_BYTE:e#xb., and
:#xb.&amp.ST_FULLWORD:e#xb..
:eplist.
:efunc.
.**********************************************************************
:func name='ST_STRING_TO_INTEGER'.Convert a String to a Fullword
.**********************************************************************
:p.
The :#x.ST_STRING_TO_INTEGER:e#x. function produces a fullword signed
binary integer that is equal to the value represented the text string in
parameter :#xi.string:e#xi.. The input string must contain a
sequence of one or more adjacent digits optionally prefixed with a sign
character (":#x.:hp2.+:ehp2.:e#x." or ":#x.:hp2.-:ehp2.:e#x."). Any
number of blanks may appear before or after the optional sign or digit
sequence, but not between digits.
:mac.
ST_STRING_TO_INTEGER ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.st_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.st_token:ehp1.&rbt.
   ,STRING=&lbr.:hp1.string:ehp1. | &cont.
(:hp1.string:ehp1.,:hp1.string_length:ehp1.)&rbr.
   ,INTEGER=:hp1.integer:ehp1.
:emac.
:callx.
CALLX :hp1.st_epa:ehp1.,(:hp1.st_token:ehp1.,&cont.
&amp.ST_STRING_TO_INTEGER,:hp1.string:ehp1.,&cont.
:hp1.string_length:ehp1.,&cont.
:hp1.integer:ehp1.)
:ecallx.
.*****
:plist.
:pLt.integer
:pLd.specifies the label of a fullword in storage where a signed binary
integer equal to the value represented by :#xi.string:e#xi.  will be
placed.
:pLt.string
:pLd.a sequence of numeric characters representing an integer value.  A
leading sign character (":#xb.+:e#xb." or ":#xb.-:e#xb.") is optional.
Blanks may appear at any point in the string :hp1.except:ehp1. between
adjacent digits.  Example string: :#x.'  - 672  ':e#x..
:pLt.string_length
:pLd.specifies the label of a signed binary integer equal to the length
of the storage indicated by the :#xi.string:e#xi. parameter.  The
:#xi.string_length:e#xi. parameter may be from one to four bytes
in length, as determined by the :#xi.sizelength:e#xi. parameter of
the :#x.ST_START:e#x. function.
:note.The macro form of :#x.ST_STRING_TO_INTEGER:e#x. will attempt to
generate a value for :#xi.string_length:e#xi. automatically if it is not
specified.  In order to generate the right value, however,
:#xi.sizelength:e#xi. must have previously been specified on the
:#x.ST_ID:e#x. macro.
:eplist.
:efunc.
.**********************************************************************
:func name='ST_TERMINATE'.End a String Handler Session
.**********************************************************************
:p.
The :#x.ST_TERMINATE:e#x. function ends a session with the String
Handler and sets the :#xi.st_token:e#xi. value to zero.
:mac.
ST_TERMINATE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.st_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.st_token:ehp1.&rbt.
:emac.
:callx.
CALLX :hp1.st_epa:ehp1.,(:hp1.st_token:ehp1.,&amp.ST_TERMINATE)
:ecallx.
:efunc.
.*
