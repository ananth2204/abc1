.*
.* The GML text below is a skeleton reference chapter for one service
.* processor.  The suggested approach for writing a new chapter is to
.*    1) create a new member called SRVDOCxx, where xx is the two
.*       letter service processor identification code.
.*    2) copy this member into it.
.*    3) Change all occurrances of the skeleton names below to the
.*       appropriate values.
.*    4) format a copy of the manual with the new chapter included.
.*    5) use the formatted copy of the new chapter to decided what
.*       changes/additions/deletions need to be made.
.*
.*   <srvproc_name>  - The name used when referring to the service
.*                     processor in general. e.g. "String Handler",
.*                     "Environment Support", "Memory Manager", etc.
.*   <srvload_sym>   - The symbolic name used for the load module, such
.*                     as STRING_HANDLER, MVS_ENVIRONMENT_SUPPORT, etc.
.*   <srvload_name>  - The actual name of the load module identified by
.*                     <srvload_sym>, such as SRVSTR or SRVMVSES.
.*   <>              - The two-letter code assigned to the service
.*                     processor, such as ES, ST, MM, SY, or FI.
.*   <func_name>     - The name used for specific function's reference
.*                     section.  This name would be something like
.*                     ES_LOAD_MODULE, ST_FORMAT, etc.
.*   idid            - The header id used on the section for the xx_ID
.*                     macro.
.*
.*
.* Lines that begin with .*===> describe what should appear in the
.*   text at that point or provide information on how something should
.*   be formatted.
.*
.**********************************************************************
.*                                                                    *
.*                    Chapter. Date/Time Services                     *
.*                                                                    *
.**********************************************************************
:h1.Date/Time Services
:p.
The Date/Time service processor is intended to reduce or eliminate the
tasks normally associated with handling date and time values in a
program.  Date/Time Services may be used to:
:ul.
:li.Return the current date and/or time, in a variety of formats
:li.Convert a date and/or time value from one format to another
:li.Recognize the format of a character date or time value
:li.Return the difference, or :hp1.duration:ehp1., between two date/time
values
:li.Add or subtract an interval value to a date and/or time
:eul.
.*
:p.There are two major operations during each call to the Date/Time
service processor: these are :hp1.input conversion:ehp1. and
:hp1.output conversion:ehp1..  Input conversion validates that the
date and/or time value provided conforms to the format specified, then
converts the date and/or time values to an internal representation.
Output conversion converts the internal representation to the date
and/or time format requested by the caller.
.*
:p.Input validation is necessarily limited for performance reasons:
incoming date and time values are validity-checked to ensure that
numbers, words and other characters are in the right positions and
spelled correctly, but 'sanity checking' is only minimal.  (For example,
an input Gregorian date of 02/30/1989 is considered valid:  however, if
converted to another format, the output date will be equivalent to March
2, 1989.)  Character input data (names of days and months, etc) may be
mixed case:  character output data is always capitalized lowercase.  (If
a program requires data returned from Date/Time Services to be
uppercase, the program can fold the data to uppercase itself.)
.*
:p.A :hp1.general input:ehp1. format is provided.  This format actually
supports a variety of actual date or time formats by attempting to
recognize the format, then proceeding as though the date or time's true
format was specified by the caller. The true format is not returned to
the caller: however, the caller may use the :#x.DT_Convert:e#x. function
to convert the date or time to any other supported format as required.
This function may be extremely
useful for applications where a user is asked to provide a date or time
value: the application doesn't need to care what format the dates and
times are, but can get Date/Time Services to recognize, then convert the
dates and times to any format required.
.*
:p.Date/Time Services internally uses four tableless date conversion
algorithms.  These were adapted from algorithms 199 and 398 from
:hp1.Collected Algorithms From Communications Of The ACM:ehp1..
The algorithms should be correct for any date between March 1, 0000 and
December 31, 9999.
Note, however, that Date/Time Services do not account for Pope Gregory
XIII's calendar adjustment in 1582 A.D: hence, date values prior to
October 15, 1582, although numerically accurate, will be 11 (or more)
days greater than the actual date.
.*
.*--------------------------------------------------------------------*
:h3.Obtaining Date/Time Services' Symbols &amp. Macros
.*--------------------------------------------------------------------*
:p.
Date/Time Services' symbols and interface macros can be found in the
assembler copy member :#x.SRVDTMAC:e#x.. This member contains symbols
naming Date/Time Services' load module, function codes, return codes,
and parameter values.  It also contains macros for using all of the
Date/Time Services' functions. The following statement or its equivalent
should appear at the beginning of any program that uses
Date/Time Services:
:xmp.
   COPY SRVDTMAC      Obtain Date/Time Services' symbols & macros.
:exmp.
.*===> if there is more than one load module that implements the
.*===> service processor's protocol, that should be mentioned here.
.*--------------------------------------------------------------------*
:h3.Establishing Date/Time Services Defaults
.*--------------------------------------------------------------------*
Some parameters are general to Date/Time Services and not specific to
any function.  These parameters include its load module name
(:#xi.DT_epname:e#xi.), entry point address
(:#xi.DT_epa:e#xi.), and token value
(:#xi.DT_token:e#xi.). The :#x.DT_ID:e#x. macro (see
:hdref refid=dtid.) can be used to establish defaults for these
parameters and associate them with a unique service processor
identifier.  The identifier may then be supplied on any Date/Time
Services
macro instruction to refer to the default parameter values.
.*--------------------------------------------------------------------*
:h3.Identifying Date/Time Services
.*--------------------------------------------------------------------*
:p.
The Date/Time service processor resides in the load module named by
the following symbol definition in copy member :#x.SRVDTMAC:e#x.:
:xmp.
&amp.DATETIME_SERVICES SETC '''SRVDT   '''
:exmp.
This symbolic name should be used as the service processor entry point
name for Date/Time Services
as shown in the following :#x.DT_ID:e#x.
macro instruction:
:xmp.
DT_ID ID=DT,SPEPNAME=&amp.DATETIME_SERVICES  Set Date/Time Defaults.
:exmp.
.*--------------------------------------------------------------------*
:h3.Loading Date/Time Services
.*--------------------------------------------------------------------*
:p.
The recommended method for loading Date/Time Services is through
Environment Support's :#x.ES_LOAD_MODULE:e#x. function, as shown in
the following example:
:xmp.
ES_LOAD_MODULE ID=ES,SPID=DT            Load Date/Time Services
:exmp.
.*--------------------------------------------------------------------*
:h3.Specifying Date, Time And Interval Formats
.*--------------------------------------------------------------------*
:p.Although most of the Date/Time Services macros support both a date
and a time value as input and/or output, both need not be specified:
a date or time specification may be used alone as input or output if
desired.  For example, to convert a date from one format to another,
the :#x.DT_Convert:e#x. function could be called using the
:#x.Datein:e#x. and :#x.Dateout:e#x. parameters alone.
Note that if a date or time value is not specified, it is treated as
having a value of zero: for dates, this is equivalent to Jan. 1, 0000,
while for times, this translates to 00:00:00.00, or exactly midnight.
.*
:p.Date/Time Services support a number of date and time formats.
Each format is actually an integer value, with its own symbol associated
with it (for example, format :hp1.&amp.DT_Julian:ehp1.
is equated to integer 2.)
These are listed in the following tables.
.*
:tdef id=dtdated cols='2* * * 3* * 2*' frame=box rules=both
     hdframe=rules compact mindepth=p5 split=yes concat=yes width=page.
:table id=dtdates refid=dtdated.
:tcap.Date/Time Services Supported Date Formats
:thd.
:c.Symbol Name
:c.Format Value
:c.Format Type
:c.Description
:c.Length
:c.Example
:ethd.
:tft refid=dtdated temp.
:c.
:etft.
:row.:c.:#xb.&amp.DT_ES_Format:e#xb.:fnref refid=fndate1.
     :c.1
     :c.Both
     :c.Environment Support format date and time
     :c.8
     :c.X'1989359F', X'0047BF58'
:row.:c.:#xb.&amp.DT_Julian:e#xb.
     :c.2
     :c.Both
     :c.Standard Julian date
     :c.7
     :c.C'1989359'
:row.:c.:#xb.&amp.DT_Juliand:e#xb.
     :c.3
     :c.Both
     :c.7-digit Julian date with decimal
     :c.8
     :c.C'1989.359'
:row.:c.:#xb.&amp.DT_Pjulian:e#xb.
     :c.4
     :c.Both
     :c.Packed-decimal Julian date
     :c.4
     :c.P'1989359'
:row.:c.:#xb.&amp.DT_Ijulian:e#xb.
     :c.5
     :c.Both
     :c.Integer (binary) Julian date
     :c.4
     :c.F'1989359'
:row.:c.:#xb.&amp.DT_Sjulian:e#xb.
     :c.6
     :c.Both
     :c.Short Julian date
     :c.5
     :c.C'89359'
:row.:c.:#xb.&amp.DT_Sjuliand:e#xb.
     :c.7
     :c.Both
     :c.Short Julian date with decimal
     :c.6
     :c.C'89.359'
:row.:c.:#xb.&amp.DT_Number_Of_Days:e#x.
     :c.8
     :c.Both
     :c.Number of days since Jan 1, 00
     :c.4
     :c.F'726767'
:row.:c.:#xb.&amp.DT_Sgregorian:e#xb.:fnref refid=fndate2.
     :c.11
     :c.Both
     :c.Short Gregorian date
     :c.8
     :c.C'12/25/89'
:row.:c.:#xb.&amp.DT_Gregorian:e#xb.:fnref refid=fndate2.
     :c.12
     :c.Both
     :c.Standard Gregorian date
     :c.10
     :c.C'12/25/1989'
:row.:c.:#xb.&amp.DT_Sortdate:e#x.
     :c.13
     :c.Both
     :c.Date format suitable for sorting
     :c.10
     :c.C'1989-12-25'
:row.:c.:#xb.&amp.DT_Ssortdate:e#x.
     :c.14
     :c.Both
     :c.Short version of :#x.DT_Sortdate:e#x.
     :c.8
     :c.C'89-12-25'
:row.:c.:#xb.&amp.DT_Year:e#x.
     :c.15
     :c.Output
     :c.Character year value
     :c.4
     :c.C'1989'
:row.:c.:#xb.&amp.DT_Year2:e#x.
     :c.16
     :c.Output
     :c.2-digit character year
     :c.2
     :c.C'89'
:row.:c.:#xb.&amp.DT_Pyear:e#x.
     :c.17
     :c.Output
     :c.Packed-decimal year value
     :c.4
     :c.PL4'1989'
:row.:c.:#xb.&amp.DT_Iyear:e#x.
     :c.18
     :c.Output
     :c.Halfword integer year value
     :c.2
     :c.H'1989'
:row.:c.:#xb.&amp.DT_Days:e#x.
     :c.19
     :c.Output
     :c.2-digit day number within month
     :c.2
     :c.C'25'
:row.:c.:#xb.&amp.DT_Pdays:e#x.
     :c.20
     :c.Output
     :c.Packed day number within month
     :c.2
     :c.PL2'25'
:row.:c.:#xb.&amp.DT_Idays:e#x.
     :c.21
     :c.Output
     :c.Integer day number within month
     :c.2
     :c.H'25'
:row.:c.:#xb.&amp.DT_Month:e#x.
     :c.22
     :c.Output
     :c.2-digit month number
     :c.2
     :c.C'12'
:row.:c.:#xb.&amp.DT_Pmonth:e#x.
     :c.23
     :c.Output
     :c.Packed month number
     :c.2
     :c.PL2'12'
:row.:c.:#xb.&amp.DT_Imonth:e#x.
     :c.24
     :c.Output
     :c.Integer month number
     :c.2
     :c.H'12'
:row.:c.:#xb.&amp.DT_Snormal:e#xb.
     :c.31
     :c.Both
     :c.Short Normal format date
     :c.9
     :c.C'25 Dec 89'
:row.:c.:#xb.&amp.DT_Normal:e#xb.
     :c.32
     :c.Both
     :c.Normal format date
     :c.11
     :c.C'25 Dec 1989'
:row.:c.:#xb.&amp.DT_SASdate7:e#x.
     :c.33
     :c.Both
     :c.7-character SAS 'DATE7.' format
     :c.7
     :c.C'25DEC89'
:row.:c.:#xb.&amp.DT_SASdate9:e#x.
     :c.34
     :c.Both
     :c.9-character SAS 'DATE9.' format
     :c.9
     :c.C'25DEC1989'
:row.:c.:#xb.&amp.DT_Text:e#xb.
     :c.41
     :c.Both
     :c.Text format date
     :c.11-18
     :c.C'December 25, 1989'
:row.:c.:#xb.&amp.DT_Textd:e#xb.
     :c.42
     :c.Both
     :c.Text format with weekday
     :c.19-28
     :c.C'Monday, December 25, 1989'
:row.:c.:#xb.&amp.DT_Weekday:e#x.
     :c.43
     :c.Output
     :c.Character weekday name
     :c.6-9
     :c.C'Monday'
:row.:c.:#xb.&amp.DT_Weekday3:e#x.
     :c.44
     :c.Output
     :c.3-character weekday name
     :c.3
     :c.C'Mon'
:row.:c.:#xb.&amp.DT_Monthname:e#x.
     :c.45
     :c.Output
     :c.Character month name
     :c.3-9
     :c.C'December'
:row.:c.:#xb.&amp.DT_Monthname3:e#x.
     :c.46
     :c.Output
     :c.3-character month name
     :c.3
     :c.C'Dec'
:etable.
:fn id=fndate1.
This format, although specified as a date format, will accept or return
both a date and time value.  The associated input or output
time parameters will be ignored.
:efn.
:fn id=fndate2.
If :#x.OPTIONS=EUROPEAN:e#x. was specified on the :#x.DT_START:e#x.
macro, the month and day values will be reversed.
:efn.
.*
:tdef id=dttimed cols='2* * * 3* * 2*' frame=box rules=both
     hdframe=rules compact mindepth=p5 split=yes concat=yes width=page.
:table id=dttimes refid=dttimed.
:tcap.Date/Time Services Supported Time Formats
:thd.
:c.Symbol Name
:c.Format Value
:c.Format Type
:c.Description
:c.Length
:c.Example
:ethd.
:tft refid=dttimed temp.
:c.
:etft.
:row.:c.:#xb.&amp.DT_Hundredths:e#x.
     :c.2
     :c.Both
     :c.Number of .01-second units since midnight
     :c.4
     :c.X'0047BF58'
:row.:c.:#xb.&amp.DT_HHMM:e#x.
     :c.3
     :c.Both
     :c.Time in hours and minutes
     :c.5
     :c.C'13:03'
:row.:c.:#xb.&amp.DT_HHMMSS:e#x.
     :c.4
     :c.Both
     :c.Time in hours, minutes, seconds
     :c.8
     :c.C'13:03:40'
:row.:c.:#xb.&amp.DT_HHMMSSTH:e#x.
     :c.5
     :c.Both
     :c.Time in hours, minutes, seconds, hundredths
     :c.11
     :c.C'13:03:40.40'
:row.:c.:#xb.&amp.DT_Civilian:e#x.
     :c.6
     :c.Both
     :c.Time in hours, minutes, seconds, AM/PM
     :c.11
     :c.C' 1:03:40 PM'
:row.:c.:#xb.&amp.DT_TODCLOCK:e#x.:fnref refid=fntime1.
     :c.7
     :c.Both
     :c.System/370 time-of-day clock format:fnref refid=fntime3.
     :c.8
     :c.XL8':hp1.TOD value:ehp1.'
:row.:c.:#xb.&amp.DT_Hours:e#x.:fnref refid=fntime2.
     :c.8
     :c.Output
     :c.2-character hour value
     :c.2
     :c.C'13'
:row.:c.:#xb.&amp.DT_Phours:e#x.:fnref refid=fntime2.
     :c.9
     :c.Output
     :c.2-byte packed-decimal hours
     :c.2
     :c.PL2'13'
:row.:c.:#xb.&amp.DT_Ihours:e#x.:fnref refid=fntime2.
     :c.10
     :c.Output
     :c.Halfword hours value
     :c.2
     :c.H'13'
:row.:c.:#xb.&amp.DT_Minutes:e#x.:fnref refid=fntime2.
     :c.11
     :c.Output
     :c.Character minutes value
     :c.2
     :c.C'03'
:row.:c.:#xb.&amp.DT_PMinutes:e#x.:fnref refid=fntime2.
     :c.12
     :c.Output
     :c.Packed-decimal minutes value
     :c.2
     :c.PL2'3'
:row.:c.:#xb.&amp.DT_Iminutes:e#x.:fnref refid=fntime2.
     :c.13
     :c.Output
     :c.Halfword integer minutes value
     :c.2
     :c.H'3'
:row.:c.:#xb.&amp.DT_Seconds:e#x.:fnref refid=fntime2.
     :c.14
     :c.Output
     :c.Character seconds value
     :c.2
     :c.C'51'
:row.:c.:#xb.&amp.DT_Pseconds:e#x.:fnref refid=fntime2.
     :c.15
     :c.Output
     :c.Packed-decimal seconds value
     :c.2
     :c.PL2'51'
:row.:c.:#xb.&amp.DT_Iseconds:e#x.:fnref refid=fntime2.
     :c.16
     :c.Output
     :c.Halfword integer seconds value
     :c.2
     :c.H'51'
:etable.
:fn id=fntime1.
This format, although specified as a time format, will accept or return
both a date and time value.  The associated input or output
date parameters will be ignored.
:efn.
:fn id=fntime2.
These formats may also be used as interval formats.  Refer to
:tref refid=dtintvl. for more information.
:efn.
:fn id=fntime3.
The System/370 time-of-day clock can only represent a limited range of
dates and times, from Jan. 1, 1900 at 00:00:00.00 to Sept. 17, 2042
at 23:53:47:37.  Attempts to convert values outside this range to TOD
format will result in a :#x.&amp.DT_Out_Of_Range:e#x. return code.
:efn.
.*
:tdef id=dtintvd cols='2* * * 3* * 2*' frame=box rules=both
     hdframe=rules compact mindepth=p5 split=yes concat=yes width=page.
:table id=dtintvl refid=dtintvd.
:tcap.Date/Time Services Supported Interval Formats
:thd.
:c.Symbol Name
:c.Format Value
:c.Format Type
:c.Description
:c.Length
:c.Example
:ethd.
:tft refid=dtintvd temp.
:c.
:etft.
:row.:c.:#xb.&amp.DT_Delta:e#x.
     :c.1
     :c.Both
     :c.Interval in days, hours, minutes, seconds, hundredths
     :c.14
     :c.C'79-15:20:25.43'
:row.:c.:#xb.&amp.DT_Days:e#x.
     :c.19
     :c.Both
     :c.2-digit number of days
     :c.5
     :c.C'00025'
:row.:c.:#xb.&amp.DT_Pdays:e#x.
     :c.20
     :c.Both
     :c.Packed number of days
     :c.4
     :c.PL4'25'
:row.:c.:#xb.&amp.DT_Idays:e#x.
     :c.21
     :c.Both
     :c.Integer number of days
     :c.2
     :c.H'25'
:row.:c.:#xb.&amp.DT_Hours:e#x.:fnref refid=fnintvl.
     :c.8
     :c.Both
     :c.2-character hour value
     :c.5
     :c.C'00013'
:row.:c.:#xb.&amp.DT_Phours:e#x.:fnref refid=fnintvl.
     :c.9
     :c.Both
     :c.4-byte packed-decimal hours
     :c.4
     :c.PL4'13'
:row.:c.:#xb.&amp.DT_Ihours:e#x.:fnref refid=fnintvl.
     :c.10
     :c.Both
     :c.Halfword hours value
     :c.2
     :c.H'13'
:row.:c.:#xb.&amp.DT_Minutes:e#x.:fnref refid=fnintvl.
     :c.11
     :c.Both
     :c.Character minutes value
     :c.5
     :c.C'00003'
:row.:c.:#xb.&amp.DT_PMinutes:e#x.:fnref refid=fnintvl.
     :c.12
     :c.Both
     :c.Packed-decimal minutes value
     :c.4
     :c.PL4'3'
:row.:c.:#xb.&amp.DT_Iminutes:e#x.:fnref refid=fnintvl.
     :c.13
     :c.Both
     :c.Halfword integer minutes value
     :c.2
     :c.H'3'
:row.:c.:#xb.&amp.DT_Seconds:e#x.:fnref refid=fnintvl.
     :c.14
     :c.Both
     :c.Character seconds value
     :c.5
     :c.C'00051'
:row.:c.:#xb.&amp.DT_Pseconds:e#x.:fnref refid=fnintvl.
     :c.15
     :c.Both
     :c.Packed-decimal seconds value
     :c.4
     :c.PL4'51'
:row.:c.:#xb.&amp.DT_Iseconds:e#x.:fnref refid=fnintvl.
     :c.16
     :c.Both
     :c.Halfword integer seconds value
     :c.2
     :c.H'51'
:row.:c.:#xb.&amp.DT_Hundredths:e#x.
     :c.2
     :c.Both
     :c.Number of .01-second units
     :c.5
     :c.C'01578'
:row.:c.:#xb.&amp.DT_Phundredths:e#x.
     :c.17
     :c.Both
     :c.Number of .01-second units
     :c.4
     :c.PL4'1578'
:row.:c.:#xb.&amp.DT_Ihundredths:e#x.
     :c.18
     :c.Both
     :c.Number of .01-second units
     :c.2
     :c.H'1578'
:etable.
:fn id=fnintvl.
These formats may also be used as date or time formats, although their
characteristics may be slightly different.
Refer to
:tref refid=dtdates. and :tref refid=dttimes. for more information.
:efn.
.*
.*--------------------------------------------------------------------*
:h3.The General Input Format
.*--------------------------------------------------------------------*
Date/Time Services provide a generalized input format, known as
:#xb.&amp.DT_General_Input:e#xb., which actually provides a format
recognition function for a variety of character date and time
formats.  If an input value is declared to be of this format, Date/Time
Services attempts to determine the format:  once the format is
recognized, Date/Time Services treats the value as though that input
format was specified by the caller.
The invalid-input return codes indicate that the format was not
recognized.
.*
:p.The following date, time and interval formats are supported by the
:#xb.&amp.DT_General_Input:e#xb. format:
:ul compact.
:li.:#xb.&amp.DT_Civilian:e#xb.
:li.:#xb.&amp.DT_Gregorian:e#xb.
:li.:#xb.&amp.DT_HHMM:e#xb.
:li.:#xb.&amp.DT_HHMMSS:e#xb.
:li.:#xb.&amp.DT_HHMMSSTH:e#xb.
:li.:#xb.&amp.DT_Julian:e#xb.
:li.:#xb.&amp.DT_Juliand:e#xb.
:li.:#xb.&amp.DT_Normal:e#xb.
:li.:#xb.&amp.DT_Sgregorian:e#xb.
:li.:#xb.&amp.DT_Sjulian:e#xb.
:li.:#xb.&amp.DT_Sjuliand:e#xb.
:li.:#xb.&amp.DT_Snormal:e#xb.
:li.:#xb.&amp.DT_Sortdate:e#xb.
:li.:#xb.&amp.DT_Ssortdate:e#xb.
:li.:#xb.&amp.DT_SASdate7:e#xb.
:li.:#xb.&amp.DT_SASdate9:e#xb.
:li.:#xb.&amp.DT_Text:e#xb.
:eul.
.*--------------------------------------------------------------------*
:h3.Common Parameters
.*--------------------------------------------------------------------*
:p.There are several parameters common to any
Date/Time Services
function call.  These are:
:plist.
:pLt.id_name
:pLd.specifies the name of a service processor identifier created by the
:#x.DT_ID:e#x. macro which will be used by the :#x.DT_START:e#x.
macro to automatically obtain values for :#xi.DT_epa:e#xi.
and
:#xi.DT_token:e#xi.. This parameter is required unless both
:#xi.DT_epa:e#xi. and :#xi.DT_token:e#xi. are
specified.
:pLt.DT_epa
:pLd.specifies the label of a fullword in storage that contains the
entry point address of an already-started Date/Time Services service
processor.  The value specified by :#xi.DT_epa:e#xi.
overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:pLt.DT_token
:pLd.specifies the label of a fullword in storage that contains the
value returned by :#x.DT_START:e#x. for the
:#xi.DT_token:e#xi. parameter.  The value specified by
:#xi.DT_token:e#xi. overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:eplist.
.*--------------------------------------------------------------------*
:h3.Return Codes
.*--------------------------------------------------------------------*
:p.
Date/Time Services may issue any of the following return codes in
various situations.  Some of the return codes may be received from any
call to Date/Time Services, while others are specific to individual
functions.
.*---------------------------------------------------------------------*
.* ReturnCode section: table of return codes and their meanings.
.*
.*===> This section should be elimitated for things that do not have
.*===> return codes, such as the DT_ID macro or data-mapping macros.
.*
.* :rclist.
.* :rcn.number           | One rcn/rct/rcd triple for each return code
.* :rct.symbol           | that the function may generate.
.* :rcd.description      |
.* :erclist.
.*
.*---------------------------------------------------------------------*
:rclist.
:rcn.0
:rct.DT_SUCCESS
:rcd.The Date/Time Services
function has completed successfully.
:rcn.1
:rct.DT_INVALID_FUNCTION
:rcd.An unsupported function code was received
by Date/Time Services.
:rcn.2
:rct.DT_INVALID_NUMBER_OF_PARMS
:rcd.The Date/Time Services
function received an invalid number of
parameters.  This may be due to an improperly coded CALLX or PLIST
macro, or the inadvertent use of the NOVL option.
:rcn.3
:rct.DT_INVALID_DT_ID
:rcd.Date/Time Services detected an invalid
PWA address in :#x.DT_token:e#x..
:rcn.4
:rct.DT_ENVIRONMENT_SUPPORT_ERROR
:rcd.An Environment Support function suffered an error.
:rcn.5
:rct.DT_STRING_HANDLER_ERROR
:rcd.An error was reported by the String Handler service processor.
More information may be found by issuing the
:#x.ES_DISPLAY_DEBUG_INFO:e#x. function.
:rcn.6
:rct.DT_INVALID_DATE_FORMAT
:rcd.The integer fullword provided via the :ehp1.date_format:ehp1.
parameter was not a supported Date/Time Services date format.
:rcn.7
:rct.DT_INVALID_TIME_FORMAT
:rcd.The integer fullword provided via the :ehp1.time_format:ehp1.
parameter was not a supported Date/Time Services time format.
:rcn.8
:rct.DT_INVALID_INTERVAL_FORMAT
:rcd.The integer fullword provided via the :ehp1.interval_format:ehp1.
parameter was not a supported Date/Time Services interval format.
:rcn.9
:rct.DT_INVALID_INPUT_DATE
:rcd.The date value provided by the caller failed validity checking for
the specified date format.
:rcn.10
:rct.DT_INVALID_INPUT_TIME
:rcd.The time value provided by the caller failed validity checking for
the specified time format.
:rcn.11
:rct.DT_INVALID_INPUT_INTERVAL
:rcd.The interval value provided by the caller failed validity checking
for the specified interval format.
:rcn.12
:rct.DT_OVERFLOW
:rcd.The interval value produced by the function is too large for the
specified output interval format.
:rcn.13
:rct.DT_OUT_OF_RANGE
:rcd.The output date/time value is not within the acceptable range for
the specified format. This will only occur when using
:#x.DT_TODclock:e#x. format, when the date and time values are outside
the range of Jan. 1, 1900 at 00:00:00.00 and
Sept. 17, 2042 at 23:53:47.37.
:erclist.
.*--------------------------------------------------------------------*
:h2.Date/Time Services Functions
.*--------------------------------------------------------------------*
:p.
The remaining sections of this chapter describe all functions provided
by Date/Time Services, arranged in alphabetical order.
Each function's description begins on a new page, and the name of the
function being described appears in the top outside corner of every
page.
.**********************************************************************
.se temp = 'Add Interval To Date And Time'
:func id=dtadd name='DT_ADD'.&temp.
.**********************************************************************
:p.
The :#x.DT_ADD:e#x. function will add an interval to a date and/or
time value.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
DT_ADD ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.DT_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.DT_token:ehp1.&rbt.
   &lbt.,DATEIN=(:hp1.date_address,date_format:ehp1.)&rbt.
   &lbt.,TIMEIN=(:hp1.time_address,time_format:ehp1.)&rbt.
   &lbt.,INTERVAL=(:hp1.interval_address,interval_format:ehp1.)&rbt.
   &lbt.,DATEOUT=(:hp1.date_address,time_format:ehp1.)&rbt.
   &lbt.,TIMEOUT=(:hp1.time_address,time_format:ehp1.)&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.DT_epa:ehp1.,&cont.
(:hp1.DT_token:ehp1.,&amp.DT_ADD,&cont.
:hp1.datein_address:ehp1.
              ,:hp1.datein_format:ehp1.,&cont.
:hp1.timein_address:ehp1.,:hp1.timein_format:ehp1.
              ,:hp1.interval_address,interval_format,:ehp1.&cont.
:hp1.dateout_address:ehp1.
              ,:hp1.dateout_format,timeout_address,:ehp1.&cont.
:hp1.timeout_format:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.datein_address
:pLd.Specifies the address of the input date value.
For variable-length input formats, the field needs only to be as long as
the date value, and does not need to be padded with spaces.  This is
true for all input values for
:#x.DT_ADD:e#x..
:pLt.datein_format
:pLd.Specifies the format of the input date value.
This value may be an integer, numeric symbol, or the address of a
fullword in storage.  This is true of all format specifications
for :#x.DT_ADD:e#x..
:pLt.timein_address
:pLd.Provides the address of the input time value.
:pLt.timein_format
:pLd.Specifies the format of the input time value.
:pLt.interval_address
:pLd.Specifies the address of the input interval value.
:pLt.interval_format
:pLd.Specifies the format of the input interval value.
:pLt.dateout_address
:pLd.Specifies the address of the output date value.
The area should be large enough to hold the
longest possible date value for the requested format. If the format is
variable-length, it should be cleared to spaces before the call to
:#x.DT_ADD:e#x..
:pLt.dateout_format
:pLd.Specifies the format of the output date value.
:pLt.timeout_address
:pLd.Provides the address of the output time value.
:pLt.timeout_format
:pLd.Specifies the format of the output time value.
:eplist.
.*---------------------------------------------------------------------*
:fh3.Examples
To add a constant of
75 hours to the date and time values in :#x.pwa_date:e#x. and
:#x.pwa_time:e#x.,
one would code:
:xmp.
DT_ADD  ID=DT,
        DATEIN=(pwa_date,&DT_NORMAL),
        TIMEIN=(pwa_time,&DT_HHMMSS),
        INTERVAL=('75',&DT_HOURS),
        DATEOUT=(pwa_date,&DT_NORMAL),
        TIMEOUT=(pwa_time,&DT_HHMMSS)
:exmp.
This would replace the contents of :#x.pwa_date:e#x. and
:#x.pwa_time:e#x. with the updated date and time values.
:efunc.
.**********************************************************************
.se temp = 'Date And Time Format Conversion'
:func id=dtcnvt name='DT_CONVERT'.&temp.
.**********************************************************************
:p.
The :#x.DT_CONVERT:e#x. function will convert a date and/or time value
from one supported format to another.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
DT_CONVERT ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.DT_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.DT_token:ehp1.&rbt.
   &lbt.,FROMDATE=(:hp1.date_address,date_format:ehp1.)&rbt.
   &lbt.,FROMTIME=(:hp1.time_address,time_format:ehp1.)&rbt.
   &lbt.,TODATE=(:hp1.date_address,date_format:ehp1.)&rbt.
   &lbt.,TOTIME=(:hp1.time_address,time_format:ehp1.)&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.DT_epa:ehp1.,&cont.
(:hp1.DT_token:ehp1.,&amp.DT_CONVERT,&cont.
:hp1.fromdate_address:ehp1.
              ,:hp1.fromdate_format:ehp1.,&cont.
:hp1.fromtime_address:ehp1.,:hp1.fromtime_format:ehp1.
              ,:hp1.todate_address:ehp1.,:hp1.todate_format:ehp1.,&cont.
:hp1.totime_address:ehp1.
              ,:hp1.totime_format:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.fromdate_address
:pLd.Specifies the address of the input date value.
For variable-length input formats, the field needs only to be as long as
the date value, and does not need to be padded with spaces.  This is
true for all input values for
:#x.DT_CONVERT:e#x..
:pLt.fromdate_format
:pLd.Specifies the format of the input date value.
This value may be an integer, numeric symbol, or the address of a
fullword in storage.  This is true of all format specifications
for :#x.DT_CONVERT:e#x..
:pLt.fromtime_address
:pLd.Provides the address of the input time value.
:pLt.fromtime_format
:pLd.Specifies the format of the input time value.
:pLt.todate_address
:pLd.Specifies the address of the output date value.
The area should be large enough to hold the
longest possible date value for the requested format. If the format is
variable-length, it should be cleared to spaces before the call to
:#x.DT_CONVERT:e#x..
:pLt.todate_format
:pLd.Specifies the format of the output date value.
:pLt.totime_address
:pLd.Provides the address of the output time value.
:pLt.totime_format
:pLd.Specifies the format of the output time value.
:eplist.
.*---------------------------------------------------------------------*
:fh3.Examples
If the current contents of fields :#x.pwa_date:e#x. and
:#x.pwa_time:e#x. are
date and time are :#x.January 7, 1990:e#x. and
:#x.16:11:30:e#x. respectively,
the following DT_CONVERT macro:
:xmp.
DT_CONVERT  ID=DT,
            FROMDATE=(pwa_date,&DT_TEXT),
            FROMTIME=(pwa_time,&DT_HHMMSS),
            TODATE=(pwa_dateout,&DT_NORMAL),
            TOTIME=(pwa_timeout,&DT_CIVILIAN)
:exmp.
would return date and time values in :#x.pwa_dateout:e#x. and
:#x.pwa_timeout:e#x. respectively.    These values would appear as:
:xmp.
   pwa_dateout    07 JAN 1990
   pwa_timeout     4:11:30 PM
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Duration Between Two Date/Time Values'
:func id=dtdur name='DT_DURATION'.&temp.
.**********************************************************************
:p.
The :#x.DT_DURATION:e#x.
function will return the duration, or difference, between
two date and/or time values.
This duration, returned in :#x.interval:e#x. format, is always a
positive number of days, hours, etc.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
DT_DURATION ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.DT_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.DT_token:ehp1.&rbt.
   &lbt.,DATE1=(:hp1.date_address,date_format:ehp1.)&rbt.
   &lbt.,TIME1=(:hp1.date_address,time_format:ehp1.)&rbt.
   &lbt.,DATE2=(:hp1.date_address,date_format:ehp1.)&rbt.
   &lbt.,TIME2=(:hp1.date_address,time_format:ehp1.)&rbt.
   &lbt.,DURATION=(:hp1.duration_address,duration_format:ehp1.)&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.DT_epa:ehp1.,&cont.
(:hp1.DT_token:ehp1.,&amp.DT_CONVERT,&cont.
:hp1.date1_address:ehp1.
              ,:hp1.date1_format:ehp1.,&cont.
:hp1.time1_address:ehp1.,:hp1.time1_format:ehp1.
              ,:hp1.date2_address:ehp1.,:hp1.date2_format:ehp1.,&cont.
:hp1.time2_address:ehp1.
              ,:hp1.time2_format:ehp1.,&cont.
:hp1.duration_address:ehp1.,:hp1.duration_format:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.date1_address
:pLd.Specifies the address of the first input date value.
For variable-length input formats, the field needs only to be as long as
the date value, and does not need to be padded with spaces.  This is
true for all input values for
:#x.DT_DURATION:e#x..
:pLt.date1_format
:pLd.Specifies the format of the first input date value.
This value may be an integer, numeric symbol, or the address of a
fullword in storage.  This is true of all format specifications
for :#x.DT_DURATION:e#x..
:pLt.time1_address
:pLd.Provides the address of the first input time value.
:pLt.time1_format
:pLd.Specifies the format of the first input time value.
:pLt.date2_address
:pLd.Specifies the address of the second input date value.
:pLt.date2_format
:pLd.Specifies the format of the second input date value.
:pLt.time2_address
:pLd.Provides the address of the second input time value.
:pLt.time2_format
:pLd.Specifies the format of the second input time value.
:pLt.duration_address
:pLd.Provides the address of the output interval value.
The area should be large enough to hold the
longest possible interval
value for the requested format. If the format is
variable-length, it should be cleared to spaces before the call to
:#x.DT_DURATION:e#x..
:pLt.duration_format
:pLd.Specifies the format of the output interval value.
:eplist.
.*---------------------------------------------------------------------*
:fh3.Examples
If the fields
:#x.pwa_date:e#x.,
:#x.pwa_date2:e#x.,
:#x.pwa_time:e#x., and
:#x.pwa_time2:e#x. contain various date and time values, the following
call to :#x.DT_DURATION:e#x. would return the difference between them
in :#x.DT_Delta:e#x. format.
:xmp.
DT_DURATION ID=DT,
            DATE1=(pwa_date,&DT_TEXT),
            TIME1=(pwa_time,&DT_HHMMSS),
            DATE2=(pwa_date2,&DT_NORMAL),
            TIME2=(pwa_time2,&DT_CIVILIAN)
            DURATION=(pwa_interval,&DT_DELTA)
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Return Current Date And Time'
:func id=dtget  name='DT_GET_CURRENT'.&temp.
.**********************************************************************
:p.
The :#x.DT_GET_CURRENT:e#x. function retrieves the current date and/or
time.  The format requested may be any valid date format for date, and
any valid time format for time.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
DT_GET_CURRENT ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.DT_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.DT_token:ehp1.&rbt.
   &lbt.,DATE=(:hp1.date_address,date_format:ehp1.)&rbt.
   &lbt.,TIME=(:hp1.date_address,time_format:ehp1.)&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.DT_epa:ehp1.,&cont.
(:hp1.DT_token:ehp1.,&amp.DT_GET_CURRENT,&cont.
:hp1.date_address:ehp1.
              ,:hp1.date_format&lbt.,time_address,time_format&rbt.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.date_address
:pLd.Provides the address of an area where Date/Time Services will
return the current date.
The area should be large enough to hold the
longest possible date value for the requested format. If the format is
variable-length, it should be cleared to spaces before the call to
:#x.DT_GET_CURRENT:e#x..
:pLt.date_format
:pLd.Specifies a format for the date value returned by
:#x.DT_GET_CURRENT:e#x..
This value may be an integer, numeric symbol, or the address of a
fullword in storage.  This is true of all format specifications
for :#x.DT_GET_CURRENT:e#x..
:pLt.time_address
:pLd.Provides the address of an area where Date/Time Services will
return the current time.
:pLt.time_format
:pLd.Specifies a format for the time value returned by
:#x.DT_GET_CURRENT:e#x..
:eplist.
.*---------------------------------------------------------------------*
:fh3.Examples
If the current date and time are :#x.January 7, 1990:e#x.
and :#x.16:11:30:e#x. respectively,
the following DT_GET_CURRENT macro:
:xmp.
DT_GET_CURRENT  ID=DT,
                DATE=(pwa_date,&DT_NORMAL),
                TIME=(pwa_time,&DT_CIVILIAN)
:exmp.
would return date and time values in :#x.pwa_date:e#x. and
:#x.pwa_time:e#x. respectively.    These values would appear as:
:xmp.
   pwa_date    07 JAN 1990
   pwa_time     4:11:30 PM
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Establish Default Date/Time Services Values'
:func id=dtid name='DT_ID'.&temp.
.**********************************************************************
:p.The :#x.DT_ID:e#x. macro is used to establish default values for
use by other Date/Time Services macros, which may access those values
through a unique identifier, :#xi.id_name:e#xi., specified by
the user.  When allowed to generate default values, this macro will
create Program Work Area (PWA) storage for :#xi.DT_epa:e#xi.
and
:#xi.DT_token:e#xi.. These values, whether generated by the
macro or provided by the user, are accessable from all other
Date/Time Services
macros via the :#x.ID=:e#x.:#xi.id_name:e#xi. parameter.
:mac.
DT_ID ID=:hp1.id_name:ehp1.
   &lbt.,SPEPNAME=:hp1.DT_epname:ehp1.&rbt.
   &lbt.,SPEPA=:hp1.DT_epa:ehp1.&rbt.
   &lbt.,SPTOKEN=:hp1.DT_token:ehp1.&rbt.
   &lbt.,ESID=:hp1.esid_name:ehp1.&rbt.
   &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
:emac.
.*****
:plist.
:pLt.esid_name
:pLd.the name of a service processor identifier, created by the
:#x.ES_ID:e#x.  macro, which will be used by the :#x.DT_ID:e#x. macro to
automatically obtain the value for :#x.esv:e#x. (see below).
:pLt.esva
:pLd.Specifies the label of a fullword in storage that contains (or
will contain) the address of the Environment Support Vector
(:#x.ESV:e#x.) created by the :#x.ES_START:e#x. function.
:eplist.
:fh3.Examples
:p.
The following :#x.DT_ID:e#x. macro will associate everything required by
the Date/Time Services
macros with the service processor identifier :#x.DT:e#x.,
as well as establish the :#x.sizelength:e#x. value for the
Date/Time Services
session.
:xmp.
    DT_ID  ID=DT,
           SPEPNAME=&amp.DATETIME_SERVICES,
           SPEPA=PWA_DT_ENTRY,
           SPTOKEN=PWA_DT_TOKEN,
           ESID=ES,
           ESVA=PWA_ESVA
.sp 2
PWA_DT_ENTRY  DS    F         Entrypoint for Date/Time Services
PWA_DT_TOKEN  DS    F         Unique token for Date/Time Services
PWA_ESVA      DS    F         Environment Support Vector address
:exmp.
Note that this example forces the various operands to specific values
and addresses.  If these are not specified and do not need to be
explicitly referenced, simply coding the :#x.DT_ID:e#x. macro with only
the :#x.ID:e#x. and :#x.SPEPNAME:e#x.
operands will cause all of them to be generated automatically.
:efunc.
.**********************************************************************
.se temp = 'Begin A Date/Time Services Session'
:func id=dtstart name='DT_START'.&temp.
.**********************************************************************
:p.
The :#x.DT_START:e#x. function establishes
a new Date/Time Services
session and returns its session identifier in the
:hp1.DT_token:ehp1. parameter.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
DT_START ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.DT_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.DT_token:ehp1.&rbt.
   &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
   &lbt.,OPTION=(:hp1.option_list:ehp1.)&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.DT_epa:ehp1.,(:hp1.DT_token:ehp1.,&amp.DT_START,&cont.
:hp1.esva:ehp1.,:hp1.option_byte:ehp1.)
.*===> If there are alternate forms, where the parameter list is
.*===> significantly different depending on the first few parameter
.*===> values, do something like the following:
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.esva
:pLd.Specifies the label of a fullword in storage that contains the
address of the Environment Support Vector (ESV) created by the
ES_START function.
:pLt.option_list
:pLd.A list of additional options for this
Date/Time Services
session. If
multiple option values are specified, they must be enclosed in
parentheses.
The only
options currently supported are :hp1.EUROPEAN:ehp1. and
:hp1.AMERICAN:ehp1..
:ul.
:li.:hp2.EUROPEAN:ehp2. - Gregorian dates processed by Date/Time
Services will be of the format :hp1."dd/mm/yyyy":ehp1.
If using the CALLX form of
:hp1.DT_START:ehp1., the EUROPEAN
option corresponds to a bit setting of
X'80' in the option byte.
:li.:hp2.AMERICAN:ehp2. - Gregorian dates processed by Date/Time
Services will be of the format :hp1."mm/dd/yyyy":ehp1.
If using the CALLX form of
:hp1.DT_START:ehp1., the AMERICAN
option corresponds to the X'80' bit being set to zero
in the option byte.
AMERICAN is the default Gregorian date format.
:eul.
:pLd.
:eplist.
.*---------------------------------------------------------------------*
.* Optional sections for describing how to use the function/macro.
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
.* Examples showing how to use it and neat ways to take advantage of
.* the function's capabilities.
.*
.*===> If one or two separate examples are being done, simply use
.*===>
.*===> :fh3.Example 1
.*===>   ...example 1 stuff...
.*===> :fh3.Example 2
.*===>   ...example 2 stuff...
.*===>
.*===> If a whole system of related examples are being done, use
.*===>
.*===> :fh3.Examples
.*===>   ....description general to all examples.
.*===> :h5.Example 1
.*===>   ...example 1 stuff...
.*===> :h5.Example 2
.*===>   ...example 2 stuff...
.*===>
.*---------------------------------------------------------------------*
:fh3.Examples
:p.
The following :#x.DT_START:e#x.  macro will initialize a Date/Time
Services session.
:xmp.
    DT_START ID=DT
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Subtract Interval From Date And Time'
:func id=dtsub name='DT_SUBTRACT'.&temp.
.**********************************************************************
:p.
The :#x.DT_SUBTRACT:e#x. function will subtract
an interval from a date and/or
time value.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
DT_SUBTRACT ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.DT_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.DT_token:ehp1.&rbt.
   &lbt.,DATEIN=(:hp1.date_address,date_format:ehp1.)&rbt.
   &lbt.,TIMEIN=(:hp1.time_address,time_format:ehp1.)&rbt.
   &lbt.,INTERVAL=(:hp1.interval_address,interval_format:ehp1.)&rbt.
   &lbt.,DATEOUT=(:hp1.date_address,time_format:ehp1.)&rbt.
   &lbt.,TIMEOUT=(:hp1.time_address,time_format:ehp1.)&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.DT_epa:ehp1.,&cont.
(:hp1.DT_token:ehp1.,&amp.DT_SUBTRACT,&cont.
:hp1.datein_address:ehp1.
              ,:hp1.datein_format:ehp1.,&cont.
:hp1.timein_address:ehp1.,:hp1.timein_format:ehp1.
              ,:hp1.interval_address,interval_format,:ehp1.&cont.
:hp1.dateout_address,:ehp1.
              ,:hp1.dateout_format,timeout_address,:ehp1.&cont.
:hp1.timeout_format:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.datein_address
:pLd.Specifies the address of the input date value.
For variable-length input formats, the field needs only to be as long as
the date value, and does not need to be padded with spaces.  This is
true for all input values for
:#x.DT_SUBTRACT:e#x..
:pLt.datein_format
:pLd.Specifies the format of the input date value.
This value may be an integer, numeric symbol, or the address of a
fullword in storage.  This is true of all format specifications
for :#x.DT_ADD:e#x..
:pLt.timein_address
:pLd.Provides the address of the input time value.
:pLt.timein_format
:pLd.Specifies the format of the input time value.
:pLt.interval_address
:pLd.Specifies the address of the input interval value.
:pLt.interval_format
:pLd.Specifies the format of the input interval value.
:pLt.dateout_address
:pLd.Specifies the address of the output date value.
The area should be large enough to hold the
longest possible date value for the requested format. If the format is
variable-length, it should be cleared to spaces before the call to
:#x.DT_SUBTRACT:e#x..
:pLt.dateout_format
:pLd.Specifies the format of the output date value.
:pLt.timeout_address
:pLd.Provides the address of the output time value.
:pLt.timeout_format
:pLd.Specifies the format of the output time value.
:eplist.
.*---------------------------------------------------------------------*
:fh3.Examples
To subtract a constant of
75 hours to the date and time values in :#x.pwa_date:e#x. and
:#x.pwa_time:e#x.,
one would code:
:xmp.
DT_SUBTRACT ID=DT,
        DATEIN=(pwa_date,&DT_NORMAL),
        TIMEIN=(pwa_time,&DT_HHMMSS),
        INTERVAL=(75,&DT_HOURS),
        DATEOUT=(pwa_date,&DT_NORMAL),
        TIMEOUT=(pwa_time,&DT_HHMMSS)
:exmp.
This would replace the contents of :#x.pwa_date:e#x. and
:#x.pwa_time:e#x. with the updated date and time values.
:efunc.
.**********************************************************************
.se temp = 'Terminate A Date/Time Services Session'
:func id=dtterm name='DT_TERMINATE'.&temp.
.**********************************************************************
:p.
The :#x.DT_TERMINATE:e#x. function concludes
the Date/Time Services session identified by the
:hp1.DT_token:ehp1. parameter, and releases any resources held
by the Date/Time Services service processor.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
DT_TERMINATE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.DT_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.DT_token:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.DT_epa:ehp1.,(:hp1.DT_token:ehp1.,&amp.DT_TERMINATE)
.*===> If there are alternate forms, where the parameter list is
.*===> significantly different depending on the first few parameter
.*===> values, do something like the following:
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
.* There are no function-specific parameters for DT_TERMINATE.
.*---------------------------------------------------------------------*
.* Optional sections for describing how to use the function/macro.
.*---------------------------------------------------------------------*
.*===> If one or two separate examples are being done, simply use
.*===>
.*===> :fh3.Example 1
.*===>   ...example 1 stuff...
.*===> :fh3.Example 2
.*===>   ...example 2 stuff...
.*===>
.*===> If a whole system of related examples are being done, use
.*===>
.*===> :fh3.Examples
.*===>   ....description general to all examples.
.*===> :h5.Example 1
.*===>   ...example 1 stuff...
.*===> :h5.Example 2
.*===>   ...example 2 stuff...
.*===>
.*---------------------------------------------------------------------*
:fh3.Examples
:p.The following :#x.DT_TERMINATE:e#x. macro will cause
Date/Time Services to
release any resources that it acquired.
:xmp.
DT_TERMINATE ID=DT
:exmp.
:efunc.
