*---------------------------------------------------------------------*
*  Copyright 2011 by Clemson University Research Foundation           *
*                                                                     *
*  Licensed under the Apache License, Version 2.0 (the "License");    *
*  you may not use this file except in compliance with the License.   *
*  You may obtain a copy of the License in this library as member     *
*  $LICENSE, or from                                                  *
*                                                                     *
*      http://www.apache.org/licenses/LICENSE-2.0                     *
*                                                                     *
*  Unless required by applicable law or agreed to in writing,         *
*  software distributed under the License is distributed on an "AS    *
*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either    *
*  express or implied.  See the License for the specific language     *
*  governing permissions and limitations under the License.           *
*---------------------------------------------------------------------*
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   SRV##ID                                                    *
*                                                                     *
* Purpose: This macro stashes default values for Service Processor    *
*          sessions and associates them with a unique identifier for  *
*          later retreival (by this macro).                           *
*                                                                     *
* To create a service processor identifier, invoke SRV##ID with:      *
*                                                                     *
*   SRV##ID SET,                                                      *
*           ID=identifier,IDMAC=macroName,                            *
*           SPEPNAME=spepname,SPEPA=spepa,SPTOKEN=sptoken,            *
*           ESID=esid                                                 *
* To obtain the values from an existing service processor identifier: *
*                                                                     *
*   SRV##ID GET,                                                      *
*           REQUIRED=(keyword,keyword,...),                           *
*           ID=identifier,IDMAC=macroName,                            *
*           SPEPNAME=spepname,SPEPA=spepa,SPTOKEN=sptoken,            *
*           ESID=esid,ESVA=esva                                       *
* where                                                               *
*                                                                     *
*   SET/GET     - is the operation to be performed.  SET causes a new *
*                 service processor identifier (SPID) to be created,  *
*                 and GET causes the values associated with an        *
*                 existing SPID (and possibly overridden by values    *
*                 from specified keywords) to be retrieved and        *
*                 placed in fixed-name global variables.              *
*   ID=         - specifies the identifier to assign to a new SPID    *
*                 for SET, or the identifier of an existing SPID for  *
*                 GET.  It is required for SET but optional for GET.  *
*   IDMAC=      - specifies the name of the macro that created the    *
*                 SPID.  It is required for SET but optional for GET. *
*                 For GET, it may specify a list of acceptable names. *
*   ESID=       - specifies the SPID of the Environment Support whose *
*                 ESV address will be used when starting the service  *
*                 processor session named by ID=.  If not specified   *
*                 for SET, the SPID of the first Environment Support  *
*                 service processor identifier created will be used.  *
*                 If no Environment Support SPID exists (yet), then   *
*                 ESID= is required.                                  *
*   ESVA=       - specifies the tag of a fullword that contains (or   *
*                 will contain) the address of the Environment        *
*                 Support Vector that to use when starting the        *
*                 service processor session named by ID=.  This       *
*                 keyword cannot be specified with SET; it may be     *
*                 specified on GET to override the value that would   *
*                 have been obtained via the associated ESID SPID.    *
*   SPEPNAME=   - specifies the entry point name of the service       *
*                 processor session named by ID=.  It can be          *
*                 specified as either a tag or a literal.  If not     *
*                 specified by SET, it will be set to a null value.   *
*   SPEPA=      - specifies the tag of a fullword that contains (or   *
*                 will contain) the entry point address of the        *
*                 service processor session named by ID=.  If not     *
*                 specified by SET, a tag will be generated in the    *
*                 PWA for it.                                         *
*   SPTOKEN=    - specifies the tag of a fullword that contains (or   *
*                 will contain) the token for the service processor   *
*                 session named by ID=.  If not specified by SET, a   *
*                 tag will be generated in the PWA for it.            *
*   ERRMAC=     - specifies the name of a macro to invoke immediately *
*                 following any service processor call.  This macro   *
*                 presumably examines the results of the operation    *
*                 and provides application-specific error handling.   *
*   REQUIRED=   - for GET only; specifies a list of the keywords      *
*                 whose values the invoking macro requires.  If any   *
*                 of those values are still null after they have been *
*                 retrieved from the ID=spid and possibly overridden  *
*                 by specified keywords, an MNOTE will be generated.  *
*                                                                     *
* The SET operation creates uniquely named global variables and saves *
* the supplied information in them.  The GET operation retrieves the  *
* values and places them in fixed-named global variables to make it   *
* simpler for macros to retrive SPIDs.  Variables created by SET and  *
* returned by GET are all declared as GBLC:                           *
*                                                                     *
*    Keyword   SET creates       GET returns                          *
*    -------   -------------     -----------                          *
*                                &#_IDCODE                            *
*    ID        &(#$&ID.$#IDMAC)  &#_IDMAC                             *
*    ESID      &(#$&ID.$#ESID)   &#_IDESID                            *
*    ESVA                        &#_IDESVA                            *
*    SPEPNAME  &(#$&ID.$#EPN)    &#_IDEPN                             *
*    SPEPA     &(#$&ID.$#EPA)    &#_IDEPA                             *
*    SPTOKEN   &(#$&ID.$#TKN)    &#_IDTKN                             *
*    ERRMAC    &(#$&ID.$#EMC)    &#_IDEMC                             *
*                                                                     *
* When GET returns, &#_IDCODE will equal 'SUCCESS' if all required    *
* values are non-null.  If any required keyword has a null value,     *
* the value of &#_IDCODE will be set to that keyword's name.  For     *
* example, if you specified SRV##ID GET,REQUIRED=(ESVA) and the       *
* value of ESVA was null, &#_IDCODE would be = 'ESVA'.                *
*                                                                     *
*---------------------------------------------------------------------*
       MACRO
       SRV##ID &OP,             SET or GET keyword.                    +
               &ID=,            Service Processor Identifier (SPID).   +
               &IDMAC=,         Name of macro creating this SPID.      +
               &ESID=,          SPID of ID's Environment Support.      +
               &SPEPNAME=,      Epname of ID's Service Processor.      +
               &SPEPA=,         Epa of ID's Service Processor.         +
               &SPTOKEN=,       Token of ID's Service Processor.       +
               &ERRMAC=,        Error macro to invoke.                 +
               &ESVA=,          (GET only) ESV address to use.         +
               &REQUIRED=       (GET only) Values to retrieve.
.*
       AIF   ('&OP' EQ 'SET').SRVSETID
       AIF   ('&OP' EQ 'GET').SRVGETID
       MNOTE 8,'Invalid operation for SRV##ID.  Must be SET or GET.'
       MEXIT
.*--------------------------------------------------------------------*
.*                                                                    *
.*  Create a new Service Processor Identifier.                        *
.*                                                                    *
.*--------------------------------------------------------------------*
.SRVSETID ANOP
          GBLC  &PWA,&PSD,&DEFAULT_ENVIRONMENT_SUPPORT_ID
          LCLC  &V_IDMAC,&V_ESID,&V_EPN,&V_EPA,&V_TKN,&V_EMC
          LCLB  &GEN_PWA
.*
.* Check for the presence of required keywords.
.*
          AIF   ('&ID' NE '').ID_PR
          MNOTE 8,'ID is a required keyword.'
          MEXIT
.ID_PR    ANOP
.*
.* Declare the global variables for tracking default information, and
.* check to make sure that they have not already been used.
.* Note: Created SET symbols cannot contain underscores (_).
.*
&V_IDMAC SETC '#$&ID.$#IDMAC'     Creating macro's name.
&V_ESID  SETC '#$&ID.$#ESID'      Env. Supp. ID's variable name.
&V_EPN   SETC '#$&ID.$#EPN'       SPEPNAME tag's variable name.
&V_EPA   SETC '#$&ID.$#EPA'       SPEPA tag's variable name.
&V_TKN   SETC '#$&ID.$#TKN'       SPTOKEN tag's variable name.
&V_EMC   SETC '#$&ID.$#EMC'       ERRMAC tag's variable name.
         GBLC  &(&V_IDMAC),&(&V_ESID),&(&V_EPN),&(&V_EPA),&(&V_TKN)
         GBLC  &(&V_EMC)
         AIF   ('&(&V_IDMAC)' EQ '').IDAVAIL
         MNOTE 8,'ID=&ID. has already been used.'
         MEXIT
.IDAVAIL AIF   ('&IDMAC' NE '').IDMAC
         MNOTE 8,'IDMAC keyword required for internal macro SRVSETID.'
         MEXIT
.IDMAC   ANOP
.*
.* Start filling in the ID's newly created global variables.
.*
&(&V_IDMAC)    SETC '&IDMAC'            Macro that created this ID.
               AIF  ('&ESID' EQ '').DEFAULT_ESID
&(&V_ESID)     SETC '&ESID'             ESID is our own ID.
               AGO  .PAST_ESID
.DEFAULT_ESID  AIF  ('&DEFAULT_ENVIRONMENT_SUPPORT_ID' NE '').ESID
               MNOTE 8,'ESID not specified and no default defined.'
               MEXIT
.ESID          ANOP
&(&V_ESID)     SETC '&DEFAULT_ENVIRONMENT_SUPPORT_ID'
.PAST_ESID     ANOP
&(&V_EPN)      SETC '&SPEPNAME'         Remember supplied SPEPNAME tag.
&(&V_EPA)      SETC '&SPEPA'            Remember the specified SPEPA.
&(&V_TKN)      SETC '&SPTOKEN'          Remember the specified SPTOKEN.
&(&V_EMC)      SETC '&ERRMAC'           Remember the specified ERRMAC.
.*
.* Generate PWA fields for those values that are defaulting.
.*
&GEN_PWA  SETB (&GEN_PWA OR ('&SPEPA'   EQ ''))
&GEN_PWA  SETB (&GEN_PWA OR ('&SPTOKEN' EQ ''))
          AIF  (NOT &GEN_PWA).NO_PWA
          PWA   TYPE=PARTIAL    | Generate fields for EPA and TOKEN.
          AIF   ('&SPEPA' NE '').GENTKN
&(&V_EPA) SETC  '&PWA.&ID._SPEPA'
&(&V_EPA) DS    A               |   Service Processor EPA.
.GENTKN   AIF   ('&SPTOKEN' NE '').PAST_KWDS
&(&V_TKN) SETC  '&PWA.&ID._SPTOKEN'
&(&V_TKN) DS    F               |   Service Processor TOKEN.
.PAST_KWDS ANOP
.ENDPWA   ENDPWA ,              | End of generated PWA fields.
.NO_PWA   ANOP
          MEXIT
.*--------------------------------------------------------------------*
.*                                                                    *
.*  Obtain values from an existing Service Processor Identifier.      *
.*                                                                    *
.*--------------------------------------------------------------------*
.SRVGETID ANOP
          GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
          GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN,&#_IDEMC
          GBLC  &DEFAULT_ENVIRONMENT_SUPPORT
          LCLC  &V_IDMAC,&V_IDESID,&V_ESVA,&V_EPN,&V_EPA,&V_TKN,&V_EMC
          LCLB  &B_IDMAC,&B_IDESID,&B_EPN,&B_EPA,&B_TKN,&B_EMC
          LCLB  &B_IDESVA
          LCLA  &N
.*
.* Initialize all global ID variables.
.*
&#_IDCODE SETC 'SUCCESS'          Hope for successful completion.
&#_IDMAC  SETC  ''                Name of macro that created ID.
&#_IDESID SETC  ''                Environment Support ID name.
&#_IDESVA SETC  ''                Environment Support Vector Addr tag.
&#_IDEPN  SETC  ''                Entry Point Name tag.
&#_IDEPA  SETC  ''                Entry Point address tag.
&#_IDTKN  SETC  ''                Service processor token tag.
&#_IDEMC  SETC  ''                Error macro name.
.*
.* Turn the REQUIRED keyword into boolean flags.
.*
&N        SETA  1
.SETFLG   AIF   (&N GT N'&REQUIRED).FLGSET
&B_IDMAC  SETB  (&B_IDMAC  OR ('&REQUIRED(&N)' EQ 'ID'))
&B_IDESID SETB  (&B_IDESID OR ('&REQUIRED(&N)' EQ 'ESID'))
&B_IDESVA SETB  (&B_IDESVA OR ('&REQUIRED(&N)' EQ 'ESVA'))
&B_EPN    SETB  (&B_EPN    OR ('&REQUIRED(&N)' EQ 'SPEPNAME'))
&B_EPA    SETB  (&B_EPA    OR ('&REQUIRED(&N)' EQ 'SPEPA'))
&B_TKN    SETB  (&B_TKN    OR ('&REQUIRED(&N)' EQ 'SPTOKEN'))
&B_EMC    SETB  (&B_EMC    OR ('&REQUIRED(&N)' EQ 'ERRMAC'))
&N        SETA  &N+1
          AGO   .SETFLG
.FLGSET   ANOP
.*
.* If ID=name was specified, get globals set by a xx_ID macro.
.*
          AIF   ('&ID' EQ '').PAST_ID
&V_IDMAC  SETC '#$&ID.$#IDMAC'    Creating ID macro's name.
&V_IDESID SETC '#$&ID.$#ESID'     ID's Env. Support. ID name.
&V_EPN    SETC '#$&ID.$#EPN'      ID's Entry Point Name.
&V_EPA    SETC '#$&ID.$#EPA'      ID's Entry Point Address.
&V_TKN    SETC '#$&ID.$#TKN'      ID's Token.
&V_EMC    SETC '#$&ID.$#EMC'      Error macro name.
          GBLC  &(&V_IDMAC),&(&V_IDESID),&(&V_EPN),&(&V_EPA),&(&V_TKN)
          GBLC  &(&V_EMC)
&#_IDMAC  SETC '&(&V_IDMAC)'      Copy creating macro's name.
&#_IDESID SETC '&(&V_IDESID)'     Copy ID's env. sup. ID name.
&#_IDEPN  SETC '&(&V_EPN)'        Copy ID's value for SPEPNAME.
&#_IDEPA  SETC '&(&V_EPA)'        Copy ID's value for SPEPA.
&#_IDTKN  SETC '&(&V_TKN)'        Copy ID's value for SPTOKEN.
&#_IDEMC  SETC '&(&V_EMC)'        Copy ID's value for ERRMAC.
          AIF   ('&#_IDMAC' NE '').ID_DEFND
          MNOTE 8,'Service processor ID=&ID. is not defined.'
&#_IDCODE SETC  'ID'
          MEXIT
.ID_DEFND AIF   ('&IDMAC' EQ '').ID_OK
&N        SETA  1
.ID_CHECK AIF   (&N GT N'&IDMAC).ID_BAD
          AIF   ('&#_IDMAC' EQ '&IDMAC(&N)').ID_OK
&N        SETA  &N+1
          AGO   .ID_CHECK
.ID_BAD   MNOTE 8,'Service processor ID=&ID. cannot be used for this se+
               rvice.'
&#_IDCODE SETC  'ID'
          MEXIT
.ID_OK    ANOP
&V_ESVA   SETC '#$&#_IDESID.$#ESVA'    ID's Env. Sup. ID's ESVA tag.
          GBLC &(&V_ESVA)
&#_IDESVA SETC '&(&V_ESVA)'       Copy ID's Env. Sup. ID's ESVA tag.
.PAST_ID  ANOP
.*
.* Pick up override values for ESID, ESVA, SPEPNAME, SPEPA and SPTOKEN.
.*
               AIF ('&ESID' EQ '').NO_ESID   | If ESID kwd.
&#_IDESID      SETC '&ESID'                  |   Pick up its value.
.NO_ESID       ANOP                          | EndIf.
               AIF ('&ESVA' EQ '').NO_ESVA   | If ESVA kwd.
&#_IDESVA      SETC '&ESVA'                  |   Pick up its value.
.NO_ESVA       ANOP                          | EndIf.
               AIF ('&SPEPNAME' EQ '').NO_EPN  If SPEPNAME kwd.
&#_IDEPN       SETC '&SPEPNAME'              |   Pick up its value.
.NO_EPN        ANOP                          | EndIf.
               AIF ('&SPEPA' EQ '').NO_EPA   | If SPEPA keyword.
&#_IDEPA       SETC '&SPEPA'                 |   Pick up its value.
.NO_EPA        ANOP                          | EndIf.
               AIF ('&SPTOKEN' EQ '').NO_TKN | If SPTOKEN keyword.
&#_IDTKN       SETC '&SPTOKEN'               |   Pick up its value.
.NO_TKN        ANOP                          | EndIf.
               AIF ('&ERRMAC' EQ '').NO_EMC  | If ERRMAC keyword.
&#_IDEMC       SETC '&ERRMAC'                |   Pick up its value.
.NO_EMC        ANOP                          | EndIf.
.*
.* Verify that all required ID values were actually obtained.
.*
               AIF (NOT (&B_IDMAC  AND ('&#_IDMAC'    EQ ''))).V10
&#_IDCODE      SETC  'ID'
               MNOTE 8,'ID keyword is required, but was not specified.'
               MEXIT
.V10           AIF (NOT (&B_IDESID AND ('&#_IDESID'   EQ ''))).V20
&#_IDCODE      SETC  'ESID'
               AGO   .KWDREQ
.V20           AIF (NOT (&B_IDESVA AND ('&#_IDESVA'   EQ ''))).V30
&#_IDCODE      SETC  'ESVA'
               AGO   .KWDREQ
.V30           AIF (NOT (&B_EPN    AND ('&#_IDEPN'    EQ ''))).V40
&#_IDCODE      SETC  'SPEPNAME'
               AGO   .KWDREQ
.V40           AIF (NOT (&B_EPA    AND ('&#_IDEPA'    EQ ''))).V50
&#_IDCODE      SETC  'SPEPA'
               AGO   .KWDREQ
.V50           AIF (NOT (&B_TKN    AND ('&#_IDTKN'    EQ ''))).V55
&#_IDCODE      SETC  'SPTOKEN'
               AGO   .KWDREQ
.V55           AIF (NOT (&B_EMC    AND ('&#_IDEMC'    EQ ''))).V60
&#_IDCODE      SETC  'ERRMAC'
               AGO   .KWDREQ
.V60           MEXIT
.KWDREQ        MNOTE 8,'Keyword &#_IDCODE is required if ID not specifi+
               ed.'
.MEXIT         MEND
