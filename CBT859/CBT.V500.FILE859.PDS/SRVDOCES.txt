.*SRVESMVS*************************************************************
.*                                                                    *
.*                    Chapter. Environment Support                    *
.*                                                                    *
.**********************************************************************
:h1 id=srves.Environment Support
:p.
Environment Support is both a service processor and the foundation on
which other service processors build.  As a service processor, it acts
as an interface between the programs that use it and the environment in
which they run.
:i1.Environment Support Vector
As a foundation for other service processors, it provides additional
support through a data area called the Environment Support Vector, or
:#x.ESV:e#x..
:p.
Services are available in Environment Support for obtaining and
releasing main storage, loading and unloading modules, issuing messages,
and managing debugging information.  Services are also available for
obtaining information about the current execution environment such as
the current time and date, userid and group name, JOB card parameters,
and the prefix to use for qualifying data set names.
:p.
Environment support consists of a single load module and an assembler
:#x.copy:e#x. member containing symbol definitions and macros. The
load module for Environment Support must be loaded into main storage and
:i1.ES_START
invoked with the :#x.ES_START:e#x. function (see :hdref
refid=esstart.)  before it can be used.  After it has been started, all
of Environment Support's functions will remain available until the
:i1.ES_TERMINATE
:#x.ES_TERMINATE:e#x. function (see :hdref refid=esterm.) has been
invoked.
.*--------------------------------------------------------------------*
:h2.Symbols &amp. Macros
.*--------------------------------------------------------------------*
:ih1.copymember
:i2.Environment Support
:p.
Environment Support's symbols and macros can be found in the assembler
copy member :#x.SRVESMAC:e#x.. This member contains symbols naming
Environment Support's load module, function codes, return codes, and
parameter values.  It also contains macros for using all of Environment
Support's functions.  The following statement or its equivalent should
appear at the beginning of any program that uses Environment Support:
:fig.
:#x.
COPY  SRVESMAC      | Obtain Environment Support's symbols &amp. macros.
:e#x.
:figcap.Environment Support's Symbols and Macros
:efig.
.*--------------------------------------------------------------------*
:h2.Establishing Service Processor Identifiers
.*--------------------------------------------------------------------*
Several parameters are general to Environment Support and not specific
to any function.  These parameters include the load module's name
(:#xi.es_epname:e#xi.), the entry point address (:#xi.es_epa:e#xi.), the
token value (:#xi.es_token:e#xi.), and the Environment Support Vector's
address (:#xi.esva:e#xi.). The :#x.ES_ID:e#x. macro (see :hdref
refid=esid.) can be used to establish defaults for these parameters and
associate them with a unique service processor identifier.  The
identifier may then be supplied on any Environment Support macro
instruction to refer to the default parameter values.
.*--------------------------------------------------------------------*
:h2.Choosing an Environment Support Load Module
.*--------------------------------------------------------------------*
:p.
In order to support different execution environments, there may be more
than one Environment Support service processor.  However, all will have
the same basic protocol and will use the same :#x.COPY:e#x. member.
Each Environment Support will reside in a separate load module, and the
:#x.COPY:e#x. member will contain a different symbol for each one's
load module name.  This provides programs with a degree of independence
from their environment, as switching to the appropriate Environment
Support service processor may be all that is required in order to run
under different environments.
:p.
Environment Support, acting as an interface between programs and their
execution environment, has intimate knowledge of the environment in
which it runs.  It directly invokes system services and may interrogate
control blocks.  To support multiple execution environments, there must
be separate Environment Support service processors for each environment,
identical in appearance to calling programs, but existing in separate
load modules.  For example, in addition to the Environment Support that
runs directly under MVS/XA, there might be one for VM/XA, one for CICS
and another for IDMS/DC.
:p.
At the time of this writing, only the MVS/XA programming environment is
supported.  However, a program that uses Environment Support's services
instead of directly accessing its environment can run under different
environments in the future simply by switching to the appropriate
Environment Support module.
:p.
Symbols defined in copy member :#x.SRVESMAC:e#x. contain Environment
Support's load module names enclosed in single quotation marks.  The
symbol for the MVS/XA Environment Support service processor looks like
the following:
:xmp.
&MVS_ENVIRONMENT_SUPPORT   SETC  '''SRVESMVS'''
:exmp.
This symbolic name should be used as the service processor entry point
name for environment support as shown in the following :#x.ES_ID:e#x.
macro.
:xmp.
ES_ID ID=UNIQUE_NAME,SPEPNAME=&MVS_ENVIRONMENT_SUPPORT
:exmp.
.*--------------------------------------------------------------------*
:h2.Loading Environment Support
.*--------------------------------------------------------------------*
:p.
The application program or its caller is responsible for loading
Environment Support's load module into storage.  Because Environment
Support's services are not available until it has been loaded and
started, the load process is environment-dependent.  For example, an
assembler program running under MVS/XA would need to issue a :#x.LOAD
EPNAME=&MVS_ENVIRONMENT_SUPPORT:e#x. macro instruction and save
register 0 (:#x.R0:e#x.) as the entry point address.
:p.
To take advantage of the defaults established by :#x.ES_ID:e#x., use
one of the environment-specific load macros available for loading
Environment Support.  In the MVS/XA environment, the code to identify
and load Environment Support would look like the following:
:xmp.
COPY        SRVESMAC            Obtain Env. Sup. symbols and macros.
ES_ID       ID=UNIQUE_NAME,SPEPNAME=&MVS_ENVIRONMENT_SUPPORT
ES_MVS_LOAD ID=UNIQUE_NAME      Load Environment Support into storage.
:exmp.
:p.
The :#x.ES_MVS_LOAD:e#x. macro (see :hdref refid=esmvsld.) issues the
same :#x.LOAD:e#x. instruction described above, but it has access to
the entry point address field (:#xi.es_epa:e#xi.) generated
by the
:#x.ES_ID:e#x. macro instruction so nothing needs to be expicitly
specified.  A complimentary macro, :#x.ES_MVS_UNLOAD:e#x., will
generate the appropriate :#x.DELETE:e#x. instruction to remove
Environment Support from storage.
.*--------------------------------------------------------------------*
:h2.Data Areas
.*--------------------------------------------------------------------*
:p.
There are three data areas associated with Environment Support: the
Environment Support Vector (:#x.ESV:e#x.), Module Name Tables
(:#x.MNT:e#x.s), and the Debugging Information Area (:#x.DIA:e#x.). Of
these, only the :#x.DIA:e#x. is not directly accessable to programs
using Environment Support: it is accessed via function calls instead.
.*--------------------------------------------------------------------*
:h3.The Environment Support Vector
.*--------------------------------------------------------------------*
:i1.Environment Support Vector
:p.
The :#x.ESV:e#x. is a data area created by Environment during the
:#x.ES_START:e#x. function to hold information specific to the current
execution environment.  This information is used internally by
Environment Support and by other service processors.  The fields of the
:#x.ESV:e#x. are mapped by the :#x.ES_ESV:e#x. macro (:hdref
refid=esesv.).
:p.
For the most part, programs do not have any reason to access the
:#x.ESV:e#x.'s fields.  However, two of the fields contained in the
:#x.ESV:e#x. may be needed occasionally. These are the :#x.ESVESEPA:e#x.
and the :#x.ESVESTKN:e#x..  The :#x.ESVESEPA:e#x. contains the entry
point address of Environment Support, and :#x.ESVESTKN:e#x. contains the
token for the service processor session used to create the :#x.ESV:e#x..
These fields are of particular use to a routine that is called when
Environment Support is already active: if the routine has the address of
the :#x.ESV:e#x., it can easily obtain the entry point address and token
needed for calling Environment Support's functions.  This is illustrated
in the following example, which establishes addressability on the
:#x.ESV:e#x. just long enough to copy the :#x.EPA:e#x. and
:#x.TOKEN:e#x. of Environment Support (neither value will change until
Environment Support is terminated or unloaded).
:spot id=esvxmp.
:xmp.
BLOCK NAME=CMDEXEC,PARMS=(COMMAND,LENGTH,ESV),                       +
             OPTIONS=(*PWA,(ESV,3),(PARMS,COPY,PREFIX,VL)
  L     R1,&amp.PPL.ESV              | &cont.
R1 -> Environment Support Vector.
  USING ESV,R1                   | Establish addressability.
  MVC   &amp.PWA.ES_SPEPA,ESVESEPA   | &cont.
Copy Environment Support's EPA.
  MVC   &amp.PWA.ES_SPTOKEN,ESVESEPA | &cont.
Copy Environment Support's TOKEN.
  DROP  R1                       | Drop addressability.
  ES_ID ID=ES,SPEPA=&amp.PWA.ES_SPEPA,SPTOKEN=&amp.PWA.ES_SPTOKEN
*
  ES_DISPLAY_MESSAGE ID=ES,MESSAGE='The command to execute is:'
  ES_DISPLAY_MESSAGE ID=ES,MESSAGE=(*&amp.PPL.COMMAND,&cont.
*&amp.PPL.LENGTH)

  ... Remainder of program code ...

ENDBLK BLOCK=CMDEXEC
                  PWA
&PWA.ES_SPEPA     DS  A
&PWA.ES_SPTOKEN   DS  F

                  ... Remainder of program work area ...

                  ENDPWA
                  ES_ESV         Environment Support Vector DSECT.
:exmp.
.*--------------------------------------------------------------------*
:h3 id=MNTs.Module Name Tables
.*--------------------------------------------------------------------*
:i1.Module Name Table
:i1.reentrant
:p.
The purpose of module name tables (:#x.MNT:e#x.s) is to reduce the
number of system loads that must be performed by the
:#x.ES_LOAD_MODULE:e#x. function.  Two :#x.MNT:e#x.s may be searched by
:#x.ES_LOAD_MODULE:e#x.: an application :#x.MNT:e#x. and Environment
Support's :#x.MNT:e#x..  The application :#x.MNT:e#x. is provided as an
optional parameter to the :#x.ES_START:e#x. function by the calling
program.  The :#x.ES_LOAD_MODULE:e#x. function will search the
application :#x.MNT:e#x. first and then Environment Support's
:#x.MNT:e#x..
:p.
A module name table is an array of module names and addresses, with each
row in the array consisting of an eight character name followed by a
four byte address.  The final entry in the array is denoted by all
zeros.  Typically, the modules named in an :#x.MNT:e#x. are link-edited
with the :#x.MNT:e#x. and the addresses are filled in by the system
loader.  A module name table may also be filled in by the application
program before it starts Environment Support.
:p.
The structure of an :#x.MNT:e#x. is depicted in :figref refid=mntstr
page=no., which has entries for three service processor modules:
:fig id=mntstr.
:#x.
.ti ~ 05
.tp 0.40i right 0.55i 1.25i 1.95i 2.65i
.sp
~~Name~TrueName~EPA
.bx new thick thick 0.50i 1.20i 1.90i 2.60i
~+0~SRVMM~SRVMM~025BF700~Memory Manager.
.bx
~+20~SRVMS~SRVMSMVS~00000000~Message Services.
.bx
~+40~SRVPL~SRVPLMVS~00000000~Printline.
.bx
~+80~SRVST~SRVST~02487AC0~String Handler.
.bx
~+100~SRVSY~SRVSY~00000000~Symbol Manager.
.bx thick thick 0.50i 0.75i
~+120~00~~~End of MNT.
.bx off
:e#x.
:figcap.Module Name Table Layout
:efig.
:p.
The first two entries in :figref refid=mntstr page=no. show modules that
have been loaded into storage.  The third entry shows a module that has
not been loaded into storage, so its address field has been set to
zeros.
:p.
When a module's name is found in an :#x.MNT:e#x. and it has a non-zero
value in the address field, its address is simply returned to the
calling program.  If the address field is zero, :#x.ES_LOAD_MODULE:e#x.
will load the module into storage and return the address to the calling
program (which may then fill in the module's address in the
:#x.MNT:e#x.).  If the module's name is not in any :#x.MNT:e#x., it will
always be loaded into storage and its address will be returned to the
calling program.
.sk 5
.*--------------------------------------------------------------------*
:h3.The Debugging Information Area
.*--------------------------------------------------------------------*
:p.
:ih1.errors
:i2.handling
Error tracking and reporting capabilities are provided by Environment
Support, permitting service processors and other programs to save vital
diagnostic information and messages when errors are detected.  Service
processors update this area and set a return code whenever they
encounter problems.  The calling program may then issue a single
function call to Environment Support to display the diagnostic
information and optionally abort with a full storage dump.  This scheme
enables applications to make their own decisions about how errors should
be handled, but provides an easy way for them to abort execution
immediately while providing the user with messages and diagnostic
information.
:p.
The following services are provided for accessing the :#x.DIA:e#x.:
:ul compact.
:li.:#x.ES_CLEAR_DEBUG_INFO:e#x.,
:li.:#x.ES_DISPLAY_DEBUG_INFO:e#x.,
:li.:#x.ES_DISPLAY_DEBUG_INFO_AND_ABEND:e#x., and
:li.:#x.ES_SAVE_DEBUG_INFO:e#x.
:eul.
.*--------------------------------------------------------------------*
:h2.Common Parameters
.*--------------------------------------------------------------------*
:p.
There are several parameters common to any Environment Support function
call.  These parameters are listed below:
.*****
:plist.
:pLt.id_name
:pLd.the name of a service processor identifier created by the
:#x.ES_ID:e#x. macro which will be used by all other function invocation
macros to automatically obtain values for :#xi.es_epa:e#xi. and
:#xi.es_token:e#xi.. This parameter is required unless both
:#xi.es_epa:e#xi. and :#xi.es_token:e#xi. are specified.
:pLt.es_epa
:pLd.a fullword in storage containing the entry point address of the
Environment Support service processor.  The value specified by
:#xi.es_epa:e#xi. overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:pLt.es_token
:pLd.a fullword in storage containing the value (to be) returned by
:#x.ES_START:e#x. for the :#xi.es_token:e#xi. parameter.  The value
specified by :#xi.es_token:e#xi. overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:eplist.
.*--------------------------------------------------------------------*
:h2.Complete List of Environment Support Return Codes
.*--------------------------------------------------------------------*
:p.
Many return codes can be returned from each function.  In the function
descriptions later in this chapter, the most common return codes
returned by the particular function are documented.  The following
is a complete list of Environment Support return codes.
.*****
:rclist.
:rcn.0
:rct.ES_SUCCESS
:rcd.The invoked Environment Support function performed the requested
service without encountering any problems.
:rcn.1
:rct.ES_MISSING_EXIT_ROUTINE
:rcd.This return code indicates that the :#x.ES_START:e#x. function was
unable to locate one of its exit routines, which must either be link-edited
into the standard or application module name table or accessable via the
standard system load mechanism.
:rcn.2
:rct.ES_INTERNAL_ERROR
:rcd.A self-examination within Environment Support determined that
something was wrong.  This return code indicates a programming error
within Environment Support.
:rcn.4
:rct.ES_INVALID_FUNCTION
:rcd.An invalid :#xi.FunctionCode:e#xi. (the second parameter in any
service processor function call) was specified.
:rcn.8
:rct.ES_COULD_NOT_LOCATE
:rcd.This return code is used by all :#x.ES_GET_...:e#x. functions to
indicate that the requested information is unavailable.
:rcn.12
:rct.ES_INVALID_BOUNDARY
:rcd.The :#xi.boundary:e#xi. parameter used for an
:#x.ES_OBTAIN_STORAGE:e#x. function call does not contain a valid
value.
:rcn.16
:rct.ES_INVALID_LOCATION
:rcd.The :#xi.location:e#xi. parameter used for an
:#x.ES_OBTAIN_STORAGE:e#x. function call does not contain a valid
value.
:rcn.17
:rct.ES_INVALID_ACTION
:rcd.The :#xi.action:e#xi. parameter used for an
:#x.ES_CLEAR_DEBUG_INFO:e#x. function call does not contain a valid
value.
:rcn.18
:rct.ES_CLEAR_DEBUG_INHIBITED
:rcd.An explicit attempt was made to clear the debugging information
area (function call :#x.ES_CLEAR_DEBUG_INFO ID=xx,ACTION=EXECUTE:e#x.),
but this function had been inhibited by a previous call (with
:#x.ACTION=INHIBIT:e#x.).  The content of the debugging information area
has been left intact.
:rcn.20
:rct.ES_STORAGE_NOT_AVAILABLE
:rcd.An :#x.ES_OBTAIN_STORAGE:e#x. function call requested more
storage than is currently available.
:rcn.24:rct.ES_STORAGE_NOT_RELEASED
:rcd.An :#x.ES_RELEASE_STORAGE:e#x. function call failed because
the storage could not be released for some reason (perhaps it was
not allocated in the first place?).
:rcn.28:rct.ES_UNDETERMINED
:rcd.An (internal, probably) error of indeterminate nature has
occurred within Environment Support.
:rcn.32:rct.ES_MODULE_NOT_LOADED
:rcd.An :#x.ES_LOAD_MODULE:e#x. function call was not able to load
the requested module into storage.
:rcn.36:rct.ES_MODULE_NOT_UNLOADED
:rcd.An :#x.ES_UNLOAD_MODULE:e#x. function call was not able to unload
the requested module from storage.
:rcn.40:rct.ES_WRONG_NUMBER_OF_PARMS
:rcd.Either too few parameters were supplied for the function call or
too many were supplied.  Check the parameter list to ensure that it is
right for the function being invoked.
:erclist.
.*--------------------------------------------------------------------*
:h2.Environment Support Service Processor Functions and Macros
.*--------------------------------------------------------------------*
:p.
The remaining sections of this chapter describe all functions provided
by the Environment Support Service Processor, arranged in alphabetical
order. Each function's description begins on a new page, and the name of
the function being described appears in the top outside corner of every
page.
.**********************************************************************
.se temp = 'Reset the Debugging Information Area'
:func name='ES_CLEAR_DEBUG_INFO'.&temp.
.**********************************************************************
:p.
The :#x.ES_CLEAR_DEBUG_INFO:e#x. function removes all information from
the debugging information area.  This function is invoked automatically
by all service processors functions so that the only information
retained in the debugging area is for the most recent problem.
:note.The only return code you should expect from invoking this function
is :#x.ES_SUCESS:e#x..
:mac.
ES_CLEAR_DEBUG_INFO ID=:#xi.id_name:e#xi. &cont.
&lbt.,SPEPA=:#xi.es_epa:e#xi.&rbt. &cont.
&lbt.,SPTOKEN=:#xi.es_token:e#xi.&rbt.
  &lbt.,ACTION=:#xi.action:e#xi.&rbt.
:emac.
:callx.
CALLX :#xi.es_epa:e#xi.,(:#xi.es_token:e#xi.,&amp.ES_CLEAR_DEBUG_INFO,&cont.
&lbt.:#xi.action:e#xi.&rbt.)
:ecallx.
.*****
:plist.
:pLt.action
:pLd.an optional fullword value that specifies what action
:#x.ES_CLEAR_DEBUG_INFO:e#x. should take with respect to clearing the
debugging information area.  The default value for :#xi.action:e#xi. is
:#xb.EXECUTE:e#xb. (or set symbol :#x.&amp.ES_CDI_EXECUTE:e#x., a
fullword value of :#xb.1:e#xb.), which will clear the debugging
information area if this function has not been inhibited.  A value of
:#xb.INHIBIT:e#xb. (set symbol :#x.&amp.ES_CDI_INHIBIT:e#x., a fullword
value of :#xb.2:e#xb.) will inhibit clearing of the debugging
information area.  A value of :#xb.ENABLE:e#xb. (set symbol
:#x.&amp.ES_CDI_ENABLE:e#x., a fullword value of :#xb.3:e#xb.)
will reverse the effect of :#xb.INHIBIT:e#xb..
:eplist.
:note.Clearing of the debugging information area should not be inhibited
except under one circumstance: after an error has occurred, an application
program or service processor may need to call upon one or more service
processor functions to help gather and/or format additional diagnostic
information, without losing the information already present in the
debugging information area.  The :#x.INHIBIT:e#x. action should only be
invoked under this one condition, and the :#x.ENABLE:e#x. action should
be invoked as soon as the additional diagnostic information has been
gathered and added to the debugging area.  Calling on the :#x.ENABLE:e#x.,
action does not, in itself, cause the debugging information area to be
cleared.
:note.If :#x.ES_CLEAR_DEBUG_INFO:e#x. is invoked while the function is
inhibited, it will not perform any action but will return a non-zero
return-code (:#x.ES_CLEAR_DEBUG_INHIBITED:e#x.).
:fh3.Example
:p.
Suppose an application program invokes the :#x.ST_FORMAT:e#x. function
of the string-handler service processor to format a message.  The last
field in the message will contain text of unknown length, so the
application program expects to receive the :#x.ST_TRUNCATED:e#x.
return code occasionally.  In that specific case, the application
program has no need for the debugging information and clears it out to
avoid having
:i1.abend
it show up in a core dump if an abend occurs later.
:fig.
:#x.
ST_FORMAT ID=ST,CONTROL='APM0282 Remaining text discarded: %C(V)',&cont.
        +
             SOURCE=(INPUT_BUFFER,INPUT_LENGTH),                  &cont.
        +
             STRING=MESSAGE_BUFFER,RESULT_LENGTH=MESSAGE_LENGTH
IF (CH,R15,EQ,=H'&amp.ST_TRUNCATED')    | If some text got truncated.
  ES_CLEAR_DEBUG_INFO ID=ES         |   Don't worry about it.
ELSEIF (TREG,R15,NZ)                | ElseIf there was another problem.
  STH     R15,PWA_LASTRC            |   Save the return code.
  MVC     PWA_LASTSP,=C&amp.STRING_HANDLER&cont.
  Save service processor's name.
  ERREXIT CODE=&amp.ST_FORMAT&cont.
           |   Let the error exit handle it.
ENDIF                               | EndIf.
:e#x.
:efig.
:efunc.
.**********************************************************************
:func name='ES_DISPLAY_DEBUG_INFO'.Display Debugging Information
.**********************************************************************
:p.
The :#x.ES_DISPLAY_DEBUG_INFO:e#x. function displays all information
currently in the debugging area.  This function, or the
:#x.ES_DISPLAY_DEBUG_INFO_AND_ABEND:e#x. function, should be invoked
whenever an unexpected return code is returned by any service processor
function.
:note.The only return code you should expect from invoking this function
is :#x.ES_SUCESS:e#x..
:mac.
ES_DISPLAY_DEBUG_INFO ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
:emac.
:callx.
CALLX :hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&amp.ES_DISPLAY_DEBUG_INFO)
:ecallx.
:fh3.Example
:p.
The error exit of an application program has determined that the return
code from a service processor function indicates an environmental
problem beyond its control, such as a data set that is allocated to
another user, or insufficient storage.  The problem needs to be
corrected before execution can continue, so the debugging information is
displayed and the program terminates execution.
:xmp.
ES_DISPLAY_DEBUG_INFO ID=ES              | Dump debugging information.
:exmp.
:efunc.
.**********************************************************************
:func name='ES_DISPLAY_DEBUG_INFO_AND_ABEND'.Abend with Dump
.**********************************************************************
:p.
:i1.abend
The :#x.ES_DISPLAY_DEBUG_INFO_AND_ABEND:e#x. function displays all
information currently in the debugging area and then issues a system
request for an abend and storage dump.  The actual abend code issued
is dependent on the implementation of Environment Support.  For the
MVS/XA version of Environment Support, an MVS :#x.ABEND:e#x.
instruction with User Code 1000 will be issued.
:note.This function does not return control to the application program.
It causes a task abend with a user code of 1000.
:mac.
ES_DISPLAY_DEBUG_INFO_AND_ABEND ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt.
  &lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
:emac.
:callx.
CALLX :hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&cont.
&amp.ES_DISPLAY_DEBUG_INFO_AND_ABEND)
:ecallx.
:fh3.Example
:p.
The error exit of an application program has determined that the return
code from a service processor function indicates a programming error,
either within the application or within a service processor.  Because
the error may be internal to the code being executed, all code and data
areas should be dumped.
:xmp.
ES_DISPLAY_DEBUG_INFO_AND_ABEND ID=ES    | Abort with a core dump.
:exmp.
:efunc.
.**********************************************************************
:func name='ES_DISPLAY_MESSAGE'.Display Text on the User's Screen
.**********************************************************************
:p.
The :#x.ES_DISPLAY_MESSAGE:e#x. function is used to write a textual
message to the default output device.  For a TSO user, it is to the
terminal screen; for background TSO, it is to file SYSTSPRT; for a
started task, it is to the operator's console.
:mac.
ES_DISPLAY_MESSAGE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
   ,MESSAGE=&lbr.:hp1.message:ehp1. | &cont.
(:hp1.message:ehp1.,:hp1.length:ehp1.)&rbr.
:emac.
:callx.
CALLX &cont.
:hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&amp.ES_DISPLAY_MESSAGE,&cont.
:hp1.message:ehp1.&lbt.,:hp1.length:ehp1.&rbt.)
:ecallx.
.*****
:plist.
:pLt.message
:pLd.specifies the label of a character string in storage containing the
message to be displayed.  For both forms of invoking this function,
:#xi.message:e#xi. may be specified as text enclosed in
single quotation marks, which will cause a character-literal to be
generated.
:pLt.length
:pLd.&lbt.optional&rbt. specifies the label of a fullword in storage
containing the length of the character string named by
:#xi.message:e#xi.. If :#xi.length:e#xi. is
:hp1.not:ehp1.  specified, the storage named by
:#xi.message:e#xi. must be prefixed with a signed halfword
containing the length of the text to be displayed.
:note.For the macro form of invoking this function, if
:#xi.message:e#xi. is provided as a quoted string and :#xi.length:e#xi.
is not specified, it will be automatically supplied by the
macro.
:eplist.
:fh3.Example
:p.
An application program invokes the :#x.ST_FORMAT:e#x. function of the
string-handler to format a message, and then invokes the
:#x.ES_DISPLAY_MESSAGE:e#x. function to display it to the user.
:xmp.
ST_FORMAT ID=ST,CONTROL='APM0282 Remaining text discarded: %C(V)',   +
             SOURCE=(INPUT_BUFFER,INPUT_LENGTH),                     +
             STRING=MESSAGE_BUFFER,RESULT_LENGTH=MESSAGE_LENGTH
IF (CH,R15,EQ,=H'&ST_TRUNCATED')    | If some text got truncated.
  ES_CLEAR_DEBUG_INFO ID=ES         |   Don't worry about it.
ELSEIF (TREG,R15,NZ)                | ElseIf there was another problem.
  STH     R15,PWA_LASTRC            |   Save the return code.
  MVC     PWA_LASTSP,=C&STRING_HANDLER  Save service processor's name.
  ERREXIT CODE=&ST_FORMAT           |   Let the error exit handle it.
ENDIF                               | EndIf.
ES_DISPLAY_MESSAGE ID=ES,MESSAGE=(MESSAGE_BUFFER,MESSAGE_LENGTH)
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Environment Support Vector Mapping Macro'
:func name='ES_ESV' id=esesv.&temp.
.**********************************************************************
:p.
The :#x.ES_ESV:e#x. macro is used to map the fields of the Environment
Support Vector, or :#x.ESV:e#x..  For an example of using this macro,
see page :spotref refid=esvxmp..
:mac.
ES_ESV
  &lbt.,DSECT=&lbr.:hp2.:us.YES:eus.:ehp2. | :hp2.NO:ehp2.&rbr.&rbt.
  &lbt.,PREFIX=&lbr.:hp2.:us.ESV:eus.:ehp2. | &cont.
:hp1.prefix:ehp1.&rbr.&rbt.
:emac.
.*****
:plist.
:pLt.DSECT
:pLd.the :#xb.DSECT:e#xb. keyword controls whether or not an assembler
:#x.DSECT:e#x. directive is generated.  The default is :#xb.YES:e#xb..
The value of :#xi.prefix:e#xi. will be used to name the :#x.DSECT:e#x..
If :#x.DSECT=NO:e#x. is specified, a label named :#xi.prefix:e#xi. will
be generated at the beginning of the :#x.ESV:e#x. storage.
:pLt.prefix
:pLd.specifies the name to use for the generated :#x.DSECT:e#x. or
label, as well as the prefix for all the labels of all other
:#x.ESV:e#x. fields.
:eplist.
:efunc.
.**********************************************************************
.se temp = 'Get the Computer Center Account Number'
:func name='ES_GET_CACCT'.&temp.
.**********************************************************************
:p.
:i1.account number
The :#x.ES_GET_CACCT:e#x. function returns to the application the
Computer Center Account Number (CACCT) of the currently running job.
:note.This function is specific to the :hp3.Clemson University:ehp3.
computing environment.
:mac.
ES_GET_CACCT ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
   ,CACCT=:hp1.cacct:ehp1.
:emac.
:callx.
CALLX :hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&amp.ES_GET_CACCT,&cont.
:hp1.cacct:ehp1.)
:ecallx.
.*****
:plist.
:pLt.cacct
:pLd.specifies an eight (8) byte field into which the computer center
account number of the currently running job will be placed.
:eplist.
:efunc.
.**********************************************************************
.se temp = 'Get Printer Destination'
:func name='ES_GET_DEFAULT_DESTINATION'.&temp
.**********************************************************************
:p.
The :#x.ES_GET_DEFAULT_DESTINATION:e#x. function returns to the
application the printer destination of the currently running job.
:mac.
ES_GET_DEFAULT_DESTINATION ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
   ,DEST=:hp1.dest:ehp1.
:emac.
:callx.
CALLX :hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&cont.
&amp.ES_GET_DEFAULT_DESTINATION,:hp1.dest:ehp1.)
:ecallx.
.*****
:plist.
:pLt.dest
:pLd.specifies an eight (8) byte field into which the default printer
destination of the currently running job will be placed.
:eplist.
:efunc.
.**********************************************************************
:func name='ES_GET_FORMATTED_TIME'.Get Time and Date
.**********************************************************************
:p.
The :#x.ES_GET_FORMATTED_TIME:e#x. function returns to the application
the current time of day, gregorian date, and julian date.
:mac.
ES_GET_FORMATTED_TIME ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
  &lbt.,TIME=:hp1.time:ehp1.&rbt.
  &lbt.,GREGORIAN=:hp1.gregorian:ehp1.&rbt.
  &lbt.,JULIAN=:hp1.julian:ehp1.&rbt.
:emac.
:callx.
CALLX :hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&cont.
&amp.ES_GET_FORMATTED_TIME,&cont.
&lbt.:hp1.time:ehp1.&rbt.,&lbt.:hp1.gregorian:ehp1.&rbt.,&cont.
&lbt.:hp1.julian:ehp1.&rbt.)
:ecallx.
.*****
:plist.
:pLt.time
:pLd.specifies an eleven (11) byte field into which the current time, in
HH&colon.MM&colon.SS.TH character format
(e.g.&rbl.:#x.18&colon.09&colon.53.78:e#x.) will be placed. The time is
returned in 24-hour format.
:pLt.gregorian
:pLd.specifies an eight (8) byte field into which the current date, in
MM/DD/YY character format (e.g. :#x.05/04/89:e#x.) will be placed.
:pLt.julian
:pLd.specifies an eight (8) byte field into which the current date, in
CCYY.DDD character format (e.g. :#x.1989.124:e#x.) will be placed.
:eplist.
:efunc.
.**********************************************************************
.se temp = 'Get the RACF Group Name of the Current User'
:func name='ES_GET_GROUP'.&temp.
.**********************************************************************
:p.
The :#x.ES_GET_GROUP:e#x. function returns to the application
the RACF group name under which the current job is running.
:mac.
ES_GET_GROUP ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
   ,GROUP=:hp1.group:ehp1.
:emac.
:callx.
CALLX :hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&amp.ES_GET_GROUP,&cont.
:hp1.group:ehp1.)
:ecallx.
.*****
:plist.
:pLt.group
:pLd.specifies an eight (8) byte field into which the RACF group name
under which the currently running job is running will be placed.
:eplist.
:efunc.
.**********************************************************************
.se temp = 'Get the Programmer Comment Field'
:func name='ES_GET_JOBCARD_NAME_FIELD'.&temp.
.**********************************************************************
:p.
The :#x.ES_GET_JOBCARD_NAME:e#x. function returns to the application
the user comment field from the job card of the currently running job.
:mac.
ES_GET_JOBCARD_NAME_FIELD ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
   ,NAME=:hp1.name:ehp1.
:emac.
:callx.
CALLX &cont.
:hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&amp.ES_GET_JOBCARD_NAME,&cont.
:hp1.name:ehp1.)
:ecallx.
.*****
:plist.
:pLt.name
:pLd.specifies a twenty (20) byte field into which the programmer
name field of the currently running job's :#x.JOB:e#x. card will be
placed.
:eplist.
:efunc.
.**********************************************************************
:func name='ES_GET_JOBCARD_ROOM'.Get the Programmer Room Field
.**********************************************************************
:p.
The :#x.ES_GET_JOBCARD_ROOM:e#x. function returns to the application
the room field from the job card of the currently running job.
:mac.
ES_GET_JOBCARD_ROOM ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
   ,ROOM=:hp1.room:ehp1.
:emac.
:callx.
CALLX &cont.
:hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&amp.ES_GET_JOBCARD_ROOM,&cont.
:hp1.room:ehp1.)
:ecallx.
.*****
:plist.
:pLt.room
:pLd.specifies a four (4) byte field into which the room field of the
currently running job's :#x.JOB:e#x. card will be placed.
:eplist.
:efunc.
.**********************************************************************
:func name='ES_GET_JOBID'.Get the System Assigned Job Identifier
.**********************************************************************
:p.
The :#x.ES_GET_JOBID:e#x. function returns to the application
the system assigned job identifier of the currently running job.
:mac.
ES_GET_JOBID ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
   ,JOBID=:hp1.jobid:ehp1.
:emac.
:callx.
CALLX :hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&amp.ES_GET_JOBID,&cont.
:hp1.jobid:ehp1.)
:ecallx.
.*****
:plist.
:pLt.jobid
:pLd.specifies an eight (8) byte field into which the system-assigned
job identifier for the currently running job will be placed.
:eplist.
:efunc.
.**********************************************************************
:func name='ES_GET_PREFIX'.Get Data Set Name Prefix
.**********************************************************************
:p.
The :#x.ES_GET_PREFIX:e#x. function returns to the application the
data set name prefix to use for unqualified data set names encountered
under the currently running job.
:mac.
ES_GET_PREFIX ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
   ,PREFIX=:hp1.prefix:ehp1.
:emac.
:callx.
CALLX :hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&amp.ES_GET_PREFIX,&cont.
:hp1.prefix:ehp1.)
:ecallx.
.*****
:plist.
:pLt.prefix
:pLd.specifies an eight (8) byte field into which the current TSO user's
data set name prefix will be placed.
:eplist.
:efunc.
.**********************************************************************
:func name='ES_GET_SYSRES_VOLUME_NAME'.Get Volser of IPL Volume
.**********************************************************************
:p.
The :#x.ES_GET_SYSRES_VOLUME_NAME:e#x. function returns to the
application the volume serial name of the volume from which the
system was IPLed.
:mac.
ES_GET_SYSRES_VOLUME_NAME ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
   ,VOLSER=:hp1.volser:ehp1.
:emac.
:callx.
CALLX :hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&cont.
&amp.ES_GET_SYSRES_VOLUME_NAME,&cont.
:hp1.volser:ehp1.)
:ecallx.
.*****
:plist.
:pLt.volser
:pLd.specifies a six (6) byte field into which the volume serial number
of the volume from which the currently running system was IPLed will
be placed.
:eplist.
:efunc.
.**********************************************************************
.se temp = 'Get the User''s Terminal Name'
:func name='ES_GET_TERMINAL_NAME'.&temp.
.**********************************************************************
:p.
The :#x.ES_GET_TERMINAL_NAME:e#x. function returns to the application
the terminal name of the terminal assigned to the current user.
:mac.
ES_GET_TERMINAL_NAME ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
   ,NAME=:hp1.name:ehp1.
:emac.
:callx.
CALLX &cont.
:hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&amp.ES_GET_TERMINAL_NAME,&cont.
:hp1.name:ehp1.)
:ecallx.
.*****
:plist.
:pLt.name
:pLd.specifies an eight (8) byte field into which the current TSO user's
terminal name will be placed.
:eplist.
:efunc.
.**********************************************************************
:func name='ES_GET_TIME'.Get Time and Date
.**********************************************************************
:p.
The :#x.ES_GET_TIME:e#x. function returns to the application the
current time and date.
:mac.
ES_GET_TIME ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
  &lbt.,TIME=:hp1.time:ehp1.&rbt.
  &lbt.,DATE=:hp1.date:ehp1.&rbt.
:emac.
:callx.
CALLX :hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&amp.ES_GET_TIME,&cont.
:hp1.time:ehp1.,:hp1.date:ehp1.)
:ecallx.
.*****
:plist.
:pLt.time
:pLd.specifies a fullword into which the current time of day, in .01
second units, will be placed.
:pLt.date
:pLd.specifies a fullword into which the current date, in packed-decimal
CCYYDDDs format, will be placed.
:eplist.
:efunc.
.**********************************************************************
:func name='ES_GET_TSU_STC_OR_JOB'.Determine the Current Environment
.**********************************************************************
:p.
The :#x.ES_GET_TSU_STC_OR_JOB:e#x. function returns to the application
an indicator of the environment under which it is running.
:mac.
ES_GET_TSU_STC_OR_JOB ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
   ,TYPE=:hp1.type:ehp1.
:emac.
:callx.
CALLX &cont.
:hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&amp.ES_GET_TSU_STC_OR_JOB,&cont.
:hp1.type:ehp1.)
:ecallx.
.*****
:plist.
:pLt.type
:pLd.specifies a three (3) byte field into which an indicator of the
current execution environment will be placed.  The indicator will be
:#x."TSU":e#x. if executing under foreground TSO, :#x."STC":e#x. if
executing as a started-task, and :#x."JOB":e#x. if executing as a
batch job.
:eplist.
:efunc.
.**********************************************************************
:func name='ES_GET_USERID'.Get the Userid of the Current User
.**********************************************************************
:p.
The :#x.ES_GET_USERID:e#x. function returns to the application the
userid of the currently running TSU session.
:mac.
ES_GET_USERID ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
   ,USERID=:hp1.userid:ehp1.
:emac.
:callx.
CALLX :hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&amp.ES_GET_USERID,&cont.
:hp1.userid:ehp1.)
:ecallx.
.*****
:plist.
:pLt.userid
:pLd.specifies a seven (7) byte field into which the userid of the
TSO user currently logged on will be placed.
:eplist.
:efunc.
.**********************************************************************
.se temp = 'Establish Default Environment Support Values'
:func name='ES_ID' id=esid.&temp.
.**********************************************************************
:p.
The :#x.ES_ID:e#x. macro is used to establish default values for use
by other Environment Support macros, which may access those defaults
through a unique identifier, :#xi.id_name:e#xi., specified by
the user.  Default values can be established for the following
parameters:
:#xi.es_epname:e#xi., :#xi.es_epa:e#xi.,
:#xi.es_token:e#xi., and
:#xi.esva:e#xi..
:p.
In most cases, nothing other than the entry point name needs to be
specified on the :#x.ES_ID:e#x. macro: it will automatically define
working storage fields for the remaining parameters if they are not
specified.  These values, whether generated by the macro or provided by
the user, are accessable from all other Environment Support macros.
:p.
If the application program needs to access the parameters directly, then
they should be explicitly specified.  For example, suppose a program
receives as one of its parameters the Environment Support Vector of an
already-started Environment Support service processor.  In that case,
the module name would not be needed but the entry point address and
token value, already defined within the :#x.ESV:e#x., would need to be
specified.  Assuming addressability on the :#x.ESV:e#x., the following
:#x.ES_ID:e#x. macro instruction might be used to specify these
fields.
:xmp.
ES_ID ID=STARTED_ES,SPEPA=ESVESEPA,SPTOKEN=ESVESTKN
:exmp.
:mac.
ES_ID ID=:hp1.id_name:ehp1.
  &lbt.,SPEPNAME=:hp1.es_epname:ehp1.&rbt.
  &lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt.
  &lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
  &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
:emac.
.*****
:plist.
:pLt.id_name
:pLd.the identifier to assign to the service processor identifier being
established.  This name must be unique for all service processor
identifier's.
:pLt.es_epname
:pLd.the entry point name of the Environment Support service processor
module that is being used.
:pLt.es_epa
:pLd.specifies the label of a fullword in storage that will contain the
entry point address of the Environment Support service processor.
:pLt.es_token
:pLd.specifies the label of a fullword in storage that will contain the
token assigned by the ES_START function of Environment Support.
:pLt.esva
:pLd.specifies the label of a fullword in storage that will contain the
address of the environment support vector created by the ES_START
function of Environment Support.
:eplist.
:fh3.Example 1
:p.
The :#x.ES_ID:e#x. macro below is the one most likely to be used in an
MVS assembler program.  It specifies an :#xi.id_name:e#xi. of
:#x.ES:e#x. and the entry point name for the MVS environment support
module, but allows all other values to default.  The :#x.ES_ID:e#x.
macro will generate fields in the Structured Macros PWA for holding
environment support's entry point address, service processor token
fullword, and a pointer to the environment support vector.  All other
environment support macros will be able to access those fields simply by
specifying
:#x.ID=ES:e#x.
:xmp.
ES_ID     ID=ES,SPEPNAME=&MVS_ENVIRONMENT_SUPPORT
:exmp.
:fh3.Example 2
:p.
The next example shows how a program would be set up if it were called
with environment support already active.  Presumably, the program would
have the environment support vector passed to it as one of its
parameters, and the example shows surrounding program text that takes
this into account.  This is, in fact, the situation with service
processors themselves; their :#x.START:e#x. function is always called
with an ESV as one of the parameters.
:xmp.
BLOCK NAME=SERVER,TYPE=PROGRAM,OPTIONS=(*PWA),R1SAVE=R9
  USING PARM_LIST,R9                       | R9 -> Parm list passed in.
  L     R8,PARM_ESV                        | R8 -> Active ESV.
  USING ESV,R8                             | Establish addressability.
  ES_ID ID=ACTIVE_ES,ESV=PARM_ESV,SPEPA=ESVESEPA,SPTOKEN=ESVESTKN
  .
  . Remaining program.
  .
ENDBLK BLOCK=SERVER
:exmp.
:p.
Notice that since the ESV contains fields within it for the EPA and
TOKEN, its fields may be named directly on the :#x.ES_ID:e#x. macro.
However, if this is done, all environment support macros must have
addressability to the ESV.  It is usually easier to copy these two
values to the PWA to save on register usage.
:efunc.
.**********************************************************************
:func name='ES_LOAD_MODULE'.Load a Module into Main Storage
.**********************************************************************
:p.
The :#x.ES_LOAD_MODULE:e#x. function is used to load a module into
storage.  If the module name is in the application Module Name Table
(MNT) or the standard MNT and the table entry contains a nonzero entry
point address, :#x.ES_LOAD_MODULE:e#x. returns this address to the
caller; otherwise, the request is satisfied by issuing an MVS
:#x.LOAD:e#x. macro.
:mac.
ES_LOAD_MODULE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
  &lbt.,SPID=:hp1.spid_name:ehp1.&rbt.
  &lbt.,EPNAME=:hp1.epname:ehp1.&rbt.
  &lbt.,EPA=:hp1.epa:ehp1.&rbt.
  &lbt.,TYPE=&lbr.:us.STANDARD:eus. | MNT_ONLY&rbr.
:emac.
:callx.
CALLX :hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&amp.ES_LOAD_MODULE,&cont.
:hp1.epname:ehp1.,:hp1.epa:ehp1.&lbt.,:hp1.type:ehp1.&rbt.)
:ecallx.
.*****
:plist.
:pLt.spid_name
:pLd.specifies the name of a service processor identifier created by any
:#x.:hp1.xx:ehp1._ID:e#x. macro which will be used by the
:#x.ES_LOAD_MODULE:e#x. macro to automatically obtain values for
:#xi.epname:e#xi. and :#xi.epa:e#xi. (see below). This
parameter is required unless both :#xi.epname:e#xi. and
:#xi.epa:e#xi. are specified.
:pLt.epname
:pLd.an eight byte field containing the name of the entry point to be
loaded. This parameter may be specified in single quotes if desired, in
which case a literal will be created for it.  The value specified by
:#xi.epname:e#xi. overrides any value obtained from
:#x.SPID:e#x.=:#xi.spid_name:e#xi..
:pLt.epa
:pLd.specifies the address of a fullword into which will be stored
the address of the module loaded.  The value specified by
:#xi.epa:e#xi. overrides any value obtained from
:#x.SPID:e#x.=:#xi.spid_name:e#xi..
:pLt.type
:pLd.specifies the process by which a module may be loaded.  The
:#xb.STANDARD:e#xb. process is to search the application MNT first (if
there is one), then the standard MNT; if the module is not in either MNT
or if the located MNT entry contains zeros for its EPA, a normal system
load will be performed.  The :#xb.MNT_ONLY:e#xb. process will not
perform any load if the module is not named in one of the MNTs, although
a load may still be done if the module's MNT entry contains zeros for
its EPA.  For the :#x.CALLX:e#x. form of invoking this function, symbols
:#xb.&amp.ES_LM_STANDARD:e#xb. and :#xb.&amp.ES_LM_MNT_ONLY:e#xb.
may be used.
:eplist.
:fh3.Example
:p.
This example illustrates a program loading several service processors.
Since each service processor is assigned a unique service processor
identifier through :#x.xx_ID:e#x. macro instructions, no tags are
explicitly created in working storage.
:xmp.
*
* Obtain symbols &amp. macros for all service processors.
*
  COPY           SRVESMAC   Environment Support's symbols &amp. macros.
  COPY           SRVMMMAC   Memory Manager symbols &amp. macros.
  COPY           SRVSTMAC   String Handler symbols &amp. macros.
  COPY           SRVSYMAC   Symbol Manager symbols &amp. macros.
  COPY           SRVFIMAC   Standard File Handler symbols &amp. macros.
*
* Establish default values for all service processors.
*
  ES_ID          ID=ES,SPEPNAME=&MVS_ENVIRONMENT_SUPPORT
  MM_ID          ID=MM,SPEPNAME=&MEMORY_MANAGER
  ST_ID          ID=ST,SPEPNAME=&STRING_HANDLER
  SY_ID          ID=SY,SPEPNAME=&SYMBOL_MANAGER
  FI_ID          ID=FI,SPEPNAME=&FI_OS_FILE_HANDLER
*
  ES_MVS_LOAD    ID=ES                Load environment support.
  ES_START       ID=ES                Start environment support.
  ES_LOAD_MODULE ID=ES,SPID=MM        Load the memory manager.
  ES_LOAD_MODULE ID=ES,SPID=ST        Load the string handler.
  ES_LOAD_MODULE ID=ES,SPID=SY        Load the symbol manager.
  ES_LOAD_MODULE ID=ES,SPID=FI        Load the standard file handler.
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Module Name Table Mapping Macro'
:func name='ES_MNT'.&temp.
.**********************************************************************
:p.
The :#x.ES_MNT:e#x. macro is used to map individual entries in a Module
Name Table, or :#x.MNT:e#x..
:mac.
ES_MNT
  &lbt.,DSECT=&lbr.:hp2.:us.YES:eus.:ehp2. | :hp2.NO:ehp2.&rbr.&rbt.
  &lbt.,ID=&lbr.:hp2.:us.ES_MNT:eus.:ehp2. | :hp1.prefix:ehp1.&rbr.&rbt.
:emac.
.*****
:plist.
:pLt.DSECT
:pLd.the :#xb.DSECT:e#xb. keyword controls whether or not an assembler
:#x.DSECT:e#x. directive is generated.  The default is :#xb.YES:e#xb..
The value of :#xi.prefix:e#xi. will be used to name the :#x.DSECT:e#x..
If :#x.DSECT=NO:e#x. is specified, a label named :#xi.prefix:e#xi. will
be generated at the beginning of the :#x.MNT:e#x. storage.
:pLt.prefix
:pLd.specifies the name to use for the generated :#x.DSECT:e#x. or
label, as well as the prefix for all the labels of all other
:#x.MNT:e#x. fields.
:eplist.
:efunc.
.**********************************************************************
.se temp = 'Module Name Table Creation Macro'
:func name='ES_MODULE_NAME'.&temp.
.**********************************************************************
:p.
The :#x.ES_MODULE_NAME:e#x. macro is used generate entries in a static
Module Name Table.
:mac.
ES_MODULE_NAME START,NAME=':hp1.table_name:ehp1.'

- or -

ES_MODULE_NAME NAME=':hp1.generic_name:ehp1.'&cont.
&lbt.,TRUENAME=':hp1.entry_name:ehp1.'&rbt.

- or -

ES_MODULE_NAME END
:emac.
.*****
:plist.
:pLt.table_name
:pLd.Will be documented at a later time.
:pLt.generic_name
:pLd.Will be documented at a later time.
:pLt.entry_name
:pLd.Will be documented at a later time.
:eplist.
:efunc.
.**********************************************************************
.se temp = 'Load MVS Environment Support'
:func name='ES_MVS_LOAD' id=esmvsld.&temp.
.**********************************************************************
:p.
The :#x.ES_MVS_LOAD:e#x. macro is used in an MVS environment to load
the Environment Support module into main storage.  This is only one
possible method that may be used and is provided as a convenience.
This macro has access to all fields identified by the :#x.ES_ID:e#x.
macro.
:mac.
ES_MVS_LOAD ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPNAME=:hp1.es_epname:ehp1.&rbt. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt.
:emac.
.*****
:plist.
:pLt.id_name
:pLd.specifies the name of a service processor identifier created by the
:#x.ES_ID:e#x. macro.
:pLt.es_epname
:pLd.specifies the entry point name of the Environment Support service
processor module that is being loaded.
:pLt.es_epa
:pLd.specifies the label of a fullword in storage that will contain the
entry point address of the Environment Support service processor.
:eplist.
.*****
:fh3.Return Codes
:p.
:i1.abend
The :#x.ES_MVS_LOAD:e#x. macro generates an MVS :#x.LOAD:e#x.
instruction, which will cause a task abend if the module could not be
found or loaded.  The content of register 15 (:#x.R15:e#x.) is
unpredictable.
:fh3.Example
:p.
This example illustrates the intended use of :#x.ES_MVS_LOAD:e#x.. The
macro has access to all fields generated by the :#x.ES_ID:e#x. macro,
relieving the programmer of the need to explicitly create any tags.
:xmp.
ES_ID       ID=ES,SPEPNAME=&MVS_ENVIRONMENT_SUPPORT  Set up an ES_ID.
ES_MVS_LOAD ID=ES                                    Load Env. Support.
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Unload MVS Environment Support'
:func name='ES_MVS_UNLOAD' id=esmvsul.&temp.
.**********************************************************************
:p.
The :#x.ES_MVS_UNLOAD:e#x. macro complements the
:#x.ES_MVS_LOAD:e#x. macro by unloading the environment support
module from main storage.
:mac.
ES_MVS_UNLOAD ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPNAME=:hp1.es_epname:ehp1.&rbt. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt.
:emac.
.*****
:plist.
:pLt.id_name
:pLd.specifies the name of a service processor identifier created by the
ES_ID macro.
:pLt.es_epname
:pLd.specifies the entry point name of the Environment Support service
processor module that is being loaded.
:pLt.es_epa
:pLd.specifies the label of a fullword in storage that will contain the
entry point address of the Environment Support service processor.
:eplist.
.*****
:p.
The :#x.ES_MVS_UNLOAD:e#x. macro generates an MVS :#x.DELETE:e#x.
instruction, which will set register 15 (:#x.R15:e#x.) to 0 for
successful completion and 4 for unsuccessful completion.
:fh3.Example
:p.
This example illustrates the use of :#x.ES_MVS_UNLOAD:e#x. to
complement :#x.ES_MVS_LOAD:e#x..
:xmp.
ES_ID       ID=ES,SPEPNAME=&MVS_ENVIRONMENT_SUPPORT  Set up an ES_ID.
ES_MVS_LOAD ID=ES                                    Load Env. Support.
   .
   . main body of program.
   .
ES_MVS_UNLOAD ID=ES                                  Unload Env. Sup.
:exmp.
:efunc.
.**********************************************************************
:func name='ES_OBTAIN_STORAGE'.Obtain a Block of Main Storage
.**********************************************************************
:p.
The :#x.ES_OBTAIN_STORAGE:e#x. function is used to obtain storage
above or below the 16 megabyte line on a doubleword or page boundary.
This request for storage is satisfied by issuing an MVS RC-form
:#x.GETMAIN:e#x. SVC.
:mac.
ES_OBTAIN_STORAGE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
  &lbt.,SUBPOOL=&lbr.:hp1.subpool:ehp1. &cont.
| :hp2.:us.0:eus.:ehp2.&rbr.&rbt.
  &lbt.,LOCATION=&lbr.:hp2.:us.ANY:eus.:ehp2. &cont.
| :hp2.BELOW:ehp2.&rbr.&rbt.
  &lbt.,BOUNDARY=&lbr.:hp2.:us.DOUBLEWORD:eus.:ehp2. &cont.
| :hp2.PAGE:ehp2.&rbr.&rbt.
   ,SIZE=:hp1.size:ehp1.
   ,ADDRESS=:hp1.address:ehp1.
:emac.
:callx.
CALLX &cont.
:hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&amp.ES_OBTAIN_STORAGE,&cont.
:hp1.size:ehp1.,:hp1.subpool:ehp1.,:hp1.boundary:ehp1.,
              :hp1.location:ehp1.,:hp1.address:ehp1.)
:ecallx.
.*****
:plist.
:pLt.size
:pLd.a fullword containing the size in bytes of the storage area
requested.
:pLt.subpool
:pLd.a fullword containing a binary 0 - 127 for the subpool that the
storage should be obtained from.
:pLt.boundary
:pLd.specifies whether the storage to be obtained should be allocated on
a :#x.:hp2.DOUBLEWORD:ehp2.:e#x. boundary or a
:#x.:hp2.PAGE:ehp2.:e#x. boundary. For the macro, the default is
:#x.:hp2.DOUBLEWORD:ehp2.:e#x.. There is no default value for the
:#x.CALLX:e#x. form of invoking this function, which requires that
:#xi.boundary:e#xi. indicate a fullword containing a 1 (set
symbol :#x.&amp.ES_DOUBLEWORD_BOUNDARY:e#x.) if the storage should be
obtained on a doubleword boundary and 2 (set symbol
:#x.&amp.ES_PAGE_BOUNDARY:e#x.) if it should be obtained on a page
boundary.
:pLt.location
:pLd.specifies whether the storage to obtained must be allocated from
below the 16-megabyte line (:#x.:hp2.BELOW:ehp2.:e#x.) or if it may be
obtained from any address (:#x.:hp2.ANY:ehp2.:e#x.). The default value
for the macro is :#x.:hp2.ANY:ehp2.:e#x.. There is no default value
for the
:#x.CALLX:e#x. form of invoking this macro, which requires that
:#xi.location:e#xi. indicate a fullword containing a 1 (set
symbol
:#x.&amp.ES_LOCATION_ANY:e#x.) if the storage may be allocated at any
location and a 2 (set symbol :#x.&amp.ES_LOCATION_BELOW:e#x.) if the
storage must be allocated below the 16-megabyte line.
:pLt.address
:pLd.specifies the address of a fullword into which the
:#x.ES_OBTAIN_STORAGE:e#x. function will store the address of the
newly obtained storage.  This address will only be updated if the
request for storage was successful.
:eplist.
:fh3.Example
:p.
The following macro instruction obtains 256 bytes of storage and saves
its address in :#x.PWA_MSGPTR:e#x..
:xmp.
  ES_OBTAIN_STORAGE ID=ES,SIZE=256,ADDRESS=PWA_MSGPTR
:exmp.
Assuming that :#x.ID=ES:e#x. has established :#x.ES_EPA:e#x. and
:#x.ES_TOKEN:e#x. as default values for the
:#xi.es_epa:e#xi. and
:#xi.es_token:e#xi. parameters, respectively, this
instruction could also have been written as
:xmp.
  CALLX ES_EPA,(ES_TOKEN,&ES_OBTAIN_STORAGE,0,&ES_DOUBLEWORD_BOUNDARY,+
              &ES_LOCATION_ANY,256,PWA_MSGPTR)
:exmp.
:efunc.
.**********************************************************************
:func name='ES_RELEASE_STORAGE'.Release a Block of Main Storage
.**********************************************************************
:p.
The :#x.ES_RELEASE_STORAGE:e#x. function is used to release storage
obtained by the :#x.ES_OBTAIN_STORAGE:e#x. function. This storage is
released by issuing an MVS RC-form :#x.FREEMAIN:e#x. SVC.
:mac.
ES_RELEASE_STORAGE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
  &lbt.,SUBPOOL=&lbr.:hp1.subpool:ehp1. &cont.
| :hp2.:us.0:eus.:ehp2.&rbr.&rbt.
   ,SIZE=:hp1.size:ehp1.
   ,ADDRESS=:hp1.address:ehp1.
:emac.
:callx.
CALLX &cont.
:hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&amp.ES_RELEASE_STORAGE,&cont.
:hp1.size:ehp1.,:hp1.subpool:ehp1.,:hp1.address:ehp1.)
:ecallx.
.*****
:plist.
:pLt.size
:pLd.a fullword containing the
size in bytes of the storage area to be released.
:pLt.subpool
:pLd.a fullword containing a binary 0 - 127 for the subpool of the
storage.
:pLt.address
:pLd.specifies the address of a fullword that contains the address of
ahe storage area to be released.
:eplist.
:efunc.
.**********************************************************************
.se temp = 'Save Debugging Information'
:func name='ES_SAVE_DEBUG_INFO'.&temp.
.**********************************************************************
:p.
The :#x.ES_SAVE_DEBUG_INFO:e#x. function stores information in the
debugging area maintained by Environment Support.  This information
may then be displayed by any service processor.
:mac.
ES_SAVE_DEBUG_INFO ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.

:#x.Select one of:e#x.

   ,GDI=:hp1.gdi:ehp1.
:#x.or:e#x.
   ,TEXT=&lbr.:hp1.text:ehp1. | &cont.
:hp2.(:hp1.text:ehp1.,:hp1.length:ehp1.):ehp2.&rbr.&cont.
&lbt.,LABEL=&lbr.:hp1.label:ehp1. | &cont.
:hp2.(:hp1.label:ehp1.,:hp1.length:ehp1.):ehp2.&rbr.&rbt.
:#x.or:e#x.
   ,HEX=&lbr.:hp1.hex:ehp1. | &cont.
:hp2.(:hp1.hex:ehp1.,:hp1.length:ehp1.):ehp2.&rbr.&cont.
&lbt.,LABEL=&lbr.:hp1.label:ehp1. | &cont.
:hp2.(:hp1.label:ehp1.,:hp1.length:ehp1.):ehp2.&rbr.&rbt.
:emac.
:callx.
CALLX :hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&amp.ES_SAVE_DEBUG_INFO,

:#x.Select one of:e#x.

              &amp.ES_DEBUG_ID_GDI,:hp1.gdi:ehp1.)
:#x.or:e#x.
              &amp.ES_DEBUG_ID_TEXT,:hp1.text:ehp1.&cont.
,&lbt.:hp1.length:ehp1.&rbt.,&lbt.:hp1.label:ehp1.&rbt.&cont.
,&lbt.:hp1.length:ehp1.&rbt.)
:#x.or:e#x.
              &amp.ES_DEBUG_ID_HEX,:hp1.hex:ehp1.&cont.
,&lbt.:hp1.length:ehp1.&rbt.,&lbt.:hp1.label:ehp1.&rbt.&cont.
,&lbt.:hp1.length:ehp1.&rbt.)
:ecallx.
.*****
:plist.
:pLt.gdi
:pLd.general debug information.
Macro SRVGSI will map this control block.
:pLt.text
:pLd.text to be saved in debug area. If :#xi.length:e#xi. is
not specified, the first two bytes of the storage referenced by
:#xi.text:e#xi. must contain the length of the text.
:pLt.hex
:pLd.hex data to be saved in debug area. If :#xi.length:e#xi.
is not specified, the first two bytes of the storage referenced by
:#xi.text:e#xi. must contain the length of the text.
:pLt.length
:pLd.optional fullword length of the text or hex data to be saved in the
debug area.
:eplist.
:efunc.
.**********************************************************************
.se temp = 'Begin an Environment Support Session'
:func name='ES_START' id=esstart.&temp.
.**********************************************************************
:p.
The :#x.ES_START:e#x. function obtains and initializes a new
Environment Support Vector (ESV) and sets up Environment Support's
internal working storage.  A unique session identifier is returned in
the
:#xi.es_token:e#xi. parameter, which must be specified when
invoking any Environment Support function.  The address of the new
:#x.ESV:e#x. is returned to the application program via the
:#xi.es_epa:e#xi. parameter. If the application provides a
Module Name Table (:#x.MNT:e#x.), that will be retained within
environment support for use by the :#x.ES_LOAD_MODULE:e#x. and
:#x.ES_UNLOAD_MODULE:e#x. functions.
:mac.
ES_START ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
  &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
  &lbt.,MNT=:hp1.mnt_address:ehp1.&rbt.
  &lbt.,EXITINFO=:hp1.exit_info:ehp1.&rbt.
:emac.
:callx.
CALLX :hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&amp.ES_START,&cont.
:hp1.esva:ehp1.&lbt.,:hp1.mnt_address:ehp1.&rbt.&cont.
&lbt.,:hp1.exit_info:ehp1.&rbt.)
:ecallx.
.*****
:plist.
:pLt.mnt_address
:pLd.&lbt.optional&rbt. specifies the label of a fullword in storage
that contains the address of an application Module Name Table.
:pLt.exit_info
:pLd.&lbt.optional&rbt. specifies the label of a fullword in storage
whose :hp1.address:ehp1. will be passed to all Environment Support
exit modules as the second parameter.
:eplist
:efunc.
.**********************************************************************
.se temp = 'Stop an Environment Support session'
:func name='ES_TERMINATE' id=esterm.&temp.
.**********************************************************************
:p.
The :#x.ES_TERMINATE:e#x. function shuts-down Environment Support. It
unloads all modules that have been loaded by the
:#x.ES_LOAD_MODULE:e#x.  function and are still in storage, frees the
storage occupied by the Environment Support Vector, and releases
Environment Support's working storage.  Because :#x.ES_TERMINATE:e#x.
frees the :#x.ESV:e#x., which is used by all service processors, it
should be issued only after all other service processors have been
terminated.
:mac.
ES_TERMINATE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
:emac.
:callx.
CALLX :hp1.es_epa:ehp1.,(:hp1.es_epa:ehp1.,&amp.TERMINATE)
:ecallx.
:efunc.
.**********************************************************************
:func name='ES_UNLOAD_MODULE'.Remove a Module from Main Storage
.**********************************************************************
:p.
The :#x.ES_UNLOAD_MODULE:e#x. function is used to remove a module from
storage.  If the module name is in the application Module Name Table
(:#x.MNT:e#x.) or the standard :#x.MNT:e#x. and the table entry
contains a nonzero entry point address, :#x.ES_LOAD_MODULE:e#x. simply
returns to the caller; otherwise, the request is satisfied by issuing an
MVS :#x.DELETE:e#x. macro instruction.
:mac.
ES_UNLOAD_MODULE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.es_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.es_token:ehp1.&rbt.
  &lbt.,SPID=:hp1.spid_name:ehp1.&rbt.
  &lbt.,EPNAME=&lbr.:hp1.epname:ehp1.&rbt.
  &lbt.,EPA=:hp1.epa:ehp1.&rbt.
:emac.
:callx.
CALLX &cont.
:hp1.es_epa:ehp1.,(:hp1.es_token:ehp1.,&amp.ES_UNLOAD_MODULE,&cont.
:hp1.epname:ehp1.)
:ecallx.
.*****
:plist.
:pLt.spid_name
:pLd.specifies the name of a service processor identifier created by any
:#x.xx_ID:e#x. macro, which will be used by the
:#x.ES_UNLOAD_MODULE:e#x. macro to automatically obtain values
for :#xi.epname:e#xi. and :#xi.epa:e#xi..
:pLt.epname
:pLd.an eight byte field containing the name of the entry point to be
unloaded.
:pLt.epa
:pLd.the field containing the module's entry point address. This can
only be specified on the macro form of :#x.ES_UNLOAD_MODULE:e#x. and
will cause the field to be set to zeros.
:eplist.
:efunc.
.*
