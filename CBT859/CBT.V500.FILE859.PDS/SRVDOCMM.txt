.*SRVMM****************************************************************
.*                                                                    *
.*                    Chapter. Memory Manager                         *
.*                                                                    *
.**********************************************************************
:h1 id=srvmem.Memory Manager
:p.
The memory manager is designed to make memory allocation efficient for
applications by reducing the number of system requests needed to obtain
and release portions of storage.  For applications that need to
frequently allocate small items of storage, this can drastically reduce
system overhead.
:p.
Applications use the memory manager to create one or more storage
:hp1.heaps:ehp1., where each heap represents a storage space that may
incrementally grow and shrink over time as the application program
obtains and releases storage.  The increment by which a heap grows and
shrinks may be specified when the heap is created, as can restrictions
on its location (anywhere, or below the 16-megabyte line).  All storage
owned by a heap is automatically released when the heap is destroyed.
.*--------------------------------------------------------------------*
:h2.Preparing to Use the Memory Manager
.*--------------------------------------------------------------------*
:p.
The Memory Manager operates independently of its execution environment;
all managed storage is obtained through Environment Support.  Like any
service processor, the Memory Manager must be loaded and started before
its functions can be used.  This process is fully covered in
:hdref refid=part1 page=no. and will not be repeated here.
:p.
The Memory Manager's service processor identification code is :#xb.MM:e#xb.
so:
:ul.
:li.the :#x.COPY:e#x. member is :#xb.SRVMMMAC:e#xb.,
:li.the load module, named by symbol :#xb.&amp.MM_MEMORY_MANAGER:e#xb.,
is :#x.SRVMM:e#x.,
:li.and the names of all symbols, macros, and conditions begin with the
prefix :#xb.MM_:e#xb..
:eul.
:p.
A storage heap is identified by the :#xi.mm_token:e#xi. parameter, which
is required when invoking any Memory Manager function.  Invoking the
:#x.MM_START:e#x. function will create a new storage heap and return its
identification value in :#xi.mm_token:e#xi..  Using the same value for
:#xi.mm_token:e#xi. when invoking the :#x.MM_TERMINATE:e#x. function will
automatically release all of the heap's storage and destroy it.  To allocate
and release storage within a heap, use the
:#x.MM_OBTAIN_STORAGE:e#x. and
:#x.MM_RELEASE_STORAGE:e#x. functions, identifying the heap with
:#xi.mm_token:e#xi..  To reset all storage within a heap without
giving the storage back to the system, use the :#x.MM_RESET_HEAP:e#x.
function.
.*--------------------------------------------------------------------*
:h3.Common Parameters
.*--------------------------------------------------------------------*
:p.
There are several parameters common to any Memory Manager function
call.  These parameters are listed below:
.*****
:plist.
:pLt.id_name
:pLd.the name of a service processor identifier created by the
:#x.MM_ID:e#x. macro which will be used by all other function invocation
macros to automatically obtain values for :#xi.mm_epa:e#xi. and
:#xi.mm_token:e#xi.. This parameter is required unless both
:#xi.mm_epa:e#xi. and :#xi.mm_token:e#xi. are specified.
:pLt.mm_epa
:pLd.a fullword in storage containing the entry point address of the
Memory Manager service processor.  The value specified by
:#xi.mm_epa:e#xi. overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:pLt.mm_token
:pLd.a fullword in storage containing the value (to be) returned by
:#x.MM_START:e#x. for the :#xi.mm_token:e#xi. parameter.  The value
specified by :#xi.mm_token:e#xi. overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:eplist.
.*--------------------------------------------------------------------*
:h3.Complete List of Memory Manager Return Codes
.*--------------------------------------------------------------------*
:p.
Many return codes can be returned from each function.  In the function
descriptions later in this chapter, the most common return codes
returned by the particular function are documented.  The following
is a complete list of Memory Manager return codes.
.*****
:rclist.
:rcn.0
:rct.MM_SUCCESS
:rcd.The invoked Memory Manager function performed the requested
service without encountering any problems.
:rcn.1
:rct.MM_INVALID_FUNCTION
:rcd.An invalid :#xi.FunctionCode:e#xi. (the second parameter in any
service processor function call) was specified.
:rcn.2
:rct.MM_INVALID_HEAPID
:rcd.An invalid value was given in :#xi.mm_token:e#xi.. This
parameter must contain a value previously returned by the
:#x.MM_START:e#x. function.
:rcn.3
:rct.MM_INVALID_INCREMENT
:rcd.An invalid value for the :#xi.increment:e#xi. parameter was passed
to the :#x.MM_START:e#x. function of the Memory Manager.
:rcn.4
:rct.MM_INVALID_LOCATION
:rcd.An invalid value for the :#xi.location:e#xi. parameter was passed
to the :#x.MM_START:e#x. function of the Memory Manager.
:rcn.5
:rct.MM_INVALID_SIZE
:rcd.An invalid value was provided for the :#xi.size:e#xi. parameter,
which must be a positive fullword integer value.
:rcn.6
:rct.MM_INVALID_PARM_COUNT
:rcd.Either too few parameters were supplied for the function call or
too many were supplied.  Check the parameter list to ensure that it is
right for the function being invoked.
:rcn.7
:rct.MM_INVALID_ALIGNMENT
:rcd.The value of :#xi.address:e#xi., a :#x.MM_RELEASE_STORAGE:e#x.
parameter, must be an even multiple of eight (doubleword boundary).
:rcn.8
:rct.MM_STORAGE_NOT_AVAILABLE
:rcd.The system denied a request for storage.
:rcn.9
:rct.MM_UNKNOWN_ERROR
:rcd.The Memory Manager encountered an unexpected error.  The
application program should respond to this return code by immediately
dumping the debugging area with the :#x.ES_DISPLAY_DEBUG_INFO:e#x.
function of Environment Support.
:note.No functions other than :#x.MM_TERMINATE:e#x. will be accepted by
the Memory Manager after this error has ocurred.
:rcn.10
:rct.MM_MEMORY_NOT_IN_HEAP
:rcd.The memory being released (via :#x.MM_RELEASE_STORAGE:e#x.) was
not allocated using the supplied :#x.mm_token:e#x. value.
:rcn.11
:rct.MM_MEMORY_NOT_ALLOCATED
:rcd.The memory being released (via :#x.MM_RELEASE_STORAGE:e#x.) does
exist in the heap indicated by the supplied :#xi.mm_token:e#xi. value,
but is not allocated and thus cannot be released.
:rcn.12
:rct.MM_CORRUPT_STORAGE
:rcd.An internal control block has been overwritten by invalid data.
The application program may have written data beyond the end of a block
of storage previously allocated by the :#x.MM_OBTAIN_STORAGE:e#x.
function, or it may have continued writing to storage released via the
:#x.MM_RELEASE_STORAGE:e#x. function.
:note.No functions other than :#x.MM_TERMINATE:e#x. will be accepted by
the Memory Manager after this error has ocurred.
:rcn.13
:rct.MM_NOT_USEABLE
:rcd.All functions to the memory manager, other than
:#x.MM_TERMINATE:e#x., have been disabled due to a previous error.
Errors that can cause the memory manager to become unuseable are
:#xb.MM_UNKNOWN_ERROR:e#xb. and :#xb.MM_CORRUPT_STORAGE:e#xb..
:erclist.
.*--------------------------------------------------------------------*
:h2.Memory Manager Service Processor Functions
.*--------------------------------------------------------------------*
:p.
The remaining sections of this chapter describe all functions provided
by the Memory Manager service processor, arranged in alphabetical order.
Each function's description begins on a new page, and the name of the
function being described appears at the top of every page.
.**********************************************************************
:func name='MM_ID' id=mmid.Establish Default Memory Manager Values
.**********************************************************************
:p.
The :#x.MM_ID:e#x. macro is used to establish default values for use
by other Memory Manager macros, which may access those defaults through
a unique identifier, :#xi.id_name:e#xi., specified by the
user. Default values can be established for the following parameters:
:#xi.mm_epname:e#xi., :#xi.mm_epa:e#xi., and
:#xi.mm_token:e#xi..
:p.
In most cases, nothing other than the entry point name needs to be
specified on the :#x.MM_ID:e#x. macro: it will automatically define
working storage fields for the remaining parameters if they are not
specified.  These values, whether generated by the macro or provided by
the user, are accessable from all other Memory Manager macros through
the :#x.ID=:e#x.:#xi.id_name:e#xi.. If the application program needs
to access the parameters directly, they should be explicitly specified.
:mac.
MM_ID ID=:hp1.id_name:ehp1.
  &lbt.,SPEPNAME=:hp1.mm_epname:ehp1.&rbt.
  &lbt.,SPEPA=:hp1.mm_epa:ehp1.&rbt.
  &lbt.,SPTOKEN=:hp1.mm_token:ehp1.&rbt.
  &lbt.,ESID=:hp1.esid_name:ehp1.&rbt.
  &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
:emac.
.*****
:plist.
:pLt.id_name
:pLd.the identifier to assign to the service processor identifier being
established.  This name must be unique for all service processor
identifier's.
:pLt.mm_epname
:pLd.the entry point name of the Memory Manager service processor module
that is being used.
:pLt.mm_epa
:pLd.specifies the label of a fullword in storage that will contain the
entry point address of the Memory Manager service processor.
:pLt.mm_token
:pLd.specifies the label of a fullword in storage that will contain the
value assigned by the :#x.MM_START:e#x. function of the Memory
Manager.
:pLt.esid_name
:pLd.the name of a service processor identifier, created by the
:#x.ES_ID:e#x.  macro, which will be used by the :#x.MM_ID:e#x. macro to
automatically obtain the value for :#xi.esv:e#xi. (see below). If this
parameter is not specified and an Environment Support service processor
ID exists, that ID will be used.
:pLt.esva
:pLd.specifies the label of a fullword in storage that contains (or
will contain) the address of the Environment Support Vector (ESV)
created by the :#x.ES_START:e#x. function.
:eplist.
:fh3.Example
:p.
An application intends to use only one memory manager heap for its
storage and issues the following instruction:
:xmp.
MM_ID ID=MM,EPNAME=&MEMORY_MANAGER
:exmp.
This instruction will save all parameter values and generate the
following code:
:xmp.
                     PWA TYPE=PARTIAL  | Generate fields to EPA & TOKEN.
&amp.PWA.MM_SPEPA    DS  A             |   ID=MM: Entry point address.
&amp.PWA.MM_SPTOKEN  DS  F             |   ID=MM: Token value.
                     ENDPWA  ,         | End of generated fields.
:exmp.
:p.
Once the :#x.MM_ID:e#x. macro instruction above has been executed by
the assembler, specifying :#x.ID=MM:e#x. on any Memory Manager macro
instruction will be equivalent to supplying all of the above values.
:p.
If the application needs to use more than one heap, it can either create
an ID for each heap, or it can specify :#x.ID=MM:e#x. but override the
:#xi.mm_token:e#xi. parameter on each macro instruction:
:xmp
MM_START          ID=MM,SPTOKEN=NEW_HEAP  Create a new storage heap.
MM_OBTAIN_STORAGE ID=MM,SPTOKEN=NEW_HEAP,SIZE=256,ADDRESS=BUFFER_ADDR
:exmp.
:efunc.
.**********************************************************************
:func name='MM_OBTAIN_STORAGE'.Allocate Managed Storage
.**********************************************************************
:p.
The :#x.MM_OBTAIN_STORAGE:e#x. function allocates a single contiguous
section of memory for use by an application program.  The new storage
will begin on a doubleword boundary and its address will be returned in
the :#xi.address:e#xi. parameter.  The storage will be initialized to
all zeros before it is returned to the application program.
:p.
If the Memory Manager cannot locate a large enough section of storage
within the specified heap, storage will be obtained from the system and
added to the heap.  The amount of storage obtained from the system will
equal the heap's increment size or the amount of storage being allocated
(:#xi.size:e#xi.), whichever is larger.
:mac.
MM_OBTAIN_STORAGE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.mm_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.mm_token:ehp1.&rbt.
   ,SIZE=:hp1.size:ehp1.
   ,ADDRESS=:hp1.address:ehp1.
:emac.
:callx.
CALLX &cont.
:hp1.mm_epa:ehp1.,(:hp1.mm_token:ehp1.,&amp.MM_OBTAIN_STORAGE,&cont.
:hp1.size:ehp1.,:hp1.address:ehp1.)
:ecallx.
.*****
:plist.
:pLt.size
:pLd.specifies the label of a signed fullword integer indicating the
desired amount of storage to be allocated.  The amount of storage to
be allocated must be between 1 and 16,777,215 bytes.
:pLt.address
:pLd.specifies a fullword in which the address of the newly allocated
storage is to be returned.
:eplist.
:fh3.Example
:p.
This example shows the code needed to allocate storage for holding a
simple control block.
:xmp.
             ...
MM_OBTAIN_STORAGE ID=MM,SIZE==A(CTL_LEN),ADDRESS=PWA_CTLPTR
             ...
             PWA
PWA_CTLPTR   DS  A          Address of control block storage.
             ENDPWA
             ...
CTL          DSECT          Control Block's DSECT.
             ...              Various control block fields.
CTL_LEN      EQU  *-CTL     Length of Control Block.
:exmp.
:efunc.
.**********************************************************************
:func name='MM_RELEASE_STORAGE'.Release Managed Storage
.**********************************************************************
:p.
The :#x.MM_RELEASE_STORAGE:e#x. function releases a contiguous section
of storage back to the managed heap identified by the
:#x.mm_token:e#x. parameter.  The storage to be released must be
located within the heap identified by :#xi.mm_token:e#xi. and must begin
on a doubleword boundary.  It is pointed to by the
:#xi.address:e#xi. parameter and its length is specified by
the :#xi.size:e#xi. parameter.
:p.
The storage being released does not have to exactly match a previous
:#x.MM_OBTAIN_STORAGE:e#x. request in its
:#xi.address:e#xi. and
:#xi.size:e#xi., but it must consist entirely of storage
allocated from heap :#xi.mm_token:e#xi.. For example, a
program might allocate a single large piece of storage and then give it
back piece-by-piece.  So long as the storage being returned to the heap
came from the heap in the first place, there is no problem.
:mac.
MM_RELEASE_STORAGE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.mm_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.mm_token:ehp1.&rbt.
   ,SIZE=:hp1.size:ehp1.
   ,ADDRESS=:hp1.address:ehp1.
:emac.
:callx.
CALLX &cont.
:hp1.mm_epa:ehp1.,(:hp1.mm_token:ehp1.,&amp.MM_RELEASE_STORAGE,&cont.
:hp1.size:ehp1.,:hp1.address:ehp1.)
:ecallx.
.*****
:plist.
:pLt.size
:pLd.a fullword integer indicating the desired amount of storage to be
released.  The memory manager will round this value up to the nearest
multiple of eight.
:pLt.address
:pLd.a fullword address that points to the storage to be released. This
storage should have been previouly allocated in the same storage heap by
the :#x.MM_OBTAIN_STORAGE:e#x. function of the memory manager, and
must be aligned on a doubleword boundary.
:eplist.
:fh3.Example
:p.
This example shows the code needed to release storage that held a simple
control block.
:xmp.
             ...
MM_RELEASE_STORAGE ID=MM,SIZE==A(CTL_LEN),ADDRESS=PWA_CTLPTR
             ...
             PWA
PWA_CTLPTR   DS  A          Address of control block storage.
             ENDPWA
             ...
CTL          DSECT          Control Block's DSECT.
             ...              Various control block fields.
CTL_LEN      EQU  *-CTL     Length of Control Block.
:exmp.
:efunc.
.**********************************************************************
:func name='MM_RESET_HEAP'.Release All Managed Storage
.**********************************************************************
:p.
The :#x.MM_RESET_HEAP:e#x. function releases all managed storage back to
the heap identified by the :#x.mm_token:e#x. parameter.  This function
provides applications with a method of reusing a heap without having
to terminate and restart a Memory Manager session.  When this function
is used, all storage previously obtained within the heap by the
:#x.MM_OBTAIN_STORAGE:e#x. function is released back to the heap.
:mac.
MM_RESET_HEAP ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.mm_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.mm_token:ehp1.&rbt.
:emac.
:callx.
CALLX &cont.
:hp1.mm_epa:ehp1.,(:hp1.mm_token:ehp1.,&amp.MM_RESET_HEAP)
:ecallx.
:efunc.
.**********************************************************************
:func name='MM_START'.Create a New Storage Heap
.**********************************************************************
:p.
The :#x.MM_START:e#x. function creates a new storage heap for management
by the memory manager.  Two optional parameters,
:#xi.increment:e#xi. and :#xi.location:e#xi. control how the heap will
grow and where its storage will be allocated.
:mac.
MM_START ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.mm_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.mm_token:ehp1.&rbt.
  &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
  &lbt.,INCREMENT=&lbr.:us.4096:eus. | :hp1.increment:ehp1.&rbr.&rbt.
  &lbt.,LOCATION=&lbr.:hp2.:us.ANY:eus.:ehp2.|:hp2.BELOW:ehp2.&rbr.&rbt.
:emac.
:callx.
CALLX :hp1.mm_epa:ehp1.,(:hp1.mm_token:ehp1.,&amp.MM_START,&cont.
:hp1.esva:ehp1.,&cont.
&lbt.:hp1.increment:ehp1.&rbt.,&lbt.:hp1.location:ehp1.&rbt.)
:ecallx.
.*****
:plist.
:pLt.increment
:pLd.specifies the label of a fullword signed integer that will be used
as the smallest amount of storage to obtain from the system when the
heap needs to grow in size.  A larger amount of storage will be obtained
if needed in order to satisfy an :#x.MM_OBTAIN_STORAGE:e#x. request.  If
the specified value for :#xi.increment:e#xi. is an even multiple of the
system page size (4096 bytes), each increment of storage will be
allocated on a page boundary.  The default value for
:#xi.increment:e#xi. is 4096 bytes.
:pLt.location
:pLd.specifies whether storage for the heap must come from below the
16-megabyte line (:#x.:hp2.BELOW:ehp2.:e#x.) or if it may come from
anywhere (:#x.:hp2.ANY:ehp2.:e#x.). For the call form of this
function,
:#xi.location:e#xi. specifies a fullword in storage
containing the value of symbol :#x.&amp.MM_LOCATION_BELOW:e#x. if the
storage must come from below the 16-megabyte line and
:#x.&amp.MM_LOCATION_ANY:e#x. if the storage may come from anywhere.
These symbols are defined in copy member :#x.SRVMMMAC:e#x..
:eplist.
:efunc.
.**********************************************************************
:func name='MM_TERMINATE'.Destroy an Existing Storage Heap
.**********************************************************************
:p.
The :#x.MM_TERMINATE:e#x. function releases all storage associated
with an existing storage heap and then destroys the heap.  The value of
:#xi.mm_token:e#xi. will be set to zero when
:#x.MM_TERMINATE:e#x. returns.
:mac.
MM_TERMINATE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.mm_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.mm_token:ehp1.&rbt.
:emac.
:callx.
CALLX :hp1.mm_epa:ehp1.,(:hp1.mm_token:ehp1.,&amp.MM_TERMINATE)
:ecallx.
:efunc.
.*
