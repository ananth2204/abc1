.*SRVSY****************************************************************
.*                                                                    *
.*                    Chapter. Symbol Manager                         *
.*                                                                    *
.**********************************************************************
:h1 id=srvsy.Symbol Manager
:p.
The Symbol Manager provides a mechanism for easily and efficiently
keeping track of data by name.  With the Symbol Manager, data is stored
and maintained as symbols in a table.  Each symbol has two parts: (1) a
:hp1.name:ehp1., and (2) a :hp1.value:ehp1..  The :hp1.value:ehp1. portion
of a symbol is defined by the application program and contains data to
be associated with that particular symbol.
:p.
To use a symbol table, an application first must invoke the
:#x.SY_START:e#x. function.  This function will create a new table and
initialize it for use.  :#x.SY_START:e#x. accepts several optional
parameters that can be used to tailor various aspects of the symbol
table as needed.
:p.
Once :#x.SY_START:e#x. has been used to set up a new symbol table, an
application can begin adding symbols to the table and manipulating them.
Separate functions are provided for installing symbols in the table,
looking up symbols to see if they exist or to get their values, updating
the values of symbols, and removing symbols from the table.  When an
application is done using a table, the :#x.SY_TERMINATE:e#x. function
should be used to delete the entire table (including any symbols it may
contain).
:p.
There is currently no support within the Symbol Manager for scoping of
any nature: all symbols in the table must be unique and are accessable
at any time.  If you have a need for scoping, or if you need to maintain
multiple sets of symbols, you can still do it by creating multiple
symbol tables.
:p.
As many symbol tables as needed may be created and maintained at the
same time.  A symbol table is identified by :#xi.sy_token:e#xi., the
value returned by :#x.SY_START:e#x. at the time the table was created.
By invoking :#x.SY_START:e#x. multiple times to create multiple tables,
and by keeping track of the different :#xi.sy_token:e#xi. values used to
identify those tables, you can maintain as many symbol tables as needed.
:p.
Hint: If you need to manage a hierarchical set of symbol tables, you can
store the :#xi.sy_token:e#xi. value for one symbol table in the value
of a symbol in a different table.  For example, a root symbol table may
contain a symbol (say for a subroutine) that contains as part of its
value the :#xi.sy_token:e#xi. value of another symbol table (say for the
subroutine's internal symbols).
:p.
The Symbol Manager operates independently of its execution environment
and may be used with any Environment Support service processor.
.*--------------------------------------------------------------------*
:h3.Obtaining Symbol Manager Symbols &amp. Macros
.*--------------------------------------------------------------------*
:p.
The Symbol Manager's symbols and interface macros can be found in the
assembler copy member :#x.SRVSYMAC:e#x.. This member contains symbols
naming the Symbol Manager's load module, function codes, return codes,
and parameter values.  It also contains macros for using all of the
Symbol Manager's functions.  The following statement or its equivalent
should appear at the beginning of any program that uses the string
handler:
:xmp.
   COPY SRVSYMAC      Obtain the Symbol Manager's symbols & macros.
:exmp.
.*--------------------------------------------------------------------*
:h3.Common Symbol Manager Parameters
.*--------------------------------------------------------------------*
Some parameters are general to the Symbol Manager and not specific to
any function.  These parameters include its load module name
(:#xi.sy_epname:e#xi.), entry point address (:#xi.sy_epa:e#xi.), and
token value (:#xi.sy_token:e#xi.). The :#x.SY_ID:e#x. macro (see
:hdref refid=syid.) can be used to establish defaults for these
parameters and associate them with a unique service processor
identifier.  The identifier may then be supplied on any Symbol Manager
macro instruction to refer to the default parameter values.
:p.
The parameters listed below apply to every Symbol Manager function.
.*****
:plist.
:pLt.id_name
:pLd.specifies the name of a service processor identifier created by the
:#x.SY_ID:e#x. macro which will be used by all other function invocation
macros to automatically obtain values for :#xi.sy_epa:e#xi. and
:#xi.sy_token:e#xi.. This parameter is required on all function macros
unless both :#xi.sy_epa:e#xi. and :#xi.sy_token:e#xi. are specified.
:pLt.sy_epa
:pLd.specifies the label of a fullword that contains the entry point
address of an already-started Symbol Manager service processor.  The
value specified by :#xi.sy_epa:e#xi. overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:pLt.sy_token
:pLd.specifies the label of a fullword that contains the value returned
by :#x.SY_START:e#x. for the :#xi.sy_token:e#xi. parameter.  The value
specified by :#xi.sy_token:e#xi. overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:eplist.
.*--------------------------------------------------------------------*
:h3.Identifying the Symbol Manager
.*--------------------------------------------------------------------*
:p.
The Symbol Manager service processor resides in the load module named by
the following symbol definition in copy member :#x.SRVSYMAC:e#x.:
:xmp.
&SYMBOL_MANAGER  SETC  '''SRVSY   '''
:exmp.
This symbolic name should be used as the service processor entry point
name for the Symbol Manager as shown in the following :#x.SY_ID:e#x.
macro instruction.
:xmp.
SY_ID ID=SY,SPEPNAME=&SYMBOL_MANAGER    Set Symbol Manager Defaults.
:exmp.
.*--------------------------------------------------------------------*
:h3.Loading the Symbol Manager
.*--------------------------------------------------------------------*
:p.
The recommended method for loading the Symbol Manager is through
Environment Support's :#x.ES_LOAD_MODULE:e#x. function, as shown in
the following example:
:xmp.
ES_LOAD_MODULE ID=ES,SPID=SY            Load the Symbol Manager
:exmp.
.*--------------------------------------------------------------------*
:h3.Complete List of Symbol Manager Return Codes
.*--------------------------------------------------------------------*
:p.
Many return codes can be returned from each function.  In the function
descriptions later in this chapter, the most common return codes
returned by the particular function are documented.  The following
is a complete list of Symbol Manager return codes.
.*****
:rclist.
:rcn.0
:rct.SY_SUCCESS
:rcd.The invoked Symbol Manager function performed the requested
service without encountering any problems.
:rcn.1
:rct.SY_INVALID_VALUESIZE
:rcd.The value specified for :#xi.valuesize:e#xi. on the :#x.SY_START:e#x.
function was negative.
:rcn.2
:rct.SY_INVALID_CAPS
:rcd.The value specified for :#xi.caps:e#xi. on the :#x.SY_START:e#x.
function was not equal to the character string :#x.'ON':e#x. or
:#x.'OFF':e#x..
:rcn.3
:rct.SY_INVALID_FUNCTION
:rcd.An invalid :#xi.FunctionCode:e#xi. (the second parameter in any
service processor function call) was specified.
:rcn.4
:rct.SY_INVALID_TOKEN
:rcd.The value specified for :#xi.token:e#xi. does not identify any
symbol currently in the syjmbol table.
:rcn.5
:rct.SY_INVALID_HASHSIZE
:rcd.The value specified for :#xi.hashsize:e#x. on the :#x.SY_START:e#x.
function was either zero, negative, or too large.  The symbol manager
can process :#xi.hashsize:e#xi. values from 1 up to an implementation
maximum of 536870911 (hexadecimal :#x.X"1FFFFFFF":e#x.).
:rcn.6
:rct.SY_INVALID_MEMINCR
:rcd.The value specified for :#xi.memincr:e#x. on the :#x.SY_START:e#x.
function was either negative or zero.
:rcn.7
:rct.SY_INVALID_NUMBER_OF_PARMS
:rcd.Either too few parameters were supplied for the function call or
too many were supplied.  Check the parameter list to ensure that it is
right for the function being invoked.
:rcn.8
:rct.SY_INVALID_LENGTH
:rcd.The value specified for :#xi.length:e#x. on the
:#x.SY_INSTALL:e#x. or :#x.SY_LOOKUP:e#x.
function was either negative or zero.
:rcn.9
:rct.SY_MEMORY_PROBLEM
:rcd.An error was encountered while attempting to obtain or release
storage for symbol table management. The Symbol Manager uses the Memory
Manager service processor for these functions, so the error will be in
the Environment Support Debug Information Area.
:rcn.10
:rct.SY_STORAGE_NOT_AVAILABLE
:rcd.Not enough storage was available to create the symbol table (for
:#x.SY_START:e#x. calls) or to add a new symbol to the table (for
:#x.SY_INSTALL:e#x. calls).  Since symbol table size is limited
only by the total amount of memory available to your program, you must
increase your region size to get more storage.
:rcn.11
:rct.SY_SYMBOL_ALREADY_INSTALLED
:rcd.The :#x.SY_INSTALL:e#x. function was called to install a
new symbol in the symbol table, but the provided symbol was already
there.
:rcn.12
:rct.SY_SYMBOL_NOT_FOUND
:rcd.The symbol identified by :#xi.name:e#xi. and :#xi.length:e#xi. is
not in the symbol table.
:erclist.
.*--------------------------------------------------------------------*
:h2.Symbol Manager Service Processor Functions
.*--------------------------------------------------------------------*
:p.
The remaining sections of this chapter describe all functions provided
by the Symbol Manager service processor, arranged in alphabetical order.
Each function's description begins on a new page, and the name of the
function being described appears in the top outside corner of every
page.
.**********************************************************************
:func name='SY_ID' id=syid.Establish Default Symbol Manager Values
.**********************************************************************
:p.The :#x.SY_ID:e#x. macro is used to establish default values for
use by other Symbol Manager macros, which may access those values
through a unique identifier, :#xi.id_name:e#xi., specified by
the user.  When allowed to generate default values, this macro will
create Program Work Area (PWA) storage for :#xi.sy_epa:e#xi.
and
:#xi.sy_token:e#xi.. These values, whether generated by the
macro or provided by the user, are accessable from all other Symbol
Manager macros via the :#x.ID=:e#x.:#xi.id_name:e#xi.
parameter.
:mac.
SY_ID ID=:hp1.id_name:ehp1.
  &lbt.,SPEPNAME=:hp1.sy_epname:ehp1.&rbt.
  &lbt.,SPEPA=:hp1.sy_epa:ehp1.&rbt.
  &lbt.,SPTOKEN=:hp1.sy_token:ehp1.&rbt.
  &lbt.,ESID=:hp1.esid_name:ehp1.&rbt.
  &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
:emac.
.*****
:plist.
:pLt.id_name
:pLd.the identifier to assign to the service processor identifier being
established.  This name must be unique for all service processor
identifier's.
:pLt.sy_epname
:pLd.the entry point name of the Symbol Manager service processor module
that is being used.
:pLt.sy_epa
:pLd.specifies the label of a fullword that will contain the entry point
address of the Symbol Manager.
:pLt.sy_token
:pLd.specifies the label of a fullword that will contain the token
assigned by the :#x.SY_START:e#x. function of the Symbol Manager.
:pLt.esid_name
:pLd.the name of a service processor identifier, created by the
:#x.ES_ID:e#x.  macro, which will be used by the :#x.SY_ID:e#x. macro to
automatically obtain the value for :#x.esv:e#x. (see below).
:pLt.esva
:pLd.specifies the label of a fullword that contains (or
will contain) the address of the Environment Support Vector
(:#x.ESV:e#x.) created by the :#x.ES_START:e#x. function.
:eplist.
:fh3.Example 1
:p.
:xmp.
SY_ID     ID=SY,SPEPNAME=&SYMBOL_MANAGER
:exmp.
:efunc.
.**********************************************************************
:func name='SY_INSTALL'.Install a Symbol in the Symbol Table
.**********************************************************************
:p.
The :#x.SY_INSTALL:e#x. function inserts a new symbol into the
table identified by the :#xi.sy_token:e#xi. parameter.  If the symbol is
already in the symbol table, :#x.SY_INSTALL:e#x. will not update
that symbol's value.
:mac.
SY_INSTALL ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.sy_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.sy_token:ehp1.&rbt.

   ,NAME=&lbr.:hp1.'name':ehp1. | :hp1.name:ehp1. &cont.
| :hp2.(:hp1.name:ehp1.,:hp1.length:ehp1.):ehp2.&rbr.
  &lbt.,TOKEN=:hp1.token:ehp1.&rbt.
  &lbt.,VALUE=:hp1.value:ehp1.&rbt.
:emac.
:callx.
CALLX :hp1.sy_epa:ehp1.,(:hp1.sy_token:ehp1.,&amp.SY_INSTALL,&cont.
:hp1.name:ehp1.,:hp1.length:ehp1.,&lbt.:hp1.token:ehp1.&rbt.,&cont.
&lbt.:hp1.value:ehp1.&rbt.)
:ecallx.
.*****
:plist.
:pLt.name
:pLd.the name of the symbol to install.  If the
:#x.:hp2.CAPS:ehp2.:e#x. option is in effect, the symbol will be stored
in the table with :#xi.name:e#xi. converted to uppercase.
:pLt.length
:pLd.a signed binary fullword integer equal to the length of the text
specified by :#xi.name:e#xi..
:pLt.token
:pLd.a fullword in which a unique four-byte identifier will be
returned for the newly installed symbol.  The :#xi.token:e#xi. must
be used for all accesses to the symbol in the future.
:pLt.value
:pLd.an application defined area containing the initial value to assign
to the symbol.  The data referred to by :#xi.value:e#xi. must be
:#xi.valuesize:e#xi. bytes in length.  See the :#x.SY_START:e#x.
function for an explanation of the :#xi.valuesize:e#xi. parameter.
:eplist.
:efunc.
.**********************************************************************
:func name='SY_LOOKUP'.Locate a Symbol in the Symbol Table
.**********************************************************************
:p.
The :#x.SY_LOOKUP:e#x. function locates the specified symbol in
the table identified by the :#xi.sy_token:e#xi. value and returns its
unique four-byte :#xi.token:e#xi. value.  The :#xi.token:e#xi. may then
be used to identify the symbol for other symbol manager functions.
:mac.
SY_LOOKUP ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.sy_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.sy_token:ehp1.&rbt.

  ,NAME=&lbr.:hp1.'name':ehp1. | :hp1.name:ehp1. &cont.
| :hp2.(:hp1.name:ehp1.,:hp1.length:ehp1.):ehp2.&rbr.
  &lbt.,TOKEN=:hp1.token:ehp1.&rbt.
:emac.
:callx.
CALLX :hp1.sy_epa:ehp1.,(:hp1.sy_token:ehp1.,&amp.SY_LOOKUP,&cont.
:hp1.name:ehp1.,:hp1.length:ehp1.,&lbt.:hp1.token:ehp1.&rbt.)
:ecallx.
.*****
:plist.
:pLt.name
:pLd.the name of the symbol to be located in the symbol table.  If the
:#x.:hp2.CAPS:ehp2.:e#x. option is in effect, the case of the symbol is
not important.
:pLt.length
:pLd.the length (as a signed fullword integer) of the text pointed to by
the :#xi.name:e#xi. parameter.
:pLt.token
:pLd.a fullword into which the unique :#xi.token:e#xi. of the located
symbol will be returned.
:eplist.
:efunc.
.**********************************************************************
:func name='SY_OBTAIN_NAME'.Obtain a Symbol's Name
.**********************************************************************
:p.
The :#x.SY_OBTAIN_NAME:e#x. function returns the address and length of
the name of the specified symbol.
:mac.
SY_OBTAIN_NAME ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.sy_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.sy_token:ehp1.&rbt.

  ,TOKEN=:hp1.token:ehp1
  ,NAMEPTR=:hp1.nameptr:ehp1.
  ,LENGTH=:hp1.length:ehp1.
:emac.
:callx.
CALLX :hp1.sy_epa:ehp1.,(:hp1.sy_token:ehp1.,&amp.SY_OBTAIN_NAME,&cont.
:hp1.token:ehp1.,:hp1.nameptr:ehp1.,:hp1.length:ehp1.)
:ecallx.
.*****
:plist.
:pLt.token
:pLd.a fullword value returned by the :#xi.token:e#xi.  parameter of the
:#x.SY_INSTALL:e#x. or :#x.SY_LOOKUP:e#x. function.
:pLt.nameptr
:pLd.a fullword into which the address of the identified symbol's name
will be returned.  This address will be of the symbol manager's copy of
the symbol's name which may have been converted to all capitals.  The
application program must not modify this storage in any way!
:pLt.length
:pLd.a fullword into which a signed binary integer equal to the length
of the specified symbol's name will be returned.
:eplist.
:efunc.
.**********************************************************************
:func name='SY_OBTAIN_VALUE'.Obtain a Symbol's Value
.**********************************************************************
:p.
The :#x.SY_OBTAIN_VALUE:e#x. function returns the current value of the
specified symbol.
:mac.
SY_OBTAIN_VALUE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.sy_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.sy_token:ehp1.&rbt.

  ,TOKEN=:hp1.token:ehp1
  ,VALUE=:hp1.value:ehp1.
:emac.
:callx.
CALLX :hp1.sy_epa:ehp1.,(:hp1.sy_token:ehp1.,&amp.SY_OBTAIN_VALUE,&cont.
:hp1.token:ehp1.,:hp1.value:ehp1.)
:ecallx.
.*****
:plist.
:pLt.token
:pLd.a fullword value returned by the :#xi.token:e#xi.  parameter of the
:#x.SY_INSTALL:e#x. or :#x.SY_LOOKUP:e#x. function.
:pLt.value
:pLd.an application defined area into which the current value of the
specified symbol will be placed.  This area must be
:#xi.valuesize:e#xi. bytes in length.  See the :#x.SY_START:e#x.
function for an explanation of the :#xi.valuesize:e#xi. parameter.
:eplist.
:efunc.
.**********************************************************************
:func name='SY_REMOVE'.Remove a Symbol from the Symbol Table
.**********************************************************************
:p.
The :#x.SY_REMOVE:e#x. function removes a symbol (with its
associated value) from the symbol table.  The symbol to be deleted must
be identified by its :#xi.token:e#xi..
:mac.
SY_REMOVE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.sy_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.sy_token:ehp1.&rbt.

  ,TOKEN=:hp1.token:ehp1
:emac.
:callx.
CALLX :hp1.sy_epa:ehp1.,(:hp1.sy_token:ehp1.,&amp.SY_REMOVE,&cont.
:hp1.token:ehp1.)
:ecallx.
.*****
:plist.
:pLt.token
:pLd.Specifies the label of a fullword containing the value returned in
the :#xi.token:e#xi. parameter of the :#x.SY_INSTALL:e#x. or
:#x.SY_LOOKUP:e#x. function.
:eplist.
:efunc.
.**********************************************************************
:func name='SY_START'.Begin a New Symbol Manager Session
.**********************************************************************
:p.
The :#x.SY_START:e#x. function creates a new symbol table and returns
its identifier in the :#xi.sy_token:e#xi. parameter. Optional
parameters specify table characteristics such as the size of the
value portion of a symbol and whether searches for symbols are
case-sensitive.
.*
:mac.
SY_START ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.sy_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.sy_token:ehp1.&rbt.
  &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
  &lbt.,VALUESIZE=&lbr.:hp1.valuesize:ehp1. | :us.0:eus.&rbr.&rbt.
  &lbt.,HASHSIZE=&lbr.:hp1.hashsize:ehp1. | :us.101:eus.&rbr.&rbt.
  &lbt.,MEMINCR=&lbr.:hp1.memincr:ehp1. | :us.4096:eus.&rbr.&rbt.
  &lbt.,CAPS=&lbr.:hp2.ON:ehp2.|:hp2.:us.OFF:eus.:ehp2.&rbr.&rbt.
:emac.
:callx.
CALLX &cont.
:hp1.sy_epa:ehp1.,(:hp1.sy_token:ehp1.,&amp.SY_START,&cont.
:hp1.esva:ehp1.,&lbt.:hp1.valuesize:ehp1.&rbt.,&cont.
&lbt.:hp1.caps:ehp1.&rbt.,&lbt.:hp1.hashsize:ehp1.&rbt.,
              &lbt.:hp1.memincr:ehp1.&rbt.)
:ecallx.
.*****
:plist.
:pLt.id_name
:pLd.specifies the name of a service processor identifier created by the
:#x.SY_ID:e#x. macro which will be used by the :#x.SY_DELETE:e#x.
macro to automatically obtain values for :#xi.sy_epa:e#xi.
and
:#xi.sy_token:e#xi.. This parameter is required unless both
:#xi.sy_epa:e#xi. and :#xi.sy_token:e#xi. are
specified.
:pLt.sy_epa
:pLd.specifies the label of a fullword that contains the entry point
address of an already-started Symbol Manager service processor.  The
value specified by :#xi.sy_epa:e#xi.  overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:pLt.sy_token
:pLd.specifies the label of a fullword that contains the value returned
by :#x.SY_START:e#x. for the
:#xi.sy_token:e#xi. parameter.  The value specified by
:#xi.sy_token:e#xi. overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:pLt.esva
:pLd.specifies the label of a fullword containing the address of an
Environment Support Vector.
:pLt.valuesize
:pLd.specifies the label of a fullword containing the length of the
value portion of symbols in the table being created.  This value
defaults to :#xb.0:e#xb., meaning that no information is attached
to symbols in the table.
:pLt.caps
:pLd.specifies the label of a string equal to either 'ON' or 'OFF',
which indicates whether or not symbol-table searches should be
case-sensitive ('OFF') or not ('ON').
:pLt.hashsize
:pLd.Specifies the number of hash-table entries that should be reserved
for the symbol table being created.  For maximum efficiency, this number
should be approximately 80% or more of the maximum number of symbols
that will reside in the table at any given time.
:pLt.memincr
:pLd.The Symbol Manager uses the Memory Manager to obtain all symbol
table storage, which is maintained within a single Memory Manager heap.
This parameter is passed to the :#x.MM_START:e#x. function when the heap
is created, and should be large enough to avoid excessive system calls
for obtaining storage.  An approximate value can be calculated as
follows:
:ol.
:li.The size of a symbol table entry is
12+:#xi.valuesize:e#xi.+avg_length, where avg_length is the average
length of a symbol's name.
:li.If the maximum number of possible symbols is known, simply calculate
the total space they will require and use that.
:li.If the maximum number of possible symbols can vary wildly from
execution to execution, try to choose a value for :#xi.memincr:e#xi.
that will be large enough to satisfy a majority of cases with a single
increment of storage.  In cases where more symbols are used, the heap
will expand as needed.
:eol.
:eplist.
:efunc.
.**********************************************************************
:func name='SY_TERMINATE'.End a Symbol Manager Session
.**********************************************************************
:p.
The :#x.SY_TERMINATE:e#x. function deletes the symbol table identified
by the :#xi.sy_token:e#xi. parameter, automatically deleting all symbols
currently installed and releasing all storage obtained for that symbol
table.
:mac.
SY_TERMINATE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.sy_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.sy_token:ehp1.&rbt.
:emac.
:callx.
CALLX :hp1.sy_epa:ehp1.,(:hp1.sy_token:ehp1.,&amp.SY_TERMINATE)
:ecallx.
:efunc.
.**********************************************************************
:func name='SY_UPDATE_VALUE'.Replace a Symbol's Value
.**********************************************************************
:p.
The :#x.SY_UPDATE_VALUE:e#x. function replaces the value of the
specified symbol.
:mac.
SY_UPDATE_VALUE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.sy_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.sy_token:ehp1.&rbt.

  ,TOKEN=:hp1.token:ehp1
  ,VALUE=:hp1.value:ehp1.
:emac.
:callx.
CALLX :hp1.sy_epa:ehp1.,(:hp1.sy_token:ehp1.,&amp.SY_UPDATE_VALUE,&cont.
:hp1.token:ehp1.,:hp1.value:ehp1.)
:ecallx.
.*****
:plist.
:pLt.token
:pLd.a fullword value returned by the :#xi.token:e#xi.  parameter of the
:#x.SY_INSTALL:e#x. or :#x.SY_LOOKUP:e#x. function.
:pLt.value
:pLd.an application defined area containing the new value to assign
to the symbol.  The data referred to by :#xi.value:e#xi. must be
:#xi.valuesize:e#xi. bytes in length.  See the :#x.SY_START:e#x.
function for an explanation of the :#xi.valuesize:e#xi. parameter.
:eplist.
:efunc.
