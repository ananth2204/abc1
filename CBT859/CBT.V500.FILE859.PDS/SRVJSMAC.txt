*---------------------------------------------------------------------*
*  Copyright 2011 by Clemson University Research Foundation           *
*                                                                     *
*  Licensed under the Apache License, Version 2.0 (the "License");    *
*  you may not use this file except in compliance with the License.   *
*  You may obtain a copy of the License in this library as member     *
*  $LICENSE, or from                                                  *
*                                                                     *
*      http://www.apache.org/licenses/LICENSE-2.0                     *
*                                                                     *
*  Unless required by applicable law or agreed to in writing,         *
*  software distributed under the License is distributed on an "AS    *
*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either    *
*  express or implied.  See the License for the specific language     *
*  governing permissions and limitations under the License.           *
*---------------------------------------------------------------------*
 TITLE 'SRVJSMAC: Jobstream Handler symbols && macros.'
*---------------------------------------------------------------------*
*
*  Copy File:  SRVJSMAC
*
*  Purpose:    Symbols and macros for the Jobstream Handler.
*
*  Description: See "Service Processors User's Guide and Reference"
*
*  Change
*  History:    01/02/91 MJM - New
*
*---------------------------------------------------------------------*
*
***********************************************************************
***********************************************************************
**                                                                   **
**                   SRVJS Symbols & Macros                          **
**                                                                   **
***********************************************************************
***********************************************************************
*
* Global declarations for all Jobstream Handler symbols.
*
 GBLC &JOBSTREAM_HANDLER
 GBLC &MVS_JOBSTREAM_HANDLER
*
 GBLA &JS_START,&JS_TERMINATE
 GBLA &JS_GET_FEEDBACK
 GBLA &JS_SET_OPTION,&JS_APPEND_LINE
 GBLA &JS_SUBMIT,&JS_SAVE
*
 GBLA &JS_SUCCESS
 GBLA &JS_INVALID_FUNCTION
 GBLA &JS_ENVIRONMENT_SUPPORT_ERROR
 GBLA &JS_STRING_HANDLER_ERROR
 GBLA &JS_WRONG_NUMBER_OF_PARMS
 GBLA &JS_INVALID_PARAMETER
 GBLA &JS_OUT_OF_MEMORY
 GBLA &JS_LINE_TRUNCATED
 GBLA &JS_NO_MORE_JOBS
 GBLA &JS_DATA_LOST
 GBLA &JS_NEW_JOB    (APPEND? or just SUBMIT?)
*
* Entry Point name for the Jobstream handler service processor.
*
&JOBSTREAM_HANDLER                      SETC     '''SRVJS   '''
&MVS_JOBSTREAM_HANDLER                  SETC     '''SRVJSMVS'''
*
* Function codes.
*
&JS_START                               SETA     1
&JS_TERMINATE                           SETA     2
&JS_GET_FEEDBACK                        SETA     3
&JS_SET_OPTION                          SETA     4
&JS_APPEND_LINE                         SETA     5
&JS_SUBMIT                              SETA     6
&JS_SAVE                                SETA     7
*
* Return codes.
*
&JS_SUCCESS                             SETA    0
&JS_INVALID_FUNCTION                    SETA    0
&JS_INVALID_PARAMETER                   SETA    0
&JS_ENVIRONMENT_SUPPORT_ERROR           SETA    1
&JS_STRING_HANDLER_ERROR                SETA    2
&JS_STORAGE_NOT_AVAILABLE               SETA    3
&JS_JCL_PROBLEM                         SETA    4
&JS_INTERNAL_ERROR                      SETA    5
 DEFUCOND MACRO=SRV##RC,NAME=JS_SUCCESS
 DEFUCOND MACRO=SRV##RC,NAME=JS_INVALID_FUNCTION
 DEFUCOND MACRO=SRV##RC,NAME=JS_ENVIRONMENT_SUPPORT_ERROR
 DEFUCOND MACRO=SRV##RC,NAME=JS_STRING_HANDLER_ERROR
 DEFUCOND MACRO=SRV##RC,NAME=JS_STORAGE_NOT_AVAILABLE
 DEFUCOND MACRO=SRV##RC,NAME=JS_JCL_PROBLEM
 DEFUCOND MACRO=SRV##RC,NAME=JS_INTERNAL_ERROR
                              EJECT
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   JS_ID                                                      *
*                                                                     *
* Purpose: Establish default values for a specific service processor  *
*          and associate them with the specified ID name. The values  *
*          are stored in the following created global variables:      *
*                                                                     *
* Variable Name                     Description                       *
* -------------  ---------------------------------------------------- *
* #$&ID.$#IDMAC  Name of macro that created the ID: JS_ID.            *
* #$&ID.$#ESID   Service processor's Environment Support ID.          *
* #$&ID.$#EPN    Tag for Service processor's Entry Point Name.        *
* #$&ID.$#EPA    Tag for Service processor's Entry Point Address.     *
* #$&ID.$#TKN    Tag for Service processor's Entry Point Token.       *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         JS_ID &ID=,&ESVA=,&SPEPNAME=,&SPEPA=,&SPTOKEN=,&ESID=
         LCLC  &L_EPNAME
         GBLC  &JOBSTREAM_HANDLER
.*
.* If no EPNAME was specified, use the generic name.
.*
&L_EPNAME SETC '&SPEPNAME'
          AIF  ('&L_EPNAME' NE '').PAST_EPN
&L_EPNAME SETC '&JOBSTREAM_HANDLER'
.PAST_EPN ANOP
.*
.* Invoke SRV##ID to create globals used by all ID's.
.*
         SRV##ID SET,                                                  +
               ID=&ID.,IDMAC=JS_ID,ESID=&ESID.,SPEPNAME=&L_EPNAME,     +
               SPEPA=&SPEPA,SPTOKEN=&SPTOKEN.
         MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   JS_START                                                   *
* Purpose: Generate code to start a new Jobstream.                    *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         JS_START &ID=,&SPEPA=,&SPTOKEN=,&ESVA=,&FEEDBACKA=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &JS_START                           SETA in open code.
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN,ESVA),                    +
               ID=&ID,IDMAC=JS_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN,       +
               ESVA=&ESVA.
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Generate code to START the jobstream handler.
.*
         ##PLIST START                   | Begin parmlist.
         ##PLIST PARM,&#_IDTKN           |   Exit's token.
         ##PLIST PARM,&JS_START          |   Function code.
         AIF     ('&FEEDBACKA' EQ '').CALLX  ..if no feedback, skip.
         ##PLIST PARM,&FEEDBACKA         |   Specified FEEDBACK ptr.
.CALLX   ##PLIST END,VL                  | Mark end of plist.
         CALLX   &#_IDEPA                | Invoke Jobstream Handler.
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   JS_TERMINATE                                               *
* Purpose: Generate code to terminate a Jobstream handler session.    *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         JS_TERMINATE &ID=,&SPEPA=,&SPTOKEN=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &JS_TERMINATE              SETA in open code.
.*
.* Obtain service processor ID values and terminate Jobstream handler.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=JS_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         CALLX &#_IDEPA,(&#_IDTKN,&JS_TERMINATE),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   JS_GET_FEEDBACK                                            *
* Purpose: Obtain address of feedback area.                           *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         JS_GET_FEEDBACK &ID=,&SPEPA=,&SPTOKEN=,&FEEDBACKA=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &JS_GET_FEEDBACK                    SETA in open code.
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=JS_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF   ('&#_IDCODE' NE 'SUCCESS').MEXIT
         AIF   ('&FEEDBACKA' NE '').PAST_FB
         MNOTE 8,'FEEBACKA is a required parameter.'
         MEXIT
.PAST_FB ANOP
.*
.* Generate code to obtain the feedback area's address.
.*
         ##PLIST START                   | Begin parmlist.
         ##PLIST PARM,&#_IDTKN           |   Exit's token.
         ##PLIST PARM,&JS_GET_FEEDBACK   |   Function code.
         ##PLIST PARM,&FEEDBACKA         |   Specified FEEDBACK ptr.
.CALLX   ##PLIST END,VL                  | Mark end of plist.
         CALLX   &#_IDEPA                | Invoke Jobstream Handler.
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   JS_SET_OPTION                                              *
* Purpose: Set a jobstream-handler option.                            *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         JS_SET_OPTION &ID=,&SPEPA=,&SPTOKEN=,&OPTION=,&VALUE=
         GBLA  &JS_SET_OPTION                  SETA in open code.
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         LCLC  &L_ADDR,&L_LEN
         LCLA  &I,&L
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=JS_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Decode the OPTION= keyword to get an address and length.
.*
              AIF ('&OPTION' EQ '').NO_OPTION
              AIF (N'&OPTION EQ 2).OPT_TAGLEN
              AIF (N'&OPTION EQ 1).OPT_TAGONLY
              MNOTE 8,'Too many subparameters for OPTION keyword.'
              MEXIT
.OPT_TAGLEN   ANOP
&L_ADDR       SETC '&OPTION(1)'           | Set addr.
&L_LEN        SETC '&OPTION(2)'           | Set len.
              AGO  .PAST_OPTION           |
.OPT_TAGONLY  ANOP
              AIF ('&OPTION'(1,1) EQ '''').OPT_LITERAL
&L_ADDR       SETC '&OPTION'              | Set addr to tag_name.
&L_LEN        SETC '=A(L''&OPTION)'       | Set len to L'tag_name.
              AGO  .PAST_OPTION           |
.OPT_LITERAL  ANOP                        |
&L_ADDR       SETC '&OPTION'              | Set addr to actual literal.
&L            SETA 0                      | Length counter = 0.
&I            SETA 2                      | Index counter -> past '.
.OPT_LOOP     AIF  (&I GE K'&L_ADDR).OPT_ELOOP       Loop over message.
              AIF  ('&L_ADDR'(&I,1) NE '''').OPT_TXT If doubled quotes.
&I            SETA &I+1                   |            Advance past '.
.OPT_TXT      ANOP                        |          EndIf.
&L            SETA &L+1                   |   Add one to length.
&I            SETA &I+1                   |   Advance to next position.
              AGO  .OPT_LOOP              | End of counting loop.
.OPT_ELOOP    ANOP                        |
&L_LEN        SETC '&L'                   | Set length parameter.
              AGO  .PAST_OPTION
.NO_OPTION    MNOTE 8,'OPTION is a required keyword.'
              MEXIT
.PAST_OPTION  ANOP
.*
.* If VALUE= was specified, make sure it is VALUE=(tag,length)
.*
         AIF  ('&VALUE' EQ '').PAST_VALUE
         AIF  (N'&VALUE EQ 2).PAST_VALUE
         MNOTE 8,'VALUE must be specified as VALUE=(tag,length)'
         MEXIT
.PAST_VALUE ANOP
.*
.* Generate the SET_OPTION call statement.
.*
         ##PLIST START                   | Begin parmlist.
         ##PLIST PARM,&#_IDTKN           |   Exit's token.
         ##PLIST PARM,&JS_SET_OPTION     |   Function code.
         ##PLIST PARM,&L_ADDR            |   Option's name.
         ##PLIST PARM,&L_LEN             |   Option name's length.
         AIF     ('&VALUE' EQ '').CALLX    ..if no value, skip.
         ##PLIST PARM,&VALUE(1)          |   Specified value.
         ##PLIST PARM,&VALUE(2)          |   Value's length.
.CALLX   ##PLIST END,VL                  | Mark end of plist.
         CALLX   &#_IDEPA                | Invoke Jobstream Handler.
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   JS_APPEND_LINE                                             *
* Purpose: Add a new line to jobstream being constructed.             *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         JS_APPEND_LINE &ID=,&SPEPA=,&SPTOKEN=,&LINE=
         GBLA  &JS_APPEND_LINE                 SETA in open code.
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         LCLC  &L_ADDR,&L_LEN
         LCLA  &I,&L
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=JS_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Decode the LINE= keyword to get an address and length.
.*
              AIF ('&LINE' EQ '').NO_LINE
              AIF (N'&LINE EQ 2).LIN_TAGLEN
              AIF (N'&LINE EQ 1).LIN_TAGONLY
              MNOTE 8,'Too many subparameters for LINE keyword.'
              MEXIT
.LIN_TAGLEN   ANOP
&L_ADDR       SETC '&LINE(1)'             | Set addr.
&L_LEN        SETC '&LINE(2)'             | Set len.
              AGO  .PAST_LINE             |
.LIN_TAGONLY  ANOP
              AIF ('&LINE'(1,1) EQ '''').LIN_LITERAL
&L_ADDR       SETC '&LINE'                | Set addr to tag_name.
&L_LEN        SETC '=A(L''&LINE)'         | Set len to L'tag_name.
              AGO  .PAST_LINE             |
.LIN_LITERAL  ANOP                        |
&L_ADDR       SETC '&LINE'                | Set addr to actual literal.
&L            SETA 0                      | Length counter = 0.
&I            SETA 2                      | Index counter -> past '.
.LIN_LOOP     AIF  (&I GE K'&L_ADDR).LIN_ELOOP       Loop over message.
              AIF  ('&L_ADDR'(&I,1) NE '''').LIN_TXT If doubled quotes.
&I            SETA &I+1                   |            Advance past '.
.LIN_TXT      ANOP                        |          EndIf.
&L            SETA &L+1                   |   Add one to length.
&I            SETA &I+1                   |   Advance to next position.
              AGO  .LIN_LOOP              | End of counting loop.
.LIN_ELOOP    ANOP                        |
&L_LEN        SETC '&L'                   | Set length parameter.
              AGO  .PAST_LINE
.NO_LINE      MNOTE 8,'LINE is a required keyword.'
              MEXIT
.PAST_LINE    ANOP
.*
.* Generate the APPEND_LINE call statement.
.*
         CALLX &#_IDEPA,(&#_IDTKN,&JS_APPEND_LINE,&L_ADDR,&L_LEN),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   JS_SUBMIT                                                  *
* Purpose: Submit the jobstream to the system to execution.           *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         JS_SUBMIT &ID=,&SPEPA=,&SPTOKEN=,&JOBNAME=,&JOBID=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &JS_SUBMIT SETA in open code.
.*
.* Obtain service processor ID values and invoke Jobstream Handler.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=JS_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Generate code to invoke the JS_SUBMIT function.
.*
         CALLX &#_IDEPA,(&#_IDTKN,&JS_SUBMIT,&JOBNAME,&JOBID),VL
         ##PLIST START                   | Begin parmlist.
         ##PLIST PARM,&#_IDTKN           |   Exit's token.
         ##PLIST PARM,&JS_SUBMIT         |   Function code.
         AIF     ('&JOBID' NE '').JOBID
         AIF     ('&JOBNAME' EQ '').NONAME
         ##PLIST PARM,&JOBNAME           |   Returned JOBNAME.
         AGO     .CALLX
.JOBID   ##PLIST PARM,&JOBNAME           |   Returned JOBNAME.
         ##PLIST PARM,&JOBID             |   Returned JOBID.
.CALLX   ##PLIST END,VL                  | Mark end of plist.
         CALLX   &#_IDEPA                | Invoke Jobstream Handler.
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   JS_SAVE                                                    *
* Purpose: Save the jobstream to a file.                              *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         JS_SAVE &ID=,&SPEPA=,&SPTOKEN=,&FILE=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &JS_SAVE SETA in open code.
.*
.* Obtain service processor ID values and invoke Jobstream Handler.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=JS_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Generate code to invoke the JS_SAVE function.
.*
         CALLX &#_IDEPA,(&#_IDTKN,&JS_SAVE,&JOBNAME,&JOBID),VL
         ##PLIST START                   | Begin parmlist.
         ##PLIST PARM,&#_IDTKN           |   Exit's token.
         ##PLIST PARM,&JS_SAVE           |   Function code.
         AIF     ('&JOBID' NE '').JOBID
         AIF     ('&JOBNAME' EQ '').NONAME
         ##PLIST PARM,&JOBNAME           |   Returned JOBNAME.
         AGO     .CALLX
.JOBID   ##PLIST PARM,&JOBNAME           |   Returned JOBNAME.
         ##PLIST PARM,&JOBID             |   Returned JOBID.
.CALLX   ##PLIST END,VL                  | Mark end of plist.
         CALLX   &#_IDEPA                | Invoke Jobstream Handler.
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   JS_FEEDBACK                                                *
* Purpose: Mapping area for jobstream handler feedback area.          *
*                                                                     *
*---------------------------------------------------------------------*
                  MACRO
&LABEL            JS_FEEDBACK &DSECT=YES,&ID=JS_FB_
                  LCLC  &NAME
&NAME             SETC  'JS_FB_START' AIF   ('&LABEL' EQ '').PAST_LABEL
&NAME             SETC  '&LABEL'
.PAST_LABEL       AIF   ('&DSECT' EQ 'YES').GEN_DSECT
&NAME             DS    0F         | Jobstream-handler FEEDBACK area:
                  AGO .GEN_FIELDS
.GEN_DSECT        ANOP
&NAME             DSECT            | Jobstream-handler FEEDBACK area:
.GEN_FIELDS       ANOP
&ID.START         EQU *            | Start of FEEDBACK area:
&ID.STRING        DS  CL256        |   Entire area as 256-byte string.
                  ORG &ID.START    |   Remap fields from the start.
&ID.REASON        DS  F            |   Reason-code.
&ID.REASON1       EQU 0            |     No information.
&ID.REASON2       EQU 1            |     No information.
&ID.SEQUENCE      DS  F            |   Job sequence # (1,2,3,etc).
&ID.JOBNAME       DS  CL8          |   Current JOBNAME.
&ID.JOBID         DS  CL8          |   Current JOB Identifier.
&ID.MSGLEN        DS  H            |   Message length.
&ID.MSGTEXT       DS  CL132        |   Message text.
                  ORG ,            |   Get to correct offset.
&ID.LENGTH        EQU *-&ID.START  | Length of feedback area.
                  MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   JS_PARMLIST                                                *
* Purpose: Generate Jobstream handler's parameter list.               *
*                                                                     *
*---------------------------------------------------------------------*
                  MACRO
&LABEL            JS_PARMLIST &DSECT=YES,&ID=JS_PRM_
                  LCLC  &NAME
&NAME             SETC  'JS_PARMLIST'
                  AIF   ('&LABEL' EQ '').PAST_LABEL
&NAME             SETC  '&LABEL'
.PAST_LABEL       ANOP
                  AIF   ('&DSECT' EQ 'YES').GEN_DSECT
&NAME             DS    0F         | Jobstream-handler Parameter List:
                  AGO .GEN_FIELDS
.GEN_DSECT        ANOP
&NAME             DSECT            | Jobstream-handler Parameter List:
.GEN_FIELDS       ANOP
&ID.START         EQU *            |   Start of parameter list.
&ID.TOKEN         DS  A            |   Token := PWA Base Address.
&ID.FUNCTIONCODE  DS  A            |   Function to be performed.
&ID.SPECIFIC      EQU *            |   Function-specific parameters.
                  ORG &ID.SPECIFIC |   JS_START parameters:
&ID.S_ESVA        DS  A            |     Environment support vector.
&ID.S_FEEDBACKA   DS  A            |     Returned ptr to feedback area.
                  ORG &ID.SPECIFIC |   JS_GET_FEEDBACK parameters:
&ID.GF_FEEDBACKA  DS  A            |     Returned ptr to feedback area.
                  ORG &ID.SPECIFIC |   JS_SET_OPTION parms:
&ID.SO_NAME       DS  A            |     Option name.
&ID.SO_NAME_LEN   DS  A            |     Name's length (fullword).
&ID.SO_VALUE      DS  A            |     Specified value or null ptr.
&ID.SO_VALUE_LEN  DS  A            |     Length of specified value.
                  ORG &ID.SPECIFIC |   JS_APPEND_LINE parms:
&ID.AL_LINE       DS  A            |     Text of output line.
&ID.AL_LINE_LEN   DS  A            |     Length of output line.
                  ORG &ID.SPECIFIC |   JS_SUBMIT parms:
                  ORG &ID.SPECIFIC |   JS_SAVE parms:
&ID.SA_NAME       DS  A            |     File name to receive data.
&ID.SA_NAME_LEN   DS  A            |     Length of file name.
&ID.SA_OPTION     DS  A            |     APPEND|REPLACE option.
                  ORG ,            | Get to correct offset.
&NAME._L          EQU *-&ID.START  | Length of jobstream handler plist.
                  MEND
