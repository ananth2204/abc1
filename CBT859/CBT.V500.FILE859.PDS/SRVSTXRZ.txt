*---------------------------------------------------------------------*
*  Copyright 2011 by Clemson University Research Foundation           *
*                                                                     *
*  Licensed under the Apache License, Version 2.0 (the "License");    *
*  you may not use this file except in compliance with the License.   *
*  You may obtain a copy of the License in this library as member     *
*  $LICENSE, or from                                                  *
*                                                                     *
*      http://www.apache.org/licenses/LICENSE-2.0                     *
*                                                                     *
*  Unless required by applicable law or agreed to in writing,         *
*  software distributed under the License is distributed on an "AS    *
*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either    *
*  express or implied.  See the License for the specific language     *
*  governing permissions and limitations under the License.           *
*---------------------------------------------------------------------*
SRVSTXRZ     TITLE 'String Handler Exercise Program'
*---------------------------------------------------------------------*
*
*  Copyright (C) 1989 Clemson University
*
*  Program     SRVXRSTR
*
*  Abstract    This program is a test suite for the String Handler.  It
*              calls the String Handler repeatedly with different
*              functions and values to exercise as much code as
*              possible.
*
*  To use, first assemble using %ASM and then run this job:
*
*  //SRVSTXRZ JOB
*  //RUNST    EXEC PGM=SRVSTXRZ
*  //STEPLIB  DD DISP=SHR,DSN=SYSTEMS.SRV.LOAD
*
*  Output is in the JOB's messages log.
*
*---------------------------------------------------------------------*
  EJECT
  COPY SMSYMS
  COPY SRVESMAC
  COPY SRVSTMAC
  BLOCK TYPE=PROGRAM,NAME=SRVXRSTR,OPTIONS=(*PWA,XA),                  +
               AMODE=31,RMODE=ANY,BASEREG=(R12,R11),SUBOPTS=(*SWA)
*---------------------------------------------------------------------*
*   Load and start Environment Support and the String Handler sessions.
*---------------------------------------------------------------------*
    ES_ID ID=ES,SPEPNAME=&MVS_ENVIRONMENT_SUPPORT
    ST_ID ID=ST,SPEPNAME=&STRING_HANDLER,SIZELENGTH=4,                 +
               STRING=&PWA.STRING,RESULTLEN=&PWA.STRING_LEN
    ES_MVS_LOAD    ID=ES
    ES_START       ID=ES
    ES_LOAD_MODULE ID=ES,SPID=ST
    ST_START       ID=ST
*
    ES_GET_FORMATTED_TIME ID=ES,JULIAN=&PWA.JULIAN
    ES_GET_FORMATTED_TIME ID=ES,GREGORIAN=&PWA.GREGORIAN
    ES_GET_FORMATTED_TIME ID=ES,TIME=&PWA.TIME
    ES_GET_FORMATTED_TIME ID=ES,TIME=&PWA.TIME,JULIAN=&PWA.JULIAN
    ES_GET_FORMATTED_TIME ID=ES,TIME=&PWA.TIME,GREGORIAN=&PWA.GREGORIAN
    ES_GET_FORMATTED_TIME ID=ES,GREGORIAN=&PWA.GREGORIAN,              +
               JULIAN=&PWA.JULIAN
*---------------------------------------------------------------------*
*   Invoke the ST_STRING_TO_INTEGER and ST_INTEGER_TO_STRING functions.
*---------------------------------------------------------------------*
    ST_STRING_TO_INTEGER ID=ST,STRING='  -   987654321    ',           +
               INTEGER=&PWA.INTEGER
    ERREXIT (TREG,R15,NZ)
    ST_INTEGER_TO_STRING ID=ST,INTEGER=&PWA.INTEGER
    ERREXIT (TREG,R15,NZ)
    ES_DISPLAY_MESSAGE   ID=ES,MESSAGE='Converted INTEGER:'
    ES_DISPLAY_MESSAGE   ID=ES,MESSAGE=(&PWA.STRING,&PWA.STRING_LEN)
*---------------------------------------------------------------------*
*   Invoke the ST_FORMAT macro directly several times to make sure it
*   is doing the right checks and generating the right code.
*---------------------------------------------------------------------*
*   ST_FORMAT ID=ST,....
*---------------------------------------------------------------------*
*   The macro below is for invoking ST_FORMAT2 by way of a subroutine.
*---------------------------------------------------------------------*
            MACRO
            FMT &CONTROL,&SOURCE
            GBLC    &PWA
            LCLC    &OLDLOC
            LCLA    &N
&OLDLOC     SETC    '&SYSLOC'
CTLSTR      LOCTR
C_L&SYSNDX  DC     AL4(L'C_T&SYSNDX)
C_T&SYSNDX  DC     C&CONTROL
&OLDLOC     LOCTR
&N          SETA      N'&SOURCE
            AIF       (&N EQ 0).CALLSUB
            PLIST     &SOURCE,PL=(&PWA.ARGLIST,20)
.CALLSUB    CALLSUB   FORMAT,(C_T&SYSNDX,C_L&SYSNDX,&PWA.ARGLIST,&N)
            MEND
*---------------------------------------------------------------------*
* FILL Keyword string-format tests.
*---------------------------------------------------------------------*
 FMT  '{40CL? F( .)}{CL?}',('Name',4,'Michael J Miller',16)
 FMT  '{40CL? F(" .")}{CL?}',('Address',7,'1401 Garden Circle',18)
 FMT  '{40CL? F(C"-FILL")}{CL?}',('City',4,'Seneca',6)
 FMT  '{40CL? F(X"6040")}{CL?}',('State',5,'S.C.',4)
 FMT  '{40CL? FILL(?L2)}{CL?}',('Country',7,' $','America',7)
 FMT  '{40CL? FILL(?L?)}{CL?}',('Planet',6,'-where',6,'Earth',5)
*---------------------------------------------------------------------*
* General string-format tests.
*---------------------------------------------------------------------*
 FMT  'No format-specifications in this string.'
 FMT  '{///}at{@?} either!',&PWA.STRING_LEN
 FMT  'EveryThing: {{ xxx {?2.?@+?CL?1 TRIM CENTER}{@15}-->{@}.',      +
               (=AL2(30),15,=A(-1),'<<>> ',=AL1(5))
*---------------------------------------------------------------------*
* TYPE(Address) string-format tests.
*---------------------------------------------------------------------*
 FMT  '{A}',(=A(SRVXRSTR))
 FMT  '{0A}',(=A(SRVXRSTR))
 FMT  '{0AL2}',(=A(SRVXRSTR))
*---------------------------------------------------------------------*
* TYPE(Bit string) string-format tests.
*---------------------------------------------------------------------*
 FMT  '{B}',(=A(SRVXRSTR))
 FMT  '{BL2}',(=A(SRVXRSTR))
*---------------------------------------------------------------------*
* TYPE(Character string) string-format tests.
*---------------------------------------------------------------------*
 FMT  '{C}',('X')
 FMT  '{CL?}',('Substitution Text',17)
 FMT  '{CL8 T}<',('MICHAEL ')
 FMT  'Unrecognized parameter beginning with "{.30CL? T}".',           +
               ('Blah, Blah, Blah',16)
 FMT  'No value supplied for option {CL? T}',('/GOOBER        ',15)
*---------------------------------------------------------------------*
* TYPE(Signed Integer) string-format tests.
*---------------------------------------------------------------------*
 FMT  '{I}',(987654)
 FMT  '{05IL2}',(=H'1')
 FMT  '{02I}/{02I}/{02I}',(9,18,89)
 FMT  '{02I}:{02I}:{02I}',(10,42,54)
 FMT  '{02I}.{03I}',(89,271)
 FMT  '{I RELATIVE}',(431)
 FMT  '{I RELATIVE}',(672)
 FMT  '{I RELATIVE}',(23)
 FMT  '{I RELATIVE}',(874)
 FMT  '{I RELATIVE}',(75)
 FMT  'X"FFFFFFFF" = {I}',(=X'FFFFFFFF')
 FMT  'X"80000000" = {I}',(=X'80000000')
 FMT  'X"7FFFFFFF" = {I}',(=X'7FFFFFFF')
 FMT  'X"CE91FE20" = {I}',(=X'CE91FE20')
 FMT  'FL1(255) = {IL1}',(=X'FFFFFFFF')
 FMT  'FL2(65535) = {IL2}',(=X'FFFFFFFF')
 FMT  'FL3(16777215) = {IL3}',(=X'FFFFFFFF')
*---------------------------------------------------------------------*
* TYPE(Unsigned Integer) string-format tests.
*---------------------------------------------------------------------*
 FMT  'F"987654" = {U}',(987654)
 FMT  'X"FFFFFFFF" 4294967295 = {U}',(=X'FFFFFFFF')
 FMT  'X"80000000" 2147483648 = {U}',(=X'80000000')
 FMT  'X"7FFFFFFF" 2147483647 = {U}',(=X'7FFFFFFF')
 FMT  'X"CE91FE20" 3465674272 = {U}',(=X'CE91FE20')
 FMT  'FL1(255) = {UL1}',(=X'FFFFFFFF')
 FMT  'FL2(65535) = {UL2}',(=X'FFFFFFFF')
 FMT  'FL3(16777215) = {UL3}',(=X'FFFFFFFF')
*---------------------------------------------------------------------*
* TYPE(Hex Character) string-format tests.
*---------------------------------------------------------------------*
 FMT  'F"987654" = {XL4}',(987654)
 FMT  'X"FFFFFFFF" = {XL4}',(=X'FFFFFFFF')
 FMT  'X"80000000" = {XL4}',(=X'80000000')
 FMT  'X"7FFFFFFF" = {XL4}',(=X'7FFFFFFF')
 FMT  'X"CE91FE20" = {XL4}',(=X'CE91FE20')
 FMT  'FL1(255) = {XL1}',(=X'FFFFFFFF')
 FMT  'FL2(65535) = {XL2}',(=X'FFFFFFFF')
 FMT  'FL3(16777215) = {XL3}',(=X'FFFFFFFF')
*---------------------------------------------------------------------*
* MULTIPLES and CSV tests.
*---------------------------------------------------------------------*
 FMT  'VOLLIST = {CL6M5 CSV}.',('A00001A00002A00003A00004A00005')
 FMT  'VOLLIST = {CL6M5 CSV T}.',('SHORT VOL   SERS  TRIM  CSV   ')
*---------------------------------------------------------------------*
* QST - Quoted string output.
*---------------------------------------------------------------------*
 FMT  'QSTRING = {CL12 QST T}.',('What''s up?  ')
  ENDBLK BLOCK=SRVXRSTR
*---------------------------------------------------------------------*
*
*  Subroutine: FORMAT(Control,Length,ArgumentList,ArgumentCount)
*
*---------------------------------------------------------------------*
  BLOCK TYPE=SUBROUTINE,NAME=FORMAT
   LM                  R3,R6,0(R1)
   ES_DISPLAY_MESSAGE  ID=ES,MESSAGE=' '
   ES_DISPLAY_MESSAGE  ID=ES,MESSAGE=((R3),(R4))
   ST_FORMAT           ID=ST,CONTROL=((R3),(R4)),SOURCELIST=((R5),(R6))
   IF                  (TREG,R15,NZ)
     ES_DISPLAY_DEBUG_INFO  ID=ES
   ENDIF
   ES_DISPLAY_MESSAGE  ID=ES,MESSAGE=(&PWA.STRING,&PWA.STRING_LEN)
  ENDBLK BLOCK=FORMAT
*---------------------------------------------------------------------*
*
*  Errexit
*
*---------------------------------------------------------------------*
  BLOCK TYPE=ERREXIT
    ES_DISPLAY_DEBUG_INFO ID=ES
  ENDBLK
                   EJECT
                   PSD
                   LTORG
                   ENDPSD
                   PWA
&PWA.R14           DS    F
&PWA.ARGCOUNT      DS    F           Number of arguments in ARGLIST.
&PWA.ARGLIST       DS    CL(20*4)    Room for 20 arguments.
&PWA.INTEGER       DS    F
&PWA.STRING        DS    CL80
&PWA.STRING_LEN    DS    F
&PWA.GREGORIAN     DS    CL8
&PWA.JULIAN        DS    CL8
&PWA.TIME          DS    CL11
                   ENDPWA
                   END
