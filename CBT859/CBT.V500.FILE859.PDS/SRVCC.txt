*---------------------------------------------------------------------*
*  Copyright 2011 by Clemson University Research Foundation           *
*                                                                     *
*  Licensed under the Apache License, Version 2.0 (the "License");    *
*  you may not use this file except in compliance with the License.   *
*  You may obtain a copy of the License in this library as member     *
*  $LICENSE, or from                                                  *
*                                                                     *
*      http://www.apache.org/licenses/LICENSE-2.0                     *
*                                                                     *
*  Unless required by applicable law or agreed to in writing,         *
*  software distributed under the License is distributed on an "AS    *
*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either    *
*  express or implied.  See the License for the specific language     *
*  governing permissions and limitations under the License.           *
*---------------------------------------------------------------------*
SRVCC     TITLE 'Example:  Cheap Calculator Service Processor'
*---------------------------------------------------------------------*
*
*  Copyright (C) 2011 Clemson University
*
*  Program     SRVCC
*
*  Abstract    This code is intended to show how service processors
*              are structured and what the major pieces are, without
*              any pesky meaningful, functional code in the way.
*
*  Inputs:
*      Parameters  On entry R1 points to the following parameter list:
*      Files         Standard service processor parameter list, see
*                    dsect "parmlist" below.
*      Other       None
*
*  Outputs:
*      Returncodes See errexits, member srvccmac
*      Messages    None
*      Files       None
*      Other       None
*
*  PROGRAM     Reentrant, problem key and state, standard linkage,
*  ATTRIBUTES  non-authorized, AMODE(24), RMODE(24)
*
*  Special     See related documentation for description of
*  Notes       components and how they work together.
*              Requires
*
*  Change
*  History     10/17/11 jcb - Added documentation block
*              __/__/__ ___
*              __/__/__ ___
*
*  Method of   Standard service processor.
*  Operation
*
*
*---------------------------------------------------------------------*
         EJECT
 SMLIST CONVERT=YES                   |
 title "SRVCC -- The Cheap Calculator Service Processor"
 print off                            |
 copy  smsyms                         | Structured Macros symbols.
 copy  smpucond                       | DEFUCOND user conditions.
 copy  srvesmac                       | Environment support symbols.
 copy  srvccmac                       | Cheap Calculator symbols.
 print on,gen                         |
 es_id         id=ES,                 |                                *
               spepa=pwa_ES_epa,      |                                *
               sptoken=pwa_ES_token,  |                                *
               esva=pwaaesv           |
       space 1                        |
 title "SRVCC -- Initialization"      |
 block name=SRVCC,type=program,amode=31,rmode=any,                     *
               options=(*srvprc,long,                                  *
               (parms,(using,r11),(count,pwa_number_of_parms),vl)),    *
               parmmap=parmlist,basereg=(r12,r9),                      *
               subopts=(*swa,loadbase)
* *-------------------------------------------------------------------*
* * Ensure that at least the minimum and no more than the maximum
* * number of parameters were passed in the parameter list.
* *-------------------------------------------------------------------*
  l     r0,pwa_number_of_parms        | Save number of parms.
  errexit (ch,r0,lt,=y(prm_min_#)),or,(c,r0,gt,=a(prm_max_#)),         +
               code=&CC_invalid_number_of_parms
  l     r1,prm_functioncode           | Load the function code into
  l     r1,0(,r1)                     |   a register for testing.
* *-------------------------------------------------------------------*
* * If the function code is something other than start, make sure that
* * the PWA contains the eye-catcher string and the correct value for
* * CC_ID.   If not, then the CC_ID passed in is garbage.
* *-------------------------------------------------------------------*
  if (c,r1,ne,=f'&CC_start')          | If not startup function then
   errexit ((clc,pwa_visual,ne,psd_eyecatcher),or,                     *
               (c,r13,ne,pwa_CC_id)), |                                *
               code=&CC_invalid_CC_id |  go off and croak.
  endif                               | Endif.
   title "SRVCC -- CC_Start Function" |
* *-------------------------------------------------------------------*
* * Select the code to process the function.
* *-------------------------------------------------------------------*
  caseblk reg=r1                      | Start of function case block.
  space 1                             |
*  *------------------------------------------------------------------*
*  * Start function.
*  *------------------------------------------------------------------*
   case &CC_start                     |  Start function.
*   *-----------------------------------------------------------------*
*   * Set the eyecatcher and the CC_ID fields.   These are checked
*   * each time the CC server is entered to avoid integrity problems.
*   *-----------------------------------------------------------------*
    mvc   pwa_visual,psd_eyecatcher   |   Set the eyecatcher and the
    st    r13,pwa_CC_id               |   CC_ID are for validity checks
    xc    pwa_clear_start(pwa_clear_length),pwa_clear_start
*   *-----------------------------------------------------------------*
*   * Make sure that a valid number of parameters are specified.
*   *-----------------------------------------------------------------*
    l     r3,pwa_number_of_parms      |   Load r3 with number of parms.
    errexit    (ch,r3,lt,=y(prm_start_min_#)),or,   Error if out       +
               (ch,r3,gt,=y(prm_start_max_#)),      of bounds.         +
               code=&CC_invalid_number_of_parms
    space 1                           |
    l    r1,pwaaesv                   | Load pointer to ESV.
    using esv,r1                      |
    mvc   pwa_es_epa,esvesepa         | Copy EPA and token addresses
    mvc   pwa_es_token,esvestkn       |  for current Env. Support sess.
    drop  r1                          |
    slr   r0,r0                       |
    st    r0,pwa_display              | Clear the "display".
 title "SRVCC -- CC_Terminate Function"
*  *------------------------------------------------------------------*
*  *  CC_Terminate function.
*  *------------------------------------------------------------------*
   case &CC_Terminate                 |
    l     r3,pwa_number_of_parms      |   Load r3 with number of parms.
    errexit    (ch,r3,lt,=y(prm_terminate_#)),  Error if not correct.  +
               code=&CC_invalid_number_of_parms
    smctrl  freepwa=yes               |
 title "SRVCC -- CC_Add Function"     |
*  *------------------------------------------------------------------*
*  *  CC_Add function.
*  *------------------------------------------------------------------*
   case &CC_Add                       | Add function.
    l     r3,pwa_number_of_parms      |   Load r3 with number of parms.
    errexit    (ch,r3,ne,=y(prm_add_#)),  Error if not correct.        +
               code=&CC_invalid_number_of_parms
    l32   r1,prm_add_value            |  Get pointer to value to add
    errexit (z),code=&CC_Parameter_Missing  Error if pointer missing
    l     r1,0(r1)                    |  Get the value
    a     r1,pwa_display              |  Add current display contents
    st    r1,pwa_display              |  Update the display
    l32   r2,prm_add_display          |  Get addr of caller's display
    errexit (z),code=&CC_Parameter_Missing  Error if pointer missing
    st    r1,0(r2)                    |  Return display to caller.
    errexit (c,r1,gt,=f'99999999'),   |                                *
               code=&CC_Overflow      |
 title "SRVCC -- CC_Subtract Function"
*  *------------------------------------------------------------------*
*  *  CC_Subtract function.
*  *------------------------------------------------------------------*
   case &CC_Subtract                  | Subtract function.
    l     r3,pwa_number_of_parms      |   Load r3 with number of parms.
    errexit    (ch,r3,ne,=y(prm_subtract_#)), Error if not correct.    +
               code=&CC_invalid_number_of_parms
    l32   r1,prm_Subtract_value       |  Get pointer to value to subtr
    errexit (z),code=&CC_Parameter_Missing  Error if pointer missing
    l     r1,0(r1)                    |  Get the value
    s     r1,pwa_display              |  Subtract current display
    st    r1,pwa_display              |  Update the display
    l32   r2,prm_subtract_display     |  Get addr of caller's display
    errexit (z),code=&CC_Parameter_Missing  Error if pointer missing
    st    r1,0(r2)                    |  Return display to caller.
    errexit (c,r1,lt,=f'-99999999'),  |                                *
               code=&CC_Overflow      |
 title "SRVCC -- CC_Multiply Function"
*  *------------------------------------------------------------------*
*  *  CC_Multiply function.
*  *------------------------------------------------------------------*
   case &CC_Multiply                  | multiply function.
    l     r3,pwa_number_of_parms      |   Load r3 with number of parms.
    errexit    (ch,r3,ne,=y(prm_multiply_#)), Error if not correct.    +
               code=&CC_invalid_number_of_parms
    l32   r1,prm_multiply_value       |  Get pointer to value to mult
    errexit (z),code=&CC_Parameter_Missing  Error if pointer missing
    l     r1,0(r1)                    |  Get the value
    sr    r0,r0                       |  Clear reg for multiply
    m     r0,pwa_display              |  multiply current display
    errexit (c,r1,gt,=f'99999999'),or,(treg,r0,nz),                    *
               code=&CC_Overflow      |
    st    r1,pwa_display              |  Update the display
    l32   r2,prm_multiply_display     |  Get addr of caller's display
    errexit (z),code=&CC_Parameter_Missing  Error if pointer missing
    st    r1,0(r2)                    |  Return display to caller.
 title "SRVCC -- CC_Divide Function"  |
*  *------------------------------------------------------------------*
*  *  CC_Divide function.
*  *------------------------------------------------------------------*
   case &CC_Divide                    | divide function.
    l     r3,pwa_number_of_parms      |   Load r3 with number of parms.
    errexit    (ch,r3,ne,=y(prm_divide_#)), Error if not correct.      +
               code=&CC_invalid_number_of_parms
    l32   r1,prm_divide_value         |  Get pointer to value to mult
    errexit (z),code=&CC_Parameter_Missing  Error if pointer missing
    l     r3,pwa_display              |  Get the value
    sr    r2,r2                       |  Clear reg for divide
    d     r2,0(r1)                    |  divide current display
    st    r2,pwa_display              |  Update the display
    l32   r3,prm_divide_display       |  Get addr of caller's display
    errexit (z),code=&CC_Parameter_Missing  Error if pointer missing
    st    r2,0(r3)                    |  Return display to caller.
 title "SRVCC -- CC_Clear Function"   |
*  *------------------------------------------------------------------*
*  *  CC_Clear function.
*  *------------------------------------------------------------------*
   case &CC_Clear                     | Clear function.
    l     r3,pwa_number_of_parms      |   Load r3 with number of parms.
    errexit    (ch,r3,ne,=y(prm_clear_#)),  Error if not correct.      +
               code=&CC_invalid_number_of_parms
    sr    r0,r0                       |
    st    r0,pwa_display              |
  endcase                             |
 endblk rc=0                          |
 title "SRVCC - General Error Exit"   |
 block type=errexit                   |
* *-------------------------------------------------------------------*
* * Save module/offset, registers, return-code.
* *-------------------------------------------------------------------*
  stm   r0,r15,gdiregs                | Save registers at time of error
  sm_lal r0,srvcc+4                   | Point to module identification.
  st    r0,gdimodid                   | Save in general debug area.
  mvc   gdirc,0(r14)                  | Copy return code.
  sl    r14,=a(srvcc)                 | Calculate offset at time of err
  sth   r14,gdioffst                  | Save in debug area.
  l     r2,pwaaesv                    | Point r2 to ESV.
  using esv,r2                        | Establish base for ESV.
  callx esvesepa,(esvestkn,&es_save_debug_info,&es_debug_id_gdi,gdi)
* *-------------------------------------------------------------------*
* * Look at the error code.  If add'l information would be useful,
* * stuff into the debug area.
* *-------------------------------------------------------------------*
  lh    r15,gdirc                     | Get return code.
  caseblk reg=r15,mult=1              | Case on return-code.
    case &CC_invalid_function         |
      callx esvesepa,(esvestkn,&es_save_debug_info,&es_debug_id_text,  *
               psd_invalid_function,=a(l'psd_invalid_function))
    case &CC_invalid_number_of_parms  |
      callx esvesepa,(esvestkn,&es_save_debug_info,&es_debug_id_text,  *
               psd_invalid_#_parms,=a(l'psd_invalid_#_parms))
    case &CC_invalid_CC_ID            |
      callx esvesepa,(esvestkn,&es_save_debug_info,&es_debug_id_text,  *
               psd_invalid_CC_ID,=a(l'psd_invalid_CC_ID))
  endcase                             | EndCase.
  drop r2                             |
* *-------------------------------------------------------------------*
* * Set the return-code and exit.
* *-------------------------------------------------------------------*
  lh    r15,gdirc                     | Set return code.
 endblk rc=(r15)                      |
 title "SRVCC -- Constants"           |
         psd   ,                      |
psd_eyecatcher  dc    cl8'CHEAP_SP'   | So everyone will know ...
psd_invalid_function     dc  c"Unsupported function."
psd_invalid_#_parms      dc  c"Invalid number of parameters."
psd_invalid_cc_id        dc  c"Invalid token provided."
psd_overflow             dc  c"Output value is too large for requested *
               format."               |
psd_undetermined_error   dc  c"Undetermined error."
         ltorg ,                      |
         endpsd ,                     |
 title "SRVCC -- Parameter List DSECT"
parmlist          dsect ,             |
prm_CC_id         ds a                | CC_identifier === PWA base
prm_functioncode  ds a                | Function to be performed
prm_min_#         equ (*-parmlist)/4  |
prm_function_dept equ *               | Function-dependent parameters
*---------------------------------------------------------------------*
*                  Start function parameters
*---------------------------------------------------------------------*
                  org prm_function_dept
prm_start_esv     ds a                | Environment Support Vector.
prm_start_min_#   equ (*-parmlist)/4  |
prm_start_max_#   equ (*-parmlist)/4  |
*---------------------------------------------------------------------*
*                 Terminate function parameters
*---------------------------------------------------------------------*
               org prm_function_dept  |
prm_terminate_#   equ (*-parmlist)/4  |
*---------------------------------------------------------------------*
*                 CC_Add function parameters
*---------------------------------------------------------------------*
               org prm_function_dept  |
prm_add_value     ds    f             | Value to add to display.
prm_add_display   ds    f             | Where to store updated display.
prm_add_#         equ (*-parmlist)/4  |
*---------------------------------------------------------------------*
*                 CC_Subtract function parameters
*---------------------------------------------------------------------*
               org prm_function_dept  |
prm_subtract_value ds   f             | Value to subtract from display.
prm_subtract_display ds f             | Where to store updated display.
prm_subtract_#    equ (*-parmlist)/4  |
*---------------------------------------------------------------------*
*                 CC_Multiply function parameters
*---------------------------------------------------------------------*
               org prm_function_dept  |
prm_multiply_value ds   f             | Value to multiply to display.
prm_multiply_display ds f             | Where to store updated display.
prm_multiply_#                equ (*-parmlist)/4
*---------------------------------------------------------------------*
*                 CC_Divide function parameters
*---------------------------------------------------------------------*
               org prm_function_dept  |
prm_divide_value  ds    f             | Value to divide to display.
prm_divide_display ds   f             | Where to store updated display.
prm_divide_#       equ (*-parmlist)/4 |
*---------------------------------------------------------------------*
*                 CC-Clear function parameters
*---------------------------------------------------------------------*
prm_clear_#        equ (*-parmlist)/4 |
                org ,                 |
prm_max_#          equ (*-parmlist)/4 |
*
 title "SRVCC -- Environment Support Vector DSECT"
          es_esv ,                    |
 title "SRVCC -- Program Work Area"   |
               PWA                    |
pwa_area       ds    0f               | Beginning of visible PWA stg.
pwa_visual     ds    cl8              | Character string 'CHEAP_SP'
pwa_CC_id      ds    a                | Pointer to program work area.
pwa_clear_start equ  *                | This area cleared by CC_START.
pwa_ES_epa     ds    f                | Environment Support EPA.
pwa_ES_token   ds    f                | Environment Support PWA token.
pwa_ESV        ds    f                | Environment Support vector addr
*                                     |  is that spec'd by SizeLength.
pwa_clear_end  equ  *                 | End area cleared by CC_START.
pwa_clear_length   equ   pwa_clear_end-pwa_clear_start
pwa_number_of_parms  ds  f            |
pwa_display    ds   f                 |
               es_gdi dsect=no        | General debugging information.
               endpwa ,               |
               end   ,                |
