*---------------------------------------------------------------------*
*  Copyright 2011 by Clemson University Research Foundation           *
*                                                                     *
*  Licensed under the Apache License, Version 2.0 (the "License");    *
*  you may not use this file except in compliance with the License.   *
*  You may obtain a copy of the License in this library as member     *
*  $LICENSE, or from                                                  *
*                                                                     *
*      http://www.apache.org/licenses/LICENSE-2.0                     *
*                                                                     *
*  Unless required by applicable law or agreed to in writing,         *
*  software distributed under the License is distributed on an "AS    *
*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either    *
*  express or implied.  See the License for the specific language     *
*  governing permissions and limitations under the License.           *
*---------------------------------------------------------------------*
*     //SRVDVMVS JOB (H2803302,&SYSROOM,,8),'DIV Server',TIME=(,4),
*     //        MSGCLASS=A
*     /*JOBPARM Q=H
*     //DISCARD OUTPUT CLASS=*,DEFAULT=YES
*     //LASER   OUTPUT DEST=LASER,UCS=PR12,CHARS=PR12,FCB=85@8
*     //STEP1   EXEC ASMPCL,PDS='SYSTEMS.SRV.LOAD',NAME=SRVDVMVS,
*     //        COPT=',RENT',LOPT=',RENT,LET,NCAL',SYSOUT='(,)',
*     //        MAC=SYSTEMS
*     //P.SYSPRINT DD SYSOUT=A OUTPUT=*.LASER
*     //P.SYSIN DD   *
*     /* <source>
*     //C.SYSLIB DD
*     //         DD
*     //         DD DISP=SHR,DSN=SYSTEMS.SRV.SOURCE
*     //
SRVDVMVS TITLE 'MVS Data In Virtual Service Processor'
         SMLIST CONVERT=YES           |
*---------------------------------------------------------------------*
*
*  Copyright (C) 1989 Clemson University
*
*  Program     SRVDVMVS, MVS Data In Virtual Service Processor.
*
*  Abstract    This service process is MVS dependent and gives access
*              to the functions provided by the MVS DIV macro.
*
*  Parameters:
*    Two parameters, DivID and FunctionCode, are required for each
*    call to the DIV Server.  Additional parameters are required
*    for different FunctionCodes.  The entire parameter list required
*    for each function is listed below.
*
*    START
*      CALLX SRVDVMVS,(DivID,&Start,ESV,DDName,*Mode,*Size)
*
*    TERMINATE
*      CALLX SRVDVMVS,(DivID,&Terminate)
*
*    OPEN_WINDOW
*      CALLX SRVDVMVS,(DivID,&DV_Open_Window,Area,Span,Offset,Retain)
*
*    SAVE
*      CALLX SRVDVMVS,(DivID,&DV_Save,Span,Offset,Size)
*
*    RESET
*      CALLX SRVDVMVS,(DivID,&DV_Reset,Span,Offset)
*
*    CLOSE_WINDOW
*      CALLX SRVDVMVS,(DivID,&DV_Close_Window,Area,Retain)
*
*    The meaning of each parameter is explained below.
*
*    DivID is a fullword used to uniquely identify the invocation of
*      the DIV service processor.  It is initialized during the
*      startup function.
*
*    FunctionCode is a fullword integer that specifies the function to
*      be performed.  Symbolic identifiers are provided for each
*      function and may be accessed by placing a COPY statement for
*      SRVDVMAC in the assembler program.  These symbols should be
*      used in place of actual integer values.  The following
*      FunctionCodes are supported:
*
*      &START = 1
*        Identify the ddname that points to the linear data set,
*        define the mode of access (read or update), retrieve the
*        existing size of the object and assign a unique DivID.
*        This function invokes the DIV macro twice: once with IDENTIFY
*        and once with ACCESS.
*
*      &TERMINATE = 2
*        Shutdown this invocation.  This function invokes the DIV macro
*        twice: once with UNACCESS and once with UNIDENTIFY.
*
*      &DV_OPEN_WINDOW = 3
*        Open a virtual window into the linear data set.
*
*      &DV_SAVE = 4
*        Save updates into a linear data set.
*
*      &DV_RESET = 5
*        Reset the changes since the last save.
*
*      &DV_CLOSE_WINDOW = 6
*        Close a virtual window into the linear data set.
*
*    ESV is a fullword given to the application by the Server Manager
*      when it was started up.
*
*    DDName specified the DDName of the object.
*
*    Mode specified 'Read' or 'Update' intent.  Only the first byte
*      is checked.
*
*    Size is a fullword into which the current size of the object is
*      returned.  The size is returned as the number of 4K blocks.
*
*    Offset specifies the offset into the linear data set with which
*      the function should operate.  The offset is specified in 4K
*      blocks.
*
*    Area specifies the address of a fullword that contains a pointer
*      to the start of the virtual window.
*
*    Retain specifies whether the contents storage in the virtual
*      window should be retained while opening and closing a window
*      and after saving.
*
*  Return codes:
*
*   &DV_INVALID_FUNCTION
*      An invalid function was specified.
*   &DV_INVALID_DivID
*      The DivID provided does not identify an active heap created by
*      the START function of the DIV processor.
*
*  Program     reentrant, problem key and state, server linkage,
*  Attributes  non-authorized, amode(any), rmode(any)
*
*  Change
*  History   2011/10/20 JCB - Patch rollup for CBT tape distribution
*
*  Method of
*  Operation
*
*
*  Special Notes:
*    This module gives access to the MVS DIV macro at a very primitive
*    level.  For further information about how DIV works, refer to
*    the "MVS/XA Supervisor Services and Macro Instruction" manual,
*    GC28-1154-3 or later.  Any other service processors that mimic
*    this service processor should use the information in this manual
*    as a specification for the external interface.
*
*---------------------------------------------------------------------*
 eject                                |
 copy  srvesmac                       | Environment support symbols.
 copy  srvdvmac                       | Data-in-virtual symbols.
 eject                                |
 block name=SRVDVMVS,type=program,amode=31,rmode=any,                  +
               options=(*srvprc,noclearpwa,(parms,(using,r11))),       +
               subopts=*swa,parmmap=parmlist
* *-------------------------------------------------------------------*
* * Determine how many parameters were passed and load r1 with
* * function code.
* *-------------------------------------------------------------------*
  la    r1,parmlist                   | Point r1 to parameter list.
  la    r15,prm_max_#                 | Load r15 with maximum # parms.
  loop bct                            | Loop
   leave loop=*,(tbit,0(r1),x'80')    |  End of parms if high bit set.
   la   r1,4(,r1)                     |  Point to next parm address.
  endloop bct,r15                     | Endloop
  la    r0,prm_max_#+1                | Calculate number of
  sr    r0,r15                        |  parms.  Ok if 2 <= num <= max
  sth   r0,pwa_number_of_parms        | Save number of parms.
  errexit (ch,r0,lt,=y(prm_min_#)),or,(ch,r0,gt,=y(prm_max_#)),        +
               code=&dv_invalid_number_of_parms
  l     r1,prm_functioncode           | Load the function code into
  l     r1,0(,r1)                     |   a register for testing.
* *-------------------------------------------------------------------*
* * If the function code is something other than start, make sure that
* * the PWA contains the eye-catcher string and the correct value for
* * DivID.   If not, then the DivID passed in is garbage.
* *-------------------------------------------------------------------*
  if (c,r1,ne,=f'&dv_start')          | If not startup function then
   errexit ((clc,pwa_visual,ne,eyecatcher),or,(c,r13,ne,pwa_divid)),   +
               code=&dv_invalid_divid |
  endif                               | Endif.
  space 1                             |
* *-------------------------------------------------------------------*
* * Select the code to process the function.
* *-------------------------------------------------------------------*
  caseblk reg=r1                      | Start of function case block.
  eject                               |
*  *------------------------------------------------------------------*
*  * Start function.
*  *------------------------------------------------------------------*
   case &dv_start                     |  Start function.
*   *-----------------------------------------------------------------*
*   * Set the eyecatcher and the DivID fields.   These are checked
*   * each time the DIV server is entered to avoid integrity
*   * problems.
*   *-----------------------------------------------------------------*
    mvc   pwa_visual,eyecatcher       |   Both the eyecatcher and the
    st    r13,pwa_divid               |   DivID are for validity checks
*   *-----------------------------------------------------------------*
*   * Make sure that a valid number of parameters are specified.
*   *-----------------------------------------------------------------*
    lh    r3,pwa_number_of_parms      |   Load r3 with number of parms.
    errexit    (ch,r3,lt,=y(prm_start_min_#)),or,   Error if out       +
               (ch,r3,gt,=y(prm_start_max_#)),      of bounds.         +
               code=&dv_invalid_number_of_parms
*   *-----------------------------------------------------------------*
*   * Get ddname.
*   *-----------------------------------------------------------------*
    l     r1,prm_start_ddname         |   Move ddname
    mvc   pwa_ddname,0(r1)            |   to PWA.
*   *-----------------------------------------------------------------*
*   * If a mode is passed, used it; otherwise, assume read only.
*   *-----------------------------------------------------------------*
    if (ch,r3,ge,=y(prm_start_mode_#))     If mode was specified
     l32   r1,prm_start_mode          |
     if nz                            |
      if (cli,0(r1),eq,c"U")          |     and is "U" then
       sbit  pwa_f_update             |     indicate update mode.
      else                            |    Else error if not "R".
       errexit (cli,0(r1),ne,c"R"),code=&dv_invalid_mode
      endif                           |
     endif                            |
    endif                             |    Endif.
*   *-----------------------------------------------------------------*
*   * Issue the DIV identify function.
*   *-----------------------------------------------------------------*
    mvc  pwa_div_ef,psd_div_lf        |    Move DIV list form to PWA.
    div        identify,              |    Issue identify.             +
               ddname=pwa_ddname,     |                                +
               id=pwa_div_id,         |                                +
               type=da,               |                                +
               mf=(e,pwa_div_ef)      |
    errexit (treg,r15,nz),code=&dv_div_error
*   *-----------------------------------------------------------------*
*   * Issue the DIV access function with the correct mode.
*   *-----------------------------------------------------------------*
    mvc  pwa_div_ef,psd_div_lf        |    Move DIV list form to PWA.
    if (tbit,pwa_f_update)            |    If update mode,
     div       access,                |     Issue access with          +
               mode=update,           |     mode=update specified.     +
               id=pwa_div_id,         |                                +
               size=pwa_object_size,  |                                +
               mf=(e,pwa_div_ef)      |
     errexit (treg,r15,nz),code=&dv_div_error
    else                              |    Else,
     div       access,                |     Issue access with          +
               mode=read,             |     mode=read specified.       +
               id=pwa_div_id,         |                                +
               size=pwa_object_size,  |                                +
               mf=(e,pwa_div_ef)      |
     errexit (treg,r15,nz),code=&dv_div_error
    endif                             |    Endif.
*   *-----------------------------------------------------------------*
*   * If size parm was supplied, return the size.
*   *-----------------------------------------------------------------*
    if (ch,r3,ge,=y(prm_start_size_#))     If caller provided a place
     l32   r1,prm_start_size          |    to return the object size,
     if nz                            |
      mvc  0(4,r1),pwa_object_size    |     Return size of object.
     endif                            |
    endif                             |    Endif.
*   *-----------------------------------------------------------------*
   eject                              |
*  *------------------------------------------------------------------*
*  * Terminate function.
*  *------------------------------------------------------------------*
   case &dv_terminate                 |
*   *-----------------------------------------------------------------*
*   * Invoke unaccess DIV service.
*   *-----------------------------------------------------------------*
    mvc  pwa_div_ef,psd_div_lf        |    Move DIV list form to PWA.
    div  unaccess,id=pwa_div_id,      |                                +
               mf=(e,pwa_div_ef)      |
    errexit (treg,r15,nz),code=&dv_div_error
*   *-----------------------------------------------------------------*
*   * Invoke unidentify DIV service.
*   *-----------------------------------------------------------------*
    mvc  pwa_div_ef,psd_div_lf        |    Move DIV list form to PWA.
    div  unidentify,id=pwa_div_id,    |                                +
               mf=(e,pwa_div_ef)      |
    errexit (treg,r15,nz),code=&dv_div_error
*   *-----------------------------------------------------------------*
*   * Indicate PWA should be freed.
*   *-----------------------------------------------------------------*
    smctrl freepwa=yes                |   Free the PWA on return.
*   *-----------------------------------------------------------------*
   eject                              |
*  *------------------------------------------------------------------*
*  * Open window function.
*  *------------------------------------------------------------------*
   case &dv_open_window               |
    lh    r3,pwa_number_of_parms      |
    errexit    (ch,r3,lt,=y(prm_open_window_min_#)),or,                +
               (ch,r3,gt,=y(prm_open_window_max_#)),                   +
               code=&dv_invalid_number_of_parms
*   *-----------------------------------------------------------------*
*   * Load r2 with area parameter.
*   *-----------------------------------------------------------------*
    l32   r2,prm_open_window_area     |
    errexit z,code=&dv_invalid_number_of_parms
*   *-----------------------------------------------------------------*
*   * Load r4 with offset parameter.
*   *-----------------------------------------------------------------*
    slr   r4,r4                       |
    if (ch,r3,ge,=y(prm_open_window_offset_#))
     l     r4,prm_open_window_offset  |
    endif                             |
*   *-----------------------------------------------------------------*
*   * Load r5 with span parameter.
*   *-----------------------------------------------------------------*
    slr   r5,r5                       |
    if (ch,r3,ge,=y(prm_open_window_span_#))
     l     r5,prm_open_window_span    |
    endif                             |
*   *-----------------------------------------------------------------*
*   * If a retain parm is passed, used it; otherwise, assume no.
*   *-----------------------------------------------------------------*
    rbit  pwa_f_retain                |
    if (ch,r3,ge,=y(prm_open_window_retain_#))
     l32   r1,prm_open_window_retain  |
     if nz                            |
      if (cli,0(r1),eq,c"Y")          |     and is "Y" then
       sbit  pwa_f_retain             |     indicate update mode.
      else                            |    Else error if not "N".
       errexit (cli,0(r1),ne,c"N"),code=&dv_invalid_retain
      endif                           |
     endif                            |
    endif                             |    Endif.
*   *-----------------------------------------------------------------*
*   * Issue div with appropriate retain option.
*   *-----------------------------------------------------------------*
    mvc  pwa_div_ef,psd_div_lf        |    Move DIV list form to PWA.
    if (tbit,pwa_f_retain)            |    If update mode,
     div       map,                   |     Invoke map service         +
               id=pwa_div_id,         |     with retain=yes specified. +
               retain=yes,            |                                +
               area=(2),              |                                +
               offset=(4),            |                                +
               span=(5),              |                                +
               mf=(e,pwa_div_ef)      |
     errexit (treg,r15,nz),code=&dv_div_error
    else                              |    Else,
     div       map,                   |     Invoke map service         +
               id=pwa_div_id,         |     with retain=no specified.  +
               retain=no,             |                                +
               area=(2),              |                                +
               offset=(4),            |                                +
               span=(5),              |                                +
               mf=(e,pwa_div_ef)      |
     errexit (treg,r15,nz),code=&dv_div_error
    endif                             |    Endif.
*   *-----------------------------------------------------------------*
   eject                              |
*  *------------------------------------------------------------------*
*  * Close window function.
*  *------------------------------------------------------------------*
   case &dv_close_window              |
    lh    r3,pwa_number_of_parms      |
    errexit    (ch,r3,lt,=y(prm_close_window_min_#)),or,               +
               (ch,r3,gt,=y(prm_close_window_max_#)),                  +
               code=&dv_invalid_number_of_parms
*   *-----------------------------------------------------------------*
*   * Load r2 with area parameter.
*   *-----------------------------------------------------------------*
    l32   r2,prm_close_window_area    |
    errexit z,code=&dv_invalid_number_of_parms
*   *-----------------------------------------------------------------*
*   * If a retain parm is passed, used it; otherwise, assume no.
*   *-----------------------------------------------------------------*
    rbit  pwa_f_retain                |
    if (ch,r3,ge,=y(prm_close_window_retain_#))
     l32   r1,prm_close_window_retain |
     if nz                            |
      if (cli,0(r1),eq,c"Y")          |     and is "Y" then
       sbit  pwa_f_retain             |     indicate update mode.
      else                            |    Else error if not "N".
       errexit (cli,0(r1),ne,c"N"),code=&dv_invalid_retain
      endif                           |
     endif                            |
    endif                             |    Endif.
*   *-----------------------------------------------------------------*
*   * Issue div with appropriate retain option.
*   *-----------------------------------------------------------------*
    mvc  pwa_div_ef,psd_div_lf        |    Move DIV list form to PWA.
    if (tbit,pwa_f_retain)            |    If update mode,
     div       unmap,                 |     Invoke map service         +
               id=pwa_div_id,         |     with retain=yes specified. +
               retain=yes,            |                                +
               area=(2),              |                                +
               mf=(e,pwa_div_ef)      |
     errexit (treg,r15,nz),code=&dv_div_error
    else                              |    Else,
     div       unmap,                 |     Invoke unmap service       +
               id=pwa_div_id,         |     with retain=no specified.  +
               retain=no,             |                                +
               area=(2),              |                                +
               mf=(e,pwa_div_ef)      |
     errexit (treg,r15,nz),code=&dv_div_error
    endif                             |    Endif.
*   *-----------------------------------------------------------------*
   eject                              |
*  *------------------------------------------------------------------*
*  * Save function.
*  *------------------------------------------------------------------*
   case &dv_save                      |  Save function.
    lh    r3,pwa_number_of_parms      |   Load number of parameters.
    errexit    (ch,r3,lt,=y(prm_save_min_#)),or,  Error if out of      +
               (ch,r3,gt,=y(prm_save_max_#)),     bounds.              +
               code=&dv_invalid_number_of_parms
*   *-----------------------------------------------------------------*
*   * Load r4 with offset parameter.
*   *-----------------------------------------------------------------*
    slr   r4,r4                       |   Clear r4.
    if (ch,r3,ge,=y(prm_save_offset_#))   If enough parms are specified
     l     r4,prm_save_offset         |   to include offset, point r4
    endif                             |   to this parm.
*   *-----------------------------------------------------------------*
*   * Load r5 with span parameter.
*   *-----------------------------------------------------------------*
    slr   r5,r5                       |   Clear r5.
    if (ch,r3,ge,=y(prm_save_span_#)) |   If enough parms are specified
     l     r5,prm_save_span           |   to include span, point r4
    endif                             |   to this parm.
*   *-----------------------------------------------------------------*
*   * Load r6 with size parameter.
*   *-----------------------------------------------------------------*
    slr   r6,r6                       |   Clear r6.
    if (ch,r3,ge,=y(prm_save_size_#)) |   If enough parms are specified
     l     r6,prm_save_size           |   to include size, point r4
    endif                             |   to this parm.
*   *-----------------------------------------------------------------*
*   * Invoke div save service.
*   *-----------------------------------------------------------------*
    mvc  pwa_div_ef,psd_div_lf        |    Move DIV list form to PWA.
    div        save,                  |     Invoke save service.       +
               id=pwa_div_id,         |                                +
               offset=(4),            |                                +
               span=(5),              |                                +
               size=(6),              |                                +
               mf=(e,pwa_div_ef)      |
    errexit (treg,r15,nz),code=&dv_div_error
*   *-----------------------------------------------------------------*
   eject                              |
*  *------------------------------------------------------------------*
*  * Reset function.
*  *------------------------------------------------------------------*
   case &dv_reset                     |  reset function.
    lh    r3,pwa_number_of_parms      |   Load number of parameters.
    errexit    (ch,r3,lt,=y(prm_reset_min_#)),or, Error if out of      +
               (ch,r3,gt,=y(prm_reset_max_#)),    bounds.              +
               code=&dv_invalid_number_of_parms
*   *-----------------------------------------------------------------*
*   * Load r4 with offset parameter.
*   *-----------------------------------------------------------------*
    slr   r4,r4                       |   Clear r4.
    if (ch,r3,ge,=y(prm_reset_offset_#))  If enough parms are specified
     l     r4,prm_reset_offset        |   to include offset, point r4
    endif                             |   to this parm.
*   *-----------------------------------------------------------------*
*   * Load r5 with span parameter.
*   *-----------------------------------------------------------------*
    slr   r5,r5                       |   Clear r5.
    if (ch,r3,ge,=y(prm_reset_span_#))    If enough parms are specified
     l     r5,prm_reset_span          |   to include span, point r4
    endif                             |   to this parm.
*   *-----------------------------------------------------------------*
*   * Invoke div reset service.
*   *-----------------------------------------------------------------*
    mvc  pwa_div_ef,psd_div_lf        |    Move DIV list form to PWA.
    div        reset,                 |     Invoke reset service.      +
               id=pwa_div_id,         |                                +
               offset=(4),            |                                +
               span=(5),              |                                +
               mf=(e,pwa_div_ef)      |
    errexit (treg,r15,nz),code=&dv_div_error
*   *-----------------------------------------------------------------*
   eject                              |
*  *------------------------------------------------------------------*
*  * If any other case, this is an invalid function.
*  *------------------------------------------------------------------*
   case other                         |
    errexit code=&dv_invalid_function |
  endcase                             |
 space 1                              |
 endblk block=SRVDVMVS,rc=0           |
 eject                                |
*---------------------------------------------------------------------*
*
*  Errexit:    Unnamed
*  Purpose:    Save debugging information and exit with the return
*              code pointed to by r14 at entry to this exit.
*
*---------------------------------------------------------------------*
         SPACE 1                      |
 block type=errexit                   |
* *-------------------------------------------------------------------*
* * Save module/offset, registers, return-code.
* *-------------------------------------------------------------------*
  st    r15,pwa_reason                | Save possible return-code.
  stm   r0,r15,gdiregs                | Save registers at time of error
  la    r0,4(,r12)                    | Point to module identification.
  st    r0,gdimodid                   | Save in general debug area.
  mvc   gdirc,0(r14)                  | Copy return code.
  slr   r14,r12                       | Calculate offset at time of err
  sth   r14,gdioffst                  | Save in debug area.
  l     r2,pwaaesv                    | Point r2 to ESV.
  using esv,r2                        | Establish base for ESV.
  callx esvesepa,(esvestkn,&es_save_debug_info,&es_debug_id_gdi,gdi)
* *-------------------------------------------------------------------*
* * Look at the error code.  Some errors imply that the DIV Server
* * has lost its cookies and should not attempt to do anything other
* * than shut-down (if it can even do that).
* *-------------------------------------------------------------------*
  lh    r15,gdirc                     | Get return code.
  caseblk reg=r15,mult=1              | Case on return-code.
    case &dv_not_useable
      rbit  pwa_f_useable             | Indicate DIV Server unsafe.
      callx esvesepa,(esvestkn,&es_save_debug_info,                    +
               &es_debug_id_hex,pwa_reason,4,"REASON",6)
    case other                        |  Don't bother w/other errors.
  endcase                             | EndCase.
  drop r2                             |
* *-------------------------------------------------------------------*
* * Set the return-code and exit.
* *-------------------------------------------------------------------*
  lh    r15,gdirc                     | Set return code.
 endblk                               |
 eject                                |
 title "Program Static Data"          |
                psd                   |
psd_div_lf      dc    8a(0)
psd_div_lf_length equ *-psd_div_lf
eyecatcher      dc   cl8"DIV_SP"      | Eyecatcher value for dumps.
                ltorg ,               |
                endpsd                |
         title "Parameter List"
parmlist                      dsect , |
prm_divid                     ds a    | Div identifier === PWA base
prm_functioncode              ds a    | Function to be performed
prm_min_#                     equ (*-parmlist)/4
prm_function_dept             equ *   | Function-dependent parameters
* Start function
                  org prm_function_dept
prm_start_esv                 ds a    | Environment Support Vector.
prm_start_ddname              ds a    | DDName.
prm_start_min_#               equ (*-parmlist)/4
prm_start_mode                ds a    | Mode of access (U or R)
prm_start_mode_#              equ (*-parmlist)/4
prm_start_size                ds a    | Size return area.
prm_start_size_#              equ (*-parmlist)/4
prm_start_max_#               equ (*-parmlist)/4
* Terminate function
                  org prm_function_dept
prm_terminate_#               equ (*-parmlist)/4
* Open Window function
                  org prm_function_dept
prm_open_window_area          ds a    | Area.
prm_open_window_span          ds a    | Span.
prm_open_window_span_#        equ (*-parmlist)/4
prm_open_window_min_#         equ (*-parmlist)/4
prm_open_window_offset        ds a    | Offset (in 4K blocks)
prm_open_window_offset_#      equ (*-parmlist)/4
prm_open_window_retain        ds a    | Retain ("Y" or "N")
prm_open_window_retain_#      equ (*-parmlist)/4
prm_open_window_max_#         equ (*-parmlist)/4
* Close Window function
                  org prm_function_dept
prm_close_window_area         ds a    | Area.
prm_close_window_min_#        equ (*-parmlist)/4
prm_close_window_retain       ds a    | Retain ("Y" or "N")
prm_close_window_retain_#     equ (*-parmlist)/4
prm_close_window_max_#        equ (*-parmlist)/4
* Save function
                  org prm_function_dept
prm_save_min_#                equ (*-parmlist)/4
prm_save_span                 ds a    | Span.
prm_save_span_#               equ (*-parmlist)/4
prm_save_offset               ds a    | Offset (in 4K blocks).
prm_save_offset_#             equ (*-parmlist)/4
prm_save_size                 ds a    | Size.
prm_save_size_#               equ (*-parmlist)/4
prm_save_max_#                equ (*-parmlist)/4
* Reset function
                  org prm_function_dept
prm_reset_min_#               equ (*-parmlist)/4
prm_reset_span                ds a    | Span.
prm_reset_span_#              equ (*-parmlist)/4
prm_reset_offset              ds a    | Offset (in 4K blocks).
prm_reset_offset_#            equ (*-parmlist)/4
prm_reset_max_#               equ (*-parmlist)/4
*
                  org ,
prm_max_#                     equ (*-parmlist)/4
*
          title "Dsects"
          es_esv ,
          title "Program Work Area"
               PWA                    |
pwa_area       ds    0f               | Beginning of visible PWA stg.
pwa_visual     ds    cl8              | Character string 'DIV_SP'.
pwa_ddname     ds    cl8              | DDname.
pwa_object_size ds   f                | Object size.
pwa_f          ds    bl1              | Flags for DIV Server.
pwa_f_useable  equ   b'10000000'      | DIV Server is useable.
pwa_f_retain   equ   b'01000000'      | Retain=yes should be used.
pwa_f_update   equ   b'00100000'      | Update mode.
               ds    bl1              | Not used.
pwa_number_of_parms ds h              | Number of parms.
pwa_divid      ds    a                | Pointer to program work area.
pwa_div_id     ds    d                | Id from DIV macro.
pwa_div_ef     ds    xl(psd_div_lf_length)
pwa_reason     ds    f                | Reason DIV Server died.
               es_gdi dsect=no        | General debugging information.
pwa_area_l     equ   *-pwa_area       | Length of visible PWA stg.
               endpwa                 |
               end
