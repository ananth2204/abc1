*---------------------------------------------------------------------*
*  Copyright 2011 by Clemson University Research Foundation           *
*                                                                     *
*  Licensed under the Apache License, Version 2.0 (the "License");    *
*  you may not use this file except in compliance with the License.   *
*  You may obtain a copy of the License in this library as member     *
*  $LICENSE, or from                                                  *
*                                                                     *
*      http://www.apache.org/licenses/LICENSE-2.0                     *
*                                                                     *
*  Unless required by applicable law or agreed to in writing,         *
*  software distributed under the License is distributed on an "AS    *
*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either    *
*  express or implied.  See the License for the specific language     *
*  governing permissions and limitations under the License.           *
*---------------------------------------------------------------------*
*---------------------------------------------------------------------*
*
*  Copy File:  ##LIST
*
*  Purpose:    General list manipulation macros.
*
*  Change
*  History:    03/38/90 MJM - New
*
*---------------------------------------------------------------------*
*
*  Some notes about the list structures defined in this member.
*
*  o The offsets of the various fields are hardcoded in the list
*    manipulation macros.
*  o All lists are doubly-linked non-circular lists, where the list
*    header forms the first and last nodes in the list.
*  o A list header begins with the following three pointers:
*    (Head,Tail,TailPred):
*    1) For the head-node, (Head,Tail) are the Successor & Predecessor
*       pointers where Head points to the first node in the list and
*       Tail is zeros since there is no predecessor node to the header.
*    2) For the tail-node, (Tail,TailPred) are the Successor &
*       Predecessor pointers where Tail is zeros since there is no
*       successor to the tail node and TailPred points to the last node
*       in the list.
*    3) The Successor field of the last node in a list points to Tail
*       and the Predecessor field of the first node in a list points
*       to Head.  For an empty list, Head points to Tail and TailPred
*       points to Head.  Tail is, and must *always* be, zeros.
*
*       tag  LI_HEADER  DSECT=(YES|NO)
*       tag  LI_NODE    DSECT=(YES|NO)
*
*       LI_INIT      LIST=list
*       LI_INSERT    NODE=node,PRED=pred
*       LI_INSERTPRI LIST=list,NODE=node
*       LI_REMOVE    NODE=node
*       LI_ADDHEAD   LIST=list,NODE=node
*       LI_ADDTAIL   LIST=list,NODE=node
*       LI_REMHEAD   LIST=list
*       LI_REMTAIL   LIST=list
*
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   LI_HEADER                                                  *
* Purpose: Generate the data structure for a list header.             *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
&NAME    LI_HEADER &DSECT=NO
              AIF       ('&NAME' NE '').OKAY
              MNOTE     8,'A label must be specified for this macro.'
.OKAY         LCLC      &P
&P            SETC      '&NAME._'
              AIF       ('&DSECT' EQ 'YES').GEN_DSECT
&NAME.        DS  0F             | Start of a list header:
              AGO       .GEN_FIELDS
.GEN_DSECT    ANOP
&NAME.        DSECT              | Start of a list header:
.GEN_FIELDS   ANOP
&P.HEAD       DC  A(&P.TAIL)     |   -> First node in list.
&P.TAIL       DC  A(0)           |   Always zeros.
&P.TAILPRED   DC  A(&P.HEAD)     |   -> Last node in list.
&NAME._L      EQU *-&NAME.       |   Length of a list header.
              MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   LI_NODE                                                    *
* Purpose: Generate the data structure for a list node.               *
*                                                                     *
*---------------------------------------------------------------------*
              MACRO
&NAME         LI_NODE &DSECT=NO
              AIF       ('&NAME' NE '').GEN_NAME
              MNOTE     8,'A label must be specified for this macro.'
              MEXIT
.GEN_NAME     AIF       ('&DSECT' EQ 'YES').GEN_DSECT
&NAME.        DS  0F             | Start of a list node:
              AGO       .PAST_NAME
.GEN_DSECT    ANOP
&NAME.        DSECT              | Start of a list node:
.PAST_NAME    LCLC      &P
&P            SETC      '&NAME._'
&P.SUCC       DS  A              |   -> Next node in list.
&P.PRED       DS  A              |   -> Previous node in list.
&P.TYPE       DS  X              |   Application-defined type-value.
&P.PRIORITY   DS  X              |   Unsigned priority of this node.
&P.CONTENT    DS  0C             |   Contents of this node start here.
              MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   LI_INIT                                                    *
* Purpose: Initialize a list-header.                                  *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         LI_INIT &LIST=
              AIF       ('&LIST' NE '').OKAY
              MNOTE     8,'A list address must be specified.'
.OKAY         ANOP
*                                   | Initialize a list to empty.
              LA  R15,&LIST         |   Point to list HEAD field.
              LA  R14,4(,R15)       |   Point to list TAIL field.
              ST  R14,0(,R15)       |   Set HEAD     = A(TAIL).
              XC  4(4,R15),4(R15)   |   Set TAIL     = A(0).
              ST  R15,4(,R14)       |   Set TAILPRED = A(HEAD).
              MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   LI_INSERT                                                  *
* Purpose: Insert a node after the specified predecessor.             *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         LI_INSERT &NODE=,&PRED=
              AIF       ('&NODE' EQ '').REQUIRED
              AIF       ('&PRED' EQ '').REQUIRED
              AGO       .OKAY
.REQUIRED     MNOTE     8,'NODE and PRED must be specified.'
.OKAY         ANOP
*                                     | Add a node to a list:
              ##LA R15,&NODE          |   Point to the NODE to add.
              ##LA R14,&PRED          |   Point to the PRED node.
              MVC  0(4,R15),0(R14)    |   Set NODE.Succ = PRED.Succ.
              ST   R14,4(,R15)        |   Set NODE.Pred = A(PRED).
              ST   R15,0(,R14)        |   Set PRED.Succ = A(NODE).
              L    R14,0(,R15)        |   Point to NODE.Succ.
              ST   R15,4(,R14)        |   Set SUCC.Pred = A(NODE).
              MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   LI_INSERTPRI                                               *
* Purpose: Insert a node in a list by priority.                       *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         LI_INSERTPRI &LIST=,&NODE=
              AIF       ('&LIST' EQ '').REQUIRED
              AIF       ('&NODE' EQ '').REQUIRED
              AGO       .OKAY
.REQUIRED     MNOTE     8,'LIST and NODE must be specified.'
.OKAY         ANOP
*                                     | Insert a node by priority:
              ##LA R15,&NODE          |   Point to the NODE to add.
              ##LA R14,&LIST          |   Point to the LIST header.
              L    R14,0(,R14)        |   Point to the first node.
              SLR  R0,R0              |   R0 := end-of-list value.
              LOOP WHILE,(CL,R0,NE,0(R14)) Loop while not @ TAIL.
                LEAVE LOOP=*,(CLC,9(1,R14),LT,9(R15)) Leave on low pri.
                L     R14,0(,R14)     |             Point to successor.
              ENDLOOP WHILE           |   EndLoop.
              ST   R14,0(,R15)        |   Set NODE.Succ = A(SUCC).
              MVC  4(4,R15),4(R14)    |   Set NODE.Pred = SUCC.Pred.
              ST   R15,4(,R14)        |   Set SUCC.Pred = A(NODE).
              L    R14,4(,R15)        |   Point to NODE.Pred.
              ST   R15,0(,R14)        |   Set PRED.Succ = A(NODE).
              MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   LI_REMOVE                                                  *
* Purpose: Remove the specified node from the list it is in.          *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         LI_REMOVE &NODE=
              AIF       ('&NODE' EQ '').REQUIRED
              AGO       .OKAY
.REQUIRED     MNOTE     8,'NODE must be specified.'
.OKAY         ANOP
*                                     | Remove a node from its list:
              ##LA R15,&NODE          |   Point to the NODE to remove.
              L    R14,4(,R15)        |   Point to the PRED node.
              MVC  0(4,R14),0(R15)    |   Set PRED.Succ = NODE.Succ.
              L    R14,0(,R15)        |   Point to NODE.Succ.
              MVC  4(4,R14),4(R15)    |   Set SUCC.Pred = NODE.Pred.
              MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   LI_ADDHEAD                                                 *
* Purpose: Insert a new node at the head of a list.                   *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         LI_ADDHEAD &LIST=,&NODE=
              AIF       ('&LIST' EQ '').REQUIRED
              AIF       ('&NODE' EQ '').REQUIRED
              AGO       .OKAY
.REQUIRED     MNOTE     8,'NODE and LIST must be specified.'
.OKAY         ANOP
*                                     | Add node to head of list:
              ##LA R15,&NODE          |   Point to the NODE to add.
              ##LA R14,&LIST          |   Point to the LIST header.
              MVC  0(4,R15),0(R14)    |   Set NODE.Succ = HEAD.
              ST   R15,0(R14)         |   Set HEAD      = A(NODE).
              L    R14,0(,R15)        |   Point to NODE.Succ.
              MVC  4(4,R15),4(R14)    |   Set NODE.Pred = SUCC.Pred.
              ST   R15,4(,R14)        |   Set SUCC.Pred = A(NODE).
              MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   LI_ADDTAIL                                                 *
* Purpose: Insert a new node at the tail of a list.                   *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         LI_ADDTAIL &LIST=,&NODE=
              AIF       ('&LIST' EQ '').REQUIRED
              AIF       ('&NODE' EQ '').REQUIRED
              AGO       .OKAY
.REQUIRED     MNOTE     8,'NODE and LIST must be specified.'
.OKAY         ANOP
*                                     | Add node to tail of list:
              ##LA R15,&NODE          |   Point to the NODE to add.
              ##LA R14,&LIST          |   Point to the LIST header.
              MVC  4(4,R15),8(R14)    |   Set NODE.Pred = TAILPRED.
              ST   R15,8(R14)         |   Set TAILPRED  = A(NODE).
              L    R14,4(,R15)        |   Point to NODE.Pred.
              MVC  0(4,R15),0(R14)    |   Set NODE.Succ = PRED.Succ.
              ST   R15,0(,R14)        |   Set PRED.Succ = A(NODE).
              MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   LI_REMHEAD                                                 *
* Purpose: Remove the first node in a list.                           *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         LI_REMHEAD &LIST=
              AIF       ('&LIST' EQ '').REQUIRED
              AGO       .OKAY
.REQUIRED     MNOTE     8,'LIST must be specified.'
.OKAY         ANOP
*                                     | Remove node from head of list:
              ##LA R15,&LIST          |   Point to the specified LIST.
              L    R14,0(,R15)        |   Point to the first NODE.
              MVC  0(4,R15),0(R14)    |   Set HEAD = NODE.Succ.
              L    R15,0(,R14)        |   Point to node's SUCC.
              MVC  4(4,R15),4(R14)    |   Set SUCC.Pred = NODE.Pred.
              MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   LI_REMTAIL                                                 *
* Purpose: Remove the last node in a list.                            *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         LI_REMTAIL &LIST=
              AIF       ('&LIST' EQ '').REQUIRED
              AGO       .OKAY
.REQUIRED     MNOTE     8,'LIST must be specified.'
.OKAY         ANOP
*                                     | Remove node from tail of list:
              ##LA R15,&LIST          |   Point to the specified LIST.
              L    R14,8(,R15)        |   Point to the last NODE.
              MVC  8(4,R15),4(R14)    |   Set TAILPRED = NODE.Pred.
              L    R15,4(,R14)        |   Point to node's PRED.
              MVC  0(4,R15),0(R14)    |   Set PRED.Succ = NODE.Succ.
              MEND
