*---------------------------------------------------------------------*
*  Copyright 2011 by Clemson University Research Foundation           *
*                                                                     *
*  Licensed under the Apache License, Version 2.0 (the "License");    *
*  you may not use this file except in compliance with the License.   *
*  You may obtain a copy of the License in this library as member     *
*  $LICENSE, or from                                                  *
*                                                                     *
*      http://www.apache.org/licenses/LICENSE-2.0                     *
*                                                                     *
*  Unless required by applicable law or agreed to in writing,         *
*  software distributed under the License is distributed on an "AS    *
*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either    *
*  express or implied.  See the License for the specific language     *
*  governing permissions and limitations under the License.           *
*---------------------------------------------------------------------*
SRVIMXRZ TITLE 'Item manager exercizer'
         SMLIST CONVERT=YES           |
*---------------------------------------------------------------------*
*
*  CSECT: SRVIMXRZ
*
*  COPYRIGHT: (C) Copyright Clemson University 1989
*
*  ABSTRACT: This program is used to as a test driver for the
*            Item Manager Service Processor.
*
*  MODULE ACTIVITY:  MGG 03/02/89 New
*
*---------------------------------------------------------------------*
         SPACE 2                      |
 block type=program,name=srvIMXRZ,options=(*pwa,xa,norent,erraddr),    +
               subopts=*swa,          |                                +
               basereg=(r12,r8),      |                                +
               amode=31,rmode=24      |
  copy  smsyms                        | Get Structured Macro symbols.
  copy  srvesmac                      | Get Environment Support macros.
  copy  srvplmac                      | Get PrintLine macros.
  copy  srvimmac                      | Get Item Manager macros.
  copy  srvdvmac                      | Get Data-in-virtural macros.
* *-------------------------------------------------------------------*
* *  Establish service processor IDs.
* *------------------------------------------------------------------*
  es_id id=es,spepname=&mvs_environment_support Id for Env. Support.
  pl_id id=pl,sizelength=4            | Print line service processor.
  im_id id=im,spepname="NEWIM   ",    | Id for Item Manager.           +
               tkncnvt=pwa_tkncnvt    |
* *-------------------------------------------------------------------*
* *  Load and start Environment Support Module.
* *------------------------------------------------------------------*
  es_mvs_load id=es                   | Load MVS environment support.
  es_start    id=es                   | Start environment support.
  errexit (treg,r15,nz),code=1        | Fail if there is an error.
* *-------------------------------------------------------------------*
* *  Load and start Print line service processor.
* *------------------------------------------------------------------*
  es_load_module id=es,spid=pl        | Load Print Line.
  errexit (treg,r15,nz),code=100      | Fail if there is an error.
  pl_start id=pl,ddname='SYSPRINT'    | Start environment support.
  errexit (treg,r15,nz),code=101      | Fail if there is an error.
* *-------------------------------------------------------------------*
* *  Load DIV Service Processor.
* *-------------------------------------------------------------------*
  es_load_module id=es,               | Load MVS DIV service processor.+
               epname=&mvs_div_manager,epa=pwadv
  errexit (treg,r15,nz),code=2        | Fail if there is an error.
* *-------------------------------------------------------------------*
* *  Load and start item manager service processor. Get the address
* *  of the token convert routine.
* *-------------------------------------------------------------------*
  es_load_module id=es,spid=im        | Load item manager.
  errexit (treg,r15,nz),code=3        | Fail if there is an error.
  im_start id=im,divepa=pwadv,divddn=psd_ddname,options=actual_address
  if (ch,r15,eq,=y(&im_item_storage_not_initialized))
   im_initialize id=im,itdstg=4096,   |  Initialize item managed stg.  +
               dfltincr=4096,sysincr=4096,uaincr=4096
   errexit (treg,r15,nz),code=4       |  Fail if there is an error.
  else                                | Else.
   errexit (treg,r15,nz),code=5       |  Fail if there is an error.
  endif                               | Endif.
  im_get_dangerous_addresses id=im    | Get address of token convert
  errexit (treg,r15,nz),code=6        | Fail if there is an error.
* *-------------------------------------------------------------------*
* *  Save the changes.
* *-------------------------------------------------------------------*
  im_save id=im                       | Save changes.
  errexit (treg,r15,nz),code=7        | Fail if there is an error.
* *-------------------------------------------------------------------*
* * Create an group for storage.
* *-------------------------------------------------------------------*
  im_create_group_descriptor id=im,   | Create group descriptor for    +
               desctkn=pwa_tii_group, |  TII items.                    +
               text=psd_group_description,                             +
               stgincr==a(16*4096)    |
  errexit (treg,r15,nz),code=8        | Fail if there is an error.
* *-------------------------------------------------------------------*
* * Create an ITD.
* *-------------------------------------------------------------------*
  im_create_item_type_descriptor id=im, Create ITD.                    +
               itemtype=pwa_tii_itd,  |                                +
               text=psd_tii_description,                               +
               grouptkn=pwa_tii_group,                                 +
               itemsz==a(tiiitmsz),   |                                +
               #links==a(tii#lnks),   |                                +
               linksoff==a(tiilinks-tii)
  errexit (treg,r15,nz),code=9        | Fail if there is an error.
* *-------------------------------------------------------------------*
* * Create an list descriptor.
* *-------------------------------------------------------------------*
  im_create_linked_list_descriptor id=im, Create LLD.                  +
               desctkn=pwa_lld_first, |                                +
               options=(heads_in_descriptor,list_order_first),         +
               nxtlnk#==a(tiinxtii_link_number),                       +
               prvlnk#==a(tiiprtii_link_number)
  errexit (treg,r15,nz),code=10       | Fail if there is an error.
* *-------------------------------------------------------------------*
* * Create an list descriptor.
* *-------------------------------------------------------------------*
  im_create_linked_list_descriptor id=im, Create LLD.                  +
               desctkn=pwa_lld_sort,  |                                +
               options=(heads_in_descriptor,list_order_first),         +
               nxtlnk#==a(tiinxtsr_link_number),                       +
               prvlnk#==a(tiiprtsr_link_number)
  errexit (treg,r15,nz),code=11       | Fail if there is an error.
* *-------------------------------------------------------------------*
* * Create a hash table descriptor.
* *-------------------------------------------------------------------*
  im_create_hash_table_descriptor id=im, Create a HTD.                 +
               desctkn=pwa_htd_token, |                                +
               synlnk#==a(tiisytii_link_number),                       +
               keyoff==a(tiikey-tii), |                                +
               keysz==a(l'tiikey)     |
  errexit (treg,r15,nz),code=12       | Fail if there is an error.
* *-------------------------------------------------------------------*
* * Create another list descriptor, this time in final order.
* *-------------------------------------------------------------------*
  im_create_linked_list_descriptor id=im, Create LLD.                  +
               desctkn=pwa_lld_final, |                                +
               options=(heads_in_descriptor,list_order_final),         +
               nxtlnk#==a(tiinxti2_link_number)
  errexit (treg,r15,nz),code=13       | Fail if there is an error.
* *-------------------------------------------------------------------*
* * Read a file and make an item for each record.  Connect it to
* * both lists.
* *-------------------------------------------------------------------*
  la    r9,pwa_tii_build_area         |
  using tii,r9                        |
  mvc   tiiitype,pwa_tii_itd          |
  block amode=24                      |
   open  (sysin,input)                |
  endblk                              |
  fill  pwa_previous_token,x'00'      |
  loop  until                         |
   block amode=24                     |
    get   sysin,tiistuff              |
   endblk                             |
   if not,(tbit,pwa_f_eof)            |
    im_store id=im,item=tii,          |                                +
               itemtkn=pwa_tii_token  |
    errexit (treg,r15,nz),code=14     |
    im_connect id=im,desctkn=pwa_lld_first
    errexit (treg,r15,nz),code=15     |
    im_connect id=im,desctkn=pwa_lld_final
    errexit (treg,r15,nz),code=16     |
    im_connect id=im,desctkn=pwa_lld_sort
    errexit (treg,r15,nz),code=17     |
    im_connect id=im,desctkn=pwa_htd_token
    errexit (treg,r15,nz),code=18     |
    im_obtain id=im,                  |                                +
               itemtkn=pwa_tii_token, |                                +
               item=pwa_tii_return_area
    errexit (treg,r15,nz),code=19     |
    im_modify id=im,                  |                                +
               itemtkn=pwa_tii_token, |                                +
               item=pwa_tii_return_area,                               +
               options=update_links   |
    errexit (treg,r15,nz),code=20     |
   endif                              |
  endloop until,(tbit,pwa_f_eof)      |
  block amode=24                      |
   close  (sysin)                     |
  endblk                              |
* *-------------------------------------------------------------------*
* *  Sort source.
* *-------------------------------------------------------------------*
  im_sort id=im,desctkn=pwa_lld_sort, |                                +
               fields=((tiikey-tii,l'tiikey,char,ascending)),          +
               technique=quick_sort   |
  errexit (treg,r15,nz),code=21       |
* *-------------------------------------------------------------------*
* *  Read both lists conparing results and writing results to file.
* *-------------------------------------------------------------------*
  la    r9,pwa_tii_return_area        |
  im_obtain_first id=im,              |                                +
               desctkn=pwa_lld_final, |                                +
               item=pwa_tii_return_area
  errexit (treg,r15,nz),code=22       | Fail if there is an error.
  im_obtain_first id=im,              |                                +
               desctkn=pwa_lld_sort,  |                                +
               item=pwa_tii_return_area4
  errexit (treg,r15,nz),code=23       | Fail if there is an error.
  im_obtain_final id=im,              |                                +
               desctkn=pwa_lld_first, |                                +
               item=pwa_tii_return_area2,                              +
               itemtkn=pwa_item_token |
  errexit (treg,r15,nz),code=24       | Fail if there is an error.
  loop until                          |
   leave loop=*,(ch,r15,eq,=y(&im_at_end))
   errexit (treg,r15,nz),code=25      |
   if (clc,pwa_tii_return_area,ne,pwa_tii_return_area2)
    errexit code=26                   |
   endif                              |
   im_convert_token_to_address id=im, |                                +
               itemtkn=pwa_item_token,                                 +
               itemaddr=r1            |
   errexit (treg,r1,z),code=27        |
   if (clc,pwa_tii_return_area2,ne,0(r1))
    errexit code=28                   |
   endif                              |
   if (clc,pwa_tii_return_area,ne,pwa_tii_return_area4)
    errexit code=29                   |
   endif                              |
   im_obtain_by_key id=im,key=tiikey, |                                +
               desctkn=pwa_htd_token, |                                +
               item=pwa_tii_return_area3
   errexit (treg,r15,nz)              |
   if (clc,pwa_tii_return_area,ne,pwa_tii_return_area3)
    errexit code=30                   |
   endif                              |
   pl_print_formatted id=pl,                                           +
               control=(' {CL80}'),                                    +
               source=(pwa_tii_return_area+2)
   errexit (treg,r15,nz),code=102
   im_obtain_next  id=im,             |                                +
               desctkn=pwa_lld_final, |                                +
               item=pwa_tii_return_area
   errexit (treg,r15,nz),and,not,(%im_at_end),code=31
   im_obtain_next  id=im,             |                                +
               desctkn=pwa_lld_sort,  |                                +
               item=pwa_tii_return_area4
   errexit (treg,r15,nz),and,not,(%im_at_end),code=32
   im_obtain_prior id=im,             |                                +
               desctkn=pwa_lld_first, |                                +
               item=pwa_tii_return_area2,                              +
               itemtkn=pwa_item_token |
   errexit (treg,r15,nz),and,not,(%im_at_end),code=33
  endloop until,leave                 |
* *-------------------------------------------------------------------*
* *  Remove every other item from sorted list until it is empty and
* *  print results each pass.
* *-------------------------------------------------------------------*
  fill  pwa_counter                   |
  loop until                          |
   l     r1,pwa_counter               |
   la    r1,1(,r1)                    |
   st    r1,pwa_counter               |
   fill  pwa_tii_token                |
   im_find_first id=im,               |                                +
               desctkn=pwa_lld_sort   |
   leave loop=*,(%im_at_end)          |
   loop until                         |
    errexit not,(%im_success),code=34 |
    im_disconnect id=im,              |                                +
               desctkn=pwa_lld_sort   |
    errexit not,(%im_success),code=35 |
    im_find_next id=im,               |                                +
               desctkn=pwa_lld_sort,  |                                +
               curtkn=pwa_tii_token,  |                                +
               itemtkn=pwa_tii_token  |
    leave loop=*,(%im_at_end)         |
    errexit not,(%im_success),code=36 |
    im_find_next id=im,               |                                +
               desctkn=pwa_lld_sort   |
   endloop until,(%im_at_end)         |
   pl_print_formatted id=pl,          |                                +
               control=(" Disconnect Pass {I}."),                      +
               source=(pwa_counter)
   errexit (treg,r15,nz),code=104
   im_obtain_first id=im,             |                                +
               desctkn=pwa_lld_sort,  |                                +
               item=pwa_tii_return_area
   loop while,not,(%im_at_end)        |
    errexit not,(%im_success),code=37 |
    pl_print_formatted id=pl,                                          +
               control=(' {CL80}'),                                    +
               source=(pwa_tii_return_area+2)
    errexit (treg,r15,nz),code=103
    im_obtain_next  id=im,            |                                +
               desctkn=pwa_lld_sort, |                                 +
               item=pwa_tii_return_area
   endloop while                      |
  endloop until,leave                 |
* *-------------------------------------------------------------------*
* *  Remove every other item from final list until it is empty and
* *  print results each pass. This list does not have prior links.
* *-------------------------------------------------------------------*
  fill  pwa_counter                   |
  loop until                          |
   l     r1,pwa_counter               |
   la    r1,1(,r1)                    |
   st    r1,pwa_counter               |
   fill  pwa_tii_token                |
   im_find_first id=im,               |                                +
               desctkn=pwa_lld_final  |
   leave loop=*,(%im_at_end)          |
   loop until                         |
    errexit not,(%im_success),code=34 |
    im_disconnect id=im,              |                                +
               desctkn=pwa_lld_final, |                                +
               prtkn=pwa_tii_token    |
    errexit not,(%im_success),code=35 |
    im_find_next id=im,               |                                +
               desctkn=pwa_lld_final, |                                +
               curtkn=pwa_tii_token,  |                                +
               itemtkn=pwa_tii_token  |
    leave loop=*,(%im_at_end)         |
    errexit not,(%im_success),code=36 |
    im_find_next id=im,               |                                +
               desctkn=pwa_lld_final  |
   endloop until,(%im_at_end)         |
   pl_print_formatted id=pl,          |                                +
               control=(" Disconnect Pass {I}."),                      +
               source=(pwa_counter)
   errexit (treg,r15,nz),code=104
   im_obtain_first id=im,             |                                +
               desctkn=pwa_lld_final, |                                +
               item=pwa_tii_return_area
   loop while,not,(%im_at_end)        |
    errexit not,(%im_success),code=37 |
    pl_print_formatted id=pl,                                          +
               control=(' {CL80}'),                                    +
               source=(pwa_tii_return_area+2)
    errexit (treg,r15,nz),code=103
    im_obtain_next  id=im,            |                                +
               desctkn=pwa_lld_final, |                                +
               item=pwa_tii_return_area
   endloop while                      |
  endloop until,leave                 |
* *-------------------------------------------------------------------*
* *  Save the changes.
* *-------------------------------------------------------------------*
  im_save id=im                       |
  errexit (treg,r15,nz),code=38       |
* *-------------------------------------------------------------------*
* *  Terminate service processors.
* *-------------------------------------------------------------------*
  pl_terminate id=pl                  | Terminate printline.
  errexit (treg,r15,nz),code=101      | Fail if there is an error.
  im_terminate id=im                  |
  errexit (treg,r15,nz),code=39       |
  es_terminate id=es                  |
  errexit (treg,r15,nz),code=40       |
* *-------------------------------------------------------------------*
* *  Unload service manager and environment support module.
* *-------------------------------------------------------------------*
  es_mvs_unload id=es                 |
* *-------------------------------------------------------------------*
 endblk block=srvIMXRZ                |
 space 2                              |
 block type=errexit                   |
* *-------------------------------------------------------------------*
* * Save module/offset, registers, return-code.
* *-------------------------------------------------------------------*
  stm   r0,r15,gdiregs                | Save registers at time of error
  la    r0,4(,r12)                    | Point to module identification.
  st    r0,gdimodid                   | Save in general debug area.
  mvc   gdirc,0(r14)                  | Copy return code.
  slr   r14,r12                       | Calculate offset at time of err
  sth   r14,gdioffst                  | Save in debug area.
  es_save_debug_info id=es,gdi=gdi    | Save debug information.
* *-------------------------------------------------------------------*
* * Print debug info and abend.
* *-------------------------------------------------------------------*
  es_display_debug_info_and_abend id=es
 endblk                               |
 block name=eof,type=subroutine,options=*nosubopts
  sbit pwa_f_eof                      |
 endblk                               |
 space 2                              |
         psd                          |
psd_ddname dc  al1(6),c"LINEAR"       |
psd_tii_description im_text "Sample Test Item"
psd_group_description im_text "Group for Sample Test Item"
sysin    dcb   ddname=sysin,dsorg=ps,macrf=gm,eodad=eof,lrecl=80
         ltorg ,                      |
         endpsd                       |
         title "Dsects"               |
tii      dsect ,                      |
tiiitype ds    h                      |
tiistuff ds    cl80                   |
tiikey   equ   *-8,8,c'c'             |
tiilinks ds    0f                     |
tiinxtii ds    f                      |
tiinxtii_link_number equ (*-tiilinks)/4
tiiprtii ds    f                      |
tiiprtii_link_number equ (*-tiilinks)/4
tiinxti2 ds    f                      |
tiinxti2_link_number equ (*-tiilinks)/4
tiinxtsr ds    f                      |
tiinxtsr_link_number equ (*-tiilinks)/4
tiiprtsr ds    f                      |
tiiprtsr_link_number equ (*-tiilinks)/4
tiisytii ds    f                      |
tiisytii_link_number equ (*-tiilinks)/4
tii#lnks equ   (*-tiilinks)/4         |
tiiitmsz equ   *-tii                  |
         title "Program Work Area"    |
         pwa                          |
pwaaesv  ds    a     address of service processor global area
pwaestkn ds    a     environment support token
pwaes    ds    a     environment support entry point address
pwadvtkn ds    a     div service processor for testing
pwadv    ds    a     div entry point address
pwaimtkn ds    a     item manager service processor for testing
pwaim    ds    a     item manager entry point address
pwa_tkncnvt ds a     token convert routine address
         es_gdi dsect=no              |
pwa_tii_group ds f   Token of group.  |
pwa_quick_get_address ds a            |
pwa_size ds    f                      |
pwa_size_bytes ds f                   |
pwa_area ds    a                      |
pwa_counter                  ds  f    |
pwa_D                        ds  d    |
pwa_tii_token                ds  f    |
pwa_htd_token                ds  f    |
pwa_lld_first                ds  f    |
pwa_lld_final                ds  f    |
pwa_lld_sort                 ds  f    |
pwa_item_token               ds  f    |
pwa_previous_token           ds  f    |
pwa_tii_build_area      ds xl(tiiitmsz)
pwa_tii_return_area     ds xl(tiiitmsz)
pwa_tii_return_area2    ds xl(tiiitmsz)
pwa_tii_return_area3    ds xl(tiiitmsz)
pwa_tii_return_area4    ds xl(tiiitmsz)
pwa_tii_itd                  ds  h    |
pwa_f     ds    x                     |
pwa_f_eof equ  b'10000000'            |
         endpwa                       |
         end   ,                      |
