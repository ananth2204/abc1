*---------------------------------------------------------------------*
*  Copyright 2011 by Clemson University Research Foundation           *
*                                                                     *
*  Licensed under the Apache License, Version 2.0 (the "License");    *
*  you may not use this file except in compliance with the License.   *
*  You may obtain a copy of the License in this library as member     *
*  $LICENSE, or from                                                  *
*                                                                     *
*      http://www.apache.org/licenses/LICENSE-2.0                     *
*                                                                     *
*  Unless required by applicable law or agreed to in writing,         *
*  software distributed under the License is distributed on an "AS    *
*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either    *
*  express or implied.  See the License for the specific language     *
*  governing permissions and limitations under the License.           *
*---------------------------------------------------------------------*
//SRVFIXRZ JOB TIME=(,3)
/*JOBPARM LINES=9
//  EXEC  ASMPCL,COPT=',RENT',LOPT=',RENT,REUS,REFR,AC=1',
//    PDS='SYS1.APF.TEST',NAME=SRVFIXRZ,MAC=SYSTEMS
//P.SYSIN  DD  *
     SMLIST CONVERT=YES
SRVFIXRZ     TITLE 'Exerciser For OS File Handler Service Processor'
*---------------------------------------------------------------------*
*
*  Copyright (C) 1989 Clemson University
*
*  Program     SRVFIXRZ
*
*  Abstract    This routine is used as an exerciser for the macros and
*              functions of the OS File Handler service processor.{
*              xxx
*
*  Inputs:
*      Parameters  None
*      Files       See the code
*      Other       None
*
*  Outputs:
*      Returncodes xxxxx
*      Messages    xxxxx
*      Files       See the code
*      Other       None
*
*  PROGRAM     Reentrant, problem key and state, standard linkage,
*  ATTRIBUTES  non-authorized, AMODE(24), RMODE(24)
*
*  Special     xxx
*  Notes       xxx
*
*  Change
*  History     09/15/89 ___ - New
*              __/__/__ ___
*              __/__/__ ___
*
*  Method of   xxx
*  Operation   xxx
*
*
*---------------------------------------------------------------------*
         EJECT
     print off
     copy  srvesmac
     copy  srvplmac
     copy  srvfimac
     print on,gen
     copy  ##plist
     eject
 block name=SRVFIXRZ,type=program,options=(*pwa,xa,mode),amode=31,     *
               rmode=any
     eject
  modeset key=zero,mode=sup
  es_id id=es,esva=pwa_esv_address,                                    +
               spepa=pwa_es_epa,                                       +
               sptoken=pwa_es_token
     space 3
  pl_id        id=pl,esva=pwa_esv_address,                             *
               esid=es,                                                *
               spepname=&Print_Line,                                   *
               spepa=pwa_epa,                                          *
               sptoken=pwa_pl_token,                                   *
               sizelength=4
     space 3
  fi_id        id=FI,esva=pwa_esv_address,                             *
               esid=es,                                                *
               spepa=pwa_fi_epa,                                       *
               spepname=&fi_os_file_handler
  fi_id        id=FO,esva=pwa_esv_address,                             *
               esid=es,                                                *
               spepa=pwa_fi_epa,                                       *
               spepname=&fi_os_file_handler
     eject
  es_MVS_load id=ES
  ES_Start id=ES
  ES_Load_Module id=ES,spid=PL
  if    (treg,r15,nz)
   ex    0,*
  endif
  PL_Start     ID=PL,                                                  *
               DDNAME=stcddnam,                                        *
               PageSize=55,                                            *
               MaxLnSz=121
  errexit (treg,r15,nz)
  ES_Load_Module id=ES,spid=FI
  if    (treg,r15,nz)
   ex    0,*
  endif
  FI_Start     ID=FI,                                                  *
               file=psd_dsname,                                        *
               options=(input,filename)
  errexit (treg,r15,nz)
  FI_OS_Info   unit=psd_sysda,      << not presently used >>           *
               dirblks=psd_dirblks,                                    *
               pl=pwa_info
  FI_Start     ID=FO,                                                  *
               file=psd_dsnout,                                        *
               recordlength=(80),                                      *
               options=(output,existing)
*              recordlength=(80,251),
*              filesize=(15000,5000),
  errexit (treg,r15,nz)
  PL_Set_Formatted_Header ID=PL,                                       *
               Line=10,                                                *
               control="1Listing of dataset {CL? T}:",                 *
               Source=(psd_dsname,=a(l'psd_dsname))
  errexit (treg,r15,nz)
  PL_Set_Header ID=PL,                                                 *
               Line=20,                                                *
               string=" "
  errexit (treg,r15,nz)
  la    r7,1
  loop  until
   st    r7,pwa_counter
   fill  pwa_input_line,c' '
   fi_readline id=FI,                                                  *
               line=pwa_input_line,                                    *
               resultlen=pwa_input_length
   if    (treg,r15,nz)
    if    (ch,r15,eq,=h'&fi_end_of_file')
     PL_print_formatted ID=PL,                                         *
               control="0End of listing of {CL? T}.",                  *
               Source=(psd_dsname,=a(l'psd_dsname))
     errexit (treg,r15,nz)
     leave loop=*
    else
     errexit (treg,r15,nz)
    endif
   endif
   la    r1,pwa_input_line          Trim input line
   la    r15,71(r1)
   loop  bct
    leave loop=*,(cli,0(r15),ne,c' '),or,(cr,r15,le,r1)
   endloop bct,r15
   la    r15,1(r15)
   if    (cr,r15,le,r1)
    la    r15,1
   else
    sr    r15,r1
   endif
   st    r15,pwa_line_length
   fi_writeline id=FO,                                                 *
               line=(pwa_input_line,pwa_line_length)
   errexit (treg,r15,nz)
   PL_Print_Formatted id=PL,                                          **
               control=" Line {I}: {CL80 T}",                          *
               Source=(pwa_counter,pwa_input_line)  pwa_input_length)
   errexit (treg,r15,nz)
   la    r7,1(r7)
  endloop until,leave
     eject
  PL_Terminate   ID=PL
  errexit (treg,r15,nz)
  FI_Terminate   ID=FI
  errexit (treg,r15,nz)
  FI_Terminate   ID=FO
  errexit (treg,r15,nz)
     eject
  modeset key=nzero,mode=prob
 endblk
 block type=errexit
* ex    0,*
  es_display_debug_info_and_abend id=es
 endblk
     psd   ,
stcddnam dc   cl8'sysprint'
psd_dsname  dc  c'''MICHAEL.misc.clist(dttest)''' Something to list.
psd_dsnout  dc  c'''MICHAEL.DOESNT.EXIST(sample2)'''
psd_sysda   dc   cl8'sysda'
psd_sp000a  dc   cl6'sp000a'
psd_dirblks dc   al3(15)
     endpsd ,
     pwa   ,
pwa_info ds    cl12   ,3f
pwap1    ds    f
pwap2    ds    f
pwap3    ds    f
pwapage# ds    f
pwapage#2 ds   f
pwaline# ds    f
pwa_counter ds f
pwa_esv_address   ds   f
pwa_epa           ds   f
pwa_es_epa        ds   f
pwa_fi_epa        ds   f
pwa_pl_token      ds   f
pwa_es_token      ds   f
pwa_input_line    ds   cl251
pwa_input_length  ds   f
pwa_line_length   ds   f
     endpwa ,
     end   ,
//C.SYSLIB DD
//         DD
//         DD DSN=SYSTEMS.SRV.SOURCE,DISP=SHR
