.*--------------------------------------------------------------------*
.*                                                                    *
.*                                                                    *
.*               Part II. Service Processors Reference                *
.*                                                                    *
.*                                                                    *
.*--------------------------------------------------------------------*
:h0 id=spref.Service Processors Reference
.*SRVESMVS*************************************************************
.*                                                                    *
.*              Chapter. Description of Service Processors            *
.*                                                                    *
.**********************************************************************
:h1.Description Of Service Processors
:p.
This chapter contains reference information that applies to all service
processors.  Each of the remaining chapters in :hdref refid=spref
page=no. describes a different kind of service processor, with the
name of the processor at the bottom of odd-numbered pages for easy
reference.
.*--------------------------------------------------------------------*
:h2.Service Processors
.*--------------------------------------------------------------------*
:p.
A :hp2.service processor:ehp2. is a subroutine that provides a set of
related services using normal subroutine calls to a single point of
entry.  The first two parameters are the same for all service
processors: a :#xb.token:e#xb. and a :#xb.function code:e#xb..  The
:#xb.function code:e#xb. parameter is a signed fullword integer set by
the calling program to select the desired service.  Two function codes,
:#x.START:e#x. and :#x.TERMINATE:e#x., are supported by all service
processors.  The :#xb.token:e#xb. parameter is a four byte value whose
contents are set by the service processor itself when the
:#x.START:e#x. function code is selected.  Additional parameters may be
required or optional, depending on the selected function code. The
general form of a service processor subroutine call looks like:
:xmp.
call service_processor,(token,function_code,additional_parameters)
:exmp.
:p.
As a general rule, each service processor supports a unique set of
services.  For example, there is only one :#x.Memory Manager:e#x. and
only one :#x.String Handler:e#x..  In some cases though, several service
processors may support the same set of services but provide access to
different execution environments or to a different kind of resource.
For example, there are several :#x.File Handler:e#x. service processors.
They all support pretty much the same services, but for completely
different kinds of files.
:p.
When more than one service processor supports the same set of services,
it is helpful to distinguish between a :hp1.service processor:ehp1. and
the :hp1.protocol:ehp1. it follows.  Remember that a service processor
is a subroutine.  The protocol it follows includes everything a program
must know in order to use it: calling sequences, required and optional
parameters, function codes, return codes, data structures, etc.
:p.
While the distinction between a service processor and its protocol is
often blurred, the distinction is important as it allows for flexible
code to be written.  The only part of a program that must know what
service processor is being used for a given set of services is the part
that chooses which subroutine to load.  The remaining code can use the
processor's services without knowing or caring what subroutine is being
invoked, so long as it follows the correct protocol.  This makes it easy
to access various resources or environments that are similar in nature,
with little or no change in code.
.*--------------------------------------------------------------------*
:h2.Naming Conventions
.*--------------------------------------------------------------------*
:p.
A unique two-letter identification code has been assigned to every
publicly available service processor.  This code is used as part of
every name associated with a service processor protocol.  The service
processor identification codes for all public service processors are
shown in :tref refid=spics..
:p.
Using :hp1.sp:ehp1. to represent the two-letter service processor
identifier codes shown in :tref refid=spics page=no., the various
components of a service processor are named as follows:
:ol.
:li.The names of :hp2.Macros, Symbols, Conditions, Data areas:ehp2., and
everything other than PDS member names are prefixed with the two-letter
code followed by an underscore, ":#x._:e#x.", followed by an arbitrary
name.  Any name beginning with ":hp1.sp_:ehp1." is a part of the service
processor protocol assigned to the :hp1.sp:ehp1. service processor
identification code.
:li.:hp2.PDS Members:ehp2. for service processors are named as follows:
:ol.
:li.:hp2.Load Modules:ehp2. are named :#x.SRV:e#x.:hp1.sp:ehp1., unless
a service processor has an environmental dependency in which case the
name is :#x.SRV:e#x.:hp1.sp:ehp1.:hp3.env:ehp3., where :hp3.env:ehp3. is
up to three letters chosen to indicate the dependency.  For example,
:#x.SRVES:e#x.:#xb.MVS:e#xb.  is the name of the
:hp3.MVS:ehp3. Environment Support service processor load module.
:li.:hp2.Assembler COPY members:ehp2. are named
:#x.SRV:e#x.:hp1.sp:ehp1.:#x.MAC:e#x..
:li.:hp2.Internal COPY members:ehp2.  are named
:#x.SRV:e#x.:hp1.sp:ehp1.:#x.IMC:e#x..
:li.:hp2.Excerciser:ehp2. programs and data are named
:#x.SRV:e#x.:hp1.sp:ehp1.:#x.XR:e#x.:hp1.z:ehp1., where :hp1.z:ehp1.
is an arbitrary character (usually :#x.Z:e#x.).
:li.:hp2.BookMaster Reference Chapters:ehp2. for are named
:#x.SRVDOC:e#x.:hp1.sp:ehp1..
:eol.
:li.:hp2.A composite load module:ehp2. containing various service
processors link-edited together with a Module Name Table and an
Environment Support service processor is named
:#x.SRVCM:e#x.:hp3.env:ehp3..  The
corresponding Environment Support load module is an alias of the
composite (e.g. :#x.SRVESMVS:e#x. is an alias of
:#x.SRVCMMVS:e#x., where :#x.SRVCMMVS:e#x.
contains MVS Environment Support as the main entry point, a module name
table, and a number of service processors that have been linked into the
module).
:eol.
.*
:tdef id=spicsd cols='* 0.30i 0.60i 0.60i 0.60i'
      align='left center center left left'
      frame=box rules=vert hdframe=rules compact mindepth=p5.
:table id=spics refid=spicsd.
:tcap.Service processor codes and member names
:thd.
:c.Service Processor
:c.Code
:c.Environment Dependent
:c.Copy Member
:c.Load Module(s)
:ethd.
:tft refid=spicsd temp.
:c.
:etft.
:row.
:c.Data In Virtual Manager
:c.:#xb.DV:e#xb.
:c.:#x.YES:e#x.
:c.:#x.SRV:#xb.DV:e#xb.MAC:e#x.
:c.:#x.SRV:#xb.DV:e#xb.MVS:e#x.
:row.
:c.Date/Time Services
:c.:#xb.DT:e#xb.
:c.:#x.NO:e#x.
:c.:#x.SRV:#xb.DT:e#xb.MAC:e#x.
:c.:#x.SRV:#xb.DT:e#x.
:row.
:c.Environment Support
:c.:#xb.ES:e#xb.
:c.:#x.YES:e#x.
:c.:#x.SRV:#xb.ES:e#xb.MAC:e#x.
:c.:#x.SRV:#xb.ES:e#xb.MVS:e#x.
:row.
:c.File Handler
:c.:#xb.FI:e#xb.
:c.:#x.YES:e#x.
:c.:#x.SRV:#xb.FI:e#xb.MAC:e#x.
:c.
:#x.SRV:#xb.FI:e#xb.OS:e#x.
:#x.SRV:#xb.FI:e#xb.XID:e#x.
:#x.SRV:#xb.FI:e#xb.PDF:e#x.
:#x.SRV:#xb.FI:e#xb.SMS:e#x.
:#x.SRV:#xb.FI:e#xb.SUB:e#x.
:row.
:c.Item Manager
:c.:#xb.IM:e#xb.
:c.:#x.NO:e#x.
:c.:#x.SRV:#xb.IM:e#xb.MAC:e#x.
:c.:#x.SRV:#xb.IM:e#x.
:row.
:c.Memory Manager
:c.:#xb.MM:e#xb.
:c.:#x.NO:e#x.
:c.:#x.SRV:#xb.MM:e#xb.MAC:e#x.
:c.:#x.SRV:#xb.MM:e#x.
:row.
:c.Message
:c.:#xb.MS:e#xb.
:c.:#x.NO:e#x.
:c.:#x.SRV:#xb.MS:e#xb.MAC:e#x.
:c.:#x.SRV:#xb.MS:e#x.
:row.
:c.PrintLine
:c.:#xb.PL:e#xb.
:c.:#x.YES:e#x.
:c.:#x.SRV:#xb.PL:e#xb.MAC:e#x.
:c.:#x.SRV:#xb.PL:e#xb.MVS:e#x.
:row.
:c.String Handler
:c.:#xb.ST:e#xb.
:c.:#x.NO:e#x.
:c.:#x.SRV:#xb.ST:e#xb.MAC:e#x.
:c.:#x.SRV:#xb.ST:e#x.
:row.
:c.Symbol Manager
:c.:#xb.SY:e#xb.
:c.:#x.NO:e#x.
:c.:#x.SRV:#xb.SY:e#xb.MAC:e#x.
:c.:#x.SRV:#xb.SY:e#x.
:etable.
.*--------------------------------------------------------------------*
:h2 id=linkage.Linkage Conventions
.*--------------------------------------------------------------------*
:p.
Service processors conform to standard System/370 linkage conventions
for programs running in 31-bit addressing mode.  When the calling
program invokes a service processor function, registers 1, 13, 14, and
15 must contain the following values, all of which are 31-bit addresses:
:ul compact.
:li.Register 1 must contain the address of a variable-length service
processor parameter list.
:li.Register 13 must contain the address of a 72-byte register save area
aligned on a fullword boundary.
:li.Register 14 must contain the address to which control will be
returned.
:li.Register 15 must contain the service processor's entry point
address
:eul.
:p.
The parameter list pointed to by register 1 is a sequence of fullword
addresses aligned on fullword boundaries.  All addresses but the final
one in the list contain a :#x.:hp2.0:ehp2.:e#x. in their high-order
bit. The final address is denoted by a :#x.:hp2.1:ehp2.:e#x. in its
high-order bit.  Each address in the list points to the corresponding
parameter that is being passed to the service processor.  This is
depicted by :figref refid=plist page=no. below:
:fig id=plist.
.sp;.in 0.15i
.bf hi2
Register 1
.pf
.bx new thick thick 0.15i 1.15i
.ti ~ 05;.tp 0.20i
~&uar.Parmlist
.bx off
.sp
:i1.function code
:i1.token
.bf hi2
Parmlist
.pf
.se temp='thick 0.15i 1.15i 2.15i 3.15i 3.85i thin 3.95i medium 4.85i'
.bx new thick &temp.
.ti ~ 05;.tp 0.18i 1.18i 2.18i 3.40i 3.86i 3.98i
:elines.
~&uar.token~&uar.function code~&uar.parameter 1~...
:#x.:hp2.~1:ehp2.:e#x.~&uar.parameter n
.bx off
:figcap.Parameter list conventions
:efig.
:p.
Optional parameters may be omitted by setting their corresponding
parameter list address (&uar.parameter :hp1.x:ehp1.) to zero.  If the
parameters to be omitted occur at the end of the parameter list, the
list may be terminated early by setting the high-order bit of the last
supplied (not omitted) parameter address.  The token and function code
parameters are :hp1.never:ehp1. optional.  Thus, the minimum possible
call to invoke a service processor function looks like the following
(for a program written with the Structured Macros):
:xmp.
CALLX SERVICE_PROCESSOR,(TOKEN,FUNCTION_CODE),VL
:exmp.
:p.
On return from a service processor function, all registers except
register 15 will contain their original values.  Register 15 will be set
to an integer indicating the results of the function's operation.  This
value is the function's :hp1.return code:ehp1., and each function has
its own set of return codes.  A return code of zero always indicates
success.  The reference section for each service processor's function
describes the possible return codes, their meanings, and the appropriate
actions to be taken by the calling program.
