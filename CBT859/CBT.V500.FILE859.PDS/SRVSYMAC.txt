*---------------------------------------------------------------------*
*  Copyright 2011 by Clemson University Research Foundation           *
*                                                                     *
*  Licensed under the Apache License, Version 2.0 (the "License");    *
*  you may not use this file except in compliance with the License.   *
*  You may obtain a copy of the License in this library as member     *
*  $LICENSE, or from                                                  *
*                                                                     *
*      http://www.apache.org/licenses/LICENSE-2.0                     *
*                                                                     *
*  Unless required by applicable law or agreed to in writing,         *
*  software distributed under the License is distributed on an "AS    *
*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either    *
*  express or implied.  See the License for the specific language     *
*  governing permissions and limitations under the License.           *
*---------------------------------------------------------------------*
 TITLE 'SRVSYMAC: Symbol Manager Service Processor Symbols && Macros.'
*---------------------------------------------------------------------*
*
*  Copy File:  SRVSYMAC
*
*  Purpose:    Symbol Manager service processor symbols and macros.
*
*  Description: See "Service Processors User's Guide and Reference".
*
*  Change
*  History   2011/10/20 JCB - Patch rollup for CBT tape distribution
*
*---------------------------------------------------------------------*
*
***********************************************************************
***********************************************************************
**                                                                   **
**                     Symbol Definitions                            **
**                                                                   **
***********************************************************************
***********************************************************************
*
* Global declarations for all string handler symbols.
*
 GBLC &SYMBOL_MANAGER
 GBLA &SY_START,&SY_TERMINATE,&SY_TRACE,&SY_OPEN_BLOCK
 GBLA &SY_CLOSE_BLOCK,&SY_ENTER_BLOCK,&SY_EXIT_BLOCK,&SY_INSTALL
 GBLA &SY_LOCATE,&SY_LOCATE_NEXT,&SY_DELETE,&SY_UPDATE
 GBLA &SY_GET_NAME,&SY_SYMBOL_NOT_FOUND,&SY_SYMBOL_ALREADY_INSTALLED
 GBLA &SY_MEMORY_PROBLEM,&SY_INVALID_CAPS_PARAMETER
 GBLA &SY_INVALID_FUNCTION,&SY_INVALID_NAME
 GBLA &SY_INVALID_NUMBER_OF_PARMS,&SY_INVALID_SYMBOL_TABLE
 GBLA &SY_NO_BLOCKS_OPEN,&SY_CANNOT_OPEN_BLOCK
 GBLA &SY_STORAGE_NOT_AVAILABLE,&SY_SYMBOL_TABLE_NOT_USEABLE
 GBLA &SY_NO_NEXT_SYMBOL,&SY_INVALID_HASHSIZE,&SY_INVALID_INCREMENT
*
* Entry Point name for the symbol manager.
*
&SYMBOL_MANAGER                         SETC '''SRVSY   '''
*
* Function codes.
*
&SY_START                               SETA  1
&SY_TERMINATE                           SETA  2
&SY_TRACE                               SETA  3
&SY_OPEN_BLOCK                          SETA  4
&SY_CLOSE_BLOCK                         SETA  5
&SY_ENTER_BLOCK                         SETA  6
&SY_EXIT_BLOCK                          SETA  7
&SY_INSTALL                             SETA  8
&SY_LOCATE                              SETA  9
&SY_LOCATE_NEXT                         SETA 10
&SY_DELETE                              SETA 11
&SY_UPDATE                              SETA 12
&SY_GET_NAME                            SETA 13
*
* Return codes.
*
&SY_SYMBOL_NOT_FOUND                    SETA  1
&SY_SYMBOL_ALREADY_INSTALLED            SETA  2
&SY_MEMORY_PROBLEM                      SETA  3
&SY_INVALID_CAPS_PARAMETER              SETA  4
&SY_INVALID_FUNCTION                    SETA  5
&SY_INVALID_LENGTH                      SETA  6
&SY_INVALID_NUMBER_OF_PARMS             SETA  7
&SY_INVALID_SYMBOL_TABLE                SETA  8
&SY_NO_BLOCKS_OPEN                      SETA  9   <--- not used now.
&SY_CANNOT_OPEN_BLOCK                   SETA 10   <--- not used now.
&SY_STORAGE_NOT_AVAILABLE               SETA 11
&SY_SYMBOL_TABLE_NOT_USEABLE            SETA 12
&SY_NO_NEXT_SYMBOL                      SETA 13   <--- not used now.
&SY_INVALID_HASHSIZE                    SETA 14
&SY_INVALID_INCREMENT                   SETA 15
&SY_MISSING_NAME                        SETA 16
 DEFUCOND MACRO=SRV##RC,NAME=SY_SYMBOL_NOT_FOUND
 DEFUCOND MACRO=SRV##RC,NAME=SY_SYMBOL_ALREADY_INSTALLED
 DEFUCOND MACRO=SRV##RC,NAME=SY_MEMORY_PROBLEM
 DEFUCOND MACRO=SRV##RC,NAME=SY_INVALID_CAPS_PARAMETER
 DEFUCOND MACRO=SRV##RC,NAME=SY_INVALID_FUNCTION
 DEFUCOND MACRO=SRV##RC,NAME=SY_INVALID_LENGTH
 DEFUCOND MACRO=SRV##RC,NAME=SY_INVALID_NUMBER_OF_PARMS
 DEFUCOND MACRO=SRV##RC,NAME=SY_INVALID_SYMBOL_TABLE
 DEFUCOND MACRO=SRV##RC,NAME=SY_NO_BLOCKS_OPEN
 DEFUCOND MACRO=SRV##RC,NAME=SY_CANNOT_OPEN_BLOCK
 DEFUCOND MACRO=SRV##RC,NAME=SY_STORAGE_NOT_AVAILABLE
 DEFUCOND MACRO=SRV##RC,NAME=SY_SYMBOL_TABLE_NOT_USEABLE
 DEFUCOND MACRO=SRV##RC,NAME=SY_NO_NEXT_SYMBOL
 DEFUCOND MACRO=SRV##RC,NAME=SY_INVALID_HASHSIZE
 DEFUCOND MACRO=SRV##RC,NAME=SY_INVALID_INCREMENT
 DEFUCOND MACRO=SRV##RC,NAME=SY_MISSING_NAME
                        EJECT
***********************************************************************
***********************************************************************
**                                                                   **
**                     Macro Definitions                             **
**                                                                   **
***********************************************************************
***********************************************************************
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   SY_ID                                                      *
*                                                                     *
* Purpose: Establish default values for a specific service processor  *
*          and associate them with the specified ID name. The values  *
*          are stored in the following created global variables:      *
*                                                                     *
* Variable Name                     Description                       *
* -------------  ---------------------------------------------------- *
* #$&ID.$#IDMAC  Name of macro that created the ID: SY_ID.            *
* #$&ID.$#ESID   Service processor's Environment Support ID.          *
* #$&ID.$#EPN    Tag for Service processor's Entry Point Name.        *
* #$&ID.$#EPA    Tag for Service processor's Entry Point Address.     *
* #$&ID.$#TKN    Tag for Service processor's Entry Point Token.       *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         SY_ID &ID=,&ESVA=,&SPEPNAME=,&SPEPA=,&SPTOKEN=,&ESID=
         LCLC  &L_EPNAME
         GBLC  &SYMBOL_MANAGER
.*
.* If no EPNAME was specified, use the generic Symbol Manager.
.*
&L_EPNAME SETC '&SPEPNAME'
          AIF  ('&L_EPNAME' NE '').PAST_EPN
&L_EPNAME SETC '&SYMBOL_MANAGER'
.PAST_EPN ANOP
.*
.* Invoke SRV##ID to create globals used by all ID's.
.*
         SRV##ID SET,                                                  +
               ID=&ID.,IDMAC=SY_ID,ESID=&ESID.,SPEPNAME=&L_EPNAME,     +
               SPEPA=&SPEPA,SPTOKEN=&SPTOKEN.
         MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   SY_START                                                   *
* Purpose: Generate code to start a new symbol manager session.       *
*                                                                     *
*   Keyword                     Description                           *
* -----------  ------------------------------------------------------ *
* ATTRSIZE     =tag containing the (fixed) length of an attribute.    *
* HASHSIZE     =tag containing the number of hash-table slots.        *
* MEMINCR      =tag containing the memory increment size.             *
* CAPS         =ON if symbols to be capitalized in table. Else =OFF.  *
* TRACE        =ON if symbol-manager calls to produce trace info.     *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         SY_START &ID=,&SPEPA=,&SPTOKEN=,&ESVA=,                       +
               &ATTRSIZE=,&HASHSIZE=,&MEMINCR=,&CAPS=,&TRACE=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &SY_START                  SETC in open code.
         LCLC  &S_CAPS,&S_TRACE
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN,ESVA),                    +
               ID=&ID,IDMAC=SY_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN,       +
               ESVA=&ESVA.
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Validate the CAPS keyword.
.*
            AIF   ('&CAPS' EQ ''  ).CAPS_NS
            AIF   ('&CAPS' EQ 'Y'  ).CAPS_ON
            AIF   ('&CAPS' EQ 'YES').CAPS_ON
            AIF   ('&CAPS' EQ 'ON' ).CAPS_ON
            AIF   ('&CAPS' EQ 'N'  ).CAPS_OF
            AIF   ('&CAPS' EQ 'NO' ).CAPS_OF
            AIF   ('&CAPS' EQ 'OFF').CAPS_OF
            MNOTE 8,'CAPS must be either ON or OFF.'
            MEXIT
.CAPS_NS    ANOP
&S_CAPS     SETC ''
            AGO .PAST_CAPS
.CAPS_ON    ANOP
&S_CAPS     SETC '''ON'''
            AGO .PAST_CAPS
.CAPS_OF    ANOP
&S_CAPS     SETC '''OFF'''
.PAST_CAPS  ANOP
.*
.* Validate the TRACE keyword.
.*
            AIF   ('&TRACE' EQ '' ).TRACE_NS
            AIF   ('&TRACE' EQ 'Y' ).TRACE_ON
            AIF   ('&TRACE' EQ 'YES').TRACE_ON
            AIF   ('&TRACE' EQ 'ON' ).TRACE_ON
            AIF   ('&TRACE' EQ 'N' ).TRACE_OF
            AIF   ('&TRACE' EQ 'NO' ).TRACE_OF
            AIF   ('&TRACE' EQ 'OFF').TRACE_OF
            MNOTE 8,'TRACE must be either ON or OFF.'
            MEXIT
.TRACE_NS   ANOP
&S_TRACE    SETC ''
            AGO .PAST_TRACE
.TRACE_ON   ANOP
&S_TRACE    SETC '''ON'''
            AGO .PAST_TRACE
.TRACE_OF   ANOP
&S_TRACE    SETC '''OFF'''
.PAST_TRACE ANOP
.*
.* Start the Symbol Manager.
.*
         MVC   &#_IDTKN,=F'0'            | Insure TOKEN = 0.
         AIF   ('&S_TRACE'  NE '').CALL5
         AIF   ('&MEMINCR'  NE '').CALL4
         AIF   ('&HASHSIZE' NE '').CALL3
         AIF   ('&S_CAPS'   NE '').CALL2
         AIF   ('&ATTRSIZE' NE '').CALL1
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&SY_START,&#_IDESVA,&ATTRSIZE),VL
         MEXIT
.CALL2   CALLX &#_IDEPA,(&#_IDTKN,&SY_START,&#_IDESVA,&ATTRSIZE,       +
               &S_CAPS),VL
         MEXIT
.CALL3   CALLX &#_IDEPA,(&#_IDTKN,&SY_START,&#_IDESVA,&ATTRSIZE,       +
               &S_CAPS,&HASHSIZE),VL
         MEXIT
.CALL4   CALLX &#_IDEPA,(&#_IDTKN,&SY_START,&#_IDESVA,&ATTRSIZE,       +
               &S_CAPS,&HASHSIZE,&MEMINCR),VL
         MEXIT
.CALL5   CALLX &#_IDEPA,(&#_IDTKN,&SY_START,&#_IDESVA,&ATTRSIZE,       +
               &S_CAPS,&HASHSIZE,&MEMINCR,&S_TRACE),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   SY_TERMINATE                                               *
* Purpose: Generate code to terminate a symbol manager session.       *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         SY_TERMINATE &ID=,&SPEPA=,&SPTOKEN=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &SY_TERMINATE              SETC in open code.
.*
.* Obtain service processor ID values and terminate service processor.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=SY_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         CALLX &#_IDEPA,(&#_IDTKN,&SY_TERMINATE),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   SY_TRACE                                                   *
* Purpose: Generate code to turn symbol management tracing on/off.    *
*                                                                     *
*   Keyword                     Description                           *
* -----------  ------------------------------------------------------ *
* TRACE        =ON if symbol-manager calls to produce trace info.     *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         SY_TRACE &ID=,&SPEPA=,&SPTOKEN=,&TRACE=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &SY_TRACE                  SETC in open code.
         LCLC  &S_TRACE
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=SY_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Validate the TRACE keyword.
.*
         AIF   ('&TRACE' EQ '' ).TRACE_NS
         AIF   ('&TRACE' EQ 'Y' ).TRACE_ON
         AIF   ('&TRACE' EQ 'YES').TRACE_ON
         AIF   ('&TRACE' EQ 'ON' ).TRACE_ON
         AIF   ('&TRACE' EQ 'N' ).TRACE_OF
         AIF   ('&TRACE' EQ 'NO' ).TRACE_OF
         AIF   ('&TRACE' EQ 'OFF').TRACE_OF
         MNOTE 8,'TRACE must be either ON or OFF.'
         MEXIT
.TRACE_NS   ANOP
&S_TRACE    SETC ''
            AGO .PAST_TRACE
.TRACE_ON   ANOP
&S_TRACE    SETC '''ON'''
            AGO .PAST_TRACE
.TRACE_OF   ANOP
&S_TRACE    SETC '''OFF'''
.PAST_TRACE ANOP
.*
.* Turn tracing on/off.
.*
         AIF   ('&S_TRACE'  NE '').CALL2
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&SY_TRACE),VL
         MEXIT
.CALL2   CALLX &#_IDEPA,(&#_IDTKN,&SY_TRACE,&S_TRACE),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   SY_INSTALL                                                 *
* Purpose: Generate code to install a new symbol.                     *
*                                                                     *
*   Keyword                     Description                           *
* -----------  ------------------------------------------------------ *
* SYMBOL       ='text', =tag or =(tag,length) of symbol to install.   *
* HANDLE       =tag of a fullword to return symbol's handle in.       *
* ATTR         =tag containing attribute to attach to the new symbol. *
* RETSYMBOL    =symbol_ptr                                            *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         SY_INSTALL &ID=,&SPEPA=,&SPTOKEN=,                            +
               &SYMBOL=,&ATTR=,&HANDLE=,&RETSYMBOL=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &SY_INSTALL                SETC in open code.
         LCLA  &L,&I
         LCLC  &S_ADDR,&S_LEN             Input symbol addr & len.
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=SY_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Process the SYMBOL keyword to obtain an address and a length.
.*
              AIF ('&SYMBOL' EQ '').NO_SYMBOL
              AIF ('&SYMBOL'(1,1) EQ '''').SYM_LITERAL
              AIF (N'&SYMBOL EQ 1).SYM_TAGONLY
              AIF (N'&SYMBOL EQ 2).SYM_TAGLEN
              MNOTE 8,'Too many subparameters for SYMBOL keyword.'
              MEXIT
.SYM_TAGLEN   ANOP
&S_ADDR       SETC '&SYMBOL(1)'           | Set addr.
&S_LEN        SETC '&SYMBOL(2)'           | Set len to specified tag.
              AGO  .PAST_SYMBOL           |
.SYM_TAGONLY  ANOP                        |
&S_ADDR       SETC '&SYMBOL'              | Set addr to tag_SYMBOL.
&S_LEN        SETC '=A(L''&SYMBOL)'       | Set len to L'tag_SYMBOL.
              AGO  .PAST_SYMBOL           |
.SYM_LITERAL  ANOP                        |
&S_ADDR       SETC '&SYMBOL'              | Set addr to actual literal.
&L            SETA 0                      | Length counter = 0.
&I            SETA 2                      | Index counter -> past '.
.SYM_LOOP     AIF  (&I GE K'&S_ADDR).SYM_ELOOP       Loop over SYMBOL.
              AIF  ('&S_ADDR'(&I,1) NE '''').SYM_TXT If doubled.
&I            SETA &I+1                   |            Advance past '.
.SYM_TXT      ANOP                        |          EndIf.
&L            SETA &L+1                   |   Add one to length.
&I            SETA &I+1                   |   Advance to next position.
              AGO  .SYM_LOOP              | End of counting loop.
.SYM_ELOOP    ANOP                        |
&S_LEN        SETC '=F''&L'''             | Set length parameter.
              AGO  .PAST_SYMBOL
.NO_SYMBOL    ANOP
              MNOTE 8,'SYMBOL is a required keyword.'
              MEXIT
.PAST_SYMBOL  ANOP
.*
.* Generate the PLIST for the CALLX.
.*
         ##PLIST START
         ##PLIST PARM,&#_IDTKN,&SY_INSTALL,&S_ADDR,&S_LEN
         AIF   ('&RETSYMBOL' NE '').PLIST3
         AIF   ('&ATTR'      NE '').PLIST2
         AIF   ('&HANDLE'    NE '').PLIST1
         AGO   .CALLX
.PLIST1  ##PLIST PARM,&HANDLE
         AGO   .CALLX
.PLIST2  ##PLIST PARM,&HANDLE,&ATTR
         AGO   .CALLX
.PLIST3  ##PLIST PARM,&HANDLE,&ATTR,&RETSYMBOL
         AGO   .CALLX
.CALLX   ##PLIST END,VL
         CALLX   &#_IDEPA                | Invoke the symbol manager.
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   SY_LOCATE                                                  *
* Purpose: Generate code to locate an existing symbol.                *
*                                                                     *
*   Keyword                     Description                           *
* -----------  ------------------------------------------------------ *
* SYMBOL       ='text', =tag or =(tag,length) of symbol to locate.    *
* HANDLE       =tag of a fullword...see notes below.                  *
* ATTR         =tag to which symbol's attribute is to be copied.      *
* RETSYMBOL    =(tag,length) to return symbol's address/length.       *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         SY_LOCATE &ID=,&SPEPA=,&SPTOKEN=,                             +
               &SYMBOL=,&ATTR=,&HANDLE=,&RETSYMBOL=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &SY_LOCATE                 SETC in open code.
         LCLA  &L,&I
         LCLC  &S_ADDR,&S_LEN             Input symbol addr & len.
         LCLC  &S_RETADDR
.*
&S_ADDR       SETC ''                    | No symbol provided.
&S_LEN        SETC ''                    | No symbol-length provided.
&S_RETADDR    SETC ''                    | No return-address provided.
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=SY_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Process the SYMBOL keyword to obtain an address and a length.
.*
              AIF ('&SYMBOL'    EQ '').NO_SYMBOL
              AIF ('&RETSYMBOL' NE '').MUTEX_ERROR
              AIF ('&SYMBOL'(1,1) EQ '''').SYM_LITERAL
              AIF (N'&SYMBOL EQ 1).SYM_TAGONLY
              AIF (N'&SYMBOL EQ 2).SYM_TAGLEN
              MNOTE 8,'Too many subparameters for SYMBOL keyword.'
              MEXIT
.SYM_TAGLEN   ANOP
&S_ADDR       SETC '&SYMBOL(1)'           | Set addr.
&S_LEN        SETC '&SYMBOL(2)'           | Set len to specified tag.
              AGO  .PAST_SYMBOL           |
.SYM_TAGONLY  ANOP                        |
&S_ADDR       SETC '&SYMBOL'              | Set addr to tag_SYMBOL.
&S_LEN        SETC '=A(L''&SYMBOL)'       | Set len to L'tag_SYMBOL.
              AGO  .PAST_SYMBOL           |
.SYM_LITERAL  ANOP                        |
&S_ADDR       SETC '&SYMBOL'              | Set addr to actual literal.
&L            SETA 0                      | Length counter = 0.
&I            SETA 2                      | Index counter -> past '.
.SYM_LOOP     AIF  (&I GE K'&S_ADDR).SYM_ELOOP       Loop over SYMBOL.
              AIF  ('&S_ADDR'(&I,1) NE '''').SYM_TXT If doubled.
&I            SETA &I+1                   |            Advance past '.
.SYM_TXT      ANOP                        |          EndIf.
&L            SETA &L+1                   |   Add one to length.
&I            SETA &I+1                   |   Advance to next position.
              AGO  .SYM_LOOP              | End of counting loop.
.SYM_ELOOP    ANOP                        |
&S_LEN        SETC '=F''&L'''             | Set length parameter.
              AGO  .PAST_SYMBOL
.LENGTH_MUTEX MNOTE 8,'RETSYMBOL is mutually exclusice with SYMBOL.'
              MEXIT
.NO_SYMBOL    AIF  ('&RETSYMBOL' EQ '').PAST_RETSYM
              AIF  (N'&RETSYMBOL GT 2).BAD_RETCOUNT
&S_RETADDR    SETC '&RETSYMBOL(1)'
              AIF  (N'&RETSYMBOL EQ 1).PAST_RETSYM
&S_LEN        SETC '&RETSYMBOL(2)'
.PAST_RETSYM  AIF  ('&HANDLE' NE '').PAST_SYMBOL
              MNOTE 8,'Either SYMBOL or HANDLE must be specified.'
              MEXIT
.BAD_RETCOUNT MNOTE 8,'RETSYMBOL must be specified as (address,length)'
              MEXIT
.PAST_SYMBOL  ANOP
.*
.* Generate the call to the symbol manager.
.*
         ##PLIST START
         ##PLIST PARM,&#_IDTKN,&SY_LOCATE,&S_ADDR,&S_LEN
         AIF     ('&S_RETADDR' NE '').PLIST3
         AIF     ('&ATTR'      NE '').PLIST2
         AIF     ('&HANDLE'    NE '').PLIST1
         AGO     .CALLX
.PLIST1  ##PLIST PARM,&HANDLE
         AGO     .CALLX
.PLIST2  ##PLIST PARM,&HANDLE,&ATTR
         AGO     .CALLX
.PLIST3  ##PLIST PARM,&HANDLE,&ATTR,&S_RETADDR
         AGO     .CALLX
.CALLX   ##PLIST END,VL
         CALLX   &#_IDEPA
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   SY_UPDATE                                                  *
* Purpose: Generate code to update an existing symbol.                *
*                                                                     *
*   Keyword                     Description                           *
* -----------  ------------------------------------------------------ *
* SYMBOL       ='text', =tag or =(tag,length) of symbol to update.    *
* HANDLE       =tag of a fullword...see notes below.                  *
* ATTR         =tag to which symbol's attribute is to be copied.      *
* RETSYMBOL    =(tag,length) to return symbol's address/length.       *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         SY_UPDATE &ID=,&SPEPA=,&SPTOKEN=,                             +
               &SYMBOL=,&ATTR=,&HANDLE=,&RETSYMBOL=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &SY_UPDATE                 SETC in open code.
         LCLA  &L,&I
         LCLC  &S_ADDR,&S_LEN             Input symbol addr & len.
         LCLC  &S_RETADDR
.*
&S_ADDR       SETC ''                    | No symbol provided.
&S_LEN        SETC ''                    | No symbol-length provided.
&S_RETADDR    SETC ''                    | No return-address provided.
              AIF  ('&ATTR' NE '').ATTROK
              MNOTE 4,'Invoking SY_UPDATE without supplying an ATTR is +
               meaningless.'
.ATTROK       ANOP
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=SY_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Process the SYMBOL keyword to obtain an address and a length.
.*
              AIF ('&SYMBOL'    EQ '').NO_SYMBOL
              AIF ('&RETSYMBOL' NE '').MUTEX_ERROR
              AIF ('&SYMBOL'(1,1) EQ '''').SYM_LITERAL
              AIF (N'&SYMBOL EQ 1).SYM_TAGONLY
              AIF (N'&SYMBOL EQ 2).SYM_TAGLEN
              MNOTE 8,'Too many subparameters for SYMBOL keyword.'
              MEXIT
.SYM_TAGLEN   ANOP
&S_ADDR       SETC '&SYMBOL(1)'           | Set addr.
&S_LEN        SETC '&SYMBOL(2)'           | Set len to specified tag.
              AGO  .PAST_SYMBOL           |
.SYM_TAGONLY  ANOP                        |
&S_ADDR       SETC '&SYMBOL'              | Set addr to tag_SYMBOL.
&S_LEN        SETC '=A(L''&SYMBOL)'       | Set len to L'tag_SYMBOL.
              AGO  .PAST_SYMBOL           |
.SYM_LITERAL  ANOP                        |
&S_ADDR       SETC '&SYMBOL'              | Set addr to actual literal.
&L            SETA 0                      | Length counter = 0.
&I            SETA 2                      | Index counter -> past '.
.SYM_LOOP     AIF  (&I GE K'&S_ADDR).SYM_ELOOP       Loop over SYMBOL.
              AIF  ('&S_ADDR'(&I,1) NE '''').SYM_TXT If doubled.
&I            SETA &I+1                   |            Advance past '.
.SYM_TXT      ANOP                        |          EndIf.
&L            SETA &L+1                   |   Add one to length.
&I            SETA &I+1                   |   Advance to next position.
              AGO  .SYM_LOOP              | End of counting loop.
.SYM_ELOOP    ANOP                        |
&S_LEN        SETC '=F''&L'''             | Set length parameter.
              AGO  .PAST_SYMBOL
.LENGTH_MUTEX MNOTE 8,'RETSYMBOL is mutually exclusice with SYMBOL.'
              MEXIT
.NO_SYMBOL    AIF  ('&RETSYMBOL' EQ '').PAST_RETSYM
              AIF  (N'&RETSYMBOL GT 2).BAD_RETCOUNT
&S_RETADDR    SETC '&RETSYMBOL(1)'
              AIF  (N'&RETSYMBOL EQ 1).PAST_RETSYM
&S_LEN        SETC '&RETSYMBOL(2)'
.PAST_RETSYM  AIF  ('&HANDLE' NE '').PAST_SYMBOL
              MNOTE 8,'Either SYMBOL or HANDLE must be specified.'
              MEXIT
.BAD_RETCOUNT MNOTE 8,'RETSYMBOL must be specified as (address,length)'
              MEXIT
.PAST_SYMBOL  ANOP
.*
.* Generate the call to the symbol manager.
.*
         ##PLIST START
         ##PLIST PARM,&#_IDTKN,&SY_UPDATE,&S_ADDR,&S_LEN
         AIF     ('&S_RETADDR' NE '').PLIST3
         AIF     ('&ATTR'      NE '').PLIST2
         AIF     ('&HANDLE'    NE '').PLIST1
         AGO     .CALLX
.PLIST1  ##PLIST PARM,&HANDLE
         AGO     .CALLX
.PLIST2  ##PLIST PARM,&HANDLE,&ATTR
         AGO     .CALLX
.PLIST3  ##PLIST PARM,&HANDLE,&ATTR,&S_RETADDR
         AGO     .CALLX
.CALLX   ##PLIST END,VL
         CALLX   &#_IDEPA
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   SY_DELETE                                                  *
* Purpose: Generate code to delete a symbol from the symbol table.    *
*                                                                     *
*   Keyword                     Description                           *
* -----------  ------------------------------------------------------ *
* SYMBOL       ='text', =tag or =(tag,length) of symbol to locate.    *
* HANDLE       =tag of a fullword identifying the symbol to delete.   *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         SY_DELETE &ID=,&SPEPA=,&SPTOKEN=,                             +
               &SYMBOL=,&HANDLE=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &SY_DELETE                 SETC in open code.
         LCLA  &L,&I
         LCLC  &S_ADDR,&S_LEN             Input symbol addr & len.
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=SY_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Process the SYMBOL keyword to obtain an address and a length.
.*
              AIF ('&SYMBOL' EQ '').NO_SYMBOL
              AIF  ('&HANDLE' NE '').HANDLE_MUTEX
              AIF ('&SYMBOL'(1,1) EQ '''').SYM_LITERAL
              AIF (N'&SYMBOL EQ 1).SYM_TAGONLY
              AIF (N'&SYMBOL EQ 2).SYM_TAGLEN
              MNOTE 8,'Too many subparameters for SYMBOL keyword.'
              MEXIT
.SYM_TAGLEN   ANOP
&S_ADDR       SETC '&SYMBOL(1)'           | Set addr.
&S_LEN        SETC '&SYMBOL(2)'           | Set len to specified tag.
              AGO  .PAST_SYMBOL           |
.SYM_TAGONLY  ANOP                        |
&S_ADDR       SETC '&SYMBOL'              | Set addr to tag_SYMBOL.
&S_LEN        SETC '=A(L''&SYMBOL)'       | Set len to L'tag_SYMBOL.
              AGO  .PAST_SYMBOL           |
.SYM_LITERAL  ANOP                        |
&S_ADDR       SETC '&SYMBOL'              | Set addr to actual literal.
&L            SETA 0                      | Length counter = 0.
&I            SETA 2                      | Index counter -> past '.
.SYM_LOOP     AIF  (&I GE K'&S_ADDR).SYM_ELOOP       Loop over SYMBOL.
              AIF  ('&S_ADDR'(&I,1) NE '''').SYM_TXT If doubled.
&I            SETA &I+1                   |            Advance past '.
.SYM_TXT      ANOP                        |          EndIf.
&L            SETA &L+1                   |   Add one to length.
&I            SETA &I+1                   |   Advance to next position.
              AGO  .SYM_LOOP              | End of counting loop.
.SYM_ELOOP    ANOP                        |
&S_LEN        SETC '=F''&L'''             | Set length parameter.
              AGO  .PAST_SYMBOL
.HANDLE_MUTEX MNOTE 8,'SYMBOL and HANDLE are mutually exclusive.'
              MEXIT
.NO_SYMBOL    ANOP
&S_ADDR       SETC ''                     | Set addr.
&S_LEN        SETC ''                     | Set len.
              AIF  ('&HANDLE' NE '').PAST_SYMBOL
              MNOTE 8,'Either SYMBOL or HANDLE must be specified.'
              MEXIT
.PAST_SYMBOL  ANOP
.*
.* Generate the call to the symbol manager.
.*
         AIF   ('&HANDLE' NE '').CALL2
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&SY_DELETE,&S_ADDR,&S_LEN),VL
         MEXIT
.CALL2   CALLX &#_IDEPA,(&#_IDTKN,&SY_DELETE,&S_ADDR,&S_LEN,&HANDLE),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   SY_OPEN_BLOCK                                              *
* Purpose: Generate code to enter a new symbol-table scope.           *
*                                                                     *
*   Keyword                     Description                           *
* -----------  ------------------------------------------------------ *
* BLOCK#       =tag of a fullword to return the new block's number.   *
* NESTLEVEL    =tag of a fullword to return the new nesting level.    *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         SY_OPEN_BLOCK &ID=,&SPEPA=,&SPTOKEN=,&BLOCK#=,&NESTLEVEL=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &SY_OPEN_BLOCK             SETC in open code.
.*
.* Obtain service processor ID values and call the symbol manager.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=SY_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF   ('&#_IDCODE'   NE 'SUCCESS').MEXIT
         AIF   ('&BLOCK#'     NE '').CALL3
         AIF   ('&NESTLEVEL'  NE '').CALL2
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&SY_OPEN_BLOCK),VL
         MEXIT
.CALL2   CALLX &#_IDEPA,(&#_IDTKN,&SY_OPEN_BLOCK,&BLOCK#),VL
         MEXIT
.CALL3   CALLX &#_IDEPA,(&#_IDTKN,&SY_OPEN_BLOCK,&BLOCK#,&NESTLEVEL),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   SY_ENTER_BLOCK                                             *
* Purpose: Generate code to enter an existing symbol-table scope.     *
*                                                                     *
*   Keyword                     Description                           *
* -----------  ------------------------------------------------------ *
* BLOCK#       =tag of a fullword containing block# to enter. The     *
*              identified block must be a child of the current block. *
* NESTLEVEL    =tag of a fullword to return the new nesting level.    *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         SY_ENTER_BLOCK &ID=,&SPEPA=,&SPTOKEN=,&BLOCK#=,&NESTLEVEL=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &SY_ENTER_BLOCK            SETC in open code.
.*
.* Obtain service processor ID values and call the symbol manager.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=SY_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF   ('&#_IDCODE'   NE 'SUCCESS').MEXIT
         AIF   ('&BLOCK#'     NE '').CALL3
         AIF   ('&NESTLEVEL'  NE '').CALL2
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&SY_ENTER_BLOCK),VL
         MEXIT
.CALL2   CALLX &#_IDEPA,(&#_IDTKN,&SY_ENTER_BLOCK,&BLOCK#),VL
         MEXIT
.CALL3   CALLX &#_IDEPA,(&#_IDTKN,&SY_ENTER_BLOCK,&BLOCK#,&NESTLEVEL), +
               VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   SY_EXIT_BLOCK                                              *
* Purpose: Generate code to exit the current block to the surrounding *
*          block.                                                     *
*                                                                     *
*   Keyword                     Description                           *
* -----------  ------------------------------------------------------ *
* BLOCK#       =tag of a fullword to return the new block's number.   *
* NESTLEVEL    =tag of a fullword to return the new nesting level.    *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         SY_EXIT_BLOCK &ID=,&SPEPA=,&SPTOKEN=,&BLOCK#=,&NESTLEVEL=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &SY_EXIT_BLOCK             SETC in open code.
.*
.* Obtain service processor ID values and call the symbol manager.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=SY_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF   ('&#_IDCODE'   NE 'SUCCESS').MEXIT
         AIF   ('&BLOCK#'     NE '').CALL3
         AIF   ('&NESTLEVEL'  NE '').CALL2
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&SY_EXIT_BLOCK),VL
         MEXIT
.CALL2   CALLX &#_IDEPA,(&#_IDTKN,&SY_EXIT_BLOCK,&BLOCK#),VL
         MEXIT
.CALL3   CALLX &#_IDEPA,(&#_IDTKN,&SY_EXIT_BLOCK,&BLOCK#,&NESTLEVEL),  +
               VL
.MEXIT   MEND
