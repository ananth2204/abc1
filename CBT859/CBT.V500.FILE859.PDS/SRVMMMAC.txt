*---------------------------------------------------------------------*
*  Copyright 2011 by Clemson University Research Foundation           *
*                                                                     *
*  Licensed under the Apache License, Version 2.0 (the "License");    *
*  you may not use this file except in compliance with the License.   *
*  You may obtain a copy of the License in this library as member     *
*  $LICENSE, or from                                                  *
*                                                                     *
*      http://www.apache.org/licenses/LICENSE-2.0                     *
*                                                                     *
*  Unless required by applicable law or agreed to in writing,         *
*  software distributed under the License is distributed on an "AS    *
*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either    *
*  express or implied.  See the License for the specific language     *
*  governing permissions and limitations under the License.           *
*---------------------------------------------------------------------*
 TITLE 'SRVMMMAC: Memory Manager Service Processor Symbols && Macros.'
*---------------------------------------------------------------------*
*
*  Copy File:  SRVMMMAC
*
*  Purpose:    Memory manager service processor symbols and macros.
*
*  Description: See "Service Processors User's Guide and Reference".
*
*  Change
*  History:    04/04/89 MJM - New
*            2009-09-02 MJM - Fixed two error codes.
*
*---------------------------------------------------------------------*
*
***********************************************************************
***********************************************************************
**                                                                   **
**                     Symbol Definitions                            **
**                                                                   **
***********************************************************************
***********************************************************************
*
* Global declarations for all Memory Manager symbols.
*
  GBLC &MEMORY_MANAGER
  GBLC &MM_MEMORY_MANAGER
  GBLA &MM_START,&MM_TERMINATE,&MM_OBTAIN_STORAGE
  GBLA &MM_RELEASE_STORAGE,&MM_RESET_HEAP
  GBLA &MM_PAGE_SIZE,&MM_INVALID_FUNCTION
  GBLA &MM_INVALID_HEAPID,&MM_INVALID_INCREMENT,&MM_INVALID_LOCATION
  GBLA &MM_INVALID_SIZE,&MM_INVALID_PARM_COUNT
  GBLA &MM_INVALID_ALIGNMENT,&MM_STORAGE_NOT_AVAILABLE
  GBLA &MM_UNKNOWN_ERROR,&MM_MEMORY_NOT_IN_HEAP
  GBLA &MM_MEMORY_NOT_ALLOCATE,&MM_CORRUPT_STORAGE,&MM_NOT_USEABLE
  GBLA &MM_LOCATION_ANY,&MM_LOCATION_BELOW
*
* Entry point name for the memory manager.
*
&MEMORY_MANAGER               SETC '''SRVMM   '''
&MM_MEMORY_MANAGER            SETC '''SRVMM   '''
*
*  Function codes.
*
&MM_START                     SETA 1
&MM_TERMINATE                 SETA 2
&MM_OBTAIN_STORAGE            SETA 3
&MM_RELEASE_STORAGE           SETA 4
&MM_RESET_HEAP                SETA 5
*
* Start function parameter values.
*
&MM_PAGE_SIZE                 SETA  4096
&MM_LOCATION_ANY              SETA  &ES_LOCATION_ANY
&MM_LOCATION_BELOW            SETA  &ES_LOCATION_BELOW
*
* Return codes from the Memory Manager.
*
&MM_SUCCESS                   SETA  0
&MM_INVALID_FUNCTION          SETA  1
&MM_INVALID_HEAPID            SETA  2
&MM_INVALID_INCREMENT         SETA  3
&MM_INVALID_LOCATION          SETA  4
&MM_INVALID_SIZE              SETA  5
&MM_INVALID_PARM_COUNT        SETA  6
&MM_INVALID_ALIGNMENT         SETA  7
&MM_STORAGE_NOT_AVAILABLE     SETA  8
&MM_UNKNOWN_ERROR             SETA  9
&MM_MEMORY_NOT_IN_HEAP        SETA 10
&MM_MEMORY_NOT_ALLOCATED      SETA 11
&MM_CORRUPT_STORAGE           SETA 12
&MM_NOT_USEABLE               SETA 13
 DEFUCOND MACRO=SRV##RC,NAME=MM_SUCCESS
 DEFUCOND MACRO=SRV##RC,NAME=MM_INVALID_FUNCTION
 DEFUCOND MACRO=SRV##RC,NAME=MM_INVALID_HEAPID
 DEFUCOND MACRO=SRV##RC,NAME=MM_INVALID_INCREMENT
 DEFUCOND MACRO=SRV##RC,NAME=MM_INVALID_LOCATION
 DEFUCOND MACRO=SRV##RC,NAME=MM_INVALID_SIZE
 DEFUCOND MACRO=SRV##RC,NAME=MM_INVALID_PARM_COUNT
 DEFUCOND MACRO=SRV##RC,NAME=MM_INVALID_ALIGNMENT
 DEFUCOND MACRO=SRV##RC,NAME=MM_STORAGE_NOT_AVAILABLE
 DEFUCOND MACRO=SRV##RC,NAME=MM_UNKNOWN_ERROR
 DEFUCOND MACRO=SRV##RC,NAME=MM_MEMORY_NOT_IN_HEAP
 DEFUCOND MACRO=SRV##RC,NAME=MM_MEMORY_NOT_ALLOCATED
 DEFUCOND MACRO=SRV##RC,NAME=MM_CORRUPT_STORAGE
 DEFUCOND MACRO=SRV##RC,NAME=MM_NOT_USEABLE
                        EJECT
***********************************************************************
***********************************************************************
**                                                                   **
**                     Macro Definitions                             **
**                                                                   **
***********************************************************************
***********************************************************************
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   MM_ID                                                      *
*                                                                     *
* Purpose: Establish default values for a specific service processor  *
*          and associate them with the specified ID name. The values  *
*          are stored in the following created global variables:      *
*                                                                     *
* Variable Name                     Description                       *
* -------------  ---------------------------------------------------- *
* #$&ID.$#IDMAC  Name of macro that created the ID: MM_ID.            *
* #$&ID.$#ESID   Service processor's Environment Support ID.          *
* #$&ID.$#EPN    Tag for Service processor's Entry Point Name.        *
* #$&ID.$#EPA    Tag for Service processor's Entry Point Address.     *
* #$&ID.$#TKN    Tag for Service processor's Entry Point Token.       *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         MM_ID &ID=,&ESVA=,&SPEPNAME=,&SPEPA=,&SPTOKEN=,&ESID=
         LCLC  &L_EPNAME
         GBLC  &MEMORY_MANAGER
.*
.* If no EPNAME was specified, use the generic Memory Manager.
.*
&L_EPNAME SETC '&SPEPNAME'
          AIF  ('&L_EPNAME' NE '').PAST_EPN
&L_EPNAME SETC '&MEMORY_MANAGER'
.PAST_EPN ANOP
.*
.* Invoke SRV##ID to create globals used by all ID's.
.*
         SRV##ID SET,                                                  +
               ID=&ID.,IDMAC=MM_ID,ESID=&ESID.,SPEPNAME=&L_EPNAME,     +
               SPEPA=&SPEPA,SPTOKEN=&SPTOKEN.
         MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   MM_START                                                   *
* Purpose: Generate code to start a new memory manager session.       *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         MM_START &ID=,&SPEPA=,&SPTOKEN=,&ESVA=,                       +
               &INCREMENT=,&LOCATION=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &MM_START                           SETC in open code.
         GBLA  &MM_LOCATION_ANY,&MM_LOCATION_BELOW SETC in open code.
         LCLC  &L_LOC
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN,ESVA),                    +
               ID=&ID,IDMAC=MM_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN,       +
               ESVA=&ESVA.
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         MVC   &#_IDTKN,=F'0'            | Insure TOKEN = 0.
.*
.* Set up the optional LOCATION parameter.
.*
&L_LOC    SETC ''
          AIF   ('&LOCATION' EQ '').PAST_LOC
          AIF   ('&LOCATION' EQ 'ANY').LOC_ANY
          AIF   ('&LOCATION' EQ 'BELOW').LOC_BELO
          MNOTE 8,'LOCATION must be ANY or BELOW.'
          MEXIT
.LOC_ANY  ANOP
&L_LOC    SETC '&MM_LOCATION_ANY'
          AGO  .PAST_LOC
.LOC_BELO ANOP
&L_LOC    SETC '&MM_LOCATION_BELOW'
.PAST_LOC ANOP
.*
.* Generate the MM_START call statement.
.*
         AIF   ('&LOCATION' NE '').CALL3
         AIF   ('&INCREMENT' NE '').CALL2
.CALL1   CALLX &#_IDEPA,(&#_IDTKN,&MM_START,&#_IDESVA),VL
         MEXIT
.CALL2   CALLX &#_IDEPA,(&#_IDTKN,&MM_START,&#_IDESVA,&INCREMENT),VL
         MEXIT
.CALL3   CALLX &#_IDEPA,(&#_IDTKN,&MM_START,&#_IDESVA,&INCREMENT,      +
               &L_LOC),VL
         MEXIT
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   MM_TERMINATE                                               *
* Purpose: Generate code to terminate a memory manager session.       *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         MM_TERMINATE &ID=,&SPEPA=,&SPTOKEN=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &MM_TERMINATE              SETC in open code.
.*
.* Obtain service processor ID values and terminate memory manager.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=MM_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         CALLX &#_IDEPA,(&#_IDTKN,&MM_TERMINATE),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   MM_OBTAIN_STORAGE                                          *
* Purpose: Generate code to obtain a piece of storage.                *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         MM_OBTAIN_STORAGE &ID=,&SPEPA=,&SPTOKEN=,&SIZE=,&ADDRESS=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &MM_OBTAIN_STORAGE
.*
.* Obtain service processor ID values and generate obtain_storage call.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=MM_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
         AIF  ('&SIZE' NE '').SIZE_OK
         MNOTE 8,'SIZE is a required keyword.'
         MEXIT
.SIZE_OK ANOP
         AIF  ('&ADDRESS' NE '').ADDR_OK
         MNOTE 8,'ADDRESS is a required keyword.'
         MEXIT
.ADDR_OK ANOP
         CALLX &#_IDEPA,(&#_IDTKN,&MM_OBTAIN_STORAGE,&SIZE,&ADDRESS),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   MM_RELEASE_STORAGE                                         *
* Purpose: Generate code to release a piece of storage.               *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         MM_RELEASE_STORAGE &ID=,&SPEPA=,&SPTOKEN=,&SIZE=,&ADDRESS=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &MM_RELEASE_STORAGE
.*
.* Obtain service processor ID values & generate RELEASE_STORAGE call.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=MM_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
         AIF  ('&SIZE' NE '').SIZE_OK
         MNOTE 8,'SIZE is a required keyword.'
         MEXIT
.SIZE_OK ANOP
         AIF  ('&ADDRESS' NE '').ADDR_OK
         MNOTE 8,'ADDRESS is a required keyword.'
         MEXIT
.ADDR_OK ANOP
         CALLX &#_IDEPA,(&#_IDTKN,&MM_RELEASE_STORAGE,&SIZE,&ADDRESS), +
               VL
.MEXIT   MEND
