*---------------------------------------------------------------------*
*  Copyright 2011 by Clemson University Research Foundation           *
*                                                                     *
*  Licensed under the Apache License, Version 2.0 (the "License");    *
*  you may not use this file except in compliance with the License.   *
*  You may obtain a copy of the License in this library as member     *
*  $LICENSE, or from                                                  *
*                                                                     *
*      http://www.apache.org/licenses/LICENSE-2.0                     *
*                                                                     *
*  Unless required by applicable law or agreed to in writing,         *
*  software distributed under the License is distributed on an "AS    *
*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either    *
*  express or implied.  See the License for the specific language     *
*  governing permissions and limitations under the License.           *
*---------------------------------------------------------------------*
 TITLE 'SRVDTMAC: Date/Time Service Processor Symbols && Macros.'
*---------------------------------------------------------------------*
*
*  Copy File:  SRVDTMAC
*
*  Purpose:    Date/time service processor symbols and macros.
*
*  Description: See "Service Processors User's Guide and Reference".
*
*  Change
*  History   2011/10/20 JCB - Patch rollup for CBT tape distribution
*
*---------------------------------------------------------------------*
*
***********************************************************************
***********************************************************************
**                                                                   **
**                     Symbol Definitions                            **
**                                                                   **
***********************************************************************
***********************************************************************
*
*  Name of service processor module, functions
*
 GBLC &DATETIME_SERVICES
 GBLA &DT_START,&DT_TERMINATE,&DT_GET_CURRENT,&DT_CONVERT
 GBLA &DT_ADD,&DT_SUBTRACT,&DT_DURATION
*
*  Return codes
*
 GBLA &DT_SUCCESS
 GBLA &DT_INVALID_FUNCTION,&DT_INVALID_NUMBER_OF_PARMS
 GBLA &DT_INVALID_DT_ID,&DT_ENVIRONMENT_SUPPORT_ERROR
 GBLA &DT_STRING_HANDLER_ERROR,&DT_INVALID_DATE_FORMAT
 GBLA &DT_INVALID_TIME_FORMAT,&DT_INVALID_INTERVAL_DATE
 GBLA &DT_INVALID_INPUT_TIME,&DT_INVALID_INPUT_DATE
 GBLA &DT_INVALID_INPUT_INTERVAL
 GBLA &DT_OVERFLOW,&DT_OUT_OF_RANGE
*
*  Date, time and interval symbols
*
 GBLA &DT_JULIAN,&DT_JULIAND,&DT_PJULIAN,&DT_IJULIAN
 GBLA &DT_SJULIAN,&DT_SJULIAND,&DT_SGREGORIAN
 GBLA &DT_GREGORIAN,&DT_SNORMAL,&DT_NORMAL,&DT_NUMBER_OF_DAYS
 GBLA &DT_HHMMSSTH,&DT_ES_FORMAT,&DT_TEXT,&DT_TEXTD
 GBLA &DT_SORTDATE,&DT_SSORTDATE,&DT_SASDATE7,&DT_SASDATE9
 GBLA &DT_YYYYMMMDD
 GBLA &DT_WEEKDAY,&DT_WEEKDAY3,&DT_MONTH,&DT_YEAR,&DT_YEAR2
 GBLA &DT_PYEAR,&DT_IYEAR
 GBLA &DT_HHMM,&DT_HHMMSS,&DT_CIVILIAN,&DT_UNSPECIFIED
 GBLA &DT_DELTA,&DT_HOURS,&DT_MINUTES,&DT_SECONDS,&DT_HUNDREDTHS
 GBLA &DT_TODCLOCK,&DT_PHOURS,&DT_IHOURS
 GBLA &DT_PMINUTES,&DT_IMINUTES,&DT_PSECONDS,&DT_ISECONDS
 GBLA &DT_GENERAL_INPUT,&DT_DEFAULT_DATE_FORMAT,&DT_DEFAULT_TIME_FORMAT
 GBLA &DT_PHUNDREDTHS,&DT_IHUNDREDTHS
 GBLA &DT_SECONDS_SINCE_1970,&DT_POSIXTIME
*
* Entry point name for the Item Manager.
*
&DATETIME_SERVICES                      SETC '''SRVDT   '''
*
* Function codes.
*
&DT_START                               SETA 1
&DT_TERMINATE                           SETA 2
&DT_GET_CURRENT                         SETA 3
&DT_CONVERT                             SETA 4
&DT_ADD                                 SETA 5
&DT_SUBTRACT                            SETA 6
&DT_DURATION                            SETA 7
*
* Return codes.
*
&DT_SUCCESS                             SETA 0
&DT_INVALID_FUNCTION                    SETA 1
&DT_INVALID_NUMBER_OF_PARMS             SETA 2
&DT_INVALID_DT_ID                       SETA 3
&DT_ENVIRONMENT_SUPPORT_ERROR           SETA 4
&DT_STRING_HANDLER_ERROR                SETA 5
&DT_INVALID_DATE_FORMAT                 SETA 6
&DT_INVALID_TIME_FORMAT                 SETA 7
&DT_INVALID_INTERVAL_FORMAT             SETA 8
&DT_INVALID_INPUT_DATE                  SETA 9
&DT_INVALID_INPUT_TIME                  SETA 10
&DT_INVALID_INPUT_INTERVAL              SETA 11
&DT_OVERFLOW                            SETA 12
&DT_OUT_OF_RANGE                        SETA 13
*
* Supported date formats.
*
&DT_UNSPECIFIED        SETA 0       Used internally by SRVDT.
*--------------------------------------------------------------------*
*  Numeric formats (Julian, number-of-days)
*--------------------------------------------------------------------*
&DT_ES_FORMAT          SETA 1       X'1989359F'
&DT_JULIAN             SETA 2       C'1989359'
&DT_JULIAND            SETA 3       C'1989.359'
&DT_PJULIAN            SETA 4       X'1989359F'
&DT_IJULIAN            SETA 5       F'1989359'
&DT_SJULIAN            SETA 6       C'89359'
&DT_SJULIAND           SETA 7       C'89.359
&DT_NUMBER_OF_DAYS     SETA 8       F'726767'
*--------------------------------------------------------------------*
*  Month-day-year formats (Gregorian, sortdate).  Numeric year,
*  day and month values fall within this group.
*--------------------------------------------------------------------*
&DT_SGREGORIAN         SETA 11      C'12/25/89' or C'25/12/89'
&DT_GREGORIAN          SETA 12      C'12/25/1989' or C'25/12/1989'
&DT_SORTDATE           SETA 13      1989-12-25 or 1989/12/25
&DT_SSORTDATE          SETA 14      89-12-25 or 89/12/25
&DT_YEAR               SETA 15      C'1989'
&DT_YEAR2              SETA 16      C'89'
&DT_PYEAR              SETA 17      PL2'1989'
&DT_IYEAR              SETA 18      H'1989'
&DT_DAYS               SETA 19      CL2'Number of days'
&DT_PDAYS              SETA 20      PL2'Number of days'
&DT_IDAYS              SETA 21      H'Number of days'
&DT_MONTH              SETA 22      CL2'Month number'
&DT_PMONTH             SETA 23      PL2'Month number'
&DT_IMONTH             SETA 24      H'Month number'
*--------------------------------------------------------------------*
*  Normal formats (Normal, SAS date).
*--------------------------------------------------------------------*
&DT_SNORMAL            SETA 31      C'25 Dec 89'
&DT_NORMAL             SETA 32      C'25 Dec 1989'
&DT_SASDATE7           SETA 33      C'25DEC89'
&DT_SASDATE9           SETA 34      C'25DEC1989'
&DT_YYYYMMMDD          SETA 35      C'1989DEC25'
*--------------------------------------------------------------------*
*  Text formats. Weekday and month names appear here.
*--------------------------------------------------------------------*
&DT_TEXT               SETA 41      C'December 25, 1989'
&DT_TEXTD              SETA 42      C'Monday, December 25, 1989'
&DT_WEEKDAY            SETA 43      C'Monday'
&DT_WEEKDAY3           SETA 44      C'Mon'
&DT_MONTHNAME          SETA 45      C'December'
&DT_MONTHNAME3         SETA 46      C'Dec'
&DT_DEFAULT_DATE_FORMAT  SETA  &DT_JULIAND
*--------------------------------------------------------------------*
&DT_GENERAL_INPUT      SETA 50      Multiple choice
*--------------------------------------------------------------------*
* Supported time formats.
*--------------------------------------------------------------------*
&DT_ES_FORMAT          SETA 1       F'3115074'
&DT_HUNDREDTHS         SETA 2       F'3115074'
&DT_HHMM               SETA 3       C'08:39'
&DT_HHMMSS             SETA 4       C'08:39:10'
&DT_HHMMSSTH           SETA 5       C'08:39:10.74'
&DT_CIVILIAN           SETA 6       C'08:39:10 AM'
&DT_TODCLOCK           SETA 7       XL8'TOD clock value'
&DT_HOURS              SETA 8       CL2'08'
&DT_PHOURS             SETA 9       PL2'8'
&DT_IHOURS             SETA 10      H'8'
&DT_MINUTES            SETA 11      CL2'39'
&DT_PMINUTES           SETA 12      PL2'39'
&DT_IMINUTES           SETA 13      H'39'
&DT_SECONDS            SETA 14      CL2'10'
&DT_PSECONDS           SETA 15      PL2'10'
&DT_ISECONDS           SETA 16      H'10'
&DT_SECONDS_SINCE_1970 SETA 17      F'35E7AB'
&DT_POSIXTIME          SETA &DT_SECONDS_SINCE_1970
&DT_DEFAULT_TIME_FORMAT  SETA  &DT_HHMMSS
*
* Supported interval formats.
*
&DT_DELTA              SETA 1       C'    3-:10:25:15.25'
*  &DT_HUNDREDTHS      SETA         Previously defined
*  &DT_DAYS            SETA         CL2'Number of days'
*  &DT_PDAYS           SETA         PL2'Number of days'
*  &DT_IDAYS           SETA         H'Number of days'
*  &DT_HOURS           SETA         Previously defined
*  &DT_PHOURS          SETA
*  &DT_IHOURS          SETA
*  &DT_MINUTES         SETA
*  &DT_PMINUTES        SETA
*  &DT_IMINUTES        SETA
*  &DT_SECONDS         SETA
*  &DT_PSECONDS        SETA
*  &DT_ISECONDS        SETA
&DT_IHUNDREDTHS    SETA  17
&DT_PHUNDREDTHS    SETA  18
*---------------------------------------------------------------------*
* DEFUCOND macros to facilitate checking return codes. If new return
* codes are added, don't forget to add a DEFUCOND for them.
*---------------------------------------------------------------------*
   DEFUCOND MACRO=SRV##RC,NAME=DT_SUCCESS
   DEFUCOND MACRO=SRV##RC,NAME=DT_INVALID_FUNCTION
   DEFUCOND MACRO=SRV##RC,NAME=DT_INVALID_NUMBER_OF_PARMS
   DEFUCOND MACRO=SRV##RC,NAME=DT_INVALID_DT_ID
   DEFUCOND MACRO=SRV##RC,NAME=DT_ENVIRONMENT_SUPPORT_ERROR
   DEFUCOND MACRO=SRV##RC,NAME=DT_STRING_HANDLER_ERROR
   DEFUCOND MACRO=SRV##RC,NAME=DT_INVALID_DATE_FORMAT
   DEFUCOND MACRO=SRV##RC,NAME=DT_INVALID_TIME_FORMAT
   DEFUCOND MACRO=SRV##RC,NAME=DT_INVALID_INTERVAL_FORMAT
   DEFUCOND MACRO=SRV##RC,NAME=DT_INVALID_INPUT_DATE
   DEFUCOND MACRO=SRV##RC,NAME=DT_INVALID_INPUT_TIME
   DEFUCOND MACRO=SRV##RC,NAME=DT_INVALID_INPUT_INTERVAL
   DEFUCOND MACRO=SRV##RC,NAME=DT_OVERFLOW
   DEFUCOND MACRO=SRV##RC,NAME=DT_OUT_OF_RANGE
*
* Miscellaneous definitions, if any.
*
                        EJECT
***********************************************************************
***********************************************************************
**                                                                   **
**                     Macro Definitions                             **
**                                                                   **
***********************************************************************
***********************************************************************
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   DT_ID                                                      *
*                                                                     *
* Purpose: Establish default values for a specific service processor  *
*          and associate them with the specified ID name. The values  *
*          are stored in the following created global variables:      *
*                                                                     *
* Variable Name                     Description                       *
* -------------  ---------------------------------------------------- *
* #$&ID.$#IDMAC  Name of macro that created the ID: PL_ID.            *
* #$&ID.$#ESID   Service processor's Environment Support ID.          *
* #$&ID.$#EPN    Tag for Service processor's Entry Point Name.        *
* #$&ID.$#EPA    Tag for Service processor's Entry Point Address.     *
* #$&ID.$#TKN    Tag for Service processor's Entry Point Token.       *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         DT_ID &ID=,&ESVA=,&SPEPNAME=,&SPEPA=,&SPTOKEN=,&ESID=,        *
               &SIZELENGTH=
         LCLC  &L_EPNAME
         GBLC  &DATETIME_SERVICES
.*
.* If no EPNAME was specified, use the generic Date/Time services.
.*
&L_EPNAME SETC '&SPEPNAME'
          AIF  ('&L_EPNAME' NE '').PAST_EPN
&L_EPNAME SETC '&DATETIME_SERVICES'
.PAST_EPN ANOP
.*
.* Invoke SRV##ID to create globals used by all ID's.
.*
         SRV##ID SET,                                                  +
               ID=&ID.,IDMAC=DT_ID,ESID=&ESID.,SPEPNAME=&L_EPNAME,     +
               SPEPA=&SPEPA,SPTOKEN=&SPTOKEN.
.*
.* Establish defaults for parameters specific to the string handler.
.*
&V_SIZELENGTH    SETC '#$&ID.$#SIZELENGTH'  Variable for SIZELENGTH=.
                 GBLC &(&V_SIZELENGTH)      Declare global variable.
&(&V_SIZELENGTH) SETC ''                    Set sizelength's default.
                 AIF  ('&SIZELENGTH' EQ '').GOT_SIZELENGTH
                 AIF  (T'&SIZELENGTH EQ 'N').SL_NUMERIC
                 MNOTE 8,'If SIZELENGTH is specified on the ST_ID macro+
               , it must be a self-defining numeric value.'
                 AGO   .GOT_SIZELENGTH
.SL_NUMERIC      ANOP
&(&V_SIZELENGTH) SETC '&SIZELENGTH'         Copy value (or nulls).
.GOT_SIZELENGTH  ANOP
         MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   DT_START                                                   *
* Purpose: Generate code to start a new Date/Time Services session.   *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         DT_START &ID=,&SPEPA=,&SPTOKEN=,&ESVA=,                       +
               &OPTIONS=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &DT_START                  SETC in open code.
         LCLA  &DT_FORMAT
         LCLB  &OPT_EURO,&OPT_LZ
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN,ESVA),                    +
               ID=&ID,IDMAC=DT_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN,       +
               ESVA=&ESVA.
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         MVC   &#_IDTKN,=F'0'            | Insure TOKEN = 0.
.*
.* Validate the incoming parameters.
.*
.*
.* Decode the options and produce a byte flag for the parmlist.
.*
&I       SETA  1
.OPTLOOP AIF   (&I GT N'&OPTIONS).PASTOPT
         AIF   ('&OPTIONS(&I)' EQ 'EUROPEAN').OPT1
         AIF   ('&OPTIONS(&I)' EQ 'AMERICAN').OPT1A
         AIF   ('&OPTIONS(&I)' EQ 'LZ').OPT2
         AIF   ('&OPTIONS(&I)' EQ 'NLZ').OPT2A
         MNOTE 8,'Invalid option name: &OPTIONS(&I)'
.OPT1    ANOP
&OPT_EURO SETB 1                Gregorian dates in European format
         AGO   .NEXTOPT         Go process the next option.
.OPT1A   ANOP
&OPT_EURO SETB 0                Gregorian dates in American format
         AGO   .NEXTOPT         Go process the next option.
.OPT2    ANOP
&OPT_LZ   SETB 1                Leading-zeros on output stuff
         AGO   .NEXTOPT         Go process the next option.
.OPT2A   ANOP
&OPT_LZ   SETB 0                No leading zeros on output
         AGO   .NEXTOPT         Go process the next option.
.*
.*  Add additional options here.
.*
.NEXTOPT ANOP
&I       SETA  &I+1             Increment index into options list.
         AGO   .OPTLOOP         Branch back to top of loop.
.PASTOPT ANOP
&OPTSTR  SETC '&OPT_EURO.&OPT_LZ.000000'
         AIF  ('&OPTSTR' NE '00000000').NOT_NOP
&OPTSTR  SETC ''
         AGO  .PAST_OPTSTR_SET
.NOT_NOP ANOP
&OPTSTR  SETC '=B''&OPTSTR'''
.PAST_OPTSTR_SET ANOP
.*
.* Generate the DT_START call.
.*
.PARMLIST ANOP ,
         ##PLIST START
         ##PLIST PARM,&#_IDTKN
         ##PLIST PARM,&DT_START
         ##PLIST PARM,&#_IDESVA
         AIF     ('&OPTIONS' EQ '').PLEND
         ##PLIST PARM,&OPTSTR
.PLEND   ##PLIST END,VL
         CALLX  &#_IDEPA
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   DT_TERMINATE                                               *
* Purpose: Generate code to terminate a Date/Time Services session.   *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         DT_TERMINATE &ID=,&SPEPA=,&SPTOKEN=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &DT_TERMINATE              SETC in open code.
.*
.* Obtain service processor ID values and terminate service processor.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=DT_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         CALLX &#_IDEPA,(&#_IDTKN,&DT_TERMINATE),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   DT_GET_CURRENT                                             *
* Purpose: Generate code to make a DT_GET_CURRENT call.               *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         DT_GET_CURRENT &ID=,&SPEPA=,&SPTOKEN=,&ESVA=,                 +
               &DATE=,&TIME=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &DT_GET_CURRENT            SETC in open code.
         GBLA  &DT_PJULIAN                SETC in open code.
         GBLA  &DT_HUNDREDTHS            SETC in open code.
         LCLC  &DATEADDR,&DATEFORMAT
         LCLC  &TIMEADDR,&TIMEFORMAT
         GBLA  &DT_ES_FORMAT,&DT_TODCLOCK
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN,ESVA),                    +
               ID=&ID,IDMAC=DT_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN,       +
               ESVA=&ESVA.
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Validate the incoming parameters.
.*
.DATE    AIF  (N'&DATE GT 2).DATE2MANY
         AIF  (N'&DATE EQ 1).DATEDFLT
         AIF  ('&DATE' EQ '').DATENONE
&DATEADDR    SETC  '&DATE(1)'
&DATEFORMAT  SETC  '&DATE(2)'
         AGO   .TIME
.DATEDFLT ANOP  ,
&DATEADDR    SETC  '&DATE(1)'
&DATEFORMAT  SETC  '&DT_PJULIAN'
         AGO   .TIME
.DATENONE ANOP  ,
&DATEADDR    SETC  '0'
&DATEFORMAT  SETC  '0'
         AGO   .TIME
.DATE2MANY  MNOTE 8,'Too many parameters specified for DATE.'
            MEXIT
.*
.TIME    AIF  (N'&TIME GT 2).TIME2MANY
         AIF  (N'&TIME EQ 1).TIMEDFLT
         AIF  ('&TIME' EQ '').TIMENONE
&TIMEADDR    SETC  '&TIME(1)'
&TIMEFORMAT  SETC  '&TIME(2)'
         AGO   .PARMLIST
.TIMEDFLT ANOP  ,
&TIMEADDR    SETC  '&TIME(1)'
&TIMEFORMAT  SETC  '&DT_HUNDREDTHS'
         AGO   .PARMLIST
.TIMENONE ANOP  ,
&TIMEADDR    SETC  '0'
&TIMEFORMAT  SETC  '0'
         AGO   .PARMLIST
.TIME2MANY  MNOTE 8,'Too many parameters specified for TIME.'
            MEXIT
.*
.* Generate the DT_GET_CURRENT call.
.*
.*
.*       CALLX &#_IDEPA,(&#_IDTKN,&DT_GET_CURRENT,&#_IDESVA,
.*             &CSECTLIST,&(&V_SIZELENGTH),&MAXSEV,&PLCC,
.*             &MSGDEST_OPTION,&MSGDEST_P(1),&MSGDEST_P(2)),VL
.PARMLIST ANOP ,
.ESCHECK ANOP ,
         AIF   (NOT ('&DATEFORMAT' EQ '&DT_ES_FORMAT' AND              *
               '&TIMEFORMAT' NE '0')).TODCHECK
         MNOTE 4,'TIME format will be ignored when DATE format requests*
                DT_ES_Format.'
.TODCHECK AIF  (NOT ('&TIMEFORMAT' EQ '&DT_TODCLOCK' AND               *
               '&DATEFORMAT' NE '0')).CHECKEND
         MNOTE 4,'DATE format will be ignored when TIME format requests*
                DT_TODclock.'
.CHECKEND ANOP ,
         ##PLIST START
         ##PLIST PARM,&#_IDTKN
         ##PLIST PARM,&DT_GET_CURRENT
         ##PLIST PARM,&DATEADDR,&DATEFORMAT
         AIF   ('&TIME' EQ '').PLEND
         ##PLIST PARM,&TIMEADDR,&TIMEFORMAT
.PLEND   ##PLIST END,VL
         CALLX  &#_IDEPA
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   DT_CONVERT                                                 *
* Purpose: Generate code to make a DT_CONVERT call.                   *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         DT_CONVERT &ID=,&SPEPA=,&SPTOKEN=,&ESVA=,                     +
               &FROMDATE=,&FROMTIME=,                                  +
               &TODATE=,&TOTIME=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &DT_CONVERT                SETC in open code.
         GBLA  &DT_ES_FORMAT,&DT_TODCLOCK
         LCLC  &FDATEADDR,&FDATEFORMAT
         LCLC  &FTIMEADDR,&FTIMEFORMAT
         LCLC  &TDATEADDR,&TDATEFORMAT
         LCLC  &TTIMEADDR,&TTIMEFORMAT
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN,ESVA),                    +
               ID=&ID,IDMAC=DT_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN,       +
               ESVA=&ESVA.
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Validate the incoming parameters.
.*
.FDATE   AIF  (N'&FROMDATE GT 2).FDATE2MANY
         AIF  (N'&FROMDATE EQ 1).FDATEDFLT
         AIF  ('&FROMDATE' EQ '').FDATENONE
&FDATEADDR    SETC  '&FROMDATE(1)'
&FDATEFORMAT  SETC  '&FROMDATE(2)'
         AGO   .FTIME
.FDATEDFLT ANOP  ,
&FDATEADDR    SETC  '&DATE(1)'
&FDATEFORMAT  SETC  '&DT_PJULIAN'
         AGO   .FTIME
.FDATENONE ANOP  ,
&FDATEADDR    SETC  '0'
&FDATEFORMAT  SETC  '0'
         AGO   .FTIME
.FDATE2MANY  MNOTE 8,'Too many parameters specified for FROMDATE.'
            MEXIT
.*
.FTIME   AIF  (N'&FROMTIME GT 2).FTIME2MANY
         AIF  (N'&FROMTIME EQ 1).FTIMEDFLT
         AIF  ('&FROMTIME' EQ '').FTIMENONE
&FTIMEADDR    SETC  '&FROMTIME(1)'
&FTIMEFORMAT  SETC  '&FROMTIME(2)'
         AGO   .TDATE
.FTIMEDFLT ANOP  ,
&FTIMEADDR    SETC  '&FROMTIME(1)'
&FTIMEFORMAT  SETC  '&DT_HUNDREDTHS'
         AGO   .TDATE
.FTIMENONE ANOP  ,
&FTIMEADDR    SETC  '0'
&FTIMEFORMAT  SETC  '0'
         AGO   .TDATE
.FTIME2MANY  MNOTE 8,'Too many parameters specified for TIME.'
            MEXIT
.*
.TDATE   AIF  (N'&TODATE GT 2).TDATE2MANY
         AIF  (N'&TODATE EQ 1).TDATEDFLT
         AIF  ('&TODATE' EQ '').TDATENONE
&TDATEADDR    SETC  '&TODATE(1)'
&TDATEFORMAT  SETC  '&TODATE(2)'
         AGO   .TTIME
.TDATEDFLT ANOP  ,
&TDATEADDR    SETC  '&DATE(1)'
&TDATEFORMAT  SETC  '&DT_PJULIAN'
         AGO   .TTIME
.TDATENONE ANOP  ,
&TDATEADDR    SETC  '0'
&TDATEFORMAT  SETC  '0'
         AGO   .TTIME
.TDATE2MANY  MNOTE 8,'Too many parameters specified for TODATE.'
            MEXIT
.*
.TTIME   AIF  (N'&TOTIME GT 2).TTIME2MANY
         AIF  (N'&TOTIME EQ 1).TTIMEDFLT
         AIF  ('&TOTIME' EQ '').TTIMENONE
&TTIMEADDR    SETC  '&TOTIME(1)'
&TTIMEFORMAT  SETC  '&TOTIME(2)'
         AGO   .PARMLIST
.TTIMEDFLT ANOP  ,
&TTIMEADDR    SETC  '&TOTIME(1)'
&TTIMEFORMAT  SETC  '&DT_HUNDREDTHS'
         AGO   .PARMLIST
.TTIMENONE ANOP  ,
&TTIMEADDR    SETC  '0'
&TTIMEFORMAT  SETC  '0'
         AGO   .PARMLIST
.TTIME2MANY  MNOTE 8,'Too many parameters specified for TOTIME.'
            MEXIT
.*
.* Generate the DT_CONVERT call.
.*
.PARMLIST ANOP ,
.ESCHECK ANOP ,
         AIF   (NOT ('&FDATEFORMAT' EQ '&DT_ES_FORMAT' AND             *
               '&FTIMEFORMAT' NE '0')).ESCHK2
         MNOTE 4,'TIME format will be ignored when DATE format requests*
                DT_ES_Format.'
.ESCHK2  AIF   (NOT ('&TDATEFORMAT' EQ '&DT_ES_FORMAT' AND             *
               '&TTIMEFORMAT' NE '0')).TODCHECK
         MNOTE 4,'TIME format will be ignored when DATE format requests*
                DT_ES_Format.'
.TODCHECK AIF  (NOT ('&FTIMEFORMAT' EQ '&DT_TODCLOCK' AND              *
               '&FDATEFORMAT' NE '0')).TODCHK2
         MNOTE 4,'DATE format will be ignored when TIME format requests*
                DT_TODclock.'
.TODCHK2  AIF  (NOT ('&TTIMEFORMAT' EQ '&DT_TODCLOCK' AND              *
               '&TDATEFORMAT' NE '0')).CHECKEND
         MNOTE 4,'DATE format will be ignored when TIME format requests*
                DT_TODclock.'
.CHECKEND ANOP ,
         ##PLIST START
         ##PLIST PARM,&#_IDTKN
         ##PLIST PARM,&DT_CONVERT
         ##PLIST PARM,&FDATEADDR,&FDATEFORMAT
         ##PLIST PARM,&FTIMEADDR,&FTIMEFORMAT
         ##PLIST PARM,&TDATEADDR,&TDATEFORMAT
         AIF    ('&TTIMEADDR' EQ '0').PLEND
         ##PLIST PARM,&TTIMEADDR,&TTIMEFORMAT
.PLEND   ##PLIST END,VL
         CALLX  &#_IDEPA
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   DT_ADD                                                     *
* Purpose: Generate code to make a DT_ADD call.                       *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         DT_ADD  &ID=,&SPEPA=,&SPTOKEN=,&ESVA=,                        +
               &DATEIN=,&TIMEIN=,                                      *
               &INTERVAL=,                                             *
               &DATEOUT=,&TIMEOUT=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &DT_ADD                    SETC in open code.
         GBLA  &DT_ES_FORMAT,&DT_TODCLOCK
         LCLC  &DATEIN_ADDR,&DATEIN_FORMAT
         LCLC  &TIMEIN_ADDR,&TIMEIN_FORMAT
         LCLC  &INTERVAL_ADDR,&INTERVAL_FORMAT
         LCLC  &DATEOUT_ADDR,&DATEOUT_FORMAT
         LCLC  &TIMEOUT_ADDR,&TIMEOUT_FORMAT
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN,ESVA),                    +
               ID=&ID,IDMAC=DT_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN,       +
               ESVA=&ESVA.
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Validate the incoming parameters.
.*
.DATEIN  AIF  (N'&DATEIN GT 2).DATEIN_2MANY
         AIF  (N'&DATEIN EQ 1).DATEIN_FMT_REQUIRED
         AIF  ('&DATEIN' EQ '').DATEIN_NONE
&DATEIN_ADDR    SETC  '&DATEIN(1)'
&DATEIN_FORMAT  SETC  '&DATEIN(2)'
         AGO   .TIMEIN
.DATEIN_NONE ANOP  ,
&DATEIN_ADDR    SETC  '0'
&DATEIN_FORMAT  SETC  '0'
         AGO   .TIMEIN
.DATEIN_2MANY  MNOTE 8,'Too many parameters specified for DATEIN.'
            MEXIT
.DATEIN_FMT_REQUIRED ANOP ,
            MNOTE 8,'DATEIN format missing.'
            MEXIT
.*
.TIMEIN  AIF  (N'&TIMEIN GT 2).TIMEIN_2MANY
         AIF  (N'&TIMEIN EQ 1).TIMEIN_FMT_REQUIRED
         AIF  ('&TIMEIN' EQ '').TIMEIN_NONE
&TIMEIN_ADDR   SETC  '&TIMEIN(1)'
&TIMEIN_FORMAT SETC  '&TIMEIN(2)'
         AGO   .INTERVAL
.TIMEIN_NONE ANOP ,
&TIMEIN_ADDR   SETC  '0'
&TIMEIN_FORMAT SETC  '0'
         AGO   .INTERVAL
.TIMEIN_2MANY MNOTE 8,'Too many parameters specified for TIMEIN.'
            MEXIT
.TIMEIN_FMT_REQUIRED ANOP ,
            MNOTE 8,'TIMEIN format missing.'
            MEXIT
.INTERVAL   ANOP ,
         AIF  (N'&INTERVAL GT 2).INTERVAL_2MANY
         AIF  (N'&INTERVAL EQ 1).INTERVAL_FMT_REQUIRED
         AIF  ('&INTERVAL' EQ '').INTERVAL_NONE
&INTERVAL_ADDR SETC  '&INTERVAL(1)'
&INTERVAL_FORMAT SETC '&INTERVAL(2)'
         AGO   .DATEOUT
.INTERVAL_NONE ANOP ,
&INTERVAL_ADDR SETC  '0'
&INTERVAL_FORMAT SETC '0'
         AGO   .DATEOUT
.INTERVAL_2MANY MNOTE 8,'Too many parameters specified for INTERVAL.'
            MEXIT
.INTERVAL_FMT_REQUIRED ANOP ,
            MNOTE 8,'INTERVAL format missing.'
            MEXIT
.DATEOUT AIF  (N'&DATEOUT GT 2).DATEOUT_2MANY
         AIF  (N'&DATEOUT EQ 1).DATEOUT_FMT_REQUIRED
         AIF  ('&DATEOUT' EQ '').DATEOUT_NONE
&DATEOUT_ADDR   SETC  '&DATEOUT(1)'
&DATEOUT_FORMAT SETC  '&DATEOUT(2)'
         AGO   .TIMEOUT
.DATEOUT_NONE ANOP ,
&DATEOUT_ADDR   SETC  '0'
&DATEOUT_FORMAT SETC  '0'
         AGO   .TIMEOUT
.DATEOUT_2MANY MNOTE 8,'Too many parameters specified for DATEOUT.'
            MEXIT
.DATEOUT_FMT_REQUIRED ANOP ,
            MNOTE 8,'DATEOUT format missing.'
            MEXIT
.*
.TIMEOUT AIF  (N'&TIMEOUT GT 2).TIMEOUT_2MANY
         AIF  (N'&TIMEOUT EQ 1).TIMEOUT_FMT_REQUIRED
         AIF  ('&TIMEOUT' EQ '').TIMEOUT_NONE
&TIMEOUT_ADDR  SETC  '&TIMEOUT(1)'
&TIMEOUT_FORMAT SETC '&TIMEOUT(2)'
         AGO   .PARMLIST
.TIMEOUT_NONE ANOP ,
&TIMEOUT_ADDR  SETC  '0'
&TIMEOUT_FORMAT SETC '0'
         AGO   .PARMLIST
.TIMEOUT_2MANY MNOTE 8,'Too many parameters specified for TIMEOUT.'
            MEXIT
.TIMEOUT_FMT_REQUIRED ANOP ,
            MNOTE 8,'TIMEOUT format missing.'
            MEXIT
.PARMLIST   ANOP  ,
.ESCHECK ANOP ,
         AIF   (NOT ('&DATEIN_FORMAT' EQ '&DT_ES_FORMAT' AND           *
               '&TIMEIN_FORMAT' NE '0')).ESCHK2
         MNOTE  4,'TIME format will be ignored when DATE format request*
               s DT_ES_Format.'
.ESCHK2  AIF   (NOT ('&DATEOUT_FORMAT' EQ '&DT_ES_FORMAT' AND          *
               '&TIMEOUT_FORMAT' NE '0')).TODCHECK
         MNOTE  4,'TIME format will be ignored when DATE format request*
               s DT_ES_Format.'
.TODCHECK AIF  (NOT ('&TIMEIN_FORMAT' EQ '&DT_TODCLOCK' AND            *
               '&DATEIN_FORMAT' NE '0')).TODCHK2
         MNOTE  4,'DATE format will be ignored when TIME format request*
               s DT_TODclock.'
.TODCHK2  AIF  (NOT ('&TIMEOUT_FORMAT' EQ '&DT_TODCLOCK' AND           *
               '&DATEOUT_FORMAT' NE '0')).CHECKEND
         MNOTE  4,'DATE format will be ignored when TIME format request*
               s DT_TODclock.'
.CHECKEND ANOP ,
.*
.* Generate the DT_ADD call.
.*
         ##PLIST START
         ##PLIST PARM,&#_IDTKN
         ##PLIST PARM,&DT_ADD
         ##PLIST PARM,&DATEIN_ADDR,&DATEIN_FORMAT
         ##PLIST PARM,&TIMEIN_ADDR,&TIMEIN_FORMAT
         ##PLIST PARM,&INTERVAL_ADDR,&INTERVAL_FORMAT
         ##PLIST PARM,&DATEOUT_ADDR,&DATEOUT_FORMAT
         AIF   ('&TIMEOUT' EQ '').PLEND
         ##PLIST PARM,&TIMEOUT_ADDR,&TIMEOUT_FORMAT
.PLEND   ##PLIST END,VL
         CALLX  &#_IDEPA
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   DT_SUBTRACT                                                *
* Purpose: Generate code to make a DT_SUBTRACT call.                  *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         DT_SUBTRACT &ID=,&SPEPA=,&SPTOKEN=,&ESVA=,                    +
               &DATEIN=,&TIMEIN=,                                      *
               &INTERVAL=,                                             *
               &DATEOUT=,&TIMEOUT=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &DT_SUBTRACT               SETC in open code.
         GBLA  &DT_ES_FORMAT,&DT_TODCLOCK
         LCLC  &DATEIN_ADDR,&DATEIN_FORMAT
         LCLC  &TIMEIN_ADDR,&TIMEIN_FORMAT
         LCLC  &INTERVAL_ADDR,&INTERVAL_FORMAT
         LCLC  &DATEOUT_ADDR,&DATEOUT_FORMAT
         LCLC  &TIMEOUT_ADDR,&TIMEOUT_FORMAT
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN,ESVA),                    +
               ID=&ID,IDMAC=DT_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN,       +
               ESVA=&ESVA.
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* Validate the incoming parameters.
.*
.DATEIN  AIF  (N'&DATEIN GT 2).DATEIN_2MANY
         AIF  (N'&DATEIN EQ 1).DATEIN_FMT_REQUIRED
         AIF  ('&DATEIN' EQ '').DATEIN_NONE
&DATEIN_ADDR    SETC  '&DATEIN(1)'
&DATEIN_FORMAT  SETC  '&DATEIN(2)'
         AGO   .TIMEIN
.DATEIN_NONE ANOP  ,
&DATEIN_ADDR    SETC  '0'
&DATEIN_FORMAT  SETC  '0'
         AGO   .TIMEIN
.DATEIN_2MANY  MNOTE 8,'Too many parameters specified for DATEIN.'
            MEXIT
.DATEIN_FMT_REQUIRED ANOP ,
            MNOTE 8,'DATEIN format missing.'
            MEXIT
.*
.TIMEIN  AIF  (N'&TIMEIN GT 2).TIMEIN_2MANY
         AIF  (N'&TIMEIN EQ 1).TIMEIN_FMT_REQUIRED
         AIF  ('&TIMEIN' EQ '').TIMEIN_NONE
&TIMEIN_ADDR   SETC  '&TIMEIN(1)'
&TIMEIN_FORMAT SETC  '&TIMEIN(2)'
         AGO   .INTERVAL
.TIMEIN_NONE ANOP ,
&TIMEIN_ADDR   SETC  '0'
&TIMEIN_FORMAT SETC  '0'
         AGO   .INTERVAL
.TIMEIN_2MANY MNOTE 8,'Too many parameters specified for TIMEIN.'
            MEXIT
.TIMEIN_FMT_REQUIRED ANOP ,
            MNOTE 8,'TIMEIN format missing.'
            MEXIT
.INTERVAL   ANOP ,
         AIF  (N'&INTERVAL GT 2).INTERVAL_2MANY
         AIF  (N'&INTERVAL EQ 1).INTERVAL_FMT_REQUIRED
         AIF  ('&INTERVAL' EQ '').INTERVAL_NONE
&INTERVAL_ADDR SETC  '&INTERVAL(1)'
&INTERVAL_FORMAT SETC '&INTERVAL(2)'
         AGO   .DATEOUT
.INTERVAL_NONE ANOP ,
&INTERVAL_ADDR SETC  '0'
&INTERVAL_FORMAT SETC '0'
         AGO   .DATEOUT
.INTERVAL_2MANY MNOTE 8,'Too many parameters specified for INTERVAL.'
            MEXIT
.INTERVAL_FMT_REQUIRED ANOP ,
            MNOTE 8,'INTERVAL format missing.'
            MEXIT
.DATEOUT AIF  (N'&DATEOUT GT 2).DATEOUT_2MANY
         AIF  (N'&DATEOUT EQ 1).DATEOUT_FMT_REQUIRED
         AIF  ('&DATEOUT' EQ '').DATEOUT_NONE
&DATEOUT_ADDR   SETC  '&DATEOUT(1)'
&DATEOUT_FORMAT SETC  '&DATEOUT(2)'
         AGO   .TIMEOUT
.DATEOUT_NONE ANOP ,
&DATEOUT_ADDR   SETC  '0'
&DATEOUT_FORMAT SETC  '0'
         AGO   .TIMEOUT
.DATEOUT_2MANY MNOTE 8,'Too many parameters specified for DATEOUT.'
            MEXIT
.DATEOUT_FMT_REQUIRED ANOP ,
            MNOTE 8,'DATEOUT format missing.'
            MEXIT
.*
.TIMEOUT AIF  (N'&TIMEOUT GT 2).TIMEOUT_2MANY
         AIF  (N'&TIMEOUT EQ 1).TIMEOUT_FMT_REQUIRED
         AIF  ('&TIMEOUT' EQ '').TIMEOUT_NONE
&TIMEOUT_ADDR  SETC  '&TIMEOUT(1)'
&TIMEOUT_FORMAT SETC '&TIMEOUT(2)'
         AGO   .PARMLIST
.TIMEOUT_NONE ANOP ,
&TIMEOUT_ADDR  SETC  '0'
&TIMEOUT_FORMAT SETC '0'
         AGO   .PARMLIST
.TIMEOUT_2MANY MNOTE 8,'Too many parameters specified for TIMEOUT.'
            MEXIT
.TIMEOUT_FMT_REQUIRED ANOP ,
            MNOTE 8,'TIMEOUT format missing.'
            MEXIT
.PARMLIST   ANOP  ,
.ESCHECK ANOP ,
         AIF   (NOT ('&DATEIN_FORMAT' EQ '&DT_ES_FORMAT' AND           *
               '&TIMEIN_FORMAT' NE '0')).ESCHK2
         MNOTE  4,'TIME format will be ignored when DATE format request*
               s DT_ES_Format.'
.ESCHK2  AIF   (NOT ('&DATEOUT_FORMAT' EQ '&DT_ES_FORMAT' AND          *
               '&TIMEOUT_FORMAT' NE '0')).TODCHECK
         MNOTE  4,'TIME format will be ignored when DATE format request*
               s DT_ES_Format.'
.TODCHECK AIF  (NOT ('&TIMEIN_FORMAT' EQ '&DT_TODCLOCK' AND            *
               '&DATEIN_FORMAT' NE '0')).TODCHK2
         MNOTE  4,'DATE format will be ignored when TIME format request*
               s DT_TODclock.'
.TODCHK2  AIF  (NOT ('&TIMEOUT_FORMAT' EQ '&DT_TODCLOCK' AND           *
               '&DATEOUT_FORMAT' NE '0')).CHECKEND
         MNOTE  4,'DATE format will be ignored when TIME format request*
               s DT_TODclock.'
.CHECKEND ANOP ,
.*
.* Generate the DT_SUBTRACT call.
.*
         ##PLIST START
         ##PLIST PARM,&#_IDTKN
         ##PLIST PARM,&DT_SUBTRACT
         ##PLIST PARM,&DATEIN_ADDR,&DATEIN_FORMAT
         ##PLIST PARM,&TIMEIN_ADDR,&TIMEIN_FORMAT
         ##PLIST PARM,&INTERVAL_ADDR,&INTERVAL_FORMAT
         ##PLIST PARM,&DATEOUT_ADDR,&DATEOUT_FORMAT
         AIF   ('&TIMEOUT' EQ '').PLEND
         ##PLIST PARM,&TIMEOUT_ADDR,&TIMEOUT_FORMAT
.PLEND   ##PLIST END,VL
         CALLX  &#_IDEPA
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   DT_DURATION                                                *
* Purpose: Generate code to make a DT_DURATION call.                  *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         DT_DURATION &ID=,&SPEPA=,&SPTOKEN=,&ESVA=,                    +
               &DATE1=,&TIME1=,                                        *
               &DURATION=,                                             *
               &DATE2=,&TIME2=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &DT_DURATION               SETC IN OPEN CODE.
         GBLA  &DT_ES_FORMAT,&DT_TODCLOCK
         LCLC  &DATE1_ADDR,&DATE1_FORMAT
         LCLC  &TIME1_ADDR,&TIME1_FORMAT
         LCLC  &DURATION_ADDR,&DURATION_FORMAT
         LCLC  &DATE2_ADDR,&DATE2_FORMAT
         LCLC  &TIME2_ADDR,&TIME2_FORMAT
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN,ESVA),                    +
               ID=&ID,IDMAC=DT_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN,       +
               ESVA=&ESVA.
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
.*
.* ValiDATE the incoming parameters.
.*
.DATE1   AIF  (N'&DATE1 GT 2).DATE1_2MANY
         AIF  (N'&DATE1 EQ 1).DATE1_FMT_REQUIRED
         AIF  ('&DATE1' EQ '').DATE1_NONE
&DATE1_ADDR     SETC  '&DATE1(1)'
&DATE1_FORMAT   SETC  '&DATE1(2)'
         AGO   .TIME1
.DATE1_NONE ANOP   ,
&DATE1_ADDR     SETC  '0'
&DATE1_FORMAT   SETC  '0'
         AGO   .TIME1
.DATE1_2MANY   MNOTE 8,'Too many parameters specified for DATE1.'
            MEXIT
.DATE1_FMT_REQUIRED ANOP ,
            MNOTE 8,'DATE1 format missing.'
            MEXIT
.*
.TIME1   AIF  (N'&TIME1 GT 2).TIME1_2MANY
         AIF  (N'&TIME1 EQ 1).TIME1_FMT_REQUIRED
         AIF  ('&TIME1' EQ '').TIME1_NONE
&TIME1_ADDR    SETC  '&TIME1(1)'
&TIME1_FORMAT SETC   '&TIME1(2)'
         AGO   .DURATION
.TIME1_NONE ANOP ,
&TIME1_ADDR    SETC  '0'
&TIME1_FORMAT SETC   '0'
         AGO   .DURATION
.TIME1_2MANY MNOTE 8,'Too many parameters specified for TIME1.'
            MEXIT
.TIME1_FMT_REQUIRED ANOP ,
            MNOTE 8,'TIME1 format missing.'
            MEXIT
.DURATION   ANOP ,
         AIF  (N'&DURATION GT 2).DURATION_2MANY
         AIF  (N'&DURATION EQ 1).DURATION_FMT_REQUIRED
         AIF  ('&DURATION' EQ '').DURATION_NONE
&DURATION_ADDR SETC  '&DURATION(1)'
&DURATION_FORMAT SETC '&DURATION(2)'
         AGO   .DATE2
.DURATION_NONE ANOP ,
&DURATION_ADDR SETC  '0'
&DURATION_FORMAT SETC '0'
         AGO   .DATE2
.DURATION_2MANY MNOTE 8,'Too many parameters specified for DURATION.'
            MEXIT
.DURATION_FMT_REQUIRED ANOP ,
            MNOTE 8,'DURATION format missing.'
            MEXIT
.DATE2 AIF    (N'&DATE2 GT 2).DATE2_2MANY
         AIF  (N'&DATE2 EQ 1).DATE2_FMT_REQUIRED
         AIF  ('&DATE2' EQ '').DATE2_NONE
&DATE2_ADDR     SETC  '&DATE2(1)'
&DATE2_FORMAT SETC    '&DATE2(2)'
         AGO   .TIME2
.DATE2_NONE ANOP ,
&DATE2_ADDR     SETC  '0'
&DATE2_FORMAT SETC    '0'
         AGO   .TIME2
.DATE2_2MANY MNOTE 8,'Too many parameters specified for DATE2.'
            MEXIT
.DATE2_FMT_REQUIRED ANOP ,
            MNOTE 8,'DATE2 format missing.'
            MEXIT
.*
.TIME2 AIF    (N'&TIME2 GT 2).TIME2_2MANY
         AIF  (N'&TIME2 EQ 1).TIME2_FMT_REQUIRED
         AIF  ('&TIME2' EQ '').TIME2_NONE
&TIME2_ADDR    SETC  '&TIME2(1)'
&TIME2_FORMAT SETC '&TIME2(2)'
         AGO   .PARMLIST
.TIME2_NONE ANOP ,
&TIME2_ADDR    SETC  '0'
&TIME2_FORMAT SETC '0'
         AGO   .PARMLIST
.TIME2_2MANY MNOTE 8,'Too many parameters specified for TIME2.'
            MEXIT
.TIME2_FMT_REQUIRED ANOP ,
            MNOTE 8,'TIME2 format missing.'
            MEXIT
.PARMLIST   ANOP  ,
.ESCHECK ANOP ,
         AIF   (NOT ('&DATE1_FORMAT' EQ '&DT_ES_FORMAT' AND            *
               '&TIME1_FORMAT' NE '0')).ESCHK2
         MNOTE  4,'TIME format will be ignored when DATE format request*
               s DT_ES_Format.'
.ESCHK2  AIF   (NOT ('&DATE2_FORMAT' EQ '&DT_ES_FORMAT' AND            *
               '&TIME2_FORMAT' NE '0')).TODCHECK
         MNOTE  4,'TIME format will be ignored when DATE format request*
               s DT_ES_Format.'
.TODCHECK AIF  (NOT ('&TIME1_FORMAT' EQ '&DT_TODCLOCK' AND             *
               '&DATE1_FORMAT' NE '0')).TODCHK2
         MNOTE 4,'DATE format will be ignored when TIME format requests*
                DT_TODclock.'
.TODCHK2  AIF  (NOT ('&TIME2_FORMAT' EQ '&DT_TODCLOCK' AND             *
               '&DATE2_FORMAT' NE '0')).CHECKEND
         MNOTE 4,'DATE format will be ignored when TIME format requests*
                DT_TODclock.'
.CHECKEND ANOP ,
.*
.* Generate the DT_DURATION call.
.*
         ##PLIST START
         ##PLIST PARM,&#_IDTKN
         ##PLIST PARM,&DT_DURATION
         ##PLIST PARM,&DATE1_ADDR,&DATE1_FORMAT
         ##PLIST PARM,&TIME1_ADDR,&TIME1_FORMAT
         ##PLIST PARM,&DATE2_ADDR,&DATE2_FORMAT
         ##PLIST PARM,&TIME2_ADDR,&TIME2_FORMAT
         ##PLIST PARM,&DURATION_ADDR,&DURATION_FORMAT
.PLEND   ##PLIST END,VL
         CALLX  &#_IDEPA
.MEXIT   MEND
