.*SRVIM****************************************************************
.*                                                                    *
.*                    Chapter. &imgr.                                 *
.*                                                                    *
.**********************************************************************
.*--------------------------------------------------------------------*
.*  Symbols
.*--------------------------------------------------------------------*
.se imgr     = 'Item Manager'
.se imms     = 'Item Manager Managed Storage'
.se curim    = 'current of Item Manager'
.se curdesc  = 'current of descriptor'
.se curityp  = 'current of item type'
.se ityp     = 'item type'
.*--------------------------------------------------------------------*
:h1.&imgr.
:p.
The &imgr. can be used to manage units of data, refered to as items.
Items can be associated with various data structures, such as, linked
lists and hash tables.
:p.
The &imgr. and this chapter are still under development.
:p.
The &imgr. is environment independent.
.*--------------------------------------------------------------------*
:h3.Obtaining &imgr. Symbols &amp. Macros
.*--------------------------------------------------------------------*
:p.
The &imgr.'s symbols and interface macros can be found in the
assembler copy member :#x.SRVIMMAC:e#x.. This member contains symbols
naming the &imgr.'s load module, function codes, return codes,
and parameter values.  It also contains macros for using all of the
&imgr.'s functions.          The following statement or its equivalent
should appear at the beginning of any program that uses the
&imgr.:
:xmp.
   COPY SRVIMMAC      Obtain the &imgr.'s symbols & macros.
:exmp.
.*===> if there is more than one load module that implements the
.*===> service processor's protocol, that should be mentioned here.
.*--------------------------------------------------------------------*
:h3.Establishing &imgr. Defaults
.*--------------------------------------------------------------------*
Some parameters are general to the &imgr. and not specific to
any function.  These parameters include its load module name
(:#xi.IM_epname:e#xi.), entry point address
(:#xi.IM_epa:e#xi.), and token value
(:#xi.IM_token:e#xi.). The :#x.IM_ID:e#x. macro (see
:hdref refid=imid.) can be used to establish defaults for these
parameters and associate them with a unique service processor
identifier.  The identifier may then be supplied on any &imgr.
macro instruction to refer to the default parameter values.
.*--------------------------------------------------------------------*
:h3.Identifying the &imgr.
.*--------------------------------------------------------------------*
:p.
The &imgr. service processor resides in the load module named by
the following symbol definition in copy member :#x.SRVIMMAC:e#x.:
:xmp.
&amp.ITEM_MANAGER     SETC  '''SRVIM  '''
:exmp.
This symbolic name should be used as the service processor entry point
name for the &imgr. as shown in the following :#x.IM_ID:e#x.
macro instruction.
:xmp.
IM_ID ID=ST,SPEPNAME=&amp.ITEM_MANAGER     Set &imgr. Defaults.
:exmp.
.*--------------------------------------------------------------------*
:h3.Loading the &imgr.
.*--------------------------------------------------------------------*
:p.
The recommended method for loading the &imgr. is through
Environment Support's :#x.ES_LOAD_MODULE:e#x. function, as shown in
the following example:
:xmp.
ES_LOAD_MODULE ID=ES,SPID=IM            Load the &imgr.
:exmp.
.*--------------------------------------------------------------------*
:h3.Common Parameters
.*--------------------------------------------------------------------*
:p.
There are several parameters common to any &imgr. function call.
These parameters are listed below:
.*****
:plist.
:pLt.id_name
:pLd.specifies the name of a service processor identifier created by the
:#x.IM_ID:e#x. macro which will be used by all other function invocation
macros to automatically obtain values for :#xi.im_epa:e#xi. and
:#xi.im_token:e#xi.. This parameter is required unless both
:#xi.im_epa:e#xi. and :#xi.im_token:e#xi. are specified.
:pLt.im_epa
:pLd.a fullword in storage containing the entry point address of the
&imgr. service processor.  The value specified by
:#xi.im_epa:e#xi.  overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:pLt.im_token
:pLd.specifies the label of a fullword in storage that contains the
value (to be) returned by :#x.IM_START:e#x. for the
:#xi.im_token:e#xi. parameter.  The value specified by
:#xi.im_token:e#xi. overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:eplist.
.*--------------------------------------------------------------------*
:h3.Complete List of &imgr. Return Codes
.*--------------------------------------------------------------------*
:p.
Many return codes can be returned from each function.  In the function
descriptions later in this chapter, the most common return codes
returned by the particular function, are documented.  The following
is a complete list of return code.
:rclist.
:rcn.0
:rct.IM_SUCCESS
:rcd.The function was completely successful.
:rcn.2
:rct.IM_INVALID_NUMBER_OF_PARMS
:rcd.The number of parameters supplied on the call to a function
is not correct.
:rcn.3
:rct.IM_INVALID_FUNCTION
:rcd.The function code specified on a call to the &imgr. is not valid.
:rcn.4
:rct.IM_FUNCTION_UNSUPPORTED_ FOR_CLASS
:rcd.The function is not supported for the class of the item supplied.
:rcn.5
:rct.IM_DIV_START_FAILED
:rcd.The &imgr. was not able to start the supplied DIV service
processor.
:rcn.6
:rct.IM_MEMORY_MANAGER_LOAD_ FAILED
:rcd.The &imgr. was not able to load the memory manager.
:rcn.7
:rct.IM_MEMORY_MANAGER_START_ FAILED
:rcd.The Memory Manager failed when the &imgr. tried to start it.
:rcn.8
:rct.IM_ITEM_STORAGE_NOT_ INITIALIZED
:rcd.&imms. had not been initialized yet.  See :hdref refid=imstrt.
for more information.
:rcn.9
:rct.IM_SETUP_ALREADY_COMPLETE
:rcd.A second call was made to the :#x.IM_INITIALIZE function:e#x..
:rcn.11
:rct.IM_INTERNAL_ERROR
:rcd.Some kind of internal error has occured in the &imgr..  Use
the debug area to find out more information.
:rcn.12
:rct.IM_INVALID_TOKEN
:rcd.An invalid token was encountered when processing a function.
:rcn.14
:rct.IM_STORAGE_NOT_AVAILABLE
:rcd.The was not enough memory available in the user region to
process the function.
:rcn.15
:rct.IM_DV_OPEN_WINDOW_FAILED
:rcd.A call to the DV_OPEN_WINDOW function of the associated DIV
service processor has ended with a non-zero return code.
:rcn.16
:rct.IM_DV_SAVE_FAILED
:rcd.A call to the DV_SAVE function of the associated DIV
service processor has ended with a non-zero return code.
:rcn.17
:rct.IM_DV_RESET_FAILED
:rcd.A call to the DV_RESET function of the associated DIV
service processor has ended with a non-zero return code.
:rcn.18
:rct.IM_FUNCTION_REQUIRES_DIV
:rcd.The function envoked requires a DIV service processor EPA to
be supplied on the :#x.IM_START:e#x..
:rcn.19
:rct.IM_INVALID_ITEM_TYPE_TOKEN
:rcd.An item type token is not valid.
:rcn.20
:rct.IM_ITEM_SIZE_REQUIRED
:rcd.The itemsize parameter is required on the function call.
:rcn.21
:rct.IM_NO_ROOM
:rcd.There is not more room in &imms. and no more can be obtained.
:rcn.22
:rct.IM_OFFSET_SPECIFIED_WHEN_ SIZE_WAS_ZERO
:rcd.The offset parameter was supplied when the size was zero.
:rcn.23
:rct.IM_LENGTH_REQUIRED
:rcd.The length parameter is required.
:rcn.24
:rct.IM_INVALID_OFFSET
:rcd.An invalid offset was supplied.
:rcn.25
:rct.IM_NOT_YET_SUPPORTED
:rcd.The function of a part of the function is not yet supported.
:rcn.26
:rct.IM_MISSING_PARAMETER
:rcd.A parameter is missing.
:rcn.27
:rct.IM_INVALID_ITEM_TYPE
:rcd.A invalid item type was encountered.
:rcn.28
:rct.IM_INVALID_ITEM
:rcd.A invalid item was encountered.
:rcn.29
:rct.IM_INVALID_SIZE
:rcd.The size supplied was not valid.
:rcn.30
:rct.IM_DESCRIPTION_TOO_LONG
:rcd.The description supplied was not valid.
:rcn.31
:rct.IM_LENGTH_PARM_ERROR
:rcd.The length supplied was not valid.
:rcn.32
:rct.IM_#_LINKS_PARM_ERROR
:rcd.The #links parmameter supplied was not valid.
:rcn.33
:rct.IM_LINKS_OFFSET_PARM_ERROR
:rcd.The linksoffset parmameter supplied was not valid.
:rcn.34
:rct.IM_ITEM_CHARACTERISTICS_ CHANGED
:rcd.The characteristics of the item have changed.  An item's length,
offset of links and number of links, can not be modified.
:rcn.36
:rct.IM_INVALID_RETURN_AREA_SIZE
:rcd.The return area size supplied is not valid.
:rcn.37
:rct.IM_KEY_LENGTH_PARM_ERROR
:rcd.The keylength parameter supplied is not valid.
:rcn.38
:rct.IM_KEY_OFFSET_PARM_ERROR
:rcd.The keyoffset parameter supplied is not valid.
:rcn.39
:rct.IM_INVALID_DESCRIPTOR_TOKEN
:rcd.The descriptor token parameter supplied is not valid.
:rcn.40
:rct.IM_INVALID_ITEM_TOKEN
:rcd.An item token is not valid.
:rcn.41
:rct.IM_CURRENCY_ERROR
:rcd.The proper currency is not established for the function.
:rcn.42
:rct.IM_INVALID_LINK_NUMBER
:rcd.The link number supplied is not valid.
:rcn.43
:rct.IM_LINK_NOT_NULL
:rcd.A link field is not null that is needed to connect an item to
a structure.
:rcn.44
:rct.IM_AT_END
:rcd.At the end of a structure.  For example, a :#x.IM_OBTAIN_NEXT:e#x.
was issued and there were no more items in a list.
:rcn.45
:rct.IM_REQUIRES_PRIOR_LINK
:rcd.This function requires that the structure have prior links.
:rcn.46
:rct.IM_REQUIRES_FINAL_LINK
:rcd.This function requires that the structure have a final link.
:rcn.47
:rct.IM_REQUIRES_OWNER_LINK
:rcd.This function requires that the structure have owner links.
:rcn.48
:rct.IM_NOT_FOUND
:rcd.The item could not be found.
:rcn.49
:rct.IM_HEAD_NOT_VALID_FOR_ THIS_DESCRIPTOR
:rcd.The headtkn is not valid for this descriptor because the heads
are in the descriptor.
:rcn.50
:rct.IM_INVALID_SFD
:rcd.The Sort Fields Definitions (SFD) is not valid.
:rcn.51
:rct.IM_INVALID_SORT_TECHNIQUE
:rcd.The sort technique supplied is not valid.
:rcn.52
:rct.IM_PRTKN_INVALID
:rcd.PRTKN specified is not valid.
:rcn.53
:rct.IM_PRTKN_REQUIRED
:rcd.PRTKN required if prior links do not exist.
:rcn.54
:rct.IM_HEADTKN_INVALID
:rcd.HEADTKN specified is not valid.
:rcn.55
:rct.IM_CURTKN_INVALID
:rcd.CURTKN specified is not valid.
:rcn.56
:rct.IM_ITEMTYPE_MISMATCH
:rcd.The item type of the item being processed does not match the
MEMTYPE specified on the create for the corresponding descriptor.
:erclist.
.*--------------------------------------------------------------------*
:h2.&imgr. Service Processor Functions
.*--------------------------------------------------------------------*
:p.
The remaining sections of this chapter describe all functions provided
by the &imgr. service processor, arranged in alphabetical order.
Each function's description begins on a new page, and the name of the
function being described appears in the top outside corner of every
page.
.**********************************************************************
.se temp = 'Add An Item Token to The Token Directory'
:func id=addtodr name='IM_ADD_TO_DIRECTORY'.&temp.
.**********************************************************************
:p.
The :#x.IM_ADD_TO_DIRECTORY:e#x. macro is used to add an item token to
the Token Directory.  The Token Directory provides a way to symbolically
remember an item's token.
:p.
This function is not yet implemented.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_ADD_TO_DIRECTORY ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,NAME=&lbr.:hp1.name:ehp1. | &cont.
(:hp1.name:ehp1.,:hp1.name_length:ehp1.)&rbr.
   ,TOKEN=:hp1.token:ehp1.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.IM_ADD_TO_DIRECTORY,&c
:hp1.name_length:ehp1.,:hp1.name:ehp1.,&cont.
:hp1.token:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.name
:pLd.specifies the label of a string that contains the name to be
associated with the token specified with the :#xi.token:e#xi.
parameter.
:pLt.name_length
:pLd.specifies the label of a signed binary integer indicating the
length of the string identified by the :#xi.name:e#xi.
parameter.
:pLt.token
:pLd.specifies the label of a fullword of storage that contains the
token of an item.
:eplist.
:fh3.Example
:p.
:xmp.
IM_ADD_TO_DIRECTORY ID=IM,NAME="MYTOKEN",TOKEN=TOKEN_TAG
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Convert a Token to an Address'
:func id=imcnvtk name='IM_CONVERT_TOKEN_TO_ADDRESS'.&temp.
.**********************************************************************
:p.
The :#x.IM_CONVERT_TOKEN_TO_ADDRESS:e#x. macro is used to
convert a token to its virtual storage address.  To use this macro,
the token conversion routine address must be obtained.
See :hdref refid=imgetda. to find out how to retrieve this address.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_CONVERT_TOKEN_TO_ADDRESS ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
  &lbt.,TKNCNVT=:hp1.tkncnvt:ehp1.&rbt.
   ,ITEMTKN=:hp1.itemtkn:ehp1.
   ,ITEMADDR=:hp1.itemaddr:ehp1.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
None
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.tkncnvt
:pLd.specifies the label of a fullword in storage that contains the
entry point address of the token conversion routine.
:pLt.itemtkn
:pLd.specifies the label of a fullword that contains the token of
the item for with a virtual address should be obtained.
:pLt.itemaddr
:pLd.specifies the label of a fullword into which will be place the
virtual storage address of the time.
:eplist.
:fh3.Example
:p.
This instruction will get the virtual storage address of the item
whose token is in :#x.A_TOKEN:e#x..
:xmp.
         IM_CONVERT_TOKEN_TO_ADDRESS ID=IM,ITEMTKN=A_TOKEN,            +
               ITEMADDR=THE_ADDRESS
:exmp.
:rclist.
:rcn.12
:rct.IM_INVALID_TOKEN
:rcd.The token supplied was not valid.
:erclist.
:efunc.
.se temp = 'Connect An Item'
:func id=connect name='IM_CONNECT'.&temp.
.**********************************************************************
:p.
The :#x.IM_CONNECT:e#x. macro is used to connect an item to the
structure described by a descriptor.  This structure can be a linked
list or a hash table.  See :hdref refid=crtlld. and
:hdref refid=crthtd. for information on how to create a structure
descriptor.  The IM_CONNECT function does not changed currency.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_CONNECT ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,HEADTKN=:hp1.headtkn:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.IM_CONNECT,&cont.
:hp1.desctkn:ehp1.,:hp1.itemtkn:ehp1.,&cont.
:hp1.headtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword that contains the token of a
descriptor that describes the structure to which the item is to be
connected.  The descriptor must describe a linked list or a hash
table.
:pLt.itemtkn
:pLd.specifies the label of a fullword that contains the token of
the item to be connected.  If this parameter is not specified, the
item that is &curim. is connected.
:pLt.headtkn
:pLd.specifies the label of a fullword that contains the token of
the item that contains the heads when a structure can have multiple
occurances.  If this parameter is not specified, the item that is
&curityp. of the &ityp. specified with the :#xi.headtype:e#xi. parameter
on the associated descriptor create function is used.
:eplist.
:fh3.Example
:p.
This instruction will connect the item that is &curim. to the structure
described by the descriptor whose token is in the fullword at tag
:#x.A_LIST_DESCRIPTOR_TOKEN:e#x..
:xmp.
         IM_CONNECT ID=IM,DESCTKN=A_LIST_DESCRIPTOR_TOKEN
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Create A Group Descriptor'
:func id=crtgrd name='IM_CREATE_GROUP_DESCRIPTOR'.&temp.
.**********************************************************************
:p.
The :#x.IM_CREATE_GROUP_DESCRIPTOR:e#x. macro is used to create a group
descriptor.  A group is used to group items of certain &ityp.s
in &imms..  See :hdref refid=crtitd. for information
on specifying a group descriptor when creating an &ityp. descriptor.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_CREATE_GROUP_DESCRIPTOR ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
  &lbt.,TEXT=:hp1.text:ehp1.&rbt.
  &lbt.,STGINCR=:hp1.stgincr:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&cont.
&amp.IM_CREATE_GROUP_DESCRIPTOR,&cont.
:hp1.desctkn:ehp1.,:hp1.text:ehp1.,&cont.
:hp1.stgincr:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword into which the token of the
group descriptor created will be returned.
:pLt.text
:pLd.specifies the label of text to be associated with this
descriptor.  See :hdref refid=imtext. for information
on creating text.
:pLt.stgincr
:pLd.specifies the label of a fullword that contains the size of
the increment of storage that will be obtained each time that more
storage is required for items that are in this group.
If the parameter is not specified, 4K bytes is assumed.
:eplist.
:fh3.Example
:p.
This instruction will create a group descriptor.  The &imgr. will
assign storage to this group in 128K increments.
:xmp.
         IM_CREATE_GROUP_DESCRIPTOR ID=IM,                             +
               DESCTKN=A_GROUP_DESCRIPTOR,                             +
               STGINCR==A(128*1024)
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Create A Hash Table Descriptor'
:func id=crthtd name='IM_CREATE_HASH_TABLE_DESCRIPTOR'.&temp.
.**********************************************************************
:p.
The :#x.IM_CREATE_HASH_TABLE_DESCRIPTOR:e#x. macro is used to create a
structure descriptor for a hash table.
:p.
Because of the number of links involved,
the &imgr. does not support multiple occurrences of a hash table.  You
can simulate multiple occurrences by creating multiple hash table
descriptors and storing their tokens in the link fields of the
appropriate items.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_CREATE_HASH_TABLE_DESCRIPTOR ID=:hp1.id_name:ehp1.
  &lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
  &lbt.,MEMTYPE=:hp1.memtype:ehp1.&rbt.
  &lbt.,TEXT=:hp1.text:ehp1.&rbt.
  &lbt.,OPTIONS=(&lbt.DUPLICATE_KEYS_ALLOWED&rbt.)&rbt.
  &lbt.,ENTRIES=:hp1.entries:ehp1.&rbt.
   ,SYNLNK#=:hp1.synlnk#:ehp1.
   ,KEYOFF=:hp1.keyoff:ehp1.
   ,KEYSZ=:hp1.keysz:ehp1.|(IN_ITEM,:hp1.keysz_offset:ehp1.)
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&cont.
&amp.IM_CREATE_HASH_TABLE_DESCRIPTOR,&cont.
:hp1.desctkn:ehp1.,:hp1.text:ehp1.,
      :hp1.optbyte:ehp1.,:hp1.entries.:ehp1.,:hp1.synlnk#:ehp1.,&cont.
:hp1.keyoff:ehp1.,:hp1.keysz:ehp1.,:hp1.keysz_offset:ehp1.,&cont.
:hp1.memtype:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword into which the token of the
hash table descriptor created will be returned.
:pLt.memtype
:pLd.specifies the label of a halfword which contains the item type
of items that can be members of the hash table.  If this parameter
is not specified, items with a mixture of item types can be connected to
the hash table.
:pLt.text
:pLd.specifies the label of text to be associated with this
descriptor.  See :hdref refid=imtext. for information
on creating text.
:pLt.optbyte
:pLd.specifies the options byte.
:pLt.entries
:pLd.specifies a fullword that contains the number of entries that
should be in the root part of the hash table.  Although the item
manager does not check, this number should be prime.
If this parameter is not specified, 101 entries is assumed.
:pLt.synlnk#
:pLd.specifies a fullword that contains the link number within item
connected to this hash table, that will be used to chain synonyms.
:pLt.keyoff
:pLd.specifies a fullword that contains the offset of the key within
each item connected to this hash table.
:pLt.keysz
:pLd.specifies a fullword that contains the size of the key.  If this
parameter is not specified, the :#xi.keysize_offset:e#xi. parameter
must be specified.  Keys can not be greater than 255 bytes long.
:pLt.keysz_offset
:pLd.specifies a fullword that contains the offset within each item
of one byte that contains the size of the key in that item.
This parameter is mutually exclusive with the :#xi.keysz:e#xi.
parameter.
:eplist.
:fh3.Example
:p.
This instruction will create a hash table descriptor.  A 5 byte key
is in each item at an offset of 6.  The 2nd link field of each item
is used for the hash table synonym chain.
:xmp.
         IM_CREATE_HASH_TABLE_DESCRIPTOR ID=IM,                        +
               DESCTKN=A_HASH_TABLE_DESCRIPTOR,                        +
               SYNLNK#=2,                                              +
               KEYOFF=6,                                               +
               KEYSZ=5
:exmp.
:efunc.
.**********************************************************************
:func name='IM_ID' id=imid.Establish Default &imgr. Values
.**********************************************************************
:p.The :#x.IM_ID:e#x. macro is used to establish default values for
use by other &imgr. macros, which may access those values
through a unique identifier, :#xi.id_name:e#xi., specified by
the user.  When allowed to generate default values, this macro will
create Program Work Area (PWA) storage for :#xi.im_epa:e#xi.
and
:#xi.im_token:e#xi.. These values, whether generated by the
macro or provided by the user, are accessable from all other
&imgr. macros via the :#x.ID=:e#x.:#xi.id_name:e#xi. parameter.
:mac.
IM_ID ID=:hp1.id_name:ehp1.
  &lbt.,SPEPNAME=:hp1.IM_epname:ehp1.&rbt.
  &lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt.
  &lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
  &lbt.,ESID=:hp1.esid_name:ehp1.&rbt.
  &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
  &lbt.optional keywords specific to &imgr.&rbt.
:emac.
.*****
:plist.
:pLt.id_name
:pLd.the identifier to assign to the service processor identifier being
established.  This name must be unique for all service processor
identifier's.
:pLt.IM_epname
:pLd.the entry point name of the &imgr. service processor module
that is being used.
:pLt.im_epa
:pLd.specifies the label of a fullword in storage that will contain the
entry point address of the Environment Support service processor.
:pLt.im_token
:pLd.specifies the label of a fullword in storage that will contain the
token assigned by the :#x.IM_START:e#x. function of the String
Handler.
:pLt.esid_name
:pLd.the name of a service processor identifier, created by the
:#x.ES_ID:e#x.  macro, which will be used by the :#x.IM_ID:e#x. macro to
automatically obtain the value for :#x.esv:e#x. (see below).
:pLt.esva
:pLd.specifies the label of a fullword in storage that contains (or
will contain) the address of the Environment Support Vector
(:#x.ESV:e#x.) created by the :#x.ES_START:e#x. function.
:eplist.
:fh3.Example 1
:p.
:xmp.
IM_ID ID=ES,SPEPNAME=&amp.ITEM_MANAGER
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Create An Item Type Descriptor'
:func id=crtitd name='IM_CREATE_ITEM_TYPE_DESCRIPTOR'.&temp.
.**********************************************************************
:p.
The :#x.IM_CREATE_ITEM_TYPE_DESCRIPTOR:e#x. macro is used to create a
item type descriptor.
:p.
Unlike all other tokens, which are four bytes long,
the token for an item type descriptor is only two bytes long.
The first two bytes of every item is the token of the item type
descriptor that describes that item's characteristics.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_CREATE_ITEM_TYPE_DESCRIPTOR ID=:hp1.id_name:ehp1.
  &lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,ITEMTYPE=:hp1.itemtype:ehp1.
  &lbt.,TEXT=:hp1.text:ehp1.&rbt.
  &lbt.,OPTIONS=(:hp1.&lbt.FIRST_LINK_HAS_DESCRIPTION&rbt.:ehp1.)
  &lbt.,GROUPTKN=:hp1.grouptkn:ehp1.&rbt.
   ,ITEMSZ=:hp1.itemsz:ehp1. | &cont.
(IN_ITEM,:hp1.itemsz_offset:ehp1.,:hp1.itemsz_lensize:ehp1.)
  &lbt.,#LINKS=:hp1.#links:ehp1. | &cont.
(IN_ITEM,:hp1.#links_offset:ehp1.,:hp1.#links_lensize:ehp1.)&rbt.
  &lbt.,LINKSOFF=:hp1.linksoff:ehp1. | &cont.
(IN_ITEM,:hp1.linksoff_offset:ehp1.,:hp1.linksoff_lensize:ehp1.)&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&cont.
&amp.IM_CREATE_ITEM_TYPE_DESCRIPTOR,&cont.
:hp1.itemtype:ehp1.,:hp1.text:ehp1.,
      :hp1.optbyte:ehp1.,:hp1.grouptkn:ehp1.,&cont.
:hp1.itemsz:ehp1.,:hp1.#links:ehp1.,:hp1.linksoff:ehp1.,
      :hp1.itemsz_lensize:ehp1.,:hp1.itemsz_offset:ehp1.,&cont.
:hp1.#links_lensize:ehp1.,:hp1.#links_offset:ehp1.,
      :hp1.linksoff_lensize:ehp1.,:hp1.linksoff_offset:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.itemtype
:pLd.specifies the label of a halfword into which the token of the
item type descriptor created will be returned.
:pLt.text
:pLd.specifies the label of text to be associated with this
descriptor.  See :hdref refid=imtext. for information
on creating text.
:pLt.optbyte
:pLd.specifies the options byte.
:pLt.grouptkn
:pLd.specifies the label of a fullword that contains the token of the
group descriptor to be used when creating items of this type.  See
:hdref refid=crtgrd. for further information on creating group
descriptors.  If this parameter is not specified, items of this type
will go into the default user group.  See :hdref refid=iminit. for
information on the size of the storage increment for the default
user group.
:pLt.itemsz
:pLd.specifies a fullword that contains the length of items of this
type.  This parameter is mutually exclusive with the
:#xi.itemsz_offset:e#xi. and :#xi.itemsz_lensize:e#xi. parameters and
is required if they are not specified.
:pLt.itemsz_offset
:pLd.specifies a fullword that contains the offset within each item
of this type of the item's length.
:pLt.itemsz_lensize
:pLd.specifies a fullword that contains the size of the item length
within each item of this type.  This length can be 1, 2, 3 or 4.
:pLt.#links
:pLd.specifies a fullword that contains the number of links in items of
this type.  This parameter is mutually exclusive with the
:#xi.#links_offset:e#xi. and :#xi.#links_lensize:e#xi. parameters and
is required if they are not specified.
:pLt.#links_offset
:pLd.specifies a fullword that contains the offset within each item
of this type of the item's number of links.
:pLt.#links_lensize
:pLd.specifies a fullword that contains the size of the field
within each item of this type that contains its number of links.
This length can be 1, 2, 3 or 4.
:pLt.linksoff
:pLd.specifies a fullword that contains the offset of the links
in items of
this type.  This parameter is mutually exclusive with the
:#xi.linksoff_offset:e#xi. and :#xi.linksoff_lensize:e#xi. parameters an
is required if they are not specified.
:pLt.linksoff_offset
:pLd.specifies a fullword that contains the offset within each item
of this type of the item's links offset.
:pLt.linksoff_lensize
:pLd.specifies a fullword that contains the size of the field
within each item of this type that contains its links offset.
This length can be 1, 2, 3 or 4.
:eplist.
:fh3.Example
:p.
This instruction will create an item type descriptor.  Each items stored
with the token returned by this function in its first two bytes will be
32 bytes long with two links at its end.
:xmp.
         IM_CREATE_ITEM_TYPE_DESCRIPTOR ID=IM,                         +
               ITEMTYPE=ITEM_TYPE_DESCRIPTOR,                          +
               ITEMSZ=32,#LINKS=2,LINKOFF=24
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Create A Linked List Descriptor'
:func id=crtlld name='IM_CREATE_LINKED_LIST_DESCRIPTOR'.&temp.
.**********************************************************************
:p.
The :#x.IM_CREATE_LINKED_LIST_DESCRIPTOR:e#x. macro is used to create a
linked list descriptor.

The sorted list related options and parameters for this function are
not yet implemented.  Also, LIST_ORDER_NEXT and LIST_ORDER_PRIOR are
not yet implemented.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_CREATE_LINKED_LIST_DESCRIPTOR ID=:hp1.id_name:ehp1.
  &lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
  &lbt.,TEXT=:hp1.text:ehp1.&rbt.
  &lbt.,OPTIONS=(&lbt.HEADS_IN_DESCRIPTOR&rbt.
             &lbt.,DUPLICATE_KEYS_ALLOWED&rbt.
             &lbt.,LIST_ORDER_FIRST&rbt.
             &lbt.,LIST_ORDER_FINAL&rbt.
             &lbt.,LIST_ORDER_NEXT&rbt.
             &lbt.,LIST_ORDER_PRIOR&rbt.
             &lbt.,LIST_ORDER_SORTED_ASCENDING&rbt.
             &lbt.,LIST_ORDER_SORTED_DESCENDING&rbt.)
  &lbt.,FSTLNK#=:hp1.fstlnk#:ehp1.&rbt.
  &lbt.,FNLLNK#=:hp1.fnllnk#:ehp1.&rbt.
   ,NXTLNK#=:hp1.nxtlnk#:ehp1.
  &lbt.,PRLNK#=:hp1.prvlnk#:ehp1.&rbt.
  &lbt.,OWNLNK#=:hp1.ownlnk#:ehp1.&rbt.
  &lbt.,HEADTYPE=:hp1.headtype:ehp1.&rbt.
  &lbt.,MEMTYPE=:hp1.memtype:ehp1.&rbt.
  &lbt.,KEYOFF=:hp1.keyoff:ehp1.&rbt.
  &lbt.,KEYSZ=:hp1.keysz:ehp1.|(IN_ITEM,:hp1.keysz_offset:ehp1.)&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&cont.
&amp.IM_CREATE_LINKED_LIST_DESCRIPTOR,&cont.
:hp1.desctkn:ehp1.,:hp1.text:ehp1.,
      :hp1.optbyte:ehp1.,:hp1.fstlnk#.:ehp1.,&cont.
:hp1.fnllk#:ehp1.,:hp1.nxtlk#:ehp1.,:hp1.prlnk#:ehp1.,
      :hp1.headtype:ehp1.,:hp1.keyoff:ehp1.,&cont.
:hp1.keysz:ehp1.,:hp1.keysz_offset:ehp1.,:hp1.memtype:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword into which will be returned
the token of the linked list descriptor created.
:pLt.text
:pLd.specifies the label of text to be associated with this
descriptor.  See :hdref refid=imtext. for information
on creating text.
:pLt.optbyte
:pLd.specifies the options byte.
:pLt.HEADS_IN_ DESCRIPTOR
:pLd.indicates that the heads for the list will be contained in the
list descriptor.
:pLt.LIST_ORDER_FIRST
:pLd.indicates that normally items will be connected to the start of
the list.
:pLt.LIST_ORDER_FINAL
:pLd.indicates that normally items will be connected to the end of
the list.
:pLt.fstlnk#
:pLd.specifies the label of a fullword that contains the link number
of the :q.first link:eq. in the associated head items.
Do not specify this parameter if
OPTIONS=HEADS_IN_DESCRIPTOR is specified.
If OPTIONS=HEADS_IN_DESCRIPTOR is not specified, this parameter is
required.
:pLt.fnllnk#
:pLd.specifies the label of a fullword that contains the link number
of the :q.final link:eq. in the associated head items.
Do not specify this parameter if
OPTIONS=HEADS_IN_DESCRIPTOR is specified.
:pLt.nxtlnk#
:pLd.specifies the label of a fullword that contains the link number
of the :q.next link:eq. in the associated member items.
:pLt.prlnk#
:pLd.specifies the label of a fullword that contains the link number
of the :q.prior link:eq. in the associated member items.
:pLt.ownlnk#
:pLd.specifies the label of a fullword that contains the link number
of the :q.owner link:eq. in the associated member items.
:pLt.headtype
:pLd.specifies the label of a halfword which contains the item type
of the items that will head the lists.
Do not specify this parameter if
OPTIONS=HEADS_IN_DESCRIPTOR is specified.
If OPTIONS=HEADS_IN_DESCRIPTOR is not specified, this parameter is
required.
:pLt.memtype
:pLd.specifies the label of a halfword which contains the item type
of items that can be members of the linked list.  If this parameter
is not specified, items with a mixture of item types can be connected to
the linked list.
:pLt.keyoff
:pLd.specifies the label of a fullword which contains the offset of
the key in items of the list.
:pLt.keysz
:pLd.specifies the label of a fullword which contains the size of the
key.
:pLt.keysz_offset
:pLd.specifies the label of a fullword which contains the offset of the
one byte key size in associated item.
:eplist.
:fh3.Example
:p.
This instruction will create a
:xmp.
         IM_CREATE_LINKED_LIST_DESCRIPTOR ID=IM,                       +
               DESCTKN=A_LINKED_LIST_DESCRIPTOR,                       +
               NXTLNK#=4
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Destroy A Descriptor'
:func id=destroy name='IM_DESTROY'.&temp.
.**********************************************************************
:p.
The :#x.IM_DESTORY:e#x. macro is used to destroy a descriptor created
by one of the create functions.
:p.
This function is not yet implemented.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_DESTORY ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.IM_DESTROY,&cont.
:hp1.desctkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword that contains the token of a
descriptor to destroy.  The descriptor must not be associated with
any items.
:eplist.
:fh3.Example
:p.
This instruction will destroy the descriptor whose token is in the
fullword at tag A_DESCRIPTOR_TOKEN.
:xmp.
         IM_DESTORY ID=IM,DESCTKN=A_DESCRIPTOR_TOKEN
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Disconnect An Item'
:func id=disconn name='IM_DISCONNECT'.&temp.
.**********************************************************************
:p.
The :#x.IM_DISCONNECT:e#x. macro is used to disconnect an item from the
structure described by a descriptor.  This structure can be a linked
list or a hash table.  See :hdref refid=connect. for information on
how to connect an item to a structure.  No item is &curdesc.
for the descriptor specified after this function has completed.  Other
currency remains unchanged.
:p.
This function is only implemented for linked lists.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_DISCONNECT ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,HEADTKN=:hp1.headtkn:ehp1.&rbt.
  &lbt.,PRTKN=:hp1.prtkn:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.IM_DISCONNECT,&cont.
:hp1.desctkn:ehp1.,:hp1.itemtkn:ehp1.,&cont.
:hp1.headtkn:ehp1.,:hp1.prtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword that contains the token of a
descriptor that describes the structure to which the item is to be
disconnected.  The descriptor must describe a linked list or a hash
table.
:pLt.itemtkn
:pLd.specifies the label of a fullword that contains the token of
the item to be disconnected.  If this parameter is not specified, the
item that is &curim. is disconnected.
:pLt.headtkn
:pLd.specifies the label of a fullword that contains the token of
the item that contains the heads when a structure can have multiple
occurances.  If this parameter is not specified, the item that is
&curityp. of the &ityp. specified with the :#xi.headtype:e#xi. parameter
on the associated descriptor create function is used.
:pLt.prtkn
:pLd.specifies the label of a fullword that contains the token of
the item prior to the one to be disconnected.
If this parameter is not specified, the associated
descriptor must have a prior link.
:eplist.
:fh3.Example
:p.
This instruction will disconnect the item that is &curim. from
the structure
described by the descriptor whose token is in the fullword at tag
:#x.A_LIST_DESCRIPTOR_TOKEN:e#x..
:xmp.
         IM_DISCONNECT ID=IM,DESCTKN=A_LIST_DESCRIPTOR_TOKEN
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Erase An Item'
:func id=erase name='IM_ERASE'.&temp.
.**********************************************************************
:p.
The :#x.IM_ERASE:e#x. macro is used to erase an item from &imms..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_ERASE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
  &lbt.,OPTIONS=(&lbt.BYPASS_LINKS_CHECK&rbt.)&rbt.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.IM_ERASE,&cont.
:hp1.optbyte:ehp1.,:hp1.itemtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.optbyte
:pLd.specifies the label of a byte that contains options.
:pLt.itemtkn
:pLd.specifies the label of a fullword that contains the token of
the item to be erased.  If this parameter is not specified, the
item that is &curim. is erased.
:eplist.
:fh3.Example
:p.
This instruction will erase the item that is &curim. from &imms..
:xmp.
         IM_ERASE ID=IM
:exmp.
:rclist.
:rcn.0
:rct.IM_SUCCESS
:rcd.The :#x.IM_ERASE:e#x. function has successfully
erased the item from &imms..
:erclist.
:efunc.
.**********************************************************************
.se temp = 'Find An Item By Its Token'
:func id=imfd name='IM_FIND'.&temp.
.**********************************************************************
:p.
The :#x.IM_FIND:e#x. macro is used to locate an item by its item token.
The item found will become &curim. and &curityp..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_FIND ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,ITEMTKN=:hp1.itemtkn:ehp1.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.IM_FIND,&cont.
:hp1.itemtkn:ehp1.,:hp1.actualsz:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.id_name
:pLd.specifies the name of a service processor identifier created by the
:#x.IM_ID:e#x. macro which will be used by the
:#x.IM_FIND:e#x.
macro to automatically obtain values for :#xi.im_epa:e#xi.
and
:#xi.im_token:e#xi.. This parameter is required unless both
:#xi.im_epa:e#xi. and :#xi.im_token:e#xi. are
specified.
:pLt.im_epa
:pLd.specifies the label of a fullword in storage that contains the
entry point address of an already-started &imgr. service
processor.  The value specified by :#xi.im_epa:e#xi.
overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:pLt.im_token
:pLd.specifies the label of a fullword in storage that contains the
value returned by :#x.IM_START:e#x. for the
:#xi.im_token:e#xi. parameter.  The value specified by
:#xi.im_token:e#xi. overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:pLt.itemtkn
:pLd.specifies the label of a fullword that contains the token of
the item to be located.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be place the
actual size of the item found.
:eplist.
:fh3.Example
:p.
This instruction will find the item whose token is in the fullword
at label ITEM_TOKEN.
:xmp.
         IM_FIND ID=IM,ITEMTKN=ITEM_TOKEN
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Find An Item By Key'
:func id=imfdky name='IM_FIND_BY_KEY'.&temp.
.**********************************************************************
:p.
The :#x.IM_FIND_BY_KEY:e#x. macro
is used to locate an item by its key.
The item found will become &curim. and &curityp..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_FIND_BY_KEY ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
   ,KEY=:hp1.key:ehp1. | &cont.
(:hp1.key:ehp1.,:hp1.key_length:ehp1.)
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.IM_FIND_BY_KEY,&cont.
:hp1.desctkn:ehp1.,:hp1.key_length:ehp1.,:hp1.key:ehp1.,
      :hp1.actualsz:ehp1.,:hp1.itemtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword that contains the token of
descriptor that describes the structure in which the item should be
found.
:pLt.key_length
:pLd.specifies a fullword that contains the length of the key.  Trailing
blanks are ignored in the compare, so the key can still match a item
in &imms. even if the key length of that item is not the same
as the key length specified.
:pLt.key
:pLd.specifies the label of a field that contains the key of the item
to locate.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be placed the
actual size of the item found.
:pLt.itemtkn
:pLd.specifies the label of a fullword into which will be placed the
token of the item located.
:eplist.
:fh3.Example
:p.
This instruction will find the item in the linked list described by
A_LIST_DESCRIPTOR that has a key of "XYZZY".
:xmp.
         IM_FIND_BY_KEY ID=IM,DESCTKN=A_LIST_DESCRIPTOR,KEY="XYZZY"
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Find the Item That is Current of Descriptor'
:func id=imfdcd name='IM_FIND_CURRENT_OF_DESCRIPTOR'.&temp.
.**********************************************************************
:p.
The :#x.IM_FIND_CURRENT_OF_DESCRIPTOR:e#x. macro
is used to locate an item that is current of a given descriptor.
The item found will become &curim. and &curityp..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_FIND_CURRENT_OF_DESCRIPTOR ID=:hp1.id_name:ehp1.
  &lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_FIND_CURRENT_OF_DESCRIPTOR,&cont.
:hp1.desctkn:ehp1.,
      :hp1.actualsz:ehp1.,:hp1.itemtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword that contains the token of
descriptor that describes the structure in which the item should be
found.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be placed the
actual size of the item found.
:pLt.itemtkn
:pLd.specifies the label of a fullword into which will be placed the
token of the item located.
:eplist.
:fh3.Example
:p.
This instruction will find the item that is current of descriptor for
the structure described by A_LIST_DESCRIPTOR.
:xmp.
         IM_FIND_CURRENT_OF_DESCRIPTOR ID=IM,DESCTKN=A_LIST_DESCRIPTOR
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Find the Item That is Current of Item Type'
:func id=imfdit name='IM_FIND_CURRENT_OF_ITEM_TYPE'.&temp.
.**********************************************************************
:p.
The :#x.IM_FIND_CURRENT_OF_ITEM_TYPE:e#x. macro is used to locate an
item that is current of a given item type.  The item found will become
&curim. and remain &curityp..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_FIND_CURRENT_OF_ITEM_TYPE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,ITEMTYPE=:hp1.itemtype:ehp1.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_FIND_ITEM_TYPE,:hp1.itemtype:ehp1.,&cont.
:hp1.actualsz:ehp1.,:hp1.itemtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.itemtype
:pLd.specifies the label of a halfword that contains the token of
item type descriptor
for the item that should be
found.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be placed the
actual size of the item found.
:pLt.itemtkn
:pLd.specifies the label of a fullword into which will be placed the
token of the item located.
:eplist.
:fh3.Example
:p.
This instruction will find the item that is current of item type for
the structure described by A_LIST_DESCRIPTOR.
:xmp.
         IM_FIND_CURRENT_OF_ITEM_TYPE ID=IM,DESCTKN=A_LIST_DESCRIPTOR
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Find the Final Item in a Structure'
:func id=imfdfn name='IM_FIND_FINAL'.&temp.
.**********************************************************************
:p.
The :#x.IM_FIND_FINAL:e#x. macro
is used to locate the final item in a structure.
This functions is supported for Linked Lists.
The item found will become &curim., &curdesc. and  &curityp..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_FIND_FINAL ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
  &lbt.,HEADTKN=:hp1.headtkn:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_FIND_FINAL,:hp1.desctkn:ehp1.,&cont.
:hp1.actualsz:ehp1.,:hp1.itemtkn:ehp1.,:hp1.headtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword that contains the token of
descriptor that describes the structure in which the item should be
found.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be placed the
actual size of the item found.
:pLt.itemtkn
:pLd.specifies the label of a fullword into which will be placed the
token of the item located.
:pLt.headtkn
:pLd.specifies the label of a fullword that contains the token of the
head item for the list.  This parameter only applies to lists that do
not contain heads in the descriptor.
If this parameter is not specified, the item
that is &curityp. of the HEADTYPE associated with the descriptor will
be used.
:eplist.
:fh3.Example
:p.
This instruction will find the final item in the linked list
described by A_LIST_DESCRIPTOR.
:xmp.
         IM_FIND_FINAL ID=IM,DESCTKN=A_LIST_DESCRIPTOR
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Find the First Item in a Structure'
:func id=imfdfr name='IM_FIND_FIRST'.&temp.
.**********************************************************************
:p.
The :#x.IM_FIND_FIRST:e#x. macro
is used to locate the first item in a structure.
This functions is supported for Linked Lists.
The item found will become &curim., &curdesc. and  &curityp..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_FIND_FIRST ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
  &lbt.,HEADTKN=:hp1.headtkn:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_FIND_FIRST,:hp1.desctkn:ehp1.,&cont.
:hp1.actualsz:ehp1.,:hp1.itemtkn:ehp1.,:hp1.headtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword that contains the token of
descriptor that describes the structure in which the item should be
found.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be placed the
actual size of the item found.
:pLt.itemtkn
:pLd.specifies the label of a fullword into which will be placed the
token of the item located.
:pLt.headtkn
:pLd.specifies the label of a fullword that contains the token of the
head item for the list.  This parameter only applies to lists that do
not contain heads in the descriptor.
If this parameter is not specified, the item
that is &curityp. of the HEADTYPE associated with the descriptor will
be used.
:eplist.
:fh3.Example
:p.
This instruction will find the first item in the linked list
described by A_LIST_DESCRIPTOR.
:xmp.
         IM_FIND_FIRST ID=IM,DESCTKN=A_LIST_DESCRIPTOR
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Find An Item Token in The Token Directory'
:func id=imfddr name='IM_FIND_IN_DIRECTORY'.&temp.
.**********************************************************************
:p.
The :#x.IM_FIND_IN_DIRECTORY:e#x. macro
is used to get an item token in the token directory.
Currency is not changed.
:p.
This function is not yet implemented.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_FIND_IN_DIRECTORY ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,NAME=&lbr.:hp1.name:ehp1. | &cont.
(:hp1.name:ehp1.,:hp1.name_length:ehp1.)&rbr.
   ,TOKEN=:hp1.token:ehp1.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_FIND_IN_DIRECTORY,&cont.
:hp1.name_length:ehp1.,:hp1.name:ehp1.,&cont.
:hp1.token:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.name
:pLd.specifies the label of a string that contains the name that is
associated with the token specified with the :#xi.token:e#xi.
parameter.
:pLt.name_length
:pLd.specifies the label of a signed binary integer indicating the
length of the string identified by the :#xi.name:e#xi.
parameter.
:pLt.token
:pLd.specifies the label of a fullword of storage into which will be
placed the token of the associated item.
:eplist.
:fh3.Example
:p.
This instruction will find the item token associated with the name
"MY_TOKEN" and put it in TOKEN_TAG.
:xmp.
         IM_FIND_IN_DIRECTORY ID=IM,NAME="MY_TOKEN",TOKEN=TOKEN_TAG
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Find the Next Item in a Structure'
:func id=imfdnx name='IM_FIND_NEXT'.&temp.
.**********************************************************************
:p.
The :#x.IM_FIND_NEXT:e#x. macro
is used to locate the next item in a structure.
This functions is supported for Linked Lists.
The item found will become &curim., &curdesc. and  &curityp..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_FIND_NEXT ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
  &lbt.,CURTKN=:hp1.curtkn:ehp1.&rbt.
  &lbt.,HEADTKN=:hp1.headtkn:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_FIND_NEXT,:hp1.desctkn:ehp1.,&cont.
:hp1.actualsz:ehp1.,:hp1.itemtkn:ehp1.,
      :hp1.curtkn:ehp1.,:hp1.headtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword that contains the token of
descriptor that describes the structure in which the item should be
found.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be placed the
actual size of the item found.
:pLt.itemtkn
:pLd.specifies the label of a fullword into which will be placed the
token of the item located.
:pLt.curtkn
:pLd.specifies the label of a fullword that contains the token of the
current item in the list.  If this parameter is not specified, the item
that is &curdesc. will be used.  If this parameter has a value of zero,
the first item in the list will be found.
:pLt.headtkn
:pLd.specifies the label of a fullword that contains the token of the
head item for the list.  This parameter only applies to lists that do
not contain heads in the descriptor.
If this parameter is not specified, the item
that is &curityp. of the HEADTYPE associated with the descriptor will
be used.
:eplist.
:fh3.Example
:p.
This instruction will find the next item in the linked list
described by A_LIST_DESCRIPTOR.
:xmp.
         IM_FIND_NEXT ID=IM,DESCTKN=A_LIST_DESCRIPTOR
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Find the Owner Item of an item in a Structure'
:func id=imfdow name='IM_FIND_OWNER'.&temp.
.**********************************************************************
:p.
The :#x.IM_FIND_OWNER:e#x. macro
is used to locate the owner item of an item in a structure.
This functions is supported for Linked Lists.
The item found will become &curim. and &curityp..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_FIND_OWNER ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
  &lbt.,CURTKN=:hp1.curtkn:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_FIND_OWNER,:hp1.desctkn:ehp1.,&cont.
:hp1.actualsz:ehp1.,:hp1.itemtkn:ehp1.,:hp1.curtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword that contains the token of
descriptor that describes the structure in which the item should be
found.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be placed the
actual size of the item found.
:pLt.itemtkn
:pLd.specifies the label of a fullword into which will be placed the
token of the item located.
:pLt.curtkn
:pLd.specifies the label of a fullword that contains the token of the
item in the list for which the owner should be found.
If this parameter is not specified, the item
that is &curim. will be used.
:eplist.
:fh3.Example
:p.
This instruction will find the owner item in the linked list
described by A_LIST_DESCRIPTOR.
:xmp.
         IM_FIND_OWNER ID=IM,DESCTKN=A_LIST_DESCRIPTOR
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Find the Prior Item in a Structure'
:func id=imfdpr name='IM_FIND_PRIOR'.&temp.
.**********************************************************************
:p.
The :#x.IM_FIND_PRIOR:e#x. macro
is used to locate the prior item in a structure.
This functions is supported for Linked Lists.
The item found will become &curim., &curdesc. and  &curityp..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_FIND_PRIOR ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
  &lbt.,HEADTKN=:hp1.headtkn:ehp1.&rbt.
  &lbt.,CURTKN=:hp1.curtkn:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_FIND_PRIOR,:hp1.desctkn:ehp1.,&cont.
:hp1.actualsz:ehp1.,:hp1.itemtkn:ehp1.,
      :hp1.curtkn:ehp1.,:hp1.headtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword that contains the token of
descriptor that describes the structure in which the item should be
found.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be placed the
actual size of the item found.
:pLt.itemtkn
:pLd.specifies the label of a fullword into which will be placed the
token of the item located.
:pLt.curtkn
:pLd.specifies the label of a fullword that contains the token of the
current item in the list.  If this parameter is not specified, the item
that is &curdesc. will be used.  If this parameter has a value of zero,
the last item in the list will be found.
:pLt.headtkn
:pLd.specifies the label of a fullword that contains the token of the
head item for the list.  This parameter only applies to lists that do
not contain heads in the descriptor.
If this parameter is not specified, the item
that is &curityp. of the HEADTYPE associated with the descriptor will
be used.
:eplist.
:fh3.Example
:p.
This instruction will find the prior item in the linked list
described by A_LIST_DESCRIPTOR.
:xmp.
         IM_FIND_PRIOR ID=IM,DESCTKN=A_LIST_DESCRIPTOR
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Get an Item'
:func id=imget  name='IM_GET'.&temp.
.**********************************************************************
:p.
The :#x.IM_GET:e#x. macro
is used to obtain the item that is &curim..
Currency is not changed.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_GET ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,ITEM=&lbr.:hp1.item:ehp1. | &cont.
(:hp1.item:ehp1.,:hp1.item_length:ehp1.)&rbr.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_GET,:hp1.item_length:ehp1.,:hp1.item:ehp1.,&cont.
:hp1.actualsz:ehp1.,:hp1.itemtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.item
:pLd.specifies the label of the storage into which a copy of the item
will be placed.
:pLt.item_length
:pLd.specifies the label of a signed binary integer indicating the
length of the storage area specified by the :#xi.name:e#xi.
parameter.  In the macro form, if item_length is not specified,
an =A(L'item) will be used to determine the length of the storage.
This storage can be larger than the actual item, but must be large
enough to hold the complete item.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be placed the
actual size of the item found.
:pLt.itemtkn
:pLd.specifies the label of a fullword into which will be placed the
token of the item located.
:eplist.
:fh3.Example
:p.
This instruction will get the item that is &curim..
:xmp.
         IM_GET ID=IM,ITEM=ITEM_WORK_AREA
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Get Dangerous Addresses'
:func id=imgetda name='IM_GET_DANGEROUS_ADDRESSES'.&temp.
.**********************************************************************
:p.
The :#x.IM_GET_DANGEROUS_ADDRESSES:e#x. macro
is used to get the address of the token-to-virtual-address conversion
routine.  This allows direct access to &imms..  Direct access to &imms.
should be avoided, but can be accomplished through this routine if
there are overriding reasons.  This is the function that will be used
to externalize any other internal &imgr. functions, as needed.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_GET_DANGEROUS_ADDRESSES ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
  &lbt.,TKNCNVT=:hp1.tkncnvt:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_GET_DANGEROUS_ADDRESSES,&cont.
:hp1.tkncnvt:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.tkncnvt
:pLd.specifies the label of a fullword into which will be place the
address of the token convertion routine.  If the macro form is used
and this parameter is not specified, the value of the TKNCNVT keyword
on the corresponding IM_ID macro is used.
:eplist.
:fh3.Example
:p.
This instruction will place the address of the conversion routine in
CONVERT_ADDRESS
:xmp.
         IM_GET_DANGEROUS_ADDRESSES ID=IM,TKNCNVT=CONVERT_ADDRESS
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Initialize &imgr. Managed Storage'
:func id=iminit name='IM_INITIALIZE'.&temp.
.**********************************************************************
:p.
The :#x.IM_INITIALIZE:e#x. macro
is used to initialize &imms..
If the &imgr. is not started with a DIV
service process specified or if this is the first use of a DIV data
set, this function must be called.
:#x.IM_START:e#x. return an return code of
:#x.&IM_ITEM_STORAGE_NOT_INITIALIZED:e#x.,
if &imms. needs to be initialized.
:p.
Specifying good values for the parameters of this function is the
major way that you can tune the &imgr..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_INITIALIZE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
  &lbt.,ITDSTG=:hp1.itdstg:ehp1.&rbt.
  &lbt.,UAINCR=:hp1.uaincr:ehp1.&rbt.
  &lbt.,SYSINCR=:hp1.sysincr:ehp1.&rbt.
  &lbt.,DFLTINCR=:hp1.dfltincr:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_INITIALIZE,&cont.
:hp1.itdstg:ehp1.,:hp1.uaincr:ehp1.,:hp1.sysincr:ehp1.,&cont.
:hp1.dfltincr:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.itdstg
:pLd.specifies the label of a fullword that contains the amount of
&imms. that should be reserved for item type descriptors.
The maximum and the default is 64K.
:pLt.uaincr
:pLd.specifies the label of a fullword that contains the amount of
main memory that will be obtained, each time that &imms. needs to
expand.  This number should be large enough so that few increments
will be needed for a session of the &imgr..
The default increment is 64K.
:pLt.sysincr
:pLd.specifies the label of a fullword that contains the amount of
&imms. that will be obtained, each time that the system &imms.
needs to expand.
System &imms. is used to hold structure descriptors and other system
items.
The default increment is 4K.
:pLt.dfltincr
:pLd.specifies the label of a fullword that contains the amount of
&imms. that will be obtained each time that the default user &imms.
needs to expand.
Default user &imms. is used for user items that do not specify another
group.
The default increment is 64K.
:eplist.
:fh3.Example
:p.
This instruction will place the address of the conversion routine in
CONVERT_ADDRESS
:xmp.
         IM_GET_DANGEROUS_ADDRESSES ID=IM,TKNCNVT=CONVERT_ADDRESS
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Modify an Item in &imgr. Managed Storage'
:func id=immdfy name='IM_MODIFY'.&temp.
.**********************************************************************
:p.
The :#x.IM_MODIFY:e#x. macro
is used to modify an item in &imms..
The length, number of links and offset of links of an item,
can not be modified
with the :#x.IM_MODIFY:e#x. function.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_MODIFY ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,ITEM=:hp1.item:ehp1.
  &lbt.,OPTIONS=(&lbt.UPDATE_LINKS&rbt.)&rbt.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_MODIFY,&cont.
:hp1.item:ehp1.,:hp1.optstr:ehp1.,:hp1.itemtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.item
:pLd.specifies the label of the storage into which a copy of the item
will be placed.
:pLt.UPDATE_LINKS
:pLd.this options indicates that the links will be updated.
If this options is not specified, the link fields of the item
being updated are not replaced.
:pLt.optstr
:pLd.specifies the label of a byte that contains the options.
All bits except bit 1 are reserved.  Bit one corresponds to the
UPDATE_LINKS option.
:pLt.itemtkn
:pLd.specifies the label of a fullword that contains the token of the
item to modify.  If this parameter is not specified, the item that
is &curim. is modified.
:eplist.
:fh3.Example
:p.
This instruction will modify the item that is &curim..
:xmp.
         IM_MODIFY ID=IM,ITEM=ITEM_WORK_STORAGE
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Obtain An Item By Its Token'
:func id=imob name='IM_OBTAIN'.&temp.
.**********************************************************************
:p.
The :#x.IM_OBTAIN:e#x. macro is used to obtain an item by its item token
The item found will become &curim. and &curityp..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_OBTAIN ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,ITEM=&lbr.:hp1.item:ehp1. | &cont.
(:hp1.item:ehp1.,:hp1.item_length:ehp1.)&rbr.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.IM_OBTAIN,&cont.
:hp1.itemtkn:ehp1.,&cont.
:hp1.item_length:ehp1.,:hp1.item:ehp1.,:hp1.actualsz:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.itemtkn
:pLd.specifies the label of a fullword that contains the token of
the item to be obtained.
:pLt.item
:pLd.specifies the label of the storage into which a copy of the item
will be placed.
:pLt.item_length
:pLd.specifies the label of a signed binary integer indicating the
length of the storage area specified by the :#xi.name:e#xi.
parameter.  In the macro form, if item_length is not specified,
an =A(L'item) will be used to determine the length of the storage.
This storage can be larger than the actual item, but must be large
enough to hold the complete item.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be place the
actual size of the item found.
:eplist.
:fh3.Example
:p.
This instruction will obtain the item whose token is in the fullword
at label ITEM_TOKEN.
:xmp.
         IM_OBTAIN ID=IM,ITEMTKN=ITEM_TOKEN
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Obtain An Item By Key'
:func id=imobky name='IM_OBTAIN_BY_KEY'.&temp.
.**********************************************************************
:p.
The :#x.IM_OBTAIN_BY_KEY:e#x. macro
is used to obtain an item by its key.
The item found will become &curim. and &curityp..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_OBTAIN_BY_KEY ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
   ,KEY=:hp1.key:ehp1. | &cont.
(:hp1.key:ehp1.,:hp1.key_length:ehp1.)
   ,ITEM=&lbr.:hp1.item:ehp1. | &cont.
(:hp1.item:ehp1.,:hp1.item_length:ehp1.)&rbr.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.IM_OBTAIN_BY_KEY,&cont
:hp1.desctkn:ehp1.,:hp1.key_length:ehp1.,:hp1.key:ehp1.,
      :hp1.item_length:ehp1.,:hp1.item:ehp1.,&cont.
:hp1.actualsz:ehp1.,:hp1.itemtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword that contains the token of
descriptor that describes the structure in which the item should be
found.
:pLt.key_length
:pLd.specifies a fullword that contains the length of the key.  Trailing
blanks are ignored in the compare, so the key can still match a item
in &imms. even if the key length of that item is not the same
as the key length specified.
:pLt.key
:pLd.specifies the label of a field that contains the key of the item
to obtain.
:pLt.item
:pLd.specifies the label of the storage into which a copy of the item
will be placed.
:pLt.item_length
:pLd.specifies the label of a signed binary integer indicating the
length of the storage area specified by the :#xi.name:e#xi.
parameter.  In the macro form, if item_length is not specified,
an =A(L'item) will be used to determine the length of the storage.
This storage can be larger than the actual item, but must be large
enough to hold the complete item.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be placed the
actual size of the item found.
:pLt.itemtkn
:pLd.specifies the label of a fullword into which will be placed the
token of the item obtained.
:eplist.
:fh3.Example
:p.
This instruction will obtain the item in the linked list described by
A_LIST_DESCRIPTOR that has a key of "XYZZY".
:xmp.
         IM_OBTAIN_BY_KEY ID=IM,DESCTKN=A_LIST_DESCRIPTOR,KEY="XYZZY"
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Obtain the Item That is Current of Descriptor'
:func id=imobcd name='IM_OBTAIN_CURRENT_OF_DESCRIPTOR'.&temp.
.**********************************************************************
:p.
The :#x.IM_OBTAIN_CURRENT_OF_DESCRIPTOR:e#x. macro
is used to obtain an item that is current of a given descriptor.
The item found will become &curim. and &curityp..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_OBTAIN_CURRENT_OF_DESCRIPTOR ID=:hp1.id_name:ehp1.
  &lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
   ,ITEM=&lbr.:hp1.item:ehp1. | &cont.
(:hp1.item:ehp1.,:hp1.item_length:ehp1.)&rbr.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_OBTAIN_CURRENT_OF_DESCRIPTOR,&cont.
:hp1.desctkn:ehp1.,
      :hp1.item_length:ehp1.,:hp1.item:ehp1.,&cont.
:hp1.actualsz:ehp1.,:hp1.itemtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword that contains the token of
descriptor that describes the structure in which the item should be
found.
:pLt.item
:pLd.specifies the label of the storage into which a copy of the item
will be placed.
:pLt.item_length
:pLd.specifies the label of a signed binary integer indicating the
length of the storage area specified by the :#xi.name:e#xi.
parameter.  In the macro form, if item_length is not specified,
an =A(L'item) will be used to determine the length of the storage.
This storage can be larger than the actual item, but must be large
enough to hold the complete item.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be placed the
actual size of the item found.
:pLt.itemtkn
:pLd.specifies the label of a fullword into which will be placed the
token of the item obtained.
:eplist.
:fh3.Example
:p.
This instruction will obtain the item that is current of descriptor for
the structure described by A_LIST_DESCRIPTOR.
:xmp.
         IM_OBTAIN_CURRENT_OF_DESCRIPTOR ID=IM,DESCTKN=A_LIST_DESCRIPTOR
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Obtain the Item That is Current of Item Type'
:func id=imobit name='IM_OBTAIN_CURRENT_OF_ITEM_TYPE'.&temp.
.**********************************************************************
:p.
The :#x.IM_OBTAIN_CURRENT_OF_ITEM_TYPE:e#x. macro
is used to obtain an item that is current of a given item type.
The item found will become &curim. and remain &curityp..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_OBTAIN_CURRENT_OF_ITEM_TYPE ID=:hp1.id_name:ehp1.
  &lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,ITEMTYPE=:hp1.itemtype:ehp1.
   ,ITEM=&lbr.:hp1.item:ehp1. | &cont.
(:hp1.item:ehp1.,:hp1.item_length:ehp1.)&rbr.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_OBTAIN_ITEM_TYPE,&cont.
:hp1.itemtype:ehp1.,
      :hp1.item_length:ehp1.,:hp1.item:ehp1.,&cont.
:hp1.actualsz:ehp1.,:hp1.itemtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.itemtype
:pLd.specifies the label of a halfword that contains the token of
item type descriptor
for the item that should be
found.
:pLt.item
:pLd.specifies the label of the storage into which a copy of the item
will be placed.
:pLt.item_length
:pLd.specifies the label of a signed binary integer indicating the
length of the storage area specified by the :#xi.name:e#xi.
parameter.  In the macro form, if item_length is not specified,
an =A(L'item) will be used to determine the length of the storage.
This storage can be larger than the actual item, but must be large
enough to hold the complete item.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be placed the
actual size of the item found.
:pLt.itemtkn
:pLd.specifies the label of a fullword into which will be placed the
token of the item obtained.
:eplist.
:fh3.Example
:p.
This instruction will obtain the item that is current of item type for
the structure described by A_LIST_DESCRIPTOR.
:xmp.
         IM_OBTAIN_CURRENT_OF_ITEM_TYPE ID=IM,DESCTKN=A_LIST_DESCRIPTOR
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Obtain the Final Item in a Structure'
:func id=imobfn name='IM_OBTAIN_FINAL'.&temp.
.**********************************************************************
:p.
The :#x.IM_OBTAIN_FINAL:e#x. macro
is used to obtain the final item in a structure.
This functions is supported for Linked Lists.
The item found will become &curim., &curdesc. and  &curityp..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_OBTAIN_FINAL ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
   ,ITEM=&lbr.:hp1.item:ehp1. | &cont.
(:hp1.item:ehp1.,:hp1.item_length:ehp1.)&rbr.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
  &lbt.,HEADTKN=:hp1.headtkn:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_OBTAIN_FINAL,&cont.
:hp1.desctkn:ehp1.,
      :hp1.item_length:ehp1.,:hp1.item:ehp1.,&cont.
:hp1.actualsz:ehp1.,:hp1.itemtkn:ehp1.,:hp1.headtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword that contains the token of
descriptor that describes the structure in which the item should be
found.
:pLt.item
:pLd.specifies the label of the storage into which a copy of the item
will be placed.
:pLt.item_length
:pLd.specifies the label of a signed binary integer indicating the
length of the storage area specified by the :#xi.name:e#xi.
parameter.  In the macro form, if item_length is not specified,
an =A(L'item) will be used to determine the length of the storage.
This storage can be larger than the actual item, but must be large
enough to hold the complete item.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be placed the
actual size of the item found.
:pLt.itemtkn
:pLd.specifies the label of a fullword into which will be placed the
token of the item obtained.
:pLt.headtkn
:pLd.specifies the label of a fullword that contains the token of the
head item for the list.  This parameter only applies to lists that do
not contain heads in the descriptor.
If this parameter is not specified, the item
that is &curityp. of the HEADTYPE associated with the descriptor will
be used.
:eplist.
:fh3.Example
:p.
This instruction will obtain the final item in the linked list
described by A_LIST_DESCRIPTOR.
:xmp.
         IM_OBTAIN_FINAL ID=IM,DESCTKN=A_LIST_DESCRIPTOR
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Obtain the First Item in a Structure'
:func id=imobfr name='IM_OBTAIN_FIRST'.&temp.
.**********************************************************************
:p.
The :#x.IM_OBTAIN_FIRST:e#x. macro
is used to obtain the first item in a structure.
This functions is supported for Linked Lists.
The item found will become &curim., &curdesc. and  &curityp..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_OBTAIN_FIRST ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
   ,ITEM=&lbr.:hp1.item:ehp1. | &cont.
(:hp1.item:ehp1.,:hp1.item_length:ehp1.)&rbr.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
  &lbt.,HEADTKN=:hp1.headtkn:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_OBTAIN_FIRST,&cont.
:hp1.desctkn:ehp1.,
      :hp1.item_length:ehp1.,:hp1.item:ehp1.,&cont.
:hp1.actualsz:ehp1.,:hp1.itemtkn:ehp1.,:hp1.headtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword that contains the token of
descriptor that describes the structure in which the item should be
found.
:pLt.item
:pLd.specifies the label of the storage into which a copy of the item
will be placed.
:pLt.item_length
:pLd.specifies the label of a signed binary integer indicating the
length of the storage area specified by the :#xi.name:e#xi.
parameter.  In the macro form, if item_length is not specified,
an =A(L'item) will be used to determine the length of the storage.
This storage can be larger than the actual item, but must be large
enough to hold the complete item.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be placed the
actual size of the item found.
:pLt.itemtkn
:pLd.specifies the label of a fullword into which will be placed the
token of the item obtained.
:pLt.headtkn
:pLd.specifies the label of a fullword that contains the token of the
head item for the list.  This parameter only applies to lists that do
not contain heads in the descriptor.
If this parameter is not specified, the item
that is &curityp. of the HEADTYPE associated with the descriptor will
be used.
:eplist.
:fh3.Example
:p.
This instruction will obtain the first item in the linked list
described by A_LIST_DESCRIPTOR.
:xmp.
         IM_OBTAIN_FIRST ID=IM,DESCTKN=A_LIST_DESCRIPTOR
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Obtain the Next Item in a Structure'
:func id=imobnx name='IM_OBTAIN_NEXT'.&temp.
.**********************************************************************
:p.
The :#x.IM_OBTAIN_NEXT:e#x. macro
is used to obtain the next item in a structure.
This functions is supported for Linked Lists.
The item found will become &curim., &curdesc. and  &curityp..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_OBTAIN_NEXT ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
   ,ITEM=&lbr.:hp1.item:ehp1. | &cont.
(:hp1.item:ehp1.,:hp1.item_length:ehp1.)&rbr.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
  &lbt.,CURTKN=:hp1.curtkn:ehp1.&rbt.
  &lbt.,HEADTKN=:hp1.headtkn:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_OBTAIN_NEXT,&cont.
:hp1.desctkn:ehp1.,
      :hp1.item_length:ehp1.,:hp1.item:ehp1.,&cont.
:hp1.actualsz:ehp1.,:hp1.itemtkn:ehp1.,&cont.
:hp1.curtkn:ehp1.,:hp1.headtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword that contains the token of
descriptor that describes the structure in which the item should be
found.
:pLt.item
:pLd.specifies the label of the storage into which a copy of the item
will be placed.
:pLt.item_length
:pLd.specifies the label of a signed binary integer indicating the
length of the storage area specified by the :#xi.name:e#xi.
parameter.  In the macro form, if item_length is not specified,
an =A(L'item) will be used to determine the length of the storage.
This storage can be larger than the actual item, but must be large
enough to hold the complete item.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be placed the
actual size of the item found.
:pLt.itemtkn
:pLd.specifies the label of a fullword into which will be placed the
token of the item obtained.
:pLt.curtkn
:pLd.specifies the label of a fullword that contains the token of the
current item in the list.  If this parameter is not specified, the item
that is &curdesc. will be used.  If this parameter has a value of zero,
the first item in the list will be obtained.
:pLt.headtkn
:pLd.specifies the label of a fullword that contains the token of the
head item for the list.  This parameter only applies to lists that do
not contain heads in the descriptor.
If this parameter is not specified, the item
that is &curityp. of the HEADTYPE associated with the descriptor will
be used.
:eplist.
:fh3.Example
:p.
This instruction will obtain the next item in the linked list
described by A_LIST_DESCRIPTOR.
:xmp.
         IM_OBTAIN_NEXT ID=IM,DESCTKN=A_LIST_DESCRIPTOR
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Obtain the Owner Item of a Structure'
:func id=imobow name='IM_OBTAIN_OWNER'.&temp.
.**********************************************************************
:p.
The :#x.IM_OBTAIN_OWNER:e#x. macro
is used to obtain the owner item of a structure.
This functions is supported for Linked Lists.
The item found will become &curim., &curdesc. and  &curityp..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_OBTAIN_OWNER ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
   ,ITEM=&lbr.:hp1.item:ehp1. | &cont.
(:hp1.item:ehp1.,:hp1.item_length:ehp1.)&rbr.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
  &lbt.,CURTKN=:hp1.curtkn:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_OBTAIN_OWNER,&cont.
:hp1.desctkn:ehp1.,
      :hp1.item_length:ehp1.,:hp1.item:ehp1.,&cont.
:hp1.actualsz:ehp1.,:hp1.itemtkn:ehp1.,:hp1.curtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword that contains the token of
descriptor that describes the structure in which the item should be
found.
:pLt.item
:pLd.specifies the label of the storage into which a copy of the item
will be placed.
:pLt.item_length
:pLd.specifies the label of a signed binary integer indicating the
length of the storage area specified by the :#xi.name:e#xi.
parameter.  In the macro form, if item_length is not specified,
an =A(L'item) will be used to determine the length of the storage.
This storage can be larger than the actual item, but must be large
enough to hold the complete item.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be placed the
actual size of the item found.
:pLt.itemtkn
:pLd.specifies the label of a fullword into which will be placed the
token of the item obtained.
:pLt.curtkn
:pLd.specifies the label of a fullword that contains the token of the
current item in the list.  If this parameter is not specified, the item
that is &curim. will be used.
:eplist.
:fh3.Example
:p.
This instruction will obtain the owner item in the linked list
described by A_LIST_DESCRIPTOR.
:xmp.
         IM_OBTAIN_OWNER ID=IM,DESCTKN=A_LIST_DESCRIPTOR
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Obtain the Prior Item in a Structure'
:func id=imobpr name='IM_OBTAIN_PRIOR'.&temp.
.**********************************************************************
:p.
The :#x.IM_OBTAIN_PRIOR:e#x. macro
is used to obtain the prior item in a structure.
This functions is supported for Linked Lists.
The item found will become &curim., &curdesc. and  &curityp..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_OBTAIN_PRIOR ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
   ,ITEM=&lbr.:hp1.item:ehp1. | &cont.
(:hp1.item:ehp1.,:hp1.item_length:ehp1.)&rbr.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
  &lbt.,ACTUALSZ=:hp1.actualsz:ehp1.&rbt.
  &lbt.,CURTKN=:hp1.curtkn:ehp1.&rbt.
  &lbt.,HEADTKN=:hp1.headtkn:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_OBTAIN_PRIOR,&cont.
:hp1.desctkn:ehp1.,
      :hp1.item_length:ehp1.,:hp1.item:ehp1.,&cont.
:hp1.actualsz:ehp1.,:hp1.itemtkn:ehp1.,&cont.
:hp1.curtkn:ehp1.,:hp1.headtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword that contains the token of
descriptor that describes the structure in which the item should be
found.
:pLt.item
:pLd.specifies the label of the storage into which a copy of the item
will be placed.
:pLt.item_length
:pLd.specifies the label of a signed binary integer indicating the
length of the storage area specified by the :#xi.name:e#xi.
parameter.  In the macro form, if item_length is not specified,
an =A(L'item) will be used to determine the length of the storage.
This storage can be larger than the actual item, but must be large
enough to hold the complete item.
:pLt.actualsz
:pLd.specifies the label of a fullword into which will be placed the
actual size of the item found.
:pLt.itemtkn
:pLd.specifies the label of a fullword into which will be placed the
token of the item obtained.
:pLt.curtkn
:pLd.specifies the label of a fullword that contains the token of the
current item in the list.  If this parameter is not specified, the item
that is &curdesc. will be used.  If this parameter has a value of zero,
the last item in the list will be obtained.
:pLt.headtkn
:pLd.specifies the label of a fullword that contains the token of the
head item for the list.  This parameter only applies to lists that do
not contain heads in the descriptor.
If this parameter is not specified, the item
that is &curityp. of the HEADTYPE associated with the descriptor will
be used.
:eplist.
:fh3.Example
:p.
This instruction will obtain the prior item in the linked list
described by A_LIST_DESCRIPTOR.
:xmp.
         IM_OBTAIN_PRIOR ID=IM,DESCTKN=A_LIST_DESCRIPTOR
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Remove An Item Token from The Token Directory'
:func id=imrmdr name='IM_REMOVE_FROM_DIRECTORY'.&temp.
.**********************************************************************
:p.
The :#x.IM_REMOVE_FROM_DIRECTORY:e#x. macro
is used to unassociate a name with an item token in the token directory.
Currency is not changed.
:p.
This function is not yet implemented.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_REMOVE_FROM_DIRECTORY ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,NAME=&lbr.:hp1.name:ehp1. | &cont.
(:hp1.name:ehp1.,:hp1.name_length:ehp1.)&rbr.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_REMOVE_FROM_DIRECTORY,&cont.
:hp1.name_length:ehp1.,:hp1.name:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.name
:pLd.specifies the label of a string that contains the name that is
associated with the token specified with the :#xi.token:e#xi.
parameter.
:pLt.name_length
:pLd.specifies the label of a signed binary integer indicating the
length of the string identified by the :#xi.name:e#xi.
parameter.
:eplist.
:fh3.Example
:p.
This instruction will remove the name
"MY_TOKEN" from the token directory.
:xmp.
         IM_REMOVE_FROM_DIRECTORY ID=IM,NAME="MY_TOKEN"
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Reset &imms. to Its Initial Contents'
:func id=imrset name='IM_RESET'.&temp.
.**********************************************************************
:p.
The :#x.IM_RESET:e#x. macro
is used to reset &imms. to its contents at the time of the last
:#x.IM_SAVE:e#x. function.
This function is only
valid if a DIV service process was specified on the :#x.IM_START:e#x.
call.  This function will invoke the DV_RESET function of the associated
DIV service processor.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_RESET ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_RESET)
:ecallx.
:fh3.Example
:p.
This instruction will reset &imms. to its value since the last save.
:xmp.
         IM_RESET ID=IM
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Save &imms.'
:func id=imsave name='IM_SAVE'.&temp.
.**********************************************************************
:p.
The :#x.IM_SAVE:e#x. function
is used to save &imms..  This function is only
valid if a DIV service process was specified on the :#x.IM_START:e#x.
call.  This function will invoke the DV_SAVE function of the associated
DIV service processor.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_SAVE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_SAVE)
:ecallx.
:fh3.Example
:p.
This instruction will save &imms..
:xmp.
         IM_SAVE ID=IM
:exmp.
:efunc.
.**********************************************************************
.se temp = 'SFD Mapping Macro'
:func id=imsfd name='IM_SFD'.&temp.
.**********************************************************************
:p.
The :#x.IM_SFD:e#x. macro is used to map a Sort Fields Descriptions
(SFD) entry.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_SFD &lbt.ID=cbid&rbt.
  &lbt.,DSECT=:hp1.dsectopt:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.cbid
:pLd.specifies the id to be place as a prefix to each generated tag.
:pLt.dsectopt
:pLd.either YES or NO to indicate whether a DSECT should be generated.
:eplist.
:fh3.Example
:p.
This instruction will generate a mapping dsect for the SFD.
:xmp.
         IM_SFD
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Sort a List'
:func id=imsort name='IM_SORT'.&temp.
.**********************************************************************
:p.
The :#x.IM_SORT:e#x. function
is used to sort a list.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_SORT ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,DESCTKN=:hp1.desctkn:ehp1.
   ,FIELDS=&lbr.:hp1.fields:ehp1. | &cont.
,FIELDSLIST=:hp1.fieldslist:ehp1.
  &lbt.,TECHNIQUE=(&lbt.QUICK_SORT&rbt. | &cont.
&lbt.BUBBLE_SORT&rbt.)&rbt.
  &lbt.,HEADTKN=:hp1.itemtkn:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_SORT,:hp1.desctkn:ehp1.,:hp1.fieldslist:ehp1.,
      :hp1.headtkn:ehp1.,:hp1.technique:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.desctkn
:pLd.specifies the label of a fullword that contains the token of
descriptor that describes the list of items to be sorted.
:pLt.fields
:pLd.specifies the sort fields.  See :hdref refid=imstfd. for the
syntax of this parameter.
:pLt.fieldslist
:pLd.specifies a location that contains the Sort Fields Definitions
(SFD).
Refer to :hdref refid=imstfd. or :hdref refid=imsfd. for information
needed to build the SFD.
:pLt.QUICK_SORT
:pLd.specifies that quick sort should be used to sort the list.  This
is the default sort techinque.  It is very fast for all but very small
lists, which are slowed by the setup required.
It should always be used except when
very small lists are sorted many times.  It uses a partiton
exchange sort algorithm with improvements by Richard C. Singleton.
See ACM Algorithm 347 "An Efficient Algorithm For Sorting With
Minimal Storage {M1}" for more information.
:pLt.BUBBLE_SORT
:pLd.specifies that bubble sort should be used to sort the list.  This
is a very slow sort techinque except for very short list (10 or less
items).
:pLt.technique
:pLd.specifies a fullword that contains the sort technique to be used.
Symbols :#x.IM_SORT_TECHNIQUE_QUICK_SORT:e#x. and
:#x.IM_SORT_TECHNIQUE_BUBBLE_SORT:e#x. can be used to specify
this technique.  The default is quick sort.
:pLt.headtkn
:pLd.specifies the label of a fullword that contains the token of
the item that contains the heads when a structure can have multiple
occurances.  If this parameter is not specified, the item that is
&curityp. of the &ityp. specified with the :#xi.headtype:e#xi. parameter
on the associated descriptor create function is used.
:eplist.
:fh3.Example
:p.
This instruction will sort the list described by A_LIST_DESCRIPTOR
in ascending order by field CBFIELD, where CBSTART is the tag of the
start of the item.
:xmp.
         IM_SORT ID=IM,DESCTKN=A_LIST_DESCRIPTOR,                      +
                FIELDS=((CBFIELD-CBSTART,L'CBFIELD))
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Define Sort Fields'
:func id=imstfd name='IM_SORT_FIELDLIST'.&temp.
.**********************************************************************
:p.
The :#x.IM_SORT_FIELDLIST:e#x. macro is used to define static
sort fields definitions.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_SORT_FIELDLIST NAME=:hp1.name:ehp1.
   ,FIELDS=:hp1.fieldlist:ehp1.
:emac.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.name
:pLd.the name to be associate with the sort fields.
:pLt.fieldlist
:pLd.a list of fields.  The :hp1.fieldslist:ehp1. is of the form:
.br
((:hp1.offset:ehp1.,:hp1.length:ehp1. | :hp1.mask:ehp1.,
  &lbt.:hp1.type:ehp1.&rbt.,&lbt.:#x.ASCENDING|DESCENDING:e#x.&rbt.),
  ... as many sort field as needed)
:p.
Parameter :hp1.offset:ehp1. is the offset of the sort field in an
item and parameter :hp1.length:ehp1. is the size of the sort field.
:p.
The valid values for :hp1.type:ehp1. are: CHAR, PACKED, ZONED, FIXED,
and BIT.
:p.
If BIT is specified, :hp1.mask:ehp1. is required and is a one-byte
value with bits turned on in the positions that should be checked
for sorting.
:p.
For all other types, :hp1.length:ehp1. is used instead.  It indicates
the number of bytes to compare for the field.
:p.
The default is CHAR.
:p.
ASCENDING is the default if neither ASCENDING or DESCENDING is
specified.
:eplist.
:fh3.Example
:p.
This instruction will generate sort fields definitions that can be
used with the :#x.IM_SORT:e#x. function to sort a list
in ascending order by field CBFIELD, where CBSTART is the tag of the
start of the item.
:xmp.
         IM_SORT_FIELDSLIST NAME=PSD_FIELDSLIST,                       +
                FIELDS=((CBFIELD-CBSTART,L'CBFIELD))
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Start a &imgr. Session'
:func id=imstrt name='IM_START'.&temp.
.**********************************************************************
:p.
The :#x.IM_START:e#x. function
is used to start the &imgr..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_START ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
  &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
  &lbt.,OPTIONS=(&lbt.READ_ONLY&rbt.
              &lbt.,ACTUAL_ADDRESS&rbt.)
  &lbt.,DIVEPA=:hp1.divepa:ehp1.&rbt.
  &lbt.,DIVDDN=:hp1.divddn:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.&cont.
IM_START,:hp1.esva:ehp1.,:hp1.optbyte:ehp1.,
      :hp1.divepa:ehp1.,:hp1.divddn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.esva
:pLd.Specifies the label of a fullword in storage that contains the
address of the Environment Support Vector (ESV) created by the
ES_START function.
:pLt.READ_ONLY
:pLd.option to indicate that the DIV data set will not be updated.  If
this options is specified, the :#x.IM_SAVE:e#x. can not be used.
:pLt.ACTUAL_ADDRESS
:pLd.option to indicate that actual virtural storage address should be
used as tokens for all but item type descriptors.  If this is not
specified, tokens will be the relative byte within &imms..  Do not use
this option if a DIV service processor is being used.
:pLt.optbyte
:pLd.specifies a byte of storage that contains the options.  Bit 0
corresponds to the :#x.READ_ONLY:e#x. option and bit 1 corresponds to
the :#x.ACTUAL_ADDRESS:e#x. option.
:pLt.divepa
:pLd.specifies a fullword that contains the EPA of a DIV service
processor.
:pLt.divddn
:pLd.specifies an eight byte field that contains the ddname of the
file to be used by the DIV service processor.
:eplist.
:fh3.Example
:p.
This instruction will start the &imgr. and use actual addresses
as token.
:xmp.
         IM_START ID=IM,OPTIONS=ACTUAL_ADDRESS
:exmp.
:rclist.
:rcn.0
:rct.IM_SUCCESS
:rcd.A session of the &imgr. has successfully been started.
:rcn.8
:rct.IM_ITEM_STORAGE_NOT_INITIALIZED
:rcd.A session of the &imgr. has successfully been started.
The :#x.IM_INITIALIZE:e#x. needs to be called to initialize &imms..
:erclist.
:efunc.
.**********************************************************************
.se temp = 'Store an Item in &imms.'
:func id=imstor name='IM_STORE'.&temp.
.**********************************************************************
:p.
The :#x.IM_STORE:e#x. macro is used to store an item in &imms..
The item will become &curim..
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_STORE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
   ,ITEM=&lbr.:hp1.item:ehp1. | &cont.
(:hp1.item:ehp1.,:hp1.item_length:ehp1.)&rbr.
  &lbt.,ITEMTKN=:hp1.itemtkn:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.IM_STORE,&cont.
:hp1.item_length:ehp1.,:hp1.item:ehp1.,&cont.
:hp1.itemtkn:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.item
:pLd.specifies the label of the storage in which the item to be placed
in &imms. resides.
:pLt.item_length
:pLd.specifies the label of a signed binary integer indicating the
length of the storage area specified by the :#xi.name:e#xi.
parameter.  In the macro form, if item_length is not specified,
an =A(L'item) will be used to determine the length of the storage.
This storage can be larger than the actual item, but must be large
enough to hold the complete item.
:pLt.itemtkn
:pLd.specifies the label of a fullword into which the token of
the item will be placed.
:eplist.
:fh3.Example
:p.
This instruction will store the item constructed at tag ITEM_WORK_AREA
in &imms..
:xmp.
         IM_STORE ID=IM,ITEM=ITEM_WORK_AREA
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Terminate the &imgr.'
:func id=imterm name='IM_TERMINATE'.&temp.
.**********************************************************************
:p.
The :#x.IM_TERMINATE:e#x. function will terminate the &imgr. and
release all associated resources.  It will also terminate the associated
DIV service processor.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
IM_TERMINATE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.im_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.im_token:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.im_epa:ehp1.,(:hp1.im_token:ehp1.,&amp.IM_TERMINATE)
:ecallx.
:fh3.Example
:p.
This instruction will terminate a session with the &imgr..
:xmp.
         IM_TERMINATE ID=IM
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Generating Description Text'
:func id=imtext name='IM_TEXT'.&temp.
.**********************************************************************
:p.
The :#x.IM_TEXT:e#x. macro is used to generate description text.
Description text is used with the :#x.TEXT:e#x. keyword on various
&imgr. macros.
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
:hp1.name:ehp1. IM_TEXT :hp1.string:ehp1.
:emac.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*---------------------------------------------------------------------*
:plist.
:pLt.name
:pLd.specifies the name to be associated with the text.
:pLt.string
:pLd.specifies a quoted string that contains the text.
:eplist.
:fh3.Example
:xmp.
SOMETEXT IM_TEXT "This is some text."
:exmp.
:efunc.
