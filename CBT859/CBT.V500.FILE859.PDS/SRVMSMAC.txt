*---------------------------------------------------------------------*
*  Copyright 2011 by Clemson University Research Foundation           *
*                                                                     *
*  Licensed under the Apache License, Version 2.0 (the "License");    *
*  you may not use this file except in compliance with the License.   *
*  You may obtain a copy of the License in this library as member     *
*  $LICENSE, or from                                                  *
*                                                                     *
*      http://www.apache.org/licenses/LICENSE-2.0                     *
*                                                                     *
*  Unless required by applicable law or agreed to in writing,         *
*  software distributed under the License is distributed on an "AS    *
*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either    *
*  express or implied.  See the License for the specific language     *
*  governing permissions and limitations under the License.           *
*---------------------------------------------------------------------*
 TITLE 'SRVMSMAC: Message Service Processor Symbols && Macros.'
*---------------------------------------------------------------------*
*
*  Copy File:  SRVMSMAC
*
*  Purpose:    Message service processor symbols and macros.
*
*  Description: See "Service Processors User's Guide and Reference".
*
*  Change
*  History:    10/04/89 JCB and MGG - New
*              11/20/90 MJM - Added default SPEPNAME=&MESSAGE_SERVICES
*                             to the MS_ID macro.
*
*---------------------------------------------------------------------*
*
***********************************************************************
***********************************************************************
**                                                                   **
**                     Symbol Definitions                            **
**                                                                   **
***********************************************************************
***********************************************************************
 GBLC &MESSAGE_SERVICES
 GBLA &MS_START,&MS_TERMINATE
 GBLA &MS_ISSUE_MESSAGE,&MS_GET_MESSAGE,&MS_PUT_MESSAGE
*
 GBLA &MS_SUCCESS
 GBLA &MS_INVALID_FUNCTION
 GBLA &MS_INVALID_NUMBER_OF_PARMS
 GBLA &MS_INVALID_MS_ID
 GBLA &MS_ENVIRONMENT_SUPPORT_ERROR
 GBLA &MS_STRING_HANDLER_ERROR
 GBLA &MS_PRINT_LINE_TRUNCATED
 GBLA &MS_PRINTLINE_ERROR
 GBLA &MS_INVALID_MSGDEST_OPTION
 GBLA &MS_MSGMOD_MISSING
 GBLA &MS_TOO_MANY_MSGMODS
 GBLA &MS_MSGMOD_NOT_LOADED
 GBLA &MS_MSGMOD_NOT_VALID
 GBLA &MS_INVALID_SIZELENGTH
 GBLA &MS_MESSAGE_NOT_FOUND
 GBLA &MS_INVALID_PREFIX
 GBLA &MS_MSGDEST_NOT_PROVIDED
 GBLA &MS_DT_ERROR
*
* Entry point name for the Item Manager.
*
&MESSAGE_SERVICES                       SETC '''SRVMS   '''
*
* Function codes.
*
&MS_START                               SETA 1
&MS_TERMINATE                           SETA 2
&MS_ISSUE_MESSAGE                       SETA 3
&MS_GET_MESSAGE                         SETA 4
&MS_PUT_MESSAGE                         SETA 5
*
* Return codes.
*
&MS_SUCCESS                             SETA  0
&MS_INVALID_FUNCTION                    SETA  1
&MS_INVALID_NUMBER_OF_PARMS             SETA  2
&MS_INVALID_MS_ID                       SETA  3
&MS_ENVIRONMENT_SUPPORT_ERROR           SETA  4
&MS_STRING_HANDLER_ERROR                SETA  5
&MS_PRINT_LINE_TRUNCATED                SETA  6
&MS_PRINTLINE_ERROR                     SETA  7
&MS_INVALID_MSGDEST_OPTION              SETA  8
&MS_MSGMOD_MISSING                      SETA  9
&MS_TOO_MANY_MSGMODS                    SETA  10
&MS_MSGMOD_NOT_LOADED                   SETA  11
&MS_MSGMOD_NOT_VALID                    SETA  12
&MS_INVALID_SIZELENGTH                  SETA  13
&MS_MESSAGE_NOT_FOUND                   SETA  14
&MS_INVALID_PREFIX                      SETA  15
&MS_MSGDEST_NOT_PROVIDED                SETA  16
&MS_DT_ERROR                            SETA  17
*
* DEFUCOND macros to facilitate checking return codes. If new return
* codes are added, don't forget to add a DEFUCOND for them.
*
   DEFUCOND MACRO=SRV##RC,NAME=MS_SUCCESS
   DEFUCOND MACRO=SRV##RC,NAME=MS_INVALID_FUNCTION
   DEFUCOND MACRO=SRV##RC,NAME=MS_INVALID_NUMBER_OF_PARMS
   DEFUCOND MACRO=SRV##RC,NAME=MS_INVALID_MS_ID
   DEFUCOND MACRO=SRV##RC,NAME=MS_ENVIRONMENT_SUPPORT_ERROR
   DEFUCOND MACRO=SRV##RC,NAME=MS_STRING_HANDLER_ERROR
   DEFUCOND MACRO=SRV##RC,NAME=MS_PRINT_LINE_TRUNCATED
   DEFUCOND MACRO=SRV##RC,NAME=MS_PRINTLINE_ERROR
   DEFUCOND MACRO=SRV##RC,NAME=MS_INVALID_MSGDEST_OPTION
   DEFUCOND MACRO=SRV##RC,NAME=MS_MSGMOD_MISSING
   DEFUCOND MACRO=SRV##RC,NAME=MS_TOO_MANY_MSGMODS
   DEFUCOND MACRO=SRV##RC,NAME=MS_MSGMOD_NOT_LOADED
   DEFUCOND MACRO=SRV##RC,NAME=MS_MSGMOD_NOT_VALID
   DEFUCOND MACRO=SRV##RC,NAME=MS_INVALID_SIZELENGTH
   DEFUCOND MACRO=SRV##RC,NAME=MS_MESSAGE_NOT_FOUND
   DEFUCOND MACRO=SRV##RC,NAME=MS_INVALID_PREFIX
   DEFUCOND MACRO=SRV##RC,NAME=MS_MSGDEST_NOT_PROVIDED
*
* Miscellaneous definitions.
*
 GBLA   &MS_DEFAULT_SIZELENGTH
&MS_DEFAULT_SIZELENGTH      SETA  4
                        EJECT
***********************************************************************
***********************************************************************
**                                                                   **
**                     Macro Definitions                             **
**                                                                   **
***********************************************************************
***********************************************************************
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   MS_ID                                                      *
*                                                                     *
* Purpose: Establish default values for a specific service processor  *
*          and associate them with the specified ID name. The values  *
*          are stored in the following created global variables:      *
*                                                                     *
* Variable Name                     Description                       *
* -------------  ---------------------------------------------------- *
* #$&ID.$#IDMAC  Name of macro that created the ID: PL_ID.            *
* #$&ID.$#ESID   Service processor's Environment Support ID.          *
* #$&ID.$#EPN    Tag for Service processor's Entry Point Name.        *
* #$&ID.$#EPA    Tag for Service processor's Entry Point Address.     *
* #$&ID.$#TKN    Tag for Service processor's Entry Point Token.       *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         MS_ID &ID=,&ESVA=,&SPEPNAME=,&SPEPA=,&SPTOKEN=,&ESID=,        *
               &SIZELENGTH=
         LCLC  &L_EPNAME
         GBLC  &MESSAGE_SERVICES
.*
.* If no EPNAME was specified, use the generic Message Services.
.*
&L_EPNAME SETC '&SPEPNAME'
          AIF  ('&L_EPNAME' NE '').PAST_EPN
&L_EPNAME SETC '&MESSAGE_SERVICES'
.PAST_EPN ANOP
.*
.* Invoke SRV##ID to create globals used by all ID's.
.*
         SRV##ID SET,                                                  +
               ID=&ID.,IDMAC=MS_ID,ESID=&ESID.,SPEPNAME=&L_EPNAME,     +
               SPEPA=&SPEPA,SPTOKEN=&SPTOKEN.
.*
.* Establish defaults for parameters specific to the string handler.
.*
&V_SIZELENGTH    SETC '#$&ID.$#SIZELENGTH'  Variable for SIZELENGTH=.
                 GBLC &(&V_SIZELENGTH)      Declare global variable.
&(&V_SIZELENGTH) SETC ''                    Set sizelength's default.
                 AIF  ('&SIZELENGTH' EQ '').GOT_SIZELENGTH
                 AIF  (T'&SIZELENGTH EQ 'N').SL_NUMERIC
                 MNOTE 8,'If SIZELENGTH is specified on the ST_ID macro+
               , it must be a self-defining numeric value.'
                 AGO   .GOT_SIZELENGTH
.SL_NUMERIC      ANOP
&(&V_SIZELENGTH) SETC '&SIZELENGTH'         Copy value (or nulls).
.GOT_SIZELENGTH  ANOP
         MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   MS_START                                                   *
* Purpose: Generate code to start a new Message Services session.     *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         MS_START &ID=,&SPEPA=,&SPTOKEN=,&ESVA=,                       +
               &MSGDEST=,                                              *
               &MSGMOD=,                                               *
               &MSGMODLIST=,                                           *
               &MAXSEV=,                                               *
               &PLCC=,                                                 *
               &OPTIONS=,                                              *
               &SIZELENGTH=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &MS_START                  SETC in open code.
         GBLC  &MS_PL_ID,&MS_PL_EPA,&MS_PL_TOKEN
         LCLC  &MSGDEST_OPTION,&MSGDEST_P(2)
         LCLC  &CSECTLIST
         LCLC  &MS_PL_CC
         LCLA  &I
         LCLB  &OPT_FOLD
         LCLB  &OPT_TIMESTAMP
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN,ESVA),                    +
               ID=&ID,IDMAC=MS_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN,       +
               ESVA=&ESVA.
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         MVC   &#_IDTKN,=F'0'            | Insure TOKEN = 0.
.*
.*                 Validate the incoming parameters.
.*
.*
.* Process the MSGDEST keyword.
.*
         AIF   ('&MSGDEST' NE '').MSGDEST_PRESENT
.MSGDEST_MISSING ANOP ,
&MSGDEST_OPTION SETC '=AL1(0)'
         AGO   .MSGMODS
.MSGDEST_PRESENT ANOP ,
         AIF   ('&MSGDEST(1)' EQ 'DDNAME').MSGDEST_DDNAME
         AIF   ('&MSGDEST(1)' EQ 'PLID').MSGDEST_PLID
         AIF   ('&MSGDEST(1)' EQ 'PL').MSGDEST_PL
         AIF   ('&MSGDEST(1)' EQ 'CONSOLE').MSGDEST_CONSOLE
         MNOTE 8,'Message destination of &MSGDEST(1) is not supported.'
         MNOTE 8,'Supported MSGDESTs are DDNAME, PLID, PL and CONSOLE.'
         MEXIT
.*
.* Process the MSGDEST=(DDNAME,thing) option.
.*
.MSGDEST_DDNAME ANOP ,
         AIF   (N'&MSGDEST EQ 2).MSGDEST_DDOK
         MNOTE 8,'Supported MSGDESTs are DDNAME, PLID, PL and CONSOLE.'
         MEXIT
.MSGDEST_DDOK   ANOP ,
&MSGDEST_OPTION SETC '=AL1(1)'
&MSGDEST_P(1)   SETC '&MSGDEST(2)'
         AGO   .MSGMODS
.*
.* Process the MSGDEST=(PLID,thing) option.
.*
.MSGDEST_PLID   ANOP ,
         AIF   (N'&MSGDEST EQ 2).MSGDEST_PLIDOK
         MNOTE 8,'The PLID option of MSGDEST supports only one paramete*
               r.'
         MEXIT
.MSGDEST_PLIDOK ANOP ,
&MSGDEST_OPTION SETC '=AL1(2)'
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         *
               ID=&MSGDEST(2),                                         *
               IDMAC=PL_ID
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
&MSGDEST_P(1)   SETC '&#_IDEPA'                Save SRV##ID values &
&MSGDEST_P(2)   SETC '&#_IDTKN'                 set back to MS's stuff
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN,ESVA),                    +
               ID=&ID,IDMAC=MS_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN,       +
               ESVA=&ESVA.
         AGO   .MSGMODS
.*
.* Process the MSGDEST=(PL,epa,token) option.
.*
.MSGDEST_PL     ANOP ,
         AIF   (N'&MSGDEST EQ 3).MSGDEST_PLOK
         MNOTE 8,'The PL option of MSGDEST supports only two parameters*
               .'
         MEXIT
.MSGDEST_PLOK   ANOP ,
&MSGDEST_OPTION SETC '=AL1(2)'
&MSGDEST_P(1)   SETC '&MSGDEST(2)'
&MSGDEST_P(2)   SETC '&MSGDEST(3)'
         AGO   .MSGMODS
.*
.* Process the MSGDEST=CONSOLE option.
.*
.MSGDEST_CONSOLE ANOP ,
         AIF   (N'&MSGDEST EQ 1).MSGDEST_CONSOK
         MNOTE 8,'The CONSOLE operand of MSGDEST has no additional para*
               meters.'
         MEXIT
.MSGDEST_CONSOK ANOP ,
&MSGDEST_OPTION SETC '=AL1(3)'
.*
.* Process MsgMod and MsgModList keywords.
.*
.MSGMODS ANOP  ,
         AIF   ('&MSGMOD' EQ '' OR '&MSGMODLIST' EQ '').MSGMOD_EITHER
         MNOTE 8,'The MSGMOD and MSGMODLIST keywords are mutually exclu*
               sive.'
         MEXIT
.MSGMOD_EITHER ANOP ,
         AIF   ('&MSGMOD' NE '').MSGMOD
         AIF   ('&MSGMODLIST' NE '').MSGMODLIST
         MNOTE 8,'Either the MSGMOD or the MSGMODLIST keyword must be s*
               pecified.'
         MEXIT
.*
.*  Process the MSGMOD=(csectlist) keyword.  This involves building the
.*  module list in the caller's PSD.
.*
.MSGMOD  ANOP  ,
&CSECTLIST SETC '##MS_MSGMOD_&SYSNDX'      Generate csectlist tag
         PSD   TYPE=PARTIAL
&CSECTLIST DS  0F                       Generated by MS_START:
         LCLA  &MSGMOD_COUNT
&MSGMOD_COUNT SETA N'&MSGMOD
         DC  A(&MSGMOD_COUNT)                . Count of MSGMOD CSECTs
&I       SETA  1
.MSGMOD_ENTRY ANOP ,
         DC    CL8'&MSGMOD(&I)'              . MSGMOD CSECT entry
         AIF   (&I EQ N'&MSGMOD).MSGMOD_DONE
&I       SETA  &I+1
         AGO   .MSGMOD_ENTRY
.MSGMOD_DONE  ANOP ,
         ENDPSD ,
         AGO   .MAXSEV
.MSGMODLIST ANOP
&CSECTLIST SETC '&MSGMODLIST'           Generate csectlist tag
         AGO   .MAXSEV
.*
.*  Process the MAXSEV=halfword keyword.
.*
.MAXSEV  ANOP ,
         AIF   ('&MAXSEV' EQ '').SIZELENGTH   If not specified, skip.
         AIF   (T'&MAXSEV NE 'N').MAXSEV_OK
         MNOTE 8,'The MAXSEV parameter must be the address of a halfwor*
               d in storage.'
         MEXIT
.MAXSEV_OK  ANOP ,
.SIZELENGTH ANOP ,
.*
.* Obtain the value for the SIZELENGTH keyword.
.*
&V_SIZELENGTH    SETC '#$&ID.$#SIZELENGTH'  Variable for SIZELENGTH=.
                 GBLC &(&V_SIZELENGTH)      Declare global variable.
&L_SIZELENGTH    SETC '&(&V_SIZELENGTH)'    Set default value.
                 AIF  ('&L_SIZELENGTH' EQ '').SL_OKAY
                 AIF  ('&SIZELENGTH' EQ '').SL_DONE
                 AIF  ('&L_SIZELENGTH' EQ '&SIZELENGTH').SL_DONE
                 MNOTE 4,'Warning: SIZELENGTH was specified with a diff+
               erent value on the ST_ID ID=&ID. instruction.'
.SL_OKAY         ANOP
&L_SIZELENGTH    SETC '&SIZELENGTH'
.SL_DONE         ANOP
.*
.*  Process the PLCC=halfword keyword.
.*
.PLCC    ANOP ,
         AIF   ('&PLCC' EQ '').PLCC_OK If not specified, null parm.
&MS_PL_CC SETC '&PLCC'
         AIF  ('&MSGDEST(1)' NE 'CONSOLE' AND '&MSGDEST' NE '').PLCC_OK
         MNOTE 4,'PLCC keyword is ignored for CONSOLE and null MSGDEST *
               options.'
.PLCC_OK  ANOP ,
.*
.* Decode the options and produce a byte flag for the parmlist.
.*
&I       SETA  1
.OPTLOOP AIF   (&I GT N'&OPTIONS).PASTOPT
         AIF   ('&OPTIONS(&I)' EQ 'FOLD').OPT1
         AIF   ('&OPTIONS(&I)' EQ 'TIMESTAMP').OPT2
         MNOTE 8,'Invalid option name: &OPTIONS(&I)'
.OPT1    ANOP
&OPT_FOLD SETB 1
         AGO   .NEXTOPT         Go process the next option.
.OPT2    ANOP
&OPT_TIMESTAMP SETB 1
         AGO   .NEXTOPT         Go process the next option.
.*
.*  Add additional options here.
.*
.NEXTOPT ANOP
&I       SETA  &I+1             Increment index into options list.
         AGO   .OPTLOOP         Branch back to top of loop.
.PASTOPT ANOP
&OPTSTR  SETC '&OPT_FOLD.&OPT_TIMESTAMP'
&OPTSTR  SETC '&OPTSTR.000000'
         AIF  ('&OPTSTR' NE '00000000').NOT_NOP
&OPTSTR  SETC ''
         AGO  .PAST_OPTSTR_SET
.NOT_NOP ANOP
&OPTSTR  SETC '=B''&OPTSTR'''
.PAST_OPTSTR_SET ANOP
.*
.*
.* Generate the MS_START call.
.*
.CALL    ANOP ,
.*       CALLX &#_IDEPA,(&#_IDTKN,&MS_START,&#_IDESVA,
.*             &CSECTLIST,&(&V_SIZELENGTH),&MAXSEV,&PLCC,
.*             &MSGDEST_OPTION,&MSGDEST_P(1),&MSGDEST_P(2)),VL
         ##PLIST START
         ##PLIST PARM,&#_IDTKN
         ##PLIST PARM,&MS_START
         ##PLIST PARM,&#_IDESVA
         ##PLIST PARM,&CSECTLIST
         ##PLIST PARM,&(&V_SIZELENGTH)
         ##PLIST PARM,&MAXSEV
         ##PLIST PARM,&MS_PL_CC
         ##PLIST PARM,&MSGDEST_OPTION
&I       SETA  1
.PL_LOOP ANOP
         AIF   ('&MSGDEST_P(&I)' EQ '').PL_LOOPEND
         ##PLIST PARM,&MSGDEST_P(&I)
&I       SETA  &I+1
         AGO   .PL_LOOP
.PL_LOOPEND ANOP ,
         AIF   ('&OPTSTR' EQ '').CALLEND
         ##PLIST PARM,&OPTSTR
.CALLEND ANOP ,
         ##PLIST END,VL
         CALLX  &#_IDEPA
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   MS_TERMINATE                                               *
* Purpose: Generate code to terminate a Message Services session.     *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         MS_TERMINATE &ID=,&SPEPA=,&SPTOKEN=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &MS_TERMINATE              SETC in open code.
.*
.* Obtain service processor ID values and terminate service processor.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=MS_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' NE 'SUCCESS').MEXIT
         CALLX &#_IDEPA,(&#_IDTKN,&MS_TERMINATE),VL
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   MS_ISSUE_MESSAGE                                           *
* Purpose: Issue a message for the caller.                            *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         MS_ISSUE_MESSAGE &ID=,&SPEPA=,&SPTOKEN=,                      *
               &MSGID=,                                                *
               &SOURCE=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &MS_ISSUE_MESSAGE
         LCLA  &I
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=MS_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' EQ 'SUCCESS').VALIDATE
         MNOTE 8,'SRV##ID unable to set global variables.'
         MEXIT
.VALIDATE ANOP
.*
.*                  Validate incoming parameters.
.*
.*
.*  Ensure MSGID is present and isn't a numeric value.
.*
         AIF   ('&MSGID' EQ '').MSGID_MISSING
         AIF   (T'&MSGID NE 'N').MSGIDOK
.MSGID_NUMERIC MNOTE 8,'The MSGID parameter must specify the address of*
               the message ID to be issued.'
         MEXIT
.MSGID_MISSING MNOTE 8,'MSGID is a required parameter.'
         MEXIT
.MSGIDOK ANOP
.*
.*  Ensure that no more than 50 SOURCE parameters were specified.
.*
         AIF   (N'&SOURCE LE 50).SOURCEOK
         MNOTE 8,'No more than 50 SOURCE parameters may be specified.'
         MEXIT
.SOURCEOK ANOP ,
.*
.* Generate the parmlist and call to MS_ISSUE_MESSAGE.
.*
         ##PLIST START
         ##PLIST PARM,&#_IDTKN
         ##PLIST PARM,&MS_ISSUE_MESSAGE
         ##PLIST PARM,&MSGID
&I       SETA  1
.SOURCELOOP ANOP ,
         AIF   (&I GT N'&SOURCE).SOURCEDONE
         ##PLIST PARM,&SOURCE(&I)
&I       SETA  &I+1
         AGO   .SOURCELOOP
.SOURCEDONE ANOP ,
         ##PLIST END,VL
         CALLX  &#_IDEPA
         MEXIT
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   MS_GET_MESSAGE                                             *
* Purpose: Return the formatted text of a message to the caller.      *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         MS_GET_MESSAGE &ID=,&SPEPA=,&SPTOKEN=,                        *
               &MSGID=,                                                *
               &STRING=,                                               *
               &RESULTLEN=,                                            *
               &SOURCE=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &MS_GET_MESSAGE
         LCLA  &I
         LCLC  &L_STRING(2),&V_STRING(2)
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=MS_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' EQ 'SUCCESS').VALIDATE
         MNOTE 8,'SRV##ID unable to set global variables.'
         MEXIT
.VALIDATE ANOP
.*
.*                  Validate incoming parameters.
.*
.*
.*  Ensure MSGID is present and isn't a numeric value.
.*
         AIF   ('&MSGID' EQ '').MSGID_MISSING
         AIF   (T'&MSGID NE 'N').MSGIDOK
.MSGID_NUMERIC MNOTE 8,'The MSGID parameter must specify the address of*
               the message ID to be issued.'
         MEXIT
.MSGID_MISSING MNOTE 8,'MSGID is a required parameter.'
         MEXIT
.MSGIDOK ANOP
.*
.*  Ensure that no more than 50 SOURCE parameters were specified.
.*
         AIF   (N'&SOURCE LE 50).SOURCEOK
         MNOTE 8,'No more than 50 SOURCE parameters may be specified.'
         MEXIT
.SOURCEOK ANOP ,
&V_SIZELENGTH    SETC '#$&ID.$#SIZELENGTH'  Variable for SIZELENGTH=.
                 GBLC &(&V_SIZELENGTH)      Declare global variable.
         AIF   ('&RESULTLEN' NE '').RESULTOK
         MNOTE 8,'RESULTLEN is required, and must be the address of a l*
               ength field &(&V_SIZELENGTH) bytes in length.'
         MEXIT
.RESULTOK  ANOP ,
.*
.* If STRING= is missing, supply default values.
.*
&L_STRING(1)    SETC '&STRING(1)'
&L_STRING(2)    SETC '&STRING(2)'
                AIF ('&L_STRING(1)' NE '').STRING_NBLK
&V_STRING(1)    SETC '#$&ID.$#STRING1'     Variable for STRING=.
&V_STRING(2)    SETC '#$&ID.$#STRING2'     Variable for STRING=.
                GBLC &(&V_STRING(1))       Declare global variable.
                GBLC &(&V_STRING(2))       Declare global variable.
&L_STRING(1)    SETC '&(&V_STRING(1))'     Copy default value.
&L_STRING(2)    SETC '&(&V_STRING(2))'     Copy default value.
.STRING_NBLK    ANOP
.*
.*
.* Process the STRING keyword to get an address and length.
.*
&KEYWORD      SETC 'STRING'
              AIF ('&L_STRING(1)' EQ '').NO_STRING
              AIF ('&L_STRING(1)'(1,1) EQ '''').STR_LITERAL
              AIF ('&L_STRING(2)' EQ '').STR_TAGONLY
              MEXIT , ??????
.STR_TAGLEN   ANOP
&S_ADDR       SETC '&L_STRING(1)'         | Set addr.
&S_LEN        SETC '&L_STRING(2)'         | Set len.
              AGO  .PAST_STRING           |
.STR_TAGONLY  AIF  ('&(&V_SIZELENGTH)' EQ '').NO_SIZELENGTH
&S_ADDR       SETC '&L_STRING(1)'         | Set addr to tag_name.
&S_LEN        SETC '=AL&(&V_SIZELENGTH).(L''&L_STRING(1))'
              AGO  .PAST_STRING           |
.STR_LITERAL  ANOP                        |
              MNOTE 8,'STRING string cannot be a literal.'
              MEXIT
.NO_STRING    MNOTE 8,'STRING is a required keyword.'
              MEXIT
.PAST_STRING  ANOP
.*
.* Generate the parmlist and call to MS_GET_MESSAGE.
.*
         ##PLIST START
         ##PLIST PARM,&#_IDTKN
         ##PLIST PARM,&MS_GET_MESSAGE
         ##PLIST PARM,&MSGID
         ##PLIST PARM,&S_ADDR
         ##PLIST PARM,&S_LEN
         ##PLIST PARM,&RESULTLEN
&I       SETA  1
.SOURCELOOP ANOP ,
         AIF   (&I GT N'&SOURCE).SOURCEDONE
         ##PLIST PARM,&SOURCE(&I)
&I       SETA  &I+1
         AGO   .SOURCELOOP
.SOURCEDONE ANOP ,
         ##PLIST END,VL
         CALLX  &#_IDEPA
         MEXIT
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   MS_PUT_MESSAGE                                             *
* Purpose: Write the caller-provided text to the message destination. *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         MS_PUT_MESSAGE &ID=,&SPEPA=,&SPTOKEN=,                        *
               &STRING=
         GBLC  &#_IDCODE,&#_IDMAC,&#_IDESID,&#_IDESVA
         GBLC  &#_IDEPN,&#_IDEPA,&#_IDTKN
         GBLA  &MS_PUT_MESSAGE
         LCLA  &I
         LCLC  &L_STRING(2),&V_STRING(2)
.*
.* Obtain service processor ID values.
.*
         SRV##ID GET,REQUIRED=(SPEPA,SPTOKEN),                         +
               ID=&ID,IDMAC=MS_ID,SPEPA=&SPEPA,SPTOKEN=&SPTOKEN
         AIF  ('&#_IDCODE' EQ 'SUCCESS').VALIDATE
         MNOTE 8,'SRV##ID unable to set global variables.'
         MEXIT
.VALIDATE ANOP
.*
.*                  Validate incoming parameters.
.*
&V_SIZELENGTH    SETC '#$&ID.$#SIZELENGTH'  Variable for SIZELENGTH=.
                 GBLC &(&V_SIZELENGTH)      Declare global variable.
.*
.* If STRING= is missing, supply default values.
.*
&L_STRING(1)    SETC '&STRING(1)'
&L_STRING(2)    SETC '&STRING(2)'
                AIF ('&L_STRING(1)' NE '').STRING_NBLK
&V_STRING(1)    SETC '#$&ID.$#STRING1'     Variable for STRING=.
&V_STRING(2)    SETC '#$&ID.$#STRING2'     Variable for STRING=.
                GBLC &(&V_STRING(1))       Declare global variable.
                GBLC &(&V_STRING(2))       Declare global variable.
&L_STRING(1)    SETC '&(&V_STRING(1))'     Copy default value.
&L_STRING(2)    SETC '&(&V_STRING(2))'     Copy default value.
.STRING_NBLK    ANOP
.*
.*
.* Process the STRING keyword to get an address and length.
.*
&KEYWORD      SETC 'STRING'
              AIF ('&L_STRING(1)' EQ '').NO_STRING
              AIF ('&L_STRING(1)'(1,1) EQ '''').STR_LITERAL
              AIF ('&L_STRING(2)' EQ '').STR_TAGONLY
.STR_TAGLEN   ANOP
&S_ADDR       SETC '&L_STRING(1)'         | Set addr.
&S_LEN        SETC '&L_STRING(2)'         | Set len.
              AGO  .PAST_STRING           |
.STR_TAGONLY  AIF  ('&(&V_SIZELENGTH)' EQ '').NO_SIZELENGTH
&S_ADDR       SETC '&L_STRING(1)'         | Set addr to tag_name.
&S_LEN        SETC '=AL&(&V_SIZELENGTH).(L''&L_STRING(1))'
              AGO  .PAST_STRING           |
.STR_LITERAL  ANOP                        |
&S_ADDR         SETC '&L_STRING(1)'         | Set addr to value.
&L              SETA 0                      | Length counter = 0.
&I              SETA 2                      | Index counter -> past '.
.STR_LOOP       AIF  (&I GE K'&S_ADDR).STR_ELOOP     Loop over STRING.
                AIF  ('&S_ADDR'(&I,1) NE '''').STR_TXT If doubled.
&I              SETA &I+1                   |             Advance.
.STR_TXT        ANOP                        |          EndIf.
&L              SETA &L+1                   |   Add one to length.
&I              SETA &I+1                   |   Advance.
                AGO  .STR_LOOP              | End of counting loop.
.STR_ELOOP      ANOP                        |
&S_LEN          SETC '=AL&(&V_SIZELENGTH).(&L)'  Set length parameter.
                AGO  .PAST_STRING
.NO_STRING    MNOTE 8,'STRING is a required keyword.'
              MEXIT
.PAST_STRING  ANOP
.*
.* Generate the parmlist and call to MS_PUT_MESSAGE.
.*
         ##PLIST START
         ##PLIST PARM,&#_IDTKN
         ##PLIST PARM,&MS_PUT_MESSAGE
         ##PLIST PARM,&S_ADDR
         ##PLIST PARM,&S_LEN
         ##PLIST END,VL
         CALLX  &#_IDEPA
         MEXIT
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   MS_MMP                                                     *
* Purpose: This is the mapping macro for a Message Module Prolog.     *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO                        |
         MS_MMP &DSECT=YES,&ID=MMP_,  |                                +
               &MSECOUNT=*-*,         |                                +
               &FIRSTMSE=*-*,         |                                +
               &ELEMSIZE=*-*,         |                                +
               &MOD=*,                |                                +
               &PFXLENGTH=*-*,        |                                +
               &PREFIX=*,             |                                +
               &IDLENGTH=*-*          |
&I       SETC  '&ID'                  |
&CSECT   SETC  '&SYSECT'              |
         AIF   ('&DSECT' NE 'YES').NO_DSECT
&I.START DSECT                        | Start of MMP.
         AGO   .PAST_HEADER           |
.NO_DSECT ANOP                        |
&I.START DS    0F                     | Start of MMP.
.PAST_HEADER ANOP                     |
&I.ID                DC CL4'MMP '     | Control block id.
&I.ID_TEXT           EQU  C'MMP '     |
&I.MODULE_NAME       DC CL8'&MOD'     | Module name.
&I.ASSEMBLY_DATE     DC CL10'&SYSDATE'  Assembly date.
&I.ASSEMBLY_TIME     DC CL6'&SYSTIME' | Assembly time.
&I.VERSION           DC AL1(1)        | Version of map.
                     DC X'00'         | Not used.
&I.MSE_ELEMENT_SIZE  DC Y(&ELEMSIZE)  | MSE element size.
&I.MSE_COUNT         DC A(&MSECOUNT)  | Number of messages.
&I.FIRST_MSE         DC A(&FIRSTMSE)  | Pointer to first MSE.
&I.ID_LENGTH         DC AL1(&IDLENGTH)  Message Identification size.
&I.PREFIX_LENGTH     DC AL1(&PFXLENGTH) Prefix size.
&I.PREFIX            DC CL6'&PREFIX'  | Prefix
&I.CB_SIZE          EQU *-&I.START    | Size of this control block.
&I.CB_STORAGE       EQU &I.START,&I.CB_SIZE,C'X'
         AIF   ('&DSECT' NE 'YES').MEXIT
&CSECT   CSECT ,                      |
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   MS_MSE                                                     *
* Purpose: This is the mapping macro for a Message Entry.             *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO                        |
         MS_MSE &DSECT=YES,&ID=MSE_
&I       SETC  '&ID'                  |
&CSECT   SETC  '&SYSECT'              |
         AIF   ('&DSECT' NE 'YES').NO_DSECT
&I.START DSECT                        | Start of MSE.
         AGO   .PAST_HEADER           |
.NO_DSECT ANOP                        |
&I.START DS    0F                     | Start of MSE.
.PAST_HEADER ANOP                     |
&I.ADDRESS_TEXT           DS  A       | Address of message text.
&I.SEVERITY               DS  H       | Severity.
&I.LENGTH_TEXT            DS  X       | Length of message text.
                          DS  X       | Not used.
&I.CB_SIZE          EQU *-&I.START    | Size of this control block.
&I.CB_STORAGE       EQU &I.START,&I.CB_SIZE,C'X'
         AIF   ('&DSECT' NE 'YES').MEXIT
&CSECT   CSECT ,                      |
.MEXIT   MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   MS__SEVERITY                                               *
* Purpose: This is an internal macro used by MS_MESSAGE_MODULE to     *
*          define severity codes.                                     *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         MS__SEVERITY &SEVCHAR,&NUMBER
         AIF  (K'&SEVCHAR NE 1).INVALID_SEVCHAR
&CODEDEF SETC 'MS__SEVERITY_&SEVCHAR._DEFINED'
         GBLB  &(&CODEDEF)
         AIF  (&(&CODEDEF)).ALREADY_DEFINED
&(&CODEDEF) SETB 1
&CODEVAL SETC 'MS__SEVERITY_&SEVCHAR._VALUE'
         GBLA  &(&CODEVAL)
&(&CODEVAL) SETA &NUMBER
         MEXIT
.ALREADY_DEFINED MNOTE 8,'Severity character (&SEVCHAR) is already defi+
               ned.'
         MEXIT
.INVALID_SEVCHAR MNOTE 8,'Invalid severity character (&SEVCHAR).'
         MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   MS_MESSAGE_MODULE                                          *
* Purpose: This is the macro used to start and end a message module.  *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
         MS_MESSAGE_MODULE &TYPE,&NAME=,&PREFIX=,&IDLENGTH=8,&SEVCHAR=
         GBLC  &MS__PREFIX
         GBLA  &MS__PREFIX_LENGTH
         GBLA  &MS__IDLENGTH
         GBLA  &MS__LAST_MESSAGE_NUMBER
         GBLC  &MS__MODULE_NAME
         LCLC  &CODEDEF,&CODEVAL
.*
.* If type is START, process it.
.*
         AIF  ('&TYPE' NE 'START').NOT_START
&MS__PREFIX              SETC  '&PREFIX'
&MS__PREFIX_LENGTH       SETA  K'&PREFIX
&MS__IDLENGTH            SETA  &IDLENGTH
&MS__MODULE_NAME         SETC  '&NAME'
&MS__LAST_MESSAGE_NUMBER SETA  -1
.*
.* Check for required keywords.
.*
         AIF  ('&NAME' NE '').NAME_OK
         MNOTE 8,'NAME (message module name) is a required keyword.'
         MEXIT
.NAME_OK ANOP
         AIF  ('&PREFIX' NE '').PREFIX_OK
         MNOTE 8,'PREFIX (message prefix) is a required keyword.'
         MEXIT
.PREFIX_OK ANOP
.*
.* Other checks.
.*
         AIF  (K'&PREFIX LE 6).PREFIX_LENGTH_OK
         MNOTE 8,'Prefix length is greater than 6.'
         MEXIT
.PREFIX_LENGTH_OK ANOP
.*
.* Generate prolog for message module.
.*
&NAME    CSECT                        Csect name.
&NAME    RMODE ANY                    Rmode any.
##HEAD   LOCTR ,                      LOCTR for start of module.
##NDX    LOCTR ,                      LOCTR for table of MSEs.
MS__FIRSTMSE   DS   0F                Tag for first MSE.
##MSG    LOCTR ,                      LOCTR for message text.
##HEAD   LOCTR ,                      Get bact to head.
         MS_MMP DSECT=NO,ID=MS__MMP_, Generate MMP.                    +
               MSECOUNT=MS__MSECOUNT,                                  +
               FIRSTMSE=MS__FIRSTMSE,                                  +
               ELEMSIZE=MS__MSE_CB_SIZE,                               +
               MOD=&NAME,                                              +
               IDLENGTH=&IDLENGTH,                                     +
               PFXLENGTH=&MS__PREFIX_LENGTH,                           +
               PREFIX=&PREFIX
         MS_MSE DSECT=YES,ID=MS__MSE_
.*
.* Define severity codes.
.*
         AIF ('&SEVCHAR' NE '').USER_DEFINED_SEVCHAR
         MS__SEVERITY I,0             Informational
         MS__SEVERITY W,4             Minor error.
         MS__SEVERITY E,8             Significant error.
         MS__SEVERITY S,12            Serious error.
         MS__SEVERITY C,16            Critical error.
         MEXIT
.USER_DEFINED_SEVCHAR ANOP
&CTR     SETA  1
.SEVLOOP AIF   (N'&SEVCHAR(&CTR) NE 2).INVALID_SEVCHAR
         MS__SEVERITY &SEVCHAR(&CTR,1),&SEVCHAR(&CTR,2)
&CTR     SETA  &CTR+1
         AIF   (&CTR LE N'&SEVCHAR).SEVLOOP
         MEXIT
.NOT_START ANOP
.*
.* If type is END, then process.
.*
         AIF  ('&TYPE' NE 'END').BAD_TYPE
         AIF  ('&NAME' NE '').NOT_END_KEYWORD
         AIF  ('&PREFIX' NE '').NOT_END_KEYWORD
##NDX    LOCTR ,
MS__MSECOUNT EQU (*-MS__FIRSTMSE)/MS__MSE_CB_SIZE
         MEXIT
.*
.*  Errors.
.*
.INVALID_SEVCHAR MNOTE 8,'Invalid severity parameter - &SEVCHAR(&CTR)'
         MEXIT
.BAD_TYPE MNOTE 8,'&TYPE is not a valid type.'
         MEXIT
.NOT_END_KEYWORD MNOTE 8,'Keywords not supported for type END.'
         MEND
*---------------------------------------------------------------------*
*                                                                     *
* Macro:   MS_MESSAGE                                                 *
* Purpose: This is the macro used to generate a message in a message  *
*          module.                                                    *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
&MSGID   MS_MESSAGE &TEXT
         GBLC  &MS__PREFIX
         GBLA  &MS__PREFIX_LENGTH
         GBLA  &MS__IDLENGTH
         GBLA  &MS__LAST_MESSAGE_NUMBER
         LCLC  &PREFIX
         LCLC  &NUMBER
         LCLC  &SEVCHAR
         LCLA  &COLUMN,&LENGTH
         LCLC  &CODEDEF,&CODEVAL
.*
.* Check for required keywords.
.*
         AIF  ('&MSGID' NE '').MSGID_OK
         MNOTE 8,'MSGID (Message Identifier) is a required keyword.'
         MEXIT
.MSGID_OK ANOP
         AIF  ('&TEXT' NE '').TEXT_OK
         MNOTE 8,'TEXT (Message Text) is a required keyword.'
         MEXIT
.TEXT_OK ANOP
.*
.* Seperate message identifier into prefix, number, and severity and
.* do further checking.
.*
         AIF   (K'&MSGID NE &MS__IDLENGTH).MSGID_LENGTH_ERROR
.IDLENGTH_OK ANOP
&PREFIX  SETC  '&MSGID'(1,&MS__PREFIX_LENGTH)
         AIF   ('&PREFIX' NE '&MS__PREFIX').MSGID_FORMAT_ERROR
&COLUMN  SETA  &MS__PREFIX_LENGTH+1
&LENGTH  SETA  &MS__IDLENGTH-&MS__PREFIX_LENGTH-1
&NUMBER  SETC  '&MSGID'(&COLUMN,&LENGTH)
&CNT     SETA  1
.NUMLOOP AIF   (&CNT GT &LENGTH).NUMBER_OK
         AIF   ('&NUMBER'(&CNT,1) LT '0').MSGID_FORMAT_ERROR
&CNT     SETA  &CNT+1
         AGO   .NUMLOOP
.NUMBER_OK ANOP
         AIF   (&NUMBER LE &MS__LAST_MESSAGE_NUMBER).MSGID_SEQUENCE_ERR+
               OR
&MS__LAST_MESSAGE_NUMBER SETA &NUMBER
&SEVCHAR SETC  '&MSGID'(&MS__IDLENGTH,1)
&CODEDEF SETC 'MS__SEVERITY_&SEVCHAR._DEFINED'
         GBLB  &(&CODEDEF)
         AIF (NOT &(&CODEDEF)).MSGID_INVALID_SEVCHAR
&CODEVAL SETC 'MS__SEVERITY_&SEVCHAR._VALUE'
         GBLA  &(&CODEVAL)
.*
.* Generate a message entry and the message text.
.*
##NDX    LOCTR ,                      LOCTR for index.
         DC    A(&MSGID)              Address of message text.
         DC    Y(&(&CODEVAL))         Severity code.
         DC    AL1(&MSGID._LENGTH)    Message length.
         DC    AL1(*-*)               Not used.
##MSG    LOCTR ,                      LOCTR for message text.
&MSGID   DC C'&MSGID ',C&TEXT         Message text.
&MSGID._LENGTH EQU *-&MSGID           Length of message text.
         MEXIT
.*
.*  Errors.
.*
.MSGID_FORMAT_ERROR   MNOTE 8,'MSGID (&MSGID) is not in valid format.'
         MEXIT
.MSGID_SEQUENCE_ERROR MNOTE 8,'MSGID is not in the correct sequence.'
         MEXIT
.MSGID_LENGTH_ERROR   MNOTE 8,'MSGID is not the correct length.'
         MEXIT
.MSGID_INVALID_SEVCHAR MNOTE 8,'Invalid severity character (&SEVCHAR) i+
               n MSGID.'
         MEXIT
         MEND
