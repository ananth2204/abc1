.*SRVFILE SRVSMS SRVXSID SRVPDF****************************************
.*                                                                    *
.*                    Chapter. File Handlers                          *
.*                                                                    *
.**********************************************************************
:h1 id=srvfi.File Handlers
:p.
The File Handlers provide a generalized way to read and write
sequential files.
The file handlers all work with the
same parameters and produce the same sets of return codes.
:p.
The File Handlers are each environment-dependent, but may be used with
any Environment Support service processor.
.*--------------------------------------------------------------------*
:h2.The Standard File Handler
.*--------------------------------------------------------------------*
The standard, or OS, file handler can be used to read and write
sequential files, in the form of a physical sequential file or an
individual PDS member.  The OS file handler can also be made to
conditionally create, replace, or append to a sequential or partitioned
dataset, or a member of an existing PDS.
.*
:p.If used to create a file, the OS file handler will translate
generalized file characteristic information (estimated number of
records, average and maximum record length, etc) into information
needed by MVS dynamic allocation to create the disk dataset.  In
addition, the file creation process may be provided with the
:#x.UNIT:e#x.,
:#x.VOLUME:e#x. and/or :#x.DIRBLKS:e#x. parameters, which can be set
up using the :#x.FI_OS_INFO:e#x. macro.  An optimum blocksize is
calculated internally based on the type of device the file is being
created on.
.*
:p.When creating a dataset, the OS file handler has to
determine the optimum blocksize before calling MVS dynamic allocation.
The OS file handler currently allocates the new dataset in blocks,
and attempts to fit 6 blocks per track.
(For example, a fixed-length file with 80-byte records would cause a
blocksize of 7440 to be selected on a 3380 disk device.)
If a specific volume is requested via the :#x.FI_OS_INFO:e#x. macro,
the OS file handler will determine what type of device the volume is
mounted on, and calculate an optimum blocksize based on that device
type.  If a volume is not specified, the device type of the MVS
system's IPL volume is used.
.*--------------------------------------------------------------------*
:h2.The Source Management System File Handler
.*--------------------------------------------------------------------*
.*--------------------------------------------------------------------*
:h2.The ISPF/PDF File Handler
.*--------------------------------------------------------------------*
.*--------------------------------------------------------------------*
:h2.The XsubID File Handler
.*--------------------------------------------------------------------*
:p.







.*--------------------------------------------------------------------*
:h2.Preparing to use a File Handler
.*--------------------------------------------------------------------*
.*--------------------------------------------------------------------*
:h3.Obtaining File Handler Symbols &amp. Macros
.*--------------------------------------------------------------------*
:p.
The File Handler symbols and interface macros can be found in the
assembler copy member :#x.SRVFIMAC:e#x.. This member contains symbols
naming the File Handler's load module, function codes, return codes, and
parameter values.  It also contains macros for using all of the File
Handler's functions.    The following statement or its equivalent should
appear at the beginning of any program that uses the string handler:
:xmp.
   COPY SRVFIMAC      Obtain the File Handler symbols & macros.
:exmp.
.*--------------------------------------------------------------------*
:h3.Establishing File Handler Defaults
.*--------------------------------------------------------------------*
Some parameters are general to the strihg handler and not specific to
any function.  These parameters include its load module name
(:#xi.fi_epname:e#xi.), entry point address
(:#xi.fi_epa:e#xi.), and token value
(:#xi.fi_token:e#xi.). The :#x.FI_ID:e#x. macro (see
:hdref refid=fiid.) can be used to establish defaults for these
parameters and associate them with a unique service processor
identifier.  The identifier may then be supplied on any File Handler
macro instruction to refer to the default parameter values.
.*--------------------------------------------------------------------*
:h3.Identifying the File Handler
.*--------------------------------------------------------------------*
:p.
The File Handler service processor resides in the load module named by
the following symbol definition in copy member :#x.SRVFIMAC:e#x.:
:xmp.
&FI_OS_FILE_HANDLER  SETC  '''SRVFIOS  '''
:exmp.
This symbolic name should be used as the service processor entry point
name for the File Handler as shown in the following :#x.FI_ID:e#x.
macro instruction.
:xmp.
FI_ID ID=FI,SPEPNAME=&FI_OS_FILE_HANDLER  Set File Handler Defaults.
:exmp.
.*--------------------------------------------------------------------*
:h3.Loading the File Handler
.*--------------------------------------------------------------------*
:p.
The recommended method for loading the File Handler is through
Environment Support's :#x.ES_LOAD_MODULE:e#x. function, as shown in
the following example:
:xmp.
ES_LOAD_MODULE ID=ES,SPID=FI            Load the File Handler
:exmp.
.*--------------------------------------------------------------------*
:h2.Common Parameters
.*--------------------------------------------------------------------*
:p.
Several parameters are common to all File Handler function calls.
These parameters are listed below:
.*****
:plist.
:pLt.id_name
:pLd.specifies the name of a service processor identifier created by the
:#x.FI_ID:e#x. macro which will be used by all other function invocation
macros to automatically obtain values for :#xi.fi_epa:e#xi. and
:#xi.fi_token:e#xi.. This parameter is required unless both
:#xi.fi_epa:e#xi. and :#xi.fi_token:e#xi. are specified.
:pLt.fi_epa
:pLd.a fullword in storage containing the entry point address of the
String Handler service processor.  The value specified by
:#xi.fi_epa:e#xi.  overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:pLt.fi_token
:pLd.specifies the label of a fullword in storage that contains the
value (to be) returned by :#x.FI_START:e#x. for the
:#xi.fi_token:e#xi. parameter.  The value specified by
:#xi.fi_token:e#xi. overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:eplist.
.*--------------------------------------------------------------------*
:h2.Return Codes
.*--------------------------------------------------------------------*
:p.
Many return codes can be returned from each function.  In the function
descriptions later in this chapter, the most common return codes
returned by the particular function are documented.  The following
is a complete list of File Handler return codes.
:rclist.
:rcn.0
:rct.FI_SUCCESS
:rcd.The File Handler
function has completed successfully.
:rcn.1:rct.FI_END_OF_FILE
:rcd.End of File has been reached.
:rcn.2:rct.FI_WARNING
:rcd.Non-terminating error occurred.
:rcn.3:rct.FI_ERROR
:rcd.Terminating error occurred.
:rcn.4:rct.FI_SEVERE
:rcd.A severe terminating error.
:rcn.5:rct.FI_INVALID_SYNTAX
:rcd.Unsupported filename syntax.  The code is returned by the
:#x.FI_START:e#x. function only; it is used when file-servers are
being cascaded to indicate that the file name is not for the type of
file supported by that particular file server and that the next server
should be tried. If file-servers are not being cascaded or if the last
one has been tried, :#x.FI_INVALID_SYNTAX:e#x. should be treated in
the same manner as :#x.FI_ERROR:e#x..
:rcn.6:rct.FI_INVALID_FILEID
:rcd.A bad file-token was used.
:erclist.
.*--------------------------------------------------------------------*
:h2.File Handler Service Processor Functions
.*--------------------------------------------------------------------*
:p.
The remaining sections of this chapter describe all functions provided
by the File Handler service processor, arranged in alphabetical order.
Each function's description begins on a new page, and the name of the
function being described appears in the top outside corner of every
page.
.**********************************************************************
:func name='FI_CLOSE'.Close the File Being Processed
.**********************************************************************
:p.
The :#x.FI_CLOSE:e#x. function closes the file currently being processed
but does not deallocate from it.  This function is normally not needed
since :#x.FI_TERMINATE:e#x. will always close the file for you.  However,
if you need to read the file again from the start and do not want to go
through allocation again, this function may be used.
:mac.
FI_CLOSE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.fi_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.fi_token:ehp1.&rbt.
:emac.
:callx.
CALLX :hp1.fi_epa:ehp1.,(:hp1.fi_token:ehp1.,&amp.FI_CLOSE)
:ecallx.
.**********************************************************************
:func name='FI_GET_INFO'.Obtain Information About a File
.**********************************************************************
:p.
The :#x.FI_GET_INFO:e#x. function retrieves information about the file
identified by the :#xi.fi_token:e#xi. parameter. Information
that can be obtained through this function includes the most recent
message issued, the file's name, its logical record length, and its
record format.
:mac.
FI_GET_INFO ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.fi_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.fi_token:ehp1.&rbt.
  &lbr.
     ,NAME=&lbr.(:hp1.name:ehp1.,:hp1.length:ehp1.) &cont.
| :hp1.name:ehp1.&rbr.,NAMELEN=:hp1.namelen:ehp1.
    |,MSG=&lbr.(:hp1.msg:ehp1.,:hp1.length:ehp1.) &cont.
| :hp1.msg:ehp1.&rbr.,MSGLEN=:hp1.msglen:ehp1.
    |,LRECL=:hp1.lrecl:ehp1.
    |,RECFM=:hp1.recfm:ehp1.
    |,IDSTRING=:hp1.idstring:ehp1.
  &rbr.
:emac.
:callx.
CALLX :hp1.fi_epa:ehp1.,(:hp1.fi_token:ehp1.,&amp.FI_GET_INFO,
             &lbr.
              &amp.FI_GI_NAME,:hp1.name:ehp1.,:hp1.length:ehp1.,&cont.
:hp1.namelen:ehp1.
             |&amp.FI_GI_MSG,:hp1.msg:ehp1.,:hp1.length:ehp1.,&cont.
:hp1.msglen:ehp1.
             |&amp.FI_GI_LRECL,:hp1.lrecl:ehp1.
             |&amp.FI_GI_RECFM,:hp1.recfm:ehp1.
             |&amp.FI_GI_IDSTRING,:hp1.idstring:ehp1.
             &rbr.)
:ecallx.
.*****
:plist.
:pLt.name
.br
:#xi.length:e#xi.
.br
:#xi.namelen:e#xi.
:pLd.These three parameters specify an area in which to return the
name of the file being processed, a fullword containing the length
of the area, and a fullword into which the length of the file's
name will be returned.
:pLt.msg
.br
:#xi.length:e#xi.
.br
:#xi.msglen:e#xi.
:pLd.These three parameters specify an area in which to return the
most recently created File Handler message, a fullword containing the
length of the area, and a fullword into which the length of the message
will be returned.
:pLt.lrecl
:pLd.A halfword into which the logical record length of the file being
processed will be returned.
:pLt.recfm
:pLd.An eight (8) character area into which the record format of the
file being processed will be returned.
:pLt.idstring
:pLd.An eight (8) character area into which a file-identifier string
will be returned.  For members of a partitioned data set or other
directory, the member name will be used.  For sequential data sets,
one of the data set's qualifiers will be used.
:eplist.
.*****
:efunc.
.**********************************************************************
:func name='FI_ID' id=fiid.Establish Default File Handler Values
.**********************************************************************
:p.The :#x.FI_ID:e#x. macro is used to establish default values for
use by other File Handler macros, which may access those values through
a unique identifier, :#xi.id_name:e#xi., specified by the
user. When allowed to generate default values, this macro will create
Program Work Area (PWA) storage for :#xi.fi_epa:e#xi. and
:#xi.fi_token:e#xi..             These values, whether generated by the
macro or provided by the user, are accessable from all other File
Handler macros via the
:#x.ID=:e#x.:#xi.id_name:e#xi. parameter.
:mac.
FI_ID ID=:hp1.id_name:ehp1.
  &lbt.,SPEPNAME=:hp1.fi_epname:ehp1.&rbt.
  &lbt.,SPEPA=:hp1.fi_epa:ehp1.&rbt.
  &lbt.,SPTOKEN=:hp1.fi_token:ehp1.&rbt.
  &lbt.,ESID=:hp1.esid_name:ehp1.&rbt.
  &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
:emac.
.*****
:plist.
:pLt.id_name
:pLd.the identifier to assign to the service processor identifier being
established.  This name must be unique for all service processor
identifier's.
:pLt.fi_epname
:pLd.the entry point name of the File Handler service processor module
that is being used.
:pLt.fi_epa
:pLd.specifies the label of a fullword in storage that will contain the
entry point address of the File Handler.
:pLt.fi_token
:pLd.specifies the label of a fullword in storage that will contain the
token assigned by the :#x.FI_START:e#x. function of the File Handler.
:pLt.esid_name
:pLd.the name of a service processor identifier, created by the
:#x.ES_ID:e#x.  macro, which will be used by the :#x.FI_ID:e#x. macro to
automatically obtain the value for :#x.esv:e#x. (see below).
:pLt.esva
:pLd.specifies the label of a fullword in storage that contains (or
will contain) the address of the Environment Support Vector
(:#x.ESV:e#x.) created by the :#x.ES_START:e#x. function.
:eplist.
:fh3.Example 1
:p.
:xmp.
FI_ID     ID=FI_SMS,SPEPNAME=&SMS_FILE_HANDLER
:exmp.
:efunc.
.**********************************************************************
:func name='FI_OPEN'.Open the File For Processing
.**********************************************************************
:p.
The :#x.FI_OPEN:e#x. function opens the file currently allocated to and
prepares for processing.  This will be done automatically by the
:#x.FI_START:e#x. function unless option :#xb.MANUALOPEN:e#xb. is
specified.  If an application needs to allocate to a file once and then
repeatedly open and close the file, this function may be used in
conjunction with the :#xb.MANUALOPEN:e#xb. option.
:mac.
FI_OPEN ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.fi_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.fi_token:ehp1.&rbt.
:emac.
:callx.
CALLX :hp1.fi_epa:ehp1.,(:hp1.fi_token:ehp1.,&amp.FI_OPEN)
:ecallx.
.**********************************************************************
:func name='FI_OS_INFO'.Provide OS-Specific Information About A File
.**********************************************************************
:p.
The :#x.FI_OS_INFO:e#x. macro is used to build a list of those
parameters
unique to dataset creation using MVS dynamic allocation.
.*
:p.Unlike the other File Handler macros, :#x.FI_OS_INFO:e#x. does not
generate a call to a service processor, or establish or use service
processor defaults.  Instead, :#x.FI_OS_INFO:e#x. generates a parameter
list and constructs dynamic allocation textunits in the caller's
program workarea: this list, in turn, is passed to :#x.FI_START:e#x.
using the :#x.INFO:e#x. keyword.
.*
:p.There is no CALLX equivalent of the :#x.FI_OS_INFO:e#x. macro.
.*
:mac.
FI_OS_INFO  PL=:hp1.parmlist_address:ehp1.
          &lbt.,DIRBLKS=:hp1.PDS_dirblks:ehp1.&rbt.
          &lbt.,UNIT=:hp1.unit_name:ehp1.&rbt.
          &lbt.,VOLUME=:hp1.volume_ID:ehp1.&rbt.
          &lbt.,FREE=:hp1.free_value:ehp1.&rbt.
          &lbt.,SPIN=:hp1.spin_value:ehp1.&rbt.
          &lbt.,SYSOUT=:hp1.sysout_class:ehp1.&rbt.
          &lbt.,DS=:hp1.storage_area:ehp1.&rbt.
:emac.
.*****
:plist.
:pLt.PDS_dirblks
:pLd.Specifies the number of PDS directory blocks to be used when
creating a partitioned dataset.  If not specified, the default is 10.
:pLt.unit_name
:pLd.Specifies the MVS unit name to be used when creating a dataset.
If not specified, the default is :hp1.SYSDA:ehp1..
:pLt.volume
:pLd.Specifies the volume serial number where the OS File Handler
should create a dataset.  There is no default if :#x.volume:e#x. is not
specified, which will cause the dataset to be created on an eligible
disk volume mounted as :hp1.storage:ehp1..
:pLt.free_value
:pLd.Keyword :hp2.CLOSE:ehp2. or :hp2.END:ehp2., specifying that the
file should be freed (unallocated) by the system when it is closed or
at the end of the jobstep, respectively.
:pLt.spin_value
:pLd.Keyword :hp2.UNALLOC:ehp2. or :hp2.NO:ehp2., specifying that the
file should be release for printing by the system when it is unallocated
or at the end of the job, respectively.
:note.When SPIN is used, the corresponding FI_START call should
specify OPTIONS=(SYSOUT).
:pLt.sysout_class
:pLd.specifies that this is a sysout file and provides the sysout class
to use.  A sysout class of '*' specifies that the system default sysout
class should be used.
:note.When SYSOUT is used, the corresponding FI_START call should
specify OPTIONS=(SYSOUT).
:pLt.parmlist_address
:pLd.Provides a tag that :#x.FI_OS_INFO:e#x. will generate when creating
its parameter list.  This tag should be specified on the associated
:#x.FI_START:e#x. macro.  This is the only required parameter on the
:#x.FI_OS_INOF:e#x. macro.
:pLt.storage_area
:pLd.Instructs :#x.FI_OS_INFO:e#x. to construct its parameter list in
the program's :hp1.PWA:ehp1. or :hp1.SWA:ehp1..  The default is for
:#x.FI_OS_INFO:e#x. to construct its parameters in the storage area
local to the block from which it was called.
:eplist.
.*****
:efunc.
.**********************************************************************
:func name='FI_READLINE'.Read the next Sequential Line from a File
.**********************************************************************
:p.
The :#x.FI_READLINE:e#x. function returns the next sequential input
line of the file specified by the :#xi.fi_token:e#xi.
parameter. The file must have been opened with the
:#x.INPUT_SEQUENTIAL:e#x. access value.
:mac.
FI_READLINE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.fi_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.fi_token:ehp1.&rbt.
   ,LINE=&lbr.:hp1.line:ehp1. &cont.
| (:hp1.line:ehp1.,:hp1.length:ehp1.)&rbr.
   ,RESULTLEN=:hp1.result_len:ehp1.
:emac.
:callx.
CALLX :hp1.fi_epa:ehp1.,(:hp1.fi_token:ehp1.,&amp.FI_READLINE,&cont.
:hp1.line:ehp1.,:hp1.length:ehp1.,:hp1.result_len:ehp1.)
:ecallx.
.*****
:plist.
:pLt.line
:pLd.Provides the address of an area in storage where
:#x.FI_READLINE:e#x. should return the next line of input.
:pLt.length
:pLd.Provides a fullword length of :#x.line:e#x..
file.
:pLt.resultlen
:pLd.Provides a fullword in storage where :#x.FI_READLINE:e#x. will
return the length of the line returned.
:eplist.
.*****
:efunc.
.**********************************************************************
:func name='FI_START'.Allocate to and Open a File
.**********************************************************************
:p.
The :#x.FI_START:e#x. function locates and opens the file named by
:#xi.file:e#xi., and prepares to access it in the manner
specified in the :#xi.OPTIONS:e#xi. parameter. Currently,
sequential input is supported for all file handlers, and sequential
output is supported by the OS file handler.
Once the file has been opened, it is
ready for processing.
:mac.
FI_START ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.fi_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.fi_token:ehp1.&rbt.
  &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
   ,FILE=&lbr.:hp1.file:ehp1. | &cont.
:hp2.(:hp1.file:ehp1.,:hp1.length:ehp1.):ehp2.&rbr.
  &lbt.,INFO=:hp1.info:ehp1.&rbt.
  &lbt.,OPTIONS=(:hp1.option_list:ehp1.)&rbt.
  &lbt.,RECORDLENGTH=:hp1.average:ehp1. | &cont.
:hp2.(:hp1.average,maximum:ehp1.):ehp2.&rbt.
  &lbt.,FILESIZE=:hp1.initial:ehp1. | &cont.
:hp2.(:hp1.initial,increment:ehp1.):ehp2.&rbt.
:emac.
:callx.
CALLX :hp1.fi_epa:ehp1.,(:hp1.fi_token:ehp1.,&amp.FI_START,&cont.
:hp1.esva:ehp1.,:hp1.info:ehp1.,&cont.
:hp1.file:ehp1.,:hp1.length:ehp1.,:hp1.optionbyte:ehp1.,
              :hp1.avgreclen:ehp1.,&cont.
:hp1.maxreclen:ehp1.,:hp1.initialsize:ehp1.,&cont.
:hp1.increment:ehp1.&rbt.)
:ecallx.
.*****
:plist.
:pLt.file
:pLd.specifies the label of an area in storage containing the name of
the file to be opened.  The file name must follow standard convention
for files of its type.
:pLt.length
:pLd.specifies the label of a fullword in storage that contains a signed
binary integer equal to the length of the file name specified by
:#xi.file:e#xi.
:pLt.info
:pLd.Specifies the label of a fullword in storage containing a value
whose meaning may be different for each file handler service processor.
In the case of the OS file handler, the :#x.INFO:e#x. parameter will
point to a parameter list built by the :#x.FI_OS_INFO:e#x. macro.
:pLt.options
:pLd.Provides a list of options for handling the file being allocated
and opened.  The supported options are:
:ul compact.
:li.:#xb.FILENAME:e#xb. - The filename provided by the :#x.filename:e#x.
parameter is an actual filename (for example, an OS dataset name).
:li.:#xb.FILEID:e#xb. - The filename provided by the :#x.filename:e#x.
parameter is a file identifier of some kind (for example, a preallocated
DDNAME if the OS file handler is being used).
:li.:#xb.FILETEMP:e#xb. - A temporary work file is being created.
:li.:#xb.SYSOUT:e#xb. - A sysout file is being created.
:#xb.SYSOUT:e#xb. requires :#xb.OUTPUT:e#xb. and :#xb.NEW:e#xb., and
implies :#xb.ISOCC:e#xb..
:li.:#xb.INPUT:e#xb. - The file is being opened for input processing.
:li.:#xb.OUTPUT:e#xb. - The file should be opened for output processing.
:li.:#xb.NEW:e#xb. - The file being opened for :#xb.OUTPUT:e#xb. should
be created.  If the file already exists, an error will be returned.
:#xb.NEW:e#xb. is not valid for files being opened for :#xb.INPUT:e#xb..
:li.:#xb.REPLACE:e#xb. - The file being opened for :#xb.OUTPUT:e#xb.
should be created if it does not already exist.  If it does already
exist, its contents will be replaced.  :#xb.REPLACE:e#xb. is not valid
for files being opened for :#xb.INPUT:e#xb..
:li.:#xb.EXISTING:e#xb. - The file must already exist.  If the file is
being opened for :#xb.OUTPUT:e#xb., its contents will be replaced.
:li.:#xb.APPEND:e#xb. - The file being opened for :#xb.OUTPUT:e#xb.
should be created if it does not already exist.  If it does already
exist, all new lines written to it will be appended to the existing
contents.  :#xb.APPEND:e#xb. is not valid for files being opened
for :#xb.INPUT:e#xb..
:li.:#xb.ISOCC:e#xb. - Indicates that lines contain ISO carriage control
in the first byte.  If the file handler supplies the record format for
a file, the ISOCC option will cause the appropriate effect; otherwise,
the ISOCC option is ignored.
:eul.
:pLt.options
:pLd.
:ul.
:li.:#xb.AUTOOPEN:e#xb. - The file will automatically be opened for
processing by the :#x.FI_START:e#x. function.  This is the default.
Related parameter: :#xb.MANUALOPEN:e#xb..
:li.:#xb.MANUALOPEN:e#xb. - The file will not be automatically opened
by :#x.FI_START:e#x.: it must be opened using the :#x.FI_OPEN:e#x.
function before any processing may begin.
:li.:#xb.AUTOFREE:e#xb. - If the :#x.FI_START:e#x. function allocates
a new DDNAME to access the file, it will automatically be unallocated by
the corresponding :#x.FI_TERMINATE:e#x. function.  Related parameter:
:#xb.MANUALFREE:e#xb..
:li.:#xb.MANUALFREE:e#xb. - The file will not be unallocated by the
:#x.FI_TERMINATE:e#x. function, regardless of how it was allocated.
:eul.
:p.The following :#x.OPTIONS:e#x. parameters are mutually exclusive:
:ul compact.
:li.:#xb.FILENAME:e#xb. and :#xb.FILEID:e#xb..
:li.:#xb.AUTOFREE:e#xb. and :#xb.MANUALFREE:e#xb.
:li.:#xb.AUTOOPEN:e#xb. and :#xb.MANUALOPEN:e#xb.
:li.:#xb.INPUT:e#xb. and :#xb.OUTPUT:e#xb.
:li.:#xb.APPEND:e#xb., :#xb.EXISTING:e#xb., :#xb.NEW:e#xb., and
:#xb.REPLACE:e#xb.
:li.:#xb.INPUT:e#xb. and any of :#xb.APPEND:e#xb., :#xb.NEW:e#xb.,
:#xb.REPLACE:e#xb., or :#xb.SYSOUT:e#xb..
:eul.
:pLt.optionvalue
:pLd.Provides a one-byte value containing the option flag bits that
correspond to the possible :#x.OPTIONS:e#x. values.
Refer to the macro definition for :#x.FI_START:e#x. in copy member
:#x.SRVFIMAC:e#x. for the macro variable names that represent the
individual options' bit flags.
:pLt.recordlength
:pLd.Provides an average and (optionally) a maximum recordlength
for a file being created.  During :#x.OUTPUT:e#x. processing, the
OS file handler uses the
average recordlength to determine the amount of disk space
to request, as well as to choose an optimum blocksize for the
disk device being used for the new file.
For variable-length records, the maximum recordlength is
used to set the logical recordlength.
:pLt.filesize
:pLd.Provides a primary and (optionally) an incremental number of
records that will be stored in the file being created.  These values
are used to determine how much disk space to request when a file is
being created.
:eplist.
.*****
:efunc.
.**********************************************************************
:func name='FI_TERMINATE'.Close and Release a File
.**********************************************************************
:p.
The :#x.FI_TERMINATE:e#x. function ends a session with the File
Handler.  If the file identified by :#xi.fi_token:e#xi. has
been allocated and opened, it will be closed and released.  All
resources allocated to the session, including buffers, working storage,
and enqueues, are released back to the system.  This function must be
invoked in order to cleanly terminate a File Handler session, even if
the :#x.FI_START:e#x. function did not complete successfully.
:mac.
FI_TERMINATE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.fi_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.fi_token:ehp1.&rbt.
:emac.
:callx.
CALLX :hp1.fi_epa:ehp1.,(:hp1.fi_token:ehp1.,&amp.FI_TERMINATE)
:ecallx.
.*****
:fh3.Example
:p.
The following statement is all that is needed to shut-down a session
with the File Handler.
:xmp.
FI_TERMINATE ID=DATA           Close and release input data file.
:exmp.
:efunc.
.**********************************************************************
:func name='FI_WRITELINE'.Add A Sequential Line To a File
.**********************************************************************
:p.
The :#x.FI_WRITELINE:e#x. function adds the line provided by the caller
to the file specified on the :#xi.FI_START:e#xi. macro.
The file must have been opened with the
:#x.OUTPUT:e#x. option.
:mac.
FI_WRITELINE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.fi_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.fi_token:ehp1.&rbt.
   ,LINE=&lbr.:hp1.line:ehp1. &cont.
| (:hp1.line:ehp1.,:hp1.length:ehp1.)&rbr.
:emac.
:callx.
CALLX :hp1.fi_epa:ehp1.,(:hp1.fi_token:ehp1.,&amp.FI_WRITELINE,&cont.
:hp1.line:ehp1.,:hp1.length:ehp1.)
:ecallx.
.*****
:plist.
:pLt.line
:pLd.Provides the address of a record in storage to be added to the
file being created.
:pLt.length
:pLd.Provides a fullword length of the record being added to the
file.
:eplist.
:efunc.
