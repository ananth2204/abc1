*---------------------------------------------------------------------*
*  Copyright 2011 by Clemson University Research Foundation           *
*                                                                     *
*  Licensed under the Apache License, Version 2.0 (the "License");    *
*  you may not use this file except in compliance with the License.   *
*  You may obtain a copy of the License in this library as member     *
*  $LICENSE, or from                                                  *
*                                                                     *
*      http://www.apache.org/licenses/LICENSE-2.0                     *
*                                                                     *
*  Unless required by applicable law or agreed to in writing,         *
*  software distributed under the License is distributed on an "AS    *
*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either    *
*  express or implied.  See the License for the specific language     *
*  governing permissions and limitations under the License.           *
*---------------------------------------------------------------------*
//SRVDTXR3 JOB TIME=(,8)
/*JOBPARM Q=H
//  EXEC  ASMPCL,COPT=',RENT',LOPT=',RENT,REUS,REFR',
//    PDS='SYSTEMS.SRV.LOAD',NAME=SRVDTXR3,MAC=SYSTEMS
//P.SYSIN  DD  *
     SMLIST CONVERT=YES               |
SRVDTXR3     TITLE 'Exerciser For Message Service Processor'
*---------------------------------------------------------------------*
*
*  Copyright (C) 1989 Clemson University
*
*  Program     SRVDTXR3
*
*  Abstract    This is an exerciser routine for functions of the Date/
*              Time Service Processor (SRVDT).  Feel free to add tests
*              for SRVDT as development progesses.
*
*  Inputs:
*      Parameters  None
*      Files       None
*      Other       Terminal (uses TGET for input)
*
*  Outputs:
*      Returncodes None
*      Messages    Various
*      Files       SYSPRINT (used by Printline service processor)
*      Other       Terminal (uses TPUT too)
*
*  PROGRAM     Reentrant, problem key and state, standard linkage,
*  ATTRIBUTES  non-authorized, AMODE(31), RMODE(24)
*
*  Special
*  Notes       None
*
*  Change
*  History     12/01/89 JCB - New
*              __/__/__ ___
*              __/__/__ ___
*
*  Method of   SRVDTXRZ is a series of tests, each consisting of:
*  Operation     . Prompt for the test ('enter any char for test, or
*                  null line for next test')
*                . Test, usually coded as loop within a subroutine
*              Note that SRVDT errors are expected, and shouldn't cause
*              the exerciser to terminate. A 'Callsub DT_Error' will
*              print the debug information without terminating.
*
*---------------------------------------------------------------------*
         EJECT                        |
     copy  srvdtmac                   |
     print off                        |
     copy  srvesmac                   |
     copy  srvplmac                   |
     print on,gen                     |
     eject                            |
 block name=SRVDTXR3,type=program,    |                                *
               options=(*pwa,xa,mode,long,novl),                       *
               amode=31,              |                                *
               subopts=(*swa,loadbase),                                *
               basereg=(r12,r10),     |                                *
               rmode=24               |
     eject                            |
  es_id id=es,esva=pwa_esv_address,   |                                +
               spepa=pwa_es_epa,      |                                +
               sptoken=pwa_es_token   |
      space 1                         |
  pl_id id=pl,esva=pwa_esv_address,   |                                *
               esid=es,               |                                *
               spepname=&PRINT_LINE,  |                                *
               sizelength=4           |
      space 1                         |
  dt_id id=DT,spepname=&DateTime_Services
     eject                            |
  es_MVS_load id=ES                   |
  ES_Start id=ES                      |
  ES_Load_Module id=ES,spid=DT        |
  if    (treg,r15,nz)                 |
   ex    0,*                          |
  endif                               |
  ES_Load_Module id=ES,spid=PL        |
  if    (treg,r15,nz)                 |
   ex    0,*                          |
  endif                               |
  PL_Start     ID=PL,                 |                                *
               DDname='SYSPRINT',     |                                *
               PageSize=12,           |                                *
               MaxLnSz=121            |
  errexit (treg,r15,nz)               |
  DT_Start     ID=DT                  | /* options=european */
  errexit (treg,r15,nz)               |
        eject                         |
* *-------------------------------------------------------------------*
* *
* *-------------------------------------------------------------------*
* ********************************************************************
* Feed 1999-12-31 00:00:00 in, then try to get it back out.
* ********************************************************************
  dt_convert   id=DT,                 |                                *
               fromdate=('1999-12-31',&dt_sortdate),                   *
               fromtime=('00:00:00',&dt_hhmmss),                       *
               totime=(pwa_posix_timedate,&dt_todclock)
  errexit (treg,r15,nz)
  pl_print_formatted id=PL,                                            *
               control=' 1999-12-31 00:00:00 = {XL8} TodClock.',       +
               source=(pwa_posix_timedate)
*
*
*
  dt_convert   id=DT,                 |                                *
               fromtime=(pwa_posix_timedate,&dt_todclock),             +
               totime=(pwa_time,&dt_hhmmssth),                         +
               todate=(pwa_date,&dt_sortdate)
  errexit (treg,r15,nz)
  pl_print_formatted id=PL,                                            *
               control=' {XL8} TodClock is {CL10} {CL11}.',            +
               source=(pwa_posix_timedate,pwa_date,pwa_time)
* ********************************************************************
* Feed 1999-12-31 00:00:00 in, then try to get it back out.
* ********************************************************************
  dt_convert   id=DT,                 |                                *
               fromdate=('1999-12-31',&dt_sortdate),                   *
               fromtime=('00:00:00',&dt_hhmmss),                       *
               totime=(pwa_posix_timedate,&dt_todclock)
  errexit (treg,r15,nz)
  pl_print_formatted id=PL,                                            *
               control=' 1999-12-31 00:00:00 = {XL8} TodClock.',       +
               source=(pwa_posix_timedate)
* ********************************************************************
* Move zeros to second fullword of todclock before converting back
* ********************************************************************
  mvc pwa_posix_timedate+4,=f'0'
*
  dt_convert   id=DT,                 |                                *
               fromtime=(pwa_posix_timedate,&dt_todclock),             +
               totime=(pwa_time,&dt_hhmmssth),                         +
               todate=(pwa_date,&dt_sortdate)
  errexit (treg,r15,nz)
  pl_print_formatted id=PL,                                            *
               control=' {XL8} TodClock is {CL10} {CL11}.',            +
               source=(pwa_posix_timedate,pwa_date,pwa_time)
* ********************************************************************
* Feed 2000-01-01 00:00:00 in, then try to get it back out.
* ********************************************************************
  dt_convert   id=DT,                 |                                *
               fromdate=('2000-01-01',&dt_sortdate),                   *
               fromtime=('00:00:00',&dt_hhmmss),                       *
               totime=(pwa_posix_timedate,&dt_todclock)
  errexit (treg,r15,nz)
  pl_print_formatted id=PL,                                            *
               control=' 2000-01-01 00:00:00 = {XL8} TodClock.',       +
               source=(pwa_posix_timedate)
*
*
*
  dt_convert   id=DT,                 |                                *
               fromtime=(pwa_posix_timedate,&dt_todclock),             +
               totime=(pwa_time,&dt_hhmmssth),                         +
               todate=(pwa_date,&dt_sortdate)
  errexit (treg,r15,nz)
  pl_print_formatted id=PL,                                            *
               control=' {XL8} TodClock is {CL10} {CL11}.',            +
               source=(pwa_posix_timedate,pwa_date,pwa_time)
*
* Feed 2000-02-29 00:00:00 in, then try to get it back out.
*
  dt_convert   id=DT,                 |                                *
               fromdate=('2000-02-29',&dt_sortdate),                   *
               fromtime=('00:00:00',&dt_hhmmss),                       *
               totime=(pwa_posix_timedate,&dt_todclock)
  errexit (treg,r15,nz)
  pl_print_formatted id=PL,                                            *
               control=' 2000-02-29 00:00:00 = {XL8} TodClock.',       +
               source=(pwa_posix_timedate)
*
*
*
  dt_convert   id=DT,                 |                                *
               fromtime=(pwa_posix_timedate,&dt_todclock),             +
               totime=(pwa_time,&dt_hhmmssth),                         +
               todate=(pwa_date,&dt_sortdate)
  errexit (treg,r15,nz)
  pl_print_formatted id=PL,                                            *
               control=' {XL8} TodClock is {CL10} {CL11}.',            +
               source=(pwa_posix_timedate,pwa_date,pwa_time)
*
* Feed 1994-08-09 00:00:00 in, then try to get it back out.
*
  dt_convert   id=DT,                 |                                *
               fromdate=('1994-08-09',&dt_sortdate),                   *
               fromtime=('00:00:00',&dt_hhmmss),                       *
               totime=(pwa_posix_timedate,&dt_todclock)
  errexit (treg,r15,nz)
  pl_print_formatted id=PL,                                            *
               control=' 1994-08-09 00:00:00 = {XL8} TodClock.',       +
               source=(pwa_posix_timedate)
*
*
*
  dt_convert   id=DT,                 |                                *
               fromtime=(pwa_posix_timedate,&dt_todclock),             +
               totime=(pwa_time,&dt_hhmmssth),                         +
               todate=(pwa_date,&dt_sortdate)
  errexit (treg,r15,nz)
  pl_print_formatted id=PL,                                            *
               control=' {XL8} TodClock is {CL10} {CL11}.',            +
               source=(pwa_posix_timedate,pwa_date,pwa_time)
*
* Feed 2000-12-31 00:00:00 in, then try to get it back out.
*
  dt_convert   id=DT,                 |                                *
               fromdate=('2000-12-31',&dt_sortdate),                   *
               fromtime=('00:00:00',&dt_hhmmss),                       *
               totime=(pwa_posix_timedate,&dt_todclock)
  errexit (treg,r15,nz)
  pl_print_formatted id=PL,                                            *
               control=' 2000-12-31 00:00:00 = {XL8} TodClock.',       +
               source=(pwa_posix_timedate)
*
*
*
  dt_convert   id=DT,                 |                                *
               fromtime=(pwa_posix_timedate,&dt_todclock),             +
               totime=(pwa_time,&dt_hhmmssth),                         +
               todate=(pwa_date,&dt_sortdate)
  errexit (treg,r15,nz)
  pl_print_formatted id=PL,                                            *
               control=' {XL8} TodClock is {CL10} {CL11}.',            +
               source=(pwa_posix_timedate,pwa_date,pwa_time)
*
* Feed 2000-03-01 00:00:00 in, then try to get it back out.
*
  dt_convert   id=DT,                 |                                *
               fromdate=('2000-03-01',&dt_sortdate),                   *
               fromtime=('00:00:00',&dt_hhmmss),                       *
               totime=(pwa_posix_timedate,&dt_todclock)
  errexit (treg,r15,nz)
  pl_print_formatted id=PL,                                            *
               control=' 2000-03-01 00:00:00 = {XL8} TodClock.',       +
               source=(pwa_posix_timedate)
*
*
*
  dt_convert   id=DT,                 |                                *
               fromtime=(pwa_posix_timedate,&dt_todclock),             +
               totime=(pwa_time,&dt_hhmmssth),                         +
               todate=(pwa_date,&dt_sortdate)
  errexit (treg,r15,nz)
  pl_print_formatted id=PL,                                            *
               control=' {XL8} TodClock is {CL10} {CL11}.',            +
               source=(pwa_posix_timedate,pwa_date,pwa_time)
*
* Feed 2000-12-31 00:00:00 in, then try to get it back out.
*
  dt_convert   id=DT,                 |                                *
               fromdate=('2000-12-31',&dt_sortdate),                   *
               fromtime=('00:00:00',&dt_hhmmss),                       *
               totime=(pwa_posix_timedate,&dt_todclock)
  errexit (treg,r15,nz)
  pl_print_formatted id=PL,                                            *
               control=' 2000-12-31 00:00:00 = {XL8} TodClock.',       +
               source=(pwa_posix_timedate)
*
*
*
  dt_convert   id=DT,                 |                                *
               fromtime=(pwa_posix_timedate,&dt_todclock),             +
               totime=(pwa_time,&dt_hhmmssth),                         +
               todate=(pwa_date,&dt_sortdate)
  errexit (treg,r15,nz)
  pl_print_formatted id=PL,                                            *
               control=' {XL8} TodClock is {CL10} {CL11}.',            +
               source=(pwa_posix_timedate,pwa_date,pwa_time)
* *-------------------------------------------------------------------*
  DT_Terminate ID=DT                  |
  PL_Terminate ID=PL                  |
* *-------------------------------------------------------------------*
 endblk                               |
 block type=errexit                   |
* ex    0,*
  es_display_debug_info_and_abend id=es
 endblk                               |
 psd
psd_tod_lower_limit dc xl8'00d4ff0e7fb74000'  Jan. 1, 1900 @00:00:01.00
psd_tod_upper_limit dc xl8'00e4ff0e7fb73e10'  Sep 17, 2042 @23:53:47.37
 endpsd
     eject                            |
     pwa   ,                          |
pwa_posix_timedate ds   f
pwa_tod           ds   d              |
pwa_es_date       ds   f              |
pwa_es_time       ds   f              |
pwa_esv_address   ds   f              |
pwa_es_epa        ds   f              |
pwa_es_token      ds   f              |
pwa_format        ds   f              |
pwa_answer        ds   cl32           |
pwa_date          ds   cl32           |
pwa_date2         ds   cl16           |
pwa_date3         ds   cl16           |
pwa_date4         ds   cl16           |
pwa_date5         ds   cl16           |
pwa_time          ds   cl16           |
pwa_time2         ds   cl16           |
pwa_time3         ds   cl16           |
pwa_time4         ds   cl16           |
pwa_time5         ds   cl16           |
pwa_text_format   ds   cl16           |
pwa_interval      ds   cl20           |
     endpwa ,                         |
     end   ,                          |
//C.SYSLIB DD
//         DD
//         DD DSN=SYSTEMS.SRV.DONTEDIT,DISP=SHR
//S1 EXEC PGM=SRVDTXR3
//STEPLIB DD DISP=SHR,DSN=SYSTEMS.SRV.LOAD
//SYSPRINT DD SYSOUT=A
//SYSUDUMP DD SYSOUT=A
