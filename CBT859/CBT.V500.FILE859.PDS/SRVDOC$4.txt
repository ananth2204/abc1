.*--------------------------------------------------------------------*
.*                                                                    *
.*                                                                    *
:h0 id=part1.Service Processors User's Guide
.*                                                                    *
.*                                                                    *
.*--------------------------------------------------------------------*
.**********************************************************************
.*                                                                    *
.*                    Chapter. Introduction                           *
.*                                                                    *
.**********************************************************************
:h1.Introduction to Service Processors
:p.
You are driving home from work when suddenly your car's engine, knowing
that your warranty expired just yesterday, starts sputtering and spews
out lots of black smoke.  Then it dies completely and you have to call
for a wrecker to take it to the shop for repairs.  When you finally make
it home, its too late to cook anything so you order a pizza and have it
delivered.  After eating, you load up the dishwasher and turn it on only
to find out that a pipe has burst.  Water floods your kitchen.  You turn
the dishwasher off and, grumbling to yourself while cleaning up the
mess, resolve to call a plumber in the morning.  What a lousy day!
:p.
What does all of this have to do with service processors?  Well, in real
life you call on various companies or service industries to do things
for you.  Towing service was provided by the wrecker, car repairs by the
shop, cooking and delivery by the pizza restaurant, water and
electricity to operate your dishwasher were provided by utility
companies, and plumbing repairs by the plumber.  Many of the services
you call on are things you might be able to do for yourself, but its
easier and often more efficient to have it done by someone else.
:p.
Service processors perform analagous services for programs.  Services
are available for extracting information about a program's execution
environment, efficiently managing storage, manipulating textual data,
reading from arbitrary files, and managing symbols.  A service processor
groups related services together into a single "company" that programs
can call upon without having to worry about the implementation details.
This can dramatically reduce the amount of code that must be written to
develop a new program.
.*---------------------------------------------------------------------*
:h2.What Are Service Processors?
:p.
Service processors are an integrated system of subroutines that serve as
building-blocks for program construction.  Each service processor is a
subroutine that provides one or more related services, usually for
managing a specific type of software resource such as a file or a symbol
table.  Service processors take advantage of the building-blocks offered
by other service processors, building on their services wherever
possible.  The services within a processor share internal code and
working storage, as well as data and other resources.  They are able to
retain information and resources across invocations, providing them with
the ability to keep track of things on a program's behalf.  Additional
features of service processors include a built-in mechanism for tracking
debugging information and a method of supporting multiple execution
environments.  Some of the service processors available include:
:ul.
:i1.Date/Time
:li.Date/Time: provides services for obtaining the current date and time
and for manipulating date/time values.  The Date/Time service processor
supports numerous formats and may be used to convert values from one
format to another.  Services are also available for subtracting or
adding a duration to a given date/time value, and for calculating the
duration between two date/time values.
:i1.execution environment
:i1.Environment Support
:li.Environment Support: acts as an interface between the calling
program and its execution environment (an operating system, online
system, high-level language, etc), and provides services for extracting
information such as the time and date, userid and group name, and
whether a program is executing in the forground or background.
:i1.Memory Manager
:i1.heap
:li.Memory Manager: provides an efficient storage management scheme for
programs that need to frequently allocate small items of storage and
then free them all at once.  Storage can be set up in separate
:hp1.heaps:ehp1. and entire storage heaps can be released with a single
call.  Items of storage can, of course, be individually released as
well.
:i1.String Handler
:li.String Handler: provides services for manipulating and formatting
string data, and services for converting various types of data to and
from character format.
:i1.Symbol Manager
:li.Symbol Manager: provides services for storing symbols with attached
information and retrieving them by name at a later time. The information
attached to a symbol is controlled entirely by the calling program.
:i1.File Handler
:li.File Handlers: provide services for reading from various types of
files without concern for the actual record layout or access method
required.
:i1.PrintLine
:li.PrintLine: this service processor provides an application program
with a good set of basic report-writing services.  It can be used to
set up headers and footers on the printed page, keep track of the
current page number and perform automatic ejects.
:eul.
:p.
For a more detailed look at the services available, see :hdref
refid=spref page=no.: there is a separate chapter for each service
processor that describes its purpose and details the services it
provides.  Also, scanning the table of contents is a quick way to get a
feel for what services are available.
.*---------------------------------------------------------------------*
:h2.How Programs use Service Processors
:p.
:i1 id=funcd.function code
Programs use service processors by calling them with a function code
indicating the service to be performed (the terms function and service
are used interchangeably in this manual).  For example, a program might
call the Environment Support service processor with the
:#x.ES_GET_TIME:e#x. function code to obtain the current time and date.
The program would, of course, provide parameters in which Environment
Support would return the requested information.  Each function of a
service processor has its own set of function-specific parameters.
:p.
:i1.session identifier
:i1.session
:i1.token
:i2 refid=funcd.START
:ih1.resource
:i2.software
Before a program can use any of a processor's services, it must
establish a session with the service processor by calling it with the
:#x.START:e#x. function code. The :hp2.start:ehp2. function establishes
a session between the calling program and the service processor, and
returns a unique session identifier to the caller.  This session
identifier, or :hp1.token:ehp1., usually represents a software resource
being managed by the newly established session, such as an open file or
a new symbol table.
:p.
The token returned by :hp2.start:ehp2. is used on future calls to the
service processor, along with a function code, to identify the session
(or resource) for which a service is being requested.  A program can
start as many sessions as desired, and most service processors provide
optional parameters that tailor the new session to the caller's needs.
:i2 refid=funcd.TERMINATE
A complimentary function code, :#x.TERMINATE:e#x., ends a service
processor session and resets the session identifier token to a null
value.
.*---------------------------------------------------------------------*
:h2.The Service Processor Execution Environment
:p.
:i1.execution environment
:i1.Environment Support
Although service processors reside in separate subroutines, they are
interdependent to varying degrees.  For example, the Symbol Manager uses
the Memory Manager to deal with the storage in which symbols are kept
and the File Handler uses the String Handler to format its messages.
One service processor, Environment Support, is used by all service
processors for such basic services as allocating working storage,
managing debugging information, and gaining access to other service
processors.
:p.
:i1.Environment Support Vector
:i2 refid=esv.address
When Environment Support is started (invoked with the :#x.START:e#x.
function code), it creates a data area called the Environment Support
Vector that represents an execution environment for service processors.
Environment Support returns the address of the :#x.ESV:e#x. to the
calling program, which is then responsible for passing it to other
service processors as they are started.  Thus, Environment Support must
be the first service processor started.  Once the address of the
:#x.ESV:e#x. has been passed to a service processor it will be retained,
so there is no need to provide it with subsequent function calls.
.**********************************************************************
.*                                                                    *
.*                                                                    *
.*                  Chapter. Using Service Processors                 *
.*                                                                    *
.*                                                                    *
.**********************************************************************
:h1.Using Service Processors
:p.
This chapter describes the general concepts and procedures needed to
make use of service processors.  The focus in this chapter (as well as
in the rest of the manual) is on assembly language programming with the
:hp3.Clemson University Structured Macros:ehp3., and all examples are
shown in assembler.  However, service processors can be used from any
language that supports standard System/370 linkage conventions and they
have the potential of running within the execution environment of
high-level languages such as PL/I.
:p.
While service processors are easy to use, some setting up is required
before a program can begin invoking their functions.  As mentioned in
the introduction, each service processor is a subroutine. The subroutine,
which must be invoked in 31-bit addressing mode, must be loaded into
storage somehow and invoked with the :#x.START:e#x. function code
before any other functions can be used.
:i1.execution environment
Also, all service processors depend on the execution environment
established by Environment Support, which must be loaded and started
before any other service processors.
.*---------------------------------------------------------------------*
:h2.Copy Members
:p.
:i1.copy member
Each service processor has a :hp1.copy member:ehp1. containing macros
for invoking its services and symbols that name its load module,
function codes, and return codes.  Assembler programs should have a
:#x.COPY:e#x. statement for each service processor they use, and it
should appear as close to the beginning of the program as possible.  For
example, the following statements would be used to obtain the symbolic
definitions and macros for the Environment Support and String Handler
service processors:
:fig.
:#x.
COPY  SRVESMAC    | Copy Environment Support's symbols &amp. macros.
COPY  SRVSTMAC    | Copy the String Handler's symbols &amp. macros.
:e#x.
:figcap.Obtaining Service Processor Symbols and Macros
:efig.
:p.
After a service processor's copy member has been processed, all
of its symbols and macros are available for use.  Look in the
appropriate chapters of :hdref refid=spref page=no. for complete
descriptions of service processor copy members and how to use them.
Programs written in a language other than assembler should contain
equivalent symbols or named constants for the function codes and return
codes they use.
.*---------------------------------------------------------------------*
:h2.Loading Service Processors
:p.
As a general rule, each service processor resides in its own load
module, although there are exceptions that will be described later.  The
only service processor that must be loaded directly by the application
program is Environment Support.  How this is done is dependent on the
programming language used and the environment in which it is running.
:i1.ES_LOAD_MODULE
Once Environment Support has been loaded and started, other service
processors may be loaded through the :#x.ES_LOAD_MODULE:e#x. function.
For example, an assembler program running under MVS/XA might issue the
following sequence of instructions to load Environment Support and two
other service processors.
:fig id=losps.
.sp;:#x.
LOAD  EPLOC==&amp.MVS_ENVIRONMENT_SUPPORT   | Load Environment Support.
ST    R0,ES_EPA                         | Save its EPA.
CALLX ES_EPA,(ES_TKN,&amp.ES_START,ES_ESVA) | Start Environment Support.
CALLX ES_EPA,(ES_TKN,&amp.ES_LOAD_MODULE,&amp.STRING_HANDLER,ST_EPA)
CALLX ES_EPA,(ES_TKN,&amp.ES_LOAD_MODULE,&amp.MEMORY_MANAGER,MM_EPA)
:e#x.
:figcap.Loading service processors
:efig.
.*---------------------------------------------------------------------*
:h2.Invoking Services
:p.
:i1.function code
:i1.token
Service processors are called using standard linkage conventions for
programs running in 31-bit addressing mode (see :hdref refid=linkage.).
The first two parameters of the subroutine call are always the same: a
:#x.:hp2.token:ehp2.:e#x. followed by a :#x.:hp2.function
code:ehp2.:e#x.. The minimum call to invoke one of a service processor's
functions looks like the following for an assembler program written with
the Structured Macros:
:xmp.
CALLX SERVICE_PROCESSOR,(TOKEN,FUNCTION_CODE)
:exmp.
:i1.function code
:i2 refid=funcd.START
:i2 refid=funcd.TERMINATE
:i1.token
The :#x.:hp2.function code:ehp2.:e#x. parameter is a four byte signed
binary integer that selects the desired function.  Two function codes,
:#x.START:e#x. and :#x.TERMINATE:e#x., are supported by all service
processors.  Other function codes are dependent on the particular
service processor.  The :#x.:hp2.token:ehp2.:e#x. parameter is a four
byte value whose contents are set by the service processor itself when
the
:#x.START:e#x. function is invoked. Additional parameters may be
required or optional, depending on the service being requested.
.*---------------------------------------------------------------------*
:h3.Symbol Definitions
:p.
:i2 refid=funcd.symbols
The function code symbols provided by a service processor's copy member
should always be used in place of the actual integer values they
represent.  For example, the instructions in :figref refid=ctusps
page=no. load and start three service processors and invoke several of
their functions.
:fig id=ctusps.
.sp;:#x.
LOAD  EPLOC==C&amp.MVS_ENVIRONMENT_SUPPORT
ST    R0,ES_EPA
CALLX ES_EPA,(ES_TKN,&amp.ES_START,ES_ESVA)
CALLX ES_EPA,(ES_TKN,&amp.ES_LOAD_MODULE,&amp.STRING_HANDLER,ST_EPA)
CALLX ST_EPA,(ST_TKN,&amp.ST_START,ES_ESVA)
CALLX ES_EPA,(ES_TKN,&amp.ES_LOAD_MODULE,&amp.MEMORY_MANAGER,MM_EPA)
CALLX MM_EPA,(MM_TKN,&amp.MM_START,ES_ESVA)
CALLX MM_EPA,(MM_TKN,&amp.MM_OBTAIN_STORAGE,80,MSG_BUFFER)
CALLX ES_EPA,(ES_TKN,&amp.ES_GET_FORMATTED_TIME,TIME,,DATE)
L     R2,MSG_BUFFER
CALLX ST_EPA,(ST_TKN,&amp.ST_FORMAT,(R2),80,MSG_LENGTH,&cont.
                       +
           'Execution beginning at %CL5 on %CL8.',36,TIME,DATE)
CALLX ES_EPA,(ES_TKN,&amp.ES_DISPLAY_MESSAGE,(R2),MSG_LENGTH)
:e#x.
:figcap.Code that uses service processor symbols
:efig.
Because symbols are used for specifying function codes, it is easy to
determine what functions are being invoked.  After the instructions in
:figref refid=ctusps page=no. have been executed, a message like the
one below will be written to the user's terminal or to the job message
log:
:xmp.
Execution beginning at 14:10 on 06/01/89.
:exmp.
:p.
Use of service processor symbols makes for code that is much easier to
understand than the following instruction sequence, which produces
identical code to that in :figref refid=ctusps page=no. but uses the
actual integer values instead of their symbolic names:
:fig id=ctnsps.
.sp;:#x.
LOAD  EPLOC==C'SRVESMVS'
ST    R0,ES_EPA
CALLX ES_EPA,(ES_TKN,1,ES_ESVA)
CALLX ES_EPA,(ES_TKN,5,'SRVSTR',ST_EPA)
CALLX ST_EPA,(ST_TKN,1,ES_ESVA)
CALLX ES_EPA,(ES_TKN,5,'SRVMEM',MM_EPA)
CALLX MM_EPA,(MM_TKN,1,ES_ESVA)
CALLX MM_EPA,(MM_TKN,3,80,MSG_BUFFER)
CALLX ES_EPA,(ES_TKN,24,TIME,JULIAN,,DATE)
L     R2,MSG_BUFFER
CALLX ST_EPA,(ST_TKN,3,(R2),80,MSG_LENGTH,&cont.
                                +
         'Execution beginning at %CL5 on %CL8.',36,TIME,DATE)
CALLX ES_EPA,(ES_TKN,7,(R2),MSG_LENGTH)
:e#x.
:figcap.Code that does not use service processor symbols
:efig.
.*---------------------------------------------------------------------*
:h3.Function Macros and Service Processor Identifiers
:p.
In programs that make heavy use of service processor functions, coding
subroutine calls can be a chore.  After all, the first few items in the
subroutine call are always the same: an entry point address, a token
value, and a function code.  Furthermore, if a large number of service
processors or service processor sessions are needed, creating labels and
storage for the entry point addresses and token values can become
tedious (e.g.&rbl.:#x.ES_EPA:e#x., :#x.ES_TKN:e#x., etc).
:p.
The macros defined within each service processor's copy member can do
most of this automatically.  There is a separate macro for invoking each
service processor function.  The name of each function invocation macro
is the same as that of the function it invokes, and all values are
specified using keyword parameters instead of the positional parameters
used in :#x.CALLX:e#x. statements.
:p.
In addition to the function invocation macros, each service processor
has a macro for establishing :hp1.service processor identifiers:ehp1..
:i1.service processor identifier
A service processor identifier is a collection of parameters that will
be automatically used whenever the identifier is referenced.  For
example, the :#x.ES_ID:e#x. instruction in
.*
.*  If this (or any other) figure reference is the last thing on a
.*  line, the line after it will be used as residual text and no
.*  blank will follow the reference:  "...in Figure 5creates..."
.*
:figref refid=espd page=no. creates an Environment Support service
processor identifier, :#x.ENV_SUP:e#x., and associates it with four
different values.  Once it has been created, specifying
:#x.ID=ENV_SUP:e#x. on any Environment Support macro is equivalent to
specifying all of those values.
:fig id=espd.
.sp;:#x.
ES_ID ID=ENV_SUP,SPEPNAME=&amp.MVS_ENVIRONMENT_SUPPORT,&cont.
                       +
             SPEPA=ES_EPA,SPTOKEN=ES_TKN,ESVA=ES_ESVA
:e#x.
:figcap.Establishing service processor defaults
:efig.
Any number of service processor identifiers can be created: they are
simply used for grouping several different parameters under a single
name. Each service processor has its own macro for creating identifiers,
but they are all similar and have at least the following keywords:
:#x.SPEPNAME:e#x., :#x.SPEPA:e#x., :#x.SPTOKEN:e#x., and :#x.ESVA:e#x..
Additional keywords may be specified for some service processor
identifiers.
:p.
All keywords other than :#x.ID=:e#x. are optional when creating any
service processor identifier and most will be set to default values if
they are omitted.  In particular, if the entry point address and token
value keywords are omitted, storage will be reserved for them in the
:i1.Program Work Area
:i2 refid=esv.address
Structured Macros Program Work Area (:#x.PWA:e#x.). The same is true
for the :#x.ESV:e#x. address, except that the :#x.ES_ID:e#x. macro
will generate the storage, and all other service processor identifiers
will default to the existing value.
:p.
:i1.Structuired Macros
Any storage field generated in the :#x.PWA:e#x. by a service processor
macro will be named using Structured Macros global variable
:#x.&amp.PWA.:e#x. followed by the service processor identifier, an
underscore, and the keyword to which the value applies.  For example, if
:#x.SPTOKEN:e#x. had not been specified in :figref refid=espd page=no.,
the instruction
:xmp.
&amp.PWA.ENV_SUP_SPTOKEN  DS  F
:exmp.
would have been generated for it in the :#x.PWA:e#x..
:p.
The code in :figref refid=ctuspim page=no. performs the same function as
that in :figref refid=ctusps page=no., but uses service processor macro
instructions in place of the :#x.LOAD:e#x. and :#x.CALLX:e#x.
instructions.
:fig id=ctuspim.
.sp;:#x.
ES_ID                 ID=ES,SPEPNAME=&amp.MVS_ENVIRONMENT_SUPPORT
ST_ID                 ID=ST,SPEPNAME=&amp.STRING_HANDLER
MM_ID                 ID=MM,SPEPNAME=&amp.MEMORY_MANAGER
ES_MVS_LOAD           ID=ES              | Load Env. Support.
ES_START              ID=ES              | Start Env. Support.
ES_LOAD_MODULE        ID=ES,SPID=ST      | Load String Handler.
ES_LOAD_MODULE        ID=ES,SPID=MM      | Load Memory Manager.
ST_START              ID=ST              | Start String Handler.
MM_START              ID=MM              | Start Memory Manager.
MM_OBTAIN_STORAGE     ID=MM,SIZE=80,ADDRESS=MSG_BUFFER
ES_GET_FORMATTED_TIME ID=ES,TIME=TIME,GREGORIAN=DATE
ST_FORMAT    ID=ST,CONTROL='Execution beginning at %CL5 on %CL8.',&cont.
        +
             SOURCE=(TIME,DATE),TARGET=(*MSG_BUFFER,80),&cont.
RESULTLEN=MSG_LENGTH
ES_DISPLAY_MESSAGE    ID=ES,MESSAGE=(*MSG_BUFFER,MSG_LENGTH)
:e#x.
:figcap.Code that uses service processor interface macros
:efig.
:p.
The first instruction in :figref refid=ctuspim page=no. establishes
default values for Environment Support and associates them with service
processor identifier :#x.ES:e#x.. While Environment Support's entry
point name was explicitly specified, its entry point address, token
value, and :#x.ESV:e#x. address were not: :#x.ES_ID:e#x.
automatically reserves storage for them in the :#x.PWA:e#x.. The next
two instructions do the same thing for the String Handler and the Memory
Manager, but use the previouly established value for :#x.ESVA:e#x.
instead of generating new fields.  After these three instructions have
been seen by the assembler, the following fields will have been created
in the :#x.PWA:e#x. and named as shown:
:fig id=gpwafs.
.sp;:#x.
&amp.PWA.ES_SPEPA   DS A  &cont.
| ID=ES: Environment Support's Entry Point Address.
&amp.PWA.ES_SPTOKEN DS F  &cont.
| ID=ES: Environment Support's Token.
&amp.PWA.ES_ESVA    DS F  &cont.
| ID=ES: Environment Support's ESV Address.
&amp.PWA.ST_SPEPA   DS A  &cont.
| ID=ST: String Handler's Entry Point Address.
&amp.PWA.ST_SPTOKEN DS F  &cont.
| ID=ST: String Handler's Token.
&amp.PWA.MM_SPEPA   DS A  &cont.
| ID=MM: Memory Manager's Entry Point Address.
&amp.PWA.MM_SPTOKEN DS F  &cont.
| ID=MM: Memory Manager's Token.
:e#x.
:figcap.Generated Program Work Area (PWA) fields
:efig.
The remaining instructions in :figref refid=ctuspim page=no. produce the
same code as their counterparts in :figref refid=ctusps page=no.,
automatically obtaining the correct parameters and values through
service processor identifiers.
.*---------------------------------------------------------------------*
:h2.Checking Return Codes
:i2 refid=rc.checking
:p.
On return from any service processor function, register 15 will contain
an integer value indicating the results of the function's operation.
This value is the function's return code.  Each service processor has
its own set of return codes, but a value of zero (:#x.:hp2.0:ehp2.:e#x.)
always means a function call has completed successfully.
:p.
When most service processor functions cannot complete successfully, they
save information in Environment Support's debugging information area,
set the return code, and return to the calling program.  The return code
from these functions should always be checked to insure successful
:i1.abend
operation.  However, some functions are designed to succeed or abend
the program, so there is no need to examine their return codes.  Refer
to the description of a particular function for details on how it
handles abnormal conditions.
:p.
Checking the return code after a service processor function call is
easy.  Each service processor :#x.COPY:e#x. member defines symbols for
all of its return codes.  These symbols may be used in open code while
checking return codes, as in the following :#x.IF:e#x. statement:
:xmp.
IF (CH,R15,EQ,=H'&amp.MM_STORAGE_NOT_AVAILABLE')   | If out of storage.
:exmp.
:p.
In addition to the return code symbols, user-conditions are defined (via
the Structured Macros :#x.DEFUCOND:e#x. macro) for checking them. To use
one of these conditions, simply prefix the condition code's name with a
percent sign.  This statement is identical to the one above and happens
to generate the same assembler code:
:xmp.
IF (%MM_STORAGE_NOT_AVAILABLE)                 | If out of storage.
:exmp.
:p.
:i1.MM_OBTAIN_STORAGE
:i1.Memory Manager
:figref refid=csprcs page=no. shows a typical sequence of instructions
for checking a function's return code.  In this case, the Memory
Manager's :#x.MM_OBTAIN_STORAGE:e#x. function is being invoked. While
no attempt is made to recover from errors, the out-of-storage return
code is handled as a special case. All other non-successful return codes
from this function indicate more serious problems and are handled by
displaying Environment Support's debugging information area and then
abending the program with a dump.  The return codes from Environment
Support's display services are not checked because they will either
succeed or abend the program.
:fig id=csprcs.
.sp;:#x.
MM_OBTAIN_STORAGE ID=MM,SIZE=133,ADDRESS=LINE  | Obtain 133 bytes stg.
IF (%MM_STORAGE_NOT_AVAILABLE)                 | If out of storage.
  ES_DISPLAY_MESSAGE ID=ES,MESSAGE='Not enough storage to operate.'
  ERREXIT  CODE=8                              |   Exit with RC=8.
ELSEIF (NOT,(%MM_SUCCESS))                     | ElseIf other &cont.
failure.
  ES_DISPLAY_DEBUG_INFO_AND_ABEND ID=ES        |   Abend with a &cont.
dump.
ENDIF                                          | EndIf.
:e#x.
:figcap.Checking service processor return codes
:efig.
.*---------------------------------------------------------------------*
:h2.Multiple Sessions With the Same Processor
.*---------------------------------------------------------------------*
:h2.Cascading Service Processors of the Same Type
.*---------------------------------------------------------------------*
:h2.Putting it Together
:p.
Now that the basic features and requirements of service processors have
been covered, a complete program can be written.  This program is a TSO
command processor written in assembler using the Structured Macros and
the service processor macros.  It uses Environment Support and the File
Handler to read in and display every line in a sequential data set or
member of a partitioned data set, and is invoked with the following
syntax:
.sp
:#x.DISPLAY:e#x. :hp1.file-specification:ehp1.
:p.
On entry to the program, register 1 must point to the TSO Command
Processor Parameter List, or :#x.CPPL:e#x.. The first word in the
:#x.CPPL:e#x. is a pointer to the command buffer containing the
command entered by the user.  The command buffer looks like the
following:
:fig.
.sp;.in 0.15i
:hp2.Command Buffer:ehp2.
.bx new thick thick 0.15i 0.85i 1.55i 4.85i
.ti ~ 05;.tp 0.22i 0.92i 1.62i
~:#x.length~offset~command-text:e#x.
.bx off
~&uar.~&uar.~&uar.
.br
.ti ~ 05;.tp 0.22i center 0.92i center 1.62i center
~+0~+2~+4
:figcap.TSO command buffer layout
:efig.
:p.
The first field, :#x.length:e#x., is a signed halfword equal to the
length of the entire command buffer, including the four-byte prefix.
The second field, :#x.offset:e#x., is a signed halfword equal to the
offset from the beginning of :#x.command-text:e#x. to the current
position (thus, an offset of :#x.0000:e#x. would indicate the first
character in :#x.command-text:e#x.). The last field,
:#x.command-text:e#x., is the text of the command as entered by the
user.
:p.
Before invoking DISPLAY, TSO will set the value of :#x.offset:e#x. to
indicate the first non-blank character after the command name itself
(i.e. :#x.:hp2.DISPLAY:ehp2.:e#x.). For example, if a user entered the
command :#x.:hp2.display source(notes):ehp2.:e#x., the command buffer
would contain the following values, with :#x.length:e#x. and
:#x.offset:e#x. shown in decimal:
:fig.
.sp;.in 0.15i
:hp2.Command Buffer:ehp2.
.bx new thick thick 0.15i 0.85i 1.55i 3.40i
.ti ~ 05;.tp 0.78i right 1.48i right 1.62i left
:#x.~0025~0008~display source(notes):e#x.
.bx off
:figcap.Example command buffer contents
:efig.
:p.
The listing below was taken directly from a working copy of the DISPLAY
program, and is well commented.  To understand the code of this program
in detail, refer to the reference chapters for the Environment Support
and File Handler service processors.
:fig id=display width=column concat=no.
:figcap.The DISPLAY program
.in +2
:#x.
:figseg fit=34.
*---------------------------------------------------------------------*
*
*  DISPLAY FileSpecification
*
*  A TSO command to display the contents of the specified sequential
*  data set or PDS member on the user's terminal.  If the file cannot
*  be opened for some reason, or if an error occurs while it is reading
*  a line, the program will issue an error message and terminate
*  normally.
*
*  Inputs:  On entry to this program, Register 1 (R1) must point to the
*           TSO Command Processor Parameter List (CPPL), which is
*           mapped by macro IKJCPPL in SYS1.MACLIB.
*
*  Outputs: Normally, each line in the file named by FileSpecification
*           will be written to the user's terminal. If an error occurs,
*           a message will be written to the terminal.  Some messages
*           are created by this program, but most are obtained from the
*           File Handler.
*
*  Return Codes:
*    0    - The specified file was successfully displayed.
*    4    - The file was displayed, but warning(s) were issued.
*    8    - The file was not displayed.  An error message was issued.
*   12    - A severe error occurred.  A message and dump were issued.
:i1.abend
*   Abend - A critical error occurred that probably indicates an
*           internal programming error.  A message, mini-dump, and a
*           full storage dump will be issued.
*
*---------------------------------------------------------------------*
 BLOCK TYPE=PROGRAM,NAME=DISPLAY,OPTIONS=(*PWA),R1SAVE=R9,AMODE=31,    +
               RMODE=ANY
   USING  CPPL,R9          | Establish addressability on the CPPL.
   MVC    PWA_RC,=H'0'     | Initialize Display's return code.
:figseg fit=7.
*---------------------------------------------------------------------*
*  Get symbols &amp. macros, and establish deault parameter values.
*---------------------------------------------------------------------*
   COPY   SRVESMAC         | Get Environment Support symbols & macros.
   COPY   SRVFIMAC         | Get File Handler symbols & macros.
   ES_ID  ID=ES,SPEPNAME=&MVS_ENVIRONMENT_SUPPORT   Set defaults.
   FI_ID  ID=FI,SPEPNAME=&FI_OS_FILE_HANDLER        Set defaults.
:figseg fit=5.
*---------------------------------------------------------------------*
*  Load and start Environment Support. Both functions will succeed or
*  abend trying, so their return codes are not checked.
*---------------------------------------------------------------------*
   ES_MVS_LOAD    ID=ES            | Load Environment Support.
   ES_START       ID=ES            | Start Environment Support.
:figseg fit=9.
*---------------------------------------------------------------------*
*  Attempt to load the File Handler.  Issue a message on failure.
*---------------------------------------------------------------------*
   ES_LOAD_MODULE ID=ES,SPID=FI    | Load File Handler.
   IF NOT,(%ES_SUCCESS)            | If unable to load File Handler.
     ES_DISPLAY_MESSAGE ID=ES,     |   Display an error message.       +
               MESSAGE='Unable to load File Handler.'
     ERREXIT CODE=12               |   Quit with a return code.
   ENDIF                           | EndIf.
:figseg fit=29.
*---------------------------------------------------------------------*
*  Get the FileSpecification's length and address from the command
*  buffer, and attempt to open it for sequential input.
*---------------------------------------------------------------------*
   L        R2,CPPLCBUF            | R2 := address of command buffer.
   LH       R3,2(,R2)              | R3 := offset after command name.
   LA       R3,4(,R3)              | R3 := offset from R2 to filename.
   LH       R0,0(,R2)              | R0 := total buffer length.
   SR       R0,R3                  | R0 := filename's length.
   ST       R0,PWA_LEN             | Save for parmlist.
*                                  |
   FI_START ID=FI,FILE=(0(R3,R2),PWA_LEN),ACCESS=&FI_INPUT_SEQUENTIAL
*                                  |
   IF NOT,(%FI_SUCCESS)            | If file could not be opened.
     IF (%FI_CRITICAL)             |   For CRITICAL errors...
       ES_DISPLAY_DEBUG_INFO_AND_ABEND ID=ES  Abend immediately.
     ELSEIF (%FI_SEVERE)           |   For severe errors...
       ES_DISPLAY_DEBUG_INFO ID=ES |     Print debugging info.
       ERREXIT CODE=12             |     Shut-down and exit.
     ENDIF                         |   EndIf.
*                                  |   For all other errors...
     FI_GET_INFO ID=FI,MSG=PWA_MSG,MSGLEN=PWA_MSG_LEN  Get the msg.
     IF (%FI_SUCCESS)              |   If success: display it.
       ES_DISPLAY_MESSAGE ID=ES,MESSAGE=(PWA_MSG,PWA_MSG_LEN)
       ERREXIT CODE=8              |     Shut-down and exit.
     ELSE                          |   Else.
       ES_DISPLAY_DEBUG_INFO_AND_ABEND ID=ES  Abend immediately.
     ENDIF                         |   EndIf.
   ENDIF                           | EndIf.
:figseg fit=40.
*---------------------------------------------------------------------*
*  Read every line in the file and display it on the terminal.
*---------------------------------------------------------------------*
   LOOP UNTIL                      | Loop over all input lines.
     FI_READLINE ID=FI,LINE=PWA_LINE,RESULTLEN=PWA_LEN  Read a line.
     LEAVE       LOOP=*,(%FI_END_OF_FILE)               Leave if done.
*                                  |
     IF NOT,(%FI_SUCCESS)          |   If something went wrong.
       IF (%FI_CRITICAL)           |     For CRITICAL errors...
         ES_DISPLAY_DEBUG_INFO_AND_ABEND ID=ES  Abend immediately.
       ELSEIF (%FI_SEVERE)         |     For severe errors...
         ES_DISPLAY_DEBUG_INFO ID=ES       Print debugging info.
         ERREXIT CODE=12           |       Shut-down and exit.
       ENDIF                       |     EndIf.
*                                  |
       LR        R2,R15            |     Remember READLINE's return-code.
       FI_GET_INFO ID=FI,MSG=PWA_MSG,MSGLEN=PWA_MSG_LEN Obtain the msg.
       IF NOT,(%FI_SUCCESS)        |     If no message was obtained.
         ES_DISPLAY_DEBUG_INFO_AND_ABEND ID=ES  Abend immediately.
       ELSE                        |     Else, display the message.
         ES_DISPLAY_MESSAGE ID=ES,MESSAGE=(PWA_MSG,PWA_MSG_LEN)
         ERREXIT (CH,R2,NE,=H'&amp.FI_WARNING'),CODE=8 &cont.
Shut-down and exit.
         MVC     PWA_RC,=H'4'      |       Set return-code to warning.
       ENDIF                       |     EndIf.
     ENDIF                         |   EndIf.
*                                  |
     ES_DISPLAY_MESSAGE ID=ES,     |   Display the line just read in.  +
               MESSAGE=(PWA_LINE,PWA_LEN)
   ENDLOOP UNTIL,LEAVE             | EndLoop.
*---------------------------------------------------------------------*
*  Close the file, terminate and unload service processors, and quit.
*---------------------------------------------------------------------*
   FI_TERMINATE     ID=FI          | Close and de-allocate file.
   ES_UNLOAD_MODULE ID=ES,SPID=FI  | Unload file handler.
   ES_TERMINATE     ID=ES          | Shut down Environment Support.
   ES_MVS_UNLOAD    ID=ES          | Unload Environment Support.
   LH               R15,PWA_RC     | Set R15 to final return-code.
 ENDBLK BLOCK=DISPLAY,RC=(R15)     | Exit with a succesful return code.


:figseg fit=14.
*---------------------------------------------------------------------*
*  Error Exit - On entry R14 will equal the integer value supplied on
*  the CODE= keyword of the ERREXIT macro.  This value will be used as
*  Display's return code.
*---------------------------------------------------------------------*
 BLOCK TYPE=ERREXIT                | Exit was entered with CODE=rc.
   LR               R2,R14         |   Set R2 to the value on CODE=.
   FI_TERMINATE     ID=FI          |   Close and de-allocate file.
   ES_UNLOAD_MODULE ID=ES,SPID=FI  |   Unload file handler.
   ES_TERMINATE     ID=ES          |   Shut down Environment Support.
   ES_MVS_UNLOAD    ID=ES          |   Unload Environment Support.
 ENDBLK RC=(R2)                    | Set R15 to return-code and exit.


:figseg fit=12.
*---------------------------------------------------------------------*
*  Program Work Area.
*---------------------------------------------------------------------*
              PWA    ,             | Program Work Area.
PWA_RC        DS     H             |   Display's return code.
PWA_LEN       DS     F             |   Used for filename &amp. &cont.
line length.
PWA_LINE      DS     CL80          |   Current input line.
PWA_MSG_LEN   DS     F             |   Length of message text.
PWA_MSG       DS     CL256         |   Warning or error message.
              ENDPWA ,             | End of PWA.
              IKJCPPL              | Command Processor Parameter List.
              END
:e#x.
.in -2
:efig.
.**********************************************************************
.**********************************************************************
.*                                                                    *
.*                                                                    *
.*       Chapter. Service Processors And The Structured Macros        *
.*                                                                    *
.*                                                                    *
.**********************************************************************
:h1.Service Processors And The Structured Macros
.**********************************************************************
(intro paragraphs)
.**********************************************************************
:h2.Useful Structured Macro Constructs
.**********************************************************************
:h2.Service Processor Support
(intro)
:h3.BLOCK Macro
:h3.ERREXIT Macro
:h3.User-Defined Conditions
