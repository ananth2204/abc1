.*
.* The GML text below is a skeleton reference chapter for one service
.* processor.  The suggested approach for writing a new chapter is to
.*    1) create a new member called SRVDOCxx, where xx is the two
.*       letter service processor identification code.
.*    2) copy this member into it.
.*    3) Change all occurrances of the skeleton names below to the
.*       appropriate values.
.*    4) format a copy of the manual with the new chapter included.
.*    5) use the formatted copy of the new chapter to decided what
.*       changes/additions/deletions need to be made.
.*
.*   <srvproc_name>  - The name used when referring to the service
.*                     processor in general. e.g. "String Handler",
.*                     "Environment Support", "Memory Manager", etc.
.*   <srvload_sym>   - The symbolic name used for the load module, such
.*                     as STRING_HANDLER, MVS_ENVIRONMENT_SUPPORT, etc.
.*   <srvload_name>  - The actual name of the load module identified by
.*                     <srvload_sym>, such as SRVSTR or SRVMVSES.       .
.*   <>              - The two-letter code assigned to the service
.*                     processor, such as ES, ST, MM, SY, or FI.
.*   <func_name>     - The name used for specific function's reference
.*                     section.  This name would be something like
.*                     ES_LOAD_MODULE, ST_FORMAT, etc.
.*   idid            - The header id used on the section for the xx_ID
.*                     macro.
.*
.*
.* Lines that begin with .*===> describe what should appear in the
.*   text at that point or provide information on how something should
.*   be formatted.
.*
.**********************************************************************
.*                                                                    *
.*                    Chapter. Message Services                       *
.*                                                                    *
.**********************************************************************
:h1.Message Services
:p.
The Message Services service processor simplifies the tasks of defining,
issuing and maintaining messages.  This is accomplished by:
:ul.
:li.Defining messages in a
:hp1.central place:ehp1., separate from the code that
issues them.
:li.Defining :hp1.standards:ehp1.
which the messages must follow, which are
enforced at assembly time.
:li.Associating a :hp1.severity:ehp1. with a message,
which the issuer may optionally use to set returncodes.
:li.Allowing :hp1.text substitution:ehp1. within predefined messages.
The substitution function uses the String Formatter: hence, any
message may be defined using standard String Formatter format strings.
:li.Defining the :hp1.message destination:ehp1. at execution time.
:li.Allowing the caller to :hp1.retrieve message text:ehp1. if needed
for special routing (such as multiple destinations).
:eul.
.*
.*--------------------------------------------------------------------*
:h3.Defining Messages
.*--------------------------------------------------------------------*
:p.Message Services requires its users to define messages in a
message CSECT.  Macros are provided to simplify construction of
this CSECT.  Up to 25 message CSECTs may be loaded by an
individual Message Services session.
Each message CSECT will ultimately reside as a load module:
however, since Message Services uses the :#x.ES_LOAD_MODULE:e#x.
function to locate and load the message CSECTs into storage, the
message CSECT could be defined via a module name table and linked with
the caller's load modules and/or other message CSECTs
as desired.
.*
:p.The construction of a message CSECT is a simple matter.  The CSECT
itself is started and terminated by the :#x.MS_MESSAGE_MODULE:e#x.
macro, which also defines the messages' prefix string, the length of
the message identifiers, and optionally the severity characters and
their associated return codes.  Each individual message is defined by
a :#x.MS_MESSAGE:e#x. macro, which ensures that the proper message
ID prefix, length and severity characters were used.  The following
example defines a message CSECT with three messages:
:fig.
:xmp.
         MS_MESSAGE_MODULE   START,                                   +
                  NAME=MSGMOD03,         This becomes the CSECT name  +
                  PREFIX=ABC,                                         +
                  IDLENGTH=8,            All msgids are 8 chars long  +
                  SEVCHAR=((I,0),(W,4),(E,8),(F,12))

ABC0001I MS_MESSAGE  'This is merely informational; return code is 0.'
ABC0002W MS_MESSAGE  'You are being warned; return code is 4.'
ABC0003E MS_MESSAGE  'An error has occurred; return code is 8.'

         MS_MESSAGE_MODULE   END
:exmp.
:figcap.Sample Message Module Definition
:efig.
:p.:#x.MS_MESSAGE_MODULE:e#x. and :#x.MS_MESSAGE:e#x. do not generate
any executable code.
.*--------------------------------------------------------------------*
:h3.Obtaining Message Services' Symbols &amp. Macros
.*--------------------------------------------------------------------*
:p.
Message Services' symbols and interface macros can be found in the
assembler copy member :#x.SRVMSMAC:e#x.. This member contains symbols
naming Message Services' load module, function codes, return codes,
and parameter values.  It also contains macros for using all of the
Message Services' functions. The following statement or its equivalent
should appear at the beginning of any program that uses
Message Services:
:xmp.
   COPY SRVMSMAC      Obtain Message Services' symbols & macros.
:exmp.
.*===> if there is more than one load module that implements the
.*===> service processor's protocol, that should be mentioned here.
.*--------------------------------------------------------------------*
:h3.Establishing Message Services Defaults
.*--------------------------------------------------------------------*
Some parameters are general to Message Services and not specific to
any function.  These parameters include its load module name
(:#xi.MS_epname:e#xi.), entry point address
(:#xi.MS_epa:e#xi.), and token value
(:#xi.MS_token:e#xi.). The :#x.MS_ID:e#x. macro (see
:hdref refid=msid.) can be used to establish defaults for these
parameters and associate them with a unique service processor
identifier.  The identifier may then be supplied on any Message
Services
macro instruction to refer to the default parameter values.
.*--------------------------------------------------------------------*
:h3.Identifying Message Services
.*--------------------------------------------------------------------*
:p.
The Message service processor resides in the load module named by
the following symbol definition in copy member :#x.SRVMSMAC:e#x.:
:xmp.
&amp.MESSAGE_SERVICES SETC  '''SRVMS   '''
:exmp.
This symbolic name should be used as the service processor entry point
name for Message Services
as shown in the following :#x.MS_ID:e#x.
macro instruction:
:xmp.
MS_ID ID=MS,SPEPNAME=&amp.MESSAGE_SERVICES    Set MsgServ Defaults.
:exmp.
.*--------------------------------------------------------------------*
:h3.Loading Message Services
.*--------------------------------------------------------------------*
:p.
The recommended method for loading Message Services is through
Environment Support's :#x.ES_LOAD_MODULE:e#x. function, as shown in
the following example:
:xmp.
ES_LOAD_MODULE ID=ES,SPID=MS            Load Message Services
:exmp.
.*--------------------------------------------------------------------*
:h3.Common Parameters
.*--------------------------------------------------------------------*
:p.There are several parameters common to any
Message Services
function call.  These are:
:plist.
:pLt.id_name
:pLd.specifies the name of a service processor identifier created by the
:#x.MS_ID:e#x. macro which will be used by the :#x.MS_START:e#x.
macro to automatically obtain values for :#xi.MS_epa:e#xi.
and
:#xi.MS_token:e#xi.. This parameter is required unless both
:#xi.MS_epa:e#xi. and :#xi.MS_token:e#xi. are
specified.
:pLt.MS_epname
:pLd.the entry point name of the Message Services service processor
module that is being used.
:pLt.MS_epa
:pLd.specifies the label of a fullword in storage that contains the
entry point address of an already-started Message Services service
processor.  The value specified by :#xi.MS_epa:e#xi.
overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:pLt.MS_token
:pLd.specifies the label of a fullword in storage that contains the
value returned by :#x.MS_START:e#x. for the
:#xi.MS_token:e#xi. parameter.  The value specified by
:#xi.MS_token:e#xi. overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:eplist.
.*--------------------------------------------------------------------*
:h3.Return Codes
.*--------------------------------------------------------------------*
:p.
Message Services may issue any of the following return codes in
various situations.  Some of the return codes may be received from any
call to Message Services, while others are specific to individual
functions.
.*---------------------------------------------------------------------*
.* ReturnCode section: table of return codes and their meanings.
.*
.*===> This section should be elimitated for things that do not have
.*===> return codes, such as the MS_ID macro or data-mapping macros.
.*
.* :rclist.
.* :rcn.number           | One rcn/rct/rcd triple for each return code
.* :rct.symbol           | that the function may generate.
.* :rcd.description      |
.* :erclist.
.*
.*---------------------------------------------------------------------*
:rclist.
:rcn.0
:rct.MS_SUCCESS
:rcd.The Message Services
function has completed successfully.
:rcn.1
:rct.MS_INVALID_FUNCTION
:rcd.The specified function code is not presently supported.
:rcn.2
:rct.MS_INVALID_NUMBER_OF_PARMS
:rcd.The Message Services
function received an invalid number of
parameters.  This may be due to an improperly coded CALLX or PLIST
macro, or the inadvertent use of the NOVL option.
:rcn.3
:rct.MS_INVALID_MS_ID
:rcd.Message Services detected an invalid
PWA address in :#x.MS_token:e#x..
:rcn.4
:rct.MS_ENVIRONMENT_SUPPORT_ ERROR
:rcd.An error was reported by Environment Support.  The error probably
occurred while attempting to load the Printline or String Handler
service processor.
:rcn.5
:rct.MS_STRING_HANDLER_ERROR
:rcd.An error was reported by the String Handler service processor.
More information may be found by issuing the
:#x.ES_DISPLAY_DEBUG_INFO:e#x. function.
:rcn.6
:rct.MS_PRINT_LINE_TRUNCATED
:rcd.The formatted message was too large to fit in Message Services'
internal 256-byte buffer.  The first 256 bytes of the message are
printed.
:rcn.7
:rct.MS_PRINTLINE_ERROR
:rcd.An error was reported by the Printline service processor.
More information may be found by issuing the
:#x.ES_DISPLAY_DEBUG_INFO:e#x. function.
:rcn.8
:rct.MS_INVALID_MSGDEST_OPTION
:rcd.The option byte provided did not contain a valid :#x.MSGDEST:e#x.
option value.  Message Services currently supports the following
MSGDEST option values:
:ul compact.
:li.:hp3.0:ehp3. - Not specified.
:li.:hp3.1:ehp3. - DDNAME specified.
:li.:hp3.2:ehp3. - PLID or PL specified.
:li.:hp3.3:ehp3. - CONSOLE specified.
:eul.
:rcn.9
:rct.MS_MSGMOD_MISSING
:rcd.Either the address of the message module list was zero, or the
list's count field was zero.
At least one message module must be provided to :#x.MS_START:e#x..
:rcn.10
:rct.MS_TOO_MANY_MSGMODS
:rcd.More than 25 message modules were provided to :#x.MS_START:e#x..
At present, Message Services can only handle 25 message modules.
:rcn.11
:rct.MS_MSGMOD_NOT_LOADED
:rcd.A particular message module could not be loaded by
:#x.MS_START:e#x..
:rcn.12
:rct.MS_MSGMOD_NOT_VALID
:rcd.One of the message modules was not a valid Message Services
message module.
:rcn.13
:rct.MS_INVALID_SIZELENGTH
:rcd.:#x.MS_START:e#x. found a :#x.sizelength:e#x. value that was
greater than 4. The value of :#x.sizelength:e#x. must be between 1
and 4, or must be 0 or unspecified in order to use the default value
of 2.
:rcn.14
:rct.MS_MESSAGE_NOT_FOUND
:rcd.The message specified by :#x.msgid_string:e#x. could not be found
among the active message modules.
:rcn.15
:rct.MS_INVALID_PREFIX
:rcd.The message prefix specified by
:#x.msgid_string:e#x. was not found
among the active message modules.
:rcn.16
:rct.MS_MSGDEST_NOT_PROVIDED
:rcd.A message destination was not provided via the :#x.MSGDEST:e#x.
operand of :#x.MS_START:e#x.. This Message Services function cannot be
used without a message destination.
:erclist.
.*--------------------------------------------------------------------*
:h2.Message Services Functions
.*--------------------------------------------------------------------*
:p.
The remaining sections of this chapter describe all functions provided
by Message Services, arranged in alphabetical order.
Each function's description begins on a new page, and the name of the
function being described appears in the top outside corner of every
page.
.**********************************************************************
.se temp = 'Retrieve Message Text'
:func id=msget  name='MS_GET_MESSAGE'.&temp.
.**********************************************************************
:p.
The :#x.MS_GET_MESSAGE:e#x. function retrieves and formats a message,
then returns the formatted message text and its length to the caller.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
MS_GET_MESSAGE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.MS_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.MS_token:ehp1.&rbt.
   ,MSGID=:hp1.msgid_ID_string:ehp1.
   ,STRING=(&lbr.:hp1.string:ehp1. |&cont.
(:hp1.string:ehp1.,:hp1.string_length:ehp1.)&rbr.
   ,RESULTLEN=:hp1.result_length:ehp1.
   &lbt.,SOURCE=(:hp1.source1:ehp1.,:hp1.source2:ehp1., ...)&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.MS_epa:ehp1.,&cont.
(:hp1.MS_token:ehp1.,&amp.MS_GET_MESSAGE,&cont.
:hp1.msgID_string:ehp1.
              ,:hp1.string:ehp1.,:hp1.string_length:ehp1.,&cont.
:hp1.result_length:ehp1.
              &lbr.,:hp1.source1:ehp1.,:hp1.source2:ehp1., ...&rbr.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.msgid_ID_string
:pLd.Specifies the message ID to be processed.
:pLt.string
:pLd.Specifies the area where :#x.MS_GET_MESSAGE:e#x. will return the
text of the requested message.
:pLt.string_length
:pLd.Provides the length of the field named by :#x.string:e#x..
The length of this
field is governed by the :#x.SizeLength:e#x. operand specified on the
:#x.MS_ID:e#x. or :#x.MS_START:e#x. macro.
:pLt.result_length
:pLd.The :#x.MS_GET_MESSAGE:e#x. function will return the actual
length of the formatted message into this field.  The length of this
field is governed by the :#x.SizeLength:e#x. operand specified on the
:#x.MS_ID:e#x. or :#x.MS_START:e#x. macro.
:pLt.source
:pLd.Provides substitution parameters for the String Handler to
insert into the message being constructed.
:eplist.
.*---------------------------------------------------------------------*
:fh3.Examples
If message ABC002I were defined in a message CSECT using:
:xmp.
ABC002E MS_MESSAGE "{I} parameters ignored due to {C}."
:exmp.
the following MS_GET_MESSAGE macro:
:xmp.
MS_GET_MESSAGE  ID=MS,
                MSGID==C'ABC002E',
                SOURCE=(3,"syntax errors")
:exmp.
would result in the message:
:xmp.
   ABC002E 3 parameters ignored due to syntax errors.
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Establish Default Message Services Values'
:func id=msid name='MS_ID'.&temp.
.**********************************************************************
:p.The :#x.MS_ID:e#x. macro is used to establish default values for
use by other Message Services macros, which may access those values
through a unique identifier, :#xi.id_name:e#xi., specified by
the user.  When allowed to generate default values, this macro will
create Program Work Area (PWA) storage for :#xi.MS_epa:e#xi.
and
:#xi.MS_token:e#xi.. These values, whether generated by the
macro or provided by the user, are accessable from all other
Message Services
macros via the :#x.ID=:e#x.:#xi.id_name:e#xi. parameter.
:mac.
MS_ID ID=:hp1.id_name:ehp1.
   &lbt.,SPEPNAME=:hp1.MS_epname:ehp1.&rbt.
   &lbt.,SPEPA=:hp1.MS_epa:ehp1.&rbt.
   &lbt.,SPTOKEN=:hp1.MS_token:ehp1.&rbt.
   &lbt.,ESID=:hp1.esid_name:ehp1.&rbt.
   &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
   &lbt.,SIZELENGTH=:hp1.integer:ehp1.&rbt.
:emac.
.*****
:plist.
:pLt.esva
:pLd.Specifies the label of a fullword in storage that contains (or
will contain) the address of the Environment Support Vector
(:#x.ESV:e#x.) created by the :#x.ES_START:e#x. function.
:pLt.sizelength
:pLd.An integer value from 1 and 4
that determines the size, in bytes, of all
values representing string lengths by the String Handler.  For example,
a :hp1.sizelength:ehp1. value of 4 would cause all lengths returned by
the String Handler to be 4 bytes in length.
:eplist.
:fh3.Examples
:p.
The following :#x.MS_ID:e#x. macro will associate everything required by
the Message Services
macros with the service processor identifier :#x.PL:e#x.,
as well as establish the :#x.sizelength:e#x. value for the
Message Services
session.
:xmp.
    MS_ID  ID=PL,
           SPEPNAME=&amp.MESSAGE_SERVICES,
           SPEPA=PWA_MS_ENTRY,
           SPTOKEN=PWA_MS_TOKEN,
           ESID=ES,
           ESVA=PWA_ESVA,
           SIZELENGTH=4
.sp 2
PWA_MS_ENTRY  DS    F         Entrypoint for Message Services
PWA_MS_TOKEN  DS    F         Unique token for Message Services session
PWA_ESVA      DS    F         Environment Support Vector address
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Issue A Message'
:func id=msissue  name='MS_ISSUE_MESSAGE'.&temp.
.**********************************************************************
:p.
The :#x.MS_ISSUE_MESSAGE:e#x. function retrieves, formats and prints
the message referred to by :hp1.msgid_string:ehp1..
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
MS_ISSUE_MESSAGE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.MS_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.MS_token:ehp1.&rbt.
   ,MSGID=:hp1.msgid_string:ehp1.
   &lbt.,SOURCE=(:hp1.source1:ehp1.,:hp1.source2:ehp1., ...)&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.MS_epa:ehp1.,&cont.
(:hp1.MS_token:ehp1.,&amp.MS_ISSUE_MESSAGE,&cont.
:hp1.msgID_string:ehp1.
              &lbr.,:hp1.source1:ehp1.,:hp1.source2:ehp1., ...&rbr.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.msgid_string
:pLd.Specifies the message ID to be processed.
This parameter may be coded as a literal or an address.
:pLt.source1,source2,...
:pLd.Provides substitution parameters for the String Handler to
insert into the message being constructed.
:eplist.
.*---------------------------------------------------------------------*
:fh3.Examples
If message ABC002I were defined in a message module using:
:xmp.
ABC002E MS_MESSAGE "{I} parameters ignored due to {C}."
:exmp.
the following MS_ISSUE_MESSAGE macro:
:xmp.
MS_ISSUE_MESSAGE  ID=MS,
                  MSGID='ABC002E',
                  SOURCE=(3,"syntax errors")
:exmp.
would result in the message:
:xmp.
   ABC002E 3 parameters ignored due to syntax errors.
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Define A Message'
:func id=msmsg name='MS_MESSAGE'.&temp.
.**********************************************************************
:p.The :#x.MS_MESSAGE:e#x. macro is used to
define the text of a message.  :#x.MS_MESSAGE:e#x. will also use the
values specified by the :#x.MS_MESSAGE_MODULE:e#x. operands
:#x.prefix:e#x., :#x.idlength:e#x. and :#x.sevchar:e#x. to enforce
the respective attributes of the message.
:mac.
message_id  MS_MESSAGE  '      message_text      '
:emac.
.*****
:plist.
:pLt.message_id
:pLd.Provides the message ID for the message.  The message ID will be
generated at the beginning of the message text.  The message ID is
expected to be of the format:
&lbr.:#x.msg_prefix:e#x.&rbr.||&lbr.:#x.msg_number:e#x.&rbr.||&cont.
&lbr.:#x.sev_char:e#x.&rbr. .
The contents and length of :#x.msg_prefix:e#x., as well as
the value of :#x.sev_char:e#x. and the overall length of the message ID
are enforced by the values specified on :#x.MS_MESSAGE_MODULE:e#x..
:pLt.message_text
:pLd.Specifies a String Handler control string.  The length of this
string may be up to 255 characters: however, the length of the
resulting formatted string cannot exceed 255 bytes.
:eplist.
:fh3.Examples
:p.
The following :#x.MS_MESSAGE:e#x. macros define a series of messages.
They also point out the default severity characters.
:xmp.
XYZ001I  MS_MESSAGE  "Information message, severity value of 0."
XYZ002W  MS_MESSAGE  "Warning message, severity value of 4."
XYZ003E  MS_MESSAGE  "Error message, severity value of 8."
XYZ004S  MS_MESSAGE  "Severe message, severity value of 12."
XYZ005C  MS_MESSAGE  "Catastrophic message, severity value of 16."
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Define A Message Module'
:func id=msmsgmd name='MS_MESSAGE_MODULE'.&temp.
.**********************************************************************
:p.The :#x.MS_MESSAGE_MODULE:e#x. macro is used to
start or end a message module.  :#x.MS_MESSAGE_MODULE:e#x. also sets
various attributes of the messages
:#x.prefix:e#x., :#x.idlength:e#x. and :#x.sevchar:e#x. to enforce
the respective attributes of the message.
:mac.
MS_MESSAGE_MODULE START
                 ,NAME=:hp1.csectname:ehp1.
                 ,PREFIX=:hp1.msgid_prefix:ehp1.
                 ,IDLENGTH=&lbr.:hp1.msgid_length:ehp1. |&cont.
:hp3.8:ehp3.&rbr.
                 &lbt.,SEVCHAR=:hp1.sevchar_def:ehp1.&rbt.

     -- or --

MS_MESSAGE_MODULE END
:emac.
.*****
:plist.
:pLt.START
:pLd.Defines the beginning of a message module.
:pLt.END
:pLd.Defines the end of the message module.  This must be coded after
all :#x.MS_MESSAGE:e#x. macros.  No other parameters are valid when
:#x.END:e#x. is coded.
:pLt.csectname
:pLd.Provides the name of the CSECT that :#x.MS_MESSAGE_MODULE:e#x.
will generate.
:pLt.msgid_prefix
:pLd.Specifies that all messages defined in this message module must
be prefixed with this string.  A message prefix may be up to 6
characters in length.
:pLt.msgid_length
:pLd.Specifies the required length, in bytes,
for all message IDs coded on :#x.MS_MESSAGE:e#x. macros.
:pLt.sevchar_def
:pLd.Provides a list of message suffix characters and an associated
severity. These are coded as :#x.(character,severity):e#x., where
:#x.character:e#x. is a single message suffix character, and
:#x.severity:e#x. is the associated severity code. A maximum of
these severity codes will be returned to the caller if the
:#x.MAXSEV:e#x. keyword is specified on the :#x.MS_START:e#x. macro.
Any message suffixes coded on :#x.MS_MESSAGE:e#x. macros that do not
appear among the valid severity characters will cause an assembly error.
The default :#x.sevchar_def:e#x. list is:
:p.
:#x.SEVCHAR=((I,0),(W,4),(E,8),(S,12),(C,16)):e#x.
:eplist.
:fh3.Examples
:p.
The following macros define a complete message module.
:xmp.
  MS_MESSAGE_MODULE START,
                    NAME=ABC$MSGS,
                    PREFIX=ABC,
                    IDLENGTH=7,
                    SEVCHAR=((I,0),(W,4),(E,8),(F,16))

ABC001I  MS_MESSAGE  "Informational message, severity = 0."
ABC002W  MS_MESSAGE  "Warning message, severity = 4."
ABC003E  MS_MESSAGE  "Error message, severity = 8."
ABC004F  MS_MESSAGE  "Fatal message, severity = 16."

  MS_MESSAGE_MODULE END
  END
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Begin A Message Services Session'
:func id=msstart name='MS_START'.&temp.
.**********************************************************************
:p.
The :#x.MS_START:e#x. function establishes
a new Message Services
session and returns its session identifier in the
:hp1.MS_token:ehp1. parameter.  The message destination, maximum
severity field, message CSECT list and other global Message Services
parameters are provided here.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
MS_START ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.MS_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.MS_token:ehp1.&rbt.
   &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
   ,MSGDEST=(DDNAME,:hp1.ddnamespec:ehp1.)     |
            (PLID,:hp1.msgserv_procid:ehp1.)   |
            (PL,:hp1.PL_EPA:ehp1.,:hp1.PL_token:ehp1.)    |
            (CONSOLE)
   ,MSGMOD=(:hp1.msgmod_csect:ehp1.,:hp1.msgmod_csect:ehp1., ...)
   ,MSGMODLIST=:hp1.msgmod_list:ehp1.
   &lbt.,MAXSEV=:hp1.maxsev_address:ehp1.&rbt.
   &lbt.,PLCC=:hp1.carriage_control:ehp1.&rbt.
   &lbt.,SIZELENGTH=&lbr.:hp1.sizelength:ehp1. | &cont.
:hp2.2:ehp2.&rbr.&rbt.
   &lbt.,OPTIONS=(:hp1.option_list:ehp1.)&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.MS_epa:ehp1.,(:hp1.MS_token:ehp1.,&amp.MS_START,&cont.
:hp1.esva:ehp1.,
              :hp1.msgmod_list:ehp1.,:hp1.sizelength:ehp1.&cont.
:hp1.maxsev_address:ehp1.,
              :hp1.carriage_control:ehp1.,&cont.
:hp1.MSGDEST_option,:ehp1.
              :hp1.MSGDEST_specific_parameters:ehp1.,&cont.
:hp1.option_byte:ehp1.)
.*===> If there are alternate forms, where the parameter list is
.*===> significantly different depending on the first few parameter
.*===> values, do something like the following:
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.esva
:pLd.Specifies the label of a fullword in storage that contains the
address of the Environment Support Vector (ESV) created by the
ES_START function.
:pLt.MSGDEST
:pLd.Specifies the message destination that Message Services will use
to write its formatted messages.
The :#x.MSGDEST:e#x. keyword supports the following operands:
:ul compact.
:li.:hp3.DDNAME:ehp3.: This provides the DDname that Message Services
should use to start a Printline session.  The Printline session will
be terminated when :#x.MS_TERMINATE:e#x. is called.
:li.:hp3.PLID:ehp3.: This specifies the service processor ID of an
existing Printline session.  The ID is used to find the
:li.:hp3.PL:ehp3.: This is used to provide the
:hp1.PL_EPA:ehp1. and :hp1.PL_token:ehp1. of an existing
Printline session.
:li.:hp3.CONSOLE:ehp3.: This specifies that the :hp1.console:ehp1. is
the message destination.  The :#x.ES_DISPLAY_MESSAGE:ehp1. service is
actually used to display the message.
:eul.
:pLt.MSGDEST_option
:pLd.If the CALLX form is used, the MSGDEST keyword must be represented
as a single byte, containing one of the following values:
:ul compact.
:li.:hp3.0:ehp3. - MSGDEST not specified.
There are no additional parameters.
:li.:hp3.1:ehp3. - DDNAME specified. This is followed by the address
of an 8-character DDname.
:li.:hp3.2:ehp3. - PLID or PL specified.
This is followed by the addresses of :#x.PL_EPA:e#x. and
:#x.PL_token:e#x. respectively.
:li.:hp3.3:ehp3. - CONSOLE specified.
There are no additional parameters.
:eul.
:pLt.msgmod_csect
:pLd.Provides the names of one or more message modules.  These modules
will be loaded by :#x.ES_LOAD_MODULE:e#x., and thus must either exist as
separate load modules in STEPLIB or be defined in an application module
name table.
:pLt.msgmod_list
:pLd.If the application has a need to construct its own message module
list, it may be provided to :#x.MS_START:e#x. using the
:#x.MSGMODLIST:e#x. keyword.  The message module list must consist of
a fullword containing the number of message module names, followed by
a list of 8-character module names, as follows:
:xmp.
MOD_LIST DC   F'3'
         DC   CL8'ABC$MSGS'
         DC   CL8'DEF$MSGS'
         DC   CL8'XYZ$MSGS'
:exmp.
A list of this format is constructed when the :#x.MSGMOD:e#x. keyword
is used.  The :#x.MSGMOD:e#x. and :#x.MSGMODLIST:e#x. keywords are
mutually exclusive.
:pLt.maxsev_address
:pLd.The optional address of a halfword where Message Services will
maintain the highest severity level of any message issued. This field
should be initialized to zeros before :#x.MS_ISSUE_MESSAGE:e#x. or
:#x.MS_GET_MESSAGE:e#x. are invoked.
:pLt.carriage_control
:pLd.Optionally provides an ASA carriage control character to be used
when printing messages.  If :#x.MSGDEST:e#x. is not specified or is
set to :#x.CONSOLE:e#x., use of the :#x.PLCC:e#x. keyword will generate
an MNOTE. The operand of :#x.PLCC:e#x. may be specified as a quoted
character or as an address.
:pLt.sizelength
:pLd.An integer value from 1 and 4 that determines the size, in bytes,
of all values representing string lengths by the String Handler.  For
example, a :hp1.sizelength:ehp1. value of 4 would cause all lengths
returned by the String Handler to be 4 bytes in length.
:pLt.option_list
:pLd.A list of additional options for this Message Services
session.  The only
option currently supported is :hp1.FOLD:ehp1..
:ul.
:li.:hp2.FOLD:ehp2. - All output produced by Message Services
should be
folded to uppercase.  If using the CALLX form to call
:hp1.MS_START:ehp1., the FOLD option corresponds to a bit setting of
X'80' in the option byte.
Note that when using a MSGDEST of :hp1.PLID:ehp1., the PrintLine
session must have been started with :hp1.OPTIONS=FOLD:ehp1..
:eul.
:eplist.
.*---------------------------------------------------------------------*
.* Optional sections for describing how to use the function/macro.
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
.* Examples showing how to use it and neat ways to take advantage of
.* the function's capabilities.
.*
.*===> If one or two separate examples are being done, simply use
.*===>
.*===> :fh3.Example 1
.*===>   ...example 1 stuff...
.*===> :fh3.Example 2
.*===>   ...example 2 stuff...
.*===>
.*===> If a whole system of related examples are being done, use
.*===>
.*===> :fh3.Examples
.*===>   ....description general to all examples.
.*===> :h5.Example 1
.*===>   ...example 1 stuff...
.*===> :h5.Example 2
.*===>   ...example 2 stuff...
.*===>
.*---------------------------------------------------------------------*
:fh3.Examples
:p.
The following :#x.MS_START:e#x.  macro will initialize a Message
Services session.  This MS_START example
will cause the following to occur:
:ul compact.
:li.A Printline session will be started by Message Services, using
DDname :#x.SYSPRINT:e#x. and a SizeLength value of 4.
:li.The message modules
:#x.ABC$MSGS:e#x.,
:#x.DEF$MSGS:e#x. and
:#x.XYZ$MSGS:e#x. are loaded and validated.
:li.The address of :#x.PWA_MAXSEV:e#x. is bound as the MaxSev halfword's
address.  :#x.PWA_MAXSEV:e#x. will be maintained with the highest
message severity code of any message issued by this Message Services
session.
:li.A carriage control byte of '0' will prefix all messages built by
this Message Services session.  This will cause messages to be
double-spaced by PrintLine.
:eul.
:xmp.
    MS_START ID=PL,
             MSGDEST=(DDNAME,=C'SYSPRINT'),
             MSGMOD=(ABC$MSGS,DEF$MSGS,XYZ$MSGS),
             MAXSEV=PWA_MAXSEV,
             PLCC='0',
             SIZELENGTH=4
.sp 2
PWA_MAXSEV   DS    H         Max. severity, maintained by MsgServ
:exmp.
:efunc.
.**********************************************************************
.se temp = 'Terminate A Message Services Session'
:func id=msterm name='MS_TERMINATE'.&temp.
.**********************************************************************
:p.
The :#x.MS_TERMINATE:e#x. function concludes
the Message Services session identified by the
:hp1.MS_token:ehp1. parameter, and releases any resources held
by the Message Services service processor.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
MS_TERMINATE ID=:hp1.id_name:ehp1. &cont.
&lbt.,SPEPA=:hp1.MS_epa:ehp1.&rbt. &cont.
&lbt.,SPTOKEN=:hp1.MS_token:ehp1.&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.MS_epa:ehp1.,(:hp1.MS_token:ehp1.,&amp.MS_TERMINATE)
.*===> If there are alternate forms, where the parameter list is
.*===> significantly different depending on the first few parameter
.*===> values, do something like the following:
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
.* There are no function-specific parameters for MS_TERMINATE.
.*---------------------------------------------------------------------*
.* Optional sections for describing how to use the function/macro.
.*---------------------------------------------------------------------*
.*===> If one or two separate examples are being done, simply use
.*===>
.*===> :fh3.Example 1
.*===>   ...example 1 stuff...
.*===> :fh3.Example 2
.*===>   ...example 2 stuff...
.*===>
.*===> If a whole system of related examples are being done, use
.*===>
.*===> :fh3.Examples
.*===>   ....description general to all examples.
.*===> :h5.Example 1
.*===>   ...example 1 stuff...
.*===> :h5.Example 2
.*===>   ...example 2 stuff...
.*===>
.*---------------------------------------------------------------------*
:fh3.Examples
:p.The following :#x.MS_TERMINATE:e#x. macro will cause
Message Services to
close its report file and release any resources that it acquired.
:xmp.
MS_TERMINATE ID=MS
:exmp.
:efunc.
