*---------------------------------------------------------------------*
*  Copyright 2011 by Clemson University Research Foundation           *
*                                                                     *
*  Licensed under the Apache License, Version 2.0 (the "License");    *
*  you may not use this file except in compliance with the License.   *
*  You may obtain a copy of the License in this library as member     *
*  $LICENSE, or from                                                  *
*                                                                     *
*      http://www.apache.org/licenses/LICENSE-2.0                     *
*                                                                     *
*  Unless required by applicable law or agreed to in writing,         *
*  software distributed under the License is distributed on an "AS    *
*  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either    *
*  express or implied.  See the License for the specific language     *
*  governing permissions and limitations under the License.           *
*---------------------------------------------------------------------*
         SMLIST CONVERT=YES
SRVESX01 TITLE  "MVS Environment Support Message Issuer Routine"
         srvmod name=srvesx01,dates='1989, 1990, 1995'
         gblc  &srv_modname
*---------------------------------------------------------------------*
*
*  Copyright (C) Clemson University Research Foundation 1989, 1990.
*
*  Program     SRVESX01
*
*  Abstract    Issue_Message routine for MVS Environment Support.
*
*  Parameters  (Token, Info (ignored), Text, Length)
*
*  Return   Exit routines use the same set of return codes that the
*  Codes    main Environment Support modules uses.  For those errors
*           that are a result of Environment Support calling the exit
*           incorrectly, a return code of ES_INTERNAL_ERROR is used and
*           Environment Support is expected to perform the equivalent
*           of an ES_DISPLAY_DEBUG_INFO_AND_ABEND.
*
*  Program     Reentrant, problem key and state, standard linkage,
*  Attributes  non-authorized, AMODE(31), RMODE(ANY)
*
*  Change
*  History   2011/10/20 JCB - Patch rollup for CBT tape distribution
*
*---------------------------------------------------------------------*
 copy  smsyms                      Get Structured Macros symbols.
 copy  srvesmac                    Get Environment Support symbols.
 eject
 block type=program,name=&srv_modname,amode=31,rmode=any,              +
               parms=(Token,Info,Message,Length),                      +
               options=(*pwa,(reuspwa,1),xa,codebase,                  +
               (parms,prefix,(using,r11),(count,pwa_#parms),vl)),      +
               subopts=(*swa)
*---------------------------------------------------------------------*
*  Copy the provided message to local working storage.
*---------------------------------------------------------------------*
   l32 r2,&ppl.Message             | r2 -> Message text.
   l32 r3,&ppl.Length              | r3 -> Message length.
   l   r3,0(r3)                    | r3 := Message length.
   if (ch,r3,gt,=y(l'pwa_work-4))  | If length larger than work area.
    lh  r3,=y(l'pwa_work-4)        |   Truncate length to its size.
   endif                           | EndIf.
   la  r1,4(,r3)                   | r1 := length of msg & header.
   stcm r1,b'0011',pwa_work        | Save in output line descriptor.
   mvc pwa_work+2(2),=h'0'         | Set offset to zeros.
   la  r14,pwa_work+4              | Point r14 to work area.
   lr  r15,r3                      | Load r15 with message length.
   mvcl r14,r2                     | Move message to work area.
*---------------------------------------------------------------------*
*  If running under interactive TSO, use PUTLINE to issue the message.
*---------------------------------------------------------------------*
   lcba r1,asxb                    | r1 -> address space extension.
   icm r1,b'1111',asxblwa-asxb(r1) | r1 -> logon work area.
   if nz                           | if LWA exists, use Putline.
     xc  pwa_ecb,pwa_ecb           |   Clear Putline's ECB.
     mvc pwa_ptpb,psd_ptpb         |   Establish parameter block.
     l   r2,lwapect-lwa(,r1)       |   r2-> environment ctl blk.
     l   r3,lwapscb-lwa(,r1)       |   r3-> protected step ctl blk.
     l   r3,pscbupt-pscb(,r3)      |   r3-> user profile table.
     putline parm=pwa_ptpb,        |                                   +
               upt=(r3),           |                                   +
               ect=(r2),           |     Invoke PUTLINE service.       +
               ecb=pwa_ecb,        |                                   +
               output=(pwa_work,term,single,data),                     +
               mf=(e,pwa_putline)  |
     if (treg,r15,nz)              |   If something went wrong.
       if (c,r15,eq,=f'4')         |     If Attn interrupt
         sbit pwa_f,pwa_f_interrupt      Remember that it happened.
         la   r15,&es_undetermined |       Set return code.
       elseif (c,r15,eq,=f'20')    |     ElseIf terminal disconnect.
         la   r15,&es_undetermined |       Set return code.
       elseif (c,r15,eq,=f'8'),or, |     ElseIf NOWAIT specified or    +
               (c,r15,eq,=f'12')   |       Invalid parms.
         la r15,&es_internal_error         Set return code.
       elseif (c,r15,eq,=f'16')    |     ElseIf out of storage.
         la r15,&es_storage_not_available  Set return code.
       else                        |     Else, undetermined.
         la r15,&es_undetermined   |       Set return code.
       endif                       |     EndIf.
     endif                         |   EndIf.
     leave block=*                 |   Return to caller.
   endif                           | Endif.
*---------------------------------------------------------------------*
*  Use WTO to write the message to the job-log.
*---------------------------------------------------------------------*
   wto mf=(e,pwa_work)             | Write message to job log.
   slr r15,r15                     | Set final return code.
 endblk block=&srv_modname,rc=(r15)
 eject
*---------------------------------------------------------------------*
*                                                                     *
* Program Static Data                                                 *
*                                                                     *
*---------------------------------------------------------------------*
                     psd
                     ltorg
psd_ptpb             putline mf=l
ptpb_len             equ     *-psd_ptpb
                     endpsd
*---------------------------------------------------------------------*
*                                                                     *
* Program Work Area                                                   *
*                                                                     *
*---------------------------------------------------------------------*
                     pwa
pwa_#parms           ds     f            | Count of parms passed in.
pwa_f                ds     x            | Status flags.
pwa_f_interrupt      equ    x'80'        |   Attention ocurred.
pwa_ecb              ds     f            | ECB for putline use.
pwa_ptpb             ds     cl(ptpb_len) | PutLine parameter block.
pwa_putline          ds     cl(10*4)     | PutLine parameter list.
pwa_work             ds     cl4004       | Message descriptor.
                     endpwa
                     eject
*---------------------------------------------------------------------*
*                                                                     *
* Mapping DSECTs.                                                     *
*                                                                     *
*---------------------------------------------------------------------*
                  ihaasxb  ,
                  ikjeflwa ,
                  ikjpscb  ,
                  end
