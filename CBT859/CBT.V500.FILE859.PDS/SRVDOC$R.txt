.*
.* The GML text below is a skeleton reference chapter for one service
.* processor.  The suggested approach for writing a new chapter is to
.*    1) create a new member called SRVDOCxx, where xx is the two
.*       letter service processor identification code.
.*    2) copy this member into it.
.*    3) Change all occurrances of the skeleton names below to the
.*       appropriate values.
.*    4) format a copy of the manual with the new chapter included.
.*    5) use the formatted copy of the new chapter to decided what
.*       changes/additions/deletions need to be made.
.*
.*   <srvproc_name>  - The name used when referring to the service
.*                     processor in general. e.g. "String Handler",
.*                     "Environment Support", "Memory Manager", etc.
.*   <srvload_sym>   - The symbolic name used for the load module, such
.*                     as STRING_HANDLER, MVS_ENVIRONMENT_SUPPORT, etc.
.*   <srvload_name>  - The actual name of the load module identified by
.*                     <srvload_sym>, such as SRVSTR or SRVMVSES.       .
.*   <>              - The two-letter code assigned to the service
.*                     processor, such as ES, ST, MM, SY, or FI.
.*   <func_name>     - The name used for specific function's reference
.*                     section.  This name would be something like
.*                     ES_LOAD_MODULE, ST_FORMAT, etc.
.*   idid            - The header id used on the section for the xx_ID
.*                     macro.
.*
.*
.* Lines that begin with .*===> describe what should appear in the
.*   text at that point or provide information on how something should
.*   be formatted.
.*
.**********************************************************************
.*                                                                    *
.*                    Chapter. <srvproc_name>                         *
.*                                                                    *
.**********************************************************************
:h1.<srvproc_name>
:p.
Discussion of what the service processor is, in general terms.  This
paragraph should contain just enough information to tell the reader
right away whether or not the service processor will fill his needs.
:p.
If the service processor is environment independent, state it in this
paragraph.
:p.
A quick paragraph or two advertising the service processor's strengths
and weaknesses, and the most common uses for its services.
.*--------------------------------------------------------------------*
:h3.Obtaining <srvproc_name> Symbols &amp. Macros
.*--------------------------------------------------------------------*
:p.
The <srvproc_name>'s symbols and interface macros can be found in the
assembler copy member :#x.SRV<>MAC:e#x.. This member contains symbols
naming the <srvproc_name>'s load module, function codes, return codes,
and parameter values.  It also contains macros for using all of the
<srvproc_name>'s functions.  The following statement or its equivalent
should appear at the beginning of any program that uses the
<srvproc_name>:
:xmp.
   COPY SRV<>MAC      Obtain the <srvproc_name>'s symbols & macros.
:exmp.
.*===> if there is more than one load module that implements the
.*===> service processor's protocol, that should be mentioned here.
.*--------------------------------------------------------------------*
:h3.Establishing <srvproc_name> Defaults
.*--------------------------------------------------------------------*
Some parameters are general to the <srvproc_name> and not specific to
any function.  These parameters include its load module name
(:#xi.<>_epname:e#xi.), entry point address
(:#xi.<>_epa:e#xi.), and token value
(:#xi.<>_token:e#xi.). The :#x.<>_ID:e#x. macro (see
:hdref refid=idid.) can be used to establish defaults for these
parameters and associate them with a unique service processor
identifier.  The identifier may then be supplied on any <srvproc_name>
macro instruction to refer to the default parameter values.
.*--------------------------------------------------------------------*
:h3.Identifying the <srvproc_name>
.*--------------------------------------------------------------------*
:p.
The <srvproc_name> service processor resides in the load module named by
the following symbol definition in copy member :#x.SRV<>MAC:e#x.:
:xmp.
&amp.<srvload_sym>    SETC  '''<srvload_name>  '''
:exmp.
This symbolic name should be used as the service processor entry point
name for the <srvproc_name> as shown in the following :#x.<>_ID:e#x.
macro instruction.
:xmp.
<>_ID ID=ST,SPEPNAME=&amp.<srvload_sym>    Set <srvproc_name> Defaults.
:exmp.
.*--------------------------------------------------------------------*
:h3.Loading the <srvproc_name>
.*--------------------------------------------------------------------*
:p.
The recommended method for loading the <srvproc_name> is through
Environment Support's :#x.ES_LOAD_MODULE:e#x. function, as shown in
the following example:
:xmp.
ES_LOAD_MODULE ID=ES,SPID=<>            Load the <srvproc_name>
:exmp.
.*--------------------------------------------------------------------*
:h3.Other sections
.*--------------------------------------------------------------------*
:p.
Other sections should be added here as needed to decribe things that are
general to the entire service processor and not specific to any function
or macro.  For example, Environment Support has a section here called
"Data Areas" which is subdivided into one section for each data area
used by Environment Support.
.*--------------------------------------------------------------------*
:h2.<srvproc_name> Service Processor Functions
.*--------------------------------------------------------------------*
:p.
The remaining sections of this chapter describe all functions provided
by the <srvproc_name> service processor, arranged in alphabetical order.
Each function's description begins on a new page, and the name of the
function being described appears in the top outside corner of every
page.
.*===>
.*===> The section below a describes a generic function for a service
.*===> processor.  There should be one section for each function
.*===> supported, as well as a chapter for each macro defined by the
.*===> service processor's SRV<>MAC member (there should be a separate
.*===> chapter for each mapping macro, for example).  All of these
.*===> chapters should be arranged in alphabetical order.
.*===>
.**********************************************************************
.se temp = 'One-liner that will go in the table-of-contents'
:func id=funcid name='<func_name>'.&temp.
.**********************************************************************
:p.
A paragraph or two describing the function/macro's purpose and the most
common uses for it.
.*===>
.*===> The :mac. and :callx. tags below are used to describe the
.*===> syntax for invoking the function/macro.
.*===>
.*---------------------------------------------------------------------*
.* Syntax box for the macro form of invoking this function/macro.
.*---------------------------------------------------------------------*
:mac.
<func_name> ID=:hp1.id_name:ehp1.
  &lbt.,SPEPA=:hp1.<>_epa:ehp1.&rbt.
  &lbt.,SPTOKEN=:hp1.<>_token:ehp1.&rbt.
.*===> The lines above are in every function-invocation macro, and
.*===> probably in a lot of data-mapping macros.  The lines below
.*===> describe function/macro-specific parameters.  Parameters that
.*===> are optional should be enclosed in brackets.  The example
.*===> parameters below are:
   ,KEYWORD1=:hp1.parameter1:ehp1.
  &lbt.,KEYWORD2=&lbr.:hp1.parameter2:ehp1. | &cont.
(:hp1.parameter2:ehp1.,:hp1.parameter2_length:ehp1.)&rbr.&rbt.
  &lbt.,KEYWORD3=:hp1.parameter3:ehp1.&rbt.
  &lbt.,KEYWORD4=(:hp1.parameter4:ehp1.&cont.
&lbr.,:hp1.parameter4:ehp1.&rbr.)&rbt.
:emac.
.*---------------------------------------------------------------------*
.* Syntax box for the CALLX form of invoking this function/macro.
.*---------------------------------------------------------------------*
:callx.
CALLX :hp1.<>_epa:ehp1.,(:hp1.<>_token:ehp1.,&amp.<func_name>,&cont.
:hp1.parameter1:ehp1.,&cont.
:hp1.parameter2:ehp1.,:hp1.parameter2_length:ehp1.,
&lbt.:hp1.parameter3:ehp1.&rbt.,&cont.
&lbr.,:hp1.parameter4:ehp1.&rbr.)
.*===> If there are alternate forms, where the parameter list is
.*===> significantly different depending on the first few parameter
.*===> values, do something like the following:

- or -

CALLX :hp1.<>_epa:ehp1.,(:hp1.<>_token:ehp1.,&amp.<func_name>,&cont.
:hp1.alternate-parameter-list:ehp1.)
:ecallx.
.*---------------------------------------------------------------------*
.* Parameter-list table describing each parameter.
.*
.* :plist.
.* :pLt.parameter      | One pLt/pLd pair for each parameter that may
.* :pLd.description    | be specified.
.* :eplist.
.*
.*---------------------------------------------------------------------*
:plist.
:pLt.id_name
:pLd.specifies the name of a service processor identifier created by the
:#x.<>_ID:e#x. macro which will be used by the :#x.<func_name>:e#x.
macro to automatically obtain values for :#xi.<>_epa:e#xi.
and
:#xi.<>_token:e#xi.. This parameter is required unless both
:#xi.<>_epa:e#xi. and :#xi.<>_token:e#xi. are
specified.
:pLt.<>_epa
:pLd.specifies the label of a fullword in storage that contains the
entry point address of an already-started <srvproc_name> service
processor.  The value specified by :#xi.<>_epa:e#xi.
overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:pLt.<>_token
:pLd.specifies the label of a fullword in storage that contains the
value returned by :#x.<>_START:e#x. for the
:#xi.<>_token:e#xi. parameter.  The value specified by
:#xi.<>_token:e#xi. overrides any value obtained from
:#x.ID=:e#x.:#xi.id_name:e#xi..
:pLt.parameter1
:pLd.specifies the label of etc, etc, etc.
:pLt.parameter2
:pLd.specifies the label of a string etc, etc, etc.
:pLt.parameter2_length
:pLd.specifies the label of a signed binary integer indicating the
length of the string identified by the :#xi.parameter2:e#xi.
parameter.
:pLt.parameter3
:pLd.specifies a field into which a signed binary integer containing the
length of etc, etc.
:pLt.&lbr.parameter4&rbr.
:pLd.one or more values, etc, etc.
:eplist.
.*---------------------------------------------------------------------*
.* Optional sections for describing how to use the function/macro.
.*---------------------------------------------------------------------*
.*===>
.*===> Any significant information on how to use the function/macro
.*===> should be placed here.  The sections should use the :fh3. and
.*===> :fh4. tags, as needed.
.*===>
.*---------------------------------------------------------------------*
.* Examples showing how to use it and neat ways to take advantage of
.* the function's capabilities.
.*
.*===> If one or two separate examples are being done, simply use
.*===>
.*===> :fh3.Example 1
.*===>   ...example 1 stuff...
.*===> :fh3.Example 2
.*===>   ...example 2 stuff...
.*===>
.*===> If a whole system of related examples are being done, use
.*===>
.*===> :fh3.Examples
.*===>   ....description general to all examples.
.*===> :h5.Example 1
.*===>   ...example 1 stuff...
.*===> :h5.Example 2
.*===>   ...example 2 stuff...
.*===>
.*---------------------------------------------------------------------*
:fh3.Examples
.*---------------------------------------------------------------------*
.* ReturnCode section: table of return codes and their meanings.
.*
.*===> This section should be elimitated for things that do not have
.*===> return codes, such as the <>_ID macro or data-mapping macros.
.*
.* :rclist.
.* :rcn.number           | One rcn/rct/rcd triple for each return code
.* :rct.symbol           | that the function may generate.
.* :rcd.description      |
.* :erclist.
.*
.*---------------------------------------------------------------------*
:rclist.
:rcn.0
:rct.<>_SUCCESS
:rcd.The :#x.<func_name>:e#x. function has completed successfully.  Such
and such values have been returned in parameter such and such.
:erclist.
:efunc.
.**********************************************************************
:func name='<>_ID' id=idid.Establish Default <srvproc_name> Values
.**********************************************************************
:p.The :#x.<>_ID:e#x. macro is used to establish default values for
use by other <srvproc_name> macros, which may access those values
through a unique identifier, :#xi.id_name:e#xi., specified by
the user.  When allowed to generate default values, this macro will
create Program Work Area (PWA) storage for :#xi.<>_epa:e#xi.
and
:#xi.<>_token:e#xi.. These values, whether generated by the
macro or provided by the user, are accessable from all other
<srvproc_name> macros via the :#x.ID=:e#x.:#xi.id_name:e#xi.  parameter.
:mac.
<>_ID ID=:hp1.id_name:ehp1.
  &lbt.,SPEPNAME=:hp1.<>_epname:ehp1.&rbt.
  &lbt.,SPEPA=:hp1.<>_epa:ehp1.&rbt.
  &lbt.,SPTOKEN=:hp1.<>_token:ehp1.&rbt.
  &lbt.,ESID=:hp1.esid_name:ehp1.&rbt.
  &lbt.,ESVA=:hp1.esva:ehp1.&rbt.
  &lbt.optional keywords specific to <srvproc_name>&rbt.
:emac.
.*****
:plist.
:pLt.id_name
:pLd.the identifier to assign to the service processor identifier being
established.  This name must be unique for all service processor
identifier's.
:pLt.<>_epname
:pLd.the entry point name of the <srvproc_name> service processor module
that is being used.
:pLt.<>_epa
:pLd.specifies the label of a fullword in storage that will contain the
entry point address of the Environment Support service processor.
:pLt.<>_token
:pLd.specifies the label of a fullword in storage that will contain the
token assigned by the :#x.<>_START:e#x. function of the String
Handler.
:pLt.esid_name
:pLd.the name of a service processor identifier, created by the
:#x.ES_ID:e#x.  macro, which will be used by the :#x.<>_ID:e#x. macro to
automatically obtain the value for :#x.esv:e#x. (see below).
:pLt.esva
:pLd.specifies the label of a fullword in storage that contains (or
will contain) the address of the Environment Support Vector
(:#x.ESV:e#x.) created by the :#x.ES_START:e#x. function.
:eplist.
:fh3.Example 1
:p.
:xmp.
<>_ID ID=ES,SPEPNAME=&amp.<srvload_sym>
:exmp.
:efunc.
