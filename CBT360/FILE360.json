{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011836000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2410226, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 12, "INMDSNAM": "CBT.V500.FILE360.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2410226, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2410226, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE360.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00&\\t'", "DS1TRBAL": "b'a\\x9e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b\"X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\xa6\\x00\\x06\\x02\\xa8\\x00\\x0e\\x00'\"", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00\\x13\\x01 5/\\x01 5/\\x16\\x02\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-12-17T00:00:00", "modifydate": "2020-12-17T16:02:13", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-500"}, "text": "REGULAR CBT TAPE - VERSION 500    FILE:  360\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT500.FILE360\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 40 MEMBERS COUNTED; CUMULATIVE SIZE IS 22,246 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/17/20    16:02:13    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00S\\x01\\t\\x01\\x9f\\x01 )/\\x12'\\x00\\r\\x00\\n\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2009-01-19T00:00:00", "modifydate": "2020-10-18T12:27:53", "lines": 13, "newlines": 10, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:    CBT Update\nFrom:       Gordon Boyd Hampton <gbhampton@yahoo.com>\nDate:       Sun, 18 Jan 2009 09:02:56 -0800 (PST)\nTo:         sbgolob@cbttape.org\n\nI have attached a ZIPPED copy of the whole CBT file360, with my\nupdates (members VOLS and VOLSHELP).\n\nGordon Boyd Hampton\nIn God We Trust\n\nRest in Peace, Gordon, my dear friend and colleague..........\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$VOLSUP": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\"\\x01\\t\\x01\\x9f\\x01\\t\\x01\\x9f\\x10(\\x00\\x16\\x00\\x14\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2009-01-19T00:00:00", "modifydate": "2009-01-19T10:28:22", "lines": 22, "newlines": 20, "modlines": 0, "user": "SBGOLOB"}, "text": "Updates to the VOLS program from Gordon B. Hampton.\n\n       email:  Gordon Boyd Hampton <gbhampton@yahoo.com>\n\n11/26/08 11. UPDATED TO HANDLE OVER 9999 CYLS/DEVICE\n             USING THE LSPACE MACRO\n\n             OUTPUT KEYWORD PARAMETER ALLOWS\n             EITHER OUT(30) OR OUT(40) FOR OUTPUT SIZE\n\n             OUT(30) PRESENTS OLDER VERSION OUTPUT\n               (FOR COMPATIBILITY - SHOWS 9999 FOR\n                VALUES > 9999 AS OLD VERSION DOES)\n\n             OUT(40) IS THE UPDATED LINE (40 BYTES)\n               SOME FIELDS ARE BIGGER, SOME SHIFTED\n\n             DEFAULT IS SET BY OUTPUT_SIZE VARIABLE\n               FOR UPDATED VERSION DEFAULT, USE 40\n               FOR OLDER VERSION DEFAULT CHANGE TO 30\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$DOC": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x00\\x88\\x00\\x88\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 136, "newlines": 136, "modlines": 0, "user": "WSRCC"}, "text": "\n  This PDS contains several members. They are:\n\n  1. $DOC       THIS IS IT.\n\n  2. ASMCMD     This member is the JCL to assemble and linkedit\n                COMMAND into a linklist library.\n\n  3. ASMSPY     This member is the JCL to assemble and linkedit\n                SPY into a linklist library.\n\n  4. ASMSWP     This member is the JCL to assemble and linkedit\n                SWAP into a linklist library.\n\n  5. AUTH       This member is the source for AUTH macro to\n                issue a user SVC that gets and releases\n                program authorization for an assembler program.\n\n  6. BEGIN      This member is the source for BEGIN macro to do\n                standard entry linkage in assembler programs.\n\n  7. COMMAND    This member is the source for COMMAND Version 2.0.  It\n                was originally taken from a file on the CBT tape.  See\n                the program documentation for additional comments\n                about the origin of this code. COMMAND is used by SPY\n                to issue operator commands via SVC 34.  I added the\n                support for the BEGIN, FINISH and AUTH macros.\n\n  8. DISIMAGE   IBM 3800 Printing Subsystem Support Utility.\n                This member will allow you to create an IEBIMAGE source\n                deck from any member of SYS1.IMAGELIB (except COPYMOD's)\n                that was created by IEBIMAGE in the first place.\n\n  9. DISKMAP    This member will list the contents of a VTOC in several\n                usefull formats.  Original program was from CBT tape.\n                This version has several changes including 3380 support.\n\n 10. DTYP2UNT   This subroutine will convert a UCB-type hex device code\n                to a valid unit name using the System Device Name Table.\n\n 11. DYNAM      This subroutine is called by DYNAUTIL to do dynamic\n                allocation as needed by it's driver.  Originally from\n                the University of Manitoba.\n\n 12. DYNAUTIL   DYNAUTIL is a reentrant, refreshable, and reusable\n                Assembler language program that provides dynamic\n                allocation for batch programs and utilities.  This is\n                accomplished by passing control card images to the\n                University of Manitoba's DYNAM SVC 99 interface.\n                DYNAUTIL can run as a front-end to a batch task or can\n                be called by a batch task during it's execution.\n\n 13. DYNAUTLH   This is the documentation for the DYNAUTIL program.\n\n 14. FINISH     This member is the source for FINISH macro to do\n                standard exit linkage in assembler programs.\n\n 15. IDCMSGEN   Access Method Services (IDCAMS) Support Utility.\n                This program will allow you to create an IDCAMS source\n                deck from most objects in your VSAM catalog.\n\n 16. IEFACTRT   SMF exit that produces many usefull statistics and\n                messages at step and job end.  These messages appear\n                in an abbreviated form in the JOBLOG and in a more\n                detailed form in the Job MESSAGES output.\n\n 17. IEFU84     SMF exit that does a getmain for an area that becomes\n                a local user CVT.  This area is mapped by WSRCCCVT.\n\n 18. IGC0023C   A type 3 SCV that is invoked from the AUTH macro to\n                authorize or un-authorize TSO commands, Programs, etc.\n\n 19. ISPTCM     A macro (TCMGEN) and a module (ISPTCM) that replace\n                the distributed ISPF module.  This macro and module\n                were written in response to APAR OZ64211.  See\n                INFO/MVS entry E130403 for particulars.\n\n 10. LASTIPL    TSO command that uses the local user CVT mapped by\n                WSRCCCVT to display when the system was IPLled.\n\n 21. PRINTOFF   TSO command originally from the CBT tape and heavily\n                modified for use at WSRCC has support for the 3800\n                printing subsystem via CHARS, TRC, MODIFY, MODTRC,\n                FLASH, FCOUNT, CGROUP and BRUST keywords.  Some\n                problems with the 6670 code has also been fixed.\n\n 22. PRINT0FF   TSO HELP for the modified PRINTOFF command.\n\n 23. SPY        This member is the source for SPY Version 3.1 with\n                Cross Memory Support included for MVS/SP 1.3. It was\n                originally taken from file 338 on the CBT tape.  See\n                the program documentation for additional comments\n                about the origin of this code.  The vast majority of\n                the XM code came from the Bank of New South Wales. I\n                added the code to support the PFkeys in the 3270\n                environmemt along with the BEGIN. FINISH and AUTH\n                macros.\n\n 24. SWAP       This member is the source for SWAP Version 4.5.  It\n                was originally taken from a file on the CBT tape.  See\n                the program documentation for additional comments\n                about the origin of this code.  I added the support\n                for the BEGIN, FINISH and AUTH macros.\n\n 25. UADS       TSO command that will allow those users with operator\n                ability to dynamically change their UADS entries in\n                the PSCB.  Once changed, it will remain in effect\n                across a relogon (unless using ACF2 in NOUADS mode).\n\n 26. UADSHELP   TSO HELP for the UADS command.\n\n 27. VOLS       TSO command to list free space on all or selected\n                online DASD devices.  Volume selection includes\n                DEVICETYPE, ATTRIBUTE, VOLUME and UCB.\n\n 28. VOLSHELP   TSO HELP for the VOLS command.\n\n 29. WSRCCCVT   Macro that maps the local user CVT that is gotten at\n                IPL time by IEFU84.  A local user CVT is very usefull\n                for many random uses, we find many for ours.\n\n 30. ZSORTZ     This subroutine will sort an in-core table. Original\n                source unknown (probably early 1970's SHARE tape (?)).\n\n  WSRCC in no way assumes ANY responsibility for the use of ANY part\n  of this code.  However, if you have any questions, feel free to call.\n\n                Joe Martin (Share code WDA) Phone (608) 266-9525\n\n                State of Wisconsin\n                Department of Health and Social Services\n                Office of Information Systems\n                Wilson Street Regional Computing Center\n                One West Wilson Street\n                P.O. Box 7850 - Room B253\n                Madison, Wisconsin   53707-7850\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE360": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00\\x05\\x01 5/\\x01 5/\\x16\\x02\\x00\\xb4\\x00\\xb4\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-12-17T00:00:00", "modifydate": "2020-12-17T16:02:05", "lines": 180, "newlines": 180, "modlines": 0, "user": "CBT-500"}, "text": "//***FILE 360 IS FROM THE STATE OF WISCONSIN,  WILSON STREET        *   FILE 360\n//*           REGIONAL COMPUTING CENTER WITH THE FOLLOWING MEMBERS  *   FILE 360\n//*           THIS FILE IS IN IEBUPDTE SYSIN FORMAT :               *   FILE 360\n//*                                                                 *   FILE 360\n//*       Note:  The COMMAND program was fixed (2006/Feb) by        *   FILE 360\n//*              Mike Tomkins.  email: mjt6@daimlerchrysler.com     *   FILE 360\n//*                                                                 *   FILE 360\n//*           ASMCMD     THIS MEMBER IS THE JCL TO ASSEMBLE AND     *   FILE 360\n//*                      LINKEDIT COMMAND INTO A LINKLIST           *   FILE 360\n//*                      LIBRARY.                                   *   FILE 360\n//*                                                                 *   FILE 360\n//*           ASMSPY     THIS MEMBER IS THE JCL TO ASSEMBLE AND     *   FILE 360\n//*                      LINKEDIT SPY INTO A LINKLIST LIBRARY.      *   FILE 360\n//*                                                                 *   FILE 360\n//*           ASMSWP     THIS MEMBER IS THE JCL TO ASSEMBLE AND     *   FILE 360\n//*                      LINKEDIT SWAP INTO A LINKLIST LIBRARY.     *   FILE 360\n//*                                                                 *   FILE 360\n//*           AUTH       THIS MEMBER IS THE SOURCE FOR AUTH         *   FILE 360\n//*                      MACRO TO ISSUE A USER SVC THAT GETS AND    *   FILE 360\n//*                      RELEASES PROGRAM AUTHORIZATION FOR AN      *   FILE 360\n//*                      ASSEMBLER PROGRAM.                         *   FILE 360\n//*                                                                 *   FILE 360\n//*           BEGIN      THIS MEMBER IS THE SOURCE FOR BEGIN        *   FILE 360\n//*                      MACRO TO DO STANDARD ENTRY LINKAGE IN      *   FILE 360\n//*                      ASSEMBLER PROGRAMS.                        *   FILE 360\n//*                                                                 *   FILE 360\n//*           COMMAND    THIS MEMBER IS THE SOURCE FOR COMMAND      *   FILE 360\n//*                      VERSION 2.0.  IT WAS ORIGINALLY TAKEN      *   FILE 360\n//*                      FROM A FILE ON THE CBT TAPE.  SEE THE      *   FILE 360\n//*                      PROGRAM DOCUMENTATION FOR ADDITIONAL       *   FILE 360\n//*                      COMMENTS ABOUT THE ORIGIN OF THIS CODE.    *   FILE 360\n//*                      COMMAND IS USED BY SPY TO ISSUE            *   FILE 360\n//*                      OPERATOR COMMANDS VIA SVC 34.  I ADDED     *   FILE 360\n//*                      THE SUPPORT FOR THE BEGIN, FINISH AND      *   FILE 360\n//*                      AUTH MACROS.                               *   FILE 360\n//*                                                                 *   FILE 360\n//*                      Fixed (Feb. 2006) by Mike Tomkins.         *   FILE 360\n//*                      email:  mjt6@daimlerchrysler.com           *   FILE 360\n//*                                                                 *   FILE 360\n//*           DISIMAGE   IBM 3800 PRINTING SUBSYSTEM SUPPORT        *   FILE 360\n//*                      UTILITY.  THIS MEMBER WILL ALLOW YOU TO    *   FILE 360\n//*                      CREATE AN IEBIMAGE SOURCE DECK FROM ANY    *   FILE 360\n//*                      MEMBER OF SYS1.IMAGELIB (EXCEPT            *   FILE 360\n//*                      COPYMOD'S) THAT WAS CREATED BY IEBIMAGE    *   FILE 360\n//*                      IN THE FIRST PLACE.                        *   FILE 360\n//*                                                                 *   FILE 360\n//*           DISKMAP    THIS MEMBER WILL LIST THE CONTENTS         *   FILE 360\n//*                      OF A VTOC IN SEVERAL USEFUL FORMATS.       *   FILE 360\n//*                      ORIGINAL PROGRAM WAS FROM CBT TAPE.        *   FILE 360\n//*                      THIS VERSION HAS SEVERAL CHANGES           *   FILE 360\n//*                      INCLUDING 3380 SUPPORT.                    *   FILE 360\n//*                                                                 *   FILE 360\n//*           DTYP2UNT   THIS SUBROUTINE WILL CONVERT A UCB-TYPE    *   FILE 360\n//*                      HEX DEVICE CODE TO A VALID UNIT NAME       *   FILE 360\n//*                      USING THE SYSTEM DEVICE NAME TABLE.        *   FILE 360\n//*                                                                 *   FILE 360\n//*           DYNAM      THIS SUBROUTINE IS CALLED BY DYNAUTIL      *   FILE 360\n//*                      TO DO DYNAMIC ALLOCATION AS NEEDED BY      *   FILE 360\n//*                      ITS DRIVER.  ORIGINALLY FROM THE           *   FILE 360\n//*                      UNIVERSITY OF MANITOBA.                    *   FILE 360\n//*                                                                 *   FILE 360\n//*           DYNAUTIL   DYNAUTIL IS A REENTRANT, REFRESHABLE,      *   FILE 360\n//*                      AND REUSABLE ASSEMBLER LANGUAGE PROGRAM    *   FILE 360\n//*                      THAT PROVIDES DYNAMIC ALLOCATION FOR       *   FILE 360\n//*                      BATCH PROGRAMS AND UTILITIES.  THIS IS     *   FILE 360\n//*                      ACCOMPLISHED BY PASSING CONTROL CARD       *   FILE 360\n//*                      IMAGES TO THE UNIVERSITY OF MANITOBA'S     *   FILE 360\n//*                      DYNAM SVC 99 INTERFACE.  DYNAUTIL CAN      *   FILE 360\n//*                      RUN AS A FRONT-END TO A BATCH TASK OR      *   FILE 360\n//*                      CAN BE CALLED BY A BATCH TASK DURING       *   FILE 360\n//*                      ITS EXECUTION.                             *   FILE 360\n//*                                                                 *   FILE 360\n//*           DYNAUTLH   THIS IS THE DOCUMENTATION FOR THE          *   FILE 360\n//*                      DYNAUTIL PROGRAM.                          *   FILE 360\n//*                                                                 *   FILE 360\n//*           FINISH     THIS MEMBER IS THE SOURCE FOR FINISH       *   FILE 360\n//*                      MACRO TO DO STANDARD EXIT LINKAGE IN       *   FILE 360\n//*                      ASSEMBLER PROGRAMS.                        *   FILE 360\n//*                                                                 *   FILE 360\n//*           IDCMSGEN   ACCESS METHOD SERVICES (IDCAMS) SUPPORT    *   FILE 360\n//*                      UTILITY.  THIS PROGRAM WILL ALLOW YOU      *   FILE 360\n//*                      TO CREATE AN IDCAMS SOURCE DECK FROM       *   FILE 360\n//*                      MOST OBJECTS IN YOUR VSAM CATALOG.         *   FILE 360\n//*                                                                 *   FILE 360\n//*           IEFACTRT   SMF EXIT THAT PRODUCES MANY USEFUL         *   FILE 360\n//*                      STATISTICS AND MESSAGES AT STEP AND JOB    *   FILE 360\n//*                      END.  THESE MESSAGES APPEAR IN AN          *   FILE 360\n//*                      ABBREVIATED FORM IN THE JOBLOG AND IN A    *   FILE 360\n//*                      MORE DETAILED FORM IN THE JOB MESSAGES     *   FILE 360\n//*                      OUTPUT.                                    *   FILE 360\n//*                                                                 *   FILE 360\n//*           IEFU84     SMF EXIT THAT DOES A GETMAIN FOR AN        *   FILE 360\n//*                      AREA THAT BECOMES A LOCAL USER CVT.        *   FILE 360\n//*                      THIS AREA IS MAPPED BY WSRCCCVT.           *   FILE 360\n//*                                                                 *   FILE 360\n//*           IGC0023C   A TYPE 3 SVC THAT IS INVOKED FROM THE      *   FILE 360\n//*                      AUTH MACRO TO AUTHORIZE OR UN-AUTHORIZE    *   FILE 360\n//*                      TSO COMMANDS, PROGRAMS, ETC.               *   FILE 360\n//*                                                                 *   FILE 360\n//*           ISPTCM     A MACRO (TCMGEN) AND A MODULE (ISPTCM)     *   FILE 360\n//*                      THAT REPLACE THE DISTRIBUTED ISPF          *   FILE 360\n//*                      MODULE.  THIS MACRO AND MODULE WERE        *   FILE 360\n//*                      WRITTEN IN RESPONSE TO APAR OZ64211.       *   FILE 360\n//*                      SEE INFO/MVS ENTRY E130403 FOR             *   FILE 360\n//*                      PARTICULARS.                               *   FILE 360\n//*                                                                 *   FILE 360\n//*           LASTIPL    TSO COMMAND THAT USES THE LOCAL            *   FILE 360\n//*                      USER CVT MAPPED BY WSRCCCVT TO             *   FILE 360\n//*                      DISPLAY WHEN THE SYSTEM WAS                *   FILE 360\n//*                      IPL'ED.                                    *   FILE 360\n//*                                                                 *   FILE 360\n//*           PRINTOFF   TSO COMMAND ORIGINALLY FROM THE CBT        *   FILE 360\n//*                      TAPE AND HEAVILY MODIFIED FOR USE AT       *   FILE 360\n//*                      WSRCC HAS SUPPORT FOR THE 3800 PRINTING    *   FILE 360\n//*                      SUBSYSTEM VIA CHARS, TRC, MODIFY,          *   FILE 360\n//*                      MODTRC, FLASH, FCOUNT, CGROUP AND BRUST    *   FILE 360\n//*                      KEYWORDS.  SOME PROBLEMS WITH THE 6670     *   FILE 360\n//*                      CODE HAS ALSO BEEN FIXED.                  *   FILE 360\n//*                                                                 *   FILE 360\n//*           PRINT0FF   TSO HELP FOR THE MODIFIED PRINTOFF         *   FILE 360\n//*                      COMMAND.                                   *   FILE 360\n//*                                                                 *   FILE 360\n//*           SPY        THIS MEMBER IS THE SOURCE FOR SPY          *   FILE 360\n//*                      VERSION 3.1 WITH CROSS MEMORY SUPPORT      *   FILE 360\n//*                      INCLUDED FOR MVS/SP 1.3.  IT WAS           *   FILE 360\n//*                      ORIGINALLY TAKEN FROM FILE 338 ON THE      *   FILE 360\n//*                      CBT TAPE.  SEE THE PROGRAM                 *   FILE 360\n//*                      DOCUMENTATION FOR ADDITIONAL COMMENTS      *   FILE 360\n//*                      ABOUT THE ORIGIN OF THIS CODE.  THE        *   FILE 360\n//*                      VAST MAJORITY OF THE XM CODE CAME FROM     *   FILE 360\n//*                      THE BANK OF NEW SOUTH WALES.  I ADDED      *   FILE 360\n//*                      THE CODE TO SUPPORT THE PFKEYS IN THE      *   FILE 360\n//*                      3270 ENVIRONMEMT ALONG WITH THE BEGIN.     *   FILE 360\n//*                      FINISH AND AUTH MACROS.                    *   FILE 360\n//*                                                                 *   FILE 360\n//*           SWAP       THIS MEMBER IS THE SOURCE FOR SWAP         *   FILE 360\n//*                      VERSION 4.5.  IT WAS ORIGINALLY TAKEN      *   FILE 360\n//*                      FROM A FILE ON THE CBT TAPE.  SEE THE      *   FILE 360\n//*                      PROGRAM DOCUMENTATION FOR ADDITIONAL       *   FILE 360\n//*                      COMMENTS ABOUT THE ORIGIN OF THIS CODE.    *   FILE 360\n//*                      I ADDED THE SUPPORT FOR THE BEGIN,         *   FILE 360\n//*                      FINISH AND AUTH MACROS.                    *   FILE 360\n//*                                                                 *   FILE 360\n//*           UADS       TSO COMMAND THAT WILL ALLOW THOSE USERS    *   FILE 360\n//*                      WITH OPERATOR ABILITY TO DYNAMICALLY       *   FILE 360\n//*                      CHANGE THEIR UADS ENTRIES IN THE PSCB.     *   FILE 360\n//*                      ONCE CHANGED, IT WILL REMAIN IN EFFECT     *   FILE 360\n//*                      ACROSS A RELOGON (UNLESS USING ACF2 IN     *   FILE 360\n//*                      NOUADS MODE).                              *   FILE 360\n//*                                                                 *   FILE 360\n//*           UADSHELP   TSO HELP FOR THE UADS COMMAND.             *   FILE 360\n//*                                                                 *   FILE 360\n//*           VOLS       TSO COMMAND TO LIST FREE SPACE ON ALL      *   FILE 360\n//*                      OR SELECTED ONLINE DASD DEVICES.           *   FILE 360\n//*                      VOLUME SELECTION INCLUDES DEVICETYPE,      *   FILE 360\n//*                      ATTRIBUTE, VOLUME AND UCB.                 *   FILE 360\n//*                                                                 *   FILE 360\n//*                      (FIXED FOR DYNAMIC UCB'S - G.GORAB 8/95)   *   FILE 360\n//*                      (FIXED FOR 4-DIGIT UCB'S AND ALSO 3 DIGIT  *   FILE 360\n//*                        UCB'S, BY GORDON B. HAMPTON - 04/98)     *   FILE 360\n//*                                                                 *   FILE 360\n//*                      (Fixed for large volumes and different     *   FILE 360\n//*                        display options by Gordon B. Hampton,    *   FILE 360\n//*                        11/2008.  See member $$VOLSUP.)          *   FILE 360\n//*                                                                 *   FILE 360\n//*                      SEVERAL OLD VERSIONS OF VOLS ARE ALSO      *   FILE 360\n//*                      INCLUDED IN THIS FILE, TO MAKE SURE THAT   *   FILE 360\n//*                      PEOPLE ON OLDER SYSTEMS CAN STILL USE IT.  *   FILE 360\n//*                                                                 *   FILE 360\n//*           VOLSHELP   TSO HELP FOR THE VOLS COMMAND.             *   FILE 360\n//*                                                                 *   FILE 360\n//*           WSRCCCVT   MACRO THAT MAPS THE LOCAL USER CVT THAT    *   FILE 360\n//*                      IS GOTTEN AT IPL TIME BY IEFU84.  A        *   FILE 360\n//*                      LOCAL USER CVT IS VERY USEFUL FOR MANY     *   FILE 360\n//*                      RANDOM USES, WE FIND MANY FOR OURS.        *   FILE 360\n//*                                                                 *   FILE 360\n//*           ZSORTZ     THIS SUBROUTINE WILL SORT AN IN-CORE       *   FILE 360\n//*                      TABLE. ORIGINAL SOURCE UNKNOWN             *   FILE 360\n//*                      (PROBABLY EARLY 1970'S SHARE TAPE (?)).    *   FILE 360\n//*                                                                 *   FILE 360\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASMCMD": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x00\\x11\\x00\\x11\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "WSRCC"}, "text": "//*\n/*ROUTE  PRINT W6670\n//ASMCMD EXEC ASMHCL,\n//             PARM.ASM='NUM,NODECK,LOAD,TERM,NOESD,NORLD',\n//             PARM.LKED='LIST,LET,XREF,REFR,REUS,MAP,TERM'\n//ASM.SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//             DCB=BLKSIZE=12960\n//             DD DSN=SYS1.AMODGEN,DISP=SHR\n//             DD DSN=SYS2.MACLIB,DISP=SHR\n//             DD DSN=ADM.DP59017.WSRCCCBT.SOURCE,DISP=SHR\n//ASM.SYSTERM  DD SYSOUT=A,HOLD=YES\n//ASM.SYSIN    DD DSN=ADM.DP59017.WSRCCCBT.SOURCE(COMMAND),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB,DISP=SHR\n//LKED.SYSTERM DD SYSOUT=A,HOLD=YES\n//LKED.SYSIN   DD *\n  NAME COMMAND(R)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMSPY": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x00\\x10\\x00\\x10\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "WSRCC"}, "text": "//*\n/*ROUTE  PRINT W6670\n//ASMSPY EXEC ASMHCL,\n//             PARM.ASM='NUM,NODECK,LOAD,TERM,NOESD,NORLD',\n//             PARM.LKED='LIST,LET,XREF,REFR,REUS,MAP,TERM'\n//ASM.SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//             DD DSN=SYS1.AMODGEN,DISP=SHR\n//             DD DSN=SYS2.MACLIB,DISP=SHR\n//             DD DSN=ADM.DP59017.WSRCCCBT.SOURCE,DISP=SHR\n//ASM.SYSTERM  DD SYSOUT=A,HOLD=YES\n//ASM.SYSIN    DD DSN=ADM.DP59017.WSRCCCBT.SOURCE(NEWSPY),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB,DISP=SHR\n//LKED.SYSTERM DD SYSOUT=A,HOLD=YES\n//LKED.SYSIN   DD *\n  NAME SPY(R)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMSWP": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x00\\x11\\x00\\x11\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "WSRCC"}, "text": "//*\n/*ROUTE  PRINT W6670\n//ASMSWP EXEC ASMHCL,\n//             PARM.ASM='NUM,NODECK,LOAD,TERM,NOESD,NORLD',\n//             PARM.LKED='LIST,LET,XREF,REFR,REUS,MAP,TERM'\n//ASM.SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR,\n//             DCB=BLKSIZE=12960\n//             DD DSN=SYS1.AMODGEN,DISP=SHR,\n//             DD DSN=SYS2.MACLIB,DISP=SHR\n//             DD DSN=ADM.DP59017.WSRCCCBT.SOURCE,DISP=SHR\n//ASM.SYSTERM  DD SYSOUT=A,HOLD=YES\n//ASM.SYSIN    DD DSN=ADM.DP59017.WSRCCCBT.SOURCE(SWAP),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB,DISP=SHR\n//LKED.SYSTERM DD SYSOUT=A,HOLD=YES\n//LKED.SYSIN   DD *\n  NAME SWAP(R)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AUTH": {"ttr": 535, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x00\\x0b\\x00\\x0b\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "WSRCC"}, "text": "         MACRO\n&NAME    AUTH  &P\n         AIF   ('&NAME' EQ '').START\n&NAME    DS    0H\n.START   AIF   ('&P' EQ '' OR '&P' NE 'ON').OFF\n         SR    1,1 .               LOAD AUTHORIZATION ON CODE\n         SVC   234 .               TURN AUTHORIZATION ON\n         MEXIT\n.OFF     LA    1,4 .               LOAD AUTHORIZATION OFF CODE\n         SVC   234 .               TURN AUTHORIZATION OFF\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BEGIN": {"ttr": 537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x00\\xf1\\x00\\xf1\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 241, "newlines": 241, "modlines": 0, "user": "WSRCC"}, "text": "         MACRO\n&LABEL   BEGIN &SAVAREA,       * NAME OF SAVE AREA IN PROGRAM          *\n               &NAME,          * NAME ON STM INSTRUCTION IF &STMLBL='' *\n               &CSECT=YES,       YES - GENERATE CSECT IF NONE FOUND    *\n               &TYPE=CSECT,      TYPE OF ENTRY: CSECT OR ENTRY         *\n               &BASE=,           UP TO 3 BASE REGS R,(R,R),OR(R,R,R)   *\n               &SAVE=,           ADDRESS OR SPECIFICATION OF SAVEAREA  *\n               &TITSTMT=YES,     YES - GENERATE A TITLE STATEMENT      *\n               &TITLBL=*DFLT,    LABEL FOR TITLE STATEMENT             *\n               &TITLE=,          TITLE INFORMATION                     *\n               &STMLBL=,         LABEL FOR THE STM STATEMENT           *\n               &NOP=NO,          YES - GENERATE NOPR'S FOR ZAPPING     *\n               &REQUS=YES,       YES - GENERATE REGISTER EQUATES       *\n               &R=R,             CHARACTERS TO PREFIX REGISTER NUMBERS *\n               &GEN=NOGEN,       LIST CODE FOR GETMAINING SAVE AREA    *\n               &USING13=YES,     YES - INCLUDE USING R13 FOR &SAVAREA  *\n               &VER=,            VERSION OF CODE              (4 CHAR) *\n               &ID=,           * HAS NO FUNCTION - FOR COMPATIBILITY   *\n               &ICATCH=YES,      YES - INCLUDE WSRCC BEGIN EYECATCH    *\n               &BUREAU=WSRCC,    BUREAU RESPONSIBLE FOR CODE  (7 CHAR) *\n               &SECTION=TECHSUP, SECTION RESPONSIBLE FOR CODE (7 CHAR) *\n               &UNIT=SYSSOFT,    UNIT RESPONSIBLE FOR CODE    (7 CHAR) *\n               &AUTHOR=***       AUTHOR'S INITIALS            (3 CHAR)\n.*\n.* ABOVE COMMENTS PRECEEDED BY A ASTERISK ('*') INDICATE PARAMETER\n.* IS INCLUDED FOR COMPATIBILITY ONLY AND SHOULD NOT BE USED\n.*\n.*\n         GBLB  &RFLAG\n         GBLC  &RLEN,&RSP\n         LCLC  &CLABEL,&SCODE,&SREG1,&SREG2,&SLBL,&SAVNAME,&BREG1\n         LCLC  &TITLBLC,&TITL,&TITLVER,&VERTEMP\n.*\n         LCLC  &C,&SPOT,&HDR,&CVAL\n.*\n.*\n.*\n         MNOTE *,'***WSRCC REENTRANT BEGIN MACRO V01.01***'\n.*                  WITH THANKS TO HEWLETT-PACKARD BAEDP\n.*\n.*\n&CLABEL  SETC  '&SYSECT'\n         AIF   ('&CSECT' NE 'YES').CLBL99\n&CLABEL SETC   '&LABEL'\n         AIF   ('&CLABEL' NE '').CLBL99\n&CLABEL  SETC  'PRIVATE'\n         MNOTE *,'*** NO LABEL ON BEGIN, &TYPE CALLED ''PRIVATE'' ***'\n.CLBL99  ANOP\n.*\n.*\n         AIF    ('&TYPE' NE 'ENTRY').ENT99\n&CLABEL  DS    0H\n         ENTRY &CLABEL\n         AGO   .CST99\n.ENT99   ANOP\n.*\n         AIF   ('&CSECT' NE 'YES').CST99\n&CLABEL  CSECT\n.CST99   ANOP\n.*\n.*\n.*\n&SLBL    SETC  '&STMLBL'\n         AIF   ('&SLBL' NE '').S1\n&SLBL    SETC  '&NAME'\n.S1      ANOP\n.*\n.*\n         USING &CLABEL,&R.15\n&C       SETC  'C'\n&SPOT    SETC  '&SYSECT'\n         AIF   ('&CLABEL' EQ '').LBL99\n&SPOT    SETC  '&CLABEL'\n         AIF   ('&TYPE' NE 'ENTRY').LBL99\n&C       SETC  'E'\n.LBL99   ANOP\n.*\n.*\n.*   PAD THE VERSION WITH _'S\n&VERTEMP SETC  '____'\n         AIF   ('&VER' EQ '').VERNULL\n&VERTEMP SETC  '&VER'\n         AIF   ('&VER'(1,1) NE '''').NOQUOTE\n&VERTEMP SETC  '&VER'(2,K'&VER-2)\n.NOQUOTE ANOP\n         LCLC  &PADSTG\n&PADSTG  SETC  (4)'_'\n&PADSTG  SETC  '&VERTEMP'.'&PADSTG'\n&VERTEMP SETC  '&PADSTG'(1,4)\n.VERNULL ANOP\n.*\n.*\n&HDR     SETC  'CL4''&VERTEMP.'''\n.HDR99   ANOP\n.*\n         AIF   ('&ICATCH' NE 'YES').NOICTCH\n         B     *+68\n         DC    AL1(64),CL3'ID='\n         DC    CL8'&SPOT'\n         DC    C'&C',AL3(&SPOT)\n         DC    &HDR\n         DC    C'_',C'&SYSDATE.@&SYSTIME._'\n         DC    CL7'&BUREAU',C'-'\n         DC    CL7'&SECTION',C':'\n         DC    CL7'&UNIT',C','\n         DC    CL3'&AUTHOR',C'.'\n.NOICTCH ANOP\n&SLBL    STM   &R.14,&R.12,12(&R.13)\n.*\n         AIF ('&NOP' EQ 'NO').NONOP\n         CNOP  0,4\n         B     *+20\n         DC    CL16'ZAP TO 17FF07FE:'\n         NOPR  R15         CAN ZAP TO 17FF ( XR  R15,R15 )\n         NOPR  R14         CAN ZAP TO 07FE ( BR  R14     )\n.NONOP   ANOP\n         DROP  &R.15\n.*\n.*\n&BREG1   SETC  '&BASE(1)'\n         AIF   ('&BREG1' NE '').B10\n&BREG1   SETC '&R.12'\n         MNOTE *,'** NO BASE REGISTER SPECIFIED ASSUME REGISTER 12 **'\n.B10     ANOP\n         LR    &BREG1,&R.15\n         USING &CLABEL,&BREG1\n         AIF   ('&BASE(2)' EQ '').B999\n         LA    &BASE(2),4095(&BREG1)\n         LA    &BASE(2),1(&BASE(2).)\n         USING &CLABEL+4096,&BASE(2)\n         AIF   ('&BASE(3)' EQ '').B999\n         LA    &BASE(3),4095(&BASE(2).)\n         LA    &BASE(3),1(&BASE(3).)\n         USING &CLABEL+8192,&BASE(3)\n.B999    ANOP\n.*\n         AIF   ('&SAVE' EQ 'NONE').SV99\n&SAVNAME SETC  '&SAVE(1)'\n&RLEN    SETC  '&SAVE(2)'\n&RSP     SETC  '&SAVE(3)'\n         AIF   ('&SAVNAME' NE '').SV10\n&SAVNAME SETC  '&SAVAREA'\n.SV10    ANOP\n         AIF   ('&SAVE(1)' NE '' OR '&SAVE(2)'  NE '' OR '&SAVE(3)' NE *\n               '').SV20\n         AIF   ('&SAVAREA' NE '').SVNRENT\n         AGO   .SVRENT\n.SV20    ANOP\n         AIF   ('&SAVE(2)' EQ '' AND '&SAVE(3)' EQ '').SVNRENT\n         AGO   .SVRENT\n.*\n.*\n.SVNRENT ANOP\n&RFLAG   SETB  0\n         LR    &R.15,&R.13\n         LA    &R.13,&SAVNAME\n         ST    &R.15,4(&R.13)\n         ST    &R.13,8(&R.15)\n         AGO   .SV99\n.*\n.*\n.SVRENT  ANOP\n&RFLAG   SETB  1\n         AIF   ('&RLEN' NE '').SVRSET\n&RLEN    SETC  '72'\n         MNOTE *,'*** REENTRANT SAVE AREA FORMAT USED ***'\n.SVRSET  ANOP\n.*\n.********* FOLLOWING FIX APPLIED 15 JAN 79 - DP *********************\n.* IF &RLEN IS AN 'L'' TYPE CONSTANT, DOUBLE-UP THE QUOTES FOR MNOTE\n         GBLC  &RLENA,&RLENB\n         LCLA  &LRLEN\n&RLENA   SETC  ''\n&RLENB   SETC  '&RLEN'\n         AIF   ('&RLEN'(1,2) NE 'L''').NORLQ\n&RLENA   SETC  'L'''''\n&LRLEN   SETA  K'&RLEN-2\n&RLENB   SETC  '&RLEN'(3,&LRLEN)\n.NORLQ   ANOP\n         MNOTE *,'*      GETMAIN R,LV=&RLENA.&RLENB,SP=&RSP'\n         PUSH  PRINT\n         PRINT &GEN\n         GETMAIN R,LV=&RLEN,SP=&RSP\n         POP   PRINT\n         LR    &R.15,&R.13\n         LR    &R.13,&R.1\n         ST    &R.15,4(&R.13)\n         ST    &R.13,8(&R.15)\n         LM    &R.15,&R.1,16(&R.15)    RESET 0, 1, AND 15\n         AGO   .SV99\n.*\n.*\n.SV99    ANOP\n.*\n.*\n         AIF   ('&SAVNAME' EQ '').UTH99\n         AIF   ('&USING13' NE 'YES').UTH99\n         USING &SAVNAME,&R.13\n.UTH99   ANOP\n.*\n         AIF   ('&REQUS' NE 'YES').REQNO\n         MNOTE *,'REGISTER NAMES &R.0 THROUGH &R.15 ARE ASSIGNED'\n&R.0     EQU   0\n&R.1     EQU   1\n&R.2     EQU   2\n&R.3     EQU   3\n&R.4     EQU   4\n&R.5     EQU   5\n&R.6     EQU   6\n&R.7     EQU   7\n&R.8     EQU   8\n&R.9     EQU   9\n&R.10    EQU   10\n&R.11    EQU   11\n&R.12    EQU   12\n&R.13    EQU   13\n&R.14    EQU   14\n&R.15    EQU   15\n.REQNO   ANOP\n.*\n         AIF   ('&TITSTMT' NE 'YES').TIT99\n&TITLBLC SETC  '&CLABEL'\n         AIF   ('&TITLBL' EQ '*DFLT').TIT50\n&TITLBLC SETC  '&TITLBL'\n.TIT50   ANOP\n&TITL    SETC  '&TITLE'\n         PUSH  PRINT\n         PRINT OFF       TITLE STATEMENT FOLLOWS\n         AIF   ('&TITLE' NE '').TIT79\n&TITL    SETC  ''' '''\n         AIF   ('&VER' EQ '').TIT79\n&TITLVER SETC  '&VER'\n&TITL    SETC  '''VER '.'&TITLVER'.''''\n.TIT79   ANOP\n         AIF   ('&TITL'(1,1) EQ '''').TIT89\n&TITL    SETC  ''''.'&TITL'.''''\n.TIT89   ANOP\n&TITLBLC TITLE &TITL\n         POP   PRINT\n.TIT99   ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMMAND": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x06\\x05/\\x01\\x06\\x05/\\t%\\x012\\x012\\x00\\x00\\xe3\\xd6\\xd4\\xd2\\xc9\\xd5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-02-21T00:00:00", "modifydate": "2006-02-21T09:25:00", "lines": 306, "newlines": 306, "modlines": 0, "user": "TOMKINS"}, "text": "         TITLE 'C O M M A N D  --  Issue System Operator Commands V2.0'\n***********************************************************************\n*                                                                     *\n*                           C O M M A N D                             *\n*                                                                     *\n*                   Issue System Operator Commands                    *\n*                                                                     *\n*                                                                     *\n*     This program accepts system or JES operator commands as         *\n*     input and executes them using SVC 34. It must be APF            *\n*     authorized.                                                     *\n*                                                                     *\n*     COMMAND can operate in one of three modes:                      *\n*                                                                     *\n*     1) Batch or CALLed program                                      *\n*        In this mode COMMAND accepts input as either 80-byte         *\n*        card images from SYSIN or a single command from the PARM     *\n*        field. The response to the operator command will             *\n*        appear on all operator consoles. For example:                *\n*                                                                     *\n*           //STEP1    EXEC PGM=COMMAND,PARM='VARY 017,ONLINE'        *\n*                                                                     *\n*           - or -                                                    *\n*                                                                     *\n*           //STEP1    EXEC PGM=COMMAND                               *\n*           //SYSIN    DD *                                           *\n*           VARY 017,ONLINE                                           *\n*           /*                                                        *\n*                                                                     *\n*     2) TSO Command Processor                                        *\n*        In this mode COMMAND expects to find the operator command    *\n*        directly following on the TSO input line. The response to    *\n*        OS commands will then be displayed on the TSO terminal.      *\n*        The AUTHCMD section of IKJTSOxx must contain COMMAND.        *\n*        Response to JES commands will appear on all consoles.        *\n*        For example:                                                 *\n*                                                                     *\n*           COMMAND D T         <--- (Response will appear on CRT)    *\n*                                                                     *\n*     3) Callable subroutine                                          *\n*        In this mode COMMAND accepts input according to standard     *\n*        OS linkage conventions. In addition to the command itself,   *\n*        a second parameter may be passed which contains the          *\n*        console number where you wish the response to appear.        *\n*        (The SVC 34 will also assume the authority of that           *\n*        console.) For example:                                       *\n*                                                                     *\n*           LA       R1,CMDADDR                                       *\n*           LA       R15,=V(COMMAND)                                  *\n*           BALR     R14,R15                                          *\n*                                                                     *\n*           CMDADDR  DC    A(OPERCMD)                                 *\n*           CNSADDR  DC    XL1'80',AL3(CONSOLE)                       *\n*           OPERCMD  DC    H(3),CL3'D T'                              *\n*           CONSOLE  DC    F'5'                                       *\n*                                                                     *\n         EJECT\n*                                                                     *\n*        This would make it appear as if 'D T' were issued from       *\n*        console 5. (This method is used by program 'SPY')            *\n*                                                                     *\n*     Just prior to issuing a command via SVC 34, COMMAND will        *\n*     issue a WTO of the form                                         *\n*                                                                     *\n*        SCECMD01 - userid  - VARY 017,ONLINE                         *\n*                                                                     *\n*     This will appear on the operator's console and in SYSLOG.       *\n*                                                                     *\n*     COMMAND may be used to issue replies to WTORs. Since the        *\n*     reply may be sensitive (for example, a password) COMMAND        *\n*     will supress it whenever a REPLY is issued.                     *\n*                                                                     *\n*     Author:                                                         *\n*       The original version of COMMAND was written by Mark Sorkin.   *\n*       The current version has been heavily modified at SCE.         *\n*       Questions and comments may be sent to                         *\n*                                                                     *\n*          Steve Langley                                              *\n*          Southern California Edison                                 *\n*          P.O. Box 800                                               *\n*          Rosemead, Calif. 91770                                     *\n*          1-213-572-3435                                             *\n*                                                                     *\n*       Several coding/logic errors have been corrected at DCX.       *\n*       Questions and comments may be sent to                         *\n*                                                                     *\n*          Michael J. Tomkins                                         *\n*          DaimlerChrysler Corporation                                *\n*          CIMS: 450-03-20                                            *\n*          38111 Van Dyke Ave.                                        *\n*          Sterling Heights, Mi. 48312                                *\n*          1-586-274-7548                                             *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* General Comments:                                             WDA#01*\n*                                                                     *\n* R0     EQU   0                  register 0                          *\n* R1     EQU   1                  register 1                          *\n* R2     EQU   2                  work register                       *\n* R3     EQU   3                  work register                       *\n* R4     EQU   4                  work register                       *\n* R10    EQU   10                 parameter list register             *\n* R11    EQU   11                 subroutine linkage register         *\n* R12    EQU   12                 base register                       *\n* R13    EQU   13                 save area address register          *\n* R14    EQU   14                 register 14                         *\n* R15    EQU   15                 register 15                         *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT ON,GEN\n         YREGS\nCOMMAND  CSECT\nCOMMAND  AMODE 24\nCOMMAND  RMODE 24\n         ENTRY COMMAND\n         USING COMMAND,R12\n         SAVE  (14,12),,' COMMAND &SYSDATE &SYSTIME '\n         LR    R12,R15\n         LA    R3,SAVE\n         ST    R13,SAVE+4\n         ST    R3,8(,R13)\n         LR    R13,R3\n         SPACE\n         LR    R10,R1             save parameter register\n         SPACE\n         L     R2,CVTPTR          R2 = addr of CVT\n         USING CVT,R2\n         L     R3,CVTTCBP         R3 = addr of new/old words\n         L     R4,12(,R3)         R4 = addr of our ASCB\n         USING ASCB,R4\n         MVC   ASID,ASCBASID      save our ASID\n         DROP  R4\n         L     R3,0(,R3)          R3 = addr of our TCB\n         USING TCB,R3\n         L     R3,TCBTIO          R3 = addr of TIOT\n         DROP  R3\n         USING TIOT1,R3\n         MVC   JOBNAME(8),TIOCNJOB save our jobname\n         SPACE\nINITDONE EQU   *                  check out input parm\n         TM    0(R10),X'80'       is first the only parm?\n         BO    ONEPARM            yes; only parm\n         TM    4(R10),X'80'       is second the last parm?\n         BO    TWOPARMS           yes; two parms (called with CNxx)\n         SPACE\n***********************************************************************\n*                                                                     *\n*     A X'80' was not found in the high order byte of the first       *\n*     two parms, so we can assume COMMAND is being called as a CP.    *\n*     If the command being issued is not a JES command then           *\n*     place our ASID into the R0 mask and continue. If it is a        *\n*     JES command, simply issue the command (Mode 1).                 *\n*                                                                     *\n***********************************************************************\n         XR    R2,R2              clear R2\n         LH    R2,ASID            R2 = ASID of caller\n         O     R2,=XL4'00008000'  tell SVC34 its an ASID\n         ST    R2,R0MASK          and override the R0 mask\n         L     R3,0(,R10)         R3 = addr of input line\n         LA    R4,4(,R3)          R4 = addr of first char of input\n         AH    R4,2(,R3)          R4 = addr of first char past command\n         L     R2,0(,R10)         R2 = addr of input line\n         AH    R2,0(,R3)          R2 = addr of last char plus one\n         SR    R2,R4              R2 = length of oper cmd portion\n         BCTR  R2,0               R2 = R2 - 1 for EX MVC\n         EX    R2,MOVE1           move cmd into card\n         CLI   CARD,C'$'          is this a JES2 cmd?\n         BNE   DOSVC34            no;  go do it\n         XC    R0MASK(4),R0MASK   yes; don't try to get back reply\n         B     DOSVC34\n         SPACE\n***********************************************************************\n*                                                                     *\n*     X'80' was found in the high order byte of the second parm,      *\n*     so we have been called as a subroutine (Mode 3). The second     *\n*     parm contains the console ID where the command is to 'come      *\n*     from', so use that for the R0 mask.                             *\n*                                                                     *\n***********************************************************************\nTWOPARMS L     R3,4(,R10)         R3 = addr of R0 mask for SVC34\n         MVC   R0MASK(4),0(R3)    save R0 mask for SVC34\n         SPACE\n***********************************************************************\n*                                                                     *\n*     Only one parm was passed, so we are being called in mode 1.     *\n*     Just issue the command from the parm string.                    *\n*                                                                     *\n***********************************************************************\nONEPARM  L     R10,0(,R10)        get parameter address\n         LH    R3,0(,R10)         get parameter text length\n         LTR   R3,R3              is parameter text present?\n         BZ    USESYSIN           no - go get commands from SYSIN\n         BCTR  R3,R0              decrement R3 for use in execute\n         EX    R3,MOVE            execute MVC\nDOSVC34  LA    R11,EOJ            get address for return from SVC34\n         B     SVC34              go issue command\n         SPACE\n***********************************************************************\n*                                                                     *\n*     No parm field found, so look at SYSIN for input                 *\n*                                                                     *\n***********************************************************************\nUSESYSIN OPEN  (SYSIN,INPUT)      open SYSIN\nGETSYSIN GET   SYSIN,CARD         get a SYSIN record into SVC34 list\n         MVC   CARD+72(8),CARD+80 blank out sequence field in 73-80\n         CLI   CARD,C'*'          is this a comment?\n         BE    GETSYSIN           yes;go get another card\n         LA    R11,GETSYSIN       get address for return from SVC34\n         B     SVC34              go issue command\n         SPACE\nEODSYSIN CLOSE (SYSIN)            close SYSIN\n         SPACE\nEOJ      EQU   *\n         L     R13,SAVE+4\n         RETURN (14,12),RC=0      return to caller\n         EJECT\n***********************************************************************\n*                                                                     *\n*     This routine actually issues the SVC 34. It either returns      *\n*     to the SYSIN-read loop or EOJ depending on the value of R11     *\n*                                                                     *\n***********************************************************************\nSVC34    MVC   WTOTEXT(100),CARD  move command text into WTO list\n         CLI   WTOTEXT,C'r'       is this a lower case reply?\n         BE    REPLYCK            no; go on\n         CLI   WTOTEXT,C'R'       is this an upper case reply?\n         BE    REPLYCK            no; go on\n         CLI   WTOTEXT,X'F0'      start with a number?\n         BL    NOTREPLY           no; can't be a reply\n         B     REPLY              yes; must be a reply\nREPLYCK  CLI   WTOTEXT+1,C' '     is 2nd character a blank?\n         BNE   NOTREPLY           no; can't be a reply\nREPLY    MVC   WTOTEXT(100),=CL100'Reply Suppressed by ''COMMAND'''\nNOTREPLY LA    R3,WTOTEXT+L'WTOTEXT-1 point to end of text\n         LA    R4,WTOTEXT         point to beginning of text\n         SPACE\nFINDTEXT EQU   *                  find last text character\n         CR    R3,R4              all blank?\n         BL    SVC34END           yes - ignore it\n         CLI   0(R3),C' '         blank character?\n         BNE   GOTTEXT            no - found end of text\n         BCT   R3,FINDTEXT        keep on looking\n         SPACE\nGOTTEXT  EQU   *                  build parameter list lengths\n         MVC   WTOUSER(8),JOBNAME save job name in message\n         SR    R3,R4              compute length of\n         LA    R3,5(,R3)          text and list prefix\n         STH   R3,CMDLIST         set SVC 34 list length\n         LA    R3,L'WTOID(,R3)    add WTO id length\n         LA    R3,L'WTOUSER(,R3)  add WTO id length\n         STH   R3,WTOLEN          set WTO list length\n         SPACE\n         MODESET KEY=ZERO         indicate key=zero\n         WTO   MF=(E,WTOLIST)     echo command to operator via WTO\n         L     R0,R0MASK          load R0 for SVC34 (probably zero)\n         MGCR  CMDLIST            issue SVC 34 to process command\n         MODESET KEY=NZERO        go back to user key\n         SPACE\nSVC34END EQU   *                  end of command routine\n         BR    R11                return to mainline\n         EJECT\nSAVE     DC    18F'0'\nR0MASK   DC    A(0)               R0 mask for SVC34\nJOBNAME  DC    CL8' '             our jobname\nASID     DC    H'00'              our ASID\n         SPACE\nWTOLIST  DS    0F                 WTO list\nWTOLEN   DC    AL2(*-*,0)         text length & MCS flags\nWTOID    DC    C'SCECMD01 - '     text identifier\nWTOUSER  DC    C'XXXXXXXX - '     caller's jobname\nWTOTEXT  DC    CL100' '           text passed to command processor\n         SPACE\n         CNOP  4,8                align to middle of double word\nCMDLIST  DC    AL2(*-*,0)         SVC 34 list\nCARD     DC    CL101' '           command text\n         SPACE\nMOVE     MVC   CARD(*-*),2(R10)   move parm text into SVC 34 list\nMOVE1    MVC   CARD(*-*),0(R4)    move parm text into SVC 34 list\n         SPACE\n         SPACE\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,LRECL=80,MACRF=(GM),RECFM=FB,     *\n               EODAD=EODSYSIN\n         SPACE\n         LTORG                    begin literal pool\n         EJECT\n***********************************************************************\n*                                                                     *\n*                System Control Block Mapping DSECTs                  *\n*                                                                     *\n*      All these macros can be found in the 'SYS1.MACLIB' maclib      *\n*                                                                     *\n***********************************************************************\n         CVT   DSECT=YES,LIST=YES Communications Vector Table\n         SPACE 2\n         DSECT\n         IEFTIOT1                 Task I/O Table\n         SPACE 2\n         IHAASCB                  Address Space Control Block\n         SPACE 2\n         IKJTCB                   Task Control Block\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DISIMAGE": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x05g\\x05g\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 1383, "newlines": 1383, "modlines": 0, "user": "WSRCC"}, "text": "         TITLE 'W.S.R.C.C.  <DISIMAGE>  BUILD IEBIMAGE SOURCE DECKS FRO*\n               M MEMBERS IN YOUR IMAGELIB - JOHN A SHELL'\n*---------------------------------------------------------------------*\n*                                                                     *\n*                             <DISIMAGE>                              *\n*                                                                     *\n*             IBM 3800 PRINTING SUBSYSTEM SUPPORT UTILITY             *\n*                                                                     *\n*                                                                     *\n*      DISIMAGE WILL ALLOW YOU TO CREATE AN IEBIMAGE SOURCE DECK      *\n*      FROM ANY MEMBER OF YOUR SYSTEM OR LOCAL IMAGELIB THAT WAS      *\n*      CREATED BY IEBIMAGE IN THE FIRST PLACE. THIS WILL ALLOW        *\n*      LOCAL MODIFICATION OF IBM CHARACTER SETS FOR WHICH NO SOURCE   *\n*      IS PROVIDED. IT WILL ALSO ELIMINATE THE NEED TO RETAIN THE     *\n*      SOURCE DECKS, WHICH ARE QUITE BULKY, FOR ANY LOCAL FONTS.      *\n*      AS LONG AS YOU HAVE A USABLE COPY OF THE IMAGELIB MEMBER,      *\n*      THE SOURCE DECK CAN BE RECREATED.                              *\n*                                                                     *\n*                              NOTES.                                 *\n*                                                                     *\n*      1. THIS PROGRAM WILL NOT RECREATE SOURCE DECKS FOR             *\n*         COPYMOD'S, OR FOR NON-3800 IMAGELIB MODULES CREATED         *\n*         WITH UTILITIES OTHER THAN IEBIMAGE.                         *\n*                                                                     *\n*      2. THIS PROGRAM WILL REQUIRE ACCESS TO THE <ZSORTZ>            *\n*         SUBROUTINE. THIS WILL THE SORT THE INTERNAL TABLE           *\n*         OF CHANNEL-LINE NUMBER RELATIONSHIPS (CHTBL) FOR            *\n*         USE IN GENERATING FCB CARDS.                                *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                       *** SAMPLE JCL ***                            *\n*                                                                     *\n*    //IMAGE   EXEC PGM=DISIMAGE,PARM='MODEL3' ..OR.. PARM='MODEL1'   *\n*    //SYSUT1    DD DISP=SHR,DSN=SYS1.IMAGELIB    IEBIMAGE SYSUT1     *\n*    //SYSUT2    DD UNIT=SYSDA,SPACE=(80,...  )            SYSIN      *\n*    //SYSUT3    DD UNIT=SYSDA,SPACE=(121,... )            SYSPRINT   *\n*    //SORTIN    DD UNIT=SYSDA,SPACE=(80,...  )   SORT INPUT          *\n*    //SORTMSGS  DD SYSOUT=A                           SYSOUT         *\n*    //SORTWK01  DD UNIT=SYSDA,SPACE=(...     )        WORKS          *\n*        ....                                           *             *\n*    //SORTWK0N  DD UNIT=SYSDA,SPACE=(...     )         *             *\n*    //SORTOUT   DD UNIT=SYSDA,SPACE=(80,...  ),...    OUTPUT         *\n*    //SYSPRINT  DD SYSOUT=A                      DISIMAGE LISTING    *\n*    //SYSIN     DD *,DCB=BLKSIZE=80                       CARDS IN   *\n*       ...CONTROL CARDS...                                           *\n*    /*                                                               *\n*                                                                     *\n*    ...WHERE THE PARM TELLS WHAT IBM 3800 MODEL YOU ARE RUNNING      *\n*       ON.   PARM='MODEL3' IS THE DEFAULT IF PARM IS OMITTED.        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*     \"DISIMAGE\" CONTROL INFORMATION IS PUNCHED IN THE FIRST SIX      *\n*      COLUMNS OF THE CONTROL CARDS. THE REMAINDER OF THE CARD,       *\n*      WHILE IT IS IGNORED, WILL BE PRINTED ON THE CONTROL LISTING    *\n*      AND THUS CAN BE USED FOR DOCUMENTATION.                        *\n*                                                                     *\n*                         CONTROL CARD FORMAT                         *\n*                                                                     *\n*      COLUMN  CODE  MEANING                                          *\n*                                                                     *\n*         1      C   ALL COMPONENTS OF A STANDARD IBM CHARACTER       *\n*                     ARRANGEMENT TABLE (ALL LCS'S AND/OR GCM'S)      *\n*                     WILL BE GENERATED. !!MUST BE ONLY CARD IN!!     *\n*                                                                     *\n*                F   FORMS CONTROL BUFFER (FCB) MODULE.               *\n*                                                                     *\n*                G   GRAPHIC CHARACTER MODIFICATION (GCM) MODULE.     *\n*                                                                     *\n*                L   LIBRARY CHARACTER SET (LCS) MODULE.              *\n*                                                                     *\n*                T   CHARACTER ARRANGEMENT TABLE (CAT) MODULE.        *\n*                                                                     *\n*         2      =   (MUST BE AN EQUAL SIGN)                          *\n*                                                                     *\n*         3      *   GENERATE WORLD TRADE NATIONAL USE GRAPHICS       *\n*                               GCM (MUST BE  \"G=*\").                 *\n*                                                                     *\n*        3-4    XX   MUST BE TWO HEX DIGITS (2ND DIGIT ODD)           *\n*                          FOR ALL LCS MODULES ONLY.                  *\n*                                                                     *\n*        3-6   XXXX  FOR ALL OTHER MODULES, CAN BE FROM 1 TO 4        *\n*                      ALPHA, NUMERIC OR NATIONAL CHARACTERS.         *\n*                                                                     *\n*    XXXX VALUE IS PROVIDED BY BYTES 5 TO 8 OF THE IEBIMAGE MEMBER    *\n*               NAME (E.G. FOR GRF2BRTA, CODE G=BRTA).                *\n*                                                                     *\n*                                                                     *\n*                         SYSIN ERROR MESSAGES                        *\n*                                                                     *\n*               ERR01 CC2 NOT EQUAL       ALL CODES                   *\n*               ERR02 NAME BLANK              \"                       *\n*               ERR03 NAME INVALID            \"                       *\n*               ERR04 IMBEDED BLANK           \"                       *\n*               ERR05 CODE INVALID            \"                       *\n*               ERR06 NAME TOO LONG       CODE L ONLY                 *\n*               ERR07 NAME NOT HEX            \"                       *\n*               ERR08 NAME NOT ODD            \"                       *\n*               ERR09 UNKNOWN CHARS       CODE C ONLY                 *\n*               ERR10 NOT 1ST/ONLY            \"                       *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\nDISIMAGE CSECT\nR0       EQU   0                   *************\nR1       EQU   1                   *           *\nR2       EQU   2                   * REGISTERS *\nR3       EQU   3                   *    ARE    *\nR4       EQU   4                   *  EQUATED  *\nR5       EQU   5                   *    TO     *\nR6       EQU   6                   *  SYMBOLS  *\nR7       EQU   7                   *    SO     *\nR8       EQU   8                   *   THEY    *\nR9       EQU   9                   *   WILL    *\nR10      EQU   10                  *   SHOW    *\nR11      EQU   11                  *    ON     *\nR12      EQU   12                  *   CROSS   *\nR13      EQU   13                  * REFERENCE *\nR14      EQU   14                  *           *\nR15      EQU   15                  *************\n         USING *,R15               INITIALLY USE ENTRY AS BASE REGISTER\n         B     $BG0001             BRANCH AROUND CONSTANTS\n         DC    CL8'DISIMAGE'       CSECT ID\n         DC    C'_',C'&SYSDATE.@&SYSTIME._' SYSTEM DATE AND TIME\n$BG0001A DS    18F                 MY REGISTER SAVE AREA\n$BG0001D DC    A($BG0001A+4096)\n$BG0001  DS    0H\n         STM   R14,R12,12(R13)     SAVE CLG PGMS REGS\n         LA    R3,$BG0001A         LOAD ADDR OF MY REG SAVE AREA\n         ST    R13,4(R3)           STORE ADDR OF CLG SAVE IN MINE\n         ST    R3,8(R13)           STORE ADDR OF MY SAVE IN CLG PGM\n         LR    R13,R3              POINT REG 13 AT MY SAVE AREA\n         DROP  R15                 DROP INITIAL BASE REGISTER\n         USING $BG0001A,R13,R12\n         L     R12,$BG0001D        LOAD 2ND BASE REGISTER\n         L     R3,0(R1)            LOAD ADDRESS AND\n         LH    R4,0(R3)                 LENGTH OF PARM INFORMATION\n         LTR   R4,R4               WAS PARM OMITTED (LENGTH=0)...\n         BZ    ENDPARM                ..YES, USE DEFAULT (MODEL3)\n         CH    R4,=H'+6'           IS PARM LENGTH SIX (MODELX)...\n         BNE   ENDPARM                ..NO, USE DEFAULT (MODEL3)\n         LA    R3,2(R3)            STEP PARM POINTER PAST THE LENGTH\n         CLC   =C'MODEL1',0(R3)    IS THIS FOR AN IBM 3800 MODEL 1...\n         BNE   ENDPARM                ..NO, USE DEFAULT (MODEL3)\n         OI    MOD1SW+1,X'F0'      ACTIVATE OPTION CARD BYPASS\n         MVI   MODEL,C'1'          SET MODEL NUMBER TO ONE\nENDPARM  EQU   *\n         LA    R1,2                LOAD 1 TO SPECIFY UNIT  *** TIME ***\n         SVC   11                  ISSUE TIME SVC                     *\n         ST    R1,DBLWRD+4         MOVE JULIAN DATE INTO CORE AND\n         ED    HDATE,DBLWRD+5           EDIT INTO HEADER LITERAL\n         ST    R0,DBLWRD           MOVE DECIMAL TIME INTO CORE THEN\n         MVO   DBLWRD+4(4),DBLWRD(3)    SHIFT INTO PACKED FORMAT AND\n         ED    HTIME,DBLWRD+4           EDIT INTO HEADER LITERAL\n         SR    R3,R3               ZERO SYSIN AND\n         SR    R4,R4                    SYSUT2 COUNTERS\n         EJECT\n* OPEN1  EQU   *\n         LA    R1,SIOB             LOAD REG1 W/LIST ADDR.  *** OPEN ***\n         SVC   19                  ISSUE OPEN SVC                     *\n         SR    R9,R9               ZERO LINE COUNTER\nGETSIN   EQU   *\n         LA    R0,SINRCD           POINT AT SYSIN RCD AREA  *** GET ***\n         L     R1,SIOB             POINT AT SYSIN DCB                 *\n         L     R15,48(R1)          LOAD GET ROUTINE ADDR              *\n         BALR  R14,R15             LINK TO GET ROUTINE                *\n         LA    R3,1(R3)            INCREMENT SYSIN COUNTER\n         MVI   EMNO,X'01'          SET ERROR MESSAGE NUMBER\n         CLI   SIEQUALS,C'='       BYTE 2 IS EQUAL SIGN...\n         BNE   BADSIN                 ..NO, FLAG AS ERROR\n         MVC   MNCA,SINAME         MOVE MODULE NAME TO COMPARE AREA\n         MVI   EMNO,X'02'          SET ERROR MESSAGE NUMBER\n         CLC   MNCA,BLANKS         IS MODULE NAME TOTALLY BLANK...\n         BE    BADSIN                 ..YES, FLAG AS ERROR\n         L     R14,=A(VMNTBL)      POINT AT VALID MODULE NAME TABLE\n         TRT   MNCA,0(R14)         VALID MODULE NAME...\n         BZ    CCHECK                 ..SO FAR, GO CHECK REQUEST CODE\n         STC   R2,FBYTE               ..MAYBE NOT, SAVE FUNCTION BYTE\n         MVI   EMNO,X'03'          SET ERROR MESSAGE NUMBER\n         CLI   FBYTE,X'FF'         BAD CHARACTER...\n         BE    BADSIN                 ..YES, FLAG AS ERROR\n         CLI   MNCA,C'*'           WORLD TRADE NATIONAL USE GRAPHICS...\n         BE    GCHECK                 ..YES, CHECK FOR G CODE\n         MVI   EMNO,X'04'          SET ERROR MESSAGE NUMBER\n         CLC   BLANKS,0(R1)        ALL REMAINING CHARACTERS BLANK...\n         BNE   BADSIN                 ..NO, FLAG AS ERROR\nCCHECK   EQU   *\n         CLI   SIMODTYP,C'C'       CHARS NAME REQUEST...\n         BNE   FCHECK                 ..NO, GO CHECK FOR FCB REQUEST\n         MVI   EMNO,X'0A'          SET ERROR MESSAGE NUMBER\n         LTR   R4,R4               WERE THERE ANY SYSUT2 CARDS OUT...\n         BNZ   BADSIN                 ..YES, C CARD MUST BE 1ST/ONLY\n         MVI   SINLINE,C'0'        FORCE DOUBLE SPACE FOR SYSIN LINE\n         L     R10,=A(CHARSTBL)    POINT AT TABLE OF CHARS\n         MVI   EMNO,X'09'          SET ERROR MESSAGE NUMBER\nCC1      EQU   *\n         CLC   SINAME,0(R10)       DOES THIS ENTRY MATCH OUR CHARS...\n         BE    CC2                    ..YES, EXPAND TABLE VALUES\n         CLI   0(R10),X'FF'        END OF TABLE...\n         BE    BADSIN                 ..YES, FLAG AS ERROR\n         LA    R10,28(R10)            ..NO, POINT AT NEXT ENTRY AND\n         B     CC1                              GO CHECK IT OUT\n*\nCC2      EQU   *\n         LA    R8,SINLINE          POINT AT OUTPUT LINE\n         BAL   R11,PRTOUT          GO PRINT SYSIN CARD IMAGE\n         NI    CRSW+1,X'0F'        RESET BRANCH TO NOP AND\n         MVC   SIFLAG+3(11),=C'GENERATED *' CHANGE PRINT LINE FLAG\n         LA    R10,4(R10)          STEP POINTER TO 1ST LCS NAME\n         LA    R6,GENEDLS          POINT AT 1ST GEN-ED L SLOT\n         LA    R5,4                SET LCS SCAN LIMIT\nCC3      EQU   *\n         CLC   =C'FF',0(R10)       NULL ENTRY...\n         BE    CC4                    ..YES, BYPASS IT\n         CLC   =C'7F',0(R10)       NULL ENTRY...\n         BE    CC4                    ..YES, BYPASS IT\n         CLI   0(R10),X'40'        EMPTY ENTRY...\n         BE    CC4                    ..YES, BYPASS IT\n         MVC   2(2,R6),0(R10)         ..NO, MOVE NAME TO GEN-ED SLOT\n         LA    R6,6(R6)            INCREMENT THE SLOT ADDRESS\nCC4      EQU   *\n         LA    R10,2(R10)          INCREMENT TO NEXT TABLE VALUE\n         BCT   R5,CC3                   (IF ANY) AND TRY AGAIN\n         MVC   0(25,R6),GENEDGS    MOVE UP THE G ENTRIES AND STOPPER\n         LA    R5,4                SET GCM SCAN LIMIT\nCC5      EQU   *\n         CLI   0(R10),X'40'        NULL ENTRY...\n         BE    CC6                    ..YES, END OF SCAN\n         MVC   2(4,R6),0(R10)         ..NO, MOVE NAME TO GEN-ED SLOT\n         LA    R6,6(R6)            INCREMENT THE SLOT ADDRESS\n         LA    R10,4(R10)          INCREMENT TO NEXT TABLE VALUE\n         BCT   R5,CC5                   (IF ANY) AND TRY AGAIN\nCC6      EQU   *\n         MVI   0(R6),X'FF'         INSERT TABLE STOPPER\n         LA    R6,GENEDLS          POINT AT 1ST GEN-ED L SLOT\n         B     CRSWAD              GO INSERT FIRST GEN-ED SYSIN CARD\n*\nFCHECK   EQU   *\n         CLI   SIMODTYP,C'F'       FCB MODULE REQUEST...\n         BNE   TCHECK                 ..NO, GO CHECK FOR CAT REQUEST\n         MVC   ATYPE+80,FCB        MOVE FCB AND\n         MVI   ANAME+80,X'08'           CONTROL BYTE TO ASSIGN CARD (2)\n         B     PRTSIN              GO LIST GOOD SYSIN CARD\n*\nTCHECK   EQU   *\n         CLI   SIMODTYP,C'T'       CAT MODULE REQUEST...\n         BNE   GCHECK                 ..NO, GO CHECK FOR GCM REQUEST\n         MVC   ATYPE+80,TABLE      MOVE TABLE AND\n         MVI   ANAME+80,X'10'           CONTROL BYTE TO ASSIGN CARD (2)\n         B     PRTSIN              GO LIST GOOD SYSIN CARD\n*\nGCHECK   EQU   *\n         CLI   SIMODTYP,C'G'       GCM MODULE REQUEST...\n         BNE   LCHECK                 ..NO, GO CHECK FOR LCS REQUEST\n         MVC   ATYPE+80,GRAPHIC    MOVE GRAPHIC AND\n         MVI   ANAME+80,X'04'           CONTROL BYTE TO ASSIGN CARD (2)\n         B     PRTSIN              GO LIST GOOD SYSIN CARD\n*\nLCHECK   EQU   *\n         MVI   EMNO,X'05'          SET ERROR MESSAGE NUMBER\n         CLI   SIMODTYP,C'L'       LCS MODULE REQUEST...\n         BNE   BADSIN                 ..NO, FLAG AS ERROR\n         MVC   ATYPE+80,CHARSET    MOVE CHARSET AND\n         MVI   ANAME+80,X'04'           CONTROL BYTE TO ASSIGN CARD (2)\n         MVI   EMNO,X'06'          SET ERROR MESSAGE NUMBER\n         CLC   SINAME+2(2),BLANKS  NAME SUFFIX MORE THAN TWO BYTES...\n         BNE   BADSIN                 ..YES, FLAG AS ERROR\n         MVI   EMNO,X'07'          SET ERROR MESSAGE NUMBER\n         L     R14,=A(VHVTBL)      POINT AT VALID HEX VALUE TABLE\n         TRT   SINAME(1),0(R14)    TEST BYTE ONE FOR VALID HEX...\n         BZ    LC2                    ..YES (ODD), GO TEST 2ND BYTE\n         STC   R2,FBYTE            SAVE FUNCTION BYTE\n         CLI   FBYTE,X'FF'         NOT A HEX CHARACTER...\n         BE    BADSIN                 ..TRUE, FLAG AS ERROR\nLC2      EQU   *\n         L     R14,=A(VHVTBL)      POINT AT VALID HEX VALUE TABLE\n         TRT   SINAME+1(1),0(R14)  IS BYTE TWO A VALID ODD HEX DIGIT...\n         BZ    PRTSIN                 ..YES, GO LIST GOOD SYSIN CARD\n         STC   R2,FBYTE            SAVE FUNCTION BYTE\n         CLI   FBYTE,X'FF'         NOT A HEX CHARACTER...\n         BE    BADSIN                 ..TRUE, FLAG AS ERROR\n         MVI   EMNO,X'08'          SET ERROR MESSAGE NUMBER\nBADSIN   EQU   *\n         L     R1,=A(EMTBL)        POINT AT ERROR MESSAGE TABLE\n         SR    R0,R0               ZERO WORK REGISTER AND\n         IC    R0,EMNO                  INSERT ERROR MESSAGE NUMBER\n         BCTR  R0,R0               DECREMENT NUMBER BY ONE\n         SLL   R0,4                MULTIPLY RESULT BY SIXTEEN\n         AR    R1,R0               ADD OFFSET TO BASE ADDRESS\n         MVC   EMNO,0(R1)          MOVE TEXT TO MESSAGE FRAME\n         MVC   SINERR,ERRMSG       MOVE ERROR FLAG TO PRINT LINE\nPRTSIN   EQU   *\n         MVI   SINLINE,C'0'        FORCE DOUBLE SPACE FOR SYSIN LINE\n         LA    R8,SINLINE          POINT AT OUTPUT LINE\n         BAL   R11,PRTOUT          GO PRINT SYSIN CARD IMAGE\n         MVI   IMGLINE,C'0'        FORCE DOUBLE SPACE FOR IMAGE LINE 1\n         CLI   SINERR,X'40'        WAS CARD BAD...\n         BE    PUTII                  ..NO, GO PUT OUT IEBIMAGE INPUT\n         MVC   SINERR,SINERR-1     BLANK SYSIN ERROR MESSAGE\n         B     GETSIN                   AND GO GET NEXT CARD\n*\nPUTII    EQU   *\n         BAL   R11,PUTREQ          GO PUT OUT IEBIMAGE INPUT\n         B     GETSIN                   AND GO GET NEXT CARD\n*\nPUTREQ   EQU   *\n         ST    R11,SAVER11A        SAVE RETURN ADDRESS\nMOD1SW   DS    0H\n         NOP   ALLREQ              NOP/BR IF IBM 3800 MODEL 1\n         MVC   IMGRCD(73),OPTION   MOVE OPTION CARD TO OUTOUT AREA\n         BAL   R11,PUTIMG          GO PUNCH/LIST IEBIMAGE OPTION CARD\nALLREQ   EQU   *\n         MVC   IMGRCD(73),ASSIGN2  MOVE ASSIGN CARD (2) TO OUTPUT AREA\n         BAL   R11,PUTIMG          GO PUNCH/LIST IEBIMAGE REQUEST CARD\n         MVC   NNAME1,SINAME       MOVE MODULE NAME TO NAME CARD\n         MVC   IMGRCD(73),NAME     MOVE NAME CARD TO OUTPUT AREA\n         BAL   R11,PUTIMG          GO PUNCH/LIST IEBIMAGE NAME CARD\n         L     R11,SAVER11A        RESTORE RETURN ADDRESS\nCRSWAD   EQU   *\nCRSW     DS    0H\n         BR    R11                 BR/NOP IF CHARS REQUEST\n         CLI   0(R6),X'FF'         END OF GEN-ED TABLE...\n         BE    EOSIN                  ..YES, GO CLOSE SYSUT2/SYSIN\n         MVC   SINRCD(6),0(R6)     MOVE GEN-ED SYSIN TO INPUT AREA\n         LA    R6,6(R6)            POINT AT NEXT TABLE ENTRY AND\n         B     GCHECK              GO GENERATE IEBIMAGE SYSIN\n*\nEOSIN    EQU   *                   CLOSE SYSIN/SYSUT2\n         LA    R1,SIOB             LOAD REG1 W/LIST ADDR. *** CLOSE ***\n         MVI   U2OB,X'80'          RESET SYSUT2 OPTION BYTE           *\n         SVC   20                  ISSUE CLOSE SVC                    *\n         LTR   R3,R3               WERE THERE ANY SYSIN CARDS IN...\n         BZ    NOSIN                  ..NO, GO PUT OUT ERR MSG\n         LTR   R4,R4               WERE THERE ANY SYSUT2 CARDS OUT...\n         BZ    NOUT2                  ..NO, GO PUT OUT ERR MSG\n         L     R8,=A(EOSMSG)       POINT AT END OF SYSIN MESSAGE\n         BAL   R11,PRTOUT               AND GO PRINT IT\n         LA    R1,PARAM            LOAD PARAMETER REG1     *** LINK ***\n         LA    R15,LINKLIST        LOAD PARAMETER REG15               *\n         SVC   6                   DSSUE LINK SVC (IEBIMAGE)          *\n         ST    R15,RETCODE         SAVE RETURN CODE FROM IEBIMAGE\n         LTR   R15,R15             IS RETURN CODE ZERO...\n         BZ    OPEN2                  ..YES, GO OPEN SORTIN/SYSUT3\n         NI    LIPSW+1,X'0F'       RESET LIST-INPUT-PAGES SWITCH TO NOP\nOPEN2    EQU   *                   OPEN SYSUT3/SORTIN\n         LA    R1,U3OB             LOAD REG1 W/LIST ADDR.  *** OPEN ***\n         SVC   19                  ISSUE OPEN SVC                     *\n         SR    R6,R6               ZERO OUTPUT COUNTER\nGETCC1   EQU   *\n         BAL   R11,GETUT3          GET IEBIMAGE LISTING LINE\nTST4CC1  EQU   *\n         CLI   UT3AREA,C'1'        IS CCTL = 1 (SKIP TO TOP OF PAGE)...\n         BNE   GETCC1                 ..NO, GO GET ANOTHER LINE\n*                    SYSTEM SUPPORT UTILITY --IEBIMAGE--\n         CLC   SYSTEM,UT3AREA+41   IEBIMAGE HEADER LINE...\n         BNE   GETCC1                 ..NO, GO GET ANOTHER LINE\nGETIPL   EQU   *\n         BAL   R11,GETUT3          GET IEBIMAGE LISTING LINE\n         CLI   UT3AREA,C'1'        IS CCTL = 1 (SKIP TO TOP OF PAGE)...\n         BE    CHKCC1                 ..YES, GO CHECK HEADER TYPE\nLIPSW    DS    0H\n         B     CBCHK               BR/NOP IF IEBIMAGE RC .NE. 0\n         LA    R8,UT3AREA          PASS PRINT LINE TO SYSPRINT\n         BAL   R11,PRTOUT               AND GO LIST IT\nCBCHK    EQU   *\n         CLI   UT3AREA+73,X'14'    OPTION CARD LINE...\n         BE    GETIPL                 ..YES, GO GET NEXT LINE\n         CLI   UT3AREA+73,X'00'    NAME CARD LINE...\n         BE    GOTNAM                 ..YES, GO SAVE NAME\n         CLC   =C'IEB',UT3AREA+1   IEBANNI MESSAGE LINE...\n         BE    GOTMSG                 ..YES, GO CHECK CBSAVE\n         MVC   GENMSG+23(8),UT3AREA+7 SAVE MODULE TYPE IN MESSAGE\n         MVC   CBSAVE,UT3AREA+73   RETAIN CONTROL BYTE AND\n         B     GETIPL                   GO GET NEXT LINE\n*\nGOTNAM   EQU   *\n         MVC   ONAME,UT3AREA+16    SAVE NAME IN OPTION,\n         MVC   GENMSG+45(4),ONAME               MESSAGE\n         MVC   NNAME1,ONAME                      AND\n         MVC   NNAME2,ONAME                     NAME CARDS\n         LA    R2,NNAME1           POINT AT 1ST BYTE OF NAME CARD NAME\n         LA    R3,4                SET SCAN LIMIT\nGN2      EQU   *\n         CLI   0(R2),X'40'         END OF NAME...\n         BE    GN3                    ..YES, GO INSERT (R)\n         LA    R2,1(R2)               ..NO, INCREMENT POINTER AND\n         BCT   R3,GN2                       TRY NEXT BYTE (IF ANY)\nGN3      EQU   *\n         MVC   0(6,R2),=C'(R)   '  INSERT (R) AFTER NAME\n         LA    R0,NAME             POINT AT OUTPUT CARD\n         BAL   R11,PUTSRT          GO PUT CARD TO SORTIN\n         MVI   GENMSG,C'0'         FORCE DOUBLE SPACE\n         LA    R8,GENMSG           POINT AT GENERATING SOURCE MESSAGE\n         BAL   R11,PRTOUT               AND GO PRINT IT\n         CLI   MODEL,C'3'          IBM 3800 MODEL 3...\n         BNE   GETIPL                 ..NO, GO GET NEXT LINE\n         LA    R0,OPTION           POINT AT OUTPUT CARD\n         BAL   R11,PUTSRT          GO PUT CARD TO SORTIN\n         B     GETIPL                   AND GO GET NEXT LINE\n*\nGOTMSG   EQU   *\n         CLI   CBSAVE,X'08'        FCB NAME...\n         BNE   GETIPL                 ..NO, GO GET NEXT LINE\n         CLC   =C'32',UT3AREA+5    IEBA32I SIZE OF FORM IS...\n         BNE   GETIPL                 ..NO, GO GET NEXT LINE\n         MVC   FCB1+10(20),FCBLIT  RESET FCB1 LINE LITERAL AND\n         MVC   FCB1+30(42),FCB1+29    PROPIGATE THE TRAILING BLANK\n         MVC   F1HT,UT3AREA+25     MOVE HUNDREDS/TENS AND\n         MVC   F1O,UT3AREA+28           ONES DIGIT TO FCB CARD\n         B     GETIPL              GO GET NEXT LINE\n*\nCHKCC1   EQU   *\n         CLC   SYSTEM,UT3AREA+41   IEBIMAGE HEADER LINE...\n         BE    GETIPL                 ..YES, CONTINUE SCAN\n         SR    R2,R2               ZERO OFFSET REGISTER AND\n         IC    R2,CBSAVE              INSERT CONTROL BYTE\n         LA    R1,1                SET ABEND CODE\n         CH    R2,=H'+16'          VALUE TOO HIGH FOR BRANCH TABLE...\n         BH    BELLYUP                ..YES, GO SHOOT IT DOWN\n         B     GI2(R2)             BRANCH TO ROUTINE BASED ON R2\nGI2      DS    0H\n         B     BELLYUP                  R2 = 00  (NAME)\n         B     CGLINES                  R2 = 04  (CHARSET/GRAPHIC)\n         B     FLINES                   R2 = 08  (FCB)\n         B     BELLYUP                  R2 = 0C  (COPYMOD) (!!NEVER!!)\n         B     TLINES                   R2 = 10  (TABLE)\n*\nCGLINES  EQU   *                   GRAPHIC OR CHARSET * * * * * * * * *\n*                                  GRF2GT5A\n         CLC   SAVE,UT3AREA+55     SAME MODULE AS LAST PAGE...\n         BE    GETSEG                 ..YES, GO GET SEGMENT LINE\n         CLC   =C'GRAF',UT3AREA+55 MODEL 1 GCM MODULE...\n         BE    MOD1MOD                ..YES, CHECK PARM\n         CLC   =C'LCS1',UT3AREA+55 MODEL 1 LCS MODULE...\n         BE    MOD1MOD                ..YES, CHECK PARM\n         CLC   =C'GRF2',UT3AREA+55 MODEL 3 GCM MODULE...\n         BE    MOD3MOD                ..YES, CHECK PARM\n         CLC   =C'LCS2',UT3AREA+55 MODEL 3 LCS MODULE...\n         BE    MOD3MOD                ..YES, CHECK PARM\n         B     GETCC1                 ..NO, GO GET ANOTHER LINE\n*\nNOSIN    EQU   *\n         L     R8,=A(NOSINLIN)     POINT AT OUTPUT LINE\n         B     CLOSEPRT            GO CLOSE PRINTER FILE\n*\nNOUT2    EQU   *\n         L     R8,=A(NOUT2LIN)     POINT AT OUTPUT LINE\n         B     CLOSEPRT            GO CLOSE PRINTER FILE\n*\nNOSORT   EQU   *\n         L     R8,=A(NOSRTLIN)     POINT AT OUTPUT LINE\n         B     CLOSEPRT            GO CLOSE PRINTER FILE\n*\nMOD1MOD  EQU   *\n         LA    R1,2                SET ABEND CODE\n         CLI   MODEL,C'1'          WAS PARM=MODEL1...\n         BNE   BELLYUP                ..NO, SOMETHINGS WRONG\n         MVC   DDATA,BLANKS        BLANK DATA AREA ON DATA CARD (1)\n         MVC   DDATA+80,BLANKS                        DATA CARD (2)\n         MVC   DDATA+160,BLANKS                       DATA CARD (3)\n         MVC   DDATA+240,BLANKS                   AND DATA CARD (4)\n         B     SAVENAME               ..YES, GO ON\n*\nMOD3MOD  EQU   *\n         LA    R1,3                SET ABEND CODE\n         CLI   MODEL,C'3'          WAS PARM=MODEL3...\n         BNE   BELLYUP                ..NO, SOMETHINGS WRONG\nSAVENAME EQU   *\n         MVC   SAVE,UT3AREA+55     SAVE FULL MODULE NAME FOR CONTROL\n         MVC   ANAME,ONAME         SAVE NAME IN ASSIGN (1),\n         MVC   DNAME,ONAME                  AND DATA (1) CARDS\n         MVC   ATYPE,GRAPHIC       MOVE GRAPHIC TO ASSIGN CARD\n         CLI   UT3AREA+55,C'G'     IS THIS A GCM MODULE...\n         BE    REPL                   ..YES, GO REPLICATE MULTI-CARDS\n         MVC   ATYPE,CHARSET       MOVE CHARSET TO ASSIGN CARD\nREPL     EQU   *\n         MVC   ASSIGN2,ASSIGN1     REPLICATE ASSIGN1 TO ASSIGN2\n         MVC   ASSIGN3,ASSIGN1                          ASSIGN3\n         MVC   ASSIGN4,ASSIGN1                      AND ASSIGN4\n         MVC   DATA2,DATA          REPLICATE DATA TO DATA2\n         MVC   DATA3,DATA                            DATA3\n         MVC   DATA4,DATA                        AND DATA4\nGETSEG   EQU   *\n         BAL   R11,GETUT3          GET IEBIMAGE SEGMENT LINE\nTST4SEG  EQU   *\n* SEGMENT   001                           SEGMENT   002\n         LA    R1,4                SET ABEND CODE\n         CLC   =C'SEGM',UT3AREA+2  SEGMENT INFO LINE...\n         BNE   BELLYUP                ..NO, GO DUMP\n         MVC   ASGNO,UT3AREA+13    MOVE SEGMNT-#-A TO ASSIGN CARD (1)\n         MVC   DSGNO,ASGNO                        AND DATA CARD (1)\n         LA    R3,1                INITIALIZE SEGMENTS ON PAGE COUNT\n         CLI   MODEL,C'3'          IBM 3800 MODEL 3...\n         BE    SEGM3                  ..YES, LOOK FOR MORE SEGMENTS\n* SEGM1  EQU   *\n         CLI   UT3AREA+43,X'40'    MODEL 1 SEGMENT B...\n         BE    GETASG                 ..NO, GO GET ASSIGNMENT LINE\n         MVC   ASGNO+80,UT3AREA+43 MOVE SEGMNT-#-B TO ASSIGN CARD (2)\n         MVC   DSGNO+80,ASGNO+80                  AND DATA CARD (2)\n         LA    R3,1(R3)            INCREMENT SEGMENTS ON PAGE COUNT\n         CLI   UT3AREA+73,X'40'    MODEL 1 SEGMENT C...\n         BE    GETASG                 ..NO, GO GET ASSIGNMENT LINE\n         MVC   ASGNO+160,UT3AREA+73 MOVE SEGMNT-#-C TO ASSIGN CARD (3)\n         MVC   DSGNO+160,ASGNO+160                 AND DATA CARD (3)\n         LA    R3,1(R3)            INCREMENT SEGMENTS ON PAGE COUNT\n         CLI   UT3AREA+103,X'40'   MODEL 1 SEGMENT D...\n         BE    GETASG                 ..NO, GO GET ASSIGNMENT LINE\n         MVC   ASGNO+240,UT3AREA+103 MOVE SEGMNT-#-D TO ASSIGN CARD (4)\n         MVC   DSGNO+240,ASGNO+240                  AND DATA CARD (4)\n         LA    R3,1(R3)            INCREMENT SEGMENTS ON PAGE COUNT\n         B     GETASG              GO GET ASSIGNMENT LINE\n*\nSEGM3    EQU   *\n         CLI   UT3AREA+53,X'40'    MODEL 3 SEGMENT B...\n         BE    GETASG                 ..NO, GO GET ASSIGNMENT LINE\n         MVC   ASGNO+80,UT3AREA+53 MOVE SEGMNT-#-B TO ASSIGN CARD (2)\n         MVC   DSGNO+80,ASGNO+80                  AND DATA CARD (2)\n         LA    R3,1(R3)            INCREMENT SEGMENTS ON PAGE COUNT\n         CLI   UT3AREA+93,X'40'    MODEL 3 SEGMENT C...\n         BE    GETASG                 ..NO, GO GET ASSIGNMENT LINE\n         MVC   ASGNO+160,UT3AREA+93 MOVE SEGMNT-#-C TO ASSIGN CARD (3)\n         MVC   DSGNO+160,ASGNO+160                 AND DATA CARD (3)\n         LA    R3,1(R3)            INCREMENT SEGMENTS ON PAGE COUNT\nGETASG   EQU   *\n         BAL   R11,GETUT3          GET IEBIMAGE ASSIGNMENT LINE\n*ASSIGNMENT 40  PITCH 15                 ASSIGNMENT C1  PITCH 15\n         LA    R1,5                SET ABEND CODE\n         CLC   ASSIGN,UT3AREA+1    ASSIGNMENT INFO LINE...\n         BNE   BELLYUP                ..NO, GO DUMP\n         MVC   AHEX,UT3AREA+12     MOVE ASSIGNMENT-A AND\n         MVC   APITCH,UT3AREA+22        PITCH-A TO ASSIGN CARD (1)\n         CLI   MODEL,C'3'          IBM 3800 MODEL 3...\n         BE    ASGM3                  ..YES, LOOK FOR MORE SEGMENTS\n* ASGM1  EQU   *\n         CLI   UT3AREA+42,X'40'    MODEL 1 SEGMENT B...\n         BE    PUTASG                 ..NO, GO PUT ASSIGNMENT LINE\n         MVC   AHEX+80,UT3AREA+42  MOVE ASSIGNMENT-B AND\n         MVC   APITCH+80,UT3AREA+52     PITCH-B TO ASSIGN CARD (2)\n         CLI   UT3AREA+72,X'40'    MODEL 1 SEGMENT C...\n         BE    PUTASG                 ..NO, GO PUT ASSIGNMENT LINE\n         MVC   AHEX+160,UT3AREA+72 MOVE ASSIGNMENT-C AND\n         MVC   APITCH+160,UT3AREA+82    PITCH-C TO ASSIGN CARD (3)\n         CLI   UT3AREA+102,X'40'   MODEL 1 SEGMENT D...\n         BE    PUTASG                 ..NO, GO PUT ASSIGNMENT LINE\n         MVC   AHEX+240,UT3AREA+102 MOVE ASSIGNMENT-D AND\n         MVC   APITCH+240,UT3AREA+112    PITCH-D TO ASSIGN CARD (4)\n         B     PUTASG              GO PUT ASSIGNMENT LINE\n*\nASGM3    EQU   *\n         CLI   UT3AREA+52,X'40'    MODEL 3 SEGMENT B...\n         BE    PUTASG                 ..NO, GO PUT ASSIGNMENT LINE\n         MVC   AHEX+80,UT3AREA+52  MOVE ASSIGNMENT-B AND\n         MVC   APITCH+80,UT3AREA+62     PITCH-B TO ASSIGN CARD (2)\n         CLI   UT3AREA+92,X'40'    MODEL 3 SEGMENT C...\n         BE    PUTASG                 ..NO, GO PUT ASSIGNMENT LINE\n         MVC   AHEX+160,UT3AREA+92 MOVE ASSIGNMENT-C AND\n         MVC   APITCH+160,UT3AREA+102   PITCH-C TO ASSIGN CARD (3)\nPUTASG   EQU   *\n         LR    R2,R3               SET CYCLE LIMIT (SEGS PER PAGE)\n         LA    R4,ASSIGN1          POINT AT ASSIGN CARD (1)\nPUTASGN  EQU   *\n         LR    R0,R4               POINT AT OUTPUT CARD\n         BAL   R11,PUTSRT          GO PUT CARD TO SORTIN\n         LA    R4,80(R4)           INCREMENT TO NEXT CARD (IF ANY)\n         BCT   R2,PUTASGN               AND GO PUT IT OUT\n         BAL   R11,GETUT3          GET IEBIMAGE COLUMN NBRS LINE\n*      123456789012345678901234                123456789012345678901234\nGETDATA  EQU   *\n         BAL   R11,GETUT3          GET IEBIMAGE DATA LINE\n*   1 .                        .            1 .\n         CLI   UT3AREA+6,C'.'      DATA LINE...\n         BNE   TST4CC0                ..NO, GO TEST FOR DOUBLE SPACE\n         MVC   DSQNO1,UT3AREA+3    MOVE SEQUENCE NBR TO DATA LINE (1)\n         CLI   DSQNO1,X'40'        SINGLE DIGIT (LEADING BLANK)...\n         BNE   REPL2                  ..NO, GO REPLICATE SEQ NO\n         MVI   DSQNO1,C'0'            ..YES, INSERT LEADING ZERO\nREPL2    EQU   *\n         MVC   DSQNO2,DSQNO1       REPLICATE SEQ NO TO DATA CARD (1)\n         MVC   DSQNO1+80,DSQNO1                        DATA CARD (2)\n         MVC   DSQNO2+80,DSQNO1                        DATA CARD (2)\n         MVC   DSQNO1+160,DSQNO1                       DATA CARD (3)\n         MVC   DSQNO2+160,DSQNO1                       DATA CARD (3)\n         MVC   DSQNO1+240,DSQNO1                       DATA CARD (4)\n         MVC   DSQNO2+240,DSQNO1                       DATA CARD (4)\n         CLI   MODEL,C'3'          IBM 3800 MODEL 3...\n         BE    DATM3                  ..YES, LOOK FOR MORE SEGMENTS\n* DATM1  EQU   *\n         MVC   DDATA(18),UT3AREA+7 MOVE DATA-A TO CARD (1)\n         CLI   UT3AREA+36,C'.'     MODEL 1 SEGMENT B...\n         BNE   PUTDAT                 ..NO, GO PUT DATA LINE\n         MVC   DDATA+80(18),UT3AREA+37 MOVE DATA-B TO CARD (2)\n         CLI   UT3AREA+66,C'.'     MODEL 1 SEGMENT C...\n         BNE   PUTDAT                 ..NO, GO PUT DATA LINE\n         MVC   DDATA+160(18),UT3AREA+67 MOVE DATA-C TO CARD (3)\n         CLI   UT3AREA+96,C'.'     MODEL 1 SEGMENT D...\n         BNE   PUTDAT                 ..NO, GO PUT DATA LINE\n         MVC   DDATA+240(18),UT3AREA+97 MOVE DATA-D TO CARD (4)\n         B     PUTDAT              GO PUT DATA LINE\n*\nDATM3    EQU   *\n         MVC   DDATA,UT3AREA+7     MOVE DATA-A TO CARD (1)\n         CLI   UT3AREA+46,C'.'     MODEL 3 SEGMENT B...\n         BNE   PUTDAT                 ..NO, GO PUT DATA LINE\n         MVC   DDATA+80,UT3AREA+47 MOVE DATA-B TO CARD (2)\n         CLI   UT3AREA+86,C'.'     MODEL 3 SEGMENT C...\n         BNE   PUTDAT                 ..NO, GO PUT DATA LINE\n         MVC   DDATA+160,UT3AREA+87 MOVE DATA-C TO CARD (3)\nPUTDAT   EQU   *\n         LR    R2,R3               SET CYCLE LIMIT (SEGS PER PAGE)\n         LA    R4,DATA             POINT AT DATA CARD (1)\nPUTDATA  EQU   *\n         LR    R0,R4               POINT AT OUTPUT CARD\n         BAL   R11,PUTSRT          GO PUT CARD TO SORTIN\n         LA    R4,80(R4)           INCREMENT TO NEXT CARD (IF ANY)\n         BCT   R2,PUTDATA               AND GO PUT IT OUT\n         B     GETDATA             GO GET NEXT DATA LINE\n*\nTST4CC0  EQU   *\n         CLI   UT3AREA,C'0'        IS CCTL = 0 (DOUBLE SPACE)...\n         BE    TST4SEG                ..YES, GO TEST FOR SEGMENT LINE\n         CLI   UT3AREA,C'1'        IS CCTL = 1 (TOP OF PAGE)...\n         BE    CHKCC1                 ..YES, CHECK FOR TYPE OF HEADER\n         B     GETCC1                 ..NO, GO SCAN FOR NEXT HEADER\n*\nFLINES   EQU   *\n*         PRINT LINE   1 AT 12 LINES PER INCH - HAS CHANNEL  1 CODE.\n         MVI   CHTBL,X'FF'         MOVE HI-VALUE TO CHANNEL TABLE AND\n         MVC   CHTBL+1(119),CHTBL    PROPIGATE THROUGHOUT THE TABLE\n         MVC   LPI,UT3AREA+28      MOVE INITIAL LPI TO SAVE\n         SP    NOL,NOL               ZERO NUMBER OF LINES AND\n         ZAP   SEQ,=P'+10'             INITIALIZE STARTING SEQ NBR\n         MVC   F1NAME,ONAME        MOVE NAME TO FCB CARD\n         LA    R7,CHTBL            INITIALIZE CHANNEL TABLE POINTER\n         LA    R5,41               SET CARDS SCAN LIMIT\n         LA    R2,F1O+6            POINT AT OPENING LEFT PARENTHESIS\n         CLI   F1HT,X'40'          DOES SIZE VALUE HAVE LEADING BLANK..\n         BNE   FL2                    ..NO, BYPASS LEFT ADJUST\n         MVC   F1HT(8),F1HT+1         ..YES, SHIFT TO LEFT,\n         BCTR  R2,0                          DECREMENT POINTER, AND\n         LA    R5,1(R5)                      INCREMENT SCAN LIMIT\nFL2      EQU   *\n         CLC   LPI,UT3AREA+28      LPI VALUE SAME AS PREVIOUS...\n         BE    FL7                    ..YES, GO UP NUMBER OF LINES\n         NI    SWFL+1,X'0F'        RESET BRANCH TO NOP\nFL2I     EQU   *\n         CH    R5,=H'+9'           ENOUGH ROOM FOR ONE MORE ENTRY...\n         BH    FL3                    ..YES, GO INSERT IT\n         BAL   R11,FL90            GO FINISH/PUT FCB LINE\n*          FCB SIZE=HTO,LPI=((12,1),(8,1),(12,1),(8,1),(12,1),(8,1),\nFL3      EQU   *\n         MVC   1(9,R2),=C'(LL,NNN),'    INSERT LPI ENTRY MASK\n         MVC   2(2,R2),LPI         INSERT LPI VALUE\n         UNPK  5(3,R2),NOL         UNPACK NBR OF LINES AT THIS LPI\n         OI    7(R2),X'F0'              AND CLEAR THE SIGN\n         LA    R1,9                SET INCREMENT FOR SCAN POINTER\nFL4      EQU   *\n         CLI   5(R2),X'F0'         H/O ZERO ON NBR OF LINES...\n         BNE   FL5                    ..NO MORE, GO CHECK LPI\n         MVC   5(5,R2),6(R2)          ..YES, SHIFT LEFT ONE BYTE,\n         BCTR  R1,0                            DECREMENT THE INCREMENT\n         B     FL4                               AND TEST AGAIN\n*\nFL5      EQU   *\n         CLI   2(R2),X'40'         H/O BLANK ON LPI...\n         BNE   FL6                    ..NO, GO INCREMENT SCAN POINTER\n         MVC   2(8,R2),3(R2)          ..YES, SHIFT LEFT ONE BYTE,\n         BCTR  R1,0                            DECREMENT THE INCREMENT\nFL6      EQU   *\n         AR    R2,R1               INCREMENT THE SCAN POINTER AND\n         SR    R5,R1                  DECREMENT THE SCAN LIMIT\nSWFL     DS    0H\n         NOP   FL9                 NOP/BRANCH FOR LAST LPI ENTRY\n         MVC   LPI,UT3AREA+28      MOVE NEXT LPI TO SAVE AND\n         SP    NOL,NOL               ZERO NUMBER OF LINES\nFL7      EQU   *\n         AP    NOL,=P'+1'          INCREMENT NUMBER OF LINES\n         CLI   UT3AREA+46,C'-'     DOES LINE HAVE A CHANNEL CODE...\n         BNE   FL8                    ..NO, GO GET NEXT LINE\n         LA    R1,6                SET ABEND CODE\n         CLI   1(R7),X'FF'         UNUSED TABLE ENTRY...\n         BNE   BELLYUP                ..NO, TABLE OVERFLOW - DUMP\n         MVC   0(2,R7),UT3AREA+60  MOVE CHANNEL CODE AND\n         MVC   2(3,R7),UT3AREA+21       LINE NUMBER TO TABLE ENTRY\n         LA    R7,5(R7)            INCREMENT TABLE POINTER\nFL8      EQU   *\n         BAL   R11,GETUT3          GET IEBIMAGE LISTING LINE\n         CLC   =C'PRIN',UT3AREA+10 ANOTHER FCB PRINT LINE...\n         BE    FL2                    ..YES, GO CHECK LPI\n         CLI   0(R2),C'('          IS THIS FIRST AND ONLY LPI...\n         BE    FL10                   ..YES, STORE ONLY LPI\n         OI    SWFL+1,X'F0'        RESET NOP TO BRANCH\n         B     FL2I                GO STORE LAST LPI IN  CARD\n*\nFL9      EQU   *\n         MVI   0(R2),C')'          CLOSE LPI PARENTHESIS\n         B     FL12                GO CHECK CHANNEL TABLE\n*\nFL10     EQU   *\n         MVC   0(2,R2),LPI         MOVE LPI TO OUTPUT CARD\n         CLI   0(R2),X'40'         H/O BLANK ON LPI...\n         BE    FL11                   ..YES, GO LEFT ADJUST\n         LA    R2,1(R2)            POINT AT LAST BYTE USED\n         BCTR  R5,0                DECREMENT SCAN LIMIT FOR ONE BYTE\n         B     FL12                GO CHECK CHANNEL TABLE\n*\nFL11     EQU   *\n         MVC   0(2,R2),1(R2)       SHIFT ONE BYTE TO LEFT\nFL12     EQU   *\n         CLI   CHTBL,X'FF'         ANY ENTRIES IN CHANNEL TABLE...\n         BE    FL20                   ..NO, GO PUT OUT FINAL CARD\n         MVI   1(R2),C','             ..YES, INSERT TRAILING COMMA\n         BAL   R11,FL90            GO FINISH/PUT THIS FCB LINE\n         LA    R7,CHTBL            POINT AT FIRST ENTRY IN TABLE\n         CLI   CHTBL+5,X'FF'       MORE THAN ONE ENTRY IN TABLE...\n         BE    FL13                   ..NO, JUST PUT IT OUT\n         LA    R1,ZSORTLST         LOAD LIST ADDR IN REG1  *** CALL ***\n         L     R15,=V(ZSORTZ)      LOAD 15 WITH ENTRY ADDR            *\n         BALR  R14,R15             BRANCH TO ENTRY POINT              *\nFL13     EQU   *\n         MVC   1(2,R2),=C'CH'      MOVE LITERAL\n         MVC   3(2,R2),0(R7)            CHANNEL NUMBER AND\n         MVC   5(2,R2),=C'=('           LITERAL TO CARD\n         LA    R1,6                LOAD INCREMENT FOR SCAN POINTER\n         CLI   3(R2),X'40'         H/O BLANK ON CHANNEL NUMBER...\n         BNE   FL14                   ..NO, GO CHECK FOR MULTIPLES\n         MVC   3(4,R2),4(R2)          ..YES, SHIFT ONE BYTE LEFT AND\n         BCTR  R1,0                          DECREMENT THE INCREMENT\nFL14     EQU   *\n         AR    R2,R1               INCREMENT THE SCAN POINTER AND\n         SR    R5,R1                  DECREMENT THE SCAN LIMIT\nFL15     EQU   *\n         MVC   1(3,R2),2(R7)       MOVE LINE NUMBER TO CARD AND\n         LA    R1,3                LOAD INCREMENT FOR SCAN POINTER\nFL16     EQU   *\n         CLI   1(R2),X'40'         H/O BLANK ON LINE NUMBER...\n         BNE   FL17                   ..NO MORE, GO INSERT TRAILER\n         MVC   1(3,R2),2(R2)          ..YES, SHIFT LEFT ONE BYTE,\n         BCTR  R1,0                            DECREMENT THE INCREMENT\n         B     FL16                              AND TEST AGAIN\n*\nFL17     EQU   *\n         AR    R2,R1               INCREMENT THE SCAN POINTER AND\n         SR    R5,R1                  DECREMENT THE SCAN LIMIT\n         CLC   0(2,R7),5(R7)       DOES CHANNEL OCCUR ON MULTIPLE LINES\n         BNE   FL18                   ..NO, GO CHECK FOR MORE ENTRIES\n         MVI   1(R2),C','          INSERT DELIMITER AND\n         LA    R2,1(R2)            INCREMENT THE SCAN POINTER AND\n         BCTR  R5,0                   DECREMENT THE SCAN LIMIT\n         LA    R7,5(R7)            POINT AT NEXT TABLE ENTRY AND\n         B     FL15                     GO MOVE IT TO CARD\n*\nFL18     EQU   *\n         LA    R7,5(R7)            POINT AT NEXT TABLE ENTRY\n         CLI   0(R7),X'FF'         END OF TABLE...\n         BE    FL19                   ..YES, GO PUT OUT LAST FCB CARD\n         MVC   1(2,R2),=C'),'      INSERT DELIMITERS AND\n         BAL   R11,FL90            GO FINISH/PUT THIS FCB LINE AND\n         B     FL13                     GO FORMAT NEXT LINE\n*\nFL19     EQU   *\n         MVI   1(R2),C')'          INSERT DELIMITER AND\nFL20     EQU   *\n         BAL   R11,FL91            GO FINISH/PUT THIS FCB LINE AND\n         B     TST4CC1                  SCAN FOR NEXT EJECT\n*\nFL90     EQU   *\n         MVI   F1CC,C'*'           INSERT CONTINUATION CHARACTER\nFL91     EQU   *\n         ST    R11,SAVER11A        SAVE RETURN ADDRESS\n         UNPK  F1SEQ(5),SEQ        UNPACK SEQUENCE NBR INTO FCB CARD\n         AP    SEQ,=P'+10'           AND INCREMENT SEQUENCE NUMBER\n         LA    R0,FCB1             POINT AT OUTPUT CARD\n         BAL   R11,PUTSRT          GO PUT CARD TO SORTIN\n         MVC   FCB1+10(62),FCB1+9  BLANK OUT CARD,\n         LA    R5,55                    SET SCAN LIMIT AND\n         LA    R2,F1DATA-1              POINT AT CARD COLUMN 15\n         L     R11,SAVER11A        LOAD RETURN ADDRESS AND\n         BR    R11                   RETURN TO MAIN LOGIC\n*\nTLINES   EQU   *\n*                                                      XTB1JSB2\n         LA    R1,7                SET ABEND CODE\n         CLC   =C'XTB1',UT3AREA+55 CHARACTER ARRANGEMENT TABLE LIST...\n         BNE   BELLYUP                ..NO, GO DUMP\n         MVC   CAT1+9(12),CATLIT   RESET CAT1 LINE LITERAL AND\n         MVC   CAT1+21(51),CAT1+20    PROPIGATE THE TRAILING BLANK\n         MVC   C1NAME,ONAME        MOVE NAME TO TABLE CARD AND\n         ZAP   SEQ,=P'+10'            INITIALIZE STARTING SEQ NBR\n         LA    R5,50               SET CARDS SCAN LIMIT\n         SR    R4,R4               ZERO NULL COUNTER\n         LA    R2,C1DATA+4         POINT AT OPENING LEFT PARENTHESIS\nTL2      EQU   *\n*         X0     X1     X2     X3     X4     X5     X6     X7     X8\n         BAL   R11,GETUT3          GET IEBIMAGE LISTING LINE\n         CLI   UT3AREA+3,C'X'      TRANSLATE TABLE LINE...\n         BNE   TL2                    ..NO, GET NEXT LINE\nTL3      EQU   *\n* 0X       *    2 01   2 02   2 03   2 04   2 05   2 06   2 07   2 08\n         LA    R7,UT3AREA+9        POINT AT 1ST SLOT ON LINE IN\n         LA    R10,HDTBL                AND 1ST HEX DIGIT (0)\n         LA    R3,16               SET SLOTS ON LINE LIMIT\nTL4      EQU   *\n         CLI   2(R7),C'*'          NULL SLOT...\n         BNE   TL6                    ..NO, GO BUILD SUBPARAMETER\n         LA    R4,1(R4)               ..YES, UP THE NULL COUNT\nTL5      EQU   *\n         LA    R7,7(R7)            POINT AT NEXT SLOT (IF ANY)\n         LA    R10,1(R10)               AND NEXT HEX DIGIT\n         BCT   R3,TL4                 THEN GO TEST FOR NULL\n         BAL   R11,GETUT3          GET IEBIMAGE LISTING LINE\n         CLI   UT3AREA+3,C'X'      TRANSLATE TABLE LINE...\n         BE    TL3                    ..YES, GO PROCESS IT\n         B     TL8                    ..NO, GO CLOSE PARENTHESES\n*\nTL6      EQU   *\n         CH    R5,=H'+10'          ENOUGH ROOM FOR ONE MORE ENTRY...\n         BH    TL7                    ..YES, GO INSERT IT\n         BAL   R11,TL90            GO FINISH/PUT TABLE LINE\nTL7      EQU   *\n         MVC   1(10,R2),=C'(FF,3F,0),'  INSERT LOC VALUE MASK\n         MVC   2(1,R2),UT3AREA+2   INSERT SIXTEENS DIGIT AND\n         MVC   3(1,R2),0(R10)             ONES DIGIT IN XLOC (00-FF)\n         MVC   5(2,R2),2(R7)       MOVE WCGM OFFSET TO CLOC (00-3F)\n         MVC   8(1,R2),0(R7)       MOVE WCGM NUMBER TO SETNO (0-3)\n         LA    R2,10(R2)           POINT AT TRAILING COMMA\n         SH    R5,=H'+10'          DECREMENT BYTES LEFT\n         B     TL5                 GO STEP TO NEXT SLOT\n*\nTL8      EQU   *\n         MVC   0(2,R2),=C'),'      CLOSE OFF LOC PARAMETER AND\n         BAL   R11,TL90            GO FINISH/PUT TABLE LINE\n         LA    R1,8                SET ABEND CODE\nTL9      EQU   *\n*CGM IDENTIFICATION ORDER    0       1       2       3\n         CLC   =C'CGM ',UT3AREA+1  CGM IDENTIFICATION LINE...\n         BNE   BELLYUP                ..NO, GO DUMP\n         CLC   =C'ORDE',UT3AREA+20 CGM HEADER LINE...\n         BNE   TL10                   ..NO, GO EXTRACT CODES\n         BAL   R11,GETUT3          GET IEBIMAGE LISTING LINE\n         B     TL9                 GO CHECK FOR DATA LINE\n*\nTL10     EQU   *\n*CGM IDENTIFICATION          FF      FF      FF      *\n         MVC   1(7,R2),=C'CGMID=(' INSERT CGMID VALUE MASK AND\n         LA    R2,7(R2)            POINT AT TRAILING LEFT PAREN\n         LA    R3,4                SET NUMBER OF CODES LIMIT\n         LA    R7,UT3AREA+29       POINT AT FIRST CODE POSITION\nTL11     EQU   *\n         CLI   0(R7),C'*'          ANY MORE CODES...\n         BE    TL12                   ..NO, CHECK FOR ANY IN\n         MVC   1(2,R2),0(R7)       MOVE CGMID CODE AND\n         MVI   3(R2),C','               TRAILING COMMA TO CARD OUT\n         LA    R2,3(R2)            POINT AT TRAILING COMMA AND\n         LA    R7,8(R7)                  NEXT POSSIBLE CODE\n         BCT   R3,TL11             GO CHECK NEXT CODE (IF ANY)\nTL12     EQU   *\n         LA    R1,9                SET ABEND CODE\n         CLI   0(R2),C','          TRAILING COMMA...\n         BNE   BELLYUP                ..NO, GO DUMP\n         BAL   R11,GETUT3          GET IEBIMAGE LISTING LINE\n*GRAPHIC MODIFICATION RECORDS       GRAFGT0A    GRAFGT0B    GRAFJSB2\n*GRAPHIC MODIFICATION RECORDS       ****NONE****\n         LA    R1,10               SET ABEND CODE\n         CLC   GRAPHIC,UT3AREA+1   GRAPHIC MODIFICATION DATA LINE...\n         BNE   BELLYUP                ..NO, GO DUMP\n         CLI   UT3AREA+36,C'*'     NO GCM MODULES (****NONE****)...\n         BE    TL16                   ..TRUE, GO CLOSE CGM PARENS\n         MVC   0(11,R2),=C'),GCMLIST=(' INSERT GCMLIST LITERAL\n         LA    R2,10(R2)           POINT AT OPENING PAREN\n         LA    R3,4                SET NUMBER OF CODES LIMIT\n         LA    R7,UT3AREA+36       POINT AT FIRST CODE POSITION\nTL13     EQU   *\n         CLI   0(R7),X'40'         ANY MORE CODES...\n         BE    TL16                   ..NO, CHECK FOR ANY IN\n         MVC   1(4,R2),4(R7)       MOVE GCM CODE AND\nTL14     EQU   *\n         LA    R2,1(R2)            POINT AT NEXT OUTPUT BYTE\n         CLI   0(R2),X'40'         END OF GCM MODULE SUFFIX...\n         BNE   TL14                   ..NO, SCAN TO NEXT BYTE\n         MVI   0(R2),C','          MOVE TRAILING COMMA TO CARD OUT\n         LA    R7,12(R7)           POINT AT NEXT POSSIBLE CODE\n         BCT   R3,TL13             GO CHECK NEXT CODE (IF ANY)\n         LA    R1,11               SET ABEND CODE\n         CLI   0(R2),C','          TRAILING COMMA...\n         BNE   BELLYUP                ..NO, GO DUMP\nTL16     EQU   *\n         MVI   0(R2),C')'          CLOSE FINAL PARENS\n         BAL   R11,TL91            GO FINISH/PUT LAST TABLE LINE\n         MVC   NULLMSG+6(3),=C'*NO' INSERT INITIAL VALUE IN MESSAGE\n         LTR   R4,R4               ANY NULL POSITIONS IN TABLE...\n         BZ    TL17                   ..NO, GO PUT MESSAGE AS IS\n         CVD   R4,DBLWRD           CONVERT NULL COUNT TO DECIMAL\n         MVC   NULLMSG+6(3),=X'202120' INSERT EDIT MASK IN MESSAGE AND\n         ED    NULLMSG+5(4),DBLWRD+6   EDIT NULL COUNT ONTO IT\nTL17     EQU   *\n         LA    R8,NULLMSG          POINT AT NULL COUNT MESSAGE AND\n         BAL   R11,PRTOUT               GO PRINT IT OUT\n         B     TST4CC1             GO SCAN FOR NEXT EJECT\n*\nTL90     EQU   *\n         MVI   C1CC,C'*'           INSERT CONTINUATION CHARACTER\nTL91     EQU   *\n         ST    R11,SAVER11A        SAVE RETURN ADDRESS\n         UNPK  C1SEQ(5),SEQ        UNPACK SEQUENCE NBR INTO CAT CARD\n         AP    SEQ,=P'+10'           AND INCREMENT SEQUENCE NUMBER\n         LA    R0,CAT1             POINT AT OUTPUT CARD\n         BAL   R11,PUTSRT          GO PUT CARD TO SORTIN\n         MVC   CAT1+1(71),CAT1     BLANK OUT CARD\n         LA    R5,55                    SET SCAN LIMIT AND\n         LA    R2,C1DATA-1              POINT AT CARD COLUMN 15\n         L     R11,SAVER11A        LOAD RETURN ADDRESS AND\n         BR    R11                   RETURN TO MAIN LOGIC\n*\nEOUT3    EQU   *                   CLOSE SORTIN/SYSUT3\n         LA    R1,U3OB             LOAD REG1 W/LIST ADDR. *** CLOSE ***\n         MVI   SOOB,X'80'          RESET SORTIN OPTION BYTE           *\n         SVC   20                  ISSUE CLOSE SVC                    *\n         L     R8,=A(EOUMSG)       POINT AT END OF SYSUT3 MESSAGE\n         BAL   R11,PRTOUT               AND GO PRINT IT\n         LTR   R6,R6               ANY SORTIN RECORDS WRITTEN...\n         BZ    NOSORT                 ..NO, GO PUT OUT ERR MSG\n         LA    R1,PTRWORD          LOAD PARAMETER REG1     *** LINK ***\n         LA    R15,SORTLIST        LOAD PARAMETER REG15               *\n         SVC   6                   ISSUE LINK SVC (IEBIMAGE)          *\n         ST    R15,RETCODE         SAVE RETURN CODE FROM SORT\n         L     R8,=A(BADSORT)      POINT AT OUTPUT LINE\n         LTR   R15,R15             WAS SORT SUCCESSFUL...\n         BNZ   CLOSEPRT               ..NO, WRITE UNSUCCESSFUL MESSAGE\n         MVC   11(16,R8),13(R8)       ..YES, CHANGE UN- TO SUCCESSFUL\nCLOSEPRT EQU   *\n         BAL   R11,PRTOUT          GO PRINT SORT SUCCESS MESSAGE\n         LA    R1,SPOB             LOAD REG1 W/LIST ADDR. *** CLOSE ***\n         MVI   SPOB,X'80'          RESET SYSPRINT OPTION BYTE         *\n         SVC   20                  ISSUE CLOSE SVC                    *\n         L     R15,RETCODE         LOAD RETURN CODE FROM FIELD\n         L     R13,4(R13)          RESTORE POINTER TO CALLING PGM SAVE\n         L     R14,12(R13)         LOAD RETURN ADDRESS\n         LM    R0,R12,20(R13)      RESTORE REGS 0 THRU 12\n         BR    R14                 RETURN TO CALLING PROGRAM\n*\nBELLYUP  EQU   *\n*        ABEND (1),DUMP\n         LA    R0,128              PICK UP DUMP OPTION    *** ABEND ***\n         SLL   R0,24               SHIFT TO HIGH ORDER                *\n         OR    R1,R0               OR IN WITH COMPCODE                *\n         SVC   13                  LINK TO ABEND ROUTINE              *\n*\nPUTIMG   EQU   *\n         LA    R0,IMGRCD           LOAD PARAMETER REG 0     *** PUT ***\n         L     R1,=A(UT2DCB)       LOAD PARAMETER REG 1               *\n         L     R15,48(R1)          LOAD PUT ROUTINE ADDRESS           *\n         BALR  R14,R15             LINK TO PUT ROUTINE                *\n         LA    R4,1(R4)            INCREMENT SYSUT1 COUNTER\n         LA    R8,IMGLINE          POINT AT PRINT LINE\nPRTOUT   EQU   *\n         LTR   R9,R9               ANY LINES LEFT...\n         BP    PRTDTL                 ..YES, GO PRINT DETAIL LINE\n         MVC   HPAGE,=X'202120'    MOVE MASK TO HEADER AND\n         ED    HPAGE-1(4),PAGENBR       EDIT PAGE NUMBER ONTO IT\n         LA    R0,HEADER           LOAD PARAMETER REG 0     *** PUT ***\n         L     R1,=A(PRTDCB)       LOAD PARAMETER REG 1               *\n         L     R15,48(R1)          LOAD PUT ROUTINE ADDRESS           *\n         BALR  R14,R15             LINK TO PUT ROUTINE                *\n         AP    PAGENBR,=P'+1'      INCREMENT PAGE NUMBER\n         LA    R9,58               RESET LINE COUNTER\n         MVI   0(R8),C'0'          FORCE DOUBLE SPACE AFTER HEADER\nPRTDTL   EQU   *\n         LR    R0,R8               LOAD PARAMETER REG 0     *** PUT ***\n         L     R1,=A(PRTDCB)       LOAD PARAMETER REG 1               *\n         L     R15,48(R1)          LOAD PUT ROUTINE ADDRESS           *\n         BALR  R14,R15             LINK TO PUT ROUTINE                *\n         CLI   0(R8),X'40'         SINGLE SPACE CARRIAGE CONTROL...\n         BE    ONELINE                ..YES, DECREMENT ONE LINE\n         BCTR  R9,0                   ..NO, DECREMENT TWO LINES\nONELINE  EQU   *\n         BCTR  R9,0                DECREMENT LINE COUNTER\n         MVI   0(R8),X'40'         RESET PRINT LINE TO SINGLE SPACE\n         BR    R11                 RETURN TO MAIN LOGIC\n*\nGETUT3   EQU   *\n         LA    R0,UT3AREA          LOAD PARAMETER REG 0     *** GET ***\n         L     R1,U3OB             LOAD PARAMETER REG 1               *\n         L     R15,48(R1)          LOAD GET ROUTINE ADDRESS           *\n         BALR  R14,R15             LINK TO GET ROUTINE                *\n         BR    R11                 RETURN TO MAIN LOGIC\n*\nPUTSRT   EQU   *\n         L     R1,=A(SORTIN)       LOAD PARAMETER REG 1     *** PUT ***\n         L     R15,48(R1)          LOAD PUT ROUTINE ADDRESS           *\n         BALR  R14,R15             LINK TO PUT ROUTINE                *\n         LA    R6,1(R6)            INCREMENT SORTIN COUNT\n         BR    R11                 RETURN TO MAIN LOGIC\n*\nDBLWRD   DS    D\n*\n         DS    0F                  OPTION BYTE/DCB ADDRS FOR OPEN/CLOSE\nSIOB     DC    X'00',AL3(SINDCB)\nU2OB     DC    X'0F',AL3(UT2DCB)\nSPOB     DC    X'8F',AL3(PRTDCB)\n*\nU3OB     DC    X'00',AL3(UT3DCB)\nSOOB     DC    X'8F',AL3(SORTIN)\n*\nZSORTLST DS    0F\n         CALL  ,(CHTBL,COUNT,LRECL,H1,LRECL),VL,MF=L\n*\nCOUNT    DC    H'24'\n*\nLRECL    DC    H'5'\n*\nH1       DC    H'1'\n*\nRETCODE  DS    F                   RETURN CODE\n*\nSAVER11A DS    F                   INTERIM R11 SAVE AREA\n*\nFWZERO   DC    A(0)\n*\n*        LINK PARAMETER LIST - POINTERS TO...\nPARAM    DC    A(FWZERO)              ..PARM INFORMATION (NONE)\n         DC    X'80',AL3(DDS)         ..ALTERNATE DDNAMES\n*\nLINKLIST DC    A(IEBIMAGE)         ADDR OF ENTRY POINT NAME\n         DC    A(0)                DCB ADDRESS (NONE)\nIEBIMAGE DC    CL8'IEBIMAGE'       ENTRY POINT NAME\n*\nSORTLIST DC    A(SORT)             ADDR OF ENTRY POINT NAME\n         DC    A(0)                DCB ADDRESS (NONE)\nSORT     DC    CL8'SORT'           ENTRY POINT NAME\n*\nPTRWORD  DS    0F                  POINTER TO PARAMETER LIST FOR SORT\n         DC    X'80',AL3(PARMS)\n*\nPAGENBR  DC    PL2'1'              PAGE NUMBER\n*\nSAVE     DC    CL8' '              MODULE NAME SAVE\n*\nGENEDLS  DC    CL6'L=    '         1ST LCS MODULE NAME\n         DC    CL6'L=    '         2ND LCS MODULE NAME\n         DC    CL6'L=    '         3RD LCS MODULE NAME\n         DC    CL6'L=    '         4TH LCS MODULE NAME\nGENEDGS  DC    CL6'G=    '         1ST GCM MODULE NAME\n         DC    CL6'G=    '         2ND GCM MODULE NAME\n         DC    CL6'G=    '         3RD GCM MODULE NAME\n         DC    CL6'G=    '         4TH GCM MODULE NAME\nGENEDFF  DC    X'FF'               * * * TABLE STOPPER * * *\n*\nCBSAVE   DC    X'00'               CONTROL BYTE SAVE\n*\n* IEBIMAGE CONTROL CARDS\n*\nOPTION   DS    0CL80\n         DC    CL72'        OPTION DEVICE=3800M3 '\nONAME    DC    XL4'14404040'\n         DC    CL4'0000'\n*\nCHARSET  DC    CL7'CHARSET'\nCOPYMOD  DC    CL7'COPYMOD'\nFCB      DC    CL7'    FCB'\nGRAPHIC  DC    CL7'GRAPHIC'\nTABLE    DC    CL7'  TABLE'\n*\nASSIGN1  DS    0CL80\n         DC    CL7' '\nATYPE    DC    CL7'GRAPHIC'\n         DC    CL1' '\nASSIGN   DC    CL6'ASSIGN'\n         DC    CL2'=('\nAHEX     DC    CL2'XX'\n         DC    CL1','\nAPITCH   DC    CL2'PP'\n         DC    CL44') '\nANAME    DC    CL4'    '\nASGNO    DC    CL2'NN'\n         DC    CL2'00'\n*\nASSIGN2  DC    CL80' '\n*\nASSIGN3  DC    CL80' '\n*\nASSIGN4  DC    CL80' '\n*\nDATA     DS    0CL80\nDDATA    DC    CL24' '\n         DC    CL4'SEQ='\nDSQNO1   DC    CL2'NN'\n         DC    CL42' '\nDNAME    DC    CL4'XXXX'\nDSGNO    DC    CL2'NN'\nDSQNO2   DC    CL2'NN'\n*\nDATA2    DC    CL80'                        SEQ=NN '\n*\nDATA3    DC    CL80'                        SEQ=NN '\n*\nDATA4    DC    CL80'                        SEQ=NN '\n*\nLPI      DC    CL2'XX'             LINES PER INCH\n*\nNOL      DC    PL2'+0'             NUMBER OF LINES AT XX LPI\n*\nSEQ      DC    PL3'+0'             SEQUENCE NUMBER\n*\nFCBLIT   DC    CL20' FCB SIZE=HTO,LPI=( '\n*\nFCB1     DS    0CL80\n         DC    CL15'           FCB '\nF1DATA   DC    CL5'SIZE='\nF1HT     DC    CL2'HT'             HUNDREDS AND TENS DIGITS\nF1O      DC    CL1'O',CL7',LPI=( ' ONES DIGIT AND LITERAL\n         DC    CL41' '             BLANKS\nF1CC     DC    CL1' '              CONTINUATION CHARACTER\nF1NAME   DC    CL4'XXXX'\nF1SEQ    DC    CL4'0000'\n         DC    CL1' '              SLOP-OVER BYTE FOR UNPACK\n*\nCATLIT   DC    CL12'TABLE LOC=( '\n*\nCAT1     DS    0CL80\n         DC    CL15'         TABLE '\nC1DATA   DC    CL56'LOC=('\nC1CC     DC    CL1' '              CONTINUATION CHARACTER\nC1NAME   DC    CL4'XXXX'\nC1SEQ    DC    CL4'0000'\n         DC    CL1' '              SLOP-OVER BYTE FOR UNPACK\n*\nCHTBL    DS    0F                  CHANNEL/LINE NUMBERS FOR FCB-S\n         DC    24XL5'FFFFFFFFFF'        CC/LLL\n         DC    X'FF00'             TABLE STOPPER\n*\nNAME     DS    0CL80\n         DC    CL15'          NAME '\nNNAME1   DC    CL4'XXXX',CL53' '\nNNAME2   DC    XL4'00404040'\n         DC    CL4'9999'\n*\nHEADER   DC    CL1'1'\nHDATE    DC    XL6'21204B202020'                  YY.DDD\nHTIME    DC    XL10'402021204B20204B2020',CL11' ' HH.MM.SS\n         DC    CL13'W.S.R.C.C.---'\nSYSTEM   DC    CL6'SYSTEM'\n         DC    CL29' SUPPORT UTILITIES---DISIMAGE',CL10' '\n         DC    CL15'IBM 3800 MODEL '\nMODEL    DC    CL1'3',CL11' ',CL5'PAGE '\nHPAGE    DC    CL3' '\n*\nUT3AREA  DS    CL121               SYSUT3 RECORD AREA\n*\nSINLINE  DS    0CL121              SYSIN CARD PRINT LINE\n         DC    CL1'0'              CARRIAGE CONTROL\nSINRCD   DS    0CL80\nSIMODTYP DC    CL1' '              MODULE TYPE REQUESTED, WHERE...\n*                  C = GENERATE COMPONENT LCS/GCM MODULES FOR STANDARD\n*                       IBM CHARACTER ARRANGEMENT TABLE (CHARS) VALUE\n*                      !NOTE - A 'C' CARD MUST BE FIRST AND ONLY INPUT!\n*                  F = FORMS CONTROL BUFFER MODULE (FCB)\n*                  G = GRAPHIC CHARACTER MODIFICATION MODULE (GRAPHIC)\n*                  L = LIBRARY CHARACTER SET MODULE (CHARSET)\n*                  M = COPY MODIFICATION MODULE (COPYMOD) ?? NEVER ??\n*                  T = CHARACTER ARRANGEMENT TABLE MODULE (TABLE)\nSIEQUALS DC    CL1' '              EQUAL SIGN\nSINAME   DC    CL4' '              MODULE NAME, WHERE...\n*                  LCSM NAMES ARE 2 HEXIDECIMAL DIGITS AND MUST BE ODD\n*                  ALL OTHERS ARE 1-4 ALPHAMERIC OR NATIONAL CHARACTERS\n         DC    CL74' '             FILLER\nSIFLAG   DC    CL20' * SYSIN CARD * '\nSINERR   DC    CL20' '             ERROR MSG (IF ANY)\n*\nERRMSG   DS    0CL20               ERROR MESSAGE TEXT\n         DC    CL4'*ERR'\nEMNO     DC    CL16' '             ERROR MESSAGE NUMBER/TEXT\n*\nIMGLINE  DS    0CL121              IEBIMAGE SYSIN CARD PRINT LINE\n         DC    CL1'0'              CARRIAGE CONTROL\nIMGRCD   DC    CL80' '             CARD IMAGE\n         DC    CL40' * IEBIMAGE SYSIN * '\n*\nGENMSG   DC    CL121'0GENERATING SOURCE FOR XXXXXXXX MODULE NAMED XXXX'\n*\nNULLMSG  DC    CL121'     *NNN POSITIONS REMAIN UNUSED IN THIS TABLE. '\n*\nHDTBL    DS    0F                  HEX DIGIT TABLE\n         DC    C'0123456789ABCDEF'\n*\nMNCA     DS    CL4                 MODULE NAME COMPARE AREA\nBLANKS   DC    CL24' '             (SLOPOVER AREA FOR COMPARE)\n*\nFBYTE    DS    CL1                 FUNCTION BYTE\n*\n         LTORG\n*\nEMTBL    DC    CL16'01 CC2 NOT EQUAL'  ERR01 MESSAGE\n         DC    CL16'02 NAME BLANK   '  ERR02 MESSAGE\n         DC    CL16'03 NAME INVALID '  ERR03 MESSAGE\n         DC    CL16'04 IMBEDED BLANK'  ERR04 MESSAGE\n         DC    CL16'05 CODE INVALID '  ERR05 MESSAGE\n         DC    CL16'06 NAME TOO LONG'  ERR06 MESSAGE\n         DC    CL16'07 NAME NOT HEX '  ERR07 MESSAGE\n         DC    CL16'08 NAME NOT ODD '  ERR08 MESSAGE\n         DC    CL16'09 UNKNOWN CHARS'  ERR09 MESSAGE\n         DC    CL16'10 NOT 1ST/ONLY '  ERR10 MESSAGE\n*\n         CNOP  2,4\nPARMS    DC    AL2(PARMSEND-PARMSBEG) BYTE COUNT OF REMAINING PARAMS\nPARMSBEG DC    A(SORTBEG)          SORT STATEMENT - BEGINNING ADDRESS\n         DC    A(SORTEND)                         - ENDING ADDRESS\n         DC    A(RECBEG)           RECORD STATEMENT - BEGINNING ADDRESS\n         DC    A(RECEND)                            - ENDING ADDRESS\n         DC    A(0)                NO E15/E32 EXIT ROUTINE\n         DC    A(0)                NO E35 EXIT ROUTINE\n         DC    X'03',AL3(SORTMSGS) ADDR OF SYSOUT DD NAME REPLACEMENT\nPARMSEND DS    0C                  END OF PARAMETER LIST\n*\nSORTBEG  DC    C' SORT FIELDS=(73,8,CH,A)'\nSORTEND  DC    C' '\nRECBEG   DC    C' RECORD TYPE=F,LENGTH=80'\nRECEND   DC    C' '\n*\nSORTMSGS DC    CL8'SORTMSGS'       REPLACES SORT SYSOUT\n*\n         CNOP  2,4\nDDS      DC    H'48'               ALTERNATE DDNAMES FOR...\n         DC    8F'0'\n         DC    CL8'SYSUT2'            ..SYSIN\n         DC    CL8'SYSUT3'            ..SYSPRINT\n*\nNOSINLIN DC    CL121'0 *** NO SYSIN RECORDS IN JOB STREAM - TERMINATE **\n               ** '\n*\nNOUT2LIN DC    CL121'0 *** NO SYSIN RECORDS ACCEPTED - TERMINATE *** '\n*\nEOSMSG   DC    CL121'0 *** END OF SYSIN *** '\n*\nNOSRTLIN DC    CL121'0 *** NO SORTIN RECORDS WERE WRITTEN - TERMINATE **\n               ** '\n*\nEOUMSG   DC    CL121'0 *** END OF SYSUT3 *** '\n*\nBADSORT  DC    CL121'0 *** SORT UNSUCCESSFUL *** '\n*\nVMNTBL   DS    0F                  VALID MODULE NAME TABLE\n         DC    64X'FF'             HEX 00 TO 3F\n         DC    X'01'                   40       (BLANK)\n         DC    26X'FF'                 41 TO 5A\n         DC    X'00'                   5B       (DOLLAR SIGN)\n         DC    X'02'                   5C       (ASTERISK)\n         DC    30X'FF'                 5D TO 7A\n         DC    2X'00'                  7B TO 7C (AT-SIGN/POUND-SIGN)\n         DC    68X'FF'                 7D TO C0\n         DC    9X'00'                  C1 TO C9 (ALPHA A-I)\n         DC    7X'FF'                  CA TO D0\n         DC    9X'00'                  D1 TO D9 (ALPHA J-R)\n         DC    8X'FF'                  DA TO E1\n         DC    8X'00'                  E2 TO E9 (ALPHA S-Z)\n         DC    6X'FF'                  EA TO EF\n         DC    10X'00'                 F0 TO F9 (NUMERIC 0-9)\n         DC    6X'FF'                  FA TO FF\n*\nVHVTBL   DS    0F                  VALID HEX VALUES TABLE\n         DC    193X'FF'            HEX 00 TO C0\n         DC    XL6'010001000100'       C1 TO C6 (ALPHA A-F)\n         DC    41X'FF'                 C7 TO EF\n         DC    XL5'0100010001'         F0 TO F4 (NUMERIC 0-4)\n         DC    XL5'0001000100'         F5 TO F9 (NUMERIC 5-9)\n         DC    6X'FF'                  FA TO FF\n* * * * HEX FF-INVALID, 00-VALID HEX (ODD), 01-VALID HEX (EVEN) * * * *\n*\nSINDCB   DCB   DDNAME=SYSIN,DSORG=PS,LRECL=80,MACRF=(GM),RECFM=FB,     X\n               EODAD=EOSIN\n*\nPRTDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=121,MACRF=(PM),          X\n               RECFM=FBA\n*\n* SYSUT1 IS THE IMAGE LIBRARY FOR IEBIMAGE\n*\n* SYSUT2 IS THE SYSIN FILE FOR IEBIMAGE\nUT2DCB   DCB   BLKSIZE=80,DDNAME=SYSUT2,DSORG=PS,LRECL=80,             X\n               MACRF=(PM),RECFM=F\n*\n* SYSUT3 IS THE SYSPRINT FILE FOR IEBIMAGE\nUT3DCB   DCB   DDNAME=SYSUT3,DSORG=PS,LRECL=121,MACRF=(GM),            X\n               RECFM=FBA,EODAD=EOUT3\n*\nSORTIN   DCB   DDNAME=SORTIN,DSORG=PS,LRECL=80,MACRF=(PM),RECFM=FB\n*\nCHARSTBL DS    0F                  ACCEPTABLE CHARS TO LCS/GCM TABLE\n         DC    C'AE107F7F7F  AE0AAE0BAE0C    '  APL EXTENDED\n         DC    C'AN  83                      '  GOTHIC-10 (1403)\n         DC    C'AOA 8317                    '  GOTHIC-10, OCR-A\n         DC    C'AOD 8317                    '  GOTHIC-10, OCR-A\n         DC    C'AON 8317                    '  GOTHIC-10, OCR-A\n         DC    C'A11 83                      '  GOTHIC-10 (3211)\n         DC    C'BITRFFFF    BITABITB        '  BOLDFACE ITALIC\n         DC    C'BOA 8319                    '  GOTHIC-10, OCR-B\n         DC    C'BON 8319                    '  GOTHIC-10, OCR-B\n         DC    C'BRTRFFFF    BRTABRTB        '  BOLDFACE REGULAR\n         DC    C'CE10FFFF    CE0ACE0B        '  COURIER-10 EXTENDED\n         DC    C'CE12FFFF    CE2ACE2B        '  COURIER-12 EXTENDED\n         DC    C'CO10FFFF    CO0ACO0B        '  COURIER-10 OVERSTRUCK\n         DC    C'CR10FFFF    CR0ACR0B        '  COURIER-10 REGULAR\n         DC    C'DOTRFFFF    DOTADOTB        '  DOCUMENT REGULAR\n         DC    C'DUMP863D                    '  GOTHIC-15/GOTHIC-15 U/S\n         DC    C'EBTRFFFF    EBTAEBTB        '  ESSAY BOLD\n         DC    C'EITRFFFF    EITAEITB        '  ESSAY ITALIC\n         DC    C'ESTRFFFF    ESTAESTB        '  ESSAY STANDARD\n         DC    C'FM1009                      '  FORMAT-10\n         DC    C'FM120B                      '  FORMAT-12\n         DC    C'FM150D                      '  FORMAT-15\n         DC    C'GB10FFFF    GB0AGB0B        '  GOTHIC-10 BOLD\n         DC    C'GB12FFFF    GB2AGB2B        '  GOTHIC-12 BOLD\n         DC    C'GFC 93                      '  GOTHIC-15 CONDENSD/FOLD\n         DC    C'GF1083                      '  GOTHIC-10 FOLDED\n         DC    C'GF1285                      '  GOTHIC-12 FOLDED\n         DC    C'GF1587                      '  GOTHIC-15 FOLDED\n         DC    C'GI12FFFF    GI2AGI2B        '  GOTHIC ITALIC\n         DC    C'GN  83      SPC1            '  GOTHIC-10 (1403)\n         DC    C'GP12FFFF    GP2AGP2B        '  GOTHIC PROPORTIONAL\n         DC    C'GR10FFFF    GR0AGR0B        '  GOTHIC REVERSE\n         DC    C'GSC 93                      '  GOTHIC-15 CONDENSED\n         DC    C'GS1083                      '  GOTHIC-10\n         DC    C'GS1285                      '  GOTHIC-12\n         DC    C'GS1587                      '  GOTHIC-15\n         DC    C'GT10FFFF    GT0AGT0B        '  GOTHIC-10 TEXT\n         DC    C'GT12FFFF    GT2AGT2B        '  GOTHIC-12 TEXT\n         DC    C'GT15FFFF    GT5AGT5B        '  GOTHIC-15 TEXT\n         DC    C'GUC 37                      '  GOTHIC-15 CONDENSED U/S\n         DC    C'GU1039                      '  GOTHIC-10 U/S\n         DC    C'GU123B                      '  GOTHIC-12 U/S\n         DC    C'GU153D                      '  GOTHIC-15 U/S\n         DC    C'G11 83      SPC1            '  GOTHIC-10 (3211)\n         DC    C'HN  83                      '  GOTHIC-10 (1403)\n         DC    C'H11 83                      '  GOTHIC-10 (3211)\n         DC    C'KN1 831B                    '  GOTHIC-10, KATAKANA-10\n         DC    C'LB12FFFF    LB2ALB2B        '  LETTER GOTHIC BOLD\n         DC    C'LR12FFFF    LR2ALR2B        '  LETTER GOTHIC REGULAR\n         DC    C'OAA 8317                    '  GOTHIC-10, OCR-A\n         DC    C'OAA18317                    '  GOTHIC-10, OCR-A\n         DC    C'OAB 19                      '  OCR-B\n         DC    C'OB10FFFF    OB0AOB0B        '  ORATOR BOLD\n         DC    C'ODA 8317                    '  GOTHIC-10, OCR-A\n         DC    C'ONA 8317                    '  GOTHIC-10, OCR-A\n         DC    C'ONB 8319                    '  GOTHIC-10, OCR-B\n         DC    C'OR10FFFF    OR0AOR0B        '  ORATOR REGULAR\n         DC    C'PB12FFFF    PB2APB2B        '  PRESTIGE ELITE BOLD\n         DC    C'PCAN83                      '  GOTHIC-10 (1403)\n         DC    C'PCHN83                      '  GOTHIC-10 (1403)\n         DC    C'PI12FFFF    PI2API2B        '  PRESTIGE ELITE ITALIC\n         DC    C'PN  83                      '  GOTHIC-10 (1403)\n         DC    C'PR10FFFF    PR0APR0B        '  PRESTIGE PICA REGULAR\n         DC    C'PR12FFFF    PR2APR2B        '  PRESTIGE ELITE REGULAR\n         DC    C'P11 83                      '  GOTHIC-10 (3211)\n         DC    C'QN  83                      '  GOTHIC-10 (1403)\n         DC    C'QNC 83                      '  GOTHIC-10 (1403)\n         DC    C'RN  83                      '  GOTHIC-10 (1403)\n         DC    C'RT10FFFF    RT0ART0B        '  ROMAN TEXT\n         DC    C'SB12FFFF    SB2ASB2B        '  SERIF BOLD\n         DC    C'SI10FFFF    SI0ASI0B        '  SERIF-10 ITALIC\n         DC    C'SI12FFFF    SI2ASI2B        '  SERIF-12 ITALIC\n         DC    C'SN  8F11                    '  TEXT 1 & 2 (1403)\n         DC    C'SO12FFFF    SO2ASO2B        '  SERIF OVERSTRUCK\n         DC    C'SR12FFFF    SR2ASR2B        '  SCRIPT REGULAR\n         DC    C'ST10FFFF    ST0AST0B        '  SERIF-10 TEXT\n         DC    C'ST12FFFF    ST2AST2B        '  SERIF-12 TEXT\n         DC    C'ST15FFFF    ST5AST5B        '  SERIF-15 TEXT\n         DC    C'TN  8F11                    '  TEXT 1 & 2 (1403)\n         DC    C'TU103F41                    '  TEXT 1 & 2 U/S\n         DC    C'T11 8F11                    '  TEXT 1 & 2 (3211)\n         DC    C'XN  83                      '  GOTHIC-10 (1403)\n         DC    C'YN  83                      '  GOTHIC-10 (1403)\n         DC    C'2773831B                    '  GOTHIC-10, KATAKANA-10\n         DC    C'2774831B                    '  GOTHIC-10, KATAKANA-10\n         DC    X'FFFFFFFF'         END OF TABLE STOPPER\n*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DISKMAP": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x0c\\x03\\x0c\\x03\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 3075, "newlines": 3075, "modlines": 0, "user": "WSRCC"}, "text": "*                                                                       00001\n*DESCRIPTION        -         DISKMAP FOR ALL DASD DEVICES.             00002\n*                                                                       00003\n*CONTACT            -         GARY D. FROEMEL                           00004\n*                             JOHNS-MANVILLE                            00005\n*                             KEN-CARYL RANCH                           00006\n*                             P.O. BOX 5108                             00007\n*                             DENVER,COLO.  80217                       00008\n*TELEPHONE          -         303-979-1000                              00009\n*                                                                       00010\n********************** C B T **************************************     00011\n*  A USER OF THIS CODE DECIDED TO USE A PARM OF RESET, WHICH WILL *     00012\n*  RESET THE HIGH WATER MARK IN THE VTOC. IT DID ALRIGHT BUT IT   *     00013\n*  SET IT TO 512 (ON A 3350) AND THE ARM BOUNCED ALL OVER THE     *     00014\n*  PLACE. BE CAREFUL !!!!!!!!                                     *     00015\n********************** C B T ***************************************    00016\n*                                                                       00017\n*FUNCTION -DIRECT ACCESS VOLUME LISTING UTILITY.                        00018\n*          IT WILL PRODUCE A LISTING OF EVERY DATASET ON A VOLUME       00019\n*          PLUS CALCULATE THE FREE SPACE, FREE DSCBS ETC. OPTIONALLY    00020\n*          VIA PARM INFORMATION IT WILL PRODUCE THE FOLLOWING:          00021\n*         PARM='MAP     - PRODUCE A TRACK MAP OF VOLUME.                00022\n*         PARM='PDS     - LIST ALL PDS DIRECTORIES ON VOLUME.           00023\n*         PARM='ISAM    - LIST ISAM REORG ONFORMATION FOR DATASETS.     00024\n*         PARM='EXT     - LIST THE EXTENTS OF THE DATASETS.             00025\n*         PARM='DUMP    - LIST IN HEX ALL DSCBS ON VOLUME.              00026\n*         PARM='EMPTY   - LIST ONLY DATASETS THAT ARE EMPTY.            00027\n*         PARM='MODEL   - WILL ONLY LIST MODEL DSCBS.                   00028\n*         PARM='SDUMP   - LIST IN HEX FORMAT 4 AND 5 DSCBS.             00029\n*         PARM='VOLS    - ONLY USE DDNAMES OF VOLUMEXX    .             00030\n*         PARM='JDATE   - LIST CREATION/EXPIRATION DATES IN JULIAN.     00031\n*         PARM='NCP     - NUMBER OF CHANNEL PGMS USED TO READ VTOC.     00032\n*         PARM='RESET   - RESET THE HIGH WATER MARK IN FORMAT 4 DSCB.   00033\n*         PARM='DEBUG   - BYPASS THE ABEND ON ERROR CONDITIONS.         00034\n*         PARM='LINECNT - USE OTHER THAN THE DEFAULT LINE COUNT.        00035\n*         PARM='LSTDT   - DISPLAY LAST USE DATE AND USE COUNT.          00036\n*                                                                       00037\n******     OTHER COMMENT ARE DOCUMENTED IN BEGINING OF SOURCE.          00038\n******     NOTE - SYS1.AMODGEN MUST BE CONCATENATED TO MACLIB FOR ASMB  00039\n*                                                                       00040\nDISKMAP  TITLE '... MACROS NOT FOUND IN SYS1.AMODGEN....'               00041\n*--------------MODIFICATION.LOG---------------------------------------* 00042\n*  PROGRAMMER  |  DATE  |  SUMMARY OF CHANGES MADE TO THIS PROGRAM    * 00044\n*--------------+--------+---------------------------------------------* 00045\n* J.MARTIN     |02/10/80| JM#1 - ADDED SUPPORT FOR SOME ASM2 FIELDS.  * 00046\n*              |        |                                             * 00047\n* J.MARTIN     |08/13/82| JM#2 - ADDED ENTERY IN THE DEVICE TABLE TO  * 00048\n*              |        |        SUPPORT 3380 DEVICES.                * 00049\n*              |        |                                             * 00047\n*---------------------------------------------------------------------* 00093\n         EJECT                                                          00094\n         MACRO                                                          00095\n         IEZCOM                                                         00096\nCOMECBPT DS    F    ADDRESS OF THE ECB FOR STARTED TASK                 00097\nCOMCIBPT DS    F    ADDRESS OF THE START OF THE CIB CHAIN FOR THIS TASK 00098\n         MEND                                                           00099\n         SPACE 3                                                        00100\n         MACRO                                                          00101\n         IEZCIB                                                         00102\n         DS    0D                                                       00103\nCIBNEXT  DS    A    NEXT CIB                                            00104\nCIBVERB  DS    C                                                        00105\n*                                                                       00106\nCIBSTART EQU   X'04'                                                    00107\nCIBMODFY EQU   X'44'                                                    00108\nCIBSTOP  EQU   X'40'                                                    00109\nCIBMOUNT EQU   X'0C'                                                    00110\n*                                                                       00111\nCIBLEN   DS    FL1                                                      00112\n         DS    XL4  RESERVED                                            00113\nCIBASID  DS    0H  ADDRESS SPACE ID..VS2                                00114\nCIBTJID  DS    CL2  TSO JID                                             00115\nCIBCONID DS    C  CONSOLE ID ISSUING COMM                               00116\n         DS    X  RESERVED                                              00117\nCIBDATLN DS    H                                                        00118\nCIBDATA  DS    CL8                                                      00119\n         MEND                                                           00120\n         TITLE  '... DIRECT ACCESS VOLUME LISTER ...'                   00121\nDISKMAP  START 0                                                        00122\n         SPACE 1                                                        00123\n*                                                                       00124\n* WHEN ASSEMBLING DISKMAP SYS1.AMODGEN MUST BE CONCATENATED TO          00125\n* SYS1.MACLIB.                                                          00126\n*                                                                       00127\n* WHEN LINKEDITING DISKMAP IT MUST BE AUTHORIZED (SETCODE AC=1) AND BE  00128\n* PLACED IN AN AUTHORIZED LIBRARY.  I.E. LNKLST00 LIBRARY               00129\n* USE FOLLOWING JCL TO EXECUTE DISKMAP                                  00130\n* //STEP EXEC PGM=DISKMAP,REGION=1024K (1024K FOR LARGE VTOCS)          00131\n* //SYSPRINT DD SYSOUT=A                                                00132\n* //ANYNAME DD UNIT=WHATEVER,VOL=SER=WHATEVER,DISP=OLD (DISKMAP WILL    00133\n* LIST ANY DDCARD IN STEP EXCEPT FOR RESERVED DDNAMES SUCH AS STEPLIB,  00134\n* STEPCAT ETC. AS MANY DDCARDS CAN BE INCLUDED AS NEEDED                00135\n*                                                                       00136\n* REFER TO THE SYSPRINT OUTPUT LISTINGS FOR PARM INFORMATION.           00137\n* PARM INFORMATION DOESNOT HAVE TO BE SPECIFIED.                        00138\n*                                                                       00139\n* DISKMAP WILL WORK ON MVS,SVS,VS1,MVT,MFT,PCP OPERATING SYSTEMS        00140\n* IT ALSO SUPPORTS 3350S AS OF 01/77                                    00141\n* IT ALSO SUPPORTS 3380S AS OF 08/82 -- J.MARTIN                        00142\n*                                                                       00143\nR0       EQU   0                   WORK                                 00144\nR1       EQU   1                   WORK                                 00145\nR2       EQU   2                   WORK                                 00146\nR3       EQU   3                   WORK                                 00147\nR4       EQU   4                   WORK                                 00148\nR5       EQU   5                   WORK                                 00149\nR6       EQU   6                   -> FM1, FM4 DSCB, PDS ENTRY          00150\nR7       EQU   7                   -> FM2 DSCB, IF ANY                  00151\nR8       EQU   8                   -> FM3, FM5 DSCB, IF ANY             00152\nR9       EQU   9                   BASE REG 1                           00153\nR10      EQU   10                  BASE REG 2                           00154\nR11      EQU   11                  BASE REG 3                           00155\nR12      EQU   12                  BASE REG 4                           00156\nR13      EQU   13                  -> SAVE AREA                         00157\nR14      EQU   14                  LINK, WORK                           00158\nR15      EQU   15                  WORK                                 00159\n         SPACE 1                                                        00160\nSPACE0AP EQU   X'01'                                                    00161\nSPACE1AP EQU   X'09'                                                    00162\nSPACE2AP EQU   X'11'                                                    00163\nSPACE3AP EQU   X'19'                                                    00164\nEJECTAP  EQU   X'89'                                                    00165\nSPACE0IM EQU   X'03'                                                    00166\nSPACE1IM EQU   X'0B'                                                    00167\nSPACE2IM EQU   X'13'                                                    00168\nSPACE3IM EQU   X'1B'                                                    00169\nEJECTIM  EQU   X'8B'                                                    00170\n         SPACE 1                                                        00171\nDEBUCBAD EQU   32                                                       00172\nCAMLSTLN EQU   148                                                      00173\nPDSBLKLN EQU   264                                                      00174\nNCPDFLT  EQU   10                                                       00175\nUTILPRIV EQU   5                                                        00176\nOPERPRIV EQU   9                                                        00177\n         SPACE 1                                                        00178\nEMPTYOPT EQU   X'80'                                                    00179\nLSTDTOPT EQU   X'40'                                                    00180\nDUMPOPT  EQU   X'20'                                                    00181\nSDUMPOPT EQU   X'10'                                                    00182\nMAPOPT   EQU   X'08'                                                    00183\nPDSOPT   EQU   X'04'                                                    00184\nEXTNTOPT EQU   X'02'                                                    00185\nDIRFLAG  EQU   X'01'                                                    00186\n         SPACE 1                                                        00187\nVOLSOPT  EQU   X'80'                                                    00188\nLNCNTOPT EQU   X'40'                                                    00189\nDEBUGOPT EQU   X'20'                                                    00190\nRESETOPT EQU   X'10'                                                    00191\nNCPOPT   EQU   X'08'                                                    00192\nISAMOPT  EQU   X'04'                                                    00193\nJDATEOPT EQU   X'02'                                                    00194\nMODELOPT EQU   X'01'                                                    00195\n         EJECT                                                          00196\n         SPACE 5                                                        00197\n         SAVE  (14,12),,*                                               00198\n         LR    R9,R15                                                   00199\n         USING DISKMAP,R9                                               00200\n         LM    R10,R12,BASEVALS                                         00201\n         USING DISKMAP,R9,R10,R11,R12                                   00202\n         SPACE 1                                                        00203\n         LR    R2,R13                                                   00204\n         LA    R13,SAVEAREA                                             00205\n         ST    R2,SAVEAREA+4                                            00206\n         ST    R13,8(,R2)                                               00207\n         SR    R2,R2                                                    00208\n         SPM   R2                                                       00209\n         B     INIT                                                     00210\n         SPACE 1                                                        00211\nBASEVALS DC    A(DISKMAP+X'1000',DISKMAP+X'2000',DISKMAP+X'3000')       00212\n         EJECT ,                                                        00213\n         SPACE 3                                                        00214\nNEXTVOL  BAL   R14,FREECORE                                             00215\n         XC    START0(LENGTH0),START0 WHOLESALE ZEROING OF CORE         00216\n         SR    R0,R0                                                    00217\n         ST    R0,BUFPTR                                                00218\n         MVC   CURLINES,=H'999'                                         00219\n         MVI   HEADER,C' '                                              00220\n         MVC   HEADER+1(L'HEADER-1),HEADER                              00221\n         LA    R1,LASTDS1                                               00222\n         ST    R1,FIRSTDS1                                              00223\n         LA    R1,HOOKSTRT                                              00224\n         ST    R1,HOOKSTRT                                              00225\n         MVC   HWMDS1,EFFS                                              00226\n         NI    PARMOPT1,255-DIRFLAG                                     00227\n         SPACE 1                                                        00228\nNEXTDD   TM    PARMOPT2,VOLSOPT                                         00229\n         BO    NEXTDDCV                                                 00230\n         L     R1,DDLSTPTR                                              00231\n         LTR   R1,R1                                                    00232\n         BZ    TIOTADV                                                  00233\n         LH    R0,DDNAMLEN                                              00234\n         SH    R0,=H'8'                                                 00235\n         BM    RETURN                                                   00236\n         STH   R0,DDNAMLEN                                              00237\n         MVC   VOLDDNAM,0(R1)                                           00238\n         LA    R1,8(R1)                                                 00239\n         ST    R1,DDLSTPTR                                              00240\n         B     NMAPSTRT                                                 00241\n         SPACE 1                                                        00242\nTIOTADV  L     R1,TIOTADDD                                              00243\n         USING TIOENTRY,R1                                              00244\n         SR    R0,R0                                                    00245\n         IC    R0,TIOELNGH                                              00246\n         LTR   R0,R0                                                    00247\n         BZ    RETURN                                                   00248\n         MVC   VOLDDNAM,TIOEDDNM                                        00249\n         AR    R1,R0                                                    00250\n         ST    R1,TIOTADDD                                              00251\n         DROP  R1                                                       00252\n         SPACE 1                                                        00253\nNMAPSTRT LA    R0,8                                                     00254\n         LA    R1,NOMAPDDS                                              00255\n         CLC   VOLDDNAM(5),=C'SYS00'   CHECK FOR DAIR DDNAME  P.A.S.    00256\n*        **** THIS IS CAUSED BY DAIR FOR THE CVOL CATALOG ***P.A.S.     00257\n         BE    NEXTDD      IF FOUND, DO NOT MAP THIS VOL                00258\nNMAPSRCH CLC   VOLDDNAM,0(R1)                                           00259\n         BE    NOMAPFND                                                 00260\n         BXH   R1,R0,NMAPSRCH                                           00261\n         SPACE 1                                                        00262\nNOMAPFND LA    R0,VOLDDNAM                                              00263\n         CR    R0,R1                                                    00264\n         BNE   NEXTDD                                                   00265\n         B     TYPEDEV                                                  00266\n         SPACE 1                                                        00267\nNEXTDDCV LH    R0,CURVOL                                                00268\n         CH    R0,NUMVOLS                                               00269\n         BNL   RETURN                                                   00270\n         AH    R0,=H'1'                                                 00271\n         STH   R0,CURVOL                                                00272\n         BAL   R14,CONVERT                                              00273\n         MVC   CURVOLNM,CONVUNPK+10                                     00274\n         SPACE 1                                                        00275\nTYPEDEV  DEVTYPE VOLDDNAM,DEVTYPE,DEVTAB,RPS                            00276\n         BXH   R15,R15,ERRNODD                                          00277\n         CLI   DEVTYPE+2,UCB3DACC                                       00278\n         BNE   ERRNOTDA                                                 00279\n         SPACE 1                                                        00280\n         MVC   DEVTABND,DEVTYPE+3                                       00281\n         LA    R0,DEVENTLN                                              00282\n         LA    R1,DEVTABLE                                              00283\nDEVLOOP  CLC   DEVTABND(1),0(R1)                                        00284\n         BE    DEVNTFND                                                 00285\n         BXH   R1,R0,DEVLOOP                                            00286\n         SPACE 1                                                        00287\nDEVNTFND CLC   1(7,R1),DEVTABND+1                                       00288\n         BE    ERRUNKDV                                                 00289\n         ST    R1,DEVTABPT                                              00290\n         SPACE 1                                                        00291\n***** THIS SECTION WILL TELL THE DIFFERENCE BETWEEN THE 2 3340 MODELS.  00292\n***** THE 3340 HAS 1 UCBTYPE FOR BOTH 35M/70M.                          00293\n***** THIS SECTION WILL LOOK FOR THE X'015D' NUMBER OF CYLS....35M      00294\n*****   ELSE THE NUMBER OF CYLS (70M) WILL BE X'02BA'...                00295\n         SPACE 1                                                        00296\n         CLI   DEVTYPE+3,X'0A'   TEST FOR A 3340-?                      00297\n         BNE   RVDISK    IF NOT 3340...BYPASS                           00298\n         CLC   DEVTYPE+8(2),=X'015D'    TEST FOR A 35M 3340 TYPE        00299\n         BE    RVDISK   IF IT IS A 35MEG...NO NEED TO CHANGE DESC       00300\n         MVC   6(2,R1),=C'70'   MOVE A \"70M\" ON DESC OF UNIT            00301\n         SPACE 1                                                        00302\n*** THIS SECTION WILL DETERMINE IF THE DISK IS REAL, OR MASS STORAGE    00303\n         SPACE 1                                                        00304\nRVDISK   TM    DEVTYPE+2,X'08'   TEST IF REAL/VIRT DASD                 00305\n         BZ    DEVCON   BIT=0, REAL     BIT=1, VIRTUAL                  00306\n         MVC   6(9,R1),=C'VIRT VOL.' MOVE \"VIRT\" DESC OF UNIT           00307\n         SPACE 1                                                        00308\n******** THIS SECTION WILL LOAD THE CONSTANTS FROM THE \"DEVTYPE\" TO     00309\n********   BE USED BY THE HOMEMADE CCHHR CONVERT ROUTINES.....          00310\n*                                                                       00311\nDEVCON   MVC   DEVCONV2(2),DEVTYPE+10    LOW ORDER  CC                  00312\n         MVC   DEVCONV1(1),DEVTYPE+11     HIGH ORDER CC                 00313\n         MVI   DEVCONV1+1,X'00'      FINISH HIGH ORDER CC               00314\n         MVC   DEVCONV3(2),=X'0000'   ZERO HIGH ORDER HH                00315\n         MVC   DEVCONV4(2),=X'0001'   LOW ORDER  HH                     00316\n         MVC   TRKSPCYL(2),DEVTYPE+10    TRKS/CYL                       00317\n         SR    R1,R1                                                    00318\n         LH    R1,DEVTYPE+8    LOAD  CYL PER VOLUME                     00319\n         MH    R1,DEVTYPE+10   MULT \"CYL/VOL\" BY \"TRKS/CYL\"             00320\n         STH   R1,TRKSPVOL    RESULT IS  \"TRACKS/VOLUME\"                00321\n*                                                                       00322\n         MVC   DCBDDNAM+(PDSDCB-IHADCB),VOLDDNAM                        00323\n         MVC   DCBDDNAM+(VTOCDCB-IHADCB),VOLDDNAM                       00324\n         SPACE 1                                                        00325\n         RDJFCB MF=(E,OPENLIST)                                         00326\n         TM    JFCBTSDM,X'20'                                           00327\n         BO    ERRNOTDA                                                 00328\n         MVI   JFCBDSNM,X'04'                                           00329\n         MVC   JFCBDSNM+1(43),JFCBDSNM                                  00330\n         OI    JFCBTSDM,X'08'                                           00331\n         SPACE 1                                                        00332\n         LH    R1,NCPPARM                                               00333\n         SR    R0,R0                                                    00334\n         IC    R0,JFCNCP                                                00335\n         MVI   JFCNCP,0                                                 00336\n         LTR   R0,R0                                                    00337\n         BZ    SAVENCP                                                  00338\n         LR    R1,R0                                                    00339\nSAVENCP  ST    R1,RENCP                                                 00340\n         OI    DCBOPTCD+(VTOCDCB-IHADCB),DCBOPTC                        00341\n         CH    R1,=H'1'                                                 00342\n         BNE   SETNCP                                                   00343\n         SR    R1,R1                                                    00344\n         NI    DCBOPTCD+(VTOCDCB-IHADCB),255-DCBOPTC                    00345\nSETNCP   STC   R1,DCBNCP+(VTOCDCB-IHADCB)                               00346\n         SPACE 1                                                        00347\n         OPEN  TYPE=J,MF=(E,OPENLIST)                                   00348\n         TM    DCBOFLGS+(VTOCDCB-IHADCB),DCBOFOPN                       00349\n         BZ    ERRNOPEN                                                 00350\n         L     R2,DCBDEBAD+(VTOCDCB-IHADCB)                             00351\n         L     R2,DEBUCBAD(,R2)                                         00352\n         SPACE 1                                                        00353\n********  THIS SECTION DELETED    4/1/75    P.A.S.                      00354\n********  IT WAS USED FOR DATA CELLS...NO LONGER SUPPORTED              00355\n         SPACE 1                                                        00356\n         USING UCBOB,R2                                                 00357\nMAINUCB  MVC   VTOCTTR,UCBVTOC                                          00358\n         MVC   VOLSERNO,UCBVOLI                                         00359\n         MVC   VOLSTAT,UCBSTAT                                          00360\n         MVC   HEAD1UCB,UCBNAME     MOVE EBCIDIC UCB ADDR FOR HEADN     00361\n         TM    UCBSTAB,UCBBPUB    TEST FOR PUBLIC MOUNT                 00362\n         BNO   *+10                                                     00363\n         MVC   HEAD1MT,=C'PUBLIC  '                                     00364\n         TM    UCBSTAB,UCBBPRV    TEST FOR PRIVATE                      00365\n         BNO   *+10                                                     00366\n         MVC   HEAD1MT,=C'PRIVATE '                                     00367\n         TM    UCBSTAB,UCBBSTR   TEST FOR STORAGE                       00368\n         BNO   *+10                                                     00369\n         MVC   HEAD1MT,=C'STORAGE '                                     00370\n         TM    UCBSTAB,UCBPGFL    TEST IF PAGING DEVIC                  00371\n         BNO   *+10                                                     00372\n         MVC   HEAD1MT,=C'*PAGING*'                                     00373\n         TM    UCBSTAT,UCBSYSR    TEST FOR SYS-RES                      00374\n         BNO   *+10                                                     00375\n         MVC   HEAD1MT,=C'*SYSRES*'                                     00376\n         SPACE 1                                                        00377\n         MVC   HEAD1MTR,=C'REMOV'                                       00378\n         TM    UCBSTAT,UCBRESV                                          00379\n         BNO   *+10                                                     00380\n         MVC   HEAD1MTR,=C'RSERV'                                       00381\n         TM    UCBSTAT,UCBPRES                                          00382\n         BNO   *+10                                                     00383\n         MVC   HEAD1MTR,=C'RSDNT'                                       00384\n         SPACE 1                                                        00385\nCOMONUCB ST    R2,UCBADDR                                               00386\n         DROP  R2                                                       00387\n         MVC   HEAD1VOL,VOLSERNO                                        00388\n         MVC   HEADMID(81),HEAD1                                        00389\n         SPACE 1                                                        00390\n         ENQ   MF=(E,ENQVTOC)                                           00391\n         NI    DEQGATE,X'0F'                                            00392\n         SPACE 1                                                        00393\n         LH    R1,VTOCTT                                                00394\n         BAL   R14,TTCONVRT                                             00395\n         MVC   VTOCCCHH,CCHH                                            00396\n         MVI   VTDSCBTR+1,255                                           00397\n         SPACE 1                                                        00398\n         SR    R4,R4                                                    00399\n         IC    R4,DCBKEYLE+(VTOCDCB-IHADCB)                             00400\n         AH    R4,DCBBLKSI+(VTOCDCB-IHADCB)                             00401\n         AH    R4,=H'20'                                                00402\n         ST    R4,REBLKSIZ                                              00403\n         L     R5,RENCP                                                 00404\n         ST    R5,RECOUNT                                               00405\n         LR    R1,R4                                                    00406\n         MR    R0,R5                                                    00407\n         LR    R0,R1                                                    00408\n         ST    R0,REGETSIZ                                              00409\n         GETMAIN EC,LV=(0),A=REBLOCK@                                   00410\n         BXH   R15,R15,ERRNOCOR                                         00411\n         L     R2,REBLOCK@                                              00412\n         ST    R2,RENEXT@                                               00413\n         LA    R3,VTOCDCB                                               00414\n         SPACE 1                                                        00415\nREADINIT XC    0(20,R2),0(R2)                                           00416\n         LA    R4,20(R2)                                                00417\n         READ  (2),SF,(3),(4),MF=E                                      00418\n         A     R2,REBLKSIZ                                              00419\n         BCT   R5,READINIT                                              00420\n         SPACE 1                                                        00421\n         LA    R4,DS4LEN                                                00422\n         BAL   R14,GETCORE                                              00423\n         ST    R3,FMT4AD                                                00424\n         LR    R6,R3                                                    00425\n         USING DS4,R6                                                   00426\n         BAL   R14,VTOCREAD                                             00427\n         BAL   R14,ABDUMP                                               00428\n         CLI   DS4IDFMT,C'4'                                            00429\n         MVI   BADDSTYP,C'4'                                            00430\n         LR    R8,R6                                                    00431\n         BNE   ERRNOTFX                                                 00432\n         MVI   FM4COUNT+1,1                                             00433\n         TM    DS4VTOCI,X'04'                                           00434\n         BZ    *+8                                                      00435\n         OI    PARMOPT1,DIRFLAG                                         00436\n         MVC   HOOKLCCH(20),HOOKINIT                                    00437\n         LA    R2,HOOKPTR                                               00438\n         BAL   R14,HOOKUP                                               00439\n         SR    R0,R0                                                    00440\n         IC    R0,DS4DEVDT                                              00441\n         STH   R0,VTDSCBTR                                              00442\n         TM    PARMOPT2,RESETOPT+DEBUGOPT                               00443\n         BNZ   *+10                                                     00444\n         MVC   HWMDS1,DS4HPCHR                                          00445\n         MVC   HOOKLCCH(8),DS4VTOCE+2                                   00446\n         LA    R2,DS4VTOCE                                              00447\n         BAL   R14,F1EXTCNV                                             00448\n         STH   R0,HOOKNTRK                                              00449\n         STH   R0,VTOCSIZE                                              00450\n         MVC   HOOKLOTT(4),LOWTT                                        00451\n         MVI   HOOKTYPE,C'4'                                            00452\n         MVC   HOOKSEQN,DS4VTOCE+1                                      00453\n         MVC   HOOKIDPT,=A(VTOCMSG)                                     00454\n         LA    R2,HOOKPTR                                               00455\n         BAL   R14,HOOKUP                                               00456\n         SPACE 1                                                        00457\n         LA    R4,DS5LEN                                                00458\n         BAL   R14,GETCORE                                              00459\n         ST    R3,FMT5AD                                                00460\n         LR    R8,R3                                                    00461\n         USING DS5,R8                                                   00462\n         BAL   R14,VTOCREAD                                             00463\n         BAL   R14,ABDUMP                                               00464\n         CLI   DS5FMTID,C'5'                                            00465\n         MVI   BADDSTYP,C'5'                                            00466\n         BNE   ERRNOTFX                                                 00467\n         MVI   FM5COUNT+1,1                                             00468\n         BAL   R14,F56HOOK                                              00469\n         SR    R0,R0                                                    00470\n         ST    R0,DS5F5PTR                                              00471\n         DROP  R6,R8                                                    00472\n         EJECT                                                          00473\n         SPACE 3                                                        00474\nNEXTFM1  LA    R4,DS1LEN                                                00475\n         BAL   R14,GETCORE                                              00476\n         LR    R6,R3                                                    00477\n         USING DS1,R6                                                   00478\nREADFM1  BAL   R14,VTOCREAD                                             00479\n         B     READFM5                                                  00480\n         SR    R1,R1                                                    00481\n         IC    R1,DS1FMTID                                              00482\n         N     R1,=F'15'                                                00483\n         CH    R1,=H'6'                                                 00484\n         BNH   *+8                                                      00485\n         BAL   R14,ABDUMP                                               00486\n         SLL   R1,1                *2                                   00487\n         LH    R2,FMXCOUNT(R1)                                          00488\n         LA    R2,1(R2)                                                 00489\n         STH   R2,FMXCOUNT(R1)                                          00490\n         LTR   R1,R1                                                    00491\n         BNZ   CHECKDS1                                                 00492\n         CLI   HWMINDIC,1                                               00493\n         BE    READFM1                                                  00494\n         MVC   HWMNEW,DS1FDAD+3                                         00495\n         MVI   HWMINDIC,1                                               00496\n         B     READFM1                                                  00497\n         SPACE 1                                                        00498\nCHECKDS1 CLI   DS1FMTID,C'1'                                            00499\n         BNE   READFM1                                                  00500\n         MVC   HWMNEW,DS1FDAD+3                                         00501\n         MVI   HWMINDIC,1                                               00502\n         L     R2,FIRSTDS1                                              00503\n         L     R3,=A(FIRSTDS1-(DS1F1PTR-DS1))                           00504\nCOMPFM1  CLC   DS1DSNAM,DS1DSNAM-DS1(R2)                                00505\n         BL    INSRTFM1                                                 00506\n         LR    R3,R2                                                    00507\n         L     R2,DS1F1PTR-DS1(R2)                                      00508\n         B     COMPFM1                                                  00509\nINSRTFM1 ST    R2,DS1F1PTR                                              00510\n         ST    R6,DS1F1PTR-DS1(R3)                                      00511\n         SR    R0,R0                                                    00512\n         ST    R0,DS1F3PTR                                              00513\n         B     NEXTFM1                                                  00514\n         SPACE 1                                                        00515\n         DROP  R6                                                       00516\n         EJECT                                                          00517\n         SPACE 3                                                        00518\nREADFM5  BAL   R14,CLOSVTOC                                             00519\n         L     R6,FMT4AD                                                00520\n         USING DS4,R6                                                   00521\n         L     R8,FMT5AD                                                00522\n         USING DS5,R8                                                   00523\n         B     CHECKFM5                                                 00524\n         SPACE 1                                                        00525\nNEXTFM5  LA    R4,DS5LEN                                                00526\n         BAL   R14,GETCORE                                              00527\n         ST    R3,DS5F5PTR                                              00528\n         LA    R2,DS5PTRDS                                              00529\n         LR    R8,R3                                                    00530\n         BAL   R14,OBTAIN                                               00531\n         CLI   DS5FMTID,C'5'                                            00532\n         MVI   BADDSTYP,C'5'                                            00533\n         BNE   ERRNOTFX                                                 00534\n         BAL   R14,F56HOOK                                              00535\n         SR    R0,R0                                                    00536\n         ST    R0,DS5F5PTR                                              00537\nCHECKFM5 CLC   DS5PTRDS,ZEROES                                          00538\n         BNE   NEXTFM5                                                  00539\n         SPACE 1                                                        00540\n         CLC   DS4F6PTR,ZEROES                                          00541\n         BE    READFM23                                                 00542\n         LA    R4,DS6LEN                                                00543\n         BAL   R14,GETCORE                                              00544\n         ST    R3,FMT6AD                                                00545\n         LA    R2,DS4F6PTR                                              00546\n         SPACE 1                                                        00547\nREADFM6  LR    R8,R3                                                    00548\n         USING DS6,R8                                                   00549\n         BAL   R14,OBTAIN                                               00550\n         CLI   DS6FMTID,C'6'                                            00551\n         MVI   BADDSTYP,C'6'                                            00552\n         BNE   ERRNOTFX                                                 00553\n         BAL   R14,F56HOOK                                              00554\n         SR    R3,R3                                                    00555\n         ST    R3,DS6F6PTR                                              00556\n         CLC   DS6PTRDS,ZEROES                                          00557\n         BE    READFM23                                                 00558\n         LA    R4,DS6LEN                                                00559\n         BAL   R14,GETCORE                                              00560\n         ST    R3,DS6F6PTR                                              00561\n         LA    R2,DS6PTRDS                                              00562\n         B     READFM6                                                  00563\n         SPACE 1                                                        00564\n         DROP  R6,R8                                                    00565\n         EJECT ,                                                        00566\n         SPACE 3                                                        00567\nREADFM23 L     R6,=A(FIRSTDS1-(DS1F1PTR-DS1))                           00568\n         USING DS1,R6                                                   00569\nNEXTFM23 L     R6,DS1F1PTR                                              00570\n         CLC   DS1DSNAM,LASTDS1                                         00571\n         BE    VTOCUPDT                                                 00572\n         CLC   DS1PTRDS,ZEROES                                          00573\n         BE    NEXTFM23                                                 00574\n         SPACE 2                                                        00575\n         LA    R4,DS3LEN                                                00576\n         BAL   R14,GETCORE                                              00577\n         LR    R8,R3                                                    00578\n         USING DS3,R8                                                   00579\n         LA    R2,DS1PTRDS                                              00580\n         BAL   R14,OBTAIN                                               00581\n         ST    R8,DS1F3PTR                                              00582\n         SR    R0,R0                                                    00583\n         ST    R0,DS3F2PTR                                              00584\n         TM    DS1DSORG,DCBDSGIS                                        00585\n         BNO   CHECKFM3                                                 00586\n         USING DS2,R8                                                   00587\n         CLI   DS2FMTID,C'2'                                            00588\n         BNE   CHECKFM3                                                 00589\n         CLC   DS2PTRDS,ZEROES                                          00590\n         BE    NEXTFM23                                                 00591\n         LA    R4,DS3LEN                                                00592\n         BAL   R14,GETCORE                                              00593\n         ST    R3,DS2F3PTR                                              00594\n         LA    R2,DS2PTRDS                                              00595\n         BAL   R14,OBTAIN                                               00596\n         ST    R8,DS3F2PTR-DS3(,R3)                                     00597\n         LR    R8,R3                                                    00598\n         USING DS3,R8                                                   00599\n         SPACE 1                                                        00600\nCHECKFM3 CLI   DS3FMTID,C'3'                                            00601\n         BE    NEXTFM23                                                 00602\n         MVI   BADDSTYP,C'3'                                            00603\n         B     ERRNOTFX                                                 00604\n         SPACE 1                                                        00605\n         DROP  R6,R8                                                    00606\n         EJECT ,                                                        00607\n         SPACE 1                                                        00608\nVTOCUPDT TM    PARMOPT2,RESETOPT+DEBUGOPT                               00609\n         BZ    VTOCPRT                                                  00610\n         TM    PARMOPT1,DIRFLAG                                         00611\n         BO    VTOCPRT                                                  00612\n         OI    OPENFLAG,OPENUPDT                                        00613\n         OPEN  TYPE=J,MF=(E,OPENLIST)                                   00614\n         TM    DCBOFLGS+(VTOCDCB-IHADCB),DCBOFOPN                       00615\n         BO    *+8                                                      00616\n         BAL   R14,ABEND                                                00617\n         NI    OPENFLAG,255-OPENUPDT                                    00618\n         SPACE 1                                                        00619\nVTOCUPRD READ  VTOCDECB,SF,MF=E                                         00620\n         CHECK VTOCDECB                                                 00621\n         LA    R1,=CL11'VTOC READ.'                                     00622\n         BAL   R14,SYNADCHK                                             00623\n         MVC   DS4FDAD+(CAMLIST-DS4),DCBFDAD+(VTOCDCB-IHADCB)           00624\n         SPACE 1                                                        00625\n         CLI   DS4IDFMT+(CAMLIST-DS4),C'4'                              00626\n         MVI   BADDSTYP,C'4'                                            00627\n         LA    R8,CAMLIST                                               00628\n         BNE   ERRNOTFX                                                 00629\n         MVC   HWMOLD,DS4HPCHR+(CAMLIST-DS4)                            00630\n         MVC   DS4HPCHR+(CAMLIST-DS4),HWMNEW                            00631\n         TM    PARMOPT2,DEBUGOPT                                        00632\n         BO    VTOCUPCL                                                 00633\n         SPACE 1                                                        00634\n         WRITE VTOCDECB,SF,MF=E                                         00635\n         CHECK VTOCDECB                                                 00636\n         LA    R1,=CL11'VTOC WRITE.'                                    00637\n         BAL   R14,SYNADCHK                                             00638\n         L     R1,FMT4AD                                                00639\n         MVC   0(DS4LEN,R1),CAMLIST                                     00640\n         SPACE 1                                                        00641\nVTOCUPCL CLOSE (VTOCDCB)                                                00642\n         BAL   R14,DEQVTOC                                              00643\n         SPACE 1                                                        00644\n         MVC   BUF+1(31),=C'VTOC RESET INFO:  OLD FMT1 HWM='            00645\n         TM    PARMOPT2,DEBUGOPT                                        00646\n         BZ    *+10                                                     00647\n         MVC   BUF+6(5),=C'DEBUG'                                       00648\n         MVI   BUF+36,C'.'                                              00649\n         MVI   BUF+41,C'.'                                              00650\n         UNPK  TRAREA,HWMOLD(8)                                         00651\n         TR    TRAREA,TRTABLE                                           00652\n         MVC   BUF+32(4),TRAREA                                         00653\n         MVC   BUF+37(4),TRAREA+4                                       00654\n         MVC   BUF+42(2),TRAREA+8                                       00655\n         SPACE 1                                                        00656\n         MVC   BUF+47(13),=C'NEW FMT1 HWM='                             00657\n         MVI   BUF+64,C'.'                                              00658\n         MVI   BUF+69,C'.'                                              00659\n         UNPK  TRAREA,HWMNEW(8)                                         00660\n         TR    TRAREA,TRTABLE                                           00661\n         MVC   BUF+60(4),TRAREA                                         00662\n         MVC   BUF+65(4),TRAREA+4                                       00663\n         MVC   BUF+70(2),TRAREA+8                                       00664\n         MVI   BUF,SPACE3AP                                             00665\n         BAL   R14,PRINT                                                00666\n         EJECT                                                          00667\n         SPACE 1                                                        00668\nVTOCPRT  BAL   R14,DEQVTOC                                              00669\n         L     R6,FMT4AD                                                00670\n         USING DS4,R6                                                   00671\n         SPACE 1                                                        00672\n         MVC   BUF+1(19),=C'DEVICE DESCRIPTION:'                        00673\n         MVC   BUF+22(5),=C'TYPE='                                      00674\n         L     R2,DEVTABPT                                              00675\n         MVC   BUF+27(15),1(R2)                                         00676\n         SPACE 1                                                        00677\n         MVC   BUF+44(7),=C'NOCYLS='                                    00678\n         LA    R2,DS4DEVSZ                                              00679\n         BAL   R14,CONVERT2                                             00680\n         MVC   BUF+51(5),CONVERTD                                       00681\n         SPACE 1                                                        00682\n         MVC   BUF+58(9),=C'TRKS/CYL='                                  00683\n         LA    R2,DS4DEVSZ+2                                            00684\n         BAL   R14,CONVERT2                                             00685\n         MVC   BUF+67(5),CONVERTD                                       00686\n         SPACE 1                                                        00687\n         MVC   BUF+74(8),=C'TRKSIZE='                                   00688\n         LA    R2,DS4DEVTK                                              00689\n         BAL   R14,CONVERT2                                             00690\n         MVC   BUF+82(5),CONVERTD                                       00691\n         SPACE 1                                                        00692\n         MVC   BUF+89(12),=C'MAX BLKSIZE='                              00693\n         LA    R2,DEVTYPE+6                                             00694\n         BAL   R14,CONVERT2                                             00695\n         MVC   BUF+101(5),CONVERTD                                      00696\n         SPACE 1                                                        00697\n         MVC   BUF+108(9),=C'DSCB/TRK='                                 00698\n         LA    R2,DS4DEVDT                                              00699\n         BAL   R14,CONVERT1                                             00700\n         MVC   BUF+117(3),CONVERTD                                      00701\n         SPACE 1                                                        00702\n         MVC   BUF+122(8),=C'PDS/TRK='                                  00703\n         LA    R2,DS4DEVDB                                              00704\n         BAL   R14,CONVERT1                                             00705\n         MVC   BUF+130(3),CONVERTD                                      00706\n         MVI   BUF,SPACE2AP                                             00707\n         BAL   R14,PRINT                                                00708\n         SPACE 1                                                        00709\n         MVC   BUF+1(11),=C'VTOC DESCR:'                                00710\n         MVC   BUF+13(7),=C'R/W=0/0'                                    00711\n         CLI   DS4SECLV,0                                               00712\n         BE    VTPRDSCB                                                 00713\n         UNPK  TRAREA,DS4SECLV(8)                                       00714\n         TR    TRAREA,TRTABLE                                           00715\n         MVC   BUF+17(1),TRAREA                                         00716\n         MVC   BUF+19(1),TRAREA+1                                       00717\n         SPACE 1                                                        00718\nVTPRDSCB MVC   BUF+23(6),=C'DSCBS='                                     00719\n         SR    R0,R0                                                    00720\n         IC    R0,DS4DEVDT                                              00721\n         MH    R0,VTOCSIZE                                              00722\n         BAL   R14,CONVERT                                              00723\n         MVC   BUF+29(5),CONVERTD                                       00724\n         SPACE 1                                                        00725\n         MVC   BUF+35(6),=C'AVAIL='                                     00726\n         LA    R2,DS4DSREC                                              00727\n         BAL   R14,CONVERT2                                             00728\n         MVC   BUF+41(5),CONVERTD                                       00729\n         SPACE 1                                                        00730\n         MVC   BUF+47(9),=C'VTOC EXT='                                  00731\n         MVI   BUF+60,C'.'                                              00732\n         MVI   BUF+65,C'-'                                              00733\n         MVI   BUF+70,C'.'                                              00734\n         UNPK  TRAREA,DS4VTOCE+2(8)                                     00735\n         TR    TRAREA,TRTABLE                                           00736\n         MVC   BUF+56(4),TRAREA                                         00737\n         MVC   BUF+61(4),TRAREA+4                                       00738\n         UNPK  TRAREA,DS4VTOCE+6(8)                                     00739\n         TR    TRAREA,TRTABLE                                           00740\n         MVC   BUF+66(4),TRAREA                                         00741\n         MVC   BUF+71(4),TRAREA+4                                       00742\n         SPACE 1                                                        00743\n         MVC   BUF+78(9),=C'FMT1 HWM='                                  00744\n         MVI   BUF+91,C'.'                                              00745\n         MVI   BUF+96,C'.'                                              00746\n         UNPK  TRAREA,DS4HPCHR(8)                                       00747\n         TR    TRAREA,TRTABLE                                           00748\n         MVC   BUF+87(4),TRAREA                                         00749\n         MVC   BUF+92(4),TRAREA+4                                       00750\n         MVC   BUF+97(2),TRAREA+8                                       00751\n         SPACE 1                                                        00752\n         MVC   BUF+101(7),=C'NUMALT='                                   00753\n         LA    R2,DS4NOATK                                              00754\n         BAL   R14,CONVERT2                                             00755\n         MVC   BUF+108(5),CONVERTD                                      00756\n         SPACE 1                                                        00757\n         LH    R2,TRKSPVOL              LOAD TRKS PER VOL TOTAL         00758\n         SH    R2,DS4NOATK              SUBTRACT OFF ALTERNATES LEFT    00759\n         STH   R2,TRKSPVOL              TOTAL PER VOL = OLD TOT - ALTS  00760\n         SPACE 1                                                        00761\n         MVC   BUF+114(8),=C'NEXTALT='                                  00762\n         UNPK  TRAREA,DS4HCCHH(8)                                       00763\n         TR    TRAREA,TRTABLE                                           00764\n         MVC   BUF+122(4),TRAREA                                        00765\n         MVI   BUF+126,C'.'                                             00766\n         MVC   BUF+127(4),TRAREA+4                                      00767\n         MVI   BUF,SPACE2AP                                             00768\n         BAL   R14,PRINT                                                00769\n         SPACE 1                                                        00770\n         MVC   BUF+1(16),=C'AVAILABLE SPACE:'                           00771\n         LH    R0,AVAILSPC                                              00772\n         BAL   R14,CONVERT                                              00773\n         MVC   BUF+18(5),CONVEDIT+7                                     00774\n         SPACE 1                                                        00775\n         MVC   BUF+24(9),=C'TRACKS IN'                                  00776\n         LH    R0,AVAILEXT                                              00777\n         BAL   R14,CONVERT                                              00778\n         MVC   BUF+34(4),CONVEDIT+8                                     00779\n         SPACE 1                                                        00780\n         MVC   BUF+39(18),=C'EXTENTS, INCLUDING'                        00781\n         LH    R0,AVAILCYL                                              00782\n         BAL   R14,CONVERT                                              00783\n         MVC   BUF+58(4),CONVEDIT+8                                     00784\n         SPACE 1                                                        00785\n         MVC   BUF+63(34),=C'FULL CYLINDERS.  LARGEST EXTENT IS'        00786\n         LA    R2,F5LARGST                                              00787\n         BAL   R14,CONVERT2                                             00788\n         MVC   BUF+98(5),CONVEDIT+7                                     00789\n         SPACE 1                                                        00790\n         MVC   BUF+104(14),=C'CYLINDERS PLUS'                           00791\n         LA    R2,F5LARGST+2                                            00792\n         BAL   R14,CONVERT1                                             00793\n         MVC   BUF+119(3),CONVEDIT+9                                    00794\n         SPACE 1                                                        00795\n         MVC   BUF+123(7),=C'TRACKS.'                                   00796\n         MVI   BUF,SPACE2AP                                             00797\n         BAL   R14,PRINT                                                00798\n         SPACE 1                                                        00799\n         TM    DS4VSAM,X'80'     TEST FOR VSAM OWNERSHIP BIT TURNED ON  00800\n         BZ    NOVSAM            IF NOT ON....NOT OWNED BY VSAM         00801\n         MVC   BUF+2(41),=C'*** THIS PACK IS OWNED BY A VSAM CATALOG '  00802\n         MVI   BUF,SPACE2AP                                             00803\n         BAL   R14,PRINT                                                00804\n         CLC   DS4VTOCE+24(2),ZEROES      CHECK FOR A \"CRA\" POINTER     00805\n         BE    NOVSAM      IF ZERO, NO POINTER....NO \"CRA\"              00806\n         MVC   CRATRACK(2),DS4VTOCE+24  MOVE CRA ADDRESS FOR ALIGNMENT  00807\n         MVC   BUF+2(41),=C'*** THIS PACK CONTAINS A C.R.A. AT TRACK:'  00808\n         LH    R0,CRATRACK     LOAD UP 2 BYTE CRA ADDRESS               00809\n         BAL   R14,CONVERT    GO CONVERT TO EBCIDIC                     00810\n         MVC   BUF+43(5),CONVEDIT+7     MOVE TO PRINT LINE              00811\n         MVI   BUF,SPACE2AP                                             00812\n         BAL   R14,PRINT                                                00813\n         SPACE 1                                                        00814\nNOVSAM   EQU   *                                                        00815\n         TM    PARMOPT1,DIRFLAG                                         00816\n         BZ    NODIRFLG                                                 00817\n         MVC   BUF+1(59),=C'*** WARNING - POSSIBLE VTOC ERRORS EXIST ONX00818\n                THIS VOLUME ***'                                        00819\n         MVI   BUF,SPACE2AP                                             00820\n         BAL   R14,PRINT                                                00821\n         SPACE 3                                                        00822\nNODIRFLG TM    PARMOPT1,DUMPOPT+SDUMPOPT+DIRFLAG                        00823\n         BZ    FM1PRINT                                                 00824\n         SPACE 1                                                        00825\n         LR    R2,R6                                                    00826\n         LA    R3,DS4FDAD                                               00827\n         BAL   R14,DUMPDSCB                                             00828\n         SPACE 1                                                        00829\n         L     R8,FMT5AD                                                00830\n         USING DS5,R8                                                   00831\nDMPF5TST LTR   R8,R8                                                    00832\n         BZ    ENDUMPF5                                                 00833\n         LR    R2,R8                                                    00834\n         LA    R3,DS5FDAD                                               00835\n         BAL   R14,DUMPDSCB                                             00836\n         L     R8,DS5F5PTR                                              00837\n         B     DMPF5TST                                                 00838\n         SPACE 1                                                        00839\nENDUMPF5 L     R8,FMT6AD                                                00840\n         USING DS6,R8                                                   00841\nDMPF6TST LTR   R8,R8                                                    00842\n         BZ    ENDUMPF6                                                 00843\n         LR    R2,R8                                                    00844\n         LA    R3,DS6FDAD                                               00845\n         BAL   R14,DUMPDSCB                                             00846\n         L     R8,DS6F6PTR                                              00847\n         B     DMPF6TST                                                 00848\n         SPACE 1                                                        00849\nENDUMPF6 MVI   BUF,SPACE2IM                                             00850\n         BAL   R14,PRINT                                                00851\n         SPACE 1                                                        00852\n         DROP  R6,R8                                                    00853\n         EJECT                                                          00854\nFM1PRINT L     R6,=A(FIRSTDS1-(DS1F1PTR-DS1))                           00855\n         USING DS1,R6                                                   00856\n         LA    R1,HEAD1A                                                00857\n         ST    R1,BUFPTR                                                00858\n         PUT   PRINTDCB,HEADER1                                         00859\n         PUT   PRINTDCB,HEADER2                                         00860\n         LH    R0,CURLINES                                              00861\n         AH    R0,=H'2'                                                 00862\n         STH   R0,CURLINES                                              00863\n         SPACE 2                                                        00864\nFM1PRLOP L     R6,DS1F1PTR                                              00865\n         CLC   DS1DSNAM,LASTDS1                                         00866\n         BE    FM1PREND                                                 00867\n         SR    R7,R7                                                    00868\n         L     R8,DS1F3PTR                                              00869\n         USING DS3,R8                                                   00870\n         LTR   R8,R8                                                    00871\n         BZ    FM1GOHK                                                  00872\n         CLI   DS3FMTID,C'3'                                            00873\n         BE    FM1GOHK                                                  00874\n         LR    R7,R8                                                    00875\n         USING DS2,R7                                                   00876\n         L     R8,DS2F3PTR                                              00877\nFM1GOHK  BAL   R14,F13HOOK                                              00878\n         LA    R2,1                                                     00879\n         TM    PARMOPT1,EXTNTOPT                                        00880\n         BZ    FM1TSTIS                                                 00881\n         LH    R1,NUMEXT                                                00882\n         LA    R2,2(R1,R2)                                              00883\nFM1TSTIS LTR   R7,R7                                                    00884\n         BZ    FM1TSTDP                                                 00885\n         TM    PARMOPT2,ISAMOPT                                         00886\n         BZ    *+8                                                      00887\n         AH    R2,=H'4'                                                 00888\nFM1TSTDP TM    PARMOPT1,DUMPOPT                                         00889\n         BZ    FM1LKAHD                                                 00890\n         AH    R2,=H'4'                                                 00891\n         LTR   R7,R7                                                    00892\n         BZ    *+8                                                      00893\n         AH    R2,=H'4'                                                 00894\n         LTR   R8,R8                                                    00895\n         BZ    FM1LKAHD                                                 00896\n         AH    R2,=H'4'                                                 00897\nFM1LKAHD BAL   R14,PRLKAHED                                             00898\n         SPACE 1                                                        00899\n         MVC   L1DSNAME,DS1DSNAM                                        00900\n         SPACE 1                                                        00901\nFM1VOLSR TM    PARMOPT1,LSTDTOPT                                   JM#1 00902\n         BNZ   LSTUSDTE                                            JM#1 00903\n         MVC   L1SERIAL(6),VOLSERNO                                JM#1 00904\n         B     FM1SECUR                                            JM#1 00905\nLSTUSDTE CLI   DS1SYSCD+13,X'00' OLD ASM2 FMT.                     JM#1 00906\n         BNE   LSTUSDT1                                            JM#1 00907\n         MVC   DS1DSSN+3(3),DS1SYSCD+14                            JM#1 00908\n         B     LSTUSDT2                                            JM#1 00909\nLSTUSDT1 MVC   DS1DSSN+3(3),DS1DSSN                                JM#1 00910\n         MVC   DS1DSSN(3),DS1SYSCD+13                              JM#1 00911\nLSTUSDT2 LA    R2,DS1DSSN                                          JM#1 00912\n         LA    R3,L1SERIAL-3                                       JM#1 00913\n         BAL   R14,DATEDIT                                         JM#1 00914\n         LA    R2,DS1DSSN+3                                        JM#1 00915\n         BAL   R14,CONVERT3                                        JM#1 00916\n         MVC   L1SERIAL+6(5),CONVEDIT+7                            JM#1 00917\n         B     FM1CREDT                                            JM#1 00918\n         SPACE 1                                                        00919\nFM1SECUR MVC   L1SECUR,=C'-/-'                                          00920\n         TM    DS1DSIND,X'10'  TEST FOR PASSWORD FOR R & W              00921\n         BZ    FM1CREDT     IF NO BITS....NO PASSWORD                   00922\n         MVI   L1SECUR+2,C'W'      AT LEAST \"WRITE\" IF ANY              00923\n         TM    DS1DSIND,X'04'      TEST FOR ONLY \"WRITE\"..READ OK       00924\n         BO    FM1CREDT       IF ON,  \"READ\" NOT PROTECTED              00925\n         MVI   L1SECUR,C'R'      INDICATE \"READ\" PROTECT                00926\n         SPACE 1                                                        00927\nFM1CREDT LA    R2,DS1CREDT                                              00928\n         LA    R3,L1CREDT                                               00929\n         BAL   R14,DATEDIT                                              00930\n         SPACE 1                                                        00931\n         LA    R2,DS1EXPDT                                              00932\n         LA    R3,L1EXPDT                                               00933\n         BAL   R14,DATEDIT                                              00934\n         SPACE 1                                                        00935\nFM1DSORG LA    R2,L1DSORG                                               00936\n         TM    DS1DSORG,DCBDSGIS                                        00937\n         BZ    FM1DSO1                                                  00938\n         MVC   0(2,R2),=C'IS'                                           00939\n         LA    R2,2(R2)                                                 00940\nFM1DSO1  TM    DS1DSORG,DCBDSGPS                                        00941\n         BZ    FM1DSO2                                                  00942\n         MVC   0(2,R2),=C'PS'                                           00943\n         LA    R2,2(R2)                                                 00944\nFM1DSO2  TM    DS1DSORG,DCBDSGDA                                        00945\n         BZ    FM1DSO3                                                  00946\n         MVC   0(2,R2),=C'DA'                                           00947\n         LA    R2,2(R2)                                                 00948\nFM1DSO3  TM    DS1DSORG,DCBDSGCX                                        00949\n         BZ    FM1DSO6              AXC                                 00950\n         MVC   0(2,R2),=C'CX'                                           00951\n         LA    R2,2(R2)                                                 00952\n*FM1DSO4 TM    DS1DSORG,=X'08'      AXC                                 00953\n*        BZ    FM1DSO5              AXC                                 00954\n*        MVC   0(2,R2),=C'CQ'       AXC                                 00955\n*        LA    R2,2(R2)             AXC                                 00956\n*FM1DSO5 TM    DS1DSORG,=X'04'      AXC                                 00957\n*        BZ    FM1DSO6              AXC                                 00958\n*        MVC   0(2,R2),=C'MQ'       AXC                                 00959\n*        LA    R2,2(R2)             AXC                                 00960\nFM1DSO6  TM    DS1DSORG,DCBDSGPO                                        00961\n         BZ    FM1DSO7                                                  00962\n         MVC   0(2,R2),=C'PO'                                           00963\n         LA    R2,2(R2)                                                 00964\nFM1DSO7  TM    DS1DSORG+1,DCBDSGGS                                      00965\n         BZ    FM1DSO8                                                  00966\n         MVC   0(2,R2),=C'GS'                                           00967\n         LA    R2,2(R2)                                                 00968\nFM1DSO8  TM    DS1DSORG+1,DCBDSGTX                                      00969\n         BZ    FM1DSO9                                                  00970\n         MVC   0(2,R2),=C'TX'                                           00971\n         LA    R2,2(R2)                                                 00972\nFM1DSO9  TM    DS1DSORG+1,DCBDSGTQ                                      00973\n         BZ    FM1DSO10                                                 00974\n         MVC   0(2,R2),=C'TQ'                                           00975\n         LA    R2,2(R2)                                                 00976\nFM1DSO10 TM    DS1DSORG+1,DCBACBM                                       00977\n         BZ    FM1DSO11                                                 00978\n         MVC   0(2,R2),=C'AM'                                           00979\n         LA    R2,2(R2)                                                 00980\nFM1DSO11 TM    DS1DSORG+1,DCBDSGTR                                      00981\n         BZ    FM1DSO12                                                 00982\n         MVC   0(2,R2),=C'TR'                                           00983\n         LA    R2,2(R2)                                                 00984\nFM1DSO12 TM    DS1DSORG,DCBDSGU                                         00985\n         BZ    *+8                                                      00986\n         MVI   0(R2),C'U'                                               00987\n         SPACE 1                                                        00988\n         LA    R2,L1RECFM                                               00989\n         TM    DS1RECFM,DCBRECU                                         00990\n         BZ    FM1RECF1                                                 00991\n         MVI   0(R2),C'U'                                               00992\n         BO    FM1RECF1                                                 00993\n         TM    DS1RECFM,DCBRECF                                         00994\n         MVI   0(R2),C'F'                                               00995\n         BO    FM1RECF1                                                 00996\n         MVI   0(R2),C'V'                                               00997\nFM1RECF1 LA    R2,1(R2)                                                 00998\n         TM    DS1RECFM,DCBRECTO                                        00999\n         BZ    FM1RECF2                                                 01000\n         MVI   0(R2),C'T'                                               01001\n         LA    R2,1(R2)                                                 01002\nFM1RECF2 TM    DS1RECFM,DCBRECBR                                        01003\n         BZ    FM1RECF3                                                 01004\n         MVI   0(R2),C'B'                                               01005\n         LA    R2,1(R2)                                                 01006\nFM1RECF3 TM    DS1RECFM,DCBRECSB                                        01007\n         BZ    FM1RECF4                                                 01008\n         MVI   0(R2),C'S'                                               01009\n         LA    R2,1(R2)                                                 01010\nFM1RECF4 TM    DS1RECFM,DCBRECCC                                        01011\n         BNM   FM1BLKSZ                                                 01012\n         TM    DS1RECFM,DCBRECCA                                        01013\n         MVI   0(R2),C'A'                                               01014\n         BO    FM1BLKSZ                                                 01015\n         MVI   0(R2),C'M'                                               01016\n         SPACE 1                                                        01017\nFM1BLKSZ LA    R2,DS1BLKL                                               01018\n         BAL   R14,CONVERT2                                             01019\n         MVC   L1BLKSIZ,CONVEDIT+7                                      01020\n         SPACE 1                                                        01021\n         LA    R2,DS1LRECL                                              01022\n         BAL   R14,CONVERT2                                             01023\n         MVC   L1LRECL,CONVEDIT+7                                       01024\n         SPACE 1                                                        01025\n         LA    R2,DS1KEYL                                               01026\n         BAL   R14,CONVERT1                                             01027\n         MVC   L1KEYLEN,CONVEDIT+9                                      01028\n         SPACE 1                                                        01029\n         UNPK  TRAREA,DS1OPTCD(8)                                       01030\n         TR    TRAREA,TRTABLE                                           01031\n         MVC   L1OPTCD,TRAREA                                           01032\n         SPACE 1                                                        01033\n         L     R0,F1TRKAL                                               01034\n         BAL   R14,CONVERT                                              01035\n         MVC   L1TRKAL,CONVEDIT+7                                       01036\n         SPACE 1                                                        01037\n         CLC   DS1LSTAR(5),ZEROES                                       01038\n         BE    FM1NOEPV                                                 01039\n         LH    R0,DS1LSTAR                                              01040\n         CLI   DS1LSTAR+2,0                                             01041\n         BE    *+8                                                      01042\n         AH    R0,=H'1'                                                 01043\n         BAL   R14,CONVERT                                              01044\n         MVC   L1TRKUS,CONVEDIT+7                                       01045\n         SPACE 1                                                        01046\nFM1NOEPV LA    R2,DS1NOEPV                                              01047\n         BAL   R14,CONVERT1                                             01048\n         MVC   L1NOEPV,CONVEDIT+10                                      01049\n         SPACE 1                                                        01050\n         LA    R2,DS1SCALO+1                                            01051\n         BAL   R14,CONVERT3                                             01052\n         MVC   L1SECQU,CONVEDIT+7                                       01053\n         C     R0,=F'99999'                                             01054\n         BNH   FM1SCALO                                                 01055\n         MVC   L1SECQU,STARS                                            01056\n         SPACE 1                                                        01057\nFM1SCALO TM    DS1SCALO,X'C0'                                           01058\n         BNO   FM1SCAL1                                                 01059\n         MVI   L1TYP,C'C'                                               01060\n         B     FM1SCAL4                                                 01061\nFM1SCAL1 BNZ   FM1SCAL2                                                 01062\n         MVI   L1TYP,C'A'                                               01063\n         B     FM1SCAL4                                                 01064\nFM1SCAL2 TM    DS1SCALO,X'80'                                           01065\n         BO    FM1SCAL3                                                 01066\n         MVI   L1TYP,C'B'                                               01067\n         B     FM1SCAL4                                                 01068\nFM1SCAL3 MVI   L1TYP,C'T'                                               01069\nFM1SCAL4 LA    R2,L1TYP+1                                               01070\n         TM    DS1SCALO,X'08'                                           01071\n         BZ    FM1SCAL5                                                 01072\n         MVI   0(R2),C'C'                                               01073\n         LA    R2,1(,R2)                                                01074\nFM1SCAL5 TM    DS1SCALO,X'04'                                           01075\n         BZ    FM1SCAL6                                                 01076\n         MVI   0(R2),C'M'                                               01077\n         LA    R2,1(,R2)                                                01078\nFM1SCAL6 TM    DS1SCALO,X'02'                                           01079\n         BZ    FM1SCAL7                                                 01080\n         MVI   0(R2),C'A'                                               01081\n         LA    R2,1(,R2)                                                01082\nFM1SCAL7 TM    DS1SCALO,X'01'                                           01083\n         BZ    FM1OPTS                                                  01084\n         MVI   0(R2),C'R'                                               01085\n         SPACE 1                                                        01086\nFM1OPTS  MVI   BUF,SPACE1AP                                             01087\n         TM    PARMOPT1,EMPTYOPT     TEST FOR \"EMPTY\" OPTION            01088\n         BO    FM1EM1         IF REQUEST GO TO PROCESS IT               01089\n         TM    PARMOPT2,MODELOPT   TEST FOR \"MODEL\" OPTION              01090\n         BZ    FM1SKTS0   IF NOT MODEL BYPASS..                         01091\n*                                                                       01092\nFM1EM1   CLC   DS1LSTAR(5),ZEROES   TEST FOR TTR ZEROED...NOT VALID     01093\n         BE    FM1DONXT              IF ALL ZERO...BYPASS               01094\n         CLI   DS1LSTAR+2,0         TEST FOR A TTR OF RECORD ZERO       01095\n         BNE   FM1DONXT             IF NOT ZERO, NON-EMPTY DSN          01096\n         CLC   NUMEXT,ZEROES        TEST FOR ANY VALID EXTENTS          01097\n         BNE   FM1EM2              IF NOT ZERO...EMPTY DATASET.         01098\n         TM    PARMOPT2,MODELOPT    CHECK FOR \"MODEL\" OPTION SELECTED   01099\n         BO    FM1SKTS0      IF SELECTED...PRINT THIS ENTRY             01100\n         B     FM1DONXT    IF NOT MODEL...DON'T INCLUDE IT AS \"EMPTY\"   01101\nFM1EM2   TM    PARMOPT1,EMPTYOPT     CHECK FOR OPTION OF \"EMPTY\"        01102\n         BZ    FM1DONXT  IF NOT SELECTED...DON'T PRINT                  01103\n*                                                                       01104\nFM1SKTS0 EQU  *                                                         01105\n         TM    PARMOPT1,DUMPOPT                                         01106\n         BO    FM1XTRAL                                                 01107\n         TM    PARMOPT1,EXTNTOPT                                        01108\n         BZ    FM1SKTS1                                                 01109\n         CLC   NUMEXT,ZEROES                                            01110\n         BNE   FM1XTRAL                                                 01111\nFM1SKTS1 TM    PARMOPT2,ISAMOPT                                         01112\n         BZ    FM1SKTS2                                                 01113\n         LTR   R7,R7                                                    01114\n         BNZ   FM1XTRAL                                                 01115\nFM1SKTS2 TM    PARMOPT1,PDSOPT                                          01116\n         BZ    FM1GOPRT                                                 01117\n         TM    DS1DSORG,DCBDSGPO                                        01118\n         BZ    FM1GOPRT                                                 01119\nFM1XTRAL MVI   BUF,SPACE2AP                                             01120\nFM1GOPRT BAL   R14,PRINT                                                01121\n         SPACE 1                                                        01122\nFM1SKTS3 EQU   *                                                        01123\n         TM    PARMOPT1,DUMPOPT                                         01124\n         BZ    FM1EXDMP                                                 01125\n         LA    R2,DS1                                                   01126\n         LA    R3,DS1FDAD                                               01127\n         BAL   R14,DUMPDSCB                                             01128\n         LTR   R7,R7                                                    01129\n         BZ    FM1DMP3                                                  01130\n         LA    R2,DS2                                                   01131\n         LA    R3,DS2FDAD                                               01132\n         BAL   R14,DUMPDSCB                                             01133\nFM1DMP3  LTR   R8,R8                                                    01134\n         BZ    FM1EXDMP                                                 01135\n         LA    R2,DS3                                                   01136\n         LA    R3,DS3FDAD                                               01137\n         BAL   R14,DUMPDSCB                                             01138\n         SPACE 1                                                        01139\nFM1EXDMP TM    PARMOPT1,EXTNTOPT                                        01140\n         BZ    FM1PDSDP                                                 01141\n         CLC   NUMEXT,ZEROES                                            01142\n         BE    FM1PDSDP                                                 01143\n         MVC   BUF+10(L'HEAD2DAT),HEAD2DAT                              01144\n         MVI   BUF,SPACE0AP                                             01145\n         BAL   R14,PRINT                                                01146\n         MVC   BUF+10(L'HEAD2UND),HEAD2UND                              01147\n         MVI   BUF,SPACE1AP                                             01148\n         BAL   R14,PRINT                                                01149\n         L     R2,LISTEXT                                               01150\n         LA    R3,BUF+9                                                 01151\n         SR    R4,R4                                                    01152\n         MVI   EXPFLAG,X'FF'                                            01153\n         SPACE 1                                                        01154\nFM1EXLP  BAL   R14,EXFORMAT                                             01155\n         LA    R4,4(,R4)                                                01156\n         L     R2,LISTEXT(R4)                                           01157\n         LTR   R2,R2                                                    01158\n         BZ    FM1EXLST                                                 01159\n         BAL   R14,PRINT                                                01160\n         B     FM1EXLP                                                  01161\nFM1EXLST MVI   BUF,SPACE2AP                                             01162\n         BAL   R14,PRINT                                                01163\n         SPACE 1                                                        01164\nFM1PDSDP TM    PARMOPT1,PDSOPT                                          01165\n         BZ    FM1ISDMP                                                 01166\n         TM    DS1DSORG,DCBDSGPO                                        01167\n         BZ    FM1ISDMP                                                 01168\n         LA    R2,DS1                                                   01169\n         MVC   DSNAME2+1(44),DS1DSNAM                              JM#1 01170\n         MVC   HEAD1B,H1BNEW                                       JM#1 01171\n         BAL   R14,PDSLIST                                              01172\n         MVC   HEAD1B,H1BOLD                                       JM#1 01173\n         SPACE 1                                                        01174\nFM1ISDMP TM    PARMOPT2,ISAMOPT                                         01175\n         BZ    FM1DONXT                                                 01176\n         BAL   R14,ISAMLIST                                             01177\nFM1DONXT B     FM1PRLOP                                                 01178\n*                                                                       01179\n* G.D.F. ROUTINE TO CONVERT INPUT & OUTPUT DATES TO                     01180\n* SAME FORMAT AS CREDAT & EXPDAT FOR DATEDIT ROUTINE                    01181\n*                                                                       01182\nBINARY   UNPK  DASAVE(3),0(2,R2)  G.D.F.                                01183\n         PACK  DATEWORD,DASAVE(2)  G.D.F.                               01184\n         CVB   R1,DATEWORD    G.D.F.                                    01185\n         STC   R1,0(R2)       G.D.F.                                    01186\n         ZAP   DATEWORD,1(2,R2)  G.D.F.                                 01187\n         CVB   R1,DATEWORD    G.D.F.                                    01188\n         STH   R1,DATEWORD    G.D.F.                                    01189\n         MVC   1(2,R2),DATEWORD  G.D.F.                                 01190\n         BR    R14            G.D.F.                                    01191\n*                                                                       01192\n* END OF BINARY CONVERT ROUTINE                                         01193\n*                                                                       01194\n         SPACE 2                                                        01195\nFM1PREND MVI   BUF,SPACE1IM                                             01196\n         BAL   R14,PRINT                                                01197\n         MVI   BUF+1,C' '          MOVE TO BLANK OUT LINE               01198\n         MVC   BUF+2(131),BUF+1    BLANK OUT PRINT LINE                 01199\n         MVC   BUF+49(14),=C'<<<<< END VTOC'                            01200\n         LH    R0,FM1COUNT                                              01201\n         BAL   R14,CONVERT                                              01202\n         MVC   BUF+64(4),CONVEDIT+8                                     01203\n         MVC   BUF+69(15),=C'DATA SETS >>>>>'                           01204\n         MVI   BUF,SPACE3AP                                             01205\n         BAL   R14,PRINT                                                01206\n         SPACE 1                                                        01207\n         TM    PARMOPT1,MAPOPT+DIRFLAG                                  01208\n         BZ    MAPEND                                                   01209\n         SPACE 1                                                        01210\n         DROP  R6,R7,R8                                                 01211\n         EJECT                                                          01212\nMAPPRINT MVC   CURLINES,=H'999'                                         01213\n         LA    R0,HEAD2A                                                01214\n         ST    R0,BUFPTR                                                01215\n         MVI   HEADMID,C' '                                             01216\n         MVC   HEADMID+1(81),HEADMID                                    01217\n         MVC   HEAD2VOL,VOLSERNO                                        01218\n         MVC   HEADMID(40),HEAD2                                        01219\n         L     R6,HOOKSTRT                                              01220\n         USING EXTENT,R6                                                01221\n         L     R4,=F'-1'                                                01222\n         SR    R5,R5                                                    01223\n         MVI   EXPFLAG,0                                                01224\n         SPACE 1                                                        01225\nMAPPRLOP CLC   EXTLCCHH,HOOKEND                                         01226\n         BE    MAPPREND                                                 01227\n         CLC   EXTHITT,TRKSPVOL                                         01228\n         BNL   MAPINVAL                                                 01229\n         CLC   EXTLOTT,EXTHITT                                          01230\n         BH    MAPINVAL                                                 01231\n         CLI   EXTTYPE,X'80'                                            01232\n         BE    MAPGETEX                                                 01233\n         LH    R0,EXTLOTT                                               01234\n         SR    R0,R4                                                    01235\n         S     R0,=F'1'                                                 01236\n         BZ    MAPTRGET                                                 01237\n         BP    MAPTRMIS                                                 01238\n         BAL   R14,CONVERT                                              01239\n         MVC   BUF+1(5),CONVEDIT+7                                      01240\n         MVC   BUF+7(14),=C'TRACKS OVERLAP'                             01241\n         CH    R4,EXTHITT                                               01242\n         BNL   *+8                                                      01243\nMAPTRGET LH    R4,EXTHITT                                               01244\n         AH    R5,EXTNOTRK                                              01245\n         B     MAPGETEX                                                 01246\n         SPACE 1                                                        01247\nMAPINVAL MVC   BUF+7(14),=C'INVALID EXTENT'                             01248\n         B     MAPGETEX                                                 01249\n         SPACE 1                                                        01250\nMAPTRMIS BAL   R14,CONVERT                                              01251\n         MVC   BUF+1(5),CONVEDIT+7                                      01252\n         MVC   BUF+7(14),=C'TRACKS MISSING'                             01253\n         MVI   BUF,SPACE1AP                                             01254\n         BAL   R14,PRINT                                                01255\n         B     MAPTRGET                                                 01256\n         SPACE 1                                                        01257\nMAPGETEX LA    R2,EXTENT                                                01258\n         LA    R3,BUF+22                                                01259\n         BAL   R14,EXFORMAT                                             01260\n         BAL   R14,PRINT                                                01261\n         L     R6,EXTPTR                                                01262\n         B     MAPPRLOP                                                 01263\n         SPACE 3                                                        01264\nMAPPREND LH    R0,TRKSPVOL                                              01265\n         SR    R0,R4                                                    01266\n         S     R0,=F'1'                                                 01267\n         BNP   MAPNOMIS                                                 01268\n         BAL   R14,CONVERT                                              01269\n         MVC   BUF+1(5),CONVEDIT+7                                      01270\n          MVC  BUF+7(40),=C'TRACKS MISSING OR ASSIGNED AS ALTERNATES'   01271\n         MVI   BUF,SPACE1AP                                             01272\n         BAL   R14,PRINT                                                01273\nMAPNOMIS MVI   BUF,SPACE1IM                                             01274\n         BAL   R14,PRINT                                                01275\n         LR    R0,R5                                                    01276\n         BAL   R14,CONVERT                                              01277\n         MVC   BUF+59(5),CONVEDIT+7                                     01278\n         MVC   BUF+66(20),=C'TRACKS ACCOUNTED FOR'                      01279\n         MVI   BUF,SPACE2AP                                             01280\n         BAL   R14,PRINT                                                01281\n         MVC   BUF+59(28),=C'<<<<< END OF TRACK MAP >>>>>'              01282\n         MVI   BUF,SPACE0AP                                             01283\n         BAL   R14,PRINT                                                01284\nMAPEND   B     NEXTVOL                                                  01285\n         SPACE 1                                                        01286\n         DROP  R6                                                       01287\n         EJECT                                                          01288\nERRNODD  TM    PARMOPT2,VOLSOPT                                         01289\n         BNO   NEXTDD                                                   01290\n         MVC   BUF+41(19),=C'CANNOT FIND DD CARD'                       01291\n         B     ERRCON1                                                  01292\n         SPACE 1                                                        01293\nERRNOTDA TM    PARMOPT2,VOLSOPT                                         01294\n         BNO   NEXTDD                                                   01295\n         MVC   BUF+41(27),=C'DEVICE IS NOT DIRECT ACCESS'               01296\n         B     ERRCON1                                                  01297\n         SPACE 1                                                        01298\nERRUNKDV MVC   BUF+41(19),=C'UNKNOWN DEVICE TYPE'                       01299\n         B     ERRCON1                                                  01300\n         SPACE 1                                                        01301\nERRNOPEN MVC   BUF+41(27),=C'ATTEMPT TO OPEN VTOC FAILED'               01302\n         B     ERRCON1                                                  01303\n         SPACE 1                                                        01304\nERRCON1  MVC   BUF+10(28),=C'ERROR CONCERNING \"VOLUME01\":'              01305\n         MVC   BUF+28(8),VOLDDNAM                                       01306\n         MVI   BUF,SPACE3AP                                             01307\n         BAL   R14,PRINT                                                01308\n         LA    R0,4                                                     01309\n         B     ERRCODST                                                 01310\n         SPACE 1                                                        01311\nERRNOTFX MVC   BUF+41(33),=C'BAD DSCB - SHOULD HAVE BEEN TYPE'          01312\n         MVC   BUF+75(1),BADDSTYP                                       01313\n         LR    R2,R8                                                    01314\n         B     ERRCON2                                                  01315\n         SPACE 1                                                        01316\nERRNOCOR MVC   BUF+41(41),=C'INSUFFICIENT MEMORY TO COMPLETE VTOC LIST' 01317\n         SR    R2,R2                                                    01318\n         B     ERRCON2                                                  01319\n         SPACE 1                                                        01320\nERRCON2  BAL   R14,CLOSVTOC                                             01321\n         BAL   R14,DEQVTOC                                              01322\n         MVC   BUF+10(28),=C'ERROR CONCERNING \"VOLUME01\":'              01323\n         MVC   BUF+28(8),VOLDDNAM                                       01324\n         MVI   BUF,SPACE3AP                                             01325\n         BAL   R14,PRINT                                                01326\n         LTR   R2,R2                                                    01327\n         BZ    ERRNODMP                                                 01328\n         LA    R3,DS4FDAD-DS4(R2)                                       01329\n         BAL   R14,DUMPDSCB                                             01330\nERRNODMP LA    R0,8                                                     01331\nERRCODST C     R0,RETCODE                                               01332\n         BL    *+8                                                      01333\n         ST    R0,RETCODE                                               01334\n         B     NEXTVOL                                                  01335\n         EJECT                                                          01336\n*                                                                       01337\n*        SUBROUTINES START HERE                                         01338\n*                                                                       01339\nPDSLIST  ST    R14,PDSAVE                                               01340\n         STM   R2,R6,PDSAVE+4                                           01341\n         USING DS1,R2                                                   01342\n         MVC   JFCBDSNM,DS1DSNAM                                        01343\n         SR    R0,R0                                                    01344\n         IC    R0,DS1NOBDB                                              01345\n         BAL   R14,CONVERT                                              01346\n         DROP  R2                                                       01347\n         MVC   PDSVAL4,CONVEDIT+9                                       01348\n         SPACE 1                                                        01349\n         OPEN  (PDSDCB),TYPE=J                                          01350\n         L     R3,PDSBLKAD+4                                            01351\n         READ  PDSDECB,SF,,(3),MF=E                                     01352\n         SPACE 1                                                        01353\n         SR    R0,R0                                                    01354\n         STH   R0,PDSBYTCT                                              01355\n         STH   R0,PDSBLKAL                                              01356\n         STH   R0,PDSBLKUS                                              01357\n         STH   R0,PDSMEMCT                                              01358\nPDSNEXT  LH    R0,PDSBYTCT                                              01359\n         LTR   R0,R0                                                    01360\n         BP    PDSPRINT                                                 01361\n         CHECK PDSDECB                                                  01362\n         SPACE 1                                                        01363\n         CLI   SYNADFLG,0                                               01364\n         BE    PDSREDOK                                                 01365\n         MVC   BUF+28(11),=CL11'DIRECTORY.'                             01366\n         MVI   BUF,SPACE3AP                                             01367\n         BAL   R14,PRINT                                                01368\n         CLI   SYNADFLG,X'FF'                                           01369\n         BE    PDSEOD                                                   01370\n         BAL   R14,ABDUMP                                               01371\n         SPACE 1                                                        01372\nPDSREDOK LM    R2,R3,PDSBLKAD                                           01373\n         XR    R2,R3                                                    01374\n         XR    R3,R2                                                    01375\n         XR    R2,R3                                                    01376\n         STM   R2,R3,PDSBLKAD                                           01377\n         READ  PDSDECB,SF,,(3),MF=E                                     01378\n         SPACE 1                                                        01379\n         USING PDS,R2                                                   01380\n         LH    R1,PDSBLKAL                                              01381\n         LA    R1,1(R1)                                                 01382\n         STH   R1,PDSBLKAL                                              01383\n         LH    R0,PDSCOUNT                                              01384\n         SH    R0,=H'2'                                                 01385\n         STH   R0,PDSBYTCT                                              01386\n         LA    R1,PDSENTRY                                              01387\n         ST    R1,PDSENTAD                                              01388\n         B     PDSNEXT                                                  01389\n         SPACE 1                                                        01390\n         DROP  R2                                                       01391\n         SPACE 3                                                        01392\nPDSPRINT L     R6,PDSENTAD                                              01393\n         USING PDSENTRY,R6                                              01394\n         IC    R2,PDSINDIC                                              01395\n         N     R2,=A(PDSUSERH)                                          01396\n         SLL   R2,1                                                     01397\n         LR    R1,R6                                                    01398\n         AR    R1,R2                                                    01399\n         LA    R1,12(R1)                                                01400\n         ST    R1,PDSENTAD                                              01401\n         LH    R1,PDSBYTCT                                              01402\n         SR    R1,R2                                                    01403\n         SH    R1,=Y(PDSUSERD-PDSENTRY)                                 01404\n         STH   R1,PDSBYTCT                                              01405\n         CLC   PDSNAME,EFFS                                             01406\n         BNE   PDSMEMOK                                                 01407\n         MVC   PDSBLKUS,PDSBLKAL                                        01408\n         B     PDSNEXT                                                  01409\nPDSMEMOK LH    R1,PDSMEMCT                                              01410\n         LA    R1,1(R1)                                                 01411\n         STH   R1,PDSMEMCT                                              01412\n         MVC   BUF+12(8),PDSNAME                                        01413\n         TM    PDSINDIC,PDSALIAS                                        01414\n         BZ    *+8                                                      01415\n         MVI   BUF+21,C'A'                                              01416\n         UNPK  TRAREA,PDSTTRP(8)                                        01417\n         TR    TRAREA,TRTABLE                                           01418\n         MVC   BUF+23(4),TRAREA                                         01419\n         MVI   BUF+27,C'.'                                              01420\n         MVC   BUF+28(2),TRAREA+4                                       01421\n         IC    R0,PDSINDIC                                              01422\n         N     R0,=A(PDS#TTRS)                                          01423\n         SRL   R0,5                                                     01424\n         STC   R0,BUF+32                                                01425\n         OI    BUF+32,X'F0'                                             01426\n         LR    R5,R2                                                    01427\n         CH    R2,=H'44'                                                01428\n         BNH   PDSPRLIN                                                 01429\n         LA    R2,2                                                     01430\n         BAL   R14,PRLKAHED                                             01431\n         LR    R2,R5                                                    01432\n         LA    R5,44                                                    01433\nPDSPRLIN LA    R3,PDSUSERD                                              01434\n         LA    R4,BUF+35                                                01435\n         BAL   R14,DUMPLINE                                             01436\n         MVI   BUF,SPACE1AP                                             01437\n         BAL   R14,PRINT                                                01438\n         CH    R2,=H'44'                                                01439\n         BNH   PDSNEXT                                                  01440\n         LR    R5,R2                                                    01441\n         SH    R5,=H'44'                                                01442\n         LA    R3,PDSUSERD+44                                           01443\n         LA    R4,BUF+35                                                01444\n         BAL   R14,DUMPLINE                                             01445\n         MVI   BUF,SPACE1AP                                             01446\n         BAL   R14,PRINT                                                01447\n         B     PDSNEXT                                                  01448\n         SPACE 1                                                        01449\n         DROP  R6                                                       01450\n         SPACE 2                                                        01451\nPDSEOD   CLOSE (PDSDCB)                                                 01452\n         CLI   SYNADFLG,0                                               01453\n         MVI   SYNADFLG,0                                               01454\n         BNE   PDSRETRN                                                 01455\n         LH    R0,PDSMEMCT                                              01456\n         BAL   R14,CONVERT                                              01457\n         MVC   PDSVAL1,CONVEDIT+8                                       01458\n         LH    R0,PDSBLKUS                                              01459\n         BAL   R14,CONVERT                                              01460\n         MVC   PDSVAL2,CONVEDIT+8                                       01461\n         LH    R0,PDSBLKAL                                              01462\n         BAL   R14,CONVERT                                              01463\n         MVC   PDSVAL3,CONVEDIT+8                                       01464\n         MVC   BUF+10(PDSMSGLN),PDSMSG                                  01465\n         MVI   BUF,SPACE3AP                                             01466\n         BAL   R14,PRINT                                                01467\nPDSRETRN LM    R2,R6,PDSAVE+4                                           01468\n         L     R14,PDSAVE                                               01469\n         BR    R14                                                      01470\n         EJECT ,                                                        01471\n         SPACE 1                                                        01472\n         USING DS2,R7                                                   01473\nISAMLIST LTR   R7,R7                                                    01474\n         BZR   R14                                                      01475\n         ST    R14,ISAVE                                                01476\n         STM   R2,R5,ISAVE+4                                            01477\n         SPACE 1                                                        01478\n         MVC   BUF+12(19),=C'NO OF INDEX LEVELS='                       01479\n         LA    R2,DS2NOLEV                                              01480\n         BAL   R14,CONVERT1                                             01481\n         MVC   BUF+31(3),CONVERTD                                       01482\n         SPACE 1                                                        01483\n         MVC   BUF+42(19),=C'FLAGGED FOR DELETE='                       01484\n         LA    R2,DS2TAGDT                                              01485\n         BAL   R14,CONVERT2                                             01486\n         MVC   BUF+61(5),CONVERTD                                       01487\n         SPACE 1                                                        01488\n         MVC   BUF+72(19),=C'TRKS FOR HIGH INDX='                       01489\n         LA    R2,DS2NOTRK                                              01490\n         BAL   R14,CONVERT1                                             01491\n         MVC   BUF+91(3),CONVERTD                                       01492\n         SPACE 1                                                        01493\n         MVC   BUF+102(19),=C'IND OVFL TRKS LEFT='                      01494\n         LA    R2,DS2RORG2                                              01495\n         BAL   R14,CONVERT2                                             01496\n         MVC   BUF+121(5),CONVERTD                                      01497\n         MVI   BUF,SPACE1AP                                             01498\n         BAL   R14,PRINT                                                01499\n         SPACE 1                                                        01500\n         MVC   BUF+12(19),=C'TRKS FOR MAST INDX='                       01501\n         LA    R2,DS2DVIND                                              01502\n         BAL   R14,CONVERT1                                             01503\n         MVC   BUF+31(3),CONVERTD                                       01504\n         SPACE 1                                                        01505\n         MVC   BUF+42(19),=C'OVERFLOW  ACCESSES='                       01506\n         LA    R2,DS2RORG3                                              01507\n         BAL   R14,CONVERT3                                             01508\n         MVC   BUF+61(8),CONVERTD                                       01509\n         SPACE 1                                                        01510\n         MVC   BUF+72(19),=C'PRIME DATA RECORDS='                       01511\n         LA    R2,DS2PRCTR                                              01512\n         BAL   R14,CONVERT4                                             01513\n         MVC   BUF+91(10),CONVERTD                                      01514\n         SPACE 1                                                        01515\n         MVC   BUF+102(19),=C'NO OF OVFL RECORDS='                      01516\n         LA    R2,DS2OVRCT                                              01517\n         BAL   R14,CONVERT2                                             01518\n         MVC   BUF+121(5),CONVERTD                                      01519\n         MVI   BUF,SPACE1AP                                             01520\n         BAL   R14,PRINT                                                01521\n         SPACE 1                                                        01522\n         MVC   BUF+12(19),=C'CYL OVFL  TRKS/CYL='                       01523\n         LA    R2,DS2CYLOV                                              01524\n         BAL   R14,CONVERT1                                             01525\n         MVC   BUF+31(3),CONVERTD                                       01526\n         SPACE 1                                                        01527\n         MVC   BUF+42(19),=C'CORE FOR HIGH INDX='                       01528\n         LA    R2,DS2NOBYT                                              01529\n         BAL   R14,CONVERT2                                             01530\n         MVC   BUF+61(5),CONVERTD                                       01531\n         SPACE 1                                                        01532\n         MVC   BUF+72(19),=C'IND OFL BYTES LEFT='                       01533\n         LA    R2,DS2BYOVL                                              01534\n         BAL   R14,CONVERT2                                             01535\n         MVC   BUF+91(5),CONVERTD                                       01536\n         SPACE 1                                                        01537\n         MVC   BUF+102(19),=C'FULL CYLOVFL AREAS='                      01538\n         LA    R2,DS2RORG1                                              01539\n         BAL   R14,CONVERT2                                             01540\n         MVC   BUF+121(5),CONVERTD                                      01541\n         MVI   BUF,SPACE2AP                                             01542\n         BAL   R14,PRINT                                                01543\n         SPACE 1                                                        01544\n         LM    R2,R5,ISAVE+4                                            01545\n         L     R14,ISAVE                                                01546\n         BR    R14                                                      01547\n         DROP  R7                                                       01548\n         EJECT                                                          01549\n         SPACE 1                                                        01550\n         USING EXTENT,R2                                                01551\n         USING EXLINE,R3                                                01552\n         SPACE 1                                                        01553\nEXFORMAT LTR   R2,R2               ANY EXTENT.Q                         01554\n         BZR   R14                 RETURN IMM IF NOT                    01555\n         ST    R14,EXSAVE                                               01556\n         STM   R2,R3,EXSAVE+4                                           01557\n         SPACE 1                                                        01558\n         UNPK  TRAREA,EXTLCCHH(8)                                       01559\n         TR    TRAREA,TRTABLE                                           01560\n         MVC   EXLFCC,TRAREA                                            01561\n         MVI   EXLFPRD,C'.'                                             01562\n         MVC   EXLFHH,TRAREA+4                                          01563\n         SPACE 1                                                        01564\n         UNPK  TRAREA,EXTHCCHH(8)                                       01565\n         TR    TRAREA,TRTABLE                                           01566\n         MVC   EXLLCC,TRAREA                                            01567\n         MVI   EXLLPRD,C'.'                                             01568\n         MVC   EXLLHH,TRAREA+4                                          01569\n         SPACE 1                                                        01570\n         LH    R0,EXTLOTT                                               01571\n         BAL   R14,CONVERT                                              01572\n         MVC   EXLFTT,CONVEDIT+7                                        01573\n         SPACE 1                                                        01574\n         LH    R0,EXTHITT                                               01575\n         BAL   R14,CONVERT                                              01576\n         MVC   EXLLTT,CONVEDIT+7                                        01577\n         SPACE 1                                                        01578\n         LH    R0,EXTNOTRK                                              01579\n         BAL   R14,CONVERT                                              01580\n         MVC   EXLNOTRK,CONVEDIT+7                                      01581\n         SPACE 1                                                        01582\n         CLI   EXPFLAG,0                                                01583\n         BNE   EXPTYPE                                                  01584\n         L     R1,EXTIDPTR                                              01585\n         MVC   EXLDSNAM,0(R1)                                           01586\n         SPACE 1                                                        01587\nEXPTYPE  CLI   EXTTYPE,X'01'       IS THIS A DATA EXTENT.Q              01588\n         BNE   EXPNDATA            NO, GO CHECK OTHERS                  01589\n         CLI   EXPFLAG,0           ARE WE MAPPING.Q                     01590\n         BE    EXPEXTPR            YES, DON'T CLUTTER UP                01591\n         MVC   EXLTYPE,=C'PRIM'    ELSE MOVE IN EXTENT TYPE             01592\n         B     EXPEXTPR                                                 01593\n         SPACE 1                                                        01594\nEXPNDATA TM    EXTTYPE,X'F0'       VOL LABEL, OR TYPE 4, 5, OR 6        01595\n         BO    EXPCKFMX            BR IF YES                            01596\n         CLI   EXTTYPE,X'02'       ISAM OVERFLOW.Q                      01597\n         MVC   EXLTYPE,=C'OVFL'                                         01598\n         BE    EXPEXTPR                                                 01599\n         SPACE 1                                                        01600\n         CLI   EXTTYPE,X'04'       ISAM INDEX.Q                         01601\n         MVC   EXLTYPE,=C'INDX'                                         01602\n         BE    EXPEXTPR                                                 01603\n         SPACE 1                                                        01604\n         CLI   EXTTYPE,X'40'       USER LABEL TRACK.Q                   01605\n         MVC   EXLTYPE,=C'ULBL'                                         01606\n         BE    EXPEXTPR                                                 01607\n         SPACE 1                                                        01608\n         CLI   EXTTYPE,X'81'       CYLS OF DATA ON CYL BDRY.Q           01609\n         MVC   EXLTYPE,=C'CYLB'                                         01610\n         BE    EXPEXTPR                                                 01611\n         SPACE 1                                                        01612\n         CLI   EXTTYPE,X'80'       SHARING AN EXTENT.Q                  01613\n         MVC   EXLTYPE,=C'SHRD'                                         01614\n         BNE   EXPCKFMX                                                 01615\n         CLI   EXPFLAG,0           ARE WE MAPPING.Q                     01616\n         BNE   EXPEXTPR            NO, DON'T ENCLOSE IN PARENS          01617\n         MVI   EXLLPARN,C'('                                            01618\n         MVI   EXLRPARN,C')'                                            01619\n         B     EXPEXTPR                                                 01620\n         SPACE 1                                                        01621\nEXPCKFMX CLI   EXTTYPE,C'5'        FREE EXTENT.Q                        01622\n         BE    EXPPRLIN                                                 01623\n         SPACE 1                                                        01624\n         CLI   EXTTYPE,C'4'        VTOC EXTENT.Q                        01625\n         MVC   EXLTYPE,=C'VTOC'                                         01626\n         BE    EXPEXTPR                                                 01627\n         SPACE 1                                                        01628\n         CLI   EXTTYPE,X'FF'       VOLUME LABEL.Q                       01629\n         MVC   EXLTYPE,=C'VLBL'                                         01630\n         BE    EXPPRLIN                                                 01631\n         SPACE 1                                                        01632\n         CLI   EXTTYPE,C'6'        SHARED EXTENT.Q                      01633\n         MVC   EXLTYPE,=C'*UN*'                                         01634\n         BNE   EXPEXTPR                                                 01635\n         SPACE 1                                                        01636\n         MVC   EXLTYPE,=C'SPLT'                                         01637\n         SR    R0,R0                                                    01638\n         IC    R0,EXTSEQNO                                              01639\n         BAL   R14,CONVERT                                              01640\n         MVC   EXLSPLIT(3),CONVEDIT+9                                   01641\n         B     EXPPRLIN                                                 01642\n         SPACE 1                                                        01643\nEXPEXTPR SR    R0,R0                                                    01644\n         IC    R0,EXTSEQNO                                              01645\n         AH    R0,=H'1'                                                 01646\n         BAL   R14,CONVERT                                              01647\n         MVC   EXLSEQNO,CONVEDIT+10                                     01648\n         SPACE 1                                                        01649\nEXPPRLIN MVI   BUF,SPACE1AP                                             01650\n         LM    R2,R3,EXSAVE+4                                           01651\n         L     R14,EXSAVE                                               01652\n         BR    R14                                                      01653\n         DROP  R2,R3                                                    01654\n         EJECT                                                          01655\n         SPACE 3                                                        01656\nVTOCREAD ST    R14,VTSAVE                                               01657\n         STM   R2,R4,VTSAVE+4                                           01658\n         L     R2,RENEXT@                                               01659\n         CHECK (2)                                                      01660\n         LA    R1,=CL11'VTOC READ.'                                     01661\n         BAL   R14,SYNADCHK                                             01662\n         SPACE 1                                                        01663\n         USING DS1,R3                                                   01664\nVTOCREOK XC    0(20,R2),0(R2)                                           01665\n         LA    R4,20(R2)                                                01666\n         MVC   DS1(DS1END-DS1),0(R4)                                    01667\n         MVC   DS1FDAD(3),VTOCMBB                                       01668\n         MVC   DS1FDAD+3(4),VTOCCCHH                                    01669\n         MVC   DS1FDAD+7(1),VTOCR                                       01670\n         CLC   HWMDS1,DS1FDAD+3                                         01671\n         BL    VTOCEOD                                                  01672\n         SPACE 1                                                        01673\n         READ  (2),SF,VTOCDCB,(4),MF=E                                  01674\n         A     R2,REBLKSIZ                                              01675\n         ST    R2,RENEXT@                                               01676\n         L     R1,RECOUNT                                               01677\n         BCT   R1,VTSAVECT                                              01678\n         L     R2,REBLOCK@                                              01679\n         ST    R2,RENEXT@                                               01680\n         L     R1,RENCP                                                 01681\nVTSAVECT ST    R1,RECOUNT                                               01682\n         SPACE 1                                                        01683\n         LA    R0,1                                                     01684\n         SR    R1,R1                                                    01685\n         IC    R1,VTOCR                                                 01686\n         AR    R1,R0                                                    01687\n         STC   R1,VTOCR                                                 01688\n         CH    R1,VTDSCBTR                                              01689\n         BNH   VTOCREND                                                 01690\n         MVI   VTOCR,1                                                  01691\n         AH    R0,VTOCTT                                                01692\n         STH   R0,VTOCTT                                                01693\n         LR    R1,R0                                                    01694\n         BAL   R14,TTCONVRT                                             01695\n         MVC   VTOCCCHH,CCHH                                            01696\n         SPACE 1                                                        01697\nVTOCREND L     R14,VTSAVE                                               01698\n         LM    R2,R4,VTSAVE+4                                           01699\n         LA    R14,4(R14)                                               01700\n         BR    R14                                                      01701\n         SPACE 1                                                        01702\nVTOCEOD  L     R14,VTSAVE                                               01703\n         LM    R2,R4,VTSAVE+4                                           01704\n         BR    R14                                                      01705\n         SPACE 1                                                        01706\n         DROP  R3                                                       01707\n         EJECT                                                          01708\n         SPACE 3                                                        01709\nOBTAIN   MVC   OBCCHHR,0(R2)                                            01710\n         OBTAIN OBCAMLST                                                01711\n         BXLE  R15,R15,*+8                                              01712\n         BAL   R14,ABDUMP                                               01713\n         USING DS1,R3                                                   01714\n         MVC   DS1(DS1END-DS1),CAMLIST                                  01715\n         MVC   DS1FDAD(3),VTOCMBB                                       01716\n         MVC   DS1FDAD+3(5),0(R2)                                       01717\n         BR    R14                                                      01718\n         SPACE 2                                                        01719\nOBCAMLST CAMLST SEEK,OBCCHHR,VOLSERNO,CAMLIST                           01720\n         SPACE 1                                                        01721\n         DROP  R3                                                       01722\n         EJECT                                                          01723\n         SPACE 3                                                        01724\nSYNADXIT SYNADAF ACSMETH=BSAM                                           01725\n         MVC   BUF+7(47),=C'I/O ERROR PROCESSING XXXXXXXXXX. SYNADAF INX01726\n               FO=\"'                                                    01727\n         MVC   BUF+54(78),50(R1)                                        01728\n         MVI   BUF+132,C'\"'                                             01729\n         SYNADRLS                                                       01730\n         MVI   SYNADFLG,X'FF'                                           01731\n         LTR   R0,R0                                                    01732\n         BZR   R14                                                      01733\n         MVI   SYNADFLG,1                                               01734\n         BR    R14                                                      01735\n         SPACE 3                                                        01736\nSYNADCHK CLI   SYNADFLG,0                                               01737\n         BER   R14                                                      01738\n         MVC   BUF+28(11),0(R1)                                         01739\n         BAL   R14,CLOSVTOC                                             01740\n         BAL   R14,DEQVTOC                                              01741\n         MVI   BUF,SPACE3IM                                             01742\n         BAL   R14,PRINT                                                01743\n         MVI   BUF,SPACE3AP                                             01744\n         BAL   R14,PRINT                                                01745\n         CLI   SYNADFLG,X'FF'                                           01746\n         BE    ERRNODMP                                                 01747\n         BAL   R14,ABDUMP                                               01748\n         EJECT                                                          01749\n         SPACE 3                                                        01750\nDEQGATE  EQU   *+1                                                      01751\nDEQVTOC  BCR   *-*+15,R14                                               01752\n         OI    DEQGATE,X'F0'                                            01753\n         SPACE 1                                                        01754\n         DEQ   MF=(E,ENQVTOC)                                           01755\n         SPACE 1                                                        01756\n         BR    R14                                                      01757\n         SPACE 4                                                        01758\n         SPACE 1                                                        01759\nCLOSVTOC CLOSE MF=(E,CLOSLIST)                                          01760\n         SPACE 1                                                        01761\n         L     R1,REBLOCK@                                              01762\n         LTR   R1,R1                                                    01763\n         BZR   R14                                                      01764\n         L     R0,REGETSIZ                                              01765\n         FREEMAIN R,LV=(0),A=(1)                                        01766\n         SR    R0,R0                                                    01767\n         ST    R0,REBLOCK@                                              01768\n         BR    R14                                                      01769\n         EJECT                                                          01770\n         SPACE 3                                                        01771\n         USING DS1,R6                                                   01772\n         USING DS3,R8                                                   01773\n         SPACE 1                                                        01774\nF13HOOK  ST    R14,F1SAVE                                               01775\n         SR    R5,R5                                                    01776\n         ST    R5,F1TRKAL                                               01777\n         STH   R5,NUMEXT                                                01778\n         XC    LISTEXT(17*4),LISTEXT                                    01779\n         IC    R5,DS1NOEPV                                              01780\n         CLI   DS1EXT1,X'40'                                            01781\n         BNE   *+8                                                      01782\n         AH    R5,=H'1'                                                 01783\n         LTR   R5,R5                                                    01784\n         BZR   R14                                                      01785\n         STH   R5,NUMEXT                                                01786\n         SPACE 1                                                        01787\n         SR    R3,R3                                                    01788\n         SR    R4,R4                                                    01789\nF1NXTEXT EX    0,F1EXTPIK(R3)                                           01790\n         BAL   R14,F1EXTCNV                                             01791\n         AR    R4,R0                                                    01792\n         MVC   HOOKLCCH(8),2(R2)                                        01793\n         STH   R0,HOOKNTRK                                              01794\n         MVC   HOOKTYPE(2),0(R2)                                        01795\n         MVC   HOOKLOTT(4),LOWTT                                        01796\n         LA    R0,DS1DSNAM                                              01797\n         ST    R0,HOOKIDPT                                              01798\n         LA    R2,HOOKPTR                                               01799\n         BAL   R14,HOOKUP                                               01800\n         ST    R15,LISTEXT(R3)                                          01801\n         LA    R3,4(R3)                                                 01802\n         BCT   R5,F1NXTEXT                                              01803\n         ST    R4,F1TRKAL                                               01804\n         L     R14,F1SAVE                                               01805\n         BR    R14                                                      01806\n         EJECT ,                                                        01807\n         SPACE 3                                                        01808\nF1EXTCNV CLI   0(R2),0                                                  01809\n         BER   R14                                                      01810\n         LA    R2,2(R2)                                                 01811\n         BAL   R15,CCHHCONV                                             01812\n         STH   R0,LOWTT                                                 01813\n         LA    R2,4(R2)                                                 01814\n         BAL   R15,CCHHCONV                                             01815\n         STH   R0,HIGHTT                                                01816\n         LH    R1,LOWTT                                                 01817\n         SR    R0,R1                                                    01818\n         AH    R0,=H'1'                                                 01819\n         S     R2,=F'6'                                                 01820\n         BR    R14                                                      01821\n         SPACE 2                                                        01822\nF1EXTPIK LA    R2,DS1EXT1                                               01823\n         LA    R2,DS1EXT2                                               01824\n         LA    R2,DS1EXT3                                               01825\n         LA    R2,DS3EXTNT                                              01826\n         LA    R2,DS3EXTNT+10                                           01827\n         LA    R2,DS3EXTNT+20                                           01828\n         LA    R2,DS3EXTNT+30                                           01829\n         LA    R2,DS3ADEXT                                              01830\n         LA    R2,DS3ADEXT+10                                           01831\n         LA    R2,DS3ADEXT+20                                           01832\n         LA    R2,DS3ADEXT+30                                           01833\n         LA    R2,DS3ADEXT+40                                           01834\n         LA    R2,DS3ADEXT+50                                           01835\n         LA    R2,DS3ADEXT+60                                           01836\n         LA    R2,DS3ADEXT+70                                           01837\n         LA    R2,DS3ADEXT+80                                           01838\n         SPACE 2                                                        01839\n         DROP  R6,R8                                                    01840\n         EJECT                                                          01841\n         SPACE 3                                                        01842\n         USING DS5,R8                                                   01843\n*        USING DS6,R8                                                   01844\nF56HOOK  ST    R14,F5SAVE                                               01845\n         LA    R2,DS5AVEXT                                              01846\n         LA    R3,8                                                     01847\n         BAL   R14,F5EXTCNV                                             01848\n         LA    R2,5(R2)                                                 01849\n         BCT   R3,*-8                                                   01850\n         LA    R2,DS5MAVET                                              01851\n         LA    R3,18                                                    01852\n         BAL   R14,F5EXTCNV                                             01853\n         LA    R2,5(R2)                                                 01854\n         BCT   R3,*-8                                                   01855\n         L     R14,F5SAVE                                               01856\n         BR    R14                                                      01857\n         SPACE 1                                                        01858\nF5EXTCNV ST    R14,F5SAVE+4                                             01859\n         STM   R2,R5,F5SAVE+8                                           01860\n         CLC   0(5,R2),ZEROES                                           01861\n         BER   R14                                                      01862\n         MVC   FMT5TT(4),0(R2)                                          01863\n         LH    R3,FMT5TT                                                01864\n         STH   R3,LOWTT                                                 01865\n         LH    R4,FMT5CYLS                                              01866\n         SR    R5,R5                                                    01867\n         IC    R5,4(R2)                                                 01868\n         CLI   DS5FMTID,C'6'                                            01869\n         BE    F6HOOK                                                   01870\n         LH    R1,AVAILEXT                                              01871\n         LA    R1,1(R1)                                                 01872\n         STH   R1,AVAILEXT                                              01873\n         LH    R0,AVAILCYL                                              01874\n         AR    R0,R4                                                    01875\n         STH   R0,AVAILCYL                                              01876\n         LA    R0,=CL44'  **** AVAILABLE ****'                          01877\n         ST    R0,HOOKIDPT                                              01878\n         MVI   HOOKSEQN,0                                               01879\n         LR    R0,R4                                                    01880\n         MH    R0,TRKSPCYL                                              01881\n         AR    R0,R5                                                    01882\n         STH   R0,HOOKNTRK                                              01883\n         CH    R0,F5LARGTT                                              01884\n         BNH   F5AVAIL                                                  01885\n         STH   R0,F5LARGTT                                              01886\n         MVC   F5LARGST,2(R2)                                           01887\nF5AVAIL  LR    R1,R0                                                    01888\n         AH    R1,AVAILSPC                                              01889\n         STH   R1,AVAILSPC                                              01890\n         EJECT ,                                                        01891\n         SPACE 3                                                        01892\nF6RETURN AR    R0,R3                                                    01893\n         BCTR  R0,0                                                     01894\n         STH   R0,HIGHTT                                                01895\n         LH    R1,LOWTT                                                 01896\n         BAL   R14,TTCONVRT                                             01897\n         MVC   HOOKLCCH,CCHH                                            01898\n         LH    R1,HIGHTT                                                01899\n         BAL   R14,TTCONVRT                                             01900\n         MVC   HOOKHCCH,CCHH                                            01901\n         MVC   HOOKLOTT(4),LOWTT                                        01902\n         MVC   HOOKTYPE,DS5FMTID                                        01903\n         LA    R2,HOOKPTR                                               01904\n         BAL   R14,HOOKUP                                               01905\n         LM    R2,R5,F5SAVE+8                                           01906\n         L     R14,F5SAVE+4                                             01907\n         BR    R14                                                      01908\n         SPACE 1                                                        01909\nF6HOOK   STC   R5,HOOKSEQN                                              01910\n         MVC   HOOKIDPT,=A(FMT6MSG)                                     01911\n         LR    R0,R4                                                    01912\n         MH    R0,TRKSPCYL                                              01913\n         STH   R0,HOOKNTRK                                              01914\n         B     F6RETURN                                                 01915\n         SPACE 1                                                        01916\n         DROP  R8                                                       01917\n         EJECT                                                          01918\n         SPACE 3                                                        01919\nHOOKUP   TM    PARMOPT1,MAPOPT+EXTNTOPT+DIRFLAG                         01920\n         BZR   R14                                                      01921\n         ST    R14,HOSAVE                                               01922\n         STM   R3,R5,HOSAVE+4                                           01923\n         LA    R4,EXTNTLEN                                              01924\n         BAL   R14,GETCORE                                              01925\n         USING EXTENT,R3                                                01926\n         MVC   EXTENT(EXTNTLEN),0(R2)                                   01927\n         L     R2,HOOKSTRT                                              01928\n         LA    R4,HOOKSTRT                                              01929\nHOOKLOOK CLC   EXTLCCHH,EXTLCCHH-EXTENT(R2)                             01930\n         BL    HOOKDONE                                                 01931\n         LR    R4,R2                                                    01932\n         L     R2,0(R2)                                                 01933\n         B     HOOKLOOK                                                 01934\n         SPACE 1                                                        01935\nHOOKDONE ST    R2,EXTPTR                                                01936\n         ST    R3,EXTPTR-EXTENT(R4)                                     01937\n         LR    R15,R3                                                   01938\n         LM    R3,R5,HOSAVE+4                                           01939\n         L     R14,HOSAVE                                               01940\n         BR    R14                                                      01941\n         SPACE 1                                                        01942\n         DROP  R3                                                       01943\n         EJECT ,                                                        01944\n         SPACE 3                                                        01945\nCCHHCONV SR    R0,R0                                                    01946\n         IC    R0,0(R2)                                                 01947\n         MH    R0,DEVCONV1                                              01948\n         SR    R1,R1                                                    01949\n         IC    R1,1(R2)                                                 01950\n         MH    R1,DEVCONV2                                              01951\n         AR    R0,R1                                                    01952\n         SR    R1,R1                                                    01953\n         IC    R1,2(R2)                                                 01954\n         MH    R1,DEVCONV3                                              01955\n         AR    R0,R1                                                    01956\n         SR    R1,R1                                                    01957\n         IC    R1,3(R2)                                                 01958\n         MH    R1,DEVCONV4                                              01959\n         AR    R0,R1                                                    01960\n         BR    R15                                                      01961\n         SPACE 4                                                        01962\nTTCONVRT SR    R0,R0                                                    01963\n         ST    R0,CCHH                                                  01964\n         LH    R15,DEVCONV1                                             01965\n         LTR   R15,R15                                                  01966\n         BZ    TTCONVR2                                                 01967\n         DR    R0,R15                                                   01968\n         STC   R1,CCHH                                                  01969\n         LR    R1,R0                                                    01970\n         SR    R0,R0                                                    01971\nTTCONVR2 LH    R15,DEVCONV2                                             01972\n         LTR   R15,R15                                                  01973\n         BZ    TTCONVR3                                                 01974\n         DR    R0,R15                                                   01975\n         STC   R1,CCHH+1                                                01976\n         LR    R1,R0                                                    01977\n         SR    R0,R0                                                    01978\nTTCONVR3 LH    R15,DEVCONV3                                             01979\n         LTR   R15,R15                                                  01980\n         BZ    TTCONVR4                                                 01981\n         DR    R0,R15                                                   01982\n         STC   R1,CCHH+2                                                01983\n         STC   R0,CCHH+3                                                01984\n         BR    R14                                                      01985\n         SPACE 1                                                        01986\nTTCONVR4 STC   R1,CCHH+3                                                01987\n         BR    R14                                                      01988\n         EJECT                                                          01989\n         SPACE 3                                                        01990\nCONVERT1 LA    R3,1                                                     01991\n         B     CONVCOM                                                  01992\n         SPACE 1                                                        01993\nCONVERT2 LA    R3,2                                                     01994\n         B     CONVCOM                                                  01995\n         SPACE 1                                                        01996\nCONVERT3 LA    R3,3                                                     01997\n         B     CONVCOM                                                  01998\n         SPACE 1                                                        01999\nCONVERT4 LA    R3,4                                                     02000\n         SPACE 1                                                        02001\nCONVCOM  SR    R0,R0                                                    02002\nCONV1MOR SLL   R0,8                                                     02003\n         IC    R0,0(R2)                                                 02004\n         LA    R2,1(R2)                                                 02005\n         BCT   R3,CONV1MOR                                              02006\n         SPACE 1                                                        02007\nCONVERT  LPR   R0,R0                                                    02008\n         CVD   R0,CONVDEC                                               02009\n         UNPK  CONVUNPK,CONVDEC                                         02010\n         OI    CONVUNPK+11,X'F0'                                        02011\n         MVC   CONVEDIT,=X'402020202020202020202120'                    02012\n         ED    CONVEDIT,CONVDEC+2                                       02013\n         MVC   CONVERTD,CONVEDIT+1                                      02014\nCONVCLI  CLI   CONVERTD,C' '                                            02015\n         BNER  R14                                                      02016\n         MVC   CONVERTD,CONVERTD+1                                      02017\n         B     CONVCLI                                                  02018\n         SPACE 1                                                        02019\n         EJECT                                                          02020\n         SPACE 3                                                        02021\nDATEDIT  ST    R14,DASAVE                                               02022\n         STM   R2,R5,DASAVE+4                                           02023\n         XC    DATEWORD,DATEWORD                                        02024\n         LTR   R2,R2                                                    02025\n         BZ    DATGET                                                   02026\n         SR    R1,R1                                                    02027\n         IC    R1,0(R2)                                                 02028\n         MH    R1,=H'1000'                                              02029\n         MVC   DATEWORD,1(R2)                                           02030\n         AH    R1,DATEWORD                                              02031\n         CVD   R1,DATEWORD                                              02032\nDATGETRT OI    DATEWORD+7,X'0F'                                         02033\n         L     R2,DATEWORD+4                                            02034\n         SR    R0,R0                                                    02035\n         D     R0,=F'1000'                                              02036\n         LA    R15,DATNORMY                                             02037\n         LTR   R14,R1                                                   02038\n         BZ    DATCOMP                                                  02039\n         N     R14,=F'3'                                                02040\n         BM    DATCOMP                                                  02041\n         LA    R15,DATLEAPY                                             02042\n         SPACE 1                                                        02043\nDATCOMP  LTR   R0,R0                                                    02044\n         BZ    DAJULIAN                                                 02045\n         CH    R0,0(R15)                                                02046\n         BH    DAJULIAN                                                 02047\n         TM    PARMOPT2,JDATEOPT                                        02048\n         BO    DAJULIAN                                                 02049\n         LA    R3,1                                                     02050\n         SR    R14,R14                                                  02051\n         SPACE 1                                                        02052\nDATICMON IC    R14,1(R3,R15)                                            02053\n         CR    R0,R14                                                   02054\n         BNH   DATMONOK                                                 02055\n         SR    R0,R14                                                   02056\n         LA    R3,1(R3)                                                 02057\n         B     DATICMON                                                 02058\n         SPACE 1                                                        02059\nDATMONOK MH    R3,=H'1000'                                              02060\n         AR    R3,R0                                                    02061\n         MH    R3,=H'1000'                                              02062\n         AR    R3,R1                                                    02063\n         CVD   R3,DATEWORD                                              02064\n         MVC   DATEWORD(5),DATEWORD+3                                   02065\n         UNPK  DATEWORD(8),DATEWORD(5)                                  02066\n         OI    DATEWORD+7,X'F0'                                         02067\n         MVI   DATEWORD+2,C'/'                                          02068\n         MVI   DATEWORD+5,C'/'                                          02069\n         SPACE 3                                                        02070\nDATRETRN LM    R2,R5,DASAVE+4                                           02071\n         MVC   0(8,R3),DATEWORD                                         02072\n         L     R14,DASAVE                                               02073\n         BR    R14                                                      02074\n         SPACE 2                                                        02075\nDAJULIAN ST    R2,DATEWORD                                              02076\n         UNPK  DATEWORD+2(5),DATEWORD+1(3)                              02077\n         MVC   DATEWORD+1(2),DATEWORD+2                                 02078\n         MVI   DATEWORD,C' '                                            02079\n         MVI   DATEWORD+3,C'.'                                          02080\n         MVI   DATEWORD+7,C' '                                          02081\n         B     DATRETRN                                                 02082\n         SPACE 2                                                        02083\nDATGET   ST    R1,DATEWORD+4                                            02084\n         LTR   R1,R1                                                    02085\n         BNZ   DATGOT                                                   02086\n         TIME  DEC                                                      02087\n         ST    R1,DATEWORD+4                                            02088\nDATGOT   CVB   R1,DATEWORD                                              02089\n         B     DATGETRT                                                 02090\n         SPACE 2                                                        02091\n         EJECT                                                          02092\n         SPACE 3                                                        02093\nDUMPDSCB ST    R14,DUSAVE                                               02094\n         LR    R4,R2                                                    02095\n         LA    R2,3                                                     02096\n         BAL   R14,PRLKAHED                                             02097\n         LR    R2,R4                                                    02098\n         MVC   BUF+8(17),=C'BLK 1234.5678.90:'                          02099\n         UNPK  TRAREA,3(8,R3)                                           02100\n         TR    TRAREA,TRTABLE                                           02101\n         MVC   BUF+12(4),TRAREA                                         02102\n         MVC   BUF+17(4),TRAREA+4                                       02103\n         MVC   BUF+22(2),TRAREA+8                                       02104\n         LA    R3,0(R2)                                                 02105\n         LA    R4,BUF+35                                                02106\n         LA    R5,44                                                    02107\n         BAL   R14,DUMPLINE                                             02108\n         MVI   BUF,SPACE1AP                                             02109\n         BAL   R14,PRINT                                                02110\n         MVC   BUF+8(13),=C'FORMAT N DSCB'                              02111\n         MVC   BUF+15(1),44(R2)                                         02112\n         OI    BUF+15,X'F0'                                             02113\n         LA    R3,44(R2)                                                02114\n         LA    R4,BUF+26                                                02115\n         LA    R5,48                                                    02116\n         BAL   R14,DUMPLINE                                             02117\n         MVI   BUF,SPACE1AP                                             02118\n         BAL   R14,PRINT                                                02119\n         LA    R3,92(R2)                                                02120\n         LA    R4,BUF+26                                                02121\n         LA    R5,48                                                    02122\n         BAL   R14,DUMPLINE                                             02123\n         MVI   BUF,SPACE2AP                                             02124\n         BAL   R14,PRINT                                                02125\n         L     R14,DUSAVE                                               02126\n         BR    R14                                                      02127\n         EJECT ,                                                        02128\n         SPACE 3                                                        02129\nDUMPLINE LTR   R5,R5                                                    02130\n         BNPR  R14                                                      02131\n         B     DUMPNEXT                                                 02132\nDUMPWORD BCT   R1,DUMPBYTE                                              02133\n         MVI   0(R4),C' '                                               02134\n         LA    R4,1(R4)                                                 02135\nDUMPNEXT LA    R1,4                                                     02136\nDUMPBYTE UNPK  TRAREA(3),0(2,R3)                                        02137\n         TR    TRAREA(2),TRTABLE                                        02138\n         MVC   0(2,R4),TRAREA                                           02139\n         LA    R3,1(R3)                                                 02140\n         LA    R4,2(R4)                                                 02141\n         BCT   R5,DUMPWORD                                              02142\n         BR    R14                                                      02143\n         EJECT                                                          02144\n         SPACE 3                                                        02145\nGETCORE  A     R4,=F'3'                                                 02146\n         N     R4,=F'-4'                                                02147\nGETAGAIN L     R0,CORLEFT                                               02148\n         SR    R0,R4                                                    02149\n         BM    GETMAIN                                                  02150\n         ST    R0,CORLEFT                                               02151\n         L     R3,CORNEXT@                                              02152\n         LR    R0,R3                                                    02153\n         AR    R0,R4                                                    02154\n         ST    R0,CORNEXT@                                              02155\n         BR    R14                                                      02156\n         SPACE 3                                                        02157\nGETMAIN  L     R3,CURBLK@                                               02158\n         GETMAIN EC,LV=2048,A=CURBLK@                                   02159\n         BXH   R15,R15,ERRNOCOR                                         02160\n         SPACE 1                                                        02161\n         L     R1,CURBLK@                                               02162\n         ST    R1,0(R3)                                                 02163\n         SR    R0,R0                                                    02164\n         ST    R0,0(R1)                                                 02165\n         LA    R1,4(R1)                                                 02166\n         ST    R1,CORNEXT@                                              02167\n         MVC   CORLEFT,=A(2044)                                         02168\n         B     GETAGAIN                                                 02169\n         EJECT ,                                                        02170\n         SPACE 3                                                        02171\nFREECORE L     R2,CORFRST@                                              02172\nFREELOOP LTR   R1,R2                                                    02173\n         BZ    FREEDONE                                                 02174\n         L     R2,0(R2)                                                 02175\n         LA    R0,2048                                                  02176\n         FREEMAIN R,LV=(0),A=(1)                                        02177\n         B     FREELOOP                                                 02178\n         SPACE 1                                                        02179\nFREEDONE SR    R0,R0                                                    02180\n         ST    R0,CORLEFT                                               02181\n         ST    R0,CORFRST@                                              02182\n         LA    R0,CORFRST@                                              02183\n         ST    R0,CURBLK@                                               02184\n         BR    R14                                                      02185\n         EJECT                                                          02186\n         SPACE 3                                                        02187\nPRINT    ST    R14,PRSAVE                                               02188\n         STM   R2,R5,PRSAVE+4                                           02189\n         LH    R0,CURLINES                                              02190\n         CH    R0,MAXLINES                                              02191\n         BL    PRNOPAGE                                                 02192\n         PUT   PRINTDCB,NEWPAGE                                         02193\n         SR    R0,R0                                                    02194\n         STH   R0,CURLINES                                              02195\nPRNOPAGE LTR   R0,R0                                                    02196\n         BNZ   PRINTBUF                                                 02197\n         LH    R0,CURPAGES                                              02198\n         AH    R0,=H'1'                                                 02199\n         STH   R0,CURPAGES                                              02200\n         CH    R0,MAXPAGES                                              02201\n         BNH   PRTPGCNV                                                 02202\n         SR    R0,R0                                                    02203\n         STH   R0,CURPAGES                                              02204\nPRTPGCNV BAL   R14,CONVERT                                              02205\n         MVC   PAGENO,CONVERTD                                          02206\n         PUT   PRINTDCB,HEADERCC                                        02207\n         MVC   CURLINES,=H'3'                                           02208\n         L     R2,BUFPTR                                                02209\nPRNXTBUF LH    R0,CURLINES                                              02210\n         LTR   R2,R2                                                    02211\n         BZ    PRINTBUF                                                 02212\n         AH    R0,4(R2)                                                 02213\n         STH   R0,CURLINES                                              02214\n         LA    R3,6(R2)                                                 02215\n         PUT   PRINTDCB,(3)                                             02216\n         L     R2,0(R2)                                                 02217\n         B     PRNXTBUF                                                 02218\n         EJECT                                                          02219\n         SPACE 3                                                        02220\nPRINTBUF TM    BUF,X'80'                                                02221\n         BZ    PRUPLINE                                                 02222\n         SR    R0,R0                                                    02223\n         B     PRDOPUT                                                  02224\nPRUPLINE SR    R14,R14                                                  02225\n         IC    R14,BUF                                                  02226\n         SRL   R14,3                                                    02227\n         AR    R0,R14                                                   02228\nPRDOPUT  STH   R0,CURLINES                                              02229\n         PUT   PRINTDCB,BUF                                             02230\n         TM    BUF,X'02'                                                02231\n         BO    PRETURN                                                  02232\n         MVI   BUF+1,C' '                                               02233\n         MVC   BUF+2(131),BUF+1                                         02234\n         SPACE 1                                                        02235\nPRETURN  LM    R2,R5,PRSAVE+4                                           02236\n         L     R14,PRSAVE                                               02237\n         BR    R14                                                      02238\n         SPACE 4                                                        02239\nPRLKAHED AH    R2,CURLINES                                              02240\n         CH    R2,MAXLINES                                              02241\n         BNHR  R14                                                      02242\n         MVC   CURLINES,=H'999'                                         02243\n         BR    R14                                                      02244\n         EJECT                                                          02245\n         SPACE 1                                                        02246\nRETURN   CLOSE (PRINTDCB)                                               02247\n         SPACE 1                                                        02248\n         TM    DCBBUFCB+3+(PRINTDCB-IHADCB),X'01'                       02249\n         BO    RETQUIT                                                  02250\n         FREEPOOL PRINTDCB                                              02251\n         SPACE 1                                                        02252\nRETQUIT  CLI   HDNGLIST,X'FF'                                           02253\n         BNE   RETSAVER                                                 02254\n         L     R1,HDNGLIST                                              02255\n         LH    R2,0(R1)                                                 02256\n         LH    R0,CURPAGES                                              02257\n         AH    R0,=H'1'                                                 02258\n         BAL   R14,CONVERT                                              02259\n         LA    R3,CONVEDIT+12                                           02260\n         SR    R3,R2                                                    02261\n         BCTR  R2,0                                                     02262\n         STC   R2,*+5                                                   02263\n         MVC   2(*-*,R1),0(R3)                                          02264\n         SPACE 1                                                        02265\nRETSAVER L     R13,SAVEAREA+4                                           02266\n         L     R15,RETCODE                                              02267\n         L     R14,12(R13)                                              02268\n         LM    R0,R12,20(R13)                                           02269\n         MVI   12(R13),X'FF'                                            02270\n         SPM   R14                                                      02271\n         BR    R14                                                      02272\n         SPACE 3                                                        02273\nABDUMP   OI    ABCODE,X'80'        SET DUMP FLAG                        02274\n         SPACE 1                                                        02275\nABEND    L     R1,ABCODE           PICK UP ABEND CODE                   02276\n         ABEND (1)                                                      02277\n         EJECT ,                                                        02278\nNEWPAGE  DC    AL1(EJECTIM)                                             02279\nHEADERCC DC    AL1(SPACE3AP)                                            02280\nVOLSERNO DS    CL6                 CURRENT VOLUME SERIAL                02281\n         ORG   VOLSERNO                                                 02282\nHEADER DS 0CL95                                                         02283\n       DC C'DIRECT-ACCESS VOLUME LISTING UTILITY....         W.S'       02284\n       DC C'.R.C.C. VERSION--'                                          02285\n       DC C'&SYSDATE'   8 CHARS                                         02286\n       DC CL31' '                                                       02287\nHEADMID  EQU   HEADER+19                                                02288\nPRDATE   DC    CL8'03/15/84'                                            02289\n         DC    CL6'  DAY='                                              02290\nPRDAY    DC    CL3'999'                                                 02291\nPRTIME   DC    CL7'  23:59',CL4' '                                      02292\n         DC    CL5'PAGE '                                               02293\nPAGENO   DC    CL4'9999'                                                02294\n         SPACE 3                                                        02295\nHEAD1    DC    C'TABLE OF CONTENTS FOR VOLUME \"'                        02296\nHEAD1VOL DC    CL6'XXXXXX',C'\" ON DEVICE \"'                             02297\nHEAD1UCB DC    CL3'XXX',C'\" MOUNTED AS \"'                               02298\nHEAD1MT  DC    CL8'XXXXXXXX',C'/'                                       02299\nHEAD1MTR DC    CL5'XXXXX',C'\"'                                          02300\nHEAD1A   DC    A(HEAD1B)                                                02301\n         DC    H'0'                                                     02302\nHEADER1  DC    AL1(SPACE0AP),CL19' ',CL26'DSNAME'                       02303\nHEADAT1A DC    C'   SERIAL  R/W  CREDT    EXPDT    DSO RECFM BLKSZ LRECX02304\n               L KEY OP TRKAL TRKUS EX SECQU TYP'                       02305\nHEAD1B   DC    A(0)                                                     02306\n         DC    H'2'                                                     02307\nHEADER2  DC    AL1(SPACE2AP),44C'_',C' '                                02308\nHEADAT1B DC    C'   ______  ___ ________ ________  ___ _____ _____ ____X02309\n               _ ___ __ _____ _____ __ _____ ___'                       02310\n         SPACE 2                                                        02311\nHEAD2    DC    C'TRACK ALLOCATION MAP FOR VOLUME \"'                     02312\nHEAD2VOL DC    C'XXXXXX',C'\"'                                           02313\nHEAD2A   DC    A(HEAD2B)                                                02314\n         DC    H'0'                                                     02315\n         DC    AL1(SPACE0AP),CL22' '                                    02316\nHEAD2DAT DC    C'FIRST TRK   LAST TRK  FIRST   LAST  #TRKS  EX  EX-#  ' 02317\n         DC    CL44'DSNAME OR USAGE'                                    02318\n         DC    CL13' '                                                  02319\nHEAD2B   DC    A(0)                                                     02320\n         DC    H'2'                                                     02321\n         DC    AL1(SPACE2AP),CL22' '                                    02322\nHEAD2UND DC    C'_________  _________  _____  _____  _____  __  ____  ' 02323\n         DC    44C'_'                                                   02324\n         DC    CL13' '                                                  02325\n         SPACE                                                          02326\nDSNAMEL  DC    A(0)                                                JM#1 02327\n         DC    H'2'                                                JM#1 02328\nDSNAME2  DC    AL1(SPACE2AP),CL48' ',CL11'(CONTINUED)',CL77' '          02329\nH1BOLD   DC    A(0)                                                JM#1 02330\nH1BNEW   DC    A(DSNAMEL)                                          JM#1 02331\n         SPACE                                                          02332\nPDSMSG   DC    CL19'DIRECTORY CONTAINS'                                 02333\nPDSVAL1  DC    CL4'0000'                                                02334\n         DC    CL18' MEMBERS AND USES '                                 02335\nPDSVAL2  DC    CL4'0000'                                                02336\n         DC    CL8' OF THE '                                            02337\nPDSVAL3  DC    CL4'0000'                                                02338\n         DC    CL39' DIRECTORY BLOCKS ALLOCATED, INCLUDING '            02339\nPDSVAL4  DC    CL3'000'                                                 02340\n         DC    CL24' BYTES OF THE LAST BLOCK'                           02341\nPDSMSGLN EQU   *-PDSMSG                                                 02342\n         EJECT                                                          02343\n         PRINT ON,NOGEN                                                 02344\n         SPACE 2                                                        02345\nVTOCDCB  DCB   DDNAME=VOLUME01,                                        X02346\n               DSORG=PS,                                               X02347\n               MACRF=(R),                                              X02348\n               RECFM=FS,                                               X02349\n               KEYLEN=44,                                              X02350\n               BLKSIZE=96,                                             X02351\n               OPTCD=C,                                                X02352\n               NCP=NCPDFLT,                                            X02353\n               EXLST=JFCBAD,                                           X02354\n               EODAD=VTOCEOD,                                          X02355\n               SYNAD=SYNADXIT                                           02356\n         SPACE 6                                                        02357\nPDSDCB   DCB   DDNAME=VOLUME01,                                        X02358\n               DSORG=PS,                                               X02359\n               MACRF=(R),                                              X02360\n               RECFM=F,                                                X02361\n               KEYLEN=8,                                               X02362\n               BLKSIZE=256,                                            X02363\n               EXLST=JFCBAD,                                           X02364\n               EODAD=PDSEOD,                                           X02365\n               SYNAD=SYNADXIT                                           02366\n         SPACE 6                                                        02367\nPRINTDCB DCB   DDNAME=SYSPRINT,                                        X02368\n               DSORG=PS,                                               X02369\n               EROPT=ACC,                                              X02370\n               MACRF=(PM),                                             X02371\n               RECFM=FBM,                                              X02372\n               LRECL=133,                                              X02373\n               BLKSIZE=133                                              02374\n         SPACE 2                                                        02375\n         PRINT ON,GEN                                                   02376\n         EJECT                                                          02377\nOPENLIST OPEN  (VTOCDCB,(INPUT)),MF=L                                   02378\nOPENFLAG EQU   OPENLIST                                                 02379\nOPENUPDT EQU   X'04'                                                    02380\n         SPACE 2                                                        02381\nCLOSLIST CLOSE (VTOCDCB),MF=L                                           02382\nCLOSFLAG EQU   CLOSLIST                                                 02383\nCLOSRERD EQU   X'10'                                                    02384\n         SPACE 2                                                        02385\n         READ  VTOCDECB,SF,VTOCDCB,CAMLIST,MF=L                         02386\n         SPACE 2                                                        02387\n         READ  PDSDECB,SF,PDSDCB,MF=L                                   02388\n         SPACE 2                                                        02389\nENQVTOC  RESERVE (SYSVTOC,VOLSERNO,S,6,SYSTEMS),UCB=UCBADDR,MF=L        02390\nENQFLAGS EQU   ENQVTOC+2                                                02391\nENQSHAR  EQU   X'80'                                                    02392\n         SPACE 1                                                        02393\nSYSVTOC  DC    CL8'SYSVTOC'                                             02394\n         EJECT                                                          02395\nDATEWORD DC    D'0'                                                     02396\nCONVDEC  DC    D'0'                                                     02397\nCONVEDIT DC    CL12' '                                                  02398\nCONVERTD DC    CL11' ',C' '                                             02399\nCONVUNPK DC    CL12' '                                                  02400\nNOMAPDDS DC    C'JOBLIB  '                                              02401\n         DC    C'STEPCAT '                P.A.S.                        02402\n         DC    C'JOBCAT  '                P.A.S.                        02403\n         DC    C'STEPLIB '                                              02404\n         DC    C'SYSCHK  '                                              02405\n         DC    C'PGM=*.DD'                                              02406\n         DC    C'SYSIN   '                                              02407\n         DC    C'SYSPRINT'                                              02408\n         DC    C'SYSABEND'                                              02409\n         DC    C'SYSUDUMP'                                              02410\n         DC    C'        '                                              02411\nVOLDDNAM DC    C'VOLUME00'                                              02412\n         ORG   *-2                                                      02413\nCURVOLNM DC    C'00'                                                    02414\nTIME     DC    F'0'                                                     02415\nPARMLIST DC    A(0)                                                     02416\nDDNMLIST DC    A(0)                                                     02417\nHDNGLIST DC    A(0)                                                     02418\nDDLSTPTR DC    A(0)                                                     02419\n         SPACE 1                                                        02420\nEXTRACT  EQU   *                                                        02421\nTIOTAD   DC    A(0)                                                     02422\nCOMPTR   DC    A(0)                                                     02423\n         SPACE 1                                                        02424\nTIOTADDD DC    A(0)                                                     02425\nPDSBLKAD DC    A(PDSBLOCK,PDSBLOCK+PDSBLKLN)                            02426\nCCHH     DC    F'0'                                                     02427\nBUFPTR   DC    A(0)                                                     02428\nHOOKSTRT DC    A(*)                                                     02429\nHOOKEND  DC    F'-1'                                                    02430\nDATNORMY DC    H'365',AL1(31,28,31,30,31,30,31,31,30,31,30,31)          02431\nDATLEAPY DC    H'366',AL1(31,29,31,30,31,30,31,31,30,31,30,31)          02432\nCORLEFT  DC    F'0'                                                     02433\nCORNEXT@ DC    A(0)                                                     02434\nCURBLK@  DC    A(*+4)                                                   02435\nCORFRST@ DC    A(0)                                                     02436\nCURLINES DC    H'999'                                                   02437\nMAXPAGES DC    H'9999'                                                  02438\nMAXLINES DC    H'60'                                                    02439\nCURPAGES DC    H'0'                                                     02440\nJFCBAD   DC    X'87',AL3(JFCB)                                          02441\nRETCODE  DC    F'0'                                                     02442\nABCODE   DC    F'100'              ABEND CODE 100                       02443\nSAVEAREA DC    18F'0'                                                   02444\nCURVOL   DC    H'0'                                                     02445\nDDNAMLEN DC    H'0'                                                     02446\nNUMVOLS  DC    H'-1'                                                    02447\nNCPPARM  DC    AL2(NCPDFLT)                                             02448\nTRAREA   DC    CL15' ',C' '                                             02449\nEFFS     DC    44X'FF'                                                  02450\nLASTDS1  EQU   EFFS                                                     02451\nZEROES   DC    44X'00'                                                  02452\nPARMOPT1 DC    AL1(00)    SET DEFAULT TO NO OPTIONS                     02453\nPARMOPT2 DC    AL1(0)                                                   02454\nTRTABLE  EQU   *-240                                                    02455\n         DC    C'0123456789ABCDEF'                                      02456\nSTARS    DC    C'*********'                                             02457\nVOLSTAT  DC    X'00'                                                    02458\n         DC    0F'0'                                                    02459\nHOOKINIT DC    2XL4'00'                                                 02460\n         DC    H'1'                                                     02461\n         DC    X'FF00'                                                  02462\n         DC    A(VOLABMSG)                                              02463\n         DC    F'0'                                                     02464\n         EJECT                                                          02465\n         SPACE 3                                                        02466\nDEVTABLE DC    X'06',CL15'2305-1 DRUM'                                  02467\n*                                                                       02468\n         DC    X'07',CL15'2305-2 DRUM'                                  02469\n*                                                                       02470\n         DC    X'08',CL15'2314 DISK PACK'                               02471\n*                                                                       02472\n         DC    X'09',CL15'3330 DISK PACK'                               02473\n*                                                                       02474\n         DC    X'0D',CL15'3330-II DISK'     ADDED 4/1/75  P.A.S.        02475\n*                                                                       02476\n         DC    X'0A',CL15'3340-35M DISK'   ADDED 5/4/75  P.A.S.         02477\n*                                                                       02478\n         DC    X'0B',CL15'3350 DISK PACK'  ADDED 01/10/77 G.D.F.        02479\n*                                                                       02480\n         DC    X'0E',CL15'3380 DISK PACK'  ADDED 08/13/82          JM#2 02481\n*                                                                       02482\nDEVTABND DC    X'00',CL7'UNKNOWN'                                       02483\n         SPACE 1                                                        02484\nDEVENTLN EQU   16                                                       02485\n         EJECT                                                          02486\n         LTORG                                                          02487\n         SPACE 1                                                        02488\nVOLABMSG DC    CL44'  **** VOLUME LABEL ****'                           02489\nVTOCMSG  DC    CL44'  **** VOLUME TABLE OF CONTENTS ****'               02490\nFMT6MSG  DC    CL44'SPLIT CYLINDER(S) SHARED BY NEXT XXX EXTENTS'       02491\n         SPACE 3                                                        02492\nSTORAGES DS    0D                                                       02493\n         EJECT                                                          02494\nBUF      DS    CL133                                                    02495\n         SPACE 2                                                        02496\n         ORG   BUF+1                                                    02497\nL1       DS    0CL132                                                   02498\nL1DSNAME DS    CL44                                                     02499\n         DS    CL4                                                      02500\nL1SERIAL DS    CL6                                                      02501\nL1VOLSQ  DS    C                                                        02502\n         DS    C                                                        02503\nL1SECUR  DS    CL3                                                      02504\n         DS    C                                                        02505\nL1CREDT  DS    CL8                                                      02506\n         DS    C                                                        02507\nL1EXPDT  DS    CL8                                                      02508\n         DS    2C                                                       02509\nL1DSORG  DS    CL3                                                      02510\n         DS    C                                                        02511\nL1RECFM  DS    CL5                                                      02512\n         DS    C                                                        02513\nL1BLKSIZ DS    CL5                                                      02514\n         DS    C                                                        02515\nL1LRECL  DS    CL5                                                      02516\n         DS    C                                                        02517\nL1KEYLEN DS    CL3                                                      02518\n         DS    C                                                        02519\nL1OPTCD  DS    CL2                                                      02520\n         DS    C                                                        02521\nL1TRKAL  DS    CL5                                                      02522\n         DS    C                                                        02523\nL1TRKUS  DS    CL5                                                      02524\n         DS    C                                                        02525\nL1NOEPV  DS    CL2                                                      02526\n         DS    C                                                        02527\nL1SECQU  DS    CL5                                                      02528\n         DS    C                                                        02529\nL1TYP    DS    CL3                                                      02530\n         SPACE 1                                                        02531\n         ORG   L1SERIAL                                                 02532\nL1LSTDT  DS    CL8                                                      02533\n         DS    C                                                        02534\nL1USCNT  DS    CL5                                                      02535\n         ORG   ,                                                        02536\n         EJECT                                                          02537\nPRSAVE   DS    5A                                                       02538\nDASAVE   DS    5A                                                       02539\n         DS    0D                                                       02540\nPDSBLOCK DS    2XL(PDSBLKLN)                                            02541\nCAMLIST  DS    XL(CAMLSTLN)                                             02542\n         SPACE 1                                                        02543\nSTART0   DS    0H                  START OF CORE ZEROED FOR EACH VOL    02544\n         SPACE 1                                                        02545\nDEVTYPE  DS    6F                                                       02546\nUCBADDR  DS    A                                                        02547\nFIRSTDS1 DS    A                                                        02548\nFMT4AD   DS    A                                                        02549\nFMT5AD   DS    A                                                        02550\nFMT6AD   DS    A                                                        02551\nFMT5TT   DS    H                                                        02552\nFMT5CYLS DS    H                                                        02553\n         SPACE 1                                                        02554\nREBLOCK@ DS    F                                                        02555\nRENEXT@  DS    F                                                        02556\nREBLKSIZ DS    F                                                        02557\nRECOUNT  DS    F                                                        02558\nRENCP    DS    F                                                        02559\nREGETSIZ DS    F                                                        02560\n         SPACE 1                                                        02561\nFMXCOUNT DS    0H                  COUNT FIELDS MUST BE TOGETHER        02562\nFM0COUNT DS    H                                                        02563\nFM1COUNT DS    H                                                        02564\nFM2COUNT DS    H                                                        02565\nFM3COUNT DS    H                                                        02566\nFM4COUNT DS    H                                                        02567\nFM5COUNT DS    H                                                        02568\nFM6COUNT DS    H                                                        02569\n         SPACE 1                                                        02570\nAVAILCYL DS    H                                                        02571\nAVAILSPC DS    H                                                        02572\nAVAILEXT DS    H                                                        02573\nVTOCSIZE DS    H                                                        02574\nLOWTT    DS    H                                                        02575\nHIGHTT   DS    H                                                        02576\n         SPACE 1                                                        02577\nHOOKPTR  DS    F                                                        02578\nHOOKLCCH DS    XL4                                                      02579\nHOOKHCCH DS    XL4                                                      02580\nHOOKNTRK DS    H                                                        02581\nHOOKTYPE DS    X                                                        02582\nHOOKSEQN DS    X                                                        02583\nHOOKIDPT DS    A                                                        02584\nHOOKLOTT DS    XL2                                                      02585\nHOOKHITT DS    XL2                                                      02586\n         SPACE 1                                                        02587\nF1TRKAL  DS    F                                                        02588\nDEVTABPT DS    A                   POINTER TO CURRENT DEVTABLE ENTRY    02589\nDEVCONV1 DS    H                   CURRENT DEVTABLE INFO                02590\nDEVCONV2 DS    H                                                        02591\nDEVCONV3 DS    H                                                        02592\nDEVCONV4 DS    H                                                        02593\nTRKSPCYL DS    H                                                        02594\nTRKSPVOL DS    H                                                        02595\nCRATRACK DS    H              REL TRACK ADDRESS OF VSAM CRA             02596\nHWMOLD   DS    XL5                                                      02597\nHWMDS1   DS    XL5                                                      02598\nHWMNEW   DS    XL5                                                      02599\nHWMINDIC DS    X                                                        02600\nF5LARGST DS    XL3                                                      02601\nSYNADFLG DS    X                                                        02602\nOBCCHHR  DS    XL5                                                      02603\nBADDSTYP DS    C                                                        02604\nF5LARGTT DS    H                                                        02605\n         SPACE 1                                                        02606\n         DS    0H                                                       02607\nVTOCTTR  DS    0XL3                                                     02608\nVTOCTT   DS    H                                                        02609\nVTOCR    DS    X                                                        02610\nVTOCMBB  DS    0XL3                                                     02611\nVTOCM    DS    X                                                        02612\nVTOCBIN  DS    H                                                        02613\nVTOCCCHH DS    XL4                                                      02614\nVTDSCBTR DS    H                                                        02615\n         SPACE 1                                                        02616\nEND0     DS    0H                  END OF CORE ZEROED FOR EACH VOL      02617\nLENGTH0  EQU   END0-START0         AMOUNT TO BE ZEROED                  02618\n         SPACE 1                                                        02619\nNUMEXT   DS    H                                                        02620\nLISTEXT  DS    17A                                                      02621\nPDSAVE   DS    6A                                                       02622\nPDSENTAD DS    A                                                        02623\nPDSBYTCT DS    H                                                        02624\nPDSBLKAL DS    H                                                        02625\nPDSBLKUS DS    H                                                        02626\nPDSMEMCT DS    H                                                        02627\nISAVE    DS    5A                                                       02628\nEXPFLAG  DS    X                                                        02629\nEXSAVE   DS    3A                                                       02630\nVTSAVE   DS    4A                                                       02631\nF1SAVE   DS    A                                                        02632\nF5SAVE   DS    6A                                                       02633\nHOSAVE   DS    4A                                                       02634\nDUSAVE   DS    A                                                        02635\n         EJECT ,                                                        02636\n         IEFJFCBN                                                       02637\n         SPACE 1                                                        02638\nJFCB     EQU   INFMJFCB                                                 02639\n         SPACE 3                                                        02640\n         ORG   STORAGES                                                 02641\n         EJECT                                                          02642\n         SPACE 1                                                        02643\nINIT     L     R2,0(R1)                                                 02644\n         ST    R2,PARMLIST                                              02645\n         LTR   R2,R2                                                    02646\n         BM    GETTIME                                                  02647\n         L     R2,4(R1)                                                 02648\n         ST    R2,DDNMLIST                                              02649\n         LTR   R2,R2                                                    02650\n         BM    CHEKDDNM                                                 02651\n         L     R2,8(R1)                                                 02652\n         ST    R2,HDNGLIST                                              02653\n         SPACE 1                                                        02654\n         LA    R2,0(R2)                                                 02655\n         LTR   R2,R2                                                    02656\n         BZ    CHEKDDNM                                                 02657\n         LH    R3,0(R2)                                                 02658\n         LA    R2,2(R2)                                                 02659\n         BAL   R14,PARMPARS                                             02660\n         LTR   R0,R0                                                    02661\n         BNP   CHEKDDNM                                                 02662\n         CH    R0,=H'9999'                                              02663\n         BH    CHEKDDNM                                                 02664\n         BCTR  R0,0                                                     02665\n         STH   R0,CURPAGES                                              02666\n         MVI   HDNGLIST,X'FF'                                           02667\n         SPACE 1                                                        02668\nCHEKDDNM TM    PARMLIST,X'80'                                           02669\n         BO    GETTIME                                                  02670\n         L     R1,DDNMLIST                                              02671\n         LH    R0,0(R1)                                                 02672\n         SH    R0,=H'8'                                                 02673\n         BM    GETTIME                                                  02674\n         OI    DDNMLIST,X'F0'                                           02675\n         STH   R0,DDNAMLEN                                              02676\n         MVC   DCBDDNAM+(PRINTDCB-IHADCB),2(R1)                         02677\n         SH    R0,=H'8'                                                 02678\n         BM    GETTIME                                                  02679\n         LA    R1,10(R1)                                                02680\n         ST    R1,DDLSTPTR                                              02681\n         OI    DDNMLIST,X'0F'                                           02682\n         SPACE 1                                                        02683\nGETTIME  TIME  DEC                                                      02684\n         SRL   R0,4                                                     02685\n         ST    R0,TIME                                                  02686\n         MVC   PRTIME,=X'402120207A2020'                                02687\n         ED    PRTIME,TIME                                              02688\n         ST    R1,DATEWORD+4                                            02689\n         UNPK  TRAREA,DATEWORD+6(8)                                     02690\n         TR    TRAREA,TRTABLE                                           02691\n         MVC   PRDAY,TRAREA                                             02692\n         SR    R2,R2                                                    02693\n         LA    R3,PRDATE                                                02694\n         BAL   R14,DATEDIT                                              02695\n         SPACE 1                                                        02696\n         OPEN  (PRINTDCB,(OUTPUT))                                      02697\n         TM    DCBOFLGS+(PRINTDCB-IHADCB),DCBOFOPN                      02698\n         BNZ   *+8                                                      02699\n         BAL   R14,ABEND                                                02700\n         MVI   BUF,C' '                                                 02701\n         MVC   BUF+1(L'BUF-1),BUF                                       02702\n         SPACE 1                                                        02703\n         EXTRACT EXTRACT,FIELDS=(TIOT,COMM)                             02704\n         L     R1,TIOTAD                                                02705\n         LA    R1,TIOENTRY-TIOT(,R1)                                    02706\n         ST    R1,TIOTADDD                                              02707\n         SPACE 1                                                        02708\n         MVC   BUF+10(21),=C'EXEC PARAMETER FIELD:'                     02709\n         L     R1,COMPTR                                                02710\n         L     R1,COMCIBPT-COM(,R1)                                     02711\nTESTCIB  LA    R1,0(,R1)                                                02712\n         LTR   R1,R1                                                    02713\n         BZ    PARMEX                                                   02714\n         USING CIB,R1                                                   02715\n         CLI   CIBVERB,CIBSTART                                         02716\n         BE    PARMCIB                                                  02717\n         L     R1,CIBNEXT                                               02718\n         B     TESTCIB                                                  02719\n         SPACE 1                                                        02720\nPARMCIB  LA    R1,CIBDATLN                                              02721\n         ST    R1,PARMLIST                                              02722\n         DROP  R1                                                       02723\n         MVC   BUF+9(5),=C'START'                                       02724\n         SPACE 1                                                        02725\nPARMEX   L     R2,PARMLIST                                              02726\n         LH    R3,0(R2)                                                 02727\n         LA    R2,2(R2)                                                 02728\n         CH    R3,=H'99'                                                02729\n         BL    PARMLNOK                                                 02730\n         MVC   BUF+30(28),=C' IS TOO LONG AND WAS IGNORED'              02731\n         SR    R3,R3                                                    02732\n         B     PARMPRNT                                                 02733\n         SPACE 1                                                        02734\nPARMLNOK LTR   R1,R3                                                    02735\n         BZ    PARMPRNT                                                 02736\n         BCTR  R1,0                                                     02737\n         STC   R1,*+5                                                   02738\n         MVC   BUF+33(*-*),0(R2)                                        02739\nPARMPRNT MVI   BUF,SPACE3AP                                             02740\n         BAL   R14,PRINT                                                02741\n         SPACE 1                                                        02742\nPARMLOOP BAL   R14,PARMPARS                                             02743\n         TM    PARMOPT2,VOLSOPT                                         02744\n         BO    PARMVOL2                                                 02745\n         TM    PARMOPT2,LNCNTOPT                                        02746\n         BO    PARMLCT2                                                 02747\n         TM    PARMOPT2,NCPOPT                                          02748\n         BO    PARMNCP2                                                 02749\n         CLI   PARMBUF,C' '                                             02750\n         BE    PARMDONE                                                 02751\n         SPACE 1                                                        02752\n         LA    R0,12                                                    02753\n         LA    R1,PARMS                                                 02754\nPARMCOMP CLC   PARMBUF,0(R1)                                            02755\n         BE    GOTPARM                                                  02756\n         BXH   R1,R0,PARMCOMP                                           02757\n         SPACE 1                                                        02758\nGOTPARM  MVC   PARMVALS,8(R1)                                           02759\n         MVC   *+8(2),10(R1)                                            02760\n         B     *-*                                                      02761\n         SPACE 1                                                        02762\nPARMSET  SR    R15,R15                                                  02763\n         IC    R15,PARMVALS+1                                           02764\n         LA    R15,PARMOPT1(R15)                                        02765\n         SR    R0,R0                                                    02766\n         IC    R0,PARMVALS                                              02767\n         CLI   PARMVALS,128                                             02768\n         BH    PARMOFF                                                  02769\n         STC   R0,*+5                                                   02770\n         OI    0(R15),*-*                                               02771\n         B     PARMLOOP                                                 02772\n         SPACE 1                                                        02773\nPARMOFF  STC   R0,*+5                                                   02774\n         NI    0(R15),*-*                                               02775\n         B     PARMLOOP                                                 02776\n         SPACE 1                                                        02777\nDEBUGON  OI    CLOSLIST,CLOSRERD                                        02778\n         B     PARMSET                                                  02779\n         SPACE 1                                                        02780\nDEBUGOFF NI    CLOSLIST,255-CLOSRERD                                    02781\n         B     PARMSET                                                  02782\n         SPACE 1                                                        02783\nPDSON    L     R15,TIOTAD                                               02784\n*        CLI   TIOCNJOB+3-TIOT(R15),C'$'    DELETED  4/1/75  P.A.S.     02785\n*        BNE   PARMERR      DELETED  4/1/75   P.A.S.                    02786\n         B     PARMSET                                                  02787\n         SPACE 1                                                        02788\nRESETON  NI    ENQFLAGS,255-ENQSHAR                                     02789\n         OI    CLOSLIST,CLOSRERD                                        02790\n         B     PARMSET                                                  02791\n         SPACE 1                                                        02792\nRESETOFF OI    ENQFLAGS,ENQSHAR                                         02793\n         NI    CLOSLIST,255-CLOSRERD                                    02794\n         B     PARMSET                                                  02795\n         SPACE 1                                                        02796\nPARMVOL2 NI    PARMOPT2,255-VOLSOPT                                     02797\n         LTR   R0,R0                                                    02798\n         BNP   PARMERR                                                  02799\n         CH    R0,=H'99'                                                02800\n         BH    PARMERR                                                  02801\n         STH   R0,NUMVOLS                                               02802\n         B     PARMLOOP                                                 02803\n         SPACE 1                                                        02804\nPARMLCT2 NI    PARMOPT2,255-LNCNTOPT                                    02805\n         LTR   R0,R0                                                    02806\n         BNP   PARMERR                                                  02807\n         CH    R0,=H'999'                                               02808\n         BNL   PARMERR                                                  02809\n         STH   R0,MAXLINES                                              02810\n         B     PARMLOOP                                                 02811\n         SPACE 1                                                        02812\nPARMNCP2 NI    PARMOPT2,255-NCPOPT                                      02813\n         LTR   R0,R0                                                    02814\n         BNP   PARMERR                                                  02815\n         CH    R0,=H'99'                                                02816\n         BH    PARMERR                                                  02817\n         STH   R0,NCPPARM                                               02818\n         B     PARMLOOP                                                 02819\n         SPACE 1                                                        02820\nPARMERR  MVI   BUF+10,C'\"'                                              02821\n         MVC   BUF+11(8),PARMBUF                                        02822\n         MVC   BUF+19(41),=C'\" IS AN ILLEGAL PARAMETER AND WAS IGNORED' 02823\n         MVI   BUF,SPACE3AP                                             02824\n         BAL   R14,PRINT                                                02825\n         B     PARMLOOP                                                 02826\n         SPACE 1                                                        02827\nPARMDONE OI    PARMOPT2,VOLSOPT                                         02828\n         LH    R0,NUMVOLS                                               02829\n         CH    R0,=H'-1'                                                02830\n         BNE   PARMVOL#                                                 02831\n         NI    PARMOPT2,255-VOLSOPT                                     02832\n         MVC   NUMVOLS,=H'99'                                           02833\n         MVC   BUF+10(3),=C'ALL'                                        02834\n         B     PARMVLPR                                                 02835\n         SPACE 1                                                        02836\nPARMVOL# BAL   R14,CONVERT                                              02837\n         MVC   BUF+10(3),CONVEDIT+9                                     02838\nPARMVLPR MVC   BUF+14(24),=C'VOLUME(S) WILL BE LISTED'                  02839\n         MVI   BUF,SPACE3AP                                             02840\n         BAL   R14,PRINT                                                02841\n         SPACE 1                                                        02842\n         CLC   NCPPARM,=H'1'                                            02843\n         BNE   *+8                                                      02844\n         OI    PARMOPT2,NCPOPT                                          02845\n         TM    PARMOPT1,LSTDTOPT                                        02846\n         BZ    PARMDDCK                                                 02847\n         MVC   HEADAT1A(14),=C' LSTDT   USCNT'                          02848\n         MVC   HEADAT1B(14),=C'________ _____'                          02849\n         SPACE 1                                                        02850\nPARMDDCK TM    DDNMLIST,X'F0'                                           02851\n         BNO   PARMHDCK                                                 02852\n         MVC   BUF+10(36),=C'AN INTERNAL DDNAME LIST WILL BE USED'      02853\n         TM    DDNMLIST,X'0F'                                           02854\n         BO    *+10                                                     02855\n         MVC   BUF+47(14),=C'FOR PRINT ONLY'                            02856\n         MVI   BUF,SPACE3AP                                             02857\n         BAL   R14,PRINT                                                02858\n         SPACE 1                                                        02859\nPARMHDCK CLI   HDNGLIST,X'FF'                                           02860\n         BNE   PRTINFO      ADDED 4/1/75  P.A.S.  FOR 'HELP'            02861\n         MVC   BUF+10(35),=C'AN INTERNAL PAGE COUNT WILL BE USED'       02862\n         MVI   BUF,SPACE3AP                                             02863\n         BAL   R14,PRINT                                                02864\n         SPACE 3                                                        02865\nPRTINFO  EQU   *                                                        02866\n         LA    R3,PRTINFOL  POINT TO INFO LISTING                       02867\n         LA    R2,PRTINFLN  NUMBER OF INFO LINES TO PRINT.         JM#1 02868\nPRTINFOA MVC   BUF+9(50),0(R3)  MOVE LINE TO BUFFER                JM#1 02869\n         MVI   BUF,SPACE1AP   INSERT CARRIAGE CONTROL                   02870\n         LA    R3,50(R3)  INCREMENT TO NEXT LINE                   JM#1 02871\n         BAL   R14,PRINT                                                02872\n         BCT   R2,PRTINFOA GO AGAIN                                     02873\n         MVI   BUF,SPACE3IM                                             02874\n         BAL   R14,PRINT                                                02875\n         MVC   BUF+9(33),=C'*** OPERATING SYSTEM RUN ON .... '          02876\n         MVI   BUF,SPACE3AP                                             02877\n         L     R3,16  POINT TO CVT                                      02878\n         LA    R3,116(R3)   POINT TO OPERATING SYS                      02879\n         TM    0(R3),X'40'  PCP                                         02880\n         BNO   *+10                                                     02881\n         MVC   BUF+42(4),=C'PCP '                                       02882\n         TM    0(R3),X'20'  MFT                                         02883\n         BNO   *+10                                                     02884\n         MVC   BUF+42(4),=C'MFT '                                       02885\n         TM    0(R3),X'10'  MVT                                         02886\n         BNO   *+10                                                     02887\n         MVC   BUF+42(4),=C'MP65'                                       02888\n         TM    0(R3),X'22'  VS1                                         02889\n         BNO   *+10                                                     02890\n         MVC   BUF+42(4),=C'VS1 '                                       02891\n         TM    0(R3),X'12'  VS2 REL 1 (SVS)                             02892\n         BNO   *+10                                                     02893\n         MVC   BUF+42(4),=C'SVS '                                       02894\n         TM    0(R3),X'11'  VS2 REL 2+  (MVS)                           02895\n         BNO   *+10                                                     02896\n         MVC   BUF+42(4),=C'MVS '                                       02897\n         BAL   R14,PRINT                                                02898\n         B     NEXTVOL                                                  02899\nPRTINFOL EQU   *                                                   JM#1 02900\n         DC    C'***********  EXECUTION  PARM  VALUES  ************'    02901\n         DC    C'*   MAP......PRODUCE A TRACK MAP OF VOLUME       *'    02902\n         DC    C'*   PDS......LIST ALL PDS DIRECTORIES ON VOLUME  *'    02903\n         DC    C'*   ISAM.....LIST ISAM REORG INFO FOR DATASETS   *'    02904\n         DC    C'*   EXT......LIST THE EXTENTS OF THE DATASETS    *'    02905\n         DC    C'*   DUMP.....LIST (HEX) ALL DSCB''S ON VOLUME     *'   02906\n         DC    C'*   EMPTY....LIST ONLY DATASETS THAT ARE EMPTY   *'    02907\n         DC    C'*   MODEL....WILL ONLY LIST \"MODEL DSCB''S\"       *'   02908\n         DC    C'*   SDUMP....LIST (HEX) FORMAT 4 AND 5 DSCB''S    *'   02909\n         DC    C'*   VOLS.....ONLY USE DDNAMES OF \"VOLUME--\",     *'    02910\n         DC    C'*       FORMAT--\"VOLS=X\", WHERE \"X\" IS MAX #     *'    02911\n         DC    C'*   JDATE....LIST CREATE/EXPIRE DATE IN JULIAN   *'    02912\n         DC    C'*   NCP......NUMBER OF CH.PGMS. TO READ VTOC     *'    02913\n         DC    C'*   LINECNT..USE OTHER THAN DEFAULT LINES/PAGE   *'    02914\n         DC    C'*   LSTDT....DISPLAY LASTUSE DATE AND USECNT     *'    02915\n         DC    C'*                                                *'    02916\n         DC    C'**  ALL DASD ALLOCATED TO STEP WILL BE LISTED   **'    02917\n         DC    C'**   EXCEPT SYSTEM DD''S...SYS--, STEP--, ETC.   **'   02918\n         DC    C'*******  DO NOT USE A DDNAME OF \"SYS000\"  ********'    02919\nPRTINFND EQU   *                                                   JM#1 02920\nPRTINFLN EQU   (PRTINFND-PRTINFOL)/50                              JM#1 02921\n         EJECT                                                          02922\n         SPACE 3                                                        02923\nPARMPARS SR    R0,R0                                                    02924\n         MVC   PARMBUF,=CL8' '                                          02925\n         LA    R4,PARMBUF                                               02926\n         SPACE 1                                                        02927\nPRMLOOK  CH    R3,=H'0'                                                 02928\n         BNHR  R14                                                      02929\n         CLI   0(R2),C' '                                               02930\n         BE    PRMIGNOR                                                 02931\n         CLI   0(R2),C','                                               02932\n         BE    PRMRETRN                                                 02933\n         CLI   0(R2),C'='                                               02934\n         BE    PRMRETRN                                                 02935\n         LTR   R0,R0                                                    02936\n         BM    PRMNOT#                                                  02937\n         TM    0(R2),X'F0'                                              02938\n         BNO   PRMNOT#                                                  02939\n         IC    R15,0(R2)                                                02940\n         N     R15,=F'15'                                               02941\n         CH    R15,=H'10'                                               02942\n         BNL   PRMNOT#                                                  02943\n         MH    R0,=H'10'                                                02944\n         AR    R0,R15                                                   02945\n         B     PRMSHIFT                                                 02946\n         SPACE 1                                                        02947\nPRMNOT#  LH    R0,=H'-1'                                                02948\nPRMSHIFT C     R4,=A(PARMBUF+L'PARMBUF)                                 02949\n         BNL   PRMIGNOR                                                 02950\n         MVC   0(1,R4),0(R2)                                            02951\n         LA    R4,1(R4)                                                 02952\nPRMIGNOR LA    R2,1(R2)                                                 02953\n         BCTR  R3,0                                                     02954\n         B     PRMLOOK                                                  02955\n         SPACE 1                                                        02956\nPRMRETRN LA    R2,1(R2)                                                 02957\n         BCTR  R3,0                                                     02958\n         BR    R14                                                      02959\n         EJECT ,                                                        02960\n         SPACE 3                                                        02961\nPARMS    DS    0H                                                       02962\n         DC    C'LINECNT ',AL1(LNCNTOPT),AL1(1),S(PARMSET)              02963\n         DC    C'NCP     ',AL1(NCPOPT),AL1(1),S(PARMSET)                02964\n         DC    C'MODEL   ',AL1(MODELOPT),AL1(1),S(PARMSET)              02965\n         DC    C'VOLS    ',AL1(VOLSOPT),AL1(1),S(PARMSET)               02966\n         DC    C'EMPTY   ',AL1(EMPTYOPT),AL1(0),S(PARMSET)              02967\n         DC    C'NOEMPTY ',AL1(255-EMPTYOPT),AL1(0),S(PARMSET)          02968\n         DC    C'DEBUG   ',AL1(DEBUGOPT),AL1(1),S(DEBUGON)              02969\n         DC    C'NODEBUG ',AL1(255-DEBUGOPT),AL1(1),S(DEBUGOFF)         02970\n         DC    C'DUMP    ',AL1(DUMPOPT),AL1(0),S(PARMSET)               02971\n         DC    C'NODUMP  ',AL1(255-DUMPOPT),AL1(0),S(PARMSET)           02972\n         DC    C'EXT     ',AL1(EXTNTOPT),AL1(0),S(PARMSET)              02973\n         DC    C'NOEXT   ',AL1(255-EXTNTOPT),AL1(0),S(PARMSET)          02974\n         DC    C'ISAM    ',AL1(ISAMOPT),AL1(1),S(PARMSET)               02975\n         DC    C'NOISAM  ',AL1(255-ISAMOPT),AL1(1),S(PARMSET)           02976\n         DC    C'JDATE   ',AL1(JDATEOPT),AL1(1),S(PARMSET)              02977\n         DC    C'NOJDATE ',AL1(255-JDATEOPT),AL1(1),S(PARMSET)          02978\n         DC    C'LSTDT   ',AL1(LSTDTOPT),AL1(0),S(PARMSET)              02979\n         DC    C'NOLSTDT ',AL1(255-LSTDTOPT),AL1(0),S(PARMSET)          02980\n         DC    C'MAP     ',AL1(MAPOPT),AL1(0),S(PARMSET)                02981\n         DC    C'NOMAP   ',AL1(255-MAPOPT),AL1(0),S(PARMSET)            02982\n         DC    C'PDS     ',AL1(PDSOPT),AL1(0),S(PDSON)                  02983\n         DC    C'NOPDS   ',AL1(255-PDSOPT),AL1(0),S(PARMSET)            02984\n         DC    C'RESET   ',AL1(RESETOPT),AL1(1),S(RESETON)              02985\n         DC    C'NORESET ',AL1(255-RESETOPT),AL1(1),S(RESETOFF)         02986\n         DC    C'SDUMP   ',AL1(SDUMPOPT),AL1(0),S(PARMSET)              02987\n         DC    C'NOSDUMP ',AL1(255-SDUMPOPT),AL1(0),S(PARMSET)          02988\nPARMBUF  DC    C'        ',AL1(0),AL1(0),S(PARMERR)                     02989\n         SPACE 1                                                        02990\nPARMVALS DS    XL2                                                      02991\n         EJECT ,                                                        02992\n         LTORG                                                          02993\n         SPACE 1                                                        02994\n         ORG   ,                                                        02995\n         EJECT                                                          02996\nUCB      DSECT                                                          02997\n         IEFUCBOB                                                       02998\n         EJECT                                                          02999\nTIOT     DSECT                                                          03000\n         IEFTIOT1                                                       03001\n         EJECT                                                          03002\n         SPACE 3                                                        03003\n         DCBD  DSORG=BS,DEVD=DA                                         03004\n         EJECT                                                          03005\n         SPACE 3                                                        03006\nDS1      DSECT                                                          03007\n         IECSDSL1 (1)                                                   03008\nDS1FDAD  DS    XL8                 FULL DA ADDRESS OF F1 DSCB           03009\nDS1F3PTR DS    A                   @ OF F3 DSCB, IF ANY                 03010\nDS1F1PTR DS    A                   @ OF NEXT F1 DSCB                    03011\nDS1LEN   EQU   *-DS1                                                    03012\n         SPACE 1                                                        03013\n         ORG   DS1SYSCD-1                                               03014\nDS1SECLV DS    XL1                                                      03015\n         ORG   DS1SYSCD+13                                              03016\nDS1LSTDT DS    XL3                                                      03017\nDS1USCNT DS    XL2                                                      03018\n         EJECT ,                                                        03019\n         SPACE 3                                                        03020\nDS2      DSECT                                                          03021\n         IECSDSL1 (2)                                                   03022\nDS2FDAD  DS    XL8                 FULL DA ADDRESS OF F2 DSCB           03023\nDS2F3PTR DS    A                   POINTER TO FMT3 DSCB, IF ANY         03024\nDS2LEN   EQU   *-DS2                                                    03025\n         EJECT                                                          03026\n         SPACE 3                                                        03027\nDS3      DSECT                                                          03028\n         IECSDSL1 (3)                                                   03029\nDS3FDAD  DS    XL8                 FULL DA ADDRESS OF F3 DSCB           03030\nDS3F2PTR DS    A                   POINTER TO FMT2 DSCB, IF ANY         03031\nDS3LEN   EQU   *-DS3                                                    03032\n         EJECT                                                          03033\n         SPACE 3                                                        03034\nDS4      DSECT                                                          03035\nDS4KEYID DS    XL44                                                     03036\n         IECSDSL1 (4)                                                   03037\nDS4FDAD  DS    XL8                                                      03038\nDS4LEN   EQU   *-DS4                                                    03039\n*                                                                       03040\n         ORG   DS4NOEXT+2                                               03041\nDS4SECLV DS    XL1                 PRIV LEVEL REQ. FOR VTOC ACCESS      03042\n         ORG   DS4DEVDB+9          VSAM OWNERSHIP BIT  X'80'            03043\nDS4VSAM  DS    XL1                 USED TO PREVENT MULTIPLE OWNERS      03044\n         EJECT                                                          03045\n         SPACE 3                                                        03046\nDS5      DSECT                                                          03047\n         IECSDSL1 (5)                                                   03048\nDS5FDAD  DS    XL8                                                      03049\nDS5F5PTR DS    A                   @ OF NEXT F5 DSCB, IF ANY            03050\nDS5LEN   EQU   *-DS5                                                    03051\n         EJECT                                                          03052\n         SPACE 3                                                        03053\nDS6      DSECT                                                          03054\n         IECSDSL1 (6)                                                   03055\nDS6FDAD  DS    XL8                                                      03056\nDS6F6PTR DS    A                                                        03057\nDS6LEN   EQU   *-DS6                                                    03058\n         EJECT                                                          03059\n         SPACE 3                                                        03060\nCOM      DSECT                                                          03061\n         IEZCOM                                                         03062\n         EJECT ,                                                        03063\n         SPACE 3                                                        03064\nCIB      DSECT                                                          03065\n         IEZCIB                                                         03066\n         EJECT                                                          03067\n         SPACE 1                                                        03068\nEXTENT   DSECT                                                          03069\nEXTPTR   DS    A                                                        03070\nEXTLCCHH DS    XL4                                                      03071\nEXTHCCHH DS    XL4                                                      03072\nEXTNOTRK DS    H                                                        03073\nEXTTYPE  DS    X                                                        03074\nEXTSEQNO DS    X                                                        03075\nEXTIDPTR DS    A                                                        03076\nEXTLOTT  DS    XL2                                                      03077\nEXTHITT  DS    XL2                                                      03078\nEXTNTLEN EQU   *-EXTENT                                                 03079\n         SPACE 1                                                        03080\nEXLINE   DSECT                                                          03081\nEXLLPARN DS    C                                                        03082\nEXLFCC   DS    CL4                                                      03083\nEXLFPRD  DS    C                                                        03084\nEXLFHH   DS    CL4                                                      03085\n         DS    2C                                                       03086\nEXLLCC   DS    CL4                                                      03087\nEXLLPRD  DS    C                                                        03088\nEXLLHH   DS    CL4                                                      03089\n         DS    2C                                                       03090\nEXLFTT   DS    CL5                                                      03091\n         DS    2C                                                       03092\nEXLLTT   DS    CL5                                                      03093\n         DS    2C                                                       03094\nEXLNOTRK DS    CL5                                                      03095\nEXLRPARN DS    C                                                        03096\n         DS    C                                                        03097\nEXLSEQNO DS    CL2                                                      03098\n         DS    2C                                                       03099\nEXLTYPE  DS    CL4                                                      03100\n         DS    2C                                                       03101\nEXLDSNAM DS    CL44                                                     03102\nEXLSPLIT EQU   EXLDSNAM+33                                              03103\n         SPACE 1                                                        03104\nPDS      DSECT                                                          03105\nPDSHKEY  DS    CL8                                                      03106\nPDSCOUNT DS    H                                                        03107\n         SPACE 1                                                        03108\nPDSENTRY EQU   *                                                        03109\nPDSNAME  DS    CL8                                                      03110\nPDSTTRP  DS    XL3                                                      03111\nPDSINDIC DS    B                                                        03112\nPDSALIAS EQU   X'80'                                                    03113\nPDS#TTRS EQU   X'60'                                                    03114\nPDSUSERH EQU   X'1F'                                                    03115\nPDSUSERD DS    0X                                                       03116\n         SPACE 3                                                        03117\n         END   DISKMAP            BROTHER, YOU ASKED FOR IT             03118\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DTYP2UNT": {"ttr": 2570, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x00\\x82\\x00\\x82\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 130, "newlines": 130, "modlines": 0, "user": "WSRCC"}, "text": "         TITLE 'W.S.R.C.C.  <DTYP2UNT>  CONVERT UCB-TYPE HEX DEVICE COD*\n               E TO UNIT NAME - JOHN A SHELL'\n*---------------------------------------------------------------------*\n*                                                                     *\n*                             <DTYP2UNT>                              *\n*                                                                     *\n*             CONVERT UCB-TYPE HEX DEVICE CODE SUBROUTINE             *\n*                                                                     *\n*                                                                     *\n*      MANY SYSTEM UTILITIES HAVE NEED OF THE ABILITY TO CONVERT      *\n*      A UCB-TYPE HEX DEVICE CODE INTO A VALID UNIT NAME. THIS        *\n*      USUALLY MEANT HARD-CODING A TABLE OF YOUR SYSTEM'S DEVICES     *\n*      INTO EACH PROGRAM. THEN, AS NEW DEVICE TYPES WERE ADDED        *\n*      TO YOUR SYSTEM, YOU ALWAYS HAD MULTIPLE UPDATES TO MAKE.       *\n*      ALL OF THE NECESSARY INFORMATION, HOWEVER, IS CURRENTLY        *\n*      AVAILABLE TO YOU IN THE SYSTEM DEVICE NAME TABLE <DEVNAMET>.   *\n*      <DTYP2UNT> SUBROUTINE WILL NOW MAKE THIS CONVERSION FOR YOU!   *\n*                                                                     *\n*      TO INVOKE <DTYP2UNT> FROM AN ASSEMBLER PROGRAM, JUST CODE...   *\n*                                                                     *\n*        CALL  DTYP2UNT,(UCBTYP,UNITNAME),VL                          *\n*                                                                     *\n*        WHERE...                                                     *\n*                                                                     *\n*              UCBTYP      REPRESENTS A FOUR BYTE FIELD CONTAINING    *\n*                          THE HEXIDECIMAL UCB-TYPE DEVICE CODE.      *\n*                                                                     *\n*              UNITNAME    IS AN EIGHT BYTE FIELD TO RECEIVE THE      *\n*                          RESULTANT UNIT NAME. MOST OF THE TIME IT   *\n*                          WILL BE A DEVICE-TYPE (3330, 2400-3), BUT, *\n*                          ON OCCASION, IT WILL RETURN A GROUP-NAME   *\n*                          (SYSDA, TAPE9TRK). IF NO MATCHING ENTRY    *\n*                          IS FOUND IN THE SYSTEM DEVICE NAME TABLE,  *\n*                          ALL ASTERISKS WILL BE RETURNED.            *\n*                                                                     *\n*      ABNORMAL COMPLETION CODES                                      *\n*                                                                     *\n*        U008  MORE OR LESS THAN THE REQUIRED 2 PARAMETERS WAS        *\n*              PROVIDED.                                              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*              W A R N I N G ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !        *\n*                                                                     *\n*        I HAVE BEEN TOLD THAT THE DEVICE NAME TABLE <DEVNAMET>       *\n*        WILL CEASE TO EXIST WITH MVS/XA. IF THIS TRUE, I HAVE        *\n*        NO IDEA IF THERE WILL BE AN EQUIVALENT FUNCTION/MODULE       *\n*        TO RELACE IT.                                                *\n*                                  JOHN A SHELL                       *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nDTYP2UNT CSECT\nR0       EQU   0                   *************\nR1       EQU   1                   *           *\nR2       EQU   2                   * REGISTERS *\nR3       EQU   3                   *    ARE    *\nR4       EQU   4                   *  EQUATED  *\nR5       EQU   5                   *    TO     *\nR6       EQU   6                   *  SYMBOLS  *\nR7       EQU   7                   *    SO     *\nR8       EQU   8                   *   THEY    *\nR9       EQU   9                   *   WILL    *\nR10      EQU   10                  *   SHOW    *\nR11      EQU   11                  *    ON     *\nR12      EQU   12                  *   CROSS   *\nR13      EQU   13                  * REFERENCE *\nR14      EQU   14                  *           *\nR15      EQU   15                  *************\n         USING *,R15               INITIALLY USE ENTRY AS BASE REGISTER\n         B     $BG0001             BRANCH AROUND CONSTANTS\n         DC    CL8'DTYP2UNT'       CSECT ID\n         DC    C'_',C'&SYSDATE.@&SYSTIME._' SYSTEM DATE AND TIME\n$BG0001A DS    18F                 MY REGISTER SAVE AREA\n$BG0001  DS    0H\n         STM   R14,R12,12(R13)     SAVE CLG PGMS REGS\n         LA    R3,$BG0001A         LOAD ADDR OF MY REG SAVE AREA\n         ST    R13,4(R3)           STORE ADDR OF CLG SAVE IN MINE\n         ST    R3,8(R13)           STORE ADDR OF MY SAVE IN CLG PGM\n         LR    R13,R3              POINT REG 13 AT MY SAVE AREA\n         DROP  R15                 DROP INITIAL BASE REGISTER\n         USING $BG0001A,R13\n         LM    R3,R4,0(R1)         LOAD PARAMETER ADDRESS LIST\n         LTR   R3,R3               ONLY ONE ADDRESS...\n         BM    BADLIST                ..YES, BAD LIST (2 REQUIRED)\n         LTR   R4,R4               TWO ADDRESSES...\n         BM    LISTOK                 ..YES, LIST OK, GO ON\nBADLIST  EQU   *\n         ABEND 8                   TERMINATE ABNORMALLY\n*\nLISTOK   EQU   *\n         SR    R9,R9               ZERO RETURN CODE\nSW1T     DS    0H\n         NOP   LOOKUP              NOP/BRANCH AFTER 1ST TIME\n         OI    SW1T+1,X'F0'        RESET NOP TO BRANCH\n         LOAD  EPLOC=DEVNAMET      LOAD/FIND DEVICE NAME TABLE\n         ST    R0,DNTBLADR         SAVE TABLE ADDR IN CORE\nLOOKUP   EQU   *\n         L     R5,DNTBLADR         LOAD TABLE ADDRESS AND\n         L     R6,0(R5)                 NBR OF ENTRIES IN TABLE\n         LA    R5,4(R5)            POINT AT 1ST ENTRY\nDVNLOOP  EQU   *\n         CLC   0(4,R3),8(R5)       DOES DEVTYPE = TABLE...\n         BE    HIT                    ..YES, GO RETURN UNIT NAME\n         LA    R5,12(R5)              ..NO, INCREMENT TABLE POINTER AND\n         BCT   R6,DVNLOOP                   TRY NEXT ENTRY (IF ANY)\nMISS     EQU   *\n         MVC   0(8,R4),=C'********' NO MORE, INSERT ASTERISKS AND\n         LA    R9,4                          SET NON-ZERO RETURN CODE\n         B     WRAPUP              RETURN TO CALLING PROGRAM\n*\nHIT      EQU   *\n         MVC   0(8,R4),0(R5)       RETURN UNIT NAME TO CALLING PROGRAM\nWRAPUP   EQU   *\n*        FINISH RC=(9)\n         LR    R15,R9              LOAD RETURN CODE FROM REGISTER\n         L     R13,4(R13)          RESTORE POINTER TO CALLING PGM SAVE\n         L     R14,12(R13)         LOAD RETURN ADDRESS\n         LM    R0,R12,20(R13)      RESTORE REGS 0 THRU 12\n         BR    R14                 RETURN TO CALLING PROGRAM\n*\nDNTBLADR DS    F                   ADDRESS OF SYSTEM DEVICE NAME TABLE\n*\nDEVNAMET DC    CL8'DEVNAMET'       SYSTEM DEVICE NAME TABLE\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYNAM": {"ttr": 2819, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x04\\x91\\x04\\x91\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 1169, "newlines": 1169, "modlines": 0, "user": "WSRCC"}, "text": "         TITLE 'DYNAMIC ALLOCATION INTERFACE'\n*\n*   CREATE A VERB TABLE ENTRY\n*\n         MACRO\n         VENT  &VERB,&NUMBER\n         LCLA  &LABEL\n&LABEL   SETA  &SYSNDX\n         DC    AL1(L'#&LABEL)\n         DC    AL1(&NUMBER)\n#&LABEL  DC    C'&VERB'\n         MEND\n         SPACE 3\n*\n*   CREATE A KEYWORD TABLE ENTRY\n*   &KEYWORD  - THE DYNAM KEYWORD\n*   &UAL      - THE DYNAM KEYWORD UNAMBIGOUS LENGTH\n*   &KEY      - THE SVC99 TEXT UNIT KEY\n*   &PARM     - THE SVC99 TEXT UNIT PARM\n*   &PARMLEN  - THE SVC99 TEXT UNIT PARM LENGTH\n*\n         MACRO\n         KENT  &KEYWORD,&UAL,&KEY,&PARM,&PARMLEN\n         GBLA  &OFFSET\n         LCLA  &LABEL\n         LCLC  &LEN\n&LEN     SETC  '0'\n&LABEL   SETA  &SYSNDX\n         DC    AL1(L'#&LABEL)\n         DC    X'&UAL'\n         AIF   (T'&PARM EQ 'O').NOPARM\n         AIF   ('&PARM' NE 'SUBTABLE').KENT003\n         DC    AL1(&OFFSET+240)\n&OFFSET  SETA  &OFFSET+1\n&LEN     SETC  '1'\n         AGO   .KENT001\n.KENT003 ANOP\n         DC    X'&PARM'\n&LEN     SETC  '1'\n         AGO   .KENT001\n.NOPARM  ANOP\n         DC    AL1(0)\n.KENT001 ANOP\n         AIF   (T'&PARMLEN EQ 'O').KENT002\n&LEN     SETC  '&PARMLEN'\n.KENT002 ANOP\n         DC    AL1(&LEN)\n         DC    AL2(&KEY)\n#&LABEL  DC    C'&KEYWORD'\n         MEND\n         EJECT\n*\n*   CREATE A KEYWORD HASH TABLE ENTRY\n*\n         MACRO\n         BEGIN &CHAR\nBEGIN&CHAR DS  0X\n         MEND\n         SPACE 3\n*\n*   CREATE THE KEYWORD TABLE HASH INDEX\n*\n         MACRO\n         INDEX\nKYWDINDX DS    0F                 ALIGN ON FULLWORD BOUNDARY\n         DC    A(BEGINA)\n         DC    A(BEGINB)\n         DC    A(BEGINC)\n         DC    A(BEGIND)\n         DC    A(BEGINE)\n         DC    A(BEGINF)\n         DC    A(BEGING)\n         DC    A(BEGINH)\n         DC    A(BEGINI)\n         DC    7A(0)\n         DC    A(BEGINJ)\n         DC    A(BEGINK)\n         DC    A(BEGINL)\n         DC    A(BEGINM)\n         DC    A(BEGINN)\n         DC    A(BEGINO)\n         DC    A(BEGINP)\n         DC    A(BEGINQ)\n         DC    A(BEGINR)\n         DC    8A(0)\n         DC    A(BEGINS)\n         DC    A(BEGINT)\n         DC    A(BEGINU)\n         DC    A(BEGINV)\n         DC    A(BEGINW)\n         DC    A(BEGINX)\n         DC    A(BEGINY)\n         DC    A(BEGINZ)\n         MEND\n         EJECT\n*\n*   BEGIN A NEW SUBTABLE\n*   SET COUNT OF # OF ENTRIES FOR PREVIOUS SUBTABLE\n*   REMEMBER ENTRY POINT\n*\n         MACRO\n         BEGINSUB                 &SUBNAME\n         GBLC  &SUBLIST(30)       LIST OF SUBTABLE ENTRIES\n         GBLA  &SUBCT(30)         LIST OF SUBTABLE ENTRY COUNTS\n         GBLA  &SUBINDX           CURRENT SUBTABLE\n         GBLA  &SUBSENT           # ENTRIES IN CURRENT SUBTABLE\n         AIF   (&SUBINDX EQ 0).SUB0001 FIRST INVOCATION\n&SUBCT(&SUBINDX) SETA &SUBSENT\n&SUBSENT SETA  0\n.SUB0001 ANOP\n&SUBINDX SETA  &SUBINDX+1\n&SUBLIST(&SUBINDX) SETC '&SUBNAME'\n&SUBNAME DS    0X\n         MEND\n         SPACE 3\n*\n*   ADD LAST SUBTABLE DEFINITION TO SUBTABLE LIST\n*\n         MACRO\n         ENDSUB\n         GBLA  &SUBCT(30)\n         GBLA  &SUBINDX\n         GBLA  &SUBSENT\n&SUBCT(&SUBINDX) SETA &SUBSENT\n         MEND\n         EJECT\n*\n*       GENERATE THE INDEX FOR ALL SUBTABLES\n*\n         MACRO\n&LABEL   SUBINDEX\n         GBLC  &SUBLIST(30)\n         GBLA  &SUBCT(30)\n         GBLA  &SUBINDX\n         LCLA  &X\n         AIF   (&SUBINDX LE 15).NOERR\n         MNOTE 16,'ONLY 16 SUBTABLES PERMITTED'\n.NOERR   ANOP\n&LABEL   DS    0F\n.LOOP    ANOP\n         AIF   (&X EQ &SUBINDX).#1\n&X       SETA  &X+1\n         DC    AL1(&SUBCT(&X)),AL3(&SUBLIST(&X))\n         AGO   .LOOP\n.#1      ANOP\n         MEND\n         SPACE 3\n*\n*   BUILD AN ENTRY IN A SUBTABLE\n*\n         MACRO\n         SENT  &KEY,&VALUE\n         GBLA  &SUBSENT\n         LCLA  &LABEL\n&SUBSENT SETA  &SUBSENT+1\n&LABEL   SETA  &SYSNDX\n         DC    AL1(L'#&LABEL)\n         DC    XL2'&VALUE'\n#&LABEL  DC    C'&KEY'\n         MEND\n         EJECT\n*\n*   BUILD A TABLE USED TO BUILD A DICB\n*\n         MACRO\n&LABEL   DICBTAB1\n&LABEL   DS    0H\n         DC    X'000400010008',XL8'00' DDNAME\n         DC    X'00050001002C',XL44'00' DSNAME\n         DC    X'000600010008',XL8'00' MEMBER NAME\n         DC    X'000700010001',X'00' STATUS\n         DC    X'000800010001',X'00' DISPOSITION\n         DC    X'000900010001',X'00'  CONDITIONAL DISPOSITION\n         DC    X'000A00010002',XL2'00' DSORG\n         DC    X'000B00010002',XL2'00' LIMIT SPECIFICATION\n         DC    X'000C00010001',X'00' ATTRIBUTE SPECIFICATION\n         DC    X'000D00010001',X'00' LAST ENTRY SPECIFICATION\n         DC    X'000E00010001',X'00' DATA SET TYPE\n         MEND\n         MACRO\n&LABEL   DICBTAB2\n&LABEL   DS    0H\n         DC    X'005500010008',XL8'00' DDNAME\n         DC    X'00560001002C',XL44'00' DSNAME\n         DC    X'005700010002',XL2'00' DSORG\n         DC    X'005D00010006',XL6'00' VOLSER\n         MEND\n         EJECT\n***********************************************************************\n*\n*   THIS ROUTINE PROVIDES AN INTERFACE BETWEEN A HIGH LEVEL\n*   LANGUAGE SUCH AS FORTRAN, PL/1 OR COBOL, AND THE OPERATING\n*   SYSTEM DYNAMIC ALLOCATION ROUTINES.\n*\n*   INSTALLATION: UNIVERSITY OF MANITOBA COMPUTER CENTRE\n*   AUTHOR:       GERRY DUECK\n*   DATE WRITTEN: SUMMER 1978\n*   MODS:         ADDITION OF ALLOCR VERB.\n*                 LOTS OF MUCKING ABOUT TO MAKE THIS PROGRAM\n*                 CONSISTENT WITH ITS DOCUMENATION.\n*                   ROD ZAZUBEK FEB 1979\n*   DOCUMENTATION: COMPLETE DOCUMENTATION ON THE USE OF DYNAM IS\n*                  AVAILABLE IN SYS4.DOCUMENT.TEXT(DYNAM)\n*   ATTRIBUTES:   RENT\n*   HINTS:        PUT THIS PROGRAM SOMEWHERE IN THE LINK LIST.\n*\n*   PARAMETERS\n*      1 - WORK AREA. THE FIRST WORD OF THIS WORK AREA MUST CONTAIN\n*          THE LENGTH OF THE AREA. A MINIMUM OF 100 BYTES IS REQUIRED.\n*          IF THE LENGTH IS ZERO, AND 'INIT' IS NOT SPECIFIED (SEE\n*          PARM 2) THEN A WORK AREA IS OBTAINED AND USED FOR THIS\n*          CALL ONLY. THE WORKAREA IS FREED BEFORE RETURNING TO THE\n*          CALLER.\n*      2 - REQUEST VERB. THIS FIELD IS DELIMITED BY A BLANK.\n*          IF THE REQUEST VERB IS 'INIT' THEN ALL THIS CALL\n*          DOES IS TO ALLOCATE A WORK AREA FOR SUBSEQUENT\n*          CALLS. IF THE VERB IS 'END' THEN THIS WORK AREA\n*          IS FREED.\n*      3 AND SUBSEQUENT PARAMETERS.\n*        - CHARACTER STRINGS CONSISTING OF KEYWORD/VALUE PAIRS\n*          SEPARATED BY '=' AND DELIMITED BY ' ', ';'.\n*          END OF STRING IS DETERMINED BY ';'\n*          END OF LIST IS INDICATED BY THE HIGH ORDER BIT OF\n*          THE PARAMETER ADDRESS.\n*      AT LEAST 3 PARAMETERS ARE ASSUMED FOR ALL VERBS OTHER THAN\n*      'INIT' AND 'END'\n*\n*   WORK AREA.\n*      THE WORK AREA CONTAINS 5 SECTIONS:\n*         - WORK AREA CONTROL BLOCK.\n*         - DAIRFAIL PARAMETER LIST.\n*         - DYNAMIC ALLOCATION REQUEST BLOCK.\n*         - TEXT UNITS.\n*         - TEXT POINTERS.\n*      THE TEXT POINTERS ARE STACKED AT THE BOTTOM OF THE WORK AREA.\n*      THE TEXT UNITS ARE HEAPED AFTER THE REQUEST BLOCK.\n*\n*  ENTRY OPTIONS:\n*     IF VERB = 'INIT' THEN\n*        GET WORK AREA\n*        PLACE ADDRESS IN PARM 1\n*        SET FIRST BYTE OF PARM 1 TO X'0F' TO INDICATE\n*           THAT THIS IS A GETMAINED AREA\n*        RETURN\n*     ELSE IF VERB = 'END' THEN\n*        FREE THE AREA POINTED TO BY PARM ONE\n*        RETURN\n*     ELSE IF PARM 1 = 0 THEN\n*        GETMAIN AREA\n*        PERFORM ALLOCATION\n*        FREMAIN AREA\n*        RETURN\n*     ELSE IF HIGH ORDER BYTE OF PARM 1 IS X'0F' THEN\n*        DEREFENCE WORK AREA POINTER\n*        PERFORM COMMAND\n*     ELSE\n*        PERFORM COMMAND USING USER SUPPLIED WORK AREA\n*\n*   THREE TABLES ARE USED TO BUILD TEXT UNITS FOR SVC99.\n*\n*   VERB TABLE:\n*      THERE ARE ONLY 7 VERBS USED BY SVC99, AND SINCE SOME OF\n*      THESE ARE INFORMATION VERBS (IE THEY RETURN INFO) THEY ARE\n*      NOT SUPPORTED BY THIS INTERFACE SINCE THERE IS NO TRIVIAL\n*      MEANS OF RETURNING INFORMATION TO THE CALLER. THE VERB MUST\n*      BE AT LEAST AS LONG AS THE LENGTH SPECIFIED IN ITS CORRESONDING\n*      TABLE ENTRY. ACCESS TO THIS TABLE IS BY LINEAR SEARCH AND THE\n*      RESULT IS A ONE BYTE FIELD CONTAINING THE VERB CODE. TABLE\n*      ENTRIES ARE OF VARIABLE LENGTH WITH THE FIRST BYTE CONTAINING\n*      THE LENGTH OF THE VARIABLE PART. THE LENGTH OVERHEAD IS 2.\n*\n*   KEYWORD TABLE:\n*      THE KEYWORD TABLE IS VERY LONG, AND THE ENTRIES ARE VARIABLE\n*      LENGTH SO A BINARY SEARCH IS OUT OF THE QUESTION (UNLESS YOU\n*      HAD A TAG POINTING TO EACH TABLE ENTRY -- HMMMMM...) AND A\n*      LINEAR SEARCH IS TOO SLOW. A PRIMITIVE HASH TABLE IS USED\n*      IN WHICH THERE IS AN ENTRY FOR EVERY LETTER AND A POINTER\n*      TO THE FIRST KEYWORD TABLE ENTRY WHOSE KEYWORD STARTS WITH\n*      THAT LETTER. THE KEYWORD TABLE IS SORTED ALPHABETICALLY\n*      AND THE HASH TABLE IS BUILT BY INSERTING A BEGIN MACRO\n*      EVERY TIME A CHANGE IN FIRST LETTER OCCURS. WHEN PERFORMING\n*      A SEARCH ON THIS TABLE, COMPARISONS ARE MADE TO THE LENGTH\n*      OF THE KEYWORD SPECIFIED BY THE USER. WHEN A MATCH IS FOUND,\n*      THE LENGTH OF THE KEYWORD IS COMPARED TO THE MINIMUM LENGTH\n*      SPECIFIED IN THE TABLE ENTRY. IT MUST BE AT LEAST THIS LONG\n*      IN ORDER TO BE UNAMBIGOUS.\n*\n*   KEYWORD SUBTABLE:\n*     SOME OF THE ENTRIES IN THE KEYWORD TABLE REQUIRE MORE INFORMATION\n*      AND FOR THESE A POINTER TO A SUBTABLE IS SUPPLIED. THIS POINTER\n*      IS AN INDEX INTO ANOTHER TABLE MUCH LIKE THE HASH TABLE AND IS\n*      ONLY ONE BYTE, SO ONLY 16 SUBTABLES CAN OCCUR.\n*\n*   BUILDING A TEXT UNIT:\n*      AFTER FINDING THE KEYWORD IN THE KEYWORD TABLE, A VARIETY\n*      OF EVENTS CAN OCCUR. THIS IS BECAUSE IBM IN ITS INFINITE\n*      WISDOM CANNOT DECIDE ON A SIMPLE STRUCTURE FOR TEXT UNITS.\n*      SOME HAVE PARAMETERS THAT ARE PLI TYPE CHAR VAR, SOME ARE\n*      VARIABLE LENGTH BINARY VALUES, SOME HAVE NO PARAMETERS, ETC.\n*      THE FOLLOWING ALGORITHM IS USED TO BUILD THE TEXT UNIT:\n*\n*      IF THE USER SUPPLIED A PARM THEN\n*         IF A NON ZERO LENGTH IS SPECIFIED IN THE KEYWORD TABLE THEN\n*            CREATE A TEXT UNIT WITH A VARIABLE LENGTH BINARY VALUE\n*         ELSE\n*            CREATE A TEXT UNIT WITH A VARIABLE LENGTH STRING VALUE\n*      ELIF THE PARM VALUE SUPPLIED IN THE KEYWORD TABLE IS >= X'F0'\n*         CREATE A TEXT UNIT USING THE LENGTH AND VALUE SUPPLIED\n*         IN THE SUBTABLE ENTRY CORRESSPONDING TO THE USER SUPPLIED\n*         VALUE\n*      ELSE\n*         CREATE A TEXT UNIT USING A LENGTH OF 1 AND THE VALUE\n*         SUPPLIED IN THE KEYWORD TABLE\n*\n*      THIS ALGORITHM WORKS WELL ENOUGH EXCEPT FOR TWO KLUGES:\n*      CONCATENATION AND MULTI-VALUED KEYWORDS SUCH AS RECFM.\n*\n*      FOR CONCATENATION, THE TEXT UNIT MUST CONTAIN A VARIABLE\n*      NUMBER OF VARIABLE LENGTH CHARACTER STRINGS SHOVED TOGETHER.\n*      IF A ',' OCCURS AFTER A VALUE,THEN THE NEXT VALUE IS SCANNED AND\n*      CONCATENATED TO THE CURRENT ONE. THIS ASSUMES THAT THE TEXT UNIT\n*      IS ONE FOR WHICH CONCATENATED STRINGS ARE REQUIRED. IT IS UP TO\n*      THE USER TO SUPPLY CORRECT DATA.\n*\n*      FOR THE SPECIAL KEYWORDS RECFM AND OPTCD, EACH LETTER OF THE\n*      VALUE IS INDIVIDUALLY LOOKED UP IN THE SUBTABLE AND THE VALUE\n*      THUS OBTAINED IS OR'ED WITH THE VALUE ALREADY IN THE TEXT UNIT.\n*      IE RECFM=FBA = X'80' | X'10' | X'04' = X'94'\n*\n*   RETURN CODES AND DIAGNOSTICS:\n*      IF THE RETURN CODE FROM SVC99 IS NOT ZERO THEN A PARAMETER\n*      BLOCK FOR DAIRFAIL IS BUILT. DAIRFAIL IS CALLED AND THE\n*      DIAGNOSTIC THAT IT GENERATES IS WRITTEN TO THE JOB LOG (WTP).\n*\n*      THE INTERFACE ALSO HAS ITS OWN RETURNS CODES FOR ERRORS IS\n*      DETECTS IN THE USERS PARAMETER LIST. THESE START AT 4 HIGHER\n*      THAN THE RETURN CODES FROM SVC99.\n*\n*      THE RETURN CODE IS RETURNED BOTH IN REGISTER 15 AND IN THE\n*      SECOND WORD OF THE WORKAREA, IF IT STILL EXISTS AT THE END\n*      OF THE ROUTINE.\n*\n*   SVC99 RETURN CODES (SEE SPL:JOB MANAGEMENT PAGE 34)\n*      00 SUCCESSFULL COMPLETION\n*      04 ENVIRONMENT, RESOURCE FAILURE, SYSTEM ROUTINE\n*      08 REQUEST DENIED BY INSTALLATION VALIDATION ROUTINE\n*      12 INVALID PARAMETER LIST\n*\n*   INTERFACE RETURN CODES\n*      16 INVALID VERB\n*      20 INVALID KEYWORD\n*      24 WORK AREA OVERFLOW\n*      28 VALUE NOT FOUND IN SUBTABLE: INVALID VALUE\n*\n***********************************************************************\n         EJECT\nWORKAREA DSECT\nWALEN    DS    F                  LENGTH OF WORK AREA\nWAS99RC  DS    A                  VALUE OF RETURN CODE FROM SVC 99\nWADWORD  DS    D                  DOUBLE WORD FOR PACKS\nWABOTTOM DS    A                  END OF WORK AREA\nWAKYSTRT DS    A                  START OF KEYWORD\nWAVALAD  DS    A                  START OF VALUE\nWAVBSTRT DS    A                  START OF VERB\nWAS99RB  DS    A                  POINTER TO REQUEST BLOCK\nWADFID   DS    XL2                CALLER IDENTIFIER FOR DAIR FAIL\nWADFDSCT DS    A                  ADDR OF DSECT FOR CALLING DAIR FAIL\nWAZEROES DS    A                  ADDRESS OF IKJEFF02\nWALASTTU DS    A                  ADDRESS OF END OF LAST TEXT UNIT\nWAALLOCR DS    XL1                IS THIS AN ALLOCR VERB\nWATRUE   EQU   X'FF'\nWASAVE   DS    18F                SAVE AREA FOR DAIRFAIL\nWAEND    EQU   *                  END OF DSECT\n         SPACE 1\nVERBTABL DSECT\nVTVLEN   DS    X                  LENGTH OF VERB\nVTVERB   DS    X                  VERB CODE\nVTVSTR   DS    0C                 VERB STRING\nVTVEND   EQU   *\n         SPACE 1\nKYWDTABL DSECT\nKYWDLEN  DS    X                  KEYWORD LENGTH\nKYWDMIN  DS    X                  MINIMUM UNAMBIGOUS LENGTH\nKYWDPARM DS    X                  SPECIAL PARAMETER\nKYNOPARM EQU   X'00'              FLAGS NO PARM\nKYWDPMLN DS    X                  LENGTH OF PARM IF FIXED LENGTH\nKYWDKEY  DS    2X                 KEYWORD KEY\nKYWDSTRG DS    0C                 KEYWORD STRING\n         ORG   KYWDPARM\nKYWDSUBT DS    X                  FLAG A SUBTABLE FOR THIS ENTRY\nKYWDSUBF EQU   X'F0'              FLAGS A SUBTABLE\n         ORG\n         SPACE 1\nVALUTABL DSECT\nVALULEN  DS    X                  LENGTH OF STRING IN THIS ENTRY\nVALUPARM DS    2X                 PARAMETER VALUE FOR TEXT UNIT\nVALUSTRG DS    0C                 ENTRY STRING\n         SPACE 1\nCHAR     DSECT\nCH       DS    C\n         EJECT\nDICB1    DSECT\nDIDDN    DS    XL14               DDNAME\nDIDSN    DS    XL50               DSNAME\nDIMEM    DS    XL14               MEMBER NAME\nDISTAT   DS    XL7                STATUS\nDIDISP   DS    XL7                NORMAL DISPOSITION\nDICDISP  DS    XL7                CONDITIONAL DISPOSITION\nDIDSORG  DS    XL8                DSORG\nDILIMIT  DS    XL8                NUMBER RESOURCES TO BE FREED\nDIATTR   DS    XL7                ATTRIBUTE SPECIFICATION\nDILAST   DS    XL7                LAST ENTRY SPECIFICATION\nDITYPE   DS    XL7                DATA SET TYPE (DUMMY,TERMINAL,OTHER)\nDILEN1   EQU   *-DICB1\nDICB2    DSECT\nDIDDN2   DS    XL14\nDIDSN2   DS    XL50\nDIDSORG2 DS    XL8\nDIVOL2   DS    XL12\nDILEN2   EQU   *-DICB2\n         EJECT\n         IEFZB4D0\n         EJECT\n         IEFZB4D2\n         EJECT\n         IKJEFFDF DFDSECT=YES\n         EJECT\n@WA      EQU   11                 BASE ADDRESS FOR WORK AREA\n@RB      EQU   10                 BASE ADDRESS FOR REQUEST BLOCK\n@TP      EQU   9                  BASE ADDRESS FOR TEXT POINTERS\n@TU      EQU   8                  TEXT UNIT\n@CH      EQU   7                  POINTER INTO PARM STRING\n@VTE     EQU   6                  VERB TABLE ENTRY\n@KTE     EQU   6                  KEYWORD TABLE ENTRY\nLENGTH   EQU   5\n@DF      EQU   5                  BASE ADDRESS FOR DFDSECT\n         SPACE 1\nDYNAM    CSECT\n         USING DYNAM,12           ADDRESSIBILITY FOR CSECT\n         SAVE  (14,12),,DYNAM-MARCH-22-1979\n         LR    R12,R15            GET BASE FOR CSECT\n         SPACE 1\n         USING WORKAREA,@WA       ADDRESSIBILITY FOR WORK AREA\n         USING S99RB,@RB          ADDRESSIBILITY FOR REQUEST BLOCK\n         USING S99TUPL,@TP        ADDRESSIBILITY FOR TEXT POINTERS\n         USING S99TUNIT,@TU       ADDRESSIBILITY FOR TEXT UNITS\n         USING CHAR,@CH\n         USING VERBTABL,@VTE      ADDRESSIBILITY FOR VERB TABLE\n         USING DFDSECTD,@DF       ADDRESSIBILITY FOR DAIRFAIL DSECT\n         SPACE 1\n*\n**   DECODE ENTRY OPTIONS\n*\n         L     R2,4(R1)           ADDRESS OF VERB\n         CLC   0(4,R2),=C'INIT'\n         BE    INITCODE\n         CLC   0(3,R2),=C'END'\n         BE    ENDCODE\n         L     @WA,0(R1)          ADDRESS OF WORK AREA\n         OC    WALEN,WALEN        IS IT 0?\n         BNZ   WORKGOT            NOPE\n         LR    R2,R1              SAVE R1\n         GETMAIN R,LV=2048\n         L     R3,0(R2)           ADDR OF PARM 1\n         ST    R1,0(R3)           SAVE ADDRESS\n         MVI   0(R3),X'0E'        MARK TO BE FREED AFTER ALLOCATE\n         L     @WA,0(R3)          GET ADDRESS\n         LA    R3,2048            LENGTH OF WORKAREA\n         ST    R3,WALEN           SET LENGTH\n         LR    R1,R2              RESTORE R1\n         B     WORKSET\nWORKGOT  CLI   WALEN,X'0F'        IS THIS THE ADDRESS OF A WORK AREA?\n         BNE   WORKSET            NOPE, USER SUPPLIED AREA\n         L     @WA,WALEN          YES, DEREFENCE IT\nWORKSET  DS    0H\n*\n**   SET UP WORK AREA\n*\n         L     @TP,WALEN          GET LENGTH\n         LR    R2,@WA             ADDRESS OF WORK AREA\n         LR    R3,@TP             LENGTH\n         LR    R4,R2              FROM ADDR FOR ZAP\n         XR    R5,R5\n         MVCL  R2,R4              ZAP WORK AREA\n         LR    R15,R13            ADDR OF CALLERS SAVE\n         LA    R13,WASAVE\n         ST    R13,8(R15)         FORE LINK\n         ST    R15,4(R13)         BACK LINK\n         ST    @TP,WALEN\n         AR    @TP,@WA            + ADDRESS = END OF WORK AREA\n         ST    @TP,WABOTTOM\n         LA    @RB,WAEND          BEGINNING OF REQUEST BLOCK\n         ST    @RB,WADFDSCT       ADDRESS OF DFDSECTD\n         LA    @RB,DFLEN(@RB)     POINT PAST DFDSECTD\n         ST    @RB,WAS99RB        ADDRESS OF REQUEST BLOCK\n         LA    @TU,S99RBEND       BEGINNING OF TEXT UNIT HEAP\n         MVI   S99RBLN,X'14'      LENGTH OF RB\n*\n**  EXAMINE THE VERB PARAMETER\n*\n         L     @CH,4(R1)          GET SECOND PARM\n         LA    @VTE,VERBTAB       FIRST ENTRY IN VERB TABLE\n         SR    R2,R2\nVERBLOOP DS    0H\n         C     @VTE,VERBTEND      END OF TABLE?\n         BE    FAILVERB           YES, VERB NOT FOUND\n         IC    R2,VTVLEN          GET LENGTH OF VERB\n         BCTR  R2,0               LESS 1\n         EX    R2,VERBCLC         MATCH?\n         BE    VERBPOOL           YES\n         LA    @VTE,VTVSTR+1(R2)  GET NEXT ENTRY\n         B     VERBLOOP\nVERBCLC  CLC   VTVSTR,CH\nVERBPOOL DS    0H\n         CLC   CH(6),=C'ALLOCR'   VERB = ALLOCR?\n         BNE   VERBEND\n         MVI   WAALLOCR,WATRUE    SET ALLOCR FLAG\nVERBEND  DS    0H\n         MVC   S99VERB,VTVERB     MOVE IN VERB CODE\n*\n*  SCAN OFF KEYWORD PARAMETERS.\n*\n         CLI   4(R1),X'80'        END OF PARM LIST?\n         BE    FAILKEY\n         LA    R1,8(R1)           POINT TO THIRD PARAMETER\n         CLI   S99VERB,S99VRBIN   VERB = INFO?\n         BE    RETINFO            YUP\n         CLI   WAALLOCR,WATRUE    VERB = ALLOCR?\n         BE    RETALLOC\n         B     PARMLOOP           NOPE, START LOOP\n*\n**   SET UP THE TEXT UNITS FOR DYNAMIC INFORMATION RETRIEVAL\n**   THIS IS FOR THE INFO AND ALLOCR VERBS\n*\nRETINFO  DS    0H\n         LA    R2,DILEN1(@TU)     POINT TO END OF DICB\n         MVC   0(DILEN1,@TU),DICBS1 MOVE IN MODEL TEXT UNITS\n         B     RETLOOP\nRETALLOC DS    0H\n         LA    R2,DILEN2(@TU)     POINT TO END OF DICB2\n         MVC   0(DILEN2,@TU),DICBS2 MOVE IN MODEL TEXT UNITS\nRETLOOP  DS    0H\n         S     @TP,=F'4'          POINT TO TUPTR ENTRY\n         ST    @TU,S99TUPTR       SET POINTER\n         LH    R3,S99TULNG        GET LENGTH OF PARM FIELD\n         LA    @TU,S99TUPAR(R3)   POINT TO NEXT TEXT UNIT\n         CR    @TU,R2             END OF DICB?\n         BNE   RETLOOP\n         CLI   0(R1),X'80'        LAST PARM?\n         BE    PARMPOOL           YES\n         LA    R1,4(R1)           POINT TO NEXT PARM\nPARMLOOP DS    0H\n         L     @CH,0(R1)          GET ADDRESS OF STRING\n         LA    @CH,0(@CH)         ZERO TOP BYTE\nSTRINGLP DS    0H                 START OF STRING LOOP\nSTRING01 DS    0H\n         CLI   CH,C';'            END OF STRING\n         BE    STRINGPL           YES, GOTO END OF STRING LOOP\n         CLI   CH,C','            COMMA?\n         BE    STRING02\n         CLI   CH,C' '            BLANK?\n         BNE   STRING03\nSTRING02 LA    @CH,1(@CH)         GET NEXT CHAR\n         B     STRING01\nSTRING03 DS    0H\n         LA    R2,15             LENGTH OF LONGEST KEYWORD\n         ST    @CH,WAKYSTRT       SAVE START ADDRESS\nKEYSLOOP DS    0H\n         CLI   CH,C'='            END OF KEYWORD?\n         BE    KEYSPOOL\n         CLI   CH,C','\n         BE    KEYSPOOL\n         CLI   CH,C';'\n         BE    KEYSPOOL\n         CLI   CH,C' '\n         BE    KEYSPOOL\n         LA    @CH,1(@CH)         GET NEXT CHAR\n         BCT   R2,KEYSLOOP\n         B     FAILKEY            KEY WORD FAILED\n         USING KYWDTABL,@KTE      ADDRESSIBILITY FOR KEY WORD TABLE\nKEYSPOOL DS    0H\n*\n** KEYWORD - SCAN OFF AND LOOK UP A KEYWORD\n*\nKEYWORD  DS    0H\n         L     R3,WAKYSTRT        GET FIRST CHR IN WORD\n         CLI   0(R3),C'A'\n         BL    FAILKEY            INVALID KEYWORD\n         CLI   0(R3),C'Z'\n         BH    FAILKEY            INVALID KEYWORD\n         IC    R2,0(R3) GET FIRST CHAR\n         S     R2,=F'193'         SUBTRACT OFF VALUE OF 'A'\n         SLL   R2,2               TIMES 4\n         L     @KTE,KYWDINDX(R2)  GET ADDRESS OF FIRST ENTRY WITH\n*                                 SAME FIRST LETTER\n         LR    LENGTH,@CH\n         S     LENGTH,WAKYSTRT    LENGTH OF KEYWORD\n         BCT   LENGTH,KEYLOOP     LESS ONE FOR EXECUTE\n         B     FAILKEY\nKEYLOOP  DS    0H\n         CLC   KYWDSTRG(1),0(R3)  CHECK FIRST CHAR\n         BNE   FAILKEY            NO LONGER IN CORRECT PART OF TABLE\n         EX    LENGTH,KEYCLC      COMPARE KEYWORD TO ENTRY\n         BE    KEYPOOL\n         IC    R2,KYWDLEN         GET LENGTH OF ENTRY\n         LA    @KTE,KYWDSTRG(R2)  GET NEXT ENTRY\n         B     KEYLOOP\nKEYCLC   CLC   KYWDSTRG,0(R3)\nKEYPOOL  DS    0H\n         IC    R2,KYWDMIN         GET MIMINUM UNAMBIGOUS LENGTH\n         LA    LENGTH,1(LENGTH)   LENGTH :=+ 1\n         CR    LENGTH,R2          CHECK LENGTH\n         BL    FAILKEY            KEY WORD TOO SHORT\n         MVC   S99TUKEY,KYWDKEY\n         LA    R4,S99TULNG        ADDRESS OF LENGTH FIELD\n         ST    R4,WALASTTU        SAVE IT\n         CLI   CH,C'='            DID THE USER SUPPLY A PARM\n         BNE   SPECPARM           IF NOT, THEN PARM IS IN TABLE\nVALUNEXT DS    0H\n         LA    @CH,1(@CH)         POINT PAST '='\n         ST    @CH,WAVALAD\nVALULOOP DS    0H\n         CLI   CH,C' '            BLANK?\n         BE    VALUPOOL           YES, END OF VALUE\n         CLI   CH,C','            COMMA?\n         BE    VALUPOOL           YES, END OF VALUE\n         CLI   CH,C';'            SEMI?\n         BE    VALUPOOL           YES, END OF VALUE\n         LA    @CH,1(@CH)         GET NEXT VALUE\n         B     VALULOOP\nVALUPOOL DS    0H\n         LR    LENGTH,@CH\n         S     LENGTH,WAVALAD     LENGTH OF VALUE\n         L     R4,WALASTTU\n         STH   LENGTH,0(R4)       SAVE LENGTH\n         BCTR  LENGTH,0\n         BM    TEXTNUM            DONT MOVE VALUE IF NULL\n         L     R3,WAVALAD         GET START OF VALUE\n         CLI   KYWDSUBT,KYWDSUBF  IS THERE A SUBTABLE?\n         BNL   SUBTLKUP           YES\n         CLI   KYWDPMLN,KYNOPARM  IS THERE A LENGTH SUPPLIED?\n         BNE   CONVALUE\n         L     R4,WALASTTU\n         LA    R4,2(R4)           POINT TO PARAMETER FIELD\n         EX    LENGTH,VALUEMVC\n         B     TEXTNUM\nVALUEMVC MVC   R0(0,R4),0(R3)\nSUBTLKUP DS    0H\n@SUBT    EQU   4\n*\n**   R3 POINTS TO VALUE\n**   R2 # OF ENTRIES IN SUBTABLE\n**   R15 USED FOR IC,STC\n*\n         XR    R15,R15\n         XR    R2,R2\n         IC    R2,KYWDSUBT        GET SUBTABLE INDEX POINTER\n         N     R2,=F'15'          GET RID OF FLAG BITS\n         SLL   R2,2               TIMES 4\n         L     @SUBT,VALUINDX(R2) ADDR OF SUBTABLE\n         USING VALUTABL,@SUBT     ADDRESSIBILITY FOR SUBTABLE ENTRIES\n         IC    R2,VALUINDX(2)     # ENTRIES IN SUBTABLE\n         CLC   KYWDSTRG(5),=C'RECFM' SPECIAL CASE FOR RECFM\n         BE    SPECCASE\n         CLC   KYWDSTRG(5),=C'OPTCD' AND FOR OPTION CODE\n         BE    SPECCASE\nSUBTLOOP DS    0H\n         EX    LENGTH,SUBTCLC     COMPARE ENTRIES\n         BE    SUBTPOOL           ENTRY FOUND\n         IC    R15,VALULEN        GET LENGTH OF THIS ENTRY\n         LA    @SUBT,VALUSTRG(R15) GET NEXT ENTRY\n         BCT   R2,SUBTLOOP        REPEAT IF NOT AT END OF TABLE\n         B     FAILVALU\nSUBTPOOL DS    0H\n         LA    LENGTH,1(LENGTH)   LENGTH +:= 1\n         CR    LENGTH,R15         CORRECT VALUE LENGTH\n         BNE   FAILVALU\n         IC    R2,KYWDPMLN        GET PARM LENGTH\n         STC   R2,S99TULNG+1      SAVE IT IN TEXT UNIT\n         IC    R2,CONVMASK(R2)    GET STCM MASK\n         ICM   R3,3,VALUPARM      GET VALUE\n         EX    R2,CONVSTCM        STCM R3,CONVMASK(R2),S99TUPAR\n         B     TEXTNUM\nSUBTCLC  CLC   VALUSTRG,0(R3)\n*\n**   THIS CODE HANDLES THE SPECIAL CASE FOR KEYWORDS THAT CAN HAVE\n**   MORE THAN ONE VALUE SPECIFIED. EG 'RECFM=FBA'.\n**   THE INDIVIDUAL VALUES ARE OR'ED TOGETHER\n*\nSPECCASE DS    0H\n         LR    R0,@SUBT           SAVE ADDR OF START OF SUBTABLE\n         LR    R15,R2             SAVE # SUBTABLE ENTRIES\n         L     @CH,WAVALAD        POINT TO FIRST VALUE\n         LA    LENGTH,1(LENGTH)   CORRECT LENGTH\nSPECLOOP DS    0H\n         CLC   CH,VALUSTRG        COMPARE CHAR WITH VALUE STRING\n         BE    SPECPOOL           FOUND\n         LA    @SUBT,VALUSTRG+1   NEXT ENTRY\n         BCT   R2,SPECLOOP        REPEAT WITH NEW ENTRY\n         B     FAILVALU           NO MORE ENTRIES LEFT\nSPECPOOL DS    0H\n         OC    S99TUPAR(1),VALUPARM+1\n         LA    @CH,CH+1           NEXT CHAR IN USER SUPPLIED VALUE\n         LR    @SUBT,R0           RESTORE SUBTABLE ADDR\n         LR    R2,R15             RESTORE SUBTABLE ENTRY COUNT\n         BCT   LENGTH,SPECLOOP\n         MVC   S99TULNG+1(1),KYWDPMLN MOVE IN LENGTH\n         B     TEXTNUM            FINISHED\n*\n**   SUPPLY THE PARAMETER VALUE FOR THE TEXT UNIT FROM THE KEYWRD TABLE\n*\nSPECPARM DS    0H\n         CLI   KYWDPARM,KYNOPARM  IS THERE A SPECIAL PARM?\n         BE    TEXTFINI\n         MVC   S99TULNG+1(1),KYWDPMLN MOVE IN LENGTH\n         MVC   S99TUPAR(1),KYWDPARM MOVE IN SPECIAL PARM\n         B     TEXTNUM\n*\n**   THE USER SUPPLIED VALUE IS TO BE CONVERTED TO BINARY AND RIGHT\n**   JUSTIFIED IN A FIELD WHOSE LENGTH IS SUPPLIED IN THE KEYWORD TABLE\n*\nCONVALUE DS    0H\n         LA    R2,WADWORD-1+L'WADWORD POINT 1 BYTE BEFOR END OF WADWORD\n         SR    R2,LENGTH          POINT TO CORRECT ADDR FOR MVC\n         XC    WADWORD,WADWORD\n         EX    LENGTH,CONVMVC     MOVE VALUE\n         PACK  WADWORD,WADWORD    CONVERT TO PACKED DECIMAL\n         CVB   R3,WADWORD         CONVERT TO BINARY\n         MVC   S99TULNG+1(1),KYWDPMLN MOVE IN KYWDPARM\n         XR    R2,R2\n         IC    R2,S99TULNG+1      GET SPECIAL PARM\n         IC    R2,CONVMASK(R2)    SET BYTE 2 FOR STCM INST\n         EX    R2,CONVSTCM        STCM R3,MASK(2),S99TUPAR\n         B     TEXTNUM\nCONVMVC  MVC   0(0,R2),0(R3)\nCONVSTCM STCM  0,0,S99TUPAR\nCONVMASK DC    X'303133373F'\n*\n**   SET THE NUMBER FIELD IN THE TEXTUNIT\n*\nTEXTNUM  DS    0H\n         LH    R2,S99TUNUM        NUMBER OF KEYS IN THIS TEXT UNIT\n         LA    R2,1(R2)           + ONE\n         STH   R2,S99TUNUM        SAVE IT\n         CLI   CH,C','            IS THERE ANOTHER PARAMETER?\n         BNE   TEXTFINI           NO\n         L     R4,WALASTTU        ADDRESF OF LENGTH FIELD FOR LAST TU\n         AH    R4,0(R4)           ADD LENGTH OF PARAMETER\n         LA    R4,2(R4)           + 2 FOR LENGTH FIELD\n         ST    R4,WALASTTU        = ADDRESS OF NEXT LENGTH FIELD\n         B     VALUNEXT           PROCESS NEXT VALUE\n*\n**   COMLETE THE TEXT UNIT.\n**   CHECK FOR WAORK AREA OVERFLOW.\n**   ADD A NEW POINTER THE THE TEXTPOINTERS\n*\nTEXTFINI DS    0H\n         L     R2,WALASTTU        ADDRESS OF LENGTH FIELD\n         AH    R2,0(2)            + LENGTH OF PARM\n         LA    R2,2(2)            + TWO FOR LENGTH FIELD\n         S     @TP,=F'4'          POINT TO NEW TEXT POINTER\n         CR    R2,@TP             CHECK FOR OVERFLOW\n         BH    FAILOVFL           WORKAREA OVERFLOW\n         ST    @TU,S99TUPTR       SAVE ADDR OF TU\n         LR    @TU,R2             POINT TO NEW TEXT UNIT\n         B     STRINGLP\nSTRINGPL DS    0H                 END OF STRING LOOP\n         CLI   0(R1),X'80'        LAST PARM?\n         BE    PARMPOOL           YES\n         LA    R1,4(R1)           POINT TO NEXT PARM\n         B     PARMLOOP\nPARMPOOL DS    0H\n         EJECT\n         ST    @TP,S99TXTPP       SET TEXT POINTER FIELD IN RB\n         L     @TP,WABOTTOM       GET END OF WORKAREA\n         S     @TP,=F'4'          POINT TO LAST PARM\n         MVI   S99TUPTR,S99TUPLN  SET LAST TP FLAG\n         LA    R1,WAS99RB         GET ADDR OF REQUEST BLOCK\n         OI    0(R1),S99RBPND     TURN ON FIRST BIT OF S99RBP\nSVC99    DYNALLOC                 CALL DYNAMIC ALLOCATION RTN\n         LTR   R15,R15\n         BNE   DAIRFAIL\n         CLI   S99VERB,S99VRBIN   VERB = INFO?\n         BE    INFODECO           YES, DECODE IT\n         CLI   WAALLOCR,WATRUE    VERB = ALLOCR?\n         BE    INFODECO\n         B     RETURN\nDAIRFAIL DS    0H\n         L     @DF,WADFDSCT       ADDRESS OF DFDSECT\n         ST    @RB,DFS99RBP       ADDRESS OF SVC99 REQUEST BLOCK\n         ST    R15,WAS99RC        SVC 99 RETURN CODE\n         LA    R2,WAS99RC         GET ADDR OF IT\n         ST    R2,DFRCP\n         LA    R2,WADFID          ADDR OF DIFD\n         ST    R2,DFIDP\n         MVI   WADFID,DFWTP       SPECIFY WRITE TO PROGRAMMER\n         MVI   WADFID+1,DFSVC99   FROM SVC 99\n         LA    R2,WAZEROES\n         ST    R2,DFJEFF02        ADDR OF ADDR OF IKJEFF02 (NOT KNOWN)\n         LR    R1,@DF\n         LINK  EP=IKJEFF18        CALL DAIRFAIL\n         L     R15,WAS99RC        RESTORE RETURN CODE\n         B     RETURN\n         EJECT\n*\n**   INITIALIZATION CODE\n*\nINITCODE DS    0H\n         LR    R2,R1\n         GETMAIN R,LV=2048        GETMAIN AREA\n         L     R3,0(R2)           ADDRESS OF PARM ONE\n         ST    R1,0(R3)           SAVE ADDRESS\n         MVI   0(R3),X'0F'        INDICATE GETMAINED AREA\n         L     R3,0(R3)           POINT TO AREA\n         LA    R4,2048            LENGTH\n         ST    R4,0(R3)           SET LENGTH\n         XR    R15,R15            SET RC\n         XC    4(4,R3),4(R3)      ZERO WAS99RC\n         LM    R14,R12,12(R13)    RESTORE REGS\n         XR    R15,R15            SET RETURN CODE\n         XR    R0,R0\n         BR    R14                RETURN\nENDCODE  DS    0H\n         LR    R2,R1              SAVE REG 1\n         L     R3,0(R1)           ADDRESS OF PARM 1\n         L     R3,0(R3)           ADDRESS TO BE FREED\n         L     R4,0(R3)           LENGTH TO BE FREED\n         FREEMAIN R,A=(3),LV=(4)\n         LM    R14,R12,12(R13)    RESTORE REGS\n         XR    R15,R15            SET RETURN CODE\n         XR    R0,R0\n         BR    R14                RETURN\n         EJECT\n*\n**   DECODE INFO RETURNED BY SVC99\n*\nINFODECO DS    0H\n         L     R1,4(R13)\n         L     R1,24(R1)          RECOVER R1\n         L     R1,8(R1)           POINT TO THIRD PARM\n         L     @TU,S99TUPTR       POINT TO FIRST TEXT UNIT\n         CLI   WAALLOCR,WATRUE    VERB = ALLOCR?\n         BE    INFO1\n         LA    R0,DILEN1(@TU)     POINT TO END OF DICB\n         LA    R4,DICBS1          ADDRESS OF DICB MODEL\n         B     INFO2\nINFO1    DS    0H\n         LA    R0,DILEN2(@TU)     POINT TO END OF DICB\n         LA    R4,DICBS2          ADDRESS OF DICB MODEL\nINFO2    DS    0H\nINFOLOOP DS    0H\n         LH    R3,S99TULNG        GET LENGTH\n         BCTR  R3,0               LESS ONE FOR EXECUTE\n         LTR   R3,R3\n         BL    INFOLEN\n         EX    R3,INFOMVC\nINFOLEN  LH    R3,S99TULNG-S99TUNIT(,R4) GET MAX PARM LENGTH\n         AR    R1,R3              POINT TO NEXT INFO PARM\n         LA    @TU,S99TUPAR(R3)   NEXT TEXT UNIT\n         LA    R4,S99TUPAR-S99TUNIT(R3,4) NEXT TEXT UNIT IN MODEL\n         CR    @TU,R0             END OF INFO TU'S?\n         BNE   INFOLOOP\n         XR    R15,R15            SET RETURN CODE\n         B     RETURN\nINFOMVC  MVC   0(0,R1),S99TUPAR\n         SPACE 3\nFAILVERB DS    0H\n         LA    R15,16\n         B     RETURN\nFAILKEY  DS    0H\n         LA    R15,20\n         B     RETURN\nFAILVALU DS    0H\n         LA    R15,28\n         B     RETURN\nFAILOVFL DS    0H\n         LA    R15,24\n         B     RETURN\n         EJECT\nRETURN   DS    0H\n         ST    R15,WAS99RC        RETURN CODE\n         L     R13,4(R13)         RESTORE SAVEAREA ADDR\n         ST    R15,16(R13)        SET RETURN CODE\n         L     R1,24(R13)         RESTORE R1\n         L     R1,0(R1)           ADDR OF PARM 1\n         CLI   0(R1),X'0E'        IS AREA TO BE FREED?\n         BNE   RETURN01\n         LR    R2,R1              SAVE R1\n         L     R1,0(R1)           ADDR TO BE FREED\n         FREEMAIN R,LV=2048,A=(1)\n         LR    R1,R2              RESTORE R1\n         XC    0(4,R1),0(R1)      SET PARM 1 TO ZEROES\nRETURN01 DS    0H\n         LM    R14,R12,12(R13)    RESTORE REGS\n         LR    R0,R15\n         BR    R14                RETURN\n         EJECT\n         PRINT NOGEN\n         INDEX\nVERBTAB  DS    0H\n         VENT  ALLOC,S99VRBAL\n         VENT  ALLOCR,S99VRBAL\n         VENT  UNALLOC,S99VRBUN\n         VENT  CONCAT,S99VRBCC\n         VENT  UNCONCAT,S99VRBDC\n         VENT  REMOVE,S99VRBRI\n         VENT  DDALLOC,S99VRBDN\n         VENT  INFO,S99VRBIN\nVERBMARK DS    0X\nVERBTEND DC    A(VERBMARK)\n         SPACE 1\nKYWDTAB  DS    0H\n         BEGIN A\n         KENT  ABE,3,DALEROPT,20\n         KENT  ACC,3,DALEROPT,80\n         KENT  AL,2,DALLABEL,40\n         KENT  ALIGNMENT,3,DALFCBAV,08\n         KENT  ALX,3,DALSPFRM,02\n         KENT  AUL,3,DALLABEL,48\n         BEGIN B\n         KENT  BLKSIZE,3,DALBLKSZ,,2\n         KENT  BLOCK,3,DALBLKLN,,3\n         KENT  BLP,3,DALLABEL,10\n         KENT  BUFALN,4,DALBFALN,SUBTABLE\n         KENT  BUFIN,4,DALBUFIN,,2\n         KENT  BUFL,4,DALBUFL,,2\n         KENT  BUFMAX,4,DALBUFMX,,1\n         KENT  BUFNO,4,DALBUFNO,,1\n         KENT  BUFOFF,5,DALBUFOF,,1\n         KENT  BUFOUT,5,DALBUFOU,,1\n         KENT  BUFRQ,4,DALBUFRQ,,1\n         KENT  BUFSZ,4,DALBUFSZ,,2\n         KENT  BUFTEK,4,DALBFTEK,SUBTABLE\n         BEGIN C\n         KENT  CATLG,2,DALNDISP,02\n         KENT  CCATLG,2,DALCDISP,02\n         KENT  CDELETE,2,DALCDISP,04\n         KENT  CHARSET,2,DALUVRFY\n         KENT  CKEEP,2,DALCDISP,08\n         KENT  CLOSE,2,DALCLOSE\n         KENT  CODE,3,DALCODE,SUBTABLE\n         KENT  CONTIG,3,DALSPFRM,08\n         KENT  CONVERT,4,DALCNVRT\n         KENT  COPIES,3,DALCOPYS,,1\n         KENT  CUNCATLG,2,DALCDISP,01\n         KENT  CYL,2,DALCYL\n         BEGIN D\n         KENT  DCBDD,5,DALDCBDD\n         KENT  DCBDS,5,DALDCBDS\n         KENT  DDNAME,2,DALDDNAM\n         KENT  DELETE,2,DALNDISP,04\n         KENT  DIRECTORY,2,DALDIR,,3\n         KENT  DSNAME,3,DALDSNAM\n         KENT  DSORG,3,DALDSORG,SUBTABLE,2\n         KENT  DSSEQ,3,DALDSSEQ,,2\n         KENT  DUMMY,2,DALDUMMY\n         KENT  D1600,5,DALDEN,C3\n         KENT  D6250,5,DALDEN,D3\n         KENT  D800,4,DALDEN,83\n         BEGIN E\n         KENT  EXPIRY,1,DALEXPDT\n         BEGIN F\n         KENT  F,1,DALRECFM,80\n         KENT  FA,2,DALRECFM,84\n         KENT  FAS,3,DALRECFM,8C\n         KENT  FB,2,DALRECFM,C0\n         KENT  FBA,3,DALRECFM,C4\n         KENT  FBAS,4,DALRECFM,9C\n         KENT  FBM,3,DALRECFM,C2\n         KENT  FBMS,4,DALRECFM,8A\n         KENT  FBS,3,DALRECFM,98\n         KENT  FM,2,DALRECFM,82\n         KENT  FMS,3,DALRECFM,8A\n         KENT  FOLDMODE,3,DALUFOLD\n         KENT  FORMS,3,DALFCBIM\n         KENT  FS,2,DALRECFM,88\n         BEGIN G\n         BEGIN H\n         KENT  HOLD,1,DALSHOLD\n         BEGIN I\n         KENT  INPUT,1,DALINOUT,40\n         BEGIN J\n         BEGIN K\n         KENT  KEEP,3,DALNDISP,08\n         KENT  KEYLEN,3,DALKYLEN,,1\n         BEGIN L\n         KENT  LIMCT,2,DALLIMCT,,3\n         KENT  LRECL,2,DALLRECL,,2\n         KENT  LTM,2,DALLABEL,21\n         BEGIN M\n         KENT  MEMBER,2,DALMEMBR\n         KENT  MOD,3,DALSTATS,02\n         KENT  MODE,4,DALMODE,SUBTABLE\n         KENT  MSVGP,2,DALMSVGP\n         KENT  MXIG,2,DALSPFRM,04\n         BEGIN N\n         KENT  NCP,2,DALNCP,,1\n         KENT  NEW,3,DALSTATS,04\n         KENT  NEWCLASS,4,DUNOVCLS\n         KENT  NEWHOLD,4,DUNOVSHQ\n         KENT  NEWNOHOLD,4,DUNOVSNH\n         KENT  NEWREMOTE,4,DUNOVSUS\n         KENT  NL,2,DALLABEL,01\n         KENT  NSL,3,DALLABEL,04\n         BEGIN O\n         KENT  OLD,3,DALSTATS,01\n         KENT  OPTCD,2,DALOPTCD,SUBTABLE\n         KENT  OUTLIM,4,DALOUTLM,,3\n         KENT  OUTPUT,3,DALINOUT,80\n         BEGIN P\n         KENT  PARALLEL,3,DALPARAL\n         KENT  PASSREAD,5,DALPASPR,10\n         KENT  PASSWORD,6,DALPASSW\n         KENT  PASSWRITE,6,DALPASPR,30\n         KENT  PERMANENT,2,DALPERMA\n         KENT  PERMCONCAT,5,DCCPERMC\n         KENT  PRIMARY,4,DALPRIME,,3\n         KENT  PRIVATE,4,DALPRIVT\n         KENT  PRTSP,3,DALPRTSP,SUBTABLE\n         BEGIN Q\n         KENT  QNAME,1,DALQNAME\n         BEGIN R\n         KENT  RECFM,3,DALRECFM,SUBTABLE\n         KENT  RELNO,3,DINRELNO,,2\n         KENT  REMOTE,3,DALSUSER\n         KENT  REMOVE,5,DUNREMOV\n         KENT  RETENTION,3,DALRETPD,,2\n         KENT  RLSE,2,DALRLSE\n         KENT  ROUND,2,DALROUND\n         BEGIN S\n         KENT  SECONDARY,3,DALSECND,,3\n         KENT  SHR,2,DALSTATS,08\n         KENT  SKP,2,DALEROPT,40\n         KENT  SL,2,DALLABEL,02\n         KENT  SUL,3,DALLABEL,08\n         KENT  SYSOFORM,5,DALSFMNO\n         KENT  SYSOPROG,5,DALSPGNM\n         KENT  SYSOUT,5,DALSYSOU\n         BEGIN T\n         KENT  TERMFILE,2,DALTERM\n         KENT  TRK,3,DALTRK\n         KENT  TRTCH,3,DALTRTCH,SUBTABLE\n         BEGIN U\n         KENT  U,1,DALRECFM,C0\n         KENT  UCS,2,DALUCS\n         KENT  UNALLOC,3,DUNUNALC\n         KENT  UNCATLG,3,DALNDISP,01\n         KENT  UNICOUNT,4,DALUNCNT,,1\n         KENT  UNIT,4,DALUNIT\n         BEGIN V\n         KENT  V,1,DALRECFM,40\n         KENT  VA,2,DALRECFM,44\n         KENT  VAS,3,DALRECFM,4C\n         KENT  VB,2,DALRECFM,50\n         KENT  VBA,3,DALRECFM,64\n         KENT  VBAS,4,DALRECFM,5C\n         KENT  VBM,3,DALRECFM,62\n         KENT  VBMS,4,DALRECFM,5A\n         KENT  VBS,3,DALRECFM,58\n         KENT  VERIFY,2,DALFCBAV,04\n         KENT  VM,2,DALRECFM,42\n         KENT  VMS,3,DALRECFM,4A\n         KENT  VOLUME,3,DALVLSER\n         KENT  VOLCOUNT,4,DALVLCNT,,1\n         KENT  VOLREF,4,DALVLRDS\n         KENT  VOLSEQ,4,DALVLSEQ,,2\n         KENT  VS,2,DALRECFM,48\n         BEGIN W\n         BEGIN X\n         BEGIN Y\n         BEGIN Z\nKYWDMARK DS    0X\nKYWDTEND DC    A(KYWDMARK)\n         BEGINSUB BFALN           OFFSET 00\n         SENT  F,01\n         SENT  D,02\n         BEGINSUB BFTEK           OFFSET 04\n         SENT  D,08\n         SENT  E,10\n         SENT  R,20\n         SENT  S,40\n         SENT  A,60\n         BEGINSUB CODE\n         SENT  T,02\n         SENT  A,04\n         SENT  C,08\n         SENT  B,10\n         SENT  F,20\n         SENT  I,40\n         SENT  N,80\n         BEGINSUB DSORG\n         SENT  TQ,0020\n         SENT  TX,0040\n         SENT  GS,0080\n         SENT  PO,0200\n         SENT  MQ,0400\n         SENT  CQ,0800\n         SENT  CX,1000\n         SENT  DA,2000\n         SENT  PS,4000\n         SENT  POU,0300\n         SENT  DAU,2100\n         SENT  PSU,4100\n         SENT  TCAM,0004\n         SENT  VSAM,0008\n         BEGINSUB MODE\n         SENT  E,40\n         SENT  C,80\n         SENT  ER,50\n         SENT  EO,60\n         SENT  CR,90\n         SENT  CO,A0\n         BEGINSUB OPTCD           OFFSET 04\n         SENT  R,01\n         SENT  T,02\n         SENT  Z,04\n         SENT  A,08\n         SENT  Q,08\n         SENT  F,10\n         SENT  H,10\n         SENT  O,10\n         SENT  C,20\n         SENT  E,20\n         SENT  B,40\n         SENT  U,40\n         SENT  W,80\n         BEGINSUB PRTSP\n         SENT  0,01\n         SENT  1,09\n         SENT  2,11\n         SENT  3,19\n         BEGINSUB RECFM\n         SENT  M,02\n         SENT  R,02\n         SENT  A,04\n         SENT  G,04\n         SENT  S,08\n         SENT  B,10\n         SENT  D,20\n         SENT  T,20\n         SENT  V,40\n         SENT  F,80\n         SENT  U,C0\n         BEGINSUB TRTCH\n         SENT  C,13\n         SENT  E,23\n         SENT  T,3B\n         SENT  ET,2B\n         ENDSUB\nVALUINDX SUBINDEX\nDICBS1   DICBTAB1\nDICBS2   DICBTAB2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYNAUTIL": {"ttr": 3329, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x024\\x024\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 564, "newlines": 564, "modlines": 0, "user": "WSRCC"}, "text": "*                                                                       00003\n* DYNAUTIL - DYNAMIC FRONT END FOR UTILITIES                            00004\n*                                                                       00005\n*            TOM FOTH, WSRCC, 03/09/82                                  00006\n* SEE HELP FOR MORE DETAILS                                             00007\n*                                                                       00008\nDYNAUTIL BEGIN REQUS=YES                                                00009\n         LR    R7,R12                                                   00010\n         LA    R7,4095(R7)                                              00011\n         LA    R7,1(R7)                                                 00012\n         USING DYNAUTIL+4096,R7                                         00013\n         LR    R2,R1                                                    00014\n         GETMAIN R,LV=WORKL                                             00015\n         LR    R11,R1                                                   00016\n         USING WORKD,R11                                                00017\n         SR    R8,R8                                                    00018\n         MVI   PARMTBL,C' '     BLANK UTILITY NAME, VERBS               00019\n         MVC   PARMTBL+1(L'UTILNAME+L'VERBFLDS-1),PARMTBL               00020\n         XC    DDNMFLDS(L'DDNMFLDS),DDNMFLDS ZERO  DDNAMES              00021\n         MVI   FLAGS,0                                                  00022\n         L     R1,0(R2)         GET ADDR OF PARM IN R1                  00023\n         ST    R1,PARMADDR      SAVE IT                                 00024\n         LA    R1,0(R1)         PURIFY R1                               00025\n         LH    R2,0(R1)         GET THE LENGTH                          00026\n         LTR   R2,R2            DOES THE PARAMETER EXIST?               00027\n         BZ    ENDPARM          NOPE                                    00028\n         LA    R1,2(R1)         POINT TO THE STRING                     00029\n         LA    R6,4             NUMBER OF POSSIBLE FIELDS- 1            00030\n         LA    R5,1             NUMBER OF POSSIBLE PARMS FOR FIELD 1    00031\n         LA    R3,UTILNAME      POINT TO THE FIRST PARMSAVE FOR FIELD 1 00032\nPARMBGN  LA    R4,8(R3)         R4 PTR TO FIRST CHAR AFTER FIELD        00033\nELMNTCK  ALPHANUM 0(R1)         IS IT AN ALPHANUMERIC?                  00034\n         BE    ELMNTOK          YEP                                     00035\n         CLI   0(R1),C','       NOPE-IS IT A COMMA?                     00036\n         BE    NEXTPARM         YEP, GO TO NEXT PARM                    00037\n         CLI   0(R1),C'/'       NOPE-IS IT A SEMICOLON                  00038\n         BE    NEXTFLD          YEP, GO TO NEXT VERB                    00039\n         WTO  'DYN002E NONALPHANUMERIC IN PARM',ROUTCDE=(11)            00040\n         LA    R8,2            SET THE ERROR CODE                       00041\n         B     DIENODMP         EXIT                                    00042\nELMNTOK  CR    R4,R3            ARE WE POINTING PAST OUR FIELD          00043\n         BE    ELMNTLEN         NOPE                                    00044\n         MVC   0(1,R3),0(R1)    MOVE THE CHAR TO THE FIELD              00045\n         LA    R1,1(R1)         POINT TO NEXT CHARACTER IN PARM         00046\n         LA    R3,1(R3)         POINT TO NEXT CHARACTER IN FIELD        00047\n         BCT   R2,ELMNTCK       GO GET ANOTHER CHARACTER IF ANY         00048\n         B     ENDPARM          NO MORE-END PARM PROCESSING             00049\nELMNTLEN WTO  'DYN003E PARM ELEMENT EXCEEDS 8 CHARACTERS',ROUTCDE=(11)  00050\n         LA    R8,3            SET THE RETURN CODE                      00051\n         B     DIENODMP         EXIT                                    00052\nNEXTPARM BCT   R2,NXTPARM1      DECREMENT FROM LENGTH COUNT             00053\nBADPARM  WTO  'DYN004E INVALID PARM STRUCTURE',ROUTCDE=(11)             00054\n         LA    R8,4            SET THE ERROR CODE                       00055\n         B     DIENODMP         EXIT                                    00056\nNXTPARM1 BCT   R5,NXTPARM2      DECREMENT FROM PARM COUNT               00057\n         B     BADPARM          BAD PARM PROCESSING                     00058\nNXTPARM2 LA    R1,1(R1)         POINT TO NEXT CHAR                      00059\n         LR    R3,R4            POINT TO THE FIELD                      00060\n         B     PARMBGN          GO SCAN                                 00061\nNEXTFLD  BCT   R2,NXTFLD1       DECREMENT PARM COUNT                    00062\n         B     BADPARM          BAD PARM PROCESSING                     00063\nNXTFLD1  BCT   R6,NXTFLD2       DECREMENT FIELD COUNT                   00064\n         B     ENDPARM          END PARM PROCESSING                     00065\nNXTFLD2  LA    R1,1(R1)         POINT TO NEXT CHAR                      00066\n         C     R6,=F'3'         PROCESSING VERBS?                       00067\n         BNE   NXTFLD3          NOPE                                    00068\n         LA    R3,VERBFLDS      POINT TO DDNAME FIELD                   00069\n         LA    R5,8             NUMBER OF POSSIBLE DDNAMES              00070\n         B     PARMBGN          GO SCAN                                 00071\nNXTFLD3  DS    0H               POINT TO NEXT CHAR                      00072\n         C     R6,=F'2'         PROCESSING VERBS?                       00073\n         BNE   NXTFLD4          NOPE                                    00074\n         LA    R3,DDNMFLDS      POINT TO DDNAME FIELD                   00075\n         LA    R5,2             NUMBER OF POSSIBLE DDNAMES              00076\n         B     PARMBGN          GO SCAN                                 00077\nNXTFLD4  LA    R3,SYSDDS        POINT TO SYS DD OVERRIDE FIELD          00078\n         MVC   SYSDDS(96),=XL96'00' CLEAR THE TABLE                     00079\n         LA    R5,12            NUMBER OF POSSIBLE VERBS                00080\n         B     PARMBGN          GO SCAN                                 00081\nENDPARM  STH   R2,PARMLEN       SAVE THE PARM LENGTH                    00082\n         LTR   R2,R2            DO WE HAVE A PARM TO SAVE               00083\n         BZ    NOPARM           NO SIR                                  00084\n         CH    R2,=H'100'       PARM TO BIG                             00085\n         BNH   PARMOK           NOPE                                    00086\n         WTO  'DYN005E PARM LENGTH EXCEEDS 100 CHARACTERS',ROUTCDE=(11) 00087\n         LA    R8,5            SET THE RETURN CODE                      00088\n         B     DIENODMP         AND EXIT                                00089\nPARMOK   LA    R1,1(R1)         POINT TO NEXT CHAR IN PARM              00090\n         BCTR  R2,0             DECREMENT FO EX                         00091\n         MVC   PARMFLD(*-*),0(R1) EXECUTED BELOW                        00092\n         EX    R2,*-6           EXECUTE THE MOVE INSTRUCTION            00093\nNOPARM   DS    0H                                                       00094\n         LA    R1,8             EIGHT VERBS TO LOOK AT                  00095\n         LA    R2,VERBFLDS      ADDRESS OF VERBTBL                      00096\nVERBTST  CLI   0(R2),C' '                                               00097\n         BE    VERBTSTA                                                 00098\n         CLC   0(8,R2),=CL8'ICODE'                                      00099\n         BNE   VERBTST1                                                 00100\n         TM    FLAGS,ICODE                                              00101\n         BO    DUPVERB                                                  00102\n         OI    FLAGS,ICODE                                              00103\n         B     VERBTSTA                                                 00104\nVERBTST1 CLC   0(8,R2),=CL8'SCODE'                                      00105\n         BNE   VERBTST2                                                 00106\n         TM    FLAGS,SCODE                                              00107\n         BO    DUPVERB                                                  00108\n         TM    FLAGS,SIGNORE                                            00109\n         BO    CONFVERB                                                 00110\n         OI    FLAGS,SCODE                                              00111\n         B     VERBTSTA                                                 00112\nVERBTST2 CLC   0(8,R2),=CL8'SIGNORE'                                    00113\n         BNE   VERBTST3                                                 00114\n         TM    FLAGS,SIGNORE                                            00115\n         BO    DUPVERB                                                  00116\n         TM    FLAGS,SCODE                                              00117\n         BO    CONFVERB                                                 00118\n         OI    FLAGS,SIGNORE                                            00119\n         B     VERBTSTA                                                 00120\nVERBTST3 CLC   0(8,R2),=CL8'XCODE'                                      00121\n         BNE   VERBTST4                                                 00122\n         TM    FLAGS,XCODE                                              00123\n         BO    DUPVERB                                                  00124\n         TM    FLAGS,XIGNORE                                            00125\n         BO    CONFVERB                                                 00126\n         OI    FLAGS,XCODE                                              00127\n         B     VERBTSTA                                                 00128\nVERBTST4 CLC   0(8,R2),=CL8'XIGNORE'                                    00129\n         BNE   VERBTSTE                                                 00130\n         TM    FLAGS,XIGNORE                                            00131\n         BO    DUPVERB                                                  00132\n         TM    FLAGS,XCODE                                              00133\n         BO    DUPVERB                                                  00134\n         OI    FLAGS,XIGNORE                                            00135\n         B     VERBTSTA                                                 00136\nVERBTSTE WTO  'DYN025E PARAMETER CONTAINS ILLEGAL VERBS',ROUTCDE=(11)   00137\n         LA    R8,25                                                    00138\n         MVI   FLAGS,0                                                  00139\n         B     DIENODMP                                                 00140\nCONFVERB WTO  'DYN027E CONFLICTING VERBS FOUND IN PARM',ROUTCDE=(11)    00141\n         LA    R8,27                                                    00142\n         MVI   FLAGS,0                                                  00143\n         B     DIENODMP                                                 00144\nDUPVERB  WTO  'DYN026I DUPLICATE VERBS FOUND IN PARM - IGNORED',       X00145\n               ROUTCDE=(11)                                             00146\nVERBTSTA LA    R2,8(R2)                                                 00147\n         BCT   R1,VERBTST                                               00148\n         LA    R2,DDNMFLDS      ADDRESS OF DDNAMES                      00149\n         LA    R3,14            THERE ARE FOURTEEN OF THEM              00150\nNULDDTST CLI   0(R2),X'00'      HAS THIS FILED BEEN MODIFIED?           00151\n         BE    BLNXTDD          NOPE                                    00152\n         LA    R4,8             EIGHT CHARACTERS / DDNAME               00153\nBLTSTCHR CLI   0(R2),X'00'      IS THIS CHARACTER A NULL                00154\n         BNE   BLNXTCHR         NOPE                                    00155\n         MVI   0(R2),C' '       YEP, BLANK IT                           00156\nBLNXTCHR LA    R2,1(R2)         POINT TO NEXT CHARACTER                 00157\n         BCT   R4,BLTSTCHR      GO SEE IT WE NEED TO BLANK              00158\n         BCT   R3,NULDDTST      GO DO ANOTHER DDNAME                    00159\n         B     MOVEDCBS         NO MORE, MOVE DCBS                      00160\nBLNXTDD  LA    R2,8(R2)         POINT TO NEXT DDNAME                    00161\n         BCT   R3,NULDDTST      AND BLANK IT                            00162\nMOVEDCBS MVC   RPTDCB(LRPTDCB),MODELRPT  MOVE THE DCB'S                 00163\n         MVC   CNTLIN(LCNTLIN),MODELCTL  TO WORKING STORAGE             00164\n         MVC   REMOPN(LREMOPN),MODELOPN  TO WORKING STORAGE             00165\n         MVC   REMLNK(LREMLNK),MODELLNK  TO WORKING STORAGE             00166\n         LA    R10,RPTDCB                                               00167\n         LA    R9,CNTLIN                                                00168\n         CLI   RPTDD,X'00'      DID USER OVERRIDE RPT DDNAME            00169\n         BE    OPENRPT          NOPE                                    00170\n         MVC   X'28'(8,R10),RPTDD MOVE IN OVERRIDE DDNAME               00171\nOPENRPT  OPEN  ((R10),(OUTPUT)),MF=(E,REMOPN) OPEN THE REPORT FILE      00172\n         TM    X'30'(R10),X'10' OPEN REPORT OKAY                        00173\n         BO    CNTLTST          YEP                                     00174\n         WTO  'DYN001E COULD NOT OPEN REPORT DATASET',ROUTCDE=(11)      00175\n         LA    R8,1                                                     00176\n         B     DIEWDMP                                                  00177\nCNTLTST  PUT   (R10),TTL001                                             00178\n         PUT   (R10),TTL002                                             00179\n         L     R3,PARMADDR      ADDRESS OF PARM                         00180\n         LH    R2,0(R3)         LENGTH OF PARM                          00181\n         LTR   R2,R2            WAS THERE ONE                           00182\n         BNZ   MOVEPARM         YEP                                     00183\n         MVC   INFODATA,INF022  NOPE                                    00184\n         B     PUTPARM          PUT INFO MESSAGE                        00185\nMOVEPARM PUT   (R10),TTL005     PUT HEADER                              00186\n         MVI   INFOREC,C' '     CLEAR THE BUFFER                        00187\n         MVC   INFOREC+1(L'INFOREC-1),INFOREC                           00188\n         BCTR  R2,0             LESS ON FOR EX                          00189\n         MVC   INFODATA(*-*),2(R3) TO BE EX'ED BELOW                    00190\n         EX    R2,*-6           EX THE ABOVE                            00191\nPUTPARM  PUT   (R10),INFOREC    PUT THE RECORD                          00192\n         CLI   UTILNAME,C' '                                            00193\n         BNE   NOUTLWRN                                                 00194\n         PUT   (R10),INF020                                             00195\nNOUTLWRN DS    0H                                                       00196\n         PUT   (R10),TTL003                                             00197\n         MVC   BLDLFF,=H'1'                                             00198\n         MVC   BLDLLL,=H'14'                                            00199\n         MVC   BLDLNAME,=CL8'DYNAM'                                     00200\n         BLDL  0,BLDLFF                                                 00201\n         LTR   R15,R15                                                  00202\n         BZ    TSTUTIL                                                  00203\n         C     R15,=F'8'                                                00204\n         BNE   DYNAMISS                                                 00205\nBLDLFAIL WTO  'DYN019E BLDL FAILED IN MODULE SEARCH',ROUTCDE=(11)       00206\n         PUT  (R10),ERR019                                              00207\n         LA    R8,19                                                    00208\n         B     DIEWDMP                                                  00209\nDYNAMISS WTO  'DYN017E DYNAM MODULE NOT IN JOB LINKLIST',ROUTCDE=(11)   00210\n         PUT   (R10),ERR017                                             00211\n         LA    R8,17                                                    00212\n         B     DIENODMP                                                 00213\nTSTUTIL  CLI   UTILNAME,C' '                                            00214\n         BE    TSTCTLDD                                                 00215\n         MVC   BLDLNAME,UTILNAME                                        00216\n         BLDL  0,BLDLFF                                                 00217\n         LTR   R15,R15                                                  00218\n         BZ    TSTCTLDD                                                 00219\n         C     R15,=F'8'                                                00220\n         BE    BLDLFAIL                                                 00221\n       WTO 'DYN018E SPECIFIED MODULE NOT IN JOB LINKLIST',ROUTCDE=(11)  00222\n         PUT   (R10),ERR018                                             00223\n         LA    R8,18                                                    00224\n         B     DIENODMP                                                 00225\nTSTCTLDD CLI   CTLDD,X'00'      DID USER OVERRIDE CTL DDNAME            00226\n         BE    OPENCTL          NOPE                                    00227\n         MVC   X'28'(8,R9),CTLDD MOVE IN OVERRIDE DDNAME                00228\nOPENCTL  OPEN  ((R9),(INPUT)),MF=(E,REMOPN) OPEN THE CONTROL FILE       00229\n         TM    X'30'(R9),X'10'  OPEN CONTROL OKAY                       00230\n         BO    SETUPPRM         YEP                                     00231\n         WTO  'DYN006E COULD NOT OPEN CONTROL DATASET',ROUTCDE=(11)     00232\n         PUT   (R10),ERR006                                             00233\n         LA    R8,6                                                     00234\n         B     DIEWDMP                                                  00235\nSETUPPRM DS    0H                                                       00236\n         CLC   X'52'(2,R9),=H'80'         IS LRECL 80                   00237\n         BE    LRECLOK                                                  00238\n         WTO  'DYN012E LRECL OF CONTROL FILE NOT 80',ROUTCDE=(11)       00239\n         PUT   (R10),ERR012                                             00240\n         LA    R8,12                                                    00241\n         B     DIENODMP                                                 00242\nLRECLOK  TM    X'24'(R9),X'80'  IS IT FIXED                             00243\n         B     RECFMOK                                                  00244\n         WTO  'DYN013E RECFM OF CONTROL FILE NOT F OR FB',ROUTCDE=(11)  00245\n         PUT   (R10),ERR013                                             00246\n         LA    R8,13                                                    00247\n         B     DIENODMP                                                 00248\nRECFMOK  TM    X'1A'(R9),X'40' IS IT DSORG PS                           00249\n         B     DSORGOK                                                  00250\n         WTO  'DYN014E DSORG OF CONTROL FILE NOT PS',ROUTCDE=(11)       00251\n         PUT   (R10),ERR014                                             00252\n         LA    R8,14                                                    00253\n         B     DIENODMP                                                 00254\nDSORGOK  DS    0H                                                       00255\n         MVC   DDNTBL(96),SYSDDS MOVE IN DDNAME TO CALL TABLE           00256\n         LA    R0,PARMLEN       ADDRESS OF PARM                         00257\n         ST    R0,PARMLST       SAVE IN ADDR LIST                       00258\n         MVC   DDNTBLLN,=H'96'  LENGTH OF DDNAME TABLE                  00259\n         LA    R0,DDNTBLLN      ADDRESS OF DDN TABLE                    00260\n         ST    R0,PARMLST+4     SAVE IN ADDR LIST                       00261\n         MVI   PARMLST+4,X'80'  END OF LIST                             00262\n         CLC   SYSDDS(96),=XL96'00' ANY OVERRIDDEN DDNAMES              00263\n         BNE   NOOVDDS          YEP                                     00264\n         MVI   PARMLST,X'80'    NOPE, ONLY PARAMETER                    00265\nNOOVDDS  XC    DYNAM,DYNAM      CLEAR WORK                              00266\n         LA    R0,DYNAM         ADDR OF WORK VARIABLE                   00267\n         ST    R0,PARMLST2      SAVED IN PARM LIST                      00268\n         LA    R0,=CL4'INIT'    ADDR OF 'INIT'                          00269\n         ST    R0,PARMLST2+4    SAVE IN PARM LIST                       00270\n         MVI   PARMLST2+4,X'80' END OF PARM LIST                        00271\n         LA    R1,PARMLST2      POINT TO PARM LIST                      00272\n         LINK  EP=DYNAM         CALL DYNAM FOR INITIALIZATION           00273\n         LTR   R15,R15          OKAY?                                   00274\n         BZ    GETCMD           YEP                                     00275\n         PUT   (R10),ERR007                                             00276\n         WTO  'DYN007E DYNAM INITIALIZATION FAILED',ROUTCDE=(11)        00277\n         LA    R8,7                                                     00278\n         B     DIEWDMP                                                  00279\nGETCMD   LA    R2,CARDS                                                 00280\n         LA    R4,4                                                     00281\n         MVI   CALLFLAG,X'00'          SET UP CALL FLAG                 00282\nGETCMD1  GET   (R9)                                                     00283\n         MVI   INFOREC,C' '                                             00284\n         MVC   INFOREC+1(L'INFOREC-1),INFOREC                           00285\n         MVC   INFODATA(80),0(R1)                                       00286\n         C     R2,=F'4'                                                 00287\n         BNE   GETCMD2                                                  00288\n         MVI   INFOCNTL,C'0'                                            00289\nGETCMD2  LR    R6,R1                                                    00290\n         PUT   (R10),INFOREC                                            00291\n         LR    R1,R6                                                    00292\n         MVC   0(72,R2),0(R1)                                           00293\n         LA    R3,72                                                    00294\n         LR    R5,R2                                                    00295\nFINDSEMI CLI   0(R5),C';'                                               00296\n         BE    GOTSEMI                                                  00297\n         LA    R5,1(R5)                                                 00298\n         BCT   R3,FINDSEMI                                              00299\n         LA    R2,72(R2)                                                00300\n         BCT   R4,GETCMD1                                               00301\n         PUT   (R10),ERR021                                             00302\n         WTO  'DYN021E CONTINUATION EXCEEDS FOUR CARDS',ROUTCDE=(11)    00303\n         LA    R8,21                                                    00304\n         B     SXERRTST                                                 00305\nGOTSEMI  EQU   *                                                        00306\n         CLC   CARDS(4),=CL4'CALL;'                                     00307\n         BE    CALLUTIL                                                 00308\n         CLC   CARDS(4),=CL4'END;'                                      00309\n         BE    XEQUTIL                                                  00310\n         CLC   CARDS(4),=CL4'END '                                      00311\n         BE    XEQUTIL                                                  00312\n         CLC   CARDS(5),=CL5'INFO  '                                    00313\n         BE    NOSUPORT                                                 00314\n         CLC   CARDS(6),=CL6'ALLOC '                                    00315\n         BE    GOODCMD                                                  00316\n         CLC   CARDS(7),=CL7'ALLOCR '                                   00317\n         BE    NOSUPORT                                                 00318\n         CLC   CARDS(8),=CL8'UNALLOC '                                  00319\n         BE    GOODCMD                                                  00320\n         CLC   CARDS(7),=CL7'CONCAT '                                   00321\n         BE    GOODCMD                                                  00322\n         CLC   CARDS(9),=CL9'UNCONCAT '                                 00323\n         BE    GOODCMD                                                  00324\n         CLC   CARDS(7),=CL7'REMOVE '                                   00325\n         BE    GOODCMD                                                  00326\n         CLC   CARDS(8),=CL8'DDALLOC '                                  00327\n         BE    GOODCMD                                                  00328\n         PUT   (R10),ERR011                                             00329\n         WTO  'DYN011E COMMAND IS INVALID',ROUTCDE=(11)                 00330\n         LA    R8,11                                                    00331\n         B     SXERRTST                                                 00332\nNOSUPORT PUT   (R10),ERR015                                             00333\n         WTO  'DYN015E DYNAM COMMAND NOT YET SUPPORTED',ROUTCDE=(11)    00334\n         LA    R8,15                                                    00335\n         B     SXERRTST                                                 00336\nGOODCMD  LA    R1,CARDS                                                 00337\nFINDSPC  CLI   0(R1),C' '       IS THIS THE SPACE AFTER THE CMD?        00338\n         BE    GOTSPACE         YEP                                     00339\n         LA    R1,1(R1)         NOPE-POINT TO NEXT CHAR                 00340\n         B     FINDSPC          AND TRY AGAIN                           00341\nGOTSPACE LA    R1,1(R1)         POINT PAST THE SPACE                    00342\n         LA    R0,CARDS                                                 00343\n         ST    R0,PARMLST2+4    SAVE THE ADDR OF THE CMD                00344\n         ST    R1,PARMLST2+8    AND THE ADDR OF THE KEYWORDS            00345\n         MVI   PARMLST2+8,X'80' MARK THE END OF THE LIST                00346\n         LA    R1,PARMLST2      POINT TO THE LIST                       00347\n         LINK  EP=DYNAM         CALL DYNAM                              00348\n         LTR   R15,R15          WAS IT SUCCESSFUL                       00349\n         BNZ   BADCMD           NOPE                                    00350\n         PUT   (R10),INF016                                             00351\n         B     GETCMD                                                   00352\nBADCMD   C     R15,=F'20'       IS IT A KEYWORD ERROR?                  00353\n         BE    KEYERR           YEP                                     00354\n         C     R15,=F'28'       NOPE-IS IT A VALUE ERROR?               00355\n         BE    VALERR           YEP                                     00356\n         C     R15,=F'4'        NOPE-IS IT A ENV/SYS ERROR?             00357\n         BE    TYPE4ERR         YEP                                     00358\n         PUT   (R10),ERR008    PUT OUT ERROR MESSAGE                    00359\nCMDFAIL  WTO  'DYN008E SYSTEM ERROR IN CALL TO DYNAM',ROUTCDE=(11)      00360\n         LA    R8,8                                                     00361\n         B     DIEWDMP                                                  00362\nTYPE4ERR DS    0H                                                       00363\n         LA    R1,DYNAM                                                 00364\n         TM    10(R1),B'00000111'                                       00365\n         BO    CMDFAIL                                                  00366\n         TM    10(R1),B'00000100'                                       00367\n         BNO   TYPE4ER1                                                 00368\n      WTO 'DYN023E ENVIRONMENT ERROR FOUND DURING COMMAND',ROUTCDE=(11) 00369\n         PUT   (R10),ERR023                                             00370\n         LA    R8,23                                                    00371\n         B     EXERRTST                                                 00372\nTYPE4ER1 DS    0H                                                       00373\n      WTO 'DYN024E UNAVAILABLE SYSTEM RESOURCE REQUESTED',ROUTCDE=(11)  00374\n         PUT   (R10),ERR024                                             00375\n         LA    R8,23                                                    00376\n         B     EXERRTST                                                 00377\nKEYERR   PUT   (R10),ERR009                                             00378\n         WTO  'DYN009E KEYWORD IS INVALID',ROUTCDE=(11)                 00379\n         LA    R8,9                                                     00380\n         B     SXERRTST                                                 00381\nVALERR   PUT   (R10),ERR010                                             00382\n         WTO  'DYN010E KEYWORD ASSIGN INVALID VALUE',ROUTCDE=(11)       00383\n         LA    R8,10                                                    00384\nSXERRTST NI    FLAGS,X'FF'-RCCODE                                       00385\n         TM    FLAGS,SCODE                                              00386\n         BNO   SXERR1                                                   00387\n         OI    FLAGS,RCCODE                                             00388\n         B     EXIT03                                                   00389\nSXERR1   TM    FLAGS,SIGNORE                                            00390\n         BNO   EXIT03                                                   00391\n         SR    R8,R8                                                    00392\n         B     GETCMD                                                   00393\nEXERRTST NI    FLAGS,X'FF'-RCCODE                                       00394\n         TM    FLAGS,XCODE                                              00395\n         BNO   EXERR1                                                   00396\n         OI    FLAGS,RCCODE                                             00397\n         B     EXIT03                                                   00398\nEXERR1   TM    FLAGS,XIGNORE                                            00399\n         BNO   EXIT03                                                   00400\n         SR    R8,R8                                                    00401\n         B     GETCMD                                                   00402\nDIEWDMP  ABEND (R8),DUMP,,USER                                          00403\nDIENODMP DS    0H                                                       00404\n         NI    FLAGS,X'FF'-RCCODE                                       00405\n         TM    FLAGS,ICODE                                              00406\n         BNO   DYNODMP1                                                 00407\n         OI    FLAGS,ICODE                                              00408\nDYNODMP1 DS    0H                                                       00409\n         C     R8,=F'12'                                                00410\n         BL    EXIT01                                                   00411\n         C     R8,=F'16'                                                00412\n         BH    EXIT02A                                                  00413\n         B     EXIT02                                                   00414\nCALLUTIL DS    0H                                                       00415\n         MVI   CALLFLAG,X'FF'          SET FLAG FOR CALL                00416\nXEQUTIL  DS    0H                                                       00417\n         CLI   UTILNAME,C' '    DID USER SPECIFY UTILTIY                00418\n         BNE   XEQUTIL1         YES                                     00419\n         PUT   (R10),INF030     NO, TELL USER                           00420\n         B     EXIT03           EXIT                                    00421\nXEQUTIL1 MVC   INFOREC,INF031                                           00422\n         MVC   INFOREC+9(8),UTILNAME                                    00423\n         PUT   (R10),INFOREC                                            00424\n         LA    R2,UTILNAME                                              00425\n         LA    R1,PARMLST                                               00426\n         LINK  EPLOC=(R2),SF=(E,REMLNK)                                 00427\n         LTR   R8,R15           DID WE GET A RETURN CODE                00428\n         BNZ   UTILRET          YES                                     00429\n         PUT   (R10),INF029     NO, TELL USER                           00430\n         CLI   CALLFLAG,X'FF'          WAS CALL SPECIFIED               00431\n         BE    GETCMD                  YES GO GET NEXT CARD             00432\n         B     EXIT03           EXIT                                    00433\nUTILRET  OI    FLAGS,RCCODE     YES, FLAG AS RETURN CODE                00434\n         WTO  'DYN028I SEE REPORT LISTING-INVOKED PROGRAM COMPLETED WITX00435\n               H NONZERO RETURN CODE.',ROUTCDE=(11)                     00436\n         CVD   R8,DOUBLE                                                00437\n         UNPK  UNPKAREA,DOUBLE                                          00438\n         OI    UNPKAREA+9,X'F0'                                         00439\n         LA    R1,UNPKAREA                                              00440\nFINDNZER CLI   0(R1),C'0'                                               00441\n         BNE   PUTINF28                                                 00442\n         LA    R1,1(R1)                                                 00443\n         B     FINDNZER                                                 00444\nPUTINF28 LA    R2,UNPKAREA+9                                            00445\n         SR    R2,R1                                                    00446\n         MVI   INFOREC,C' '                                             00447\n         MVC   INFOREC+1(L'INFOREC-1),INFOREC                           00448\n         MVC   INFOREC(L'INF28PRE),INF28PRE                             00449\n         MVC   INFOREC+L'INF28PRE(*-*),0(R1)                            00450\n         EX    R2,*-6                                                   00451\n         LA    R1,INFOREC+L'INF28PRE                                    00452\n         LA    R1,1(R1,R2)                                              00453\n         MVC   0(L'INF28END,R1),INF28END                                00454\n         PUT   (R10),INFOREC                                            00455\n         CLI   CALLFLAG,X'FF'          WAS CALL SPECIFIED               00456\n         BE    GETCMD                  YES GO GET NEXT CARD             00457\nEXIT03   DS    0H                                                       00458\n         LA    R0,=CL3'END'                                             00459\n         ST    R0,PARMLST2+4                                            00460\n         MVI   PARMLST2+4,X'80'                                         00461\n         LA    R1,PARMLST2                                              00462\n         LINK  EP=DYNAM                                                 00463\nEXIT02   CLOSE ((R9)),MF=(E,REMOPN)                                     00464\nEXIT02A  CLOSE ((R10)),MF=(E,REMOPN)                                    00465\nEXIT01   FREEMAIN R,LV=WORKL,A=(R11)                                    00466\n         TM    FLAGS,RCCODE                                             00467\n         BO    FINI                                                     00468\n         LTR   R8,R8                                                    00469\n         BZ    FINI                                                     00470\n         ABEND (R8),,,USER                                              00471\nFINI     DS    0H                                                       00472\n         FINISH RC=(R8)                                                 00473\nMODELRPT DCB   DDNAME=DYNARPT,LRECL=133,BLKSIZE=133,RECFM=FBA,         X00474\n               DSORG=PS,MACRF=(PM)                                      00475\nMODELCTL DCB   DDNAME=DYNAIN,MACRF=(GL),DSORG=PS,EODAD=XEQUTIL          00476\nMODELOPN OPEN  (,),MF=L                                                 00477\nMODELLNK LINK EPLOC=0,SF=L                                              00478\nERR006 DC CL133' DYN006E COULD NOT OPEN CONTROL DATASET'                00479\nERR007 DC CL133' DYN007E DYNAM INITIALIZATION FAILED'                   00480\nERR008 DC CL133' DYN008E SYSTEM ERROR IN CALL TO DYNAM'                 00481\nERR009 DC CL133' DYN009E KEYWORD IS INVALID'                            00482\nERR010 DC CL133' DYN010E KEYWORD ASSIGN INVALID VALUE'                  00483\nERR011 DC CL133' DYN011E COMMAND IS INVALID'                            00484\nERR012 DC CL133' DYN012E LRECL OF CONTROL FILE NOT 80'                  00485\nERR013 DC CL133' DYN013E RECFM OF CONTROL FILE NOT F OR FB'             00486\nERR014 DC CL133' DYN014E DSORG OF CONTROL FILE NOT PS'                  00487\nERR015 DC CL133' DYN015E DYNAM COMMAND NOT YET SUPPORTED'               00488\nINF016 DC CL133' DYN016I ABOVE REQUEST SUCCESSFULLY COMPLETED'          00489\nERR017 DC CL133' DYN017E DYNAM MODULE IN NOT IN JOB LINKLIST'           00490\nERR018 DC CL133' DYN018E SPECIFIED MODULE NOT IN JOB LINKLIST'          00491\nERR019 DC CL133' DYN019E BLDL FAILED IN MODULE SEARCH'                  00492\nINF020 DC CL133' DYN020I NO PROGRAM SPECIFIED - IEFBR14 ASSUMED'        00493\nERR021 DC CL133' DYN021E CONTINUATION EXCEEDS FOUR CARDS'               00494\nINF022 DC CL133' DYN017I NO PARAMETER SPECIFIED'                        00495\nERR023 DC CL133' DYN023E ENVIRONMENT ERROR FOUND DURING COMMAND'        00496\nERR024 DC CL133' DYN024E UNAVAILABLE SYSTEM RESOURCE REQUESTED'         00497\nINF28PRE DC CL52'0DYN028I INVOKED PROGRAM COMPLETED WITH RETURN CODE '  00498\nINF28END DC CL11' (DECIMAL).'                                           00499\nINF029 DC CL133'0DYN029I INVOKED PROGRAM COMPLETED WITH A RETURN CODE OX00500\n               F ZERO.'                                                 00501\nINF030 DC CL133'0DYN030I IEFBR14 SIMULATION COMPLETES WITH A RETURN CODX00502\n               E OF ZERO.'                                              00503\nINF031 DC CL133'0DYN031I XXXXXXXX HAS BEEN CALLED BY DYNAUTIL.'         00504\nTTL001 DS 0CL133                                                        00505\n       DC CL48'1 '                                                      00506\n       DC CL38'W. S. R. C. C.   ---   D Y N A U T I L'                  00507\n       DC CL47' '                                                       00508\nTTL002 DS 0CL133                                                        00509\n       DC CL47'0 '                                                      00510\n       DC CL39'DYNAMIC ALLOCATION UTILITY PREPROCESSOR'                 00511\n       DC CL47' '                                                       00512\nTTL003 DC CL133'-CONTROL CARDS:'                                        00513\nTTL005 DC CL133'-PARAMETER VALUE:'                                      00514\nWORKD    DSECT                                                          00515\nDOUBLE   DS    D                                                        00516\nPARMADDR DS    F                                                        00517\nPARML    DS    H                                                        00518\nINFOREC  DS    0CL133                                                   00519\nINFOCNTL DS    C                                                        00520\nINFODATA DS    CL132                                                    00521\nFLAGS    DS    X                                                        00522\nICODE    EQU   B'10000000'                                              00523\nSCODE    EQU   B'01000000'                                              00524\nSIGNORE  EQU   B'00100000'                                              00525\nXCODE    EQU   B'00010000'                                              00526\nXIGNORE  EQU   B'00001000'                                              00527\nRCCODE   EQU   B'00000100'                                              00528\nRESVD1   EQU   B'00000010'                                              00529\nRESVD2   EQU   B'00000001'                                              00530\nCALLFLAG DS    X                                                        00531\nUNPKAREA DS   CL10                                                      00532\nPARMTBL  DS    0CL184           SAVE PARMS FROM EXEC CARD               00533\nUTILNAME DS    CL8              UTILITY TO CALL                         00534\nVERBFLDS DS    0CL64            SPACE FOR VERBS FROM PARM               00535\nVERB     DS    8CL8                                                     00536\nDDNMFLDS DS    0CL112           DDNAMES SPECIFIED                       00537\nRPTDD    DS    CL8              REPORT DDNAME FOR THIS PROGRAM          00538\nCTLDD    DS    CL8              CONTROL CARDS FOR THIS PROGRAM          00539\nSYSDDS   DS    12CL8            SYSIN FOR UTILITY                       00540\nDDNTBLLN DS    H                                                        00541\nDDNTBL   DS    12CL8            DDNAMES FOR UTILITY                     00542\nPARMLST  DS    2F               PARMLST FOR UTILITY CALL                00543\nPARMLST2 DS    3F               PARMLST FOR DYNAM CALLS                 00544\nDYNAM    DS    F                WORK FOR DYNAM                          00545\nPARMLEN  DS    H                LENGTH OF PARM FOR UTILTIY CALL         00546\nPARMFLD  DS    CL100            PARMS FOR UTILITY CALL                  00547\nBLDLFF   DS    H                                                        00548\nBLDLLL   DS    H                                                        00549\nBLDLNAME DS    CL8                                                      00550\nBLDLTTR  DS    CL3                                                      00551\nBLDLK    DS    X                                                        00552\nBLDLZ    DS    X                                                        00553\nBLDLC    DS    X                                                        00554\nRPTDCB   DCB   DDNAME=DYNARPT,LRECL=133,BLKSIZE=133,RECFM=FBA,         X00555\n               DSORG=PS,MACRF=(PM)                                      00556\nLRPTDCB  EQU   *-RPTDCB                                                 00557\nCNTLIN   DCB   DDNAME=DYNAIN,MACRF=(GL),DSORG=PS,EODAD=XEQUTIL          00558\nLCNTLIN  EQU   *-CNTLIN                                                 00559\nREMOPN   OPEN  (,),MF=L                                                 00560\nLREMOPN  EQU   *-REMOPN                                                 00561\nREMLNK   LINK EPLOC=0,SF=L                                              00562\nLREMLNK  EQU   *-REMLNK                                                 00563\nCARDS    DS    4CL72                                                    00564\nWORKL    EQU   *-WORKD          LENGTH OF DSECT                         00565\n         END   DYNAUTIL                                                 00566\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYNAUTLH": {"ttr": 3585, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x00]\\x00]\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 93, "newlines": 93, "modlines": 0, "user": "WSRCC"}, "text": "DYNAUTIL is a reentrant, refreshable, and reusable Assembler language\nprogram that provides dynamic allocation for batch programs and\nutilities.  This is accomplished by passing control card images\nto the University of Manitoba's DYNAM SVC 99 interface.  DYNAUTIL can\nrun as a front-end to a batch task or can be called by a batch task\nduring it's execution.\n\nControl information is passed to DYNAUTIL via a parameter and\nvia control cards.  The parameter has the following format:\n\n'progname/verbs/DYNAUTIL ddnames/utility ddnames/passed parm value'\n\nThe parameter is made up of fields which are separated by slashes.\nFields are made up of elements (with the exception of the 'passed\nparm value' field) which are zero to eight alphameric characters\nseparated by commas.  The 'passed parm value' field is taken as is and\npassed to the called program (if any).\n\nIf a field that is not to be modified lies between to fields that\nare, slashes must still be included.  The same goes for elements.\nTrailing slashes and commas are not necessary or permitted.\n\nExample -\n\nNo progname, a verb, no DYNAUTIL ddnames, second utility ddname, and\nno passed parm value:\n\n   '/ICODE//,SYSOUT'\n\nThe fields are defined as follows:\n\nprogname    - the name of a load module in the job's current link list\n              to be executed upon successful completion of DYNAUTIL.\n              If progname is not specified, DYNAUTIL does not pass\n              control to another program.  In this way, datasets\n              dynamically allocated are treated if allocated by an\n              IEFBR14 step.\n\nverbs       - zero to eight elements that are used to specify how\n              DYNAUTIL is to execute.  Currently, these five\n              elements are valid verbs:\n\n              ICODE  - specifies that the step is to terminate with\n                       a return code rather than an user abend if\n                       there is an error in invocation (parameter\n                       error).\n              SCODE  - specifies that the step is to terminate with\n                       a return code rather than an user abend if\n                       there is an error in the syntax of the control\n                       statements.\n              XCODE  - specifies that the step is to terminate with\n                       a return code rather than an user abend if\n                       there is an error in the execution of a control\n                       statement.\n              SIGNORE - specifies that DYNAUTIL is to continue to\n                        process control statements rather than\n                        terminate with an user abend if errors are\n                        found in the syntax of the control statements.\n              XIGNORE - specifies that DYNAUTIL is to continue to\n                        process control statements rather than\n                        terminate with an user abend if errors are\n                        encountered during the execution of the control\n                        statements.\n\nDYNAUTIL\n    ddnames - zero to two elements that specify alternate ddnames\n              for DYNAUTIL to use for it's report and control files.\n              The first element specifies the report ddname: it's\n              default is DYNARPT.  The second element specifies the\n              control (SYSIN) ddname: it's default is DYNAIN.\n\nutility\n    ddnames - zero to twelve elements that specify alternate ddnames\n              for IBM utilities to use.  For the order of these ddnames\n              and their defaults, see the appropriate IBM manual.\n\npassed\n parm value - this field is passed as is to the called program (if\n              any) as the first parameter of a two parameter list.\n              The second parameter are the alternate utility ddnames\n              (above).\n\nPassed parameters -\n\nApplications programs called may access two parameters: the first\nbeing the 'passed parm value' field which is a two byte length\nfollowed by the passed parm value string.  The second is the alternate\nutility ddnames which consists of the a two byte length (always 96)\nfollowed by twelve 8 byte \"slots\" (for a total of 96 bytes).  If the\nelement is not overridden in the parameter, the slot is zero filled;\nif the element is less than eight characters in length it is right\nfilled with blanks.  Thus, the application program can use this\nas a second parameter area for passing values.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FINISH": {"ttr": 3588, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x00\\\\\\x00\\\\\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 92, "newlines": 92, "modlines": 0, "user": "WSRCC"}, "text": "         MACRO\n&LABEL   FINISH  &RC=0,                ABSOLUTE OR (R) FOR RETURN CODE *\n               &R=,                    PREFIX FOR REGISTERS            *\n               &GEN=NOGEN,             GEN - LIST CODE FOR FREEMAIN    *\n               &RC1=,                  ABS OR (R) VALUE RETURNED IN R1 *\n               &RTRNOFF=,              RETURN OFFSET VALUE             *\n               &RETURN=YES             YES - GENERATE CODE FOR RETURN\n.*\n.*\n.*\n         GBLB  &RFLAG\n         GBLC  &RLEN,&RLENA,&RLENB,&RSP,&CT\n         LCLC  &OPCD,&OPC1,&RETCODE,&RETCD1\n.*\n.*\n          AIF   ('&SYSLIST(1)' EQ '').ERR99\n          MNOTE 8,'*** PARTIAL REGISTER LIST NO LONGER SUPPORTED IN BEG*\n                IN OR FINISH ***'\n.ERR99   ANOP\n.*\n.*\n&RETCODE SETC  '&RC(1)'\n         AIF   ('&RETCODE' NE '').RC99\n&RETCODE SETC  '0'\n         MNOTE *,'*** NO RETURN CODE SPECIFIED ** ZERO ASSUMED ***'\n.RC99    ANOP\n.*\n.*\n&OPCD    SETC  'LR'\n         AIF   ('&RC'(1,1) EQ '(').OP99\n&OPCD    SETC  'LA'\n.OP99    ANOP\n.*\n.*\n.*\n&RETCD1  SETC  '&RC1(1)'\n         AIF   ('&RETCD1' EQ '').OP199\n.*\n.*\n&OPC1    SETC  'LR'\n         AIF   ('&RC1'(1,1) EQ '(').OP199\n&OPC1    SETC  'LA'\n.OP199   ANOP\n         CNOP  0,4\n&LABEL   OI    4(&R.13),X'FF'\n         AIF   (NOT &RFLAG).GOHOME\n.*\n.*\n.RENT   ANOP\n         AIF   ('&OPCD' NE 'LR').RENT10\n         LR    &R.2,&RETCODE\n&RETCODE SETC  '&R.2'\n.RENT10  ANOP\n         AIF   ('&OPC1' NE 'LR').RENT20\n         LR    &R.3,&RETCD1\n&RETCD1  SETC  '&R.3'\n.RENT20  ANOP\n         LR    &R.1,&R.13\n         L     &R.13,4(&R.13)\n         MNOTE *,'*      FREEMAIN R,LV=&RLENA.&RLENB,A=(1),SP=&RSP'\n         PUSH  PRINT\n         PRINT &GEN\n         FREEMAIN R,LV=&RLEN,A=(1),SP=&RSP\n         POP   PRINT\n         AGO   .COMEND\n.*\n.*\n.*\n.GOHOME ANOP\n         L     &R.13,4(&R.13)\n.COMEND  ANOP\n         &OPCD &R.15,&RETCODE\n         L     &R.14,12(&R.13)\n         AIF   ('&OPC1' EQ '').GH90\n         L     &R.0,20(&R.13)\n         &OPC1 &R.1,&RETCD1\n         LM    &R.2,&R.12,28(&R.13)\n         AGO   .GH99\n.GH90    ANOP\n         LM    &R.0,&R.12,20(&R.13)\n.GH99    ANOP\n.*\n         AIF   ('&RETURN' NE 'YES').RET99\n         MVI   12(&R.13),X'FF'\n.*\n         AIF   ('&RTRNOFF' EQ '').BR14\n         B     &RTRNOFF.(&R.14)      TAKE SPECIAL RETURN WITH OFFSET\n         AGO   .RET99\n.BR14    ANOP\n         BR    &R.14\n.RET99   ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IDCMSGEN": {"ttr": 3591, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x06<\\x06<\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 1596, "newlines": 1596, "modlines": 0, "user": "WSRCC"}, "text": "         TITLE 'W.S.R.C.C.  <IDCMSGEN>  GENERATE IDCAMS INPUT CARDS FRO*\n               M OBJECTS IN YOUR VSAM CATALOG - J A SHELL'\n*---------------------------------------------------------------------*\n*                                                                     *\n*                             <IDCMSGEN>                              *\n*                                                                     *\n*           ACCESS METHOD SERVICES (IDCAMS) SUPPORT UTILITY           *\n*                                                                     *\n*      IDCMSGEN WILL ALLOW YOU TO CREATE AN IDCAMS SOURCE DECK        *\n*      FROM MOST OBJECTS IN YOUR VSAM CATALOG. THIS WILL ALLOW        *\n*      YOU TO REPLACE MISSING IDCAMS DECKS OR, PERHAPS, DISPENSE      *\n*      WITH SAVING THEM IN THE FIRST PLACE. IT WILL GENERATE...       *\n*        (1) DELETE-DEFINE-LISTCAT CLUSTER CARDS FOR ANY NORMAL       *\n*                ESDS, KSDS OR RRDS, VIA SYSIN CARDS;                 *\n*        (2) ALL IMPORT CONNECT CARDS FOR RELATED UCAT'S, AND         *\n*        (3) ALL DEFINE ALIAS OR NONVSAM CARDS, FOR A MCAT, VIA       *\n*                THE EXECUTE CARD PARM FIELD.                         *\n*                                                                     *\n*                       *** SAMPLE JCL ***                            *\n*                                                                     *\n*      //GEN     EXEC PGM=IDCMSGEN   <,PARM='...'>                    *\n*      //STEPCAT  DD  DISP=SHR,DSN=CATALOG.VIBM840                    *\n*      //STEPLIB  DD  DISP=SHR,DSN=ADM.DP59031.LOADLIB                *\n*      //SYSUDUMP DD  SYSOUT=A,HOLD=YES                               *\n*      //SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(1,1)), IDCAMS SYSIN      *\n*      //         DCB=(BLKSIZE=80,LRECL=80,RECFM=F)                   *\n*      //SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(1,1)),        SYSPRINT   *\n*      //         DCB=(BLKSIZE=629,LRECL=125,RECFM=VB)                *\n*      //SYSPRINT DD  SYSOUT=A,HOLD=YES             IDCMSGEN SYSPRINT *\n*      //SYSUT3   DD  SYSOUT=B,HOLD=YES                      SYSPUNCH *\n*      //SYSIN    DD  *,DCB=BLKSIZE=80                       SYSIN    *\n*         ...CONTROL CARDS...                                         *\n*      /*                                                             *\n*                                                                     *\n*      ...WHERE THE PARM FIELD CAN BE USED FOR ALIAS/NVSAM/UCAT,      *\n*        OR SYSIN CARDS CAN BE USED FOR CLUSTERS, BUT NOT BOTH!!!     *\n*            IF A VALID PARM IS DETECTED, SYSIN IS IGNORED.           *\n*                                                                     *\n*                         VALID PARM FORMAT                           *\n*      COLUMN  CODE  MEANING                                          *\n*         1      A   GENERATE ALL DEFINE ALIAS CARDS...               *\n*                N   GENERATE ALL DEFINE NONVSAM CARDS...             *\n*                U   GENERATE ALL IMPORT CONNECT UCAT CARDS...        *\n*                        ...FOR THE DEFAULT CATALOG.                  *\n*                                                                     *\n*         2      ,   (MUST BE COMMA IF CATALOG OVERRIDE FOLLOWS)      *\n*                                                                     *\n*       3-46   XXXX  OVERRIDING VALUE (MAX 44 BYTES) TO BE INSERTED   *\n*                    IN ALL CATALOG PARAMETERS. CAN BE 'CATNAME/PSWD' *\n*                    IF LENGTH LIMIT NOT EXCEEDED. USEFUL FOR CATALOG *\n*                    MIGRATIONS.                                      *\n*                                                                     *\n*       AN INVALID PARM WILL PRINT, AND THEN GO SCAN THE SYSIN.       *\n*      THIS, OR A VALID CODE FOLLOWED BY A NON-COMMA, CAN BE USED     *\n*          TO ADD A DOCUMENTARY COMMENT TO THE OUTPUT LISTING.        *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                         CONTROL CARD FORMAT                         *\n*      FIELD  MAXLEN  CONTENTS                                        *\n*        1      53    ENTRYNAME/PASSWORD OF CLUSTER TO BE GENERATED.  *\n*                     IT MUST BEGIN IN CARD COLUMN 1 AND CONTAIN NO   *\n*                     EMBEDDED BLANKS. ENTRYNAME MUST BE DEFINABLE    *\n*                     AS A CLUSTER (NO AIX/MCAT/UCAT).                *\n*                                                                     *\n*        2      --    AT LEAST ONE BLANK MUST FOLLOW FIELD 1 IF A     *\n*                     CATNAME/PASSWORD IS TO BE PROVIDED.             *\n*                                                                     *\n*        3      53    CATNAME/PASSWORD OF CONTROLLING CATALOG.        *\n*                     IF THE VALUE WOULD EXTEND PAST CARD COLUMN 71,  *\n*                     CODE A NON-BLANK CHARACTER IN CARD COLUMN 72,   *\n*                     AND CODE THE ENTIRE VALUE BEGINNING IN CARD     *\n*                     COLUMN 1 OF THE NEXT CARD.                      *\n*                                                                     *\n*        4       1    ANY NON-BLANK CHARACTER IN CARD COLUMN 72       *\n*                     WILL INDICATE A DESIRE TO CONTINUE THIS         *\n*                     REQUEST IN THE NEXT CARD. HOWEVER, IF THE       *\n*                     SCAN FINDS TWO DISTINCT FIELDS SEPARATED BY     *\n*                     AND TERMINATED BY AT LEAST ONE BLANK, IT        *\n*                     WILL IGNORE ANY VALUE IN CARD COLUMN 72.        *\n*                                                                     *\n*                              NOTES.                                 *\n*                                                                     *\n*      1. THIS PROGRAM ATTEMPTS TO MINIMIZE THE NUMBER OF CARDS       *\n*         IT WILL GENERATE. THEREFORE, IT WILL NOT GENERATE A         *\n*         PARAMETER IF IT IS THE NORMAL SYSTEM DEFAULT. IF YOUR       *\n*         INSTALLATION ALTERS THE NORMAL DEFAULTS, YOU MUST ALSO      *\n*         ALTER THIS PROGRAM. ALSO, IF A PARAMETER IS IDENTICAL       *\n*         FOR BOTH THE DATA AND INDEX COMPONENT, IT WILL BE SHOWN     *\n*         AT THE CLUSTER LEVEL ONLY.                                  *\n*                                                                     *\n*      2. THIS PROGRAM WILL REQUIRE ACCESS TO THE <DTYP2UNT>          *\n*         SUBROUTINE. THIS WILL COMPARE THE UCB-TYPE HEX DEVICE       *\n*         CODE SHOWN IN THE IDCAMS LISTING WITH THE SYSTEM            *\n*         DEVICE NAME TABLE, MODULE <DEVNAMET>, AND RETURN A          *\n*         LEGITIMATE UNITNAME WHICH CAN BE INSERTED IN IDCAMS CARDS.  *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\nIDCMSGEN CSECT\nR0       EQU   0                   *************\nR1       EQU   1                   *           *\nR2       EQU   2                   * REGISTERS *\nR3       EQU   3                   *    ARE    *\nR4       EQU   4                   *  EQUATED  *\nR5       EQU   5                   *    TO     *\nR6       EQU   6                   *  SYMBOLS  *\nR7       EQU   7                   *    SO     *\nR8       EQU   8                   *   THEY    *\nR9       EQU   9                   *   WILL    *\nR10      EQU   10                  *   SHOW    *\nR11      EQU   11                  *    ON     *\nR12      EQU   12                  *   CROSS   *\nR13      EQU   13                  * REFERENCE *\nR14      EQU   14                  *           *\nR15      EQU   15                  *************\n         USING *,R15               INITIALLY USE ENTRY AS BASE REGISTER\n         B     $BG0001             BRANCH AROUND CONSTANTS\n         DC    CL8'IDCMSGEN'       CSECT ID\n         DC    C'_',C'&SYSDATE.@&SYSTIME._' SYSTEM DATE AND TIME\n$BG0001A DS    18F                 MY REGISTER SAVE AREA\n$BG0001D DC    A($BG0001A+4096)\n         DC    A($BG0001A+8192)\n$BG0001  DS    0H\n         STM   R14,R12,12(R13)     SAVE CLG PGMS REGS\n         LA    R3,$BG0001A         LOAD ADDR OF MY REG SAVE AREA\n         ST    R13,4(R3)           STORE ADDR OF CLG SAVE IN MINE\n         ST    R3,8(R13)           STORE ADDR OF MY SAVE IN CLG PGM\n         LR    R13,R3              POINT REG 13 AT MY SAVE AREA\n         DROP  R15                 DROP INITIAL BASE REGISTER\n         USING $BG0001A,R13,R12,R10\n         L     R12,$BG0001D        LOAD 2ND BASE REGISTER\n         L     R10,$BG0001D+4      LOAD 3RD BASE REGISTER\n         L     R3,0(R1)            LOAD ADDRESS AND\n         LH    R4,0(R3)                 LENGTH OF PARM INFORMATION\n         LTR   R4,R4               WAS PARM OMITTED (LENGTH=0)...\n         BZ    GETIME                 ..YES, BYPASS PARM PROCESSING\n* P A R M   P R O C E S S I N G * * * * * * * * * * * * * * * * * * * *\n         LA    R3,2(R3)            INCREMENT PAST THE LENGTH\n         CLI   0(R3),X'40'         1ST BYTE OF PARM BLANK...\n         BE    ENDPARM                ..YES, BYPASS PARM PROCESSING\n         MVC   LCNAME,BLANKS       CLEAR ENTRIES NAME LITERAL\n         MVC   INCC(9),=C'0  *PARM*' RESET INCARD LITERAL\n         CH    R4,=H'80'           IS PARM MORE THAN 80 BYTES...\n         BNH   MOVEPARM               ..NO, GO MOVE IT TO INCARD\n         LH    R4,=H'80'              ..YES, TRUNCATE IT TO EIGHTY\nMOVEPARM BCTR  R4,0                DECREMENT LENGTH FOR EXECUTE\n         EX    R4,MVCPARM          MOVE PARM TO INCARD\nACHK     EQU   *\n         CLI   0(R3),C'A'          ALIAS REQUEST...\n         BNE   NCHK                   ..NO, GO CHECK FURTHER\n         MVC   LCPARM(5),=C'ALIAS'    ..YES, INDICATE LISTCAT ALIAS\n         MVC   DFPMTYPE,=C'ALIAS'            INDICATE DEFINE ALIAS\n         B     ENDPARM                       AND CONTINUE PROCESSING\n*\nNCHK     EQU   *\n         CLI   0(R3),C'N'          NONVSAM REQUEST...\n         BNE   UCHK                   ..NO, GO CHECK FURTHER\n         MVC   LCPARM(7),=C'NONVSAM'  ..YES, INDICATE LISTCAT NONVSAM\n         MVC   DFPMTYPE,=C'NVSAM'            INDICATE DEFINE NVSAM\n         B     ENDPARM                       AND CONTINUE PROCESSING\n*\nUCHK     EQU   *\n         CLI   0(R3),C'U'              USERCATALOG REQUEST...\n         BNE   BADPARM                    ..NO, GO PUT ERROR MESSAGE\n         MVC   LCPARM(11),=C'USERCATALOG' ..YES, INDICATE LISTCAT UCAT\n         MVC   DFPMCMND(23),=CL23' IMPORT CONNECT OBJ ( ('\n         MVI   DFNVVSNO+13,C')'                  AND INSERT RT PAREN\n* IF PARM='X,CATNAME/PSWD'    ...WHERE X IS A VALID PARM REQUEST CODE,\n* THE DATA FOLLOWING THE COMMA (REQUIRED) WILL BE USED TO FILL ALL CAT\n* PARAMETERS (MAXIMUM 44 BYTES) WITHOUT ANY FURTHER DATA CHECKING!!!!!\nENDPARM  EQU   *\n         CLI   1(R3),C','          IS REQUEST CODE FOLLOWED BY COMMA...\n         BNE   GETIME                 ..NO, GET CAT INFO FROM '-' LINE\n         MVC   DFPMCTNM,INCARD+2      ..YES, USE IT (HOPE ITS CORRECT),\n         MVI   DASHSW+1,X'F0'                AND IGNORE '-' LINE INFO\n         B     GETIME              CONTINUE PROCESSING\n*\nMVCPARM  MVC   INCARD(1),0(R3)     *** EXECUTED ***\n*\nBADPARM  EQU   *\n         MVC   INMSG,STARS         FLAG PARM DATA AS ERRONEOUS\n         BAL   R11,PUTSIN          GO PRINT BAD PARM INFO\n         MVC   INCC(9),=C'0 *SYSIN*' RESET PRINT LINE LITERAL\nGETIME   EQU   *\n*        TIME  DEC                 GET CURRENT DATE/DECIMAL TIME * * *\n         LA    R1,2                LOAD PARAMETER REG1 (DEC)         *\n         SVC   11                  ISSUE TIME SVC                    *\n         ST    R1,DBLWRD+4         MOVE JULIAN DATE INTO CORE AND\n         ED    HDATE,DBLWRD+5           EDIT INTO HEADER LITERAL\n         ST    R0,DBLWRD           MOVE DECIMAL TIME INTO CORE THEN\n         MVO   DBLWRD+4(4),DBLWRD(3)    SHIFT INTO PACKED FORMAT AND\n         ED    HTIME,DBLWRD+4           EDIT INTO HEADER LITERAL\n*        OPEN  (SINDCB,(INPUT),PRTDCB,(OUTPUT),UT3DCB,(OUTPUT)) * * * *\n         LA    R1,SINOB            LOAD PARAMETER REG1                *\n         SVC   19                  ISSUE OPEN SVC                     *\n         CLI   LCPARM,C'E'         NON-PARM REQUEST...\n         BNE   PUTLCAT                ..NO, GO PUT LISTC CARDS\nGETNSIN  EQU   *\n         BAL   R11,GETSIN          GET SYSIN RECORD\n         ZAP   LINECTR,LINECTR     FORCE PAGING AND\n         SR    R3,R3               ZERO BYTE COUNT\n         LA    R4,INWORK           POINT AT CARD COLUMN ONE\n         LA    R5,53               SET STOPPER FOR SCAN\n         MVC   CLNMWK,BLANKS       BLANK CLUSTER NAME AND\n         MVC   CTNMWK,BLANKS             CATALOG NAME WORK AREAS\n         LA    R6,CLNMWK           POINT AT CLUSTER NAME WORK\n         BAL   R11,BSCAN           EXTRACT CLUSTER NAME/PASSWORD\n         MVC   DLNAME,CLNMWK       MOVE NAME TO DELETE\n         MVC   DFCLNAME,CLNMWK                  DEFINE CLUSTER\n         MVC   LCNAME,CLNMWK                AND LISTCAT CARDS\n         LA    R5,18(R5)           UP COUNT TO BYTES LEFT IN CARD\n         CLC   INWORK(71),BLANKS   IS REST OF CARD BLANK...\n         BNE   GTCTNM                 ..NO, GO EXTRACT CATALOG NAME\n         CLI   INWORK+71,X'40'     IS THIS CARD CONTINUED...\n         BE    PUTLCAT                ..NO, GO PUT LISTCAT W/O CAT\n         BAL   R11,PUTSIN          GO PRINT EXHAUSTED CARD\n         BAL   R11,GETSIN          GET NEXT SYSIN RECORD\n         CLC   INWORK(71),BLANKS   IS ENTIRE CARD BLANK...\n         BE    PUTLCAT                ..YES, GO PUT LISTCAT W/O CAT\n         LA    R4,INWORK           POINT AT CARD COLUMN ONE\n         LA    R5,71               SET BYTES LEFT IN CARD\nGTCTNM   EQU   *\n         CLI   0(R4),X'40'         IS NEXT BYTE BLANK...\n         BNE   CTNMB1                 ..NO, CATALOG NAME BYTE 1\n         LA    R4,1(R4)               ..YES, POINT AT NEXT BYTE AND\n         BCT   R5,GTCTNM                     CHECK IT (IF ANY)\n         B     PUTLCAT             SHOULD NEVER HAPPEN\n*                                  NOW AT 1ST BYTE OF CATALOG NAME\nCTNMB1   EQU   *\n         MVI   INWORK+71,X'40'     INSURE BLANK STOPPER IN COL 72\n         SR    R3,R3               ZERO BYTE COUNT\n         LA    R6,CTNMWK           POINT AT CATALOG NAME WORK\n         CH    R5,=H'53'           BYTES LEFT MORE THAN 53...\n         BNH   BYTST2                 ..NO, EXTRACT CATALOG NAME/PSWD\n         LA    R5,53                  ..YES, RESET TO MAXIMUM OF 53\nBYTST2   EQU   *\n         BAL   R11,BSCAN           EXTRACT CATALOG NAME/PASSWORD\n         MVC   DLCTNM,CTNMWK       MOVE NAME TO DELETE\n         MVC   DFCTNM,CTNMWK                    DEFINE CLUSTER\n         MVC   LCCTNM,CTNMWK                AND LISTCAT CARDS\nPUTLCAT  EQU   *\n         BAL   R11,PUTSIN          PRINT GOOD INPUT CARD\n         MVC   INCC(9),=C'0*SYSUT1*' SET PRINT LINE LITERAL\n*        OPEN  (UT1DCB,(OUTPUT))   OPEN SYSUT1 * * * * * * * * * * * *\n         MVI   UT1OB,X'8F'         SET OPTION BYTE FOR OPEN          *\n         LA    R1,UT1OB            LOAD PARAMETER REG1               *\n         SVC   19                  ISSUE OPEN SVC                    *\n         MVC   INCARD,LCCMND       MOVE -LISTC-ENT- CARD TO OUTPUT\n         BAL   R11,PUTUT1          GO PUT/PRINT IDCAMS INPUT CARD\n*LISTCAT ALIAS                                                -\n*LISTCAT ENT ( XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX/PASSWORD ) -\n*LISTCAT NVSAM                                                -\n         CLI   CTNMWK,X'40'        IS CATALOG NAME WORK BLANK...\n         BE    PUTALC                 ..YES, GO PUT -ALL- CARD\n         MVC   INCARD,LCCAT        MOVE -CAT- CARD TO OUTPUT\n         BAL   R11,PUTUT1          GO PUT/PRINT IDCAMS INPUT CARD\n*  CATALOG ( XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX/PASSWORD ) -\nPUTALC   EQU   *\n         MVC   INCARD,LCALC        MOVE -ALL- CARD TO OUTPUT\n         BAL   R11,PUTUT1          GO PUT/PRINT IDCAMS INPUT CARD\n*  ALL\n*        CLOSE (UT1DCB)            CLOSE SYSUT1 * * * * * * * * * * * *\n         MVI   UT1OB,X'80'         SET OPTION BYTE FOR CLOSE          *\n         LA    R1,UT1OB            LOAD PARAMETER REG1                *\n         SVC   20                  ISSUE CLOSE SVC                    *\n*        LINK  EP=IDCAMS,PARAM=(FWZERO,DDS),VL=1,ERRET=LINK1RET * * * *\n         LA    R1,PARAM            LOAD PARAMETER REG1                *\n         LA    R15,LINKLIST        LOAD PARAMETER REG15               *\n         SVC   6                   ISSUE LINK SVC (IDCAMS)            *\nLINK1RET EQU   *\n         ST    R15,RETCODE         SAVE RETURN CODE FROM IDCAMS\n         LTR   R15,R15             IS RETURN CODE ZERO...\n         BNZ   BELLYUP                ..NO, BELLY UP\n*        OPEN  (UT2DCB,(INPUT))    OPEN SYSUT2 * * * * * * * * * * * *\n         LA    R1,UT2OB            LOAD PARAMETER REG1               *\n         SVC   19                  ISSUE OPEN SVC                    *\nGETCLNM  EQU   *\n         BAL   R11,GETUT2          GET/PRINT CLUSTER NAME LINE\n         CLC   LCPARM,UT2AREA+1    ALIAS/NONVSAM/UCAT NAME LINE...\n         BE    PARMRUN                ..YES, GO EXTRACT NAME\n         CLC   =C'CLUS',UT2AREA+1  CLUSTER NAME LINE...\n         BNE   GETCLNM                ..NO, GO GET NEXT LINE\n*CLUSTER ------- ACVSAM.DP590.ACF2INFO\n         MVC   CTLBYTES(NBRLINES),BLANKS BLANK CONTROL BYTES FOR OUTPUT\n         BAL   R11,GETUT2          GET/PRINT IDCAMS LISTING LINE\n         CLC   =C'IN-C',UT2AREA+6  IN-CAT NAME LINE...\n         BNE   T4OWNR                 ..NO, GO TEST FOR OWNER\n*     IN-CAT --- SKK.VSAM.USERCAT\n         SR    R3,R3               ZERO BYTE COUNT\n         LA    R4,UT2AREA+17       POINT AT 1ST BYTE OF CATALOG NAME\n         LA    R5,44               SET STOPPER FOR SCAN (NO PSWD)\n         LA    R6,CTNMWK           POINT AT CATALOG NAME WORK\n         BAL   R11,BSCAN           EXTRACT CATALOG NAME (ONLY)\n         MVC   DLCTNM,CTNMWK       MOVE NAME TO DELETE\n         MVC   DFCTNM,CTNMWK                    DEFINE CLUSTER\n         MVC   LCCTNM,CTNMWK                AND LISTCAT CARDS\nGETOWNR  EQU   *\n         BAL   R11,GETUT2          GET/PRINT OWNER-IDENT LINE\n*     HISTORY\n*       OWNER-IDENT----------ACF     CREATION----------81.205     RCVY-\nT4OWNR   EQU   *\n         CLC   =C'OWNE',UT2AREA+8  OWNER-IDENT LINE...\n         BNE   GETOWNR                ..NO, GO GET NEXT LINE\n         CLC   =C'(NUL',UT2AREA+26 IS OWNER VALUE (NULL)...\n         BE    NOOWNR                   ..YES, SUPPRESS LINE\n         MVC   DFCLOWNR,UT2AREA+24      ..NO, MOVE VALUE TO LINE AND\n         TR    DFCLOWNR,UNFILTBL              BLANK LEADING DASHES\n         B     GETXPIRE            GO GET EXPIRATION DATE\n*\nNOOWNR   EQU   *\n         MVI   CTLBYTES+OWNRLINE,C'*' SUPPRESS OWNER CARD\nGETXPIRE EQU   *\n         BAL   R11,GETUT2          GET/PRINT EXPIRATION DATE LINE\n         MVC   DFCLEDAT,QMS        FILL EXPIRE DATE WITH QM-S\n         CLC   =C'EXPI',UT2AREA+37 EXPIRATION DATE LINE...\n         BNE   GETDATA                ..NO, JUST LEAVE QM-S\n*       RELEASE----------------2     EXPIRATION--------00.000     RCVY-\n         CLC   =C'.000',UT2AREA+57    ..YES, IS IT NULL...\n         BE    NOEXPIRE                         ..YES, SUPPRESS LINE\n         MVC   DFCLEDAT(2),UT2AREA+55   MOVE YY AND\n         MVC   DFCLEDAT+2(3),UT2AREA+58      DDD TO EXPIRE DATE CARD\n         B     GETDATA             GO GET THE DATA NAME\n*\nNOEXPIRE EQU   *\n         MVI   CTLBYTES+EDATLINE,C'*' SUPPRESS EXPIRE DATE AND\n         MVI   CTLBYTES+PURGLINE,C'*'          DELETE PURGE CARD\nGETDATA  EQU   *\n         BAL   R11,GETUT2          GET/PRINT DATA NAME LINE\n*     PROTECTION-PSWD-----(NULL)     RACF----------------(NO)\n*     ASSOCIATIONS\n*       DATA-----ACVSAM.DP590.ACF2INFO.DATA\n*       INDEX----ACVSAM.DP590.ACF2INFO.INDEX\n         CLC   =C'DATA',UT2AREA+4  DATA NAME LINE...\n         BNE   GETDATA                ..NO, GO GET NEXT LINE\n*   DATA ------- ACVSAM.DP590.ACF2INFO.DATA\n         MVC   DFDANAME,BLANKS     BLANK THE RECEIVING FIELD\n         SR    R3,R3               ZERO BYTE COUNT\n         LA    R4,UT2AREA+17       POINT AT 1ST BYTE OF DATA NAME\n         LA    R5,44               SET STOPPER FOR SCAN (NO PSWD)\n         LA    R6,DFDANAME         POINT AT RECEIVING FIELD\n         BAL   R11,BSCAN           EXTRACT DATA NAME (ONLY)\nGETDATTR EQU   *\n         BAL   R11,GETUT2          GET/PRINT DATA ATTRIBUTES HEADER\n*     IN-CAT --- SKK.VSAM.USERCAT\n*     HISTORY\n*       OWNER-IDENT-------(NULL)     CREATION----------81.205     RCVY-\n*       RELEASE----------------2     EXPIRATION--------00.000     RCVY-\n*     PROTECTION-PSWD-----(NULL)     RACF----------------(NO)\n*     ASSOCIATIONS\n*       CLUSTER--ACVSAM.DP590.ACF2INFO\n         CLC   =C'ATTR',UT2AREA+6  DATA ATTRIBUTES HEADER LINE...\n         BNE   GETDATTR               ..NO, GO GET NEXT LINE\n*     ATTRIBUTES\n         BAL   R11,GETUT2          GET/PRINT 1ST ATTRIBUTES LINE\n*       KEYLEN----------------44     AVGLRECL-------------400     BUF..\n         MVC   DFCLKYLN,QMS        FILL KEY LENGTH WITH QM-S\n         CLC   =C'KEYL',UT2AREA+8  KEY LENGTH FIELD...\n         BNE   DOARECL                ..NO, JUST LEAVE QM-S\n         CLC   =C'-0',UT2AREA+30   KEY LENGTH ZERO ( NOT KSDS)...\n         BE    NOKSDS                 ..YES, NOT A KSDS\n         MVC   DFCLKYLN,UT2AREA+29    ..NO, MOVE VALUE TO LINE AND\n         TR    DFCLKYLN,UNFILTBL            BLANK LEADING DASHES\n         MVI   CTLBYTES+ESDSLINE,C'*' SUPPRESS NONINDEXED AND\n         MVI   CTLBYTES+RRDSLINE,C'*'          NUMBERED CARDS\n         B     DOARECL             GO GET AVGLRECL\n*\nNOKSDS   EQU   *\n         MVI   CTLBYTES+KSDSLINE,C'*'      SUPPRESS KEYS AND\n         MVC   CTLBYTES+INDXLINE(NOILINES),STARS    ALL INDEX CARDS\nDOARECL  EQU   *\n         MVC   DFCLAVRS,QMS        FILL AVGLRECL WITH QM-S\n         CLC   =C'AVGL',UT2AREA+37 AVGLRECL FIELD...\n         BNE   DOBUFSP                ..NO, JUST LEAVE QM-S\n         MVC   DFCLAVRS,UT2AREA+56    ..YES, MOVE VALUE TO LINE AND\n         TR    DFCLAVRS,UNFILTBL             BLANK LEADING DASHES\nDOBUFSP  EQU   *\n*..BUFSPACE-----------10240     CISIZE--------------4096\n         MVC   DFCLBSPC,QMS        FILL BUFSPACE WITH QM-S\n         CLC   =C'BUFS',UT2AREA+66 BUFSPACE FIELD...\n         BNE   DODCISZ                ..NO, JUST LEAVE QM-S\n         MVC   DFCLBSPC,UT2AREA+81    ..YES, MOVE VALUE TO LINE AND\n         TR    DFCLBSPC,UNFILTBL             BLANK LEADING DASHES\nDODCISZ  EQU   *\n         MVC   DFCLCISZ,QMS        FILL CLUSTER CISZ AND\n         MVC   DFDACISZ,QMS                DATA CISZ WITH QM-S\n         MVI   CTLBYTES+CCISLINE,C'*' SUPPRESS CLUSTER CISZ LINE\n         CLC   =C'CISI',UT2AREA+95 DATA CISIZE FIELD...\n         BNE   GETRKP                 ..NO, JUST LEAVE QM-S\n         MVC   DFDACISZ,UT2AREA+114   ..YES, MOVE VALUE TO LINE AND\n         TR    DFDACISZ,UNFILTBL             BLANK LEADING DASHES\n         MVC   DFCLCISZ,DFDACISZ   SAVE IN CLUSTER CISZ, JUST IN CASE\nGETRKP   EQU   *\n         BAL   R11,GETUT2          GET/PRINT 2ND ATTRIBUTES LINE\n*       RKP-------------------32     MAXLRECL------------4088     EXC..\n         CLI   CTLBYTES+KSDSLINE,C'*'   KSDS...\n         BE    DOMRECL                     ..NO, BYPASS RKP\n         MVC   DFCLRKP,QMS         FILL RKP WITH QM-S\n         CLC   =C'RKP-',UT2AREA+8  RKP FIELD...\n         BNE   DOMRECL                ..NO, JUST LEAVE QM-S\n         MVC   DFCLRKP,UT2AREA+27     ..YES, MOVE VALUE TO LINE AND\n         TR    DFCLRKP,UNFILTBL              BLANK LEADING DASHES\nDOMRECL  EQU   *\n         MVC   DFCLMXRS,QMS        FILL MAXLRECL WITH QM-S\n         CLC   =C'MAXL',UT2AREA+37 MAXLRECL FIELD...\n         BNE   DOEXCP                 ..NO, JUST LEAVE QM-S\n         MVC   DFCLMXRS,UT2AREA+56    ..YES, MOVE VALUE TO LINE AND\n         TR    DFCLMXRS,UNFILTBL             BLANK LEADING DASHES\nDOEXCP   EQU   *\n*..EXCPEXIT----------(NULL)     CI/CA----------------120\n         MVC   DFCLEXCP,QMS        FILL EXCPEXIT WITH QM-S\n         CLC   =C'EXCP',UT2AREA+66 EXCPEXIT FIELD...\n         BNE   GETDSHRO               ..NO, JUST LEAVE QM-S\n         CLC   =C'(NUL',UT2AREA+84 IS EXCPEXIT VALUE (NULL)...\n         BE    NOEXCPEX               ..YES, SUPPRESS LINE\n         MVC   DFCLEXCP,UT2AREA+82    ..NO, MOVE VALUE TO LINE AND\n         TR    DFCLEXCP,UNFILTBL            BLANK LEADING DASHES\n         B     GETDSHRO            GO GET SHARE OPTIONS\n*\nNOEXCPEX EQU   *\n         MVI   CTLBYTES+EXCPLINE,C'*' SUPPRESS EXCPEXIT CARD\nGETDSHRO EQU   *\n         BAL   R11,GETUT2          GET/PRINT 3RD ATTRIBUTES LINE\n*       RECORDS/CI------------63     MAXRECS---------16515072  *(RRDS)*\n         CLC   =C'RECO',UT2AREA+8  RECORDS/CI LINE (RRDS ONLY)...\n         BE    GETDSHRO               ..YES, BYPASS IT\n*       SHROPTNS(2,4)   RECOVERY     SUBALLOC         NOERASE     IND..\n         MVC   DFCLSHRO,QMS        FILL SHARE OPTIONS WITH QM-S\n         CLC   =C'SHRO',UT2AREA+8  SHROPTNS FIELD...\n         BNE   DOSPEED                ..NO, JUST LEAVE QM-S\n         MVC   DFCLSHRO,UT2AREA+17    ..YES, MOVE VALUE TO LINE\nDOSPEED  EQU   *\n         CLC   =C'SPEE',UT2AREA+27 SPEED ATTRIBUTE...\n         BE    DOUNIQUE               ..YES, LEAVE LINE ON\n         MVI   CTLBYTES+SPEDLINE,C'*' SUPPRESS SPEED (RECOVERY)\nDOUNIQUE EQU   *\n         CLC   =C'UNIQ',UT2AREA+37 UNIQUE ATTRIBUTE...\n         BE    DOERASE                ..YES, LEAVE LINE ON\n         MVI   CTLBYTES+UNIQLINE,C'*' SUPPRESS UNIQUE (SUBALLOCATE)\nDOERASE  EQU   *\n         CLC   =C' ERA',UT2AREA+55 ERASE ATTRIBUTE...\n         BE    DODSORG                ..YES, LEAVE LINE ON\n         MVI   CTLBYTES+ERASLINE,C'*' SUPPRESS ERASE (NOERASE)\nDODSORG  EQU   *\n*..INDEXED       NOWRITECHK     NOIMBED       NOREPLICAT\n         CLI   CTLBYTES+KSDSLINE,X'40'  INDEXED (KSDS)...\n         BE    DOWCK                       ..YES, ALL SET, GO ON\n         CLC   =C'NONI',UT2AREA+66      NONINDEXED (ESDS)...\n         BE    RRDSOFF                     ..YES, GO SUPPRESS RRDS\n*                                       NUMBERED (RRDS)\n         MVI   CTLBYTES+ESDSLINE,C'*'   SUPPRESS ESDS (RRDS)\n         B     DOWCK                         AND GO ON\n*\nRRDSOFF  EQU   *\n         MVI   CTLBYTES+RRDSLINE,C'*'   SUPPRESS RRDS (ESDS)\nDOWCK    EQU   *\n         CLC   =C' WRI',UT2AREA+79 WRITECHECK ATTRIBUTE...\n         BE    DOIMBED                ..YES, LEAVE LINE ON\n         MVI   CTLBYTES+WTCKLINE,C'*' SUPPRESS WRITECHK (NOWRITECHK)\nDOIMBED  EQU   *\n         CLC   =C'IMBE',UT2AREA+95 IMBED ATTRIBUTE...\n         BE    GETORDRD               ..YES, LEAVE LINE ON\n         MVI   CTLBYTES+IMBDLINE,C'*' SUPPRESS IMBED (NOIMBED)\nGETORDRD EQU   *\n         BAL   R11,GETUT2          GET/PRINT 4TH ATTRIBUTES LINE\n*       UNORDERED        NOREUSE     NONSPANNED\n         CLC   =C'ORDE',UT2AREA+8  ORDERED ATTRIBUTE...\n         BE    DOREUSE                ..YES, LEAVE LINE ON\n         MVI   CTLBYTES+ORDRLINE,C'*' SUPPRESS ORDERED (UNORDERED)\nDOREUSE  EQU   *\n         CLC   =C' REU',UT2AREA+26 REUSE ATTRIBUTE...\n         BE    DOSPAND                ..YES, LEAVE LINE ON\n         MVI   CTLBYTES+RUSELINE,C'*' SUPPRESS REUSE (NOREUSE)\nDOSPAND  EQU   *\n         CLC   =C'SPAN',UT2AREA+37 SPANNED ATTRIBUTE...\n         BE    GETPCIF                ..YES, LEAVE LINE ON\n         MVI   CTLBYTES+SPANLINE,C'*' SUPPRESS SPANNED (NONSPANNED)\nGETPCIF  EQU   *\n         BAL   R11,GETUT2          GET/PRINT % CI FREESPACE LINE\n*     STATISTICS\n*       REC-TOTAL------------588     SPLITS-CI-------------51     EXCPS\n*       REC-DELETED----------131     SPLITS-CA--------------0     EXTEN\n         CLC   =C'FREE',UT2AREA+37 FREESPACE-% LINE...\n         BNE   GETPCIF                ..NO, GO GET NEXT LINE\n*       REC-INSERTED---------705     FREESPACE-%CI---------30     SYSTE\n         MVC   DFCLPCIF,QMS        FILL % CI FREESPACE WITH QM-S\n         CLC   =C'-%CI',UT2AREA+46 % CI FREESPACE...\n         BNE   GETPCAF                ..NO, JUST LEAVE QM-S\n         MVC   DFCLPCIF,UT2AREA+58    ..YES, MOVE VALUE TO LINE AND\n         TR    DFCLPCIF,UNFILTBL             BLANK LEADING DASHES\nGETPCAF  EQU   *\n         BAL   R11,GETUT2          GET/PRINT % CA FREESPACE LINE\n*       REC-UPDATED---------1688     FREESPACE-%CA---------30\n         MVC   DFCLPCAF,QMS        FILL % CA FREESPACE WITH QM-S\n         CLC   =C'-%CA',UT2AREA+46 % CA FREESPACE...\n         BNE   CHKFSPC                ..NO, JUST LEAVE QM-S\n         MVC   DFCLPCAF,UT2AREA+58    ..YES, MOVE VALUE TO LINE AND\n         TR    DFCLPCAF,UNFILTBL             BLANK LEADING DASHES\nCHKFSPC  EQU   *\n         CLC   =C'  0   0',DFCLPCIF     BOTH VALUES ZERO...\n         BNE   GETDSPAC                    ..NO, LET LINE GO\n         MVI   CTLBYTES+FSPCLINE,C'*'      ..YES, SUPPRESS FREESPACE\nGETDSPAC EQU   *\n         BAL   R11,GETUT2          GET/PRINT 1ST ALLOCATION LINE\n*       REC-RETRIEVED----1447165     FREESPC-BYTES----1740800\n*     ALLOCATION\n         CLC   =C'SPAC',UT2AREA+8  1ST ALLOCATION LINE...\n         BNE   GETDSPAC               ..NO, GO GET NEXT LINE\n*       SPACE-TYPE------CYLINDER     HI-ALLOC-RBA-----1966080\n         CLC   =C'TYPE',UT2AREA+14 ALLOCATION TYPE LINE...\n         BNE   BADDALOC               ..NO, FLAG AS BAD ALLOCATION\n         MVI   CTLBYTES+CCYLLINE,C'*' SUPPRESS CLUSTER CYLINDERS\n         MVI   CTLBYTES+CTRKLINE,C'*'      AND CLUSTER TRACKS CARDS\n         CLC   =C'-CYL',UT2AREA+23 CYLINDER ALLOCATION...\n         BE    DCYLALOC               ..YES, GO GET NUMBERS\nDTRKALOC EQU   *\n         MVI   CTLBYTES+DCYLLINE,C'*' SUPPRESS DATA CYLINDERS CARD\n         MVC   DFDAPTRK,QMS        FILL PRIMARY DATA TRKS WITH QM-S\n         BAL   R11,GETUT2          GET/PRINT 2ND ALLOCATION LINE\n*       SPACE-PRI--------------4     HI-USED-RBA-------491520\n         CLC   =C'PRI-',UT2AREA+14 PRIMARY ALLOCATION LINE...\n         BNE   DSECTRKS               ..NO, JUST LEAVE QM-S\n         MVC   DFDAPTRK,UT2AREA+27 MOVE VALUE TO LINE AND\n         TR    DFDAPTRK,UNFILTBL        BLANK LEADING DASHES\nDSECTRKS EQU   *\n         MVC   DFDASTRK,QMS        FILL SECONDARY DATA TRKS WITH QM-S\n         BAL   R11,GETUT2          GET/PRINT 3RD ALLOCATION LINE\n*       SPACE-SEC--------------0\n         CLC   =C'SEC-',UT2AREA+14 SECONDARY ALLOCATION LINE...\n         BNE   DENDSPA                ..NO, JUST LEAVE QM-S\n         MVC   DFDASTRK,UT2AREA+27 MOVE VALUE TO LINE AND\n         TR    DFDASTRK,UNFILTBL        BLANK LEADING DASHES\n         B     DENDSPA             GO GET VOLUME SERIAL\n*\nBADDALOC EQU   *\n         MVC   DFDAPCYL,QMS        FILL DATA PRI-CYLS,\n         MVC   DFDASCYL,QMS             DATA SEC-CYLS,\n         MVC   DFDAPTRK,QMS             DATA PRI-TRKS AND\n         MVC   DFDASTRK,QMS             DATA SEC-TRKS WITH QM-S\n         B     DENDSPA             GO GET VOLUME SERIAL\n*\nDCYLALOC EQU   *\n         MVI   CTLBYTES+DTRKLINE,C'*' SUPPRESS DATA TRACKS CARD\n         MVC   DFDAPCYL,QMS        FILL PRIMARY DATA CYLS WITH QM-S\n         BAL   R11,GETUT2          GET/PRINT 2ND ALLOCATION LINE\n*       SPACE-PRI--------------4     HI-USED-RBA-------491520\n         CLC   =C'PRI-',UT2AREA+14 PRIMARY ALLOCATION LINE...\n         BNE   DSECCYLS               ..NO, JUST LEAVE QM-S\n         MVC   DFDAPCYL,UT2AREA+29 MOVE VALUE TO LINE AND\n         TR    DFDAPCYL,UNFILTBL        BLANK LEADING DASHES\nDSECCYLS EQU   *\n         MVC   DFDASCYL,QMS        FILL SECONDARY DATA CYLS WITH QM-S\n         BAL   R11,GETUT2          GET/PRINT 3RD ALLOCATION LINE\n*       SPACE-SEC--------------0\n         CLC   =C'SEC-',UT2AREA+14 SECONDARY ALLOCATION LINE...\n         BNE   DENDSPA                ..NO, JUST LEAVE QM-S\n         MVC   DFDASCYL,UT2AREA+29 MOVE VALUE TO LINE AND\n         TR    DFDASCYL,UNFILTBL        BLANK LEADING DASHES\nDENDSPA  EQU   *\n         MVI   CTLBYTES+CVOLLINE,C'*' SUPPRESS CLUSTER VOLUMES LINE\n         MVC   DFDAVOL,BLANKS      BLANK ALL DATA VOLSER-S\n         LA    R1,DFDAVOL-7        POINT AT VOLSER POSITION ZERO\n         LA    R2,6                     AND SET SCAN LIMIT\n         STM   R1,R2,R1R2SAV       SAVE STARTING ADDRESSES FOR SCAN\n         MVI   SWDVL+1,X'70'       RESET UNCONDITIONAL BRANCH TO BNE\nGETDVOLS EQU   *\n         BAL   R11,GETUT2          GET/PRINT NEXT LINE\n*     VOLUME\n         CLC   =C'INDE',UT2AREA+4  INDEX NAME LINE...\n         BE    DOINDEX                ..YES, GO SAVE INDEX NAME\n         CLC   =C'VOLS',UT2AREA+8  VOLSER LINE...\nSWDVL    BNE   GETDVOLS               ..BNE/B AFTER SIXTH VOLSER *MDFD*\n*       VOLSER------------DSK500     PHYREC-SIZE---------4096     HI-AL\n         LM    R1,R2,R1R2SAV       LOAD SCAN ADDRESSES\n         CLC   0(6,R1),UT2AREA+26  DOES NEW VOLSER EQUAL PREVIOUS...\n         BE    GETDVOLS               ..YES, THEN IGNORE IT & GO ON\n         MVC   7(6,R1),UT2AREA+26  MOVE VOLSER AND\n         MVI   14(R1),C')'              CLOSING PAREN TO CARD\n         BCT   R2,RDY4NXTD\n         MVI   SWDVL+1,X'F0'       RESET BNE TO UNCONDITIONAL BRANCH\n         B     GETDVOLS                 AND GO GET NEXT LINE\n*\nRDY4NXTD EQU   *\n         LA    R1,7(R1)            POINT AT NEXT VOLSER POSITION\n         STM   R1,R2,R1R2SAV       SAVE NEXT ADDRESSES FOR SCAN\n         B     GETDVOLS                 AND GO GET NEXT LINE\n*       DEVTYPE------X'3050200B'     PHYRECS/TRK------------4     HI-US\n*       VOLFLAG------------PRIME     TRACKS/CA-------------30\n*       EXTENTS:\n*       LOW-CCHH-----X'001E0000'     LOW-RBA----------------0     TRACK\n*       HIGH-CCHH----X'0021001D'     HIGH-RBA---------1966079\n*\nDOINDEX  EQU   *\n         MVC   DFCLVOL,DFDAVOL     SAVE IN CLUSTER VOLSER, JUST IN CASE\n*   INDEX ------ ACVSAM.DP590.ACF2INFO.INDEX\n         MVC   DFIXNAME,BLANKS     BLANK THE RECEIVING FIELD\n         SR    R3,R3               ZERO BYTE COUNT\n         LA    R4,UT2AREA+17       POINT AT 1ST BYTE OF INDEX NAME\n         LA    R5,44               SET STOPPER FOR SCAN (NO PSWD)\n         LA    R6,DFIXNAME         POINT AT RECEIVING FIELD\n         BAL   R11,BSCAN           EXTRACT INDEX NAME (ONLY)\nGETIATTR EQU   *\n         BAL   R11,GETUT2          GET/PRINT INDEX ATTRIBUTES HEADER\n*     IN-CAT --- SKK.VSAM.USERCAT\n*     HISTORY\n*       OWNER-IDENT-------(NULL)     CREATION----------81.205     RCVY-\n*       RELEASE----------------2     EXPIRATION--------00.000     RCVY-\n*     PROTECTION-PSWD-----(NULL)     RACF----------------(NO)\n*     ASSOCIATIONS\n*       CLUSTER--ACVSAM.DP590.ACF2INFO\n         CLC   =C'ATTR',UT2AREA+6  INDEX ATTRIBUTES HEADER LINE...\n         BNE   GETIATTR               ..NO, GO GET NEXT LINE\n*     ATTRIBUTES\n         BAL   R11,GETUT2          GET/PRINT 1ST ATTRIBUTES LINE\n*       KEYLEN----------------44     AVGLRECL---------------0     BUF..\n*..BUFSPACE---------------0     CISIZE--------------2048\n         MVC   DFIXCISZ,QMS        FILL INDEX CISZ WITH QM-S\n         CLC   =C'CISI',UT2AREA+95 INDEX CISIZE FIELD...\n         BNE   GETISHRO               ..NO, JUST LEAVE QM-S\n         MVC   DFIXCISZ,UT2AREA+114   ..YES, MOVE VALUE TO LINE AND\n         TR    DFIXCISZ,UNFILTBL             BLANK LEADING DASHES\nGETISHRO EQU   *\n         BAL   R11,GETUT2          GET/PRINT NEXT ATTRIBUTES LINE\n*       RKP-------------------32     MAXLRECL------------2041     EXCPE\n         CLC   =C'SHRO',UT2AREA+8  SHROPTNS FIELD...\n         BNE   GETISHRO               ..NO, GET NEXT ATTRIBUTES LINE\n*       SHROPTNS(2,4)   RECOVERY     SUBALLOC         NOERASE     NOW..\n*..NOWRITECHK       NOIMBED     NOREPLICAT     UNORDERED\n         CLC   =C'REPL',UT2AREA+95 REPLICATE ATTRIBUTE...\n         BE    GETISPAC               ..YES, LEAVE LINE ON\n         MVI   CTLBYTES+REPLLINE,C'*' SUPPRESS REPLICATE (NOREPLICATE)\nGETISPAC EQU   *\n         BAL   R11,GETUT2          GET/PRINT 1ST ALLOCATION LINE\n*       NOREUSE\n*     STATISTICS\n*       REC-TOTAL--------------1     SPLITS-CI--------------0     EXCPS\n*       REC-DELETED------------0     SPLITS-CA--------------0     EXTEN\n*       REC-INSERTED-----------0     FREESPACE-%CI----------0     SYSTE\n*       REC-UPDATED------------0     FREESPACE-%CA----------0\n*       REC-RETRIEVED----------0     FREESPC-BYTES------63488\n*     ALLOCATION\n         CLC   =C'SPAC',UT2AREA+8  1ST ALLOCATION LINE...\n         BNE   GETISPAC               ..NO, GO GET NEXT LINE\n*       SPACE-TYPE---------TRACK     HI-ALLOC-RBA-------65536\n         CLC   =C'TYPE',UT2AREA+14 ALLOCATION TYPE LINE...\n         BNE   BADIALOC               ..NO, FLAG AS BAD ALLOCATION\n         CLC   =C'-CYL',UT2AREA+23 CYLINDER ALLOCATION...\n         BE    ICYLALOC               ..YES, GO GET NUMBERS\nITRKALOC EQU   *\n         MVI   CTLBYTES+ICYLLINE,C'*' SUPPRESS INDEX CYLINDERS CARD\n         MVC   DFIXPTRK,QMS        FILL PRIMARY INDEX TRKS WITH QM-S\n         BAL   R11,GETUT2          GET/PRINT 2ND ALLOCATION LINE\n*       SPACE-PRI--------------4     HI-USED-RBA---------2048\n         CLC   =C'PRI-',UT2AREA+14 PRIMARY ALLOCATION LINE...\n         BNE   ISECTRKS               ..NO, JUST LEAVE QM-S\n         MVC   DFIXPTRK,UT2AREA+27 MOVE VALUE TO LINE AND\n         TR    DFIXPTRK,UNFILTBL        BLANK LEADING DASHES\nISECTRKS EQU   *\n         MVC   DFIXSTRK,QMS        FILL SECONDARY INDEX TRKS WITH QM-S\n         BAL   R11,GETUT2          GET/PRINT 3RD ALLOCATION LINE\n*       SPACE-SEC--------------0\n         CLC   =C'SEC-',UT2AREA+14 SECONDARY ALLOCATION LINE...\n         BNE   IENDSPA                ..NO, JUST LEAVE QM-S\n         MVC   DFIXSTRK,UT2AREA+27 MOVE VALUE TO LINE AND\n         TR    DFIXSTRK,UNFILTBL        BLANK LEADING DASHES\n         B     IENDSPA             GO GET VOLUME SERIAL\n*\nBADIALOC EQU   *\n         MVC   DFIXPCYL,QMS        FILL INDEX PRI-CYLS,\n         MVC   DFIXSCYL,QMS             INDEX SEC-CYLS,\n         MVC   DFIXPTRK,QMS             INDEX PRI-TRKS AND\n         MVC   DFIXSTRK,QMS             INDEX SEC-TRKS WITH QM-S\n         B     IENDSPA             GO GET VOLUME SERIAL\n*\nICYLALOC EQU   *\n         MVI   CTLBYTES+ITRKLINE,C'*' SUPPRESS DATA TRACKS CARD\n         MVC   DFIXPCYL,QMS        FILL PRIMARY INDEX CYLS WITH QM-S\n         BAL   R11,GETUT2          GET/PRINT 2ND ALLOCATION LINE\n*       SPACE-PRI--------------4     HI-USED-RBA---------2048\n         CLC   =C'PRI-',UT2AREA+14 PRIMARY ALLOCATION LINE...\n         BNE   ISECCYLS               ..NO, JUST LEAVE QM-S\n         MVC   DFIXPCYL,UT2AREA+29 MOVE VALUE TO LINE AND\n         TR    DFIXPCYL,UNFILTBL        BLANK LEADING DASHES\nISECCYLS EQU   *\n         MVC   DFIXSCYL,QMS        FILL SECONDARY DATA CYLS WITH QM-S\n         BAL   R11,GETUT2          GET/PRINT 3RD ALLOCATION LINE\n*       SPACE-SEC--------------0\n         CLC   =C'SEC-',UT2AREA+14 SECONDARY ALLOCATION LINE...\n         BNE   IENDSPA                ..NO, JUST LEAVE QM-S\n         MVC   DFIXSCYL,UT2AREA+29 MOVE VALUE TO LINE AND\n         TR    DFIXSCYL,UNFILTBL        BLANK LEADING DASHES\nIENDSPA  EQU   *\n         MVC   DFIXVOL,BLANKS      BLANK ALL INDEX VOLSER-S\n         LA    R1,DFIXVOL-7        POINT AT VOLSER POSITION ZERO\n         LA    R2,6                     AND SET SCAN LIMIT\n         STM   R1,R2,R1R2SAV       SAVE STARTING ADDRESSES FOR SCAN\n         MVI   SWIVL+1,X'70'       RESET UNCONDITIONAL BRANCH TO BNE\nGETIVOLS EQU   *\n         BAL   R11,GETUT2          GET/PRINT NEXT LINE\n*     VOLUME\n         CLC   =C'VOLS',UT2AREA+8  VOLSER LINE...\nSWIVL    BNE   GETIVOLS               ..BNE/B AFTER SIXTH VOLSER *MDFD*\n*       VOLSER------------DSK500     PHYREC-SIZE---------2048     HI-AL\n         LM    R1,R2,R1R2SAV       LOAD SCAN ADDRESSES\n         CLC   0(6,R1),UT2AREA+26  DOES NEW VOLSER EQUAL PREVIOUS...\n         BE    GETIVOLS               ..YES, THEN IGNORE IT & GO ON\n         MVC   7(6,R1),UT2AREA+26  MOVE VOLSER AND\n         MVI   14(R1),C')'              CLOSING PAREN TO CARD\n         BCT   R2,RDY4NXTI\n         MVI   SWIVL+1,X'F0'       RESET BNE TO UNCONDITIONAL BRANCH\n         B     GETIVOLS                 AND GO GET NEXT LINE\n*\nRDY4NXTI EQU   *\n         LA    R1,7(R1)            POINT AT NEXT VOLSER POSITION\n         STM   R1,R2,R1R2SAV       SAVE NEXT ADDRESSES FOR SCAN\n         B     GETIVOLS                 AND GO GET NEXT LINE\n*       DEVTYPE------X'3050200B'     PHYRECS/TRK------------8     HI-US\n*       VOLFLAG------------PRIME     TRACKS/CA--------------1\n*       EXTENTS:\n*       LOW-CCHH-----X'00190008'     LOW-RBA----------------0     TRACK\n*       HIGH-CCHH----X'0019000B'     HIGH-RBA-----------65535\n*\nEOUT2    EQU   *\n*        CLOSE (UT2DCB)            CLOSE SYSUT2 * * * * * * * * * * * *\n         LA    R1,UT2OB            LOAD PARAMETER REG1                *\n         SVC   20                  ISSUE CLOSE SVC                    *\n         CLI   LCPARM,C'E'         NON-PARM REQUEST...\n         BNE   WRAPUP                 ..NO, GO WRAP IT UP\n         PACK  DBLWRD,DFCLBSPC     PACK BUFFERSPACE NUMBER AND\n         CVB   R1,DBLWRD                CONVERT IT TO BINARY\n         PACK  DBLWRD,DFCLCISZ     PACK DATA CONTROLINTERVALSIZE AND\n         CVB   R2,DBLWRD                CONVERT IT TO BINARY\n         SLA   R2,1                GET SIZE OF TWO DATA BUFFERS\n         CLI   CTLBYTES+INDXLINE,C'*' IS THIS A KSDS...\n         BE    CKBUFSP                   ..NO, INDEX BUFFERS NOT REQD\n         PACK  DBLWRD,DFIXCISZ     PACK INDEX CONTROLINTERVALSIZE AND\n         CVB   R0,DBLWRD                CONVERT IT TO BINARY\n         AR    R2,R0               ADD SIZE OF ONE INDEX BUFFER\nCKBUFSP  EQU   *\n         CR    R1,R2               IS BUFFERSPACE DEFAULT (2D+1I)...\n         BNE   CKCISZ                 ..NO, LEAVE BUFFERSPACE\n         MVI   CTLBYTES+BSPCLINE,C'*' ..YES, SUPPRESS BUFFERSPACE CARD\nCKCISZ   EQU   *\n         CLI   CTLBYTES+INDXLINE,C'*' IS THIS A KSDS...\n         BE    MVDA2CL1                  ..NO, MOVE DATA CISZ TO CLUSTR\n         CLC   DFDACISZ,DFIXCISZ   DOES DATA CISZ = INDEX CISZ...\n         BNE   CKVOLS                 ..NO, LEAVE DATA/INDEX CISZ\n         MVI   CTLBYTES+ICISLINE,C'*' ..YES, SUPPRESS INDEX CISZ\nMVDA2CL1 EQU   *\n         MVI   CTLBYTES+DCISLINE,C'*'        SUPPRESS DATA CISZ AND\n         MVI   CTLBYTES+CCISLINE,X'40'       ACTIVATE CLUSTER CISZ\nCKVOLS   EQU   *\n         CLI   CTLBYTES+INDXLINE,C'*' IS THIS A KSDS...\n         BE    MVDA2CL2                  ..NO, MOVE DATA VOLS TO CLUSTR\n         CLC   DFDAVOL,DFIXVOL     DOES DATA VOLS = INDEX VOLS...\n         BNE   CKCYLS                 ..NO, LEAVE DATA/INDEX VOLS\n         MVI   CTLBYTES+IVOLLINE,C'*' ..YES, SUPPRESS INDEX VOLUMES\nMVDA2CL2 EQU   *\n         MVI   CTLBYTES+DVOLLINE,C'*'        SUPPRESS DATA VOLUMES AND\n         MVI   CTLBYTES+CVOLLINE,X'40'       ACTIVATE CLUSTER VOLUMES\nCKCYLS   EQU   *\n         CLI   CTLBYTES+DCYLLINE,C'*' IS DATA ALLOCATION CYLINDERS...\n         BE    CKTRKS                    ..NO, MUST BE TRACKS\n         CLI   CTLBYTES+ICYLLINE,C'*' IS INDEX ALLOCATION CYLINDERS...\n         BE    PUTOUT                    ..NO, JUST LEAVE THINGS AS IS\n         CLC   DFDAPCYL(7),DFIXPCYL   DATA CYLS = INDEX CYLS...\n         BNE   PUTOUT                    ..NO, JUST LEAVE THINGS AS IS\n         MVI   CTLBYTES+DCYLLINE,C'*' SUPPRESS DATA CYLINDERS\n         MVI   CTLBYTES+ICYLLINE,C'*'          INDEX CYLINDERS AND\n         MVI   CTLBYTES+CCYLLINE,X'40'      ACTIVATE CLUSTER CYLINDERS\n         MVC   DFCLPCYL(7),DFDAPCYL   MOVE DATA CYLS TO CLUSTER CYLS\n         B     PUTOUT                 GO BEGIN OUTPUT CYCLE\n*\nCKTRKS   EQU   *\n         CLI   CTLBYTES+ITRKLINE,C'*' IS INDEX ALLOCATION TRACKS...\n         BE    PUTOUT                    ..NO, JUST LEAVE THINGS AS IS\n         CLC   DFDAPTRK(7),DFIXPTRK   DATA TRKS = INDEX TRKS...\n         BNE   PUTOUT                    ..NO, JUST LEAVE THINGS AS IS\n         MVI   CTLBYTES+DTRKLINE,C'*' SUPPRESS DATA TRACKS\n         MVI   CTLBYTES+ITRKLINE,C'*'          INDEX TRACKS AND\n         MVI   CTLBYTES+CTRKLINE,X'40'      ACTIVATE CLUSTER TRACKS\n         MVC   DFCLPTRK(7),DFDAPTRK   MOVE DATA TRKS TO CLUSTER TRKS\nPUTOUT   EQU   *\n         LA    R3,CTLBYTES         POINT AT LIST OF CONTROL BYTES\n         LA    R6,BOLCTBL                        AND IDCAMS CARDS\n         LA    R5,99               SET SAFETY STOPPER\n         MVC   INCC(9),=C'0*SYSUT3*' SET PRINT LINE LITERAL\nOUTEST   EQU   *\n         CLI   0(R3),X'40'         PUT OUT THIS CARD...\n         BNE   EOTCHK                 ..NO, CHECK FOR END OF TABLE\n         BAL   R11,PUTUT3             ..YES, GO PUT/WRITE OUTPUT CARD\nEOTCHK   EQU   *\n         CLI   0(R3),X'FF'         END OF TABLE...\n         BE    EOTABLE                ..YES, GO SET UP FOR NEXT REQ\n         LA    R3,1(R3)            UP THE CONTROL BYTE AND\n         LA    R6,80(R6)             IDCAMS CARD POINTERS\n         BCT   R5,OUTEST           GO PROCESS NEXT IDCAMS CARD\nEOTABLE  EQU   *\n         SP    LINECTR,LINECTR     FORCE PAGING FOR NEXT REQUEST\nGETNXT   EQU   *\n         MVC   INCC(9),=C'0 *SYSIN*' SET PRINT LINE LITERAL\n         B     GETNSIN             GO GET NEXT SYSIN CARD\n*\nPARMRUN  EQU   *\n*ALIAS --------- ACFNCP\n*NONVSAM ------- IPO1.CMDPROC\n         MVC   CTLBYTES(NBRPLINS),BLANKS BLANK CONTROL BYTES FOR OUTPUT\n         CLI   UT2AREA+1,C'U'      USERCATALOG ENTRY...\n         BE    UCAT0                  ..YES, SUPPRESS OTHER LINES\n         MVC   DFPMNAME,UT2AREA+17 MOVE ALIAS/NVSAM NAME TO IDCAMS CARD\n         CLI   UT2AREA+1,C'A'      ALIAS ENTRY...\n         BE    ALIAS0                 ..YES, SUPPRESS OTHER LINES\nNVSAM0   EQU   *\n         MVI   CTLBYTES+ARELLINE,C'*' SUPPRESS ALIAS REL LINE\nNVSAM1   EQU   *\n         BAL   R11,GETUT2          GET/PRINT OWNER-IDENT LINE\n*     HISTORY\n*       OWNER-IDENT-------(NULL)     CREATION----------83.013\n         CLC   =C'OWNE',UT2AREA+8  OWNER-IDENT LINE...\n         BNE   NVSAM1                 ..NO, GO GET NEXT LINE\n         CLC   =C'(NUL',UT2AREA+26 IS OWNER VALUE (NULL)...\n         BE    NVSAM2                 ..YES, SUPPRESS LINE\n         MVC   DFNVONAM,UT2AREA+24    ..NO, MOVE VALUE TO LINE AND\n         TR    DFNVONAM,UNFILTBL            BLANK LEADING DASHES\n         B     NVSAM3              GO GET EXPIRATION DATE\n*\nNVSAM2   EQU   *\n         MVI   CTLBYTES+NOWNLINE,C'*' SUPPRESS OWNER LINE\nNVSAM3   EQU   *\n         BAL   R11,GETUT2          GET/PRINT EXPIRATION DATE LINE\n         MVC   DFNVXYY(5),QMS      FILL EXPIRE DATE WITH QM-S\n         CLC   =C'EXPI',UT2AREA+37 EXPIRATION DATE LINE...\n         BNE   NVSAM5                 ..NO, JUST LEAVE QM-S\n*       RELEASE----------------2     EXPIRATION--------00.000\n         CLC   =C'.000',UT2AREA+57    ..YES, IS IT NULL...\n         BE    NVSAM4                           ..YES, SUPPRESS LINE\n         MVC   DFNVXYY,UT2AREA+55  MOVE YY AND\n         MVC   DFNVXDDD,UT2AREA+58      DDD TO EXPIRE DATE (TO) CARD\n         B     NVSAM5              GO GET THE VOLSER CARD\n*\nNVSAM4   EQU   *\n         MVI   CTLBYTES+NXDTLINE,C'*' SUPPRESS EXPDT LINE\nNVSAM5   EQU   *\n         BAL   R11,GETUT2          GET/PRINT VOLSER LINE\n*     VOLUMES\n*       VOLSER------------******     DEVTYPE------X'00000000'     FSEQN\n         CLC   =C'VOLS',UT2AREA+8  VOLSER LINE...\n         BNE   NVSAM5                 ..NO, GO GET NEXT LINE\n         MVC   DFNVVSNO,UT2AREA+26 MOVE VOLSER TO VOLUMES CARD\n         CLC   DFNVVSNO(6),STARS   IS VOLSER ALL ASTERISKS...\n         BNE   NVSAM7                 ..NO, GO EXTRACT DEVICE TYPE\n         MVC   DFNVVSNO,NULLSER    MOVE '******' TO VOLUMES CARD\nNVSAM6   EQU   *\n         MVC   DFNVUNIT,NULLDEVT   MOVE '  0000  ' TO DEVICETYPES CARD\n         B     NVSAM8              GO EXTRACT FILE SEQUENCE NUMBER\n*\nNVSAM7   EQU   *\n         TR    UT2AREA+52(8),TBLA  TRANSLATE DEVTYPE VALUE\n         PACK  DBLWRD,UT2AREA+52(9)     CONVERT TO BINARY FULLWORD\n         MVC   DEVTYPE,DBLWRD+3         AND SAVE IT IN CORE\n         LA    R1,CALLIST          LOAD PARAMETER REG1     *** CALL ***\n         L     R15,=V(DTYP2UNT)    LOAD ENTRY ADDRESS                 *\n         BALR  R14,R15             BRANCH TO ENTRY POINT              *\nNVSAM8   EQU   *\n         CLC   =C'--0 ',UT2AREA+87 IS FILE SEQUENCE NUMBER NULL...\n         BE    NVSAM9                 ..YES, GO SUPPRESS LINE\n         MVC   DFNVFNBR,UT2AREA+82    ..NO, MOVE VALUE TO LINE AND\n         TR    DFNVFNBR,UNFILTBL            BLANK LEADING DASHES\n         B     NVSAM10             GO GET ASSOCIATIONS LINE\n*\nNVSAM9   EQU   *\n         MVI   CTLBYTES+NFSNLINE,C'*' SUPPRESS FSEQN LINE\nNVSAM10  EQU   *\n         BAL   R11,GETUT2          GET/PRINT ASSOCIATIONS LINE\n*     ASSOCIATIONS\n         B     PUTPARM             GO PUT OUT DEFINE NVSAM CARDS\n*\nUCAT0    EQU   *\n*USERCATALOG --- ATMS.VSAM.USERCAT\n         MVC   DFPMNAME(46),UT2AREA+16    MOVE UCAT NAME TO IDCAMS CARD\n         MVI   CTLBYTES+ARELLINE,C'*'     SUPPRESS ALIAS REL LINE\n         MVC   CTLBYTES+NFSNLINE(3),STARS SUPPRESS NVSAM LINES\nUCAT1    EQU   *\n         BAL   R11,GETUT2          GET/PRINT ASSOCIATIONS LINE\n*     HISTORY\n*       RELEASE----------------2\n*     VOLUMES\n*       VOLSER------------STC83E     DEVTYPE------X'3010200E'     VOLFL\n         CLC   =C'VOLS',UT2AREA+8  VOLSER LINE...\n         BNE   UCAT1                  ..NO, GO GET NEXT LINE\n         MVC   DFNVVSNO,UT2AREA+26 MOVE VOLSER TO VOLUMES CARD\n         TR    UT2AREA+52(8),TBLA  TRANSLATE DEVTYPE VALUE\n         PACK  DBLWRD,UT2AREA+52(9)     CONVERT TO BINARY FULLWORD\n         MVC   DEVTYPE,DBLWRD+3         AND SAVE IT IN CORE\n         LA    R1,CALLIST          LOAD PARAMETER REG1     *** CALL ***\n         L     R15,=V(DTYP2UNT)    LOAD ENTRY ADDRESS                 *\n         BALR  R14,R15             BRANCH TO ENTRY POINT              *\n         BAL   R11,GETUT2          GET/PRINT ASSOCIATIONS LINE\n*     ASSOCIATIONS\n         B     PUTPARM             GO PUT OUT IMPORT CONNECT CARDS\n*\nALIAS0   EQU   *\n         MVC   CTLBYTES+NDVTLINE(5),STARS SUPPRESS ALL NVSAM LINES\nALIAS1   EQU   *\n         BAL   R11,GETUT2          GET/PRINT ASSOCIATIONS LINE\n*     HISTORY\n*       RELEASE----------------2\n*     ASSOCIATIONS\n         CLC   =C'ASSO',UT2AREA+6  ASSOCIATIONS LINE...\n         BNE   ALIAS1                 ..NO, GO GET NEXT LINE\n         BAL   R11,GETUT2          GET/PRINT NONVSAM/USERCAT NAME LINE\n*       NONVSAM--SYSCTLG.VDSK803\n*       USERCAT--SKK.VSAM.USERCAT\n         MVC   DFALRNAM,UT2AREA+17 MOVE NAME TO RELATE CARD\nPUTPARM  EQU   *\n         LA    R3,CTLBYTES         POINT AT LIST OF CONTROL BYTES\n         LA    R6,BOPCTBL                        AND IDCAMS CARDS\n         LA    R5,99               SET SAFETY STOPPER\n         MVC   INCC(9),=C'0*SYSUT3*' SET PRINT LINE LITERAL\nOUTEST2  EQU   *\n         CLI   0(R3),X'40'         PUT OUT THIS CARD...\n         BNE   EOTCHK2                ..NO, CHECK FOR END OF TABLE\n         BAL   R11,PUTUT3             ..YES, GO PUT/WRITE OUTPUT CARD\nEOTCHK2  EQU   *\n         CLI   0(R3),X'FF'         END OF TABLE...\n         BE    EOTABLE2               ..YES, GO SET UP FOR NEXT REQ\n         LA    R3,1(R3)            UP THE CONTROL BYTE AND\n         LA    R6,80(R6)             IDCAMS CARD POINTERS\n         BCT   R5,OUTEST2          GO PROCESS NEXT IDCAMS CARD\nEOTABLE2 EQU   *\n         MVI   SUPRSW,C'Y'         SUPPRESS SYSUT2 PRINT TILL NEXT NAME\n         B     GETCLNM             GO GET NEXT ALIAS/NVSAM NAME\n*\nWRAPUP   EQU   *\n*        CLOSE (SINDCB,,PRTDCB,,UT3DCB) * * * * * * * * * * * * * * * *\n         MVI   PRTOB,X'00'         SET OPTION BYTE FOR CLOSE          *\n         MVI   UT3OB,X'80'         SET OPTION BYTE FOR CLOSE          *\n         LA    R1,SINOB            LOAD PARAMETER REG1                *\n         SVC   20                  ISSUE CLOSE SVC                    *\n*        FINISH RC=RETCODE\n         L     R15,RETCODE         LOAD RETURN CODE FROM FIELD\n         L     R13,4(R13)          RESTORE POINTER TO CALLING PGM SAVE\n         L     R14,12(R13)         LOAD RETURN ADDRESS\n         LM    R0,R12,20(R13)      RESTORE REGS 0 THRU 12\n         BR    R14                 RETURN TO CALLING PROGRAM\n*\nBSCAN    EQU   *\n         CLI   0(R4),X'40'         FIRST/NEXT BYTE BLANK...\n         BE    EOSCAN                 ..YES, GO CHECK NAME LENGTH\n         MVC   0(1,R6),0(R4)          ..NO, MOVE BYTE TO WORK AREA\n         MVI   0(R4),X'40'                     THEN BLANK SOURCE\n         LA    R3,1(R3)            INCREMENT BYTE COUNT\n         LA    R4,1(R4)                      INPUT POINTER AND\n         LA    R6,1(R6)                      OUTPUT POINTER\n         BCT   R5,BSCAN            GO CHECK NEXT BYTE (IF ANY)\n         CLI   0(R4),X'40'         NO MORE, NEXT BYTE BLANK...\n         BNE   NAME2LNG               ..NO, NAME TOO LONG\nEOSCAN   EQU   *\n         LTR   R3,R3               IS BYTE COUNT ZERO...\n         BZ    NONAME                 ..YES, NO NAME FOUND\n         MVI   1(R6),C')'          INSERT TRAILING RIGHT PARENTHESIS\n         BR    R11                 RETURN TO MAIN LOGIC\n*\nNAME2LNG EQU   *\n         MVC   INMSG,=CL28'NAME/PASSWORD > 53 BYTES ***'\n         B     ERRMSG\n*\nNONAME   EQU   *\n         MVC   INMSG,=CL28'CC-1 BLANK (NO CLUSTER) ***'\nERRMSG   EQU   *\n         LA    R9,INCC             POINT AT PRINT LINE\n         BAL   R11,PUTSIN          GO PRINT INPUT CARD WITH MSG\n         CLI   INWORK+71,X'40'     IS BAD CARD CONTINUED...\n         BE    GETNXT                 ..NO, GO GET NEXT SYSIN CARD\n         BAL   R11,GETSIN          GET CONTINUATION OF BAD CARD\n         MVC   INMSG,=CL28'*** FLUSHED ***'\n         B     ERRMSG                   AND GO FLUSH IT\n*\nBELLYUP  EQU   *\n         ABEND 1,DUMP\n*\nGETSIN   EQU   *\n         MVC   INMSG,BLANKS        BLANK INPUT CARD MESSAGE AREA\n         L     R1,=A(SINDCB)       LOAD ADDRESS OF DCB\n         GET   (1),INCARD          GET NEXT SYSIN RECORD\n         MVC   INWORK,INCARD       MOVE CARD TO WORK AREA\n         BR    R11                 RETURN TO MAIN LOGIC\n*\nGETUT2   EQU   *\n         MVC   UT2AREA,BLANKS      MOVE BLANKS TO RECORD AREA\n         L     R1,=A(UT2DCB)       LOAD ADDRESS OF DCB\n         GET   (1),UT2RDW          GET SYSUT2 RECORD\n         CLI   UT2AREA,X'40'       CCTL = SINGLE-SPACE...\n         BE    SWUT2AX                ..YES, GO TO PRINT/BYPASS SWITCH\n         CLI   UT2AREA,C'0'        CCTL = DOUBLE-SPACE...\n         BE    CC0CHKS                ..YES, GO CHECK IT'S CONTENT\n         CLI   UT2AREA,C'-'        CCTL = TRIPLE-SPACE...\nDASHSW   DS    0H\n         BNE   TURNAON                ..NO, GO ACTIVATE SWUT2C\n*        B     TURNAON                ..WHO CARES, GOT CAT FROM PARM\n*                             LISTING FROM CATALOG -- CATALOG.VMSPCAT\n         MVC   DFPMCTNM,UT2AREA+54 SAVE CATALOG NAME IN PARM CAT CARD\nTURNAON  EQU   *\n         OI    SWUT2C+1,X'F0'      RESET NOP TO BRANCH\nRSTBYPS  EQU   *\n         NI    SWUT2A+1,X'0F'      RESET BRANCH TO NOP\n         NI    SWUT2B+1,X'0F'      RESET BRANCH TO NOP\nSWUT2C   DS    0H\n         B     GETUT2              BRANCH/NOP WHEN CLUSTER HITS  *MDFD*\n         B     PRTUT2              GO PRINT CLUSTER NAME LINE\n*\nSWUT2AX  EQU   *\nSWUT2A   DS    0H\n         NOP   GETUT2              NOP/BR WHEN BYPASSING INPUT   *MDFD*\n         B     PRTUT2              GO PRINT SYSUT2 LINE\n*\nSETBYPS  EQU   *\n         OI    SWUT2A+1,X'F0'      RESET NOP TO BRANCH\n         OI    SWUT2B+1,X'F0'      RESET NOP TO BRANCH\n         B     GETUT2              GO READ NEXT LINE\n*\nCC0CHKS  EQU   *\n         NI    SWUT2C+1,X'0F'      RESET BRANCH TO NOP\n         CLC   =C'CLUS',UT2AREA+1       CLUSTER NAME LINE...\n         BE    RSTBYPS                     ..YES, GO RESET BYPASS\n         CLC   =C'ALIA',UT2AREA+1       ALIAS NAME LINE...\n         BE    RSTSUPR                     ..YES, GO RESET SUPRSW\n         CLC   =C'NONV',UT2AREA+1       NONVSAM NAME LINE...\n         BE    RSTSUPR                     ..YES, GO RESET SUPRSW\n         CLC   =C'USER',UT2AREA+1       USERCATALOG NAME LINE...\n         BE    RSTSUPR                     ..YES, GO RESET SUPRSW\nSWUT2B   DS    0H\n         NOP   GETUT2              NOP/BR WHEN BYPASSING INPUT   *MDFD*\n         CLC   =C'DATA',UT2AREA+4       DATA NAME LINE...\n         BE    PRTUT2                      ..YES, GO PRINT IT\n         CLC   =C'INDE',UT2AREA+4       INDEX NAME LINE...\n         BE    PRTUT2                      ..YES, GO PRINT IT\n         CLC   UT2AREA+1(120),BLANKS    BLANK LINE...\n         BE    SETBYPS                     ..YES, GO SET BYPASS\n         CLC   =C'THE NUMB',UT2AREA+10  RECAP HEADING...\n         BE    SETBYPS                     ..YES, GO SET BYPASS\n         CLC   =C'IDC',UT2AREA+1        ERROR MESSAGE LINE...\n         BE    PRTUT2                      ..YES, GO PRINT IT\n         MVI   UT2AREA,X'40'            OVERFLOW LINE, RESET TO SGLSPC\n         B     SWUT2AX                    GO TO PRINT/BYPASS SWITCH\n*\nRSTSUPR  EQU   *\n         MVI   SUPRSW,C'N'         TURN OFF SUPPRESS SWITCH\n         B     RSTBYPS                  GO RESET BYPASS\n*\nPRTUT2   EQU   *\n         CLI   SUPRSW,C'Y'         SHOULD SYSUT2 PRINT BE SUPPRESSED...\n         BE    GETUT2                 ..YES, GO GET NEXT LINE\n         LA    R9,UT2AREA          POINT AT PRINT LINE\nPUTPRT   EQU   *\n         CP    LINECTR,=P'0'       ANY LINES LEFT...\n         BP    PUTDTL                 ..YES, GO PRINT DETAIL\n         MVC   HPAGE,=XL3'202120'  MOVE MASK TO HEADER AND\n         ED    HPAGE-1(4),PAGENBR       EDIT PAGE NUMBER ONTO IT\n         L     R1,=A(PRTDCB)       LOAD DCB ADDRESS\n         PUT   (1),HEADER          PRINT PROGRAM HEADER\n         AP    PAGENBR,=P'1'       INCREMENT PAGE NUMBER\n         ZAP   LINECTR,=P'58'      RESET LINE COUNTER\n         MVI   0(R9),C'0'          FORCE DOUBLE SPACE\nPUTDTL   EQU   *\n         L     R1,=A(PRTDCB)       LOAD DCB ADDRESS\n         PUT   (1),(9)             PUT SYSPRINT RECORD\n         CLI   0(R9),C'0'          DOUBLE SPACE...\n         BNE   SUB1L                  ..NO, JUST SUBTRACT FOR ONE LINE\n         SP    LINECTR,=P'1'       DECREMENT THE LINE COUNTER\nSUB1L    EQU   *\n         SP    LINECTR,=P'1'       DECREMENT THE LINE COUNTER\n         MVI   0(R9),X'40'         RESET TO SINGLE SPACE\n         BR    R11                 RETURN TO MAIN LOGIC\n*\nPUTUT1   EQU   *\n         L     R1,=A(UT1DCB)       LOAD DCB ADDRESS\n         PUT   (1),INCARD          WRITE IDCAMS SYSIN CARD\n         LA    R9,INCC             POINT AT LINE TO BE PRINTED\n         B     PUTPRT              GO PRINT IMAGE OF CARD\n*\nPUTUT3   EQU   *\n         MVC   INCARD,0(R6)        MOVE CARD TO WORK AREA\n         L     R1,=A(UT3DCB)       LOAD DCB ADDRESS\n         PUT   (1),INCARD          PUT IDCAMS CONTROL CARD\nPUTSIN   EQU   *\n         LA    R9,INCC             POINT AT PRINT LINE AND\n         B     PUTPRT                   GO WRITE IT OUT\n*\nCHKBLKSI EQU   *\n         OC    62(2,R1),62(R1)     IS DCBBLKSI NON-ZERO...\n         BCR   7,R14                  ..YES, RETURN TO OPEN PROCESSING\n         MVC   62(2,R1),82(R1)        ..NO, OVERLAY WITH DCBLRECL\n         BR    R14                 RETURN TO OPEN PROCESSING\n*\n         EJECT\nDBLWRD   DS    D\n*\n         DS    0F\nSINOB    DC    X'00',AL3(SINDCB)   SYSIN    OPTION BYTE/DCB ADDRESS\nPRTOB    DC    X'0F',AL3(PRTDCB)   SYSPRINT OPTION BYTE/DCB ADDRESS\nUT3OB    DC    X'8F',AL3(UT3DCB)   SYSUT3   OPTION BYTE/DCB ADDRESS\nUT2OB    DC    X'80',AL3(UT2DCB)   SYSUT2   OPTION BYTE/DCB ADDRESS\nUT1OB    DC    X'8F',AL3(UT1DCB)   SYSUT1   OPTION BYTE/DCB ADDRESS\n*\n         DS    0F\nDCBFIX   DC    X'85',AL3(CHKBLKSI) DCB EXIT TO PLUG MISSING BLKSIZE\n*\nRETCODE  DS    F                   RETURN CODE\n*\nFWZERO   DC    A(0)\n*\n*        LINK PARAMETER LIST - POINTERS TO...\nPARAM    DC    A(FWZERO)              ..PARM INFORMATION (NONE)\n         DC    X'80',AL3(DDS)         ..ALTERNATE DDNAMES\n*\nLINKLIST DC    A(EP)               ADDRESS OF ENTRY POINT NAME\n         DC    X'80'               RETURN REQUESTED INDICATOR\n         DC    AL3(0)              DCB ADDRESS (NONE)\n         DC    A(LINK1RET)         RETURN ADDRESS\n*\nEP       DC    CL8'IDCAMS'         ENTRY POINT NAME\n*\nLINECTR  DC    PL2'0'              LINE COUNTER\n*\nPAGENBR  DC    PL2'1'              PAGE NUMBER\n*\n         CNOP  2,4\nDDS      DC    H'48'               ALTERNATE DDNAMES FOR...\n         DC    8F'0'\n         DC    CL8'SYSUT1'            ..SYSIN\n         DC    CL8'SYSUT2'            ..SYSPRINT\n*\nR1R2SAV  DS    2F\n*\nCALLIST  CALL  ,(DEVTYPE,DFNVUNIT),VL,MF=L\n*\nNULLSER  DC    XL8'7D5C5C5C5C5C5C7D' LITERAL '******'\nNULLDEVT DC    CL8'  0000  '\n*\nDEVTYPE  DC    XL4'00000000'       DEVICE TYPE\n*\nTBLA     DS    0F                  VALID DISPLAY-HEX CHARACTER TABLE\n         DC    193X'00'            HEX 00 TO C0\n         DC    XL6'FAFBFCFDFEFF'       C1 TO C6 (ALPHA A-F)\n         DC    41X'00'                 C7 TO EF\n         DC    CL10'0123456789'        F0 TO F9 (NUMERIC 0-9)\n         DC    6X'00'                  FA TO FF\n*\nUNFILTBL DS    0F\n         DC    X'000102030405060708090A0B0C0D0E0F'    HEX 00 - 0F\n         DC    X'101112131415161718191A1B1C1D1E1F'    HEX 10 - 1F\n         DC    X'202122232425262728292A2B2C2D2E2F'    HEX 20 - 2F\n         DC    X'303132333435363738393A3B3C3D3E3F'    HEX 30 - 3F\n         DC    X'404142434445464748494A4B4C4D4E4F'    HEX 40 - 4F\n         DC    X'505152535455565758595A5B5C5D5E5F'    HEX 50 - 5F\n         DC    X'406162636465666768696A6B6C6D6E6F'    HEX 60 - 6F\n         DC    X'707172737475767778797A7B7C7D7E7F'    HEX 70 - 7F\n         DC    X'808182838485868788898A8B8C8D8E8F'    HEX 80 - 8F\n         DC    X'909192939495969798999A9B9C9D9E9F'    HEX 90 - 9F\n         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'    HEX A0 - AF\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'    HEX B0 - BF\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'    HEX C0 - CF\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'    HEX D0 - DF\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'    HEX E0 - EF\n         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'    HEX F0 - FF\n*\nCLNMWK   DC    CL55' '             CLUSTER(/PASSWORD) NAME WORK\n*\nCTNMWK   DC    CL55' '             CATALOG(/PASSWORD) NAME WORK\n*\nBLANKS   DC    CL121' '            LITERAL BLANKS\n*\nQMS      DC    121CL1'?'           LITERAL QUESTION MARKS\n*\nSTARS    DC    121CL1'*'           LITERAL ASTERISKS\n*\nCC72SAV  DC    CL1' '              CONTINUATION CHARACTER (CC72) SAVE\n*\nSUPRSW   DC    CL1'N'              SUPPRESS SYSUT2 PRINTOUT SWITCH\n*\nCTLBYTES DC    100XL1'FF'          BYTES TO CONTROL CARD OUTPUT\n*\n*--------------------------------------------------------------------*\n* IDCAMS CONTROL CARD TABLE\nBOLCTBL  DS    0F                  BEGINNING OF LISTCAT CARD TABLE\n*------------------------------------------------------* L I N E   0 1  *0 1\nDLCMND   DS    0CL80\n         DC    CL10' DELETE ( '\nDLNAME   DC    CL55'XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX/PASSWORD'\n         DC    CL5' '\n         DC    CL10'-'\n*------------------------------------------------------* L I N E   0 2\nDLPURGE  DC    CL70'            PURGE '\n         DC    CL10'-'\n*\nPURGLINE EQU   (DLPURGE-BOLCTBL)/80\n*------------------------------------------------------* L I N E   0 3\nDLCAT    DS    0CL80\n         DC    CL13'   CATALOG ( '\nDLCTNM   DC    CL55'XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX/PASSWORD'\n         DC    CL12' '\n*------------------------------------------------------* L I N E   0 4\nDFCLCMND DC    CL70' DEFINE CLUSTER '\n         DC    CL10'-'\n*------------------------------------------------------* L I N E   0 5\nDFCLNMC  DS    0CL80\n         DC    CL19'          ( NAME ( '\nDFCLNAME DC    CL46'XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX'\n         DC    CL5' '\n         DC    CL10'-'\n*------------------------------------------------------* L I N E   0 6\nDFCLBSC  DS    0CL80\n         DC    CL26'            BUFFERSPACE ( '\nDFCLBSPC DC    CL9'NNNNNNNNN'\n         DC    CL35' ) '\n         DC    CL10'-'\n*\nBSPCLINE EQU   (DFCLBSC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   0 7\nDFCLCIC  DS    0CL80\n         DC    CL34'            CONTROLINTERVALSIZE ( '\nDFCLCISZ DC    CL5'NNNNN'\n         DC    CL31' ) '\n         DC    CL10'-'\n*\nCCISLINE EQU   (DFCLCIC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   0 8\nDFCLCYC  DS    0CL80\n         DC    CL24'            CYLINDERS ( '\nDFCLPCYL DC    CL3'NNN'\n         DC    CL1' '\nDFCLSCYL DC    CL3'NNN'\n         DC    CL39' ) '\n         DC    CL10'-'\n*\nCCYLLINE EQU   (DFCLCYC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   0 9\nDFCLERC  DC    CL70'            ERASE '\n         DC    CL10'-'\n*\nERASLINE EQU   (DFCLERC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   1 0\nDFCLEXC  DS    0CL80\n         DC    CL28'            EXCEPTIONEXIT ( '\nDFCLEXCP DC    CL8'XXXXXXXX'\n         DC    CL34' ) '\n         DC    CL10'-'\n*\nEXCPLINE EQU   (DFCLEXC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   1 1\nDFCLFSC  DS    0CL80\n         DC    CL24'            FREESPACE ( '\nDFCLPCIF DC    CL3'NNN'\n         DC    CL1' '\nDFCLPCAF DC    CL3'NNN'\n         DC    CL39' ) '\n         DC    CL10'-'\n*\nFSPCLINE EQU   (DFCLFSC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   1 2\nDFCLIMC  DC    CL70'            IMBED '\n         DC    CL10'-'\n*\nIMBDLINE EQU   (DFCLIMC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   1 3\nDFCLKYC  DS    0CL80\n         DC    CL19'            KEYS ( '\nDFCLKYLN DC    CL3'NNN'\n         DC    CL1' '\nDFCLRKP  DC    CL5'NNNNN'\n         DC    CL42' ) '\n         DC    CL10'-'\n*\nKSDSLINE EQU   (DFCLKYC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   1 4\nDFCLNIC  DC    CL70'            NONINDEXED '\n         DC    CL10'-'\n*\nESDSLINE EQU   (DFCLNIC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   1 5\nDFCLNMBR DC    CL70'            NUMBERED '\n         DC    CL10'-'\n*\nRRDSLINE EQU   (DFCLNMBR-BOLCTBL)/80\n*------------------------------------------------------* L I N E   1 6\nDFCLORC  DC    CL70'            ORDERED '\n         DC    CL10'-'\n*\nORDRLINE EQU   (DFCLORC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   1 7\nDFCLOWC  DS    0CL80\n         DC    CL20'            OWNER ( '\nDFCLOWNR DC    CL8'NNNNNNNN'\n         DC    CL42' ) '\n         DC    CL10'-'\n*\nOWNRLINE EQU   (DFCLOWC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   1 8\nDFCLRSC  DS    0CL80\n         DC    CL25'            RECORDSIZE ( '\nDFCLAVRS DC    CL5'NNNNN'\n         DC    CL1' '\nDFCLMXRS DC    CL5'NNNNN'\n         DC    CL34' ) '\n         DC    CL10'-'\n*------------------------------------------------------* L I N E   1 9\nDFCLREPL DC    CL70'            REPLICATE '\n         DC    CL10'-'\n*\nREPLLINE EQU   (DFCLREPL-BOLCTBL)/80\n*------------------------------------------------------* L I N E   2 0\nDFCLRUC  DC    CL70'            REUSE '\n         DC    CL10'-'\n*\nRUSELINE EQU   (DFCLRUC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   2 1\nDFCLSOC  DS    0CL80\n         DC    CL27'            SHAREOPTIONS ( '\nDFCLSHRO DC    CL3'N,N'\n         DC    CL40' ) '\n         DC    CL10'-'\n*------------------------------------------------------* L I N E   2 2\nDFCLSNC  DC    CL70'            SPANNED '\n         DC    CL10'-'\n*\nSPANLINE EQU   (DFCLSNC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   2 3\nDFCLSDC  DC    CL70'            SPEED '\n         DC    CL10'-'\n*\nSPEDLINE EQU   (DFCLSDC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   2 4\nDFCLTOC  DS    0CL80\n         DC    CL17'            TO ( '\nDFCLEDAT DC    CL5'NNNNN'\n         DC    CL48' ) '\n         DC    CL10'-'\n*\nEDATLINE EQU   (DFCLTOC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   2 5\nDFCLTKC  DS    0CL80\n         DC    CL21'            TRACKS ( '\nDFCLPTRK DC    CL5'NNNNN'\n         DC    CL1' '\nDFCLSTRK DC    CL5'NNNNN'\n         DC    CL38' ) '\n         DC    CL10'-'\n*\nCTRKLINE EQU   (DFCLTKC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   2 6\nDFCLUQC  DC    CL70'            UNIQUE '\n         DC    CL10'-'\n*\nUNIQLINE EQU   (DFCLUQC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   2 7\nDFCLVLC  DS    0CL80\n         DC    CL22'            VOLUMES ( '\nDFCLVOL  DC    CL48'XXXXXX'\n         DC    CL10'-'\n*\nCVOLLINE EQU   (DFCLVLC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   2 8\nDFCLWCC  DC    CL70'            WRITECHECK '\n         DC    CL10'-'\n*\nWTCKLINE EQU   (DFCLWCC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   2 9\nDFCLRPC  DC    CL70'            ) '\n         DC    CL10'-'\n*------------------------------------------------------* L I N E   3 0\nDFDACMND DC    CL70'        DATA '\n         DC    CL10'-'\n*------------------------------------------------------* L I N E   3 1\nDFDANMC  DS    0CL80\n         DC    CL19'          ( NAME ( '\nDFDANAME DC    CL46'XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX'\n         DC    CL5' '\n         DC    CL10'-'\n*------------------------------------------------------* L I N E   3 2\nDFDACIC  DS    0CL80\n         DC    CL34'            CONTROLINTERVALSIZE ( '\nDFDACISZ DC    CL5'NNNNN'\n         DC    CL31' ) '\n         DC    CL10'-'\n*\nDCISLINE EQU   (DFDACIC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   3 3\nDFDACYC  DS    0CL80\n         DC    CL24'            CYLINDERS ( '\nDFDAPCYL DC    CL3'NNN'\n         DC    CL1' '\nDFDASCYL DC    CL3'NNN'\n         DC    CL39' ) '\n         DC    CL10'-'\n*\nDCYLLINE EQU   (DFDACYC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   3 4\nDFDATKC  DS    0CL80\n         DC    CL21'            TRACKS ( '\nDFDAPTRK DC    CL5'NNNNN'\n         DC    CL1' '\nDFDASTRK DC    CL5'NNNNN'\n         DC    CL38' ) '\n         DC    CL10'-'\n*\nDTRKLINE EQU   (DFDATKC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   3 5\nDFDAVLC  DS    0CL80\n         DC    CL22'            VOLUMES ( '\nDFDAVOL  DC    CL48'XXXXXX'\n         DC    CL10'-'\n*\nDVOLLINE EQU   (DFDAVLC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   3 6\nDFDARPC  DC    CL70'            ) '\n         DC    CL10'-'\n*------------------------------------------------------* L I N E   3 7\nDFIXCMND DC    CL70'        INDEX '\n         DC    CL10'-'\n*\nINDXLINE EQU   (DFIXCMND-BOLCTBL)/80\n*------------------------------------------------------* L I N E   3 8\nDFIXNMC  DS    0CL80\n         DC    CL19'          ( NAME ( '\nDFIXNAME DC    CL46'XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX'\n         DC    CL5' '\n         DC    CL10'-'\n*\nIXNMLINE EQU   (DFIXNMC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   3 9\nDFIXCIC  DS    0CL80\n         DC    CL34'            CONTROLINTERVALSIZE ( '\nDFIXCISZ DC    CL5'NNNNN'\n         DC    CL31' ) '\n         DC    CL10'-'\n*\nICISLINE EQU   (DFIXCIC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   4 0\nDFIXCYC  DS    0CL80\n         DC    CL24'            CYLINDERS ( '\nDFIXPCYL DC    CL3'NNN'\n         DC    CL1' '\nDFIXSCYL DC    CL3'NNN'\n         DC    CL39' ) '\n         DC    CL10'-'\n*\nICYLLINE EQU   (DFIXCYC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   4 1\nDFIXTKC  DS    0CL80\n         DC    CL21'            TRACKS ( '\nDFIXPTRK DC    CL5'NNNNN'\n         DC    CL1' '\nDFIXSTRK DC    CL5'NNNNN'\n         DC    CL38' ) '\n         DC    CL10'-'\n*\nITRKLINE EQU   (DFIXTKC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   4 2\nDFIXVLC  DS    0CL80\n         DC    CL22'            VOLUMES ( '\nDFIXVOL  DC    CL48'XXXXXX'\n         DC    CL10'-'\n*\nIVOLLINE EQU   (DFIXVLC-BOLCTBL)/80\n*------------------------------------------------------* L I N E   4 3\nDFIXRPC  DC    CL70'            ) '\n         DC    CL10'-'\n*\nIXRPLINE EQU   (DFIXRPC-BOLCTBL)/80\nNOILINES EQU   (IXRPLINE-INDXLINE)+1\n*------------------------------------------------------* L I N E   4 4\nDFCAT    DS    0CL80\n         DC    CL13'   CATALOG ( '\nDFCTNM   DC    CL55'XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX/PASSWORD'\n         DC    CL12' '\n*------------------------------------------------------* L I N E   4 5\nLCCMND   DS    0CL80\n         DC    CL7' LISTC '\nLCPARM   DC    CL6'ENT ( '\nLCNAME   DC    CL55'XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX/PASSWORD'\n         DC    CL2' '\n         DC    CL10'-'\n*------------------------------------------------------* L I N E   4 6\nLCCAT    DS    0CL80\n         DC    CL13'   CATALOG ( '\nLCCTNM   DC    CL55'XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX/PASSWORD'\n         DC    CL2' '\n         DC    CL10'-'\n*------------------------------------------------------* L I N E   4 7\nLCALC    DC    CL80'         ALL '\n*--------------------------------------------* E N D   O F   T A B L E\nEOLCTBL  DS    0F                  END OF LISTCAT CARD TABLE\nNBRLINES EQU   (EOLCTBL-BOLCTBL)/80\n*--------------------------------------------------------------------*\n* IDCAMS CARDS FOR ALIAS OR NONVSAM DEFINES\nBOPCTBL  DS    0F                  BEGINNING OF PARM CARD TABLE\n*--------------------------------------------------------* P A R M   1\nDFPMCMND DC    CL8' DEFINE '                          ALIAS/NVSAM/UCAT\nDFPMTYPE DC    CL5'ALIAS',CL10' ( NAME ( '\nDFPMNAME DC    CL44' ',CL3' ) '\n         DC    CL10'-'\n*--------------------------------------------------------* P A R M   2\nDFALRLAT DC    CL17'        RELATE ( '                ALIAS\nDFALRNAM DC    CL44' ',CL9' ) ) '\n         DC    CL10'-'\n*\nARELLINE EQU   (DFALRLAT-BOPCTBL)/80\n*--------------------------------------------------------* P A R M   3\nDFNVDEVT DC    CL15'        DEVT ( '                        NVSAM/UCAT\nDFNVUNIT DC    CL8'UNITNAME',CL47' ) '\n         DC    CL10'-'\n*\nNDVTLINE EQU   (DFNVDEVT-BOPCTBL)/80\n*--------------------------------------------------------* P A R M   4\nDFNVFSNO DC    CL30'        FILESEQUENCENUMBERS ( '         NVSAM\nDFNVFNBR DC    CL8'0',CL32' ) '\n         DC    CL10'-'\n*\nNFSNLINE EQU   (DFNVFSNO-BOPCTBL)/80\n*--------------------------------------------------------* P A R M   5\nDFNVOWNR DC    CL16'        OWNER ( '                       NVSAM\nDFNVONAM DC    CL8'OWNERID ',CL46' ) '\n         DC    CL10'-'\n*\nNOWNLINE EQU   (DFNVOWNR-BOPCTBL)/80\n*--------------------------------------------------------* P A R M   6\nDFNVEXDT DC    CL13'        TO ( '                          NVSAM\nDFNVXYY  DC    CL2'YY'\nDFNVXDDD DC    CL3'DDD',CL52' ) '\n         DC    CL10'-'\n*\nNXDTLINE EQU   (DFNVEXDT-BOPCTBL)/80\n*--------------------------------------------------------* P A R M   7\nDFNVVOLS DC    CL18'        VOLUMES ( '                     NVSAM/UCAT\nDFNVVSNO DC    CL8'VOLSER  ',CL44' ) ) '\n         DC    CL10'-'\n*\nNVOLLINE EQU   (DFNVVOLS-BOPCTBL)/80\n*--------------------------------------------------------* P A R M   8\nDFPMCAT  DC    CL13'   CATALOG ( '                    ALIAS/NVSAM/UCAT\nDFPMCTNM DC    CL44'XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX'\n         DC    CL23' ) '\n*--------------------------------------------* E N D   O F   T A B L E\nEOPCTBL  DS    0F                  END OF PARM CARD TABLE\nNBRPLINS EQU   (EOPCTBL-BOPCTBL)/80\n*--------------------------------------------------------------------*\nHEADER   DC    CL1'1'\nHDATE    DC    XL6'21204B202020'             YY.DDD\nHTIME    DC    XL10'402021204B20204B2020'    HH.MM.SS\n         DC    CL20' '\n         DC    CL76'W.S.R.C.C.---SYSTEM SUPPORT UTILITIES---IDCMSGEN'\n         DC    CL5'PAGE '\nHPAGE    DC    CL3' '\n*\nUT2RDW   DS    F                   RECORD DESCRIPTOR WORD\nUT2AREA  DS    CL121               SYSUT2 RECORD AREA\n*\nINCC     DC    CL11'0 *SYSIN* <'\nINCARD   DC    CL80' '             SYSIN RECORD AREA\n         DC    CL2'> '\nINMSG    DC    CL28' '\n*\nINWORK   DC    CL80' '             SYSIN WORK AREA\n*\n         LTORG\n*\nPRTDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=121,MACRF=(PM),          X\n               RECFM=FBA\n*\nSINDCB   DCB   DDNAME=SYSIN,DSORG=PS,LRECL=80,MACRF=(GM),RECFM=FB,     X\n               EODAD=WRAPUP\n*\nUT1DCB   DCB   BLKSIZE=80,DDNAME=SYSUT1,DSORG=PS,LRECL=80,             X\n               MACRF=(PM),RECFM=F\n*\nUT2DCB   DCB   DDNAME=SYSUT2,DSORG=PS,LRECL=125,MACRF=(GM),            X\n               RECFM=VBA,EODAD=EOUT2\n*\nUT3DCB   DCB   DDNAME=SYSUT3,DSORG=PS,LRECL=80,MACRF=(PM),RECFM=FB,    X\n               EXLST=DCBFIX\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFACTRT": {"ttr": 4106, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x07\\xc5\\x07\\xc5\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 1989, "newlines": 1989, "modlines": 0, "user": "WSRCC"}, "text": "***********************************************************************\n*                                                                     *\n*             MODULE NAME = IEFACTRT                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME =  MVS/SP SYSTEM IPO SUPPLIED          *\n*                SMF EXIT ROUTINE TO PUT MESSAGES ON JOB LOG WITH     *\n*                STEP TERMINATION STATUS.                             *\n*                                                                     *\n*             LOCALLY MODIFIED BY TOM FOTH AND JOE MARTIN AT          *\n*                STATE OF WISCONSIN                                   *\n*                DEPARTMENT OF HEALTH AND SOCIAL SERVICES             *\n*                OFFICE OF INFORMATION SYSTEMS                        *\n*                WILSON STREET REGIONAL COMPUTING CENTER              *\n*                PO BOX 7850 - ROOM B253                              *\n*                ONE WEST WILSON STREET                               *\n*                MADISON, WISCONSIN 53707-7850                        *\n*                                                                     *\n*             FUNCTION =                                              *\n*                PUT MESSAGES VIA WTO ON JOB, SYS AND JES2 LOG.       *\n*                ADD SOME INFORMATION TO THE RACF FIELDS OF THE       *\n*                TYPE 30 AND 32 SMF RECORDS IN AN ACF2 ENVIRONMENT.   *\n*                                                                     *\n*                OPERATION =                                          *\n*                   FOR JOB STEP TERMINATION PUT STATISTICS OF STEP.  *\n*                   FOR JOB TERMINATION PUT OUT JOB ENDED MESSAGE.    *\n*                                                                     *\n*              NOTES =                                                *\n*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.             *\n*                    REQUIRES WTO EXIT ROUTINE, IEECVXIT, TO          *\n*                    SUPPRESS ROUTE CODE 14 FROM CONSOLE.             *\n*                                                                     *\n*                 RESTRICTIONS = NONE                                 *\n*                                                                     *\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        *\n*                   BINARY ZEROES)                                    *\n*                                                                     *\n*             MODULE TYPE = PROCEDURE                                 *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = LOTS OF BYTES                          *\n*                                                                     *\n*                ATTRIBUTES = KEY 0, REENTRANT,                       *\n*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          *\n*                                                                     *\n*             ENTRY POINTS = IEFACTRT (ONLY ENTRY POINT)              *\n*                                                                     *\n*             INPUT = REG1 POINTS TO LIST OF FULLWORD ADDRESSES       *\n*                     AS FOLLOWS.                                     *\n*                 1.  PTR TO COMMON EXIT PARAMETER AREA               *\n*                 2.  PTR TO STEPNAME FIELD                           *\n*                 3.  PTR TO PROGRAMMER NAME FIELD                    *\n*                 4.  PTR TO JOB CPU TIME FIELD                       *\n*                 5.  PTR TO JOB ACCOUNTING FIELDS                    *\n*                 6.  PTR TO STEP CPU TIME FIELD                      *\n*                 7.  PTR TO STEP ACCOUNTING FIELDS                   *\n*                 8.  PTR TO CANCEL FLAG & STEP NUMBER                *\n*                 9.  PTR TO CONDITION CODE FIELD                     *\n*                10.  PTR TO SMF RECORD TO BE WRITTEN                 *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                OUTPUT = NONE                                        *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                OUTPUT = NONE                                        *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                ROUTINES = NONE                                      *\n*                DATA AREAS = NONE                                    *\n*                CONTROL BLOCKS = NONE                                *\n*                                                                     *\n*             TABLES = NONE                                           *\n*                                                                     *\n*             MACROS = SAVE, WTO, RETURN, GETMAIN, FREEMAIN, ESTAE,   *\n*                      SETRP, IFASMFR, IEFJMR, IHASDWA, TIME          *\n*                      BEGIN AND FINISH FROM WSRCC                    *\n*                                                                     *\n*             MESSAGES =                                              *\n*                STEP TERMINATION LINE AND JOB TERMINATION LINE.      *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\n         EJECT\n*\n* CONSTANT ADDRESS EQAUTES\n*\nPSAAOLD  EQU    X'224',4    ADDRESS IN PSA OF CURRENT ASCB\nCHSTEP   EQU    X'38',8     ADDRESS IN STEP NAME IN CSCB\nCHPROCSN EQU    X'18',8     ADDRESS IN PROC STEP NAME IN CSCB\n*\n* CONSTANT EQUATES\n*\nK0       EQU   00                  NON-RELOCATABLE CONSTANT 00\nK1       EQU   01                  NON-RELOCATABLE CONSTANT 01\nK2       EQU   02                  NON-RELOCATABLE CONSTANT 02\nK3       EQU   03                  NON-RELOCATABLE CONSTANT 03\nK4       EQU   04                  NON-RELOCATABLE CONSTANT 04\nK5       EQU   05                  NON-RELOCATABLE CONSTANT 05\nK6       EQU   06                  NON-RELOCATABLE CONSTANT 06\nK7       EQU   07                  NON-RELOCATABLE CONSTANT 07\nK8       EQU   08                  NON-RELOCATABLE CONSTANT 08\nK9       EQU   09                  NON-RELOCATABLE CONSTANT 09\nKA       EQU   10                  NON-RELOCATABLE CONSTANT 10\nKB       EQU   11                  NON-RELOCATABLE CONSTANT 11\nKC       EQU   12                  NON-RELOCATABLE CONSTANT 12\nKD       EQU   13                  NON-RELOCATABLE CONSTANT 13\nKE       EQU   14                  NON-RELOCATABLE CONSTANT 14\nKF       EQU   15                  NON-RELOCATABLE CONSTANT 15\n*\n* CONSTANT EQUATES\n*\nSUBPOOL  EQU   252                 USE SUBPOOL 252 FOR GETMAIN\nLSQASUBP EQU   255                 USE SUBPOOL 255 FOR WJCT GETMAIN\nCK       EQU   C'K'                CONSTANT CHAR 'K'\nCASTR    EQU   C'*'                CONSTANT CHAR '*'\nC0       EQU   C'0'                CONSTANT CHAR '0'\n         IEZBITS\n*\n* REGISTER EQUATES\n*\n*R0  WORK\n*R1  WORK / PARM\n*R2  WORK\n*R3  WORK\n*R4  SECTION PTR\n*R5  WORK\n*R6  OUTPUT LINE\n*R7  COMMON AREA\n*R8  WSRCC JCT\n*R9  SMF RECORD\n*R10 BASE REG2\n*R11 CONSTANTS\n*R12 BASE REG1\n*R13 SAVE AREA\n*R14 LINKAGE\n*R15 LINKAGE\n         EJECT\n         PRINT NOGEN                                            WDA#01\nIEFACTRT BEGIN BASE=(R12,R10),                                         X\n               SAVE=(DATA,LDATA,SUBPOOL),                              X\n               AUTHOR=TJF,VER=SP13,NOP=YES\n         SPACE 2\n*\n* INITIALIZATION\n*\n         L     R11,4(R13)          POINT TO PREVIOUS SAVE AREA\n         L     R2,20(R11)          GET THE ENTRY REASON CODE\n         L     R11,68(R11)         GET THE PREVIOUS R12\n         ST    R11,R12FORYS        SAVE R12 FOR IEFYS USE\n         LA    R11,CONSTANT        GET THE ADDRESS ON THE CONSTANT AREA\n         USING CONSTANT,R11\n         L     R7,PARMEPRM-PARMS(K0,R1) COMMON AREA ADDRESS\n         USING JMR,R7              SET UP ADDRESSABILITY TO COMMON\n         LA    R6,WTO1TXT          GET REGISTER FOR ADDRESSABILITY\n         MVC   PARMS(LPARMS),K0(R1) SAVE INPUT PARMS\n*\n*        SET UP RECOVERY ENVIRONMENT\n*\n         XC    ESTAPARM(LESTAEPM),ESTAPARM CLEAR ESTAE PARAMETER LIST\n         MVC   ESTAEW(LESTAEL),ESTAEL  MOVE IN ESTAE PARAMETER LIST\n         LA    R0,RTRYRTN1             RETRY ROUTINE - NO SDWA\n         ST    R0,NOSDWARR             STORE IN PARAMETER LIST\n         LA    R0,RTRYRTN2             RETRY ROUTINE - WITH SDWA\n         ST    R0,SDWARR               STORE IN PARAMETER LIST\n         STM   R12,R13,ESTAER12        STORE BASE & DATA REG IN PARM\n         ESTAE RECOVERY,CT,PARAM=ESTAPARM,MF=(E,ESTAEW) SETUP RCVRY\n*\n*        DETERMINE REASON FOR ENTRY  STEP/JOB TERMINATION\n*\n         L     R9,PARMRECD         LOAD ADDRESS OF SMF RECORD\n         C     R2,R30CODE          WAS ENTRY CODE FOR REC30     WDA#01\n         BE    DOTYPE30            RECORD IS A TYPE 30          WDA#01\n         C     R2,R32CODE          WAS ENTRY CODE FOR REC32     WDA#01\n         BE    DOTYPE32            RECORD IS A TYPE 32          WDA#01\n         B     EXIT                NOT 30 OR 32 - GO AWAY       WDA#01\n         EJECT\nDOTYPE32 DS    0H                  PROCESS TYPE 32 RECORDS      WDA#01\n         USING SMFRCD32,R9         ADDRESS THE TYPE 32 RECORD   WDA#01\n*\n* TSO STATION ID FIX UP FOR NON-RACF SYSTEMS - TYPE 32 RECORDS  WDA#01\n*\n         L     R4,SMF32IOF         GET THE OFFSET               WDA#01\n         LTR   R4,R4               DO WE HAVE ONE               WDA#01\n         BNZ   GOTTSOI2            YEP                          WDA#01\n*\n         MVC   WTO1TXT,MSG084A     MOVE THE MSG OVLY TO MSG BFR WDA#01\n         L     R0,=F'-1'           ERROR MESSAGE                WDA#01\n         BAL   R14,MSGRTN                                       WDA#01\n         B     EXIT                DISCONTINUE EXECUTION        WDA#01\n*\nGOTTSOI2 AR    R4,R9               POINT TO SS SEGMENT          WDA#01\n         USING SMF32ID,R4          MAP TYPE 32                  WDA#01\n         LH    R2,=S(SMF32TID)                                  WDA#01\n         SLL   R2,20               CLEAR BASE & HIGH ORDER BITS WDA#01\n         SRL   R2,20               BY SHIFITING                 WDA#01\n         LA    R2,L'SMF32TID(R2,0) MINIMUM LENGTH OF ID SECTION WDA#01\n         CH    R2,SMF32ILN         ARE WE OKAY                  WDA#01\n         BNH   GUDTSO32            YEP                          WDA#01\n*\n         MVC   WTO1TXT,MSG085A     MOVE THE MSG OVLY TO MSG BFR WDA#01\n         L     R0,=F'-1'           ERROR MESSAGE                WDA#01\n         BAL   R14,MSGRTN                                       WDA#01\n         B     EXIT                DISCONTINUE EXECUTION        WDA#01\n*\nGUDTSO32 L     R3,PSAAOLD          GET CURRENT ASCB             WDA#01\n         USING ASCB,R3             MAP IT                       WDA#01\n         L     R3,ASCBTSB          LOAD ADDRESS OF TSB          WDA#01\n         USING TSB,R3              ESTABLISH ADDRESSBLTY TO TSB WDA#01\n         LTR   R3,R3               SEE IF ADDRESS ZERO -NOT TSO WDA#01\n         BNZ   GOTTSB2             OKAY TSB                     WDA#01\n*\n         MVC   WTO1TXT,MSG086A     MOVE THE MSG OVLY TO MSG BFR WDA#01\n         L     R0,=F'-1'           ERROR MESSAGE                WDA#01\n         BAL   R14,MSGRTN                                       WDA#01\n         B     EXIT                DISCONTINUE EXECUTION        WDA#01\n*\nGOTTSB2  TM    TSBFLG5,TSBVTAM     SEE IF THIS IS TSO/VTAM TSB  WDA#01\n         BO    GETTSBX2            YES....GO GET TSB EXTENSION  WDA#01\n         MVC   RWORK(2),TSBLINE    MOVE OVER THE BINARY CUA     WDA#01\n         UNPK  RWORK+K3(K5),RWORK(K3) UNPACK IT                 WDA#01\n         TR    RWORK+K4(K3),TRTAB-C0 TRANSLATE TO PRINTABLE CHR WDA#01\n         MVC   SMF32TID(3),RWORK+K4 MOVE TO FIELD               WDA#01\n         B     EXIT                END OF ROUTINE               WDA#01\n*\nGETTSBX2 L     R2,TSBEXTNT         GET ADDRESS OF TSB EXTENSION WDA#01\n         USING TSBX,R2             ESTABLSH ADDRESSBLTY TO TSBX WDA#01\n         TM    TSBXFLG1,TSBXWREC   SEE IF TERMNL AWAITING RECON WDA#01\n         BNO   GETSYM2             NO.....GO GET SYMBOLIC NAME  WDA#01\n         MVC   SMF32TID(8),=CL8'DISCON''D' MOVE IN DISCON'D     WDA#01\n         B     EXIT                END OF ROUTINE               WDA#01\n*\nGETSYM2  MVC   SMF32TID(8),TSBTRMID MOVE IN TERM SYMBOLIC NAME  WDA#01\n         B     EXIT                                             WDA#01\n         LTORG\n         DROP  R3,R2,R4\n         EJECT\nDOTYPE30 DS    0H                  PROCESS TYPE 30 RECORDS      WDA#01\n         USING SMFRCD30,R9         ADDRESS THE TYPE 30 RECORD   WDA#01\n         TM    JMRINDC,JMRFIND     IS IT TIME SHARING USER?\n         BNO   NORMACT             NO, DO ACTRT PROCESSING\n*\n* TSO STATION ID FIX UP FOR NON-RACF SYSTEMS - TYPE 30 RECORDS  WDA#01\n*\n         L     R4,SMF30IOF         GET THE OFFSET\n         LTR   R4,R4               DO WE HAVE ONE\n         BNZ   GOTTSOID            YEP\n*\n         MVC   WTO1TXT,MSG087A     MOVE THE MSG OVLY TO MSG BUFFER\n         L     R0,=F'-1'           ERROR MESSAGE\n         BAL   R14,MSGRTN\n         B     EXIT                DISCONTINUE EXECUTION\n*\nGOTTSOID AR    R4,R9               POINT TO SS SEGMENT\n         USING SMF30ID,R4          MAP TYPE 30\n         LH    R2,=S(SMF30TID)\n         SLL   R2,20               CLEAR BASE AND HIGH ORDER BITS\n         SRL   R2,20               BY SHIFITING\n         LA    R2,L'SMF30TID(R2,0) MINIMUM LENGTH OF ID SECTION\n         CH    R2,SMF30ILN         ARE WE OKAY\n         BNH   GUDTSO30            YEP\n*\n         MVC   WTO1TXT,MSG088A     MOVE THE MSG OVLY TO MSG BUFFER\n         L     R0,=F'-1'           ERROR MESSAGE\n         BAL   R14,MSGRTN\n         B     EXIT                DISCONTINUE EXECUTION\n*\nGUDTSO30 L     R3,PSAAOLD          GET CURRENT ASCB\n         USING ASCB,R3             MAP IT\n         L     R3,ASCBTSB          LOAD ADDRESS OF TSB\n         USING TSB,R3              ESTABLISH ADDRESSABILITY TO TSB\n         LTR   R3,R3               SEE IF ADDRESS ZERO - NOT TSO\n         BNZ   GOTTSB              OKAY TSB\n*\n         MVC   WTO1TXT,MSG089A     MOVE THE MSG OVLY TO MSG BUFFER\n         L     R0,=F'-1'           ERROR MESSAGE\n         BAL   R14,MSGRTN\n         B     EXIT                DISCONTINUE EXECUTION\n*\nGOTTSB   TM    TSBFLG5,TSBVTAM     SEE IF THIS IS A TSO/VTAM TSB\n         BO    GETTSBX             YES....GO GET TSB EXTENSION\n         MVC   RWORK(2),TSBLINE    MOVE OVER THE BINARY CUA\n         UNPK  RWORK+K3(K5),RWORK(K3) UNPACK IT\n         TR    RWORK+K4(K3),TRTAB-C0 TRANSLATE TO PRINTABLE CHAR\n         MVC   SMF30TID(3),RWORK+K4 MOVE TO FIELD\n         B     EXIT                END OF ROUTINE\n*\nGETTSBX  L     R2,TSBEXTNT         GET ADDRESS OF TSB EXTENSION\n         USING TSBX,R2             ESTABLISH ADDRESSABILITY TO TSBX\n         TM    TSBXFLG1,TSBXWREC   SEE IF TERMINAL AWAITING RECON\n         BNO   GETSYM              NO.....GO GET SYMBOLIC NAME\n         MVC   SMF30TID(8),=CL8'DISCON''D' MOVE IN DISCON'D\n         B     EXIT                END OF ROUTINE\n*\nGETSYM   MVC   SMF30TID(8),TSBTRMID MOVE IN TERMINAL SYMBOLIC NAME\n         B     EXIT\n         LTORG\n         DROP  R3,R2,R4\n         EJECT\n*\n* BATCH AND STC STATISTIC DISPLAYS INITIALIZATION\n*\n         DS    0F\nNORMACT  CLC   SMF30SON,=H'0'      CHECK IF SSSEGMENT IS THERE  MSEIPO4\n         BH    GUDSSS              YES, CONTINUE\n*\n         MVC   WTO1TXT,MSG094A     MOVE THE MSG OVLY TO MSG BUFFER\n         L     R0,=F'-1'           ERROR MESSAGE\n         BAL   R14,MSGRTN\n         B     EXIT                DISCONTINUE EXECUTION\n*\nGUDSSS   L     R8,JMRUCOM          GET THE WJCT ADDRESS\n         TIME  BIN                 GET CURRENT DATE + TIME\n         STM   R0,R1,TIMEDATE\n         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4\n         A     R4,SMF30SOF         POINT TO SS SEGMENT          MSEIPO4\n         USING SMF30PSS,R4                                      MSEIPO4\n         CLC   SMF30TYP,R30JOB     WAS IT JOB TERMINATION       MSEIPO4\n         BE    JOBTERM             YES, HANDLE JOB TERM         MSEIPO4\n         CLC   SMF30TYP,R30STEP    WAS IT STEP TERMINATION      MSEIPO4\n         BNE   EXIT                NOPE, DISREGARD              MSEIPO4\n         DROP  R4                                               MSEIPO4\n         EJECT\n*\n*        HANDLE STEP TERMINATION CONDITIONS\n*\nSTEPTERM DS    0H                  ENTRY FROM STEP TERMINATION\n*\n* PERFORM LOTS OF DATA VERIFICATION AND WARNINGS IF NECESSARY\n*\n         CLC   SMF30ION,=H'0'      IS THERE AN ID SECTION\n         BH    CHEKSTEP            NOPE - EXIT - CAN'T WORK WITHOUT ONE\n         MVC   WTO1TXT,MSG099A     MOVE THE MSG OVLY TO MSG BUFFER\n         L     R0,=F'-1'           ERROR MESSAGE\n         BAL   R14,MSGRTN\n         B     EXIT                DISCONTINUE EXECUTION\n*\nCHEKSTEP LR    R4,R9               PRIME R4 WITH SMF REC BASE\n         A     R4,SMF30IOF         GET ADDRESS OF ID SECTION\n         USING SMF30ID,R4\n         CLC   SMF30JNM,SMF30JBN   IS THIS A SUBSYSTEM\n         BE    EXIT                YES-NO PROCESSING\n         L     R1,PARMINDC         LOAD ADDRESS OF STEP NO\n         CLI   1(R1),X'00'         CHECK STEP IS THE STEP ZERO?\n         BH    GUDSTEP             NOPE, IT'S OKAY\n*                                  BAD STEP NUMBER\n         MVC   WTO1TXT,MSG098A     MOVE THE MSG OVLY TO MSG BUFFER\n         L     R0,=F'-1'           ERROR MESSAGE\n         BAL   R14,MSGRTN\n         B     EXIT                DISCONTINUE EXECUTION\n*\nGUDSTEP  CLC   SMF30RON,=H'0'      IS THERE A STORAGE SECTION?\n         BH    CHEKWJCT            YEP, FIRST TYPE 30 FOR THIS SUBTYPE\n*                                  NOPE, WE BETTER HAVE A WJCT\n         LTR   R8,R8               DO WE HAVE A WJCT?\n         BNZ   VERWJCT             YEP (MAYBE, SUBJECT TO VERIFICATION)\n*                                  NOPE, TELL THE OPERATOR\n         MVC   WTO1TXT,MSG097A     MOVE THE MSG OVLY TO MSG BUFFER\n         L     R0,=F'-1'           ERROR MESSAGE\n         BAL   R14,MSGRTN\n         B     EXIT                DISCONTINUE EXECUTION\n*\nCHEKWJCT LTR   R8,R8               DO WE HAVE A WJCT?\n         BZ    FIRSTSTP            NOPE, GO GET ONE\n*                                  POTENTIAL GOOD WJCT\nVERWJCT  MVC   ESTAECOD(4),=CL4'WJCT' SAVE ESTAE REFERENCE MATERIAL\n         ST    R8,ESTAEWRK            AND THE JMRUCOM WJCT POINTER\n         CLC   =CL8'WSRCCJCT',0(R8)   GOOD WJCT?\n         BE    NOTFIRST            YEP, WE ARE POINTING TO A REAL WJCT\n*                                  JMRUCOM HAS BAD WJCT POINTER\n*                                  WARN THE OPERATOR AND EXIT\n         MVC   WTO1TXT,MSG096A     MOVE THE MSG OVLY TO MSG BUFFER\n         USING DMYM096A,R6\n         ST    R8,RWORK            BAD WJCT POINTER\n         UNPK  DWORD(K8),RWORK(K4) ADD ZONES TO FIELD\n         OI    DWORD+7,X'F0'       OR THE LAST ZONE\n         TR    DWORD(K8),TRTAB-C0  TRANSLATE TO CHARACTERS\n         MVC   M096AWJC(K8),DWORD  MOVE TO OUTPUT LINE\n         L     R0,=F'-1'           ERROR MESSAGE\n         BAL   R14,MSGRTN\n         B     EXIT                DISCONTINUE EXECUTION\n         EJECT\n*\n* FIRST STEP PROCESSING\n*\nFIRSTSTP L     R0,WJCTGMPM         LOAD GETMAIN PARMS\n         GETMAIN R,LV=(0)          GET STORAGE FOR DATA DSECT\n         ST    R1,JMRUCOM          SAVE THE WJCT ADDR\n         LR    R8,R1               R8 IS WJCT BASE\n         USING WJCT,R8             ADDRESSABILITY\n         XC    WJCT(LWJCT),WJCT    CLEAR THE WJCT\n         MVC   WJCT(8),=CL8'WSRCCJCT' MOVE IN THE ID\n*\n* HERE WE DISPLAY SYS001I, SYS101I JOB START STATISTICS\n*\n         MVC   WTO1TXT,MSG001A\n         USING DMYM001A,R6\n         MVC   M001AJBN,JMRJOB     MOVE THE JOBNAME IN\n         MVC   M001AJNM,SMF30JNM   MOVE IN JOB NUMBER\n         MVC   M001AUSR,SMF30USR   PROGRAMMER FILED\n         MVC   M001ASID,SMF30SID   SYSTEM ID\n         MVC   M001ACLS,SMF30CLS   JOB CLASS\n         LH    R1,SMF30JPT         GET PRIORITY\n         LA    R2,M001AJPT\n         BAL   R14,PCOUNT\n         L     R1,SMF30SIT         GET INIT TIME\n         SR    R0,R0               CLEAR R0\n         L     R3,ZERODATE         CLEAR R2\n         L     R2,ZERODATE         CLEAR R3\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         MVC   M001ATME,TIMEFLD+2\n         L     R0,SMF30STD         DATE OF STEP INITIATION\n         BAL   R14,DATECONV        GO CONVERT DATE\n         MVC   M001AGDT,MODDYY     MOVE IN CONVERTED DATE\n         MVC   M001ADAY,DAY        MOVE IN DAY-OF-WEEK\n         MVC   M001AJDT,JULIAN     MIVE IN JULIAN DATE\n         LA    R0,X'1'             011 PUT TO JOBLOG, SYSLOG\n         BAL   R14,MSGRTN\n         MVC   WTO1TXT,MSG101A\n         USING DMYM101A,R6\n         L     R0,SMF30RED         GET ADDRESS FOR DATE CONVERSION\n         BAL   R14,DATECONV        GO CONVERT DATE\n         MVC   M101AGD1,MODDYY     MOVE IN CONVERTED DATE\n         MVC   M101ADY1,DAY        MOVE IN DAY-OF-WEEK\n         MVC   M101AJDT,JULIAN     MIVE IN JULIAN DATE\n         L     R1,SMF30RET         GET RDR OFF TIME\n         SR    R0,R0               CLEAR R0\n         L     R3,ZERODATE         CLEAR R2\n         L     R2,ZERODATE         CLEAR R3\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         MVC   M101ATM1,TIMEFLD+2\n         L     R1,SMF30SIT         GET INIT TIME\n         L     R0,SMF30RET         GET RDR OFF TIME\n         L     R3,SMF30STD         GET INIT DATE\n         L     R2,SMF30RED         GET RDR OFF DATE\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         MVC   M101ATM2,TIMEFLD\n         L     R1,SMF30AST         GET DEVICE ALLOCATION\n         L     R0,SMF30SIT         GET INIT TIME\n         L     R3,ZERODATE         GET ZERO DATE\n         L     R2,ZERODATE         GET ZERO DATE\n         CR    R1,R0\n         BNL   CALLCLK1\n         L     R3,DATE1            GET DATE OF 1\nCALLCLK1 BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         MVC   M101ATM3,TIMEFLD\n         LA    R0,X'1'             011 PUT TO JOBLOG, SYSLOG\n         BAL   R14,MSGRTN\n         EJECT\n*\n* ENTER HERE FOR STEP STATISTICS\n*\nNOTFIRST DS    0H\n         CLC   SMF30RON,=H'1'      IS THERE A STORAGE SECTION?\n         BL    T30DDEXT            NOPE, THIS IS A DD EXTENSION RECORD\n         MVC   WTO1TXT,MSG102A     MOVE THE MSG OVLY TO MSG BUFFER\n         USING DMYM102A,R6\n         MVC   M102AJBN,JMRJOB     MOVE THE JOBNAME IN\n         MVC   M102AJNM,SMF30JNM   MOVE IN JOB NUMBER\n         L     R1,PSAAOLD          GET ADDRESS OF CURRENT ASCB\n         USING ASCB,R1\n         L     R1,ASCBJBNI        GET ADDRESS OF JOBNAME FIELD\n         DROP  R1\n         CLI   CHPROCSN(R1),C' '   IS PROC STEP NAME BLANK?\n         BNH   NOPROC              YES, DO NOT MOVE IT IN\n         MVC   M102APRC,CHPROCSN(R1) MOVE IN PROC STEP NAME\nNOPROC   CLI   CHSTEP(R1),C' '     IS STEP NAME BLANK?\n         BNH   NOSTEPNM            YES, DO NOT MOVE IT IN\n         MVC   M102ASTP,CHSTEP(R1) MOVE IN STEP NAME\nNOSTEPNM LH    R1,SMF30STN         GET STEP NUMBER\n         LA    R2,M102ASNN\n         BAL   R14,PCOUNT\n         MVI   0(R2),C')'\n         MVC   M102APRG,SMF30PGM   MOVE IN PROGRAM NAME\n         L     R1,SMF30SIT         GET INIT START TIME\n         SR    R0,R0               CLEAR R0\n         L     R3,ZERODATE         CLEAR R2\n         L     R2,ZERODATE         CLEAR R3\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         MVC   M102ATM1,TIMEFLD+2\n         L     R0,SMF30STD         DATE OF STEP INITIATION\n         BAL   R14,DATECONV        GO CONVERT DATE\n         MVC   M102AGD1,MODDYY     MOVE IN CONVERTED DATE\n         MVC   M102ADAY,DAY        MOVE IN DAY-OF-WEEK\n         MVC   M102AJDT,JULIAN     MIVE IN JULIAN DATE\n         LA    R0,X'0'             110 PUT TO JESMSG & JOBLOG\n         BAL   R14,MSGRTN\n         MVC   M102AIDN,=C'SYS003I ' STEP TERM MSG\n         MVC   M102AIDM,=C'END    '  CONSTANT TEXT\n         MVC   M102ASRC,=C'RC '      INFORMATION\n         MVC   M102ARC,=C'XNNNN'    TO OVERLAY 102\n         L     R1,CURRTIME           GET STEP TERM TIME\n         SR    R0,R0               CLEAR R0\n         L     R3,ZERODATE         CLEAR R2\n         L     R2,ZERODATE         CLEAR R3\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         MVC   M102ATM1,TIMEFLD+2\n         L     R0,CURRDATE STEP TERM DATE\n         BAL   R14,DATECONV        GO CONVERT DATE\n         MVC   M102AGD1,MODDYY     MOVE IN CONVERTED DATE\n         MVC   M102ADAY,DAY        MOVE IN DAY-OF-WEEK\n         MVC   M102AJDT,JULIAN     MIVE IN JULIAN DATE\n         DROP  R4\n         EJECT\n*                                                               MSEIPO4\n* GET INFORMATION FROM COMPLETION SEGMENT                       MSEIPO4\n*                                                               MSEIPO4\n         CLC   SMF30TON,=H'1'      IS THERE A COMPLETION SECTION?\n         BL    SECT01              NO\n         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4\n         A     R4,SMF30TOF         POINT TO SS SEGMENT          MSEIPO4\n         USING SMF30CMP,R4                                      MSEIPO4\n         SR    R0,R0               CLEAR RELATIVE RETURN CODE\n         TM    SMF30STI,SMF30FLH   WAS THE STEP FLUSHED\n         BO    COMPARRC            YEP, RELATIVE VALUE IS ZERO\n         LH    R0,SMF30SCC         GET THE RETURN CODE\n         TM    SMF30STI,SMF30ABD   AND ABEND?\n         BNO   COMPARRC            NOPE, RELATIVE VALUE IS RC\n         N     R0,=A(X'FFF')       ZERO UNUSED PORTION\n         A     R0,=F'100000'       USER ABEND VALUE 100000-199999\n         TM    SMF30SCC,SMF30SAB   SYSTEM ABEND?\n         BO    COMPARRC            NOPE, USER ABEND\n         A     R0,=F'100000'       SYSTEM ABEND VALUE 200000-299999\nCOMPARRC C     R0,WJCTHIRC         IS THIS A HIGHER RETURN CODE?\n         BNH   CNVTRC              THIS STEP IS NOT HIGHER\n         ST    R0,WJCTHIRC         YEP, SAVE RELATIVE RETURN CODE\n         MVC   WJCTHSTI,SMF30STI   AND STEP INDICATOR\n         MVC   WJCTHSCC,SMF30SCC   AND STEP CONDITION CODE\nCNVTRC   LH    R0,SMF30SCC         GET THE STEP CONDITION CODE\n         LA    R1,SMF30STI         POINT TO THE STEP INDICATOR\n         BAL   R14,PRETCDE         CALL RETURN CODE ROUTINE\n         MVC   M102ASRC,=C'RC '\n         MVC   M102ARC,RC\n         CLI   RC,C'F'             WAS THE STEP FLUSHED\n         BNE   NOFLUSH             NOPE\n         LH    R1,WJCTNOFS         YEP, ADD ONE\n         LA    R1,1(R1)\n         STH   R1,WJCTNOFS\n         B     SECT01\nNOFLUSH  CLI   RC,C'*'\n         BNE   NOSYSAB\n         LH    R1,WJCTNOSA\n         LA    R1,1(R1)\n         STH   R1,WJCTNOSA\n         B     SECT01\nNOSYSAB  CLI   RC,C'U'\n         BNE   NOUSRAB\n         LH    R1,WJCTNOUA\n         LA    R1,1(R1)\n         STH   R1,WJCTNOUA\n         B     SECT01\nNOUSRAB  LH    R1,WJCTNORN\n         LA    R1,1(R1)\n         STH   R1,WJCTNORN\n         DROP  R4                                               MSEIPO4\nSECT01   LA    R0,X'1'             111 PUT TO JESMSG,JOBLOG+SYSLOG\n         BAL   R14,MSGRTN\n         MVC   WTO1TXT,MSG103A     MOVE THE MSG OVLY TO MSG BUFFER\n         USING DMYM103A,R6\n         EJECT\n*                                                               MSEIPO4\n* GET INFORMATION FROM ID SEGMENT                               MSEIPO4\n*                                                               MSEIPO4\n         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4\n         A     R4,SMF30IOF         POINT TO ID SEGMENT          MSEIPO4\n         USING SMF30ID,R4                                       MSEIPO4\n         L     R1,CURRTIME GET STEP TERM TIME\n         L     R0,SMF30SIT         GET STEP INIT TIME\n         L     R3,CURRDATE GET STEP TERM DATE\n         L     R2,SMF30STD         GET STEP INIT DATE\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         MVC   M103ATM5,TIMEFLD\n         L     R1,SMF30PPS         GET PGM  START TIME\n         LTR   R1,R1               IF STEP FLUSH, THIS IS ZERO\n         BNZ   PGMSTART            STEP NOT FLUSHED\n         MVC   M103ATM4,=C'0000:00:00' NO DEVICE WAIT FOR FLUSHED STEP\n         B     GTSTEPRC\nPGMSTART L     R0,SMF30AST         GET ALLOC START DATE\n         L     R3,ZERODATE         GET A ZERO DATE\n         L     R2,ZERODATE         GET A ZERO DATE\n         CR    R1,R0\n         BNL   CALLCLK2\n         L     R3,DATE1            GET DATE OF 1\nCALLCLK2 BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         MVC   M103ATM4,TIMEFLD\n         DROP  R4                                               MSEIPO4\n         EJECT\n*                                                               MSEIPO4\n* GET INFORMATION FROM CPU ACCOUNTING SECTION\n*                                                               MSEIPO4\nGTSTEPRC CLC   SMF30CON,=H'1'      IS THERE A CPU ACCOUNTING SECTION?\n         BL    SECT02              NO\n         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4\n         A     R4,SMF30COF         POINT TO ID SEGMENT          MSEIPO4\n         USING SMF30CAS,R4                                      MSEIPO4\n         L     R1,SMF30CPT         GET TCB TIME\n         SR    R0,R0               CLEAR R0\n         L     R3,ZERODATE         GET A ZERO DATE\n         L     R2,ZERODATE         GET A ZERO DATE\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         CLI   TIMEFLD,X'40'\n         BE    NOOV1\n         MVC   M103ATM1,=C'***:**:**.**'\n         B     OV1\nNOOV1    MVC   M103ATM1,TIMEFLD+1\nOV1      L     R1,SMF30CPS         GET SRB TIME\n         SR    R0,R0               CLEAR R0\n         L     R3,ZERODATE         GET A ZERO DATE\n         L     R2,ZERODATE         GET A ZERO DATE\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         CLI   TIMEFLD,X'40'\n         BE    NOOV2\n         MVC   M103ATM2,=C'***:**:**.**'\n         B     OV2\nNOOV2    MVC   M103ATM2,TIMEFLD+1\nOV2      L     R1,SMF30CPS         GET SRB TIME\n         A     R1,SMF30CPT         ADD TCB TIME\n         SR    R0,R0               CLEAR R0\n         L     R3,ZERODATE         GET A ZERO DATE\n         L     R2,ZERODATE         GET A ZERO DATE\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         MVC   M103ATM3,TIMEFLD\nSECT02   LA    R0,X'0'             100 PUT TO JESMSG\n         BAL   R14,MSGRTN\n         DROP  R4                                               MSEIPO4\n         EJECT\n*                                                               MSEIPO4\n* GET INFORMATION FROM I/O ACTIVITY SEGMENT                     MSEIPO4\n*                                                               MSEIPO4\n         MVC   WTO1TXT,MSG103B     MOVE THE MSG OVLY TO MSG BUFFER\n         USING DMYM103B,R6\n         CLC   SMF30UON,=H'1'      IS THERE A UNIT RECORD SECTION?\n         BL    SECT03              NO\n         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4\n         A     R4,SMF30UOF         POINT TO ID SEGMENT          MSEIPO4\n         USING SMF30URA,R4                                      MSEIPO4\n         L     R1,SMF30TEP         GET TOTAL NUMBER OF EXCPS    MSEIPO4\n         CLI   RC,C'F'             WAS THE STEP FLUSHED?\n         BNE   CNVTEXCP            NO\n         SR    R1,R1               FORCE EXCP COUNT TO ZERO\nCNVTEXCP LA    R2,M103BEXC\n         BAL   R14,PCOUNT          CALL CONVERT ROUTINE\n         L     R1,SMF30INP         GET TOTAL NUMBER OF EXCPS    MSEIPO4\n         LA    R2,M103BSIN\n         BAL   R14,PCOUNT          CALL CONVERT ROUTINE\n         DROP  R4\n         EJECT\n*\n* GET INFORMATION FROM OPERATOR SEGMENT\n*\nSECT03   CLC   SMF30OON,=H'1'      IS THERE AN OPERATOR SECTION?\n         BL    SECT04              NO\n         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4\n         A     R4,SMF30OOF         POINT TO ID SEGMENT          MSEIPO4\n         USING SMF30OPS,R4                                      MSEIPO4\n         L     R1,SMF30PTM         GET NON-SPEC TAPE\n         A     R1,SMF30TPR         ADD SPEC TAPE\n         LA    R2,M103BTPM\n         BAL   R14,PCOUNT\n         DROP  R4\n         EJECT\n*\n* GET INFORMATION FROM PERFORMANCE SEGMENT\n*\nSECT04   CLC   SMF30RON,=H'1'      IS THERE AN PERFORMANCE SECTION?\n         BL    SECT05              NO\n         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4\n         A     R4,SMF30ROF         POINT TO PERFORMANCE         MSEIPO4\n         USING SMF30SAP,R4                                      MSEIPO4\n         L     R1,SMF30NSW         SWAP SEQ\n         LA    R2,M103BSWP\n         BAL   R14,PCOUNT\n         LH    R1,SMF30RGN         REGION REQUESTED\n         LA    R2,M103BTRG\n         BAL   R14,PCOUNT\n         MVI   0(R2),CK\n         LH    R1,SMF30PRV         REGION USED\n         AH    R1,SMF30SYS\n         LA    R2,M103BURG\n         BAL   R14,PCOUNT\n         MVI   0(R2),CK\nSECT05   LA    R0,X'0'             100 PUT TO JESMSG\n         BAL   R14,MSGRTN\n         DROP  R4\n         NOP   EXIT\n         EJECT\n*\n*        DISPLAY EXCPS BY DDNAME ...\n*\n         LH    R3,SMF30EON         NUMBER OF EXCP SECTIONS THIS REC\n         LTR   R3,R3               IS THERE AN EXCP SECTION\n         BZ    EXIT                NOPE-EXIT\n         LR    R4,R9               GET THE RECORD BASE\n         A     R4,SMF30EOF         ADD THE OFFSET\n         USING SMF30EXP,R4\nFIRSTDDN MVI   WTO1TXT,C' '        CLEAR THE OUTPUT LINE\n         MVC   WTO1TXT+1(L'WTO1TXT-1),WTO1TXT\n         MVC   WTO1TXT(7),=C'SYS103I' MOVE IN THE MESSAGE NUMBER\n         LA    R5,3                THREE DDNAME / LINE\n         LA    R6,WTO1TXT+KC       POINT TO FIRST DDNAME FIELD\n         USING DMYM103C,R6\nNEXTDDN  DS    0H\n         MVC   M103CDDN,SMF30DDN   MOVE IN THE DDNAME\n         CLC   =XL2'7C00',M103CDDN IS THIS A STEPCAT CONCAT DD?\n         BNE   LASTSAME            NO, GO COMPARE WITH LAST DD\n         MVC   M103CDDN,=CL8'STEPCAT' MOVE IN STEPCAT\nLASTSAME CLC   WJCTDDNM,M103CDDN   IS IT THE SAME AS LAST\n         BNE   NEWDDNAM            NOPE\n         L     R1,WJCTDDNO         GET THE CONCAT DD NUMBER\n         A     R1,=F'1'            ADD ONE\n         ST    R1,WJCTDDNO         SAVE IT\n         LA    R2,M103CNNN\n         BAL   R14,PCOUNT          CONVERT TO PRINTABLE NUMBER\n         MVI   M103CNNN-1,C'+'     MOVE IN PLUS\n         B     DEVT                GO DO DEVICE TYPE\nNEWDDNAM XC    WJCTDDNO,WJCTDDNO   CLEAR THE CONCAT DD NUMBER\n         MVC   WJCTDDNM,M103CDDN    SAVE THE DDNAME\nDEVT     CLC   SMF30CUA,=X'0FFF'   IS THIS A VIO UCB\n         BNE   TSTJES2             NOPE\n         MVC   M103CCUA,=C'FFF'    MOVE IN PHONEY UCB\n         LA    R1,=C'  VIO '       POINT TO VIO LITERAL\n         B     GOTDEVT             GO PLACE IT\nTSTJES2  CLC   SMF30CUA,=H'0'      IS THIS A JES2 UCB\n         BNE   IDEVTSRC            NOPE\n         MVC   M103CCUA,=C'SPL'    MOVE IN SPL (SPOOL)\n         LA    R1,=C'  JES2'       POINT TO JES2 LITERAL\n         B     GOTDEVT             GO PLACE IT\nIDEVTSRC MVC   RWORK(2),SMF30CUA   MOVE OVER THE BINARY CUA\n         UNPK  RWORK+K3(K5),RWORK(K3) UNPACK IT\n         TR    RWORK+K4(K3),TRTAB-C0  TRANSLATE TO PRINTABLE CHAR\n         MVC   M103CCUA,RWORK+K4   MOVE TO MSG FIELD\n         LA    R1,DEVTABLE         GET THE ADDRESS OF THE DEVICE TBL\nGETDEVT  CLC   0(2,R1),SMF30DEV    IS IT THIS DEVICE?\n         BE    GOTDEVT             YES\n         CLI   1(R1),X'00'         IS THIS A CLASS ENTRY?\n         BNE   CHKDVEND            NOPE\n         CLC   0(1,R1),SMF30DEV    ARE THE CLASSES THE SAME?\n         BE    GOTDEVT             YEP\nCHKDVEND CLC   0(2,R1),=H'-1'      IS IT THE END OF THE TABLE?\n         BE    GOTDEVT             YES\n         LA    R1,6(R1)            INCREMENT TO NEXT ENTRY\n         B     GETDEVT             TRY, TRY, AGAIN\nGOTDEVT  MVC   M103CDEV,2(R1)      MOVE IN THE DEVICE TYPE\n         L     R1,SMF30BLK         GET EXCP COUNTS\n         LA    R2,M103CEXC\n         BAL   R14,PCOUNT          CONVERT IT\n         LH    R0,SMF30ELN         GET LENGTH OF AN EXCP SECTION\n         AR    R4,R0               POINT TO NEXT DDN ENTRY IN REC\n         LA    R6,M103CLEN(R6)     POINT TO NEXT DDN ENTRY IN OUTPUT\n         BCT   R3,MOREDDNS         ANY MORE DDNAME IN REC?\n         XC    WJCTXDDS,WJCTXDDS   NO, CLEAR THE EXTRA DDNAME FIELD\n         CLC   SMF30EOR,=H'0'      ANY MORE IN FOLLOWING RECS?\n         BE    LASTPUT             NO, GO DEAL WITH THAT\n         BCT   R5,SAVEDDNS         YES, ANY ROOM ON THIS LINE\nLASTPUT  LA    R0,0                NOPE, PUT ONLY IEFYS OUTPUT\n         BAL   R14,MSGRTN          PUT IT\n         B     EXIT                GO SEE IF THERE IS ANOTHER REC\nSAVEDDNS L     R0,XDDSGMPM         GET PARMS FOR DDNAME FIELD\n         GETMAIN R,LV=(0)          GETMAIN THE AREA\n         ST    R1,WJCTXDDS         SAVE IT IN WJCT\n         ST    R5,WJCTOLNN         SAVE THE POSITION IN THE OUTPUT LINE\n         LA    R0,WTO1TXT          GET THE ADDRESS OF THE MSG LINE\n         SR    R6,R0               GET THE OFFSET INTO THE MESSAGE\n         ST    R6,WJCTOLOF         SAVE THE OFFSET INTO THE LINE\n         MVC   0(L'WTO1TXT,R1),WTO1TXT MOVE IN THE PARTIAL LINE\n         B     EXIT                EXIT\nMOREDDNS BCT   R5,NEXTDDN          ROOM FOR MORE IN OUTPUT LINE\n         LA    R0,0                NOPE - PUT ONLY IEFYS OUTPUT\n         BAL   R14,MSGRTN          PUT IT\n         B     FIRSTDDN            GO SET UP OUTPUT LINE\nT30DDEXT DS    0H                  REENTRY FOR A EXCP ONLY RECORD\n         LH    R3,SMF30EON         NUMBER OF EXCP SECTIONS THIS REC\n         LR    R4,R9               GET THE RECORD BASE\n         A     R4,SMF30EOF         ADD THE OFFSET\n         L     R1,WJCTXDDS         GET ADDRESS OF EXTRA DDS MSG\n         LTR   R1,R1               IS THERE ONE?\n         BZ    FIRSTDDN            NOPE\n         MVC   WTO1TXT,0(R1)       MOVE IN THE MESSAGE\n         L     R0,XDDSGMPM         GET FREEMAIN PARMS\n         FREEMAIN R,A=(1),LV=(0)     FREE THE XDDS AREA\n         XC    WJCTXDDS,WJCTXDDS   CLEAR THE XDDS POINTER\n         L     R5,WJCTOLNN         DDNAME / LINE REMAINING\n         LA    R6,WTO1TXT          POINT TO MESSAGE\n         A     R6,WJCTOLOF         ADD OFFSET TO NEXT FIELD\n         B     NEXTDDN             GO DO IT\n         EJECT\n*                                                               MSEIPO4\n*        HANDLE JOB TERMINATION CONDITIONS                      MSEIPO4\n*                                                               MSEIPO4\nJOBTERM  DS    0H                  ENTRY ON JOB TERMINATION\n         LTR   R8,R8               DO WE HAVE A WJCT?\n         BZ    EXIT                NOPE, DONE WITH SUBTYPE 5 PROCESSING\n*                                  POTENTIAL GOOD WJCT\n         MVC   ESTAECOD(4),=CL4'WJCT' SAVE ESTAE REFERENCE MATERIAL\n         ST    R8,ESTAEWRK            AND THE JMRUCOM WJCT POINTER\n         CLC   =CL8'WSRCCJCT',0(R8)   GOOD WJCT?\n         BE    JOBCKION            YEP, WE ARE POINTING TO A REAL WJCT\n*                                  JMRUCOM HAS BAD WJCT POINTER\n*                                  WARN THE OPERATOR AND EXIT\n         MVC   WTO1TXT,MSG093A     MOVE THE MSG OVLY TO MSG BUFFER\n         USING DMYM093A,R6\n         ST    R8,RWORK            BAD WJCT POINTER\n         UNPK  DWORD(K8),RWORK(K4) ADD ZONES TO FIELD\n         OI    DWORD+7,X'F0'       OR THE LAST ZONE\n         TR    DWORD(K8),TRTAB-C0  TRANSLATE TO CHARACTERS\n         MVC   M093AWJC(K8),DWORD  MOVE TO OUTPUT LINE\n         L     R0,=F'-1'           ERROR MESSAGE\n         BAL   R14,MSGRTN\n         B     EXIT                DISCONTINUE EXECUTION\n*\nJOBCKION CLC   SMF30ION,=H'0'      IS THERE AN ID SECTION\n         BH    JOBCKTON            YEP\n*                                  NOPE, TELL THE OPERATOR\n         MVC   WTO1TXT,MSG092A     MOVE THE MSG OVLY TO MSG BUFFER\n         L     R0,=F'-1'           ERROR MESSAGE\n         BAL   R14,MSGRTN\n         B     EXIT                DISCONTINUE EXECUTION\n*\nJOBCKTON LR    R4,R9               PRIME R4 WITH SMF REC BASE\n         A     R4,SMF30IOF         GET ADDRESS OF ID SECTION\n         USING SMF30ID,R4\n         CLC   SMF30JNM,SMF30JBN   IS THIS A SUBSYSTEM\n         BE    EXIT                YES\n         DROP  R4\n         CLC   SMF30TON,=H'0'      IS THERE A COMPLETION SECTION?\n         BH    JOBTERM1            NO\n*                                  NOPE, TELL THE OPERATOR\n         MVC   WTO1TXT,MSG090A     MOVE THE MSG OVLY TO MSG BUFFER\n         L     R0,=F'-1'           ERROR MESSAGE\n         BAL   R14,MSGRTN\n         B     EXIT                DISCONTINUE EXECUTION\n         EJECT\n*\n* FIX THE COMPLETION CODE TO HIGHEST CODE FOUND\n*\nJOBTERM1 LR    R4,R9               GET RECORD ADDRESS           MSEIPO4\n         A     R4,SMF30TOF         POINT TO SS SEGMENT          MSEIPO4\n         USING SMF30CMP,R4                                      MSEIPO4\n         MVC   SMF30SCC,WJCTHSCC   PUT IN HIGHEST RETURN CODE\n         MVC   SMF30STI,WJCTHSTI   AND INDICATOR\n         DROP  R4\n         LR    R4,R9               PRIME R4 WITH SMF REC BASE\n         A     R4,SMF30IOF         GET ADDRESS OF ID SECTION\n         USING SMF30ID,R4\n         EJECT\n*\n* HERE WE DISPLAY SYS004I\n*\n         MVC   WTO1TXT,MSG001A     MOVE THE MSG OVLY TO MSG BUFFER\n         USING DMYM001A,R6\n         MVC   M001AIDN,=C'SYS004I '\n         MVC   M001AIDM,=C'OFF '\n         MVI   M001ARCF,C' '\n         MVC   M001ARCF+1(L'M001ARCF-1),M001ARCF\n         MVC   M001ASRC,=C'HIGH RC'\n         MVC   M001AJBN,JMRJOB     MOVE THE JOBNAME IN\n         MVC   M001AJNM,SMF30JNM   MOVE IN JOB NUMBER\n         MVC   M001AUSR,SMF30USR   PROGRAMMER FILED\n         L     R1,CURRTIME GET JOB TERM TIME\n         SR    R0,R0               CLEAR R0\n         L     R3,ZERODATE         CLEAR R2\n         L     R2,ZERODATE         CLEAR R3\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         MVC   M001ATME,TIMEFLD+2\n         L     R0,CURRDATE DATE OF STEP INITIATION\n         BAL   R14,DATECONV        GO CONVERT DATE\n         MVC   M001AGDT,MODDYY     MOVE IN CONVERTED DATE\n         MVC   M001ADAY,DAY        MOVE IN DAY-OF-WEEK\n         MVC   M001AJDT,JULIAN     MIVE IN JULIAN DATE\n         LH    R0,WJCTHSCC         GET COND CODE\n         LA    R1,WJCTHSTI         AND INDICATOR\n         BAL   R14,PRETCDE         CALL RETURN CODE ROUTINE\n         MVC   M001AHCC,RC\n         LA    R0,X'1'             011 PUT TO JOBLOG, SYSLOG\n         BAL   R14,MSGRTN\n         MVC   WTO1TXT,MSG104A     MOVE THE MSG OVLY TO MSG BUFFER\n         USING DMYM104A,R6\n         LH    R1,SMF30STN         GET STEP NUMBER\n         LA    R2,M104ATST\n         BAL   R14,PCOUNT\n         LH    R1,WJCTNORN         GET STEP NUMBER\n         LA    R2,M104ASRN\n         BAL   R14,PCOUNT\n         LH    R1,WJCTNOFS         GET FLUSHED STEP NUMBER\n         LA    R2,M104ASFL\n         BAL   R14,PCOUNT\n         LH    R1,WJCTNOUA\n         LA    R2,M104ASUA\n         BAL   R14,PCOUNT\n         LH    R1,WJCTNOSA\n         LA    R2,M104ASSA\n         BAL   R14,PCOUNT\n         SR    R0,R0               000 PUT TO JOBLOG\n         BAL   R14,MSGRTN\n         MVC   WTO1TXT,MSG103A     MOVE THE MSG OVLY TO MSG BUFFER\n         USING DMYM103A,R6\n         MVC   M103AIDN,=C'SYS104I '\n         L     R1,CURRTIME GET STEP TERM TIME\n         L     R0,SMF30SIT         GET STEP INIT TIME\n         L     R3,CURRDATE GET STEP TERM DATE\n         L     R2,SMF30STD         GET STEP INIT DATE\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         MVC   M103ATM5,TIMEFLD\n         MVC   M103ATM4-10(20),=CL20' '\n         DROP  R4                                               MSEIPO4\n         EJECT\n*                                                               MSEIPO4\n* GET INFORMATION FROM CPU ACCOUNTING SECTION\n*                                                               MSEIPO4\n         CLC   SMF30CON,=H'1'      IS THERE A CPU ACCOUNTING SECTION?\n         BL    SECT07              NO\n         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4\n         A     R4,SMF30COF         POINT TO ID SEGMENT          MSEIPO4\n         USING SMF30CAS,R4                                      MSEIPO4\n         L     R1,SMF30CPT         GET TCB TIME\n         SR    R0,R0               CLEAR R0\n         L     R3,ZERODATE         GET A ZERO DATE\n         L     R2,ZERODATE         GET A ZERO DATE\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         CLI   TIMEFLD,X'40'\n         BE    NOOV3\n         MVC   M103ATM1,=C'***:**:**.**'\n         B     OV3\nNOOV3    MVC   M103ATM1,TIMEFLD+1\nOV3      L     R1,SMF30CPS         GET SRB TIME\n         SR    R0,R0               CLEAR R0\n         L     R3,ZERODATE         GET A ZERO DATE\n         L     R2,ZERODATE         GET A ZERO DATE\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         CLI   TIMEFLD,X'40'\n         BE    NOOV4\n         MVC   M103ATM2,=C'***:**:**.**'\n         B     OV4\nNOOV4    MVC   M103ATM2,TIMEFLD+1\nOV4      L     R1,SMF30CPS         GET SRB TIME\n         A     R1,SMF30CPT         ADD TCB TIME\n         SR    R0,R0               CLEAR R0\n         L     R3,ZERODATE         GET A ZERO DATE\n         L     R2,ZERODATE         GET A ZERO DATE\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         MVC   M103ATM3,TIMEFLD\nSECT07   LA    R0,X'0'             100 PUT TO JESMSG\n         BAL   R14,MSGRTN\n         DROP  R4                                               MSEIPO4\n         EJECT\n*                                                               MSEIPO4\n* GET INFORMATION FROM I/O ACTIVITY SEGMENT                     MSEIPO4\n*                                                               MSEIPO4\n         MVC   WTO1TXT,MSG103B     MOVE THE MSG OVLY TO MSG BUFFER\n         USING DMYM103B,R6\n         MVC   M103BIDN,=C'SYS104I '\n         CLC   SMF30UON,=H'1'      IS THERE A UNIT RECORD SECTION?\n         BL    SECT08              NO\n         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4\n         A     R4,SMF30UOF         POINT TO ID SEGMENT          MSEIPO4\n         USING SMF30URA,R4                                      MSEIPO4\n         L     R1,SMF30TEP         GET TOTAL NUMBER OF EXCPS    MSEIPO4\n         LA    R2,M103BEXC\n         BAL   R14,PCOUNT          CALL CONVERT ROUTINE\n         L     R1,SMF30INP         GET TOTAL NUMBER OF EXCPS    MSEIPO4\n         LA    R2,M103BSIN\n         BAL   R14,PCOUNT          CALL CONVERT ROUTINE\n         DROP  R4\n         EJECT\n*\n* GET INFORMATION FROM OPERATOR SEGMENT\n*\nSECT08   CLC   SMF30OON,=H'1'      IS THERE AN OPERATOR SECTION?\n         BL    SECT09              NO\n         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4\n         A     R4,SMF30OOF         POINT TO ID SEGMENT          MSEIPO4\n         USING SMF30OPS,R4                                      MSEIPO4\n         L     R1,SMF30PTM         GET NON-SPEC TAPE\n         A     R1,SMF30TPR         ADD SPEC TAPE\n         LA    R2,M103BTPM\n         BAL   R14,PCOUNT\n         DROP  R4\n         EJECT\n*\n* GET INFORMATION FROM PERFORMANCE SEGMENT\n*\nSECT09   CLC   SMF30RON,=H'1'      IS THERE AN PERFORMANCE SECTION?\n         BL    SECT10              NO\n         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4\n         A     R4,SMF30ROF         POINT TO PERFORMANCE         MSEIPO4\n         USING SMF30SAP,R4                                      MSEIPO4\n         L     R1,SMF30NSW         SWAP SEQ\n         LA    R2,M103BSWP\n         BAL   R14,PCOUNT\n         LH    R1,SMF30RGN         REGION REQUESTED\n         LA    R2,M103BTRG\n         BAL   R14,PCOUNT\n         MVI   0(R2),CK\n         LH    R1,SMF30PRV         REGION USED\n         AH    R1,SMF30SYS\n         LA    R2,M103BURG\n         BAL   R14,PCOUNT\n         MVI   0(R2),CK\nSECT10   LA    R0,X'0'             100 PUT TO JESMSG\n         BAL   R14,MSGRTN\n         EJECT\n*\n* CLEAN UP FROM ACTRT PROCESSING\n*\n         L     R0,WJCTGMPM         LOAD FREEMAIN PARM\n         LTR   R8,R8               IS IT VALID\n         BZ    BADWJCT\n         LR    R1,R8\n         FREEMAIN R,LV=(0),A=(1)   FREE DATA DSECT STORAGE\n         XC    JMRUCOM(4),JMRUCOM  CLEAR THE POINT TO IT IN JMR\n         DROP  R4\nBADWJCT  DS    0H\nEXIT     DS    0H                  EXIT PROLOGUE\n         ESTAE 0                   CANCEL ESTAE EXIT\nFINI     FINISH RC=0               RETURN TO CALLER\n         EJECT\n*\n* WRITE MESSAGE TO WTO\n*\nMSGRTN   DS    0H                  MESSAGE(WTO) ROUTINE\n         STM   R14,R1,SAVEAR2      SAVE A FEW REGISTERS\n         ST    R12,R12FORMS        SAVE R12\n         L     R1,R12FORYS         GET THE R12 ON ENTRY TO IEFACTRT\n         LA    R0,WTO1TXT          ADDRESS OF MESSAGE\n         ST    R0,36(R1)           SAVE INTO 'SYSTEM' AREA\n         MVC   42(2,R1),=AL2(114) LENGTH SAVE INTO 'SYSTEM' AREA\n         L     R15,=V(IEFYS)       ENTRY TO IEFYS\n         LR    R12,R1              R12 PRIMED FOR YS\n         BALR  R14,R15             GO TO IEFYS\n         L     R12,R12FORMS        RESTORE R12\n         L     R0,SAVEAR2+8        RESTORE R0\n         LTR   R0,R0               WAS IT ZERO\n         BZ    MSGRTNEX            YES, DON'T DO WTO\n         LA    R1,L'WTO1TXT+K4     GET LENGTH FOR WTO\n         STH   R1,WTO1LEN          STORE IN WTO PARM LIST\n         C     R0,=F'-1'           ERROR MESSAGE?\n         BNE   NORMWTO             NOPE\n         MVC   WTO1MCS,ERMCSFLG    MOVE IN MCSFLAG\n         MVC   WTO1DESC,ERDESC     MOVE IN DESCRIPTOR CODES\n         MVC   WTO1ROUT,ERROUT     MOVE IN ROUTE CODES\n         B     DOWTO               DO THE WTO\nNORMWTO  MVC   WTO1MCS,MCSFLAG     MOVE IN MCSFLAG\n         MVC   WTO1DESC,DESC       MOVE IN DESCRIPTOR CODES\n         MVC   WTO1ROUT,ROUT       MOVE IN ROUTE CODES\nDOWTO    WTO   MF=(E,WTO1)         ISSUE WTO\nMSGRTNEX LM    R14,R1,SAVEAR2      RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DATE  CONVERSION ROUTINE: CONVERTS A PACKED DATE TO DAY OF WEEK,   *\n*        UNPACKED JULIAN, AND MO/DA/YR  FORMATS                       *\n*        INPUT   REG 1 HAS DATE  TO BE CONVERTED                      *\n*        OUTPUT  DAY   THREE CHARACTER DAY OF WEEK                    *\n*                JULIAN THREE  CHARACTER JULIAN DAY                   *\n*                MMDDYY EIGHT  CHARACTER DATE                         *\n*                                                                     *\n***********************************************************************\nDATECONV SAVE  (14,12)             SAVE CALLER'S REGISTERS\n         MVC   MODDYY,DATEMASK MOVE IN SLASHES\n         STCM  R0,B'0011',WORKDDD1 SAVE DATE\n         STCM  R0,B'0011',WORKDDD0 SAVE DATE\n         UNPK  JULIAN,WORKDDD1 UNPACK JULIAN DATE\n         OI    JULIAN+2,X'F0'  FIX SIGN\n         SRL   R0,12           SHIFT YEAR ZERO\n         O     R0,=F'15'       FIX SIGN\n         STCM  R0,B'0011',WORKYY1 STORE PACKED YEAR\n         UNPK  YY,WORKYY1      UNPACK YEAR\n         OI    YY+1,X'F0'      FIX SIGN\n         LA    R1,MONTABLE     POINT TO 'NORMAL' MONTH TABLE\n         TM    WORKYY1+1,B'00110000' IS THIS LEAP YEAR?\n         BNZ   MONTHTST        NOPE\n         LA    R1,LEPTABLE     POINT TO 'LEAP YEAR' MONTH TABLE\nMONTHTST CP    WORKDDD1,0(2,1) CAN WE SUBTRACT THIS MONTH\n         BNH   GOTMONTH        NOPE THIS IS THE MONTH\n         SP    WORKDDD1,0(2,1) SUBTRACT THE DAYS\n         LA    R1,4(R1)        POINT TO NEXT MONTH\n         B     MONTHTST        GO TEST AGAIN\nGOTMONTH MVC   MO,2(R1)        MOVE IN THE MONTH NUMBER\n         UNPK  DD,WORKDDD1     UNPACK DAY\n         OI    DD+1,X'F0'      FIX SIGN\n         ZAP   WKYR1,WORKYY1   GET THE YEAR\n         AP    WKYR1,=P'1900'  ADD 1900\n         ZAP   WKYR2,WKYR1     INITIALIZE WKYR2\n         SP    WKYR2,=P'1'     TO WKYR1-1\n         ZAP   WKYR3,WKYR2     PREPARE TO DIVIDE\n         DP    WKYR3,=P'4'     (Y-1)/4\n         ZAP   WKTOT,WKYR3(4)  SAVE DIVIDEND\n         ZAP   WKYR3,WKYR2     PREPARE TO DIVIDE\n         DP    WKYR3,=P'100'   (Y-1)/100\n         SP    WKTOT,WKYR3(3)  (Y-1)/4 - (Y-1)/100\n         ZAP   WKYR3,WKYR2     PREPARE TO DIVIDE\n         DP    WKYR3,=P'400'   (Y-1)/400\n         AP    WKTOT,WKYR3(3)  (Y-1)/4 - (Y-1)/100 + (Y-1)/400\n         AP    WKTOT,WKYR1     (Y-1)/4 - (Y-1)/100 + (Y-1)/400 + Y\n         AP    WKTOT,WORKDDD0  (Y-1)/4 - (Y-1)/100 + (Y-1)/400 + Y + D\n         DP    WKTOT,=P'7'     DIVIDE BY 7\n         ZAP   DWORD,WKTOT+4(1) PREPARE FOR CONVERT\n         CVB   R0,DWORD        CONVERT TO BINARY\n         SLL   R0,2            MULTIPLY BY FOUR\n         LA    R1,DAYTABLE     POINT TO DAYTABLE\n         AR    R1,R0           ADD OFFSET\n         MVC   DAY,0(R1)       MOVE IN DAY\nDTECVTEX RETURN (14,12)            RETURN TO CALLER\nDAYTABLE DC    C'SAT SUN MON TUE WED THU FRI'\nMONTABLE DC    PL2'31',CL2'01',PL2'28',CL2'02',PL2'31',CL2'03'\n         DC    PL2'30',CL2'04',PL2'31',CL2'05',PL2'30',CL2'06'\n         DC    PL2'31',CL2'07',PL2'31',CL2'08',PL2'30',CL2'09'\n         DC    PL2'31',CL2'10',PL2'30',CL2'11',PL2'31',CL2'12'\nLEPTABLE DC    PL2'31',CL2'01',PL2'29',CL2'02',PL2'31',CL2'03'\n         DC    PL2'30',CL2'04',PL2'31',CL2'05',PL2'30',CL2'06'\n         DC    PL2'31',CL2'07',PL2'31',CL2'08',PL2'30',CL2'09'\n         DC    PL2'31',CL2'10',PL2'30',CL2'11',PL2'31',CL2'12'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  COUNT CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT      *\n*        INPUT   REG 1 HAS COUNT TO BE CONVERTED                      *\n*        OUTPUT  DWORD COUNTAINS CHARACTER OUTPUT FIELD               *\n*                                                                     *\n***********************************************************************\n         DS    0H\nPCOUNT   SAVE  (14,12)             SAVE CALLER'S REGISTERS\n         CVD   R1,DWORD            CONVERT COUNT TO DECIMAL\n         MVC   EDWORK2,EDMASK2     MOVE IN EDIT MASK\n         LA    R1,EDWORK2+L'EDWORK2-1\n         EDMK  EDWORK2,DWORD+K2    CONVERT TO CHARACTER\n         LA    R3,EDWORK2+L'EDWORK2-1\n         SR    R3,R1\n         CP    DWORD,P99999        IS COUNT>99999?\n         BNH   NOFLOAT             NO, BR PAST FLOAT CODE\n         S     R3,=F'2'\n         MVC   0(*-*,R2),0(R1)       SHIFT IT RIGHT 3 DEC DIGTS\n         EX    R3,*-6\n         LA    R2,1(R2,R3)\n         MVI   0(R2),CK            MOVE A 'K' FOR THOUSANDS\n         B     PCNTEX              BR TO RETURN\nNOFLOAT  MVC   0(*-*,R2),0(R1)\n         EX    R3,*-6\nPCNTEX   LA    R2,1(R2,R3)\n         ST    R2,28(R13)\n         RETURN (14,12)            RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*  CLOCK CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT      *\n*        INPUT   REG 1 HAS FIRST TIME                                 *\n*                REG 0 HAS SECOND TIME                                *\n*                REG 3 HAS FIRST DATE                                 *\n*                REG 2 HAS SECOND DATE                                *\n*        OUTPUT  TIMEFLD COUNTAINS CHARACTER OUTPUT FIELD             *\n*                                                                     *\n***********************************************************************\nPCLOCK   SAVE  (14,12)             SAVE CALLER'S REGISTERS\n         MVC   TIMEFLD,TIMEMASK MOVE IN COLONS AND DOT\n         STCM  R3,B'0011',WORKDDD1 SAVE THE ENDING DAYS\n         STCM  R2,B'0011',WORKDDD0 SAVE THE STARTING DAYS\n         SRL   R3,12           MOVE THE YEAR OVER\n         O     R3,=F'15'       OR IN THE PACKED SIGN NIBBLE\n         STCM  R3,B'0011',WORKYY1 SAVE THE ENDING YEAR\n         SRL   R2,12           MOVE THE YEAR OVER\n         O     R2,=F'15'       OR IN THE PACKED SIGN NIBBLE\n         STCM  R2,B'0011',WORKYY0 SAVE THE STARTING YEAR\n         SR    R1,R0           SUBTRACT THE RAW TIME\n         BNM   GTZERO1         THIS IS NOT A NEGATIVE NUMBER\n         A     R1,HR24         CARRY 24 HOURS\n         SP    WORKDDD1,=P'1'  SUBTRACT A DAY FOR THE CARRY\n         BNZ   GTZERO1         WE DID NOT SUBTRACT ONE FROM JAN 1\n         ZAP   WORKDDD1,=P'365' CARRY A YEAR\n         SP    WORKYY1,=P'1'   SUBTRACT A YEAR FOR THE CARRY\n         TM    WORKYY1+1,B'00110000' WAS LAST YEAR A LEAP YEAR?\n         BNZ   GTZERO1         NO IT WASN'T\n         AP    WORKDDD1,=P'1'  ADD ONE (366 DAYS IN A LEAP YEAR)\nGTZERO1  SP    WORKDDD1,WORKDDD0 SUBTRACT DAYS\n         BNM   GTZERO2         WAS NO NEGATIVE\n         AP    WORKDDD1,=P'365' CARRY A YEAR\n         SP    WORKYY1,=P'1'   SUBTRACT A YEAR FOR CARRY\n         TM    WORKYY1+1,B'00110000' WAS LAST YEAR A LEAP YEAR\n         BNZ   GTZERO2         NO\n         AP    WORKDDD1,=P'1'  ADD ONE (366 DAYS IN A LEAP YEAR)\nGTZERO2  SP    WORKYY1,WORKYY0 SUBTRACT THE YEARS\n         BZ    NOLEAPYR        NO YEAR ARITHMATIC\n         BP    YEARS           MAYBE MORE THAN ONE YEAR\n         MVC   TIMEFLD,=C'----:--:--.--' DENOTE A NEGATIVE NUMBER\n         B     PCLKEX          RETURN\nYEARS    CP    WORKYY1,=P'1'   WE CAN ONLY HANDLE ONE YEAR\n         BE    ADD365          ADD A YEAR OF DAYS\n         MVC   TIMEFLD,=C'****:**:**.**' DENOTE A LARGE NUMBER\n         B     PCLKEX          RETURN\nADD365   AP    WORKDDD1,=P'365' CARRY A YEAR\n         TM    WORKYY0+1,B'00110000' WAS THE YEAR A LEAP YEAR?\n         BNZ   NOLEAPYR        NOPE\n         AP    WORKDDD1,=P'1'  ADD A DAY FOR LEAP YEAR\nNOLEAPYR CP    WORKDDD1,=P'415' WE CAN ONLY 415*24+24(9984) HRS\n         BNH   OKAYDAYS        NO OVERFLOW\n         MVC   TIMEFLD,=C'****:**:**.**' DENOTE A LARGE NUMBER\n         B     PCLKEX          RETURN\nOKAYDAYS ZAP   DWORD,WORKDDD1  GET PREPARED TO CVB\n         CVB   R3,DWORD        GET DAYS IN REGISTER\n         M     R2,HR24         MULTIPLY BY 24 HRS\n         AR    R3,R1           ADD TIME FROM SUBTRACT\n         SR    R2,R2           CLEAR FOR DIVIDE\n         D     R2,HR1          DIVIDE BY HRS\n         MVC   PREHHHH(7),=XL7'40202020202021' MOVE IN EDIT FIELD\n         CVD   R3,DWORD        CONVERT HRS TO PACKED\n         MVC   EDWORK2,EDMASK3     MOVE IN EDIT MASK\n         ED    EDWORK2,DWORD+K2    CONVERT TO CHARACTER\n         MVC   HHHH,EDWORK2+8  MOVE TO HRS FIELD\n         LR    R3,R2           MOVE REMAINDER FOR DIVISION\n         SR    R2,R2           CLEAR FOR DIVIDE\n         D     R2,MIN1         DIVIDE BY MINUTES\n         CVD   R3,DWORD        CONVERT MINUTES TO PACKED\n         UNPK  MM,DWORD+6(2)   UNPACK\n         OI    MM+1,X'F0'      FIX THE SIGN\n         LR    R3,R2           MOVE REMAINDER FOR DIVISION\n         SR    R2,R2           CLEAR FOR DIVISION\n         D     R2,SEC1         DIVIDE BY SECONDS\n         CVD   R3,DWORD        CONVERT SECONDS TO PACKED\n         UNPK  SS,DWORD+6(2)   UNPACK\n         OI    SS+1,X'F0'      FIX THE SIGN\n         CVD   R2,DWORD        CONVERT REMAINDER PACKED\n         UNPK  TH,DWORD+6(2)   UNPACK\n         OI    TH+1,X'F0'      FIX THE SIGN\nPCLKEX   RETURN (14,12)            RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*  CONDITION CODE CONVERSION ROUTINE: CHARACTER OUTPUT INTO RC FIELD  *\n*        INPUT   REG 0 HAS            STEP TERM CONDTION CODE         *\n*                REG 1 HAS ADDRESS OF STEP TERM INDICATOR FIELD       *\n*        OUTPUT  FIELD RC OF OUTPUT LINE CONTAINS RETURN CODE         *\n*                                                                     *\n***********************************************************************\nPRETCDE  SAVE  (14,12)             SAVE CALLER'S REGISTERS\n         TM    K0(R1),SMF30FLH     WAS STEP FLUSHED             MSEIPO4\n         BNO   NOTFLUSH            NO,BRANCH PAST\n         MVC   RC,=C'FLUSH'        MOVE IN FLUSHED MESSAGE\n         B     PRETEXT             BR TO RETURN\nNOTFLUSH TM    K0(R1),SMF30ABD     DID IT ABEND?                MSEIPO4\n         BO    STPABEND            YES, GO CONVERT ABEND CODE\n         N     R0,=A(X'FFF')       ZERO UNUSED PORTION\n         CVD   R0,RWORK            GET ADDRESS OF COND FIELD\n         MVC   RC-K1(L'RC+K1),=X'402120202020' MOVE IN EDIT MASK\n         ED    RC-K1(L'RC+K1),RWORK+K5 CONVERT RET CODE TO CHAR\n         B     PRETEXT             BR TO RETURN\nSTPABEND CLM   R0,B'0010',=X'80'   WAS IT A USER ABEND CODE?\n         BL    SYSABND             NO, PROCESS SYSTEM ABEND CODE.\n         N     R0,=A(X'FFF')       TURN OFF X'80' BIT\n         CVD   R0,RWORK            CONVERT FOR OUTPUT\n         MVC   RC-K1(L'RC+K1),=X'402120202020' MOVE IN EDIT MASK\n         ED    RC-K1(L'RC+K1),RWORK+K5 CONVERT TO CHARACTER\n         MVI   RC,C'U'             MOVE IN 'U' USER ABEND\n         B     PRETEXT             BR TO RETURN\nSYSABND  STH   R0,RWORK            STORE ABEND CODE\n         UNPK  RWORK+K3(K5),RWORK(K3) ADD ZONES TO CC FIELD\n         TR    RWORK+K4(K3),TRTAB-C0 TRANSLATE TO CHARACTERS\n         MVC   RC+K2(L'RC-K2),RWORK+K4  MOVE TO OUTPUT LINE\n         MVC   RC(K2),=C'*S'       MOVE IN S FOR SYSTEM ABEND\nPRETEXT  RETURN (14,12)            RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*  ESTAE EXIT ROUTINE                                                 *\n*                                                                     *\n***********************************************************************\nRECOVERY DS    0H\n         USING *,R15               SET UP ADDRESSABILITY\n         LA    R4,K4               PUT 4 IN REGISTER FOR COMPARE\n         CR    R0,R4               IS SDWA PRESENT?\n         BNE   HAVESDWA            YES, BR TO PROCESS WITH SDWA\n         L     R0,K0(R2)           LOAD RETRY ADDRESS FROM PARAM LIST\n         ST    R1,ESTAEPSW-ESTAPARM(R2) SAVE THE ABEND CODE\n         XC    ESTAEPSW-ESTAPARM(4,R2),ESTAEPSW-ESTAPARM(R2) CLR PSW\n         LA    R15,K4              SET RETCODE TO RETRY ADDR IN R0\n         BR    R14                 RETURN TO PROCESSOR WITH RETRY ADDR\nHAVESDWA DS    0H                  ENTER HERE IF SDWA PRESENT\n         ST    R14,12(R13)         SAVE RETURN ADDRESS\n         USING SDWA,R1\n         L     R2,SDWAPARM         LOAD PARAM LIST ADDR FROM SDWA\n         L     R4,SDWAABCC         GET THE ABEND CODE\n         ST    R4,ESTAEABN-ESTAPARM(R2) SAVE  IT\n         L     R4,SDWANXT1         GET NEXT EC INSTRUCTION POINTER\n         ST    R4,ESTAEPSW-ESTAPARM(R2) SAVE IT\n         DROP  R1\n         L     R2,SDWARR-ESTAPARM(R2) LOAD RETRY ADDRESS\n         SETRP RC=4,,RETADDR=(2),RETREGS=YES,FRESDWA=YES,REGS=(14)\n         DROP  R15\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  ESTAE RETRY ROUTINE WHEN NO SDWA WAS PRESENT                       *\n*                                                                     *\n***********************************************************************\nRTRYRTN1 DS    0H                  RETRY ROUTINE WITH NO SDWA PRESENT\n         LM    R12,R13,K8(R1)      LOAD REGS FOR ESTAE PARM LIST\n         B     RTRYRTN2            AND GET OUT\n***********************************************************************\n*                                                                     *\n*  ESTAE RETRY ROUTINE WHEN SDWA WAS PRESENT                          *\n*                                                                     *\n***********************************************************************\nRTRYRTN2 DS    0H\n         LA    R11,CONSTANT\n         LA    R6,WTO1TXT\n         MVC   WTO1TXT,MSG095A     MOVE THE MSG OVLY TO MSG BUFFER\n         USING DMYM095A,R6\n         MVC   RWORK,ESTAECOD\n         UNPK  DWORD(K8),RWORK(K4) ADD ZONES TO FIELD\n         OI    DWORD+7,X'F0'       OR THE LAST ZONE\n         TR    DWORD(K8),TRTAB-C0  TRANSLATE TO CHARACTERS\n         MVC   M095ACOD,DWORD     MOVE TO OUTPUT LINE\n         MVC   RWORK,ESTAEPSW\n         UNPK  DWORD(K8),RWORK(K4) ADD ZONES TO FIELD\n         OI    DWORD+7,X'F0'       OR THE LAST ZONE\n         TR    DWORD(K8),TRTAB-C0  TRANSLATE TO CHARACTERS\n         MVC   M095APSW,DWORD     MOVE TO OUTPUT LINE\n         MVC   RWORK,ESTAEWRK\n         UNPK  DWORD(K8),RWORK(K4) ADD ZONES TO FIELD\n         OI    DWORD+7,X'F0'       OR THE LAST ZONE\n         TR    DWORD(K8),TRTAB-C0  TRANSLATE TO CHARACTERS\n         MVC   M095AWRK,DWORD     MOVE TO OUTPUT LINE\n         MVC   RWORK,ESTAEABN\n         UNPK  DWORD(K8),RWORK(K4) ADD ZONES TO FIELD\n         OI    DWORD+7,X'F0'       OR THE LAST ZONE\n         TR    DWORD(K8),TRTAB-C0  TRANSLATE TO CHARACTERS\n         MVC   M095AABN,DWORD     MOVE TO OUTPUT LINE\n         L     R0,=F'-1'           ERROR MESSAGE\n         BAL   R14,MSGRTN\n         B     FINI\n         EJECT\n***********************************************************************\n*                                                                     *\n*  PATCH AREA                                                         *\n*                                                                     *\n***********************************************************************\nMODLEN   EQU   *-IEFACTRT\nLPATCH1  EQU   (MODLEN+K9)/K5/K8+K1 ADD 5% FOR PATCH AREA\nLPATCHL1 DC    AL2(LPATCH1*K8)\nSPATCH1  DC    S(PATCH1)\nPATCH1   DC    (LPATCH1)D'00'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  PROGRAM CONSTANTS                                                  *\n*                                                                     *\n***********************************************************************\nCONSTANT DS    0D\nWJCTGMPM DC    0F'0',AL1(LSQASUBP),AL3(LWJCT)\nXDDSGMPM DC    0F'0',AL1(LSQASUBP),AL3(114)\nR30CODE  DC    F'20'               CODE FOR NEW RECORD 30       MSEIPO4\nR32CODE  DC    F'24'               CODE FOR NEW RECORD 32       WDA#01\nR30START DC    H'1'                  STEP TERMINATION           MSEIPO4\nR30STEP  DC    H'4'                  STEP TERMINATION           MSEIPO4\nR30JOB   DC    H'5'                  JOB TERMINATION            MSEIPO4\nF6       DC    F'6'\nTOVER    DC    F'10000000'         OVERFLOW CONSTANT\nHR24     DC    A(24*60*60*100)     24 HRS IN .01 SECONDS\nHR1      DC    A(60*60*100)        1 HR IN .01 SECONDS\nMIN1     DC    A(60*100)           1 MIN IN .01 SECONDS\nSEC1     DC    A(100)              1 SEC IN .01 SECONDS\nMCSFLAG  DC    B'1000001000000000' ROUT+HRDCPY\n*                0123456789ABCDEF\nDESC     DC    B'0000000000000000' NO DEC CODES\n*                1234567890123456\nROUT     DC    B'0000000000000100' ROUT CODE=14\n*                1234567890123456\nERMCSFLG DC    B'1000010000000000' ROUT+BROADCAST\n*                0123456789ABCDEF\nERDESC   DC    B'0100000000000000' IMMEDIATE ACTION REQUIRED\n*                1234567890123456\nERROUT   DC    B'1111111111111111' ROUT CODE=ALL\n*                1234567890123456\nP99999   DC    P'99999'\nEDMASK2  DC    XL12'402020202020202020202120'\nEDMASK3  DC    XL12'402020202020202020212020'\nTIMEMASK DC    CL13'HHHH:MM:SS.TH'\nDATEMASK DC    CL8'MO/DD/YY'\n         DS    0F\nZERODATE DC    PL4'0'\nDATE1    DC    PL4'1'\n*\n* DEFINE ESTAE LIST FORM\n*\nESTAEL   ESTAE MF=L               CREATE MODEL ESTAE PARM LIST\nLESTAEL  EQU   *-ESTAEL           NAME ITS LENGTH\n         EJECT\n***********************************************************************\n*                                                                     *\n*  PROGRAM MESSAGES                                                   *\n*                                                                     *\n***********************************************************************\nMSG084A  DS    0C\n         DC    C'SYS084E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'TSO TERMINAL STATION SET: NO IDENTIFICATION SECTION'\n         DC    CL(114-(*-MSG084A))' '\nMSG085A  DS    0C\n         DC    C'SYS085E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'TSO TERMINAL STATION SET: IDENTIFICATION SECTION'\n         DC    C' TOO SHORT'\n         DC    CL(114-(*-MSG085A))' '\nMSG086A  DS    0C\n         DC    C'SYS086E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'TSO TERMINAL STATION SET: ZERO TSB POINTER '\n         DC    CL(114-(*-MSG086A))' '\nMSG087A  DS    0C\n         DC    C'SYS087E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'TSO TERMINAL STATION SET: NO IDENTIFICATION SECTION'\n         DC    CL(114-(*-MSG087A))' '\nMSG088A  DS    0C\n         DC    C'SYS088E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'TSO TERMINAL STATION SET: IDENTIFICATION SECTION'\n         DC    C' TOO SHORT'\n         DC    CL(114-(*-MSG088A))' '\nMSG089A  DS    0C\n         DC    C'SYS089E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'TSO TERMINAL STATION SET: ZERO TSB POINTER '\n         DC    CL(114-(*-MSG089A))' '\nMSG090A  DS    0C\n         DC    C'SYS090E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'JOBTERM: TYPE 30 RECORD WITH NO COMPLETION SECTION'\n         DC    CL(114-(*-MSG090A))' '\nMSG091A  DS    0C\n         DC    C'SYS091E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'TYPE 30 RECORD WITH NO STORAGE SECTION'\n         DC    CL(114-(*-MSG091A))' '\nMSG092A  DS    0C\n         DC    C'SYS092E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'JOBTERM: TYPE 30 RECORD WITH NO IDENTIFICATION '\n         DC    C'SECTION'\n         DC    CL(114-(*-MSG092A))' '\nMSG093A  DS    0C\n         DC    C'SYS093E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'JOBTERM: WJCT INVALID POINTER IN JMRUCOM - '\n         DC    C'12345678'\n         DC    CL(114-(*-MSG093A))' '\nMSG094A  DS    0C\n         DC    C'SYS094E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'TYPE 30 RECORD WITH NO SUBSYSTEM SECTION'\n         DC    CL(114-(*-MSG094A))' '\nMSG095A  DS    0C\n         DC    C'SYS095E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'ESTAED - '\n         DC    C'12345678 '\n         DC    C'12345678 '\n         DC    C'12345678 '\n         DC    C'12345678 '\n         DC    CL(114-(*-MSG095A))' '\nMSG096A  DS    0C\n         DC    C'SYS096E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'STEPTERM: WJCT INVALID POINTER IN JMRUCOM - '\n         DC    C'12345678'\n         DC    CL(114-(*-MSG096A))' '\nMSG097A  DS    0C\n         DC    C'SYS097E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'EXTENDED DD TYPE30 SUBTYPE 4, JMRUCOM IS ZERO'\n         DC    CL(114-(*-MSG097A))' '\nMSG098A  DS    0C\n         DC    C'SYS098E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'JMR HAS A STEP NUMBER OF ZERO'\n         DC    CL(114-(*-MSG098A))' '\nMSG099A  DS    0C\n         DC    C'SYS099E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'TYPE 30 WITH NO ID SECTION'\n         DC    CL(114-(*-MSG099A))' '\nMSG001A  DS    0C\n         DC    C'SYS001I '\n         DC    C'ON  '\n         DC    C'JOBNAMEX'\n         DC    C'('\n         DC    C'JOB 1234'\n         DC    C') '\n         DS    0CL8\n         DC    C'HH:MM:SS'\n         DC    C' '\n         DC    C'DAY'\n         DC    C' '\n         DS    0CL8\n         DC    C'MO/DD/YY'\n         DC    C'('\n         DC    C'DDD'\n         DC    C')'\n         DS    0CL54\n         DC    C' FOR '\n         DC    C'12345678901234567890'\n         DC    C' ON '\n         DC    C'SUID'\n         DC    C' CL/PR '\n         DC    C'X'\n         DC    C'/'\n         DC    C'   '\n         DC    CL(114-(*-MSG001A))' '\nMSG101A  DS    0C\n         DC    C'SYS101I '\n         DC    C'    '\n         DC    C'READER OFF '\n         DS    0CL8\n         DC    C'HH:MM:SS'\n         DC    C' '\n         DC    C'DAY'\n         DC    C' '\n         DS    0CL8\n         DC    C'MO/DD/YY'\n         DC    C'('\n         DC    C'DDD'\n         DC    C') '\n         DC    C' QUEUE WAIT '\n         DS    0CL10\n         DC    C'HHHH:MM:SS'\n         DC    C' ENQUEUE WAIT '\n         DS    0CL10\n         DC    C'HHHH:MM:SS'\n         DC    CL(114-(*-MSG101A))' '\nMSG102A  DC    C'SYS102I '\n         DC    C'DO  '\n         DC    C'JOBNAMEX'\n         DC    C'('\n         DC    C'JOB 1234'\n         DC    C') '\n         DC    C'        '\n         DC    C'.'\n         DC    C'        '\n         DC    C'('\n         DC    C'   '\n         DC    C' PGM '\n         DC    C'PROGNAME'\n         DC    C' '\n         DS    0CL8\n         DC    C'HH:MM:SS'\n         DC    C' '\n         DC    C'DAY'\n         DC    C' '\n         DS    0CL8\n         DC    C'MO/DD/YY'\n         DC    C'('\n         DC    C'DDD'\n         DC    C') '\n         DC    CL(114-(*-MSG102A))' '\nMSG103A  DC    C'SYS103I '\n         DC    C'    '\n         DC    C'TCB '\n         DC    C'   '\n         DC    C':'\n         DC    C'  '\n         DC    C':'\n         DC    C'  '\n         DC    C'.'\n         DC    C'  '\n         DC    C' SRB '\n         DC    C'   '\n         DC    C':'\n         DC    C'  '\n         DC    C':'\n         DC    C'  '\n         DC    C'.'\n         DC    C'  '\n         DC    C' TOTAL '\n         DC    C'    '\n         DC    C':'\n         DC    C'  '\n         DC    C':'\n         DC    C'  '\n         DC    C'.'\n         DC    C'  '\n         DC    C' ELAPSE '\n         DC    C'    '\n         DC    C':'\n         DC    C'  '\n         DC    C':'\n         DC    C'  '\n         DC    C' DEV WAIT '\n         DC    C'    '\n         DC    C':'\n         DC    C'  '\n         DC    C':'\n         DC    C'  '\n         DC    CL(114-(*-MSG103A))' '\nMSG103B  DC    C'SYS103I '\n         DC    C'    '\n         DC    C'TAPE MOUNTS '\n         DC    C'    '\n         DC    C' SYSIN '\n         DC    C'          '\n         DC    C' SWAPS '\n         DC    C'          '\n         DC    C' EXCP '\n         DC    C'          '\n         DC    C' REGION '\n         DC    C'     '\n         DC    C'  USED '\n         DC    CL(114-(*-MSG103B))' '\nMSG104A  DS    0C\n         DC    C'SYS104I '\n         DC    C'    '\n         DC    C'STEPS: TOTAL '\n         DC    C'   '\n         DC    C' RUN '\n         DC    C'   '\n         DC    C' FLUSHED '\n         DC    C'   '\n         DC    C' USER ABENDED '\n         DC    C'   '\n         DC    C' SYSTEM ABENDED '\n         DC    C'   '\n         DC    CL(114-(*-MSG104A))' '\n         EJECT\n***********************************************************************\n*                                                                     *\n*  DEVICE TABLE FOR TRANSLATING UCB TYPE BYTES TO LITERALS            *\n*                                                                     *\n***********************************************************************\nDEVTABLE DS    0H\n         DC    X'0000',C'JES2'\n         DC    X'8003',C'TAPE'\n         DC    X'8000',C'TAPE'\n         DC    X'2009',C'3330'\n         DC    X'200A',C'3340'\n         DC    X'200B',C'3350'\n         DC    X'200D',C'3331'\n         DC    X'200E',C'3380'\n         DC    X'2000',C'DASD'\n         DC    X'1009',C'3270'\n         DC    X'1000',C'GRAF'\n         DC    X'0801',C'254R'\n         DC    X'0802',C'254P'\n         DC    X'0804',C'2501'\n         DC    X'0805',C'2520'\n         DC    X'0806',C'3505'\n         DC    X'0808',C'1403'\n         DC    X'0809',C'3211'\n         DC    X'080B',C'3203'\n         DC    X'080C',C'3525'\n         DC    X'080E',C'3800'\n         DC    X'0800',C'U/R '\n         DC    X'4000',C'TP  '\n         DC    X'4100',C'CTCA'\n         DC    X'FFFF',C'UNKN'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  TRANSLATE TABLE FOR HEX CONVERSION                                 *\n*                                                                     *\n***********************************************************************\nTRTAB    DC    C'0123456789ABCDEF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  LITERALS                                                           *\n*                                                                     *\n***********************************************************************\n         LTORG ,\n         EJECT\n***********************************************************************\n*                                                                     *\n*  CONSTANT PATCH AREA                                                *\n*                                                                     *\n***********************************************************************\nCONLEN   EQU   *-CONSTANT\nLPATCH2  EQU   (CONLEN+K9)/K5/K8+K1 ADD 5% FOR PATCH AREA\nLPATCHL2 DC    AL2(LPATCH2*K8)\nSPATCH2  DC    S(PATCH2)\nPATCH2   DC    (LPATCH2)D'00'\n         EJECT\n***********************************************************************\n*                                                                     *\n*  WORKING STORAGE / SAVE AREA                                        *\n*                                                                     *\n***********************************************************************\nDATA     DSECT\nSAVE     DS    18F              SAVE AREA FOR REGISTERS ON ENTRY\n         ORG   SAVE\nSAVEXX   DS    F\nSAVEBK   DS    F\nSAVEFW   DS    F\nSAVER14  DS    F\nSAVER15  DS    F\nSAVER0   DS    F\nSAVER1   DS    F\n         DS    11F\nR12FORYS DS    F\nR12FORMS DS    F\nNUMLEN   DS    F\n*\nDWORD    DS    D\nRWORK    DS    D\nTIMEDATE DS    0D\nCURRTIME DS    F\nCURRDATE DS    F\nESTAEW   DS    XL(LESTAEL)      ESTAE PARM LIST AREA\nESTAPARM DS    0F               PARAMETER LIST PASSED TO RETR\nNOSDWARR DS    F   +0  1 RETRY ROUTINE ADDRESS - NO SWDA OBTAINED\nSDWARR   DS    F   +4  2 RETRY ROUTINE ADDRESS - SWDA OBTAINED\nESTAER12 DS    F   +8  3 BASE REGISTER R12\nESTAER13 DS    F  +12  4 DATA REGISTER R13\nESTAECOD DS    F  +16  5 ENTRY CODE\nESTAE2RR DS    F  +20  6 SECOND LEVEL RETRY ADDRESS\nESTAEABN DS    F  +24  7 ABEND CODE\nESTAEPSW DS    F  +28  8 FAILING ADDRESS FROM SDWA IF AVAILABLE\nESTAEWRK DS    F  +32  9 WORK WORD IF NEEDED\nLESTAEPM EQU   *-ESTAPARM\n*\nSAVEAR2  DS    6F               INTERNAL SAVE REGISTER SAVE AREA\n*\nPARMS    DS    0F               PARMS PASSED IN REG 1 TO ROUTINE\nPARMEPRM DS    F                PTR TO COMMON EXIT PARAMETER AREA\nPARMSTEP DS    F                PTR TO STEPNAME FIELD\nPARMPROG DS    F                PTR TO PROGRAMMER NAME FIELD\nPARMJOBC DS    F                PTR TO JOB CPU TIME FIELD\nPARMACCT DS    F                PTR TO JOB ACCOUNTING FIELDS\nPARMSTPC DS    F                PTR TO STEP CPU TIME FIELD\nPARMSACT DS    F                PTR TO STEP ACCOUNTING FIELDS\nPARMINDC DS    F                PTR TO CANCEL FLAG & STEP NUMBER\nPARMCOND DS    F                PTR TO CONDITION CODE FIELD\nPARMRECD DS    F                PTR TO SMF RECORD TO BE WRITTEN\nLPARMS   EQU   *-PARMS\nEDWORK   DC    XL9'00'\nEDWORK2  DC    XL12'00'\nWORKDDD1 DS    PL2\nWORKYY1  DS    PL2\nWORKDDD0 DS    PL2\nWORKYY0  DS    PL2\nWKYR1    DS    PL4\nWKYR2    DS    PL4\nWKYR3    DS    PL5\nWKTOT    DS    PL5\n         DS    C                   SPACE FOR PAD CHARACTER\nRC       DS    CL5\nMODDYY   DS    0CL8\nMO       DS    CL2\n         DS    C\nDD       DS    CL2\n         DS    C\nYY       DS    CL2\nJULIAN   DS    CL3\nDAY      DS    CL3\nPREHHHH  DS    CL3\nTIMEFLD  DS    0CL13\nHHHH     DS    CL4\n         DS    C\nMM       DS    CL2\n         DS    C\nSS       DS    CL2\n         DS    C\nTH       DS    CL2\n*\nLWTO1    EQU   114+KA\n         DS    0F\nWTO1     DS    0CL(LWTO1)\nWTO1LEN  DS    XL2\nWTO1MCS  DS    XL2\nWTO1TXT  DS    CL114            MESSAGE TEXT\nWTO1DESC DS    XL2\nWTO1ROUT DS    XL2\n         DS    6D             RESERVE FOR ZAPS\nLDATA    EQU   *-DATA\n         EJECT\n***********************************************************************\n*                                                                     *\n*  MAPPING DSECTS                                                     *\n*                                                                     *\n***********************************************************************\nDMYM095A DSECT\n         DC    C'SYS095E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'ESTAED - '\nM095ACOD DC    C'12345678 '\nM095AWRK DC    C'12345678 '\nM095APSW DC    C'12345678 '\nM095AABN DC    C'12345678 '\n         SPACE 2\nDMYM093A DSECT\n         DC    C'SYS093E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'JOBTERM: WJCT INVALID POINTER IN JMRUCOM - '\nM093AWJC DC    C'12345678'\n         EJECT\nDMYM096A DSECT\n         DC    C'SYS096E '\n         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '\n         DC    C'STEPTERM: WJCT INVALID POINTER IN JMRUCOM - '\nM096AWJC DC    C'12345678'\n         SPACE 2\nDMYM001A DSECT\nM001AIDN DC    C'SYS001I '\nM001AIDM DC    C'ON  '\nM001AJBN DC    C'JOBNAMEX'\n         DC    C'('\nM001AJNM DC    C'JOB 1234'\n         DC    C') '\nM001ATME DS    0CL8\n         DC    C'HH:MM:SS'\n         DC    C' '\nM001ADAY DC    C'DAY'\n         DC    C' '\nM001AGDT DS    0CL8\n         DC    C'MO/DD/YY'\n         DC    C'('\nM001AJDT DC    C'DDD'\n         DC    C')'\nM001ASTP DS    0CL54\n         DC    C' FOR '\nM001AUSR DC    C'12345678901234567890'\nM001ARCF DS    0CL19\n         DC    C' ON '\nM001ASID DC    C'SUID'\n         DC    C' CL/PR '\nM001ACLS DC    C'X'\n         DC    C'/'\nM001AJPT DC    C'   '\n         DC    C'         '\nM001ASRC EQU   M001ARCF+6,7,C'C'\nM001AHCC EQU   M001ARCF+14,5,C'C'\nM001ALEN EQU   *-M001AIDN\n         EJECT\nDMYM101A DSECT\nM101AIDN DC    C'SYS101I '\n         DC    C'    '\n         DC    C'READER OFF '\nM101ATM1 DS    0CL8\n         DC    C'HH:MM:SS'\n         DC    C' '\nM101ADY1 DC    C'DAY'\n         DC    C' '\nM101AGD1 DS    0CL8\n         DC    C'MO/DD/YY'\n         DC    C'('\nM101AJDT DC    C'DDD'\n         DC    C') '\n         DC    C' QUEUE WAIT '\nM101ATM2 DS    0CL10\n         DC    C'HHHH:MM:SS'\n         DC    C' ENQUEUE WAIT '\nM101ATM3 DS    0CL10\n         DC    C'HHHH:MM:SS'\n         DC    CL19' '\nM101ALEN EQU   *-M101AIDN\n         SPACE 2\nDMYM102A DSECT\nM102AIDN DC    C'SYS102I '\nM102AIDM DC    C'DO  '\nM102AJBN DC    C'JOBNAMEX'\n         DC    C'('\nM102AJNM DC    C'JOB 1234'\n         DC    C') '\nM102ASTP DC    C'STEPNAME'\n         DC    C'.'\nM102APRC DC    C'PROCSTEP'\n         DC    C'('\nM102ASNN DC    C'NNN'\n         DC    C' PGM '\nM102APRG DC    C'PROGNAME'\n         DC    C' '\nM102ATM1 DS    0CL8\n         DC    C'HH:MM:SS'\n         DC    C' '\nM102ADAY DC    C'DAY'\n         DC    C' '\nM102AGD1 DS    0CL8\n         DC    C'MO/DD/YY'\n         DC    C'('\nM102AJDT DC    C'DDD'\n         DC    C') '\nM102ASRC DS    0CL3\n         DC    CL3'RC '\nM102ARC  DS    0CL5\n         DC    CL5' '\nM102ALEN EQU   *-M102AIDN\n         EJECT\nDMYM103A DSECT\nM103AIDN DC    C'SYS103I '\n         DC    C'    '\n         DC    C'TCB '\nM103ATM1 DS    0CL12\n         DC    C'HHH:MM:SS.TH'\n         DC    C' SRB '\nM103ATM2 DS    0CL12\n         DC    C'HHH:MM:SS.TH'\n         DC    C' TOTAL '\nM103ATM3 DS    0CL13\n         DC    C'HHHH:MM:SS.TH'\n         DC    C' ELAPSE '\nM103ATM5 DS    0CL10\n         DC    C'HHHH:MM:SS'\n         DC    C' DEV WAIT '\nM103ATM4 DS    0CL10\n         DC    C'HHHH:MM:SS'\n         DC    CL14' '\nM103ALEN EQU   *-M103AIDN\n         SPACE 2\nDMYM103B DSECT\nM103BIDN DC    C'SYS103I '\n         DC    C'    '\n         DC    C'TAPE MOUNTS '\nM103BTPM DC    C'NNNN'\n         DC    C' SYSIN '\nM103BSIN DC    C'NNNNNNNN'\n         DC    C'   SWAPS '\nM103BSWP DC    C'NNNNNNNN'\n         DC    C'   EXCP '\nM103BEXC DC    C'NNNNNNNN'\n         DC    C'   REGION '\nM103BTRG DC    C'NNNNN'\n         DC    C'K USED '\nM103BURG DC    C'NNNNN'\n         DC    C'K'\n         DC    CL13' '\nM103BLEN EQU   *-M103BIDN\n         EJECT\nDMYM103C DSECT\nM103CDDN DC    C'DDNAMEXX'\n         DC    C' '\nM103CNNN DC    C'NNN'\n         DC    C' '\nM103CCUA DC    C'CUU'\n         DC    C' '\nM103CDEV DC    C'DEVT'\n         DC    C' '\nM103CEXC DC    C'NNNNNNNN'\n         DC    C'      '\nM103CLEN EQU   *-DMYM103C\n         SPACE 2\nDMYM104A DSECT\nM104AIDN DC    C'SYS104I '\n         DC    C'    '\n         DC    C'STEPS: TOTAL '\nM104ATST DC    C'NNN'\n         DC    C' RUN '\nM104ASRN DC    C'NNN'\n         DC    C' FLUSHED '\nM104ASFL DC    C'NNN'\n         DC    C' USER ABENDED '\nM104ASUA DC    C'NNN'\n         DC    C' SYSTEM ABENDED '\nM104ASSA DC    C'NNN '\n         DC    CL13' '\nM104ALEN EQU   *-M104AIDN\n         EJECT\nWJCT     DSECT\nWJCTID   DC    CL8'WSRCCJCT'\n*\nWJCTHSCC DS    H                   HIGHEST COMPLETION CODE\nWJCTHSTI DS    H                    AND TERMINATION CODE\n*\nWJCTNORN DS    H                   NUMBER OF RAN\nWJCTNOFS DS    H                   NUMBER OF FLUSHED STEPS\n*\nWJCTNOUA DS    H                   NUMBER OF USER ABEND\nWJCTNOSA DS    H                   NUMBER OF SYSTEM ABEND\n*\nWJCTHIRC DS    F                   RELATIVE HIGHEST RETURN CODE FOR\n*                                  COMPARE\nWJCTDDNO DS    F                   CONCATENATED DD NUMBER\nWJCTXDDS DS    F                   POINTER TO GETMAINED MSG LINE\nWJCTOLOF DS    F                   OUTPUT LINE OFFSET\nWJCTOLNN DS    F                   NUMBER OF POSITIONS LEFT IN LINE\nWJCTDDNM DS    CL8                 LAST DDNAME\nLWJCT    EQU   *-WJCT\n         EJECT\n         IFASMFR 30                SMF TYPE 30 RECORD           MSEIPO4\n         SPACE 2\n         IFASMFR 32                SMF TYPE 32 RECORD           WDA#01\n         SPACE 2\n         IEFJMR                    JMR MAPS COMMON PARAMETER AREA\n         SPACE 2\n         IHASDWA DSECT=YES         SDWA FOR ESTAE/SETRP MACRO\n         SPACE 2\n         IKJTSB LIST=YES,EXT=NO\n         IKTTSBX\n         IHAASCB\n         END   IEFACTRT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFU84": {"ttr": 5123, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x00\\xf6\\x00\\xf6\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 246, "newlines": 246, "modlines": 0, "user": "WSRCC"}, "text": "IEFU84 TITLE 'WSRCC MODIFIED SMF RECORD EXIT'                           00002\n         PRINT GEN                                                      00003\n*/* REFER:  IPO1.SAMPLIB(IEFU84)                                        00004\n*/* COMPID: SYSTEM                                                      00005\n*/* DOC     THIS IS A SAMPLE SMF EXIT ROUTINE TO SUPRESS WRITING        00006\n*/*         SELECTED SMF RECORD TYPES.                                  00007\n*/*                                                                     00007\n*/* NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE    00007\n*/*                                                                     00007\n*/* THIS MODULE IS SIMPLY LINKEDITTED INTO LPALIB RENT.  FOR TESTING    00007\n*/* VIA MLPA, MAKE CERTAIN THAT IT IS NOT IN IEAFIX##.                  00007\n*/*                                                                     00007\n*/* NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE    00007\n*/*                                                                     00007\n*********************************************************************** 00008\n*                                                                     * 00009\n*             MODULE NAME = IEFU84                                    * 00010\n*                                                                     * 00011\n*             DESCRIPTIVE NAME = WSRCC MODIFIED SMF RECORD EXIT.      * 00012\n*                                                                     * 00013\n*             COPYRIGHT = NONE                                        * 00014\n*                                                                     * 00015\n*             FUNCTION =                                              * 00016\n*             WSRCC HAS ALSO ADDED SUPPORT FOR A USER CVT (WCVT).     * 00029\n*             AN AREA IS GETMAINED WHEN U84 IS ENTERED                * 00030\n*             FOR THE TYPE 0 IPL SMF RECORD.  THIS AREA IS IN THE     * 00031\n*             SYSTEM SUBPOOL 245 - FIXED, NOT FETCH PROTECETED,       * 00032\n*             AND STORE PROTECTED.                                    * 00033\n*             MODIFICATIONS DONE BY TOM FOTH, JOE MARTIN              * 00034\n*             AND JAN HELD.                                           * 00035\n*             W.S.R.C.C.   03/31/81  SYSTEMS SOFTWARE UNIT.           * 00036\n*                                                                     * 00037\n*             DEPENDENCIES = NONE                                     * 00048\n*                                                                     * 00049\n*             RESTRICTIONS = NONE                                     * 00050\n*                                                                     * 00051\n*                                                                     * 00060\n*             MODULE TYPE = EXECUTABLE                                  00061\n*                                                                     * 00062\n*                PROCESSOR = ASM                                      * 00063\n*                                                                     * 00064\n*                ATTRIBUTES = PROTECTION KEY 0, REENTRANT, ENABLED    * 00067\n*                                                                     * 00068\n*                                                                     * 00069\n*             ENTRY POINTS = IEFU84 (ONLY ENTRY POINT)                * 00070\n*                                                                     * 00071\n*             INPUT = REGISTER 1 POINTS TO A 4 BYTE ADDRESS OF THE    * 00072\n*                RECORD DESCRIPTOR WORD (RDW) OF THE SMF RECORD TO    * 00073\n*                BE PROCESSED BY THE EXIT.                            * 00074\n*                                                                     * 00075\n*             OUTPUT= REGISTER 15 MUST CONTAIN ONE OF THE FOLLOWING:  * 00076\n*                0 - WRITE THE SMF RECORD (KEEP)                      * 00077\n*                4 - DO NOT WRITE THE SMF RECORD (DELETE)             * 00078\n*                                                                     * 00079\n*             EXTERNAL REFERENCES = NONE                              * 00080\n*                                                                     * 00081\n*             EXITS - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14  * 00082\n*                OUTPUT = NONE                                        * 00083\n*                RETURN CODE = SEE FUNCTION ABOVE                     * 00084\n*                                                                     * 00085\n*             EXITS - ERROR = NONE                                    * 00086\n*                OUTPUT = NONE                                        * 00087\n*                RETURN CODE = ZERO                                   * 00088\n*                                                                     * 00089\n*             CHANGE ACTIVITY = NONE                                  * 00094\n*                                                                     * 00095\n*             CHARACTER CODE DEPENDENCY = NONE                        * 00096\n*                                                                     * 00097\n*             NOTES = MACROS USED                                     * 00098\n*                                                                     * 00099\n*             ABEND CODES = NONE                                      * 00100\n*                                                                     * 00101\n*********************************************************************** 00102\n         EJECT                                                          00103\n*--------------MODIFICATION.LOG---------------------------------------* 00104\n*  PROGRAMMER  |  DATE  |  SUMMARY OF CHANGES MADE TO THIS PROGRAM    * 00106\n*--------------+--------+---------------------------------------------* 00107\n* JOE MARTIN   |02/01/81| #1. ADDED USERCVT GETMAIN AND STORE OF      * 00108\n*              |        |     ADDRESS INTO CVTUSER ON ENTRY WITH      * 00109\n*              |        |     RECORD TYPE \"0\".                        * 00110\n* JAN HELD     |10/21/81| #2. ADDED CHECK FOR PREVIOUS STORE OF       * 00111\n*              |        |     USERCVT ADDRESS INTO CVTUSER PRIOR TO   * 00112\n*              |        |     GETMAIN AND STORE DESCRIBED IN #1.      * 00113\n* JAN HELD     |10/22/82| #3. MODIFIED THE PROGRAM TO BE ABLE TO      * 00114\n*              |        |     RUN IN LOCKED OR SRB MODE.              * 00115\n* JOE MARTIN   |11/17/81| #4. REMOVED TIME SVC FROM CODE - IT CAUSED  * 00116\n*              |        |     SMF TO ABEND BECAUSE OF BEING IN LOCKED * 00117\n*              |        |     MODE ON ENTRY.  USING THE DATE AND TIME * 00118\n*              |        |     FROM THE TYPE 0 RECORD INSTEAD.         * 00119\n* HELD, MARTIN,|  12/81 | #5. MISC. CHANGES TO ALLOW EXIT TO FUNCTION * 00119\n* FOTH         |        |     UNDER MVS/SP1 @ 8107.  INCLUDED IS      * 00120\n*              |        |     CONDITIONALLY GETTING THE SALLOC AND    * 00121\n*              |        |     LOCAL LOCK IF AN IPL SMF RECORD (TYPE 0)* 00122\n*              |        |     IS PROCESSED AND A GETMAIN FOR THE LOCAL* 00123\n*              |        |     CVT IS NECESSARY                        * 00124\n* TOM FOTH     |09/15/82| #6. GENERAL CLEANUP AND ENHANCEMENT.  MOST  * 00125\n*              |        |     DISPLACEMENTS ARE NOW RESOLVED VIA      * 00126\n*              |        |     LABELS IN MAPPING DSECTS.  FURTHER, THE * 00127\n*              |        |     BINARY TIME OF DAY IS CONVERTED TO UN-  * 00128\n*              |        |     SIGNED PACKED (HHMMSSTH).  FINALLY, NEW * 00129\n*              |        |     FIELDS (WCVTTLEN, WCVTMLEN, WCVTULEN)   * 00130\n*              |        |     ARE IMPLEMENTED (FOR TOTAL LENGTH,      * 00131\n*              |        |     MAPPED LENGTH, AND USED LENGTH.         * 00132\n*              |        |                                             * 00133\n* JOE MARTIN   |01/03/84| #7. ADDED SUPPORT FOR WCVT LAST MODIFIED    * 00134\n*              |        |     TIME AND DATE.                          * 00135\n*              |        |                                             * 00136\n*              |        |                                             * 00152\n*---------------------------------------------------------------------* 00153\n         EJECT                                                          00154\nIEFU84   CSECT                                                          00155\nR00      EQU   0                   USED BY SETLOCK FOR SAVING REGS       00156\nR0       EQU   0                   USED BY SETLOCK FOR SAVING REGS       00156\nR01      EQU   1                   WORK REGISTER-AT ENTRY ADDR SMF REC   00157\nR1       EQU   1                   WORK REGISTER-AT ENTRY ADDR SMF REC   00157\nR02      EQU   2                   WORK REGISTER-CLR, TIME RTN           00158\nR2       EQU   2                   WORK REGISTER-CLR, TIME RTN           00158\nR03      EQU   3                   WORK REGISTER-CLR, TIME RTN           00159\nR3       EQU   3                   WORK REGISTER-CLR, TIME RTN           00159\nR04      EQU   4                   WORK REGISTER-CLR, TIME RTN           00160\nR4       EQU   4                   WORK REGISTER-CLR, TIME RTN           00160\nR05      EQU   5                   WORK REGISTER-CLR, TIME RTN           00163\nR5       EQU   5                   WORK REGISTER-CLR, TIME RTN           00163\nR06      EQU   6                   WORK REGISTER-TIME RTN                00162\nR6       EQU   6                   WORK REGISTER-TIME RTN                00162\nR07      EQU   7                   GETS ADDRESS OF THE CVT               00161\nR7       EQU   7                   GETS ADDRESS OF THE CVT               00161\nR08      EQU   8                   POINTS TO USER CVT (WCVT)             00164\nR8       EQU   8                   POINTS TO USER CVT (WCVT)             00164\nR09      EQU   9                   BASE REGISTER                         00165\nR9       EQU   9                   BASE REGISTER                         00165\nR10      EQU   10                  POINTER TO THE SMF RECORD             00166\nR11      EQU   11                  LOCKS OBTAINED REGISTER               00167\nR12      EQU   12                  NOT USED                             00168\nR13      EQU   13                  SAVEAREA REG                         00169\nR14      EQU   14                  RETURN ADDRESS                       00170\nR15      EQU   15                  ENTRY ADDRESS & TEMPORARY BASE       00171\n         USING *,R15               TEMPORARY BASE FOR                   00187\n         B     START               BRANCHING AROUND                     00188\n         DC    CL8'IEFU84  '       MODULE IDENTIFIER                    00189\n         DC    CL8'*WSRCC**'\n         DC    CL8'&SYSDATE'\n         DC    CL8' @ &SYSTIME'\nSTART    EQU   *                                                        00190\n         STM   R14,R12,12(R13)     SAVE CALLERS REGISTERS               00191\n         LR    R09,R15             SET UP ADDRSSABILITY IN R09\n         DROP  R15                 DROP R15 FOR ADDRESSABILITY\n         USING IEFU84,R09\n*\n*  CHECK FOR TYPE 0 SMF RECORD\n*\n         L     R10,0(0,R01)        GET ADDRESS OF SMF RECORD\n         USING SMFRCD0,R10\n         XR    R03,R03             CLEAR WORKREG\n         ICM   R03,X'01',SMF0RTY   GET SMF RECORD TYPE FROM RECORD\n         BNZ   RESTREGS            IF NOT TYPE 0, GO AWAY\n*\n*   CHECK USER CVT FOR ZEROES\n*\n         L     R07,CVTPTR          POINT AT CVT\n         USING CVT,R07             ESTAB. ADDR. FOR CVT\n         L     R03,CVTUSER         GET CVTUSER FOR CHECK\n         LTR   R03,R03             CHECK FOR PREVIOUS WCVT USER\n         BNZ   RESTREGS            IF NOT ZEROES, GO AWAY\n*\n*   OBTAIN GLOBAL LOCK\n*\nLOCKUP   SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,REGS=USE,              +\n               RELATED=(UNLOCK,'GET SALLOC')                        #5.\n         C     R15,=F'8'           WAS RETURN CODE 8\n         BNE   LOCKOK              NO LOCK WAS OKAY\n         SDUMP HDR='WSRCC ERROR, SETLOCK FAILED IN IEFU84',BRANCH=YES, +\n               ASID=0\n         B     RESTREGS            RETURN WITH NO USER CVT\nLOCKOK   LR    R11,R15             SAVE RETURN CODE IN R11\n*\n*   GET SPACE FOR USERCVT AND FILL WITH GOODIES\n*\n         GETMAIN RC,LV=WCVTGMSZ,SP=245,BRANCH=(YES,GLOBAL),BNDRY=PAGE\n         C     R15,=F'8'\n         BNE   GOTMAIN\n         SDUMP HDR='WSRCC ERROR, GETMAIN FAILED IN IEFU84',BRANCH=YES, +\n               ASID=0\n         B     RLSELOCK\nGOTMAIN  LR    R08,R01             R08 IS ADDRESS OF WCVT\n         USING WCVT,R08            MAP IT\n         ST    R08,CVTUSER         STORE WCVT ADDRESS IN CVTUSER\n         LR    R02,R08             POINT TO THE WCVT FOR CLEARING\n         LA    R03,WCVTGMSZ        LENGTH TO CLEAR\n         SR    R04,R04             SOURCE IS INCONSEQUENTIAL\n         SR    R05,R05             LENGTH IS ZERO\n         MVCL  R02,R04             CLEAR THE AREA\n         MVC   WCVTID,WSRCCCVT     MOVE LITERAL INTO WCVT\n         MVC   WCVTDATE,SMF0DTE    MOVE IN DATE\n         MVC   WCVTSID,SMF0SID     MOVE IN THE SYSTEM ID\n         LA    R02,WCVTLEN         GET LENGTH OF MAPPED CVT\n         ST    R02,WCVTMLEN        SAVE IT (MAPPED LENGTH)\n         ST    R02,WCVTULEN        SAVE IT (USED LENGTH)\n         LA    R02,WCVTGMSZ        GET LENGTH OF GETMAIN\n         ST    R02,WCVTTLEN        SAVE IT\n*\n* FOLLOWING CODE CONVERTS BINARY HUNDREDTHS OF SECONDS TO\n* UNSIGNED PACKED HHMMSSTH FORMAT.\n*\n         ICM    R04,B'1111',SMF0TME GET THE TIME\n         SRDA   R04,32         MOVE TO R5 W/SIGN EXTENSION\n         D      R04,=F'360000' DIVIDE BY 100THS OF MINUTES\n         LR     R06,R04        SAVE THE REMAINDER\n         M      R04,=F'10000000' SHIFT LEFT\n         LR     R02,R05        SAVE IT\n         LR     R04,R06        RESTORE REMIANDER TO R4\n         SRDA   R04,32         MOVE TO R5 W/SIGN EXTENSION\n         D      R04,=F'6000'   DIVIDE BY 100THS SECONDS\n         LR     R06,R04        SAVE THE REMAINDER\n         M      R04,=F'100000' SHIFT LEFT\n         AR     R02,R05        ADD TO RUNNING SUM\n         LR     R05,R06        RESTORE THE REMAINDER\n         M      R04,=F'10'     SHIFT LEFT\n         AR     R02,R05        ADD TO RUNNING SUM\n         CVD    R02,WCVTRS01   SAVE TIME\n*\n* WCVTRS01+3  NOW CONTAINS PACKED UNSIGNED TIME\n*\n         MVC   WCVTTIME,WCVTRS01+3 MOVE PASCKED TIME TO CVT\n         XC    WCVTRS01(8),WCVTRS01 CLEAR TEMP STORAGE\n         MVC   WCVTMDTM(8),WCVTTIME MOVE IPL TIME/DATE TO MOD T/D   #7.\n*\n*   RELEASE LOCAL LOCK, IF NECESSARY, RESTORE REGS, AND RETURN\n*\nRLSELOCK LTR   R11,R11             Q. WERE ANY LOCKS GOTTEN\n         BNZ   RESTREGS            A. NO, NONE TO RELEASE\nUNLOCK   SETLOCK RELEASE,TYPE=SALLOC,REGS=USE,                         +\n               RELATED=(LOCKUP,'RLSE LOCK')                         #5.\nRESTREGS L     R14,12(R13)         RESTORE RETURN ADDRESS               00245\n         SR    R15,R15             CLEAR RETURN CODE (ALWAYS RET ZERO)  00246\n         LM    R00,R12,20(R13)     RESTORE REGS ZERO THRU 12            00247\n         BR    R14                 RETURN                               00248\nWSRCCCVT DC    CL8'WSRCCCVT'       LITERAL FOR USER CVT (WCVT)\n         PRINT NOGEN\n         WSRCCCVT\n         CVT   PREFIX=NO,DSECT=YES                                      00293\n         IHAPSA DSECT=YES\n         IHAWSAVT DSECT=YES,CLASS=GLOBAL\nSMFDSCT  DSECT\n         IFASMFR 0\n         END                                                            00294\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IGC0023D": {"ttr": 5128, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x00/\\x00/\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "WSRCC"}, "text": "*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-* 00001\n*                                                                     * 00002\n*  ----------------------S V C   2 3 3 -----------------------------  * 00003\n*  SETJSCB - A NON-AUTHORIZED TYPE 3 SVC THAT TURNS THE JSCB          * 00004\n*  AUTHORIZATION ON OR OFF BASED ON THE ENTRY CODE IN REGISTER 1.     * 00005\n*                                                                     * 00006\n*  ENTRY CODE = 0 - TURN JSCB AUTHORIZATION ON                        * 00007\n*  ENTRY CODE = 4 - TURN JSCB AUTHORIZATION OFF                       * 00008\n*                                                                     * 00009\n*  CODED 3/18/76 BY J. W. RICH (FROM R. MARKEL).                      * 00010\n*  MODED 3/31/81 BY J. A. MARTIN - W.S.R.C.C                          * 00011\n*        ADDED CHECK FOR R1=0 OR R1=4 => SDUMP IF NOT GOOD R1         * 00012\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-* 00013\nIGC0023D CSECT                                                          00014\n         USING *,R6                BASE REGISTER                        00015\n         L     R12,PSATOLD         LOAD CURRENT TCB PTR                 00016\n         L     R12,TCBJSCB(0,R12)  LOAD JSCB PTR                        00017\n         LTR   R1,R1                    CHECK IF ZERO                   00018\n         BZ    DOIT                     R1=0 IS OK - GO DO IT           00019\n         C     R1,F4                    CHECK IF FOUR                   00020\n         BE    DOIT                     R1=4 IS OK - GO DO IT           00021\n         SDUMP HDR='IGC0023D ERROR R1 \u00ac= 0 OR 4 - WSRCC LOCAL SVC'      00022\n         SR    R1,R1                    SET OFF AUTH                    00023\nDOIT     EX    R0,APFON(R1)        \"EX\"ECUTE APFON OR APFOFF BASED      00024\n*                                       ON REGISTER 1 ENTRY CODE        00025\n         BR    R14                 RETURN                               00026\n         EJECT                                                          00027\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-* 00028\n*  VARIOUS AND SUNDRY \"EX\"ECUTED INSTRUCTIONS                         * 00029\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-* 00030\nAPFON    OI    JSCBOPTS(R12),JSCBAUTH        TURN ON AUTHORIZATION      00031\nAPFOFF   NI    JSCBOPTS(R12),X'FF'-JSCBAUTH  TURN OFF AUTHORIZATION     00032\n         EJECT                                                          00033\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-* 00034\n*  VARIOUS AND SUNDRY EQUATES                                           00035\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-* 00036\nF4       DC    F'04'               USED TO COMPARE TO R1                00037\nJSCBAUTH EQU   X'01'               JSCB AUTHORIZATION BIT               00038\nPSATOLD  EQU   X'21C'              OFFSET TO TCBOLD PTR                 00039\nTCBJSCB  EQU   X'B4'               OFFSET TO JSCB PTR                   00040\nJSCBOPTS EQU   X'EC'               OFFSET TO JSCB AUTHORIZATION FIELD   00041\nR0       EQU   0                   REGISTER 0                           00042\nR1       EQU   1                   REGISTER 1                           00043\nR6       EQU   6                   REGISTER 6                           00044\nR12      EQU   12                  REGISTER 12                          00045\nR14      EQU   14                  REGISTER 14                          00046\n         END                                                            00047\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPTCM": {"ttr": 5130, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x00\\xf2\\x00\\xf2\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 242, "newlines": 242, "modlines": 0, "user": "WSRCC"}, "text": "ISPTCM   TITLE  'TCMGEN MACRO LISTING'\n         PRINT  ON,GEN\n         MACRO\n&LABEL   TCMGEN &COMMAND,              COMMAND TO ADD TO THE TABLE     X\n               &TYPE=COMMAND,          TYPE OF MACRO EXECUTION         X\n               &FLAGS=CP               COMMAND EXECUTION FLAGS\n.*\n.*     MACRO - TCMGEN\n.*    AUTHOR - JOSEPH A MARTIN\n.*   ADDRESS - STATE OF WISCONSIN\n.*             DEPARTMENT OF HEALTH AND SOCIAL SERVICES\n.*             OFFICE OF INFORMANTION SYSTEMS\n.*             WILSON STREET REGIONAL COMPUTING CENTER\n.*             ONE WEST WILSON STREET - ROOM B253\n.*             P.O. BOX 7850\n.*             MADISON, WI. 53707-7850\n.*     PHONE - (608) 266-9525\n.*\n.*     NOTES - THIS MACRO WAS WRITTEN IN RESPONSE TO APAR OZ64211.\n.*             SEE INFO/MVS ENTRY E130403 FOR PARTICULARS.\n.*\n.*    CODING - THERE ARE THREE PARAMETERS USED BY THIS MACRO.\n.*             THE FIRST IS A POSITIONAL PARAMETER WHICH IS\n.*             USED FOR THE COMMAND OR CLIST NAME BEING ENTERED.\n.*             THE SECOND IS A KEYWORD PARAMETER WHICH REPRESENTS\n.*             TYPE OF ENTRY BEING REQUESTED.  \"TYPE\" MAY HAVE THE\n.*             VALUES OF \"COMMAND\", \"START\", OR \"END\".\n.*             \"TYPE=COMMAND\" IS THE DEFAULT.\n.*             THE THIRD IS A KEYWORD PARAMETER WHICH INDICATES THE\n.*             FLAG VALUES TO BE SET IN THE TABLE.  \"FLAGS\" MAY HAVE\n.*             THE VALUES OF \"CP\", \"CLIST\", \"NOLOG\", \"NOSPF\", AND\n.*             \"BLDL\".  \"FLAGS=CP\" IS THE DEFAULT.\n.*\n.*\n.*   EXAMPLE -\n.*             ISPTCM   TCMGEN ,TYPE=START\n.*             CMD001   TCMGEN TEST1,FLAGS=CP\n.*             CMD002   TCMGEN TEST2,FLAGS=(CP,NOLOG)\n.*             CMD003   TCMGEN TEST3,FLAGS=(CP,NOLOG,BLDL)\n.*             CMD004   TCMGEN TEST4\n.*             CMDEND   TCMGEN ,TYPE=END,FLAGS=BLDL\n.*                      END   ISPTCM\n.*\n         LCLA  &FLAGCNT,&TEMPCNT       COUNT OF FLAGS\n         GBLB  &BADFLG                 ERROR FLAG\n         GBLB  &STRTFLG                TYPE=START FLAG\n         LCLB  &BIT0,&BIT1,&BIT2,&BIT3 FLAG BITS 0-3\n         LCLB  &BIT4,&BIT5,&BIT6,&BIT7 FLAG BITS 4-7\n         LCLC  &CMDFLAG                COMMAND FLAG\n         LCLC  &CMDNAME                COMMAND FLAG\n&CMDFLAG SETC  '        '              INITIALIZE VARIABLE\n.*\n         AIF   ('&TYPE'(1,1) EQ 'C').DOCMD\n         AIF   ('&TYPE'(1,1) EQ 'S').DOSTART\n         AIF   ('&TYPE'(1,1) EQ 'E').DOEND\n         MNOTE  8,'WTCM001 - \"TYPE\" VALUE NOT START, END OR COMMAND'\n&BADFLG  SETB  1\n         MEXIT\n.*\n.DOSTART ANOP\n         AIF   (NOT &STRTFLG).DOSTRT1\n         MNOTE  8,'WTCM002 - MULTIPLE TYPE=START NOT ALLOWED'\n&BADFLG  SETB  1\n         MEXIT\n.*\n.DOSTRT1 ANOP\n&STRTFLG SETB  1                       INDICATE START HAS BEEN DONE\nISPTCM   CSECT\n         DC    CL8'ISPTCM'             MODULE AND CSECT NAME\n         DC    A(TABLSTRT)             OFFSET TO START OF TABLE\n         DC    C'DATE=&SYSDATE,TIME=&SYSTIME' DATE AND TIME STAMP\n         DC    D'0'                    SPACE AT FRONT OF TABLE\nTABLSTRT DS    0H                      START OF TABLE\n         SPACE\n         MEXIT\n.*\n.DOEND   ANOP\n         AIF   ('&COMMAND' EQ '').DOEND1\n         MNOTE  4,'WTCM003 - COMMAND NOT ALLOWED ON \"END\" - IGNORED'\n.*\n.DOEND1  ANOP\n&CMDNAME SETC  '99999999'              SETUP END OF TABLE ENTRY\n&LABEL   TCMGEN &CMDNAME,FLAGS=(&FLAGS)\n         MEXIT\n.*\n.DOCMD   ANOP\n         AIF   (&STRTFLG).DOCMD1\n         MNOTE  4,'WTCM004 - TYPE=START NOT SPECIFIED - DEFAULTING'\n         TCMGEN TYPE=START             FORCE TYPE=START\n.*\n.DOCMD1  ANOP\n         AIF   (N'&FLAGS EQ 0).ERCMD1  ZERO FLAGS NOT ALLOWED\n         AIF   (N'&FLAGS GT 5).ERCMD2  MAX OF 5 FLAGS ALLOWED\n         AGO   .DOCMD2\n.*\n.ERCMD1  ANOP\n         MNOTE  8,'WTCM005 - ZERO FLAGS NOT ALLOWED'\n&BADFLG  SETB  1\n         MEXIT\n.*\n.ERCMD2  ANOP\n         MNOTE  8,'WTCM006 - MORE THAN 5 FLAGS NOT ALLOWED'\n&BADFLG  SETB  1\n         MEXIT\n.*\n.DOCMD2  ANOP\n&FLAGCNT SETA  N'&FLAGS                GET NUMBER OF THE FLAGS\n&TEMPCNT SETA  0                       INITIALIZE FLAG COUNTER\n.*\n.DOFLGS  ANOP\n&TEMPCNT SETA  &TEMPCNT+1\n         AIF   (&TEMPCNT GT &FLAGCNT).ENDFLGS    ALL FLAGS DONE\n         AIF   ('&FLAGS(&TEMPCNT)' EQ 'NOLOG').NOLOG  BIT3\n         AIF   ('&FLAGS(&TEMPCNT)' EQ 'NOSPF').NOSPF  BIT4\n         AIF   ('&FLAGS(&TEMPCNT)' EQ 'CLIST').CLIST  BIT5\n         AIF   ('&FLAGS(&TEMPCNT)' EQ 'CP').CP        BIT6\n         AIF   ('&FLAGS(&TEMPCNT)' EQ 'BLDL').BLDL    BIT7\n         MNOTE  8,'WTCM007 - FLAG VALUE \"&FLAGS(&TEMPCNT)\" INVALID'\n&BADFLG  SETB  1\n         AGO   .DOFLGS\n.*\n.NOLOG   ANOP\n&BIT3    SETB  1                       SET THE NOLOG FLAG BIT\n         AGO   .DOFLGS\n.*\n.NOSPF   ANOP\n&BIT4    SETB  1                       SET THE NOSPF FLAG BIT\n         AGO   .DOFLGS\n.*\n.CLIST   ANOP\n&BIT5    SETB  1                       SET THE CLIST FLAG BIT\n         AGO   .DOFLGS\n.*\n.CP      ANOP\n&BIT6    SETB  1                       SET THE CP FLAG BIT\n         AGO   .DOFLGS\n.*\n.BLDL    ANOP\n&BIT7    SETB  1                       SET THE BLDL FLAG BIT\n         AGO   .DOFLGS\n.*\n.ENDFLGS ANOP\n         AIF   (&BADFLG).DOEXIT\n&CMDFLAG SETC  '&BIT0&BIT1&BIT2&BIT3&BIT4&BIT5&BIT6&BIT7'\n         AIF   ('&COMMAND' NE '99999999').DOCMD3\n&LABEL   DC    XL8'FFFFFFFFFFFFFFFF'   SETUP THE END OF TABLE\n         DC    BL1'&CMDFLAG'           SETUP THE COMMAND FLAG(S)\n         AGO   .DOEXIT\n.*\n.DOCMD3  ANOP\n&CMDNAME SETC  '&COMMAND'\n         AIF   ('&COMMAND' NE '').DOCMD4\n&CMDNAME SETC  '        '\n.*\n.DOCMD4  ANOP\n&LABEL   DC    CL8'&CMDNAME'           SETUP THE COMMAND NAME\n         DC    BL1'&CMDFLAG'           SETUP THE COMMAND FLAG(S)\n.*\n.DOEXIT  ANOP\n         SPACE\n         MEXIT\n.*\n.DOERROR ANOP\n         MNOTE 16,'WTCM099 - TERMINATING GEN DUE TO PREVIOUS ERRORS'\n         MEND\nISPTCM   TITLE  'ISPF COMMAND TABLE'\n*\n* START OF TABLE ENTRIES FOR ISPTCM\n*\nISPTCM   TCMGEN ,TYPE=START\n         SPACE 2\n*\n* ENTRIES THAT WILL BE KNOWN AS TSO COMMANDS TO ISPF\n*\nACF      TCMGEN ACF\nACFCOMP  TCMGEN ACFCOMP\nACFDEL   TCMGEN ACFDEL\nACFNRULE TCMGEN ACFNRULE\n         EJECT\n*\n* ENTRIES THAT WILL BE KNOWN AS TSO CLISTS TO ISPF\n*\n         SPACE\nASMSRC   TCMGEN ASMSRC,FLAGS=CLIST\nBYEBYE   TCMGEN BYEBYE,FLAGS=CLIST\nCALC     TCMGEN CALC,FLAGS=CLIST\nDUMPS    TCMGEN DUMPS,FLAGS=CLIST\nGDGUTIL  TCMGEN GDGUTIL,FLAGS=CLIST\nINFOMVS  TCMGEN INFOMVS,FLAGS=CLIST\nIPCS     TCMGEN IPCS,FLAGS=CLIST\nLIDS     TCMGEN LIDS,FLAGS=CLIST\nLSTDMPS  TCMGEN LSTDMPS,FLAGS=CLIST\nPF       TCMGEN PF,FLAGS=CLIST\nPRTSRC   TCMGEN PRTSRC,FLAGS=CLIST\nRMF      TCMGEN RMF,FLAGS=CLIST\nRSVP     TCMGEN RSVP,FLAGS=CLIST\nRULECHG  TCMGEN RULECHG,FLAGS=CLIST\nRULEPW   TCMGEN RULEPW,FLAGS=CLIST\nRULESCHG TCMGEN RULESCHG,FLAGS=CLIST\nTAPEINQ  TCMGEN TAPEINQ,FLAGS=CLIST\n         EJECT\n*\n* ENTRIES FOR COMMANDS THAT ARE NOT TO BE LOGGED UNDER ISPF\n*\nPROT     TCMGEN PROT,FLAGS=(CP,NOLOG)\nPROTECT  TCMGEN PROTECT,FLAGS=(CP,NOLOG)\n         EJECT\n*\n* ENTRIES FOR COMMANDS THAT ARE NOT TO BE ENTERED UNDER ISPF\n*\nISPF     TCMGEN ISPF,FLAGS=NOSPF\nISPSTART TCMGEN ISPSTART,FLAGS=NOSPF\nPDF      TCMGEN PDF,FLAGS=NOSPF\nSPF      TCMGEN SPF,FLAGS=NOSPF\nTEST     TCMGEN TEST,FLAGS=NOSPF\nLOGON    TCMGEN LOGON,FLAGS=NOSPF\nLOGOFF   TCMGEN LOGOFF,FLAGS=NOSPF\n         EJECT\n*\n* ENTRIES THAT WILL REQUIRE A BLDL FROM ISPF\n*\n         EJECT\n*\n* 10 ADDITIONAL ENTRIES AVAILABLE TO BE ZAPPED IN IF NECESSARY\n*\nEXTRA01  TCMGEN\nEXTRA02  TCMGEN\nEXTRA03  TCMGEN\nEXTRA04  TCMGEN\nEXTRA05  TCMGEN\nEXTRA06  TCMGEN\nEXTRA07  TCMGEN\nEXTRA08  TCMGEN\nEXTRA09  TCMGEN\nEXTRA10  TCMGEN\n         EJECT\n*\n* END OF TABLE  INDICATOR WITH DEFAULT OF BLDL\n*\nCMDEND   TCMGEN ,TYPE=END,FLAGS=BLDL\n         SPACE 2\n         END   ISPTCM\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LASTIPL": {"ttr": 5377, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x00B\\x00B\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 66, "newlines": 66, "modlines": 0, "user": "WSRCC"}, "text": "         PRINT NOGEN                                                    00001\nLASTIPL  BEGIN AUTHOR=JAM,SAVE=(WORKAREA,WORKLENG,0)                    00002\n         SPACE                                                          00003\n         MVC   TIMCMSG(40),CMESSAGE    MOVE MESSAGE TO WORKAREA         00004\n         MVC   TIMIMSG(40),IMESSAGE    MOVE MESSAGE TO WORKAREA         00005\n         L     R2,X'10'                POINT AT CVT ADDRESS             00006\n         L     R2,X'CC'(0,R2)          LOAD CVTUSER ADDRESS             00007\n         LTR   R2,R2                   IF USERCVT EXISTS                00008\n         BNZ   CHKWCVT                    THEN CHECK FOR WSRCCCVT       00009\n         MVC   TIMIMSG(40),NOUSRCVT    MOVE IN NO UCVTMSG MESSAGE       00010\n         B     PUTITIME                GO ISSUE MESSAGE                 00011\n         SPACE                                                          00012\nCHKWCVT  EQU   *                                                        00013\n         CLC   X'40'(8,R2),WSRCCCVT    IF WSRCCCVT INSTALLED            00014\n         BE    FMTITIME                   THEN FORMAT IPL MESSAGE       00015\n         MVC   TIMIMSG(40),NOWSRCVT    MOVE IN NO WSRCCCVT MESSAGE      00016\n         B     PUTITIME                GO ISSUE MESSAGE                 00017\n         SPACE                                                          00018\nFMTITIME EQU   *                                                        00019\n         LA    R2,X'48'(0,R2)          POINT AT IPL TIME AND DATE       00020\n         MVC   IPLTIME(8),0(R2)        MOVE IPLTIME TO WORKAREA         00021\n         ED    TIMIMSG+MITOFF(12),IPLTIME       EDIT IN THE TIME        00022\n         ED    TIMIMSG+MIDOFF(08),IPLDATE+1     EDIT IN THE DATE        00023\n         SPACE                                                          00024\nPUTITIME EQU   *                                                        00025\n         TPUT  TIMIMSG,40              ISSUE THE MESSAGE TO USER        00026\n         LTR   R15,R15                 CHECK RETURN CODE                00027\n         BNZ   FINISH                  BRANCH IF NOT GOOD               00028\n         TIME  DEC                     GET CURRENT TIME                 00029\n         STM   R0,R1,NOWTIME           PUT CURRENT TIME IN WORKAREA     00030\n         ED    TIMCMSG+MCTOFF(12),NOWTIME       EDIT IN THE TIME        00031\n         ED    TIMCMSG+MCDOFF(08),NOWDATE+1     EDIT IN THE DATE        00032\n         TPUT  TIMCMSG,40              ISSUE THE MESSAGE TO USER        00033\n         SPACE                                                          00034\nFINISH   EQU   *                                                        00035\n         FINISH RC=(R15)               RETURN TO CALLER                 00036\n         EJECT                                                          00037\nCMESSAGE DS    0CL40                                                    00038\n         DC    CL18'CURRENT TIME-DATE:'                                 00039\nMSGCTME  DC    XL13'4021207A20207A20204B202040'                         00040\nMSGCDTE  DC    XL09'4021204B2020204040'                                 00041\nMCTOFF   EQU   MSGCTME-CMESSAGE                                         00042\nMCDOFF   EQU   MSGCDTE-CMESSAGE                                         00043\n         SPACE                                                          00044\nIMESSAGE DS    0CL40                                                    00045\n         DC    CL18'THE LAST IPL WAS: '                                 00046\nMSGITME  DC    XL13'4021207A20207A20204B202040'                         00047\nMSGIDTE  DC    XL09'4021204B2020204040'                                 00048\nMITOFF   EQU   MSGITME-IMESSAGE                                         00049\nMIDOFF   EQU   MSGIDTE-IMESSAGE                                         00050\n         SPACE                                                          00051\nWSRCCCVT DC    CL08'WSRCCCVT'          WSRCC CVT LITERAL                00052\nNOUSRCVT DC    CL40'LAST IPL TIME NOT AVAILABLE, NO USER CVT'           00053\nNOWSRCVT DC    CL40'LAST IPL TIME NOT AVAILABLE, NO WSRCCCVT'           00054\n         SPACE 2                                                        00055\nWORKAREA DSECT                                                          00056\nSAVEAREA DS    18F                     OS SAVEAREA                      00057\nIPLTIME  DS    F                       IPL TIME FROM USERCVT            00058\nIPLDATE  DS    F                       IPL DATE FROM USERCVT            00059\nNOWTIME  DS    F                       CURRENT TIME                     00060\nNOWDATE  DS    F                       CURRENT DATE                     00061\nTIMCMSG  DS    CL40                    CURRENT TIME & DATE MESSAGE      00062\nTIMIMSG  DS    CL40                    LAST IPL TIME & DATE MESSAGE     00063\nWORKLENG EQU   *-WORKAREA              LENGTH OF WORK AREA              00064\n         SPACE 2                                                        00065\n         END                                                            00066\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRINTOFF": {"ttr": 5379, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x0b\\x00\\x0b\\x00\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 2816, "newlines": 2816, "modlines": 0, "user": "WSRCC"}, "text": "         TITLE 'IPO-SUPPLIED PRINT COMMAND (WITH MANY MODIFICATIONS)   C\n               WSRCC VERSION 14'\n         PRINT ON,GEN\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = PRINTOFF                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME =  IPO SUPPLIED PRINT COMMAND FOR      *\n*                TSO FOREGROUND EXECUTION - HEAVILY MODIFIED!         *\n*                                                                     *\n*             COPYRIGHT = NONE                                        *\n*                                                                     *\n*             STATUS = WSRCC VERSION 14.                              *\n*                                                                     *\n*             FUNCTION =                                              *\n*                PRINTS A DATASET(S) WHICH IS SEQUENTIAL OR PARTIONED *\n*                ALLOWING THE USER TO SPECIFY OUTPUT CLASS, COPIES,   *\n*                DESTINATION AND HOLD/NOHOLD.  ALSO ALLOWS THE USER   *\n*                TO SPECIFY LIST/NOLIST, PRINT/NOPRINT, VOLUME,       *\n*                OR FOLD/NOFOLD.                                      *\n*                LIST IF PDS MEMBER NAMES ARE ONLY TO BE LISTED.      *\n*                PRINT IF PDS MEMBERS ARE ONLY TO BE PRINTED.         *\n*                                                                     *\n*                OPERATION =                                          *\n*                   BUILD PARS, DAIR, AND PUTLINE PARAMETER LISTS.    *\n*                   CALL PARS TO PARSE COMMAND BUFFER.                *\n*                   ALLOCATE DATASET AND DETERMINE IF PDS OR          *\n*                      SEQUENTIAL.                                    *\n*                   DETERMINE WHAT FUNCTIONS WERE TO BE PERFORMED     *\n*                      FOR THIS DATASET IF PDS.                       *\n*                   ALLOCATE SYSOUT DATASETS WHEN SOMETHING IS        *\n*                      FOUND TO BE PRINTED.                           *\n*                   PROCESS NEXT DATASET IN LIST.                     *\n*                   AT END OF LIST CLOSE DATASETS AND FREE ANY        *\n*                      SYSOUT DATASETS.                               *\n*                   DATSETS WILL BE PRINTED AS EITHER VBA OR VBM.     *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE *\n*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          *\n*                                                                     *\n*                 RESTRICTIONS = DATASETS MUST HAVE LRECL LESS THAN   *\n*                    255 AND MUST BE EITHER FIXED OR VARIABLE FORMAT. *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 9  = WORK REGISTERS               *\n*                    REGISTERS 10 - 12 = ADDRESSABILITY TO PRINTOFF   *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        *\n*                   'ZAP*'S)                                          *\n*                                                                     *\n*                TSO COMMAND SYNTAX = PRINTOFF ('DSLIST')             *\n*                            CLASS('CLASS') DEST('REMOTE')            *\n*                            COPIES('NNN') HOLD/NOHOLD LIST/NOLIST    *\n*                            PRINT/NOPRINT FORMS('FORM') UCS('IMAGE') *\n*                            PROG('NAME') FCB('FCBNAME')              *\n*                            HEADDING/NOHEADDING                      *\n*                            CCTL/CCTL('CODE')/NOCCTL CAPS/ASIS       *\n*                            VOLUME('VOLSER') TEXT KEEP/DELETE PDS    *\n*                            NOLINES/LINES('LINES')                   *\n*                            EJECT/NOEJECT('LINES') ARR(###)          *\n*                            START('NNNNNN') STOP('NNNNNN')           *\n*                            COUNT('NNNN') TITLE(' TITLE ') DUPLEX    *\n*                            NUMBER EXPRESS DOUBLE TRIPLE             *\n*                            CHARS=(SET1,SET2,SET3,SET4) TRC(Y/N)     *\n*                            MODIFY=(GRAPHMOD-ID) MODTRC=(TRC-ID)     *\n*                            FLASH=(FLASH-NAME) FCOUNT=(FLASH-COUNT)  *\n*                            BURST(Y/N)                               *\n*                                                                     *\n*             MODULE TYPE = PROCEDURE                                 *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = ???K BYTES                             *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 8, REENTRANT,             *\n*                   PROBLEM PROGRAM STATE                             *\n*                                                                     *\n*             ENTRY POINTS = PRINTOFF (ONLY ENTRY POINT)              *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM TERMINAL MONITOR PROGRAM AS A COMMAND        *\n*                                                                     *\n*             INPUT = REGISTER 1 POINTS TO COMMAND PROCESSOR          *\n*                PARAMETER LIST MAPPED BY IKJCPPL MACRO               *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXIT - ERROR = NONE - PROGRAM WILL DISPLAY DECIMAL      *\n*                RETURN CODE AND RETURN VIA BRANCH REGISTER 14        *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = IKJPARS, DAIRFAIL, GNRLFAIL, PUTLINE      *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = CPPL, PPL, DAPL, DCB, DAPB, CVT,    *\n*                   S99RBP, S99RB, S99TUPL, S99TUNIT, S99TUFLD,       *\n*                   GFPARMS, DFPARMS, IOPL, IOPB                      *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL RDATD.                            *\n*                                                                     *\n*             MACROS = SAVE, GETMAIN, CALLTSSR, LINK, TPUT, FREEMAIN, *\n*                   OPEN, PUT, GET, CLOSE, RDJFCB, IKJRLSA, DYNALLOC, *\n*                   DCB, IKJPARM, IKJPOSIT, IKJKEYWD, IKJNAME,        *\n*                   IKJSUBF, IKJIDENT, IKJENDP, IKJDAP08, IKJDAP18,   *\n*                   IKJDAPL, IKJCPPL, IKJPPL, CVT, IEFZB4D0, IKJIOPL, *\n*                   IEFZB4D2, DCBD, IKJEFFGF, IKJEFFDF, PUTLINE       *\n*             WSRCC MACROS = BEGIN, FINISH                            *\n*                                                                     *\n*  ********** CHANGE ACTIVITY:                        **************  *\n*         1.  JOE MARTIN - 04/19/79 - ID.JM#1                         *\n*             ADDITION OF DATE AND TIME TO HEADING LINES.             *\n*                                                                     *\n*         2.  TOM FOTH   - 02/21/81 - ID.TF#1                         *\n*             ADDED KEYWORDS NOCCTL AND CCTL TO OVERRIDE CARRIAGE     *\n*             CONTROL OF INPUT DATASET                                *\n*                                                                     *\n*         3.  TOM FOTH   - 02/21/81 - ID.TF#2/JM#1                    *\n*             CORRECTED MOD 1.                                        *\n*                                                                     *\n*         4.  TOM JARVIS - 07/07/82 - ID.TJ#1                         *\n*             ADDITION OF:                                            *\n*               A) DELETE/KEEP KEYWORD - KEEP OR DELETE DATASET AFTER *\n*                                        PRINTING.                    *\n*               B) PDS KEYWORD   - WILL ONLY PRINT PDS IF THE         *\n*                                        PDS KEYWORD IS PRESENT.      *\n*               C) EJECT/NOEJECT KEYWORD                              *\n*                   EJECT   - EJECTS AT BEGINNING OF EVERY DATASET.   *\n*                             FIRST EJECT IS SKIPPED IF ARR SPECIFIED.*\n*                   NOEJECT(#) - NO EJECT ON FIRST DATASET AND '#'    *\n*                                BLANK LINES BETWEEN DATASETS.        *\n*                                (NOEJECT(4) IS THE DEFAULT).         *\n*               D) ADDED CODE TO CHANGE CARRAIGE CONTROL CODE TO      *\n*                  TRY AND PREVENT BLANK PAGES FROM THE 6670.         *\n*                                                                     *\n*         5.  TOM JARVIS - 07/15/82 - ID.TJ#2                         *\n*             ADDITION OF:                                            *\n*                A) ARR(###) PARAMETERS - USED TO SPECIFY             *\n*                            A 6670 ARRANGEMENT TO BE USE BY DATASET. *\n*                B) NOLINES/LINES(##) - USED TO SPECIFY THE NUMBER    *\n*                            OF LINES ON A PAGE OF OUTPUT, NOLINES    *\n*                            SPECIFIES THAT THERE SHOULD NOT BE A PAGE*\n*                            BREAK, AND LINES(##) SPECIFIES HOW MANY  *\n*                            LINES TO PRINT ON A PAGE. NOLINES IS THE *\n*                            DEFAULT . LINES MUST BE GREATER THAN 3   *\n*                            AND ARE IGNORED IF OUTPUT USES CC.       *\n*                                                                     *\n*         6.  TOM JARVIS - 07/19/82 - ID.TJ#3                         *\n*             ADDITION OF:                                            *\n*                A) CORRECTION TO UPDATES ABOVE.                      *\n*                B) TITLE(' TITLE ') PARM  - USED TO SPECIFY A TITLE  *\n*                     TO REPLACE HEADING, IGNORED IF NOHEAD IS CODED. *\n*                                                                     *\n*         7.  TOM JARVIS - 08/20/82 - ID.TJ#4.                        *\n*             ADDITION OF:                                            *\n*                A) COUNT(##) PARM - PRINT ONLY ## RECORDS            *\n*                B) START(##) PARM - START PRINT AFTER ## RECORDS     *\n*                C) STOP(##) PARM  - STOP PRINTING ON RECORD ##       *\n*                D) DUPLEX PARM    - ONLY IF ARR SPECIFIED, ADD       *\n*                                    'DUP 1' TO ARRANGEMENT           *\n*                E) IF ARR IS SPECIFIED THE COPIES IS PUT INTO THE    *\n*                   ARRANGEMENT.                                      *\n*                                                                     *\n*         8.  TOM JARVIS - 08/31/82 - ID.TJ#5                         *\n*             ADDITION OF:                                            *\n*                A) NUMBER - USED ONLY IF ARR IS SPECIFIED,           *\n*                            ARRANGEMENT LINE ADDED TO SPECIFY PAGE   *\n*                            NUMBERING.                               *\n*                B) EXPRESS - USED ONLY IF ARR IS SPECIFIED,          *\n*                            ARRANGEMENT LINE ADDED TO SPECIFY SENDING*\n*                            OUTPUT TO 6670 IN EXPRESS MODE.          *\n*                                                                     *\n*         9.  TOM JARVIS - 09/14/82 - ID.TJ#6                         *\n*             ADDITION OF:                                            *\n*                A) CORRECTION OF PROBLEM WITH TJ#3                   *\n*                B) DOUBLE - INDICATES THAT THE OUTPUT SHOULD BE      *\n*                            DOUBLE SPACED (CC IS IGNORED).           *\n*                C) TRIPLE - INDICATES THAT THE OUTPUT SHOULD BE      *\n*                            TRIPLE SPACED (CC IS IGNORED).           *\n*                                                                     *\n*         10. TOM JARVIS - 09/28/82 - ID.TJ#7                         *\n*             ADDITION OF:                                            *\n*               A) CORRECTION OF PROBLEM WITH BLANK LINES AND         *\n*                  VARIABLE LENGTH FILES WHEN PRINTING WITH FORCED CC.*\n*                                                                     *\n*         11. TOM JARVIS - 10/25/82 - ID.TJ#8                         *\n*             ADDITION OF:                                            *\n*               A) CORRECTION OF PROBLEM WITH USING 6670 ARRANGEMENT  *\n*                  AND PRINTING MEMBERS OF A PDS.                     *\n*               B) CORRECTION OF PROBLEM WITH USING 6670 ARRANGEMENT  *\n*                  AND EJECT.                                         *\n*               C) ADDED PUTLINE MESSAGE WITH PRINTED LINE TOTAL.     *\n*                                                                     *\n*         12. TOM JARVIS - 08/24/83 - ID.TJ#9                         *\n*             I COMMENTED OUT ALL CODE DEALING WITH ARRANGEMENTS AND  *\n*             QUANTITY (COPIES) DUE TO PROBLEMS WITH BILLING, WE      *\n*             CANNOT CAPTURE QUANTITIES IN SMF RECORDS.               *\n*             LOCAL GEN OPTION ONLY                              JM#14*\n*                                                                     *\n*                                                                     *\n*         13. TOM JARVIS - 11/22/83 - ID.TJ#10                        *\n*             INCREMENTED START AND STOP SIZES.                       *\n*                                                                     *\n*                                                                     *\n*         14. JOE MARTIN - 09/25/84 - ID.JM#14                        *\n*             ADDING SUPPORT FOR 3800 PRINTERS:                       *\n*                CHARS=(SET1,SET2,SET3,SET4)       USING SETPRT       *\n*                MODIFY=(GRAPHMOD-ID)              USING SETPRT       *\n*                MODTRC=(TRC-ID)                   USING SETPRT       *\n*                FLASH=(FLASH-NAME)                USING SETPRT       *\n*                FCOUNT=(FLASH-COUNT)              USING SETPRT       *\n*                BURST(Y|N)                        USING SETPRT       *\n*                TRC(Y|N) - IMPLIES DCB=OPTCD=J    USING SETPRT       *\n*                CGROUP=(GROUP1,GROUP2,GROUP3,...) USING ALLOCATION   *\n*             ADDED LOCAL CONDITIONAL ASSEMBLEY FOR SOME FUNCTIONS    *\n*             AS THOSE FUNCTIONS ARE EITHER CURRENTLY UNUSED OR       *\n*             RESTRICTED FOR GENERAL USAGE. (SEE #12 ABOVE).          *\n*             ADDED \"BEGIN\" AND \"FINISH\" MACROS.                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  **********  END CHANGE ACTIVITY LOG                **************  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                BOTH THE DARIFAIL AND GNRLFAIL SERVICE ROUTINES ARE  *\n*                USED TO ISSUE MESSAGES.                              *\n*                THOSE ISSUED BY THE COMMAND ARE FOUND FOLLOWING THE  *\n*                LABEL GNRLERR AND ARE ISSUED USING PUTLINE.          *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\n         EJECT 1                                                 JM#14\n         LCLA  &LGENOPT                FLAG FOR LOCAL GEN OPTNS. JM#14\n&LGENOPT SETA  1                                                 JM#14\n*LGENOPT SETA  1                       1 - INDICATES FULL GEN.   JM#14\n*LGENOPT SETA  0                       0 - INDICATES PARTIAL     JM#14\n         SPACE 1                                                 JM#14\nPRINTOFF BEGIN SAVE=(WORKAREA,LDYNAMIC,0),BASE=(R12,R11,R10),    JM#14 X\n               AUTHOR=IPO,VER=014,GEN=GEN,                       JM#14 X\n               TITLE='IPO-SUPPLIED PRINT COMMAND (WITH MANY MODIFICATIOX\n               NS) - WSRCC VERSION 14'                           JM#14\n         LR    R8,R1                   LOAD REGISTER 8 TO PRESERVE\n         SPACE 1                                                 JM#14\n         L     R2,16                   LOAD ADDRESS OF CVT         TJ#3\n         L     R2,0(R2)                LOAD ADDRESS OF TCB'S       TJ#3\n         L     R2,4(R2)                LOAD ADDRESS OF CURRENT TCB TJ#3\n         L     R2,12(R2)               LOAD ADDRESS OF TIOT        TJ#3\n         MVC   DPID(8),0(R2)           GET JOB NAME                TJ#3\n         MVC   DPIDOUT(19),BLANKS      BLANK OUT DPID AREA         TJ#3\n*\n***********************************************************************\n*                                                                     *\n*        BUILD PARSE AND DAIR PARAMETER LISTS USING COMMAND           *\n*           PROCESSOR PARAMETER LIST                                  *\n*        INITIALIZE OUTPUT DATA CONTROL BLOCKS IN WORKAREA            *\n*                                                                     *\n***********************************************************************\n*\n         USING CPPL,R8                 ESTABLISH ADDRESSABILITY TO CPPL\n         LA    R4,PPLSECT              LOAD ADDRESS OF PARSE PARM LIST\n         USING PPL,R4                  ESTABLISH ADDRESSABILITY TO PPL\n         LA    R6,DAPLSECT             LOAD ADDRESS OF DAIR PARM LIST\n         USING DAPL,R6                 ESTABLISH ADDRESSABILITY TO DAPL\n         LA    R5,IOPLSECT             LOAD ADDRESS OF PUTLINE PARM LST\n         USING IOPL,R5                 ESTABLISH ADDRESSABILITY TO IOPL\n         L     R1,CPPLUPT              LOAD POINTER TO UPT FROM CPPL\n         L     R2,CPPLECT              LOAD POINTER TO ECT FROM CPPL\n         SLR   R3,R3                   ZERO REGISTER 3\n         ST    R3,ECB                  STORE REGISTER AS ECB FOR PPL\n         LA    R3,ECB                  LOAD ADDRESS OF ECB\n         STM   R1,R3,DFPLSECT          STORE UPT,ECT,ECB IN DFPL  GTE\n         STM   R1,R3,PPLSECT           STORE ADDRESS OF UPT, ECT, AND\n*                                      ECB IN PPL\n         STM   R1,R3,DAPLSECT          STORE ADDRESS OF UPT, ECT, AND\n*                                      ECB IN DAPL\n         STM   R1,R3,IOPLSECT          STORE ADDRESS OF UPT, ECT, AND\n*                                      ECB IN IOPL\n         LA    R3,IOPB                 LOAD ADDRESS OF PUTLINE PARM BLK\n         ST    R3,IOPLIOPB             STORE IOPB ADDRESS IN IOPL\n         LA    R3,DFPBSECT             GET ADDRESS OF DFPB     GTE\n         ST    R3,DFPLSECT+12          PUT IT IN THE CONTROL BLOCK GTE\n         USING  DFPB,R3                                      GTE\n         LA     R2,DFPBDSL                                   GTE\n         ST     R2,DFPBDSN                                   GTE\n         LA     R2,DFPBQUA                                   GTE\n         ST     R2,DFPBQUAL                                  GTE\n         MVI    DFPBCODE,DFPB04                              GTE\n         MVC    DFPBPSCB,CPPLPSCB                            GTE\n         MVI    DFPBCNTL,DFPBRET                             GTE\n         XC     DFPBCAT(8),DFPBCAT                           GTE\n         DROP    R3                                          GTE\n         MVC   PPLPCL,PCLADDR          MOVE POINTER TO PARAMETER\n*                                      CONTROL LIST INTO PPL\n         LA    R2,PARSBACK             LOAD ADDRESS OF FULLWORD TO\n*                                      CONTAIN ADDRESS OF PDE FROM PARS\n         ST    R2,PPLANS               STORE POINTER TO RETURN ADDRESS\n         MVC   PPLCBUF,CPPLCBUF        MOVE POINTER TO COMMAND BUFFER\n*                                      INTO PPL\n         LA    R2,PPLUWA               LOAD ADDRESS OF USER WORK AREA\n         ST    R2,PPLUWA               STORE ADDRESS IN PPL\n         MVC   DAPLPSCB,CPPLPSCB       MOVE POINTER TO PSCB INTO DAPL\n         DROP  R4,R5,R6,R8             DROP ADDRESSABILITY TO CPPL,\n*                                      IOPL, DAPL, AND PPL\n         MVC   OUTPUTA(OUTPUTAL),OUTPUTAC  MOVE ASA DCB CONSTANT INTO\n*                                      ASA DCB IN WORKAREA\n         MVC   OUTPUTM(OUTPUTML),OUTPUTMC  MOVE MACHINE DCB CONSTANT\n*                                      INTO MACHINE DCB IN WORKAREA\n*\n***********************************************************************\n*                                                                     *\n*        CALLTSSR TO PARSE (ENTRY NAME IKJPARS)                       *\n*        ON RETURN PARSBACK -> PDL                                    *\n*        HANDLE ALL ERROR CODES RETURNED BY PARS                      *\n*        IF NECESSARY CALL GENERAL FAIL SERVICE ROUTINE               *\n*                                                                     *\n***********************************************************************\n*\n         CALLTSSR  EP=IKJPARS,MF=(E,PPLSECT)\n*                                      CALL PARS TO PARSE COMMAND\n         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO\n         BZ    GOODPARS                YES....GO TO GOOD PARS ROUTINE\n         C     R15,FULL4               SEE IF RETURN CODE IS FOUR\n         BE    RETURN                  YES....PARS ISSUED ERROR\n*                                      MESSAGE.  GO CLEANUP AND RETURN\n         C     R15,FULL20              SEE IF RETURN CODE IS TWENTY\n         BE    RETURN                  YES....VALIDITY CHECKING\n*                                      ROUTINE ISSUED ERROR MESSAGE.\n*                                      GO CLEANUP AND RETURN\n         XC    GFPARMS(GFLENGF),GFPARMS  INITIALIZE PARMLIST FOR\n*                                      GENERAL FAIL TO ZEROS\n         LA    R1,GFPARMS              LOAD ADDRESS OF PARMLIST\n         ST    R1,GFPARMP              STORE ADDRESS AS POINTER TO\n*                                      PARMLIST\n         ST    R15,GFRCODE             STORE RETURN CODE IN PARMLIST\n         LA    R1,GFPARSE              LOAD CALLER ID FOR PARS\n         STH   R1,GFCALLID             STORE CALLER ID IN PARMLIST\n         L     R1,SAVEAREA+4           LOAD ADDRESS OF PEVIOUS SAVEAREA\n         L     R1,24(R1)               LOAD POINTER TO CPPL\n         ST    R1,GFCPPLP              STORE POINTER TO CPPL IN PRMLIST\n         LA    R1,ECB                  LOAD ADDRESS OF OPTIONAL ECB\n         ST    R1,GFECBP               STORE POINTER TO ECB IN PARMLIST\n         SLR   R1,R1                   ZERO REGISTER 1\n         ST    R1,ECB                  SET OPTIONAL ECB TO ZERO\n         LINK  EP=IKJEFF19,MF=(E,GFPARMP)  LINK TO GENERAL FAIL SERVICE\n*                                      ROUTINE TO HANDLE RETURN CODE\n         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO\n         BZ    RETURN                  YES....GO CLEANUP AND RETURN\n         LR    R8,R15                  LOAD REGISTER 8 WITH RETURN\n         BAL   R14,SETCODE             GO CONVERT CODE TO DECIMAL\n         PUTLINE OUTPUT=(GNRLERR,SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      GENERAL FAIL ERROR MESSAGE\n         PUTLINE OUTPUT=(RETNCD,SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      DECIMAL RETURN CODE\n         B     RETURN                  GO CLEANUP AND RETURN\n*\n***********************************************************************\n*                                                                     *\n*        SET UP ADDRESSABILITY TO PDL                                 *\n*           AND LOAD REGISTER 6 WITH ADDRESS OF DSNAME PDE            *\n*                                                                     *\n***********************************************************************\n*\nGOODPARS DS    0H\n         L     R9,PARSBACK             LOAD POINTER TO PARS ANSWER\n         USING IKJPARMD,R9             ESTABLISH ADDRESSABILITY TO PDL\n         MVC   CCTLKEY,PCCTL           SAVE THE CCTL KEYWORD NUM   TF#1\n         MVC   CTYPKEY,CCTLTYP         SAVE THE CC TYPE KEYWORD    TF#1\n         LA    R6,DSNAMES              LOAD POINTER TO DSNAME LIST\n         MVI   VOLBIT,BLANK            BLANK OUT THE VOLUME WORK AREA\n         MVC   VOLUME,VOLBIT           CONTINUE BLANKING THE VOLUME\n         MVC   LINMSGH(LINMSGL),LINMSG SET UP TOTAL LINES MESSAGE  TJ#8\n         MVI   CCFLAG,C'Y'             SET CC FLAG FOR CC          TJ#2\n         MVI   FIRSTFL,C'F'            SET FLAG FOR FIRST PASS     TJ#1\n         MVI   REPCC,C'N'           SET FLAG FOR NO REPLACEMENT CC TJ#6\n         CLC   PEJECT(2),HALF1         CHECK FOR    EJECT          TJ#1\n         BNE   CHCKEJCT               GO CHECK WHICH NO EJECT TYPE TJ#1\n         MVI   EJECTFL,C'E'            SET EJECT FLAG FOR EJECT    TJ#1\n         B     CHCKLNS                 GO TO CHECK VOLUME          TJ#1\nPACKEJCT PACK  DEC(8),0(0,R7)                                      TJ#1\nCHCKEJCT DS    0H                                                  TJ#1\n         MVI   EJECTFL,C'F'            SET EJECT FLAG FOR FIRST    TJ#1\n         L     R7,NOEJKEY              LOAD POINTER TO EJECT FIELD TJ#1\n         LH    R4,NOEJKEY+4            LOAD LENGTH OF EJECT FIELD  TJ#1\n         BCTR  R4,0                    DECREMENT R4 FOR EX OF PACK TJ#1\n         EX    R4,PACKEJCT             EX PACK TO CONVERT EJECT    TJ#1\n*                                      TO PACKED DECIMAL           TJ#1\n         CVB   R4,DEC                  CONVERT PACKED TO BINARY    TJ#1\n         ST    R4,EJECTNM              STORE NUMBER INTO EJECTNM   TJ#1\nCHCKLNS  DS    0H                                                  TJ#2\n         ZAP   NLINES(3),=P'0'         ZERO NLINES                 TJ#2\n         ZAP   HLINES(9),=P'0'         ZERO HLINES                 TJ#2\n         ZAP   TLINES(9),=P'0'         ZERO TOTAL LINES PRINTED    TJ#4\n         ZAP   GTLINES(9),=P'0'        ZERO GRAND TOTAL OF LINES   TJ#8\n         ZAP   TRECDS(9),=P'0'         ZERO TOTAL RECORDS READ     TJ#4\n         ZAP   STARTP(6),=P'0'         ZERO START POINT            TJ#4\n         ZAP   STOPP(6),=P'0'          ZERO STOP POINT             TJ#4\n         ZAP   COUNTP(4),=P'0'         ZERO RECORD TO PRINT COUNT  TJ#4\n         CLC   PLINES(2),HALF1         CHECK FOR NOLINES           TJ#2\n         BE    CHKSTART           IF NOLINES THEN GOTO CHK START   TJ#2\n         L     R7,LINNUMB              LOAD POINTER TO LINES FIELD TJ#2\n         LH    R4,LINNUMB+4            LOAD LENGTH OF LINES FIELD  TJ#2\n         BCTR  R4,0                    DECREMENT R4 FOR EX OF PACK TJ#2\n         EX    R4,PACKLINS             EX PACK TO CONVERT LINES    TJ#2\n         CP    NLINES,=P'4'            MAKE SURE AT LEAST 4 LINES  TJ#2\n         BL    BADLINS                 ITS BAD, BRANCH TO PRT MSG  TJ#2\n         B     CHKSTART                ITS OK, BRANCH TO CHK START TJ#2\nPACKLINS PACK  NLINES(3),0(0,R7)                                   TJ#2\nCHKSTART DS    0H                                                  TJ#4\n         CLC   PSTART(2),HALF1         CHECK FOR START             TJ#4\n         BNE   CHKSTOPP           IF NO STOP  THEN CHECK STOP      TJ#4\n         L     R7,STARTNUM             LOAD POINTER TO START FIELD TJ#4\n         LH    R4,STARTNUM+4           LOAD LENGTH OF START FIELD  TJ#4\n         BCTR  R4,0                    DECREMENT R4 FOR EX OF PACK TJ#4\n         EX    R4,PACKSTRT             EX PACK TO CONVERT START    TJ#4\n         B     CHKSTOPP                        BRANCH TO CHK STOP  TJ#4\nPACKSTRT PACK  STARTP(6),0(0,R7)                                   TJ#4\nCHKSTOPP DS    0H                                                  TJ#4\n         CLC   PSTOP(2),HALF1         CHECK FOR STOP               TJ#4\n         BNE   CHKCNTP            IF NO START THEN CHECK COUNT     TJ#4\n         L     R7,STOPNUM              LOAD POINTER TO STOP  FIELD TJ#4\n         LH    R4,STOPNUM+4            LOAD LENGTH OF STOP  FIELD  TJ#4\n         BCTR  R4,0                    DECREMENT R4 FOR EX OF PACK TJ#4\n         EX    R4,PACKSTOP             EX PACK TO CONVERT STOP     TJ#4\n         B     CHKCNTP                         BRANCH TO CHK COUNT TJ#4\nPACKSTOP PACK  STOPP(6),0(0,R7)                                    TJ#4\nCHKCNTP  DS    0H                                                  TJ#4\n         CLC   PCOUNT(2),HALF1        CHECK FOR COUNT              TJ#4\n         BNE   CHCKDUB            IF NO COUNT THEN CHECK DOUBLE    TJ#6\n         L     R7,COUNTNUM             LOAD POINTER TO COUNT FIELD TJ#4\n         LH    R4,COUNTNUM+4           LOAD LENGTH OF COUNT FIELD  TJ#4\n         BCTR  R4,0                    DECREMENT R4 FOR EX OF PACK TJ#4\n         EX    R4,PACKCNTP             EX PACK TO CONVERT COUNT    TJ#4\n         B     CHCKDUB                        BRANCH TO CHK DOUBLE TJ#6\nPACKCNTP PACK  COUNTP(4),0(0,R7)                                   TJ#4\nCHCKDUB  DS    0H                                                  TJ#6\n         CLC   PDOUBLE(2),HALF1        SEE IF DOUBLE SPECIFIED     TJ#6\n         BNE   CHKTRIP                 NO, SEE IF TRIPLE SPECIFIED TJ#6\n         MVI   REPCC,C'D'              SET FLAG FOR DOUBLE CC      TJ#6\nCHKTRIP  DS    0H                                                  TJ#6\n         CLC   PTRIPLE(2),HALF1        SEE IF TRIPLE SPECIFIED     TJ#6\n         BNE   CHCKVOL                 NO, SEE IF VOLUME SPECIFIED TJ#6\n         MVI   REPCC,C'T'              SET FLAG FOR TRIPLE CC      TJ#6\nCHCKVOL  DS    0H                                                  TJ#4\n         CLC   PVOL(2),HALF1           SEE IF VOLUME SPECIFIED\n         BNE   CHKFOLD                 NO.....GO SEE IF FOLD IS DESIRED\n         L     R7,SVOL                 LOAD POINTER TO VOLUME\n         LH    R8,SVOL+4               LOAD LENGTH OF VOLUME\n         BCTR  R8,0                    DECREMENT R8 FOR EX OF MOVE\n         EX    R8,MOVEVOL              MOVE VOLUME INTO WORK AREA\n         OI    VOLBIT,HIGH             INDICATE VOLUME PRESENT\nCHKFOLD  DS    0H\n         CLC   PFOLD(2),HALF1          SEE IF FOLD SPECIFIED\n         BNE   CHKHEAD                 NO.....GO LOOP THROUGH DSNAMES\n         OI    VOLBIT,LOW              INDICATE FOLD PRESENT\nCHKHEAD  DS    0H\n         MVI   NODELTF,C'N'          INITIALIZE DELETE FLAG TO NO  TJ#1\n         CLC   PHEAD(2),HALF1          SEE IF HEAD SPECIFIED\n         BNE   NEXT                    NO.....GO LOOP THROUGH DSNAMES\n         OI    VOLBIT,X'08'              INDICATE HEAD PRESENT\n         DROP  R9                      DROP ADDRESSABILITY TO PDL\n*\n***********************************************************************\n*                                                                     *\n*        LOOP THROUGH DSNAME LIST RETURNED BY PARS                    *\n*                                                                     *\n***********************************************************************\n*\nNEXT     DS    0H\n         LA    R1,PRINTI               LOAD POINTER TO DDNAME TO BE\n*                                      FREED\n         BAL   R2,FREEDD               BRANCH TO FREE ROUTINE\n         LTR   R8,R8                   SEE IF RETURN CODE FROM FREE IS\n*                                      ZERO\n         BNZ   CLOSDCBS                NO.....GO CLOSE DCBS AND RETURN\n         MVI   NODELTF,C'Y'          INITIALIZE DELETE FLAG TO YES TJ#1\n         L     R5,0(R6)                LOAD POINTER TO DSNAME\n         LH    R4,4(R6)                LOAD LENGTH OF DSNAME\n         STH   R4,DFPBDSL                                    GTE\n         TM    6(R6),X'40'                                   GTE\n         BO    GTENOQ                                        GTE\n         BCTR  R4,0                                          GTE\n         MVC   DFPBNAME,BLANKS                               GTE\n         EX    R4,DFPBMVE                                    GTE\n         LA    R1,DFPLSECT                                   GTE\n         MVC   DFPBQUA,=CL8'   '                             GTE\n         CALLTSSR  EP=IKJEHDEF                               GTE\nGTEDEF   LTR    R15,R15                                      GTE\nGTEOK    LA     R5,DFPBNAME                                  GTE\n         LH     R4,DFPBDSL                                   GTE\nGTENOQ   DS    0H                                            GTE\n         STCM  R4,3,DSNLEN             STORE LENGTH OF DSNAME\n         BCTR  R4,0                    DECREMENT R4 FOR EX OF MOVE\n         LA    R8,DAP08                LOAD ADDRESS OF DAPB FOR 08\n         USING DAPB08,R8               ESTABLISH ADDRESSABILITY TO DAPB\n         MVC   DAPB08(DAPB08L),DAPB08C MOVE CONSTANTS INTO DAPB\n         LA    R1,DSNLEN               LOAD POINTER TO DSN BUFFER\n         ST    R1,DA08PDSN             STORE POINTER TO DSN BUFFER IN\n*                                      DAPB\n         MVI   DSNBUF,BLANK            BLANK OUT THE DSNAME BUFFER\n         MVC   DSNBUF+1(43),DSNBUF     FINISH BLANKING OUT THE BUFFER\n         EX    R4,MOVEDSN              MOVE IN THE DSNAME\n         TM    14(R6),HIGH             SEE IF MEMBER NAME IS PRESENT\n         BNO   CHKPASS                 NO.....GO CHECK IF THERE IS A\n*                                      PASSWORD\n         MVI   NODELTF,C'N'            SET DELETE FLAG TO NO       TJ#1\n         L     R5,8(R6)                LOAD POINTER TO THE MEMBER NAME\n         LH    R4,12(R6)               LOAD LENGTH OF MEMBER NAME\n         BCTR  R4,0                    DECREMENT R4 FOR EX OF MOVE\n         EX    R4,MOVEMEM              MOVE IN THE MEMBER NAME\nCHKPASS  DS    0H\n         MVC   MEMNAME,DA08MNM         MOVE MEMBER NAME INTO HEADER 2\n         TM    22(R6),HIGH             SEE IF PASSWORD IS PRESENT\n         BNO   CHKVOL                  NO.....GO SEE IF VOLUME PRESENT\n         L     R5,16(R6)               LOAD POINTER TO THE PASSWORD\n         LH    R4,20(R6)               LOAD LENGTH OF PASSWORD\n         BCTR  R4,0                    DECREMENT R4 FOR EX OF MOVE\n         EX    R4,MOVEPASS             MOVE IN THE PASSWORD\nCHKVOL   DS    0H\n         TM    VOLBIT,HIGH             SEE IF VOLUME IS PRESENT\n         BNO   ALLOCDD                 NO.....GO ALLOCATE DATA SET\n         MVC   DA08SER,VOLUME          MOVE IN THE VOLUME SERIAL\nALLOCDD  DS    0H\n         L     R9,PARSBACK       LOAD ADDRESS PARS ANSWER          TJ#1\n         USING IKJPARMD,R9       ESTABLISH ADDRESSABILITY TO PDL   TJ#1\n         MVI   DA08DSP1,X'08'          MOVE IN  SHR DISPOSITION    TJ#1\n         CLC   PDELETE(2),HALF1        WAS DELETE SPECIFIED?       TJ#1\n         BNE   SKIPDELT                IF NOT SKIP MOVING IN DEL   TJ#1\n         CLI   NODELTF,C'N'            CHECK DELETE FLAG           TJ#1\n         BE    SKIPDELT                IF NO, SKIP MOVING IN DEL   TJ#1\n         MVI   DA08DSP1,X'01'          MOVE IN  OLD DISPOSITION    TJ#1\n         DROP  R9                                                  TJ#1\nSKIPDELT DS    0H                                                  TJ#1\n         SLR   R4,R4                   ZERO REGISTER 4\n         ST    R4,ECB                  STORE REGISTER 4 AS ECB\n         LA    R1,DAPLSECT             LOAD ADDRESS OF DAPL\n         USING DAPL,R1                 ESTABLISH ADDRESSABILITY TO DAPL\n         ST    R8,DAPLDAPB             STORE ADDRESS OF DAPB IN DAPL\n         DROP  R1                      DROP ADDRESSABILITY TO DAPL\n         CALLTSSR EP=IKJDAIR           CALL DAIR TO ALLOCATE DATASET\n         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO\n         BZ    OUTPUT                  YES....GO PRINT DATASET\n         MVI   DFID+1,DFDAIR           SET DAIRFAIL ID TO INDICATE DAIR\n         BAL   R2,DAIRFAIL             GO TO DAIRFAIL ROUTINE TO HAVE\n*                                      ERROR MESSAGE PUT OUT\nNOTPMESS DS    0H\n         PUTLINE OUTPUT=(DSNNOTP,SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      DATASET NOT PRINTED MESSAGE\n         B     EXITMSG                 GO PUT OUT DATASET AND MEMBER\n*                                      NAMES\n*\n***********************************************************************\n*                                                                     *\n*        DETERMINE DATASET TYPE AND CALL PRINT ROUTINE                *\n*                                                                     *\n***********************************************************************\n*\nOUTPUT   DS    0H\n         TIME  DEC                     TIME AND DATE FOR HEAD TF#2/JM#1\n         SRL   R0,8                    GET RID OF T&H OF SEC  TF#2/JM#1\n         SLL   R1,8                    GET RID OF X'00'IN DATETF#2/JM#1\n         ST    R0,TIMESAVE             SAVE THE TIME          TF#2/JM#1\n         ST    R1,DATESAVE              AND THE DATE          TF#2/JM#1\n         MVC   DATETIME(19),DATEEDIT   MOVE THE EDIT PATTERN  TF#2/JM#1\n         ED    DATETIME(19),TIMESAVE+1 EDIT DATE&TIME      TF#2/JM#1\n         TM    DA08DSO,DSOPS           X'40' PHYSICAL SEQUENTIAL\n         BO    PRINTIT                 YES....GO PRINT DATASET\n         CLC   DA08MNM,BLANKS          SEE IF MEMBER NAME IS BLANK\n         BNE   PRINTIT                 NO.....GO TREAT AS SEQUENTIAL\n         TM    DA08DSO,DSOPO           X'02' PARTITIONED\n         BO    SCROLLIT                YES....GO SCROLL DIRECTORY\n         DROP  R8                      DROP ADDRESSABILITY TO DAPB\n         PUTLINE OUTPUT=(NOTPSPO,SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      NOT PARTITIONED OR SEQUENTIAL\n*                                      MESSAGE\n         B     NOTPMESS                GO PUT NOT PRINTED MESSAGE\n*\n***********************************************************************\n*                                                                     *\n*        READS RECORDS USING GET MOVE                                 *\n*           AND ATTRIBUTES OF GIVEN DATASET                           *\n*        WRITES THESE SAME RECORDS USING PUT MOVE                     *\n*           AND THE INPUT DATASET ATTRIBUTES                          *\n*                                                                     *\n***********************************************************************\n*\nPRINTIT  DS    0H\n         LA    R8,INPUT                LOAD POINTER TO INPUT DCB\n         USING IHADCB,R8               ESTABLISH ADDRESSABILITY TO DCB\n         MVC   INPUT(INPUTL),INPUTC    MOVE INPUT DCB CONSTANT INTO\n*                                      INPUT DCB IN WORKAREA\n         MVC   OPENLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO OPEN LIST IN WORKAREA\n         OPEN  ((R8),INPUT),MF=(E,OPENLST)  OPEN INPUT DCB\nPRINTS   DS    0H                      BRANCH ADDRESS FOR PRINTING\n*                                      MEMBERS\n         TM    DCBOFLGS,DCBOFOPN       SEE IF DCB OPENED SUCCESSFULLY\n         BNO   NOTPMESS                NO.....GO PUT OUT NOT PRINTED\n*                                      MESSAGE\n         TM    DCBRECFM,DCBRECU        SEE IF RECFM IS UNDEFINED\n         BO    ERRORU                  NO.....GO PUT OUT ERROR MESSAGE\n         BZ    ERRORU                  ZERO...NOT FIXED OR VARIABLE SO\n*                                      GO PUT OUT ERROR MESSAGE\n         CLC   DCBLRECL,HALF256        SEE IF LRECL IS GREATER THAN 256\n         BH    ERRORL                  YES....GO PUT OUT RECORD LENGTH\n*                                      MESSAGE\n         LA    R9,LINE                 LOAD ADDRESS FOR INPUT\n         SLR   R4,R4                   ZERO OUT REGISTER 4\n         ST    R4,LENGTH               STORE ZERO IN LENGTH (PLUS 2\n*                                      RESERVED BYTES) FIELD\n         TM    DCBRECFM,DCBRECV        SEE IF RECFM IS VARIABLE\n         BO    CHKCNTRL                YES....GO PUT OUT DSNAME\n*                                      NO.....RECFM MUST BE FIXED\n*                                      SO CONTINUE\n         A     R9,FULL4                SET TO HAVE FIXED LENGTH\n         LH    R4,DCBLRECL             LOAD LOGICAL RECORD LENGTH\n         A     R4,FULL4                ADD 4 FOR LENGTH FIELD PREFIX\n         STH   R4,LENGTH               STORE IN LENGTH FIELD\nCHKCNTRL DS    0H\n         MVC   HEADER,HEADERC          MOVE HEADER INTO DATA AREA\n         MVC   DPIDOUT+4(8),DPID        MOVE IN DPID               TJ#3\n         L     R7,PARSBACK             LOAD ADDRESS TO PARMS       TJ#3\n         USING IKJPARMD,R7        ESTABLISH ADDRESSABILITY TO PDL  TJ#3\n         CLC   PTITLE(2),HALF1    DID THE USER SPECIFY A TITLE     TJ#3\n         BNE   CHKCCTLK      NO...                                 TJ#3\n         MVC   HDRCNTL+1(40),BLANKS   SPACE OUT HEADER             TJ#3\n         L     R3,TITLEFLD            LOAD POINTER TO TITLE        TJ#3\n         LH    R4,TITLEFLD+4          LOAD LENGTH OF TITLE         TJ#3\n         BCTR  R4,R0                  DECREMENT FOR EXECUTE        TJ#3\n         EX    R4,MOVETTL1            MOVE IN USER TITLE           TJ#3\n         B     CHKCCTLK               BRANCH TO CHECK CCTLKEY      TJ#3\nMOVETTL1 MVC   HDRCNTL+1(0),0(R3)     MOVE IN USER TITLE           TJ#3\n         DROP  R7                                                  TJ#3\nCHKCCTLK CLC   CCTLKEY,HALF0   DID USER SPECIFY CCTL OVERRIDE      TF#1\n         BE    CHKCNTL1      NO...                                 TF#1\n         CLC   CCTLKEY,HALF1   DID USER SPECIFY NOCCTL             TF#1\n         BE    FORCNOCC      YES                                   TF#1\n         CLC   CTYPKEY,HALF1 MUST HAVE SPECIFIED CCTL-WAS IT ASA?  TF#1\n         BE    FORCEASA      YES                                   TF#1\n         B     FORCEMCH      IT HAD TO BE MCH                      TF#1\nCHKCNTL1 DS    0H                                                  TF#1\n         TM    DCBRECFM,DCBRECCM       SEE IF CONTROL IS MACHINE\n         BNO   USEA                    NO.....GO TO USE ASA CONTROL\nFORCEMCH DS    0H                      BRANCH HERE TO FORCE MCH    TF#1\n         MVI   CCTYPE,C'M'             CC TYPE IS MACHINE          TJ#1\n         MVC   HBLNK(5),BLNKMCH        SAVE MCH BLANK LINE         TJ#7\n         LA    R5,OUTPUTM              LOAD ADDRESS OF OUTPUT DCB FOR\n*                                      MACHINE CODE\n         LA    R4,EJECTM               LOAD ADDRESS OF EJECT DATA\n         MVI   HDRCNTL,SKIPM           MOVE INTO HEADER MACHINE CODE\n*                                      FOR SPACE\n         CLI   REPCC,C'N'              CHECK FOR REPLACEMENT CC    TJ#6\n         BE    SKPMCHCC                NO, GO TO CHECK DCB         TJ#6\n         CLI   REPCC,C'D'              CHECK FOR DOUBLE CC         TJ#6\n         BNE   CHKMCHCT                NO, GO TO CHECK DCB         TJ#6\n         MVI   REPCC,X'11'             SET UP DOUBLE MCH CC        TJ#6\n         B     SKPMCHCC                GO TO CONTINUE              TJ#6\nCHKMCHCT CLI   REPCC,C'T'              CHECK FOR TRIPLE CC         TJ#6\n         BNE   SKPMCHCC                NO, BAD REPCC GOTO SKPMCHCC TJ#6\n         MVI   REPCC,X'19'             SET UP TRIPLE MCH CC        TJ#6\nSKPMCHCC DS    0H                                                  TJ#6\n         TM    48(R5),DCBOFOPN         SEE IF DCB IS ALREADY OPEN\n         BO    PUTDSN                  YES....GO PUT OUT HEADERS\n         LA    R3,PRINTM               LOAD POINTER TO PRINTM\n         LA    R14,PUTDSN              LOAD ADDRESS FROM RETURN FROM\n*                                      SYSOUT ALLOCATION\n         B     ALLOCOUT                GO TO ALLOCATE SYSOUT\nUSEA     DS    0H\n         TM    DCBRECFM,DCBRECCA       SEE IF CONTROL IS ASA\n         BO    GOODLENA                YES....GO SEE IF DCB IS OPEN\nFORCNOCC A     R9,FULL1                SET GET AREA TO ALLOW FOR NO\n*                                      CONTROL\n         MVI   CCFLAG,C'N'             SET CC FLAG FOR NO CC       TJ#2\n         LH    R4,LENGTH               GET THE LENGTH OF OUTPUT    TJ#6\n         A     R4,FULL1                ADD ONE FOR A CONTROL BYTE\n         STH   R4,LENGTH               STORE LENGTH IN PUT AREA\nGOODLENA DS    0H\nFORCEASA DS    0H                      BRANCH HERE TO FORCE ASA    TF#1\n         MVI   CCTYPE,C'A'             CC TYPE IS ASA              TJ#1\n         MVC   HBLNK(5),BLNKASA        SAVE ASA BLANK LINE         TJ#7\n         LA    R5,OUTPUTA              LOAD ADDRESS OF OUTPUT DCB FOR\n*                                      ASA CODE\n         LA    R4,EJECTA               LOAD ADDRESS OF EJECT DATA\n         CLI   REPCC,C'N'              CHECK FOR REPLACEMENT CC    TJ#6\n         BE    SKPASACC                NO, GO TO CHECK DCB         TJ#6\n         CLI   REPCC,C'D'              CHECK FOR DOUBLE CC         TJ#6\n         BNE   CHKASACT                NO, GO TO CHECK DCB         TJ#6\n         MVI   REPCC,C'0'              SET UP DOUBLE ASA CC        TJ#6\n         B     SKPASACC                GO TO CONTINUE              TJ#6\nCHKASACT CLI   REPCC,C'T'              CHECK FOR TRIPLE ASA CC     TJ#6\n         BNE   SKPASACC                NO, BAD REPCC GOTO SKPASACC TJ#6\n         MVI   REPCC,C'-'              SET UP TRIPLE ASA CC        TJ#6\nSKPASACC DS    0H                                                  TJ#6\n         TM    48(R5),DCBOFOPN         SEE IF DCB IS ALREADY OPEN\n         BO    PUTDSN                  YES....GO PUT OUT HEADERS\n         LA    R3,PRINTA               LOAD POINTER TO PRINTA\n         BAL   R14,ALLOCOUT            LOAD ADDRESS FOR RETURN AND GO\n*                                      DO SYSOUT ALLOCATION\nPUTDSN   DS    0H\n         CLI   EJECTFL,C'E'            CHECK FOR EJECT             TJ#1\n         BE    EJECT1                  IF SET BRANCH TO EJECT      TJ#1\n         CLI   EJECTFL,C'F'            CHECK FOR FIRST EJECT       TJ#1\n         BNE   CHKEJCT1                IF NOT FIRST THEN BRANCH    TJ#1\n         MVI   EJECTFL,C'X'            CLEAR FIRST EJECT FLAG      TJ#1\n         B     SKPEJCT1                ALWAYS SKIP FIRST EJECT     TJ#1\nCHKEJCT1 DS    0H                                                  TJ#1\n         L     R7,EJECTNM              LOAD NUMBER OF SEP LINES    TJ#1\n         LTR   R7,R7                   IS THE NUMBER ZERO?         TJ#1\n         BZ    SKPEJCT1                BRANCH IF NO SEP LINES      TJ#1\n         LA    R4,BLNKASA              ASSUME ASA                  TJ#1\n         CLI   CCTYPE,C'M'             IS TYPE MCH?                TJ#1\n         BNE   SEPLN1                  NO, BRANCH TO PUT SEP LINES TJ#1\n         LA    R4,BLNKMCH              SET UP BLANK MCH LINE       TJ#1\nSEPLN1   DS    0H                                                  TJ#1\n         PUT   (R5),(R4)               PUT OUT BLANK LINE          TJ#1\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\n         AP    HLINES(9),=P'1'         ADD 1 TO NUMBER LINES PRINT TJ#2\n         BCT   R7,SEPLN1               BRANCH IF NOT ZERO          TJ#1\n         MVI   FIRSTFL,C'X'            CLEAR FIRST PRINT FLAG      TJ#1\n         B     SKPEJCT1                       BRANCH AROUND EJECT  TJ#1\nEJECT1   DS    0H                                                  TJ#1\n         CLI   FIRSTFL,C'F'            CHECK FOR FIRST PRINT       TJ#8\n         BNE   EJECTIT1                BRANCH TO EJECT IF NOT      TJ#8\n         L     R7,PARSBACK             LOAD ADDRESS TO PARMS       TJ#8\n         USING IKJPARMD,R7        ESTABLISH ADDRESSABILITY TO PDL  TJ#8\n         CLC   PARR(2),HALF1           CHECK FOR   ARR             TJ#8\n         BE    SKPEJCT1               ARR, BRANCH TO SKIP EJECT    TJ#8\nEJECTIT1 DS    0H                                                  TJ#8\n         PUT   (R5),(R4)               PUT OUT PAGE EJECT\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\n         ZAP   HLINES(9),=P'0'         ZERO HLINES                 TJ#2\n         MVI   FIRSTFL,C'X'            CLEAR FIRST PRINT FLAG      TJ#1\nSKPEJCT1 DS    0H                                                  TJ#1\n         CLI   FIRSTFL,C'F'            CHECK FOR FIRST PRINT       TJ#2\n         BNE   CHCKHEAD                BRANCH TO CHECK FOR HEADER  TJ#2\n         L     R7,PARSBACK             LOAD ADDRESS TO PARMS       TJ#2\n         USING IKJPARMD,R7        ESTABLISH ADDRESSABILITY TO PDL  TJ#2\n         CLC   PARR(2),HALF1           CHECK FOR   ARR             TJ#2\n         BNE   CHCKHEAD            NO ARR, BRANCH TO CHECK HEADER  TJ#2\n         MVI   FIRSTFL,C'X'            CLEAR FIRST PRINT FLAG      TJ#2\n         MVC   ARRPRTLN(ARRPL),ARRPRTR                             TJ#2\n         L     R15,ARRNUM              LOAD ADDRESS OF TYPE        TJ#2\n         MVC   ARRPRTN(3),0(R15)       MOVE IN ARRANGMENT NUMBER   TJ#2\n         MVC   ARRCC,CCASATOP          ASSUME ASA CNTL             TJ#2\n         CLI   CCTYPE,C'M'             SHOULD IT BE MCH TYPE?      TJ#2\n         BNE   MVPRINT                 NO, BRANCH TO CONTINUE      TJ#2\n         MVC   ARRCC,CCMCHTOP          MOVE IN MCH CNTL            TJ#2\nMVPRINT  DS    0H                                                  TJ#2\n         MVC   ARRPRT,=C',PRINT  '     MOVE IN ,PRINT              TJ#2\n         PUT   (R5),ARRPRTLN           PUT OUT ARRANGEMENT LINE    TJ#2\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\nCHCKDPLX DS    0H                                                  TJ#5\n         CLC   PDUPLEX(2),HALF1        CHECK FOR DUPLEX            TJ#4\n         BNE   CKARCOPY                NO DUPLEX, CHECK COPIES     TJ#4\n         MVC   ARRPRT(80),ARRDUP       MOVE IN DUPLEX              TJ#4\n         PUT   (R5),ARRPRTLN           PUT OUT DUPLEX LINE         TJ#4\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\nCKARCOPY DS    0H                                                  TJ#4\n         AIF   (&LGENOPT EQ 0).CKANUM  IF PARTIAL GEN OPT        JM#14\n         CLC   PCOPIES(2),HALF1        SEE IF COPY SPECIFIED       TJ#4\n         BNE   CHCKANUM                NO.....GO CHECK NUMBER      TJ#4\n         MVC   ARRPRT,=C'QUA     '     MOVE IN  QUA                TJ#4\n         MVC   ARRPRTN(3),=C'   '      BLANK OUT COPIES AREA       TJ#4\n         L     R15,SCOPIES             LOAD ADDRESS OF COPIES      TJ#4\n         LH    R1,SCOPIES+4            LOAD LENGTH OF COPY FIELD   TJ#4\n         BCTR  R1,0                    DECREMENT R1 FOR EX OF MOVE TJ#4\n         EX    R1,MOVECOPY             EXECUTE MOVE TO MOVE COPIES TJ#4\n         PUT   (R5),ARRPRTLN           PUT OUT QUANITY LINE        TJ#4\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\n         B     CHCKANUM                                            TJ#4\nMOVECOPY MVC   ARRPRTN(0),0(R15)       MOVE IN COPIES              TJ#4\n.CKANUM  ANOP                                                    JM#14\nCHCKANUM DS    0H                                                  TJ#5\n         CLC   PNUMBER(2),HALF1        CHECK FOR NUMBER            TJ#5\n         BNE   SETUPEND                NO NUMBER, GO SET UP END    TJ#5\n         MVC   ARRPRT(80),ARRNUM1      PUT OUT ,MARGIN TEXT        TJ#5\n         PUT   (R5),ARRPRTLN           PUT OUT NUMBER LINE         TJ#5\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\n         MVC   ARRPRT(80),ARRNUM2      PUT OUT ,MARGIN TEXT        TJ#5\n         PUT   (R5),ARRPRTLN           PUT OUT NUMBER LINE         TJ#5\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\nSETUPEND MVC   ARRPRT,=C',END    '     MOVE IN ,END                TJ#2\n         MVC   ARRPRTN(3),=C'   '      SPACE OUT ARR NUM AREA      TJ#2\n         MVC   ARRCC,HDRCNTL           MOVE IN CNTL SAVED IN HEAD  TJ#2\n         PUT   (R5),ARRPRTLN           PUT OUT ARRANGEMENT LINE    TJ#2\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\nCHCKEXPR DS    0H                                                  TJ#5\n         CLC   PEXPRES(2),HALF1        CHECK FOR EXPRESS           TJ#5\n         BNE   CHCKHEAD                NO EXPRESS, GO CHECK HEAD   TJ#5\n         MVC   ARRPRT(80),EXPRESS      MOVE IN EXPRESS LINE        TJ#5\n         PUT   (R5),ARRPRTLN           PUT OUT EXPRESS LINE        TJ#5\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\n         DROP  R7                                                  TJ#2\nCHCKHEAD TM    VOLBIT,X'08'            TEST FOR  HEAD\n         BO    GTEHEAD       YES\n         PUT   (R5),HEADER             PUT OUT PAGE 1 HEADER\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\n         MVI   FIRSTFL,C'X'            CLEAR FIRST PRINT FLAG      TJ#2\n         AP    HLINES(9),=P'1'         ADD 1 TO NUMBER LINES PRINT TJ#2\n         MVC   HEADER2,LDSNAME         MOVE LENGTH AND 'DSNAME=' INTO\n*                                      INTO SECOND HEADER\n         MVC   HEADER2+4(1),HDRCNTL    MOVE IN CONTROL BYTE\n         CLI   MEMNAME,BLANK           SEE IF MEMBER NAME IS BLANK\n         BE    NOMEM                   YES....NO NEED TO PUT IN PARENS\n         MVI   OPENPRN,C'('            MOVE OPEN PAREN INTO DSNAME\n         MVI   CLOSEPRN,C')'           MOVE CLOSE PAREN INTO DSNAME\n         B     PUTHDR2                 GO PUT OUT HEADER 2\nNOMEM    DS    0H\n         MVI   OPENPRN,BLANK           MOVE BLANK INSTEAD OF OPEN AND\n         MVI   CLOSEPRN,BLANK          CLOSE PARENS\nPUTHDR2  DS    0H\n         PUT   (R5),HEADER2            PUT OUT PAGE 1 HEADER 2\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\n         AP    HLINES(9),=P'1'         ADD 1 TO NUMBER LINES PRINT TJ#2\n         MVC   HEADER2(4),SPACE        CHANGE HEADER 2 FOR PUT OF BLANK\n*                                      LINE\n         PUT   (R5),HEADER2            PUT OUT BLANK LINE\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\n         AP    HLINES(9),=P'1'         ADD 1 TO NUMBER LINES PRINT TJ#2\nGTEHEAD  MVC   CNTLBYTE,HDRCNTL        MOVE IN SPACE AS CONTROL\n*                                      CHARACTER\n         TM    VOLBIT,LOW              SEE IF FOLD IS REQUESTED\n         BO    FOLDIT                  YES....GO FOLD OUTPUT\n         TM    DCBRECFM,DCBRECV        SEE IF RECFM IS VARIABLE\n         BNO   COPYF                   NO.....GO HANDLE FIXED INPUT\n         CLC   CCTLKEY,HALF2           WAS CC SPECIFIED           TJ#7\n         BE    COPYV                   CC SPECIFIED, GO TO COPYV  TJ#7\n         TM    DCBRECFM,DCBRECCC       SEE IF THERE IS A CONTROL BYTE\n         BZ    COPYVNO                 NO.....GO TO ADD CONTROL FOR\n*                                      VARIABLE\nCOPYV    DS    0H\n         GET   INPUT,(R9)              GET INPUT RECORD\n         AP    TRECDS(9),=P'1'         ADD 1 TO TOTAL RECORDS READ TJ#4\n         LH    R15,LENGTH              LOAD LENGTH OF LINE         TJ#7\n         C     R15,=F'4'               TEST FOR LENGTH OF 4        TJ#7\n         BH    CPYVP                   IF GREATER THAN 4 BRANCH    TJ#7\n         MVC   0(5,R9),HBLNK           MOVE IN BLANK LINE          TJ#7\nCPYVP    BAL   R3,PTLINE               BAL TO PRINT OUT THE LINE   TJ#2\n         B     COPYV                   GO GET NEXT RECORD\n*\nCOPYVNO  DS    0H\n         GET   INPUT,(R9)              GET INPUT RECORD\n         AP    TRECDS(9),=P'1'         ADD 1 TO TOTAL RECORDS READ TJ#4\n         SLR   R15,R15                 ZERO REGISTER 15 FOR INSERT\n         ICM   R15,7,LENGTH+1          INSERT LENGTH AND RESERVED BYTE\n         A     R15,FULL256             ADD 1 TO LENGTH\n         STCM  R15,7,LENGTH            STORE LENGTH AND RESERVED BYTE\n         MVC   CNTLBYTE,HDRCNTL        MOVE IN CONTROL SAVED IN HEADER\n         BAL   R3,PTLINE               BAL TO PRINT OUT THE LINE   TJ#2\n         B     COPYVNO                 GO GET NEXT INPUT RECORD\n*\nCOPYF    DS    0H\n         GET   INPUT,(R9)              GET INPUT RECORD\n         AP    TRECDS(9),=P'1'         ADD 1 TO TOTAL RECORDS READ TJ#4\n         BAL   R3,PTLINE               BAL TO PRINT OUT THE LINE   TJ#2\n         B     COPYF                   GO GET NEXT RECORD\n*\nFOLDIT   DS    0H\n         TM    DCBRECFM,DCBRECV        SEE IF RECFM IS VARIABLE\n         BNO   FOLDF                   NO.....GO HANDLE FIXED INPUT\n         CLC   CCTLKEY,HALF2           WAS CC SPECIFIED           TJ#7\n         BE    FOLDV                   CC SPECIFIED, GO TO FOLDV  TJ#7\n         TM    DCBRECFM,DCBRECCC       SEE IF THERE IS A CONTROL BYTE\n         BZ    FOLDVNO                 NO.....GO TO ADD CONTROL FOR\n*                                      VARIABLE\nFOLDV    DS    0H\n         GET   INPUT,(R9)              GET INPUT RECORD\n         AP    TRECDS(9),=P'1'         ADD 1 TO TOTAL RECORDS READ TJ#4\n         LH    R15,LENGTH              LOAD LENGTH OF LINE\n         SH    R15,HALF6               DECREMENT FOR EXECUTE\n         EX    R15,FOLDLINE            EXECUTE FOLD OF LINE\n         LH    R15,LENGTH              LOAD LENGTH OF LINE         TJ#7\n         C     R15,=F'4'               TEST FOR LENGTH OF 4        TJ#7\n         BH    FLDVP                   IF GREATER THAN 4 BRANCH    TJ#7\n         MVC   0(5,R9),HBLNK           MOVE IN BLANK LINE          TJ#7\nFLDVP    BAL   R3,PTLINE               BAL TO PRINT OUT THE LINE   TJ#2\n         B     FOLDV                   GO GET NEXT RECORD\n*\nFOLDVNO  DS    0H\n         GET   INPUT,(R9)              GET INPUT RECORD\n         AP    TRECDS(9),=P'1'         ADD 1 TO TOTAL RECORDS READ TJ#4\n         SLR   R15,R15                 ZERO REGISTER 15 FOR INSERT\n         ICM   R15,7,LENGTH+1          INSERT LENGTH AND RESERVED BYTE\n         A     R15,FULL256             ADD 1 TO LENGTH\n         STCM  R15,7,LENGTH            STORE LENGTH AND RESERVED BYTE\n         MVC   CNTLBYTE,HDRCNTL        MOVE IN CONTROL SAVED IN HEADER\n         LH    R15,LENGTH              LOAD LENGTH OF LINE\n         SH    R15,HALF6               DECREMENT FOR EXECUTE\n         EX    R15,FOLDLINE            EXECUTE FOLD OF LINE\n         BAL   R3,PTLINE               BAL TO PRINT OUT THE LINE   TJ#2\n         B     FOLDVNO                 GO GET NEXT INPUT RECORD\n*\nFOLDF    DS    0H\n         LH    R4,LENGTH               LOAD LENGTH INTO REGISTER 4\n         SH    R4,HALF6                SUBTRACT TO SET UP FOR EXECUTE\nFOLDFLP  DS    0H\n         GET   INPUT,(R9)              GET INPUT RECORD\n         AP    TRECDS(9),=P'1'         ADD 1 TO TOTAL RECORDS READ TJ#4\n         EX    R4,FOLDLINE             FOLD DATA\n         BAL   R3,PTLINE               BAL TO PRINT OUT THE LINE   TJ#2\n         B     FOLDFLP                 GO GET NEXT RECORD\nFOLDLINE OC    DATA(0),BLANKS          OC INSTRUCTION TO BE EXECUTED\n*\nPTLINE   DS    0H           SUBROUTINE TO PUT LINE                 TJ#2\n         CP    STARTP,=P'0'  IS THERE A START POINT?               TJ#4\n         BE    CHKSTOP       NO, CHECK FOR STOP                    TJ#4\n         CP    TRECDS,STARTP START RECORD PASSED?                  TJ#4\n         BL    PTLINEND      NO, DON'T PRINT LINE                  TJ#4\nCHKSTOP  CP    STOPP,=P'0'   IS THERE A STOP POINT?                TJ#4\n         BE    CHKCOUNT      NO, CHECK FOR COUNT                   TJ#4\n         CP    TRECDS,STOPP  STOP RECORD PASSED?                   TJ#4\n         BH    PTLINEND      YES, DON'T PRINT LINE                 TJ#4\nCHKCOUNT CP    COUNTP,=P'0'  IS THERE A RECORD COUNT?              TJ#4\n         BE    ENDCHCK       NO, SKIP COUNT CHECK                  TJ#4\n         CP    TLINES,COUNTP HAVE ALL LINES PRINTED?               TJ#4\n         BNL   PTLINEND      YES, DON'T PRINT ANY MORE             TJ#4\nENDCHCK  DS    0H                                                  TJ#4\n         CLI   CCFLAG,C'Y'             CHECK FOR DATASET WITH CC   TJ#2\n         BE    SKPLNCK                 THERE IS CC, BRANCH TO PUT  TJ#2\n         CLI   FIRSTFL,C'F'            CHECK FOR FIRST PRINT       TJ#2\n         BNE   MVCNTL1                 IF NOT FIRST, MOVE IN CNTL  TJ#2\n         MVI   FIRSTFL,C'X'            CLEAR FIRST PRINT FLAG      TJ#2\n         MVC   CNTLBYTE,CCASATOP       ASSUME ASA CNTL             TJ#2\n         CLI   CCTYPE,C'M'             SHOULD IT BE MCH TYPE?      TJ#2\n         BNE   SKCNTL1                 NO, BRANCH TO CONTINUE      TJ#2\n         MVC   CNTLBYTE,CCMCHTOP       MOVE IN MCH CNTL            TJ#2\n         B     SKCNTL1                 BRANCH TO CONTINUE          TJ#2\nMVCNTL1  DS    0H                                                  TJ#2\n         MVC   CNTLBYTE,HDRCNTL        MOVE IN CNTL SAVED IN HEAD  TJ#2\nSKCNTL1  DS    0H                                                  TJ#2\n*                                                                  TJ#2\n         CLI   CCFLAG,C'Y'             CHECK FOR DATASET WITH CC   TJ#2\n         BE    SKPLNCK                 THERE IS CC, SKIP LINE CHCK TJ#2\n         CP    NLINES,=P'0'            ARE LINES TO BE CHECKED?    TJ#2\n         BE    SKPLNCK                 NO, SKIP LINE CHCK          TJ#2\n         CP    HLINES,NLINES           COMPARE LINE COUNT TO LINES TJ#2\n         BL    SKPLNCK                 LIMIT NOT EXCEEDED, CONT    TJ#2\n         ZAP   HLINES(9),=P'0'         ZERO LINE COUNT             TJ#2\n         MVC   CNTLBYTE,CCASATOP       ASSUME ASA CNTL             TJ#2\n         CLI   CCTYPE,C'M'             SHOULD IT BE MCH TYPE?      TJ#2\n         BNE   SKPLNCK                 NO, BRANCH TO CONTINUE      TJ#2\n         MVC   CNTLBYTE,CCMCHTOP       MOVE IN MCH CNTL            TJ#2\nSKPLNCK  DS    0H                                                  TJ#2\n         CLI   REPCC,C'N'              CHECK FOR REPLACEMENT CC    TJ#6\n         BE    LINEPRNT                BRACH TO PRINT THE LINE     TJ#6\n         MVC   CNTLBYTE(1),REPCC       MOVE IN REPLACEMENT CC      TJ#6\nLINEPRNT DS    0H                                                  TJ#6\n         PUT   (R5),LINE    PUT OUT THE OUTPUT LINE                TJ#2\n         AP    HLINES(9),=P'1'         ADD 1 TO NUMBER LINES PRINT TJ#2\n         AP    TLINES(9),=P'1'         ADD 1 TO TOTAL  LINES PRINT TJ#4\nPTLINEND BR    R3           LINE PRINTED, RETURN                   TJ#2\n*                                                                  TJ#2\nEXIT     DS    0H\n         AP    GTLINES(9),TLINES       ADD UP FOR GRAND TOTAL      TJ#8\n         ZAP   TLINES(9),=P'0'         ZERO TOTAL LINES PRINTED    TJ#8\n         TM    DCBOFLGS,DCBOFOPN       SEE IF INPUT DCB IS OPEN\n         BNO   EXITMSG                 NO....GO PUT OUT DATASET AND\n*                                      MEMBER NAMES\n         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO CLOSE LIST IN WORKAREA\n         CLOSE ((R8),),MF=(E,CLOSLST)  CLOSE INPUT DCB\nEXITMSG  DS    0H\n         PUTLINE OUTPUT=(DSNMSG,SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      DATA SET NAME MESSAGE\n         LH    R4,DFPBDSL              LOAD LENGTH OF DSNAME   GTE\n         A     R4,FULL4                INCREMENT LENGTH FOR PUTLINE\n         SLL   R4,16                   SHIFT LENGTH TO HIGH ORDER BYTES\n         STCM  R4,15,DSNLENP           STORE LENGTH OF PUTLINE\n         PUTLINE OUTPUT=(DSNLENP,SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      DATA SET NAME MESSAGE\n         TM    14(R6),HIGH             SEE IF MEMBER NAME IS PRESENT\n         BNO   CONTINUE                NO.....GO CHECK FOR ANOTHER\n*                                      DATASET NAME\n         PUTLINE OUTPUT=(MEMMSG,SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      DATA SET NAME MESSAGE\n         LH    R4,12(R6)               LOAD LENGTH OF MEMBER NAME\n         A     R4,FULL4                INCREMENT LENGTH FOR PUTLINE\n         SLL   R4,16                   SHIFT LENGTH TO HIGH ORDER BYTES\n         STCM  R4,15,MEMNAMEL          STORE LENGTH OF PUTLINE\n         PUTLINE OUTPUT=(MEMNAMEL,SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      MEMBER NAME\n         B     CONTINUE                GO CONTINUE WITH NEXT DATASET\n         DROP  R8                      DROP ADDRESSABILITY TO INPUT DCB\nERRORL   DS    0H\n         PUTLINE OUTPUT=(DSNISL,SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      DATASET NOT PRINTED DUE TO\n*                                      RECORD LENGTH TOO LONG MESSAGE\n         B     EXIT                    GO SEE IF INPUT DCB IS OPEN\nERRORU   DS    0H\n         PUTLINE OUTPUT=(DSNISU,SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      DATASET NOT PRINTED DUE TO\n*                                      UNDEFINED RECORD FORMAT MESSAGE\n         B     EXIT                    GO SEE IF INPUT DCB IS OPEN\nERRI     DS    0H\n         PUTLINE OUTPUT=(SYNADI,SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      DATASET NOT PRINTED DUE TO SYNAD\n*                                      ERROR ON INPUT DATASET MESSAGE\n         B     EXIT                    GO SEE IF INPUT DCB IS OPEN\nERRO     DS    0H\n         PUTLINE OUTPUT=(SYNADO,SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      DATASET NOT PRINTED DUE TO\n*                                      UNDEFINED RECORD FORMAT MESSAGE\n         B     CLOSDCBS                GO CLOSE OPEN DCBS AND RETURN\n*                                                                     *\nPDSKWERR DS    0H                                                  TJ#1\n         PUTLINE OUTPUT=(PDSKWE,SINGLE,DATA),MF=(E,IOPLSECT)       TJ#1\n*                     PUT OUT DATASET NOT PRINTED DUE TO           TJ#1\n*                             PO FORMAT AND PDS NOT SPECIFIED      TJ#1\n         B     CLOSDCBS       GO CLOSE OPEN DCBS AND RETURN        TJ#1\n*                                                                     *\nBADLINS  DS    0H                                                  TJ#2\n         PUTLINE OUTPUT=(BADLNE,SINGLE,DATA),MF=(E,IOPLSECT)       TJ#2\n*                     PUT OUT DATASET NOT PRINTED DUE TO           TJ#2\n*                             DAB NUMBER OF LINES SPECIFIED        TJ#2\n         B     EXIT           GO TO SEE IF INPUT DCB OPEN          TJ#2\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        READ THE DIRECTORY OF A PDS                                  *\n*           THEN EITHER LIST MEMBER NAMES,                            *\n*           PRINT MEMBERS,                                            *\n*           OR LIST MEMBER NAMES AND PRINT MEMBERS                    *\n***********************************************************************\n*\nSCROLLIT DS    0H\n         MVI   NODELTF,C'N'            SET DELETE FLAG TO NO       TJ#1\n         ST    R6,SAVER6               SAVE REGISTER 6\n         L     R9,PARSBACK             LOAD ADDRESS PARS ANSWER\n         USING IKJPARMD,R9             ESTABLISH ADDRESSABILITY TO PDL\n         CLC   PPRINT(2),HALF2           WAS  NOPRINT SPECIFIED? TJ#3\n         BE    SKPPDS                   YES, SKIP PPDS CHECK       TJ#3\n         CLC   PPDS(2),HALF1           WAS  PDS   SPECIFIED?       TJ#1\n         BNE   PDSKWERR                IF PDS NOT SPECIFIED ERROR  TJ#1\nSKPPDS   CLC   PLIST,HALF2             SEE IF NOLIST SPECIFIED\n         BL    CONTSCR                 LOW....CONTINUE WITH SCROLL\n         CLC   PPRINT,HALF2            SEE IF NOPRINT SPECIFIED\n         BE    CONTINUE                YES....SKIP SCROLL\n         DROP  R9                      DROP ADDRESSABILITY TO PDL\nCONTSCR  DS    0H\n         LA    R8,DIRECT               LOAD POINTER TO DIRECTORY DCB\n         USING IHADCB,R8               ESTABLISH ADDRESSABILITY TO DCB\n         MVC   DIRECT(DIRECTL),DIRECTC MOVE DIRECTORY DCB CONSTANT INTO\n*                                      DIRECTORY DCB IN WORKAREA\n         MVC   OPENLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO OPEN LIST IN WORKAREA\n         OPEN  ((R8),INPUT),MF=(E,OPENLST)  OPEN DIRECTORY DCB\n         TM    DCBOFLGS,DCBOFOPN       SEE IF DCB OPENED SUCCESSFULLY\n         BNO   NOTPMESS                NO.....GO PUT OUT NOT PRINTED\n*                                      MESSAGE\n         DROP  R8                      DROP ADDRESSABILITY TO DCB\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        GETMAIN MEMBER TABLE FOR STORAGE OF DIRECTORY NAMES, ETC.    *\n*           INITIALIZE TABLE                                          *\n*                                                                     *\n***********************************************************************\n*\n         L     R0,MEMDATL              LOAD LENGTH OF GETMAIN FOR\n*                                      MEMBER TABLE\n         LR    R2,R0                   SAVE IN REGISTER 2\n         GETMAIN R,LV=(0)              GETMAIN MEMBER TABLE STORAGE\n         ST    R1,MEMTABLE             SAVE ADDRESS OF MEMBER TABLE\n         ST    R1,PRESENT              ALSO SAVE ADDRESS AS TABLE\n*                                      IN USE\n         LA    R3,0(R2,R1)             LOAD ADDRESS OF END OF TABLE\n         ST    R3,ENDTABLE             STORE ADDRESS OF TABLE END\n         SLR   R4,R4                   ZERO REGISTER 4\n         ST    R4,0(R1)                STORE AS FIRST WORD OF MEMBER\n*                                      TABLE\n         LA    R4,8(R1)                LOAD REGISTER 4 AS POINTER TO\n*                                      THE FIRST ENTRY\n         USING MEMDSECT,R4             ESTABLISH ADDRESSABILITY TO\n*                                      MEMBER TABLE DSECT\n         SLR   R5,R5                   INITIALIZE MEMBER COUNT TO ZERO\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        READ DIRECTORY AND BUILD MEMBER TABLE                        *\n*                                                                     *\n***********************************************************************\n*\nGETDIR   EQU   *\n         GET   (R8),DATA               GET A DIRECTORY BLOCK\n         CLC   DATA,HALF12             SEE IF BLOCK IS UNUSED\n         BL    FREEBLK                 YES....GO HANDLE DIRECTORY END\n         LA    R9,DATA+2               LOAD POINTER TO FIRST DIRECTORY\n*                                      ENTRY\n         SLR   R7,R7                   ZERO REGISTER 7 FOR INSERT\n         ICM   R7,3,DATA               INSERT LENGTH USED OF THIS BLOCK\n         LA    R7,DATA-1(R7)           LOAD LAST USED BYTE OF BLOCK\nUNBLOCK  DS    0H\n         MVC   MEMNTTR,0(R9)           PUT NAME AND TTR IN TABLE\n         MVC   CFIELD,11(R9)           PUT C FIELD IN TABLE\n         CLI   MEMBER,HEXFF            SEE IF LAST MEMBER\n         BE    FREEBLK                 YES....GO HANDLE DIRECTORY END\n         IC    R6,CFIELD               INSERT CFIELD INTO REGISTER 6\n         SLL   R6,27                   SHIFT OUT HIGH ORDER BITS\n         SRL   R6,26                   SHIFT RIGHT TO GET LENGTH OF\n*                                      USER DATA\n         LA    R6,12(R6)               ADD STANDARD ENTRY LENGTH\n         LA    R4,MEMSECTN             LOAD PINTER TO NEXT TABLE ENTRY\n         LA    R5,1(R5)                INCREMENT NUMBER OF MEMBERS IN\n*                                      TABLE\n         C     R4,ENDTABLE             SEE IF END OF TABLE\n         BL    NEXTNTRY                LOW.....GO PROCESS NEXT ENTRY\n         LR    R0,R2                   LOAD LENGTH OF TABLE FOR GETMAIN\n         GETMAIN R,LV=(0)              GET NEXT TABLE\n         L     R14,PRESENT             LOAD REGISTER 14 WITH ADDRESS OF\n*                                      LAST TABLE\n         ST    R1,0(R14)               CHAIN MEMBER TABLES TOGETHER\n         ST    R1,PRESENT              ALSO SAVE ADDRESS AS TABLE\n*                                      IN USE\n         LA    R3,0(R2,R1)             LOAD ADDRESS OF TABLE END\n         ST    R3,ENDTABLE             STORE ADDRESS OF TABLE END\n         SLR   R4,R4                   ZERO REGISTER 4\n         ST    R4,0(R1)                STORE AS FIRST WORD OF MEMBER\n*                                      TABLE\n         LA    R4,8(R1)                LOAD REGISTER 4 AS POINTER TO\n*                                      THE FIRST ENTRY\n         STH   R5,4(R14)               STORE MEMBER COUNT IN OLD TABLE\n         SLR   R5,R5                   INITIALIZE MEMBER COUNT TO ZERO\nNEXTNTRY DS    0H\n         BXLE  R9,R6,UNBLOCK           INCREMENT REGISTER 9 WITH\n*                                      REGISTER 6 AND BRANCH\n*                                      LESS THAN OR EQUAL TO\n*                                      REGISTER 7 TO UNBLOCK\n         B     GETDIR                  NO.....GO GET NEXT DIRECTORY\n*                                      BLOCK\n         DROP  R4                      DROP ADDRESSABILITY TO TABLE\n*\n***********************************************************************\n*                                                                     *\n*        LIST MEMBERS IF:                                             *\n*           LIST SPECIFIED OR                                         *\n*           BOTH PRINT AND NOLIST WERE NOT SPECIFIED                  *\n*                                                                     *\n***********************************************************************\n*\nFREEBLK  DS    0H\n         MVC   OPENLST,OPENCLOS        MOVE CONSTANT INTO CLOSE LIST\n         CLOSE ((R8),),MF=(E,OPENLST)  CLOSE DIRECTORY DCB\n         L     R2,PRESENT              LOAD POINTER TO LAST TABLE\n         STH   R5,4(R2)                STORE COUNT OF MEMBERS\n         L     R4,MEMTABLE             LOAD POINTER TO FIRST TABLE\n         CLC   4(2,R4),HALF0           SEE IF THERE WERE ANY MEMBERS\n         BE    ENDMEMB                 ZERO...GO FREE MEMBER TABLE\n         LA    R8,INPUT                LOAD POINTER TO INPUT DCB\n         USING IHADCB,R8               ESTABLISH ADDRESSABILITY TO DCB\n         MVC   INPUT(INPUTL),INPUTC    MOVE INPUT DCB CONSTANT INTO\n*                                      INPUT DCB IN WORKAREA\n         MVC   OPENLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO OPEN LIST IN WORKAREA\n         LA    R1,XLIST                LOAD ADDRESS OF EXIT LIST\n         ST    R1,DCBEXLST             STORE ADDRESS OF EXIT LIST IN\n*                                      DCB\n         LA    R1,SEXIT                LOAD ADDRESS OF EODAD EXIT\n         ST    R1,DCBEODAD             STORE ADDRESS EODAD IN DCB\n         LA    R2,JFCBAREA             LOAD ADDRESS OF JFCBAREA\n         ST    R2,XLIST                STORE ADDRESS IN EXIT LIST\n         MVI   XLIST,X'87'             SET END OF LIST AND JFCB BYTE\n         MVC   RDJL,OPENCLOS           MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO READJFCB LIST IN\n*                                      WORKAREA\n         RDJFCB (INPUT,),MF=(E,RDJL)   READ JFCB INTO JFCBAREA\n         MVC   JFCBELNM,8(R4)          MOVE MEMBER NAME INTO JFCB\n         OI    JFCBIND1,JFCPDS         SET JFCB TO INDICATE PDS MEMBER\n         MVI   JFCDSRG1,HEX00          SET JFCB TO REMOVE OTHER DSORG\n*                                      INDICATORS\n         OPEN  ((R8),INPUT),TYPE=J,MF=(E,OPENLST)  OPEN INPUT DCB\n         L     R9,PARSBACK             LOAD ADDRESS PARS ANSWER\n         USING IKJPARMD,R9             ESTABLISH ADDRESSABILITY TO PDL\n         CLC   PLIST,HALF2             SEE IF NOLIST SPECIFIED\n         BE    NOLIST                  YES....SKIP LISTING\n         CLC   PLIST,HALF1             SEE IF LIST SPECIFIED\n         BE    LISTIT                  YES....GO LISTIT\n         CLC   PPRINT,HALF1            SEE IF PRINT SPECIFIED\n         BE    NOLIST                  YES....SKIP LISTING\nLISTIT   DS    0H\n         MVC   HEADER,HEADERM          MOVE HEADER INTO DATA AREA\n         MVC   DPIDOUT+4(8),DPID        MOVE IN DPID               TJ#3\n         CLC   PTITLE(2),HALF1    DID THE USER SPECIFY A TITLE     TJ#3\n         BNE   CHKCCTL2      NO...                                 TJ#3\n         MVC   HDRCNTL+1(40),BLANKS   SPACE OUT HEADER             TJ#3\n         L     R3,TITLEFLD            LOAD POINTER TO TITLE        TJ#3\n         LH    R4,TITLEFLD+4          LOAD LENGTH OF TITLE         TJ#3\n         BCTR  R4,R0                  DECREMENT FOR EXECUTE        TJ#3\n         EX    R4,MOVETTL2            MOVE IN USER TITLE           TJ#3\n         B     CHKCCTL2               BRANCH TO CHECK CCTLKEY      TJ#3\nMOVETTL2 MVC   HDRCNTL+1(0),0(R3)     MOVE IN USER TITLE           TJ#3\nCHKCCTL2 CLC   CCTLKEY,HALF0   DID USER SPECIFY CCTL OVERRIDE      TF#1\n         BE    LISTIT1       NO...                                 TF#1\n         CLC   CCTLKEY,HALF1   DID USER SPECIFY NOCCTL             TF#1\n         BE    SFORCNOC      YES                                   TF#1\n         CLC   CTYPKEY,HALF1 MUST HAVE SPECIFIED CCTL-WAS IT ASA?  TF#1\n         BE    SFORCASA      YES                                   TF#1\n         B     SFORCMCH      IT HAD TO BE MCH                      TF#1\nLISTIT1  DS    0H                                                  TF#1\n         TM    DCBRECFM,DCBRECCM       SEE IF CONTROL IS MACHINE\n         DROP  R8                      DROP ADDRESSABILITY TO DCB\n         BNO   SUSEA                   NO.....GO TO USE ASA CONTROL\nSFORCMCH DS    0H                      BRANCH HERE TO FORCE MCH    TF#2\n         LA    R5,OUTPUTM              LOAD ADDRESS OF OUTPUT DCB FOR\n*                                      MACHINE CODE\n         LA    R4,EJECTM               LOAD ADDRESS OF EJECT DATA\n         MVI   HDRCNTL,SKIPM           MOVE INTO HEADER MACHINE CODE\n*                                      FOR SPACE\n         TM    48(R5),DCBOFOPN         SEE IF DCB IS ALREADY OPEN\n         BO    SPUTDSN                 YES....GO PUT OUT HEADERS\n         LA    R3,PRINTM               LOAD POINTER TO PRINTM\n         LA    R14,SPUTDSN             LOAD ADDRESS FOR RETURN FROM\n*                                      SYSOUT ALLOCATION\n         B     ALLOCOUT                GO TO ALLOCATE SYSOUT\nSUSEA    DS    0H\nSFORCASA DS    0H                      BRANCH HERE TO FORCE ASA    TF#2\nSFORCNOC DS    0H                      BRANCH HERE TO FORCE NO CC  TF#2\n         LA    R5,OUTPUTA              LOAD ADDRESS OF OUTPUT DCB FOR\n*                                      ASA CODE\n         LA    R4,EJECTA               LOAD ADDRESS OF EJECT DATA\n         TM    48(R5),DCBOFOPN         SEE IF DCB IS ALREADY OPEN\n         BO    SPUTDSN                 YES....GO PUT OUT HEADERS\n         LA    R3,PRINTA               LOAD POINTER TO PRINTA\n         BAL   R14,ALLOCOUT            LOAD ADDRESS FOR RETURN AND GO\n*                                      DO SYSOUT ALLOCATION\nSPUTDSN  DS    0H\n         CLI   EJECTFL,C'E'            CHECK FOR EJECT             TJ#1\n         BE    EJECT2                  IF SET BRANCH TO EJECT      TJ#1\n         CLI   EJECTFL,C'F'            CHECK FOR FIRST EJECT       TJ#1\n         BNE   CHKEJCT2                IF NOT FIRST THEN BRANCH    TJ#1\n         MVI   EJECTFL,C'X'            CLEAR FIRST EJECT FLAG      TJ#1\n         B     SKPEJCT2                ALWAYS SKIP FIRST EJECT     TJ#1\nCHKEJCT2 DS    0H                                                  TJ#1\n         L     R7,EJECTNM              LOAD NUMBER OF SEP LINES    TJ#1\n         LTR   R7,R7                   IS THE NUMBER ZERO?         TJ#1\n         BZ    SKPEJCT2                BRANCH IF NO SEP LINES      TJ#1\n         LA    R4,BLNKASA              ASSUME ASA                  TJ#1\n         CLI   CCTYPE,C'M'             IS TYPE MCH?                TJ#1\n         BNE   SEPLN2                  NO, BRANCH TO PUT SEP LINES TJ#1\n         LA    R4,BLNKMCH              SET UP BLANK MCH LINE       TJ#1\nSEPLN2   DS    0H                                                  TJ#1\n         PUT   (R5),(R4)               PUT OUT BLANK LINE          TJ#1\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\n         AP    HLINES(9),=P'1'         ADD 1 TO NUMBER LINES PRINT TJ#2\n         BCT   R7,SEPLN2               BRANCH IF NOT ZERO          TJ#1\n         MVI   FIRSTFL,C'X'            CLEAR FIRST PRINT FLAG      TJ#1\n         B     SKPEJCT2                       BRANCH AROUND EJECT  TJ#1\nEJECT2   DS    0H                                                  TJ#1\n         CLI   FIRSTFL,C'F'            CHECK FOR FIRST PRINT       TJ#8\n         BNE   EJECTIT2                BRANCH TO EJECT IF NOT      TJ#8\n         L     R7,PARSBACK             LOAD ADDRESS TO PARMS       TJ#8\n         USING IKJPARMD,R7        ESTABLISH ADDRESSABILITY TO PDL  TJ#8\n         CLC   PARR(2),HALF1           CHECK FOR   ARR             TJ#8\n         BE    SKPEJCT2               ARR, BRANCH TO SKIP EJECT    TJ#8\n         DROP  R7                                                  TJ#8\nEJECTIT2 DS    0H                                                  TJ#8\n         PUT   (R5),(R4)               PUT OUT PAGE EJECT\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\n         ZAP   HLINES(9),=P'0'         ZERO LINES COUNT            TJ#2\n         MVI   FIRSTFL,C'X'            CLEAR FIRST PRINT FLAG      TJ#1\nSKPEJCT2 DS    0H                                                  TJ#1\n         CLI   FIRSTFL,C'F'            CHECK FOR FIRST PRINT       TJ#8\n         BNE   CHCKHEA2                BRANCH TO CHECK FOR HEADER  TJ#8\n         CLC   PARR(2),HALF1           CHECK FOR   ARR             TJ#8\n         BNE   CHCKHEA2            NO ARR, BRANCH TO CHECK HEADER  TJ#8\n         MVI   FIRSTFL,C'X'            CLEAR FIRST PRINT FLAG      TJ#8\n         MVC   ARRPRTLN(ARRPL),ARRPRTR                             TJ#8\n         L     R15,ARRNUM              LOAD ADDRESS OF TYPE        TJ#8\n         MVC   ARRPRTN(3),0(R15)       MOVE IN ARRANGMENT NUMBER   TJ#8\n         MVC   ARRCC,CCASATOP          ASSUME ASA CNTL             TJ#8\n         CLI   CCTYPE,C'M'             SHOULD IT BE MCH TYPE?      TJ#8\n         BNE   MVPRINT2                NO, BRANCH TO CONTINUE      TJ#8\n         MVC   ARRCC,CCMCHTOP          MOVE IN MCH CNTL            TJ#8\nMVPRINT2 DS    0H                                                  TJ#8\n         MVC   ARRPRT,=C',PRINT  '     MOVE IN ,PRINT              TJ#8\n         PUT   (R5),ARRPRTLN           PUT OUT ARRANGEMENT LINE    TJ#8\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\nCHCKDPL2 DS    0H                                                  TJ#8\n         CLC   PDUPLEX(2),HALF1        CHECK FOR DUPLEX            TJ#8\n         BNE   CKARCOP2                NO DUPLEX, CHECK COPIES     TJ#8\n         MVC   ARRPRT(80),ARRDUP       MOVE IN DUPLEX              TJ#8\n         PUT   (R5),ARRPRTLN           PUT OUT DUPLEX LINE         TJ#8\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\nCKARCOP2 DS    0H                                                  TJ#8\n         AIF   (&LGENOPT EQ 0).CKANM2  IF PARTIAL GEN OPT        JM#14\n         CLC   PCOPIES(2),HALF1        SEE IF COPY SPECIFIED       TJ#8\n         BNE   CHCKANU2                NO.....GO CHECK NUMBER      TJ#8\n         MVC   ARRPRT,=C'QUA     '     MOVE IN  QUA                TJ#8\n         MVC   ARRPRTN(3),=C'   '      BLANK OUT COPIES AREA       TJ#8\n         L     R15,SCOPIES             LOAD ADDRESS OF COPIES      TJ#8\n         LH    R1,SCOPIES+4            LOAD LENGTH OF COPY FIELD   TJ#8\n         BCTR  R1,0                    DECREMENT REGISTER 1 FOR EX TJ#8\n*                                      OF MOVE INSTRUCTION         TJ#8\n         EX    R1,MOVECOP2             EXECUTE MOVE TO MOVE COPIES TJ#8\n         PUT   (R5),ARRPRTLN           PUT OUT QUANITY LINE        TJ#8\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\n         B     CHCKANU2                                            TJ#8\nMOVECOP2 MVC   ARRPRTN(0),0(R15)       MOVE IN COPIES              TJ#8\n.CKANM2  ANOP                                                    JM#14\nCHCKANU2 DS    0H                                                  TJ#8\n         CLC   PNUMBER(2),HALF1        CHECK FOR NUMBER            TJ#8\n         BNE   SETUPEN2                NO NUMBER, GO SET UP END    TJ#8\n         MVC   ARRPRT(80),ARRNUM1      PUT OUT ,MARGIN TEXT        TJ#8\n         PUT   (R5),ARRPRTLN           PUT OUT NUMBER LINE         TJ#8\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\n         MVC   ARRPRT(80),ARRNUM2      PUT OUT ,MARGIN TEXT        TJ#8\n         PUT   (R5),ARRPRTLN           PUT OUT NUMBER LINE         TJ#8\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\nSETUPEN2 MVC   ARRPRT,=C',END    '     MOVE IN ,END                TJ#8\n         MVC   ARRPRTN(3),=C'   '      SPACE OUT ARR NUM AREA      TJ#8\n         MVC   ARRCC,HDRCNTL           MOVE IN CNTL SAVED IN HEAD  TJ#8\n         PUT   (R5),ARRPRTLN           PUT OUT ARRANGEMENT LINE    TJ#8\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\nCHCKEXP2 DS    0H                                                  TJ#8\n         CLC   PEXPRES(2),HALF1        CHECK FOR EXPRESS           TJ#8\n         BNE   CHCKHEA2                NO EXPRESS, GO CHECK HEAD   TJ#8\n         MVC   ARRPRT(80),EXPRESS      MOVE IN EXPRESS LINE        TJ#8\n         PUT   (R5),ARRPRTLN           PUT OUT EXPRESS LINE        TJ#8\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\n         DROP  R9                      DROP ADDRESSABILITY TO PDL\nCHCKHEA2 TM    VOLBIT,X'08'            TEST FOR  HEAD              TJ#8\n         BO    SKPHEAD2      YES                                   TJ#8\n         PUT   (R5),HEADER             PUT OUT PAGE 1 HEADER\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\n         AP    HLINES(9),=P'1'         ADD 1 TO NUMBER LINES PRINT TJ#2\n         MVC   HEADER2,LDSNAME         MOVE LENGTH AND 'DSNAME=' INTO\n*                                      INTO SECOND HEADER\n         MVC   HEADER2+4(1),HDRCNTL    MOVE IN CONTROL BYTE\n         MVI   OPENPRN,BLANK           BLANK OUT MEMBER NAME\n         MVC   MEMNAME(9),OPENPRN      FINISH BLANKING OUT MEMBER NAME\n         PUT   (R5),HEADER2            PUT OUT PAGE 1 HEADER 2\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\n         AP    HLINES(9),=P'1'         ADD 1 TO NUMBER LINES PRINT TJ#2\nSKPHEAD2 DS    0H                                                  TJ#8\n         L     R2,MEMTABLE             LOAD ADDRESS OF FIRST TABLE\n         MVC   LENGTH,HALF85           SET LENGTH TO 85 BYTES\n         MVC   LENGTH+2,HALF0          ZERO RESERVED BYTES\n         MVC   CNTLBYTE,HDRCNTL        MOVE IN HEADER CONTROL BYTE\n*\n***********************************************************************\n*                                                                     *\n*        LIST MEMBER NAMES                                            *\n*                                                                     *\n***********************************************************************\n*\nSCROLLER DS    0H\n         LA    R9,50                  LOAD LINE COUNT\n         ST    R2,PRESENT              SAVE ADDRESS OF CURRENT TABLE\n         LH    R7,4(R2)                LOAD NUMBER OF MEMBERS IN TABLE\n         LTR   R7,R7                   SEE IF THERE ARE ENTRIES\n         BZ    NOLIST                  NO.....GO PRINT MEMBERS\n         LA    R2,8(R2)                LOAD ADDRESS OF FIRST MEMBER\n         USING MEMDSECT,R2             ESTABLISH ADDRESSABILITY TO\n*                                      MEMBER TABLE ENTRY\nLOOP1    DS    0H\n         LA    R6,DATA                 LOAD ADDRESS OF OUTPUT BUFFER\n         MVI   DATA,BLANK              BLANK OUT OUTPUT BUFFER\n         MVC   DATA+1(79),DATA         FINISH BLANKING BUFFER\n         TM    CFIELD,HIGH             SEE IF THIS IS AN ALIAS\n         BZ    NOTALIAS                NO.....CONTINUE WITH MAIN NAME\n         BAL   R14,LOOKLOOP            GO LOOK FOR MAIN NAME\nNOTALIAS DS    0H\n         MVC   2(8,R6),MEMBER          PUT MEMBER NAME IN OUTPUT BUFFER\n         ST    R2,SAVER2               SAVE REGISTER 2\n         LA    R3,2                    LOAD NUMBER OF COLUMNS LEFT\n         LA    R8,1                    LOAD ENTRY NUMBER\nLOOP2    LA    R8,50(R8)               LOAD POINTER TO NEXT COLUMN\n*                                      ENTRY\n         CR    R8,R7                   SEE IF VALID ENTRY\n         BH    END2                    NO.....GO PRINT LINE\n         LA    R2,600(R2)              LOAD POINTER TO MEMBER NAME\n         LA    R6,30(R6)               LOAD POINTER TO NEXT OUTPUT\n*                                      BUFFER LOCATION\n         TM    CFIELD,HIGH             SEE IF THIS IS AN ALIAS\n         BZ    NOTAL2                  NO.....CONTINUE WITH MAIN NAME\n         BAL   R14,LOOKLOOP            GO LOOK FOR MAIN NAME\nNOTAL2   DS    0H\n         MVC   2(8,R6),MEMBER          PUT MEMBER NAME IN OUTPUT BUFFER\n         BCT   R3,LOOP2                DECREMENT COLUMN COUNT\nEND2     DS    0H\n         PUT   (R5),LINE               PUT OUT OUTPUT LINE\n         AP    TLINES(9),=P'1'         ADD 1 TO TOTAL  LINES PRINT TJ#8\n         AP    HLINES(9),=P'1'         ADD 1 TO NUMBER LINES PRINT TJ#2\n         L     R2,SAVER2               RELOAD REGISTER 2\n         LA    R2,MEMSECTN             LOAD POINTER TO NEXT MEMBER NAME\n         BCT   R9,MOREROW              DECREMENT ROW COUNT\n         CLI   EJECTFL,C'E'            CHECK FOR EJECT             TJ#1\n         BE    EJECT3                  IF SET BRANCH TO EJECT      TJ#1\n         CLI   EJECTFL,C'F'            CHECK FOR FIRST EJECT       TJ#1\n         BNE   CHKEJCT3                IF NOT FIRST THEN BRANCH    TJ#1\n         MVI   EJECTFL,C'X'            CLEAR FIRST EJECT FLAG      TJ#1\n         B     SKPEJCT3                ALWAYS SKIP FIRST EJECT     TJ#1\nCHKEJCT3 DS    0H                                                  TJ#1\n         L     R7,EJECTNM              LOAD NUMBER OF SEP LINES    TJ#1\n         LTR   R7,R7                   IS THE NUMBER ZERO?         TJ#1\n         BZ    SKPEJCT3                BRANCH IF NO SEP LINES      TJ#1\n         LA    R4,BLNKASA              ASSUME ASA                  TJ#1\n         CLI   CCTYPE,C'M'             IS TYPE MCH?                TJ#1\n         BNE   SEPLN3                  NO, BRANCH TO PUT SEP LINES TJ#1\n         LA    R4,BLNKMCH              SET UP BLANK MCH LINE       TJ#1\nSEPLN3   DS    0H                                                  TJ#1\n         PUT   (R5),(R4)               PUT OUT BLANK LINE          TJ#1\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\n         AP    HLINES(9),=P'1'         ADD 1 TO NUMBER LINES PRINT TJ#2\n         BCT   R7,SEPLN3               BRANCH IF NOT ZERO          TJ#1\n         MVI   FIRSTFL,C'X'            CLEAR FIRST PRINT FLAG      TJ#1\n         B     SKPEJCT3                       BRANCH AROUND EJECT  TJ#1\nEJECT3   DS    0H                                                  TJ#1\n         PUT   (R5),(R4)               PUT OUT PAGE EJECT WHEN ZERO\n         AP    GTLINES(9),=P'1'        ADD 1 TO GRAND TOTAL        TJ#8\n         ZAP   HLINES(9),=P'0'         ZERO HLINES                 TJ#2\n         MVI   FIRSTFL,C'X'            CLEAR FIRST PRINT FLAG      TJ#1\nSKPEJCT3 DS    0H                                                  TJ#1\n         B     LOOP3                   RESET COUNTERS\nMOREROW  DS    0H\n         BCT   R7,LOOP1                DECREMENT MEMBER COUNT FOR\n*                                      CURRENT TABLE\nLOOP3    L     R2,PRESENT              LOAD POINTER TO CURRENT TABLE\n         L     R2,0(R2)                LOAD POINTER TO NEXT TABLE\n         LTR   R2,R2                   SEE IF IT WAS THE LAST TABLE\n         BNZ   SCROLLER                NO.....GO LIST OUT NEXT TABLE\n*\n***********************************************************************\n*                                                                     *\n*        PRINT MEMBERS IF:                                            *\n*           PRINT SPECIFIED OR                                        *\n*           BOTH LIST AND NOPRINT WERE NOT SPECIFIED                  *\n*                                                                     *\n***********************************************************************\n*\nNOLIST   DS    0H\n         AP    GTLINES(9),TLINES       ADD UP FOR GRAND TOTAL      TJ#8\n         ZAP   TLINES(9),=P'0'         ZERO TOTAL LINES PRINTED    TJ#8\n         L     R9,PARSBACK             LOAD ADDRESS PARS ANSWER\n         USING IKJPARMD,R9             ESTABLISH ADDRESSABILITY TO PDL\n         CLC   PPRINT,HALF2            SEE IF NOPRINT SPECIFIED\n         BE    ENDMEMB                 YES....GO SKIP PRINT\n         CLC   PPRINT,HALF1            SEE IF PRINT SPECIFIED\n         BE    CONTPRT                 YES....GO PRINT MEMBERS\n         CLC   PLIST,HALF1             SEE IF LIST SPECIFIED\n         BE    ENDMEMB                 YES....GO SKIP PRINT\n         DROP  R9                      DROP ADDRESSABILITY TO PDL\nCONTPRT  DS    0H\n         L     R6,SAVER6               RESTORE REGISTER 6\n         LA    R8,INPUT                LOAD ADDRESS OF INPUT DCB\n         USING IHADCB,R8               ESTABLISH ADDRESSABILITY TO DCB\n         TM    DCBRECFM,DCBRECU        SEE IF RECFM IS UNDEFINED\n         BO    ERRORU                  NO.....GO PUT OUT ERROR MESSAGE\n         BZ    ERRORU                  ZERO...NOT FIXED OR VARIABLE SO\n*                                      GO PUT OUT ERROR MESSAGE\n         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO CLOSE LIST IN WORKAREA\n         CLOSE ((R8),),MF=(E,CLOSLST)  CLOSE INPUT DCB\n         DROP  R8                      DROP ADDRESSABILITY TO INPUT DCB\n         PUTLINE OUTPUT=(PRTMSG,SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      DATASET PRINT MESSAGE\n         LH    R4,4(R6)                LOAD LENGTH OF DSNAME\n         A     R4,FULL4                INCREMENT LENGTH FOR PUTLINE\n         SLL   R4,16                   SHIFT LENGTH TO HIGH ORDER BYTES\n         STCM  R4,15,DSNLENP           STORE LENGTH OF PUTLINE\n         PUTLINE OUTPUT=(DSNLENP,SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      DATA SET NAME MESSAGE\n         L     R2,MEMTABLE             LOAD ADDRESS OF FIRST MEMBER\n*                                      TABLE\n         LH    R3,4(R2)                LOAD NUMBER OF MEMBERS IN TABLE\n         LTR   R3,R3                   SEE IF THERE ARE ANY MEMBERS\n         BZ    ENDMEMB                 NO.....GO TO END OF SCROLLER\n         ST    R2,PRESENT              SAVE ADDRESS OF CURRENT TABLE\n         LA    R2,8(R2)                LOAD POINTER TO MEMBER NAME\nNEXTMEMB DS    0H\n         TM    CFIELD,HIGH             SEE IF THIS IS AN ALIAS ENTRY\n         BO    AGAIN                   YES....DO NOT PRINT IT\nPRINTMEM DS    0H\n         MVC   MEMNAME,MEMBER          MOVE MEMBER NAME INTO HEADER\n         MVC   JFCBELNM,MEMBER         MOVE MEMBER NAME INTO JFCBAREA\n         MVC   OPENLST,OPENCLOS        MOVE CONSTANT INTO OPEN LIST\n         OPEN  ((R8),INPUT),TYPE=J,MF=(E,OPENLST)\n*                                      OPEN INPUT DCB\n         STM   R2,R3,SAVER2            SAVE REGISTERS 2 AND 3\n         B     PRINTS                  GO PRINT MEMBER\nSEXIT    DS    0H\n         AP    GTLINES(9),TLINES       ADD UP FOR GRAND TOTAL      TJ#8\n         ZAP   TLINES(9),=P'0'         ZERO TOTAL LINES PRINTED    TJ#8\n         LM    R2,R3,SAVER2            RESTORE REGISTERS 2 AND 3\n         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO CLOSE LIST IN WORKAREA\n         CLOSE ((R8),),MF=(E,CLOSLST)  CLOSE INPUT DCB\nAGAIN    DS    0H\n         LA    R2,MEMSECTN             LOAD ADDRESS OF NEXT MEMBER\n         BCT   R3,NEXTMEMB             BRANCH TO HANDLE NEXT MEMBER\n         L     R14,PRESENT             ZERO...LOAD CURRENT TABLE\n*                                      ADDRESS\n         L     R2,0(R14)               LOAD ADDRESS OF NEXT TABLE\n         LTR   R2,R2                   SEE IF ZERO, LAST TABLE\n         BZ    ENDMEMB                 NO.....GO HANDLE END OF MEMBERS\n         ST    R2,PRESENT              SAVE ADDRESS OF CURRENT TABLE\n         LH    R3,4(R2)                LOAD NUMBER OF MEMBERS IN NEXT\n*                                      TABLE\n         LTR   R3,R3                   SEE IF ANY MEMBERS IN TABLE\n         BZ    ENDMEMB                 NO.....GO HANDLE END OF MEMBERS\n         LA    R2,8(R2)                LOAD POINTER TO MEMBER NAME\n         B     NEXTMEMB                GO GET NEXT MEMBER\nENDMEMB  DS    0H\n         L     R2,MEMTABLE             LOAD POINTER TO FIRST TABLE\nFREETABS DS    0H\n         LR    R1,R2                   LOAD AREA TO BE FREED\n         L     R2,0(R2)                LOAD POINTER TO NEXT TABLE\n         L     R0,MEMDATL              LOAD SIZE OF AREA TO BE FREED\n         FREEMAIN R,LV=(0),A=(1)       FREE STORAGE GETMAINED FOR TABLE\n         LTR   R2,R2                   SEE IF THERE WAS ANOTHER TABLE\n         BNZ   FREETABS                YES....GO FREE NEXT TABLE\n         L     R6,SAVER6               RESTORE REGISTER 6\n         LA    R8,INPUT                LOAD POINTER TO INPUT DCB\n         USING IHADCB,R8               ESTABLISH ADDRESSABILITY TO DCB\n         TM    DCBOFLGS,DCBOFOPN       SEE IF INPUT DCB IS STILL OPEN\n         BNO   EXITMSG                 NO.....GO HANDLE NEXT DATASET\n         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO CLOSE LIST IN WORKAREA\n         CLOSE ((R8),),MF=(E,CLOSLST)  CLOSE INPUT DCB\n         DROP  R8                      DROP ADDRESSABILITY TO DCB\n         B     EXITMSG                 GO HANDLE NEXT DATASET\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        PUT OUT SYNAD ERROR MESSAGE,                                 *\n*           GO FREE MEMBER TABLES, AND                                *\n*           CONTINUE WITH NEXT DATASET                                *\n*                                                                     *\n***********************************************************************\n*\nSERRI    DS    0H\n         PUTLINE OUTPUT=(SYNADI,SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      DATASET NOT PRINTED DUE TO SYNAD\n*                                      ERROR ON INPUT DATASET MESSAGE\n         B     ENDMEMB                 GO FREE MEMBER TABLES\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        SEARCH FOR MAIN NAME,                                        *\n*           SAME TTR AND NOT AN ALIAS                                 *\n*                                                                     *\n***********************************************************************\n*\nLOOKLOOP DS    0H\n         STM   R3,R4,SAVER3            SAVE REGISTERS 3 AND 4\n         L     R3,MEMTABLE             LOAD ADDRESS OF FIRST TABLE\n         USING MEMDSECT,R3             ESTABLISH ADDRESSABILITY TO\n*                                      MEMBER ENTRY\nLOOP4    DS    0H\n         ST    R3,CURRENT              SAVE ADDRESS OF PRESENT TABLE\n         LH    R4,4(R3)                LOAD NUMBER OF ELEMENTS IN TABLE\n         LTR   R4,R4                   SEE IF THERE ARE ZERO ELEMENTS\n         BZ    NOMAIN                  YES....GO HANDLE MAIN NOT FOUND\n         LA    R3,8(R3)                LOAD ADDRESS OF FIRST MEMBER\nLOOP5    DS    0H\n         CLC   MEMTTR,8(R2)            SEE IF TTRS ARE THE SAME\n         BE    SAMETTR                 YES....GO SEE IF IT IS AN ALIAS\nENDLP5   DS    0H\n         LA    R3,MEMSECTN             LOAD ADDRESS OF NEXT MEMBER\n         BCT   R4,LOOP5                DECREMENT MEMBER COUNT\n         L     R3,CURRENT              LOAD ADDRESS OF THIS TABLE\n         L     R3,0(R3)                LOAD ADDRESS OF NEXT TABLE\n         LTR   R3,R3                   SEE IF IT WAS THE LAST TABLE\n         BNZ   LOOP4                   NO.....GO CHECK NEXT TABLE\n         B     NOMAIN                  GO HANDLE MAIN NOT FOUND\nSAMETTR  DS    0H\n         TM    CFIELD,HIGH             SEE IF THIS IS ALSO AN ALIAS\n         BO    ENDLP5                  YES....GO LOOK FOR ANOTHER TTR\n         MVC   11(8,R6),MEMBER         MOVE MEMBER NAME INTO OUTPUT\n         B     ENDLOOK                 GO TO RETURN TO CALLER\nNOMAIN   DS    0H\n         MVC   11(8,R6),ALIAS          INDICATE THIS IS AN ALIAS\nENDLOOK  DS    0H\n         LM    R3,R4,SAVER3            RESTORE REGISTERS 3 AND 4\n         BR    R14                     RETURN TO CALLER\n         DROP  R3                      DROP ADDRESSABILITY TO TABLE\n*\nCONTINUE DS    0H\n         L     R6,24(R6)               LOAD POINTER TO NEXT DSNAME ON\n*                                      CHAIN\n         C     R6,ENDCHAIN             SEE IF END OF CHAIN IS REACHED\n         BNE   NEXT                    NO.....GO DO NEXT DATASET NAME\nCLOSDCBS DS    0H\n         TM    INPUT+48,DCBOFOPN       SEE IF INPUT DCB IS STILL OPEN\n         BNO   CHKOUTA                 NO.....GO CHECK DCB FOR ASA CODE\n         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO CLOSE LIST WORKAREA\n         LA    R5,INPUT                LOAD POINTER TO INPUT DCB\n         CLOSE ((R5),),MF=(E,CLOSLST)  CLOSE INPUT DCB\nCHKOUTA  DS    0H\n         TM    OUTPUTA+48,DCBOFOPN     SEE IF OUTPUT DCB FOR ASA WAS\n*                                      OPENED\n         BNO   CHKOUTM                 NO.....GO CHECK DCB FOR MACHINE\n*                                      CODE\n         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO CLOSE LIST WORKAREA\n         LA    R5,OUTPUTA              LOAD POINTER TO ASA CODE DCB\n         CLOSE ((R5),),MF=(E,CLOSLST)  CLOSE ASA CODE OUTPUT DCB\n         LA    R1,PRINTA               LOAD ADDRESS OF PRINT DDNAME\n         BAL   R2,FREEDD               GO FREE ASA CODE OUTPUT DDNAME\nCHKOUTM  DS    0H\n         TM    OUTPUTM+48,DCBOFOPN     SEE IF OUTPUT DCB FOR MACHINE\n*                                      CODE WAS OPENED\n         BNO   RETURN                  NO.....GO FREE GETMAINED AREAS\n*                                      AND RETURN\n         MVC   CLOSLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO CLOSE LIST WORKAREA\n         LA    R5,OUTPUTM              LOAD POINTER TO MACHINE CODE DCB\n         CLOSE ((R5),),MF=(E,CLOSLST)  CLOSE MACHINE CODE OUTPUT DCB\n         LA    R1,PRINTM               LOAD ADDRESS OF PRINT DDNAME\n         BAL   R2,FREEDD               GO FREE MACHINE CODE OUTPUT\n*                                      DDNAME\n*\n***********************************************************************\n*                                                                     *\n*        CLEANUP AREAS GETMAINED BY PARS,                             *\n*           SET RETURN CODE, RESTORE REGISTERS AND                    *\n*           RETURN TO CALLER                                          *\n*                                                                     *\n***********************************************************************\n*\nRETURN   DS    0H\n         AP    GTLINES,TLINES          ADD LEFT OVER LINES TO TOT  TJ#8\n         MVC   GRANTOT(10),=X'40202020202020202120'     ED PATTERN TJ#8\n         ED    GRANTOT,GTLINES+4         MOVE IN TOTAL LINES       TJ#8\n         PUTLINE OUTPUT=(LINMSGH,SINGLE,DATA),MF=(E,IOPLSECT)      TJ#8\n*                              PUT OUT TOTAL LINES PRINTED MESSAGE TJ#8\n         LA    R1,=CL8'PRINTI'         SET UP DDNAME FOR FREEDD    TJ#1\n         BAL   R2,FREEDD               BRANCH TO FREE PRINTI       TJ#1\n         IKJRLSA PARSBACK              RELEASE AREAS GETMAINED BY PARS\n         SPACE\nFINISH   DS    0H                                                JM#14\n         FINISH RC=0,GEN=GEN           EXIT THIS PLACE           JM#14\n*\n***********************************************************************\n*                                                                     *\n*        ROUTINE TO CONVERT NONZERO RETURN CODES TO DECIMAL           *\n*           FOR DISPLAY                                               *\n*                                                                     *\n***********************************************************************\n*\nSETCODE  DS    0H\n         CVD   R8,DEC                  CONVERT RETURN CODE TO DECIMAL\n         UNPK  CONV(8),DEC(8)          UNPACK RETURN CODE\n         MVZ   CONV+1(7),CONV          MOVE ZONES IN CONVERTED RETURN\n*                                      CODE\n         MVC   RETNCD(2),HALF12        MOVE LENGTH OF DATA FOR PUTLINE\n         MVC   RETNCD+2(2),HALF0       MOVE IN ZEROES FOR PUTLINE\n         BR    R14                     RETURN\n*\n***********************************************************************\n*                                                                     *\n*        FREE AND REALOCATE PRINTX FILE AS SYSOUT                     *\n*                                                                     *\n***********************************************************************\n*\nALLOCOUT DS    0H\n         STM   14,9,ALCSAVE            SAVE WORK REGISTERS\n         ST    R5,ODCBADDR             SAVE OUTPUT DCB POINTER   JM#14\n         LR    R1,R3                   LOAD POINTER TO DDNAME\n         BAL   R2,FREEDD               BRANCH TO FREE ROUTINE\n         LTR   R8,R8                   SEE IF RETURN CODE FROM FREE IS\n*                                      ZERO\n         BNZ   OPENFAIL                NO.....GO PUT OUT OPEN FAILED\n         LA    R8,REQBLK               LOAD POINTER TO REQUEST BLOCK\n         ST    R8,RBPTR                INITIALIZE REQUEST BLOCK POINTER\n         MVI   RBPTR,S99RBPND          INDICATE END OF PARAMETER LIST\n         USING S99RB,R8                ESTABLISH ADDRESSABILITY TO\n*                                      REQUEST BLOCK\n         MVC   S99RBLN(RBLEN),REQBLKC  INITALIZE RB\n         LA    R1,TEXTPTRS             LOAD POINTER TO TEXT POINTERS\n         ST    R1,S99TXTPP             STORE POINTER IN RB\n         DROP  R8                      DROP ADDRESSABILITY TO RB\n         USING S99TUPL,R1              ESTABLISH ADDRESSABILITY TO\n*                                      TEXT UNIT POINTER LIST\n         LA    R2,TEXTA                LOAD POINTER TO FIRST TEXT UNIT\n         ST    R2,S99TUPTR             STORE POINTER IN TUPL\n         USING S99TUNIT,R2             ESTABLISH ADDRESSABILITY TO\n*                                      TEXT UNIT\n         MVC   S99TUKEY(TEXTALEN),TEXTAC  INITIALIZE TEXT UNIT A\n         MVC   S99TUPAR(8),0(R3)       MOVE IN PARAMETER (DDNAME)\n         LA    R1,4(R1)                LOAD POINTER TO NEXT TEXT UNIT\n*                                      POINTER\n         LA    R2,TEXTB                LOAD POINTER TO TEXT UNIT B\n         ST    R2,S99TUPTR             STORE POINTER IN TUPL\n         MVC   S99TUKEY(TEXTBLEN),TEXTBC  INITIALIZE TEXT UNIT B\n*\n***********************************************************************\n*                                                                     *\n*        SET UP ADDRESSABILITY TO PDL                                 *\n*           AND SEE IF SYSOUT CLASS/DEST ARE PRESENT                  *\n*           ALSO FORMS/TRAIN/FCB/PROG.                          GTEL  *\n*           ALSO CGROUP                                          JM#14*\n***********************************************************************\n*\n         L     R9,PARSBACK             LOAD ADDRESS PARS ANSWER\n         USING IKJPARMD,R9             ESTABLISH ADDRESSABILITY TO PDL\n         CLC   PCLASS(2),HALF1         SEE IF CLASS SPECIFIED\n         BNE   NOCLASS                 NO.....GO CHECK FOR DESTINATION\n         L     R7,SCLASS               LOAD POINTER TO SYSOUT CLASS\n         MVC   S99TUPAR,0(R7)          MOVE CLASS INTO TEXT UNIT B\nNOCLASS  DS    0H\n         CLC   PDEST(2),HALF1          SEE IF DEST SPECIFIED\n         BNE   NODEST                  NO.....GO CHECK FOR HOLD\n         LA    R1,4(R1)                LOAD POINTER TO NEXT TEXT UNIT\n*                                      POINTER\n         LA    R2,TEXTC                LOAD POINTER TO TEXT UNIT C\n         ST    R2,S99TUPTR             STORE POINTER IN TUPL\n         MVC   S99TUKEY(TEXTCLEN),TEXTCC  INITIALIZE TEXT UNIT C\n         L     R7,SDEST                LOAD POINTER TO DESTINATION\n         LH    R6,SDEST+4              LOAD LENGTH OF DESTINATION ID\n         STH   R6,S99TULNG             STORE LENGTH OF DEST IN TU\n         BCTR  R6,0                    DECREMENT R6 FOR EX OF MOVE\n         EX    R6,MOVEDEST             MOVE DEST INTO TU\nMOVEDEST MVC   S99TUPAR,0(R7)          MOVE TO BE EXECUTED\n*\nNODEST   DS    0H\n         CLC   PHOLD(2),HALF1          SEE IF HOLD SPECIFIED\n         BNE   NOHOLD                  NO.....GO CHECK FOR COPIES\n         LA    R1,4(R1)                LOAD POINTER TO NEXT TEXT UNIT\n*                                      POINTER\n         LA    R2,TEXTDC               LOAD POINTER TO TEXT UNIT C\n         ST    R2,S99TUPTR             STORE POINTER IN TUPL\nNOHOLD   DS    0H\n         CLC   PCOPIES(2),HALF1        SEE IF COPY SPECIFIED\n         BNE   NOCOPY                  NO.....GO ZERO ECB\n         AIF   (&LGENOPT EQ 0).SKPCK01 IF PARTIAL GEN OPT        JM#14\n         CLC   PARR(2),HALF1           CHECK FOR   ARR             TJ#4\n         BE    NOCOPY              LET ARR HANDLE  COPIES          TJ#4\n.SKPCK01 ANOP                                                    JM#14\n         LA    R1,4(R1)                LOAD PNTR TO NEXT TEXT UNIT PTR\n         LA    R2,TEXTE                LOAD POINTER TO TEXT UNIT E\n         ST    R2,S99TUPTR             STORE POINTER IN TUPL\n         MVC   S99TUKEY(TEXTELEN),TEXTEC  INITIALIZE TEXT UNIT E\n         L     R7,SCOPIES              LOAD POINTER TO COPY FIELD\n         LH    R6,SCOPIES+4            LOAD LENGTH OF COPY FIELD\n         BCTR  R6,0                    DECREMENT R6 FOR EX OF PACK\n         EX    R6,PACKCOPY             EXECUTE PACK TO CONVERT COPIES\n*                                      TO ZONED DECIMAL\n         CVB   R6,DEC                  CONVERT ZONED TO BINARY\n         STCM  R6,1,S99TUPAR           STORE NUMBER OF COPIES IN TU\nNOCOPY   DS    0H\n*********** START OF GTE MOD\n         CLC   PFORMS(2),HALF1         SEE IF FORMS SPECIFIED\n         BNE   NOFORMS                 NO.....GO CHECK TRAIN\n         LA    R1,4(R1)                LOAD POINTER TO NEXT TEXT UNIT\n*                                      POINTER\n         LA    R2,TEXTI                LOAD POINTER TO TEXT UNIT I\n         ST    R2,S99TUPTR             STORE POINTER IN TUPL\n         MVC   S99TUKEY(TEXTILEN),TEXTIC  INITIALIZE TEXT UNIT I\n         L     R7,RFORMS               LOAD POINTER TO FORMS FIELD\n         LH    R6,RFORMS+4             LOAD LENGTH OF FORMS FIELD\n         STH   R6,S99TULNG             STORE LENGTH IN TUE\n         BCTR  R6,0                    DECREMENT LENGTH\n         EX    R6,MOVEDEST             MOVE FORMS INTO FIELD\nNOFORMS  DS    0H\n         CLC   PTRAIN(2),HALF1         SEE IF TRAIN SPECIFIED\n         BNE   NOTRAIN                 NO.....GO CHECK FCB\n         LA    R1,4(R1)                LOAD POINTER TO NEXT TEXT UNIT\n*                                      POINTER\n         LA    R2,TEXTH                LOAD POINTER TO TEXT UNIT G\n         ST    R2,S99TUPTR             STORE POINTER IN TUPL\n         MVC   S99TUKEY(TEXTHLEN),TEXTHC  INITIALIZE TEXT UNIT H\n         L     R7,RTRAIN               LOAD POINTER TO TRAIN FIELD\n         LH    R6,RTRAIN+4             LOAD LENGTH OF TRAIN FIELD\n         STH   R6,S99TULNG             SAVE LENGTH OF FCBE\n         BCTR  R6,0                    DECREMENT FOR EX\n         EX    R6,MOVEDEST             MOVE FCB INTO TU\nNOTRAIN  DS    0H\n         CLC   PFCB(2),HALF1           SEE IF FCB  SPECIFIED\n         BNE   NOFCB                   NO.....GO ZERO ECB\n         LA    R1,4(R1)                LOAD POINTER TO NEXT TEXT UNIT\n*                                      POINTER\n         LA    R2,TEXTG                LOAD POINTER TO TEXT UNIT G\n         ST    R2,S99TUPTR             STORE POINTER IN TUPL\n         MVC   S99TUKEY(TEXTGLEN),TEXTGC  INITIALIZE TEXT UNIT G\n         L     R7,RFCB                 LOAD POINTER TO FCB FIELD\n         LH    R6,RFCB+4               LOAD LENGTH OF FCB FIELD\n         STH   R6,S99TULNG             SAVE LENGTH OF FCB IN TUE\n         BCTR  R6,0                    DECREMENT\n         EX    R6,MOVEDEST             MOVE FCB TO TU\nNOFCB    DS    0H\n         CLC   PPROG(2),HALF1          SEE IF PROG SPECIFIED\n         BNE   NOPROG                  NO.....GO CHECK CGROUP\n         LA    R1,4(R1)                LOAD POINTER TO NEXT TEXT UNIT\n*                                      POINTER\n         LA    R2,TEXTJ                LOAD POINTER TO TEXT UNIT J\n         ST    R2,S99TUPTR             STORE POINTER IN TUPL\n         MVC   S99TUKEY(TEXTJLEN),TEXTJC  INITIALIZE TEXT UNIT J\n         L     R7,RPROG                LOAD POINTER TO PROG FIELD\n         LH    R6,RPROG+4              LOAD LENGTH OF PROG FIELD\n         STH   R6,S99TULNG             SAVE LENGTH OF PROG IN TUE\n         BCTR  R6,0                    DECREMENT FOR MOVE\n         EX    R6,MOVEDEST             MOVE PROG TO TU\nNOPROG   DS    0H\n********* END OF GTE MOD\n         CLC   PCCGROUP(2),HALF1       SEE IF CGROUP SPECIFIED   JM#14\n         BNE   NOCGROUP                NO.....GO ZERO ECB        JM#14\n         LA    R1,4(R1)                LOAD PTR TO NEXT TU PTR   JM#14\n         LA    R2,TEXTK                LOAD PTR TO TEXT UNIT K   JM#14\n         ST    R2,S99TUPTR             STORE POINTER IN TUPL     JM#14\n         MVC   S99TUKEY(TEXTKLEN),TEXTKC INIT TEXT UNIT K        JM#14\n         SR    R8,R8                   ZERO COUNTER              JM#14\n         LA    R3,4(R2)                POINT TO FIRST SUBFIELD   JM#14\n         USING S99TUFLD,R3             ADDRESS THE TU FIELDS     JM#14\n         LA    R5,CGRPVAL              POINT TO PDE FOR CGROUP   JM#14\nCGRP01   DS    0H                      LOOP THROUGH CGROUPS      JM#14\n         MVC   S99TULEN(2),=X'0001'    ASSUME COUNT =< 255 (FF)  JM#14\n         L     R7,0(R5)                LOAD PTR TO THE CGROUP    JM#14\n         LH    R6,4(R5)                LOAD LENGTH OF FIELD      JM#14\n         BCTR  R6,0                    REDUCE FOR PACK           JM#14\n         EX    R6,PACKCGRP             PACK THE COPY GROUP VALUE JM#14\n         CVB   R15,CGRPVALD            CONVERT TO BINARY         JM#14\n         STCM  R15,B'0001',S99TUPRM    STORE THE CGROUP VALUE    JM#14\n         LA    R8,1(R8)                COUNT THIS CGROUP         JM#14\n         C     R8,FULL10               HAVE WE DONE 10 CGROUPS   JM#14\n         BNL   CGRP02                  YES - FINISH UP TUE'S     JM#14\n         LA    R7,8(R5)                POINT AT CHAIN WORD       JM#14\n         TM    0(R7),X'FF'             IS THIS THE LAST VALUE    JM#14\n         BO    CGRP02                  YES - FINISH UP TUE'S     JM#14\n         L     R5,8(R5)                POINT AT NEXT PDE         JM#14\n         LA    R3,3(R3)                POINT TO NEXT TUE AREA    JM#14\n         B     CGRP01                  GO DO NEXT CGROUP VALUE   JM#14\n         DROP  R3                                                JM#14\nCGRP02   DS    0H                                                JM#14\n         STH   R8,S99TUNUM             SAVE THE CGROUP COUNT     JM#14\nNOCGROUP DS    0H                                                JM#14\n         LA    R1,4(R1)                LOAD POINTER TO NEXT TEXT UNIT\n*                                      POINTER\n         LA    R2,TEXTFC               LOAD POINTER TO TEXT UNIT F\n*                                      PERMANENTLY ALLOCATED ATTRIBUTE\n         ST    R2,S99TUPTR             STORE POINTER IN TUPL\n         MVI   S99TUPTR,S99TUPLN       INDICATE END OF TEXT UNIT\n*                                      POINTER LIST\n         DROP  R1,R2                   DROP ADDRESSABILITY       JM#14\n         LA    R1,RBPTR                LOAD ADDRESS OF REQUEST BLOCK\n*                                      POINTER\n         DYNALLOC                      ISSUE DYNAMIC ALLOCATION SVC\n         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO\n         BNZ   ALCFAIL                 NO.....GO AND CALL DAIR FAIL\n         MVC   OPENLST,OPENCLOS        MOVE OPEN(CLOSE) LIST CONSTANT\n*                                      INTO WORKAREA\n*                                                                JM#14\n*        CHECK FOR THE PRESENCE OF 3800 KEYWORDS.                JM#14\n*        IF ANY ARE PRESENT MOVE THEM TO WORKAREA                JM#14\n*        AND SET FLAGS THAT INDICATE THEIR PRESENCE.             JM#14\n*                                                                JM#14\n         MVI   P3800FLG,X'00'          INITIALIZE FLAG BYTE      JM#14\n         AIF   (&LGENOPT EQ 0).CKCHRS  IF PARTIAL GEN SELECTED   JM#14\nCHKMODFY CLC   PCMODIFY,HALF1          IF MODIFY NOT SPECIFIED   JM#14\n         BNE   CKFLASH                    THEN CHECK FOR FLASH   JM#14\n         MVC   MODIFYID(4),BLANKS      INITIALIZE THE FIELD      JM#14\n         LA    R15,MODIFYID            POINT AT THE FIELD        JM#14\n         L     R14,MDFYVAL             POINT AT THE PARM         JM#14\n         LH    R1,MDFYVAL+4            GET THE LENGTH            JM#14\n         BCTR  R1,0                    REDUCE R1 FOR MOVE        JM#14\n         EX    R1,MOVE3800             MOVE FIELD TO WORKAREA    JM#14\n         OI    P3800FLG,P38MODFY       SET FLAG BIT              JM#14\n         CLC   PCMODTRC,HALF1          IF MODTRC NOT SPECIFIED   JM#14\n         BNE   CKFLASH                    THEN CHECK FOR FLASH   JM#14\n         MVI   MODTRCID,X'00'          INITIALIZE THE FIELD      JM#14\n         LA    R15,MODTRCID            POINT AT THE FIELD        JM#14\n         L     R14,MTRCVAL             POINT AT THE PARM         JM#14\n         EX    0,MOVE3800              MOVE FIELD TO WORKAREA    JM#14\n         OI    P3800FLG,P38MDTRC       SET FLAG BIT              JM#14\nCKFLASH  CLC   PCFLASH,HALF1           IF FLASH NOT SPECIFIED    JM#14\n         BNE   CHKCHARS                   THEN CHECK FOR CHARS   JM#14\n         MVC   FLASHID(4),BLANKS       INITIALIZE THE FIELD      JM#14\n         LA    R15,FLASHID             POINT AT THE FIELD        JM#14\n         L     R14,FLSHVAL             POINT AT THE PARM         JM#14\n         LH    R1,FLSHVAL+4            GET THE LENGTH            JM#14\n         BCTR  R1,0                    REDUCE R1 FOR MOVE        JM#14\n         EX    R1,MOVE3800             MOVE FIELD TO WORKAREA    JM#14\n         OI    P3800FLG,P38FLASH       SET FLAG BIT              JM#14\n         CLC   PCFCOUNT,HALF1          IF FCOUNT NOT SPECIFIED   JM#14\n         BNE   CHKCHARS                   THEN CHECK FOR CHARS   JM#14\n         MVC   FLASHCNC(4),BLANKS      INITIALIZE THE FIELD      JM#14\n         LA    R15,FLASHCNC            POINT AT THE FIELD        JM#14\n         L     R14,FCNTVAL             POINT AT THE PARM         JM#14\n         LH    R1,FCNTVAL+4            GET THE LENGTH            JM#14\n         BCTR  R1,0                    REDUCE R1 FOR MOVE        JM#14\n         EX    R1,MOVE3800             MOVE FIELD TO WORKAREA    JM#14\n         EX    R1,PACKFCNT             PACK THE FLASH COUNT      JM#14\n         CVB   R15,FLASHCND            CONVERT TO BINARY         JM#14\n         STCM  R15,B'0001',FLASHCNT    STORE THE LENGTH          JM#14\n         OI    P3800FLG,P38FLCNT       SET FLAG BIT              JM#14\n.CKCHRS  ANOP                                                    JM#14\nCHKCHARS DS    0H                                                JM#14\n         CLC   PCCHARS,HALF1           IF CHARS NOT SPECIFIED    JM#14\n         BNE   CHKBURST                   THEN CHECK FOR TRC     JM#14\n         MVC   CHARSETS(16),BLANKS     INITIALIZE THE FIELD      JM#14\n         LA    R15,CHARSETS            POINT AT THE FIELD        JM#14\n         LA    R3,CHARVAL              POINT AT THE PCE          JM#14\n         L     R14,0(R3)               POINT AT THE PARM         JM#14\n         LH    R1,4(R3)                GET THE LENGTH            JM#14\n         BCTR  R1,0                    REDUCE R1 FOR MOVE        JM#14\n         EX    R1,MOVE3800             MOVE FIELD TO WORKAREA    JM#14\n         OI    P3800FLG,P38CHARS       SET FLAG BITS             JM#14\n         LA    R2,1                    SET CHARS COUNTER         JM#14\n         CLI   8(R3),X'FF'             IF AT END OF PCES         JM#14\n         BE    CHKBURST                   THEN CHECK FOR BURST   JM#14\nCKCHRNX  LA    R15,4(R15)              POINT AT THE FIELD        JM#14\n         L     R3,8(R3)                POINT AT THE PCE          JM#14\n         L     R14,0(R3)               POINT AT THE PARM         JM#14\n         LH    R1,4(R3)                GET THE LENGTH            JM#14\n         BCTR  R1,0                    REDUCE R1 FOR MOVE        JM#14\n         EX    R1,MOVE3800             MOVE FIELD TO WORKAREA    JM#14\n         LA    R2,1(R2)                BUMP UP CHARS COUNTER     JM#14\n         C     R2,=F'4'                IF WE ARE AT 4 (OR MORE)  JM#14\n         BE    CHKBURST                   THEN WE ARE DONE       JM#14\n         CLI   8(R3),X'FF'             IF NOT AT END OF PCES     JM#14\n         BNE   CKCHRNX                    THEN CHECK NEXT CHARS  JM#14\nCHKBURST DS    0H                                                JM#14\n         AIF   (&LGENOPT EQ 0).CKTRC1  IF PARTIAL GEN SELECTED   JM#14\n         CLC   PCBURST,HALF0   DID USER SPECIFY BURST OVERRIDE   JM#14\n         BE    CHKTRC01      NO...                               JM#14\n         CLC   PCBURST,HALF1   DID USER SPECIFY NOBURST          JM#14\n         BE    CHKTRC01      YES...                              JM#14\n         CLC   BRSTVAL,HALF1   TRC SPECIFIED - WAS IT YES??      JM#14\n         BNE   CHKTRC01      NO....                              JM#14\n         OI    P3800FLG+1,P38BURST     INDICATE BURST=Y          JM#14\n*                                                                JM#14\n*        CHECK FOR THE PRESENCE OF \"TRC\" OR \"TRC(YES)\"           JM#14\n*        AND ADD OPTCD=J TO DCB BEFORE OPEN IF THERE.            JM#14\n*                                                                JM#14\n.CKTRC1  ANOP                                                    JM#14\nCHKTRC01 DS    0H                                                JM#14\n         L     R5,ODCBADDR             LOAD ADDRESS OF DCB       JM#14\n         USING IHADCB,R5               ESTABLISH DCB ADDRESSBLTY JM#14\n         CLC   PCTRC,HALF0     DID USER SPECIFY TRC OVERRIDE     JM#14\n         BE    OPEN5OUT      NO...                               JM#14\n         CLC   PCTRC,HALF1     DID USER SPECIFY NOTRC            JM#14\n         BE    OPEN5OUT      YES...                              JM#14\n         CLC   TRCVAL,HALF1    TRC SPECIFIED - WAS IT YES??      JM#14\n         BNE   OPEN5OUT      NO....                              JM#14\n         OI    DCBOPTCD,DCBOPTJ        SETUP OPTCD=J             JM#14\nOPEN5OUT DS    0H                                                JM#14\n         OPEN  ((R5),(OUTPUT)),MF=(E,OPENLST)\n         DROP  R5                      DROP DCB ADDRESSABILITY   JM#14\n         TM    48(R5),DCBOFOPN         SEE IF DCB OPENED SUCCESSFULLY\n         BNO   OPENFAIL                NO.....GO PUT OUT OUTPUT DCB\n*                                      NOT OPENED MESSAGE\n*                                                                JM#14\n*        CHECK TO SEE IF ANY 3800 RELATED PARAMETER HAS BEEN     JM#14\n*        SPECIFIED - IF SO THEN ISSUE THE SETPRT MACRO FOR       JM#14\n*        THE APPROPRIATE FIELDS.                                 JM#14\n*                                                                JM#14\nCHK3800F DS    0H                                                JM#14\n         TM    P3800FLG,X'FF'          IF NO 3800 ITEMS SPECD.   JM#14\n         BZ    ALLOCEND                   THEN GO RETURN         JM#14\n         LA    R4,SETPRTD              POINT AT SETPRT           JM#14\n         USING SETPRT,R4               GET ADDRESSABILITY        JM#14\n         MVC   SETPRTD(SPLEN),SETPRTC  MOVE SETPRT TO WORKAREA   JM#14\n         LA    R15,MSGAREA             LOAD THE MESSAGE ADDRESS  JM#14\n         ST    R15,@SPMSGAD            STORE MESSAGE ADDRESS     JM#14\n         ST    R5,@SPDCBAD             STORE DCB ADDRESS         JM#14\n         OC    @SPFLAG2(1),P3800FLG+1  OR IN THE FLAGS (BURST)   JM#14\n         TM    P3800FLG,P38CHAR1+P38CHAR2+P38CHAR3+P38CHAR4      JM#14\n         BZ    CHKMODID                IF NO CHARS - CHK MODIFY  JM#14\n         MVC   @SPCHAR1(16),CHARSETS   MOVE NAMES TO SETPRT      JM#14\nCHKMODID DS    0H                                                JM#14\n         AIF   (&LGENOPT EQ 0).DOSPRT  IF PARTIAL GEN SELECTED   JM#14\n         TM    P3800FLG,P38MODFY       IF NO MODIFY SPECD.       JM#14\n         BZ    CHKFLASH                   THEN CHECK FOR FLASH   JM#14\n         MVC   @SPMODID(4),MODIFYID    MOVE IN MODIFY NAME       JM#14\n         TM    P3800FLG,P38MDTRC       IF NO MODIFY TRC SPECD.   JM#14\n         BZ    CHKFLASH                   THEN CHECK FOR FLASH   JM#14\n         MVC   @SPMDTRC(1),MODTRCID    MOVE IN TRC IDENTIFICTN.  JM#14\nCHKFLASH DS    0H                                                JM#14\n         TM    P3800FLG,P38FLASH       IF NO FLASH SPECIFIED     JM#14\n         BZ    DOSETPRT                   THEN FINISH SETPRT     JM#14\n         MVC   @SPFLASH(4),FLASHID     MOVE IN THE FLASH-ID      JM#14\n         TM    P3800FLG,P38FLCNT       IF NO FLASH COUNT SPECD.  JM#14\n         BZ    DOSETPRT                   THEN FINISH SETPRT     JM#14\n         MVC   @SPFLCNT,FLASHCNT       MOVE IN THE FLASH COUNT   JM#14\n.DOSPRT  ANOP                                                    JM#14\nDOSETPRT DS    0H                                                JM#14\n         SETPRT MF=(E,(R4))            DO THE SETPRT             JM#14\n         LTR   R15,R14                 IF RETURN CODE IS X'00'   JM#14\n         BZ    ALLOCEND                   THEN END ROUTINE       JM#14\n         PUTLINE OUTPUT=(MSGAREA,SINGLE,DATA),MF=(E,IOPLSECT)    JM#14\n         DROP  R4,R9                   DROP ADDRESSABILITY       JM#14\nALLOCEND DS    0H                                                JM#14\n         LM    14,9,ALCSAVE            RESTORE REGISTERS\n         BR    R14                     RETURN TO CALLER\nALCFAIL  DS    0H\n         LA    R1,REQBLK               LOAD ADDRESS OF REQUEST BLOCK\n         MVI   DFID+1,DFSVC99          SET DAIR FAIL FOR SVC 99 ERROR\n         BAL   R2,DAIRFAIL             LOAD ADDRESS OF OPEN FAIL AND\n*                                      BRANCH TO DAIRFAIL ROUTINE\nOPENFAIL DS    0H\n         PUTLINE OUTPUT=(OPENMSG,SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      OUTPUT DCB NOT OPEND MESSAGE\n         S     R3,FULL4                GET POINTER TO PUTLINE DDNAME\n         PUTLINE OUTPUT=((R3),SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      DDNAME\n         B     CLOSDCBS                GO CLOSE DCBS AND RETURN\n*\n***********************************************************************\n*                                                                     *\n*        INVOKE DAIR TO FREE FILENAME VIA CALLTSSR                    *\n*           AND CHECK FOR ZERO RETURN CODE                            *\n*                                                                     *\n***********************************************************************\n*\nFREEDD   DS    0H\n         MVC   DAP18(DAPB18L),DAPB18C  INITIALIZE DAIR PARAMETER BLOCK\n*                                      18 (FREE BY DATASET)\n         LA    R4,DAP18                LOAD ADDRESS OF DAPB\n         USING DAPB18,R4               ESTABLISH ADDRESSABILITY TO\n         CLC   0(8,R1),=CL8'PRINTI'    IS THIS THE INPUT DATASET?  TJ#1\n         BNE   SKPDELCK                IF NOT THEN CONTINUE        TJ#1\n         L     R8,PARSBACK       LOAD ADDRESS PARS ANSWER          TJ#1\n         USING IKJPARMD,R8       ESTABLISH ADDRESSABILITY TO PDL   TJ#1\n         CLC   PDELETE(2),HALF1        WAS DELETE SPECIFIED?       TJ#1\n         BNE   SKPDELCK                IF NOT SKIP MOVING IN DEL   TJ#1\n         CLI   NODELTF,C'N'            CHECK DELETE FLAG           TJ#1\n         BE    SKPDELCK                IF NO, SKIP MOVING IN DEL   TJ#1\n         MVI   DA18DPS2,X'04'          MOVE IN DELETE DISPOSITION  TJ#1\n         DROP  R8                                                  TJ#1\nSKPDELCK DS    0H                                                  TJ#1\n*                                      DAPB\n         SLR   R8,R8                   INITIALIZE REGISTER 8 TO ZERO\n*                                      RETURN CODE\n         MVC   DA18DDN,0(R1)           MOVE DDNAME INTO DAPB\n         SLR   R7,R7                   ZERO REGISTER 7\n         ST    R7,ECB                  STORE REGISTER 7 AS DUMMY ECB\n         LA    R1,DAPLSECT             LOAD ADDRESS OF DAPL\n         USING DAPL,R1                 ESTABLISH ADDRESSABILITY TO DAPL\n         ST    R4,DAPLDAPB             STORE ADDRESS OF DAPB IN DAPL\n         DROP  R1,R4                   DROP ADDRESSABILITY TO DAPL AND\n*                                      DAPB\n         CALLTSSR EP=IKJDAIR           CALL DAIR TO FREE DDNAME\n         C     R15,FULL28              SEE IF RETURN CODE IS 28\n*                                      (DDNAME NOT ALLOCATED)\n         BER   R2                      YES....GO CONTINUE PROCESSING\n         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO\n         BZR   R2                      YES....GO CONTINUE PROCESSING\n         MVI   DFID+1,DFDAIR           SET DAIRFAIL ID TO INDICATE DAIR\n*\n***********************************************************************\n*                                                                     *\n*        INVOKE DAIRFAIL TO DISPLAY AN ERROR MESSAGE                  *\n*                                                                     *\n***********************************************************************\n*\nDAIRFAIL XC    DFPARMS(DFLEN),DFPARMS  INITIALIZE PARMLIST FOR DAIR\n*                                      FAIL TO ZEROS\n         ST    R1,DFDAPLP              STORE POINTER TO DAPL/RB IN\n*                                      PARAMETER LIST\n         ST    R15,RETCODE             STORE RETURN CODE\n         LA    R1,RETCODE              LOAD ADDRESS OF RETURN CODE\n         ST    R1,DFRCP                STORE POINTER TO RETURN CODE IN\n*                                      PARAMETER LIST\n         LA    R1,FULL0                LOAD ADDRESS OF FULLWORD OF\n*                                      ZEROS\n         ST    R1,DFJEFF02             STORE DUMMY POINTER TO IKJEFF02\n*                                      IN PARMLIST\n         LA    R1,DFID                 LOAD ADDRESS OF DAIR FAIL ID\n*                                      FIELD\n         ST    R1,DFIDP                STORE POINTER TO DFID IN\n*                                      PARMLIST\n         MVI   DFID,NOWTP              SET FOR NO WRITE TO PROGRAMMER\n         L     R1,SAVEAREA+4           LOAD ADDRESS OF PEVIOUS\n*                                      SAVEAREA\n         L     R1,24(R1)               LOAD POINTER TO CPPL\n         ST    R1,DFCPPLP              STORE POINTER TO CPPL IN\n*                                      PARMLIST\n         LINK  EP=IKJEFF18,MF=(E,DFPARMS)  LINK TO DAIR FAIL SERVICE\n*                                      ROUTINE TO HANDLE RETURN\n*                                      CODE\n         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO\n         BZR   R2                      YES....GO RETURN TO CALLER\n         LR    R8,R15                  LOAD REGISTER 8 WITH RETURN CODE\n         BAL   R14,SETCODE             GO CONVERT CODE TO DECIMAL\n         PUTLINE OUTPUT=(DRFLERR,SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      DAIR FAIL ERROR MESSAGE\n         PUTLINE OUTPUT=(RETNCD,SINGLE,DATA),MF=(E,IOPLSECT)  PUT OUT\n*                                      DECIMAL RETURN CODE\n         BR    R2                      GO RETURN TO CALLER\n*\n******************** INSTRUCTIONS TO BE EXECUTED **********************\n*\nPACKFCNT PACK  FLASHCND(8),FLASHCNC(0) 3800 PACK THE FLASH COUNT JM#14\nPACKCGRP PACK  CGRPVALD(8),0(0,R7)     3800 PACK THE COPY GROUPS JM#14\nMOVE3800 MVC   0(0,R15),0(R14)         3800 EXECUTED MOVE        JM#14\nMOVEDSN  MVC   DSNBUF(0),0(R5)\nMOVEVOL  MVC   VOLUME(0),0(R7)\nPACKCOPY PACK  DEC(8),0(0,R7)\n         USING DAPB08,R8\nMOVEMEM  MVC   DA08MNM(0),0(R5)\nMOVEPASS MVC   DA08PSWD(0),0(R5)\n         DROP  R8\nDFPBMVE  MVC   DFPBNAME(0),0(R5)                    GTE\n*\n***************************** CONSTANTS *******************************\n*\n         LTORG\n******************** DAIR CONTROL BLOCK CONSTANTS *********************\nDAPB08C  DS    0F\n         DC    X'0008'                 DA08CD\n         DC    H'0'                    DA08FLG\n         DC    H'0'                    DA08DARC\n         DC    H'0'                    DA08CTRC\n         DC    A(0)                    DA08PDSN\n         DC    CL8'PRINTI  '           DA08DDN\n         DC    CL8' '                  DA08UNIT\n         DC    CL8' '                  DA08SER\n         DC    F'0'                    DA08BLK\n         DC    F'0'                    DA08PQTY\n         DC    F'0'                    DA08SQTY\n         DC    F'0'                    DA08DQTY\n         DC    CL8' '                  DA08MNM\n         DC    CL8' '                  DA08PSWD\n         DC    X'08'                   DA08DSP1      SHR\n         DC    X'08'                   DA08DPS2      KEEP\n         DC    X'08'                   DA08DSP3      KEEP\n         DC    X'08'                   DA08CTL       PERM\n         DC    F'0'                    DA08DSO\n         DC    CL8' '                  DA08ALN\nDAPB08L  EQU   *-DAPB08C               LENGTH\n         SPACE 2\nDAPB18C  DS    0F\n         DC    X'0018'                 DA18CD\n         DC    X'0000'                 DA18FLG\n         DC    H'0'                    DA18DARC\n         DC    H'0'                    DA18CTRC\n         DC    F'0'                    DA18PDSN\n         DC    CL8'PRINTI'             DA18DDN\n         DC    CL8' '                  DA18MNM\n         DC    CL2' '                  DA18SCLS\n         DC    X'08'                   DA18DPS2\n         DC    X'10'                   DA18CTL\n         DC    CL8' '                  DA18JBNM\nDAPB18L  EQU   *-DAPB18C               LENGTH\n         SPACE 2\nINPUTC   DCB   DSORG=PS,MACRF=(GM),EODAD=EXIT,SYNAD=ERRI,DDNAME=PRINTI\nINPUTL   EQU   *-INPUTC\n*\nOUTPUTAC DCB   DSORG=PS,MACRF=(PM),SYNAD=ERRO,DDNAME=PRINTA,RECFM=VBA, X\n               LRECL=256,BLKSIZE=3120\nOUTPUTAL EQU   *-OUTPUTAC\n*\nOUTPUTMC DCB   DSORG=PS,MACRF=(PM),SYNAD=ERRO,DDNAME=PRINTM,RECFM=VBM, X\n               LRECL=256,BLKSIZE=3120\nOUTPUTML EQU   *-OUTPUTMC\n*\nDIRECTC  DCB   DDNAME=PRINTI,DSORG=PS,MACRF=(GM),RECFM=U,BLKSIZE=256,  X\n               SYNAD=SERRI,EODAD=FREEBLK\nDIRECTL  EQU   *-DIRECTC\n*\nOPENCLOS OPEN  (,),MF=L\n*                                                                JM#14\nSETPRTC  SETPRT MF=L                   LIST FORM FOR PROGRAM     JM#14\nSPLEN    EQU   *-SETPRTC               LENGTH OF THE SETPRT      JM#14\n         SPACE 2\nHEADERC  DS    0F\n         DC    H'84'\n         DC    H'0'\nHDRCNTLC DC    C' '\n         DC    CL43'**** TSO FOREGROUND HARDCOPY ****'\n         DC    CL36' '\nHEADERM  DS    0F\n         DC    H'84'\n         DC    H'0'\n         DC    C' '\n         DC    CL43'*** TSO FOREGROUND MEMBER LIST **'\n         DC    CL36' '\nLDSNAME  DS    0CL12\n         ORG   LDSNAME\n         DC    H'66'\n         DC    H'0'\n         DC    CL8' DSNAME='\nBLNKASA  DC    H'5',H'0',C' '          BLANK ASA LINE              TJ#1\nBLNKMCH  DC    H'5',H'0',X'09'         BLANK MCH LINE              TJ#1\nCCASATOP DC    C'1'              CARRIAGE CONTROL FOR ASA          TJ#1\nCCMCHTOP DC    X'09'             CARRIAGE CONTROL FOR MCH        JM#14\n*CMCHTOP DC    X'8B' ----WAS-----CARRIAGE CONTROL FOR MCH          TJ#1\nARRPRTR  DC    H'85',H'0',C' '   ARRANGEMENT PRINT LINE SETUP      TJ#2\n         DC    CL80' '           ARRANGEMENT TYPE LINE SETUP       TJ#2\nARRPL    EQU   *-ARRPRTR         ARRANGEMENT PRINT LINE SETUP      TJ#2\nARRDUP   DC    CL80'DUP 1 '      ARRANGEMENT DUPLEX LINE           TJ#4\nARRNUM1  DC    CL80',MARGIN TEXT 2 1 '    MARGIN TEXT LINE         TJ#5\nARRNUM2  DC    CL38' ',CL42'- // // - '    MARGIN TEXT LINE        TJ#5\nEXPRESS  DC    CL80',EXPRESS '             EXPRESS ARR LINE        TJ#5\nLINMSG   DC    AL2(LINMSGL),AL2(0)                                 TJ#8\n         DC    C'TOTAL NUMBER OF LINES PRINTED OUT:'               TJ#8\n         DC    C'            '                                     TJ#8\nLINMSGL  EQU   *-LINMSG                                            TJ#8\nEJECTM   DS    0F\n         DC    H'5'\n         DC    H'0'\n         DC    X'8B'\nEJECTA   DS    0F\n         DC    H'5'\n         DC    H'0'\n         DC    C'1'\nSPACE    EQU   EJECTA\n         SPACE 2\nFULL0    DC    F'0'\nFULL1    DC    F'1'\nFULL4    DC    F'4'\nFULL20   DC    F'20'\nFULL28   DC    F'28'\nFULL256  DC    F'256'\nPRINTILN DC    H'12',H'0'\nPRINTI   DC    CL8'PRINTI'\nPRINTALN DC    H'12',H'0'\nPRINTA   DC    CL8'PRINTA'\nPRINTMLN DC    H'12',H'0'\nPRINTM   DC    CL8'PRINTM'\nBLANKS   DC    256CL1' '\nALIAS    DC    CL8' *ALIAS*'\nENDCHAIN DS    0F\n         DC    X'FF000000'\nMEMDATL  DC    X'00'                   SUBPOOL NUMBER\n         DC    AL3(1808)\nHALF0    DC    H'0'\nHALF1    DC    H'1'\nHALF2    DC    H'2'\nHALF6    DC    H'6'\nHALF12   DC    H'12'\nHALF85   DC    H'85'\nHALF256  DC    H'256'\nFULL10   DC    F'10'                   FULLWORD WITH VALUE OF 10 JM#14\nPATCH    DC    8CL4'ZAP*'\nHEXFF    EQU   X'FF'\nHIGH     EQU   X'80'\nBLANK    EQU   X'40'\nLOW      EQU   X'01'\nJFCPDS   EQU   X'01'\nHEX00    EQU   X'00'\nSCLSA    EQU   C'A'\nSKIPM    EQU   X'09'\nDSOPS    EQU   X'40'\nDSOPO    EQU   X'02'\nNOWTP    EQU   X'00'\nDATEEDIT DS    0CL19         EDIT PATTERN FOR  DATE AND TIME       JM#1\n         DC    X'21207A20207A2020'       TIME                      TJ#3\n         DC    C'     ',X'20204B202020'  DATE                      TJ#3\n**************************************************************JM#1*\n*DATEEDIT DS    0CL36         EDIT PATTERN FOR  DATE AND TIME JM#1*\n*        DC    C'    PRODUCED  AT ',X'21207A20207A2020'       JM#1*\n*        DC    C'  ON ',X'20204B202020'                       JM#1*\n*        *---  PRODUCED  AT HH:MM:SS  ON YY.DDD  ---*         JM#1*\n**************************************************************JM#1*\n         EJECT\n****************** POINTER TO PARS PARAMETER CSECT ********************\nPCLADDR  DC    A(PARMTAB)\n         SPACE 2\n************************ PARS PARAMETER LIST **************************\nPARMTAB  IKJPARM  DSECT=IKJPARMD\nDSNAMES  IKJPOSIT  DSNAME,LIST,USID,                                   X\n               PROMPT='DSNAME',                                        X\n               HELP='DSNAME TO BE PRINTED'\nPCCTL    IKJKEYWD ,\n         IKJNAME 'NOCCTL'                                          TF#1\n         IKJNAME 'CCTL',SUBFLD=CCTLSUB                             TF#1\nPCTRC    IKJKEYWD ,                    3800 SUPPORT FOR TRC      JM#14\n         IKJNAME 'NOTRC'                                         JM#14\n         IKJNAME 'TRC',SUBFLD=TRCSUB                             JM#14\n         AIF   (&LGENOPT EQ 0).PARS01  IF PARTIAL GEN OPT        JM#14\nPCBURST  IKJKEYWD ,                    3800 SUPPORT FOR BURST    JM#14\n         IKJNAME 'NOBURST'                                       JM#14\n         IKJNAME 'BURST',SUBFLD=BRSTSUB                          JM#14\nPCMODTRC IKJKEYWD ,                    3800 SUPPORT FOR MODIFY   JM#14\n         IKJNAME 'MODTRC',SUBFLD=MTRCSUB,ALIAS=('MTRC')          JM#14\nPCMODIFY IKJKEYWD ,                    3800 SUPPORT FOR MODIFY   JM#14\n         IKJNAME 'MODIFY',SUBFLD=MDFYSUB                         JM#14\nPCFLASH  IKJKEYWD ,                    3800 SUPPORT FOR FLASH    JM#14\n         IKJNAME 'FLASH',SUBFLD=FLSHSUB                          JM#14\nPCFCOUNT IKJKEYWD ,                    3800 SUPPORT FOR FLASH    JM#14\n         IKJNAME 'FCOUNT',SUBFLD=FCNTSUB,ALIAS=('FCNT')          JM#14\n.PARS01  ANOP                                                    JM#14\nPCCHARS  IKJKEYWD ,                    3800 SUPPORT FOR CHARS    JM#14\n         IKJNAME 'CHARS',SUBFLD=CHARSUB                          JM#14\nPCCGROUP IKJKEYWD ,                    3800 SUPPORT COPY GROUPS  JM#14\n         IKJNAME 'CGROUP',SUBFLD=CGRPSUB                         JM#14\nPCLASS   IKJKEYWD ,\n         IKJNAME 'CLASS',SUBFLD=CLASSUB\nPDEST    IKJKEYWD ,\n         IKJNAME 'DEST',SUBFLD=DESTSUB\nPDELETE  IKJKEYWD ,                                                TJ#1\n         IKJNAME 'DELETE'                                          TJ#1\n         IKJNAME 'KEEP'                                            TJ#1\nPPDS     IKJKEYWD ,                                                TJ#1\n         IKJNAME 'PDS'                                             TJ#1\nPEJECT   IKJKEYWD DEFAULT='NOEJECT(4)'                             TJ#1\n         IKJNAME 'EJECT'                                           TJ#1\n         IKJNAME 'NOEJECT',SUBFLD=NOEJSUB                          TJ#1\nPARR     IKJKEYWD ,                                                TJ#2\n         IKJNAME 'ARR',SUBFLD=ARRSUB                               TJ#2\nPLINES   IKJKEYWD DEFAULT='NOLINES'                                TJ#2\n         IKJNAME 'NOLINES'                                         TJ#2\n         IKJNAME 'LINES',SUBFLD=LINSUB                             TJ#2\nPTITLE   IKJKEYWD ,                                                TJ#3\n         IKJNAME 'TITLE',SUBFLD=TITLESUB                           TJ#3\nPNUMBER  IKJKEYWD ,                                                TJ#5\n         IKJNAME 'NUMBER'                                          TJ#5\nPEXPRES  IKJKEYWD ,                                                TJ#5\n         IKJNAME 'EXPRESS'                                         TJ#5\nPDOUBLE  IKJKEYWD ,                                                TJ#6\n         IKJNAME 'DOUBLE'                                          TJ#6\nPTRIPLE  IKJKEYWD ,                                                TJ#6\n         IKJNAME 'TRIPLE'                                          TJ#6\n*********** #4. ************************                           TJ#4\nPCOUNT   IKJKEYWD ,\n         IKJNAME 'COUNT',SUBFLD=SUBCOUNT                           TJ#4\nPSTART   IKJKEYWD ,\n         IKJNAME 'START',SUBFLD=SUBSTART                           TJ#4\nPSTOP    IKJKEYWD ,\n         IKJNAME 'STOP',SUBFLD=SUBSTOP                             TJ#4\nPDUPLEX  IKJKEYWD ,\n         IKJNAME 'DUPLEX'                                          TJ#4\n*********** #4. ************************                           TJ#4\nPHOLD    IKJKEYWD ,\n         IKJNAME 'HOLD'\n         IKJNAME 'NOHOLD'\nPCOPIES  IKJKEYWD ,\n         IKJNAME 'COPIES',SUBFLD=COPYSUB\nPPRINT   IKJKEYWD ,\n         IKJNAME 'PRINT'\n         IKJNAME 'NOPRINT'\nPLIST    IKJKEYWD ,\n         IKJNAME 'LIST'\n         IKJNAME 'NOLIST'\nPHEAD    IKJKEYWD ,\n         IKJNAME 'NOHEADING'                       GTE\n         IKJNAME 'HEADING'                         GTE\nPVOL     IKJKEYWD ,\n         IKJNAME 'VOLUME',SUBFLD=VOLSUB\nPFOLD    IKJKEYWD ,\n         IKJNAME 'FOLD',ALIAS=('CAPS')\n         IKJNAME 'NOFOLD',ALIAS=('ASIS')\nPFORMS   IKJKEYWD ,\n         IKJNAME  'FORMS',SUBFLD=SFORMS                    GTEL\nPTRAIN   IKJKEYWD ,\n         IKJNAME  'TRAIN',SUBFLD=STRAIN,ALIAS=('UCS')      GTEL\nPFCB     IKJKEYWD ,\n         IKJNAME    'FCB',SUBFLD=SFCB                      GTEL\nPPROG    IKJKEYWD ,\n         IKJNAME    'PROG',SUBFLD=SPROG                    GTEL\nPTEXT    IKJKEYWD ,\n         IKJNAME    'TEXT',INSERT='UCS(TN) ASIS'           GTEL\n*        B E G I N   S U B F I E L D S\nCCTLSUB  IKJSUBF\nCCTLTYP  IKJKEYWD DEFAULT='ASA'                                    TF#1\n         IKJNAME  'ASA'                                            TF#1\n         IKJNAME  'MCH'                                            TF#1\n******** IKJSUBF****************                                   TJ#1\nNOEJSUB  IKJSUBF\nNOEJKEY  IKJIDENT 'OUTPUT SEPARATION',MAXLNTH=2,                   TJ#1X\n               FIRST=NUMERIC,OTHER=NUMERIC,                        TJ#1X\n               PROMPT='1-2 DIGITS - NUMBER OF SEPARATION LINES',   TJ#1X\n               HELP=('NUMBER OF BLANK LINES SEPARATING OUTPUT')    TJ#1\nARRSUB   IKJSUBF\nARRNUM   IKJIDENT '6670 ARRANGEMENT NUMBER',MAXLNTH=3,             TJ#2X\n               FIRST=NUMERIC,OTHER=NUMERIC,                        TJ#2X\n               PROMPT='1-3 DIGITS - 6670 ARRANGEMENT DESIRED',     TJ#2X\n               HELP=('NUMBER OF DESIRED 6670 ARRANGEMENT')         TJ#2\nLINSUB   IKJSUBF\nLINNUMB  IKJIDENT 'LINES PER PAGE',MAXLNTH=2,                      TJ#2X\n               FIRST=NUMERIC,OTHER=NUMERIC,                        TJ#2X\n               PROMPT='1-2 DIGITS - NUMBER OF LINES PER PAGE',     TJ#2X\n               HELP=('NUMBER OF LINE PER PAGE ON OUTPUT')          TJ#2\nTITLESUB IKJSUBF\nTITLEFLD IKJIDENT 'TITLE FOR OUTPUT',MAXLNTH=40,                   TJ#3X\n               FIRST=ANY,OTHER=ANY,CHAR,                           TJ#3X\n               PROMPT='TITLE FOR THE PRINTOFF OUTPUT',             TJ#3X\n               HELP=('ENTER TITLE FOR OUTPUT DATASET')             TJ#3\nSUBCOUNT IKJSUBF\nCOUNTNUM IKJIDENT 'COUNT OF RECORDS TO PRINT',MAXLNTH=4,           TJ#4X\n               FIRST=NUMERIC,OTHER=NUMERIC,                        TJ#4X\n               PROMPT='0-9999 - COUNT OF RECORDS TO PRINT',        TJ#4X\n               HELP=('ENTER NUMBER OF RECORDS TO PRINT')           TJ#4\nSUBSTART IKJSUBF\nSTARTNUM IKJIDENT 'RECORD TO START PRINT ON ',MAXLNTH=6,           TJ#4X\n               FIRST=NUMERIC,OTHER=NUMERIC,                        TJ#4X\n               PROMPT='0-999999 - START COUNT FOR PRINTTING',     TJ#10X\n               HELP=('ENTER START RECORD NUMBER')                  TJ#4\nSUBSTOP  IKJSUBF\nSTOPNUM  IKJIDENT 'RECORD TO STOP PRINTTING ON',MAXLNTH=6,         TJ#4X\n               FIRST=NUMERIC,OTHER=NUMERIC,                        TJ#4X\n               PROMPT='0-999999 - STOP COUNT TO STOP PRINT',      TJ#10X\n               HELP=('ENTER STOP RECORD NUMBER')                   TJ#4\nCLASSUB  IKJSUBF\nSCLASS   IKJIDENT 'CLASSNAME',LIST,FIRST=NONATNUM,MAXLNTH=1,           X\n               PROMPT='CLASS NAME'\nDESTSUB  IKJSUBF\nSDEST    IKJPOSIT USERID,                                              X\n               PROMPT='REMOTE STATION ID FOR THE DEST KEYWORD'\nCOPYSUB  IKJSUBF\nSCOPIES  IKJIDENT 'COPIES',MAXLNTH=3,                                  X\n               FIRST=NUMERIC,OTHER=NUMERIC,                            X\n               PROMPT='1-3 DIGITS - NUMBER OF COPIES OF OUTPUT',       X\n               HELP=('NUMBER OF COPIES OF PRINTOUT DESIRED')\nVOLSUB   IKJSUBF\nSVOL     IKJIDENT 'VOLUME',MAXLNTH=8,                                  X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                          X\n               PROMPT='VOLUME SERIAL FOR DATA SETS TO BE PRINTED',     X\n               HELP=('VOLUME SERIAL WILL BE ASSUMED FOR ALL DATA SETS')\nSFORMS   IKJSUBF\nRFORMS   IKJIDENT 'FORMS',MAXLNTH=4,FIRST=ALPHANUM,               GTEL X\n               OTHER=ALPHANUM,                                    GTEL X\n               PROMPT='FORMS DESIGNATION FOR PRINTED OUTPUT',     GTEL X\n               HELP=('AN ALPANUMERIC STRING TO SPECIFY THE FORM') GTEL\nSTRAIN   IKJSUBF\nRTRAIN   IKJIDENT   'UCS',MAXLNTH=4,FIRST=ALPHANUM,               GTEL X\n               OTHER=ALPHANUM,                                    GTEL X\n               PROMPT='UCS   DESIGNATION FOR PRINTED OUTPUT',     GTEL X\n               HELP=('AN ALPANUMERIC STRING TO SPECIFY THE TRAIN') GTEL\nSFCB     IKJSUBF\nRFCB     IKJIDENT 'FCB',MAXLNTH=4,FIRST=ALPHANUM,                 GTEL X\n               OTHER=ALPHANUM,                                    GTEL X\n               PROMPT='FCB DESIGNATION FOR PRINTED OUTPUT',       GTEL X\n               HELP=('AN ALPANUMERIC STRING TO SPECIFY THE FCB')   GTEL\nSPROG    IKJSUBF\nRPROG    IKJIDENT 'PROG',MAXLNTH=8,FIRST=ALPHA,                   GTEL X\n               OTHER=ALPHANUM,                                    GTEL X\n               PROMPT='PROG DESIGNATION FOR PRINTED OUTPUT',      GTEL X\n               HELP=('AN ALPANUMERIC STRING TO SPECIFY THE PROG')  GTEL\nTRCSUB   IKJSUBF ,                     3800 SUPPORT FOR TRC      JM#14\nTRCVAL   IKJKEYWD DEFAULT='YES'                                  JM#14\n         IKJNAME  'YES'                                          JM#14\n         IKJNAME  'NO'                                           JM#14\n         AIF   (&LGENOPT EQ 0).PARS02  IF PARTIAL GEN OPT        JM#14\nBRSTSUB  IKJSUBF ,                     3800 SUPPORT FOR BURST    JM#14\nBRSTVAL  IKJKEYWD DEFAULT='YES'                                  JM#14\n         IKJNAME  'YES'                                          JM#14\n         IKJNAME  'NO'                                           JM#14\nMDFYSUB  IKJSUBF ,                     3800 SUPPORT FOR MODIFY   JM#14\nMDFYVAL  IKJIDENT 'COPY MODIFICATION MODULE NAME',MAXLNTH=4,     JM#14 X\n               FIRST=ANY,OTHER=ANY,CHAR,                         JM#14 X\n               PROMPT='COPY MODIFICATION MODULE NAME',           JM#14 X\n               HELP=('ENTER 3800 COPY MODIFICATION MODULE NAME') JM#14\nMTRCSUB  IKJSUBF ,                     3800 SUPPORT FOR MODIFY   JM#14\nMTRCVAL  IKJIDENT 'MODIFICATION MODULE TRC',MAXLNTH=1,           JM#14 X\n               FIRST=NUMERIC,                                    JM#14 X\n               PROMPT='MODIFICATION MODULE TRC',                 JM#14 X\n               HELP=('ENTER 3800 COPY MODIFICATION MODULE TRC')  JM#14\nFCNTSUB  IKJSUBF ,                     3800 SUPPORT FOR FLASH    JM#14\nFCNTVAL  IKJIDENT 'FORMS FLASH COUNT',MAXLNTH=3,                 JM#14 X\n               FIRST=NUMERIC,OTHER=NUMERIC,                      JM#14 X\n               PROMPT='FORMS FLASH COUNT',                       JM#14 X\n               HELP=('ENTER 3800 FORMS FLASH COUNT')             JM#14\nFLSHSUB  IKJSUBF ,                     3800 SUPPORT FOR FLASH    JM#14\nFLSHVAL  IKJIDENT 'FORMS FLASH NAME',MAXLNTH=4,                  JM#14 X\n               FIRST=ANY,OTHER=ANY,CHAR,                         JM#14 X\n               PROMPT='FORMS FLASH NAME',                        JM#14 X\n               HELP=('ENTER 3800 FORMS FLASH NAME')              JM#14\n.PARS02  ANOP                                                    JM#14\nCHARSUB  IKJSUBF ,                     3800 SUPPORT FOR CHARS    JM#14\nCHARVAL  IKJIDENT 'CHARS VALUES',LIST,                           JM#14 X\n               MAXLNTH=4,                                        JM#14 X\n               FIRST=ANY,OTHER=ANY,CHAR,                         JM#14 X\n               PROMPT='CHARS VALUES',                            JM#14 X\n               HELP=('ENTER 3800 CHARACTER ARRANGEMENT NAMES')   JM#14\nCGRPSUB  IKJSUBF ,                     3800 SUPPORT COPY GROUPS  JM#14\nCGRPVAL  IKJIDENT 'COPY GROUP VALUES',LIST,                      JM#14 X\n               MAXLNTH=2,                                        JM#14 X\n               FIRST=NUMERIC,OTHER=NUMERIC,                      JM#14 X\n               PROMPT='COPY GROUP VALUES',                       JM#14 X\n               HELP=('ENTER COPY GROUP VALUES FOR 3800')         JM#14\n         IKJENDP\n         SPACE 2\n****************************** MESSAGES *******************************\nGNRLERR  DC    AL2(GNRLERRL),AL2(0)\n         DC    C'AN ERROR WAS ENCOUNTERED IN THE GENERAL FAIL SERVICE RX\n               OUTINE.  THE RETURN CODE FROM GNRLFAIL IS: '\nGNRLERRL EQU   *-GNRLERR\n*\nDRFLERR  DC    AL2(DRFLERRL),AL2(0)\n         DC    C'AN ERROR WAS ENCOUNTERED IN THE DAIR FAIL SERVICE ROUTX\n               INE.  THE RETURN CODE FROM DAIR FAIL IS: '\nDRFLERRL EQU   *-DRFLERR\n*\nOPENMSG  DC    AL2(OPENMSGL),AL2(0)\n         DC    C'OUPUT PROCESSING IS BEING TERMINATED.  AN ERROR WAS ENX\n               COUNTERED ATTEMPTING TO OPEN THE OUTPUT DATASET ASSOCIATX\n               ED WITH DDNAME: '\nOPENMSGL EQU   *-OPENMSG\n*\nDSNNOTP  DC    AL2(DSNNOTPL),AL2(0)\n         DC    C'AN ERROR OCCURRED AND YOUR DATASET WAS NOT PRINTED'\nDSNNOTPL EQU   *-DSNNOTP\n*\nPDSKWE   DC    AL2(PDSKWEL),AL2(0)                                 TJ#1\n         DC    C'DATASET IS PDS AND ''PDS'' KEYWORD NOT SPECIFIED' TJ#1\nPDSKWEL  EQU   *-PDSKWE                                            TJ#1\n*\nBADLNE   DC    AL2(BADLNEL),AL2(0)                                 TJ#1\n         DC    C'NUMBER OF LINES SPECIFIED MUST BE GREATER THAN 4' TJ#1\nBADLNEL  EQU   *-BADLNE                                            TJ#1\n*\n*\nDSNMSG   DC    AL2(DSNMSGL),AL2(0)\n         DC    C'PROCESSING HAS BEEN COMPLETED FOR DATASET: '\nDSNMSGL  EQU   *-DSNMSG\n*\nMEMMSG   DC    AL2(MEMMSGL),AL2(0)\n         DC    C' MEMBER: '\nMEMMSGL  EQU   *-MEMMSG\n*\nPRTMSG   DC    AL2(PRTMSGL),AL2(0)\n         DC    C'MEMBERS WILL NOW BE PRINTED FOR DATASET: '\nPRTMSGL  EQU   *-PRTMSG\n*\nNOTPSPO  DC    AL2(NOTPSPOL),AL2(0)\n         DC    C'DATASET IS NOT SEQUENTIAL OR PARTITIONED AND WAS NOT PX\n               RINTED.'\nNOTPSPOL EQU   *-NOTPSPO\n*\nSYNADI   DC    AL2(SYNADIL),AL2(0)\n         DC    C'A SYNAD ERROR OCURRED READING YOU INPUT DATASET AND ONX\n               LY PART OF YOUR DATASET MAY HAVE BEEN PRINTED.'\nSYNADIL  EQU   *-SYNADI\n*\nSYNADO   DC    AL2(SYNADOL),AL2(0)\n         DC    C'A SYNAD ERROR OCURRED WRITING THE OUTPUT DATASET AND NX\n               O MORE DATASETS WILL BE PRINTED.'\nSYNADOL  EQU   *-SYNADO\n*\nDSNISU   DC    AL2(DSNISUL),AL2(0)\n         DC    C'DATASET HAS UNDEFINED RECORD LENGTH AND WILL NOT BE PRX\n               INTED.'\nDSNISUL  EQU   *-DSNISU\n*\nDSNISL   DC    AL2(DSNISLL),AL2(0)\n         DC    C'DATASET HAS RECORD LENGTH GREATER THAN 256.'\nDSNISLL  EQU   *-DSNISL\n         SPACE 2\n************************ DSECTS (MAPPING MACROS) **********************\nMEMDSECT DSECT\nMEMNTTR  DS    CL11\n         ORG   MEMNTTR\nMEMBER   DS    CL8\nMEMTTR   DS    CL3\nCFIELD   DS    CL1\nMEMSECTN EQU   *\n         IKJDAP08\nDAP08LEN EQU   *-DAPB08\n         IKJDAP18\nDAP18LEN EQU   *-DAPB18\n         IKJDAPL\nDAPLLEN  EQU   *-DAPL\n         IKJCPPL\nCPPLLEN  EQU   *-CPPL\n         IKJPPL\nPPLLEN   EQU   *-PPL\n         IKJIOPL\nIOPLLEN  EQU   *-IOPL\n         IHADSAB\nTIOEDDNM EQU   4           X'1C'(OFFSET) - X'18'(JOB STEP)\n         CVT\n         IEFZB4D0\n         IEFZB4D2\n         IKJDFPL                                          GTE\n         IKJDFPB                                          GTE\nRBLEN    EQU   S99RBEND-S99RB\n         DCBD  DSORG=(PS,PO)\n         EJECT\n******************** CONSTANTS FOR DYNAMIC ALLOCATION *****************\nPRINTOFF CSECT\nREQBLKC  DC    AL1(S99RBEND-S99RB),AL1(S99VRBAL),18AL1(0)\nTEXTAC   DC    AL2(DALDDNAM),AL2(1),AL2(8),CL8'PRINT'  DDNAME\nTEXTALEN EQU   *-TEXTAC\nTEXTBC   DC    AL2(DALSYSOU),AL2(1),AL2(1),C'A'        SYSOUT CLASS\nTEXTBLEN EQU   *-TEXTBC\nTEXTCC   DC    AL2(DALSUSER),AL2(1),AL2(8),CL8'LOCAL'  DESTINATION\nTEXTCLEN EQU   *-TEXTCC\nTEXTDC   DC    AL2(DALSHOLD),AL2(0)              SYSOUT HOLD\nTEXTDLEN EQU   *-TEXTDC\nTEXTEC   DC    AL2(DALCOPYS),AL2(1),AL2(1),AL2(1)      SYSOUT COPIES\nTEXTELEN EQU   *-TEXTEC\nTEXTFC   DC    AL2(DALPERMA),AL2(0)              PERM ALLOCATION\nTEXTFLEN EQU   *-TEXTFC\nTEXTGC   DC    AL2(DALFCBIM),AL2(1),AL2(4),CL4'STD.'  FCB       GTEL\nTEXTGLEN EQU   *-TEXTGC                                         GTEL\nTEXTHC   DC    AL2(DALUCS),AL2(1),AL2(2),CL4'PN'      UCS       GTEL\nTEXTHLEN EQU   *-TEXTHC                                         GTEL\nTEXTIC   DC    AL2(DALSFMNO),AL2(1),AL2(2),CL4'STD.'  FORMS     GTEL\nTEXTILEN EQU   *-TEXTIC                                         GTEL\nTEXTJC   DC    AL2(DALSPGNM),AL2(1),AL2(8),CL8'PROG'  PROG      GTEL\nTEXTJLEN EQU   *-TEXTJC                                         GTEL\nTEXTKC   DC    AL2(DALCOPYG),AL2(0),AL2(0),AL1(0)    COPY GROUPS JM#14\n         DC                         AL2(0),AL1(0)    UP          JM#14\n         DC                         AL2(0),AL1(0)     TO         JM#14\n         DC                         AL2(0),AL1(0)      10        JM#14\n         DC                         AL2(0),AL1(0)       MAY      JM#14\n         DC                         AL2(0),AL1(0)        BE      JM#14\n         DC                         AL2(0),AL1(0)         USED   JM#14\n         DC                         AL2(0),AL1(0)          AT    JM#14\n         DC                         AL2(0),AL1(0)           ANY  JM#14\n         DC                         AL2(0),AL1(0)           TIME JM#14\nTEXTKLEN EQU   *-TEXTKC                                        . JM#14\n*********************** DSECT FOR DYNAMIC WORKAREA ********************\nWORKAREA DSECT\nSAVEAREA DS    18F\nALCSAVE  DS    12F\n         DS    0D\nDEC      DS    2F\nRETNCD   DS    F\nCONV     DS    2F\nIOPB     PUTLINE MF=L\nDAP08    DS    0F\n         ORG   DAP08+DAP08LEN\nDAP18    DS    0F\n         ORG   DAP18+DAP18LEN\nDAPLSECT DS    0F\n         ORG   DAPLSECT+DAPLLEN\nPPLSECT  DS    0F\n         ORG   PPLSECT+PPLLEN\nIOPLSECT DS    0F\n         ORG   IOPLSECT+IOPLLEN\nDFPLSECT DS    4F                   SPACE FOR DFPL     GTE\nDFPBSECT DS    5F                   SPACE FOR DFPB     GTE\n         DS    H                    TO GET ALLIGNMENT  GTE\nDFPBDSL  DS    H                    DSNAME LENGTH      GTE\nDFPBNAME DS    CL44                 DSNAME             GTE\nDFPBQUA  DS    CL8\nECB      DS    F\nPARSBACK DS    F\nLINE     DS    0H\nLENGTH   DS    H\n         DS    H\nCNTLBYTE DS    CL1\nDATA     DS    CL256\nHEADER2  DS    CL12\nDSNAME   DS    CL44\nOPENPRN  DS    CL1\nMEMNAME  DS    CL8\nCLOSEPRN DS    CL1\n         ORG   DSNAME-4\nDSNLENP  DS    CL2\nDSNLEN   DS    CL2\nDSNBUF   DS    CL44\n         ORG   MEMNAME-4\nMEMNAMEL DS    CL2\n         ORG\nTIMESAVE DS    F             SAVE AREA FOR EXECUTION DATE          JM#1\nDATESAVE DS    F             SAVE AREA FOR EXECUTION TIME          JM#1\nHEADER   DS    CL46\nDATETIME DS    CL19          EDIT PATTERN FOR  DATE AND TIME       JM#1\nDPIDOUT  DS    CL19          JOBNAME OF INVOKER                    TJ#3\n         ORG   HEADER+4\nHDRCNTL  DS    CL1\nDFID     DS    CL2\n         ORG\nVOLBIT   DS    CL1\nVOLUME   DS    CL8\nMEMTABLE DS    F\nENDTABLE DS    F\nCURRENT  DS    F\nPRESENT  DS    F\nCOLUMN   DS    F\nXLIST    DS    F\nCCTLKEY  DS    H                                                   TF#1\nCTYPKEY  DS    H                                                   TF#1\nP3800FLG DS    H                       3800 FLAG BYTE(S)         JM#14\nP38CHARS EQU   X'0F'                   3800 - CHARS FIELDS FLAG  JM#14\nP38CHAR1 EQU   X'01'                   3800 - CHARS 1ST FLD      JM#14\nP38CHAR2 EQU   X'02'                   3800 - CHARS 2ND FLD      JM#14\nP38CHAR3 EQU   X'04'                   3800 - CHARS 3RD FLD      JM#14\nP38CHAR4 EQU   X'08'                   3800 - CHARS 4TH FLD      JM#14\nP38MODFY EQU   X'10'                   3800 - COPY MODIFICATION  JM#14\nP38MDTRC EQU   X'20'                   3800 - MODIFICATION TRC   JM#14\nP38FLASH EQU   X'40'                   3800 - FORMS FLASH        JM#14\nP38FLCNT EQU   X'80'                   3800 - FLASH COUNT        JM#14\nP38BURST EQU   X'80'                   3800 - BURST=Y FLAG       JM#14\nCHARSETS DS    4CL4                    3800 CHARACTER SET IDS    JM#14\nMODIFYID DS    CL4                     3800 COPY MODIFICATION ID JM#14\nMODTRCID DS    XL1                     3800 COPY MOD TRC ID      JM#14\nFLASHID  DS    CL4                     3800 FORMS FLASH ID       JM#14\nFLASHCNT DS    XL1                     3800 FORMS FLASH COUNT    JM#14\nFLASHCNC DS    CL4                     3800 FLASH COUNT EBCDIC   JM#14\nFLASHCND DS    D                       3800 FLASH COUNT PACKED   JM#14\nCGRPVALD DS    D                       3800 COPY GROUP PACKED    JM#14\nODCBADDR DS    F                       ADDRESS OF OUTPUT DCB     JM#14\nMSGAREA  DS    0CL128                  SETPRT MSG AREA           JM#14\nMSGTLEN  DS    H                       SETPRT TOTAL MSG LENGTH   JM#14\nMSGRSV1  DS    F                       SETPRT RESERVED AREA      JM#14\nMSGLEN   DS    H                       SETPRT MSG TEXT LENGTH    JM#14\nMSGRSV2  DS    H                       SETPRT RESERVED AREA      JM#14\nMSGTEXT  DS    CL118                   SETPRT MESSAGE TEXT       JM#14\n*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   TJ#1\nCCFLAG   DC    C'X'              CARRIAGE CONTROL YES OR NO FLAG   TJ#2\nCCTYPE   DC    C'X'              CARRIAGE CONTROL TYPE FLAG        TJ#1\n*     C'A' - ASA CC TYPE,   C'M' - MCH TYPE                        TJ#1\nFIRSTFL  DC    C'X'              FIRST TIME THRU FLAG              TJ#1\nNODELTF  DC    C'Y'              DELETE FLAG                       TJ#1\nEJECTFL  DC    C'X'              EJECT  FLAG                       TJ#1\n* C'E' - EJECT EVERY TIME, C'F' - FIRST PASS, C'X' - PRINT EJECTNM TJ#1\n*                                                    BLANK LINES   TJ#1\nEJECTNM  DC    F'0'            NUMBER OF LINES TO SEPARATE OUTPUT  TJ#1\nARRPRTLN DS    0H              THE ARRANGEMENT LINE AREA           TJ#2\n         DS    H,H                                                 TJ#2\nARRCC    DS    C               CC FOR ARR LINE                     TJ#2\nARRPRT   DS    CL8 ',PRINT  ' OR ' ,PRINT '  : ',END   ' OR ' ,END'TJ#2\nARRPRTN  DS    CL3             ARRANGEMENT NUMBER                  TJ#2\n         DS    CL90                                                TJ#2\nNLINES   DS    PL3             NUMBER OF LINES PER PAGE            TJ#2\nHLINES   DS    PL9             NUMBER OF LINES COUNTER             TJ#2\nTLINES   DS    PL9      TOTAL  NUMBER OF LINES COUNTER             TJ#4\nGTLINES  DS    PL9            GRAND TOTAL NUMBER OF LINES          TJ#8\nTRECDS   DS    PL9      TOTAL  NUMBER OF RECORDS COUNTER           TJ#4\nDPID     DS    CL8             USER'S DPID FOR HEADING             TJ#3\nSTARTP   DS    PL6             STARTING POINT FOR PRINTING         TJ#4\nSTOPP    DS    PL6             STOPPING POINT FOR PRINTING         TJ#4\nCOUNTP   DS    PL4             COUNT OF RECORDS TO PRINT           TJ#4\nREPCC    DS    X               REPLACEMENT CC FOR DOUBLE OR TRIPLE TJ#6\nHBLNK    DS    CL5             HOLD BLANK LINE OF ASA OR MCH       TJ#7\nLINMSGH  DS    AL2(0),AL2(0)                                       TJ#8\n         DC    C'TOTAL NUMBER OF LINES PRINTED OUT:'               TJ#8\nGRANTOT  DC    C'               '                                  TJ#8\n*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   TJ#1\nRDJL     RDJFCB (,),MF=L\nJFCBAREA DS    44F\n         ORG   JFCBAREA+44\nJFCBELNM DS    CL8\n         ORG   JFCBAREA+86\nJFCBIND1 DS    CL1\n         ORG   JFCBAREA+98\nJFCDSRG1 DS    CL1\n         ORG\nSAVER6   DS    F\nSAVER2   DS    2F\nSAVER3   DS    2F\n*\n*\nINPUT    DCB   DSORG=PS,MACRF=(GM),EODAD=EXIT,SYNAD=ERRI,DDNAME=PRINTI\n*\nOUTPUTA  DCB   DSORG=PS,MACRF=(PM),SYNAD=ERRO,DDNAME=PRINTA,RECFM=VBA, X\n               LRECL=256,BLKSIZE=3120\n*\nOUTPUTM  DCB   DSORG=PS,MACRF=(PM),SYNAD=ERRO,DDNAME=PRINTM,RECFM=VBM, X\n               LRECL=256,BLKSIZE=3120\n*\nDIRECT   DCB   DDNAME=PRINTI,DSORG=PS,MACRF=(GM),RECFM=U,BLKSIZE=256,  X\n               SYNAD=SERRI,EODAD=FREEBLK\n*\nOPENLST  OPEN  (,),MF=L\n*\nCLOSLST  CLOSE (,),MF=L\n*\nSETPRTD  SETPRT MF=L                   LIST FORM FOR WORKAREA    JM#14\n*\nRETCODE  DS    F\nGFPARMP  DS    F\n         IKJEFFGF\n         IKJEFFDF\nRBPTR    DS    F\nREQBLK   DS    10F                                          GTEL\nTEXTPTRS DS    10F                                          GTEL\nTEXTA    DS    0F                                   DDNAME\n         ORG   TEXTA+TEXTALEN\nTEXTB    DS    0F                                   SYSOUT CLASS\n         ORG   TEXTB+TEXTBLEN\nTEXTC    DS    0F                                   DESTINATION\n         ORG   TEXTC+TEXTCLEN\nTEXTE    DS    0F                                   SYSOUT COPIES\n         ORG   TEXTE+TEXTELEN\nTEXTG    DS    0F                                   FCB        GTEL\n         ORG   TEXTG+TEXTGLEN                                  GTEL\nTEXTH    DS    0F                                   UCB        GTEL\n         ORG   TEXTH+TEXTHLEN                                  GTEL\nTEXTI    DS    0F                                   FORMS      GTEL\n         ORG   TEXTI+TEXTILEN                                  GTEL\nTEXTJ    DS    0F                                   PROG       GTEL\n         ORG   TEXTJ+TEXTJLEN                                  GTEL\nTEXTK    DS    0F                         MAX OF 10 COPY GROUPS  JM#14\n         ORG   TEXTK+TEXTKLEN                                    JM#14\nLDYNAMIC EQU   *-WORKAREA\n         EJECT 1                                                 JM#14\nSETPRT   DSECT ,                       DSECT FOR SETPRT MACRO    JM#14\n@SPDCBAD DS    AL4                     DCB ADDRESS               JM#14\n@SPUCSID DS    AL4                     UCS ID                    JM#14\n@SPUCSFL DS    AL1                     UCS FOLD MODE             JM#14\n@SPUCSVF DS    AL1                     UCS VERIFY                JM#14\n@SPFLAG1 DS    AL1                     SETPRT FLAGS (1)          JM#14\n@SPFCBID DS    AL4                     FCB ID                    JM#14\n@SPFCBOP DS    AL1                     FCB OPTIONS               JM#14\n@SPFLAG2 DS    AL1                     SETPRT FLAGS (2)          JM#14\n@SPFLAG3 DS    AL1                     SETPRT FLAGS (3)          JM#14\n@SPCPYCT DS    AL1                     NUMBER OF COPIES          JM#14\n@SPCPYNR DS    AL1                     NUMBER TO REQUEUE         JM#14\n@SPPRMLN DS    AL2                     LENGTH OF PARAMETERS      JM#14\n@SPFLCNT DS    AL1                     FORM FLASH COUNT          JM#14\n@SPMDTRC DS    AL1                     MODIFICATION TRC          JM#14\n@SPMODID DS    AL4                     COPY MOD ID               JM#14\n@SPFLASH DS    AL4                     FORMS FLASH ID            JM#14\n@SPCHAR1 DS    AL4                     CHARACTER ARR. TAB. 1     JM#14\n@SPCHAR2 DS    AL4                     CHARACTER ARR. TAB. 2     JM#14\n@SPCHAR3 DS    AL4                     CHARACTER ARR. TAB. 3     JM#14\n@SPCHAR4 DS    AL4                     CHARACTER ARR. TAB. 4     JM#14\n@SPMSGAD DS    AL4                     ADDRESS OF MESSAGE AREA   JM#14\n@SPLIBAD DS    AL4                     LIBRARY DCB ADDRESS       JM#14\n         SPACE 2                                                 JM#14\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PRINT0FF": {"ttr": 6408, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x00\\xd9\\x00\\xd9\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 217, "newlines": 217, "modlines": 0, "user": "WSRCC"}, "text": ")F FUNCTION -\n   THE PRINTOFF COMMAND CAN BE USED TO OBTAIN HARDCOPY OF DATA SETS\n   THROUGH FOREGROUND COPYING TO SYSOUT.  THE COMMAND PRINTS A\n   DATASET(S) WHICH IS SEQUENTIAL OR PARTITIONED, BLOCKED OR UNBLOCKED,\n   WITH FIXED OR VARIABLE RECORD LENGTH LESS THAN OR EQUAL TO 256 (255\n   IF WITHOUT CARRIAGE CONTROL).\n)X SYNTAX -\n     PRINTOFF ('DSLIST') CLASS('CLASS') DEST('REMOTE')\n              VOLUME('VOLSER') COPIES('NNN') HOLD/NOHOLD KEEP/DELETE\n              START('NNNNNN') STOP('NNNNNN') COUNT('NNNN')\n              FORMS('FORM') UCS('IMAGE') PROG('NAME') FCB('FCBNAME')\n              LIST/NOLIST PRINT/NOPRINT HEADDING/NOHEADDING\n              TITLE('TITLE') NOLINES/LINES('LINES') CAPS/ASIS\n              EJECT/NOEJECT('LINES') CCTL/CCTL('CODE')/NOCCTL\n              DOUBLE TRIPLE TEXT PDS\n              ARR(###) DUPLEX NUMBER EXPRESS ---------------- 6670 ONLY\n              CHARS(CAT1,CAT2,CAT3,CAT4) TRC(Y/N) ----------- 3800 ONLY\n              CGROUP(CG1,CG2,...CGN) ------------------------ 3800 ONLY\n              MODIFY(GRAPHMOD-ID) MODTRC(TRC-ID) ------------ 3800 ONLY\n              FLASH(FLASH-NAME) FCOUNT(FLASH-COUNT) --------- 3800 ONLY\n              BURST(Y/N) ------------------------------------ 3800 ONLY\n\n     REQUIRED -- 'DSLIST'\n     ALIAS    -- PRINTO\n     DEFAULTS -- CLASS(A), COPIES(1), NOHOLD, LIST, PRINT, ASIS,\n                 HEADING, KEEP, NOEJECT(4), NOLINES\n)O OPERANDS -\n))'DSLIST'  - 'DATA SET LIST' CONTAINS THE NAMES OF DATA SETS TO BE\n              PRINTED OR PUNCHED.  THE NAMES SHOULD FOLLOW TSO\n              CONVENTION,  IN QUOTES IF THE PRIMARY INDEX DIFFERS FROM\n              YOUR USERID, OR WITHOUT QUOTES AND WITH THE PRIMARY\n              INDEX OMITTED IF IT IS THE SAME AS YOUR USERID.\n\n))ARR(###)  - IF THE OUTPUT IS BEING ROUTED TO A 6670 DEVICE YOU CAN USE\n              THE ARR PARAMETER TO SELECT A STORED 6670 ARRANGEMENT.\n              WSRCC'S REMOTE 1 6670 HAS 5 STORED ARRANGEMENTS AVAILABLE\n              FOR USE: 100, 101, 102, 103, AND 106. ARR(106) IS THE\n              DEFAULT ARRANGEMENT, THIS ARRANGEMENT USES STORED FONT\n              224, THE ROTATED FONT.  OUTPUT PRINTED WITH THIS\n              ARRANGEMENT IS THE NORMAL 132 CHARACTER (13.3 CPI)\n              COMPUTER OUTPUT ON 8 1/2\" BY 11\" PAPER PRINTED WIDTHWISE\n              (LANDSCAPE). THE ONLY REASONS TO USE ARR(106) IS IF YOU\n              DESIRE PAGE NUMBERING (SEE NUMBER), DUPLEXING (SEE\n              DUPLEX), OR EXPRESS (SEE EXPRESS).  THE OTHER ARRANGEMENTS\n              ARE USED FOR PRINTING LENGTHWISE ON 8 1/2\" BY 11\" PAPER.\n                                     LINES      LINES     FONT\n              ARR   CPI  COLUMNS   PER INCH   PER PAGE    USED\n              100   10     76         6          60        11\n              101   12     92         6          60        86\n              102   10     76         6.5*       67        11\n              103   12     92         6.5*       67        86\n            * CANNOT PRINT WITH UNDERLINING\n\n))ASIS      - OUTPUT IS NOT TO BE CONVERTED TO UPPER CASE PRIOR TO\n              PRINTING.(IT IS LEFT AS IT IS)\n\n))BURST     - USE THE BURST PARAMETER TO SPECIFY WHICH STACKER OF THE\n              3800 PRINTER THE PAPER OUTPUT IS TO GO TO. -- NOT USABLE\n              AT WSRCC AS THE 3800 HAS NO BURSTER/TRIMMER/STACKER UNIT.\n\n))CAPS      - OUTPUT IS TO BE CONVERTED TO UPPER CASE PRIOR TO PRINTING.\n\n))CCTL('CODE') - INDICATES THAT THE FILE CONTAINS CARRIAGE CONTROL\n              REGARDLESS OF THE CATALOG/DCB INFORMATION. 'CODE' IS\n              EITHER ASA OR MCH INDICATING ASA CARRIAGE CONTROL OR IBM\n              MACHINE CARRIAGE CONTROL RESPECTIVELY.  IF THIS OPERAND\n              AND THE NOCCTL OPERAND ARE OMITTED, PRINTOFF USES\n              INFORMATION IN THE CATALOG/DCB TO DETERMINE CARRIAGE\n              CONTROL.  SPECIFYING CCTL WITHOUT EITHER ASA OR MCH\n              OPTIONS DEFAULTS TO ASA CARRIAGE CONTROL.\n\n))CGROUP(CG1,CG2,...,CGN) - USED WITH THE COPIES PARAMETER TO DESCRIBE\n              THE GROUPING OF COPIES FOR THE 3800 PRINTER.  EACH GROUP\n              VALUE SPECIFIES THE NUMBER OF COPIES OF EACH PAGE THAT\n              ARE TO BE GROUPED TOGETHER WHEN PRINTED.\n\n))CHARS(CAT1,CAT2,CAT3,CAT4) - USE THE CHARS PARAMETER TO SPECIFY THE\n              NAME OR NAMES OF CHARACTER ARRANGEMENT TABLES FOR\n              PRINTING A DATASET WITH THE 3800 PRINTER.\n\n))CLASS('CLASS') - SYSOUT CLASS IN WHICH OUTPUT IS TO BE PRINTED.\n              DEFAULT IS A.\n\n))COPIES('NNN') - NUMBER OF COPIES TO BE PRINTED.  DEFAULT IS 1.\n\n))COUNT(NNNN) - INDICATES THAT PRINTING SHOULD STOP AFTER NNNN RECORDS\n              HAVE BEEN PRINTED, THE DEFAULT IS PRINT ALL RECORDS.\n\n))DELETE    - INDICATES THAT THE FILE SHOULD BE DELETED AFTER BEING\n              PRINTED, PARTITIONED DATASETS ARE NEVER DELETED.\n\n))DEST('REMOTE') - REMOTE LOCATION TO WHICH SYSOUT DATA SETS ARE TO BE\n              ROUTED.\n\n))DOUBLE    - INDICATES THAT THE OUTPUT SHOULD BE DOUBLE SPACED, ALL\n              OTHER CC INFORMATION IS IGNORED.\n\n))DUPLEX    - USED ONLY WITH THE ARR(###) PARM, INDICATES THAT THE\n              OUTPUT SHOULD BE PRINTED IN DUPLEX ON THE 6670.\n\n))EJECT     - INDICATES THAT THE OUTPUT SHOULD BEGIN EACH DATASET ON\n              A NEW PAGE.\n\n))EXPRESS   - USED ONLY WITH THE ARR(###) PARM, INDICATES THAT THE\n              OUTPUT SHOULD BE PRINTED EXPRESS, WHICH MEANS THAT 6670\n              SHOULD NOT WAIT FOR EACH PAGE TO BE PRINTED BEFORE\n              STARTING THE NEXT PAGE. WITH EXPRESS IT IS POSSIBLE TO\n              LOOSE OUTPUT IF THERE IS A PAPER JAM.\n\n))FCB('FCBNAME') - CARRIAGE CONTROL IMAGE TO BE USED.  (1-4 CHARACTER\n              CONTROL IMAGE NAME)\n\n))FCOUNT('FLASH-COUNT') - USED WITH THE FLASH PARAMETER TO INDICATE THE\n              NUMBER OF COPIES (FROM 1-255) THAT THE SYSTEM IS TO PRINT\n              WITH THE OVERLAY, BEGINNING WITH THE FIRST COPY PRINTED.\n\n))FLASH('FLASH-NAME') - USE TH FLASH PARAMETER TO IDENTIFY THE FORMS\n              OVERLAY TO BE USED ON THE 3800 PRINTING SUBSYSTEM.\n\n))FORMS('FORM')  - FORM TO BE USED WHEN THE DATA SET IS PRINTED.\n              (1-4 CHARACTER FORM NAME)\n\n))HEADING   - OUTPUT IS TO HAVE HEADING INFORMATION.  THIS CONTAINS\n              THE DATASET NAME.\n\n))HOLD      - OUTPUT IS TO BE PLACED ON A HOLD QUEUE UPON DEALLOCATION.\n\n))KEEP      - INDICATES THAT THE FILE SHOULD NOT BE DELETED AFTER\n              BEING PRINTED (SEE DELETE). KEEP IS THE DEFAULT.\n\n))LINES(##) - INDICATES THAT THE OUTPUT PAGE IS TO BE ## LINES LONG.\n              LINES MUST BE GREATER THAN 3 AND LESS THAN 100, LINES(#)\n              IS NOT USED IF DATASET USES CARRIAGE CONTROL.\n\n))LIST      - MEMBER NAMES ARE ONLY TO BE LISTED UNLESS PRINT IS\n              EXPLICITLY STATED.\n\n))MODIFY    - USE THE MODIFY PARAMETER TO SPECIFY THE NAME OF A COPY\n              MODIFICATION MODULE TO BE LOADED INTO THE 3800 PRINTER.\n              THIS NAME IS A 1-4 ALPHAMERIC OR NATIONAL CHARACTERS\n              THAT IDENTIFIES A COPY MODIFICATION MODULE PREVIOUSLY\n              CREATED IN SYS1.IMAGELIB.\n\n))MODTRC    - USED WITH THE MODIFIY PARAMETER TO IDENTIFY THE TABLE\n              REFERENCE CHARACTER THAT CORRESPONDS TO A CHARACTER\n              ARRANGEMENT TABLE SPECIFIED IN THE CHARS PARAMETER.\n              THIS TABLE IS USED FOR PRINTING FOR THE COPY\n              MODIFICATION DATA.\n\n))NOCCTL    - INDICATES THAT THE FILE IS TO BE PRINTED WITHOUT REGARD\n              FOR CARRIAGE CONTROL REGARDLESS OF CATALOG/DCB\n              INFORMATION.  IF THIS OPERAND AND THE CCTL OPERAND ARE\n              OMITTED, PRINTOFF USES THE INFORMATION IN THE\n              CATALOG/DCB TO DETERMINE CARRIAGE CARRIAGE CONTROL.\n\n))NOEJECT(#) - INDICATES THAT THE OUTPUT SHOULD NOT BEGIN EACH DATASET\n              ON A SEPARATE PAGE BUT SHOULD SEPARATE THE PRINTOUTS\n              WITH '#' BLANK LINES, 4 IS THE DEFAULT, THE VALID RANGE\n              IS 0 THRU 99.\n\n))NOHEADING - OUTPUT IS NOT HAVE HEADING INFORMATION.\n\n))NOHOLD    - OUTPUT IS NOT TO BE PLACED ON A HOLD QUEUE UPON\n              DEALLOCATION.\n\n))NOLINES   - INDICATES THAT THERE IS NOT TO BE PAGE BREAKS IN THE\n              OUTPUT, NOLINES IS THE DEFAULT.\n\n))NOLIST    - MEMBER NAMES ARE NOT TO BE LISTED (ONLY PRINTED UNLESS\n              NOPRINT IS EXPLICITLY STATED).\n\n))NOPRINT   - MEMBERS ARE NOT TO BE PRINTED (ONLY LISTED UNLESS NOLIST\n              IS EXPLICITLY STATED).\n\n))NUMBER    - USED ONLY WITH THE ARR(###) PARM, INDICATES THAT THE\n              OUTPUT SHOULD BE PAGE NUMBERED.\n\n))PDS       - INDICATES THAT THE FILE IS A PARTITIONED DATASET.\n              PRINTOFF WILL ONLY PRINT ALL MEMBERS OF A PDS IF PDS IS\n              SPECIFIED.\n\n))PRINT     - MEMBERS ARE ONLY TO BE PRINTED (NOT LISTED UNLESS LIST\n              IS EXPLICITLY STATED).\n\n))PROG('NAME') - PROGRAM TO BE USED TO PRINT THE DATASET.  SEE JCL\n              MANUAL FOR MORE DETAIL.\n\n))START(NNNNNN) - INDICATES THAT PRINTING SHOULD START ON RECORD NNNNNN,\n              THE DEFAULT IS START ON RECORD 1.\n\n))STOP(NNNNNN) - INDICATES THAT PRINTING SHOULD STOP ON RECORD NNNNNN,\n              THE DEFAULT IS STOP ON END OF FILE.\n\n))TEXT      - OUTPUT IS CONSIDERED TO BE TEXT. THIS OPERAND CHANGES\n              CHANGES DEFAULTS TO BE ASIS UCS(TN)'\n\n))TITLE(' TITLE ') - WHEN CODED THE USER CAN ENTER A 40 CHARACTER\n              HEADING TO REPLACE THE ' TSO FORGROUND HARDCOPY ' HEADING.\n              THE TITLE IS IGNORED IF 'NOHEADING' IS SPECIFIED.\n\n))TRC       - USE THE TRC PARAMETER WITH THE 3800 PRINTER TO INSTRUCT\n              THE SYSTEM THAT THE FIRST BYTE OF EACH OUTPUT DATA LINE\n              (FOLLOWING THE PRINT CONTROL CHARACTER) IS A TABLE\n              REFERENCE CHARACTER, WHICH SELECTS THE CHARACTER\n              ARRANGEMENT TABLE CORRESPONDING TO THE ORDER IN WHICH\n              THE TABLE NAMES HAVE BEEN SPECIFIED WITH THE CHARS\n              PARAMETER. THIS IS THE SAME AS DCB=OPTCD=J IN BATCH.\n\n))TRIPLE    - INDICATES THAT THE OUTPUT SHOULD BE TRIPLE SPACED, ALL\n              OTHER CC INFORMATION IS IGNORED.\n\n))UCS('IMAGE') - PRINT IMAGE TO BE USED WHEN PRINTED.  THIS IS OFTEN\n              CALLED THE TRAIN.  (1-4 CHARACTER PRINT IMAGE NAME)\n\n))VOLUME('VOLSER') - VOLUME SERIAL OF VOLUME ON WHICH DATA SETS TO BE\n              PRINTED ARE FOUND.  THIS VOLUME SERIAL WILL BE USED FOR\n              ALL DATA SETS SPECIFIED IN THE DATA SET LIST.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SPY": {"ttr": 6657, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x06\\x1b\\x06\\x1b\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 1563, "newlines": 1563, "modlines": 0, "user": "WSRCC"}, "text": "         TITLE 'S P Y --  MVS Console SPY Program  --  Vesrion 3.1'\n***********************************************************************\n*                                                                     *\n*                                 S P Y                               *\n*                                                                     *\n*                               02/26/82                              *\n*                                                                     *\n*                       Operator Console Monitor                      *\n*                                                                     *\n*     This program displays the contents of all active graphic        *\n*     operator's consoles on a TSO crt. The operator's screen can be  *\n*     either a 327x or a 370-168 intrgrated console with 35 lines.    *\n*     The TSO user can use any 327x terminal.                         *\n*                                                                     *\n*     SPY must be APF authorized.  This may be acomplished either by  *\n*     standard means or the use of the AUTH macro (AUTH calls the WDA *\n*     authorization SVC).  The operator console buffers and control   *\n*     blocks are now in fetch protected storage. Be sure to place the *\n*     'SPY' command in IKJEFTE2 and/or IKJEFTE8 so that it will       *\n*     retain APF authorization from TSO.                              *\n*                                                                     *\n*     SPY gives a TSO user the capability to enter any                *\n*     console operator command. This facility is protected by a       *\n*     simple 3 character password (in VIPWORD) to prevent some        *\n*     from entering an operator command by accident. This             *\n*     authorization is automaticly assigned if a user has OPER.       *\n*     THE SYNTAX IS:                                                  *\n*                                                                     *\n*     JES COMMAND:  $...  ANY JES COMMAND ...                         *\n*     OS COMMAND:   /...  ANY OS COMMAND ...  (THE / IS STRIPPED OFF) *\n*                                                                     *\n*     Typing the 3-letter VIP password 'TOGGLES' the VIP flag.        *\n*     This facility works by passing the command to the \"COMMAND\"     *\n*     probram as a parm, who in turn executes it using SVC 34.        *\n*     SPY, COMMAND, SWAP and QUEUE must all be APF authorized if they *\n*     are to work properly in conecrt. NOTE that the response to      *\n*     the command appears ONLY on the screen you are watching at the  *\n*     time. Also, your commands have the same console authority as the*\n*     screen you are watching, including the master console!  The     *\n*     moral being don't watch the master console and accidentally     *\n*     enter '/Q' or something like that...                            *\n*                                                                     *\n*     This probram will probably require both the SYS1.AMODGEN and    *\n*     SYS1.APVTMACS macro libraries to assemble properly.             *\n*     SPY was developed on a 370/168 MVS Release 3.7. This version    *\n*     will work ONLY on MVS/SP 1.3.0 or above.                        *\n*                                                                     *\n*          Steve Langley                                              *\n*          Southern California Edison                                 *\n*          P.O. Box 800                                               *\n*          Rosemead, Calif. 91770                                     *\n*          1-213-572-3435                                             *\n*                                                                     *\n         EJECT\n*                                                                     *\n*       The above version has been additionally modified at WDA       *\n*       to use BEGIN and FINISH macros.  Other changes will be        *\n*       marked with WDA#xx where xx is the change number.             *\n*       Questions and comments may be sent to                         *\n*                                                                     *\n*          Joseph A Martin                                            *\n*          State of Wisconsin    (WDA)                                *\n*          DH&SS - OIS - WSRCC                                        *\n*          P.O. Box 7850                                              *\n*          Madison, Wisc. 53707-7850                                  *\n*          1-608-266-9525                                             *\n*                                                                     *\n***********************************************************************\n         SPACE\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*  COMMAND     DESCRIPTION                                            *\n*                                                                     *\n*     B        End SPY                                                *\n*     C        Switch monitor to console 1                            *\n*     Cxx      Switch monitor to console xx                           *\n*     Dxx      Set delay to xx tenths seconds                         *\n*     E        End SPY                                                *\n*     F        Freeze display on current page                         *\n*     H        Display the help for PFkeys                     WDA#01 *\n*     L        Link to SWAP program (If available)                    *\n*     Q        Link to QUEUE program (If available)            WDA#01 *\n*     R        Release display                                        *\n*     S        Status of all consoles                                 *\n*     W        Start timer mode for 30 seconds                        *\n*     Wxx      Start timer mode for xx seconds                        *\n*     W0       Start timer mode until interrupt                       *\n*     ?        Display this page                                      *\n*     1        Display mode 1                                         *\n*     2        Display mode 2                                         *\n*                                                                     *\n*  Hitting interrupt will stop the wait timer                         *\n*                                                                     *\n*     Display modes 1 and 2 are only useful when watching a large     *\n*     35-line 3066 370-168 integrated console from a 24-line 327x-2   *\n*     TSO terminal. These modes are:                                  *\n*                                                                     *\n*     Display mode 1 - Page 1 = top 22 lines                          *\n*                      Page 2 = bottom 12 lines                       *\n*     Display mode 2 - Page 1 = top 22 lines                          *\n*                      Page 2 = bottom 22 lines                       *\n*                                                                     *\n***********************************************************************\n         EJECT\n*--------------MODIFICATION.LOG---------------------------------------*\n*                                                                     *\n*  Programmer  |  Date  | #xx |  Summary of changes made to program   *\n*--------------+--------+-----+---------------------------------------*\n* Joe Martin   |01/23/84| #01 | Carried forward several changes that  *\n*              |        |     | we had made to previous SPY versions. *\n*              |        |     | Added BEGIN and FINISH macro support, *\n*              |        |     | moved several things to a DSECT that  *\n*              |        |     | is pointed to by R13 (from BEGIN) and *\n*              |        |     | added R10 as a base register.         *\n*              |        |     | Also added AUTH macro support.        *\n*              |        |     | Added support for XCTL to QUEUE cmd,  *\n*              |        |     | and removed all the PCF2 \"X\" support. *\n*              |        |     |                                       *\n* Joe Martin   |01/23/84| #02 | Changed ERROR message handling and    *\n*              |        |     | the input line format on the display. *\n*              |        |     |                                       *\n* Joe Martin   |01/23/84| #03 | Added PFKey support and associated    *\n*              |        |     | Help facilities.  Added \"#\" macros    *\n*              |        |     | for definition of some screens.       *\n*              |        |     |                                       *\n* Joe Martin   |02/22/84| #04 | Added SNAP support for debugging in   *\n*              |        |     | an authorized environment as the TSO  *\n*              |        |     | TEST command is not usable there.     *\n*              |        |     | There are currently 2 SNAPs in the    *\n*              |        |     | code that may be used as samples or   *\n*              |        |     | moved as needed.  To triger the SNAP  *\n*              |        |     | function \"ZNAP\" must be entered.      *\n*              |        |     |                                       *\n*---------------------------------------------------------------------*\n         EJECT\n         PRINT ON,NOGEN\nSPY      BEGIN AUTHOR=WDA,BASE=(R12,R11,R10),                   WDA#01 X\n               SAVE=(WDASAVE,WDASLEN,0)                         WDA#01\n         SPACE\n***********************************************************************\n*                                                                     *\n*                       Program Initialization                        *\n*                                                                     *\n***********************************************************************\n         BAL   R14,INITSCAN       initialize ikjscan parmlist\n         GTSIZE ,                 get screen size\n         LTR   R0,R0              R0 = number of lines per screen\n         BZ    HARDCOPY           if nonzero assume a CRT is in use\n***********************************************************************\n*                                                                     *\n*                       This terminal is a CRT                        *\n*                                                                     *\n***********************************************************************\nCRT      DS    0H\n         STH   R0,LPSCREEN        R0 = lines per screen\n         STH   R1,CPLINE          R1 = characters per line\n         CH    R0,=H'24'          is user on a 3277?\n         BE    FLSCREEN           yes, just continue\n         MVI   MOD4FLG,X'FF'      set 3278-4 flag ON\n         MVC   CMDCTRL(3),R41C1   row 41, col 1\n         MVC   PHEADING(3),R42C1  row 42, col 1\n         MVC   R24C1(3),R43C1     row 43, col 1\nFLSCREEN DS    0H\n         CLI   TESTFLAG,X'00'     testflag bypasses several things\n         BNE   SKPTST3\n         STFSMODE ON,INITIAL=YES  turn on VTAM fullscreen mode\n         LA    R3,STAXLIST        R3 = address if stax list macro\n         STAX  ATTNEXIT,MF=(E,(3)) attn exit trap\nSKPTST3  DS    0H\n         B     BLDUCMS            continue with processing UCMS\n***********************************************************************\n*                                                                     *\n*                    This terminal is a hardcopy                      *\n*                                                                     *\n***********************************************************************\nHARDCOPY DS    0H\n         STSIZE SIZE=80           otherwise, hardcopy; set LSIZE=80\n         MVI   CRTFLAG,X'00'      we are using a hardcopy\n         MVC   CMDCTRL(6),BLANKS  zap out 327x cntrl chars\n         MVC   PHEADING(5),BLANKS zap out 327x cntrl chars      WDA#01\n         MVC   HELP(14),BLANKS    zap out 327x cntrl chars\n         MVC   PFKHELP(14),BLANKS zap out 327x cntrl chars      WDA#03\n***********************************************************************\n*                                                                     *\n*          Build a table of UCM addresses (One per console)           *\n*                                                                     *\n***********************************************************************\nBLDUCMS  DS    0H\n         L     R4,CVTPTR          R4 = address of CVT\n         USING CVT,R4\n         L     R4,CVTCUCB         R4 = addr of 'CUCB' (UCM base)\n         DROP  R4\n         USING UCM,R4\n         LR    R2,R4              R2 = R4\n         S     R2,=F'4'           R2 = addr of addr of UCM prefix\n         L     R2,0(R2)           R2 = addr of UCM prefix\n         USING UCMPRFX,R2\n         L     R5,UCMVEA          R5 = addr of first UCM entry\n         L     R6,UCMVEZ          R6 = length of each UCM entry\n         L     R7,UCMVEL          R7 = addr of last UCM entry\n         LA    R8,UCMTAB+16       R8 = addr of UCMTAB\n         L     R9,UCMTABE         R9 = addr of end of UCMTAB\n         XR    R3,R3              R3 = 0 (number of valid UCMS) WDA#01\nUCMLOOP  DS    0H\n         ST    R5,0(R8)           save UCM address in UCMTAB\n         LA    R3,1(R3)           R3 = R3 + 1  (one more UCM)   WDA#01\n         C     R5,UCMMCENT        is this UCM the Master Console UCM?\n         BNE   UCMNEXT            NO;  go look at next UCM entry\n         ST    R3,CONSOLE         YES; look at this one first   WDA#01\nUCMNEXT  DS    0H\n         LA    R8,16(R8)          R8 = addr of next UCMTAB entry\n         CR    R8,R9              does R8 point past end of UCMTAB?\n         BNL   UCMFULL            YES; leave loop\n         AR    R5,R6              R5 = addr of next UCM entry\n         CR    R5,R7              does R5 point past UCM entries?\n         BL    UCMLOOP            NO; keep going\n         B     UCMDONE            YES; table complete\nUCMFULL  DS    0H\n         MVC   ERROR(36),ERRMSG5  UCM table too small           WDA#02\nUCMDONE  DS    0H\n         STH   R3,NUMUCMS         save number of UCMs found     WDA#01\n         MVC   CONSOLE(4),=F'1'   make default console = 1      WDA#01\n         DROP  R2,R4\n***********************************************************************\n*                                                                     *\n*         Here we go... Use MODESET to put us in key 0                *\n*                                                                     *\n***********************************************************************\nSETAUTH  DS    0H                                                  SP3\n         CLI   TESTFLAG,X'00'\n         BNE   SKPTST4\n         TESTAUTH FCTN=1          check users authority         WDA#01\n         LTR   R15,R15            check the return code         WDA#01\n         BZ    GOTAUTH            skip auth acquire             WDA#01\n         MVI   AUTHFLAG,X'FF'     indicate that we got auth     WDA#01\n         AUTH  ON                 issue magic svc to get auth   WDA#01\nGOTAUTH  DS    0H                                               WDA#01\n         MODESET MODE=SUP                                          SP3\n         ESAR  R5                 ged sec ASID                     SP3\n         ST    R5,SASID           keep if for later                SP3\n         AXSET AX=ONE             set AX to allow SSAR             SP3\n         GETMAIN R,LV=820         GETMAIN area for TDCM            SP3\n         ST    R1,LOCDCM          save the address                 SP3\nSKPTST4  DS    0H\n***********************************************************************\n*                                                                     *\n*                            Top of loop                              *\n*              Locate screen buffer and prepare to TPUT               *\n*                                                                     *\n***********************************************************************\nNEXTPAGE DS    0H\n         CLI   ATTNFLG,X'00'      was ATTN hit?\n         BE    NOATTN             NO, continue loop\n         MVI   ATTNFLG,X'00'      YES, reset flag and process it\n         MVC   TIME(3),BLANKS     blank out timer field\n         MVI   WAITFLG,X'00'      turn off wait flag\n         XC    TIMER,TIMER        set timer to 0\nNOATTN   DS    0H\n         LA    R5,UCMTAB          R5 = addr of UCMTAB\n         L     R4,CONSOLE         R4 = console to be displayed\n         CH    R4,NUMUCMS         is number too high?\n         BNH   GETUCM             NO, continue\nRESETCN  DS    0H\n         MVC   ERROR(36),ERRMSG1  console undefined             WDA#02\nRESETCN1 DS    0H\n         L     R4,OLDCONS         reset to old console\n         ST    R4,CONSOLE         and save it\nGETUCM   DS    0H\n         SLL   R4,4               multiply by 16\n         LA    R5,0(R5,R4)        R5 = addr of addr of UCM\n         LR    R1,R5              R1 = addr of UCMTAB entry\n         L     R5,0(R5)           R5 = addr of UCM\n         USING UCMLIST,R5\n         L     R6,UCMXB           R6 = addr of RDCM\n         USING DCMTSRT,R6\n         LTR   R6,R6              is this a graphics console?\n         BP    GRAPHICS           yes\n***********************************************************************\n*                                                                     *\n*       This is not an operator graphic console - give ERRMSG4        *\n*                                                                     *\n***********************************************************************\n         LA    R5,UCMTAB          R5 = addr of UCMTAB\n         MVC   ERROR(36),ERRMSG4  non-graphic console           WDA#02\n         B     RESETCN1           reset the consloe number\n***********************************************************************\n*                                                                     *\n*   This is a graphic console - build trailer line with consdata      *\n*                                                                     *\n***********************************************************************\nGRAPHICS DS    0H\n         BAL   R14,CONSDATA       call consdata rtn\n*       Setup to copy pageable DCM to our address space            SP3\n         L     R5,DCMADTRN        addr of TDCM - 'FROM' for MVCP   SP3\n         LA    R7,CONASID         get 'CONSOLE' ASID               SP3\n         SSAR  R7                 set 'CONSOLE' as SECONDARY       SP3\n         L     R7,LOCDCM          'TO' addr for MVCP               SP3\n         LA    R3,820             length to move                   SP3\n         SR    R15,R15            'FROM' key                       SP3\nMOVEDCM  DS    0H\n         MVCP  0(R3,R7),0(R5),R15 move the data                    SP3\n         BZ    DCMMOVED           branch if move complete          SP3\n         LA    R5,256(R5)         bump 'FROM' addr                 SP3\n         LA    R7,256(R7)         bump 'TO' addr                   SP3\n         SH    R3,=H'256'         decrement true length            SP3\n         B     MOVEDCM            go get the rest                  SP3\nDCMMOVED DS    0H\n         L     R5,SASID           restore previous secondary -     SP3\n         SSAR  R5                 should be same as primary        SP3\n         L     R7,LOCDCM          addr of our copy of DCM          SP3\n         USING DCMSTRT,R7\n***********************************************************************\n*                                                                     *\n*    Fillin operators command input buffer and set VIP flag indicator *\n*                                                                     *\n***********************************************************************\n         MVC   LASTLINE(79),DCMINPUT move in input buffer line\n         MVI   MODE+1,C' '        blank out VIP indicator\n         CLI   VIPFLG,X'FF'       is the VIP flag on?\n         BNE   CHKINTEG           nope\n         MVI   MODE+1,C'*'        turn on VIP indicator\n***********************************************************************\n*                                                                     *\n*                         Check console type                          *\n*                                                                     *\n***********************************************************************\nCHKINTEG DS    0H\n         MVI   INTEGFLG,X'FF'     turn on 3066 console flag\n         CLC   DCMMSGAL(2),=H'30' is this really a 3066 console?\n         BE    CHKMODEL           YES; chk if it will fit on our term\n         MVI   INTEGFLG,X'00'     NO; turn off 3066 console flag\n*        CLC   DCMMSGAL(2),=H'20' is this 327x-2 type console?     AEI\n*        BNE   NOTSUPRT           NO;  not supported, so ABEND     AEI\n         MVI   FREEZE,C'F'        YES; freeze display\n         MVI   PAGE,C'1'               on page 1 of user's CRT\n         MVC   TPUTLEN(4),MOD2TPUT set TPUT length for short screen\n         B     MOD2               and treet user to MOD2 for now\n***********************************************************************\n*                                                                     *\n*        This operator's console is neither a 24-line 327x-2 nor      *\n*        a 35-line 3066 370-168 indegrated console, so ABEND.         *\n*                                                                     *\n***********************************************************************\nNOTSUPRT DS    0H\n         LA    R1,ERRMSG6         R1 = addr of string to TPUT\n         LA    R0,26              R0 = length of TPUT\n         BAL   R14,TERMPUT        do a TPUT\n         ABEND 999                ABEND with U999\n***********************************************************************\n*                                                                     *\n*     This is a 35-line 3066 operators console. If the user has a     *\n*     43-line 3278-4 there is no problem, the whole thing can be      *\n*     displayed at once. However, if the user has a 24-line 327x-2    *\n*     we will have to break the display into 2 pages so it will fit.  *\n*                                                                     *\n***********************************************************************\nCHKMODEL DS    0H\n         CLI   MOD4FLG,X'FF'      is this a 3278-4? (43 lines)\n         BNE   MOD2               NO - must be a MOD2 (24 lines)\n***********************************************************************\n*                                                                     *\n*                  User has a 43-line 3278-4 CRT                      *\n*                                                                     *\n*        We can just freeze the display on 'PAGE 1' and continue      *\n*                                                                     *\n***********************************************************************\n         MVI   FREEZE,C'F'        freeze the display\n         MVI   PAGE,C'1'          on PAGE 1 intentially\n         MVC   TPUTLEN(4),MOD4TPUT set length for full 3278-4 screen\n         L     R8,DCMASCRN        R8 = addr of screen buffer + 6\n         LA    R4,BUF             R4 = addr of output buffer\n         LA    R5,M4BUFLEN        R5 = 3278-4 buffer len (35 lines)\n         LA    R9,M4BUFLEN        R9 = 3278-4 buffer len (35 lines)\n         B     MOVEBUFF\n***********************************************************************\n*                                                                     *\n*                  User has a 24-line 327x-2 CRT                      *\n*                                                                     *\n*        This oper console will have to be displayed in two segments  *\n*        or 'PAGES' since 35 lines won't fit in this 24 line tube.    *\n*                                                                     *\n***********************************************************************\nMOD2     CLI   PAGE,C'1'          are we on page 1?\n         BNE   ONTWO              NO, so we must be on 2\n         CLI   FREEZE,C'F'        are we frozen on page 1?\n         BNE   PAGE2              NO, so display page 2\n         B     PAGE1              YES, so display page 1\nONTWO    CLI   FREEZE,C'F'        are we frozen on page 2?\n         BE    PAGE2              YES, so display page 2\nPAGE1    MVI   PAGE,C'1'          page = 1\n         L     R8,DCMASCRN        R8 = addr of screen image buffer + 6\n         LA    R4,BUF             R4 = addr of output buffer\n         LA    R5,M2BUFLEN        R5 = length of output buf (21 lines)\n         LA    R9,M2BUFLEN        R9 = console buffer len   (21 LINES)\n         B     MVETRAIL           go move the buffer\nPAGE2    MVI   PAGE,C'2'          page = 2\n         L     R8,DCMASCRN        R8 = addr of screen image buffer + 6\n         CLI   MODE,C'2'          are we in display mode 2?\n         BE    DMODE2             YES, branch to DMODE2\nDMODE1   LA    R8,LEN22(R8)       move pointer down 23 lines\n         LA    R9,LEN13           R9 = length of last 12 lines\n         B     CONTINUE           jump around mode 2 display\nDMODE2   LA    R8,LEN9(R8)        move pointer down 9 lines\n         LA    R9,LEN21           R9 = length of source buffer\nCONTINUE LA    R4,BUF             R4 = addr of output buffer\n         LA    R5,M2BUFLEN        R5 = length of output buffer\nMVETRAIL MVC   ENDMOD2(TRAILEN),CMDCTRL move in trailer\n***********************************************************************\n*                                                                     *\n*               Move the screen image buffer into buf                 *\n*                                                                     *\n***********************************************************************\nMOVEBUFF STM   R4,R9,MOVEBSAV     keep regs                        SP3\n*        Setup to copy console buffer to out address space.        SP3\n*        First fill area with spaces                               SP3\n         L     R9,=X'40000000'    make blank the pad, length=0     SP3\n         LA    R8,*               not that it really matters       SP3\n         MVCL  R4,R8              pad with spaces                  SP3\n         LA    R4,CONASID         get 'CONSOLE' ASID               SP3\n         SSAR  R4                 set 'CONSOLE' as secondary       SP3\n         LM    R4,R9,MOVEBSAV     get back addresses, lengths      SP3\n         SR    R15,R15            'FROM' key                       SP3\nMOVEBFR  MVCP  0(R9,R4),0(R8),R15 move it                          SP3\n         BZ    BFRMOVED           get out when all moved           SP3\n         LA    R8,256(R8)         bump 'FROM' addr                 SP3\n         LA    R4,256(R4)         bump 'TO' addr                   SP3\n         SH    R9,=H'256'         decrement true length            SP3\n         B     MOVEBFR            get the rest                     SP3\nBFRMOVED L     R4,SASID           restore previous secondary -     SP3\n         SSAR  R4                 should be same as primary.       SP3\n         DROP  R5,R6,R7\n         CLI   CRTFLAG,X'FF'      is this a CRT?\n         BE    TPUTCRT            YES, process as a CRT\n***********************************************************************\n*                                                                     *\n*             User has a line-at-a-time hardcopy terminal             *\n*                                                                     *\n***********************************************************************\n         XR    R8,R8              R8 = counter = 0\n         LA    R1,BUF             set pointer to first line of buffer\n         ICM   R1,8,EDITFLG       edit mode\n         L     R0,=F'78'          R0 length of output line\nNEXTL    LR    R3,R1              save R1 since TPUT zaps it\n         CLC   0(78,R1),BLANKS    is the entire line x'40's     WDA#01\n         BE    NEXTL1             YES, don't print the line     WDA#01\n         BAL   R14,TERMPUT        print one line on hardcopy\nNEXTL1   LA    R8,1(R8)           add 1 to counter              WDA#01\n         C     R8,=F'21'          have we printed last line?\n         BE    DOLAST2            YES, continue\n         LA    R1,80(R3)          NO, point to next line\n         CLI   INTEGFLG,X'FF'     is this an integrated console?\n         BE    NOT3270            YES\n         MVC   0(5,R1),BLANKS     blank out 3270 ctrl chars\n         LA    R1,4(R1)           add 4 extra bytes to skip ctrl chars\nNOT3270  L     R0,=F'78'          load length of line\n         ICM   R1,8,EDITFLG       edit mode\n         B     NEXTL              print next line\nDOLAST2  LA    R1,LASTLINE        R1 = addr of string to TPUT\n         LA    R0,79              R0 = length of TPUT\n         BAL   R14,TERMPUT        do a TPUT\n         LA    R1,HEADING         R1 = addr of string to TPUT\n         LA    R0,79              R0 = length of TPUT\n         BAL   R14,TERMPUT        do a TPUT\n         OC    USERLINE(72),BLANKS make command line blanks     WDA#01\n         LA    R1,USERLINE        R1 = addr of string to TPUT\n         LA    R0,79              R0 = length of TPUT\n         BAL   R14,TERMPUT        do a TPUT\n         B     CHKWAIT            go check the wait timer\n***********************************************************************\n*                                                                     *\n*               Display the operator's screen on a 327x               *\n*                                                                     *\n***********************************************************************\nTPUTCRT  LA    R1,CLEAR           R1 = addr of output stream\n         L     R0,TPUTLEN         R0 = length of TPUT\n         ICM   R1,8,FULLSCR       set ASIS type for TPUT\n         BAL   R14,TERMPUT        do a TPUT; display entire screen\n***********************************************************************\n*                                                                     *\n*      If we are in wait mode do a STIMER for the necessary length    *\n*      of time, then calculate and display the new timer count.       *\n*      If count has hit zero, turn off wait flag.                     *\n*                                                                     *\n***********************************************************************\nCHKWAIT  MVC   USERLINE(72),NULLS null out error field          WDA#02\n         CLI   WAITFLG,X'FF'      is the wait flag on?\n         BNE   READCHAR           NO, so go get a command\n         STIMER WAIT,BINTVL=DELAY wait for delay * .01 seconds\n         L     R2,TIMER           R2 = current value of timer\n         BCTR  R2,0               timer = timer - 1\n         ST    R2,TIMER           store new value of timer\n         CVD   R2,WORK            convert to decimal\n         MVC   SCRATCH(4),PATTERN move in edit pattern\n         ED    SCRATCH(4),WORK+6  edit in console number\n         MVC   TIME(3),SCRATCH+1  move time left into place\n         LTR   R2,R2              has timer hit zero?\n         BNZ   NEXTPAGE           NO, continue to count\n         MVC   TIME(3),BLANKS     clear counter field\n         XI    WAITFLG,X'FF'      toggle wait flag off\n         B     NEXTPAGE           and go on as if nothing happened..\n***********************************************************************\n*                                                                     *\n*                       Read command from user                        *\n*                                                                     *\n***********************************************************************\nREADCHAR XC    CREPLY(86),CREPLY  clear out the input line      WDA#03\n         CLI   CRTFLAG,X'FF'      is this a 327x terminal       WDA#03\n         BNE   GETHCOPY           NO - go do TPUT edit          WDA#03\n         TGET  CREPLY,86,ASIS     get input line                WDA#03\n         CLI   SNAPFLG,X'FF'      do we snap                    WDA#04\n         BNE   SKPSNP02           NO - branch                   WDA#04\n         STM   R15,R1,SAVER15X    save the registers            WDA#04\n         LA    R0,CREPLY          point at start of snap area   WDA#04\n         ST    R0,SNAPBGN         save start address            WDA#04\n         LA    R1,CREPLY+85       point at end of snap area     WDA#04\n         ST    R1,SNAPEND         save end address              WDA#04\n         MVI   SNAPEND,X'80'      indicate end of parms         WDA#04\n         LA    R0,SNAPBGN         point at beginning of list    WDA#04\n         SNAP  DCB=SNAPDCB,LIST=(R0),ID=2                       WDA#04\n         LM    R15,R1,SAVER15X    restore the registers         WDA#04\nSKPSNP02 DS    0H                                               WDA#04\n         LTR   R15,R15            was return code 0             WDA#03\n         BNZ   GETERROR           NO - go tell user             WDA#03\n         OC    REPLY(80),BLANKS   convert chars to upper case   WDA#03\n         ST    R1,DATACHRS        save count of data entener    WDA#03\n         CLI   CREPLY,X'6E'       is this a reshow? (VTAM ONLY) WDA#03\n         BE    NEXTPAGE           YES, go refresh the display   WDA#03\n         CLI   CREPLY,X'7D'       was this \"ENTER\"              WDA#03\n         BNE   PFKCHK01           NO - go check PFK entries     WDA#03\n         B     CHKREPLY           go upcase and check reply     WDA#03\nGETHCOPY DS    0H                                               WDA#03\n         TGET  REPLY,80,EDIT      get input line                WDA#03\n         LTR   R15,R15            was return code 0             WDA#03\n         BNZ   GETERROR           NO  - go tell user            WDA#03\n         OC    REPLY(80),BLANKS   convert chars to upper case   WDA#03\nCHKREPLY DS    0H                                               WDA#03\n         CLI   REPLY,C' '         just a blank?                 WDA#03\n         BE    NEXTPAGE           YES, go refresh the display   WDA#03\n         B     REALCMDS           check out command             WDA#03\nGETERROR DS    0H                                               WDA#03\n         MVC   ERROR(36),ERRMSG8  move in the error message     WDA#03\n         B     NEXTPAGE           go display error              WDA#03\n***********************************************************************\n*                                                                     *\n*              PFK routine  - add or change PFK meanings              *\n*                           - use the PFK entry as a command          *\n*                                                                     *\n***********************************************************************\nPFKCHK01 DS    0H                                               WDA#03\n         LA    R2,PFKTABLE        get start of table            WDA#03\nPFKCHK02 DS    0H                                               WDA#03\n         CLC   CREPLY(1),0(R2)    do we match the entry         WDA#03\n         BE    PFKCHK03           YES, continue                 WDA#03\n         LA    R2,40(R2)          point at next entry           WDA#03\n         CLI   0(R2),X'FF'        end of table????              WDA#03\n         BE    REALCMDS           not in table-check command    WDA#03\n         B     PFKCHK02           go try next PFK entry         WDA#03\nPFKCHK03 DS    0H                                               WDA#03\n         L     R1,DATACHRS        reload data count from TGET   WDA#03\n         C     R1,=F'3'           was it PFK+DATA or just PFK?  WDA#03\n         BE    PFKCHK04           nodata => just PFK...         WDA#03\n         C     R1,=F'42'          check for command too long    WDA#03\n         BH    PFKERROR           tell user if too long         WDA#03\n         MVC   4(36,R2),REPLY     move command to table         WDA#03\n         B     REALCMDS           go see fi command is OK       WDA#03\nPFKCHK04 DS    0H                                               WDA#03\n         MVC   REPLY(36),4(R2)    move in the command           WDA#03\n         MVI   REPLY+36,C' '      make sure blank follows cmd.  WDA#03\n         B     REALCMDS           go do command processing      WDA#03\nPFKERROR DS    0H                                               WDA#03\n         MVC   ERROR(36),ERRMSG9  move message to buffer        WDA#03\n         B     NEXTPAGE           redisplay                     WDA#03\n***********************************************************************\n*                                                                     *\n*               Check for system operator commands                    *\n*                                                                     *\n***********************************************************************\nREALCMDS DS    0H                                               WDA#03\n         CLI   VIPFLG,X'FF'       are we in VIP mode?\n         BNE   PARSECMD           NO, so continue\n         LA    R3,OPERCMDL        get address of cmd length     WDA#01\n         ST    R3,OPERPRM         store address in parm list    WDA#01\n         LA    R3,OPERCN          get address of cons number    WDA#01\n         ST    R3,OPERPRM1        store address in parm list    WDA#01\n         MVI   OPERPRM1,X'80'     indicate end of parm list     WDA#01\nOPER     CLI   REPLY,C'/'         is this an OS operator command?\n         BNE   JES                NO, check for JES command\n         MVC   OPERCMD(79),REPLY+1 YES; quit and blank out reply field\n         MVI   OPERCMD+79,C' '    blank out column 80\n         B     DOCMD              branch to COMMAND and SVC34\nJES      CLI   REPLY,C'$'         is this a JES command?\n         BNE   PARSECMD           NO, continue\n         SPACE\n*removed MVC   SCRATCH(3),REPLY   save 3 chars of reply         WDA#01\n*   \"    OC    SCRATCH(3),BLANKS  convert to upper case         WDA#01\n*   \"    CLC   SCRATCH(3),=CL3'$TA' is this a $TA command?      WDA#01\n*   \"    BE    CMDOKAY              YES; command is okay        WDA#01\n*   \"    CLC   SCRATCH(2),=CL2'$T'  is this a $Tx command?      WDA#01\n*   \"    BE    CMDRSTR              YES; command is restricted  WDA#01\n*   \"    CLC   SCRATCH(3),=CL3'$VS' is this a $VS command?      WDA#01\n*   \"    BNE   CMDOKAY            NO;  command is okay          WDA#01\n*CMDRSTR DS    0H                                               WDA#01\n*        MVC   ERROR(36),ERRMSG7  YES; put in error message     WDA#02\n*removed B     NEXTPAGE           and continue on               WDA#01\n         SPACE\nCMDOKAY  DS 0H\n         MVC   OPERCMD(80),REPLY  move cmd in form reply field\nDOCMD    DS 0H\n         MVC   REPLY(80),BLANKS   blank out reply field\n         LA    R3,OPERCMD+79      R3 = addr of last column\n         LA    R1,OPERCMD         R1 = addr of first column\nNXTCHAR  DS 0H\n         CLI   0(R3),C' '         is this a blank?\n         BNE   LASTCHAR           NO; this is last char in cmd\n         BCTR  R3,0               R3 = R3 - 1\n         CR    R3,R1              is whole thing blank?\n         BL    NEXTPAGE           YES; something wrong, but cont anyway\n         B     NXTCHAR            NO;  go look at next char\nLASTCHAR DS 0H\n         SR    R3,R1              R3 = R3 - R1\n         LA    R3,1(R3)           R3 = R3 + 1\n         STH   R3,OPERCMDL        save cmd length\n         L     R3,SAVEUPT         R3 = addr of UPT\n         USING UPT,R3\n         NI    UPTSWS,X'FF'-UPTWTP turn off 'WTP'\n         MVC   OPERCN(4),CONSOLE  save console id in command parms\n         CLI   SNAPFLG,X'FF'      do we snap                    WDA#04\n         BNE   SKPSNP01           NO - branch                   WDA#04\n         LA    R1,OPERPRM         R1 = addr of parmlist for     WDA#04\n         ST    R1,SNAPBGN         save start address            WDA#04\n         LA    R1,96(,R1)         point at the end of area      WDA#04\n         ST    R1,SNAPEND         save end address              WDA#04\n         MVI   SNAPEND,X'80'      indicate end of parms         WDA#04\n         LA    R0,SNAPBGN         point at beginning of list    WDA#04\n         SNAP  DCB=SNAPDCB,LIST=(R0),ID=1                       WDA#04\n         LA    R1,CLEAR           R1 = addr of output stream    WDA#04\n         L     R0,TPUTLEN         R0 = length of TPUT           WDA#04\n         ICM   R1,8,FULLSCR       set ASIS type for TPUT        WDA#04\nSKPSNP01 DS    0H                                               WDA#04\n         LA    R1,OPERPRM         R1 = addr of parmlist for 'COMMAND'\n         LINK  EP=COMMAND         execute operator command\n         OI    UPTSWS,UPTWTP      turn on 'WTP'\n         B     NEXTPAGE           continue\n         EJECT\n***********************************************************************\n*                                                                     *\n*          Convert command to upper case and call IKJSCAN             *\n*                                                                     *\n*    This call to IKJSCAN is completely unnecessary to the operation  *\n*    of SPY. It is included solely to allow the 'X' feature of        *\n*    PCF2 to operate. If you do not have PCF2, this could be removed. *\n*                                                                     *\n***********************************************************************\nPARSECMD DS    0H\n         B     PARSECNT           continue - bypass PCF2 stuff  WDA#01\n         SPACE\n* PCF2   The following code was left as it was received - while WDA#01\n* PCF2   we have PCF2 we don't really want anyone \"X\"ing here.  WDA#01\n* PCF2   Note: The lines with two *'s were commented when I     WDA#01\n* PCF2         began removing the PCF2 support code. - JM.      WDA#01\n* PCF2         Also-There was other code for PCF2 in INITSCAN.  WDA#01\n         SPACE\n* PCF2   MVC   CPREPLY(79),REPLY  move in the reply area\n* PCF2   XC    CBUF(4),CBUF       clear offset and length\n* PCF2   MVI   CBUF+1,84          move in length of 84\n* PCF2   MVC   CSPLBLOK(24),CSPLSAVE  copy in CSPL block\n* PCF2   XC    CSOABLOK(8),CSOABLOK\n**PCF2   L     R2,SAVEJSCB        R2 = addr of out JSCB        AEI SP3\n**PCF2   USING IEZJSCB,R2                                      AEI SP3\n**PCF2   NI    JSCBOPTS,X'FF'-JSCBAUTH turn off for PCFSCAN    AEI SP3\n* PCF2   LA    R1,CSPLBLOK        R1 = addr of cmd scan parm list\n* PCF2   L     R15,ADDRSCAN       R15 = addr of IKJSCAN\n* PCF2   BALR  R14,R15            invoke IKJSCAN\n**PCF2   OI    JSCBOPTS,JSCBAUTH  turn on APF bit again        AEI SP3\n**PCF2   DROP  R2                                              AEI SP3\n* PCF2   LA    R1,CSOABLOK        R1 = addr of cmd scan output area\n* PCF2   USING CSOA,R1\n* PCF2   TM    CSOAFLG,CSOANOC    is the buffer empty?\n* PCF2   BO    NEXTPAGE           YES; just go refresh\n* PCF2   DROP  R1\n         SPACE\nPARSECNT DS    0H                                               WDA#01\n         EJECT\n***********************************************************************\n*                                                                     *\n*                       W  --  Enter wait mode                        *\n*                                                                     *\n***********************************************************************\nCWAIT    CLI   REPLY,C'W'         do we shift to wait mode?\n         BNE   CDELAY             NO, so continue\n         XI    WAITFLG,X'FF'      turn on wait flag\n         LA    R2,30              set default value = 30\n         LA    R15,CONVBIN        branch to conversion rtn\n         BALR  R14,R15            EBCDIC to binary\n         MVC   SCRATCH(4),PATTERN move in edit pattern\n         ED    SCRATCH(4),WORK+6  edit in console number\n         MVC   TIME(3),SCRATCH+1  move time left into place\n         ST    R2,TIMER           store starting timer value\n         B     NEXTPAGE           all set - go display next page\n***********************************************************************\n*                                                                     *\n*            D  --  Set timer delay in tenths of a second             *\n*                                                                     *\n***********************************************************************\nCDELAY   CLI   REPLY,C'D'         are we changing the time delay?\n         BNE   CCONSOLE           NO, so continue\n         LA    R2,10              set default value = 10 tenths second\n         LA    R15,CONVBIN        branch to conversion routine\n         BALR  R14,R15            EBCDIC to binary\n         MVC   SCRATCH(5),DPATTRN move in edit pattern\n         ED    SCRATCH(5),WORK+6  edit in delay time\n         MVC   PAUSE(3),SCRATCH+2 move time left into place\n         MH    R2,=H'10'          convert to 100ths of a second\n         ST    R2,DELAY           store wait delay value\n         B     NEXTPAGE           all set - go display next page\n***********************************************************************\n*                                                                     *\n*                    C  --  Set console number                        *\n*                                                                     *\n***********************************************************************\nCCONSOLE CLI   REPLY,C'C'         do we change consoles?\n         BNE   BYE                NO, so continue\n         L     R2,CONSOLE         set default consloe\n         ST    R2,OLDCONS         save old console #\n         LA    R15,CONVBIN        branch to\n         BALR  R14,R15            EBCDIC->binary converter\n         ST    R2,CONSOLE         store R2 away as console number\n         B     NEXTPAGE           continue\n***********************************************************************\n*                                                                     *\n*                        B  --  Terminate SPY                         *\n*                                                                     *\n***********************************************************************\nBYE      CLI   REPLY,C'B'         is it a 'B'?\n         BE    DONE               YES, so quit\n***********************************************************************\n*                                                                     *\n*                        E  --  Terminate SPY                         *\n*                                                                     *\n***********************************************************************\nEND      CLI   REPLY,C'E'         is is an 'E'?\n         BE    DONE               YES, so quit\n***********************************************************************\n*                                                                     *\n*               F  --  Freeze display on current page                 *\n*                                                                     *\n***********************************************************************\nF        CLI   REPLY,C'F'         is it an 'F'?\n         BNE   R                  NO, so continue on\n         MVI   FREEZE,C'F'        turn on freeze indicator\n         B     NEXTPAGE           continue\n***********************************************************************\n*                                                                     *\n*           R  --  Release freeze on current page display             *\n*                                                                     *\n***********************************************************************\nR        CLI   REPLY,C'R'         is it an 'R'?\n         BNE   MODE1              NO, so continue on\n         MVI   FREEZE,C'R'        turn off freeze indicator\n         B     NEXTPAGE           continue\n***********************************************************************\n*                                                                     *\n*                1  --  Shift to mode 1 type display                  *\n*                                                                     *\n***********************************************************************\nMODE1    CLI   REPLY,C'1'         do we shift to mode 1 dislpay?\n         BNE   MODE2              NO, so continue\n         MVI   MODE,C'1'          set mode indicator\n         B     NEXTPAGE\n***********************************************************************\n*                                                                     *\n*                2  --  Shift to mode 2 type display                  *\n*                                                                     *\n***********************************************************************\nMODE2    CLI   REPLY,C'2'         do we shift to mode 2 display?\n         BNE   GETHELP            NO, so continue\n         MVI   MODE,C'2'          set mode indicator\n         B     NEXTPAGE\n***********************************************************************\n*                                                                     *\n*           ?  --  List help for SPY commands on terminal             *\n*                                                                     *\n***********************************************************************\nGETHELP  CLI   REPLY,C'?'         asking for help?\n         BNE   GETHPFK            NO, so continue\n         LA    R1,HELP            R1 = addr of help page\n         LA    R0,HLENGTH         R0 = length of help page\n         ICM   R1,8,FULLSCR       insert ASIS cntl chars\n         BAL   R14,TERMPUT        do a TPUT; display HELP\n         B     READCHAR\n***********************************************************************\n*                                                                     *\n*                    H  --  DISPLAY PFK ASSIGNMENTS                   *\n*                                                                     *\n***********************************************************************\nGETHPFK  CLI   REPLY,C'H'         do we want PFK help?          WDA#03\n         BNE   GETSTAT            NO, so continue               WDA#03\n         LA    R1,12              set counter for first pass    WDA#03\n         LA    R2,PFKTABLE        point at PFK table            WDA#03\n         LA    R3,PFKLIST+3       point at help display (01-12) WDA#03\nPFKLOOP1 MVC   1(2,R3),2(R2)      move in PFK number            WDA#03\n         MVC   4(36,R3),4(R2)     move in PFK command           WDA#03\n         LA    R3,83(R3)          point at next help entry      WDA#03\n         LA    R2,40(R2)          point at next PFK command     WDA#03\n         BCT   R1,PFKLOOP1        go do next PFK                WDA#03\n         LA    R3,PFKLIST+40+3    point at help dislpay (13-24) WDA#03\n         LA    R1,12              set counter for second pass   WDA#03\nPFKLOOP2 MVC   1(2,R3),2(R2)      move in PFK number            WDA#03\n         MVC   4(36,R3),4(R2)     move in PFK command           WDA#03\n         LA    R3,83(R3)          point at next help entry      WDA#03\n         LA    R2,40(R2)          point at next PFK command     WDA#03\n         BCT   R1,PFKLOOP2        go do next PFK                WDA#03\n         LA    R1,PFKHELP         point at display              WDA#03\n         LA    R0,PFKHLEN         get length of display         WDA#03\n         ICM   R1,8,FULLSCR       insert ASIS cntl chars        WDA#03\n         BAL   R14,TERMPUT        do a TPUT; display PFKHELP    WDA#03\n         B     READCHAR           go get next input             WDA#03\n***********************************************************************\n*                                                                     *\n*           S  --  List status page for all defined consoles          *\n*                                                                     *\n***********************************************************************\nGETSTAT  CLI   REPLY,C'S'         asking for status report?\n         BNE   SWAPLINK           NO; continue\n         BAL   R14,CLRBUF         clear buffer\n         LH    R5,NUMUCMS         R5 = number of consoles       WDA#01\n         LA    R2,UCMTAB+16       R2 = addr of first console entry\n         XR    R4,R4              clear R4\n         LA    R4,BUF             R4 = addr of TPUT buffer\n         LA    R3,23              R3 = number of lines on screen\nSTLOOP   LR    R1,R2              R1 = addr of UCMTAB entry\n         BAL   R14,CONSDATA       call console data routine\n         MVC   0(45,R4),CONNUM    save results in buffer\n         LA    R4,80(R4)          R4 = addr of next line in buffer\n         LA    R2,16(R2)          R2 = addr of next UCMTAB entry\n         BCT   R3,NOTFULL         branch if the screen not full\nFULL     LA    R1,HEADER          R1 = addr of TPUT buffer\n         LA    R0,STATLEN         R0 = length of TPUT buffer\n         ICM   R1,8,FULLSCR       insert ASIS cntl chars\n         BAL   R14,TERMPUT        do a TPUT; display status page\n         BAL   R14,CLRBUF         clear buffer\n         LA    R4,BUF             R4 = addr of TPUT buffer\n         LA    R3,23              R3 = number of lines on screen\n         BCT   R5,MORE            more entries?                 WDA#01\n         B     NEXTPAGE           NO; continue\nMORE     TGET  REPLY,1            pause for enter\n         B     STLOOP             and loop\nNOTFULL  BCT   R5,STLOOP          loop if more                  WDA#01\n         LA    R1,HEADER          R1 = addr of TPUT buffer\n         LA    R0,STATLEN         R0 = length of TPUT buffer\n         ICM   R1,8,FULLSCR       insert ASIS cntl chars\n         BAL   R14,TERMPUT        do a TPUT; dislpay status page\n         TGET  REPLY,1            pause for enter\n         B     NEXTPAGE\n***********************************************************************\n*                                                                     *\n*                    L  --  Link to SWAP program                      *\n*                                                                     *\n***********************************************************************\nSWAPLINK CLI   REPLY,C'L'         should we XCTL to SWAP?\n         BNE   QUEUE              NO, SO continue               WDA#01\n         CLI   TESTFLAG,X'00'     was testflag set?\n         BNE   SKPTST5            YES, skip the MODESET\n         MODESET MODE=PROB        don't need sup state anymore\n         CLI   AUTHFLAG,X'FF'     check if we got auth          WDA#01\n         BNE   SKPTST5            if not then continue          WDA#01\n         AUTH  OFF                unauthorize SPY for XCTL      WDA#01\nSKPTST5  DS    0H\n         L     R13,4(R13)         get caller's save area ptr    WDA#01\n         L     R1,24(R13)         get original parm area ptr    WDA#01\n         XCTL  (2,12),EP=SWAP     XCTL to SWAP\n***********************************************************************\n*                                                                     *\n*                    Q  --  Link to QUEUE program               WDA#01*\n*                                                                     *\n***********************************************************************\nQUEUE    CLI   REPLY,C'Q'         should we XCTL to SWAP?       WDA#01\n         BNE   VIP                NO, SO continue               WDA#01\n         CLI   TESTFLAG,X'00'     was testflag set?             WDA#01\n         BNE   SKPTSTQ            YES, skip the MODESET         WDA#01\n         MODESET MODE=PROB        don't need sup state anymore  WDA#01\n         CLI   AUTHFLAG,X'FF'     check if we got auth          WDA#01\n         BNE   SKPTSTQ            if not then continue          WDA#01\n         AUTH  OFF                unauthorize SPY for XCTL      WDA#01\nSKPTSTQ  DS    0H\n         L     R13,4(R13)         get caller's save area ptr    WDA#01\n         L     R1,24(R13)         get original parm area ptr    WDA#01\n         XCTL  (2,12),EP=QUEUE    XCTL to QUEUE                 WDA#01\n***********************************************************************\n*                                                                     *\n*                       Check for VIP password                        *\n*                                                                     *\n***********************************************************************\nVIP      CLC   REPLY(3),VIPWORD   was VIP password entered?\n         BNE   SNAPCHK            NO, continue                  WDA#04\n         XI    VIPFLG,X'FF'       toggle VIP flag\n         B     NEXTPAGE\n***********************************************************************\n*                                                                     *\n*                       Check for SNAP request                        *\n*                                                                     *\n***********************************************************************\nSNAPCHK  CLC   REPLY(4),=C'ZNAP'  was SNAP requested?           WDA#04\n         BNE   BADCMD             NO, continue                  WDA#04\n         XI    SNAPFLG,X'FF'      toggle SWAP flag              WDA#04\n         CLI   SNAPFLG,X'FF'      do we turn snap on            WDA#04\n         BNE   SNAPCLS            NO - turn snap off            WDA#04\nSNAPOPN  DS    0H                                               WDA#04\n         OPEN  (SNAPDCB,OUTPUT)   open file for output          WDA#04\n         MVI   HEADING2+4,C'-'    set the indicator             WDA#04\n         B     SNAPXIT            exit SNAPCHK                  WDA#04\nSNAPCLS  DS    0H                                               WDA#04\n         CLOSE SNAPDCB            close the file                WDA#04\n         MVI   HEADING2+4,C':'    reset the indicator           WDA#04\nSNAPXIT  DS    0H                                               WDA#04\n         B     NEXTPAGE                                         WDA#04\n***********************************************************************\n*                                                                     *\n*                      Command was invalid                            *\n*                                                                     *\n***********************************************************************\nBADCMD   MVC   ERROR(36),ERRMSG3  command was invalid           WDA#02\n         MVC   USERCMD(42),REPLY  put bad cmd in display line   WDA#02\n         B     NEXTPAGE\n***********************************************************************\n*                                                                     *\n*                     All done - prepare to end                       *\n*                                                                     *\n***********************************************************************\nDONE     DS    0H\n         CLI   CRTFLAG,X'00'      is this a hardcopy?\n         BE    ALLDONE            YES, we are done\n*-WAS-*  TPUT  CLR,CLRLEN,FULLSCR NO, clear the screen (TCAM)   WDA#01\n         CLI   TESTFLAG,X'00'     check the testflag\n         BNE   SKPTST6\n         STFSMODE OFF             turn off fullscreen mode\nSKPTST6  DS    0H\nALLDONE  DS    0H\n         CLI   TESTFLAG,X'00'     check testflag again\n         BNE   SKPTST7\n         L     R1,LOCDCM          prepare to freemain TDCM area    SP3\n         FREEMAIN R,LV=820,A=(1)  do the freemain                  SP3\n         AXSET AX=ZERO            auth index back to 0             SP3\n         MODESET MODE=PROB        go back to problem state         SP3\n         CLI   AUTHFLAG,X'FF'     check if we got auth          WDA#01\n         BNE   SKPTST7            if not  then continue         WDA#01\n         AUTH  OFF                issue magic svc to not auth   WDA#01\nSKPTST7  DS    0H\n         CLI   SNAPFLG,X'FF'      is snap onen                  WDA#04\n         BNE   FINISHS            NO - quit                     WDA#04\n         CLOSE SNAPDCB            close the file                WDA#04\nFINISHS  DS    0H                                               WDA#04\n         FINISH RC=0              return to system              WDA#01\n***********************************************************************\n*                                                                     *\n*            Convert EBCDIC numbers from user into binary             *\n*                                                                     *\n***********************************************************************\nCONVBIN  CVD   R2,WORK            conbert to decimal\n         CLI   REPLY+1,C' '       was a number entened?\n         BE    RTRN               NO, use the default\n         CLI   REPLY+1,C'0'       is the hex code < X'F0' ?\n         BL    BADCHAR            YES, error\n         CLI   REPLY+1,C'9'       is the hex code > X'F9' ?\n         BH    BADCHAR            YES, error\n         PACK  WORK(8),REPLY+1(1) pack EBCDIC (assume 1 digit)\n         CLI   REPLY+2,C' '       were 2 digits entered?\n         BE    CVB                NO, don't do the 2 digit pack\n         CLI   REPLY+2,C'0'       is the hex code < X'F0' ?\n         BL    BADCHAR            YES, error\n         CLI   REPLY+2,C'9'       is the hex code > X'F9' ?\n         BH    BADCHAR            YES, error\n         PACK  WORK(8),REPLY+1(2) pack again, with 2 digits this time\nCVB      CVB   R2,WORK            get binary value\nRTRN     BR    R14                return to mainline\nBADCHAR  MVC   ERROR(36),ERRMSG2  console number error          WDA#02\n         B     RTRN               return\n***********************************************************************\n*                                                                     *\n*                            C L R B U F                              *\n*                                                                     *\n*               Clear the entire buf area to hex zeros                *\n*                                                                     *\n***********************************************************************\nCLRBUF   STM   R2,R5,SAVE25       save regs 2 - 5\n         LA    R2,BUF             R2 = addr of buffer\n         LA    R3,M4BUFLEN        R3 = length of buffer (35 lines)\n         LA    R4,BLANKS          R4 = addr of blanks\n         LA    R5,1               R5 = length of blank\n         ICM   R5,8,BLANKS        setup pad char = X'40'\n         MVCL  R2,R4              clear the area\n         LM    R2,R5,SAVE25       restore registers\n         BR    R14                return to caller\n***********************************************************************\n*                                                                     *\n*                         T E R M P U T                               *\n*                                                                     *\n*          Do a TPUT to the terminal; R0 and R1 hold parms            *\n*                                                                     *\n***********************************************************************\nTERMPUT  DS    0H\n         TPUT  (1),(0),R          print one line on hardcopy\n         BR    R14                return to caller\n***********************************************************************\n*                                                                     *\n*          Setup and initialize parameter list for IKJSCAN            *\n*                                                                     *\n***********************************************************************\nINITSCAN STM   R15,R4,SAVE154     save the registers\n         L     R3,CVTPTR          R3 = addr of CVT\n         L     R3,0(R3)           R3 = addr of addr of TCB\n         L     R3,4(R3)           R3 = addr of TCB\n         USING TCB,R3\n         ICM   R3,7,TCBJSCBB      R3 = addr of JSCB\n         ST    R3,SAVEJSCB        SAVE addr of JSCB\n         DROP  R3\n         USING IEZJSCB,R3\n         L     R4,JSCBPSCB        R4 = addr of PSCB\n         DROP  R3\n         USING PSCB,R4\n         L     R3,PSCBUPT         R3 = addr of UPT\n         ST    R3,SAVEUPT         SAVE addr of UPT\n         TM    PSCBATR1,PSCBCTRL  does user have OPER auth      WDA#01\n         BNO   SKIPAUTH           NO, skip VIP set              WDA#01\n         XI    VIPFLG,X'FF'       set VIP flag                  WDA#01\n         SPACE\nSKIPAUTH DS    0H\n* PCF2   The following code was left as it was received - while WDA#01\n* PCF2   we have PCF2 we don't really want anyone \"X\"ing here.  WDA#01\n* PCF2   LA    R2,CSPLSAVE        R2 = addr of cmd scan parm list\n* PCF2   USING CSPL,R2\n* PCF2   ST    R3,CSPLUPT         save UPT addr\n* PCF2   L     R3,PSCBRLGB        R3 = addr of relogon buffer\n* PCF2   L     R3,256(R3)         R3 = addr of ECT\n* PCF2   ST    R3,CSPLECT         save ECT addr\n* PCF2   SR    R3,R3              clear R3 to init CPECB        WDA#01\n* PCF2   ST    R3,CPECB           initialize CPECB              WDA#01\n* PCF2   LA    R3,CPECB           R3 = addr of face ECB for this CP\n* PCF2   ST    R3,CSPLECB         save ECB addr\n* PCF2   SR    R3,R3              clear R3 to init FLAGWORD     WDA#01\n* PCF2   ST    R3,FLAGWORD        initialize FLAGWORD           WDA#01\n* PCF2   LA    R3,FLAGWORD        R3 = addr of CSPL flag word\n* PCF2   ST    R3,CSPLFLG         save flag addr\n* PCF2   LA    R3,CSOABLOK        R3 = addr of cmd scan output area\n* PCF2   ST    R3,CSPLOA          save output area addr\n* PCF2   LA    R3,CBUF            R3 = addr of 'CMD BUFFER'\n* PCF2   ST    R3,CSPLCBUF        save CBUF addr\n* PCF2   DROP  R2,R4\n* PCF2   LOAD  EP=IKJSCAN\n* PCF2   ST    R0,ADDRSCAN\n         SPACE\n         LM    R15,R4,SAVE154     restore regs 15 - 4\n         BR    R14                return to caller\n         EJECT\n***********************************************************************\n*                                                                     *\n*                          C O N S D A T A                            *\n*                                                                     *\n*              Fillin the data line for a given console               *\n*                                                                     *\n***********************************************************************\nCONSDATA STM   R0,R15,SAVECDAT    save the registers\n         L     R5,0(R1)           R5 = addr of UCM\n         USING UCMLIST,R5\n         L     R6,UCMXB           R6 = addr of RDCM\n         USING DCMTSRT,R6\n         MVC   CONNUM(48),BLANKS  blank out console type field\n         XR    R3,R3              clear R3\n         ICM   R3,1,UCMID         load the console number\n         CVD   R3,WORK            convert to decimal in work\n         MVC   SCRATCH(4),PATTERN move in edit pattern\n         ED    SCRATCH(4),WORK+6  edit in console number\n         MVC   CONNUM(2),SCRATCH+2   move console number into place\n         MVC   LOCATION(12),4(R1) move in console location description\n         MVI   SLASH,C'/'         move '/' to SLASH\n         MVC   STATUS(6),=CL6'INACTV' set default = 'INACTV'\n         TM    UCMATR,UCMUF       is this device active?\n         BNO   NOTACT             NO\n         MVC   STATUS(6),=CL6'ACTIVE' set status = 'ACTIVE'\nNOTACT   DS    0H\n         TM    UCMDISP1,UCMDISPA  is this a master console?\n         BNO   AUTH               NO\n         MVC   STATUS(6),=CL6'MASTER' YES\nAUTH     TM    UCMAUTHA,UCMAUTH1  is this console SYSTEM authorized?\n         BNO   AUTH1              NO\n         MVC   SYS(3),=CL3'SYS '  YES\nAUTH1    TM    UCMAUTHA,UCMAUTH2  is it I/O authorized?\n         BNO   AUTH2              NO\n         MVC   IO(3),=CL3'I/O'    YES\nAUTH2    TM    UCMAUTHA,UCMAUTH3  is it CONS authorized?\n         BNO   AUTHDONE           NO\n         MVC   CONS(3),=CL3'CON'  YES\nAUTHDONE DS    0H\n         LTR   R6,R6              is this a graphics console?\n         BP    NOTHARD            YES\n         MVC   STATUS(6),=CL6'HRDCPY'\nNOTHARD  DS    0H\n         L     R7,UCMUCB          R7 = addr of UCB\n         MVC   UNIT(3),13(R7)     move unit addr into line\n         L     R5,UCMALTEN        R5 = addr of alternate UCM\n         L     R7,UCMUCB          R7 = addr of UCB\n         MVC   ALTUNIT(3),13(R7)  move unit addr into line\n         LM    R0,R15,SAVECDAT    restore registers\n         BR    R14                return to caller\n         DROP  R5,R6\nSAVECDAT DS    16F\n         DROP  12\n***********************************************************************\n*                                                                     *\n*                          A T T N E X I T                            *\n*                                                                     *\n*         Trap users attention interrupts and flag for reset          *\n*                                                                     *\n***********************************************************************\nATTNEXIT LR    R7,R15             establish\n         USING ATTNEXIT,R7        addressability.\n         MVI   ATTNFLG,X'FF'      set attn flag\n         BR    R14                return to caller\n         DROP  R7\n***********************************************************************\n*                                                                     *\n*                         C O N S T A N T S                           *\n*                                                                     *\n***********************************************************************\n         DS    0D\nOLDCONS  DC    F'1'               previous console number\nCONSOLE  DC    F'1'               console to be looked at\nTPUTLEN  DC    A(MOD2LEN)         length of mod2 TPUT\nMOD4TPUT DC    A(MOD4LEN)         length of mod4 TPUT\nMOD2TPUT DC    A(MOD2LEN)         length of mod2 TPUT\nTIMER    DC    F'30'              seconds left on timer\nDELAY    DC    F'100'             delay for 100 hundredths of a second\nMOD4FLG  DC    X'00'              X'FF' indicates 3278-4 in use\nATTNFLG  DC    X'00'              X'FF' indicates attn was trapped\nTESTFLAG DC    X'00'              X'FF' indicates test mode\nCRTFLAG  DC    X'FF'              X'FF' indicates CRT in use\nWAITFLG  DC    X'00'              X'00' indicates not in wait mode\nVIPFLG   DC    X'00'              X'FF' indicates VIP mode\nINTEGFLG DC    X'00'              X'FF' indicates 35-line 3066  console\nAUTHFLAG DC    X'00'              X'FF' we had to get auth      WDA#01\nFULLSCR  DC    X'03'              TPUT fullscreen flag\nEDITFLG  DC    X'00'              TPUT edit flag\nVIPWORD  DC    C'ZZZ'             VIP password\nR41C1    #SBA  (41,1)             3278-4  --  ROW 41, COL 1\nR42C1    #SBA  (42,1)             3278-4  --  ROW 42, COL 1\nR43C1    #SBA  (43,1)             3278-4  --  ROW 43, COL 1\nPATTERN  DC    X'40202020'        edit pattern field\nDPATTRN  DC    X'4021204B20'      edit pattern field\nPAD      DC    C' '               pad character for movebuff MVC\nSTAXLIST STAX  ATTNEXIT,MF=L      parm list for attention trap\nBLANKS   DC    CL80' '            X'40's for various things\nNULLS    DC    XL80'00'           X'00's for various things\nSNAPFLG  DC    X'00'              X'FF' indicates SNAP mode     WDA#04\nSNAPDCB  DCB   MACRF=(W),                                       WDA#04 X\n               DDNAME=SNAPOUT,                                  WDA#04 X\n               RECFM=VBA,DSORG=PS,                              WDA#04 X\n               LRECL=125,BLKSIZE=1632                           WDA#04\n***********************************************************************\n*                                                                     *\n*               327x screen clear control characters                  *\n*                                                                     *\n***********************************************************************\n*CLR     DC    X'C1'              WCC - write                   WDA#01\n*        DC    X'115D7E'          SBA to R24, C80 (FSE 5.0)     WDA#01\n*        DC    X'114040'          SBA to Row 1, Col 1           WDA#01\n*        DC    X'3C404000'        fill screen with nulls        WDA#01\n*        DC    X'114040'          SBA to Row 1, Col 1           WDA#01\n*        DC    X'13'              insert cursor                 WDA#01\n*CLRLEN  EQU   *-CLR                                            WDA#01\n***********************************************************************\n*                                                                     *\n*                  Display screen - Header section                    *\n*                                                                     *\n***********************************************************************\nHEADER   DS    0H\nCLEAR    EQU   *\n         #WCC  RESET              reset the MDT bits            WDA#01\n         #SPFTAG TYPE=1           normal fullscreen indicator   WDA#01\n         #SBA  (1,1)              SBA to Row 1, Col 1           WDA#01\n         #RA   (1,1),X'00'        fill screen with nulls        WDA#01\n         #SBA  (1,1)              SBA to Row 1, Col 1           WDA#01\n         #SF   PROT,HIGH          start field - protected       WDA#01\n         DC    X'40'              one blank for the heck of it  WDA#01\n***********************************************************************\n*                                                                     *\n*                 Display screen image buffer section                 *\n*                                                                     *\n***********************************************************************\nBUF      DC    21CL84' '          operator's screen buffer\n         DC    22CL84' '          plus extra for 3278-4\n***********************************************************************\n*                                                                     *\n*               Display screen - Trailer section                      *\n*                                                                     *\n***********************************************************************\nTRAILER  DS    0H\nCMDCTRL  #SBA  (22,1)             SBA to Row 22, Col 1\n         #SF   PROT,HIGH          attr byte - protected, high intensity\nLASTLINE DC    CL79' '            operators command input line\nPHEADING #SBA  (23,1)             SBA to Row 23, Col 1\n         #SF   PROT,HIGH          attr byte - protected, high intensity\nHEADING  DC    CL8'CONSOLE '\nCONNUM   DC    CL2' 1'            console number\n         DC    CL1' '\nLOCATION DC    CL12' '\n         DC    CL2' '\nUNIT     DC    CL3' '             CUU of console\nSLASH    DC    CL1'/'\nALTUNIT  DC    CL3' '\n         DC    CL2' '\nSTATUS   DC    CL6' '             Master console\n         DC    CL2' '\nSYS      DC    CL4' '             SYS  authorization\nIO       DC    CL4' '             I/O  authorization\nCONS     DC    CL3' '             CONS authorization\n         DC    CL3' '\nTIME     DC    CL3' '             seconds remaining on timer\n         DC    CL1'/'\nPAUSE    DC    CL3'1.0'           delay in seconds\n         DC    CL2' '\nHEADING2 DC    CL5'Mode:'\nFREEZE   DC    C'F'               freeze/release mode\nMODE     DC    CL1'2'             display mode 2/1\n         DC    CL1' '\n         DC    CL5'Page '\nPAGE     DC    CL1'2'             page number\nR24C1    #SBA  (24,1)             SBA to Row 24, Col 1\n         #SF   ,                  attr byte - unprotected, low intens.\n         #IC   ,                  insert cursor\nUSERLINE DS    0CL72              users line                    WDA#02\nUSERCMD  DC    CL36' '            command input area            WDA#02\nERROR    DC    CL36' '            error message field           WDA#02\nENDTRAIL EQU   *                                                WDA#02\nONE      DC    H'1'               to set AX 1                      SP3\nZERO     DC    H'0'               to set AX 0                      SP3\nCONASID  EQU   5                  'CONSOLE' ASID                   SP3\n         LTORG\n***********************************************************************\n*                                                                     *\n*                     Error and warning messages                      *\n*                                                                     *\n***********************************************************************\nERRMSG1  DC    CL36'ERROR - Console Not Defined         '       WDA#02\nERRMSG2  DC    CL36'ERROR - Non-numeric Value           '       WDA#02\nERRMSG3  DC    CL36'ERROR - Command is Invalid - Reenter'       WDA#02\nERRMSG4  DC    CL36'ERROR - Console Unviewable - Not CRT'       WDA#02\nERRMSG5  DC    CL36'WARNING - UCM Table is Full         '       WDA#02\nERRMSG6  DC    CL36'ERROR - Terminal is Invalid         '       WDA#02\nERRMSG7  DC    CL36'ERROR - Command is Restricted       '       WDA#02\nERRMSG8  DC    CL36'ERROR - Return code > 0 from TGET.  '       WDA#03\nERRMSG9  DC    CL36'ERROR - Command > 36 chars for PFkey'       WDA#03\n***********************************************************************\n*                                                                     *\n*                           User help page                            *\n*                                                                     *\n***********************************************************************\nHELP     #WCC  RESET              reset the MDT bits            WDA#03\n         #SPFTAG TYPE=1           normal fullscreen indicator   WDA#03\n         #SBA  (1,1)              SBA to Row 1, Col 1           WDA#03\n         #RA   (1,1),X'00'        fill screen with nulls        WDA#03\n         #SBA  (1,1)              SBA to Row 1, Col 1           WDA#03\n         #SF   PROT,HIGH          start protected field         WDA#03\n         DC    C'S P Y   --- Version 3.1'                       WDA#03\n         #SBA  (2,1)                                            WDA#03\n         DC    C'Command     Description'                       WDA#03\n         #SBA  (4,1)                                            WDA#03\n         DC    C'    B        End SPY'                          WDA#03\n         #SBA  (5,1)                                            WDA#03\n         DC    C'    C        Switch monitor to Console 1'      WDA#03\n         #SBA  (6,1)                                            WDA#03\n         DC    C'    Cxx      Switch monitro to Consloe xx'     WDA#03\n         #SBA  (7,1)                                            WDA#03\n         DC    C'    Dxx      Set delay to xx tenths seconds'   WDA#03\n         #SBA  (8,1)                                            WDA#03\n         DC    C'    E        End SPY'                          WDA#03\n         #SBA  (9,1)                                            WDA#03\n         DC    C'    F        Freeze display on current page'   WDA#03\n         #SBA  (10,1)                                           WDA#03\n         DC    C'    H        Display PFK assignments   '       WDA#03\n         #SBA  (11,1)                                           WDA#03\n         DC    C'    L        Link to SWAP program'             WDA#03\n         #SBA  (12,1)                                           WDA#03\n         DC    C'    Q        Link to QUEUE program'            WDA#03\n         #SBA  (13,1)                                           WDA#03\n         DC    C'    R        Release display '                 WDA#03\n         #SBA  (14,1)                                           WDA#03\n         DC    C'    W        Start timer mode for 30 seconds'  WDA#03\n         #SBA  (15,1)                                           WDA#03\n         DC    C'    Wxx      Start timer mode for xx seconds'  WDA#03\n         #SBA  (16,1)                                           WDA#03\n         DC    C'    W0       Start timer mode until inturrupt' WDA#03\n         #SBA  (17,1)                                           WDA#03\n         DC    C'    ?        Display this page'                WDA#03\n         #SBA  (18,1)                                           WDA#03\n         DC    C'    1        Display mode 1'                   WDA#03\n         #SBA  (19,1)                                           WDA#03\n         DC    C'    2        Display mode 2'                   WDA#03\n         #SBA  (21,1)                                           WDA#03\n         DC    C'Hitting inturrupt will stop the wait timer.'   WDA#03\n         #SBA  (24,1)             Row 24, Col 1                 WDA#03\n         DC    C'Hit ENTER to continue'                         WDA#03\n         #SBA  (24,23)            ROW 24, COL 23                WDA#03\n         #SF                      START UNPROTECTED FIELD       WDA#03\n         #IC   ,                  INSERT CURSOR HERE            WDA#03\n         DC    CL36'        '     REPLY AREA                    WDA#03\n         #SF   SKIP               START SKIP FIELD              WDA#03\nHLENGTH  EQU   *-HELP             LENGTH OF HELP TPUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                     User pfkey help page                            *\n*                                                                     *\n***********************************************************************\n         DS    0F                 allignment                    WDA#03\nPFKHELP  #WCC  RESET              reset the MDT bits            WDA#03\n         #SPFTAG TYPE=1           normal fullscreen indicator   WDA#03\n         #SBA  (1,1)              SBA to Row 1, Col 1           WDA#03\n         #RA   (1,1),X'00'        fill screen with nulls        WDA#03\n         #SBA  (1,1)              SBA to Row 1, Col 1           WDA#03\n         #SF   PROT,HIGH          start protected field         WDA#03\n         DC    C'SPY - Current PFkey assignments  '             WDA#03\n         #SBA  (3,1)                                            WDA#03\n         DC    2CL40'PFK Command     '                          WDA#03\nPFKLIST  EQU   *                  used as start of help table   WDA#03\n         #SBA  (4,1)                                            WDA#03\n         DC    CL80'        '     area for pfkeys 01 and 13     WDA#03\n         #SBA  (5,1)                                            WDA#03\n         DC    CL80'        '     area for pfkeys 02 and 14     WDA#03\n         #SBA  (6,1)                                            WDA#03\n         DC    CL80'        '     area for pfkeys 03 and 15     WDA#03\n         #SBA  (7,1)                                            WDA#03\n         DC    CL80'        '     area for pfkeys 04 and 16     WDA#03\n         #SBA  (8,1)                                            WDA#03\n         DC    CL80'        '     area for pfkeys 05 and 17     WDA#03\n         #SBA  (9,1)                                            WDA#03\n         DC    CL80'        '     area for pfkeys 06 and 18     WDA#03\n         #SBA  (10,1)                                           WDA#03\n         DC    CL80'        '     area for pfkeys 07 and 19     WDA#03\n         #SBA  (11,1)                                           WDA#03\n         DC    CL80'        '     area for pfkeys 08 and 20     WDA#03\n         #SBA  (12,1)                                           WDA#03\n         DC    CL80'        '     area for pfkeys 09 and 21     WDA#03\n         #SBA  (13,1)                                           WDA#03\n         DC    CL80'        '     area for pfkeys 10 and 22     WDA#03\n         #SBA  (14,1)                                           WDA#03\n         DC    CL80'        '     area for pfkeys 11 and 23     WDA#03\n         #SBA  (15,1)                                           WDA#03\n         DC    CL80'        '     area for pfkeys 12 and 24     WDA#03\n         #SBA  (16,1)                                           WDA#03\n         #SF   SKIP               start protected field         WDA#03\n         #SBA  (18,10)                                          WDA#03\n         DC    CL45'The PFkey assignment for any PFkey may be ' WDA#03\n         #SBA  (19,10)                                          WDA#03\n         DC    CL45'changed by entering the desired command on' WDA#03\n         #SBA  (20,10)                                          WDA#03\n         DC    CL45'the command line and hitting the PFKey '    WDA#03\n         #SBA  (21,10)                                          WDA#03\n         DC    CL45'that you want the command assigned to.'     WDA#03\n         #SBA  (23,1)                                           WDA#03\n         #SF   PROT,HIGH          start protected field         WDA#03\n         #SBA  (24,1)             Row 24, Col 1                 WDA#03\n         DC    C'Hit ENTER to continue'                         WDA#03\n         #SBA  (24,23)            Row 24, Col 23                WDA#03\n         #SF                      start unprotected field       WDA#03\n         #IC   ,                  insert cursor here            WDA#03\n         DC    CL36'        '     replu area                    WDA#03\n         #SF   SKIP               start skip field              WDA#03\nPFKHLEN  EQU   *-PFKHELP          length of help screen         WDA#03\n         EJECT\n***********************************************************************\n*                                                                     *\n*              PFKey default definitions                              *\n*                                                                     *\n***********************************************************************\nPFKTABLE DS    0D                 start pf pkkey definitions    WDA#03\nPFK01    DC    X'F1',X'00',C'01'                                WDA#03\n         DC    CL36'HELP - This PFK display '   PFK definitions WDA#03\nPFK02    DC    X'F2',X'00',C'02'                                WDA#03\n         DC    CL36'?    - SPY Subcommands  '   SPY subcommands WDA#03\nPFK03    DC    X'F3',X'00',C'03'                                WDA#03\n         DC    CL36'END  - Terminate SPY    '   Terminate SPY   WDA#03\nPFK04    DC    X'F4',X'00',C'04'                                WDA#03\n         DC    CL36'C1   - Master console   '   Console 1       WDA#03\nPFK05    DC    X'F5',X'00',C'05'                                WDA#03\n         DC    CL36'C3   - Tape Console     '   Console 3       WDA#03\nPFK06    DC    X'F6',X'00',C'06'                                WDA#03\n         DC    CL36'C5   - Printer Console  '   Console 5       WDA#03\nPFK07    DC    X'F7',X'00',C'07'                                WDA#03\n         DC    CL36'LINK to SWAP            '   Link to SWAP    WDA#03\nPFK08    DC    X'F8',X'00',C'08'                                WDA#03\n         DC    CL36'QUEUE Command           '   Link to QUEUE   WDA#03\nPFK09    DC    X'F9',X'00',C'09'                                WDA#03\n         DC    CL36'W50  - Display 50 Scrns.'   50 Screens      WDA#03\nPFK10    DC    X'7A',X'00',C'10'                                WDA#03\n         DC    CL36'/D R,L,J                '   Display replies WDA#03\nPFK11    DC    X'7B',X'00',C'11'                                WDA#03\n         DC    CL36'/D A,L                  '   Display tasks   WDA#03\nPFK12    DC    X'7C',X'00',C'12'                                WDA#03\n         DC    CL36'/D T                    '   Display time    WDA#03\nPFK13    DC    X'C1',X'00',C'13'                                WDA#03\n         DC    CL36'HELP                    '                   WDA#03\nPFK14    DC    X'C2',X'00',C'14'                                WDA#03\n         DC    CL36'?                       '                   WDA#03\nPFK15    DC    X'C3',X'00',C'15'                                WDA#03\n         DC    CL36'END                     '                   WDA#03\nPFK16    DC    X'C4',X'00',C'16'                                WDA#03\n         DC    CL36'C1                      '                   WDA#03\nPFK17    DC    X'C5',X'00',C'17'                                WDA#03\n         DC    CL36'C3                      '                   WDA#03\nPFK18    DC    X'C6',X'00',C'18'                                WDA#03\n         DC    CL36'C5                      '                   WDA#03\nPFK19    DC    X'C7',X'00',C'19'                                WDA#03\n         DC    CL36'LINK                    '                   WDA#03\nPFK20    DC    X'C8',X'00',C'20'                                WDA#03\n         DC    CL36'QUEUE                   '                   WDA#03\nPFK21    DC    X'C9',X'00',C'21'                                WDA#03\n         DC    CL36'W50                     '                   WDA#03\nPFK22    DC    X'4A',X'00',C'22'                                WDA#03\n         DC    CL36'/D R,L,J                '                   WDA#03\nPFK23    DC    X'4B',X'00',C'23'                                WDA#03\n         DC    CL36'/D A,L                  '                   WDA#03\nPFK24    DC    X'4C',X'00',C'24'                                WDA#03\n         DC    CL36'/D T                    '                   WDA#03\nPFKEND   DC    XL4'FFFFFFFF'      End of PFKey table            WDA#03\n***********************************************************************\n*                                                                     *\n*                            U C M T A B                              *\n*                                                                     *\n*        The UCMTAB table is built at SPY initialization time.        *\n*        one entry is filled in for each consloe that has been        *\n*        iogened into the system. The 12 byte description field       *\n*        allows you to tag each console with some mnemonic that       *\n*        is easier to remember than console numbers. If UCMTAB is     *\n*        not defined large enough to hold all the consoles, a         *\n*        WARNING is issued but SPY continues anyway.                  *\n*                                                                     *\n***********************************************************************\n         DS    0F\nUCMTABE  DC    A(TABEND)\nNUMUCMS  DC    H'0'\n         DS    0F\nUCMTAB   DC    A(0),CL12' '\n         DC    A(0),CL12'Master Cons.'    console 1\n         DC    A(0),CL12'IBM Service '    console 2\n         DC    A(0),CL12'Tape Complex'    console 3\n         DC    A(0),CL12'Data Control'    console 4\n         DC    A(0),CL12'UREC Complex'    console 5\n         DC    A(0),CL12'Tape Library'    console 6\n         DC    A(0),CL12'Tape Labels '    console 7\n         DC    A(0),CL12'            '    console 8\n         DC    A(0),CL12'            '    console 9\n         DC    A(0),CL12'            '    console 10\n         DC    A(0),CL12'            '    console 11\n         DC    A(0),CL12'            '    console 12\n         DC    A(0),CL12'            '    console 13\n         DC    A(0),CL12'            '    console 14\n         DC    A(0),CL12'            '    console 15\n         DC    A(0),CL12'            '    console 16\n         DC    A(0),CL12'            '    console 17\n         DC    A(0),CL12'            '    console 18\n         DC    A(0),CL12'            '    console 19\n         DC    A(0),CL12'            '    console 20\n         DC    A(0),CL12'            '    console 21\n         DC    A(0),CL12'            '    console 22\n         DC    A(0),CL12'            '    console 23\n         DC    A(0),CL12'            '    console 24\n         DC    A(0),CL12'            '    console 25\nTABEND   DS    0H\n***********************************************************************\n*                                                                     *\n*                           E Q U A T E S                             *\n*                                                                     *\n*     NOTE That a 'LINE' is defined as 84 bytes; this is because      *\n*     DIDOCS builds the operator screen buffer lines as 79 bytes of   *\n*     text + 5 control bytes. This consists of an SBA (X'11xxyy')     *\n*     and an attribute byte (X'1Dxx').                                *\n*                                                                     *\n***********************************************************************\nLEN9     EQU   9*84               number of bytes in  9 lines\nLEN21    EQU   21*84              number of bytes in 21 lines\nLEN22    EQU   22*84              number of bytes in 22 lines\nLEN13    EQU   13*84              number of bytes in 13 lines\nM2BUFLEN EQU   21*84              length of buffer 3278-2\nM4BUFLEN EQU   35*84              length of buffer 3278-4\nSTATLEN  EQU   BUF-CLEAR+80*23    length of 'STATUS' page buffer\nHEADLEN  EQU   BUF-HEADER         length of header\nTRAILEN  EQU   ENDTRAIL-TRAILER   length of trailer\nMOD4LEN  EQU   ENDTRAIL-HEADER    length of TPUT for MOD4\nMOD2LEN  EQU   MOD4LEN-LEN22      length of TPUT for MOD2\nENDMOD2  EQU   BUF+M2BUFLEN       addr of trailer for 3278-2\n         EJECT\n***********************************************************************\n*                                                                     *\n*        This DSECT for save areas, flags etc.                  WDA#01*\n*        R13 is the base - BEGIN macro does it.                 WDA#01*\n*                                                                     *\n***********************************************************************\nWDADSECT DSECT\nWDASAVE  DS    18F                OS save area                  WDA#01\nSAVE154  DS    6F\nSAVE25   DS    4F\nLPSCREEN DS    H                  lines per screen\nCPLINE   DS    H                  characters per line\nMOVEBSAV DS    6F                 REG SAVE AREA - R4:R9            SP3\nWORK     DS    D                  work area for packs\nSCRATCH  DS    D                  scratch area for char. manip\nSASID    DS    F                  area for previous sec ASID       SP3\nLOCDCM   DS    F                  addr of GETMAINed area for TDCM  SP3\nSAVEJSCB DS    F                  save addr of JSCB\nOPERPRM  DS    A(OPERCMDL)        parmlist for 'COMMAND'\nOPERPRM1 DS    XL1'80',AL3(OPERCN) second parm for 'COMMAND'\nOPERCN   DS    F'0'               console authority\nOPERCMDL DS    H'0'               command length\nOPERCMD  DS    CL80' '            command text\nCBUF     DC    AL2(84),AL2(0)     PCF2 - command buffer prefix\nCPREPLY  DC    CL80' '            PCF2 - command input buffer   WDA#01\nDATACHRS DS    F                  TGET character count          WDA#03\nCREPLY   DC    XL6'000000000000'  TGET ASIS prefix              WDA#03\nREPLY    DC    CL80' '            user's command input buffer\nSAVEUPT  DS    F                  PCF2 save addr of UPT\nCSPLBLOK DS    6F                 PCF2 cmd scan parmeter list\nCSPLSAVE DS    6F                 PCF2 CSPL area\nCPECB    DS    F                  PCF2 fake ECB for this CP     WDA#01\nFLAGWORD DS    F                  PCF2 flag word                WDA#01\nCSOABLOK DS    2F                 PCF2 cmd scan output area\nADDRSCAN DS    A                  PCF2 support\nSAVER15X DS    3F                 SNAP support                  WDA#04\nSNAPBGN  DS    F                  SNAP start address            WDA#04\nSNAPEND  DS    F                  SNAP ending address           WDA#04\nWDASLEN  EQU   *-WDASAVE          length for GETMAIN from BEGIN WDA#01\n         EJECT\n***********************************************************************\n*                                                                     *\n*                System control block mapping DSECTS                  *\n*                                                                     *\n*     all macros except for IEERDCM and IEETDCM can be found in       *\n*     either 'SYS1.MACLIB' or 'SYS1.AMODGEN'. the two exceptions      *\n*     are in 'SYS1.APVTMACS'; they are also distributed with the      *\n*     source to 'SPY'.                                                *\n*                                                                     *\n***********************************************************************\n         CVT   DSECT=YES          Communications Vector Vable\n         SPACE 2\n         IEECUCM FORMAT=NEW,DSECT=YES,LIST=YES\n         SPACE 2\n         IEERDCM ,                Resident Display Control Molule\n         SPACE 2\n         IEETDCM ,                Pageable Display Control Module\n         SPACE 2\n         IEZJSCB ,                Job Step Control Block\n         SPACE 2\n         IKJCSOA ,                Command Scam Output Area\n         SPACE 2\n         IKJCSPL ,                Command Scan Parameter List\n         SPACE 2\n         IKJPSCB ,                Protected Step Control Block\n         SPACE 2\n         IKJTCB  ,                Task Control Block\n         SPACE 2\n         IKJUPT  ,                User Profile Table\n         SPACE 2\n         END   SPY\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SWAP": {"ttr": 7175, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x04\\xea\\x04\\xea\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 1258, "newlines": 1258, "modlines": 0, "user": "WSRCC"}, "text": "SWAP     TITLE 'S W A P - System Workload Analysis Pgm - Version 4.5'\n***********************************************************************\n*                                                                     *\n*                              S W A P                                *\n*                                                                     *\n*                 System  Workload Analysis Program                   *\n*                                                                     *\n*     SWAP enables a TSO user to get a brief look at what the         *\n*     system is doing. Various system and SRM values are displayed    *\n*     for each ASID currently executing.                              *\n*                                                                     *\n*     SWAP may be executed as a CALLed program or as a CP. Various    *\n*     subcommands are available to specify what information should    *\n*     be displayed.                                                   *\n*                                                                     *\n*     If SWAP is to be used in conjunction with SPY via the 'L'       *\n*     subcommand then SWAP must be APF-authorized and its name        *\n*     should go in the IKJEFTE2 and IKJEFTE8 lists. If SWAP is        *\n*     merely being used by itself APF authorization is unnecessary.   *\n*                                                                     *\n*                                                                     *\n*  Command         Description                                        *\n*                                                                     *\n*     A     Display started tasks,batch jobs and TSO                  *\n*     B     Display batch and started task jobs only                  *\n*     E     Exit from SWAP                                            *\n*     Fxxx  Display only those jobs whose name begins with 'xxx'.     *\n*           SWAP will continue in this mode until 'F' is entered.     *\n*     G     This mode will display general address space information. *\n*           (As opposed to 'S' mode.)                                 *\n*     I     This mode will display only those memories which are      *\n*           either swapped in and runngin or swapped out but ready    *\n*           to run.                                                   *\n*     L     XCTL to 'SPY' operator console program.                   *\n*     O     This mode will display all active memories in the system, *\n*           regardless of location.                                   *\n*     S     This mode will display SRM information. (As opposed to    *\n*           'G' mode.)                                                *\n*     T     Display TSO users only                                    *\n*     Dxx   set 'wait mode' delay time to 'xx' tenths of a second.    *\n*     Wxx   Enter automatic refresh mode. SWAP will automatically     *\n*           refresh and update the screen every so often for 'xx'     *\n*           seconds. If 'xx' is omitted, a default of 30 seconds is   *\n*           Assumed. If 'xx' = 0, the timer will count UP instead of  *\n*           down until 'PA1' is pressed.                              *\n*     ?     Display this list of help for SWAP commands               *\n*                                                                     *\n*  Glossary of terms for output display:                              *\n*                                                                     *\n*    HH:MM:SS  Transaction time                                       *\n*    R         Reason code for swap out (from OUCBEFL).               *\n*              The following are the reason codes displayed:          *\n*                    not swapped - in core                            *\n*                O   Swap code 1 : Terminal output wait               *\n*                I   Swap code 2 : Terminal input wait                *\n*                W   Swap code 3 : Long wait                          *\n*                A   Swap code 4 : Auxiliary storage shortage         *\n*                R   Swap code 5 : Real storage shortage              *\n*                V   Swap code 6 : MS0 detected wait                  *\n*                S   SWap code 7 : REQSWAP SYSEVENT issued            *\n*                E   SWap code 8 : ENQHOLD exchg by swap analysis     *\n*                X   Swap code 9 : Exchg recommended by swap analysis *\n*                $   Swap code a : Unilateral swapout                 *\n*                ?               : probable error or SRM modification *\n*    L         Current location of this memory:                       *\n*                I  Swapped in and eligible to run.                   *\n*                O  Swapped out but ready to run.                     *\n*                W  Swapped out and not ready to run.                 *\n*                $  Swapped in and V=R or non-swappable status.       *\n*                ?  Transitioning between states.                     *\n*                L  Logically swapped.                                *\n*    Mem       Current amount of memory allocated to this memory.     *\n*    WSS       SRM's view of the working set size for this memory.    *\n*    DP        Dispatching priority of memory (in hex).               *\n*    DQ        Relative position of memory on dispatching queue.      *\n*    PG        Performance group                                      *\n*    p         Performance group period                               *\n*    Dm        Domain                                                 *\n*    RM        Resource manager recommendation                        *\n*    WR        Work load manager recommendation                       *\n*    SU/S      Service rate (S.U.'s per second)                       *\n*    S.U.      Service units (in interval if mode=S )                 *\n*    I/O       EXCP's in interval (max=65K)                           *\n*    ASID      Address space ID (hex)                                 *\n*    CPU       Task CPU time                                          *\n*    TCPU      The total CPU time used by this memory (task+SRB).     *\n*    TRS       Service accumulated in the transaction.                *\n*    SC        Number of times the memory has been swapped            *\n*    MSL       MOUNT/START/LOGON initiated task                       *\n*    TCB       Number of active TCBs                                  *\n*    Procname  Procstepname for this step                             *\n*    Stepname  Stepname                                               *\n*    TSLS      Time since last swap action in seconds                 *\n*                                                                     *\n*    SWAP requires SYS1.AMODGEN as a MACLIB                           *\n*                                                                     *\n*    Registers used:                                                  *\n*        R1 - buffer address         R6 - ptr to OUCB                 *\n*        R2 - ptr to ASVT entry      R7 - R11  working regs           *\n*        R3 - count of ASCBs         R12 - Base register              *\n*        R4 - ptr to OUXB                                             *\n*        R5 - ptr to ASCB                                             *\n*                                                                     *\n*                                                                     *\n*    Authors:                                                         *\n*      SWAP is a heavily reworked version of the MIPS program.        *\n*      Rewriting at SCE done by:                                      *\n*                                                                     *\n*         Marty Sprinzen and Steve Langley                            *\n*         Southern California Edison                                  *\n*         Rosemead, Calif. 91770                                      *\n*         1-213-572-3435                                              *\n*                                                                     *\n         EJECT\n*                                                                     *\n*       The above version has been additionally modified at WDA       *\n*       to use BEGIN and FINISH macros.  Other changes will be        *\n*       marked with WDA#xx where xx is the change number.             *\n*       Questions and comments may be sent to                         *\n*                                                                     *\n*          Joseph A Martin                                            *\n*          State of Wisconsin    (WDA)                                *\n*          DH&SS - OIS - WSRCC                                        *\n*          P.O. Box 7850                                              *\n*          Madison, Wisc. 53707-7850                                  *\n*          1-608-266-9525                                             *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT ON,NOGEN\nSWAP     BEGIN AUTHOR=CBT,BASE=(R12)                            WDA#01\n         BAL   R14,INITSCAN       initialize IKJSCAN parmlist\n         LA    3,STAXLIST\n         STAX  ATTNEXIT,MF=(E,(3)) attn exit trap\n         GTSIZE ,                 get terminal size\n         LTR   R0,R0              is it a hardcopy?\n         BZ    HARDCOPY           yes; branch\n         LR    R2,R0              R2 = number of lines per screen\n         SH    R2,=H'2'           R2 = R2 - 2\n         MH    R2,=H'81'          R2 = number of bytes in screen bufr\n         LA    R3,BUFFER          R3 = addr of start of buffer\n         LA    R2,0(R2,R3)        R2 = addr of end of buffer\n         ST    R2,ADBUF           save R2\n         STFSMODE ON,INITIAL=YES  turn on full screen mode for VTAM\n         B     BOTHTYPE\nHARDCOPY STSIZE SIZE=80           set line size to 80\n         MVI   CRTFLAG,X'00'      we are using a hardcopy\n         MVC   CLR(26),BLANKS     zap out cntrl chars\n         MVC   CMDCTRL1(2),BLANKS\nBOTHTYPE MVC   HEADINGA(80),HEADING2   load general heading initially.\n***********************************************************************\n*                                                                     *\n*                        Locate CVT and ASVT pointers                 *\n*                                                                     *\n***********************************************************************\nFINDCVT  L     R2,16              CVT pointer\n         USING CVT,R2\n         L     R2,CVTASVT         ASVT pointer\n         DROP  R2\n         USING ASVT,R2\n         L     R3,ASVTMAXU        maximum number of entries\n         LA    R2,ASVTFRST        first entry minus 4\n         ST    R2,FRSTASVT        save it for later\n         LA    R1,BUFFER          load address of output buffer.\n         ST    R2,ASCBADDR        save ASCB address\n         CLC   JOBMASK(8),BLANKS  is the jobmask blank?\n         BNE   ASCBLOOP           no, so don't set page to 0\n         MVI   PAGE,C'0'          reset page to page 0\n         EJECT\n***********************************************************************\n*                                                                     *\n*            Major Loop (through all ASCB's)                          *\n*                                                                     *\n***********************************************************************\nASCBLOOP L     R2,ASCBADDR        R2 = addr of last ASCB entry\n         LA    R2,4(R2)           increment to next ASCB entry\n         ST    R2,ASCBADDR        save ASCB addr\n         ICM   R5,B'1111',0(R2)   ASCB pointer\n         USING ASCB,R5\n         BM    NOGOOD             branch if bad ptr\n         TM    102(R5),X'04'      test for swapped out\nINOROUT  BC    0,NOGOOD           branch if out and not ready to run\n         L     R6,ASCBOUCB        OUCB pointer\n         USING OUCB,R6\n         L     R4,ASCBOUXB        OUXB pointer\n         USING OUXB,R4\n         TM    OUCBYFL,OUCBLOG    logon created user?\nTSOORNO  BC    1,NOGOOD           branch if batch only\nBATCHORN BC    0,NOGOOD           branch if TSO only\n         MVI   LINE+2,C' '        clear output line to blanks.\n         MVC   LINE+3(77),LINE+2\n***********************************************************************\n*                                                                     *\n*                              Jobname                                *\n*                                                                     *\n***********************************************************************\n         MVC   JOB(8),START       initialize 'starting' jobname\n         ICM   R7,B'1111',ASCBJBNI jobname pointer\n         BZ    NOTJOB             jobname not available\n         MVC   JOB,0(R7)          move in jobname\n         B     CONT1\nNOTJOB   ICM   R7,B'1111',ASCBJBNS S/M/L pointer\n         BZ    CONT1              S/M/L not available\n         MVC   JOB,0(R7)          move in jobname for S/M/L\nCONT1    CLC   JOBMASK(8),BLANKS  is the job mask all blanks?\n         BE    CONT1A             yes, so go on\n         LA    R8,JOBMASK         R8 = addr of jobmask\n         LA    R7,JOBMASK+7       R7 = addr of last char in mask\nMASKLOOP CLI   0(R8),C' '         is the char a blank?\n         BE    GOTLEN             yes\n         CR    R8,R7              is R8 = R7?\n         BE    GOTLEN             yes - end of mask\n         LA    R8,1(R8)           point to next char\n         B     MASKLOOP           check next char\nGOTLEN   LA    R7,JOBMASK+1       R7 = addr of first char in mask + 1\n         SR    R8,R7              R8 = length of mask - 1\n         EX    R8,VARCLC1         is the job mask = jobname?\n         BNE   NOGOOD             no, so flush this ASCB\n***********************************************************************\n*                                                                     *\n*                             Swap count                              *\n*                                                                     *\n***********************************************************************\nCONT1A   LH    R7,OUCBSWC         R7 = swap count\n         CVD   R7,WORK            convert it to decimal.\n         MVO   WORK,WORK\n         MVI   WORK+7,X'0C'\n         MVC   $UCBSWC(2),PTRN1+5\n         ED    $UCBSWC-1(3),WORK+6\n***********************************************************************\n*                                                                     *\n*                          Swap Reason code - OUCBSRC                 *\n*                                                                     *\n***********************************************************************\nSWAPCODE TM    OUCBQFL,OUCBOUT    are we swapped out?\n         BZ    FORGET             no, swap code means nothing\n         CLI   OUCBSRC,X'0A'      check for valid swap reason\n         BH    BADCODE            no.\n         CLI   OUCBSRC,X'00'\n         BE    BADCODE            no.\n         SR    R8,R8\n         IC    R8,OUCBSRC         use code number as offset into table\n         SH    R8,=H'1'           decrease by 1\n         LA    R7,CODETABL\n         LA    R7,0(R8,R7)        load addr of correct alpha code\n         MVC   STATUS(1),0(R7)    move code to output\n         B     FORGET\nBADCODE  MVI   STATUS,C'?'        error in code or program logic\n***********************************************************************\n*                                                                     *\n*                    Address Space Queue Location                     *\n*                                                                     *\n***********************************************************************\nFORGET   MVI   LOC,C'I'           assume address space on 'in' queue\n         MVI   LINE+1,X'E8'       attr byte - protected, hi intensity\n         TM    OUCBSFL,OUCBNSW    address space - non-swap\n         BZ    LOGSQ              no\n         MVI   LOC,C'$'           move in non-swap indication.\n         B     DONE\nLOGSQ    TM    OUCBQFL,OUCBLSW    'logical swap' queue\n         BZ    WAITQ              no\n         MVI   LOC,C'L'           'logical swap' queue indication\n         MVI   LINE+1,X'60'       attr byte - low intensity\n         B     DONE\nWAITQ    TM    OUCBQFL,OUCBOFF    'wait' queue\n         BZ    OUTQ               no\n         MVI   LOC,C'W'           'wait' queue indication\n         MVI   LINE+1,X'60'       attr byte - low intensity\n         B     DONE\nOUTQ     TM    OUCBQFL,OUCBOUT    'out' queue\n         BZ    TRANS              no\n         MVI   LOC,C'O'           'out' queue indication\n         MVI   LINE+1,X'60'       attr byte - low intensity\n         B     DONE\nTRANS    TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB    transitioning' status\n         BZ    DONE               no\n         MVI   LOC,C'?'           'transitioning' indication\n***********************************************************************\n*                                                                     *\n*                    Total CPU Time (task + SRB)                      *\n*                                                                     *\n***********************************************************************\nDONE     LM    R8,R9,ASCBEJST     EJST (CPU time - task type)\n         SRDL  R8,12              convert to microsec\n         LM    R10,R11,ASCBSRBT   srb time\n         SRDL  R10,12             convert to microsec\n         AR    R9,R11             total (task + SRB) CPU time\n         BNO   NOOVFLO            branch if no overflow.\n         A     R8,=F'1'           otherwise add one to high order.\nNOOVFLO  AR    R8,R10             high order.\n         D     R8,=F'100000'      for divide.\n         CVD   R9,WORK            convert to decimal.\n         MVC   TCPU(6),PTRN2\n         ED    TCPU-1(7),WORK+5\n***********************************************************************\n*                                                                     *\n*                 Frames Allocated to address space                   *\n*                                                                     *\n***********************************************************************\n         LH    R7,ASCBFMCT        allocated page frame count\n         CVD   R7,WORK\n         MVC   MEM(3),PTRN1+4\n         ED    MEM-1(4),WORK+6\n         EJECT\n***********************************************************************\n*                                                                     *\n*     'General' or 'S.R.M.' Mode?                                     *\n*                                                                     *\n***********************************************************************\n         CLI   SRMSW,X'00'\n         BE    GENERAL\n***********************************************************************\n*  SRM Mode:                                                          *\n***********************************************************************\n*                                                                     *\n*                     Working Set size at swapin                      *\n*                                                                     *\n***********************************************************************\n         LH    R7,OUCBWSS         swapin frame count\n         CVD   R7,WORK\n         MVC   $UCBWSS(3),PTRN1+4\n         ED    $UCBWSS-1(4),WORK+6\n***********************************************************************\n*                                                                     *\n*                        Dispatching priority                         *\n*                                                                     *\n***********************************************************************\n         XR    R7,R7              R7 = 0\n         IC    R7,ASCBDP          R7 = dispatching priority\n         SRL   R7,4               convert first hex character\n         IC    R8,HEX(R7)\n         STC   R8,DP\n         IC    R7,ASCBDP          R7 = dispatching priority\n         N     R7,=F'15'          convert second hex character\n         IC    R8,HEX(R7)\n         STC   R8,DP+1\n***********************************************************************\n*                                                                     *\n*                   Position on Dispatching queue                     *\n*                                                                     *\n***********************************************************************\n         CLI   LOC,C'O'           memory swapped out ?\n         BE    NOPOS              if yes, forget about position.\n         CLI   LOC,C'W'           wait status ?\n         BE    NOPOS              if yes, forget about position.\n         LH    R7,ASCBSEQN        load dp queue position.\n         CVD   R7,WORK            prepare for conversion to EBCDIC.\n         UNPK  DQ,WORK+6(2)       convert to decimal.\n         OI    DQ+1,X'F0'\n***********************************************************************\n*                                                                     *\n*                  Resource Manager Recommendation                    *\n*                                                                     *\n***********************************************************************\nNOPOS    L     R7,OUCBCMRV        composite WLM recommendation value\n         LTR   R7,R7              hi-order bit is on ?\n         BNM   RMROK              yes, WMR invalid\n         MVC   $UCBWMR,=C'**'     'not avail' indication\n         MVI   $UCBWMS+4,C'-'     blank out the service counter.\n         B     CONT3\nRMROK    SRL   R7,8               divide by 256\n         CVD   R7,WORK            convert to decimal .\n         UNPK  $UCBRMR,WORK+6(2)\n         OI    $UCBRMR+1,X'F0'\n         CP    WORK+6(2),=PL2'0'  RMR greater than 99 ?\n         BNE   CONT3              yes, double zero field.\n         MVI   $UCBRMR,C' '       WMR less than 1.\n***********************************************************************\n*                                                                     *\n*                         Performance Group                           *\n*                                                                     *\n***********************************************************************\nCONT3    XR    R7,R7              R7 = 0\n         ICM   R7,3,OUCBNPG       R7 = performance group\n         CVD   R7,WORK            convert to decimal.\n         UNPK  $UCBPGN,WORK+6(2)\n         OI    $UCBPGN+1,X'F0'\n***********************************************************************\n*                                                                     *\n*                      Performance Group Period                       *\n*                                                                     *\n***********************************************************************\n         XR    R7,R7              R7 = 0\n         IC    R7,OUCBPGP         performance group period offset\n         SH    R7,=H'12'          - 12\n         SRL   R7,4               / 16\n         LA    R7,1(R7)\n         STC   R7,$UCBPGP\n         OI    $UCBPGP,X'F0'\n***********************************************************************\n*                                                                     *\n*                         Domain                                      *\n*                                                                     *\n***********************************************************************\n         XR    R7,R7              R7 = 0\n         IC    R7,OUCBDMN         R7 = domain\n         CVD   R7,WORK            convert to decimal.\n         UNPK  $UCBDOM,WORK+6(2)\n         OI    $UCBDOM+1,X'F0'\n***********************************************************************\n*                                                                     *\n*                      WLM Recommendation value                       *\n*                                                                     *\n***********************************************************************\n         L     R7,OUCBWMR         work load manager rec. value\n         LTR   R7,R7              hi-order bit is on ?\n         BNM   WMROK              yes, WMR invalid\n         MVC   $UCBWMR,=C'NA'     'not avail' indication\n         MVI   $UCBWMS+4,C'-'     blank out the service counter.\n         B     NORECOM\nWMROK    SRL   R7,8               divide by 256\n         CVD   R7,WORK            convert to decimal .\n         UNPK  $UCBWMR,WORK+6(2)\n         OI    $UCBWMR+1,X'F0'\n         CP    WORK+6(2),=PL2'0'  WMR greater than 99 ?\n         BNE   NORECOM            yes, double zero field.\n         MVI   $UCBWMR,C' '       WMR less than 1.\n***********************************************************************\n*                                                                     *\n*                      In-Storage Service Rate                        *\n*                                                                     *\n***********************************************************************\nNORECOM  L     R10,16             R10 = addr of CVT\n         USING CVT,R10\n         L     R10,CVTOPCTP       R10 = addr of RMCT\n         DROP  R10\n         L     R10,X'7C'(R10)     R10 = current TOD\n         S     R10,OUCBTMW        WLM interval start time\n         BP    PLUSRATE\n         MVC   SERATE(3),BLANKS\n         B     NOSRV\nPLUSRATE L     R8,OUCBWMS         interval service units\n         SRDL  R8,32              calculate sevice rate\n         M     R8,=F'976'\n         DR    R8,R10\n         CVD   R9,WORK            convert to decimal\n         MVC   SERATE(3),PTRN1+4\n         ED    SERATE-1(4),WORK+6\n***********************************************************************\n*                                                                     *\n*                   Interval Service Accumulation                     *\n*                                                                     *\n***********************************************************************\nNOSRV    L     R7,OUCBWMS         service units - transaction\n         CVD   R7,WORK            convert to decimal.\n         MVC   $UCBWMS(6),PTRN1+1\n         MVO   WORK,WORK\n         MVI   WORK+7,X'0C'\n         ED    $UCBWMS-1(7),WORK+4\n***********************************************************************\n*                                                                     *\n*              I/O Count used for Recommendation value                *\n*                                                                     *\n***********************************************************************\n         LH    R9,ASCBIOSM        R9 =  I/O service measure\n         LH    R10,OUXBIOS        R10 = WLM base I/O measurement\n         SLR   R9,10              I/O count for this in core interval\n         N     R9,=X'0000FFFF'    clear high order bytes\n         CVD   R9,WORK\n         MVC   IOC(5),PTRN1+2\n         ED    IOC-1(6),WORK+5\n***********************************************************************\n*                                                                     *\n*              TSLS - TIME SINCE Last swap (seconds)                  *\n*                                                                     *\n***********************************************************************\n         L     R8,16              R8 = addr of CVT\n         USING CVT,R8\n         L     R8,CVTOPCTP        R8 = addr of RMCT\n         DROP  R8\n         L     R8,X'7C'(R8)       R8 = time-of-day\n         S     R8,OUCBTMS         subtract time of last swap action\n         SRDL  R8,32              convert to HH.MM.SS\n         D     R8,=F'1024'        convert to seconds\n         CVD   R9,WORK\n         MVC   TSLS(5),PTRN1+2\n         ED    TSLS-1(6),WORK+5\n*\n*\n         B     LINEDONE\n         EJECT\n***********************************************************************\n*                                                                     *\n*                      Elapsed Transaction time                       *\n*                                                                     *\n***********************************************************************\nGENERAL  L     R8,16              R8 = addr of CVT\n         USING CVT,R8\n         L     R8,CVTOPCTP        R8 = addr of RMCT\n         DROP  R8\n         L     R8,X'7C'(R8)       R8 = current TOD\n         S     R8,OUCBTMO         subtract transaction start time\n         SRDL  R8,32              convert to HH.MM.SS\n         D     R8,=F'1024'        convert to seconds\n         ST    R9,TRANSSEC        store seconds for later\n         SR    R8,R8              get hours\n         D     R8,=F'3600'\n         CVD   R9,PACK\n         UNPK  HH,PACK+6(R2)\n         OI    HH+1,X'F0'\n         MVI   HH+2,C':'\n         SRDL  R8,32              get minutes\n         D     R8,=F'60'\n         CVD   R9,PACK\n         UNPK  MM(2),PACK+6(2)\n         OI    MM+1,X'F0'\n         MVI   MM+2,C':'          get seconds\n         CVD   R8,PACK\n         UNPK  SS(2),PACK+6(2)\n         OI    SS+1,X'F0'\n***********************************************************************\n*                                                                     *\n*                          Address Space ID                           *\n*                                                                     *\n***********************************************************************\n         L     R9,ASCBADDR        R9 = addr of entry in ASVT table\n         S     R9,FRSTASVT        minus addr of first entry\n         SRL   R9,2               divide by 4 = ASID\n         LR    R7,R9              R7 = ASID\n         SRL   R7,4               convert first hex character\n         IC    R8,HEX(R7)\n         STC   R8,ASID\n         LR    R7,R9              R7 = ASID\n         N     R7,=F'15'          convert second hex character\n         IC    R8,HEX(R7)\n         STC   R8,ASID+1\n***********************************************************************\n*                                                                     *\n*                           Task CPU time                             *\n*                                                                     *\n***********************************************************************\n         LM    R8,R9,ASCBEJST     EJST (CPU time - task type)\n         SRDL  R8,12              convert to microsec\n         D     R8,=F'100000'      convert to seconds x 10-3\n         CVD   R9,WORK            convert to decimal.\n         MVC   CPU(6),PTRN2\n         ED    CPU-1(7),WORK+5\n***********************************************************************\n*                                                                     *\n*                            Stepname                                 *\n*                                                                     *\n***********************************************************************\n         ICM   R7,B'1111',ASCBJBNI jobname pointer\n         BZ    SML                jobname not available\n         MVC   PROCSTEP(8),24(R7) move in procstepname\n         MVC   STEPNAME,56(R7)    move in stepname\n         B     CONT\nSML      ICM   R7,B'1111',ASCBJBNS S/M/L pointer\n         BZ    CONT               S/M/L not available\n         CLI   JOB,C'*'           is this *MASTER* ?\n         BE    TSO                yes, treat it like a userid\n         TM    OUCBYFL,OUCBSTT    is this a started task?\n         BNO   TSO                no, so use TSO stepname\n         B     CONT\nTSO      MVC   STEPNAME,8(R7)     move in stepname for LOGON\nCONT     EQU    *\n***********************************************************************\n*                                                                     *\n*                    M/S/L                                            *\n*                                                                     *\n***********************************************************************\n         TM    OUCBYFL,OUCBSTT    START created task?\n         BZ    TEST2              no\n         MVI   MSL,C'S'\n         B     CONT2\nTEST2    TM    OUCBYFL,OUCBLOG    LOGON created task?\n         BZ    TEST3              no\n         MVI   MSL,C'L'\n         B     CONT2\nTEST3    TM    OUCBYFL,OUCBMNT    MOUNT created task?\n         BZ    CONT2              no\n         MVI   MSL,C'M'\n***********************************************************************\n*                                                                     *\n*                  # TCBs Active                                      *\n*                                                                     *\n***********************************************************************\nCONT2    L     R7,ASCBTCBS         R7 = no. of active TCBs\n         CVD   R7,WORK\n         UNPK  TCBA,WORK+7(1)\n         OI    TCBA,X'F0'\n***********************************************************************\n*                                                                     *\n*                  Transaction Service Accumulation                   *\n*                                                                     *\n***********************************************************************\n         TM    OUCBQFL,OUCBOUT    address space swapped in\n         BO    OUTRANS            yes\n         L     R7,OUXBTRS         accumulated service\n         CVD   R7,WORK            convert to decimal.\n         MVC   $UXBTRS(7),PTRN1\n         ED    $UXBTRS-1(8),WORK+4\n         B     LINEDONE\nOUTRANS  MVC   $UXBTRS(7),BLANKS  OUXB not available\n*\n*        Move Line to buffer\n*\nLINEDONE MVC   0(81,R1),LINE      move the line to the 3270 buffer.\n         LH    R7,SCRSIZE         increment 'TPUT' size\n         LA    R7,81(R7)          add 81 to current buffer length\n         STH   R7,SCRSIZE         store away again\n         LA    R1,81(R1)          R1 = addr of bottom of buffer\n         C     R1,ADBUF           have we reached the bottom?\n         BE    PUTIT              yes, go put this screen.\nNOGOOD   BCT   R3,ASCBLOOP        process next address space\n         DROP  R4,R5,R6\n         EJECT\n***********************************************************************\n*                                                                     *\n*              Put the SWAP buffer to the 3270 screen                 *\n*                                                                     *\n***********************************************************************\nPUTIT    CLC   JOBMASK(8),BLANKS  is the jobmask blank?\n         BNE   CHKTYPE            no, so skip\n         IC    R8,PAGE            load current page character\n         LA    R8,1(R8)           add one to it\n         STC   R8,PAGE            store it back\n         CLC   SCRSIZE(2),=H'0'   is the screen empty?\n         BE    FINDCVT            yes - go do the screen over\nCHKTYPE  CLI   CRTFLAG,X'FF'      is this a CRT?\n         BE    CRT1               yes\n         LA    R1,ERROR           R1 = addr of first line\n         LA    R0,79              R0 = length of heading\n         ICM   R1,8,EDITFLG       edit mode\n         TPUT  (1),(0),R          write line\n         LA    R1,HEADINGA+1      R1 = addr of first line\n         LA    R0,79              R0 = length of heading\n         ICM   R1,8,EDITFLG       edit mode\n         TPUT  (1),(0),R          write line\n         LH    R7,SCRSIZE         R7 = total screensize\n         LA    R8,81              R8 = one line\n         LA    R1,BUFFER+2        set pointer to first line\n         ICM   R1,8,EDITFLG       edit mode\n         LA    R0,79              R0 length of output line\nNEXTL    LR    R2,R1              save R1 since TPUT zaps it\n         TPUT  (1),(0),R          print one line\n         LA    R8,81(R8)          add 81 bytes\n         CR    R7,R8              have we printed last line?\n         BL    CONTA              yes, continue\n         LA    R1,81(R2)          nope, point to next line\n         LA    R0,79              load length\n         ICM   R1,8,EDITFLG       edit mode\n         B     NEXTL              print next line\nCRT1     LA    R1,CLEAR           R1 = addr of buffer\n         LA    R0,LENGTH          R0 = length of buffer\n         AH    R0,SCRSIZE         R0 = full length of buffer\n         ICM   R1,8,FULLSCR       full screen mode\n         TPUT  (1),(0),R          put screen\nCONTA    MVC   ERROR(27),BLANKS   blank out error field\n         CLI   WAITSW,X'FF'       are we in wait mode?\n         BNE   GETCHAR            no, read from terminal\n***********************************************************************\n*                                                                     *\n*                           'Wait' mode                               *\n*                                                                     *\n***********************************************************************\n         STIMER WAIT,BINTVL=DELAY yes, wait 1 second\n         L     R10,COUNTER        load counter\n         BCTR  R10,0              counter = counter - 1\n         ST    R10,COUNTER        store back\n         CVD   R10,WORK           convert to decimal.\n         MVC   SCRATCH(4),PATTERN move in edit pattern\n         ED    SCRATCH(4),WORK+6  edit in time\n         MVC   TIME(3),SCRATCH+1  move in time\n         LTR   R10,R10            counter = 0 ?\n         BNZ   CONTINUE           refresh if still counting\n         XI    WAITSW,X'FF'       counter up, do reads again\n         MVC   TIME(3),BLANKS     clear counter field\n         B     CONTINUE           refresh one last time\n***********************************************************************\n*                                                                     *\n*                       Read Command from user                        *\n*                                                                     *\n***********************************************************************\nGETCHAR  MVC   REPLY(33),BLANKS   blank out reply field\n         TGET  REPLY,33           get 79 characters from terminal\n         CLI   REPLY,X'6E'        reshow code?\n         BE    GETCHAR            yes; ignore it\n         OC    REPLY(33),BLANKS   convert chars to upper case\n         XC    CBUF+2(2),CBUF+2   clear offset\n         MVC   CSPLBLOK(24),CSPLSAVE  copy in CSPL blok\n         XC    CSOABLOK(8),CSOABLOK\n         L     R2,SAVEJSCB        R2 = addr of JSCB\n         USING IEZJSCB,R2\n***********************************************************************\n*                                                                     *\n*     IKJSCAN is being called merely to allow the 'X' feature to      *\n*     function if desired. If SWAP is being used in conjunction       *\n*     with 'SPY', then SWAP must be APF authorized. Since 'X' will    *\n*     not work with authorized programs, we flip off the auth bit     *\n*     in the JSCB to fool it.                                         *\n*                                                                     *\n***********************************************************************\n*        NI    JSCBOPTS,X'FF'-JSCBAUTH turn off auth to fool PCFSCAN\n         LA    R1,CSPLBLOK        R1 = addr of cmd scan parm list\n         L     R15,ADDRSCAN       R15 = addr of IKJSCAN\n         BALR  R14,R15            invoke IKJSCAN\n*        OI    JSCBOPTS,JSCBAUTH  turn APF bits back on\n         DROP  R2\n         LA    R1,CSOABLOK        R1 = addr of cmd scan output area\n         USING CSOA,R1\n         TM    CSOAFLG,CSOANOC    is the buffer empty?\n         BO    CONTINUE           yes; just go refresh\n         DROP  R1\n***********************************************************************\n*                                                                     *\n*                       W  --  Enter wait mode                        *\n*                                                                     *\n***********************************************************************\nWAITCHK  CLI   REPLY,C'W'         go into wait mode?\n         BNE   CDELAY             no\n         XI    WAITSW,X'FF'       yes, toggle wait switch\n         LA    R2,30              set default value = 30\n         LA    R15,CONVBIN        branch to conversion rtn\n         BALR  R14,R15            EBCDIC to binary\n         MVC   SCRATCH(4),PATTERN move in edit pattern\n         ED    SCRATCH(4),WORK+6  edit in time left\n         MVC   TIME(3),SCRATCH+1  move time left into place\n         ST    R2,COUNTER         store starting timer value\n         B     CONTINUE           all set - go display next page\n***********************************************************************\n*                                                                     *\n*            D  --  Set timer delay in tenths of a second             *\n*                                                                     *\n***********************************************************************\nCDELAY   CLI   REPLY,C'D'         are we changing the time delay?\n         BNE   ENDCHK             no, so continue\n         LA    R2,10              set default value = 10 tenths second\n         LA    R15,CONVBIN        branch to conversion rtn\n         BALR  R14,R15            EBCDIC to binary\n         MVC   SCRATCH(5),DPATTRN move in edit pattern\n         ED    SCRATCH(5),WORK+6  edit in delay time\n         MVC   PAUSE(3),SCRATCH+2 move time left into place\n         MH    R2,=H'10'          convert to 100ths of a second\n         ST    R2,DELAY           store wait delay value\n         B     CONTINUE           all set - go display next page\n***********************************************************************\n*                                                                     *\n*                          E  --  End SWAP                            *\n*                                                                     *\n***********************************************************************\nENDCHK   CLI   REPLY,C'E'         termination requested ?\n         BE    STOP               all done\n***********************************************************************\n*                                                                     *\n*                   T  --  TSO Address spaces only                    *\n*                                                                     *\n***********************************************************************\nTSOCHK   CLI   REPLY,C'T'         TSO only ?\n         BNE   BATCHCHK           no\n         MVI   MODESW,X'FF'       indicate change of modes.\n         MVI   BATCHORN+1,X'80'   reset the branches\n         MVI   TSOORNO+1,X'00'    only TSO memories.\n         MVI   MODETBA,C'T'       set mode indicator\n         B     CONTINUE\n***********************************************************************\n*                                                                     *\n*                  B  --  Batch Address spaces only                   *\n*                                                                     *\n***********************************************************************\nBATCHCHK CLI   REPLY,C'B'         batch only ?\n         BNE   BOTHCHK            no\n         MVI   MODESW,X'FF'       indicate change of modes.\n         MVI   TSOORNO+1,X'10'    reset the branches\n         MVI   BATCHORN+1,X'00'   only batch (STC) memories.\n         MVI   MODETBA,C'B'       set mode indicator\n         B     CONTINUE\n***********************************************************************\n*                                                                     *\n*             A  --  All Address Spaces (Batch and TSO)               *\n*                                                                     *\n***********************************************************************\nBOTHCHK  CLI   REPLY,C'A'         batch and TSO?\n         BNE   OUTCHK             no\n         MVI   MODESW,X'FF'       indicate change of modes.\n         MVI   TSOORNO+1,X'00'    yes, so NOP all the\n         MVI   BATCHORN+1,X'00'   selection branches.\n         MVI   MODETBA,C'A'       set mode indicator\n         B     CONTINUE\n***********************************************************************\n*                                                                     *\n*        O  --  Address Spaces which are 'out' and not ready          *\n*                                                                     *\n***********************************************************************\nOUTCHK   CLI   REPLY,C'O'         out mode ?\n         BNE   INCHK              no\n         MVI   MODESW,X'FF'       indicate change of modes.\n         MVI   INOROUT+1,X'00'    nop the branch\n         MVI   MODEIO,C'O'        set mode indicator\n         B     CONTINUE\n***********************************************************************\n*                                                                     *\n*             I  --  Address Spaces which are swapped in              *\n*                                                                     *\n***********************************************************************\nINCHK    CLI   REPLY,C'I'         in or ready mode ?\n         BNE   FINDCHK            no\n         MVI   INOROUT+1,X'10'    branch\n         MVI   MODESW,X'FF'       indicate mode switch.\n         MVI   MODEIO,C'I'        set mode indicator\n         B     CONTINUE\n***********************************************************************\n*                                                                     *\n*                F  --  Display only certain jobnames                 *\n*                                                                     *\n***********************************************************************\nFINDCHK  CLI   REPLY,C'F'         should we set the jobmask?\n         BNE   SRMCHK             no\n         MVI   MODESW,X'FF'       indicate mode switch.\n         MVC   JOBMASK(8),REPLY+1 move mask into place\n         MVC   MASKNAME(8),JOBMASK move mask indicator into place\n         CLC   JOBMASK(8),BLANKS  is jobmask blank?\n         BNE   CONTINUE           no, go on\n         MVC   MASKNAME(8),=C'  Page 1'\n         B     CONTINUE\n***********************************************************************\n*                                                                     *\n*                      S  --  SRM display mode                        *\n*                                                                     *\n***********************************************************************\nSRMCHK   CLI   REPLY,C'S'         SRM mode ?\n         BNE   GENCHK             no\n         MVI   SRMSW,X'FF'        indicate SRM mode\n         MVC   HEADINGA(80),HEADING1 move in SRM heading\n         MVC   MODEGS(7),=C'S.R.M. ' set mode indicator\n         B     CONTINUE\n***********************************************************************\n*                                                                     *\n*                    G  --  General display mode                      *\n*                                                                     *\n***********************************************************************\nGENCHK   CLI   REPLY,C'G'         general mode ?\n         BNE   LINKSPY            no\n         MVI   SRMSW,X'00'        indicate general mode\n         MVC   HEADINGA(80),HEADING2 move in general heading\n         MVC   MODEGS(7),=C'General' set mode indicator\n         B     CONTINUE\n***********************************************************************\n*                                                                     *\n*                         L  --  Link to SPY                          *\n*                                                                     *\n***********************************************************************\nLINKSPY  CLI   REPLY,C'L'         XCTL to SPY?\n         BNE   NEEDHELP           no\n         L     R13,4(R13)         callers save area pointer.    WDA#01\n         XCTL  (2,12),EP=SPY      XCTL to SPY\n***********************************************************************\n*                                                                     *\n*               ?  --  Display help for SWAP commands                 *\n*                                                                     *\n***********************************************************************\nNEEDHELP CLI   REPLY,C'?'         user needs help page displayed?\n         BNE   BADCMD\n         L     R1,HLP1ADDR        R1 = addr of help\n         LA    R0,HELPLEN1        R0 = length of help\n         ICM   R1,8,FULLSCR       full screen mode\n         TPUT  (1),(0),R          write help to screen\n         TGET  REPLY,33           go get a command\n         L     R1,HLP2ADDR        R1 = addr of help\n         LA    R0,HELPLEN2        R0 = length of help\n         ICM   R1,8,FULLSCR       full screen mode\n         TPUT  (1),(0),R          write help to screen\n         B     GETCHAR            go get a command\n***********************************************************************\n*                                                                     *\n*                     Blank or Invalid commands                       *\n*                                                                     *\n***********************************************************************\nBADCMD   CLI   REPLY,C' '         was a blank just entered?\n         BE    CONTINUE\n         MVC   ERROR(27),ERRMSG2  move in bad command msg\nCONTINUE MVC   SCRSIZE,=H'0'      reset screen size.\n         LA    R1,BUFFER          ---+\n         LA    R6,BUFFER             |\n         ICM   R6,8,C' '             | move character long to fill\n         LA    R7,22*81              | screen buffer with blanks\n         LA    R8,BUFFER             |\n         SR    R9,R9                 |\n         MVCL  R6,R8              ---+\n         CLI   MODESW,X'FF'       change of modes ?\n         BNE   MODEOK             branch if same mode.\n         MVI   MODESW,X'00'       reset mode change.\n         B     FINDCVT            start over from beginning.\nMODEOK   LTR   R3,R3              more memories to process ?\n         BNZ   NOGOOD             yes.\n         CLI   ATTNFLG,X'00'      was attn hit?\n         BE    FINDCVT            no\n         MVI   ATTNFLG,X'00'      yes, reset flag\n         MVC   TIME(3),BLANKS     blank out timer field\n         MVI   WAITSW,X'00'       turn off wait flag\n         LA    R3,0               R3 = 0\n         ST    R3,COUNTER         set timer to 0\n         B     FINDCVT            otherwise, start over from the top.\nSTOP     CLI   CRTFLAG,X'00'      is this a CRT?\n         BE    STOP1              no; don't clear\n         LA    R1,CLR             R1 = addr of clear string\n         LA    R0,CLRLEN          R0 = length of clear string\n         ICM   R1,8,FULLSCR       full screen mode\n         TPUT  (1),(0),R          clear the screen before we leave\n         STFSMODE OFF             turn off fullscreen mode\nSTOP1    L     R13,4(R13)                                       WDA#01\n         RETURN (14,12),RC=0\nVARCLC1  CLC   JOBMASK(0),JOB\n         EJECT\n***********************************************************************\n*                                                                     *\n*            Convert EBCDIC numbers from user into binary             *\n*                                                                     *\n***********************************************************************\nCONVBIN  CVD   R2,WORK            convert to decimal.\n         CLI   REPLY+1,C' '       did he enter a number?\n         BE    RTRN               no, use the default\n         CLI   REPLY+1,C'0'       is the hex code < 'F0' ?\n         BL    BADCHAR            yes, error\n         CLI   REPLY+1,C'9'       is the hex code > 'F9' ?\n         BH    BADCHAR            yes, error\n         PACK  WORK(8),REPLY+1(1) pack EBCDIC (assume 1 digit)\n         CLI   REPLY+2,C' '       did he enter 2 digits?\n         BE    CVB                no, dont do the 2 digit pack\n         CLI   REPLY+2,C'0'       is the hex code < 'F0' ?\n         BL    BADCHAR            yes, error\n         CLI   REPLY+2,C'9'       is the hex code > 'F9' ?\n         BH    BADCHAR            yes, error\n         PACK  WORK(8),REPLY+1(2) pack again, with 2 digits this time\nCVB      CVB   R2,WORK            get binary\nRTRN     BR    R14                return to mainline\nBADCHAR  MVC   ERROR(27),ERRMSG1  numeric error\n         B     RTRN\n         EJECT\n***********************************************************************\n*                                                                     *\n*          Setup and Initialize Parameter list for IKJSCAN            *\n*                                                                     *\n***********************************************************************\nINITSCAN STM   R15,R4,SAVE154     save regs\n         L     R3,CVTPTR          R3 = addr of CVT\n         L     R3,0(R3)           R3 = addr of addr of TCB\n         L     R3,4(R3)           R3 = addr of TCB\n         USING TCB,R3\n         ICM   R3,7,TCBJSCBB      R3 = addr of JSCB\n         ST    R3,SAVEJSCB        save addr of JSCB\n         DROP  R3\n         USING IEZJSCB,R3\n         L     R4,JSCBPSCB        R4 = addr of PSCB\n         DROP  R3\n         USING PSCB,R4\n         L     R3,PSCBUPT         R3 = addr of UPT\n         ST    R3,SAVEUPT         save addr of UPT\n         LA    R2,CSPLSAVE        R2 = addr of cmd scan parm list\n         USING CSPL,R2\n         ST    R3,CSPLUPT         save UPT addr\n         L     R3,PSCBRLGB        R3 = addr of relogon buffer\n         L     R3,256(R3)         R3 = addr of ECT\n         ST    R3,CSPLECT         save ECT addr\n         LA    R3,CPECB           R3 = addr of fake ECB for this CP\n         ST    R3,CSPLECB         save ECB addr\n         LA    R3,FLAGWORD        R3 = addr of CSPL flag word\n         ST    R3,CSPLFLG         save flag addr\n         LA    R3,CSOABLOK        R3 = addr of cmd scan output area\n         ST    R3,CSPLOA          save output area addr\n         LA    R3,CBUF            R3 = addr of 'cmd buffer'\n         ST    R3,CSPLCBUF        save cbuf addr\n         DROP  R2,R4\n         LOAD  EP=IKJSCAN\n         ST    R0,ADDRSCAN\n         LM    R15,R4,SAVE154     restore regs 15 - 4\n         BR    R14\n         DS    0F\nSAVE154  DS    6F\nSAVEUPT  DS    F                   save addr of UPT\nSAVEJSCB DS    F                   save addr of JSCB\nCSPLBLOK DS    6F                  cmd scan parameter list\nCSPLSAVE DS    6F\nCPECB    DC    F'0'                fake ECB for this CP\nFLAGWORD DC    F'0'\nCSOABLOK DS    2F\nCBUF     DC    AL2(37),AL2(0)\nREPLY    DC    CL33' '             user's command input buffer\nADDRSCAN DS    A\n         DROP  R12\n         EJECT\n***********************************************************************\n*                                                                     *\n*                          A T T N E X I T                            *\n*                                                                     *\n*         Trap userd Attention Interrupts and flag for reset          *\n*                                                                     *\n***********************************************************************\nATTNEXIT SAVE  (14,12)            save the callers registers\n         LR    R7,R15             establish\n         USING ATTNEXIT,R7        addressability.\n         LA    R11,SAVEA          set-up\n         ST    R13,SAVEA+4         save\n         ST    R11,8(,R13)          area\n         LR    R13,R11               chaining\n         MVI   ATTNFLG,X'FF'      set attn flag\n         L     R13,SAVEA+4        callers save area pointer.\n         RETURN (14,12),RC=0      and away we go...\nSAVEA    DS    18F\n         DROP  R7\n         EJECT\n***********************************************************************\n*                                                                     *\n*                             Constants                               *\n*                                                                     *\n***********************************************************************\nSTAXLIST STAX  ATTNEXIT,MF=L\nPACK     DS    D\nWORK     DS    D\nSCRATCH  DS    D                  scratch area\nASCBADDR DS    F                  ASCB addr save area\nFRSTASVT DS    F                  first ASVT entry save area\nCOUNTER  DC    F'0'               wait counter\nTRANSSEC DS    F                  transaction time in seconds\nDELAY    DC    F'100'             2 second delay for refresh\nHLP1ADDR DC    A(HELP1)\nHLP2ADDR DC    A(HELP2)\nADBUF    DC    A(0)\nSCRSIZE  DC    H'0'\nATTNFLG  DC    X'00'              attention flag\nWAITSW   DC    X'00'              wait mode\nMODESW   DC    X'00'              mode change.\nSRMSW    DC    X'00'              SRM mode.\nPTRN1    DC    X'20202020202120'  edit pattern\nPTRN2    DC    X'202021204B202020'\nPATTERN  DC    X'40202020'        edit pattern\nDPATTRN  DC    X'4021204B20'      edit pattern\nBLANKS   DC    CL40' '\nCODETABL DC    C'O'  Swap Code 1 : Terminal output wait\n         DC    C'I'  Swap Code 2 : Terminal input wait\n         DC    C'W'  Swap Code 3 : Long Wait\n         DC    C'A'  Swap Code 4 : Auxiliary Storage Shortage\n         DC    C'R'  Swap Code 5 : Real Storage Shortage\n         DC    C'V'  Swap Code 6 : MS0 Detected Wait\n         DC    C'S'  Swap Code 7 : REQSWAP SYSEVENT Issued\n         DC    C'E'  Swap Code 8 : ENQHOLD Exchg by swap analysis\n         DC    C'X'  Swap Code 9 : EXCHG Recommended by swap analysis\n         DC    C'$'  Swap Code A : Unilateral Swapout\nHEX      DC    C'0123456789ABCDEF'\nSTART    DC    C'Starting'\n         EJECT\n***********************************************************************\n*                                                                     *\n*                        Format Display Line                          *\n*                                                                     *\n***********************************************************************\nX        DC    CL80' '\n         ORG   X                  Byte\nLINE     DC    X'1D60'            0     Protected, low intensity\nJOB      DC    CL8' '             2\n         DC    C' '               10\n         ORG   X+11               For General Listing\nPROCSTEP DC    CL8' '             11\n         DC    C' '               19\nSTEPNAME DC    CL8' '             20\n         DC    CL3' '             28\nASID     DC    CL2' '             31\n         DC    CL2' '             33\nCPU      DC    CL6' '             35\n         DC    C' '               41\n         ORG   X+11               For SRM Listing\n$UCBPGN  DC    CL2' '             11\n         DC    C' '               13\n$UCBPGP  DC    C' '               14\n         DC    C' '               15\n$UCBDOM  DC    CL2' '             16\n         DC    C' '               18\nDP       DC    CL2' '             19\n         DC    C' '               21\nDQ       DC    CL2' '             22\n         DC    C' '               24\n$UCBRMR  DC    CL2' '             25\n         DC    C' '               27\n$UCBWMR  DC    CL2' '             28\n         DC    C' '               30\nSERATE   DC    CL3' '             31\n         DC    C' '               34\n$UCBWMS  DC    CL6' '             35\n         DC    C' '               41\n         ORG   X+42               For General and SRM Listings\nTCPU     DC    CL6' '             42\n         DC    C' '               48\n$UCBSWC  DC    CL2' '             49\n         DC    C' '               51\nSTATUS   DC    C' '               52\n         DC    C' '               53\nLOC      DC    C' '               54\n         DC    C' '               55\nMEM      DC    CL3' '             56\n         DC    C' '               59\n         ORG   X+60               For SRM listing\n$UCBWSS  DC    CL3' '             60\n         DC    C' '               63\nIOC      DC    CL5' '             64\n         DC    C' '               69\nTSLS     DC    CL5' '             70\n         DC    C' '               75\n         ORG   X+60               For General Listing\nHH       DC    CL2' '             60\n         DC    C':'               62\nMM       DC    CL2' '             63\n         DC    C':'               65\nSS       DC    CL2' '             66\n         DC    C' '               68\nMSL      DC    C' '               69\n         DC    C' '               70\n$UXBTRS  DC    CL7' '             71\n         DC    C' '               78\nTCBA     DC    CL1' '             79\n         DC    C' '               80\n         ORG X+90\nFULLSCR  DC    X'03'\nEDITFLG  DC    X'00'\nCRTFLAG  DC    X'FF'\nJOBMASK  DC    CL8'        '\nERRMSG1  DC    CL27' ERROR - Non-numeric value '\nERRMSG2  DC    CL27' ERROR - Invalid command   '\n         LTORG\nHEADING1 DC CL80' Jobname  PG P Dm DP DQ RM WR SU/S  S.U.  TCPU  SC R LX\n                Mem WSS   I/O  TSLS       '\nHEADING2 DC CL80' Jobname  Procstep Stepname  ASID   CPU   TCPU  SC R LX\n                Mem HH:MM:SS MSL S.U. TCB '\nCLR      DC    X'C1'               WCC - Clear screen at end of pgm\n         DC    X'115D7E'           SBA to row 24, col 79 (FSE 5.0)\n         DC    X'114040'           SBA to row 1, col 1\n         DC    X'3C404000'         Fill screen with nulls\n         DC    X'114040'           SBA to row 1, col 1\n         DC    X'13'               Insert cursor\nCLRLEN   EQU   *-CLR\nCLEAR    DC    X'C1'               WCC\n         DC    X'115D7F'           SBA to row 24, col 80 (FSE 5.0)\n         DC    X'114040'           SBA to row 1, col 1\n         DC    X'3C404000'         Fill screen with nulls\nPHEADING DC    X'114040'           SBA to row 1, COL 1\n         DC    X'1D40'             ATTR Byte - unprotected, low intens.\n         DC    X'13'               Insert cursor\n         DC    C'   '\nERROR    DC    CL30' '\nCMDCTRL1 DC    X'1DE8'             ATTR Byte - protected, hi intens.\n         DC    CL7'Timer: '\nTIME     DC    CL3'   '\nSLASH    DC    CL1'/'\nPAUSE    DC    CL3'1.0'\n         DC    CL5'     '\n         DC    CL6'Mode: '\nMODETBA  DC    CL1'B'\nMODEIO   DC    CL2'O '\nMODEGS   DC    CL9'General  '\nMASKNAME DC    CL7'  Page '\nPAGE     DC    CL1'1'\nHEADINGA DS    CL80' '\nBUFFER   DC    41CL81' '\nLENGTH   EQU   BUFFER-CLEAR\n         EJECT\nHELP1    DC    X'C1'               WCC\n         DC    X'115D7F'           SBA to row 24, col 80 (FSE 5.0)\n         DC    X'114040'           SBA to row 1, col 1\n         DC    X'3C404000'         Fill screen with nulls\n         DC    X'114040',X'1DE8',C'Command      Description'\n         DC    X'11C150'\n         DC    X'11C260',C'   A         Display Started tasks, batch '\n         DC    C'and TSO'\n         DC    X'11C3F0',C'   B         Display Started tasks and '\n         DC    C'batch only'\n         DC    X'11C540',C'   DXX       Set delay to XX tenths seconds'\n         DC    X'11C650',C'   E         End SWAP'\n         DC    X'11C760',C'   F         Display all Jobnames'\n         DC    X'11C8F0',C'   FXXXXXXXX Display only Job ''XXXXXXXX'''\n         DC    X'114A40',C'   G         General Information Will be '\n         DC    C'displayed'\n         DC    X'114B50',C'   I         Display only swapped-in '\n         DC    C'memories'\n         DC    X'114C60',C'   O         Display both in and out '\n         DC    C'memories'\n         DC    X'114DF0',C'   L         LINK to program SPY '\n         DC    C'(if available)'\n         DC    X'114F40',C'   S         SRM information displayed'\n         DC    X'115050',C'   T         Display TSO jobs only'\n         DC    X'11D160',C'   W         Start timer mode for 30 '\n         DC    C'seconds'\n         DC    X'11D2F0',C'   WXX       Start timer mode for XX '\n         DC    C'seconds'\n         DC    X'11D440',C'   W0        Start timer mode until '\n         DC    C'interrUPT'\n         DC    X'11D550',C'   ?         Display this page'\n         DC    X'11D660'\n         DC    X'11D7F0',C'Hitting INTERRUPT will stop the wait timer'\n         DC    X'11D940'\n         DC    X'115A50',C'*WARNING*  INTERRUPT may be ignored if '\n         DC    C'timer is set too fast (< .4 sec)'\n         DC    X'115B60'\n         DC    X'115CF0',C'Hit ENTER to continue'\n         DC    X'115DC61D40134040401DE8'\nHELPMRK1 EQU   *\nHELPLEN1 EQU   HELPMRK1-HELP1\n         EJECT\nHELP2    DC    X'C1'               WCC\n         DC    X'115D7F'           SBA to row 24, col 80 (FSE 5.0)\n         DC    X'114040'           SBA to row 1, col 1\n         DC    X'3C404000'         Fill screen with nulls\n         DC    X'114040',X'1DE8',C'Swap Code    Description'\n         DC    X'11C150'\n         DC    X'11C260',C'   A       Auxilary storage shortage'\n         DC    X'11C260',C'   E       ENQHOLD exchange'\n         DC    X'11C3F0',C'   I       Terminal input wait'\n         DC    X'11C540',C'   O       Terminal output wait'\n         DC    X'11C650',C'   R       Real storage shortage'\n         DC    X'11C760',C'   S       REQSWAP SYSEVENT issued'\n         DC    X'11C8F0',C'   V       MS0 detected wait'\n         DC    X'114A40',C'   W       Long wait'\n         DC    X'114B50',C'   X       Exchange swap'\n         DC    X'114C60',C'   $       Unilateral swapout'\n         DC    X'114DF0',C'   ?       Unknown'\n         DC    X'114F40'\n         DC    X'115050',C'Loc. Code   Description'\n         DC    X'11D160'\n         DC    X'11D2F0',C'    I      Swapped in and eligible to run'\n         DC    X'11D440',C'    O      Swapped out but ready to run'\n         DC    X'11D550',C'    W      Swapped out and not ready to run'\n         DC    X'11D660',C'    $      Swapped in: V=R or non-swappable'\n         DC    X'11D7F0',C'    ?      In transition between states'\n         DC    X'11D940',C'    L      Logically Swapped'\n         DC    X'115A50'\n         DC    X'115B60',C'Version 4.5'\n         DC    X'115CF0',C'Hit ENTER to continue'\n         DC    X'115DC61D40134040401DE8'\nHELPMRK2 EQU   *\nHELPLEN2 EQU   HELPMRK2-HELP2\n         EJECT\n***********************************************************************\n*                                                                     *\n*                System Control Block Mapping DSECTs                  *\n*                                                                     *\n*     All macros can be found in either 'SYS1.MACLIB' or in           *\n*     'SYS1.AMODGEN'.                                                 *\n*                                                                     *\n***********************************************************************\n         PRINT NOGEN\n         CVT   DSECT=YES          Communications Vector Table\n         IEZJSCB ,                Job Step Control Block\n         SPACE 2\n         IHAASCB ,                Address Space Control Block\n         SPACE 2\n         IHAASVT ,                Address Space Vector Table\n         SPACE 2\n         IHAOUXB ,                SRM User Extension Block\n         SPACE 2\n         IKJCSOA ,                Command Scan OuTPUT Area\n         SPACE 2\n         IKJCSPL ,                Command Scan Parameter List\n         SPACE 2\n         IKJPSCB ,                Protected Step Control Block\n         SPACE 2\n         IKJTCB  ,                Task Control Block\n         SPACE 2\n         IRAOUCB ,                SRM User Control Block\n         SPACE 2\n         END   SWAP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UADS": {"ttr": 7687, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x01l\\x01l\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 364, "newlines": 364, "modlines": 0, "user": "WSRCC"}, "text": "*---------------------------------------------------------------------  00001\n*                                                                       00002\n*        THIS TSO COMMAND PROCESSOR WILL ALLOW THOSE USERS WITH         00003\n*        OPERATOR ABILITY TO DYNAMICALLY CHANGE THEIR UADS ENTRIES      00004\n*        IN THE PSCB.  ONCE CHANGED, IT WILL REMAIN IN EFFECT           00005\n*        ACCROSS A RELOGON (UNLESS USING ACF2 IN NOUADS MODE).          00006\n*                                                                       00007\n*        THOSE ENTRIES THAT MAY BE CHANGED AND THEIR ASSOCIATED         00008\n*        KEYWORDS ARE LISTED BELOW:                                     00009\n*                                                                       00010\n*        ID(????)/RESET    CHANGE CURRENT USER-ID TO ???? OR RESET      00011\n*                          BACK TO REAL ID. THIS OPERAND IS ALLOWED     00012\n*                          ONLY FOR USERS WITH ACCOUNT AUTHORITY,       00013\n*                          SINCE ONE MUST INSURE THAT PRIOR TO          00014\n*                          LOGOFF THE NEW ID MUST BE RESET.  IF NOT     00015\n*                          RESET, THE NEW ID SET WILL BE UPDATED        00016\n*                          WITH THE UADS ENTRY FOR THE ACTIVE USER.     00017\n*        LISTID/LID        LIST THE CURRENT UADS ID FROM PSCB.\n*                                                                       00018\n*        DEST(????)/NODEST CHANGE THE CURRENT DEFAULT DESTINATION       00019\n*                          TO ???? OR NULLIFY IT.                       00020\n*        LISTDEST/LDEST    LIST CURRENT DEFAULT DESTINATION.\n*                                                                       00021\n*        UNIT(????)/NOUNIT CHANGE THE CURRENT DEFAULT DYNAMIC           00022\n*                          ALLOCATION UNITNAME TO ???? OR NULLIFY IT.   00023\n*        LISTUNIT/LUNIT    LIST CURRENT DEFAULT UNIT ASSIGNMENT.\n*                                                                       00024\n*        JCL/NOJCL         ALLOW OR DISALLOW BATCH JOB SUBMISSIONS.     00025\n*                                                                       00026\n*        MOUNT/NOMOUNT     ALLOW OR DISALLOW FOREGROUND TAPE/DISK       00027\n*                          MOUNT CAPABILITIES.                          00028\n*                                                                       00029\n*        PASS/NOPASS       ALLOW OR DISALLOW DATASET PASSWORD CHECKING  00030\n*                                                                       00031\n*---------------------------------------------------------------------  00032\n         SPACE                                                          00033\n*--------------MODIFICATION.LOG---------------------------------------*\n*                                                                     *\n*  PROGRAMMER  |  DATE  |  SUMMARY OF CHANGES MADE TO THIS PROGRAM    *\n*--------------+--------+---------------------------------------------*\n* J. MARTIN    |01/05/82| ADDED LIST KEYWORDS TO \"ID\" \"DEST\" AND      *\n*              |        | \"UNIT\" FIELDS.                              *\n*              |        |                                             *\n*---------------------------------------------------------------------*\n         EJECT\n         SPACE                                                          00033\n         PRINT ON,NOGEN                                                 00034\n         SPACE                                                          00035\nUADS     BEGIN                                                          00036\n         SPACE                                                          00037\n*        REGISTER USAGE:                                                00038\n*                                                                       00039\n*        R0-R8 =====> WORK REGISTERS                                    00040\n*                                                                       00041\n*        R9    =====> BASE FOR THE PSCB                                 00042\n*        R10   =====> BASE FOR THE PARSE PDE'S                          00043\n*        R11   =====> BASE FOR THE CPPL                                 00044\n*        R12   =====> BASE FOR UADS (THIS ROUTINE)                      00045\n         EJECT                                                          00046\n*---------------------------------------------------------------------* 00047\n*                                                                       00048\n*        RETRIEVE INITIALIZATION PARMS                                  00049\n*        LINK TO PARSE TO RETRIEVE COMMAND DATA                         00050\n*                                                                       00051\n*---------------------------------------------------------------------* 00052\n         SPACE                                                          00053\nENTRY010 DS    0H                                                       00054\n         LR    R11,R1             SAVE CPPL POINTER                     00055\n         USING CPPL,R11           PROVIDE ADDRESSABILITY                00056\n         MVC   PPLUPT,CPPLUPT     COPY UPT ADDRESS                      00057\n         MVC   PPLECT,CPPLECT     COPY ECT ADDRESS                      00058\n         MVC   PPLCBUF,CPPLCBUF   COPY ADDRESS OF COMMAND BUF           00059\n         L     R9,CPPLPSCB        ADDR OF PSCB                          00060\n         USING PSCB,R9                                                  00061\n         LA    R1,PPLUPT          PROVIDE LIST FOR PARSE                00062\n         LINK  EP=IKJPARS         PARSE COMMAND                         00063\n         AUTH  ON                 GET  AUTHORIZATION                    00064\n         MODESET KEY=ZERO                                               00065\n         L     R10,PPLANSR        GET POINTER TO ANSWER AREA            00066\n         USING IKJPARMD,R10       PROVIDE ADDRESSABILITY                00067\n         SPACE                                                          00068\nEXIT010  EQU   *                                                        00069\n         B     ENTRY020                GO PROCESS USER-ID OPERANDS      00070\n         EJECT                                                          00071\n*---------------------------------------------------------------------* 00072\n*                                                                       00073\n*        PROCESS USER-ID OPERANDS                                       00074\n*                                                                       00075\n*---------------------------------------------------------------------* 00076\n         SPACE                                                          00077\nENTRY020 DS    0H                                                       00078\n         LH    R15,USERID         GET NUMBER OF SPECIFIED KEYWORD       00079\n         SLL   R15,2              MULTIPLY BY FOUR                      00080\n         B     *+4(R15)           TO PROCESSING ROUTINE                 00081\n         B     EXIT020            NOT SPECIFIED, SKIP IT                00082\n         B     BBB020             RESET SPECIFIED, GO TO IT             00083\n         B     AAA020             PROCESS NEW USERID                    00084\n         B     EEE020             PROCESS LISTID                        00085\n         B     EEE020             PROCESS LISTID                        00086\n         SPACE                                                          00087\nAAA020   EQU   *                                                        00088\n         L     R1,UID             ADDRESS OF NEW USERID                 00089\n         LH    R3,UID+4           GET SIZE OF ID                        00090\n         B     DDD020             TO COMMON ROUTINE                     00091\n         SPACE                                                          00092\nBBB020   EQU   *                                                        00093\n         L     R3,16              ADDR OF CVT                           00094\n         L     R3,0(R3)           ADDR OF OLD/NEW PTRS                  00095\n         L     R3,12(R3)          ADDR OF CURRENT ASCB                  00096\n         L     R1,176(R3)         ADDR OF REAL USER-ID                  00097\n         LR    R3,R1                                                    00098\n         MVC   PSCBUSER,BLANKS                                          00099\n         LA    R15,7              MAX SIZE OF USERID                    00100\n         SPACE                                                          00101\nLOOP020  EQU   *                                                        00102\n         CLI   0(R3),C' '         END OF ID ?                           00103\n         BE    CCC020             YES - OK                              00104\n         CLI   0(R3),X'00'        END OF ID ?                           00105\n         BE    CCC020             YES - OK                              00106\n         LA    R3,1(R3)           BUMP                                  00107\n         BCT   R15,LOOP020        CHECK ALL BYTES                       00108\n         SPACE                                                          00109\nCCC020   EQU   *                                                        00110\n         SR    R3,R1              LENGTH OF USERID                      00111\n         SPACE                                                          00112\nDDD020   EQU   *                                                        00113\n         TM    PSCBATR1,PSCBACCT  DOES USER HAVE ACCOUNT AUTHORITY?     00114\n         BZ    ERR020             NO, INFORM USER                       00115\n         STC   R3,PSCBUSRL        STORE LENGTH                          00116\n         BCTR  R3,R0              DECR FOR EX                           00117\n         EX    R3,MVCID1          MOVE NEW USERID INTO PSCB             00118\n         B     EXIT020            EXIT FROM USER-ID ROUTINE             00119\nEEE020   EQU   *                                                        00120\n         MVC   MSG0202+20(8),BLANKS    CLEAR THE USERID FIELD           00121\n         SR    R3,R3                   CLEAR LENGTH OF OLD USERID       00122\n         IC    R3,PSCBUSRL             GET LENGTH OF USERID FIELD       00123\n         BCTR  R3,0                    REDUCE FOR EX MVC                00124\n         EX    R3,MVCID2               MOVE IN USERID TO MESSAGE        00125\n         TPUT  MSG0202,60              MESSAGE TO USER                  00126\n         B     EXIT020                 EXIT FROM LIST USER-ID RTN       00127\n         SPACE                                                          00128\nERR020   EQU   *                                                        00129\n         TPUT  MSG0201,60              ISSUE ERROR MESSAGE              00130\n         B     EXIT020                 EXIT FROM USER-ID ROUTINE        00131\n         SPACE                                                          00132\nEXIT020  EQU   *                                                        00133\n         B     ENTRY030                GO DO NEXT CHECK                 00134\n         SPACE                                                          00135\nMVCID1   MVC   PSCBUSER(0),0(R1)                                        00136\nMVCID2   MVC   MSG0202+20(0),PSCBUSER                                   00137\nMSG0201  DC    CL60'USER-ID CHANGE NOT AUTHORIZED'                      00138\nMSG0202  DC    CL60'CURRENT USERID IS -          '                      00139\n         EJECT                                                          00140\n*---------------------------------------------------------------------* 00141\n*                                                                       00142\n*        PROCESS UNIT OPERANDS                                          00143\n*                                                                       00144\n*---------------------------------------------------------------------* 00145\n         SPACE                                                          00146\nENTRY030 DS    0H                                                       00147\n         LH    R15,UNIT           GET NUMBER OF SPECIFIED KEYWORD       00148\n         SLL   R15,2              MULTIPLY BY FOUR                      00149\n         B     *+4(R15)           TO PROCESSING ROUTINE                 00150\n         B     EXIT030            NOT SPECIFIED, SKIP IT                00151\n         B     BBB030             NOUNIT SPECIFIED, GO TO IT            00152\n         B     AAA030             UNIT SPECIFIED -- GO FOR IT           00153\n         B     CCC030             LISTUNIT SPECIFIED                    00154\n         B     CCC030             LUNIT SPECIFIED                       00155\n         SPACE                                                          00156\nAAA030   EQU   *                                                        00157\n         L     R1,UNITN           UNIT SPECIFIED, DO IT                 00158\n         LH    R2,UNITN+4         GET SIZE OF NAME                      00159\n         BCTR  R2,R0              DECR FOR EX                           00160\n         EX    R2,MVCUNIT         MOVE UNIT                             00161\n         B     EXIT030                 EXIT FROM UNIT                   00162\n         SPACE                                                          00163\nBBB030   EQU   *                                                        00164\n         MVC   PSCBGPNM,BLANKS         CLEAR OUT UNIT NAME              00165\n         B     EXIT030                 EXIT FROM NOUNIT                 00166\n         SPACE                                                          00167\nCCC030   EQU   *                                                        00168\n         MVC   MSG0301+29(8),PSCBGPNM  MOVEIN THE UNIT                  00169\n         TPUT  MSG0301,60              ISSUE MESSAGE TO USER            00170\n         B     EXIT030                 EXIT FROM LISTUNIT               00171\n         SPACE                                                          00172\nEXIT030  DS    0H                                                       00173\n         B     ENTRY040                GO CHECK DEST OPERANDS           00174\n         SPACE                                                          00175\nMVCUNIT  MVC   PSCBGPNM(0),0(R1)                                        00176\nMSG0301  DC    CL60'CURRENT ALLOCATION UNIT IS -          '             00177\n         EJECT                                                          00178\n*---------------------------------------------------------------------* 00179\n*                                                                       00180\n*        PROCESS DEST OPERANDS                                          00181\n*                                                                       00182\n*---------------------------------------------------------------------* 00183\nENTRY040 DS    0H                                                       00184\n         LH    R15,DEST           GET NUMBER OF SPECIFIED KEYWORD       00185\n         SLL   R15,2              MULTIPLY BY FOUR                      00186\n         B     *+4(R15)           TO PROCESSING ROUTINE                 00187\n         B     EXIT040            NOT SPECIFIED, SKIP IT                00188\n         B     BBB040             NODEST SPECIFIED, GO TO IT            00189\n         B     AAA040             DEST SPECIFIED -- GO FOR IT           00190\n         B     CCC040             LISTDEST SPECIFIED                    00191\n         B     CCC040             LDEST SPECIFIED                       00192\n         SPACE                                                          00193\nAAA040   EQU   *                                                        00194\n         MVC   PSCBDEST,BLANKS                                          00195\n         L     R1,DESTN           DEST SPECIFIED, DO IT                 00196\n         LH    R2,DESTN+4         GET SIZE OF DEST NAME                 00197\n         BCTR  R2,R0              DECR FOR EX                           00198\n         EX    R2,MVCDEST         MOVE DEST                             00199\n         B     EXIT040                                                  00200\n         SPACE                                                          00201\nBBB040   EQU   *                                                        00202\n         MVC   PSCBDEST,BLANKS                                          00203\n         B     EXIT040                 EXIT FROM LIST                   00204\n         SPACE                                                          00205\nCCC040   EQU   *                                                        00206\n         MVC   MSG0401+32(8),PSCBDEST  MOVE IN DESTINATION              00207\n         TPUT  MSG0401,60              ISSUE MESSAGE TO USER            00208\n         B     EXIT040                 EXIT FROM LIST                   00209\n         SPACE                                                          00210\nEXIT040  DS    0H                                                       00211\n         B     ENTRY050                                                 00212\n         SPACE                                                          00213\nMVCDEST  MVC   PSCBDEST(0),0(R1)                                        00214\nMSG0401  DC    CL60'CURRENT OUTPUT DESTINATION IS -          '          00215\n         EJECT                                                          00216\n*---------------------------------------------------------------------* 00217\n*                                                                       00218\n*        PROCESS JCL OPERANDS                                           00219\n*                                                                       00220\n*---------------------------------------------------------------------* 00221\n         SPACE                                                          00222\nENTRY050 DS    0H                                                       00223\n         LH    R15,JCL            GET NUMBER OF SPECIFIED KEYWORD       00224\n         SLL   R15,2              MULTIPLY BY FOUR                      00225\n         B     *+4(R15)           TO PROCESSING ROUTINE                 00226\n         B     EXIT050            NOT SPECIFIED, SKIP IT        0       00227\n         B     AAA050             NOJCL SPECIFIED, GO TO IT      1      00228\n         OI    PSCBATR1,PSCBJCL   ALLOW JCL                      2      00229\n         B     EXIT050                                                  00230\n         SPACE                                                          00231\nAAA050   EQU   *                                                        00232\n         NI    PSCBATR1,X'FF'-PSCBJCL  RESET JCL                        00233\n         SPACE                                                          00234\nEXIT050  EQU   *                                                        00235\n         B     ENTRY060                                                 00236\n         EJECT                                                          00237\n*---------------------------------------------------------------------* 00238\n*                                                                       00239\n*        PROCESS MOUNT OPERANDS                                         00240\n*                                                                       00241\n*---------------------------------------------------------------------* 00242\n         SPACE                                                          00243\nENTRY060 DS    0H                                                       00244\n         LH    R15,MOUNT          GET NUMBER OF SPECIFIED KEYWORD       00245\n         SLL   R15,2              MULTIPLY BY FOUR                      00246\n         B     *+4(R15)           TO PROCESSING ROUTINE                 00247\n         B     EXIT060            NOT SPECIFIED, SKIP IT          0     00248\n         B     AAA060             NOMOUNT SPECIFIED, GO TO IT        1  00249\n         OI    PSCBATR1,PSCBVMNT  ALLOW MOUNT                     2     00250\n         B     EXIT060                                                  00251\n         SPACE                                                          00252\nAAA060   EQU   *                                                        00253\n         NI    PSCBATR1,X'FF'-PSCBVMNT  RESET MOUNT                     00254\n         SPACE                                                          00255\nEXIT060  DS    0H                                                       00256\n         B     ENTRY070                                                 00257\n         EJECT                                                          00258\n*---------------------------------------------------------------------* 00259\n*                                                                       00260\n*        PROCESS PASSWORD OPERANDS                                      00261\n*                                                                       00262\n*---------------------------------------------------------------------* 00263\n         SPACE                                                          00264\nENTRY070 DS    0H                                                       00265\n         L     R1,16          GET CVT POINTER                           00266\n         L     R1,0(R1)       OLD/NEW POINTER                           00267\n         L     R1,4(R1)       OUR TCB POINTER                           00268\n         L     R2,180(R1)     JSCB POINTER                              00269\n         USING IEZJSCB,R2                                               00270\n         OI    JSCBSWT1,JSCBPASS  NO PASSWORD CHECKING                  00271\n         LH    R15,PASS           GET NUMBER OF SPECIFIED KEYWORD       00272\n         SLL   R15,2              MULTIPLY BY FOUR                      00273\n         B     *+4(R15)           TO PROCESSING ROUTINE                 00274\n         B     EXIT070            NOT SPECIFIED, SKIP IT          0     00275\n         B     AAA070             NOPASS SPECIFIED, GO TO IT      1     00276\n         NI    JSCBSWT1,X'FF'-JSCBPASS  NO PASSWORD CHECKING      2     00277\n         B     EXIT070                                                  00278\n         SPACE                                                          00279\nAAA070   EQU   *                                                        00280\n         OI    JSCBSWT1,JSCBPASS  ALLOW PASSWORD CHECKING               00281\n         SPACE                                                          00282\nEXIT070  DS    0H                                                       00283\n         B     RETURN                                                   00284\n         DROP  R2                                                       00285\n         EJECT                                                          00286\n*---------------------------------------------------------------------* 00287\n         SPACE                                                          00288\nRETURN   DS    0H                                                       00289\n         MODESET KEY=ZERO                                               00290\n         AUTH  OFF                GET  RID OF AUTHORIZATION             00291\n         L     R15,RC             RESTORE RETURN CODE                   00292\n         FINISH RC=(R15)                                                00293\n         SPACE 2                                                        00294\n*---------------------------------------------------------------------* 00295\nBLANKS   DC    81C' '             BLANK FOLLOWED BY 80 BYTE BUFFER      00296\nECB      DC    F'0'               DUMB ECB FOR PARSE                    00297\nPPLANSR  DC    F'0'               PARSE ANSWER AREA POINTER             00298\nRC       DC    F'0'               RETURN CODE SAVE AREA                 00299\n*---------------------------------------------------------------------* 00300\nPPLUPT   DC    F'0'               USER PROFILE TABLE POINTER            00301\nPPLECT   DC    F'0'               ENVIRONMENT CONTROL TABLE             00302\nPPLECB   DC    A(ECB)             ECB POINTER                           00303\nPPLPCL   DC    A(IKJPCL)          ADDRESS OF IKJPARM                    00304\nPPLANS   DC    A(PPLANSR)         PLACE TO PUT ANSWER                   00305\nPPLCBUF  DC    F'0'               POINTER TO COMMAND BUFFER             00306\n*---------------------------------------------------------------------* 00307\n         SPACE 2                                                        00308\n         LTORG                                                          00309\n         EJECT                                                          00310\nIKJPCL   IKJPARM                                                        00311\nUSERID   IKJKEYWD                                                       00312\n         IKJNAME 'RESET'                                                00313\n         IKJNAME 'ID',SUBFLD=IDSUBF                                     00314\n         IKJNAME 'LISTID'                                               00315\n         IKJNAME 'LID'                                                  00316\nUNIT     IKJKEYWD                                                       00317\n         IKJNAME 'NOUNIT'                                               00318\n         IKJNAME 'UNIT',SUBFLD=UNITSUBF                                 00319\n         IKJNAME 'LISTUNIT'                                             00320\n         IKJNAME 'LUNIT'                                                00321\nDEST     IKJKEYWD                                                       00322\n         IKJNAME 'NODEST'                                               00323\n         IKJNAME 'DEST',SUBFLD=DESTSUBF                                 00324\n         IKJNAME 'LISTDEST'                                             00325\n         IKJNAME 'LDEST'                                                00326\nJCL      IKJKEYWD                                                       00327\n         IKJNAME 'NOJCL'                                                00328\n         IKJNAME 'JCL'                                                  00329\nMOUNT    IKJKEYWD                                                       00330\n         IKJNAME 'NOMOUNT'                                              00331\n         IKJNAME 'MOUNT'                                                00332\nPASS     IKJKEYWD                                                       00333\n         IKJNAME 'NOPASS'                                               00334\n         IKJNAME 'PASS'                                                 00335\nIDSUBF   IKJSUBF                                                        00336\nUID      IKJPOSIT  USERID,PROMPT='NEW USER-ID TO BE USED'               00337\nUNITSUBF IKJSUBF                                                        00338\nUNITN    IKJIDENT  'UNITNAME',MAXLNTH=8,FIRST=ALPHANUM,OTHER=ALPHANUM, X00339\n               PROMPT='UNIT NAME FOR DEFAULT DEVICE ALLOCATIONS'        00340\nDESTSUBF IKJSUBF                                                        00341\nDESTN    IKJIDENT  'DEST',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM,        X00342\n               PROMPT='DESTID FOR DEFAULT SYSOUT/JOB ROUTING'           00343\n         IKJENDP                                                        00344\n         SPACE                                                          00345\n         PRINT OFF                                                      00346\n         IKJCPPL                                                        00347\n         IKJPSCB                                                        00348\n         IEZJSCB                                                        00349\n         SPACE                                                          00350\n         END   UADS                                                     00351\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UADSHELP": {"ttr": 7940, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x007\\x007\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 55, "newlines": 55, "modlines": 0, "user": "WSRCC"}, "text": ")F FUNCTION -\n         THIS TSO COMMAND PROCESSOR WILL ALLOW THOSE USERS WITH\n         OPERATOR ABILITY TO DYNAMICALLY CHANGE THEIR UADS ENTRIES IN\n         THE PSCB.  ONCE CHANGED, IT WILL REMAIN IN EFFECT ACCROSS A\n         RELOGON (UNLESS USING ACF2 IN NOUADS MODE).\n)X SYNTAX -\n         UADS  ID(????)/RESET LISTID/LID DEST(????)/NODEST\n         LISTDEST/LDEST UNIT(????)/NOUNIT LISTUNIT/LUNIT JCL/NOJCL\n         MOUNT/NOMOUNT PASS/NOPASS\n)O OPERANDS -\n))DEST              CHANGE THE CURRENT DEFAULT DESTINATION.\n\n))ID                CHANGE CURRENT USER-ID IN THE PSCB TO ANOTHER\n                    VALUE.  THIS OPERAND IS ALLOWED ONLY FOR USERS\n                    WITH ACCOUNT AUTHORITY, ONE MUST INSURE THAT PRIOR\n                    TO LOGOFF THE ID IS RESET.  IF NOT RESET, THE NEW\n                    ID SET WILL BE UPDATED WITH THE UADS ENTRY FOR THE\n                    ACTIVE USER.\n\n))JCL               ALLOW BATCH JOB SUBMISSIONS.\n\n))LDEST             LIST CURRENT DEFAULT DESTINATION.  LDEST IS AN\n                    ALIAS FOR LISTDEST.\n\n))LID               LIST THE CURRENT UADS ID FROM PSCB.  LID IS AN\n                    ALIAS FOR LISTID.\n\n))LISTDEST          LIST CURRENT DEFAULT DESTINATION.\n\n))LISTID            LIST THE CURRENT UADS ID FROM PSCB.\n\n))LISTUNIT          LIST CURRENT DEFAULT UNIT ASSIGNMENT.\n\n))LUNIT             LIST CURRENT DEFAULT UNIT ASSIGNMENT.  LUNIT IS AN\n                    ALIAS FOR LISTUNIT.\n\n))MOUNT             ALLOW FOREGROUND TAPE/DISK MOUNT CAPABILITIES.\n\n))NODEST            NULLIFY THE CURRENT DEFAULT DESTINATION\n\n))NOJCL             DISALLOW BATCH JOB SUBMISSIONS.\n\n))NOMOUNT           DISALLOW FOREGROUND TAPE/DISK MOUNT CAPABILITIES.\n\n))NOPASS            FORCE DATASET PASSWORD CHECKING.\n\n))NOUNIT            NULLIFY THE CURRENT DEFAULT DYNAMIC ALLOCATION\n                    UNITNAME.\n\n))PASS              BYPASS ALL DATASET PASSWORD CHECKING.\n\n))RESET             RESET THE USER-ID IN THE PSCB TO ORIGINAL.\n\n))UNIT              CHANGE THE CURRENT DEFAULT DYNAMIC ALLOCATION\n                    UNITNAME.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VOLS": {"ttr": 7942, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01E\\x00&\\x00\\x98\\x08\\x9f\\x01\\x083o\\x17Y\\x03t\\x02\\x7f\\x00\\x00\\xe4\\xf0\\xf1\\xf4\\xf7\\xf0\\xf6@@@'", "ispf": {"version": "01.69", "flags": 0, "createdate": "1998-03-30T00:00:00", "modifydate": "2008-12-01T17:59:26", "lines": 884, "newlines": 639, "modlines": 0, "user": "U014706"}, "text": "//U014706V JOB  (57700),G.B.HAMPTON,\n//  REGION=512M,MEMLIMIT=2G,\n//  CLASS=X,\n//  NOTIFY=U014706,MSGCLASS=T\n//*\n/*JOBPARM S=*\n//*\n//*  FROM CBT MVS MODS TAPE FILE 360 VERSION 04-21-85 VERSION # 247\n//*\n//*LASMCL  EXEC HLASMCL,PARM.C='RENT,TERM,TEST',\n//*           PARM.L='TEST',COND.L=(4,LT)\n//HLASMCL  EXEC HLASMCL,PARM.C='RENT,TERM',\n//            COND.L=(4,LT)\n//C.SYSLIB DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//         DD  DISP=SHR,DSN=SYSCB1.CBT.FILE360.PDS                 #10\n//C.SYSTERM DD SYSOUT=*\n//C.SYSIN  DD  *\n         TITLE 'WSRCC - VOLS TSO C.P.  --  VERSION 6'\n***********************************************************************\n*  THIS PROGRAM (COMMAND) WILL LIST THE AVAILABLE FREE SPACE ON ALL   *\n*  OR SELECTED ONLINE DISK PACKS.  AS IT IS HERE, IT WILL NOT WORK    *\n*  UNDER MVS/XA.  THIS CP WAS ORIGIONALLY FROM CAMBRIDGE SYSTEMS      *\n*  GROUP AND WAS DISTRIBUTED IN AN \"AS IS\" FORM WITH A VERY EARLY     *\n*  VERSION OF THE ASM2 PACKAGE.  THIS CP CONTAINED NO COPYRITE NOTICE *\n*  IN ANY FORM .  I HAVE RECEIVED PERMISSION FROM CSG TO PUT THIS ON  *\n*  THE CBT TAPE.  - J.MARTIN  02/15/85                                *\n***********************************************************************\n*--------------MODIFICATION.LOG---------------------------------------*\n*  PROGRAMMER  T  DATE  T  SUMMARY OF CHANGES MADE TO THIS PROGRAM    *\n*--------------+--------+---------------------------------------------*\n* TOM JARVIS   T01/21/80T 1. CHANGED CONTROL UNIT NAME CHECK SO THAT  *\n*              T        T    ALL DISK VOLUMES ARE LISTED.             *\n* JOE MARTIN   T03/29/82T 2. ADDED THE UNIT ATTR DISPLAY FOR EACH     *\n*              T        T    VOLUME. DISPLAY IS STOR, PRIV OR PUBL.   *\n*              T        T    ADDED THE BEGIN AND FINISH MACROS.       *\n*              T        T    MOVED MOST OF WORKAREA TO DSECT.         *\n*              T        T                                             *\n* JOE MARTIN   T05/20/82T 3. ADDED SOME SELECTION TO THE VOLS COMMAND.*\n*              T        T    FORMAT IS \"TYPE(....) (DEVT AND ATTR)    *\n*              T        T    WHERE THE \"....\" IS DEVICE TYPE OR       *\n*              T        T    OR DEVICE ATTRIBUTE. EXAMPLE:            *\n*              T        T    VOLS TYPE(3350) -- SELECT ONLY 3350'S    *\n*              T        T    VOLS TYPE(PRIV) -- SELECT PRIVATE VOLS.  *\n* JOE MARTIN   T11/02/82T 4. ADDED NUMBER OF OPEN DCB'S TO THE        *\n*              T        T    OUTPUT DISPLAY FOR THE VOLS COMMAND.     *\n* JOE MARTIN   T03/21/83T 5. ADDED SELECTION FOR VOLSER OR UCB ADDR   *\n*              T        T    ADDED PUTLINE SUPPORT REPLACING TPUT.    *\n*              T        T    FIXED PROBLEM WITH UCB TABLE LOOKUP RTN. *\n* JOE MARTIN   T03/25/83T 6. ADDED CLEAR KEYWORD TO CLEAR THE SCREEN  *\n*              T        T    WHEN RUNNING UNDER VTAM.                 *\n*              T        T                                             *\n* M. KARLIN    T05/07/90T 7. USE CVT UCB SCAN ROUTINE                 *\n* S. GOLOB     T08/14/92T 8. TAUGHT VOLS ABOUT 3390'S AND \"UNTAUGHT\"  *\n*              T        T    HIM ABOUT 2314'S.                        *\n* G. GORAB     T08/21/95T 9. CHANGED UCB LOOKUP ROUTINE FOR MVS 5.1   *\n*              T        T    USING UCBSCAN FROM S. GOLOB/R. BLUMLEIN  *\n*              T        T    CHANGES ARE MARKED @GTG                  *\n* G.B.HAMPTON  T03/26/98T10. CHANGED UCB TO USE UCBSCAN MACRO TO GET  *\n*              T        T    PRINTABLE UCBNAME TO BE ABLE TO SUPPORT  *\n*              T        T    4 CHARACTER NAMES                        *\n*              T        T    ALSO REMOVED R11 AS BASE FOR UCBDEV      *\n*              T        T      IT DID NOT LOOK LIKE ITS NEEDED AND    *\n*              T        T      IT PRODUCED A WARNING FROM HI-LVL ASM  *\n*              T        T    NOTE: 3 DIGIT UCB SYSTEMS (BELOW SP4)    *\n*              T        T          RETURN A SPACE AS 1ST CHAR OF 4    *\n* G.B.HAMPTON  T11/26/08T11. UPDATED TO HANDLE OVER 9999 CYLS/DEVICE  *\n*              T        T    USING THE LSPACE MACRO                   *\n*              T        T    OUTPUT KEYWORD PARAMETER ALLOWS          *\n*              T        T    EITHER OUT(30) OR OUT(40) FOR OUTPUT SIZE*\n*              T        T    OUT(30) PRESENTS OLDER VERSION OUTPUT    *\n*              T        T      (FOR COMPATIBILITY - SHOWS 9999 FOR    *\n*              T        T       VALUES > 9999 AS OLD VERSION DOES)    *\n*              T        T    OUT(40) IS THE UPDATED LINE (40 BYTES)   *\n*              T        T      SOME FIELDS ARE BIGGER, SOME SHIFTED   *\n*              T        T    DEFAULT IS SET BY OUTPUT_SIZE VARIABLE   *\n*              T        T      FOR UPDATED VERSION DEFAULT, USE 40    *\n*              T        T      FOR OLDER VERSION DEFAULT CHANGE TO 30 *\n*              T        T                                             *\n*---------------------------------------------------------------------*\n*                                                                   #11\n&OUTPUT_SIZE SETA 40   ---->>> USE '30' OR '40' <<<----             #11\n*                                                                   #11\nVOLS     BEGIN SAVE=(SAVEAREA,@SL,17),AUTHOR=CSG,VER=011       SBG  #2\n         LR    R11,R1                  POINT AT CPPL.               #3\n         USING CPPL,R11\n         ST    R11,VOLCPPL             SAVE CPPL ADDRESS            #3\n         LA    R7,VIOPL                POINT AT IOPL                #5\n         USING IOPL,R7                 SET UP ADDRESSIBILITY - IOPL #5\n         LA    R9,VOLPPL               POINT TO PPL                 #3\n         USING PPL,R9                  SET UP ADDRESSABILITY TO PPL #3\n         L     R10,CPPLPSCB            POINT AT PSCB.               #3\n         ST    R10,VOLPSCB             STORE BUFFER ADDRESS IN PPL  #3\n         L     R10,CPPLCBUF            COMMAND BUFFER               #3\n         ST    R10,PPLCBUF             STORE BUFFER ADDRESS IN PPL  #3\n         L     R10,CPPLUPT             USER PROFILE TABLE           #3\n         ST    R10,PPLUPT              STORE UPT IN PPL             #3\n         ST    R10,IOPLUPT             STORE UPT IN IOPL            #5\n         L     R10,CPPLECT             ENVIRONMENT CONTROL TABLE    #3\n         ST    R10,PPLECT              STORE ECT IN PPL             #3\n         ST    R10,IOPLECT             STORE ECT IN IOPL            #5\n         L     R10,VOLPCLP             PARSE CONTROL LIST           #3\n         ST    R10,PPLPCL              STORE PCL IN PPL             #3\n         LA    R10,VOLECB              EVENT CONTROL BLOCK          #3\n         ST    R10,PPLECB              STORE ECB IN PPL             #3\n         ST    R10,IOPLECB             STORE ECB IN IOPL            #5\n         LA    R10,VOLANS              ANSWER AREA                  #3\n         ST    R10,PPLANS              STORE ANSWER ADDRESS IN PPL  #3\n         LA    R10,VOLUWA              USER WORK AREA               #3\n         ST    R10,PPLUWA              STORE WORK ADDRESS IN PPL    #3\n         DROP  R7,R9,R11                                            #5\n         MVI   LINEFLG,C'N'            INITIALIZE DEVICE SELECT FLG #5\n         LR    R1,R9                   POINTER TO PPL IN R1         #3\n         CALLTSSR EP=IKJPARS           CALL PARSER                  #3\n         LTR   R15,R15                 CHECK FOR ZERO PARSE RETURN  #3\n         BNZ   FINISH                  GO AWAY UPSET                #3\n         L     R8,VOLANS               LOAD ANSWER AREA FOR USING   #3\n         USING PCLDSECT,R8             SET UP ADDRESSABILITY TO ANS #3\n         MVI   SCRNFLG,C'N'            SET NOT-SCREEN FLAG          #6\n         SR    R7,R7                   CLEAR R7 FOR POINTER         #6\n         LH    R7,VOLCLEAR             GET POINTER VALUE            #6\n         LTR   R7,R7                   IF PARM NOT PRESENT          #6\n         BZ    CHKVOLTP                   THEN CONTINUE             #6\n         GTSIZE ,                      GET SCREEN DISPLAY SIZE      #6\n         LTR   R0,R0                   IF DISPLAY TERMINAL          #6\n         BZ    CHKVOLTP                   THEN CONTINUE             #6\n         MVI   SCRNFLG,C'Y'            SET SCREEN FLAG              #6\n         BCTR  R0,0                    REDUCE FOR THE \"***\"         #6\n         ST    R0,MAXLINES             SAVE SCREEN DISPLAY SIZE     #6\n***      STFSMODE ON,INITIAL=YES       CLEAR SCREEN                 #6\n***      STFSMODE OFF                  CLEAR SCREEN                 #6\nCHKVOLTP EQU   *\n         L     R7,VOLTYPE              POINT AT PARAMETER           #3\n         LH    R6,VOLTYPE+4            GET LENGTH OF PARAMETER      #3\n         BCTR  R6,0                    REDUCE R6 FOR EX OF CLC      #3\n         EX    R6,CLC#ALL              CHECK FOR \"ALL\"              #3\n         BE    SET#ALL                 YES = GO SETUP FOR \"ALL\"     #3\n         EX    R6,CLC#PRIV             CHECK FOR \"PRIVATE\"          #3\n         BE    SET#PRIV                YES = GO SETUP FOR \"PRIVATE\" #3\n         EX    R6,CLC#PUBL             CHECK FOR \"PUBLIC\"           #3\n         BE    SET#PUBL                YES = GO SETUP FOR \"PUBLIC\"  #3\n         EX    R6,CLC#STOR             CHECK FOR \"STORAGE\"          #3\n         BE    SET#STOR                YES = GO SETUP FOR \"STORAGE\" #3\n         EX    R6,CLC#3380             CHECK FOR \"3380\"             #3\n         BE    SET#3380                YES = GO SETUP FOR \"3380\"    #3\n         EX    R6,CLC#3350             CHECK FOR \"3350\"             #3\n         BE    SET#3350                YES = GO SETUP FOR \"3350\"    #3\n         EX    R6,CLC#3330             CHECK FOR \"3330\"             #3\n         BE    SET#3330                YES = GO SETUP FOR \"3330\"    #3\n         EX    R6,CLC#3311             CHECK FOR \"3311\"             #3\n         BE    SET#3311                YES = GO SETUP FOR \"3311\"    #3\n         EX    R6,CLC#3390             CHECK FOR \"3390\"             #3\n         BE    SET#3390                YES = GO SETUP FOR \"3390\"    #3\n         PUTLINE PARM=LINEOUT,OUTPUT=(PBP1,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PBP2,DATA),MF=(E,VIOPL)       #5\n*        TPUT  BADPARM1,LBPRM1         TELL USER OF BAD PARM VALUE  #3\n*        TPUT  BADPARM2,LBPRM2         TELL USER OF BAD PARM VALUE  #3\n         LA    R15,8                   SET RETRUN CODE              #3\n         B     FINISH                  GO AWAY WITH NO VOLS OUTPUT  #3\n         SPACE\nCLC#ALL  CLC   ADALL(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#PRIV CLC   APRIV(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#PUBL CLC   APUBL(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#STOR CLC   ASTOR(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3380 CLC   D3380(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3350 CLC   D3350(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3330 CLC   D3330(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3311 CLC   D3311(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3390 CLC   D3390(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\n         SPACE\nSET#ALL  EQU   *                                                    #3\n         MVI   SELFLAGS,ALLDEVT        SET SELECTION BITS           #3\n         OI    SELFLAGS,ALLATTR        SET SELECTION BITS           #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#PRIV EQU   *                                                    #3\n         MVI   SELFLAGS,ATTRPRIV       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLDEVT        SET BITS FOR DEVICE TYPES    #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#PUBL EQU   *                                                    #3\n         MVI   SELFLAGS,ATTRPUBL       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLDEVT        SET BITS FOR DEVICE TYPES    #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#STOR EQU   *                                                    #3\n         MVI   SELFLAGS,ATTRSTOR       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLDEVT        SET BITS FOR DEVICE TYPES    #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3380 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3380       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3350 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3350       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3330 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3330       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3311 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3311       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3390 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3390       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\n         EJECT\nTPUTH1   EQU   *\n         MVI   SERFLG,C'N'         SET VOLSER FLAG                  #5\n         L     R6,VOLNAME              POINT AT PARM                #5\n         LTR   R6,R6                   IF PARM ADDRESS IS ZERO      #5\n         BZ    TPUTH2                     THEN SKIP MOVE OF VOLSER  #5\n         LH    R7,VOLNAME+4            GET LENGTH OF PARM           #5\n         LTR   R7,R7                   IF LENGTH IS ZERO            #5\n         BZ    TPTH2                      THEN SKIP BCTR            #5\n         BCTR  R7,0                    REDUCE FOR EX OF CLC         #5\nTPTH2    EQU   *\n         STH   R7,SERLEN               SAVE SERIAL NUMBER LENGTH    #5\n         MVI   SERFLG,C'Y'         SET VOLSER FLAG                  #5\n         EX    R7,SERMOVE              MOVE VOLSER TO HOLD AREA     #5\nTPUTH2   EQU   *\n         MVI   UCBFLG,C'N'             SET UCBADR FLAG              #5\n         L     R6,VOLADDR              POINT AT PARM                #5\n         LTR   R6,R6                   IF PARM ADDRESS IS ZERO      #5\n         BZ    TPUTH3                     THEN SKIP MOVE OF UCBADR  #5\n         LH    R7,VOLADDR+4            GET LENGTH OF PARM           #5\n         LTR   R7,R7                   IF LENGTH IS ZERO            #5\n         BZ    TPTH3                      THEN SKIP BCTR            #5\n         BCTR  R7,0                    REDUCE FOR EX OF CLC         #5\nTPTH3    EQU   *\n         STH   R7,UCBLEN               SAVE UCB ADDRESS LENGTH      #5\n         MVI   UCBFLG,C'Y'             SET UCBADR FLAG              #5\n         EX    R7,UCBMOVE              MOVE UCBADR TO HOLD AREA     #5\n         B     TPUTH3                  SKIP THE EXECUTED STUFF      #5\n         SPACE\nSERMOVE  MVC   SERVAL(0),0(R6)         MOVE IN VOL SERIAL           #5\nUCBMOVE  MVC   UCBVAL(0),0(R6)         MOVE IN UCB ADDRESS          #5\n         SPACE\nTPUTH3   EQU   *\n         SR    R9,R9                   CLEAR OUT LINE COUNTER       #6\n*                                                                  #11\n*******************************************************************#11\n*                                                                  #11\n         L     R6,OUTPUTP          A(OUTPUT PARM VALUE)            #11\n         MVC   OUTPFLAG,0(R6)      SAVE VALUE FOR USE AS FLAG      #11\n*                                                                  #11\n         CLC   OUTPFLAG,=C'30'     OUT(30)?                        #11\n         JE    HEADER30            YES, DO OLD OUTPUT FORMAT       #11\n*                                                                  #11\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH16,DATA),MF=(E,VIOPL)     #11\n*                                                                  #11\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH26,DATA),MF=(E,VIOPL)     #11\n*                                                                  #11\n         J     DID_HEADERS                                         #11\n*                                                                  #11\nHEADER30 DS    0H                                                  #11\n*                                                                  #11\n*******************************************************************#11\n*                                                                  #11\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH1,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH2,DATA),MF=(E,VIOPL)       #5\n*                                                                  #11\nDID_HEADERS DS 0H                                                  #11\n*                                                                  #11\n         LA    R9,2(0,R9)              INCRIMENT THE LINE COUNTER   #6\n*        L     R4,16             @ CVT                          @MK\n*        L     R2,40(R4)         @ UCB LOOKUP TABLE             @MK\n*CBLOOP  EQU   *                                                @MK\n*        LH    R3,0(R2)          GET UCB ADDR.                  @MK\n*        SLL   R3,16               MAKE SURE THE UCB ADDR IS    @MK\n*        SRL   R3,16               CLEAN IN THE HIGH ORDER BITS @MK\n*        LA    R2,2(R2)          BUMP TO NEXT...                @MK\n*        LTR   R3,R3               CHECK FOR NULL               @MK\n*        BZ    UCBLOOP           GET NEXT IF NULL               @MK #5\n*        CL    R3,=X'0000FFFF'   END OF TABLE?                  @MK\n*        BE    DONE              YES...                         @MK\n************************************************************\n*        SET UCB SCAN                                           @MK\n************************************************************    @MK\n         XC    WKAREA,WKAREA       CLEAR WKAREA           @MK\n         LA    R1,WKAREA             SET UP PARM LIST         @MK\n         ST    R1,PARMWA                                        @MK\n         LA    R1,DEVCLASS                                      @MK\n         ST    R1,PARMDEVT                                      @MK\n         MVI   DEVCLASS,UCB3DACC       SEARCH DIRECT ACCESS ONLY@MK\n         LA    R1,ADDRUCB                                       @MK\n         ST    R1,PARMUCB                                       @MK\n         OI    PARMUCB,X'80'           INDICATE END OF PARMLIST @MK\n************************************                            @MK\n*        SCAN UCB                                               @MK\n************************************                            @MK\n*UCBLOOP  LA    R1,PARMLIST                                     @GTG\n*         L     R5,CVTPTR                                       @GTG\n*         USING CVT,R5                                          @GTG\n*         L     R15,CVTUCBSC        SCAN SERVICE ADDRESS        @GTG\n*         DROP  R5                                              @GTG\n*         BALR  R14,R15                                         @GTG\n*         LTR   R15,R15                                         @GTG\n*         BNZ   DONE                NO MORE UCBS                @GTG\n*        USING UCBOB,R3                                         @GTG\n*        L     R3,ADDRUCB                                       @GTG\n*        TM    18(R3),X'20'      DISK?                          @GTG\n*        BZ    UCBLOOP            NO                            @GTG\n*        TM    3(R3),X'80'       ONLINE?                        @GTG\n*        BZ    UCBLOOP            NO                            @GTG\n*        TM    6(R3),X'40'       READY? (CHECK NOT READY FLAG)  @GTG\n*        BNZ   UCBLOOP            NO    WAS BCR 7,R4            @GTG\nRESCANLP DS    0H                                               @GTG\n         IOCINFO IOCTOKEN=TOKEN,MF=(E,IOCINFP)                  @GTG\n         XC    SCANWORK,SCANWORK                                @GTG\nUCBLOOP  DS    0H                                               @GTG\n         UCBSCAN UCBAREA=UCBCOPY,WORKAREA=SCANWORK,DYNAMIC=YES,        C\n               DEVCLASS=DASD,IOCTOKEN=TOKEN,MF=(E,UCBSLST),     @GTG#10X\n               DEVNCHAR=DEVNAME,RANGE=ALL                          #10\n         LTR   R15,R15           WAS A UCB RETURNED?            @GTG\n         BNZ   SCANDONE          NO, EITHER A CONFIGURATION     @GTG\n*                                CHANGE HAS OCCURRED OR NO MORE @GTG\n*                                UCB'S.                         @GTG\n*                                                               @GTG\n*        PROCESS UCB                                            @GTG\n*                                                               @GTG\n*                                                               @GTG\n         USING UCBCMSEG,R3       UCB COMMON SEGMENT DSECT       @GTG\n         LA    R3,UCBCOPY        ADDRESSABILITY TO UCBCOPY      @GTG\n         TM    UCBSTAT,UCBONLI   IS VOLUME ONLINE?              @GTG\n         BO    MOVEUCB           YES, ONLINE. MOVE IT.          @GTG\n*        TM    UCBSTAT,UCBALOC   IS VOLUME ALLOCATED?           @GTG\n*        BO    MOVEUCB           YES, ALLOCATED. MOVE IT.       @GTG\n         B     UCBLOOP           GET ANOTHER UCB                @GTG\n*        MVC   LINE(LNGT),BLANKS   MOVE IN BLANKS TO OUTPUT LINE@GTG\nMOVEUCB  MVC   LINE(LNGT),BLANKS   MOVE IN BLANKS TO OUTPUT LINE@GTG\n         MVC   ADDRT,DEVNAME       MAKE COPY OF CHARACTER UNIT NAME#10\n         TR    ADDRT,TRTAB         TR ALPHA CHARACTERS A-F TO FA-FF#10\n         CLC   ADDRTL,ADDRT        COMPARE UNIT NAMES               #1\n         BNL   UCBLOOP             GET NEXT UCB                     #5\nCHKVOL   EQU   *\n         CLI   SERFLG,C'N'         IF VOL COMPARE NOT NEEDED        #5\n         BE    CHKUCB                 THEN CHECK ADDRESS WANTED     #5\n         LH    R6,SERLEN           LOAD LENGTH OF SERIAL#-1         #5\n         EX    R6,SERCLC           COMPARE SERIAL NUMBER TO UCB     #5\n         BNE   UCBLOOP             TRY NEXT VOLSER                  #5\nCHKUCB   EQU   *\n         CLI   UCBFLG,C'N'         IF UCB COMPARE NOT NEEDED        #5\n         BE    SAVE01                 THEN CONTINUE LIKE BEFORE     #5\n         LH    R6,UCBLEN           LOAD LENGTH OF UCB ADDRESS       #5\n         CLI   DEVNAME,C' '        3 CHAR UCBS (MUST BE BELOW SP5) #10\n         BE    CHKUCB3             SKIP OVER 4 DIGIT CHECK         #10\n         EX    R6,UCBCLC           COMPARE UCB ACCRESS TO UCB       #5\n         BE    SAVE01              LOOKS GOOD                      #10\n         C     R6,=F'3'            4 DIGITS SPECIFED?              #10\n         BNL   UCBLOOP             IF SO, THAT'S IT!               #10\n         CLI   DEVNAME,C'0'        1ST CHAR NOT ZERO               #10\n         BNE   UCBLOOP             UCB ALREADY COMPARED            #10\nCHKUCB3  DS    0H                                                  #10\n         EX    R6,UCBCLC1          LETS CHECK IN CASE JUST 3 CHAR  #10\n         BNE   UCBLOOP             TRY NEXT VOLSER                  #5\n         B     SAVE01                  CONTINUE AS USUAL            #5\n         SPACE\nSERCLC   CLC   SERVAL(0),28(R3)        COMPARE REQUESTED VOL - UCB  #5\nUCBCLC   CLC   UCBVAL(0),DEVNAME       COMPARE REQUESTED ADR - UCB #10\nUCBCLC1  CLC   UCBVAL(0),DEVNAME+1     COMPARE REQUESTED ADR - UCB #10\n         SPACE\nSAVE01   EQU   *\n*DEL*    USING UCBDEV,R11                                       @GTG#10\n*DEL*    LA    R11,UCBCOPY+24                                   @GTG#10\n         MVC   VOLSER(6),UCBVOLI   MOVE THE VOLSER TO OUTPUT AREA\n         MVC   ADDR(4),DEVNAME     MOVE THE UNIT ADDRESS TO AREA   #10\n         TR    ADDR(1),TRTABF0     CHANGE A ZERO TO A BLANK!       #10\n         MVC   ADDRTL,ADDRT        KEEP TRANSLATED UNIT NAME        #1\n         EJECT\nT3380    EQU   *\n         CLI   19(R3),X'0E'        IS THIS A 3380\n         BNE   T3350               NO GO TRY 3350\n         TM    SELFLAGS,DEVT3380   CHECK FOR 3380 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3380'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3350    EQU   *\n         CLI   19(R3),X'0B'        IS THIS A 3350\n         BNE   T3311               NO GO TRY 3330-1\n         TM    SELFLAGS,DEVT3350   CHECK FOR 3350 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3350'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3311    EQU   *\n         CLI   19(R3),X'0D'        IS THIS A 3330-1\n         BNE   T3330               NO GO TRY 3330\n         TM    SELFLAGS,DEVT3311   CHECK FOR 3311 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3311'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3330    EQU   *\n         CLI   19(R3),X'09'        IS THIS A 3330\n         BNE   T3390               NO GO TRY 3390\n         TM    SELFLAGS,DEVT3330   CHECK FOR 3330 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3330'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3390    EQU   *\n         CLI   19(R3),X'0F'        IS THIS A 3390\n         BNE   UNKN                NO GO MOVE IN \"UNKN\"\n         TM    SELFLAGS,DEVT3390   CHECK FOR 3390 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3390'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nUNKN     EQU   *\n         MVC   DEVT(4),=C'UNKN'    FOUND SOMETHING THAT WE DONT KNOW\nGOTDEV   EQU   *\n*DEL#11  LR    R0,R3               GOT A GOOD ONE.\n*DEL#11  LA    R1,OUTPUT           SETUP FOR LSPCE SVC\n*DEL#11  SVC   78                  ISSUE LSPCE\n*******************************************************************#11\n*                                                                  #11\n*  CHANGE FROM DIRECT CALLS TO SVC 78 TO LSPACE MACRO CALL         #11\n*                                                                  #11\n*                                                                  #11\n         MVC    LSPACEL(LSPACELEN),LSPACELC     INIT LSPACE PARMS  #11\n*                                                                  #11\n         CLC   =C'30',OUTPFLAG     USING OUT(30)?                  #11\n         JE    LSP30               IF SO, DO \"OLD\" LSPACE          #11\n*                                                                  #11\nLSP40    DS    0H                                                  #11\n*        LSPACE MF=(E,LSPACEL),UCB=(3),SMF=NONE,EXPMSG=OUTPUT      #11\n         LSPACE MF=(E,LSPACEL),UCB=(3),SMF=NONE,EXPMSG=OUTPUT      #11\n*                                                                  #11\n         J     PAST_LSPACE                                         #11\n*                                                                  #11\nLSP30    DS    0H                                                  #11\n*        LSPACE MF=(E,LSPACEL),UCB=(3),SMF=NONE,MSG=OUTPUT         #11\n         LSPACE MF=(E,LSPACEL),UCB=(3),SMF=NONE,MSG=OUTPUT         #11\n*                                                                  #11\nPAST_LSPACE DS  0H                                                 #11\n*                                                                  #11\n*******************************************************************#11\n         MVC   ALLC(3),=C'YES'     SET ALLOCATED MSG\n         TM    3(R3),X'08'         TEST IF ALLOCATED\n         BO    CHKPRIV             BRANCH IF ALLOCATED              #2\n         MVC   ALLC(3),=C'NO '     NOT ALLOCATED\nCHKPRIV  TM    UCBSTAB,UCBBPRV     IS THIS VOL PRIVATE          @GTG\n         BZ    CHKPUBL             NO -- TRY PUBLIC                 #2\n         TM    SELFLAGS,ATTRPRIV   CHECK FOR PRIV SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   ATTR(4),=C'PRIV'    MOVE IN PUBLIC LITERAL           #2\n         B     MOVESPCE            GO DO SPACE MOVES                #2\nCHKPUBL  TM    UCBSTAB,UCBBPUB     IS THIS VOL PUBLIC           @GTG\n         BZ    CHKSTOR             NO -- TRY STORAGE                #2\n         TM    SELFLAGS,ATTRPUBL   CHECK FOR PUBL SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   ATTR(4),=C'PUBL'    MOVE IN PRIVATE LITERAL          #2\n         B     MOVESPCE            GO DO SPACE MOVES                #2\nCHKSTOR  TM    UCBSTAB,UCBBSTR     IS THIS VOL STORAGE          @GTG\n         BZ    CHKFAIL             NO -- INDICATE UNKN              #2\n         TM    SELFLAGS,ATTRSTOR   CHECK FOR STOR SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   ATTR(4),=C'STOR'    MOVE IN PRIVATE LITERAL          #2\n         B     MOVESPCE            GO DO SPACE MOVES                #2\nCHKFAIL  MVC   ATTR(4),=C'UNKN'    MOVE IN UNKNOWN LITERAL          #2\n*                                                                   #11\n********************************************************************#11\nMOVESPCE DS    0H                                                   #11\n*                                                                   #11\n         CLC   =C'30',OUTPFLAG     USING OUT(30)?                   #11\n         JE    MOVESPCE30          IF SO, DO \"OLD\" LSPACE           #11\n*                                                                   #11\n         MVC   HOLDATTR,ATTR        SAVE  ATTR                      #11\n         MVC   HOLDALLC,ALLC         AND  ALLC                      #11\n         MVI   ALLCATTR,C' '        BLANK OUT OLD FIELDS            #11\n         MVC   ALLCATTR+1(L'ALLCATTR-1),ALLCATTR                    #11\n         MVC   ATTR6(4),HOLDATTR    CORRECT THESE FIELDS            #11\n         MVC   ALLC6(3),HOLDALLC      PLACEMENTS (30 VS 40)         #11\n*                                                                   #11\n         MVC   CYL6(6),FCYL6        MOVE IN FREE CYLS               #11\n         MVC   TRK6(6),FTRK6        MOVE IN FREE TRKS               #11\n         MVC   XTNS6(6),NXTN6       MOVE IN NUM EXTENTS             #11\n         MVC   XCYL6(6),OCYL6       MOVE IN CONTIG CYLS             #11\n         MVC   XTRK6(6),OTRK6       MOVE IN CONTIG TRKS             #11\n         MVI   PLUS6,C'+'           MOVE IN THE \"+\"                 #11\n         SR    R5,R5                   CLEAR R5 FOR ICM             #11\n         MVC   DCBS6,=CL8'       0'     MOVE IN INITIAL DCB COUNT   #11\n         ICM   R5,B'0001',35(R3)       INSERT THE DCB COUNT         #11\n         BZ    DONEDCB                 GO AWAY                      #11\n         SLL   R5,25                   SHIFT LEFT TO REMOVE \"MOUNT\" #11\n         SRL   R5,25                   SHIFT RIGHT TO RESTORE COUNT #11\n         CVD   R5,DCBCNT               MAKE DCBCOUNT DECIMAL        #11\n         MVC   DCBS6(8),DCBEDT6         MOVE IN EDIT FIELD          #11\n         ED    DCBS6(8),DCBCNT+4        PUT IN THE EDITED DCB COUNT #11\n*                                                                   #11\n         J     DONEDCB             AND CONTINUE                     #11\n*                                                                   #11\nMOVESPCE30 DS    0H                                                 #11\n********************************************************************#11\n*                                                                   #11\n         MVC   CYL(4),FCYL         MOVE IN FREE CYLS\n         MVC   TRK(4),FTRK         MOVE IN FREE TRKS\n         MVC   XTNS(4),NXTN        MOVE IN NUM EXTENTS\n         MVC   XCYL(4),OCYL        MOVE IN CONTIG CYLS\n         MVC   XTRK(4),OTRK        MOVE IN CONTIG TRKS\n         MVI   PLUS,C'+'           MOVE IN THE \"+\"                  #2\n         SR    R5,R5                   CLEAR R5 FOR ICM             #4\n         MVC   DCBS,=CL6'     0'       MOVE IN INITIAL DCB COUNT    #4\n         ICM   R5,B'0001',35(R3)       INSERT THE DCB COUNT         #4\n         BZ    DONEDCB                 GO AWAY                      #4\n         SLL   R5,25                   SHIFT LEFT TO REMOVE \"MOUNT\" #4\n         SRL   R5,25                   SHIFT RIGHT TO RESTORE COUNT #4\n         CVD   R5,DCBCNT               MAKE DCBCOUNT DECIMAL        #4\n         MVC   DCBS(6),DCBEDT          MOVE IN EDIT FIELD           #4\n         ED    DCBS(6),DCBCNT+5        PUT IN THE EDITED DCB COUNT  #4\n         SPACE\nDONEDCB  EQU   *                                                    #4\n         CLI   SCRNFLG,C'N'            IF THIS IS NOT-SCREEN MODE   #6\n         BE    SHOWLINE                   THEN CONTINUE THIS CODE   #6\n         C     R9,MAXLINES             IF LINES EXCEEDED            #6\n         BL    SHOWLINE                   THEN DISPLAY HEADING      #6\n         SR    R9,R9                   CLEAR OUT LINE COUNTER       #6\n*                                                                  #11\n*******************************************************************#11\n*                                                                  #11\n         CLC   OUTPFLAG,=C'30'     OUT(30)?                        #11\n         JE    HEADER230           YES, DO OLD OUTPUT FORMAT       #11\n*                                                                  #11\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH16,DATA),MF=(E,VIOPL)     #11\n*                                                                  #11\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH26,DATA),MF=(E,VIOPL)     #11\n*                                                                  #11\n         J     DID_HEADERS2                                        #11\n*                                                                  #11\nHEADER230 DS   0H                                                  #11\n*                                                                  #11\n*******************************************************************#11\n*                                                                  #11\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH1,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH2,DATA),MF=(E,VIOPL)       #5\nDID_HEADERS2 DS 0H                                                  #11\n         LA    R9,2(0,R9)              INCRIMENT THE LINE COUNTER   #6\nSHOWLINE MVC   PLNE(4),PLNELN          MOVE LINE LENGTH FOR PUTLINE #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLNE,DATA),MF=(E,VIOPL)       #5\n         LA    R9,1(0,R9)              INCRIMENT THE LINE COUNTER   #6\n         MVI   LINEFLG,C'Y'        SET THE DISPLAYED FLAG           #5\n         B     UCBLOOP             GO DO NEXT UCB ENTRY\nSCANDONE DS    0H                                               @GTG\n         LA    R3,12                                            @GTG\n         LA    R4,4                                             @GTG\n         CR    R15,R3              HAS CONFIGURATION CHANGED?   @GTG\n         BE    RESCANLP            YES, START OVER              @GTG\n         CR    R15,R4              SCAN SUCCESSFUL?             @GTG\n         BNE   FINISH              NO, EXIT WITH R15            @GTG\n         SPACE\nDONE     EQU   *\n         CLI   LINEFLG,C'Y'            IF SOME DEVICES DISPLAYED    #5\n         BE    DONE1                      THEN SKIP NODEVICE MSG    #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLBS,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLE2,DATA),MF=(E,VIOPL)       #5\n         SPACE\nDONE1    EQU   *\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLBS,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLE1,DATA),MF=(E,VIOPL)       #5\n*        TPUT  BLANKS,1            PUT OUT BLANK LINE               #2\n*        TPUT  END1,L'END1         PUT OUT END MESSAGE              #2\n         LA    R15,0               SETUP RETURN CODE                #3\n         SPACE\nFINISH   FINISH RC=(R15)                                            #3\n*                                                                  #11\n*******************************************************************#11\n*                                                                  #11\n*  VALIDITY TEST FOR OUTPUT/OUT PARAMETERS                         #11\n*                                                                  #11\n*  PARSE PASSES CONTROL - WE SAVE PARSE'S REGS                     #11\n*                                                                  #11\n         PUSH USING                                                #11\n         DROP R3,R8,R12,R13      DROP ALL BASES                    #11\n*                                                                  #11\nOUTPVAL  DS   0H                                                   #11\n*                                                                  #11\n         BAKR  14,0                  STORE REGS IN STACK           #11\n*                                                                  #11\n         LARL  R11,OUTPVAL           BASE REGISTER                 #11\n         USING OUTPVAL,R11                                         #11\n*                                                                  #11\n         L    R3,0(,R1)              ADDR OF PDE                   #11\n         CLC  =H'2',4(R3)            IS LENGTH 2?                  #11\n         JNE  OUTPNG                 IF NOT, INVALID               #11\n         L    R4,0(,R3)              ADDR OF OUT PARAMETER         #11\n         CLC  =C'40',0(R4)           IF VALUE 40?                  #11\n         JE   OUTPRC0                IF SO, ITS VALID              #11\n         CLC  =C'30',0(R4)           IF VALUE 30?                  #11\n         JE   OUTPRC0                IF SO, ITS VALID              #11\n*                                                                  #11\n******** J    OUTPNG  ****** ALL OTHER VALUES ARE INVALID *******  #11\n*                                                                  #11\nOUTPNG   DS   0H                                                   #11\n*                                                                  #11\n         LA   R2,OUTMSG1                                           #11\n         ST   R2,8(,R1)              ADDR FOR PASSING ERR MSG      #11\n*                                                                  #11\n         LA   R15,4                                                #11\n         J    OUTPEXIT                                             #11\n*                                                                  #11\nOUTPRC0  DS   0H                                                   #11\n*                                                                  #11\n         LA   R15,0                                                #11\n******** J    OUTPEXIT                                             #11\n*                                                                  #11\nOUTPEXIT DS   0H                                                   #11\n*                                                                  #11\n         PR                                                        #11\n*                                                                  #11\nOUTMSG1  DC    AL2(LOUTMSG1),AL2(0)                                #11\nOUTMSGH1 DC    C'ENTER EITHER 30 OR 40'                            #11\nLOUTMSG1 EQU   *-OUTMSG1                                           #11\n*                                                                  #11\n         POP  USING                                                #11\n*                                                                  #11\n         EJECT\n*                                                                  #11\nPLH16    DC    AL2(LHDR16+4),AL2(0)     LENGTH FOR PUTLINE         #11\nHDR16    DC    C'            UNIT TOT FR TOT FR  TOT     LRG. FREE ' 11\n         DC    C'  IN  UNIT    OPEN'                               #11\nLHDR16   EQU   *-HDR16                                             #11\nPLH26    DC    AL2(LHDR26+4),AL2(0)     LENGTH FOR PUTLINE         #11\nHDR26    DC    C'VOLSER DEVT ADDR   CYL    TRK   XTNS    CYLS+TRKS ' 11\n         DC    C'  USE ATTR    DCBS'                               #11\nLHDR26   EQU   *-HDR26                                             #11\n*                                                                  #11\n*******************************************************************#11\nPLH1     DC    AL2(LHDR1+4),AL2(0)     LENGTH FOR PUTLINE           #5\nHDR1     DC    C'            UNIT TOT FR TOT FR  TOT   LRG. FREE   IN '\n         DC    C'  UNIT  OPEN'                                      #4\nLHDR1    EQU   *-HDR1                                               #2\nPLH2     DC    AL2(LHDR2+4),AL2(0)     LENGTH FOR PUTLINE           #5\nHDR2     DC    C'VOLSER DEVT ADDR   CYL    TRK   XTNS  CYLS+TRKS   USE'\n         DC    C'  ATTR  DCBS'                                      #4\nLHDR2    EQU   *-HDR2                                               #2\nPLE1     DC    AL2(LEND1+4),AL2(0)     LENGTH FOR PUTLINE           #5\nEND1     DC    C'**PROCESSING COMPLETED**  ---  VOLS REL.01 MOD.11' #6\nLEND1    EQU   *-END1                                               #5\nPLE2     DC    AL2(LEND2+4),AL2(0)     LENGTH FOR PUTLINE           #5\nEND2     DC    C'  0 DEVICES SELECTED '                             #4\nLEND2    EQU   *-END2                                               #5\nPLBS     DC    AL2(5),AL2(0)           LENGTH FOR PUTLINE           #5\nBLANKS   DC    CL80' '             BLANKS FOR ASSORTED THINGS       #2\nPLNELN   DC    AL2(LNGT+4),AL2(0)      LENGTH FOR PUTLINE OF LINE   #5\nDCBEDT   DC    XL06'402020202120'  EDIT PATTERN FOR OPEN DCB COUNT  #4\nDCBEDT6  DC    XL08'4020202020202120' EDIT PATTERN FOR OPEN DCB CNT #11\nPBP1     DC    AL2(LBPRM1+4),AL2(0)    LENGTH FOR PUTLINE           #5\nBADPARM1 DC    C'INVALID SELECTION KEYWORD - '                      #3\nLBPRM1   EQU   *-BADPARM1          SETUP LENGTH FOR TPUT            #3\nPBP2     DC    AL2(LBPRM2+4),AL2(0)    LENGTH FOR PUTLINE           #5\nBADPARM2 DC    C'  VALID ARE: ALL PRIVATE PUBLIC STORAGE '          #3\n         DC    C'3380 3350 3330 3311 AND 3390'                      #3\nLBPRM2   EQU   *-BADPARM2          SETUP LENGTH FOR TPUT            #3\nADALL    DC    CL8'ALL     '           SELECT ALL VOLUMES           #3\nAPRIV    DC    CL8'PRIVATE '           ATTRIB IS PRIVATE            #3\nAPUBL    DC    CL8'PUBLIC  '           ATTRIB IS PUBLIC             #3\nASTOR    DC    CL8'STORAGE '           ATTRIB IS STORAGE            #3\nD3380    DC    CL8'3380    '           DEVICE IS 3380               #3\nD3350    DC    CL8'3350    '           DEVICE IS 3350               #3\nD3330    DC    CL8'3330    '           DEVICE IS 3330               #3\nD3311    DC    CL8'3311    '           DEVICE IS 3311               #3\nD3390    DC    CL8'3390    '           DEVICE IS 3390               #3\nALLDEVT  EQU   X'F1'                   SETUP FOR DEVICE TYPES       #3\nALLATTR  EQU   X'0E'                   SETUP FOR ALL ATTRIBS        #3\nDEVT3390 EQU   X'01'               SETUP DEVICE TYPE 3390           #3\nDEVT3380 EQU   X'80'               SETUP DEVICE TYPE 3380           #3\nDEVT3350 EQU   X'40'               SETUP DEVICE TYPE 3350           #3\nDEVT3330 EQU   X'20'               SETUP DEVICE TYPE 3330           #3\nDEVT3311 EQU   X'10'               SETUP DEVICE TYPE 3311           #3\nATTRPRIV EQU   X'08'               SETUP FOR PRIVATE DEVICES        #3\nATTRPUBL EQU   X'04'               SETUP FOR PUBLIC  DEVICES        #3\nATTRSTOR EQU   X'02'               SETUP FOR STORAGE DEIVCES        #3\nVOLPCLP  DC    V(PCLCSECT)         POINTER TO PCLCSECT FOR PARSE    #3\n         SPACE\n         LTORG\n*******************************************************************#11\n*                                                                  #11\nLSPACELC LSPACE MF=L                                               #11\n*                                                                  #11\nLSPACELEN EQU *-LSPACELC                                           #11\n*                                                                  #11\n*******************************************************************#11\n         EJECT ,         MOVE TABLES HERE                          #10\nTRTAB    DC    256X'00'            TRANSLATE TABLE                 1.\n         ORG   TRTAB+C' '                                          #10\n         DC    C' '                                                #10\n         ORG   TRTAB+C'A'                                          1.\n         DC    X'FAFBFCFDFEFF'                                     1.\n         ORG   TRTAB+C'0'                                          1.\n         DC    X'F0F1F2F3F4F5F6F7F8F9'                             1.\n         ORG\nTRTABF0  DS    CL256                                               #10\n         ORG   TRTABF0                                             #10\n         DC    256X'00'                                            #10\n         ORG   TRTABF0+C' '                                        #10\n         DC    C' '                                                #10\n         ORG   TRTABF0+C'A'                                        #10\n         DC    C'ABCDEF'                                           #10\n         ORG   TRTABF0+C'0'                                        #10\n         DC    C' '                                                #10\n         DC    C'123456789'                                        #10\n         ORG   ,                                                   #10\n         EJECT\nWORKAREA DSECT                                                      #2\nSAVEAREA DS    18F                     SAVEAREA FOR REGISTERS       #2\nTOKEN    DS    CL48                                             @GTG\nUCBCOPY  DS    CL48                                             @GTG\nSCANWORK DS    CL100                                            @GTG\nSELFLAGS DS    F                       SELECTION FLAGS              #3\nVOLCPPL  DS    F                       ADDRESS OF CPPL              #3\nVOLPSCB  DS    F                       ADDRESS OF PSCB              #5\nVOLECB   DS    F                       ECB FOR PARSE TO USE         #3\nVOLANS   DS    F                       ANSWER AREA FOR PARSE        #3\nVOLUWA   DS    4F                      USER WORK AREA FOR PARSE     #3\nVOLPPL   DS    7F                      PPL FOR USE WITH PARSE       #3\nVIOPL    DS    4F                      IOPL FOR PUTLINE SUPPORT     #5\nMAXLINES DS    F                       MAX SCREEN SIZE              #6\nSCRNFLG  DS    CL1                     DISPLAY SCREEN FLAG          #6\nSERLEN   DS    H                       LENGTH OF VOLSER PARM        #5\nUCBLEN   DS    H                       LENGTH OF UCBADR PARM        #5\nSERFLG   DS    CL1                     FLAG USED TO SELECT VOLSER   #5\nUCBFLG   DS    CL1                     FLAG USED TO SELECT UCBADR   #5\nSERVAL   DS    CL6                     VALUE OF THE VOLSER PARM     #5\nUCBVAL   DS    CL4                     VALUE OF THE UCBADR PARM     #5\nLINEFLG  DS    CL1                     DEVICE SELECTED FLAG         #5\nTIMEDATE DS    D                       AREA FOR THE TIME AND DATE   #3\nDCBCNT   DS    D                       NUMBER OF OPEN DCBS          #4\n*                                                                   #11\nOUTPFLAG DS    CL2                     KEEP OUTPUTP VALUE           #11\n*                                                                   #11\nHOLDATTR DS    CL4                                                  #11\nHOLDALLC DS    CL3                                                  #11\n*                                                                   #11\n         DS    0D                                                   #11\n*                                                                   #11\nOUTPUT   DS    CL40                    LSPACE OUTPUT AREA           #11\n*                                                                   #11\n         ORG   OUTPUT                                               #11\n*                                                                   #11\n         DS    CL6                                                  #2\nFCYL     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nFTRK     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nNXTN     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nOCYL     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nOTRK     DS    CL4                                                  #2\n*                                                                   #11\n         ORG   OUTPUT                                               #11\n*                                                                   #11\n         DS    CL6                                                  #2\nFCYL6    DS    CL6                                                  #2\n         DS    CL1                                                  #2\nFTRK6    DS    CL6                                                  #2\n         DS    CL1                                                  #2\nNXTN6    DS    CL6                                                  #2\n         DS    CL1                                                  #2\nOCYL6    DS    CL6                                                  #2\n         DS    CL1                                                  #2\nOTRK6    DS    CL6                                                  #2\n*                                                                   #11\n         ORG   ,                                                    #11\n         SPACE 1\n         DS    0D                  ALIGNMENT                        #2\nPLNE     DS    AL2(LNGT+4),AL2(0)      LENGTH FOR PUTLINE           #5\nLINE     EQU   *                                                    #2\nVOLSER   DS    CL7' '              VOLUME SERIAL NUMBER             #2\nDEVT     DS    CL5' '              DEVICE TYPE                     #10\nADDR     DS    CL6' '              DEVICE ADDRESS                  #10\nCYL      DS    CL7' '              FREE CYLS                        #2\nTRK      DS    CL7' '              FREE TRKS                        #2\nXTNS     DS    CL6' '              EXTENTS                          #2\nXCYL     DS    CL4' '              CONTIG CYLS                      #2\nPLUS     DS    CL1'+'                                               #2\nXTRK     DS    CL7' '              CONTIG TRKS                      #2\nALLC     DS    CL5' '              ALLOCATED FLAG                   #2\nATTR     DS    CL4' '              VOLUME ATTRIBUTES PUBL/PRIV/STOR #2\n         ORG   ALLC                                                #11\nALLCATTR DS    CL(L'ATTR+L'ALLC)                                   #11\n         ORG   ,                                                   #11\nDCBS     DS    CL6' '              NUMBER OF OPEN DCBS              #4\n         ORG   ADDR                                                #11\nADDR6    DS    CL5' '              DEVICE ADDRESS                  #11\nCYL6     DS    CL7' '              FREE CYLS                       #11\nTRK6     DS    CL7' '              FREE TRKS                       #11\nXTNS6    DS    CL7' '              EXTENTS                         #11\nXCYL6    DS    CL6' '              CONTIG CYLS                     #11\nPLUS6    DS    CL1'+'                                              #11\nXTRK6    DS    CL7' '              CONTIG TRKS                     #11\nALLC6    DS    CL4' '              ALLOCATED FLAG                  #11\nATTR6    DS    CL4' '              VOLUME ATTRIBUTES PUBL/PRIV/STOR#11\nDCBS6    DS    CL8' '              NUMBER OF OPEN DCBS             #11\n         ORG   ,                                                   #11\nLNGT     EQU   *-LINE                                               #2\n         SPACE 1\nADDRT    DS    CL4                 FIELD TO TRANSLATE UNIT NAME IN #10\nADDRTL   DS    CL4                 FIELD TO HOLD TRANS UNIT NAME   #10\nDEVNAME  DS    CL4                 HOLD UCBNAME HERE               #10\nLINEOUT  PUTLINE MF=L              LIST FORMAT OF PUTLINE           #5\n*******************************************************************#11\n*                                                                  #11\nLSPACEL  LSPACE MF=L                                               #11\n*                                                                  #11\n*******************************************************************#11\n************* @MK @MK @MK *******************************\n*     UCB SCAN AREAS                                            @MK\nPARMLIST DS    3F         PARMLIST MAPPING                      @MK\n         ORG   PARMLIST                                         @MK\nPARMWA   DS    F          ADDRESS OF 100-BYTE WKAREA          @MK\nPARMDEVT DS    F          ADDR OF BYTE CONTAINING DEVTYPE TO SEARCH\nPARMUCB  DS    F          ADDRESS OF WORD TO CONTAIN UCB ADDR   @MK\n         SPACE                                                , @MK\nDEVCLASS DS    CL1        BYTE CONTAINING DEVICE CLASS TO BE SEARCHED\nADDRUCB  DS    F          UCB ADDRESSES PLACED HERE BY UCB SCAN @MK\n         DS    0D         ALIGN WKAREA ON D-WORD BOUNDARY     @MK\nWKAREA   DS    CL100      WKAREA                              @MK\nDEVNUM   DS    F          UCBNAME                               @MK\n@SL      EQU   ((*-SAVEAREA+8/16)*16) LENGTH OF WORKAREA            #2\n         EJECT\nUCBLIS   UCBSCAN MF=(L,UCBSLST)                               @GTG\nIOCINF   IOCINFO MF=(L,IOCINFP)                               @GTG\nVOLS     CSECT\n         PRINT ON,NOGEN                                             #3\nPCLCSECT IKJPARM DSECT=PCLDSECT                                     #3\n         SPACE\nVOLCLEAR IKJKEYWD ,                                                 #6\n         IKJNAME 'CLEAR'                                            #6\n         SPACE\nVOLPTYPE IKJKEYWD DEFAULT='TYPE'                                    #3\n         IKJNAME  'TYPE',SUBFLD=$VOLTYPE                            #3\n         IKJNAME  'ATTRIBUTE',SUBFLD=$VOLTYPE                       #3\n         IKJNAME  'DEVICETYPE',ALIAS='DEVT',SUBFLD=$VOLTYPE         #3\n         SPACE\nVOLPNAME IKJKEYWD ,                                                 #5\n         IKJNAME  'SERIAL',SUBFLD=$VOLNAME                          #5\n         IKJNAME  'VOLSER',SUBFLD=$VOLNAME                          #5\n         SPACE\nVOLPADDR IKJKEYWD ,                                                 #5\n         IKJNAME  'ADDRESS',SUBFLD=$VOLADDR                         #5\n         IKJNAME  'UCBNAME',SUBFLD=$VOLADDR                         #5\n         SPACE\nOUTPADDR IKJKEYWD ,                                                 #11\n         IKJNAME  'OUTPUT',ALIAS='OUT',SUBFLD=$OUTPUTP              #11\n         SPACE\n$VOLTYPE IKJSUBF\nVOLTYPE  IKJIDENT 'SELECTION VALUE',UPPERCASE,MAXLNTH=8,            #3 X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                       #3 X\n               DEFAULT='ALL',HELP='DASD DEVICE SELECTION VALUE'     #3\n         SPACE\n$VOLNAME IKJSUBF\nVOLNAME  IKJIDENT 'SELECTION VALUE',UPPERCASE,MAXLNTH=6,            #5 X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                       #5 X\n               PROMPT='VOLUME SERIAL NUMBER - 6 DIGIT MAX',         #5 X\n               HELP='DASD VOLSER SELECTION VALUE'                   #5\n         SPACE\n$VOLADDR IKJSUBF\nVOLADDR  IKJIDENT 'SELECTION VALUE',UPPERCASE,MAXLNTH=4,            #5 X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                       #5 X\n               PROMPT='UCB ADDRESS - 4 DIGIT MAX',                  #5 X\n               HELP='DASD ADDRESS SELECTION VALUE'                  #5\n         SPACE\n$OUTPUTP IKJSUBF  ,                                                 #11\nOUTPUTP  IKJIDENT 'SELECTION - CHOOSE 30 OR 40',                    #11X\n               ASIS,MAXLNTH=2,                                      #11X\n               CHAR,                                                #11X\n               DEFAULT='&OUTPUT_SIZE.',                             #11X\n               VALIDCK=OUTPVAL,                                     #11X\n               HELP='OUTPUT LINE SIZE - EITHER 30 OR 40'            #11\n         SPACE\n         IKJENDP\n         SPACE\n         IKJPPL\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJIOPL\n         SPACE\n         DSECT\n*        IEFUCBOB                 UCB MACRO                     @GTG\n         IEFUCBOB DEVCLAS=DA      UCB MACRO                     @GTG\n         CVT   DSECT=YES,PREFIX=YES\n         END\n/*\n//L.SYSLMOD DD DISP=SHR,DSN=U014706.LOAD(VOLS)\n//*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VOLSHELO": {"ttr": 8201, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x00D\\x00D\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 68, "newlines": 68, "modlines": 0, "user": "WSRCC"}, "text": ")F Function -\n\n       VOLS Will inform the user which DASD volumes are\n       online and how much freespace there is on each\n       volume.  VOLS also indicates whether or not the\n       volumes listed are currently in use, what the\n       volume attribute is and how many DCBs are\n       currently open for files on that volume.\n\n       Sample output:\n\n            UNIT TOT FR TOT FR  TOT   LRG. FREE   IN   UNIT  OPEN\nVOLSER DEVT ADDR   CYL    TRK   XTNS  CYLS+TRKS   USE  ATTR  DCBS\nSAMP01 3330  2C0  0003   0021   0004  0003+0000   NO   PRIV     0\nSAMP02 3311  2D4  0130   0678   0077  0006+0013   NO   PRIV     0\nSAMP03 3350  4D0  0179   0112   0013  0059+0000   YES  STOR     5\nSAMP04 3380  4F1  0064   0017   0003  0042+0000   YES  PRIV    21\n\n**PROCESSING COMPLETED**  ---  VOLS REL.01 MOD.06\n)X SYNTAX -\n\n   VOLS Type('voltype') |\n             DEVIcetype | DEVT('devicetype') |\n             Attribute('volattr')\n        Volume('volser') | Serial('volser')\n        Ucbaddr('device-cuu') | Address('device-cuu')\n        Clear\n\n        Required - none\n        Default  - TYPE(ALL)\n\n  NOTE: Devicetype, Devt, and Attribute are aliases for Type.\n        Serial is an alias for Volume.\n        Address is an alias for Ucbaddr.\n\n)O Operands -\n))TYPE       - Specifies selection criteria.\n               Valid entries for TYPE are:\n                     All     - select ALL devices -- DEFAULT\n                     PRivate - select PRIVATE devices\n                     PUblic  - select PUBLIC devices\n                     Storage - select STORAGE devices\n                     3380    - select 3380 devices\n                     3350    - select 3350 devices\n                     3311    - select 3311 devices\n                     3330    - select 3330 devices\n                     2314    - select 2314 devices\n))DEVICETYPE - Specifies selection criteria - alias for TYPE.\n))DEVT       - Specifies selection criteria - alias for TYPE.\n))ATTRIBUTE  - Specifies selection criteria - alias for TYPE.\n\n))VOLUME     - Specifies selection by volume serial number.\n               The VOLUME parameter may be a specific volser or\n               some level of volser up to 6 characters in length.\n               If a level is specified all devices that have serial\n               numbers beginning with that level will be displayed.\n))SERIAL     - Specifies selection criteria - alias for VOLUME.\n\n))UCBADDR    - Specifies selection by the device address.\n               The UCBADDR parameter may be a spedific address or\n               some level of address up to 3 characters in length.\n               if a level is specified all devices that have addresses\n               beginning with that level will be displayed.\n))ADDRESS    - Spedifies selection criteria - alias for UCBADDR.\n\n))CLEAR      - Clears the screen if executing on a display video and\n               redisplays the headings on the top of all subsequent\n               screens.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VOLSHELP": {"ttr": 8203, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00P\\x01\\x083o\\x01 )/\\x11C\\x00V\\x00D\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2008-12-01T00:00:00", "modifydate": "2020-10-18T11:43:50", "lines": 86, "newlines": 68, "modlines": 0, "user": "SBGOLOB"}, "text": ")F Function -\n\n       VOLS Will inform the user which DASD volumes are\n       online and how much freespace there is on each\n       volume.  VOLS also indicates whether or not the\n       volumes listed are currently in use, what the\n       volume attribute is and how many DCBs are\n       currently open for files on that volume.\n\n       Sample output using the default of OUT(40):\n\n            UNIT TOT FR TOT FR  TOT     LRG. FREE   IN  UNIT    OPEN\nVOLSER DEVT ADDR   CYL    TRK   XTNS    CYLS+TRKS   USE ATTR    DCBS\nSAMP08 3390 8D17 001148 000027 000006 000495+000000 NO  PRIV       0\nSAMP05 3390 8D2A 003008 000003 000007 001238+000000 NO  PRIV       0\nSAMP0B 3390 8FAE 028136 000017 000009 026646+000000 YES PRIV       5\nSAMP0D 3390 90AE 028036 000012 000008 024532+000000 YES PRIV     105\n\n**PROCESSING COMPLETED**  ---  VOLS REL.01 MOD.11\n       Sample output using OUT(30):\n\n            UNIT TOT FR TOT FR  TOT   LRG. FREE   IN   UNIT  OPEN\nVOLSER DEVT ADDR   CYL    TRK   XTNS  CYLS+TRKS   USE  ATTR  DCBS\nSAMP01 3330 02C0  0003   0021   0004  0003+0000   NO   PRIV     0\nSAMP02 3311 02D4  0130   0678   0077  0006+0013   NO   PRIV     0\nSAMP03 3350 04D0  0179   0112   0013  0059+0000   YES  STOR     5\nSAMP04 3380 04F1  0064   0017   0003  0042+0000   YES  PRIV    21\n\n**PROCESSING COMPLETED**  ---  VOLS REL.01 MOD.06\n)X SYNTAX -\n\n   VOLS Type('voltype') |\n             DEVIcetype | DEVT('devicetype') |\n             Attribute('volattr')\n        Volume('volser') | Serial('volser')\n        Ucbaddr('device-cuu') | Address('device-cuu')\n        OUTput('30 or 40')\n        Clear\n\n        Required - none\n        Defaults - TYPE(ALL) OUTPUT(40)\n\n  NOTE: Devicetype, Devt, and Attribute are aliases for Type.\n        Serial is an alias for Volume.\n        Address is an alias for Ucbaddr.\n\n)O Operands -\n))TYPE       - Specifies selection criteria.\n               Valid entries for TYPE are:\n                     All     - select ALL devices -- DEFAULT\n                     PRivate - select PRIVATE devices\n                     PUblic  - select PUBLIC devices\n                     Storage - select STORAGE devices\n                     3390    - select 3390 devices\n                     3380    - select 3380 devices\n                     3350    - select 3350 devices\n                     3311    - select 3311 devices\n                     3330    - select 3330 devices\n                     2314    - select 2314 devices\n))DEVICETYPE - Specifies selection criteria - alias for TYPE.\n))DEVT       - Specifies selection criteria - alias for TYPE.\n))ATTRIBUTE  - Specifies selection criteria - alias for TYPE.\n\n))VOLUME     - Specifies selection by volume serial number.\n               The VOLUME parameter may be a specific volser or\n               some level of volser up to 6 characters in length.\n               If a level is specified all devices that have serial\n               numbers beginning with that level will be displayed.\n))SERIAL     - Specifies selection criteria - alias for VOLUME.\n\n))UCBADDR    - Specifies selection by the device address.\n               The UCBADDR parameter may be a specific address or\n               some level of address up to 3 characters in length.\n               if a level is specified all devices that have addresses\n               beginning with that level will be displayed.\n))ADDRESS    - Specifies selection criteria - alias for UCBADDR.\n\n))OUT        - Alias of OUTPUT\n))OUTPUT     - Specifies to use shorter OUTPUT line (30) with\n                 4 digits per space value\n               or longer OUTPUT line (40) with 6 digits per space value\n               Use OUT(30) or OUT(40) with OUT(40) as the default\n\n))CLEAR      - Clears the screen if executing on a display video and\n               redisplays the headings on the top of all subsequent\n               screens.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VOLSOLD": {"ttr": 8451, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x08\\x9f\\x00\\x98\\x08\\x9f\\x00I\\x02\\x7f\\x02\\x7f\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-03-30T00:00:00", "modifydate": "1998-03-30T00:49:00", "lines": 639, "newlines": 639, "modlines": 0, "user": "SBGOLOB"}, "text": "//ASUPTASM JOB (9169,0000),'G.B.HAMPTON',MSGCLASS=Q,\n//  REGION=32M,\n//             CLASS=A,NOTIFY=&SYSUID\n/*ROUTE PRINT LOCAL\n/*JOBPARM S=*\n//*\n//*  FROM CBT MVS MODS TAPE FILE 360 VERSION 04-21-85 VERSION # 247\n//*\n//HLASMCL  EXEC HLASMCL\n//C.SYSLIB DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//         DD  DISP=SHR,DSN=SYSCB1.CBT.FILE360.PDS                 #10\n//C.SYSIN  DD  *\n         TITLE 'WSRCC - VOLS TSO C.P.  --  VERSION 6'\n***********************************************************************\n*  THIS PROGRAM (COMMAND) WILL LIST THE AVAILABLE FREE SPACE ON ALL   *\n*  OR SELECTED ONLINE DISK PACKS.  AS IT IS HERE, IT WILL NOT WORK    *\n*  UNDER MVS/XA.  THIS CP WAS ORIGIONALLY FROM CAMBRIDGE SYSTEMS      *\n*  GROUP AND WAS DISTRIBUTED IN AN \"AS IS\" FORM WITH A VERY EARLY     *\n*  VERSION OF THE ASM2 PACKAGE.  THIS CP CONTAINED NO COPYRITE NOTICE *\n*  IN ANY FORM .  I HAVE RECEIVED PERMISSION FROM CSG TO PUT THIS ON  *\n*  THE CBT TAPE.  - J.MARTIN  02/15/85                                *\n***********************************************************************\n*--------------MODIFICATION.LOG---------------------------------------*\n*  PROGRAMMER  T  DATE  T  SUMMARY OF CHANGES MADE TO THIS PROGRAM    *\n*--------------+--------+---------------------------------------------*\n* TOM JARVIS   T01/21/80T 1. CHANGED CONTROL UNIT NAME CHECK SO THAT  *\n*              T        T    ALL DISK VOLUMES ARE LISTED.             *\n* JOE MARTIN   T03/29/82T 2. ADDED THE UNIT ATTR DISPLAY FOR EACH     *\n*              T        T    VOLUME. DISPLAY IS STOR, PRIV OR PUBL.   *\n*              T        T    ADDED THE BEGIN AND FINISH MACROS.       *\n*              T        T    MOVED MOST OF WORKAREA TO DSECT.         *\n*              T        T                                             *\n* JOE MARTIN   T05/20/82T 3. ADDED SOME SELECTION TO THE VOLS COMMAND.*\n*              T        T    FORMAT IS \"TYPE(....) (DEVT AND ATTR)    *\n*              T        T    WHERE THE \"....\" IS DEVICE TYPE OR       *\n*              T        T    OR DEVICE ATTRIBUTE. EXAMPLE:            *\n*              T        T    VOLS TYPE(3350) -- SELECT ONLY 3350'S    *\n*              T        T    VOLS TYPE(PRIV) -- SELECT PRIVATE VOLS.  *\n* JOE MARTIN   T11/02/82T 4. ADDED NUMBER OF OPEN DCB'S TO THE        *\n*              T        T    OUTPUT DISPLAY FOR THE VOLS COMMAND.     *\n* JOE MARTIN   T03/21/83T 5. ADDED SELECTION FOR VOLSER OR UCB ADDR   *\n*              T        T    ADDED PUTLINE SUPPORT REPLACING TPUT.    *\n*              T        T    FIXED PROBLEM WITH UCB TABLE LOOKUP RTN. *\n* JOE MARTIN   T03/25/83T 6. ADDED CLEAR KEYWORD TO CLEAR THE SCREEN  *\n*              T        T    WHEN RUNNING UNDER VTAM.                 *\n*              T        T                                             *\n* M. KARLIN    T05/07/90T 7. USE CVT UCB SCAN ROUTINE                 *\n* S. GOLOB     T08/14/92T 8. TAUGHT VOLS ABOUT 3390'S AND \"UNTAUGHT\"  *\n*              T        T    HIM ABOUT 2314'S.                        *\n* G. GORAB     T08/21/95T 9. CHANGED UCB LOOKUP ROUTINE FOR MVS 5.1   *\n*              T        T    USING UCBSCAN FROM S. GOLOB/R. BLUMLEIN  *\n*              T        T    CHANGES ARE MARKED @GTG                  *\n* G.B.HAMPTON  T03/26/98T10. CHANGED UCB TO USE UCBSCAN MACRO TO GET  *\n*              T        T    PRINTABLE UCBNAME TO BE ABLE TO SUPPORT  *\n*              T        T    4 CHARACTER NAMES                        *\n*              T        T    ALSO REMOVED R11 AS BASE FOR UCBDEV      *\n*              T        T      IT DID NOT LOOK LIKE ITS NEEDED AND    *\n*              T        T      IT PRODUCED A WARNING FROM HI-LVL ASM  *\n*              T        T    NOTE: 3 DIGIT UCB SYSTEMS (BELOW SP4)    *\n*              T        T          RETURN A SPACE AS 1ST CHAR OF 4    *\n*---------------------------------------------------------------------*\nVOLS     BEGIN SAVE=(SAVEAREA,@SL,17),AUTHOR=CSG,VER=009       SBG  #2\n         LR    R11,R1                  POINT AT CPPL.               #3\n         USING CPPL,R11\n         ST    R11,VOLCPPL             SAVE CPPL ADDRESS            #3\n         LA    R7,VIOPL                POINT AT IOPL                #5\n         USING IOPL,R7                 SET UP ADDRESSIBILITY - IOPL #5\n         LA    R9,VOLPPL               POINT TO PPL                 #3\n         USING PPL,R9                  SET UP ADDRESSABILITY TO PPL #3\n         L     R10,CPPLPSCB            POINT AT PSCB.               #3\n         ST    R10,VOLPSCB             STORE BUFFER ADDRESS IN PPL  #3\n         L     R10,CPPLCBUF            COMMAND BUFFER               #3\n         ST    R10,PPLCBUF             STORE BUFFER ADDRESS IN PPL  #3\n         L     R10,CPPLUPT             USER PROFILE TABLE           #3\n         ST    R10,PPLUPT              STORE UPT IN PPL             #3\n         ST    R10,IOPLUPT             STORE UPT IN IOPL            #5\n         L     R10,CPPLECT             ENVIRONMENT CONTROL TABLE    #3\n         ST    R10,PPLECT              STORE ECT IN PPL             #3\n         ST    R10,IOPLECT             STORE ECT IN IOPL            #5\n         L     R10,VOLPCLP             PARSE CONTROL LIST           #3\n         ST    R10,PPLPCL              STORE PCL IN PPL             #3\n         LA    R10,VOLECB              EVENT CONTROL BLOCK          #3\n         ST    R10,PPLECB              STORE ECB IN PPL             #3\n         ST    R10,IOPLECB             STORE ECB IN IOPL            #5\n         LA    R10,VOLANS              ANSWER AREA                  #3\n         ST    R10,PPLANS              STORE ANSWER ADDRESS IN PPL  #3\n         LA    R10,VOLUWA              USER WORK AREA               #3\n         ST    R10,PPLUWA              STORE WORK ADDRESS IN PPL    #3\n         DROP  R7,R9,R11                                            #5\n         MVI   LINEFLG,C'N'            INITIALIZE DEVICE SELECT FLG #5\n         LR    R1,R9                   POINTER TO PPL IN R1         #3\n         CALLTSSR EP=IKJPARS           CALL PARSER                  #3\n         LTR   R15,R15                 CHECK FOR ZERO PARSE RETURN  #3\n         BNZ   FINISH                  GO AWAY UPSET                #3\n         L     R8,VOLANS               LOAD ANSWER AREA FOR USING   #3\n         USING PCLDSECT,R8             SET UP ADDRESSABILITY TO ANS #3\n         MVI   SCRNFLG,C'N'            SET NOT-SCREEN FLAG          #6\n         SR    R7,R7                   CLEAR R7 FOR POINTER         #6\n         LH    R7,VOLCLEAR             GET POINTER VALUE            #6\n         LTR   R7,R7                   IF PARM NOT PRESENT          #6\n         BZ    CHKVOLTP                   THEN CONTINUE             #6\n         GTSIZE ,                      GET SCREEN DISPLAY SIZE      #6\n         LTR   R0,R0                   IF DISPLAY TERMINAL          #6\n         BZ    CHKVOLTP                   THEN CONTINUE             #6\n         MVI   SCRNFLG,C'Y'            SET SCREEN FLAG              #6\n         BCTR  R0,0                    REDUCE FOR THE \"***\"         #6\n         ST    R0,MAXLINES             SAVE SCREEN DISPLAY SIZE     #6\n***      STFSMODE ON,INITIAL=YES       CLEAR SCREEN                 #6\n***      STFSMODE OFF                  CLEAR SCREEN                 #6\nCHKVOLTP EQU   *\n         L     R7,VOLTYPE              POINT AT PARAMETER           #3\n         LH    R6,VOLTYPE+4            GET LENGTH OF PARAMETER      #3\n         BCTR  R6,0                    REDUCE R6 FOR EX OF CLC      #3\n         EX    R6,CLC#ALL              CHECK FOR \"ALL\"              #3\n         BE    SET#ALL                 YES = GO SETUP FOR \"ALL\"     #3\n         EX    R6,CLC#PRIV             CHECK FOR \"PRIVATE\"          #3\n         BE    SET#PRIV                YES = GO SETUP FOR \"PRIVATE\" #3\n         EX    R6,CLC#PUBL             CHECK FOR \"PUBLIC\"           #3\n         BE    SET#PUBL                YES = GO SETUP FOR \"PUBLIC\"  #3\n         EX    R6,CLC#STOR             CHECK FOR \"STORAGE\"          #3\n         BE    SET#STOR                YES = GO SETUP FOR \"STORAGE\" #3\n         EX    R6,CLC#3380             CHECK FOR \"3380\"             #3\n         BE    SET#3380                YES = GO SETUP FOR \"3380\"    #3\n         EX    R6,CLC#3350             CHECK FOR \"3350\"             #3\n         BE    SET#3350                YES = GO SETUP FOR \"3350\"    #3\n         EX    R6,CLC#3330             CHECK FOR \"3330\"             #3\n         BE    SET#3330                YES = GO SETUP FOR \"3330\"    #3\n         EX    R6,CLC#3311             CHECK FOR \"3311\"             #3\n         BE    SET#3311                YES = GO SETUP FOR \"3311\"    #3\n         EX    R6,CLC#3390             CHECK FOR \"3390\"             #3\n         BE    SET#3390                YES = GO SETUP FOR \"3390\"    #3\n         PUTLINE PARM=LINEOUT,OUTPUT=(PBP1,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PBP2,DATA),MF=(E,VIOPL)       #5\n*        TPUT  BADPARM1,LBPRM1         TELL USER OF BAD PARM VALUE  #3\n*        TPUT  BADPARM2,LBPRM2         TELL USER OF BAD PARM VALUE  #3\n         LA    R15,8                   SET RETRUN CODE              #3\n         B     FINISH                  GO AWAY WITH NO VOLS OUTPUT  #3\n         SPACE\nCLC#ALL  CLC   ADALL(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#PRIV CLC   APRIV(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#PUBL CLC   APUBL(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#STOR CLC   ASTOR(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3380 CLC   D3380(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3350 CLC   D3350(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3330 CLC   D3330(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3311 CLC   D3311(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3390 CLC   D3390(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\n         SPACE\nSET#ALL  EQU   *                                                    #3\n         MVI   SELFLAGS,ALLDEVT        SET SELECTION BITS           #3\n         OI    SELFLAGS,ALLATTR        SET SELECTION BITS           #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#PRIV EQU   *                                                    #3\n         MVI   SELFLAGS,ATTRPRIV       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLDEVT        SET BITS FOR DEVICE TYPES    #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#PUBL EQU   *                                                    #3\n         MVI   SELFLAGS,ATTRPUBL       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLDEVT        SET BITS FOR DEVICE TYPES    #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#STOR EQU   *                                                    #3\n         MVI   SELFLAGS,ATTRSTOR       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLDEVT        SET BITS FOR DEVICE TYPES    #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3380 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3380       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3350 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3350       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3330 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3330       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3311 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3311       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3390 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3390       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\n         EJECT\nTPUTH1   EQU   *\n         MVI   SERFLG,C'N'         SET VOLSER FLAG                  #5\n         L     R6,VOLNAME              POINT AT PARM                #5\n         LTR   R6,R6                   IF PARM ADDRESS IS ZERO      #5\n         BZ    TPUTH2                     THEN SKIP MOVE OF VOLSER  #5\n         LH    R7,VOLNAME+4            GET LENGTH OF PARM           #5\n         LTR   R7,R7                   IF LENGTH IS ZERO            #5\n         BZ    TPTH2                      THEN SKIP BCTR            #5\n         BCTR  R7,0                    REDUCE FOR EX OF CLC         #5\nTPTH2    EQU   *\n         STH   R7,SERLEN               SAVE SERIAL NUMBER LENGTH    #5\n         MVI   SERFLG,C'Y'         SET VOLSER FLAG                  #5\n         EX    R7,SERMOVE              MOVE VOLSER TO HOLD AREA     #5\nTPUTH2   EQU   *\n         MVI   UCBFLG,C'N'             SET UCBADR FLAG              #5\n         L     R6,VOLADDR              POINT AT PARM                #5\n         LTR   R6,R6                   IF PARM ADDRESS IS ZERO      #5\n         BZ    TPUTH3                     THEN SKIP MOVE OF UCBADR  #5\n         LH    R7,VOLADDR+4            GET LENGTH OF PARM           #5\n         LTR   R7,R7                   IF LENGTH IS ZERO            #5\n         BZ    TPTH3                      THEN SKIP BCTR            #5\n         BCTR  R7,0                    REDUCE FOR EX OF CLC         #5\nTPTH3    EQU   *\n         STH   R7,UCBLEN               SAVE UCB ADDRESS LENGTH      #5\n         MVI   UCBFLG,C'Y'             SET UCBADR FLAG              #5\n         EX    R7,UCBMOVE              MOVE UCBADR TO HOLD AREA     #5\n         B     TPUTH3                  SKIP THE EXECUTED STUFF      #5\n         SPACE\nSERMOVE  MVC   SERVAL(0),0(R6)         MOVE IN VOL SERIAL           #5\nUCBMOVE  MVC   UCBVAL(0),0(R6)         MOVE IN UCB ADDRESS          #5\n         SPACE\nTPUTH3   EQU   *\n         SR    R9,R9                   CLEAR OUT LINE COUNTER       #6\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH1,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH2,DATA),MF=(E,VIOPL)       #5\n         LA    R9,2(0,R9)              INCRIMENT THE LINE COUNTER   #6\n*        L     R4,16             @ CVT                          @MK\n*        L     R2,40(R4)         @ UCB LOOKUP TABLE             @MK\n*CBLOOP  EQU   *                                                @MK\n*        LH    R3,0(R2)          GET UCB ADDR.                  @MK\n*        SLL   R3,16               MAKE SURE THE UCB ADDR IS    @MK\n*        SRL   R3,16               CLEAN IN THE HIGH ORDER BITS @MK\n*        LA    R2,2(R2)          BUMP TO NEXT...                @MK\n*        LTR   R3,R3               CHECK FOR NULL               @MK\n*        BZ    UCBLOOP           GET NEXT IF NULL               @MK #5\n*        CL    R3,=X'0000FFFF'   END OF TABLE?                  @MK\n*        BE    DONE              YES...                         @MK\n************************************************************\n*        SET UCB SCAN                                           @MK\n************************************************************    @MK\n         XC    WKAREA,WKAREA       CLEAR WKAREA           @MK\n         LA    R1,WKAREA             SET UP PARM LIST         @MK\n         ST    R1,PARMWA                                        @MK\n         LA    R1,DEVCLASS                                      @MK\n         ST    R1,PARMDEVT                                      @MK\n         MVI   DEVCLASS,UCB3DACC       SEARCH DIRECT ACCESS ONLY@MK\n         LA    R1,ADDRUCB                                       @MK\n         ST    R1,PARMUCB                                       @MK\n         OI    PARMUCB,X'80'           INDICATE END OF PARMLIST @MK\n************************************                            @MK\n*        SCAN UCB                                               @MK\n************************************                            @MK\n*UCBLOOP  LA    R1,PARMLIST                                     @GTG\n*         L     R5,CVTPTR                                       @GTG\n*         USING CVT,R5                                          @GTG\n*         L     R15,CVTUCBSC        SCAN SERVICE ADDRESS        @GTG\n*         DROP  R5                                              @GTG\n*         BALR  R14,R15                                         @GTG\n*         LTR   R15,R15                                         @GTG\n*         BNZ   DONE                NO MORE UCBS                @GTG\n*        USING UCBOB,R3                                         @GTG\n*        L     R3,ADDRUCB                                       @GTG\n*        TM    18(R3),X'20'      DISK?                          @GTG\n*        BZ    UCBLOOP            NO                            @GTG\n*        TM    3(R3),X'80'       ONLINE?                        @GTG\n*        BZ    UCBLOOP            NO                            @GTG\n*        TM    6(R3),X'40'       READY? (CHECK NOT READY FLAG)  @GTG\n*        BNZ   UCBLOOP            NO    WAS BCR 7,R4            @GTG\nRESCANLP DS    0H                                               @GTG\n         IOCINFO IOCTOKEN=TOKEN,MF=(E,IOCINFP)                  @GTG\n         XC    SCANWORK,SCANWORK                                @GTG\nUCBLOOP  DS    0H                                               @GTG\n         UCBSCAN UCBAREA=UCBCOPY,WORKAREA=SCANWORK,DYNAMIC=YES,        C\n               DEVCLASS=DASD,IOCTOKEN=TOKEN,MF=(E,UCBSLST),     @GTG#10X\n               DEVNCHAR=DEVNAME,RANGE=ALL                          #10\n         LTR   R15,R15           WAS A UCB RETURNED?            @GTG\n         BNZ   SCANDONE          NO, EITHER A CONFIGURATION     @GTG\n*                                CHANGE HAS OCCURRED OR NO MORE @GTG\n*                                UCB'S.                         @GTG\n*                                                               @GTG\n*        PROCESS UCB                                            @GTG\n*                                                               @GTG\n*                                                               @GTG\n         USING UCBCMSEG,R3       UCB COMMON SEGMENT DSECT       @GTG\n         LA    R3,UCBCOPY        ADDRESSABILITY TO UCBCOPY      @GTG\n         TM    UCBSTAT,UCBONLI   IS VOLUME ONLINE?              @GTG\n         BO    MOVEUCB           YES, ONLINE. MOVE IT.          @GTG\n*        TM    UCBSTAT,UCBALOC   IS VOLUME ALLOCATED?           @GTG\n*        BO    MOVEUCB           YES, ALLOCATED. MOVE IT.       @GTG\n         B     UCBLOOP           GET ANOTHER UCB                @GTG\n*        MVC   LINE(LNGT),BLANKS   MOVE IN BLANKS TO OUTPUT LINE@GTG\nMOVEUCB  MVC   LINE(LNGT),BLANKS   MOVE IN BLANKS TO OUTPUT LINE@GTG\n         MVC   ADDRT,DEVNAME       MAKE COPY OF CHARACTER UNIT NAME#10\n         TR    ADDRT,TRTAB         TR ALPHA CHARACTERS A-F TO FA-FF#10\n         CLC   ADDRTL,ADDRT        COMPARE UNIT NAMES               #1\n         BNL   UCBLOOP             GET NEXT UCB                     #5\nCHKVOL   EQU   *\n         CLI   SERFLG,C'N'         IF VOL COMPARE NOT NEEDED        #5\n         BE    CHKUCB                 THEN CHECK ADDRESS WANTED     #5\n         LH    R6,SERLEN           LOAD LENGTH OF SERIAL#-1         #5\n         EX    R6,SERCLC           COMPARE SERIAL NUMBER TO UCB     #5\n         BNE   UCBLOOP             TRY NEXT VOLSER                  #5\nCHKUCB   EQU   *\n         CLI   UCBFLG,C'N'         IF UCB COMPARE NOT NEEDED        #5\n         BE    SAVE01                 THEN CONTINUE LIKE BEFORE     #5\n         LH    R6,UCBLEN           LOAD LENGTH OF UCB ADDRESS       #5\n         CLI   DEVNAME,C' '        3 CHAR UCBS (MUST BE BELOW SP5) #10\n         BE    CHKUCB3             SKIP OVER 4 DIGIT CHECK         #10\n         EX    R6,UCBCLC           COMPARE UCB ACCRESS TO UCB       #5\n         BE    SAVE01              LOOKS GOOD                      #10\n         C     R6,=F'3'            4 DIGITS SPECIFED?              #10\n         BNL   UCBLOOP             IF SO, THAT'S IT!               #10\n         CLI   DEVNAME,C'0'        1ST CHAR NOT ZERO               #10\n         BNE   UCBLOOP             UCB ALREADY COMPARED            #10\nCHKUCB3  DS    0H                                                  #10\n         EX    R6,UCBCLC1          LETS CHECK IN CASE JUST 3 CHAR  #10\n         BNE   UCBLOOP             TRY NEXT VOLSER                  #5\n         B     SAVE01                  CONTINUE AS USUAL            #5\n         SPACE\nSERCLC   CLC   SERVAL(0),28(R3)        COMPARE REQUESTED VOL - UCB  #5\nUCBCLC   CLC   UCBVAL(0),DEVNAME       COMPARE REQUESTED ADR - UCB #10\nUCBCLC1  CLC   UCBVAL(0),DEVNAME+1     COMPARE REQUESTED ADR - UCB #10\n         SPACE\nSAVE01   EQU   *\n*DEL*    USING UCBDEV,R11                                       @GTG#10\n*DEL*    LA    R11,UCBCOPY+24                                   @GTG#10\n         MVC   VOLSER(6),UCBVOLI   MOVE THE VOLSER TO OUTPUT AREA\n         MVC   ADDR(4),DEVNAME     MOVE THE UNIT ADDRESS TO AREA   #10\n         TR    ADDR(1),TRTABF0     CHANGE A ZERO TO A BLANK!       #10\n         MVC   ADDRTL,ADDRT        KEEP TRANSLATED UNIT NAME        #1\n         EJECT\nT3380    EQU   *\n         CLI   19(R3),X'0E'        IS THIS A 3380\n         BNE   T3350               NO GO TRY 3350\n         TM    SELFLAGS,DEVT3380   CHECK FOR 3380 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3380'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3350    EQU   *\n         CLI   19(R3),X'0B'        IS THIS A 3350\n         BNE   T3311               NO GO TRY 3330-1\n         TM    SELFLAGS,DEVT3350   CHECK FOR 3350 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3350'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3311    EQU   *\n         CLI   19(R3),X'0D'        IS THIS A 3330-1\n         BNE   T3330               NO GO TRY 3330\n         TM    SELFLAGS,DEVT3311   CHECK FOR 3311 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3311'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3330    EQU   *\n         CLI   19(R3),X'09'        IS THIS A 3330\n         BNE   T3390               NO GO TRY 3390\n         TM    SELFLAGS,DEVT3330   CHECK FOR 3330 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3330'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3390    EQU   *\n         CLI   19(R3),X'0F'        IS THIS A 3390\n         BNE   UNKN                NO GO MOVE IN \"UNKN\"\n         TM    SELFLAGS,DEVT3390   CHECK FOR 3390 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3390'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nUNKN     EQU   *\n         MVC   DEVT(4),=C'UNKN'    FOUND SOMETHING THAT WE DONT KNOW\nGOTDEV   EQU   *\n         LR    R0,R3               GOT A GOOD ONE.\n         LA    R1,OUTPUT           SETUP FOR LSPCE SVC\n         SVC   78                  ISSUE LSPCE\n         MVC   ALLC(3),=C'YES'     SET ALLOCATED MSG\n         TM    3(R3),X'08'         TEST IF ALLOCATED\n         BO    CHKPRIV             BRANCH IF ALLOCATED              #2\n         MVC   ALLC(3),=C'NO '     NOT ALLOCATED\nCHKPRIV  TM    UCBSTAB,UCBBPRV     IS THIS VOL PRIVATE          @GTG\n         BZ    CHKPUBL             NO -- TRY PUBLIC                 #2\n         TM    SELFLAGS,ATTRPRIV   CHECK FOR PRIV SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   ATTR(4),=C'PRIV'    MOVE IN PUBLIC LITERAL           #2\n         B     MOVESPCE            GO DO SPACE MOVES                #2\nCHKPUBL  TM    UCBSTAB,UCBBPUB     IS THIS VOL PUBLIC           @GTG\n         BZ    CHKSTOR             NO -- TRY STORAGE                #2\n         TM    SELFLAGS,ATTRPUBL   CHECK FOR PUBL SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   ATTR(4),=C'PUBL'    MOVE IN PRIVATE LITERAL          #2\n         B     MOVESPCE            GO DO SPACE MOVES                #2\nCHKSTOR  TM    UCBSTAB,UCBBSTR     IS THIS VOL STORAGE          @GTG\n         BZ    CHKFAIL             NO -- INDICATE UNKN              #2\n         TM    SELFLAGS,ATTRSTOR   CHECK FOR STOR SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   ATTR(4),=C'STOR'    MOVE IN PRIVATE LITERAL          #2\n         B     MOVESPCE            GO DO SPACE MOVES                #2\nCHKFAIL  MVC   ATTR(4),=C'UNKN'    MOVE IN UNKNOWN LITERAL          #2\nMOVESPCE MVC   CYL(4),FCYL         MOVE IN FREE CYLS\n         MVC   TRK(4),FTRK         MOVE IN FREE TRKS\n         MVC   XTNS(4),NXTN        MOVE IN NUM EXTENTS\n         MVC   XCYL(4),OCYL        MOVE IN CONTIG CYLS\n         MVC   XTRK(4),OTRK        MOVE IN CONTIG TRKS\n         MVI   PLUS,C'+'           MOVE IN THE \"+\"                  #2\n         SR    R5,R5                   CLEAR R5 FOR ICM             #4\n         MVC   DCBS,=CL6'     0'       MOVE IN INITIAL DCB COUNT    #4\n         ICM   R5,B'0001',35(R3)       INSERT THE DCB COUNT         #4\n         BZ    DONEDCB                 GO AWAY                      #4\n         SLL   R5,25                   SHIFT LEFT TO REMOVE \"MOUNT\" #4\n         SRL   R5,25                   SHIFT RIGHT TO RESTORE COUNT #4\n         CVD   R5,DCBCNT               MAKE DCBCOUNT DECIMAL        #4\n         MVC   DCBS(6),DCBEDT          MOVE IN EDIT FIELD           #4\n         ED    DCBS(6),DCBCNT+5        PUT IN THE EDITED DCB COUNT  #4\n         SPACE\nDONEDCB  EQU   *                                                    #4\n         CLI   SCRNFLG,C'N'            IF THIS IS NOT-SCREEN MODE   #6\n         BE    SHOWLINE                   THEN CONTINUE THIS CODE   #6\n         C     R9,MAXLINES             IF LINES EXCEEDED            #6\n         BL    SHOWLINE                   THEN DISPLAY HEADING      #6\n         SR    R9,R9                   CLEAR OUT LINE COUNTER       #6\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH1,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH2,DATA),MF=(E,VIOPL)       #5\n         LA    R9,2(0,R9)              INCRIMENT THE LINE COUNTER   #6\nSHOWLINE MVC   PLNE(4),PLNELN          MOVE LINE LENGTH FOR PUTLINE #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLNE,DATA),MF=(E,VIOPL)       #5\n         LA    R9,1(0,R9)              INCRIMENT THE LINE COUNTER   #6\n         MVI   LINEFLG,C'Y'        SET THE DISPLAYED FLAG           #5\n         B     UCBLOOP             GO DO NEXT UCB ENTRY\nSCANDONE DS    0H                                               @GTG\n         LA    R3,12                                            @GTG\n         LA    R4,4                                             @GTG\n         CR    R15,R3              HAS CONFIGURATION CHANGED?   @GTG\n         BE    RESCANLP            YES, START OVER              @GTG\n         CR    R15,R4              SCAN SUCCESSFUL?             @GTG\n         BNE   FINISH              NO, EXIT WITH R15            @GTG\n         SPACE\nDONE     EQU   *\n         CLI   LINEFLG,C'Y'            IF SOME DEVICES DISPLAYED    #5\n         BE    DONE1                      THEN SKIP NODEVICE MSG    #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLBS,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLE2,DATA),MF=(E,VIOPL)       #5\n         SPACE\nDONE1    EQU   *\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLBS,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLE1,DATA),MF=(E,VIOPL)       #5\n*        TPUT  BLANKS,1            PUT OUT BLANK LINE               #2\n*        TPUT  END1,L'END1         PUT OUT END MESSAGE              #2\n         LA    R15,0               SETUP RETURN CODE                #3\n         SPACE\nFINISH   FINISH RC=(R15)                                            #3\n         EJECT\nPLH1     DC    AL2(LHDR1+4),AL2(0)     LENGTH FOR PUTLINE           #5\nHDR1     DC    C'            UNIT TOT FR TOT FR  TOT   LRG. FREE   IN '\n         DC    C'  UNIT  OPEN'                                      #4\nLHDR1    EQU   *-HDR1                                               #2\nPLH2     DC    AL2(LHDR2+4),AL2(0)     LENGTH FOR PUTLINE           #5\nHDR2     DC    C'VOLSER DEVT ADDR   CYL    TRK   XTNS  CYLS+TRKS   USE'\n         DC    C'  ATTR  DCBS'                                      #4\nLHDR2    EQU   *-HDR2                                               #2\nPLE1     DC    AL2(LEND1+4),AL2(0)     LENGTH FOR PUTLINE           #5\nEND1     DC    C'**PROCESSING COMPLETED**  ---  VOLS REL.01 MOD.09' #6\nLEND1    EQU   *-END1                                               #5\nPLE2     DC    AL2(LEND2+4),AL2(0)     LENGTH FOR PUTLINE           #5\nEND2     DC    C'  0 DEVICES SELECTED '                             #4\nLEND2    EQU   *-END2                                               #5\nPLBS     DC    AL2(5),AL2(0)           LENGTH FOR PUTLINE           #5\nBLANKS   DC    CL80' '             BLANKS FOR ASSORTED THINGS       #2\nPLNELN   DC    AL2(LNGT+4),AL2(0)      LENGTH FOR PUTLINE OF LINE   #5\nDCBEDT   DC    XL06'402020202120'  EDIT PATTERN FOR OPEN DCB COUNT  #4\nPBP1     DC    AL2(LBPRM1+4),AL2(0)    LENGTH FOR PUTLINE           #5\nBADPARM1 DC    C'INVALID SELECTION KEYWORD - '                      #3\nLBPRM1   EQU   *-BADPARM1          SETUP LENGTH FOR TPUT            #3\nPBP2     DC    AL2(LBPRM2+4),AL2(0)    LENGTH FOR PUTLINE           #5\nBADPARM2 DC    C'  VALID ARE: ALL PRIVATE PUBLIC STORAGE '          #3\n         DC    C'3380 3350 3330 3311 AND 3390'                      #3\nLBPRM2   EQU   *-BADPARM2          SETUP LENGTH FOR TPUT            #3\nADALL    DC    CL8'ALL     '           SELECT ALL VOLUMES           #3\nAPRIV    DC    CL8'PRIVATE '           ATTRIB IS PRIVATE            #3\nAPUBL    DC    CL8'PUBLIC  '           ATTRIB IS PUBLIC             #3\nASTOR    DC    CL8'STORAGE '           ATTRIB IS STORAGE            #3\nD3380    DC    CL8'3380    '           DEVICE IS 3380               #3\nD3350    DC    CL8'3350    '           DEVICE IS 3350               #3\nD3330    DC    CL8'3330    '           DEVICE IS 3330               #3\nD3311    DC    CL8'3311    '           DEVICE IS 3311               #3\nD3390    DC    CL8'3390    '           DEVICE IS 3390               #3\nALLDEVT  EQU   X'F1'                   SETUP FOR DEVICE TYPES       #3\nALLATTR  EQU   X'0E'                   SETUP FOR ALL ATTRIBS        #3\nDEVT3390 EQU   X'01'               SETUP DEVICE TYPE 3390           #3\nDEVT3380 EQU   X'80'               SETUP DEVICE TYPE 3380           #3\nDEVT3350 EQU   X'40'               SETUP DEVICE TYPE 3350           #3\nDEVT3330 EQU   X'20'               SETUP DEVICE TYPE 3330           #3\nDEVT3311 EQU   X'10'               SETUP DEVICE TYPE 3311           #3\nATTRPRIV EQU   X'08'               SETUP FOR PRIVATE DEVICES        #3\nATTRPUBL EQU   X'04'               SETUP FOR PUBLIC  DEVICES        #3\nATTRSTOR EQU   X'02'               SETUP FOR STORAGE DEIVCES        #3\nVOLPCLP  DC    V(PCLCSECT)         POINTER TO PCLCSECT FOR PARSE    #3\n         SPACE\n         LTORG\n         EJECT ,         MOVE TABLES HERE                          #10\nTRTAB    DC    256X'00'            TRANSLATE TABLE                 1.\n         ORG   TRTAB+C' '                                          #10\n         DC    C' '                                                #10\n         ORG   TRTAB+C'A'                                          1.\n         DC    X'FAFBFCFDFEFF'                                     1.\n         ORG   TRTAB+C'0'                                          1.\n         DC    X'F0F1F2F3F4F5F6F7F8F9'                             1.\n         ORG\nTRTABF0  DS    CL256                                               #10\n         ORG   TRTABF0                                             #10\n         DC    256X'00'                                            #10\n         ORG   TRTABF0+C' '                                        #10\n         DC    C' '                                                #10\n         ORG   TRTABF0+C'A'                                        #10\n         DC    C'ABCDEF'                                           #10\n         ORG   TRTABF0+C'0'                                        #10\n         DC    C' '                                                #10\n         DC    C'123456789'                                        #10\n         ORG   ,                                                   #10\n         EJECT\nWORKAREA DSECT                                                      #2\nSAVEAREA DS    18F                     SAVEAREA FOR REGISTERS       #2\nTOKEN    DS    CL48                                             @GTG\nUCBCOPY  DS    CL48                                             @GTG\nSCANWORK DS    CL100                                            @GTG\nSELFLAGS DS    F                       SELECTION FLAGS              #3\nVOLCPPL  DS    F                       ADDRESS OF CPPL              #3\nVOLPSCB  DS    F                       ADDRESS OF PSCB              #5\nVOLECB   DS    F                       ECB FOR PARSE TO USE         #3\nVOLANS   DS    F                       ANSWER AREA FOR PARSE        #3\nVOLUWA   DS    4F                      USER WORK AREA FOR PARSE     #3\nVOLPPL   DS    7F                      PPL FOR USE WITH PARSE       #3\nVIOPL    DS    4F                      IOPL FOR PUTLINE SUPPORT     #5\nMAXLINES DS    F                       MAX SCREEN SIZE              #6\nSCRNFLG  DS    CL1                     DISPLAY SCREEN FLAG          #6\nSERLEN   DS    H                       LENGTH OF VOLSER PARM        #5\nUCBLEN   DS    H                       LENGTH OF UCBADR PARM        #5\nSERFLG   DS    CL1                     FLAG USED TO SELECT VOLSER   #5\nUCBFLG   DS    CL1                     FLAG USED TO SELECT UCBADR   #5\nSERVAL   DS    CL6                     VALUE OF THE VOLSER PARM     #5\nUCBVAL   DS    CL4                     VALUE OF THE UCBADR PARM     #5\nLINEFLG  DS    CL1                     DEVICE SELECTED FLAG         #5\nTIMEDATE DS    D                       AREA FOR THE TIME AND DATE   #3\nDCBCNT   DS    D                       NUMBER OF OPEN DCBS          #4\nOUTPUT   DS    0CL30                   LSPACE OUTPUT AREA           #2\n         DS    CL6                                                  #2\nFCYL     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nFTRK     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nNXTN     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nOCYL     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nOTRK     DS    CL4                                                  #2\n         SPACE 1\n         DS    0D                  ALIGNMENT                        #2\nPLNE     DS    AL2(LNGT+4),AL2(0)      LENGTH FOR PUTLINE           #5\nLINE     EQU   *                                                    #2\nVOLSER   DS    CL7' '              VOLUME SERIAL NUMBER             #2\nDEVT     DS    CL5' '              DEVICE TYPE                     #10\nADDR     DS    CL6' '              DEVICE ADDRESS                  #10\nCYL      DS    CL7' '              FREE CYLS                        #2\nTRK      DS    CL7' '              FREE TRKS                        #2\nXTNS     DS    CL6' '              EXTENTS                          #2\nXCYL     DS    CL4' '              CONTIG CYLS                      #2\nPLUS     DS    CL1'+'                                               #2\nXTRK     DS    CL7' '              CONTIG TRKS                      #2\nALLC     DS    CL5' '              ALLOCATED FLAG                   #2\nATTR     DS    CL4' '              VOLUME ATTRIBUTES PUBL/PRIV/STOR #2\nDCBS     DS    CL6' '              NUMBER OF OPEN DCBS              #4\nLNGT     EQU   *-LINE                                               #2\n         SPACE 1\nADDRT    DS    CL4                 FIELD TO TRANSLATE UNIT NAME IN #10\nADDRTL   DS    CL4                 FIELD TO HOLD TRANS UNIT NAME   #10\nDEVNAME  DS    CL4                 HOLD UCBNAME HERE               #10\nLINEOUT  PUTLINE MF=L              LIST FORMAT OF PUTLINE           #5\n************* @MK @MK @MK *******************************\n*     UCB SCAN AREAS                                            @MK\nPARMLIST DS    3F         PARMLIST MAPPING                      @MK\n         ORG   PARMLIST                                         @MK\nPARMWA   DS    F          ADDRESS OF 100-BYTE WKAREA          @MK\nPARMDEVT DS    F          ADDR OF BYTE CONTAINING DEVTYPE TO SEARCH\nPARMUCB  DS    F          ADDRESS OF WORD TO CONTAIN UCB ADDR   @MK\n         SPACE                                                , @MK\nDEVCLASS DS    CL1        BYTE CONTAINING DEVICE CLASS TO BE SEARCHED\nADDRUCB  DS    F          UCB ADDRESSES PLACED HERE BY UCB SCAN @MK\n         DS    0D         ALIGN WKAREA ON D-WORD BOUNDARY     @MK\nWKAREA   DS    CL100      WKAREA                              @MK\nDEVNUM   DS    F          UCBNAME                               @MK\n@SL      EQU   ((*-SAVEAREA+8/16)*16) LENGTH OF WORKAREA            #2\n         EJECT\nUCBLIS   UCBSCAN MF=(L,UCBSLST)                               @GTG\nIOCINF   IOCINFO MF=(L,IOCINFP)                               @GTG\nVOLS     CSECT\n         PRINT ON,NOGEN                                             #3\nPCLCSECT IKJPARM DSECT=PCLDSECT                                     #3\n         SPACE\nVOLCLEAR IKJKEYWD ,                                                 #6\n         IKJNAME 'CLEAR'                                            #6\n         SPACE\nVOLPTYPE IKJKEYWD DEFAULT='TYPE'                                    #3\n         IKJNAME  'TYPE',SUBFLD=$VOLTYPE                            #3\n         IKJNAME  'ATTRIBUTE',SUBFLD=$VOLTYPE                       #3\n         IKJNAME  'DEVICETYPE',ALIAS='DEVT',SUBFLD=$VOLTYPE         #3\n         SPACE\nVOLPNAME IKJKEYWD ,                                                 #5\n         IKJNAME  'SERIAL',SUBFLD=$VOLNAME                          #5\n         IKJNAME  'VOLSER',SUBFLD=$VOLNAME                          #5\n         SPACE\nVOLPADDR IKJKEYWD ,                                                 #5\n         IKJNAME  'ADDRESS',SUBFLD=$VOLADDR                         #5\n         IKJNAME  'UCBNAME',SUBFLD=$VOLADDR                         #5\n         SPACE\n$VOLTYPE IKJSUBF\nVOLTYPE  IKJIDENT 'SELECTION VALUE',UPPERCASE,MAXLNTH=8,            #3 X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                       #3 X\n               DEFAULT='ALL',HELP='DASD DEVICE SELECTION VALUE'     #3\n         SPACE\n$VOLNAME IKJSUBF\nVOLNAME  IKJIDENT 'SELECTION VALUE',UPPERCASE,MAXLNTH=6,            #5 X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                       #5 X\n               PROMPT='VOLUME SERIAL NUMBER - 6 DIGIT MAX',         #5 X\n               HELP='DASD VOLSER SELECTION VALUE'                   #5\n         SPACE\n$VOLADDR IKJSUBF\nVOLADDR  IKJIDENT 'SELECTION VALUE',UPPERCASE,MAXLNTH=4,            #5 X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                       #5 X\n               PROMPT='UCB ADDRESS - 4 DIGIT MAX',                  #5 X\n               HELP='DASD ADDRESS SELECTION VALUE'                  #5\n         SPACE\n         IKJENDP\n         SPACE\n         IKJPPL\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJIOPL\n         SPACE\n         DSECT\n*        IEFUCBOB                 UCB MACRO                     @GTG\n         IEFUCBOB DEVCLAS=DA      UCB MACRO                     @GTG\n         CVT   DSECT=YES,PREFIX=YES\n         END\n/*\n//L.SYSLMOD DD DSN=U014706.LOAD(VOLS),DISP=SHR\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VOLSOLDQ": {"ttr": 8708, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x95#o\\x00\\x95#o\\x166\\x02W\\x02W\\x00\\x00\\xc7\\xc7\\xd6\\xd9\\xc1\\xc2@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1995-08-24T00:00:00", "modifydate": "1995-08-24T16:36:00", "lines": 599, "newlines": 599, "modlines": 0, "user": "GGORAB"}, "text": "//VOLS     JOB (WR,1900,'05999','VOLS COMMAND PROCESSOR'),'GORAB',\n//         CLASS=H,MSGCLASS=R,PRTY=15\n//*\n//*  FROM CBT MVS MODS TAPE FILE 360 VERSION 04-21-85 VERSION # 247\n//*\n//ASMHCL   EXEC ASMHCL,PARM.ASM='NODECK,OBJECT,XREF(SHORT)',\n//             MAC1='SYS1.AMODGEN'\n//SYSIN    DD  *\n         TITLE 'WSRCC - VOLS TSO C.P.  --  VERSION 6'\n***********************************************************************\n*  THIS PROGRAM (COMMAND) WILL LIST THE AVAILABLE FREE SPACE ON ALL   *\n*  OR SELECTED ONLINE DISK PACKS.  AS IT IS HERE, IT WILL NOT WORK    *\n*  UNDER MVS/XA.  THIS CP WAS ORIGIONALLY FROM CAMBRIDGE SYSTEMS      *\n*  GROUP AND WAS DISTRIBUTED IN AN \"AS IS\" FORM WITH A VERY EARLY     *\n*  VERSION OF THE ASM2 PACKAGE.  THIS CP CONTAINED NO COPYRITE NOTICE *\n*  IN ANY FORM .  I HAVE RECEIVED PERMISSION FROM CSG TO PUT THIS ON  *\n*  THE CBT TAPE.  - J.MARTIN  02/15/85                                *\n***********************************************************************\n*--------------MODIFICATION.LOG---------------------------------------*\n*  PROGRAMMER  \u00e2  DATE  \u00e2  SUMMARY OF CHANGES MADE TO THIS PROGRAM    *\n*--------------+--------+---------------------------------------------*\n* TOM JARVIS   \u00e201/21/80\u00e2 1. CHANGED CONTROL UNIT NAME CHECK SO THAT  *\n*              \u00e2        \u00e2    ALL DISK VOLUMES ARE LISTED.             *\n* JOE MARTIN   \u00e203/29/82\u00e2 2. ADDED THE UNIT ATTR DISPLAY FOR EACH     *\n*              \u00e2        \u00e2    VOLUME. DISPLAY IS STOR, PRIV OR PUBL.   *\n*              \u00e2        \u00e2    ADDED THE BEGIN AND FINISH MACROS.       *\n*              \u00e2        \u00e2    MOVED MOST OF WORKAREA TO DSECT.         *\n*              \u00e2        \u00e2                                             *\n* JOE MARTIN   \u00e205/20/82\u00e2 3. ADDED SOME SELECTION TO THE VOLS COMMAND.*\n*              \u00e2        \u00e2    FORMAT IS \"TYPE(....) (DEVT AND ATTR)    *\n*              \u00e2        \u00e2    WHERE THE \"....\" IS DEVICE TYPE OR       *\n*              \u00e2        \u00e2    OR DEVICE ATTRIBUTE. EXAMPLE:            *\n*              \u00e2        \u00e2    VOLS TYPE(3350) -- SELECT ONLY 3350'S    *\n*              \u00e2        \u00e2    VOLS TYPE(PRIV) -- SELECT PRIVATE VOLS.  *\n* JOE MARTIN   \u00e211/02/82\u00e2 4. ADDED NUMBER OF OPEN DCB'S TO THE        *\n*              \u00e2        \u00e2    OUTPUT DISPLAY FOR THE VOLS COMMAND.     *\n* JOE MARTIN   \u00e203/21/83\u00e2 5. ADDED SELECTION FOR VOLSER OR UCB ADDR   *\n*              \u00e2        \u00e2    ADDED PUTLINE SUPPORT REPLACING TPUT.    *\n*              \u00e2        \u00e2    FIXED PROBLEM WITH UCB TABLE LOOKUP RTN. *\n* JOE MARTIN   \u00e203/25/83\u00e2 6. ADDED CLEAR KEYWORD TO CLEAR THE SCREEN  *\n*              \u00e2        \u00e2    WHEN RUNNING UNDER VTAM.                 *\n*              \u00e2        \u00e2                                             *\n* M. KARLIN    \u00e205/07/90\u00e2 7. USE CVT UCB SCAN ROUTINE                 *\n* S. GOLOB     \u00e208/14/92\u00e2 8. TAUGHT VOLS ABOUT 3390'S AND \"UNTAUGHT\"  *\n*              \u00e2        \u00e2    HIM ABOUT 2314'S.                        *\n* G. GORAB     \u00e208/21/95\u00e2 9. CHANGED UCB LOOKUP ROUTINE FOR MVS 5.1   *\n*              \u00e2        \u00e2    USING UCBSCAN FROM S. GOLOB/R. BLUMLEIN  *\n*              \u00e2        \u00e2    CHANGES ARE MARKED @GTG                  *\n*---------------------------------------------------------------------*\nVOLS     BEGIN SAVE=(SAVEAREA,@SL,17),AUTHOR=CSG,VER=009       SBG  #2\n         LR    R11,R1                  POINT AT CPPL.               #3\n         USING CPPL,R11\n         ST    R11,VOLCPPL             SAVE CPPL ADDRESS            #3\n         LA    R7,VIOPL                POINT AT IOPL                #5\n         USING IOPL,R7                 SET UP ADDRESSIBILITY - IOPL #5\n         LA    R9,VOLPPL               POINT TO PPL                 #3\n         USING PPL,R9                  SET UP ADDRESSABILITY TO PPL #3\n         L     R10,CPPLPSCB            POINT AT PSCB.               #3\n         ST    R10,VOLPSCB             STORE BUFFER ADDRESS IN PPL  #3\n         L     R10,CPPLCBUF            COMMAND BUFFER               #3\n         ST    R10,PPLCBUF             STORE BUFFER ADDRESS IN PPL  #3\n         L     R10,CPPLUPT             USER PROFILE TABLE           #3\n         ST    R10,PPLUPT              STORE UPT IN PPL             #3\n         ST    R10,IOPLUPT             STORE UPT IN IOPL            #5\n         L     R10,CPPLECT             ENVIRONMENT CONTROL TABLE    #3\n         ST    R10,PPLECT              STORE ECT IN PPL             #3\n         ST    R10,IOPLECT             STORE ECT IN IOPL            #5\n         L     R10,VOLPCLP             PARSE CONTROL LIST           #3\n         ST    R10,PPLPCL              STORE PCL IN PPL             #3\n         LA    R10,VOLECB              EVENT CONTROL BLOCK          #3\n         ST    R10,PPLECB              STORE ECB IN PPL             #3\n         ST    R10,IOPLECB             STORE ECB IN IOPL            #5\n         LA    R10,VOLANS              ANSWER AREA                  #3\n         ST    R10,PPLANS              STORE ANSWER ADDRESS IN PPL  #3\n         LA    R10,VOLUWA              USER WORK AREA               #3\n         ST    R10,PPLUWA              STORE WORK ADDRESS IN PPL    #3\n         DROP  R7,R9,R11                                            #5\n         MVI   LINEFLG,C'N'            INITIALIZE DEVICE SELECT FLG #5\n         LR    R1,R9                   POINTER TO PPL IN R1         #3\n         CALLTSSR EP=IKJPARS           CALL PARSER                  #3\n         LTR   R15,R15                 CHECK FOR ZERO PARSE RETURN  #3\n         BNZ   FINISH                  GO AWAY UPSET                #3\n         L     R8,VOLANS               LOAD ANSWER AREA FOR USING   #3\n         USING PCLDSECT,R8             SET UP ADDRESSABILITY TO ANS #3\n         MVI   SCRNFLG,C'N'            SET NOT-SCREEN FLAG          #6\n         SR    R7,R7                   CLEAR R7 FOR POINTER         #6\n         LH    R7,VOLCLEAR             GET POINTER VALUE            #6\n         LTR   R7,R7                   IF PARM NOT PRESENT          #6\n         BZ    CHKVOLTP                   THEN CONTINUE             #6\n         GTSIZE ,                      GET SCREEN DISPLAY SIZE      #6\n         LTR   R0,R0                   IF DISPLAY TERMINAL          #6\n         BZ    CHKVOLTP                   THEN CONTINUE             #6\n         MVI   SCRNFLG,C'Y'            SET SCREEN FLAG              #6\n         BCTR  R0,0                    REDUCE FOR THE \"***\"         #6\n         ST    R0,MAXLINES             SAVE SCREEN DISPLAY SIZE     #6\n***      STFSMODE ON,INITIAL=YES       CLEAR SCREEN                 #6\n***      STFSMODE OFF                  CLEAR SCREEN                 #6\nCHKVOLTP EQU   *\n         L     R7,VOLTYPE              POINT AT PARAMETER           #3\n         LH    R6,VOLTYPE+4            GET LENGTH OF PARAMETER      #3\n         BCTR  R6,0                    REDUCE R6 FOR EX OF CLC      #3\n         EX    R6,CLC#ALL              CHECK FOR \"ALL\"              #3\n         BE    SET#ALL                 YES = GO SETUP FOR \"ALL\"     #3\n         EX    R6,CLC#PRIV             CHECK FOR \"PRIVATE\"          #3\n         BE    SET#PRIV                YES = GO SETUP FOR \"PRIVATE\" #3\n         EX    R6,CLC#PUBL             CHECK FOR \"PUBLIC\"           #3\n         BE    SET#PUBL                YES = GO SETUP FOR \"PUBLIC\"  #3\n         EX    R6,CLC#STOR             CHECK FOR \"STORAGE\"          #3\n         BE    SET#STOR                YES = GO SETUP FOR \"STORAGE\" #3\n         EX    R6,CLC#3380             CHECK FOR \"3380\"             #3\n         BE    SET#3380                YES = GO SETUP FOR \"3380\"    #3\n         EX    R6,CLC#3350             CHECK FOR \"3350\"             #3\n         BE    SET#3350                YES = GO SETUP FOR \"3350\"    #3\n         EX    R6,CLC#3330             CHECK FOR \"3330\"             #3\n         BE    SET#3330                YES = GO SETUP FOR \"3330\"    #3\n         EX    R6,CLC#3311             CHECK FOR \"3311\"             #3\n         BE    SET#3311                YES = GO SETUP FOR \"3311\"    #3\n         EX    R6,CLC#3390             CHECK FOR \"3390\"             #3\n         BE    SET#3390                YES = GO SETUP FOR \"3390\"    #3\n         PUTLINE PARM=LINEOUT,OUTPUT=(PBP1,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PBP2,DATA),MF=(E,VIOPL)       #5\n*        TPUT  BADPARM1,LBPRM1         TELL USER OF BAD PARM VALUE  #3\n*        TPUT  BADPARM2,LBPRM2         TELL USER OF BAD PARM VALUE  #3\n         LA    R15,8                   SET RETRUN CODE              #3\n         B     FINISH                  GO AWAY WITH NO VOLS OUTPUT  #3\n         SPACE\nCLC#ALL  CLC   ADALL(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#PRIV CLC   APRIV(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#PUBL CLC   APUBL(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#STOR CLC   ASTOR(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3380 CLC   D3380(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3350 CLC   D3350(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3330 CLC   D3330(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3311 CLC   D3311(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3390 CLC   D3390(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\n         SPACE\nSET#ALL  EQU   *                                                    #3\n         MVI   SELFLAGS,ALLDEVT        SET SELECTION BITS           #3\n         OI    SELFLAGS,ALLATTR        SET SELECTION BITS           #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#PRIV EQU   *                                                    #3\n         MVI   SELFLAGS,ATTRPRIV       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLDEVT        SET BITS FOR DEVICE TYPES    #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#PUBL EQU   *                                                    #3\n         MVI   SELFLAGS,ATTRPUBL       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLDEVT        SET BITS FOR DEVICE TYPES    #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#STOR EQU   *                                                    #3\n         MVI   SELFLAGS,ATTRSTOR       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLDEVT        SET BITS FOR DEVICE TYPES    #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3380 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3380       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3350 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3350       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3330 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3330       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3311 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3311       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3390 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3390       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\n         EJECT\nTPUTH1   EQU   *\n         MVI   SERFLG,C'N'         SET VOLSER FLAG                  #5\n         L     R6,VOLNAME              POINT AT PARM                #5\n         LTR   R6,R6                   IF PARM ADDRESS IS ZERO      #5\n         BZ    TPUTH2                     THEN SKIP MOVE OF VOLSER  #5\n         LH    R7,VOLNAME+4            GET LENGTH OF PARM           #5\n         LTR   R7,R7                   IF LENGTH IS ZERO            #5\n         BZ    TPTH2                      THEN SKIP BCTR            #5\n         BCTR  R7,0                    REDUCE FOR EX OF CLC         #5\nTPTH2    EQU   *\n         STH   R7,SERLEN               SAVE SERIAL NUMBER LENGTH    #5\n         MVI   SERFLG,C'Y'         SET VOLSER FLAG                  #5\n         EX    R7,SERMOVE              MOVE VOLSER TO HOLD AREA     #5\nTPUTH2   EQU   *\n         MVI   UCBFLG,C'N'             SET UCBADR FLAG              #5\n         L     R6,VOLADDR              POINT AT PARM                #5\n         LTR   R6,R6                   IF PARM ADDRESS IS ZERO      #5\n         BZ    TPUTH3                     THEN SKIP MOVE OF UCBADR  #5\n         LH    R7,VOLADDR+4            GET LENGTH OF PARM           #5\n         LTR   R7,R7                   IF LENGTH IS ZERO            #5\n         BZ    TPTH3                      THEN SKIP BCTR            #5\n         BCTR  R7,0                    REDUCE FOR EX OF CLC         #5\nTPTH3    EQU   *\n         STH   R7,UCBLEN               SAVE UCB ADDRESS LENGTH      #5\n         MVI   UCBFLG,C'Y'             SET UCBADR FLAG              #5\n         EX    R7,UCBMOVE              MOVE UCBADR TO HOLD AREA     #5\n         B     TPUTH3                  SKIP THE EXECUTED STUFF      #5\n         SPACE\nSERMOVE  MVC   SERVAL(0),0(R6)         MOVE IN VOL SERIAL           #5\nUCBMOVE  MVC   UCBVAL(0),0(R6)         MOVE IN UCB ADDRESS          #5\n         SPACE\nTPUTH3   EQU   *\n         SR    R9,R9                   CLEAR OUT LINE COUNTER       #6\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH1,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH2,DATA),MF=(E,VIOPL)       #5\n         LA    R9,2(0,R9)              INCRIMENT THE LINE COUNTER   #6\n*        L     R4,16             @ CVT                          @MK\n*        L     R2,40(R4)         @ UCB LOOKUP TABLE             @MK\n*CBLOOP  EQU   *                                                @MK\n*        LH    R3,0(R2)          GET UCB ADDR.                  @MK\n*        SLL   R3,16               MAKE SURE THE UCB ADDR IS    @MK\n*        SRL   R3,16               CLEAN IN THE HIGH ORDER BITS @MK\n*        LA    R2,2(R2)          BUMP TO NEXT...                @MK\n*        LTR   R3,R3               CHECK FOR NULL               @MK\n*        BZ    UCBLOOP           GET NEXT IF NULL               @MK #5\n*        CL    R3,=X'0000FFFF'   END OF TABLE?                  @MK\n*        BE    DONE              YES...                         @MK\n************************************************************\n*        SET UCB SCAN                                           @MK\n************************************************************    @MK\n         XC    WKAREA,WKAREA       CLEAR WKAREA           @MK\n         LA    R1,WKAREA             SET UP PARM LIST         @MK\n         ST    R1,PARMWA                                        @MK\n         LA    R1,DEVCLASS                                      @MK\n         ST    R1,PARMDEVT                                      @MK\n         MVI   DEVCLASS,UCB3DACC       SEARCH DIRECT ACCESS ONLY@MK\n         LA    R1,ADDRUCB                                       @MK\n         ST    R1,PARMUCB                                       @MK\n         OI    PARMUCB,X'80'           INDICATE END OF PARMLIST @MK\n************************************                            @MK\n*        SCAN UCB                                               @MK\n************************************                            @MK\n*UCBLOOP  LA    R1,PARMLIST                                     @GTG\n*         L     R5,CVTPTR                                       @GTG\n*         USING CVT,R5                                          @GTG\n*         L     R15,CVTUCBSC        SCAN SERVICE ADDRESS        @GTG\n*         DROP  R5                                              @GTG\n*         BALR  R14,R15                                         @GTG\n*         LTR   R15,R15                                         @GTG\n*         BNZ   DONE                NO MORE UCBS                @GTG\n*        USING UCBOB,R3                                         @GTG\n*        L     R3,ADDRUCB                                       @GTG\n*        TM    18(R3),X'20'      DISK?                          @GTG\n*        BZ    UCBLOOP            NO                            @GTG\n*        TM    3(R3),X'80'       ONLINE?                        @GTG\n*        BZ    UCBLOOP            NO                            @GTG\n*        TM    6(R3),X'40'       READY? (CHECK NOT READY FLAG)  @GTG\n*        BNZ   UCBLOOP            NO    WAS BCR 7,R4            @GTG\nRESCANLP DS    0H                                               @GTG\n         IOCINFO IOCTOKEN=TOKEN,MF=(E,IOCINFP)                  @GTG\n         XC    SCANWORK,SCANWORK                                @GTG\nUCBLOOP  DS    0H                                               @GTG\n         UCBSCAN UCBAREA=UCBCOPY,WORKAREA=SCANWORK,DYNAMIC=YES,        C\n               DEVCLASS=DASD,IOCTOKEN=TOKEN,MF=(E,UCBSLST)      @GTG\n         LTR   R15,R15           WAS A UCB RETURNED?            @GTG\n         BNZ   SCANDONE          NO, EITHER A CONFIGURATION     @GTG\n*                                CHANGE HAS OCCURRED OR NO MORE @GTG\n*                                UCB'S.                         @GTG\n*                                                               @GTG\n*        PROCESS UCB                                            @GTG\n*                                                               @GTG\n*                                                               @GTG\n         USING UCBCMSEG,R3       UCB COMMON SEGMENT DSECT       @GTG\n         LA    R3,UCBCOPY        ADDRESSABILITY TO UCBCOPY      @GTG\n         TM    UCBSTAT,UCBONLI   IS VOLUME ONLINE?              @GTG\n         BO    MOVEUCB           YES, ONLINE. MOVE IT.          @GTG\n*        TM    UCBSTAT,UCBALOC   IS VOLUME ALLOCATED?           @GTG\n*        BO    MOVEUCB           YES, ALLOCATED. MOVE IT.       @GTG\n         B     UCBLOOP           GET ANOTHER UCB                @GTG\n*        MVC   LINE(LNGT),BLANKS   MOVE IN BLANKS TO OUTPUT LINE@GTG\nMOVEUCB  MVC   LINE(LNGT),BLANKS   MOVE IN BLANKS TO OUTPUT LINE@GTG\n         MVC   ADDRT(3),13(R3)     MAKE COPY OF CHARACTER UNIT NAME #1\n         TR    ADDRT(3),TRTAB      TR ALPHA CHARACTERS A-F TO FA-FF #1\n         CLC   ADDRTL,ADDRT        COMPARE UNIT NAMES               #1\n         BNL   UCBLOOP             GET NEXT UCB                     #5\nCHKVOL   EQU   *\n         CLI   SERFLG,C'N'         IF VOL COMPARE NOT NEEDED        #5\n         BE    CHKUCB                 THEN CHECK ADDRESS WANTED     #5\n         LH    R6,SERLEN           LOAD LENGTH OF SERIAL#-1         #5\n         EX    R6,SERCLC           COMPARE SERIAL NUMBER TO UCB     #5\n         BNE   UCBLOOP             TRY NEXT VOLSER                  #5\nCHKUCB   EQU   *\n         CLI   UCBFLG,C'N'         IF UCB COMPARE NOT NEEDED        #5\n         BE    SAVE01                 THEN CONTINUE LIKE BEFORE     #5\n         LH    R6,UCBLEN           LOAD LENGTH OF UCB ADDRESS       #5\n         EX    R6,UCBCLC           COMPARE UCB ACCRESS TO UCB       #5\n         BNE   UCBLOOP             TRY NEXT VOLSER                  #5\n         B     SAVE01                  CONTINUE AS USUAL            #5\n         SPACE\nSERCLC   CLC   SERVAL(0),28(R3)        COMPARE REQUESTED VOL - UCB  #5\nUCBCLC   CLC   UCBVAL(0),13(R3)        COMPARE REQUESTED ADR - UCB  #5\n         SPACE\nSAVE01   EQU   *\n         USING UCBDEV,R11                                       @GTG\n         LA    R11,UCBCOPY+24                                   @GTG\n         MVC   VOLSER(6),UCBVOLI   MOVE THE VOLSER TO OUTPUT AREA\n         MVC   ADDR(3),13(R3)      MOVE THE UNIT ADDRESS TO AREA\n         MVC   ADDRTL,ADDRT        KEEP TRANSLATED UNIT NAME        #1\n         EJECT\nT3380    EQU   *\n         CLI   19(R3),X'0E'        IS THIS A 3380\n         BNE   T3350               NO GO TRY 3350\n         TM    SELFLAGS,DEVT3380   CHECK FOR 3380 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3380'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3350    EQU   *\n         CLI   19(R3),X'0B'        IS THIS A 3350\n         BNE   T3311               NO GO TRY 3330-1\n         TM    SELFLAGS,DEVT3350   CHECK FOR 3350 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3350'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3311    EQU   *\n         CLI   19(R3),X'0D'        IS THIS A 3330-1\n         BNE   T3330               NO GO TRY 3330\n         TM    SELFLAGS,DEVT3311   CHECK FOR 3311 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3311'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3330    EQU   *\n         CLI   19(R3),X'09'        IS THIS A 3330\n         BNE   T3390               NO GO TRY 3390\n         TM    SELFLAGS,DEVT3330   CHECK FOR 3330 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3330'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3390    EQU   *\n         CLI   19(R3),X'0F'        IS THIS A 3390\n         BNE   UNKN                NO GO MOVE IN \"UNKN\"\n         TM    SELFLAGS,DEVT3390   CHECK FOR 3390 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3390'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nUNKN     EQU   *\n         MVC   DEVT(4),=C'UNKN'    FOUND SOMETHING THAT WE DONT KNOW\nGOTDEV   EQU   *\n         LR    R0,R3               GOT A GOOD ONE.\n         LA    R1,OUTPUT           SETUP FOR LSPCE SVC\n         SVC   78                  ISSUE LSPCE\n         MVC   ALLC(3),=C'YES'     SET ALLOCATED MSG\n         TM    3(R3),X'08'         TEST IF ALLOCATED\n         BO    CHKPRIV             BRANCH IF ALLOCATED              #2\n         MVC   ALLC(3),=C'NO '     NOT ALLOCATED\nCHKPRIV  TM    UCBSTAB,UCBBPRV     IS THIS VOL PRIVATE          @GTG\n         BZ    CHKPUBL             NO -- TRY PUBLIC                 #2\n         TM    SELFLAGS,ATTRPRIV   CHECK FOR PRIV SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   ATTR(4),=C'PRIV'    MOVE IN PUBLIC LITERAL           #2\n         B     MOVESPCE            GO DO SPACE MOVES                #2\nCHKPUBL  TM    UCBSTAB,UCBBPUB     IS THIS VOL PUBLIC           @GTG\n         BZ    CHKSTOR             NO -- TRY STORAGE                #2\n         TM    SELFLAGS,ATTRPUBL   CHECK FOR PUBL SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   ATTR(4),=C'PUBL'    MOVE IN PRIVATE LITERAL          #2\n         B     MOVESPCE            GO DO SPACE MOVES                #2\nCHKSTOR  TM    UCBSTAB,UCBBSTR     IS THIS VOL STORAGE          @GTG\n         BZ    CHKFAIL             NO -- INDICATE UNKN              #2\n         TM    SELFLAGS,ATTRSTOR   CHECK FOR STOR SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   ATTR(4),=C'STOR'    MOVE IN PRIVATE LITERAL          #2\n         B     MOVESPCE            GO DO SPACE MOVES                #2\nCHKFAIL  MVC   ATTR(4),=C'UNKN'    MOVE IN UNKNOWN LITERAL          #2\nMOVESPCE MVC   CYL(4),FCYL         MOVE IN FREE CYLS\n         MVC   TRK(4),FTRK         MOVE IN FREE TRKS\n         MVC   XTNS(4),NXTN        MOVE IN NUM EXTENTS\n         MVC   XCYL(4),OCYL        MOVE IN CONTIG CYLS\n         MVC   XTRK(4),OTRK        MOVE IN CONTIG TRKS\n         MVI   PLUS,C'+'           MOVE IN THE \"+\"                  #2\n         SR    R5,R5                   CLEAR R5 FOR ICM             #4\n         MVC   DCBS,=CL6'     0'       MOVE IN INITIAL DCB COUNT    #4\n         ICM   R5,B'0001',35(R3)       INSERT THE DCB COUNT         #4\n         BZ    DONEDCB                 GO AWAY                      #4\n         SLL   R5,25                   SHIFT LEFT TO REMOVE \"MOUNT\" #4\n         SRL   R5,25                   SHIFT RIGHT TO RESTORE COUNT #4\n         CVD   R5,DCBCNT               MAKE DCBCOUNT DECIMAL        #4\n         MVC   DCBS(6),DCBEDT          MOVE IN EDIT FIELD           #4\n         ED    DCBS(6),DCBCNT+5        PUT IN THE EDITED DCB COUNT  #4\n         SPACE\nDONEDCB  EQU   *                                                    #4\n         CLI   SCRNFLG,C'N'            IF THIS IS NOT-SCREEN MODE   #6\n         BE    SHOWLINE                   THEN CONTINUE THIS CODE   #6\n         C     R9,MAXLINES             IF LINES EXCEEDED            #6\n         BL    SHOWLINE                   THEN DISPLAY HEADING      #6\n         SR    R9,R9                   CLEAR OUT LINE COUNTER       #6\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH1,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH2,DATA),MF=(E,VIOPL)       #5\n         LA    R9,2(0,R9)              INCRIMENT THE LINE COUNTER   #6\nSHOWLINE MVC   PLNE(4),PLNELN          MOVE LINE LENGTH FOR PUTLINE #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLNE,DATA),MF=(E,VIOPL)       #5\n         LA    R9,1(0,R9)              INCRIMENT THE LINE COUNTER   #6\n         MVI   LINEFLG,C'Y'        SET THE DISPLAYED FLAG           #5\n         B     UCBLOOP             GO DO NEXT UCB ENTRY\nSCANDONE DS    0H                                               @GTG\n         LA    R3,12                                            @GTG\n         LA    R4,4                                             @GTG\n         CR    R15,R3              HAS CONFIGURATION CHANGED?   @GTG\n         BE    RESCANLP            YES, START OVER              @GTG\n         CR    R15,R4              SCAN SUCCESSFUL?             @GTG\n         BNE   FINISH              NO, EXIT WITH R15            @GTG\n         SPACE\nDONE     EQU   *\n         CLI   LINEFLG,C'Y'            IF SOME DEVICES DISPLAYED    #5\n         BE    DONE1                      THEN SKIP NODEVICE MSG    #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLBS,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLE2,DATA),MF=(E,VIOPL)       #5\n         SPACE\nDONE1    EQU   *\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLBS,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLE1,DATA),MF=(E,VIOPL)       #5\n*        TPUT  BLANKS,1            PUT OUT BLANK LINE               #2\n*        TPUT  END1,L'END1         PUT OUT END MESSAGE              #2\n         LA    R15,0               SETUP RETURN CODE                #3\n         SPACE\nFINISH   FINISH RC=(R15)                                            #3\n         EJECT\nPLH1     DC    AL2(LHDR1+4),AL2(0)     LENGTH FOR PUTLINE           #5\nHDR1     DC    C'            UNIT TOT FR TOT FR  TOT   LRG. FREE   IN '\n         DC    C'  UNIT  OPEN'                                      #4\nLHDR1    EQU   *-HDR1                                               #2\nPLH2     DC    AL2(LHDR2+4),AL2(0)     LENGTH FOR PUTLINE           #5\nHDR2     DC    C'VOLSER DEVT ADDR   CYL    TRK   XTNS  CYLS+TRKS   USE'\n         DC    C'  ATTR  DCBS'                                      #4\nLHDR2    EQU   *-HDR2                                               #2\nPLE1     DC    AL2(LEND1+4),AL2(0)     LENGTH FOR PUTLINE           #5\nEND1     DC    C'**PROCESSING COMPLETED**  ---  VOLS REL.01 MOD.09' #6\nLEND1    EQU   *-END1                                               #5\nPLE2     DC    AL2(LEND2+4),AL2(0)     LENGTH FOR PUTLINE           #5\nEND2     DC    C'  0 DEVICES SELECTED '                             #4\nLEND2    EQU   *-END2                                               #5\nPLBS     DC    AL2(5),AL2(0)           LENGTH FOR PUTLINE           #5\nBLANKS   DC    CL80' '             BLANKS FOR ASSORTED THINGS       #2\nPLNELN   DC    AL2(LNGT+4),AL2(0)      LENGTH FOR PUTLINE OF LINE   #5\nDCBEDT   DC    XL06'402020202120'  EDIT PATTERN FOR OPEN DCB COUNT  #4\nTRTAB    DC    256X'00'            TRANSLATE TABLE                 1.\n         ORG   TRTAB+C'A'                                          1.\n         DC    X'FAFBFCFDFEFF'                                     1.\n         ORG   TRTAB+C'0'                                          1.\n         DC    X'F0F1F2F3F4F5F6F7F8F9'                             1.\n         ORG\nPBP1     DC    AL2(LBPRM1+4),AL2(0)    LENGTH FOR PUTLINE           #5\nBADPARM1 DC    C'INVALID SELECTION KEYWORD - '                      #3\nLBPRM1   EQU   *-BADPARM1          SETUP LENGTH FOR TPUT            #3\nPBP2     DC    AL2(LBPRM2+4),AL2(0)    LENGTH FOR PUTLINE           #5\nBADPARM2 DC    C'  VALID ARE: ALL PRIVATE PUBLIC STORAGE '          #3\n         DC    C'3380 3350 3330 3311 AND 3390'                      #3\nLBPRM2   EQU   *-BADPARM2          SETUP LENGTH FOR TPUT            #3\nADALL    DC    CL8'ALL     '           SELECT ALL VOLUMES           #3\nAPRIV    DC    CL8'PRIVATE '           ATTRIB IS PRIVATE            #3\nAPUBL    DC    CL8'PUBLIC  '           ATTRIB IS PUBLIC             #3\nASTOR    DC    CL8'STORAGE '           ATTRIB IS STORAGE            #3\nD3380    DC    CL8'3380    '           DEVICE IS 3380               #3\nD3350    DC    CL8'3350    '           DEVICE IS 3350               #3\nD3330    DC    CL8'3330    '           DEVICE IS 3330               #3\nD3311    DC    CL8'3311    '           DEVICE IS 3311               #3\nD3390    DC    CL8'3390    '           DEVICE IS 3390               #3\nALLDEVT  EQU   X'F1'                   SETUP FOR DEVICE TYPES       #3\nALLATTR  EQU   X'0E'                   SETUP FOR ALL ATTRIBS        #3\nDEVT3390 EQU   X'01'               SETUP DEVICE TYPE 3390           #3\nDEVT3380 EQU   X'80'               SETUP DEVICE TYPE 3380           #3\nDEVT3350 EQU   X'40'               SETUP DEVICE TYPE 3350           #3\nDEVT3330 EQU   X'20'               SETUP DEVICE TYPE 3330           #3\nDEVT3311 EQU   X'10'               SETUP DEVICE TYPE 3311           #3\nATTRPRIV EQU   X'08'               SETUP FOR PRIVATE DEVICES        #3\nATTRPUBL EQU   X'04'               SETUP FOR PUBLIC  DEVICES        #3\nATTRSTOR EQU   X'02'               SETUP FOR STORAGE DEIVCES        #3\nVOLPCLP  DC    V(PCLCSECT)         POINTER TO PCLCSECT FOR PARSE    #3\n         SPACE\n         LTORG\n         EJECT\nWORKAREA DSECT                                                      #2\nSAVEAREA DS    18F                     SAVEAREA FOR REGISTERS       #2\nTOKEN    DS    CL48                                             @GTG\nUCBCOPY  DS    CL48                                             @GTG\nSCANWORK DS    CL100                                            @GTG\nSELFLAGS DS    F                       SELECTION FLAGS              #3\nVOLCPPL  DS    F                       ADDRESS OF CPPL              #3\nVOLPSCB  DS    F                       ADDRESS OF PSCB              #5\nVOLECB   DS    F                       ECB FOR PARSE TO USE         #3\nVOLANS   DS    F                       ANSWER AREA FOR PARSE        #3\nVOLUWA   DS    4F                      USER WORK AREA FOR PARSE     #3\nVOLPPL   DS    7F                      PPL FOR USE WITH PARSE       #3\nVIOPL    DS    4F                      IOPL FOR PUTLINE SUPPORT     #5\nMAXLINES DS    F                       MAX SCREEN SIZE              #6\nSCRNFLG  DS    CL1                     DISPLAY SCREEN FLAG          #6\nSERLEN   DS    H                       LENGTH OF VOLSER PARM        #5\nUCBLEN   DS    H                       LENGTH OF UCBADR PARM        #5\nSERFLG   DS    CL1                     FLAG USED TO SELECT VOLSER   #5\nUCBFLG   DS    CL1                     FLAG USED TO SELECT UCBADR   #5\nSERVAL   DS    CL6                     VALUE OF THE VOLSER PARM     #5\nUCBVAL   DS    CL3                     VALUE OF THE UCBADR PARM     #5\nLINEFLG  DS    CL1                     DEVICE SELECTED FLAG         #5\nTIMEDATE DS    D                       AREA FOR THE TIME AND DATE   #3\nDCBCNT   DS    D                       NUMBER OF OPEN DCBS          #4\nOUTPUT   DS    0CL30                   LSPACE OUTPUT AREA           #2\n         DS    CL6                                                  #2\nFCYL     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nFTRK     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nNXTN     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nOCYL     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nOTRK     DS    CL4                                                  #2\n         SPACE 1\n         DS    0D                  ALIGNMENT                        #2\nPLNE     DS    AL2(LNGT+4),AL2(0)      LENGTH FOR PUTLINE           #5\nLINE     EQU   *                                                    #2\nVOLSER   DS    CL7' '              VOLUME SERIAL NUMBER             #2\nDEVT     DS    CL6' '              DEVICE TYPE                      #2\nADDR     DS    CL5' '              DEVICE ADDRESS                   #2\nCYL      DS    CL7' '              FREE CYLS                        #2\nTRK      DS    CL7' '              FREE TRKS                        #2\nXTNS     DS    CL6' '              EXTENTS                          #2\nXCYL     DS    CL4' '              CONTIG CYLS                      #2\nPLUS     DS    CL1'+'                                               #2\nXTRK     DS    CL7' '              CONTIG TRKS                      #2\nALLC     DS    CL5' '              ALLOCATED FLAG                   #2\nATTR     DS    CL4' '              VOLUME ATTRIBUTES PUBL/PRIV/STOR #2\nDCBS     DS    CL6' '              NUMBER OF OPEN DCBS              #4\nLNGT     EQU   *-LINE                                               #2\n         SPACE 1\nADDRT    DS    CL3                 FIELD TO TRANSLATE UNIT NAME IN 1#2\nADDRTL   DS    CL3                 FIELD TO HOLD TRANS UNIT NAME   1#2\nLINEOUT  PUTLINE MF=L              LIST FORMAT OF PUTLINE           #5\n************* @MK @MK @MK *******************************\n*     UCB SCAN AREAS                                            @MK\nPARMLIST DS    3F         PARMLIST MAPPING                      @MK\n         ORG   PARMLIST                                         @MK\nPARMWA   DS    F          ADDRESS OF 100-BYTE WKAREA          @MK\nPARMDEVT DS    F          ADDR OF BYTE CONTAINING DEVTYPE TO SEARCH\nPARMUCB  DS    F          ADDRESS OF WORD TO CONTAIN UCB ADDR   @MK\n         SPACE                                                , @MK\nDEVCLASS DS    CL1        BYTE CONTAINING DEVICE CLASS TO BE SEARCHED\nADDRUCB  DS    F          UCB ADDRESSES PLACED HERE BY UCB SCAN @MK\n         DS    0D         ALIGN WKAREA ON D-WORD BOUNDARY     @MK\nWKAREA   DS    CL100      WKAREA                              @MK\nDEVNUM   DS    F          UCBNAME                               @MK\n@SL      EQU   ((*-SAVEAREA+8/16)*16) LENGTH OF WORKAREA            #2\n         EJECT\nUCBLIS   UCBSCAN MF=(L,UCBSLST)                               @GTG\nIOCINF   IOCINFO MF=(L,IOCINFP)                               @GTG\nVOLS     CSECT\n         PRINT ON,NOGEN                                             #3\nPCLCSECT IKJPARM DSECT=PCLDSECT                                     #3\n         SPACE\nVOLCLEAR IKJKEYWD ,                                                 #6\n         IKJNAME 'CLEAR'                                            #6\n         SPACE\nVOLPTYPE IKJKEYWD DEFAULT='TYPE'                                    #3\n         IKJNAME  'TYPE',SUBFLD=$VOLTYPE                            #3\n         IKJNAME  'ATTRIBUTE',SUBFLD=$VOLTYPE                       #3\n         IKJNAME  'DEVICETYPE',ALIAS='DEVT',SUBFLD=$VOLTYPE         #3\n         SPACE\nVOLPNAME IKJKEYWD ,                                                 #5\n         IKJNAME  'SERIAL',SUBFLD=$VOLNAME                          #5\n         IKJNAME  'VOLSER',SUBFLD=$VOLNAME                          #5\n         SPACE\nVOLPADDR IKJKEYWD ,                                                 #5\n         IKJNAME  'ADDRESS',SUBFLD=$VOLADDR                         #5\n         IKJNAME  'UCBNAME',SUBFLD=$VOLADDR                         #5\n         SPACE\n$VOLTYPE IKJSUBF\nVOLTYPE  IKJIDENT 'SELECTION VALUE',UPPERCASE,MAXLNTH=8,            #3 X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                       #3 X\n               DEFAULT='ALL',HELP='DASD DEVICE SELECTION VALUE'     #3\n         SPACE\n$VOLNAME IKJSUBF\nVOLNAME  IKJIDENT 'SELECTION VALUE',UPPERCASE,MAXLNTH=6,            #5 X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                       #5 X\n               PROMPT='VOLUME SERIAL NUMBER - 6 DIGIT MAX',         #5 X\n               HELP='DASD VOLSER SELECTION VALUE'                   #5\n         SPACE\n$VOLADDR IKJSUBF\nVOLADDR  IKJIDENT 'SELECTION VALUE',UPPERCASE,MAXLNTH=3,            #5 X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                       #5 X\n               PROMPT='UCB ADDRESS - 3 DIGIT MAX',                  #5 X\n               HELP='DASD ADDRESS SELECTION VALUE'                  #5\n         SPACE\n         IKJENDP\n         SPACE\n         IKJPPL\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJIOPL\n         SPACE\n         DSECT\n*        IEFUCBOB                 UCB MACRO                     @GTG\n         IEFUCBOB DEVCLAS=DA      UCB MACRO                     @GTG\n         CVT   DSECT=YES\n         END\n/*\n//LKED.SYSLMOD DD DSN=SYS2.LINKLIB(VOLS),DISP=SHR,UNIT=,SPACE=\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VOLSOLDR": {"ttr": 8964, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x89\\x05\\x8f\\x00\\x92\"\\x7f\\x14\\x11\\x02$\\x02\\x07\\x00K\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1989-02-27T00:00:00", "modifydate": "1992-08-14T14:11:00", "lines": 548, "newlines": 519, "modlines": 75, "user": "SBGCSC"}, "text": "         TITLE 'WSRCC - VOLS TSO C.P.  --  VERSION 6'\n***********************************************************************\n*  THIS PROGRAM (COMMAND) WILL LIST THE AVAILABLE FREE SPACE ON ALL   *\n*  OR SELECTED ONLINE DISK PACKS.  AS IT IS HERE, IT WILL NOT WORK    *\n*  UNDER MVS/XA.  THIS CP WAS ORIGIONALLY FROM CAMBRIDAGE SYSTEMS     *\n*  GROUP AND WAS DISTRIBUTED IN AN \"AS IS\" FORM WITH A VERY EARLY     *\n*  VERSION OF THE ASM2 PACKAGE.  THIS CP CONTAINED NO COPYRITE NOTICE *\n*  IN ANY FORM .  I HAVE RECEIVED PERMISSION FROM CSG TO PUT THIS ON  *\n*  THE CBT TAPE.  - J.MARTIN  02/15/85                                *\n***********************************************************************\n*--------------MODIFICATION.LOG---------------------------------------*\n*  PROGRAMMER  |  DATE  |  SUMMARY OF CHANGES MADE TO THIS PROGRAM    *\n*--------------+--------+---------------------------------------------*\n* TOM JARVIS   |01/21/80| 1. CHANGED CONTROL UNIT NAME CHECK SO THAT  *\n*              |        |    ALL DISK VOLUMES ARE LISTED.             *\n* JOE MARTIN   |03/29/82| 2. ADDED THE UNIT ATTR DISPLAY FOR EACH     *\n*              |        |    VOLUME. DISPLAY IS STOR, PRIV OR PUBL.   *\n*              |        |    ADDED THE BEGIN AND FINISH MACROS.       *\n*              |        |    MOVED MOST OF WORKAREA TO DSECT.         *\n*              |        |                                             *\n* JOE MARTIN   |05/20/82| 3. ADDED SOME SELECTION TO THE VOLS COMMAND.*\n*              |        |    FORMAT IS \"TYPE(....) (DEVT AND ATTR)    *\n*              |        |    WHERE THE \"....\" IS DEVICE TYPE OR       *\n*              |        |    OR DEVICE ATTRIBUTE. EXAMPLE:            *\n*              |        |    VOLS TYPE(3350) -- SELECT ONLY 3350'S    *\n*              |        |    VOLS TYPE(PRIV) -- SELECT PRIVATE VOLS.  *\n* JOE MARTIN   |11/02/82| 4. ADDED NUMBER OF OPEN DCB'S TO THE        *\n*              |        |    OUTPUT DISPLAY FOR THE VOLS COMMAND.     *\n* JOE MARTIN   |03/21/83| 5. ADDED SELECTION FOR VOLSER OR UCB ADDR   *\n*              |        |    ADDED PUTLINE SUPPORT REPLACING TPUT.    *\n*              |        |    FIXED PROBLEM WITH UCB TABLE LOOKUP RTN. *\n* JOE MARTIN   |03/25/83| 6. ADDED CLEAR KEYWORD TO CLEAR THE SCREEN  *\n*              |        |    WHEN RUNNING UNDER VTAM.                 *\n*              |        |                                             *\n* M. KARLIN    |05/07/90| 7. USE CVT UCB SCAN ROUTINE                 *\n* S. GOLOB     |08/14/92| 8. TAUGHT VOLS ABOUT 3390'S AND \"UNTAUGHT\"  *\n*              |        |    HIM ABOUT 2314'S.                        *\n*---------------------------------------------------------------------*\nVOLS     BEGIN SAVE=(SAVEAREA,@SL,17),AUTHOR=CSG,VER=008       SBG  #2\n         LR    R11,R1                  POINT AT CPPL.               #3\n         USING CPPL,R11\n         ST    R11,VOLCPPL             SAVE CPPL ADDRESS            #3\n         LA    R7,VIOPL                POINT AT IOPL                #5\n         USING IOPL,R7                 SET UP ADDRESSIBILITY - IOPL #5\n         LA    R9,VOLPPL               POINT TO PPL                 #3\n         USING PPL,R9                  SET UP ADDRESSABILITY TO PPL #3\n         L     R10,CPPLPSCB            POINT AT PSCB.               #3\n         ST    R10,VOLPSCB             STORE BUFFER ADDRESS IN PPL  #3\n         L     R10,CPPLCBUF            COMMAND BUFFER               #3\n         ST    R10,PPLCBUF             STORE BUFFER ADDRESS IN PPL  #3\n         L     R10,CPPLUPT             USER PROFILE TABLE           #3\n         ST    R10,PPLUPT              STORE UPT IN PPL             #3\n         ST    R10,IOPLUPT             STORE UPT IN IOPL            #5\n         L     R10,CPPLECT             ENVIRONMENT CONTROL TABLE    #3\n         ST    R10,PPLECT              STORE ECT IN PPL             #3\n         ST    R10,IOPLECT             STORE ECT IN IOPL            #5\n         L     R10,VOLPCLP             PARSE CONTROL LIST           #3\n         ST    R10,PPLPCL              STORE PCL IN PPL             #3\n         LA    R10,VOLECB              EVENT CONTROL BLOCK          #3\n         ST    R10,PPLECB              STORE ECB IN PPL             #3\n         ST    R10,IOPLECB             STORE ECB IN IOPL            #5\n         LA    R10,VOLANS              ANSWER AREA                  #3\n         ST    R10,PPLANS              STORE ANSWER ADDRESS IN PPL  #3\n         LA    R10,VOLUWA              USER WORK AREA               #3\n         ST    R10,PPLUWA              STORE WORK ADDRESS IN PPL    #3\n         DROP  R7,R9,R11                                            #5\n         MVI   LINEFLG,C'N'            INITIALIZE DEVICE SELECT FLG #5\n         LR    R1,R9                   POINTER TO PPL IN R1         #3\n         CALLTSSR EP=IKJPARS           CALL PARSER                  #3\n         LTR   R15,R15                 CHECK FOR ZERO PARSE RETURN  #3\n         BNZ   FINISH                  GO AWAY UPSET                #3\n         L     R8,VOLANS               LOAD ANSWER AREA FOR USING   #3\n         USING PCLDSECT,R8             SET UP ADDRESSABILITY TO ANS #3\n         MVI   SCRNFLG,C'N'            SET NOT-SCREEN FLAG          #6\n         SR    R7,R7                   CLEAR R7 FOR POINTER         #6\n         LH    R7,VOLCLEAR             GET POINTER VALUE            #6\n         LTR   R7,R7                   IF PARM NOT PRESENT          #6\n         BZ    CHKVOLTP                   THEN CONTINUE             #6\n         GTSIZE ,                      GET SCREEN DISPLAY SIZE      #6\n         LTR   R0,R0                   IF DISPLAY TERMINAL          #6\n         BZ    CHKVOLTP                   THEN CONTINUE             #6\n         MVI   SCRNFLG,C'Y'            SET SCREEN FLAG              #6\n         BCTR  R0,0                    REDUCE FOR THE \"***\"         #6\n         ST    R0,MAXLINES             SAVE SCREEN DISPLAY SIZE     #6\n***      STFSMODE ON,INITIAL=YES       CLEAR SCREEN                 #6\n***      STFSMODE OFF                  CLEAR SCREEN                 #6\nCHKVOLTP EQU   *\n         L     R7,VOLTYPE              POINT AT PARAMETER           #3\n         LH    R6,VOLTYPE+4            GET LENGTH OF PARAMETER      #3\n         BCTR  R6,0                    REDUCE R6 FOR EX OF CLC      #3\n         EX    R6,CLC#ALL              CHECK FOR \"ALL\"              #3\n         BE    SET#ALL                 YES = GO SETUP FOR \"ALL\"     #3\n         EX    R6,CLC#PRIV             CHECK FOR \"PRIVATE\"          #3\n         BE    SET#PRIV                YES = GO SETUP FOR \"PRIVATE\" #3\n         EX    R6,CLC#PUBL             CHECK FOR \"PUBLIC\"           #3\n         BE    SET#PUBL                YES = GO SETUP FOR \"PUBLIC\"  #3\n         EX    R6,CLC#STOR             CHECK FOR \"STORAGE\"          #3\n         BE    SET#STOR                YES = GO SETUP FOR \"STORAGE\" #3\n         EX    R6,CLC#3380             CHECK FOR \"3380\"             #3\n         BE    SET#3380                YES = GO SETUP FOR \"3380\"    #3\n         EX    R6,CLC#3350             CHECK FOR \"3350\"             #3\n         BE    SET#3350                YES = GO SETUP FOR \"3350\"    #3\n         EX    R6,CLC#3330             CHECK FOR \"3330\"             #3\n         BE    SET#3330                YES = GO SETUP FOR \"3330\"    #3\n         EX    R6,CLC#3311             CHECK FOR \"3311\"             #3\n         BE    SET#3311                YES = GO SETUP FOR \"3311\"    #3\n         EX    R6,CLC#3390             CHECK FOR \"3390\"             #3\n         BE    SET#3390                YES = GO SETUP FOR \"3390\"    #3\n         PUTLINE PARM=LINEOUT,OUTPUT=(PBP1,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PBP2,DATA),MF=(E,VIOPL)       #5\n*        TPUT  BADPARM1,LBPRM1         TELL USER OF BAD PARM VALUE  #3\n*        TPUT  BADPARM2,LBPRM2         TELL USER OF BAD PARM VALUE  #3\n         LA    R15,8                   SET RETRUN CODE              #3\n         B     FINISH                  GO AWAY WITH NO VOLS OUTPUT  #3\n         SPACE\nCLC#ALL  CLC   ADALL(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#PRIV CLC   APRIV(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#PUBL CLC   APUBL(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#STOR CLC   ASTOR(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3380 CLC   D3380(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3350 CLC   D3350(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3330 CLC   D3330(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3311 CLC   D3311(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3390 CLC   D3390(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\n         SPACE\nSET#ALL  EQU   *                                                    #3\n         MVI   SELFLAGS,ALLDEVT        SET SELECTION BITS           #3\n         OI    SELFLAGS,ALLATTR        SET SELECTION BITS           #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#PRIV EQU   *                                                    #3\n         MVI   SELFLAGS,ATTRPRIV       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLDEVT        SET BITS FOR DEVICE TYPES    #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#PUBL EQU   *                                                    #3\n         MVI   SELFLAGS,ATTRPUBL       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLDEVT        SET BITS FOR DEVICE TYPES    #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#STOR EQU   *                                                    #3\n         MVI   SELFLAGS,ATTRSTOR       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLDEVT        SET BITS FOR DEVICE TYPES    #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3380 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3380       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3350 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3350       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3330 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3330       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3311 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3311       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3390 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3390       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\n         EJECT\nTPUTH1   EQU   *\n         MVI   SERFLG,C'N'         SET VOLSER FLAG                  #5\n         L     R6,VOLNAME              POINT AT PARM                #5\n         LTR   R6,R6                   IF PARM ADDRESS IS ZERO      #5\n         BZ    TPUTH2                     THEN SKIP MOVE OF VOLSER  #5\n         LH    R7,VOLNAME+4            GET LENGTH OF PARM           #5\n         LTR   R7,R7                   IF LENGTH IS ZERO            #5\n         BZ    TPTH2                      THEN SKIP BCTR            #5\n         BCTR  R7,0                    REDUCE FOR EX OF CLC         #5\nTPTH2    EQU   *\n         STH   R7,SERLEN               SAVE SERIAL NUMBER LENGTH    #5\n         MVI   SERFLG,C'Y'         SET VOLSER FLAG                  #5\n         EX    R7,SERMOVE              MOVE VOLSER TO HOLD AREA     #5\nTPUTH2   EQU   *\n         MVI   UCBFLG,C'N'             SET UCBADR FLAG              #5\n         L     R6,VOLADDR              POINT AT PARM                #5\n         LTR   R6,R6                   IF PARM ADDRESS IS ZERO      #5\n         BZ    TPUTH3                     THEN SKIP MOVE OF UCBADR  #5\n         LH    R7,VOLADDR+4            GET LENGTH OF PARM           #5\n         LTR   R7,R7                   IF LENGTH IS ZERO            #5\n         BZ    TPTH3                      THEN SKIP BCTR            #5\n         BCTR  R7,0                    REDUCE FOR EX OF CLC         #5\nTPTH3    EQU   *\n         STH   R7,UCBLEN               SAVE UCB ADDRESS LENGTH      #5\n         MVI   UCBFLG,C'Y'             SET UCBADR FLAG              #5\n         EX    R7,UCBMOVE              MOVE UCBADR TO HOLD AREA     #5\n         B     TPUTH3                  SKIP THE EXECUTED STUFF      #5\n         SPACE\nSERMOVE  MVC   SERVAL(0),0(R6)         MOVE IN VOL SERIAL           #5\nUCBMOVE  MVC   UCBVAL(0),0(R6)         MOVE IN UCB ADDRESS          #5\n         SPACE\nTPUTH3   EQU   *\n         SR    R9,R9                   CLEAR OUT LINE COUNTER       #6\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH1,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH2,DATA),MF=(E,VIOPL)       #5\n         LA    R9,2(0,R9)              INCRIMENT THE LINE COUNTER   #6\n*        L     R4,16             @ CVT                          @MK\n*        L     R2,40(R4)         @ UCB LOOKUP TABLE             @MK\n*CBLOOP  EQU   *                                                @MK\n*        LH    R3,0(R2)          GET UCB ADDR.                  @MK\n*        SLL   R3,16               MAKE SURE THE UCB ADDR IS    @MK\n*        SRL   R3,16               CLEAN IN THE HIGH ORDER BITS @MK\n*        LA    R2,2(R2)          BUMP TO NEXT...                @MK\n*        LTR   R3,R3               CHECK FOR NULL               @MK\n*        BZ    UCBLOOP           GET NEXT IF NULL               @MK #5\n*        CL    R3,=X'0000FFFF'   END OF TABLE?                  @MK\n*        BE    DONE              YES...                         @MK\n************************************************************\n*        SET UCB SCAN                                           @MK\n************************************************************    @MK\n         XC    WKAREA,WKAREA       CLEAR WKAREA           @MK\n         LA    R1,WKAREA             SET UP PARM LIST         @MK\n         ST    R1,PARMWA                                        @MK\n         LA    R1,DEVCLASS                                      @MK\n         ST    R1,PARMDEVT                                      @MK\n         MVI   DEVCLASS,UCB3DACC       SEARCH DIRECT ACCESS ONLY@MK\n         LA    R1,ADDRUCB                                       @MK\n         ST    R1,PARMUCB                                       @MK\n         OI    PARMUCB,X'80'           INDICATE END OF PARMLIST @MK\n************************************                            @MK\n*        SCAN UCB                                               @MK\n************************************                            @MK\nUCBLOOP  LA    R1,PARMLIST                                      @MK\n         L     R5,CVTPTR                                        @MK\n         USING CVT,R5                                           @MK\n         L     R15,CVTUCBSC        SCAN SERVICE ADDRESS         @MK\n         DROP  R5                                               @MK\n         BALR  R14,R15                                          @MK\n         LTR   R15,R15                                          @MK\n         BNZ   DONE                NO MORE UCBS                 @MK\n*        USING UCBOB,R3                                         @MK\n         L     R3,ADDRUCB                                       @MK\n*        TM    18(R3),X'20'      DISK?                          @MK\n*        BZ    UCBLOOP            NO                            @MK #5\n         TM    3(R3),X'80'       ONLINE?\n         BZ    UCBLOOP            NO                                #5\n         TM    6(R3),X'40'       READY? (CHECK NOT READY FLAG)      #5\n         BNZ   UCBLOOP            NO    WAS BCR 7,R4                #5\n         MVC   LINE(LNGT),BLANKS   MOVE IN BLANKS TO OUTPUT LINE    #2\n         MVC   ADDRT(3),13(R3)     MAKE COPY OF CHARACTER UNIT NAME #1\n         TR    ADDRT(3),TRTAB      TR ALPHA CHARACTERS A-F TO FA-FF #1\n         CLC   ADDRTL,ADDRT        COMPARE UNIT NAMES               #1\n         BNL   UCBLOOP             GET NEXT UCB                     #5\nCHKVOL   EQU   *\n         CLI   SERFLG,C'N'         IF VOL COMPARE NOT NEEDED        #5\n         BE    CHKUCB                 THEN CHECK ADDRESS WANTED     #5\n         LH    R6,SERLEN           LOAD LENGTH OF SERIAL#-1         #5\n         EX    R6,SERCLC           COMPARE SERIAL NUMBER TO UCB     #5\n         BNE   UCBLOOP             TRY NEXT VOLSER                  #5\nCHKUCB   EQU   *\n         CLI   UCBFLG,C'N'         IF UCB COMPARE NOT NEEDED        #5\n         BE    SAVE01                 THEN CONTINUE LIKE BEFORE     #5\n         LH    R6,UCBLEN           LOAD LENGTH OF UCB ADDRESS       #5\n         EX    R6,UCBCLC           COMPARE UCB ACCRESS TO UCB       #5\n         BNE   UCBLOOP             TRY NEXT VOLSER                  #5\n         B     SAVE01                  CONTINUE AS USUAL            #5\n         SPACE\nSERCLC   CLC   SERVAL(0),28(R3)        COMPARE REQUESTED VOL - UCB  #5\nUCBCLC   CLC   UCBVAL(0),13(R3)        COMPARE REQUESTED ADR - UCB  #5\n         SPACE\nSAVE01   EQU   *\n         MVC   VOLSER(6),28(R3)    MOVE THE VOLSER TO OUTPUT AREA\n         MVC   ADDR(3),13(R3)      MOVE THE UNIT ADDRESS TO AREA\n         MVC   ADDRTL,ADDRT        KEEP TRANSLATED UNIT NAME        #1\n         EJECT\nT3380    EQU   *\n         CLI   19(R3),X'0E'        IS THIS A 3380\n         BNE   T3350               NO GO TRY 3350\n         TM    SELFLAGS,DEVT3380   CHECK FOR 3380 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3380'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3350    EQU   *\n         CLI   19(R3),X'0B'        IS THIS A 3350\n         BNE   T3311               NO GO TRY 3330-1\n         TM    SELFLAGS,DEVT3350   CHECK FOR 3350 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3350'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3311    EQU   *\n         CLI   19(R3),X'0D'        IS THIS A 3330-1\n         BNE   T3330               NO GO TRY 3330\n         TM    SELFLAGS,DEVT3311   CHECK FOR 3311 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3311'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3330    EQU   *\n         CLI   19(R3),X'09'        IS THIS A 3330\n         BNE   T3390               NO GO TRY 3390\n         TM    SELFLAGS,DEVT3330   CHECK FOR 3330 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3330'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3390    EQU   *\n         CLI   19(R3),X'0F'        IS THIS A 3390\n         BNE   UNKN                NO GO MOVE IN \"UNKN\"\n         TM    SELFLAGS,DEVT3390   CHECK FOR 3390 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3390'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nUNKN     EQU   *\n         MVC   DEVT(4),=C'UNKN'    FOUND SOMETHING THAT WE DONT KNOW\nGOTDEV   EQU   *\n         LR    R0,R3               GOT A GOOD ONE.\n         LA    R1,OUTPUT           SETUP FOR LSPCE SVC\n         SVC   78                  ISSUE LSPCE\n         MVC   ALLC(3),=C'YES'     SET ALLOCATED MSG\n         TM    3(R3),X'08'         TEST IF ALLOCATED\n         BO    CHKPRIV             BRANCH IF ALLOCATED              #2\n         MVC   ALLC(3),=C'NO '     NOT ALLOCATED\nCHKPRIV  TM    34(R3),X'10'        IS THIS VOL PRIVATE              #2\n         BZ    CHKPUBL             NO -- TRY PUBLIC                 #2\n         TM    SELFLAGS,ATTRPRIV   CHECK FOR PRIV SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   ATTR(4),=C'PRIV'    MOVE IN PUBLIC LITERAL           #2\n         B     MOVESPCE            GO DO SPACE MOVES                #2\nCHKPUBL  TM    34(R3),X'08'        IS THIS VOL PUBLIC               #2\n         BZ    CHKSTOR             NO -- TRY STORAGE                #2\n         TM    SELFLAGS,ATTRPUBL   CHECK FOR PUBL SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   ATTR(4),=C'PUBL'    MOVE IN PRIVATE LITERAL          #2\n         B     MOVESPCE            GO DO SPACE MOVES                #2\nCHKSTOR  TM    34(R3),X'04'        IS THIS VOL PUBLIC               #2\n         BZ    CHKFAIL             NO -- INDICATE UNKN              #2\n         TM    SELFLAGS,ATTRSTOR   CHECK FOR STOR SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   ATTR(4),=C'STOR'    MOVE IN PRIVATE LITERAL          #2\n         B     MOVESPCE            GO DO SPACE MOVES                #2\nCHKFAIL  MVC   ATTR(4),=C'UNKN'    MOVE IN UNKNOWN LITERAL          #2\nMOVESPCE MVC   CYL(4),FCYL         MOVE IN FREE CYLS\n         MVC   TRK(4),FTRK         MOVE IN FREE TRKS\n         MVC   XTNS(4),NXTN        MOVE IN NUM EXTENTS\n         MVC   XCYL(4),OCYL        MOVE IN CONTIG CYLS\n         MVC   XTRK(4),OTRK        MOVE IN CONTIG TRKS\n         MVI   PLUS,C'+'           MOVE IN THE \"+\"                  #2\n         SR    R5,R5                   CLEAR R5 FOR ICM             #4\n         MVC   DCBS,=CL6'     0'       MOVE IN INITIAL DCB COUNT    #4\n         ICM   R5,B'0001',35(R3)       INSERT THE DCB COUNT         #4\n         BZ    DONEDCB                 GO AWAY                      #4\n         SLL   R5,25                   SHIFT LEFT TO REMOVE \"MOUNT\" #4\n         SRL   R5,25                   SHIFT RIGHT TO RESTORE COUNT #4\n         CVD   R5,DCBCNT               MAKE DCBCOUNT DECIMAL        #4\n         MVC   DCBS(6),DCBEDT          MOVE IN EDIT FIELD           #4\n         ED    DCBS(6),DCBCNT+5        PUT IN THE EDITED DCB COUNT  #4\n         SPACE\nDONEDCB  EQU   *                                                    #4\n         CLI   SCRNFLG,C'N'            IF THIS IS NOT-SCREEN MODE   #6\n         BE    SHOWLINE                   THEN CONTINUE THIS CODE   #6\n         C     R9,MAXLINES             IF LINES EXCEEDED            #6\n         BL    SHOWLINE                   THEN DISPLAY HEADING      #6\n         SR    R9,R9                   CLEAR OUT LINE COUNTER       #6\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH1,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH2,DATA),MF=(E,VIOPL)       #5\n         LA    R9,2(0,R9)              INCRIMENT THE LINE COUNTER   #6\nSHOWLINE MVC   PLNE(4),PLNELN          MOVE LINE LENGTH FOR PUTLINE #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLNE,DATA),MF=(E,VIOPL)       #5\n         LA    R9,1(0,R9)              INCRIMENT THE LINE COUNTER   #6\n         MVI   LINEFLG,C'Y'        SET THE DISPLAYED FLAG           #5\n         B     UCBLOOP             GO DO NEXT UCB ENTRY\n         SPACE\nDONE     EQU   *\n         CLI   LINEFLG,C'Y'            IF SOME DEVICES DISPLAYED    #5\n         BE    DONE1                      THEN SKIP NODEVICE MSG    #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLBS,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLE2,DATA),MF=(E,VIOPL)       #5\n         SPACE\nDONE1    EQU   *\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLBS,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLE1,DATA),MF=(E,VIOPL)       #5\n*        TPUT  BLANKS,1            PUT OUT BLANK LINE               #2\n*        TPUT  END1,L'END1         PUT OUT END MESSAGE              #2\n         LA    R15,0               SETUP RETURN CODE                #3\n         SPACE\nFINISH   FINISH RC=(R15)                                            #3\n         EJECT\nPLH1     DC    AL2(LHDR1+4),AL2(0)     LENGTH FOR PUTLINE           #5\nHDR1     DC    C'            UNIT TOT FR TOT FR  TOT   LRG. FREE   IN '\n         DC    C'  UNIT  OPEN'                                      #4\nLHDR1    EQU   *-HDR1                                               #2\nPLH2     DC    AL2(LHDR2+4),AL2(0)     LENGTH FOR PUTLINE           #5\nHDR2     DC    C'VOLSER DEVT ADDR   CYL    TRK   XTNS  CYLS+TRKS   USE'\n         DC    C'  ATTR  DCBS'                                      #4\nLHDR2    EQU   *-HDR2                                               #2\nPLE1     DC    AL2(LEND1+4),AL2(0)     LENGTH FOR PUTLINE           #5\nEND1     DC    C'**PROCESSING COMPLETED**  ---  VOLS REL.01 MOD.08' #6\nLEND1    EQU   *-END1                                               #5\nPLE2     DC    AL2(LEND2+4),AL2(0)     LENGTH FOR PUTLINE           #5\nEND2     DC    C'  0 DEVICES SELECTED '                             #4\nLEND2    EQU   *-END2                                               #5\nPLBS     DC    AL2(5),AL2(0)           LENGTH FOR PUTLINE           #5\nBLANKS   DC    CL80' '             BLANKS FOR ASSORTED THINGS       #2\nPLNELN   DC    AL2(LNGT+4),AL2(0)      LENGTH FOR PUTLINE OF LINE   #5\nDCBEDT   DC    XL06'402020202120'  EDIT PATTERN FOR OPEN DCB COUNT  #4\nTRTAB    DC    256X'00'            TRANSLATE TABLE                 1.\n         ORG   TRTAB+C'A'                                          1.\n         DC    X'FAFBFCFDFEFF'                                     1.\n         ORG   TRTAB+C'0'                                          1.\n         DC    X'F0F1F2F3F4F5F6F7F8F9'                             1.\n         ORG\nPBP1     DC    AL2(LBPRM1+4),AL2(0)    LENGTH FOR PUTLINE           #5\nBADPARM1 DC    C'INVALID SELECTION KEYWORD - '                      #3\nLBPRM1   EQU   *-BADPARM1          SETUP LENGTH FOR TPUT            #3\nPBP2     DC    AL2(LBPRM2+4),AL2(0)    LENGTH FOR PUTLINE           #5\nBADPARM2 DC    C'  VALID ARE: ALL PRIVATE PUBLIC STORAGE '          #3\n         DC    C'3380 3350 3330 3311 AND 3390'                      #3\nLBPRM2   EQU   *-BADPARM2          SETUP LENGTH FOR TPUT            #3\nADALL    DC    CL8'ALL     '           SELECT ALL VOLUMES           #3\nAPRIV    DC    CL8'PRIVATE '           ATTRIB IS PRIVATE            #3\nAPUBL    DC    CL8'PUBLIC  '           ATTRIB IS PUBLIC             #3\nASTOR    DC    CL8'STORAGE '           ATTRIB IS STORAGE            #3\nD3380    DC    CL8'3380    '           DEVICE IS 3380               #3\nD3350    DC    CL8'3350    '           DEVICE IS 3350               #3\nD3330    DC    CL8'3330    '           DEVICE IS 3330               #3\nD3311    DC    CL8'3311    '           DEVICE IS 3311               #3\nD3390    DC    CL8'3390    '           DEVICE IS 3390               #3\nALLDEVT  EQU   X'F1'                   SETUP FOR DEVICE TYPES       #3\nALLATTR  EQU   X'0E'                   SETUP FOR ALL ATTRIBS        #3\nDEVT3380 EQU   X'80'               SETUP DEVICE TYPE 3380           #3\nDEVT3350 EQU   X'40'               SETUP DEVICE TYPE 3350           #3\nDEVT3330 EQU   X'20'               SETUP DEVICE TYPE 3330           #3\nDEVT3311 EQU   X'10'               SETUP DEVICE TYPE 3311           #3\nATTRPRIV EQU   X'08'               SETUP FOR PRIVATE DEVICES        #3\nATTRPUBL EQU   X'04'               SETUP FOR PUBLIC  DEVICES        #3\nATTRSTOR EQU   X'02'               SETUP FOR STORAGE DEIVCES        #3\nDEVT3390 EQU   X'01'               SETUP DEVICE TYPE 3390           #3\nVOLPCLP  DC    V(PCLCSECT)         POINTER TO PCLCSECT FOR PARSE    #3\n         SPACE\n         LTORG\n         EJECT\nWORKAREA DSECT                                                      #2\nSAVEAREA DS    18F                     SAVEAREA FOR REGISTERS       #2\nSELFLAGS DS    F                       SELECTION FLAGS              #3\nVOLCPPL  DS    F                       ADDRESS OF CPPL              #3\nVOLPSCB  DS    F                       ADDRESS OF PSCB              #5\nVOLECB   DS    F                       ECB FOR PARSE TO USE         #3\nVOLANS   DS    F                       ANSWER AREA FOR PARSE        #3\nVOLUWA   DS    4F                      USER WORK AREA FOR PARSE     #3\nVOLPPL   DS    7F                      PPL FOR USE WITH PARSE       #3\nVIOPL    DS    4F                      IOPL FOR PUTLINE SUPPORT     #5\nMAXLINES DS    F                       MAX SCREEN SIZE              #6\nSCRNFLG  DS    CL1                     DISPLAY SCREEN FLAG          #6\nSERLEN   DS    H                       LENGTH OF VOLSER PARM        #5\nUCBLEN   DS    H                       LENGTH OF UCBADR PARM        #5\nSERFLG   DS    CL1                     FLAG USED TO SELECT VOLSER   #5\nUCBFLG   DS    CL1                     FLAG USED TO SELECT UCBADR   #5\nSERVAL   DS    CL6                     VALUE OF THE VOLSER PARM     #5\nUCBVAL   DS    CL3                     VALUE OF THE UCBADR PARM     #5\nLINEFLG  DS    CL1                     DEVICE SELECTED FLAG         #5\nTIMEDATE DS    D                       AREA FOR THE TIME AND DATE   #3\nDCBCNT   DS    D                       NUMBER OF OPEN DCBS          #4\nOUTPUT   DS    0CL30                   LSPACE OUTPUT AREA           #2\n         DS    CL6                                                  #2\nFCYL     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nFTRK     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nNXTN     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nOCYL     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nOTRK     DS    CL4                                                  #2\n         SPACE 1\n         DS    0D                  ALIGNMENT                        #2\nPLNE     DS    AL2(LNGT+4),AL2(0)      LENGTH FOR PUTLINE           #5\nLINE     EQU   *                                                    #2\nVOLSER   DS    CL7' '              VOLUME SERIAL NUMBER             #2\nDEVT     DS    CL6' '              DEVICE TYPE                      #2\nADDR     DS    CL5' '              DEVICE ADDRESS                   #2\nCYL      DS    CL7' '              FREE CYLS                        #2\nTRK      DS    CL7' '              FREE TRKS                        #2\nXTNS     DS    CL6' '              EXTENTS                          #2\nXCYL     DS    CL4' '              CONTIG CYLS                      #2\nPLUS     DS    CL1'+'                                               #2\nXTRK     DS    CL7' '              CONTIG TRKS                      #2\nALLC     DS    CL5' '              ALLOCATED FLAG                   #2\nATTR     DS    CL4' '              VOLUME ATTRIBUTES PUBL/PRIV/STOR #2\nDCBS     DS    CL6' '              NUMBER OF OPEN DCBS              #4\nLNGT     EQU   *-LINE                                               #2\n         SPACE 1\nADDRT    DS    CL3                 FIELD TO TRANSLATE UNIT NAME IN 1#2\nADDRTL   DS    CL3                 FIELD TO HOLD TRANS UNIT NAME   1#2\nLINEOUT  PUTLINE MF=L              LIST FORMAT OF PUTLINE           #5\n************* @MK @MK @MK *******************************\n*     UCB SCAN AREAS                                            @MK\nPARMLIST DS    3F         PARMLIST MAPPING                      @MK\n         ORG   PARMLIST                                         @MK\nPARMWA   DS    F          ADDRESS OF 100-BYTE WKAREA          @MK\nPARMDEVT DS    F          ADDR OF BYTE CONTAINING DEVTYPE TO SEARCH\nPARMUCB  DS    F          ADDRESS OF WORD TO CONTAIN UCB ADDR   @MK\n         SPACE                                                , @MK\nDEVCLASS DS    CL1        BYTE CONTAINING DEVICE CLASS TO BE SEARCHED\nADDRUCB  DS    F          UCB ADDRESSES PLACED HERE BY UCB SCAN @MK\n         DS    0D         ALIGN WKAREA ON D-WORD BOUNDARY     @MK\nWKAREA   DS    CL100      WKAREA                              @MK\nDEVNUM   DS    F          UCBNAME                               @MK\n@SL      EQU   ((*-SAVEAREA+8/16)*16) LENGTH OF WORKAREA            #2\n         EJECT\nVOLS     CSECT\n         PRINT ON,NOGEN                                             #3\nPCLCSECT IKJPARM DSECT=PCLDSECT                                     #3\n         SPACE\nVOLCLEAR IKJKEYWD ,                                                 #6\n         IKJNAME 'CLEAR'                                            #6\n         SPACE\nVOLPTYPE IKJKEYWD DEFAULT='TYPE'                                    #3\n         IKJNAME  'TYPE',SUBFLD=$VOLTYPE                            #3\n         IKJNAME  'ATTRIBUTE',SUBFLD=$VOLTYPE                       #3\n         IKJNAME  'DEVICETYPE',ALIAS='DEVT',SUBFLD=$VOLTYPE         #3\n         SPACE\nVOLPNAME IKJKEYWD ,                                                 #5\n         IKJNAME  'SERIAL',SUBFLD=$VOLNAME                          #5\n         IKJNAME  'VOLSER',SUBFLD=$VOLNAME                          #5\n         SPACE\nVOLPADDR IKJKEYWD ,                                                 #5\n         IKJNAME  'ADDRESS',SUBFLD=$VOLADDR                         #5\n         IKJNAME  'UCBNAME',SUBFLD=$VOLADDR                         #5\n         SPACE\n$VOLTYPE IKJSUBF\nVOLTYPE  IKJIDENT 'SELECTION VALUE',UPPERCASE,MAXLNTH=8,            #3 X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                       #3 X\n               DEFAULT='ALL',HELP='DASD DEVICE SELECTION VALUE'     #3\n         SPACE\n$VOLNAME IKJSUBF\nVOLNAME  IKJIDENT 'SELECTION VALUE',UPPERCASE,MAXLNTH=6,            #5 X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                       #5 X\n               PROMPT='VOLUME SERIAL NUMBER - 6 DIGIT MAX',         #5 X\n               HELP='DASD VOLSER SELECTION VALUE'                   #5\n         SPACE\n$VOLADDR IKJSUBF\nVOLADDR  IKJIDENT 'SELECTION VALUE',UPPERCASE,MAXLNTH=3,            #5 X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                       #5 X\n               PROMPT='UCB ADDRESS - 3 DIGIT MAX',                  #5 X\n               HELP='DASD ADDRESS SELECTION VALUE'                  #5\n         SPACE\n         IKJENDP\n         SPACE\n         IKJPPL\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJIOPL\n         SPACE\n         DSECT\n         IEFUCBOB         UCB MACRO\n         CVT   DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VOLSOLDS": {"ttr": 9219, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\"\\x7f\\x00\\x92\"\\x7f\\x14\\x12\\x02\\x07\\x02\\x07\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-08-14T00:00:00", "modifydate": "1992-08-14T14:12:00", "lines": 519, "newlines": 519, "modlines": 0, "user": "SBGCSC"}, "text": "         TITLE 'WSRCC - VOLS TSO C.P.  --  VERSION 6'\n         PRINT ON,NOGEN\n***********************************************************************\n*                                                                     *\n*  THIS PROGRAM (COMMAND) WILL LIST THE AVAILABLE FREE SPACE ON ALL   *\n*  OR SELECTED ONLINE DISK PACKS.  AS IT IS HERE, IT WILL NOT WORK    *\n*  UNDER MVS/XA.  THIS CP WAS ORIGIONALLY FROM CAMBRIDAGE SYSTEMS     *\n*  GROUP AND WAS DISTRIBUTED IN AN \"AS IS\" FORM WITH A VERY EARLY     *\n*  VERSION OF THE ASM2 PACKAGE.  THIS CP CONTAINED NO COPYRITE NOTICE *\n*  IN ANY FORM .  I HAVE RECEIVED PERMISSION FROM CSG TO PUT THIS ON  *\n*  THE CBT TAPE.  - J.MARTIN  02/15/85                                *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*--------------MODIFICATION.LOG---------------------------------------*\n*                                                                     *\n*  PROGRAMMER  |  DATE  |  SUMMARY OF CHANGES MADE TO THIS PROGRAM    *\n*--------------+--------+---------------------------------------------*\n* TOM JARVIS   |01/21/80| 1. CHANGED CONTROL UNIT NAME CHECK SO THAT  *\n*              |        |    ALL DISK VOLUMES ARE LISTED.             *\n* JOE MARTIN   |03/29/82| 2. ADDED THE UNIT ATTR DISPLAY FOR EACH     *\n*              |        |    VOLUME. DISPLAY IS STOR, PRIV OR PUBL.   *\n*              |        |    ADDED THE BEGIN AND FINISH MACROS.       *\n*              |        |    MOVED MOST OF WORKAREA TO DSECT.         *\n*              |        |                                             *\n* JOE MARTIN   |05/20/82| 3. ADDED SOME SELECTION TO THE VOLS COMMAND.*\n*              |        |    FORMAT IS \"TYPE(....) (DEVT AND ATTR)    *\n*              |        |    WHERE THE \"....\" IS DEVICE TYPE OR       *\n*              |        |    OR DEVICE ATTRIBUTE. EXAMPLE:            *\n*              |        |    VOLS TYPE(3350) -- SELECT ONLY 3350'S    *\n*              |        |    VOLS TYPE(PRIV) -- SELECT PRIVATE VOLS.  *\n*              |        |                                             *\n* JOE MARTIN   |11/02/82| 4. ADDED NUMBER OF OPEN DCB'S TO THE        *\n*              |        |    OUTPUT DISPLAY FOR THE VOLS COMMAND.     *\n*              |        |                                             *\n* JOE MARTIN   |03/21/83| 5. ADDED SELECTION FOR VOLSER OR UCB ADDR   *\n*              |        |    ADDED PUTLINE SUPPORT REPLACING TPUT.    *\n*              |        |    FIXED PROBLEM WITH UCB TABLE LOOKUP RTN. *\n*              |        |                                             *\n* JOE MARTIN   |03/25/83| 6. ADDED CLEAR KEYWORD TO CLEAR THE SCREEN  *\n*              |        |    WHEN RUNNING UNDER VTAM.                 *\n*              |        |                                             *\n*              |        |                                             *\n*---------------------------------------------------------------------*\n         SPACE 2\nVOLS     BEGIN SAVE=(SAVEAREA,@SL,17),AUTHOR=CSG,VER=006            #2\n         SPACE 1\n         LR    R11,R1                  POINT AT CPPL.               #3\n         USING CPPL,R11\n         ST    R11,VOLCPPL             SAVE CPPL ADDRESS            #3\n         LA    R7,VIOPL                POINT AT IOPL                #5\n         USING IOPL,R7                 SET UP ADDRESSIBILITY - IOPL #5\n         LA    R9,VOLPPL               POINT TO PPL                 #3\n         USING PPL,R9                  SET UP ADDRESSABILITY TO PPL #3\n         L     R10,CPPLPSCB            POINT AT PSCB.               #3\n         ST    R10,VOLPSCB             STORE BUFFER ADDRESS IN PPL  #3\n         L     R10,CPPLCBUF            COMMAND BUFFER               #3\n         ST    R10,PPLCBUF             STORE BUFFER ADDRESS IN PPL  #3\n         L     R10,CPPLUPT             USER PROFILE TABLE           #3\n         ST    R10,PPLUPT              STORE UPT IN PPL             #3\n         ST    R10,IOPLUPT             STORE UPT IN IOPL            #5\n         L     R10,CPPLECT             ENVIRONMENT CONTROL TABLE    #3\n         ST    R10,PPLECT              STORE ECT IN PPL             #3\n         ST    R10,IOPLECT             STORE ECT IN IOPL            #5\n         L     R10,VOLPCLP             PARSE CONTROL LIST           #3\n         ST    R10,PPLPCL              STORE PCL IN PPL             #3\n         LA    R10,VOLECB              EVENT CONTROL BLOCK          #3\n         ST    R10,PPLECB              STORE ECB IN PPL             #3\n         ST    R10,IOPLECB             STORE ECB IN IOPL            #5\n         LA    R10,VOLANS              ANSWER AREA                  #3\n         ST    R10,PPLANS              STORE ANSWER ADDRESS IN PPL  #3\n         LA    R10,VOLUWA              USER WORK AREA               #3\n         ST    R10,PPLUWA              STORE WORK ADDRESS IN PPL    #3\n         DROP  R7                                                   #5\n         DROP  R9                                                   #5\n         DROP  R11                                                  #5\n         MVI   LINEFLG,C'N'            INITIALIZE DEVICE SELECT FLG #5\n         LR    R1,R9                   POINTER TO PPL IN R1         #3\n         CALLTSSR EP=IKJPARS           CALL PARSER                  #3\n         LTR   R15,R15                 CHECK FOR ZERO PARSE RETURN  #3\n         BNZ   FINISH                  GO AWAY UPSET                #3\n         L     R8,VOLANS               LOAD ANSWER AREA FOR USING   #3\n         USING PCLDSECT,R8             SET UP ADDRESSABILITY TO ANS #3\n         MVI   SCRNFLG,C'N'            SET NOT-SCREEN FLAG          #6\n         SR    R7,R7                   CLEAR R7 FOR POINTER         #6\n         LH    R7,VOLCLEAR             GET POINTER VALUE            #6\n         LTR   R7,R7                   IF PARM NOT PRESENT          #6\n         BZ    CHKVOLTP                   THEN CONTINUE             #6\n         GTSIZE ,                      GET SCREEN DISPLAY SIZE      #6\n         LTR   R0,R0                   IF DISPLAY TERMINAL          #6\n         BZ    CHKVOLTP                   THEN CONTINUE             #6\n         MVI   SCRNFLG,C'Y'            SET SCREEN FLAG              #6\n         BCTR  R0,0                    REDUCE FOR THE \"***\"         #6\n         ST    R0,MAXLINES             SAVE SCREEN DISPLAY SIZE     #6\n         STFSMODE ON,INITIAL=YES       CLEAR SCREEN                 #6\n         STFSMODE OFF                  CLEAR SCREEN                 #6\nCHKVOLTP EQU   *\n         L     R7,VOLTYPE              POINT AT PARAMETER           #3\n         LH    R6,VOLTYPE+4            GET LENGTH OF PARAMETER      #3\n         BCTR  R6,0                    REDUCE R6 FOR EX OF CLC      #3\n         EX    R6,CLC#ALL              CHECK FOR \"ALL\"              #3\n         BE    SET#ALL                 YES = GO SETUP FOR \"ALL\"     #3\n         EX    R6,CLC#PRIV             CHECK FOR \"PRIVATE\"          #3\n         BE    SET#PRIV                YES = GO SETUP FOR \"PRIVATE\" #3\n         EX    R6,CLC#PUBL             CHECK FOR \"PUBLIC\"           #3\n         BE    SET#PUBL                YES = GO SETUP FOR \"PUBLIC\"  #3\n         EX    R6,CLC#STOR             CHECK FOR \"STORAGE\"          #3\n         BE    SET#STOR                YES = GO SETUP FOR \"STORAGE\" #3\n         EX    R6,CLC#3380             CHECK FOR \"3380\"             #3\n         BE    SET#3380                YES = GO SETUP FOR \"3380\"    #3\n         EX    R6,CLC#3350             CHECK FOR \"3350\"             #3\n         BE    SET#3350                YES = GO SETUP FOR \"3350\"    #3\n         EX    R6,CLC#3330             CHECK FOR \"3330\"             #3\n         BE    SET#3330                YES = GO SETUP FOR \"3330\"    #3\n         EX    R6,CLC#3311             CHECK FOR \"3311\"             #3\n         BE    SET#3311                YES = GO SETUP FOR \"3311\"    #3\n         EX    R6,CLC#2314             CHECK FOR \"2314\"             #3\n         BE    SET#2314                YES = GO SETUP FOR \"2314\"    #3\n         PUTLINE PARM=LINEOUT,OUTPUT=(PBP1,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PBP2,DATA),MF=(E,VIOPL)       #5\n*        TPUT  BADPARM1,LBPRM1         TELL USER OF BAD PARM VALUE  #3\n*        TPUT  BADPARM2,LBPRM2         TELL USER OF BAD PARM VALUE  #3\n         LA    R15,8                   SET RETRUN CODE              #3\n         B     FINISH                  GO AWAY WITH NO VOLS OUTPUT  #3\n         SPACE\nCLC#ALL  CLC   ADALL(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#PRIV CLC   APRIV(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#PUBL CLC   APUBL(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#STOR CLC   ASTOR(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3380 CLC   D3380(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3350 CLC   D3350(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3330 CLC   D3330(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3311 CLC   D3311(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#2314 CLC   D2314(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\n         SPACE\nSET#ALL  EQU   *                                                    #3\n         MVI   SELFLAGS,ALLDEVT        SET SELECTION BITS           #3\n         OI    SELFLAGS,ALLATTR        SET SELECTION BITS           #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#PRIV EQU   *                                                    #3\n         MVI   SELFLAGS,ATTRPRIV       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLDEVT        SET BITS FOR DEVICE TYPES    #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#PUBL EQU   *                                                    #3\n         MVI   SELFLAGS,ATTRPUBL       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLDEVT        SET BITS FOR DEVICE TYPES    #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#STOR EQU   *                                                    #3\n         MVI   SELFLAGS,ATTRSTOR       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLDEVT        SET BITS FOR DEVICE TYPES    #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3380 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3380       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3350 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3350       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3330 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3330       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3311 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3311       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#2314 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT2314       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\n         EJECT\nTPUTH1   EQU   *\n         MVI   SERFLG,C'N'         SET VOLSER FLAG                  #5\n         L     R6,VOLNAME              POINT AT PARM                #5\n         LTR   R6,R6                   IF PARM ADDRESS IS ZERO      #5\n         BZ    TPUTH2                     THEN SKIP MOVE OF VOLSER  #5\n         LH    R7,VOLNAME+4            GET LENGTH OF PARM           #5\n         LTR   R7,R7                   IF LENGTH IS ZERO            #5\n         BZ    TPTH2                      THEN SKIP BCTR            #5\n         BCTR  R7,0                    REDUCE FOR EX OF CLC         #5\nTPTH2    EQU   *\n         STH   R7,SERLEN               SAVE SERIAL NUMBER LENGTH    #5\n         MVI   SERFLG,C'Y'         SET VOLSER FLAG                  #5\n         EX    R7,SERMOVE              MOVE VOLSER TO HOLD AREA     #5\nTPUTH2   EQU   *\n         MVI   UCBFLG,C'N'             SET UCBADR FLAG              #5\n         L     R6,VOLADDR              POINT AT PARM                #5\n         LTR   R6,R6                   IF PARM ADDRESS IS ZERO      #5\n         BZ    TPUTH3                     THEN SKIP MOVE OF UCBADR  #5\n         LH    R7,VOLADDR+4            GET LENGTH OF PARM           #5\n         LTR   R7,R7                   IF LENGTH IS ZERO            #5\n         BZ    TPTH3                      THEN SKIP BCTR            #5\n         BCTR  R7,0                    REDUCE FOR EX OF CLC         #5\nTPTH3    EQU   *\n         STH   R7,UCBLEN               SAVE UCB ADDRESS LENGTH      #5\n         MVI   UCBFLG,C'Y'             SET UCBADR FLAG              #5\n         EX    R7,UCBMOVE              MOVE UCBADR TO HOLD AREA     #5\n         B     TPUTH3                  SKIP THE EXECUTED STUFF      #5\n         SPACE\nSERMOVE  MVC   SERVAL(0),0(R6)         MOVE IN VOL SERIAL           #5\nUCBMOVE  MVC   UCBVAL(0),0(R6)         MOVE IN UCB ADDRESS          #5\n         SPACE\nTPUTH3   EQU   *\n         SR    R9,R9                   CLEAR OUT LINE COUNTER       #6\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH1,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH2,DATA),MF=(E,VIOPL)       #5\n         LA    R9,2(0,R9)              INCRIMENT THE LINE COUNTER   #6\n         L     R4,16             @ CVT\n         L     R2,40(R4)         @ UCB LOOKUP TABLE\n         SPACE\nUCBLOOP  EQU   *\n         LH    R3,0(R2)          GET UCB ADDR.\n         SLL   R3,16               MAKE SURE THE UCB ADDR IS\n         SRL   R3,16               CLEAN IN THE HIGH ORDER BITS\n         LA    R2,2(R2)          BUMP TO NEXT...\n         LTR   R3,R3               CHECK FOR NULL\n         BZ    UCBLOOP           GET NEXT IF NULL                   #5\n         CL    R3,=X'0000FFFF'   END OF TABLE?\n         BE    DONE              YES...\n         TM    18(R3),X'20'      DISK?\n         BZ    UCBLOOP            NO                                #5\n         TM    3(R3),X'80'       ONLINE?\n         BZ    UCBLOOP            NO                                #5\n         TM    6(R3),X'40'       READY? (CHECK NOT READY FLAG)      #5\n         BNZ   UCBLOOP            NO    WAS BCR 7,R4                #5\n         MVC   LINE(LNGT),BLANKS   MOVE IN BLANKS TO OUTPUT LINE    #2\n         MVC   ADDRT(3),13(R3)     MAKE COPY OF CHARACTER UNIT NAME #1\n         TR    ADDRT(3),TRTAB      TR ALPHA CHARACTERS A-F TO FA-FF #1\n         CLC   ADDRTL,ADDRT        COMPARE UNIT NAMES               #1\n         BNL   UCBLOOP             GET NEXT UCB                     #5\nCHKVOL   EQU   *\n         CLI   SERFLG,C'N'         IF VOL COMPARE NOT NEEDED        #5\n         BE    CHKUCB                 THEN CHECK ADDRESS WANTED     #5\n         LH    R6,SERLEN           LOAD LENGTH OF SERIAL#-1         #5\n         EX    R6,SERCLC           COMPARE SERIAL NUMBER TO UCB     #5\n         BNE   UCBLOOP             TRY NEXT VOLSER                  #5\nCHKUCB   EQU   *\n         CLI   UCBFLG,C'N'         IF UCB COMPARE NOT NEEDED        #5\n         BE    SAVE01                 THEN CONTINUE LIKE BEFORE     #5\n         LH    R6,UCBLEN           LOAD LENGTH OF UCB ADDRESS       #5\n         EX    R6,UCBCLC           COMPARE UCB ACCRESS TO UCB       #5\n         BNE   UCBLOOP             TRY NEXT VOLSER                  #5\n         B     SAVE01                  CONTINUE AS USUAL            #5\n         SPACE\nSERCLC   CLC   SERVAL(0),28(R3)        COMPARE REQUESTED VOL - UCB  #5\nUCBCLC   CLC   UCBVAL(0),13(R3)        COMPARE REQUESTED ADR - UCB  #5\n         SPACE\nSAVE01   EQU   *\n         MVC   VOLSER(6),28(R3)    MOVE THE VOLSER TO OUTPUT AREA\n         MVC   ADDR(3),13(R3)      MOVE THE UNIT ADDRESS TO AREA\n         MVC   ADDRTL,ADDRT        KEEP TRANSLATED UNIT NAME        #1\n         EJECT\nT3380    EQU   *\n         CLI   19(R3),X'0E'        IS THIS A 3350\n         BNE   T3350               NO GO TRY 3330-1\n         TM    SELFLAGS,DEVT3380   CHECK FOR 3350 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3380'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3350    EQU   *\n         CLI   19(R3),X'0B'        IS THIS A 3350\n         BNE   T3311               NO GO TRY 3330-1\n         TM    SELFLAGS,DEVT3350   CHECK FOR 3350 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3350'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3311    EQU   *\n         CLI   19(R3),X'0D'        IS THIS A 3330-1\n         BNE   T3330               NO GO TRY 3330\n         TM    SELFLAGS,DEVT3311   CHECK FOR 3311 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3311'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3330    EQU   *\n         CLI   19(R3),X'09'        IS THIS A 3330\n         BNE   T2314               NO GO TRY 2314\n         TM    SELFLAGS,DEVT3330   CHECK FOR 3330 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3330'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT2314    EQU   *\n         CLI   19(R3),X'08'        IS THIS A 2314\n         BNE   UNKN                NO GO MOVE IN \"UNKN\"\n         TM    SELFLAGS,DEVT2314   CHECK FOR 2314 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'2314'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nUNKN     EQU   *\n         MVC   DEVT(4),=C'UNKN'    FOUND SOMETHING THAT WE DONT KNOW\nGOTDEV   EQU   *\n         LR    R0,R3               GOT A GOOD ONE.\n         LA    R1,OUTPUT           SETUP FOR LSPCE SVC\n         SVC   78                  ISSUE LSPCE\n         MVC   ALLC(3),=C'YES'     SET ALLOCATED MSG\n         TM    3(R3),X'08'         TEST IF ALLOCATED\n         BO    CHKPRIV             BRANCH IF ALLOCATED              #2\n         MVC   ALLC(3),=C'NO '     NOT ALLOCATED\nCHKPRIV  TM    34(R3),X'10'        IS THIS VOL PRIVATE              #2\n         BZ    CHKPUBL             NO -- TRY PUBLIC                 #2\n         TM    SELFLAGS,ATTRPRIV   CHECK FOR PRIV SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   ATTR(4),=C'PRIV'    MOVE IN PUBLIC LITERAL           #2\n         B     MOVESPCE            GO DO SPACE MOVES                #2\nCHKPUBL  TM    34(R3),X'08'        IS THIS VOL PUBLIC               #2\n         BZ    CHKSTOR             NO -- TRY STORAGE                #2\n         TM    SELFLAGS,ATTRPUBL   CHECK FOR PUBL SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   ATTR(4),=C'PUBL'    MOVE IN PRIVATE LITERAL          #2\n         B     MOVESPCE            GO DO SPACE MOVES                #2\nCHKSTOR  TM    34(R3),X'04'        IS THIS VOL PUBLIC               #2\n         BZ    CHKFAIL             NO -- INDICATE UNKN              #2\n         TM    SELFLAGS,ATTRSTOR   CHECK FOR STOR SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   ATTR(4),=C'STOR'    MOVE IN PRIVATE LITERAL          #2\n         B     MOVESPCE            GO DO SPACE MOVES                #2\nCHKFAIL  MVC   ATTR(4),=C'UNKN'    MOVE IN UNKNOWN LITERAL          #2\nMOVESPCE MVC   CYL(4),FCYL         MOVE IN FREE CYLS\n         MVC   TRK(4),FTRK         MOVE IN FREE TRKS\n         MVC   XTNS(4),NXTN        MOVE IN NUM EXTENTS\n         MVC   XCYL(4),OCYL        MOVE IN CONTIG CYLS\n         MVC   XTRK(4),OTRK        MOVE IN CONTIG TRKS\n         MVI   PLUS,C'+'           MOVE IN THE \"+\"                  #2\n         SR    R5,R5                   CLEAR R5 FOR ICM             #4\n         MVC   DCBS,=CL6'     0'       MOVE IN INITIAL DCB COUNT    #4\n         ICM   R5,B'0001',35(R3)       INSERT THE DCB COUNT         #4\n         BZ    DONEDCB                 GO AWAY                      #4\n         SLL   R5,25                   SHIFT LEFT TO REMOVE \"MOUNT\" #4\n         SRL   R5,25                   SHIFT RIGHT TO RESTORE COUNT #4\n         CVD   R5,DCBCNT               MAKE DCBCOUNT DECIMAL        #4\n         MVC   DCBS(6),DCBEDT          MOVE IN EDIT FIELD           #4\n         ED    DCBS(6),DCBCNT+5        PUT IN THE EDITED DCB COUNT  #4\n         SPACE\nDONEDCB  EQU   *                                                    #4\n         CLI   SCRNFLG,C'N'            IF THIS IS NOT-SCREEN MODE   #6\n         BE    SHOWLINE                   THEN CONTINUE THIS CODE   #6\n         C     R9,MAXLINES             IF LINES EXCEEDED            #6\n         BL    SHOWLINE                   THEN DISPLAY HEADING      #6\n         SR    R9,R9                   CLEAR OUT LINE COUNTER       #6\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH1,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH2,DATA),MF=(E,VIOPL)       #5\n         LA    R9,2(0,R9)              INCRIMENT THE LINE COUNTER   #6\nSHOWLINE MVC   PLNE(4),PLNELN          MOVE LINE LENGTH FOR PUTLINE #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLNE,DATA),MF=(E,VIOPL)       #5\n         LA    R9,1(0,R9)              INCRIMENT THE LINE COUNTER   #6\n         MVI   LINEFLG,C'Y'        SET THE DISPLAYED FLAG           #5\n         B     UCBLOOP             GO DO NEXT UCB ENTRY\n         SPACE\nDONE     EQU   *\n         CLI   LINEFLG,C'Y'            IF SOME DEVICES DISPLAYED    #5\n         BE    DONE1                      THEN SKIP NODEVICE MSG    #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLBS,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLE2,DATA),MF=(E,VIOPL)       #5\n         SPACE\nDONE1    EQU   *\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLBS,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLE1,DATA),MF=(E,VIOPL)       #5\n*        TPUT  BLANKS,1            PUT OUT BLANK LINE               #2\n*        TPUT  END1,L'END1         PUT OUT END MESSAGE              #2\n         LA    R15,0               SETUP RETURN CODE                #3\n         SPACE\nFINISH   FINISH RC=(R15)                                            #3\n         EJECT\nPLH1     DC    AL2(LHDR1+4),AL2(0)     LENGTH FOR PUTLINE           #5\nHDR1     DC    C'            UNIT TOT FR TOT FR  TOT   LRG. FREE   IN '\n         DC    C'  UNIT  OPEN'                                      #4\nLHDR1    EQU   *-HDR1                                               #2\nPLH2     DC    AL2(LHDR2+4),AL2(0)     LENGTH FOR PUTLINE           #5\nHDR2     DC    C'VOLSER DEVT ADDR   CYL    TRK   XTNS  CYLS+TRKS   USE'\n         DC    C'  ATTR  DCBS'                                      #4\nLHDR2    EQU   *-HDR2                                               #2\nPLE1     DC    AL2(LEND1+4),AL2(0)     LENGTH FOR PUTLINE           #5\nEND1     DC    C'**PROCESSING COMPLETED**  ---  VOLS REL.01 MOD.06' #6\nLEND1    EQU   *-END1                                               #5\nPLE2     DC    AL2(LEND2+4),AL2(0)     LENGTH FOR PUTLINE           #5\nEND2     DC    C'  0 DEVICES SELECTED '                             #4\nLEND2    EQU   *-END2                                               #5\nPLBS     DC    AL2(5),AL2(0)           LENGTH FOR PUTLINE           #5\nBLANKS   DC    CL80' '             BLANKS FOR ASSORTED THINGS       #2\nPLNELN   DC    AL2(LNGT+4),AL2(0)      LENGTH FOR PUTLINE OF LINE   #5\nDCBEDT   DC    XL06'402020202120'  EDIT PATTERN FOR OPEN DCB COUNT  #4\nTRTAB    DC    256X'00'            TRANSLATE TABLE                 1.\n         ORG   TRTAB+C'A'                                          1.\n         DC    X'FAFBFCFDFEFF'                                     1.\n         ORG   TRTAB+C'0'                                          1.\n         DC    X'F0F1F2F3F4F5F6F7F8F9'                             1.\n         ORG\nPBP1     DC    AL2(LBPRM1+4),AL2(0)    LENGTH FOR PUTLINE           #5\nBADPARM1 DC    C'INVALID SELECTION KEYWORD - '                      #3\nLBPRM1   EQU   *-BADPARM1          SETUP LENGTH FOR TPUT            #3\nPBP2     DC    AL2(LBPRM2+4),AL2(0)    LENGTH FOR PUTLINE           #5\nBADPARM2 DC    C'  VALID ARE: ALL PRIVATE PUBLIC STORAGE '          #3\n         DC    C'3380 3350 3330 3311 AND 2314'                      #3\nLBPRM2   EQU   *-BADPARM2          SETUP LENGTH FOR TPUT            #3\nADALL    DC    CL8'ALL     '           SELECT ALL VOLUMES           #3\nAPRIV    DC    CL8'PRIVATE '           ATTRIB IS PRIVATE            #3\nAPUBL    DC    CL8'PUBLIC  '           ATTRIB IS PUBLIC             #3\nASTOR    DC    CL8'STORAGE '           ATTRIB IS STORAGE            #3\nD3380    DC    CL8'3380    '           DEVICE IS 3380               #3\nD3350    DC    CL8'3350    '           DEVICE IS 3350               #3\nD3330    DC    CL8'3330    '           DEVICE IS 3330               #3\nD3311    DC    CL8'3311    '           DEVICE IS 3311               #3\nD2314    DC    CL8'2314    '           DEVICE IS 2314               #3\nALLDEVT  EQU   X'F1'                   SETUP FOR DEVICE TYPES       #3\nALLATTR  EQU   X'0E'                   SETUP FOR ALL ATTRIBS        #3\nDEVT3380 EQU   X'80'               SETUP DEVICE TYPE 3380           #3\nDEVT3350 EQU   X'40'               SETUP DEVICE TYPE 3350           #3\nDEVT3330 EQU   X'20'               SETUP DEVICE TYPE 3330           #3\nDEVT3311 EQU   X'10'               SETUP DEVICE TYPE 3311           #3\nATTRPRIV EQU   X'08'               SETUP FOR PRIVATE DEVICES        #3\nATTRPUBL EQU   X'04'               SETUP FOR PUBLIC  DEVICES        #3\nATTRSTOR EQU   X'02'               SETUP FOR STORAGE DEIVCES        #3\nDEVT2314 EQU   X'01'               SETUP DEVICE TYPE 2314           #3\nVOLPCLP  DC    V(PCLCSECT)         POINTER TO PCLCSECT FOR PARSE    #3\n         SPACE\n         LTORG\n         EJECT\nWORKAREA DSECT                                                      #2\nSAVEAREA DS    18F                     SAVEAREA FOR REGISTERS       #2\nSELFLAGS DS    F                       SELECTION FLAGS              #3\nVOLCPPL  DS    F                       ADDRESS OF CPPL              #3\nVOLPSCB  DS    F                       ADDRESS OF PSCB              #5\nVOLECB   DS    F                       ECB FOR PARSE TO USE         #3\nVOLANS   DS    F                       ANSWER AREA FOR PARSE        #3\nVOLUWA   DS    4F                      USER WORK AREA FOR PARSE     #3\nVOLPPL   DS    7F                      PPL FOR USE WITH PARSE       #3\nVIOPL    DS    4F                      IOPL FOR PUTLINE SUPPORT     #5\nMAXLINES DS    F                       MAX SCREEN SIZE              #6\nSCRNFLG  DS    CL1                     DISPLAY SCREEN FLAG          #6\nSERLEN   DS    H                       LENGTH OF VOLSER PARM        #5\nUCBLEN   DS    H                       LENGTH OF UCBADR PARM        #5\nSERFLG   DS    CL1                     FLAG USED TO SELECT VOLSER   #5\nUCBFLG   DS    CL1                     FLAG USED TO SELECT UCBADR   #5\nSERVAL   DS    CL6                     VALUE OF THE VOLSER PARM     #5\nUCBVAL   DS    CL3                     VALUE OF THE UCBADR PARM     #5\nLINEFLG  DS    CL1                     DEVICE SELECTED FLAG         #5\nTIMEDATE DS    D                       AREA FOR THE TIME AND DATE   #3\nDCBCNT   DS    D                       NUMBER OF OPEN DCBS          #4\nOUTPUT   DS    0CL30                   LSPACE OUTPUT AREA           #2\n         DS    CL6                                                  #2\nFCYL     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nFTRK     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nNXTN     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nOCYL     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nOTRK     DS    CL4                                                  #2\n         SPACE 1\n         DS    0D                  ALIGNMENT                        #2\nPLNE     DS    AL2(LNGT+4),AL2(0)      LENGTH FOR PUTLINE           #5\nLINE     EQU   *                                                    #2\nVOLSER   DS    CL7' '              VOLUME SERIAL NUMBER             #2\nDEVT     DS    CL6' '              DEVICE TYPE                      #2\nADDR     DS    CL5' '              DEVICE ADDRESS                   #2\nCYL      DS    CL7' '              FREE CYLS                        #2\nTRK      DS    CL7' '              FREE TRKS                        #2\nXTNS     DS    CL6' '              EXTENTS                          #2\nXCYL     DS    CL4' '              CONTIG CYLS                      #2\nPLUS     DS    CL1'+'                                               #2\nXTRK     DS    CL7' '              CONTIG TRKS                      #2\nALLC     DS    CL5' '              ALLOCATED FLAG                   #2\nATTR     DS    CL4' '              VOLUME ATTRIBUTES PUBL/PRIV/STOR #2\nDCBS     DS    CL6' '              NUMBER OF OPEN DCBS              #4\nLNGT     EQU   *-LINE                                               #2\n         SPACE 1\nADDRT    DS    CL3                 FIELD TO TRANSLATE UNIT NAME IN 1#2\nADDRTL   DS    CL3                 FIELD TO HOLD TRANS UNIT NAME   1#2\nLINEOUT  PUTLINE MF=L              LIST FORMAT OF PUTLINE           #5\n@SL      EQU   ((*-SAVEAREA+8/16)*16) LENGTH OF WORKAREA            #2\n         EJECT\nVOLS     CSECT\n         PRINT ON,NOGEN                                             #3\nPCLCSECT IKJPARM DSECT=PCLDSECT                                     #3\n         SPACE\nVOLCLEAR IKJKEYWD ,                                                 #6\n         IKJNAME 'CLEAR'                                            #6\n         SPACE\nVOLPTYPE IKJKEYWD DEFAULT='TYPE'                                    #3\n         IKJNAME  'TYPE',SUBFLD=$VOLTYPE                            #3\n         IKJNAME  'ATTRIBUTE',SUBFLD=$VOLTYPE                       #3\n         IKJNAME  'DEVICETYPE',ALIAS='DEVT',SUBFLD=$VOLTYPE         #3\n         SPACE\nVOLPNAME IKJKEYWD ,                                                 #5\n         IKJNAME  'SERIAL',SUBFLD=$VOLNAME                          #5\n         IKJNAME  'VOLSER',SUBFLD=$VOLNAME                          #5\n         SPACE\nVOLPADDR IKJKEYWD ,                                                 #5\n         IKJNAME  'ADDRESS',SUBFLD=$VOLADDR                         #5\n         IKJNAME  'UCBNAME',SUBFLD=$VOLADDR                         #5\n         SPACE\n$VOLTYPE IKJSUBF\nVOLTYPE  IKJIDENT 'SELECTION VALUE',UPPERCASE,MAXLNTH=8,            #3 X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                       #3 X\n               DEFAULT='ALL',HELP='DASD DEVICE SELECTION VALUE'     #3\n         SPACE\n$VOLNAME IKJSUBF\nVOLNAME  IKJIDENT 'SELECTION VALUE',UPPERCASE,MAXLNTH=6,            #5 X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                       #5 X\n               PROMPT='VOLUME SERIAL NUMBER - 6 DIGIT MAX',         #5 X\n               HELP='DASD VOLSER SELECTION VALUE'                   #5\n         SPACE\n$VOLADDR IKJSUBF\nVOLADDR  IKJIDENT 'SELECTION VALUE',UPPERCASE,MAXLNTH=3,            #5 X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                       #5 X\n               PROMPT='UCB ADDRESS - 3 DIGIT MAX',                  #5 X\n               HELP='DASD ADDRESS SELECTION VALUE'                  #5\n         SPACE\n         IKJENDP\n         SPACE\n         IKJPPL\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJIOPL\n         SPACE\n         CVT   DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VOLSOV9": {"ttr": 9473, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x08\\x9f\\x00\\x98\\x08\\x9f\\x00I\\x02\\x7f\\x02\\x7f\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-03-30T00:00:00", "modifydate": "1998-03-30T00:49:00", "lines": 639, "newlines": 639, "modlines": 0, "user": "SBGOLOB"}, "text": "//ASUPTASM JOB (9169,0000),'G.B.HAMPTON',MSGCLASS=Q,\n//  REGION=32M,\n//             CLASS=A,NOTIFY=&SYSUID\n/*ROUTE PRINT LOCAL\n/*JOBPARM S=*\n//*\n//*  FROM CBT MVS MODS TAPE FILE 360 VERSION 04-21-85 VERSION # 247\n//*\n//HLASMCL  EXEC HLASMCL\n//C.SYSLIB DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//         DD  DISP=SHR,DSN=SYSCB1.CBT.FILE360.PDS                 #10\n//C.SYSIN  DD  *\n         TITLE 'WSRCC - VOLS TSO C.P.  --  VERSION 6'\n***********************************************************************\n*  THIS PROGRAM (COMMAND) WILL LIST THE AVAILABLE FREE SPACE ON ALL   *\n*  OR SELECTED ONLINE DISK PACKS.  AS IT IS HERE, IT WILL NOT WORK    *\n*  UNDER MVS/XA.  THIS CP WAS ORIGIONALLY FROM CAMBRIDGE SYSTEMS      *\n*  GROUP AND WAS DISTRIBUTED IN AN \"AS IS\" FORM WITH A VERY EARLY     *\n*  VERSION OF THE ASM2 PACKAGE.  THIS CP CONTAINED NO COPYRITE NOTICE *\n*  IN ANY FORM .  I HAVE RECEIVED PERMISSION FROM CSG TO PUT THIS ON  *\n*  THE CBT TAPE.  - J.MARTIN  02/15/85                                *\n***********************************************************************\n*--------------MODIFICATION.LOG---------------------------------------*\n*  PROGRAMMER  T  DATE  T  SUMMARY OF CHANGES MADE TO THIS PROGRAM    *\n*--------------+--------+---------------------------------------------*\n* TOM JARVIS   T01/21/80T 1. CHANGED CONTROL UNIT NAME CHECK SO THAT  *\n*              T        T    ALL DISK VOLUMES ARE LISTED.             *\n* JOE MARTIN   T03/29/82T 2. ADDED THE UNIT ATTR DISPLAY FOR EACH     *\n*              T        T    VOLUME. DISPLAY IS STOR, PRIV OR PUBL.   *\n*              T        T    ADDED THE BEGIN AND FINISH MACROS.       *\n*              T        T    MOVED MOST OF WORKAREA TO DSECT.         *\n*              T        T                                             *\n* JOE MARTIN   T05/20/82T 3. ADDED SOME SELECTION TO THE VOLS COMMAND.*\n*              T        T    FORMAT IS \"TYPE(....) (DEVT AND ATTR)    *\n*              T        T    WHERE THE \"....\" IS DEVICE TYPE OR       *\n*              T        T    OR DEVICE ATTRIBUTE. EXAMPLE:            *\n*              T        T    VOLS TYPE(3350) -- SELECT ONLY 3350'S    *\n*              T        T    VOLS TYPE(PRIV) -- SELECT PRIVATE VOLS.  *\n* JOE MARTIN   T11/02/82T 4. ADDED NUMBER OF OPEN DCB'S TO THE        *\n*              T        T    OUTPUT DISPLAY FOR THE VOLS COMMAND.     *\n* JOE MARTIN   T03/21/83T 5. ADDED SELECTION FOR VOLSER OR UCB ADDR   *\n*              T        T    ADDED PUTLINE SUPPORT REPLACING TPUT.    *\n*              T        T    FIXED PROBLEM WITH UCB TABLE LOOKUP RTN. *\n* JOE MARTIN   T03/25/83T 6. ADDED CLEAR KEYWORD TO CLEAR THE SCREEN  *\n*              T        T    WHEN RUNNING UNDER VTAM.                 *\n*              T        T                                             *\n* M. KARLIN    T05/07/90T 7. USE CVT UCB SCAN ROUTINE                 *\n* S. GOLOB     T08/14/92T 8. TAUGHT VOLS ABOUT 3390'S AND \"UNTAUGHT\"  *\n*              T        T    HIM ABOUT 2314'S.                        *\n* G. GORAB     T08/21/95T 9. CHANGED UCB LOOKUP ROUTINE FOR MVS 5.1   *\n*              T        T    USING UCBSCAN FROM S. GOLOB/R. BLUMLEIN  *\n*              T        T    CHANGES ARE MARKED @GTG                  *\n* G.B.HAMPTON  T03/26/98T10. CHANGED UCB TO USE UCBSCAN MACRO TO GET  *\n*              T        T    PRINTABLE UCBNAME TO BE ABLE TO SUPPORT  *\n*              T        T    4 CHARACTER NAMES                        *\n*              T        T    ALSO REMOVED R11 AS BASE FOR UCBDEV      *\n*              T        T      IT DID NOT LOOK LIKE ITS NEEDED AND    *\n*              T        T      IT PRODUCED A WARNING FROM HI-LVL ASM  *\n*              T        T    NOTE: 3 DIGIT UCB SYSTEMS (BELOW SP4)    *\n*              T        T          RETURN A SPACE AS 1ST CHAR OF 4    *\n*---------------------------------------------------------------------*\nVOLS     BEGIN SAVE=(SAVEAREA,@SL,17),AUTHOR=CSG,VER=009       SBG  #2\n         LR    R11,R1                  POINT AT CPPL.               #3\n         USING CPPL,R11\n         ST    R11,VOLCPPL             SAVE CPPL ADDRESS            #3\n         LA    R7,VIOPL                POINT AT IOPL                #5\n         USING IOPL,R7                 SET UP ADDRESSIBILITY - IOPL #5\n         LA    R9,VOLPPL               POINT TO PPL                 #3\n         USING PPL,R9                  SET UP ADDRESSABILITY TO PPL #3\n         L     R10,CPPLPSCB            POINT AT PSCB.               #3\n         ST    R10,VOLPSCB             STORE BUFFER ADDRESS IN PPL  #3\n         L     R10,CPPLCBUF            COMMAND BUFFER               #3\n         ST    R10,PPLCBUF             STORE BUFFER ADDRESS IN PPL  #3\n         L     R10,CPPLUPT             USER PROFILE TABLE           #3\n         ST    R10,PPLUPT              STORE UPT IN PPL             #3\n         ST    R10,IOPLUPT             STORE UPT IN IOPL            #5\n         L     R10,CPPLECT             ENVIRONMENT CONTROL TABLE    #3\n         ST    R10,PPLECT              STORE ECT IN PPL             #3\n         ST    R10,IOPLECT             STORE ECT IN IOPL            #5\n         L     R10,VOLPCLP             PARSE CONTROL LIST           #3\n         ST    R10,PPLPCL              STORE PCL IN PPL             #3\n         LA    R10,VOLECB              EVENT CONTROL BLOCK          #3\n         ST    R10,PPLECB              STORE ECB IN PPL             #3\n         ST    R10,IOPLECB             STORE ECB IN IOPL            #5\n         LA    R10,VOLANS              ANSWER AREA                  #3\n         ST    R10,PPLANS              STORE ANSWER ADDRESS IN PPL  #3\n         LA    R10,VOLUWA              USER WORK AREA               #3\n         ST    R10,PPLUWA              STORE WORK ADDRESS IN PPL    #3\n         DROP  R7,R9,R11                                            #5\n         MVI   LINEFLG,C'N'            INITIALIZE DEVICE SELECT FLG #5\n         LR    R1,R9                   POINTER TO PPL IN R1         #3\n         CALLTSSR EP=IKJPARS           CALL PARSER                  #3\n         LTR   R15,R15                 CHECK FOR ZERO PARSE RETURN  #3\n         BNZ   FINISH                  GO AWAY UPSET                #3\n         L     R8,VOLANS               LOAD ANSWER AREA FOR USING   #3\n         USING PCLDSECT,R8             SET UP ADDRESSABILITY TO ANS #3\n         MVI   SCRNFLG,C'N'            SET NOT-SCREEN FLAG          #6\n         SR    R7,R7                   CLEAR R7 FOR POINTER         #6\n         LH    R7,VOLCLEAR             GET POINTER VALUE            #6\n         LTR   R7,R7                   IF PARM NOT PRESENT          #6\n         BZ    CHKVOLTP                   THEN CONTINUE             #6\n         GTSIZE ,                      GET SCREEN DISPLAY SIZE      #6\n         LTR   R0,R0                   IF DISPLAY TERMINAL          #6\n         BZ    CHKVOLTP                   THEN CONTINUE             #6\n         MVI   SCRNFLG,C'Y'            SET SCREEN FLAG              #6\n         BCTR  R0,0                    REDUCE FOR THE \"***\"         #6\n         ST    R0,MAXLINES             SAVE SCREEN DISPLAY SIZE     #6\n***      STFSMODE ON,INITIAL=YES       CLEAR SCREEN                 #6\n***      STFSMODE OFF                  CLEAR SCREEN                 #6\nCHKVOLTP EQU   *\n         L     R7,VOLTYPE              POINT AT PARAMETER           #3\n         LH    R6,VOLTYPE+4            GET LENGTH OF PARAMETER      #3\n         BCTR  R6,0                    REDUCE R6 FOR EX OF CLC      #3\n         EX    R6,CLC#ALL              CHECK FOR \"ALL\"              #3\n         BE    SET#ALL                 YES = GO SETUP FOR \"ALL\"     #3\n         EX    R6,CLC#PRIV             CHECK FOR \"PRIVATE\"          #3\n         BE    SET#PRIV                YES = GO SETUP FOR \"PRIVATE\" #3\n         EX    R6,CLC#PUBL             CHECK FOR \"PUBLIC\"           #3\n         BE    SET#PUBL                YES = GO SETUP FOR \"PUBLIC\"  #3\n         EX    R6,CLC#STOR             CHECK FOR \"STORAGE\"          #3\n         BE    SET#STOR                YES = GO SETUP FOR \"STORAGE\" #3\n         EX    R6,CLC#3380             CHECK FOR \"3380\"             #3\n         BE    SET#3380                YES = GO SETUP FOR \"3380\"    #3\n         EX    R6,CLC#3350             CHECK FOR \"3350\"             #3\n         BE    SET#3350                YES = GO SETUP FOR \"3350\"    #3\n         EX    R6,CLC#3330             CHECK FOR \"3330\"             #3\n         BE    SET#3330                YES = GO SETUP FOR \"3330\"    #3\n         EX    R6,CLC#3311             CHECK FOR \"3311\"             #3\n         BE    SET#3311                YES = GO SETUP FOR \"3311\"    #3\n         EX    R6,CLC#3390             CHECK FOR \"3390\"             #3\n         BE    SET#3390                YES = GO SETUP FOR \"3390\"    #3\n         PUTLINE PARM=LINEOUT,OUTPUT=(PBP1,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PBP2,DATA),MF=(E,VIOPL)       #5\n*        TPUT  BADPARM1,LBPRM1         TELL USER OF BAD PARM VALUE  #3\n*        TPUT  BADPARM2,LBPRM2         TELL USER OF BAD PARM VALUE  #3\n         LA    R15,8                   SET RETRUN CODE              #3\n         B     FINISH                  GO AWAY WITH NO VOLS OUTPUT  #3\n         SPACE\nCLC#ALL  CLC   ADALL(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#PRIV CLC   APRIV(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#PUBL CLC   APUBL(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#STOR CLC   ASTOR(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3380 CLC   D3380(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3350 CLC   D3350(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3330 CLC   D3330(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3311 CLC   D3311(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\nCLC#3390 CLC   D3390(0),0(R7)          EXECUTED COMPARE OF PARM.    #3\n         SPACE\nSET#ALL  EQU   *                                                    #3\n         MVI   SELFLAGS,ALLDEVT        SET SELECTION BITS           #3\n         OI    SELFLAGS,ALLATTR        SET SELECTION BITS           #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#PRIV EQU   *                                                    #3\n         MVI   SELFLAGS,ATTRPRIV       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLDEVT        SET BITS FOR DEVICE TYPES    #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#PUBL EQU   *                                                    #3\n         MVI   SELFLAGS,ATTRPUBL       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLDEVT        SET BITS FOR DEVICE TYPES    #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#STOR EQU   *                                                    #3\n         MVI   SELFLAGS,ATTRSTOR       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLDEVT        SET BITS FOR DEVICE TYPES    #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3380 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3380       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3350 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3350       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3330 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3330       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3311 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3311       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\nSET#3390 EQU   *                                                    #3\n         MVI   SELFLAGS,DEVT3390       SET SELECTION BIT            #3\n         OI    SELFLAGS,ALLATTR        SET BITS FOR ALL ATTRIBS     #3\n         B     TPUTH1                  CONTINUE PROCESSING          #3\n         EJECT\nTPUTH1   EQU   *\n         MVI   SERFLG,C'N'         SET VOLSER FLAG                  #5\n         L     R6,VOLNAME              POINT AT PARM                #5\n         LTR   R6,R6                   IF PARM ADDRESS IS ZERO      #5\n         BZ    TPUTH2                     THEN SKIP MOVE OF VOLSER  #5\n         LH    R7,VOLNAME+4            GET LENGTH OF PARM           #5\n         LTR   R7,R7                   IF LENGTH IS ZERO            #5\n         BZ    TPTH2                      THEN SKIP BCTR            #5\n         BCTR  R7,0                    REDUCE FOR EX OF CLC         #5\nTPTH2    EQU   *\n         STH   R7,SERLEN               SAVE SERIAL NUMBER LENGTH    #5\n         MVI   SERFLG,C'Y'         SET VOLSER FLAG                  #5\n         EX    R7,SERMOVE              MOVE VOLSER TO HOLD AREA     #5\nTPUTH2   EQU   *\n         MVI   UCBFLG,C'N'             SET UCBADR FLAG              #5\n         L     R6,VOLADDR              POINT AT PARM                #5\n         LTR   R6,R6                   IF PARM ADDRESS IS ZERO      #5\n         BZ    TPUTH3                     THEN SKIP MOVE OF UCBADR  #5\n         LH    R7,VOLADDR+4            GET LENGTH OF PARM           #5\n         LTR   R7,R7                   IF LENGTH IS ZERO            #5\n         BZ    TPTH3                      THEN SKIP BCTR            #5\n         BCTR  R7,0                    REDUCE FOR EX OF CLC         #5\nTPTH3    EQU   *\n         STH   R7,UCBLEN               SAVE UCB ADDRESS LENGTH      #5\n         MVI   UCBFLG,C'Y'             SET UCBADR FLAG              #5\n         EX    R7,UCBMOVE              MOVE UCBADR TO HOLD AREA     #5\n         B     TPUTH3                  SKIP THE EXECUTED STUFF      #5\n         SPACE\nSERMOVE  MVC   SERVAL(0),0(R6)         MOVE IN VOL SERIAL           #5\nUCBMOVE  MVC   UCBVAL(0),0(R6)         MOVE IN UCB ADDRESS          #5\n         SPACE\nTPUTH3   EQU   *\n         SR    R9,R9                   CLEAR OUT LINE COUNTER       #6\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH1,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH2,DATA),MF=(E,VIOPL)       #5\n         LA    R9,2(0,R9)              INCRIMENT THE LINE COUNTER   #6\n*        L     R4,16             @ CVT                          @MK\n*        L     R2,40(R4)         @ UCB LOOKUP TABLE             @MK\n*CBLOOP  EQU   *                                                @MK\n*        LH    R3,0(R2)          GET UCB ADDR.                  @MK\n*        SLL   R3,16               MAKE SURE THE UCB ADDR IS    @MK\n*        SRL   R3,16               CLEAN IN THE HIGH ORDER BITS @MK\n*        LA    R2,2(R2)          BUMP TO NEXT...                @MK\n*        LTR   R3,R3               CHECK FOR NULL               @MK\n*        BZ    UCBLOOP           GET NEXT IF NULL               @MK #5\n*        CL    R3,=X'0000FFFF'   END OF TABLE?                  @MK\n*        BE    DONE              YES...                         @MK\n************************************************************\n*        SET UCB SCAN                                           @MK\n************************************************************    @MK\n         XC    WKAREA,WKAREA       CLEAR WKAREA           @MK\n         LA    R1,WKAREA             SET UP PARM LIST         @MK\n         ST    R1,PARMWA                                        @MK\n         LA    R1,DEVCLASS                                      @MK\n         ST    R1,PARMDEVT                                      @MK\n         MVI   DEVCLASS,UCB3DACC       SEARCH DIRECT ACCESS ONLY@MK\n         LA    R1,ADDRUCB                                       @MK\n         ST    R1,PARMUCB                                       @MK\n         OI    PARMUCB,X'80'           INDICATE END OF PARMLIST @MK\n************************************                            @MK\n*        SCAN UCB                                               @MK\n************************************                            @MK\n*UCBLOOP  LA    R1,PARMLIST                                     @GTG\n*         L     R5,CVTPTR                                       @GTG\n*         USING CVT,R5                                          @GTG\n*         L     R15,CVTUCBSC        SCAN SERVICE ADDRESS        @GTG\n*         DROP  R5                                              @GTG\n*         BALR  R14,R15                                         @GTG\n*         LTR   R15,R15                                         @GTG\n*         BNZ   DONE                NO MORE UCBS                @GTG\n*        USING UCBOB,R3                                         @GTG\n*        L     R3,ADDRUCB                                       @GTG\n*        TM    18(R3),X'20'      DISK?                          @GTG\n*        BZ    UCBLOOP            NO                            @GTG\n*        TM    3(R3),X'80'       ONLINE?                        @GTG\n*        BZ    UCBLOOP            NO                            @GTG\n*        TM    6(R3),X'40'       READY? (CHECK NOT READY FLAG)  @GTG\n*        BNZ   UCBLOOP            NO    WAS BCR 7,R4            @GTG\nRESCANLP DS    0H                                               @GTG\n         IOCINFO IOCTOKEN=TOKEN,MF=(E,IOCINFP)                  @GTG\n         XC    SCANWORK,SCANWORK                                @GTG\nUCBLOOP  DS    0H                                               @GTG\n         UCBSCAN UCBAREA=UCBCOPY,WORKAREA=SCANWORK,DYNAMIC=YES,        C\n               DEVCLASS=DASD,IOCTOKEN=TOKEN,MF=(E,UCBSLST),     @GTG#10X\n               DEVNCHAR=DEVNAME,RANGE=ALL                          #10\n         LTR   R15,R15           WAS A UCB RETURNED?            @GTG\n         BNZ   SCANDONE          NO, EITHER A CONFIGURATION     @GTG\n*                                CHANGE HAS OCCURRED OR NO MORE @GTG\n*                                UCB'S.                         @GTG\n*                                                               @GTG\n*        PROCESS UCB                                            @GTG\n*                                                               @GTG\n*                                                               @GTG\n         USING UCBCMSEG,R3       UCB COMMON SEGMENT DSECT       @GTG\n         LA    R3,UCBCOPY        ADDRESSABILITY TO UCBCOPY      @GTG\n         TM    UCBSTAT,UCBONLI   IS VOLUME ONLINE?              @GTG\n         BO    MOVEUCB           YES, ONLINE. MOVE IT.          @GTG\n*        TM    UCBSTAT,UCBALOC   IS VOLUME ALLOCATED?           @GTG\n*        BO    MOVEUCB           YES, ALLOCATED. MOVE IT.       @GTG\n         B     UCBLOOP           GET ANOTHER UCB                @GTG\n*        MVC   LINE(LNGT),BLANKS   MOVE IN BLANKS TO OUTPUT LINE@GTG\nMOVEUCB  MVC   LINE(LNGT),BLANKS   MOVE IN BLANKS TO OUTPUT LINE@GTG\n         MVC   ADDRT,DEVNAME       MAKE COPY OF CHARACTER UNIT NAME#10\n         TR    ADDRT,TRTAB         TR ALPHA CHARACTERS A-F TO FA-FF#10\n         CLC   ADDRTL,ADDRT        COMPARE UNIT NAMES               #1\n         BNL   UCBLOOP             GET NEXT UCB                     #5\nCHKVOL   EQU   *\n         CLI   SERFLG,C'N'         IF VOL COMPARE NOT NEEDED        #5\n         BE    CHKUCB                 THEN CHECK ADDRESS WANTED     #5\n         LH    R6,SERLEN           LOAD LENGTH OF SERIAL#-1         #5\n         EX    R6,SERCLC           COMPARE SERIAL NUMBER TO UCB     #5\n         BNE   UCBLOOP             TRY NEXT VOLSER                  #5\nCHKUCB   EQU   *\n         CLI   UCBFLG,C'N'         IF UCB COMPARE NOT NEEDED        #5\n         BE    SAVE01                 THEN CONTINUE LIKE BEFORE     #5\n         LH    R6,UCBLEN           LOAD LENGTH OF UCB ADDRESS       #5\n         CLI   DEVNAME,C' '        3 CHAR UCBS (MUST BE BELOW SP5) #10\n         BE    CHKUCB3             SKIP OVER 4 DIGIT CHECK         #10\n         EX    R6,UCBCLC           COMPARE UCB ACCRESS TO UCB       #5\n         BE    SAVE01              LOOKS GOOD                      #10\n         C     R6,=F'3'            4 DIGITS SPECIFED?              #10\n         BNL   UCBLOOP             IF SO, THAT'S IT!               #10\n         CLI   DEVNAME,C'0'        1ST CHAR NOT ZERO               #10\n         BNE   UCBLOOP             UCB ALREADY COMPARED            #10\nCHKUCB3  DS    0H                                                  #10\n         EX    R6,UCBCLC1          LETS CHECK IN CASE JUST 3 CHAR  #10\n         BNE   UCBLOOP             TRY NEXT VOLSER                  #5\n         B     SAVE01                  CONTINUE AS USUAL            #5\n         SPACE\nSERCLC   CLC   SERVAL(0),28(R3)        COMPARE REQUESTED VOL - UCB  #5\nUCBCLC   CLC   UCBVAL(0),DEVNAME       COMPARE REQUESTED ADR - UCB #10\nUCBCLC1  CLC   UCBVAL(0),DEVNAME+1     COMPARE REQUESTED ADR - UCB #10\n         SPACE\nSAVE01   EQU   *\n*DEL*    USING UCBDEV,R11                                       @GTG#10\n*DEL*    LA    R11,UCBCOPY+24                                   @GTG#10\n         MVC   VOLSER(6),UCBVOLI   MOVE THE VOLSER TO OUTPUT AREA\n         MVC   ADDR(4),DEVNAME     MOVE THE UNIT ADDRESS TO AREA   #10\n         TR    ADDR(1),TRTABF0     CHANGE A ZERO TO A BLANK!       #10\n         MVC   ADDRTL,ADDRT        KEEP TRANSLATED UNIT NAME        #1\n         EJECT\nT3380    EQU   *\n         CLI   19(R3),X'0E'        IS THIS A 3380\n         BNE   T3350               NO GO TRY 3350\n         TM    SELFLAGS,DEVT3380   CHECK FOR 3380 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3380'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3350    EQU   *\n         CLI   19(R3),X'0B'        IS THIS A 3350\n         BNE   T3311               NO GO TRY 3330-1\n         TM    SELFLAGS,DEVT3350   CHECK FOR 3350 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3350'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3311    EQU   *\n         CLI   19(R3),X'0D'        IS THIS A 3330-1\n         BNE   T3330               NO GO TRY 3330\n         TM    SELFLAGS,DEVT3311   CHECK FOR 3311 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3311'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3330    EQU   *\n         CLI   19(R3),X'09'        IS THIS A 3330\n         BNE   T3390               NO GO TRY 3390\n         TM    SELFLAGS,DEVT3330   CHECK FOR 3330 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3330'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nT3390    EQU   *\n         CLI   19(R3),X'0F'        IS THIS A 3390\n         BNE   UNKN                NO GO MOVE IN \"UNKN\"\n         TM    SELFLAGS,DEVT3390   CHECK FOR 3390 SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   DEVT(4),=C'3390'    MOVE THE IN DEVICE TYPE\n         B     GOTDEV              GO SETUP FOR OUTPUT\nUNKN     EQU   *\n         MVC   DEVT(4),=C'UNKN'    FOUND SOMETHING THAT WE DONT KNOW\nGOTDEV   EQU   *\n         LR    R0,R3               GOT A GOOD ONE.\n         LA    R1,OUTPUT           SETUP FOR LSPCE SVC\n         SVC   78                  ISSUE LSPCE\n         MVC   ALLC(3),=C'YES'     SET ALLOCATED MSG\n         TM    3(R3),X'08'         TEST IF ALLOCATED\n         BO    CHKPRIV             BRANCH IF ALLOCATED              #2\n         MVC   ALLC(3),=C'NO '     NOT ALLOCATED\nCHKPRIV  TM    UCBSTAB,UCBBPRV     IS THIS VOL PRIVATE          @GTG\n         BZ    CHKPUBL             NO -- TRY PUBLIC                 #2\n         TM    SELFLAGS,ATTRPRIV   CHECK FOR PRIV SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   ATTR(4),=C'PRIV'    MOVE IN PUBLIC LITERAL           #2\n         B     MOVESPCE            GO DO SPACE MOVES                #2\nCHKPUBL  TM    UCBSTAB,UCBBPUB     IS THIS VOL PUBLIC           @GTG\n         BZ    CHKSTOR             NO -- TRY STORAGE                #2\n         TM    SELFLAGS,ATTRPUBL   CHECK FOR PUBL SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   ATTR(4),=C'PUBL'    MOVE IN PRIVATE LITERAL          #2\n         B     MOVESPCE            GO DO SPACE MOVES                #2\nCHKSTOR  TM    UCBSTAB,UCBBSTR     IS THIS VOL STORAGE          @GTG\n         BZ    CHKFAIL             NO -- INDICATE UNKN              #2\n         TM    SELFLAGS,ATTRSTOR   CHECK FOR STOR SELECTION         #3\n         BZ    UCBLOOP             DO NOT CONTINUE IF NO SELECTION  #3\n         MVC   ATTR(4),=C'STOR'    MOVE IN PRIVATE LITERAL          #2\n         B     MOVESPCE            GO DO SPACE MOVES                #2\nCHKFAIL  MVC   ATTR(4),=C'UNKN'    MOVE IN UNKNOWN LITERAL          #2\nMOVESPCE MVC   CYL(4),FCYL         MOVE IN FREE CYLS\n         MVC   TRK(4),FTRK         MOVE IN FREE TRKS\n         MVC   XTNS(4),NXTN        MOVE IN NUM EXTENTS\n         MVC   XCYL(4),OCYL        MOVE IN CONTIG CYLS\n         MVC   XTRK(4),OTRK        MOVE IN CONTIG TRKS\n         MVI   PLUS,C'+'           MOVE IN THE \"+\"                  #2\n         SR    R5,R5                   CLEAR R5 FOR ICM             #4\n         MVC   DCBS,=CL6'     0'       MOVE IN INITIAL DCB COUNT    #4\n         ICM   R5,B'0001',35(R3)       INSERT THE DCB COUNT         #4\n         BZ    DONEDCB                 GO AWAY                      #4\n         SLL   R5,25                   SHIFT LEFT TO REMOVE \"MOUNT\" #4\n         SRL   R5,25                   SHIFT RIGHT TO RESTORE COUNT #4\n         CVD   R5,DCBCNT               MAKE DCBCOUNT DECIMAL        #4\n         MVC   DCBS(6),DCBEDT          MOVE IN EDIT FIELD           #4\n         ED    DCBS(6),DCBCNT+5        PUT IN THE EDITED DCB COUNT  #4\n         SPACE\nDONEDCB  EQU   *                                                    #4\n         CLI   SCRNFLG,C'N'            IF THIS IS NOT-SCREEN MODE   #6\n         BE    SHOWLINE                   THEN CONTINUE THIS CODE   #6\n         C     R9,MAXLINES             IF LINES EXCEEDED            #6\n         BL    SHOWLINE                   THEN DISPLAY HEADING      #6\n         SR    R9,R9                   CLEAR OUT LINE COUNTER       #6\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH1,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLH2,DATA),MF=(E,VIOPL)       #5\n         LA    R9,2(0,R9)              INCRIMENT THE LINE COUNTER   #6\nSHOWLINE MVC   PLNE(4),PLNELN          MOVE LINE LENGTH FOR PUTLINE #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLNE,DATA),MF=(E,VIOPL)       #5\n         LA    R9,1(0,R9)              INCRIMENT THE LINE COUNTER   #6\n         MVI   LINEFLG,C'Y'        SET THE DISPLAYED FLAG           #5\n         B     UCBLOOP             GO DO NEXT UCB ENTRY\nSCANDONE DS    0H                                               @GTG\n         LA    R3,12                                            @GTG\n         LA    R4,4                                             @GTG\n         CR    R15,R3              HAS CONFIGURATION CHANGED?   @GTG\n         BE    RESCANLP            YES, START OVER              @GTG\n         CR    R15,R4              SCAN SUCCESSFUL?             @GTG\n         BNE   FINISH              NO, EXIT WITH R15            @GTG\n         SPACE\nDONE     EQU   *\n         CLI   LINEFLG,C'Y'            IF SOME DEVICES DISPLAYED    #5\n         BE    DONE1                      THEN SKIP NODEVICE MSG    #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLBS,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLE2,DATA),MF=(E,VIOPL)       #5\n         SPACE\nDONE1    EQU   *\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLBS,DATA),MF=(E,VIOPL)       #5\n         PUTLINE PARM=LINEOUT,OUTPUT=(PLE1,DATA),MF=(E,VIOPL)       #5\n*        TPUT  BLANKS,1            PUT OUT BLANK LINE               #2\n*        TPUT  END1,L'END1         PUT OUT END MESSAGE              #2\n         LA    R15,0               SETUP RETURN CODE                #3\n         SPACE\nFINISH   FINISH RC=(R15)                                            #3\n         EJECT\nPLH1     DC    AL2(LHDR1+4),AL2(0)     LENGTH FOR PUTLINE           #5\nHDR1     DC    C'            UNIT TOT FR TOT FR  TOT   LRG. FREE   IN '\n         DC    C'  UNIT  OPEN'                                      #4\nLHDR1    EQU   *-HDR1                                               #2\nPLH2     DC    AL2(LHDR2+4),AL2(0)     LENGTH FOR PUTLINE           #5\nHDR2     DC    C'VOLSER DEVT ADDR   CYL    TRK   XTNS  CYLS+TRKS   USE'\n         DC    C'  ATTR  DCBS'                                      #4\nLHDR2    EQU   *-HDR2                                               #2\nPLE1     DC    AL2(LEND1+4),AL2(0)     LENGTH FOR PUTLINE           #5\nEND1     DC    C'**PROCESSING COMPLETED**  ---  VOLS REL.01 MOD.09' #6\nLEND1    EQU   *-END1                                               #5\nPLE2     DC    AL2(LEND2+4),AL2(0)     LENGTH FOR PUTLINE           #5\nEND2     DC    C'  0 DEVICES SELECTED '                             #4\nLEND2    EQU   *-END2                                               #5\nPLBS     DC    AL2(5),AL2(0)           LENGTH FOR PUTLINE           #5\nBLANKS   DC    CL80' '             BLANKS FOR ASSORTED THINGS       #2\nPLNELN   DC    AL2(LNGT+4),AL2(0)      LENGTH FOR PUTLINE OF LINE   #5\nDCBEDT   DC    XL06'402020202120'  EDIT PATTERN FOR OPEN DCB COUNT  #4\nPBP1     DC    AL2(LBPRM1+4),AL2(0)    LENGTH FOR PUTLINE           #5\nBADPARM1 DC    C'INVALID SELECTION KEYWORD - '                      #3\nLBPRM1   EQU   *-BADPARM1          SETUP LENGTH FOR TPUT            #3\nPBP2     DC    AL2(LBPRM2+4),AL2(0)    LENGTH FOR PUTLINE           #5\nBADPARM2 DC    C'  VALID ARE: ALL PRIVATE PUBLIC STORAGE '          #3\n         DC    C'3380 3350 3330 3311 AND 3390'                      #3\nLBPRM2   EQU   *-BADPARM2          SETUP LENGTH FOR TPUT            #3\nADALL    DC    CL8'ALL     '           SELECT ALL VOLUMES           #3\nAPRIV    DC    CL8'PRIVATE '           ATTRIB IS PRIVATE            #3\nAPUBL    DC    CL8'PUBLIC  '           ATTRIB IS PUBLIC             #3\nASTOR    DC    CL8'STORAGE '           ATTRIB IS STORAGE            #3\nD3380    DC    CL8'3380    '           DEVICE IS 3380               #3\nD3350    DC    CL8'3350    '           DEVICE IS 3350               #3\nD3330    DC    CL8'3330    '           DEVICE IS 3330               #3\nD3311    DC    CL8'3311    '           DEVICE IS 3311               #3\nD3390    DC    CL8'3390    '           DEVICE IS 3390               #3\nALLDEVT  EQU   X'F1'                   SETUP FOR DEVICE TYPES       #3\nALLATTR  EQU   X'0E'                   SETUP FOR ALL ATTRIBS        #3\nDEVT3390 EQU   X'01'               SETUP DEVICE TYPE 3390           #3\nDEVT3380 EQU   X'80'               SETUP DEVICE TYPE 3380           #3\nDEVT3350 EQU   X'40'               SETUP DEVICE TYPE 3350           #3\nDEVT3330 EQU   X'20'               SETUP DEVICE TYPE 3330           #3\nDEVT3311 EQU   X'10'               SETUP DEVICE TYPE 3311           #3\nATTRPRIV EQU   X'08'               SETUP FOR PRIVATE DEVICES        #3\nATTRPUBL EQU   X'04'               SETUP FOR PUBLIC  DEVICES        #3\nATTRSTOR EQU   X'02'               SETUP FOR STORAGE DEIVCES        #3\nVOLPCLP  DC    V(PCLCSECT)         POINTER TO PCLCSECT FOR PARSE    #3\n         SPACE\n         LTORG\n         EJECT ,         MOVE TABLES HERE                          #10\nTRTAB    DC    256X'00'            TRANSLATE TABLE                 1.\n         ORG   TRTAB+C' '                                          #10\n         DC    C' '                                                #10\n         ORG   TRTAB+C'A'                                          1.\n         DC    X'FAFBFCFDFEFF'                                     1.\n         ORG   TRTAB+C'0'                                          1.\n         DC    X'F0F1F2F3F4F5F6F7F8F9'                             1.\n         ORG\nTRTABF0  DS    CL256                                               #10\n         ORG   TRTABF0                                             #10\n         DC    256X'00'                                            #10\n         ORG   TRTABF0+C' '                                        #10\n         DC    C' '                                                #10\n         ORG   TRTABF0+C'A'                                        #10\n         DC    C'ABCDEF'                                           #10\n         ORG   TRTABF0+C'0'                                        #10\n         DC    C' '                                                #10\n         DC    C'123456789'                                        #10\n         ORG   ,                                                   #10\n         EJECT\nWORKAREA DSECT                                                      #2\nSAVEAREA DS    18F                     SAVEAREA FOR REGISTERS       #2\nTOKEN    DS    CL48                                             @GTG\nUCBCOPY  DS    CL48                                             @GTG\nSCANWORK DS    CL100                                            @GTG\nSELFLAGS DS    F                       SELECTION FLAGS              #3\nVOLCPPL  DS    F                       ADDRESS OF CPPL              #3\nVOLPSCB  DS    F                       ADDRESS OF PSCB              #5\nVOLECB   DS    F                       ECB FOR PARSE TO USE         #3\nVOLANS   DS    F                       ANSWER AREA FOR PARSE        #3\nVOLUWA   DS    4F                      USER WORK AREA FOR PARSE     #3\nVOLPPL   DS    7F                      PPL FOR USE WITH PARSE       #3\nVIOPL    DS    4F                      IOPL FOR PUTLINE SUPPORT     #5\nMAXLINES DS    F                       MAX SCREEN SIZE              #6\nSCRNFLG  DS    CL1                     DISPLAY SCREEN FLAG          #6\nSERLEN   DS    H                       LENGTH OF VOLSER PARM        #5\nUCBLEN   DS    H                       LENGTH OF UCBADR PARM        #5\nSERFLG   DS    CL1                     FLAG USED TO SELECT VOLSER   #5\nUCBFLG   DS    CL1                     FLAG USED TO SELECT UCBADR   #5\nSERVAL   DS    CL6                     VALUE OF THE VOLSER PARM     #5\nUCBVAL   DS    CL4                     VALUE OF THE UCBADR PARM     #5\nLINEFLG  DS    CL1                     DEVICE SELECTED FLAG         #5\nTIMEDATE DS    D                       AREA FOR THE TIME AND DATE   #3\nDCBCNT   DS    D                       NUMBER OF OPEN DCBS          #4\nOUTPUT   DS    0CL30                   LSPACE OUTPUT AREA           #2\n         DS    CL6                                                  #2\nFCYL     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nFTRK     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nNXTN     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nOCYL     DS    CL4                                                  #2\n         DS    CL1                                                  #2\nOTRK     DS    CL4                                                  #2\n         SPACE 1\n         DS    0D                  ALIGNMENT                        #2\nPLNE     DS    AL2(LNGT+4),AL2(0)      LENGTH FOR PUTLINE           #5\nLINE     EQU   *                                                    #2\nVOLSER   DS    CL7' '              VOLUME SERIAL NUMBER             #2\nDEVT     DS    CL5' '              DEVICE TYPE                     #10\nADDR     DS    CL6' '              DEVICE ADDRESS                  #10\nCYL      DS    CL7' '              FREE CYLS                        #2\nTRK      DS    CL7' '              FREE TRKS                        #2\nXTNS     DS    CL6' '              EXTENTS                          #2\nXCYL     DS    CL4' '              CONTIG CYLS                      #2\nPLUS     DS    CL1'+'                                               #2\nXTRK     DS    CL7' '              CONTIG TRKS                      #2\nALLC     DS    CL5' '              ALLOCATED FLAG                   #2\nATTR     DS    CL4' '              VOLUME ATTRIBUTES PUBL/PRIV/STOR #2\nDCBS     DS    CL6' '              NUMBER OF OPEN DCBS              #4\nLNGT     EQU   *-LINE                                               #2\n         SPACE 1\nADDRT    DS    CL4                 FIELD TO TRANSLATE UNIT NAME IN #10\nADDRTL   DS    CL4                 FIELD TO HOLD TRANS UNIT NAME   #10\nDEVNAME  DS    CL4                 HOLD UCBNAME HERE               #10\nLINEOUT  PUTLINE MF=L              LIST FORMAT OF PUTLINE           #5\n************* @MK @MK @MK *******************************\n*     UCB SCAN AREAS                                            @MK\nPARMLIST DS    3F         PARMLIST MAPPING                      @MK\n         ORG   PARMLIST                                         @MK\nPARMWA   DS    F          ADDRESS OF 100-BYTE WKAREA          @MK\nPARMDEVT DS    F          ADDR OF BYTE CONTAINING DEVTYPE TO SEARCH\nPARMUCB  DS    F          ADDRESS OF WORD TO CONTAIN UCB ADDR   @MK\n         SPACE                                                , @MK\nDEVCLASS DS    CL1        BYTE CONTAINING DEVICE CLASS TO BE SEARCHED\nADDRUCB  DS    F          UCB ADDRESSES PLACED HERE BY UCB SCAN @MK\n         DS    0D         ALIGN WKAREA ON D-WORD BOUNDARY     @MK\nWKAREA   DS    CL100      WKAREA                              @MK\nDEVNUM   DS    F          UCBNAME                               @MK\n@SL      EQU   ((*-SAVEAREA+8/16)*16) LENGTH OF WORKAREA            #2\n         EJECT\nUCBLIS   UCBSCAN MF=(L,UCBSLST)                               @GTG\nIOCINF   IOCINFO MF=(L,IOCINFP)                               @GTG\nVOLS     CSECT\n         PRINT ON,NOGEN                                             #3\nPCLCSECT IKJPARM DSECT=PCLDSECT                                     #3\n         SPACE\nVOLCLEAR IKJKEYWD ,                                                 #6\n         IKJNAME 'CLEAR'                                            #6\n         SPACE\nVOLPTYPE IKJKEYWD DEFAULT='TYPE'                                    #3\n         IKJNAME  'TYPE',SUBFLD=$VOLTYPE                            #3\n         IKJNAME  'ATTRIBUTE',SUBFLD=$VOLTYPE                       #3\n         IKJNAME  'DEVICETYPE',ALIAS='DEVT',SUBFLD=$VOLTYPE         #3\n         SPACE\nVOLPNAME IKJKEYWD ,                                                 #5\n         IKJNAME  'SERIAL',SUBFLD=$VOLNAME                          #5\n         IKJNAME  'VOLSER',SUBFLD=$VOLNAME                          #5\n         SPACE\nVOLPADDR IKJKEYWD ,                                                 #5\n         IKJNAME  'ADDRESS',SUBFLD=$VOLADDR                         #5\n         IKJNAME  'UCBNAME',SUBFLD=$VOLADDR                         #5\n         SPACE\n$VOLTYPE IKJSUBF\nVOLTYPE  IKJIDENT 'SELECTION VALUE',UPPERCASE,MAXLNTH=8,            #3 X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                       #3 X\n               DEFAULT='ALL',HELP='DASD DEVICE SELECTION VALUE'     #3\n         SPACE\n$VOLNAME IKJSUBF\nVOLNAME  IKJIDENT 'SELECTION VALUE',UPPERCASE,MAXLNTH=6,            #5 X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                       #5 X\n               PROMPT='VOLUME SERIAL NUMBER - 6 DIGIT MAX',         #5 X\n               HELP='DASD VOLSER SELECTION VALUE'                   #5\n         SPACE\n$VOLADDR IKJSUBF\nVOLADDR  IKJIDENT 'SELECTION VALUE',UPPERCASE,MAXLNTH=4,            #5 X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                       #5 X\n               PROMPT='UCB ADDRESS - 4 DIGIT MAX',                  #5 X\n               HELP='DASD ADDRESS SELECTION VALUE'                  #5\n         SPACE\n         IKJENDP\n         SPACE\n         IKJPPL\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJIOPL\n         SPACE\n         DSECT\n*        IEFUCBOB                 UCB MACRO                     @GTG\n         IEFUCBOB DEVCLAS=DA      UCB MACRO                     @GTG\n         CVT   DSECT=YES,PREFIX=YES\n         END\n/*\n//L.SYSLMOD DD DSN=U014706.LOAD(VOLS),DISP=SHR\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WSRCCCVT": {"ttr": 9731, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x000\\x000\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 48, "newlines": 48, "modlines": 0, "user": "WSRCC"}, "text": "         MACRO\n         WSRCCCVT\n.*\n.* THIS MACRO MAPS THE WSRCC LOCAL CVT.  THIS CONTROL BLOCK IS POINTED\n.* TO BY THE CVTUSER FIELD OF THE SYSTEM CVT AT OFFSET X'CC'.  IN THE\n.* INITIAL IMPLIMENTATION OF THE WSRCCCVT, THE LENGTH IS 2048 BYTES IN\n.* SUBPOOL 245 OF SQA.  THIS SUBPOOL IS NOT FETCH PROTECTED BUT IS\n.* WRITE PROTECTED.  SUBPOOL IS ALSO FIXED NON-PAGEABLE.\n.*\n.* NOTES TO SYSTEMS PROGRAMMER'S WHO IMPLIMENT AREA'S IN THIS CONTROL\n.* BLOCK:\n.*   PLEASE FILL OUT ALL FIELDS OF THE STORAGE DEFINITIONS.  FIELD\n.*   NAMES SHOULD START WITH WCVT FOR EASY IDENTIFICATION.  IF THE\n.*   CONTROL BLOCK EXCEEDS WCVTGMSZ BYTES, REASSEMBLY OF IEFU83\n.*   IS REQUIRED TO TAKE THIS INTO ACCOUNT.  IF DEFINED FIELDS\n.*   ARE DISCONTINUED, THEY SHOULD BE MARKED WCVTRSXX WHERE XX IS A\n.*   HEX IDENTIFIER.  DO NOT REUSE DISCONTINUED FIELDS.  THE FIRST\n.*   16 FULLWORDS ARE FOR LOCAL SYSTEM CRITICAL APPLICATIONS AND SHOULD\n.*   BE USED WITH DISCRETION ONLY FOR APPROPRIATE APPLICATIONS.\n.*\n.* FIELD-SPECIFICATION-DESCRIPTION                          -INT-DATE -\n.*\nWCVT     DSECT\nWCVTGMSZ EQU   2048    BYTES THAT IEFU3/IEFU84 SHOULD GETMAINTJF 82258\nWCVTRS01 DS    16F     AVAILABLE FOR SYSTEM CRITICAL APPL.   TJF 81090\nWCVTID   DS    CL8     CONTAINS 'WSRCCCVT' FROM INIT.        TJF 81090\nWCVTIPLT DS    0CL8    IPL TIME-DATE IN \"TIME DEC\" FORMAT    JAM 84009\nWCVTTIME DS    F       IPL TIME IN  \"TIME DEC\"  FORMAT       JAM 84003\nWCVTDATE DS    F       IPL DATE IN SMF (PACKED) FORMAT       TJF 82256\nWCVTACF2 DS    F       POINTER TO ACF2'S ACCVT               TJF 81090\nWCVTMDTM DS    0CL8    LAST MODIFIED DATE/TIME - WCVTLOAD    JAM 84009\nWCVTMODT DS    F       LAST MODIFIED TIME ------ WCVTLOAD    JAM 84003\nWCVTMODD DS    F       LAST MODIFIED DATE ------ WCVTLOAD    JAM 84003\nWCVTCSAR DS    0F      CSAR CONTROL WORD                     TJF 81275\nWCVTCSR  DS    X       CSAR FLAG BYTE                        TJF 81275\nWCVTCSPC EQU   X'80'   CSAR SHOULD CLOSE THE JCLFILE         TJF 81275\nWCVTCSRR DS    XL3     CSAR RESERVED BYTES                   TJF 81275\nWCVTSID  DS    F       SYSTEM ID                             TJF 81320\nWCVTMLEN DS    F       LENGTH OF MAPPED TABLE                TJF 82256\nWCVTTLEN DS    F       LENGTH OF WHOLE WCVT                  TJF 82258\nWCVTULEN DS    F       AMOUNT OF USED WCVT BY MAPPED & FLOAT TJF 82258\nWCVTCLS1 DS    F       ADDRESS OF CLASS TABLE 1              TJF 82256\nWCVTCLS2 DS    F       ADDRESS OF CLASS TABLE 2              TJF 82256\nWCVTUTL1 DS    F       ADDRESS OF UTL TABLE 1                TJF 82256\nWCVTUTL2 DS    F       ADDRESS OF UTL TABLE 2                TJF 82256\n         DS    0D      ROUND TO DOUBLE WORD                  TJF 81090\nWCVTLEN  EQU   *-WCVT  CURRENT LENGTH OF IMPLIMENTED WCVT.   TJF 81090\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ZSORTZ": {"ttr": 9733, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x85\\x04?\\x00\\x85\\x06\\x9f\\x14\\x17\\x01\\x18\\x01\\x18\\x00\\x00\\xe6\\xe2\\xd9\\xc3\\xc3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1985-03-10T14:17:00", "lines": 280, "newlines": 280, "modlines": 0, "user": "WSRCC"}, "text": "         TITLE '<ZSORTZ>  IN CORE SORT - AUTHOR UNKNOWN'\nZSORTZ   CSECT\n***********************************************************************\n*              ******* SORT SUBROUTINE *******                        *\n***********************************************************************\n*                                                                     *\n***********************************************************************\n*              SORT ROUTINE RESTRICTIONS                              *\n*                                                                     *\n*        SORTING IS DONE IN CHARACTER MODE.                           *\n*        SEQUENCE OF ASCENDING OF DESCENDING IS OPTIONAL.             *\n*        MAXIMUM RECORD SIZE, WITHOUT MODIFICATION, IS 200 BYTES.     *\n*        STANDARD O.S. LINKAGE MUST BE USED.                          *\n*        THE ADCON LIST MAY BE GREATER THAN 5 IF MULTI-FIELD          *\n*             SORTING OPTION IS USED.                                 *\n*        ADCON LIST MUST HAVE POINTERS TO THE FOLLOWING VALUES.       *\n*        VALUES POINTED TO MUST BE IN THE FORMS SHOWN BELOW.          *\n*        DUMMY VALUES ARE SHOWN FOR EACH ARGUMENT.                    *\n*                                                                     *\n*        DC    A(TABLELOC)         TABLES LOCATION IN ADCON           *\n*                                                                     *\n*        DC    H'200'              NUMBER OF RECORDS IN TABLE         *\n*                                                                     *\n*        DC    H'50'               LENGTH OF RECORDS IN TABLE         *\n*                                                                     *\n*        DC    H'20'               START SORTING IN BYTE X            *\n*                                    (START COUNTING WITH 1)          *\n* (OPT)  DC    C'A'                ASCENDING SEQUENCE                 *\n*                                                                     *\n*        DC    H'10'               SORT FOR X BYTES                   *\n*                                                                     *\n***********************************************************************\n*              SAMPLE COBOL LINKAGE                                   *\n*        CALL 'ZSORTZ' USING ARRAY, COUNT, LRECL, START-IN, FOR.      *\n*              WHERE...                                               *\n*        ARRAY IS THE DATA-NAME OF THE 01 LEVEL OF THE TABLE.         *\n*        COUNT, A BINARY HALF WORD CONTAINING THE TOTAL RECORDS       *\n*              IN THE TABLE TO BE SORTED.                             *\n*        LRECL, A BINARY HALF WORD CONTAINING THE LOGICAL RECORD      *\n*              LENGTH.                                                *\n*        START-IN, THE FIRST BYTE TO BE SORTED (LEFT MOST, RELATIVE   *\n*              TO ONE, CONTAINED IN BINARY HALF WORD).                *\n*        FOR, THE NUMBER OF BYTES TO BE SORTED IN THE FIELD, RELATIVE *\n*              TO ONE, IN A BINARY HALF WORD.                         *\n* OPTIONAL                                                            *\n*        SEQ, THE DESIRED SEQUENCE, A SINGLE CHARACTER, EITHER AN A   *\n*              OR D. A MISSING SEQUENCE PARAMETER WILL DEFAULT TO     *\n*              ASCENDING.                                             *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MULTIPLE FIELD SORTING...                                    *\n*                                                                     *\n*        ADDITIONAL PASSES CAN BE ACCOMPLISHED BY ADDING ON MORE      *\n*              START-IN AND FOR PARAMETERS.                           *\n*                                                                     *\n*        FOR EACH START-IN, A FOR ENTRY MUST BE PROVIDED.             *\n*        UNBALANCED START-IN AND FOR PARAMETERS WILL EITHER CAUSE THE *\n*        SORT TO BE IGNORED OR WILL RETURN UNKNOWN RESULTS IN THE     *\n*        DATA TABLE PASSED TO THE ROUTINE.                            *\n*        EXAMPLE ON CODING FOR A MULTI-PASS SORT CALL...              *\n*                                                                     *\n*        ENTER LINKAGE.                                               *\n*        CALL 'ZSORTZ' USING ARRAY, COUNT, LRECL, START-IN, FOR,      *\n*              START-IN-2, FOR-2, START-IN-3, FOR-3.                  *\n*        ENTER COBOL.                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n         SAVE  (14,12),,*          SAVE REGS AT ENTRY TIME\n         LR    R5,R13              SAVE POINTER TO CALLING SAVE AREA\n         BALR  R11,R0\n         USING *,R11\n         LA    R13,ZREGSAVE        LOAD SAVE AREA OF THIS PROGRAM\n         ST    R5,ZREGSAVE+4       SAVE POINTER TO PREVIOUS SAVE AREA\n         ST    R13,8(R5)           STORE MY POINTER IN PREVIOUS AREA\n         ST    R1,ZPOINTER         SAVE LOCATION OF ARGUMENT POINTER\n         L     R5,0(R1)            PICK UP POINTER TO TABLE\n         LTR   R5,R5\n         BM    ERROR1\n         ST    R5,ZTABLOC\n         L     R5,4(R1)            PICK UP POINTER TO RECORD COUNT\n         LTR   R5,R5\n         BM    ERROR2\n         LH    R5,0(R5)            PICK UP RECORD COUNT\n         CH    R5,=H'1'            IS ONLY 1 RECORD TO BE SORTED\n         BNH   ZDONEZ              RETURN CONTROL TO USER\n         STH   R5,ZRECNUMB         STORE NUMBER OF RECORDS TO BE SORTED\n         STH   R5,ZMULTHLD         HOLD RECORD COUNT FOR MULTI SORTS\n         L     R5,8(R1)            PICK UP POINTER TO RECORD SIZE\n         LTR   R5,R5\n         BM    ERROR3\n         LH    R5,0(R5)            PICK UP RECORD SIZE\n         STH   R5,ZRECLENG\nZPHASEII L     R5,12(R1)           PICK UP POINTER TO STARTNG SORT BYTE\n         LTR   R5,R5\n         BM    ERROR4\n         LH    R5,0(R5)            PICK UP SORT STARTING BYTE NUMBER\n         STH   R5,ZSRTSORT\n         L     R5,16(R1)           PICK UP POINTER TO NUMBER OF BYTES\n         LTR   R5,R5\n         BM    ZSET#1\n         OI    ZEXITZ+1,X'F0'      SET FOR NEXT SORT PASS\n         B     ZLOADR5\n*\nERROR1   ABEND 1,DUMP,STEP         ONLY ONE PARAMETER PASSED\n*\nERROR2   ABEND 2,DUMP,STEP         ONLY TWO PARAMETERS PASSED\n*\nERROR3   ABEND 3,DUMP,STEP         ONLY THREE PARAMETERS PASSED\n*\nERROR4   ABEND 4,DUMP,STEP         ONLY FOUR PARAMETERS PASSED\n*\nERROR5   ABEND 5,DUMP,STEP         MULTI-PASS SORT ERROR OR UNKNOWN\n*                                  ADDITIONAL PARAMETER FOUND\nZSET#1   NI    ZEXITZ+1,X'0F'      SET FOR LAST PASS\nZLOADR5  LH    R5,0(R5)            PICK UP NUMBER OF BYTES TO BE SORTED\n         STH   R5,ZSORTCNT\n*        START EDITING OF PARAMETERS FOR SEQUENCE ARGUMENT\n*        SEE IF LAST PARAMETER HAS ALREADY BEEN FOUND\n         TM    ZEXITZ+1,X'F0'      IF VALID BRANCH, SET SEQ ASCEND,\n         BZ    ZSETSEQ1            SET NO SEQ CODE, FORCE ASCENDING\n*        OTHER PARAMETERS WERE PASSED. A SEQUENCE PARAMETER MAY OR\n*        MAY NOT BE INCLUDED. IS NEXT ONE SEQUENCE...\n         L     R5,20(R1)           GET NEXT ADCON\n         LTR   R5,R5               IF MINUS, PARM MUST BE SEQ\n         BM    ZTESTP1             NOT SIGNED, EDIT TO SEE IF THIS PARM\n*                                  IS SEQUENCE OR NEXT PASSES IN PARM.\n         CLI   0(R5),C'D'          IS IT DESCENDING\n         BE    ZSETSEQD            SET DESCENDING SEQ\n         CLI   0(R5),C'A'          IS IT ASCENDING\n         BE    ZSETSEQA\n*        SINCE A HEX F IN THE LEFT MOST HALF BYTE OF THE NEXT PASSES\n*        IN PARAMETER WOULD EXCEED MAX LENGTH, IF ON ASSUME INVALID\n*        SEQ CODE.\n         TM    0(R5),X'F0'         IF ON, NOT VALID SEQ CODE, ERROR\n         BO    ERROR5              SET ERROR 5 CONDITION FOR BAD SEQ\n*        OTHERWISE SET CODE SHOWING NO SEQ PARM AND DEFAULT WAS USED\n         MVI   ZSEQCODE,C'N'       NO SEQ PARAMETER FOUND\n         B     ZSETSEQ1            FORCE ASCENDING\n*\n*        NOW EDIT FOR ONLY ONE ADDITIONAL PARAMETER.\nZTESTP1  NI    ZEXITZ+1,X'0F'      SET FOR LAST PASS WITH NOPED BRANCH\n         CLI   0(R5),C'D'          IF NOT D USE DEFAULT OF ASCENDING\n         BE    ZSETSEQ2            DESCENDING SET\n         B     ZSETSEQ1            ASCENDING SET\n*\nZSETSEQA MVI   ZSEQCODE,C'A'       SET ASCENDING CODE\nZSETSEQ1 NI    ZBRA#1+1,X'0F'      DELETE PREVIOUS\n         OI    ZBRA#1+1,X'D0'      SET TO BNH\n         NI    ZBRA#2+1,X'0F'      DELETE PREVIOUS\n         OI    ZBRA#2+1,X'D0'      SET TO BNH\n         B     ZLOADR4\n*\nZSETSEQD MVI   ZSEQCODE,C'D'       SET DESCENDING CODE\nZSETSEQ2 NI    ZBRA#1+1,X'0F'      DELETE PREVIOUS\n         OI    ZBRA#1+1,X'B0'      SET TO BNL\n         NI    ZBRA#2+1,X'0F'      DELETE PREVIOUS\n         OI    ZBRA#2+1,X'B0'      SET TO BNL\nZLOADR4  L     R4,=A(ZTABLOC)      SET POINTER AS BASE REG FOR ARGS\n         LH    R7,6(R4)            LOAD LOGICAL RECORD LENGTH\n         MH    R7,4(R4)            MAX TAB = REC LENGTH * REC COUNT\n         SH    R7,6(R4)            LAST REC LOC = MAX TAB - REC LEN\n         A     R7,0(R4)            LAST ACTUAL REC LOC = LRL + ADCO\n*                                                                     *\n         LH    R10,6(R4)           LOGICAL RECORD LENGTH\n*                                                                     *\n         LH    R8,8(R4)            SORT CONTROL, STARTING BYTE\n         LH    R9,10(R4)           SORT CONTROL, LENGTH OF FIELD\n         L     R3,0(R4)            ADCON OF SORT TABLE\n         ST    R3,ZSRTACON         SAVE ADCON FOR LOW POINT COMPARE\n         LR    R5,R3               SAME FACTOR IN XR 5, 6, AND 7\n         LR    R6,R3\n         LR    R4,R3\n*                                                                     *\n         BCTR  R8,R0\n         AR    R4,R10              BASE + RECORD LENGTH + SRT CTLOC\n         AR    R3,R8               XR 3 NOW B1 FOR COMPARING\n         AR    R4,R8               XR 4 NOW B2 FOR COMPARING\n         AR    R6,R10              XR 6 NOW B2 FOR MOVING\n***********************************************************************\n*                                  XR 5 NOW B1 FOR MOVING             *\n***********************************************************************\n         BCTR  R9,R0\n         BCTR  R10,R0\n***********************************************************************\n*                                  MODIFY MOVE AND COMP INSTRUCTION   *\n***********************************************************************\n         STC   R9,ZCOMP#1+1\n         STC   R10,ZSWAP#1+1\n         STC   R10,ZSWAP#2+1\n         STC   R10,ZSWAP#3+1\n         STC   R9,ZCOMP#2+1\n         STC   R10,ZSWAP#4+1\n         STC   R10,ZSWAP#5+1\n         STC   R10,ZSWAP#6+1\n         LA    R10,1(R10)          INCREMENT REG 10 BY 1\nZCOMP#1  CLC   0(1,R3),0(R4)       MAIN SORT ROUTINE (MOD)\nZBRA#1   BNH   ZBUMP               MODIFIED FOR DESIRED SEQUENCE\nZSWAP#1  MVC   ZSRTHOLD,0(R6)      MODIFIED FOR LENGTH\nZSWAP#2  MVC   0(0,R6),0(R5)       MODIFIED\nZSWAP#3  MVC   0(0,R5),ZSRTHOLD    SWAP COMPLETE (MODIFIED)\n         STM   R3,R6,ZXRSAVE       SAVE BASE REGS FOR MOVE + COMP.\nZSORTLOW C     R5,ZSRTACON         IS THIS THE LOW END OF TABLE.\n         BNH   ZRESTOR             YES, GO RESTORE FACTORS\n         SR    R3,R10\n         SR    R4,R10              DECREMENT MOVE AND SORT FACTOR\n         SR    R5,R10              REGISTERS BY LOGICAL RECORD SIZE\n         SR    R6,R10\nZCOMP#2  CLC   0(1,R3),0(R4)       SWAP SORT ROUTINE (MOD)\nZBRA#2   BNH   ZRESTOR             MODIFIED FOR DESIRED SEQUENCE\nZSWAP#4  MVC   ZSRTHOLD,0(R6)      MODIFIED FOR LENGTH\nZSWAP#5  MVC   0(0,R6),0(R5)       MODIFIED\nZSWAP#6  MVC   0(0,R5),ZSRTHOLD    MODIFIED\n         B     ZSORTLOW            TEST FOR LOW TABLE LIMIT\n*\nZRESTOR  LM    R3,R6,ZXRSAVE       RESTORE OLD FACTORS TO BASE REGS\nZBUMP    AR    R3,R10              INCREMENT REGS FOR NEXT PASS\n         AR    R4,R10\n         AR    R5,R10\n         AR    R6,R10\n         CR    R7,R5               IS SORT COMPLETE\n         BH    ZCOMP#1             CONTINUE WITH SORTING\nZEXITZ   B     ZNXTPASS            NOP/BR SWITCH\nZDONEZ   L     R13,ZREGSAVE+4      START ACTUAL EXIT PROCEDURE\n         RETURN (14,12)\n*\n***********************************************************************\n*        ENTER HERE FOR MORE THAN ONE SORT PASS                       *\n***********************************************************************\nZNXTPASS L     R1,ZPOINTER         PICK UP POINTER TO LAST SET OF PARMS\n         CLI   ZSEQCODE,C'N'       WAS A SEQ PARM FOUND\n         BNE   ZUPIT12\n         LA    R1,8(R1)            INCREMENT FOR NEXT PARAMETERS\n         B     ZSTORE1\n*\nZUPIT12  LA    R1,12(R1)           NOW POINTS TO NEXT IN PARM\nZSTORE1  ST    R1,ZPOINTER         SAVE FOR NEXT PASS (IF ANY)\n         LH    R5,ZMULTHLD\n         STH   R5,ZRECNUMB         RESTORE OLD RECORD COUNT\n         B     ZPHASEII            GO FOR NEXT PASS\n*\nZSEQCODE DC    C'*'                SEQUENCE CODE\nZMULTHLD DC    H'0'                HOLD AREA FOR MULTIPLE SORTS\nZPOINTER DC    F'0'\nZXRSAVE  DS    4F                  HIGHEST SO FAR FACTORS\nZSRTACON DS    F                   ADCON OF TABLES ADDRESS\nZREGSAVE DS    18F                 SAVE REGS FOR SAVE/RETURN MACRO\n***********************************************************************\n*              FOLLOWING CONSTANT AREAS MUST BE IN A SPECIAL ORDER.\nZTABLOC  DC    F'0'                LOCATION OF TABLE TO BE SORTED.\nZRECNUMB DC    H'0'                NUMBER OF RECORDS TO BE SORTED\nZRECLENG DC    H'0'                SAVE AREA FOR RECORD LENGTH\nZSRTSORT DC    H'0'                SAVE AREA FOR SORT STARTING BYTE NBR\nZSORTCNT DC    H'0'                NUMBER OF BYTES TO BE SORTED\n         LTORG\n***********************************************************************\nZSRTHOLD DS    200H                SORT SWAP AREA\n***********************************************************************\n*              END OF SORT SUBROUTINE                                 *\n***********************************************************************\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT360/FILE360.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT360", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}