{"INMR01": {"INMLRECL": 80, "INMFNODE": "JES2POL2", "INMFUID": "TZNICO", "INMTNODE": "POL1", "INMTUID": "TZNICO", "INMFTIME": "20080428050747000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 27920, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "TZNICO.REXXFP.SAMPLIB", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"TZNICO.REXXFP.SAMPLIB": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 27920, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12304, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3339, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "080119", "DS1SCEXT": "b'\\x80m\\x10'", "DS1SCALO": "b'P\\x00\\x00\\x02'", "DS1LSTAR": "b'\\x00\\x03\\x06'", "DS1TRBAL": "b'z\\xfc'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0bp\\x00\\x04\\x89\\x80P'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0bp\\x00\\x04\\x89\\x80P'", "b'X\\xdd\\\\\\xf0\\x00\\x00\\x00\\xb3\\x00\\x06\\x00\\xb3\\x00\\t\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$ABOUT": {"ttr": 529, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Package: REXX FunctionPak\n Author: Gerard J Nicol\n  Email: gerard.nicol@tapetrack.com\nCompany: Eureka Systems Programming Pty Ltd.\nCountry: Australia\nVersion: 2\nRelease: 0\n   Date: 28th April 2008\n\n------------------------------------------------------------------------\n\nRelease Notes\n=============\n\nV2.0: All      - checked to bring up to date\nV1.2: C2B      - fixed bug when arg-1 length eq 32\n               - increased efficiency by using supplied result area\n      MEMBERS  - fixed bug when arg-2 & arg-3 not coded\n      SPRINT   - function added\n      ACF2WHO  - function added\n      RACHECK  - function added\n\nV1.3: SCANLOAD - function added\n      SORTSTAK - function added\n      COMPUM   - function added\n\nV1.4: FMEMBER  - function added\n      LISTDD   - bug causing S0C4 on some systems fixed\n      LISTJF   - bug causing S0C4 on some systems fixed\n\nV1.5: SIZEOF   - function added\n      FINDCHAR - function added\n      SNAP     - function added\n\nV1.6: SLEEP    - added code to allow asyncrenous interupt of STIMER\n                 enabling attention key while paged out\n\nV1.7: CONCAT   - function added\n      SAYSTAK  - function added\n      DEFAULT  - function added\n      RESOLVE  - function added\n      VERLIST  - function added\n      RACHECK  - fixed S282 abend under RACF\n      ACF2WHO  - removed from package, to ensure that the package\n                 was completely generic, ACF2WHO can be supplied on\n                 request.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$$DESCR": {"ttr": 523, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "B2C      Convert a string from binary to character format\nCLS      Clear a 3270 type terminal\nCOMPUM   Compare two strings under a mask\nCONCAT   Concatedates 2-40 Datasets or DDNames\nC2B      Convert a string from character format to binary\nDEFAULT  Sets default value if value has length of 0\nENQLIST  Enquire on GRS enqueus\nFILTER   Compare a string to a filter\nFINDCHAR Finds the first occurence of single/multiple character(s)\nFMEMBER  Find a member in a concatenation\nGDG      Resolve a relative GDG name to an absolute GDG name\nGRG2TOD  Convert a gregorian date to a TOD date\nHEXADD   Add a hexadecimal number to another hex/decimal number\nIPLDATE  Return the date/time of the last IPL in TOD format\nLEAPYEAR Indicate if a year is a leap year\nLISTDD   List allocated data definitions\nLISTJF   List allocated dataset names for a DD Name\nLISTLINK List the dataset names of Link List datasets\nMALLOC   Dynamically allocate memory\nMEMBERS  List members for a given datasets\nMFREE    Dynamically free memory allocated with the MALLOC function\nMLWTO    Issue a multi-line Write-To-Operator message\nPERCENT  Calculate two numbers as a percentage\nP2D      Convert a packed decimal number to decimal\nRACHECK  Check a users access to a RACF/ACF2 entity\nRESOLVE  Resolve JCL type variable from REXX variable pool\nREXXFP   List REXX function packages defined to system\nREXXHC   List REXX host command details\nSAYSTAK  Display the contents of the datastack\nSCANLOAD Display CESD entries for a given load module\nSIZEOF   Return the size in bytes of a dataset\nSLEEP    Stop REXX for specified time\nSNAP     Produces a variable name/value dump for a REXX program\nSORTSTAK Sort a data stack\nSPRINT   Write Full Screen messages to a 3270 terminal\nTASKS    List information on active MVS address spaces\nTM       Test Under Mask (used to check bit settings)\nTOD      Return current date/time in TOD clock format\nTODDAY   Return the day name for a given TOD clock value\nTODDIF   Calculate the day/hour difference between 2 TOD clock values\nTODOFF   Add/Subtract time from a TOD clock value\nTOD2GRG  Convert a TOD clock value to printable format\nUNITS    Display UCB information for a given device class\nUNZIP    Unzip a string compressed by the ZIP function\nVERLIST  Verifies a value against a list of possible values\nWHOAMI   Return information for the current address space\nXLATEUM  Translate a string to EPCDIC/ASCII masking out bytes\nZIP      Compress a string\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$$INDEX": {"ttr": 521, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Member   Description\n-------  ---------------------------------------------------------------\n$$$ABOUT Release information\n$$$DESCR Function Descriptions\n$$$INDEX This Member\n$$$SYNTX Syntax of Funtions\nRFP1000  Example using ENQLIST to display all waiting enqueues\nRFP1001  Example using XLATEUM to selectively translate to ASCII\nRFP1002  Example using ZIP function (also uses percent function)\nRFP1003  Example using TASKS and SLEEP function to check a Task\nRFP1004  Example using GDG to allocate a new GDG Generation\nRFP1005  Example using FILTER to compare a file of dataset names\nRFP1006  Example using WHOAMI & TOD2GRG to get Jobnumber & Start Time\nRFP1007  Example using UNITS/TM to display tape drive units and status\nRFP1008  Example using TODOFF to establish the date in 200 days time\nRFP1009  Example using REXXHC to display the REXX host command table\nRFP1010  Example using REXXFP to display any REXX function packages\nRFP1011  Example using LISTDD & LISTJF to display allocated datasets\nRFP1012  Example using LISTLINK to find a program in the linklist\nRFP1013  Example using MEMBERS to search for a string in a PDS\nRFP1014  Example using MLWTO to issue a multi-line WTO\nRFP1015  Example using C2B, B2C and P2D numeric conversions\nRFP1016  Example using MALLOC & MFREE to dynamically allocate storage\nRFP1017  Example using TASKS to display which TSO users are logged on\nRFP1018  Example using LEAPYEAR to display number of days remaining\nRFP1019  Example using HEXADD to display system control blocks\nRFP1020  Example using IPLDATE do display the date of the last IPL\nRFP1021  Example using GRG2TOD convert a from Gregorian to Julian\nRFP1022  Example using TODOFF to establish days until the year2000\nRFP1023  Example using TODDAY to establish the day of the year2000\nRFP1024  Example using MALLOC/MFREE to communicate with OPC/ESA\nRFP1025  Example using MEMBERS/CLS to display assembler DSECTS\nRFP1027  Example using SPRINT to display a progress control\nRFP1028  Example using RACHECK to check a users access to datasets\nRFP1029  Example using SCANLOAD to display CSECTS in a load module\nRFP1030  Example using COMPUM to compare substrings of a string\nRFP1031  Example using SORTSTAK to sort a data stack\nRFP1032  Example using FMEMBER to find a member in a concatenation\nRFP1033  Example using SIZEOF to establish the size of a dataset\nRFP1034  Example using comparing the efficency of FINDCHAR V's INDEX\nRFP1035  Example using SNAP to produce a formatted REXX Dump\nRFP1036  Example using LISTLINK and SAYSTAK to display the linklist\nRFP1037  Example using DEFAULT to set default values\nRFP1038  Example using RESOLVE to resolve JCL type variables\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$$SYNTX": {"ttr": 285, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "B2C      B2C(binary_string)\nCLS      CLS()\nCOMPUM   COMPUM(filter,string_1,string_2)\nCONCAT   CONCAT(DDName|DSName,DDName|DSName .........)\nC2B      C2B(character_string)\nDEFAULT  DEFAULT(current_value,default_value)\nENQLIST  ENQLIST({major},{minor},{'ONLY'},{'NOSTAK'})\nFILTER   FILTER(filter_string,string)\nFINDCHAR FINDCHAR({string},characters,{occurence})\nFMEMBER  FMEMBER(DD_Name,Member_Name)\nGDG      GDG(relative_gdg_name)\nGRG2TOD  GRG2TOD(gregorian_date,{date_format})\nHEXADD   HEXADD(hex_string,{hex_string},{decimal_string},{S\u00a6X\u00a6D\u00a6C})\nIPLDATE  IPLDATE()\nLEAPYEAR LEAPYEAR(year)\nLISTDD   LISTDD({filter},{'NOSTAK'})\nLISTJF   LISTJF(ddname,{filter},{'NOSTAK'})\nLISTLINK LISTLINK({filter})\nMALLOC   MALLOC(length)\nMEMBERS  MEMBERS(dsname,{filter},{'NOSTAK'})\nMFREE    MFREE(address)\nMLWTO    MLWTO(line1,..,.,,.,,.,,......    ,{line255})\nPERCENT  PERCENT(number1,number2)\nP2D      P2D(packed_decimal_number)\nRACHECK  RACHECK(entity,{READ|UPDATE|ALTER|CONTROL},{class})\nRESOLVE  RESOLVE(string)\nREXXFP   REXXFP()\nREXXHC   REXXHC()\nSAYSTAK  SAYSTAK()\nSCANLOAD SCANLOAD(load_library,module)\nSIZEOF   SIZEOF(datasetname)\nSLEEP    SLEEP(sleep_time)\nSNAP     SNAP({snap_title},{alternate_DDName})\nSORTSTAK SORTSTAK({start_offset},{length},{A|D})\nSPRINT   SPRINT(message_text,{X-Pos},{Y-Pos},{R|B|G|Y|W|P|T},{R,U,B})\nTASKS    TASKS({name_filter},{TSU\u00a6STC\u00a6JOB},{user_filter},{'NOSTAK'})\nTM       TM(byte,hex_mask)\nTOD      TOD()\nTODDAY   TODDAY()\nTODDIF   TODDIF(tod_value1,{tod_value2})\nTODOFF   TODOFF(tod_value,{+\u00a6-},{days},{hours},{minutes})\nTOD2GRG  TOD2GRG(tod_value,{date_format})\nUNITS    UNITS('DASD'\u00a6'TAPE')\nUNZIP    UNZIP(zipped_string)\nWHOAMI   WHOAMI()\nXLATEUM  XLATEUM('A'\u00a6'E',string,mask)\nZIP      ZIP(string)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASSEMBLE": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00 \\x01\\x08\\x11\\x9f\\x01\\x08\\x11\\x9f\\x14(\\x00\\\\\\x00_\\x00\\x00\\xe3\\xe9\\xd5\\xc9\\xc3\\xd6@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2008-04-28T00:00:00", "modifydate": "2008-04-28T14:28:20", "lines": 92, "newlines": 95, "modlines": 0, "user": "TZNICO"}, "text": "//TZNICOTS JOB CLASS=A,MSGCLASS=X,NOTIFY=&SYSUID,MSGLEVEL=(1,1)\n//*\n//ASM      PROC MOD=\n//ASSEMBLE EXEC PGM=ASMA90,PARM='XREF(FULL)'\n//SYSLIB   DD DSN=&SYSUID..REXXFP.MACLIB,DISP=SHR\n//         DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.MODGEN,DISP=SHR\n//SYSIN    DD DSN=&SYSUID..REXXFP.SRCLIB(&MOD),DISP=SHR\n//SYSUT1   DD DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),UNIT=VIO,\n//            DCB=BUFNO=1\n//SYSPRINT DD SYSOUT=*\n//SYSPUNCH DD DSN=&&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//            DISP=(MOD,PASS),\n//            DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n//*\n//LINK     EXEC PGM=HEWL,PARM='MAP,LET,LIST'\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD DSN=*.ASSEMBLE.SYSPUNCH,DISP=(SHR,DELETE)\n//SYSLIB   DD DSN=&SYSUID..REXXFP.LOAD,DISP=SHR\n//SYSLMOD  DD DSN=&SYSUID..REXXFP.LOAD(&MOD),DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(1024,(120,120),,,ROUND),UNIT=VIO,\n//             DCB=BUFNO=1\n//         PEND\n//*\n//PS1      EXEC PROC=ASM,MOD=GJNGETJF\n//PS2      EXEC PROC=ASM,MOD=GJNTABLE\n//PS3      EXEC PROC=ASM,MOD=SNAP0000\n//PS4      EXEC PROC=ASM,MOD=SNAP0001\n//PS5      EXEC PROC=ASM,MOD=SNAP0002\n//PS6      EXEC PROC=ASM,MOD=SNAP0003\n//PS7      EXEC PROC=ASM,MOD=SNAP0004\n//PS8      EXEC PROC=ASM,MOD=GJNWRITE\n//PS9      EXEC PROC=ASM,MOD=GJNCNCAT\n//PS10     EXEC PROC=ASM,MOD=GJNDYN00\n//PS11     EXEC PROC=ASM,MOD=GJNFLTER\n//PS12     EXEC PROC=ASM,MOD=GJNMODSC\n//PS13     EXEC PROC=ASM,MOD=GJNREGDS\n//PS14     EXEC PROC=ASM,MOD=SORTSTK0\n//PS15     EXEC PROC=ASM,MOD=SORTSTK1\n//PS16     EXEC PROC=ASM,MOD=SORTSTK2\n//*\n//PS20     EXEC PROC=ASM,MOD=BRANCH\n//PS21     EXEC PROC=ASM,MOD=B2C\n//PS22     EXEC PROC=ASM,MOD=CLS\n//PS23     EXEC PROC=ASM,MOD=COMPUM\n//PS24     EXEC PROC=ASM,MOD=CONCAT\n//PS25     EXEC PROC=ASM,MOD=C2B\n//PS26     EXEC PROC=ASM,MOD=DEFAULT\n//PS27     EXEC PROC=ASM,MOD=ENQLIST\n//PS28     EXEC PROC=ASM,MOD=FILTER\n//PS29     EXEC PROC=ASM,MOD=FINDCHAR\n//PS30     EXEC PROC=ASM,MOD=FMEMBER\n//PS31     EXEC PROC=ASM,MOD=GDG\n//PS32     EXEC PROC=ASM,MOD=GRG2TOD\n//PS33     EXEC PROC=ASM,MOD=HEXADD\n//PS34     EXEC PROC=ASM,MOD=IPLDATE\n//PS35     EXEC PROC=ASM,MOD=LEAPYEAR\n//PS36     EXEC PROC=ASM,MOD=LISTDD\n//PS37     EXEC PROC=ASM,MOD=LISTJF\n//PS38     EXEC PROC=ASM,MOD=LISTLINK\n//PS39     EXEC PROC=ASM,MOD=MALLOC\n//PS40     EXEC PROC=ASM,MOD=MEMBERS\n//PS41     EXEC PROC=ASM,MOD=MFREE\n//PS42     EXEC PROC=ASM,MOD=MLWTO\n//PS43     EXEC PROC=ASM,MOD=MODLOAD\n//PS44     EXEC PROC=ASM,MOD=PERCENT\n//PS45     EXEC PROC=ASM,MOD=P2D\n//PS46     EXEC PROC=ASM,MOD=RACHECK\n//PS47     EXEC PROC=ASM,MOD=RESOLVE\n//PS48     EXEC PROC=ASM,MOD=REXXFP\n//PS49     EXEC PROC=ASM,MOD=REXXFP10\n//PS50     EXEC PROC=ASM,MOD=REXXHC\n//PS51     EXEC PROC=ASM,MOD=SAYSTAK\n//PS52     EXEC PROC=ASM,MOD=SCANLOAD\n//PS53     EXEC PROC=ASM,MOD=SIZEOF\n//PS54     EXEC PROC=ASM,MOD=SLEEP\n//PS55     EXEC PROC=ASM,MOD=SNAP\n//PS56     EXEC PROC=ASM,MOD=SORTSTAK\n//PS57     EXEC PROC=ASM,MOD=SPRINT\n//PS58     EXEC PROC=ASM,MOD=TASKS\n//PS59     EXEC PROC=ASM,MOD=TM\n//PS60     EXEC PROC=ASM,MOD=TOD\n//PS61     EXEC PROC=ASM,MOD=TODDAY\n//PS62     EXEC PROC=ASM,MOD=TODDIF\n//PS63     EXEC PROC=ASM,MOD=TODOFF\n//PS64     EXEC PROC=ASM,MOD=TOD2GRG\n//PS65     EXEC PROC=ASM,MOD=UNITS\n//PS66     EXEC PROC=ASM,MOD=UNZIP\n//PS67     EXEC PROC=ASM,MOD=VERLIST\n//PS68     EXEC PROC=ASM,MOD=WHOAMI\n//PS69     EXEC PROC=ASM,MOD=XLATEUM\n//PS70     EXEC PROC=ASM,MOD=ZIP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RXFP1000": {"ttr": 527, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Display all waiting enqueues                          */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nsay \"Major--- Task---- Type----- Status- LPAR Major--------------------\"\n\nA=ENQLIST(\"\",,\"ONLY\")\n\ndo while queued()>0\n   parse pull Major Task Type Status Domain Minor\n\n   if Type=\"E\" then Type=\"Exclusive\"\n   else Type=\"Share\"\n\n   if Status=\"W\" then Status=\"Waiting\"\n   else Status=\"Holding\"\n\n   Output=\"\"\n   Output=Overlay(Major,Output,1)\n   Output=Overlay(Task,Output,10)\n   Output=Overlay(Type,Output,19)\n   Output=Overlay(Status,Output,29)\n   Output=Overlay(Domain,Output,37)\n   Output=Overlay(Substr(Minor,1,38),Output,41)\n   say Output\nend\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1001": {"ttr": 15, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Convert a file from EBCDIC-ASCII selectively          */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nXFLT=\"    ******          **************    *\"\n\n\"Alloc DD(SYSIN)  Ds(*) Reus\"\n\"Alloc DD(SYSOUT) Ds(*) Reus\"\n\"EXECIO * DISKR SYSIN (stem record. Finis)\"\n\ndo I=1 to record.0\n   outrec.I=XLATEUM(\"A\",record.I,XFLT)\nend\n\n\"EXECIO \"record.0\" DISKW SYSOUT (stem outrec. finis)\"\n\"Free DD(SYSIN,SYSOUT)\"\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1002": {"ttr": 17, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: compress to output from a file                        */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\n\"Alloc DD(SYSIN)  Ds(*) Reus\"\n\"Alloc DD(SYSOUT) Ds(*) Reus\"\n\"EXECIO * DISKR SYSIN (stem record. Finis)\"\n\ndo I=1 to record.0\n   outrec.I=ZIP(record.I)\n   A=length(record.I)\n   B=length(outrec.I)\n   say \"Original length of input=\" A\n   say \" Zipped length of output=\" B\n   say \"  Compression percentage=\" percent(A,B)\nend\n\n\"EXECIO \"record.0\" DISKW SYSOUT (stem outrec. finis)\"\n\"Free DD(SYSIN,SYSOUT)\"\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1003": {"ttr": 265, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Check the HSC started task is active every 2 seconds  */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\ndo I=1 to 2\n   if TASKS(\"HSC\",\"STC\",,\"NOSTAK\") = 0 then,\n\n      if sysvar(\"SYSENV\")=\"BACK\" then\n          A=MLWTO(\"Attn: HSC is not active..\",\"Please investigate\")\n      else\n          say \"Attn: HSC is not active.. Please investigate\"\n\n   null=SLEEP(\"00000500\")\nend\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1004": {"ttr": 19, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Allocate the next generation of a GDG dataset         */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nAddress TSO\n\nDSN=\"MY.GDG.FILE\"\n\n\"Alloc Ds('\"GDG(DSN\"(+1)\")\"') Like('\"GDG(DSN\"(0)\")\"')\"\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1005": {"ttr": 21, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Display records of a dataset that match a filter      */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nAddress TSO\n\"Alloc DD(SYSIN) Ds(*) Reus\"\n\"EXECIO * DISKR SYSIN (stem record. finis)\"\n\ndo I=1 to record.0\n  if filter(\"%%%AR*\",record.I) then say record.I\nend\n\n\"Free DD(SYSIN)\"\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1006": {"ttr": 23, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Establish you JobNumber & Start Time                  */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nsay \"My JobNumber is:\" substr(WHOAMI(),10,8)\nsay \"I started work @\" TOD2GRG(substr(WHOAMI(),28,8),\"YYYYMMDD\")\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1007": {"ttr": 25, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Display all tape drives and their status              */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nStatus.0=\"Offline\"\nStatus.1=\"Online\"\n\nnewstack\nA=UNITS(\"TAPE\")\n\ndo while queued() > 0\n   pull UCB_Record\n   Unit_Status =TM(substr(UCB_Record,4,1),\"80\"x)\n   Unit_ID     =C2X(substr(UCB_Record,5,2))\n   say \"Unit(\"Unit_ID\") is\" Status.Unit_Status\nend\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1008": {"ttr": 27, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Establish the date in 200 days time                   */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nTodays_TOD=TOD()\nIn_200_Days=TODOFF(Todays_TOD,\"+\",200)\nsay TOD2GRG(In_200_Days,\"YYYYMMDD\")\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1009": {"ttr": 29, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Display entried in the REXX Host Command Table        */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nnewstack\nA=REXXHC()\n\ndo while queued() > 0\n   pull Record\n   say Word(Record,1)\nend\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RXFP1010": {"ttr": 31, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Display REXX function table information               */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nnewstack\nA=REXXFP()\n\ndo while queued() > 0\n   pull Record\n   say Record\nend\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RXFP1011": {"ttr": 271, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Display allocated datasets with SYS1.* prefix         */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nnewstack\nA=LISTDD()\n\ndo while queued() > 0\n   pull DDName\n   newstack\n   A=LISTJF(DDName,\"SYS1.*\")\n   do while queued() > 0\n      pull DSN\n      say DDName \"----\" DSN\n   end\n   delstack\nend\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1012": {"ttr": 33, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Find a program in the linklist                        */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nparse upper arg PGM\nif PGM=\"\" then do\n   say \"No program specified in argument\"\n   exit(10)\nend\n\nnewstack\nA=LISTLINK()\n\ndo while queued() > 0\n   pull DSN\n   say \"DSN=\" DSN \"Status=\" Sysdsn(\"'\"DSN\"(\"PGM\")'\")\nend\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1013": {"ttr": 275, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Find a string in a PDS                                */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nparse upper arg SString Dataset\n\nif SString=\"\" then do\n   say \"No argument specified .....(default of IHADCB used)\"\n   SString=\"IHADCB\"\nend\nif Dataset=\"\" then do\n   say \"No dataset specified .....(default of SYS1.MACLIB used)\"\n   Dataset=\"SYS1.MACLIB\"\nend\n\nnewstack\nA=MEMBERS(Dataset)\n\ndo while queued() > 0\n   pull Member\n   newstack\n   Address TSO\n   \"Alloc DD(PDS) Ds('\"Dataset\"(\"Member\")') Shr Reus\"\n   \"EXECIO * DISKR PDS (Finis)\"\n   \"Free DD(PDS)\"\n   do while queued() > 0\n      pull record\n      if index(record,SString)>0 then do\n          say \"String found in member:\" Member\n      end\n   end\n   delstack\nend\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1014": {"ttr": 35, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Issue a Multi-line WTO message                        */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nMID=MLWTO(\"This is a test message\", \"Please ignore it .....\")\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1015": {"ttr": 37, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Numeric Conversions                                   */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nA_Binary_Number=\"11111101\"\nA_Packed_Number=\"1234567A\"x\n\nA=B2C(A_Binary_Number)\nB=C2B(A)\nC=P2D(A_Packed_Number)\n\nsay A B C\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1016": {"ttr": 39, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Allocate + Free Storage                               */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nLocation=MAlloc(2000)                         /*Allocate 2000 bytes */\nA=Storage(C2X(Location),1,\"EYECATCHER\")       /*Move is data        */\nsay Storage(C2X(Location),10)                 /*Display Storage     */\nA=MFree(Location)                             /*Free Storage        */\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1017": {"ttr": 531, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Display who from your group is logged on              */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nTZNICO=\"Gerard\"\nGERARD0=\"Gerard\"\nC682371=\"Damien\"\nC705075=\"Lucy\"\nIN00658=\"Moises\"\nC697723=\"Adam\"\nPDES=\"Desmond\"\nPGXN=\"Gerard\"\nGNI13=\"Gerard\"\n\nA=TASKS(,\"TSU\")\n\ndo while queued() > 0\n  pull a_record\n  userid=substr(a_record,1,8)\n  LTime=substr(a_record,28,8)\n  TaskID=Word(userid,1)\n  interpret \"Name=\"TaskID\n  if Name \\= TaskID then do\n     LTime=TOD2GRG(LTime,\"DDMMYYYY\")\n     Ltime=insert(\"/\",LTime,2)\n     LTime=insert(\"/\",LTime,5)\n     LTime=insert(\":\",LTime,13)\n     LTime=insert(\":\",LTime,16)\n     LTime=insert(\".\",LTime,19)\n     say Name \"is logged in ....... as @ \" LTime\n   end\nend\n\ndelstack\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1018": {"ttr": 41, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Display number of days remaining this year            */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nCYear=substr(Date(\"J\"),1,2)+1900\nCDays=substr(Date(\"J\"),3,3)\n\nsay \"Days remaining=\" leapyear(CYear)+365 - CDays\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1019": {"ttr": 43, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Display system control blocks                         */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nCVT      =hexadd(\"0\"x,,16,\"S\")\nSMCA     =hexadd(CVT,,196,\"S\")\nSMCASID  =hexadd(SMCA,,16,\"S\")\nsay \"The system-id for this system is:\" SMCASID\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1020": {"ttr": 257, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Display date of last IPL                              */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nLast_IPL=IPLDATE()\nLast_IPL=TOD2GRG(Last_IPL,\"DDMMYYYY\")\nLast_IPL=insert(\"/\",Last_IPL,2)\nLast_IPL=insert(\"/\",Last_IPL,5)\nLast_IPL=insert(\":\",Last_IPL,13)\nLast_IPL=insert(\":\",Last_IPL,16)\nLast_IPL=insert(\".\",Last_IPL,19)\n\nsay \"The Last IPL was on \" Last_IPL\n\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1021": {"ttr": 259, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Convert a Gregorian Date to a Julian Date             */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nSay \"Please enter date in format DDMMYYYY:\"\npull input_date\n\nif GRG2TOD(input_date,\"DDMMYYYY\",\"VERIFY\") then do\n   A=GRG2TOD(input_date,\"DDMMYYYY\")\n   say \"Julian Date:\" TOD2GRG(A,\"YYYYDDD\")\nend\nelse say \"Invalid date value entered .....\"\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1022": {"ttr": 533, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Establish the number of days/hours to 1/1/2015        */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nA=GRG2TOD(2032001)\nA=TODDIF(A)\nDays=Word(A,2)/1\nHours=Word(A,3)\nHours=insert(\":\",Hours,2)\nHours=insert(\":\",Hours,5)\nHours=insert(\".\",Hours,8)\n\nSay \"Don't Panic there's a whole\" Days \"days &\" Hours,\n       \"hours left 'til 2032\"\n\nA=GRG2TOD(19710908,\"YYYYMMDD\")\nB=GRG2TOD(2015001)\nA=TODDIF(A,B)\nDays=Word(A,2)/1\n\nsay \"I will be\" days \"days old when the epoch date bug hits ..\"\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1023": {"ttr": 535, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Establish the day to start your holidays              */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nA=GRG2TOD(2032001)\nA=TODOFF(A,\"-\",1)\n\nsay \"Reminder to start holidays on the\" TODDAY(A) \"before 2032\"\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1024": {"ttr": 261, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Communicate with OPC/ESA address space                */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nparse upper arg ADID\nif ADID=\"\" then do\n   say \"No Application-ID specified as argument\"\n   exit(10)\nend\n\n/* Allocate required OPC/ESA Datasets --------------------------------*/\nAddress TSO\n\"ALLOC F(EQQMLIB) DA('OPCESA.INST.SEQQMSG0') SHR REUS\"\n\"ALLOC F(EQQMLOG) Ds(*)  Reus\"\n\"ALLOC F(EQQDUMP) SYSOUT Reus\"\n\n/* Set Default Values for PIF ----------------------------------------*/\nDAR=Left('00000000'x,4)\nARN=Left(' ',8)\nARV=Left('00000000'x,4)\nCOM=Left('00000000'x,4)\nORC=Left('00000099'x,4)\nOPL=\"ACT RES DAR ARN ARV COM ORC\"\n\n/* Initialize communications with OPC/ESA ----------------------------*/\nACT=Left('INIT',8)\nRES=Left('OPCE',8)\nAddress LINKPGM \"EQQYCOM\" OPL\n\n/* List OPC/ESA Current Plan Occurences ------------------------------*/\nACT=Left(\"LIST\",8)\nRES=Left(\"CPOC\",8)\nARN=Left(\"ADID\",16)\nARV=MALLOC(16)\nnull=storage(C2X(ARV),16,left(ADID,16))\nAddress LINKPGM \"EQQYCOM\" OPL\n\nACT=Left(\"SELECT\",8)\nARN=Left('NEXT',16)\n\nSay \"Application-ID\"\nSay \"----------------\"\n\ndo I=1 while ORC=\"00000000\"x\n    say SegBody(DAR,1,16)\n    Address LINKPGM \"EQQYCOM\" OPL\nend\n\nsay \"Applications that match argument=\" I-1\n\nnull=MFREE(ARV)\nACT=Left(\"TERM\",8)\nAddress LINKPGM \"EQQYCOM\" OPL\n\nexit(0)\n\n/* Functions ---------------------------------------------------------*/\nSegHead: return storage(D2X(C2D(Arg(1))+(Arg(2)*16)-16),16)\nSegName: return substr(SegHead(Arg(1),Arg(2)),1,8)\nSegOSet: return C2D(substr(SegHead(Arg(1),Arg(2)),9,4))\nSegBody: return storage(D2X(C2D(arg(1))+SegOSet(arg(1),arg(2))),arg(3))\n/* Functions ---------------------------------------------------------*/\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1025": {"ttr": 263, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Display DSECT labels for a given system macro         */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nmsg=\"\"\ncols=sysvar(\"SYSWTERM\")-1\n\ndo forever\n   null=cls()\n   say right(\"(\"msg\")\",cols,\"-\")\n   say \"Enter mapping macro (X=exit):\"\n   parse upper pull macro\n   if macro =\"X\" then leave\n   if macro \\=\"\" then msg=Process(macro) ;\nend\nexit(0)\n\n/*____________________________________________________________________*/\n\nProcess: procedure\n\nselect\n  when members(\"SYS1.MACLIB\",arg(1),\"NOSTAK\") then,\n     msg=READ(\"SYS1.MACLIB\",arg(1))\n  when members(\"SYS1.MACLIB\",arg(1),\"NOSTAK\") then,\n     msg=READ(\"SYS1.MODGEN\",arg(1))\n  otherwise msg=\"Macro not found, please re-enter\"\nend\nreturn msg\n\n/*____________________________________________________________________*/\n\nRead: procedure\n\nAddress TSO\n\"Alloc DD(MACRO) Ds('\"arg(1)\"(\"arg(2)\")') Shr Reus\"\nnewstack\n\"EXECIO * DISKR MACRO (Finis)\"\n\"Free DD(MACRO)\"\ndo while queued()>0\n   pull record\n   if word(record,2)=\"DSECT\" then do\n       if substr(word(record,1),1,1)=\"*\" then iterate\n       else say \"DSECT Label=\" word(record,1)\n   end\nend\ndelstack\n\nsay \"Processing complete: <enter> to continue\"\npull null\nreturn \"Macro processed-OK\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1027": {"ttr": 525, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Display a progress control on a 3270 terminal         */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\na=InitMeter();\n\na=meter(01,\"Initializing .........\")\n\n/* Creation Routines */\n\na=meter(05,\"Creating files........\")\n\n/* Allocation Routines */\n\na=meter(10,\"Allocating files......\")\na=meter(20,\"Preparing for copy....\")\na=meter(30,\"Copying files.........\")\na=meter(35,\"Installing............\")\na=meter(40,\"Removing work files...\")\na=meter(50,\"Instalation complete..\")\n\nexit(0)\n\nInitMeter: Procedure\na=sprint(center(\"Please WAIT\",52),10,10,T,R)\na=sprint(center(\"           \",52),10,11,T,R)\na=sprint(center(\"           \",50),11,11,W,R)\na=sprint(center(\"           \",52),10,12,T,R)\nreturn 1\n\nMeter: Procedure\nparse arg I J\na=sprint(right(\"\",I),11,11,R,R)\na=sprint(right(\"Percent Complete:\" percent(I,50),25),35,12,T,R)\na=sprint(left(arg(2),24),11,12,T,R)\nreturn 1\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1028": {"ttr": 515, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Check a users access to datasets provided by a listc  */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nparse upper arg LVL TYP\nif LVL=\"\" then LVL=sysvar(\"SYSUID\")\nif TYP=\"\" then TYP=\"ALTER\"\n\na=outtrap(\"lista.\",\"*\",\"concat\")\naddress TSO \"LISTCAT LVL(\"LVL\")\"\na=outtrap(\"OFF\")\n\ndo I=1 to lista.0 by 2\n   DSN=word(lista.I,3)\n   if RACHECK(DSN,TYP) then say \"I have \"TYP\" access to\" DSN\n   else say \"I do not have \"TYP\" access to\" DSN\nend\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1029": {"ttr": 267, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Locate CSECTS in a load module                        */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nA=LISTLINK()\ndo while queued()>0\n   pull DSN\n   if SYSDSN(\"'\"DSN\"(IEBGENER)'\") = \"OK\" then do\n      newstack\n      A=SCANLOAD(DSN,\"IEBGENER\")\n      do while queued()>0\n         parse pull entry offset length type\n         if type = 3 then,\n           say \"Entry(\"entry\") length(\"length\") type(\"CSECT\")\"\n      end\n   end\nend\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1030": {"ttr": 269, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Compare two strings under a mask                      */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nstring1=\"The cat sat on the mat,said fred\"\nstring2=\"The rat sat on the mat,said joe\"\nstring3=\"The cat sat on the rat,said mike\"\n filter=\"****   ********************\"\n\nif COMPUM(filter,string1,string2) then say \"string1 is like string 2\"\nif COMPUM(filter,string2,string3) then say \"string2 is like string 3\"\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1031": {"ttr": 517, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Sort a data stack                                     */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nqueue \"Sam\"\nqueue \"Gerard\"\nqueue \"Fred\"\nqueue \"Adam\"\nqueue \"Jennifer\"\n\nA=SORTSTAK(1,2,A)\nA=SAYSTAK()\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1032": {"ttr": 273, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Find a member in a concatenation                      */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nparse value FMEMBER(\"ISPPLIB\",\"ISR@PRIM\") with c ds filler\nsay \"ISPF Panel ISR@PRIM was found in dataset\" ds \"which is @ concat\" c\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1033": {"ttr": 283, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Estimate the size on bytes of a dataset               */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nA=CLS()\nparse upper arg dsn\ndsn=word(translate(dsn,\"   \",\"()'\"),1)\n\nif DSN=\"\" then do\n   say \"No dataset passed as arg(1) ....\"\n   exit(10)\nend\n\nparse value SIZEOF(DSN) with RHigh RLow LRECL\n\nsay \"Dataset: \" DSN\nsay \"          -------- Records (High): \" RHigh/1\nsay \"          -------- Records (Low):  \" RLow/1\nsay \"          -------- Bytes:          \" RHigh*LRECL\nif RLow>0 then,\n    say \"          -------- % Error:        \" Percent(RLOW,RHIGH)\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1034": {"ttr": 279, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Display the increase in efficency when using the      */\n/*              FINDCHAR function as opposed to the INDEX function    */\n/*              when looking for both a single character, and when    */\n/*              looking for multiple characters in a string           */\n/*                                                                    */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nA=CLS()\n\nstring=overlay(\"abcdef\",\" \",5000000)    /* define a string */\n\nsay \"Comparison checking for first occurence of single character ...\"\n\nA=sysvar(SYSCPU)                        /* get CPU usage   */\nZ=index(string,\"c\")                     /* use index to find char */\nB=sysvar(SYSCPU)                        /* get CPU usage   */\nsay \"Using the INDEX function we used approx.\" B-A \"CPU Seconds\"\nsay \" ........ the result=\" Z\n\n\nA=sysvar(SYSCPU)                        /* get CPU usage   */\nZ=findchar(string,\"c\")                  /* use findchar to find char */\nB=sysvar(SYSCPU)                        /* get CPU usage   */\nsay \"Using the FINDCHAR function we used approx.\" B-A \"CPU Seconds\"\nsay \" ........ the result=\" Z\n\nsay \"\"\nsay \"Comparison checking for first occurence of multiple characters...\"\n\nA=sysvar(SYSCPU)                        /* get CPU usage   */\nZ=MIN(index(string,\"c\"),index(string,\"d\"),index(string,\"e\"))\nB=sysvar(SYSCPU)                        /* get CPU usage   */\n\nsay \"Using the INDEX function we used approx.\" B-A \"CPU Seconds\"\nsay \" ........ the result=\" Z\n\nA=sysvar(SYSCPU)                        /* get CPU usage   */\nZ=findchar(string,\"cde\")                /* use findchar to find char */\nB=sysvar(SYSCPU)                        /* get CPU usage   */\n\nsay \"Using the FINDCHAR function we used approx.\" B-A \"CPU Seconds\"\nsay \" ........ the result=\" Z\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1035": {"ttr": 281, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Produce a formatted REXX Dump                         */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nFirst_Name=\"Paul\"\nMiddle_Initial.1=\"J\"\nMiddle_Name=\"Keating\"\nBig_Variable=Overlay(\"\",\"\",1,300,\"01\"X)\n\nAddress TSO \"Alloc DD(MYSNAP) Sysout(X) Reus\"\n\nsay \"Performing SNAP .....\"\n\nA=Snap(\"My Snap\",\"MYSNAP\")\n\nsay \"SNAP performed OK ...\"\n\nAddress TSO \"Free DD(MYSNAP)\"\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1036": {"ttr": 277, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Display the Linklist                                  */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nA=LISTLINK()\nA=SAYSTAK()\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RXFP1037": {"ttr": 513, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Set Defaults for a value                              */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nparse upper arg A1 A2 A3\n\nA1=DEFAULT(A1,\"BROWSE\")\n\nif \\ VERLIST(A1,\"BROWSE\",\"EDIT\") then exit(10)\n\nA2=DEFAULT(A2,\"SYS1.MACLIB\")\nA3=DEFAULT(A3,\"CVT\")\n\nAddress ISPEXEC \"Control Errors Return\"\nAddress ISPEXEC \"\"A1\" Dataset('\"A2\"(\"A3\")')\"\nAddress ISPEXEC \"Control Errors Cancel\"\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXFP1038": {"ttr": 519, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/*********************************REXX*********************************/\n/*                                                                    */\n/* Description: Resolve symbolics in a string                         */\n/*     Package: REXX Function Pack (1)                                */\n/*      Author: Gerard J Nicol                                        */\n/*                                                                    */\n/*********************************REXX*********************************/\n\nHLQ='SYS1'\nsay \"Allocating DSN=\" RESOLVE(\"&HLQ..&SYSNAME..D&YYMMDD..T&HHMMSS\")\n\nexit(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT323/CBT.V500.FILE323.PDS/SAMPLIB.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT323/CBT.V500.FILE323.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}