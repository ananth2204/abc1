{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011330000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE141.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE141.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x04'", "DS1TRBAL": "b'\\xc7|'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x07\\x00\\x08\\x01\\x07\\x00\\x0c\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$INFO": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "THE PROGRAM BRDANL CAN BE USED TO LIST AND ANALYZE YOUR SYS1.BRODCAST\nDATASET.  SEE THE COMMENTS IN THE MAIN PROGRAM FOR MORE INFORMATION.\n\nTHIS PDS CONTAINS THE FOLLOWING MEMBERS.\n$$INFO   -  THIS MEMBER.\nATJ07S   -  A TABLE SORT SUBROUTINE.\nBRDANL   -  THE MAIN PROGRAM.\nBRDCNV   -  A SUBROUTINE USED BY BRDANL.\nBRDREAD  -  A SUBROUTINE TO READ BRODCAST SEQUENTIALLY.\nRUNJCL   -  SAMPLE RUN JCL.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ATJ07S": {"ttr": 518, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'ATJ07S: TABLE SORT SUBROUTINE'                           0000010\n*        PARAMETERS:                                                     0000020\n*        (1) BEGINNING OF TABLE TO BE SORTED -                           0000030\n*        (2) LENGTH OF TABLE ENTRY -            H'1' TO H'32767'         0000040\n*        (3) NUMBER OF ENTRIES -                H'1' TO H'32767'         0000050\n*        (4) KEY LOCATION IN RECORD -           H'1' TO H'4096'          0000060\n*        (5) KEY LENGTH -                       H'1' TO H'256'           0000070\n*        (6) SEQUENCE BYTE -                    A=ASCENDING;             0000080\n*                                                                        0000090\nATJ07S   CSECT                                                           0000100\n         USING *,R15                                                     0000130\n         STM   R14,R12,12(R13)         SAVE REGISTERS                    0000140\n         LM    R3,R8,0(R1)             GET PARAMETER ADDRESSES           0000150\n         CLI   0(R8),C'A'              ASCENDING SEQUENCE?               0000160\n         BE    *+8                     YES                               0000170\n         MVI   BACKUP+11,X'B0'         ALTER MASK FOR DESCENDING SEQ.    0000180\n         MVC   HKEYLNG(2),0(R7)        RETRIEVE KEY LENGTH               0000190\n         LH    R7,HKEYLNG              GET KEY LENGTH                    0000200\n         BCTR  R7,0                    CONVERT TO LENGTH CODE            0000210\n         STC   R7,BACKUP+5             STORE IN CLC INSTRUCTION          0000220\n         MVC   HKEYLOC(2),0(R6)        RETRIEVE KEY LOCATION             0000230\n         LH    R6,HKEYLOC              GET KEY LOCATION                  0000240\n         BCTR  R6,0                    CONVERT TO DISPLACEMENT           0000250\n         STH   R6,BACKUP+6             STORE IN CLC                      0000260\n         STH   R6,BACKUP+8               INSTRUCTION                     0000270\n         OI    BACKUP+6,16*R5          BASE REGISTERS                    0000280\n         OI    BACKUP+8,16*R6            FOR CLC INSTRUCTION             0000290\n         MVC   HNUMNRY(2),0(R5)        RETRIEVE NUMBER OF ENTRIES        0000300\n         LH    R5,HNUMNRY              GET NUMBER OF ENTRIES             0000310\n         LR    R2,R5                   SAVE FOR USE DURING SORT          0000320\n         BCTR  R5,0                    DECREMENT BY 1                    0000330\n         MVC   HLNGNRY(2),0(R4)        RETRIEVE LENGTH OF ENTRY          0000340\n         LH    R8,0(R4)                GET ENTRY LENGTH                  0000350\n         MR    R4,R8                   (# OF ENTRY - 1) X LNG = DISPLCE  0000360\n         LA    R12,0(R5,R3)            STRT + DISPLCE = ADDR LAST ENTRY  0000370\n         LR    R10,R8                  LENGTH OF EACH ENTRY              0000380\n         BCTR  R10,0                   CONVERT TO LENGTH CODE            0000390\n         STC   R10,UNDER257+1          STORE IN                          0000400\n         STC   R10,UNDER257+7            XC INSTRUCTIONS                 0000410\n         STC   R10,UNDER257+13             FOR EXCHANGE                  0000420\n         SRA   R10,8                   ENTRY LENGTH > 256?               0000430\n         BZ    HALVE                   NO                                0000440\n         MVI   LOOPSW+1,X'00'          YES, ENABLE EXCHANGE LOOP         0000450\n         STC   R10,LOOPSW+7            SET UP LOOP COUNTER               0000460\n*                                                                        0000470\n*        THE FOLLOWING INSTRUCTIONS CONSTITUTE A SHELL SORT.             0000480\n*                                                                        0000490\nHALVE    SRA   R2,1                                                      0000500\n         BZ    RETURN                                                    0000510\n         LR    R7,R3                                                     0000520\n         LR    R9,R12                                                    0000530\n         LR    R11,R2                                                    0000540\n         MR    R10,R8                                                    0000550\n         SR    R9,R11                                                    0000560\nLOOP     LR    R5,R7                                                     0000570\nBACKUP   LA    R6,0(R5,R11)                                              0000580\n         CLC   0(0,R5),0(R6)   ********INSTRUCTION BUILT AT ENTRY        0000590\n         BNH   BXLE            ********BNL FOR DESCENDING SEQUENCE       0000600\n         LR    R4,R5                                                     0000610\nLOOPSW   B     UNDER257        ********BRANCH IF ENTRY LENGTH < 257      0000620\n         LA    R10,0           ********LOOP COUNTER SET UP AT ENTRY      0000630\nXCLOOP   XC    0(256,R4),0(R6)                                           0000640\n         XC    0(256,R6),0(R4)                                           0000650\n         XC    0(256,R4),0(R6)                                           0000660\n         LA    R4,256(R4)                                                0000670\n         LA    R6,256(R6)                                                0000680\n         BCT   R10,XCLOOP                                                0000690\nUNDER257 XC    0(0,R4),0(R6)                                             0000700\n         XC    0(0,R6),0(R4)                                             0000710\n         XC    0(0,R4),0(R6)                                             0000720\n         SR    R5,R11                                                    0000730\n         CR    R5,R3                                                     0000740\n         BNL   BACKUP                                                    0000750\nBXLE     BXLE  R7,R8,LOOP                                                0000760\n         B     HALVE                                                     0000770\nRETURN   MVI   BACKUP+11,X'D0'         RESET ASCENDING SEQUENCE          0000780\n         MVI   LOOPSW+1,X'F0'          DISABLE EXCHANGE LOOP             0000790\n         LM    R14,R12,12(R13)         RESTORE REGISTERS                 0000800\n         BR    R14                     RETURN TO CALLER                  0000810\nR1       EQU   1                       ADDRESS OF PARAMETER LIST         0000820\nR2       EQU   2                                                         0000830\nR3       EQU   3                                                         0000840\nR4       EQU   4                                                         0000850\nR5       EQU   5                                                         0000860\nR6       EQU   6                                                         0000870\nR7       EQU   7                                                         0000880\nR8       EQU   8                                                         0000890\nR9       EQU   9                                                         0000900\nR10      EQU   10                                                        0000910\nR11      EQU   11                                                        0000920\nR12      EQU   12                                                        0000930\nR13      EQU   13                      SAVE AREA ADDRESS                 0000940\nR14      EQU   14                      RETURN ADDRESS                    0000950\nR15      EQU   15                      BASE REGISTER = EPA               0000960\nHKEYLNG  DC    H'0'                    HOLD KEY LENGTH                   0000970\nHKEYLOC  DC    H'0'                    HOLD KEY LOCATION                 0000980\nHNUMNRY  DC    H'0'                    HOLD NUMBER OF ENTRIES            0000990\nHLNGNRY  DC    H'0'                    HOLD LENGTH OF AN ENTRY           0001000\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BRDANL": {"ttr": 521, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " /*      SYS1.BRODCAST ANALYZER PROGRAM   (BRDANL)                    */\n0/*  THIS PROGRAM MAY BE USED TO ANALYZE THE CONTENTS AND USE OF\n THE SYS1.BRODCAST DATASET.\n INPUT TO THE PROGRAM IS THE BRODCAST DATASET - DDNAME BRODCST;\n OUTPUT FROM THE PROGRAM IS PRINTED OUTPUT - DDNAME OUTPUT.\n\n THE PARM ON THE EXECUTE STATEMENT SPECIFIES WHAT OPTIONSARE TO BE TAKEN\n AS FOLLOWS\n\n      PARAMETER   ABBREV       MEANING\n\n      USERMSG     USERM     THE MESSAGES (MAIL) WHICH ARE STORED ON\n                            BRODCAST ARE PRINTED BY USER.\n  *   NOUSERMSG   NOUSERM   MAIL IS NOT TO BE PRINTED.\n      USERTOTALS  USERT     THE NUMBER OF MESSAGES (MAIL) FOR EACH USER\n                            ARE TO BE PRINTED (UNLESS ZERO).\n  *   NOUSERTOT   NOUSERT   MESSAGE TOTALS ARE NOT TO BE PRINTED.\n      USERINDEX   USERI     AN INDEX TO THE USERMSG AND/OR USERTOTALS\n                            REPORT IS TO BE PRINTED.\n  *   NOUSERIND   NOUSERI   NO INDEX IS TO BE PRINTED.\n      ANALYSIS    ANAL      AN ANALYSIS BY RECORD TYPE IS TO BE DONE.\n  *   NOANALYSIS  NOANAL    NO ANALYSIS BY RECORD TYPE IS TO BE DONE.\n      DUMP        DUMP      A SEQUENTIAL (FORMATTED) DUMP OF BRODCST\n                            IS TO BE PRINTED.\n  *   NODUMP      NODUMP    NO DUMP IS TO BE PRINTED.\n      CHAINS      CHAIN     A LISTING WHICH FOLLOWS THE USER MAIL\n                            CHAINS IS TO BE PRODUCED.\n      UNCHAIN               ONLY UNCHAINED RECORDS WILL BE SHOWN ON\n                            CHAIN REPORT (ASSUMES CHAIN).\n  *   NOCHAINS    NOCH      NO CHAIN LISTING IS TO BE PRODUCED.\n      ALL         ALL       ALL OPTIONS ABOVE ARE TO BE TAKEN (EXCEPT\n                            THOSE FOR WHICH 'NO' PARAMETERS APPEAR).\n\n      MMSG=NNN              NNN = WARNING THRESHOLD FOR USER TOTALS.\n\n      SELECT                UP TO 9 USERIDS ARE TO BE SELECTED FOR\n                            PRINTING BASED ON A 'SYSIN' CARD.\n                            THIS OPTION IS IN CONJUNCTION WITH\n                            'USERMSG' AND/OR 'USERTOT'.\n (*  INDICATES DEFAULTS)\n1PARAMETERS ARE SEPARATED FROM EACH OTHER BY ANY CHARACTER, OR MAY BE\n RUN TOGETHER AS ONE CONTIGUOUS STRING; THE PARAMETERS SHOULD BE\n PRECEDED BY A SLASH (/).\n\n EXAMPLE - PARM='/ALL,NODUMP,NOUSERT,NOCH' MEANS THE SAME AS\n           PARM='/ALLNODUMPNOUSERTNOCH'    WHICH MEANS THE SAME AS\n           PARM='/USERM.NOUSERT.USERI.ANAL'\n\n FUTURE PLANNED OPTIONS INCLUDE:\n    1) AUTOMATIC DELETION OF UNCHAINED RECORDS,\n    2) ANALYSIS BY THE \"AGE\" OF THE RECORDS; AND\n    3) AUTOMATIC DELETION OF \"OLD\" RECORDS.\n-THE PROGRAM ALLOWS FOR 3000 TOTAL RECORDS IN THE FILE, AND\n                        1800 TOTAL USERS.                             */\n1        BROD: PROC(EXEC_PARM) OPTIONS(MAIN);\n         DEFAULT RANGE(*) STATIC; /*  MAKE ALL \"STATIC\" BY DEFAULT    */\n-/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n /*    FILE DECLARATIONS                                              */\n /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n0   DCL BRODCST FILE ENV(F RECSIZE(129) BLKSIZE(129)\n        REGIONAL(1)) KEYED;\n    DCL OUTPUT FILE ENV(F RECSIZE(133) BLKSIZE(133));\n0/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n /*    SUBROUTINE DECLARATIONS                                        */\n /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n0   DCL ATJ07S ENTRY OPTIONS(ASM);     /* TABLE SORT SUBROUTINE       */\n0   DCL BRDCNV ENTRY(CHAR(4) VARYING) RETURNS(FIXED BINARY(31));\n /*     BRDCNV IS A FUNCTION TO CONVERT LESS THAN FULLWORD CHARACTER\n        CONSTANTS TO BE FULLWORD BINARY CONSTANTS.                    */\n0   DCL BRDREAD ENTRY(CHAR(130));\n /*     BRDREAD IS A SUBROUTINE TO READ SYS1.BRODCAST SEQUENTIALLY.   */\n1/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n /*    MISCELLANEOUS FIELD DECLARATIONS                               */\n /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n0   DCL VERSION                   CHAR(3)   INIT('4.0');\n0   DCL EXEC_PARM                 CHAR(100) VARYING;\n    DCL OPTION_INFO(2)            CHAR(100) VARYING INIT('','');\n0   DCL (DATE, TIME, PLIDUMP, ADDR, INDEX, SUBSTR, HBOUND, UNSPEC,\n         LINENO, TRANSLATE, STRING)  BUILTIN;\n0   DCL MSG_LIMIT                 FIXED DECIMAL(3)  INIT(50);\n    DCL MMSG_FORMATTED            PIC'999';\n    DCL COUNT_FIELD               FIXED DECIMAL  INIT(0);\n    DCL COUNT_FIELD_FORMATED      PIC'9999';\n    DCL RECORD_NUMBER             FIXED DECIMAL  INIT(0);\n    DCL SAVE_USERID               CHAR(7);\n    DCL  (KEYFLD, HOLDKEY)        PIC'(8)9';\n    DCL  (USER_COUNT, DIR_COUNT)  FIXED BIN(15)  INIT(0);\n    DCL  HOLD_TYPE                CHAR(1);\n    DCL  TEMPHOLD                 FIXED BIN(15,0);\n    DCL  LAST_MAIL                FIXED BIN(15,0)  INIT(0);\n    DCL  UNCHAINED_SECTION        BIT(1) INIT('0'B);\n0/*      REPORT OPTION & OTHER FLAGS:   (0 = NO, 1 = YES)             */\n0   DCL USERMSG_FLAG BIT(1) INIT('0'B),        /* PRINT USER MSGS     */\n        TOTALS_FLAG  BIT(1) INIT('0'B),        /* # OF MSGS PER USER  */\n        INDEX_FLAG   BIT(1) INIT('0'B),        /* INDEX OF USERS      */\n        ANALYZE_FLAG BIT(1) INIT('0'B),        /* BRODCAST ANALYSIS   */\n        CHAIN_FLAG   BIT(1) INIT('0'B),        /* FOLLOW CHAINS       */\n        DUMP_FLAG    BIT(1) INIT('0'B),        /* DUMP OF BRODCAST    */\n        CTBL_FLAG    BIT(1) INIT('0'B),        /* NEEDS CHECK_TBL     */\n        UNCHAIN_FLAG BIT(1) INIT('0'B),        /* UNCHAIN RPT ONLY    */\n        SELECT_FLAG  BIT(1) INIT('0'B),        /* ONLY SELECTED USERS */\n        SELECTED     BIT(1) INIT('1'B);        /* THIS IS ONE OF 'EM  */\n1   DCL  SORT_ENTRY_LENGTH FIXED BIN(15,0)  INIT(8),\n         SORT_ENTRY_NUMBER FIXED BIN(15,0)  INIT(0),\n         SORT_KEY_LOC      FIXED BIN(15,0)  INIT(1),\n         SORT_KEY_LENGTH   FIXED BIN(15,0)  INIT(4),\n         SORT_SEQUENCE     CHAR(1)          INIT('A');\n0   DCL LINES_PER_PAGE     FIXED BIN(15,0)  INIT(55);\n    DCL LINES_IN_INDEX     FIXED BIN(15,0);\n    DCL LINES_TO_SKIP      FIXED DEC(3)     INIT(1);\n    DCL PAGE_NUMBER        FIXED DEC(3)     INIT(0);\n    DCL RPT_NUMBER         FIXED BIN(15,0)  INIT(1);\n0   DCL HEX00              BIT(8)           INIT('00000000'B),\n        HEX01              BIT(8)           INIT('00000001'B),\n        HEX02              BIT(8)           INIT('00000010'B),\n        HEX03              BIT(8)           INIT('00000011'B),\n        HEX04              BIT(8)           INIT('00000100'B),\n        HEX88              BIT(8)           INIT('10001000'B),\n        HEXFF              BIT(8)           INIT('11111111'B);\n0   DCL (I, J, K, K1, IDIR, INDX, INDX_HOLD)\n                           FIXED BIN(15,0);\n0   DCL BDATE              PIC'99/99/99',\n        BTIME              PIC'9999';\n0   DCL SELECT_AREA        CHAR(72)         INIT(' ');\n    DCL 1  SEL_USER_AREA   DEFINED(SELECT_AREA),\n           2  SEL_USER(9)  CHAR(8);\n1/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n /*    ANALYSIS AND INDEX TABLE DECLARATIONS                          */\n /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n0   DCL  1  CHECK_TABLE(0:3000) CONTROLLED,\n            3  CHECK_TYPE  CHAR(1),\n            3  CHECK_FWD   FIXED DEC(5,0),\n            3  CHECK_BWD   FIXED DEC(5,0);\n0/* USER_TABLE CONTAINS AN ENTRY FOR EACH USER THAT HAS MAIL.\n    (NOTE THAT IF THIS TABLE CHANGES LENGTH, ETC. THE ATJ07S SORT\n     PARAMETERS (SORT_ENTRY_LENGTH, ETC.) MUST REFLECT THE CHANGE.    */\n    DCL  1  USER_TABLE(1800)  CONTROLLED,   /* ONE PER USER ID        */\n            3  USER_ID     CHAR(4),\n            3  USER_PTR    FIXED BIN(15),   /* RBA OF 1ST MAIL RCD    */\n            3  USER_PAGE   FIXED BIN(15);   /* PAGE # OF 1ST MESSAGE  */\n /*  NOTE THAT THE TABLE ABOVE MUST HAVE 9 TIMES THE ENTRIES OF\n     THE TABLE BELOW.                                                 */\n0   DCL  1    MSGDIR_TABLE(200) CONTROLLED, /* ONE PER MAIL DIR. RCD  */\n              3    MSGDIR_RBA              FIXED BIN(15),\n              3    MSGDIR_ENTRY(9),\n                   5    MSGDIR_USERID      CHAR(4),\n                   5    MSGDIR_USER_RBA    FIXED BIN(15);\n0   DCL  TYPE_COUNT(0:6)   FIXED DEC(4,0) INIT((7)(0));\n0   DCL  DESCRIPTIONS(0:6)  CHAR(30)  INIT(\n         'BROADCAST DIRECTORY ENTRY',\n         'MAIL DIRECTORY ENTRY',\n         'BROADCAST MESSAGE ENTRY',\n         'USER MAIL ENTRY',\n         'BROADCAST DATASET HEADER',\n         'UNUSED MAIL ENTRY',\n         'START OF UNCHAINED MAIL');\n1/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n /*    SYS1.BRODCAST RECORD DECLARATIONS                              */\n /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n0/*    FIRST RECORD -- POINTS TO ALL CHAINS:                          */\n    DCL  1  BCREC1   BASED(BC1POINT),\n            3  R1BCFLGS BIT(8),     /* BRODCAST FLAGS (NOT USED)      */\n            3  R1BCPTR  CHAR(3),    /* PTR TO 1ST BRODCAST DIR RCD    */\n            3  R1USFLGS BIT(8),     /* USER MAIL FLAGS (NOT USED)     */\n            3  R1USPTR  CHAR(3),    /* PTR TO 1ST USER MAIL DIR RCD   */\n            3  R1RECNUM CHAR(4),    /* NUMBER OF RECORDS IN DATA      */\n            3  R1BCMAX  CHAR(2),    /* MAXIMUM BRODCAST MSG NUMBER,\n                                       FROM MASTER SCHED BASEA        */\n            3  R1DSN    CHAR(24),   /* DATA SET NAME IN EBCDIC EQUAL\n                                       ' SYS1.BRODCAST DATA SET'      */\n            3  R1NOTUSD CHAR(87),   /* FUTURE USE                     */\n            3  R1RES    CHAR(4);    /* RESERVED                       */\n    DCL  BC1AREA        CHAR(129);\n    DCL  BC1POINT       PTR;\n    BC1POINT = ADDR(BC1AREA);\n0/*      USER MAIL DIRECTORY RECORD:                                  */\n    DCL  1  USDIR  BASED(USDPOINT),\n            3  USDENTRY(9),         /* ENTRY FOR EACH VALID USERID    */\n               5  USDID    CHAR(7), /* USERID CURRENTLY VALID         */\n               5  USDRBA   CHAR(3), /* RELATIVE BLOCK ADDRESS OF MSG\n                                       FOR THIS USERID, OR ZERO IF\n                                       NO MESSAGE.                    */\n               5  USDEND   CHAR(3), /* RBA OF LAST MSG FOR USER       */\n            3  USDRES   CHAR(8),    /* RESERVED                       */\n            3  USDREND  CHAR(1),    /* END OF RECORD INDICATOR, X'7F' */\n            3  USDNEXT  CHAR(3);    /* PTR TO NEXT USER MAIL DIR RCD  */\n    DCL  USDAREA        CHAR(129);\n    DCL  USDPOINT       PTR;\n    USDPOINT = ADDR(USDAREA);\n0/*      USER MAIL MESSAGE RECORD   (ALSO USED FOR BRODCAST MSG)      */\n    DCL  1  USMSG  BASED(USMPOINT),\n            3  USMLNG   CHAR(1),    /* LENGTH OF USER MESSAGE         */\n            3  USMTEXT  CHAR(125),  /* USER MESSAGE TEXT              */\n            3  USMPTR   CHAR(3);    /* POINTER TO NEXT USER MESSAGE\n                                       RECORD FOR THIS USERID, OR\n                                       ZERO IF NO MORE RECORDS        */\n    DCL  USMAREA        CHAR(129);\n    DCL  USMPOINT       PTR;\n    USMPOINT = ADDR(USMAREA);\n1/*      BRODCAST MESSAGE DIRECTORY RECORD:                           */\n    DCL  1  BCDIR  BASED(BCDPOINT),\n            3  BCDENTRY(25),        /* ENTRY FOR EACH MESSAGE         */\n               5  BCDMSGNO CHAR(2), /* MESSAGE NUMBER                 */\n               5  BCRBA    CHAR(3), /* RELATIVE BLOCK ADDRESS OF MSG*/\n            3  BCREND   CHAR(1),    /* END OF RECORD INDICATOR, X'7F' */\n            3  BCDPTR   CHAR(3);    /* PTR TO NEXT USER MAIL DIR RCD  */\n    DCL  BCDPOINT       PTR;\n-/*      RECORD DESCRIPTION FOR SEQUENTIAL READ OF FILE               */\n    DCL  1  SEQ_RECORD  BASED(SEQPTR),\n            3  SEQ_KEY  BIT(8),     /* RECORD KEY                     */\n            3  SEQ_BODY CHAR(129);\n    DCL  SEQ_RECORD_130 CHAR(130);\n    DCL  SEQPTR PTR;\n         SEQPTR = ADDR(SEQ_RECORD_130);\n    BCDPOINT = ADDR(SEQ_BODY);   /* BC DIR IS NOT READ RANDOMLY       */\n1/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n /*    OUTPUT AREA DECLARATIONS (FOR FILE \"OUTPUT\")                   */\n /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n0   DCL  OPT_AREA                 CHAR(132);\n0   DCL  1  OPTA_AREA  DEFINED(OPT_AREA),  /* ANALYSIS PRINT LINE     */\n            3  FILLER1            CHAR(20),\n            3  OPTA_FIRST         PIC'9999', /* 1ST NUMBER OF RANGE   */\n            3  OPTA_THRU          CHAR(1),   /*     '-'               */\n            3  OPTA_LAST          PIC'9999', /* LAST NUMBER OF RANGE\n                                          (ALSO USED FOR TOTAL RCDS)  */\n            3  FILLER2            CHAR(2),\n            3  OPTA_DESCRIPTION   CHAR(98);   /*  TEXT                */\n0   DCL  1  OPTC_AREA  DEFINED(OPT_AREA),  /* CHAIN PRINT LINE        */\n            3  FILLER1            CHAR(3),\n            3  OPTC_DIR_RBA       PIC'9999', /* DIRECTORY RBA         */\n            3  OPTC_DIR_DASH      CHAR(4),\n            3  OPTC_DOWN_LINE     CHAR(1),\n            3  OPTC_USER_STUFF,\n               5  OPTC_USER_DASH  CHAR(3),\n               5  OPTC_RBAS(23),\n                  7  OPTC_RBA     PIC'9999',\n                  7  OPTC_RBA_DASH  CHAR(1),\n               5  FILLER2         CHAR(1);\n    DCL   1  OPTC_REDO  DEFINED(OPT_AREA),\n             3  FILLER1           CHAR(2),\n             3  OPTC_MAILTOP      CHAR(6),\n             3  FILLER2           CHAR(3),\n             3  FILLER3(23),\n                5  FILLER6        CHAR(4),\n                5  OPTC_END_CHAR  CHAR(1);\n0   DCL  1  OPTD_AREA  DEFINED(OPT_AREA),  /* DETAILED PRINT LINE     */\n            3  FILLER1            CHAR(1),\n            3  OPTD_RNUM          PIC'9999', /* RBA OF RECORD         */\n            3  FILLER2            CHAR(2),\n            3  OPTD_TEXT          CHAR(125); /* MESSAGE TEXT          */\n0   DCL  1  OPTI_AREA  DEFINED(OPT_AREA),  /* INDEX PRINT LINE        */\n            3  FILLER1            CHAR(9),\n            3  OPTI_ENTRIES(7),\n               5  OPTI_ID         CHAR(5),     /* USER ID             */\n               5  OPTI_SEP        CHAR(4),     /* SEPARATOR CHARACTER */\n               5  OPTI_PAGE       PIC'999',\n               5  FILLER2         CHAR(5);\n0   DCL  1  OPT0_AREA  DEFINED(OPT_AREA),  /* DUMP RECORD 0 FORMAT    */\n            3  OPT0_RTYPE         CHAR(1),   /* RECORD NUMBER         */\n            3  FILLER1            CHAR(2),\n            3  OPT0_RNUM          PIC'9999', /* RBA OF RECORD         */\n            3  FILLER2            CHAR(2),\n            3  OPT0_RCD_CHN       PIC'9999', /* RBA OF NEXT RECORD    */\n            3  OPT0_RBAS(9),\n               5  FILLER3         CHAR(3),\n               5  OPT0_MSGNO      PIC'999',  /* MESSAGE NUMBER        */\n               5  FILLER4         CHAR(1),\n               5  OPT0_BCCHN      PIC'9999'; /* RBA OF MESSAGE        */\n0   DCL  1  OPT1_AREA  DEFINED(OPT_AREA),   /* DUMP RECORD 1 FORMAT   */\n            3  OPT1_RTYPE         CHAR(1),    /* RECORD TYPE - '1'    */\n            3  FILLER1            CHAR(2),\n            3  OPT1_RNUM          PIC'9999',  /* RBA                  */\n            3  FILLER2            CHAR(2),\n            3  OPT1_RCD_CHN       PIC'9999',  /* NEXT RBA             */\n            3  OPT1_USERS(5),                 /* USER ID ENTRIES      */\n               5  FILLER3         CHAR(3),\n               5  OPT1_USER       CHAR(8),    /* USER ID              */\n               5  OPT1_USCHN      PIC'9999',  /* FIRST MAIL RCD RBA   */\n               5  OPT1_SLASH      CHAR(1),    /* \"/\"                  */\n               5  OPT1_USEND      PIC'9999';  /* LAST MAIL RCD RBA    */\n0   DCL  1  OPT2_AREA  DEFINED(OPT_AREA),    /* DUMP RECORD 2 FORMAT  */\n            3  OPT2_RTYPE         CHAR(1),   /* RECORD TYPE - '2'     */\n            3  FILLER1            CHAR(2),\n            3  OPT2_RNUM          PIC'9999', /* RECORD NUMBER         */\n            3  FILLER2            CHAR(2),\n            3  OPT2_FLAG          CHAR(4),   /* NOT USED INDICATOR    */\n            3  FILLER3            CHAR(2),\n            3  OPT2_TEXT          CHAR(117);\n0   DCL  1  OPT3_AREA   DEFINED(OPT_AREA),  /* DUMP RECORD 3 FORMAT   */\n            3  OPT3_RTYPE         CHAR(1),    /* RECORD TYPE - '3'    */\n            3  FILLER1            CHAR(2),\n            3  OPT3_RNUM          PIC'9999',  /* RBA                  */\n            3  FILLER2            CHAR(2),\n            3  OPT3_RCD_CHN       PIC'9999',  /* NEXT RBA             */\n            3  FILLER3            CHAR(2),\n            3  OPT3_MESSAGE       CHAR(117);  /* MESSAGE TEXT         */\n0   DCL  1  OPT4_AREA   DEFINED(OPT_AREA),  /* DUMP RECORD 3 FORMAT   */\n            3  OPT4_RTYPE         CHAR(1),    /* RECORD TYPE - '4'    */\n            3  FILLER1            CHAR(2),\n            3  OPT4_RNUM          PIC'9999',  /* RBA                  */\n            3  FILLER2            CHAR(8),\n            3  OPT4_BC_CONSTANT   CHAR(4),    /* 'B->'                */\n            3  OPT4_BCRBA         PIC'9999',  /* RBA OF 1ST BC DIR    */\n            3  FILLER3            CHAR(2),\n            3  OPT4_US_CONSTANT   CHAR(4),    /* 'U->'                */\n            3  OPT4_USDRBA        PIC'9999',  /* RBA OF 1ST USER DIR  */\n            3  FILLER4            CHAR(2),\n            3  OPT4_NUM_CONSTANT  CHAR(6),    /* '#RCDS'              */\n            3  OPT4_RECNUM        PIC'9999',  /* NUMBER OF RCDS IN DS */\n            3  FILLER5            CHAR(2),\n            3  OPT4_MAX_CONSTANT  CHAR(7),    /* 'MAX.BC'             */\n            3  OPT4_BCMAX         PIC '9999', /* MAX # BRODCAST MSGS  */\n            3  FILLER6            CHAR(2),\n            3  OPT4_HDR_CONSTANT  CHAR(24);   /* HEADER CONSTANT      */\n0   DCL  1  OPT9_AREA   DEFINED(OPT_AREA),  /* DUMP DELETD RCD FORMAT */\n            3  FILLER1            CHAR(3),\n            3  OPT9_RNUM          PIC'9999',  /* RBA                  */\n            3  FILLER2            CHAR(2),\n            3  OPT9_FLAG          CHAR(6),    /* DELETED INDICATOR    */\n            3  FILLER             CHAR(6),\n            3  OPT9_MESSAGE       CHAR(111);  /* MESSAGE TEXT         */\n1   DCL PAGE_CONSTANT CHAR(28) INIT('S Y S 1 . B R O D C A S T');\n0   DCL PAGE_HEADER1(4) CHAR(50)  VARYING;\n    DCL PAGE_HEADER2(4) CHAR(100) VARYING;\n0   PAGE_HEADER1(1) = 'U S E R   M E S S A G E   R E P O R T';\n    PAGE_HEADER2(1) = '  RBA   TEXT/TOTALS';\n0   PAGE_HEADER1(2) = 'R E C O R D   A N A L Y S I S';\n    PAGE_HEADER2(2) = (22)' ' || 'RBA''S      USE';\n0   PAGE_HEADER1(3) = 'F O R M A T T E D   D U M P';\n    PAGE_HEADER2(3) = 'T  RBA   NRBA';\n0   PAGE_HEADER1(4) = 'U S E R   M A I L   C H A I N S';\n    PAGE_HEADER2(4) = '';\n-   DCL DASH_LINE                 CHAR(132);\n0   DASH_LINE = (11)' '  ||  '| |'  ||  (116)'-'  ||  '|';\n0   DCL DOWN_CHARACTER            CHAR(1)   INIT('|');\n1/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n /*    ON CONDITIONS                                                  */\n /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n0   ON ERROR BEGIN;\n         ON ERROR BEGIN;\n              CALL PLIDUMP('TFSHB');\n              SIGNAL FINISH;\n              END;\n         PUT DATA(COUNT_FIELD, RECORD_NUMBER, USER_COUNT,\n                  DIR_COUNT, KEYFLD, HOLDKEY);\n         PUT DATA;\n         SIGNAL FINISH;\n         END;\n0   ON ENDPAGE(OUTPUT) BEGIN;      /* END OF PAGE ROUTINE             */\n         PAGE_NUMBER = PAGE_NUMBER + 1;\n         PUT FILE(OUTPUT) EDIT(PAGE_CONSTANT, PAGE_HEADER1(RPT_NUMBER),\n              BDATE, BTIME, 'PAGE ', PAGE_NUMBER)\n           (PAGE,COL(10),A,A,COL(100),A,COL(110),A,\n            COL(120),A,P'999');\n         IF PAGE_HEADER2(RPT_NUMBER) \u00ac= ' ' THEN\n              PUT FILE(OUTPUT) EDIT(PAGE_HEADER2(RPT_NUMBER))\n                   (SKIP(2),A);\n         PUT FILE(OUTPUT) SKIP(2);\n         LINES_TO_SKIP = 1;\n         END;\n0   ON ENDFILE(SYSIN)  CALL ERRINPT;\n    ON UNDEFINEDFILE(SYSIN) CALL ERRINPT;\n0   ERRINPT: PROC;\n      OPT_AREA =\n        'SELECT CARD MISSING OR BLANKS - ''SELECT'' OPTION CANCELLED';\n      LINES_TO_SKIP = 2;\n      CALL WRITER;\n      SELECT_FLAG = '0'B;\n      END ERRINPT;\n1/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n /*    MAIN LINE PROGRAM                                              */\n /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n0   CALL INIT;            /* INITIALIZATION -\n                             OPEN FILES, CHECK EXEC PARAMETERS,\n                             ALLOCATE & INITIALIZE TABLES, AND VERIFY\n                             THAT DATASET USED IS SYS1.BRODCAST.      */\n0   IF TOTALS_FLAG  |\n       ANALYZE_FLAG |\n       CHAIN_FLAG   THEN\n         CALL READRAND;   /* READ BRODCAST RANDOMLY -\n                             FOLLOW USER MAIL CHAINS; OPTIONALLY,\n                             PRINT USER MESSAGES AND/OR TOTALS,\n                             FILL IN TABLES, AND PRINT INDEX.         */\n0   IF ANALYZE_FLAG |\n       DUMP_FLAG    |\n       CHAIN_FLAG THEN\n         CALL READSEQ;    /* READ BRODCAST SEQUENTIALLY -\n                             FILL IN TABLES; OPTIONALLY, PRINT DUMP.  */\n0   IF ANALYZE_FLAG THEN\n         CALL PRTANAL;    /* PRINT ANALYSIS REPORT.                   */\n0   IF CHAIN_FLAG THEN\n         CALL PRTCHAIN;   /* PRINT CHAIN REPORT.                      */\n0   CLOSE FILE (OUTPUT);\n    RETURN;\n-\n-/*    WRITER SUBROUTINE                                              */\n0WRITER: PROC;\n    PUT FILE(OUTPUT) EDIT(OPT_AREA) (SKIP(LINES_TO_SKIP),A);\n    OPT_AREA = ' ';\n    LINES_TO_SKIP = 1;\n END WRITER;\n1/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n /*    INIT:    INITIALIZATION                                        */\n /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n0 INIT:  PROC;\n0   OPEN FILE (BRODCST) INPUT DIRECT UNBUFFERED;\n    OPEN FILE (OUTPUT)  PAGESIZE(LINES_PER_PAGE) LINESIZE(132)\n         STREAM PRINT OUTPUT;\n0   BDATE = DATE;\n    BTIME = SUBSTR(TIME,1,4);\n    OPT_AREA = 'SYS1.BRODCAST ANALYZER PROGRAM (BRDANL)'    ||\n               ' - VERSION '  ||  VERSION;\n    CALL WRITER;\n    OPT_AREA = 'REPORT(S) AS OF '  ||\n               BDATE  ||  ' AT '  ||  BTIME;\n    LINES_TO_SKIP = 3;\n    CALL WRITER;\n    LINES_TO_SKIP = 2;\n0/*  CHECK THE EXECUTE CARD PARMS.                                    */\n0   IF EXEC_PARM = '' THEN DO;\n         OPT_AREA = 'OPTION(S) SPECIFIED: NONE';\n         CALL WRITER;\n         END;\n    ELSE DO;\n         OPT_AREA = 'OPTION(S) SPECIFIED: ' || EXEC_PARM;\n         CALL WRITER;\n0        IF INDEX(EXEC_PARM,'ALL')             \u00ac= 0 THEN\n              USERMSG_FLAG, TOTALS_FLAG, ANALYZE_FLAG, DUMP_FLAG,\n              INDEX_FLAG, CHAIN_FLAG = '1'B;\n         IF INDEX(EXEC_PARM,'NOUSERM')       \u00ac= 0 THEN\n              USERMSG_FLAG = '0'B;\n         ELSE IF INDEX(EXEC_PARM,'USERM')    \u00ac= 0 THEN\n              USERMSG_FLAG = '1'B;\n         IF INDEX(EXEC_PARM,'NOUSERT')       \u00ac= 0 THEN\n              TOTALS_FLAG = '0'B;\n         ELSE IF INDEX(EXEC_PARM,'USERT')    \u00ac= 0 THEN\n              TOTALS_FLAG = '1'B;\n         IF INDEX(EXEC_PARM,'NOUSERI')       \u00ac= 0 THEN\n              INDEX_FLAG = '0'B;\n         ELSE IF INDEX(EXEC_PARM,'USERI')    \u00ac= 0 THEN\n              INDEX_FLAG = '1'B;\n         IF INDEX(EXEC_PARM,'NOANAL')        \u00ac= 0 THEN\n              ANALYZE_FLAG = '0'B;\n         ELSE IF INDEX(EXEC_PARM,'ANAL')     \u00ac= 0 THEN\n              ANALYZE_FLAG = '1'B;\n         IF INDEX(EXEC_PARM,'NODUMP')        \u00ac= 0 THEN\n              DUMP_FLAG = '0'B;\n         ELSE IF INDEX(EXEC_PARM,'DUMP')     \u00ac= 0 THEN\n              DUMP_FLAG = '1'B;\n         IF INDEX(EXEC_PARM,'NOCH')          \u00ac= 0 THEN\n              CHAIN_FLAG = '0'B;\n         ELSE IF INDEX(EXEC_PARM,'CHAIN')    \u00ac= 0 THEN\n              CHAIN_FLAG = '1'B;\n         IF INDEX(EXEC_PARM,'UNCHAIN')       \u00ac= 0 THEN\n              UNCHAIN_FLAG = '1'B;\n         IF INDEX(EXEC_PARM,'SELECT')        \u00ac= 0 THEN\n              SELECT_FLAG = '1'B;\n0        I = INDEX(EXEC_PARM,'MMSG=');\n         IF I \u00ac= 0 THEN\n              MSG_LIMIT = SUBSTR(EXEC_PARM,I+5,3);\n         END;\n0   IF \u00ac (USERMSG_FLAG | TOTALS_FLAG | DUMP_FLAG |\n          CHAIN_FLAG | ANALYZE_FLAG) THEN DO;\n         OPT_AREA = 'NO PROGRAM OUTPUT REQUESTED.';\n         CALL WRITER;\n         STOP;\n         END;\n0   IF USERMSG_FLAG THEN          /* 'USERMSG' ASSUMES 'USERTOT'      */\n         TOTALS_FLAG = '1'B;\n0   IF INDEX_FLAG & \u00ac TOTALS_FLAG THEN\n         INDEX_FLAG = '0'B;\n0   IF SELECT_FLAG & \u00ac TOTALS_FLAG THEN\n         SELECT_FLAG = '0'B;\n    IF ANALYZE_FLAG & \u00ac CHAIN_FLAG THEN\n         CHAIN_FLAG, UNCHAIN_FLAG = '1'B;\n    IF USERMSG_FLAG THEN\n         OPTION_INFO(1) = OPTION_INFO(1)  ||  'USERMSG ';\n    ELSE\n         OPTION_INFO(2) = OPTION_INFO(2)  ||  'NOUSERMSG ';\n    IF TOTALS_FLAG THEN DO;\n         OPTION_INFO(1) = OPTION_INFO(1)  ||  'USERTOTALS ';\n         MMSG_FORMATTED = MSG_LIMIT;\n         OPTION_INFO(1) = OPTION_INFO(1)  ||\n                          'MMSG='  ||  MMSG_FORMATTED  || ' ';\n         END;\n    ELSE\n         OPTION_INFO(2) = OPTION_INFO(2)  ||  'NOUSERTOT ';\n    IF INDEX_FLAG THEN\n         OPTION_INFO(1) = OPTION_INFO(1)  ||  'USERINDEX ';\n    ELSE\n         OPTION_INFO(2) = OPTION_INFO(2)  ||  'NOUSERINDEX ';\n    IF SELECT_FLAG THEN\n         OPTION_INFO(1) = OPTION_INFO(1)  ||  'SELECT ';\n    IF ANALYZE_FLAG THEN\n         OPTION_INFO(1) = OPTION_INFO(1)  ||  'ANALYSIS ';\n    ELSE\n         OPTION_INFO(2) = OPTION_INFO(2)  ||  'NOANALYSIS ';\n    IF DUMP_FLAG THEN\n         OPTION_INFO(1) = OPTION_INFO(1)  ||  'DUMP ';\n    ELSE\n         OPTION_INFO(2) = OPTION_INFO(2)  ||  'NODUMP ';\n    IF UNCHAIN_FLAG THEN\n         OPTION_INFO(1) = OPTION_INFO(1)  ||  'UNCHAIN ';\n    IF CHAIN_FLAG THEN\n         OPTION_INFO(1) = OPTION_INFO(1)  ||  'CHAINS ';\n    ELSE\n         OPTION_INFO(2) = OPTION_INFO(2)  ||  'NOCHAINS ';\n    OPT_AREA = 'OPTIONS IN EFFECT: ' || OPTION_INFO(1);\n    CALL WRITER;\n    OPT_AREA = (19)' '  ||  OPTION_INFO(2);\n    CALL WRITER;\n0   IF SELECT_FLAG THEN\n         OPEN FILE(SYSIN);\n0   IF SELECT_FLAG THEN\n         GET EDIT(SELECT_AREA) (A(80));\n    IF SELECT_FLAG THEN DO;\n        OPT_AREA = 'USERS TO BE SELECTED:  ' ||\n                   SELECT_AREA;\n        LINES_TO_SKIP = 2;\n        CALL WRITER;\n        END;\n0   IF DUMP_FLAG | ANALYZE_FLAG | CHAIN_FLAG THEN DO;\n         ALLOCATE CHECK_TABLE;\n         CTBL_FLAG = '1'B;\n         DO I = 0 TO HBOUND(CHECK_FWD,1);         /* CLEAR THE TABLE  */\n              CHECK_TYPE(I) = '9';\n              CHECK_FWD(I), CHECK_BWD(I) = 0;\n              END;\n         END;\n    IF INDEX_FLAG THEN\n         ALLOCATE USER_TABLE;\n    IF CHAIN_FLAG THEN\n         ALLOCATE MSGDIR_TABLE;\n0   KEYFLD = 0;                     /* SET KEY TO THE FIRST RECORD    */\n    READ FILE (BRODCST) INTO (BCREC1) KEY (KEYFLD);\n    IF R1DSN \u00ac= ' SYS1.BRODCAST DATA SET ' THEN DO;\n         LINES_TO_SKIP = 3;\n         OPT_AREA = 'WARNING - DDNAME \"BRODCST\" IS NOT SYS1.BRODCAST.';\n         CALL WRITER;\n         OPT_AREA = '          PROGRAM WILL ATTEMPT TO DUMP DATASET.';\n         CALL WRITER;\n         DUMP_FLAG = '1'B;\n         USERMSG_FLAG, TOTALS_FLAG, INDEX_FLAG, ANALYZE_FLAG,\n              CHAIN_FLAG, UNCHAIN_FLAG = '0'B;\n         END;\n    IF CTBL_FLAG THEN\n         CHECK_TYPE(0) = '4';      /* '4' SHOWS FIRST RECORD         */\n    KEYFLD = BRDCNV(R1USPTR);       /* SET KEY TO 1ST MAIL DIR ENTRY  */\n    IF \u00ac USERMSG_FLAG THEN          /* CLEAR 2ND HEADER IF NO USER    */\n         PAGE_HEADER2(1) = ' ';     /*   MESSAGES ARE TO BE PRINTED.  */\n0   END INIT;\n1/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n /*    READRAND: PROCESS THE USER MAIL, FOLLOWING THE CHAINS.         */\n /*    PRINT THE 'USERMSG' AND/OR 'USERTOTALS' REPORT, IF REQUESTED.  */\n /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n0READRAND:    PROC;\n    IF TOTALS_FLAG THEN\n         SIGNAL ENDPAGE(OUTPUT);\n    DO WHILE (KEYFLD \u00ac= 0);\n         READ FILE (BRODCST) INTO (USDIR) KEY (KEYFLD);\n         IF CTBL_FLAG THEN\n              CHECK_TYPE(KEYFLD) = '1'; /* '1' = MAIL DIRECTORY ENTRY */\n         HOLDKEY = KEYFLD;              /* SAVE FOR LATER             */\n0        IF CHAIN_FLAG THEN DO;\n              DIR_COUNT = DIR_COUNT + 1;\n              MSGDIR_RBA(DIR_COUNT) = KEYFLD;\n              END;\n0        DO INDX = 1 TO 9;\n /*      (THERE ARE 9 USER POINTERS IN EACH DIRECTORY ENTRY.)        */\n              KEYFLD = BRDCNV(USDRBA(INDX)); /* KEY -> 1ST MAIL RCD */\n              IF CHAIN_FLAG THEN DO;\n                   MSGDIR_USERID(DIR_COUNT,INDX) = '*NU*';\n                   MSGDIR_USER_RBA(DIR_COUNT,INDX) = KEYFLD;\n                   END;\n              IF UNSPEC(SUBSTR(USDID(INDX),1,1)) \u00ac= HEX00 THEN DO;\n /*           (IF THE USER ID = 0 THEN IT IS AN UNUSED ENTRY.)        */\n                   IF CHAIN_FLAG THEN\n                        MSGDIR_USERID(DIR_COUNT,INDX) = USDID(INDX);\n                   IF KEYFLD \u00ac= 0 THEN DO;\n /*           (IF THE POINTER = 0 THEN THERE IS NO MAIL FOR THE USER) */\n                        IF SELECT_FLAG THEN DO;\n                             SELECTED = '0'B;\n                             DO I = 1 TO 9 WHILE(SEL_USER(I) \u00ac= ' ');\n                                  IF USDID(INDX) = SEL_USER(I) THEN\n                                       SELECTED = '1'B;\n                                  END;\n                             END;\n                        IF INDEX_FLAG & SELECTED THEN DO;\n                             USER_COUNT = USER_COUNT + 1;\n                             USER_ID(USER_COUNT) = USDID(INDX);\n                             USER_PTR(USER_COUNT) = KEYFLD;\n                             END;\n                        IF CTBL_FLAG THEN\n                             CHECK_BWD(KEYFLD) = HOLDKEY;\n0                       IF USERMSG_FLAG & SELECTED THEN DO;\n                             LINES_TO_SKIP = 2;\n                             OPTD_TEXT = 'MESSAGES FOR USER ' ||\n                                         USDID(INDX);\n                             CALL WRITER;\n                             IF INDEX_FLAG THEN\n                                  USER_PAGE(USER_COUNT) = PAGE_NUMBER;\n                             END;\n                        SAVE_USERID = USDID(INDX);\n                        END;\n                   DO WHILE ((KEYFLD \u00ac= 0) & TOTALS_FLAG);\n                        READ FILE (BRODCST) INTO (USMSG) KEY (KEYFLD);\n                        IF USERMSG_FLAG & SELECTED THEN DO;\n                             OPTD_RNUM = KEYFLD;\n                             OPTD_TEXT = USMTEXT;\n                             CALL WRITER;\n                             END;\n                        COUNT_FIELD = COUNT_FIELD + 1; /* COUNT MSGS  */\n                        HOLDKEY = KEYFLD;\n                        KEYFLD = BRDCNV(USMPTR);\n                        END;\n                   IF (COUNT_FIELD \u00ac= 0) & TOTALS_FLAG & SELECTED\n                      THEN DO;\n                        COUNT_FIELD_FORMATED = COUNT_FIELD;\n                        OPTD_TEXT = 'USER ' || SAVE_USERID ||\n                                    ' - ' || COUNT_FIELD_FORMATED ||\n                                    ' MESSAGE(S)';\n                        IF COUNT_FIELD > MSG_LIMIT THEN\n                             SUBSTR(OPT_AREA,1,3) = '*->';\n                        IF LINENO(OUTPUT) > (LINES_PER_PAGE - 4) THEN\n                             SIGNAL ENDPAGE(OUTPUT);\n                        CALL WRITER;\n                        IF INDEX_FLAG & (\u00ac USERMSG_FLAG) THEN\n                             USER_PAGE(USER_COUNT) = PAGE_NUMBER;\n                        COUNT_FIELD = 0;\n                        END;\n                   END;\n              END;\n         KEYFLD = BRDCNV(USDNEXT);\n         END;\n0   CLOSE FILE(BRODCST);\n1/*    PRINT AN INDEX (IF REQUESTED).                                 */\n0   IF INDEX_FLAG THEN DO;\n         SORT_ENTRY_NUMBER = USER_COUNT;\n         CALL ATJ07S (USER_TABLE, SORT_ENTRY_LENGTH, SORT_ENTRY_NUMBER,\n               SORT_KEY_LOC, SORT_KEY_LENGTH, SORT_SEQUENCE);\n         PAGE_HEADER2(1) = (20)' ' || 'INDEX OF USERIDS ' ||\n                           '   (USERID ... PAGE#)';\n         LINES_IN_INDEX = LINES_PER_PAGE - 8;  /* ALLOW FOR HEADINGS  */\n         DO I = 0 TO USER_COUNT BY (LINES_IN_INDEX * 7);\n              SIGNAL ENDPAGE(OUTPUT);\n              DO J = 1 TO LINES_IN_INDEX\n                 WHILE((I + J) \u00ac> USER_COUNT);\n                   DO K = 1 TO 7;\n                        K1 = ((K - 1) * LINES_IN_INDEX) + I + J;\n                        IF K1 \u00ac> USER_COUNT THEN DO;\n                             OPTI_ID(K) = USER_ID(K1);\n                             OPTI_SEP(K) = '...';\n                             OPTI_PAGE(K) = USER_PAGE(K1);\n                             END;\n                        END;\n                   CALL WRITER;\n                   END;\n              END;\n         PUT FILE(OUTPUT) SKIP(3) DATA(USER_COUNT);\n         END;\n0   END READRAND;\n1/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n /*    READSEQ: PROCESS THE FILE SEQUENTIALLY FOR 'ANALYSIS' AND/OR   */\n /*    'DUMP' AND/OR 'CHAIN'; PRINT THE 'DUMP', IF REQUESTED.         */\n /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n0READSEQ:     PROC;\n0   IF DUMP_FLAG THEN DO;\n         BC1POINT, USDPOINT, USMPOINT = ADDR(SEQ_BODY);\n         RPT_NUMBER = 3;\n         SIGNAL ENDPAGE(OUTPUT);\n         END;\n0   CALL BRDREAD(SEQ_RECORD_130);       /* READ THE FIRST RECORD      */\n    COUNT_FIELD = 0;\n0   DO WHILE (SEQ_KEY \u00ac= HEX88);\n         IF ANALYZE_FLAG | CHAIN_FLAG THEN DO;\n              IF SEQ_KEY = HEXFF THEN\n                 CHECK_TYPE(COUNT_FIELD) = '5';    /* '5' DLTD ENTRY  */\n              ELSE IF SEQ_KEY = HEX03 THEN\n                   CHECK_TYPE(COUNT_FIELD) = '3';  /* '3' MAIL RCD    */\n              ELSE IF SEQ_KEY = HEX00 THEN\n                   CHECK_TYPE(COUNT_FIELD) = '0';  /* '0' BRCST DIR.  */\n              ELSE IF SEQ_KEY = HEX02 & CHECK_TYPE(COUNT_FIELD) = '9'\n                   THEN\n                   CHECK_TYPE(COUNT_FIELD) = '2';   /* '2' BRCST MSG  */\n0             /* RECORD FORWARD AND BACKWARD POINTERS                 */\n              IF SEQ_KEY \u00ac= HEX04 THEN DO;\n                   I, CHECK_FWD(COUNT_FIELD) = BRDCNV(BCDPTR);\n                   IF SEQ_KEY \u00ac= HEXFF THEN\n                        CHECK_BWD(I) = COUNT_FIELD;\n                   END;\n              END;\n0        IF DUMP_FLAG THEN\n              CALL PRTDUMP;\n         CALL BRDREAD(SEQ_RECORD_130);  /* READ A RECORD SEQUENTIALLY */\n         COUNT_FIELD = COUNT_FIELD + 1;\n         END;\n    LAST_MAIL = COUNT_FIELD - 1;\n0   END READSEQ;\n1/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n /*    PRTDUMP: PRINT THE BRODCAST DUMP.                              */\n /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n0   PRTDUMP:  PROC;\n0/*   PRINT BRODCAST MESSAGE DIRECTORY RECORD                         */\n0   IF SEQ_KEY = HEX00 THEN DO;\n         OPT0_RTYPE = '0';\n         OPT0_RNUM = COUNT_FIELD;\n         OPT0_RCD_CHN = BRDCNV(BCDPTR);\n         DO INDX = 1 TO 9;\n              TEMPHOLD, OPT0_BCCHN(INDX) = BRDCNV(BCRBA(INDX));\n              IF SUBSTR(UNSPEC(BCDMSGNO(INDX)),1,1) = '1'B THEN DO;\n                   CHECK_TYPE(TEMPHOLD) = 'X';\n                   UNSPEC(BCDMSGNO(INDX)) =\n                        UNSPEC(BCDMSGNO(INDX)) & '0111111111111111'B;\n                   END;\n              OPT0_MSGNO(INDX) = BRDCNV(BCDMSGNO(INDX));\n              END;\n         LINES_TO_SKIP = 2;\n         CALL WRITER;\n         DO INDX = 10 TO 18;\n              TEMPHOLD, OPT0_BCCHN(INDX-9) = BRDCNV(BCRBA(INDX));\n              IF SUBSTR(UNSPEC(BCDMSGNO(INDX)),1,1) = '1'B THEN DO;\n                   CHECK_TYPE(TEMPHOLD) = 'X';\n                   UNSPEC(BCDMSGNO(INDX)) =\n                        UNSPEC(BCDMSGNO(INDX)) & '0111111111111111'B;\n                   END;\n              OPT0_MSGNO(INDX-9) = BRDCNV(BCDMSGNO(INDX));\n              END;\n         CALL WRITER;\n         DO INDX = 19 TO 25;\n              TEMPHOLD, OPT0_BCCHN(INDX-18) = BRDCNV(BCRBA(INDX));\n              IF SUBSTR(UNSPEC(BCDMSGNO(INDX)),1,1) = '1'B THEN DO;\n                   CHECK_TYPE(TEMPHOLD) = 'X';\n                   UNSPEC(BCDMSGNO(INDX)) =\n                        UNSPEC(BCDMSGNO(INDX)) & '0111111111111111'B;\n                   END;\n              OPT0_MSGNO(INDX-18) = BRDCNV(BCDMSGNO(INDX));\n              END;\n         CALL WRITER;\n         LINES_TO_SKIP = 2;\n         END;\n1/*   PRINT MAIL DIRECTORY RECORD                                     */\n0   ELSE IF SEQ_KEY = HEX01 THEN DO;       /* MAIL DIRECTORY RECORD   */\n         IF (LINES_PER_PAGE - LINENO(OUTPUT)) < 4 THEN\n              SIGNAL ENDPAGE(OUTPUT);\n         OPT1_RTYPE = '1';\n         OPT1_RNUM = COUNT_FIELD;\n         OPT1_RCD_CHN = BRDCNV(USDNEXT);\n         DO INDX = 1 TO 5;\n              IF UNSPEC(SUBSTR(USDID(INDX),1,1)) = HEX00 THEN\n                   OPT1_USER(INDX) = '*NU*';\n              ELSE\n                   OPT1_USER(INDX) = TRANSLATE(USDID(INDX),' ','.');\n              OPT1_USCHN(INDX) = BRDCNV(USDRBA(INDX));\n              OPT1_USEND(INDX) = BRDCNV(USDEND(INDX));\n              OPT1_SLASH(INDX) = '/';\n              END;\n         LINES_TO_SKIP = 2;\n         CALL WRITER;\n         DO INDX = 6 TO 9;\n              IF UNSPEC(SUBSTR(USDID(INDX),1,1)) = HEX00 THEN\n                   OPT1_USER(INDX-5) = '*NU*';\n              ELSE\n                   OPT1_USER(INDX-5) = TRANSLATE(USDID(INDX),' ','.');\n              OPT1_USCHN(INDX-5) = BRDCNV(USDRBA(INDX));\n              OPT1_USEND(INDX-5) = BRDCNV(USDEND(INDX));\n              OPT1_SLASH(INDX-5) = '/';\n              END;\n         CALL WRITER;\n         LINES_TO_SKIP = 2;\n         END;\n-/*   PRINT BRODCAST MESSAGE RECORD                                   */\n0   ELSE IF SEQ_KEY = HEX02 THEN DO;\n         IF CHECK_TYPE(COUNT_FIELD) = 'X' THEN DO;\n              OPT2_FLAG = '*NU*';\n              CHECK_TYPE(COUNT_FIELD) = '2';\n              END;\n         OPT2_RTYPE = '2';\n         OPT2_RNUM = COUNT_FIELD;\n         OPT2_TEXT = USMTEXT;\n         CALL WRITER;\n         END;\n1/*   PRINT MAIL MESSAGE RECORD                                       */\n0   ELSE IF SEQ_KEY = HEX03 THEN DO;\n         OPT3_RTYPE = '3';\n         OPT3_RNUM = COUNT_FIELD;\n         OPT3_MESSAGE = USMTEXT;\n         OPT3_RCD_CHN = BRDCNV(USMPTR);\n         CALL WRITER;\n         END;\n-/*   PRINT DATASET HEADER RECORD                                     */\n0   ELSE IF SEQ_KEY = HEX04 THEN DO;\n         OPT4_RTYPE = '4';\n         OPT4_RNUM = COUNT_FIELD;\n         OPT4_BC_CONSTANT = 'B->';\n         OPT4_BCRBA = BRDCNV(R1BCPTR);\n         OPT4_US_CONSTANT = 'U->';\n         OPT4_USDRBA = BRDCNV(R1USPTR);\n         OPT4_NUM_CONSTANT = '#RCDS';\n         OPT4_RECNUM = BRDCNV(R1RECNUM);\n         OPT4_MAX_CONSTANT = 'MAX.BC';\n         OPT4_BCMAX = BRDCNV(R1BCMAX);\n         OPT4_HDR_CONSTANT = R1DSN;\n         CALL WRITER;\n         END;\n- /*   PRINT UNUSED RECORD                                           */\n0   ELSE IF SEQ_KEY = HEXFF THEN DO;\n         OPT9_RNUM = COUNT_FIELD;\n         OPT9_FLAG = '*NU*';\n         OPT9_MESSAGE = USMTEXT;\n         CALL WRITER;\n         END;\n- /*   PRINT UNKNOWN RECORD TYPE                        */\n0   ELSE DO;\n         OPT9_RNUM = COUNT_FIELD;\n         OPT9_MESSAGE = '** UNKNOWN RECORD TYPE - RECORD FOLLOWS **';\n         LINES_TO_SKIP = 2;\n         CALL WRITER;\n         OPT_AREA = SEQ_BODY;\n         CALL WRITER;\n         LINES_TO_SKIP = 2;\n         END;\n0   END PRTDUMP;\n1/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n /*    PRTANAL: PRINT THE BRODCAST 'ANALYSIS' REPORT.                 */\n /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n0PRTANAL:     PROC;\n /* DO I = 1 TO LAST_MAIL + 1;\n         PUT SKIP FILE(OUTPUT) DATA(CHECK_TABLE(I));\n         END;  */\n    INDX_HOLD, HOLD_TYPE = CHECK_TYPE(0);\n    COUNT_FIELD = 0;                /* COUNT FIELD IS USED HERE TO\n                                       HOLD STARTING RECORD OF SERIES.*/\n    RPT_NUMBER = 2;\n    SIGNAL ENDPAGE(OUTPUT);\n    DO INDX = 0 TO (LAST_MAIL + 1);\n         IF CHECK_BWD(INDX) = 0 & CHECK_TYPE(INDX) = '3' THEN\n              CHECK_TYPE(INDX) = '6';  /* '6' SHOWS UNCHAINED RECORD */\n0        IF CHECK_TYPE(INDX) \u00ac= HOLD_TYPE THEN DO;\n              OPTA_DESCRIPTION = DESCRIPTIONS(INDX_HOLD);\n              OPTA_FIRST = COUNT_FIELD;\n              IF COUNT_FIELD \u00ac= (INDX-1) THEN DO;  /* IF > 1 RECORD   */\n                   OPTA_THRU = '-';\n                   OPTA_LAST = INDX-1;\n                   END;\n              CALL WRITER;\n              OPT_AREA = ' ';\n              INDX_HOLD, HOLD_TYPE = CHECK_TYPE(INDX);\n              COUNT_FIELD = INDX;\n              END;\n         IF INDX_HOLD \u00ac> 6 THEN\n              TYPE_COUNT(INDX_HOLD) = TYPE_COUNT(INDX_HOLD) + 1;\n         END;\n    LINES_TO_SKIP = 3;             /* TRIPLE SPACE                    */\n    OPTA_DESCRIPTION = 'TOTAL NUMBER OF EACH RECORD TYPE:';\n    CALL WRITER;\n    LINES_TO_SKIP = 2;             /*  DOUBLE SPACE                   */\n         IF (LINES_PER_PAGE - LINENO(OUTPUT)) < 10 THEN\n              SIGNAL ENDPAGE(OUTPUT);\n    DO INDX = 0 TO 6;\n         OPTA_LAST = TYPE_COUNT(INDX);\n         OPTA_DESCRIPTION = DESCRIPTIONS(INDX);\n         CALL WRITER;\n         END;\n0   END PRTANAL;\n1/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n /*    PRTCHAIN: CREATE THE USER MESSAGE CHAIN REPORT                 */\n /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n0PRTCHAIN:    PROC;\n    RPT_NUMBER = 4;\n    IF \u00ac UNCHAIN_FLAG THEN DO INDX = 1 TO DIR_COUNT;\n         SIGNAL ENDPAGE(OUTPUT);\n         OPTC_DIR_RBA = MSGDIR_RBA(INDX);\n         OPTC_DIR_DASH = '----';\n         DOWN_CHARACTER = '|';\n         DO IDIR = 1 TO 9;\n              TEMPHOLD = MSGDIR_USER_RBA(INDX,IDIR);\n              STRING(OPTC_USER_STUFF) = '(USER ' ||\n                                        MSGDIR_USERID(INDX,IDIR) ||\n                                        ')';\n              OPTC_DOWN_LINE = '|';\n              CALL MAILTOP;\n              CALL WRITER;\n              OPTC_USER_DASH = '---';\n              IF IDIR = 9 THEN\n                   DOWN_CHARACTER = ' ';\n              CALL TRCHAIN;    /* PRINT OUT THE CHAINS              */\n              IF IDIR \u00ac= 9 THEN DO;\n                   OPTC_DOWN_LINE = '|';\n                   CALL MAILTOP;\n                   CALL WRITER;\n                   END;\n              END;\n         END;\n0/*  PROCESS UNCHAINED MAIL RECORDS.                                  */\n    UNCHAINED_SECTION = '1'B;\n    DOWN_CHARACTER = ' ';\n    PAGE_HEADER2(4) = (11)' ' || 'UNCHAINED MAIL RECORDS:';\n    SIGNAL ENDPAGE(OUTPUT);\n    INDX = 1;\n    DO WHILE (INDX < LAST_MAIL);\n         IF ((CHECK_TYPE(INDX) = '6' |\n              CHECK_TYPE(INDX) = '3') &\n             (CHECK_BWD(INDX) = 0)) THEN DO;\n              LINES_TO_SKIP = 2;\n              TEMPHOLD = INDX;\n              CALL TRCHAIN;\n              END;\n         INDX = INDX + 1;\n         END;\n1/*    PRINT THE CHAINS SUBROUTINE                                    */\n0TRCHAIN:     PROC;\n0   DCL  IPRT                FIXED BIN(15);\n0   DO UNTIL(TEMPHOLD = 0);\n         DO IPRT = 1 TO 23 WHILE(TEMPHOLD \u00ac= 0);\n              OPTC_RBA_DASH(IPRT) = '-';\n              OPTC_RBA(IPRT) = TEMPHOLD;\n              TEMPHOLD = CHECK_FWD(TEMPHOLD);  /* GET NEXT MAIL RBA   */\n              END;\n         OPTC_END_CHAR(IPRT) = '|';\n         IF OPTC_USER_DASH = '---' THEN\n              OPTC_DOWN_LINE = '|';\n         ELSE\n              OPTC_DOWN_LINE = DOWN_CHARACTER;\n         CALL MAILTOP;\n         CALL WRITER;\n         IF TEMPHOLD \u00ac= 0 THEN DO;\n              OPT_AREA = DASH_LINE;\n              OPTC_DOWN_LINE = DOWN_CHARACTER;\n              CALL MAILTOP;\n              CALL WRITER;\n              OPTC_USER_DASH = ' |-';\n              END;\n         END;\n0   END TRCHAIN;\n1/*    \"MAIL TOP\" SUBROUTINE                                          */\n0MAILTOP:     PROC;\n0   DCL  ILINE               FIXED BIN(15);\n0   IF LINENO(OUTPUT) > 8 THEN\n         RETURN;\n    IF UNCHAINED_SECTION THEN\n         RETURN;\n    ILINE = LINENO(OUTPUT);\n    IF INDX = DIR_COUNT THEN DO;\n         SELECT (ILINE);\n              WHEN (4)  OPTC_MAILTOP = '  |';\n              WHEN (5)  OPTC_MAILTOP = '  |';\n              WHEN (6)  OPTC_MAILTOP = ' END ';\n              OTHERWISE;\n              END;\n         END;\n    ELSE DO;\n         SELECT (ILINE);\n              WHEN (4)  OPTC_MAILTOP = '  |';\n              WHEN (5)  OPTC_MAILTOP = '  |';\n              WHEN (6)  OPTC_MAILTOP = ' NEXT';\n              WHEN (7)  OPTC_MAILTOP = ' PAGE';\n              WHEN (8)  DO;\n                   OPTC_MAILTOP = '(    )';\n                   OPTC_DIR_RBA = MSGDIR_RBA(INDX+1);\n                   END;\n              OTHERWISE;\n              END;\n         END;\n0   END MAILTOP;\n0   END PRTCHAIN;\n-END BROD;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BRDCNV": {"ttr": 778, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " /*  BRDCNV   -  SUBROUTINE TO CONVERT 'CHAR VAR' TO 'FIXED BIN(31)'  */\n0/*  THIS ROUTINE IS USED BY THE 'BROD' PROGRAMS TO CONVERT A 2 OR 3\n     RELATIVE BLOCK ADDRESS TO A FULLWORD.                            */\n0BRDCNV: PROC(FIELDIN) RETURNS(FIXED BINARY(31));\n    DCL  1  FIELD1  BASED(POINTR),\n            2  POS1     CHAR(1),\n            2  POS2_4   CHAR(3);\n    DCL  1  FIELD2  BASED(POINTR),\n            2  POS1_2   CHAR(2),\n            2  POS3_4   CHAR(2);\n    DCL  1  FIELD3  BASED(POINTR),\n            2  POS1_3   CHAR(3),\n            2  POS4     CHAR(1);\n    DCL  FIELD4  BASED(POINTR) CHAR(4);\n    DCL  BIN_FIELD  FIXED BIN(31);\n    DCL  POINTR     PTR;\n    POINTR = ADDR(BIN_FIELD);\n    DCL  FIELDIN CHAR(4) VARYING;\n    L = LENGTH(FIELDIN);\n    IF L = 1 THEN DO;\n         POS4     = FIELDIN;\n         UNSPEC(POS1_3) = (24)'0'B;\n         END;\n    ELSE IF L = 2 THEN DO;\n         POS3_4   = FIELDIN;\n         UNSPEC(POS1_2) = (16)'0'B;\n         END;\n    ELSE IF L = 3 THEN DO;\n         POS2_4   = FIELDIN;\n         UNSPEC(POS1) = (8)'0'B;\n         END;\n    ELSE\n         FIELD4 = FIELDIN;\n    RETURN(BIN_FIELD);\n END BRDCNV;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BRDREAD": {"ttr": 1025, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "BRDREAD  CSECT\n         STM   R14,R12,12(R13)     SAVE CALLERS REGISTERS\n         LR    R12,R15             PICK UP ENTRY POINT\n         USING BRDREAD,R12         ESTABLISH ADDRESSABILITY\n         LA    R10,SAVEAREA\n         ST    R13,4(R10)\n         ST    R10,8(R13)\n         LR    R13,R10\n         USING SAVEAREA,R13\n         LR    R11,R1              SAVE PARAMETER POINTER\n         PRINT NOGEN\nFIRSTSW  NOP   READ                FIRST TIME OPEN SWITCH\n         OI    *-3,X'F0'           SET NO-OP TO BRANCH\n         OPEN  (BRODFILE)\nREAD     DS    0H\n         L     R11,0(R11)          R11 -> A(RECORD AREA)\n         L     R11,0(R11)          R11 -> RECORD AREA\n         READ  BRODDECB,SF,BRODFILE,(R11),'S'\n         CHECK BRODDECB            WAIT UNTIL READ IS FINISHED\n         B     RETURN\nEOFILE   DS    0H\n         CLOSE (BRODFILE)\n         MVI   0(R11),X'88'        SIGNAL END OF FILE\n         NI    FIRSTSW+1,X'0F'     SET FIRST TIME SWITCH TO NO-OP\n         PRINT GEN\nRETURN   DS    0H\n         L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\n         SPACE 1\n         PRINT NOGEN\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nSAVEAREA DS    18F\nBRODFILE DCB   BLKSIZE=129,DDNAME=BRODCST,EODAD=EOFILE,                *\n               MACRF=(R),RECFM=F,KEYLEN=1,DSORG=PS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RUNJCL": {"ttr": 1027, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//BRDANL   JOB ,VANDERWALL\n//BRDLIST  EXEC PGM=BRDANL01,PARM='/ANAL,USERT'\n//*        GET ANALYSIS AND USERTOTALS\n//OUTPUT   DD SYSOUT=*                    * NORMAL OUTPUT *\n//SYSPRINT DD SYSOUT=*                    * FOR DEBUGGING *\n//BRODCST  DD DSN=SYS1.BRODCAST,DISP=SHR\n//*SYSIN   DD ...\n//*  IS ONLY USED TO SELECT SPECIFIC USERIDS.\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT141/FILE141.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT141", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}