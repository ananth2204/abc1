*          DATA SET FG16000302 AT LEVEL 017 AS OF 12/12/03
LINKDATE TITLE 'LINK EDITOR INTERFACE - DATE/TIME STAMP LOAD MODULES'   00001
         PRINT OFF                                                      00002
*          DATA SET ENTER      AT LEVEL 000 AS OF 12/12/03
         MACRO                                                          00001
&NAME    ENTER &R,&FPR,&SAVE=,&BASE=,&SPIE=YES,&ID=YES,&BASE2=0         00002
         LCLA  &SIZE,&SIZE1,&SIZE2                                      00003
         LCLC  &BASE1,&BR(06),&HOLD,&SPIE1                              00004
.*                                                                      00005
.*       AUTHOR - GARY R. KOENIG                                        00006
.*                                                                      00007
.*       DATE - SEPTEMBER 25, 1969                                      00008
.*                                                                      00009
.*       FUNCTION - THE ENTER MACRO IS USED IN ASSEMBLER ROUTINES TO    00010
.*         SAVE CODING THE REGISTER EQUATES, THE SAVING OF REGISTERS,   00011
.*         ESTABLISHING A BASE REGISTER, ESTABLISHING A NEW SAVE AREA   00012
.*         AND CROSS-LINKING WITH THE OLD SAVE AREA.  A STATIC OR A     00013
.*         DYNAMIC SAVE AREA CAN BE GENERATED BY THE MACRO OR THE AD-   00014
.*         DRESS OF A SAVE AREA OUTSIDE THE MACRO CAN BE USED.  THE     00015
.*         ENTER MACRO ALSO INSERTS THE PROGRAM IDENTIFICATION FOR THE  00016
.*         ABEND/DUMP ROUTINE.  THE SPIE MACRO IS ALSO ISSUED TO ALLOW  00017
.*         ASSEMBLER SUBROUTINES TO BE LINKED WITH COMPILER LEVEL       00018
.*         LANGUAGES.                                                   00019
.*                                                                      00020
.*       CODING - ENTER IS CODED INTO THE ASSEMBLER PROGRAM ACCORDING   00021
.*         TO THE RULES OF MACRO INSERTION.  IT HAS TWO POSITIONAL      00022
.*         PARAMETERS AND FOUR KEYWORD PARAMETERS AS FOLLOWS:           00023
.*         1)  THE FIRST POSITIONAL PARAMETER (P/P) IS AN ALPHA-NUMERIC 00024
.*           VARIABLE (1 TO 6 CHARACTERS LONG) USED FOR GENERAL-PURPOSE 00025
.*           REGISTER EQUATES.  IF THIS PARAMETER IS OMITTED NO EQUATES 00026
.*           ARE MADE.                                                  00027
.*         2)  THE SECOND P/P IS THE SAME AS THE FIRST AND IS USED FOR  00028
.*           FLOATING-POINT REGISTER EQUATES.                           00029
.*         3)  THE &SAVE KEYWORD PARAMETER (K/P) CAN BE CODED &SAVE=XXX 00030
.*           IN WHICH CASE THE ENTER MACRO WILL USE THE LOCATION AD-    00031
.*           DRESSED BY XXX TO STORE THE REGISTERS.  IF &SAVE=RENT IS   00032
.*           CODED, A DYNAMIC AREA WILL BE GENERATED USING A GETMAIN    00033
.*           MACRO INSTRUCTION.  IF &SAVE IS OMITTED OR IS NULL, AN IN- 00034
.*           TERNAL STATIC SAVE AREA WILL BE GENERATED WITH NO LABEL.   00035
.*         4)  THE &BASE K/P IS USED TO DEFINE WHICH REGISTER IS TO BE  00036
.*           USED FOR A BASE REGISTER.  IF &BASE IS NOT CODED AND A     00037
.*           STATIC SAVE AREA WAS GENERATED BY THE PROGRAM, REGISTER 13 00038
.*           WILL BE USED FOR BOTH THE ADDRESS OF THE SAVE AREA AND THE 00039
.*           BASE REGISTER.  IF &BASE IS NOT CODED AND A STATIC SAVE    00040
.*           AREA WAS NOT GENERATED BY THE MACRO, REGISTER 12 WILL BE   00041
.*           USED AS THE BASE REGISTER.  IF &BASE=15 IS CODED, REGISTER 00042
.*           15 WILL BE USED AS A BASE REGISTER, THE REGISTERS WILL BE  00043
.*           STORED BUT NO NEW SAVE AREA WILL BE GENERATED NOR THE      00044
.*           CROSS-LINKING OF THE SAVE AREAS UNLESS &SAVE=XXX IS EXPLI- 00045
.*           CITLY CODED.  IF &BASE=14 IS CODED THIS WOULD CAUSE ERRORS 00046
.*           SO REGISTER 12 OR 13 WILL BE USED ACCORDING TO THE &SAVE   00047
.*           K/P.                                                       00048
.*         5)  THE &SPIE K/P IS USED TO CONTROL GENERATION OF THE SPIE  00049
.*           MACRO.  IF &SPIE=NO IS CODED, NO SPIE MACRO WILL BE GENER- 00050
.*           ATED.  IF &SPIE=YES IS CODED OR &SPIE IS OMITTED, THE SPIE 00051
.*           MACRO WILL BE GENERATED FOR SYSTEM ACTION ON ALL INTER-    00052
.*           RUPTS.  IF AN INTERRUPTION EXIT ADDRESS IS DESIRED ALONG   00053
.*           WITH DESIGNATED INTERRUPTION TYPES, THEY SHOULD BE CODED   00054
.*           ACCORDING TO THE RULES OF THE SPIE MACRO BUT INSERTED IN   00055
.*           AN EXTRA SET OF PARENTHESES.                               00056
.*           EX:  &SPIE=(SPIEXIT,((7,9),15))                            00057
.*         6)  THE &ID K/P IS USED TO CONTROL GENERATION OF THE PROGRAM 00058
.*           IDENTIFICATION FOR ABEND/DUMP ROUTINE AT OFFSET +4 FROM    00059
.*           THE BEGINNING OF THE CSECT.  IF &ID=NO IS CODED, THE IDEN- 00060
.*           TIFICATION WILL NOT BE GENERATED.  IF &ID=YES IS CODED OR  00061
.*           &ID IS OMITTED, THE IDENTIFICATION WILL BE GENERATED.      00062
&BASE1   SETC  '&BASE'                                                  00063
&HOLD    SETC  '&R'.'2'                                                 00064
&SPIE1   SETC  '&SPIE'                                                  00065
         AIF   ('&BASE' NE '15' AND '&BASE' NE '1').C0                  00066
&SPIE1   SETC  'NO'                                                     00067
         AGO   .C2                                                      00068
.C0      AIF   ('&BASE1' NE '2').C1                                     00069
&HOLD    SETC  '&R'.'3'                                                 00070
         AGO   .C2                                                      00071
.C1      AIF  ('&BASE' NE '14' AND '&BASE' NE '0' AND '&BASE' NE '').C3 00072
&BASE1   SETC  '13'                                                     00073
.C2      AIF   ('&BASE1' NE '13' OR '&SAVE' EQ '').C3                   00074
&BASE1   SETC  '12'                                                     00075
.C3      AIF   ('&R' EQ '').C4                                          00076
         MNOTE *,'GENERAL PURPOSE REGISTER EQUATES'                     00077
         MNOTE *,'     REGISTER &BASE1 IS THE BASE'                     00078
         AIF   ('&BASE2' EQ '0').D3                                     00079
         MNOTE *,'  REGISTER &BASE2 IS THE SECOND BASE'                 00080
.D3      ANOP                                                           00081
&R.0     EQU   0                                                        00082
&R.1     EQU   1                                                        00083
&R.2     EQU   2                                                        00084
&R.3     EQU   3                                                        00085
&R.4     EQU   4                                                        00086
&R.5     EQU   5                                                        00087
&R.6     EQU   6                                                        00088
&R.7     EQU   7                                                        00089
&R.8     EQU   8                                                        00090
&R.9     EQU   9                                                        00091
&R.10    EQU   10                                                       00092
&R.11    EQU   11                                                       00093
&R.12    EQU   12                                                       00094
&R.13    EQU   13                                                       00095
&R.14    EQU   14                                                       00096
&R.15    EQU   15                                                       00097
         SPACE 1                                                        00098
.C4      AIF   ('&FPR' EQ '').C5                                        00099
&FPR.0   EQU   0                  FLOATING POINT REGISTER EQUATES       00100
&FPR.2   EQU   2                                                        00101
&FPR.4   EQU   4                                                        00102
&FPR.6   EQU   6                                                        00103
         SPACE 1                                                        00104
.C5      AIF   ('&BASE1' NE '15' AND '&BASE1' NE '13').C6               00105
         USING *,&R.15                                                  00106
.C6      AIF   ('&ID' EQ 'NO').C11                                      00107
         AIF   ('&NAME' EQ '').C7                                       00108
&BR(1)   SETC  '&NAME'                                                  00109
&BR(2)   SETC  ''                                                       00110
&SIZE    SETA  1                                                        00111
         AGO   .C8                                                      00112
.C7      AIF   ('&SYSECT' EQ '').C9                                     00113
&BR(1)   SETC  '&SYSECT'                                                00114
&BR(2)   SETC  ''                                                       00115
&SIZE    SETA  1                                                        00116
.C8      AIF   ('&BR(1)'(1,&SIZE) EQ '&BR(1)').C10                      00117
&SIZE    SETA  &SIZE+1                                                  00118
         AGO   .C8                                                      00119
.C9      ANOP                                                           00120
&BR(1)   SETC  'PRIVATE '                                               00121
&BR(2)   SETC  'CODE'                                                   00122
&SIZE    SETA  12                                                       00123
.C10     ANOP                                                           00124
&SIZE1   SETA  ((&SIZE+2)/2)*2+4                                        00125
&NAME    B     &SIZE1.(0,&R.15)   BRANCH AROUND IDENTIFIER              00126
         DC    AL1(&SIZE)         LENGTH OF IDENTIFIER                  00127
         DC    CL&SIZE'&BR(1)&BR(2)' IDENTIFIER                         00128
         STM   &R.14,&R.12,12(&R.13)                                    00129
         AGO   .C12                                                     00130
.C11     ANOP                                                           00131
&NAME    STM   &R.14,&R.12,12(&R.13)                                    00132
.C12     AIF   ('&BASE1' EQ '15' OR '&BASE1' EQ '13').C13               00133
         BALR  &R&BASE1,0                                               00134
         AIF   ('&BASE2' NE '0').D12                                    00135
         USING *,&R&BASE1                                               00136
         AGO   .E12                                                     00137
.D12     USING *,&R&BASE1,&R&BASE2                                      00138
.E12     AIF   ('&SAVE' NE 'RENT').C13                                  00139
         LR    &HOLD,&R.1         SAVE PARAMETER ADDRESS REGISTER       00140
         LA    &R.0,72            LOAD LENGTH                           00141
         BAL   &R.1,*+4           INDICATE GETMAIN                      00142
         SVC   10                 ISSUE GETMAIN SVC                     00143
         ST    &R.13,4(&R.1)      CROSS-LINK                            00144
         ST    &R.1,8(&R.13)      THE SAVE AREAS                        00145
         LR    &R.13,&R.1         RELOCATE ADDRESS OF NEW SAVE AREA     00146
         AIF   ('&SPIE1' EQ 'NO').C21                                   00147
         AGO   .C18                                                     00148
.C13     AIF   ('&SAVE' NE '').C14                                      00149
         AIF   ('&BASE1' EQ '15').C22                                   00150
         CNOP  2,4                                                      00151
         LA    &R.14,*+18         LOAD ADDRESS OF NEW SAVE AREA         00152
         AGO   .C15                                                     00153
.C14     LA    &R.14,&SAVE        LOAD ADDRESS OF NEW SAVE AREA         00154
.C15     ST    &R.13,4(&R.14)     CROSS-LINK                            00155
         ST    &R.14,8(&R.13)     THE SAVE AREAS                        00156
         LR    &R.13,&R.14        RELOCATE ADDRESS OF NEW SAVE AREA     00157
         AIF   ('&SAVE' NE '').C17                                      00158
         B     *+4+72             BRANCH AROUND SAVE AREA               00159
         AIF   ('&BASE1' NE '13').C16                                   00160
         AIF   ('&BASE2' NE '0').D15                                    00161
         USING *,&R.13            USE SAVE AREA ADDRESS ALSO AS BASE    00162
         AGO   .E15                                                     00163
.D15     USING *,&R.13,&R&BASE2   USE SAVE AREA ADDRESS ALSO AS BASE    00164
.E15     DROP  &R.15              DROP THE TEMPORARY BASE REGISTER      00165
.C16     DC    18CL4'SAVE'        REGISTER SAVE AREA                    00166
.C17     AIF   ('&SPIE1' EQ 'NO').C22                                   00167
         LR    &HOLD,&R.1         SAVE PARAMETER ADDRESS REGISTER       00168
.C18     ANOP                                                           00169
         CNOP  2,4                                                      00170
.C185    LA    &R.1,*+12          LOAD BRANCH ADDRESS                   00171
         BALR  &R.1,&R.1          BRANCH AROUND PARAMETERS              00172
         DC    A(0)               EXIT ROUTINE ADDRESS                  00173
         DC    AL2(0)             INTERUPTION MASK                      00174
         SVC   14                 ISSUE SPIE SVC                        00175
.C20     ST    &R.1,0(&R.13)      SAVE PREVIOUS PICA                    00176
.C21     LR    &R.1,&HOLD         RESTORE PARAMETER ADDRESS REGISTER    00177
.C22     AIF   ('&BASE2' EQ '0').C23                                    00178
         LA    &R&BASE2,2048(&R&BASE1) LOAD SECOND BASE REGISTER WITH   00179
         LA    &R&BASE2,2048(&R&BASE2) VALUE 4096 BEYOND FIRST BASE REG 00180
.C23     MEND                                                           00181
*          DATA SET RETRN      AT LEVEL 000 AS OF 05/10/79
         MACRO                                                          00001
&NAME    RETRN &R,&FPR,&SAVE=,&BASE=,&SPIE=YES,&ID=YES,&RC=,&SAVEREG=   00002
         LCLC  &BASE1,&HOLD,&SPIE1                                      00003
.*                                                                      00004
.*       AUTHOR - GARY R. KOENIG                                        00005
.*                                                                      00006
.*       DATE - NOVEMBER 1, 1969                                        00007
.*                                                                      00008
.*       FUNCTION - THE RETRN MACRO IS USED IN ASSEMBLER ROUTINES TO    00009
.*         RETURN TO THE CALLING PROGRAM.  RETRN SHOULD BE USED ONLY    00010
.*         AND ALWAYS IF THE ENTER MACRO IS USED.                       00011
.*                                                                      00012
.*       CODING - RETRN IS CODED INTO THE ASSEMBLER PROGRAM ACCORDING   00013
.*         TO THE RULES OF MACRO INSERTION.  ALL PARAMETERS SHOULD BE   00014
.*         CODED EXACTLY THE WAY THEY WERE FOR THE ENTER MACRO.  IN     00015
.*         ADDITION TWO MORE KEYWORD PARAMETERS CAN BE CODED FOR THE    00016
.*         RETRN MACRO.  THESE ARE AS FOLLOWS:                          00017
.*         1)  &RC IS USED TO PASS A RETURN CODE THROUGH REGISTER 15.   00018
.*           IF RC=20 IS CODED, 20 WILL BE THE RETURN CODE PASSED IN    00019
.*           REGISTER 15.  IF REGISTER 15 ALREADY CONTAINS THE RETURN   00020
.*           CODE, CODE RC=(15).                                        00021
.*         2)  &SAVEREG IS USED TO INDICATE THE SUBPROGRAM IS A FUNC-   00022
.*           TION AND A VALUE IS BEING RETURNED IN REGISTER 0.  TO      00023
.*           INDICATE THIS, CODE &SAVEREG=0.                            00024
&BASE1   SETC  '&BASE'                                                  00025
&HOLD    SETC  '&R'.'2'                                                 00026
&SPIE1   SETC  '&SPIE'                                                  00027
         AIF   ('&BASE' NE '15' AND '&BASE' NE '1').C0                  00028
&SPIE1   SETC  'NO'                                                     00029
         AGO   .C2                                                      00030
.C0      AIF   ('&BASE1' NE '2' AND '&SAVEREG' NE '2').C1               00031
&HOLD    SETC  '&R'.'3'                                                 00032
         AGO   .C2                                                      00033
.C1      AIF  ('&BASE' NE '14' AND '&BASE' NE '0' AND '&BASE' NE '').C3 00034
&BASE1   SETC  '13'                                                     00035
.C2      AIF   ('&BASE1' NE '13' OR '&SAVE' EQ '').C3                   00036
&BASE1   SETC  '12'                                                     00037
.C3      AIF   ('&NAME' EQ '').C4                                       00038
&NAME    DS    0H                                                       00039
.C4      AIF   ('&BASE1' EQ '15').C7                                    00040
         AIF   ('&SPIE1' EQ 'NO').C5                                    00041
         L     &R.1,0(&R.13)      RELOAD THE PREVIOUS PICA ADDRESS      00042
         SVC   14                 ISSUE SPIE SVC                        00043
.C5      AIF   ('&ID' EQ 'NO' OR '&SAVE' EQ 'RENT').C6                  00044
         MVI   0(&R.13),X'FF'     FLAG ROUTINE COMPLETE                 00045
.C6      L     &R.13,4(&R.13)     LOAD ADDR OF PREVIOUS SAVE AREA       00046
         AIF   ('&SAVE' EQ 'RENT').C8                                   00047
.C7      AIF   ('&SAVEREG' EQ '0' OR '&SAVEREG' EQ '&R.0').C12          00048
         AGO   .D8                                                      00049
.C8      AIF   ('&SAVEREG' EQ '0' OR '&SAVEREG' EQ '&R.0').C11          00050
         LA    &R.0,72            LOAD LENGTH                           00051
         SVC   10                 ISSUE FREEMAIN SVC                    00052
.D8      AIF   ('&RC' EQ '(15)' OR '&RC' EQ '(&R.15)').C10              00053
         AIF   ('&RC' NE '').C9                                         00054
         LM    &R.14,&R.12,12(&R.13)   RESTORE REGISTERS                00055
         AGO   .END                                                     00056
.C9      LA    &R.15,&RC          LOAD RETURN CODE                      00057
.C10     L     &R.14,12(&R.13)    RESTORE                               00058
         LM    &R.0,&R.12,20(&R.13) REGISTERS                           00059
         AGO   .END                                                     00060
.C11     LR    &HOLD,&R.0         SAVE REG 0                            00061
         LA    &R.0,72            LOAD LENGTH                           00062
         SVC   10                 ISSUE FREEMAIN SVC                    00063
         LR    &R.0,&HOLD         RESTORE REG 0                         00064
.C12     AIF   ('&RC' EQ '(15)' OR '&RC' EQ '(&R.15)').C14              00065
         AIF   ('&RC' NE '').C13                                        00066
         LM    &R.14,&R.15,12(&R.13)   RESTORE                          00067
         LM    &R.1,&R.12,24(&R.13)      REGISTERS                      00068
         AGO   .END                                                     00069
.C13     LA    &R.15,&RC          LOAD RETURN CODE                      00070
.C14     L     &R.14,12(&R.13)    RESTORE                               00071
         LM    &R.1,&R.12,24(&R.13) REGISTERS                           00072
.END     BR    &R.14              RETURN CONTROL                        00073
         MEND                                                           00074
         PRINT ON                                                       00005
*********************************************************************** 00006
*                                                                     * 00007
*  NAME: LINKDATE                                                     * 00008
*                                                                     * 00009
*  PROGRAM WRITTEN BY: R.D.WIRTH   9/22/75                            * 00010
*  LAST MAINTAINED BY: R.D.WIRTH   9/22/75                            * 00011
*  LAST MAINTAINED BY: R.E.STYMA   5/10/85                            * 00012
*  LAST MAINTAINED BY: R.E.STYMA  12/12/2003 MAKE OUTPUT RMODE ANY    * 00013
*                                            AND AMODE ANY            * 00014
*                                                                     * 00015
*                                                                     * 00016
*  PURPOSE: FETCH THE DATE AND TIME OF AN IBM LINKAGE EDITOR JOB STEP * 00017
*           AND BUILD A " SETSSI " COMMAND WHICH CAN BE CONCATENATED  * 00018
*           TO THE FRONT OF THE LINK EDITORS SYSLIN INPUT STREAM.  THE* 00019
*           OPERAND OF THE SETSSI COMMAND WILL BE AN ENCODING OF THE  * 00020
*           DATE AND TIME AS DEFINED BELOW.  THE LINK EDITOR INSERTS  * 00021
*           THE OPERAND OF THE SETSSI COMMAND INTO THE USER DATA FIELD* 00022
*           OF THE LOAD MODULE PDS DIRECTORY WHERE IT CAN SUBSEQUENTLY* 00023
*           BE PRINTED ON A LOAD MODULE LIBRARY DIRECTORY ( SEE       * 00024
*           LINKDIR ).                                                * 00025
*           5/10/85 - ADD AN OPTION TO PUT THE DATE IN THE FORMAT     * 00026
*           MM/DD/YY IN A VARYING LENGTH EXTERNAL STRING.             * 00027
*           THE EXTERNAL CSECT NAME GENERATED IS LINKDTE AND THE      * 00028
*           FORMAT IS A TWO BYTE LENGTH FIELD FOLLOWED BY             * 00029
*           AN EIGHT BYTE STRING.                                     * 00030
*           TO ACTIVATE THIS OPTION, PLACE THE TWO CHARACTERS "L,"    * 00031
*           AS THE FIRST TWO CHARACTERS OF THE PARM STRING.           * 00032
*                                                                     * 00033
*                                                                     * 00034
*                                                                     * 00035
*  FUNCTIONS: 1) FETCH THE DATE & TIME USING THE OS MACRO.            * 00036
*             2) BUILD A SINGLE 80 BYTE RECORD TO BE WRITTEN TO OUTPUT* 00037
*                CARD IMAGE FILE (SETSSI).                            * 00038
*                THE CARD FORMAT IS:                                  * 00039
*                       '  SETSSI XXXXXYYY '                          * 00040
*                   WHERE  XXXXX  IS THE JULIAN DATE IN YYDDD FORMAT  * 00041
*                            YYY  IS THE TIME IN HOURS & TENS MINUTES * 00042
*                IE; '         SETSSI 75237184 '                      * 00043
*                    237 TH DAY OF 1975                               * 00044
*                    AT 6:40 PM                                       * 00045
*                NOTE THE THE CHARACTERS IN THE OPERAND OF            * 00046
*                     SETSSI ARE LIMITED TO 0-9 & A-F.                * 00047
*             3) PRINT A LINE (121 BYTES) ON AN OUTPUT FILE (PRINTDAT)* 00048
*                CONTAINING:                                          * 00049
*                  TITLE                                              * 00050
*                  JULIAN DATE   YYDDD                                * 00051
*                  CALENDAR DATE   MM/DD/YY                           * 00052
*                  TIME  HH:MM:SS                                     * 00053
*                  IMAGE OF SETSSI COMMAND                            * 00054
*             4) READ THE PARM:                                       * 00055
*                  FIRST PARAMETER IS THE NAME TO LOAD (TO 1ST COMMA) * 00056
*                  REST IS PASSED TO PROGRAM CALLED.                  * 00057
*             5) LINK TO THE LINK EDITOR LOAD MODULE, THE NAME        * 00058
*                WAS PASSED AS THE FIRST PARAMETER IN THE PARM STRING.* 00059
*             6) UPON RETURN FROM THE LINKED PROGRAM, RETURN WITH     * 00060
*                THE LINKED PROGRAMS RETURN CODE                      * 00061
*                                                                     * 00062
*********************************************************************** 00063
         EJECT                                                          00064
*********************************************************************** 00065
*                                                                     * 00066
* OBTAIN THE CURRENT DATE AND TIME AND PROCEED TO FORMAT              * 00067
* THE OUTPUT CARD IMAGE AND PRINT LINE                                * 00068
*                                                                     * 00069
*********************************************************************** 00070
         SPACE                                                          00071
*        PRINT NOGEN                                                    00072
LINKDATE CSECT                                                          00073
         ENTER R,SPIE=NO,ID=YES,BASE=13 * ESTABLISH SAVE AREA & ENTRY   00074
         ST    R1,PARMSAVE    * SAVE THE POINTER TO THE PARM            00075
         SPACE                                                          00076
         TIME  DEC            * FETCH THE CURRENT DATE AND TIME         00077
         ST    R1,DATESAVE    * SAVE THE PACKED DECIMAL DATE (00YYDDDF) 00078
         ST    R0,TIMESAVE    * SAVE THE PACKED DECIMAL TIME (HHMMSSTH) 00079
         SPACE                                                          00080
         UNPK  DATEUNPK,DATESAVE  * UNPACK THE DATE FOR PRINTING  YYDDD 00081
         MVC   SSICARD+10(5),DATEUNPK+3  * MOVE DATE CHARS INTO SETSSI  00082
         LA    R3,DATESAVE    * SET UP JULIAN DATE (PACKED) FOR SUBR.   00083
         BAL   R6,DATECONV    * GO CONVERT JULIAN DATE                  00084
         ST    R3,SSICARD+52  *  TO MM/DD/YY FORMAT  (1ST 4 CHAR)       00085
         ST    R4,SSICARD+56  *                      (LAST 4 CHAR)      00086
         STCM  R3,15,OBJDATE     *  SAVE IN OBJ RECORD  (1ST 4 CHAR)    00087
         STCM  R4,15,OBJDATE+4   *  IN CASE WE NEED IT  (LAST 4 CHAR)   00088
         SPACE                                                          00089
         OI    TIMESAVE+3,X'0F'  * SET THE SIGN TO PERMIT UNPACKING     00090
         UNPK  TIMEUNPK,TIMESAVE  * UNPACK THE TIME FOR PRINTING        00091
         MVC   SSICARD+15(3),TIMEUNPK+1  * MOVE HOURS & TENS OF MINUTES 00092
         MVC   SSICARD+63(2),TIMEUNPK+1  * MOVE HOURS TO PRINT LINE     00093
         MVC   SSICARD+66(2),TIMEUNPK+3  * MOVE MINUTES TO PRINT LINE   00094
         MVC   SSICARD+69(2),TIMEUNPK+5  * MOVE SECONDS TO PRINT LINE   00095
         MVC   OBJTIME+00(2),TIMEUNPK+1  * MOVE HOURS TO OBJECT CARD    00096
         MVC   OBJTIME+03(2),TIMEUNPK+3  * MOVE MINUTES TO OBJECT CARD  00097
         EJECT                                                          00098
*********************************************************************** 00099
*                                                                     * 00100
* PERFORM ALL OUTPUT TO THE CARD AND PRINT FILES                      * 00101
*   SETSSI    IS THE DDNAME OF THE CARD OUTPUT FILE                   * 00102
*   PRINTDAT  IS THE DDNAME OF THE PRINT OUTPUT FILE                  * 00103
*                                                                     * 00104
*********************************************************************** 00105
         SPACE                                                          00106
         OPEN  (SSIDCB,OUTPUT,PRINTDCB,OUTPUT)  * OPEN BOTH OUTPUT FILE 00107
         SPACE                                                          00108
         TM    PRINTDCB+DCBOFLGS-IHADCB,X'10'  * TEST FOR OPEN DCB      00109
         BZ    NOOPENPT       * BRANCH IF OPEN NOT SUCCESSFUL           00110
         TM    SSIDCB+DCBOFLGS-IHADCB,X'10'  * TEST FOR OPEN DCB        00111
         BZ    NOOPENCD       * BRANCH IF OPEN NOT SUCCESSFUL           00112
         SPACE                                                          00113
         PUT   SSIDCB,SSICARD              * WRITE CARD TO OUTPUT FILE  00114
         PUT   PRINTDCB,SSICARD              * WRITE PRINT OUTPUT FILE  00115
         SPACE                                                          00116
         L     R15,PARMSAVE   * RETIREVE THE INPUT PARM POINTER         00117
         L     R1,0(R15)      * POINT TO THE PARM STRING LENGTH         00118
         LH    R2,0(R1)       * FETCH THE LENGTH OF THE PARM STRING     00119
         LTR   R2,R2          * TEST LENGTH OF THE PARM STRING          00120
         BZ    PARMERR        * BRANCH TO ERROR IF NO PARM WAS PASSED   00121
         LA    R1,2(R1)       * BUMP PARM POINTER PAST LENGTH FIELD     00122
         SPACE                                                          00123
         CLC   0(2,R1),=CL2'L,' * IS THE FIRST PARM THE L PARM          00124
         BNE   DOCLOSE        * IF NOT, SKIP OUTPUTING THE OBJ          00125
         SPACE                                                          00126
         BCTR  R2,0           * DECREMENT TWICE TO COMPENSATE FOR       00127
         BCTR  R2,0           * THE L PARM AND COMMA                    00128
         STH   R2,0(R1)       * STORE LENGTH OF NEW PARM                00129
         ST    R1,0(R15)      * REPLACE STRING ADDR IN PARM LIST        00130
         SPACE                                                          00131
         PUT   SSIDCB,OBJ1    * OUTPUT ESD RECORD                       00132
         PUT   SSIDCB,OBJ2    * OUTPUT TXT RECORD                       00133
         PUT   SSIDCB,OBJ3    * OUTPUT END RECORD                       00134
         SPACE                                                          00135
DOCLOSE  EQU   *                                                        00136
         CLOSE (SSIDCB,,PRINTDCB)  * CLOSE BOTH OUTPUT FILES            00137
         EJECT                                                          00138
*********************************************************************** 00139
*                                                                     * 00140
*  FETCH THE FIRST PARAMETER OF THE PARM STRING (WHICH SHOULD BE A    * 00141
*  NAME OF A LINK EDITOR) AND USE IT TO LINK TO THE APPROPRIATE       * 00142
*  LOAD MODULE.  THEN PASS THE REMAINDER OF THE PARM TO THE PROGRAM.  * 00143
*  TERMINATE UPON RETURN.                                             * 00144
*                                                                     * 00145
*********************************************************************** 00146
         SPACE                                                          00147
         L     R1,PARMSAVE    * RETIREVE THE INPUT PARM POINTER         00148
         L     R1,0(R1)       * POINT TO THE PARM STRING LENGTH         00149
         LH    R2,0(R1)       * FETCH THE LENGTH OF THE PARM STRING     00150
         LTR   R2,R2          * TEST LENGTH OF THE PARM STRING          00151
         BZ    PARMERR        * BRANCH TO ERROR IF NO PARM WAS PASSED   00152
         LA    R1,2(R1)       * BUMP PARM POINTER PAST LENGTH FIELD     00153
         SPACE                                                          00154
         LR    R3,R1          * CURRENT CHAR POINTER TO PARM STRING     00155
         SR    R4,R4          * LENGTH OF FIRST PARAMETER OF PARM       00156
         SPACE                                                          00157
NEXTCHAR EQU   *                                                        00158
         CH    R2,=H'0'       * RUN OUT OF PARM? MEANS ONLY NAME PASSED 00159
         BNH   GOTNAME        * YES, GO SAVE NAME FOR LINK              00160
         CLI   0(R3),C','     * COMMA? INDICATING END OF FIRST PARAM    00161
         BE    GOTPARM        * YES, GO SAVE NAME & REMAINIGN PARM      00162
         BCTR  R2,0           * DECREMENT PARM STRING LENGTH -REMAINDER 00163
         LA    R3,1(R3)       * BUMP PARM POINTER TO NEXT CHAR          00164
         LA    R4,1(R4)       * BUMP NAME PARAMETER LENGTH              00165
         B     NEXTCHAR       * GO LOOK AT NEXT CHARACTER               00166
         SPACE                                                          00167
GOTPARM  EQU   *                                                        00168
         BCTR  R2,0           * DECREMENT ONCE TO GET PASSED COMMA      00169
         STH   R2,LPRMLST     * STORE LENGTH OF NEW PARM TO LINK EDITOR 00170
         BCTR  R2,0           * DECREMENT AGAIN TO ADJUST FOR MVC       00171
         EX    R2,PARMMVC     * GO EXECUTE MVC TO MOVE PARM FOR LINK    00172
         SPACE                                                          00173
GOTNAME  EQU   *                                                        00174
         CH    R4,=H'8'       * IS THE NAME TOO LARGE? (>8 CHAR)        00175
         BH    PARMERR        * YES, GO ABEND SIGNALLING PARM ERROR     00176
         BCTR  R4,0           * DECREMENT TO ADJUST LENGTH FOR MVC      00177
         EX    R4,NAMEMVC     * GO EXECUTE MVC TO MOVE NAME FOR LINK    00178
         SPACE                                                          00179
         LA    R1,APRMLST     * ADDRESS OF PARM PASSED TO LINK EDITOR   00180
         LINK  EPLOC=EPNAME   * GO LINK TO THE REQUESTED LINK EDITOR    00181
         SPACE                                                          00182
         RETRN R,SPIE=NO,RC=(15)  * RETURN - PASS L/E RETURN CODE BACK  00183
         SPACE                                                          00184
NAMEMVC  MVC   EPNAME(*-*),0(R1)  * EXECUTED!  CAPTURE NAME FOR LINK    00185
PARMMVC  MVC   PARM(*-*),1(R3)  * EXECUTED!  CAPTURE REMAINING PARM     00186
         EJECT                                                          00187
*********************************************************************** 00188
*                                                                     * 00189
*  SUBROUTINE TO CONVERT THE JULIAN DATE (AS OBTAINED FROM THE        * 00190
*  OS TIME MACRO) INTO THE NORMAL CALENDAR DATE                       * 00191
*                                                                     * 00192
*  CALLING SEQUENCE:  (R3) = A(X'00YYDDDF')      YY = YEAR            * 00193
*                     BAL  R6,DATECONV          DDD = DAY OF YEAR     * 00194
*                                                                     * 00195
*  RETURNS:           (R3) = C'MM/D'             MM = MONTH           * 00196
*                     (R4) = C'D/YY'             DD = DAY             * 00197
*                                                YY = YEAR            * 00198
*                                                                     * 00199
*********************************************************************** 00200
         SPACE                                                          00201
DATECONV EQU   *                                                        00202
         ST    R6,DATERTRN    * SAVE THE RETURN LINKAGE                 00203
         SPACE                                                          00204
         MVC   DATEPACK(4),=X'0000000F'  * CONVERT YEAR OF DATE TO DEC  00205
         MVO   DATEPACK(4),1(1,R3)  *                                   00206
         UNPK  DATEUNPK(3),DATEPACK+2(2)  *                             00207
         OI    DATEUNPK+2,X'F0'                                         00208
         MVC   DATECHAR+6(2),DATEUNPK+1  * MOVE THE YEAR TO DATE CHARS  00209
         SPACE                                                          00210
         DP    DATEPACK(4),=PL2'4'  * DETERMINE IF LEAP YEAR (MULT 4)   00211
         CP    DATEPACK+2(2),=PL2'0'  * REMAINDER OF ZERO IF IT IS      00212
         MVC   DATEPACK(2),2(R3)  * CAPTURE DAY OF YEAR                 00213
         BNE   DATELEAP       * BRANCH IF NOT LEAP YEAR                 00214
         CP    DATEPACK(2),=P'60'  * SEE IF AFTER FEB 28                00215
         BNH   DATELEAP       * BRANCH IF AFTER FEB 28                  00216
         SP    DATEPACK(2),=P'1'  * DECREASE DATE TO COMPENSATE         00217
DATELEAP EQU   *                                                        00218
         LA    R4,DATETAB+22  * POINT TO LAST ENTRY IN THE TABLE        00219
DATELOOP EQU   *                                                        00220
         CP    DATEPACK(2),0(2,R4)  * SEE IF RIGHT RANGE OF MONTH       00221
         BH    DATEGOT        * BRANCH IF RIGHT MONTH                   00222
         SH    R4,=H'2'       * POINT TO THE NEXT ENTRY OF THE TABLE    00223
         B     DATELOOP       * GO BACK TO TRY NEXT ENTRY               00224
DATEGOT  EQU   *                                                        00225
         SP    DATEPACK(2),0(2,R4)  * GET DAY OF MONTH                  00226
         LA    R6,DATETAB-2   * CONVERT THE TABLE POINTER               00227
         SR    R4,R6          *   INTO AN OFFSET                        00228
         SRA   R4,1           *     AND THEN INTO MONTH NUMBER          00229
         CVD   R4,DATEUNPK    * CONVERT THE MONTH # INTO DECIMAL        00230
         UNPK  DATEUNPK(3),DATEUNPK+6(2)  * AND UNPACK MONTH # TO PRINT 00231
         OI    DATEUNPK+2,X'F0'  * ADJUST SIGN FOR PROPER PRINTING      00232
         MVC   DATECHAR(2),DATEUNPK+1  * PUT MONTH # INTO RTRN PARM     00233
         SPACE                                                          00234
         UNPK  DATEUNPK(3),DATEPACK(2)  * CONVERT DAY OF MONTH          00235
         OI    DATEUNPK+2,X'F0'         *   INTO DECIMAL FOR PRINT      00236
         MVC   DATECHAR+3(2),DATEUNPK+1 * PUT DAY INTO RETURN PARAM     00237
         SPACE                                                          00238
         L     R3,DATECHAR    * PICK UP 1ST HALF OF DATE CHARS          00239
         L     R4,DATECHAR+4  * PICK UP LAST HALF OF DATE CHARS         00240
         SPACE                                                          00241
         L     R6,DATERTRN    * RESTORE THE RETURN LINKAGE              00242
         BR    R6             * RETURN                                  00243
         EJECT                                                          00244
*********************************************************************** 00245
*                                                                     * 00246
* ERROR PROCESSING CONSISTS OF GENERATING A USER ABEND UNIQUE TO      * 00247
* EACH TYPE OF ERROR DETECTED.                                        * 00248
*                                                                     * 00249
*********************************************************************** 00250
         SPACE                                                          00251
NOOPENPT EQU  *                                                         00252
         ABEND 1000           * OUTPUT PRINT FILE DID NOT OPEN          00253
         SPACE                                                          00254
NOOPENCD EQU   *                                                        00255
         ABEND 1004           * OUTPUT CARD FILE DID NOT OPEN           00256
         SPACE                                                          00257
PARMERR  EQU   *                                                        00258
         ABEND 1008           * INVALID PARM INPUT STRING               00259
*                             * EITHER: NO PARM?                        00260
*                             *     OR  FIRST PARAMETER > 8 CHARACTERS? 00261
         EJECT                                                          00262
*********************************************************************** 00263
*                                                                     * 00264
*  DATA AREAS / DCB'S FOR OUTPUT / PARAMETER LISTS / DCB SYMBOLICS    * 00265
*                                                                     * 00266
*********************************************************************** 00267
         SPACE                                                          00268
         DS   0F                                                        00269
SSICARD  DC    CL52'  SETSSI  XXXXXXXX  <SET LOADLIB SSI - YYDDDHHM>'   00270
         DC    CL28'MM/DD/YY   HH:MM:SS'                                00271
         DC    CL41'PROGRAM: LINKDATE  (LINK EDIT DATE/TIME)'           00272
         SPACE                                                          00273
TIMEUNPK DC    D'0'           * UNPACKED TIME                           00274
TIMESAVE DC    F'0'           * SAVE AREA FOR THE PACKED TIME           00275
DATERTRN DC    F'0'           * DATE CONVERSION SUBR RETURN LINK        00276
DATESAVE DC    F'0'           * SAVE AREA FOR THE PACKED DATE           00277
DATEPACK DC    F'0'                                                     00278
DATEUNPK DC    D'0'           * UNPACKED DATE                           00279
DATECHAR DC    CL8'XX/XX/XX'  * PARAMETER RETURNED FROM DATECONV        00280
DATETAB  DC    PL2'0,31,59,90,120,151,181,212,243,273,304,334'          00281
         SPACE                                                          00282
EPNAME   DC    CL8' '         * CALLED LINK EDITOR ENTRY NAME           00283
         SPACE                                                          00284
PARMSAVE DC    F'0'           * SAVE ADDRESS OF PARM TO LINKDATE        00285
APRMLST  DC    AL1(X'80'),AL3(LPRMLST)  * ADDRESS OF PARM PASSED TO L/E 00286
LPRMLST  DC    H'0'           * LENGTH OF PARM PASSED TO LINK EDITOR    00287
PARM     DC    CL255' '       * ACTUAL PARM PASSED TO LINK EDITOR       00288
         SPACE                                                          00289
PRINTDCB DCB   DDNAME=SYSPRINT,BLKSIZE=121,DEVD=DA,DSORG=PS,           X00290
               LRECL=121,MACRF=PM,RECFM=FA,BUFNO=1                      00291
         SPACE                                                          00292
SSIDCB   DCB   DDNAME=SETSSI,BLKSIZE=3200,BUFNO=1,DEVD=DA,DSORG=PS,    X00293
               LRECL=80,MACRF=PM,RECFM=FB                               00294
         SPACE                                                          00295
OBJ1    DC    X'02'                                                     00296
        DC    C'ESD      '                                              00297
        DC    X'001040400001'                                           00298
        DC    C'LINKDTE '                                               00299
        DC    X'0000000047000028'                                       00300
        DC    CL48' '                                                   00301
OBJ2    DC    X'02'                                                     00302
        DC    C'TXT '                                                   00303
        DC    X'000000404000284040000141F0F02807FF0000000F'             00304
OBJDATE DC    CL10'MM/DD/YY  '                                          00305
OBJTIME DC    CL5'HH:MM'                                                00306
        DC    CL41' '                                                   00307
OBJ3    DC    X'02'                                                     00308
        DC    CL79'END                            15741SC103 020185130' 00309
         SPACE                                                          00310
         PRINT NOGEN                                                    00311
         DCBD  DSORG=PS,DEVD=DA  * GENERATE SYMBOLICS FOR DCB ADDRESSES 00312
         END                                                            00313
