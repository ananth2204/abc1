Hi,

    I have prepared a way to generate an assembly for IKJTABLS
using the disassembler on CBT File 234.  It is awkward, but it
works.  Actually, you only have to run one job called DISAJC01.

    Before you run DISAJC01, you have to set up two other
libraries.  (They are included in this pds as members OUTPUTS and
LOADLIB in XMIT format.)  And you just have to tailor the JCL in
job DISAJC01 for your installation.

    After you run DISAJC01, the OUTPUTS pds (whatever you call
it) will contain disassemblies of IKJEFTAP, IKJEFTE2, IKJEFTE8,
and IKJEFTNS.  You then take all 6 members (ASM at the top,
LINK at the bottom), put them all together, and you have your
assembly job (which I called WHOLEJOB).  Run WHOLEJOB, and you
will have re-created your IKJTABLS load module.

    The disassembler (whose program name is RESOURCE) is already
installed, being located in the library called LOADLIB.

    I have made this entire process much simpler, by just requiring
that you create a couple of libraries from XMIT-ed pds'es which are
members of this library, tailoring your JCL for your installation,
and just running the job DISAJC01, once it was tailored and
customized for your own IKJTABLS load module.

    Of course, I don't have your particular IKJTABLS, or your
IKJTSOxx PARMLIB member, but I do have my own.  This pds will
be a model for you.  You can look at all of the program names
which I have authorized, and consider if you want to add any
of the names to your own lists.

    -----------------------------------------------------

    The disassembly job has to be tailored.  Here are the
instructions for that.

    In order to start using this disassembler, you have to
create a MAP of the IKJTABLS load module.  See members X and Y
of this pds for a map of my IKJTABLS.  You can use IBM's AMBLIST
program to create the map, but I have used the free PDS 8.6 program
from CBT File 182, using PDS's "MAP" subcommand against module
IKJTABLS.

    Once the map has been created, you can tailor the job DISAJC01.
Again, this job will need two libraries to be created.  I have
supplied them as XMIT-format libraries which are members of this
pds.  The members to be RECEIVEd are LOADLIB and OUTPDS.

    TSO RECEIVE INDS('this.pds(LOADLIB)')
    TSO RECEIVE INDS('this.pds(OUTPDS)')

    You have to copy your own IKJTABLS load module to the load
library.  Once you have copied your own IKJTABLS to the load
library, and you have created the output pds for the disassemblies,
then you can adjust the displacements in the disassembly job so
they match the MAP for your IKJTABLS.  I included my own IKJTABLS
MAP below the // in the disassembly job, for my own convenience.
And you can follow this pattern when setting up the disassembly
job for yourself.

    Let me explain the small subset of control cards you will need
for the disassembler (EXEC PGM=RESOURCE).

Example:

IKJTABLS IKJEFTAP               (what CSECT you will disassemble)
ULABL APFTTABL 000010           (putting in the entry point address)
DATA 000000 0005C8              (all of the disassembly is data.
