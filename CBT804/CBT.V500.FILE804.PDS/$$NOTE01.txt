Subject:    CBT299 TAPEMAP base register problem
From:       RHobt@azdps.gov
Date:       Thu, 5 Feb 2009 13:05:56 -0700
To:         sbgolob@cbttape.org


Hi Sam,

I just pulled and installed the TAPEMAP program from CBT299.  It
worked just fine, but I saw that it had 4 base registers, and
somebody went to a lot of trouble trying to make it all fit.
Just for fun, I spent about an hour trying to make a
quick-and-dirty "baseless" version, using only
relative-addressing instructions (I have an edit macro and an
assembler macro for that).  To my amazement, it actually seems to
work!  I don't have time to do an extensive test, or undo all the
"make it fit" tweaks in the code, but I thought you might be
interested in the result.  So this isn't a formal introduction of
a new version, just another example of how that kind of base
address trouble can be avoided on modern processors.

I've included just the modified source and the macros I used in
the attached TAPEMAP.XMIT dataset rather than the whole CBT299.
Some of them are the same as in CBT642, my log scanning program.

TAPEMAP  - the modified source.  I commented some of the changes
(RLH1), but since many of them were made with the edit macro, I
didn't try to get them all.

INR - the "start" macro I use to set things up in a relative mode.

OUTR - the "end" companion to INR.

ASMINFO - a macro to build an information text block in the code
and jump around it.

BR2JMP - Assembler macro to OPSYN the non-relative instructions
to their relative counterparts.  I didn't use it here - it's
easier, but can produce confusing results (opcodes not matching
what you think should be there).

BR2JMPX - REXX edit macro to do the conversions.  It's real name
is BR2JMP also, but I had to change the name to get it in the
same PDS with the assembler macro.

Feel free to check it out and use it if you like.

Regards,

Rich Hobt
Systems Software Analyst
Arizona Department of Public Safety
(602) 223-2519

