{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011938000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1352078, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE405.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1352078, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1352078, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE405.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x16\\x11'", "DS1TRBAL": "b'\"\\xaa'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\xea\\x00\\x0c\\x02\\xec\\x00\\x04\\x00\\x17'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"###TEXT": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//******************************************************************\n//*                                                                *\n//*           CONTAINS SOME EXITS AND UTILITY FUNCTIONS FROM THE   *\n//*           DEFENSE LOGISTICS AGENCY.                            *\n//*                                                                *\n//*           CMD1     - A STARTED TASK PROCEDURE FOR DSACTASK TO  *\n//*                      MANAGE DYNABLDL AND THE AUTOREPLY FACILITY*\n//*                                                                *\n//*           IEAVNP99 - USER NIP EXIT.                            *\n//*                                                                *\n//*           IEECVXIT - MCS EXIT THAT ALLOWS CONSOLE MESSAGE ID'S *\n//*                      AND RESPONSE STRINGS TO BE CHANGED ON THE *\n//*                      FLY.                                      *\n//*                                                                *\n//*           IEFDB401 - DYNAMIC ALLOCATION EXIT.                  *\n//*                                                                *\n//*           IND$DAIR - EXITS FOR WRITING SMF RECORDS AND SECURITY*\n//*           PLIBSMF0   CONSOLE MESSAGES WHEN UP/DOWN LOADING BE- *\n//*                      TWEEN MAINFRAMES AND PC'S.                *\n//*                                                                *\n//*           FCB      - UTILITY MACRO FOR CODING 3202 AND 3211 FCB*\n//*                      IMAGES. STARTED OUT IN HASP 3.1.          *\n//*                                                                *\n//*           THE MACROS NEEDED FOR ASSEMBLY OF THE SOURCE IS IN-  *\n//*           CLUDED IN THIS FILE. READ THE ##DOC FILE.            *\n//*                                                                *\n//******************************************************************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "##DOC": {"ttr": 518, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "MODULES-----------------------------------------------------------------\n\n1) DSACTASK\nStarted as CMD1 to manage the operation of DYNABLDL  (dynamic BLDL)  and\nto provide a task for IEECVXIT to dispatch an IRB against  when  console\ntraffic indicates a reply is needed or an action  is  required.  Locates\nthe DLACMD00 module in the linklist, loads it into CSA and anchors it in\nCVTVERID at DSACTCMD for accessing by both IEECVXIT when running in  the\nconsole message invoker's address space and by the IRB dispatched by the\nSRB when running in DSACTASK's  address  space.  Communicates  with  the\noperator via the MODIFY operator command.\n     P CMD1              terminate DSACTASK\n     F CMD1,STOP         terminate DSACTASK\n     F CMD1,DISPLAY      show DYNABLDL status\n     F CMD1,BLDL         stops/starts DYNABLDL to refresh dynamic BLDL\n     F CMD1,MOD=modname  refreshes single module in dynamic BLDL list\n     F CMD1,AUTOREPLY    refreshes DLACMDxx table in CSA\n     F CMD1,AUTOREPLY=yy refreshes DLACMDxx table with DLACMDxx table\n\n2) DYNABLDL\nAdapted from CBT tape V-242, modified to include support for UZ70861 and\nto provide for single module refresh without having to stop and restart.\nInvoked and managed by DSACTASK.\n\n3) IEAVNP99\nUser NIP exit.  Enabled by creating an entry in the  NIP  initialization\nmodule table in IEAVNIPM.  Validates O/S checkpoint volumes and initial-\nizes the CVTVERID user CVT prefix.  Uses NIPDPMLB to read  SYS1.PARMLIB.\nValid replies during IPL are:\n     R 00,yes            to enable Autoreply facility\n     R 00,no             to disable Autoreply facility\n     R 00,yy             to override default DLACMDxx with DLACMDyy\nA reply of \"no\" will disable Autoreply for the life of the IPL.  A reply\nof \"xx\" will override the PARM= of the starting procedure.  By  replying\nwith a non-existent \"xx\",  Autoreply will come up enabled but  inactive.\nNote that if you have any sort of OEM SP assist code, the application of\nthe TCMD100 function should cause an SMP/E regression report on IEAVNIPM\nwhere the cross memory instructions are usually replaced with NOPR's.\n\n4) IEECVXIT\nUser MCS exit.  Used to suppress messages, change messages to roll mode,\nschedule automatic replies to  WTOR's  or  initiate  some  action  if  a\nspecific message occurs.  Replies  and  other  commands  are  issued  by\nscheduling an SRB which builds an IRB and IQE and invokes the Stage  Two\nExit Effector to dispatch the IRB in DSACTASK's address space.  Be  sure\nto change SMP/E's JCLIN for  IGC0003E  to  specify  page  alignment  for\nIEECVXIT (see member JCLIN).\n\n5) IEFDB401\nDynamic allocation exit.  Finds the DLASIP00 CDE location  via  CVTVERID\nand checks caller against a list of authorized  users  of  datasets  and\nvolumes.  The first invocation locates the CDE for DLASIP00 and  anchors\nit in the CVT user prefix area.  Only the version of DLASIP00 loaded  by\nNIP will be used by the exit.  That is the reason for anchoring the  CDE\nrather than the table entry point.  If DLASIP00 is  not  loaded,  normal\ndynamic allocation is allowed.\n\n6) NIPDPMLB\nA macro that expands into inline code  that  reads  SYS1.PARMLIB  during\nuser NIP exit processing.  It requires entry  by  BALR 14,15  and  based\naddressing to the NVT and CVT.  Register 11 is  destroyed,  register  15\ncontains the return code and register 1 points to the record  just  read\nor contains zeros if the read was not  successful.  Register  15  return\ncodes are:\n       0    successful read, register 1 points to the record\n       4    BLDL failed, the SYS1.PARMLIB member could not be found\n       8    read failed, the NIP read ECB was not posted \"7F\"\n\n7) IND$DAIR\nA user replacement for IKJDAIR when invoked by IND$FILE, the IBM PC File\nTransfer Program (5665-311, FMID HFX1102).  It writes user SMF type  253\nrecords and a ROUTCDE=(9) message if an illegal dynamic  allocation  re-\nquest is made. IND$FILE runs in conjunction with the 3270 emulation code\nwhich is supported by the IBM PC people and  is  OCO.  Intercepting  the\nIKJDAIR links seemed to be the safest and easiest way  to  gain  a  user\nexit with a standard interface.\n\n8) PLIBSMF0\nEssentially the same as IND$FILE but written for the FTTSO file transfer\nproduct (Digital Communications Associates, Inc.) which uses the IRMA PC\nboard.  This is written as a front-end since no real user  exit  exists.\nThis is also OCO and is written in PL/1 and assembler.\n\n9) FCBSCAN\nA utility that reports on FCB images in SYS1.IMAGELIB.  The FCB macro is\nan adaptation of the old in-line $FCB macro from HASP 3.1.\n\nTABLES------------------------------------------------------------------\n\n1) DLACMD00\nA table of console messages which require some  automatic  action.  Read\nby IEECVXIT. Built by coding the IEECVENT macro, assembling and  linking\ninto a linklist library.  The module is loaded into CSA by DSACTASK  and\nmust be linkedited authorized with re-entrant attributes. This table can\nbe refreshed by issuing a modify command to CMD1.\n\n2) DLASIP00\nA table of authorized users of specific volumes and  datasets.  Read  by\nIEFDB401.  Built by coding the REQUESTR and RESOURCE macros,  assembling\nand linking into SYS1.LPALIB.  The CDE is  anchored  in  CVTVERID.  This\ntable requires an IPL with CLPA option to refresh.\n\nSYS1.PARMLIB------------------------------------------------------------\n\n1) CHKPOINT\nIdentifies volume(s) to manage as  containing  OS  checkpoint  datasets.\nThis can also be used to force a volume offline at IPL without doing  an\nI/O gen.\n\nSYS1.PROCLIB------------------------------------------------------------\n\n1) CMD1\nProcedure to start DSACTASK.  PARM= specifies an override to the default\nDLACMD00 table name.\n\n2) FCBPROC\nProcedure to assemble and linkedit FCB macros into SYS1.IMAGELIB.\n\nMACROS------------------------------------------------------------------\n\n         IEAVNP99 DSACTASK IEECVXIT DLACMD00 DLASIP00 IEFDB401 DYNABLDL\n#DIE ............................................................. X ..\n#ENTER ........................................................... X ..\n#PUT ............................................................. X ..\n#REGS ............................................................ X ..\n#SORT ............................................................ X ..\n#TEST ............................................................ X ..\n@ZAP ............................................................. X ..\nDSACCVTV ... X ...... X ...... X ........................ X ...........\nFCB ...................................................................\nIEAPPNIP ... X ........................................................\nIEECVENT .............................. X .............................\nIEECVUSR ..................... X ......................................\nIEFZBMAP ................................................ X ...........\nIHAIQE ....................... X ......................................\nIHANVT ..... X ........................................................\nIHASVC ........................................................... X ..\nNIPDPMLB ... X ........................................................\nREQUESTR ........................................ X ...................\nRESOURCE ........................................ X ...................\n\nMISCELLANEOUS-----------------------------------------------------------\n\n1) IEAVNIPM is zapped to create the user NIP exit entry.\n2) IEAVVWTO is zapped so that IEECVXIT sees all console messages.\n3) IHASVC, @ZAP, #REGS, #TEST, #PUT, #ENTER, #DIE and #SORT are unchang-\n   ed from the CBT V-242 tape.\n4) This code is written for MVS/370 but should adapt easily to XA.\n\nAll of this code is currently running in our installation.  The relevant\nenvironment is a 3084QX normally in partition mode running MVS/SP 1.3.3,\nJES2 1.3.4, ACF/VTAM V2R1, TSO/E V1R2. Our current CB/IPO is 85C.\n\nQuestions and/or problems can  be  addressed to:\n\n                   Marvin C Cruzan\n                   Defense Logistics Agency\n                   DLA Systems Automation Center\n                   DSAC-TSG\n                   P O Box P1605\n                   Columbus, OH  43216-5002\n\nTelephone: (614) 238-9409; (Autovon) 850-9409\nSHARE Installation code: DLO\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#DIE": {"ttr": 522, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "#ENTER": {"ttr": 526, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&N       #ENTER &NME,&ESDTYPE=DEFAULT,&BASES=1,&SAVTYPE=LOCAL,&PFIX=\n.*\n.*\n.*                                                            08/84 DBC\n.* LAST CHANGE DATE - AUGUST 8, 1984                          08/84 DBC\n.*                  - WHEN BASES=* IS SPECIFIED, #ENTER NOW   08/84 DBC\n.*                    DERIVES THE DESIRED BASE ADDRESS BY     08/84 DBC\n.*                    SUBTRACTING AN OFFSET FROM THE          08/84 DBC\n.*                    CURRENT ENTRY ADDRESS. PREVIOUSLY, IT   08/84 DBC\n.*                    WAS JUST LOADING AN ADCON FOR THE       08/84 DBC\n.*                    DESIRED BASE ADDRESS. THIS CAUSED       08/84 DBC\n.*                    PROBLEMS IF THE #ENTER MACRO WAS        08/84 DBC\n.*                    LOCATED WITHIN DYNAMICALLY RELOCATED    08/84 DBC\n.*                    CODE.                                   08/84 DBC\n.*                  - SIMILARLY, WHEN SAVTYPE=(REMOTE,NME%)   08/84 DBC\n.*                    IS SPECIFIED, THE DESIRED SAVE AREA     08/84 DBC\n.*                    IS LOCATED BY ADDING AN OFFSET (WHICH   08/84 DBC\n.*                    MAY BE NEGATIVE) TO THE CURRENT ENTRY   08/84 DBC\n.*                    ADDRESS.                                08/84 DBC\n.*                                                            06/84 DBC\n.* LAST CHANGE DATE - JUNE 11, 1984                           06/84 DBC\n.*                  - ADDED \"SAVTYPE=NONE\" SUPPORT.           06/84 DBC\n.*                  - WHEN A REMOTE SAVE AREA WAS USED,       06/84 DBC\n.*                    #ENTER USE TO GENERATE A \"USING\"        06/84 DBC\n.*                    STATEMENT DECLARING R13 AS A BASE FOR   06/84 DBC\n.*                    THAT SAVE AREA. THAT \"USING\" STATEMENT  06/84 DBC\n.*                    IS NO LONGER GENERATED.                 06/84 DBC\n.*\n.* LAST CHANGE DATE - OCTOBER 18, 1983\n.*                  - MAILING ADDRESS CHANGE\n.*\n.* LAST CHANGE DATE - APRIL 27, 1983\n.*                  - MAILING ADDRESS CHANGE.\n.*                  - USE OF IBM'S \"SAVE\" MACRO HAS BEEN\n.*                    REPLACED BY LOCAL CODE.\n.*                  - THE ASSEMBLY DATE AND TIME ARE NOW\n.*                    INCLUDED IN THE MODULE IDENTIFIER\n.*                    TEXT.\n.*\n.* LAST CHANGE DATE - APRIL 21, 1981\n.*                  - MACRO NAME CHANGED FROM $ENTER TO #ENTER.\n.*\n.* LAST CHANGE DATE - APRIL 15, 1981\n.*                  - ADDED ENTRY LINKAGE FOR A PLI ENVIRONMENT.\n.*                  - ADDED \"#REGS GEN=NO\" SUPPORT.\n.*\n.* LAST CHANGE DATE - JULY 18, 1980\n.*                  - BUG FIXED: THE PRECEEDING MODIFICATION INTRODUCED\n.*                    AN ERROR WHICH UNDER CERTAIN CIRCUMSTANCES\n.*                    GENERATED ASSEMBLY ERRORS.\n.*\n.* LAST CHANGE DATE - JULY 10, 1980\n.*                  - FOR GETMAINED REENTRANT SAVE AREAS, CODE HAS BEEN\n.*                    ADDED TO CLEAR THE ENTIRE GETMAINED AREA TO ZEROS\n.*                    BEFORE SETING THE CHAIN FIELD.\n.*                  - INDIRECT ADDRESSING TO A REMOTE SAVE AREA IS NOW\n.*                    SIGNALLED BY A TRAILING PERCENT SIGN RATHER THAN\n.*                    A LEADING PERCENT SIGN.\n.*\n.* LAST CHANGE DATE - OCTOBER 3, 1979\n.*                  - CODE HAS BEEN ALTERED SO THAT ADDRESSABILITY TO\n.*                    A REMOTE SAVE AREA DOES NOT HAVE TO BE BASED ON\n.*                    R15 (I.E., ON THE ENTRY ADDRESS).\n.*\n.* LAST CHANGE DATE - OCTOBER 3, 1978\n.*                  - THE GETMAIN FOR THE RENTRANT SAVE AREA HAS BEEN\n.*                    CHANGED SO THAT MORE THAN 4K BYTES CAN BE GOTTEN.\n.*\n.* LAST CHANGE DATE - FEBRUARY 28, 1978\n.*                  - BUG FIXED IN REMOTE SAVE AREA HANDLING\n.*\n.* LAST CHANGE DATE - JANUARY 29, 1978\n.*                  - IN MOST CASES IT IS LOGICALLY INCONSISTANT TO\n.*                    CODE 'BASES=*' WHEN ONE OF THE OLD BASES IS R13.\n.*                    THIS PROBLEM IS NOW RECOGNIZED AND FLAGGED.\n.*\n.*                  - A REMOTE SAVE AREA'S NAME CAN NOW BE GIVEN EITHER\n.*                    WITH OR WITHOUT A PRECEEDING PERCENT (%) SIGN TO\n.*                    INDICATE WHETHER THE NAMED ADDRESS MUST BE\n.*                    REACHED BY INDIRECT ADDRESSING.\n.*\n.* LAST CHANGE DATE - NOVEMBER 4, 1977\n.*                  - SUPPORT IS ADDED FOR DEFINING A LOCAL SAVE AREA\n.*                    WHOSE LENGTH IS OTHER THAN 72 BYTES.\n.*\n.* LAST CHANGE DATE - JANUARY 13, 1977\n.*                  - THE MF= AND SVID= OPERANDS ARE REPLACED BY THE\n.*                    SAVTYPE= OPERAND.\n.*                  - SUPPORT FOR THE HANDLING OF A REMOTELY ASSEMBLED\n.*                    SAVE AREA.\n.*                  - MAILING ADDRESS CHANGE.\n.*\n.* LAST CHANGE DATE - SEPTEMBER 14, 1976\n.*                  - IMPLEMENT SUPPORT FOR \"BASES=*\" WHICH IMPLIES\n.*                    THAT BOTH THE BASE ADDRESS AND BASE REGISTERS\n.*                    DEFINED BY THE PHYSICALLY PREVIOUS USE OF THE\n.*                    #ENTER MACRO ARE TO BE REUSED.\n.*\n.* LAST CHANGE DATE - AUGUST 23, 1976\n.*\n.* THIS MACRO WAS WRITTEN BY DAVID B. COLE.  ANY QUESTIONS CONCERNING\n.* IT MAY BE ADDRESSED TO:\n.*       RR#2 BOX 712\n.*       AFTON, VA. 22920\n.*\n.*\n.*\n.*   THIS MACRO GENERATES OS STANDARD ENTRY LINKAGE. IT WAS WRITTEN TO\n.* PROVIDE A SIMPLE, FLEXIBLE, AND COMPLETE METHOD OF GENERATING SUCH\n.* LINKAGE. IN ADDITION, FOR ALMOST ALL OPERAND COMBINATIONS, #ENTER\n.* WILL GENERATE THE ABSOLUTE MINIMUM AMOUNT OF CODE NECESSARY.\n.*\n.*   THE #ENTER MACRO WILL GENERATE THE FOLLOWING:\n.*     - A CSECT OR ENTRY CARD (IF DESIRED)\n.*     - A MODULE IDENTIFIER WHICH WILL INCLUDE THE ASSEMBLY\n.*       DATE AND TIME.\n.*     - CODE TO SAVE ALL REGISTERS IN THE HIGHER SAVE AREA\n.*     - CODE TO LOAD R13 WITH A POINTER TO A LOWER SAVE AREA\n.*     - CODE TO CROSS LINK THE LOWER SAVE AREA WITH THE HIGHER SAVE\n.*       AREA\n.*     - CODE TO LOAD ANY SET OF BASE REGISTERS\n.*     - A USING STATEMENT DECLARING THE SET OF BASE REGISTERS\n.*     - EITHER THE LOWER SAVE AREA ITSELF OR CODE TO GETMAIN A\n.*       REENTRANT SAVE AREA OF 72 OR MORE BYTES OR CODE TO LOAD THE\n.*       ADDRESS OF AN ASSEMBLED SAVE AREA THAT IS REMOTE FROM THE\n.*       MACRO EXPANSION.\n.*     - FOR A GETMAINED REENTRANT SAVE AREA, CODE TO CLEAR THE AREA TO\n.*       ZEROS.\n.*\n.* &N\n.*       THIS IS THE ONLY FIELD REQUIRED FOR THE MACRO CALL. IT MUST\n.*       SPECIFY THE DESIRED CONTROL SECTION OR ENTRY NAME.\n.*\n.* &NME\n.*       USE THIS FIELD TO SPECIFY OPTIONAL TEXT TO BE\n.*       INCLUDED INTO THE MODULE IDENTIFIER. ENCLOSING\n.*       QUOTES ARE OPTIONAL.\n.*\n.* &ESDTYPE=\n.*       THIS OPERAND CONTROLS THE TYPE OF EXTERNAL SYMBOL (IF ANY) TO\n.*       BE GENERATED USING &N. VALID VALUES FOR THIS OPERAND IMPLY THE\n.*       FOLLOWING:\n.*              -OMITTED-    ==> ESDTYPE=ENTRY IF SAVTYPE=PLI\n.*              -OMITTED-    ==> ESDTYPE=CSECT OTHERWISE\n.*             ESDTYPE=CSECT ==>\n.*                     &N       CSECT\n.*             ESDTYPE=START ==>\n.*                     &N       START\n.*             ESDTYPE=ENTRY ==>\n.*                              ENTRY &N\n.*                     &N       DS    0H\n.*             ESDTYPE=     <==>\n.*             ESDTYPE=NONE  ==>\n.*                     &N       DS    0H\n.*\n.* &BASES=\n.*       USE THIS OPERAND TO SPECIFY EITHER HOW MANY OR EXACTLY WHICH\n.*       BASE REGISTERS TO DECLARE AND LOAD. VALID VALUES FOR THIS\n.*       OPERAND ARE:\n.*             BASES= -A SINGLE SELF DEFINING NUMERIC-\n.*                   THIS REQUESTS THAT A SPECIFIC NUMBER OF BASES BE\n.*                   LOADED AND DECLARED. THE MACRO IS ALLOWED TO\n.*                   DETERMINE FOR ITSELF PRECISELY WHICH REGISERS TO\n.*                   DECLARE AS FOLLOWS. FOR SAVTYPE=LOCAL (SEE BELOW)\n.*                   THE FIRST BASE REGISTER WILL BE R13; OTHERWISE\n.*                   (I.E. FOR SAVTYPE=RENT OR SAVTYPE=REMOTE), THE\n.*                   FIRST BASE REGISTER WILL BE R12. IN EITHER CASE,\n.*                   ADDITIONAL BASES WILL BE SUCCESSIVELY LOWER\n.*                   NUMBERED REGISTERS. EXAMPLES:\n.*                   BASES=3,SAVTYPE=RENT  ==> R12, R11, AND R10.\n.*                   BASES=2,SAVTYPE=LOCAL ==> R13, AND R12.\n.*             BASES= -A SUBLIST OF ONE OR MORE REGISTER NAMES-\n.*                   THE LISTED REGISTERS ARE LOADED AND DECLARED AS\n.*                   BASES. THE LEFTMOST LISTED REGISTER IS LOADED WITH\n.*                   THE LOWEST ADDRESS. EXAMPLE:\n.*                   BASES=(R5,6,4) ==> R5, R6, AND R4 IN THAT ORDER.\n.*             BASES=*\n.*                   THE BASE ADDRESS AND BASE REGISTERS DEFINED BY THE\n.*                   PHYSICALLY PREVIOUS #ENTER MACRO ARE REUSED.\n.*          THE BASES= OPERAND MAY BE NULLIFIED BY SPECIFYING EITHER:\n.*             BASES=\n.*             BASES=0\n.*       IN THIS CASE, NO BASE REGISTERS ARE LOADED OR DECLARED.\n.*          IF THE BASES= OPERAND IS OMITTED, THEN A DEFAULT OF BASES=1\n.*       WILL BE USED.\n.*\n.* &SAVTYPE=\n.*       THIS OPERAND IDENTIFIES THE TYPE OR LOCATION OF THE SAVE AREA\n.*       TO BE GENERATED OR USED. VALID VALUES ARE:\n.*             -OMITTED-\n.*             SAVTYPE=\n.*             SAVTYPE=LOCAL\n.*             SAVTYPE=(,-SAVE AREA NAME-)\n.*             SAVTYPE=(LOCAL,-SAVE AREA NAME-)\n.*             SAVTYPE=(LOCAL,,-SAVE AREA LENGTH-)\n.*             SAVTYPE=(LOCAL,-SAVE AREA NAME-,-SAVE AREA LENGTH-)\n.*                     A STANDARD SAVE AREA IS GENERATED IN THE\n.*                     THE MACRO EXPANSION AND ITS ADDRESS IS LOADED\n.*                     INTO R13. NOTE, DEPENDING UPON THE BASES=\n.*                     OPERAND (SEE ABOVE) R13 MAY ALSO BE DECLARED AS\n.*                     A PROGRAM BASE.\n.*                        IF A -SAVE AREA NAME- IS GIVEN, THEN IT IS\n.*                     USED TO LABEL THE SAVE AREA; OTHERWISE, AN\n.*                     INTERNAL NAME IS GENERATED.\n.*                              IF -SAVE AREA LENGTH- IS GIVEN, THEN IT\n.*                              IS USED TO SET THE LENGTH OF THE SAVE\n.*                              AREA; OTHERWISE, THE DEFAULT LENGTH OF\n.*                              72 BYTES IS USED.\n.*             SAVTYPE=(REMOTE,-SAVE AREA ADDRESS-)\n.*                     THE ADDRESS OF THE REMOTE SAVE AREA IS\n.*                     LOADED INTO R13. NOTE, IN THIS CASE -SAVE AREA\n.*                     ADDRESS- IS A REQUIRED SUB-OPERAND. IT MAY BE\n.*                     EITHER AN ADDRESS LABEL OR A PARENTHESIZED\n.*                     REGISTER NAME OR AN ADDRESS LABEL FOLLOWED BY A\n.*                     PERCENT (%) SIGN. IF THE NAME IS JUST AN ADDRESS\n.*                     LABEL, THEN A 'LA' INSTRUCTION IS USED TO LOAD\n.*                     THE SAVE AREA'S ADDRESS. IF A PERCENT SIGN\n.*                     FOLLOWS THE NAME, THEN AN ADDRESS CONSTANT IS\n.*                     GENERATED AND A 'L' INSTRUCTION IS USED. IF A\n.*                     REGISTER NAME IS GIVEN, THEN A 'LR' INSTRUCTION\n.*                     IS USED UNLESS THE MACRO CAN DETERMINE THAT THE\n.*                     NAMED REGISTER IS ACTUALLY R13 IN WHICH CASE IT\n.*                     IS ASSUMED THAT THE LOWER SAVE AREA IS ALREADY\n.*                     PRESENT AND INITIALIZED, SO THE SAVING OF\n.*                     REGISTERS AND THE CROSS-CHAINING OF THE SAVE\n.*                     AREAS IS BYPASSED.\n.*             SAVTYPE=RENT\n.*             SAVTYPE=(RENT,(-LENGTH-,-SUBPOOL-),-ERROR ADDRESS-)\n.*             SAVTYPE=(RENT,(-LENGTH-,-SUBPOOL-),RETURN)\n.*                     THE MACRO EXPANSION IS TO BE REENTRANT. THE SAVE\n.*                     AREA IS TO BE GETMAINED. THE SUB-OPERANDS HAVE\n.*                     THE FOLLOWING AFFECT:\n.*                     -LENGTH- IS OPTIONAL. IF OMITTED, THEN A VALUE\n.*                              OF 72 IS USED. IF GIVEN, THEN IT\n.*                              INDICATES THE SIZE OF THE SAVE AREA TO\n.*                              BE GOTTEN. WARNING, THE VALUE OF\n.*                              -LENGTH- SHOULD NEVER BE LESS THAN 72.\n.*                     -SUBPOOL- IS OPTIONAL. IF OMITTED, THEN A VALUE\n.*                               OF 0 IS IMPLIED. IF GIVEN, THEN IT\n.*                               SPECIFIES THE SUBPOOL OUT OF WHICH THE\n.*                               SAVE AREA IS TO BE GOTTEN.\n.*                     -ERROR ADDRESS- IS OPTIONAL. IF OMITTED, THEN\n.*                                     THE SAVE AREA GETMAIN REQUEST IS\n.*                                     UNCONDITIONAL. IF GIVEN, THEN\n.*                                     THE GETMAIN IS CONDITIONAL, AND\n.*                                     IF IT FAILS, THEN CONTROL IS\n.*                                     PASSED TO THE INDICATED ADDRESS.\n.*                                     NOTE, -ERROR ADDRESS- MAY BE\n.*                                     EITHER A STATEMENT LABEL OR A\n.*                                     PARENTHESIZED REGISTER NAME.\n.*                                     WARNING, -ERROR ADDRESS- MAY BE\n.*                                     USED ONLY IN A MVS ENVIRONMENT.\n.*                                     IT IS NOT SUPPORTED UNDER MVT.\n.*                     RETURN IS A SPECIAL FORM OF -ERROR ADDRESS-\n.*                            WHICH, IF GIVEN, CAUSES CONTROL TO BE\n.*                            RETURNED IMMEDIATELY TO THE CALLER IN THE\n.*                            EVENT OF A GETMAIN FAILURE. ALL REGISTERS\n.*                            ARE RESTORED EXCEPT R15 WHICH CONTAINS\n.*                            THE RETURN CODE FROM GETMAIN.\n.*             SAVTYPE=PLI\n.*             SAVTYPE=NONE                                   06/84 DBC\n.*                     NO LOCAL LEVEL SAVEAREA IS DEFINED OR  06/84 DBC\n.*                     USED.                                  06/84 DBC\n.*             SAVTYPE=(PLI,-LENGTH-)\n.*                     THE MACRO IS TO EXPAND INTO THE FORMAT OF A PLI\n.*                     PROLOG. THE EXPANSION IS REENTRANT. THE SAVE\n.*                     AREA WILL BE A PLI DSA. IT WILL PROBABLY BE\n.*                     OBTAINED FROM PLI'S ISA. IF -LENGTH- IS GIVEN,\n.*                     THEN IT SPECIFIES THE DESIRED LENGTH OF THE DSA\n.*                     THAT THIS EXPANSION OBTAINS. WARNING, THE VALUE\n.*                     OF -LENGTH- MUST NEVER BE LESS THAN 88.\n.*\n.* &PFIX=\n.*       THE #ENTER MACRO ATTEMPTS TO USE REGISTER EQUATES IN ITS\n.*       EXPANSION WHEN REFERING TO REGISTERS. THIS IS SO THAT THE USE\n.*       OF THE REGISTERS IS INDICATED IN THE ASSEMBLER'S CROSS\n.*       REFERENCE LISTING. THE PFIX= OPERAND CAN BE USED TO CONTROL\n.*       THE SET OF EQUATES USED. FOR EXAMPLE, IF \"PFIX=GPR\" IS GIVEN,\n.*       THEN \"GPR1\" IS USED WHENEVER THE EXPANSION REFERS FO REGISTER\n.*       1.\n.*          IF THE PFIX= OPERAND IS OMITTED, THEN THE SET OF REGISTER\n.*       EQUATES DEFINED BY THE NEXT PRIOR #REGS MACRO IS USED. IF\n.*       THERE ARE NO PRIOR #REGS MACROS, THEN SELF-DEFINING NUMERICS\n.*       ARE USED.\n.*\n.* MISCELLANIOUS CONSIDERATIONS\n.*     - SINCE THE #ENTER MACRO EXPANSION USUALLY INCLUDES A CSECT\n.*       CARD, THE MACRO CALL SHOULD BE PLACED AT THE PHYSICAL\n.*       BEGINNING OF A CONTROL SECTION.\n.*     - FOR LOCAL SAVE AREAS IT IS BOTH POSSIBLE AND REASONABLE FOR\n.*       R13 TO SERVE AS BOTH THE SAVE AREA POINTER AND A PROGRAM BASE.\n.*       THERE ARE, HOWEVER, CERTAIN PRECAUTIONS THAT HAVE TO BE TAKEN\n.*       FOR VARIOUS SYSTEM EXIT ROUTINES IF THEY ARE INCLUDED IN THE\n.*       PROGRAM. HERE ARE SOME EXAMPLES:\n.*           - IOS APPENDAGE ROUTINES: NO BASE REGISTER FOR THE MAIN\n.*             PROGRAM, INCLUDING R13, IS AVAILABLE FROM WITHIN AN IOS\n.*             APPENDAGE.\n.*           - DCB OPEN EXITS: R13 REMAINS A VALID BASE REGISTER.\n.*           - EOD ROUTINES: R13 REMAINS A VALID BASE REGISTER.\n.*           - SYNAD EXITS: R13 REMAINS A VALID BASE REGISTER UNTIL A\n.*             SYNADAF MACRO IS ISSUED. AFTER A SUBSEQUENT SYNADRLS\n.*             MACRO, R13 IS AGAIN A VALID PROGRAM BASE.\n.*\n.*\n.*\n.* INNER MACROS USED - #USING, #TEST, SAVE, GETMAIN\n.*\n         GBLA  &#TESERR\n         GBLB  &#ENTRNT,&#ENTPLI,&#ENTNUN                     06/84 DBC\n         GBLC  &#TESRET(20),&#ENTSIZ,&#ENTSP,&#BS(14)\n         LCLA  &A1,&A2,&C1,&C2,&C3,&C4,&B(13),&RMTREGA\n         LCLB  &REDUN(13),&OLDBASE,&REMOTE(5),&ALIGND,&LOCAL,&LENGTH\n         LCLC  &LID,&@,&#,&N1,&N2,&W2,&W3,&R,&RMTREGC,&SAVLEN,&RMTNAME\n         LCLC  &SPOOL,&TB,&ESDT,&C                            06/84 DBC\n&#       SETC  '&SYSNDX'\n&#ENTRNT SETB  (0)\n&#ENTPLI SETB  (0)\n&#ENTNUN SETB  (0)\n&C1      SETA  11\n.*                                                            06/84 DBC\n         AIF   ('&SAVTYPE' NE 'NONE').TYPNNON                 06/84 DBC\n&#ENTNUN SETB  (1)                                            06/84 DBC\n         AGO   .PFXTST                                        06/84 DBC\n.TYPNNON ANOP                                                 06/84 DBC\n.*                                                            06/84 DBC\n         AIF   ('&SAVTYPE(1)' NE 'RENT').TYPNRNT\n&#ENTRNT SETB  (1)\n&#ENTSIZ SETC  '72'\n&#ENTSP  SETC  ''\n         #TEST DCODE=&SAVTYPE(2)\n&A1      SETA  &#TESRET(1)\n         AIF   (&A1 EQ 0).PFXTST\n         AIF   ('&#TESRET(2)' EQ '').DFLTLEN\n&#ENTSIZ SETC  '&#TESRET(2)'\n.DFLTLEN AIF   (&A1 EQ 1).PFXTST\n&#ENTSP  SETC  '&#TESRET(3)'\n         AGO   .PFXTST\n.TYPNRNT ANOP\n.*\n         AIF   ('&SAVTYPE(1)' NE 'REMOTE').TYPNRMT\n&REMOTE(1) SETB (1)\n         AIF   ('&SAVTYPE(2)' NE '').GOTRMT2\n         MNOTE 12,'ERROR - SAVTYPE(2) (REMOTE AREA''S NAME) OMITTED.'\n.GOTRMT2 AIF   ('&SAVTYPE(2)'(1,1) EQ '(').TYPLCL2\n&REMOTE(2) SETB (1)\n&RMTNAME SETC  '&SAVTYPE(2)'\n         AIF   ('&SAVTYPE(2)'(K'&SAVTYPE(2),1) NE '%').PFXTST\n&REMOTE(5) SETB (1)\n&RMTNAME SETC  '&SAVTYPE(2)'(1,K'&SAVTYPE(2)-1)\n         AGO   .PFXTST\n.TYPLCL2 #TEST DCODE=&SAVTYPE(2)\n&RMTREGC SETC  '&#TESRET(2)'\n         #TEST REGS=&RMTREGC\n         AIF   (&#TESERR NE 0).PFXTST\n&RMTREGA SETA  &#TESRET(1)\n         AIF   (&RMTREGA NE 13).PFXTST\n&REMOTE(3) SETB (1)\n         AGO   .PFXTST\n.TYPNRMT ANOP\n.*\n         AIF   ('&SAVTYPE(1)' NE 'PLI').TYPNPLI\n&#ENTPLI SETB  (1)\n&C1      SETA  10\n         AGO   .PFXTST\n.TYPNPLI ANOP\n.*\n         AIF   ('&SAVTYPE(1)' EQ '' OR '&SAVTYPE(1)' EQ 'LOCAL').TYPLCL\n         MNOTE 4,'SAVTYPE(1)=&SAVTYPE(1) IS INVALID.'\n         MNOTE 4,'SAVTYPE(1)=LOCAL ASSUMED.'\n.TYPLCL  ANOP\n&LOCAL   SETB  (1)\n&C1      SETA  12\n&LID     SETC  'E&#.SVA'\n         AIF   ('&SAVTYPE(2)' EQ '').GOTSLID\n&LID     SETC  '&SAVTYPE(2)'\n.GOTSLID ANOP\n&SAVLEN  SETC  '72'\n         AIF   ('&SAVTYPE(3)' EQ '').PFXTST\n&SAVLEN  SETC  '&SAVTYPE(3)'\n.*\n.PFXTST  ANOP\n&@       SETC  '&PFIX'\n         AIF   (K'&PFIX NE 0).GOTPFIX\n         #TEST PFIX=\n&@       SETC  '&#TESRET(1)'\n         AGO   .DONPFIX\n.GOTPFIX #REGS &PFIX,GEN=NO\n.DONPFIX ANOP\n.*                                                            06/84 DBC\n&A1      SETA  0\n         AIF   ('&BASES' NE '*').BSCLR\n.BSOLD   AIF   (&A1 EQ 13).BASEND\n&A1      SETA  &A1+1\n         AIF   ('&#BS(&A1)' EQ '').BSOLD\n         #TEST REGS=&#BS(&A1)\n&B(&A1)  SETA  16\n         AIF   (&#TESERR NE 0).BSOLD\n&B(&A1)  SETA  &#TESRET(1)\n         AIF   (&B(&A1) NE 13).BSOLD\n         AIF   (&A1 NE 13 OR '&#BS(14)' NE '&RMTNAME' OR &#ENTRNT OR &#*\n               ENTPLI).BSERROR\n&REMOTE(4) SETB (1)\n         AGO   .BSOLD\n.BSERROR ANOP\n         MNOTE 4,'THE OLD BASE REGISTER &B(&A1) CANNOT ALSO FUNCTION'\n         MNOTE 4,'AS A SAVE AREA POINTER IN THIS CONTEXT.'\n         MNOTE 4,'THE CODE GENERATED BELOW WILL NOT FUNCTION CORRECTLY.*\n               '\n         AGO   .BSOLD\n.BSCLR   AIF   (&A1 EQ 14).BSCLRD\n&A1      SETA  &A1+1\n&#BS(&A1) SETC ''\n         AGO   .BSCLR\n.BSCLRD  AIF   (K'&BASES EQ 0).BASEND\n         AIF   ('&BASES' NE '&BASES(1)').TSTNBSE\n         #TEST NUM=&BASES\n         AIF   (&#TESERR EQ 0).BSEOKX\n         MNOTE 4,'\"BASES=&BASES\" IS INVALID.'\n         MNOTE 4,'\"BASES=1\" ASSUMED.'\n&C3      SETA  1\n         AGO   .BSESET\n.BSEOKX  ANOP\n&C3      SETA  &BASES\n         AIF   (&C3 LE &C1).BSESET\n         MNOTE 4,'\"BASES=&BASES\" IS OUTSIDE THE RANGE OF 0...&C1..'\n         MNOTE 4,'THE CODE GENERATED BELOW WILL NOT FUNCTION CORRECTLY.*\n               '\n.BSESET  ANOP\n&C1      SETA  &C1+1\n&C3      SETA  &C1-&C3\n&C4      SETA  13\n.BOK     AIF   (&C1 LE &C3).BASEND\n&#BS(&C4) SETC '&@&C1'\n&B(&C4)  SETA  &C1\n&C1      SETA  &C1-1\n&C4      SETA  &C4-1\n         AGO   .BOK\n.TSTNBSE ANOP\n&C3      SETA  N'&BASES\n         AIF   (&C3 LE &C1).NBSOK\n         MNOTE 4,'\"BASES=&BASES\" SPECIFIES TOO MAY REGISTERS.'\n         MNOTE 4,'ONLY THE FIRST &C1 REGISTERS WILL BE USED.'\n&C3      SETA  &C1\n.NBSOK   ANOP\n&C1      SETA  &C1+1\n&C4      SETA  13\n&C2      SETA  0\n.GETBSE  AIF   (&C2 GE &C3).BASEND\n&C2      SETA  &C2+1\n         AIF   ('&BASES(&C2)' EQ '').IGNR\n         #TEST REGS=&BASES(&C2)\n&B(&C4)  SETA  16\n         AIF   (&#TESERR EQ 16).REGUNK\n         AIF   (&#TESRET(1) GE 2 AND &#TESRET(1) LE &C1).BSEOK2\n         MNOTE 4,'\"BASES(&C2)=&BASES(&C2)\" IS OUTSIDE THE RANGE OF 2...*\n               &C1..'\n         MNOTE 4,'THE CODE GENERATED BELOW WILL NOT FUNCTION CORRECTLY.*\n               '\n         AGO   .BSEOK2\n.IGNR    AIF   (&C3 GE N'&BASES).GETBSE\n&C3      SETA  &C3+1\n         AGO   .GETBSE\n.BSEOK2  AIF   (NOT &REDUN(&#TESRET(1))).BSEOK3\n         MNOTE 4,'\"BASES(&C2)=&BASES(&C2) IS REDUNDANT.'\n         MNOTE 4,'THE CODE GENERATED BELOW WILL NOT FUNCTION CORRECTLY.*\n               '\n.BSEOK3  ANOP\n&REDUN(&#TESRET(1)) SETB (1)\n&B(&C4)  SETA &#TESRET(1)\n.REGUNK  ANOP\n&C1      SETA  12\n&#BS(&C4) SETC '&BASES(&C2)'\n&C4      SETA  &C4-1\n         AGO   .GETBSE\n.BASEND  ANOP\n.*\n&R       SETC  '&@.1'\n&C3      SETA  0\n.WRLP    AIF   (&C3 GE 13).GOTWRG\n&C3      SETA  &C3+1\n         AIF   ('&#BS(&C3)' EQ '').WRLP\n         AIF   (&B(&C3) EQ 13).GOTWRG\n&R       SETC  '&#BS(&C3)'\n.GOTWRG  ANOP\n.*\n&ESDT    SETC  '&ESDTYPE(1)'\n         AIF   (&#ENTPLI).PLIGEN\n.*\n         AIF   ('&ESDT' NE 'DEFAULT').GOTESD\n&ESDT    SETC  'CSECT'\n.GOTESD  ANOP\n&N2      SETC  '&N'\n         AIF   ('&ESDT' EQ 'NONE' OR '&ESDT' EQ '' OR '&ESDT' EQ 'ENTRY*\n               ').NCSCETC\n         AIF   ('&ESDT' NE 'CSECT').ESDNCSC\n&N       CSECT ,                   START CONTROL SECTION\n         AGO   .ESDDONE\n.ESDNCSC AIF   ('&ESDT' NE 'START').ESDNSTA\n&N       START ,                   START CONTOL SECTION\n         AGO   .ESDDONE\n.ESDNSTA ANOP\n&W2      SETC  '&ESDT'\n&N       &W2   0H'0'               START\n.ESDDONE ANOP\n&N2      SETC  ''\n.*\n.NCSCETC AIF   ('&ESDT' NE 'ENTRY').NENTRY\n         ENTRY &N                  MAKE NAME EXTERNALLY AVAILABLE\n.NENTRY  ANOP\n.*\n         AIF   (K'&NME EQ 0 AND '&ESDT' NE 'CSECT' AND '&ESDT' NE 'STAR*\n               T').NMODID\n&N2      B     E&#.ZID-&N.(,&@.15) SKIP AROUND THE MODULE ID\n&N2      SETC  'E&#.ZID'\n         DC    AL1(&N2-E&#.MID)    LENGTH OF TEXT\nE&#.MID  DC    C'&N '              ENTRY NAME\n&W2      SETC  '&SYSDATE       '(1,8).' '\n         DC    C'&W2'              ASSEMBLY DATE\n&W2      SETC  '&SYSTIME    '(1,5)\n         AIF   (K'&NME EQ 0).NMEZ1\n&W2      SETC  '&W2 - '\n.NMEZ1   DC    C'&W2'              ASSEMBLY TIME\n         AIF   (K'&NME EQ 0).NMEZ2\n         AIF   ('&NME'(1,1) EQ '''').QNME\n         DC    C'&NME'\n         AGO   .NMEZ2\n.QNME    DC    C&NME\n.NMEZ2   ANOP\n.NMODID  ANOP\n.*\n         AIF   (&REMOTE(3)).RNTRNT1\n&W2      SETC  '&@.14,&@.12,12(&@.13)'\n&N2      STM   &W2                 SAVE CALLER'S REGISTERS\n&N2      SETC  ''\n.*\n         AIF   (&#ENTRNT OR &#ENTNUN).RNTRNT1                 06/84 DBC\n         LR    &R,&@.13            POINT TO HIGHER SA\n         AIF   (&REMOTE(1)).LRMTSV1\n&C       SETC  '&@.13,&LID-&N.(,&@.15)'                       06/84 DBC\n         LA    &C                  POINT TO LOWER SA\n         AGO   .LRMTSV2\n.LRMTSV1 AIF   (&REMOTE(2)).LRMTSV3\n         #TEST REGS=&R\n         AIF   (&RMTREGA NE &#TESRET(1)).LRMTSV4\n&A1      SETA  20+&RMTREGA*4-&RMTREGA/13*44\n         L     &@.13,&A1.(,&@.13)  POINT TO LOWER SA\n         AGO   .LRMTSV2\n.LRMTSV4 LR    &@.13,&RMTREGC      POINT TO LOWER SA\n         AGO   .LRMTSV2\n.LRMTSV3 AIF   (&REMOTE(5)).LRMTSV5\n         PUSH  USING               SAVE USING ENVIRONMENT\n         USING &N,&@.15            DECLARE TEMP BASE\n         LA    &@.13,&RMTNAME      POINT TO LOWER SA\n         POP   USING               RESTORE USING ENVIRONMENT\n         AGO   .LRMTSV2                                       06/84 DBC\n.LRMTSV5 ANOP                                                 06/84 DBC\n         LR    &@.13,&@.15         POINT TO LOWER SA          08/84 DBC\n&C       SETC  '&@.13,E&#.SAP-&N.(,&@.15)'                    06/84 DBC\n         AH    &C                                             08/84 DBC\n.LRMTSV2 ST    &@.13,8(,&R)        FORWARD CHAIN THE SAVE AREAS\n         ST    &R,4(,&@.13)        BACK CHAIN THE SAVE AREAS\n         AIF   ('&R' NE '&@.1').RNTRNT1\n         L     &@.1,24(,&@.1)      RESTORE REGISTER 1\n.RNTRNT1 AIF   ('&#BS(13)' EQ '').SKIPUSE\n&C1      SETA  13\n         AIF   ('&BASES' NE '*').BSEADR\n         AIF   (&REMOTE(4)).EQUATE\n&OLDBASE SETB  (1)\n&N2      LR    &#BS(13),&@.15      LOAD 1ST BASE REGISTER     08/84 DBC\n&N2      SETC  ''                                             08/84 DBC\n&C       SETC  '&#BS(13),E&#.BSE-&N.(,&@.15)'                 06/84 DBC\n         SH    &C                                             08/84 DBC\n         AGO   .EQUATE\n.BSEADR  ANOP\n&C2      SETA  15\n&#BS(14) SETC  '&N'\n         AIF   (&#ENTRNT OR &REMOTE(1) OR &#ENTNUN).FLDTST    06/84 DBC\n&C2      SETA  13\n&#BS(14) SETC  '&LID'\n.FLDTST  AIF   (&B(13) EQ &C2).EQUATE\n&N2      LR    &#BS(13),&@&C2      LOAD FIRST BASE REGISTER\n&N2      SETC  ''\n.EQUATE  ANOP\n&W2      SETC  '&#BS(&C1)'\n         AIF   (&C1 EQ 2).ENDLA\n&C1      SETA  &C1-1\n         AIF   ('&#BS(&C1)' EQ '').ENDLA\n&N2      LA    &#BS(&C1),X'FFF'(,&W2) LOAD NEXT BASE\n&N2      SETC  ''\n         AGO   .EQUATE\n.ENDLA   #USING\n.SKIPUSE AIF   (NOT &#ENTRNT).DATACHK\n&W2      SETC  ''\n&TB      SETC  ''\n         AIF   ('&#BS(13)' NE '').GETM2\n&N2      LR    &@.14,&@.15         LOAD TEMPORARY BASE\n&N2      SETC  ''\n         PUSH  USING               SAVE BASES\n         DROP  ,                   CLEAR BASES\n         USING &N,&@.14            DECLARE TEMPORARY BASE\n&TB      SETC  '-&N.(,&@.14)'\n.GETM2   ANOP\n&N2      L     &@.0,E&#.LEN        LOAD LENGTH (MAYBE SUBPOOL TOO)\n&N2      SETC  ''\n         AIF   ('&#ENTSP' EQ '' OR '&SAVTYPE(3)' EQ '').GETM4\n&SPOOL   SETC  ''\n         MNOTE '         GETMAIN RC,LV=(0),SP=&#ENTSP'\n         GETMAIN RC,LV=(0),SP=&#ENTSP\n         AGO   .GETM5\n.GETM4   ANOP\n&SPOOL   SETC  '&#ENTSP'\n&W3      SETC  'R'\n         AIF   ('&SAVTYPE(3)' EQ '').GETM4A\n&W3      SETC  'RC'\n.GETM4A  MNOTE '         GETMAIN &W3,LV=(0)'\n         GETMAIN &W3,LV=(0)\n.GETM5   AIF   ('&#BS(13)' NE '').GETM5A\n         POP   USING               RESTURE BASES\n.GETM5A  AIF   ('&SAVTYPE(3)' EQ '').GETM7\n         LTR   &@.15,&@.15         GETMAIN OK?\n         AIF   ('&SAVTYPE(3)' EQ 'RETURN').GETM8\n         AIF   ('&SAVTYPE(3)'(1,1) EQ '(').GETM6\n         BNZ   &SAVTYPE(3)         NO, TAKE ERROR EXIT\n         AGO   .GETM7\n.GETM6   #TEST DCODE=&SAVTYPE(3)\n         BCR   7,&#TESRET(2)       NO, TAKE ERROR EXIT\n         AGO   .GETM7\n.GETM8   ANOP\n&W2      SETC  'E&#.GO'\n         BZ    &W2&TB              YES, PROCEED\n         L     &@.14,12(,&@.13)    NO, RESTORE REGISTER\n         LM    &@.0,&@.12,20(&@.13) RESTORE REGISTERS\n         MVI   12(&@.13),X'FF'     SET RETURNED SIGNEL\n         BR    &@.14               RETURN TO CALLER\n.GETM7   ANOP\n&W2      LR    &@.0,&@.1           POINT TO AREA TO CLEAR\n         L     &@.1,E&#.LEN&TB     GET LENGTH TO CLEAR\n         LR    &@.14,&@.0          SAVE AREA POINTER\n         MVCL  &@.0,&@.14          CLEAR THE AREA (R15 SET BY GETMAIN)\n         ST    &@.14,8(,&@.13)     FORWARD CHAIN THE SAVE AREAS\n         ST    &@.13,4(,&@.14)     BACK CHAIN THE SAVE AREAS\n         LM    &@.13,&@.1,8(&@.13) RESTORE REGS AND POINT TO LOWER SA\n.DATACHK AIF   (NOT &OLDBASE AND NOT &#ENTRNT AND NOT &REMOTE(5) AND NO*\n               T &LOCAL).ENDCHK\n         AIF   ('&#BS(13)' EQ '').NOUSING\n&N2      B     E&#.END             SKIP AROUND DATA AREA\n&N2      SETC  ''\n         AGO   .DFNDATA\n.NOUSING ANOP\n&N2      B     E&#.END-&N.(,&@.15) SKIP AROUND DATA AREA\n&N2      SETC  ''\n.DFNDATA ANOP                                                 08/84 DBC\n.*                                                            08/84 DBC\n         AIF   (NOT &OLDBASE).NOLDBSE                         08/84 DBC\nE&#.BSE  DC    Y(&N-&#BS(14))       OLD BASE ADDRESS          08/84 DBC\n.NOLDBSE ANOP                                                 08/84 DBC\n.*                                                            08/84 DBC\n         AIF   (NOT &#ENTRNT).NLENGTH                         08/84 DBC\n         AIF   ('&SPOOL' EQ '').NSUBPOO\n         AIF   (&ALIGND).ALIGND1\n         DS    0F                  ALIGNMENT\n&ALIGND  SETB  (1)\n.ALIGND1 ANOP\nE&#.LEN  DC    AL1(&SPOOL),AL3(&#ENTSIZ) SAVE AREA SUBPOOL AND LENGTH\n         AGO   .NLENGTH\n.NSUBPOO ANOP\nE&#.LEN  DC    A(&#ENTSIZ)         SAVE AREA LENGTH\n&ALIGND  SETB  (1)\n.NLENGTH AIF   (&#ENTRNT OR &#ENTNUN).NSVAREA                 06/84 DBC\n         AIF   (&REMOTE(1)).RMTSVPT\n         AIF   (&ALIGND).ALIGND2\n         DS    0F                  ALIGNMENT\n&ALIGND  SETB  (1)\n.ALIGND2 ANOP\n&LID     DC    (&SAVLEN)X'00'      LOCAL SAVE AREA\n         AGO   .NSVAREA\n.RMTSVPT ANOP                                                 08/84 DBC\n.*                                                            08/84 DBC\n         AIF   (NOT &REMOTE(5)).NSVAREA                       08/84 DBC\nE&#.SAP  DC    Y(&RMTNAME-&N)       PTR TO REMOTE SA          08/84 DBC\n.NSVAREA ANOP                                                 08/84 DBC\n.*                                                            08/84 DBC\n         AGO   .END                                           08/84 DBC\n.*\n.PLIGEN  AIF   ('&ESDT' EQ 'DEFAULT').PESDSET\n         AIF   (K'&N GT 0 OR '&ESDT' NE 'ENTRY').PESDOK1\n         MNOTE 4,'\"ESDTYPE=&ESDTYPE\" IS INVALID WHEN THE NAME FIELD IS'\n         MNOTE 4,'OMITTED FROM THE MACRO CALL.'\n         MNOTE 4,'\"ESDTYPE=NONE\" WILL BE USED INSTEAD.'\n&ESDT    SETC  'NONE'\n.PESDOK1 ANOP\n         AIF   ('&ESDT' EQ 'ENTRY' OR '&ESDT' EQ 'NONE' OR '&ESDT' EQ '*\n               ').PESDOK\n         MNOTE 4,'\"ESDTYPE=&ESDTYPE\" IS INVALID WHEN \"SAVTYPE=PLI\".'\n.PESDSET ANOP\n&ESDT    SETC  'ENTRY'\n         AIF   (K'&N GT 0).PESDOK2\n&ESDT    SETC  'NONE'\n.PESDOK2 AIF   ('&ESDTYPE' EQ 'DEFAULT').PESDOK\n         MNOTE 4,'\"ESDTYPE=&ESDT\" WILL BE USED INSTEAD.'\n.PESDOK  ANOP\n         AIF   ('&ESDT' NE 'ENTRY').PNOTENT\n         ENTRY &N                  MAKE NAME EXTERNALLY AVAILABLE\n.PNOTENT ANOP\n.*\n&N2      SETC  '&N'\n&A1      SETA  K'&N\n         AIF   (K'&NME EQ 0).GOTN2\n&N2      SETC  '&NME'\n&A1      SETA  K'&NME\n.GOTN2   ANOP\n&N2      SETC  ' '(1,1-(&A1-&A1/2*2)).'&N2'\n         DS    0H                  ALIGNMENT\n         DC    C'&N2'              ENTRY NAME\n         DC    AL1(&A1)            LENGTH OF NAME\n.*\n&N1      SETC  '&N'\n         AIF   (K'&N GT 0).PGOTN1\n&N1      SETC  'E&#.ENT'\n.PGOTN1  ANOP\n         USING &N1,&@.15           DCL LOCAL BASE\n&N1      STM   &@.14,&@.12,12(&@.13) SAVE CALLER'S REGISTERS\n.*\n         #TEST DCODE=&SAVTYPE(2)\n&A1      SETA  &#TESRET(1)\n&A2      SETA  120\n         AIF   (&A1 EQ 0).DSALLA\n         AIF   ('&#TESRET(2)' NE '&SAVTYPE(2)').DSALREG\n         #TEST NUM=&#TESRET(2)\n         AIF   (&#TESERR NE 0).DSALL\n&A2      SETA  &#TESRET(2)\n         AIF   (&A2 GE 4096-7).DSALL\n         AIF   (&A2 GE 120-7).DSALLA\n         MNOTE 4,'\"SAVTYPE(2)=&SAVTYPE(2)\" IS TOO SHORT A LENGTH.'\n         MNOTE 4,'THE CODE GENERATED BELOW WILL NOT FUNCTION CORRECTLY.*\n               '\n.DSALLA  ANOP\n         LA    &@.0,(&A2+7)/8*8    GET DESIRED DSA LENGTH\n         AGO   .GOTDSAL\n.DSALREG #TEST REGS=&#TESRET(2)\n         AIF   (&#TESERR NE 0).DSALLR\n         AIF   (&#TESRET(1) EQ 0).GOTLLR\n.DSALLR  LR    &@.0,&#TESRET(2)    GET DESIRED DSA LENGTH\n.GOTLLR  LA    &@.14,7             ROUND UP -\n         AR    &@.0,&@.14           TO -\n         OR    &@.0,&@.14            DOUBLE WORD -\n         XR    &@.0,&@.14             LENGTH\n         AGO   .GOTDSAL\n.DSALL   ANOP\n&LENGTH  SETB  (1)\n         L     &@.0,E&#.LEN        GET DESIRED DSA LENGTH\n.GOTDSAL ANOP\n.*\n         L     &@.1,76(,&@.13)     GET NXT AVAILABLE BLOCK POINTER\n         ALR   &@.0,&@.1           --> PAST DESIRED AREA\n         CL    &@.0,12(,&@.12)     WOULD THE ISA OVERFLOW?\n         BNH   E&#.GOT             NO, PROCEED\n         L     &@.15,116(,&@.12)   YES, --> SPECIAL HANDLER\n         DROP  &@.15               RELEASE CLOBBERED BASE\n         BALR  &@.14,&@.15         GO OBTAIN DESIRED DSA FROM ELSEWHERE\nE&#.GOT  LR    &@.14,&@.1          SAVE PTR TO NEW DSA\n         LR    &@.15,&@.0          SAVE HI-BYTE OF NAB POINTER REG\n         SRL   &@.15,24            ISSOLATE IT\n         SLL   &@.15,24            RESTORE ITS POSITION. SET MVCL\n*                                  SOURCE LENGTH TO ZERO\n         SR    &@.0,&@.1           GET LENGTH OF NEW DSA\n         LR    &@.1,&@.0           COPY FOR MVCL SINK LENGTH\n         LR    &@.0,&@.14          GET MVCL SINK POINTER\n         MVCL  &@.0,&@.14          CLEAR THE NEW DSA\n         OR    &@.0,&@.15          RESTORE HI-BYTE TO NAB POINTER REG\n         LR    &@.1,&@.0           COPY NEXT AVAILABLE BLOCK POINTER\n         L     &@.15,72(,&@.13)    GET LIBRARY WORKSPACE POINTER\n         STM   &@.15,&@.1,72(&@.14) STORE INTO OUR NEW DSA\n         ST    &@.5,88(,&@.14)     STORE PASSED PARAMETERS POINTER\n         ST    &@.13,4(,&@.14)     BACK CHAIN THE DSA\n         L     &@.1,24(,&@.13)     RESTORE PLIST POINTER\n         LR    &@.13,&@.14         --> NEW DSA (R14 PURIFIED BY MVCL)\n         MVI   0(&@.13),X'80'      SET FOR -\n         MVI   1(&@.13),X'00'       PLI -\n         MVI   86(&@.13),X'91'       ERROR -\n         MVI   87(&@.13),X'C0'        HANDLING\n.*\n&N2      SETC  ''\n         AIF   ('&#BS(13)' EQ '').PSKPUSE\n&C1      SETA  13\n         AIF   ('&BASES' NE '*').PBSEADR\n&OLDBASE SETB  (1)\n         BALR  &#BS(13),0          LOAD TEMP LOCAL BASE\n         L     &#BS(13),E&#.BSE-*(,&#BS(13)) LOAD 1ST PROGRAM BASE\n         AGO   .PEQUATE\n.PBSEADR ANOP\n&N2      SETC  'E&#.BSE'\n&#BS(14) SETC  '&N2'\n         BALR  &#BS(13),0          LOAD 1ST PROGRAM BASE\n.PEQUATE ANOP\n&W2      SETC  '&#BS(&C1)'\n&C1      SETA  &C1-1\n         AIF   (&C1 EQ 1 OR '&#BS(&C1)' EQ '').PENDLA\n&N2      LA    &#BS(&C1),X'FFF'(,&W2) LOAD NEXT PROGRAM BASE\n&N2      SETC  ''\n         AGO   .PEQUATE\n.PENDLA  #USING ,\n.PSKPUSE ANOP\n.*\n         AIF   (NOT &LENGTH AND NOT &OLDBASE).ENDCHK\n         AIF   ('&#BS(13)' NE '').PGOTBAS\n&N2      BALR  &@.15,0             LOAD TEMP BASE\n&N2      SETC  ''\n         B     E&#.END-*(,&@.15)   SKIP DATA AREA\n         AGO   .PDFNDAT\n.PGOTBAS ANOP\n&N2      B     E&#.END             SKIP DATA AREA\n&N2      SETC  ''\n.PDFNDAT AIF   (NOT &LENGTH).PNOLEN\nE&#.LEN  DC    A((&SAVTYPE(2)+7)/8*8) DESIRED DSA LENGTH\n.PNOLEN  AIF   (NOT &OLDBASE).PNOOBAS\nE&#.BSE  DC    A(&#BS(14))         OLD BASE ADDRESS\n.PNOOBAS ANOP\n.*\n.END     ANOP\nE&#.END  DS    0H\n.ENDCHK  AIF   ('&N2' EQ '').MEND\n&N2      DS    0H\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#PUT": {"ttr": 1025, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NME     #PUT  &MSG,&PFIX=,&SUBAD=,&MF=\n.*\n.*\n.*\n.* LAST CHANGE DATE - OCTOBER 18, 1983\n.*                  - MAILING ADDRESS CHANGE\n.*\n.* LAST CHANGE DATE - APRIL 21, 1981\n.*                  - MACRO NAME CHANGED FROM $PUT TO #PUT.\n.*\n.* LAST CHANGE DATE - APRIL 20, 1981\n.*                  - \"#REGS GEN=NO\" SUPPORT ADDED.\n.*\n.* LAST CHANGE DATE - JULY 18, 1980\n.*                  - INDIRECT ADDRESSING IS NOW INDICATED BY A\n.*                    TRAILING PERCENT SIGN (%) RATHER THAN A LEADING\n.*                    ONE.\n.*\n.* LAST CHANGE DATE - JANUARY 12, 1977\n.*                  - HANDLING OF THE SUBAD= OPERAND IS REWRITTEN.\n.*                  - MAILING ADDRESS CHANGE.\n.*\n.* THIS MACRO WAS WRITTEN BY DAVID B. COLE. ANY QUESTIONS CONCERNING\n.* IT MAY BE ADDRESSED TO:\n.*       RR#2 BOX 712\n.*       AFTON, VA. 22920\n.*\n         GBLA  &#TESERR\n         GBLC  &#PUTSUB\n         GBLC  &#TESRET(20)\n         LCLA  &A1\n         LCLC  &@,&C1,&N\n         AIF   ('&SUBAD' EQ '').SUBOK\n         AIF   ('&SUBAD(1)' NE '&SUBAD').SUBOK\n&#PUTSUB SETC  '&SUBAD'\n.SUBOK   AIF   ('&MF(1)' EQ 'INIT').MEND\n&N       SETC  '&NME'\n.*\n&@       SETC  '&PFIX'\n         AIF   ('&PFIX' NE '').PFIXOK\n         #TEST PFIX=\n&@       SETC  '&#TESRET(1)'\n         AGO   .DONPFIX\n.PFIXOK  #REGS &PFIX,GEN=NO\n.DONPFIX ANOP\n.*\n         AIF   ('&MSG(1)' EQ '&MSG').NOTREG\n         #TEST REGS=&MSG(1)\n         AIF   (&#TESERR NE 0).LR\n         AIF   (&#TESRET(1) EQ 1).BAL\n.LR      ANOP\n&N       LR    &@.1,&MSG(1)        --> MESSAGE LENGTH FIELD\n&N       SETC  ''\n         AGO   .BAL\n.NOTREG  AIF   ('&MSG' EQ '').BAL\n         AIF   ('&MSG'(K'&MSG,1) EQ '%').MSGINDR\n&N       LA    &@.1,&MSG-1         --> MESSAGE LENGTH FIELD\n         AGO   .MSGOK\n.MSGINDR ANOP\n&C1      SETC  '&MSG'(1,K'&MSG-1)\n&N       L     &@.1,=A(&C1-1)      --> MESSAGE LENGTH FIELD\n.MSGOK   ANOP\n&N       SETC  ''\n.BAL     AIF   ('&SUBAD(1)' NE '&SUBAD').BALR\n         AIF   ('&#PUTSUB'(1,1) EQ '%').BALINDR\n&N       BAL   &@.14,&#PUTSUB      GO DISPLAY THE MESSAGE\n         AGO   .MEND\n.BALR    ANOP\n&N       BALR  &@.14,&SUBAD(1)     GO DISPLAY THE MESSAGE\n         AGO   .MEND\n.BALINDR ANOP\n&A1      SETA  0\n.LP1     ANOP\n&A1      SETA  &A1+1\n         AIF   ('&#PUTSUB'(1,&A1) NE '&#PUTSUB').LP1\n&C1      SETC  '&#PUTSUB'(2,&A1-1)\n&N       L     &@.15,=A(&C1)       --> MESSAGE PRINTING ROUTINE\n         BALR  &@.14,&@.15         GO DISPLAY THE MESSAGE\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#REGS": {"ttr": 1028, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         #REGS &GEN=YES\n.*\n.*\n.*                                                            09/84 DBC\n.* LAST CHANGE DATE - SEPTEMBER 11, 1984                      09/84 DBC\n.*                  - ADDED SUPPORT FOR PL/S STYLE REGISTER   09/84 DBC\n.*                    NAMES (@00, @01, ---, @15).             09/84 DBC\n.*                  - ATTEMPTS TO MULTIPLY DEFINE THE SAME    09/84 DBC\n.*                    NAME TO THE SAME VALUE WILL NOW BE      09/84 DBC\n.*                    SUPPRESSED WITHOUT ERROR.               09/84 DBC\n.*\n.* LAST CHANGE DATE - OCTOBER 18, 1983\n.*                  - MAILING ADDRESS CHANGE\n.*\n.* LAST CHANGE DATE - APRIL 21, 1981\n.*                  - MACRO NAME CHANGED FROM $REGS TO #REGS\n.*\n.* LAST CHANGE DATE - APRIL 20, 1981\n.*                  - SUPPORT FOR THE \"GEN={YES|NO}\" OPERAND IS ADDED.\n.*\n.* LAST CHANGE DATE - DECEMBER 5, 1977\n.*                  - SINGLE REGISTER EQUATES NOW LINE UP CORRECTLY IN\n.*                    THE LISTING.\n.*\n.* LAST CHANGE DATE - FEBRUARY 2, 1977\n.*                  - MAILING ADDRESS CHANGE.\n.*\n.* LAST CHANGE DATE - APRIL 1, 1975\n.*\n.* THIS MACRO WAS WRITTEN BY DAVID B. COLE.  ANY QUESTIONS CONCERNING\n.* IT MAY BE ADDRESSED TO:\n.*       RR#2 BOX 712\n.*       AFTON, VA. 22920\n.*\n.*\n.*\n.*   THE #REGS MACRO HAS TWO FUNCTIONS. ITS PRIMARY\n.* PURPOSE IS TO PROVIDE A SIMPLE MEANS OF DEFINING SETS\n.* OF REGISTER NAME EQUATES. ITS SECONDARY PURPOSE IS TO\n.* CREATE AN INTERNAL TABLE OF ALL REGISTER NAMES\n.* COUPLED WITH THEIR NUMERIC VALUES. THIS TABLE IS THEN\n.* MADE AVAILABLE TO CERTAIN OTHER MACROS (E.G. #ENTER\n.* AND #EXIT) SO THAT THEY CAN DETERMINE (IF NECESSARY)\n.* THE VALUES OF ANY REGISTER NAMES THAT MIGHT BE PASSED\n.* TO THEM AS OPERANDS AND SO THAT THEY CAN USE REGISTER\n.* NAME EQUATES INSTEAD OF REGISTER NUMBERS IN THE CODE\n.* THAT THEY GENERATE. THIS IS SO THAT ALL REFERENCES TO\n.* REGISTERS WILL BE INDICATED IN THE ASSEMBLER'S CROSS\n.* REFERENCE LISTING.\n.*                                                            09/84 DBC\n.*   THE #REGS MACRO CAN BE USED ANY NUMBER OF TIMES IN\n.* AN ASSEMBLY. EACH TIME THAT IT IS USED, IT CAN BE\n.* GIVEN ANY NUMBER OF POSITIONAL OPERANDS. EACH OPERAND      09/84 DBC\n.* CAN BE EITHER A SINGLE TERM OR A SUB-LIST OF TWO\n.* TERMS.\n.*                                                            09/84 DBC\n.*   IF AN OPERAND IS A SUB-LIST OF TWO TERMS, THEN THE\n.* #REGS MACRO TREATS IT AS A REQUEST TO DEFINE A SINGLE\n.* REGISTER NAME AND IT GENERATES A STATEMENT OF THE\n.* FORM: \" TERM1 EQU TERM2 \". THE FIRST TERM MUST BE ANY\n.* VALID NAME NOT PREVIOUSLY DEFINED. THE SECOND TERM\n.* MUST BE ANY SELF-DEFINING TERM OR ANY REGISTER NAME\n.* THAT HAS BEEN PREVIOUSLY DEFINED BY THIS OR A\n.* PREVIOUS #REGS MACRO. IT SHOULD NOT BE AN EXPRESSION,\n.* AND IT SHOULD NOT BE ANY NAME NOT PREVIOUSLY DEFINED.\n.* THE VALUE OF THE SECOND TERM SHOULD FALL IN THE RANGE\n.* OF 0 THROUGH 15. IF THE SECOND TERM FITS THESE\n.* REQUIREMENTS, THEN THE REGISTER NAME IS SAVED IN AN\n.* INTERNAL TABLE FOR USE BY OTHER MACROS.\n.*                                                            09/84 DBC\n.*   IF AN OPERAND IS ONLY A SINGLE TERM, THEN THE MACRO\n.* TREATS IT AS A REQUEST TO DEFINE A FULL SET OF\n.* REGISTER NAME EQUATES WITH THE GIVEN TERM USED AS THE\n.* REGISTER NAME PREFIX. AS AN EXAMPLE, ASSUME THAT THE\n.* OPERAND IS \"GPR\". IN THIS CASE, THE #REGS MACRO WILL\n.* GENERATE EQUATES DEFINING GPR0, GPR1, ---, GPR15 AND\n.* GPRA, GPRB, ---, GPRF (EQUAVALENT TO GPR10, GPR11,\n.* ---, GPR15). IN ADDITION, THE GENERATED REGISTER\n.* NAMES ARE SAVED IN AN INTERNAL TABLE FOR USE BY OTHER\n.* MACROS.\n.*                                                            09/84 DBC\n.*   A SPECIAL CASE. IF THE SINGLE TERM IS AN \"AT SIGN\"       09/84 DBC\n.* (@), THEN THEN THE GENERATED NAMES WILL BE @00, @01,       09/84 DBC\n.* ---, @15. THIS CONFORMS TO PL/S CONVENTIONS.               09/84 DBC\n.*                                                            09/84 DBC\n.*   IF #REGS IS CALLED WITHOUT OPERANDS, THEN IT IS\n.* TREATED AS A REQUEST TO GENERATE A FULL SET OF\n.* EQUATES USING \"R\" AS THE PREFIX.\n.*\n.*\n.*\n.* GEN={YES|NO}    (DEFAULT IS GEN=YES)\n.*       THIS CONTROLS WHETHER OR NOT THIS MACRO ACTUALLY GENERATES THE\n.*       'EQU' STATEMENTS THAT CREATE THE DESIRED REGISTER NAMES. IF\n.*       \"GEN=NO\" IS GIVEN, THEN PRESUMEDLY THE DESIRED NAMES ARE\n.*       GENERATED ELSEWHERE. IN THIS CASE THE ONLY FUNCTION PERFORMED\n.*       BY THIS MACRO IS TO UPDATE INTERNAL TABLES.\n.*\n.*\n.*\n.* INNER MACROS USED - #TEST\n.*\n         GBLA  &#REGVAL(255)\n         GBLA  &#TESERR\n         GBLC  &#REGNME(255)\n         GBLC  &#TESRET(20)\n         LCLA  &ARG,&CTR,&NEXT,&A1\n         LCLB  &B1\n         LCLC  &LPFX,&C1\n&NEXT    SETA  0\n.LP1     AIF   (&NEXT GE 255).END1\n&NEXT    SETA  &NEXT+1\n         AIF   ('&#REGNME(&NEXT)' NE '').LP1\n&NEXT    SETA  &NEXT-1\n.END1    ANOP\n&ARG     SETA  0\n.LP2     AIF   (&ARG GE N'&SYSLIST).DONE\n&ARG     SETA  &ARG+1\n         AIF   (N'&SYSLIST(&ARG) EQ 0).LP2\n         AIF   (&NEXT LT 255).NOTFULL\n         MNOTE 4,'THE REGISTER NAME SAVE TABLE IS FULL.'\n         MNOTE 4,'THE MAXIMUM CAPACITY IS 255 ENTRIES.'\n.NOTFULL ANOP\n&C1      SETC  '&SYSLIST(&ARG,1)'\n         AIF   (N'&SYSLIST(&ARG) GE 2).ONEREG\n.NULL    ANOP\n&B1      SETB  (1)\n         #TEST PFIX=\n&LPFX    SETC  '&#TESRET(1)'\n.*                                                            09/84 DBC\n         AIF   ('&C1' NE '@').NOT@                            09/84 DBC\n&CTR     SETA  0-1                                            09/84 DBC\n.LP@     AIF   (&CTR EQ 15).END@                              09/84 DBC\n&CTR     SETA  &CTR+1                                         09/84 DBC\n&C1      SETC  '0&CTR'                                        09/84 DBC\n&C1      SETC  '&C1'(K'&C1-1,2)                               09/84 DBC\n         #REGS (@&C1,&LPFX&CTR)                               09/84 DBC\n         AGO   .LP@                                           09/84 DBC\n.END@    AIF   (&NEXT GE 255).LP2                             09/84 DBC\n&NEXT    SETA  &NEXT+1                                        09/84 DBC\n         AIF   ('&#REGNME(&NEXT)' NE '').END@                 09/84 DBC\n&NEXT    SETA  &NEXT-1                                        09/84 DBC\n         AGO   .LP2                                           09/84 DBC\n.NOT@    ANOP                                                 09/84 DBC\n.*                                                            09/84 DBC\n&CTR     SETA  0\n.LP2A    AIF   (&CTR GE &NEXT).PXSAVE\n&CTR     SETA  &CTR+1\n         AIF   (&#REGVAL(&CTR) LT 16 OR '&#REGNME(&CTR)' NE '&C1').LP2A\n         AGO   .LP2                                           09/84 DBC\n.PXSAVE  AIF   (&NEXT GE 255).NOSAVE1                         09/84 DBC\n&NEXT    SETA  &NEXT+1\n&#REGNME(&NEXT) SETC '&C1'\n&#REGVAL(&NEXT) SETA 16\n.NOSAVE1 AIF   ('&GEN(1)'(1,1) NE 'Y').LP2\n&CTR     SETA  0\n.LP3     AIF   (&CTR GT 15).HEX\n&C1&CTR  EQU   &LPFX&CTR\n&CTR     SETA  &CTR+1\n         AGO   .LP3\n.HEX     ANOP\n&C1.A    EQU   &C1.10\n&C1.B    EQU   &C1.11\n&C1.C    EQU   &C1.12\n&C1.D    EQU   &C1.13\n&C1.E    EQU   &C1.14\n&C1.F    EQU   &C1.15\n         AGO   .LP2\n.ONEREG  ANOP\n&B1      SETB  (1)\n         AIF   (N'&SYSLIST(&ARG) EQ 2).NOXCESS\n         MNOTE 4,'\"&SYSLIST(&ARG)\" CONTAINS EXCESS INFORMATION.'\n         MNOTE 4,'THE EXCESS WILL BE IGNORED.'\n.NOXCESS #TEST REGS=&SYSLIST(&ARG,2)\n         AIF   (&#TESERR EQ 0).REGOK\n         MNOTE 4,'THE VALUE OF \"&SYSLIST(&ARG,2)\" IS NOT DETERMINABLE.'\n         AGO   .REGEQU\n.REGOK   ANOP                                                 09/84 DBC\n&A1      SETA  &#TESRET(1)\n&CTR     SETA  0\n.LP3A    AIF   (&CTR GE &NEXT).RGSAVE\n&CTR     SETA  &CTR+1\n         AIF   (&#REGVAL(&CTR) NE &A1 OR '&#REGNME(&CTR)' NE '&C1').LP3*\n               A\n         AGO   .LP2                                           09/84 DBC\n.RGSAVE  AIF   (&NEXT GE 255).REGEQU                          09/84 DBC\n&NEXT    SETA  &NEXT+1\n&#REGNME(&NEXT) SETC '&C1'\n&#REGVAL(&NEXT) SETA &A1\n.REGEQU  AIF   ('&GEN(1)'(1,1) NE 'Y').LP2\n&C1      EQU   &SYSLIST(&ARG,2)\n         AGO   .LP2\n.DONE    ANOP\n&C1      SETC  'R'\n         AIF   (NOT &B1).NULL\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#SORT": {"ttr": 1032, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NME     #SORT &SEQ,&PFIX=,&SVID=,&CMPRID=\n.*\n.*\n.*\n.* LAST CHANGE DATE - OCTOBER 18, 1983\n.*                  - MAILING ADDRESS CHANGE\n.*\n.* LAST CHANGE DATE - APRIL 21, 1981\n.*                  - MACRO NAME CHANGED FROM $SORT TO #SORT.\n.*\n.* LAST CHANGE DATE - APRIL 20, 1981\n.*                  - \"#REGS GEN=NO\" SUPPORT ADDED.\n.*\n.* LAST CHANGE DATE - SEPTEMBER 12, 1978\n.*                  - THE SORT ROUTINE IS NOW REENTRANT.\n.*                  - THE LINKAGE FROM A COMPARE ROUTINE IS DIFFERENT\n.*                    IF THE COMPARE ROUTINE ALSO PERFORMS THE\n.*                    EXCHANGE.\n.*\n.* LAST CHANGE DATE - FEBRUARY 2, 1977\n.*                  - MAILING ADDRESS CHANGE.\n.*\n.* LAST CHANGE DATE - OCTOBER 28, 1975\n.*\n.* THIS MACRO WAS WRITTEN BY DAVID B. COLE.  ANY QUESTIONS CONCERNING\n.* IT MAY BE ADDRESSED TO:\n.*       RR#2 BOX 712\n.*       AFTON, VA. 22920\n.*\n.*\n.*\n.*   THIS MACRO GENERATES A SUBROUTINE THAT SORTS A LIST OF ITEMS USING\n.* THE INTERNAL SORTING TECHNIQUE KNOWN AS THE \"SHELL SORT\".\n.*\n.*   THE SORT SUBROUTINE REQUIRES THE FOLLOWING INPUTS:\n.*       - REGISTER 14 POINTS TO THE RETURN ADDRESS;\n.*       - REGISTER 15 CONTAINS THE LENGTH (IN BYTES) OF THE LIST TO BE\n.*         SORTED;\n.*       - REGISTER 0 CONTAINS THE LENGTH (IN BYTES) OF EACH ENTRY IN\n.*         THE LIST;\n.*       - REGISTER 1 POINTS TO THE START OF THE LIST.\n.*\n.*   ON OUTPUT THE LIST DESCRIBED BY THE INPUT PARAMETERS IS SORTED IN\n.* EITHER ASCENDING OR DESCENDING COALATING SEQUENCE (DEPENDING UPON\n.* THE MACRO CALL). ALL REGISTERS ARE RESTORED.\n.*\n.*   THE SORT SUBROUTINE IS REENTRANT.\n.*\n.*   THE NAME FIELD\n.* THIS FIELD IS OPTIONAL. IT CAN BE USED TO DEFINE BOTH THE NAME OF\n.* THE SUBROUTINE AND THE PREFIX USED IN ALL GENERATED STATEMENT\n.* LABELS. IF OMITTED, THE THE CHARACTERS \"SORT\" WILL BE USED. IF\n.* GIVEN, THEN NO MORE THAN FOUR CHARACTERS SHOULD BE SPECIFIED.\n.*\n.*   THE FIRST POSITIONAL OPERAND\n.* THIS FIELD IS OPTIONAL. IT CAN BE USED TO SPECIFY WHETHER THE LIST\n.* IS TO BE SORTED IN ASCENDING OT DESCENDING ORDER. IF OMITTED, THEN\n.* ASCENDING ORDER IS ASSUMED. IF GIVEN, THEN IT SHOULD BE EITHER \"A\"\n.* OR \"D\".\n.*\n.*   THE PFIX= OPERAND\n.* THE #SORT MACRO ATTEMPTS TO USE REGISTER EQUATES IN ITS EXPANSION\n.* WHEN REFERING TO REGISTERS. THIS IS SO THAT THE USE OF THE REGISTERS\n.* WILL BE INDICATED IN THE CROSS REFERENCE LISTING. THE PFIX= OPERAND\n.* CAN BE USED TO CONTROL THE SET OF EQUATES USED. FOR EXAMPLE, IF\n.* \"PFIX=GPR\" IS SPECIFIED, THEN \"GPR1\" WILL BE USED WHENEVER THE\n.* EXPANSION REFERS TO REGISTER 1.\n.*   IF THE PFIX= OPERAND IS OMITTED, THEN THE SET OF EQUATES DEFINED\n.* BY THE FIRST PRIOR #REGS MACRO WILL BE USED. IF THERE IS NO PRIOR\n.* #REGS MACRO, THEN NO EQUATES WILL BE USED.\n.*\n.*   THE CMPRID= OPERAND\n.* WHEN THE CMPRID= OPERAND IS OMITTED, THEN FOR SORTING PURPOSES A CLC\n.* INSTRUCTION IS USED TO COMPARE THE ENTIRETY OF EACH LIST ENTRY. IF\n.* THIS IS NOT ACCEPTABLE, THEN THE CMPRID= OPERAND CAN BE USED TO\n.* INDICATE THAT ENTRY COMPARISON IS TO BE DONE VIA SUBROUTINE CALL. IF\n.* \"CMPRID=0\" IS GIVEN, THEN THE PROGRAMMER MUST PRELOAD THE ADDRESS OF\n.* THE COMPARE SUBROUTINE INTO THE ADDRESS LABELLED \"SORTCMPR\". ON THE\n.* OTHER HAND, IF CMPRID= IS SET EQUAL TO SOMETHING OTHER THAN 0, THEN\n.* THE GIVEN VALUE IS USED EITHER AS THE NAME OF THE SUBROUTINE, OR AS\n.* A REGISTER CONTAINING A POINTER TO THE SUBROUTINE.\n.*   ON ENTRY TO THE COMPARE ROUTINE, R6 AND R7 POINT TO THE TWO LIST\n.* ENTRIES TO BE COMPARED. THE ENTRY POINTED TO BY R6 SEQUENTIALLY\n.* PRECEEDS THE ONE POINTED TO BY R7. R14 POINTS TO THE RETURN ADDRESS.\n.*   UPON RETURN, THE COMPARE ROUTINE MUST SET THE CONDITION CODE AS\n.* FOLLOWS:\n.*       - CC=0 (EQUAL) MEANS THAT THE TWO LIST ENTRIES ARE EQUAL IN\n.*         VALUE AND SHOULD NOT BE EXCHANGED.\n.*       - CC=1 (LOW) MEANS THAT THE FIRST LIST ENTRY HAS A LOWER VALUE\n.*         THAN THE SECOND. WHETHER OR NOT THEY ARE EXCHANGED DEPENDS\n.*         UPON WHETHER OR NOT THIS IS AN ASCENDING OR DESCENDING ORDER\n.*         SORT.\n.*       - CC=2 (HIGH) MEANS THAT THE FIRST LIST ENTRY HAS A HIGHER\n.*         VALUE THAN THE SECOND. WHETHER OR NOT THEY ARE EXCHANGED\n.*         DEPENDS UPON WHETHER OR NOT THIS IS AN ASCENDING OR\n.*         DESCENDING ORDER SORT.\n.*       - CC=3 (OVERFLOW) MEANDS THAT THE TWO ENTRIES WERE OUT OF\n.*         ORDER AND HAVE ALREADY BEEN EXCHANGED BY THE COMPARE\n.*         ROUTINE. THIS RETURN SHOULD BE USED IF THE NATURE OF THE\n.*         LIST ENTRIES IS SUCH THAT THE EXCHANGE CODE GENERATED BY\n.*         THIS MACRO WOULD FAIL.\n.*   THE COMPARE ROUTINE MUST NOT ALTER REGISTERS 14 THROUGH 7. ANY OF\n.* THE REGISTERS 8 THROUGH 13 (EXCEPTING THOSE THAT ARE USED AS PROGRAM\n.* BASES) MAY BE USED FREELY SINCE THE SORT ROUTINE RESTORES ALL\n.* REGISTERS WHEN IT IS FINISHED.\n.*\n.*   THE SVID= OPERAND\n.* USE THIS OPERAND TO SPECIFY THE NAME OF A REGISTER SAVE AREA. IF\n.* OMITTED, THEN THE MACRO WILL GENERATE A LOCAL SAVE AREA.\n.*   IF THE CMPRID= OPERAND IS GIVEN, THEN THE SAVE AREA MUST BE 16\n.* WORDS LONG; OTHERWISE, IT NEED BE ONLY 10 WORDS LONG (FOR REGISTERS\n.* 14 THROUGH 7).\n.*\n.*\n.*\n.* INNER MACROS USED - #REGS #TEST\n.*\n.*\n.*\n         GBLA  &#TESERR\n         GBLC  &#TESRET(20)\n         LCLA  &SAVESZ,&SL\n         LCLC  &N,&R,&SAVEA\n&N       SETC  'SORT'\n         AIF   (K'&NME EQ 0).GOTNME\n&N       SETC  '&NME'\n.GOTNME  ANOP\n.*\n&R       SETC  '&PFIX'\n         AIF   (K'&PFIX NE 0).GOTPFIX\n         #TEST PFIX=\n&R       SETC  '&#TESRET(1)'\n         AGO   .DONPFIX\n.GOTPFIX #REGS &PFIX,GEN=NO\n.DONPFIX ANOP\n.*\n         AIF   ('&SEQ' EQ 'D').DCNDCMT\n* ASCENDING ORDER SORT ROUTINE\n         AGO   .CMT2\n.DCNDCMT ANOP\n* DESCENDING ORDER SORT ROUTINE\n.CMT2    ANOP\n&SAVESZ  SETA  10\n&SL      SETA  7\n         AIF   (K'&CMPRID EQ 0).NOCMPR1\n&SAVESZ  SETA  16\n&SL      SETA  13\n* WITH A CALLER PROVIDED SUBROUTINE FOR ENTRY COMPARISON\n.NOCMPR1 SPACE 1\n* SORT ROUTINE INPUTS:\n*        - R14 POINTS TO THE RETURN ADDRESS\n*        - R15 CONTAINS THE LENGTH OF THE LIST (IN BYTES)\n*        - R0 CONTAINS THE LENGTH OF EACH LIST ENTRY (IN BYTES)\n*        - R1 POINTS TO THE START OF THE LIST\n         AIF   (K'&CMPRID EQ 0).NOCMPR2\n         SPACE 1\n* COMPARE ROUTINE INPUTS:\n*        - R6 AND R7 POINT TO THE TWO LIST ENTRIES TO BE COMPARED. THE\n*          ENTRY POINTED TO BY R6 SEQUENTIALLY PRECEEDS THE ONE POINTED\n*          TO BY R7.\n*        - R14 POINTS TO A RETURN ADDRESS.\n*        - R14 THROUGH R7 CONTAIN DATA CRITICAL TO THE SORT ROUTINE.\n*          THEY MUST NOT BE ALTERED BY THE COMPARE ROUTINE.\n         SPACE 1\n* COMPARE ROUTINE OUTPUTS:\n*        - CC=0 (EQUAL) MEANS THAT THE TWO LIST ENTRIES HAVE EQUAL\n*          VALUES. THEY SHOULD NOT BE EXCHANGED.\n*        - CC=1 (LOW) MEANS THAT THE FIRST ENTRY HAS A VALUE LOWER THAN\n*          THE SECOND. IF THIS IS AN ASCENDING SORT, THEN THEY WILL NOT\n*          BE EXCHANGED.\n*        - CC=2 (HIGH) MEANS THAT THE FIRST ENTRY HAS A VALUE HIGHER\n*          THAN THE SECOND. IF THIS IS AN ASCENDING SORT, THEN THEY\n*          WILL BE EXCHANGED.\n*        - CC=3 (OVERFLOW) MEANS THAT THE TWO ENTRIES WERE OUT OF ORDER\n*          AND THAT THEY HAVE NOW BEEN EXCHANGED BY THE COMPARE\n*          ROUTINE.\n.NOCMPR2 SPACE 1\n&SAVEA   SETC  '&N.SAVE'\n         AIF   (K'&SVID EQ 0).GOTSAVE\n&SAVEA   SETC  '&SVID'\n.GOTSAVE ANOP\n&N       STM   &R.14,&R.&SL,&SAVEA SAVE ALL WORK REGSITERS\n         AIF   ('&CMPRID' EQ '').GOTCMPR\n         AIF   ('&CMPRID' NE '0').CMPRN0\n         L     &R.15,&N.CMPR       --> CALLER PROVIDED COMPARE ROUTINE\n         AGO   .GOTCMPR\n.CMPRN0  AIF   ('&CMPRID' NE '&CMPRID(1)').CMPRREG\n         LA    &R.15,&CMPRID       --> CALLER PROVIDED COMPARE ROUTINE\n         AGO   .GOTCMPR\n.CMPRREG #TEST REGS=&CMPRID(1)\n         AIF   (&#TESERR NE 0).CMPRROK\n         AIF   (&#TESRET(1) GT 1 AND &#TESRET(1) LT 14).CMPRROK\n         MNOTE 8,'ERROR - CMPRID= MAY NOT IDENTIFY REGISTER &$TESRET(1)*\n               '\n.CMPRROK LR    &R.15,&CMPRID(1)    --> CALLER PROVIDED COMPARE ROUTINE\n.GOTCMPR LR    &R.4,&R.0           GET THE ENTRY LENGTH\n         LR    &R.1,&R.0           GET ENTRY LENGTH FOR 'EX'\n         BCTR  &R.1,0              GET THE ENTRY'S MACHINE LENGTH\n         LR    &R.2,&R.4           GET ENTRY LENGTH\n&N.DUBL  AR    &R.2,&R.2           DOUBLE IT\n         C     &R.2,&SAVEA+4       GREATER THAN LIST LENGTH YET?\n         BNH   &N.DUBL             NO, GO RE-DOUBLE\n         SR    &R.2,&R.4           YES, GOT INITIAL INCREMENT\n&N.LP1   SR    &R.2,&R.4           SUBTRACT ONE AND -\n         BZ    &N.RET               (ALL DONE; GO RESTORE AND RETURN)\n         SRL   &R.2,1               TRUNCATE DEVIDE BY TWO\n         L     &R.5,&SAVEA+4       GET THE LENGTH OF THE LIST\n         SR    &R.5,&R.2           SUBTRACT OFF THE INCREMENT\n         LR    &R.3,&R.4           GET THE ENTRY LENGTH\n&N.LP2   LR    &R.0,&R.4           GET THE ENTRY LENGTH AGAIN\n&N.LP3   LR    &R.6,&R.3           DEVELOPE -\n         A     &R.6,&SAVEA+12       THE FIRST -\n         SR    &R.6,&R.0             COMPARE ADDRESS\n         LA    &R.7,0(&R.2,&R.6)   DEVELOPE THE SECOND ADDRESS\n         AIF   ('&CMPRID' EQ '').NOCMPR6\n         BALR  &R.14,&R.15         LINK TO CALLER'S COMPARE ROUTINE\n         BO    &N.NLP3             OUT OF ORDER BUT NOW EXCHANGED\n         AGO   .NOCMPR7\n.NOCMPR6 EX    &R.1,&N.CLC         COMPARE THE TWO ENTRIES\n.NOCMPR7 AIF   ('&SEQ' EQ 'D').DESCEND\n         BNH   &N.NLP2             RIGHT ORDER (ASCENDING); DON'T XCHNG\n         AGO   .ASCEND\n.DESCEND BNL   &N.NLP2             RIGHT ORDER (DESCENDING); DON'T XCHG\n.ASCEND  EX    &R.1,&N.XC1         WRONG -\n         EX    &R.1,&N.XC2          ORDER; -\n         EX    &R.1,&N.XC1           EXCHANGE\n&N.NLP3  BXLE  &R.0,&R.2,&N.LP3    LOOP TO SHIFT THE BUBBLE\n&N.NLP2  BXLE  &R.3,&R.4,&N.LP2    ADVANCE ONE INCREMENT\n         B     &N.LP1              LOOP TO DECREASE THE INCREMENT\n&N.RET   LM    &R.14,&R.&SL,&SAVEA SORT DONE; RESTORE REGS\n         BR    &R.14               RETURN TO CALLER\n         SPACE 1\n         AIF   ('&CMPRID' NE '').DATA1\n&N.CLC   CLC   0(*-*,&R.6),0(&R.7) (EXECUTED)\n.DATA1   ANOP\n&N.XC1   XC    0(*-*,&R.6),0(&R.7) (EXECUTED)\n&N.XC2   XC    0(*-*,&R.7),0(&R.6) (EXECUTED)\n         AIF   ('&CMPRID' NE '0' AND '&SVID' NE '').DATA2\n         SPACE 1\n.DATA2   AIF   ('&CMPRID' NE '0').DATA3\n&N.CMPR  DC    A(*-*)              THE POINTER TO THE COMPARE ROUTINE\n*                                  MUST BE FILLED IN PRIOR TO THE FIRST\n*                                  CALL TO THE SORT ROUTINE.\n.DATA3   AIF   ('&SVID' NE '').DATA4\n&N.SAVE  DC    &SAVESZ.A(0)        LOCAL SAVE AREA\n.DATA4   MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#TEST": {"ttr": 1037, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "CHKPOINT": {"ttr": 1291, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "D00138C, /* OK FOR SAMMS SAC0 CHECKPOINT PER WAITZMAN - 31JAN86 */\nIPO370 , /* NO CHECKPOINT BUT WE WANT THESE OFFLINE ANYWAY - CRUZAN */\nDLB85A , /* NO CHECKPOINT BUT WE WANT THESE OFFLINE ANYWAY - CRUZAN */\nDLB85C , /* NO CHECKPOINT BUT WE WANT THESE OFFLINE ANYWAY - CRUZAN */\nRIM85C , /* NO CHECKPOINT BUT WE WANT THESE OFFLINE ANYWAY - CRUZAN */\nRES1N5   /* NO CHECKPOINT BUT WE WANT THESE OFFLINE ANYWAY - CRUZAN */\n/*\n/*    THIS MEMBER DETERMINES IF A VOLUME WILL BE TREATED AS IF IT\n/*  CONTAINS AN O/S CHECKPOINT DATASET.\n/*  THE FORMAT IS:\n/*                VVVVVVC\n/*  WHERE VVVVVV IS THE VOLUME SERIAL NUMBER AND C DESIG-\n/*  NATES THIS AS A VOLUME NATIVE TO THE IPLING SYSTEM.\n/*\n/*    THE SPECIFIED VOLUME WILL IN ALL CASES BE MARKED AS\n/*  NON-SHARED.  IF THE VOLUME SERIAL IS NOT FOLLOWED BY\n/*  THE LETTER \"C\", IT WILL ALSO BE KNOCKED OFF-LINE AND\n/*  ASSUMED TO BE A VOLUME CONTAINING A CHECKPOINT DATA\n/*  SET FOR ANOTHER SYSTEM. NO CHECK IS MADE TO SEE IF IT\n/*  REALLY HAS A CHECKPOINT DATASET, THOUGH.\n/*\n/*  RULES FOR CODING:\n/*    ONE VOLUME SPECIFICATION PER LINE.\n/*    SEQUENCE OF NATIVE VS. FOREIGN IS NOT MATERIAL.\n/*    THE NATIVE SYSTEM RESIDENT VOLUME CANNOT BE CODED,\n/*    THE NATIVE MASTER CATALOG VOLUME CANNOT BE CODED,\n/*    A VOLUME WITH AN ACTIVE PAGE/SWAP DATASET CANNOT BE CODED,\n/*    NATIVE CHECKPOINT INDICATED BY CODING A \"C\" IN COLUMN SEVEN,\n/*    FOREIGN CHECKPOINT INDICATED BY CODING A BLANK IN COLUMN SEVEN,\n/*    CONTINUATIONS INDICATED BY CODING A COMMA IN COLUMN EIGHT,\n/*    THE LIST IS TERMINATED BY CODING A BLANK IN COLUMN EIGHT,\n/*    A MAXIMUM OF 36 VOLUMES CAN BE SPECIFIED.\n/*\n/*                          - M CRUZAN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CMD1": {"ttr": 1537, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//DSACTASK EXEC PGM=DSACTASK,PARM=01,TIME=1440,ACCT=0991\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLACMD00": {"ttr": 1539, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//NTS0991A JOB (0991,TSG),'* DLACMD00 *',MSGCLASS=X,CLASS=6,\n//* NOTIFY=NTS0991,\n//  MSGLEVEL=(1,1)\n//IEFUTL1 EXEC PGM=IEV90,\n//        PARM='XREF(SHORT),LIST,LINECOUNT(55),DECK'\n//SYSPRINT DD SYSOUT=*\n//SYSPUNCH DD DISP=SHR,DSN=LOCL.USEROBJ(DLACMD00)\n//SYSLIB   DD DISP=SHR,DSN=LOCL.USERSRC\n//         DD DISP=SHR,DSN=SYS1.SMPMTS\n//         DD DISP=SHR,DSN=SYS1.MACLIB\n//SYSUT1   DD UNIT=WORK,SPACE=(CYL,(1,1))\n//SYSUT2   DD UNIT=WORK,SPACE=(CYL,(1,1))\n//SYSUT3   DD UNIT=WORK,SPACE=(CYL,(1,1))\n//SYSIN    DD *\nDLACMD00 CSECT\n***********************************************************************\n*                                                                     *\n* THIS TABLE MUST BE AUTHORIZED AND LINKEDITED RE-ENTRANT BECAUSE IT  *\n* WILL BE LOADED INTO CSA.                                            *\n*                                                                     *\n* MACRO: IEECVENT, MAPPED BY IEECVUSR.                                *\n*                                                                     *\n* PARAMETERS: MSG=  UP TO 128 CHARACTERS FROM UCM BUFFER TO LOOK FOR. *\n*                   BE AWARE THAT THE BUFFER CAN HAVE LEADING BLANKS. *\n*                                                                     *\n*             ACT=  NULL, ROLL, NOROLL, NOROLLD, SUPPRESS, REPLY,     *\n*                   ACTION AND END.                                   *\n*                   WHAT ACTION TO TAKE ON A HIT.  \"NULL\" CREATES A   *\n*                   DUMMY ENTRY. \"END\" CREATES A TERMINATING ENTRY.   *\n*                   IF ACT=END, IT CAN BE THE ONLY PARAMETER. IF      *\n*                   ACT=ACTION OR ACT=REPLY, DO= IS REQUIRED.         *\n*                                                                     *\n*             DO=   VALID ONLY FOR ACT=ACTION AND ACT=REPLY. THIS     *\n*                   SPECIFIES THE ACTION TO TAKE ON A HIT.            *\n*                                                                     *\n* MSG= SHOULD BE CODED AS UNAMBIGUOUSLY AS POSSIBLE. THE TABLE SEARCH *\n* IS GENERIC UP TO THE 128 MAXIMUM UCB TEXT BUFFER LIMIT PRESENTED TO *\n* IEECVXIT USER EXIT IN IGC0003E. TO VERIFY LEADING BLANKS, THE COL-  *\n* LUMNAR ALIGNMENT IN SYSLOG SHOULD BE COMPARED AGAINST A KNOWN MES-  *\n* SAGE ID.                                                            *\n*                                                                     *\n* NOTE: NOROLL AND NOROLLD ARE THE SAME EXCEPT THAT NOROLLD ALSO      *\n* SETS DESCRIPTOR CODE 7 WHICH FORCES MESSAGE DELETION WHEN THE       *\n* INVOKING TASK OR ADDRESS SPACE TERMINATES. WHY WAKE THE OPERATOR    *\n* UP JUST TO DOM A MESSAGE.                                           *\n*                                                                     *\n*                        MARV CRUZAN                                  *\n*                        DEFENSE LOGISTICS AGENCY                     *\n*                        DLA SYSTEMS AUTOMATION CENTER                *\n*                        DSAC-TSG                                     *\n*                        P O BOX P1605                                *\n*                        COLUMBUS, OH  43216-5002                     *\n*                        (614) 238-9409                               *\n*                                                                     *\n***********************************************************************\n          TITLE 'DLACMD00 - THESE MESSAGES WILL INITIATE AN ACTION'\n*COMMAND\n      IEECVENT MSG='IST020I ',     /* READY FOR LOCAL VTAM USERS */    X\n               ACT=ACTION,                                             X\n               DO='S TSOVTAM'\n          SPACE\n      IEECVENT MSG='IKT005I ',      /* READY FOR LOCAL PRINTERS */     X\n               ACT=ACTION,                                             X\n               DO='S DSPRINT'\n          SPACE\n      IEECVENT MSG='IEF403I TSOVTAM - STARTED ',                       X\n               ACT=ACTION,                                             X\n               DO='V NET,INACT,I,ID=AN1CDM'    /* CROSS DOMAIN */\n          SPACE\n      IEECVENT MSG='IST105I AN1CDM ',                                  X\n               ACT=ACTION,                                             X\n               DO='V NET,INACT,I,ID=AN1CTC'    /* CROSS DOMAIN */\n          SPACE\n      IEECVENT MSG='IST105I AN1CTC ',                                  X\n               ACT=ACTION,                                             X\n               DO='V NET,INACT,I,ID=AN1CDRCS'  /* CROSS DOMAIN */\n          SPACE\n      IEECVENT MSG='IST105I AN1CDRCS ',                                X\n               ACT=ACTION,                                             X\n               DO='V NET,ACT,ID=AN1CDRCS'      /* CROSS DOMAIN */\n          SPACE\n      IEECVENT MSG='IST093I AN1CDRCS ',                                X\n               ACT=ACTION,                                             X\n               DO='V NET,ACT,ID=AN1CTC'        /* CROSS DOMAIN */\n          SPACE\n      IEECVENT MSG='IST093I AN1CTC ',                                  X\n               ACT=ACTION,                                             X\n               DO='V NET,ACT,ID=AN1CDM'        /* CROSS DOMAIN */\n          SPACE\n      IEECVENT MSG='IKJ405I ',                                         X\n               ACT=ACTION,                                             X\n               DO='Z TP,QUICK'\n          SPACE\n      IEECVENT MSG='IKJ019I ',          /* READY FOR REMOTE USERS */   X\n               ACT=ACTION,                                             X\n               DO='V R3270,ONTP'\n          SPACE\n      IEECVENT MSG='$HASP646  90',        /*  TELL THEM  */            X\n               ACT=ACTION,                                             X\n               DO='SE ''SPOOL 90% FULL - RELEASE HELD OUTPUT'''\n          SPACE\n      IEECVENT MSG='$HASP646  98',        /*  WARN THEM  */            X\n               ACT=ACTION,                                             X\n               DO='$PI'\n          SPACE\n      IEECVENT MSG='$HASP646 100',        /*  KILL THEM  */            X\n               ACT=ACTION,                                             X\n               DO='$O Q,ALL,C,D=2'\n          TITLE 'DLACMD00 - THESE MESSAGES REQUIRE A REPLY'\n*REPLY\n      IEECVENT MSG='IKT010D',       /* ELSE MEMTERM WILL FSTOP */      X\n               ACT=REPLY,                                              X\n               DO='''SIC'''\n          SPACE\n      IEECVENT MSG='IEC804A',   /* ELSE OPERATOR MAY LOSE SYSTEM */    X\n               ACT=REPLY,                                              X\n               DO='''POST'''\n          SPACE\n      IEECVENT MSG='ARC0055A',     /* WHEN HSM IS NOT ACTIVE */        X\n               ACT=REPLY,                                              X\n               DO='''CANCEL'''\n          SPACE\n* NOTE THE LEADING BLANK IN CJSI01D\n      IEECVENT MSG=' CJSI01D ',     /* CHAINED JOB SCHEDULER */        X\n               ACT=REPLY,                                              X\n               DO='''U'''\n          SPACE\n      IEECVENT MSG='U11-601 ',                                         X\n               ACT=REPLY,                                              X\n               DO='''U'''\n          SPACE\n      IEECVENT MSG='IKT012D ',                                         X\n               ACT=REPLY,                                              X\n               DO='''U'''\n          SPACE\n      IEECVENT MSG='IEFTMS11 ',          /* TMS */                     X\n               ACT=REPLY,                                              X\n               DO='''U'''\n          SPACE\n      IEECVENT MSG='IEFTMS0 ',           /* TMS */                     X\n               ACT=REPLY,                                              X\n               DO='''U'''\n          SPACE\n      IEECVENT MSG='IEFTMS4 ',           /* TMS */                     X\n               ACT=REPLY,                                              X\n               DO='''U'''\n          TITLE 'DLACMD00 - THESE MESSAGES WILL BE SUPPRESSED'\n*SUPPRESS\n      IEECVENT MSG='IEF710I ',                                         X\n               ACT=SUPPRESS\n          SPACE\n      IEECVENT MSG='IEF711I ',                                         X\n               ACT=SUPPRESS\n          SPACE\n      IEECVENT MSG='IEF712I ',                                         X\n               ACT=SUPPRESS\n          SPACE\n      IEECVENT MSG='IEF713I ',                                         X\n               ACT=SUPPRESS\n          SPACE\n      IEECVENT MSG='IEF714I ',                                         X\n               ACT=SUPPRESS\n          SPACE\n      IEECVENT MSG='IEF715I ',                                         X\n               ACT=SUPPRESS\n          SPACE\n      IEECVENT MSG='IEF716I ',                                         X\n               ACT=SUPPRESS\n          SPACE\n      IEECVENT MSG='IEF717I ',                                         X\n               ACT=SUPPRESS\n          SPACE\n      IEECVENT MSG='IEF718I ',                                         X\n               ACT=SUPPRESS\n          TITLE 'DLACMD00 - THESE MESSAGES WILL CHANGE TO NOROLLD MODE'\n*NO-ROLLD\n      IEECVENT MSG='IEF403I NZT0835Y - STARTED -',                     X\n               ACT=NOROLLD\n          TITLE 'DLACMD00 - THESE MESSAGES WILL CHANGE TO NOROLL MODE'\n*NO-ROLL\n      IEECVENT MSG=' *AEW* ENQUEUE CONFLICT PRESENT OVER   5 MIN.',    X\n               ACT=NOROLL\n          TITLE 'DLACMD00 - THESE MESSAGES WILL CHANGE TO ROLL MODE'\n*ROLL\n      IEECVENT MSG='IEA911E ',                                         X\n               ACT=ROLL\n          SPACE\n      IEECVENT MSG='IEA994A ',                                         X\n               ACT=ROLL\n          SPACE\n      IEECVENT MSG='IEA995I ',                                         X\n               ACT=ROLL\n          SPACE\n      IEECVENT MSG='IGF991E ',                                         X\n               ACT=ROLL\n          SPACE\n      IEECVENT ACT=END\n          SPACE\n          DC    C'DLACMD00.&SYSDATE-.&SYSTIME'\n         END\n/*\n//*\n//IEWL EXEC PGM=IEWL,\n// PARM='LIST,NCAL,XREF,LET,RENT,REUS'\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1),DCB=BUFNO=1\n//USEROBJ  DD DISP=SHR,DSN=LOCL.USEROBJ\n//SYSLMOD  DD DISP=SHR,DSN=LOCL.LINKLIB\n//SYSLIN   DD *\n   INCLUDE USEROBJ(DLACMD00)\n   SETCODE AC(1)\n NAME  DLACMD00(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DLASIP00": {"ttr": 1544, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//NTS0991A JOB (0991,TSG),'* DLASIP00 *',MSGCLASS=X,CLASS=6,\n//  NOTIFY=NTS0991,MSGLEVEL=(1,1)\n//IEFUTL1 EXEC PGM=IEV90,\n// PARM='XREF,LIST,LINECOUNT(55)),DECK'\n//SYSPRINT DD SYSOUT=*\n//SYSPUNCH DD DISP=SHR,DSN=LOCL.USEROBJ(DLASIP00)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.SMPMTS\n//         DD DISP=SHR,DSN=LOCL.USERSRC\n//         DD DISP=SHR,DSN=SYS1.MACLIB\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSUT2   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSUT3   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSIN    DD *\nDLASIP00 CSECT\n**********************************************************************\n*                                                                    *\n* CODING INSTRUCTIONS:                                               *\n* RESOURCE MACRO - THE RESOURCES TO BE PROTECTED MUST BE ENTERED IN  *\n*                  ASCENDING DATASET INDEX SEQUENCE. THAT IS, SYS1.  *\n*                  MUST FOLLOW SYS1.PROCLIB IN ORDER TO HAVE EFFEC-  *\n*                  IVE DISCRIMINATION.                               *\n* REQUESTR MACRO - COMBINES THE UNIQUE GENERATED MASKS OF THE LISTED *\n*                  RESOURCES. RESOURCES REQUESTED THAT ARE NOT CODED *\n*                  IN A RESOURCE MACRO WILL BE IGNORED. AN ASTERISK  *\n*                  PROVIDES CARTE BLANCHE ACCESS.                    *\n*                                                                    *\n* CHANGE LOG:                                                        *\n*            04 DEC 85 - FIRST WRITTEN. M.C.CRUZAN.                  *\n*            11 DEC 85 - ADDED DOCUMENTATION. M. C. CRUZAN.          *\n*            11 DEC 85 - CHANGED \"ALL\" TO \"*\". M. C. CRUZAN.         *\n*                                                                    *\n**********************************************************************\n         USING *,15\n         DC    CL4'DSN',A(DSNLIST)\n         DC    CL4'VOL',A(VOLLIST)\n         DC    C'DLASIP00'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\n         CNOP  0,4\nDSNLIST  DC    A(DSNTABL,DSNTABL+DSNEND) /* DATASET RESOURCE LIST  */\n         DC    A(DS1USER,DS1USER+DS1END) /* SPECIFIC REQUESTR LIST */\n         DC    A(DS2USER,DS2USER+DS2END) /* GENERIC REQUESTR LIST  */\nVOLLIST  DC    A(VOLTABL,VOLTABL+VOLEND) /* VOLUME  RESOURCE LIST  */\n         DC    A(VL1USER,VL1USER+VL1END) /* SPECIFIC REQUESTR LIST */\n         DC    A(VL2USER,VL2USER+VL2END) /* GENERIC REQUESTR LIST  */\n         TITLE 'DATASET RESOURCE LIST'\nDSNTABL  RESOURCE SYS1.PARMLIB,                                        X\n               SYS1.PROCLIB,                                           X\n               LOCL.SYSPROC,                                           X\n               ISF.HASPINDX,                                           X\n               ISP.LOCL.,                                              X\n               ISP.DSAC.,                                              X\n               LOCL.USER,     /* GENERIC DSN FOR LOCAL MODS */         X\n               LOCL.TSG.,                                              X\n               LOCL.TAC.,                                              X\n               LOCL.TL.,                                               X\n               SYS1.TEST.,                                             X\n               PASSWORD,                                               X\n               MVSSMPE.,                                               X\n               ISF.,                                                   X\n               ISPF.,                                                  X\n               ISRF.,                                                  X\n               GDDM.,                                                  X\n               GIM.,                                                   X\n               DFQ.,                                                   X\n               TSG.,                                                   X\n               TAC.,                                                   X\n               DSAC.,                                                  X\n               SYS1.,                                                  X\n               LOCL.\n         TITLE 'DATASET SPECIFIC REQUESTR LIST'\nDS1USER  REQUESTR (0686,*),         /* BOYLAN       TSG                X\n               (1686,*),            /* ALLEN        TSG                X\n               (1667,*),            /* BENSON       TSG                X\n               (0547,*),            /* BRYANT       TSG                X\n               (0991,*),            /* CRUZAN       TSG                X\n               (0390,*),            /* D'ALESSANDRO TSG                X\n               (1559,*),            /* DANIEL       TSG                X\n               (1705,*),            /* DICKERSON    TSG                X\n               (1346,*),            /* HANOVER      TSG                X\n               (1609,*),            /* JARVIS       TSG                X\n               (0699,*),            /* MCMANUS      TSG                X\n               (0418,*),            /* MILLER       TSG                X\n               (0442,*),            /* MOODY        TSG                X\n               (1213,*),            /* SHOOK        TSG                X\n               (0441,*),            /* TRAGER       TSG                X\n               (0430,*),            /* TROUP        TSG                X\n               (0987,*),            /* WONG         TSG                X\n               (1029,*),            /* CAMERON      TLA                X\n               (0835,*),            /* REYNOLDS     TLA                X\n               (0690,*),            /* RICHARDSON   TLA                X\n               (0000,*),            /* OPERATORS IN LAB                X\n               (0934,SYS1.PARMLIB,LOCL.TAC.,LOCL.,DSAC.,TAC.),  BELL   X\n               (0217,SYS1.PARMLIB,LOCL.TAC.,LOCL.,DSAC.,TAC.), BOWMAN  X\n               (0978,SYS1.PARMLIB,LOCL.TAC.,LOCL.,DSAC.,TAC.), DANI    X\n               (1063,SYS1.PARMLIB,LOCL.TAC.,LOCL.,DSAC.,TAC.), HASKINS X\n               (1398,SYS1.PARMLIB,LOCL.TAC.,LOCL.,DSAC.,TAC.,  MERWIN  X\n               SYS1.PROCLIB),                                  MERWIN  X\n               (0447,SYS1.PARMLIB,LOCL.TAC.,LOCL.,DSAC.,TAC.), THOMAS  X\n               (0432,SYS1.PARMLIB,LOCL.TAC.,LOCL.,DSAC.,TAC.), WAITZMANX\n               (0436,SYS1.PARMLIB,LOCL.TAC.,LOCL.,DSAC.,TAC.) TOMPKINS\n         TITLE 'DATASET GENERIC REQUESTR LIST'\nDS2USER  REQUESTR (NTA,LOCL.,DSAC.,LOCL.TSG.,TAA.,ISP.LOCL.,           X\n               ISP.DSAC.),                                             X\n               (NTASMP,*),                                             X\n               (NTB,ISP.LOCL.,ISP.DSAC.,LOCL.,DSAC.),                  X\n               (NTD,ISP.LOCL.,ISP.DSAC.,LOCL.,DSAC.),                  X\n               (NTL,SYS1.TEST.,LOCL.TL.,LOCL.PROCLIB)\n         TITLE 'VOLUME RESOURCE LIST'\nVOLTABL  RESOURCE RES,              /* TEST IPL VOLUME        */       X\n               IPL,                 /* NOMINAL IPL VOLUME     */       X\n               CAT,                 /* MASTER CATALOG         */       X\n               IPO,                 /* IPO/SMP VOLUME         */       X\n               DLB,                 /* DISTRIBUTION LIBRARIES */       X\n               MVS,                 /* ONE-PACK SYSTEMS       */       X\n               EX,                  /* EXPORT DLIBS           */       X\n               X                    /* EXPORT BASE            */\n         TITLE 'VOLUME SPECIFIC REQUESTR LIST'\nVL1USER  REQUESTR (0686,*),         /* BOYLAN       TSG                X\n               (1686,*),            /* ALLEN        TSG                X\n               (1667,*),            /* BENSON       TSG                X\n               (0547,*),            /* BRYANT       TSG                X\n               (0991,*),            /* CRUZAN       TSG                X\n               (0390,*),            /* D'ALESSANDRO TSG                X\n               (1559,*),            /* DANIEL       TSG                X\n               (1705,*),            /* DICKERSON    TSG                X\n               (1346,*),            /* HANOVER      TSG                X\n               (1609,*),            /* JARVIS       TSG                X\n               (0699,*),            /* MCMANUS      TSG                X\n               (0418,*),            /* MILLER       TSG                X\n               (0442,*),            /* MOODY        TSG                X\n               (1213,*),            /* SHOOK        TSG                X\n               (0441,*),            /* TRAGER       TSG                X\n               (0430,*),            /* TROUP        TSG                X\n               (0987,*),            /* WONG         TSG                X\n               (1029,*),            /* CAMERON      TLA                X\n               (0835,*),            /* REYNOLDS     TLA                X\n               (0690,*),            /* RICHARDSON   TLA                X\n               (0000,*)             /* OPERATORS IN LAB\n         TITLE 'VOLUME GENERIC REQUESTR LIST'\nVL2USER  REQUESTR (NTA,CAT),                                           X\n               (NTASMP,*),                                             X\n               (NTL,CAT,RES,IPL)\n         END\n/*\n//*\n//IEWL EXEC PGM=IEWL,\n// PARM='LIST,NCAL,XREF,LET,RENT,REUS,OL'\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1),DCB=BUFNO=1\n//USEROBJ  DD DISP=SHR,DSN=LOCL.USEROBJ\n//SYSLMOD  DD DISP=SHR,DSN=SYS1.LPALIB,UNIT=3330-1,VOL=SER=RES1N4\n//SYSLIN   DD *\n   INCLUDE USEROBJ(DLASIP00)\n   ENTRY DLASIP00\n NAME  DLASIP00(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSACCVTV": {"ttr": 1548, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         DSACCVTV\n***********************************************************************\n*                                                                     *\n*  THIS DSECT PROVIDES ADDRESSIBILITY TO THE CVTVERID USER FIELD      *\n*                                                                     *\n*  CHANGE LOG:                                                        *\n*        10JAN86 - CONVERTED FROM INLINE TO MACRO - M CRUZAN.         *\n*        17JAN86 - RELOCATED DSACRLSE, NP99FLG1 - M CRUZAN.           *\n*                                                                     *\n*  +--------------------------------------------------------------+   *\n*  |                                                              |   *\n*  |                          DSACTSIP                            |   *\n*  |                                                              |   *\n*  +--------------+-----------------------------------------------+   *\n*  |              |                                               |   *\n*  |   NP99FLG1   |           DSACRLSE                            |   *\n*  |              |                                               |   *\n*  +--------------+-----------------------------------------------+   *\n*  |                                                              |   *\n*  |                          RESERVED                            |   *\n*  |                                                              |   *\n*  +--------------------------------------------------------------+   *\n*  |                                                              |   *\n*  |                          DSACTCMD                            |   *\n*  |                                                              |   *\n*  +--------------------------------------------------------------+   *\n*                                                                     *\n.* CVTVERID -                                                         *\n.*      OFFSETS    TYPE      LENGTH     NAME        DESCRIPTION       *\n.*       0  (0)  ADDRESS       4      DSACTSIP      POINTER TO CDE    *\n.*                                                   FOR DLASIP00     *\n.*       4  (4)    HEX         1      DSACFLG1      FLAG BYTE 1       *\n.*         1... ....                  NP99AUTO      IEECVXIT ENABLED  *\n.*         .1.. ....                  NP99TBLD      TABLE LOADED FLAG *\n.*         ..1. ....                  NP99TBIU      TABLE IN USE FLAG *\n.*         ...1 ....                  NP99AUCH      CMD TABLE CHANGE  *\n.*         .... 1111                                RESERVED          *\n.*       5  (5)    CHAR        3      DSACRLSE      CB/IPO RELEASE ID *\n.*       8  (8)                4                    RESERVED          *\n.*      12  (C)  ADDRESS       4      DSACTCMD      DLACMD00 ENTRY    *\n.*                                                   POINT IN CSA     *\n***********************************************************************\nCVTVER   DSECT\nDSACTSIP DS    F              POINTER TO CDE FOR DLASIP00 IN PLPA\nDSACFLG1 DS    XL1            FLAG BYTE ONE\nNP99AUTO EQU   X'80'              AUTOREPLY ENABLE FLAG\nNP99TBLD EQU   X'40'              TABLE LOADED FLAG\nNP99TBIU EQU   X'20'              TABLE IN USE FLAG\nNP99AUCH EQU   X'10'              CMD TABLE NAME OVERRIDE FLAG\nNP99FL08 EQU   X'08'              UNASSIGNED\nNP99FL04 EQU   X'04'              UNASSIGNED\nNP99FL02 EQU   X'02'              UNASSIGNED\nNP99FL01 EQU   X'01'              UNASSIGNED\nDSACRLSE DS    CL3            CB/IPO RELEASE ID\n         DS    XL4            RESERVED\nDSACTCMD DS    CL4            DLACMD00 ENTRY POINT IN CSA\n*                             IF OPERATOR OVERRIDES THE CMD TABLE NAME\n*                             DURING IPL THE LOW TWO BYTES CONTAIN THE\n*                             TERMINAL ID FOR DLACMDXX\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSACTASK": {"ttr": 1550, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//NTS0991S JOB (0991,TAA),'* DSACTASK *',MSGLEVEL=(1,1),\n// MSGCLASS=X,NOTIFY=NTS0991,CLASS=6\n//IEFUTL1 EXEC PGM=IEV90,\n// PARM='XREF(SHORT),LIST,LINECOUNT(55)),DECK'\n//SYSPRINT DD SYSOUT=*\n//SYSPUNCH DD DISP=SHR,DSN=LOCL.USEROBJ(DSACTASK)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.SMPMTS\n//         DD DISP=SHR,DSN=LOCL.USERSRC\n//         DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.AMODGEN,UNIT=3350,VOL=SER=DLB85A\n//         DD DISP=SHR,DSN=SYS1.AGENLIB,UNIT=3350,VOL=SER=DLB85A\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSUT2   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSUT3   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSIN    DD *\n         TITLE 'DSACTASK - DYNABLDL/AUTORPLY MANAGER'\nDSACTASK CSECT\n**********************************************************************\n*                                                                    *\n* DSACTASK IS A STARTED TASK THAT PROVIDES INSTALLATION MANAGEMENT   *\n* FOR DYNABLDL AND THE AUTOREPLIES FACILITY.                         *\n*                                                                    *\n* RELATED CODE AND HOOKS:                                            *\n*    IEAVNP99 - USER NIP EXIT INITIALIZES THE CVTVERID.              *\n*    IEECVXIT - MCS USER EXIT DOES AUTO REPLIES.                     *\n*    DLACMD00 - TABLE IN CSA CONTAINS CONSOLE MESSAGES TO LOOK FOR   *\n*               AND FLAGS, RESPONSES FOR PROCESSING.                 *\n*    IEECVENT - USER MACRO TO BUILD DLACMD00.                        *\n*    DSACCVTV - USER MACRO TO MAP CVTVERID.                          *\n*    IHANVT   - USER MACRO TO MAP NIP VECTOR TABLE.                  *\n*    IHAIQE   - USER MACRO TO MAP IQE.                               *\n*    IEAPPNIP - USER MACRO TO MAP NIP WORK AREA AND P-LIST.          *\n*    IEECVUSR - USER MACRO TO MAP DLACMD00.                          *\n*    IEAVVWTO - SUPERZAPPED TO PASS ALL MESSAGES TO IEECVXIT.        *\n*    IEAVNIPM - SUPERZAPPED TO PROVIDE TABLE ENTRY FOR IEAVNP99.     *\n*                                                                    *\n* PROCESSING:                                                        *\n*    DSACTASK FIRST LOCATES THE USER CVT PREFIX WHICH IS INITIALIZED *\n*    BY THE NIP EXIT ROUTINE IEAVNP99 TO VERIFY THAT THE OPERATOR    *\n*    REPLIED \"YES\" TO THE INITIALIZATION REQUEST MESSAGE ISSUED AT   *\n*    IPL TIME.  IF \"NO\", NP99AUTO FLAG IS ZERO AND DSACTASK TERMIN-  *\n*    ATES.                                                           *\n*    IF \"YES\", DSACTASK VERIFIES THAT HE IS RUNNING AS A STARTED     *\n*    TASK AND NOT BATCH OR TSO.  IF ALL IS OK, AN ESTAE ENVIRONMENT  *\n*    IS CREATED.                                                     *\n*    DSACTASK THEN LOCATES THE AUTOREPLY MESSAGE TABLE DLACMD00 IN   *\n*    THE LINKLIST.                                                   *\n*    THE MODULE IS NEXT LOADED INTO CSA VIA THE GLOBAL=(YES,P) OPTION*\n*    OF THE LOAD MACRO AND ANCHORS IT IN THE USER CVT PREFIX AND SETS*\n*    THE \"TABLE LOADED\" FLAG, NP99TBLD.                              *\n*    LAST, THE CIB CHAIN IS PROCESSED FOR MODIFIES.                  *\n*                                                                    *\n* PROCESSING OPTIONS:                                                *\n*    P CMD1               TERMINATE DSACTASK                         *\n*    F CMD1,STOP          TERMINATE DSACTASK                         *\n*    F CMD1,DISPLAY       SHOW DYNABLDL STATUS                       *\n*    F CMD1,BLDL          REFRESH BLDL LIST (START/STOP DYNABLDL)    *\n*    F CMD1,MOD=........  REFRESH SINGLE MODULE IN DYNAMIC BLDL      *\n*    F CMD1,AUTOREPLY     REFRESH AUTOREPLY TABLE IN CSA             *\n*    F CMD1,AUTOREPLY=YY  REPLACE DLACMDXX WITH DLACMDYY             *\n*                                                                    *\n* CHANGE LOG:                                                        *\n*    17 DEC 85 - FIRST WRITTEN - M CRUZAN.                           *\n*    07 FEB 86 - MODIFIED TO REFRESH DLACMD00 ON OPERATOR MODIFY     *\n*                COMMAND - M CRUZAN.                                 *\n*    10 MAR 86 - MODIFIED TO ACCEPT ALTERNATE TABLES - M CRUZAN.     *\n*                                                                    *\n*                         MARV CRUZAN                                *\n*                         DEFENSE LOGISTICS AGENCY                   *\n*                         DLA SYSTEMS AUTOMATION OFFICE              *\n*                         DSAC-TSG                                   *\n*                         P O BOX P1605                              *\n*                         COLUMBUS, OH  43216-5002                   *\n*                         (614) 238-9409 (AV) 850-9409               *\n*                                                                    *\n**********************************************************************\n         EJECT\n         USING DSACTASK,R15    ENTRY ADDRESSABILITY\nR0       EQU   0               LINKAGE REGISTER\nR1       EQU   1               LINKAGE REGISTER\nM1       EQU   1               ICM MASK\nR2       EQU   2               WORK\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7               CVTVER BASE\nM7       EQU   7               ICM MASK\nR8       EQU   8               ECB\nR9       EQU   9               CIB\nR10      EQU   10              TOKEN\nR11      EQU   11              USER\nR12      EQU   12              STANDARD BASE REGISTER\nR13      EQU   13              SAVE AREA POINTER\nR14      EQU   14              RETURN REGISTER\nR15      EQU   15              LINKAGE REGISTER/RETURN CODE\nM15      EQU   15              ICM MASK\n         B     START           BRANCH AROUND ID\n         DC    C'DSACTASK.&SYSDATE.&SYSTIME' IDENTIFIER\nSTART    DS    0H\n         STM   R14,R12,12(R13) SAVE CALLERS REGS\n         DROP  R15             DROP ENTRY BASE REGISTER\n         LR    R12,R15         LOAD BASE REGISTER\n         USING DSACTASK,R12    ESTABLISH ADDRESSABILITY\n         LA    R0,72           LOAD LENGTH FOR SAVE AREA\n         BAL   R1,*+4          INDICATE GETMAIN\n         SVC   10              ISSUE GETMAIN FOR MY SAVE AREA\n         ST    R13,4(R1)       STORE BACKWARD POINTER\n         ST    R1,8(R13)       STORE FORWARD POINTER\n         LR    R13,R1          POINT TO MY SAVE AREA\n         L     R1,4(R13)       RESTORE REG 1\n         L     R1,24(R1)       FOR PARAMETER LIST\n         ICM   R1,M15,0(R1)    LOOK FOR PARM\n         ST    R1,PARMAREA     SAVE IT\n         LA    R1,2(,R1)       BUMP PAST LENGTH\n         LH    R2,0(,R1)       GET PARM LENGTH\n         ST    R2,PARMLGTH     SAVE IT, TOO\n         LTR   R2,R2           WAS IT REALLY THERE?\n         BZ    NOPARM          NO\n         MVC   DLANAME+6(2),0(R1) UPDATE DLACMD MODULE\n         MVC   NEWNAME+6(2),0(R1)\nNOPARM   DS    0H\n         XR    R15,R15         ZERO REG15 FOR RETURN CODE\n         TITLE 'DSACTASK - INITIALIZATION CODE'\n**********************************************************************\n*                                                                    *\n* ALLOW ONLY AS A STARTED TASK.                                      *\n*                                                                    *\n**********************************************************************\n         L     R2,548          PSAAOLD\n         USING ASCB,R2\n         ICM   R3,M15,ASCBJBNI BATCH JOB?\n         BNZ   EXITM           - NOT ALLOWED\n         ICM   R3,M15,ASCBTSB  TSO?\n         BNZ   EXITM           - NOT ALLOWED\n       MODESET KEY=ZERO,MODE=SUP\n*     SYSEVENT DONTSWAP\n         SPACE 3\n**********************************************************************\n*                                                                    *\n* LOCATE USER PREFIX TO THE CVT.                                     *\n* MODIFY COMMAND TABLE NAME IF OPERATOR PROVIDED AN OVERRIDE AT IPL. *\n*                                                                    *\n**********************************************************************\n         L     R7,16            FIND CVT\n         S     R7,=A(CVTMAP-CVTFIX) BACK UP TO PREFIX\n         USING CVTFIX,R7        AND ADDRESS\n         LA    R7,CVTVERID      FIND USER PREFIX\n         DROP  R7\n         USING CVTVER,R7        AND ADDRESS IT\n         TM    DSACFLG1,NP99AUCH COMMAND MODULE CHANGE?\n         BZ    GOESTAE          NO -\n         MVC   DLANAME+6(2),DSACTCMD+2 FROM OPER OVERRIDE\n         MVC   NEWNAME+6(2),DSACTCMD+2 FROM OPER OVERRIDE\n         XC    DSACTCMD,DSACTCMD CLEAN UP\n         NI    DSACFLG1,255-NP99AUCH RESET CHANGE FLAG\n         TITLE 'DSACTASK - ESTABLISH ERROR HANDLING'\n**********************************************************************\n*                                                                    *\n* ESTABLISH AN ESTAE.                                                *\n*                                                                    *\n**********************************************************************\nGOESTAE  DS    0H\n         L     R2,EXITERR      GET ESTAE ROUTINE ADDRESS\n         LA    R3,ERRADDR      GET USER PARAMETER LIST\n         ESTAE (2),              /* ADDRESS TO GET CONTROL             X\n               PARAM=(3),        /* PARAMETER LIST ADDRESS             X\n               PURGE=HALT,       /* NO OUTSTANDING I/O                 X\n               ASYNCH=YES,       /* MAY BE REQUIRED IN FUTURE          X\n               TERM=YES,         /* IF CANCELLED BY OPERATOR           X\n               BRANCH=NO,        /* NO BRANCH ENTRY                    X\n               RECORD=NO,        /* NO LOGREC RECORD NEEDED            X\n               XCTL=YES,         /* MAY BE REQUIRED IN FUTURE          X\n               TOKEN=ESTOKEN     /* TAKE CARE OF MY OWN\n         LTR   R15,R15          SUCESSFUL?\n         BZ    CVTVER1          YES - GO SET UP\n         WTO   'DLA1999I DSACTASK UNABLE TO ESTABLISH ERROR RECOVERY', X\n               ROUTCDE=(2,11)\n         EJECT\n**********************************************************************\n*                                                                    *\n* LOCATE CVTVER AND VERIFY AUTOREPLY IS REQUESTED.                   *\n*                                                                    *\n**********************************************************************\nCVTVER1  DS    0H\n         TM    DSACFLG1,NP99AUTO AM I NEEDED?\n         BNO   EXTRACT         AUTOREPLIES DISABLED\n         BAL   R11,LOADCOMD\n         B     EXTRACT\n         TITLE 'DSACTASK - FIND THE CIB'\n**********************************************************************\n*                                                                    *\n* BEGIN THE CIB PROCESSING.                                          *\n*                                                                    *\n**********************************************************************\nEXTRACT  DS    0H\n       EXTRACT COMMADDR,FIELDS=COMM\n         L     R1,COMMADDR      ANSWER AREA\n         L     R2,4(,R1)        ADDRESS OF CIB\n         LA    R3,4(,R1)        ADDRESS OF ADDRESS OF CIB\n         LTR   R2,R2            IS THERE A CIB?\n         BZ    NOSTART\n         USING CIB,R2\n         CLI   CIBVERB,CIBSTART IS IT A START?\n         BNE   NOSTART\n         DROP  R2\n         QEDIT ORIGIN=(3),BLOCK=(2)\nNOSTART  QEDIT ORIGIN=(3),CIBCTR=2\n         LA    R15,0               BITS 0-2 MUST BE ZERO FOR\n         BAL   R11,DYNABLDL\n         WTO   'DLA1001I DSACTASK INITIALIZED',ROUTCDE=(2,11)\n         EJECT\n**********************************************************************\n*                                                                    *\n* DETERMINE THE STATUS OF DLACMD00.                                  *\n*                                                                    *\n**********************************************************************\n         TM    DSACFLG1,NP99TBLD   IS TABLE LOADED?\n         BZ    CIBWAIT             NO - DONT SHOW READY\n         OI    DSACFLG1,NP99TBIU   ELSE SHOW AVAILABLE\n         SPACE 3\nCIBWAIT  DS    0H\n         L     R1,COMMADDR         POINT TO COMM AREA\n         L     R1,0(,R1)           POINT TO COMM ECB\n         WAIT  ECB=(1)\n**********************************************************************\n*                                                                    *\n* WAIT HERE FOR MODIFY/STOP                                          *\n*                                                                    *\n**********************************************************************\n         EJECT\n**********************************************************************\n*                                                                    *\n* OPERATOR HAS ISSUED A MODIFY COMMAND - PARSE IT.                   *\n*                                                                    *\n**********************************************************************\n         L     R1,COMMADDR         POINT TO COMM AREA\n         L     R2,4(,R1)           POINT TO CIB\n         USING CIB,R2\n         LA    R3,4(,R1)           POINT TO CIB POINTER\n         CLI   CIBVERB,CIBSTOP     STOP\n         BE    EXIT1               YES, SAME AS DELETE\n         MVC   REPLY(12),=CL12' '\n         LH    R1,CIBDATLN         GET LENGTH OF OPERAND\n         CH    R1,=H'12'           TOO LONG\n         BNH   NOTOLONG            NO\n         LH    R1,=H'12'           YES, TRUNCATE IT\nNOTOLONG DS    0H\n         LTR   R1,R1               NULL\n         BZ    COMPROC0            YES, SAME AS BLANKS\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         EX    R1,MVCHAR           MOVE OPERAND TO REPLY\n         B     COMPROC0\nMVCHAR   MVC   REPLY(0),CIBDATA        MOVE OPERAND TO REPLY\n         TITLE 'DSACTASK - COMMAND ROUTER'\nCOMPROC0 DS    0H                  FREE THE CIB HERE\n         QEDIT ORIGIN=(3),BLOCK=(2)\n         CLC   =C'STOP    ',REPLY  STOP REQUESTED?\n         BNE   COMPROC1\n         B     EXIT1               PROCESS THE STOP COMMAND\n         SPACE\nCOMPROC1 DS    0H\n         CLC   =C'BLDL    ',REPLY  DYNAMIC BLDL FACILITY?\n         BNE   COMPROC2\n         BAL   R11,DYNABLDL        SERVICE THE DYNAMIC BLDL FUNCTION\n         B     CIBWAIT             WAIT FOR THE NEXT ONE\n         SPACE\nCOMPROC2 DS    0H\n         CLC   =C'DISPLAY ',REPLY  TASK STATUS?\n         BNE   COMPROC3\n         BAL   R11,DISPLAY         SHOW WHAT WE ARE DOING\n         B     CIBWAIT             WAIT FOR THE NEXT ONE\n         SPACE\nCOMPROC3 DS    0H\n         CLC   =C'MOD=',REPLY      IS IT A MODULE ENTRY REPLACE?\n         BNE   COMPROC4            NO - CHECK FOR NEXT ONE\n         BAL   R11,MODREP          ELSE SERVICE THIS REPLACE REQUEST\n         B     CIBWAIT             AND WAIT FOR NEXT ONE\n         SPACE\nCOMPROC4 DS    0H\n         CLC   =C'AUTOREPLY',REPLY REFRESH THE AUTORPLY TABLE?\n         BNE   COMPROC5            NO - CHECK FOR NEXT ONE\n         BAL   R11,MODFRESH        ELSE SERVICE THIS REFRESH REQUEST\n         B     CIBWAIT             AND WAIT FOR NEXT ONE\n         SPACE\nCOMPROC5 DS    0H\n*********************************************************************\n*                                                                   *\n*        SAMPLE CODE FOR ADDING A COMMAND ROUTER                    *\n*                                                                   *\n*        CLC   =C'COMMAND ',REPLY  IS IT THIS COMMAND?              *\n*        BNE   COMPROCX            NO - CHECK FOR NEXT ONE          *\n*        BAL   R11,COMMAND         ELSE SERVICE THIS REQUEST        *\n*        B     CIBWAIT             AND WAIT FOR NEXT ONE            *\n*COMPROCX DS    0H                                                  *\n*                                                                   *\n*********************************************************************\n         SPACE\nBADCMD   DS    0H                  FALL THROUGH IF NO HITS\n         MVC   WTOERROR+13(12),REPLY TELL THE SENDER\n         LA    R0,0                CLEAR REG ZERO\n         ICM   R0,M1,CIBCONID      GET CONSOLE ID FOR MESSAGE\n         WTO   MF=(E,WTOERROR)\n         B     CIBWAIT\n         TITLE 'DSACTASK - TASK STATUS DISPLAY'\n*********************************************************************\n*                                                                   *\n* TELL OPERATOR IF DYNABLDL IS ACTIVE/INACTIVE.                     *\n*                                                                   *\n*********************************************************************\nDISPLAY  DS    0H\n         LA    R0,0                CLEAR REG ZERO\n         IC    R0,CIBCONID         GET CONSOLE ID FOR MESSAGE\n         TM    OPFLAGS,DBACTIVE    IS DYNABLDL ACTIVE?\n         BO    DISPACT             YES - GO TELL REQUESTER\n         WTO   'DLA1004I DYNABLDL INACTIVE',                           X\n               DESC=(5,8,9),MCSFLAG=(REG0,RESP)\n         BR    R11                 RETURN TO CALLER\nDISPACT  DS    0H\n         WTO   'DLA1004I DYNABLDL ACTIVE',                             X\n               DESC=(5,8,9),MCSFLAG=(REG0,RESP)\n         BR    R11                 RETURN TO CALLER\n         TITLE 'DSACTASK - DLACMD00 PROCESSOR'\n*********************************************************************\n*                                                                   *\n* AUTOREPLY TABLE REFRESHED FROM HERE.                              *\n*                                                                   *\n*********************************************************************\nMODFRESH DS    0H\n         ST    R11,SAVERTN         SAVE CALLERS RETURN\n         CLI   REPLY+9,C'='        AN OPERAND?\n         BNE   NOPERAND            NO\n         MVC   NEWNAME+6(2),REPLY+10 ELSE MOVE IT IN\nNOPERAND DS    0H\n         TM    DSACFLG1,NP99AUTO   WAS AUTOREPLY AUTHORIZED?\n         BO    MODFLOAD            YES -\n         WTO   'DLA1006I REFRESH DENIED - AUTOREPLY NOT AUTHORIZED',   X\n               ROUTCDE=(2,11)\n         B     MODFEXIT\nMODFLOAD DS    0H\n         TM    OPFLAGS,DBACTIVE    IS DYNABLDL ACTIVE\n         BZ    MODNLOAD\n         MVC   MBLDLNME,NEWNAME      INSERT TABLE NAME\n         SR    R0,R0               SHOW SYSTEM ISSUED\n         LA    R1,MBLDL            ISSUE S DYNABLDL,P=DLACMD00\n         MGCR  (1)\n         MVC   MBLDLNME,=C'XXXXXXXX' AND RESET DUMMY NAME\nMODNLOAD DS    0H\n         BAL   R11,DELECODE        DELETE THE COMMAND TABLE\n         BAL   R11,LOADCOMD        AND GET THE NEW ONE\n         OI    DSACFLG1,NP99TBIU   SHOW AVAILABLE FOR USE\nMODFEXIT DS    0H\n         L     R11,SAVERTN         GET OUR ROADMAP\n         BR    R11                 AND RETURN TO CALLER\n         TITLE 'DSACTASK - DYNABLDL PROCESSOR'\n*********************************************************************\n*                                                                   *\n* COMMANDS FOR CONTROLING DYNABLDL ISSUED HERE.                     *\n*                                                                   *\n*********************************************************************\nDYNABLDL DS    0H\n         TM    OPFLAGS,DBACTIVE    IS DYNABLDL ACTIVE\n         BO    REPORT              YES - MAKE A REPORT\nSTARTIT  DS    0H\n         SR    R0,R0               SHOW SYSTEM ISSUED\n         LA    R1,SBLDL            ISSUE S DYNABLDL,P=START\n         MGCR  (1)\n         LA    R0,0                CLEAR REG ZERO\n         IC    R0,CIBCONID         GET CONSOLE ID FOR MESSAGE\n         WTO   'DLA1005I DYNABLDL STARTED',                            X\n               DESC=(5,8,9),MCSFLAG=(REG0,RESP)\n         OI    OPFLAGS,DBACTIVE    SHOW DYNABLDL ACTIVE\n         BR    R11                 RETURN TO CALLER\nREPORT   DS    0H\n         SR    R0,R0               SHOW SYSTEM ISSUED\n         LA    R1,RBLDL            ISSUE S DYNABLDL,P=REPORT\n         MGCR  (1)\n         BR    R11                 AND RETURN TO CALLER\nMODREP   DS    0H\n         MVC   MBLDLNME,REPLY+4    MOVE NEW NAME IN\n         SR    R0,R0               SHOW SYSTEM ISSUED\n         LA    R1,MBLDL            ISSUE S DYNABLDL,P=MODULENAME\n         MGCR  (1)\n         MVC   MBLDLNME,=C'XXXXXXXX' AND RESET DUMMY NAME\n         BR    R11                 AND RETURN TO CALLER\n         TITLE 'DSACTASK - LOCATE DLACMD00 AND UPDATE CVTVERID'\n**********************************************************************\n*                                                                    *\n* FIND THE CMD PROCESSING TABLE AND INSTALL IT.                      *\n*                                                                    *\n**********************************************************************\nLOADCOMD DS    0H\n         MVC   DLANAME,NEWNAME  REFRESH NAME ALWAYS\n         LA    R2,DLALIST       GET LIST FOR BLDL\n         BLDL  0,(2)            AND LOOK IN LINK LIST\n         LTR   R15,R15          FOUND IT?\n         BZ    CMDLOCAT         - YES\nNOCOMMND DS    0H\n         WTO   'DLA1007E AUTOREPLY MODULE NOT FOUND - AUTOREPLY IS INACX\n               TIVE',ROUTCDE=(2,11),DESC=(2)\n         BR    R11              ELSE TELL THE WORLD AND CONTINUE\nCMDLOCAT DS    0H\n         LOAD  EPLOC=NEWNAME,GLOBAL=(YES,P) PUT IN PAGEABLE CSA\n         LTR   R15,R15          GOOD LOAD?\n         BNZ   NOCOMMND          NO - SAY SO\n         MVC   DLANAME,NEWNAME  ALWAYS REFRESH IT\n         ST    R0,DSACTCMD      AND SAVE DLACMD00 ENTRY POINT\n         OI    DSACFLG1,NP99TBLD MARK AS LOADED\n         WTO   'DLA1008I CVTVERID UPDATED BY DSACTASK',ROUTCDE=(2,11)\n         BR    R11              RETURN TO CALLER\n         TITLE 'DSACTASK - DLACMD00 DELETE CODE'\n*********************************************************************\n*                                                                   *\n* DLACMD00 DELETED HERE.                                            *\n*                                                                   *\n*********************************************************************\nDELECODE DS    0H\n         NI    DSACFLG1,255-NP99TBIU SHOW TABLE NOT AVAILABLE\n         TM    DSACFLG1,NP99TBLD WAS DLACMD00 LOADED\n         BZR   R11              NO CLEANUP TO BE DONE\n        DELETE EPLOC=DLANAME    ELSE DELETE IT\n         LTR   R15,R15          SUCCESSFUL?\n         BNZ   NODELEMD          NOT QUITE -\n         XC    DSACTCMD,DSACTCMD CLEAR E/P POINTER\n         NI    DSACFLG1,255-NP99TBLD  AND FLAG\n         BR    R11              RETURN TO CALLER\nNODELEMD DS    0H\n         WTO   'DLA1007E AUTOREPLY MODULE NOT DELETED',ROUTCDE=(2,11)\n         BR    R11              RETURN TO CALLER\n         TITLE 'DSACTASK - EXIT CODE'\n*********************************************************************\n*                                                                   *\n* DSACTASK EXIT CODE HERE.                                          *\n*                                                                   *\n*********************************************************************\nEXIT1    DS    0H\n         NI    DSACFLG1,255-NP99TBIU SHOW TABLE NOT AVAILABLE\n         WTO   'DLA1003I DSACTASK TERMINATING',ROUTCDE=(2,11)\n         TM    OPFLAGS,DBACTIVE    IS DYNABLDL ACTIVE?\n         BZ    BLDLEND             NO\n         LA    R1,PBLDL            ELSE NEED TO STOP IT\n         MGCR  (1)\n         NI    OPFLAGS,DBINACTI    SHOW DYNABLDL INACTIVE\nBLDLEND  DS    0H\n         ESTAE 0,TOKEN=ESTOKEN CANCEL ERROR RECOVERY\n         BAL   R11,DELECODE       DELETE THE COMMAND LIST\nDELGOOD  DS    0H\n         B     EXIT\nEXIT     DS    0H              NORMAL EXIT\n         DROP  R7\n*     SYSEVENT OKSWAP\n       MODESET KEY=NZERO,MODE=PROB\nEXITM    DS    0H              EXIT HERE IF ILLEGAL ENTRY\n         LR    R1,R13          POINT TO MY SAVE AREA\n         L     R13,4(R13)      POINT TO CALLERS SAVE AREA\n         ST    R15,16(R13)     INSTALL RETURN CODE IN SAVE AREA\n         LA    R0,72           LOAD LENGTH\n         SVC   10              ISSUE FREEMAIN\n         LM    R14,R12,12(R13) RESTORE REGISTERS\n         BR    R14             AND RETURN TO CALLER\n         LTORG\nPARMAREA DC    F'0'            PARAMETER LIST POINTER\nPARMLGTH DC    F'0'            PARAMETER LIST LENGTH\nSAVERTN  DC    F'0'            LINKAGE REGISTER SAVE AREA\nDLALIST  DC    AL2(1,58)       BLDL LIST ENTRY\nDLANAME  DC    CL8'DLACMD00'   BLDL LIST ENTRY\n         DC    XL46'00'        BLDL LIST ENTRY\n         SPACE\nNEWNAME  DC    CL8'DLACMD00'   BLDL LIST ENTRY\n         SPACE\nESTOKEN  DC    A(0)            ESTAE TOKEN\nOPFLAGS  DC    A(0)\nDBACTIVE EQU   X'80'           DYNABLDL INDICATOR 1\nDBINACTI EQU   X'7F'\n*                                   1 = ACTIVE\n*                                   0 = INACTIVE\nDBLOADED EQU   X'40'           DYNABLDL INDICATOR 2\nDBUNLOAD EQU   X'BF'\n*                                   1 = DYNABLDL LOADED\n*                                   0 = DYNABLDL NOT LOADED\nOPFLAG20 EQU   X'20'           RESERVED\nOPFLAG10 EQU   X'10'           RESERVED\nOPFLAG08 EQU   X'08'           RESERVED\nOPFLAG04 EQU   X'04'           RESERVED\nOPFLAG02 EQU   X'02'           RESERVED\nOPFLAG01 EQU   X'01'           RESERVED\n         SPACE 3\nEXITERR  DC    V(DLAESTAE)     ESTAE ENTRY\nERRADDR  DC    A(OPFLAGS),A(PBLDL),X'80',AL3(DLANAME)\nCOMMADDR DC    A(0)            COMM AREA ADDRESS FOR EXTRACT\nECBADDR  DC    A(0)            CIB ECB ADDRESS\nCIBADDR  DC    A(0)            CIB ADDRESS\nTOKADDR  DC    A(0)            TOKEN ADDRESS\n         SPACE 3\nREPLY    DC    CL12' '\nWTOERROR WTO   'DLA1002I XXXXXXXXXXXX - INVALID COMMAND',              X\n               MCSFLAG=(REG0),MF=L\n         SPACE 3\n         DS    0F\nSBLDL    DC    X'00'\n         DC    AL1(SBLDLEND-SBLDL)\n         DC    X'0000'\n         DC    C'S DYNABLDL,PARM=START ** DSACTASK **'\nSBLDLEND DS    0C\n         SPACE 3\n         DS    0F\nRBLDL    DC    X'00'\n         DC    AL1(RBLDLEND-RBLDL)\n         DC    X'0000'\n         DC    C'S DYNABLDL,PARM=REPORT  ** DSACTASK **'\nRBLDLEND DS    0C\n         SPACE 3\n         DS    0F\nPBLDL    DC    X'00'\n         DC    AL1(PBLDLEND-PBLDL)\n         DC    X'0000'\n         DC    C'S DYNABLDL,PARM=STOP  ** DSACTASK **'\nPBLDLEND DS    0C\n         SPACE 3\n         DS    0F\nMBLDL    DC    X'00'\n         DC    AL1(MBLDLEND-MBLDL)\n         DC    X'0000'\n         DC    C'S DYNABLDL,PARM='\nMBLDLNME DC    C'XXXXXXXX'\n         DC    C' ** DSACTASK **'\nMBLDLEND DS    0C\n         EJECT\nCIB      DSECT\n         IEZCIB\n         EJECT\n         IHAASCB\n         CVT   DSECT=YES,PREFIX=YES,LIST=YES\n         DSACCVTV\n         EJECT\nDLAESTAE CSECT\n         USING DLAESTAE,R15\n         STM   R14,R12,12(R13) SAVE RTMS REGS\n         DROP  R15\n         LR    R12,R15         SHIFT BASE REGISTER\n         USING DLAESTAE,R12\n       GETMAIN R,LV=72\n         ST    R13,4(,R1)      AND CHAIN\n         ST    R1,8(,R13)         SAVE AREA POINTERS\n         LR    R13,R1          MY SAVE AREA\n         L     R1,4(,R13)\n         L     R1,24(,R1)      RESTORE REG 1\n         XR    R15,R15         CLEAR REG 15 FOR RETURN TO RTM\n         L     R1,0(,R1)       FIRST WORD OF SDWA POINTS TO PARM LIST\n         LM    R8,R10,0(R1)    PARAMETER LIST\n         WTO   'DLA1998I DSACTASK ESTAE ENTERED',ROUTCDE=(2,11)\n         TM    0(R8),X'80'     DYNABLDL ACTIVE?\n         BZ    TERM2\n         SR    R0,R0           SHOW SYSTEM\n         LA    R1,0(,R9)       POINT TO MGCR LIST\n         MGCR  (1)\nTERM2    DS    0H\n         L     R7,16           GET CVT\n         S     R7,=A(CVTMAP-CVTFIX) BACK UP TO PREFIX\n         USING CVTFIX,R7       AND ADDRESS IT\n         LA    R7,CVTVERID     FIND USER PREFIX\n         DROP  R7\n         USING CVTVER,R7       AND ADDRESS IT\n         NI    DSACFLG1,255-NP99TBIU SHOW TABLE NOT AVAILABLE\n         TM    DSACFLG1,NP99TBLD WAS TABLE LOADED\n         BZ    TERM3           NO - FINISH UP\n         LA    R10,0(,R10)     ELSE STRIP VL FLAG\n        DELETE EPLOC=(10)       AND DELETE IT\n         XC    DSACTCMD,DSACTCMD CLEAR E/P POINTER\n         NI    DSACFLG1,255-NP99TBLD  AND FLAG\n         LTR   R15,R15         GOOD DELETE?\n         BZ    TERM3           YES\n         WTO   'DLA1007E AUTOREPLY MODULE NOT DELETED',ROUTCDE=(2,11)\nTERM3    DS    0H\n         LR    R1,R13\n         L     R13,4(,R1)\n      FREEMAIN R,LV=72,A=(1)\n         SETRP WKAREA=(2),REGS=(14,12),RC=0\n         LTORG\n       IHASDWA DSECT=YES\n         END\n/*\n//*\n//IEWL EXEC PGM=IEWL,\n// PARM='LIST,NCAL,XREF,LET'\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1),DCB=BUFNO=1\n//USEROBJ  DD DISP=SHR,DSN=LOCL.USEROBJ\n//SYSLMOD  DD DISP=SHR,DSN=LOCL.LINKLIB\n//SYSLIN   DD *\n   INCLUDE USEROBJ(DSACTASK)\n   SETCODE AC(1)\n NAME  DSACTASK(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DYNABLDL": {"ttr": 1801, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//NTS0991A JOB (0991,TAA),'* DYNABLDL *',MSGCLASS=X,CLASS=6,\n//  NOTIFY=NTS0991,MSGLEVEL=(1,1)\n//IEFUTL1 EXEC PGM=IEV90,\n//*PARM='XREF(SHORT),LIST,LINECOUNT(55)),NODECK'\n// PARM='XREF(SHORT),LIST,LINECOUNT(55)),DECK'\n//SYSPRINT DD SYSOUT=*\n//SYSPUNCH DD DISP=SHR,DSN=LOCL.USEROBJ(DYNABLDL)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.SMPMTS\n//         DD DISP=SHR,DSN=LOCL.USERSRC\n//         DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.HASPSRC,UNIT=3350,VOL=SER=DLB85A\n//         DD DISP=SHR,DSN=SYS1.AMODGEN,UNIT=3350,VOL=SER=DLB85A\n//         DD DISP=SHR,DSN=SYS1.AGENLIB,UNIT=3350,VOL=SER=DLB85A\n//         DD DISP=SHR,DSN=SYS1.ATSOMAC,UNIT=3350,VOL=SER=DLB85A\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSUT2   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSUT3   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSIN    DD *\nDYNABLDL TITLE ' '                                            11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n* MODULE NAME = DYNABLDL.                                   * 11/83 DBC\n*                                                           * 11/83 DBC\n* DESCRIPTIVE NAME = DYNAMIC BLDL FACILITY.                 * 11/83 DBC\n*                                                           * 11/83 DBC\n* COPYRIGHT = DAVID B. COLE - 1983.                         * 11/83 DBC\n*                                                           * 11/83 DBC\n* STATUS = RELEASE 85, MODIFICATION LEVEL B.                * 12/85 GPM\n*                                                           * 11/83 DBC\n* FUNCTION = MAINTAIN A DYNAMICALLY UPDATED LIST OF THE     * 11/83 DBC\n*            MOST FREQUENTLY USED BLDL ENTRIES FROM THE     * 11/83 DBC\n*            LINK LIST LIBRARIES.                           * 11/83 DBC\n*                                                           * 11/83 DBC\n*            THIS PROGRAM IS CONCEPTUALLY BASED ON THE      * 11/83 DBC\n*            VARIOUS DYNAMIC BLDL PROGRAMS AVAILABLE FROM   * 11/83 DBC\n*            THE \"CBT MODS\" TAPE. HOWEVER, THIS VERSION IS  * 11/83 DBC\n*            A COMPLETE REWRITE THAT INCORPORATES A SERIES  * 11/83 DBC\n*            OF IMPROVEMENTS LISTED BELOW UNDER \"CHANGE     * 11/83 DBC\n*            HISTORY\".                                      * 11/83 DBC\n*                                                           * 11/83 DBC\n* PROCESSOR = OS/VS ASSEMBLER.                              * 11/83 DBC\n*                                                           * 11/83 DBC\n* ATTRIBUTES = NOT REENTRANT.                               * 11/83 DBC\n*                                                           * 11/83 DBC\n* DEPENDENCIES = STRUCTURE OF IGC018.                       * 11/83 DBC\n*                                                           * 11/83 DBC\n* AUTHOR = DAVID B. COLE (DBC)                              * 11/83 DBC\n*          RR#2 BOX 712                                     * 11/83 DBC\n*          AFTON, VA. 22920                                 * 11/83 DBC\n*                                                           * 05/84 DBC\n*          ADDITIONAL MODIFICATIONS MADE BY:                * 05/84 DBC\n*                                                           * 09/84 DBC\n*          JERRY L. CALLEN (JLC)                            * 05/84 DBC\n*          UNIVERSITY OF CHICAGO                            * 05/84 DBC\n*          COMPUTER CENTER                                  * 05/84 DBC\n*          5640 SOUTH ELLIS AVENUE                          * 05/84 DBC\n*          CHICAGO, IL. 60637                               * 05/84 DBC\n*                                                           * 09/84 DBC\n*          BILL HORTEN (WRH)                                * 09/84 DBC\n*          TENNESSEE EASTMAN COMPANY                        * 09/84 DBC\n*          BOX 1973                                         * 09/84 DBC\n*          KINGSPORT, TN. 37662                             * 09/84 DBC\n*                                                           * 02/86 MCC\n*          MARV CRUZAN/GENE MCMANUS (DLO)                   * 02/86 MCC\n*          DEFENSE LOGISTICS AGENCY                         * 02/86 MCC\n*          DLA SYSTEMS AUTOMATION CENTER                    * 02/86 MCC\n*          P O BOX P1605                                    * 02/86 MCC\n*          COLUMBUS, OH  43216-5002                         * 02/86 MCC\n*                                                           * 02/86 MCC\n************************************************************* 02/86 DBC\n         TITLE 'CHANGE HISTORY'                               02/86 DBC\n************************************************************* 02/86 MCC\n*                                                           * 02/86 MCC\n* RELEASE 85C                                               * 02/86 MCC\n*                                                           * 02/86 MCC\n* LAST CHANGE DATE = FEBRUARY 25, 1986                      * 02/86 MCC\n*                                                           * 02/86 MCC\n*                  - SUPPORT FOR ADDITIONAL VERSION OF      * 02/86 MCC\n*                    IGC018 (VERSION 12) ADDED.             * 02/86 MCC\n*                                                           * 02/86 MCC\n************************************************************* 02/86 MCC\n         EJECT ,                                              12/85 MCC\n************************************************************* 12/85 GPM\n*                                                           * 12/85 GPM\n* RELEASE 85B                                               * 12/85 GPM\n*                                                           * 12/85 GPM\n* LAST CHANGE DATE = DECEMBER 26,1985                       * 12/85 GPM\n*                                                           * 12/85 GPM\n*                  - CHANGED TO PRODUCE A REPORT WHEN       * 12/85 GPM\n*                    DYNABLDL IS STOPPED.                   * 12/85 GPM\n*                                                           * 12/85 GPM\n*-----------------------------------------------------------* 12/85 GPM\n*                                                           * 12/85 GPM\n*                  - CHANGED TO ALLOW THE REFRESHING OF AN  * 12/85 GPM\n*                    ENTRY IN THE TABLE. IF PARM IS NOT     * 12/85 GPM\n*                    'START', 'STOP' OR 'REPORT', THE THE   * 12/85 GPM\n*                    PARM IS ASSUMED TO BE A MEMBER NAME TO * 12/85 GPM\n*                    BE REFRESHED. IF FOUND IN THE TABLE,   * 12/85 GPM\n*                    THE ENTRY'S NAME IS CHANGED, AND IT IS * 12/85 GPM\n*                    AGED SO THAT THE SLOT WILL BE REUSED.  * 12/85 GPM\n*                    IF NOT FOUND IN THE TABLE, A MESSAGE   * 12/85 GPM\n*                    IS ISSUED.                             * 12/85 GPM\n*                                                           * 12/85 GPM\n************************************************************* 12/85 GPM\n         EJECT ,                                              12/85 GPM\n************************************************************* 12/85 MCC\n*                                                           * 12/85 MCC\n* RELEASE 85A                                               * 12/85 MCC\n*                                                           * 12/85 MCC\n* LAST CHANGE DATE = DECEMBER 3, 1985                       * 12/85 MCC\n*                                                           * 12/85 MCC\n*                  - SUPPORT FOR ADDITIONAL VERSION OF      * 12/85 MCC\n*                    IGC018 (VERSION 11) ADDED.             * 12/85 MCC\n*                                                           * 12/85 MCC\n************************************************************* 12/85 MCC\n         EJECT ,                                              12/85 MCC\n************************************************************* 09/84 DBC\n*                                                           * 09/84 DBC\n* RELEASE 84C                                               * 09/84 DBC\n*                                                           * 09/84 DBC\n* LAST CHANGE DATE = SEPTEMBER 27, 1974                     * 09/84 DBC\n*                                                           * 09/84 DBC\n*                  - INCLUDED ADDITIONAL VERSION TABLES     * 09/84 DBC\n*                    WORKED OUT BY BILL HORTEN OF TENNESSEE * 09/84 DBC\n*                    EASTMAN COMPANY.                       * 09/84 DBC\n*                                                           * 09/84 DBC\n*                  - MODIFIED THE SRCHPDS HOOK TO PROPERLY  * 09/84 DBC\n*                    HANDLE SOME CHANGES IN THE DFP         * 09/84 DBC\n*                    VERSIONS OF IGC018. THESE NEWER        * 09/84 DBC\n*                    VERSIONS WILL SOMETIMES SWITCH TO THE  * 09/84 DBC\n*                    DEB'S PROTECT KEY (INSTEAD OF THE      * 09/84 DBC\n*                    CALLER'S PROTECT KEY) BEFORE STORING   * 09/84 DBC\n*                    THE RETURNED DIRECTORY INFORMATION.    * 09/84 DBC\n*                                                           * 09/84 DBC\n************************************************************* 09/84 DBC\n         EJECT ,                                              09/84 DBC\n************************************************************* 08/84 DBC\n*                                                           * 08/84 DBC\n* RELEASE 84B                                               * 08/84 DBC\n*                                                           * 08/84 DBC\n* LAST CHANGE DATE = AUGUST 7, 1984                         * 08/84 DBC\n*                                                           * 08/84 DBC\n*                  - SUPPORT FOR ADDITIONAL VERSIONS OF     * 08/84 DBC\n*                    IGC018 (VERSIONS 7 AND 8) HAS BEEN     * 08/84 DBC\n*                    ADDED. THANKS TO VAL PITCHETT OF STATE * 08/84 DBC\n*                    FARM INSURANCE FOR HELP WITH THIS.     * 08/84 DBC\n*                                                           * 08/84 DBC\n*                  - THE DYNABLDL REPORT NOW FLAGS THOSE    * 08/84 DBC\n*                    LOAD MODULES THAT ARE REENTRANT. THIS  * 08/84 DBC\n*                    WILL BE HELPFUL IN DETERMINING WHICH   * 08/84 DBC\n*                    MODULES MIGHT BE BETTER PLACED IN      * 08/84 DBC\n*                    SYS1.LPALIB.                           * 08/84 DBC\n*                                                           * 08/84 DBC\n************************************************************* 08/84 DBC\n         EJECT ,                                              08/84 DBC\n************************************************************* 04/84 JLC\n*                                                           * 04/84 JLC\n* RELEASE 84A                                               * 05/84 DBC\n*                                                           * 04/84 JLC\n* LAST CHANGE DATE = MAY 29, 1984                           * 05/84 DBC\n*                                                           * 04/84 JLC\n*                  - \"TYPO\" TYPE BUGS FIXED AT LABELS       * 04/84 JLC\n*                    \"ENTCNT\" AND \"SIZESCAN\". (BY CHANCE    * 04/84 JLC\n*                    THE BUGS HAD NO FUNCTIONAL EFFECT).    * 04/84 JLC\n*                                                           * 04/84 JLC\n*                  - SUPPORT ADDED FOR THE UZ61167 LEVEL OF * 04/84 JLC\n*                    IGC018.                                * 04/84 JLC\n*                                                           * 05/84 DBC\n*                  - SUPPORT FOR A SECOND VARIATION OF THE  * 05/84 DBC\n*                    UZ61168 LEVEL OF IGC018 ADDED.         * 05/84 DBC\n*                                                           * 04/84 JLC\n************************************************************* 04/84 JLC\n         EJECT ,                                              05/84 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n* RELEASE 83.A                                              * 11/83 DBC\n*                                                           * 11/83 DBC\n* LAST CHANGE DATE - NOVEMBER 15, 1983                      * 11/83 DBC\n*                                                           * 11/83 DBC\n*                  - THIS VERSION OF DYNABLDL IS CAPABLE OF * 11/83 DBC\n*                    RECOGNIZING AND HOOKING INTO ANY OF    * 11/83 DBC\n*                    SEVERAL VERSIONS OF IBM'S IGC018. THE  * 11/83 DBC\n*                    RECOGNITION CODE IS TABLE DRIVEN, AND  * 11/83 DBC\n*                    ADDITIONAL RECOGNITION TABLES CAN BE   * 11/83 DBC\n*                    FAIRLY EASILY ADDED.                   * 11/83 DBC\n*                                                           * 11/83 DBC\n*                  - THE RECOGNITION TABLES ARE             * 11/83 DBC\n*                    COMPREHENSIVE. EACH TABLE CONSISTS OF  * 11/83 DBC\n*                    FOUR PARTS. THE FIRST, LABELED \"ID#\"   * 11/83 DBC\n*                    (WHERE \"#\" REPRESENTS AN ARBITRARY     * 11/83 DBC\n*                    UNIQUE NUMERIC SUFIX), MUST MATCH AN   * 11/83 DBC\n*                    IGC018'S IDENTIFICATION HEADER. THIS   * 11/83 DBC\n*                    IS USED TO DISTINGUISH ONE IGC018 FROM * 11/83 DBC\n*                    ANOTHER. THE SECOND AND THIRD PARTS,   * 11/83 DBC\n*                    LABELED \"SRCHPO#\" AND \"DFOUND#\", MUST  * 11/83 DBC\n*                    MATCH THE TWO LOCATIONS IN IGC018      * 11/83 DBC\n*                    WHERE DYNABLDL INSERTS ITS JUMPS TO    * 11/83 DBC\n*                    ITS INTERCEPT ROUTINES. THE FOURTH     * 11/83 DBC\n*                    PART CONSISTS OF A LIST OF DESCRIPTORS * 11/83 DBC\n*                    OF ALL IBM PRIVATE DATA FIELDS         * 11/83 DBC\n*                    REFERENCED BY THE INTERCEPT ROUTINES.  * 11/83 DBC\n*                    MOST OF THE DESCRIPTORS ARE S-CONS     * 11/83 DBC\n*                    GIVING THE BASE REGISTER BY WHICH      * 11/83 DBC\n*                    IGC018 REFERENCES A FIELD AND THE      * 11/83 DBC\n*                    DISPLACEMENT OF THAT FIELD INTO THE    * 11/83 DBC\n*                    IBM PRIVATE CONTROL BLOCK. THE         * 11/83 DBC\n*                    DYNABLDL INITIALIZATION ROUTINE USES   * 11/83 DBC\n*                    THIS LIST TO DYNAMICALLY MODIFY ALL    * 11/83 DBC\n*                    MACHINE INSTRUCTIONS IN THE TWO        * 11/83 DBC\n*                    INTERCEPT ROUTINES SO THAT THEY        * 11/83 DBC\n*                    CORRECTLY MATCH THE PARTICULAR VERSION * 11/83 DBC\n*                    OF IGC018 BEING HOOKED INTO. NOTE, THE * 11/83 DBC\n*                    TWO IBM PRIVATE CONTROL BLOCKS         * 11/83 DBC\n*                    INVOLVED HERE ARE THE \"BLDL WORK AREA\" * 11/83 DBC\n*                    AND BLDL'S \"SVRB EXTENDED SAVE AREA\".  * 11/83 DBC\n*                                                           * 11/83 DBC\n*                  - ALL ROUTINES RELATED TO DYNABLDL HAVE  * 11/83 DBC\n*                    BEEN CONSOLIDATED INTO A SINGLE        * 11/83 DBC\n*                    PROGRAM. THIS RELIEVES THE POTENTIAL   * 11/83 DBC\n*                    FOR ERRORS ARISING FROM PARTIAL        * 11/83 DBC\n*                    MODIFICATIONS.                         * 11/83 DBC\n*                                                           * 11/83 DBC\n*                  - THE DYNAMIC BLDL TABLE IS NOW          * 11/83 DBC\n*                    MAINTAINED BY A STRAIGHT FORWARD       * 11/83 DBC\n*                    \"LEAST RECENTLY USED\" ALGORITHM. THE   * 11/83 DBC\n*                    PREVIOUSLY USED PERIODIC SORTS AND     * 11/83 DBC\n*                    PARTIAL REFILL METHOD HAS BEEN         * 11/83 DBC\n*                    DISCARDED.                             * 11/83 DBC\n*                                                           * 11/83 DBC\n*                  - PRIOR VERSIONS OF DYNABLDL DID NOT     * 11/83 DBC\n*                    INTERCEPT LINKLIST BLDL REQUESTS IN    * 11/83 DBC\n*                    WHICH THE USER REQUESTED TWO OR MORE   * 11/83 DBC\n*                    NAMES. FURTHER, PRIOR DYNABLDLS DID    * 11/83 DBC\n*                    NOT COUNT SUCH IGNORED REQUESTS AS     * 11/83 DBC\n*                    \"MISSES\". CONSEQUENTLY, THE \"HIT RATE\" * 11/83 DBC\n*                    REPORTED BACK WAS INCORRECT. (IT WAS   * 11/83 DBC\n*                    TOO HIGH). THIS VERSION OF DYNABLDL    * 11/83 DBC\n*                    DOES HANDLE MULTI-ENTRY BLDL REQUESTS, * 11/83 DBC\n*                    AND MY EXPERIENCE HAS BEEN THAT THE    * 11/83 DBC\n*                    TRUE HIT RATE HAS RISEN FROM ABOUT 80% * 11/83 DBC\n*                    TO BETTER THAN 95%.                    * 11/83 DBC\n*                                                           * 11/83 DBC\n*                  - THE REPORT FUNCTION NOW PRODUCES THREE * 11/83 DBC\n*                    LISTINGS OF THE DYNAMIC TABLE (PRINTED * 11/83 DBC\n*                    IN 3-COLUMN FORMAT USING LESS THAN 79  * 11/83 DBC\n*                    CHARACTERS PER LINE - SUITABLE FOR     * 11/83 DBC\n*                    3270 DISPLAY). ONE LISTING IS SORTED   * 11/83 DBC\n*                    BY NAME; A SECOND IS SORTED BY HITS    * 11/83 DBC\n*                    COUNT; THE THIRD IS SORTED BY L.R.U.   * 11/83 DBC\n*                    CHARACTERISTIC.                        * 11/83 DBC\n*                                                           * 11/83 DBC\n*                  - THE DYNABLDL STOP FUNCTION NOW         * 11/83 DBC\n*                    COMPLETELY REMOVES DYNABLDL FROM THE   * 11/83 DBC\n*                    SYSTEM RATHER THAN JUST DISABLING THE  * 11/83 DBC\n*                    HOOK ROUTINES.                         * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         TITLE 'DOCUMANTATION'                                11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*              INSTALLATION GUIDE                           * 11/83 DBC\n*                                                           * 11/83 DBC\n* USE THE FOLLOWING STEPS TO INSTALL DYNABLDL.              * 11/83 DBC\n*                                                           * 11/83 DBC\n* EXAMINE THE MICROFICHE FOR THE VERSION OF IGC018 (THE     * 11/83 DBC\n* BLDL SVC ROUTINE) THAT EXISTS ON YOUR SYSTEM. IN          * 11/83 DBC\n* PARTICULAR, EXAMINE THE FOLLOWING.                        * 11/83 DBC\n*                                                           * 11/83 DBC\n*        - THE MODULE IDENTIFICATION FIELDS LOCATED NEAR    * 11/83 DBC\n*          THE START OF IGC018. THIS IS USED BY DYNABLDL TO * 11/83 DBC\n*          IDENTIFY THE VERSION OF IGC018 THAT EXISTS IN    * 11/83 DBC\n*          YOUR SYSTEM.                                     * 11/83 DBC\n*                                                           * 11/83 DBC\n*        - THE CODE LOCATED AT IGC018'S LABEL \"SRCHPDS\".    * 11/83 DBC\n*          THIS IS WHERE DYNABLDL INSERTS ITS JUMP TO ITS   * 11/83 DBC\n*          DYNAMIC TABLE LOOKUP ROUTINE.                    * 11/83 DBC\n*                                                           * 11/83 DBC\n*        - THE CODE LOCATED AT ICG018'S LABEL \"DFOUND\".     * 11/83 DBC\n*          THIS IS WHERE DYNABLDL INSERTS ITS JUMP TO ITS   * 11/83 DBC\n*          DYNAMIC TABLE UPDATE ROUTINE.                    * 11/83 DBC\n*                                                           * 11/83 DBC\n*        - THE BASE REGISTER (USUALLY R13) AND              * 11/83 DBC\n*          DISPLACEMENTS OF THE FOLLOWING FIELDS IN THE     * 11/83 DBC\n*          \"WORKAREA\" DSECT.                                * 11/83 DBC\n*              RDAREA                                       * 11/83 DBC\n*              CONCAT#                                      * 11/83 DBC\n*          THESE ARE FIELDS REFERENCED BY THE INTERCEPT     * 11/83 DBC\n*          ROUTINES.                                        * 11/83 DBC\n*                                                           * 11/83 DBC\n*        - THE BASE REGISTER (USUALLY R6) AND DISPLACEMENTS * 09/84 DBC\n*          OF THE FOLLOWING FIELDS IN THE SVRB EXTENDED     * 09/84 DBC\n*          SAVE AREA. (REMEMBER THAT AN ASSEMBLY XREF FOR   * 09/84 DBC\n*          IGC018 WILL LIST THE VALUES OF THE FOLLOWING     * 09/84 DBC\n*          LABELS AT +X'40' GREATER THAT THEIR TRUE OFFSETS * 09/84 DBC\n*          BECAUSE OF THE PRESENCE OF AN X'40'-BYTE PREFIX  * 09/84 DBC\n*          SECTION IN THE RB DSECT MAP).                    * 09/84 DBC\n*              EXSKEY                                       * 09/84 DBC\n*              EXSFLG                                       * 09/84 DBC\n*              EXSBLDL (FLAG BIT)                           * 09/84 DBC\n*          THESE FIELDS AND FLAGS ARE REFERENCES BY THE     * 09/84 DBC\n*          INTERCEPT ROUTINES.                              * 09/84 DBC\n*                                                           * 11/83 DBC\n*        - THE REGISTER (USUALLY R12 AND NAMED \"RBASE\")     * 11/83 DBC\n*          USED AS IGC018'S PROGRAM BASE, AND ITS RELATIVE  * 11/83 DBC\n*          BASE ADDRESS (USUALLY X'2').                     * 11/83 DBC\n*                                                           * 11/83 DBC\n*        - THE BASE REGISTERS USED BY IGC018 TO POINT TO:   * 11/83 DBC\n*              - THE DCB OF THE LIBRARIES CURRENTLY BEING   * 11/83 DBC\n*                SEARCHED (USUALLY R11 AND NAMED \"RDCB\"),   * 11/83 DBC\n*              - THE USER'S PARAMETER LIST THAT WAS PASSED  * 11/83 DBC\n*                TO THE BLDL ROUTINE (USUALLY R10 AND NAMED * 11/83 DBC\n*                \"RLIST\"),                                  * 11/83 DBC\n*              - THE PDS DIRECTORY ENTRY FOUND BY IGC018 AT * 11/83 DBC\n*                THE TIME THAT \"DFOUND\" IS CALLED (USUALLY  * 11/83 DBC\n*                R8 AND NAMED \"RPDS1\").                     * 11/83 DBC\n*                                                           * 11/83 DBC\n* EXAMINE THE VERSION TABLES ALREADY EXISTING IN THIS       * 11/83 DBC\n* DYNABLDL TO SEE IF ANY OF THEM MATCH YOUR VERSION OF      * 11/83 DBC\n* IGC018. IF SO, THEN DYNABLDL WILL FUNCTION ON YOUR SYSTEM * 11/83 DBC\n* WITHOUT MODIFICATION. IF NOT, THEN YOU WILL HAVE TO ADD A * 11/83 DBC\n* VERSION TABLE TO DYNABLDL DESCRIBING YOUR IGC018.  UNLESS * 11/83 DBC\n* THE LOGIC OF IGC018 CHANGES DRASTICLY, CREATING A NEW     * 11/83 DBC\n* VERSION TABLE SHOULD BE ALL THAT YOU NEED TO DO; YOU      * 11/83 DBC\n* SHOULD NOT HAVE TO CHANGE ANYTHING ELSE IN DYNABLDL.      * 11/83 DBC\n*                                                           * 11/83 DBC\n* NOTE, AN EASY TEST WOULD BE TO SIMPLY RUN DYNABLDL AS     * 11/83 DBC\n* RECEIVED. IF IT RECOGNIZES YOUR IGC018, THEN IT WILL RUN. * 11/83 DBC\n* IF IT CANNOT RECOGNIZE YOUR IGC018, THEN IT WILL SAY SO   * 11/83 DBC\n* AND TERMINATE.                                            * 11/83 DBC\n*                                                           * 11/83 DBC\n* IF YOU NEED TO ADD A NEW VERSION TABLE, THEN DO THE       * 11/83 DBC\n* FOLLOWING:                                                * 11/83 DBC\n*                                                           * 11/83 DBC\n*        - USING THE INFORMATION GATHERED BY YOUR           * 11/83 DBC\n*          EXAMINATION OF IGC018, CREATE A NEW VERSION      * 11/83 DBC\n*          TABLE MODELED ON THE VERSION TABLES ALREADY      * 11/83 DBC\n*          PROVIDED. BE SURE TO INCLUDE A 4-ELEMENT VECTOR  * 11/83 DBC\n*          POINTING TO THE FOUR PARTS OF YOUR NEW VERSION   * 11/83 DBC\n*          TABLE.                                           * 11/83 DBC\n*                                                           * 11/83 DBC\n*        - ADD TO THE \"VERSIONS\" VECTOR AN ENTRY POINTING   * 11/83 DBC\n*          TO YOUR 4-ELEMENT VECTOR.                        * 11/83 DBC\n*                                                           * 11/83 DBC\n*        - REASSEMBLE DYNABLDL USING \"SYS1.MACLIB\",         * 11/83 DBC\n*          \"SYS1.AMODGEN\", AND THE MACLIB PROVIDED WITH THE * 11/83 DBC\n*          DYNABLDL DISTRIBUTION.                           * 11/83 DBC\n*                                                           * 11/83 DBC\n* LINK EDIT DYNABLDL INTO A LINKLIST LIBRARY OR SOME OTHER  * 11/83 DBC\n* AUTHORIZED LIBRARY. NOTE, ALTHOUGH THE INTERCEPT ROUTINES * 11/83 DBC\n* INSERTED INTO IGC018 ARE REENTRANT, DYNABLDL ITSELF IS    * 11/83 DBC\n* NOT. THEREFORE, DYNABLDL SHOULD NOT BE PLACED IN          * 11/83 DBC\n* SYS1.LPALIB.                                              * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         EJECT ,                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 12/85 GPM\n* MODULE NAME = DYNABLDL.                                   * 12/85 GPM\n* DESCRIPTIVE NAME = DYNAMIC BLDL FACILITY.                 * 12/85 GPM\n* STATUS = RELEASE 85, MODIFICATION LEVEL B.                * 12/85 GPM\n*                                                           * 12/85 GPM\n* FUNCTION = MAINTAIN A DYNAMICALLY UPDATED LIST OF THE MOST* 12/85 GPM\n* FREQUENTLY USED BLDL ENTRIES FROM THE LINK LIST LIBRARIES.* 12/85 GPM\n* THE DYNAMIC BLDL TABLE IS BUILT AS A LOGICAL EXTENSION OF * 12/85 GPM\n* THE STATIC BLDL LIST IN IEABLD00.  THE DYNAMIC BLDL TABLE * 12/85 GPM\n* IS MAINTAINED BY A STRAIGHT FORWARD \"LEAST RECENTLY USED\" * 12/85 GPM\n* ALGORITHM. IF THE TABLE SIZE (CURRENTLY 512 ENTRIES) IS   * 12/85 GPM\n* EXCEEDED, THEN THE LEAST RECENTLY USED MODULE IS REMOVED  * 12/85 GPM\n* FROM THE LIST AND THE NEW ONE ADDED IN ITS PLACE.  MODULES* 12/85 GPM\n* WHOSE NAMES ARE FOUND IN THE STATIC BLDL LIST ARE COUNTED * 12/85 GPM\n* AS 'MISSES' AND ARE REPORTED AS 'BAD NAMES' IN THE DYNAMIC* 12/85 GPM\n* TABLE, SO IT MAY APPEAR THAT AN ABNORMALLY SMALL          * 12/85 GPM\n* PERCENTAGE OF NAMES ARE BEING HIT.                        * 12/85 GPM\n*                                                           * 12/85 GPM\n* INSTALLATION GUIDE                                        * 12/85 GPM\n*                                                           * 12/85 GPM\n* LINK EDIT DYNABLDL INTO A LINKLIST LIBRARY OR SOME OTHER  * 12/85 GPM\n* AUTHORIZED LIBRARY. NOTE, ALTHOUGH THE INTERCEPT ROUTINES * 12/85 GPM\n* INSERTED INTO IGC018 ARE REENTRANT, DYNABLDL ITSELF IS    * 12/85 GPM\n* NOT.  THEREFORE, DYNABLDL SHOULD NOT BE PLACED IN         * 12/85 GPM\n* SYS1.LPALIB.                                              * 12/85 GPM\n*                                                           * 12/85 GPM\n* CREATE THE FOLLOWING PROC NAMED DYNABLDL:                 * 12/85 GPM\n*                                                           * 12/85 GPM\n*   //IEFPROC EXEC PGM=DYNABLDL,REGION=100K                 * 12/85 GPM\n*   //STEPLIB  DD DSN= --- (ONLY IF NOT IN LINKLIST)        * 12/85 GPM\n*   //SYSPRINT DD DDNAME=IEFRDER                            * 02/86 GPM\n*   //IEFRDER  DD SYSOUT=A (USED FOR REPORT FUNCTION)       * 02/86 GPM\n*                                                           * 12/85 GPM\n*                                                           * 12/85 GPM\n*                                                           * 12/85 GPM\n*                                                           * 12/85 GPM\n*                           USER'S GUIDE                    * 12/85 GPM\n*                                                           * 12/85 GPM\n* THE FOLLOWING ASSUMES THAT DYNABLDL HAS BEEN INSTALLED AS * 12/85 GPM\n* DESCRIBED ABOVE.                                          * 12/85 GPM\n*                                                           * 12/85 GPM\n* TO START DYNABLDL USE THE FOLLOWING OPERATOR COMMAND.     * 12/85 GPM\n*                                                           * 12/85 GPM\n*      S DYNABLDL,PARM=START             -- OR --           * 12/85 GPM\n*      S DYNABLDL,PARM=S                                    * 12/85 GPM\n*                                                           * 12/85 GPM\n* DYNABLDL WILL (A) ATTEMPT TO RECOGNIZE THE VERSION OF     * 12/85 GPM\n* IGC018 RUNNING ON YOUR SYSTEM, (B) DETERMINE WHETHER OR   * 12/85 GPM\n* DYNAMIC BLDL PROCESSING IS ALREADY UP AND RUNNING, (C)    * 12/85 GPM\n* GENERATE INTERCEPT ROUTINES IN FIXED GLOBAL MEMORY, (D)   * 12/85 GPM\n* INSERT INTO IGC018 JUMPS TO THE INTERCEPT ROUTINES, AND   * 12/85 GPM\n* (E) TERMINATE LEAVING BEHIND THE ENABLED INTERCEPT        * 12/85 GPM\n* ROUTINES.                                                 * 12/85 GPM\n*                                                           * 12/85 GPM\n* TO STOP DYNABLDL USE THE FOLLOWING OPERATOR COMMAND.      * 12/85 GPM\n*                                                           * 12/85 GPM\n*      S DYNABLDL,PARM=STOP              -- OR --           * 12/85 GPM\n*      S DYNABLDL,PARM=P                                    * 12/85 GPM\n*                                                           * 12/85 GPM\n* DYNABLDL WILL PRODUCE A REPORT OF MODULE ACTIVITY THEN    * 12/85 GPM\n* WILL REMOVE THE HOOKS FROM IGC018 (BY RESTORING THE       * 12/85 GPM\n* ORIGINAL CODE) AND FREE THE GLOBAL MEMORY CONTAINING THE  * 12/85 GPM\n* INTERCEPT ROUTINES.  THE DYNABLDL STOP FUNCTION COMPLETELY* 12/85 GPM\n* REMOVES DYNABLDL FROM THE SYSTEM.                         * 12/85 GPM\n*                                                           * 12/85 GPM\n* A DYNABLDL ACTIVITY REPORT CAN BE GENERATED ONLY WHILE    * 12/85 GPM\n* DYNABLDL PROCESSING IS ACTIVE. TO GENERATE AN ACTIVITY    * 12/85 GPM\n* REPORT, USE THE FOLLOWING OPERATOR COMMAND.               * 12/85 GPM\n*                                                           * 12/85 GPM\n*      S DYNABLDL                        -- OR --           * 12/85 GPM\n*      S DYNABLDL,PARM=REPORT            -- OR --           * 12/85 GPM\n*      S DYNABLDL,PARM=R                                    * 12/85 GPM\n*                                                           * 12/85 GPM\n* TO GENERATE ONLY AN ACTIVITY SUMMARY MESSAGE (WTO), USE   * 12/85 GPM\n* THE FOLLOWING OPERATOR COMMAND.                           * 12/85 GPM\n*                                                           * 12/85 GPM\n*      S DYNABLDL,DSN=NULLFILE,PARM=REPORT     -- OR --     * 12/85 GPM\n*      S DYNABLDL,DSN=NULLFILE,PARM=R                       * 12/85 GPM\n*                                                           * 12/85 GPM\n* THE REPORT FUNCTION PRODUCES THREE LISTINGS OF THE DYNAMIC* 12/85 GPM\n* TABLE (PRINTED IN 3-COLUMN FORMAT USING LESS THAN 79      * 12/85 GPM\n* CHARACTERS PER LINE - SUITABLE FOR 3270 DISPLAY). ONE     * 12/85 GPM\n* LISTING IS SORTED BY NAME; A SECOND IS SORTED BY HITS     * 12/85 GPM\n* COUNT; THE THIRD IS SORTED BY L.R.U.  CHARACTERISTIC.     * 12/85 GPM\n*                                                           * 12/85 GPM\n* A MODULE NAME MAY BE REMOVED FROM THE DYNAMIC BLDL LIST SO* 12/85 GPM\n* THAT A NEW COPY CAN BE LOADED THE NEXT TIME IT IS CALLED. * 12/85 GPM\n* THIS MAY BE DONE WITHOUT IMPACTING THE REST OF THE DYNAMIC* 12/85 GPM\n* TABLE.  TO REMOVE A MODULE FROM THE DYNAMIC TABLE, USE THE* 12/85 GPM\n* FOLLOWING OPERATOR COMMAND:                               * 12/85 GPM\n*                                                           * 12/85 GPM\n*      S DYNABLDL,PARM=MEMBERNAME                           * 12/85 GPM\n*                                                           * 12/85 GPM\n* NOTE THAT THE MEMBER NAME TO BE REFRESHED CANNOT BE P, R, * 12/85 GPM\n* S, REPORT, START OR STOP. ALSO NOTE THAT IF THE MODULE    * 12/85 GPM\n* APPEARS IN THE STATIC BLDL LIST, THEN IT CANNOT BE BLDL   * 12/85 GPM\n* REFRESHED THROUGH THESE MEANS.  YOU MAY WISH TO CONSIDER A* 12/85 GPM\n* RELATIVELY SMALL (OR NO) IEABLD00 LIST AND ALLOW THE      * 12/85 GPM\n* DYNAMIC FACILITY TO MANAGE THE ENTIRE BLDL FUNCTION.      * 12/85 GPM\n*                                                           * 12/85 GPM\n************************************************************* 11/83 DBC\n         TITLE 'IHASVC MACRO'                                 11/83 DBC\n         MACRO                                                11/83 DBC\n         IHASVC &D                                            11/83 DBC\nSVC      DSECT ,                                              11/83 DBC\nSVCENTRY DS    0XL8                SVC TABLE ENTRY            11/83 DBC\nSVCEP    DS    A                   A(SVC ROUTINE)             11/83 DBC\nSVCATTR1 DS    BL2                 ATTRIBUTES                 11/83 DBC\nSVCTP1   EQU   B'00000000'         TYPE 0                     11/83 DBC\nSVCTP2   EQU   B'10000000'         TYPE 2                     11/83 DBC\nSVCTP34  EQU   B'11000000'         TYPE 3/4                   11/83 DBC\nSVCTP6   EQU   B'00100000'         TYPE 6                     11/83 DBC\nSVCAPF   EQU   B'00001000'         CALLER MUST BE AUTHORIZED  11/83 DBC\nSVCESR   EQU   B'00000100'         \"ESR\" SVC                  11/83 DBC\nSVCNP    EQU   B'00000010'         NON-PREEMPTIVE SVC         11/83 DBC\nSVCLOCKS DS    BL2                 LOCK ATTRIBUTES            11/83 DBC\nSVCLL    EQU   B'10000000'         LOCAL LOCK                 11/83 DBC\nSVCCMS   EQU   B'01000000'         CMS LOCK                   11/83 DBC\nSVCOPT   EQU   B'00100000'         OPT LOCK                   11/83 DBC\nSVCALLOC EQU   B'00010000'         SALLOC LOCK                11/83 DBC\nSVCDISP  EQU   B'00001000'         DISP LOCK                  11/83 DBC\n         MEND                                                 11/83 DBC\n         TITLE '@ZAP MACRO'                                   11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        THIS MACRO BUILDS A ROUTINE TO DYNAMICALLY ADJUST  * 11/83 DBC\n*        AT EXECUTION TIME THOSE MACHINE INSTRUCTIONS THAT  * 11/83 DBC\n*        REFERENCE PRIVATE IBM DATA FIELDS.                 * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MACRO                                                11/83 DBC\n&N       @ZAP  &X                                             11/83 DBC\n         GBLA  &@ZAP#,&@ZCNT,&@ZAPFO(1024)                    11/83 DBC\n         GBLC  &@ZAPZN(1024),&@ZAPFN(1024)                    11/83 DBC\n         LCLA  &F#,&FO,&SIGN                                  11/83 DBC\n         LCLC  &ZN,&CN,&FN,&NN,&VALUE,&C1                     11/83 DBC\n         AIF   ('&X' EQ '').DUMP                              11/83 DBC\n.*                                                            11/83 DBC\n&@ZAP#   SETA  &@ZAP#+1                                       11/83 DBC\n&ZN      SETC  'ZAP&@ZAP#'                                    11/83 DBC\n         AIF   ('&N' EQ '').GOTZN                             11/83 DBC\n&ZN      SETC  '&N'                                           11/83 DBC\n.GOTZN   ANOP                                                 11/83 DBC\n&ZN      DS    0H                                             11/83 DBC\n.*                                                            11/83 DBC\n&F#      SETA  0                                              11/83 DBC\n.LP1     AIF   (&F# GE N'&SYSLIST).END1                       11/83 DBC\n&F#      SETA  &F#+1                                          11/83 DBC\n&@ZCNT   SETA  &@ZCNT+1                                       11/83 DBC\n&@ZAPZN(&@ZCNT) SETC '&ZN'                                    11/83 DBC\n&@ZAPFN(&@ZCNT) SETC '&SYSLIST(&F#,1)'                        11/83 DBC\n&VALUE   SETC  '&SYSLIST(&F#,2)'                              11/83 DBC\n&C1      SETC  '&VALUE'(1,1)                                  11/83 DBC\n&SIGN    SETA  1                                              11/83 DBC\n         AIF   ('&C1' NE '+' AND '&C1' NE '-').GOTNUM         11/83 DBC\n&VALUE   SETC  '&VALUE'(2,K'&VALUE-1)                         11/83 DBC\n         AIF   ('&C1' EQ '+').GOTNUM                          11/83 DBC\n&SIGN    SETA  -1                                             11/83 DBC\n.GOTNUM  ANOP                                                 11/83 DBC\n&@ZAPFO(&@ZCNT) SETA &SIGN*&VALUE                             11/83 DBC\n         AGO   .LP1                                           11/83 DBC\n.*                                                            11/83 DBC\n.END1    MEXIT                                                11/83 DBC\n.*                                                            11/83 DBC\n.*                                                            11/83 DBC\n.*                                                            11/83 DBC\n.DUMP    ANOP                                                 11/83 DBC\n&NN      SETC  '&N'                                           11/83 DBC\n&F#      SETA  0                                              11/83 DBC\n.LP2     AIF   (&F# GE &@ZCNT).END2                           11/83 DBC\n&F#      SETA  &F#+1                                          11/83 DBC\n         AIF   ('&ZN' EQ '&@ZAPZN(&F#)').NSPACE               11/83 DBC\n         SPACE 1                                              11/83 DBC\n&ZN      SETC  '&@ZAPZN(&F#)'                                 11/83 DBC\n.NSPACE  ANOP                                                 11/83 DBC\n&FN      SETC  '&@ZAPFN(&F#)'                                 11/83 DBC\n&FO      SETA  &@ZAPFO(&F#)                                   11/83 DBC\n&C1      SETC  '+'                                            11/83 DBC\n         AIF   (&FO GE 0).GOTSIGN                             11/83 DBC\n&C1      SETC  '-'                                            11/83 DBC\n.GOTSIGN ANOP                                                 11/83 DBC\n         AIF   (&FO/2*2 NE &FO).IMED                          11/83 DBC\n&NN      LH    R0,&ZN&C1&FO                                   11/83 DBC\n&NN      SETC  ''                                             11/83 DBC\n         AH    R0,&FN                                         11/83 DBC\n         STH   R0,&ZN&C1&FO                                   11/83 DBC\n         AGO   .LP2                                           11/83 DBC\n.IMED    ANOP                                                 11/83 DBC\n&NN      OC    &ZN&C1&FO.(1),&FN                              11/83 DBC\n&NN      SETC  ''                                             11/83 DBC\n         AGO   .LP2                                           11/83 DBC\n.*                                                            11/83 DBC\n.END2    ANOP                                                 11/83 DBC\n&@ZCNT   SETA  0                                              11/83 DBC\n         MEND                                                 11/83 DBC\n         TITLE 'IBM CONTROL BLOCK MAPS'                       11/83 DBC\n         PUNCH '         SETCODE AC(1)'                       11/83 DBC\n         SPACE 3                                              11/83 DBC\nDYNABLDL CSECT ,                                              11/83 DBC\n         PRINT NOGEN                                          11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        CVT = COMMUNICATIONS VECTOR TABLE                  * 11/83 DBC\n*        CVTFIX = PREFIX AND BASIC SECTIONS DSECT           * 11/83 DBC\n*        CVTFIX = PREFIX SECTION BASE                       * 11/83 DBC\n*        CVTMAP = BASIC SECTION BASE                        * 11/83 DBC\n*        CVTXTNT1 = OS COMMON EXTENSION DSECT AND BASE      * 11/83 DBC\n*        CVTXTNT2 = VS1/VS2 COMMON EXTENSION DSECT AND BASE * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         CVT   DSECT=YES,PREFIX=YES,LIST=YES                  11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        DCB = DATA CONTROL BLOCK                           * 11/83 DBC\n*        IHADCB = DSECT AND BASE                            * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         DCBD  DSORG=(PS,PO)                                  11/83 DBC\n         SPACE 3                                              08/84 DBC\n************************************************************* 08/84 DBC\n*        PDS2 = PARTITIONED DATASET DIRECTORY ENTRIES FOR   * 08/84 DBC\n*               LOAD MODULES AS SHOWN BY THE BLDL SVC.      * 08/84 DBC\n*        PDS2 = DSECT AND BASE                              * 08/84 DBC\n************************************************************* 08/84 DBC\n         SPACE 1                                              08/84 DBC\n         IHAPDS ,                                             08/84 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        SCVT = SECONDARY COMMUNICATIONS VECTOR TABLE       * 11/83 DBC\n*        SCVTSECT = DSECT AND BASE                          * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         IHASCVT LIST=YES                                     11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        SVCTABLE = SVC TABLE ENTRY                         * 11/83 DBC\n*        SVC = DSECT AND BASE                               * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         IHASVC ,                                             11/83 DBC\nSVCENTLN EQU   *-SVC               TABLE ENTRY LENGTH         11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        STANDARD REGISTER NAMES                            * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         #REGS R,                  STANDARD REGISTER NAMES    11/83 DBC*\n               (BLDLBASE,R10),     IGC018 LOCATION POINTER    11/83 DBC*\n               (VERSBASE,R9),      SPECIFIC VERSION VECTOR PT 11/83 DBC*\n               (TABLBASE,R8)       HOOK ROUTINES AREA BASE    11/83 DBC\n         SPACE 1                                              11/83 DBC\nBLDLSVC  EQU   18                  BLDL SVC NUMBER            11/83 DBC\nENTRYCNT EQU   512                 DYNAMIC LIST SIZE          12/85 GPM\nCLOKSHFT EQU   10                  A SHIFT VALUE FOR          11/83 DBC\n*                                  SELECTING BITS 10-41 OF    11/83 DBC\n*                                  THE TOD CLOCK. NOTE, THESE 11/83 DBC\n*                                  ARE THE SAME BITS USED BY  11/83 DBC\n*                                  THE SRM FOR ITS INTERVAL   11/83 DBC\n*                                  TIMINGS.                   11/83 DBC\nLINKSVC  EQU   1                   BLDL'S SIGNAL RETURNED TO  11/83 DBC\n*                                  THE USER THAT THE          11/83 DBC\n*                                  DIRECTORY ENTRY WAS FOUND  11/83 DBC\n*                                  IN EITHER SVCLIB OR A      11/83 DBC\n*                                  LINKLIST LIBRARY.          11/83 DBC\nLEN3270  EQU   79                  LENGTH OF A 3270 DISPLAY   11/83 DBC\n*                                  LINE                       11/83 DBC\n         SPACE 1                                              11/83 DBC\n         #PUT  SUBAD=PUTWTO,MF=INIT                           11/83 DBC\n         SPACE 3                                              11/83 DBC\n         PRINT ON,GEN,NODATA                                  11/83 DBC\n         EJECT ,                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        BLDLIST -- THIS DSECT MAPS PLIST HEADER FIELDS     * 11/83 DBC\n*        THAT A USER OF THE BLDL SVC PASSES TO BLDL.        * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nBLDLIST  DSECT ,                   BLDL PLIST HEADER          11/83 DBC\nBLDENTS  DS    H                   NUMBER OF ELEMENTS BEING   11/83 DBC\n*                                  PASSED                     11/83 DBC\nBLDELEN  DS    H                   THE LENGTH OF EACH ELEMENT 11/83 DBC\nBLDENT   DS    0C                  THE START OF THE FIRST     11/83 DBC\n*                                  ELEMENT                    11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        PDS1 -- THIS DSECT MAPS A PDS DIRECTORY ENTRY.     * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nPDS1     DSECT ,                   PDS DIRECTORY ENTRY        11/83 DBC\nPDS1NAME DS    CL8                 MEMBER NAME                11/83 DBC\nPDS1TTRP DS    XL3                 MEMBER'S TTR IN THE DASD   11/83 DBC\n*                                  LIBRARY                    11/83 DBC\nPDS1INDC DS    B                   FLAGS & L'UDATA/2          11/83 DBC\nPDS1LUSR EQU   B'00011111'         LENGTH BITS                11/83 DBC\nPDS1USRD DS    0X                  USER DATA FIELDS           11/83 DBC\n         TITLE 'DYNAHEAD DSECT'                               11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        DYNAHEAD -- THIS DSECT MAPS THE DYNAMIC AREA       * 11/83 DBC\n*        DESCRIPTOR TABLE.                                  * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nDYNAHEAD DSECT ,                                              11/83 DBC\nDHID     DC    CL8'DYNAHEAD'       ID FIELD                   11/83 DBC\nAREA     DC    A(DYNAHEAD)         A(DYNA AREA)               11/83 DBC\nAREASPLN DS    A                   AREA'S SUBPOOL AND LENGTH  11/83 DBC\nSRCHPOPT DS    A                   A(SRCHPDS HOOK ROUTINE)    11/83 DBC\nDFOUNDPT DS    A                   A(DFOUND HOOK ROUTINE)     11/83 DBC\n         SPACE 1                                              11/83 DBC\nDYNAFIRS DC    A(*-*)            | --> FIRST DYNALIST ENTRY   11/83 DBC\nDYNAELEN DC    A(DYNLLEN)        | L' EACH DYNLLIST ENTRY     11/83 DBC\nDYNALAST DC    A(*-*+(ENTRYCNT-1)*DYNLLEN) --> LAST ENTRY     11/83 DBC\nDYNACLOK DS    F                   STARTUP TIME (BITS 10-41)  11/83 DBC\nDYNAHITS DC    F'0'                LIST HITS                  11/83 DBC\nDYNAMISS DC    F'0'                LIST MISSES                11/83 DBC\nDYNADDED DC    F'0'                NAMES ADDED TO LIST        11/83 DBC\n*                                  (INCLUDING STEALS)         11/83 DBC\nDHEADLEN EQU   *-DYNAHEAD          L'HEADER                   11/83 DBC\n         TITLE 'DYNL DSECT'                                   11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        DYNL -- THIS DSECT MAPS A DYNAMIC BLDL LIST ENTRY. * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nDYNL     DSECT ,                                              11/83 DBC\nDYNLLRU# DS    F                   L.R.U. ALGORYTHM CONTROL   11/83 DBC\nDYNLHITS DS    F                   HIT COUNT                  11/83 DBC\nDYNLCLOK DS    F                   ENTRY CREATION TIME        11/83 DBC\nDYNLELEN DS    H                   L'DIRECTORY ENTRY IN THIS  11/83 DBC\n*                                  SLOT                       11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        GENERAL FORMAT PDS DIRECTORY ENTRY                 * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nDENT     DS    0D                                             11/83 DBC\nDENTNAME DS    CL8                 MEMBER NAME. NOTE, THIS    11/83 DBC\n*                                  FIELD MUST BE DWORD        11/83 DBC\n*                                  ALIGNED DUE TO A \"CDS\"     11/83 DBC\n*                                  INSTRUCTION THAT IS ISSUED 11/83 DBC\n*                                  AGAINST IT                 11/83 DBC\nDYNLLOCK EQU   DENTNAME+3-DENTNAME LOCAL CONTROL LOCK BYTE    11/83 DBC\nUNLOCKED EQU   C' '                LOCAL CONTROL LOCK FLAG    11/83 DBC\nDENTTTRP DS    XL3                 MEMBER'S TTR IN THE DASD   11/83 DBC\n*                                  LIBRARY                    11/83 DBC\nDENTCNCT DS    FL1                 LIBRARY CONCATENATION      11/83 DBC\n*                                  INDEX                      11/83 DBC\nDENTLIBF DC    AL1(LINKSVC)        ORIGINATING LIBRARY TYPE   11/83 DBC\n*                                  ALWAYS \"LINKLIST LIB\")     11/83 DBC\nDENTINDC DS    B                   FLAGS & L'UDATA/2          11/83 DBC\nDENTLUSR EQU   B'00011111'         LENGTH BITS                11/83 DBC\nDENTUSRD DS    XL(DENTLUSR*2)      USER DATA (MAX LENGTH)     11/83 DBC\nDENTLEN  EQU   *-DENT              MAX D'ENTRY LENGTH         11/83 DBC\n         SPACE 1                                              11/83 DBC\nDYNLEND  DS    0D                  ALIGNMENT                  11/83 DBC\nDYNLLEN  EQU   DYNLEND-DYNL        L'DYNAMIC BLDL LIST ENTRY  11/83 DBC\n         TITLE 'IGC018 DSECT'                                 11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        IGC018 -- THIS IS A DUMMY DSECT USED SIMPLY TO     * 11/83 DBC\n*        SHOW WHERE, IN THE CODE, \"BLDLBASE\" IS LOADED AND  * 11/83 DBC\n*        WHERE IT IS NOT.                                   * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nIGC018   DSECT ,                                              11/83 DBC\n         TITLE 'VERSION DSECT'                                11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        VERSION -- THIS DSECT MAPS A VECTOR CONTAINING     * 11/83 DBC\n*        POINTERS TO THE FOUR PARTS OF A VERSION TABLE.     * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nVERSION  DSECT ,                                              11/83 DBC\nIDVV     DS    A                   --> VERSION VERIFIER       11/83 DBC\nSRCHPOVV DS    A                   --> ORIGINAL \"SRCHPDS\" COD 11/83 DBC\nDFOUNDVV DS    A                   --> ORIGINAL \"DFOUND\" CODE 11/83 DBC\nDATAOFFS DS    A                   --> IBM DATA FIELDS DESCRIPTORS  DBC\n         TITLE 'ORIGINAL DSECT'                               11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        ORIGINAL -- THIS DSECT MAPS CONTROL BLOCKS (PARTS  * 11/83 DBC\n*        ONE, TWO, AND THREE OF THE VARIOUS VERSION TABLES) * 11/83 DBC\n*        THAT DESCRIBE SECTIONS OF ORIGINAL CODE IN IGC018. * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nORIGINAL DSECT ,                                              11/83 DBC\nORIGLOC  DS    Y                   OFFSET TO ORIGINAL CODE'S LOCATION C\nORIGLEN  DS    Y                   ORIGINAL CODE'S LENGTH     11/83 DBC\nORIGCODE DS    0X                  ORIGINAL CODE              11/83 DBC\n         TITLE 'FIELDS DSECT'                                 11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        FIELDS -- THIS DSECT MAPS TABLES THAT DESCRIBE IBM * 11/83 DBC\n*        PRIVATE DATA FIELDS. EACH ENTRY CORRESPONDS EITHER * 11/83 DBC\n*        TO A DATA FIELD OR TO IMMEDIATE DATA THAT DYNABLDL * 11/83 DBC\n*        REFERENCES BUT THAT IS PRIVATE TO IBM AND,         * 11/83 DBC\n*        THEREFORE, MAY CHANGE ACCROSS VARIOUS VERSIONS OF  * 11/83 DBC\n*        IGC018.                                            * 11/83 DBC\n*                                                           * 11/83 DBC\n*        DATA FIELD ENTRIES CONSIST OF AN S-CON             * 11/83 DBC\n*        (BASE-REGISTER/DISPLACEMENT) WHICH CAN BE USED TO  * 11/83 DBC\n*        REFERENCE THAT FIELD IN A PARTICULAR VERSION OF    * 11/83 DBC\n*        IGC018.                                            * 11/83 DBC\n*                                                           * 11/83 DBC\n*        \"IMMEDIATE DATA\" ENTRIES CONSIST OF A SINGLE BYTE  * 11/83 DBC\n*        CONTAINING THE ACTUAL BIT PATTERN USED BY A        * 11/83 DBC\n*        PARTICULAR VERSION OF IGC018 TO REPRESENT THE      * 11/83 DBC\n*        IMMEDIATE DATA.                                    * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nFIELDS   DSECT ,                                              11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        VARIOUS BASE REGISTERS USED BY IGC018.             * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nRBASE    DS    S                   IGC018'S PROGRAM BASE      11/83 DBC\n*                                  REGISTER DESCRIPTOR. THIS  11/83 DBC\n*                                  S-CON GIVES THE            11/83 DBC\n*                                  PROGRAMMING BASE REGISTER  11/83 DBC\n*                                  (USUALLY R12) AND THE      11/83 DBC\n*                                  RELATIVE BASE ADDRESS      11/83 DBC\n*                                  (USUALLY +2) USED BY       11/83 DBC\n*                                  IGC018.                    11/83 DBC\n         SPACE 1                                              11/83 DBC\nRPDS1    DS    S                   REGISTER USED BY IGC018 TO 11/83 DBC\n*                                  POINT TO THE FOUND PDS     11/83 DBC\n*                                  DIRECTORY ENTRY AT THE     11/83 DBC\n*                                  TIME THAT \"DFOUND\" IS      11/83 DBC\n*                                  CALLED.                    11/83 DBC\nRLIST    DS    S                   REGISTER USED BY IGC018 TO 11/83 DBC\n*                                  POINT TO THE USER'S BLDL   11/83 DBC\n*                                  PARAMETER LIST.            11/83 DBC\nRDCB     DS    S                   REGISTER USED BY IGC018 TO 11/83 DBC\n*                                  POINT TO THE DCB FOR THE   11/83 DBC\n*                                  LIBRARIES CURRENTLY BEING  11/83 DBC\n*                                  SEARCHED.                  11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        FIELDS IN IGC018'S DYNAMIC WORK AREA               * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nRDAREA   DS    S                   BASE/DISPLACEMENT          11/83 DBC\n*                                  NOTE, THIS FIELD IS A 256  11/83 DBC\n*                                  BYTE DIRECTORY BLOCK       11/83 DBC\n*                                  BUFFER WHOSE INTERNAL      11/83 DBC\n*                                  STRUCTURE IS PUBLIC AND    11/83 DBC\n*                                  WHICH, AT THE TIME THE     11/83 DBC\n*                                  SRCHPDS HOOK ROUTINE IS    11/83 DBC\n*                                  CALLED, CAN BE USED BY     11/83 DBC\n*                                  DYNABLDL FOR ITS OWN       11/83 DBC\n*                                  PURPOSES.                  11/83 DBC\n         SPACE 1                                              11/83 DBC\nCONCAT#  DS    S                   BASE/DISPLACEMENT          11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        FIELDS IN IGC018'S SVRB EXTENDED SAVE AREA         * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nEXSKEY   DS    S                   BASE/DISPLACEMENT          11/83 DBC\nEXSFLG   DS    S                   BASE/DISPLACEMENT          09/84 DBC\nEXSBLDL  DS    B                   FLAG'S BIT VALUE           09/84 DBC\n         SPACE 3                                              11/83 DBC\nFIELDSLN EQU   *-FIELDS            L'DATA AREA                11/83 DBC\n         TITLE 'DYNAWA DSECT'                                 11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        DYNAWA -- DYNAMIC WORK AREA USED BY THE TWO HOOK   * 11/83 DBC\n*        ROUTINES. THE \"SRCHPDS\" ROUTINE MAPS THIS AREA     * 11/83 DBC\n*        INTO THE \"RDAREA\" FIELD OF BLDL'S \"WORKAREA\" DSECT * 11/83 DBC\n*        WHICH IS AN I/O BUFFER FOR DIRECTORY BLOCKS AND IS * 11/83 DBC\n*        NOT IN USE AT THE TIME THAT \"SRCHPDS\" IS CALLED.   * 11/83 DBC\n*        THE \"DFOUND\" ROUTINE HAS TO GETMAIN ITS \"DYNAWA\"   * 11/83 DBC\n*        AREA SINCE THE \"RDAREA\" FIELD IS IN USE AT THE     * 11/83 DBC\n*        TIME THAT \"DFOUND\" IS CALLED.                      * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nDYNAWA   DSECT ,                   LOCAL DYNAMIC WORK AREA    11/83 DBC\nREGSAVE  DS    13A                 REGISTER SAVE AREA         11/83 DBC\nCLOKSAVE DS    2A                  \"STCK\" BUFFER              11/83 DBC\nKEYSAVE  DS    X                   CALLER'S KEY SAVE AREA     11/83 DBC\nUSERKEY  DS    X                   USER'S KEY SAVE AREA       11/83 DBC\nBLDLFLG  DS    B                   IGC018'S EXSFLG SAVE AREA  09/84 DBC\nCCIDSAVE DS    X                   CONCATENATION INDEX SAVE A 11/83 DBC\nDYNAWAL  EQU   *-DYNAWA            L'DYNAWA                   11/83 DBC\n         #TEST SIZE=(DYNAWAL,LE,256) MUST FIT WITHIN IGC018'S 11/83 DBC*\n                                   \"RDAREA\" FIELD             11/83 DBC\n         TITLE 'INFO DSECT'                                   11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        INFO -- THIS DSECT MAPS THE INFORMATION MESSAGE    * 11/83 DBC\n*        PRINTED BY THE REPORT FUNCTION FOR EACH DYNAMIC    * 11/83 DBC\n*        BLDL TABLE ENTRY. NOTE, EACH MESSAGE LINE CONTAINS * 11/83 DBC\n*        THREE SEGMENTS. THE FIRST CONTAINS INFORMATION     * 11/83 DBC\n*        SORTED BY BLDL MEMBER NAME. THE SECOND CONTAINS    * 11/83 DBC\n*        INFORMATION SORTED BY HITS FREQUENCY. THE THIRD    * 11/83 DBC\n*        CONTAINS INFORMATION SORTED BY LEAST RECENT USAGE. * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nINFO     DSECT ,                                              11/83 DBC\nCOUNT    DS    CL3,C' '            MSG LINE NUMBER            11/83 DBC\n         SPACE 1                                              11/83 DBC\nNAMEBAR  DS    C'|',C' '           GUTTER                     11/83 DBC\nNAMENAME DS    CL(L'DENTNAME),C' ' MEMBER NAME                11/83 DBC\nNAMELIB# DS    CL2,C' '            LINKLIST LIB ID NUMBER     11/83 DBC\nNAMEHITS DS    CL5,C' '            HITS COUNT                 11/83 DBC\n         SPACE 1                                              11/83 DBC\nHITSBAR  DS    C'|',C' '           GUTTER                     11/83 DBC\nHITSHITS DS    CL5,C' '            HITS COUNT                 11/83 DBC\nHITSRENT DS    C                   REENTRANT MODULE SIGNAL    08/84 DBC\nHITSNAME DS    CL(L'DENTNAME),C' ' MEMBER NAME                11/83 DBC\nHITSIDLE DS    CL4,C' '            ENTRY'S IDLE TIME          11/83 DBC\nHITSAGE  DS    CL4,C' '            ENTRY AGE                  11/83 DBC\n         SPACE 1                                              11/83 DBC\nLRUBAR   DS    C'|',C' '           GUTTER                     11/83 DBC\nLRUIDLE  DS    CL4,C' '            IDLE INTERVAL              11/83 DBC\nLRUNAME  DS    CL(L'DENTNAME),C' ' MEMBER NAME                11/83 DBC\nLRUHITS  DS    CL5                 HITS COUNT                 11/83 DBC\n         SPACE 1                                              11/83 DBC\nINFOLEN  EQU   *-INFO              MESSAGE LENGTH             11/83 DBC\n         #TEST SIZE=(INFOLEN,LE,LEN3270) SHOULD FIT ON A 3270 11/83 DBC\n         TITLE 'INITIAL ENTRY - FUNCTION SELECTION'           11/83 DBC\n************************************************************* 11/83 DBC\n*        STANDARD NON-REENTRANT ENTRY LINKAGE               * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nDYNABLDL #ENTER '-VERSION 85C DSAC-TAA',BASES=2               12/85 MCC\n         L     R3,0(,R1)           LOAD THE PARM FIELD PTR    11/83 DBC\n         LA    R3,0(,R3)           PURIFY IT                  11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        ENQ TO SERIALIZE DYNABLDL PROCESSING               * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ENQ   MF=(E,SERIALIZ)                                11/83 DBC\n         OI    FLAG,ENQED          SET AUDIT FLAG             11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        GET THE CURRENT T.O.D. ISSOLATE BITS 10-41 WHICH   * 11/83 DBC\n*        MEASURE TIME RANGING FROM ABOUT 1/1000TH OF A      * 11/83 DBC\n*        SECOND UP TO APPROXIMATELY ONE MONTH. NOTE, THIS   * 11/83 DBC\n*        IS THE SAME TIME SCALE USED BY THE SRM FOR ITS     * 11/83 DBC\n*        INTERVAL TIMINGS.                                  * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         STCK  CLOCK               GET THE TOD CLOCK          11/83 DBC\n         LM    R0,R1,CLOCK         LOAD THE VALUE             11/83 DBC\n         SLDL  R0,CLOKSHFT         ISSOLATE BITS 10-41 INTO   11/83 DBC\n*                                  REGISTER 0.                11/83 DBC\n         ST    R0,CLOCK            STORE BACK                 11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        LOCATE THE BLDL SVC ROUTINE (IGC018).              * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     BLDLBASE,CVTPTR     --> CVT                    11/83 DBC\n         L     BLDLBASE,CVTABEND-CVTMAP(,BLDLBASE) --> SCVT   11/83 DBC\n         L     BLDLBASE,SCVTSVCT-SCVTSECT(,BLDLBASE) --> SVCTABLE 3 DBC\n         L     BLDLBASE,SVCENTRY-SVC+BLDLSVC*SVCENTLN(,BLDLBASE) 83 DBC\n*                                  --> IGC018                 11/83 DBC\n         USING IGC018,BLDLBASE     SIGNAL THIS FACT           11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        IDENTIFY WHICH VERSION OF IGC018 IS IN THIS        * 11/83 DBC\n*        SYSTEM.                                            * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LA    R2,VERSIONS-4       --> RECOGNITION VECTOR     11/83 DBC\n         BALR  R4,0                LOAD LOOP POINT            11/83 DBC\n         LA    R2,4(,R2)           --> NEXT TABLES PTR        11/83 DBC\n         ICM   VERSBASE,15,0(R2)   --> SPECIFIC TABLES VECTOR 11/83 DBC\n*                                  EO-RECOG VECTOR?           11/83 DBC\n         BZ    UNRECOGN            YES, IGC018 NOT RECOGNIZED 11/83 DBC\n         USING VERSION,VERSBASE    NO, DCL TABLE VECTOR BASE  11/83 DBC\n         L     R1,IDVV             --> IDENTIFIER CODE        11/83 DBC\n         BAL   R14,VERIFY          DOES IGC018 MATCH THIS?    11/83 DBC\n         BR    R4                  +0 NO, KEEP TRYING         11/83 DBC\n         NOPR  0                      (FILLER)                11/83 DBC\n*                                  +4 YES, PROCEED            11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        THE CURRENT VERSION OF IGC018 HAS BEEN RECOGNIZED. * 11/83 DBC\n*        NOW EXAMINE THE \"SRCHPDS\" HOOK LOCATION TO SEE     * 11/83 DBC\n*        WHAT IT CONTAINS.                                  * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R1,SRCHPOVV         --> VERIFY DATA            11/83 DBC\n         USING ORIGINAL,R1         DCL A BASE FOR IT          11/83 DBC\n         LH    R15,ORIGLOC         GET HOOK OFFSET            11/83 DBC\n         LA    R15,IGC018(R15)     CNVRT TO AN ADDRESS        11/83 DBC\n         CLC   0(SRCHPOAA-SRCHPOHH,R15),SRCHPOHH HAS THE      11/83 DBC\n*                                  SRCHPO HOOK ALREADY BEEN   11/83 DBC\n*                                  SET?                       11/83 DBC\n         BE    VEROK1              YES, PROCEED               11/83 DBC\n         OI    FLAG,SRCHPO00       NO, REMEMBER               11/83 DBC\n         BAL   R14,VERIFY          DOES THE HOOK LOCATION     11/83 DBC\n*                                  CONTAIN WHAT IT OUGHT TO?  11/83 DBC\n         B     BADSTRUC            +0 NO, ERROR               11/83 DBC\n*                                  +4 YES, PROCEED            11/83 DBC\n         DROP  R1                  RELEASE VERIFIER BASE      11/83 DBC\nVEROK1   DS    0H                                             11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        NOW DO THE SAME FOR THE \"DFOUND\" HOOK LOCATION.    * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R1,DFOUNDVV         --> VERIFY DATA            11/83 DBC\n         USING ORIGINAL,R1         DCL A BASE FOR IT          11/83 DBC\n         LH    R15,ORIGLOC         GET HOOK OFFSET            11/83 DBC\n         LA    R15,IGC018(R15)     CNVRT TO AN ADDRESS        11/83 DBC\n         CLC   0(DFOUNDAA-DFOUNDHH,R15),DFOUNDHH HAS THE      11/83 DBC\n*                                  DFOUND HOOK ALREADY BEEN   11/83 DBC\n*                                  SET?                       11/83 DBC\n         BE    VEROK2              YES, PROCEED               11/83 DBC\n         OI    FLAG,DFOUND00       NO, REMEMBER               11/83 DBC\n         BAL   R14,VERIFY          DOES THE HOOK LOCATION     11/83 DBC\n*                                  CONTAIN WHAT IT OUGHT TO?  11/83 DBC\n         B     BADSTRUC            +0 NO, ERROR               11/83 DBC\n*                                  +4 YES, PROCEED            11/83 DBC\n         DROP  R1                  RELEASE VERIFIER BASE      11/83 DBC\nVEROK2   DS    0H                                             11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        EXAMINE THE PARM FIELD TO DETERMINE THE DESIRED    * 11/83 DBC\n*        FUNCTION (\"START\", \"STOP\", OR \"REPORT\").           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         NI    FLAG,255-STOPPING   TURN OFF STOPPING FLAG     12/85 GPM\n         LTR   R3,R3               IS A PARM FIELD SET UP?    11/83 DBC\n         BZ    REPORT              NO, ASSUME \"REPORT\"        12/85 GPM\n         SPACE 1                                              11/83 DBC\n         LA    R15,PARMS-(PRMROOTL-(L'PRMLEN-1)) YES, PRIME   11/83 DBC\n         SR    R2,R2               PRIME LENGTH REGISTER      11/83 DBC\n         BALR  R14,0               LOAD SCAN LOOP HEAD        11/83 DBC\n         LA    R15,PRMROOTL-(L'PRMLEN-1)(R2,R15) --> NEXT ENT 11/83 DBC\n         ICM   R2,3,PRMLEN(R15)    GET L'ENTRY; EO-TABLE?     11/83 DBC\n         BM    REFRESH             YES, SEE IF PARM IS MEMBER 12/85 GPM\n         LA    R2,L'PRMLEN-1(,R2)  NO, GET L'TEXT+L'LENFLD-1  11/83 DBC\n         CLC   0(*-*,R3),PRMTEXT-2(R15) (EXECUTED)            11/83 DBC\n         #TEST SIZE=(PRMTEXT-2,EQ,PRMLEN)                     11/83 DBC\n         EX    R2,*-6              RIGHT ENTRY?               11/83 DBC\n         BNER  R14                 NOT YET, CONTINUE SEARCH   12/85 GPM\n         SPACE 1                                              11/83 DBC\n         L     R15,PRMHNDLR(,R15)  YES, LOAD HANDLER ADDRESS  11/83 DBC\n         BR    R15                 GOTO THE HANDLER           11/83 DBC\n         TITLE 'START -- DYNAMIC BLDL STARTUP ROUTINE'        11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        START -- THIS ROUTINE STARTS UP DYNAMIC BLDL       * 11/83 DBC\n*        PROCESSING.                                        * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        START PROCESSING REQUIRES AUTHORIZATION. TEST THIS * 11/83 DBC\n*        (DRAMATICALLY) BY ATTEMPTING TO AQUIRE SUPERVISOR  * 11/83 DBC\n*        STATE.                                             * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nSTART    MODESET MODE=SUP          SET SUPERVISOR STATE       11/83 DBC\n         OI    FLAG,SUPER          REMEMBER IN SUPER STATE    11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        START PROCESSING CAN PROCEED ONLY IF BOTH IGC018   * 11/83 DBC\n*        HOOKS ARE NOT YET SET. CHECK THIS OUT.             * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         TM    FLAG,SRCHPO00+DFOUND00 ARE BOTH HOOK LOCATIONS 11/83 DBC\n*                                  CLEAR?                     11/83 DBC\n         BZ    DONEB4              NO, BOTH ARE SET; EXIT.    11/83 DBC\n         BM    MESS                NO, ONE IS, ONE ISN'T; THE 11/83 DBC\n*                                  USER MUST INVOKE STOP      11/83 DBC\n*                                  PROCESSING TO CLEAN UP THE 11/83 DBC\n*                                  MESS.                      11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        IGC018 HAS BEEN POSITIVELY RECOGNIZED. NOW ADJUST  * 11/83 DBC\n*        ALL IBM PRIVATE FIELD REFERENCES, CONTAINED IN THE * 11/83 DBC\n*        TWO HOOK ROUTINES (\"SRCHPDS\" AND \"DFOUND\"), SO     * 11/83 DBC\n*        THAT THEY CORRESPOND CORRECTLY TO THE RECOGNIZED   * 11/83 DBC\n*        VERSION OF IGC018. NOTE, I DO THIS NOW, PRIOR TO   * 11/83 DBC\n*        MOVING THE HOOK ROUTINES TO SP245, SO THAT I DON'T * 11/83 DBC\n*        HAVE TO DO IT IN KEY-0.                            * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        DEVELOP A RETURN DESCRIPTOR FOR THE SRCHPDS HOOK.  * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R1,DATAOFFS         --> IBM PRIVATE FIELDS     11/83 DBC\n*                                  DESCRIPTORS                11/83 DBC\n         USING FIELDS,R1           DCL A BASE FOR THEM        11/83 DBC\n         SR    R14,R14             CLEAR FOR INSERT           11/83 DBC\n         ICM   R14,3,RBASE         GET IGC018'S BASE          11/83 DBC\n*                                  DESCRIPTOR                 11/83 DBC\n         SRDL  R14,12              SEPARATE THE DISPLACEMENT  11/83 DBC\n*                                  FROM THE BASE REG          11/83 DBC\n         SRL   R15,20              ALIGN THE DISPLACEMENT     11/83 DBC\n         SLL   R14,12              ALIGN THE REG VALUE        11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R1,SRCHPOVV         --> SRCHPDS VERIFY DATA    11/83 DBC\n         DROP  R1                  RELEASE FIELDS BASE        11/83 DBC\n         USING ORIGINAL,R1         DCL VERIFY DATA BASE       11/83 DBC\n         LNR   R0,R15              GET BASE'S DISPLACEMENT    11/83 DBC\n         AH    R0,ORIGLOC          SUBTR FROM PATCH'S         11/83 DBC\n*                                  DISPLACEMENT               11/83 DBC\n         AH    R0,ORIGLEN          ADD IN THE PATCH'S LENGTH  11/83 DBC\n*                                  TO DETERMINE THE ADDRESS   11/83 DBC\n*                                  OF THE LOCATION PAST THE   11/83 DBC\n*                                  PATCH RELATIVE TO IGC018'S 11/83 DBC\n*                                  BASE REGISTER.             11/83 DBC\n         CL    R0,=X'00000FFF'     BASE REG OVERFLOW?         11/83 DBC\n         #DIE  H,'IGC018 IS LONGER THAN 4K' YES               11/83 DBC\n         OR    R0,R14              NO, GET COMBINED           11/83 DBC\n*                                  BASE/DISPLACEMENT VALUE    11/83 DBC\n         STH   R0,SRCHPOXX         STORE FOR USE BY @ZAP      11/83 DBC\n         DROP  R1                  RELEASE SRCHPDS VERIFY     11/83 DBC\n*                                  DATA BASE                  11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        NOW DO THE SAME FOR THE DFOUND HOOK.               * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R1,DFOUNDVV         --> DFOUND VERIFY DATA     11/83 DBC\n         USING ORIGINAL,R1         DCL VERIFY DATA BASE       11/83 DBC\n         LNR   R0,R15              GET BASE'S DISPLACEMENT    11/83 DBC\n         AH    R0,ORIGLOC          SUBTR FROM PATCH'S         11/83 DBC\n*                                  DISPLACEMENT               11/83 DBC\n         AH    R0,ORIGLEN          ADD IN THE PATCH'S LENGTH  11/83 DBC\n*                                  TO DETERMINE THE ADDRESS   11/83 DBC\n*                                  OF THE LOCATION PAST THE   11/83 DBC\n*                                  PATCH RELATIVE TO IGC018'S 11/83 DBC\n*                                  BASE REGISTER.             11/83 DBC\n         CL    R0,=X'00000FFF'     BASE REG OVERFLOW?         11/83 DBC\n         #DIE  H,'IGC018 IS LONGER THAN 4K' YES               11/83 DBC\n         OR    R0,R14              NO, GET COMBINED           11/83 DBC\n*                                  BASE/DISPLACEMENT VALUE    11/83 DBC\n         STH   R0,DFOUNDXX         STORE FOR USE BY @ZAP      11/83 DBC\n         DROP  R1                  RELEASE DFOUND VERIFY DATA 11/83 DBC\n*                                  BASE                       11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        NOW CALL @ZAP TO ADJUST ALL REFERENCES TO IBM      * 11/83 DBC\n*        PRIVATE DATA FIELDS.                               * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R1,DATAOFFS         --> THE TABLE OF IBM       11/83 DBC\n*                                  PRIVATE FIELD REFERENCE    11/83 DBC\n*                                  DESCRIPTORS.               11/83 DBC\n         L     R15,=A(@ZAP)        --> THE GRAND ADJUSTER     11/83 DBC\n         BALR  R14,R15             ADJUST IBM FIELDS REFS     11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        NOW ALLOCATE GLOBAL, FIXED, KEY-0, FETCH           * 11/83 DBC\n*        ACCESSABLE MEMORY (SP245) INTO WHICH THE HOOK      * 11/83 DBC\n*        ROUTINES AND DYNAMIC BLDL TABLE WILL BE BUILT. THE * 11/83 DBC\n*        AREA WILL BE USED AS FOLLOWS.                      * 11/83 DBC\n*                                                           * 11/83 DBC\n*        - THE \"DYNAHEAD\" TABLE.                            * 11/83 DBC\n*                                                           * 11/83 DBC\n*        - THE \"SRCHPDS\" HOOK ROUTINE CONSTRUCTED AS        * 11/83 DBC\n*          FOLLOWS:                                         * 11/83 DBC\n*          - THE \"SRCHPDS\" CODE RELOCATED FROM THIS MODULE, * 11/83 DBC\n*          - THE \"SRCHPDS\" VERIFIED CODE COPIED FROM        * 11/83 DBC\n*            IGC018,                                        * 11/83 DBC\n*          - THE \"SRCHPOBC\" BRANCH STATEMENT.               * 11/83 DBC\n*                                                           * 11/83 DBC\n*        - THE \"DFOUND\" HOOK ROUTINE CONSTRUCTED AS         * 11/83 DBC\n*          FOLLOWS:                                         * 11/83 DBC\n*          - THE \"DFOUND\" CODE RELOCATED FROM THIS MODULE,  * 11/83 DBC\n*          - THE \"DFOUND\" VERIFIED CODE COPIED FROM IGC018, * 11/83 DBC\n*          - THE \"DFOUNDBC\" BRANCH STATEMENT.               * 11/83 DBC\n*                                                           * 11/83 DBC\n*        - THE DYNAMIC BLDL TABLE, DWORD ALIGNED.           * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        DETERMINE  THE AMOUNT OF MEMORY NEEDED.            * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LA    R0,7                GET DWORD ROUNDER          11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LA    R3,(DHEADLEN+7)/8*8 GET L'DYNAHEAD ROUNDED     11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R1,SRCHPOVV         --> VERIFIER               11/83 DBC\n         LH    R1,ORIGLEN-ORIGINAL(,R1) GET VERIFIED LEN      11/83 DBC\n         LA    R1,SRCHPOLL+L'SRCHPOBC+7(,R1) INCLUDE L'BODY - 11/83 DBC\n         OR    R1,R0                ROUNDED UP TO -           11/83 DBC\n         XR    R1,R0                 DWORD ALIGNMENT          11/83 DBC\n         AR    R3,R1               ACCUMULATE                 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R1,DFOUNDVV         --> VERIFIER               11/83 DBC\n         LH    R1,ORIGLEN-ORIGINAL(,R1) GET VERIFIED LEN      11/83 DBC\n         LA    R1,DFOUNDLL+L'DFOUNDBC+7(,R1) INCLUDE L'BODY - 11/83 DBC\n         OR    R1,R0                ROUNDED UP TO -           11/83 DBC\n         XR    R1,R0                 DWORD ALIGNMENT          11/83 DBC\n         AR    R3,R1               ACCUMULATE                 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LA    R1,DYNLLEN          GET L'DLIST ENTRY          11/83 DBC\n         #TEST SIZE=(DYNLLEN/8*8,EQ,DYNLLEN)                  11/83 DBC\n         MH    R1,=Y(ENTRYCNT)     GET DLIST TABLE SIZE       11/83 DBC\n         AR    R3,R1               ACCUMULATE IT              11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        GETMAIN AND CLEAR THE AREA                         * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MODESET EXTKEY=ZERO,SAVEKEY=PSWKEY,WORKREG=2 KEY0    11/83 DBC\n         OI    FLAG,KEY0           SET AUDIT FLAG             11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ICM   R3,8,=AL1(245)      GET SUBPOOL ID             11/83 DBC\n         GETMAIN R,LV=(R3)         ALLOCATE GLOBAL MEMORY     11/83 DBC\n         LR    TABLBASE,R1         COPY AREA PTR              11/83 DBC\n         USING DYNAHEAD,TABLBASE   DCL A BASE FOR IT          11/83 DBC\n         LR    R0,R1               COPY THE AREA PTR          11/83 DBC\n         LR    R1,R3               COPY THE AREA LENGTH       11/83 DBC\n         SR    R15,R15             PREPARE TO CLEAR THE AREA  11/83 DBC\n         MVCL  R0,R14              CLEAR THE AREA             11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        BEGIN TO CONSTRUCT THE DYNAHEAD TABLE              * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MVC   DHID,=CL8'DYNAHEAD' STORE TABLE ID             11/83 DBC\n         ST    TABLBASE,AREA       SAVE A(AREA)               11/83 DBC\n         ST    R3,AREASPLN         SAVE SP & LEN OF AREA      11/83 DBC\n         MVC   DYNACLOK,CLOCK      COPY TOD BITS 10-41        11/83 DBC\n         LA    R14,DYNAHEAD+(DHEADLEN+7)/8*8 --> PAST TABLE   11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        CONSTRUCT THE SRCHPDS HOOK ROUTINE                 * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ST    R14,SRCHPOAA        STORE IGC018'S POINTER     11/83 DBC\n         ST    R14,SRCHPOPT        STORE A(SRCHPDS HOOK)      11/83 DBC\n         ST    TABLBASE,SRCHPODH   A(DYNAHEAD) --> SRCHPDS    11/83 DBC\n         LA    R0,SRCHPDS          --> SRCHPDS SOURCE         11/83 DBC\n         LA    R1,SRCHPOLL         GET ITS LENGTH             11/83 DBC\n         LR    R15,R1              GET L'SINK                 11/83 DBC\n         MVCL  R14,R0              COPY BODY OF SRCHPDS HOOK  11/83 DBC\n         L     R1,SRCHPOVV         --> VERIFY DATA            11/83 DBC\n         USING ORIGINAL,R1         DCL A BASE FOR IT          11/83 DBC\n         LA    R0,ORIGCODE         --> CODE MATCHED IN IGC018 11/83 DBC\n         LH    R15,ORIGLEN         GET ITS LENGTH             11/83 DBC\n         LR    R1,R15              COPY                       11/83 DBC\n         DROP  R1                  RELEASE VERIFIER BASE      11/83 DBC\n         MVCL  R14,R0              COPY IGC018 CODE           11/83 DBC\n         MVC   0(L'SRCHPOBC,R14),SRCHPOBC COPY RETURN INSTR   11/83 DBC\n         LA    R14,L'SRCHPOBC+7(,R14) ADVANCE -               11/83 DBC\n         SRL   R14,3                SCANNER -                 11/83 DBC\n         SLL   R14,3                 ROUNDED                  11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        CONSTRUCT THE DFOUND HOOK ROUTINE                  * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ST    R14,DFOUNDAA        STORE IGC018'S POINTER     11/83 DBC\n         ST    R14,DFOUNDPT        STORE A(DFOUND HOOK)       11/83 DBC\n         ST    TABLBASE,DFOUNDDH   A(DYNAHEAD) --> DFOUND     11/83 DBC\n         LA    R0,DFOUND           --> DFOUND SOURCE          11/83 DBC\n         LA    R1,DFOUNDLL         GET ITS LENGTH             11/83 DBC\n         LR    R15,R1              GET L'SINK                 11/83 DBC\n         MVCL  R14,R0              COPY BODY OF DFOUND HOOK   11/83 DBC\n         L     R1,DFOUNDVV         --> VERIFY DATA            11/83 DBC\n         USING ORIGINAL,R1         DCL A BASE FOR IT          11/83 DBC\n         LA    R0,ORIGCODE         --> CODE MATCHED IN IGC018 11/83 DBC\n         LH    R15,ORIGLEN         GET ITS LENGTH             11/83 DBC\n         LR    R1,R15              COPY                       11/83 DBC\n         DROP  R1                  RELEASE VERIFIER BASE      11/83 DBC\n         MVCL  R14,R0              COPY IGC018 CODE           11/83 DBC\n         MVC   0(L'DFOUNDBC,R14),DFOUNDBC COPY RETURN INSTR   11/83 DBC\n         LA    R14,L'DFOUNDBC+7(,R14) ADVANCE -               11/83 DBC\n         SRL   R14,3                SCANNER -                 11/83 DBC\n         SLL   R14,3                 ROUNDED                  11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        CONSTRUCT THE DYNAMIC LIST TABLE DESCRIPTOR AND    * 11/83 DBC\n*        SKELETON.                                          * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ST    R14,DYNAFIRS        STORE SO-TABLE             11/83 DBC\n         LA    R0,DYNLLEN          GET L'ENTRY                11/83 DBC\n         ST    R0,DYNAELEN         STORE                      11/83 DBC\n         LR    R1,R0               COPY                       11/83 DBC\n         MH    R1,=Y(ENTRYCNT-1)   GET OFFSET TO LAST ENTRY   11/83 DBC\n         AR    R1,R14              CNVRT TO ADDRESS           11/83 DBC\n         ST    R1,DYNALAST         STORE                      11/83 DBC\n         SPACE 1                                              11/83 DBC\n         USING DYNL,R14            DCL DYNL ENTRY BASE        11/83 DBC\nDYNLINIT OI    DENTNAME+DYNLLOCK,UNLOCKED \"NOT LOCKED\"        11/83 DBC\n         BXLE  R14,R0,DYNLINIT     LOOP FOR ALL ENTRIES       11/83 DBC\n         DROP  R14                 RELEASE DYNL ENTRY BASE    11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        COPY THE HOOKS TO IGC018.                          * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R1,DFOUNDVV         --> VERIFY DATA            11/83 DBC\n         LH    R1,ORIGLOC-ORIGINAL(,R1) GET HOOK OFFSET       11/83 DBC\n         LA    R1,IGC018(R1)       GET HOOK ADDRESS           11/83 DBC\n         MVC   0(DFOUNDHL,R1),DFOUNDHH COPY HOOK TO IGC018    11/83 DBC\n         NI    FLAG,255-DFOUND00   REMEMBER HOOK NOW SET      11/83 DBC\n         SPACE 3                                              11/83 DBC\n         L     R1,SRCHPOVV         --> VERIFY DATA            11/83 DBC\n         LH    R1,ORIGLOC-ORIGINAL(,R1) GET HOOK OFFSET       11/83 DBC\n         LA    R1,IGC018(R1)       GET HOOK ADDRESS           11/83 DBC\n         MVC   0(SRCHPOHL,R1),SRCHPOHH COPY HOOK TO IGC018    11/83 DBC\n         NI    FLAG,255-SRCHPO00   REMEMBER HOOK NOW SET      11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        START PROCESSING DONE. CLEAN UP AND EXIT.          * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         DROP  TABLBASE            RELEASE GLOBAL AREA BASE   11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MODESET KEYADDR=PSWKEY,WORKREG=2 RESTORE KEY8        11/83 DBC\n         NI    FLAG,255-KEY0       CLEAR AUDIT FLAG           11/83 DBC\n         SPACE 1                                              11/83 DBC\n         B     STARTED             ISSUE MSG AND EXIT         11/83 DBC\n         TITLE 'STOP -- DYNAMIC BLDL SHUTDOWN ROUTINE'        11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        STOP -- THIS ROUTINE SHUTS DOWN DYNAMIC BLDL       * 11/83 DBC\n*        PROCESSING.                                        * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        STOP PROCESSING REQUIRES AUTHORIZATION. TEST THIS  * 11/83 DBC\n*        (DRAMATICALLY) BY ATTEMPTING TO AQUIRE SUPERVISOR  * 11/83 DBC\n*        STATE.                                             * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nSTOP     DS    0H                                             12/85 GPM\n         OI    FLAG,STOPPING       REMEMBER WE ARE STOPPING   12/85 GPM\n         B     REPORT              GO DO A REPORT FIRST       12/85 GPM\nSTOPA    MODESET MODE=SUP          SET SUPERVISOR STATE       12/85 GPM\n         OI    FLAG,SUPER          REMEMBER IN SUPER STATE    11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        I WILL PROCEED ONLY IF AT LEAST ONE HOOK IS SET.   * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         TM    FLAG,SRCHPO00+DFOUND00 IS EITHER HOOK SET?     11/83 DBC\n         BO    STOPDB4             NO, JUST EXIT              11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        AT LEAST ONE HOOK HAS BEEN PREVIOUSLY SET. LOAD    * 11/83 DBC\n*        KEY0 SO THAT I CAN CLEAR IT (OR THEM).             * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MODESET EXTKEY=ZERO,SAVEKEY=PSWKEY,WORKREG=2         11/83 DBC\n         OI    FLAG,KEY0           SET AUDIT FLAG             11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        CLEAR THE \"DFOUND\" HOOK FIRST.                     * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         BALR  TABLBASE,0          LOAD A NON-ZERO POINTER TO 11/83 DBC\n*                                  AN ACCESSIBLE GARBAGE AREA 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         TM    FLAG,DFOUND00       IS THIS HOOK ALREADY CLER? 11/83 DBC\n         BNZ   CLEARD1             YES, SKIP                  11/83 DBC\n         L     R1,DFOUNDVV         NO, --> VERIFY DATA        11/83 DBC\n         USING ORIGINAL,R1         DCL ITS BASE               11/83 DBC\n         LH    R15,ORIGLOC         GET HOOK'S OFFSET          11/83 DBC\n         LA    R15,IGC018(R15)     GET ITS ADDRESS            11/83 DBC\n         L     TABLBASE,DFOUNDAA-DFOUNDHH(,R15) --> INTERCEPT 11/83 DBC\n         L     TABLBASE,DFOUNDDH-DFOUND(,TABLBASE) -->        11/83 DBC\n*                                  DYNABLDL'S CONTROL TABLE   11/83 DBC\n         MVC   0(DFOUNDHL,R15),ORIGCODE CLEAR THE HOOK        11/83 DBC\n         OI    FLAG,DFOUND00       SET AUDIT FLAG             11/83 DBC\n         DROP  R1                  RELEASE VERIFIER BASE      11/83 DBC\nCLEARD1  DS    0H                                             11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        NOW CLEAR THE \"SRCHPDS\" HOOK.                      * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         TM    FLAG,SRCHPO00       IS THIS HOOK ALREADY CLER? 11/83 DBC\n         BNZ   CLEARD2             YES, SKIP                  11/83 DBC\n         L     R1,SRCHPOVV         NO, --> VERIFY DATA        11/83 DBC\n         USING ORIGINAL,R1         DCL ITS BASE               11/83 DBC\n         LH    R15,ORIGLOC         GET HOOK'S OFFSET          11/83 DBC\n         LA    R15,IGC018(R15)     GET ITS ADDRESS            11/83 DBC\n         CLC   DHID-DYNAHEAD(,TABLBASE),=CL8'DYNAHEAD' IS     11/83 DBC\n*                                  CONTROL TABLE PTR OK?      11/83 DBC\n         BE    GOTDHPTR            YES, PROCEED               11/83 DBC\n         L     TABLBASE,SRCHPOAA-SRCHPOHH(,R15) NO, -->       11/83 DBC\n*                                  INTERCEPT ROUTINE          11/83 DBC\n         L     TABLBASE,SRCHPODH-SRCHPDS(,TABLBASE) -->       11/83 DBC\n*                                  DYNABLDL'S CONTROL TABLE   11/83 DBC\nGOTDHPTR MVC   0(SRCHPOHL,R15),ORIGCODE CLEAR THE HOOK        11/83 DBC\n         OI    FLAG,SRCHPO00       SET AUDIT FLAG             11/83 DBC\n         DROP  R1                  RELEASE VERIFIER BASE      11/83 DBC\nCLEARD2  DS    0H                                             11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        NOW, IF I WAS ABLE TO GET A POINTER TO THE HEADER  * 11/83 DBC\n*        TABLE, THEN FREEMAIN DYNABLDL'S GLOBAL DATA AREA.  * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         CLC   DHID-DYNAHEAD(,TABLBASE),=CL8'DYNAHEAD' DO I   11/83 DBC\n*                                  HAVE A PTR TO THE CONTROL  11/83 DBC\n*                                  TABLE?                     11/83 DBC\n         BNE   FREED               NO, FORGET IT              11/83 DBC\n         USING DYNAHEAD,TABLBASE   YES, DCL HEADER TABLE'S    11/83 DBC\n*                                  BASE                       11/83 DBC\n         L     R1,AREA             --> GLOBAL AREA            11/83 DBC\n         L     R0,AREASPLN         GET ITS SUBPOOL AND LENGTH 11/83 DBC\n         FREEMAIN R,LV=(0),A=(1)   FREE IT                    11/83 DBC\n         DROP  TABLBASE            RELEASE BASE               11/83 DBC\n         SR    TABLBASE,TABLBASE   SET \"TABLE FREED\" SIGNAL   11/83 DBC\nFREED    DS    0H                                             11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        RESTORE KEY8.                                      * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MODESET KEYADDR=PSWKEY,WORKREG=2                     11/83 DBC\n         NI    FLAG,255-KEY0       CLEAR AUDIT FLAG           11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        EXIT ACCORDING TO WHETHER OR NOT I WAS ABLE TO     * 11/83 DBC\n*        FREE THE GLOBAL AREA.                              * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LTR   TABLBASE,TABLBASE   WAS THE GLOBAL AREA FOUND? 11/83 DBC\n         BNZ   PARTSTOP            NO, ISSUE SPECIAL MSG      11/83 DBC\n         B     STOPPED             YES, EXIT NORMALLY         11/83 DBC\n         TITLE 'REPORT -- DYNAMIC BLDL ACTIVITY REPORTING ROUTINE'  DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        REPORT -- THIS ROUTINE GENERATES A REPORT OF       * 11/83 DBC\n*        DYNAMIC BLDL'S ACTIVITY. THREE SORTS OF THE TABLE  * 11/83 DBC\n*        ARE PRINTED IN 3-COLUMN FORMAT. THE FIRST LISTS    * 11/83 DBC\n*        THE TABLE BY MEMBER NAME. THE SECOND LISTS IT BY   * 11/83 DBC\n*        HIT COUNT (MOST HITS TO LEAST HITS). THE THIRD     * 11/83 DBC\n*        LISTS THE TABLE BY L.R.U. CHARACTERISTIC (MOST TO  * 11/83 DBC\n*        LEAST RECENTLY USED). ALSO A SUMMARY MESSAGE IS    * 11/83 DBC\n*        BOTH PRINTED AND DISPLAYED VIA WTO GIVING THE      * 11/83 DBC\n*        \"HIT RATE\" AND OTHER DATA.                         * 11/83 DBC\n*                                                           * 11/83 DBC\n*        OUTPUT IS WRITTEN TO SYSPRINT WHICH CAN HAVE ANY   * 11/83 DBC\n*        RECORD FORMAT AND ANY RECORD LENGTH THAT CAN HOLD  * 11/83 DBC\n*        AT LEAST 79 BYTES OF DATA. NOTE THAT THE RECORD    * 11/83 DBC\n*        LENGTH IS SUITABLE FOR DISPLAY ON A 3270 TERMINAL. * 11/83 DBC\n*                                                           * 11/83 DBC\n*        IF SYSPRINT IS OMITTED, THEN ONLY A SUMMARY        * 11/83 DBC\n*        MESSAGE IS DISPLAYED TO THE OPERATORS.             * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        PROCEED ONLY IF DYNABLDL IS CURRENTLY ACTIVE.      * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nREPORT   TM    FLAG,SRCHPO00+DFOUND00 ARE BOTH HOOKS IN?      11/83 DBC\n         BNZ   DOWN                NO, EXIT                   11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        DYNABLDL IS ACTIVE. LOCATE THE DYNABLDL GLOBAL     * 11/83 DBC\n*        AREA.                                              * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     TABLBASE,DFOUNDVV   --> VERIFY DATA            11/83 DBC\n         LH    TABLBASE,ORIGLOC-ORIGINAL(,TABLBASE) GET HOOK  11/83 DBC\n*                                  OFFSET                     11/83 DBC\n         LA    TABLBASE,IGC018(TABLBASE) CNVRT TO ADDRESS     11/83 DBC\n         L     TABLBASE,DFOUNDAA-DFOUNDHH(,TABLBASE) -->      11/83 DBC\n*                                  \"SRCHPDS\" INTERCEPT        11/83 DBC\n         L     TABLBASE,DFOUNDDH-DFOUND(,TABLBASE) -->        11/83 DBC\n*                                  CONTROL TABLE              11/83 DBC\n         USING DYNAHEAD,TABLBASE   DCL ITS BASE               11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        CONSTRUCT THE FIRST SUMMARY MESSAGE.               * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MVC   STATBUF(11),=C'TABLE LIFE '                    11/83 DBC\n         L     R1,CLOCK            GET CURRENT TIME           11/83 DBC\n*                                  (SECONDS*1024)             11/83 DBC\n         S     R1,DYNACLOK         GET TABLE LIFE             11/83 DBC\n         SRL   R1,CLOKSHFT         CNVRT TO SECONDS           11/83 DBC\n         LA    R1,30(,R1)          ADD ROUNDER                11/83 DBC\n         SR    R0,R0               CLEAR FOR DIVIDE           11/83 DBC\n         D     R0,=F'60'           CNVRT TO MINUTES           11/83 DBC\n         SR    R0,R0               CLEAR AGAIN                11/83 DBC\n         D     R0,=F'60'           CNVRT TO HOURS(R1) & MINS  11/83 DBC\n         BAL   R14,ZONEIT          CNVRT HOURS TO EBCDIC      11/83 DBC\n         MVC   STATBUF+11(*-*),0(R1) (EXECUTED)               11/83 DBC\n         EX    R15,*-6             COPY TO MSG L-J            11/83 DBC\n         LA    R5,STATBUF+12(R15)  LOAD SCANNER               11/83 DBC\n         MVI   0(R5),C':'          DELIMITER                  11/83 DBC\n         CVD   R0,DWORK            CNVRT MINS TO DECIMAL      11/83 DBC\n         UNPK  1(2,R5),DWORK(8)    ZONE IT                    11/83 DBC\n         OI    2(R5),C'0'          FIX THE FUCKING SIGN       11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MVC   3(10,R5),=C', ENTRIES '                        11/83 DBC\n         LM    R1,R3,DYNAFIRS      LOAD TABLE DESCRIPTOR      11/83 DBC\n         LR    R0,R1               SAVE SO-TABLE              11/83 DBC\nENTCNT   CLI   DENTNAME-DYNL(R1),0 UNUSED SLOT YET?           04/84 JLC\n         BE    ENTCNTZ             YES, DONE HERE             11/83 DBC\n         BXLE  R1,R2,ENTCNT        NO, KEEP SCANNING          11/83 DBC\nENTCNTZ  SR    R1,R0               YES, GET LIST SIZE         11/83 DBC\n         SR    R0,R0               CLEAR FIR DIVIDE           11/83 DBC\n         DR    R0,R2               GET # USED SLOTS           11/83 DBC\n         BAL   R14,ZONEIT          CONVERT IT TO EBCDIC       11/83 DBC\n         MVC   13(*-*,R5),0(R1)    (EXECUTED)                 11/83 DBC\n         EX    R15,*-6             COPY IT JEFT JUSTIFIED     11/83 DBC\n         LA    R5,14(R15,R5)       ADVANCE SCANNER            11/83 DBC\n         SPACE 1                                              11/83 DBC\n         CL    R5,=A(STATBUF+L'STATBUF) BUFFER OVERFLOW?      11/83 DBC\n         #DIE  H                   YES, DESIGN ERROR          11/83 DBC\n         LA    R1,STATBUF          NO, --> SO-BUFFER          11/83 DBC\n         SR    R5,R1               GET L'MSG                  11/83 DBC\n         STC   R5,STATBUF-1        STORE FOR OUTPUT ROUTINES  11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        DISPLAY THE FIRST SUMMARY MESSAGE TO THE           * 11/83 DBC\n*        OPERATORS.                                         * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         CH    R5,=Y(WTOMAXL-9)    TOO LONG?                  11/83 DBC\n         BNH   STATLNOK            NO, PROCEED                11/83 DBC\n         LA    R5,WTOMAXL-9        YES, RESET                 11/83 DBC\nSTATLNOK MVC   WTOBUF+L'WTOHEAD(9),=C'DYNABLDL ' INSERT ID    11/83 DBC\n         MVC   WTOBUF+L'WTOHEAD+9(WTOMAXL-9),STATBUF COPY     11/83 DBC\n         LA    R5,9(,R5)           ADJ L'MSG                  11/83 DBC\n         STC   R5,WTOBUF+L'WTOHEAD-1 STORE FOR \"PUTWTO\"       11/83 DBC\n         #PUT  WTOBUF+L'WTOHEAD    DISPLAY THE MESSAGE        11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        CONSTRUCT THE SECOND SUMMARY MESSAGE.              * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MVC   STATBUF2(5),=C'HITS '                          11/83 DBC\n         L     R7,DYNAHITS         LOAD TOTAL HITS COUNT      11/83 DBC\n         LR    R1,R7               COPY FOR CONVERSION        11/83 DBC\n         BAL   R14,ZONEIT          CNVRT TO EBCDIC            11/83 DBC\n         MVC   STATBUF2+5(*-*),0(R1) (EXECUTED)               11/83 DBC\n         EX    R15,*-6             COPY TO MSG                11/83 DBC\n         LA    R5,STATBUF2+6(R15)  ADVANCE SCANNER            11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MVC   0(9,R5),=C', MISSES '                          11/83 DBC\n         ICM   R2,15,DYNAMISS      LOAD TOTAL MISSES; ANY?    11/83 DBC\n         BZ    NO2NDMSG            NO, NO USAGE               11/83 DBC\n         LR    R1,R2               COPY FOR CONVERSION        11/83 DBC\n         BAL   R14,ZONEIT          CNVRT TO EBCDIC            11/83 DBC\n         MVC   9(*-*,R5),0(R1)     (EXECUTED)                 11/83 DBC\n         EX    R15,*-6             COPY TO MSG                11/83 DBC\n         LA    R5,10(R15,R5)       ADVANCE SCANNER            11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MVC   0(13,R5),=C' (GOOD NAMES '                     11/83 DBC\n         L     R3,DYNADDED         GET STEAL COUNT            11/83 DBC\n         LR    R1,R3               COPY FOR CONVERSION        11/83 DBC\n         BAL   R14,ZONEIT          CNVRT TO EBCDIC            11/83 DBC\n         MVC   13(*-*,R5),0(R1)    (EXECUTED)                 11/83 DBC\n         EX    R15,*-6             COPY TO MSG                11/83 DBC\n         LA    R5,14(R15,R5)       ADVANCE SCANNER            11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MVC   0(12,R5),=C', BAD NAMES '                      11/83 DBC\n         LR    R1,R2               GET MISS COUNT             11/83 DBC\n         SR    R1,R3               SUBTR STEAL COUNT          11/83 DBC\n         BAL   R14,ZONEIT          CNVRT TO EBCDIC            11/83 DBC\n         MVC   12(*-*,R5),0(R1)    (EXECUTED)                 11/83 DBC\n         EX    R15,*-6             COPY TO MSG                11/83 DBC\n         LA    R5,13(R15,R5)       ADVANCE SCANNER            11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MVC   0(12,R5),=C'), HIT RATE ' YES                  11/83 DBC\n         AR    R2,R7               TOTAL USE COUNT            11/83 DBC\n         MH    R7,=H'1000'         SHIFT THE DECIMAL PLACE    11/83 DBC\n         SR    R6,R6               CLEAR FOR DIVIDE           11/83 DBC\n         DR    R6,R2               GET HIT RATE TO A 10TH OF  11/83 DBC\n*                                  A PERCENT                  11/83 DBC\n         SR    R1,R1               CLEAR ROUNDER              11/83 DBC\n         AR    R6,R6               DOUBLE THE REMAINDER       11/83 DBC\n         CR    R6,R2               NEED TO ROUND UP?          11/83 DBC\n         BL    NOROUNUP            NO, SKIP                   11/83 DBC\n         LA    R1,1                YES, RESET THE ROUNDER     11/83 DBC\nNOROUNUP AR    R1,R7               COPY AND ROUND FOR CNVRSN  11/83 DBC\n         BAL   R14,ZONEIT          CNVRT TO EBCDIC            11/83 DBC\n         MVC   12(*-*,R5),0(R1)    (EXECUTED)                 11/83 DBC\n         EX    R15,*-6             COPY TO MSG                11/83 DBC\n         LA    R5,12(R15,R5)       --> LAST DIGIT (\"10THS\")   11/83 DBC\n         MVC   1(1,R5),0(R5)       MOVE IT OUT OF THE WAY     11/83 DBC\n         MVI   0(R5),C'.'          INSERT DECIMAL POINT       11/83 DBC\n         MVI   2(R5),C'%'          INSERT PERCENT SIGN        11/83 DBC\n         LA    R5,3(,R5)           ADVANCE SCANNER            11/83 DBC\n         SPACE 1                                              11/83 DBC\n         CL    R5,=A(STATBUF2+L'STATBUF2) BUFFER OVERFLOW?    11/83 DBC\n         #DIE  H                   YES, DESIGN ERROR          11/83 DBC\n         LA    R1,STATBUF2         NO, --> SO-BUFFER          11/83 DBC\n         SR    R5,R1               GET L'MSG                  11/83 DBC\n         STC   R5,STATBUF2-1       STORE FOR OUTPUT ROUTINES  11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        DISPLAY THE SECOND SUMMARY MESSAGE TO THE          * 11/83 DBC\n*        OPERATORS.                                         * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         CH    R5,=Y(WTOMAXL-9)    TOO LONG?                  11/83 DBC\n         BNH   STATLOK2            NO, PROCEED                11/83 DBC\n         LA    R5,WTOMAXL-9        YES, RESET                 11/83 DBC\nSTATLOK2 MVC   WTOBUF+L'WTOHEAD(9),=C'DYNABLDL ' INSERT ID    11/83 DBC\n         MVC   WTOBUF+L'WTOHEAD+9(WTOMAXL-9),STATBUF2 COPY    11/83 DBC\n         LA    R5,9(,R5)           ADJ L'MSG                  11/83 DBC\n         STC   R5,WTOBUF+L'WTOHEAD-1 STORE FOR \"PUTWTO\"       11/83 DBC\n         #PUT  WTOBUF+L'WTOHEAD    DISPLAY THE MESSAGE        11/83 DBC\nNO2NDMSG DS    0H                                             11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        CONSTRUCT THE THIRD SUMMARY MESSAGE.               * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MVC   STATBUF3(14),=C'MAX ENTRY AGE ' TEXT           11/83 DBC\n         LM    R5,R7,DYNAFIRS      DYNA-TABLE DESCRIPTOR      11/83 DBC\n         USING DYNL,R5             DCL SLOT BASE              11/83 DBC\n         ICM   R0,15,DYNLCLOK      ANY SLOTS USED?            11/83 DBC\n         BZ    NO3RDMSG            NO, SKIP THIS MSG          11/83 DBC\nMXAGESCN CL    R0,DYNLCLOK         YES, ALREADY GOT OLDEST    11/83 DBC\n*                                  BIRTHDATE?                 11/83 DBC\n         BNH   MXAGENXT            YES, SKIP                  11/83 DBC\n         ICM   R1,15,DYNLCLOK      NO, GET OLDEST; EO-USED?   11/83 DBC\n         BZ    MXAGEGOT            YES, DONE HERE             11/83 DBC\n         LR    R0,R1               NO, COPY                   11/83 DBC\nMXAGENXT BXLE  R5,R6,MXAGESCN      CONTINUE SCANNING          11/83 DBC\n         DROP  R5                  RELEASE SLOT BASE          11/83 DBC\nMXAGEGOT L     R1,CLOCK            GET CURRENT TIME           11/83 DBC\n         SR    R1,R0               CNVRT BIRTHDATE TO AGE     11/83 DBC\n         SRL   R1,CLOKSHFT         CNVRT TO SECONDS           11/83 DBC\n         LA    R1,30(,R1)          ADD ROUNDER                11/83 DBC\n         SR    R0,R0               CLEAR FOR DIVIDE           11/83 DBC\n         D     R0,=F'60'           CNVRT TO MINUTES           11/83 DBC\n         BAL   R14,ZONEIT          CNVRT TO EBCDIC            11/83 DBC\n         MVC   STATBUF3+14(*-*),0(R1) (EXECUTED)              11/83 DBC\n         EX    R15,*-6             COPY TO MSG                11/83 DBC\n         LA    R4,STATBUF3+15(R15) ADVANCE SCANNER            11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MVC   0(30,R4),=C' MINUTES, MAX ENTRY IDLE TIME '    11/83 DBC\n         LM    R5,R7,DYNAFIRS      DYNA-TABLE DESCRIPTOR      11/83 DBC\n         USING DYNL,R5             DCL SLOT BASE              11/83 DBC\n         L     R0,DYNLLRU#         PRINT LIMIT TESTER         11/83 DBC\nMXIDLELP CL    R0,DYNLLRU#         ALREADY GOT MOST IDLE?     11/83 DBC\n         BNH   MXIDLENX            YES, SKIP                  11/83 DBC\n         ICM   R1,15,DYNLLRU#      NO, GET MOST IDLE; EO-USD? 11/83 DBC\n         BZ    MXIDLEGO            YES, DONE HERE             11/83 DBC\n         LR    R0,R1               NO, COPY                   11/83 DBC\nMXIDLENX BXLE  R5,R6,MXIDLELP      CONTINUE SCANNING          11/83 DBC\n         DROP  R5                  RELEASE SLOT BASE          11/83 DBC\nMXIDLEGO L     R1,CLOCK            GET CURRENT TIME           11/83 DBC\n         SR    R1,R0               CNVRT IDLE TIME TO INTERVA 11/83 DBC\n         SRL   R1,CLOKSHFT         CNVRT TO SECONDS           11/83 DBC\n         LA    R1,30(,R1)          ADD ROUNDER                11/83 DBC\n         SR    R0,R0               CLEAR FOR DIVIDE           11/83 DBC\n         D     R0,=F'60'           CNVRT TO MINUTES           11/83 DBC\n         BAL   R14,ZONEIT          CNVRT TO EBCDIC            11/83 DBC\n         MVC   30(*-*,R4),0(R1)    (EXECUTED)                 11/83 DBC\n         EX    R15,*-6             COPY TO MSG                11/83 DBC\n         LA    R4,31(R15,R4)       ADVANCE SCANNER            11/83 DBC\n         MVC   0(8,R4),=C' MINUTES' MORE TEXT                 11/83 DBC\n         LA    R4,8(,R4)           ADVANCE SCANNER            11/83 DBC\n         SPACE 1                                              11/83 DBC\n         CL    R4,=A(STATBUF3+L'STATBUF3) BUFFER OVERFLOW?    11/83 DBC\n         #DIE  H                   YES, DESIGN ERROR          11/83 DBC\n         LA    R1,STATBUF3         NO, --> SO-BUFFER          11/83 DBC\n         SR    R4,R1               GET L'MSG                  11/83 DBC\n         STC   R4,STATBUF3-1       STORE FOR OUTPUT ROUTINES  11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        DISPLAY THE THIRD SUMMARY MESSAGE TO THE           * 11/83 DBC\n*        OPERATORS.                                         * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         CH    R4,=Y(WTOMAXL-9)    TOO LONG?                  11/83 DBC\n         BNH   STATLOK3            NO, PROCEED                11/83 DBC\n         LA    R4,WTOMAXL-9        YES, RESET                 11/83 DBC\nSTATLOK3 MVC   WTOBUF+L'WTOHEAD(9),=C'DYNABLDL ' INSERT ID    11/83 DBC\n         MVC   WTOBUF+L'WTOHEAD+9(WTOMAXL-9),STATBUF3 COPY    11/83 DBC\n         LA    R4,9(,R4)           ADJ L'MSG                  11/83 DBC\n         STC   R4,WTOBUF+L'WTOHEAD-1 STORE FOR \"PUTWTO\"       11/83 DBC\n         #PUT  WTOBUF+L'WTOHEAD    DISPLAY THE MESSAGE        11/83 DBC\nNO3RDMSG DS    0H                                             11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        ATTEMPT TO OPEN SYSPRINT AND WRITE TITLE AND       * 11/83 DBC\n*        STATUS LINES.                                      * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         OPEN  (SYSPRINT,OUTPUT)   ATTEMPT THE OPEN           11/83 DBC\n         TM    DCBOFLGS-IHADCB+SYSPRINT,DCBOFOPN OPENED?      11/83 DBC\n         BZ    NOSYSP              NO, EXIT                   11/83 DBC\n         SPACE 3                                              12/85 GPM\n************************************************************* 12/85 GPM\n*        PUT DATE AND TIME INTO REPORT HEADER               * 12/85 GPM\n************************************************************* 12/85 GPM\n         SPACE 1                                              12/85 GPM\nGETDATE  DS    0H                                             12/85 GPM\n         TIME  DEC                   GET THE TIME AND DATE    12/85 GPM\n         SRL   R0,4                  R0 = 0HHMMSST            12/85 GPM\n         ST    R0,WORK               WORK = 0HHMMSST          12/85 GPM\n         OI    WORK+3,X'0F'          WORK = 0HHMMSSF          12/85 GPM\n         ED    TIME,WORK             TIME = HH:MM:SS          12/85 GPM\n         MVC   TIME,TIME+1                                    12/85 GPM\n         ST    R1,WORK               WORK = 00YYDDDF          12/85 GPM\n         XC    WORK(2),WORK          WORK = 0000DDDF          12/85 GPM\n         SRL   R1,12                 R1 = 00000YYD            12/85 GPM\n         ST    R1,DWORK+4            DWORK+4 = 00000YYD       12/85 GPM\n         OI    DWORK+7,X'0F'         DWORK+4 = 00000YYF       12/85 GPM\n         UNPK  YY,DWORK+6(2)         STORE THE YEAR           12/85 GPM\n         CVB   R1,DWORK              CONVERT YEAR TO BINARY   12/85 GPM\n         N     R1,=F'3'              LEAP YEAR?               12/85 GPM\n         BNZ   GT10                  IF NOT, BRANCH           12/85 GPM\n         AP    DAYSYEAR,=P'1'        INCREASE DAYS IN YEAR    12/85 GPM\n         AP    MONTH-1,=P'1'         ADD A DAY TO FEBRUARY    12/85 GPM\nGT10     EQU   *                                              12/85 GPM\n         LA    R1,MONTH              POINT TO JANUARY         12/85 GPM\nGT20     EQU   *                                              12/85 GPM\n         SP    WORK,0(1,R1)          SUBTRACT DAYS IN MONTH   12/85 GPM\n         SP    WORK,=P'30'                                    12/85 GPM\n         BNP   GT30                  WHEN NEGATIVE, BR OUT    12/85 GPM\n         BCTR  R1,0                  GO BACKWARDS THRU TABLE  12/85 GPM\n         AP    PCOUNT,=P'1'          COUNT THE MONTHS         12/85 GPM\n         B     GT20                  AND LOOP                 12/85 GPM\nGT30     EQU   *                                              12/85 GPM\n         AP    WORK,0(1,R1)          ADD LAST MONTH BACK IN   12/85 GPM\n         AP    WORK,=P'30'                                    12/85 GPM\n         OI    PCOUNT+L'PCOUNT-1,X'0F' PCOUNT = 0MMF          12/85 GPM\n         UNPK  MM,PCOUNT             STORE THE MONTH          12/85 GPM\n         OI    WORK+3,X'0F'                                   12/85 GPM\n         UNPK  DD,WORK               STORE THE DAY            12/85 GPM\n         #PUT  DYNATIT,SUBAD=PUTSYSP YES, SEND TITLE          11/83 DBC\n         SPACE 1                                              11/83 DBC\n         #PUT  NULL                SEND SPACER                11/83 DBC\n         #PUT  STATBUF             SEND SUMMARY MESSAGE       11/83 DBC\n         SPACE 1                                              11/83 DBC\n         #PUT  STATBUF2            PRINT 2ND MSG, IF ANY      11/83 DBC\n         SPACE 1                                              11/83 DBC\n         #PUT  STATBUF3            PRINT 3RD MSG, IF ANY      11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        DETERMINE THE LOCATION AND SIZE OF THE DYNAMIC     * 11/83 DBC\n*        BLDL TABLE, AND THEN GETMAIN A LOCAL AREA THAT IS  * 11/83 DBC\n*        LARGE ENOUGH TO HOLD THREE COPIES.                 * 05/84 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LM    R5,R7,DYNAFIRS      LOAD THE TABLE DESCRIPTOR  11/83 DBC\n         LR    R1,R5               COPY SCANNER               11/83 DBC\nSIZESCAN CLI   DENTNAME-DYNL(R1),0 EMPTY SLOT YET?            04/84 JLC\n         BE    SIZEGOTN            YES, SIZE FOUND            11/83 DBC\n         BXLE  R1,R6,SIZESCAN      NO, CONTINUE SCANNING      11/83 DBC\nSIZEGOTN SR    R1,R5               EMPTY SLOT FOUND; GET      11/83 DBC\n*                                  TABLE SIZE; EMPTY?         11/83 DBC\n         BNP   EMPTY               YES, EXIT WITH MSG         11/83 DBC\n         LR    R7,R1               NO, SAVE TABLE SIZE        11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LA    R0,0(R1,R1)         DOUBLE IT                  11/83 DBC\n         AR    R0,R1               TRIPLE IT                  11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ST    R0,RTBLSIZE         SAVE FOR FREEMAIN          11/83 DBC\n         GETMAIN R,LV=(0)          GET A LOCAL AREA           11/83 DBC\n         ST    R1,RTBLPTR          SAVE FOR FREEMAIN          11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        NOW MAKE THE FIRST COPY OF THE ACTIVE TABLE, AND   * 11/83 DBC\n*        DETERMINE POINTERS TO WHERE THE OTHER TWO COPIES   * 11/83 DBC\n*        WILL GO.                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LR    R3,R1               SAVE 1ST COPY POINTER      11/83 DBC\n         LR    R14,R5              --> COPY SOURCE            11/83 DBC\n         LR    R15,R7              GET ITS LENGTH             11/83 DBC\n         LR    R0,R3               --> COPY SINK              11/83 DBC\n         LR    R1,R7               GET ITS LENGTH             11/83 DBC\n         MVCL  R0,R14              MAKE THE 1ST COPY          11/83 DBC\n         LR    R4,R0               SAVE SECOND COPY POINTER   11/83 DBC\n         LA    R5,0(R7,R4)         GET 3RD COPY POINTER       11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        SORT THE FIRST COPY OF THE DYNA-TABLE IN           * 11/83 DBC\n*        DESCENDING ORDER BY HITS COUNT.                    * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LR    R15,R7              GET L'LIST                 11/83 DBC\n         LR    R0,R6               GET L'ENTRY                11/83 DBC\n         LR    R1,R3               GET A(LIST)                11/83 DBC\n         LA    R2,SORTHITS         --> COMPARE ROUTINE        11/83 DBC\n         BAL   R14,SORT            SORT THE MOTHER            11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        CREATE AND SORT THE L.R.U. ORDERED LIST.           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LR    R14,R4              --> COPY SINK              11/83 DBC\n         LR    R15,R7              GET L'SINK                 11/83 DBC\n         LR    R0,R3               --> COPY SOURCE            11/83 DBC\n         LR    R1,R7               GET L'COPY SOURCE          11/83 DBC\n         MVCL  R14,R0              MAKE THE 2ND COPY          11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LR    R15,R7              GET L'LIST                 11/83 DBC\n         LR    R0,R6               GET L'ENTRY                11/83 DBC\n         LR    R1,R4               GET A(LIST)                11/83 DBC\n         LA    R2,SORTLRU          --> COMPARE ROUTINE        11/83 DBC\n         BAL   R14,SORT            SORT THE LIST              11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        CREATE AND SORT THE NAME ORDERED LIST.             * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LR    R14,R5              --> COPY SINK              11/83 DBC\n         LR    R15,R7              GET L'SINK                 11/83 DBC\n         LR    R0,R3               --> COPY SOURCE            11/83 DBC\n         LR    R1,R7               GET L'COPY SOURCE          11/83 DBC\n         MVCL  R14,R0              MAKE THE 3RD COPY          11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LR    R15,R7              GET L'LIST                 11/83 DBC\n         LR    R0,R6               GET L'ENTRY                11/83 DBC\n         LR    R1,R5               GET A(LIST)                11/83 DBC\n         LA    R2,SORTNAME         --> COMPARE ROUTINE        11/83 DBC\n         BAL   R14,SORT            SORT THE LIST              11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        PRINT THE TABLE TITLE LINES.                       * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         #PUT  NULL                SPACE                      11/83 DBC\n         #PUT  NULL                SPACE                      11/83 DBC\n         #PUT  SORTTIT             TITLE                      11/83 DBC\n         #PUT  SORTTIT0            SUB-TITLE                  08/84 DBC\n         #PUT  SORTSUBT            SUB-TITLE                  11/83 DBC\n         #PUT  INFOBUF             BARRED SPACER              11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        SCAN THE THREE TABLES SIMULTANIOUSLY TO GENERATE   * 11/83 DBC\n*        THE THREE REPORTS IN 3-COLUMN FORMAT.              * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LA    R2,INFOBUF          --> MSG BUFFER             11/83 DBC\n         USING INFO,R2             DECLARE A BASE FOR IT      11/83 DBC\n         SPACE 1                                              11/83 DBC\n         AR    R7,R3               --> PAST 1ST TABLE         11/83 DBC\n         SR    R7,R6               --> LAST ENTRY (BXLE LIM)  11/83 DBC\n         SPACE 1                                              11/83 DBC\nINFOLOOP MVI   INFO,C' '           CLEAR THE -                11/83 DBC\n         MVC   INFO+1(INFOLEN-1),INFO MESSAGE BUFFER          11/83 DBC\n         MVI   NAMEBAR,C'|'        INSERT GUTTER              11/83 DBC\n         MVI   HITSBAR,C'|'        INSERT GUTTER              11/83 DBC\n         MVI   LRUBAR,C'|'         INSERT GUTTER              11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LA    R1,1                GET INCRIMENT              11/83 DBC\n         AH    R1,COUNTER          INCRIMENT LINE COUNTER     11/83 DBC\n         STH   R1,COUNTER          STORE NEW VALUE            11/83 DBC\n         BAL   R14,ZONEIT          CNVRT TO EBCDIC            11/83 DBC\n         MVC   COUNT,0(R1)         COPY TO MSG L-J            11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        FORMAT INFO FROM THE HITS SORTED TABLE.            * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         USING DYNL,R3             DCL TABLE ENTRY BASE       11/83 DBC\n         MVC   HITSNAME,DENTNAME   MEMBER NAME                11/83 DBC\n         SPACE 1                                              08/84 DBC\n         MVI   HITSRENT,C' '       CLEAR RENT SIGNAL          08/84 DBC\n         TM    PDS2ATR-PDS2+DENT,PDS2RENT REENTRANT MODULE?   08/84 DBC\n         BZ    HINORENT            NO, SKIP                   08/84 DBC\n         MVI   HITSRENT,C'*'       YES, SIGNAL THAT FACT      08/84 DBC\nHINORENT DS    0H                                             08/84 DBC\n         SPACE 1                                              11/83 DBC\n         L     R1,CLOCK            CURRENT TIME (APPROX       11/83 DBC\n*                                  SECONDS*1024)              11/83 DBC\n         S     R1,DYNLLRU#         CNVRT TO INTERVAL          11/83 DBC\n         SRL   R1,CLOKSHFT         CNVRT TO SECONDS           11/83 DBC\n         LA    R1,30(,R1)          ADJUST FOR ROUNDING        11/83 DBC\n         SR    R0,R0               CLEAR FOR DIVIDE           11/83 DBC\n         D     R0,=F'60'           CNVRT TO MINUTES           11/83 DBC\n         BAL   R14,ZONEIT          CNVRT MM TO EBCDIC         11/83 DBC\n         MVC   HITSIDLE,ZONEBUF+L'ZONEBUF-L'HITSAGE COPY      11/83 DBC\n         CLI   ZONEBUF+L'ZONEBUF-L'HITSIDLE-1,C' ' OVERFLOW?  11/83 DBC\n         BE    HIFITS              NO, SKIP                   11/83 DBC\n         MVC   HITSIDLE,=10C'*'    YES, \"SAY SO\"              11/83 DBC\nHIFITS   DS    0H                                             11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R1,CLOCK            CURRENT TIME (APPROX       11/83 DBC\n*                                  SECONDS*1024)              11/83 DBC\n         S     R1,DYNLCLOK         CNVRT TO INTERVAL          11/83 DBC\n         SRL   R1,CLOKSHFT         CNVRT TO SECONDS           11/83 DBC\n         LA    R1,30(,R1)          ADJUST FOR ROUNDING        11/83 DBC\n         SR    R0,R0               CLEAR FOR DIVIDE           11/83 DBC\n         D     R0,=F'60'           CNVRT TO MINUTES           11/83 DBC\n         BAL   R14,ZONEIT          CNVRT MM TO EBCDIC         11/83 DBC\n         MVC   HITSAGE,ZONEBUF+L'ZONEBUF-L'HITSAGE COPY       11/83 DBC\n         CLI   ZONEBUF+L'ZONEBUF-L'HITSAGE-1,C' ' OVERFLOW?   11/83 DBC\n         BE    HAFITS              NO, SKIP                   11/83 DBC\n         MVC   HITSAGE,=10C'*'     YES, \"SAY SO\"              11/83 DBC\nHAFITS   DS    0H                                             11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R1,DYNLHITS         LOAD HITS COUNTER          11/83 DBC\n         BAL   R14,ZONEIT          CNVRT TO EBCDIC            11/83 DBC\n         MVC   HITSHITS,ZONEBUF+L'ZONEBUF-L'HITSHITS COPY     11/83 DBC\n         CLI   ZONEBUF+L'ZONEBUF-L'HITSHITS-1,C' ' OVERFLOW?  11/83 DBC\n         BE    HHFITS              NO, PROCEED                11/83 DBC\n         MVC   HITSHITS,=10C'*'    YES, SIGNAL THAT           11/83 DBC\nHHFITS   DS    0H                                             11/83 DBC\n         SPACE 1                                              11/83 DBC\n         DROP  R3                  RELEASE HITS TABLE ENT BAS 11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        FORMAT INFO FROM THE L.R.U. SORTED TABLE.          * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         USING DYNL,R4             DCL TABLE ENTRY BASE       11/83 DBC\n         MVC   LRUNAME,DENTNAME    MEMBER NAME                11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R1,CLOCK            CRNT TIME IN SECS*1024     11/83 DBC\n         S     R1,DYNLLRU#         CNVRT TO IDLE INTERVAL     11/83 DBC\n         SRL   R1,CLOKSHFT         CNVRT TO APPROX SECS       11/83 DBC\n         LA    R1,30(,R1)          ADD ROUNDER                11/83 DBC\n         SR    R0,R0               CLEAR FOR DIVIDE           11/83 DBC\n         D     R0,=F'60'           CNVRT TO MINUTES           11/83 DBC\n         BAL   R14,ZONEIT          CNVRT MM TO EBCDIC         11/83 DBC\n         MVC   LRUIDLE,ZONEBUF+L'ZONEBUF-L'LRUIDLE  COPY      11/83 DBC\n         CLI   ZONEBUF+L'ZONEBUF-L'LRUIDLE-1,C' ' OVERFLOW?   11/83 DBC\n         BE    LUFITS              NO, PROCEED                11/83 DBC\n         MVC   LRUIDLE,=10C'*'     YES, SAY SO                11/83 DBC\nLUFITS   DS    0H                                             11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R1,DYNLHITS         LOAD HITS COUNTER          11/83 DBC\n         BAL   R14,ZONEIT          CNVRT TO EBCDIC            11/83 DBC\n         MVC   LRUHITS,ZONEBUF+L'ZONEBUF-L'LRUHITS COPY       11/83 DBC\n         CLI   ZONEBUF+L'ZONEBUF-L'LRUHITS-1,C' ' OVERFLOW?   11/83 DBC\n         BE    LHFITS              NO, PROCEED                11/83 DBC\n         MVC   LRUHITS,=10C'*'     YES, SIGNAL THAT           11/83 DBC\nLHFITS   DS    0H                                             11/83 DBC\n         SPACE 1                                              11/83 DBC\n         DROP  R4                  RELEASE DURA TABLE ENT BAS 11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        FORMAT INFO FROM THE NAMES SORTED TABLE.           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         USING DYNL,R5             DCL TABLE ENTRY BASE       11/83 DBC\n         MVC   NAMENAME,DENTNAME   MEMBER NAME                11/83 DBC\n         SPACE 1                                              11/83 DBC\n         SR    R1,R1               CLEAR FOR INSERT           11/83 DBC\n         IC    R1,DENTCNCT         GET LIB#                   11/83 DBC\n         BAL   R14,ZONEIT          CNVRT TO EBCDIC            11/83 DBC\n         MVC   NAMELIB#,0(R1)      COPY TO MSG                11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R1,DYNLHITS         LOAD HITS COUNTER          11/83 DBC\n         BAL   R14,ZONEIT          CNVRT TO EBCDIC            11/83 DBC\n         MVC   NAMEHITS,ZONEBUF+L'ZONEBUF-L'NAMEHITS COPY     11/83 DBC\n         CLI   ZONEBUF+L'ZONEBUF-L'NAMEHITS-1,C' ' OVERFLOW?  11/83 DBC\n         BE    NHFITS              NO, PROCEED                11/83 DBC\n         MVC   NAMEHITS,=10C'*'    YES, SIGNAL THAT           11/83 DBC\nNHFITS   DS    0H                                             11/83 DBC\n         SPACE 1                                              11/83 DBC\n         DROP  R5                  RELEASE NAME TABLE ENT BAS 11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        DISPLAY THE MESSAGE AND THEN LOOP FOR THE NEXT     * 11/83 DBC\n*        ENTRIES.                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         #PUT  INFOBUF             DISPLAY THE MSG            11/83 DBC\n         SPACE 1                                              11/83 DBC\n         AR    R4,R6               ADVANCE 2ND TABLE SCANNER  11/83 DBC\n         AR    R5,R6               ADVANCE 3RD TABLE SCANNER  11/83 DBC\n         BXLE  R3,R6,INFOLOOP      ADVANCE 1ST TBL SCNR & LOO 11/83 DBC\n         DROP  R2                  RELEASE MSG BUFFER BASE    11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        DONE. FREEMAIN AND EXIT.                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LM    R0,R1,RTBLSIZE      LOAD REPORT AREA DESCRIPTR 11/83 DBC\n         FREEMAIN R,LV=(0),A=(1)   FREE IT                    11/83 DBC\n         SPACE 1                                              11/83 DBC\n         TM    FLAG,STOPPING       IF WE ARE STOPPING ...     12/85 GPM\n         BO    STOPA               ... CONTINUE STOP PROCESS  12/85 GPM\n         SR    R1,R1               SINGAL NO TERMINATION MSG  11/83 DBC\n         B     EXIT0               GO EXIT                    11/83 DBC\n         DROP  TABLBASE            RELEASE CONTROL TABLE BASE 11/83 DBC\n         TITLE 'REFRESH -- DYNAMIC BLDL REFRESH ROUTINE'      12/85 GPM\n************************************************************* 12/85 GPM\n*                                                           * 12/85 GPM\n*        REFRESH - THIS ROUTINE REFRESHES THE DYNAMIC BLDL  * 12/85 GPM\n*        TABLE BY REMOVING A MODULE NAME FROM THE TABLE.    * 12/85 GPM\n*                                                           * 12/85 GPM\n************************************************************* 12/85 GPM\n         SPACE 1                                              12/85 GPM\nREFRESH  DS    0H                                             12/85 GPM\n         TM    FLAG,SRCHPO00+DFOUND00 ARE BOTH HOOKS IN?      12/85 GPM\n         BNZ   DOWN                NO, EXIT                   12/85 GPM\n         SPACE 3                                              12/85 GPM\n************************************************************* 12/85 GPM\n*        DYNABLDL IS ACTIVE. LOCATE THE DYNABLDL GLOBAL     * 12/85 GPM\n*        AREA.                                              * 12/85 GPM\n************************************************************* 12/85 GPM\n         SPACE 1                                              12/85 GPM\n         L     TABLBASE,DFOUNDVV   --> VERIFY DATA            12/85 GPM\n         LH    TABLBASE,ORIGLOC-ORIGINAL(,TABLBASE) GET HOOK  12/85 GPM\n*                                  OFFSET                     12/85 GPM\n         LA    TABLBASE,IGC018(TABLBASE) CNVRT TO ADDRESS     12/85 GPM\n         L     TABLBASE,DFOUNDAA-DFOUNDHH(,TABLBASE) -->      12/85 GPM\n*                                  \"SRCHPDS\" INTERCEPT        12/85 GPM\n         L     TABLBASE,DFOUNDDH-DFOUND(,TABLBASE) -->        12/85 GPM\n*                                  CONTROL TABLE              12/85 GPM\n         USING DYNAHEAD,TABLBASE   DCL ITS BASE               12/85 GPM\n         SPACE 3                                              12/85 GPM\n************************************************************* 12/85 GPM\n*        ESTABLISH ADDRESSABILITY TO DYNAMIC TABLE          * 12/85 GPM\n************************************************************* 12/85 GPM\n         SPACE 1                                              12/85 GPM\n         LM    R5,R7,DYNAFIRS                                 12/85 GPM\n         USING DYNL,R5             DCL DYNL ENTRY BASE        12/85 GPM\n         SPACE 3                                              12/85 GPM\n************************************************************* 12/85 GPM\n*        ENQ TO SERIALIZE DYNABLDL PROCESSING               * 12/85 GPM\n*        IF REQUIRED                                        * 12/85 GPM\n************************************************************* 12/85 GPM\n         SPACE 1                                              12/85 GPM\n         TM    FLAG,ENQED                                     12/85 GPM\n         BO    FINDPARM                                       12/85 GPM\n         ENQ   MF=(E,SERIALIZ)                                12/85 GPM\n         OI    FLAG,ENQED          SET AUDIT FLAG             12/85 GPM\n         SPACE 3                                              12/85 GPM\n************************************************************* 12/85 GPM\n*        SEE IF THERE IS A NAME IN THE TABLE THAT MATCHES   * 12/85 GPM\n*        THE PARM VALUE.                                    * 12/85 GPM\n************************************************************* 12/85 GPM\n         SPACE 1                                              12/85 GPM\nFINDPARM DS    0H                                             12/85 GPM\n         LH    R2,0(R3)            LENGTH OF SUPPLIED PARM    12/85 GPM\n         BCTR  R2,0                ADJUST LENGTH FOR MOVE     12/85 GPM\n         CH    R2,=H'7'            LENGTH MAY NOT EXCEED EIGHT12/85 GPM\n         BH    INVALID                                        12/85 GPM\n         MVC   MEMBNAME(*-*),2(R3) EXECUTED MOVE              12/85 GPM\n         EX    R2,*-6                                         12/85 GPM\nTESTLOOP DS    0H                                             12/85 GPM\n         CLI   DENTNAME-DYNL(R14),0 UNUSED SLOT (END OF TABLE)12/85 GPM\n         BE    CANTFIND                                       12/85 GPM\n         MVC   MYNAME,DENTNAME     PUT DYNAM NAME INTO WORK   12/85 GPM\n         OI    MYNAME+DYNLLOCK,UNLOCKED MAKE SURE IT'S UNLOCKE12/85 GPM\n         CLC   MYNAME,MEMBNAME     COMPARE AGAINST THE TABLE  12/85 GPM\n         BE    REFOUND             GOT THE MODULE             12/85 GPM\n         BXLE  R5,R6,TESTLOOP      LOOP FOR ALL ENTRIES       12/85 GPM\n         B     CANTFIND            NOT FOUND MESSAGE          12/85 GPM\n         SPACE 3                                              12/85 GPM\n************************************************************* 12/85 GPM\n*        THE REQUESTED MODULE IS FOUND, NOW CLOSE UP THE    * 12/85 GPM\n*        TABLE TO ERASE IT                                  * 12/85 GPM\n************************************************************* 12/85 GPM\n         SPACE 1                                              12/85 GPM\nREFOUND  DS    0H                                             12/85 GPM\n         MODESET MODE=SUP                                     12/85 GPM\n         MODESET EXTKEY=ZERO,SAVEKEY=PSWKEY,WORKREG=2 KEY0    12/85 GPM\nERASE    DS    0H                                             12/85 GPM\n         MVC   DYNL(DYNLLEN),DYNL+DYNLLEN  CLOSE'EM UP        01/86 GPM\n         BXLE  R5,R6,ERASE                                    12/85 GPM\n         LR    R5,R7               RESET ENTRY BASE->LAST ENT 01/86 GPM\n         XC    DYNL(DYNLLEN),DYNL  ERASE LAST ENTRY           12/85 GPM\n         OI    DENTNAME+DYNLLOCK,UNLOCKED \"NOT LOCKED\"        01/86 GPM\n         MODESET KEYADDR=PSWKEY,WORKREG=2 RESTORE KEY8        12/85 GPM\n         B     ERASED                                         12/85 GPM\n         TITLE 'VARIOUS TERMINATION SETUPS'                   11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        THE FOLLOWING ARE VARIOUS TERMINATION SETUP        * 11/83 DBC\n*        ROUTINES.                                          * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 3                                              11/83 DBC\nBADSTRUC BAL   R1,EXIT16                                      11/83 DBC\n         DC    AL1(L'MBADSTRU)                                11/83 DBC\nMBADSTRU DC    C'DYNABLDL CANNOT FIND THE PROPER HOOK POINTS IN THE VER*\n               SION OF IGC018 INSTALLED ON THIS SYSTEM'       11/83 DBC\n         SPACE 3                                              11/83 DBC\nDONEB4   BAL   R1,EXIT4                                       11/83 DBC\n         DC    AL1(L'MDONEB4)                                 11/83 DBC\nMDONEB4  DC    C'DYNABLDL IS ALREADY ACTIVE'                  11/83 DBC\n         SPACE 3                                              11/83 DBC\nMESS     BAL   R1,EXIT8                                       11/83 DBC\n         DC    AL1(L'MMESS)                                   11/83 DBC\nMMESS    DC    C'DYNABLDL IS ALREADY PARTIALLY ACTIVE - IT MUST BE STOP*\n               PED AND THEN STARTED'                          11/83 DBC\n         SPACE 3                                              11/83 DBC\nSTOPDB4  BAL   R1,EXIT0                                       11/83 DBC\n         DC    AL1(L'MSTOPDB4)                                11/83 DBC\nMSTOPDB4 DC    C'DYNABLDL IS ALREADY STOPPED'                 11/83 DBC\n         SPACE 3                                              11/83 DBC\nDOWN     DS    0H                                             12/85 GPM\n         TM    FLAG,STOPPING       IF WE ARE STOPPING ...     12/85 GPM\n         BO    STOPA               ... CONTINUE WITH PROCESS  12/85 GPM\n         BAL   R1,EXIT8                                       12/85 GPM\n         DC    AL1(L'MDOWN)                                   11/83 DBC\nMDOWN    DC    C'DYNABLDL IS NOT ACTIVE'                      11/83 DBC\n         SPACE 3                                              11/83 DBC\nUNRECOGN BAL   R1,EXIT16                                      11/83 DBC\n         DC    AL1(L'MUNRECOG)                                11/83 DBC\nMUNRECOG DC    C'DYNABLDL IS UNABLE TO RECOGNIZE THE VERSION OF IGC018 *\n               INSTALLED ON THIS SYSTEM'                      11/83 DBC\n         SPACE 3                                              11/83 DBC\nINVALID  BAL   R1,EXIT16                                      11/83 DBC\n         DC    AL1(L'MINVALID)                                11/83 DBC\nMINVALID DC    C'DYNABLDL PARM FIELD IS INVALID - ONLY START, STOP, REP*\n               ORT OR MEMBER NAME MAY BE SPECIFIED'           12/85 GPM\n         SPACE 3                                              11/83 DBC\nSTARTED  BAL   R1,EXIT0                                       11/83 DBC\n         DC    AL1(L'MSTARTED)                                11/83 DBC\nMSTARTED DC    C'DYNABLDL STARTED'                            11/83 DBC\n         SPACE 3                                              11/83 DBC\nSTOPPED  BAL   R1,EXIT0                                       11/83 DBC\n         DC    AL1(L'MSTOPPED)                                11/83 DBC\nMSTOPPED DC    C'DYNABLDL STOPPED'                            11/83 DBC\n         SPACE 3                                              11/83 DBC\nPARTSTOP BAL   R1,EXIT4                                       11/83 DBC\n         DC    AL1(L'MPARTSTO)                                11/83 DBC\nMPARTSTO DC    C'DYNABLDL STOPPED BUT THE DYNAMIC BLDL TABLE COULD NOT *\n               BE FREED'                                      11/83 DBC\n         SPACE 3                                              11/83 DBC\nEMPTY    DS    0H                                             12/85 GPM\n         TM    FLAG,STOPPING       IF WE ARE STOPPING ...     12/85 GPM\n         BO    STOPA               ... CONTINUE WITH PROCESS  12/85 GPM\n         BAL   R1,EXIT0                                       12/85 GPM\n         DC    AL1(L'MEMPTY)                                  11/83 DBC\nMEMPTY   DC    C'DYNABLDL TABLE IS EMPTY'                     11/83 DBC\n         SPACE 3                                              12/85 GPM\nCANTFIND DS    0H                                             12/85 GPM\n         MVC   MEMCANT,MEMBNAME                               12/85 GPM\n         BAL   R1,EXIT0                                       12/85 GPM\n         DC    AL1(L'MCANTF+8)                                12/85 GPM\nMCANTF   DC    C'DYNABLDL CAN''T FIND MEMBER '                12/85 GPM\nMEMCANT  DC    CL8' '              BLANK FILLED MEMBER NAME   12/85 GPM\n*                                  WORK AREA                  12/85 GPM\n         SPACE 3                                              12/85 GPM\nERASED   DS    0H                                             12/85 GPM\n         MVC   MEMERASE,MEMBNAME                              12/85 GPM\n         BAL   R1,EXIT0                                       12/85 GPM\n         DC    AL1(L'MERASE+8)                                12/85 GPM\nMERASE   DC    C'DYNABLDL HAS RESET MEMBER '                  12/85 GPM\nMEMERASE DC    CL8' '              BLANK FILLED MEMBER NAME   12/85 GPM\n*                                  WORK AREA                  12/85 GPM\n         SPACE 3                                              11/83 DBC\nNOSYSP   DS    0H                                             12/85 GPM\n         TM    FLAG,STOPPING       IF WE ARE STOPPING ...     12/85 GPM\n         BO    STOPA               ... CONTINUE WITH PROCESS  12/85 GPM\n         SR    R1,R1               SIGNAL NO MESSAGE          12/85 GPM\n         B     EXIT4               EXIT                       11/83 DBC\n         TITLE 'TERMINATION'                                  11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        CLEAN UP AND EXIT PROCESSING                       * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        COMPLETION CODE VECTOR                             * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nEXIT16   BAL   R0,EXIT             COMPLETION 16              11/83 DBC\nEXIT12   BAL   R0,EXIT             COMPLETION 12              11/83 DBC\nEXIT8    BAL   R0,EXIT             COMPLETION 8               11/83 DBC\nEXIT4    BAL   R0,EXIT             COMPLETION 4               11/83 DBC\nEXIT0    BAL   R0,EXIT             COMPLETION 0               11/83 DBC\nEXIT     LA    R15,EXIT            LOAD VECTOR BASE           11/83 DBC\n         SR    R15,R0              CNVRT TO COMPLETION CPODE  11/83 DBC\n         LA    R15,0(,R15)         PURIFY                     11/83 DBC\n         CH    R15,RCD             HIGHEST PRODUCED?          11/83 DBC\n         BNH   RCDZ                NO, KEEP HIGHER VALUE      11/83 DBC\n         STH   R15,RCD             YES, STORE NEW HIGH        11/83 DBC\nRCDZ     DS    0H                                             11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        IF SYSPRINT IS OPENED, THEN WRITE A COMPLETION     * 11/83 DBC\n*        MESSAGE, IF ANY, TO IT, AND THEN CLOSE IT.         * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         TM    DCBOFLGS-IHADCB+SYSPRINT,DCBOFOPN IS IT OPEN?  11/83 DBC\n         BZ    NOPRT               NO, SKIP                   11/83 DBC\n         LTR   R2,R1               YES, IS THERE A            11/83 DBC\n*                                  TERMINATION MESSAGE?       11/83 DBC\n         BZ    NOPRTMSG            NO, SKIP                   11/83 DBC\n         #PUT  NULL,SUBAD=PUTSYSP  YES, SPACE A LINE          11/83 DBC\n         #PUT  NULL                SPACE ANOTHER LINE         11/83 DBC\n         #PUT  (R2)                PRINT THE MESSAGE          11/83 DBC\nNOPRTMSG DS    0H                                             11/83 DBC\n         SPACE 1                                              11/83 DBC\n         CLOSE SYSPRINT            CLOSE THE FILE             11/83 DBC\n         FREEPOOL SYSPRINT         FREE ITS BUFFERS           11/83 DBC\n         LR    R1,R2               RESTORE MSG PTR            11/83 DBC\nNOPRT    DS    0H                                             11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        WRITE A COMPLETION MESSAGE, IF ANY, TO THE         * 11/83 DBC\n*        OPERATORS.                                         * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LTR   R1,R1               IS THERE A FINAL MSG?      11/83 DBC\n         BZ    MSGZ                NO, SKIP                   11/83 DBC\n         #PUT  (R1),SUBAD=PUTWTO   YES, WRITE IT              11/83 DBC\nMSGZ     DS    0H                                             11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        RETURN TO PROBLEM MODE.                            * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         TM    FLAG,SUPER          IN SUPERVISOR STATE?       11/83 DBC\n         BZ    SUPERZ              NO, SKIP                   11/83 DBC\n         NI    FLAG,255-SUPER      YES, CLEAR AUDIT           11/83 DBC\n         MODESET MODE=PROB         RESUME PROBLEM MODE        11/83 DBC\nSUPERZ   DS    0H                                             11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        DE-SERIALIZE                                       * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         TM    FLAG,ENQED          SERIALIZED?                11/83 DBC\n         BZ    ENQEDZ              NO, SKIP                   11/83 DBC\n         NI    FLAG,255-ENQED      YES, CLEAR AUDIT           11/83 DBC\n         DEQ   MF=(E,SERIALIZ)     DEQ                        11/83 DBC\nENQEDZ   DS    0H                                             11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        RESTORE REGS AND RETURN TO CALLER                  * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LH    R15,RCD             LOAD COMPLETION CODE       11/83 DBC\n*        LTR   R15,R15             TEST COMPLETION CODE       09/85 JS\n*        BNZ   CONTEXIT                                       09/85 JS\n*        SR    R14,R14                                        09/85 JS\n*        ST    R14,WTORECB         CLEAR ECB                  09/85 JS\n*        WTOR 'ENTER T TO END DYNBLDL PHASE',ANS,1,WTORECB,ROUTCDE=(1)\n*        WAIT  ECB=WTORECB                                    09/85 JS\n*        LH    R15,RCD                                        09/85 JS\n*        B     CONTEXIT                                       09/85 JS\n*WTORECB  DS    F                                             09/85 JS\n*ANS      DS    CL1                                           09/85 JS\n*CONTEXIT DS    0H                                            09/85 JS\n         #EXIT ((R14,R12)),RC=(R15) EXIT TO CALLER            11/83 DBC\n         TITLE 'PUTSYSP -- SEND MESSAGES TO A PRINT FILE'     11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        PUTSYSP -- THIS ROUTINE SEND MESSAGES TO A PRINT   * 11/83 DBC\n*        FILE. ALL RECFMS ARE SUPPORTED.                    * 11/83 DBC\n*                                                           * 11/83 DBC\n*        INPUTS:                                            * 11/83 DBC\n*              - R1 POINTS TO A MESSAGE BLOCK.              * 11/83 DBC\n*              - R14 POINTS TO THE RETURN ADDRESS.          * 11/83 DBC\n*                                                           * 11/83 DBC\n*        RETURN 0(,R14):                                    * 11/83 DBC\n*              - IF THE SYSPRINT FILE IS OPEN, AND IF THE   * 11/83 DBC\n*                GIVEN MESSAGE IS NON-NULL, THEN THE        * 11/83 DBC\n*                MESSAGE IS WRITTEN TO SYSPRINT.            * 11/83 DBC\n*              - ALL REGISTERS ARE RESTORED.                * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nPUTSYSP  TM    DCBOFLGS-IHADCB+SYSPRINT,DCBOFOPN SYSPRINT     11/83 DBC\n*                                  AVAILABLE?                 11/83 DBC\n         BZR   R14                 NO, RETURN DOING NOTHING   11/83 DBC\n         STM   R14,R2,SAVEPUTS     YES, SAVE REGISTERS        11/83 DBC\n         SPACE 1                                              11/83 DBC\n         SR    R2,R2               CLEAR FOR INSERT           11/83 DBC\n         ICM   R2,1,0(R1)          GET L'MSG; NULL?           11/83 DBC\n         BZ    PUTSRET             YES, RETURN DOING NOTHING  11/83 DBC\n         SPACE 1                                              11/83 DBC\n         TM    DCBRECFM-IHADCB+SYSPRINT,DCBRECU NO, RECFM=U?  11/83 DBC\n         BNM   PUTRECU             YES, GO HANDLE             11/83 DBC\n         TM    DCBRECFM-IHADCB+SYSPRINT,DCBRECF NO, RECFM=F?  11/83 DBC\n         BO    PUTRECF             YES, GO HANDLE             11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        RECFM=V HANDLER                                    * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nPUTRECV  LA    R0,4(,R2)           GET NEEDED LRECL           11/83 DBC\n         STH   R0,DCBLRECL-IHADCB+SYSPRINT STORE FOR PUT      11/83 DBC\n*                                  LOCATE                     11/83 DBC\n         PUT   SYSPRINT            GET NEXT RECORD SLOT       11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LA    R0,4(,R2)           GET REC LEN AGAIN          11/83 DBC\n         SLL   R0,16               SHIFT                      11/83 DBC\n         ST    R0,0(,R1)           STORE RDW                  11/83 DBC\n         L     R15,SAVEPUTS+12     --> MESSAGE                11/83 DBC\n         BCTR  R2,0                ADJ L'MSG FOR 'EX'         11/83 DBC\n         MVC   4(*-*,R1),1(R15)    (EXECUTED)                 11/83 DBC\n         EX    R2,*-6              COPY MSG TO BUFFER         11/83 DBC\n         B     PUTSRET             DONE HERE                  11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        RECFM=F HANDLER                                    * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nPUTRECF  PUT   SYSPRINT            GET NEXT RECORD SLOT       11/83 DBC\n         LR    R0,R1               --> COPY SINK              11/83 DBC\n         LH    R1,DCBLRECL-IHADCB+SYSPRINT GET L'SINK         11/83 DBC\n         L     R14,SAVEPUTS+12     --> MSG BLOCK              11/83 DBC\n         LA    R14,1(,R14)         --> COPY SOURCE            11/83 DBC\n         LR    R15,R2              GET L'SOURCE               11/83 DBC\n         ICM   R15,8,=C' '         GET PADDING BYTE           11/83 DBC\n         MVCL  R0,R14              COPY MSG TO BUFFER         11/83 DBC\n         B     PUTSRET             DONE HERE                  11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        RECFM=U HANDLER                                    * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nPUTRECU  STH   R2,DCBLRECL-IHADCB+SYSPRINT STORE FOR PUT      11/83 DBC\n*                                  LOCATE                     11/83 DBC\n         PUT   SYSPRINT            GET NEXT RECORD SLOT       11/83 DBC\n         L     R15,SAVEPUTS+12     --> MSG BLOCK              11/83 DBC\n         BCTR  R2,0                ADJ L'MSG FOR 'EX'         11/83 DBC\n         MVC   0(*-*,R1),1(R15)    (EXECUTED)                 11/83 DBC\n         EX    R2,*-6              COPY MSG TO BUFFER         11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        RETURN TO CALLER                                   * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nPUTSRET  LM    R14,R2,SAVEPUTS     RESTORE REGISTERS          11/83 DBC\n         BR    R14                 RETURN                     11/83 DBC\n         TITLE 'PUTWTO -- ISSUE MESSAGES TO THE OPERATORS'    11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        PUTWTO -- THIS ROUTINE ISSUES MESSAGES TO THE      * 11/83 DBC\n*        OPERATORS.                                         * 11/83 DBC\n*                                                           * 11/83 DBC\n*        ROUTE CODES USED:                                  * 11/83 DBC\n*              - 2 IS \"MASTER CONSOLE INFORMATION\"          * 11/83 DBC\n*              - 11 IS \"PROGRAMMER INFORMATION\"             * 11/83 DBC\n*                                                           * 11/83 DBC\n*        DESCRIPTOR CODES USED:                             * 11/83 DBC\n*              - 4 IS \"SYSTEM STATUS\"                       * 11/83 DBC\n*                                                           * 11/83 DBC\n*        INPUTS:                                            * 11/83 DBC\n*              - R1 POINTS TO A MESSAGE BLOCK.              * 11/83 DBC\n*              - R14 POINTS TO A RETURN ADDRESS.            * 11/83 DBC\n*                                                           * 11/83 DBC\n*        RETURN 0(,R14):                                    * 11/83 DBC\n*              - THE MESSAGE, IF NON-NULL, HAS BEEN ISSUED. * 11/83 DBC\n*              - ALL REGISTERS ARE RESTORED.                * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nPUTWTO   STM   R14,R1,SAVEPUTW     SAVE REGISTERS             11/83 DBC\n         SPACE 1                                              11/83 DBC\n         SR    R15,R15             CLEAR FOR INSERT           11/83 DBC\n         ICM   R15,1,0(R1)         GET L'MSG; NULL?           11/83 DBC\n         BZ    PUTWRET             YES, RETURN TO CALLER      11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MVC   WTOBUF(L'WTOHEAD),WTOHEAD COPY HEADER FIELDS   11/83 DBC\n         SPACE 1                                              11/83 DBC\n         CH    R15,=Y(WTOMAXL)     NO, TOO LONG?              11/83 DBC\n         BNH   PUTWLNOK            NO, PROCEED                11/83 DBC\n         LA    R15,WTOMAXL         YES, TRUNCATE              11/83 DBC\nPUTWLNOK DS    0H                                             11/83 DBC\n         SPACE 1                                              11/83 DBC\n         BCTR  R15,0               ADJ FOR \"EX\"               11/83 DBC\n         MVC   WTOBUF+L'WTOHEAD(*-*),1(R1) (EXECUTED)         11/83 DBC\n         EX    R15,*-6             COPY MSG TO WTO BUFFER     11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LA    R15,L'WTOHEAD+1(,R15) GET L'MSG+4              11/83 DBC\n         STH   R15,WTOBUF          STORE INTO PLIST           11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LA    R15,WTOBUF(R15)     --> PAST THE TEXT          11/83 DBC\n         MVC   0(L'WTOTAIL,R15),WTOTAIL COPY TRAILER FIELDS   11/83 DBC\n         SPACE 1                                              11/83 DBC\n         WTO   MF=(E,WTOBUF)       ISSUE THE MSG              11/83 DBC\n         SPACE 1                                              11/83 DBC\nPUTWRET  LM    R14,R1,SAVEPUTW     RESTORE REGISTERS          11/83 DBC\n         BR    R14                 RETURN TO CALLER           11/83 DBC\n         TITLE 'SORT -- AN INPLACE-SORTING ROUTINE'           11/83 DBC\nSORT     #SORT CMPRID=(R2),SVID=SAVESORT                      11/83 DBC\n         TITLE 'SORTHITS/SORTLRU/SORTNAME -- VARIOUS SORTING COMPARISON*\n                ROUTINES'                                     11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        SORTHITS -- THIS COMPARISON ROUTINE SORTS DYNAMIC  * 11/83 DBC\n*        BLDL TABLE ENTRIES IN DESCENDING ORDER BY HITS     * 11/83 DBC\n*        COUNT.                                             * 11/83 DBC\n*                                                           * 11/83 DBC\n*        SORTLRU -- THIS COMPARISON ROUTINE SORTS DYNAMIC   * 11/83 DBC\n*        BLDL TABLE ENTRIES IN L.R.U. ORDER - MOST TO LEAST * 11/83 DBC\n*        RECENTLY USED.                                     * 11/83 DBC\n*                                                           * 11/83 DBC\n*        SORTNAME -- THIS COMPARISON ROUTINE SORTS DYNAMIC  * 11/83 DBC\n*        BLDL TABLE ENTRIES IN ASCENDING ORDER BY MEMBER    * 11/83 DBC\n*        NAME.                                              * 11/83 DBC\n*                                                           * 11/83 DBC\n*        INPUTS:                                            * 11/83 DBC\n*              - R6 POINTS TO A SEQUENTIALLY PRIOR TABLE    * 11/83 DBC\n*                ENTRY.                                     * 11/83 DBC\n*              - R7 POINTS TO A SEQUENTIALLY FOLLOWING      * 11/83 DBC\n*                TABLE ENTRY.                               * 11/83 DBC\n*              - R14 POINTS TO THE RETURN ADDRESS IN THE    * 11/83 DBC\n*                SORT ROUTINE.                              * 11/83 DBC\n*                                                           * 11/83 DBC\n*        RETURN 0(,R14):                                    * 11/83 DBC\n*              - THE TWO ENTRIES ARE SUITABLY COMPARED AND  * 11/83 DBC\n*                THE CONDITION CODE IS SET AS FOLLOWS:      * 11/83 DBC\n*                - CC=2 (I.E. IMPLIES \"HIGH\") INDICATES     * 11/83 DBC\n*                  THAT THE SORT ROUTINE MUST EXCHANGE THE  * 11/83 DBC\n*                  TWO TABLE ENTRIES.                       * 11/83 DBC\n*                - CC=0 OR 1 (I.E. IMPLIES \"EQUAL\" OR       * 11/83 DBC\n*                  \"LOW\") INDICATES THAT THE SORT ROUTINE   * 11/83 DBC\n*                  MUST NOT EXCHANGE THE TWO TABLE ENTRIES. * 11/83 DBC\n*              - ALL REGISTERS REMAIN UNCHANGED.            * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 3                                              11/83 DBC\nSORTHITS CLC   DYNLHITS-DYNL(,R7),DYNLHITS-DYNL(R6)           11/83 DBC\n         BNER  R14                                            11/83 DBC\n         CLC   DYNLLRU#-DYNL(,R7),DYNLLRU#-DYNL(R6)           11/83 DBC\n         BR    R14                                            11/83 DBC\n         SPACE 3                                              11/83 DBC\nSORTLRU  CLC   DYNLLRU#-DYNL(,R7),DYNLLRU#-DYNL(R6)           11/83 DBC\n         BR    R14                                            11/83 DBC\n         SPACE 3                                              11/83 DBC\nSORTNAME CLC   DENTNAME-DYNL(,R6),DENTNAME-DYNL(R7)           11/83 DBC\n         BR    R14                                            11/83 DBC\n         TITLE 'VERIFY -- CODE MATCH VERIFICATION ROUTINE'    11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        VERIFY -- THIS ROUTINE CHECKS A SECTION OF IGC018  * 11/83 DBC\n*        TO SEE IF ITS CONTENTS ARE AS EXPECTED.            * 11/83 DBC\n*                                                           * 11/83 DBC\n*        INPUTS:                                            * 11/83 DBC\n*              - R1 POINTS TO A PLIST MAPPED BY THE         * 11/83 DBC\n*                \"ORIGINAL\" DSECT. THIS IDENTIFIES A        * 11/83 DBC\n*                LOCATION OF IGC018 AND ITS EXPECTED        * 11/83 DBC\n*                CONTENTS.                                  * 11/83 DBC\n*              - BLDLBASE POINTS TO IGC018.                 * 11/83 DBC\n*              - R14 POINTS TO A RETURN ADDRESS.            * 11/83 DBC\n*                                                           * 11/83 DBC\n*        RETURN 0(,R14):                                    * 11/83 DBC\n*              - ERROR: THE CONTENTS OF IGC018 ARE NOT AS   * 11/83 DBC\n*                EXPECTED.                                  * 11/83 DBC\n*              - R14: THE HI-BITS MAY BE CHANGED.           * 11/83 DBC\n*              - ALL OTHER REGISTERS ARE UNCHANGED.         * 11/83 DBC\n*                                                           * 11/83 DBC\n*        RETURN 4(,R14):                                    * 11/83 DBC\n*              - THE CONTENTS OF IGC018 ARE AS EXPECTED.    * 11/83 DBC\n*              - R14 IS INCRIMENTED BY 4.                   * 11/83 DBC\n*              - ALL OTHER REGISTERS ARE UNCHANGED.         * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         USING ORIGINAL,R1         DCL PLIST BASE             11/83 DBC\nVERIFY   STM   R14,R15,SAVEVERI    SAVE REGISTERS             11/83 DBC\n         LH    R15,ORIGLOC         GET OFFSET INTO IGC018     11/83 DBC\n         LA    R15,IGC018(R15)     GET LOCATION INTO IGC018   11/83 DBC\n         LH    R14,ORIGLEN         GET LENGTH TO CHECK        11/83 DBC\n         BCTR  R14,0               ADJ FOR \"EX-CLC\"           11/83 DBC\n         CLC   0(*-*,R15),ORIGCODE (EXECUTED)                 11/83 DBC\n         EX    R14,*-6             IS IGC018 AS EXPECTED?     11/83 DBC\n         BNE   VERIRET0            NO, RETURN +0              11/83 DBC\n*                                  YES, RETURN +4             11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        RETURN TO CALLER                                   * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         BAL   R15,VERIRET         +4 IGC018 IS AS EXPECTED   11/83 DBC\nVERIRET0 BAL   R15,VERIRET         +0 IGC018 IS NOT CORRECT   11/83 DBC\nVERIRET  LA    R14,VERIRET         LOAD VECTOR BASE           11/83 DBC\n         SR    R14,R15             GET RETURN OFFSET          11/83 DBC\n         A     R14,SAVEVERI        GET RETURN ADDRESS         11/83 DBC\n         L     R15,SAVEVERI+4      RESTORE REGISTER           11/83 DBC\n         BR    R14                 RETURN TO CALLER           11/83 DBC\n         DROP  R1                  RELEASE PLIST BASE         11/83 DBC\n         TITLE 'ZONEIT -- BINARY TO EBCDIC CONVERSION'        11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        ZONEIT -- THIS ROUTINE CONVERTS A BINARY NUMBER TO * 11/83 DBC\n*        A CHARACTER STRING THAT IS SUFFICIENTLY PADDED ON  * 11/83 DBC\n*        BOTH THE LEFT AND RIGHT WITH BLANKS. IF THE NUMBER * 11/83 DBC\n*        IS NEGATIVE, THEN THE STRING IS PREFIXED WITH A    * 11/83 DBC\n*        MINUS SIGN (-).                                    * 11/83 DBC\n*                                                           * 11/83 DBC\n*        INPUTS:                                            * 11/83 DBC\n*              - R1 CONTAINS THE NUMBER TO BE CONVERTED.    * 11/83 DBC\n*              - R14 POINTS TO THE RETURN ADDRESS.          * 11/83 DBC\n*                                                           * 11/83 DBC\n*        RETURN 0(,R14):                                    * 11/83 DBC\n*              - THE NUMBER HAS BEEN CONVERTED AS DESCRIBED * 11/83 DBC\n*                ABOVE.                                     * 11/83 DBC\n*              - ZONEBUF CONTAINS THE CHARACTER STRING      * 11/83 DBC\n*                RIGHT JUSTIFIED AND LEFT PADDED WITH       * 11/83 DBC\n*                BLANKS. ALSO, ZONEBUF IS TRAILED BLANKS.   * 11/83 DBC\n*              - R1 POINTS TO THE START OF THE CHARACTER    * 11/83 DBC\n*                STRING.                                    * 11/83 DBC\n*              - R15 CONTAINS THE LENGTH-1 OF THE CHARACTER * 11/83 DBC\n*                STRING.                                    * 11/83 DBC\n*              - ALL OTHER REGISTERS ARE UNCHANGED.         * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nZONEIT   CVD   R1,DWORK            CNVRT TO DECIMAL           11/83 DBC\n         MVI   ZONEBUF-1,C' '      LOAD LEFT PADDING BYTE     11/83 DBC\n         MVI   ZONEBUF,X'20'       LOAD EDIT CONTROL BYTE     11/83 DBC\n         MVC   ZONEBUF+1(L'ZONEBUF-1),ZONEBUF PROPAGATE IT    11/83 DBC\n         EDMK  ZONEBUF-1(L'ZONEBUF+1),DWORK CNVRT TO EBCDIC   11/83 DBC\n         BNZ   ZNOTZERO            JUMP IF VALUE WAS NOT 0    11/83 DBC\n         MVI   ZONEBUF+L'ZONEBUF-1,C'0' (WAS 0; STICK IT IN)  11/83 DBC\n         LA    R1,ZONEBUF+L'ZONEBUF-1 (SET STRING PTR)        11/83 DBC\nZNOTZERO BNM   ZNOTNEG             WASN'T NEGATIVE, SKIP      11/83 DBC\n         BCTR  R1,0                WAS NEG; BACK UP           11/83 DBC\n         MVI   0(R1),C'-'          INSERT SIGN                11/83 DBC\nZNOTNEG  DS    0H                                             11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LA    R15,ZONEBUF+L'ZONEBUF-1 --> TO LAST CHARACTER  11/83 DBC\n         SR    R15,R1              GET L'STRING-1             11/83 DBC\n         SPACE 1                                              11/83 DBC\n         BR    R14                 RETURN TO CALLER           11/83 DBC\n         TITLE 'DATA'                                         11/83 DBC\n         DROP  ,                   RELEASE ALL BASES          11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        VERSIONS VECTOR                                    * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nVERSIONS DC    A(VERSN#01)                                    11/83 DBC\n         DC    A(VERSN#02)                                    11/83 DBC\n         DC    A(VERSN#03)                                    11/83 DBC\n         DC    A(VERSN#04)                                    11/83 DBC\n         DC    A(VERSN#05)                                    04/84 JLC\n         DC    A(VERSN#06)                                    05/84 DBC\n         DC    A(VERSN#07)                                    08/84 DBC\n         DC    A(VERSN#08)                                    06/84 WRH\n         DC    A(VERSN#09)                                    09/84 DBC\n         DC    A(VERSN#10)                                    DBC 01/85\n         DC    A(VERSN#11)                                    DBC 01/85\n         DC    A(VERSN#12)                                    DBC 01/85\n         DC    A(0)                                           11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        LOCAL SOUBROUTINE SAVE AREAS                       * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nSAVEPUTS DC    5A(0)               PUTSYSP                    11/83 DBC\nSAVEPUTW DC    4A(0)               PUTWTO                     11/83 DBC\nSAVESORT DC    16A(0)              SORT                       11/83 DBC\nSAVEVERI DC    2A(0)               VERIFY                     11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        PARM FIELD ANALYSIS CONTROL DATA                   * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nPARMS    DS    0X                  START OF TABLE (SORTED)    11/83 DBC\n         DC    AL4(START),AL2(0)                              11/83 DBC\n         DC    AL4(STOP),AL2(1),C'P'                          11/83 DBC\n         DC    AL4(REPORT),AL2(1),C'R'                        11/83 DBC\n         DC    AL4(START),AL2(1),C'S'                         11/83 DBC\n         DC    AL4(STOP),AL2(4),C'STOP'                       11/83 DBC\n         DC    AL4(START),AL2(5),C'START'                     11/83 DBC\n         DC    AL4(REPORT),AL2(6),C'REPORT'                   11/83 DBC\n         DC    AL4(INVALID),X'FF'                             11/83 DBC\n         SPACE 1                                              11/83 DBC\nPRMHNDLR EQU   0,4                 A(HANDLER ROUTINE)         11/83 DBC\nPRMLEN   EQU   PRMHNDLR+L'PRMHNDLR,2 L'TEXT                   11/83 DBC\nPRMTEXT  EQU   PRMLEN+L'PRMLEN     TEXT                       11/83 DBC\nPRMROOTL EQU   PRMTEXT             ENTRY'S ROOT LENGTH        11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        SERIALIZATION ENQ CONTROL DATA                     * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nSERIALIZ ENQ   (QNAME,RNAME,E,L'RNAME,SYSTEM),RET=NONE,MF=L   11/83 DBC\nQNAME    DC    CL8'DYNABLDL'                                  11/83 DBC\nRNAME    DC    C'SERIALIZE'                                   11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        WTO MESSAGE BUFFER AND CONTROLS                    * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nWTOFLDS  WTO   ' ',ROUTCDE=(2,11),DESC=4,MF=L SKELETON        11/83 DBC\nWTOHEAD  EQU   WTOFLDS,4           HEADER FIELDS              11/83 DBC\nWTOTAIL  EQU   WTOHEAD+L'WTOHEAD+1,*-(WTOHEAD+L'WTOHEAD+1)    11/83 DBC\n*                                  TRAILER FIELDS             11/83 DBC\nWTOMAXL  EQU   124                 MAX WTO TEXT LENGTH        11/83 DBC\n         SPACE 1                                              11/83 DBC\n         DS    0F                  ALIGNMENT                  11/83 DBC\nWTOBUF   DC    XL(L'WTOHEAD+WTOMAXL+L'WTOTAIL)'00' BUFFER     11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        SYSPRINT CONTROL DATA                              * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         PRINT NOGEN                                          11/83 DBC\nSYSPRINT DCB   DDNAME=SYSPRINT,                               11/83 DBC*\n               DSORG=PS,                                      11/83 DBC*\n               MACRF=PL,                                      11/83 DBC*\n               OPTCD=C,                                       11/83 DBC*\n               BUFNO=5,                                       11/83 DBC*\n               EXLST=PRTXLIST                                 11/83 DBC\n         PRINT GEN                                            11/83 DBC\n         SPACE 1                                              11/83 DBC\nPRTXLIST DS    0F                  DCB EXIT LIST              11/83 DBC\n         DC    X'85',AL3(PRTEXIT)  DCB OPEN EXIT              11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        HOOK SKELETONS                                     * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         CNOP  0,4                 ALIGNMENT                  11/83 DBC\nSRCHPOHH BALR  R15,0               LOAD TEMP BASE             11/83 DBC\n         L     R15,SRCHPOAA-*(,R15) --> HOOK ROUTINE          11/83 DBC\n         BR    R15                 JUMP TO HOOK ROUTINE       11/83 DBC\nSRCHPOAA DC    AL4(SRCHPDS-SRCHPDS) --> HOOK ROUTINE          11/83 DBC\nSRCHPOHL EQU   *-SRCHPOHH          L'HOOK                     11/83 DBC\n         SPACE 3                                              11/83 DBC\n         CNOP  0,4                 ALIGNMENT                  11/83 DBC\nDFOUNDHH BALR  R15,0               LOAD TEMP BASE             11/83 DBC\n         L     R15,DFOUNDAA-*(,R15) --> HOOK ROUTINE          11/83 DBC\n         BR    R15                 JUMP TO HOOK ROUTINE       11/83 DBC\n         DC    CL8'DAVECOLE'       HOOK RECOGNITION STRING    11/83 DBC\nDFOUNDAA DC    AL4(DFOUND-DFOUND)  --> HOOK ROUTINE           11/83 DBC\nDFOUNDHL EQU   *-DFOUNDHH          L'HOOK                     11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        HOOK RETURN CONTROL DATA                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nSRCHPOXX DS    S                   BASE/DISPLACEMENT FOR      11/83 DBC\n*                                  RETURN FROM SRCHPDS HOOK   11/83 DBC\nDFOUNDXX DS    S                   BASE/DISPLACEMENT FOR      11/83 DBC\n*                                  RETURN FROM DFOUND HOOK    11/83 DBC\n         SPACE 1                                              11/83 DBC\nSRCHPOBC B     SRCHPOXX-SRCHPOXX   RETURN TO IGC018 FROM      11/83 DBC\n         @ZAP  (SRCHPOXX,-2)       SRCHPDS HOOK               11/83 DBC\n         SPACE 1                                              11/83 DBC\nDFOUNDBC B     DFOUNDXX-DFOUNDXX   RETURN TO IGC018 FROM      11/83 DBC\n         @ZAP  (DFOUNDXX,-2)       DFOUND HOOK                11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        MISC DATA                                          * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nDWORK    DS    D                   DWORD WORK AREA            11/83 DBC\nCLOCK    DS    2F                  STCK BUFFER                11/83 DBC\n         SPACE 1                                              11/83 DBC\nRTBLSIZE DC    A(0)              | REPORTS TABLE SIZE         11/83 DBC\nRTBLPTR  DC    A(0)              V REPORTS TABLE ADDRESS      11/83 DBC\n         SPACE 1                                              11/83 DBC\nCOUNTER  DC    H'0'                REPORT LINES COUNTER       11/83 DBC\nRCD      DC    H'0'                PROGRAM COMPLETION CODE    11/83 DBC\n         SPACE 1                                              11/83 DBC\n         DC    C' '                LEFT-PADDING BLANK         11/83 DBC\nZONEBUF  DS    CL(8*2-1)           EDMK SINK                  11/83 DBC\n         DC    CL(L'ZONEBUF-1)' '  RIGHT-PADDING BLANKS       11/83 DBC\n         SPACE 1                                              11/83 DBC\nPSWKEY   DS    X                   SAVE AREA                  11/83 DBC\n         SPACE 1                                              11/83 DBC\nFLAG     DC    B'00000000'         AUDIT FLAG                 11/83 DBC\nSUPER    EQU   B'10000000'         IN SUPERVISOR STATE        11/83 DBC\nKEY0     EQU   B'01000000'         IN KEY ZERO                11/83 DBC\nENQED    EQU   B'00100000'         SERIALIZED                 11/83 DBC\nSRCHPO00 EQU   B'00010000'         THE SRCHPDS HOOK HAS NOT   11/83 DBC\n*                                  NOT NOT BEEN SET           11/83 DBC\nDFOUND00 EQU   B'00001000'         THE DFOUND HOOK HAS NOT    11/83 DBC\n*                                  NOT NOT BEEN SET           11/83 DBC\nSTOPPING EQU   B'00000001'         DYNABLDL STOP IS IN        12/85 GPM\n*                                  PROGRESS                   12/85 GPM\n         DS    0D                  ALIGNMENT                  12/85 GPM\nMEMBNAME DC    CL8' '                                         12/85 GPM\nMYNAME   DC    CL8' '                                         12/85 GPM\nWORK     DC    F'0'                                           12/85 GPM\nDAYSYEAR DC    P'365'                                         12/85 GPM\nPCOUNT   DC    P'001'                                         12/85 GPM\n*                      MONTH DISPLACEMENT FROM 30 DAY         12/85 GPM\n         DS    0CL12                      (BACKWARD TABLE)    12/85 GPM\n         DC    P'1'                     DECEMBER              12/85 GPM\n         DC    P'0'                     NOVEMBER              12/85 GPM\n         DC    P'1'                     OCTOBER               12/85 GPM\n         DC    P'0'                     SEPTEMBER             12/85 GPM\n         DC    P'1'                     AUGUST                12/85 GPM\n         DC    P'1'                     JULY                  12/85 GPM\n         DC    P'0'                     JUNE                  12/85 GPM\n         DC    P'1'                     MAY                   12/85 GPM\n         DC    P'0'                     APRIL                 12/85 GPM\n         DC    P'1'                     MARCH                 12/85 GPM\n         DC    P'-2'                    FEBRUARY              12/85 GPM\nMONTH    DC    P'1'                     JANUARY               12/85 GPM\n*                                                             12/85 GPM\n         SPACE 1                                              11/83 DBC\n         LTORG ,                                              11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        MESSAGES                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 3                                              11/83 DBC\n         DC    AL1(L'NULL)                                    11/83 DBC\nNULL     DC    C' '                                           11/83 DBC\n         SPACE 3                                              11/83 DBC\n         DC    AL1(ENDTITL-DYNATIT)                           12/85 GPM\nDYNATIT  DC    C'DYNAMIC BLDL ACTIVITY REPORT - '             12/85 GPM\nMM       DC    CL2' '                                         12/85 GPM\n         DC    C'/'                                           12/85 GPM\nDD       DC    CL2' '                                         12/85 GPM\n         DC    C'/'                                           12/85 GPM\nYY       DC    CL2' '                                         12/85 GPM\n         DC    CL3' '                                         12/85 GPM\nTIME     DC    X'2120207A20207A2020'                          12/85 GPM\nENDTITL  EQU   *                                              12/85 GPM\n         SPACE 3                                              11/83 DBC\n         DS    AL1                                            11/83 DBC\nSTATBUF  DS    CL(LEN3270)                                    11/83 DBC\n         SPACE 3                                              11/83 DBC\n         DC    AL1(0)                                         11/83 DBC\nSTATBUF2 DS    CL(LEN3270)                                    11/83 DBC\n         SPACE 3                                              11/83 DBC\n         DC    AL1(0)                                         11/83 DBC\nSTATBUF3 DS    CL(LEN3270)                                    11/83 DBC\n         SPACE 3                                              11/83 DBC\n         DC    AL1(L'INFOBUF)                                 11/83 DBC\nINFOBUF  DC    CL(INFOLEN)' '                                 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   NAMEBAR-INFO+INFOBUF                           11/83 DBC\n         DC    C'|'                                           11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   HITSBAR-INFO+INFOBUF                           11/83 DBC\n         DC    C'|'                                           11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   LRUBAR-INFO+INFOBUF                            11/83 DBC\n         DC    C'|'                                           11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   ,                                              11/83 DBC\n         SPACE 3                                              11/83 DBC\n         DC    AL1(L'SORTTIT)                                 11/83 DBC\nSORTTIT  DC    CL(INFOLEN)' '                                 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   NAMEBAR-INFO+SORTTIT                           11/83 DBC\n         DC    C'|'                                           11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   NAMENAME-INFO+SORTTIT                          11/83 DBC\n         DC    C'SORTED BY NAME'                              11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   HITSBAR-INFO+SORTTIT                           11/83 DBC\n         DC    C'|'                                           11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   HITSHITS-INFO+SORTTIT                          11/83 DBC\n         DC    C'SORTED BY HITS'                              11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   LRUBAR-INFO+SORTTIT                            11/83 DBC\n         DC    C'|'                                           11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   LRUIDLE-INFO+SORTTIT                           11/83 DBC\n         DC    C'SORTED BY L.R.U.'                            11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   ,                                              11/83 DBC\n         SPACE 3                                              08/84 DBC\n         DC    AL1(L'SORTTIT0)                                08/84 DBC\nSORTTIT0 DC    CL(INFOLEN)' '                                 08/84 DBC\n         SPACE 1                                              08/84 DBC\n         ORG   NAMEBAR-INFO+SORTTIT0                          08/84 DBC\n         DC    C'|'                                           08/84 DBC\n         SPACE 1                                              08/84 DBC\n         ORG   HITSBAR-INFO+SORTTIT0                          08/84 DBC\n         DC    C'|'                                           08/84 DBC\n         SPACE 1                                              08/84 DBC\n         ORG   HITSHITS-INFO+SORTTIT0                         08/84 DBC\n         DC    C'(* MEANS REENTRANT)'                         08/84 DBC\n         SPACE 1                                              08/84 DBC\n         ORG   LRUBAR-INFO+SORTTIT0                           08/84 DBC\n         DC    C'|'                                           08/84 DBC\n         SPACE 1                                              08/84 DBC\n         ORG   ,                                              08/84 DBC\n         SPACE 3                                              11/83 DBC\n         DC    AL1(L'SORTSUBT)                                11/83 DBC\nSORTSUBT DC    CL(INFOLEN)' '                                 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   COUNT-INFO+SORTSUBT                            11/83 DBC\n         DC    C'CNT'                                         11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   NAMEBAR-INFO+SORTSUBT                          11/83 DBC\n         DC    C'|'                                           11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   NAMENAME-INFO+SORTSUBT                         11/83 DBC\n         DC    C'NAME'                                        11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   NAMELIB#-1-INFO+SORTSUBT                       11/83 DBC\n         DC    C'LIB#'                                        11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   NAMEHITS+L'NAMEHITS-4-INFO+SORTSUBT            11/83 DBC\n         DC    C'HITS'                                        11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   HITSBAR-INFO+SORTSUBT                          11/83 DBC\n         DC    C'|'                                           11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   HITSHITS+L'HITSHITS-4-INFO+SORTSUBT            11/83 DBC\n         DC    C'HITS'                                        11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   HITSIDLE+L'HITSIDLE-4-INFO+SORTSUBT            11/83 DBC\n         DC    C'IDLE'                                        11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   HITSAGE+L'HITSAGE-3-INFO+SORTSUBT              11/83 DBC\n         DC    C'AGE'                                         11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   HITSNAME-INFO+SORTSUBT                         11/83 DBC\n         DC    C'NAME'                                        11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   LRUBAR-INFO+SORTSUBT                           11/83 DBC\n         DC    C'|'                                           11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   LRUIDLE+L'LRUIDLE-4-INFO+SORTSUBT              11/83 DBC\n         DC    C'IDLE'                                        11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   LRUHITS+L'LRUHITS-4-INFO+SORTSUBT              11/83 DBC\n         DC    C'HITS'                                        11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   LRUNAME-INFO+SORTSUBT                          11/83 DBC\n         DC    C'NAME'                                        11/83 DBC\n         SPACE 1                                              11/83 DBC\n         ORG   ,                                              11/83 DBC\n         TITLE 'SRCHPDS -- IGC018 HOOK ROUTINE'               11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        SRCHPDS -- THIS ROUTINE RECEIVES CONTROL VIA A     * 11/83 DBC\n*        HOOK PLACED AT LABEL \"SRCHPDS\" IN IGC018. (IGC018  * 11/83 DBC\n*        BRANCHES TO \"SRCHPDS\" AFTER IT HAS SEARCHED THE    * 11/83 DBC\n*        RESIDENT BLDL TABLE AND WHEN IT IS READY TO READ   * 11/83 DBC\n*        THE PDS DIRECTORIES ON DISK). THIS INTERCEPT       * 11/83 DBC\n*        ROUTINE DETERMINES IF THE PDS DIRECTORIES ABOUT TO * 11/83 DBC\n*        BE SEARCHED ARE FOR THE LINKLIST LIBRARIES. IF SO, * 11/83 DBC\n*        THEN IT SCANS THE USER'S BLDL PLIST AGAINST ITS    * 11/83 DBC\n*        OWN DYNA-TABLE AND FILLS IN ALL USER REQUESTS FOR  * 11/83 DBC\n*        NAMES THAT ARE FOUND IN THE DYNA-TABLE. THUS DISK  * 11/83 DBC\n*        DIRECTORY SEARCHES FOR THOSE NAMES ARE BYPASSED.   * 11/83 DBC\n*                                                           * 11/83 DBC\n*        DURING DYNABLDL START PROCESSING, THE FOLLOWING IS * 11/83 DBC\n*        DONE.                                              * 11/83 DBC\n*                                                           * 11/83 DBC\n*              - THIS ROUTINE IS COPIED TO GLOBAL, FIXED,   * 11/83 DBC\n*                KEY0, FETCH ACCESSABLE MEMORY (SP245).     * 11/83 DBC\n*                                                           * 11/83 DBC\n*              - ALL ADCONS CONTAINED IN IT ARE RELOCATED.  * 11/83 DBC\n*                                                           * 11/83 DBC\n*              - ALL REFERENCES TO IBM PRIVATE DATA FIELDS  * 11/83 DBC\n*                ARE ADJUSTED TO CORRESPOND TO THE CURRENT  * 11/83 DBC\n*                VERSION OF IGC018.                         * 11/83 DBC\n*                                                           * 11/83 DBC\n*              - THIS ROUTINE IS APPENDED WITH AN EXACT     * 11/83 DBC\n*                COPY OF THE INSTRUCTIONS IN IGC018 (AT     * 11/83 DBC\n*                LABEL \"SRCHPDS\") THAT WERE OVERLAID BY THE * 11/83 DBC\n*                BRANCH TO THIS ROUTINE.                    * 11/83 DBC\n*                                                           * 11/83 DBC\n*              - THOSE INSTRUCTIONS ARE APPENDED BY A       * 11/83 DBC\n*                BRANCH BACK TO IGC018 FOLLOWING THE        * 11/83 DBC\n*                OVERLAID INSTRUCTIONS.                     * 11/83 DBC\n*                                                           * 11/83 DBC\n*        STATIC INPUTS:                                     * 11/83 DBC\n*              - R15 POINTS TO THIS HOOK'S ENTRY ADDRESS.   * 11/83 DBC\n*              - R0 AND R1 ARE VOLITILE; THEY NEED NOT BE   * 11/83 DBC\n*                RESTORED.                                  * 11/83 DBC\n*              - ALL OTHER REGISTERS (INCLUDING R14), IF    * 11/83 DBC\n*                ALTERED, MUST BE RESTORED.                 * 11/83 DBC\n*              - THE \"RDAREA\" FIELD IN IGC018'S WORK AREA,  * 11/83 DBC\n*                SINCE IT IS ABOUT TO BE READ INTO BY EXCP, * 11/83 DBC\n*                IS AVAILABLE FOR LOCAL USE AT THIS TIME.   * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         USING SRCHPDS,R15         DCL LOCAL BASE             11/83 DBC\nSRCHPDS  DS    0F                  ALIGNMENT                  11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        DETERMINE WHETHER OR NOT THE CURRENT SEARCH IS OF  * 11/83 DBC\n*        THE LINKLIST LIBRARIES.                            * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R1,CVTPTR           --> CVT                    11/83 DBC\n         LA    R0,0(,RDCB-RDCB)    GET CRNT DCB PTR           11/83 DBC\n         @ZAP  (RDCB,-2)                                      11/83 DBC\n         CL    R0,CVTLINK-CVTMAP(,R1) SEARCHING LINKLIST?     11/83 DBC\n         BNE   SRCHPOZZ            NO, IGNORE THIS CALL       11/83 DBC\n         SPACE 1                                              11/83 DBC\n         CLI   CONCAT#-CONCAT#,0   YES, 1ST PASS FOR THIS     11/83 DBC\n         @ZAP  (CONCAT#,-2)        PLIST?                     11/83 DBC\n         BNE   SRCHPOZZ            NO, DYNA-TABLE SEARCH      11/83 DBC\n*                                  ALREADY MADE; IGNORE THIS  11/83 DBC\n*                                  CALL                       11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        SAVE IGC018'S ENVIRONMENT AND SET UP A LOCAL ONE.  * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         STM   R2,R14,REGSAVE-DYNAWA+RDAREA-RDAREA SAVE       11/83 DBC\n         @ZAP  (RDAREA,-2)         IGC018'S REGISTERS         11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MVC   USERKEY-DYNAWA+RDAREA-RDAREA,EXSKEY-EXSKEY     11/83 DBC\n         @ZAP  (RDAREA,-4),        SAVE IGC018'S USER'S KEY   11/83 DBC*\n               (EXSKEY,-2)                                    11/83 DBC\n         SPACE 1                                              09/84 DBC\n         MVC   BLDLFLG-DYNAWA+RDAREA-RDAREA,EXSFLG-EXSFLG     09/84 DBC\n         @ZAP  (RDAREA,-4),        SAVE IGC018'S CONTROL      09/84 DBC*\n               (EXSFLG,-2)         FLAGS                      09/84 DBC\n         SPACE 1                                              11/83 DBC\n         LA    R1,0(,RLIST-RLIST)  COPY USER'S PLIST PTR TO A 11/83 DBC\n         @ZAP  (RLIST,-2)          SAFE REGISTER              11/83 DBC\n         USING BLDLIST,R1          DCL USER'S PLIST BASE      11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LA    R13,RDAREA-RDAREA   --> LOCAL WORK AREA        11/83 DBC\n         @ZAP  (RDAREA,-2)                                    11/83 DBC\n*                                  NOTE, DIRECT USE OF        11/83 DBC\n*                                  IGC018'S REGISTERS IS NOW  11/83 DBC\n*                                  NO LONGER SAFE.            11/83 DBC\n         USING DYNAWA,R13          DCL WORK AREA BASE         11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        SAVE IGC018'S CURRENT KEY AND LOAD KEY-0.          * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         IPK   ,                   DETERMINE CURRENT KEY      11/83 DBC\n         STC   R2,KEYSAVE          SAVE IT                    11/83 DBC\n         SPKA  0                   SET KEY-0                  11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        GET BITS 10-41 OF THE CURRENT TOD CLOCK VALUE      * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         STCK  CLOKSAVE            GET THE TOD CLOCK          11/83 DBC\n         LM    R2,R3,CLOKSAVE      LOAD IT                    11/83 DBC\n         SLDL  R2,CLOKSHFT         ISSOLATE BITS 10-41        11/83 DBC\n         ST    R2,CLOKSAVE         STORE BACK                 11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        PREPARE TO SCAN THE USER'S PLIST                   * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LA    R2,BLDENT           --> 1ST PLIST ENTRY        11/83 DBC\n         USING PDS2,R2             DCL A BASE FOR IT          11/83 DBC\n         LH    R0,BLDENTS          GET ENTRY COUNT            11/83 DBC\n         LTR   R0,R0               NULL?                      11/83 DBC\n         BNP   SRCHRET             YES, EXIT BACK TO IGC018   11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R8,SRCHPODH         NO, --> CONTROL TABLE      11/83 DBC\n         USING DYNAHEAD,R8         DCL A BASE FOR IT          11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        SEARCH THE DYNA-TABLE FOR EACH USER REQUESTED NAME * 11/83 DBC\n*        THAT HAS NOT ALREADY BEEN FOUND.                   * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nNAMELOOP CLI   PDS2TTRP+2,0        HAS THIS NAME BEEN FOUND?  11/83 DBC\n         BNE   NAMENEXT            YES, SKIP IT               11/83 DBC\n         TM    PDS2NAME+DYNLLOCK,UNLOCKED NO, BUT WILL THE    11/83 DBC\n*                                  NAME CONFUSE ME?           11/83 DBC\n         BZ    NAMEMISS            YES, IGNORE IT             11/83 DBC\n         LM    R3,R5,DYNAFIRS      NO, LOAD DYNA-TABLE DESCRI 11/83 DBC\n         USING DYNL,R3             DCL TABLE ENTRY BASE       11/83 DBC\n         SPACE 1                                              11/83 DBC\nDYNLSCAN CLC   PDS2NAME,DENTNAME   NAME FOUND IN TABLE?       11/83 DBC\n         BE    NAMEHIT             YES, GO PROCESS            11/83 DBC\n         BXLE  R3,R4,DYNLSCAN      NO, KEEP SEARCHING         11/83 DBC\n         DROP  R3                  NO, RELEASE TABLE ENTRY BA 11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        A USER REQUESTED NAME WAS NOT FOUND IN THE         * 11/83 DBC\n*        DYNA-TABLE. COUNT THE MISS AND LOOP TO THE NEXT    * 11/83 DBC\n*        ENTRY IN THE USER'S PLIST.                         * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nNAMEMISS LA    R4,1                LOAD INCRIMENT             11/83 DBC\n         AL    R4,DYNAMISS         COUNT THE MISS             11/83 DBC\n         ST    R4,DYNAMISS         STORE BACK. NOTE, I DO NOT 11/83 DBC\n*                                  BOTHER WITH A 'CS' BECAUSE 11/83 DBC\n*                                  ABSOLUTE ACCURACY HERE IS  11/83 DBC\n*                                  NOT REALLY THAT IMPORTANT. 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         B     NAMENEXT            GO ADVANCE TO NEXT NAME    11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        A USER REQUESTED NAME HAS BEEN FOUND IN THE        * 11/83 DBC\n*        DYNA-TABLE. ATTEMPT TO LOCK OWNERSHIP OF THE       * 11/83 DBC\n*        DYNA-TABLE SLOT.                                   * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         USING DYNL,R3             RESTORE SLOT BASE          11/83 DBC\nNAMEHIT  LM    R4,R5,PDS2NAME      GET THE GIVEN NAME         11/83 DBC\n         LR    R6,R4               COPY                       11/83 DBC\n         LR    R7,R5               COPY                       11/83 DBC\n         X     R6,=A(UNLOCKED)     SET LOCK SIGNAL            11/83 DBC\n         #TEST SIZE=(DYNLLOCK,EQ,3) THE LOCK SIGNAL MUST BE   11/83 DBC*\n                                   BYTE #3 OF THE NAME        11/83 DBC\n         CDS   R4,R6,DENTNAME      ATTEMPT TO LOCK THIS SLOT. 11/83 DBC\n*                                  GOT IT?                    11/83 DBC\n         BNE   NAMEMISS            NO, GIVE UP ON THIS NAME   11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        I NOW OWN THE SLOT. NOW COPY THE DIRECTORY DATA TO * 11/83 DBC\n*        THE USER'S PLIST.                                  * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LH    R4,BLDELEN          GET L'USER'S PLIST ENTRY   11/83 DBC\n         CH    R4,DYNLELEN         COMPARE WITH L'D-ENTRY     11/83 DBC\n         BNH   GOTBDLEN            LOW; USE USER'S LENGTH     11/83 DBC\n         LH    R4,DYNLELEN         HIGH; USE L'D-ENTRY        11/83 DBC\nGOTBDLEN SH    R4,=Y(PDS2TTRP-PDS2+1) DECRIMENT BY L'ROOT     11/83 DBC\n*                                  SECTION. ALSO DECRIMENT    11/83 DBC\n*                                  FOR \"EX-MVC\". IS USER'S    11/83 DBC\n*                                  SLOT LONG ENOUGH?          11/83 DBC\n         BNM   BLDLMOVE            YES, PROCEED               11/83 DBC\n         OI    DENTNAME+DYNLLOCK,UNLOCKED NO, RELEASE THE     11/83 DBC\n*                                  SLOT                       11/83 DBC\n         B     NAMEMISS            IGNORE THIS NAME           11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        SET THE USER'S KEY AND THEN COPY THE BLDL ENTRY TO * 11/83 DBC\n*        HIS PLIST. NOTE, THE DESIRED USER KEY WILL BE      * 09/84 DBC\n*              EITHER IS EXECUTION KEY OR THE KEY FROM THE  * 09/84 DBC\n*        DEB FOR THE PDS BEING SEARCHED. IF THE DESIRED KEY * 09/84 DBC\n*        IS THE DEB KEY, THEN IGC018'S EXECUTION KEY        * 09/84 DBC\n*        MATCHES THE DEB KEY.                               * 09/84 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nBLDLMOVE IC    R5,USERKEY          GET USER'S EXECUTION KEY   09/84 DBC\n         TM    BLDLFLG,EXSBLDL-EXSBLDL DOING A BLDL?          09/84 DBC\n         @ZAP  (EXSBLDL,-3)                                   09/84 DBC\n         BNZ   SINKKEY             YES, PROCEED               09/84 DBC\n         IC    R5,KEYSAVE          NO, DOING A FIND. GET      09/84 DBC\n*                                  IGC018'S EXECUTION KEY     09/84 DBC\n*                                  (WHICH WILL MATCH THE      09/84 DBC\n*                                  USER'S DEB KEY).           09/84 DBC\nSINKKEY  SPKA  0(R5)               SET USER'S KEY             09/84 DBC\n         SPACE 1                                              09/84 DBC\n         MVC   PDS2TTRP(*-*),DENTTTRP (EXECUTED)              11/83 DBC\n         EX    R4,*-6              COPY STUFF TO USER'S PLIST 11/83 DBC\n         SPKA  0                   RESUME KEY-0               11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        UPDATE THE SLOT'S LRU FIELD (MAKING IT M.R.U.),    * 11/83 DBC\n*        COUNT THE HIT, AND UNLOCK THE DYNA-SLOT.           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MVC   DYNLLRU#,CLOKSAVE   MAKE SLOT M.R.U.         * 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LA    R4,1                LOAD INCRIMENT             11/83 DBC\n         AL    R4,DYNLHITS         COUNT THE SLOT'S HITS      11/83 DBC\n         ST    R4,DYNLHITS         STORE BACK                 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         OI    DENTNAME+DYNLLOCK,UNLOCKED RELEASE THE SLOT    11/83 DBC\n         DROP  R3                  RELEASE SLOT BASE          11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LA    R4,1                LOAD INCRIMENT             11/83 DBC\n         AL    R4,DYNAHITS         COUNT TOTAL HITS           11/83 DBC\n         ST    R4,DYNAHITS         STORE BACK                 11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        ADVANCE TO THE NEXT NAME IN THE USER'S PLIST.      * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nNAMENEXT AH    R2,BLDELEN          --> NEXT PLIST ENTRY       11/83 DBC\n         BCT   R0,NAMELOOP         LOOP IF THERE ARE MORE     11/83 DBC\n         SPACE 1                                              11/83 DBC\n         DROP  R2                  NO MORE, REL PLIST ENTRY B 11/83 DBC\n         DROP  R8                  REL DYNA-CONTROL TBL BASE  11/83 DBC\n         DROP  R1                  RELEASE PLIST BASE         11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        RETURN TO IGC018                                   * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nSRCHRET  IC    R2,KEYSAVE          GET IGC018'S KEY           11/83 DBC\n         SPKA  0(R2)               RESTORE IT                 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LM    R2,R14,REGSAVE      RESTORE IGC018'S REGS      11/83 DBC\n         DROP  R13                 RELEASE LCL WORK AREA BASE 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         B     SRCHPOZZ            GO BACK TO IGC018          11/83 DBC\n         DROP  ,                   RELEASE ALL BASES          11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        STATIC DATA                                        * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nSRCHPODH DC    A(DYNAHEAD-DYNAHEAD) --> CONTROL TABLE         11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LTORG ,                                              11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        RETURN TO IGC018                                   * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nSRCHPOZZ DS    0H                                             11/83 DBC\nSRCHPOLL EQU   SRCHPOZZ-SRCHPDS                               11/83 DBC\n         SPACE 1                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        THE ORIGINAL SRCHPDS CODE FROM IGC018 GETS COPIED  * 11/83 DBC\n*        FOLLOWING HERE.                                    * 11/83 DBC\n************************************************************* 11/83 DBC\n         TITLE 'DFOUND -- IGC018 HOOK ROUTINE'                11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        DFOUND -- THIS ROUTINE RECEIVES CONTROL VIA A HOOK * 11/83 DBC\n*        PLACED AT LABEL \"DFOUND\" IN IGC018. (IGC018        * 11/83 DBC\n*        BRANCHES TO \"DFOUND\" WHEN IT HAS SUCCESSFULLY READ * 11/83 DBC\n*        A PDS DIRECTORY BLOCK AND LOCATED THE DESIRED      * 11/83 DBC\n*        ENTRY WITHIN IT). IF THE MEMBER IS FROM A LINKLIST * 11/83 DBC\n*        LIBRARY BUT HAD NOT BEEN PREVIOUSLY COPIED TO THE  * 11/83 DBC\n*        DYNA-TABLE, THEN THIS INTERCEPT DOES THAT.         * 11/83 DBC\n*                                                           * 11/83 DBC\n*        DURING DYNABLDL START PROCESSING, THE FOLLOWING IS * 11/83 DBC\n*        DONE.                                              * 11/83 DBC\n*                                                           * 11/83 DBC\n*              - THIS ROUTINE IS COPIED TO GLOBAL, FIXED,   * 11/83 DBC\n*                KEY0, FETCH ACCESSABLE MEMORY (SP245).     * 11/83 DBC\n*                                                           * 11/83 DBC\n*              - ALL ADCONS CONTAINED IN IT ARE RELOCATED.  * 11/83 DBC\n*                                                           * 11/83 DBC\n*              - ALL REFERENCES TO IBM PRIVATE DATA FIELDS  * 11/83 DBC\n*                ARE ADJUSTED TO CORRESPOND TO THE CURRENT  * 11/83 DBC\n*                VERSION OF IGC018.                         * 11/83 DBC\n*                                                           * 11/83 DBC\n*              - THIS ROUTINE IS APPENDED WITH AN EXACT     * 11/83 DBC\n*                COPY OF THE INSTRUCTIONS IN IGC018 (AT     * 11/83 DBC\n*                LABEL \"DFOUND\") THAT WERE OVERLAID BY THE  * 11/83 DBC\n*                BRANCH TO THIS ROUTINE.                    * 11/83 DBC\n*                                                           * 11/83 DBC\n*              - THOSE INSTRUCTIONS ARE APPENDED BY A       * 11/83 DBC\n*                BRANCH BACK TO IGC018 FOLLOWING THE        * 11/83 DBC\n*                OVERLAID INSTRUCTIONS.                     * 11/83 DBC\n*                                                           * 11/83 DBC\n*        STATIC INPUTS:                                     * 11/83 DBC\n*              - R15 POINTS TO THIS HOOK'S ENTRY ADDRESS.   * 11/83 DBC\n*              - R0 AND R1 ARE VOLITILE; THEY NEED NOT BE   * 11/83 DBC\n*                RESTORED.                                  * 11/83 DBC\n*              - ALL OTHER REGISTERS (INCLUDING R14), IF    * 11/83 DBC\n*                ALTERED, MUST BE RESTORED.                 * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         USING DFOUND,R15          DCL LOCAL BASE             11/83 DBC\nDFOUND   DS    0F                  ALIGNMENT                  11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        DETERMINE WHETHER OR NOT THE CURRENT MEMBER NAME   * 11/83 DBC\n*        IS FROM THE LINKLIST LIBRARIES.                    * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R1,CVTPTR           --> CVT                    11/83 DBC\n         LA    R0,0(,RDCB-RDCB)    COPY PDS DCB PTR           11/83 DBC\n         @ZAP  (RDCB,-2)                                      11/83 DBC\n         CL    R0,CVTLINK-CVTMAP(,R1) SEARCHING LINKLIST?     11/83 DBC\n         BNE   DFOUNDZZ            NO, IGNORE THIS CALL       11/83 DBC\n         SPACE 1                                              11/83 DBC\n         TM    PDS1NAME+DYNLLOCK-PDS1(RPDS1-RPDS1),UNLOCKED   11/83 DBC\n         @ZAP  (RPDS1,-2)          YES, BUT WILL THIS NAME    11/83 DBC*\n                                   CONFUSE ME?                11/83 DBC\n         BZ    DFOUNDZZ            YES, IGNORE THIS CALL      11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        AQUIRE A LOCAL DYNAMIC WORK AREA                   * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R0,=AL1(229,0,0,DYNAWAL) SP/LEN                11/83 DBC\n         GETMAIN R,LV=(0)          GET AN AREA                11/83 DBC\n         DROP  R15                 LOCAL BASE CLOBBERED       11/83 DBC\n         USING DYNAWA,R1           DCL WORK AREA BASE         11/83 DBC\n         BALR  R15,0               RELOAD A LOCAL BASE        11/83 DBC\n         USING *,R15               DECLARE IT                 11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        SAVE IGC018'S ENVIRONMENT AND SET UP MY OWN.       * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         STM   R2,R14,REGSAVE      SAVE IGC018'S REGISTERS    11/83 DBC\n         MVC   CCIDSAVE,CONCAT#-CONCAT# SAVE CONCAT INDEX     11/83 DBC\n         @ZAP  (CONCAT#,-2)                                   11/83 DBC\n         LA    R0,0(,RPDS1-RPDS1)  --> FOUND D-ENTRY          11/83 DBC\n         @ZAP  (RPDS1,-2)                                     11/83 DBC\n         LR    R13,R1              COPY LCL DYNAWA PTR.       11/83 DBC\n*                                  NOTE, DIRECT USE OF        11/83 DBC\n*                                  IGC018'S REGISTERS IS NOW  11/83 DBC\n*                                  NO LONGER SAFE.            11/83 DBC\n         DROP  R1                  RELEASE TEMP DYNAWA BASE   11/83 DBC\n         USING DYNAWA,R13          DCL NEW ONE                11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LR    R1,R0               COPY D-ENTRY POINTER       11/83 DBC\n         USING PDS1,R1             DCL A BASE FOR IT          11/83 DBC\n         SPACE 1                                              11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        SAVE IGC018'S KEY AND LOAD KEY-0                     11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         IPK   ,                   GET IGC018'S KEY           11/83 DBC\n         STC   R2,KEYSAVE          SAVE IT                    11/83 DBC\n         SPKA  0                   LOAD KEY-0                 11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        GET BITS 10-41 OF THE CURRENT TOD CLOCK VALUE      * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         STCK  CLOKSAVE            GET THE TOD CLOCK          11/83 DBC\n         LM    R2,R3,CLOKSAVE      LOAD IT                    11/83 DBC\n         SLDL  R2,CLOKSHFT         ISSOLATE BITS 10-41        11/83 DBC\n         ST    R2,CLOKSAVE         STORE BACK                 11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        SCAN THE DYNA-TABLE IN SEARCH OF A STEALABLE SLOT. * 11/83 DBC\n*        NOTE, THE NAME MIGHT ALREADY EXIST IN THE TABLE,   * 11/83 DBC\n*        SO CHECK THAT TOO.                                 * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R8,DFOUNDDH         --> CONTROL TABLE          11/83 DBC\n         USING DYNAHEAD,R8         DCL CONTROL TABLE BASE     11/83 DBC\nRESCAN   LM    R3,R5,DYNAFIRS      --> DYNA-TABLE             11/83 DBC\n         USING DYNL,R3             DCL SLOT BASE              11/83 DBC\n         SPACE 1                                              11/83 DBC\n         SR    R0,R0               LOAD LOGICAL HIGH -        11/83 DBC\n         BCTR  R0,0                 VALUE (4X'FF')            11/83 DBC\n         SPACE 1                                              11/83 DBC\nSCANLOOP CL    R0,DYNLLRU#         LESS RECENTLY USED SLOT?   11/83 DBC\n         BL    SCANNAME            NO, SKIP                   11/83 DBC\n         LR    R2,R3               YES, SAVE ITS POINTER      11/83 DBC\n         ICM   R0,15,DYNLLRU#      GET LRU#; UNUSED SLOT?     11/83 DBC\n         BZ    SCANGRAB            YES, GO USE IT.            11/83 DBC\nSCANNAME CLC   DENTNAME,PDS1NAME   NO, IS THE NAME ACTUALLY   11/83 DBC\n*                                  ALREADY IN THE DYNA-TABLE? 11/83 DBC\n         BE    SCANRET             YES, NOTHING TO DO HERE    11/83 DBC\n         BXLE  R3,R4,SCANLOOP      NO, CONTINUE SEARCHING     11/83 DBC\n         DROP  R3                  RELEASE SLOT BASE          11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        A STEALABLE (OR UNUSED) SLOT HAS BEEN FOUND.       * 11/83 DBC\n*        ATTEMPT TO LOCK CONTROL OF IT.                     * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         USING DYNL,R2             DCL SLOT BASE              11/83 DBC\nSCANGRAB CLC   DYNLLRU#,CLOKSAVE   IF THE DYNA-TABLE IS VERY  11/83 DBC\n*                                  SMALL (SUCH AS 1 OR 2      11/83 DBC\n*                                  ENTRIES), THEN THE GRAB    11/83 DBC\n*                                  ATTEMPT COULD CONCEIVABLY  11/83 DBC\n*                                  FAIL ON EVERY SLOT AND     11/83 DBC\n*                                  THAT WOULD LEAD TO AN      11/83 DBC\n*                                  UNCONTROLLED LOOP. THIS    11/83 DBC\n*                                  TEST GUARDS AGAINST THAT.  11/83 DBC\n*                                  HAVE I ALREADY TRIED AND   11/83 DBC\n*                                  FAILED TO GRAB THIS SLOT?  11/83 DBC\n         BE    SCANRET             YES, GIVE UP.              11/83 DBC\n         MVC   DYNLLRU#,CLOKSAVE   NO, RESET THIS SLOT'S LRU# 11/83 DBC\n*                                  REGUARDLESS OF WHETHER OR  11/83 DBC\n*                                  I CAN LOCK IT.             11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LM    R4,R5,DENTNAME      GET THE SLOT'S NAME        11/83 DBC\n         O     R4,=A(UNLOCKED)     SET UNLOCKED IN CASE       11/83 DBC\n*                                  ALREADY LOCKED JUST NOW BY 11/83 DBC\n*                                  SOMEONE ELSE               11/83 DBC\n         #TEST SIZE=(DYNLLOCK,EQ,3) THE LOCK BIT MUST BE IN   11/83 DBC*\n                                   THE NAME'S 4TH BYTE        11/83 DBC\n         LR    R6,R4               COPY THE -                 11/83 DBC\n         LR    R7,R5                NAME                      11/83 DBC\n         X     R6,=A(UNLOCKED)     SET \"LOCKED\" SIGNAL        11/83 DBC\n         #TEST SIZE=(DYNLLOCK,EQ,3)                           11/83 DBC\n         CDS   R4,R6,DENTNAME      ATTEMPT TO LOCK THIS SLOT. 11/83 DBC\n*                                  GOT IT?                    11/83 DBC\n         BNE   RESCAN              NO, TRY TO GET ANOTHER     11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        I'VE NOW GOT A STEALABLE SLOT. COUNT IT AND STEAL  * 11/83 DBC\n*        IT.                                                * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         XC    DYNL(DYNLLEN),DYNL CLEAR THE SLOT              11/83 DBC\n         MVC   DYNLLRU#,CLOKSAVE   MAKE M.R.U.                11/83 DBC\n         MVC   DYNLCLOK,CLOKSAVE   SET BIRTHDATE              11/83 DBC\n         MVC   DENTCNCT,CCIDSAVE   SAVE LIB CONCAT INDEX      11/83 DBC\n         MVI   DENTLIBF,LINKSVC    SET \"FROM LINKLIST\" SIGNAL 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         IC    R4,PDS1INDC         GET L'UDAT/2               11/83 DBC\n         N     R4,=A(PDS1LUSR)     ISSOLATE IT                11/83 DBC\n         AR    R4,R4               CNVRT TO TRUE VALUE        11/83 DBC\n         LA    R5,DENTUSRD-DENT(,R4) CNVRT TO SLOT ENTRY LEN  11/83 DBC\n         STH   R5,DYNLELEN         SAVE                       11/83 DBC\n         MVC   DENTINDC(*-*),PDS1INDC (EXECUTED)              11/83 DBC\n         EX    R4,*-6              COPY FLAGS, LENGTH, AND    11/83 DBC\n*                                  USER DATA TO THE SLOT      11/83 DBC\n         SPACE 1                                              11/83 DBC\n         MVC   DENTNAME(L'DENTNAME+L'DENTTTRP),PDS1NAME COPY  11/83 DBC\n*                                  REST OF INFO TO SLOT. ALSO 11/83 DBC\n*                                  UNLOCK THE SLOT.           11/83 DBC\n         DROP  R2                  RELEASE SLOT BASE          11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LA    R4,1                LOAD INCRIMENT             11/83 DBC\n         AL    R4,DYNADDED         INCR STEAL COUNTER         11/83 DBC\n         ST    R4,DYNADDED         STORE BACK                 11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        RETURN TO IGC018                                   * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nSCANRET  IC    R2,KEYSAVE          GET IGC018'S KEY           11/83 DBC\n         SPKA  0(R2)               RESTORE IT                 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LA    R1,DYNAWA           SAVE WORK AREA PTR         11/83 DBC\n         DROP  R1                  RELEASE D-ENTRY BASE       11/83 DBC\n         LM    R2,R14,REGSAVE      RESTORE IGC018'S REGISTERS 11/83 DBC\n         DROP  R8                  RELEASE CONTROL TABLE BASE 11/83 DBC\n         DROP  R13                 RELEASE WORK AREA BASE     11/83 DBC\n         SPACE 1                                              11/83 DBC\n         L     R0,=AL1(229,0,0,DYNAWAL) GET SP/LEN            11/83 DBC\n         FREEMAIN R,LV=(0),A=(1)   RELEASE THE WORK AREA      11/83 DBC\n         DROP  R15                 LOCAL BASE CLOBBERED       11/83 DBC\n         BALR  R15,0               LOAD NEW LOCAL BASE        11/83 DBC\n         B     DFOUNDZZ-*(,R15)    GO EXIT TO IGC018          11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        LOCAL DATA                                         * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         DROP  ,                   RELEASE ALL BASES          11/83 DBC\n         SPACE 1                                              11/83 DBC\nDFOUNDDH DC    A(DYNAHEAD-DYNAHEAD) HEADER TABLE PTR          11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LTORG ,                                              11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        RETURN TO IGC018                                   * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nDFOUNDZZ DS    0H                                             11/83 DBC\nDFOUNDLL EQU   DFOUNDZZ-DFOUND                                11/83 DBC\n         SPACE 1                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        THE ORIGINAL DFOUND CODE FROM IGC018 GETS COPIED   * 11/83 DBC\n*        FOLLOWING HERE.                                    * 11/83 DBC\n************************************************************* 11/83 DBC\n         TITLE '@ZAP -- IBM PRIVATE FIELDS REFERENCE ADJUSTMENTS' 3 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        @ZAP -- THIS ROUTINE ADJUSTS ALL FLAGGED           * 11/83 DBC\n*        REFERENCES TO IBM PRIVATE FIELDS TO CORRESPOND TO  * 11/83 DBC\n*        THE CURRENT VERSION OF IGC018.                     * 11/83 DBC\n*                                                           * 11/83 DBC\n*        INPUTS:                                            * 11/83 DBC\n*              - R1 POINTS TO A TABLE OF FIELD DESCRIPTORS. * 11/83 DBC\n*              - THE PROGRAM BASE REGISTERS ARE AS          * 11/83 DBC\n*                ESTABLISHED BY THE #ENTER MACRO AT         * 11/83 DBC\n*                DYNABLDL'S ENTRY POINT.                    * 11/83 DBC\n*              - R14 POINTS TO A RETURN ADDRESS.            * 11/83 DBC\n*              - R0 MAY BE DESTROYED.                       * 11/83 DBC\n*              - NOTE, A LOCAL BASE IS NOT NEEDED HERE.     * 11/83 DBC\n*                                                           * 11/83 DBC\n*        RETURN 0(,R14):                                    * 11/83 DBC\n*              - THE REQUIRED ADJUSTMENTS HAVE BEEN MADE.   * 11/83 DBC\n*              - R0 IS DESTROYED.                           * 11/83 DBC\n*              - ALL OTHER REGISTERS ARE RESTORED.          * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         #USING ,                  RESTORE ADDRESSABILITY     11/83 DBC\n         USING FIELDS,R1           DCL FIELDS BASE            11/83 DBC\n@ZAP     @ZAP  ,                                              11/83 DBC\n         SPACE 1                                              11/83 DBC\n         BR    R14                 RETURN TO CALLER           11/83 DBC\n         DROP  ,                   RELEASE ALL BASES          11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LTORG ,                                              11/83 DBC\n         TITLE 'PRTEXIT -- SYSPRINT DCB OPEN EXIT'            11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        PRTEXIT -- THIS IS A DCB OPEN EXIT ROUTINE FOR THE * 11/83 DBC\n*        SYSPRINT FILE. IT EXAMINES THE RECFM, LRECL, AND   * 11/83 DBC\n*        BLKSIZE DCB FIELDS TO ENFORCE VALID COMBINATIONS   * 11/83 DBC\n*        AND TO SET THE FOLLOWING DEFAULTS AS APPROPRIATE.  * 11/83 DBC\n*                                                           * 11/83 DBC\n*        IF NEITHER RECFM=F, =V, OR =U IS GIVEN, THEN       * 11/83 DBC\n*        RECFM=V IS SET.                                    * 11/83 DBC\n*                                                           * 11/83 DBC\n*        IF RECFM=A OR =M IS GIVEN, THEN THAT IS CLEARED.   * 11/83 DBC\n*        (CARRIAGE CONTROL IS NOT SUPPORTED BY DYNABLDL).   * 11/83 DBC\n*                                                           * 11/83 DBC\n*        FOR RECFM=U, LRECL IS FORCED TO ZERO.              * 11/83 DBC\n*                                                           * 11/83 DBC\n*        IF BLKSIZE=0 IS GIVEN, THEN A TENTATIVE DEFAULT    * 11/83 DBC\n*        BLKSIZE IS CHOSEN AS FOLLOWS:                      * 11/83 DBC\n*        - IF RECFM=F, THEN BLKSIZE=3120.                   * 11/83 DBC\n*        - IF RECFM=V, THEN BLKSIZE=4096.                   * 11/83 DBC\n*        - IF RECFM=U, THEN BLKSIZE=79.                     * 11/83 DBC\n*                                                           * 11/83 DBC\n*        IF LRECL=0 IS GIVEN, THEN A DEFAULT LRECL IS       * 11/83 DBC\n*        CHOSEN AS FOLLOWS:                                 * 11/83 DBC\n*        - IF RECFM=F, THEN LRECL=80.                       * 11/83 DBC\n*        - IF RECFM=V, THEN LRECL=83.                       * 11/83 DBC\n*                                                           * 11/83 DBC\n*        FOR RECFM=F, IF BLKSIZE IS NOT A MULTIPLE OF       * 11/83 DBC\n*        LRECL, THEN IT IS ROUNDED DOWN TO A LRECL          * 11/83 DBC\n*        MULTIPLE.                                          * 11/83 DBC\n*                                                           * 11/83 DBC\n*        IF, AT THIS POINT, BLKSIZE IS NOT LARGE ENOUGH     * 11/83 DBC\n*        WHEN COMPARED TO LRECL, THEN A NEW BLKSIZE IS SET  * 11/83 DBC\n*        AS FOLLOWS:                                        * 11/83 DBC\n*        - IF RECFM=F, THEN BLKSIZE=LRECL.                  * 11/83 DBC\n*        - IF RECFM=V, THEN BLKSIZE=LRECL+4.                * 11/83 DBC\n*                                                           * 11/83 DBC\n*        INPUTS:                                            * 11/83 DBC\n*              - R1 POINTS TO THE SYSPRINT DCB.             * 11/83 DBC\n*              - R14 POINTS TO A RETURN ADDRESS (SVC 3).    * 11/83 DBC\n*              - R15 POINTS TO THIS ROUTINE'S ENTRY         * 11/83 DBC\n*                ADDRESS.                                   * 11/83 DBC\n*                                                           * 11/83 DBC\n*        RETURN 0(,R14):                                    * 11/83 DBC\n*              - THE ABOVE DESCRIBED PROCESSING HAS BEEN    * 11/83 DBC\n*                COMPLETED.                                 * 11/83 DBC\n*              - R14 REMAINS UNCHANGED.                     * 11/83 DBC\n*              - OTHER REGISTERS MAY BE ALTERED.            * 11/83 DBC\n*                (RESTORATION IS NOT NECESSARY).            * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\n         USING IHADCB,R1           DCL DCB BASE               11/83 DBC\n         USING PRTEXIT,R15         DCL LOCAL BASE             11/83 DBC\nPRTEXIT  LH    R4,DCBLRECL         GET LRECL                  11/83 DBC\n         LH    R3,DCBBLKSI         SET BLKSIZE                11/83 DBC\n         SPACE 1                                              11/83 DBC\n         OI    DCBRECFM,DCBRECBR   ASSUME BLOCKED RECORDS     11/83 DBC\n         SPACE 1                                              11/83 DBC\n         NI    DCBRECFM,255-DCBRECCC CLEAR CARRIAGE CONTROL   11/83 DBC\n         SPACE 1                                              11/83 DBC\n         TM    DCBRECFM,DCBRECU    RECFM DEFINED?             11/83 DBC\n         BO    PRTRECU             YES, RECFM=U               11/83 DBC\n         BNZ   PRTRECFV            YES, RECFM=F OR =V         11/83 DBC\n         OI    DCBRECFM,DCBRECV    NO, SET RECFM=V            11/83 DBC\nPRTRECFV TM    DCBRECFM,DCBRECF    RECFM=F?                   11/83 DBC\n         BO    PRTRECF             YES, GO HANDLE             11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        RECFM=V HANDLER                                    * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nPRTRECV  LTR   R3,R3               BLKSIZE=0?                 11/83 DBC\n         BNZ   PRTRVCK2            NO, SKIP                   11/83 DBC\n         LH    R3,=Y(4096)         YES, SET DEFAULT           11/83 DBC\n         SPACE 1                                              11/83 DBC\nPRTRVCK2 CH    R4,=Y(LEN3270+4)    LRECL LARGE ENOUGH?        11/83 DBC\n         BNL   PRTRVCK3            YES, SKIP                  11/83 DBC\n         LA    R4,LEN3270+4        NO, RESET                  11/83 DBC\n         SPACE 1                                              11/83 DBC\nPRTRVCK3 LA    R0,4(,R4)           GET LRECL+4                11/83 DBC\n         CR    R0,R3               BLKSIZE LARGE ENOUGH?      11/83 DBC\n         BH    PRTLBOK             YES, DONE HERE             11/83 DBC\n         NI    DCBRECFM,255-DCBRECBR NO, SIGNAL UNBLOCKED     11/83 DBC\n         LR    R3,R0               RESET THE BLKSIZE          11/83 DBC\n         B     PRTLBOK             DONE HERE                  11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        RECFM=F HANDLER                                    * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nPRTRECF  LTR   R3,R3               BLKSIZE=0?                 11/83 DBC\n         BNZ   PRTRFCK2            NO, SKIP                   11/83 DBC\n         LA    R3,3120             YES, SET DEFAULT           11/83 DBC\n         SPACE 1                                              11/83 DBC\nPRTRFCK2 CH    R4,=Y(LEN3270)      LRECL LARGE ENOUGH?        11/83 DBC\n         BNL   PRTRFCK3            YES, SKIP                  11/83 DBC\n         LA    R4,80               NO, SET DEFAULT            11/83 DBC\n         SPACE 1                                              11/83 DBC\nPRTRFCK3 SR    R2,R2               CLEAR FOR DIVIDE           11/83 DBC\n         DR    R2,R4               ROUND BLKSIZE DOWN -       11/83 DBC\n         MR    R2,R4                TO A LRECL MULTIPLE       11/83 DBC\n         SPACE 1                                              11/83 DBC\n         CR    R3,R4               IS BLKSIZE LARGE ENOUGH?   11/83 DBC\n*                                  (MIGHT BE ZEROED BY THE    11/83 DBC\n*                                  ABOVE DIVIDE)              11/83 DBC\n         BH    PRTLBOK             YES, DONE HERE             11/83 DBC\n         NI    DCBRECFM,255-DCBRECBR NO, SIGNAL UNBLOCKED     11/83 DBC\n         LR    R3,R4               RESET BLKSIZE              11/83 DBC\n         B     PRTLBOK             DONE HERE                  11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        RECFM=U HANDLER                                    * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nPRTRECU  NI    DCBRECFM,255-DCBRECBR SIGNAL UNBLOCKED         11/83 DBC\n         SR    R4,R4               SET LRECL=0                11/83 DBC\n         SPACE 1                                              11/83 DBC\n         CH    R3,=Y(LEN3270)      IS BLKSIZE LARGE ENOUGH?   11/83 DBC\n         BNL   PRTLBOK             YES, DONE HERE             11/83 DBC\n         LA    R3,LEN3270          NO, RESET THE BLKSIZE      11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*        RETURN TO CALLER (OPEN VIA SVC 3)                  * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nPRTLBOK  STH   R3,DCBBLKSI         STORE NEW BLKSIZE          11/83 DBC\n         STH   R4,DCBLRECL         STORE NEW LRECL            11/83 DBC\n         BR    R14                 RETURN TO CALLER           11/83 DBC\n         DROP  ,                   RELEASE ALL BASES          11/83 DBC\n         SPACE 1                                              11/83 DBC\n         LTORG ,                                              11/83 DBC\n         TITLE 'VERSION TABLES'                               11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        MODULE: IGC018                                     * 11/83 DBC\n*        PRODUCT: DF/DS (5740-AM7)                          * 11/83 DBC\n*        LEVEL: 8206                                        * 11/83 DBC\n*        PTF: UZ56064                                       * 11/83 DBC\n*        APAR: AZ60132                                      * 11/83 DBC\n*                                                           * 11/83 DBC\n*        THE FOLLOWING VECTOR POINTS TO VARIOUS DATA AREAS  * 11/83 DBC\n*        USED TO BOTH IDENTIFY AND MATCH THIS PARTICULAR    * 11/83 DBC\n*        VERSION OF IGC018. IT IS MAPPED BY THE \"VERSION\"   * 11/83 DBC\n*        DSECT.                                             * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nVERSN#01 CSECT ,                                              11/83 DBC\n         DC    A(ID#01)            --> VERSION VERIFIER       11/83 DBC\n         DC    A(SRCH#01)          --> ORIGINAL \"SRCHPDS\" COD 11/83 DBC\n         DC    A(DFND#01)          --> ORIGINAL \"DFOUND\" CODE 11/83 DBC\n         DC    A(DOFF#01)          --> IBM DATA FIELDS DESCRIPTORS  DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        MODULE IDENTIFIER CODE. MAPPED BY THE \"ORIGINAL\"   * 11/83 DBC\n*        DSECT.                                             * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nID#01    DS    0H                                             11/83 DBC\n         DC    Y(X'6')             VERIFY LOCATION            11/83 DBC\n         DC    Y(ID#01VLN)         VERIFY LENGTH              11/83 DBC\n         SPACE 1                                              11/83 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nID#01V   DC    C'IGC018  '         000006          DC    C'IGC018  '\n         DC    C'@ZA60132'         00000E          DC    C'@ZA60132'\n*                                                  DC    C'&SYSDATE'\n         DC    C'03/26/82'         000016+         DC    C'03/26/82'\n         DC    C'5740-AM7'         00001E          DC    C'5740-AM7 ---\n*                                  ************************************\n         SPACE 1                                              11/83 DBC\nID#01VLN EQU   *-ID#01V            VERIFY LENGTH              11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        \"SRCHPDS\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.    * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nSRCH#01  DS    0H                                             11/83 DBC\n         DC    Y(X'572')           VERIFY LOCATION            11/83 DBC\n         DC    Y(SRCH#01L)         VERIFY LENGTH              11/83 DBC\n         SPACE 1                                              11/83 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nSRCH#01V DS    0H                  000572 SRCHPDS  EQU   *\n         BAL   R14,X'4FA'(,R12)    000572          BAL   RSUBR,FIRSTMTY\n         TM    X'61'(R6),X'80'     000576          TM    EXSFLG,EXSSYDC\n         BO    X'580'(,R12)        00057A          BO    SRCHKYOK\n*                                  ************************************\n         SPACE 1                                              11/83 DBC\nSRCH#01L EQU   *-SRCH#01V          VERIFY LENGTH              11/83 DBC\n         #TEST SIZE=(SRCH#01L,GE,SRCHPOHL)                    11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        \"DFOUND\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.     * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nDFND#01  DS    0H                                             11/83 DBC\n         DC    Y(X'7C4')           VERIFY LOCATION            11/83 DBC\n         DC    Y(DFND#01L)         VERIFY LENGTH              11/83 DBC\n         SPACE 1                                              11/83 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nDFND#01V MVC   X'8'(3,R7),X'8'(R8) 0007C4 DFOUND   MVC   PDS2TTRP,PDS1T\n         IC    R4,X'B'(,R8)        0007CA          IC    RX,PDS1INDC\n         NR    R4,R14              0007CE          NR    RX,RZ\n         LA    R5,X'E'             0007D0          LA    RY,PDS2USRD-PD\n         LCR   R5,R5               0007D4          LCR   RY,RY\n         AH    R5,X'2'(,R10)       0007D6          AH    RY,BLDELEN\n*                                  ************************************\n         SPACE 1                                              11/83 DBC\nDFND#01L EQU   *-DFND#01V          VERIFY LENGTH              11/83 DBC\n         #TEST SIZE=(DFND#01L,GE,DFOUNDHL)                    11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        IBM DATA FIELD DESCRIPTORS. MAPPED BY THE \"FIELDS\" * 11/83 DBC\n*        DSECT.                                             * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nDOFF#01  DS    0H                                             11/83 DBC\n         SPACE 1                                              11/83 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\n*                                  000000 IGC018   CSECT ,\n*                                  000000          BALR  RBASE,0\n         DC    S(X'2'(R12))        000002          USING *,RBASE\n         SPACE 1                                              11/83 DBC\n         DC    S(0(R8))            000008 RPDS1    EQU   8\n         DC    S(0(R10))           00000A RLIST    EQU   10\n         DC    S(0(R11))           00000B RDCB     EQU   11\n         SPACE 1                                              11/83 DBC\n*                                  000000 WORKAREA DSECT ,\n         DC    S(0(R13))           000000 RDAREA   DS    CL256\n         DC    S(X'141'(R13))      000141 CONCAT#  DS    FL1\n         SPACE 1                                              11/83 DBC\n*                                 -000040 RBPRFX   DSECT ,\n*                                  000000 RBBASIC  DS    0F\n         DC    S(X'60'(R6))        000060 EXSKEY   DS    X\n         DC    S(X'61'(R6))        000061 EXSFLG   DS    B\n         DC    B'00100000'                EXSBLDL  EQU   B'00100000'\n*                                  ************************************\n         SPACE 1                                              11/83 DBC\n         #TEST SIZE=(*-DOFF#01,EQ,FIELDSLN)                   11/83 DBC\n         EJECT ,                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        MODULE: IGC018                                     * 11/83 DBC\n*        PRODUCT: DF/DS (5740-AM7)                          * 11/83 DBC\n*        LEVEL: 8107                                        * 09/84 DBC\n*        PTF: UZ37480                                       * 09/84 DBC\n*        APAR: AZ49924                                      * 11/83 DBC\n*                                                           * 11/83 DBC\n*        THE FOLLOWING VECTOR POINTS TO VARIOUS DATA AREAS  * 11/83 DBC\n*        USED TO BOTH IDENTIFY AND MATCH THIS PARTICULAR    * 11/83 DBC\n*        VERSION OF IGC018. IT IS MAPPED BY THE \"VERSION\"   * 11/83 DBC\n*        DSECT.                                             * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nVERSN#02 CSECT ,                                              11/83 DBC\n         DC    A(ID#02)            --> VERSION VERIFIER       11/83 DBC\n         DC    A(SRCH#02)          --> ORIGINAL \"SRCHPDS\" COD 11/83 DBC\n         DC    A(DFND#02)          --> ORIGINAL \"DFOUND\" CODE 11/83 DBC\n         DC    A(DOFF#02)          --> IBM DATA FIELDS DESCRIPTORS  DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        MODULE IDENTIFIER CODE. MAPPED BY THE \"ORIGINAL\"   * 11/83 DBC\n*        DSECT.                                             * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nID#02    DS    0H                                             11/83 DBC\n         DC    Y(X'6')             VERIFY LOCATION            11/83 DBC\n         DC    Y(ID#02VLN)         VERIFY LENGTH              11/83 DBC\n         SPACE 1                                              11/83 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nID#02V   DC    C'IGC018  '         000006          DC    C'IGC018  '\n         DC    C'@ZA49924'         00000E          DC    C'@ZA49924'\n*                                                  DC    C'&SYSDATE'\n         DC    C'05/28/81'         000016+         DC    C'05/28/81'\n         DC    C'5740-AM7'         00001E          DC    C'5740-AM7 ---\n*                                  ************************************\n         SPACE 1                                              11/83 DBC\nID#02VLN EQU   *-ID#02V            VERIFY LENGTH              11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        \"SRCHPDS\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.    * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nSRCH#02  DS    0H                                             11/83 DBC\n         DC    Y(X'566')           VERIFY LOCATION            11/83 DBC\n         DC    Y(SRCH#02L)         VERIFY LENGTH              11/83 DBC\n         SPACE 1                                              11/83 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nSRCH#02V DS    0H                  000566 SRCHPDS  EQU   *\n         BAL   R14,X'4EE'(,R12)    000566          BAL   RSUBR,FIRSTMTY\n         TM    X'61'(R6),X'80'     00056A          TM    EXSFLG,EXSSYDC\n         BO    X'574'(,R12)        00056E          BO    SRCHKYOK\n*                                  ************************************\n         SPACE 1                                              11/83 DBC\nSRCH#02L EQU   *-SRCH#02V          VERIFY LENGTH              11/83 DBC\n         #TEST SIZE=(SRCH#02L,GE,SRCHPOHL)                    11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        \"DFOUND\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.     * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nDFND#02  DS    0H                                             11/83 DBC\n         DC    Y(X'7B8')           VERIFY LOCATION            11/83 DBC\n         DC    Y(DFND#02L)         VERIFY LENGTH              11/83 DBC\n         SPACE 1                                              11/83 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nDFND#02V MVC   X'8'(3,R7),X'8'(R8) 0007B8 DFOUND   MVC   PDS2TTRP,PDS1T\n         IC    R4,X'B'(,R8)        0007BE          IC    RX,PDS1INDC\n         NR    R4,R14              0007C2          NR    RX,RZ\n         LA    R5,X'E'             0007C4          LA    RY,PDS2USRD-PD\n         LCR   R5,R5               0007C8          LCR   RY,RY\n         AH    R5,X'2'(,R10)       0007CA          AH    RY,BLDELEN\n*                                  ************************************\n         SPACE 1                                              11/83 DBC\nDFND#02L EQU   *-DFND#02V          VERIFY LENGTH              11/83 DBC\n         #TEST SIZE=(DFND#02L,GE,DFOUNDHL)                    11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        IBM DATA FIELD DESCRIPTORS. MAPPED BY THE \"FIELDS\" * 11/83 DBC\n*        DSECT.                                             * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nDOFF#02  DS    0H                                             11/83 DBC\n         SPACE 1                                              11/83 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\n*                                  000000 IGC018   CSECT ,\n*                                  000000          BALR  RBASE,0\n         DC    S(X'2'(R12))        000002          USING *,RBASE\n         SPACE 1                                              11/83 DBC\n         DC    S(0(R8))            000008 RPDS1    EQU   8\n         DC    S(0(R10))           00000A RLIST    EQU   10\n         DC    S(0(R11))           00000B RDCB     EQU   11\n         SPACE 1                                              11/83 DBC\n*                                  000000 WORKAREA DSECT ,\n         DC    S(0(R13))           000000 RDAREA   DS    CL256\n         DC    S(X'141'(R13))      000141 CONCAT#  DS    FL1\n         SPACE 1                                              11/83 DBC\n*                                 -000040 RBPRFX   DSECT ,\n*                                  000000 RBBASIC  DS    0F\n         DC    S(X'60'(R6))        000060 EXSKEY   DS    X\n         DC    S(X'61'(R6))        000061 EXSFLG   DS    B\n         DC    B'00100000'                EXSBLDL  EQU   B'00100000'\n*                                  ************************************\n         SPACE 1                                              11/83 DBC\n         #TEST SIZE=(*-DOFF#02,EQ,FIELDSLN)                   11/83 DBC\n         EJECT ,                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        MODULE: IGC018                                     * 11/83 DBC\n*        PRODUCT: MVS SCP 3.8 (5752-MVS)                    * 11/83 DBC\n*        LEVEL: 8009                                        * 11/83 DBC\n*        PTF: UZ32516                                       * 11/83 DBC\n*        APAR: AZ47610                                      * 11/83 DBC\n*                                                           * 11/83 DBC\n*        THE FOLLOWING VECTOR POINTS TO VARIOUS DATA AREAS  * 11/83 DBC\n*        USED TO BOTH IDENTIFY AND MATCH THIS PARTICULAR    * 11/83 DBC\n*        VERSION OF IGC018. IT IS MAPPED BY THE \"VERSION\"   * 11/83 DBC\n*        DSECT.                                             * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nVERSN#03 CSECT ,                                              11/83 DBC\n         DC    A(ID#03)            --> VERSION VERIFIER       11/83 DBC\n         DC    A(SRCH#03)          --> ORIGINAL \"SRCHPDS\" COD 11/83 DBC\n         DC    A(DFND#03)          --> ORIGINAL \"DFOUND\" CODE 11/83 DBC\n         DC    A(DOFF#03)          --> IBM DATA FIELDS DESCRIPTORS  DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        MODULE IDENTIFIER CODE. MAPPED BY THE \"ORIGINAL\"   * 11/83 DBC\n*        DSECT.                                             * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nID#03    DS    0H                                             11/83 DBC\n         DC    Y(X'6')             VERIFY LOCATION            11/83 DBC\n         DC    Y(ID#03VLN)         VERIFY LENGTH              11/83 DBC\n         SPACE 1                                              11/83 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nID#03V   DC    C'IGC018  '         000006          DC    C'IGC018  '\n         DC    C'@ZZ47610'         00000E          DC    C'@ZZ47610'\n*                                                  DC    C'&SYSDATE'\n         DC    C'07/09/80'         000016+         DC    C'07/09/80'\n*                                  ************************************\n         SPACE 1                                              11/83 DBC\nID#03VLN EQU   *-ID#03V            VERIFY LENGTH              11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        \"SRCHPDS\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.    * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nSRCH#03  DS    0H                                             11/83 DBC\n         DC    Y(X'4B2')           VERIFY LOCATION            11/83 DBC\n         DC    Y(SRCH#03L)         VERIFY LENGTH              11/83 DBC\n         SPACE 1                                              11/83 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nSRCH#03V DS    0H                  0004B2 SRCHPDS  EQU   *\n         BAL   R14,X'43A'(,R12)    0004B2          BAL   RSUBR,FIRSTMTY\n         SR    R0,R0               0004B6          SR    R0,R0\n         IC    R0,X'141'(,R13)     0004B8 SRCHTTR  IC    R0,CONCAT#\n*                                        ******************************\n*                                        * NOTE, \"SRCHTTR\" IS NOT     *\n*                                        * REFERENCED IN IGC018, SO   *\n*                                        * NO PROBLEM EXISTS HERE.    *\n*                                        ******************************\n         TM    X'61'(R6),X'80'     0004BC          TM    EXSFLG,EXSSYDC\n*                                  ************************************\n         SPACE 1                                              11/83 DBC\nSRCH#03L EQU   *-SRCH#03V          VERIFY LENGTH              11/83 DBC\n         #TEST SIZE=(SRCH#03L,GE,SRCHPOHL)                    11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        \"DFOUND\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.     * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nDFND#03  DS    0H                                             11/83 DBC\n         DC    Y(X'6A0')           VERIFY LOCATION            11/83 DBC\n         DC    Y(DFND#03L)         VERIFY LENGTH              11/83 DBC\n         SPACE 1                                              11/83 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nDFND#03V MVC   X'8'(3,R7),X'8'(R8) 0006A0 DFOUND   MVC   PDS2TTRP,PDS1T\n         IC    R4,X'B'(,R8)        0006A6          IC    RX,PDS1INDC\n         NR    R4,R14              0006AA          NR    RX,RZ\n         LA    R5,X'E'             0006AC          LA    RY,PDS2USRD-PD\n         LCR   R5,R5               0006B0          LCR   RY,RY\n         AH    R5,X'2'(,R10)       0006B2          AH    RY,BLDELEN\n*                                  ************************************\n         SPACE 1                                              11/83 DBC\nDFND#03L EQU   *-DFND#03V          VERIFY LENGTH              11/83 DBC\n         #TEST SIZE=(DFND#03L,GE,DFOUNDHL)                    11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        IBM DATA FIELD DESCRIPTORS. MAPPED BY THE \"FIELDS\" * 11/83 DBC\n*        DSECT.                                             * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nDOFF#03  DS    0H                                             11/83 DBC\n         SPACE 1                                              11/83 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\n*                                  000000 IGC018   CSECT ,\n*                                  000000          BALR  RBASE,0\n         DC    S(X'2'(R12))        000002          USING *,RBASE\n         SPACE 1                                              11/83 DBC\n         DC    S(0(R8))            000008 RPDS1    EQU   8\n         DC    S(0(R10))           00000A RLIST    EQU   10\n         DC    S(0(R11))           00000B RDCB     EQU   11\n         SPACE 1                                              11/83 DBC\n*                                  000000 WORKAREA DSECT ,\n         DC    S(0(R13))           000000 RDAREA   DS    CL256\n         DC    S(X'141'(R13))      000141 CONCAT#  DS    FL1\n         SPACE 1                                              11/83 DBC\n*                                 -000040 RBPRFX   DSECT ,\n*                                  000000 RBBASIC  DS    0F\n         DC    S(X'60'(R6))        000060 EXSKEY   DS    X\n         DC    S(X'61'(R6))        000061 EXSFLG   DS    B\n         DC    B'00100000'                EXSBLDL  EQU   B'00100000'\n*                                  ************************************\n         SPACE 1                                              11/83 DBC\n         #TEST SIZE=(*-DOFF#03,EQ,FIELDSLN)                   11/83 DBC\n         EJECT ,                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        MODULE: IGC018                                     * 11/83 DBC\n*        PRODUCT: DF/DS (5740-AM7)                          * 11/83 DBC\n*        LEVEL: 8303                                        * 11/83 DBC\n*        PTF: UZ61168 (VARIATION \"@HZA\")                    * 05/84 DBC\n*                                                           * 11/83 DBC\n*        THE FOLLOWING VECTOR POINTS TO VARIOUS DATA AREAS  * 11/83 DBC\n*        USED TO BOTH IDENTIFY AND MATCH THIS PARTICULAR    * 11/83 DBC\n*        VERSION OF IGC018. IT IS MAPPED BY THE \"VERSION\"   * 11/83 DBC\n*        DSECT.                                             * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nVERSN#04 CSECT ,                                              11/83 DBC\n         DC    A(ID#04)            --> VERSION VERIFIER       11/83 DBC\n         DC    A(SRCH#04)          --> ORIGINAL \"SRCHPDS\" COD 11/83 DBC\n         DC    A(DFND#04)          --> ORIGINAL \"DFOUND\" CODE 11/83 DBC\n         DC    A(DOFF#04)          --> IBM DATA FIELDS DESCRIPTORS  DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        MODULE IDENTIFIER CODE. MAPPED BY THE \"ORIGINAL\"   * 11/83 DBC\n*        DSECT.                                             * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nID#04    DS    0H                                             11/83 DBC\n         DC    Y(X'6')             VERIFY LOCATION            11/83 DBC\n         DC    Y(ID#04VLN)         VERIFY LENGTH              11/83 DBC\n         SPACE 1                                              11/83 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nID#04V   DC    C'IGC018  '         000006          DC    C'IGC018  '\n         DC    C'    @HZA'         00000E          DC    C'    @HZA'\n*                                                  DC    C'&SYSDATE'\n         DC    C'11/19/82'         000016+         DC    C'11/19/82'\n         DC    C'5740-AM7'         00001E          DC    C'5740-AM7 ---\n*                                  ************************************\n         SPACE 1                                              11/83 DBC\nID#04VLN EQU   *-ID#04V            VERIFY LENGTH              11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        \"SRCHPDS\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.    * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nSRCH#04  DS    0H                                             11/83 DBC\n         DC    Y(X'58C')           VERIFY LOCATION            11/83 DBC\n         DC    Y(SRCH#04L)         VERIFY LENGTH              11/83 DBC\n         SPACE 1                                              11/83 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nSRCH#04V DS    0H                  00058C SRCHPDS  EQU   *\n         BAL   R14,X'514'(,R12)    00058C          BAL   RSUBR,FIRSTMTY\n         SR    R0,R0               000590          SR    R0,R0\n         IC    R0,X'159'(,R13)     000592 SRCHTTR  IC    R0,CONCAT#\n*                                        ******************************\n*                                        * NOTE, \"SRCHTTR\" IS NOT     *\n*                                        * REFERENCED IN IGC018, SO   *\n*                                        * NO PROBLEM EXISTS HERE.    *\n*                                        ******************************\n         TM    X'61'(R6),X'80'     000596          TM    EXSFLG,EXSSYDC\n*                                  ************************************\n         SPACE 1                                              11/83 DBC\nSRCH#04L EQU   *-SRCH#04V          VERIFY LENGTH              11/83 DBC\n         #TEST SIZE=(SRCH#04L,GE,SRCHPOHL)                    11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        \"DFOUND\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.     * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nDFND#04  DS    0H                                             11/83 DBC\n         DC    Y(X'808')           VERIFY LOCATION            11/83 DBC\n         DC    Y(DFND#04L)         VERIFY LENGTH              11/83 DBC\n         SPACE 1                                              11/83 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nDFND#04V MVC   X'8'(3,R7),X'8'(R8) 000808 DFOUND   MVC   PDS2TTRP,PDS1T\n         IC    R4,X'B'(,R8)        00080E          IC    RX,PDS1INDC\n         NR    R4,R14              000812          NR    RX,RZ\n         LA    R5,X'E'             000814          LA    RY,PDS2USRD-PD\n         LCR   R5,R5               000818          LCR   RY,RY\n         AH    R5,X'2'(,R10)       00081A          AH    RY,BLDELEN\n*                                  ************************************\n         SPACE 1                                              11/83 DBC\nDFND#04L EQU   *-DFND#04V          VERIFY LENGTH              11/83 DBC\n         #TEST SIZE=(DFND#04L,GE,DFOUNDHL)                    11/83 DBC\n         SPACE 3                                              11/83 DBC\n************************************************************* 11/83 DBC\n*                                                           * 11/83 DBC\n*        IBM DATA FIELD DESCRIPTORS. MAPPED BY THE \"FIELDS\" * 11/83 DBC\n*        DSECT.                                             * 11/83 DBC\n*                                                           * 11/83 DBC\n************************************************************* 11/83 DBC\n         SPACE 1                                              11/83 DBC\nDOFF#04  DS    0H                                             11/83 DBC\n         SPACE 1                                              11/83 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\n*                                  000000 IGC018   CSECT ,\n*                                  000000          BALR  RBASE,0\n         DC    S(X'2'(R12))        000002          USING *,RBASE\n         SPACE 1                                              11/83 DBC\n         DC    S(0(R8))            000008 RPDS1    EQU   8\n         DC    S(0(R10))           00000A RLIST    EQU   10\n         DC    S(0(R11))           00000B RDCB     EQU   11\n         SPACE 1                                              11/83 DBC\n*                                  000000 WORKAREA DSECT ,\n         DC    S(0(R13))           000000 RDAREA   DS    CL256\n         DC    S(X'159'(R13))      000159 CONCAT#  DS    FL1\n         SPACE 1                                              11/83 DBC\n*                                 -000040 RBPRFX   DSECT ,\n*                                  000000 RBBASIC  DS    0F\n         DC    S(X'60'(R6))        000060 EXSKEY   DS    X\n         DC    S(X'61'(R6))        000061 EXSFLG   DS    B\n         DC    B'00100000'                EXSBLDL  EQU   B'00100000'\n*                                  ************************************\n         SPACE 1                                              11/83 DBC\n         #TEST SIZE=(*-DOFF#04,EQ,FIELDSLN)                   11/83 DBC\n         EJECT ,                                              04/84 JLC\n************************************************************* 04/84 JLC\n*                                                           * 04/84 JLC\n*        MODULE: IGC018                                     * 04/84 JLC\n*        PRODUCT: DF/DS (5740-AM7)                          * 04/84 JLC\n*        LEVEL: 8303                                        * 04/84 JLC\n*        PTF: UZ61167                                       * 04/84 JLC\n*                                                           * 04/84 JLC\n*        THE FOLLOWING VECTOR POINTS TO VARIOUS DATA AREAS  * 04/84 JLC\n*        USED TO BOTH IDENTIFY AND MATCH THIS PARTICULAR    * 04/84 JLC\n*        VERSION OF IGC018. IT IS MAPPED BY THE \"VERSION\"   * 04/84 JLC\n*        DSECT.                                             * 04/84 JLC\n*                                                           * 04/84 JLC\n*        PREPARED 04/20/84 BY J.CALLEN AT U OF C            * 04/84 JLC\n*                                                           * 04/84 JLC\n************************************************************* 04/84 JLC\n         SPACE 1                                              04/84 JLC\nVERSN#05 CSECT ,                                              04/84 JLC\n         DC    A(ID#05)            --> VERSION VERIFIER       04/84 JLC\n         DC    A(SRCH#05)          --> ORIGINAL \"SRCHPDS\" COD 04/84 JLC\n         DC    A(DFND#05)          --> ORIGINAL \"DFOUND\" CODE 04/84 JLC\n         DC    A(DOFF#05)          --> IBM DATA FIELDS DESCRIPTORS  JLC\n         SPACE 3                                              04/84 JLC\n************************************************************* 04/84 JLC\n*                                                           * 04/84 JLC\n*        MODULE IDENTIFIER CODE. MAPPED BY THE \"ORIGINAL\"   * 04/84 JLC\n*        DSECT.                                             * 04/84 JLC\n*                                                           * 04/84 JLC\n************************************************************* 04/84 JLC\n         SPACE 1                                              04/84 JLC\nID#05    DS    0H                                             04/84 JLC\n         DC    Y(X'6')             VERIFY LOCATION            04/84 JLC\n         DC    Y(ID#05VLN)         VERIFY LENGTH              04/84 JLC\n         SPACE 1                                              04/84 JLC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nID#05V   DC    C'IGC018  '         000006          DC    C'IGC018  '\n         DC    C'@ZA66915'         00000E          DC    C'ZA66915A'\n*                                                  DC    C'&SYSDATE'\n         DC    C'11/19/82'         000016+         DC    C'11/19/82'\n         DC    C'5740-AM7'         00001E          DC    C'5740-AM7 ---\n*                                  ************************************\n         SPACE 1                                              04/84 JLC\nID#05VLN EQU   *-ID#05V            VERIFY LENGTH              04/84 JLC\n         SPACE 3                                              04/84 JLC\n************************************************************* 04/84 JLC\n*                                                           * 04/84 JLC\n*        \"SRCHPDS\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.    * 04/84 JLC\n*                                                           * 04/84 JLC\n************************************************************* 04/84 JLC\n         SPACE 1                                              04/84 JLC\nSRCH#05  DS    0H                                             04/84 JLC\n         DC    Y(X'57A')           VERIFY LOCATION            04/84 JLC\n         DC    Y(SRCH#05L)         VERIFY LENGTH              04/84 JLC\n         SPACE 1                                              04/84 JLC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nSRCH#05V DS    0H                  00057A SRCHPDS  EQU   *\n         BAL   R14,X'502'(,R12)    00057A          BAL   RSUBR,FIRSTMTY\n         TM    X'61'(R6),X'80'     00057E          TM    EXSFLG,EXSSYDC\n         BO    X'588'(,R12)        000582          BO    SRCHKYOK\n*                                  ************************************\n         SPACE 1                                              04/84 JLC\nSRCH#05L EQU   *-SRCH#05V          VERIFY LENGTH              04/84 JLC\n         #TEST SIZE=(SRCH#05L,GE,SRCHPOHL)                    04/84 JLC\n         SPACE 3                                              04/84 JLC\n************************************************************* 04/84 JLC\n*                                                           * 04/84 JLC\n*        \"DFOUND\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.     * 04/84 JLC\n*                                                           * 04/84 JLC\n************************************************************* 04/84 JLC\n         SPACE 1                                              04/84 JLC\nDFND#05  DS    0H                                             04/84 JLC\n         DC    Y(X'7CC')           VERIFY LOCATION            04/84 JLC\n         DC    Y(DFND#05L)         VERIFY LENGTH              04/84 JLC\n         SPACE 1                                              04/84 JLC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nDFND#05V MVC   X'8'(3,R7),X'8'(R8) 0007CC DFOUND   MVC   PDS2TTRP,PDS1T\n         IC    R4,X'B'(,R8)        0007D2          IC    RX,PDS1INDC\n         NR    R4,R14              0007D6          NR    RX,RZ\n         LA    R5,X'E'             0007D8          LA    RY,PDS2USRD-PD\n         LCR   R5,R5               0007DC          LCR   RY,RY\n         AH    R5,X'2'(,R10)       0007DE          AH    RY,BLDELEN\n*                                  ************************************\n         SPACE 1                                              04/84 JLC\nDFND#05L EQU   *-DFND#05V          VERIFY LENGTH              04/84 JLC\n         #TEST SIZE=(DFND#05L,GE,DFOUNDHL)                    04/84 JLC\n         SPACE 3                                              04/84 JLC\n************************************************************* 04/84 JLC\n*                                                           * 04/84 JLC\n*        IBM DATA FIELD DESCRIPTORS. MAPPED BY THE \"FIELDS\" * 04/84 JLC\n*        DSECT.                                             * 04/84 JLC\n*                                                           * 04/84 JLC\n************************************************************* 04/84 JLC\n         SPACE 1                                              04/84 JLC\nDOFF#05  DS    0H                                             04/84 JLC\n         SPACE 1                                              04/84 JLC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\n*                                  000000 IGC018   CSECT ,\n*                                  000000          BALR  RBASE,0\n         DC    S(X'2'(R12))        000002          USING *,RBASE\n         SPACE 1                                              04/84 JLC\n         DC    S(0(R8))            000008 RPDS1    EQU   8\n         DC    S(0(R10))           00000A RLIST    EQU   10\n         DC    S(0(R11))           00000B RDCB     EQU   11\n         SPACE 1                                              04/84 JLC\n*                                  000000 WORKAREA DSECT ,\n         DC    S(0(R13))           000000 RDAREA   DS    CL256\n         DC    S(X'141'(R13))      000141 CONCAT#  DS    FL1\n         SPACE 1                                              04/84 JLC\n*                                 -000040 RBPRFX   DSECT ,\n*                                  000000 RBBASIC  DS    0F\n         DC    S(X'60'(R6))        000060 EXSKEY   DS    X\n         DC    S(X'61'(R6))        000061 EXSFLG   DS    B\n         DC    B'00100000'                EXSBLDL  EQU   B'00100000'\n*                                  ************************************\n         SPACE 1                                              04/84 JLC\n         #TEST SIZE=(*-DOFF#05,EQ,FIELDSLN)                   04/84 JLC\n         EJECT ,                                              05/84 DBC\n************************************************************* 05/84 DBC\n*                                                           * 05/84 DBC\n*        MODULE: IGC018                                     * 05/84 DBC\n*        PRODUCT: DF/DS (5740-AM7)                          * 05/84 DBC\n*        LEVEL: 8303                                        * 05/84 DBC\n*        PTF: UZ61168 (VARIATION \"@H2A\")                    * 05/84 DBC\n*                                                           * 05/84 DBC\n*        THE FOLLOWING VECTOR POINTS TO VARIOUS DATA AREAS  * 05/84 DBC\n*        USED TO BOTH IDENTIFY AND MATCH THIS PARTICULAR    * 05/84 DBC\n*        VERSION OF IGC018. IT IS MAPPED BY THE \"VERSION\"   * 05/84 DBC\n*        DSECT.                                             * 05/84 DBC\n*                                                           * 05/84 DBC\n************************************************************* 05/84 DBC\n         SPACE 1                                              05/84 DBC\nVERSN#06 CSECT ,                                              05/84 DBC\n         DC    A(ID#06)            --> VERSION VERIFIER       05/84 DBC\n         DC    A(SRCH#06)          --> ORIGINAL \"SRCHPDS\" COD 05/84 DBC\n         DC    A(DFND#06)          --> ORIGINAL \"DFOUND\" CODE 05/84 DBC\n         DC    A(DOFF#06)          --> IBM DATA FIELDS DESCRIPTORS  DBC\n         SPACE 3                                              05/84 DBC\n************************************************************* 05/84 DBC\n*                                                           * 05/84 DBC\n*        MODULE IDENTIFIER CODE. MAPPED BY THE \"ORIGINAL\"   * 05/84 DBC\n*        DSECT.                                             * 05/84 DBC\n*                                                           * 05/84 DBC\n************************************************************* 05/84 DBC\n         SPACE 1                                              05/84 DBC\nID#06    DS    0H                                             05/84 DBC\n         DC    Y(X'6')             VERIFY LOCATION            05/84 DBC\n         DC    Y(ID#06VLN)         VERIFY LENGTH              05/84 DBC\n         SPACE 1                                              05/84 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nID#06V   DC    C'IGC018  '         000006          DC    C'IGC018  '\n         DC    C'    @H2A'         00000E          DC    C'    @H2A'\n*                                                  DC    C'&SYSDATE'\n         DC    C'11/19/82'         000016+         DC    C'11/19/82'\n         DC    C'5740-AM7'         00001E          DC    C'5740-AM7 ---\n*                                  ************************************\n         SPACE 1                                              05/84 DBC\nID#06VLN EQU   *-ID#06V            VERIFY LENGTH              05/84 DBC\n         SPACE 3                                              05/84 DBC\n************************************************************* 05/84 DBC\n*                                                           * 05/84 DBC\n*        \"SRCHPDS\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.    * 05/84 DBC\n*                                                           * 05/84 DBC\n************************************************************* 05/84 DBC\n         SPACE 1                                              05/84 DBC\nSRCH#06  DS    0H                                             05/84 DBC\n         DC    Y(X'58C')           VERIFY LOCATION            05/84 DBC\n         DC    Y(SRCH#06L)         VERIFY LENGTH              05/84 DBC\n         SPACE 1                                              05/84 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nSRCH#06V DS    0H                  00058C SRCHPDS  EQU   *\n         BAL   R14,X'514'(,R12)    00058C          BAL   RSUBR,FIRSTMTY\n         SR    R0,R0               000590          SR    R0,R0\n         IC    R0,X'159'(,R13)     000592 SRCHTTR  IC    R0,CONCAT#\n*                                        ******************************\n*                                        * NOTE, \"SRCHTTR\" IS NOT     *\n*                                        * REFERENCED IN IGC018, SO   *\n*                                        * NO PROBLEM EXISTS HERE.    *\n*                                        ******************************\n         TM    X'61'(R6),X'80'     000596          TM    EXSFLG,EXSSYDC\n*                                  ************************************\n         SPACE 1                                              05/84 DBC\nSRCH#06L EQU   *-SRCH#06V          VERIFY LENGTH              05/84 DBC\n         #TEST SIZE=(SRCH#06L,GE,SRCHPOHL)                    05/84 DBC\n         SPACE 3                                              05/84 DBC\n************************************************************* 05/84 DBC\n*                                                           * 05/84 DBC\n*        \"DFOUND\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.     * 05/84 DBC\n*                                                           * 05/84 DBC\n************************************************************* 05/84 DBC\n         SPACE 1                                              05/84 DBC\nDFND#06  DS    0H                                             05/84 DBC\n         DC    Y(X'808')           VERIFY LOCATION            05/84 DBC\n         DC    Y(DFND#06L)         VERIFY LENGTH              05/84 DBC\n         SPACE 1                                              05/84 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nDFND#06V MVC   X'8'(3,R7),X'8'(R8) 000808 DFOUND   MVC   PDS2TTRP,PDS1T\n         IC    R4,X'B'(,R8)        00080E          IC    RX,PDS1INDC\n         NR    R4,R14              000812          NR    RX,RZ\n         LA    R5,X'E'             000814          LA    RY,PDS2USRD-PD\n         LCR   R5,R5               000818          LCR   RY,RY\n         AH    R5,X'2'(,R10)       00081A          AH    RY,BLDELEN\n*                                  ************************************\n         SPACE 1                                              05/84 DBC\nDFND#06L EQU   *-DFND#06V          VERIFY LENGTH              05/84 DBC\n         #TEST SIZE=(DFND#06L,GE,DFOUNDHL)                    05/84 DBC\n         SPACE 3                                              05/84 DBC\n************************************************************* 05/84 DBC\n*                                                           * 05/84 DBC\n*        IBM DATA FIELD DESCRIPTORS. MAPPED BY THE \"FIELDS\" * 05/84 DBC\n*        DSECT.                                             * 05/84 DBC\n*                                                           * 05/84 DBC\n************************************************************* 05/84 DBC\n         SPACE 1                                              05/84 DBC\nDOFF#06  DS    0H                                             05/84 DBC\n         SPACE 1                                              05/84 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\n*                                  000000 IGC018   CSECT ,\n*                                  000000          BALR  RBASE,0\n         DC    S(X'2'(R12))        000002          USING *,RBASE\n         SPACE 1                                              05/84 DBC\n         DC    S(0(R8))            000008 RPDS1    EQU   8\n         DC    S(0(R10))           00000A RLIST    EQU   10\n         DC    S(0(R11))           00000B RDCB     EQU   11\n         SPACE 1                                              05/84 DBC\n*                                  000000 WORKAREA DSECT ,\n         DC    S(0(R13))           000000 RDAREA   DS    CL256\n         DC    S(X'159'(R13))      000159 CONCAT#  DS    FL1\n         SPACE 1                                              05/84 DBC\n*                                 -000040 RBPRFX   DSECT ,\n*                                  000000 RBBASIC  DS    0F\n         DC    S(X'60'(R6))        000060 EXSKEY   DS    X\n         DC    S(X'61'(R6))        000061 EXSFLG   DS    B\n         DC    B'00100000'                EXSBLDL  EQU   B'00100000'\n*                                  ************************************\n         SPACE 1                                              05/84 DBC\n         #TEST SIZE=(*-DOFF#06,EQ,FIELDSLN)                   05/84 DBC\n         EJECT ,                                              08/84 DBC\n************************************************************* 08/84 DBC\n*                                                           * 08/84 DBC\n*        MODULE: IGC018                                     * 08/84 DBC\n*        PRODUCT: DFP (5665-295/A)                          * 08/84 DBC\n*                                                           * 08/84 DBC\n*        THE FOLLOWING VECTOR POINTS TO VARIOUS DATA AREAS  * 08/84 DBC\n*        USED TO BOTH IDENTIFY AND MATCH THIS PARTICULAR    * 08/84 DBC\n*        VERSION OF IGC018. IT IS MAPPED BY THE \"VERSION\"   * 08/84 DBC\n*        DSECT.                                             * 08/84 DBC\n*                                                           * 08/84 DBC\n************************************************************* 08/84 DBC\n         SPACE 1                                              08/84 DBC\nVERSN#07 CSECT ,                                              08/84 DBC\n         DC    A(ID#07)            --> VERSION VERIFIER       08/84 DBC\n         DC    A(SRCH#07)          --> ORIGINAL \"SRCHPDS\" COD 08/84 DBC\n         DC    A(FINDK#07)         --> ORIGINAL \"FINDKEY\" COD 08/84 DBC\n         DC    A(DOFF#07)          --> IBM DATA FIELDS DESCRIPTORS  DBC\n         SPACE 3                                              08/84 DBC\n************************************************************* 08/84 DBC\n*                                                           * 08/84 DBC\n*        MODULE IDENTIFIER CODE. MAPPED BY THE \"ORIGINAL\"   * 08/84 DBC\n*        DSECT.                                             * 08/84 DBC\n*                                                           * 08/84 DBC\n************************************************************* 08/84 DBC\n         SPACE 1                                              08/84 DBC\nID#07    DS    0H                                             08/84 DBC\n         DC    Y(X'6')             VERIFY LOCATION            08/84 DBC\n         DC    Y(ID#07VLN)         VERIFY LENGTH              08/84 DBC\n         SPACE 1                                              08/84 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nID#07V   DC    C'IGC018  '         000006          DC    C'IGC018  '\n         DC    C'JDQ1110 '         00000E          DC    C'JDQ1110 '\n*                                                  DC    C'&SYSDATE'\n         DC    C'10/19/83'         000016+         DC    C'10/19/83'\n         DC    C'5665-295'         00001E          DC    C'5665-295 ---\n*                                  ************************************\n         SPACE 1                                              08/84 DBC\nID#07VLN EQU   *-ID#07V            VERIFY LENGTH              08/84 DBC\n         SPACE 3                                              08/84 DBC\n************************************************************* 08/84 DBC\n*                                                           * 08/84 DBC\n*        \"SRCHPDS\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.    * 08/84 DBC\n*                                                           * 08/84 DBC\n************************************************************* 08/84 DBC\n         SPACE 1                                              08/84 DBC\nSRCH#07  DS    0H                                             08/84 DBC\n         DC    Y(X'52C')           VERIFY LOCATION            08/84 DBC\n         DC    Y(SRCH#07L)         VERIFY LENGTH              08/84 DBC\n         SPACE 1                                              08/84 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nSRCH#07V DS    0H                  00052C SRCHPDS  EQU   *\n         MVI   X'158'(R13),0       00052C          MVI   ERCODE,0\n         LH    R2,X'0'(,R10)       000530          LH    RSULEFT,BLDENT\n         LA    R7,X'4'(,R10)       000534          LA    RPDS2,BLDENT\n*                                  ************************************\n         SPACE 1                                              08/84 DBC\nSRCH#07L EQU   *-SRCH#07V          VERIFY LENGTH              08/84 DBC\n         #TEST SIZE=(SRCH#07L,GE,SRCHPOHL)                    08/84 DBC\n         SPACE 3                                              08/84 DBC\n************************************************************* 08/84 DBC\n*                                                           * 08/84 DBC\n*        \"DFOUND\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.     * 08/84 DBC\n*        NOTE, IN THIS VERSION OF IGC018, THE TRAP IS       * 08/84 DBC\n*        LOCATED AT LABEL \"FINDKEY\" WHICH IS NOW JUST PAST  * 08/84 DBC\n*        LABEL \"DFOUND\".                                    * 08/84 DBC\n*                                                           * 08/84 DBC\n************************************************************* 08/84 DBC\n         SPACE 1                                              08/84 DBC\nFINDK#07 DS    0H                                             08/84 DBC\n         DC    Y(X'7BC')           VERIFY LOCATION            08/84 DBC\n         DC    Y(FIND#07L)         VERIFY LENGTH              08/84 DBC\n         SPACE 1                                              08/84 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\n*                                  0007BC FINDKEY  EQU   *\nFIND#07V MVC   X'8'(3,R7),X'8'(R8) 0007BC          MVC   PDS2TTRP,PDS1T\n         IC    R4,X'B'(,R8)        0007C2          IC    RX,PDS1INDC\n         NR    R4,R14              0007C6          NR    RX,RZ\n         LA    R5,X'E'             0007C8          LA    RY,PDS2USRD-PD\n         LCR   R5,R5               0007CC          LCR   RY,RY\n         AH    R5,X'2'(,R10)       0007CE          AH    RY,BLDELEN\n*                                  ************************************\n         SPACE 1                                              08/84 DBC\nFIND#07L EQU   *-FIND#07V          VERIFY LENGTH              08/84 DBC\n         #TEST SIZE=(FIND#07L,GE,DFOUNDHL)                    08/84 DBC\n         SPACE 3                                              08/84 DBC\n************************************************************* 08/84 DBC\n*                                                           * 08/84 DBC\n*        IBM DATA FIELD DESCRIPTORS. MAPPED BY THE \"FIELDS\" * 08/84 DBC\n*        DSECT.                                             * 08/84 DBC\n*                                                           * 08/84 DBC\n************************************************************* 08/84 DBC\n         SPACE 1                                              08/84 DBC\nDOFF#07  DS    0H                                             08/84 DBC\n         SPACE 1                                              08/84 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\n*                                  000000 IGC018   CSECT ,\n*                                  000000          BALR  RBASE,0\n         DC    S(X'2'(R12))        000002          USING *,RBASE\n         SPACE 1                                              08/84 DBC\n         DC    S(0(R8))            000008 RPDS1    EQU   8\n         DC    S(0(R10))           00000A RLIST    EQU   10\n         DC    S(0(R11))           00000B RDCB     EQU   11\n         SPACE 1                                              08/84 DBC\n*                                  000000 WORKAREA DSECT ,\n         DC    S(0(R13))           000000 RDAREA   DS    CL256\n         DC    S(X'159'(R13))      000159 CONCAT#  DS    FL1\n         SPACE 1                                              08/84 DBC\n*                                 -000040 RBPRFX   DSECT ,\n*                                  000000 RBBASIC  DS    0F\n         DC    S(X'60'(R6))        000060 EXSKEY   DS    X\n         DC    S(X'61'(R6))        000061 EXSFLG   DS    B\n         DC    B'00100000'                EXSBLDL  EQU   B'00100000'\n*                                  ************************************\n         SPACE 1                                              08/84 DBC\n         #TEST SIZE=(*-DOFF#07,EQ,FIELDSLN)                   08/84 DBC\n         EJECT ,                                              06/84 WRH\n************************************************************* 06/84 WRH\n*                                                           * 06/84 WRH\n*        MODULE: IGC018                                     * 06/84 WRH\n*        PRODUCT: DF/DS (5740-AM7)                          * 06/84 WRH\n*        LEVEL: 8402                                        * 06/84 WRH\n*        PTF: UZ69197                                       * 06/84 WRH\n*        APAR: AZ66915                                      * 06/84 WRH\n*                                                           * 06/84 WRH\n*        THE FOLLOWING VECTOR POINTS TO VARIOUS DATA AREAS  * 06/84 WRH\n*        USED TO BOTH IDENTIFY AND MATCH THIS PARTICULAR    * 06/84 WRH\n*        VERSION OF IGC018. IT IS MAPPED BY THE \"VERSION\"   * 06/84 WRH\n*        DSECT.                                             * 06/84 WRH\n*                                                           * 06/84 WRH\n************************************************************* 06/84 WRH\n         SPACE 1                                              06/84 WRH\nVERSN#08 CSECT ,                                              06/84 WRH\n         DC    A(ID#08)            --> VERSION VERIFIER       06/84 WRH\n         DC    A(SRCH#08)          --> ORIGINAL \"SRCHPDS\" COD 06/84 WRH\n         DC    A(DFND#08)          --> ORIGINAL \"DFOUND\" CODE 06/84 WRH\n         DC    A(DOFF#08)          --> IBM DATA FIELDS DESCRIPTORS  WRH\n         SPACE 3                                              06/84 WRH\n************************************************************* 06/84 WRH\n*                                                           * 06/84 WRH\n*        MODULE IDENTIFIER CODE. MAPPED BY THE \"ORIGINAL\"   * 06/84 WRH\n*        DSECT.                                             * 06/84 WRH\n*                                                           * 06/84 WRH\n************************************************************* 06/84 WRH\n         SPACE 1                                              06/84 WRH\nID#08    DS    0H                                             06/84 WRH\n         DC    Y(X'6')             VERIFY LOCATION            06/84 WRH\n         DC    Y(ID#08VLN)         VERIFY LENGTH              06/84 WRH\n         SPACE 1                                              06/84 WRH\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nID#08V   DC    C'IGC018  '         000006          DC    C'IGC018  '\n         DC    C'@ZA66915'         00000E          DC    C'@ZA66915'\n*                                                  DC    C'&SYSDATE'\n         DC    C'11/22/83'         000016+         DC    C'11/22/83'\n         DC    C'5740-AM7'         00001E          DC    C'5740-AM7 ---\n*                                  ************************************\n         SPACE 1                                              06/84 WRH\nID#08VLN EQU   *-ID#08V            VERIFY LENGTH              06/84 WRH\n         SPACE 3                                              06/84 WRH\n************************************************************* 06/84 WRH\n*                                                           * 06/84 WRH\n*        \"SRCHPDS\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.    * 06/84 WRH\n*                                                           * 06/84 WRH\n************************************************************* 06/84 WRH\n         SPACE 1                                              06/84 WRH\nSRCH#08  DS    0H                                             06/84 WRH\n         DC    Y(X'57A')           VERIFY LOCATION            06/84 WRH\n         DC    Y(SRCH#08L)         VERIFY LENGTH              06/84 WRH\n         SPACE 1                                              06/84 WRH\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nSRCH#08V DS    0H                  00057A SRCHPDS  EQU   *\n         BAL   R14,X'502'(,R12)    00057A          BAL   RSUBR,FIRSTMTY\n         TM    X'61'(R6),X'80'     00057E          TM    EXSFLG,EXSSYCD\n         BO    X'588'(,R12)        000582          BO    SRCHKYOK\n*                                  ************************************\n         SPACE 1                                              06/84 WRH\nSRCH#08L EQU   *-SRCH#08V          VERIFY LENGTH              06/84 WRH\n         #TEST SIZE=(SRCH#08L,GE,SRCHPOHL)                    06/84 WRH\n         SPACE 3                                              06/84 WRH\n************************************************************* 06/84 WRH\n*                                                           * 06/84 WRH\n*        \"DFOUND\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.     * 06/84 WRH\n*                                                           * 06/84 WRH\n************************************************************* 06/84 WRH\n         SPACE 1                                              06/84 WRH\nDFND#08  DS    0H                                             06/84 WRH\n         DC    Y(X'7CC')           VERIFY LOCATION            06/84 WRH\n         DC    Y(DFND#08L)         VERIFY LENGTH              06/84 WRH\n         SPACE 1                                              06/84 WRH\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nDFND#08V MVC   X'8'(3,R7),X'8'(R8) 0007CC DFOUND   MVC   PDS2TTRP,PDS1T\n         IC    R4,X'B'(,R8)        0007D2          IC    RX,PDS1INDC\n         NR    R4,R14              0007D6          NR    RX,RZ\n         LA    R5,X'E'             0007D8          LA    RY,PDS2USRD-PD\n         LCR   R5,R5               0007DC          LCR   RY,RY\n         AH    R5,X'2'(,R10)       0007DE          AH    RY,BLDELEN\n*                                  ************************************\n         SPACE 1                                              06/84 WRH\nDFND#08L EQU   *-DFND#08V          VERIFY LENGTH              06/84 WRH\n         #TEST SIZE=(DFND#08L,GE,DFOUNDHL)                    06/84 WRH\n         SPACE 3                                              06/84 WRH\n************************************************************* 06/84 WRH\n*                                                           * 06/84 WRH\n*        IBM DATA FIELD DESCRIPTORS. MAPPED BY THE \"FIELDS\" * 06/84 WRH\n*        DSECT.                                             * 06/84 WRH\n*                                                           * 06/84 WRH\n************************************************************* 06/84 WRH\n         SPACE 1                                              06/84 WRH\nDOFF#08  DS    0H                                             06/84 WRH\n         SPACE 1                                              06/84 WRH\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\n*                                  000000 IGC018   CSECT ,\n*                                  000000          BALR  RBASE,0\n         DC    S(X'2'(R12))        000002          USING *,RBASE\n         SPACE 1                                              06/84 WRH\n         DC    S(0(R8))            000008 RPDS1    EQU   8\n         DC    S(0(R10))           00000A RLIST    EQU   10\n         DC    S(0(R11))           00000B RDCB     EQU   11\n         SPACE 1                                              06/84 WRH\n*                                  000000 WORKAREA DSECT ,\n         DC    S(0(R13))           000000 RDAREA   DS    CL256\n         DC    S(X'141'(R13))      000141 CONCAT#  DS    FL1\n         SPACE 1                                              06/84 WRH\n*                                 -000040 RBPRFX   DSECT ,\n*                                  000000 RBBASIC  DS    0F\n         DC    S(X'60'(R6))        000060 EXSKEY   DS    X\n         DC    S(X'61'(R6))        000061 EXSFLG   DS    B\n         DC    B'00100000'                EXSBLDL  EQU   B'00100000'\n*                                  ************************************\n         SPACE 1                                              06/84 WRH\n         #TEST SIZE=(*-DOFF#08,EQ,FIELDSLN)                   06/84 WRH\n         EJECT ,                                              09/84 DBC\n************************************************************* 09/84 DBC\n*                                                           * 09/84 DBC\n*        MODULE: IGC018                                     * 09/84 DBC\n*        PRODUCT: DFP (5665-295/A)                          * 09/84 DBC\n*                                                           * 09/84 DBC\n*        THE FOLLOWING VECTOR POINTS TO VARIOUS DATA AREAS  * 09/84 DBC\n*        USED TO BOTH IDENTIFY AND MATCH THIS PARTICULAR    * 09/84 DBC\n*        VERSION OF IGC018. IT IS MAPPED BY THE \"VERSION\"   * 09/84 DBC\n*        DSECT.                                             * 09/84 DBC\n*                                                           * 09/84 DBC\n************************************************************* 09/84 DBC\n         SPACE 1                                              09/84 DBC\nVERSN#09 CSECT ,                                              09/84 DBC\n         DC    A(ID#09)            --> VERSION VERIFIER       09/84 DBC\n         DC    A(SRCH#09)          --> ORIGINAL \"SRCHPDS\" COD 09/84 DBC\n         DC    A(FINDK#09)         --> ORIGINAL \"FINDKEY\" COD 09/84 DBC\n         DC    A(DOFF#09)          --> IBM DATA FIELDS DESCRIPTORS  DBC\n         SPACE 3                                              09/84 DBC\n************************************************************* 09/84 DBC\n*                                                           * 09/84 DBC\n*        MODULE IDENTIFIER CODE. MAPPED BY THE \"ORIGINAL\"   * 09/84 DBC\n*        DSECT.                                             * 09/84 DBC\n*                                                           * 09/84 DBC\n************************************************************* 09/84 DBC\n         SPACE 1                                              09/84 DBC\nID#09    DS    0H                                             09/84 DBC\n         DC    Y(X'6')             VERIFY LOCATION            09/84 DBC\n         DC    Y(ID#09VLN)         VERIFY LENGTH              09/84 DBC\n         SPACE 1                                              09/84 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nID#09V   DC    C'IGC018  '         000006          DC    C'IGC018  '\n         DC    C'ZA76850 '         00000E          DC    C'ZA76850 '\n*                                                  DC    C'&SYSDATE'\n         DC    C'03/28/84'         000016+         DC    C'03/28/84'\n         DC    C'5665-295'         00001E          DC    C'5665-295 ---\n*                                  ************************************\n         SPACE 1                                              09/84 DBC\nID#09VLN EQU   *-ID#09V            VERIFY LENGTH              09/84 DBC\n         SPACE 3                                              09/84 DBC\n************************************************************* 09/84 DBC\n*                                                           * 09/84 DBC\n*        \"SRCHPDS\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.    * 09/84 DBC\n*                                                           * 09/84 DBC\n************************************************************* 09/84 DBC\n         SPACE 1                                              09/84 DBC\nSRCH#09  DS    0H                                             09/84 DBC\n         DC    Y(X'52C')           VERIFY LOCATION            09/84 DBC\n         DC    Y(SRCH#09L)         VERIFY LENGTH              09/84 DBC\n         SPACE 1                                              09/84 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nSRCH#09V DS    0H                  00052C SRCHPDS  EQU   *\n         MVI   X'158'(R13),0       00052C          MVI   ERCODE,0\n         LH    R2,X'0'(,R10)       000530          LH    RSULEFT,BLDENT\n         LA    R7,X'4'(,R10)       000534          LA    RPDS2,BLDENT\n*                                  ************************************\n         SPACE 1                                              09/84 DBC\nSRCH#09L EQU   *-SRCH#09V          VERIFY LENGTH              09/84 DBC\n         #TEST SIZE=(SRCH#09L,GE,SRCHPOHL)                    09/84 DBC\n         SPACE 3                                              09/84 DBC\n************************************************************* 09/84 DBC\n*                                                           * 09/84 DBC\n*        \"DFOUND\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.     * 09/84 DBC\n*        NOTE, IN THIS VERSION OF IGC018, THE TRAP IS       * 09/84 DBC\n*        LOCATED AT LABEL \"FINDKEY\" WHICH IS NOW JUST PAST  * 09/84 DBC\n*        LABEL \"DFOUND\".                                    * 09/84 DBC\n*                                                           * 09/84 DBC\n************************************************************* 09/84 DBC\n         SPACE 1                                              09/84 DBC\nFINDK#09 DS    0H                                             09/84 DBC\n         DC    Y(X'7BC')           VERIFY LOCATION            09/84 DBC\n         DC    Y(FIND#09L)         VERIFY LENGTH              09/84 DBC\n         SPACE 1                                              09/84 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\n*                                  0007BC FINDKEY  EQU   *\nFIND#09V MVC   X'8'(3,R7),X'8'(R8) 0007BC          MVC   PDS2TTRP,PDS1T\n         IC    R4,X'B'(,R8)        0007C2          IC    RX,PDS1INDC\n         NR    R4,R14              0007C6          NR    RX,RZ\n         LA    R5,X'E'             0007C8          LA    RY,PDS2USRD-PD\n         LCR   R5,R5               0007CC          LCR   RY,RY\n         AH    R5,X'2'(,R10)       0007CE          AH    RY,BLDELEN\n*                                  ************************************\n         SPACE 1                                              09/84 DBC\nFIND#09L EQU   *-FIND#09V          VERIFY LENGTH              09/84 DBC\n         #TEST SIZE=(FIND#09L,GE,DFOUNDHL)                    09/84 DBC\n         SPACE 3                                              09/84 DBC\n************************************************************* 09/84 DBC\n*                                                           * 09/84 DBC\n*        IBM DATA FIELD DESCRIPTORS. MAPPED BY THE \"FIELDS\" * 09/84 DBC\n*        DSECT.                                             * 09/84 DBC\n*                                                           * 09/84 DBC\n************************************************************* 09/84 DBC\n         SPACE 1                                              09/84 DBC\nDOFF#09  DS    0H                                             09/84 DBC\n         SPACE 1                                              09/84 DBC\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\n*                                  000000 IGC018   CSECT ,\n*                                  000000          BALR  RBASE,0\n         DC    S(X'2'(R12))        000002          USING *,RBASE\n         SPACE 1                                              09/84 DBC\n         DC    S(0(R8))            000008 RPDS1    EQU   8\n         DC    S(0(R10))           00000A RLIST    EQU   10\n         DC    S(0(R11))           00000B RDCB     EQU   11\n         SPACE 1                                              09/84 DBC\n*                                  000000 WORKAREA DSECT ,\n         DC    S(0(R13))           000000 RDAREA   DS    CL256\n         DC    S(X'159'(R13))      000159 CONCAT#  DS    FL1\n         SPACE 1                                              09/84 DBC\n*                                 -000040 RBPRFX   DSECT ,\n*                                  000000 RBBASIC  DS    0F\n         DC    S(X'60'(R6))        000060 EXSKEY   DS    X\n         DC    S(X'61'(R6))        000061 EXSFLG   DS    B\n         DC    B'00100000'                EXSBLDL  EQU   B'00100000'\n*                                  ************************************\n         SPACE 1                                              09/84 DBC\n         #TEST SIZE=(*-DOFF#09,EQ,FIELDSLN)                   09/84 DBC\n         EJECT ,                                              DBC 01/85\n************************************************************* DBC 01/85\n*                                                           * DBC 01/85\n*        MODULE: IGC018                                     * DBC 01/85\n*        PRODUCT: DF/DS (5740-AM7)                          * DBC 01/85\n*        LEVEL: 8406                                        * DBC 01/85\n*        PTF: UZ70857                                       * DBC 01/85\n*                                                           * DBC 01/85\n*        THE FOLLOWING VECTOR POINTS TO VARIOUS DATA AREAS  * DBC 01/85\n*        USED TO BOTH IDENTIFY AND MATCH THIS PARTICULAR    * DBC 01/85\n*        VERSION OF IGC018. IT IS MAPPED BY THE \"VERSION\"   * DBC 01/85\n*        DSECT.                                             * DBC 01/85\n*                                                           * DBC 01/85\n************************************************************* DBC 01/85\n         SPACE 1                                              DBC 01/85\nVERSN#10 CSECT ,                                              DBC 01/85\n         DC    A(ID#10)            --> VERSION VERIFIER       DBC 01/85\n         DC    A(SRCH#10)          --> ORIGINAL \"SRCHPDS\" COD DBC 01/85\n         DC    A(DFND#10)          --> ORIGINAL \"DFOUND\" CODE DBC 01/85\n         DC    A(DOFF#10)          --> IBM DATA FIELDS DESCRIPTORS  DBC\n         SPACE 3                                              DBC 01/85\n************************************************************* DBC 01/85\n*                                                           * DBC 01/85\n*        MODULE IDENTIFIER CODE. MAPPED BY THE \"ORIGINAL\"   * DBC 01/85\n*        DSECT.                                             * DBC 01/85\n*                                                           * DBC 01/85\n************************************************************* DBC 01/85\n         SPACE 1                                              DBC 01/85\nID#10    DS    0H                                             DBC 01/85\n         DC    Y(X'6')             VERIFY LOCATION            DBC 01/85\n         DC    Y(ID#10VLN)         VERIFY LENGTH              DBC 01/85\n         SPACE 1                                              DBC 01/85\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nID#10V   DC    C'IGC018  '         000006          DC    C'IGC018  '\n         DC    C'@ZA74904'         00000E          DC    C'@ZA74904'\n*                                                  DC    C'&SYSDATE'\n         DC    C'03/27/84'         000016+         DC    C'03/27/84'\n         DC    C'5740-AM7'         00001E          DC    C'5740-AM7 ---\n*                                  ************************************\n         SPACE 1                                              DBC 01/85\nID#10VLN EQU   *-ID#10V            VERIFY LENGTH              DBC 01/85\n         SPACE 3                                              DBC 01/85\n************************************************************* DBC 01/85\n*                                                           * DBC 01/85\n*        \"SRCHPDS\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.    * DBC 01/85\n*                                                           * DBC 01/85\n************************************************************* DBC 01/85\n         SPACE 1                                              DBC 01/85\nSRCH#10  DS    0H                                             DBC 01/85\n         DC    Y(X'58C')           VERIFY LOCATION            DBC 01/85\n         DC    Y(SRCH#10L)         VERIFY LENGTH              DBC 01/85\n         SPACE 1                                              DBC 01/85\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nSRCH#10V DS    0H                  00058C SRCHPDS  EQU   *\n         BAL   R14,X'514'(,R12)    00058C          BAL   RSUBR,FIRSTMTY\n         SR    R0,R0               000590          SR    R0,R0DBC 01/85\n         IC    R0,X'159'(,R13)     000592 SRCHTTR  IC    R0,CONCAT#\n*                                        ******************************\n*                                        * NOTE, \"SRCHTTR\" IS NOT     *\n*                                        * REFERENCED IN IGC018, SO   *\n*                                        * NO PROBLEM EXISTS HERE.    *\n*                                        ******************************\n         TM    X'61'(R6),X'80'     000596          TM    EXSFLG,EXSSYDC\n*                                  ************************************\n         SPACE 1                                              DBC 01/85\nSRCH#10L EQU   *-SRCH#10V          VERIFY LENGTH              DBC 01/85\n         #TEST SIZE=(SRCH#10L,GE,SRCHPOHL)                    DBC 01/85\n         SPACE 3                                              DBC 01/85\n************************************************************* DBC 01/85\n*                                                           * DBC 01/85\n*        \"DFOUND\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.     * DBC 01/85\n*                                                           * DBC 01/85\n************************************************************* DBC 01/85\n         SPACE 1                                              DBC 01/85\nDFND#10  DS    0H                                             DBC 01/85\n         DC    Y(X'808')           VERIFY LOCATION            DBC 01/85\n         DC    Y(DFND#10L)         VERIFY LENGTH              DBC 01/85\n         SPACE 1                                              DBC 01/85\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nDFND#10V MVC   X'8'(3,R7),X'8'(R8) 000808 DFOUND   MVC   PDS2TTRP,PDS1T\n         IC    R4,X'B'(,R8)        00080E          IC    RX,PDS1INDC\n         NR    R4,R14              000812          NR    RX,RZDBC 01/85\n         LA    R5,X'E'             000814          LA    RY,PDS2USRD-PD\n         LCR   R5,R5               000818          LCR   RY,RYDBC 01/85\n         AH    R5,X'2'(,R10)       00081A          AH    RY,BLDELEN\n*                                  ************************************\n         SPACE 1                                              DBC 01/85\nDFND#10L EQU   *-DFND#10V          VERIFY LENGTH              DBC 01/85\n         #TEST SIZE=(DFND#10L,GE,DFOUNDHL)                    DBC 01/85\n         SPACE 3                                              DBC 01/85\n************************************************************* DBC 01/85\n*                                                           * DBC 01/85\n*        IBM DATA FIELD DESCRIPTORS. MAPPED BY THE \"FIELDS\" * DBC 01/85\n*        DSECT.                                             * DBC 01/85\n*                                                           * DBC 01/85\n************************************************************* DBC 01/85\n         SPACE 1                                              DBC 01/85\nDOFF#10  DS    0H                                             DBC 01/85\n         SPACE 1                                              DBC 01/85\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\n*                                  000000 IGC018   CSECT ,\n*                                  000000          BALR  RBASE,0\n         DC    S(X'2'(R12))        000002          USING *,RBASE\n         SPACE 1                                              DBC 01/85\n         DC    S(0(R8))            000008 RPDS1    EQU   8\n         DC    S(0(R10))           00000A RLIST    EQU   10\n         DC    S(0(R11))           00000B RDCB     EQU   11\n         SPACE 1                                              DBC 01/85\n*                                  000000 WORKAREA DSECT ,\n         DC    S(0(R13))           000000 RDAREA   DS    CL256DBC 01/85\n         DC    S(X'159'(R13))      000159 CONCAT#  DS    FL1\n         SPACE 1                                              DBC 01/85\n*                                 -000040 RBPRFX   DSECT ,\n*                                  000000 RBBASIC  DS    0F\n         DC    S(X'60'(R6))        000060 EXSKEY   DS    X\n         DC    S(X'61'(R6))        000061 EXSFLG   DS    B\n         DC    B'00100000'                EXSBLDL  EQU   B'00100000'\n*                                  ************************************\n         SPACE 1                                              DBC 01/85\n         #TEST SIZE=(*-DOFF#10,EQ,FIELDSLN)                   DBC 01/85\n         EJECT ,                                              DSAC12/85\n************************************************************* DSAC12/85\n*                                                           * DSAC12/85\n*        MODULE: IGC018                                     * DSAC12/85\n*        PRODUCT: DF/DS (5665-295)                          * DSAC12/85\n*        LEVEL: 8406                                        * DSAC12/85\n*        PTF: UZ70861 (VARIATION \"@H2A\")                    * DSAC12/85\n*        FMID: JDQ1110                                      * DSAC12/85\n*        THE FOLLOWING VECTOR POINTS TO VARIOUS DATA AREAS  * DSAC12/85\n*        USED TO BOTH IDENTIFY AND MATCH THIS PARTICULAR    * DSAC12/85\n*        VERSION OF IGC018. IT IS MAPPED BY THE \"VERSION\"   * DSAC12/85\n*        DSECT.                                             * DSAC12/85\n*                                                           * DSAC12/85\n************************************************************* DSAC12/85\n         SPACE 1                                              DSAC12/85\nVERSN#11 CSECT ,                                              DSAC12/85\n         DC    A(ID#11)       --> VERSION VERIFIER            DSAC12/85\n         DC    A(SRCH#11)     --> ORIGINAL \"SRCHPDS\" CODE     DSAC12/85\n         DC    A(DFND#11)     --> ORIGINAL \"DFOUND\" CODE      DSAC12/85\n         DC    A(DOFF#11)     --> IBM DATA FIELDS DESCRIPTORS DSAC12/85\n         SPACE 3                                              DSAC12/85\n************************************************************* DSAC12/85\n*                                                           * DSAC12/85\n*        MODULE IDENTIFIER CODE. MAPPED BY THE \"ORIGINAL\"   * DSAC12/85\n*        DSECT.                                             * DSAC12/85\n*                                                           * DSAC12/85\n************************************************************* DSAC12/85\n         SPACE 1                                              DSAC12/85\nID#11    DS    0H                                             DSAC12/85\n         DC    Y(X'6')             VERIFY LOCATION            DSAC12/85\n         DC    Y(ID#11VLN)         VERIFY LENGTH              DSAC12/85\n         SPACE 1                                              DSAC12/85\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nID#11V   DC    C'IGC018  '         000006          DC    C'IGC018  '\n         DC    C'ZA76850 '         00000E          DC    C'ZA76850 '\n*                                                  DC    C'&SYSDATE'\n         DC    C'03/28/84'         000016          DC    C'03/28/84'\n         DC    C'5665-295'         00001E          DC    C'5665-295'\n*                                  ************************************\n         SPACE 1                                              DSAC12/85\nID#11VLN EQU   *-ID#11V            VERIFY LENGTH              DSAC12/85\n         SPACE 3                                              DSAC12/85\n************************************************************* DSAC12/85\n*                                                           * DSAC12/85\n*        \"SRCHPDS\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.    * DSAC12/85\n*                                                           * DSAC12/85\n************************************************************* DSAC12/85\n         SPACE 1                                              DSAC12/85\nSRCH#11  DS    0H                                             DSAC12/85\n         DC    Y(X'52C')           VERIFY LOCATION            DSAC12/85\n         DC    Y(SRCH#11L)         VERIFY LENGTH              DSAC12/85\n         SPACE 1                                              DSAC12/85\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nSRCH#11V DS    0H                  00052C SRCHPDS  EQU   *\n         MVI   X'158'(R13),X'00'   00052C          MVI   ERCODE,0\n         LH    R2,X'0'(,R10)       000530          LH    RSULEFT,BLDENT\n         LA    R7,X'4'(,R10)       000534          LA    RPDS2,BLDENT\n         CLI   X'A'(R7),X'00'      000538          CLI   PDS2TTRP+2,0\n         BE    X'54C'(,R12)        00053C          BE    FILLENT\n*                                  ************************************\n         SPACE 1                                              DSAC12/85\nSRCH#11L EQU   *-SRCH#11V          VERIFY LENGTH              DSAC12/85\n         #TEST SIZE=(SRCH#11L,GE,SRCHPOHL)                    DSAC12/85\n         SPACE 3                                              DSAC12/85\n************************************************************* DSAC12/85\n*                                                           * DSAC12/85\n*        \"DFOUND\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.     * DSAC12/85\n*                                                           * DSAC12/85\n************************************************************* DSAC12/85\n         SPACE 1                                              DSAC12/85\nDFND#11  DS    0H                                             DSAC12/85\n         DC    Y(X'7AC')           VERIFY LOCATION            DSAC12/85\n         DC    Y(DFND#11L)         VERIFY LENGTH              DSAC12/85\n         SPACE 1                                              DSAC12/85\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nDFND#11V TM    X'61'(R6),X'20'     0007AC DFOUND   TM    EXSFLG,EXSBLDL\n         BNO   X'7BA'(,R12)        0007B0          BNO   FINDKEY\n         IC    R3,X'60'(,R6)       0007B4          IC    R3,EXSKEY\n         SPKA  0(R3)               0007B8          SPKA  0(R3)\n         MVC   X'8'(3,R7),X'8'(R8) 0007BC          MVC   PDS2TTRP,PDS1T\n*                                  ************************************\n         SPACE 1                                              DSAC12/85\nDFND#11L EQU   *-DFND#11V          VERIFY LENGTH              DSAC12/85\n         #TEST SIZE=(DFND#11L,GE,DFOUNDHL)                    DSAC12/85\n         SPACE 3                                              DSAC12/85\n************************************************************* DSAC12/85\n*                                                           * DSAC12/85\n*        IBM DATA FIELD DESCRIPTORS. MAPPED BY THE \"FIELDS\" * DSAC12/85\n*        DSECT.                                             * DSAC12/85\n*                                                           * DSAC12/85\n************************************************************* DSAC12/85\n         SPACE 1                                              DSAC12/85\nDOFF#11  DS    0H                                             DSAC12/85\n         SPACE 1                                              DSAC12/85\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\n*                                  000000 IGC018   CSECT ,\n*                                  000000          BALR  RBASE,0\n         DC    S(X'2'(R12))        000002          USING *,RBASE\n         SPACE 1\n         DC    S(0(R8))            000008 RPDS1    EQU   8\n         DC    S(0(R10))           00000A RLIST    EQU   10\n         DC    S(0(R11))           00000B RDCB     EQU   11\n         SPACE 1\n*                                  000000 WORKAREA DSECT ,\n         DC    S(0(R13))           000000 RDAREA   DS    CL256\n         DC    S(X'159'(R13))      000159 CONCAT#  DS    FL1\n         SPACE 1\n*                                  000040 RBPRFX   DSECT ,\n*                                  000000 RBBASIC  DS    0F\n         DC    S(X'60'(R6))        000060 EXSKEY   DS    X\n         DC    S(X'61'(R6))        000061 EXSFLG   DS    B\n         DC    B'00100000'                EXSBLDL  EQU   B'00100000'\n*                                  ************************************\n         SPACE 1                                              DSAC12/85\n         #TEST SIZE=(*-DOFF#11,EQ,FIELDSLN)                   DSAC12/85\n         EJECT ,\n************************************************************* DSAC02/86\n*                                                           * DSAC02/86\n*        MODULE: IGC018                                     * DSAC02/86\n*        PRODUCT: DF/DS (5665-295)                          * DSAC02/86\n*        LEVEL: 8406                                        * DSAC02/86\n*        PTF: UZ38298                                       * DSAC02/86\n*        FMID: JDQ1110                                      * DSAC02/86\n*        THE FOLLOWING VECTOR POINTS TO VARIOUS DATA AREAS  * DSAC02/86\n*        USED TO BOTH IDENTIFY AND MATCH THIS PARTICULAR    * DSAC02/86\n*        VERSION OF IGC018. IT IS MAPPED BY THE \"VERSION\"   * DSAC02/86\n*        DSECT.                                             * DSAC02/86\n*                                                           * DSAC02/86\n************************************************************* DSAC02/86\n         SPACE 1                                              DSAC02/86\nVERSN#12 CSECT ,                                              DSAC02/86\n         DC    A(ID#12)       --> VERSION VERIFIER            DSAC02/86\n         DC    A(SRCH#12)     --> ORIGINAL \"SRCHPDS\" CODE     DSAC02/86\n         DC    A(DFND#12)     --> ORIGINAL \"DFOUND\" CODE      DSAC02/86\n         DC    A(DOFF#12)     --> IBM DATA FIELDS DESCRIPTORS DSAC02/86\n         SPACE 3                                              DSAC02/86\n************************************************************* DSAC02/86\n*                                                           * DSAC02/86\n*        MODULE IDENTIFIER CODE. MAPPED BY THE \"ORIGINAL\"   * DSAC02/86\n*        DSECT.                                             * DSAC02/86\n*                                                           * DSAC02/86\n************************************************************* DSAC02/86\n         SPACE 1                                              DSAC02/86\nID#12    DS    0H                                             DSAC02/86\n         DC    Y(X'6')             VERIFY LOCATION            DSAC02/86\n         DC    Y(ID#12VLN)         VERIFY LENGTH              DSAC02/86\n         SPACE 1                                              DSAC02/86\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nID#12V   DC    C'IGC018  '         000006          DC    C'IGC018  '\n         DC    C'ZA83145 '         00000E          DC    C'ZA83145 '\n*                                                  DC    C'&SYSDATE'\n         DC    C'03/19/85'         000016          DC    C'03/19/85'\n         DC    C'5665-295'         00001E          DC    C'5665-295'\n*                                  ************************************\n         SPACE 1                                              DSAC02/86\nID#12VLN EQU   *-ID#12V            VERIFY LENGTH              DSAC02/86\n         SPACE 3                                              DSAC02/86\n************************************************************* DSAC02/86\n*                                                           * DSAC02/86\n*        \"SRCHPDS\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.    * DSAC02/86\n*                                                           * DSAC02/86\n************************************************************* DSAC02/86\n         SPACE 1                                              DSAC02/86\nSRCH#12  DS    0H                                             DSAC02/86\n         DC    Y(X'52C')           VERIFY LOCATION            DSAC02/86\n         DC    Y(SRCH#12L)         VERIFY LENGTH              DSAC02/86\n         SPACE 1                                              DSAC02/86\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nSRCH#12V DS    0H                  00052C SRCHPDS  EQU   *\n         MVI   X'160'(R13),X'00'   00052C          MVI   ERCODE,0\n         IC    R3,X'60'(,R6)       000530          IC    R3,EXSKEY\n         SPKA  0(R3)               000534          SPKA  0(R3)\n         LH    R2,X'0'(,R10)       000538          LH    RSULEFT,BLDENT\n         LA    R7,X'4'(,R10)       00053C          LA    RPDS2,BLDENT\n*                                  ************************************\n         SPACE 1                                              DSAC02/86\nSRCH#12L EQU   *-SRCH#12V          VERIFY LENGTH              DSAC02/86\n         #TEST SIZE=(SRCH#12L,GE,SRCHPOHL)                    DSAC02/86\n         SPACE 3                                              DSAC02/86\n************************************************************* DSAC02/86\n*                                                           * DSAC02/86\n*        \"DFOUND\" TRAP. MAPPED BY THE \"ORIGINAL\" DSECT.     * DSAC02/86\n*                                                           * DSAC02/86\n************************************************************* DSAC02/86\n         SPACE 1                                              DSAC02/86\nDFND#12  DS    0H                                             DSAC02/86\n         DC    Y(X'7D8')           VERIFY LOCATION            DSAC02/86\n         DC    Y(DFND#12L)         VERIFY LENGTH              DSAC02/86\n         SPACE 1                                              DSAC02/86\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\nDFND#12V IC    R4,X'B'(,R8)        0007D8 DFOUND   IC    RX,PDS1INDC\n         NR    R4,R14              0007DC          NR    RX,RZ\n         ICM   R5,7,X'8'(R8)       0007DE          ICM   RY,ADDR3,PDS1T\n         TM    X'61'(R6),X'20'     0007E2          TM    EXSFLG,EXSBLDL\n         BNO   X'7F0'(,R12)        0007E6          BNO   FINDKEY\n         IC    R3,X'60'(,R6)       0007EA          IC    R3,EXSKEY\n*                                  ************************************\n         SPACE 1                                              DSAC02/86\nDFND#12L EQU   *-DFND#12V          VERIFY LENGTH              DSAC02/86\n         #TEST SIZE=(DFND#12L,GE,DFOUNDHL)                    DSAC02/86\n         SPACE 3                                              DSAC02/86\n************************************************************* DSAC02/86\n*                                                           * DSAC02/86\n*        IBM DATA FIELD DESCRIPTORS. MAPPED BY THE \"FIELDS\" * DSAC02/86\n*        DSECT.                                             * DSAC02/86\n*                                                           * DSAC02/86\n************************************************************* DSAC02/86\n         SPACE 1                                              DSAC02/86\nDOFF#12  DS    0H                                             DSAC02/86\n         SPACE 1                                              DSAC02/86\n*                                  ************************************\n*                                  *          IGC018 CODE             *\n*                                  ************************************\n*                                  000000 IGC018   CSECT ,\n*                                  000000          BALR  RBASE,0\n         DC    S(X'2'(R12))        000002          USING *,RBASE\n         SPACE 1\n         DC    S(0(R8))            000008 RPDS1    EQU   8\n         DC    S(0(R10))           00000A RLIST    EQU   10\n         DC    S(0(R11))           00000B RDCB     EQU   11\n         SPACE 1\n*                                  000000 WORKAREA DSECT ,\n         DC    S(0(R13))           000000 RDAREA   DS    CL256\n         DC    S(X'161'(R13))      000161 CONCAT#  DS    FL1\n         SPACE 1\n*                                  000040 RBPRFX   DSECT ,\n*                                  000000 RBBASIC  DS    0F\n         DC    S(X'60'(R6))        000060 EXSKEY   DS    X\n         DC    S(X'61'(R6))        000061 EXSFLG   DS    B\n         DC    B'00100000'                EXSBLDL  EQU   B'00100000'\n*                                  ************************************\n         SPACE 1                                              DSAC02/86\n         #TEST SIZE=(*-DOFF#12,EQ,FIELDSLN)                   DSAC02/86\n         END   ,                                              DSAC12/85\n/*\n//*\n//IEWL EXEC PGM=IEWL,\n// PARM='LIST,NCAL,XREF,LET'\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1),DCB=BUFNO=1\n//USEROBJ  DD DISP=SHR,DSN=LOCL.USEROBJ\n//SYSLMOD  DD DISP=SHR,DSN=LOCL.LINKLIB\n//SYSLIN   DD *\n   INCLUDE USEROBJ(DYNABLDL)\n   ENTRY DYNABLDL\n NAME  DYNABLDL(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FCB": {"ttr": 3849, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO - FCB - GENERATE 3202/3211 FORMS CONTROL BLOCK IMAGE SAC\n&LABEL   FCB   &P=3211,&J=JES,&LPI=6,&LPP=66,&I=1,&CHAN=           DSAC\n.***************************************************************** DSAC\n         LCLA  &A(180),&LP,&N,&WK,&CC,&LAST,&K,&K1,&LI,&F1         DSAC\n         LCLB  &Q,&C,&PASS,&CCH(12),&P1,&P2,&F3                    DSAC\n         LCLC  &CH,&BLANK,&B,&B1,&PH1,&PH2                         DSAC\n.*                                                                 DSAC\n.***************** VERIFY DEVICE/SYS OPERANDS ******************** DSAC\n.*                                                                 DSAC\n         AIF   ('&J' NE 'JES' AND '&J' NE 'NJES').MACBAD0          DSAC\n         AIF   ('&P' NE '3203' AND '&P' NE '3211').MACBAD1         DSAC\n&P1      SETB  ('&P' EQ '3203')                                    DSAC\n&P2      SETB  ('&J' EQ 'NJES')                                    DSAC\n.*                                                                 DSAC\n.*                                    (DEFAULT)                    DSAC\n.*             &P1=1 3203            &P1=0 3211                    DSAC\n.*             &P2=1 NON-JES IMAGE   &P2=0 JES IMAGE               DSAC\n.*                                                                 DSAC\n.***************** VERIFY CHANNEL/LINE OPERANDS ****************** DSAC\n.*                                                                 DSAC\n.APN1    ANOP                                                      DSAC\n&LAST    SETA  N'&CHAN             GET NR OF OPERANDS             V03.1\n         AIF   (&LAST LT 1).MACBAD ERROR IF LT 1                   DSAC\n.*                                                                 DSAC\n.********************** VERIFY LINES-PER-INCH OPERAND ************ DSAC\n.*                                                                 DSAC\n.OP1     AIF   (T'&LPI NE 'N').OP1BAD                             V03.1\n         AIF   (&LPI NE 6 AND &LPI NE 8).OP1BAD                   V03.1\n&LI      SETA  &LPI                                                DSAC\n         AGO   .OP2                                                DSAC\n.*                                                                V03.1\n.********************* SET LINES PER PAGE ************************ DSAC\n.*                                                                 DSAC\n.OP2     AIF   (T'&LPP NE 'N').OP2BAD         OP2 MUST BE NUMERIC V03.1\n         AIF   (&LPP LT 2 OR &LPP GT 180).OP2BAD                  V03.1\n&LP      SETA  &LPP                SET NR OF LINES PER PAGE       V03.1\n.*                                                                V03.1\n.*********************** VERIFY INDEX FACTOR ********************* DSAC\n.*                                                                 DSAC\n.OP3    ANOP                                                       DSAC\n         AIF   (T'&I NE 'N').MACBAD3           FACTOR NOT NUMERIC  DSAC\n         AIF   (&I LT 0 OR &I GT 32).MACBAD                        DSAC\n&F1      SETA  &I+128                                              DSAC\n&F3      SETB  ('&P' EQ '3211')    INDEX BYTE IF 3211              DSAC\n.*                                                                 DSAC\n.******************** PROCESS CARRIAGE CHANNELS ****************** DSAC\n.*                                                                 DSAC\n&N       SETA  0                   SET OPERAND CTR TO 0            DSAC\n.OPN     ANOP                      START LOOP                     V03.1\n&N       SETA  &N+1                ADD 1 TO OPERAND CTR           V03.1\n         AIF   (&N GT &LAST).ENSCAN  B IF NO MORE OPERANDS         DSAC\n         AIF   (T'&CHAN(&N) NE 'N').OPH     B IF NOT NUMERIC OPD  V03.1\n         AIF   (&N EQ 4).OP3BAD                                    DSAC\n         AIF   (NOT &C).OPN        IGNORE OP IF INVALID &CC       V03.1\n&WK      SETA  &CHAN(&N)           SET WORK TO OPERAND VALUE      V03.1\n.OPN1    AIF   (&WK LT 1 OR &WK GT &LP).OPLBAD  B IF BAD LINE NR  V03.1\n         AIF   (&A(&WK) NE 0 AND &A(&WK) NE &CC).DUPBAD  B IF DUP V03.1\n&A(&WK)  SETA  &CC                 SET &WK-TH LINE TO &CC         V03.1\n         AGO   .OPN                LOOP                           V03.1\n.ENSCAN  ANOP                                                      DSAC\n         AIF   (&P2).ENDSCAN                                       DSAC\n         AIF   (&A(1) GT 1).OP5BAD                                 DSAC\n         AIF   (&A(1) EQ 1).ENDSCAN                                DSAC\n&A(1)    SETA  1                                                   DSAC\n         AGO   .ENDSCAN                                            DSAC\n.*                                                                V03.1\n.************* STEP 3A - DECODE HYPHENATED OPERAND ************** V03.1\n.*                                                                V03.1\n.OPH     ANOP                      NON-NUMERIC OPERAND            V03.1\n&K       SETA  K'&CHAN(&N)         SET OPERAND CHARACTER COUNT    V03.1\n&K1      SETA  0                   SET CHAR CT TO ZERO            V03.1\n&WK      SETA  0                   SET WORK TO ZERO               V03.1\n&PASS    SETB  0                   SHOW FIRST PASS                V03.1\n.**************************************************************** V03.1\n.*             1ST PASS - FIND CARRIAGE CHANNEL NUMBER            V03.1\n.*             2ND PASS - FIND FIRST LINE NUMBER                  V03.1\n.**************************************************************** V03.1\n.OPH1    ANOP                      START LOOP                     V03.1\n&K1      SETA  &K1+1               ADD 1 TO CHAR CTR              V03.1\n         AIF   (&K1 GT &K).OPH3    B IF END OF STRING             V03.1\n&CH      SETC  '&CHAN(&N)'(&K1,1)     GET A CHARACTER             V03.1\n         AIF   ('&CH' LT '0' OR '&CH' GT '9').OPH2  B IF NON-NUM  V03.1\n&WK      SETA  &WK*10+&CH          COMPILE DECIMAL NUMBER         V03.1\n         AGO   .OPH1               LOOP                           V03.1\n.**************************************************************** V03.1\n.*             NON-NUMERIC CHARACTER FOUND.                       V03.1\n.*             IF FIRST PASS, EXPECT HYPHEN.                      V03.1\n.*             IF SECOND PASS, ERROR.                             V03.1\n.**************************************************************** V03.1\n.OPH2    AIF   (&PASS OR '&CH' NE '-').HYPBAD  B IF ERROR         V03.1\n&CC      SETA  &WK                 SET CARRIAGE CHANNEL           V03.1\n&WK      SETA  0                   ZERO WORK                      V03.1\n&PASS    SETB  1                   SHOW SECOND PASS               V03.1\n         AGO   .OPH1               RETURN TO LOOP                 V03.1\n.**************************************************************** V03.1\n.*             END OF CHARACTER STRING.                           V03.1\n.*             IF FIRST PASS, LOGIC ERROR.                        V03.1\n.*             IF SECOND PASS, VALIDATE &CC.                      V03.1\n.**************************************************************** V03.1\n.OPH3    AIF   (NOT &PASS).LOGBAD  ERROR IF FIRST PASS            V03.1\n         AIF   (&CC LT 1 OR &CC GT 12).OPCBAD  B IF CC BAD        V03.1\n&CCH(&CC) SETB 1                   SHOW CARRIAGE CHANNEL USED     V03.1\n&C       SETB  1                   SHOW VALID &CC                 V03.1\n         AGO   .OPN1               GO CHECK VALID LINE NR         V03.1\n.*                                                                V03.1\n.************* OPERAND SCAN IS ENDED.  TEST ITS SUCCESS ********* V03.1\n.*                                                                V03.1\n.ENDSCAN ANOP                                                     V03.1\n         AIF   (&Q).QUITBAD        EXIT IF QUIT SWITCH            V03.1\n         AIF   (K'&LABEL EQ 0).LABBAD  B IF LABEL NOT SPECIFIED   V03.1\n         AIF   (K'&LABEL LT 5 OR K'&LABEL GT 8).LABBAD1            DSAC\n&CH      SETC  '&LABEL'(K'&LABEL,1)  GET LAST CHARACTER OF LABEL  V03.1\n         AIF   ('&LABEL'(1,4) EQ 'FCB2').END0                      DSAC\n         AIF   ('&LABEL'(1,4) EQ 'FCB1').END2                      DSAC\n         AGO   .LABBAD1                                            DSAC\n.END0    ANOP                                                      DSAC\n         AIF   (K'&LABEL NE 5).END2                                DSAC\n         AIF   ('&CH' EQ 'C').LABBAD4   FCB2C IS NOT VALID LABEL   DSAC\n         AIF   ('&CH' EQ 'U').LABBAD4   FCB2U IS NOT VALID LABEL   DSAC\n         AIF   ('&CH' EQ '6').LABBAD4   FCB26 IS NOT VALID LABEL   DSAC\n         AIF   ('&CH' EQ '8').LABBAD4   FCB28 IS NOT VALID LABEL   DSAC\n.END2    ANOP                                                     V03.1\n&N       SETA  K'&LABEL-4                                          DSAC\n&CH      SETC  '&LABEL'(5,&N)                                      DSAC\n.END4    ANOP                                                      DSAC\n.*                                                                V03.1\n.****** INSURE ALL CHANNELS ARE PUNCHED TO PREVENT RUNAWAY ****** V03.1\n.*                                                                V03.1\n&PASS    SETB  0                                                   DSAC\n&N       SETA  0                   ZERO CHANNEL COUNTER           V03.1\n&C       SETB  0                   ZERO FIRST-TIME MSG SWITCH     V03.1\n&K       SETA  0                   ZERO TOP-DOWN LINE COUNTER     V03.1\n&K1      SETA  &LP+1               SET BOTTOM-UP LINE CTR TO MAX+1V03.1\n.END11   ANOP                      START LOOP                     V03.1\n&N       SETA  &N+1                ADD ONE TO CHANNEL COUNTER     V03.1\n         AIF   (&N GT 12).END19    B IF DONE WITH ALL CHANNELS    V03.1\n         AIF   (&CCH(&N)).END11    B IF CHANNEL IS ASSIGNED       V03.1\n         AIF   (&C).END12          B IF NOT FIRST TIME            V03.1\n         SPACE 1                                                  V03.1\n         MNOTE *,'THE FOLLOWING ASSIGNMENTS OF UNSPECIFIED '      V03.1\n         MNOTE *,'CARRIAGE CHANNELS PREVENT RUN-AWAY FORMS ---'   V03.1\n&C       SETB  1                   SHOW FIRST-TIME MSG WRITTEN    V03.1\n.END12   AIF   (&P1 OR &PASS).END13 NO CHAN AT END-OF-SHEET FOR 3203\n         AIF   (&N EQ 9 OR &N EQ 12).END14  B IF CH 9 OR 12        DSAC\n.END13   ANOP                      UNASSIGNED CHANNEL FOUND       V03.1\n&K       SETA  &K+1                ADD ONE TO LINE COUNTER        V03.1\n         AIF   (&K GT &LP).END17   B IF ALL LINES HAVE CHANNELS   V03.1\n         AIF   (&A(&K) NE 0).END13 B IF THIS LINE HAS A CHANNEL   V03.1\n&WK      SETA  &K                  SET LINE NUMBER AND            V03.1\n         AGO   .END15              GO ASSIGN CHANNEL TO IT        V03.1\n.END14   ANOP                      UNASSIGNED CHANNEL 9 OR 12      DSAC\n&PASS    SETB  1                                                   DSAC\n&K1      SETA  &K1-1               LOWER LINE COUNTER BY ONE       DSAC\n         AIF   (&K1 LT 1).END17    B IF ALL LINES HAVE CHANNELS    DSAC\n         AIF   (&A(&K1) NE 0).END14  B IF THIS LINE HAS A CHANNEL  DSAC\n&WK      SETA  &K1                 SET LINE NUMBER                 DSAC\n.END15   ANOP                      ASSIGN CHANNEL TO LINE         V03.1\n&BLANK   SETC  ''                  ASSUME CHANNEL 10 OR GREATER   V03.1\n         AIF   (&N GT 9).END16     B IF SO                        V03.1\n&BLANK   SETC  ' '                 ADD A BLANK FOR CHAN 9 OR LESS V03.1\n.END16   MNOTE *,'   CARRIAGE CHANNEL &BLANK.&N IN LINE &WK'      V03.1\n&A(&WK)  SETA  &N                  ASSIGN CHANNEL TO LINE         V03.1\n&CCH(&N) SETB  1                   SHOW CHANNEL ASSIGNED          V03.1\n         AGO   .END11              B TO START OF LOOP             V03.1\n.END17   AIF   (&CCH(1)).END18     GO IF CHANNEL 1 IS ASSIGNED    V03.1\n         MNOTE 8,'ERROR - CARRIAGE CHANNEL 1 IS NOT SPECIFIED AND' 03.1\n         MNOTE *,'CANNOT BE INSERTED.  CHANNEL 1 PUNCH IS'        V03.1\n         MNOTE *,'REQUIRED FOR 3211 CARRIAGE-RESTORE FUNCTION.'   V03.1\n         AGO   .QUITBAD                                           V03.1\n.END18   MNOTE 0,'WARNING - UNSPECIFIED CARRIAGE CHANNELS'        V03.1\n         MNOTE 0,'STARTING WITH CHANNEL &N CAN CAUSE'             V03.1\n         MNOTE 0,'RUN-AWAY FORMS.'                                V03.1\n.END19   ANOP                                                     V03.1\n.*                                                                V03.1\n.************* CREATE FORMS CONTROL BUFFER OVERLAY ************** V03.1\n.*                                                                V03.1\n*******************************************************************DSAC\n*                                                                 *DSAC\n         MNOTE *,'&P FORMS CONTROL BUFFER LOAD FOR $T PRTN,C=&CH' *DSAC\n*                                                                 *DSAC\n*******************************************************************DSAC\n*                                                                *V03.1\n&LP      SETA  &LP+&F3     BUMP LENGTH WITH INDEX BYTE              FRB\n&CH      SETC  '&LABEL'(1,4).'&CH'    BUILD CSECT NAME             DSAC\n&CH      CSECT                GENERATE FORMS CONTROL BUFFER        DSAC\n         AIF   ('&CH'(5,4) EQ 'STD1' OR '&CH'(5,4) EQ 'STD2').AR   DSAC\n         DC    X'00'               NOT DEFAULT IMAGE               DSAC\n         AGO   .AS                                                 DSAC\n.AR      ANOP                                                      DSAC\n         DC    X'80'               DEFAULT IMAGE                   DSAC\n.AS      ANOP                                                      DSAC\n         DC    AL1(&LP)            IMAGE LENGTH                    DSAC\n&LP      SETA  &LP-&F3                                             DSAC\n         AIF   (&P1).DOX1    BRANCH IF 3203 ELSE PUT OUT           DSAC\n         DC    AL1(&F1)            3211 INDEX BYTE                  FRB\n.DOX1    ANOP                                                       FRB\n&PASS    SETB  (&LI EQ 8)          &PASS=1 FOR 8 LINES/INCH       V03.1\n&A(1)    SETA  &A(1)+16*&PASS      SET UP FIRST BYTE              V03.1\n         AIF   (NOT &P1).DOX3      NO CHAN AT END-OF-SHEET FOR 3203 SAC\n         AIF   (&A(&LP) GT 0).OP4BAD                               DSAC\n.DOX3    ANOP                                                      DSAC\n&A(&LP)  SETA  &A(&LP)+16          SET UP LAST BYTE               V03.1\n&N       SETA  0                   SET CUR BYTE PTR TO ZERO       V03.1\n&K       SETA  0                   SET PREV NON-0 BYTE PTR TO 0   V03.1\n         AIF   (&P2).DO                                            DSAC\n         MNOTE *,'    JES2 REQUIRES CHANNEL 1 IN LINE 1'           DSAC\n.DO      ANOP                      BUILD THE FCB                  V03.1\n&N       SETA  &N+1                POINT TO THE NEXT BYTE         V03.1\n         AIF   (&A(&N) EQ 0).DO    IF IT'S ZERO, LOOP.            V03.1\n&K       SETA  &N-&K-1             COMPUTE NR OF ZERO BYTES       V03.1\n         AIF   (&K EQ 0).DO1       SKIP DOING THEM IF NONE        V03.1\n         DC    &K.AL1(0)                                          V03.1\n.DO1     ANOP                                                     V03.1\n.*                                                                V03.1\n.************* SELECT PROPERLY-COMMENTED DC STATEMENT *********** V03.1\n.*                                                                V03.1\n&WK      SETA  &A(&N)              SET WORK TO BYTE'S VALUE       V03.1\n         AIF   (&WK EQ 16).DO3     B IF ZERO-DIGIT ENTRY          V03.1\n&B       SETC  ''                  SET TWO LCLC VARIABLES         V03.1\n&B1      SETC  ''                  TO NULL STRINGS                V03.1\n         AIF   (&WK GT 9).DO2      B IF ADCON IS TWO DIGITS       V03.1\n&B       SETC  ' '                 ELSE ADD BLANK TO COMMENT      V03.1\n.DO2     ANOP                                                     V03.1\n&WK      SETA  &WK-&WK/16*16       GET CHANNEL NUMBER             V03.1\n         AIF   (&WK GT 9).DO2A     B IF CHANNEL NR IS 2 DIGITS    V03.1\n&B1      SETC  ' '                 ELSE ADD BLANK TO COMMENT      V03.1\n.* ONE- OR TWO-DIGIT ENTRY                                        V03.1\n.DO2A    DC    AL1(&A(&N)),0C'      &B.CHAN &B1.&WK IS AT LINE &N' DSAC\n         AGO   .DO4                                               V03.1\n.* NO-DIGIT ENTRY                                                 V03.1\n.DO3     DC    AL1(&A(&N))                                        V03.1\n.DO4     AIF   (&N EQ &LP).END     B IF LAST BYTE PROCESSED       V03.1\n&K       SETA  &N                  SET K TO LAST NON-ZERO BYTE    V03.1\n         AGO   .DO                 GO LOOP                        V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.**************************************************************** V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.*             DIAGNOSTIC ERROR MESSAGES                          V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.**************************************************************** V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.OP1BAD  MNOTE 8,'ERROR - INVALID OPERAND - &LPI -'                DSAC\n         MNOTE *,'    OPERAND MUST BE EITHER 6 OR 8.'              DSAC\n&Q       SETB  1                                                  V03.1\n         AGO   .OP2                                               V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.OP2BAD  MNOTE 8,'ERROR - INVALID OPERAND - &LPP -'                DSAC\n         MNOTE *,'    LPP OPERAND MUST BE GREATER THAN 1'          DSAC\n         MNOTE *,'    AND NOT GREATER THAN 180.'                  V03.1\n&Q       SETB  1                                                  V03.1\n         AGO   .OP3                                               V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.OP3BAD  MNOTE 8,'ERROR - INVALID OPERAND - &CHAN(4) -'            DSAC\n         MNOTE *,'    CHAN OPERAND MUST HAVE A CARRIAGE CHANNEL'   DSAC\n         MNOTE *,'    NUMBER, A HYPHEN, AND A LINE NUMBER.'       V03.1\n&Q       SETB  1                                                  V03.1\n         AGO   .OPN                                               V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.OP4BAD  MNOTE 8,'ERROR - INVALID CHANNEL ASSIGNMENT -'            DSAC\n         MNOTE *,'    END-OF-SHEET CANNOT BE COMBINED'             DSAC\n         MNOTE *,'    WITH A CARRIAGE CHANNEL FOR A 3203.'         DSAC\n         AGO   .QUITBAD                                           V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.OP5BAD  MNOTE 8,'ERROR - JES2 REQUIRES CHANNEL 1'               DSAC\n         MNOTE *,'    TO BE ASSIGNED TO LINE 1.'                   DSAC\n         AGO   .QUITBAD                                            DSAC\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.OPLBAD  AIF   (T'&CHAN(&N) NE 'N').OPLBADA                       V03.1\n         MNOTE 8,'ERROR - INVALID OPERAND &N - &CHAN(&N) -'        DSAC\n         AGO   .OPLBADB                                           V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.OPLBADA MNOTE 8,'ERROR - INVALID SUBOPERAND &WK'                  DSAC\n         MNOTE *,'    OF OPERAND &N - &CHAN(&N)'                   DSAC\n.OPLBADB MNOTE *,'    LINE NUMBER MUST BE GREATER THAN 1 AND '    V03.1\n         MNOTE *,'    NOT GREATER THAN &LP..'                     V03.1\n&Q       SETB  1                                                  V03.1\n         AGO   .OPN                                               V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.DUPBAD  MNOTE 8,'ERROR - DUPLICATE SPECIFICATION - OPERAND'       DSAC\n         MNOTE *,'    &N ASSIGNS CARRIAGE CHANNEL &CC TO'          DSAC\n         MNOTE *,'    LINE &WK, WHICH WAS PREVIOUSLY'              DSAC\n         MNOTE *,'    ASSIGNED CHANNEL &A(&WK)..'                  DSAC\n&Q       SETB  1                                                  V03.1\n         AGO   .OPN                                               V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.HYPBAD  MNOTE 8,'ERROR - INVALID OPERAND &N - &CHAN(&N) -'        DSAC\n         AIF   (&PASS).HYPBADA                                    V03.1\n         MNOTE *,'    UNRECOGNIZABLE CHARACTER ''&CH'''           V03.1\n&Q       SETB  1                                                  V03.1\n         AGO   .OPN                                               V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.HYPBADA MNOTE 8,'ERROR - UNRECOGNIZABLE CHARACTER'                DSAC\n         MNOTE *,'    ''&CH'' IN LINE NUMBER.'                     DSAC\n.HYPBADB ANOP                                                     V03.1\n&Q       SETB  1                                                  V03.1\n         AGO   .OPN                                               V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.OPCBAD  MNOTE 8,'ERROR - INVALID OPERAND &N - &CHAN(&N) -'        DSAC\n         MNOTE *,'    CARRIAGE CHANNEL MUST BE GREATER THAN 0'    V03.1\n         MNOTE *,'    AND NOT GREATER THAN 12.'                   V03.1\n&C       SETB  0                   SHOW INVALID &CC               V03.1\n&Q       SETB  1                                                  V03.1\n         AGO   .OPN                                               V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.LOGBAD  MNOTE 8,'ERROR - INTERNAL LOGIC ERROR AT OPERAND &N'      DSAC\n         AGO   .QUITBAD                                           V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.MACBAD  MNOTE 8,'ERROR - AT LEAST ONE CARRIAGE CONTROL PUNCH'     DSAC\n         MNOTE *,'    MUST BE SPECIFIIED.'                         DSAC\n         AIF   (N'&CHAN EQ 2).OP1                                 V03.1\n         AGO   .QUITBAD                                           V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.MACBAD0 MNOTE 8,'ERROR - INCORRECT PARAMETER - '                  DSAC\n         MNOTE *,'    MUST BE ''JES'' OR ''NJES''.'                DSAC\n         AGO   .QUITBAD                                            DSAC\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.MACBAD1 MNOTE 8,'ERROR - INCORRECT PARAMETER - '                  DSAC\n         MNOTE *,'    MUST BE ''3203'' OR ''3211''.'               DSAC\n         AGO   .QUITBAD                                           V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.MACBAD3 MNOTE 8,'ERROR - NON-NUMERIC INDEX PARAMETER'             DSAC\n         AGO   .QUITBAD                                            DSAC\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.LABBAD  MNOTE 1,'WARNING - LABEL MISSING, DEFAULTS TO ''X''.'    V03.1\n&CH      SETC  'X'                                                V03.1\n         AGO   .END4                                              V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.LABBAD1 MNOTE 8,'ERROR - INVALID LABEL SPECIFIED'                 DSAC\n&LABEL   CSECT                                                     DSAC\n         AGO   .QUITBAD                                            DSAC\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.LABBAD2 MNOTE 8,'ERROR - LABEL CHARACTER IS NOT A LETTER OR A'   V03.1\n         MNOTE *,'    NUMBER.  HASP UCS/FCB LOOKUP'                DSAC\n         MNOTE *,'    ALGORITHIM REQUIRES THAT BITS 0, 1'          DSAC\n         MNOTE *,'    BE ON IN AN FCB LABEL CHARACTER.'            DSAC\n         AGO   .QUITBAD                                            DSAC\n.*                                                                V03.1\n.*                                                                V03.1\n.*                                                                V03.1\n.LABBAD4 MNOTE 8,'ERROR - LABEL VALUE &CH IS INVALID'              DSAC\n         AGO   .QUITBAD                                            DSAC\n.*                                                                 DSAC\n.*                                                                 DSAC\n.*                                                                 DSAC\n.QUITBAD MNOTE *,'    FCB IMAGE WILL NOT BE GENERATED.'            DSAC\n         MEXIT                                                     DSAC\n.*                                                                 DSAC\n.*                                                                 DSAC\n.*                                                                 DSAC\n.END     ANOP                                                     V03.1\n         AIF   (NOT &P1).ENDIT                                     DSAC\n         MNOTE *,'    3203 CANNOT COMBINE END-OF-SHEET'            DSAC\n         MNOTE *,'    WITH A CHANNEL PUNCH.'                       DSAC\n.ENDIT   ANOP                                                      DSAC\n         END\n         MEND                                                     V03.1\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FCBPROC": {"ttr": 4102, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//FCB      PROC MBR=\n//*********************************************************************\n//*                                                                   *\n//* PROC TO ASSEMBLE AND LINK AN FCB IMAGE INTO SYS1.IMAGELIB.        *\n//*                                                                   *\n//*********************************************************************\n//ASM      EXEC PGM=IEUASM,PARM='LINECOUNT(55)'\n//SYSPRINT DD SYSOUT=A\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//SYSUT1   DD UNIT=WORK,SPACE=(CYL,(2,1))\n//SYSUT2   DD UNIT=WORK,SPACE=(CYL,(2,1))\n//SYSUT3   DD UNIT=WORK,SPACE=(CYL,(2,1))\n//SYSPUNCH DD UNIT=WORK,DISP=(,PASS),DSN=&&OBJECT,\n//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200),SPACE=(3200,(20,10))\n//SYSIN    DD DISP=SHR,DSN=TA.FCB.IMAGELIB(&MBR)\n//LINK     EXEC PGM=IEWL,PARM='LIST,RENT,REFR,OL',COND=(4,LT,ASM)\n//SYSPRINT DD SYSOUT=A\n//SYSLIN   DD DISP=(OLD,DELETE),DSN=&&OBJECT\n//SYSUT1   DD UNIT=WORK,SPACE=(CYL,(2,1))\n//SYSLMOD  DD DISP=SHR,DSNAME=SYS1.IMAGELIB(&MBR)\n//         PEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FCBSCAN": {"ttr": 4104, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "FCBSCAN  CSECT\nR0       EQU   0               LINKAGE REGISTER\nR1       EQU   1               LINKAGE REGISTER\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12              STANDARD BASE REGISTER\nR13      EQU   13              SAVE AREA POINTER\nR14      EQU   14              RETURN REGISTER\nR15      EQU   15              LINKAGE REGISTER\n         USING FCBSCAN,R15     ENTRY ADDRESSABILITY\n         B     FCBSCAN0        BRANCH AROUND ID\n         DC    AL1(L'IDENT)    IDENTIFIER LENGTH\nIDENT    DC    C'FCBSCAN.&SYSDATE..&SYSTIME..&SYSPARM' IDENTIFIER\nFCBSCAN0 STM  R14,R12,12(R13) SAVE CALLERS REGS\n         DROP  R15             DROP ENTRY BASE REGISTER\n         LR    R12,R15         LOAD BASE REGISTER\n         USING FCBSCAN,R12     ESTABLISH ADDRESSABILITY\n         LA    R0,72           LOAD LENGTH FOR SAVE AREA\n         BAL   R1,*+4          INDICATE GETMAIN\n         SVC   10              ISSUE GETMAIN FOR MY SAVE AREA\n         ST    R13,4(R1)       STORE BACKWARD POINTER\n         ST    R1,8(R13)       STORE FORWARD POINTER\n         LR    R13,R1          POINT TO MY SAVE AREA\n         L     R1,4(R13)       RESTORE REG 1\n         L     R1,24(R1)       FOR PARAMETER LIST\n         EJECT\nPARMSAVE DS    0H\n         L     R1,0(R1)\n         ST    R1,PARM             SAVE PARM IF ANY\n         OPEN  (LIBRARY,,DIRECTRY,,SYSPRINT,(OUTPUT))\n         L     R1,PARM  RETRIEVE PARM POINTER\n         LH    R2,0(R1)  GET PARM LENGTH\n         LTR   R2,R2    AND TEST IT\n         BZ    ALLFCB   DEFAULT TO \"ALL\" IF NO PARM\n         CLC   2(3,R1),=C'ALL'      OR REQUEST IS\n         BE    ALLFCB             FOR ALL MEMBERS\n         CH    R2,=H'4'   ELSE CHECK PARM LENGTH\n         BH    PARMERR  CANNOT BE LONGER THAN FOUR CHARACTERS\n         B     ONEFCB              PROCESS IT\n         EJECT\nALLFCB   DS    0H\n         OPEN  (DIRECTRY,(INPUT))\n         OI    RELOOP+1,X'F0'\nALLFCB01 DS    0H\n         BAL   R10,DIRGET\n         MVC   FCBIMAGE,0(R3)\n         CLC   FCBIMAGE(4),=C'FCB2'\n         BNE   ALLFCB01\n         B     ONEFCB00\n         EJECT\nONEFCB   DS    0H\n         BCTR  R2,0  DECREMENT FOR EX INSTR\n         EX    R2,MVCPARM  AND MOVE IMAGE NAME\n         B     ONEFCB00\nMVCPARM  MVC   FCBIMAGE+4(0),2(R1)\nONEFCB00 DS    0H\n         MVC   HDR1+2(8),FCBIMAGE\n         LOAD  EPLOC=FCBIMAGE,DCB=LIBRARY\n         LTR   R15,R15  TEST RETURN\n         BNZ   FCBERR\n         LR    R3,R0     SAVE ENTRY POINT\n         LR    R5,R1  LENGTH\n         LA    R4,1      INCREMENT\n         BCTR  R5,0     DECREMENT FOR BXLE\n         LA    R5,0(R3,R5)   CALCULATE LENGTH\n         NI    FLAGS,JES\n*                                                    3203       3211\n         TM    0(R3),X'80'  DEFAULT FLAG           1ST BYTE   1ST BYTE\n         BZ    ONEFCB01\n         MVC   HDR1+11(4),=CL4' '\nONEFCB01 DS    0H\n         LA    R3,1(R3)   BUMP TO NEXT BYTE\n         IC    R6,0(R3)    IMAGE LENGTH            2ND BYTE   2ND BYTE\n         STC   R6,ILENGTH\n         LA    R3,1(R3)   BUMP TO NEXT BYTE\n         TM    0(R3),X'80' INDEX/CHAN 1            3RD BYTE   3RD BYTE\n         BZ    ONEFCB02\n         IC    R6,0(R3)\n         N     R6,MASK1\n         STC   R6,IINDEX\n         IC    R6,ILENGTH\n         BCTR  R6,0    DECREMENT FOR 3211\n         STC   R6,ILENGTH\n         MVC   DEVICE,=C'3211'\n         OI    FLAGS,D3211\n         LA    R3,1(R3)\n         B     ONEFCB03\nONEFCB02 DS    0H\n         MVC   DEVICE,=C'3203'\n         OI    FLAGS,D3203\nONEFCB03 DS    0H\n         XR    R6,R6\n         IC    R6,ILENGTH\n         CVD   R6,DBLEWORD\n         OI    DBLEWORD+7,X'0F'\n         MVC   HDR2+19(3),=X'212020'\n         ED    HDR2+19(3),DBLEWORD+6\n         TM    0(R3),X'10'                          3RD BYTE  4TH BYTE\n         BZ    ONEFCB04\n         MVI   HDR3+19,C'8'\n         B     ONEFCB05\nONEFCB04 DS    0H\n         MVI   HDR3+19,C'6'\nONEFCB05 DS    0H\n         CLC   DEVICE,=C'3203'\n         BE    ONEFCB08\n         XR    R6,R6\n         IC    R6,IINDEX\n         CVD   R6,DBLEWORD\n         OI    DBLEWORD+7,X'0F'\n         MVC   HDR4+9(3),=X'212020'\n         ED    HDR4+9(3),DBLEWORD+6\nONEFCB08 DS    0H\n         MVI   PRINTLIN,C' '\n         MVC   PRINTLIN+1(L'PRINTLIN-1),PRINTLIN\n         MVC   HDR1+37(4),DEVICE\n         MVC   PRINTLIN(L'HDR1),HDR1\n         PUT   SYSPRINT,PRINTLIN\n         MVI   PRINTLIN,C' '\n         MVC   PRINTLIN+1(L'PRINTLIN-1),PRINTLIN\n         MVC   PRINTLIN(L'HDR2),HDR2\n         PUT   SYSPRINT,PRINTLIN\n         MVI   PRINTLIN,C' '\n         MVC   PRINTLIN+1(L'PRINTLIN-1),PRINTLIN\n         MVC   PRINTLIN(L'HDR3),HDR3\n         PUT   SYSPRINT,PRINTLIN\n         MVI   PRINTLIN,C' '\n         MVC   PRINTLIN+1(L'PRINTLIN-1),PRINTLIN\n         CLC   DEVICE,=C'3203'\n         BE    ONEFCB09\n         MVC   PRINTLIN(L'HDR4),HDR4\n         PUT   SYSPRINT,PRINTLIN\n         MVI   PRINTLIN,C' '\n         MVC   PRINTLIN+1(L'PRINTLIN-1),PRINTLIN\nONEFCB09 DS    0H\n         MVC   PRINTLIN(L'HDR5),HDR5\n         PUT   SYSPRINT,PRINTLIN\n         MVI   PRINTLIN,C' '\n         MVC   PRINTLIN+1(L'PRINTLIN-1),PRINTLIN\n         MVC   PRINTLIN(L'HDR6),HDR6\n         PUT   SYSPRINT,PRINTLIN\n         LA    R7,1\n         XR    R6,R6    ZERO WORK REGISTER\n         IC    R6,ILENGTH  GET IMAGE LENGTH\n         BCTR  R6,0\n         LA    R5,0(R6,R3)   AND INDEX TO END\n         IC    R6,0(R3)   GET FIRST LINE BYTE\n         N     R6,MASK      AND STRIP FLAGS\n         CH    R6,=H'1'    IS IT CHANNEL ONE?\n         BNE   ONEFCB15      NO\n         OI    FLAGS,CH1LN1 ELSE SHOW SUITABLE FOR JES2\nONEFCB10 DS    0H\n         TM    0(R3),X'10'  LOOK FOR END-OF-SHEET FLAG\n         BZ    ONEFCB12\n         OI    FLAGS,EOSFLG   AND MARK IT IF FOUND\nONEFCB12 DS    0H\n         IC    R6,0(R3)   GET NEXT LINE BYTE\n         N     R6,MASK      AND STRIP FLAGS\nONEFCB15 DS    0H\n         LTR   R6,R6        IS THERE A CHANNEL\n         BNZ   ONEFCB20   IF YES - PROCESS IT\n         LA    R7,1(R7)       ELSE BUMP COUNTER\n         BXLE  R3,R4,ONEFCB10   AND GO FOR NEXT ONE\n         B     ONEFCB90     EXIT AT END\nONEFCB20 DS    0H\n         MVI   PRINTLIN,C' '\n         MVC   PRINTLIN+1(L'PRINTLIN-1),PRINTLIN\n         MVC   PRINTLIN+2(11),=X'2120204040404040212020'\nONEFCB21 DS    0H\n         N     R6,MASK\n         CVD   R6,DBLEWORD\n         OI    DBLEWORD+7,X'0F'\n         ED    PRINTLIN+2(3),DBLEWORD+6\n         CVD   R7,DBLEWORD\n         OI    DBLEWORD+7,X'0F'\n         ED    PRINTLIN+10(3),DBLEWORD+6\n         PUT   SYSPRINT,PRINTLIN\n         LA    R7,1(R7)\n         BXLE  R3,R4,ONEFCB10\nONEFCB90 DS    0H\n         BCTR  R3,0     BACK UP TO END OF IMAGE\n         TM    0(R3),X'0F'   DOES LAST LINE HAVE A CHANNEL?\n         BZ    ONEFCB92        NO - CHECK DEVICE TYPE\n         OI    FLAGS,EOSCHN      ELSE SHOW CHANNEL PRESENT\nONEFCB92 DS    0H\n         TM    FLAGS,D3203    IS THE DEVICE A 3203?\n         BZ    ONEFCB94         NO\n         TM    FLAGS,EOSFLG       ELSE IS THERE AN END-OF-SHEET?\n         BO    ONEFCB93        YES - IMAGE IS OK - CHECK FOR CHANNEL\n         MVI   PRINTLIN,C' '          ELSE PUT ERROR MESSAGE\n         MVC   PRINTLIN+1(L'PRINTLIN-1),PRINTLIN\n         MVC   PRINTLIN(L'MSG2),MSG2\n         PUT   SYSPRINT,PRINTLIN\n         MVI   PRINTLIN,C' '          ELSE PUT ERROR MESSAGE\n         MVC   PRINTLIN+1(L'PRINTLIN-1),PRINTLIN\n         MVC   PRINTLIN(L'MSG3A),MSG3A\n         PUT   SYSPRINT,PRINTLIN\nONEFCB93 DS    0H\n         TM    FLAGS,EOSCHN      IS THERE ALSO A CHANNEL?\n         BZ    ONEFCB94           NO - IMAGE IS OK\n         MVI   PRINTLIN,C' '       ELSE PUT AN ERROR MESSAGE\n         MVC   PRINTLIN+1(L'PRINTLIN-1),PRINTLIN\n         MVC   PRINTLIN(L'MSG2),MSG2\n         PUT   SYSPRINT,PRINTLIN\n         MVI   PRINTLIN,C' '\n         MVC   PRINTLIN+1(L'PRINTLIN-1),PRINTLIN\n         MVC   PRINTLIN(L'MSG3B),MSG3B\n         PUT   SYSPRINT,PRINTLIN\nONEFCB94 DS    0H\n         TM    FLAGS,CH1LN1\n         BO    RETURN\n         MVI   PRINTLIN,C' '\n         MVC   PRINTLIN+1(L'PRINTLIN-1),PRINTLIN\n         MVC   PRINTLIN(L'MSG1),MSG1\n         PUT   SYSPRINT,PRINTLIN\n         MVI   PRINTLIN,C' '\n         MVC   PRINTLIN+1(L'PRINTLIN-1),PRINTLIN\n         MVC   PRINTLIN(L'MSG1A),MSG1A\n         PUT   SYSPRINT,PRINTLIN\n         B     RETURN\n         EJECT\nDIRGET   DS    0H\n         XR    R4,R4\nDIRGET0  B     NOPREAD             FIRST TIME THRU\n         L     R3,R3SAVE\n         C     R3,USEBYTES         ANY REMAINING BYTES\n         BL    DIRGETA             YES - PROCESS\nNOPREAD  NI    DIRGET0+1,X'00'\n         GET   DIRECTRY,DIRBLOCK   ELSE GET ANOTHER BLOCK\n         LA    R3,DIRBLOCK         START OF BLOCK\n         LH    R4,0(R3)            NUMBER OF BYTES USED\n         LA    R4,0(R3,R4)         CALCULATE END OF BLOCK\n         ST    R4,USEBYTES         AND SAVE IT\n         LA    R3,2(R3)            PUSH R3 PAST BYTE COUNT\nDIRGETA  DS    0H\n         CLC   0(8,R3),=X'FFFFFFFFFFFFFFFF'\n         BE    EOFDIRCT\n         IC    R4,11(R3)           GET LENGTH OF ENTRY\n         SLL   R4,27               AND CONVERT TO\n         SRL   R4,26               A BYTE COUNT\n         LA    R4,12(R4,R3)        AND PUSH R4 PAST IT\n         ST    R4,R3SAVE           AND SAVE IT FOR NEXT TIME\n         BR    R10                 AND RETURN TO CALLER\nPRINTR   DS    0H\n         PUT   SYSPRINT,HDR1       ELSE REPEAT HEADER\n         MVI   PRINTLIN,C'-'       SET TO TRIPLE SPACE\nPRINTX   DS    0H\n         PUT   SYSPRINT,PRINTLIN\n         MVI   PRINTLIN,X'40'      BLANK FIRST CHARACTER\n         MVC   PRINTLIN+1(L'PRINTLIN-1),PRINTLIN AND PROPAGATE IT\n         BR    R10                 THEN RETURN TO CALLER\n         SPACE 2\n         EJECT\nEOFDIRCT DS    0H\n         MVI   PRINTLIN,X'40'      BLANK FIRST CHARACTER\n         MVC   PRINTLIN+1(L'PRINTLIN-1),PRINTLIN AND PROPAGATE IT\n         MVC   PRINTLIN(24),=C'- ALL FCB IMAGES PRINTED'\n         PUT   SYSPRINT,PRINTLIN\n         B     RETURN01\nFCBERR   DS    0H\n         MVC   PRINTLIN(27),=C'1 UNABLE TO ACCESS XXXXXXXX'\n         MVC   PRINTLIN+19(8),FCBIMAGE\n         PUT   SYSPRINT,PRINTLIN\n         B     RETURN\nPARMERR  DS    0H\n         MVC   PRINTLIN(25),=C'1 INVALID OR MISSING PARM'\n         PUT   SYSPRINT,PRINTLIN\nRETURN   DS    0H\nRELOOP   NOP   ALLFCB01\nRETURN01 DS    0H\n         CLOSE (SYSPRINT,,LIBRARY,,DIRECTRY)\n         LR    R1,R13          POINT TO MY SAVE AREA\n         L     R13,4(R13)      POINT TO CALLERS SAVE AREA\n         LA    R0,72           LOAD LENGTH\n         SVC   10              ISSUE FREEMAIN\n         LM    R14,R12,12(R13) RESTORE REGISTERS\n         MVI   12(R13),X'FF'   INDICATE RETURN\n         LA    R15,0           SET RETURN CODE\n         BR    R14             AND RETURN TO CALLER\n         EJECT\nDEVICE   DC    CL4' '\nIINDEX   DC    AL1(0)\nILENGTH  DC    AL1(0)\nPRINTLIN DS    0CL133\nCC       DC    X'40'\nMSGLINE  DC    CL132' '\nPARM     DC    F'0'\n         SPACE 2\nCONDCD   DC    F'0'\nR3SAVE   DC    F'0'\nUSEBYTES DC    F'0'\nDIRBLOCK DS    CL256\n         DS    0F\nHDR1     DC    C'1 MMMMMMMM NON-DEFAULT FCB IMAGE FOR DDDD'\nHDR2     DC    C'  LINES PER PAGE = XXX'\nHDR3     DC    C'  LINES PER INCH = X'\nHDR4     DC    C'  INDEX =XXX PRINT POSITIONS'\nHDR5     DC    C'  CHAN    LINE'\nHDR6     DC    C'+ ____    ____'\nHDR7     DC    C'  3203 END-OF-SHEET IN LAST LINE'\nCHLN     DC    C'   XX     XXX'\nMSG1     DC    C'- THIS IMAGE CANNOT BE USED UNDER JES2.'\nMSG1A    DC    C'  JES2 REQUIRES A CHANNEL 1 IN LINE 1.'\nMSG2     DC    C'- THIS IMAGE CANNOT BE USED WITH A 3203 DEVICE.'\nMSG3A    DC    C'  LAST LINE DOES NOT HAVE END-OF SHEET X''10''.'\nMSG3B    DC    C'  CHANNEL IN LAST LINE MAY CAUSE RUNAWAY FORMS.'\nDBLEWORD DC    D'0'\nFCBIMAGE DC    CL8'FCB2XXXX'\nMASK     DC    X'0000000F'\nMASK1    DC    X'0000003F'\nFCBEP    DC    A(0)\nFCBLN    DC    A(0)\nFCBEND   DC    A(0)\nWORK1    DC    XL3'000000'\nFLAGS    DC    AL1(0)\nJES      EQU   B'00000001'     INTENDED TO RUN UNDER JES2\nD3203    EQU   B'00000010'     A 3203 PRINTER\nD3211    EQU   B'00000100'     A 3211 PRINTER\nCH1LN1   EQU   B'00001000'     A CHANNEL 1 IN LINE 1\nEOSCHN   EQU   B'00010000'     ANY CHANNEL IN THE LAST LINE\nEOSFLG   EQU   B'00100000'     END-OF-SHEET IN LAST LINE\n         TITLE 'FCBSCAN - DCBS'\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=(PM),RECFM=FBA,DSORG=PS,          C\n               LRECL=133,BLKSIZE=133\n         EJECT\nLIBRARY  DCB   DDNAME=SYSLIB,MACRF=(R),DSORG=PO,RECFM=U\n         EJECT\nDIRECTRY DCB   DDNAME=SYSLIB,MACRF=(GM),RECFM=F,LRECL=256,BLKSIZE=256, C\n               DSORG=PS,EODAD=EOFDIRCT\n         TITLE 'FCBSCAN - LITERAL POOL'\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEAPPNIP": {"ttr": 4355, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         IEAPPNIP\n.*******************************************************************\n.*                                                                 *\n.*  POINTED TO BY NVT+170                                          *\n.*                                                                 *\n.*******************************************************************\nNIPPAREA DSECT\nNIPPAHDR DS    0D       NIPPAREA HEADER\nNIPPAQ   DS    F             CHAIN POINTER TO NEXT ON QUEUE\nNIPPABYT DS    F             NEXT AVAILABLE BYTE THIS BUFFER\nNIPPARC  DS    F        RETURN CODE FROM IEAPSPIO\nNIPPABDL DS    0CL18    BLDL WORKAREA\nNIPPABDH DS    XL4           BLDL HEADER\nNIPPANAM DS    CL8           MEMBER NAME\nNIPPATTR DS    XL3           MEMBER TTR\n         DS    XL3           RESERVED FOR BLDL\n         DS    XL2           UNASSIGNED\nNIPPAIOD DS    0CL216   I/O DATA AREA\nNIPPATXT DS    XL32          CCWS READ TEXT AREA\nNIPPASID DS    XL5           SEARCH-ID FOR NEXT TEXT RECORD\n         DS    XL3           UNASSIGNED\nNIPPAIOB DS    0XL40         IOB FOR SYS1.PARMLIB\nNIOBFLG1 DS    XL1                IOBFLAG1\nNIOBFLG2 DS    XL1                IOBFLAG2\nNIOBSNS0 DS    XL1                IOBSENS0\nNIOBSNS1 DS    XL1                IOBSENS1\n         DS    XL4\nNIOBFLG3 DS    XL1                IOBFLAG3\nNIOBCSW  DS    XL7                IOBCSW\n         DS    XL14\nNIOBERCT DS    XL2                IOBERRCT\nNIOBSEEK DS    0XL8               IOBSEEK\n         DS    XL3                     MBB\nNIOBCCHH DS    XL4                        CCHH\n         DS    XL1                            R\nNIPPADCB DS    XL4           DCB+44 FOR SYS1.PARMLIB\nNIPPAECB DS    0XL4          ECB FOR SYS1.PARMLIB\nNIPPAECC DS    XL1                ECB POST CODE\n         DS    XL3                EVENT ADDRESS\nNIPPADEB DS    XL48          DEB FOR SYS1.PARMLIB\nNIPPARCD DS    XL80          DATA AREA FOR SYS1.PARMLIB RECORDS\n         DS    XL4           UNASSIGNED\n         SPACE 3\n.*******************************************************************\n.*                                                                 *\n.*  PARMTAB EXTENSION                                              *\n.*                                                                 *\n.*******************************************************************\nNIPPAPTB DS    0CL392   NIP PARAMETER ADDRESS TABLE\n         DS    A,XL4        (DUMMY HEADER)\nPAAPF    DS    A,XL4         APF LIBRARIES\nPAAPG    DS    A,XL4         AUTO PRIORITY GROUP\nPABLDL   DS    A,XL4         BLDL= PARAMETER\nPABLDLF  DS    A,XL4         BLDLF= PARAMETER\nPACLPA   DS    A,XL4         CREATE LINK PACK AREA\nPACMD    DS    A,XL4         CMD= PARAMETER\nPACONT   DS    A,XL4         LINE CONTINUATION\nPACPQE   DS    A,XL4         CHANNEL PROGRAM QUEUE EXTENSION\nPACSA    DS    A,XL4         CSA SIZE\nPACVIO   DS    A,XL4         WARM START VIO\nPADUMP   DS    A,XL4         TAPE FOR SYS1.DUMP\nPAFIX    DS    A,XL4         ROUTINES IN FIXED LPA EXTENSION\nPAHRDCPY DS    A,XL4         HARDCOPY LOG\nPAIPS    DS    A,XL4         IPS= PARAMETER\nPALNK    DS    A,XL4         LNK= PARAMETER\nPALOGCLS DS    A,XL4         LOG CLASS VALUE\nPALOGLMT DS    A,XL4         LOG LIMIT VALUE\nPAMAXUSR DS    A,XL4         MAXIMUM NUMBER OF ASIDS\nPAMLPA   DS    A,XL4         ROUTINES IN LPA EXTENSION\nPANUCMAP DS    A,XL4         BUILD ANOTHER NUCMAP FOR DSS\nPAOPI    DS    A,XL4         OPERATOR INTERVENTION\nPAOPT    DS    A,XL4         OPT= PARAMETER\nPAPAGEP  DS    A,XL4         PAGE DATASETS\nPAPAGEO  DS    A,XL4         PAGE DATASET OPTIONS\nPAREAL   DS    A,XL4         V=R ADDRESS LIMIT\nPASMF    DS    A,XL4         SMF= PARAMETER\nPASQA    DS    A,XL4         SQA VIRTUAL SPACE\nPASYSP   DS    A,XL4         SYSTEM PARAMETER LIST\nPAVAL    DS    A,XL4         VOLUME ATTRIBUTE PROCESSING\nPAVRREGN DS    A,XL4         DEFAULT V=R SPACE ALLOCATED\nPAWTOBFR DS    A,XL4         NUMBER OF WTO BUFFERS\nPAWTOPLY DS    A,XL4         NUMBER OF WTOR REPLY BUFFERS\nPAPURGE  DS    A,XL4         PURGE KEYWORD\nNIPPAFLG DS    XL8           SUPPRESS MEMBER NOT FOUND MESSAGE\n* BYTE 1                          1... ....  MESSAGE SUPPRESSED\n*   \"                             0... ....  MESSAGE NOT SUPPRESSED\n*   \"                             .XXX XXXX  UNASSIGNED\n* BYTE 2                          XXXX XXXX  UNASSIGNED\n* BYTE 3                          XXXX XXXX  UNASSIGNED\n* BYTE 4                          XXXX XXXX  UNASSIGNED\n* BYTE 5                          XXXX XXXX  UNASSIGNED\n* BYTE 6                          XXXX XXXX  UNASSIGNED\n* BYTE 7                          XXXX XXXX  UNASSIGNED\n* BYTE 8                          XXXX XXXX  UNASSIGNED\n         SPACE\nPARSU    DS    A,XL4         RSU= PARAMETER\nPASWAP   DS    A,XL4         SWAP DATASETS\nPAPAGNUM DS    A,XL4         PAGE/SWAP ADDITIONS\nPADUPLEX DS    A,XL4         COMMON PAGE DUPLEXING OPTION\nPAALT    DS    A,XL4         ALTERNATE NUCLEUS IPL SUPPORT\nPAIOS    DS    A,XL4         IOS= PARAMETER\nPAICS    DS    A,XL4         ICS= PARAMETER\nPASSN    DS    A,XL4         SSN= PARAMETER\nPAGRS    DS    A,XL4         GRS SHARING OPTION\nPAGRSCNF DS    A,XL4         GRS CONFIGURATION\nPANONVIO DS    A,XL4         DIRECTED VIO\nPASYSNAM DS    A,XL4         SYSTEM NAME FROM IEASYS00\nPAMSTJCL DS    A,XL4         JCL TO START MASTER SCHEDULER ASID\n         DS    A,XL4        (DUMMY TRAILER)\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEAVNP99": {"ttr": 4358, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//NTS0991A JOB (0991,TSG),'* IEAVNP99 *',MSGCLASS=X,CLASS=A,\n//  NOTIFY=NTS0991,MSGLEVEL=(1,1)\n//IEFUTL1 EXEC PGM=IEV90,\n// PARM='XREF(SHORT),LIST,LINECOUNT(55),DECK,SYSPARM(85A)'\n//SYSPRINT DD SYSOUT=*\n//SYSPUNCH DD DISP=SHR,DSN=LOCL.USEROBJ(IEAVNP99)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.SMPMTS\n//         DD DISP=SHR,DSN=LOCL.USERSRC\n//         DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.AMODGEN,UNIT=3350,VOL=SER=DLB85A\n//         DD DISP=SHR,DSN=SYS1.AGENLIB,UNIT=3350,VOL=SER=DLB85A\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSUT2   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSUT3   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSIN    DD *\n         PRINT ON\n         TITLE 'IEAVNP99 - USER NIP EXIT'\nIEAVNP99 CSECT\nR0       EQU   0               LINKAGE REGISTER\nR1       EQU   1               LINKAGE REGISTER\nR2       EQU   2               NVT BASE\nR3       EQU   3               CVT AT ENTRY, ADJUSTED TO CVT PREFIX\nR4       EQU   4               CVTVERID BASE ADDRESSED AS CVTVER\nR5       EQU   5               NOT USED\nR6       EQU   6               NOT USED\nR7       EQU   7               NOT USED\nM7       EQU   7               ICM MASK\nR8       EQU   8               NOT USED\nR9       EQU   9               NOT USED\nR10      EQU   10              NOT USED\nR11      EQU   11              NOT USED\nR12      EQU   12              STANDARD BASE REGISTER\nR13      EQU   13              SAVE AREA POINTER\nR14      EQU   14              RETURN REGISTER\nR15      EQU   15              LINKAGE REGISTER/RETURN CODE\nM15      EQU   15              ICM MASK\n         EJECT\n***********************************************************************\n*/*                                                                   *\n*/* ROUTINE -                                                         *\n*/*     SYS1.NUCLEUS(IEAVNP99)                                        *\n*/*                                                                   *\n*/* FUNCTIONS -                                                       *\n*/*   1. THIS ROUTINE IS CALLED DURING NIP PROCESSING TO CREATE AND   *\n*/*      UPDATE THE CVTVERID FIELD OF THE CVT.                        *\n*/*      IEAVNP99 ISSUES A WTOR TO THE OPERATOR DURING NIP TO DETER-  *\n*/*      MINE IF THE IEECVXIT SHOULD BE TAKEN TO PROVIDE VARIOUS      *\n*/*      AUTOMATIC RESPONSES TO CONSOLE MESSAGES.                     *\n*/*                                                                   *\n*/*   2. THIS MODULE READS THE CHKPOINT MEMBER OF SYS1.PARMLIB AND    *\n*/*      UPDATES THE UCB OF A SPECIFIED VOLUME IN THAT LIST TO MARK   *\n*/*      IT AS NOT SHARED.                                            *\n*/*      IF THE VOLUME IS INDICATED AS NOT NATIVE TO THE SYSTEM, THE  *\n*/*      VOLUME IS ALSO TAKEN OFF-LINE.                               *\n*/*      VOLUMES WILL NOT BE ACCEPTED IF THEY:                        *\n*/*                                                                   *\n*/*         -  ARE THE SYSTEM RESIDENT VOLUME                         *\n*/*         -  CONTAIN THE SYSTEM MASTER CATALOG                      *\n*/*         -  CONTAIN ACTIVE PAGE/SWAP DATA SETS                     *\n*/*                                                                   *\n*/*      IF THE CHKPOINT MEMBER IS NOT FOUND, MESSAGE DLA0003I IS     *\n*/*      WRITTEN TO THE MASTER CONSOLE.                               *\n*/*                                                                   *\n*/* ADDITIONAL FUNCTIONS ARE PLANNED SUCH AS PICKING UP TASKS FROM    *\n*/*   UTA235 THAT CAN BE PERFORMED AT NIP TIME. THESE MIGHT INCLUDE   *\n*/*   SOME OF THE YES/NO INITIALIZATION FUNCTIONS.                    *\n*/*                                                                   *\n*/* CALLED BY -                                                       *\n*/*     IEAVNIPM VIA BALR.                                            *\n*/*                                                                   *\n*/* CALLS TO -                                                        *\n*/*     IEAVNPM2 VIA BALR FOR WTO/WTOR FUNCTIONS.                     *\n*/*                                                                   *\n*/* ATTRIBUTES -                                                      *\n*/*     SUPERVISOR MODE                                               *\n*/*     PSW KEY ZERO                                                  *\n*/*     UNLOCKED (THUS ENABLED)                                       *\n*/*     SINGLE THREADED                                               *\n*/*                                                                   *\n*/* INPUT -                                                           *\n*/*     STANDARD NIP INTERFACE:                                       *\n*/*     R2  - ADDRESS OF NVT                                          *\n*/*     R3  - ADDRESS OF CVT                                          *\n*/*     R13 - STD SAVEAREA                                            *\n*/*     R14 - RETURN ADDRESS                                          *\n*/*     R15 - ENTRY POINT ADDRESS                                     *\n*/*                                                                   *\n*/* MESSAGES ISSUED -                                                 *\n*/*     DLA0000I REPLY YES/NO TO ENABLE/DISABLE AUTOREPLY             *\n*/*     DLA0001I AUTOREPLIES ENABLED(DISABLED)                        *\n*/*     DLA0002I CVTVERID INITIALIZED - CBIPO XXX                     *\n*/*     DLA0003I CHKPOINT MEMBER NOT READ FROM SYS1.PARMLIB           *\n*/*     DLA0004E I/O ERROR READING SYS1.PARMLIB                       *\n*/*     DLA0005E CHKPOINT SYNTAX ERROR - EEEEEEEE - IGNORED           *\n*/*     DLA0006I CHKPOINT VOLUME VVVVVV INELIGIBLE AND WILL BE IGNORED*\n*/*     DLA0006I CHKPOINT VOLUME VVVVVV SPECIFIED BUT NOT FOUND       *\n*/*     DLA0006I CHKPOINT VOLUME VVVVVV PROCESSED FOR CHECKPOINT      *\n*/*     DLA0007E SIP TABLE NOT LOADED                                 *\n*/*                                                                   *\n*/* NOTES -                                                           *\n*/*     STANDARD NIP CALLING SEQUENCES FOR NIP SERVICES ARE           *\n*/*     OBSERVED.  NIP MACROS ARE NOT USED DUE TO THE GENERAL         *\n*/*     UNAVAILABILITY OF THESE MACROS. CHECK MICROFICHE DATA AREAS.  *\n*/*                                                                   *\n*/*     A ZAP TO IEAVNIPM (THE NIP RIM SCHEDULER) IS REQUIRED TO      *\n*/*     CAUSE THAT ROUTINE TO INVOKE THIS ROUTINE.  THE ORDER IN      *\n*/*     WHICH THIS ROUTINE IS INTENDED TO BE INVOKED IS TOWARD THE    *\n*/*     END OF RIM PROCESSING; THE EXACT SEQUENCE IS UNIMPORTANT.     *\n*/*                                                                   *\n*/*           ATTRIBUTES FOR IEAVNIPM RIM TABLE:                      *\n*/*                 ##@@ WHERE:  ## IS IEAVNP##                       *\n*/*                              @@ IS ATTRIBUTE BYTES                *\n*/*                 ATTRIBUTE BYTES ARE:                              *\n*/*                            F0F0 - A NO-OP, NO BLDL WILL BE DONE.  *\n*/*                            F0F1 - MODULE IS REQUIRED AND A WAIT   *\n*/*                                   STATE PSW WILL BE LOADED IF NOT *\n*/*                                   FOUND.                          *\n*/*                            F0F3 - MODULE IS OPTIONAL AND A MSG    *\n*/*                                   WILL BE ISSUED IF NOT FOUND.    *\n*/*                                                                   *\n*/*                 .... .... .... ...0 DONT LOOK FOR MODULE          *\n*/*                 .... .... .... ...1 LOOK FOR MODULE               *\n*/*                 .... .... .... ..0. MODULE IS REQUIRED            *\n*/*                 .... .... .... ..1. MODULE IS OPTIONAL            *\n*/*                                                                   *\n*/*               | NOTE THAT CONVENTION CALLS FOR:                 | *\n*/*               |                                                 | *\n*/*               |         1111 0000 1111 00.. (OR \"F0F.\")         | *\n*/*               |                                                 | *\n*/*               | BUT THE ACTUAL TEST IS A TEST-UNDER-MASK OF THE | *\n*/*               | TWO LOW ORDER BITS. SAFEST TO PLAY BY THE RULES.| *\n*/*                                                                   *\n*/*   EXAMPLE OF TABLE ENTRY:                                         *\n*/*                                                                   *\n*/*                F9F9F0F3 MEANS IEAVNP99 IS AN OPTIONAL MODULE      *\n*/*                               AND A MESSAGE WILL BE WRITTEN TO    *\n*/*                               THE CONSOLE IF THE MODULE IS NOT    *\n*/*                               FOUND.                              *\n*/*                F1F5F0F1 MEANS IEAVNP15 IA REQUIRED AND THE SYSTEM *\n*/*                               WILL BE PLACED IN A WAIT STATE IF   *\n*/*                               THE MODULE IS NOT FOUND.            *\n*/*                F8F9F0F0 MEANS IEAVNP89 DOES NOT HAVE TO EXIST     *\n*/*                               AND NO ATTEMPT WILL BE MADE TO      *\n*/*                               LOCATE IT.                          *\n*/*                                                                   *\n*/*   CHANGE LOG:                                                     *\n*/*                                                                   *\n*/*       01 NOV 85 - ORIGINAL VERSION FROM CBT MODS TAPE - CRUZAN.   *\n*/*       15 JAN 86 - MODIFIED TO READ SYS1.PARMLIB - CRUZAN.         *\n*/*       05 FEB 86 - CORRECTED PROBLEM IN UCB LOOKUP - CRUZAN.       *\n*/*       10 MAR 86 - MODIFIED TO ALLOW ALTERNATE COMMAND             *\n*/*                   TABLES - CRUZAN.                                *\n*/*                                                                   *\n***********************************************************************\n         EJECT\n         USING IEAVNP99,R15    ENTRY ADDRESSABILITY\n         B     START           BRANCH AROUND ID\n         DC    C'IEAVNP99.&SYSDATE..&SYSTIME' IDENTIFIER\nSTART    STM   R14,R12,12(R13) SAVE CALLERS REGS\n         DROP  R15             DROP ENTRY BASE REGISTER\n         LR    R12,R15         LOAD BASE REGISTER\n         USING IEAVNP99,R12    ESTABLISH ADDRESSABILITY\n         LA    R0,72           LOAD LENGTH FOR SAVE AREA\n         BAL   R1,*+4          INDICATE GETMAIN\n         SVC   10              ISSUE GETMAIN FOR MY SAVE AREA\n         ST    R13,4(R1)       STORE BACKWARD POINTER\n         ST    R1,8(R13)       STORE FORWARD POINTER\n         LR    R13,R1          POINT TO MY SAVE AREA\n         L     R1,4(R13)       RESTORE REG 1\n         L     R1,24(R1)       FOR PARAMETER LIST\n         XR    R15,R15         ZERO REG15 FOR RETURN CODE\n         SPACE\n*********************************************************************\n*                                                                   *\n*  SHOW NIP REGISTERS IN USE AND INITIALIZE CVTVERID                *\n*                                                                   *\n*********************************************************************\n         USING NVT,R2          ADDRESS THE NVT\n         S     R3,=A(CVTMAP-CVTFIX) BACK UP TO START OF PREFIX\n         USING CVTFIX,R3       ADDRESS THE CVT PREFIX\n         LA    R4,CVTVERID     GET THE USER RESERVED PART\n         USING CVTVER,R4       AND ADDRESS IT\n         XC    CVTVER(16),CVTVER   CLEAR IT\n         MVC   DSACRLSE,=C'&SYSPARM' MOVE IN USER SYSTEM RELEASE ID\n         OI    DSACFLG1,NP99AUTO  AUTOREPLY DEFAULT IS ON\n         EJECT\n*********************************************************************\n*                                                                   *\n*  AUTOREPLIES ENABLE/DISABLE SOLICITATION MESSAGE                  *\n*                                                                   *\n*********************************************************************\nWRITMSG0 DS    0H\n         MVI   MSGRPLY,C' '\n         MVC   MSGRPLY+1(L'MSGRPLY-1),MSGRPLY INIT TO BLANKS\n         XC    MSG0PLST+4(4),MSG0PLST+4 BE SURE ECB IS RESET\n*     IEAPMNIP TYPE=WTOR,PARAM=MSG0PLST\n         LA    R1,MSG0PLST     GET MESSAGE PLIST\n         L     R15,NVTWTOR     WTOR ENTRY POINT\n         BALR  R14,R15         AND CALL\n         CLC   =C'YES',MSG0RPLY IS REPLY YES?\n         BE    WRITMSG1        DEFAULT IS YES\n         CLC   =X'7D',MSG0RPLY IS REPLY {RETURN}?\n         BE    WRITMSG1        DEFAULT IS YES\n         CLC   =C'NO',MSG0RPLY IS IT NO?\n         BNE   WRITMSG0        DEFAULT IS YES\n         MVC   MSG1TEXT,=C'DISABLED' ELSE SAY NO\n         NI    DSACFLG1,255-NP99AUTO SHOW AUTOREPLIES DISABLED\n         B     WRITMSG1\n*********************************************************************\n*                                                                   *\n*  AUTOREPLIES ENABLE/DISENABLE STATUS MESSAGE                      *\n*                                                                   *\n*********************************************************************\nWRITMSG1 DS    0H\n*     IEAPMNIP TYPE=WTO,PARAM=MSG1STRT\n         LA    R1,MSG1STRT     GET MESSAGE\n         L     R15,NVTWTO      WTO ENTRY POINT\n         BALR  R14,R15         AND CALL\n         B     CVTINIT\n         EJECT\n*********************************************************************\n*                                                                   *\n*  CVTVERID INITIALIZED MESSAGE                                     *\n*                                                                   *\n*********************************************************************\nCVTINIT  DS    0H\n*     IEAPMNIP TYPE=WTO,PARAM=MSG2STRT\n         LA    R1,MSG2STRT     GET MESSAGE\n         L     R15,NVTWTO      WTO ENTRY POINT\n         BALR  R14,R15         AND CALL\n         B     PARMLIB READ\n         EJECT\n*********************************************************************\n*                                                                   *\n*  PARMLIB READ ROUTINE FOR CHKPOINT MEMBER                         *\n*                                                                   *\n*********************************************************************\nPARMLIB  DS    0H\nREADMBR  DS    0H\n         L     R1,NVTPARMA\n         MVC   16(8,R1),=C'CHKPOINT'\n       GETMAIN RC,LV=256\n         ST    R1,VOLTABL     SAVE TOP OF TABLE\n         ST    R1,CURPTR\n         XC    0(256,R1),0(R1) AND CLEAR IT\nREADLOOP DS    0H\n         LA    R15,NIPDPMLB   ENTRY TO READ ROUTINE\n*                             REG11 WILL BE DESTROYED\n         BALR  R14,R15        AND GO THERE\n         LTR   R15,R15\n         BNZ   READERR        DID SOMETHING GO WRONG?\n         LR    R7,R1          SHIFT POINTER TO R7\nCHKOWNR  DS    0H          IS THIS A NATIVE VOLUME?  \"C\" OR BLANK\n         CLI   6(R7),X'C3'    CHECK\n         BE    CHKCOMA            THE\n         CLI   6(R7),X'40'          SYNTAX\n         BNE   SYNTAXER       TRASH IT IF SEVEN IS NOT \"C\" OR BLANK\nCHKCOMA  DS    0H          IS THIS THE LAST ENTRY?  COMMA OR BLANK\n         CLI   7(R7),X'6B'    CHECK\n         BE    MOVEVOL            THE\n         CLI   7(R7),X'40'          SYNTAX\n         BNE   SYNTAXER       TRASH IT IF EIGHT IS NOT COMMA OR BLANK\nMOVEVOL  DS    0H\n         L     R5,CURPTR\n         MVC   0(7,R5),0(R7)  SAVE VOLSER AND FLAG\n         CLI   7(R7),X'40'    LAST ONE?\n         BE    ENDLOOP\n         LA    R5,7(R5)       BUMP CURRENT POINTER\n         ST    R5,CURPTR      AND SAVE IT\n         B     READLOOP       GET ANOTHER\nSYNTAXER DS    0H\n         MVC   BADVOL0,0(R7)  AND PUT IT IN MESSAGE\n*     IEAPMNIP TYPE=WTO,PARAM=MSG5STRT\n         LA    R1,MSG5STRT\n         L     R15,NVTWTO\n         BALR  R14,R15\n         CLI   7(R7),X'6B'    ANY MORE?\n         BE    READLOOP         CONTINUE ONLY IF EIGHT IS A COMMA\n         B     ENDLOOP          ELSE MAKE NO ASSUMPTIONS\nREADERR  DS    0H\n         B     *(R15)\n         B     ERR04           IF BAD RC FROM BLDL\n         B     ERR08           ANY OTHER READ ERROR\nERR04    DS    0H                       MEMBER NOT FOUND\n*     IEAPMNIP TYPE=WTO,PARAM=MSG3STRT\n         LA    R1,MSG3STRT\n         L     R15,NVTWTO\n         BALR  R14,R15\n         B     EXIT0           SET RETURN CODE = 0\nERR08    DS    0H                       READ I/O ERROR\n*     IEAPMNIP TYPE=WTO,PARAM=MSG4STRT\n         LA    R1,MSG4STRT\n         L     R15,NVTWTO\n         BALR  R14,R15\n         B     EXIT8           SET RETURN CODE = 8\n         EJECT\nENDLOOP  DS    0H\n*********************************************************************\n*                                                                   *\n*  THE UCB LIST IS SEARCHED FOR VOLUME LIST ENTRIES.                *\n*                                                                   *\n*********************************************************************\n         L     R7,CVTILK2     GET UCB LOOKUP TABLE\n         ST    R7,UCBPTR      AND SAVE IT\nUCBLOOP  DS    0H\n         L     R7,UCBPTR               GET CURRENT TABLE POINTER\n         LA    R8,2(,R7)               INCREMENT AND SAVE FOR\n         ST    R8,UCBPTR               THE NEXT TIME THROUGH\n         LH    R7,0(R7)                GET NEXT UCB POINTER\n         SLL   R7,16                   BE SURE TO SHIFT\n         SRL   R7,16                   OUT THE HIGH ORDER BITS\n         LTR   R7,R7                   IS IT ZERO?\n         BZ    UCBLOOP                 YES - TRY ANOTHER\n         C     R7,=F'65535'            IS IT THE END?\n         BE    UCBEND                  YES - EXIT\n         USING UCB,R7\n         TM    UCBTBYT3,UCB3DACC  IS IT DIRECT ACCESS DEVICE?\n         BNO   UCBLOOP                    NO -\n         TM    UCBTBYT2,UCBRVDEV  IS IT A REAL DEVICE?  0=REAL\n         BO    UCBLOOP                    NO -          1=VIRTUAL\n*\n         LA    R8,7           TABLE WIDTH\n         L     R9,CURPTR      LAST ENTRY\n         L     R10,VOLTABL    FIRST ENTRY\nSRCHLOOP DS    0H\n         TM    6(R10),X'F0'   HAVE WE SEEN IT BEFORE?\n         BO    SRCHLOP1       YES - SKIP IT\n         CLC   UCBVOLI,0(R10) ON THE LIST?\n         BE    VOLFOUND       YES\nSRCHLOP1 DS    0H\n         BXLE  R10,R8,SRCHLOOP ELSE GO BACK\n         B     UCBLOOP        UCB NOT FOUND ON LIST\nVOLFOUND DS    0H\n         TM    UCBSTAT,UCBSYSR\n         BO    NOTALLOW       NOT THE SYSTEM RESIDENT VOLUME\n         TM    UCBSTAB,UCBPGFL+UCBBNUL\n         BNZ   NOTALLOW       NOT A PAGE/SWAP OR THE MASTER CATALOG\nALLOW1   DS    0H\n*\n         NI    UCBTBYT2,255-UCBRR   TURN OFF SHARE BIT\n*\n         CLI   6(R10),X'C3'        IS THE VOLUME NATIVE?\n         BE    ALLOW2                  YES\n*\n         MVI   UCBJBNR,UCBDUC UNIT CHECK AT IPL\n         NI    UCBFL5,255-(UCBDCC+UCBENVRD)\n         NI    UCBSTAT,255-UCBONLI TAKE OFFLINE\n         MVI   UCBCHM1,UCBSPA+UCBPTH1 NO PATH\n         MVI   UCBFLC,UCBIVRR INTERVENTION REQUIRED\n         XC    UCBVTOC(10),UCBVTOC NO VTOC OR VOLSER\n*\nALLOW2   DS    0H\n         MVI   6(R10),X'FF'   MARK VOLUME AS ACCEPTED\n         B     SRCHLOP1          AND GET ANOTHER VOLUME\n*\nNOTALLOW DS    0H\n         MVI   6(R10),X'FE'   MARK VOLUME AS NOT ACCEPTED\n         B     SRCHLOP1          AND GET ANOTHER VOLUME\n         EJECT\n*********************************************************************\n*                                                                   *\n*  INELIGIBLE ENTRIES ARE LISTED AT THE CONSOLE.                    *\n*                                                                   *\n*********************************************************************\nUCBEND   DS    0H\n         LA    R8,7           TABLE WIDTH\n         L     R9,CURPTR      LAST ENTRY\n         L     R10,VOLTABL    FIRST ENTRY\nLISTLOOP DS    0H\n         CLI   6(R10),X'FE'   WAS VOLUME UNACCEPTABLE?\n         BE    BADFOUND       YES - PUT OUT A MESSAGE\n         CLI   6(R10),X'FF'   WAS VOLUME ACCEPTABLE?\n         BE    GOODFOND       YES - PUT OUT A MESSAGE\n*              IF A UCB WAS NOT FOUND FOR A\n*              SPECIFIED VOLUME FALL THRU\n*              AND TELL THE OPERATOR\n         MVC   MISSVOL,0(R10)    LIST MISSING VOLSER\n*     IEAPMNIP TYPE=WTO,PARAM=MSG7STRT\n         LA    R1,MSG7STRT\n         L     R15,NVTWTO\n         BALR  R14,R15\nLSTLOOP  DS    0H\n         BXLE  R10,R8,LISTLOOP ELSE GO BACK\n         B     LOOPEXIT       NOT HERE\nBADFOUND DS    0H\n         MVC   BADVOL1,0(R10)    LIST INELIGIBLE VOLSERS\n*     IEAPMNIP TYPE=WTO,PARAM=MSG6STRT\n         LA    R1,MSG6STRT\n         L     R15,NVTWTO\n         BALR  R14,R15\n         B     LSTLOOP\nGOODFOND DS    0H\n         MVC   GOODVOL,0(R10)    LIST ELIGIBLE VOLSERS\n*     IEAPMNIP TYPE=WTO,PARAM=MSG8STRT\n         LA    R1,MSG8STRT\n         L     R15,NVTWTO\n         BALR  R14,R15\n         B     LSTLOOP\n*\nLOOPEXIT DS    0H\n         B     EXIT0\n*\n         EJECT\n*********************************************************************\n*                                                                   *\n*  EXIT LINKAGE                                                     *\n*                                                                   *\n*********************************************************************\nEXIT12   LA    R5,12          SET RC=12\n         B     EXIT\nEXIT8    LA    R5,8           SET RC=8\n         B     EXIT\nEXIT4    LA    R5,4           SET RC=4\n         B     EXIT\nEXIT0    LA    R5,0           SET RC=0\n         B     EXIT\nEXIT     DS    0H\n         L     R1,VOLTABL      FREE THE WORK AREA\n         LTR   R1,R1           IF ONE WAS OBTAINED\n         BZ    EXITR\n      FREEMAIN R,LV=256,A=(1)\nEXITR    DS    0H\n         LR    R1,R13          POINT TO MY SAVE AREA\n         L     R13,4(R13)      POINT TO CALLERS SAVE AREA\n         ST    R5,16(R13)      INSTALL RETURN CODE IN SAVE AREA\n         LA    R0,72           LOAD LENGTH\n         SVC   10              ISSUE FREEMAIN\n         LM    R14,R12,12(R13) RESTORE REGISTERS\n         BR    R14             AND RETURN TO CALLER\n         TITLE 'IEAVNP99 - SYS1.PARMLIB READ ROUTINE'\n*********************************************************************\n*                                                                   *\n*  THIS MACRO PROVIDES STANDARDIZED ACCESS TO SYS1.PARMLIB          *\n*  DURING NIP PROCESSING. IT ESSENTIALLY DUPLICATES THE             *\n*  UNDISTRIBUTED IBM CODE BUT WITHOUT ERROR RECOVERY. PLEASE        *\n*  BE CAREFUL.                                                      *\n*                                                                   *\n*********************************************************************\n         SPACE\n      NIPDPMLB GENERATES INLINE CODE TO READ SYS1.PARMLIB.\n         TITLE 'IEAVNP99 - WTO MESSAGES'\n*********************************************************************\n*                                                                   *\n*  WTO/WTOR MESSAGES.                                               *\n*                                                                   *\n*********************************************************************\n         SPACE 3\n*MSG0PLST IEAPMNIP TYPE=PLIST,MSGST=MSG0STRT,RMSGL=3,RMSGST=MSGRPLY\nMSG0PLST DC    A(MSGRPLY)               REPLY AREA\n         DC    A(0)                     REPLY ECB\n         DC    AL2(L'MSG0RPLY)          REPLY AREA LENGTH\n         DC    AL1(0,0)                 NIP WTOR FLAGS\n         DC    A(MSG0STRT)              POINTER TO MESSAGE HEADER\n         SPACE 2\n*MSG0STRT IEAPMNIP TYPE=HEADER,MSGST=MSG0STRT,MSGEND=MSG000IE\nMSG0STRT DC    AL2(MSG000IE-MSG0STRT,0) MSG LENGTH/FLAGS\nMSG000IS DC    C'DLA0000I REPLY YES/NO TO '\n         DC    C'ENABLE/DISABLE AUTOREPLY'\nMSG000IE EQU   *\n         SPACE 2\nMSGRPLY  DC    CL80' '                  WTOR REPLY AREA\n         ORG   MSGRPLY\nMSG0RPLY DS    CL3                      REPLY AREA FOR MSG0\n         ORG\n         SPACE 3\n*MSG1STRT IEAPMNIP TYPE=HEADER,MSGST=MSG1STRT,MSGEND=MSG1END\nMSG1STRT DC    AL2(MSG1END-MSG1STRT,0)  MSG LENGTH/FLAGS\n         DC    C'DLA0001I AUTOREPLIES '\nMSG1TEXT DC    C'ENABLED '\nMSG1END  EQU   *\n         SPACE 3\n*MSG2STRT IEAPMNIP TYPE=HEADER,MSGST=MSG2STRT,MSGEND=MSG2END\nMSG2STRT DC    AL2(MSG2END-MSG2STRT,0)  MSG LENGTH/FLAGS\n         DC    C'DLA0002I CVTVERID INITIALIZED - CBIPO &SYSPARM'\nMSG2END  EQU   *\n         SPACE 3\n*MSG3STRT IEAPMNIP TYPE=HEADER,MSGST=MSG3STRT,MSGEND=MSG3END\nMSG3STRT DC    AL2(MSG3END-MSG3STRT,0)  MSG LENGTH/FLAGS\n         DC    C'DLA0003I CHKPOINT MEMBER '\n         DC    C'NOT READ FROM SYS1.PARMLIB'\nMSG3END  EQU   *\n         SPACE 3\n*MSG4STRT IEAPMNIP TYPE=HEADER,MSGST=MSG4STRT,MSGEND=MSG4END\nMSG4STRT DC    AL2(MSG4END-MSG4STRT,0)  MSG LENGTH/FLAGS\n         DC    C'DLA0004E I/O ERROR READING SYS1.PARMLIB'\nMSG4END  EQU   *\n         SPACE 3\n*MSG5STRT IEAPMNIP TYPE=HEADER,MSGST=MSG5STRT,MSGEND=MSG5END\nMSG5STRT DC    AL2(MSG5END-MSG5STRT,0)  MSG LENGTH/FLAGS\n         DC    C'DLA0005E CHKPOINT SYNTAX ERROR - '\nBADVOL0  DC    CL8' '\n         DC    C' - IGNORED'\nMSG5END  EQU   *\n         SPACE 3\n*MSG6STRT IEAPMNIP TYPE=HEADER,MSGST=MSG6STRT,MSGEND=MSG6END\nMSG6STRT DC    AL2(MSG6END-MSG6STRT,0)  MSG LENGTH/FLAGS\n         DC    C'DLA0006I CHKPOINT VOLUME '\nBADVOL1  DC    CL6' '\n         DC    C' INELIGIBLE AND WILL BE IGNORED'\nMSG6END  EQU   *\n         SPACE 3\n*MSG7STRT IEAPMNIP TYPE=HEADER,MSGST=MSG7STRT,MSGEND=MSG7END\nMSG7STRT DC    AL2(MSG7END-MSG7STRT,0)  MSG LENGTH/FLAGS\n         DC    C'DLA0006I CHKPOINT VOLUME '\nMISSVOL  DC    CL6' '\n         DC    C' SPECIFIED BUT NOT FOUND'\nMSG7END  EQU   *\n         SPACE 3\n*MSG8STRT IEAPMNIP TYPE=HEADER,MSGST=MSG8STRT,MSGEND=MSG8END\nMSG8STRT DC    AL2(MSG8END-MSG8STRT,0)  MSG LENGTH/FLAGS\n         DC    C'DLA0006I CHKPOINT VOLUME '\nGOODVOL  DC    CL6' '\n         DC    C' PROCESSED FOR CHECKPOINT'\nMSG8END  EQU   *\n         SPACE 3\n*MSG9STRT IEAPMNIP TYPE=HEADER,MSGST=MSG9STRT,MSGEND=MSG9END\nMSG9STRT DC    AL2(MSG9END-MSG9STRT,0)  MSG LENGTH/FLAGS\n         DC    C'DLA0007E SIP TABLE NOT LOADED'\nMSG9END  EQU   *\n         TITLE 'IEAVNP99 - CONSTANTS AND WORK AREAS'\nVOLTABL  DC    A(0)  CHECKPOINT VOLUME TABLE\nCURPTR   DC    A(0)  CURRENT VOLTABL ENTRY\nUCBPTR   DC    A(0)  CURRENT UCB ADDRESS\n         LTORG\n         TITLE 'IEAVNP99 - USER CVTVER MAPPING'\n         DSACCVTV\n         TITLE 'IEAVNP99 - NIP VECTOR TABLE MAPPING'\n         IHANVT\n         TITLE 'IEAVNP99 - SYS1.PARMLIB PARAMETER LIST'\n         IEAPPNIP\n         TITLE 'IEAVNP99 - CDE DSECT'\n         IHACDE\n         TITLE 'IEAVNP99 - CVT INCLUDING THE PREFIX'\n         CVT   DSECT=YES,PREFIX=YES,LIST=YES\n         TITLE 'IEAVNP99 - UCB DSECT'\nUCB      DSECT\n         IEFUCBOB\n         END\n/*\n//*\n//IEWL EXEC PGM=IEWL,\n// PARM='LIST,NCAL,XREF,LET,REUS'\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1),DCB=BUFNO=1\n//USEROBJ  DD DISP=SHR,DSN=LOCL.USEROBJ\n//SYSLMOD  DD DISP=SHR,DSN=SYS1.NUCLEUS,UNIT=3330-1,VOL=SER=RES1N4\n//SYSLIN   DD *\n   INCLUDE USEROBJ(IEAVNP99)\n   ENTRY IEAVNP99\n NAME  IEAVNP99(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEECVENT": {"ttr": 4612, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n      IEECVENT &MSG=,&ACT=NULL,&DO=\n.*********************************************************************\n.*    THIS MACRO BUILDS THE IEECVXIT DRIVER TABLE.                   *\n.*    THE ENTRIES ARE MAPPED BY IEECVUSR.                            *\n.*                                                                   *\n.*        MSG=  REQUIRED, GENERIC TEXT OF MSG REQUIRING AUTOREPLY.   *\n.*        ACT=  OPTIONAL, NULL    : DUMMY ENTRY.                     *\n.*                      , SUPPRESS: SUPPRESS THIS MESSAGE ENTRY      *\n.*                      , ROLL    : SWITCH TO ROLL                   *\n.*                      , NOROLL  : SWITCH TO NOROLL                 *\n.*                      , NOROLLD : SWITCH TO NOROLL WITH DELETE     *\n.*                      , REPLY   : REPLY TO THIS MESSAGE            *\n.*                      , ACTION  : TAKE SOME ACTION                 *\n.*                      , END     : TERMINAL ENTRY                   *\n.*        DO=   OPTIONAL, FULL TEXT OF MESSAGE TO ISSUE              *\n.* DO= REQUIRED IF ACT=REPLY OR ACTION.                              *\n.* DO= MUST BE NULL IF ACT=NULL, SUPPRESS ROLL, NOROLL OR NOROLLD.   *\n.*                                                                   *\n.* CHANGE LOG:                                                       *\n.*        13 JAN 86 - FIRST WRITTEN - M CRUZAN                       *\n.*                                                                   *\n.*********************************************************************\n         GBLB  &IND\n         LCLA  &L1,&L2,&FLAGS,&L3\n         LCLB  &DO1\n         LCLC  &C1,&C2,&C3,&C4,&C5\n.*\n         AIF   (&IND).ERROR4   PREMATURE END DETECTED\n.*\n         AIF   ('&ACT' EQ 'END').AS1    NOT REQUIRED IF LAST ONE\n.*\n         AIF   ('&MSG' EQ '').ERROR1       /* REQUIRED PARAMETER\n&C1      SETC  '&MSG'             SET SUBJECT MESSAGE\n&L3      SETA  (K'&C1-2)             AND LENGTH LESS QUOTES\n&C3      SETC  ' *** AUTOREPLY ***'''\n&C4      SETC  ''''.'R XX,'\n         AIF   ('&ACT' EQ 'NULL').NUL      /* A DUMMY ENTRY\n         AIF   ('&ACT' EQ 'SUPPRESS').SUP  /* SUPPRESS THIS MESSAGE\n         AIF   ('&ACT' EQ 'REPLY').REP     /* REPLY TO THIS MESSAGE\n         AIF   ('&ACT' EQ 'ROLL').ROL      /* SWITCH ROLL/NO-ROLL\n         AIF   ('&ACT' EQ 'NOROLLD').NROLD /* SWITCH ROLL/NO-ROLL\n         AIF   ('&ACT' EQ 'NOROLL').NROL   /* SWITCH ROLL/NO-ROLL\n         AIF   ('&ACT' EQ 'ACTION').ACT    /* START SOMETHING ELSE\n.*\n.NUL     ANOP\n&FLAGS   SETA  0               FLAG FOR NULL\n         AIF   ('&DO' NE '').ERROR2  NO TEXT THIS FUNCTION\n         AGO   .PUTIT\n.*\n.SUP     ANOP\n&FLAGS   SETA  64              FLAG FOR SUPPRESS\n         AIF   ('&DO' NE '').ERROR2  NO TEXT THIS FUNCTION\n         AGO   .PUTIT\n.*\n.REP     ANOP\n&FLAGS   SETA  16              FLAG FOR REPLY\n         AIF   ('&DO' EQ '').ERROR3  TEXT TO REPLY WITH IS REQUIRED\n&DO1     SETB  1               SHOW ADDITIONAL TEXT\n         AGO   .PUTIT\n.*\n.ROL     ANOP\n&FLAGS   SETA  32              FLAG FOR ROLL SWITCH\n         AIF   ('&DO' NE '').ERROR2  NO TEXT THIS FUNCTION\n         AGO   .PUTIT\n.*\n.NROL    ANOP\n&FLAGS   SETA  8               FLAG FOR NON-ROLL SWITCH\n         AIF   ('&DO' NE '').ERROR2  NO TEXT THIS FUNCTION\n         AGO   .PUTIT\n.*\n.NROLD   ANOP\n&FLAGS   SETA  4               FLAG FOR NON-ROLL DELETE SWITCH\n         AIF   ('&DO' NE '').ERROR2  NO TEXT THIS FUNCTION\n         AGO   .PUTIT\n.*\n.ACT     ANOP\n&FLAGS   SETA  128             FLAG FOR ACTION INITIATE\n         AIF   ('&DO' EQ '').ERROR3  TEXT IS REQUIRED\n&DO1     SETB  1\n         AGO   .PUTIT\n.*\n.PUTIT   ANOP\n         AIF   (NOT &DO1).NOD   WHEN TEXT IS NOT REQUIRED\n&C2      SETC  '&DO'(1,K'&DO-1) ELSE CALCULATE\n&L2      SETA  (K'&C2+K'&C3-2)       THE TEXT LENGTH\n&C2      SETC  '&C2.&C3'                 AND CONCAT AUTOREPLY MSG\n         AIF   ('&ACT' NE 'REPLY').NOD\n&C2      SETC  '&C2'(2,K'&C2-1)\n&C2      SETC  '&C4.&C2'\n&L2      SETA  &L2+5           INCREMENT FOR MSG NUMBER\n.NOD     ANOP\n&L1      SETA  (4+&L2+&L3)          CALCULATE ENTRY LENGTH\n         DC    AL1(&L1)             ENTRY LENGTH\n         DC    AL1(&FLAGS)          ENTRY FLAGS\n         DC    AL1(&L3)             SUBJECT MSG LENGTH\n         DC    AL1(&L2)             TEXT MSG LENGTH\n         DC    CL&L3&MSG\n         AIF   (NOT &DO1).NODO   WHEN TEXT IS NOT REQUIRED\n         DC    CL&L2&C2\n         AIF   ('&ACT' NE 'REPLY').NODO\n.NODO    ANOP\n         AGO   .END1       EXIT\n.*\n.AS1     ANOP\n         AIF   (&IND).ERROR4\n&IND     SETB  1\n         DC    AL1(0,0,0,0)  LAST ENTRY INDICATOR\n         AGO   .END1\n.*\n.ERROR1  ANOP\n         MNOTE 8,'MISSING REQUIRED PARAMETER - MSG='\n         MEXIT\n.*\n.ERROR2  ANOP\n         MNOTE 8,'ILLEGAL PARAMETER - DO='\n         MEXIT\n.*\n.ERROR3  ANOP\n         MNOTE 8,'MISSING REQUIRED PARAMETER - DO='\n         MEXIT\n.*\n.ERROR4  ANOP\n         MNOTE 8,'ADDITIONAL ENTRIES AFTER END DETECTED'\n         MEXIT\n.*\n.END1    ANOP\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEECVUSR": {"ttr": 4615, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         IEECVUSR\n.*********************************************************************\n.*                                                                   *\n.*  THIS IS THE MAPPING MACRO FOR DLACMD00.                          *\n.*  SEE ALSO IEECVENT                                                *\n.*                                                                   *\n.*  CHANGE LOG:                                                      *\n.*       13 JAN 86 - FIRST WRITTEN - M. CRUZAN                       *\n.*                                                                   *\n.*********************************************************************\nIEECVUSR DSECT\nIEECVHDR DS    0XL4          HEADER DESCRIPTOR\nIEECVLNG DS    XL1           ENTRY LENGTH INCLUDING IEECVLNG\n         SPACE\nIEECVFLG DS    XL1           ACTION DETERMINATION FLAGS\nIEECVNUL EQU   X'00'              DUMMY ENTRY\nIEECVACT EQU   X'80'              INITIATE SOME ACTION\nIEECVSUP EQU   X'40'              SUPPRESS THE MESSAGE\nIEECVROL EQU   X'20'              SET TO ROLL MODE\nIEECVRPL EQU   X'10'              REPLY TO A MESSAGE\nIEECVNRL EQU   X'08'              SET TO NOROLL MODE\nIEECVNRD EQU   X'04'              SET TO NOROLL WITH DELETE\nIEECV02  EQU   X'02'              RESERVED\nIEECV01  EQU   X'01'              RESERVED\n         SPACE\nIEECVSNG DS    XL1           SUBJECT MESSAGE LENGTH\nIEECVANG DS    XL1           ACTION TEXT LENGTH\n         SPACE\nIEECVTXT DS    C             START OF VARIABLE TEXT FIELDS\n         EJECT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEECVXIT": {"ttr": 4617, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//NTS0991A JOB (0991,TSG),'* IEECVXIT *',MSGCLASS=X,\n//  NOTIFY=NTS0991,MSGLEVEL=(1,1),CLASS=6\n//IEFUTL1 EXEC PGM=IEV90,\n// PARM='XREF(SHORT),LIST,LINECOUNT(55)),DECK,RENT'\n//SYSPRINT DD SYSOUT=*\n//SYSPUNCH DD DISP=SHR,DSN=LOCL.USEROBJ(IEECVXIT)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.SMPMTS\n//         DD DISP=SHR,DSN=LOCL.USERSRC\n//         DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.AMODGEN,UNIT=3350,VOL=SER=DLB85A\n//         DD DISP=SHR,DSN=SYS1.AGENLIB,UNIT=3350,VOL=SER=DLB85A\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSUT2   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSUT3   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSIN    DD *\n         TITLE 'IEECVXIT - MCS USER EXIT'\nIEECVXIT CSECT\n***********************************************************************\n*                                                                     *\n*      THIS CODE HAS BEEN EXTENSIVELY MODIFIED FROM THE USER EXIT AS  *\n* DISTRIBUTED ON THE CBT MODS TAPE. THE SIGNIFICANT CHANGE IS THAT IT *\n* IS TABLE DRIVEN RATHER THAN CONTAINING MESSAGES/REPLIES CODED INLINE*\n* AND THEREFORE THE SELECTION CRITERIA FOR CONSOLE TRAFFIC CAN BE     *\n* MODIFIED BY THE SYSTEMS PROGRAMMER ON THE FLY WITHOUT AN IPL.       *\n*                                                                     *\n*                                    MARV CRUZAN                      *\n*                                    DEFENSE LOGISTICS AGENCY         *\n*                                    DLA SYSTEMS AUTOMATION CENTER    *\n*                                    DSAC-TSG                         *\n*                                    P O BOX P1605                    *\n*                                    COLUMBUS, OH  43216-5002         *\n*                                    (614) 238-9409                   *\n*                                                                     *\n* CHANGE LOG:                                                         *\n*       13JAN86 - CBT MODS TAPE VERSION MODIFIED - M CRUZAN           *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* THIS PROGRAM IS USED AS A USER MCS EXIT TO TRAP SPECIFIC MESSAGES   *\n* AND: SUPPRESS THE MESSAGE,                                          *\n*      CHANGE THE MESSAGE TO ROLL OR NO-ROLL,                         *\n*      ISSUE A REPLY TO THE MESSAGE,                                  *\n*      ISSUE ANOTHER COMMAND AS A RESULT OF THE MESSAGE.              *\n*                                                                     *\n* REG1=======> +----/ /----+-----------+-----------+                  *\n*              | UCMMSTXT  | UCMROUTC  | UCMDESCD  |                  *\n*              | 128 BYTES |  4  BYTES |  4  BYTES |                  *\n*              +----/ /----+-----------+-----------+                  *\n*                                                                     *\n* ROUTING CODES:                                                      *\n*                                                                     *\n*      1 MASTER CONSOLE ACTION          9  SYSTEM SECURITY            *\n*      2 MASTER CONSOLE INFO            10 SYSTEM ERROR/MAINTENANCE   *\n*      3 TAPE POOL                      11 PROGRAMMER INFORMATION     *\n*      4 DASD POOL                      12 EMULATORS                  *\n*      5 TAPE LIBRARY                   13 RESERVED FOR CUSTOMER      *\n*      6 DASD LIBRARY                   14 RESERVED FOR CUSTOMER      *\n*      7 UNIT RECORD POOL               15 RESERVED FOR CUSTOMER      *\n*      8 TELEPROCESSING CONTROL         16 RESERVED FOR IBM           *\n*                                                                     *\n* DESCRIPTOR CODES:                                                   *\n*                                                                     *\n*      1 SYSTEM FAILURE                 9  OPERATOR REQUEST           *\n*     *2 IMMEDIATE ACTION REQUIRED      10 DYNAMIC STATUS DISPLAYS    *\n*     *3 EVENTUAL ACTION REQUIRED      *11 CRITICAL EVENTUAL ACTION   *\n*      4 SYSTEM STATUS                  12 RESERVED                   *\n*      5 IMMEDIATE COMMAND RESPONSE     13 RESERVED                   *\n*      6 JOB STATUS                     14 RESERVED                   *\n*      7 APPLICATION PROGRAM/PROCESSOR  15 RESERVED                   *\n*      8 OUT-OF-LINE MESSAGE            16 RESERVED                   *\n*  (*)NO ROLL DESCRIPTOR CODES                                        *\n*                                                                     *\n* COLOUR CODES (BASED ON DESCRIPTOR CODE):                            *\n*                                                                     *\n*      1, 11      RED                                                 *\n*      2, WTOR'S  WHITE                                               *\n*      8          BLUE                                                *\n*      ALL OTHERS GREEN                                               *\n*                                                                     *\n***********************************************************************\n          EJECT\n***********************************************************************\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*      RE-ENTRANT,RESIDENT IN PLPA.                                   *\n*                                                                     *\n* ENTRY BY BALR FROM IEAVVWTO IN LMOD IGC0003E.                       *\n*                                                                     *\n* RETURN TO CALLER VIA BR14.                                          *\n*                                                                     *\n* NO SUBPROGRAM CALLS.                                                *\n*                                                                     *\n* INPUT IS THE UCM PARAMETER LIST POINTED TO BY REG1.                 *\n*                                                                     *\n*      REG5+X'74' ===> VPARMAD IN THE SVRB EXTENTION.                 *\n*      VPARMAD+4 ===> WTOR ECB.                                       *\n*                                                                     *\n* TWO INTERNAL ROUTINES:                                              *\n*     IEECVSRB - AN SRB SCHEDULED TO THE FIRST READY TCB ON THE ASCB  *\n*                FOR CMD1.                                            *\n*     IEECVIRB - AN IRB BELONGING TO CMD1.                            *\n*                                                                     *\n* RELATED CODE:                                                       *\n*     IEAVNP99 - NIP USER EXIT.                                       *\n*     DLACMD00 - MESSAGE ENTRY TABLE IN CSA.                          *\n*     IEECVENT - MACRO TO CREATE DLACMD00 ENTRIES.                    *\n*     IEECVUSR - MAPPING MACRO FOR DLACMD00.                          *\n*     CMD1     - STC THAT EXECUTES DSACTASK THAT LOADS AND ANCHORS    *\n*                IEECVUSR IN THE CVTVERID.                            *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*      IEECVXIT LOOKS FOR THE IEECVUSR TABLE WHICH IS ANCHORED IN THE *\n* CVTVERID USER CVT PREFIX BY CMD1 AT INITIALIZATION.  THE TABLE IS   *\n* MADE UP OF ENTRIES OF SELECTED MESSAGES TO ACT UPON, FLAGS AND/OR   *\n* TEXT FOR RESPONSES. WHEN A HIT IS MADE, THE FLAGS ARE TESTED TO DE- *\n* TERMINE IF IEECVXIT WILL ALTER THE MESSAGE DIRECTLY OR SCHEDULE     *\n* IEECVSRB TO ISSUE SOME SUBSEQUENT RESPONSE.                         *\n*                                                                     *\n*      THE SRB IS NEEDED BECAUSE A REPLY NUMBER MAY NOT HAVE BEEN GEN-*\n* ERATED AND IEECVXIT CANNOT ISSUE A WAIT BECAUSE THAT WOULD HALT THE *\n* PROCESSING OF THE WTOR.  THIS CANNOT BE SUBTASKED EITHER BECAUSE    *\n* THE TASK MAY END BEFORE THE SUBTASK. THEREFORE, IEECVXIT RUNS UNDER *\n* THE MESSAGE INVOKER'S ASID AND THE SRB IS DISPATCHED TO CMD1'S AD-  *\n* DRESS SPACE.                                                        *\n*                                                                     *\n***********************************************************************\n         EJECT\nR0       EQU   0\nR1       EQU   1                       ADDRESS OF SUPPLIED PARAMETERS\nM1       EQU   1                       ICM MASK\nR2       EQU   2                       ADDRESS OF EXIT PARAMETERS\nM2       EQU   2                       ICM MASK\nR3       EQU   3                       ADDRESS OF CVT\nR4       EQU   4                       ADDRESS OF UCB LOOKUP TABLE\nR5       EQU   5                       ADDRESS OF UCB\nR6       EQU   6\nR7       EQU   7                       ADDRESS IN OPTIONAL MSG TABLE\nM7       EQU   7                       ICM MASK\nR8       EQU   8                       INCREMENT FOR MSG TABLE\nR9       EQU   9                       END ADDRESS OF MSG TABLE\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                      BASE REGISTER\nR13      EQU   13                      SAVE AREA POINTER\nR14      EQU   14                      RETURN ADDRESS\nR15      EQU   15                      ENTRY ADDRESS\nM15      EQU   15                      ICM MASK\nCVTLOC   EQU   16                      LOCATION OF CVT\n         USING *,R15                   EST. ADDRESSABILITY\n         B     PROLOG                  BYPASS PROLOGUE\n         DC    C'IEECVXIT &SYSDATE..&SYSTIME' NAME AND DATE/TIME STAMP\n         DS    0H                      ALLIGNMENT\nPROLOG   SAVE  (14,12)                 SAVE CALLERS REGS\n         LR    R12,R15                 SAVE ENTRY ADRESS\n         DROP  R15                     LOSE OLD BASE\n         USING IEECVXIT,R12            REAL BASE ADDRESS=R12\n         L     R2,0(R1)                SET ADDR TO IEECUCM DSECT\n         USING UCMEXIT,R2              EST. ADDR TO IEECUCM DSECT\n       GETMAIN R,LV=WORKAL,SP=250    GET CORE FROM SP=250\n         LR    R10,R1                  SAVE THE ADDRESS\n         USING WORKAREA,R10            GET ADDRESSABILITY\n         ST    R13,SAVE1+4             SETUP\n         ST    R10,8(R13)                  SAVEAREA\n         LR    R13,R10                         CHAIN\n*                                      GET VPARMAD FROM ORIGINAL\n         L     R8,X'74'(R5)            SVRB EXTENTION\n         MVC   $ECB,4(R8)              SAVE HIS ECB ADDRESS\n         TITLE 'IEECVXIT - SCAN FOR CONSOLE TRAFFIC'\n***********************************************************************\n*                                                                     *\n*        LOOK FOR MESSAGES.                                           *\n*                                                                     *\n***********************************************************************\n         L     R7,16              GET THE CVT\n         S     R7,=A(CVTMAP-CVTFIX) BACKUP TO USER PREFIX\n         USING CVTFIX,R7\n         LA    R7,CVTVERID        AND GET USER AREA\n         DROP  R7\n         USING CVTVER,R7\n         TM    DSACFLG1,NP99TBLD  IS THE TABLE LOADED?\n         BZ    RETURN             NO - EXIT\n         TM    DSACFLG1,NP99TBIU  IS IT AVAILABLE?\n         BZ    RETURN             NO - DONT WAIT AROUND\n         ICM   R8,M15,DSACTCMD    GET TABLE ENTRY\n         BZ    RETURN             SHOULDNT HAPPEN\n         USING IEECVUSR,R8\nMSGLOOP  DS    0H\n         SR    R9,R9              CLEAR WORK REG9\nMSGLOOP1 DS    0H\n         IC    R9,IEECVSNG        LOOK FOR TABLE END\n         LTR   R9,R9                TEST IT\n         BZ    RETURN             THIS MSG NOT ON TABLE\n         BCTR  R9,0               DECREMENT FOR EXECUTE\n         EX    R9,MSGCLC          COMPARE WITH UCM\n         BE    MSGFOUND           GOTCHA!\n         IC    R9,IEECVLNG        GET ENTRY LENGTH\n         LA    R8,0(R9,R8)        AND BUMP TO IT\n         B     MSGLOOP1           GO BACK AROUND\nMSGCLC   CLC   IEECVTXT(0),UCMMSTXT\nMSGFOUND DS    0H\n         TM    IEECVFLG,IEECVACT+IEECVRPL   ISSUE START OR REPLY?\n         BNZ   SCHEDULE           - YES\n         TM    IEECVFLG,IEECVSUP  SUPPRESS?\n         BO    SUPPRESS           -YES\n         TM    IEECVFLG,IEECVROL  MAKE IT ROLL?\n         BO    ROLL               -YES\n         TM    IEECVFLG,IEECVNRL  MAKE IT NO ROLL?\n         BO    NOROLL             -YES\n         TM    IEECVFLG,IEECVNRD  MAKE IT NO ROLL WITH DELETE?\n         BO    NOROLLD            -YES\n         B     RETURN             ELSE A NULL ENTRY\nSUPPRESS DS    0H\n         XC    UCMROUTC(4),UCMROUTC GOING NOWHERE,\n         XC    UCMDESCD(4),UCMDESCD   ...TRASH IT\n         B     RETURN\nROLL     DS    0H\n         NC    UCMROUTC(2),=B'0111111111111111' ROUTCDE NOT 1\n         NC    UCMDESCD(2),=B'1001111111011111' DESC NOT 2,3,11\n         B     RETURN\nNOROLL   DS    0H\n         NC    UCMROUTC(2),=B'0111111111111111' ROUTCDE 1 OFF\n         OC    UCMROUTC(2),=B'0100000000000000' ROUTCDE=(2,...)\n         OC    UCMDESCD(2),=B'0100000000000000' DESC=(2,...)\n         B     RETURN\nNOROLLD  DS    0H\n* SAME AS NOROLL BUT MSG IS DELETED WHEN TASK/ADDRESS SPACE TERMINATES\n         NC    UCMROUTC(2),=B'0111111111111111' ROUTCDE 1 OFF\n         OC    UCMROUTC(2),=B'0100000000000000' ROUTCDE=(2,...)\n         OC    UCMDESCD(2),=B'0100001000000000' DESC=(2,7,...)\n         B     RETURN\n         TITLE 'IEECVXIT - CREATE AND PREPARE TO SCHEDULE SRB'\n***********************************************************************\n*                                                                     *\n* CREATE AND SCHEDULE AN SRB HERE.  WORKAREA IS COPIED FROM           *\n* SP250 (INVOKERS ADDRESS SPACE) TO SP245 (SQA).  THE ASVT IS         *\n* SEARCHED FOR THE ASID OF THE STC \"CMD1\" AND THE SRB IS SCHEDULED    *\n* TO THE FIRST READY TCB.                                             *\n*                                                                     *\n***********************************************************************\nSCHEDULE DS    0H\n         L     R1,CVTLOC        PTR CVT ADDRESS\n         L     R1,0(R1)         CVT ADDRESS\n         L     R1,12(R1)        ASCB ADDRESS\n         MVC   $ASID,36(R1)     SAVE ASID FROM ASCB\n         ST    R8,$MSG          SAVE TABLE ENTRY POINTER\n       GETMAIN R,LV=WORKAL,SP=245   GET CORE FROM SP=245\n         LR    R3,R1            SAVE AREA ADDRESS\n         SPACE\n***********************************************************************\n*                                                                     *\n* COPY THE WORKAREA TO SQA.                                           *\n*                                                                     *\n***********************************************************************\n         MVC   0(WORKAL-L'WTOAREA,R3),WORKAREA  COPY WORKAREA\n         PUSH  USING\n         DROP  R10\n         USING WORKAREA,R3\n         XC    SRB(SRBSIZE),SRB  ZERO OUT OUR SRB\n         MVC   SRBID,=CL4'SRB '  MOVE IN THE SRB IDENTIFER\n         L     R2,CVTLOC         PTR CVT ADDRESS\n         S     R2,=A(CVTMAP-CVTFIX) BACKUP TO PREFIX\n         EJECT\n***********************************************************************\n*                                                                     *\n* GET ASVT FROM CVT.                                                  *\n*                                                                     *\n***********************************************************************\nFNDASCB  DS    0H\n         DROP  R2\n         USING CVTFIX,R2\n         L     R2,CVTASVT        POINT TO ASVT\n         DROP  R2\n         USING ASVT,R2\n         LA    R14,ASVTENTY-4    POINT TO FIRST ENTRY MINUS FOUR\n         L     R15,ASVTMAXU      LOAD NUMBER OF ASID'S\n         SPACE\n***********************************************************************\n*                                                                     *\n* LOOK FOR CMD1 ADDRESS SPACE.                                        *\n*                                                                     *\n***********************************************************************\n$NEXT    DS    0H\n         BCTR  R15,R0            DECR NUMBER OF ASIDS\n         LTR   R15,R15           LAST TIME ?\n         BZ    RETURN            RETURN ASID NOT FOUND\n         LA    R14,4(R14)        POINT TO NEXT ASVTENTY ENTRY\n         USING ASVTENTY,R14\n         ICM   R2,15,ASVTENTY    LOAD ASCB ADDR\n         BM    $NEXT             BR IF NOT ACTIVE\n         DROP  R2\n         USING ASCB,R2\n         ICM   R7,15,ASCBJBNS    LOAD TASK NAME\n         BZ    CHKJOB            YES. CHECK JOB NAME\n         CLC   =CL8'INIT',0(R7)  IS IT 'INIT' ?\n         BNE   CHKIT             NO. SEE WHAT THE TASK NAME IS\nCHKJOB   ICM   R7,15,ASCBJBNI    JOB NAME ADDR\n         BZ    $NEXT\nCHKIT    CLC   0(8,R7),=CL8'CMD1   ' IS THIS THE JOBNAME\n         BNE   $NEXT             NO, LOOK AT NEXT ASCB\n         ST    R2,SRBASCB        CMD1'S ASCB\n         TITLE 'IEECVXIT - SCHEDULE SRB TO CMD1'\n***********************************************************************\n*                                                                     *\n* SET UP SRB FOR SCHEDULING.                                          *\n*                                                                     *\n***********************************************************************\n         MVC   SRBPTCB,ASCBTNEW  SAVE FIRST READY TCB ADDRESS\n         MVC   SRBPASID,ASCBASID SAVE CMD1'S ASID\n         DROP  R2\n         LA    R1,IEECVSRB       SRB ENTRY POINT\n         ST    R1,SRBEP          SAVE IN SRB\n         LA    R1,SRBCLEAN       SRB ABNORMAL TERMINATION ROUTINE\n         ST    R1,SRBRMTR        SAVE IN SRB\n         ST    R3,SRBPARM        SEND WORK AREA AS THE PARAMETER\n         SPACE\n      SCHEDULE SRB=SRB,SCOPE=LOCAL\n         SPACE\n         POP   USING\n         B     RETURN            ALL DONE SRB IS SCHEDULED\n         SPACE\n***********************************************************************\n*                                                                     *\n*        AN SRB ABEND.                                                *\n*                                                                     *\n***********************************************************************\nSRBCLEAN BR    R14               SRB ERROR ROUTINE\n         TITLE 'IEECVXIT - RETURN TO MCS'\n***********************************************************************\n*                                                                     *\n*        FREE THE WORKAREA IN THE INVOKERS ADDRESS SPACE AND          *\n*        RETURN TO MCS.                                               *\n*                                                                     *\n***********************************************************************\nRETURN   DS    0H     RETURN TO MCS\n         LR    R1,R13                  GET AREA ADDRESS\n         L     R13,4(,R13)             POINT TO OLD SAVEAREA\n      FREEMAIN R,A=(1),LV=WORKAL,SP=250 INVOKE FREEMAIN\n         LM    R14,R12,12(R13)         RESTORE ENTRY REGISTERS\n         LA    R15,0                   SET RETURN CODE\n         BR    R14                     RETURN TO MCS\n         SPACE\n         LTORG\n         DROP\n         TITLE 'IEECVXIT - BUILD IRB AND IQE FOR CMD1'\n***********************************************************************\n*                                                                     *\n*        THIS IS THE SRB CODE.                                        *\n*                                                                     *\n***********************************************************************\nIEECVSRB DS    0H\n         BALR  R10,R0         ESTABLISH BASE REGISTER\n         USING *,R10\n         LR    R7,R14         SAVE SRB RETURN ADDRESS\n         LR    R2,R1          GET PARAMETER ADDRESS\n         USING WORKAREA,R2\n         SPACE\n$GLOCK SETLOCK OBTAIN,TYPE=LOCAL,REGS=USE,MODE=UNCOND,                 C\n               RELATED=$FLOCK\n         SPACE\n         L     R4,SRBPTCB       GET TCB ADDRESS FOR CIRB\n         SPACE\n         CIRB  EP=IEECVIRB,KEY=SUPR,MODE=PP,BRANCH=YES,SVAREA=YES,     C\n               STAB=(DYN),RETIQE=NO,WKAREA=30\n         SPACE\n         LR    R3,R1            ADDRESS OF IRB IN R3\n         USING RBBASIC,R3\n         L     R1,RBNEXAV       ADDRESS OF IQE IN R1\n         USING IQESECT,R1\n         ST    R3,IQEIRB        ADDRESS OF IRB IN IQEIRB\n         ST    R2,IQEPARAM      PARM LIST FOR USER\n         ST    R4,IQETCB        ADDRESS OF TCB IN IQETCB\n         LCR   R1,R1            COMPLEMENT REGISTER R1\n         L     R12,CVTLOC       CVTADDRESS\n         S     R12,=A(CVTMAP-CVTFIX) BACK UP TO PREFIX\n         USING CVTFIX,R12\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CALL THE STAGE TWO EXIT EFFECTOR                             *\n*                                                                     *\n***********************************************************************\n         L     R14,CVT0EF00     ADDR OF STAGE TWO EXIT EFFECTOR\n         BALR  R14,R14          GO SCHEDULE THE IQE\n         DROP  R12\n         SPACE\n***********************************************************************\n*                                                                     *\n*        FREE THE LOCKS AND RETURN TO POST                            *\n*                                                                     *\n***********************************************************************\n         SPACE\n$FLOCK SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,RELATED=$GLOCK\n         SPACE\n         LR    R14,R7           RESTORE REG 14.\n         BR    R14              RETURN TO DISPACHER\n         DROP\n         TITLE 'IEECVXIT - DISPATCH AN IRB TO CMD1'\n***********************************************************************\n*                                                                     *\n*        IRB TO BE SCHEDULED.                                         *\n*                                                                     *\n***********************************************************************\nIEECVIRB SAVE  (14,12)       SAVE CALLERS REGISTERS\n         LR    R12,R15       SETUP BASE REGISTER\n         USING IEECVIRB,R12  GET NEW BASE REGISTER\n         LR    R10,R1        SAVE ENTRY CODE\n         USING WORKAREA,R10  GET ADDRESSABILITY\n         ST    R13,SAVE1+4   SETUP\n         ST    R10,8(R13)         SAVEAREA\n         LR    R13,R10                 CHAIN\n         SPACE\n        STIMER WAIT,BINTVL=TWOSEC GIVE A LITTLE DELAY\n         SPACE\n         XC    MGCR(128),MGCR CLEAR MESSAGE AREA\n         SR    R9,R9         CLEAR WORK REG9\n         L     R8,$MSG       ENTRY LIST POINTER TO REG8\n         USING IEECVUSR,R8   AND ADDRESS IT\n         LR    R7,R8         AND INTO R7\n         IC    R9,IEECVSNG TEXT MSG LENGTH TO REG9\n         LA    R7,L'IEECVHDR(R9,R8) AND BUMP TO START OF TEXT\n         TM    IEECVFLG,IEECVACT AN ACTION COMMAND?\n         BO    GIVECMD       - YES, ISSUE IT\n         TM    IEECVFLG,IEECVRPL IS A REPLY NEEDED?\n         BO    AUTOREP       - YES, GIVE IT\n         B     $EXIT         SHOULDNT HAPPEN\n         TITLE 'IEECVXIT - AUTOMATIC REPLIES SET UP HERE'\n***********************************************************************\n*                                                                     *\n*        PREPARE AUTO REPLY; REG7 @ REPLY TEXT, REG8 @ IEECVUSR       *\n*                                                                     *\n***********************************************************************\nAUTOREP  DS    0H\n         LA    R3,5          ALLOW 5 COMPLETE SEARCHES THRU THE RQE'S\nFNDRQE   DS    0H\n         LA    R2,20         SEARCH COUNTER - TWENTY RQE'S MAX\n         L     R1,CVTLOC     PLACE THE CVT ADDRESS IN REG. 1\n         L     R1,100(R1)    ADDRESS OF UCM\n         L     R1,28(R1)     FIRST RQE ADDRESS\nGETRQE   DS    0H\n         LA    R1,0(R1)      ZERO HIGH ORDER BYTE\n         CLC   $ASID,24(R1)  DOES THE ASID IN THE RQE MATCH $ASID ?\n         BNE   NEXTRQE       NO GET NEXT RQE\n         L     R6,20(R1)     USERS ECB ADDRESS FROM RQE\n         LA    R6,0(R6)      CLEAR NOISE\n         C     R6,$ECB       COMPARE THE ECB IN THE RQE WITH $ECB\n         BE    FOUND         GREAT IT'S OURS !!\nNEXTRQE  DS    0H\n         L     R1,0(R1)      GET ADDRESS OF NEXT RQE\n         LTR   R1,R1         WAS IT THE LAST RQE ?\n         BZ    ENDLOOK       YES, LAST RQE - TEST WAIT COUNTER\n         BCT   R2,GETRQE     EXAMINE RQE FIELDS\nENDLOOK  DS    0H\n        STIMER WAIT,BINTVL=TWOSEC WAIT FOR MCS TO CATCH UP\n         BCT   R3,FNDRQE     WAIT A FEW SECONDS AND TRY AGAIN\n         B     $EXIT         NEVER FOUND THE RQE - LEAVE\n         SPACE\nFOUND    DS    0H\n         SR    R9,R9                CLEAR WORK REG9\n         IC    R9,IEECVANG          TEXT LENGTH TO REG9\n         BCTR  R9,0                 DECREMENT FOR EXECUTE\n         EX    R9,MVCMSG            AND MOVE TEXT\n         MVC   MGCR+6(2),4(R1)      MOVE IN REPLY NUMBER FROM RQE\n         LA    R9,5(,R9)            ADJUST MSG LENGTH\n         STH   R9,MGCR              AND SAVE FOR SVC 34\n         OI    MGCR+2,X'80'         INSTALL MCS FLAG\n         LA    R1,MGCR              SETUP FOR SVC 34\n         SR    R0,R0                SHOW SYSTEM ISSUE\n         MGCR  (1)                  AND ISSUE\n         B     $EXIT                   THEN EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INITIATE AN ACTION BASED ON SOME CONSOLE TRAFFIC.            *\n*                                                                     *\n***********************************************************************\nGIVECMD  DS    0H\n         SR    R9,R9                CLEAR WORK REG9\n         IC    R9,IEECVANG          TEXT LENGTH TO REG9\n         BCTR  R9,0                 DECREMENT FOR EXECUTE\n         EX    R9,MVCMSG            AND MOVE TEXT\n         LA    R9,5(,R9)            ADJUST MSG LENGTH\n         STH   R9,MGCR              AND SAVE FOR SVC 34\n         LA    R1,MGCR              SETUP FOR SVC 34\n         SR    R0,R0                SHOW SYSTEM ISSUE\n         MGCR  (1)                  AND ISSUE\n         B     $EXIT                - LEAVE\nMVCMSG   MVC   MGCR+4(0),0(R7)      EXECUTED MVC\n$EXIT    DS    0H\n         LR    R1,R13            GET ADDRESS OF WORKAREA\n         L     R13,SAVE1+4       ADDRESS OF PREVIOUS SAVE AREA\n      FREEMAIN R,A=(1),LV=WORKAL,SP=245   FREE UP GOTTEN CORE\n         LM    R14,R12,12(R13)   RESTORE THE REGISTERS\n         LA    R15,0(0,0)        SET RC=0\n         BR    R14               RETURN TO THE DISPACHER\n         SPACE\n         LTORG\n         TITLE 'IEECVXIT - WORKAREA AND DSECTS'\nTWOSEC   DC    A(2*100)\n         SPACE\nWORKAREA DSECT\nSAVE1    DS    18F                     SAVE AREA\n$ECB     DS    A                       WTOR ECB ADDRESS\n$MSG     DS    A                       TABLE ENTRY POINTER\n$ASID    DS    H                       ISSUERS ASID\n         DS    H\nSCRATCH  DS    0F'0',CL130\n         ORG   SCRATCH\nSRB      DS    0A\nSRBID    DS    CL4                      EBCDIC ACRONYM   FOR SRB\nSRBFLNK  DS    A                        FORWARD CHAIN FIELD\nSRBASCB  DS    A                        PTR TO ASCB OF ADDRESS SPACE\n*                                         SRB IS TO BE DISPATCHED TO\nSRBFLC   DS    0CL8                     SRB AREA MOVED TO LOW CORE\nSRBCPAFF DS    BL2                      CPU AFFINITY MASK\nSRBPASID DS    H                        PURGEDQ ASID IDENTIFIER\nSRBPTCB  DS    A                        PURGEDQ TCB IDENTIFIER\nSRBEP    DS    A                        ENTRY POINT OF ROUTINE\nSRBRMTR  DS    A                        ADDRESS OF RESOURCE MGR RTN\nSRBPARM  DS    A                        USER PARAMETER\nSRBSAVE  DS    A                        SAVE AREA POINTER\nSRBPKF   DS    B                        PROTECT KEY INDICATION\nSRBPRIOR DS    0B                       PRIORITY LEVEL INDIC\nSRBFLGS  DS    B                        SRB OPTION FLAGS\nSRBLLREQ EQU   X'80'                    LOCAL LOCK REQUIRED\nSRBLLHLD EQU   X'40'                    LOCAL LOCK HELD\nSRBFRREQ EQU   X'20'                    FRR REQUESTED\nSRBFRRCL EQU   X'10'                    CLEAR FRR PARM AREA\nSRBSUSP  EQU   X'08'                    SUSPENDED SRB ONLY ON FOR\n*                                         SSRB\nSRBPNONQ EQU   X'04'                    NON QUIESCABLE SRB\nSRBRESV3 EQU   X'02'                    RESERVED FLAG\nSRBRESV4 EQU   X'01'                    RESERVED FLAG\nSRBPSYS  EQU   X'00'                    SYSTEM PRIORITY LEVEL\nSRBHLHI  DS    BL1                      INDICATION OF SUSPEND LOCKS\n*                                         HELD AT SRB SUSPENSION\n         DS    BL1                      RESERVED\nSRBFRRA  DS    A                        FRR ROUTINE ADDRESS\nSRBEND   DS    0H                       END OF SRB\nSRBSIZE  EQU   SRBEND-SRB               SIZE OF SRB\nWTOAREA  EQU   SRB                      WORK AREA FOR WTO -MUST BE LAST\n         ORG   SRB\nMGCR     DS    A(0),CL124               FOR MGCR SVC 34 P-LIST\n         ORG\nWORKEND  EQU  *\nWORKAL   EQU  WORKEND-WORKAREA\n       TITLE 'IEECVXIT - DSECTS FOR MAPPING'\n       DSACCVTV                    USER CVT PREFIX\n       SPACE\n       IEECUCM FORMAT=NEW          UCM MAP\n       SPACE\n       IEECVUSR                    USER TABLE MAP\n       SPACE\n       IHAASVT                     ASVT MAP\n       SPACE\n       IHAPSA                      PSA MAP\n       SPACE\n       IHARB                       SRB MAP\n       SPACE\n       IHAIQE                      IQE MAP\n       SPACE\n       IHAASCB                     ASCB MAP\n       SPACE\n       CVT   DSECT=YES,PREFIX=YES  CVT MAP\n       END\n/*\n//*\n//IEWL1 EXEC PGM=IEWL,\n// PARM='LIST,RENT,REUS,XREF,LET'\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1),DCB=BUFNO=1\n//USEROBJ  DD DISP=SHR,DSN=LOCL.USEROBJ\n//SYSLMOD  DD DISP=SHR,DSN=SYS1.LPALIB,UNIT=3330-1,VOL=SER=RES1N4\n//SYSLIN   DD *\n     ORDER IEAVVWTO(P)\n     ORDER IEAVMWTO\n     ORDER IGC0203E\n     ORDER IEECVXIT(P)\n     INCLUDE USEROBJ(IEECVXIT)\n     INCLUDE SYSLMOD(IGC0003E)\n     ENTRY IEAVVWTO\n     NAME IGC0003E(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEFDB401": {"ttr": 4871, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//NTS0991A JOB (0991,TSG),'* IEFDB401 *',MSGCLASS=X,CLASS=6,\n//  NOTIFY=NTS0991,MSGLEVEL=(1,1)\n//IEFUTL1 EXEC PGM=IEV90,\n// PARM='XREF,LIST,LINECOUNT(55)),DECK,SYSPARM(DLASIP00)'\n//SYSPRINT DD SYSOUT=*\n//SYSPUNCH DD DISP=SHR,DSN=LOCL.USEROBJ(IEFDB401)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.SMPMTS\n//         DD DISP=SHR,DSN=LOCL.USERSRC\n//         DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.AMODGEN,UNIT=3350,VOL=SER=DLB85A\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSUT2   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSUT3   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSIN    DD *\n         TITLE 'IEFDB401 - DYNAMIC ALLOCATION EXIT'\n**********************************************************************\n* /*                                                                 *\n* /* FUNCTION: TO PROVIDE ENHANCED INTEGRITY TO SPECIFIED SYSTEM     *\n* /*           RESOURCES. THIS IS NOT INTENDED TO BE A REPLACEMENT   *\n* /*           FOR RACF TYPE FACILITIES.                             *\n* /*                                                                 *\n* /* WRITTEN:  DEC, 1985 BY MARV CRUZAN                              *\n* /*                        DEFENSE LOGISTICS AGENCY                 *\n* /*                        DLA SYSTEMS AUTOMATION CENTER            *\n* /*                        DSAC-TSG                                 *\n* /*                        P O BOX P1605                            *\n* /*                        COLUMBUS, OH  43216-5002                 *\n* /*                        (614) 238-9409                           *\n* /*                                                                 *\n* /* DESCRIPTION: THIS IS USER CODE FOR THE DYNAMIC ALLOCATION       *\n* /*           EXIT IN IEFW21SD. REFER TO THE LABEL TBLOOKUP FOR     *\n* /*           A DESCRIPTION OF THE MECHANICS OF THE ACCESS          *\n* /*           AUTHORIZATION LOGIC.                                  *\n* /*                                                                 *\n* /* COMPONENT PARTS:                                                *\n* /*      IEFDB401 - THIS MODULE                                     *\n* /*                                                                 *\n* /*      DLASIP00 - A TABLE OF RESOURCES TO BE PROTECTED AND        *\n* /*                 REQUESTERS WITH AUTHORITY TO ACCESS THEM.       *\n* /*                                                                 *\n* /*      RESOURCE - MACRO USED IN THE DEFINITION OF DLASIP00.       *\n* /*                                                                 *\n* /*      REQUESTR - MACRO USED IN THE DEFINITION OF DLASIP00.       *\n* /*                                                                 *\n* /*      IEFZBMAP - MAPPING MACRO FOR ALLOCATION SAVE AREA.         *\n* /*                                                                 *\n* /* CHANGE LOG:                                                     *\n* /*           11 DEC 85 - ADDED DOCUMENTATION. M. C. CRUZAN         *\n* /*                                                                 *\n**********************************************************************\nIEFDB401 CSECT\nR0       EQU   0                   OS LINKAGE REGISTER\nR1       EQU   1                   OS LINKAGE REGISTER\nR2       EQU   2                   PARAMETER LIST REGISTER\nR3       EQU   3                   ADDRESS OF ASCB\nR4       EQU   4                   ADDRESS OF SVC99 REQUEST BLOCK\nR5       EQU   5                   ADDRESS OF SVC99 TEXT UNIT POINTER\nR6       EQU   6                   ADDRESS OF OUCB\nR7       EQU   7                   ADDRESS OF SVC99 TEXT UNIT\nM7       EQU   7                   ICM MASK\nR8       EQU   8                   ADDRESS OF TSB/TCB/JSCB/JCT/ACT/SCT\nR9       EQU   9                   ADDRESS OF RB/CDE/JSCB/JCT/ACT/SCT\nR10      EQU   10                  WORK\nR11      EQU   11                  WORK\nR12      EQU   12                  BASE ADDRESS REGISTER\nR13      EQU   13                  SAVE AREA ADDRESS\nR14      EQU   14                  OS LINKAGE REGISTER\nR15      EQU   15                  OS LINKAGE REGISTER\nM15      EQU   15                  ICM MASK\nSUPKEY   EQU   0                   SUPERVISOR KEY\nSCHEDKEY EQU   16                  SCHEDULER KEY\n         SAVE (14,12),,IEFDB401&SYSDATE.&SYSTIME\n         LR    R12,R15             SET BASE\n         USING IEFDB401,R12        ESTABLISH ADDRESSABILITY\n         LR    R2,R1               SAVE PARM REGISTER\n         L     R1,4(,R2)           GET ADDR OF WORKAREA ADDR\n         L     R1,0(,R1)           GET ADDR OF WORKAREA\n         ST    R13,4(,R1)          CHAIN\n         ST    R1,8(,R13)            SAVE\n         LR    R13,R1                  AREAS\n         SPACE\n         USING ASCB,R3             GET ADDRESSABILITY TO ACSB\n         USING S99RB,R4            GET ADDRESSABILITY TO SVC99 RB\n         USING S99TUPL,R5          GET ADDRESSABILITY TO TU POINTERS\n         USING OUCB,R6             GET ADDRESSABILITY TO OUCB\n         USING S99TUNIT,R7         GET ADDRESSABILITY TO TEXT UNITS\n         USING IEFZBMAP,R13        GET ADDRESSABILITY TO WORKAREA\n         SPACE\n         XC    B4WKAREA(B4FIXEND),B4WKAREA CLEAR FIXED WORKAREA\n         SPKA  SUPKEY(R0)          NEED KEY ZERO FOR FETCH PROTECT\n         TITLE 'IEFDB401 - INITIAL SCAN'\n**********************************************************************\n*                                                                    *\n* SEPARATE BATCH JOBS FROM STARTED TASKS.                            *\n*                                                                    *\n**********************************************************************\n         L     R3,548              GET ASCB ADDRESS FROM PSA\n         ICM   R11,M15,ASCBJBNI    IS IT AN INITIATED STEP?\n         BZ    STARTASK            NO - A STARTED TASK\n         MVC   B4JOBNAM,0(R11)     INSTALL BATCH JOB NAME\n         L     R8,ASCBTNEW         GET CURRENT TCB\n         USING TCB,R8              AND ADDRESS IT\n         L     R8,TCBJSCB          GET JSCB\n         DROP  R8\n         USING IEZJSCB,R8          AND ADDRESS IT\n         L     R8,JSCBJCT          GET JCT\n         DROP  R8\n         USING JCT,R8              AND ADDRESS IT\n         ICM   R9,M7,JCTACTAD      GET ACT POINTER\n*                                  MOVE ALL OF ACCOUNTING FIELD\n*                                  TO THE USER WORK AREA\n         MVC   B4ENTCNT(L'ACTACCNT+L'ACTJNFLD),ACTJNFLD-IEFAACTB+16(R9)\n         ICM   R8,M7,JCTSDKAD      GET SCT\n         DROP  R8\n         USING SCT,R8              AND ADDRESS IT\n         MVC   B4STPNAM,SCTSNAME   INSTALL BATCH STEPNAME\n         MVC   B4PGMNAM,SCTPGMNM   INSTALL BATCH PGM=NAME\n         DROP  R8\n         B     ALLOC02\n         SPACE\n**********************************************************************\n*                                                                    *\n* SCREEN OUT THE REMOTE TCAM USERS.                                  *\n*                                                                    *\n* (IN OUR SHOP, ALL TCAM USERS ARE REMOTE, VTAM USERS ARE LOCAL.)    *\n*                                                                    *\n**********************************************************************\nSTARTASK DS    0H\n         ICM   R8,M15,ASCBTSB      ELSE GET TSB\n         BZ    EXITZERO            IF NOT BATCH AND NO TSB, MUST BE\n         USING TSB,R8                 NON-TSO STARTED TASK\n*                                  THE LOGICAL TERMINAL NAME IS\n*                                  SAVED HERE BUT NOT USED.\n         MVC   B4TERMID,TSBTRMID   INSTALL LOGICAL TERMINAL NAME\n         OI    B4FLAG01,B4TSUSER   MARK AS TSO USER\n         CLC   =X'0000',TSBLINE    IS USER REMOTE TCAM?\n         BE    NOTRTCAM            NO\n         OI    B4FLAG01,B4TCAM     MARK AS REMOTE TCAM\n         DROP  R8\n         SPACE\n**********************************************************************\n*                                                                    *\n* SCREEN OUT THE C-LIST USERS.                                       *\n*                                                                    *\n**********************************************************************\nNOTRTCAM DS    0H\n         L     R8,ASCBTNEW         GET CURRENT TCB\n         USING TCB,R8              ADDRESS TCB\n         ICM   R9,M7,TCBTIO+1      GET TIOT ADDRESS\n*                                  THE TIOT ADDRESS IS SAVED HERE\n*                                  BUT NOT USED.\n         ST    R9,B4TIOTAD         AND SAVE IT\n         L     R9,TCBJSCB          GET JSCB\n         USING IEZJSCB,R9          AND ADDRESS IT\n         L     R9,JSCBJCT          GET JCT\n         DROP  R9\n         USING JCT,R9              AND ADDRESS IT\n         ICM   R10,M7,JCTACTAD     GET ACT POINTER\n*                                  MOVE ALL OF ACCOUNTING FIELD\n*                                  TO THE USER WORK AREA\n         MVC  B4ENTCNT(L'ACTACCNT+L'ACTJNFLD),ACTJNFLD-IEFAACTB+16(R10)\n         ICM   R9,M7,TCBRBP+1      GET RB CHAIN\n         DROP  R9\n         USING RBBASIC,R9          ADDRESS RB\nRBLOOK   DS    0H\n         ICM   R10,M7,RBLINK+1     GET BACK POINTER\n         BZ    EXITZERO            SHOULD NOT HAPPEN\n         CR    R8,R10              IS IT THE TCB?\n         BE    RBFOUND             YES - CHECK CALLER\n         LR    R9,R10              NO - KEEP LOOKING\n         B     RBLOOK\nRBFOUND  DS    0H\n         ICM   R9,M7,RBCDE+1       GET CALLERS CDE\n         BZ    RBNCALL             THERE MUST BE ONE\n         DROP  R9                  DROP RB ADDRESSABILITY\n         USING CDENTRY,R9          ADDRESS CDE\n         MVC   B4PGMNAM,CDNAME     INSTALL CALL/LINK NAME\n         CLC   =C'IKJEFT02',CDNAME NATIVE TSO CALL?\n         BE    EXITZERO            YES - OK TO ACCESS\n         CLC   =C'ISPCALL ',CDNAME ISPF CALL?\n         BE    EXITZERO            YES - OK TO ACCESS\n         SPACE\n**********************************************************************\n*                                                                    *\n* MARK THE ISPF USERS, TOO.                                          *\n*                                                                    *\n**********************************************************************\n         CLC   =C'ISP',CDNAME      ISPF USER?\n         BNE   RBNCALL             NO - CHECK ON IT\n         OI    B4FLAG01,B4ISPF     MARK AS ISPF USER\nRBNCALL  DS    0H\n         OI    B4FLAG01,B4CALL     MARK FOR LIMITED ACCESS\n         DROP  R9\n         TITLE 'IEFDB401 - IDENTIFY EXEMPTIONS'\n**********************************************************************\n*                                                                    *\n* EXEMPT STARTED TASKS THAT ARE NOT LOGON.                           *\n*                                                                    *\n**********************************************************************\n         ICM   R6,M15,ASCBOUCB     NOW GET OUCB\n         BZ    EXITZERO            THIS SHOULDNT HAPPEN\n         TM    OUCBYFL,OUCBLOG     IS IT A TSUSER?\n         BZ    EXITZERO            NO - EXIT\n         SPACE\n**********************************************************************\n*                                                                    *\n* SCREEN USERS BY GENERIC GROUP.                                     *\n*                                                                    *\n**********************************************************************\n         ICM   R11,M15,ASCBJBNS    POINTER TO TASK NAME\n         BZ    EXITZERO            THIS SHOULDNT HAPPEN\n         MVC   B4JOBNAM,0(R11)     INSTALL LOGON JOB NAME\n         MVC   B4LOGPRC,8(R11)     INSTALL LOGON PROC NAME\n         TITLE 'IEFDB401 - EXAMINE ALLOCATION PARAMETERS'\n**********************************************************************\n*                                                                    *\n* GET SVC99 REQUEST BLOCK AND SCREEN THE ALLOCATION REQUESTS.        *\n*                                                                    *\n**********************************************************************\nALLOC02  DS    0H\n         L     R4,0(,R2)           POINT TO SVC99 REQUEST BLOCK\n         TM    S99VERB,S99VRBAL+S99VRBCC+S99VRBDN+S99VRBIN\n         BZ    EXITZERO            NOT ALLOCATION REQUEST\n         SPACE\n**********************************************************************\n*                                                                    *\n* LOOP THROUGH TEXT UNITS FOR DSNAME, VOLSER OR LAST TEXT ENTRY.     *\n*                                                                    *\n**********************************************************************\n         L     R5,S99TXTPP         NO - GET ADDR OF TEXT UNIT POINTERS\nTULOOP   DS    0H\n         ICM   R7,M7,S99TUPL+1     GET A TEXT UNIT ADDRESS\n         BZ    NEXTTU              SKIP NULL ENTRIES\n         CLI   S99TUKEY+1,DALSSREQ IS THIS SUBSYSTEM REQ\n         BE    EXITZERO            YES - EXIT\nTRYDSNAM DS    0H\n         CLI   S99TUKEY+1,DALDSNAM IS THIS A DSN KEY\n         BNE   TRYVOLSR            NO - GO CHECK NEXT KEY\n         LA    R7,6(,R7)           BUMP TO DATASET NAME\n         ST    R7,B4DSNAM          AND SAVE THE POINTER\n         B     NEXTTU              GO CHECK NEXT KEY\nTRYVOLSR DS    0H\n         CLI   S99TUKEY+1,DALVLSER IS THIS A VOLSER KEY?\n         BNE   NEXTTU              NO - GO CHECK NEXT KEY\n         LA    R7,6(,R7)           BUMP TO VOLUME SERIAL NUMBER\n         ST    R7,B4VOLSER         AND SAVE THE POINTER\nNEXTTU   DS    0H\n         TM    S99TUPL,S99TUPLN    LAST TEXT UNIT\n         BO    CHECK00             YES - GET OUT OF LOOP\n         LA    R5,4(,R5)           NO - GET NEXT TEXT POINTER\n         B     TULOOP              AND LOOP\n         TITLE 'IEFDB401 - CHECK THE RESOURCE REQUESTED'\n**********************************************************************\n*                                                                    *\n* THE AUTHORIZATION TABLE LOOKUP IS DONE HERE.                       *\n* THE CDE OF THE AUTHORIZATION TABLE IS ANCHORED IN CVTVERID THE     *\n* FIRST TIME THROUGH. EACH SUCCESSIVE TIME, THE LOADED-BY-NIP FLAG   *\n* IS CHECKED TO MAKE SURE SOMEONE DIDNT SWITCH ON US.                *\n*                                                                    *\n**********************************************************************\nCHECK00  DS    0H\n         L     R2,16               GET CVT\n         LA    R4,CVTMAP-CVTFIX    CALCULATE PREFIX LENGTH\n         SR    R2,R4               AND BACKUP TO PREFIX\n         USING CVTFIX,R2\n         ICM   R4,M15,CVTVERID     FIRST TIME THROUGH?\n         BNZ   CHEKDONE            NO - PROCESS USER\n         ICM   R4,M7,CVTLPDIR      ELSE GET LPA CHAIN\n         USING CDENTRY,R4\nMODSRCH  DS    0H\n         CLC   CDNAME,SIPNAME      AND LOOK FOR TABLE MODULE\n         BE    MODFOUND\n         LA    R4,40(,R4)          CONTINUE IF NOT FOUND\n         CLI   CDNAME,X'FF'        LAST ONE?\n         SPACE\n* IF THE AUTHORIZATION TABLE IS NOT AVAILABLE YOU HAVE TO DECIDE\n* HERE WHAT TO DO ABOUT IT. SINCE WE ARE NOT A PRODUCTION SHOP\n* WE OPT TO ALLOW ALLOCATION AND CONTINUE.\n         SPACE\n         BE    EXITZERO            SHOULD NOT HAPPEN\n         B     MODSRCH             KEEP TRYING\nMODFOUND DS    0H\n         TM    CDATTR,CDNIP        IS HE PLPA?\n         BZ    MODSRCH             NOT MINE IF NOT\n         ST    R4,CVTVERID         ELSE SAVE CDE POINTER\nCHEKDONE DS    0H\n         TM    CDATTR,CDNIP        IS HE PLPA?\n         BZ    EXITFOUR            SOMEBODY CHANGED HIM\n         L     R2,CDENTPT          ELSE GET ENTRY POINT\n         DROP  R2\n         DROP  R4\n         MVI   B4RESDSN,X'FF'      SET INITIAL MASK\n         MVC   B4RESDSN+1(15),B4RESDSN TO ASSUME OK\n         EJECT\n**********************************************************************\n*                                                                    *\n* DATA SET NAME RESOURCES ARE CHECKED FIRST.                         *\n*                                                                    *\n**********************************************************************\nCHEKDSN  DS    0H\n         CLC   =C'DSN ',0(R2)      DSN TABLE ENTRIES?\n         BNE   CHEKVOL             NO - LOOK FOR VOLSERS\nRESDSN   DS    0H\n         ICM   R9,M15,B4DSNAM      GET ARGUMENT POINTER\n         BZ    CHEKVOLB            SHOULD NOT HAPPEN\n         L     R3,4(,R2)           DSN RESOURCE LIST POINTER\n         L     R4,0(,R3)           TOP OF LIST\n         L     R7,4(,R3)           AND BOTTOM OF LIST\n         BAL   R11,TBLOOKUP\n         LTR   R1,R1               ANY HITS?\n         BZ    CHEKVOLB            DSN NOT PROTECTED\n         XC    B4REQDSN,B4REQDSN   ELSE SET UP REQUESTER\n         ST    R1,B4RESDSN         AND SAVE DSN MASK\nSPECDSN  DS    0H\n         LA    R9,B4ENTCNT+2       GET ARGUMENT POINTER (EAN)\n         L     R4,8(,R3)           TOP OF SPECIFIC LIST\n         L     R7,12(,R3)          BOTTOM OF LIST\n         BAL   R11,TBLOOKUP\n         LTR   R1,R1               ANY HITS?\n         BZ    GENDSN              CHECK FOR GENERIC THEN\n         ST    R1,B4REQDSN         ELSE SAVE REQUESTER MASK\n         B     CHEKVOLB            AND CHECK VOLSER\nGENDSN   DS    0H\n         LA    R9,B4JOBNAM         GET GENERIC ARGUMENT\n         L     R4,16(,R3)          TOP OF GENERIC LIST\n         L     R7,20(,R3)          AND BOTTOM\n         BAL   R11,TBLOOKUP\n         LTR   R1,R1               ANY HITS?\n         BZ    CHEKVOLB            NO - CHECK VOLSERS\n         ST    R1,B4REQDSN         ELSE SAVE MASK\nCHEKVOLB DS    0H\n         LA    R2,8(,R2)           BUMP TO VOL LIST POINTER\n         EJECT\n**********************************************************************\n*                                                                    *\n* VOLUME SERIAL RESOURCES ARE CHECKED NEXT.                          *\n*                                                                    *\n**********************************************************************\nCHEKVOL  DS    0H\n         CLC   =C'VOL ',0(R2)      VOL TABLE ENTRIES?\n         BNE   CHEKEND             NO - NO VOLSERS TO CHECK\nRESVOL   DS    0H\n         ICM   R9,M15,B4VOLSER     GET ARGUMENT POINTER\n         BZ    CHEKEND             SHOULD NOT HAPPEN\n         L     R3,4(,R2)           VOL RESOURCE LIST POINTER\n         L     R4,0(,R3)           TOP OF LIST\n         L     R7,4(,R3)           AND BOTTOM OF LIST\n         BAL   R11,TBLOOKUP\n         LTR   R1,R1               ANY HITS?\n         BZ    CHEKEND             VOL NOT PROTECTED\n         XC    B4REQVOL,B4REQVOL   ELSE SET UP REQUESTER\n         ST    R1,B4RESVOL         AND SAVE VOL MASK\nSPECVOL  DS    0H\n         LA    R9,B4ENTCNT+2       GET ARGUMENT POINTER (EAN)\n         L     R4,8(,R3)           TOP OF SPECIFIC LIST\n         L     R7,12(,R3)          BOTTOM OF LIST\n         BAL   R11,TBLOOKUP\n         LTR   R1,R1               ANY HITS?\n         BZ    GENVOL              CHECK FOR GENERIC THEN\n         ST    R1,B4REQVOL         ELSE SAVE REQUESTER MASK\n         B     CHEKEND\nGENVOL   DS    0H\n         LA    R9,B4JOBNAM         GET GENERIC ARGUMENT\n         L     R4,16(,R3)          TOP OF GENERIC LIST\n         L     R7,20(,R3)          AND BOTTOM\n         BAL   R11,TBLOOKUP\n         LTR   R1,R1               ANY HITS?\n         BZ    CHEKEND             NO - CHECK VOLSERS\n         ST    R1,B4REQVOL         ELSE SAVE MASK\nCHEKEND  DS    0H\n         TITLE 'IEFDB401 - FILTER THE REQUEST AND EXIT TO SCHEDULER'\n**********************************************************************\n*                                                                    *\n* EXIT FILTERING IS DONE HERE.                                       *\n*                                                                    *\n**********************************************************************\nEXITFLTR DS    0H\n         LM    R8,R9,B4RESDSN      GET THE RESOURCE FLAGS\n         NR    R8,R9               AND WITH REQUESTR FLAGS\n         BZ    EXITFOUR            NOT AUTHORIZED IF ZERO\n         LM    R8,R9,B4RESVOL      GET THE RESOURCE FLAGS\n         NR    R8,R9               AND WITH REQUESTR FLAGS\n         BZ    EXITFOUR            NOT AUTHORIZED IF ZERO\nEXITZERO DS    0H\n         LA    R15,0             SET RETURN CODE = 0 - AUTHORIZED\n         B     EXIT\nEXITFOUR DS    0H\n         LA    R15,4             SET RETURN CODE = 4 - NOT AUTHORIZED\nEXIT     DS    0H\n         SPKA  SCHEDKEY(R0)        SET SCHEDULER KEY\n         L     R13,4(,R13)         UNCHAIN\n         RETURN (14,12),RC=(15)    RETURN TO SCHEDULER\n         TITLE 'IEFDB401 - SUBROUTINE FOR TABLE LOOK UP'\n**********************************************************************\n*                                                                    *\n* ROUTINE TO DO TABLE LOOKUP FOR FUNCTION ARGUMENTS.                 *\n*                                                                    *\n* /*                                                                 *\n* /* RESOURCE AND REQUESTER MASKS ARE INITIALIZED TO ONES. IF THE    *\n* /* RESOURCE IS FOUND TO BE PROTECTED, THE RESOURCE MASK WILL       *\n* /* REPLACE THE THE ONES OF THE RESOURCE MASK AND THE REQUESTERS    *\n* /* MASK IS ZEROED AND HIS ENTRY IS SEARCHED FOR. IF FOUND, HIS     *\n* /* MASK IS RETURNED ELSE IT IS LEFT AT ZERO.  IF RESOURCE IS NOT   *\n* /* FOUND ON THE LIST, BOTH MASKS ARE LEFT AT ONES.  TO HAVE        *\n* /* ACCESS TO THE RESOURCE REQUESTED, THE RESULTS OF A LOGICAL      *\n* /* AND OF THE RESOURCE AND REQUESTER MASKS MUST BE NON-ZERO. A     *\n* /* RESULT OF ZERO WILL CAUSE THE ALLOCATION REQUEST TO BE DENIED.  *\n* /*                                                                 *\n**********************************************************************\n* REGISTER USAGE: R1  RETURNS FUNCTION MASK\n*                 R4  POINTS TO START OF TABLE\n*                 R5  POINTS TO FUNCTION ENTRY\n*                 R6  HOLDS TABLE INCREMENT FOR BXLE\n*                 R7  POINT TO END OF TABLE\n*                 R8  HOLD FUNCTION LENGTH FOR EX INSTRUCTION\n*                 R9  POINTS TO ARGUMENT\n*                 R11 RETURN REGISTER\nTBLOOKUP DS    0H\n         SR    R8,R8               CLEAR REG 8\n         LA    R6,8                TABLE INCREMENT\nSRCLOOP  DS    0H\n         L     R5,0(,R4)           GET FUNCTION POINTER\n         IC    R8,0(,R5)           PICK UP LENGTH FOR EX INSTR\n         EX    R8,CLC\n         BE    FNDFUNCT\n         BXLE  R4,R6,SRCLOOP       AND LOOK SOME MORE\n         SR    R1,R1               NO MASK IF NOT FOUND\n         BR    R11                 AND RETURN TO CALLER\nCLC      CLC   1(0,R5),0(R9)          ARGUMENT:COMPARE\nFNDFUNCT DS    0H\n         L     R1,4(,R4)           GET FUNCTION MASK\n         BR    R11                 AND RETURN TO CALLER\n         TITLE 'IEFDB401 - CONSTANTS'\nSIPNAME  DC    C'&SYSPARM'         FUNCTION TABLE NAME\n         LTORG ,\n         TITLE 'IEFDB401 - DSECT FOR THE PASSED WORKAREA'\n         IEFZBMAP\n         TITLE 'IEFDB401 - CVT WITH PREFIX'\n         CVT   PREFIX=YES,DSECT=YES,LIST=YES\n         TITLE 'IEFDB401 - SVC99 PARAMETER LIST DSECT'\n         IEFZB4D0\n         TITLE 'IEFDB401 - SVC99 TEXT UNIT DSECT'\n         IEFZB4D2\n         TITLE 'IEFDB401 - ASCB DSECT'\n         IHAASCB\n         TITLE 'IEFDB401 - TCB DSECT'\n         IKJTCB LIST=YES\n         TITLE 'IEFDB401 - RB DSECT'\n         IHARB\n         TITLE 'IEFDB401 - CDE DSECT'\n         IHACDE\n         TITLE 'IEFDB401 - TSB DSECT'\n         IKJTSB LIST=YES\n         TITLE 'IEFDB401 - OUCB DSECT'\n         IRAOUCB\n         TITLE 'IEFDB401 - JSCB DSECT'\n         IEZJSCB\n         TITLE 'IEFDB401 - JCT/ACT DSECT'\nJCT      DSECT\nJCTPRFX  DS    4F          JCT PREFIX\n         IEFAJCTB\n         TITLE 'IEFDB401 - SCT DSECT'\nSCT      DSECT\nSCTPRFX  DS    4F          SCT PREFIX\n         IEFASCTB\n         TITLE 'IEFDB401 - END'\n         END\n/*\n//*\n//IEWL EXEC PGM=IEWL,\n// PARM='LIST,NCAL,XREF,LET,RENT,REUS'\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1),DCB=BUFNO=1\n//USEROBJ  DD DISP=SHR,DSN=LOCL.USEROBJ\n//SYSLMOD  DD DISP=SHR,DSN=SYS1.LPALIB,UNIT=3330-1,VOL=SER=RES1N4\n//SYSLIN   DD *\n        ORDER  IEFDB400\n        ORDER  IEFDB401\n        ORDER  IEFAB4F7\n        ORDER  IEFAB4F6\n        ORDER  IEFDB4F0\n        ORDER  IEFDB4FF\n        ORDER  IEFDB4FC\n        ORDER  IEFDB4FA\n        ORDER  IEFDB410\n        ORDER  IEFDB412\n        ORDER  IEFDB411\n        ORDER  IEFAB4DC\n        ORDER  IEFDB417\n        ORDER  IEFAB4E9\n        ORDER  IEFAB445\n        ORDER  IEFDB413\n        ORDER  IEFDB414\n        ORDER  IEFDB418\n        ORDER  IEFDB4FE\n        ORDER  IEFDB4F9\n        ORDER  IEFDB4F8\n        ORDER  IEEMB848\n        ORDER  IEFDB4FD\n        ORDER  IEFDB480\n        ORDER  IEFDB481\n        ORDER  IEFDB4A0\n        ORDER  IEFDB4A1\n        ORDER  IEFDB470\n        ORDER  IEFDB450\n        ORDER  IEFDB460\n        ORDER  IEFDB490\n        ORDER  IEFBB401\n        ORDER  IEFAB4FE\n        ORDER  IEFBB402\n        ORDER  IEFBB404\n        ORDER  IEFBB4M3\n        ORDER  IEFAB451\n        ORDER  IEFAB452\n        ORDER  IEFAB453\n        ORDER  IEFAB470\n        ORDER  IEFAB454\n        ORDER  IEFAB457\n        ORDER  IEFAB464\n        ORDER  IEFAB459\n        ORDER  IEFAB421\n        ORDER  IEFAB427\n        ORDER  IEFAB431\n        ORDER  IEFAB423\n        ORDER  IEFAB424\n        ORDER  IEFAB425\n        ORDER  IEFAB426\n        ORDER  IEFAB430\n        ORDER  IEFAB433\n        ORDER  IEFAB436\n        ORDER  IEFAB440\n        ORDER  IEFAB4F0\n        ORDER  IEFAB434\n        ORDER  IEFAB428\n        ORDER  IEFAB4FC\n        ORDER  IEFAB435\n        ORDER  IEFAB441\n        ORDER  IEFAB442\n        ORDER  IEFAB432\n        ORDER  IEFAB490\n        ORDER  IEFAB4F3\n        ORDER  IEFAB4FD\n        ORDER  IEFAB471\n        ORDER  IEFAB4FA\n        ORDER  IEFAB473\n        ORDER  IEFAB4M5\n        ORDER  IEFAB4F9\n        ORDER  IEFAB4F8\n        ORDER  IEFAB475\n        ORDER  IEFAB476\n        ORDER  IEFAB480\n        ORDER  IEFAB4F2\n        ORDER  IEFAB492\n        ORDER  IEFAB493\n        ORDER  IEFAB494\n        ORDER  IEFAB495\n        ORDER  IEFBB410\n        ORDER  IEFBB412\n        ORDER  IEFBB414\n        ORDER  IEFBB416\n        ORDER  IEFAB4EC\n        ORDER  IEFAB4A0\n        ORDER  IEFAB4A2\n        ORDER  IEFAB4SF\n        ORDER  IEFAB4A4\n        ORDER  IEFAB4A6\n        ORDER  IEFAB4A8\n        ORDER  IEFSGOPT\n        ORDER  IEFYRCDS\n        ORDER  IDACAT11\n        ORDER  IDACAT12\n        ORDER  IEEAB400\n        ORDER  IEEAB401\n        ORDER  IEFAB4A3\n        ORDER  IEFAB4B0\n        ORDER  IEFAB4B2\n        ORDER  IEFAB4DD\n        ORDER  IEFAB4DE\n        ORDER  IEFAB4EA\n        ORDER  IEFAB4EB\n        ORDER  IEFAB4ED\n        ORDER  IEFAB4EE\n        ORDER  IEFAB4EF\n        ORDER  IEFAB4EI\n        ORDER  IEFAB4E0\n        ORDER  IEFAB4E1\n        ORDER  IEFAB4E2\n        ORDER  IEFAB4E3\n        ORDER  IEFAB4E4\n        ORDER  IEFAB4E6\n        ORDER  IEFAB4E7\n        ORDER  IEFAB4E8\n        ORDER  IEFAB4F1\n        ORDER  IEFAB4F4\n        ORDER  IEFAB4F5\n        ORDER  IEFAB4M4\n        ORDER  IEFAB4M6\n        ORDER  IEFAB4M7\n        ORDER  IEFAB4M9\n        ORDER  IEFAB4UV\n        ORDER  IEFAB422\n        ORDER  IEFAB429\n        ORDER  IEFAB455\n        ORDER  IEFAB456\n        ORDER  IEFAB458\n        ORDER  IEFAB461\n        ORDER  IEFAB463\n        ORDER  IEFAB466\n        ORDER  IEFAB469\n        ORDER  IEFAB472\n        ORDER  IEFAB474\n        ORDER  IEFAB477\n        ORDER  IEFAB478\n        ORDER  IEFAB479\n        ORDER  IEFAB48A\n        ORDER  IEFAB481\n        ORDER  IEFAB485\n        ORDER  IEFAB486\n        ORDER  IEFAB487\n        ORDER  IEFAB488\n        ORDER  IEFAB489\n        ORDER  IEFAB49A\n        ORDER  IEFAB49B\n        ORDER  IEFAB49C\n        ORDER  IEFAB491\n        ORDER  IEFAB496\n        ORDER  IEFAB498\n        ORDER  IEFAB499\n        ORDER  IEFBB4M1\n        ORDER  IEFBB4M2\n        ORDER  IEFBB4M4\n        ORDER  IEFBB4M5\n        ORDER  IEFDB4FB\n        ORDER  IEFDB402\n        ORDER  IEFDB403\n        ORDER  IEFRPREP\n        ORDER  IEFSMF30\n        ORDER  IEFTB720\n        ORDER  IEFTB721\n        ORDER  IEFTB722\n        ORDER  IEFTB723\n        ORDER  IEFTB726\n        ORDER  IEFTB727\n        ORDER  IEFTB728\n        ORDER  IEFXVNSL\n        ALIAS  IEFAB4DC\n        ALIAS  IEFAB4EC\n        ALIAS  IEFAB4F4\n        ALIAS  IEFAB4F5\n        ALIAS  IEFAB4SF\n        ALIAS  IEFAB4UV\n        ALIAS  IEFAB445\n        ALIAS  IEFAB49C\n        ALIAS  IEFBB410\n        ALIAS  IEFTB723\n        ALIAS  IGC0009I\n        ENTRY  IEFBB401\n      INCLUDE  USEROBJ(IEFDB401)\n      INCLUDE  SYSLMOD(IEFW21SD)\n      SETCODE  AC(1)\n         NAME  IEFW21SD(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFZBMAP": {"ttr": 5128, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         IEFZBMAP\n* /*******************************************************************/\n* /*                         IEFZBMAP                                */\n* /*  MORE OF THE CODE THAT IBM DOESNT GIVE YOU -                    */\n* /*******************************************************************/\n* /*      USER WORK AREA MAP FOR IEFDB401 - 500 BYTES FURNISHED      */\n* /*******************************************************************/\nIEFZBMAP DSECT\nB4SAVE01 DS    18A        EXTERNAL REGISTER SAVE AREA\nB4SAVE02 DS    18A        INTERNAL REGISTER SAVE AREA\nB4WKAREA DS    0D         START OF WORKING AREA\nB4JOBNAM DS    CL8        USERID FROM ASCBJBNS IF TSUSER OR STC\n*                         JOBNAME FROM ASCBJBNI IF BATCH\nB4STPNAM DS    CL8        STEPNAME FROM SCTSNAME\nB4TERMID DS    CL8        LOGICAL TERMID FROM TSBTRMID\nB4LOGPRC DS    CL8        LOGON PROC FROM ASCBJBNS+8 IF TSUSER\nB4PGMNAM DS    CL8        PGMNAME FROM CDENAME IF LINK, LOAD, ETC.\n*                         PGMNAME FROM SCTPGMNM IF // EXEC PGM=\nB4RESDSN DS    F          RESULTS OF RESOURCE SEARCH - DSNAME\nB4REQDSN DS    F          RESULTS OF REQUESTR SEARCH - DSNAME\nB4RESVOL DS    F          RESULTS OF RESOURCE SEARCH - VOLSER\nB4REQVOL DS    F          RESULTS OF REQUESTR SEARCH - VOLSER\nB4VOLSER DS    F          POINTER TO VOLSER IF REQUESTED\nB4DSNAM  DS    F          POINTER TO DSNAME IF REQUESTED\nB4FLAG01 DS    X          FLAG SET 1\nB4DSN    EQU   X'80'      RESERVED\nB4VOL    EQU   X'40'      RESERVED\nB4TCAM   EQU   X'20'      A TCAM USER (MEANS REMOTE IN OUR SHOP)\nB4CALL   EQU   X'10'      CALLED BY ISPCALL OR IKJEFT02\nB4TSUSER EQU   X'08'      A TSO USER (TCAM OR VTAM)\nB4ISPF   EQU   X'04'      ALSO UNDER ISPF\nB4001    EQU   X'02'      RESERVED\nB4002    EQU   X'01'      RESERVED\nB4FLAG02 DS    X          FLAG SET 2\nB4003    EQU   X'80'      RESERVED\nB4004    EQU   X'40'      RESERVED\nB4005    EQU   X'20'      RESERVED\nB4006    EQU   X'10'      RESERVED\nB4007    EQU   X'01'      RESERVED\nB4008    EQU   X'02'      RESERVED\nB4009    EQU   X'04'      RESERVED\nB4010    EQU   X'08'      RESERVED\n         DS    H          RESERVED\nB4TIOTAD DS    F          POINTER TO TIOT FROM TCBTIO\n*        DS    F          RESERVED\nB4FIXEND EQU   *-B4WKAREA CALCULATE LENGTH TO CLEAR\nB4VARSTT DS    0C         START OF VARIABLE AREA\nB4ENTCNT DS    X          NUMBER OF VARIABLE ENTRIES FROM ACTJNFLD\n         DS    CL144      VARIABLE ENTRIES FROM ACTACCNT\n         MEND   , */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHAIQE": {"ttr": 5130, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         IHAIQE\n.********************************************************************\n.*/*    THIS IS THE IQE MAPPING MACRO SO THOUGHTLESSLY OMITTED BY   *\n.*/*    IBM IN THEIR DISTRIBUTION.                                  *\n.*/*                                                                *\n.*/*    CHANGE LOG:                                                 *\n.*/*       14 JAN 86 - FIRST CODED - M CRUZAN                       *\n.*/*                                                                *\n.********************************************************************\nIQE      DSECT\nIQESECT  EQU   *          , IQEPTR\nIQELNK   DS    0F         WORD REFERENCE FOR IQELNKA\nIQESTAT1 DS    X          RESERVED\nIQELNKA  DS    XL3        ADDRESS OF NEXT IQE\nIQEPARAM DS    F          PARMS TO BE PASSED TO ASYN EXIT ROUTINE\nIQEIRB   DS    0F         WORD REFERENCE FOR IQEIRBA\nIQEFLAGS DS    X          FLAG FIELD\nIQEPURGE EQU   X'80'      THIS IQE NOT TO BE SCHEDULED\nIQEIRBA  DS    XL3        ADDRESS OF IRB TO BE SCHEDULED\nIQETCB   DS    0F         WORD REFERENCE FOR IQETCBA\nIQESTAT2 DS    X          RESERVED\nIQETCBA  DS    XL3        ADDRESS OF TCB ASSOCIATED WITH THIS IQE\n*                         THE FOLLOWING FOR SMF\nIQEDCB   DS    F          ADDRESS OF DCB\nIQEOUTLM DS    F          ADDRESS OF OUTPUT LIMIT\nIQEEND   DS    X          END OF IQE\nIQELEN   EQU   IQEEND-IQESECT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHANVT": {"ttr": 5132, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         IHANVT\n***********************************************************************\n*                                                                     *\n*  THIS DSECT PROVIDES ADDRESSIBILITY TO THE NIP VECTOR TABLE         *\n*                                                                     *\n***********************************************************************\nNVT      DSECT\nNVTMSTCB EQU   NVT+X'038',4     NIP/MASTER SCHEDULER TCB\nNVTMASCB EQU   NVT+X'040',4     NIP/MASTER SCHEDULER ASCB\n*\nNVTFLSG  EQU   NVT+X'0D2',1\nNVTNPROT EQU   X'80'            PLPA PROTECT  1=YES/0=NO\nNVTSGPRT EQU   X'40'            SEGMENT PROTECT  1=YES/0=NO\n*\nNVTFLCN  EQU   NVT+X'0D3',1\nNVTFLAC  EQU   X'80'            ACTIVE MASTER CONSOLE\nNVTFLIOC EQU   X'40'            COMPOSITE MASTER\nNVTMP    EQU   X'20'            MP SYSTEM IPLED\nNVTFLASM EQU   X'10'            NVTNVRSZ VALUE INVALID\nNVTFLNHC EQU   X'08'            HARDCOPY DISCONTINUED\nNVTFLNCK EQU   X'04'            TOD CLOCK INOPERATIVE\nNVTFLRAC EQU   X'02'            WTOR REPLY OUTSTANDING\nNVTCLKER EQU   X'01'            TOD CLOCK WAS IN ERROR AT IPL AND\n*                                   HAS BEEN SET TO ZERO BY NIP\nNVTWTO   EQU   NVT+X'0FC',4     NIP WTO ROUTINE\nNVTWTOR  EQU   NVT+X'100',4     NIP WTOR ROUTINE\nNVTPARMA EQU   NVT+X'170',4     SYS1.PARMLIB PARAMETER LIST\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHASVC": {"ttr": 5134, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                11/83 DBC\n         IHASVC &D                                            11/83 DBC\nSVC      DSECT ,                                              11/83 DBC\nSVCENTRY DS    0XL8                SVC TABLE ENTRY            11/83 DBC\nSVCEP    DS    A                   A(SVC ROUTINE)             11/83 DBC\nSVCATTR1 DS    BL2                 ATTRIBUTES                 11/83 DBC\nSVCTP1   EQU   B'00000000'         TYPE 0                     11/83 DBC\nSVCTP2   EQU   B'10000000'         TYPE 2                     11/83 DBC\nSVCTP34  EQU   B'11000000'         TYPE 3/4                   11/83 DBC\nSVCTP6   EQU   B'00100000'         TYPE 6                     11/83 DBC\nSVCAPF   EQU   B'00001000'         CALLER MUST BE AUTHORIZED  11/83 DBC\nSVCESR   EQU   B'00000100'         \"ESR\" SVC                  11/83 DBC\nSVCNP    EQU   B'00000010'         NON-PREEMPTIVE SVC         11/83 DBC\nSVCLOCKS DS    BL2                 LOCK ATTRIBUTES            11/83 DBC\nSVCLL    EQU   B'10000000'         LOCAL LOCK                 11/83 DBC\nSVCCMS   EQU   B'01000000'         CMS LOCK                   11/83 DBC\nSVCOPT   EQU   B'00100000'         OPT LOCK                   11/83 DBC\nSVCALLOC EQU   B'00010000'         SALLOC LOCK                11/83 DBC\nSVCDISP  EQU   B'00001000'         DISP LOCK                  11/83 DBC\n         MEND                                                 11/83 DBC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IND$DAIR": {"ttr": 5136, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//NTS0991A JOB (0991,TAA),'* IND$DAIR *',MSGCLASS=X,CLASS=6,\n//  NOTIFY=NTS0991,MSGLEVEL=(1,1)\n//IEFUTL1 EXEC PGM=IEV90,\n// PARM='XREF,LIST,LINECOUNT(55)),DECK'\n//SYSPRINT DD SYSOUT=*\n//SYSPUNCH DD DISP=SHR,DSN=LOCL.USEROBJ(IND$DAIR)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.SMPMTS\n//         DD DISP=SHR,DSN=LOCL.USERSRC\n//         DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.HASPSRC,UNIT=3350,VOL=SER=DLB85A\n//         DD DISP=SHR,DSN=SYS1.AMODGEN,UNIT=3350,VOL=SER=DLB85A\n//         DD DISP=SHR,DSN=SYS1.AGENLIB,UNIT=3350,VOL=SER=DLB85A\n//         DD DISP=SHR,DSN=SYS1.ATSOMAC,UNIT=3350,VOL=SER=DLB85A\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSUT2   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSUT3   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSIN    DD *\n         TITLE 'IND$DAIR - LINKAGE AND HOUSEKEEPING'\nIND$DAIR CSECT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  MODULE CHARACTERISTICS:                                            *\n*        RE-ENTRANT, RESIDENT IN PLPA AND IN MLPA                     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*  NOTE:                                                              *\n*  EXPECT A RETURN CODE OF 4 ON ASSEMBLY BECAUSE OF ALIGNMENT.        *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*  BE SURE IND$FILE AND IKJEFT25 ARE AC(1). ZAP THE LINKS TO IKJDAIR  *\n*  IN IND$FILE TO IND$FILE.                                           *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*  THIS MODULE INTERCEPTS IKJDAIR IN CSECT INDFXFER IN LOAD MODULE    *\n*  IND$FILE OF THE FILE TRANSFER PRODUCT (HFX1102).  IT IS INTENDED   *\n*  TO PROVIDE AN AUDIT TRAIL FOR UP/DOWN LOADING TO/FROM THE MAIN-    *\n*  FRAME VIA THE 3270PC CONTROL PROGRAM. AN SMF TYPE 253 RECORD IS    *\n*  WRITTEN AND A ROUTE CODE 9 MESSAGE IS SENT TO SYSLOG.              *\n*                                                                     *\n*  ON ENTRY, REG1 POINTS TO THE DYNAMIC ALLOCATION PARAMETER LIST:    *\n*        DAPL:                                                        *\n*        @ UPT  - TSO USER PROFILE TABLE                              *\n*        @ ECT  - TSO ENVIRONMENT CONTROL TABLE                       *\n*        @ ECB  - DYNAMIC ALLOCATION EVENT CONTROL BLOCK              *\n*        @ PSCB - TSO PROTECTED STEP CONTROL BLOCK                    *\n*        @ DAPB - TSO DYNAMIC ALLOCATION PARAMETER BLOCK              *\n*                                                                     *\n*  ON EXIT:                                                           *\n*        DAIR CODE 00 IF ALLOCATION IS ACCEPTABLE.                    *\n*        DAIR CODE 34 IF REQUESTED BY NON-TSO USER.                   *\n*        DAIR CODE 34 IF SMF CANNOT RECORD THE EVENT.                 *\n*                                                                     *\n*  MACROS USED:                                                       *\n*        MODESET, TIME, SMFWTM, LINK                                  *\n*                                                                     *\n*  SVC 10 INVOKED DIRECTLY FOR GETMAIN/FREEMAIN                       *\n*                                                                     *\n*  MAPPING MACROS USED:                                               *\n*        CVT, IKJDAPL, IKJPSCB, IJKDAP08, IEESMCA, IHAASCB, IKJTSB    *\n*                                                                     *\n*  USER SMF TYPE 253 RECORD WRITTEN                                   *\n*                                                                     *\n*  UPDATE LOG:                                                        *\n*        16SEP85 - ORIGINALLY WRITTEN - M. CRUZAN.                    *\n*        19DEC85 - TESTED AND ACCEPTED FOR ALL SITES - M CRUZAN.      *\n*                                                                     *\n*  A NOTE ON TESTING; IND$FILE CP BEHAVES DIFFERENTLY IF INVOKED IN   *\n*  A TSO ENVIRONMENT FROM A 3270 THAN IF INVOKED FROM A PC RUNNING    *\n*  3270PC SOFTWARE.  TESTING IS ADEQUATE ONLY IF DONE USING A PC.     *\n*                                                                     *\n*                          MARV CRUZAN                                *\n*                          DEFENSE LOGISTICS AGENCY                   *\n*                          DLA SYSTEMS AUTOMATION CENTER              *\n*                          DSAC-TSG                                   *\n*                          P O BOX P1605                              *\n*                          COLUMBUS, OH  43216-5002                   *\n*                          (614) 238-9409                             *\n*                                                                     *\n***********************************************************************\nR0       EQU   0               LINKAGE REGISTER\nR1       EQU   1               LINKAGE REGISTER\nR2       EQU   2               WORK\nR3       EQU   3               POINTER TO ASCB/TSB\nR4       EQU   4               POINTER TO CVT/SMCA\nR5       EQU   5               POINTER TO PSCB\nR6       EQU   6               POINTER TO DAPB, MAPPED AS DAP08\nR7       EQU   7               RETURN CODE SETUP REGISTER\nM7       EQU   7               ICM MASK IF 24 BIT ADDRESSES\nR8       EQU   8               WORK\nR9       EQU   9               WORK\nR10      EQU   10              SMF RECORD GETMAINED WORK AREA\nR11      EQU   11              SAVE REG1 AROUND CALLS\nR12      EQU   12              STANDARD BASE REGISTER\nR13      EQU   13              SAVE AREA POINTER\nR14      EQU   14              RETURN REGISTER\nR15      EQU   15              LINKAGE REGISTER/RETURN CODE\nM15      EQU   15              ICM MASK IF 31 BIT ADDRESSES\n         EJECT\n         USING IND$DAIR,R15    ENTRY ADDRESSABILITY\n         B     DAIR00          BRANCH AROUND ID\n         DC    C'IND$DAIR.&SYSDATE..&SYSTIME' IDENTIFIER\nDAIR00   DS    0H\n         STM   R14,R12,12(R13) SAVE CALLERS REGS\n         DROP  R15             DROP ENTRY BASE REGISTER\n         LR    R12,R15         LOAD BASE REGISTER\n         USING IND$DAIR,R12    ESTABLISH ADDRESSABILITY\n         LA    R0,72           LOAD LENGTH FOR SAVE AREA\n         BAL   R1,*+4          INDICATE GETMAIN\n         SVC   10              ISSUE GETMAIN FOR MY SAVE AREA\n         ST    R13,4(R1)       STORE BACKWARD POINTER\n         ST    R1,8(R13)       STORE FORWARD POINTER\n         LR    R13,R1          POINT TO MY SAVE AREA\n         L     R1,4(R13)       RESTORE REG 1\n         L     R1,24(R1)       FOR PARAMETER LIST\n         XR    R15,R15         ZERO REG15 FOR RETURN CODE\n         TITLE 'IND$DAIR - SCREEN ALLOCATION REQUEST'\n***********************************************************************\n*                                                                     *\n*    THE CALLERS ALLOCATION REQUEST IS SCREENED HERE. CSECT INDFXFER  *\n*    IN LOAD MODULE IND$FILE (FILE TRANSFER PROGRAM) IS OCO AND       *\n*    DISASSEMBLY INDICATES ONLY ALLOCATION CODES 08 AND 24 (HEX) ARE  *\n*    CURRENTLY BEING USED. ALSO POSSIBLE FOR ALLOCATION ARE 0C AND    *\n*    1C. REF: SC28-1136-1 SECTION 10                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LR    R11,R1      SAVE DAPL FOR IKJDAIR CALL\n         USING DAPL,R1     ADDRESS PARAMETER LIST\n         L     R5,DAPLPSCB     GET PSCB POINTER\n         USING PSCB,R5     ADDRESS PROTECTED STEP CONTROL BLOCK\n         L     R6,DAPLDAPB     GET DAPB POINTER\n         USING DAPB08,R6   ADDRESS DYNAMIC ALLOCATION PARAMETER BLOCK\n         L     R4,16           GET THE CVT\n         USING CVT,R4          AND ADDRESS IT\n         L     R4,CVTSMCA      FIND SMCA\n         DROP  R4\n         USING SMCABASE,R4     AND ADDRESS IT\n         DROP  R1\n***********************************************************************\n*                                                                     *\n* DAPL CODES: X'00' TEST FOR DS/DDNAME                                *\n*             X'04' TEST FOR DSNAME                                   *\n*             X'08' ALLOCATE BY DSNAME                                *\n*             X'0C' CONCATENATE BY DDNAME                             *\n*             X'10' DECONCATENATE BY DDNAME                           *\n*             X'14' SEARCH FOR DSNAME QUALIFIERS                      *\n*             X'18' FREE DATASET                                      *\n*             X'1C' ALLOCATE DDNAME TO TERMINAL                       *\n*             X'24' ALLOCATE BY DDNAME/DSNAME                         *\n*             X'28' PERFORM LIST OF OPERATIONS                        *\n*             X'2C' MARK DATASET NOT IN USE                           *\n*             X'30' ALLOCATE SYSOUT                                   *\n*             X'34' ASSOCIATE DCB CHARACTERISTICS WITH A NAME         *\n* FROM: GUIDE TO WRITING A TMP.                                       *\n* DONT CONFUSE THESE CODES WITH SVC99 CODES.                          *\n*                                                                     *\n***********************************************************************\n         LH    R8,DA08CD       ALLOCATION REQUEST TYPE\n         CH    R8,=H'8'        REQUEST DSNAME?\n         BE    ALLOC0          - YES\n         CH    R8,=H'36'       REQUEST DSNAME OR DDNAME?\n         BE    ALLOC0          - YES\n         B     PASS3           OTHERWISE PASS ON THROUGH\n         TITLE 'IND$FILE - CHECK USERS REQUEST'\nALLOC0   DS    0H\n***********************************************************************\n*                                                                     *\n*    IF YOU WANT TO RESTRICT THE USER TO SPECIFIC \"STAGING\" DATASETS  *\n*    YOU CAN DO IT HERE. THIS BECAME QUITE A POLITICAL ISSUE WITH US  *\n*    AND MANAGEMENT DELETED THE REQUIREMENT. HOWEVER I STILL GOT THE  *\n*    LAST WORD BECAUSE I CAN CATCH ILLEGAL ALLOCATIONS IN IEFDB401.   *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         L     R3,548          GET CALLERS ASCB\n         USING ASCB,R3         AND ADDRESS\n         ICM   R3,M15,ASCBTSB  GET CALLERS TSB\n         BNZ   ALLOC1\n         B     EXIT1           EXIT WITH RC=34 IF NOT TSO USER\n         DROP  R3\n         USING TSB,R3          AND ADDRESS\n         TITLE 'IND$DAIR - FAIL USER IF WRONG REQUEST'\nALLOC1   DS    0H\n***********************************************************************\n*                                                                     *\n*    IF THE CALLER DOES NOT SPECIFY THE CORRECT DATA SET NAMES, HE    *\n*    WILL BE FAILED WITH A DAIR RETURN CODE OF 52 AFTER A MESSAGE     *\n*    HAS BEEN WRITTEN TO THE DSAC-LS SECURITY CONSOLE.                *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LA    R0,WTOLEN       GET WTO LENGTH\n         BAL   R1,*+4          INDICATE GETMAIN\n         SVC   10              GETMAIN FOR WTO\n         LR    R9,R1           SHIFT TO REG9\n         LA    R7,WTOLEN\n         BCTR  R7,0\n         EX    7,MVCWTO        MOVE WTO LIST PARAMETERS\n         TIME  DEC\n         SRL   R0,4            SHIFT TO 0HHMMSST\n         O     R0,=F'15'       OR TO 0HHMMSSF\n         ST    R0,60(R9)       STORE TIMESTAMP\n         UNPK  68(7,R9),60(4,R9) UNPACK HHMMSS\n         MVC   35(2,R9),69(R9)     MOVE IN HOURS\n         MVC   38(2,R9),71(R9)       MOVE IN MINUTES\n         MVC   41(2,R9),73(R9)         MOVE IN SECONDS\n         ST    R1,60(R9)       STORE DATESTAMP\n         UNPK  44(5,R9),61(3,R9) AND UNPACK YYDDD\n       MODESET KEY=ZERO,MODE=SUP\n         MVC   21(8,R9),TSBTRMID MOVE IN LOGICAL TERMINAL NAME\n       MODESET KEY=NZERO,MODE=PROB\n         MVC   13(7,R9),PSCBUSER MOVE USERID TO MSG\n         MVC   30(4,R9),SMCASID MOVE SYSID TO MSG\n         L     R8,DA08PDSN     GET CALLERS DSNAME\n         MVC   50(8,R9),DA08MNM MOVE MEMBER NAME TO MSG\n         MVC   59(44,R9),2(R8) MOVE USER DATASET NAME TO MSG\n         WTO   MF=(E,(9))\n         LA    R0,WTOLEN       GET WTO WORKAREA LENGTH\n         LR    R1,R9           AND POINT TO IT\n         SVC   10              AND FREE IT\n         TITLE 'IND$DAIR - BUILD SMF RECORD BEFORE LINK'\n         DS    0H\n***********************************************************************\n*                                                                     *\n*   THE PRELIMINARY PART OF THE SMF RECORD IS BUILT HERE.             *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         USING SMFFDREC,R10    ADDRESS GETMAINED AREA\n         LA    R0,SMFLENTH     LENGTH FOR SMF RECORD WORK AREA\n         BAL   R1,*+4          INDICATE GETMAIN\n         SVC   10              ISSUE GETMAIN FOR SMF RECORD WORK AREA\n         LR    R10,R1          SHIFT WORK AREA TO REG10\n         LR    R1,R11          RESTORE REG1\n         XC    SMFFDREC,SMFFDREC AND CLEAR IT\n         LA    R2,SMFLENTH     GET SMF REC LENGTH\n         STH   R2,SMFFDLEN     MOVE IN LENGTH\n         MVI   SMFFDFLG,B'00000010' SHOW VS2 SYSTEM\n         MVI   SMFFDRTY,SMFFDTYP INSTALL USER SMF RECORD TYPE\n         MVC   SMFFDSID,SMCASID MOVE IN THE SYSTEM ID\n         MVC   SMFFDUID,PSCBUSER MOVE IN USERID\n         MVI   SMFFDUID+7,BLANK EIGTH CHARACTER IS ALWAYS BLANK\n       MODESET KEY=ZERO,MODE=SUP\n         MVC   SMFFDTID,TSBTRMID INSTALL LOGICAL TERMINAL NAME\n       MODESET KEY=NZERO,MODE=PROB\n         MVC   SMFFDALC,DA08CD INDICATE TYPE ALLOCATION\n         MVC   SMFFDDSN,2(R8)   INSTALL NAME\n         MVC   SMFFDMNM,DA08MNM MOVE IN MEMBER NAME\n         TITLE 'IND$DAIR - PASS LINK THROUGH'\nPASS1    DS    0H              FORCE CERTAIN ALLOCATION PARAMETERS\n***********************************************************************\n*                                                                     *\n*    THE SMF RECORD IS TIME/DATE STAMPED AND WRITTEN TO THE SMF       *\n*    BUFFER.  BUT IF THE SMF RECORD CANNOT BE WRITTEN (IF RECORD-     *\n*    ING IS OFF, ETC.) THE ALLOCATION IS FAILED WITH RC52.            *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nPASS2    DS    0H              ACCEPT USER ALLOCATION PARAMETERS\n         LR    R1,R11          RESTORE REG1 WITH DAPL POINTER\n         LINK  EP=IKJDAIR      LINK TO ALLOCATION INTERFACE\n         LR    R7,R15          SAVE RETURN CODE FOR PASS-THROUGH\n         LTR   R15,R15         CHECK RETURN\n         BNZ   EXIT            AND RETURN IF SOMEBODY ELSE DISALLOWED\n       MODESET KEY=ZERO        GET INTO KEY ZERO\n         TIME  BIN,ZONE=LT     GET DATE/TIMESTAMP FOR SMF RECORD\n         STM   R0,R1,SMFFDTME  AND INSTALL IN SMF RECORD\n        SMFWTM (R10)           WRITE AUDIT TRAIL\n         LTR   R15,R15         TEST SMF COMPLETION\n         BNZ   EXIT1           AND EXIT WITH ERROR IF NOT DONE\n       MODESET KEY=NZERO       RESTORE CALLER KEY\n         LA    R0,SMFLENTH     GET SMF WORK AREA LENGTH\n         LR    R1,R10          LOAD RECORD ADDRESS FOR FREEMAIN\n         DROP  R10\n         SVC   10              AND FREE IT\n         LR    R1,R11          RESTORE CALLER PARAMETER REG\n         LA    R7,DAIRF000     SHOW GOOD COMPLETION\n         B     EXIT            AND LEAVE\n         TITLE 'IND$DAIR - EXIT CODE'\nPASS3    DS    0H              COME HERE USUALLY FOR DEALLOCATION\n         LR    R1,R11          RESTORE REG1 WITH DAPL POINTER\n         LINK  EP=IKJDAIR      LINK TO ALLOCATION INTERFACE\n         LR    R7,R15          SAVE RETURN CODE FOR PASS-THROUGH\n         B     EXIT            AND LEAVE\nEXIT1    DS    0H\n         LA    R7,DAIRF052     LOAD UP WITH DAIR FAIL CODE\n         B     EXIT\nEXIT     DS    0H\n         LR    R1,R13          POINT TO MY SAVE AREA\n         L     R13,4(R13)      POINT TO CALLERS SAVE AREA\n         ST    R7,16(R13)      INSTALL RETURN CODE IN SAVE AREA\n         LA    R0,72           LOAD LENGTH\n         SVC   10              ISSUE FREEMAIN\n         LM    R14,R12,12(R13) RESTORE REGISTERS\n         BR    R14             AND RETURN TO CALLER\n         TITLE 'IND$DAIR - CONSTANTS/EQUATES'\n         LTORG\nWTOLIST  WTO   'IND0001I UUUUUUU,TTTTTTTT,SSSS,HH:MM:SS,YYDDD,MMMMMMMM,C\n               DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD',          C\n               ROUTCDE=(9),DESC=(4),MF=L\nWTOLEN   EQU   *-WTOLIST\n         SPACE 3\nMVCWTO   MVC   0(0,R9),WTOLIST\n         SPACE 3\nSMFFDTYP EQU   253               SMF USER RECORD TYPE\nBLANK    EQU   X'40'\nSMFLENTH EQU   SMFFDEND-SMFFDLEN EQU TO REC LENGTH\nDAIRF000 EQU   0                 USER DAIR GOOD CODE\nDAIRF052 EQU   52                USER DAIR FAIL CODE\n         TITLE 'IND$DAIR - DSECTS AND DOCUMENTATION'\nSMFFDREC DSECT UNUSED PARTS FOR OFFSET COMPATIBILITY WITH TYPE 14/15\nSMFFDLEN DS    XL2             RECORD LENGTH (RDW)\nSMFFDSEG DS    XL2             SEGMENT DESCRIPTOR FOR VBS\nSMFFDFLG DS    XL1             FLAG FOR VS2=02\nSMFFDRTY DS    XL1             RECORD TYPE IS 253\nSMFFDTME DS    XL4             FROM TIME MACRO\nSMFFDDTE DS    XL4             FROM TIME MACRO\nSMFFDSID DS    XL4             SYSTEM ID FROM SMCA\n         DS    XL8             NOT USED\nSMFFDTID DS    XL8             USER LOGICAL TERMINAL ID FTOM TSB\nSMFFDUID DS    XL8             USER ID FROM PSCB\nSMFFDALC DS    XL2             ALLOCATION TYPE FROM DAPB\n         DS    XL24            NOT USED\nSMFFDDSN DS    XL44            DSNAME FROM DAPB\nSMFFDMNM DS    XL8             MEMBER NAME FROM DAPB\nSMFFDEND EQU   *\n         EJECT\n         IKJDAPL\n         EJECT\n         IKJPSCB\n         EJECT\n         IKJDAP08\n         EJECT\n         IEESMCA\n         EJECT\n         IHAASCB\n         EJECT\n         IKJTSB\n         EJECT\n         CVT   DSECT=YES\n         TITLE 'IND$DAIR - FOR DOCUMENTATION ONLY'\n         IKJDAP0C\n         EJECT\n         IKJDAP1C\n         EJECT\n         IKJDAP24\n         END\n/*\n//*\n//IEWL EXEC PGM=IEWL,\n// PARM='LIST,NCAL,XREF,LET'\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1),DCB=BUFNO=1\n//USEROBJ  DD DISP=SHR,DSN=LOCL.USEROBJ\n//SYSLMOD  DD DISP=SHR,DSN=LOCL.CMDLIB\n//SYSLIN   DD *\n   INCLUDE USEROBJ(IND$DAIR)\n   ENTRY IND$DAIR\n   SETCODE AC(1)\n NAME  IND$DAIR(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JCLIN": {"ttr": 5383, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ JCLIN .\n//IEECVXIT JOB 'CRUZAN-AUTOREPLY JCLIN'\n//* CHANGE JCLIN TO PAGE ALIGN IEECVXIT\n//A2       EXEC LINKS,NAME=LPALIB\n//AOSB3    DD DSN=SYS1.AOSB3,DISP=SHR\n//AOSC5    DD DSN=SYS1.AOSC5,DISP=SHR\n     ORDER IEAVVWTO(P),IEAVMWTO,IGC0203E,IEECVXIT(P)\n     INCLUDE AOSC5(IEAVVWTO,IEAVMWTO,IEECVXIT)\n     INCLUDE AOSB3(IGC0203E)\n     ENTRY IEAVVWTO\n     NAME IGC0003E(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NIPDPMLB": {"ttr": 5385, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         NIPDPMLB\n.*/********************************************************************\n.*/*                                                                  *\n.*/* THIS IS TO BE USED FOR READING SYS1.PARMLIB DURING IPL.          *\n.*/*                                                                  *\n.*/* BLDL IS DONE ONLY THE FIRST TIME THROUGH.                        *\n.*/*                                                                  *\n.*/* THIS CODE REQUIRES THE IEAPPNIP MAPPING MACRO.                   *\n.*/*                                                                  *\n.*/* INPUT:                                                           *\n.*/*    ENTRY BY BALR 14,15 TO NIPDPMLB,                              *\n.*/*    BASED ADDRESSING TO NVT AND CVT,                              *\n.*/*    REG14 IS RETURN REGISTER.                                     *\n.*/*                                                                  *\n.*/* OUTPUT:                                                          *\n.*/*    REG15 HAS RETURN CODE; 0 IS GOOD BLDL OR READ AFTER GOOD BLDL *\n.*/*                           4 IS NO BLDL,                          *\n.*/*                           8 IS BAD READ AFTER GOOD BLDL,         *\n.*/*    REG1 POINTER TO CARD IMAGE IF REG15 IS ZERO,                  *\n.*/*    REG1 IS ZEROED IF REG15 IS NON-ZERO (BAD READ),               *\n.*/*    REG11 IS DESTROYED.                                           *\n.*/*                                                                  *\n.*/* CHANGE LOG:                                                      *\n.*/*    09 JAN 86 - FIRST WRITTEN - M CRUZAN.                         *\n.*/*                                                                  *\n.*/********************************************************************\nNIPDPMLB DS    0H                                               DLA-MCC\n         L     R11,NVTPARMA     GET PARMLIB PARAMETER LIST      DLA-MCC\n         USING NIPPAREA,R11         AND ADDRESS IT              DLA-MCC\n         STM   R0,R15,SAVEREGS  SAVE OTHER REGS                 DLA-MCC\n*                                                               DLA-MCC\n         NOP   NIPTXTRD      **** ONE TIME NO-OP INSTRUCTION ***DLA-MCC\n         OI    *-3,X'F0'        THRU HERE ONLY THE FIRST TIME   DLA-MCC\n*                                                               DLA-MCC\n         LA    R1,NIPPADCB      GET PARMLIB DCB                 DLA-MCC\n         SH    R1,=H'44'            AND MAKE LEGITIMATE         DLA-MCC\n         LA    R0,NIPPABDL      GET BLDL WORK AREA              DLA-MCC\n         BLDL  (1),(0)              AND ISSUE                   DLA-MCC\n         LTR   R15,R15                                          DLA-MCC\n         BZ    NIPDGBDL         GO IF MEMBER WAS FOUND          DLA-MCC\n         LM    R0,R15,SAVEREGS  RESTORE CALLERS REGS            DLA-MCC\n         LA    R15,4            SHOW BAD RETURN CODE            DLA-MCC\n         BR    R14              AND RETURN TO CALLER            DLA-MCC\nNIPDGBDL DS    0H                                               DLA-MCC\n         ST    R15,NIPPARC      SAVE RETURN CODE                DLA-MCC\n         SLR   R0,R0            ZERO REG0                       DLA-MCC\n         ICM   R0,M7,NIPPATTR   MOVE TTR TO REG0                DLA-MCC\n         SLL   R0,8                 AND SHIFT LEFT ONE BYTE     DLA-MCC\n         LA    R1,NIPPADEB      GET PARMLIB DEB                 DLA-MCC\n         L     R15,CVTPCNVT     GET TTR CONVERT ROUTINE         DLA-MCC\n         STM   R2,R13,SAVEAREA  SAVE REGS                       DLA-MCC\n         LA    R2,NIPDMMBC      GET MY WORK AREA                DLA-MCC\n         LR    R6,R12           SAVE BASE AROUND CALL           DLA-MCC\n         BALR  R14,R15              AND GO CONVERT              DLA-MCC\n         LR    R12,R6           RESTORE BASE AFTER CALL         DLA-MCC\n         LM    R2,R13,SAVEAREA      AND RESTORE REGS            DLA-MCC\n         MVC   NIOBSEEK,NIPDMMBC MBBCCHHR TO PARMLIB IOB        DLA-MCC\n         MVC   NIPPASID,NIPDCCHH CCHHR TO SEARCH-ID             DLA-MCC\nNIPTXTRD DS    0H                                               DLA-MCC\n         XC    NIOBFLG1(4),NIOBFLG1 PREPARE                     DLA-MCC\n         XC    NIOBFLG3(8),NIOBFLG3         IOB FOR             DLA-MCC\n         XC    NIOBERCT,NIOBERCT                   NEW          DLA-MCC\n         MVC   NIOBSEEK+3(L'NIPPASID),NIPPASID        READ      DLA-MCC\n         LA    R1,NIPPAIOB                                      DLA-MCC\n         EXCP  (1)                                              DLA-MCC\n         LA    R1,NIPPAECB      WAIT FOR THE POSTMAN            DLA-MCC\n         WAIT  ECB=(1)                                          DLA-MCC\n         CLI   NIPPAECC,X'7F'   WAS IT A GOOD TRIP?             DLA-MCC\n         BE    NIPDGDRD         YES                             DLA-MCC\n         LM    R0,R15,SAVEREGS  RESTORE CALLERS REGS            DLA-MCC\n         SLR   R1,R1            ZERO REG1 TO SHOW BAD READ      DLA-MCC\n         LA    R15,8            SHOW BAD RETURN CODE            DLA-MCC\n         BR    R14              AND RETURN TO CALLER            DLA-MCC\nNIPDGDRD DS    0H                                               DLA-MCC\n         LM    R0,R15,SAVEREGS  RESTORE CALLERS REGS            DLA-MCC\n         LA    R1,NIPPARCD      POINT TO TEXT RECORD            DLA-MCC\n         LA    R15,0            SHOW GOOD RETURN                DLA-MCC\n         BR    R14              AND RETURN TO CALLER            DLA-MCC\n         SPACE 3                                                DLA-MCC\nSAVEREGS DS    16F    REG SAVE AREA AROUND PARMLIB READS        DLA-MCC\nSAVEAREA DS    12F    REG SAVE AREA AROUND TTR CONVERTION       DLA-MCC\nNIPDMMBC DS    0XL8   WORKAREA FOR CVTPCNVT ROUTINE             DLA-MCC\n         DS    XL3     : MBB                                    DLA-MCC\nNIPDCCHH DS    XL5     :    CCHHR                               DLA-MCC\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PLIBSMF0": {"ttr": 5388, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//NTA0991A JOB (0991,TAA),'* PLIBSMF0 *',MSGCLASS=X,CLASS=6,\n//  NOTIFY=NTA0991,MSGLEVEL=(1,1)\n//IEFUTL1 EXEC PGM=IEV90,\n// PARM='XREF,LIST,LINECOUNT(55)),DECK'\n//SYSPRINT DD SYSOUT=*\n//SYSPUNCH DD DISP=SHR,DSN=LOCL.USEROBJ(PLIBSMF0)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.SMPMTS\n//         DD DISP=SHR,DSN=LOCL.USERSRC\n//         DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.HASPSRC,UNIT=3350,VOL=SER=DLB85A\n//         DD DISP=SHR,DSN=SYS1.AMODGEN,UNIT=3350,VOL=SER=DLB85A\n//         DD DISP=SHR,DSN=SYS1.AGENLIB,UNIT=3350,VOL=SER=DLB85A\n//         DD DISP=SHR,DSN=SYS1.ATSOMAC,UNIT=3350,VOL=SER=DLB85A\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSUT2   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSUT3   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1\n//SYSIN    DD *\n         TITLE 'PLIBSMF0 - LINKAGE AND HOUSEKEEPING'\nPLIBSMF0 CSECT\n         SPACE 3\n         EJECT\nR0       EQU   0               LINKAGE REGISTER\nR1       EQU   1               LINKAGE REGISTER\nR2       EQU   2               WORK\nR3       EQU   3               POINTER TO ASCB\nR4       EQU   4               POINTER TO SMCA\nR5       EQU   5               POINTER TO TIOT\nR6       EQU   6               POINTER TO TSB\nR7       EQU   7               RETURN CODE SETUP REGISTER\nR8       EQU   8               WORK\nR9       EQU   9               WORK - ADDRESS CVT, SMCA\nR10      EQU   10              SMF RECORD GETMAINED WORK AREA\nR11      EQU   11              SAVE REG1 AROUND CALLS\nR12      EQU   12              STANDARD BASE REGISTER\nR13      EQU   13              SAVE AREA POINTER\nR14      EQU   14              RETURN REGISTER\nR15      EQU   15              LINKAGE REGISTER/RETURN CODE\n         EJECT\n         USING PLIBSMF0,R15    ENTRY ADDRESSABILITY\n         B     DAIR00          BRANCH AROUND ID\n         DC    C'PLIBSMF0.&SYSDATE..&SYSTIME' IDENTIFIER\nDAIR00   DS    0H\n         STM   R0,R14,SAVEAREA\n         DROP  R15             DROP ENTRY BASE REGISTER\n         LR    R12,R15         LOAD BASE REGISTER\n         USING PLIBSMF0,R12    ESTABLISH ADDRESSABILITY\n         SPACE 3\n         L     R4,16\n       USING CVT,R4\n         L     R4,CVTSMCA\n       DROP  R4\n       USING SMCABASE,R4             R4 = SMCA\n         L     R3,548\n       USING ASCB,R3                 R3 = ASCB\n         L     R5,ASCBTNEW\n       USING TCB,R5\n         L     R5,TCBTIO\n       DROP  R5\n       USING TIOT1,R5                R5 = TIOT\n         ICM   R6,R15,ASCBTSB\n       USING TSB,R6                  R6 = TSB\n         BNZ ALLOC1\n         EX    0,*      FAIL BATCH CALLERS WITH ABENDS0C3\n         TITLE 'PLIBSMF0 - CHECK USERS REQUEST'\nALLOC1   DS    0H\n         LA    R0,WTOLEN       GET WTO LENGTH\n         BAL   R1,*+4          INDICATE GETMAIN\n         SVC   10              GETMAIN FOR WTO\n         LR    R9,R1           SHIFT TO REG9\n         LA    R7,WTOLEN\n         BCTR  R7,0\n         EX    7,MVCWTO        MOVE WTO LIST PARAMETERS\n         TIME  DEC\n         SRL   R0,4            SHIFT TO 0HHMMSST\n         O     R0,=F'15'       OR TO 0HHMMSSF\n         ST    R0,60(R9)       STORE TIMESTAMP\n         UNPK  68(7,R9),60(4,R9) UNPACK HHMMSS\n         MVC   35(2,R9),69(R9)     MOVE IN HOURS\n         MVC   38(2,R9),71(R9)       MOVE IN MINUTES\n         MVC   41(2,R9),73(R9)         MOVE IN SECONDS\n         ST    R1,60(R9)       STORE DATESTAMP\n         UNPK  44(5,R9),61(3,R9) AND UNPACK YYDDD\n         MVC   59(16,R9),=C'ACCESSING FTTSO '\n       MODESET KEY=ZERO,MODE=SUP\n         MVC   21(8,R9),TSBTRMID MOVE IN LOGICAL TERMINAL NAME\n       MODESET KEY=NZERO,MODE=PROB\n         MVC   30(4,R9),SMCASID MOVE SYSID TO MSG\n         MVC   13(7,R9),TIOCNJOB MOVE IN JOB NAME\n         WTO   MF=(E,(9))\n         LA    R0,WTOLEN       GET WTO WORKAREA LENGTH\n         LR    R1,R9           AND POINT TO IT\n         SVC   10              AND FREE IT\n         EJECT\n         USING SMFFDREC,R10    ADDRESS GETMAINED AREA\n         LA    R0,SMFLENTH     LENGTH FOR SMF RECORD WORK AREA\n         BAL   R1,*+4          INDICATE GETMAIN\n         SVC   10              ISSUE GETMAIN FOR SMF RECORD WORK AREA\n         LR    R10,R1          SHIFT WORK AREA TO REG10\n         LR    R1,R11          RESTORE REG1\n         XC    SMFFDREC,SMFFDREC AND CLEAR IT\n         LA    R2,SMFLENTH     GET SMF REC LENGTH\n         STH   R2,SMFFDLEN     MOVE IN LENGTH\n         MVI   SMFFDFLG,B'00000010' SHOW VS2 SYSTEM\n         MVI   SMFFDRTY,SMFFDTYP INSTALL USER SMF RECORD TYPE\n         MVC   SMFFDSID,SMCASID MOVE IN THE SYSTEM ID\n         MVC   SMFFDUID,TIOCNJOB MOVE IN USERID\n         MVI   SMFFDUID+7,BLANK EIGTH CHARACTER IS ALWAYS BLANK\n       MODESET KEY=ZERO,MODE=SUP\n         MVC   SMFFDTID,TSBTRMID INSTALL LOGICAL TERMINAL NAME\n       MODESET KEY=NZERO,MODE=PROB\n         MVC   SMFFDALC,X'0000'\n         MVC   SMFFDDSN,=CL44' '   NO DATASET NAME\n         MVC   SMFFDMNM,=CL8'FTTSO' USE CALLER FOR MEMBER NAME\n         TITLE 'PLIBSMF0 - PASS LINK THROUGH'\nPASS1    DS    0H              FORCE CERTAIN ALLOCATION PARAMETERS\n       MODESET KEY=ZERO        GET INTO KEY ZERO\n         TIME  BIN,ZONE=LT     GET DATE/TIMESTAMP FOR SMF RECORD\n         STM   R0,R1,SMFFDTME  AND INSTALL IN SMF RECORD\n        SMFWTM (R10)           WRITE AUDIT TRAIL\n         LR    R7,R15          SAVE RETURN CODE\n       MODESET KEY=NZERO       RESTORE CALLER KEY\n         LA    R0,SMFLENTH     GET SMF WORK AREA LENGTH\n         LR    R1,R10          LOAD RECORD ADDRESS FOR FREEMAIN\n         DROP  R10\n         SVC   10              AND FREE IT\n         LTR   R7,R7           VERIFY THAT AUDIT RECORD IS WRITTEN\n         BZ    EXIT            IF SO, PROCEED\n         EX    0,*             NO WRITEE, NO RINGEE\n         TITLE 'PLIBSMF0 - EXIT CODE'\nEXIT     DS    0H\n         L     R15,PLISTART\n         LM    R0,R14,SAVEAREA\n         BR    R15\n         TITLE 'PLIBSMF0 - CONSTANTS/EQUATES'\n         LTORG\nWTOLIST  WTO   'IND0001I UUUUUUU,TTTTTTTT,SSSS,HH:MM:SS,YYDDD,        ,C\n               ACCESSING FTTSO UPLOAD/DOWNLOAD FACILITY',              C\n               ROUTCDE=(9),DESC=(4),MF=L\nWTOLEN   EQU   *-WTOLIST\n         SPACE 3\nMVCWTO   MVC   0(0,R9),WTOLIST\n         SPACE 3\n         DS    0F\n         DC    X'FFFFFFFF'\nPLISTART DC    V(PLISTART)    TOP OF PLI CODE\nSAVEAREA DS    15F\n         EJECT\nSMFFDTYP EQU   253               SMF USER RECORD TYPE\nBLANK    EQU   X'40'\nSMFLENTH EQU   SMFFDEND-SMFFDLEN EQU TO REC LENGTH\n         TITLE 'PLIBSMF0 - DSECTS AND DOCUMENTATION'\nSMFFDREC DSECT UNUSED PARTS FOR OFFSET COMPATIBILITY WITH TYPE 14/15\nSMFFDLEN DS    XL2             RECORD LENGTH (RDW)\nSMFFDSEG DS    XL2             SEGMENT DESCRIPTOR FOR VBS\nSMFFDFLG DS    XL1             FLAG FOR VS2=02\nSMFFDRTY DS    XL1             RECORD TYPE IS 253\nSMFFDTME DS    XL4             FROM TIME MACRO\nSMFFDDTE DS    XL4             FROM TIME MACRO\nSMFFDSID DS    XL4             SYSTEM ID FROM SMCA\n         DS    XL8             NOT USED\nSMFFDTID DS    XL8             USER LOGICAL TERMINAL ID FTOM TSB\nSMFFDUID DS    XL8             USER ID FROM PSCB\nSMFFDALC DS    XL2             ALLOCATION TYPE FROM DAPB\n         DS    XL24            NOT USED\nSMFFDDSN DS    XL44            DSNAME FROM DAPB\nSMFFDMNM DS    XL8             MEMBER NAME FROM DAPB\nSMFFDEND EQU   *\n         PRINT NOGEN\n         EJECT\n         IEFTIOT1\n         EJECT\n         IKJTCB\n         EJECT\n         IEESMCA\n         EJECT\n         IHAASCB\n         EJECT\n         IKJTSB\n         EJECT\n         CVT   DSECT=YES\n         END\n/*\n//IEWL EXEC PGM=IEWL,\n// PARM='LIST,XREF,LET'\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1),DCB=BUFNO=1\n//USEROBJ  DD DISP=SHR,DSN=LOCL.USEROBJ\n//SYSLMOD  DD DISP=SHR,DSN=LOCL.LINKLIB\n//SYSLIN   DD *\n   INSERT  PLIBSMF0\n     ORDER PLIBSMF0\n     ORDER PLISTART\n     ORDER PLIMAIN\n     ORDER FIL\n     ORDER SYSIN\n     ORDER SYSPINT\n     ORDER ***MAIN2\n     ORDER IELCGOC\n     ORDER IELCGMV\n     ORDER IELCGCL\n     ORDER ***MAIN1\n     ORDER NORSUB\n     ORDER NORALC\n     ORDER IBMBCAC1\n     ORDER IBMBCCC1\n     ORDER IBMBCH01\n     ORDER IBMBCW01\n     ORDER IBMBEOC1\n     ORDER IBMBMXS1\n     ORDER IBMBPIR1\n     ORDER IBMBSED1\n     ORDER IBMBCGT1\n     ORDER IBMBERR1\n     ORDER IBMBOCL1\n     ORDER IBMBRIO1\n     ORDER IBMBSAO1\n     ORDER IBMBSIO1\n     ORDER IBMBSLO1\n     ORDER IBMBSPL1\n     ORDER IBMBSXC1\n     ORDER IBMBEEF1\n     ORDER IBMBEER1\n   INCLUDE USEROBJ(PLIBSMF0)\n   INCLUDE SYSLMOD(FTTSO1)\n   SETCODE AC(1)\n   ALIAS   XMIT\n   NAME    FTTSO(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REQUESTR": {"ttr": 5636, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   REQUESTR\n         GBLA  &FLAG(32),&NRES\n         GBLB  &IND1,&IND2\n         GBLC  &NAME(32)\n         LCLA  &N,&N1,&LRS,&LRS1,&FLG(32),&G,&LRES,&NRES1\n         LCLC  &C1,&C2,&C3,&NX(32),&NY(32),&EMP,&EMP1\n.********************************************************************\n.* REF: LOCL.USERSRC(DLASIP00)                                      *\n.*      LOCL.USERSRC(IEFDB401)                                      *\n.*                                                                  *\n.*                     &FLAG IS THE RESOURCE FLAG                   *\n.*                     &NRES IS THE NUMBER OF RESOURCES INCLUDED    *\n.*                     &IND1 IS A RESOURCE MACRO HAS STARTED FLAG   *\n.*                     &IND2 IS A RESOURCE MACRO HAS COMPLETED FLAG *\n.*                     &NAME IS THE NAME OF THE RESOURCE            *\n.*                                                                  *\n.* CHANGE LOG:                                                      *\n.*      3 DEC 85 - FIRST WRITTEN, M C CRUZAN.                       *\n.*     11 DEC 85 - CHANGED \"ALL\" TO \"*\", M C CRUZAN.                *\n.*     18 DEC 85 - ADDED DOCUMENTATION, M C CRUZAN.                 *\n.*                                                                  *\n.********************************************************************\n         AIF   (N'&SYSLIST GT 32).TOMANY\n         AIF   (K'&LABEL LT 3 OR K'&LABEL GT 8).LABBAD\n         AIF   (&IND1 AND NOT &IND2).NOGOOD\n         AIF   (&NRES EQ 0).NORESO\n&NRES1   SETA  N'&SYSLIST       NUMBER OF REQUESTERS\n&C1      SETC  '&LABEL'(1,3)    REQUESTR NAME FOR ADCON\n&C2      SETC  '&LABEL'(1,4)    REQUESTR NAME\n&C3      SETC  '&LABEL'(1,3).'END'  TABEL END MARKER\n&LABEL   DS    0D      ALLIGN THE TABLE\n.*\n&N       SETA  0       REQUESTER COUNTER\n.*\n.*\n.LOOP1   ANOP  THIS LOOPS THRU THE LIST OF REQUESTERS\n&N       SETA  &N+1    INCREMENT TO NEXT REQUESTER\n         AIF   (&N GT N'&SYSLIST).ENDSCAN1 END OF REQUESTER LIST\n&N1      SETA  1       START WITH SECOND IN REQUEST LIST\n.*                     THE FIRST IS THE REQUESTER\n.*\n.*\n.LOOP2   ANOP  THIS LOOPS THRU THE LIST OF REQUESTS\n&N1      SETA  &N1+1   INCREMENT TO NEXT REQUEST\n         AIF   ('&SYSLIST(&N,&N1)' EQ '*').MARK  GETEM ALL\n         AIF   (&N1 GT N'&SYSLIST(&N)).LOOPX END OF REQUEST LIST\n&G       SETA  0       RESOURCE LIST\n.*\n.*\n.LOOP3   ANOP  THIS LOOPS THRU THE LIST OF RESOURCES\n&G       SETA  &G+1    INCREMENT TO NEXT RESOURCE\n         AIF   (&G GT &NRES).LOOP2 RESOURCE NOT FOUND ON LIST\n         AIF   ('&SYSLIST(&N,&N1)' NE '&NAME(&G)').LOOP3\n&FLG(&N) SETA  &FLG(&N)+&FLAG(&G) ACCUMULATE TO REQUESTERS FLAG BYTE\n         AGO   .LOOP2  GO TO NEXT REQUEST\n.*\n.MARK    ANOP\n&NX(&N)  SETC  '&C1'.'&N'\n         DC    A(&NX(&N)),X'FFFFFFFF'\n         AGO   .LOOP1  GET NEXT REQUESTR\n.*\n.LOOPX   ANOP\n&NX(&N)  SETC  '&C1'.'&N'\n         DC    A(&NX(&N)),A(&FLG(&N))\n         AGO   .LOOP1  GET NEXT REQUESTER\n.*\n.ENDSCAN1 ANOP\n&EMP1    SETC  '*-'.'&LABEL'\n&C3      EQU   &EMP1\n&N       SETA  0       SET COUNTER TO ZERO\n.OPN2    ANOP          START LOOP ONE\n&N       SETA  &N+1    INCREMENT COUNTER\n         AIF   (&N GT &NRES1).NDSCAN2 IF NO MORE OPERANDS\n&LRES    SETA  K'&SYSLIST(&N,1)-1\n&NX(&N)  DC    AL1(&LRES),C'&SYSLIST(&N,1)'\n         AGO   .OPN2\n.NDSCAN2 ANOP\n&IND1    SETB  0   RESET FLAGS TO SHOW\n&IND2    SETB  0   A GOOD COMPLETION\n         AGO   .ENDIT\n.*\n.TOMANY  MNOTE 8,'RESOURCE LIST TOO LONG - CANNOT EXCEED 32'\n         AGO   .ENDIT\n.LABBAD  MNOTE 8,'ERROR IN &LABEL'\n         MNOTE 0,'LABEL MUST BE AT LEAST 3 CHARACTERS LONG'\n         AGO   .ENDIT\n.NOGOOD  MNOTE 8,'ERROR IN PREVIOUS MACRO - SET NOGO'\n         MNOTE 0,'CHECK PRIOR MACRO EXPANSION'\n         AGO   .ENDIT\n.NORESO  MNOTE 8,'NO RESOURCE LIST FOUND - A VALID RESOURCE'\n         MNOTE 0,'LIST MUST IMMEDIATELY PRECEED REQUESTR LIST'\n         AGO   .ENDIT\n.ENDIT   ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RESOURCE": {"ttr": 5639, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   RESOURCE\n         GBLA  &FLAG(32),&NRES\n         GBLB  &IND1,&IND2\n         GBLC  &NAME(32)\n         LCLA  &ACON(32),&N,&CON,&LRES\n         LCLC  &C1,&C2,&C3,&NX(32),&NY(32),&EMP,&EMP1\n.********************************************************************\n.*  REF: LOCL.USERSRC(DLASIP00)                                     *\n.*       LOCL.USERSRC(IEFDB401)                                     *\n.*                                                                  *\n.*                     &FLAG IS THE RESOURCE FLAG                   *\n.*                     &NRES IS THE NUMBER OF RESOURCES INCLUDED    *\n.*                     &IND1 IS A RESOURCE MACRO HAS STARTED FLAG   *\n.*                     &IND2 IS A RESOURCE MACRO HAS COMPLETED FLAG *\n.*                     &NAME IS THE NAME OF THE RESOURCE            *\n.*                                                                  *\n.*   CHANGE LOG:                                                    *\n.*       2 DEC 85 - FIRST WRITTEN, M C CRUZAN.                      *\n.*      18 DEC 85 - ADDED DOCUMENTATION, M C CRUZAN.                *\n.*                                                                  *\n.********************************************************************\n         AIF   (&IND1 AND NOT &IND2).NOGOOD\n&IND1    SETB  1       SHOW RESOURCE MACRO HAS BEEN ENTERED\n&IND2    SETB  1       SHOW RESOURCE MACRO HAS BEEN ENTERED\n&NRES    SETA  N'&SYSLIST  NUMBER OF RESOURCES\n&N       SETA  0       SET COUNTER TO ZERO\n.CLR     ANOP\n&N       SETA  &N+1    INCREMENT COUNTER FOR CLEARING LOOP\n&FLAG(&N) SETA 0       NULL THE GLOBAL\n&NAME(&N) SETC ''      NULL THE GLOBAL\n         AIF   (&N EQ &NRES).CLRD\n         AGO   .CLR\n.CLRD    ANOP\n         AIF   (N'&SYSLIST GT 32).TOMANY TOO MANY RESOURCES\n         AIF   (K'&LABEL LT 3 OR K'&LABEL GT 8).LABBAD      EXIT\n&C1      SETC  '&LABEL'(1,3)    ADCON LABEL\n&C2      SETC  '&LABEL'(1,4)    RESOURCE NAME LABEL\n&C3      SETC  '&LABEL'(1,3).'END'\n&LABEL   DS    0D      ALLIGN THE TABLE\n&N       SETA  0       SET COUNTER TO ZERO\n&CON     SETA  1\n.OPN1    ANOP          START LOOP ONE\n&N       SETA  &N+1    INCREMENT COUNTER\n         AIF   (&N GT &NRES).NDSCAN1 IF NO MORE OPERANDS\n         AIF   (K'&SYSLIST(&N) GT 44).BADOP RESOURCE NAME TOO LONG\n&NAME(&N) SETC '&SYSLIST(&N)'\n&FLAG(&N) SETA &CON\n&NX(&N)  SETC  '&C1'.'&N'\n         DC    A(&NX(&N)),A(&FLAG(&N))\n&CON     SETA  &CON*2  INCREMENT FLAG\n         AGO   .OPN1   LOOP BACK\n.NDSCAN1 ANOP\n&EMP     SETC  '*-'.'&LABEL'\n&C3      EQU   &EMP\n&N       SETA  0       SET COUNTER TO ZERO\n&CON     SETA  1\n.OPN2    ANOP          START LOOP ONE\n&N       SETA  &N+1    INCREMENT COUNTER\n         AIF   (&N GT &NRES).NDSCAN2 IF NO MORE OPERANDS\n&LRES    SETA  K'&SYSLIST(&N)\n&LRES    SETA  &LRES-1\n&NX(&N)  DC    AL1(&LRES),C'&SYSLIST(&N)'\n         AGO   .OPN2\n.NDSCAN2 ANOP\n         AGO   .ENDIT\n.TOMANY  MNOTE 8,'RESOURCE LIST TOO LONG - CANNOT EXCEED 32'\n&IND2    SETB  0\n         AGO   .ENDIT\n.LABBAD  MNOTE 8,'ERROR IN &LABEL'\n         MNOTE 0,'LABEL MUST BE AT LEAST 3 CHARACTERS LONG'\n&IND2    SETB  0\n         AGO   .ENDIT\n.NOGOOD  MNOTE 8,'ERROR IN PREVIOUS MACRO - SET NOGO'\n         MNOTE 0,'CHECK PRIOR MACRO EXPANSION'\n&IND2    SETB  0\n         AGO   .ENDIT\n.BADOP   MNOTE 8,'ERROR IN &SYSLIST(&N)'\n         MNOTE 0,'OPERAND TOO LONG - CANNOT EXCEED 44'\n&IND2    SETB  0\n         AGO   .ENDIT\n.ENDIT   ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SMPFUNC": {"ttr": 5642, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "ZAPNIP": {"ttr": 5646, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD(TCMD001)  REWORK(1986039)  .\n++VER(Z038) FMID(JBB1329) VERSION(TCMD100)   /*\n ********************************************************************\n *                                                                  *\n *  THIS MAKES THE USER EXIT AVAILABLE TO NIP. SEE IEAVNP99 FOR     *\n *  DOCUMENTATION ON CODING ENTRIES TO THE TABLE. IF YOU HAVE ANY   *\n *  OEM MICROCODE ASSIST TYPE CODE, EXPECT TO DO A BYPASS(PRE).     *\n *                                                                  *\n *                              M CRUZAN                            *\n *                                                                  *\n ********************************************************************\n                            */  .\n++ZAP(IEAVNIPM) DISTLIB(AOSC5) .\n NAME IEAVNIPM\n VER 2FB8 4040,F0F0       /*   FIND AN EMPTY SLOT   */\n REP 2FB8 F9F9,F0F3       /*  FOR THE OPTIONAL MOD  */\n IDRDATA TCMD001\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZAPWTO": {"ttr": 5648, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD(TAMCS03) REWORK(1986038)  .\n++VER(Z038) FMID(JBB1329) PRE(UZ62090)      /*\n ********************************************************************\n *                                                                  *\n *  THIS CAUSES THE USER MCS EXIT TO SEE ALL CONSOLE TRAFFIC.       *\n *                                                                  *\n *                              M CRUZAN                            *\n *                                                                  *\n ********************************************************************\n                            */  .\n++ZAP(IEAVVWTO) DISTLIB(AOSC5) .\n NAME  IEAVVWTO\n VER 0578 917F,6002   /* TM  WPLMCSF1(REG6),B'01111111'  */\n VER 057C 4770,B614   /* BNZ @RF00452                    */\n REP 057C 4700,B614   /* NOP @RF00452                    */\n IDRDATA TAMCS03\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT405/FILE405.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT405", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}