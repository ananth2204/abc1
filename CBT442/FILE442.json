{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012036000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 940576, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 15, "INMDSNAM": "CBT.V500.FILE442.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 940576, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 940576, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE442.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x10\\x0c'", "DS1TRBAL": "b'm,'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03.\\x00\\x04\\x03/\\x00\\x05\\x00\\x11'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00\\x13\\x01\\x19&_\\x01\\x19&_\\x17B\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-09-22T00:00:00", "modifydate": "2019-09-22T17:42:13", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-498"}, "text": "REGULAR CBT TAPE - VERSION 498    FILE:  442\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT498.FILE442\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 54 MEMBERS COUNTED; CUMULATIVE SIZE IS 8,286 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   09/22/19    17:42:13    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x15\\x01\\x00\\x00o\\x01\\x19&_\\x17A\\x00\\x17\\x00\\x17\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-01-06T00:00:00", "modifydate": "2019-09-22T17:41:15", "lines": 23, "newlines": 23, "modlines": 0, "user": "KIMU"}, "text": "Subject:  I hoping contribute to the CBTTAPE\nDate:     Tue, 04 Jan 2000 22:56:31 +0900\nFrom:     Tetsuya Kimura <kimu@bigfoot.com>\nTo:       sbgolob@cbttape.org\n\n  Hi Sam,\n\n  I'm Tetsuya Kimura.\n\n  I received an e-mail request from from Sam Knutson.\n   and am hoping to contribute my program to the CBTTAPE.\n\n  For starters, I am sending a program which\n   restores a deleted member from a partitioned data set,\n     using a restoration utility.\n\n  I will send other programs soon too.\n\n                     Kimu__________________________..\n\n                     e-Mail : mailto:kimu@bigfoot.com\n                     http://home4.highway.ne.jp/kimu/\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#COMPILE": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x01\\x00\\x00\\x00\\x99'O\\x01\\x00\\x00O\\x069\\x000\\x000\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.01", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "2000-01-04T06:39:00", "lines": 48, "newlines": 48, "modlines": 0, "user": "KIMU"}, "text": "//KIMUA   JOB (ACCT#),CLASS=F,MSGCLASS=W,NOTIFY=KIMU\n//JOBCAT   DD  DSN=USER.CATALOG,DISP=SHR\n//A       PROC SM=,OM=\n//A       EXEC PGM=ASMA90,PARM=OBJECT\n//SYSIN    DD  DSN=KIMU.REV.CNTL(&SM.),DISP=SHR\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=KIMU.REV.CNTL,DISP=SHR\n//         DD  DSN=ISP.SISPSAMP,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  DUMMY\n//SYSPRINT DD  SYSOUT=*,DCB=(BLKSIZE=3509),\n//         UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DSN=KIMU.OBJLIB(&OM.),DISP=SHR\n//        PEND\n//* -----------------------------------------------------------------\n//BTH     EXEC PROC=A,SM=RV1#BTH,OM=RV1BTH\n//DLAC    EXEC PROC=A,SM=RV1#DALC,OM=RV1DALC\n//DARD    EXEC PROC=A,SM=RV1#DARD,OM=RV1DARD\n//DSI     EXEC PROC=A,SM=RV1#DSI,OM=RV1DSI\n//MAIN    EXEC PROC=A,SM=RV1#MAIN,OM=@RV#090\n//TC      EXEC PROC=A,SM=RV1#TC,OM=RV1TC\n//EXTR    EXEC PROC=A,SM=RV1#EXTR,OM=RV1EXTR\n//TRC     EXEC PROC=A,SM=RV1#TRC,OM=RV1TRC\n//* -----------------------------------------------------------------\n//L       EXEC PGM=HEWL,PARM='MAP,LET,LIST',\n//         REGION=1M\n//SYSLIN   DD  DDNAME=SYSIN\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,BLKSIZE=3509)\n//LINK     DD  DSN=ISP.SISPLOAD,DISP=SHR\n//OBJ      DD  DISP=SHR,UNIT=SYSDA,\n//         DSN=KIMU.OBJLIB\n//SYSLMOD  DD  DISP=SHR,UNIT=SYSDA,\n//         DSN=KIMU.LOADLIB\n//SYSIN    DD  *\n INCLUDE OBJ(@RV#090)\n INCLUDE LINK(ISPLINK)\n INCLUDE OBJ(RV1DALC)\n INCLUDE OBJ(RV1BTH)\n INCLUDE OBJ(RV1DSI)\n INCLUDE OBJ(RV1TC)\n INCLUDE OBJ(RV1DARD)\n INCLUDE OBJ(RV1EXTR)\n INCLUDE OBJ(RV1TRC)\n ENTRY   @RV#090\n NAME    @RV#1(R)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#COPY": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x01\\x00\\x00\\x00\\x99'O\\x01\\x00\\x00O\\x06E\\x001\\x001\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.01", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "2000-01-04T06:45:00", "lines": 49, "newlines": 49, "modlines": 0, "user": "KIMU"}, "text": "//FCOPY    JOB CLASS=F,MSGCLASS=W,NOTIFY=KIMU\n//JOBCAT   DD DSN=USER.CATALOG,DISP=SHR\n//* ---------------------------------------------------------------\n//* Modify your library.\n//* ---------------------------------------------------------------\n//SETUP   EXEC PGM=IEFBR14\n//DIST     DD DSN=KIMU.REV.CNTL,DISP=SHR    This Library\n//PANEL    DD DSN=KIMU.ISPPLIB,DISP=OLD     ISPF Panel Library\n//MSGS     DD DSN=KIMU.ISPMLIB,DISP=OLD     ISPF Messages Library\n//CLIST    DD DSN=KIMU.CLIST,DISP=OLD       TSO Clist Library\n//* ---------------------------------------------------------------\n//* Copy Process.\n//* ---------------------------------------------------------------\n//PANEL   EXEC PGM=IEBCOPY\n//SYSPRINT DD SYSOUT=*\n//DIST     DD DSN=*.SETUP.DIST,DISP=SHR,\n//         VOL=REF=*.SETUP.DIST\n//PANEL    DD DSN=*.SETUP.PANEL,DISP=SHR,\n//         VOL=REF=*.SETUP.PANEL\n//MSGS     DD DSN=*.SETUP.MSGS,DISP=SHR,\n//         VOL=REF=*.SETUP.MSGS\n//CLIST    DD DSN=*.SETUP.CLIST,DISP=SHR,\n//         VOL=REF=*.SETUP.CLIST\n//SYSIN    DD *\n COPY INDD=DIST,OUTDD=PANEL\n S M=((REV@ABO,,R))\n S M=((REV@ENTY,,R))\n S M=((REV@ENT2,,R))\n S M=((REV@EXTQ,,R))\n S M=((REV@EXTR,,R))\n S M=((REV@EXTW,,R))\n S M=((REV@EXT2,,R))\n S M=((REV@INFO,,R))\n S M=((REV@LST,,R))\n S M=((REV@MCHK,,R))\n S M=((REV@SHOW,,R))\n S M=((REV@WAIT,,R))\n S M=((REV@WRL,,R))\n COPY INDD=DIST,OUTDD=MSGS\n S M=((REVA00,,R))\n S M=((REVA01,,R))\n S M=((REVA99,,R))\n S M=((REVT00,,R))\n S M=((REV01,,R))\n S M=((REV02,,R))\n S M=((REV99,,R))\n COPY INDD=DIST,OUTDD=CLIST\n S M=((@REV,,R))\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#MAKETST": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00*\\x00*\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "KIMU"}, "text": "/* REXX */\ntrace n\noutdsn    = \"kimu.test.vdata\"\nmembers   = 50\nlines     = 100\norgs      = 3\n/* --------------------------- */\nrecfm.1     = 'V B'\nlrecl.1     = 2004\nblksize.1   = 8008\nmaxlength.1 = 2000\nminlength.1 = 100\n/* --------------------------- */\nrecfm.2     = 'F B'\nlrecl.2     = 80\nblksize.2   = 9040\nmaxlength.2 = 80\nminlength.2 = 80\n/* --------------------------- */\nrecfm.3     = 'V B'\nlrecl.3     = 32756\nblksize.3   = 32760\nmaxlength.3 = 32752\nminlength.3 = 10\n/* --------------------------- */\n\ndo mcntr = 1 to members\n  line. = ''\n  ls    = random(1,lines)\n  org   = random(1,orgs)\n  do lcntr = 1 to ls\n    wkMax = maxlength.org-(length(maxlength.org)+1)\n    wkMin = minlength.org-(length(maxlength.org)+1)\n    line.lcntr = copies('A',random(wkMin,wkMax))\n    line.lcntr = right(length(line.lcntr),5) || ' ' || line.lcntr\n  end\n  mem_name = 'M' || right(mcntr,7,'0')\n \"alloc f(out) da('\"outdsn\"(\"mem_name\")') old recfm(\"recfm.org\") \" ,\n \"      lrecl(\"lrecl.org\") blksize(\"blksize.org\")\"\n \"execio \"lines\" diskw out (finis stem line.\"\n \"free f(out)\"\nend\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#MEMBERS": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00$\\x00$\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "KIMU"}, "text": "#COMPILE : Program Compile\n#COPY    : Copy Panels, Messages and Clist\n#README  : This member\n#XMIT    : Create .XMI file\n#MAKETST : Test PDS File Create\n@REV     : CLIST\nREV@ABO  : ISPF PANEL\nREV@ENTY : ISPF PANEL\nREV@EXTQ : ISPF PANEL\nREV@EXTR : ISPF PANEL\nREV@EXT2 : ISPF PANEL\nREV@INFO : ISPF PANEL\nREV@LST  : ISPF PANEL\nREV@MCHK : ISPF PANEL\nREV@WAIT : ISPF PANEL\nREV@WRL  : ISPF PANEL\nREVA00   : ISPF MESSAGE\nREVA01   : ISPF MESSAGE\nREVA99   : ISPF MESSAGE\nREV01    : ISPF MESSAGE\nREV99    : ISPF MESSAGE\nRV1#ALCD : SOURCE\nRV1#BTH  : SOURCE\nRV1#COMM : SOURCE\nRV1#DALC : SOURCE\nRV1#DARD : SOURCE\nRV1#DSI  : SOURCE\nRV1#DTE  : SOURCE\nRV1#DTH  : SOURCE\nRV1#ETOP : SOURCE\nRV1#HDR  : SOURCE\nRV1#ISP  : SOURCE\nRV1#ISPC : SOURCE\nRV1#ISPV : SOURCE\nRV1#MAIN : SOURCE\nRV1#TC   : SOURCE\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#README": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x01\\x00\\x00O\\x01\\x00\\x01\\x7f\\x19H\\x00-\\x00\\x06\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2000-01-04T00:00:00", "modifydate": "2000-01-17T19:48:00", "lines": 45, "newlines": 6, "modlines": 0, "user": "KIMU"}, "text": "----- Revive! -----\n>> How to Install.\n   1. change #COMPILE member.\n     STEP A\n      - JOBCAT   : your user catalog\n      - SYSIN    : this library.\n      - SYSLIB+2 : this library.\n      - SYSLIB+3 : ispf macro library.\n      - SYSLIN   : your object library.\n     STEP L\n      - LINK     : ispf module library.\n      - OBJ      : your object library.\n      - SYSLMOD  : your module library.\n\n   2. submit #COMPILE member.\n\n   3. change @REV member.\n      - REVMOD   : your module library.\n      - RECPNL   : your panel library.\n      - REVMSG   : your messages library.\n      - ISPLOAD  : ispf module library.\n\n   4. change #COPY member.\n      - DIST     : this library.\n      - PANEL    : your ispf panel library.\n      - MSGS     : your ispf messages library.\n      - CLIST    : your tso clist library.\n\n   5. submit #COPY member.\n\n\n>> How to Start.\n   if CLIST LIBRARY concatination your logon procedure ?\n     - TSO @REV <enter>\n\n   or\n\n     - TSO EX 'clist.library(@REV)' <enter>\n\n\n--------------------------------------------------------------\n if you have any question ,\n   call to kimu@bigfoot.com    or\n           http://home4.highway.ne.jp/kimu/\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#XMIT": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x10\\x00\\x10\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "KIMU"}, "text": "//FSUPP17A JOB CLASS=F,MSGCLASS=W,NOTIFY=FSUPP17\n//XMIT    EXEC PGM=IKJEFT01\n//STEPCAT  DD DSN=TSOCAT,DISP=SHR\n//SYSIN    DD DUMMY\n//SYSOUT   DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSTSPRT DD SYSOUT=*\n//XMITFILE DD DSN=KIMU.REV.CNTL,DISP=SHR\n//XMITOUT  DD DSN=KIMU.REV.XMI,DISP=(,CATLG),\n//         UNIT=DASD,VOL=SER=FC9AI3,SPACE=(CYL,(10,1))\n//XMITLOG  DD SYSOUT=*\n//SYSTSIN  DD *\n PROFILE NOPREFIX\n XMIT DUMMY.DUMMY FILE(XMITFILE) -\n                  OUTFILE(XMITOUT) -\n                  NOLOG SEQ\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE442": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00\\x08\\x01\\x19&_\\x01\\x19&_\\x17B\\x00\\x11\\x00\\x11\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-09-22T00:00:00", "modifydate": "2019-09-22T17:42:08", "lines": 17, "newlines": 17, "modlines": 0, "user": "CBT-498"}, "text": "//***FILE 442 is from Tetsuya Kimura (Kimu) and contains his        *   FILE 442\n//*           REVIVE utility, which is a convenient way to          *   FILE 442\n//*           restore deleted pds members, under ISPF.              *   FILE 442\n//*                                                                 *   FILE 442\n//*           email:    Tetsuya Kimura <kimu@bigfoot.com>           *   FILE 442\n//*                                                                 *   FILE 442\n//*           You may be able to find more updated versions of      *   FILE 442\n//*           Kimu's utilities at his web site:                     *   FILE 442\n//*                                                                 *   FILE 442\n//*           Kimu has a lot of programs at his web site:           *   FILE 442\n//*                                                                 *   FILE 442\n//*           http://www.angelfire.com/ks2/kimu/index.html          *   FILE 442\n//*                                                                 *   FILE 442\n//*           This site is half in English and half in Japanese,    *   FILE 442\n//*           but the English part is more than adequate, and       *   FILE 442\n//*           you can get a lot of benefit from Kimu's programs.    *   FILE 442\n//*                                                                 *   FILE 442\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@REV": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00Y\\x00Y\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 89, "newlines": 89, "modlines": 0, "user": "KIMU"}, "text": "/* Revive! Startup                                           REXX\n   ---------------\n\n       Present : Kimu.\n       Update  : 1999.09.07\n\n*/\nparse upper arg dataset .\ntrace 'n'\nsignal on error name err_proc\n\n/*-------------------------------------------------------------------\n   Settings\n  -------------------------------------------------------------------*/\n  revtrc   = 'OFF'                  /* Trace mode : ON/OFF           */\n  revclass = '0'                    /* Trace report output class     */\n  revmod   = 'kimu.test.load'       /* Revive! Module library        */\n  revpnl   = 'kimu.test.panels'     /* Revive! Panel library         */\n  revmsg   = 'kimu.test.messages'   /* Revive! Panel library         */\n  ispload  = 'isp.sispload'         /* ISPF load library             */\n/*-------------------------------------------------------------------*/\n\naddress tso\n/* Module library */\n  select\n    when ispload = 'NONE' & revmod = 'NONE' then do\n      nop\n    end\n    when ispload = 'NONE' then do\n     \"alloc f(isplusr) da('\"revmod\"') shr reu\"\n      address ispexec \"LIBDEF ISPLLIB EXCLLIBR ID(ISPLUSR) COND\"\n    end\n    when revmod  = 'NONE' then do\n     \"alloc f(isplusr) da('\"ispload\"') shr reu\"\n      address ispexec \"LIBDEF ISPLLIB EXCLLIBR ID(ISPLUSR) COND\"\n    end\n    otherwise\n     \"alloc f(isplusr) da('\"ispload\"','\"revmod\"') shr reu\"\n      address ispexec \"LIBDEF ISPLLIB EXCLLIBR ID(ISPLUSR) COND\"\n  end\n\n/* Panel library */\n  if revpnl = 'NONE' then\n    nop\n  else do\n   \"alloc f(isppusr) da('\"revpnl\"') shr reu\"\n    address ispexec \"LIBDEF ISPPLIB LIBRARY  ID(ISPPUSR) COND\"\n  end\n\n/* Message library */\n  if revmsg = 'NONE' then\n    nop\n  else do\n   \"alloc f(ispmusr) da('\"revmsg\"') shr reu\"\n    address ispexec \"LIBDEF ISPMLIB LIBRARY  ID(ISPMUSR) COND\"\n  end\n\n/* Trace List */\n \"alloc f(revtrc)  sysout(\"revclass\") reu\"\n\naddress ispexec\n \"VPUT (REVTRC) ASIS\"\n\n \"SELECT PGM(@RV#1) PARM(\"dataset\")\"\n\n \"LIBDEF ISPLLIB EXCLLIBR\"\n \"LIBDEF ISPPLIB LIBRARY\"\n \"LIBDEF ISPMLIB LIBRARY\"\n \"VERASE REVTRC BOTH\"\naddress tso\n  x = outtrap('a.')\n \"free f(isplusr,isppusr,revtrc)\"\n  x = outtrap('off')\n exit\n\nerr_proc:\naddress ispexec\n \"LIBDEF ISPLLIB EXCLLIBR\"\n \"LIBDEF ISPPLIB LIBRARY\"\n \"LIBDEF ISPMLIB LIBRARY\"\n \"VERASE REVTRC BOTH\"\naddress tso\n  x = outtrap('a.')\n \"free f(isplusr,isppusr,revtrc)\"\n  x = outtrap('off')\n  say\n  say\n  say '>> OS000 Initial process Abnormal Ended ....      Bye !!'\n  say\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REV@ABO": {"ttr": 537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x15\\x00\\x15\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "KIMU"}, "text": ")ATTR\n   $ type(text  ) intens(high) caps(off) color(yellow) hilite(uscore)\n   + type(text  ) intens(low ) caps(off) color(turq)\n   # type(text  ) intens(low ) caps(off) color(blue)  hilite(reverse)\n   _ type(input ) intens(high) caps(off) just(left )\n   ! type(text  ) intens(low ) caps(off) color(yellow)\n   @ type(text)   intens(high) caps(off)             color(yellow)\n)BODY WINDOW(40,12)\n%=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n+\n+ #Revive!+\n+   Revive Member\n+             of Deleted or Updated.\n+\n+             Version 0.9\n+\n+\n+\n+              Press Enter to Continue.\n%=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REV@ENTY": {"ttr": 539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00I\\x00I\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 73, "newlines": 73, "modlines": 0, "user": "KIMU"}, "text": ")Attr\n   % type(text  ) intens(high) caps(off)\n   ` type(text  ) intens(high) caps(off)             hilite(reverse)\n   @ type(text)   intens(high) caps(off)             color(yellow)\n   ~ type(text)   intens(high) caps(off)             color(turq)\n   + type(text  ) intens(low )\n   _ type(input ) intens(high) caps(off) just(left )\n   ^ type(input ) intens(high) caps(on ) just(left ) hilite(uscore)\n   \\ type(input ) intens(high) caps(on ) just(right) hilite(uscore)\n   \u00b5 type(input ) intens(high) caps(off) just(left ) hilite(uscore)\n   $ area(scrl)\n)Body  Expand(//)\n`Revive!%: Bring Back to PDS Members .. < &rvv > -/-/-\n%Command ===>_zcmd                                                / / +\n$sarea                                                                         $\n$                                                                              $\n$                                                                              $\n$                                                                              $\n$                                                                              $\n$                                                                              $\n$                                                                              $\n$                                                                              $\n$                                                                              $\n$                                                                              $\n$                                                                              $\n$                                                                              $\n$                                                                              $\n$                                                                              $\n$                                                                              $\n$                                                                              $\n$                                                                              $\n$                                                                              $\n$                                                                              $\n$                                                                              $\n)Area sarea\n@ Type Your Revive Dataset ..\n+   Dataset Name  :^rv1dsn                                        +\n+     (if Not Cataloged) Volume Serial :^rv1vol+    --------------------------\n+                                                  | Version :~&rvv          +|\n+   Select Option                                  | Fix     :~&revd         +|\n+    - Analysis range :^z+ ( N or O )              | Compile :~&revc         +|\n+      N : Data changed after the last compress.   | Trace   :~&revtrc       +|\n+      O : All assigned tracks.                     --------------------------\n+\n+    - Existent member is effective, too. :^z+ ( Y:yes or N:no )\n+\n+    - Disposition of the target file. :^z+ ( S:shr O:old )\n+\n+    - Search String . ( BLANK or Search string )\n+         :\u00b5rv1sstr                                                  +\n+\n+    - Directory Table Work Space Size ? ( This field disappears soon )\n+         :\\z    + ( nnnnn:Member )\n+\n)Init\n  .cursor = rv1dsn\n  .zvars = '(rv1exto rv1addc rv1disp rv1tbsp)'\n)proc\n  &dschk = trunc(&rv1dsn,1)\n  if (&dschk = '''')\n    &dsrm = .trail\n    &dsrm2 = trunc(&dsrm,'''')\n    IF (&dsrm2 = &dsrm)\n      &rv1dsn = '&rv1dsn&dschk'\n  ver (&rv1dsn,nb,dsname)\n  if ( &rv1vol \u00ac= ' ' )\n    ver (&rv1vol,len,EQ,6)\n  ver (&rv1exto,nb,list,N,O)\n  ver (&rv1addc,nb,list,Y,N)\n  ver (&rv1disp,nb,list,S,O)\n  ver (&rv1tbsp,nb,num)\n  ver (&rv1tbsp,range,1,65535)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REV@ENT2": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x005\\x005\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 53, "newlines": 53, "modlines": 0, "user": "KIMU"}, "text": ")Attr\n   % type(text  ) intens(high) caps(off)\n   ` type(text  ) intens(high) caps(off)             hilite(reverse)\n   @ type(text)   intens(high) caps(off)             color(yellow)\n   ~ type(text)   intens(high) caps(off)             color(turq)\n   + type(text  ) intens(low )\n   _ type(input ) intens(high) caps(off) just(left )\n   ^ type(input ) intens(high) caps(on ) just(left ) hilite(uscore)\n   \\ type(input ) intens(high) caps(on ) just(right) hilite(uscore)\n   \u00b5 type(input ) intens(high) caps(off) just(left ) hilite(uscore)\n)Body  Expand(//)\n`Revive!%: Bring Back to PDS Members .. < &rvv > -/-/-\n%Command ===>_zcmd                                                / / +\n+\n@ Type Your Restore Dataset ..\n+   Dataset Name  :^rv1dsn                                        +\n+     (if Not Cataloged) Volume Serial :^rv1vol+    --------------------------\n+                                                  | Version :~&rvv          +|\n+   Select Option                                  | Fix     :~&revd         +|\n+     o Scan Area of Lose PDS Members ?            | Compile :~&revc         +|\n+         :^z+ ( N:Normal, O:Over DS1LSTAR field )  --------------------------\n+\n+     o Append Current Member ?\n+         :^z+ ( Y.N )\n+\n+     o Restore Dataset Disposition ?\n+         :^z+ ( S:shr O:old )\n+\n+     o Directory Table Work Space Size ?\n+         :\\z    + ( nnnnn:Member )\n+\n+     o Search String .. ( BLANK or Search String )\n+         :\u00b5rv1sstr                                                  +\n+\n)Init\n  .cursor = rv1dsn\n  .zvars = '(rv1exto rv1addc rv1disp rv1tbsp)'\n)proc\n  &dschk = trunc(&rv1dsn,1)\n  if (&dschk = '''')\n    &dsrm = .trail\n    &dsrm2 = trunc(&dsrm,'''')\n    IF (&dsrm2 = &dsrm)\n      &rv1dsn = '&rv1dsn&dschk'\n  ver (&rv1dsn,nb,dsname)\n  if ( &rv1vol \u00ac= ' ' )\n    ver (&rv1vol,len,EQ,6)\n  ver (&rv1exto,nb,list,N,O)\n  ver (&rv1addc,nb,list,Y,N)\n  ver (&rv1disp,nb,list,S,O)\n  ver (&rv1tbsp,nb,num)\n  ver (&rv1tbsp,range,1,65535)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REV@EXTQ": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x1c\\x00\\x1c\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "KIMU"}, "text": ")ATTR\n   $ type(text  ) intens(high) caps(off) color(yellow) hilite(uscore)\n   + type(text  ) intens(low ) caps(off) color(turq)\n   # type(text  ) intens(low ) caps(off) color(blue)  hilite(reverse)\n   _ type(input ) intens(high) caps(off) just(left )\n   \\ type(text  ) intens(low ) caps(off) color(yellow)\n   @ type(text)   intens(high) caps(off)             color(yellow)\n)BODY WINDOW(50,19)\n%=#Revive!%=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n+\n+\\This Member is over the DS1LSTAR line.+\n+\n+  This Member can't do RESTORE.\n+  You will have the new member whom you newly\n+   were able to write in have had done overwrite,\n+   if you did RESTORE for this member.\n+\n+  If you want to Revive this member, I changed\n+   your RESTORE request into EXTRACT.\n+\n+  EXTRACT considers this member as a new dataset\n+   and begins writing it for another dataset.\n+\n+  EXTRACT :$Press ENTER+\n+  cancel  :$PF03+\n+\n%=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REV@EXTR": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00.\\x00.\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "KIMU"}, "text": ")Attr\n   % type(text  ) intens(high) caps(off)\n   ` type(text  ) intens(high) caps(off)              hilite(reverse)\n   @ type(text)   intens(high) caps(off) color(yellow)\n   ~ type(text)   intens(high) caps(off) color(turq)\n   + type(text  ) intens(low )\n   _ type(input ) intens(high) caps(off) just(left )\n   ^ type(input ) intens(high) caps(on ) color(red  ) hilite(uscore)\n   | type(input ) intens(low ) caps(on ) color(blue ) hilite(uscore)\n   \\ type(input ) intens(high) caps(on ) just(right)  hilite(uscore)\n   \u00b5 type(input ) intens(high) caps(off) just(left )  hilite(uscore)\n)Body  Expand(//) window(73,17)\n`Revive!%: Bring Back to PDS Members : EXTRACT < &rvv > -/-/-\n%Command ===>_zcmd                                                / / +\n@ Type extraction dataset information.\n+   Dataset name        :^rv1eds                                        +\n+    Member name        :^rv1emn  +(If PDS required)\n+    Volume serial      :^rv1evo+\n+    Space units        :^z  +(CYL, TRK or BLK)\n+    Primary quantity   :^z    +(1 - 4369 or 1 - 65535)\n+    Secondary quantity :^z    +(0 - 4369 or 0 - 65535)\n+    Directory blocks   :^z    +(0 - 4369)  <0 for non PDS file>\n+    Record format      :|z  +(F, V, U, B, S...)\n+    Record length      :|z    +(0 - 32760)\n+    Block size         :|z    +(1 - 32760)\n+\n+  This member have &rv1erec records. I can make &rv1trkc blocks per\n+   1 track of dataset, as if create new dataset same disk type.\n+  Please input a more than &rv1cspt spaces at least.\n)Init\n  .zvars = '(rv1esp rv1esq1 rv1esq2 rv1espd rv1erf rv1erl rv1ebs)'\n  vget (rv1erec rv1trkc rv1cspt) profile\n)Proc\n  ver(&rv1eds,nb,dsname)\n  ver(&rv1evo,pict,cccccc)\n  ver(&rv1esp,nb,list,TRK,CYL,BLK)\n  if (&rv1esp = 'CYL')\n    ver(&rv1esq1,nb,range,1,4369)\n    ver(&rv1esq2,nb,range,0,4369)\n  else\n    ver(&rv1esq1,nb,range,1,65535)\n    ver(&rv1esq2,nb,range,0,65535)\n  ver(&rv1espd,nb,range,0,4369)\n  if (&rv1espd \u00ac= '0')\n    ver(&rv1emn,nb,name)\n)End\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REV@EXTW": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x13\\x00\\x13\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "KIMU"}, "text": ")ATTR\n   $ type(text  ) intens(high) caps(off) color(yellow) hilite(uscore)\n   + type(text  ) intens(low ) caps(off) color(turq)\n   # type(text  ) intens(low ) caps(off) color(blue)  hilite(reverse)\n   _ type(input ) intens(high) caps(off) just(left )\n   \\ type(text  ) intens(low ) caps(off) color(yellow)\n   @ type(text)   intens(high) caps(off)             color(yellow)\n)BODY WINDOW(36,10)\n%=#Revive!%=-=-=-=-=-=-=-=-=-=-=-=-=\n+\n+\\I feel like DCB's being wrong.+\n+\n+  do you continue the process?\n+\n+  CONTINUE :$Press ENTER+\n+  CANCEL   :$PF03+\n+\n%=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REV@EXT2": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00C\\x00C\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 67, "newlines": 67, "modlines": 0, "user": "KIMU"}, "text": ")Attr\n   % type(text  ) intens(high) caps(off)\n   ` type(text  ) intens(high) caps(off)              hilite(reverse)\n   @ type(text)   intens(high) caps(off) color(yellow)\n   ~ type(text)   intens(high) caps(off) color(turq)\n   + type(text  ) intens(low )\n   _ type(input ) intens(high) caps(off) just(left )\n   ^ type(input ) intens(high) caps(on ) color(red  ) hilite(uscore)\n   \\ type(input ) intens(high) caps(on ) just(right)  hilite(uscore)\n   \u00b5 type(input ) intens(high) caps(off) just(left )  hilite(uscore)\n   | area(scrl)\n)Body  Expand(//) window(73,20)\n`Revive!%: Bring Back to PDS Members : EXTRACT < &rvv > -/-/-\n%Command ===>_zcmd                                                / / +\n@ Type extraction dataset information.\n|window                                                                 |\n|                                                                       |\n|                                                                       |\n|                                                                       |\n|                                                                       |\n|                                                                       |\n|                                                                       |\n|                                                                       |\n|                                                                       |\n|                                                                       |\n|                                                                       |\n|                                                                       |\n|                                                                       |\n|                                                                       |\n|                                                                       |\n|                                                                       |\n|                                                                       |\n)Area window\n+   Dataset name        :^rv1eds                                        +\n+    Member name        :^rv1emn  +(If PDS required)\n+    Volume serial      :^rv1evo+\n+    Space units        :^z  +(CYL, TRK or BLK)\n+    Primary quantity   :^z    +(1 - 4369 or 1 - 65535)\n+    Secondary quantity :^z    +(0 - 4369 or 0 - 65535)\n+\n+  This member have &rv1erec records. I can make &rv1trkc blocks per\n+   1 track of dataset, as if create new dataset same disk type.\n+   Please input a more than &rv1cspt spaces at least.\n+\n+    Directory blocks   :^z    +(0 - 4369)  <0 for non PDS file>\n+\n+    Record format      :^z  +(F, V, U, B, S...)\n+    Record length      :^z    +(0 - 32760)\n+    Block size         :^z    +(1 - 32760)\n+\n)Init\n  .zvars = '(rv1esp rv1esq1 rv1esq2 rv1espd rv1erf rv1erl rv1ebs)'\n  vget (rv1erec rv1trkc rv1cspt) profile\n)Proc\n  ver(&rv1eds,nb,dsname)\n  ver(&rv1evo,pict,cccccc)\n  ver(&rv1esp,nb,list,TRK,CYL,BLK)\n  if (&rv1esp = 'CYL')\n    ver(&rv1esq1,nb,range,1,4369)\n    ver(&rv1esq2,nb,range,0,4369)\n  else\n    ver(&rv1esq1,nb,range,1,65535)\n    ver(&rv1esq2,nb,range,0,65535)\n  ver(&rv1espd,nb,range,0,4369)\n  if (&rv1espd \u00ac= '0')\n    ver(&rv1emn,nb,name)\n)End\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REV@INFO": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\\\\\x00\\\\\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 92, "newlines": 92, "modlines": 0, "user": "KIMU"}, "text": ")Attr default(\u00a5+_)\n   ` type(text  ) intens(high) caps(off)             hilite(reverse)\n   \u00a5 type(text  ) intens(high) caps(off) color(blue) hilite(reverse)\n   + type(text  ) intens(low )\n   _ type(input ) intens(high) caps(off) just(left )\n   \u00ac type(output) intens(low ) caps(off) just(asis ) color(blue)\n   @ type(text)   intens(low ) caps(off)\n   \\ type(text)   intens(low ) caps(off)\n   $ type(text)   intens(low ) caps(off)\n)Body  Expand(//) window(71,19)\n`Revive!-ABRACADABRA\u00a5: Bring back to members .. < &osv > -/-/-\n+ DataSet Name :\u00aci#dsn                                       +\n+                       m b b c  c h h r       Extent (High)    (Low)\n+  ------------  Addr :\u00aco#asp             +      1 :\u00aco#l1    \u00aco#h1    +\n+ |@Directory +| blks :\u00aco#dblk            +      2 :\u00aco#l2    \u00aco#h2    +\n+  ------------  Addr :\u00aco#adp             +      3 :\u00aco#l3    \u00aco#h3    +\n+ |\\Data      +|       (\u00aco#adp2+)                4 :\u00aco#l4    \u00aco#h4    +\n+ |\\ ( Used ) +|                                 5 :\u00aco#l5    \u00aco#h5    +\n+  ------------  Addr :\u00aco#aup             +      6 :\u00aco#l6    \u00aco#h6    +\n+ |$Data      +|       (\u00aco#aup2+)                7 :\u00aco#l7    \u00aco#h7    +\n+ |$( UnUsed )+|                                 8 :\u00aco#l8    \u00aco#h8    +\n+  ------------  Addr :\u00aco#aep             +      9 :\u00aco#l9    \u00aco#h9    +\n+                      (\u00aco#aep2+)               10 :\u00aco#l10   \u00aco#h10   +\n+ Recfm   : \u00aco#recfm +   Member     :\u00aco#mem+    11 :\u00aco#l11   \u00aco#h11   +\n+ Lrecl   : \u00acb#lrecl +   Allocated  :\u00aco#alc+TRK 12 :\u00aco#l12   \u00aco#h12   +\n+ Blksize : \u00acb#blksz +   Use        :\u00aco#use+%   13 :\u00aco#l13   \u00aco#h13   +\n+ DevType : \u00aco#devt  +   Creation   :\u00aco#cre+    14 :\u00aco#l14   \u00aco#h14   +\n+ Serial  : \u00acrv1tvol +   Expiration :\u00aco#exp+    15 :\u00aco#l15   \u00aco#h15   +\n+ Extent  : \u00aco#ext   +   Sys Code   :\u00aco#syscd + 16 :\u00aco#l16   \u00aco#h16   +\n)init\n   vget (rv1prc)\n   if (&rv1prc = 'DIR')\n     .attrchar('@') = 'intens(high) color(yellow) hilite(reverse)'\n     .attrchar('\\') = 'intens(low ) color(blue)    '\n     .attrchar('$') = 'intens(low ) color(blue)    '\n   if (&rv1prc = 'USE')\n     .attrchar('@') = 'intens(low ) color(blue)    '\n     .attrchar('\\') = 'intens(high) color(yellow) hilite(reverse)'\n     .attrchar('$') = 'intens(low ) color(blue)    '\n   if (&rv1prc = 'UNU')\n     .attrchar('@') = 'intens(low ) color(blue)    '\n     .attrchar('\\') = 'intens(low ) color(blue)    '\n     .attrchar('$') = 'intens(high) color(yellow) hilite(reverse)'\n   if (&rv1extc = '1')\n     .attr(o#l1) = 'color(yellow) hilite(reverse)'\n     .attr(o#h1) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '2')\n     .attr(o#l2) = 'color(yellow) hilite(reverse)'\n     .attr(o#h2) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '3')\n     .attr(o#l3) = 'color(yellow) hilite(reverse)'\n     .attr(o#h3) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '4')\n     .attr(o#l4) = 'color(yellow) hilite(reverse)'\n     .attr(o#h4) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '5')\n     .attr(o#l5) = 'color(yellow) hilite(reverse)'\n     .attr(o#h5) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '6')\n     .attr(o#l6) = 'color(yellow) hilite(reverse)'\n     .attr(o#h6) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '7')\n     .attr(o#l7) = 'color(yellow) hilite(reverse)'\n     .attr(o#h7) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '8')\n     .attr(o#l8) = 'color(yellow) hilite(reverse)'\n     .attr(o#h8) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '9')\n     .attr(o#l9) = 'color(yellow) hilite(reverse)'\n     .attr(o#h9) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '10')\n     .attr(o#l10) = 'color(yellow) hilite(reverse)'\n     .attr(o#h10) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '11')\n     .attr(o#l11) = 'color(yellow) hilite(reverse)'\n     .attr(o#h11) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '12')\n     .attr(o#l12) = 'color(yellow) hilite(reverse)'\n     .attr(o#h12) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '13')\n     .attr(o#l13) = 'color(yellow) hilite(reverse)'\n     .attr(o#h13) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '14')\n     .attr(o#l14) = 'color(yellow) hilite(reverse)'\n     .attr(o#h14) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '15')\n     .attr(o#l15) = 'color(yellow) hilite(reverse)'\n     .attr(o#h15) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '16')\n     .attr(o#l16) = 'color(yellow) hilite(reverse)'\n     .attr(o#h16) = 'color(yellow) hilite(reverse)'\n)end\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REV@LST": {"ttr": 784, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x001\\x001\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 49, "newlines": 49, "modlines": 0, "user": "KIMU"}, "text": ")Attr default(%+_)\n   % type(text   ) intens(high) caps(off)\n   + type(text   ) intens(low )\n   _ type(input  ) intens(high) caps(on ) just(left )\n   ^ type(input  ) intens(high) caps(on ) just(left ) hilite(uscore)\n   ` type(text   ) intens(high) caps(off)             hilite(reverse)\n   @ type(text   ) intens(high) caps(off)             color(white )\n   # type(text   ) intens(high) caps(off)             color(yellow)\n   \u00ac type(output ) intens(low ) caps(on ) just(asis ) color(blue)\n   ~ type(output ) intens(low ) caps(off) just(right) color(blue)\n   \\ type(input  ) intens(low ) caps(on ) just(asis ) color(turq)\n   \u00a2 type(text   ) intens(low ) caps(on ) just(asis ) color(turq)\n/*                                                                   */\n/*Attribute Used.                                                    */\n/* ATTR_CUR(x'01') : Current Exist Member                            */\n/* ATTR_REC(x'02') : Lost of Directory Chain ( Recoveryable Member ) */\n/* ATTR_EXT(x'03') : Over DS1LSTAR ( Last Used Address )             */\n/* ATTR_BDR(x'07') : DS1LSTAR Border Line                            */\n/*                                                                   */\n/* ATTR_DOK(x'08') : Valid Record.                                   */\n/* ATTR_DNG(x'09') : Data Record No-Good. ( Invalid Record Contain ) */\n/*                                                                   */\n/* ATTR_ERR(x'04') : Line Command Process Error                      */\n/* ATTR_MRK(x'05') : End of Line Mark                                */\n/* ATTR_INP(x'06') : Line Input Field                                */\n/*                                                                   */\n  01 type(datain ) intens(low ) color(blue  ) /* Current Exist  */\n  02 type(datain ) intens(low ) color(turq  ) /* Recoveryable   */\n  03 type(datain ) intens(low ) color(white ) /* Extent Recov   */\n  04 type(datain ) intens(high) color(yellow) /* Process Error  */\n  05 type(dataout) intens(low ) color(blue  ) /* End of Line Mark */\n  06 type(datain ) intens(low ) color(red   ) hilite(uscore) caps(on)\n  07 type(datain ) intens(low ) color(pink  ) /* Border Line    */\n  08 type(dataout) intens(low ) color(blue  ) /* Valid Records.   */\n  09 type(dataout) intens(low ) color(white ) /* Invalid Records. */\n  90 type(dataout) intens(high) color(white ) /* Invalid Records. */\n   | area(dynamic) scroll(on)  extend(on)\n   \u00b5 area(dynamic) scroll(off) extend(off)\n)Body  Expand(//)\n`Revive!%: Bring Back to PDS Members .. < &rvv > -/-/-\n%Command ===>_zcmd                                 / /%Scroll ===>_amt +\n%\n+ DataSet Name :\u00acrv1dsnc                                     + Vol :\u00acrv1tvol\n@ Line Command : #B@- Browse   #S@- Show   #R@- Restore   #X@- eXtract\n\u00b5rv1dttl                                                                       \u00b5\n|rv1darea                                                                      |\n)Init\n  &amt = csr\n)End\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REV@MCHK": {"ttr": 786, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x14\\x00\\x14\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "KIMU"}, "text": ")Attr\n   % type(text  ) intens(high) caps(off)\n   ` type(text  ) intens(high) caps(off)              hilite(reverse)\n   @ type(text)   intens(high) caps(off) color(yellow)\n   ~ type(text)   intens(high) caps(off) color(turq)\n   + type(text  ) intens(low )\n   _ type(input ) intens(high) caps(off) just(left )\n   ^ type(input ) intens(high) caps(on ) color(red  ) hilite(uscore)\n   | type(input ) intens(low ) caps(on ) color(blue ) hilite(uscore)\n   \\ type(input ) intens(high) caps(on ) just(right)  hilite(uscore)\n   \u00b5 type(input ) intens(high) caps(off) just(left )  hilite(uscore)\n)Body  Expand(//) window(36,5)\n`Revive!%: Member check < &rvv > -\n%Command ===>_zcmd       / / +\n@ Invalid Member Name.\n+    Member name :^rv1emn  +\n)Init\n)Proc\n  ver(&rv1emn,nb,name)\n)End\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REV@SHOW": {"ttr": 788, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x000\\x000\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 48, "newlines": 48, "modlines": 0, "user": "KIMU"}, "text": ")Attr default(%+_)\n   % type(text   ) intens(high) caps(off)\n   + type(text   ) intens(low )\n   _ type(input  ) intens(high) caps(on ) just(left )\n   ^ type(input  ) intens(high) caps(on ) just(left ) hilite(uscore)\n   ` type(text   ) intens(high) caps(off)             hilite(reverse)\n   @ type(text   ) intens(high) caps(off)             color(white )\n   # type(text   ) intens(high) caps(off)             color(yellow)\n   \u00ac type(output ) intens(low ) caps(on ) just(asis ) color(blue)\n   ~ type(output ) intens(low ) caps(off) just(right) color(blue)\n   \\ type(input  ) intens(low ) caps(on ) just(asis ) color(turq)\n   \u00a2 type(text   ) intens(low ) caps(on ) just(asis ) color(turq)\n/*                                                                   */\n/*Attribute Used.                                                    */\n/* ATTR_CUR(x'01') : Current Exist Member                            */\n/* ATTR_REC(x'02') : Lost of Directory Chain ( Recoveryable Member ) */\n/* ATTR_EXT(x'03') : Over DS1LSTAR ( Last Used Address )             */\n/* ATTR_BDR(x'07') : DS1LSTAR Border Line                            */\n/*                                                                   */\n/* ATTR_DOK(x'08') : Valid Record.                                   */\n/* ATTR_DNG(x'09') : Data Record No-Good. ( Invalid Record Contain ) */\n/*                                                                   */\n/* ATTR_ERR(x'04') : Line Command Process Error                      */\n/* ATTR_MRK(x'05') : End of Line Mark                                */\n/* ATTR_INP(x'06') : Line Input Field                                */\n/*                                                                   */\n  01 type(datain ) intens(low ) color(blue  ) /* Current Exist  */\n  02 type(datain ) intens(low ) color(turq  ) /* Recoveryable   */\n  03 type(datain ) intens(low ) color(white ) /* Extent Recov   */\n  04 type(datain ) intens(high) color(yellow) /* Process Error  */\n  05 type(dataout) intens(low ) color(blue  ) /* End of Line Mark */\n  06 type(datain ) intens(low ) color(red   ) hilite(uscore) caps(on)\n  07 type(datain ) intens(low ) color(pink  ) /* Border Line    */\n  08 type(dataout) intens(low ) color(blue  ) /* Valid Records.   */\n  09 type(dataout) intens(low ) color(white ) /* Invalid Records. */\n  90 type(dataout) intens(high) color(white ) /* Invalid Records. */\n   | area(dynamic) scroll(on)  extend(on)\n   \u00b5 area(dynamic) scroll(off) extend(off)\n)Body  Expand(//)\n`Revive!%: Show! <&rv1dsnc.(&rv1name.)> -/-/-\n%Command ===>_zcmd                                 / /%Scroll ===>_amt +\n+\n@ Recfm+:_z  + @Lrecl+:_z    + @Blksz+:_z    +\n|rv1sarea                                                                      |\n)Init\n  &amt = csr\n  .zvars = '(rv1srfm rv1slrl rv1sbsz)'\n)End\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REV@WAIT": {"ttr": 790, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00]\\x00]\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 93, "newlines": 93, "modlines": 0, "user": "KIMU"}, "text": ")Attr default(\u00a5+_)\n   ` type(text  ) intens(high) caps(off)             hilite(reverse)\n   \u00a5 type(text  ) intens(high) caps(off) color(blue) hilite(reverse)\n   + type(text  ) intens(low )\n   _ type(input ) intens(high) caps(off) just(left )\n   \u00ac type(output) intens(low ) caps(off) just(asis ) color(blue)\n   \u00b5 type(output) intens(low ) caps(off) just(left ) color(blue)\n   @ type(text)   intens(low ) caps(off)\n   \\ type(text)   intens(low ) caps(off)\n   $ type(text)   intens(low ) caps(off)\n)Body  Expand(//) window(66,19)\n`Revive!-ABRACADABRA\u00a5: Bring back to members .. < &osv > -/-/-\n+DataSet Name :\u00acrv1dsnc                                     +\n+                      m b b c  c h h r   Extent (Low)    (High)\n+ ------------  Addr :\u00aco#asp             +  1 :\u00aco#l1    \u00aco#h1    +\n+|@Directory +| blks :\u00b5o#dblk+              2 :\u00aco#l2    \u00aco#h2    +\n+ ------------  Addr :\u00aco#adp             +  3 :\u00aco#l3    \u00aco#h3    +\n+|\\Data      +|       (\u00aco#adp2+)            4 :\u00aco#l4    \u00aco#h4    +\n+|\\ ( Used ) +|                             5 :\u00aco#l5    \u00aco#h5    +\n+ ------------  Addr :\u00aco#aup             +  6 :\u00aco#l6    \u00aco#h6    +\n+|$Data      +|       (\u00aco#aup2+)            7 :\u00aco#l7    \u00aco#h7    +\n+|$( UnUsed )+|                             8 :\u00aco#l8    \u00aco#h8    +\n+ ------------  Addr :\u00aco#aep             +  9 :\u00aco#l9    \u00aco#h9    +\n+                     (\u00aco#aep2+)           10 :\u00aco#l10   \u00aco#h10   +\n+Recfm   :\u00acz  +    Member     :\u00b5o#mem +    11 :\u00aco#l11   \u00aco#h11   +\n+Lrecl   :\u00b5z     + Alloc Trk  :\u00b5o#alc+     12 :\u00aco#l12   \u00aco#h12   +\n+Blksize :\u00b5z     + Used%      :\u00b5z  +       13 :\u00aco#l13   \u00aco#h13   +\n+DevType :\u00aco#devt+ Creation   :\u00aco#cre +    14 :\u00aco#l14   \u00aco#h14   +\n+Serial  :\u00acz     + Expiration :\u00aco#exp +    15 :\u00aco#l15   \u00aco#h15   +\n+Extent  :\u00b5o#ext + Sys Code   :\u00aco#syscd +  16 :\u00aco#l16   \u00aco#h16   +\n)init\n  .zvars = '(o#recfm b#lrecl b#blksz o#use rv1tvol)'\n   if (&rv1prc = 'DIR')\n     .attrchar('@') = 'intens(high) color(yellow) hilite(reverse)'\n     .attrchar('\\') = 'intens(low ) color(blue)    '\n     .attrchar('$') = 'intens(low ) color(blue)    '\n   if (&rv1prc = 'USE')\n     .attrchar('@') = 'intens(low ) color(blue)    '\n     .attrchar('\\') = 'intens(high) color(yellow) hilite(reverse)'\n     .attrchar('$') = 'intens(low ) color(blue)    '\n   if (&rv1prc = 'UNU')\n     .attrchar('@') = 'intens(low ) color(blue)    '\n     .attrchar('\\') = 'intens(low ) color(blue)    '\n     .attrchar('$') = 'intens(high) color(yellow) hilite(reverse)'\n   if (&rv1extc = '1')\n     .attr(o#l1) = 'color(yellow) hilite(reverse)'\n     .attr(o#h1) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '2')\n     .attr(o#l2) = 'color(yellow) hilite(reverse)'\n     .attr(o#h2) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '3')\n     .attr(o#l3) = 'color(yellow) hilite(reverse)'\n     .attr(o#h3) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '4')\n     .attr(o#l4) = 'color(yellow) hilite(reverse)'\n     .attr(o#h4) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '5')\n     .attr(o#l5) = 'color(yellow) hilite(reverse)'\n     .attr(o#h5) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '6')\n     .attr(o#l6) = 'color(yellow) hilite(reverse)'\n     .attr(o#h6) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '7')\n     .attr(o#l7) = 'color(yellow) hilite(reverse)'\n     .attr(o#h7) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '8')\n     .attr(o#l8) = 'color(yellow) hilite(reverse)'\n     .attr(o#h8) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '9')\n     .attr(o#l9) = 'color(yellow) hilite(reverse)'\n     .attr(o#h9) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '10')\n     .attr(o#l10) = 'color(yellow) hilite(reverse)'\n     .attr(o#h10) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '11')\n     .attr(o#l11) = 'color(yellow) hilite(reverse)'\n     .attr(o#h11) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '12')\n     .attr(o#l12) = 'color(yellow) hilite(reverse)'\n     .attr(o#h12) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '13')\n     .attr(o#l13) = 'color(yellow) hilite(reverse)'\n     .attr(o#h13) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '14')\n     .attr(o#l14) = 'color(yellow) hilite(reverse)'\n     .attr(o#h14) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '15')\n     .attr(o#l15) = 'color(yellow) hilite(reverse)'\n     .attr(o#h15) = 'color(yellow) hilite(reverse)'\n   if (&rv1extc = '16')\n     .attr(o#l16) = 'color(yellow) hilite(reverse)'\n     .attr(o#h16) = 'color(yellow) hilite(reverse)'\n)end\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REV@WRL": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x19\\x00\\x19\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "KIMU"}, "text": ")Attr\n   % type(text  ) intens(high) caps(off)\n   ` type(text  ) intens(high) caps(off)              hilite(reverse)\n   @ type(text)   intens(high) caps(off) color(yellow)\n   ~ type(text)   intens(high) caps(off) color(turq)\n   + type(text  ) intens(low )\n   _ type(input ) intens(high) caps(off) just(left )\n   ^ type(input ) intens(high) caps(on ) color(red  ) hilite(uscore)\n   | type(input ) intens(low ) caps(on ) color(blue ) hilite(uscore)\n   \\ type(input ) intens(high) caps(on ) just(right)  hilite(uscore)\n   \u00b5 type(input ) intens(high) caps(off) just(left )  hilite(uscore)\n)Body  Expand(//) window(50,09)\n`Revive!%: Warning Record Length < &rvv > -/-/-\n%Command ===>_zcmd                       / / +\n@ This Dataset specified &rv1blksz of Block Size.\n@  But have &rv1wblk byte in this member.\n+\n+ If you want this member.\n+  If re-read on corrected record length.\n+\n+\n)Init\n  vget (rv1erec rv1trkc rv1cspt) profile\n)Proc\n)End\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REVA00": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00#\\x00#\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "KIMU"}, "text": "REVA001                            .ALARM = YES\n'STOW Macro Error (RC=4,RSN=0). This Error Mean Already Exists. '     +\n'Perhaps Other Users Reviveing This Dataset. '                        +\n'If You Want not Outbreak this Thing. '                               +\n'Should You Add Revive QNAME to GRS Global Enqueue List. '            +\n'(Revive! Qname is @REVIVE, Rname is Processing Dataset Name)'\n\nREVA002                            .ALARM = YES\n'STOW Macro Error (RC=12,RSN=0). This Error Mean '                    +\n'No space left in the directory. The entry could not be added. '      +\n'If you want reviveing when you should delete to Existing Members '   +\n'or Delete to UserData Area in directory. (userdata is delete from '  +\n'ISPF 3.5 menu)'\n\nREVA003                            .ALARM = YES\n'STOW Macro Error (RC=16,RSN=1). This Error Mean I/O Error'\n\nREVA004                            .ALARM = YES\n'STOW Macro Error (RC=16,RSN=2). This Error Mean I/O Error'\n\nREVA005                            .ALARM = YES\n'STOW Macro Error (RC=16,RSN=4). This Error Occurred while '          +\n'writing data buffers.'\n\nREVA006                            .ALARM = YES\n'STOW Macro Error (RC=16,RSN=1847). This Error Mean VTOC I/O Error'\n\nREVA007                            .ALARM = YES\n'STOW Macro Error (RC=16,RSN=2871). This Error Mean Unable to '       +\n'Update the VTOC(SB37 Abend)'\n\nREVA009                            .ALARM = YES\n'STOW Macro Error (RC=16,RSN=3383). No Secondary Space is Available ' +\n'All Primary Space Used.(SD37 Abend)'\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REVA01": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00&\\x00&\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "KIMU"}, "text": "REVA010                            .ALARM = YES\n'STOW Macro Error (RC=16,RSN=3639). No Secondary Space is Available ' +\n'All Primary Space Used.(E37 Abend)'\n\nREVA011                            .ALARM = YES\n'STOW Macro Error (RC=20,RSN=0). This Error Mean Not Opened '         +\n'This File. This Error is BUG. Please Feed Back Me!'\n\nREVA012                            .ALARM = YES\n'STOW Macro Error (RC=24,RSN=0). This Error Mean Insufficient '       +\n'Virtual Storage was Available to Perform the STOW Function.'\n\nREVA013                            .ALARM = YES\n'STOW Macro Error (RC=28,RSN=0). This Error PDSE Only. '              +\n'Revive! is Not Supported Yet.'\n\nREVA014                            .ALARM = YES\n'STOW Macro Error (RC=32,RSN=0). What??'\n\nREVA015                            .ALARM = YES\n'STOW Macro Error (RC=36,RSN=0). This Error PDSE Only. '              +\n'Revive! is Not Supported Yet.'\n\nREVA016                            .ALARM = YES\n'STOW Macro Error (RC=40,RSN=0). This Error PDSE Only. '              +\n'Revive! is Not Supported Yet.'\n\nREVA017                            .ALARM = YES\n'STOW Macro Error (RC=44,RSN=0). What??'\n\nREVA018                            .ALARM = YES\n'STOW Macro Error (RC=48,RSN=4). This Error PDSE Only. '              +\n'Revive! is Not Supported Yet.'\n\nREVA019                            .ALARM = YES\n'STOW Macro Error (RC=48,RSN=16). This Error PDSE Only. '             +\n'Revive! is Not Supported Yet.'\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REVA99": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x03\\x00\\x03\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "KIMU"}, "text": "REVA999                            .ALARM = YES\n'STOW Macro Error. This Error is Un-None ??'\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REVT00": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x0e\\x00\\x0e\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "KIMU"}, "text": "REVT001                            .ALARM = YES\n'REVT001 CSECT:&M1.  BASE:&M2.'\nREVT002                            .ALARM = YES\n'REVT002 CSECT:&M1.  RETURN.'\nREVT003                            .ALARM = YES\n'REVT003 &M1. PANEL INPUT WAIT.'\nREVT004                            .ALARM = YES\n'REVT004 &M1. PANEL INPUT WAIT. DONE'\nREVT005                            .ALARM = YES\n'REVT005  GETMAIN &M1. ADR:&M2. LNG:&M3.'\nREVT006                            .ALARM = YES\n'REVT006  FREEMAIN &M1. ADR:&M2. LNG:&M3.'\nREVT007                            .ALARM = YES\n'REVT007 &M1. DTPOSIT:&M2. DTHPOSF:&M3. DTHPREV:&M4.'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REV01": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x1b\\x00\\x1b\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "KIMU"}, "text": "REV010                             .ALARM = YES\n'Insufficienty Region Size for this Function. Please Check It. and ' +\n'add More Virtual Storage or Close Any Applications. '               +\n'(Request:&M1.)'\nREV011                             .ALARM = YES\n'Dynamic Allocation Process Fail. (RC:&M1 RSN:&M2) '                 +\n'MVS Said :&M3'\nREV012                             .ALARM = YES\n'Dynamic Allocation Process Fail. (RC:&M1 RSN:&M2) '                 +\n'MVS Keep Silence. Please See Below Manual '                         +\n'<MVS Programming: Authorized Assembler Services Guide '             +\n'(GC28-1763-03)>'\nREV013                             .ALARM = YES\n'Revive List Panel Query Error. Why did Error in This Place ?! '     +\n'Perhaps Misstake Installation. Re-Install Please !!'\nREV014                             .ALARM = YES\n'Ok! member(&M1.) restored.'\nREV015                             .ALARM = YES\n'Really? Member(&M1.) is currentry exist.'\nREV016                             .ALARM = YES\n'This member contain invalid records. Can''t process this function.'\nREV017                             .ALARM = YES\n'This Dataset not PDS file.'\nREV018                             .ALARM = YES\n'No Data Found ?'\nREV019                             .ALARM = YES\n'Ok! member(&M1.) extracted.'\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REV02": {"ttr": 1037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x05\\x00\\x05\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "KIMU"}, "text": "REV020                             .ALARM = YES\n'Revive Show Panel Query Error. Why did Error in This Place ?! '     +\n'Perhaps Misstake Installation. Re-Install Please !!'\nREV021                             .ALARM = YES\n'Ok! Member was extracted in &RV1EDS..'\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REV99": {"ttr": 1039, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x03\\x00\\x03\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "KIMU"}, "text": "REV990                             .ALARM = YES\n'Sorry! This function not supported in this release.'                +\n' Please wait! next release.'\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV#1SUB": {"ttr": 1041, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x12\\x00\\x12\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "KIMU"}, "text": "//FREVCMP  JOB CLASS=F,MSGCLASS=W,NOTIFY=FSUPP17\n//* ----------------------------------------------------------\n//PROC01  PROC M=\n//STEP1   EXEC PGM=IEBGENER\n//SYSUT1   DD DSN=DDMS.V1R2M1.SRCLIB(&M.),DISP=SHR\n//SYSUT2   DD SYSOUT=(*,INTRDR)\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD DUMMY\n//        PEND\n//STEP01  EXEC PROC=PROC01,M=RV1#BTH\n//STEP02  EXEC PROC=PROC01,M=RV1#DALC\n//STEP03  EXEC PROC=PROC01,M=RV1#DARD\n//STEP04  EXEC PROC=PROC01,M=RV1#DSI\n//STEP05  EXEC PROC=PROC01,M=RV1#EXTR\n//*TEP06  EXEC PROC=PROC01,M=RV1#SHOW\n//STEP07  EXEC PROC=PROC01,M=RV1#TC\n//STEP08  EXEC PROC=PROC01,M=RV1#TRC\n//STEP09  EXEC PROC=PROC01,M=RV1#MAIN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RV1#ALCD": {"ttr": 1043, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00C\\x00C\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 67, "newlines": 67, "modlines": 0, "user": "KIMU"}, "text": "RV1ALCD  DSECT\n*A#PROC  DS    CL8                       Process ..\n*                                        'ALLOCATE' or 'CREATE  ' or\n*                                        'FREE    '\nDA#DSN   DS    CL44                      Dataset Name\nDA#VOL   DS    CL6                       Volume Serial\nDA#DISP  DS    CL3                       'OLD' or 'SHR' or 'NEW' or\n*                                        'MOD' or 'FRE'\n         DS    XL1\nDA#RETDD DS    CL8                       Returnd DD Name\nDA#RETC  DS    XL2                       Return Code\nDA#INFO  DS    XL2                       Information Code\nDA#SPC   DS    CL3                       'TRK' or 'CYL' or 'BLK'\n         DS    XL1\nDA#SIZE1 DS    XL3                       Space #1\n         DS    XL1\nDA#SIZE2 DS    XL3                       Space #2\n         DS    XL1\nDA#SIZED DS    XL3                       Directory Space\n         DS    XL1\nDA#DSORG DS    CL2                       'PS' or 'PO'\n*                                        x'0000' : Error\n*                                        x'0004' : TR\n*                                        x'0008' : VSAM\n*                                        x'0020' : TQ\n*                                        x'0040' : TX\n*                                        x'0080' : GS\n*                                        x'0200' : PO\n*                                        x'0300' : POU\n*                                        x'0400' : MQ\n*                                        x'0800' : CQ\n*                                        x'1000' : CX\n*                                        x'2000' : DA\n*                                        x'2100' : DAU\n*                                        x'4000' : PS\n*                                        x'4100' : PSU\n*                                        x'8000' : IS\n*                                        x'8100' : ISU\nDA#RECFM DS    XL1                       x'02' : M   x'04' : A\n*                                        x'08' : S   x'10' : B\n*                                        x'20' : D,T x'40' : V\n*                                        x'80' : F   x'C0' : U\nDA#RECFM_M EQU X'02'\nDA#RECFM_A EQU X'04'\nDA#RECFM_S EQU X'08'\nDA#RECFM_B EQU X'10'\nDA#RECFM_D EQU X'20'\nDA#RECFM_T EQU X'20'\nDA#RECFM_V EQU X'40'\nDA#RECFM_F EQU X'80'\nDA#RECFM_U EQU X'C0'\n         DS    XL1\n*\nDA#LRECL DS    XL2                       Record Length\nDA#BLKSZ DS    XL2                       Block Size\nDA#ERR   DS    XL1024                    Returnd Error Message Text\n*\n* DA#ERR Format\n*\n* |....+....||..+....n...\n* n         ||                    : All Message Number\n*  xx       ||  yy                : Message Text Length ( Half Word )\n*    *******||**  ***********     : Message Text\n*    <-xx Byte->  <-yy Byte->\n*\nDA#ERRM  DS    CL60                      Returnd Error Message Text\nRV1ALCDL EQU   *-RV1ALCD                 DSECT Length\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#BTH": {"ttr": 1045, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00L\\x00L\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 76, "newlines": 76, "modlines": 0, "user": "KIMU"}, "text": "         START\n* -----------------------------------------------------------------\n         DC   C'<< Revive ! : Binary Code to Hexa Character >> ('\n         COPY RV1#HDR\n         PRINT NOGEN\n* --- Start of Process --------------------------------------------\nRV1BTH   CSECT\n         SAVE  (14,12),T,*\n         BALR  R03,0\n         USING *,R03                       Base Reg. R03\n         ST    R13,SAVEAREA+4              Save A(OLD SaveArea)\n         LR    R12,R13\n         LA    R13,SAVEAREA\n         ST    R13,8(R12)                  Save A(NEW SaveArea)\n* --- from characher ---\n*        LM    R07,R09,0(R01)              R07 : From Address\n*                                          R08 : To Address\n*                                          R09 : length\n         L     R07,0(R01)\n* --- to character ---\n         L     R08,4(R01)\n* --- convert length ---\n         L     R09,8(R01)\n*-------------------------------------------------------------------\n****     RV1#TRCC BASE=3,COMM=6\n*-------------------------------------------------------------------\n@CO_HEX  EQU   *                               CONVERT HEX-CHARACTER\n         LA    R15,5\n@CO_HC   EQU   *\n         LTR   R09,R09\n         BZ    @CO_EXIT\n         BCT   R15,@CO_SKIP\n*\n         MVI   0(R08),X'40'\n         LA    R08,1(R08)\n         LA    R15,4\n@CO_SKIP EQU   *\n         XR    R01,R01                   First 4 Bit\n         IC    R01,0(R07)\n         SRL   R01,4\n         A     R01,A_TR\n         ICM   R02,B'0010',0(R01)\n         IC    R01,0(R07)                Last 4 Bit\n         N     R01,=XL4'0000000F'\n         A     R01,A_TR\n         ICM   R02,B'0001',0(R01)\n         STCM  R02,B'0011',0(R08)\n         LA    R07,1(R07)\n         LA    R08,2(R08)\n         BCTR  R09,0\n         B     @CO_HC\n@CO_EXIT EQU   *\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=0\n*\nSAVEAREA DS    18F                               WORK SAVEAREA\nTR       DC    C'0123456789ABCDEF'               CHAR TRUNC TABLE\nA_TR     DC    A(TR)\n         LTORG\nR00      EQU   00\nR01      EQU   01\nR02      EQU   02\nR03      EQU   03\nR04      EQU   04\nR05      EQU   05\nR06      EQU   06\nR07      EQU   07\nR08      EQU   08\nR09      EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   RV1BTH\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#CMDA": {"ttr": 1048, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x17\\x00\\x17\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "KIMU"}, "text": "         MACRO\n&NAME    RV1#CMDA &SECTTYP=DSECT\n         AIF   ('&SECTTYP' NE 'DSECT').SECTSKP\n.NDST    ANOP\nCMDPROCD DSECT\n.SECTSKP ANOP\nCMDPROCA EQU   *\nPC@HDR   DC    CL8'RV1CMDA'\nPC@CMD   DS    CL1                       Line Command\n         DS    XL1                       filler\nPC@NAME  DS    CL8                       Member Name\nPC@NNAME DS    CL8                       Member New Name\nPC@TTR   DS    CL6                       TTR ( Character )\nPC@TTRB  DS    XL4                       TTR ( Binary )\nPC@RECD  DS    XL4                       Record Number\nPC@RLNG  DS    XL2                       Logical Record Length(For F)\nPC@LRL   DS    XL2                       Logical Record Length(For V)\nPC@BSZ   DS    XL2                       Phisical Record Length(BLKSZ)\nPC@RFM   DS    XL1                       Record Format Flag.\nPC@ATTR  DS    XL1                       Attribute\nPC@MSG   DC    CL80'>>> Member Process :'\nCMDPROCL EQU   *-CMDPROCA                Length\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#CNST": {"ttr": 1050, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x04\\x00\\x04\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "KIMU"}, "text": "* -----------------------------------------------------------------\n*TRCMODE SETC 'BUILD'                    BUILD/NONE\n&TRCMODE SETC 'NONE'                     BUILD/NONE\n* -----------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RV1#COMM": {"ttr": 1052, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x01\\x1b\\x01\\x1b\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 283, "newlines": 283, "modlines": 0, "user": "KIMU"}, "text": "         DS    0D\nREVIVED  EQU   *                         Revive Common Data Area\nRV1MARK  DC    CL8'-REVIVE-'             Mark\n* ------------------------------------------------------------------\n*        Revive Common Data\n* ------------------------------------------------------------------\nRVPREFIX DS    CL8                       User prefix\nREVTRC   DS    CL3                       Revive! Trace Option\nTRCMES   DS    CL80                      Revive! Trace Message\nTRCMESS  DS    CL20                      Revive! Trace Message Short\nA#TRCF   DC    V(TRCF)                   Trace DCB Address\nRV1DSN   DS    CL46                      Input Dataset Name\nRV1VOL   DS    CL6                       Input Dataset Volume Serial\nRV1TVOL  DS    CL6                       Target Dataset Volume Serial\nRV1EXTO  DS    CL1                       Extended Scan Option\nRV1ADDC  DS    CL1                       Add Current Members Flag\nRV1DISP  DS    CL1                       Input Dataset Disposition\n         DS    CL1                       Reserved\nRV1TBSP  DS    F                         Directory Table Size\nRV1SSTR  DS    CL50                      Search String\nRV1SSTRR DS    CL50                      Search String Result\nRV1SSTRL DS    H                         Search String Length\nZPREFIX  DS    CL8                       TSO Prefix\nRV1DSNC  DS    CL44                      Process Dataset Name\nRV1JFCB  DS    0CL176                            job file control block\nRV1JDSN  DS    CL44                              dataset name\nRV1JDSCB DS    CL140\nSHOWRC   DS    F                         ISPF Panel Condition Code\nRV1ENTRYL DC   CL55'(RV1DSN RV1VOL RV1EXTO RV1ADDC RV1DISP RV1TBSP RV1S*\n               STR)'\nRV1SCROLL DC   CL25'(ZVERB ZSCROLLA ZSCROLLN)'\n         DS    CL1                       Reserved\nRV1PRC   DC    CL3' '                    Process Flag\n         DS    CL1                       Reserved\nRV1EXTC  DS    XL1                       Extent Process Flag\n         DS    CL1                       Reserved\nRV1DDN   DS    CL8                       Dynamic Allocation DD Name\nRV1TBSPA DS    F                         Directory Table Address\nRV1TBSPP DS    F                         Directory Table Pointer\nRV1TBSPL DS    F                         Directory Table Length\nRV1DIRBA DS    F                         Directory Read Buffer Address\nRV1DIRBP DS    F                         Directory Read Buffer Pointer\nRV1DIRBL DS    F                         Directory Read Buffer Length\nRV1DATBA DS    F                         Data Area Read Buffer Address\nRV1DATBL DS    F                         Data Area Read Buffer Length\nRV1DENDP DS    F                         Directory Read Buffer End Pos\nZEDSMSG  DC    CL20' '                   Short Error Message\nZEDLMSG  DS    CL60                      Long Error Message\nLISTBUFL DS    F                         List Panel Display buffer len\nLISTBUFA DS    F                         List Panel Display buffer Adr\nVDEPTH   DS    F                         Panel Dynamic Area Depth\nVDDEPTH  DS    F                         List Panel Dynamic Area Depth\nVSDEPTH  DS    F                         Show Panel Dynamic Area Depth\nVWIDTH   DS    F                         Panel Dynamic Area Width\nVDWIDTH  DS    F                         List Panel Dynamic Area Width\nVSWIDTH  DS    F                         Show Panel Dynamic Area Width\nVROW     DS    F                         List Panel Dynamic Area Row\nVCOL     DS    F                         List Panel Dynamic Area Column\nVTYPE    DS    CL8                       List Panel Dynamic Area Type\nZSCROLLA DS    CL4                       Scroll AMT ( HALF,MAX,...)\nZSCROLLN DS    F                         Scroll Lines\nZVERB    DS    CL8                       Command Verb\nZERRMSG  DS    CL8                       ISPF Error Message ID\nDTFIRST  DS    F                         Data Area Table First Entry A\nDTLAST   DS    F                         Data Area Table Last Entry A\nDTCURR   DS    F                         Data Area Table Current Ent A\nDTCURRP  DS    F                         Data Area Table Current Pos A\nDTLASTE  DS    F                         Data Area Table Last Entry Num\nDTPOSIT  DS    F                         List panel Position\n* --------------------------------------------------------------------\n* Member Attribute.\n*  ATTR_CUR(x'01') : Current Exist Member\n*  ATTR_REC(x'02') : Lost of Directory Chain ( Recoveryable Member )\n*  ATTR_EXT(x'03') : Over DS1LSTAR ( Last Used Address )\n*  ATTR_BDR(x'07') : DS1LSTAR Border Line\n*\n*  ATTR_DOK(x'08') : Valid Record.\n*  ATTR_DNG(x'09') : Data Record No-Good. ( Invalid Record Contain )\n*\n*  ATTR_ERR(x'04') : Line Command Process Error\n*  ATTR_MRK(x'05') : End of Line Mark\n*  ATTR_INP(x'06') : Line Input Field\nATTR_CUR EQU   X'01'\nATTR_REC EQU   X'02'\nATTR_EXT EQU   X'03'\nATTR_ERR EQU   X'04'\nATTR_MRK EQU   X'05'\nATTR_INP EQU   X'06'\nATTR_BDR EQU   X'07'\nATTR_DOK EQU   X'08'\nATTR_DNG EQU   X'09'\n*\nFLAG     DS    XL1\n*\n*              '........'\n*                      + :(x'01') Lost Chain. Add to List.\n*                     +  :(x'02') Found Searching Strings or\n*                                  No Search Strinngs\n*                    +   :(x'04') Member Exist.\n*                   +    :(x'08') Over DS1LSTAR Fields.\n*                  +     :(x'10') DS1LSTAR Border Line.\n*                 +      :(x'20') Now Overed DS1LSTAR Line.\n*                +       :(x'40') Used Analyze Screen.\n*               +        :(x'80') Un Use\n         DS    XL1\n* --------------------------------------------------------------------\n* Record Format.\nRECFM_U  EQU   X'C0'\nRECFM_F  EQU   X'80'\nRECFM_V  EQU   X'40'\nRECFM_B  EQU   X'10'\nRECFM_S  EQU   X'08'\nRECFM_A  EQU   X'04'\nRECFM_M  EQU   X'02'\n* --- ISPF Variable define table ---\nRV1ISPFN DC    V(RV1ISPF)\nRV1ISPFL DC    V(RV1VLEN)\nRV1ISPFT DC    V(RV1VTYP)\nRV1ISPFA DC    V(RV1VADR)\nISPVENDM DC    XL8'FFFFFFFFFFFFFFFF'\n* --------------------------------------------------------------------\nDTLENGTH EQU   4096                      Data Area Table Length\n*QUERYL  DC    F'67'\n*V1DAREAN DC   CL8'RV1DAREA'             List Panel Dynamic Area Name\n*V1DAREA DS    32CL80                    List Panel Dynamic Area Dummy\n*        DS    XL1\nWK#H     DS    H\n*K#F     DS    F\n* - RV1#FMTB -------------------------------------------------------\nFMTTBLN  DC    H'50'                     Dataset DCB Check Table Num\n*                                        (24x50=1200 byte)\nFMTTBLP  DS    H                         Dataset DCB Check Table Pos\nFMTTBLA  DS    F                         Dataset DCB Check Table Adr\n* ------------------------------------------------------------------\nRV1DAREAN DC   CL8'RV1DAREA'             List Panel Dynamic Area Name\nRV1DAREAT DC   CL8'CHAR    '             List Panel Dynamic Area Name\n* --- RV1DAREAA and RV1DAREAA is Update from RV1#MAIN-@PQUERY Section.\nRV1DAREAA DS   A(0) <- RV1DAREA          List Panel Dynamic Area Name\nRV1DAREAL DS   F'8'                      List Panel Dynamic Area Name\n* ------------------------------------------------------------------\nRV1EDS   DS    CL46                      Extract Dataset Name\nRV1EDS_E EQU   *\nRV1EMN   DS    CL8                       Extract Member Name\nRV1EVO   DS    CL6                       Extract Volume Serial\nRV1ESP   DS    CL3                       Extract Space Units\n         DS    CL1\nRV1ESQ1  DS    XL4                       Extract Primary Quantity\nRV1ESQ2  DS    XL4                       Extract Secondary Quantity\nRV1ESPD  DS    XL4                       Extract Directory Blocks\nRV1ERF   DS    CL3                       Extract Record Format\n         DS    CL1\nRV1ERL   DS    H                         Extract Record Length\nRV1EBS   DS    H                         Extract Block Size\nRV1DTTL  DS    CL80\n* ------------------------------------------------------------------\n*        DS    XL2                       Reserved\nB#ADP    DS    XL4                       Data area First Address\n* ------------------------------------------------------------------\n*        Revive Dataset Information Common Area\n*          Refferd : RV1#MAIN, RV1#DSI\n* ------------------------------------------------------------------\n*V1DSID  CSECT\nRV1DSIS  EQU   *\n*#JFCB   DS    F                         JFCB Address\nA#PDSF   DS    F                         PDSF DCB Address\nO#VOL    DS    CL6                       Volume Serial\nO#ASP    DS    CL17                      Dataset Start Physical Address\n         DS    CL1                       Reserved\n*\nO#DBLK   DS    F                         Directory Block#\nO#ADP    DS    CL17                      Data Start Physical Address\n         DS    CL1                       Reserved\nO#ADP2   DS    CL6                       Data Start Logical Address\nO#AUP    DS    CL17                      Unused Area Physical Address\n         DS    CL1                       Reserved\nO#AUP2   DS    CL6                       Unused Area Logical Address\nO#AEP    DS    CL17                      End of Data Physical Address\n         DS    CL1                       Reserved\nO#AEP2   DS    CL6                       End of Data Logical Address\nO#RECFM  DS    CL3                       Recfm\n         DS    CL1                       Reserved\n*#LRECL  DS    H                         Lrecl\n*#BLKSZ  DS    H                         Block Size\nO#DEVT   DS    CL4                       Device Type\nO#EXT    DS    XL1                       Extent\n         DS    CL1                       Reserved\nO#MEM    DS    F                         Member\nO#ALC    DS    F                         Member\nO#USE    DS    H                         Allocated Track\nO#CRE    DS    CL6                       Used Percent\nO#EXP    DS    CL6                       Creation Date\nO#SYSCD  DS    CL13                      Expiration Date\n         DS    CL1                       Reserved\nO#EXTENT DS    0X\nO#L1     DS    CL8                       Extent 1 Low Address\nO#H1     DS    CL8                       Extent 1 high Address\nO#L2     DS    CL8                       Extent 2 Low Address\nO#H2     DS    CL8                       Extent 2 high Address\nO#L3     DS    CL8                       Extent 3 Low Address\nO#H3     DS    CL8                       Extent 3 high Address\nO#L4     DS    CL8                       Extent 4 Low Address\nO#H4     DS    CL8                       Extent 4 high Address\nO#L5     DS    CL8                       Extent 5 Low Address\nO#H5     DS    CL8                       Extent 5 high Address\nO#L6     DS    CL8                       Extent 6 Low Address\nO#H6     DS    CL8                       Extent 6 high Address\nO#L7     DS    CL8                       Extent 7 Low Address\nO#H7     DS    CL8                       Extent 7 high Address\nO#L8     DS    CL8                       Extent 8 Low Address\nO#H8     DS    CL8                       Extent 8 high Address\nO#L9     DS    CL8                       Extent 9 Low Address\nO#H9     DS    CL8                       Extent 9 high Address\nO#L10    DS    CL8                       Extent 10 Low Address\nO#H10    DS    CL8                       Extent 10 high Address\nO#L11    DS    CL8                       Extent 11 Low Address\nO#H11    DS    CL8                       Extent 11 high Address\nO#L12    DS    CL8                       Extent 12 Low Address\nO#H12    DS    CL8                       Extent 12 high Address\nO#L13    DS    CL8                       Extent 13 Low Address\nO#H13    DS    CL8                       Extent 13 high Address\nO#L14    DS    CL8                       Extent 14 Low Address\nO#H14    DS    CL8                       Extent 14 high Address\nO#L15    DS    CL8                       Extent 15 Low Address\nO#H15    DS    CL8                       Extent 15 high Address\nO#L16    DS    CL8                       Extent 16 Low Address\nO#H16    DS    CL8                       Extent 16 high Address\nO#EXTENTL EQU  *-O#EXTENT\n*#M      DS    CL8                       Table - Member Name\n*#D      DS    CL60                      Table - Data ( First 60 Byte )\n*#TTR    DS    CL6                       Table - TTR ( Character )\n*#TTRB   DS    XL4                       Table - TTR ( Binary )\n*#LEN    DS    F                         Table - Block\n*#MBCHR  DS    XL8                       Table - ?\n* ------------------------------------------------------------------\nB#EXTENT DS    0X\nB#L1     DS    XL4                       Extent 1 Low Address Binary\nB#H1     DS    XL4                       Extent 1 high Address Binary\nB#L2     DS    XL4                       Extent 2 Low Address Binary\nB#H2     DS    XL4                       Extent 2 high Address Binary\nB#L3     DS    XL4                       Extent 3 Low Address Binary\nB#H3     DS    XL4                       Extent 3 high Address Binary\nB#L4     DS    XL4                       Extent 4 Low Address Binary\nB#H4     DS    XL4                       Extent 4 high Address Binary\nB#L5     DS    XL4                       Extent 5 Low Address Binary\nB#H5     DS    XL4                       Extent 5 high Address Binary\nB#L6     DS    XL4                       Extent 6 Low Address Binary\nB#H6     DS    XL4                       Extent 6 high Address Binary\nB#L7     DS    XL4                       Extent 7 Low Address Binary\nB#H7     DS    XL4                       Extent 7 high Address Binary\nB#L8     DS    XL4                       Extent 8 Low Address Binary\nB#H8     DS    XL4                       Extent 8 high Address Binary\nB#L9     DS    XL4                       Extent 9 Low Address Binary\nB#H9     DS    XL4                       Extent 9 high Address Binary\nB#L10    DS    XL4                       Extent 10 Low Address Binary\nB#H10    DS    XL4                       Extent 10 high Address Binary\nB#L11    DS    XL4                       Extent 11 Low Address Binary\nB#H11    DS    XL4                       Extent 11 high Address Binary\nB#L12    DS    XL4                       Extent 12 Low Address Binary\nB#H12    DS    XL4                       Extent 12 high Address Binary\nB#L13    DS    XL4                       Extent 13 Low Address Binary\nB#H13    DS    XL4                       Extent 13 high Address Binary\nB#L14    DS    XL4                       Extent 14 Low Address Binary\nB#H14    DS    XL4                       Extent 14 high Address Binary\nB#L15    DS    XL4                       Extent 15 Low Address Binary\nB#H15    DS    XL4                       Extent 15 high Address Binary\nB#L16    DS    XL4                       Extent 16 Low Address Binary\nB#H16    DS    XL4                       Extent 16 high Address Binary\nB#EXTENTL EQU  *-B#EXTENT\nB#DSORG  DS    BL1                       Dataset Organization\nB#RECFM  DS    BL1                       Record Format\nB#BLKSZ  DS    BL2                       Block Size\nB#LRECL  DS    BL2                       Logical Record Length\n* ------------------------------------------------------------------\nB#TRK#   DS    H                         Number of Track\n*                                         in a logical Cylindar\nB#CYL#   DS    H                         Number of Logical Cylindar\nB#ETTR   DS    XL4                       Last Ussed Track\nB#ECHR   DS    XL8                       Last Ussed Track(Real Address)\nB#TTTR   DS    XL4                       Last Alloc Track\nB#TCHR   DS    XL8                       Last Alloc Track(Real Address)\nB#TALC   DS    F                         Allocation Tracks#\n* ------------------------------------------------------------------\nRV1DSIDL EQU   *-RV1DSIS                 Length\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#DALC": {"ttr": 1286, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x02\\t\\x02\\t\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 521, "newlines": 521, "modlines": 0, "user": "KIMU"}, "text": "         START\n* -----------------------------------------------------------------\n         DC   C'<< Revive ! : Dynamic Allocation >> ('\n         COPY RV1#HDR\n         PRINT NOGEN\n* --- Start of Process --------------------------------------------\n* RC\n*    0 : OK\n*    1 : Dynamic Allocation Error\n*    8 : Dataset Not Found on Specified Volume\n*   16 : Process Not Defined.\n*\n         PRINT NOGEN\nRV1DALC  AMODE 31\nRV1DALC  RMODE ANY\nRV1DALC  CSECT\n         SAVE  (14,12),T,*\n         BALR  R03,0\n         USING *,R03,R04,R05             Base Reg. R03,R04,R05\n         LA    R04,2048(R03)             2'ND Base Reg\n         LA    R04,2048(R04)\n         LA    R05,2048(R04)             3'ND Base Reg\n         LA    R05,2048(R05)\n         ST    R13,SAVEAREA+4            Save A(OLD SaveArea)\n         LR    R12,R13\n         LA    R13,SAVEAREA\n         ST    R13,8(R12)                Save A(NEW SaveArea)\n*-------- Parameter Process ----------------------------------------\n         LR    R12,R01\n         USING RV1ALCD,R12\n         CLC   DA#DISP,=CL3'FRE'         Free Process\n         BE    @DY_FRE\n         CLC   DA#DISP,=CL3'NEW'         Creation Process\n         BE    @DY_CRE\n         CLC   DA#DISP,=CL3'OLD'         Allocation ( Exclusive Enq )\n         BE    @DY_ALC\n         CLC   DA#DISP,=CL3'SHR'         Allocation ( Share Enq )\n         BE    @DY_ALC\n         CLC   DA#DISP,=CL3'MOD'         Modification ( Exc Enq )\n         BE    @DY_ALC\n         LA    R15,16                    Undefined Operation Code\n         B     @BYE\nMVDA#ERR MVC   DA#ERR(0),@D_MES01\n*-------- Dynamic Allocation ( Allocate ) --------------------------\n@DY_ALC  EQU   *\n         XC    RBAREA,RBAREA             Zero Clear RB Area\n         LA    R11,RBAREA                R11 <- RB Area Base\n         USING S99RB,R11\n*\n         XC    RBXAREA,RBXAREA           Zero Clear RBX Area\n         LA    R10,RBXAREA               R10 <- RBX Area Base\n         USING S99RBX,R10\n* RB Area Setup ...\n         MVI   S99RBLN,RBLEN             RB Length\n         MVI   S99VERB,S99VRBAL          RB Verb (Dataset Name Alloc)\n         LA    R06,S99RB+RBLEN           Text Units Address\n         ST    R06,S99TXTPP\n         ST    R10,S99S99X               Request Block Extended Address\n* RBX Area Setup ...\n         MVC   S99EID,=CL6'S99RBX'       RBX ID\n         MVI   S99EVER,S99RBXVR          Version Code\n         OI    S99EOPTS,S99ELSTO         Process Option\n         OI    S99EOPTS,S99ERMSG         Process Option\n         OI    S99EMGSV,S99XINFO         Retern to Information\n* --- Text Units Setup ----------------------------------------------\n* R06 <- Text Units Current Wrtite Point .\n* --- Dataset Name ---\n         MVC   ALCDSN(44),DA#DSN         Copy to Dataset Name\n         LA    R01,@D_DSN                Load DSN Parm Address\n         ST    R01,0(R06)                  Store it\n         LA    R06,4(R06)                Shift Parm Pointer\n* --- volume serial ---\n         CLI   DA#VOL,C' '               If Volume Serial Is Space\n         BE    @DY_VOL                     goto @DY_VOL\n         MVC   W#DSN(44),DA#DSN          Copy Dataset Name to JFCB\n         MVC   W#VOL(6),DA#VOL           Copy Volume Serial to JFCB\n         XC    DSCB,DSCB                 Clear DSCB\n         OBTAIN DSCBFMT1                 Get DSCB1\n         LTR   R15,R15                   If No Error\n         BZ    @DY_VOL1                    goto @DY_VOL1\n         LA    R01,L'@D_MES01            Set Error Message\n*        STC   R01,*+5\n*        MVC   DA#ERR(0),@D_MES01\n         EX    R01,MVDA#ERR\n         LA    R15,8                     Error Code = 8\n         B     @BYE                      Return\n@DY_VOL1 EQU   *\n         MVC   ALCVOL(06),DA#VOL         Copy Volume Serial\n         LA    R01,@D_VOL                Load VOL Parm Address\n         ST    R01,0(R06)                  and Store it\n         LA    R06,4(R06)                Shift Parm Pointer\n@DY_VOL  EQU   *\n* --- disp ---\n* old\n         CLC   DA#DISP,=CL3'OLD'         If Not Disp = OLD\n         BNE   @DY_DOLD                    goto @DY_DOLD\n         LA    R01,@D_DOLD               Load DISP=OLD Address\n         ST    R01,0(R06)                  and Store it\n         LA    R06,4(R06)                Shift Parm Pointer\n         B     @DY_DEXT\n@DY_DOLD EQU   *\n* mod\n         CLC   DA#DISP,=CL3'MOD'         If Not Disp = MOD\n         BNE   @DY_DMOD                    goto @DY_DMOD\n         LA    R01,@D_DMOD               Load DISP=MOD Address\n         ST    R01,0(R06)                  and Store it\n         LA    R06,4(R06)                Shift Parm Pointer\n         B     @DY_DEXT\n@DY_DMOD EQU   *\n* shr\n         LA    R01,@D_DSHR               Load DISP=SHR Address\n         ST    R01,0(R06)                  and Store it\n         LA    R06,4(R06)                Shift Parm Pointer\n@DY_DEXT EQU   *\n* --- unit ---                           UNIT=SYSALLDA Only\n         LA    R01,@D_UNIT               Load Unit address\n         ST    R01,0(R06)                  and Store it\n         LA    R06,4(R06)                Shift Parm Pointer\n* --- dd name ---\n         LA    R01,@D_RETDD              Load Return DD Name Parm\n         ST    R01,0(R06)                  and Store it\n         LA    R06,4(R06)                Shift Parm Pointer\n* --- dataset organization ---\n         LA    R01,@D_RETOR              Load Return DSORG Parm\n         O     R01,=X'80000000'          Set End of Parameter List Mark\n         ST    R01,0(R06)                  and Store it\n* --- end of parameter list ---\n         DROP  R11,R10\n         ST    R11,RBPAREA               Load SVC 99 Parm Address\n         OI    RBPAREA,S99RBPND\n         LA    R01,RBPAREA\n         SVC   99                        Dynamic Allocate\n         LTR   R15,R15                   If Allocation OK ?\n         BNZ   @DY_ERROR_PROC              goto @DY_OK\n*-------------------------------------------------------------------\n         MVC   DA#RETDD(8),ALCDD         Set Returnd DD Name\n*        ST    R12,WK#F\n*        CALL  RV1BTH,(WK#F,WK#MES+10,4)\n*        LA    R01,DA#RETDD\n*        ST    R01,WK#F\n*        CALL  RV1BTH,(WK#F,WK#MES+20,4)\n*        TPUT  WK#MES,80\n*        LA    R01,DA#RETDD\n*        TPUT  (R01),8\n*        TPUT  ALCDD,8\n         MVC   DA#DSORG(2),ALCORG        Set Returnd DSORG\n         MVC   DA#RETC(4),ALLOCER        Set Returnd Reanon Code\n*        TPUT  =CL60'*** ok ok ok ***',60\n         LA    R15,0                     Error Code = 0\n         B     @BYE                      Return\nWK#F     DS    F\nWK#MES   DC    CL80' '\n*-------------------------------------------------------------------\n*-------- Dynamic Allocation ( Allocate ) --------------------------\n@DY_CRE  EQU   *\n         XC    RBAREA,RBAREA             Zero Clear RB Area\n         LA    R11,RBAREA                R11 <- RB Area Base\n         USING S99RB,R11\n*\n         XC    RBXAREA,RBXAREA           Zero Clear RBX Area\n         LA    R10,RBXAREA               R10 <- RBX Area Base\n         USING S99RBX,R10\n* RB Area Setup ...\n         MVI   S99RBLN,RBLEN             RB Length\n         MVI   S99VERB,S99VRBAL          RB Verb (Dataset Name Alloc)\n         LA    R06,S99RB+RBLEN           Text Units Address\n         ST    R06,S99TXTPP\n         ST    R10,S99S99X               Request Block Extended Address\n* RBX Area Setup ...\n         MVC   S99EID,=CL6'S99RBX'       RBX ID\n         MVI   S99EVER,S99RBXVR          Version Code\n         OI    S99EOPTS,S99ELSTO         Process Option\n         OI    S99EOPTS,S99ERMSG         Process Option\n         OI    S99EMGSV,S99XINFO         Retern to Information\n* --- Text Units Setup ----------------------------------------------\n* --- dataset name ---\n         MVC   ALCDSN(44),DA#DSN         Copy Dataset Name\n         LA    R01,@D_DSN                Load DSN Parm Address\n         ST    R01,0(R06)                  and Store it\n*\n*        L     R01,0(R06)\n*        CALL  RV1BTH,((R01),WK#MES+05,30)\n*        TPUT  WK#MES,80\n*        L     R01,0(R06)\n*        LA    R01,20(R01)\n*        CALL  RV1BTH,((R01),WK#MES+05,30)\n*        TPUT  WK#MES,80\n*\n         LA    R06,4(R06)                Shift Parm Pointer\n* --- volume serial ---\n         CLI   DA#VOL,C' '               If Volume Serial is Space\n         BE    @CR_VOL                     goto @CR_VOL\n         MVC   ALCVOL(06),DA#VOL         Copy Volume Serial\n         LA    R01,@D_VOL                Load Volume Serial Parm\n         ST    R01,0(R06)                  and Store it\n         LA    R06,4(R06)                Shift Parm Pointer\n@CR_VOL  EQU   *\n* --- disp 1 ---\n* new\n         LA    R01,@D_DNEW               Load DISP=NEW Address\n         ST    R01,0(R06)                  and Store it\n         LA    R06,4(R06)                Shift Parm Pointer\n* --- disp 2 ---\n         LA    R01,@D_CTLG               Load DISP=(?,CATLG) Address\n         ST    R01,0(R06)                  and Store it\n         LA    R06,4(R06)                Shift Parm Pointer\n* --- space ---\n         CLC   DA#SPC(3),=CL3'CYL'       If CYL Alloc\n         BE    @CR_DNE1                    goto @CR_DNE1\n         CLC   DA#SPC(3),=CL3'TRK'       If TRK Alloc\n         BE    @CR_DNE2                    goto @CR_DNE2\n         XC    ALCBLK,ALCBLK             SPACE=(nnnn, ...  Block Alloc\n         MVC   ALCBLK+1(2),DA#BLKSZ      Copy Block Size\n         LA    R01,@D_SBLK\n         B     @CR_DNE3\n@CR_DNE1 EQU   *                         SPACE=(CYL, ...\n         LA    R01,@D_SCYL\n         B     @CR_DNE3\n@CR_DNE2 EQU   *\n         LA    R01,@D_STRK               SPACE=(TRK, ...\n@CR_DNE3 EQU   *\n         ST    R01,0(R06)                Store SPACE=(???\n         LA    R06,4(R06)                Shift Parm Pointer\n* --- size 1 ---\n         MVC   ALCSPC1(3),DA#SIZE1       Copy First Space\n         LA    R01,@D_SPC1               Load First Space Parm\n         ST    R01,0(R06)                  and Store it\n         LA    R06,4(R06)                Shift Parm Pointer\n* --- size 2 ---\n         MVC   ALCSPC2(3),DA#SIZE2       Copy Next Space\n         LA    R01,@D_SPC2               Load Next Space Parm\n         ST    R01,0(R06)                  and Store it\n         LA    R06,4(R06)                Shift Parm Pointer\n* --- dsorg ---\n         CLC   DA#DSORG,=CL2'PO'         If Not PDS File\n         BNE   @CR_ORG1                    goto @CR_ORG1\n* --- ( Directory Block Space ) Start ---\n         MVC   ALCSPCD(3),DA#SIZED       Copy Directory Space\n         LA    R01,@D_SPCD               Load Directory Space Parm\n         ST    R01,0(R06)                  and Store it\n         LA    R06,4(R06)                Shift Parm Pointer\n* --- ( Directory Block Space ) End ---\n         MVC   ALCDSORG(2),@D_PO         Copy DSORG=PO\n         BE    @CR_ORG2\n@CR_ORG1 EQU   *\n         MVC   ALCDSORG(2),@D_PS         Copy DSORG=PS\n@CR_ORG2 EQU   *\n         LA    R01,@D_DSORG              Load DSORG Address\n         ST    R01,0(R06)                  and Store it\n         LA    R06,4(R06)                Shift Parm Pointer\n* --- recfm ---\n         MVC   ALCRECFM(1),DA#RECFM      Copy Recfm\n         LA    R01,@D_RECFM              Load RECFM Address\n         ST    R01,0(R06)                  and Store it\n         LA    R06,4(R06)                Shift Parm Pointer\n* --- blksize ---\n         MVC   ALCBLKSZ(2),DA#BLKSZ      Copy BLKSIZE\n         LA    R01,@D_BLKSZ              Load BLKSIZE Address\n         ST    R01,0(R06)                  and Store it\n         LA    R06,4(R06)                Shift Parm Pointer\n* --- lrecl ---\n         MVC   ALCLRECL(2),DA#LRECL      Copy LRECL\n         LA    R01,@D_LRECL              Load LRECL Address\n         ST    R01,0(R06)                  and Store it\n         LA    R06,4(R06)                Shift Parm Pointer\n* --- unit ---\n         LA    R07,@D_UNIT               Load UNIT=SYSALLDA\n         ST    R07,0(R06)                  and Store it\n         LA    R06,4(R06)                Shift Parm Address\n* --- dd name ---\n         LA    R07,@D_RETDD              Load Return DD Name List\n         O     R07,=X'80000000'          Set End of Parm List\n         ST    R07,0(R06)                  and Store it\n* --- end of parameter list ---\n         DROP  R11,R10\n         ST    R11,RBPAREA               Load SVC 99 Parm Address\n         OI    RBPAREA,S99RBPND\n         LA    R01,RBPAREA               Load SVC 99 Parm\n         SVC   99                        Dynamic Allocate\n         LTR   R15,R15                   If Alloc OK then\n         BNZ   @DY_ERROR_PROC              goto @DY_OK\n*        TPUT  =CL20'OK OK OK',20\n         MVC   DA#RETDD(8),ALCDD         Copy Returnd DD Name\n         MVC   DA#RETC(4),ALLOCER        Copy Error Code\n         XR    R15,R15                   Return Code = 0\n         B     @BYE                      Return\n*-------------------------------------------------------------------\n@DY_FRE  EQU   *\n         MVC   FREEDD(8),DA#RETDD        Copy Free DD Name\n         LA    R01,FREE                  Load Free Address\n         SVC   99                        Dynamic Alloc\n         B     @BYE                      Return\n*-------------------------------------------------------------------\n@BYE     EQU   *\n         L     R13,SAVEAREA+4          return\n         RETURN (14,12),RC=(15)\n         DS    0F\n*-------------------------------------------------------------------\n* --- Dynamic Allocation Error Proecss ( Get Message ) ----------------\n*-------------------------------------------------------------------\nMVDA#ERR2 MVC   2(0,R01),2(R02)           Copy Message Text\n@DY_ERROR_PROC EQU *\n         LA    R11,RBAREA                Use Request Block\n         USING S99RB,R11\n         MVC   DA#RETC(2),S99ERROR       Save Return Code\n         MVC   DA#INFO(2),S99INFO        Save Information Code\n         LA    R10,RBXAREA               Use Extent Request Block\n         USING S99RBX,R10\n         XR    R01,R01\n         IC    R01,S99ENMSG              Compute Message Result Buffer\n         SLL   R01,8                      * 256\n         ST    R01,ENMSGL                R01 <- Buffer Length\n         GETMAIN RC,LV=(R01)             Getmain\n         LTR   R15,R15\n         BNZ   @DYG_ERR                  Getmain Error\n* --- Call to Message Process -----------------------------------------\n         ST    R01,ENMSGA                Store Result Address\n*\n         XC    EMPAREA,EMPAREA           Zero Clear EMPARMS\n         LA    R01,EMPAREA               R01 <- EMPARMS\n         USING EMPARMS,R01\n         MVI   EMFUNCT,EMRETURN          Set Function (Message Return)\n         MVI   EMIDNUM,EMSVC99           Set ID Number\n         MVC   EMNMSGBK(1),S99ENMSG      Message Count\n         LA    R11,RBAREA                Set RB Area Address\n         ST    R11,EMS99RBP\n         MVC   EMRETCOD,DA#RETC          Set Dynamic Alloc Return Code\n         MVC   EMBUFP,ENMSGA             Set Result Address\n         DROP  R01,R10,R11\n         LA    R01,EMPAREAP              Set Parm Address\n         LINK  EP=IEFDB476               Call Message Process\n         LTR   R15,R15                   If Error\n         BNZ   @DYL_ERR                   goto @DYL_ERR\n* --- Result Error Message Process ------------------------------------\n         LA    R11,RBAREA                Use Request Block\n         USING S99RB,R11\n         LA    R10,RBXAREA               Use Extent Request Block\n         USING S99RBX,R10\n         LA    R01,DA#ERR                Err Result Address\n         MVC   0(1,R01),S99ENMSG         Copy Message Count\n         LA    R01,1(R01)                Shift\n*\n         L     R02,ENMSGA                Error Message Address\n         XR    R14,R14\n         IC    R14,S99ENMSG              Loop Counter\n@DY_MLOP1 EQU  *\n         LH    R15,0(R02)                R15 <- Message Length\n         STH   R15,0(R01)                 and Store It\n*        STC   R15,*+5\n*        MVC   2(0,R01),2(R02)           Copy Message Text\n         EX    R15,MVDA#ERR2\n*\n         LA    R01,2(R01,R15)            Shift Returned Message Area\n         LA    R02,256(R02)              Shift Next Message\n         BCT   R14,@DY_MLOP1             Loop\n         LA    R01,DA#ERR\n         DROP  R11,R10\n* ---------------------------------------------------------------------\n         L     R01,ENMSGL                Freemain Message Process\n         L     R02,ENMSGA                 Work Area\n         FREEMAIN RC,LV=(R01),A=(R02)\n         LA    R15,1                     Error Code = 1\n         B     @BYE                      Return\n* --- Message Process Error -------------------------------------------\n@DYL_ERR EQU   *\n         XC    DA#ERR(1),DA#ERR\n         L     R01,ENMSGL                Freemain Message Process\n         L     R02,ENMSGA                 Work Area\n         FREEMAIN RC,LV=(R01),A=(R02)\n         LA    R15,1                     Error Code = 1\n         B     @BYE                      Return\n*--- Getmain Error -------------------------------------------------\n@DYG_ERR EQU   *\n         XC    DA#ERR(1),DA#ERR\n         LA    R15,1                     Error Code = 1\n         B     @BYE                      Return\n* --- SAVE AREA ---\nSAVEAREA DS    18F                               SAVEAREA\n* --- Convert Hexa to Char Routine Work Area ---\n         DS    0D\n*--- job file control block ---\nJFCB     DS    0CL176                            JOB FILE CONTROL BLOCK\nW#DSN    DS    CL44                              DATASET NAME\nDSCB     DC    CL140' '                          DATASET CONTROL BLOCK\nW#VOL    DS    CL6                               DATASET NAME\nENMSGL   DS    F\nENMSGA   DS    F\n         DS    0F\n* --- dinamic allocations ---\nALLOC    DC    0F'0',X'80',AL3(ALLOCRB)\nALLOCRB  DS    0F\n         DC    AL1(20),AL1(01),AL2(0)\nALLOCER  DC    AL2(0)\nALLOCIN  DC    AL2(0)\n         DC    A(ALLOCTP)\n         DC    A(0)\n         DC    A(0)\nALLOCTP  DC    A(0)                  A(@D_DSN)\n         DC    A(0)                  A(@D_DISP)\n         DC    A(0)                  A(@D_UNIT)\n         DC    A(0)                  A(@D_VOL)\n         DC    A(0)                  X'80',AL3(@D_RETDD)\n         DC    A(0)\n         DC    A(0)\n         DC    A(0)\n         DC    A(0)\n         DC    A(0)\n         DC    A(0)\n         DC    A(0)\n         DC    A(0)\n         DC    A(0)\n         DC    A(0)\n         DC    A(0)\n         DC    A(0)\n         DC    A(0)\n         DC    A(0)\n         DC    A(0)\n         DC    A(0)\n         DC    A(0)\n         DC    A(0)\nLALLOCTP EQU   *-ALLOCTP\n* DDNAME <- DSN=@@@@,DISP=SHR,UNIT=SYSDA,VOL=SER=@@@@@@\n@D_DSN   DC    XL2'0002',XL2'0001',HL2'44'\nALCDSN   DS    CL44\n@D_DOLD  DC    XL2'0004',XL2'0001',HL2'01',XL1'01'   disp=old\n@D_DMOD  DC    XL2'0004',XL2'0001',HL2'01',XL1'02'   disp=mod\n@D_DNEW  DC    XL2'0004',XL2'0001',HL2'01',XL1'04'   disp=new\n@D_DSHR  DC    XL2'0004',XL2'0001',HL2'01',XL1'08'   disp=shr\n@D_CTLG  DC    XL2'0005',XL2'0001',HL2'01',XL1'02'   disp=(,catlg)\n@D_UNIT  DC    XL2'0015',XL2'0001',HL2'08',CL8'SYSALLDA'\n@D_STRK  DC    XL2'0007',XL2'0000'\n@D_SCYL  DC    XL2'0008',XL2'0000'\n@D_SBLK  DC    XL2'0009',XL2'0001',HL2'03'\nALCBLK   DS    XL3\n@D_SPC1  DC    XL2'000A',XL2'0001',HL2'03'\nALCSPC1  DS    XL3\n@D_SPC2  DC    XL2'000B',XL2'0001',HL2'03'\nALCSPC2  DS    XL3\n@D_SPCD  DC    XL2'000C',XL2'0001',HL2'03'\nALCSPCD  DS    XL3\n@D_BLKSZ DC    XL2'0030',XL2'0001',HL2'02'\nALCBLKSZ DS    CL2\n@D_LRECL DC    XL2'0042',XL2'0001',HL2'02'\nALCLRECL DS    CL2\n@D_RECFM DC    XL2'0049',XL2'0001',HL2'01'\nALCRECFM DS    CL1\n@D_F     DC    XL1'80'          recfm=f\n@D_FB    DC    XL1'90'          recfm=fb\n@D_DSORG DC    XL2'003C',XL2'0001',HL2'02'\nALCDSORG DS    CL2\n@D_PS    DC    XL2'4000'     dataset organization ( PS )\n@D_PO    DC    XL2'0200'     dataset organization ( PS )\n@D_VOL   DC    XL2'0010',XL2'0001',HL2'06'\nALCVOL   DS    CL6\n@D_RETDD DC    XL2'0055',XL2'0001',HL2'08'\nALCDD    DS    CL8\n@D_RETOR DC    XL2'0057',XL2'0001',HL2'02'\nALCORG   DS    H\n*\n@D_DDN   DC    XL2'0001',XL2'0001',HL2'08',CL8'INDD    '\n**************************************************************\nFREE     DC    0F'0',X'80',AL3(FREERB)\nFREERB   DS    0F\n         DC    AL1(20),AL1(02),AL2(0)\nFREEER   DC    AL2(0)\nFREEIN   DC    AL2(0)\n         DC    A(FREETP)\n         DC    A(0)\n         DC    A(0)\nFREETP   DC    X'80',AL3(@FREEDD)\n@FREEDD  DC    XL2'0001',XL2'0001',HL2'08'\nFREEDD   DS    CL8\nDSCBFMT1 CAMLST SEARCH,W#DSN,W#VOL,DSCB\n         DS    0F\n@D_MES01 DS    0CL83\n         DC    XL01'01'\n         DC    HL02'80'\n         DC    CL80' This Dataset Not Found on Specified Volume Serial.*\n               '\n* --- RBP -----------------------------------------------------------\n         DS    0D\nRBPAREA  DS    F\n* --- RB ------------------------------------------------------------\n         DS    0D\nRBAREA   DS    XL64\nRBLEN    EQU   (S99RBEND-S99RB)\n* --- RB Text Area --------------------------------------------------\n         DS    0D\nRBTEXTU  DS    XL64\n* --- RBX -----------------------------------------------------------\n         DS    0D\nRBXAREA  DS    XL36\n* -------------------------------------------------------------------\n         DS    0D\nEMPAREAP DC    A(EMPAREA)\nEMPAREA  DS    XL28\n         LTORG\n         COPY  RV1#ALCD\n         DSECT\n         PRINT GEN\n         IEFZB4D0\n         DSECT\n         IEFZB476\n* ---\nR00      EQU   00\nR01      EQU   01\nR02      EQU   02\nR03      EQU   03\nR04      EQU   04\nR05      EQU   05\nR06      EQU   06\nR07      EQU   07\nR08      EQU   08\nR09      EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   RV1DALC\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#DARD": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01H\\x00\\x00\\x00\\x99\\x04\\x1f\\x01\\x00\\x06\\x7f\\x10$\\x03{\\tK\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@'", "ispf": {"version": "01.72", "flags": 0, "createdate": "1999-02-10T00:00:00", "modifydate": "2000-03-07T10:24:00", "lines": 891, "newlines": 2379, "modlines": 0, "user": "KIMU"}, "text": "         START\n* -----------------------------------------------------------------\n* Return Code:\n*   0 : Normal end\n*   1 : Getmin error\n*   8 : Read Error\n*\n* -----------------------------------------------------------------\n         DC   C'<< Revive ! >> ('\n         COPY  RV1#HDR\n         PRINT   GEN\n*-------------------------------------------------------------------\n* --- Start of Process --------------------------------------------\n*-------------------------------------------------------------------\nRV1DARD  CSECT\n         SAVE  (14,12),T,*\n         BALR  R03,0\n         USING *,R03,R04,R05               Base Reg. R03,R04,R05\n         LA    R04,2048(R03)               2 Base Reg\n         LA    R04,2048(R04)\n         LA    R05,2048(R04)               3 Base Reg\n         LA    R05,2048(R05)\n         ST    R13,SAVEAREA+4              Save A(OLD SaveArea)\n         LR    R12,R13\n         LA    R13,SAVEAREA\n         ST    R13,8(R12)                  Save A(NEW SaveArea)\n*-------------------------------------------------------------------\n         LR    R06,R01                     Revive Common Area\n         USING REVIVED,R06\n*-------------------------------------------------------------------\n         RV1#TRCC BASE=3,COMM=6\n*-------------------------------------------------------------------\n*-------- ISPF VDEFINE ---------------------------------------------\n*-------------------------------------------------------------------\n@ISPVDEF EQU   *\n         L     R07,RV1ISPFN              Load Var Name Pointer\n         L     R08,RV1ISPFL              Load Var Length Pointer\n         L     R09,RV1ISPFT              load Var Type Pointer\n         L     R10,RV1ISPFA              load Var Address Pointer\n@IS_LOP1 EQU   *\n         CLC   0(8,R07),ISPVENDM         If End ?\n         BE    @IS_LOP1X                   Goto @IS_LOP1X\n*        TPUT  0(R07),8\n         L     R01,0(R10)                Load Var Address\n         CALL  ISPLINK,(VDEFINE,(R07),(R01),(R09),(R08)),VL\n         LA    R07,8(R07)                Shift Var Name Pointer\n         LA    R08,4(R08)                Shift Var Length Pointer\n         LA    R09,8(R09)                Shift Var Type Pointer\n         LA    R10,4(R10)                Shift Var Address Pointer\n         B     @IS_LOP1                  goto Loop\n@IS_LOP1X EQU  *\n*-------------------------------------------------------------------\n*-------- Dataset Open ---------------------------------------------\n*-------------------------------------------------------------------\n@DSOPEN  EQU   *\n         MVC   PDSFDATA+X'28'(8),RV1DDN  Data Area Read DD\n         OPEN  (PDSFDATA)\n         POINT PDSFDATA,B#ADP            Point Data Area Addr\n*-------------------------------------------------------------------\n*-------- Data Area Read -------------------------------------------\n*-------------------------------------------------------------------\n*\n* Data Area Table .\n*\n*  Data Area Table is Chaining Next Table Entry and Previous Table\n*  Entry.\n*  DTFIRST : First Table Address\n*  DTLAST  : Last Table Address\n*  DTCURR  : Current Process Table Start Address\n*  DTCURRP : Current Process Table Last Used Address\n*\n* <-4096Byte->\n* +----------+\n* | Table #1 |\n* +----------+\n*   |\n*   |   Point\n*   +-->+----------+\n*       | Table #2 |\n*       +----------+\n*         |\n*         |   Point\n*         +-->+----------+\n*             | Table #3 |\n*             +----------+\n*                        .\n*                        .\n*                        +-->+----------+\n*                            | Table #n |\n*                            +----------+\n*\n*\n*  First 12 Byte is Table Control Area. Control Area is Part of 3.\n*  First 4 Byte. Member Entry Number in This Table.\n*  Sec 4 Byte. Next Table Address. Last 4 Byte. Previous Table Address.\n*\n* |....+....1....+....2....+.||.+....0....+...\n*  <-->                                              : First Entry No\n*      <-->                                          : Last Entry No\n*          <-->                                      : Next Table Adr\n*                                                      if Zero is Last\n*              <-->                                  : Prev Table Adr\n*                                                      if Zero is First\n*                  <-- 84 Byte --||-->               : Member Entry\n*                                     <-- 84 Byte -- : Sec Entry ..\n*\n*\n* Member Entry Layout.\n* |....+....1....+....2....+....3....+.||.8....|\n*  <------>                                          : Member Name\n*          <-->                                      : TTRx ( Bin )\n*              <---->                                : TTR ( Char )\n*                    <-->                            : Num of Block\n*                        X                           : Attribute\n*                         _                          : filler\n*                          <--  60 Byte --||-->      : First 60 Byte\n*\n*-------------------------------------------------------------------\n@INITIAL EQU   *\n         XC    DTFIRST,DTFIRST           First Entry Address Clear\n*\n         L     R01,=A(DTLENGTH)\n         GETMAIN RC,LV=(R01)             First Data Table Area\n         LTR   R15,R15\n         BNZ   @RA_ERR1\n* --- RV1TRC ---\n         ST    R01,WK#F\n         L     R01,=A(DTLENGTH)\n         ST    R01,WK#F2\n         RV1#TRCG ((R06),REVT005,DTX,WK#F,WK#F2),VL\n         L     R01,WK#F\n* --- RV1TRC ---\n         USING DTHEADER,R01\n         LA    R15,1\n         ST    R15,DTHPOSF               Set First Entry = 1\n         XC    DTHPOSL,DTHPOSL           Clear Last Entry\n         XC    DTHNEXT,DTHNEXT           Clear Next Table Address\n         XC    DTHPREV,DTHPREV           Clear Previous Table Entry\n         DROP  R01\n         ST    R01,DTFIRST               Store Address ( First )\n         ST    R01,DTLAST                Store Address ( Last )\n         ST    R01,DTCURR                Store Address ( Current )\n         LA    R01,DTHL(R01)             Shift Position\n         ST    R01,DTCURRP               Store Address ( Position )\n         LA    R01,1\n         ST    R01,DTPOSIT               Set List Panel Row = 1\n         XC    DTLASTE,DTLASTE           Data Area Table Last Entry Num\n*-------------------------------------------------------------------\n*-------- Data Area Read -------------------------------------------\n*-------------------------------------------------------------------\n@READDA  EQU   *\n         XC    CURR_CHR(8),CURR_CHR\n         NI    FLAG,B'10011111'          Clear x'60' Flag\n* --- Getmain Read Buffer ---\n         LH    R02,PDSFDATA+X'3E'        Load BlockSize ( 32760 )\n         ST    R02,WK#F\n         GETMAIN RC,LV=(R02)             Member TTR Save Area\n         LTR   R15,R15\n         BNZ   @RA_ERR1\n         ST    R01,RV1DATBA              Store Address\n* --- RV1TRC ---\n         MVC   WK#F2,RV1DATBA\n         RV1#TRCG ((R06),REVT005,RV1DATBX,WK#F2,WK#F),VL\n* --- RV1TRC ---\n*-------- Read First Data Area -------------------------------------\n@M_FIRST EQU   *\n         XC    DTEFIRST(DTELAST),DTEFIRST\n*        XC    DTERLNG(2),DTERLNG        Clear Maximam Lrecl\n*        XC    DTEBSZ(2),DTEBSZ          Clear Maximam Blksize\n*        XC    DTELRL(2),DTELRL          Clear Maximam Lrecl\n         NI    FLAG,B'11100000'          Clear Flag\n*              (Do'nt Clear x'60' , It's Analyze Screen Flag )\n*        NI    DTERFM,B'00001111'        Clear Flag\n* Convert 'Real Address' to 'Relative Address'\n         BAL   R14,@CNVTTR               Convert MBCCHHR -> TTR\n*--- End of Process ? ---\n         BAL   R14,EOPCHK                End of Process ?\n         LTR   R15,R15\n         BNZ   @M_EXIT2\n*--- Read first record ---\n*        TPUT  =CL20'READ DA',20\n         L     R02,RV1DATBA              R02 <- Read Buffer Address\n         READ  DECB11,SF,PDSFDATA,(R02),'S' Read Data Area\n         CHECK DECB11                     ( First Block )\n         LA    R01,1\n         ST    R01,DTERECD               Initialize Block Counter\n         LH    R02,PDSFDATA+X'3E'        Load BlockSize\n         L     R01,DECB11+16             Get Read Length\n         SH    R02,14(R01)\n         STH   R02,READ_LENGTH           Save Read Length\n*--- End of Process ? ---\n         BAL   R14,EOPCHK                End of Process ?\n         LTR   R15,R15\n         BNZ   @M_EXIT2\n*--- Search Strings ---\n         BAL   R11,@SRCHSTR              Search Strings\n*--- Convert TTR ---\n         BAL   R14,@CNVTTR               Convert MBCCHHR -> TTR\n*--- Analyze Screen update ---\n         BAL   R11,@ANLUPDT              Analyze Screen Update\n* --- Search TTR from Directory Table ---\n         L     R07,RV1TBSPA              R07 <- Directory Table Area\n@M_LOP01 EQU   *\n         CL    R07,RV1TBSPP              If Last Table Entry ?\n         BNL   @M_NOF                      goto @M_NOTF\n         CLC   8(3,R07),CURR_TTR         If TTR is Equal\n         BE    @M_FND                      goto @M_FND\n         LA    R07,12(R07)               Shift Next Table\n         B     @M_LOP01                  Loop\n*-------- TTR Found in Directory Table -----------------------------\n@M_FND   EQU   *\n         OI    FLAG,X'04'                Member Exist.\n         MVC   DTENAME(8),0(R07)         Copy Member Name\n         OI    11(R07),X'01'             Member Found Flag Set.\n         CLI   RV1ADDC,C'Y'              If No Add Current Member ?\n*        BNE   @M_DUM_L                    goto @M_DUM_L\n*        BNE   @M_ANAL1                    goto @M_ANAL1\n         BNE   @M_COPY\n@M_FND2  EQU   *\n         OI    FLAG,X'01'                Set Table Add Flag\n         B     @M_COPY\n*-------- TTR not Found in Directory Table -------------------------\nMVDTEDATA MVC   DTEDATA(0),0(R15)         Copy Data Area\n@M_NOF   EQU   *\n         OI    FLAG,X'01'                Set Table Add Flag\n         MVI   DTENAME,C'+'              Member Name ( +TTR )\n         LA    R01,DTENAME+1\n         CALL  RV1BTH,(CURR_TTR,(R01),3)\n         MVI   DTENAME+7,C' '            Member Name ( +TTR )\n*-------- Copy DTE Area --------------------------------------------\n@M_COPY  EQU   *\n         MVC   DTETTRB(4),CURR_TTR       Copy TTR ( Binary )\n         MVC   DTECHRB(8),CURR_CHR       Copy MBBCCHHR ( binary )\n         LA    R01,DTETTR\n         CALL  RV1BTH,(CURR_TTR,(R01),3) Copy TTR ( Character )\n*\n         L     R15,RV1DATBA              R07 <- Read Buffer Address\n         LH    R14,READ_LENGTH           R10 <- Read Length\n         LA    R01,L'DTEDATA\n         CLR   R14,R01                   If Read Length >= 60 ?\n         BNL   @M_SKIP                     goto @M_SKIP\n         BCTR  R14,0\n         MVI   DTEDATA,C' '\n         MVC   DTEDATA+1(L'DTEDATA-1),DTEDATA\n*        STC   R14,*+5\n*        MVC   DTEDATA(0),0(R15)         Copy Data Area\n         EX    R14,MVDTEDATA\n         B     @M_SKIPX\n@M_SKIP  EQU   *\n         MVC   DTEDATA(L'DTEDATA),0(R15) Copy Data Area\n@M_SKIPX EQU   *\n         BAL   R11,CONVDCHR              Convert Display able Character\n@M_ANAL1 EQU   *\n         BAL   R11,@COMPT_LEN            Record Analyze.\n*-------- Read Next Records ----------------------------------------\n@M_DUM_L EQU   *                         2'nd Block\n*        TPUT  =CL20'READ D2',20\n         L     R02,RV1DATBA              R02 <- Read Buffer Address\n         READ  DECB12,SF,PDSFDATA,(R02),'S'\n         CHECK DECB12\n         L     R01,DTERECD               Add block length + 1\n         LA    R01,1(R01)\n         ST    R01,DTERECD\n         LH    R02,PDSFDATA+X'3E'        Load BlockSize\n         L     R01,DECB12+16             Get Read Length\n         SH    R02,14(R01)\n         STH   R02,READ_LENGTH           Save Read Length\n*--- End of Process ? ---\n         BAL   R14,EOPCHK                End of Process ?\n         LTR   R15,R15\n         BNZ   @M_EXIT2\n*\n         BAL   R11,@COMPT_LEN\n*\n         BAL   R11,@SRCHSTR\n         BAL   R14,@CNVTTR               Convert MBBCCHHR -> TTR\n         BAL   R11,@ANLUPDT              Analyze Screen Show\n*\n         B     @M_DUM_L\n*-------- Next Member Process --------------------------------------\n@M_NEXT  EQU   *                         End of File.\n         L     R01,DTERECD               If Member Have No Records\n         LTR   R01,R01                     Skip\n         BZ    @M_NEXTX\n         TM    FLAG,X'04'\n         BO    MN#EXIST\n         TM    FLAG,X'08'\n         BO    MN#OVER\n         TM    FLAG,X'10'\n         BO    MN#BORDER\n         MVI   DTEATTR,ATTR_REC\n         B     MN#ATTRX\nMN#EXIST EQU   *\n         MVI   DTEATTR,ATTR_CUR\n         B     MN#ATTRX\nMN#OVER  EQU   *\n         MVI   DTEATTR,ATTR_EXT\n         B     MN#ATTRX\nMN#BORDER EQU  *\n         MVI   DTEATTR,ATTR_BDR\n         B     MN#ATTRX\nMN#ATTRX EQU   *\n         MVI   DTEDATTR,ATTR_DOK\n         TM    B#RECFM,RECFM_U\n         BO    MN#RECFM_U\n         TM    B#RECFM,RECFM_V\n         BO    MN#RECFM_V\n         TM    B#RECFM,RECFM_F\n         BO    MN#RECFM_F\nMN#RECFM_U EQU *\n         CLC   B#BLKSZ(2),DTEBSZ\n         BL    MN#RECFM_NG\n         B     MN#RECFM_X\nMN#RECFM_V EQU *\n         TM    DTERFM,X'80'\n         BO    MN#RECFM_NG\n         LH    R01,B#BLKSZ\n         CH    R01,DTEBSZ\n         BL    MN#RECFM_NG\n         LH    R01,B#LRECL\n         CH    R01,DTELRL\n         BL    MN#RECFM_NG\n         B     MN#RECFM_X\nMN#RECFM_F EQU *\n         LH    R01,B#BLKSZ\n         CH    R01,DTEBSZ\n         BL    MN#RECFM_NG\n         LH    R14,DTERLNG\n         LH    R01,B#LRECL\n         SRDA  R14,32\n         DR    R14,R01\n         LTR   R14,R14\n         BNZ   MN#RECFM_NG\n*\n         B     MN#RECFM_X\nMN#RECFM_NG EQU *\n         OI    DTERFM,X'40'              NG Record Flag\n         MVI   DTEDATTR,ATTR_DNG\n         B     MN#RECFM_X\nMN#RECFM_X EQU *\n         MVC   ERRMSG99,=CL80' >'\n         MVC   ERRMSG99+05(8),DTENAME\n         MVC   ERRMSG99+15(6),DTETTR\n         TM    DTERFM,X'80'\n         BO    NM#DEBUG1\n         MVI   ERRMSG99+25,C'V'\nNM#DEBUG1 EQU  *\n         TM    DTERFM,X'10'\n         BO    NM#DEBUG2\n         MVI   ERRMSG99+26,C'F'\nNM#DEBUG2 EQU  *\n*        CALL  RV1BTH,(DTERFM,ERRMSG99+25,1)\n         CALL  RV1BTH,(DTERLNG,ERRMSG99+30,2)\n         CALL  RV1BTH,(DTELRL,ERRMSG99+35,2)\n         CALL  RV1BTH,(DTEBSZ,ERRMSG99+40,2)\n         IC    R01,FLAG\n         STC   R01,WK#F\n         CALL  RV1BTH,(WK#F,ERRMSG99+45,1)\n*        TPUT  ERRMSG99,80\n* ------------------------------------------------\n*+++     BAL   R11,DCONFIG\n* ------------------------------------------------\n         TM    FLAG,X'01'                If Not Add Member.\n         BNO   @M_NEXTX\n         TM    FLAG,X'02'                No Search Strings\n         BNO   @M_NEXTX\n*        L     R01,DTERECD               If Member is No-Records\n*        LTR   R01,R01                     Goto @M_NEXTX\n*        BZ    @M_NEXTX\n         BAL   R11,DT#MAKE               Data Table Make\n*\n@M_NEXTX EQU   *\n         B     @M_FIRST                  goto Next Record\n@M_EXIT1 EQU   *                         member read terminate.\n         TM    FLAG,X'01'\n         BNO   @M_EXIT2\n         BAL   R11,DT#MAKE\n@M_EXIT2 EQU   *                         member read terminate.\n         B     @R_EXIT\n@R_EXIT  EQU   *                         read terminate .\n*        LH    R01,B#BLKSZ\n* --- RV1TRC ---\n         LH    R01,PDSFDATA+X'3E'        Load BlockSize\n         ST    R01,WK#F\n         MVC   WK#F2,RV1DATBA\n         RV1#TRCG ((R06),REVT006,RV1DATBX,WK#F2,WK#F),VL\n* --- RV1TRC ---\n         LH    R01,PDSFDATA+X'3E'        Load BlockSize\n         L     R02,RV1DATBA\n         FREEMAIN RC,LV=(R01),A=(R02)    FreeMain Read Buffer\n         CLOSE (PDSFDATA)\n         RV1#TRCR COMM=6\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=0\n*--------- Data Area Read Buffer GETMAIN faile ---------------------\n@RA_ERR1 EQU   *\n         CLOSE (PDSFDATA)\n         RV1#TRCR COMM=6\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=1\n*-------------------------------------------------------------------\n*--- End of Process ? ( Check Last Data Access Area )\n*-------------------------------------------------------------------\nEOPCHK   EQU   *\n*        MVC   ERRMSG99,=CL80' >'\n*        CALL  RV1BTH,(CURR_TTR,ERRMSG99+10,3)\n*        CALL  RV1BTH,(B#ETTR,ERRMSG99+10,3)\n*        TPUT  ERRMSG99,80\n         CLI   RV1EXTO,C'O'              If Over DS1LSTAR Field ?\n         BE    EOPOPT1                     Yes : goto EOPOPT1\n         CLC   CURR_TTR(3),B#ETTR        If Greater than DS1LSTAR ?\n         BNL   EOPX_X                      Yes goto Exit\n         B     EOPX_OK                   no ended Resume Next!\nEOPOPT1  EQU   *\n         CLC   CURR_TTR(3),B#ETTR        If DS1LSTAR ?\n         BE    EOPLSTON                    Equal -> EOPLSTON\n         BL    EOPNOLST                    Less  -> EOPNOLST\n         OI    FLAG,X'28'                Over DS1LSTAR Filed Flag\n         B     EOPNOLST\nEOPLSTON EQU   *\n         OI    FLAG,X'10'                On DS1LSTAR Border Line\nEOPNOLST EQU   *\n         CLC   B#TCHR(7),PDSFDATA+5      If End of Allocation ?\n         BL    EOPX_X                      Yes goto Exit\n         CLC   CURR_CHR(8),PDSFDATA+5    CHR same with the last time\n         BNE   EOPNOSAM                    No resume next\n         B     EOPX_X                    Same Record Readed.\nEOPNOSAM EQU   *\n         MVC   CURR_CHR(8),PDSFDATA+5    Save Current MBBCCHHR\n         B     EOPX_OK\n*\nEOPX_X   EQU   *\n         LA    R15,8\n         BR    R14\nEOPX_OK  EQU   *\n         XR    R15,R15\n         BR    R14\n*-------------------------------------------------------------------\n* -- Convert Un-Displayed Code to Substitution Mark. --\n*\n* Un-Displayed Character is See Below manual.\n*\n*  Interactive System Productivity Facility (ISPF)\n*  Planning and Customizing\n*  OS/390 Version 1 Release 3.0\n*  Document Number SC28-1298-01\n*\n*   4.7.6 Translation Table for Edit Terminal Output Characters\n*\n*  RV1#ETOP is Same TTETO Table.\n*    Replace RV1#ETOP Csect Provided You Modified TTETO Table.\n*\n*  TTETO Table in 'ISP.SISPSAMP(ISROWNTT)'.\n*\n*-------------------------------------------------------------------\nCONVDCHR EQU   *\n         LA    R14,DTEDATA\n         LA    R15,L'DTEDATA\nCC#LOP1  EQU   *\n         XR    R01,R01\n         IC    R01,0(R14)\n         LA    R01,TTETO(R01)\n         CLI   0(R01),X'15'\n         BNE   CC#LOP1N\n         MVI   0(R14),C'.'\nCC#LOP1N EQU   *\n         LA    R14,1(R14)\n         BCT   R15,CC#LOP1\n         BR    R11\n*-------------------------------------------------------------------\n*\n*-------------------------------------------------------------------\nDT#MAKE  EQU   *\n*        TPUT  =CL20'*MAKE*',20\n         L     R15,DTLASTE               Processing Table Number Set\n         LA    R15,1(R15)\n         ST    R15,DTLASTE\n         L     R01,DTCURRP               If not Table Over ?\n         S     R01,DTCURR\n         LA    R01,DTELAST(R01)\n         L     R02,=A(DTLENGTH)\n         CLR   R01,R02\n         BNH   DT#MAKE2\n         L     R01,=A(DTLENGTH)\n         GETMAIN RC,LV=(R01)             Data Area Table Area\n         LTR   R15,R15\n         BNZ   @RA_ERR1\n* --- RV1TRC ---\n         ST    R01,WK#F\n         L     R01,=A(DTLENGTH)\n         ST    R01,WK#F2\n         RV1#TRCG ((R06),REVT005,DTX,WK#F,WK#F2),VL\n         L     R01,WK#F\n* --- RV1TRC ---\n         USING DTHEADER,R01\n         MVC   DTHPOSF,DTLASTE           Set First Entry Number\n         XC    DTHPOSL,DTHPOSL           Clear Last Entry Number\n         XC    DTHNEXT,DTHNEXT           Clear Next Table Address\n         L     R02,DTLAST                Store Address ( Last )\n         ST    R02,DTHPREV               Store Previous Addres\n         DROP  R01\n*                                          in Current Table\n         USING DTHEADER,R02\n         ST    R01,DTHNEXT               Store Next Address\n         DROP  R02\n*                                          in Previous Table\n         ST    R01,DTLAST                Store Address ( Last )\n         ST    R01,DTCURR                Store Address ( Current )\n         LA    R01,DTHL(R01)             Shift Position\n         ST    R01,DTCURRP               Store Address ( Position )\nDT#MAKE2 EQU   *\n*        MVC   ERRMSG99+10(8),DTENAME\n*        MVC   ERRMSG99+20(4),DTETTR\n*        CALL  RV1BTH,(DTERLNG,ERRMSG99+30,2)\n*        CALL  RV1BTH,(DTEBSZ,ERRMSG99+40,2)\n*        TPUT  ERRMSG99,80\n*\n         L     R01,DTCURRP               Copy Table Entry\n         MVC   0(DTELAST,R01),DTEFIRST\n         LA    R01,DTELAST(R01)          Shift Next Entry\n         ST    R01,DTCURRP               Store Address ( Position )\n*\n         L     R01,DTCURR\n         USING DTHEADER,R01\n         MVC   DTHPOSL,DTLASTE           Set Last Entry Number\n         DROP  R01\n         BR    R11\n*-------------------------------------------------------------------\n*-------- Compute Maximam Logical Record Length --------------------\n*-------- << greatest common divisor of Euclid >> ------------------\n*-------------------------------------------------------------------\n@COMPT_LEN EQU *\n         LH    R02,READ_LENGTH\n         LH    R01,DTERLNG\n@CL_LOP1 EQU   *\n         LTR   R01,R01\n         BZ    @CL_LOP1X\n         LR    R14,R02\n         SRDA  R14,32\n         DR    R14,R01\n         LR    R02,R01\n         LR    R01,R14\n         B     @CL_LOP1\n@CL_LOP1X EQU  *\n         STH   R02,DTERLNG\n*        MVC   WKMES,=CL80' > '\n*        CALL  RV1BTH,(DTERLNG,WKMES+10,2)\n*        CALL  RV1BTH,(READ_LENGTH,WKMES+20,2)\n*        TPUT  WKMES,80\n*-------------------------------------------------------------------\n*-------- Compute Maximam Read Record Length -----------------------\n*-------------------------------------------------------------------\n         TM    DTERFM,X'20'\n         BNO   @CL_SKP20\n         OI    DTERFM,X'10'              Not Fixed Record Format\n         B     @CL_SKP21\n@CL_SKP20 EQU   *\n         CLC   DTEBSZ,=H'0'\n         BE    @CL_SKP21\n         CLC   DTEBSZ,READ_LENGTH\n         BE    @CL_SKP21\n         OI    DTERFM,X'20'              Last length Unmatch\n@CL_SKP21 EQU   *\n         CLC   DTEBSZ,READ_LENGTH\n         BNL   @CL_SKP2X\n         MVC   DTEBSZ(2),READ_LENGTH     Maximam Block Length\n@CL_SKP2X EQU   *\n*-------------------------------------------------------------------\n*-------- Check Record Format --------------------------------------\n*-------------------------------------------------------------------\n* --- Recfm:V Block Size Check ---\n         L     R02,RV1DATBA\n         LH    R15,0(R02)                Load Block Size from Record\n         CH    R15,READ_LENGTH           Greater Maximam Length ?\n         BNE   @CL_V_NG\n* --- Recfm:V Record Length Check ---\n         L     R02,RV1DATBA              R02 <- Read Buffer\n         LH    R01,READ_LENGTH\n         LA    R01,0(R01,R02)            R01 <- Read Buffer Last point.\n         LA    R02,4(R02)                Shift BLKSZ Area\n@CL_LOP3 EQU   *\n         LH    R15,0(R02)                Load Record Length\n         LTR   R15,R15\n         BZ    @CL_V_NG\n         CH    R15,DTELRL                Compare Lrecl\n         BNH   @CL_SKP3\n         STH   R15,DTELRL                Store Max Lrecl\n*        STM   R00,R15,@CTREGS\n*        CALL  RV1BTH,((R02),ERRMSG99+20,2)\n*        CALL  RV1BTH,(DTELRL,ERRMSG99+30,2)\n*        TPUT  ERRMSG99,80\n*        LM    R00,R15,@CTREGS\n@CL_SKP3 EQU   *\n         LA    R14,0(R02,R15)\n         CLR   R14,R01                   If Last Pos : Next Rec Addr.\n         BE    @CL_V_OK                   equal   -> OK\n         BH    @CL_V_NG                   greater -> NG\n         LR    R02,R14\n         B     @CL_LOP3\n@CL_V_NG EQU   *\n         OI    DTERFM,X'80'              Set No-Variable Flag.\n@CL_V_OK EQU   *\n         BR    R11\n*-------------------------------------------------------------------\n*-------- Analyze Screen Update ------------------------------------\n*-------------------------------------------------------------------\n@AU_EXTENT DS  XL1\n         DS    0F\n@ANLUPDT EQU   *\n         CLC   @AU_EXTENT(1),RV1EXTC\n         BNE   @AU_SKP1\n         TM    FLAG,X'40'\n         BO    @AU_SKPX\n         TM    FLAG,X'20'\n         BNO   @AU_SKPX\n@AU_SKP1 EQU   *\n         MVC   @AU_EXTENT(1),RV1EXTC\n         TM    FLAG,X'08'\n         BO    @AU_SKP2\n         MVC   RV1PRC,=CL3'USE'\n         B     @AU_SKP3\n@AU_SKP2 EQU   *\n         MVC   RV1PRC,=CL3'UNU'\n         OI    FLAG,X'40'                Set 'Now Overed DS1LSTAR'\n         NI    FLAG,X'DF'\n*        B     @AU_SKP3\n@AU_SKP3 EQU   *\n         CALL  ISPLINK,(CONTROL,DISPLAY,LOCK),VL Panel Lock\n         CALL  ISPLINK,(ADDPOP),VL       Make Popup Panel\n         CALL  ISPLINK,(DISPLAY,PANELANL),VL Analysis Panel Show\n         CALL  ISPLINK,(REMPOP),VL       Remove Popup Panel\n@AU_SKPX EQU   *\n         BR    R11\n*-------------------------------------------------------------------\n*-------- Search String --------------------------------------------\n*-------------------------------------------------------------------\nCLRV1DATBA CLC   0(0,R10),RV1SSTRR\n@SRCHSTR EQU   *\n*\n         LH    R15,RV1SSTRL                      R15 <- Search String L\n         LTR   R15,R15\n         BZ    @SRCH_BP\n         BCTR  R15,0\n         L     R10,RV1DATBA                      R10 <- Read Buffer\n         XR    R09,R09\n         LH    R09,READ_LENGTH                   R09 <- Read Length\n         LTR   R09,R09\n         BZ    @SRCH_NG\n         SH    R09,RV1SSTRL                      L'Read - L'Srch Str\n         LA    R10,0(R10,R09)                    Chk Pos <- Buf + L'Chk\n         LA    R09,1(R09)                        + 1\n@SRCH_LP EQU   *\n*        STC   R15,*+5\n*        CLC   0(0,R10),RV1SSTRR\n         EX    R15,CLRV1DATBA\n         BE    @SRCH_OK\n         BCTR  R10,0\n         BCT   R09,@SRCH_LP\n         B     @SRCH_NG\n@SRCH_BP EQU   *\n         OI    FLAG,X'02'\n         BR    R11\n@SRCH_OK EQU   *\n         OI    FLAG,X'02'\n         BR    R11\n@SRCH_NG EQU   *\n         BR    R11\n*-------------------------------------------------------------------\n*-------- Dataset DCB ----------------------------------------------\n*-------------------------------------------------------------------\nDC#FLAG  DS    XL1'00000000'\n*                  o           : 0:No Add to Table, 1:Add to Table\n*\n         DS    0D\nDCONFIG  EQU   *\n         NI    DC#FLAG,X'7F'             Flag Clear\n*        LH    R07,FMTTBLP\n*        LTR   R07,R07\n         LA    R07,1\nDC#LOP1  EQU   *\n         CH    R07,FMTTBLP\n         BH    DC#LOP1X\n*\n         LR    R01,R07\n         BCTR  R01,0\n         MH    R01,FMTTBLN\n         BZ    DC#ADD\n*\n         L     R02,FMTTBLA\n         LA    R01,0(R01,R02)\n         USING DFORMATT,R01\n* --- Same DCB Member Search from DFORMATT ---\n         TM    DTERFM,X'80'              If current not Recfm:V ?\n         BO    DC#SAMEV\n         TM    DFTRFM,X'80'              If Table Recfm:V ?\n         BNO   DC#SAMEV\n         CLC   DTELRL(2),DFTVLRL\n         BNE   DC#SAMEV\n         CLC   DTEBSZ(2),DFTBLKSZ\n         BNE   DC#SAMEV\n         OI    DC#FLAG,X'80'             Ok!! Same Record Found.\n         B     DC#SAMEV\nDC#SAMEV EQU   *\n         TM    DTERFM,X'10'              If current not Recfm:F ?\n         BO    DC#SAMEF\n         TM    DFTRFM,X'40'              If Table Recfm:F ?\n         BNO   DC#SAMEF\n         CLC   DTERLNG(2),DFTFLRL\n         BNE   DC#SAMEF\n         CLC   DTEBSZ(2),DFTBLKSZ\n         BNE   DC#SAMEF\n         OI    DC#FLAG,X'80'             Ok!! Same Record Found.\n         B     DC#SAMEF\nDC#SAMEF EQU   *\n         TM    DFTRFM,X'20'              If Table Recfm:U ?\n         BNO   DC#SAMEU\n         CLC   DTEBSZ(2),DFTBLKSZ\n         BNE   DC#SAMEU\n         OI    DC#FLAG,X'80'             Ok!! Same Record Found.\n         B     DC#SAMEU\nDC#SAMEU EQU   *\n*\n         TM    DTERFM,X'80'              If Current Not Recfm=V ?\n         BO    DC#NOTV\n         TM    DFTRFM,X'80'              If Table Not Recfm=V ?\n         BNO   DC#NOTV\n         CLC   DTEBSZ(2),DFTBLKSZ        If Current BLKSZ > Table BLKSZ\n         BH    DC#NOTV\n         CLC   DTELRL(2),DFTVLRL         If Current LRECL > Table LRECL\n         BH    DC#NOTV\n         TM    FLAG,X'04'                If Member Exist ?\n         BO    DC#VEXIST\n         L     R02,DFTNOFM               Add Counter\n         LA    R02,1(R02)                 (Match of Member NoExist)\n         ST    R02,DFTNOFM\n         B     DC#VX\nDC#VEXIST EQU  *\n         L     R02,DFTEXTM               Add Counter\n         LA    R02,1(R02)                 (Match of Member Exist)\n         ST    R02,DFTEXTM\n         B     DC#VX\nDC#NOTV  EQU   *\n         TM    FLAG,X'04'                If Member Exist ?\n         BO    DC#VEXIST2\n         L     R02,DFTNOFU               Add Counter\n         LA    R02,1(R02)                 (UnMatch of Member NoExist)\n         ST    R02,DFTNOFU\n         B     DC#VX\nDC#VEXIST2 EQU  *\n         L     R02,DFTEXTU               Add Counter\n         LA    R02,1(R02)                 (UnMatch of Member Exist)\n         ST    R02,DFTEXTU\n         B     DC#VX\nDC#VX    EQU   *\nDC#ADD   EQU   *\n*\n         DROP  R01\n         LA    R07,1(R07)                Table count up\n         B     DC#LOP1\nDC#LOP1X EQU   *\n         BR    R11\n*-------------------------------------------------------------------\n*-------- convert mbcchhr to ttr -----------------------------------\n*-------------------------------------------------------------------\n         DS    0F\n@CNVTTR  EQU   *\n         STM   R00,R15,@CTREGS\n         L     R01,PDSFDATA+44           Load DEB Address\n         N     R01,=X'00FFFFFF'          Clear IFLGS Area\n         LA    R02,PDSFDATA+5            MBCCHHR Address\n         XR    R15,R15\n         IC    R15,0(R02)\n         LA    R15,1(R15)                Get Current Extents\n         STC   R15,RV1EXTC               Update RV1EXTC Area\n         L     R14,CVTPTR\n         USING CVTMAP,R14\n         L     R15,CVTPRLTV\n         DROP  R14\n         BALR  R14,R15                   call CVTPRLTV\n         ST    R00,CURR_TTR              Save TTR\n         LM    R00,R15,@CTREGS\n         BR    R14\n@CNVCHR  EQU   *\n         STM   R03,R15,REGS\n         L     R10,CVTPTR\n         USING CVTMAP,R10\n         L     R15,CVTPCNVT\n         DROP  R10\n         BALR  R14,R15\n         LM    R03,R15,REGS\n         BR    R14\n*-------------------------------------------------------------------\n*-------- i/o error routine ( po ) ---------------------------------\n*-------------------------------------------------------------------\nIOERR_P  EQU   *\n         SYNADAF ACSMETH=BPAM\n         STM   R01,R15,REGS\n         LR    R12,R01\n         LA    R01,91(R12)\n         MVC   ERRMSG04+23(15),0(R01)\n         CALL  RV1BTH,(CURR_TTR,ERRMSG04+16,3)\n         LA    R01,8(R12)\n         CALL  RV1BTH,((R01),ERRMSG04+53,4)\n         LA    R01,12(R12)\n         CALL  RV1BTH,((R01),ERRMSG04+44,2)\n         TPUT  ERRMSG04,L'ERRMSG04\n@IOERR_X EQU   *\n         LM    R01,R15,REGS\n         SYNADRLS\n         B     @R_EXIT\nPDSFDATA DCB   DSORG=PO,MACRF=(R),DDNAME=@@@@,                         *\n               SYNAD=IOERR_P,EODAD=@M_NEXT,RECFM=U,BLKSIZE=32760\n*\n         DS    0F\n* --- SAVE AREA ---\nSAVEAREA DS    18F                               SAVEAREA\n* --- Work Area ---\nCURR_CHR DS    XL8\n* --- Work Area ---\nWK#F     DS    F\nWK#F1    DS    F\nWK#F2    DS    F\nDTX      DC    CL8'DT'\nRV1DATBX DC    CL8'RV1DATB'\nREVT005  DC    CL8'REVT005'\nREVT006  DC    CL8'REVT006'\nWKMES    DC    CL80'> '\n* --- Register Save ( work ) area ---\nREGS     DS    18F                               WORK SAVEAREA\n@CTREGS  DS    18F                               WORK SAVEAREA\n         DS    0D\n* --- Panel RC Packed Area ---\nPK_AREA  DC    PL8'0'\nUPK_AREA DC    CL16' '\n*                                1\n*                    6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1\nEDMASK   DC    XL16'40202020202020202020202020202120'\nEDWORK   DS    XL16\n         DS    0F\n* --- Data Read Length ---\nREAD_LENGTH DS H                         Current Readed Data Length\n* --- Data Inspection ---\n*TERLNG     DS H                         Greatest Common Divisor\n*AX_BLKSZ   DS H                         Maximam Data length\n*TERFM      DS BL1'00000000'\n*                  o                     Not Variable Record.\n*\n* --- Current Process TTR ---\n         DS    0F\nCURR_TTR DS    XL4                       work ttr\n* --- work of mbbcchhr ---\n*--- messages ---\n*                   |....+....1....+....2....+....3....+....4....+....5\n*              ....+....6....+....7....+....8\nERRMSG04 DC    CL80'< I/O Error TTR:@@@@@@ @@@@@@@@@@@@@@@ LENG:@@@@ BUF\n               A:@@@@@@@@'\nERRMSG99 DC    CL80'< '\n*-------------------------------------------------------------------\n         COPY  RV1#ETOP\n         COPY  RV1#ISPC\n*-------------------------------------------------------------------\n         DS    0D\n         RV1#DTE SECTTYP=NODSECT\n*-------------------------------------------------------------------\n         LTORG\n         DSECT\n*--- Revive Common Dsect -------------------------------------------\n         COPY RV1#COMM\n*-------------------------------------------------------------------\n         COPY RV1#DTH\n*-------------------------------------------------------------------\n         RV1#FMTB\n*-------------------------------------------------------------------\n         CVT   DSECT=YES,LIST=YES\nR00      EQU   00\nR01      EQU   01\nR02      EQU   02\nR03      EQU   03\nR04      EQU   04\nR05      EQU   05\nR06      EQU   06\nR07      EQU   07\nR08      EQU   08\nR09      EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   RV1DARD\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#DSI": {"ttr": 1801, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x02\\x97\\x02\\x97\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 663, "newlines": 663, "modlines": 0, "user": "KIMU"}, "text": "         START\n* -----------------------------------------------------------------\n         DC   C'<< Revive ! : Get Dataset Information >>'\n         COPY RV1#HDR\n         PRINT NOGEN\n* --- Start of Process --------------------------------------------\nRV1DSI   CSECT\n         SAVE  (14,12),T,*\n         BALR  R03,0\n         USING *,R03,R04,R05             Base Reg. R03,R04,R05\n         LA    R04,2048(R03)             2'ND Base Reg\n         LA    R04,2048(R04)\n         LA    R05,2048(R04)             3'ND Base Reg\n         LA    R05,2048(R05)\n         ST    R13,SAVEAREA+4            Save A(OLD SaveArea)\n         LR    R12,R13\n         LA    R13,SAVEAREA\n         ST    R13,8(R12)                Save A(NEW SaveArea)\n         LR    R12,R01                   Load Dsect Address\n         USING REVIVED,R12\n*-------------------------------------------------------------------\n         RV1#TRCC BASE=3,COMM=12\n*-------------------------------------------------------------------\n* --- Job File Control Block ---\n         LA    R11,RV1JFCB               Load JFCB Address\n         USING JFCBSECT,R11\n*\n         MVC   RV1TVOL,JFCBVOLS          Volume Serial\n         MVC   VOLUME,JFCBVOLS           Volume Serial for CAMLST\n         MVC   B#DSORG,JFCDSRG1          Dataset Organization\n         MVC   B#RECFM,JFCRECFM          Record Format\n*\n         MVC   O#RECFM,=CL3'?'           Set Default Char(Unknown)\n         LA    R01,O#RECFM               R01 <- RECFM Out Area\n         TM    JFCRECFM,X'C0'            If not RECFM=U ?\n         BNO   @JSKP11                     goto @JSKP11\n         MVI   0(R01),C'U'               Set 'U' to RECFM Output Area\n         LA    R01,1(R01)                  and Shift\n         B     @JSKP1X\n@JSKP11  EQU   *\n         TM    JFCRECFM,X'80'            If not RECFM=F ?\n         BNO   @JSKP12                     goto @JSKP12\n         MVI   0(R01),C'F'               Set 'F' to RECFM Output Area\n         LA    R01,1(R01)                  and Shift\n         B     @JSKP1X\n@JSKP12  EQU   *\n         TM    JFCRECFM,X'40'            If not RECFM=V ?\n         BNO   @JSKP13                     goto @JSKP13\n         MVI   0(R01),C'V'               Set 'V' to RECFM Output Area\n         LA    R01,1(R01)                  and Shift\n         B     @JSKP1X\n@JSKP13  EQU   *\n@JSKP1X  EQU   *\n         TM    JFCRECFM,X'10'            If not RECFM=B ?\n         BNO   @JSKP21                     goto @JSKP21\n         MVI   0(R01),C'B'               Set 'B' to RECFM Output Area\n         LA    R01,1(R01)                  and Shift\n         B     @JSKP2X\n@JSKP21  EQU   *\n@JSKP2X  EQU   *\n         TM    JFCRECFM,X'08'            If not RECFM=S ?\n         BNO   @JSKP31                     goto @JSKP31\n         MVI   0(R01),C'S'               Set 'S' to RECFM Output Area\n         LA    R01,1(R01)                  and Shift\n         B     @JSKP3X\n@JSKP31  EQU   *\n         TM    JFCRECFM,X'04'            If not RECFM=A ?\n         BNO   @JSKP32                     goto @JSKP32\n         MVI   0(R01),C'A'               Set 'A' to RECFM Output Area\n         LA    R01,1(R01)                  and Shift\n         B     @JSKP3X\n@JSKP32  EQU   *\n         TM    JFCRECFM,X'02'            If not RECFM=M ?\n         BNO   @JSKP33                     goto @JSKP33\n         MVI   0(R01),C'M'               Set 'M' to RECFM Output Area\n         LA    R01,1(R01)                  and Shift\n         B     @JSKP3X\n@JSKP33  EQU   *\n@JSKP3X  EQU   *\n*\n         MVC   B#BLKSZ,JFCBLKSI          Copy Block Size\n*        MVC   O#BLKSZ,JFCBLKSI          Copy Block Size\n* --- records# of 1 track ---\n*        TPUT  =CL10'* START *',10\n         LA    R02,B#BLKSZ\n         CALL  RV1TC,(VOLUME,(R02),R)\n*        TPUT  =CL10'* END   *',10\n* --- Logical Record Length ---\n         MVC   B#LRECL,JFCLRECL          Copy Logical Record Length\n*        MVC   O#LRECL,JFCLRECL          Copy Logical Record Length\n* --- Directory Block ---\n         MVC   O#DBLK,JFCBDQTY           Directory Block\n* --- drop jfcb dsect ---\n         DROP  R11\n* --- DSCB type 4 ( volume information ) ---\n         XC    DSCB4,DSCB4               Clear DSCB for Type4\n         MVI   DSCB4DSN,X'04'            Move to DSCB 4 Name\n         MVC   DSCB4DSN+1(43),DSCB4DSN\n         OBTAIN DSCBFMT4                 Get DSCB 4\n         LTR   R15,R15                   If not Error ?\n         BZ    @DSCB4CK                    goto @DSCB4CK\n         TPUT  ERRMSG02,L'ERRMSG02       ***************************\n@DSCB4CK EQU   *\n         USING DSCBSEC4,R11              DSCB4 Base Reg. R11\n         LA    R11,DSCB4\n         MVC   B#CYL#,DS4DSCYL           Copy Logical Cylindar\n         MVC   B#TRK#,DS4DSTRK           Copy Track in a Cylindar\n         DROP  R11\n* --- DSCB type 1 ( dstaset formation ) ---\n         XC    DSCB1,DSCB1               Clear Type1 DSCB Area\n         LA    R01,RV1DSNC               Load Dataset Name Address\n         MVC   DSCB1DSN(44),0(R01)       Copy DSN to OBTAIN Area\n         OBTAIN DSCBFMT1                 Get Type1 DSCB\n         LTR   R15,R15                   If not Error ?\n         BZ    @DSCB1CK                    goto @DSCB1CK\n         TPUT  ERRMSG03,L'ERRMSG03       *****************************\n@DSCB1CK EQU   *\n         USING DSCBSEC1,R11              DSCB1 Base Reg. R11\n         LA    R11,JFCB1\n* --- last used track ---\n         MVC   B#ETTR,DS1LSTAR           Copy Last Used Track\n*\n         LA    R01,DS1LSTAR              Copy Last Used Track(Hex)\n         LA    R02,O#AUP2\n         CALL  RV1BTH,((R01),(R02),3)\n*\n         L     R00,DS1LSTAR              R00 <- DS1LSTAR\n         N     R00,=X'FFFFFF00'          Clear n Records ( TTRn )\n         L     R01,VPDSF                 R01 <- PDSF DCB Address\n         L     R01,44(R01)               R01 <- DEB Address\n         N     R01,=X'00FFFFFF'          Clear IFLGS Area\n*        LA    R01,0(R01)\n         LA    R02,B#ECHR                Result Address\n         BAL   R14,@CNVCHR               Convert TTRx -> MBBCCHHR\n         LA    R01,B#ECHR\n         LA    R02,O#AUP\n         CALL  RV1BTH,((R01),(R02),8)    Convert MBBCCHHR -> Hex Char\n* --- Start Address ---\n*                     T T R n\n         L     R00,=X'00000100'          First TTRx Address\n         L     R01,VPDSF                 R01 <- PDSF DCB Address\n         L     R01,44(R01)               R01 <- DEB Address\n         N     R01,=X'00FFFFFF'          Clear IFLSG Area\n         LA    R02,W_CHR                 Result Address\n         BAL   R14,@CNVCHR               Convert TTRx -> MBBCCHHR\n         LA    R01,O#ASP\n         CALL  RV1BTH,(W_CHR,(R01),8)    Convert MBBCCHHR -> Hex Char\n* --- Extent ---\n         MVC   O#EXT,DS1NOEPV            Copy Extent\n* --- System Code ---\n         MVC   O#SYSCD,DS1SYSCD          Copy System Code\n* --- creation date ---\n         XR    R01,R01                   Clear\n         IC    R01,DS1CREDT              R01 <- Creation Date ( YY )\n         CVD   R01,PK_AREA\n         UNPK  UPK_AREA(8),PK_AREA(8)\n         OI    UPK_AREA+7,X'F0'\n         MVC   O#CRE(2),UPK_AREA+6\n         MVI   O#CRE+2,C'/'\n         L     R01,DS1CREDT              R01 <- Creation Date ( DDD )\n         SRL   R01,8\n         N     R01,=X'0000FFFF'\n         CVD   R01,PK_AREA\n         UNPK  UPK_AREA(8),PK_AREA(8)\n         OI    UPK_AREA+7,X'F0'\n         MVC   O#CRE+3(3),UPK_AREA+5\n* --- Expiration Date ---\n         IC    R01,DS1EXPDT              R01 <- Expiration Date ( YY) )\n         CVD   R01,PK_AREA\n         UNPK  UPK_AREA(8),PK_AREA(8)\n         OI    UPK_AREA+7,X'F0'\n         MVC   O#EXP(2),UPK_AREA+6\n         MVI   O#EXP+2,C'/'\n         L     R01,DS1EXPDT              R01 <- Expiration Date ( DDD )\n         SRL   R01,8\n         CL    R01,=F'0'\n         BE    @EXPJP1\n         N     R01,=X'0000FFFF'\n         CVD   R01,PK_AREA\n         UNPK  UPK_AREA(8),PK_AREA(8)\n         OI    UPK_AREA+7,X'F0'\n         MVC   O#EXP+(3),UPK_AREA+5\n         B     @EXPJP2\nMVB#EXTENT MVC   B#EXTENT+1(0),B#EXTENT\nMVO#EXTENT MVC   O#EXTENT+1(0),O#EXTENT\n@EXPJP1  EQU   *\n         MVC   O#EXP,=CL6'*NONE*'\n@EXPJP2  EQU   *\n* --- extent address ---\n         MVI   B#EXTENT,X'00'            Extent Area Zero Clear\n         LA    R01,B#EXTENTL\n         BCTR  R01,0\n         BCTR  R01,0\n*        STC   R01,*+5\n*        MVC   B#EXTENT+1(0),B#EXTENT\n         EX    R01,MVB#EXTENT\n         MVI   O#EXTENT,C' '             Extent Area Space Clear\n         LA    R01,O#EXTENTL\n         BCTR  R01,0\n         BCTR  R01,0\n*        STC   R01,*+5\n*        MVC   O#EXTENT+1(0),O#EXTENT\n         EX    R01,MVO#EXTENT\n*\n         XR    R06,R06                   R06 <- Extent Number\n         IC    R06,DS1NOEPV\n         MVC   B#TCHR(3),=XL3'000000'    Set Last Alloc Address ( MBB )\n         MVC   B#TCHR+7(1),R+3        Set Last Alloc Address ( R )\n* --- extent 1 address ---\n         MVC   B#L1,DS1EXT1+2            Extent #1 Low\n         LA    R01,B#L1\n         LA    R02,O#L1\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#H1,DS1EXT1+6            Extent #1 High\n         LA    R01,B#H1\n         LA    R02,O#H1\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#TCHR(3),=XL3'000000'    Set Last Alloc Address ( MBB )\n         MVC   B#TCHR+3(4),DS1EXT1+6     Set End of Alloc Address\n         LA    R01,B#L1\n         LA    R02,B#H1\n         BAL   R14,@E_A_TRK              Calculate Allocation Tracks\n         ST    R01,O#ALC                 Store Result\n         BCTR  R06,0                     Extent -1\n         LTR   R06,R06                   If End ?\n         BZ    @E_A_X                      goto @E_A_X\n* --- extent 2 address ---\n         MVC   B#L2,DS1EXT2+2            Extent #2 Low\n         LA    R01,B#L2\n         LA    R02,O#L2\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#H2,DS1EXT2+6            Extent #2 High\n         LA    R01,B#H2\n         LA    R02,O#H2\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#TCHR(3),=XL3'010000'    Set Last Alloc Address ( MBB )\n         MVC   B#TCHR+3(4),DS1EXT2+6     Set End of Alloc Address\n         LA    R01,B#L2\n         LA    R02,B#H2\n         BAL   R14,@E_A_TRK              Calculate Allocation Tracks\n         L     R02,O#ALC                 Allocated Track Calc Area\n         LA    R01,0(R01,R02)\n         ST    R01,O#ALC                 Store Result\n         BCTR  R06,0                     Extent -1\n         LTR   R06,R06                   If End ?\n         BZ    @E_A_X                      goto @E_A_X\n* --- extent 3 address ---\n         MVC   B#L3,DS1EXT3+2            Extent #3 Low\n         LA    R01,B#L3\n         LA    R02,O#L3\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#H3,DS1EXT3+6            Extent #3 High\n         LA    R01,B#H3\n         LA    R02,O#H3\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#TCHR(3),=XL3'020000'    Set Last Alloc Address ( MBB )\n         MVC   B#TCHR+3(4),DS1EXT3+6     Set End of Alloc Address\n         LA    R01,B#L3\n         LA    R02,B#H3\n         BAL   R14,@E_A_TRK              Calculate Allocation Tracks\n         L     R02,O#ALC                 Allocated Track Calc Area\n         LA    R01,0(R01,R02)\n         ST    R01,O#ALC                 Store Result\n         BCTR  R06,0                     Extent -1\n         LTR   R06,R06                   If End ?\n         BZ    @E_A_X                      goto @E_A_X\n* --- DSCB Type 3 ( Extent Dataset Information ) ---\n         MVC   DSCB3CHR(5),DS1PTRDS\n         XC    DSCB3,DSCB3\n         OBTAIN DSCBFMT3\n         LTR   R15,R15\n         BNZ   @E_A_X\n         USING DSCBSEC3,R11\n         LA    R11,DSCB3\n* --- extent 4 address ---\n         MVC   B#L4,DS3EXTNT+2           Extent #4 Low\n         LA    R01,B#L4\n         LA    R02,O#L4\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#H4,DS3EXTNT+6           Extent #4 High\n         LA    R01,B#H4\n         LA    R02,O#H4\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#TCHR(3),=XL3'030000'    Set Last Alloc Address ( MBB )\n         MVC   B#TCHR+3(4),DS3EXTNT+6    Set End of Alloc Address\n         LA    R01,B#L4\n         LA    R02,B#H4\n         BAL   R14,@E_A_TRK              Calculate Allocation Tracks\n         L     R02,O#ALC                 Allocated Track Calc Area\n         LA    R01,0(R01,R02)\n         ST    R01,O#ALC                 Store Result\n         BCTR  R06,0                     Extent -1\n         LTR   R06,R06                   If End ?\n         BZ    @E_A_X                      goto @E_A_X\n* --- extent 5 address ---\n         MVC   B#L5,DS3EXTNT+12          Extent #5 Low\n         LA    R01,B#L5\n         LA    R02,O#L5\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#H5,DS3EXTNT+16          Extent #5 High\n         LA    R01,B#H5\n         LA    R02,O#H5\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#TCHR(3),=XL3'040000'    Set Last Alloc Address ( MBB )\n         MVC   B#TCHR+3(4),DS3EXTNT+16   Set End of Alloc Address\n         LA    R01,B#L5\n         LA    R02,B#H5\n         BAL   R14,@E_A_TRK              Calculate Allocation Tracks\n         L     R02,O#ALC                 Allocated Track Calc Area\n         LA    R01,0(R01,R02)\n         ST    R01,O#ALC                 Store Result\n         BCTR  R06,0                     Extent -1\n         LTR   R06,R06                   If End ?\n         BZ    @E_A_X                      goto @E_A_X\n* --- extent 6 address ---\n         MVC   B#L6,DS3EXTNT+22          Extent #6 Low\n         LA    R01,B#L6\n         LA    R02,O#L6\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#H6,DS3EXTNT+26          Extent #6 High\n         LA    R01,B#H6\n         LA    R02,O#H6\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#TCHR(3),=XL3'050000'    Set Last Alloc Address ( MBB )\n         MVC   B#TCHR+3(4),DS3EXTNT+26   Set End of Alloc Address\n         LA    R01,B#L6\n         LA    R02,B#H6\n         BAL   R14,@E_A_TRK              Calculate Allocation Tracks\n         L     R02,O#ALC                 Allocated Track Calc Area\n         LA    R01,0(R01,R02)\n         ST    R01,O#ALC                 Store Result\n         BCTR  R06,0                     Extent -1\n         LTR   R06,R06                   If End ?\n         BZ    @E_A_X                      goto @E_A_X\n* --- extent 7 address ---\n         MVC   B#L7,DS3EXTNT+32          Extent #7 Low\n         LA    R01,B#L7\n         LA    R02,O#L7\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#H7,DS3EXTNT+36          Extent #7 High\n         LA    R01,B#H7\n         LA    R02,O#H7\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#TCHR(3),=XL3'060000'    Set Last Alloc Address ( MBB )\n         MVC   B#TCHR+3(4),DS3EXTNT+36   Set End of Alloc Address\n         LA    R01,B#L7\n         LA    R02,B#H7\n         BAL   R14,@E_A_TRK              Calculate Allocation Tracks\n         L     R02,O#ALC                 Allocated Track Calc Area\n         LA    R01,0(R01,R02)\n         ST    R01,O#ALC                 Store Result\n         BCTR  R06,0                     Extent -1\n         LTR   R06,R06                   If End ?\n         BZ    @E_A_X                      goto @E_A_X\n* --- extent 8 address ---\n         MVC   B#L8,DS3ADEXT+2           Extent #8 Low\n         LA    R01,B#L8\n         LA    R02,O#L8\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#H8,DS3ADEXT+6           Extent #8 High\n         LA    R01,B#H8\n         LA    R02,O#H8\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#TCHR(3),=XL3'070000'    Set Last Alloc Address ( MBB )\n         MVC   B#TCHR+3(4),DS3ADEXT+6    Set End of Alloc Address\n         LA    R01,B#L8\n         LA    R02,B#H8\n         BAL   R14,@E_A_TRK              Calculate Allocation Tracks\n         L     R02,O#ALC                 Allocated Track Calc Area\n         LA    R01,0(R01,R02)\n         ST    R01,O#ALC                 Store Result\n         BCTR  R06,0                     Extent -1\n         LTR   R06,R06                   If End ?\n         BZ    @E_A_X                      goto @E_A_X\n* --- extent 9 address ---\n         MVC   B#L9,DS3ADEXT+12          Extent #9 Low\n         LA    R01,B#L9\n         LA    R02,O#L9\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#H9,DS3ADEXT+16          Extent #9 High\n         LA    R01,B#H9\n         LA    R02,O#H9\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#TCHR(3),=XL3'080000'    Set Last Alloc Address ( MBB )\n         MVC   B#TCHR+3(4),DS3ADEXT+16   Set End of Alloc Address\n         LA    R01,B#L9\n         LA    R02,B#H9\n         BAL   R14,@E_A_TRK              Calculate Allocation Tracks\n         L     R02,O#ALC                 Allocated Track Calc Area\n         LA    R01,0(R01,R02)\n         ST    R01,O#ALC                 Store Result\n         BCTR  R06,0                     Extent -1\n         LTR   R06,R06                   If End ?\n         BZ    @E_A_X                      goto @E_A_X\n* --- extent 10 address ---\n         MVC   B#L10,DS3ADEXT+22          Extent #10 Low\n         LA    R01,B#L10\n         LA    R02,O#L10\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#H10,DS3ADEXT+26         Extent #10 High\n         LA    R01,B#H10\n         LA    R02,O#H10\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#TCHR(3),=XL3'090000'    Set Last Alloc Address ( MBB )\n         MVC   B#TCHR+3(4),DS3ADEXT+26   Set End of Alloc Address\n         LA    R01,B#L10\n         LA    R02,B#H10\n         BAL   R14,@E_A_TRK              Calculate Allocation Tracks\n         L     R02,O#ALC                 Allocated Track Calc Area\n         LA    R01,0(R01,R02)\n         ST    R01,O#ALC                 Store Result\n         BCTR  R06,0                     Extent -1\n         LTR   R06,R06                   If End ?\n         BZ    @E_A_X                      goto @E_A_X\n* --- extent 11 address ---\n         MVC   B#L11,DS3ADEXT+32         Extent #11 Low\n         LA    R01,B#L11\n         LA    R02,O#L11\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#H11,DS3ADEXT+36         Extent #11 High\n         LA    R01,B#H11\n         LA    R02,O#H11\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#TCHR(3),=XL3'0A0000'    Set Last Alloc Address ( MBB )\n         MVC   B#TCHR+3(4),DS3ADEXT+36   Set End of Alloc Address\n         LA    R01,B#L11\n         LA    R02,B#H11\n         BAL   R14,@E_A_TRK              Calculate Allocation Tracks\n         L     R02,O#ALC                 Allocated Track Calc Area\n         LA    R01,0(R01,R02)\n         ST    R01,O#ALC                 Store Result\n         BCTR  R06,0                     Extent -1\n         LTR   R06,R06                   If End ?\n         BZ    @E_A_X                      goto @E_A_X\n* --- extent 12 address ---\n         MVC   B#L12,DS3ADEXT+42         Extent #12 Low\n         LA    R01,B#L12\n         LA    R02,O#L12\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#H12,DS3ADEXT+46         Extent #12 High\n         LA    R01,B#H12\n         LA    R02,O#H12\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#TCHR(3),=XL3'0B0000'    Set Last Alloc Address ( MBB )\n         MVC   B#TCHR+3(4),DS3ADEXT+46   Set End of Alloc Address\n         LA    R01,B#L12\n         LA    R02,B#H12\n         BAL   R14,@E_A_TRK              Calculate Allocation Tracks\n         L     R02,O#ALC                 Allocated Track Calc Area\n         LA    R01,0(R01,R02)\n         ST    R01,O#ALC                 Store Result\n         BCTR  R06,0                     Extent -1\n         LTR   R06,R06                   If End ?\n         BZ    @E_A_X                      goto @E_A_X\n* --- extent 13 address ---\n         MVC   B#L13,DS3ADEXT+52         Extent #13 Low\n         LA    R01,B#L13\n         LA    R02,O#L13\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#H13,DS3ADEXT+56         Extent #13 High\n         LA    R01,B#H13\n         LA    R02,O#H13\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#TCHR(3),=XL3'0C0000'    Set Last Alloc Address ( MBB )\n         MVC   B#TCHR+3(4),DS3ADEXT+56   Set End of Alloc Address\n         LA    R01,B#L13\n         LA    R02,B#H13\n         BAL   R14,@E_A_TRK              Calculate Allocation Tracks\n         L     R02,O#ALC                 Allocated Track Calc Area\n         LA    R01,0(R01,R02)\n         ST    R01,O#ALC                 Store Result\n         BCTR  R06,0                     Extent -1\n         LTR   R06,R06                   If End ?\n         BZ    @E_A_X                      goto @E_A_X\n* --- extent 14 address ---\n         MVC   B#L14,DS3ADEXT+62         Extent #14 Low\n         LA    R01,B#L14\n         LA    R02,O#L14\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#H14,DS3ADEXT+66         Extent #14 High\n         LA    R01,B#H14\n         LA    R02,O#H14\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#TCHR(3),=XL3'0D0000'    Set Last Alloc Address ( MBB )\n         MVC   B#TCHR+3(4),DS3ADEXT+66   Set End of Alloc Address\n         LA    R01,B#L14\n         LA    R02,B#H14\n         BAL   R14,@E_A_TRK              Calculate Allocation Tracks\n         L     R02,O#ALC                 Allocated Track Calc Area\n         LA    R01,0(R01,R02)\n         ST    R01,O#ALC                 Store Result\n         BCTR  R06,0                     Extent -1\n         LTR   R06,R06                   If End ?\n         BZ    @E_A_X                      goto @E_A_X\n* --- extent 15 address ---\n         MVC   B#L15,DS3ADEXT+72         Extent #15 Low\n         LA    R01,B#L15\n         LA    R02,O#L15\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#H15,DS3ADEXT+76         Extent #15 High\n         LA    R01,B#H15\n         LA    R02,O#H15\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#TCHR(3),=XL3'0E0000'    Set Last Alloc Address ( MBB )\n         MVC   B#TCHR+3(4),DS3ADEXT+76   Set End of Alloc Address\n         LA    R01,B#L15\n         LA    R02,B#H15\n         BAL   R14,@E_A_TRK              Calculate Allocation Tracks\n         L     R02,O#ALC                 Allocated Track Calc Area\n         LA    R01,0(R01,R02)\n         ST    R01,O#ALC                 Store Result\n         BCTR  R06,0                     Extent -1\n         LTR   R06,R06                   If End ?\n         BZ    @E_A_X                      goto @E_A_X\n* --- extent 16 address ---\n         MVC   B#L16,DS3ADEXT+82         Extent #16 Low\n         LA    R01,B#L16\n         LA    R02,O#L16\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#H16,DS3ADEXT+86         Extent #16 High\n         LA    R01,B#H16\n         LA    R02,O#H16\n         CALL  RV1BTH,((R01),(R02),4)\n         MVC   B#TCHR(3),=XL3'0F0000'    Set Last Alloc Address ( MBB )\n         MVC   B#TCHR+3(4),DS3ADEXT+86   Set End of Alloc Address\n         LA    R01,B#L16\n         LA    R02,B#H16\n         BAL   R14,@E_A_TRK              Calculate Allocation Tracks\n         L     R02,O#ALC                 Allocated Track Calc Area\n         LA    R01,0(R01,R02)\n         ST    R01,O#ALC                 Store Result\n         BCTR  R06,0                     Extent -1\n         LTR   R06,R06                   If End ?\n         BZ    @E_A_X                      goto @E_A_X\n**\n@E_A_X   EQU   *\n         LA    R01,B#TCHR\n         LA    R02,O#AEP\n         CALL  RV1BTH,((R01),(R02),8)\n         L     R01,VPDSF                 R01 <- PDSF DCB Address\n         L     R01,44(R01)               R01 <- DEB Address\n         N     R01,=X'00FFFFFF'          Clear IFLGS Area\n         LA    R02,B#TCHR\n         BAL   R14,@CNVTTR               convert ttr -> mbbcchhr\n         ST    R00,B#TTTR\n         LA    R01,B#TTTR\n         LA    R02,O#AEP2\n         CALL  RV1BTH,((R01),(R02),3)\n*\n         L     R06,B#ETTR\n         SRL   R06,16\n         MH    R06,=H'100'\n         L     R01,B#TTTR\n         SRL   R01,16\n         SRDA  R06,32\n         DR    R06,R01\n         STH   R07,O#USE\n         DROP  R11\n* --- end of sub routine ---\n         RV1#TRCR COMM=12\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=0\n@E_A_TRK EQU   *\n         STM   R03,R00,REGS\n         XR    R06,R06\n         LH    R06,0(R02)\n         SH    R06,0(R01)\n         MH    R06,B#TRK#\n         AH    R06,2(R02)\n         SH    R06,2(R01)\n         LA    R01,1(R06)\n         LM    R03,R00,REGS\n         BR    R14\n*-------------------------------------------------------------------\n*-------- convert mbcchhr to ttr -----------------------------------\n*-------------------------------------------------------------------\n@CNVTTR  EQU   *\n         STM   R03,R15,REGS\n         L     R14,CVTPTR\n         USING CVTMAP,R14\n         L     R15,CVTPRLTV\n         DROP  R14\n         BALR  R14,R15\n         LM    R03,R15,REGS\n         BR    R14\n@CNVCHR  EQU   *\n         STM   R03,R15,REGS\n         L     R14,CVTPTR\n         USING CVTMAP,R14\n         L     R15,CVTPCNVT\n         DROP  R14\n         BALR  R14,R15\n         LM    R03,R15,REGS\n         BR    R14\n*\n         DS    0F\n* --- SAVE AREA ---\nSAVEAREA DS    18F                     savearea\nREGS     DS    18F                               WORK SAVEAREA\nW_CHR    DS    0F,XL8\n* --- Error Message ---\nERRMSG02 DC    CL79'*** OBTAIN Error ( DSCB - Type 4 ) ***'\nERRMSG03 DC    CL79'*** OBTAIN Error ( DSCB - Type 1 ) ***'\n         DS    0D\n* --- Panel RC Packed Area ---\nPK_AREA  DC    PL8'0'\nUPK_AREA DC    CL16' '\n         DS    0F\nWK#F     DS    F\n         DS    0F\n* --- dscb search ---\nDSCBFMT1 CAMLST SEARCH,DSCB1DSN,VOLUME,DSCB1\nDSCBFMT3 CAMLST SEEK,DSCB3CHR,VOLUME,DSCB3\nDSCBFMT4 CAMLST SEARCH,DSCB4DSN,VOLUME,DSCB4\nVOLUME   DS    CL6\nR        DS    F\nDSCB3CHR DS    CL6\nJFCB1    DS    0CL176                      job file control block\nDSCB1DSN DS    CL44\nDSCB1    DS    CL140\nDSCB3    DS    CL140\n*\nJFCB4    DS    0CL176                      job file control block\nDSCB4DSN DS    CL44                        dataset name\nDSCB4    DS    CL140                       dataset control block\n*\nVPDSF    DC    V(PDSFD)\n         DS    0F\n*SN      DS    CL44\n         LTORG\n* --------------------------------------------------------------------\n         DSECT\n         COPY  RV1#COMM\n* --------------------------------------------------------------------\nJFCBSECT DSECT\n         PRINT GEN\n         IEFJFCBN LIST=YES\nDSCBSEC1 DSECT\n         IECSDSL1 (1)\nDSCBSEC3 DSECT\n         IECSDSL1 (3)\nDSCBSEC4 DSECT\n         IECSDSL1 (4)\n         IEFUCBOB LIST=YES\n         DCBD  DSORG=PO,DEVD=DA\n         CVT   DSECT=YES,LIST=YES\nR00      EQU   00\nR01      EQU   01\nR02      EQU   02\nR03      EQU   03\nR04      EQU   04\nR05      EQU   05\nR06      EQU   06\nR07      EQU   07\nR08      EQU   08\nR09      EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   RV1DSI\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#DTE": {"ttr": 2058, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x99\\x04\\x1f\\x00\\x99(o\\x106\\x00\\x1f\\x00\\n\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1999-02-10T00:00:00", "modifydate": "1999-10-13T10:36:00", "lines": 31, "newlines": 10, "modlines": 0, "user": "KIMU"}, "text": "         MACRO\n&NAME    RV1#DTE &SECTTYP=DSECT\n         AIF   ('&SECTTYP' NE 'DSECT').SECTSKP\n.NDST    ANOP\nDTENTRY  DSECT\n.SECTSKP ANOP\nDTEFIRST EQU   *\nDTENAME  DS    CL8                       Member Name\nDTECHRB  DS    XL8                       TTRx ( Binary )\nDTETTRB  DS    XL4                       TTRx ( Binary )\nDTETTR   DS    CL6                       TTR ( Character )\nDTERLNG  DS    XL2                       Logical Record Length(for F)\nDTELRL   DS    XL2                       Logical Record Length(for V)\nDTEBSZ   DS    XL2                       Phisical Record Length(BLKSZ)\nDTERFM   DS    BL1'00000000'             Record Format Flag.\n*                  o                     Not Variable Format Record.\n*                   o                    Invalid DCB\n*                    o                   Last Length Different\n*                     o                  Non Fixed Format Record.\n*                      .                 Reserved\n*                       .                Reserved\n*                        .               Reserved\n*                         .              Reserved\n         DS    BL3                       Filler\nDTERECD  DS    XL4                       Record Number\n* --- See RV1#COMM:ATTR_??? ---\nDTEATTR  DS    XL1                       Directory Area Attribute\nDTEDATTR DS    XL1                       Data Area Attribute\nDTEDATA  DS    CL60                      Record ( First 60 Byte )\nDTELAST  EQU   *-DTEFIRST                Length\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#DTH": {"ttr": 2060, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x06\\x00\\x06\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "KIMU"}, "text": "DTHEADER DSECT\nDTHPOSF  DS    F                         Data Table First Entry Num\nDTHPOSL  DS    F                         Data Table Last Entry Num\nDTHNEXT  DS    F                         Next Data Table Address\nDTHPREV  DS    F                         Previous Data Table Address\nDTHL     EQU   *-DTHEADER                Length\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#ETOP": {"ttr": 2062, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00 \\x00 \\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "KIMU"}, "text": "TTETO    DC    X'1515151515151515'     (X'00' TO X'0F')\n         DC    X'1515151515151515'     (X'08' TO X'0F')\n         DC    X'1515151515151515'     (X'10' TO X'17')\n         DC    X'1515151515151515'     (X'18' TO X'1F')\n         DC    X'1515151515151515'     (X'20' TO X'27')\n         DC    X'1515151515151515'     (X'28' TO X'2F')\n         DC    X'1515151515151515'     (X'30' TO X'37')\n         DC    X'1515151515151515'     (X'38' TO X'3F')\n         DC    X'4015151515151515'     (X'40' TO X'47')\n         DC    X'15154A4B4C4D4E4F'     (X'48' TO X'4F')\n         DC    X'5015151515151515'     (X'50' TO X'57')\n         DC    X'15155A5B5C5D5E5F'     (X'58' TO X'5F')\n         DC    X'6061151515151515'     (X'60' TO X'67')\n         DC    X'15156A6B6C6D6E6F'     (X'68' TO X'6F')\n         DC    X'1515151515151515'     (X'70' TO X'77')\n         DC    X'15797A7B7C7D7E7F'     (X'78' TO X'7F')\n         DC    X'1581828384858687'     (X'80' TO X'87')\n         DC    X'8889151515151515'     (X'88' TO X'8F')\n         DC    X'1591929394959697'     (X'90' TO X'97')\n         DC    X'9899151515151515'     (X'98' TO X'9F')\n         DC    X'15A1A2A3A4A5A6A7'     (X'A0' TO X'A7')\n         DC    X'A8A9151515151515'     (X'A8' TO X'AF')\n         DC    X'1515151515151515'     (X'B0' TO X'B7')\n         DC    X'1515151515151515'     (X'B8' TO X'BF')\n         DC    X'C0C1C2C3C4C5C6C7'     (X'C0' TO X'C7')\n         DC    X'C8C9151515151515'     (X'C8' TO X'CF')\n         DC    X'D0D1D2D3D4D5D6D7'     (X'D0' TO X'D7')\n         DC    X'D8D9151515151515'     (X'D8' TO X'DF')\n         DC    X'E015E2E3E4E5E6E7'     (X'E0' TO X'E7')  OY08618\n         DC    X'E8E9151515151515'     (X'E8' TO X'EF')\n         DC    X'F0F1F2F3F4F5F6F7'     (X'F0' TO X'F7')\n         DC    X'F8F9151515151515'     (X'F8' TO X'FF')\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RV1#EXTR": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x03]\\x03]\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 861, "newlines": 861, "modlines": 0, "user": "KIMU"}, "text": "         START\n* -----------------------------------------------------------------\n         DC   C'<< Revive ! >> ('\n         COPY  RV1#HDR\n         PRINT   GEN\n*-------------------------------------------------------------------\n* --- Start of Process --------------------------------------------\n*-------------------------------------------------------------------\nRV1EXTR  CSECT\n         SAVE  (14,12),T,*\n         BALR  R03,0\n         USING *,R03,R04,R05               Base Reg. R03,R04,R05\n         LA    R04,2048(R03)               2 Base Reg\n         LA    R04,2048(R04)\n         LA    R05,2048(R04)               3 Base Reg\n         LA    R05,2048(R05)\n         ST    R13,SAVEAREA+4              Save A(OLD SaveArea)\n         LR    R12,R13\n         LA    R13,SAVEAREA\n         ST    R13,8(R12)                  Save A(NEW SaveArea)\n*-------------------------------------------------------------------\n*        L     R01,0(R01)\n         LM    R06,R07,0(R01)              Revive Common Area\n         USING REVIVED,R06\n         USING CMDPROCD,R07\n*-------------------------------------------------------------------\n*        TPUT  =CL20'??',20\n         RV1#TRCC BASE=3,COMM=6\n*        TPUT  =CL20'??',20\n*-------------------------------------------------------------------\n*-------- ISPF VDEFINE ---------------------------------------------\n*-------------------------------------------------------------------\n@ISPVDEF EQU   *\n         L     R08,RV1ISPFN              Load Var Name Pointer\n         L     R09,RV1ISPFL              Load Var Length Pointer\n         L     R10,RV1ISPFT              load Var Type Pointer\n         L     R11,RV1ISPFA              load Var Address Pointer\n@IS_LOP1 EQU   *\n         CLC   0(8,R08),ISPVENDM         If End ?\n         BE    @IS_LOP1X                   Goto @IS_LOP1X\n*        TPUT  0(R08),8\n         L     R01,0(R11)                Load Var Address\n         CALL  ISPLINK,(VDEFINE,(R08),(R01),(R10),(R09)),VL\n         LA    R08,8(R08)                Shift Var Name Pointer\n         LA    R09,4(R09)                Shift Var Length Pointer\n         LA    R10,8(R10)                Shift Var Type Pointer\n         LA    R11,4(R11)                Shift Var Address Pointer\n         B     @IS_LOP1                  goto Loop\n@IS_LOP1X EQU  *\n*-------------------------------------------------------------------\n*-------- Member Extract -------------------------------------------\n*-------------------------------------------------------------------\n@EXTRACT EQU   *\n         XC    RV1CSPTB,RV1CSPTB\n*\n         L     R01,PC@RECD\n         CVD   R01,PK_AREA\n         MVC   EDWORK,EDMASK\n         LA    R01,EDWORK+L'EDWORK-1\n         EDMK  EDWORK,PK_AREA\n         LA    R15,EDWORK+L'EDWORK\n         SR    R15,R01\n         LR    R00,R15\n         CL    R15,=F'8'\n         BH    @EXT_CALC_ERR3\n         ST    R15,RV1ERECL\n         LA    R01,EDWORK+L'EDWORK\n         SR    R01,R00\n*VRV1EREC MVC   RV1EREC(0),0(R01)\n         EX    R15,MVRV1EREC\n*\n         TM    PC@RFM,X'40'\n         BO    @EXT_CALC_SKP0\n         MVC   BLKSZ(2),B#BLKSZ\n         MVC   VOLSER,RV1TVOL\n         CALL  RV1TC,(VOLSER,BLKSZ,RV1TRKCB)\n         B     @EXT_CALC_SKP0X\n@EXT_CALC_SKP0 EQU *\n         MVC   BLKSZ(2),PC@BSZ\n         MVC   VOLSER,RV1TVOL\n         CALL  RV1TC,(VOLSER,BLKSZ,RV1TRKCB)\n@EXT_CALC_SKP0X EQU *\n         LTR   R15,R15\n         BNZ   @EXT_CALC_ERR1\n         L     R01,RV1TRKCB\n         CVD   R01,PK_AREA\n         MVC   EDWORK,EDMASK\n         LA    R01,EDWORK+L'EDWORK-1\n         EDMK  EDWORK,PK_AREA\n         LA    R15,EDWORK+L'EDWORK\n         SR    R15,R01\n         LR    R00,R15\n         CL    R15,=F'8'\n         BH    @EXT_CALC_ERR1\n         ST    R15,RV1TRKCL\n         LA    R01,EDWORK+L'EDWORK\n         SR    R01,R00\n*VRV1TRKC MVC   RV1TRKC(0),0(R01)\n         EX    R15,MVRV1TRKC\n         XR    R08,R08\n         L     R08,PC@RECD\n         SRDA  R08,32\n         D     R08,RV1TRKCB\n         LTR   R08,R08\n         BZ    @EXT_CALC_SKP1\n         LA    R09,1(R09)\n@EXT_CALC_SKP1 EQU *\n         ST    R09,RV1CSPTB\n         CVD   R09,PK_AREA\n         MVC   EDWORK,EDMASK\n         LA    R01,EDWORK+L'EDWORK-1\n         EDMK  EDWORK,PK_AREA\n         LA    R15,EDWORK+L'EDWORK\n         SR    R15,R01\n         LR    R00,R15\n         CL    R15,=F'8'\n         BH    @EXT_CALC_ERR2\n         ST    R15,RV1CSPTL\n         LA    R01,EDWORK+L'EDWORK\n         SR    R01,R00\n*VRV1CSPT MVC   RV1CSPT(0),0(R01)\n         EX    R15,MVRV1CSPT\n         B     @EXT_CALC_X\n@EXT_CALC_ERR3 EQU *\n         MVC   RV1EREC(3),=CL3'???'\n         LA    R01,3\n         ST    R01,RV1ERECL\n@EXT_CALC_ERR1 EQU *\n         MVC   RV1TRKC(3),=CL3'???'\n         LA    R01,3\n         ST    R01,RV1TRKCL\n@EXT_CALC_ERR2 EQU *\n         MVC   RV1CSPT(3),=CL3'???'\n         LA    R01,3\n         ST    R01,RV1CSPTL\n@EXT_CALC_X EQU *\n         CALL  ISPLINK,(VREPLACE,RV1TRKCN,RV1TRKCL,RV1TRKC),VL\n         CALL  ISPLINK,(VREPLACE,RV1ERECN,RV1ERECL,RV1EREC),VL\n         CALL  ISPLINK,(VREPLACE,RV1CSPTN,RV1CSPTL,RV1CSPT),VL\n         CALL  ISPLINK,(VPUT,RV1EXTRL,PROFILE),VL  Put Space Info\n*\n         MVI   RV1EDS,C' '\n         MVC   RV1EDS+1(L'RV1EDS-1),RV1EDS\n         MVI   RV1EDS,C''''\n         MVC   RV1EDS+1(44),RV1DSNC\n         LA    R01,RV1EDS+1\n@EXT_DSN_LOP1 EQU *\n         CLI   0(R01),C' '\n         BE    @EXT_DSN_LOP1X\n         LA    R01,1(R01)\n         B     @EXT_DSN_LOP1\n@EXT_DSN_LOP1X EQU *\n         LA    R02,RV1EDS_E-9\n         CLR   R01,R02\n         BH    @EXT_DSN_SKP1\n         MVC   0(2,R01),=CL2'.M'\n         MVC   2(6,R01),PC@TTR\n         MVI   8(R01),C''''\n         B     @EXT_DSN_SKP1X\n@EXT_DSN_SKP1 EQU *\n         MVI   0(R01),C''''\n@EXT_DSN_SKP1X EQU *\n         MVC   RV1EMN,PC@NNAME\n         MVC   RV1EVO,RV1TVOL\n         MVC   RV1ESP,=CL3'TRK'\n         MVC   RV1ESQ1,RV1CSPTB\n         MVC   RV1ESQ2,=F'1'\n         MVC   RV1ESPD,=F'1'\n         TM    PC@RFM,X'40'              if member 'no problem' then\n         BO    @EXT_CALC_SKP3\n         MVC   RV1ERF,O#RECFM\n         MVC   RV1ERL,B#LRECL\n         MVC   RV1EBS,B#BLKSZ\n         B     @EXT_CALC_SKP3X\n@EXT_CALC_SKP3 EQU *\n*        TM    B#RECFM,RECFM_V\n*        BO    @EXT_CALC_SKP31\n         TM    PC@RFM,X'80'\n         BNO   @EXT_CALC_SKP31\n*        TM    B#RECFM,RECFM_F\n*        BO    @EXT_CALC_SKP32\n         TM    PC@RFM,X'10'\n         BNO   @EXT_CALC_SKP32\n* ---RECFM : U ---\n         MVC   RV1ERF,=CL3'U  '          : recfm = U\n         XC    RV1ERL,RV1ERL             : lrecl = 0\n         MVC   RV1EBS,PC@BSZ             : blksz = dtebsz\n         B     @EXT_CALC_SKP3X\n* ---RECFM : V ---\n@EXT_CALC_SKP31 EQU *\n         MVC   RV1ERF,=CL3'VB '          : recfm = VB\n         MVC   RV1ERL,PC@LRL             : lrecl = dtelrl\n         MVC   RV1EBS,PC@BSZ             : blksz = dtebsz\n         B     @EXT_CALC_SKP3X\n* ---RECFM : F ---\n@EXT_CALC_SKP32 EQU *\n         MVC   RV1ERF,=CL3'FB '          : recfm = FB\n         MVC   RV1ERL,PC@RLNG            : lrecl = dterlng\n         MVC   RV1EBS,PC@BSZ             : blksz = dtebsz\n         B     @EXT_CALC_SKP3X\n@EXT_CALC_SKP3X EQU *\n@EXT_PNL EQU   *\n         CALL  ISPLINK,(ADDPOP),VL       Make Popup Panel\n         CALL  ISPLINK,(DISPLAY,PANELEXTR),VL   information panel\n         ST    R15,PANELRC\n         CALL  ISPLINK,(REMPOP),VL       Remove Popup Panel\n         L     R15,PANELRC\n         LTR   R15,R15                   If PF03 then\n         BZ    @EXT_PNLX\n*        TPUT  =CL20'RETURN',20\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=0\n@EXT_PNLX EQU  *\n*--- Extract DCB Check ---------------------------------------------\n         LA    R01,RV1ERF\n         LA    R02,3\n@EXT_DCBCK_LOP1 EQU *\n         CLI   0(R01),C'F'\n         BE    @EXT_DCBCK_F\n         CLI   0(R01),C'V'\n         BE    @EXT_DCBCK_V\n         CLI   0(R01),C'U'\n         BE    @EXT_DCBCK_U\n         LA    R01,1(R01)\n         BCT   R02,@EXT_DCBCK_LOP1\n         B     @EXT_DCBCK_WORN\n@EXT_DCBCK_F EQU *\n         TM    PC@RFM,X'10'\n         BO    @EXT_DCBCK_WORN\n         B     @EXT_DCBCK_OK\n@EXT_DCBCK_V EQU *\n         TM    PC@RFM,X'80'\n         BO    @EXT_DCBCK_WORN\n         B     @EXT_DCBCK_OK\n@EXT_DCBCK_U EQU *\n         B     @EXT_DCBCK_OK\n@EXT_DCBCK_WORN EQU *\n         CALL  ISPLINK,(ADDPOP),VL       Make Popup Panel\n         CALL  ISPLINK,(DISPLAY,PANELEXTW),VL   information panel\n         ST    R15,PANELRC\n         CALL  ISPLINK,(REMPOP),VL       Remove Popup Panel\n         L     R15,PANELRC\n         LTR   R15,R15                   If PF03 then\n         BNZ   @EXT_PNL\n@EXT_DCBCK_OK EQU *\n*--- Getmain Dynamic Allocation Work Area --------------------------\n         L     R01,=A(RV1ALCDL)\n         GETMAIN RC,LV=(R01)             Getmain Dynamic Alloc Work A\n         LTR   R15,R15                   If not Error\n         BZ    @EXT_ALC                    goto @EXT_ALC\n         BAL   R14,GETMAIN_ERROR\n*        LA    R15,8\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=8\n@EXT_ALC EQU   *\n         ST    R01,@EXT_GETMA            Save Address\n         LR    R11,R01\n         USING RV1ALCD,R11\n*        MVC   DA#DSN(44),RV1EDS         Extract Dataset Name\n         LA    R00,RV1EDS\n         LA    R01,DA#DSN\n         BAL   R14,@DS_CONV\n         LA    R01,DA#DSN\n*        TPUT  (R01),44\n         MVC   DA#VOL(6),RV1EVO          Extract Volume Serial\n         MVC   DA#DISP(3),=CL3'NEW'      Extract Discription\n         L     R01,RV1ESPD\n         LTR   R01,R01\n         BZ    @EXT_DSORG_PS\n         MVC   DA#DSORG(2),=CL2'PO'      Extract Dataset Organization\n         MVC   DA#SIZED(3),RV1ESPD+1     Extract Directory Size\n         B     @EXT_DSORG_X\n@EXT_DSORG_PS EQU *\n         MVC   DA#DSORG(2),=CL2'PS'      Extract Dataset Organization\n@EXT_DSORG_X EQU *\n         MVC   DA#SPC(3),=CL3'TRK'       Extract Units\n         MVC   DA#SIZE1(3),RV1ESQ1+1     Extract Primary Quantity\n         MVC   DA#SIZE2(3),RV1ESQ2+1     Extract Secondary Quantity\n         MVC   DA#LRECL(2),RV1ERL        Extract Logical Record Length\n         MVC   DA#BLKSZ(2),RV1EBS        Extract Block Size\n*        MVC   DA#RECFM(1),RV1ERF        Extract Record Format\n         LA    R01,RV1ERF\n         LA    R02,DA#RECFM\n         BAL   R14,@CNVRECFM             Recfm Convert\n*\n         DROP  R11\n         L     R01,@EXT_GETMA            Set Parameter\n         CALL  RV1DALC                   Call Dynamic Alloc Routine\n*\n         LTR   R15,R15                   if rc = 0 then\n         BZ    @EXT_OK                     goto @DY_OK\n*--- Dynamic Allocation Error Process ------------------------------\n         L     R11,@EXT_GETMA            Dynamic Allocation Dsect\n         USING RV1ALCD,R11\n         LA    R01,DA#RETC               Return Code\n         CALL  RV1BTH,((R01),DYRETCC,2)   Convert to Hexa Char\n         LA    R01,DA#INFO               Information Code\n         CALL  RV1BTH,((R01),DYINFOC,2)   Convert to Hexa Char\n         CALL  ISPLINK,(VREPLACE,M1N,L4,DYRETCC),VL\n         CALL  ISPLINK,(VREPLACE,M2N,L4,DYINFOC),VL\n*\n         XR    R01,R01\n         IC    R01,DA#ERR\n         LTR   R01,R01\n         BZ    @EXT_NOMSG\n*\n         L     R01,=A(L'DA#ERR)\n         GETMAIN RC,LV=(R01)            Getmain Error Message Text A\n         LTR   R15,R15                   If Error\n         BNZ   @EXT_NOMSG                  goto @ID_NOMSG\n         LR    R10,R01\n         ST    R10,DAMSGA\n*\n         XR    R01,R01\n         IC    R01,DA#ERR\n*\n         LA    R02,DA#ERR+1\n@EXT_MLOP1 EQU  *\n         LH    R15,0(R02)\n*VDA#ERR2 MVC   0(0,R10),2(R02)\n         EX    R15,MVDA#ERR2\n         LA    R02,2(R02,R15)\n         LA    R10,0(R10,R15)\n         MVI   0(R10),C' '\n         LA    R10,1(R10)\n         BCT   R01,@EXT_MLOP1\n*\n         S     R10,DAMSGA\n         ST    R10,DAMSGL\n         L     R01,DAMSGA\n         CALL  ISPLINK,(VREPLACE,M3N,DAMSGL,(R01)),VL\n         CALL  ISPLINK,(SETMSG,REV011),VL\n*\n         L     R01,@EXT_GETMA\n         L     R02,=A(RV1ALCDL)\n         FREEMAIN RC,LV=(R02),A=(R01)    Free Dynamic Alloc Area\n         L     R01,DAMSGA\n         L     R02,=A(L'DA#ERR)\n         FREEMAIN RC,LV=(R02),A=(R01)    Free Dynamic Alloc Area\n*        LA    R15,8                     Return 8\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=8\n@EXT_NOMSG EQU  *\n         CALL  ISPLINK,(SETMSG,REV012),VL\n*\n         L     R01,@EXT_GETMA\n         L     R02,=A(RV1ALCDL)\n         FREEMAIN RC,LV=(R02),A=(R01)    Free Dynamic Alloc Area\n*        LA    R15,8                     Return 8\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=8\n         DROP  R11\n**********************************************\n@EXT_OK  EQU   *\n*        MVC   WKMES,=CL80' > '\n*        CALL  RV1BTH,(RV1EBS,WKMES+10,2)\n*        TPUT  WKMES,80\n*\n         LH    R02,RV1EBS                Load BlockSize\n         GETMAIN RC,LV=(R02)             Member TTR Save Area\n         LTR   R15,R15\n         BNZ   @EXT_GETMAIN_ERROR\n         ST    R01,EXTRBUFA              Store Address\n*\n         L     R01,RV1ESPD\n         LTR   R01,R01\n         BZ    @EXT_COPY_PS\n         B     @EXT_COPY_PO\n@EXT_COPY_PS EQU *\n         L     R11,@EXT_GETMA            Set Parameter\n         USING RV1ALCD,R11\n         MVC   EXTDCBPS+X'28'(8),DA#RETDD\n*        MVC   EXTDCBPS+X'24'(1),RV1ERF     record format\n         LA    R01,RV1ERF\n         LA    R02,EXTDCBPS+X'24'\n         BAL   R14,@CNVRECFM             Recfm Convert\n         MVC   EXTDCBPS+X'3E'(2),RV1EBS     copy block size\n         MVC   EXTDCBPS+X'52'(2),RV1ERL     copy logical record length\n*        MVC   PDSFR+X'24'(1),RV1ERF        record format\n         LA    R01,RV1ERF\n         LA    R02,PDSFR+X'24'\n         BAL   R14,@CNVRECFM             Recfm Convert\n         MVC   PDSFR+X'3E'(2),RV1EBS        copy block size\n         MVC   PDSFR+X'52'(2),RV1ERL        copy logical record length\n         MVC   PDSFR+X'28'(8),RV1DDN     Extract Data Read DD\n         OPEN  (PDSFR,,EXTDCBPS,(OUTPUT))\n         POINT PDSFR,PC@TTRB                    FIRST DATA ADDRESS\n@EXT_CPS_LOP EQU *\n*        TPUT  =CL80'** WRITE **',80\n         L     R10,EXTRBUFA\n         READ  DECB40,SF,PDSFR,(R10),'S'\n         CHECK DECB40                            ( FIRST BLOCK )\n         LH    R01,RV1EBS\n         L     R02,DECB40+16\n         SH    R01,14(R02)\n         STH   R01,EXTDCBPS+X'3E'               copy block size\n         WRITE DECB41,SF,EXTDCBPS,(R10),'S'\n         CHECK DECB41                            ( FIRST BLOCK )\n         B     @EXT_CPS_LOP\n@EXT_CPS_LOPX EQU *\n         CLOSE (PDSFR,,EXTDCBPS)\n         MVC   DA#DISP(3),=CL3'FRE'            free\n         MVC   DA#RETDD(8),EXTDCBPS+X'28'\n         DROP  R11\n         L     R01,@EXT_GETMA            Set Parameter\n         CALL  RV1DALC                   Call Dynamic Alloc Routine\n         L     R01,EXTRBUFA\n         LH    R02,RV1EBS\n         FREEMAIN RC,LV=(R02),A=(R01)    Free Dynamic Alloc Area\n         L     R01,@EXT_GETMA\n         L     R02,=A(RV1ALCDL)\n         FREEMAIN RC,LV=(R02),A=(R01)    Free Dynamic Alloc Area\n*\n         CALL  ISPLINK,(SETMSG,REV021),VL\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=0\n*-------------------------------------------------------------------\n@EXT_COPY_PO EQU *\n*        BR    R12\n         L     R11,@EXT_GETMA            Set Parameter\n         USING RV1ALCD,R11\n         MVC   EXTDCBPO+X'28'(8),DA#RETDD\n*        MVC   EXTDCBPO+X'24'(1),RV1ERF\n         LA    R01,RV1ERF\n         LA    R02,EXTDCBPO+X'24'\n         BAL   R14,@CNVRECFM             Recfm Convert\n         MVC   EXTDCBPO+X'3E'(2),RV1EBS     copy block size\n         MVC   EXTDCBPO+X'52'(2),RV1ERL     copy logical record length\n*        MVC   PDSFRPO+X'24'(1),RV1ERF\n         LA    R01,RV1ERF\n         LA    R02,PDSFRPO+X'24'\n         BAL   R14,@CNVRECFM             Recfm Convert\n         MVC   PDSFRPO+X'3E'(2),RV1EBS      copy block size\n         MVC   PDSFRPO+X'52'(2),RV1ERL      copy logical record length\n*\n*        MVC   WKMES,=CL80' > RECFM:@@@ LRECL:@@@@ BLKSZ:@@@@'\n*        MVC   WKMES+09(3),RV1ERF\n*        CALL  RV1BTH,(RV1ERL,WKMES+19,2)\n*        CALL  RV1BTH,(RV1EBS,WKMES+30,2)\n*        TPUT  WKMES,80\n*\n         MVC   PDSFRPO+X'28'(8),RV1DDN   Extract Data Read DD\n         OPEN  (PDSFRPO,,EXTDCBPO,(OUTPUT))\n* --- DSCB type 1 ( dstaset formation )\n         XC    DSCB1,DSCB1               Clear Type1 DSCB Area\n         MVC   DSCB1DSN(44),DA#DSN       Copy DSN to OBTAIN Area\n         MVC   DSCB1VOL(06),DA#VOL       Copy VOL to OBTAIN Area\n         OBTAIN DSCBFMT1                 Get Type1 DSCB\n         LTR   R15,R15                   If not Error ?\n         BZ    @EXT_CPO_SKP1               goto @DSCB1CK\n         TPUT  =CL20'OBTAIN ERROR',20    *****************************\n@EXT_CPO_SKP1 EQU *\n         USING DSCBSEC1,R10              DSCB1 Base Reg. R11\n         LA    R10,JFCB1\n         MVC   WRITE_TTR(4),DS1LSTAR\n*        CALL  RV1BTH,(WRITE_TTR,WKMES+10,4)\n*        CALL  RV1BTH,(PC@TTRB,WKMES+20,4)\n*        TPUT  WKMES,80\n*\n*        MVC   WKMES,=CL80' > POINT:@@@@@@'\n*        CALL  RV1BTH,(WRITE_TTR,WKMES+09,3)\n*        TPUT  WKMES,80\n*\n         POINT EXTDCBPO,WRITE_TTR        FIRST DATA ADDRESS\n*\n         POINT PDSFRPO,PC@TTRB                    FIRST DATA ADDRESS\n@EXT_CPO_LOP EQU *\n*        TPUT  =CL80'** READ  **',80\n         L     R10,EXTRBUFA\n         READ  DECB30,SF,PDSFRPO,(R10),'S'\n         CHECK DECB30                            ( FIRST BLOCK )\n*        TPUT  =CL80'** WRITE **',80\n         LH    R01,RV1EBS\n         L     R02,DECB30+16\n         SH    R01,14(R02)\n         STH   R01,EXTDCBPO+X'3E'               copy block size\n*\n*        MVC   WKMES,=CL80' > WRITE LENGTH:@@@@'\n*        CALL  RV1BTH,(EXTDCBPO+X'3E',WKMES+16,2)\n*        TPUT  WKMES,80\n*\n         WRITE DECB31,SF,EXTDCBPO,(R10),'S'\n         CHECK DECB31                            ( FIRST BLOCK )\n         B     @EXT_CPO_LOP\n@EXT_CPO_LOPX EQU *\n*        TPUT  =CL20'STOW',20\n         MVC   SA_NAME(8),RV1EMN\n         STOW  EXTDCBPO,ST#LISTA,A\n         ST    R15,STOW_RC\n         ST    R00,STOW_RSN\n         CLOSE (PDSFRPO,,EXTDCBPO)\n         MVC   DA#DISP(3),=CL3'FRE'            free\n         MVC   DA#RETDD(8),EXTDCBPO+X'28'\n         DROP  R11\n         L     R01,@EXT_GETMA            Set Parameter\n         CALL  RV1DALC                   Call Dynamic Alloc Routine\n         L     R01,EXTRBUFA\n         LH    R02,RV1EBS\n         FREEMAIN RC,LV=(R02),A=(R01)    Free Dynamic Alloc Area\n         L     R01,@EXT_GETMA\n         L     R02,=A(RV1ALCDL)\n         FREEMAIN RC,LV=(R02),A=(R01)    Free Dynamic Alloc Area\n*\n         CALL  ISPLINK,(SETMSG,REV021),VL\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=0\n*        BR    R12\n@EXT_GETMAIN_ERROR EQU *\n         BAL   R14,GETMAIN_ERROR\n         L     R11,@EXT_GETMA            Set Parameter\n         USING RV1ALCD,R11\n         MVC   DA#DISP(3),=CL3'FRE'            free\n         MVC   DA#RETDD(8),EXTDCBPO+X'28'\n         DROP  R11\n         L     R01,@EXT_GETMA            Set Parameter\n         CALL  RV1DALC                   Call Dynamic Alloc Routine\n         L     R01,@EXT_GETMA\n         L     R02,=A(RV1ALCDL)\n         FREEMAIN RC,LV=(R02),A=(R01)    Free Dynamic Alloc Area\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=0\n*        BR    R12\n*-------------------------------------------------------------------\n*-------------------------------------------------------------------\n@DS_CONV EQU   *\n         STM   R00,R14,@DC_REGS\n         LR    R10,R00                   From Address ( 46 Byte )\n         LR    R08,R01                   To Address ( 44 Byte )\n*\n         MVI   0(R08),C' '               Space Clear\n         MVC   1(44-1,R08),0(R08)\n*\n         CLI   0(R10),C''''              If Quotation\n         BE    @DC_SKP1                    goto @DC_SKP1\n         LA    R01,RVPREFIX              R01 <- TSO Prefix Address\n         LA    R02,7                     R02 <- Maximam Length\n@DC_LOP1 EQU   *\n         CLI   0(R01),C' '               If End ?\n         BE    @DC_LOP1X                   goto @DC_LOP1X\n         LA    R01,1(R01)                Shift\n         BCT   R02,@DC_LOP1              Loop @DC_LOP1\n@DC_LOP1X EQU  *\n         LA    R15,RVPREFIX              Calculate Prefix Length\n         SR    R01,R15\n*        STC   R01,*+5\n*        MVC   0(0,R08),ZPREFIX          Copy TSO Prefix\n*VDSNP   MVC   0(0,R08),ZPREFIX          Copy TSO Prefix\n         EX    R01,MVDSNP\n         LA    R08,0(R08,R01)            R08 <- DSN Address + Prefix\n         MVI   0(R08),C'.'               Add Period\n         LA    R08,1(R08)                Plus 1 ( for Period )\n         LR    R01,R10                   R01 <- Input Dataset Address\n         LA    R15,46-1                  R15 <- DSN Area Length\n@DC_LOP2 EQU   *\n         CLI   0(R01),C' '               If End ?\n         BE    @DC_LOP2X                   goto @DC_LOP2X\n         LA    R01,1(R01)                Shift\n         BCT   R15,@DC_LOP2              Loop @DC_LOP2\n@DC_LOP2X EQU  *\n         LA    R01,46-1                  Calculate DSN Length\n         SR    R01,R15\n*VDSNP2  MVC   0(0,R08),0(R10)           Coopy Dataset Name\n         EX    R01,MVDSNP2\n         B     @DC_SKP2                  goto Next\n@DC_SKP1 EQU   *                         Quotation !\n         LA    R01,1(R10)                R01 <- DSN Address\n         LA    R15,46-1                  R15 <- DSN Length\n@DC_LOP3 EQU   *\n         CLI   0(R01),C''''              If End ?\n         BE    @DC_LOP3X                   goto @DC_LOP3X\n         LA    R01,1(R01)                Shift\n         BCT   R15,@DC_LOP3              Loop @DC_LOP3\n@DC_LOP3X EQU  *\n         LA    R01,46-1                  Calculate DSN Length\n         SR    R01,R15\n         BCTR  R01,0\n*VDSNP3  MVC   0(0,R08),1(R10)           Copy DSN\n         EX    R01,MVDSNP3\n@DC_SKP2 EQU   *\n         LM    R00,R14,@DC_REGS\n         BR    R14\n*-------------------------------------------------------------------\n@CRREGS  DS    18F\n@CNVRECFM EQU  *\n* R01 <- from\n* R02 <- to\n         STM   R00,R15,@CRREGS\n         LR    R10,R01\n         LR    R11,R02\n         LA    R12,3\n*        LA    R01,RV1ERF\n         LA    R02,L'RV1ERF\n         XC    0(1,R11),0(11)\n@CR_RECFM_LOP1 EQU *\n         CLI   0(R10),C'M'\n         BNE   @CR_RECFM_MX\n         OI    0(R11),DA#RECFM_M\n         B     @CR_RECFM_LOP1N\n@CR_RECFM_MX EQU *\n         CLI   0(R10),C'A'\n         BNE   @CR_RECFM_AX\n         OI    0(R11),DA#RECFM_A\n         B     @CR_RECFM_LOP1N\n@CR_RECFM_AX EQU *\n         CLI   0(R10),C'S'\n         BNE   @CR_RECFM_SX\n         OI    0(R11),DA#RECFM_S\n         B     @CR_RECFM_LOP1N\n@CR_RECFM_SX EQU *\n         CLI   0(R10),C'B'\n         BNE   @CR_RECFM_BX\n         OI    0(R11),DA#RECFM_B\n         B     @CR_RECFM_LOP1N\n@CR_RECFM_BX EQU *\n         CLI   0(R10),C'D'\n         BNE   @CR_RECFM_DX\n         OI    0(R11),DA#RECFM_D\n         B     @CR_RECFM_LOP1N\n@CR_RECFM_DX EQU *\n         CLI   0(R10),C'T'\n         BNE   @CR_RECFM_TX\n         OI    0(R11),DA#RECFM_T\n         B     @CR_RECFM_LOP1N\n@CR_RECFM_TX EQU *\n         CLI   0(R10),C'V'\n         BNE   @CR_RECFM_VX\n         OI    0(R11),DA#RECFM_V\n         B     @CR_RECFM_LOP1N\n@CR_RECFM_VX EQU *\n         CLI   0(R10),C'F'\n         BNE   @CR_RECFM_FX\n         OI    0(R11),DA#RECFM_F\n         B     @CR_RECFM_LOP1N\n@CR_RECFM_FX EQU *\n         CLI   0(R10),C'U'\n         BNE   @CR_RECFM_UX\n         OI    0(R11),DA#RECFM_U\n         B     @CR_RECFM_LOP1N\n@CR_RECFM_UX EQU *\n@CR_RECFM_LOP1N EQU *\n         LA    R10,1(R10)\n         BCT   R12,@CR_RECFM_LOP1\n         LM    R00,R15,@CRREGS\n         BR    R14\n*-------------------------------------------------------------------\nIOERR_W  EQU   *\n         SYNADAF ACSMETH=BPAM\n         STM   R01,R15,REGS\n         LA    R01,91(R01)\n*        B     @IOERR\n         MVC   ERRMSG04+23(15),0(R01)\n         CALL  RV1BTH,(W_TTR,ERRMSG04+16,3)\n         TPUT  ERRMSG04,L'ERRMSG04\n         B     @IOERR\nIOERR_WS EQU   *\n         SYNADAF ACSMETH=BSAM\n         STM   R01,R15,REGS\n         LA    R01,91(R01)\n         MVC   ERRMSG04+23(15),0(R01)\n         CALL  RV1BTH,(W_TTR,ERRMSG04+16,3)\n         TPUT  ERRMSG04,L'ERRMSG04\n         B     @IOERR\n@IOERR   EQU   *\n         LM    R01,R15,REGS\n         SYNADRLS\n*        LTR   R00,R00\n*        BZ    @IOERRX\n*        TPUT  =CL20'SYNADRLS ERR',20\n*+       B     @R_EXIT\n@IOERRX  EQU   *\n         TPUT  =CL20'RETURN      ',20\n         LM    R01,R15,REGS\n         PRINT GEN\n         RETURN\n         PRINT NOGEN\n*        B     @M_NEXT\nGETMAIN_ERROR EQU *\n*-------------------------------------------------------------------\n*REV010                             .ALARM = YES\n*'Insufficienty Region Size for this Function. Please Check It. and ' +\n*'add More Virtual Storage or Close Any Applications.'\n*-------------------------------------------------------------------\n         CALL  ISPLINK,(SETMSG,REV010),VL\n         BR    R14\nREV010   DC   CL8'REV010'\n*-------------------------------------------------------------------\n*-------- Dataset Configratin Block --------------------------------\n*-------------------------------------------------------------------\nMVRV1EREC MVC   RV1EREC(0),0(R01)\nMVRV1TRKC MVC   RV1TRKC(0),0(R01)\nMVRV1CSPT MVC   RV1CSPT(0),0(R01)\nMVDA#ERR2 MVC   0(0,R10),2(R02)\nMVDSNP   MVC   0(0,R08),RVPREFIX         Copy TSO Prefix\nMVDSNP2  MVC   0(0,R08),0(R10)           Coopy Dataset Name\nMVDSNP3  MVC   0(0,R08),1(R10)           Copy DSN\n*-------------------------------------------------------------------\nWKMES    DC    CL80'>>'\n* --- Pack, Unpack Work Area ---\n         DS    0D\nPK_AREA  DC    PL8'0'\nUPK_AREA DC    CL16' '\n*                                1\n*                    6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1\nEDMASK   DC    XL16'40202020202020202020202020202120'\nEDWORK   DS    XL16\n*-------------------------------------------------------------------\n*-------------------------------------------------------------------\n*-------------------------------------------------------------------\nEXTDCBPS DCB   DSORG=PS,MACRF=W,DDNAME=@@@@,                           *\n               SYNAD=IOERR_WS\nEXTDCBPO DCB   DSORG=PO,MACRF=W,DDNAME=@@@@,                           *\n               SYNAD=IOERR_WS\nPDSFR    DCB   DSORG=PO,MACRF=(R),DDNAME=@@@@,                         *\n               SYNAD=IOERR_WS,EODAD=@EXT_CPS_LOPX\nPDSFRPO  DCB   DSORG=PO,MACRF=(R),DDNAME=@@@@,                         *\n               SYNAD=IOERR_WS,EODAD=@EXT_CPO_LOPX\n*\nDSCBFMT1 CAMLST SEARCH,DSCB1DSN,DSCB1VOL,DSCB1\nDSCB1VOL DS    CL6\nJFCB1    DS    0CL176                    job file control block\nDSCB1DSN DS    CL44\nDSCB1    DS    CL140\n         DS    0F\nWRITE_TTR DS   XL4\n*\n         DS    0F\n* --- SAVE AREA ---\nSAVEAREA DS    18F                               SAVEAREA\n@DC_REGS DS    18F\n* --- Work Area ---\n*K#H     DS    H\nWK#F     DS    F\nWK#F2    DS    F\n* --- Register Save ( work ) area ---\nREGS     DS    18F                               WORK SAVEAREA\n         DS    0D\nEXTRBUFA DS    F\nPANELEXTQ DC   CL8'REV@EXTQ'                     ISPF PANEL ( INFO )\nPANELEXTR DC   CL8'REV@EXT2'                     ISPF PANEL ( INFO )\nPANELEXTW DC   CL8'REV@EXTW'                     ISPF PANEL ( INFO )\nPANELRC  DS    F\n* -----------------------------------\n         DS    0F\nST#LIST  DS    0CL24\nS_MEMBER DC    CL8'        '\nS_TTR    DC    XL3'000000'\nC        DC    BL1'10000110'\n*                  1.......    ARIAS\n*                  ...11111    USER DATA LENGTH ( HALF WORD )\nUSERDATA DC    CL12'- Revive! - '\n*\n         DS    0F\nST#LISTA DS    0CL42\nSA_NAME  DC    CL8'DUMMY   '\nSA_TTR   DC    XL3'000000'\n         DC    BL1'00001111'\n*                  ........    ARIAS\n*                  ...11111    USER DATA LENGTH ( HALF WORD )\nSA_VVMM  DC    XL4'00000000'\nSA_CRE   DC    XL4'0099049F'\nSA_CHA   DC    XL4'0099049F'\nSA_CHAH  DC    XL2'0000'\nSA_SIZE  DC    XL2'0000'\nSA_INIT  DC    XL2'0000'\nSA_MOD   DC    XL2'0000'\nSA_USER  DC    CL8'REVIVE!'\nSA_FIL   DC    CL2'  '\n*\n         DS    0F\nREV011   DC    CL8'REV011'\nREV012   DC    CL8'REV012'\nREV021   DC    CL8'REV021'\nDYRETCC  DS    CL4\nDYINFOC  DS    CL4\nL4       DC    F'4'\nL8       DC    F'8'\nDAMSGA   DS    F\nDAMSGL   DS    F\n* --- work of ttr ---\nW_TTR    DS    0F,XL4                            work ttr\n         DS    0F\nSTOW_RC  DS    F\nSTOW_RSN DS    F\nSTOW_TTR DS    XL4\nSTOW_NAME DS   CL8\n* --- Getmain Address ---\n@EXT_GETMA DS  F\n         DS    0F\n*--- messages ---\n*                   |....+....1....+....2....+....3....+....4....+....5\n*              ....+....6....+....7....+....8\nERRMSG04 DC    CL60'< I/O Error TTR:@@@@@@ @@@@@@@@@@@@@@@ >'\n*-------------------------------------------------------------------\nRV1EXTRL DC    CL26'(RV1TRKC RV1EREC RV1CSPT)'\nRV1TRKC  DS    CL8\nRV1EREC  DS    CL8\nRV1CSPT  DS    CL8\nRV1TRKCB DS    F                         Blocks per 1 Track\nRV1TRKCN DC    CL8'RV1TRKC '\nRV1TRKCL DS    F\nRV1ERECB DS    F                         Member Records\nRV1ERECN DC    CL8'RV1EREC '\nRV1ERECL DS    F\nRV1CSPTB DS    F                         Request Tracks\nRV1CSPTN DC    CL8'RV1CSPT '\nRV1CSPTL DS    F\nM1N      DC    CL8'M1'\nM2N      DC    CL8'M2'\nM3N      DC    CL8'M3'\nM4N      DC    CL8'M4'\nM5N      DC    CL8'M5'\n*-------------------------------------------------------------------\nVOLSER   DS    CL8\nBLKSZ    DS    XL2\n*-------------------------------------------------------------------\n         LTORG\n*-------------------------------------------------------------------\n         COPY  RV1#ISPC\n         COPY  RV1#ETOP\n*-------------------------------------------------------------------\n         DSECT\n         COPY RV1#COMM\n*-------------------------------------------------------------------\n         RV1#CMDA SECTTYP=DSECT\n*-------------------------------------------------------------------\n         DS    0D\n*-------------------------------------------------------------------\n         RV1#ISPV SECTTYP=DSECT\n*-------------------------------------------------------------------\n         COPY  RV1#ALCD\n*-------------------------------------------------------------------\n         COPY RV1#DTH\n*-------------------------------------------------------------------\n         RV1#DTE  SECTTYP=DSECT\n*-------------------------------------------------------------------\n         RV1#FMTB SECTTYP=DSECT\n*-------------------------------------------------------------------\nJFCBSECT DSECT\n         IEFJFCBN LIST=YES\n         IEFUCBOB LIST=YES\n         DCBD  DSORG=PO,DEVD=DA\n         CVT   DSECT=YES,LIST=YES\nDSCBSEC1 DSECT\n         IECSDSL1 (1)\nR00      EQU   00\nR01      EQU   01\nR02      EQU   02\nR03      EQU   03\nR04      EQU   04\nR05      EQU   05\nR06      EQU   06\nR07      EQU   07\nR08      EQU   08\nR09      EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   RV1EXTR\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#FMTB": {"ttr": 2566, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x16\\x00\\x16\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "KIMU"}, "text": "         MACRO\n&NAME    RV1#FMTB &SECTTYP=DSECT\n         AIF   ('&SECTTYP' NE 'DSECT').SECTSKP\n.NDST    ANOP\nDFORMATT DSECT\n.SECTSKP ANOP\nDFTFIRST EQU   *\nDFTRFM   DS    XL1                       Recfm\n*                 'ooo.....'\n*                  x                     recfm:v\n*                   x                    recfm:f\n*                    x                   recfm:u\n         DS    XL1\nDFTFLRL  DS    XL2                       LRECL ( recfm:f )\nDFTVLRL  DS    XL2                       LRECL ( recfm:v )\nDFTBLKSZ DS    XL2                       BLKSIZE\nDFTEXTM  DS    XL4                       Member Exist ( Match )\nDFTEXTU  DS    XL4                       Member Exist ( UnMatch )\nDFTNOFM  DS    XL4                       Member No Exist ( Match )\nDFTNOFU  DS    XL4                       Member No Exist ( UnMatch )\nDFTLAST  EQU   *-DFTFIRST                Length\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#HDR": {"ttr": 2568, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\t\\x00\\x00\\x00\\x982/\\x00\\x99'O\\x17\\x00\\x00\\t\\x00\\t\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "01.09", "flags": 0, "createdate": "1998-11-18T00:00:00", "modifydate": "1999-10-01T17:00:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "KIMU"}, "text": "* -----------------------------------------------------------------\nRVV      DC   CL6'v0r9m3'\n         DC   C' ) _ Kimu  // '\n         DC   C' Fixed Date : '\nREVD     DC   C'09/09/99 00.00'\n*EVD     DC   C'*Test Virsion*'\n         DC   C' Compiled Date : '\nREVC     DC   C'&SYSDATE &SYSTIME'\n* -----------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#ISPC": {"ttr": 2570, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00*\\x00*\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "KIMU"}, "text": "* ------------------------------------------------------------------\n*        ISPF Control Name\n* ------------------------------------------------------------------\nCONTROL  DC    CL8'CONTROL '\nDISPLAY  DC    CL8'DISPLAY '\nADDPOP   DC    CL8'ADDPOP  '\nREMPOP   DC    CL8'REMPOP  '\nSAVE     DC    CL8'SAVE    '\nRESTORE  DC    CL8'RESTORE '\nTBDELETE DC    CL8'TBDELETE'\nTBSCAN   DC    CL8'TBSCAN  '\nLOCK     DC    CL8'LOCK    '\nSETMSG   DC    CL8'SETMSG  '\nGETMSG   DC    CL8'GETMSG  '\nISRZ001  DC    CL8'ISRZ001 '\nVDEFINE  DC    CL8'VDEFINE '\nTBCREATE DC    CL8'TBCREATE'\nTBTOP    DC    CL8'TBTOP   '\nTBSKIP   DC    CL8'TBSKIP  '\nTBQUERY  DC    CL8'TBQUERY '\nTBDISPL  DC    CL8'TBDISPL '\nTBCLOSE  DC    CL8'TBCLOSE '\nTBADD    DC    CL8'TBADD   '\nVPUT     DC    CL8'VPUT    '\nVGET     DC    CL8'VGET    '\nASIS     DC    CL8'ASIS    '\nPROFILE  DC    CL8'PROFILE '\nBROWSE   DC    CL8'BROWSE  '\nPQUERY   DC    CL8'PQUERY  '\nVREPLACE DC    CL8'VREPLACE'\nNONDISPL DC    CL8'NONDISPL'\nENTER    DC    CL8'ENTER   '\nCHAR     DC    CL8'CHAR    '\nFIXED    DC    CL8'FIXED   '\n* ------------------------------------------------------------------\n*        ISPF Panel Name\n* ------------------------------------------------------------------\nPANELENT DC    CL8'REV@ENTY'             Dataset Entry Panel\nPANELANL DC    CL8'REV@WAIT'             Analysis Panel\nPANELLST DC    CL8'REV@LST '             list Panel\nPANELMCH DC    CL8'REV@MCHK'             Member Name Check\nPANELSHO DC    CL8'REV@SHOW'             Member Name Check\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#ISPV": {"ttr": 2572, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x01\\xa7\\x01\\xa7\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 423, "newlines": 423, "modlines": 0, "user": "KIMU"}, "text": "         MACRO\n&NAME    RV1#ISPV &SECTTYP=DSECT\n         AIF   ('&SECTTYP' EQ 'CSECT').NCST\n         AIF   ('&SECTTYP' EQ 'DSECT').NDST\n         MNOTE 8,'SHOULD SET SECTTYP CSECT OR DSECT.'\n         AGO   .ISPVEXIT\n.NCST    ANOP\nRV1ISPF  CSECT\n         AGO   .NEXIT\n.NDST    ANOP\nRV1ISPF  DSECT\n         AGO   .NEXIT\n.NEXIT   ANOP\n* ------------------------------------------------------------------\n*        ISPF Variable Define\n* ------------------------------------------------------------------\nISPVNM   DS    0CL8                      Based R07\nRVVN     DC    CL8'RVV     '             Revive! Version\nREVDN    DC    CL8'REVD    '             Revive! Fixed Date\nREVCN    DC    CL8'REVC    '             Revive! Compile Date\nRV1DSNN  DC    CL8'RV1DSN  '             Input Dataset Name\nRV1DSNCN DC    CL8'RV1DSNC '             Input Dataset Name\nRV1VOLN  DC    CL8'RV1VOL  '             Input Dataset Volume Serial\nRV1TVOLN DC    CL8'RV1TVOL '             Target Dataset Volume Serial\nRV1EXTON DC    CL8'RV1EXTO '             Extended Scan Option\nRV1ADDCN DC    CL8'RV1ADDC '             Add Current Members Flag\nRV1DISPN DC    CL8'RV1DISP '             Input Dataset Disposition\nRV1TBSPN DC    CL8'RV1TBSP '             Directory Table Size\nRV1SSTRN DC    CL8'RV1SSTR '             Search String\nZPREFIXN DC    CL8'ZPREFIX '             TSO Prefix\nRV1PRCN  DC    CL8'RV1PRC  '             Process Flag\nRV1EXTCN DC    CL8'RV1EXTC '             Extent Process Flag\nO#VOLN   DC    CL8'O#VOL   '             Volume Serial\nO#ASPN   DC    CL8'O#ASP   '             Dataset Start Physical Address\nO#DBLKN  DC    CL8'O#DBLK  '             Directory Block#\nO#ADPN   DC    CL8'O#ADP   '             Data Start Physical Address\nO#ADP2N  DC    CL8'O#ADP2  '             Data Start Logical Address\nO#AUPN   DC    CL8'O#AUP   '             Unused Area Physical Address\nO#AUP2N  DC    CL8'O#AUP2  '             Unused Area Logical Address\nO#AEPN   DC    CL8'O#AEP   '             End of Data Physical Address\nO#AEP2N  DC    CL8'O#AEP2  '             End of Data Logical Address\nO#RECFMN DC    CL8'O#RECFM '             Recfm\nB#LRECLN DC    CL8'B#LRECL '             Lrecl\nB#BLKSZN DC    CL8'B#BLKSZ '             Block Size\nO#DEVTN  DC    CL8'O#DEVT  '             Device Type\nO#EXTN   DC    CL8'O#EXT   '             Extent\nO#MEMN   DC    CL8'O#MEM   '             Member\nO#ALCN   DC    CL8'O#ALC   '             Allocated Track\nO#USEN   DC    CL8'O#USE   '             Used Percent\nO#CREN   DC    CL8'O#CRE   '             Creation Date\nO#EXPN   DC    CL8'O#EXP   '             Expiration Date\nO#SYSCDN DC    CL8'O#SYSCD '             System Code\nO#L1N    DC    CL8'O#L1    '             Extent 1 Low Address\nO#H1N    DC    CL8'O#H1    '             Extent 1 high Address\nO#L2N    DC    CL8'O#L2    '             Extent 2 Low Address\nO#H2N    DC    CL8'O#H2    '             Extent 2 high Address\nO#L3N    DC    CL8'O#L3    '             Extent 3 Low Address\nO#H3N    DC    CL8'O#H3    '             Extent 3 high Address\nO#L4N    DC    CL8'O#L4    '             Extent 4 Low Address\nO#H4N    DC    CL8'O#H4    '             Extent 4 high Address\nO#L5N    DC    CL8'O#L5    '             Extent 5 Low Address\nO#H5N    DC    CL8'O#H5    '             Extent 5 high Address\nO#L6N    DC    CL8'O#L6    '             Extent 6 Low Address\nO#H6N    DC    CL8'O#H6    '             Extent 6 high Address\nO#L7N    DC    CL8'O#L7    '             Extent 7 Low Address\nO#H7N    DC    CL8'O#H7    '             Extent 7 high Address\nO#L8N    DC    CL8'O#L8    '             Extent 8 Low Address\nO#H8N    DC    CL8'O#H8    '             Extent 8 high Address\nO#L9N    DC    CL8'O#L9    '             Extent 9 Low Address\nO#H9N    DC    CL8'O#H9    '             Extent 9 high Address\nO#L10N   DC    CL8'O#L10   '             Extent 10 Low Address\nO#H10N   DC    CL8'O#H10   '             Extent 10 high Address\nO#L11N   DC    CL8'O#L11   '             Extent 11 Low Address\nO#H11N   DC    CL8'O#H11   '             Extent 11 high Address\nO#L12N   DC    CL8'O#L12   '             Extent 12 Low Address\nO#H12N   DC    CL8'O#H12   '             Extent 12 high Address\nO#L13N   DC    CL8'O#L13   '             Extent 13 Low Address\nO#H13N   DC    CL8'O#H13   '             Extent 13 high Address\nO#L14N   DC    CL8'O#L14   '             Extent 14 Low Address\nO#H14N   DC    CL8'O#H14   '             Extent 14 high Address\nO#L15N   DC    CL8'O#L15   '             Extent 15 Low Address\nO#H15N   DC    CL8'O#H15   '             Extent 15 high Address\nO#L16N   DC    CL8'O#L16   '             Extent 16 Low Address\nO#H16N   DC    CL8'O#H16   '             Extent 16 high Address\nRV1EDSN  DC    CL8'RV1EDS  '             Extract Dataset Name\nRV1EDMN  DC    CL8'RV1EMN  '             Extract Member Name\nRV1EVON  DC    CL8'RV1EVO  '             Extract Volume Serial\nRV1ESPN  DC    CL8'RV1ESP  '             Extract Space Units\nRV1ESQ1N DC    CL8'RV1ESQ1 '             Extract Primary Quantity\nRV1ESQ2N DC    CL8'RV1ESQ2 '             Extract Secondary Quantity\nRV1ESPDN DC    CL8'RV1ESPD '             Extract Directory Blocks\nRV1ERFN  DC    CL8'RV1ERF  '             Extract Record Format\nRV1ERLN  DC    CL8'RV1ERL  '             Extract Record Length\nRV1EBSN  DC    CL8'RV1EBS  '             Extract Block Size\nVDEPTHN  DC    CL8'VDEPTH  '             List Panel Dynamic Area Depth\nVWIDTHN  DC    CL8'VWIDTH  '             List Panel Dynamic Area Width\nVROWN    DC    CL8'VROW    '             List Panel Dynamic Area Row\nVCOLN    DC    CL8'VCOL    '             List Panel Dynamic Area Column\nVTYPEN   DC    CL8'VTYPE   '             List Panel Dynamic Area Type\nZSCROLAN DC    CL8'ZSCROLLA'             Scroll AMT ( HALF,MAX,...)\nZSCROLNN DC    CL8'ZSCROLLN'             Scroll Lines\nZVERBN   DC    CL8'ZVERB   '             Command Verb\nZERRMSGN DC    CL8'ZERRMSG '             ISPF Error Message ID\nRV1DTTLN DC    CL8'RV1DTTL '             Revive! List Title Area\nREVTRCN  DC    CL8'REVTRC  '             Revive! Trace option\nTRCMESN  DC    CL8'TRCMES  '             Revive! Trace Message\nTRCMESSN DC    CL8'TRCMESS '             Revive! Trace Message Short\n*\nENDMARK  DC    XL8'FFFFFFFFFFFFFFFF'     VDEFINE Table End Mark\n*\n*SPVNML  EQU   *-ISPVNM\n*SPVNME  EQU   *\n* ------------------------------------------------------------------\n*        ISPF Variable Length\n* ------------------------------------------------------------------\n         AIF   ('&SECTTYP' EQ 'CSECT').LCST\n         AIF   ('&SECTTYP' EQ 'DSECT').LDST\n.LCST    ANOP\nRV1VLEN  CSECT\n         AGO   .LEXIT\n.LDST    ANOP\nRV1VLEN  DSECT\n         AGO   .LEXIT\n.LEXIT   ANOP\n*SPVLEN  DS    0F                        Based R08\nRVVL     DC    F'6'                      Revive! Version\nREVDL    DC    F'14'                     Revive! Fixed Date\nREVCL    DC    F'14'                     Revive! Compile Date\nRV1DSNL  DC    F'46'                     Input Dataset Name\nRV1DSNCL DC    F'44'                     Input Dataset Name\nRV1VOLL  DC    F'6'                      Input Dataset Volume Serial\nRV1TVOLL DC    F'6'                      Target Dataset Volume Serial\nRV1EXTOL DC    F'1'                      Extended Scan Option\nRV1ADDCL DC    F'1'                      Add Current Members Flag\nRV1DISPL DC    F'1'                      Input Dataset Disposition\nRV1TBSPL2 DC   F'4'                      Directory Table Size\nRV1SSTRL2 DC   F'50'                     Search String\nZPREFIXL DC    F'8'                      TSO Prefix\nRV1PRCL  DC    F'3'                      Process Flag\nRV1EXTCL DC    F'1'                      Extent Process Flag\nO#VOLL   DC    F'6'                      Volume Serial\nO#ASPL   DC    F'17'                     Dataset Start Physical Address\nO#DBLKL  DC    F'4'                      Directory Block#\nO#ADPL   DC    F'17'                     Data Start Physical Address\nO#ADP2L  DC    F'6'                      Data Start Logical Address\nO#AUPL   DC    F'17'                     Unused Area Physical Address\nO#AUP2L  DC    F'6'                      Unused Area Logical Address\nO#AEPL   DC    F'17'                     End of Data Physical Address\nO#AEP2L  DC    F'6'                      End of Data Logical Address\nO#RECFML DC    F'3'                      Recfm\nB#LRECLL DC    F'2'                      Lrecl\nB#BLKSZL DC    F'2'                      Block Size\nO#DEVTL  DC    F'4'                      Device Type\nO#EXTL   DC    F'1'                      Extent\nO#MEML   DC    F'4'                      Member\nO#ALCL   DC    F'4'                      Allocated Track\nO#USEL   DC    F'2'                      Used Percent\nO#CREL   DC    F'6'                      Creation Date\nO#EXPL   DC    F'6'                      Expiration Date\nO#SYSCDL DC    F'13'                     System Code\nO#L1L    DC    F'8'                      Extent 1 Low Address\nO#H1L    DC    F'8'                      Extent 1 high Address\nO#L2L    DC    F'8'                      Extent 2 Low Address\nO#H2L    DC    F'8'                      Extent 2 high Address\nO#L3L    DC    F'8'                      Extent 3 Low Address\nO#H3L    DC    F'8'                      Extent 3 high Address\nO#L4L    DC    F'8'                      Extent 4 Low Address\nO#H4L    DC    F'8'                      Extent 4 high Address\nO#L5L    DC    F'8'                      Extent 5 Low Address\nO#H5L    DC    F'8'                      Extent 5 high Address\nO#L6L    DC    F'8'                      Extent 6 Low Address\nO#H6L    DC    F'8'                      Extent 6 high Address\nO#L7L    DC    F'8'                      Extent 7 Low Address\nO#H7L    DC    F'8'                      Extent 7 high Address\nO#L8L    DC    F'8'                      Extent 8 Low Address\nO#H8L    DC    F'8'                      Extent 8 high Address\nO#L9L    DC    F'8'                      Extent 9 Low Address\nO#H9L    DC    F'8'                      Extent 9 high Address\nO#L10L   DC    F'8'                      Extent 10 Low Address\nO#H10L   DC    F'8'                      Extent 10 high Address\nO#L11L   DC    F'8'                      Extent 11 Low Address\nO#H11L   DC    F'8'                      Extent 11 high Address\nO#L12L   DC    F'8'                      Extent 12 Low Address\nO#H12L   DC    F'8'                      Extent 12 high Address\nO#L13L   DC    F'8'                      Extent 13 Low Address\nO#H13L   DC    F'8'                      Extent 13 high Address\nO#L14L   DC    F'8'                      Extent 14 Low Address\nO#H14L   DC    F'8'                      Extent 14 high Address\nO#L15L   DC    F'8'                      Extent 15 Low Address\nO#H15L   DC    F'8'                      Extent 15 high Address\nO#L16L   DC    F'8'                      Extent 16 Low Address\nO#H16L   DC    F'8'                      Extent 16 high Address\nRV1EDSL  DC    F'46'                     Extract Dataset Name\nRV1EMNL  DC    F'8'                      Extract Member Name\nRV1EVOL  DC    F'6'                      Extract Volume Serial\nRV1ESPL  DC    F'3'                      Extract Space Units\nRV1ESQ1L DC    F'4'                      Extract Primary Quantity\nRV1ESQ2L DC    F'4'                      Extract Secondary Quantity\nRV1ESPDL DC    F'4'                      Extract Directory Blocks\nRV1ERFL  DC    F'3'                      Extract Record Format\nRV1ERLL  DC    F'2'                      Extract Record Length\nRV1EBSL  DC    F'2'                      Extract Block Size\nVDEPTHL  DC    F'4'                      List Panel Dynamic Area Depth\nVWIDTHL  DC    F'4'                      List Panel Dynamic Area Width\nVROWL    DC    F'4'                      List Panel Dynamic Area Row\nVCOLL    DC    F'4'                      List Panel Dynamic Area Column\nVTYPEL   DC    F'8'                      List Panel Dynamic Area Type\nZSCROLAL DC    F'4'                      Scroll AMT ( HALF,MAX,...)\nZSCROLNL DC    F'4'                      Scroll Lines\nZVERBL   DC    F'8'                      Command Verb\nZERRMSGL DC    F'8'                      ISPF Error Message ID\nRV1DTTLL DC    F'80'                     Revive! List Title Area\nREVTRCL  DC    F'3'                      Revive! Trace Option\nTRCMESL  DC    F'80'                     Revive! Trace Message\nTRCMESSL DC    F'20'                     Revive! Trace Message Short\n* ------------------------------------------------------------------\n*        ISPF Variable Type\n* ------------------------------------------------------------------\n         AIF   ('&SECTTYP' EQ 'CSECT').TCST\n         AIF   ('&SECTTYP' EQ 'DSECT').TDST\n.TCST    ANOP\nRV1VTYP  CSECT\n         AGO   .TEXIT\n.TDST    ANOP\nRV1VTYP  DSECT\n         AGO   .TEXIT\n.TEXIT   ANOP\n*SPVTYP  DS    0CL8                      Based R09\nRVVT     DC    CL8'CHAR    '             Revive! Version\nREVDT    DC    CL8'CHAR    '             Revive! Fixed Date\nREVCT    DC    CL8'CHAR    '             Revive! Compile Date\nRV1DSNT  DC    CL8'CHAR    '             Input Dataset Name\nRV1DSNCT DC    CL8'CHAR    '             Input Dataset Name\nRV1VOLT  DC    CL8'CHAR    '             Input Dataset Volume Serial\nRV1TVOLT DC    CL8'CHAR    '             Target Dataset Volume Serial\nRV1EXTOT DC    CL8'CHAR    '             Extended Scan Option\nRV1ADDCT DC    CL8'CHAR    '             Add Current Members Flag\nRV1DISPT DC    CL8'CHAR    '             Input Dataset Disposition\nRV1TBSPT DC    CL8'FIXED   '             Directory Table Size\nRV1SSTRT DC    CL8'CHAR    '             Search String\nZPREFIXT DC    CL8'CHAR    '             TSO Prefix\nRV1PRCT  DC    CL8'CHAR    '             Process Flag\nRV1EXTCT DC    CL8'FIXED   '             Extent Process Flag\nO#VOLT   DC    CL8'CHAR    '             Volume Serial\nO#ASPT   DC    CL8'CHAR    '             Dataset Start Physical Address\nO#DBLKT  DC    CL8'FIXED   '             Directory Block#\nO#ADPT   DC    CL8'CHAR    '             Data Start Physical Address\nO#ADP2T  DC    CL8'CHAR    '             Data Start Logical Address\nO#AUPT   DC    CL8'CHAR    '             Unused Area Physical Address\nO#AUP2T  DC    CL8'CHAR    '             Unused Area Logical Address\nO#AEPT   DC    CL8'CHAR    '             End of Data Physical Address\nO#AEP2T  DC    CL8'CHAR    '             End of Data Logical Address\nO#RECFMT DC    CL8'CHAR    '             Recfm\nB#LRECLT DC    CL8'FIXED   '             Lrecl\nB#BLKSZT DC    CL8'FIXED   '             Block Size\nO#DEVTT  DC    CL8'CHAR    '             Device Type\nO#EXTT   DC    CL8'FIXED   '             Extent\nO#MEMT   DC    CL8'FIXED   '             Member\nO#ALCT   DC    CL8'FIXED   '             Allocated Track\nO#USET   DC    CL8'FIXED   '             Used Percent\nO#CRET   DC    CL8'CHAR    '             Creation Date\nO#EXPT   DC    CL8'CHAR    '             Expiration Date\nO#SYSCDT DC    CL8'CHAR    '             System Code\nO#L1T    DC    CL8'CHAR    '             Extent 1 Low Address\nO#H1T    DC    CL8'CHAR    '             Extent 1 high Address\nO#L2T    DC    CL8'CHAR    '             Extent 2 Low Address\nO#H2T    DC    CL8'CHAR    '             Extent 2 high Address\nO#L3T    DC    CL8'CHAR    '             Extent 3 Low Address\nO#H3T    DC    CL8'CHAR    '             Extent 3 high Address\nO#L4T    DC    CL8'CHAR    '             Extent 4 Low Address\nO#H4T    DC    CL8'CHAR    '             Extent 4 high Address\nO#L5T    DC    CL8'CHAR    '             Extent 5 Low Address\nO#H5T    DC    CL8'CHAR    '             Extent 5 high Address\nO#L6T    DC    CL8'CHAR    '             Extent 6 Low Address\nO#H6T    DC    CL8'CHAR    '             Extent 6 high Address\nO#L7T    DC    CL8'CHAR    '             Extent 7 Low Address\nO#H7T    DC    CL8'CHAR    '             Extent 7 high Address\nO#L8T    DC    CL8'CHAR    '             Extent 8 Low Address\nO#H8T    DC    CL8'CHAR    '             Extent 8 high Address\nO#L9T    DC    CL8'CHAR    '             Extent 9 Low Address\nO#H9T    DC    CL8'CHAR    '             Extent 9 high Address\nO#L10T   DC    CL8'CHAR    '             Extent 10 Low Address\nO#H10T   DC    CL8'CHAR    '             Extent 10 high Address\nO#L11T   DC    CL8'CHAR    '             Extent 11 Low Address\nO#H11T   DC    CL8'CHAR    '             Extent 11 high Address\nO#L12T   DC    CL8'CHAR    '             Extent 12 Low Address\nO#H12T   DC    CL8'CHAR    '             Extent 12 high Address\nO#L13T   DC    CL8'CHAR    '             Extent 13 Low Address\nO#H13T   DC    CL8'CHAR    '             Extent 13 high Address\nO#L14T   DC    CL8'CHAR    '             Extent 14 Low Address\nO#H14T   DC    CL8'CHAR    '             Extent 14 high Address\nO#L15T   DC    CL8'CHAR    '             Extent 15 Low Address\nO#H15T   DC    CL8'CHAR    '             Extent 15 high Address\nO#L16T   DC    CL8'CHAR    '             Extent 16 Low Address\nO#H16T   DC    CL8'CHAR    '             Extent 16 high Address\nRV1EDST  DC    CL8'CHAR    '             Extract Dataset Name\nRV1EMNT  DC    CL8'CHAR    '             Extract Member Name\nRV1EVOT  DC    CL8'CHAR    '             Extract Volume Serial\nRV1ESPT  DC    CL8'CHAR    '             Extract Space Units\nRV1ESQ1T DC    CL8'FIXED   '             Extract Primary Quantity\nRV1ESQ2T DC    CL8'FIXED   '             Extract Secondary Quantity\nRV1ESPDT DC    CL8'FIXED   '             Extract Directory Blocks\nRV1ERFT  DC    CL8'CHAR    '             Extract Record Format\nRV1ERLT  DC    CL8'FIXED   '             Extract Record Length\nRV1EBST  DC    CL8'FIXED   '             Extract Block Size\nVDEPTHT  DC    CL8'FIXED   '             List Panel Dynamic Area Depth\nVWIDTHT  DC    CL8'FIXED   '             List Panel Dynamic Area Width\nVROWT    DC    CL8'FIXED   '             List Panel Dynamic Area Row\nVCOLT    DC    CL8'FIXED   '             List Panel Dynamic Area Column\nVTYPET   DC    CL8'CHAR    '             List Panel Dynamic Area Type\nZSCROLAT DC    CL8'CHAR    '             Scroll AMT ( HALF,MAX,...)\nZSCROLNT DC    CL8'FIXED   '             Scroll Lines\nZVERBT   DC    CL8'CHAR    '             Command Verb\nZERRMSGT DC    CL8'CHAR    '             ISPF Error Message ID\nRV1DTTLT DC    CL8'CHAR    '             Revive! List Title Area\nREVTRCT  DC    CL8'CHAR    '             Revive! Trace Option\nTRCMEST  DC    CL8'CHAR    '             Revive! Trace Message\nTRCMESST DC    CL8'CHAR    '             Revive! Trace Message Short\n* ------------------------------------------------------------------\n*        ISPF Variable Address\n* ------------------------------------------------------------------\n         AIF   ('&SECTTYP' EQ 'CSECT').ACST\n         AIF   ('&SECTTYP' EQ 'DSECT').ADST\n.ACST    ANOP\nRV1VADR  CSECT\n         AGO   .AEXIT\n.ADST    ANOP\nRV1VADR  DSECT\n         AGO   .AEXIT\n.AEXIT   ANOP\n*SPVADR  DS    0A                        Based R10\nRVVA     DC    A(RVV)                    Revive! Version\nREVDA    DC    A(REVD)                   Revive! Fixed Date\nREVCA    DC    A(REVC)                   Revive! Compile Date\nRV1DSNA  DC    A(RV1DSN)                 Input Dataset Name\nRV1DSNCA DC    A(RV1DSNC)                Input Dataset Name\nRV1VOLA  DC    A(RV1VOL)                 Input Dataset Volume Serial\nRV1TVOLA DC    A(RV1TVOL)                Target Dataset Volume Serial\nRV1EXTOA DC    A(RV1EXTO)                Extended Scan Option\nRV1ADDCA DC    A(RV1ADDC)                Add Current Members Flag\nRV1DISPA DC    A(RV1DISP)                Input Dataset Disposition\nRV1TBSPA2 DC   A(RV1TBSP)                Directory Table Size\nRV1SSTRA DC    A(RV1SSTR)                Search String\nZPREFIXA DC    A(ZPREFIX)                TSO Prefix\nRV1PRCA  DC    A(RV1PRC)                 Process Flag\nRV1EXTCA DC    A(RV1EXTC)                Extent Process Flag\nO#VOLA   DC    A(O#VOL)                  Volume Serial\nO#ASPA   DC    A(O#ASP)                  Dataset Start Physical Address\nO#DBLKA  DC    A(O#DBLK)                 Directory Block#\nO#ADPA   DC    A(O#ADP)                  Data Start Physical Address\nO#ADP2A  DC    A(O#ADP2)                 Data Start Logical Address\nO#AUPA   DC    A(O#AUP)                  Unused Area Physical Address\nO#AUP2A  DC    A(O#AUP2)                 Unused Area Logical Address\nO#AEPA   DC    A(O#AEP)                  End of Data Physical Address\nO#AEP2A  DC    A(O#AEP2)                 End of Data Logical Address\nO#RECFMA DC    A(O#RECFM)                Recfm\nB#LRECLA DC    A(B#LRECL)                Lrecl\nB#BLKSZA DC    A(B#BLKSZ)                Block Size\nO#DEVTA  DC    A(O#DEVT)                 Device Type\nO#EXTA   DC    A(O#EXT)                  Extent\nO#MEMA   DC    A(O#MEM)                  Member\nO#ALCA   DC    A(O#ALC)                  Allocated Track\nO#USEA   DC    A(O#USE)                  Used Percent\nO#CREA   DC    A(O#CRE)                  Creation Date\nO#EXPA   DC    A(O#EXP)                  Expiration Date\nO#SYSCDA DC    A(O#SYSCD)                System Code\nO#L1A    DC    A(O#L1)                   Extent 1 Low Address\nO#H1A    DC    A(O#H1)                   Extent 1 high Address\nO#L2A    DC    A(O#L2)                   Extent 2 Low Address\nO#H2A    DC    A(O#H2)                   Extent 2 high Address\nO#L3A    DC    A(O#L3)                   Extent 3 Low Address\nO#H3A    DC    A(O#H3)                   Extent 3 high Address\nO#L4A    DC    A(O#L4)                   Extent 4 Low Address\nO#H4A    DC    A(O#H4)                   Extent 4 high Address\nO#L5A    DC    A(O#L5)                   Extent 5 Low Address\nO#H5A    DC    A(O#H5)                   Extent 5 high Address\nO#L6A    DC    A(O#L6)                   Extent 6 Low Address\nO#H6A    DC    A(O#H6)                   Extent 6 high Address\nO#L7A    DC    A(O#L7)                   Extent 7 Low Address\nO#H7A    DC    A(O#H7)                   Extent 7 high Address\nO#L8A    DC    A(O#L8)                   Extent 8 Low Address\nO#H8A    DC    A(O#H8)                   Extent 8 high Address\nO#L9A    DC    A(O#L9)                   Extent 9 Low Address\nO#H9A    DC    A(O#H9)                   Extent 9 high Address\nO#L10A   DC    A(O#L10)                  Extent 10 Low Address\nO#H10A   DC    A(O#H10)                  Extent 10 high Address\nO#L11A   DC    A(O#L11)                  Extent 11 Low Address\nO#H11A   DC    A(O#H11)                  Extent 11 high Address\nO#L12A   DC    A(O#L12)                  Extent 12 Low Address\nO#H12A   DC    A(O#H12)                  Extent 12 high Address\nO#L13A   DC    A(O#L13)                  Extent 13 Low Address\nO#H13A   DC    A(O#H13)                  Extent 13 high Address\nO#L14A   DC    A(O#L14)                  Extent 14 Low Address\nO#H14A   DC    A(O#H14)                  Extent 14 high Address\nO#L15A   DC    A(O#L15)                  Extent 15 Low Address\nO#H15A   DC    A(O#H15)                  Extent 15 high Address\nO#L16A   DC    A(O#L16)                  Extent 16 Low Address\nO#H16A   DC    A(O#H16)                  Extent 16 high Address\nRV1EDSA  DC    A(RV1EDS)                 Extract Dataset Name\nRV1EMNA  DC    A(RV1EMN)                 Extract Member Name\nRV1EVOA  DC    A(RV1EVO)                 Extract Volume Serial\nRV1ESPA  DC    A(RV1ESP)                 Extract Space Units\nRV1ESQ1A DC    A(RV1ESQ1)                Extract Primary Quantity\nRV1ESQ2A DC    A(RV1ESQ2)                Extract Secondary Quantity\nRV1ESPDA DC    A(RV1ESPD)                Extract Directory Blocks\nRV1ERFA  DC    A(RV1ERF)                 Extract Record Format\nRV1ERLA  DC    A(RV1ERL)                 Extract Record Length\nRV1EBSA  DC    A(RV1EBS)                 Extract Block Size\nVDEPTHA  DC    A(VDEPTH)                 List Panel Dynamic Area Depth\nVWIDTHA  DC    A(VWIDTH)                 List Panel Dynamic Area Width\nVROWA    DC    A(VROW)                   List Panel Dynamic Area Row\nVCOLA    DC    A(VCOL)                   List Panel Dynamic Area Column\nVTYPEA   DC    A(VTYPE)                  List Panel Dynamic Area Type\nZSCROLAA DC    A(ZSCROLLA)               Scroll AMT ( HALF,MAX,...)\nZSCROLNA DC    A(ZSCROLLN)               Scroll Lines\nZVERBA   DC    A(ZVERB)                  Command Verb\nZERRMSGA DC    A(ZERRMSG)                ISPF Error Message Code\nRV1DTTLA DC    A(RV1DTTL)                Revive! List Title Area\nREVTRCA  DC    A(REVTRC)                 Revive! Trace Option\nTRCMESA  DC    A(TRCMES)                 Revive! Trace Message\nTRCMESSA DC    A(TRCMESS)                Revive! Trace Message Short\n.ISPVEXIT ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#MAIN": {"ttr": 2821, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x00\\x00\\x982\\x0f\\x01\\x00\\x06\\x7f\\x10$\\x07\\x83\\x06^\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "1998-11-16T00:00:00", "modifydate": "2000-03-07T10:24:00", "lines": 1923, "newlines": 1630, "modlines": 0, "user": "KIMU"}, "text": "         START\n* -----------------------------------------------------------------\n         DC   C'<< Revive ! >> ('\n         COPY  RV1#HDR\n         PRINT   GEN\n*-------------------------------------------------------------------\n* --- Start of Process --------------------------------------------\n*-------------------------------------------------------------------\n@RV#090  CSECT\n         SAVE  (14,12),T,*\n         BALR  R03,0\n         USING *,R03,R04,R05,R06           Base Reg. R03,R04,R05\n         LA    R04,2048(R03)               2 Base Reg\n         LA    R04,2048(R04)\n         LA    R05,2048(R04)               3 Base Reg\n         LA    R05,2048(R05)\n         LA    R06,2048(R05)               4 Base Reg\n         LA    R06,2048(R06)\n         ST    R13,SAVEAREA+4              Save A(OLD SaveArea)\n         LR    R12,R13\n         LA    R13,SAVEAREA\n         ST    R13,8(R12)                  Save A(NEW SaveArea)\n*-------------------------------------------------------------------\n*-------- Main Process ---------------------------------------------\n*-------------------------------------------------------------------\n         BAL   R12,@INITIAL                call Initial Routine\n         BAL   R12,@ISPVDEF                call ISPF VDEFINE\n*===================================================================\n         CALL  ISPLINK,(VGET,ZPREFIXN,ASIS),VL  Get TSO Prefix\n         MVC   RVPREFIX,ZPREFIX\n         CALL  ISPLINK,(VGET,REVTRCN,ASIS),VL  Get Trace option\n         CLC   REVTRC,=CL3'ON'\n         BNE   @PQ\n*+++     OPEN  (TRCF,(OUTPUT))\n*\n*        CALL  RV1BTH,(SAVEAREA,WKMES2,72)\n*        TPUT  WKMES2,L'WKMES2\n*\n*+++     PUT   TRCF,TRCHDR\n*-------------------------------------------------------------------\n         LA    R01,REVIVED\n         RV1#TRCC BASE=3,COMM=1\n*-------------------------------------------------------------------\n@PQ      EQU   *\n*===================================================================\n         BAL   R12,@PQUERY                 call Query List Panel\n         LTR   R15,R15                     if Error\n         BNZ   @BYE                          Bye !\n@SE      EQU   *\n         BAL   R12,@SHOWENT                call Entry Panel Show\n         CLC   SHOWRC,=F'0'\n         BNE   @BYE\n         BAL   R12,@IDSALOC                call Input Dataset Alloc\n         LTR   R15,R15                     if Allocation Error\n         BNZ   @SE                           goto @SE\n         MVC   PDSFD+X'28'(8),RV1DDN     Directory Read DD\n         OPEN  (PDSFD)                   Open Directory and Data Read\n         BAL   R12,@GETDSI                 call Get Dataset Information\n         LTR   R15,R15\n         BNZ   @SE_CLOSE\n*-------------------------------------------------------------------\n         MVC   RV1PRC,=CL3'DIR'\n         MVI   RV1EXTC,X'01'\n         BAL   R12,@POPSCR               Popup Panel Show\n*-------------------------------------------------------------------\n         BAL   R12,@READD                call Directory Read Section\n         LTR   R15,R15\n         BNZ   @SE_CLOSE\n         CLOSE (PDSFD)                   Close Directory\n*-------------------------------------------------------------------\n         MVC   RV1PRC,=CL3'USE'\n         MVI   RV1EXTC,X'01'\n         BAL   R12,@POPSCR               Popup Panel Show\n*-------------------------------------------------------------------\n         LA    R01,DFTLAST               RV1#FMTB Area Getmain\n         MH    R01,FMTTBLN\n*++++    L     R01,=F'99999999'\n         ST    R01,WK#F\n         GETMAIN RC,LV=(R01)\n         LTR   R15,R15                   If not Error\n         BZ    @SE_READDA_SKP00            goto @SE_READDA_SKP00\n         BAL   R14,GETMAIN_ERROR\n         B     @SE_X\n@SE_READDA_SKP00 EQU *\n         ST    R01,FMTTBLA               Store RV1FMTB Address\n         XC    FMTTBLP,FMTTBLP           Clear Max Table Entry\n* ------ REVTRC --------\n*        TPUT  =CL20'RV1#FMTB',20\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT005,RV1#FMTBX,FMTTBLA,WK#F),VL\n* ------ REVTRC --------\n*\n         LA    R01,REVIVED               r01 <- Dsect Address\n         CALL  RV1DARD\n         LTR   R15,R15\n         BZ    @SE_READDA_SKP1\n         CL    R15,=F'1'\n         BNE   @SE_READDA_SKP0\n         BAL   R14,GETMAIN_ERROR\n         B     @SE_FREE\n@SE_READDA_SKP0 EQU *\n         TPUT  =CL20'I/O ERR',20\n         B     @SE_FREE\n@SE_READDA_SKP1 EQU *\n*        TPUT  =CL20'*RETURN*',20\n         L     R15,DTLASTE\n         LTR   R15,R15\n         BNZ   @SE_READDA_SKP2           if no-record ?\n         CALL  ISPLINK,(SETMSG,REV018),VL\n         B     @SE_FREE\n@SE_READDA_SKP2 EQU *\n*-------------------------------------------------------------------\n*+       L     R07,RV1TBSPA\n@SE_DIRFREE_LOP1 EQU *\n*+       TM    11(R07),X'01'\n*+       BO    @SE_DIRFREE_LOP1N\n*+       TPUT  (R07),8\n@SE_DIRFREE_LOP1N EQU *\n*+       LA    R07,12(R07)\n*+       CL    R07,RV1TBSPP\n*+       BNL   @SE_DIRFREE_LOP1X\n*+       B     @SE_DIRFREE_LOP1\n@SE_DIRFREE_LOP1X EQU *\n*        TPUT  =CL20'*MSG1*',20\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT006,RV1TBSPX,RV1TBSPA,RV1TBSPL),VL\n*        TPUT  =CL20'*MSG2*',20\n         L     R01,RV1TBSPL                Directory Table\n         L     R02,RV1TBSPA\n         FREEMAIN RC,LV=(R01),A=(R02)      Dynamic Alloc Work Area\n*-------------------------------------------------------------------\n@SE_DISPLAY EQU *\n         BAL   R12,PDISPLAY\n*===================================================================\n*+       CLC   REVTRC,=CL3'ON'\n*+       BNE   @TRC_X\n*+       CLOSE (TRCF)\n*+       TPUT  =CL20'TRC OFF',20\n*+       MVC   REVTRC,=CL3'OFF'\n*+RC_X   EQU   *\n*===================================================================\n         CLC   DISPLAYRC,=F'8'\n         BE    @SE_DISPLAYX\n         CLC   DISPLAYRC,=F'16'\n         BE    @SE_DISPLAYX\n*-------------------------------------------------------------------\n         BAL   R12,PCMDPROC\n         LTR   R15,R15\n         BNZ   @SE_DISPLAY\n*-------------------------------------------------------------------\n         BAL   R12,PSCROLL\n*-------------------------------------------------------------------\n         B     @SE_DISPLAY\n@SE_DISPLAYX EQU *\n         BAL   R12,@IDSFREE              call Dataset Free\n         BAL   R12,TBLFREE\n* --- RV1TRC ---\n         LA    R01,DFTLAST               RV1#FMTB Area Freemain\n         MH    R01,FMTTBLN\n         ST    R01,WK#F\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT006,RV1#FMTBX,FMTTBLA,WK#F),VL\n* --- RV1TRC ---\n         LA    R01,DFTLAST               RV1#FMTB Area Freemain\n         MH    R01,FMTTBLN\n         L     R02,FMTTBLA\n         FREEMAIN RC,LV=(R01),A=(R02)\n         B     @SE\n*-------------------------------------------------------------------\n@SE_CLOSE EQU   *\n         CLOSE (PDSFD)\n@SE_FREE EQU   *\n         BAL   R12,@IDSFREE                call Input Dataset Alloc\n@SE_X    EQU   *\n         B     @SE\n@BYE     EQU   *\n*        TPUT  =CL20'BYE',20\n         CLC   REVTRC,=CL3'ON'\n         BNE   TRCF_X\n*        CALL  RV1BTH,(TRCF,WKTRCF,TRCFL)\n*        TPUT  WKTRCF,TRCFL*2\n*+++     CLOSE (TRCF)\nTRCF_X   EQU   *\n*        TPUT  =CL20'BYE_X',20\n*        CALL  RV1BTH,(SAVEAREA,WKMES2,72)\n*        TPUT  WKMES2,L'WKMES2\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=0\n*-------------------------------------------------------------------\n*-------- Initialization -------------------------------------------\n*-------------------------------------------------------------------\nMVRV1DSN MVC   RV1DSN(0),2(R01)          Copy Arg to RV1DSN Area\n@INITIAL EQU   *\n         L     R01,0(R01)                Load Parm Area\n         LH    R02,0(R01)                Load Parm Length\n         LTR   R02,R02                   If Length is Zero ?\n         BZ    @I_SKP1                    goto @I_SKP1\n         CH    R02,=H'44'                If Legth > 44 ?\n         BH    @I_SKP1                    goto @I_SKP1\n         MVI   RV1DSN,C' '               DSN Area Space Clear\n         MVC   RV1DSN+1(L'RV1DSN-1),RV1DSN\n         BCTR  R02,0\n         EX    R02,MVRV1DSN\n*        TPUT  RV1DSN,44\n@I_SKP1  EQU   *\n         LA    R01,PDSFD                 Save PDSF DCB Address\n         ST    R01,A#PDSF                 ( PDS Data )\n*+       LA    R01,TRCF                  Save PDSF DCB Address\n*+       ST    R01,A#TRCF                 ( PDS Data )\n*\n         BR    R12\n*-------------------------------------------------------------------\n*-------- Popup Screen ---------------------------------------------\n*-------------------------------------------------------------------\n@POPSCR  EQU   *\n         CALL  ISPLINK,(CONTROL,DISPLAY,LOCK),VL Panel Lock\n         CALL  ISPLINK,(ADDPOP),VL       Make Popup Panel\n         CALL  ISPLINK,(DISPLAY,PANELANL),VL Analysis Panel Show\n         CALL  ISPLINK,(REMPOP),VL       Remove Popup Panel\n         BR    R12\n*-------------------------------------------------------------------\n*-------- ISPF VDEFINE ---------------------------------------------\n*-------------------------------------------------------------------\n@ISPVDEF EQU   *\n         L     R07,RV1ISPFN              Load Var Name Pointer\n         L     R08,RV1ISPFL              Load Var Length Pointer\n         L     R09,RV1ISPFT              load Var Type Pointer\n         L     R10,RV1ISPFA              load Var Address Pointer\n@IS_LOP1 EQU   *\n         CLC   0(8,R07),ISPVENDM         If End ?\n         BE    @IS_LOP1X                   Goto @IS_LOP1X\n*        TPUT  0(R07),8\n         L     R01,0(R10)                Load Var Address\n         CALL  ISPLINK,(VDEFINE,(R07),(R01),(R09),(R08)),VL\n         LA    R07,8(R07)                Shift Var Name Pointer\n         LA    R08,4(R08)                Shift Var Length Pointer\n         LA    R09,8(R09)                Shift Var Type Pointer\n         LA    R10,4(R10)                Shift Var Address Pointer\n         B     @IS_LOP1                  goto Loop\n@IS_LOP1X EQU  *\n         BR    R12                       Return\n*-------------------------------------------------------------------\n*-------- List Panel Query -----------------------------------------\n*-------------------------------------------------------------------\n         DS    0F\n@PQUERY  EQU   *\n         CALL  ISPLINK,(PQUERY,PANELLST,RV1DAREAN,,VWIDTHN,VDEPTHN),VL\n         LTR   R15,R15\n         BZ    @PQ_SKP2\n         CALL  ISPLINK,(SETMSG,REV013),VL\n*REV013                             .ALARM = YES\n*'Revive List Panel Query Error. Why? '                               +\n*'Perhaps Misstake Installation. Please Re-Install'\n@PQ_SKP2 EQU   *\n         MVC   VDDEPTH,VDEPTH\n         MVC   VDWIDTH,VWIDTH\n         L     R01,VDDEPTH\n*        BCTR  R01,0\n         MH    R01,VDWIDTH+2\n         ST    R01,RV1DAREAL\n         GETMAIN RC,LV=(R01)            Getmain Dynamic Alloc Work A\n         LTR   R15,R15                   If not Error\n         BZ    @PQ_SKP21                   goto @PQ_SKP21\n*--- Getmain Error -------------------------------------------------\n         BAL   R14,GETMAIN_ERROR\n         LA    R15,8\n         BR    R12\n*--- Normal Compleate ----------------------------------------------\n@PQ_SKP21 EQU   *\n         ST    R01,RV1DAREAA            Store List Panel Area\n* ------ REVTRC --------\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT005,RV1DAREAX,RV1DAREAA,RV1DAREAL),VL\n* ------ REVTRC --------\n         L     R01,RV1DAREAA            Load List Panel Area\n         CALL  ISPLINK,(VDEFINE,RV1DAREAN,(R01),RV1DAREAT,RV1DAREAL),VL\n         BR    R12\n*-------------------------------------------------------------------\n*-------- Show Entry Panel -----------------------------------------\n*-------------------------------------------------------------------\n         DS    0F\nMVRV1SSTRR MVC   RV1SSTRR(0),0(R15)\n@SHOWENT EQU   *\n         CALL  ISPLINK,(VGET,RV1ENTRYL,PROFILE),VL  Get TSO Prefix\n         CALL  ISPLINK,(DISPLAY,PANELENT),VL  Entry Panel Show\n         ST    R15,SHOWRC                Save Return Code\n         MVI   RV1DSNC,C' '              Space Clear\n         MVC   RV1DSNC+1(L'RV1DSNC-1),RV1DSNC\n         CALL  ISPLINK,(VPUT,RV1ENTRYL,PROFILE),VL  Get TSO Prefix\n*\n         LA    R00,RV1DSN\n         LA    R01,RV1DSNC\n         BAL   R14,@DS_CONV\n*\n         MVI   RV1SSTRR,C' '\n         MVC   RV1SSTRR+1(L'RV1SSTRR-1),RV1SSTRR\n*\n         LA    R01,RV1SSTR\n         LA    R02,L'RV1SSTR\n@SEC_SSTR1 EQU *\n         CLI   0(R01),C' '\n         BNE   @SEC_SSTR1X\n         LA    R01,1(R01)\n         BCT   R02,@SEC_SSTR1\n         B     @SEC_SSTRXE\n@SEC_SSTR1X EQU *\n         LR    R15,R01\n         LA    R01,RV1SSTR+L'RV1SSTR\n         BCTR  R01,0\n@SEC_SSTR2 EQU *\n         CLI   0(R01),C' '\n         BNE   @SEC_SSTR2X\n         BCTR  R01,0\n         BCT   R02,@SEC_SSTR2\n         B     @SEC_SSTRXE\n@SEC_SSTR2X EQU *\n         CLI   0(R15),C''''\n         BNE   @SEC_SSTR3\n         LA    R15,1(R15)\n         BCTR  R02,0\n         CL    R02,=F'1'\n         BNH   @SEC_SSTRXE\n         CLI   0(R01),C''''\n         BNE   @SEC_SSTR3\n         BCTR  R01,0\n         BCTR  R02,0\n         CL    R02,=F'0'\n         BNH   @SEC_SSTRXE\n@SEC_SSTR3 EQU *\n         STH   R02,RV1SSTRL\n         BCTR  R02,0\n*        STC   R02,*+5\n*        MVC   RV1SSTRR(0),0(R15)\n         EX    R02,MVRV1SSTRR\n         B     @SEC_SSTRXX\n*\n@SEC_SSTRXE EQU *\n         XC    RV1SSTRL,RV1SSTRL\n@SEC_SSTRXX EQU *\n         BR    R12                       Return\n*-------------------------------------------------------------------\n*-------- Input Dataset Allocate -----------------------------------\n*-------------------------------------------------------------------\n@IDSALOC EQU   *\n*--- Getmain Dynamic Allocation Work Area --------------------------\n         L     R01,=A(RV1ALCDL)\n         GETMAIN RC,LV=(R01)             Getmain Dynamic Alloc Work A\n         LTR   R15,R15                   If not Error\n         BZ    @ID_SKP0                    goto @ID_SKP0\n         BAL   R14,GETMAIN_ERROR\n         LA    R15,8\n         BR    R12\n@ID_SKP0 EQU   *\n         ST    R01,@ID_GETMA             Save Address\n         LR    R08,R01\n* ------ REVTRC --------\n         L     R01,=A(RV1ALCDL)\n         ST    R01,WK#F\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT005,RV1ALCDX,@ID_GETMA,WK#F),VL\n* ------ REVTRC --------\n*--- Space Clear Dynamic Allocation Work Area ----------------------\n         LR    R14,R08\n         L     R09,=X'00000000'\n*                     --                 pattern\n         L     R15,=A(RV1ALCDL)\n         BCTR  R15,0\n         LAE   R15,0(R09,R15)\n         MVCL  R14,R08\n*         L     R02,=A(RV1ALCDL)\n*@ID_CLR1 EQU   *\n*         CL    R02,=F'256'\n*         BNH   @ID_CLR1X\n*         XC    0(256,R01),0(R01)         Null Clear\n*         LA    R01,256(R01)\n*         S     R02,=F'256'\n*         B     @ID_CLR1\n*XCRV1ALCD XC   0(0,R01),0(R01)           Null Clear\n*@ID_CLR1X EQU  *\n**        STC   R02,*+5\n**        XC    0(0,R01),0(R01)           Null Clear\n*         EX    R02,XCRV1ALCD\n*--- Setup Dynamic Allocation --------------------------------------\n         USING RV1ALCD,R08\n         CLI   RV1DISP,C'O'              If Not Exclusive Enq\n         BNE   @ID_SKP1\n         MVC   DA#DISP(3),=CL3'OLD'\n         B     @ID_SKP2\nMVDA#ERR MVC   0(0,R10),2(R02)\n@ID_SKP1 EQU   *                         Share Enq\n         MVC   DA#DISP(3),=CL3'SHR'\n@ID_SKP2 EQU   *\n         MVC   DA#DSN(44),RV1DSNC        Copy Dataset Name\n         MVC   DA#VOL(6),RV1VOL          Copy Volume Serial\n         DROP  R08\n*--- Call Dynamic Allocation ---------------------------------------\n         L     R01,@ID_GETMA             Set Parameter\n         CALL  RV1DALC                   Call Dynamic Alloc Routine\n*\n         LTR   R15,R15                   if Allocated\n         BZ    @ID_SKP3                    goto @ID_SKP3\n*--- Dynamic Allocation Error Process ------------------------------\n         L     R11,@ID_GETMA             Dynamic Allocation Dsect\n         USING RV1ALCD,R11\n         LA    R01,DA#RETC               Return Code\n         CALL  RV1BTH,((R01),DYRETCC,2)   Convert to Hexa Char\n         LA    R01,DA#INFO               Information Code\n         CALL  RV1BTH,((R01),DYINFOC,2)   Convert to Hexa Char\n         CALL  ISPLINK,(VREPLACE,M1N,L4,DYRETCC),VL\n         CALL  ISPLINK,(VREPLACE,M2N,L4,DYINFOC),VL\n*\n         XR    R01,R01\n         IC    R01,DA#ERR\n         LTR   R01,R01\n         BZ    @ID_NOMSG\n*\n         L     R01,=A(L'DA#ERR)\n         GETMAIN RC,LV=(R01)            Getmain Error Message Text A\n         LTR   R15,R15                   If Error\n         BNZ   @ID_NOMSG                   goto @ID_NOMSG\n         LR    R10,R01\n* ------ REVTRC --------\n         ST    R01,WK#F\n         L     R01,=A(L'DA#ERR)\n         ST    R01,WK#F2\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT005,DA#ERRX,WK#F,WK#F2),VL\n* ------ REVTRC --------\n         ST    R10,DAMSGA\n*\n         XR    R01,R01\n         IC    R01,DA#ERR\n*\n         LA    R02,DA#ERR+1\n@ID_MLOP1 EQU  *\n         LH    R15,0(R02)\n*        STC   R15,*+5\n*        MVC   0(0,R10),2(R02)\n         EX    R15,MVDA#ERR\n*\n         LA    R02,2(R02,R15)\n         LA    R10,0(R10,R15)\n         MVI   0(R10),C' '\n         LA    R10,1(R10)\n         BCT   R01,@ID_MLOP1\n*\n         S     R10,DAMSGA\n         ST    R10,DAMSGL\n         L     R01,DAMSGA\n         CALL  ISPLINK,(VREPLACE,M3N,DAMSGL,(R01)),VL\n         CALL  ISPLINK,(SETMSG,REV011),VL\n*\n* --- RV1TRC ---\n         L     R01,=A(RV1ALCDL)\n         ST    R01,WK#F\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT006,RV1ALCDX,@ID_GETMA,WK#F),VL\n* --- RV1TRC ---\n         L     R01,@ID_GETMA\n         L     R02,=A(RV1ALCDL)\n         FREEMAIN RC,LV=(R02),A=(R01)    Free Dynamic Alloc Area\n* --- RV1TRC ---\n         L     R01,=A(L'DA#ERR)\n         ST    R01,WK#F\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT006,DA#ERRX,DAMSGA,WK#F),VL\n* --- RV1TRC ---\n         L     R01,DAMSGA\n         L     R02,=A(L'DA#ERR)\n         FREEMAIN RC,LV=(R02),A=(R01)    Free Dynamic Alloc Area\n         LA    R15,8                     Return 8\n         BR    R12\n@ID_NOMSG EQU  *\n         CALL  ISPLINK,(SETMSG,REV012),VL\n*\n* --- RV1TRC ---\n         L     R01,=A(RV1ALCDL)\n         ST    R01,WK#F\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT006,RV1ALCDX,@ID_GETMA,WK#F),VL\n* --- RV1TRC ---\n         L     R01,@ID_GETMA\n         L     R02,=A(RV1ALCDL)\n         FREEMAIN RC,LV=(R02),A=(R01)    Free Dynamic Alloc Area\n         LA    R15,8                     Return 8\n         BR    R12\n         DROP  R11\n*--- Dunamic Allocation Normal Process -----------------------------\n@ID_SKP3 EQU   *\n         L     R11,@ID_GETMA             Load Address\n         USING RV1ALCD,R11\n         MVC   RV1DDN,DA#RETDD           Save Input DD\n         DROP  R11\n*\n* --- RV1TRC ---\n         L     R01,=A(RV1ALCDL)\n         ST    R01,WK#F\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT006,RV1ALCDX,@ID_GETMA,WK#F),VL\n* --- RV1TRC ---\n         L     R01,@ID_GETMA\n         L     R02,=A(RV1ALCDL)\n         FREEMAIN RC,LV=(R02),A=(R01)    Dynamic Alloc Work Area\n         XR    R15,R15                   Return 0\n         BR    R12\n*-------------------------------------------------------------------\n*-------- Input Dataset Free ---------------------------------------\n*-------------------------------------------------------------------\n@IDSFREE EQU   *\n         L     R08,=A(RV1ALCDL)\n         GETMAIN RC,LV=(R08)            Getmain Dynamic Alloc Work A\n         LTR   R15,R15                   If not Error\n         BZ    @IDS_SKP1                   goto @IDS_SKP1\n         BAL   R14,GETMAIN_ERROR\n         LA    R15,8\n         BR    R12\n@IDS_SKP1 EQU   *\n         ST    R01,@IDF_GETMA            Save Address\n* ------ REVTRC --------\n         L     R01,=A(RV1ALCDL)\n         ST    R01,WK#F2\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT005,RV1ALCDX,@IDF_GETMA,WK#F2),VL\n* ------ REVTRC --------\n         L     R08,@IDF_GETMA\n         LR    R14,R08\n         L     R09,=X'00000000'\n*                     --                 pattern\n         L     R15,=A(RV1ALCDL)\n         BCTR  R15,0\n         LAE   R15,0(R09,R15)\n         MVCL  R14,R08\n*+++\n*         ST    R01,@IDF_GETMA            Save Address\n*         L     R02,=A(RV1ALCDL)\n*         LR    R15,R01\n*@IDS_CLR1 EQU   *\n*         CL    R02,=F'256'\n*         BNH   @IDS_CLR1X\n*         XC    0(256,R15),0(R15)         Null Clear\n*         LA    R15,256(R15)\n*         S     R02,=F'256'\n*         B     @IDS_CLR1\n*XCRV1ALCD2 XC    0(0,R15),0(R15)           Null Clear\n*@IDS_CLR1X EQU  *\n**        STC   R02,*+5\n**        XC    0(0,R15),0(R15)           Null Clear\n*         EX    R02,XCRV1ALCD2\n*+++\n         USING RV1ALCD,R08\n         MVC   DA#DISP,=CL3'FRE'         File Free\n         MVC   DA#RETDD,RV1DDN           Save Input DD\n         DROP  R08\n         LR    R01,R08                   set parm\n         CALL  RV1DALC                   Call Dynamic Alloc Routine\n*\n         LTR   R15,R15\n         BZ    @IDF_SKP3\n         TPUT  =CL60'*** Free Error ***',60\n* --- RV1TRC ---\n         L     R01,=A(RV1ALCDL)\n         ST    R01,WK#F\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT006,RV1ALCDX,@IDF_GETMA,WK#F),VL\n* --- RV1TRC ---\n         L     R01,=A(RV1ALCDL)\n         L     R02,@IDF_GETMA\n         FREEMAIN RC,LV=(R01),A=(R02)    Dynamic Alloc Work Area\n         LA    R15,8\n         BR    R12                        Return\n@IDF_SKP3 EQU  *\n*\n* --- RV1TRC ---\n         L     R01,=A(RV1ALCDL)\n         ST    R01,WK#F\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT006,RV1ALCDX,@IDF_GETMA,WK#F),VL\n* --- RV1TRC ---\n         L     R01,=A(RV1ALCDL)\n         L     R02,@IDF_GETMA\n         FREEMAIN RC,LV=(R01),A=(R02)    Dynamic Alloc Work Area\n         XR    R15,R15\n         BR    R12                       Return\n@IDF_GETMA DS  F                         Getmain Address\n*                                        (Dynamic Allocation Work Area)\n*-------------------------------------------------------------------\n*-------- Get Dataset Information ----------------------------------\n*-------------------------------------------------------------------\n@GETDSI  EQU   *\n*        TPUT  RV1DDN,8\n*\n         LA    R08,RV1DSIS\n         LR    R14,R08\n         L     R09,=X'00000000'\n*                     --                 pattern\n         LA    R15,RV1DSIDL\n         BCTR  R15,0\n         LAE   R15,0(R09,R15)\n         MVCL  R14,R08\n*+++\n*         LA    R02,RV1DSIDL\n*         LA    R15,RV1DSIS\n*@GD_LOP1 EQU   *\n*         CL    R02,=F'256'\n*         BNH   @GD_LOP1X\n*         XC    0(256,R15),0(R15)\n*         LA    R15,256(R15)\n*         S     R02,=F'256'\n*         B     @GD_LOP1\n*XCRV1DSID XC    0(0,R15),0(R15)    Null Clear\n*@GD_LOP1X EQU  *\n**        STC   R02,*+5\n**        XC    0(0,R15),0(R15)    Null Clear\n*         EX    R02,XCRV1DSID\n*+++\n*\n         RDJFCB PDSFD                    Get JFCB\n         LA    R01,REVIVED               r01 <- Dsect Address\n         CALL  RV1DSI                    Get Dataset Information\n*-------- Check Input Dataset Organization ( PO File Only ) --------\n         CLI   B#DSORG,JFCORGPO                If Dsorg is Not PO Then\n         BE    @GD_SKP2                          goto @GD_SKP2\n         CALL  ISPLINK,(SETMSG,REV017),VL\n         LA    R15,=F'8'\n         BR    R12\n@GD_SKP2 EQU   *\n         XR    R15,R15\n         BR    R12\n*-------------------------------------------------------------------\n*-------- Directory Table Area GetMain -----------------------------\n*-------------------------------------------------------------------\n@READD   EQU   *\n         L     R02,RV1TBSP               Load Entry Field.\n         MH    R02,=H'12'                Table Length\n*                                          8 Byte : Member Name\n*                                          3 Byte : TTR\n*                                          1 Byte : Flag\n*                                          x'01'  : Member Processed\n         ST    R02,RV1TBSPL              Store Length\n         GETMAIN RC,LV=(R02)             Member TTR Save Area\n         LTR   R15,R15\n         BNZ   @RD_ERR1\n         ST    R01,RV1TBSPA              Store Address\n         ST    R01,RV1TBSPP              Store Pointer\n* ------ REVTRC --------\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT005,RV1TBSPX,RV1TBSPA,RV1TBSPL),VL\n* ------ REVTRC --------\n*-------- Data Area Read Buffer Getmain ----------------------------\n         GETMAIN RC,LV=256               Read Buffer Work Area\n         LTR   R15,R15\n         BNZ   @RD_ERR2\n         ST    R01,RV1DIRBA              getmain 1 address\n         ST    R01,RV1DIRBP              getmain 1 address\n* ------ REVTRC --------\n         LA    R01,256\n         ST    R01,WK#F\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT005,RV1DIRBX,RV1DIRBA,WK#F),VL\n* ------ REVTRC --------\n*-------- Directory Read -------------------------------------------\n         XR    R07,R07                   Clear Member Counter\n         XC    O#DBLK(L'O#DBLK),O#DBLK   Clear Directory Block\n@RD_READ EQU   *\n*        TPUT  =CL20'READ ...',20\n         L     R02,RV1DIRBA\n         READ  DECB01,SF,PDSFD,(R02),'S' Read Directory\n         CHECK DECB01\n*        TPUT  =CL20'READ X..',20\n*\n         L     R01,O#DBLK                Directory Block Counter\n         LA    R01,1(R01)\n         ST    R01,O#DBLK\n*\n         L     R08,RV1DIRBA\n         LH    R01,0(R08)                Load Read Length\n         LA    R01,0(R08,R01)\n         ST    R01,RV1DENDP              Save Directory END-ADDR\n         LA    R08,2(R08)                Set Member Start Point\n@RD_LOP1 EQU   *\n         CL    R08,RV1DENDP              If Directory END-ADDR\n         BNL   @RD_READ                  Goto Read Next Record\n         CLI   0(R08),X'FF'              If End of Member Name\n         BE    @RD_READ                    Goto Read Next Record\n         L     R01,RV1TBSPP              R11 <- Table Pointer\n         MVC   0(11,R01),0(R08)          Copy Member Name and TTR\n         MVI   11(R01),X'00'             Clear Flag\n         LA    R01,12(R01)\n         ST    R01,RV1TBSPP              Store Table Pointer\n         LA    R07,1(R07)                Member Counter + 1\n         L     R01,RV1TBSPA\n         L     R02,RV1TBSPL\n         LA    R01,0(R01,R02)            Check End of Table Space\n         L     R02,RV1TBSPP\n         LA    R02,12(R02)\n         CLR   R01,R02                   If No More Table\n         BL    @TB_OVER                    Goto @TB_OVER\n*\n         IC    R01,11(R08)               Load 'C'\n         N     R01,=X'0000001F'          User Data Length\n         SLL   R01,1                       * 2\n         LA    R08,12(R08,R01)           Point Next Member\n         B     @RD_LOP1\n*-------- End of Directory ( Directory at end Routie ) -------------\n@RD_EXIT EQU   *\n* ------ REVTRC --------\n         LA    R01,256\n         L     R02,RV1DIRBA\n         ST    R01,WK#F\n         ST    R02,WK#F2\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT006,RV1DIRBX,WK#F2,WK#F),VL\n* ------ REVTRC --------\n         LA    R01,256\n         L     R02,RV1DIRBA\n         FREEMAIN RC,LV=(R01),A=(R02)           FreeMain Direct Table\n*        TPUT  =CL20'END ...',20\n*-------- Store Member Number --------------------------------------\n         ST    R07,O#MEM\n*-------- Point First Data Area ------------------------------------\n         NOTE  PDSFD                     Get Last Directory Addr\n         ST    R01,B#ADP\n         MVI   B#ADP+3,X'00'\n*-------- Store Member Number --------------------------------------\n         CALL  RV1BTH,(B#ADP,O#ADP2,3)\n         L     R00,B#ADP                 MBBCCHHR Convert\n         N     R00,=X'FFFFFF00'\n         L     R01,PDSFD+44              Load DEB Address\n         N     R01,=X'00FFFFFF'\n         LA    R02,W_CHR\n         BAL   R14,@CNVCHR               Convert TTR -> MBBCCHHR\n         CALL  RV1BTH,(W_CHR,O#ADP,8)\n         XR    R15,R15\n         BR    R12\n*--------- Directory Table Space GETMAIN faile ---------------------\n@RD_ERR1 EQU   *\n         ST    R15,WK#F                         Set  GETMAIN Code\n         CALL  RV1BTH,(WK#F,ERRMSG15+36,4)\n         LA    R02,RV1TBSPL                     Set GETMAIN Length\n         CALL  RV1BTH,((R02),ERRMSG15+52,4)\n         MVC   ZEDLMSG,ERRMSG15\n         MVC   ZEDSMSG,=CL20'Table to Large'\n         CALL  ISPLINK,(SETMSG,ISRZ001),VL\n         BR    R12\n*-------- Read Buffer Getmain False --------------------------------\n@RD_ERR2 EQU   *                                 GETMAIN ERROR\n         ST    R15,WK#F                         Set  GETMAIN Code\n         CALL  RV1BTH,(WK#F,ERRMSG16+36,4)\n         LA    R02,RV1TBSPL                     Set GETMAIN Length\n         CALL  RV1BTH,((R02),ERRMSG16+52,4)\n         L     R02,RV1TBSPL\n         L     R01,RV1TBSPA\n         FREEMAIN RC,LV=(R02),A=(R01)\n         MVC   ZEDLMSG,ERRMSG16\n         MVC   ZEDSMSG,=CL20'Getmain Faile.'\n         CALL  ISPLINK,(SETMSG,ISRZ001),VL\n         BR    R12\n*-------------------------------------------------------------------\n*--- List Panel Display --------------------------------------------\n*-------------------------------------------------------------------\nPDISPLAY EQU   *\n         L     R15,DTLASTE\n         LTR   R15,R15\n         BNZ   PD#SKP0\n         MVC   DISPLAYRC,=F'16'\n         BR    R12\nMVDTTLCOLS MVC   0(0,R09),0(R01)\nPD#SKP0  EQU   *\n*        TPUT  =CL20'DISPLAY',20\n*-------------------------------------------------------------------\n* Display Work Area Space Clear.\n*-------------------------------------------------------------------\n         L     R08,RV1DAREAA\n         LR    R14,R08\n         L     R09,=X'40000000'\n*                     --                 pattern\n         L     R15,RV1DAREAL\n         BCTR  R15,0\n         LAE   R15,0(R09,R15)\n         MVCL  R14,R08\n*        L     R01,RV1DAREAA             Display Area Space Clear\n*        L     R02,RV1DAREAL\n*        MVI   0(R01),C' '\n*        BCTR  R02,0\n*PD#CLS  EQU   *\n*        CL    R02,=F'256'\n*        BNH   PD#CLSX\n*        MVC   1(256,R01),0(R01)\n*        LA    R01,256(R01)\n*        S     R02,=F'256'\n*        B     PD#CLS\n*MVRV1DAREA MVC   1(0,R01),0(R01)\n*PD#CLSX EQU   *\n**       STC   R02,*+5\n**       MVC   1(0,R01),0(R01)\n*        EX    R02,MVRV1DAREA\n*-------------------------------------------------------------------\n* Search Target Table Row.\n*   R09(DTPOSIT) : Target Row.\n*   R08          : Processing Table Address\n* Row Re-Positioning.\n*   DTPOSIT > DTLASTE : DTLASTE - VDDEPTH -1 -> DTPOSIT\n*   DTPOSIT < 1       : 1                    -> DTPOSIT\n*-------------------------------------------------------------------\n*        L     R09,DTPOSIT\n*        CL    R09,DTLASTE\n*        BNH   PD#POS1\n*        L     R09,DTLASTE\n*        LA    R09,3(R09)\n*        CL    R09,VDDEPTH\n*        BNH   PD#POS0\n*        S     R09,VDDEPTH\n**       BCTR  R09,0\n*        B     PD#POS1\n*PD#POS0  EQU   *\n*        LA    R09,1\n*PD#POS1  EQU   *\n*        CL    R09,=F'1'\n*        BNL   PD#POS2\n*        LA    R09,1\n*PD#POS2  EQU   *\n*        ST    R09,DTPOSIT\n*DEBUG*\n*        MVC   MSG999+12(68),=CL68'DTPOSIT:'\n*        CALL  RV1BTH,(DTPOSIT,MSG999+20,4)\n*        CALL  RV1BTH,(VDDEPTH,MSG999+30,4)\n*        CALL  RV1BTH,(DTLASTE,MSG999+40,4)\n*        TPUT  MSG999,80\n*DEBUG*\n* ---------------------------------------------------------------\n* Setup Column Line.\n* ---------------------------------------------------------------\n         BAL   R14,DTTL_MAKE\n* ---------------------------------------------------------------\n* === debug =====================================================\n*        TPUT  =CL20'START',20\n         L     R08,DTFIRST\n         USING DTHEADER,R08\nDBG_LOP1 EQU   *\n         CALL  RV1BTH,((R08),WKMES+10,16)\n*        TPUT  WKMES,80\n         L     R08,DTHNEXT\n         LTR   R08,R08\n         BZ    DBG_LOP1X\n         B     DBG_LOP1\n         DROP  R08\nDBG_LOP1X EQU   *\n*        TPUT  =CL20'END  ',20\n* === debug =====================================================\n         L     R09,DTPOSIT\n         L     R08,DTFIRST\n         USING DTHEADER,R08\nPD#POSIT EQU   *\n         CL    R09,DTHPOSL\n         BNH   PD#POSITX\n         L     R08,DTHNEXT\n         B     PD#POSIT\nPD#POSITX EQU  *\n         S     R09,DTHPOSF\n         L     R15,=A(DTELAST)\n         STH   R15,WK#H\n         MH    R09,WK#H\n         LA    R09,DTHL(R09,R08)\n* ------ REVTRC --------\n         L     R01,DTHPOSF\n         ST    R01,WK#F\n         L     R01,DTHPREV\n         ST    R01,WK#F2\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT007,SCRLCHK,DTPOSIT,WK#F,WK#F2),VL\n* ------ REVTRC --------\n         USING DTENTRY,R09\n* ---------------------------------------------------------------\n* Write Rows Calc.\n*   Tbl-Rows  Current-Pos       Win-Depth     Write-Row\n*   DTLASTE - DTPOSIT + 1   <   VDDEPTH  ->   DTPOSIT\n*   DTLASTE - DTPOSIT + 1   >   VDDEPTH  ->   VDDEPTH\n*   DTLASTE - DTPOSIT + 1   =   VDDEPTH  ->   VDDEPTH ( or DTPOSIT )\n* ---------------------------------------------------------------\n         L     R07,DTLASTE\n         S     R07,DTPOSIT\n         LA    R07,1(R07)\n         CL    R07,VDDEPTH\n         BL    PD#ROWC\n         L     R07,VDDEPTH               Rows (Loop Counter).\nPD#ROWC  EQU   *\n         L     R10,RV1DAREAA             R10 <- Screen Buffer\nPD#LOP1  EQU   *\n         MVI   00(R10),ATTR_INP\n         MVC   02(01,R10),DTEATTR\n         MVC   03(08,R10),DTENAME\n         MVC   11(1,R10),DTEDATTR\n         MVC   12(06,R10),DTETTR\n*\n         TM    PSCRFLAG,X'80'\n         BNO   PD#SKP11\n*\n         TM    DTERFM,X'80'              If Not Recfm=V ?\n         BO    PD#SKP12\n         MVI   19(R10),C'V'              Recfm:V\n         LH    R01,DTELRL                 Lrecl\n         CVD   R01,PK_AREA\n         MVC   EDWORK,EDMASK\n         ED    EDWORK,PK_AREA\n         MVC   21(5,R10),EDWORK+11\n         B     PD#SKP14\nPD#SKP12 EQU   *\n         TM    DTERFM,X'10'              If Not Recfm=F ?\n         BO    PD#SKP13\n         MVI   19(R10),C'F'              Recfm:F\n         LH    R01,DTERLNG                Lrecl\n         CVD   R01,PK_AREA\n         MVC   EDWORK,EDMASK\n         ED    EDWORK,PK_AREA\n         MVC   21(5,R10),EDWORK+11\n         B     PD#SKP14\nPD#SKP13 EQU   *\n         MVI   19(R10),C'U'\n         MVC   21(5,R10),=CL5'    ?'\nPD#SKP14 EQU   *\n         LH    R01,DTEBSZ                BlockSize\n         CVD   R01,PK_AREA\n         MVC   EDWORK,EDMASK\n         ED    EDWORK,PK_AREA\n         MVC   27(5,R10),EDWORK+11\n         L     R01,DTERECD               Records\n         CVD   R01,PK_AREA\n         MVC   EDWORK,EDMASK\n         ED    EDWORK,PK_AREA\n         MVC   33(5,R10),EDWORK+11\n*\n         TM    PSCRFLAG,X'40'\n         BNO   PD#SKP15\n         LA    R01,DTECHRB\n         LA    R02,39(R10)\n         CALL  RV1BTH,((R01),(R02),8)\n         MVC   57(22,R10),DTEDATA\n         B     PD#SKP11X\nPD#SKP15 EQU   *\n         MVC   39(40,R10),DTEDATA\n         B     PD#SKP11X\n*\nPD#SKP11 EQU   *\n         MVC   19(60,R10),DTEDATA\nPD#SKP11X EQU   *\n*\n         L     R01,VDWIDTH\n         LA    R10,0(R10,R01)\n         LA    R09,DTELAST(R09)\n*\n         LA    R01,DTELAST(R09)\n         L     R15,=A(DTLENGTH)\n         LA    R15,0(R08,R15)\n         CLR   R15,R01\n         BNL   PD#SKP1\n*\n         L     R08,DTHNEXT\n         LA    R09,DTHL(R08)\nPD#SKP1  EQU   *\n         BCT   R07,PD#LOP1\n         DROP  R08,R09\n* END OF LIST Mark\n         L     R01,VDWIDTH\n         LA    R01,0(R10,R01)\n         CL    R01,RV1DAREAL\n         BNH   PD#SKP2\n         MVC   0(L'MSGLAST,R10),MSGLAST\nPD#SKP2  EQU   *\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT003,PANELLST),VL\n         CALL  ISPLINK,(DISPLAY,PANELLST),VL\n         ST    R15,DISPLAYRC\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT004,PANELLST),VL\n*-------------------------------------------------------------------\n*        CALL  ISPLINK,(VGET,RV1DAREAN,ASIS),VL\n*        L     R01,RV1DAREAA\n*        TPUT  (R01),80\n         BR    R12\nDISPLAYRC DS   F\n*-------------------------------------------------------------------\n* Make Title line\n*-------------------------------------------------------------------\nDTTL_MAKE EQU  *\n         MVI   DTTLCOLS,C'('\n         LA    R09,DTTLCOLS+1\n*\n         L     R01,DTPOSIT\n         CVD   R01,PK_AREA\n         MVC   EDWORK,EDMASK\n         LA    R01,EDWORK+L'EDWORK-1\n         EDMK  EDWORK,PK_AREA\n         LA    R15,EDWORK+L'EDWORK\n         SR    R15,R01\n         LR    R00,R15\n         CL    R15,=F'5'\n         BH    PD#SKP011\n         LA    R01,EDWORK+L'EDWORK\n         SR    R01,R00\n*        STC   R15,*+5\n*        MVC   0(0,R09),0(R01)\n         EX    R15,MVDTTLCOLS\n         LA    R09,0(R09,R15)\n         B     PD#SKP012\nPD#SKP011 EQU  *\n         MVC   0(5,R09),=CL5'*****'\n         LA    R09,4(R09)\nPD#SKP012 EQU  *\n*\n         MVI   0(R09),C','\n         LA    R09,1(R09)\n*\n         L     R01,DTLASTE\n         CVD   R01,PK_AREA\n         MVC   EDWORK,EDMASK\n         LA    R01,EDWORK+L'EDWORK-1\n         EDMK  EDWORK,PK_AREA\n         LA    R15,EDWORK+L'EDWORK\n         SR    R15,R01\n         LR    R00,R15\n         CL    R15,=F'5'\n         BH    PD#SKP013\n         LA    R01,EDWORK+L'EDWORK\n         SR    R01,R00\n*        STC   R15,*+5\n*        MVC   0(0,R09),0(R01)\n         EX    R15,MVDTTLCOLS\n         LA    R09,0(R09,R15)\n         B     PD#SKP014\nPD#SKP013 EQU  *\n         MVC   0(5,R09),=CL5'*****'\n         LA    R09,4(R09)\nPD#SKP014 EQU  *\n         MVI   0(R09),C')'\n         LA    R01,DTTLCOLS\n         SR    R09,R01\n*\n         TM    PSCRFLAG,X'C0'\n         BO    PD#SKP01\n         TM    PSCRFLAG,X'80'\n         BO    PD#SKP02\n         MVC   RV1DTTL(80),DTTL1         Right Screen Title\n         B     PD#SKP03\nPD#SKP01 EQU   *\n         MVC   RV1DTTL(80),DTTL3         Left Screen Title\n         B     PD#SKP03\nPD#SKP02 EQU   *\n         MVC   RV1DTTL(80),DTTL2         Center Screen Title\n         B     PD#SKP03\nPD#SKP03 EQU   *\n         LA    R01,RV1DTTL+L'RV1DTTL-2\n         SR    R01,R09\n*        STC   R09,*+5\n*        MVC   0(0,R01),DTTLCOLS\n         EX    R09,MVRV1DTTL\n         BR    R14\n*\n*-------------------------------------------------------------------\n* List Panel Scroll.\n*-------------------------------------------------------------------\nPSCROLL  EQU   *\n         CALL  ISPLINK,(VGET,RV1SCROLL,ASIS),VL  Get Scroll Variable\n         CLC   ZVERB(8),=CL8'LEFT    '\n         BE    PSCR#LF\n         CLC   ZVERB(8),=CL8'RIGHT   '\n         BE    PSCR#RI\n         CLC   ZVERB(8),=CL8'UP      '\n         BE    PSCR#UP\n         CLC   ZVERB(8),=CL8'DOWN    '\n         BE    PSCR#DW\n         B     PSCROLLQ\nPSCR#DW  EQU   *\n         CLC   ZSCROLLA,=CL4'MAX'\n         BNE   PSCR#DW1\n*        Max Down\n         L     R09,DTLASTE\n         LA    R09,2(R09)\n         CL    R09,ZSCROLLN\n         BNH   PSCR#DW0\n         S     R09,ZSCROLLN\n         B     PSCROLLX\nPSCR#DW0 EQU   *\n         LA    R09,1\n         B     PSCROLLX\nPSCR#DW1 EQU   *\n*        Down\n         L     R09,DTPOSIT\n         A     R09,ZSCROLLN\n         CL    R09,DTLASTE\n         BNH   PSCROLLX\n         L     R09,DTLASTE\n*        LA    R09,2(R09)\n*        CL    R09,ZSCROLLN\n*        BNH   PSCR#DW0\n*        S     R09,ZSCROLLN\n*        B     PSCROLLX\n         B     PSCROLLX\nPSCR#UP  EQU   *\n         CLC   ZSCROLLA,=CL4'MAX'\n         BNE   PSCR#UP1\n*        Max Up\n         LA    R09,1\n         B     PSCROLLX\nPSCR#UP1 EQU   *\n*        Up\n         L     R09,DTPOSIT\n         CL    R09,ZSCROLLN\n         BNH   PSCR#UP2\n         S     R09,ZSCROLLN\n         B     PSCROLLX\nPSCR#UP2 EQU   *\n         LA    R09,1\n         B     PSCROLLX\nPSCR#LF  EQU   *\n         TM    PSCRFLAG,X'80'\n         BNO   PSCR#LF2\n         OI    PSCRFLAG,X'40'            Left Screen\nPSCR#LF2 EQU   *\n         OI    PSCRFLAG,X'80'            Center Screen\n         B     PSCROLLQ\nPSCR#RI  EQU   *\n         TM    PSCRFLAG,X'40'\n         BNO   PSCR#RI2\n         NI    PSCRFLAG,X'BF'            Center Screen\n         B     PSCROLLQ\nPSCR#RI2 EQU   *\n         NI    PSCRFLAG,X'7F'            Right Screen\n         B     PSCROLLQ\nPSCROLLX EQU   *\n         ST    R09,DTPOSIT\nPSCROLLQ EQU   *\n         BR    R12\n*-------------------------------------------------------------------\n* Data Table Freemain.\n*-------------------------------------------------------------------\nTBLFREE  EQU   *\n         L     R07,DTFIRST\n         LTR   R07,R07\n         BZ    TF#NOTF\n         USING DTHEADER,R07\nTF#LOP1  EQU   *\n*DEBUG*\n*        MVC   MSG999+12(68),=CL68'FREE   :'\n*        L     R01,DTHPOSF\n*        ST    R01,WK#F\n*        CALL  RV1BTH,(WK#F,MSG999+20,4)\n*        L     R01,DTHPOSL\n*        ST    R01,WK#F\n*        CALL  RV1BTH,(WK#F,MSG999+30,4)\n*        L     R01,DTHNEXT\n*        ST    R01,WK#F\n*        CALL  RV1BTH,(WK#F,MSG999+40,4)\n*        L     R01,DTHPREV\n*        ST    R01,WK#F\n*        CALL  RV1BTH,(WK#F,MSG999+50,4)\n*        TPUT  MSG999,80\n*DEBUG*\n         LR    R08,R07\n         L     R07,DTHNEXT\n         L     R09,=A(DTLENGTH)\n* ------ REVTRC --------\n         ST    R08,WK#F\n         ST    R09,WK#F2\n         LA    R01,REVIVED\n         RV1#TRCG ((R01),REVT006,DTX,WK#F,WK#F2),VL\n* ------ REVTRC --------\n         FREEMAIN RC,LV=(R09),A=(R08)    Dynamic Alloc Work Area\n         LTR   R15,R15\n         BNZ   TF#ERR\n         LTR   R07,R07\n         BNZ   TF#LOP1\n         DROP  R07\n         BR    R12\nTF#ERR   EQU   *\n         TPUT  =CL20'FREEM ERR',20\n         BR    R12\nTF#NOTF  EQU   *\n         BR    R12\n*-------------------------------------------------------------------\nGETMAIN_ERROR EQU *\n*-------------------------------------------------------------------\n*REV010                             .ALARM = YES\n*'Insufficienty Region Size for this Function. Please Check It. and ' +\n*'add More Virtual Storage or Close Any Applications.'\n*-------------------------------------------------------------------\n         STM   R00,R15,GE_REGS\n         CALL  ISPLINK,(SETMSG,REV010),VL\n         LM    R00,R15,GE_REGS\n         BR    R14\nREV010   DC   CL8'REV010'\nGE_REGS  DS   18F\n*-------------------------------------------------------------------\n* List Panel Command Proecss.\n*-------------------------------------------------------------------\nPCMDPROC EQU   *\n         L     R10,RV1DAREAA\n         L     R09,VDDEPTH\n         L     R08,DTPOSIT\nPC#LOP1  EQU   *\n         CLI   1(R10),C' '\n         BE    PC#LOP1N\n         MVC   PC@CMD(1),1(R10)\n         MVC   PC@NNAME(8),3(R10)\n*\n         LR    R01,R08\n         L     R02,DTFIRST\n         USING DTHEADER,R02\nPC#POSIT EQU   *\n         CL    R01,DTHPOSL\n         BNH   PC#POSITX\n         L     R02,DTHNEXT\n         B     PC#POSIT\nPC#POSITX EQU  *\n         S     R01,DTHPOSF\n         LA    R15,DTELAST\n         STH   R15,WK#H\n         MH    R01,WK#H\n         LA    R01,DTHL(R01,R02)\n         USING DTENTRY,R01\n         MVC   PC@NAME(8),DTENAME\n         MVC   PC@TTR(6),DTETTR\n         MVC   PC@TTRB(4),DTETTRB\n         MVC   PC@RECD(4),DTERECD\n         MVC   PC@ATTR(1),DTEATTR\n         MVC   PC@RLNG(2),DTERLNG\n         MVC   PC@LRL(2),DTELRL\n         MVC   PC@BSZ(2),DTEBSZ\n         MVC   PC@RFM(1),DTERFM\n         DROP  R01,R02\n*-------------------------------------------------------------------\n*        MVC   WKMES,=CL80' > '\n*        CALL  RV1BTH,(PC@RLNG,WKMES+10,2)\n*        CALL  RV1BTH,(PC@LRL,WKMES+20,2)\n*        CALL  RV1BTH,(PC@BSZ,WKMES+30,2)\n*        CALL  RV1BTH,(PC@RFM,WKMES+40,1)\n*        CALL  RV1BTH,(B#RECFM,WKMES+50,1)\n*        TPUT  WKMES,80\n*        MVC   PC@MSG+20(1),PC@CMD\n*        MVC   PC@MSG+22(8),PC@NAME\n*        MVC   PC@MSG+31(2),=CL2'->'\n*        MVC   PC@MSG+35(8),PC@NNAME\n*        MVC   PC@MSG+44(6),PC@TTR\n*        TPUT  PC@MSG,80\n*-------------------------------------------------------------------\n         STM   R01,R14,PC@REGS\n         CLI   PC@CMD,C'B'\n         BNE   PC#CMDPROC1\n         BAL   R12,@BROWSE\n         B     PC#CMDPROCX\nPC#CMDPROC1 EQU *\n         CLI   PC@CMD,C'R'\n         BNE   PC#CMDPROC2\n         BAL   R12,@RESTORE\n         B     PC#CMDPROCX\nPC#CMDPROC2 EQU *\n         CLI   PC@CMD,C'X'\n         BNE   PC#CMDPROC3\n*        BAL   R12,@EXTRACT\n         CALL  RV1EXTR,(REVIVED,CMDPROCA)\n         B     PC#CMDPROCX\nPC#CMDPROC3 EQU *\n         CLI   PC@CMD,C'S'\n         BNE   PC#CMDPROC4\n*        PRINT GEN\n*        CALL  RV1SHOW,(REVIVED,CMDPROCA)\n*        PRINT NOGEN\n         CALL  ISPLINK,(SETMSG,REV990),VL\n         B     PC#CMDPROCX\nPC#CMDPROC4 EQU *\nPC#CMDPROCX EQU *\n         LM    R01,R14,PC@REGS\n*-------------------------------------------------------------------\nPC#LOP1N EQU   *\n         LA    R08,1(R08)\n         L     R01,VDWIDTH\n         LA    R10,0(R10,R01)\n         BCT   R09,PC#LOP1\n         XR    R15,R15\n         BR    R12\n*-------------------------------------------------------------------\n*--------- Member Stow ( Add New Member ) --------------------------\n*-------------------------------------------------------------------\n@STOW_A  EQU   *\n         MVC   S_TTR(3),STOW_TTR\n         MVC   S_MEMBER(8),STOW_NAME\n         MVC   PDSFS+X'28'(8),RV1DDN     Stow DD\n         OPEN  (PDSFS,(OUTPUT))\n         STOW  PDSFS,ST#LIST,A\n         ST    R15,STOW_RC\n         ST    R00,STOW_RSN\n         CLOSE (PDSFS)\n         L     R15,STOW_RC\n         L     R00,STOW_RSN\n         BR    R11\n*-------------------------------------------------------------------\n*--------- Member Stow ( Remove Work Member ) ----------------------\n*-------------------------------------------------------------------\n@STOW_D  EQU   *\n         MVC   S_TTR(3),STOW_TTR\n         MVC   S_MEMBER(8),STOW_NAME\n         MVC   PDSFS+X'28'(8),RV1DDN     Stow DD\n         OPEN  (PDSFS,(OUTPUT))\n         STOW  PDSFS,ST#LIST,D\n         ST    R15,STOW_RC\n         ST    R00,STOW_RSN\n         CLOSE (PDSFS)\n         L     R15,STOW_RC\n         L     R00,STOW_RSN\n         BR    R11\n*-------------------------------------------------------------------\n*-------- Member Browse --------------------------------------------\n*-------------------------------------------------------------------\n@BROWSE  EQU   *\n         TM    PC@RFM,X'40'\n         BO    @BR_SKP3\n         CLI   PC@ATTR,ATTR_CUR\n         BE    @BR_SKP1\n         MVC   STOW_TTR,PC@TTRB\n         MVC   STOW_NAME,PC@NAME\n         BAL   R11,@STOW_A\n         LTR   R15,R15\n         BZ    @BR_SKP1\n         LA    R01,BROWSE_STOW_ERROR\n@BR_LOP0 EQU   *\n         CLC   0(4,R01),=F'0'\n         BE    @BR_LOP0E\n         CL    R15,0(R01)\n         BNE   @BR_LOP0N\n         CL    R00,4(R01)\n         BNE   @BR_LOP0N\n@BR_LOP0E EQU   *\n         LA    R01,8(R01)\n         CALL  ISPLINK,(SETMSG,(R01)),VL\n         BR    R12                       Return !\n@BR_LOP0N EQU   *\n         LA    R01,BROWSE_STOW_ERROR_LENGTH(R01)\n         B     @BR_LOP0\n@BR_SKP1 EQU   *\n         MVI   BR#DSN,C''''\n         MVC   BR#DSN+1(44),RV1DSNC\n         LA    R07,BR#DSN+1\n@BR_LOP1 EQU   *\n         CLI   0(R07),X'40'\n         BE    @BR_LOPX\n         LA    R07,1(R07)\n         B     @BR_LOP1\n@BR_LOPX EQU   *\n         MVI   0(R07),C'('\n         LA    R07,1(R07)\n         MVC   0(8,R07),PC@NAME\n@BR_LOP2 EQU   *\n         CLI   0(R07),C' '\n         BE    @BR_LOPY\n         LA    R07,1(R07)\n         B     @BR_LOP2\n@BR_LOPY EQU   *\n         MVI   0(R07),C')'\n         MVI   1(R07),C''''\n         MVC   BR#VOL(6),RV1TVOL\n         CALL  ISPLINK,(BROWSE,BR#DSN,BR#VOL),VL\n         CLI   PC@ATTR,ATTR_CUR\n         BE    @BR_SKP2\n         BAL   R11,@STOW_D\n@BR_SKP2 EQU   *\n*        CALL  ISPLINK,(VPUT,VPUT#N),VL\n*        CALL  ISPLINK,(SETMSG,ISRZ001),VL\n         BR    R12\n@BR_SKP3 EQU   *\n         CALL  ISPLINK,(SETMSG,REV016),VL\n         BR    R12                       Return !\n*-------------------------------------------------------------------\n*-------- Member Restore -------------------------------------------\n*-------------------------------------------------------------------\n@RESTORE EQU   *\n         TM    PC@RFM,X'40'              Invalid DCB Information\n         BO    @RST_INVALID\n         CLI   PC@ATTR,ATTR_CUR          Currently Exist.\n         BE    @RST_EXT\n         CLI   PC@ATTR,ATTR_REC          Over DS1LSTAR line\n         BNE   @RST_OVR\n*--- Member Name Check ---------------------------------------------\n         MVC   RV1EMN,PC@NNAME\n         CALL  ISPLINK,(CONTROL,NONDISPL,ENTER),VL Panel Lock\n         CALL  ISPLINK,(ADDPOP),VL       Make Popup Panel\n         CALL  ISPLINK,(DISPLAY,PANELMCH),VL Member Name Check Panel\n         ST    R15,PANELRC\n         CALL  ISPLINK,(REMPOP),VL       Remove Popup Panel\n         CLC   PANELRC,=F'0'\n         BE    @RS_SKP0\n         BR    R12\n@RS_SKP0 EQU   *\n*-------------------------------------------------------------------\n         MVC   STOW_TTR,PC@TTRB          Copy TTR\n         MVC   STOW_NAME,RV1EMN          Copy Member name\n*--- Member Stow ---------------------------------------------------\n         BAL   R11,@STOW_A               call STOW\n         LTR   R15,R15                   if not Error ?\n         BZ    @RS_SKP1                    goto @RS_SKP1\n         LA    R01,BROWSE_STOW_ERROR     Error Message Table Address\n*--- STOW Error process --------------------------------------------\n@RS_LOP0 EQU   *\n         CLC   0(4,R01),=F'0'            If Table end ?\n         BE    @RS_LOP0E\n         CL    R15,0(R01)                RC Table not Match !\n         BNE   @RS_LOP0N\n         CL    R00,4(R01)                RSN Table not Match !\n         BNE   @RS_LOP0N\n@RS_LOP0E EQU  *\n         LA    R01,8(R01)                Set Message\n         CALL  ISPLINK,(SETMSG,(R01)),VL\n         BR    R12                       Return !\n@RS_LOP0N EQU  *                         Next Table Entry.\n         LA    R01,BROWSE_STOW_ERROR_LENGTH(R01)\n         B     @RS_LOP0\n*\n*--- Notmal end ----------------------------------------------------\n@RS_SKP1 EQU   *\n         CALL  ISPLINK,(VREPLACE,M1N,L8,STOW_NAME),VL\n         CALL  ISPLINK,(SETMSG,REV014),VL\n         BR    R12                       Return !\n*--- Currentry Exits -----------------------------------------------\n@RST_EXT EQU   *\n         CALL  ISPLINK,(VREPLACE,M1N,L8,PC@NAME),VL\n         CALL  ISPLINK,(SETMSG,REV015),VL\n         BR    R12                       Return !\n*--- Over DS1LSTAR Line --------------------------------------------\n@RST_OVR EQU   *\n         CALL  ISPLINK,(ADDPOP),VL       Make Popup Panel\n         CALL  ISPLINK,(DISPLAY,PANELEXTQ),VL Perform Extract Function\n         ST    R15,PANELRC\n         CALL  ISPLINK,(REMPOP),VL       Remove Popup Panel\n         L     R15,PANELRC\n         LTR   R15,R15                   If OK ?\n         BZ    @EXTRACT\n         BR    R12\n*--- Contains Invalid Records --------------------------------------\n@RST_INVALID EQU *\n         CALL  ISPLINK,(SETMSG,REV016),VL\n         BR    R12\n*-------------------------------------------------------------------\n*-------- Member Extract -------------------------------------------\n*-------------------------------------------------------------------\nWKMES    DC    CL80'>>'\n@EXTRACT EQU   *\n         CALL  RV1EXTR,(REVIVED,CMDPROCA)\n         BR    R12\n*-------------------------------------------------------------------\n*-------------------------------------------------------------------\n@DC_REGS DS    18F\nMVDSNP   MVC   0(0,R08),RVPREFIX         Copy TSO Prefix\nMVDSNP2  MVC   0(0,R08),0(R07)           Coopy Dataset Name\nMVDSNP3  MVC   0(0,R08),1(R07)           Copy DSN\n@DS_CONV EQU   *\n         STM   R00,R14,@DC_REGS\n         LR    R07,R00                   From Address ( 46 Byte )\n         LR    R08,R01                   To Address ( 44 Byte )\n*\n         MVI   0(R08),C' '               Space Clear\n         MVC   1(44-1,R08),0(R08)\n*\n         CLI   0(R07),C''''              If Quotation\n         BE    @DC_SKP1                    goto @DC_SKP1\n         LA    R01,RVPREFIX              R01 <- TSO Prefix Address\n         LA    R02,7                     R02 <- Maximam Length\n@DC_LOP1 EQU   *\n         CLI   0(R01),C' '               If End ?\n         BE    @DC_LOP1X                   goto @DC_LOP1X\n         LA    R01,1(R01)                Shift\n         BCT   R02,@DC_LOP1              Loop @DC_LOP1\n@DC_LOP1X EQU  *\n         LA    R15,RVPREFIX              Calculate Prefix Length\n         SR    R01,R15\n         EX    R01,MVDSNP\n         LA    R08,0(R08,R01)            R08 <- DSN Address + Prefix\n         MVI   0(R08),C'.'               Add Period\n         LA    R08,1(R08)                Plus 1 ( for Period )\n         LR    R01,R07                   R01 <- Input Dataset Address\n         LA    R15,46-1                  R15 <- DSN Area Length\n@DC_LOP2 EQU   *\n         CLI   0(R01),C' '               If End ?\n         BE    @DC_LOP2X                   goto @DC_LOP2X\n         LA    R01,1(R01)                Shift\n         BCT   R15,@DC_LOP2              Loop @DC_LOP2\n@DC_LOP2X EQU  *\n         LA    R01,46-1                  Calculate DSN Length\n         SR    R01,R15\n*        STC   R01,*+5\n*        MVC   0(0,R08),0(R07)           Coopy Dataset Name\n         EX    R01,MVDSNP2\n         B     @DC_SKP2                  goto Next\n@DC_SKP1 EQU   *                         Quotation !\n         LA    R01,1(R07)                R01 <- DSN Address\n         LA    R15,46-1                  R15 <- DSN Length\n@DC_LOP3 EQU   *\n         CLI   0(R01),C''''              If End ?\n         BE    @DC_LOP3X                   goto @DC_LOP3X\n         LA    R01,1(R01)                Shift\n         BCT   R15,@DC_LOP3              Loop @DC_LOP3\n@DC_LOP3X EQU  *\n         LA    R01,46-1                  Calculate DSN Length\n         SR    R01,R15\n         BCTR  R01,0\n*        STC   R01,*+5\n*        MVC   0(0,R08),1(R07)           Copy DSN\n         EX    R01,MVDSNP3\n@DC_SKP2 EQU   *\n         LM    R00,R14,@DC_REGS\n         BR    R14\n*-------------------------------------------------------------------\n@CRREGS  DS    18F\n*-------------------------------------------------------------------\n*-------------------------------------------------------------------\n*-------------------------------------------------------------------\n*-------------------------------------------------------------------\n*-------- Recover Dataset ENQ ( Exclusive ) -----------------------\n*+       MVC   RNAME(44),@RV#DSN               ENQ rname\n*+       ENQ   MF=(E,@ENQ)\n*+       LTR   R15,R15\n*+       BNZ   ENQ_ER0\n*-------- Allocate & Initialization --------------------------------\n@ENT_QUT EQU   *\n*-------- TTR and MBBCCHHR Message Display -------------------------\n@ADDRESS EQU   *\n*+       MVC   ERRMSG14+6(6),O#TTR\n*+       CALL  RV1BTH,(O#MBCHR,ERRMSG14+24,8)\n*+       MVC   ZEDSMSG(20),=CL20' '\n*+       MVC   ZEDLMSG(60),ERRMSG14\n*+       B     @D_CMD_X\n*\n*+       CALL  ISPLINK,(DISPLAY,PANELINF),VL   information panel\n*+       B     @D_CMD_X\n*-------- Member Restore -------------------------------------------\n*--------- Directory Table Over Flow -------------------------------\n@TB_OVER EQU   *\n         TPUT  =CL50'*** DIRECTORY TABLE OVER ***',50\n*        ABEND 1\n*        CLOSE (PDSFD)                          Close Recover File\n         L     R02,RV1TBSPL\n         L     R08,RV1TBSPA\n         FREEMAIN RC,LV=(R02),A=(R08)           FreeMain Direct Table\n         LA    R02,256\n         L     R08,RV1DIRBA\n         FREEMAIN RC,LV=(R02),A=(R08)           FreeMain Direct Table\n         LA    R15,16\n         BR    R12\n*+       MVC   DA#PROC(8),=CL8'FREE    '\n*+       MVC   DA#RETDD(8),@RV#DD\n*+       LA    R01,DA#AREA\n*+       L     R15,@RV#6DA\n*+       BALR  R14,R15                          Recover File De-Alloc\n*+       DEQ   MF=(E,@DEQ)                      DEQ\n*+       LA    R02,RV1TBSPA\n*+       CALL  RV1BTH,((R02),ERRMSG03+29,4)\n*+       LA    R02,RV1TBSPL\n*+       CALL  RV1BTH,((R02),ERRMSG03+40,4)\n*+       LA    R02,RV1TBSPP\n*+       CALL  RV1BTH,((R02),ERRMSG03+51,4)\n*+       MVC   ZEDLMSG,ERRMSG03\n*+       MVC   ZEDSMSG,=CL20'Table OverFlow'\n*+       CALL  ISPLINK,(SETMSG,ISRZ001),VL\n*+       B     SHOW_ENT                         Return Entry Panel\n*--------- Recovery Dataset ENQ Check ------------------------------\nENQ_ER0  EQU   *\n*        ST    R15,WK#F                         Set  ENQ Code\n*+       CALL  RV1BTH,((15),ERRMSG16+47,4)\n*+       MVC   ZEDLMSG,ERRMSG16\n*+       MVC   ZEDSMSG,=CL20'Recover Faile'\n*+       CALL  ISPLINK,(SETMSG,ISRZ001),VL\n*+       B     SHOW_ENT                         Return Entry Panel\n*-------------------------------------------------------------------\n*-------- convert mbcchhr to ttr -----------------------------------\n*-------------------------------------------------------------------\n@CNVTTR  EQU   *\n         STM   R03,R15,REGS\n         L     R14,CVTPTR\n         USING CVTMAP,R14\n         L     R15,CVTPRLTV\n         DROP  R14\n         BALR  R14,R15\n         LM    R03,R15,REGS\n         BR    R14\n@CNVCHR  EQU   *\n         STM   R03,R15,REGS\n         L     R10,CVTPTR\n         USING CVTMAP,R10\n         L     R15,CVTPCNVT\n         DROP  R10\n         BALR  R14,R15\n         LM    R03,R15,REGS\n         BR    R14\n*-------------------------------------------------------------------\n*-------- i/o error routine ( ps ) ---------------------------------\n*-------------------------------------------------------------------\nIOERR_S  EQU   *\n         SYNADAF ACSMETH=BSAM                  I/O ERROR\n         STM   R01,R15,REGS\n         LA    R01,91(R01)\n*        B     @IOERR\n         MVC   ERRMSG04+23(15),0(R01)\n         CALL  RV1BTH,(W_TTR,ERRMSG04+16,3)\n         TPUT  ERRMSG04,L'ERRMSG04\n         B     @IOERR\n*        LR    R12,R01\n*        B     @IOERR\n*-------------------------------------------------------------------\n*-------- i/o error routine ( po ) ---------------------------------\n*-------------------------------------------------------------------\nIOERR_P  EQU   *\n         SYNADAF ACSMETH=BPAM\n         STM   R01,R15,REGS\n         LA    R01,91(R01)\n*        B     @IOERR\n         MVC   ERRMSG04+23(15),0(R01)\n         CALL  RV1BTH,(W_TTR,ERRMSG04+16,3)\n         TPUT  ERRMSG04,L'ERRMSG04\n         B     @IOERR\nIOERR_W  EQU   *\n         SYNADAF ACSMETH=BPAM\n         STM   R01,R15,REGS\n         LA    R01,91(R01)\n*        B     @IOERR\n         MVC   ERRMSG04+23(15),0(R01)\n         CALL  RV1BTH,(W_TTR,ERRMSG04+16,3)\n         TPUT  ERRMSG04,L'ERRMSG04\n         B     @IOERR\nIOERR_WS EQU   *\n         SYNADAF ACSMETH=BSAM\n         STM   R01,R15,REGS\n         LA    R01,91(R01)\n         MVC   ERRMSG04+23(15),0(R01)\n         CALL  RV1BTH,(W_TTR,ERRMSG04+16,3)\n         TPUT  ERRMSG04,L'ERRMSG04\n         B     @IOERR\n@IOERR   EQU   *\n         LM    R01,R15,REGS\n         SYNADRLS\n*        LTR   R00,R00\n*        BZ    @IOERRX\n*        TPUT  =CL20'SYNADRLS ERR',20\n*+       B     @R_EXIT\n@IOERRX  EQU   *\n         TPUT  =CL20'RETURN      ',20\n         LM    R01,R15,REGS\n         PRINT GEN\n         RETURN\n         PRINT NOGEN\n*        B     @M_NEXT\n*-------------------------------------------------------------------\n*-------- Dataset Configratin Block --------------------------------\n*-------------------------------------------------------------------\nPDSFD    DCB   DSORG=PS,MACRF=(RP),DDNAME=@@@@,BLKSIZE=256,            *\n               SYNAD=@RD_EXIT,EODAD=@RD_EXIT,RECFM=F,EXLST=EXLST\n         ENTRY PDSFD\nEXLST    DC    X'87',AL3(RV1JFCB)\n*DSF     DCB   DSORG=PO,MACRF=(R),DDNAME=@@@@,DEVD=DA,                 *\n               SYNAD=IOERR_P,EODAD=@M_NEXT,EXLST=EXLST\nPDSFS    DCB   DSORG=PO,MACRF=W,DDNAME=@@@@,                           *\n               SYNAD=IOERR_W\nTRCF     DCB   DSORG=PS,MACRF=(PM),DDNAME=REVTRC,                      *\n               RECFM=F,LRECL=80,BLKSIZE=80\nTRCFL    EQU   *-TRCF\n         ENTRY TRCF\nWKTRCF   DS    (TRCFL*3)C\n*\nDSCBFMT1 CAMLST SEARCH,DSCB1DSN,DSCB1VOL,DSCB1\nDSCB1VOL DS    CL6\nJFCB1    DS    0CL176                    job file control block\nDSCB1DSN DS    CL44\nDSCB1    DS    CL140\n         DS    0F\n*RITE_TTR DS   XL4\n*\nWKMES2   DS    CL162\n         DS    0F\n* --- SAVE AREA ---\nSAVEAREA DS    18F                               SAVEAREA\n* --- Work Area ---\nWK#F     DS    F\nWK#F2    DS    F\n* --- Register Save ( work ) area ---\nREGS     DS    18F                               WORK SAVEAREA\nCMD#REG  DS    18F                               WORK SAVEAREA\nPC@REGS  DS    18F                       Attribute\n         DS    0D\nEXTRBUFA DS    F\n* --- V con ---\n*RV#6DA  DC    V(@RV#6DA)\n*RV#6DC  DC    V(@RV#6DC)\n         DS    0D\n* --- Panel RC Packed Area ---\nPK_AREA  DC    PL8'0'\nUPK_AREA DC    CL16' '\n*                                1\n*                    6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1\nEDMASK   DC    XL16'40202020202020202020202020202120'\nEDWORK   DS    XL16\n         DS    0F\n* --- Condition Code ---\nRC#      DS    F\nSPC1     DS    F\nSPC2     DS    F\n* --- ENQ And DEQ List Function ---\nQNAME    DC    CL8'@REVIVE'\nRNAME    DS    CL44\n@ENQ     ENQ   (QNAME,RNAME,E,44,SYSTEMS),RET=USE,MF=L\n@DEQ     DEQ   (QNAME,RNAME,44,SYSTEMS),MF=L\nPANELINF DC    CL8'@RV#INF '                     ISPF PANEL ( INFO )\nPANELEXTQ DC   CL8'REV@EXTQ'                     ISPF PANEL ( INFO )\nPANELEXTR DC   CL8'REV@EXT2'                     ISPF PANEL ( INFO )\nPANELEXTW DC   CL8'REV@EXTW'                     ISPF PANEL ( INFO )\nPANELRC  DS    F\nZCMD     DS    CL80                              command line\n* -----------------------------------\n         DS    0F\nST#LIST  DS    0CL24\nS_MEMBER DC    CL8'        '\nS_TTR    DC    XL3'000000'\nC        DC    BL1'10000110'\n*                  1.......    ARIAS\n*                  ...11111    USER DATA LENGTH ( HALF WORD )\nUSERDATA DC    CL12'- Revive! - '\n*\n         DS    0F\nST#LISTA DS    0CL42\nSA_NAME  DC    CL8'DUMMY   '\nSA_TTR   DC    XL3'000000'\n         DC    BL1'00001111'\n*                  ........    ARIAS\n*                  ...11111    USER DATA LENGTH ( HALF WORD )\nSA_VVMM  DC    XL4'00000000'\nSA_CRE   DC    XL4'0099049F'\nSA_CHA   DC    XL4'0099049F'\nSA_CHAH  DC    XL2'0000'\nSA_SIZE  DC    XL2'0000'\nSA_INIT  DC    XL2'0000'\nSA_MOD   DC    XL2'0000'\nSA_USER  DC    CL8'REVIVE!'\nSA_FIL   DC    CL2'  '\n*\n         DS    0F\n* --- Browse DataSet Name ---\nBR#DSN   DS    CL46\n         DS    XL10\nBR#VOL   DS    CL6\n* --- Restore DataSet Name ---\n         ENTRY R#DSN\nR#DSN    DS    CL44\n* --- Restore Volume Serial ---\n         ENTRY R#VOL\nR#VOL    DS    CL6\n*#DD     DS    CL8\nR_LEN    DS    F                           data area read length\n@ID_GETMA DS   F                          Getmain Address\nREV011   DC    CL8'REV011'\nREV012   DC    CL8'REV012'\nREV013   DC    CL8'REV013'\nREV014   DC    CL8'REV014'\nREV015   DC    CL8'REV015'\nREV016   DC    CL8'REV016'\nREV017   DC    CL8'REV017'\nREV018   DC    CL8'REV018'\nREV019   DC    CL8'REV019'\nREV021   DC    CL8'REV021'\nREV990   DC    CL8'REV990'\nREVT003  DC    CL8'REVT003'\nREVT004  DC    CL8'REVT004'\nREVT005  DC    CL8'REVT005'\nREVT006  DC    CL8'REVT006'\nREVT007  DC    CL8'REVT007'\nSCRLCHK  DC    CL8'SCRLCHK'\nRV1#FMTBX DC   CL8'RV1#FMTB'\nRV1DAREAX DC   CL8'RV1DAREA'\nRV1ALCDX  DC   CL8'RV1ALCD'\nDA#ERRX   DC   CL8'DA#ERR'\nRV1TBSPX  DC   CL8'RV1TBSP'\nRV1DIRBX  DC   CL8'RV1DIRB'\nDTX       DC   CL8'DT'\n* ------ REVTRC --------\nM1N      DC    CL8'M1'\nM2N      DC    CL8'M2'\nM3N      DC    CL8'M3'\nM4N      DC    CL8'M4'\nM5N      DC    CL8'M5'\nDYRETCC  DS    CL4\nDYINFOC  DS    CL4\nL4       DC    F'4'\nL8       DC    F'8'\nDAMSGA   DS    F\nDAMSGL   DS    F\n* --- check of logical record length ---\n         DS    0F\n         ENTRY CK#LRECL\nCK#LRECL DS    BL2\n* --- work of ttr ---\nW_TTR    DS    0F,XL4                            work ttr\n* --- work of mbbcchhr ---\nW_CHR    DS    0F,XL8                            end of mbbcchhr\n         DS    0F\nSTOW_RC  DS    F\nSTOW_RSN DS    F\nSTOW_TTR DS    XL4\nSTOW_NAME DS   CL8\n* --- Getmain Address ---\n@EXT_GETMA DS  F\nPSCRFLAG DC    BL1'00000000'\n*                  .                     1:Center 0:Right Screen\n*                   .                    1:Left\n*                    .\n*                     .\n*                      .\n*                       .\n*                        .\n*                         .\n*\n         DS    0F\n*--- messages ---\n*                   |....+....1....+....2....+....3....+....4....+....5\n*              ....+....6....+....7....+....8\nERRMSG03 DS    0CL75\n         DC    CL27'Directory Table OverFlow . '\n         DC    CL48'A:@@@@@@@@ L:@@@@@@@@ P:@@@@@@@@'\nERRMSG04 DC    CL60'< I/O Error TTR:@@@@@@ @@@@@@@@@@@@@@@ >'\nERRMSG05 DC    CL60'< DSORG Error !   Not Partitioned File :@@ >'\nERRMSG13 DC    CL60'< Control Table Getmain Faile .. : @@@@@@@@ >'\nERRMSG14 DC    CL60'< TTR:@@@@@@ = MBBCCHHR:@@@@@@@@ @@@@@@@@ >'\nERRMSG15 DC    CL75'Directory Table Space to Large . RC:@@@@@@@@ Length*\n               :@@@@@@@@'\nERRMSG16 DC    CL75'Dataset Now Recovering of Other User .  ENQ RC:@@@@*\n               @@@@'\nTRCHDR   DC    CL80'** Revive! Process Trace **'\nWK#C     DS    CL8\n*-------------------------------------------------------------------\nMSGLAST  DS    0XL80\n         DC    XL1'05',CL79'   ** END OF LIST **'\nDTTL1    DS    0XL80\n         DC    XL01'90'\n         DC    CL79'  Member   T T R  -- Data ( First 60 Byte ) --'\nDTTL2    DS    0XL80\n         DC    XL01'90'\n         DC    CL79'  Member   T T R  F Lrecl Blksz Recds -- Data ( Fir*\n               st 40 Byte ) --'\nDTTL3    DS    0XL80\n         DC    XL01'90'\n         DC    CL79'  Member   T T R  F Lrecl Blksz Recds M B B C  C H *\n               H R  -- Data --'\nMVRV1DTTL MVC   0(0,R01),DTTLCOLS\nDTTLCOLS DS    CL13\n*-------------------------------------------------------------------\n         DS    0D\nBROWSE_STOW_ERROR DS 0X\n         DC    F'04',F'0000',CL8'REVA001'\nBROWSE_STOW_ERROR_LENGTH EQU *-BROWSE_STOW_ERROR\n         DC    F'12',F'0000',CL8'REVA002'\n         DC    F'16',F'0001',CL8'REVA003'\n         DC    F'16',F'0002',CL8'REVA004'\n         DC    F'16',F'0004',CL8'REVA005'\n         DC    F'16',F'1847',CL8'REVA006'\n         DC    F'16',F'2871',CL8'REVA007'\n         DC    F'16',F'3383',CL8'REVA009'\n         DC    F'16',F'3639',CL8'REVA010'\n         DC    F'20',F'0000',CL8'REVA011'\n         DC    F'24',F'0000',CL8'REVA012'\n         DC    F'28',F'0000',CL8'REVA013'\n         DC    F'32',F'0000',CL8'REVA014'\n         DC    F'36',F'0000',CL8'REVA015'\n         DC    F'40',F'0000',CL8'REVA016'\n         DC    F'44',F'0000',CL8'REVA017'\n         DC    F'48',F'0004',CL8'REVA018'\n         DC    F'48',F'0016',CL8'REVA019'\n         DC    F'00',F'0000',CL8'REVA999'  End of Table\n*-------------------------------------------------------------------\n         COPY RV1#COMM\n*-------------------------------------------------------------------\n         COPY  RV1#ETOP\n         COPY  RV1#ISPC\n*-------------------------------------------------------------------\n         RV1#CMDA SECTTYP=CSECT\n*-------------------------------------------------------------------\n         DS    0D\n         LTORG\n         PRINT GEN\n*-------------------------------------------------------------------\n         RV1#ISPV SECTTYP=CSECT\n*-------------------------------------------------------------------\n         PRINT NOGEN\n*-------------------------------------------------------------------\n         COPY  RV1#ALCD\n*-------------------------------------------------------------------\n         COPY RV1#DTH\n*-------------------------------------------------------------------\n         RV1#DTE  SECTTYP=DSECT\n*-------------------------------------------------------------------\n         RV1#FMTB SECTTYP=DSECT\n*-------------------------------------------------------------------\nJFCBSECT DSECT\n         IEFJFCBN LIST=YES\n         IEFUCBOB LIST=YES\n         DCBD  DSORG=PO,DEVD=DA\n         CVT   DSECT=YES,LIST=YES\nDSCBSEC1 DSECT\n         IECSDSL1 (1)\n* --- Dataset Configration Dsect ---\n         PRINT GEN\n*        COPY  @RV#06DC\n* --- @RV Copy Section ---\n*        COPY  @RV#080X\nR00      EQU   00\nR01      EQU   01\nR02      EQU   02\nR03      EQU   03\nR04      EQU   04\nR05      EQU   05\nR06      EQU   06\nR07      EQU   07\nR08      EQU   08\nR09      EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   @RV#090\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#SHOW": {"ttr": 3590, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x03\\xd2\\x03\\xd2\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 978, "newlines": 978, "modlines": 0, "user": "KIMU"}, "text": "         START\n* -----------------------------------------------------------------\n*\n*\n*\n*\n* Return Code:\n*   0 : Normal end\n*   1 : Getmin error\n*   8 : Read Error\n*\n* -----------------------------------------------------------------\n         DC   C'<< Revive ! >> ('\n         COPY  RV1#HDR\n         PRINT NOGEN\n*-------------------------------------------------------------------\n* --- Start of Process --------------------------------------------\n*-------------------------------------------------------------------\nRV1SHOW  CSECT\n         SAVE  (14,12),T,*\n         BALR  R03,0\n         USING *,R03,R04,R05               Base Reg. R03,R04\n         LA    R04,2048(R03)               2 Base Reg\n         LA    R04,2048(R04)\n         LA    R05,2048(R04)               2 Base Reg\n         LA    R05,2048(R05)\n         ST    R13,SAVEAREA+4              Save A(OLD SaveArea)\n         LR    R12,R13\n         LA    R13,SAVEAREA\n         ST    R13,8(R12)                  Save A(NEW SaveArea)\n*-------------------------------------------------------------------\n         LM    R06,R07,R01                 Revive Common Area\n         USING REVIVED,R06\n         USING CMDPROCD,R07\n*-------------------------------------------------------------------\n         NI    SHOWFLAG,X'00'\n*-------------------------------------------------------------------\n*-------- ISPF VDEFINE ---------------------------------------------\n*-------------------------------------------------------------------\n@ISPVDEF EQU   *\n         L     R08,RV1ISPFN              Load Var Name Pointer\n         L     R09,RV1ISPFL              Load Var Length Pointer\n         L     R10,RV1ISPFT              load Var Type Pointer\n         L     R11,RV1ISPFA              load Var Address Pointer\n@IS_LOP1 EQU   *\n         CLC   0(8,R08),ISPVENDM         If End ?\n         BE    @IS_LOP1X                   Goto @IS_LOP1X\n*        TPUT  0(R08),8\n         L     R01,0(R11)                Load Var Address\n         CALL  ISPLINK,(VDEFINE,(R08),(R01),(R10),(R09)),VL\n         LA    R08,8(R08)                Shift Var Name Pointer\n         LA    R09,4(R09)                Shift Var Length Pointer\n         LA    R10,8(R10)                Shift Var Type Pointer\n         LA    R11,4(R11)                Shift Var Address Pointer\n         B     @IS_LOP1                  goto Loop\n@IS_LOP1X EQU  *\n*-------------------------------------------------------------------\n@PQUERY  EQU   *\n         CALL  ISPLINK,(PQUERY,PANELSHO,RV1SAREAN,,VWIDTHN,VDEPTHN),VL\n         LTR   R15,R15\n         BZ    @PQ_SKP2\n         CALL  ISPLINK,(SETMSG,REV020),VL\n*REV020                             .ALARM = YES\n*'Revive Show Panel Query Error. Why? '                               +\n*'Perhaps Misstake Installation. Please Re-Install'\n@PQ_SKP2 EQU   *\n         MVC   VSDEPTH,VDEPTH\n         MVC   VSWIDTH,VWIDTH\n         L     R01,VDEPTH\n*        BCTR  R01,0\n         MH    R01,VSWIDTH+2\n         ST    R01,RV1SAREAL\n         GETMAIN RC,LV=(R01)            Getmain Dynamic Alloc Work A\n         LTR   R15,R15                   If not Error\n         BZ    @PQ_SKP21                   goto @PQ_SKP21\n*--- Getmain Error -------------------------------------------------\n*+++++++ BAL   R14,GETMAIN_ERROR\n         LA    R15,1\n         B     BYE_NOGETMAIN\n*--- Normal Compleate ----------------------------------------------\n@PQ_SKP21 EQU   *\n         ST    R01,RV1DAREAA            Store List Panel Area\n         CALL  ISPLINK,(VDEFINE,RV1SAREAN,(R01),RV1SAREAT,RV1SAREAL),VL\n*-------------------------------------------------------------------\n*-------- Dataset Open ---------------------------------------------\n*-------------------------------------------------------------------\n*DSOPEN  EQU   *\n*        MVC   PDSFDATA+X'28'(8),RV1DDN  Data Area Read DD\n*        OPEN  (PDSFDATA)\n*        POINT PDSFDATA,PC@TTRB          Point Data Area Addr\n*-------------------------------------------------------------------\n*-------- Data Area Read -------------------------------------------\n*-------------------------------------------------------------------\n*\n* Data Area Table .\n*\n*  Data Area Table is Chaining Next Table Entry and Previous Table\n*  Entry.\n*  STFIRST : First Table Address\n*  STLAST  : Last Table Address\n*  STCURR  : Current Process Table Start Address\n*  STCURRP : Current Process Table Last Used Address\n*\n* <-4096Byte->\n* +----------+\n* | Table #1 |\n* +----------+\n*   |\n*   |   Point\n*   +-->+----------+\n*       | Table #2 |\n*       +----------+\n*         |\n*         |   Point\n*         +-->+----------+\n*             | Table #3 |\n*             +----------+\n*                        .\n*                        .\n*                        +-->+----------+\n*                            | Table #n |\n*                            +----------+\n*\n*\n*  First 12 Byte is Table Control Area. Control Area is Part of 3.\n*  First 4 Byte. Member Entry Number in This Table.\n*  Sec 4 Byte. Next Table Address. Last 4 Byte. Previous Table Address.\n*\n* |....+....1....+....2....+.||.+....0....+...\n*  <-->                                              : First Entry No\n*      <-->                                          : Last Entry No\n*          <-->                                      : Next Table Adr\n*                                                      if Zero is Last\n*              <-->                                  : Prev Table Adr\n*                                                      if Zero is First\n*                  <-- 84 Byte --||-->               : Member Entry\n*                                     <-- 84 Byte -- : Sec Entry ..\n*\n*\n* Member Entry Layout.\n* |....+....1....+....2....+....3....+.||.8....|\n*  <------>                                          : Member Name\n*          <-->                                      : TTRx ( Bin )\n*              <---->                                : TTR ( Char )\n*                    <-->                            : Num of Block\n*                        X                           : Attribute\n*                         _                          : filler\n*                          <--  60 Byte --||-->      : First 60 Byte\n*\n*-------------------------------------------------------------------\n@INITIAL EQU   *\n         XC    STFIRST,STFIRST           First Entry Address Clear\n*\n         GETMAIN RC,LV=STLENGTH          First Data Table Area\n         LTR   R15,R15\n         BNZ   @RA_ERR1\n         USING STHEADER,R01\n         LA    R15,1\n         ST    R15,STHPOSF               Set First Entry = 1\n         XC    STHPOSL,STHPOSL           Clear Last Entry\n         XC    STHNEXT,STHNEXT           Clear Next Table Address\n         XC    STHPREV,STHPREV           Clear Previous Table Entry\n         DROP  R01\n         ST    R01,STFIRST               Store Address ( First )\n         ST    R01,STLAST                Store Address ( Last )\n         ST    R01,STCURR                Store Address ( Current )\n         LA    R01,STHL(R01)             Shift Position\n         ST    R01,STCURRP               Store Address ( Position )\n         LA    R01,1\n         ST    R01,STPOSIT               Set List Panel Row = 1\n         XC    STLASTE,STLASTE           Data Area Table Last Entry Num\n* --- Getmain Read Buffer ---\n         LH    R02,PDSFDATA+X'3E'        Load BlockSize ( 32760 )\n         GETMAIN RC,LV=(R02)             Member TTR Save Area\n         LTR   R15,R15\n         BNZ   @RA_ERR1\n         ST    R01,RV1DATBA              Store Address\n*-------------------------------------------------------------------\n*-------- Data Area Read -------------------------------------------\n*-------------------------------------------------------------------\n* -Variable\n*  STSCRL   : Scroll vertical Lines.(sign fixed)\n*  STSCRLS  : Scroll side column.(sign fixed)\n*  STPOSIT  : Currently Displayed Top Line.(fixed)\n*\n*  STLASTT  : TTR of next record.\n*  STLASTE  : Already Readed Records No.(Already Getting TTR)\n*  STLASTF  : Already Readed Line No.(for RECFM=F)\n*  STLASTV  : Already Readed Line No.(for RECFM=V)\n*\n*  -ShowTable-\n*  one entry per one phisical record.\n*  STETTR   : TTR\n*  STELNG   : phisical record length\n*  STERCDV  : logical record length ( for RECFM=V )\n*\n* *** if Recfm=F\n*       record count = STELNG / lrecl\n* *** if Recfm=V\n*       record count = STERCDV ( count records from phisical data )\n* *** if Recfm=U\n*       record count = 1 ( always )\n*\n* -Process\n*  Phase 1: ( compute scrolled top line. )\n*   STPOSIT <- STPOSIT + STSCRL\n*\n*  Phase 2: ( ShowTable build. )\n*   If STPOSIT < STLASTE(F,V) then\n*     Read & Build ShowTable.\n*\n*  Phase 3: ( make display area. )\n*   Read Record, and Make Display Area.\n*\n*  Phase 4: ( Display )\n*   Dispaly Show Panel.\n* ----\n* -Scroll\n*  STSCRL  <- Up(-), Down(+)\n*  STSCRLS <- Left(-), Right(+)\n* ----\n* -When a RECFM changed.\n*  Set Current RECFM flag.\n*  count STPOSIT lines.(from first record to current record)\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*-------------------------------------------------------------------\n@SDISPLAY EQU  *\n         L     R08,STPOSIT               Get Current Top Line.\n@SD_MAKE EQU   *\n         CL    R08,STLASTE               If Current Line Already Readed\n         BL    @SD_MAKEX\n         TM    SHOWFLAG,X'80'            If Already Opened ?\n         BO    @SD_OPEND\n         MVC   PDSFDATA+X'28'(8),RV1DDN  Data Area Read DD\n         OPEN  (PDSFDATA)\n         OI    SHOWFLAG,X'80'            Opened!\n@SD_OPEND EQU  *\n         POINT PDSFDATA,STLASTT          Point TTR at Last readed\n         L     R02,RV1DATBA              R02 <- Read Buffer Address\n         READ  DECB11,SF,PDSFDATA,(R02),'S' Read Data Area\n         CHECK DECB11                     ( First Block )\n         LA    R01,1\n         ST    R01,DTERECD               Initialize Block Counter\n         LH    R02,PDSFDATA+X'3E'        Load BlockSize\n         L     R01,DECB11+16             Get Read Length\n         SH    R02,14(R01)\n         STH   R02,READ_LENGTH           Save Read Length\n*-------------------------------------------------------------------\n*-------- Data Area Read -------------------------------------------\n*-------------------------------------------------------------------\n@READDA  EQU   *\n         XC    CURR_CHR(8),CURR_CHR\n         NI    FLAG,B'10011111'          Clear x'60' Flag\n*-------- Read First Data Area -------------------------------------\n@M_FIRST EQU   *\n         XC    DTEFIRST(DTELAST),DTEFIRST\n*        XC    DTERLNG(2),DTERLNG        Clear Maximam Lrecl\n*        XC    DTEBSZ(2),DTEBSZ          Clear Maximam Blksize\n*        XC    DTELRL(2),DTELRL          Clear Maximam Lrecl\n         NI    FLAG,B'11100000'          Clear Flag\n*              (Do'nt Clear x'60' , It's Analyze Screen Flag )\n*        NI    DTERFM,B'00001111'        Clear Flag\n* Convert 'Real Address' to 'Relative Address'\n         BAL   R14,@CNVTTR               Convert MBCCHHR -> TTR\n*--- End of Process ? ---\n         BAL   R14,EOPCHK                End of Process ?\n         LTR   R15,R15\n         BNZ   @M_EXIT2\n*--- Read first record ---\n         L     R02,RV1DATBA              R02 <- Read Buffer Address\n         READ  DECB11,SF,PDSFDATA,(R02),'S' Read Data Area\n         CHECK DECB11                     ( First Block )\n         LA    R01,1\n         ST    R01,DTERECD               Initialize Block Counter\n         LH    R02,PDSFDATA+X'3E'        Load BlockSize\n         L     R01,DECB11+16             Get Read Length\n         SH    R02,14(R01)\n         STH   R02,READ_LENGTH           Save Read Length\n*--- End of Process ? ---\n         BAL   R14,EOPCHK                End of Process ?\n         LTR   R15,R15\n         BNZ   @M_EXIT2\n*--- Search Strings ---\n         BAL   R12,@SRCHSTR              Search Strings\n*--- Convert TTR ---\n         BAL   R14,@CNVTTR               Convert MBCCHHR -> TTR\n*--- Analyze Screen update ---\n         BAL   R12,@ANLUPDT              Analyze Screen Update\n* --- Search TTR from Directory Table ---\n         L     R08,RV1TBSPA              R08 <- Directory Table Area\n@M_LOP01 EQU   *\n         CL    R08,RV1TBSPP              If Last Table Entry ?\n         BNL   @M_NOF                      goto @M_NOTF\n         CLC   8(3,R08),CURR_TTR         If TTR is Equal\n         BE    @M_FND                      goto @M_FND\n         LA    R08,12(R08)               Shift Next Table\n         B     @M_LOP01                  Loop\n*-------- TTR Found in Directory Table -----------------------------\n@M_FND   EQU   *\n         OI    FLAG,X'04'                Member Exist.\n         MVC   DTENAME(8),0(R08)         Copy Member Name\n         OI    11(R08),X'01'             Member Found Flag Set.\n         CLI   RV1ADDC,C'Y'              If No Add Current Member ?\n*        BNE   @M_DUM_L                    goto @M_DUM_L\n*        BNE   @M_ANAL1                    goto @M_ANAL1\n         BNE   @M_COPY\n@M_FND2  EQU   *\n         OI    FLAG,X'01'                Set Table Add Flag\n         B     @M_COPY\n*-------- TTR not Found in Directory Table -------------------------\n@M_NOF   EQU   *\n         OI    FLAG,X'01'                Set Table Add Flag\n         MVI   DTENAME,C'+'              Member Name ( +TTR )\n         LA    R01,DTENAME+1\n         CALL  RV1BTH,(CURR_TTR,(R01),3)\n         MVI   DTENAME+7,C' '            Member Name ( +TTR )\n*-------- Copy DTE Area --------------------------------------------\n@M_COPY  EQU   *\n         MVC   DTETTRB(4),CURR_TTR       Copy TTR ( Binary )\n         LA    R01,DTETTR\n         CALL  RV1BTH,(CURR_TTR,(R01),3) Copy TTR ( Character )\n*\n         L     R15,RV1DATBA              R08 <- Read Buffer Address\n         LH    R14,READ_LENGTH           R14 <- Read Length\n         LA    R01,L'DTEDATA\n         CLR   R14,R01                   If Read Length >= 60 ?\n         BNL   @M_SKIP                     goto @M_SKIP\n         BCTR  R14,0\n         MVI   DTEDATA,C' '\n         MVC   DTEDATA+1(L'DTEDATA-1),DTEDATA\n         STC   R14,*+5\n         MVC   DTEDATA(0),0(R15)         Copy Data Area\n         B     @M_SKIPX\n@M_SKIP  EQU   *\n         MVC   DTEDATA(L'DTEDATA),0(R15) Copy Data Area\n@M_SKIPX EQU   *\n         BAL   R12,CONVDCHR              Convert Display able Character\n@M_ANAL1 EQU   *\n         BAL   R12,@COMPT_LEN            Record Analyze.\n*-------- Read Next Records ----------------------------------------\n@M_DUM_L EQU   *                         2'nd Block\n         L     R02,RV1DATBA              R02 <- Read Buffer Address\n         READ  DECB12,SF,PDSFDATA,(R02),'S'\n         CHECK DECB12\n         L     R01,DTERECD               Add block length + 1\n         LA    R01,1(R01)\n         ST    R01,DTERECD\n         LH    R02,PDSFDATA+X'3E'        Load BlockSize\n         L     R01,DECB12+16             Get Read Length\n         SH    R02,14(R01)\n         STH   R02,READ_LENGTH           Save Read Length\n*--- End of Process ? ---\n         BAL   R14,EOPCHK                End of Process ?\n         LTR   R15,R15\n         BNZ   @M_EXIT2\n*\n         BAL   R12,@COMPT_LEN\n*\n         BAL   R12,@SRCHSTR\n         BAL   R14,@CNVTTR               Convert MBBCCHHR -> TTR\n         BAL   R12,@ANLUPDT              Analyze Screen Show\n*\n         B     @M_DUM_L\n*-------- Next Member Process --------------------------------------\n@M_NEXT  EQU   *                         End of File.\n         L     R01,DTERECD               If Member Have No Records\n         LTR   R01,R01                     Skip\n         BZ    @M_NEXTX\n         TM    FLAG,X'04'\n         BO    MN#EXIST\n         TM    FLAG,X'08'\n         BO    MN#OVER\n         TM    FLAG,X'10'\n         BO    MN#BORDER\n         MVI   DTEATTR,ATTR_REC\n         B     MN#ATTRX\nMN#EXIST EQU   *\n         MVI   DTEATTR,ATTR_CUR\n         B     MN#ATTRX\nMN#OVER  EQU   *\n         MVI   DTEATTR,ATTR_EXT\n         B     MN#ATTRX\nMN#BORDER EQU  *\n         MVI   DTEATTR,ATTR_BDR\n         B     MN#ATTRX\nMN#ATTRX EQU   *\n         MVI   DTEDATTR,ATTR_DOK\n         TM    B#RECFM,RECFM_U\n         BO    MN#RECFM_U\n         TM    B#RECFM,RECFM_V\n         BO    MN#RECFM_V\n         TM    B#RECFM,RECFM_F\n         BO    MN#RECFM_F\nMN#RECFM_U EQU *\n         CLC   B#BLKSZ(2),DTEBSZ\n         BL    MN#RECFM_NG\n         B     MN#RECFM_X\nMN#RECFM_V EQU *\n         TM    DTERFM,X'80'\n         BO    MN#RECFM_NG\n         LH    R01,B#BLKSZ\n         CH    R01,DTEBSZ\n         BL    MN#RECFM_NG\n         LH    R01,B#LRECL\n         CH    R01,DTELRL\n         BL    MN#RECFM_NG\n         B     MN#RECFM_X\nMN#RECFM_F EQU *\n         LH    R01,B#BLKSZ\n         CH    R01,DTEBSZ\n         BL    MN#RECFM_NG\n         LH    R14,DTERLNG\n         LH    R01,B#LRECL\n         SRDA  R14,32\n         DR    R14,R01\n         LTR   R14,R14\n         BNZ   MN#RECFM_NG\n*\n         B     MN#RECFM_X\nMN#RECFM_NG EQU *\n         OI    DTERFM,X'40'              NG Record Flag\n         MVI   DTEDATTR,ATTR_DNG\n         B     MN#RECFM_X\nMN#RECFM_X EQU *\n         MVC   ERRMSG99,=CL80' >'\n         MVC   ERRMSG99+05(8),DTENAME\n         MVC   ERRMSG99+15(6),DTETTR\n         TM    DTERFM,X'80'\n         BO    NM#DEBUG1\n         MVI   ERRMSG99+25,C'V'\nNM#DEBUG1 EQU  *\n         TM    DTERFM,X'10'\n         BO    NM#DEBUG2\n         MVI   ERRMSG99+26,C'F'\nNM#DEBUG2 EQU  *\n*        CALL  RV1BTH,(DTERFM,ERRMSG99+25,1)\n         CALL  RV1BTH,(DTERLNG,ERRMSG99+30,2)\n         CALL  RV1BTH,(DTELRL,ERRMSG99+35,2)\n         CALL  RV1BTH,(DTEBSZ,ERRMSG99+40,2)\n         IC    R01,FLAG\n         STC   R01,WK#F\n         CALL  RV1BTH,(WK#F,ERRMSG99+45,1)\n*        TPUT  ERRMSG99,80\n* ------------------------------------------------\n*+++     BAL   R12,DCONFIG\n* ------------------------------------------------\n         TM    FLAG,X'01'                If Not Add Member.\n         BNO   @M_NEXTX\n         TM    FLAG,X'02'                No Search Strings\n         BNO   @M_NEXTX\n*        L     R01,DTERECD               If Member is No-Records\n*        LTR   R01,R01                     Goto @M_NEXTX\n*        BZ    @M_NEXTX\n         BAL   R12,DT#MAKE               Data Table Make\n*\n@M_NEXTX EQU   *\n         B     @M_FIRST                  goto Next Record\n@M_EXIT1 EQU   *                         member read terminate.\n         TM    FLAG,X'01'\n         BNO   @M_EXIT2\n         BAL   R12,DT#MAKE\n@M_EXIT2 EQU   *                         member read terminate.\n         B     @R_EXIT\n@R_EXIT  EQU   *                         read terminate .\n*        LH    R01,B#BLKSZ\n         LH    R01,PDSFDATA+X'3E'        Load BlockSize\n         L     R02,RV1DATBA\n         FREEMAIN RC,LV=(R01),A=(R02)    FreeMain Read Buffer\n         CLOSE (PDSFDATA)\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=0\n*--------- Data Area Read Buffer GETMAIN faile ---------------------\n@RA_ERR1 EQU   *\n         CLOSE (PDSFDATA)\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=1\n*-------------------------------------------------------------------\n*--- End of Process ? ( Check Last Data Access Area )\n*-------------------------------------------------------------------\nEOPCHK   EQU   *\n*        MVC   ERRMSG99,=CL80' >'\n*        CALL  RV1BTH,(CURR_TTR,ERRMSG99+10,3)\n*        CALL  RV1BTH,(B#ETTR,ERRMSG99+10,3)\n*        TPUT  ERRMSG99,80\n         CLI   RV1EXTO,C'O'              If Over DS1LSTAR Field ?\n         BE    EOPOPT1                     Yes : goto EOPOPT1\n         CLC   CURR_TTR(3),B#ETTR        If Greater than DS1LSTAR ?\n         BNL   EOPX_X                      Yes goto Exit\n         B     EOPX_OK                   no ended Resume Next!\nEOPOPT1  EQU   *\n         CLC   CURR_TTR(3),B#ETTR        If DS1LSTAR ?\n         BE    EOPLSTON                    Equal -> EOPLSTON\n         BL    EOPNOLST                    Less  -> EOPNOLST\n         OI    FLAG,X'28'                Over DS1LSTAR Filed Flag\n         B     EOPNOLST\nEOPLSTON EQU   *\n         OI    FLAG,X'10'                On DS1LSTAR Border Line\nEOPNOLST EQU   *\n         CLC   B#TCHR(7),PDSFDATA+5      If End of Allocation ?\n         BL    EOPX_X                      Yes goto Exit\n         CLC   CURR_CHR(8),PDSFDATA+5    CHR same with the last time\n         BNE   EOPNOSAM                    No resume next\n         B     EOPX_X                    Same Record Readed.\nEOPNOSAM EQU   *\n         MVC   CURR_CHR(8),PDSFDATA+5    Save Current MBBCCHHR\n         B     EOPX_OK\n*\nEOPX_X   EQU   *\n         LA    R15,8\n         BR    R14\nEOPX_OK  EQU   *\n         XR    R15,R15\n         BR    R14\n*-------------------------------------------------------------------\n* -- Convert Un-Displayed Code to Substitution Mark. --\n*\n* Un-Displayed Character is See Below manual.\n*\n*  Interactive System Productivity Facility (ISPF)\n*  Planning and Customizing\n*  OS/390 Version 1 Release 3.0\n*  Document Number SC28-1298-01\n*\n*   4.7.6 Translation Table for Edit Terminal Output Characters\n*\n*  RV1#ETOP is Same TTETO Table.\n*    Replace RV1#ETOP Csect Provided You Modified TTETO Table.\n*\n*  TTETO Table in 'ISP.SISPSAMP(ISROWNTT)'.\n*\n*-------------------------------------------------------------------\nCONVDCHR EQU   *\n         LA    R14,DTEDATA\n         LA    R15,L'DTEDATA\nCC#LOP1  EQU   *\n         XR    R01,R01\n         IC    R01,0(R14)\n         LA    R01,TTETO(R01)\n         CLI   0(R01),X'15'\n         BNE   CC#LOP1N\n         MVI   0(R14),C'.'\nCC#LOP1N EQU   *\n         LA    R14,1(R14)\n         BCT   R15,CC#LOP1\n         BR    R12\n*-------------------------------------------------------------------\n*\n*-------------------------------------------------------------------\nDT#MAKE  EQU   *\n*        TPUT  =CL20'*MAKE*',20\n         L     R15,STLASTE               Processing Table Number Set\n         LA    R15,1(R15)\n         ST    R15,STLASTE\n         L     R01,STCURRP               If not Table Over ?\n         S     R01,STCURR\n         LA    R01,DTELAST(R01)\n         L     R02,=A(STLENGTH)\n         CLR   R01,R02\n         BNH   DT#MAKE2\n         GETMAIN RC,LV=STLENGTH          Data Area Table Area\n         LTR   R15,R15\n         BNZ   @BYE_FREEMAIN1\n         USING STHEADER,R01\n         MVC   STHPOSF,STLASTE           Set First Entry Number\n         XC    STHPOSL,STHPOSL           Clear Last Entry Number\n         XC    STHNEXT,STHNEXT           Clear Next Table Address\n         L     R02,STLAST                Store Address ( Last )\n         ST    R02,STHPREV               Store Previous Addres\n         DROP  R01\n*                                          in Current Table\n         USING STHEADER,R02\n         ST    R01,STHNEXT               Store Next Address\n         DROP  R02\n*                                          in Previous Table\n         ST    R01,STLAST                Store Address ( Last )\n         ST    R01,STCURR                Store Address ( Current )\n         LA    R01,STHL(R01)             Shift Position\n         ST    R01,STCURRP               Store Address ( Position )\nDT#MAKE2 EQU   *\n*        MVC   ERRMSG99+10(8),DTENAME\n*        MVC   ERRMSG99+20(4),DTETTR\n*        CALL  RV1BTH,(DTERLNG,ERRMSG99+30,2)\n*        CALL  RV1BTH,(DTEBSZ,ERRMSG99+40,2)\n*        TPUT  ERRMSG99,80\n*\n         L     R01,STCURRP               Copy Table Entry\n         MVC   0(DTELAST,R01),DTEFIRST\n         LA    R01,DTELAST(R01)          Shift Next Entry\n         ST    R01,STCURRP               Store Address ( Position )\n*\n         L     R01,STCURR\n         USING STHEADER,R01\n         MVC   STHPOSL,STLASTE           Set Last Entry Number\n         DROP  R01\n         BR    R12\n*-------------------------------------------------------------------\n*-------- Compute Maximam Logical Record Length --------------------\n*-------- << greatest common divisor of Euclid >> ------------------\n*-------------------------------------------------------------------\n@COMPT_LEN EQU *\n         LH    R02,READ_LENGTH\n         LH    R01,DTERLNG\n@CL_LOP1 EQU   *\n         LTR   R01,R01\n         BZ    @CL_LOP1X\n         LR    R14,R02\n         SRDA  R14,32\n         DR    R14,R01\n         LR    R02,R01\n         LR    R01,R14\n         B     @CL_LOP1\n@CL_LOP1X EQU  *\n         STH   R02,DTERLNG\n*        MVC   WKMES,=CL80' > '\n*        CALL  RV1BTH,(DTERLNG,WKMES+10,2)\n*        CALL  RV1BTH,(READ_LENGTH,WKMES+20,2)\n*        TPUT  WKMES,80\n*-------------------------------------------------------------------\n*-------- Compute Maximam Read Record Length -----------------------\n*-------------------------------------------------------------------\n         TM    DTERFM,X'20'\n         BNO   @CL_SKP20\n         OI    DTERFM,X'10'              Not Fixed Record Format\n         B     @CL_SKP21\n@CL_SKP20 EQU   *\n         CLC   DTEBSZ,=H'0'\n         BE    @CL_SKP21\n         CLC   DTEBSZ,READ_LENGTH\n         BE    @CL_SKP21\n         OI    DTERFM,X'20'              Last length Unmatch\n@CL_SKP21 EQU   *\n         CLC   DTEBSZ,READ_LENGTH\n         BNL   @CL_SKP2X\n         MVC   DTEBSZ(2),READ_LENGTH     Maximam Block Length\n@CL_SKP2X EQU   *\n*-------------------------------------------------------------------\n*-------- Check Record Format --------------------------------------\n*-------------------------------------------------------------------\n* --- Recfm:V Block Size Check ---\n         L     R02,RV1DATBA\n         LH    R15,0(R02)                Load Block Size from Record\n         CH    R15,READ_LENGTH           Greater Maximam Length ?\n         BNE   @CL_V_NG\n* --- Recfm:V Record Length Check ---\n         L     R02,RV1DATBA              R02 <- Read Buffer\n         LH    R01,READ_LENGTH\n         LA    R01,0(R01,R02)            R01 <- Read Buffer Last point.\n         LA    R02,4(R02)                Shift BLKSZ Area\n@CL_LOP3 EQU   *\n         LH    R15,0(R02)                Load Record Length\n         LTR   R15,R15\n         BZ    @CL_V_NG\n         CH    R15,DTELRL                Compare Lrecl\n         BNH   @CL_SKP3\n         STH   R15,DTELRL                Store Max Lrecl\n*        STM   R00,R15,@CTREGS\n*        CALL  RV1BTH,((R02),ERRMSG99+20,2)\n*        CALL  RV1BTH,(DTELRL,ERRMSG99+30,2)\n*        TPUT  ERRMSG99,80\n*        LM    R00,R15,@CTREGS\n@CL_SKP3 EQU   *\n         LA    R14,0(R02,R15)\n         CLR   R14,R01                   If Last Pos : Next Rec Addr.\n         BE    @CL_V_OK                   equal   -> OK\n         BH    @CL_V_NG                   greater -> NG\n         LR    R02,R14\n         B     @CL_LOP3\n@CL_V_NG EQU   *\n         OI    DTERFM,X'80'              Set No-Variable Flag.\n@CL_V_OK EQU   *\n         BR    R12\n*-------------------------------------------------------------------\n*-------- Analyze Screen Update ------------------------------------\n*-------------------------------------------------------------------\n@AU_EXTENT DS  XL1\n         DS    0F\n@ANLUPDT EQU   *\n         CLC   @AU_EXTENT(1),RV1EXTC\n         BNE   @AU_SKP1\n         TM    FLAG,X'40'\n         BO    @AU_SKPX\n         TM    FLAG,X'20'\n         BNO   @AU_SKPX\n@AU_SKP1 EQU   *\n         MVC   @AU_EXTENT(1),RV1EXTC\n         TM    FLAG,X'08'\n         BO    @AU_SKP2\n         MVC   RV1PRC,=CL3'USE'\n         B     @AU_SKP3\n@AU_SKP2 EQU   *\n         MVC   RV1PRC,=CL3'UNU'\n         OI    FLAG,X'40'                Set 'Now Overed DS1LSTAR'\n         NI    FLAG,X'DF'\n*        B     @AU_SKP3\n@AU_SKP3 EQU   *\n         CALL  ISPLINK,(CONTROL,DISPLAY,LOCK),VL Panel Lock\n         CALL  ISPLINK,(ADDPOP),VL       Make Popup Panel\n         CALL  ISPLINK,(DISPLAY,PANELANL),VL Analysis Panel Show\n         CALL  ISPLINK,(REMPOP),VL       Remove Popup Panel\n@AU_SKPX EQU   *\n         BR    R12\n*-------------------------------------------------------------------\n*-------- Search String --------------------------------------------\n*-------------------------------------------------------------------\n@SRCHSTR EQU   *\n*\n         LH    R15,RV1SSTRL                      R15 <- Search String L\n         LTR   R15,R15\n         BZ    @SRCH_BP\n         BCTR  R15,0\n         L     R11,RV1DATBA                      R11 <- Read Buffer\n         XR    R10,R10\n         LH    R10,READ_LENGTH                   R10 <- Read Length\n         LTR   R10,R10\n         BZ    @SRCH_NG\n         SH    R10,RV1SSTRL                      L'Read - L'Srch Str\n         LA    R11,0(R11,R10)                    Chk Pos <- Buf + L'Chk\n         LA    R10,1(R10)                        + 1\n@SRCH_LP EQU   *\n         STC   R15,*+5\n         CLC   0(0,R11),RV1SSTRR\n         BE    @SRCH_OK\n         BCTR  R11,0\n         BCT   R10,@SRCH_LP\n         B     @SRCH_NG\n@SRCH_BP EQU   *\n         OI    FLAG,X'02'\n         BR    R12\n@SRCH_OK EQU   *\n         OI    FLAG,X'02'\n         BR    R12\n@SRCH_NG EQU   *\n         BR    R12\n*-------------------------------------------------------------------\n*-------- Dataset DCB ----------------------------------------------\n*-------------------------------------------------------------------\nDC#FLAG  DS    XL1'00000000'\n*                  o           : 0:No Add to Table, 1:Add to Table\n*\n         DS    0D\nDCONFIG  EQU   *\n         NI    DC#FLAG,X'7F'             Flag Clear\n*        LH    R08,FMTTBLP\n*        LTR   R08,R08\n         LA    R08,1\nDC#LOP1  EQU   *\n         CH    R08,FMTTBLP\n         BH    DC#LOP1X\n*\n         LR    R01,R08\n         BCTR  R01,0\n         MH    R01,FMTTBLN\n         BZ    DC#ADD\n*\n         L     R02,FMTTBLA\n         LA    R01,0(R01,R02)\n         USING DFORMATT,R01\n* --- Same DCB Member Search from DFORMATT ---\n         TM    DTERFM,X'80'              If current not Recfm:V ?\n         BO    DC#SAMEV\n         TM    DFTRFM,X'80'              If Table Recfm:V ?\n         BNO   DC#SAMEV\n         CLC   DTELRL(2),DFTVLRL\n         BNE   DC#SAMEV\n         CLC   DTEBSZ(2),DFTBLKSZ\n         BNE   DC#SAMEV\n         OI    DC#FLAG,X'80'             Ok!! Same Record Found.\n         B     DC#SAMEV\nDC#SAMEV EQU   *\n         TM    DTERFM,X'10'              If current not Recfm:F ?\n         BO    DC#SAMEF\n         TM    DFTRFM,X'40'              If Table Recfm:F ?\n         BNO   DC#SAMEF\n         CLC   DTERLNG(2),DFTFLRL\n         BNE   DC#SAMEF\n         CLC   DTEBSZ(2),DFTBLKSZ\n         BNE   DC#SAMEF\n         OI    DC#FLAG,X'80'             Ok!! Same Record Found.\n         B     DC#SAMEF\nDC#SAMEF EQU   *\n         TM    DFTRFM,X'20'              If Table Recfm:U ?\n         BNO   DC#SAMEU\n         CLC   DTEBSZ(2),DFTBLKSZ\n         BNE   DC#SAMEU\n         OI    DC#FLAG,X'80'             Ok!! Same Record Found.\n         B     DC#SAMEU\nDC#SAMEU EQU   *\n*\n         TM    DTERFM,X'80'              If Current Not Recfm=V ?\n         BO    DC#NOTV\n         TM    DFTRFM,X'80'              If Table Not Recfm=V ?\n         BNO   DC#NOTV\n         CLC   DTEBSZ(2),DFTBLKSZ        If Current BLKSZ > Table BLKSZ\n         BH    DC#NOTV\n         CLC   DTELRL(2),DFTVLRL         If Current LRECL > Table LRECL\n         BH    DC#NOTV\n         TM    FLAG,X'04'                If Member Exist ?\n         BO    DC#VEXIST\n         L     R02,DFTNOFM               Add Counter\n         LA    R02,1(R02)                 (Match of Member NoExist)\n         ST    R02,DFTNOFM\n         B     DC#VX\nDC#VEXIST EQU  *\n         L     R02,DFTEXTM               Add Counter\n         LA    R02,1(R02)                 (Match of Member Exist)\n         ST    R02,DFTEXTM\n         B     DC#VX\nDC#NOTV  EQU   *\n         TM    FLAG,X'04'                If Member Exist ?\n         BO    DC#VEXIST2\n         L     R02,DFTNOFU               Add Counter\n         LA    R02,1(R02)                 (UnMatch of Member NoExist)\n         ST    R02,DFTNOFU\n         B     DC#VX\nDC#VEXIST2 EQU  *\n         L     R02,DFTEXTU               Add Counter\n         LA    R02,1(R02)                 (UnMatch of Member Exist)\n         ST    R02,DFTEXTU\n         B     DC#VX\nDC#VX    EQU   *\nDC#ADD   EQU   *\n*\n         DROP  R01\n         LA    R08,1(R08)                Table count up\n         B     DC#LOP1\nDC#LOP1X EQU   *\n         BR    R12\n*-------------------------------------------------------------------\n*-------- convert mbcchhr to ttr -----------------------------------\n*-------------------------------------------------------------------\n         DS    0F\n@CNVTTR  EQU   *\n         STM   R00,R15,@CTREGS\n         L     R01,PDSFDATA+44           Load DEB Address\n         N     R01,=X'00FFFFFF'          Clear IFLGS Area\n         LA    R02,PDSFDATA+5            MBCCHHR Address\n         XR    R15,R15\n         IC    R15,0(R02)\n         LA    R15,1(R15)                Get Current Extents\n         STC   R15,RV1EXTC               Update RV1EXTC Area\n         L     R14,CVTPTR\n         USING CVTMAP,R14\n         L     R15,CVTPRLTV\n         DROP  R14\n         BALR  R14,R15                   call CVTPRLTV\n         ST    R00,CURR_TTR              Save TTR\n         LM    R00,R15,@CTREGS\n         BR    R14\n@CNVCHR  EQU   *\n         STM   R03,R15,REGS\n         L     R11,CVTPTR\n         USING CVTMAP,R11\n         L     R15,CVTPCNVT\n         DROP  R11\n         BALR  R14,R15\n         LM    R03,R15,REGS\n         BR    R14\n*-------------------------------------------------------------------\n*-------- i/o error routine ( po ) ---------------------------------\n*-------------------------------------------------------------------\nIOERR_P  EQU   *\n         SYNADAF ACSMETH=BPAM\n         STM   R01,R15,REGS\n         LR    R12,R01\n         LA    R01,91(R12)\n         MVC   ERRMSG04+23(15),0(R01)\n         CALL  RV1BTH,(CURR_TTR,ERRMSG04+16,3)\n         LA    R01,8(R12)\n         CALL  RV1BTH,((R01),ERRMSG04+53,4)\n         LA    R01,12(R12)\n         CALL  RV1BTH,((R01),ERRMSG04+44,2)\n         TPUT  ERRMSG04,L'ERRMSG04\n@IOERR_X EQU   *\n         LM    R01,R15,REGS\n         SYNADRLS\n         B     @R_EXIT\nPDSFDATA DCB   DSORG=PO,MACRF=(R),DDNAME=@@@@,                         *\n               SYNAD=IOERR_P,EODAD=@M_NEXT,RECFM=U,BLKSIZE=32760\n*\n         DS    0F\n* --- SAVE AREA ---\nSAVEAREA DS    18F                       Reg. Savearea\n* --- Show Data Index Area Control ---\nSTFIRST  DS    F                         Index Area Table First Entry A\nSTLAST   DS    F                         Index Area Table Last Entry A\nSTCURR   DS    F                         Index Area Table Current Ent A\nSTCURRP  DS    F                         Index Area Table Current Pos A\nSTLASTE  DS    F                         Index Area Table Last Entry Nu\nSTPOSIT  DS    F                         Current Display Index\nSTREADNO DS    F                         Current Data Read Record No.\nSTLENGTH EQU   4096                      Index Area Table Length\n* -----------------\nRV1SAREAN DC   CL8'RV1SAREA'             Show Panel Dynamic Area Name\nRV1SAREAT DC   CL8'CHAR    '             Show Panel Dynamic Area Name\nRV1SAREAA DS   A(0) <- RV1SAREA          SHow Panel Dynamic Area Name\nRV1SAREAL DS   F'8'                      Show Panel Dynamic Area Name\n* -----------------\nSHOWFLAG  DS   XL1\n*                 'o.......' : Opened.\n* -----------------\nREV020    DC   CL8'REV020'\n* --- Work Area ---\nCURR_CHR DS    XL8\n* --- Work Area ---\nWK#F     DS    F\nWK#F1    DS    F\nWK#F2    DS    F\nWKMES    DC    CL80'> '\n* --- Register Save ( work ) area ---\nREGS     DS    18F                               WORK SAVEAREA\n@CTREGS  DS    18F                               WORK SAVEAREA\n         DS    0D\n* --- Panel RC Packed Area ---\nPK_AREA  DC    PL8'0'\nUPK_AREA DC    CL16' '\n*                                1\n*                    6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1\nEDMASK   DC    XL16'40202020202020202020202020202120'\nEDWORK   DS    XL16\n         DS    0F\n* --- Data Read Length ---\nREAD_LENGTH DS H                         Current Readed Data Length\n* --- Current Process TTR ---\n         DS    0F\nCURR_TTR DS    XL4                       work ttr\nERRMSG04 DC    CL80'< I/O Error TTR:@@@@@@ @@@@@@@@@@@@@@@ LENG:@@@@ BU*\n               F:@@@@@@@@'\nERRMSG99 DC    CL80'< '\n*-------------------------------------------------------------------\n         COPY  RV1#ETOP\n         COPY  RV1#ISPC\n*-------------------------------------------------------------------\n         DS    0D\n*--- Show Data Index Area Header -----------------------------------\n         LTORG\nSTHEADER DSECT\nSTHPOSF  DS    F                         Index Table First Entry Num\nSTHPOSL  DS    F                         Index Table Last Entry Num\nSTHNEXT  DS    F                         Next Data Table Address\nSTHPREV  DS    F                         Previous Data Table Address\nSTHL     EQU   *-STHEADER                Length\nSTE      DSECT\nSTETTR   DS    XL2                       TTR\nSTELENG  DS    XL2                       phisical record length\nSTERCDV  DS    XL2                       logical record length\n         DSECT\n*--- Revive Common Dsect -------------------------------------------\n         COPY RV1#COMM\n*-------------------------------------------------------------------\n         RV1#CMDA SECTTYP=DSECT\n*-------------------------------------------------------------------\n*-------------------------------------------------------------------\nR00      EQU   00\nR01      EQU   01\nR02      EQU   02\nR03      EQU   03\nR04      EQU   04\nR05      EQU   05\nR06      EQU   06\nR07      EQU   07\nR08      EQU   08\nR09      EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   RV1SHOW\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#TC": {"ttr": 4097, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x983o\\x01\\x00\\x06\\x7f\\x10$\\x00d\\x00\\x90\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1998-12-02T00:00:00", "modifydate": "2000-03-07T10:24:00", "lines": 100, "newlines": 144, "modlines": 0, "user": "KIMU"}, "text": "         START\n* -----------------------------------------------------------------\n         DC   C'<< Revive ! : Track calc >> ('\n         COPY RV1#HDR\n         PRINT NOGEN\n* RC\n*    0 : OK ( RETURN BLOCK# -> R00 )\n*    4 : Block Size Over .\n*    8 : Block Size Over .\n*   12 : UCB Error\n*   16 : Volume Serial Not Found .\n*\n* --- Start of Process --------------------------------------------\nRV1TC    CSECT\n         SAVE  (14,12),T,*\n         BALR  R03,0\n         USING *,R03                     BASE REG. R03\n         ST    R13,SAVEAREA+4            SAVE A(OLD SAVEAREA)\n         LR    R12,R13\n         LA    R13,SAVEAREA\n         ST    R13,8(R12)                SAVE A(NEW SAVEAREA)\n* --- Parameter ---\n         LM    R04,R06,0(R01)\n         MVC   VOLSER(6),0(R04)          Volser\n         MVC   @DD(2),0(R05)             Block Size\n         ST    R06,A#RESULT              Result Area\n*\n         XC    UCBWORK,UCBWORK           Clear work area\n         UCBSCAN COPY,WORKAREA=UCBWORK,UCBAREA=UCBAREA,                *\n               VOLSER=VOLSER\n         LTR   R15,R15                   If Error ?\n         BNZ   END_SCAN\n* ---\n         LA    R10,UCBAREA\n         TRKCALC FUNCTN=TRKCAP,UCB=(R10),RKDD=RKDD,                    *\n                REGSAVE=YES\n         LTR   R15,R15\n         BZ    UCB_SAVE\n* --- TRKCALC Error\n         ST    R15,RC#\n         CALL  RV1BTH,(RC#,ERRMSG01+18,4)\n         TPUT  ERRMSG01,L'ERRMSG01\n         L     R15,RC#\n         B     @BYE\nUCB_SAVE EQU   *\n         L     R01,A#RESULT\n         ST    R00,0(R01)\n* --- Bye\n@BYE     EQU   *\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=(15)\n* --- UCBSCAN Error ---\nEND_SCAN EQU   *\n         LA    R15,16\n         B     @BYE\n* --- Define ---\n*\n         DS    0F\nSAVEAREA DS    18F                       SA\nPARMA    DS    0F                        Parameter Area\nA#RESULT DS    F                         Result Area\n*\nVOLSER   DS    CL6\nRKDD     DS    0F\n@R       DC    X'01'\n@K       DC    X'00'\n@DD      DS    H\n*\nRC#      DS    F\n*\n         DS    0D\nUCBWORK  DS    CL100\nDEVCLASS DS    CL1\nUCBPTR   DC    A(UCBAREA)\nUCBAREA  DS    XL48\n*                   0....+....1....+....2....+....3....+....4....+....5*\n               ....+....6....+....7....+....8\nERRMSG01 DC    CL80'> TRCCALC ERROR : @@@@@@@@'\n*\n         LTORG\n         DSECT\n         IEFUCBOB LIST=YES\n         CVT   DSECT=YES,LIST=YES\nR00      EQU   00\nR01      EQU   01\nR02      EQU   02\nR03      EQU   03\nR04      EQU   04\nR05      EQU   05\nR06      EQU   06\nR07      EQU   07\nR08      EQU   08\nR09      EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   RV1TC\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#TRC": {"ttr": 4100, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00{\\x00{\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 123, "newlines": 123, "modlines": 0, "user": "KIMU"}, "text": "         START\n* -----------------------------------------------------------------\n         DC   C'<< Revive ! Process Trace >> ('\n         COPY  RV1#HDR\n         PRINT   GEN\n*-------------------------------------------------------------------\nRV1TRC   CSECT\n         SAVE  (14,12),T,*\n         BALR  R03,0\n         USING *,R03,R04                   Base Reg. R03,R04\n         LA    R04,2048(R03)               2 Base Reg\n         LA    R04,2048(R04)\n         ST    R13,SAVEAREA+4              Save A(OLD SaveArea)\n         LR    R12,R13\n         LA    R13,SAVEAREA\n         ST    R13,8(R12)                  Save A(NEW SaveArea)\n*-------------------------------------------------------------------\n         LR    R08,R01                   save parm\n         LM    R06,R07,0(R08)\n         USING REVIVED,R06               comm dsect\n         CLC   REVTRC,=CL3'ON '          if trace option not= on\n         BNE   QUIT                        goto quit\n         MVC   WKMES+10(8),RV1MARK\n         LA    R01,A#TRCF\n         CALL  RV1BTH,((R01),WKMES+20,4)\n*        TPUT  WKMES,80\n         MVC   MSGID(8),0(R07)           msgid\n*-------------------------------------------------------------------\n         CALL  ISPLINK,(VDEFINE,TRCSMSGN,TRCSMSG,CHAR,TRCSMSGL),VL\n         CALL  ISPLINK,(VDEFINE,TRCLMSGN,TRCLMSG,CHAR,TRCLMSGL),VL\n*-------------------------------------------------------------------\n         LA    R08,8(R08)                shift parm\n         LA    R09,MSGVAR\n         L     R10,0(R08)\n         CALL  ISPLINK,(VREPLACE,(R09),MSGLEN,(R10)),VL\n         TM    0(R08),X'80'\n         BO    TRCGETM\n         LA    R08,4(R08)\n         LA    R09,L'MSG01(R09)\nTRCLOP1  EQU   *\n         LA    R10,0(R08)\n         L     R10,0(R10)\n         CALL  RV1BTH,((R10),MSGCHAR,4)\n         CALL  ISPLINK,(VREPLACE,(R09),MSGLEN,MSGCHAR),VL\n         TM    0(R08),X'80'\n         BO    TRCGETM\n         LA    R08,4(R08)\n         LA    R09,L'MSG01(R09)\n         CLC   0(R09),=XL8'FFFFFFFFFFFFFFFF'\n         BE    END_OF_MSGNO\n         B     TRCLOP1\nTRCGETM  EQU   *\n         CALL  ISPLINK,(GETMSG,MSGID,TRCSMSGN,TRCLMSGN),VL\n*        TPUT  =CL20'PUT',20\n         OPEN  (TRCF,(OUTPUT))\n*        L     R11,A#TRCF\n*        PUT   (R11),TRCLMSG\n         PUT   TRCF,TRCLMSG\n         CLOSE (TRCF)\n*        TPUT  TRCLMSG,80\nQUIT     EQU   *\n*        TPUT  =CL20'TRC QUIT',20\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=0\nEND_OF_MSGNO EQU *\n         TPUT  =CL80'NO MORE ENOUGH MSGNO.',80\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=0\n*-------------------------------------------------------------------\nTRCF     DCB   DSORG=PS,MACRF=(PM),DDNAME=REVTRC,                      *\n               RECFM=F,LRECL=80,BLKSIZE=80\n*-------------------------------------------------------------------\nSAVEAREA DS    18F\nMSGID    DS    CL8\nMSGCHAR  DS    CL8\nWK       DC    CL8' '\nWK#F     DS    F\nWK2      DC    CL8' '\nMSGVAR   DS    0F\nMSG01    DC    CL8'M1'\nMSG02    DC    CL8'M2'\nMSG03    DC    CL8'M3'\nMSG04    DC    CL8'M4'\nMSG05    DC    CL8'M5'\nMSG06    DC    CL8'M6'\nMSG07    DC    CL8'M7'\nMSG08    DC    CL8'M8'\nMSG09    DC    CL8'M9'\nMSG10    DC    CL8'M10'\n         DC    XL8'FFFFFFFFFFFFFFFF'\nMSG_END  EQU   *\nMSGLEN   DC    F'8'\nTRCSMSG  DS    CL20\nTRCSMSGN DC    CL8'TRCSMSG '\nTRCSMSGL DC    F'20'\nTRCLMSG  DS    CL80\nTRCLMSGN DC    CL8'TRCLMSG '\nTRCLMSGL DC    F'80'\nWKMES    DC    CL80' '\n*-------------------------------------------------------------------\n         LTORG\n         COPY  RV1#ISPC\n         DSECT\n         COPY  RV1#COMM\n*-------------------------------------------------------------------\n* ------ REVTRC --------\nR00      EQU   00\nR01      EQU   01\nR02      EQU   02\nR03      EQU   03\nR04      EQU   04\nR05      EQU   05\nR06      EQU   06\nR07      EQU   07\nR08      EQU   08\nR09      EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   RV1TRC\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#TRCC": {"ttr": 4103, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x16\\x00\\x16\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "KIMU"}, "text": "         MACRO\n&NAME    RV1#TRCC &BASE=,&COMM=\n* --- RV1TRC (CSECT information start) ---\n         COPY  RV1#CNST\n         AIF   ('&TRCMODE' EQ 'NONE').TRCNONE\n         LCLC  &REVTRC\n&REVTRC  SETC  'RVT'.'&SYSNDX'\n         CLC   REVTRC,=CL3'ON '\n         BNE   &REVTRC.Q\n         B     &REVTRC.S\n&REVTRC.C DC   CL8'&SYSECT'              csect name\n&REVTRC.M DC   CL8'REVT001'              message id\n&REVTRC.W DS   F                         work\n.*EVTRC.D DS   F                         common data area\n&REVTRC.S EQU  *\n         ST    &BASE,&REVTRC.W           Save Base Reg.\n.*       ST    &COMM,&REVTRC.D           Save common data area.\n         CALL  RV1TRC,((&COMM.),&REVTRC.M,&REVTRC.C,&REVTRC.W),VL\n&REVTRC.Q EQU *\n* --- RV1TRC (CSECT information end) ---\n.TRCNONE MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RV1#TRCG": {"ttr": 4105, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x0e\\x00\\x0e\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "KIMU"}, "text": "         MACRO\n&NAME    RV1#TRCG &PRM,&VLVAR\n         COPY  RV1#CNST\n         AIF   ('&TRCMODE' EQ 'NONE').TRCNONE\n* --- RV1TRC ---\n         LCLC  &REVTRC\n&REVTRC  SETC  'RVT'.'&SYSNDX'\n         CLC   REVTRC,=CL3'ON '\n         BNE   &REVTRC.Q\n         CALL  RV1TRC,&PRM.,&VLVAR\n&REVTRC.Q EQU *\n* --- RV1TRC ---\n.TRCNONE MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RV1#TRCR": {"ttr": 4107, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x03\\x00\\x00\\x00\\x00\\x99'O\\x00\\x99'O\\x13@\\x00\\x12\\x00\\x12\\x00\\x00\\xd2\\xc9\\xd4\\xe4@@@@@@\"", "ispf": {"version": "03.00", "flags": 0, "createdate": "1999-10-01T00:00:00", "modifydate": "1999-10-01T13:40:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "KIMU"}, "text": "         MACRO\n&NAME    RV1#TRCR &COMM=\n         COPY  RV1#CNST\n         AIF   ('&TRCMODE' EQ 'NONE').TRCNONE\n* --- RV1TRC (CSECT information start) ---\n         LCLC  &REVTRC\n&REVTRC  SETC  'RVT'.'&SYSNDX'\n         CLC   REVTRC,=CL3'ON '\n         BNE   &REVTRC.Q\n         B     &REVTRC.S\n&REVTRC.C DC   CL8'&SYSECT'              csect name\n&REVTRC.M DC   CL8'REVT002'              message id\n&REVTRC.S EQU  *\n         CALL  RV1TRC,((&COMM.),&REVTRC.M,&REVTRC.C),VL\n&REVTRC.Q EQU *\n* --- RV1TRC (CSECT information end) ---\n.TRCNONE MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT442/FILE442.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT442", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}