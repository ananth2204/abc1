{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013404000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2233868, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 15, "INMDSNAM": "CBT.V500.FILE908.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2233868, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2233868, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE908.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00$\\x03'", "DS1TRBAL": "b'\\xbc\\xba'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x08\\xe6\\x00\\r\\x08\\xe9\\x00\\x04\\x00%'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x04[\\x00'\\x01\\x155o\\x01\\x155o\\x16\\x16\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf1@@@\"", "ispf": {"version": "04.91", "flags": 0, "createdate": "2015-12-22T00:00:00", "modifydate": "2015-12-22T16:16:27", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-491"}, "text": "REGULAR CBT TAPE - VERSION 491    FILE:  908\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT491.FILE908\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 54 MEMBERS COUNTED; CUMULATIVE SIZE IS 20,618 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/22/15    16:16:27    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE01": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00)\\x01\\x14\\x06O\\x01\\x14\\x06O\\x18X\\x006\\x006\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-03-05T00:00:00", "modifydate": "2014-03-05T18:58:29", "lines": 54, "newlines": 54, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  CBT contribution: ISPF Client Server Tool Box\nFrom:     James A Halley <jhalley2@csc.com>\nDate:     3/5/2014 3:33 PM\nTo:       sbgolob@cbttape.org\n\nHello Sam,\n\nI've been using CBT materials for much of my nearly 40 years in\nmainframe IT.  Thank you.\n\nMy ISPF Client Server Toolbox was written to make it easier for\npeople to use features of IBM ISPF Client Server.\n\nThe attached ZIP file contains an XMIT file that can be uploaded\nand received into a PDS or PDS-E.  (This pds was already made from\nthe zip file and the XMIT file.   SG)\n\nThe one PDS will contain clists, REXX execs, ISPF panels and\nmessages.  It contains an instructional MS document that can be\ndownloaded and tailored.  It contains a batch procedure, sample\nJCL and a REXX exec that is meant to run as a purely batch job.\nOne member is a ZIP of the current version of the ISPF\nWorkstation Agent install file that is fully compatible with\nWindows 7 and is supplied for those on a z/OS prior to 2.1 or who\ndo not have the relevant APAR that provides it.\n\nThe available functions are described in the help member -\nDNLDHLP1.  The $README member describes how to deploy the other\nmembers and how to \"test drive\" the interactive components\nwithout moving any of the components to other libraries ...\nSYSPROC, ISPPLIB, ISPMLIB, etc.\n\nThis toolbox has become very popular and its use is required in\nsome departments of my organization.  It allows doing things like\ndisplaying reports on SDSF in Microsoft Word, Notepad and WordPad\nand emailing reports on SDSF with Microsoft Outlook.  It allows\ndownloading reports from SDSF, DSLIST, etc. to one of four paths\nmenu selectable paths in either interactive or batch mode.\n\nA relatively small amount of code was \"borrowed\" from Lionel\nDyck's SDSFPAGE and acknowledged in the comments.\n\nGilbert Saint-flour provided advice and encouragement when I\nfirst started on this endeavor several years ago.\n\nThe XMIT and its contents has been tested by Bruce Koss of Wells\nFargo.  Bruce has been a recent presenter at Share.\n\nAn alternate and more permanent email address for me is:\njimhalley627@gmail.com\n\nThanks!\nJim Halley\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE02": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00H\\x01\\x14\\x10\\x7f\\x01\\x14\\x10\\x7f\\x11V\\x00+\\x00+\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-04-17T00:00:00", "modifydate": "2014-04-17T11:56:48", "lines": 43, "newlines": 43, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  CBT contribution: ISPF Client Server Tool Box\nFrom:     James A Halley <jhalley2@csc.com>\nDate:     4/16/2014 11:34 AM\nTo:       sbgolob@cbttape.org\n\nHi Sam,\n\nI did not plan or want to make significant modifications to my\nISPF Client Server Tool Box so soon but a dramatic increase in\nthe number of people using it and feedback from them led me to\nsearch for ways to make it easier to use.\n\nTo address confusion about when to use the edit macro and when to\nuse the regular command version of some functions (e.g. ENOTEPAD\nvs. NOTEPAD), I implemented a technique I call \"routing dialogs\"\nthat allow five frequently used commands to appear to function as\nboth line commands on DSLIST and as edit macros in Edit and View\nsessions.  This change is transparent in that users can continue\nto use the separate edit macro names and regular command names if\nthey prefer or if they do not hear about this change.\n\nThe above change allowed me to implement commands DOWNLOAD and\nUPLOAD which I had wanted to do from the beginnning.  DOWNLOAD\nand UPLOAD, being commonly used terms, seem to be easier for\nusers to remember than DNLD and UPLD which continue to function\nas before.\n\nBesides there being a number of new modules, some of the existing\nmodules had to be renamed and minor logic changes made to them.\n\nThe $README member and the zipped instructional Microsoft Word\ndocument in member WORDDOC1 have been revised to reflect these\nand other changes.\n\nI was hoping I am finally \"done\" with this Toolbox but there are\nstill some improvements that I hope to eventually implement.\n\nMy alternate and more permanent email address continues to be\njimhalley627@gmail.com\n\nBest regards,\nJim Halley\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE03": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00P\\x01\\x15\\x14/\\x01\\x15\\x14/\\x18#\\x004\\x004\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-05-22T00:00:00", "modifydate": "2015-05-22T18:23:50", "lines": 52, "newlines": 52, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  My \"final\" update to File 908 - ISPF Client Server Toolbox\nFrom:     James A Halley <jhalley2@csc.com>\nDate:     5/22/2015 9:42 AM\nTo:       sbgolob@cbttape.org\n\nHello Sam,\n\nI have just one more update to my ISPF Client Server Toolbox\nwhich will likely be the final one.\n\nThere are a number of small changes and some signficant changes.\nPerformance of the edit macros used to download files and reports\nfrom edit sessions including from SDSF has been dramatically\nimproved by using ISREDIT REPLACE logic instead of REXX stem\nlogic.  Stem logic continues to be used when the edit macros are\ninvoked in CA Librarian ELIPS edit sessions since, although ELIPS\n\"looks\" like ISPF Edit, it is not compatible with ISREDIT\nREPLACE.  Occasional abends of these edit macros have been\neliminated.\n\nThe new OPENWITH command functions as a line command on DSLIST\nand as an edit macro in edit and view sessions to download a file\nto a PC workstation, open a Windows Explorer window and prompt\nthe user to open the file with the Windows program of his choice.\n\nThe OUTLOOK command has been changed to a more generic sounding\nand easier to remember \"EMAIL\" and logic has been restored to\nissue an error message if a user supplies a PC Workstation file\nname that is not compatible with Microsoft Windows.\n\nThe Microsoft Word instructional document (member WORDDOC1) has\nbeen extensively revised as have the $README and the help panel.\n\nSo ... I'm finally satisfied with the way this toolbox works.\nOK, I'll never be totally satisfied with it but it is rewarding\nto see 100+ people at my organization relying on these tools\ndaily.\n\nMy \"permanent\" email address continues to be jimhalley627@gmail.com\n\nI left the \"DATE\", \"NOTE\", etc. members you created previously in\nthe PDS and assume that you will want to modify or replace them.\n\nPlease let me know if you find any issues with the attached file\nand I will make corrections as soon as possible.\n\nThank you again for keeping the CBT going!\n\nRegards,\n\nJim Halley\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE04": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x01\\x15%O\\x01\\x15%O\\x01F\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-09-11T00:00:00", "modifydate": "2015-09-11T01:46:04", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Update to File # 908\nFrom:     James A Halley <jimhalley627@gmail.com>\n\nDate:     9/10/2015 10:53 AM\nTo:       sbgolob@cbttape.org\n\nHello Sam,\n\nAttached is another update to File # 908 ISPF Client Server Local\nDialogs and Facilities.  The changes are described under \"Changes\nin Release 4\" in the $README member.\n\nOther than including a couple of features that I had\ninadvertently left out of the previous release, the main change\nin Release 4 is simplification and dramatically improved\nperformance of the edit macros when invoked from SDSF and ISPF\nEdit/View - especially noticeable when downloading reports larger\nthan 50,000 lines from SDSF.\n\nAs before,  I tried to conform to your naming convention, named\nthe ZIP file contents FILE908.XMI and included the PDS members\nthat you created previously.\n\nMy alternate and more permanent email address continues to be\njimhalley627@gmail.com\n\nRegards,\nJim Halley\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE05": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x16\\x01\\x155O\\x01\\x155o\\x16\\x15\\x00\\x1d\\x00!\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2015-12-20T00:00:00", "modifydate": "2015-12-22T16:15:16", "lines": 29, "newlines": 33, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Update to FILE908 - ISPF Client Server Toolbox\nFrom:     James A Halley <jimhalley627@gmail.com>\nDate:     12/4/2015 1:07 PM\nTo:       sbgolob@cbttape.org\n\nHi Sam,\n\nI hope everything is well with you and yours.\n\nThis email is being sent from my new CSGov email address since\nCSC has been split into separate companies and I am in one that\nis called CSRA - at least that is what it is called this week!\n\nThe attached update to FILE908 has important corrections.  When I\nfinally tested on an LPAR on which the TSO prefix is the same as\nthe User ID, I found that modules invoked by the DOWNLOAD, DNLD\nand EMAIL commands did not pass the temporary file names that\nwere expected by other modules when the three commands were used\non the command lines of ISPF Edit and View sessions.  The three\ncommands did, however, work properly when used as line commands\non DSLIST.\n\nI would appreciate if you would apply this update to the CBT and\nI will look for it on the UPDATES page.\n\nThank you again, Sam, for all your good work.\n\nJim Halley\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$README": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\\\\\x005\\x01\\x12!_\\x01\\x153\\x8f\\x104\\x01\\xb8\\x00\\x01\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.92", "flags": 0, "createdate": "2012-08-02T00:00:00", "modifydate": "2015-12-04T10:34:35", "lines": 440, "newlines": 1, "modlines": 0, "user": "TTZC28"}, "text": "                    ISPF Client Server Toolbox Release 4 - Corrections\n\n This library contains components that facilitate viewing and emailing mainframe\n files and reports with Microsoft programs (Notepad, WordPad, Word, Outlook) and\n moving mainframe files and reports quickly between mainframe systems and\n folders on PC Workstations and network drives at speeds typically twenty times\n faster than provided by IND$FILE file transfer. These tools use the services\n provided by and supplement the features of standard ISPF Client Server.\n\n These tools are intended for non-productional use and may not be suitable for\n or function in your environment.  Communication between a mainframe ISPF\n session and an ISPF Workstation Agent through an IP connection is required but\n can be prevented by network (e.g. firewall and communication port) settings.\n Contact a member of your network support team if a connection between your ISPF\n session and a Workstation Agent cannot be established.\n\n Those using thick email products other than Microsoft Outlook may be able to\n adapt components to work with their email products.\n\n This Toolbox was designed for and has been successfully used by people with a\n wide range of technical knowledge ... from experienced system and application\n programmers to people in clerical roles who are just beginning to learn how to\n use ISPF.\n\n Changes in Corrections to Release 4.\n   The EDNLD and EEMAIL modules have been modified to pass the correct\n   temporary file names to CDNLD and CEMAIL in environments where the USERID is\n   used as the TSO PREFIX and default high level qualifier for the names of\n   temporary files.  This issue caused the DOWNLOAD, DNLD and EMAIL commands to\n   fail when used as edit macros in Edit and View sessions.\n\n Changes in \"Release 4\":\n\n   The EMAIL dialog replaces the OUTLOOK dialog for the purpose of having a more\n   meaningful command name that is not tied to a particular email product.\n\n   The new OPENWITH dialog downloads a file to the same working directory used\n   by the EMAIL dialog, opens an Explorer window containing the downloaded file,\n   and prompts the user to right-click the file and to use \"Open with\" to open\n   the file with the program of his choice.  OPENWITH can be also be used\n   instead of the EMAIL dialog and allows the user to change the file name,\n   right click and then \"Send to Main Recipient\".  OPENWITH can be used both\n   as a line command on DSLIST and as an edit macro on the command line of a\n   View or Edit session.\n\n   Editing for invalid characters in Microsoft Windows file names has been\n   restored to the EMAIL (formerly OUTLOOK) dialog.  The version of the FILEXFER\n   REXX that can download z/OS Unix files is included.  These features were\n   inadvertently omitted from the previous release.\n\n   The edit macros have been simplified and no longer use logic lifted directly\n   from Lional Dyck's SDSFPAGE.  Occasional abends when there are no carriage\n   control characters or no characters that can pass as carriage control have\n   been eliminated. ISREDIT REPLACE is now used to populate the temporary data\n   set for ISPF Edit/View and SDSF Edit which cuts execution time by an average\n   of 50%.  Slower stem logic is still used when the macros are invoked from CA\n   Librarian ELIPS due to CA Librarian ELIPS incompatibility with ISREDIT\n   REPLACE.  If you have other non-standard applications that have an Edit-like\n   feature that is not compatible with ISREDIT REPLACE, try adding their panel\n   names or prefixes to the edit macro logic used to identify ELIPS.\n\n Changes in \"Release 3\":\n\n  \"Routing dialogs\" have been introduced to allow six dialog names to be used\n   both as line commands on DSLIST and as edit macros in View and Edit sessions.\n\n   The WORD dialog now alerts a user that a document previously downloaded into\n   Microsoft Word may still be open and preventing the download of another\n   document into Microsoft Word.\n\n   The introduction of the routing dialogs made it feasible to introduce two new\n   commands.  DOWNLOAD and UPLOAD are essentially clones of DNLD and UPLD and\n   may be easier for some users to remember.\n\n   Some dialog, panel and message members have been renamed with accompanying\n   modifications to panel, REXX and CLIST logic.\n\n   There have been numerous documentation improvements including much needed\n   corrections.\n\n The Microsoft Word document contained in member WORDDOC1 is designed to\n function as an instructional document for end users.  The first page is useful\n as a Quick Reference.  Reviewing this Word document before proceeding further\n with implementation is recommended.  Instructions for downloading and unzipping\n WORDDOC1 are provided towards the end of this member.\n\n -------------------------------------------------------------------------------\n\n The IBM ISPF Workstation Agent\n\n The ISPF Workstation Agent \"Windows 2000/NT\" install executable prior to z/OS\n 2.1 is not compatible with Microsoft Windows 7 unless z/OS APAR OA39571 has\n been implemented:  http://www-01.ibm.com/support/docview.wss?uid=isg1OA39571\n\n To use ISPF Client Server with Windows 7 if your z/OS version is below 2.1 and\n APAR OA39571 has not been applied:\n\n   *  Upgrade z/OS to Version 2.1\n   *  or Apply APAR OA39571\n   *  or obtain the Windows 7 compatible install executable for the Workstation\n      Agent from IBM.\n   *  or copy the five critical WSA components from a workstation running\n      Windows XP or below.  (The least acceptable option.)\n   *  or download member ISPFINST from this library and unzip the content which\n      is the Workstation Agent install file that came with APAR OA39571.\n\n Constraints of copying the five WSA components from a WinXP to a Win7 PC:\n\n   *  Older versons of the WSA sometimes cannot find or use Windows Socket\n      Library components even when the path is manually entered in the WSA \"Set\n      Winsock Path\" dialog.\n   *  The older WSA had issues that were resolved by APAR 0A39571\n      including abending after tranferring 1.5 GB of a large text file.\n\n The WSA supplied by APAR OA39571 has been successfully tested on a z/OS 1.19\n system on which APAR 0A39571 has not implemented.\n\n -------------------------------------------------------------------------------\n\n An overview of the contents of this library:\n\n This library contains a variety of module types: CLIST, REXX; ISPF panel,\n skeleton and message; MVS procedure and JCL, Microsoft Word, zipped Microsoft\n Windows executable.  There is no particular reason why a few of the dialogs are\n CLIST instead of REXX.\n\n This $README member describes the type and purpose of each member in this\n library to assist in moving members to libraries of the appropriate types.\n\n The three \"MVS batch\" batch components must be renamed when moved to the\n libraries from which they will be used.  Components associated with ISPF\n dialogs can be used as named.\n\n -------------------------------------------------------------------------------\n\n How to \"test drive\" the online components from this library.\n\n  Normally the online components would be moved to appropriate libraries before\n  use.  To facilitate trying out the components, all library allocation (LIBDEF)\n  statements currently point to the same library name -\n  'KCTSHARE.TECH.ISPFCS.DISTLIB' - regardless of module type.\n\n  1) Install and configure the ISPF Workstation Agent (WSA) per the instructions\n     in member DOWNHLP1 or after downloading member WIN7ZIP per instructions\n     below.\n\n  2) Configure the mainframe ISPF session per the instructions in member\n     DOWNHLP1.\n\n  3) Change all occurances of 'KCTSHARE.TECH.ISPFCS.DISTLIB' in this library to\n     the name of the library containing this $README and all other components:\n     The members to modify are:  ALLOC CDNLD CEMAIL MFEDIT UPLD UPLOAD\n\n     Henceforth, \"library_name\" will be used to refer to the name of the library\n     containing this $README and the other components.\n\n  4) Exit to the TSO READY prompt and type (or copy and paste) the following:\n     EX 'library_name(ALLOC)'\n     Note:  The CONCATX REXX executed by the above ALLOC is included in this\n            library to faciliate allocating this library to SYSPROC.\n\n  5) Use the CLISTs and Edit Macros documented below.\n -------------------------------------------------------------------------------\n\n Workstation Agent (WSA):\n\n  ISPFINST  - DO NOT EDIT this member!  It is a ZIP achive of the Workstation\n               Agent (WSA) install file (ISPFINST.EXE) provided by APAR OA39571.\n\n               Use member ISPFINST only if your environment is at z/OS version\n               1.19 or below and APAR OA39571 has not been implemented.\n\n               If you use ISPFINST, download it in binary mode as ISPFINST.ZIP\n               to a PC workstation.  Unzip the contents and then run\n               ISPFINST.EXE to install the Workstation Agent.\n\n               Hint:  To make future WSA upgrades possible via the update\n               feature of ISPF 3.7.1, install the WSA in a folder whose name and\n               path do not include spaces and which has a total path/folder name\n               length of 60 characters or less.\n\n\n Mainframe components:\n\n  CLIST and REXX:\n\n   The following seven \"routing dialogs\" function as both line commands on\n   DSLIST and as edit macros in Edit and View sessions:\n\n   DNLD     - Command that determines if the user is in an EDIT/VIEW session.\n               If yes, EDNLD is invoked.  If no, CDNLD is invoked\n   DOWNLOAD - A clone of DNLD provided for those who prefer using a meaningful\n               word as a command.\n   EMAIL    - Command that determines if the user is in an EDIT/VIEW session.\n               If yes, EEMAIL is invoked.  If no, CEMAIL is invoked\n   NOTEPAD  - Command that determines if the user is in an EDIT/VIEW session.\n               If yes, ENOTEPAD is invoked.  If no, CNOTEPAD is invoked\n   OPENWITH - Command that determines if the user is in an EDIT/VIEW session.\n               If yes, EOPENWTH is invoked.  If no, COPENWTH is invoked\n   WORD     - Command that determines if the user is in an EDIT/VIEW session.\n               If yes, EWORD is invoked.  If no, CWORD is invoked\n   WORDPAD  - Command that determines if the user is in an EDIT/VIEW session.\n               If yes, EWORDPAD is invoked.  If no, CWORDPAD is invoked\n\n   The following four dialogs function only as commands - either as line\n   commands on DSLIST or executed like a clist (e.g. TSO UPLD) on a command\n   line:\n\n   MFEDIT   - Initiates the ISPF Edit of a PC Workstation file.  Displays panel\n               MFEDITP on which the user supplies or chooses the source folder\n               and supplies the file name.\n   UPLD     - Initiate upload of a PC workstation file to mainframe.  Displays\n               panel UPLDPANL on which the user supplies or chooses the source\n               folder and supplies the file name.\n   UPLOAD   - This is a clone of UPLD provided for those who prefer using a\n               meaningful word as a command.\n   GOOGLE   - A just-for-fun command.  Useful for demonstrating ISPF Client\n               server and to highlight that almost any PC workstation program\n               can be invoked from mainframe ISPF.\n              Invokes Google in Microsoft Internet Explorer to perform a web\n               search, e.g. TSO GOOGLE \"Things to do in Kansas City\"\n              The user can also type TSO GOOGLE and then place the cursor\n               anywhere on a word (e.g. an error message code) and then press\n               the Enter key.\n              Invokes ISPF WSCON if a workstation connection does not already\n               exist.\n\n   The following five command dialogs are invoked from the previously mentioned\n   \"routing dialogs\". Although they can be directly invoked, it is recommended\n   that their existance not be disclosed to users.\n\n   CDNLD    - Initiates a mainframe file download process.\n              CDNLD is invoked by DNLD when it is determined that the user is\n               not in an Edit or View session.\n              CDNLD is invoked by EDNLD when a user is in an Edit or View\n               session.\n              Displays panel DOWNLOAD from which the user chooses the target\n               folder.\n   CNOTEPAD - Downloads a file to the WSA working directory and then invokes\n               Microsoft Notepad to view the downloaded file.\n              CNOTEPAD is invoked by NOTEPAD when it is determined that the\n               user is not in an Edit or View session.\n              CNOTEPAD is invoked by ENOTEPAD when a user is in an Edit or View\n               session.\n              Invokes WSCON if a workstation connection does not already exist.\n               CNOTEPAD can be but is not normally directly invoked by the user.\n   COPENWTH - Command that downloads a file to a working directory specified\n               on the EMAILP panel.\n              COPENWTH is invoked by OPENWITH when it is determined that the\n               user is not in an Edit or View session.\n              COPENWTH is invoked by EOPENWTH when a user is in an Edit or View\n               session.\n              Invokes WSCON if a workstation connection does not already exist.\n   CEMAIL   - Command that downloads a file to a working directory specified\n               on the EMAILP panel which it displays.\n              CEMAIL is invoked by EMAIL when it is determined that the\n               user is not in an Edit or View session.\n              CEMAIL is invoked by EEMAIL when a user is in an Edit or View\n               session.\n   CWORD    - Downloads a mainframe file to the directory where the WSA is\n               installed and then invoke Microsoft Word to view it.\n              CWORD is invoked from WORD when it is determined that the user is\n               not in an Edit or View session.\n              CWORD is invoked from EWORD when a user is in an Edit or View\n               session.\n              Invokes WSCON if a workstation connection does not already exist.\n               CWORD can be but is not normally directly invoked by the user.\n   CWORDPAD - Downloads a file to the WSA working directory and then invokes\n               Microsoft WordPad to view the downloaded file.\n              CWORDPAD is invoked from WORDPAD when it is determined that the\n               user is not in an Edit or View session.\n              CWORDPAD is invoked from EWORDPAD when a user is in an Edit or\n               View session.\n              Invokes WSCON if a workstation connection does not already exist.\n               CWORDPAD can be but is not normally directly invoked by the user.\n\n   The following five edit macros are invoked from the previously mentioned\n   \"routing dialogs\". Although they can be directly invoked, it is recommended\n   that their existance not be disclosed to users.\n\n   EDNLD    - Edit macro that stores the contents of a displayed mainframe file\n               or report in a temporary file when in an Edit or View session.\n              Invokes CDNLD.\n              This edit macro can be invoked directly but is normally invoked by\n               DNLD.\n   ENOTEPAD - Edit macro that stores the contents of a displayed mainframe file\n               or report in a temporary file when in an Edit or View session.\n              Invokes CNOTEPAD.\n              This edit macro can be invoked directly but is normally invoked by\n               NOTEPAD.\n   EOPENWTH - Edit macro that stores the contents of a displayed mainframe file\n               or report in a temporary file when in an Edit or View session.\n              Invokes COPENWTH.\n              This edit macro can be invoked directly but is normally invoked by\n               OPENWITH.\n   EEMAIL   - Edit macro that stores the contents of a displayed mainframe file\n               or report in a temporary file when in an Edit or View session.\n              Invokes CEMAIL.\n              This edit macro can be invoked directly but is normally invoked by\n               EMAIL.\n   EWORD    - Edit macro that stores the contents of a displayed mainframe file\n               or report in a temporary file when in an Edit or View session.\n              Invokes CWORD.\n              This edit macro can be invoked directly but is normally invoked by\n               WORD.\n   EWORDPAD - Edit macro that stores the contents of a displayed mainframe file\n               or report in a temporary file when in an Edit or View session.\n              This edit macro can be invoked directly but is normally invoked by\n               WORDPAD.\n\n   The following six dialogs are invoked only from panels or other dialogs.\n   NEVER INVOKE THEM DIRECTLY!  (Seriously ... don't do it.)\n\n   DNLDACTV - Invokes ISPF FILEXFER command to download a mainframe file\n               interactively.\n              Invokes ISPF WSCON if a workstation connection does not already\n               exist.\n              This command is invoked only by panel DNLDPANL and never directly\n               by the user.\n   DNLDBTCH - Constructs batch JCL and a REXX exec to download a mainframe\n               file.  Runs the ISPF FILEXFER command in an ISPF batch session.\n              Displays execution JCL based on skeleton FILEXFER for manual\n               submission or submits automatically depending on DOWNLOAD panel\n               setting.\n              The batch job establishes its own workstation connection.\n              This command is invoked only from panel DNLDPANL and never\n               directly by the user.\n   MFEDIT$$ - Invokes ISPF Edit of workstation file.  Changes made in ISPF\n               are saved to the workstation file.\n              Invokes ISPF WSCON if a workstation connection does not already\n               exist.\n              This command is invoked only by panel MFEDITP and never directly\n               by the user.\n   EMAIL$   - Command executed by panel EMAILP to download the file specified\n               in the \"Attachment name\" field and then to invoke a Windows email\n               program with the downloaded file as an attachment.\n              This command is invoked only by panel EMAILP and never\n               directly by the user.\n   UPLDACTV - Invokes ISPF FILEXFER command to upload a mainframe file\n               interactively.\n              Invokes ISPF WSCON if a workstation connection does not already\n               exist.\n              Displays the ISPF Data Set Utility panel to facilitate allocation\n               of the mainframe file if it does not already exist.\n              This command is invoked only by panel UPLDPANL and never directly\n               by the user.\n   UPLDBTCH - Constructs batch JCL and a REXX exec to upload a mainframe file.\n               Runs the ISPF FILEXFER command in an ISPF batch session.\n              Displays the ISPF Data Set Utility panel to facilitate allocation\n               of the mainframe file if it does not already exit.\n              Displays execution JCL based on skeleton FILEXFER for manual\n               submission or submits automatically depending on UPLDPANL panel\n               setting.\n              The batch job establishes its own workstation connection.\n              This command is invoked only by panel UPLDPANL and never directly\n               by the user.\n\n  ISPF Panel (ISPPLIB):\n\n   DNLDPANL - Receives user entry of Workstation file name, directory paths,\n               options and specifications.\n               If selected mode is Interactive, invokes DNLDACTV.\n               If selected mode is Batch, invokes DNLDBTCH.\n   DNLDHLP1 - Displays Help for all panels in this suite.\n              Provides instructions on installing and configuring the ISPF\n               Workstation Agent.\n              Provides mainframe system information necessary for automating the\n               workstation connection.  May be customized for your installation.\n   MFEDITP  - Receives user entry of Workstation file name and directory paths.\n              Invokes REXX MFEDIT$$.\n   UPLDPANL - Receives user entry of Workstation file name, mainframe file name,\n               directory paths, options and specifications.\n               If selected mode is Interactive, invokes UPLDACTV.\n               If selected mode is Batch, invokes UPLDBTCH.\n   EMAILP   - Displays a panel on which the user specifies a working directory\n               that will receive a file download before it is attached to a new\n               Microsoft Outlook email.\n\n  ISPF Skeleton (ISPSLIB):\n\n   FILEXFER - A JCL skeleton used by REXX execs DNLDBTCH and UPLDBTCH to\n               build a manually or automatically submitted file transfer job.\n               Customize the skeleton's JOB card with accounting information\n               appropriate for your organization.\n\n  ISPF Message (ISPMLIB):\n\n   DNLD00   - An ISPF message library member\n\n\n  MVS Batch components:\n\n   XFERJCL  - Sample execution JCL.  Copy it to a JCL or documentation library\n               renaming it FILEXFER or a name of your choice.\n   XFERPROC - Batch procedure for transferring files between mainframe and PC\n               workstation in TEXT or BINARY. Runs ISPF in batch mode.\n              Suitable for building jobstreams in which there are multiple file\n               transfer steps.\n              Refer to sample execution JCL in distribution library member\n               XFERJCL\n              Copy this MVS procedure to a PROCLIB and rename it FILEXFER.\n              Modify the SYSEXEC DSN= parameter to reference the library where\n              REXX exec FILEXFER resides.\n   XFERREXX - REXX exec which accepts control card input containing file\n               transfer specifications.  Executed as \"FILEXFER\" by the batch\n               procedure stored in member XFERPROC of this distribution library.\n              Copy this REXX exec to a CLIST, REXX or control card library\n               and rename it FILEXFER.\n\n  Microsoft Word (Do not Edit this member!):\n\n   WORDDOC1 - A zip archive containing an instructional document for end users\n              in Microsoft Word format.\n\n              Download WORDDOC1 in binary to file_name_of_your_choice.zip .\n              Then upzip the contents to file_name_of_your_choice.doc and\n              customize for your users.\n\n Implementing the ISPF components:\n\n  Store Edit macros in a SYSPROC library allocated to the ISPF session.\n\n  Panel (ISPPLIB), Skeleton (ISPSLIB) and Message (ISPMLIB) libraries are\n   allocated dynamically using LIBDEF statements in CLIST or REXX modules CDNLD,\n   MFEDIT, CEMAIL, UPLD and UPLOAD and need not be placed in libraries\n   allocated in the TSO logon procedure.  It is, however, necessary to modify\n   the LIBDEF statements to point to the libraries in which you store the panel,\n   skeleton and message modules.  The above named CLIST and REXX modules\n   currently have \"commented\" allocation statements for libraries in the authors\n   mainframe environment - these statements can, of course, be removed.\n\n  As provided, all CLIST modules and the non-edit macro REXX modules must also\n   reside in SYSPROC libraries allocated to the ISPF session.  Adding additional\n   LIBDEF statements to CDNLD, MFEDIT, UPLD and UPLOAD to dynamically allocate\n   CLIST/REXX libraries may allow the remaining CLIST and REXX modules to be\n   stored in libraries not allocated in the TSO logon procedure.\n\n  Remove or \"comment\" existing LIBDEF statements if you store the panel,\n   skeleton and message library components in libraries allocated by your TSO\n   logon procedure.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE908": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04[\\x00 \\x01\\x155o\\x01\\x155o\\x16\\x16\\x00L\\x00L\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf1@@@'", "ispf": {"version": "04.91", "flags": 0, "createdate": "2015-12-22T00:00:00", "modifydate": "2015-12-22T16:16:20", "lines": 76, "newlines": 76, "modlines": 0, "user": "CBT-491"}, "text": "//***FILE 908 is from James Halley and contains a package to send   *   FILE 908\n//*           ISPF outputs to Windows workstations for printing     *   FILE 908\n//*           and many types of further post-processing.  A short   *   FILE 908\n//*           description follows below.  You should also see the   *   FILE 908\n//*           pds member called $README.                            *   FILE 908\n//*                                                                 *   FILE 908\n//*           email:  jimhalley627@gmail.com                        *   FILE 908\n//*                                                                 *   FILE 908\n//*       ISPF Client Server Local Dialogs and Facilities           *   FILE 908\n//*       ---- ------ ------ ----- ------- --- ----------           *   FILE 908\n//*                                                                 *   FILE 908\n//*     This library contains ISPF components that make it          *   FILE 908\n//*     easier to move files and reports between a batch or         *   FILE 908\n//*     online ISPF session and a Microsoft Windows workstation     *   FILE 908\n//*     running the ISPF Workstation Agent (WSA).                   *   FILE 908\n//*                                                                 *   FILE 908\n//*     These tools are intended for non-productional use and       *   FILE 908\n//*     may not be suitable for or function in your                 *   FILE 908\n//*     environment.  Communication between a mainframe ISPF        *   FILE 908\n//*     session and an ISPF Workstation Agent through an IP         *   FILE 908\n//*     connection is required but can be prevented by network      *   FILE 908\n//*     (e.g. firewall and communication port) settings.            *   FILE 908\n//*     Contact a member of your network support team if a          *   FILE 908\n//*     connection between your ISPF session and a Workstation      *   FILE 908\n//*     Agent cannot be established.                                *   FILE 908\n//*                                                                 *   FILE 908\n//*     The ISPF Workstation Agent \"Windows 2000/NT\" install        *   FILE 908\n//*     executable prior to z/OS 2.1 is not compatible with         *   FILE 908\n//*     Microsoft Windows 7 unless z/OS APAR OA39571 has been       *   FILE 908\n//*     implemented:                                                *   FILE 908\n//*     http://www-01.ibm.com/support/docview.wss?uid=isg1OA39571   *   FILE 908\n//*                                                                 *   FILE 908\n//*     To use ISPF Client Server with Windows 7 if your z/OS       *   FILE 908\n//*     version is below 2.1 and APAR OA39571 has not been          *   FILE 908\n//*     applied:                                                    *   FILE 908\n//*                                                                 *   FILE 908\n//*       *  Upgrade z/OS to Version 2.1                            *   FILE 908\n//*       *  or Apply APAR OA39571                                  *   FILE 908\n//*       *  or obtain the Windows 7 compatible install             *   FILE 908\n//*          executable for the Workstation Agent from IBM.         *   FILE 908\n//*       *  or copy the five critical WSA components from a        *   FILE 908\n//*          workstation running Windows XP or below.  (The         *   FILE 908\n//*          least acceptable option.)                              *   FILE 908\n//*       *  or download member ISPFINST from this library and      *   FILE 908\n//*          unzip the content which is the Workstation Agent       *   FILE 908\n//*          install file that came with APAR OA39571.              *   FILE 908\n//*                                                                 *   FILE 908\n//*     Constraints of copying the five WSA components from a       *   FILE 908\n//*     WinXP to Win7:                                              *   FILE 908\n//*                                                                 *   FILE 908\n//*       *  Older versons of the WSA sometimes do not find or      *   FILE 908\n//*          use Windows Socket Library components even when        *   FILE 908\n//*          the path is manually entered in the WSA \"Set           *   FILE 908\n//*          Winsock Path\" dialog.                                  *   FILE 908\n//*       *  The older WSA had other issues that were resolved      *   FILE 908\n//*          by APAR 0A39571 including abending after               *   FILE 908\n//*          tranferring 1.5 GB of a large text file.               *   FILE 908\n//*                                                                 *   FILE 908\n//*     The WSA supplied by APAR OA39571 has been successfully      *   FILE 908\n//*     tested on a z/OS 1.13 system on which APAR 0A39571 has      *   FILE 908\n//*     not implemented.                                            *   FILE 908\n//*                                                                 *   FILE 908\n//*     This library contains a number of module types: CLIST,      *   FILE 908\n//*     REXX; ISPF panel, skeleton and message; MVS procedure       *   FILE 908\n//*     and JCL, Microsoft Word, zipped Microsoft Windows           *   FILE 908\n//*     executable.                                                 *   FILE 908\n//*                                                                 *   FILE 908\n//*     The $README member describes the type and purpose of        *   FILE 908\n//*     each member in this library to assist in moving             *   FILE 908\n//*     members to libraries of the appropriate types.              *   FILE 908\n//*                                                                 *   FILE 908\n//*     The three \"MVS batch\" batch components must be renamed      *   FILE 908\n//*     when moved to the libraries from which they will be         *   FILE 908\n//*     used.  Components associated with ISPF dialogs can be       *   FILE 908\n//*     used as named.                                              *   FILE 908\n//*                                                                 *   FILE 908\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ALLOC": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00P\\x01\\x12!\\x9f\\x01\\x14\\x00\\x8f\\x14\\x03\\x00\\t\\x00\\t\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-08-06T00:00:00", "modifydate": "2014-01-08T14:03:50", "lines": 9, "newlines": 9, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX ... here boy, woof woof ... GOOD DOG !!                      */\nADDRESS TSO\nSAY \"Allocating ISPF Client Server Distribution library to SYSPROC  \"\nSAY \"                                                               \"\n\"EXEC 'KCTSHARE.TECH.ISPFCS.DISTLIB(CONCATX)'\",\n      \"'SYSPROC ''KCTSHARE.TECH.ISPFCS.DISTLIB''' EXEC\"\nISPF\n/* \"ISPF GUI(IP:123.123.??.??,NOGUIDSP)\" */ /* connect to workstation */\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CDNLD": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x14\\x007\\x01\\x110O\\x01\\x14\\x10\\x1f\\x14\\x07\\x00'\\x00!\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@\"", "ispf": {"version": "01.20", "flags": 0, "createdate": "2011-10-31T00:00:00", "modifydate": "2014-04-11T14:07:37", "lines": 39, "newlines": 33, "modlines": 0, "user": "TTZC28"}, "text": "PROC 1 DATA_SET_NAME\n/* CLIST NAME:  CDNLD ------------------------------------------------*/\n/* INITIATE MAINFRAME FILE DOWNLOAD PROCESS                           */\n/* GRAB DATA SET NAME (INCLUDING MEMBER NAME IF APPLICABLE) FROM THE  */\n/* DSLIST SCREEN OR FROM MANUAL USER ENTRY.                           */\n/* -------------------------------------------------------------------*/\nCONTROL MSG\nSET &DLMFDSN = &STR(&DATA_SET_NAME)\nSET &DLWSDSN = &STR(&DATA_SET_NAME)\nISPEXEC VGET (DLTXT DLBTCH DLAUTO DLEXT)\nIF &DLTXT\u00ac=T AND &DLTXT\u00ac=B THEN +\n  SET &DLTXT=T\nIF &DLBTCH\u00ac=I AND &DLBTCH\u00ac=B THEN +\n  SET &DLBTCH=I\nIF &DLAUTO\u00ac=Y AND &DLAUTO\u00ac=N THEN +\n  SET &DLAUTO=N\nIF &DLEXT\u00ac=Y AND &DLEXT\u00ac=N THEN +\n  SET &DLEXT=Y\nISPEXEC VPUT (DLMFDSN DLWSDSN DLTXT DLBTCH DLAUTO DLEXT) PROFILE\nISPEXEC LIBDEF ISPPLIB +\n    DATASET ID('KCTSHARE.TECH.ISPFCS.DISTLIB') STACK\n/*  DATASET ID('KCMOC.TSO.PROD.ISPPLIB')     STACK */\n/*  DATASET ID('KCTSHARE.TECH.DVLP.ISPPLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.QLTY.ISPPLIB') STACK */\nISPEXEC LIBDEF ISPMLIB +\n    DATASET ID('KCTSHARE.TECH.ISPFCS.DISTLIB') STACK\n/*  DATASET ID('KCMOC.TSO.PROD.ISPMLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.DVLP.ISPMLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.QLTY.ISPMLIB') STACK */\nISPEXEC LIBDEF ISPSLIB +\n    DATASET ID('KCTSHARE.TECH.ISPFCS.DISTLIB') STACK\n/*  DATASET ID('KCMOC.TSO.PROD.ISPSLIB')     STACK */\n/*  DATASET ID('KCTSHARE.TECH.DVLP.ISPSLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.QLTY.ISPSLIB') STACK */\nISPEXEC SELECT PANEL(DNLDPANL)\nISPEXEC LIBDEF ISPPLIB DATASET\nISPEXEC LIBDEF ISPMLIB DATASET\nISPEXEC LIBDEF ISPSLIB DATASET\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CEMAIL": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00&\\x01\\x15\\t/\\x01\\x15\\t?\\x10\\x08\\x00$\\x00&\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2015-04-02T00:00:00", "modifydate": "2015-04-03T10:08:26", "lines": 36, "newlines": 38, "modlines": 0, "user": "TTZC28"}, "text": "PROC 1 DATA_SET_NAME\n/* CLIST NAME:  CEMAIL   ---------------------------------------------*/\n/* INITIATE PROCESS IN WHICH A MAINFRAME FILE WILL BE ATTACHED TO A   */\n/* NEW EMAIL.                                                         */\n/* -------------------------------------------------------------------*/\nCONTROL MSG\nSET &OLMFDSN = &STR(&DATA_SET_NAME)\nSET &OLWSDSN = &STR(&DATA_SET_NAME)\nISPEXEC VGET (OLTXT OLEXT)\nIF &OLTXT\u00ac=T AND &OLTXT\u00ac=B THEN +\n  SET &OLTXT=T\nIF &OLEXT\u00ac=Y AND &OLEXT\u00ac=N THEN +\n  SET &OLEXT=Y\nISPEXEC VPUT (OLMFDSN OLWSDSN OLTXT OLBTCH OLAUTO OLEXT) PROFILE\nISPEXEC LIBDEF ISPPLIB +\n    DATASET ID('KCTSHARE.TECH.ISPFCS.DISTLIB') STACK\n/*  DATASET ID('KCMOC.TSO.PROD.ISPPLIB')     STACK */\n/*  DATASET ID('KCTSHARE.TECH.DVLP.ISPPLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.QLTY.ISPPLIB') STACK */\nISPEXEC LIBDEF ISPMLIB +\n    DATASET ID('KCTSHARE.TECH.ISPFCS.DISTLIB') STACK\n/*  DATASET ID('KCMOC.TSO.PROD.ISPMLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.DVLP.ISPMLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.QLTY.ISPMLIB') STACK */\nISPEXEC LIBDEF ISPSLIB +\n    DATASET ID('KCTSHARE.TECH.ISPFCS.DISTLIB') STACK\n/*  DATASET ID('KCMOC.TSO.PROD.ISPSLIB')     STACK */\n/*  DATASET ID('KCTSHARE.TECH.DVLP.ISPSLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.QLTY.ISPSLIB') STACK */\nISPEXEC SELECT PANEL(EMAILP)\nISPEXEC LIBDEF ISPPLIB DATASET\nISPEXEC LIBDEF ISPMLIB DATASET\nISPEXEC LIBDEF ISPSLIB DATASET\nISPEXEC VGET (OLPATHX)\nISPEXEC SELECT WSCMD(CMD /C DEL &OLPATHX) INVIS\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CNOTEPAD": {"ttr": 782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x15\\x00I\\x01\\x12\\t\\x0f\\x01\\x14\\x10\\x1f\\x10\\x19\\x00'\\x00!\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@\"", "ispf": {"version": "01.21", "flags": 0, "createdate": "2012-03-30T00:00:00", "modifydate": "2014-04-11T10:19:49", "lines": 39, "newlines": 33, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX NAME:  CNOTEPAD ----------------------------------------------*/\n/* INVOKE ISPF CLIENT SERVER FILEXFER TO DOWNLOAD A FILE TO           */\n/*    WORKFILE.TXT IN THE DIRECTORY CONTAINING THE WSA AND THEN       */\n/*    DISPLAY THE DOWNLOADED FILE IN MICROSOFT NOTEPAD.               */\n/* -------------------------------------------------------------------*/\n/* TRACE I */\nARG DATA_SET_NAME\n'ISPEXEC CONTROL ERRORS RETURN'\nADDRESS ISPEXEC\n\"VGET ZWSCON SHARED\"\nIF ZWSCON = ' ' THEN\n  DO\n    SAY 'NO WORKSTATION CONNECTION.'\n    SAY 'PRESS THE ENTER KEY AND INITIATE A WORKSTATION CONNECTION ...'\n    SAY '  AFTER VERIFYING THAT THE ISPF WORKSTATION AGENT IS ACTIVE. '\n    \"SELECT PGM(ISPWSCD) PARM(WSCON,PANEL)\"\n    \"VGET ZWSCON SHARED\"\n  END\nIF ZWSCON = ' ' THEN\n  DO\n    SAY 'NO WORKSTATION CONNECTION.  AN ACTIVE WORKSTATION ...'\n    SAY '  CONNECTION IS REQUIRED FOR INTERACTIVE MODE.'\n    EXIT\n  END\n\nVAR1 = DATA_SET_NAME /* MAINFRAME FILE NAME */\nVAR2 = WORKFILE.TXT  /* WORKSTATION FILE NAME */\n'FILEXFER HOST(VAR1) WS(VAR2) TO(WS) TEXT'\nIF RC /= 0 THEN\n  DO\n    SAY 'DOWNLOAD NOT SUCCESSFUL.  MICROSOFT NOTEPAD WILL  ...'\n    SAY '  NOT BE INVOKED.  FILEXFER RETURN CODE = ' RC\n    EXIT\n  END\n\n'ISPEXEC SELECT WSCMD(CMD /C START NOTEPAD &VAR2) INVIS'\nSAY 'THE FILE SHOULD APPEAR ON YOUR PC WORKSTATION WITHIN A FEW ...'\nSAY '   SECONDS. IF NOT, PRESS THE ENTER KEY AND CHECK FOR PROMPTS.'\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CONCATX": {"ttr": 784, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00S\\x01\\x12!\\x9f\\x01\\x12!\\x9f\\x084\\x00H\\x00H\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-08-06T00:00:00", "modifydate": "2012-08-06T08:34:53", "lines": 72, "newlines": 72, "modlines": 0, "user": "TTZC28"}, "text": "/************************ rexx **************************************/\n/* CONCATX  * This will concatenate a passed data set name to a     */\n/************ passed DDNAME.                                        */\n/* The exec will reallocate the DDNAME placing the passed data set  */\n/* first.  LIBDEFF will be used if the DDNAME begins with ISP and a */\n/* ISPF environment exists.                                         */\n/*                                                                  */\n/*  Jim Halley                                                      */\n/*  modified to eliminate dups                                      */\n/*  modified to allow a dataset or ddname to be entered if invalid  */\n/*                                                                  */\n/* Parms can be passed when calling or the user will be prompted.   */\n/*                                                                  */\n/* 'CONCATX ddname dataset.name'   or  'CONCATX'   <- will prompt.  */\n/********************************************************************/\n\nTrace Off\nAddress TSO\n/* trace i */\n/* trace o */\nParse Upper Arg ddname daname .           /* get the parm info */\nsay ddname\nsay daname\n\nIf SYSDSN(daname) <> 'OK' Then\n  Do While SYSDSN(daname) <> 'OK'\n    Say 'Please enter the DATASET name to be concatenated or end'\n    Parse Upper Pull daname\n    if daname= 'END' then\n      exit\n  End\nIf ddname = '' Then\n  Do While ddname = ''\n    Say 'Please enter the DDNAME to concatenated to.'\n    Parse Upper Pull ddname\n    if ddname = 'END' then\n      exit\n  End\n\nIf Substr(daname,1,1) <> \"'\" Then                /* add id and \"'\"s */\n  daname = \"'\" || Userid()\".\" || daname || \"'\"\ndsns = daname\ndsno = daname\n\nx = OUTTRAP(ln.,'*','NOCONCAT')\n'LISTA STATUS'\n\nDo i = 2 To ln.0                       /* loop through LISTA output */\n  Parse Var ln.i dsn ddn .             /* look for our ddname       */\n  If ddn = '' Then\n    Do\n      i = i + 1\n      Parse Var ln.i 3 ddn 12 disp .\n      If ddn <> '' Then curddn = ddn    /* found new DD */\n    End\n  Else\n    curddn = ddn\n  If curddn = ddname Then\n    if dsno<> \"'\"dsn\"'\" Then\n      dsns = dsns \"'\"dsn\"'\"           /* build dsn list */\nEnd i\n\nIf Substr(ddname,1,3) <> 'ISP' Then\n  'ALLOC DD('ddname') DA('dsns') SHR REUSE'         /* regular TSO  */\nElse\n  If Sysvar(SYSISPF) = 'ACTIVE' Then\n    Address ISPEXEC 'LIBDEF' ddname 'DATASET ID('daname')'\n  Else\n    Do\n     'ALLOC DD('ddname') DA('dsns') SHR REUSE'\n    End\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COPENWTH": {"ttr": 787, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00C\\x01\\x14\\x12o\\x01\\x14\\x12o\\x079\\x00?\\x00?\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-05-06T00:00:00", "modifydate": "2014-05-06T07:39:43", "lines": 63, "newlines": 63, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX NAME:  COPENWTH ----------------------------------------------*/\n/* Invoke ISPF Client Server FILEXFER to download a file to           */\n/*    WORKFILE.TXT in the working directory used by the OUTLOOK       */\n/*    dialog, open the  working directory in an Explorer window, and  */\n/*    prompt the user to select \"Open With\" to open the file with the */\n/*    program of his choice.                                          */\n/* -------------------------------------------------------------------*/\n/* TRACE I */\nARG DATA_SET_NAME\n'ISPEXEC CONTROL ERRORS RETURN'\nADDRESS ISPEXEC\n\"VGET ZWSCON SHARED\"\nIF ZWSCON = ' ' THEN\n  DO\n    SAY 'NO WORKSTATION CONNECTION.'\n    SAY 'PRESS THE ENTER KEY AND INITIATE A WORKSTATION CONNECTION ...'\n    SAY '  AFTER VERIFYING THAT THE ISPF WORKSTATION AGENT IS ACTIVE. '\n    \"SELECT PGM(ISPWSCD) PARM(WSCON,PANEL)\"\n    \"VGET ZWSCON SHARED\"\n  END\nIF ZWSCON = ' ' THEN\n  DO\n    SAY 'NO WORKSTATION CONNECTION.  AN ACTIVE WORKSTATION ...'\n    SAY '  CONNECTION IS REQUIRED FOR INTERACTIVE MODE.'\n    EXIT\n  END\n\nVAR1 = DATA_SET_NAME /* MAINFRAME FILE NAME */\nADDRESS ISPEXEC\n\"VGET (OLPATHA OLPATHB) PROFILE\"\nIF OLPATHA = ' ' THEN\n  DO\n    SAY 'THIS DIALOG USES THE WORKING DIRECTORY FOR THE OUTLOOK DIALOG.'\n    SAY ' PLEASE INVOKE THE OUTLOOK DIALOG, SUPPLY A WORKING DIRECTORY,'\n    SAY ' AND THEN RETRY OPENWITH.'\n    EXIT\n  END\n\n/* VAR1 = \"'\"||DATA_SET_NAME||\"'\" */\nVAR1 = DATA_SET_NAME\nVAR3 = \"WORKFILE.TXT\" /* WORKSTATION FILE NAME */\n/* SAY 'VAR1 = ' VAR1 */\n/* SAY 'VAR3 = ' VAR3 */\nIF OLPATHB > ' ' THEN                            /* PRESERVE TRAILING   */\n  VAR2 = LEFT(OLPATHA,74)||OLPATHB               /* SPACES ON PATH PART */\nELSE                                             /* A WHEN PATH PART B  */\n  VAR2 = OLPATHA||OLPATHB                        /* IS SUPPLIED.        */\nVAR3 = VAR2||\"\\\"||VAR3\n/* 'VPUT (VAR1 VAR2)' */\n\n'FILEXFER HOST(VAR1) WS(VAR3) TO(WS) TEXT'\nIF RC /= 0 THEN\n  DO\n    SAY 'DOWNLOAD NOT SUCCESSFUL.  MICROSOFT EXPLORER WILL  ...'\n    SAY '  NOT BE INVOKED.  FILEXFER RETURN CODE = ' RC\n    EXIT\n  END\n\n'ISPEXEC SELECT WSCMD(CMD /C START EXPLORER &VAR2) INVIS'\nSAY ' '\nSAY 'Right click on WORKFILE.TXT in the Explorer window that has been'\nSAY ' opened and select \"Open with\" and the program of your choice.'\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CWORD": {"ttr": 789, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00V\\x01\\x13(\\x9f\\x01\\x14\\x10\\x1f\\x10\\x05\\x000\\x00*\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "2013-10-16T00:00:00", "modifydate": "2014-04-11T10:05:56", "lines": 48, "newlines": 42, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX NAME:  CWORD   -----------------------------------------------*/\n/* INVOKE ISPF CLIENT SERVER FILEXFER TO DOWNLOAD A FILE TO           */\n/*    WORKFILE.TXT IN THE DIRECTORY CONTAINING THE WSA AND THEN       */\n/*    DISPLAY THE DOWNLOADED FILE IN MICROSOFT WORD.                  */\n/* -------------------------------------------------------------------*/\n/* TRACE I */\nARG DATA_SET_NAME\n'ISPEXEC CONTROL ERRORS RETURN'\nADDRESS ISPEXEC\n\"VGET ZWSCON SHARED\"\nIF ZWSCON = ' ' THEN\n  DO\n    SAY 'NO WORKSTATION CONNECTION.'\n    SAY 'PRESS THE ENTER KEY AND INITIATE A WORKSTATION CONNECTION ...'\n    SAY '  AFTER VERIFYING THAT THE ISPF WORKSTATION AGENT IS ACTIVE. '\n    \"SELECT PGM(ISPWSCD) PARM(WSCON,PANEL)\"\n    \"VGET ZWSCON SHARED\"\n  END\nIF ZWSCON = ' ' THEN\n  DO\n    SAY 'NO WORKSTATION CONNECTION.  AN ACTIVE WORKSTATION ...'\n    SAY '  CONNECTION IS REQUIRED FOR INTERACTIVE MODE.'\n    EXIT\n  END\n\nVAR1 = DATA_SET_NAME /* MAINFRAME FILE NAME */\nVAR2 = WORKFILE.TXT  /* WORKSTATION FILE NAME */\n'FILEXFER HOST(VAR1) WS(VAR2) TO(WS) TEXT'\nIF RC = 14 THEN\n  DO\n    SAY 'DOWNLOAD NOT SUCCESSFUL.  MICROSOFT WORD WILL  ...'\n    SAY '  NOT BE INVOKED.  FILEXFER RETURN CODE = ' RC\n    SAY ' '\n    SAY 'VERIFY THAT THE PREVIOUS DOWNLOADED DOCUMENT'\n    SAY '  HAS BEEN CLOSED AND THEN TRY AGAIN.'\n    EXIT\n  END\nIF RC /= 0 THEN\n  DO\n    SAY 'DOWNLOAD NOT SUCCESSFUL.  MICROSOFT WORD WILL  ...'\n    SAY '  NOT BE INVOKED.  FILEXFER RETURN CODE = ' RC\n    EXIT\n  END\n\n'ISPEXEC SELECT WSCMD(CMD /C START WINWORD &VAR2) INVIS'\nSAY 'THE FILE SHOULD APPEAR ON YOUR PC WORKSTATION WITHIN A FEW ...'\nSAY '   SECONDS. IF NOT, PRESS THE ENTER KEY AND CHECK FOR PROMPTS.'\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CWORDPAD": {"ttr": 1026, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x14\\x009\\x01\\x13\\x03\\x9f\\x01\\x14\\x10\\x1f\\x10\\x18\\x00'\\x003\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@\"", "ispf": {"version": "01.20", "flags": 0, "createdate": "2013-02-08T00:00:00", "modifydate": "2014-04-11T10:18:39", "lines": 39, "newlines": 51, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX NAME:  CWORDPAD ----------------------------------------------*/\n/* INVOKE ISPF CLIENT SERVER FILEXFER TO DOWNLOAD A FILE TO           */\n/*    WORKFILE.TXT IN THE DIRECTORY CONTAINING THE WSA AND THEN       */\n/*    DISPLAY THE DOWNLOADED FILE IN MICROSOFT WORDPAD.               */\n/* -------------------------------------------------------------------*/\n/* TRACE I */\nARG DATA_SET_NAME\n'ISPEXEC CONTROL ERRORS RETURN'\nADDRESS ISPEXEC\n\"VGET ZWSCON SHARED\"\nIF ZWSCON = ' ' THEN\n  DO\n    SAY 'NO WORKSTATION CONNECTION.'\n    SAY 'PRESS THE ENTER KEY AND INITIATE A WORKSTATION CONNECTION ...'\n    SAY '  AFTER VERIFYING THAT THE ISPF WORKSTATION AGENT IS ACTIVE. '\n    \"SELECT PGM(ISPWSCD) PARM(WSCON,PANEL)\"\n    \"VGET ZWSCON SHARED\"\n  END\nIF ZWSCON = ' ' THEN\n  DO\n    SAY 'NO WORKSTATION CONNECTION.  AN ACTIVE WORKSTATION ...'\n    SAY '  CONNECTION IS REQUIRED FOR INTERACTIVE MODE.'\n    EXIT\n  END\n\nVAR1 = DATA_SET_NAME /* MAINFRAME FILE NAME */\nVAR2 = WORKFILE.TXT  /* WORKSTATION FILE NAME */\n'FILEXFER HOST(VAR1) WS(VAR2) TO(WS) TEXT'\nIF RC /= 0 THEN\n  DO\n    SAY 'DOWNLOAD NOT SUCCESSFUL.  MICROSOFT WORDPAD WILL  ...'\n    SAY '  NOT BE INVOKED.  FILEXFER RETURN CODE = ' RC\n    EXIT\n  END\n\n'ISPEXEC SELECT WSCMD(CMD /C START WRITE &VAR2) INVIS'\nSAY 'THE FILE SHOULD APPEAR ON YOUR PC WORKSTATION WITHIN A FEW ...'\nSAY '   SECONDS. IF NOT, PRESS THE ENTER KEY AND CHECK FOR PROMPTS.'\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DNLD": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00)\\x01\\x14\\x07o\\x01\\x14\\x07\\x7f\\x08\\x06\\x00\\x11\\x00\\x12\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2014-03-17T00:00:00", "modifydate": "2014-03-18T08:06:29", "lines": 17, "newlines": 18, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX NAME:  DNLD    -----------------------------------------------*/\n/* THIS \"FRONT-END\" INVOKES EDNLD IF THE USER IS IN AN EDIT OR        */\n/*    VIEW SESSION.  OTHERWISE, CDNLD IS INVOKED.                     */\n/* -------------------------------------------------------------------*/\n/* TRACE I */\nADDRESS ISREDIT\n\"MACRO\"\nIF RC = 0 /* IS THE USER IN AN EDIT OR VIEW SESSION? */\n  THEN /* INVOKE EDIT MACRO */\n    EDNLD\nELSE\n  DO /* INVOKE COMMAND */\n    ADDRESS ISPEXEC\n    ARG DATA_SET_NAME\n    \"SELECT CMD(\"CDNLD DATA_SET_NAME\") NEWAPPL(ISR)\"\n  END\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DNLDACTV": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x14\\x01\\x12\"o\\x01\\x121\\x0f\\x08\\x10\\x00#\\x00$\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-08-13T00:00:00", "modifydate": "2012-11-05T08:10:14", "lines": 35, "newlines": 36, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX name:  DNLDACTV ----------------------------------------------*/\n/* Invoke ISPF Client Server FILEXFER to download file interactively  */\n/* -------------------------------------------------------------------*/\n/* TRACE I */\nADDRESS ISPEXEC\n\"VGET ZWSCON SHARED\"\n\nIF ZWSCON = ' ' THEN\n  DO\n    SAY 'No workstation connection.'\n    SAY 'Press the ENTER key and initiate a workstation connection ...'\n    SAY '  after verifying that the ISPF Workstation Agent is active. '\n    \"SELECT PGM(ISPWSCD) PARM(WSCON,PANEL)\"\n    \"VGET ZWSCON SHARED\"\n  END\n\nIF ZWSCON = ' ' THEN\n  DO\n    SAY 'No workstation connection.  An active workstation ...'\n    SAY '  connection is required for Interactive mode.'\n    EXIT\n  END\nADDRESS ISPEXEC\n\"VGET (DLMFDSN DLPATHA DLPATHB DLWSWRK DLTXT) PROFILE\"\nVAR1 = \"'\"||DLMFDSN||\"'\"\nIF DLPATHB > ' ' THEN                            /* PRESERVE TRAILING   */\n  VAR2 = LEFT(DLPATHA,74)||DLPATHB||\"\\\"||DLWSWRK /* SPACES ON PATH PART */\nELSE                                             /* A WHEN PATH PART B  */\n  VAR2 = DLPATHA||DLPATHB||\"\\\"||DLWSWRK          /* IS SUPPLIED.        */\n'VPUT (VAR1 VAR2)'\nIF DLTXT = T THEN\n  'FILEXFER HOST(VAR1) WS(VAR2) TO(WS) TEXT'\nELSE\n  'FILEXFER HOST(VAR1) WS(VAR2) TO(WS) BINARY'\nsay 'Download process has completed. '\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DNLDBTCH": {"ttr": 1032, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00W\\x01\\x12\"o\\x01\\x121\\x0f\\x08\\x10\\x00\\x91\\x00\\x96\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-08-13T00:00:00", "modifydate": "2012-11-05T08:10:57", "lines": 145, "newlines": 150, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX name:  DNLDBTCH ----------------------------------------------*/\n/* Construct batch JCL to download a file with ISPF Client Server     */\n/* FILEXFER.  Based on user input, display the JCL for manual         */\n/* submission or submit the JCL without first displaying it.          */\n/* -------------------------------------------------------------------*/\n/* TRACE I */\nADDRESS ISPEXEC\n\"VGET (DLMFDSN DLPATHA DLPATHB DLWSDSN DLTXT DLAUTO DLEXT) PROFILE\"\n\"VGET (ZGUITCP)\" /* GET WORKSTATION IP ADDRESS FROM WSCON */\nADDRESS TSO\nIP = ZGUITCP\nDYYMMDD = DATE('O') /* GET CURRENT DATE IN YY/MM/DD FORMAT */\nDYYMMDD = SUBSTR(DYYMMDD,1,2)||SUBSTR(DYYMMDD,4,2)||SUBSTR(DYYMMDD,7,2)\nDYYMMDD = \"D\"||DYYMMDD\nTHHMMSS = TIME() /* GET CURRENT TIME IN HH:MM:SS FORMAT */\nTHHMMSS = SUBSTR(THHMMSS,1,2)||SUBSTR(THHMMSS,4,2)||SUBSTR(THHMMSS,7,2)\nTHHMMSS = \"T\"||THHMMSS\nUSEID = SYSVAR(SYSUID) /* GET THE USER'S USER ID */\nSYSPFX = SYSVAR(SYSPREF) /* GET THE SYSTEM PREFIX  */\n/* CONSTRUCT A UNIQUE NAME FOR THE FILEXFER REXX PDS */\nIF USEID = SYSPFX THEN\n  CTLDSN = USEID||\".DOWNLOAD.\"||DYYMMDD||\".\"||THHMMSS\nELSE\n  CTLDSN = SYSPFX||\".\"||USEID||\".DOWNLOAD.\"||DYYMMDD||\".\"||THHMMSS\nREXXPDS = CTLDSN /* SAVE THE GENERATED FILE NAME TO USE IN JCL */\nCTLDSN = \"'\"||CTLDSN||\"'\"\nIF DLTXT = T & DLEXT = Y THEN\n  DLWSWRK = DLWSDSN||\".TXT\" /* FILE EXTENSION FOR TEXT DOWNLOAD */\nIF DLTXT = B & DLEXT = Y THEN\n  DLWSWRK = DLWSDSN||\".BIN\" /* FILE EXTENTION FOR BINARY DOWNLOAD */\nIF DLEXT = N THEN\n  DLWSWRK = DLWSDSN         /* If NO FILE EXTENTION IS REQUESTED */\nMF = '\"'||\"'\"||DLMFDSN||\"'\"||'\"'\nDLPATHA = \"'\"||DLPATHA||\"'\"\nIF DLPATHB > ' ' THEN\n  DLPATHB = \"'\"||DLPATHB||\"'\"\nDLWSWRK = \"'\"||DLWSWRK||\"'\"\nIF1 = \"IF DLPATHB > ' ' THEN\"\nIF2 = \"  PC = LEFT(DLPATHA,74)||DLPATHB||'\\'||DLWSWRK\"\nIF3 = \"ELSE\"\nIF4 = \"  PC = DLPATHA||DLPATHB||'\\'||DLWSWRK\"\nIF DLTXT = T THEN\nDLCMD = '\"'||\"ISPEXEC FILEXFER HOST(MF) WS(PC) TO(WS) TEXT\"||'\"'\nELSE\nDLCMD = '\"'||\"ISPEXEC FILEXFER HOST(MF) WS(PC) TO(WS) BINARY\"||'\"'\nCTL. = ''\nCTL.1 = \"/* REXX */\"\nCTL.2 = \"MF =\" MF\nCTL.3 = \"A =\" DLPATHA\nCTL.4 = \"B =\" DLPATHB\nCTL.5 = \"C =\" DLWSWRK\nCTL.6 = \"DLPATHA = A\"\nCTL.7 = \"DLPATHB = B\"\nCTL.8 = \"DLWSWRK = C\"\nCTL.9 = IF1\nCTL.10 = IF2\nCTL.11 = IF3\nCTL.12 = IF4\nCTL.13 = \"IP =\" IP\nCTL.14 = \"'\"'ISPEXEC WSCON IP(IP) CODEPAGE(0037) CHARSET(0697) NOGUIDSP'\"'\"\nCTL.15 = \"SAY '\"'WSCON    RETURN CODE: '\"'  RC\"\nCTL.16 = DLCMD\nCTL.17 = \"SAY '\"'FILEXFER RETURN CODE: '\"'  RC\"\nCTL.18 = \"ISPEXEC WSDISCON\"\nADDRESS TSO\n/* ALLOCATE A PDS TO HOLD THE GENERATED REXX EXEC */\n\"ALLOC F(DATAOUT) DA(\"CTLDSN\") NEW CATALOG LRECL(80)\n BLKSIZE(8000) RECFM(F B) DSORG(PO) TRACKS SPACE(1 1) DIR(1)\"\nIF RC = 0 THEN      /* IF FREE  WAS SUCCESSFUL */\n      DO\n        NOP\n      END\n    ELSE\n      DO\n        SAY \"ERROR DURING ALLOCATE OF PDS \" RC\n      END\n\"FREE F(DATAOUT)\"\nIF RC = 0 THEN      /* IF FREE  WAS SUCCESSFUL */\n      DO\n        NOP\n      END\n    ELSE\n      DO\n        SAY \"ERROR DURING FREE OF PDS \" RC\n      END\n/* CONSTRUCT ALLOCATION STATEMENT FOR THE PDS MEMBER CREATED ABOVE */\nMEMNAME = FILEXFER\nXALL = '\"ALLOC DA('\nXALL = XALL || ''''\nXALL = XALL || REXXPDS\nXALL = XALL || '('\nXALL = XALL || STRIP(MEMNAME)\nXALL = XALL || ')'\nXALL = XALL || ''''\nXALL = XALL || ') F(FILEXFER) OLD\"'\nINTERPRET XALL /* EXECUTE THE ALLOCATE COMMAND */\n\nIF RC = 0 THEN /* IF OPEN OF PDS MEMBER WAS SUCCESSFUL  */\n      DO\n        NOP\n      END\n    ELSE\n      DO\n        SAY \"ERROR DURING ALLOCATE OF PDS MEMBER \" RC\n      END\n\n/* WRITE THE FILEXFER GENERATED REXX STATEMENTS TO THE PDS MEMBER */\n\"EXECIO * DISKW FILEXFER (STEM CTL. FINIS\"\n\nIF RC = 0 THEN      /* IF WRITE WAS SUCCESSFUL         */\n      DO\n        NOP\n      END\n    ELSE\n      DO\n        SAY \"ERROR DURING 1ST EXECIO ... DISKW, RETURN CODE IS \" RC\n      END\n\n\"FREE F(FILEXFER)\"\nIF RC = 0 THEN      /* IF FREE  WAS SUCCESSFUL         */\n      DO\n        NOP\n      END\n    ELSE\n      DO\n        SAY \"ERROR DURING FREE OF PDS \" RC\n      END\n\nIF DLAUTO = N THEN DO /* BEGINNING OF MANUAL SUBMIT LOGIC */\nADDRESS ISPEXEC\n\"FTOPEN TEMP\"\n\"FTINCL FILEXFER\"\n\"FTCLOSE\"\n\"VGET ZTEMPF\"\n\"EDIT DATASET('\"ZTEMPF\"') \"      /* SHOW JCL ON ISPF EDIT PANEL     */\nEND\nIF DLAUTO = Y THEN DO /* BEGINNING OF AUTOMATIC SUBMIT LOGIC */\nADDRESS ISPEXEC\n\"FTOPEN TEMP\"\n\"FTINCL FILEXFER\"\n\"FTCLOSE\"\n\"VGET ZTEMPF\"\nADDRESS TSO \"SUBMIT '\"ZTEMPF\"'\"    /* SUBMIT THE JCL           */\nEND /* end of automatic submit logic */\nEXIT 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DNLDHLP1": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01Z\\x00\\x11\\x01\\x112\\x9f\\x01\\x15\\x13_\\x13(\\x01\\xed\\x00\\x1c\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.90", "flags": 0, "createdate": "2011-11-25T00:00:00", "modifydate": "2015-05-15T13:28:11", "lines": 493, "newlines": 28, "modlines": 0, "user": "TTZC28"}, "text": ")ATTR DEFAULT(!$%)\n< AREA(SCRL) EXTEND(ON)\n)BODY\n!------------------------ ISPF Client Server Toolbox ---------------------------\n!COMMAND ===>%ZCMD                                                             !\n<AREA1                                                                         <\n)AREA AREA1  DEPTH(1)\n This Help module is displayed by panels in the ISPF Client Server Toolbox.\n  The term \"Toolbox\" is used to differentiate the non-IBM elements in this\n  toolset from standard IBM ISPF Client Server features.\n\n DOWNLOAD and DNLD - Download a mainframe file or report to a menu selectable\n  folder on a PC workstation or network drive.  Use as a line command on DSLIST\n  or as a primary command in an Edit or View session.  DOWNLOAD can also be\n  invoked by typing TSO DOWNLOAD on an ISPF command line and then manually\n  entering the Mainframe Data Set name.  DNLD works the same as DOWNLOAD.\n\n EMAIL - Attach a mainframe file or report to a new Microsoft Outlook email.\n  Use as a line command on DSLIST or as a primary command in an Edit or View\n  session.\n\n UPLOAD and UPLD - Use as a line command on DSLIST to upload a file from a PC\n  workstation or network drive to create or replace a mainframe file or member\n  of a partitioned data data set.  UPLOAD can also be invoked by typing TSO\n  UPLOAD on an ISPF command line and then manually entering the name of the\n  Mainframe Data Set/PDS member that will be created or replaced.  If the target\n  mainframe data set does not exist, the Data Set Utility panel (ISPF 3.2) is\n  displayed to facilitate its allocation.  UPLD works the same as UPLOAD.\n\n MFEDIT is used as a primary command (i.e. TSO MFEDIT) to edit an existing\n  workstation file or to create a new one with mainframe ISPF Edit.  As with the\n  standard ISPF Edit Entry Panel, workstation files with records longer than 255\n  bytes are wrapped and converted to 255 byte records if the file is saved. Use\n  MFEDIT with caution.\n\n For DOWNLOAD and EMAIL, the default Workstation file name or Attachment name is\n  the Mainframe Data Set name followed by .TXT or .BIN based on the value of\n  \"(T)ext or (B)inary\" unless \"Append .TXT or .BIN\" is set to \"N\".  Modify the\n  Workstation file name or Attachment name as desired.\n\n For UPLOAD and MFEDIT, the full Workstation file name including extension, if\n  any, must be supplied.\n\n Additional Toolbox dialogs that do not display panels and a standalone batch\n file transfer facility are described later in this help module.\n\n -------------------------------------------------------------------------------\n\n The ISPF Workstation Connection\n\n An active connection between a mainframe ISPF session and an ISPF Workstation\n  Agent running under Microsoft Windows is required in order to perform an\n  interactive Toolbox function.  Toolbox dialogs automatically display the WSCON\n  \"Initiate Workstation Connection\" screen when performing an interactive\n  function if a workstation connection does not already exist.\n\n A single Workstation Agent can provide concurrent services to multiple ISPF\n  sessions and batch jobs running on different mainframe systems.\n\n A batch job submitted by a Toolbox dialog establishes its own workstation\n  connection and does not require the ISPF session from which it was submitted\n  to remain active.  A Workstation Agent must remain active until all batch jobs\n  using it or waiting to use it have finished. Do not Shut Down or Restart a PC\n  Workstation or Log off Windows while a Workstation Agent is in use.\n\n The TCP/IP address of the target PC workstation must be provided on the ISPF\n  WSCON \"Initiate Workstation Connection\" screen for both Interactive functions\n  performed by Toolbox dialogs and for batch jobs submitted from Toolbox\n  dialogs.\n\n The TCP/IP address of a PC workstation is subject to change when its lease\n  expires, when a local network is reconfigured or when the PC workstation is\n  connected through a VPN.  If it changes frequently, using an IPCONFIG.BAT file\n  can make it easier to determine, e.g.\n\n     CD \\\n     IPCONFIG\n     PAUSE\n\n Putting IPCONFIG.BAT in the Windows Startup folder displays a PC's IP address\n during each Windows logon.\n\n -------------------------------------------------------------------------------\n\n Working Directories\n\n  Up to four Working Directory names can be stored on and are shared by Toolbox\n  panels except for EMAIL which has its own Working Directory.  For panels\n  having fields for four working directories, if one working directory is\n  modified, the change is reflected on other Toolbox panels that have fields for\n  four working directories.\n\n Provide embedded spaces when continuing a working directory path to a second\n line.\n\n PC workstation folders that have been mapped as network drives are READ ONLY\n  and cannot be targets of downloads.  Folders on network servers that have been\n  mapped as network drives can be used for either download or upload.\n\n Working Directories - How to determine the path.\n\n  1. Using Microsoft Windows Explorer, right click on the icon of the PC\n     Workstation or network drive folder that will be used as a Working\n     Directory.\n  2. Click Properties.\n  3. Copy and Paste the Location into one of the four fields provided for the\n     entry and storing of working directory paths.\n\n     Manual entry or multiple Copy and Paste actions may be necessary when\n     entering a working directory path longer than 74 characters.\n\n -------------------------------------------------------------------------------\n\n Download a PDS/PDSE member - one of several ways:\n\n  Select the PDS/PDSE from DSLIST with the \"M\" (member list) line command which\n  provides an eight character command field where DNLD may be entered.\n\n  Example:\n\n    DSLIST            KCTSHARE.TECH.TTZC28.JCLLIB               Row 00020\n    Command ===>                                                  Scroll =\n               Name     Prompt       Size   Created          Changed\n    _________ CICSMSF                  47  2011/02/28  2011/02/28 16:54:49\n    DNLD_____ CLPDSPP                  11  2011/11/18  2011/11/18 10:56:53\n    _________ CLPDSPQ                  11  2011/11/18  2011/11/18 12:56:11\n    _________ CLPDSTP                  27  2011/11/18  2011/11/18 10:25:17\n    _________ CLPDSTQ                  27  2011/11/18  2011/11/18 10:18:10\n\n -------------------------------------------------------------------------------\n\n Upload/replace a PDS/PDSE member - one of several ways:\n\n  Select the PDS/PDSE from DSLIST with the \"M\" (member list) line command which\n  provides an eight character command field where UPLOAD or UPLD may be entered.\n\n  Example:\n\n    DSLIST            KCTSHARE.TECH.TTZC28.JCLLIB               Row 00020\n    Command ===>                                                  Scroll =\n               Name     Prompt       Size   Created          Changed\n    _________ CICSMSF                  47  2011/02/28  2011/02/28 16:54:49\n    UPLD_____ CLPDSPP                  11  2011/11/18  2011/11/18 10:56:53\n    _________ CLPDSPQ                  11  2011/11/18  2011/11/18 12:56:11\n    _________ CLPDSTP                  27  2011/11/18  2011/11/18 10:25:17\n    _________ CLPDSTQ                  27  2011/11/18  2011/11/18 10:18:10\n\n  This method can also be used to create a new PDS member by typing UPLOAD OR\n  UPLD by an existing member and then modifying the member name on the Upload\n  Data Set screen when it is displayed.\n\n -------------------------------------------------------------------------------\n\n TSO Region Size requirements for edit macros used in an Edit or View session:\n\n  Edit macros in this toolbox copy the object being edited or viewed to a\n  dynamically allocated temporary file which is then downloaded to a workstation\n  file or displayed in Microsoft Notepad.  The maximum size of the temporary\n  file is dependent on TSO region size.\n\n  A TSO region size of 32768 (32 megabytes) has been found to be adequate for an\n  object with 133 character lines and up to 120,000 rows.  A TSO region size of\n  49152 (48 megabytes) has been found to be adequate for an object with 133\n  character lines and up to 200,000 records or lines.\n\n  For larger objects, adjust TSO region size upwards in increments of 1024 or\n  use the dialog as a line command if possible.\n\n  The larger the report or file, the longer it takes to create the temporary\n  file in an Edit or View session.\n\n  Does using DOWNLOAD as a primary command in an Edit or View session really\n  require interactive mode?  No.  Batch mode can be used as long as one does not\n  return (i.e. PF3) to the Edit or View session from which DOWNLOAD was invoked\n  until after the batch download job has started.  Premature return to the Edit\n  or View session will cause the batch job to abend due to \"FILE NOT FOUND\".\n  The running batch job prevents the dialog from deleting the temporary file but\n  may trigger the display of file contention warning messages which can be\n  ignored.\n\n  When using batch mode when DOWNLOAD is invoked from an Edit or View session,\n  it is the user's responsibility to manually delete the temporary file after\n  the batch job ends.  Temporary file names are in one of the following formats\n  depending on mainframe system configuration:\n       syspref.userid.EDNLD.SP_time_stamp\n       userid.EDNLD.SP_time_stamp\n -------------------------------------------------------------------------------\n\n ISPF Workstation Agent Installation instructions:\n  Applies to Microsoft Windows XP and below regardless of z/OS version.\n  Applies to Windows 7 and above with z/OS ISPF 2.1 and above.\n  Applies to Windows 7 and above with ISPF 1.13 and below with APAR OA39571.\n\n  The ISPF Workstation Agent install file is obtained by downloading\n   'SYS1.ISP.SISPGUI(ISPGUINX)' in binary to ISPFINST.EXE in a folder (e.g.\n   ISPFCS in My Documents) created on a PC Workstation to hold the Workstation\n   Agent components.  Use the file transfer facility of a terminal emulator or\n   FTP, if available, to perform the download.  If updating an existing\n   functional Workstation Agent with a newer version, ISPF 3.7.1 may be used.\n\n  Run ISPFINST.EXE to install the ISPF Client Server components into the same\n   directory to which it was downloaded.  Reply to prompts during the\n   installation and ignor the message that directs you to modify a PATH.  Do not\n   delete ISPFINST.EXE after the install in case it is necessary to reinstall\n   the Workstation Agent.\n\n -------------------------------------------------------------------------------\n\n ISPF Workstation Agent Installation instructions:\n  Applies to Microsoft Windows 7 and above with z/OS 1.13 but without z/OS\n   APAR OA39571.\n\n  The Workstation Agent installation program provided with z/OS 1.13 will not\n  run on a Windows 7 workstation unless ISPFINST.EXE has been downloaded from a\n  z/OS system on which APAR OA39571 has been implemented.\n\n  In this situation, obtain INSPFINST.EXE from either a Z/OS 1.13 system that\n  has had APAR OA39571 implemented or from a z/OS 2.1 system.\n\n  Alternatively, the five required Workstation Agent components from a\n  functioning Workstation Agent installation can be copied to a PC\n  workstation:  DBCS.TBL DTWSA.DLL MSG.TBL SBCS.TBL WSA.EXE\n\n  Contact mainframe support staff if you require assistance.\n\n -------------------------------------------------------------------------------\n\n Workstation Agent Configuration for a TCP/IP connection. (APPC will not be\n  covered here.)\n\n  Add a shortcut for WSA.EXE to the Windows Startup folder so that the\n   Workstation Agent is always available when needed - important since\n   Batch client server functions abend if the target Workstation Agent is not\n   active.  A WSA shortcut in the Windows Startup folder can also be used to\n   restart the WSA - necessary after modifying a WSA setting.\n\n  A WSA shortcut on the Windows Desktop can also be useful.  The WSA is shown\n   in Windows \"All Programs\" only if a shortcut is added to the Windows Startup\n   folder.\n\n  The Workstation Agent can be used as installed but performing a few simple\n   configuration steps can reduce effort and eliminate errors.  It is\n   particularly advantageous to allow mainframe ISPF sessions and batch jobs to\n   automatically connect to a workstation agent rather than to manually respond\n   to each connection request and cause batch jobs to wait and ISPF sessions to\n   \"clock\".\n\n  Step by step:\n\n  Select Options ... Information from the Workstation Agent window.\n   Verify that the TCP Status is:\n\n       \"TCP initialized\"\n             0  Sesssions(s) are active.\n\n       The display of a message other than the above may indicate a nonstandard\n        or damaged Microsoft Windows installation - an unusual occurance.\n       To address this issue, search the PC workstation C: drive for the\n        location of \"WINSOCK\" and record the path to it - typically\n        C:\\WINDOWS\\system32 or C:\\WINDOWS\\sysWOW64\n       Select Options ... Set Winsock Path...\n        Enter the path to WINSOCK in the \"Windows socket library path\" field.\n        Click the OK button.\n       Close and restart the Workstation Agent.\n       Select Options ... Information and recheck the TCP Status.\n       If \"TCP initialized\" is still not displayed, contact PC Support and\n        report a Windows socket issue.\n\n\n  Select Options from the Workstation Agent window.\n   Enable TCP/IP if it is disabled.\n   Disable APPC if it is enabled.\n\n  Select Options ... Set Font.\n   Select font \"Terminal\", Font style \"Regular\" and Size \"9\".\n   Click the OK button.\n\n   Note:  The selected font is used when running ISPF in GUI mode in which each\n    ISPF session is displayed in a separate PC window instead of in the terminal\n    emulator.  If you choose to use GUI mode, you may wish to later alter the\n    font based on how the GUI windows display on your particular workstation\n    screen.\n\n  Select Options ... System Register.\n   Click the Add buttom in the \"Systems\" (upper left) portion of the window.\n   Enter the mainframe System name and its TCP/IP address in the Add System\n   popup window.\n\n    Any word may be used to represent a mainframe system name.\n\n    Enter the system IP address in \"dotted decimal\" format, e.g. 999.999.999.99\n    If unknown, obtain the system IP address from your mainframe support staff.\n\n    Another method of determining a system IP address is to refrain from\n    configuring the System Register for a mainframe system and to note the IP\n    address displayed in the Connection request window when a connection is\n    requested from an ISPF session.\n\n    Click the \"Auto connect list\" selection.\n    Click the Add button for User IDs and enter your mainframe User ID.\n    Click the OK button.\n\n  Close and restart the WSA in order for the changes to take effect.\n\n -------------------------------------------------------------------------------\n\n ISPF session configuration\n\n  Obtain and record the TCP/IP address of your PC workstation.\n\n     The TCP/IP Address of a PC workstation can be determined by typing IPCONFIG\n     at the Microsoft Windows command window prompt, e.g.\n         Start... Run... cmd... IPCONFIG\n\n     In a normal in-office environmnet, use the TCP/IP address displayed for\n     Ethernet adapter Local Area Connection.\n\n     When connected via a VPN (Virtual Private Network), use the TCP/IP address\n     displayed for Ethernet adapter Network Connect Adapter.  Note:  If\n     connecting through a router, it may be necessary to configure it to allow\n     incoming connection requests to pass through it.\n\n  With the Workstation Agent running, type command WSCON on any ISPF command\n   line.\n\n   On the Initiate Workstation Connection popup window (example below),\n\n     Select:  2  \"Without GUI display\" under Workstation Connection\n     Select:  1  \"TCP/IP\" under GUI Network Protocol\n     Enter the TCP/IP address of your PC workstation under \"TCP/IP Address\"\n      where 000.000.00.000 is shown below.\n\n     Leave Host Codepage and Host Character Set blank for now.\n     Select:  1  \"Standard (STD)\" under GUI Window Frame\n     Select:  1  \"Dialog (DLG)\" under Default Window Background Color\n      _______________________________________________________________________\n     |                                                                       |\n     |                   Initiate Workstation Connection                     |\n     | Command ===>                                                          |\n     |                                                          More:     +  |\n     | /  Save values in system profile?  (/=Yes)                            |\n     |                                                                       |\n     | Workstation Connection                    GUI Network Protocol        |\n     | 2  1. With GUI display                    1  1. TCP/IP                |\n     |    2. Without GUI display                    2. APPC                  |\n     |                                              3. Use ISPDTPRF file     |\n     |                                                                       |\n     | GUI Title                                                             |\n     |                                                                       |\n     | TCP/IP Address                                                        |\n     | 000.000.00.000                                                        |\n     | APPC Address                                                          |\n     |                                                                       |\n     |                                                                       |\n     |                                                                       |\n     | Host Codepage  . . .          Host Character Set . . .                |\n     |                                                                       |\n     | GUI Window Frame              Default Window Background Color         |\n     | 1  1. Standard (STD)          1  1. Dialog (DLG)                      |\n     |    2. Fixed (FIX)                2. Standard (STD)                    |\n     |    3. Dialog (DLG)                                                    |\n     |                                                                       |\n     | Press ENTER to initiate a session. Press EXIT or CANCEL to return     |\n     | without initiating a session.                                         |\n     |_______________________________________________________________________|\n\n\n     Press the Enter key.  The word \"Connected\" should appear in the upper\n      right portion of the screen on which you typed WSCON.\n\n     An error message about an invalid Host Codepage or Host Character Set\n      may mean that a terminal query was unable to determine acceptable values.\n      In this case, enter the following values and try again to connect.\n\n         Host Codepage:  0037     Host Character Set:  0697\n\n -------------------------------------------------------------------------------\n\n Workstation Tool Integration Configuration - Optional\n\n  Customizing the Workstation Tool Integration Configuration, per the following\n  instructions, is necessary only if using IBM standard ISPF Client Server\n  features and is not required by the ISPF Client Server Toolbox.\n\n  While the mainframe ISPF session is connected to a Workstation Agent, navigate\n   to either the ISPF Browse or Edit panel.\n\n  From the CUA action bar, choose\n      Workstation ... 1. Workstation Tool Integration\n\n  Select \"View\" and then \"Edit\" with the \"E\" line command.  The below image\n   shows the appropriate field values after configuration has been completed.\n      __________________________________________________________________________\n     |\n     |    File  Map  Help\n     |-------------------------------------------------------------------------\n     |                  Workstation Tool Integration Configuration\n     |  Command ===> ____________________________________________ Scroll ===> CS\n     |\n     |  Press EXIT to save tool configuration to connected workstation hard driv\n     |  Press CANCEL to temporarily update tool configuration for this session.\n     |\n     |  Action: E=Edit V=View\n     |\n     |     Description  Code  Data    Mode      Command\n --->|  E  View         V     TEXT    MODELESS  NOTEPAD\n     |     Edit         E     TEXT    MODAL     NOTEPAD\n     |     **End**\n     |__________________________________________________________________________\n\n\n  For both View and Edit, make NOTEPAD the default Workstation command.\n  Copy and paste the complete path to your My Documents into Working directory.\n  Note:  It may be necessary to manually continue the path name to additional\n         lines depending on path length.\n  Place the cursor on Update and press the Enter key.\n      _____________________________________________________________\n     |                                                             |\n     |                 Modify Tool Configuration                   |\n     |                                                             |\n     | Description  . : View      Code  . : V                      |\n     |                                                             |\n     | Options                                                     |\n --->| Data . . 1  1. Text        Invocation   2  1. Modal         |\n     |             2. Binary                      2. Modeless      |\n     |                                                             |\n     | Workstation command                                         |\n --->| NOTEPAD___________________________________________          |\n     |                                                             |\n     | Additional parameters                                       |\n     | __________________________________________________          |\n     |                                                             |\n     | Working directory                                           |\n --->| C:\\Users\\George.Washington\\Documents______________          |\n     | __________________________________________________          |\n     | __________________________________________________          |\n     | ________________________________________________            |\n     |                                                             |\n     |            Update                   Cancel                  |\n     |_____________________________________________________________|\n\n\n  Note:  The path of My Documents can be determined by mouse clicking the\n         Windows \"Start\" button, right clicking \"My Documents\", and selecting\n         \"Properties\".  Use the mouse to highlight the Target so that it can be\n         copied and pasted into the Working directory field on the Modify Tool\n         Configuration panel.\n\n -------------------------------------------------------------------------------\n\n  Contact mainframe support staff if a mainframe System TCP/IP address appears\n  to have changed and you can not determine or verify the TCP/IP address.\n\n  The mainframe system TCP/IP address can sometimes be determined by pinging the\n  mainframe host name shown in the job logs of the DB2, FTP and TCP/IP started\n  tasks and in the Connection Setup of terminal emulators that are not connected\n  through a proxy (e.g.  MIAP).\n\n    The format of the PING command in ISPF is:  TSO PING host_name\n -------------------------------------------------------------------------------\n\n Additional Toolbox facilities:\n\n NOTEPAD: Display a mainframe file or report in Microsoft Notepad.  Use as a\n  line command on DSLIST or as a primary command in an Edit or View session.\n  It can also be executed on a command line as a CLIST:  TSO NOTEPAD 'dsn'\n  Changes made in Notepad cannot be saved back to the mainframe file.\n\n WORDPAD: Display a mainframe file or report in Microsoft WordPad.  Use as a\n  line command on DSLIST or as a primary command in an Edit or View session.\n  It can also be executed on a command line as a CLIST:  TSO WORDPAD 'dsn'\n  Changes made in WordPad cannot be saved back to the mainframe file.\n\n WORD:    Display a mainframe file or report in Microsoft Word.  Use as a\n  line command on DSLIST or as a primary command in an Edit or View session.\n  It can also be executed on a command line as a CLIST:  TSO WORD 'dsn'\n  Changes made in Word cannot be saved back to the mainframe file.\n\n FILEXFER :  Batch procedure for uploading and downloading files in Text or\n  Binary mode.  Suitable for reusable batch jobs, for batch jobs that transfer\n  multiple files, and for batch jobs that combine file transfers with other\n  actions.\n\n -------------------------------------------------------------------------------\n\n Where to find more information.\n\n  Information about ISPF Client Server functions that Toolbox elements invoke is\n  contained in IBM z/OS ISPF reference manuals.\n\n -------------------------------------------------------------------------------\n)END\n/* Jim Halley, Updated May 2015                                           */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DNLDPANL": {"ttr": 1286, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01b\\x00I\\x01\\x11)?\\x01\\x14\\x10\\x1f\\x13\\x00\\x00\\x9c\\x00G\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.98", "flags": 0, "createdate": "2011-10-20T00:00:00", "modifydate": "2014-04-11T13:00:49", "lines": 156, "newlines": 71, "modlines": 0, "user": "TTZC28"}, "text": ")PANEL\n)ATTR DEFAULT(%~_) FORMAT(MIX)\n/* ~ TYPE(PT) */\n~ TYPE(SAC)\n` TYPE(PIN)\n/* ! TYPE(FP) JUST(LEFT) CAPS(ON) */\n@ TYPE(NT)\n% TYPE(NEF)\n/* # TYPE(NEF) JUST(LEFT) CAPS(ON) */\n# TYPE(INPUT)  INTENS(HIGH) COLOR(RED)    JUST(LEFT) CAPS(ON)\n! TYPE(INPUT)  INTENS(HIGH) COLOR(RED)    JUST(ASIS) CAPS(OFF)\n* TYPE(VOI) JUST(RIGHT) PADC($)\n)BODY EXPAND(\u00ac\u00ac)\n@                  ~Download Data Set with ISPF Client Server@\n@ISPF COMMAND ===>#ZCMD \u00ac \u00ac~\n@\n@ Mainframe Data Set:#Z                                                       @\n@\n@ Workstation file..:!Z                                                       @\n@\n@ Working Directory.:#Z@   (1, 2, 3 or 4)                               PF1=Help\n@\n@    Working Directories - each up to 148 characters long (2 X 74)\n@    ----+----1----+----2----+----3----+----4----+----5----+----6----+----7----\n@ 1:!Z                                                                         @\n@  :!Z                                                                         @\n@ 2:!Z                                                                         @\n@  :!Z                                                                         @\n@ 3:!Z                                                                         @\n@  :!Z                                                                         @\n@ 4:!Z                                                                         @\n@  :!Z                                                                         @\n@\n@ (T)ext or (B)inary......:#Z@     Append .TXT or .BIN to WS file name (Y/N):#Z@\n@ (I)nteractive or (B)atch:#Z@     (DNLD from Edit/View requires Interactive.)\n@ Auto-submit batch (Y/N).:#Z@     Press Enter to start the download process.\n@\n)INIT\n.ZVARS = '(DLMFDSN DLWSDSN DLPATH DLPATH1A DLPATH1B DLPATH2A DLPATH2B +\n           DLPATH3A DLPATH3B DLPATH4A DLPATH4B DLTXT DLEXT DLBTCH DLAUTO)'\n.HELP = DNLDHLP1\n*REXX(DLMFDSN DLWSDSN)\nDLMFDSN = strip(DLMFDSN,b,\"'\") /* Strip any quotes or apostrophes */\nDLMFDSN = strip(DLMFDSN,b,'\"') /* from file name                */\nDLWSDSN = strip(DLWSDSN,b,\"'\") /* Strip any quotes or apostrophes */\nDLWSDSN = strip(DLWSDSN,b,'\"') /* from file name                */\nCall ISPPRXVP 'T'\nEXIT\n*ENDREXX\n.CURSOR = DLWSDSN\n)REINIT\n.CURSOR = &CPOS\n.ATTR (.CURSOR) = 'COLOR(RED) HILITE(USCORE)'\n)PROC\n  VER(&DLMFDSN,NB)\n  VER(&DLWSDSN,NB)\n  VER(&DLPATH,NB,RANGE,1,9)\n  VER(&DLTXT,NB,LIST,T,B)\n  VER(&DLEXT,NB,LIST,Y,N)\n  VER(&DLBTCH,NB,LIST,I,B)\n  VER(&DLAUTO,NB,LIST,Y,N)\n  &DLPATHA = ' '\n  &DLPATHB = ' '\n  &DLWSWRK = ' '\n&CPOS = '---'\n*REXX(*,CPOS,DLPATHA,DLPATHB,DLWSWRK)\n/* trace i */\ndsn = \"'\"||DLMFDSN||\"'\"\nif sysdsn(dsn) <> \"OK\" then\n  do\n    ZRXMSG = 'DNLD001A' /* Display \"not found\" error message */\n    CPOS = 'DLMFDSN'\n    ZRXRC = 8\n    RETURN\n  END\nTABLE1 = '/\\:*?\"<>|' /* Check workstation file name for characters */\nTABLE2 = '         ' /* not allowed by Windows naming conventions. */\nWSDSN = TRANSLATE(DLWSDSN,TABLE2,TABLE1)\nIF WSDSN <> DLWSDSN THEN\n  DO\n    ZRXMSG = 'DNLD004A' /* Invalid File Name */\n    CPOS = 'DLWSDSN'\n    ZRXRC = 8\n    RETURN\n  END\nIF DLPATH = 1 THEN\n  IF DLPATH1A = ' ' THEN\n    DO\n      ZRXMSG = 'DNLD002A' /* Path must be entered if its number   */\n      CPOS = 'DLPATH1A'   /* is entered.                          */\n      ZRXRC = 8\n      RETURN\n    END\n  ELSE\n    DO\n      DLPATHA = DLPATH1A\n      DLPATHB = DLPATH1B\n    END\nIF DLPATH = 2 THEN\n  IF DLPATH2A = ' ' THEN\n    DO\n      ZRXMSG = 'DNLD002A' /* Path must be entered if its number   */\n      CPOS = 'DLPATH2A'   /* is entered.                          */\n      ZRXRC = 8\n      RETURN\n    END\n  ELSE\n    DO\n      DLPATHA = DLPATH2A\n      DLPATHB = DLPATH2B\n    END\nIF DLPATH = 3 THEN\n  IF DLPATH3A = ' ' THEN\n    DO\n      ZRXMSG = 'DNLD002A' /* Path must be entered if its number   */\n      CPOS = 'DLPATH3A'   /* is entered.                          */\n      ZRXRC = 8\n      RETURN\n    END\n  ELSE\n    DO\n      DLPATHA = DLPATH3A\n      DLPATHB = DLPATH3B\n    END\nIF DLPATH = 4 THEN\n  IF DLPATH4A = ' ' THEN\n    DO\n      ZRXMSG = 'DNLD002A' /* Path must be entered if its number   */\n      CPOS = 'DLPATH4A'   /* is entered.                          */\n      ZRXRC = 8\n      RETURN\n    END\n  ELSE\n    DO\n      DLPATHA = DLPATH4A\n      DLPATHB = DLPATH4B\n    END\nIF DLTXT = T & DLEXT = Y THEN\n  DLWSWRK = DLWSDSN||\".TXT\"\nIF DLTXT = B & DLEXT = Y THEN\n  DLWSWRK = DLWSDSN||\".BIN\"\nIF DLEXT = N THEN\n  DLWSWRK = DLWSDSN\nCall ISPPRXVP 'T'\nEXIT\n*ENDREXX\nVPUT (DLMFDSN DLWSDSN DLPATH DLPATH1A DLPATH1B DLPATH2A DLPATH2B +\n      DLPATH3A DLPATH3B DLPATH4A DLPATH4B DLTXT DLEXT DLBTCH DLPATHA +\n      DLPATHB DLWSWRK DLAUTO) PROFILE\nIF (&DLBTCH=I)\n  &ZSEL = 'CMD(DNLDACTV)' /* download file interactively */\n\nIF (&DLBTCH=B)\n  &ZSEL = 'CMD(DNLDBTCH)' /* download file in batch */\n)END\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DNLD00": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x01\\x01\\x11)O\\x01\\x14\\x10\\x1f\\x13\\x00\\x00\\x0b\\x00\\x02\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2011-10-21T00:00:00", "modifydate": "2014-04-11T13:00:01", "lines": 11, "newlines": 2, "modlines": 0, "user": "TTZC28"}, "text": "DNLD001A  'File not found          '             .ALARM = YES\n'The file or member selected for download does not exist      '\nDNLD002A  'Path required           '             .ALARM = YES\n'A path to the workstation or network drive folder is required'\nDNLD003A  'No connection           '             .ALARM = YES\n'An Interactive download requires a workstation connection.  ' +\n'A workstation connection can be established from the ISPF ' +\n'Settings panel or by entering WSCON at any ISPF command ' +\n'prompt including the one on this panel.'\nDNLD004A  'Invalid file name       '             .ALARM = YES\n'The following characters are not allowed:  /\\:*?\"<>|         '\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOWNLOAD": {"ttr": 1292, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00R\\x01\\x14\\x10\\x1f\\x01\\x14\\x10\\x1f\\x12\\x10\\x00\\x11\\x00\\x11\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-04-11T00:00:00", "modifydate": "2014-04-11T12:10:52", "lines": 17, "newlines": 17, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX NAME:  DOWNLOAD ----------------------------------------------*/\n/* THIS \"FRONT-END\" INVOKES EDNLD IF THE USER IS IN AN EDIT OR        */\n/*    VIEW SESSION.  OTHERWISE, CDNLD IS INVOKED.                     */\n/* -------------------------------------------------------------------*/\n/* TRACE I */\nADDRESS ISREDIT\n\"MACRO\"\nIF RC = 0 /* IS THE USER IN AN EDIT OR VIEW SESSION? */\n  THEN /* INVOKE EDIT MACRO */\n    EDNLD\nELSE\n  DO /* INVOKE COMMAND */\n    ADDRESS ISPEXEC\n    ARG DATA_SET_NAME\n    \"SELECT CMD(\"CDNLD DATA_SET_NAME\") NEWAPPL(ISR)\"\n  END\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EDNLD": {"ttr": 1294, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x18\\x01\\x15\\t/\\x01\\x152\\x8f\\x10T\\x00A\\x003\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2015-04-02T00:00:00", "modifydate": "2015-11-24T10:54:18", "lines": 65, "newlines": 51, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX NAME:  EDNLD -------------------------------------------------*/\n/* Store the contents of the file or report being edited in a temp    */\n/*    file and then invoke CDNLD.                                     */\n/* -------------------------------------------------------------------*/\nAddress ISREDIT MACRO\nAddress ISREDIT \"(lrecl) = DATA_WIDTH\"\n\n/* --------------------------------------------------------- *\n * Create a temp file to contain the file or report.         *\n * --------------------------------------------------------- */\nAddress TSO\nparse value time() with hh\":\"mm\":\"ss\nddn  = \"sp\"hh\"\"mm\"\"ss  /* include timestamp to make file name unique */\nif sysvar('syspref') = sysvar('sysuid') then\n   dsn = \"'\"sysvar(\"sysuid\")\".eDNLD.\"ddn\"'\"\nelse\n   dsn = \"'\"sysvar(syspref)\".\"sysvar(\"sysuid\")\".eDNLD.\"ddn\"'\"\n\n\"Alloc f(\"ddn\") new spa(90,90) tr\" ,\n \"dsn(\"dsn\") release\" ,\n \"recfm(f b) lrecl(\"lrecl\") blksize(0)\"\n\nAddress ISPEXEC \"VGET ZPANELID SHARED\"\nIF SUBSTR(ZPANELID,1,3) = \"LIB\" THEN   /* If invoked from ELIPS */\n  CALL Use_Stem_and_EXECIO /* (ELIPS not compatible with ISREDIT REPLACE) */\nELSE\n  CALL Use_ISREDIT_REPLACE /* For ISPF, SDSF, use much faster method */\n\n\"Free f(\"ddn\")\"\n\n/* --------------------------------------------------------- *\n * execute the CDNLD REXX passing the temp file name.        *\n * --------------------------------------------------------- */\naddress ispexec\n\"Select cmd(\"CDNLD dsn\") NewAppl(ISR)\"\n\n/* ------------------------------------------ *\n * Delete the temp file and then Exit.        *\n * ------------------------------------------ */\n Address TSO\n call msg \"off\"\n \"Delete\" dsn\n exit 0\n\n/* ------------------------------------------ *\n * Called routines follow ...                 *\n * ------------------------------------------ */\nUse_ISREDIT_REPLACE:\n/* say \"Using ISREDIT REPLACE\" */\n   Address ISREDIT \"REPLACE \"dsn\" .ZFIRST .ZLAST\"\nReturn\n\nUse_Stem_and_EXECIO:\n/* say \"Using STEM and EXECIO\" */\n   Address ISREDIT \"(first) = LINENUM .zfirst\"\n   Address ISREDIT \"(last) = LINENUM .zlast\"\n   i = 0\n   do linenum = first to last /* Store edited module in stem */\n       i = i + 1\n       Address ISREDIT \"(temp) = LINE\" linenum\n       line.i = temp\n   end\n   Address TSO\n   \"EXECIO * diskw \"ddn\" (finis stem line.\" /* Write all to temp file */\nReturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EEMAIL": {"ttr": 1296, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x007\\x01\\x15\\t/\\x01\\x152\\x8f\\x10T\\x00A\\x00/\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2015-04-02T00:00:00", "modifydate": "2015-11-24T10:54:37", "lines": 65, "newlines": 47, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX NAME:  EEMAIL   ----------------------------------------------*/\n/* Store the contents of the file or report being edited in a temp    */\n/*    file and then invoke CEMAIL.                                    */\n/* -------------------------------------------------------------------*/\nAddress ISREDIT MACRO\nAddress ISREDIT \"(lrecl) = DATA_WIDTH\"\n\n/* --------------------------------------------------------- *\n * Create a temp file to contain the file or report.         *\n * --------------------------------------------------------- */\nAddress TSO\nparse value time() with hh\":\"mm\":\"ss\nddn  = \"sp\"hh\"\"mm\"\"ss  /* include timestamp to make file name unique */\nif sysvar('syspref') = sysvar('sysuid') then\n   dsn = \"'\"sysvar(\"sysuid\")\".eEMAIL.\"ddn\"'\"\nelse\n   dsn = \"'\"sysvar(syspref)\".\"sysvar(\"sysuid\")\".eEMAIL.\"ddn\"'\"\n\n\"Alloc f(\"ddn\") new spa(90,90) tr\" ,\n \"dsn(\"dsn\") release\" ,\n \"recfm(f b) lrecl(\"lrecl\") blksize(0)\"\n\nAddress ISPEXEC \"VGET ZPANELID SHARED\"\nIF SUBSTR(ZPANELID,1,3) = \"LIB\" THEN   /* If invoked from ELIPS */\n  CALL Use_Stem_and_EXECIO /* (ELIPS not compatible with ISREDIT REPLACE) */\nELSE\n  CALL Use_ISREDIT_REPLACE /* For ISPF, SDSF, use much faster method */\n\n\"Free f(\"ddn\")\"\n\n/* --------------------------------------------------------- *\n * execute the CEMAIL REXX passing the temp file name.       *\n * --------------------------------------------------------- */\naddress ispexec\n\"Select cmd(\"CEMAIL dsn\") NewAppl(ISR)\"\n\n/* ------------------------------------------ *\n * Delete the temp file and then Exit.        *\n * ------------------------------------------ */\n Address TSO\n call msg \"off\"\n \"Delete\" dsn\n exit 0\n\n/* ------------------------------------------ *\n * Called routines follow ...                 *\n * ------------------------------------------ */\nUse_ISREDIT_REPLACE:\n/* say \"Using ISREDIT REPLACE\" */\n   Address ISREDIT \"REPLACE \"dsn\" .ZFIRST .ZLAST\"\nReturn\n\nUse_Stem_and_EXECIO:\n/* say \"Using STEM and EXECIO\" */\n   Address ISREDIT \"(first) = LINENUM .zfirst\"\n   Address ISREDIT \"(last) = LINENUM .zlast\"\n   i = 0\n   do linenum = first to last /* Store edited module in stem */\n       i = i + 1\n       Address ISREDIT \"(temp) = LINE\" linenum\n       line.i = temp\n   end\n   Address TSO\n   \"EXECIO * diskw \"ddn\" (finis stem line.\" /* Write all to temp file */\nReturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EMAIL": {"ttr": 1298, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00F\\x01\\x14$\\x7f\\x01\\x15\\t/\\x13E\\x00\\x11\\x00\\x12\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2014-09-04T00:00:00", "modifydate": "2015-04-02T13:45:46", "lines": 17, "newlines": 18, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX NAME:  EMAIL   -----------------------------------------------*/\n/* THIS \"FRONT-END\" INVOKES EEMAIL IF THE USER IS IN AN EDIT OR       */\n/*    VIEW SESSION.  OTHERWISE, CEMAIL IS INVOKED.                    */\n/* -------------------------------------------------------------------*/\n/* TRACE I */\nADDRESS ISREDIT\n\"MACRO\"\nIF RC = 0 /* IS THE USER IN AN EDIT OR VIEW SESSION? */\n  THEN /* INVOKE EDIT MACRO */\n    EEMAIL\nELSE\n  DO /* INVOKE COMMAND */\n    ADDRESS ISPEXEC\n    ARG DATA_SET_NAME\n    \"SELECT CMD(\"CEMAIL DATA_SET_NAME\") NEWAPPL(ISR)\"\n  END\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EMAIL$": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x007\\x01\\x15\\t/\\x01\\x15\\t/\\x13$\\x000\\x00/\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2015-04-02T00:00:00", "modifydate": "2015-04-02T13:24:37", "lines": 48, "newlines": 47, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX name:  EMAIL$  -----------------------------------------------*/\n/* Invoke ISPF Client Server FILEXFER to download file interactively  */\n/* and then attach it to a new email.                                 */\n/* -------------------------------------------------------------------*/\n/* TRACE I */\nADDRESS ISPEXEC\n\"VGET ZWSCON SHARED\"\n\nIF ZWSCON = ' ' THEN\n  DO\n    SAY 'No workstation connection.'\n    SAY 'Press the ENTER key and initiate a workstation connection ...'\n    SAY '  after verifying that the ISPF Workstation Agent is active. '\n    \"SELECT PGM(ISPWSCD) PARM(WSCON,PANEL)\"\n    \"VGET ZWSCON SHARED\"\n  END\n\nIF ZWSCON = ' ' THEN\n  DO\n    SAY 'No workstation connection.  An active workstation ...'\n    SAY '  connection is required for Interactive mode.'\n    EXIT\n  END\nADDRESS ISPEXEC\n\"VGET (OLMFDSN OLPATHA OLPATHB OLWSWRK OLTXT) PROFILE\"\nVAR1 = \"'\"||OLMFDSN||\"'\"\nIF OLPATHB > ' ' THEN                            /* PRESERVE TRAILING   */\n  VAR2 = LEFT(OLPATHA,74)||OLPATHB||\"\\\"||OLWSWRK /* SPACES ON PATH PART */\nELSE                                             /* A WHEN PATH PART B  */\n  VAR2 = OLPATHA||OLPATHB||\"\\\"||OLWSWRK          /* IS SUPPLIED.        */\n'VPUT (VAR1 VAR2)'\nIF OLTXT = T THEN\n  'FILEXFER HOST(VAR1) WS(VAR2) TO(WS) TEXT'\nELSE\n  'FILEXFER HOST(VAR1) WS(VAR2) TO(WS) BINARY'\nIF RC /= 0 THEN\n  DO\n    SAY 'DOWNLOAD NOT SUCCESSFUL.  EMAIL WILL ...'\n    SAY '  NOT BE INVOKED.  FILEXFER RETURN CODE = ' RC\n    EXIT\n  END\n/* Customize below for your particular email product */\nVAR2 = '\"'||VAR2||'\"'  /* Outlook requires quotation marks */\n'ISPEXEC SELECT WSCMD(CMD /C START OUTLOOK /a &VAR2) INVIS'\nsay 'The file has been attached to a new email.'\nOLPATHX = VAR2\n\"VPUT (OLPATHX) PROFILE\"\n/* 'ISPEXEC SELECT WSCMD(CMD /C DEL &OLPATHX) INVIS' */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EMAILP": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x007\\x01\\x15\\t/\\x01\\x15\\t/\\x14P\\x00b\\x00b\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2015-04-02T00:00:00", "modifydate": "2015-04-02T14:50:37", "lines": 98, "newlines": 98, "modlines": 0, "user": "TTZC28"}, "text": ")PANEL\n)ATTR DEFAULT(%~_) FORMAT(MIX)\n/* ~ TYPE(PT) */\n~ TYPE(SAC)\n` TYPE(PIN)\n/* ! TYPE(FP) JUST(LEFT) CAPS(ON) */\n@ TYPE(NT)\n% TYPE(NEF)\n/* # TYPE(NEF) JUST(LEFT) CAPS(ON) */\n# TYPE(INPUT)  INTENS(HIGH) COLOR(RED)    JUST(LEFT) CAPS(ON)\n! TYPE(INPUT)  INTENS(HIGH) COLOR(RED)    JUST(ASIS) CAPS(OFF)\n* TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE(BLINK)\n)BODY EXPAND(\u00ac\u00ac)\n@                  ~Email Attachment via ISPF Client Server@\n@ISPF COMMAND ===>#ZCMD \u00ac \u00ac~\n@\n@ Mainframe Data Set:#Z                                                       @\n@\n@ Attachment Name...:!Z                                                       @\n@\n@ The one-time entry of a working directory dedicated solely to this function is\n@ required.  The path to this dedicated folder can span the two entry fields\n@ below and be up to 148 characters in length.  Example:\n@    C:\\Users\\George.Washington\\Documents\\ISPFCS\\Email\n@\n@    ----+----1----+----2----+----3----+----4----+----5----+----6----+----7----\n@  :!Z                                                                         @\n@  :!Z                                                                         @\n@\n@ (T)ext or (B)inary......:#Z@     Append .TXT/.BIN to Attachment name (Y/N):#Z@\n@\n@ Modify the Attachment Name if desired. Comply with Windows naming conventions.\n@\n@ CAUTION:  Emails that contain personally identifiable information (PII) or\n@           other senstive information*must@be encrypted.\n)INIT\n.ZVARS = '(OLMFDSN OLWSDSN OLPATH1A OLPATH1B OLTXT OLEXT)'\n.HELP = DNLDHLP1\n*REXX(OLMFDSN OLWSDSN)\nOLMFDSN = strip(OLMFDSN,b,\"'\") /* Strip any quotes or apostrophes */\nOLMFDSN = strip(OLMFDSN,b,'\"') /* from file name                */\nOLWSDSN = strip(OLWSDSN,b,\"'\") /* Strip any quotes or apostrophes */\nOLWSDSN = strip(OLWSDSN,b,'\"') /* from file name                */\nCall ISPPRXVP 'T'\nEXIT\n*ENDREXX\n.CURSOR = OLWSDSN\n)REINIT\n.CURSOR = &CPOS\n.ATTR (.CURSOR) = 'COLOR(RED) HILITE(USCORE)'\n)PROC\n  VER(&OLMFDSN,NB)\n  VER(&OLWSDSN,NB)\n  VER(&OLTXT,NB,LIST,T,B)\n  VER(&OLEXT,NB,LIST,Y,N)\n  &OLPATHA = ' '\n  &OLPATHB = ' '\n  &OLWSWRK = ' '\n&CPOS = '---'\n*REXX(*,CPOS,OLPATHA,OLPATHB,OLWSWRK)\ndsn = \"'\"||OLMFDSN||\"'\"\nTABLE1 = '/\\:*?\"<>|' /* Check workstation file name for characters */\nTABLE2 = '         ' /* not allowed by Windows naming conventions. */\nWSDSN = TRANSLATE(OLWSDSN,TABLE2,TABLE1)\nIF WSDSN <> OLWSDSN THEN\n  DO\n    ZRXMSG = 'DNLD004A' /* Invalid File Name */\n    CPOS = 'OLWSDSN'\n    ZRXRC = 8\n    RETURN\n  END\nIF OLPATH1A = ' ' THEN\n  DO\n    ZRXMSG = 'DNLD002A' /* Path must be entered */\n    CPOS = 'OLPATH1A'\n    ZRXRC = 8\n    RETURN\n  END\nELSE\n  DO\n    OLPATHA = OLPATH1A\n    OLPATHB = OLPATH1B\n  END\nIF OLTXT = T & OLEXT = Y THEN\n  OLWSWRK = OLWSDSN||\".TXT\"\nIF OLTXT = B & OLEXT = Y THEN\n  OLWSWRK = OLWSDSN||\".BIN\"\nIF OLEXT = N THEN\n  OLWSWRK = OLWSDSN\nCall ISPPRXVP 'T'\nEXIT\n*ENDREXX\nVPUT (OLMFDSN OLWSDSN OLPATH OLPATH1A OLPATH1B +\n      OLTXT OLPATHA +\n      OLPATHB OLWSWRK) PROFILE\n&ZSEL = 'CMD(EMAIL$)' /* download file interactively */\n)END\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ENOTEPAD": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00(\\x01\\x15\\t\\x1f\\x01\\x15\\x11\\x1f\\x12\\x13\\x00A\\x01\\x17\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "2015-04-01T00:00:00", "modifydate": "2015-04-21T12:13:28", "lines": 65, "newlines": 279, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX NAME:  ENOTEPAD ----------------------------------------------*/\n/* Store the contents of the file or report being edited in a temp    */\n/*    file and then invoke CNOTEPAD.                                  */\n/* -------------------------------------------------------------------*/\nAddress ISREDIT MACRO\nAddress ISREDIT \"(lrecl) = DATA_WIDTH\"\n\n/* --------------------------------------------------------- *\n * Create a temp file to contain the file or report.         *\n * --------------------------------------------------------- */\nAddress TSO\nparse value time() with hh\":\"mm\":\"ss\nddn  = \"sp\"hh\"\"mm\"\"ss  /* include timestamp to make file name unique */\nif sysvar('syspref') = sysvar('sysuid') then\n   dsn = eNOTEPAD.\"ddn\"\nelse\n   dsn = \"'\"sysvar(syspref)\".\"sysvar(\"sysuid\")\".eNOTEPAD.\"ddn\"'\"\n\n\"Alloc f(\"ddn\") new spa(90,90) tr\" ,\n \"dsn(\"dsn\") release\" ,\n \"recfm(f b) lrecl(\"lrecl\") blksize(0)\"\n\nAddress ISPEXEC \"VGET ZPANELID SHARED\"\nIF SUBSTR(ZPANELID,1,3) = \"LIB\" THEN   /* If invoked from ELIPS */\n  CALL Use_Stem_and_EXECIO /* (ELIPS not compatible with ISREDIT REPLACE) */\nELSE\n  CALL Use_ISREDIT_REPLACE /* For ISPF, SDSF, use much faster method */\n\n\"Free f(\"ddn\")\"\n\n/* --------------------------------------------------------- *\n * execute the CNOTEPAD REXX passing the temp file name.     *\n * --------------------------------------------------------- */\naddress ispexec\n\"Select cmd(\"CNOTEPAD dsn\") NewAppl(ISR)\"\n\n/* ------------------------------------------ *\n * Delete the temp file and then Exit.        *\n * ------------------------------------------ */\n Address TSO\n call msg \"off\"\n \"Delete\" dsn\n exit 0\n\n/* ------------------------------------------ *\n * Called routines follow ...                 *\n * ------------------------------------------ */\nUse_ISREDIT_REPLACE:\n/* say \"Using ISREDIT REPLACE\" */\n   Address ISREDIT \"REPLACE \"dsn\" .ZFIRST .ZLAST\"\nReturn\n\nUse_Stem_and_EXECIO:\n/* say \"Using STEM and EXECIO\" */\n   Address ISREDIT \"(first) = LINENUM .zfirst\"\n   Address ISREDIT \"(last) = LINENUM .zlast\"\n   i = 0\n   do linenum = first to last /* Store edited module in stem */\n       i = i + 1\n       Address ISREDIT \"(temp) = LINE\" linenum\n       line.i = temp\n   end\n   Address TSO\n   \"EXECIO * diskw \"ddn\" (finis stem line.\" /* Write all to temp file */\nReturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EOPENWTH": {"ttr": 1544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00$\\x01\\x14\\x11\\x8f\\x01\\x15\\x11\\x1f\\x13\"\\x00A\\x01\\x18\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2014-04-28T00:00:00", "modifydate": "2015-04-21T13:22:24", "lines": 65, "newlines": 280, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX NAME:  EOPENWTH ----------------------------------------------*/\n/* Store the contents of the file or report being edited in a temp    */\n/*    file and then invoke COPENWTH.                                  */\n/* -------------------------------------------------------------------*/\nAddress ISREDIT MACRO\nAddress ISREDIT \"(lrecl) = DATA_WIDTH\"\n\n/* --------------------------------------------------------- *\n * Create a temp file to contain the file or report.         *\n * --------------------------------------------------------- */\nAddress TSO\nparse value time() with hh\":\"mm\":\"ss\nddn  = \"sp\"hh\"\"mm\"\"ss  /* include timestamp to make file name unique */\nif sysvar('syspref') = sysvar('sysuid') then\n   dsn = eOPENWTH.\"ddn\"\nelse\n   dsn = \"'\"sysvar(syspref)\".\"sysvar(\"sysuid\")\".eOPENWTH.\"ddn\"'\"\n\n\"Alloc f(\"ddn\") new spa(90,90) tr\" ,\n \"dsn(\"dsn\") release\" ,\n \"recfm(f b) lrecl(\"lrecl\") blksize(0)\"\n\nAddress ISPEXEC \"VGET ZPANELID SHARED\"\nIF SUBSTR(ZPANELID,1,3) = \"LIB\" THEN   /* If invoked from ELIPS */\n  CALL Use_Stem_and_EXECIO /* (ELIPS not compatible with ISREDIT REPLACE) */\nELSE\n  CALL Use_ISREDIT_REPLACE /* For ISPF, SDSF, use much faster method */\n\n\"Free f(\"ddn\")\"\n\n/* --------------------------------------------------------- *\n * execute the COPENWTH REXX passing the temp file name.     *\n * --------------------------------------------------------- */\naddress ispexec\n\"Select cmd(\"COPENWTH dsn\") NewAppl(ISR)\"\n\n/* ------------------------------------------ *\n * Delete the temp file and then Exit.        *\n * ------------------------------------------ */\n Address TSO\n call msg \"off\"\n \"Delete\" dsn\n exit 0\n\n/* ------------------------------------------ *\n * Called routines follow ...                 *\n * ------------------------------------------ */\nUse_ISREDIT_REPLACE:\n/* say \"Using ISREDIT REPLACE\" */\n   Address ISREDIT \"REPLACE \"dsn\" .ZFIRST .ZLAST\"\nReturn\n\nUse_Stem_and_EXECIO:\n/* say \"Using STEM and EXECIO\" */\n   Address ISREDIT \"(first) = LINENUM .zfirst\"\n   Address ISREDIT \"(last) = LINENUM .zlast\"\n   i = 0\n   do linenum = first to last /* Store edited module in stem */\n       i = i + 1\n       Address ISREDIT \"(temp) = LINE\" linenum\n       line.i = temp\n   end\n   Address TSO\n   \"EXECIO * diskw \"ddn\" (finis stem line.\" /* Write all to temp file */\nReturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EWORD": {"ttr": 1546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00H\\x01\\x15\\t/\\x01\\x15\\x11\\x1f\\x13#\\x00A\\x00/\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2015-04-02T00:00:00", "modifydate": "2015-04-21T13:23:48", "lines": 65, "newlines": 47, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX NAME:  EWORD    ----------------------------------------------*/\n/* Store the contents of the file or report being edited in a temp    */\n/*    file and then invoke CWORD.                                     */\n/* -------------------------------------------------------------------*/\nAddress ISREDIT MACRO\nAddress ISREDIT \"(lrecl) = DATA_WIDTH\"\n\n/* --------------------------------------------------------- *\n * Create a temp file to contain the file or report.         *\n * --------------------------------------------------------- */\nAddress TSO\nparse value time() with hh\":\"mm\":\"ss\nddn  = \"sp\"hh\"\"mm\"\"ss  /* include timestamp to make file name unique */\nif sysvar('syspref') = sysvar('sysuid') then\n   dsn = eWORD.\"ddn\"\nelse\n   dsn = \"'\"sysvar(syspref)\".\"sysvar(\"sysuid\")\".eWORD.\"ddn\"'\"\n\n\"Alloc f(\"ddn\") new spa(90,90) tr\" ,\n \"dsn(\"dsn\") release\" ,\n \"recfm(f b) lrecl(\"lrecl\") blksize(0)\"\n\nAddress ISPEXEC \"VGET ZPANELID SHARED\"\nIF SUBSTR(ZPANELID,1,3) = \"LIB\" THEN   /* If invoked from ELIPS */\n  CALL Use_Stem_and_EXECIO /* (ELIPS not compatible with ISREDIT REPLACE) */\nELSE\n  CALL Use_ISREDIT_REPLACE /* For ISPF, SDSF, use much faster method */\n\n\"Free f(\"ddn\")\"\n\n/* --------------------------------------------------------- *\n * execute the CWORD REXX passing the temp file name.        *\n * --------------------------------------------------------- */\naddress ispexec\n\"Select cmd(\"CWORD dsn\") NewAppl(ISR)\"\n\n/* ------------------------------------------ *\n * Delete the temp file and then Exit.        *\n * ------------------------------------------ */\n Address TSO\n call msg \"off\"\n \"Delete\" dsn\n exit 0\n\n/* ------------------------------------------ *\n * Called routines follow ...                 *\n * ------------------------------------------ */\nUse_ISREDIT_REPLACE:\n/* say \"Using ISREDIT REPLACE\" */\n   Address ISREDIT \"REPLACE \"dsn\" .ZFIRST .ZLAST\"\nReturn\n\nUse_Stem_and_EXECIO:\n/* say \"Using STEM and EXECIO\" */\n   Address ISREDIT \"(first) = LINENUM .zfirst\"\n   Address ISREDIT \"(last) = LINENUM .zlast\"\n   i = 0\n   do linenum = first to last /* Store edited module in stem */\n       i = i + 1\n       Address ISREDIT \"(temp) = LINE\" linenum\n       line.i = temp\n   end\n   Address TSO\n   \"EXECIO * diskw \"ddn\" (finis stem line.\" /* Write all to temp file */\nReturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EWORDPAD": {"ttr": 1548, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x11\\x01\\x15\\t/\\x01\\x15\\x11\\x1f\\x13D\\x00A\\x00/\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2015-04-02T00:00:00", "modifydate": "2015-04-21T13:44:11", "lines": 65, "newlines": 47, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX NAME:  EWORDPAD ----------------------------------------------*/\n/* Store the contents of the file or report being edited in a temp    */\n/*    file and then invoke CWORDPAD.                                  */\n/* -------------------------------------------------------------------*/\nAddress ISREDIT MACRO\nAddress ISREDIT \"(lrecl) = DATA_WIDTH\"\n\n/* --------------------------------------------------------- *\n * Create a temp file to contain the file or report.         *\n * --------------------------------------------------------- */\nAddress TSO\nparse value time() with hh\":\"mm\":\"ss\nddn  = \"sp\"hh\"\"mm\"\"ss  /* include timestamp to make file name unique */\nif sysvar('syspref') = sysvar('sysuid') then\n   dsn = eWORDPAD.\"ddn\"\nelse\n   dsn = \"'\"sysvar(syspref)\".\"sysvar(\"sysuid\")\".eWORDPAD.\"ddn\"'\"\n\n\"Alloc f(\"ddn\") new spa(90,90) tr\" ,\n \"dsn(\"dsn\") release\" ,\n \"recfm(f b) lrecl(\"lrecl\") blksize(0)\"\n\nAddress ISPEXEC \"VGET ZPANELID SHARED\"\nIF SUBSTR(ZPANELID,1,3) = \"LIB\" THEN   /* If invoked from ELIPS */\n  CALL Use_Stem_and_EXECIO /* (ELIPS not compatible with ISREDIT REPLACE) */\nELSE\n  CALL Use_ISREDIT_REPLACE /* For ISPF, SDSF, use much faster method */\n\n\"Free f(\"ddn\")\"\n\n/* --------------------------------------------------------- *\n * execute the CWORDPAD REXX passing the temp file name.     *\n * --------------------------------------------------------- */\naddress ispexec\n\"Select cmd(\"CWORDPAD dsn\") NewAppl(ISR)\"\n\n/* ------------------------------------------ *\n * Delete the temp file and then Exit.        *\n * ------------------------------------------ */\n Address TSO\n call msg \"off\"\n \"Delete\" dsn\n exit 0\n\n/* ------------------------------------------ *\n * Called routines follow ...                 *\n * ------------------------------------------ */\nUse_ISREDIT_REPLACE:\n/* say \"Using ISREDIT REPLACE\" */\n   Address ISREDIT \"REPLACE \"dsn\" .ZFIRST .ZLAST\"\nReturn\n\nUse_Stem_and_EXECIO:\n/* say \"Using STEM and EXECIO\" */\n   Address ISREDIT \"(first) = LINENUM .zfirst\"\n   Address ISREDIT \"(last) = LINENUM .zlast\"\n   i = 0\n   do linenum = first to last /* Store edited module in stem */\n       i = i + 1\n       Address ISREDIT \"(temp) = LINE\" linenum\n       line.i = temp\n   end\n   Address TSO\n   \"EXECIO * diskw \"ddn\" (finis stem line.\" /* Write all to temp file */\nReturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FILEXFER": {"ttr": 1550, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x008\\x01\\x11\\x04\\x8f\\x01\\x14\\x00\\x8f\\x14\\x07\\x00-\\x00\\x1c\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2011-02-17T00:00:00", "modifydate": "2014-01-08T14:07:38", "lines": 45, "newlines": 28, "modlines": 0, "user": "TTZC28"}, "text": ")CM MEMBER NAME:  FILEXFER\n)CM PURPOSE:  TRANSFER FILE IN BATCH MODE\n)CM AUTHOR:   JIM HALLEY, 05/09/2012\n//&USEID.FT JOB (FKCQBCBT,PROG),'FILEXFER',REGION=0M,\n//    CLASS=K,MSGCLASS=R,NOTIFY=&USEID\n//********************************************************************\n//*\n//*  SUBMIT THIS JOB - &USEID.FT - TO START THE FILE TRANSFER.\n//*\n//*  YOU WILL BE NOTIFIED WHEN &USEID.FT HAS ENDED.\n//*\n//*  DISPLAY OF THIS JCL MAY BE SUPPRESSED BY SELECTING\n//*  AUTO-SUBMIT ON THE PREVIOUS PANEL.\n//*\n//*         PRESS PF3 TO RETURN TO THE PREVIOUS PANEL\n//*                AFTER SUBMITTING THIS JOB.\n//********************************************************************\n//PRINTCTL    EXEC PGM=IEBGENER,COND=(0,NE)\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD *\n--- BEGINNING OF GENERATED FILEXFER REXX EXEC STATEMENTS --------------\n//         DD DISP=SHR,\n//            DSN=&REXXPDS(FILEXFER)\n//         DD *\n--- END OF GENERATED FILEXFER REXX EXEC STATEMENTS --------------------\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD DUMMY\n//*\n//MOVEFILE EXEC PGM=IKJEFT1B,DYNAMNBR=128,COND=(0,NE)\n//ISPPROF  DD RECFM=FB,LRECL=80,SPACE=(TRK,(2,2,2))\n//ISPMLIB  DD DISP=SHR,DSN=SYS1.ISP.SISPMENU\n//ISPPLIB  DD DISP=SHR,DSN=SYS1.ISP.SISPPENU\n//ISPSLIB  DD DISP=SHR,DSN=SYS1.ISP.SISPSLIB\n//         DD DISP=SHR,DSN=SYS1.ISP.SISPSENU\n//ISPTLIB  DD RECFM=FB,LRECL=80,SPACE=(TRK,(1,0,1))\n//         DD DISP=SHR,DSN=SYS1.ISP.SISPTENU\n//ISPLOG   DD SYSOUT=*,RECFM=FB,LRECL=133\n//SYSEXEC  DD DISP=(OLD,DELETE,DELETE),\n//            DSN=&REXXPDS\n//         DD DISP=SHR,DSN=SYS1.ISP.SISPEXEC\n//SYSPROC  DD DISP=SHR,DSN=SYS1.ISP.SISPCLIB\n//SYSTSPRT DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSTSIN  DD *\n ISPSTART CMD(FILEXFER)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GOOGLE": {"ttr": 1552, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x08\\x01\\x12\"\\x0f\\x01\\x15%/\\x08V\\x00J\\x00;\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2012-08-07T00:00:00", "modifydate": "2015-09-09T08:56:08", "lines": 74, "newlines": 59, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX */\n/* Program  Name..: GOOGLE                                           */\n/* Original Author: Jim Halley                                       */\n/* Original Date..: April 4, 2012                                    */\n/* Program Purpose: Invoke Google search with or without a search    */\n/*                  argument; optionally get search argument from    */\n/*                  the \"word\" (delimited by spaces) cursor is on.   */\n/* The ISPF Work Station Agent must be installed and configured.     */\n/*-------------------------------------------------------------------*/\n/* Maintenance Log:                                                  */\n/*-------------------------------------------------------------------*/\n/*                                                                   */\n/* DATE       PROGRAMMER   COMMENT                                   */\n/* ----       ----------   -------                                   */\n/*                                                                   */\n/* 10-15-2012 J. Halley    Add \"INVIS\" for Windows 7 compatibility   */\n/* 08-09-2012 J. Halley    Add optional cursor sensitivity; e.g.     */\n/*                         Google an error code like with QuickRef.  */\n/* 04-13-2012 J. Halley    With a nod to Rick Silver.                */\n/*                                                                   */\n/*-------------------------------------------------------------------*/\n/* Trace Options  'O'  = Off                                         */\n/*                '?I' = Interactive Debug                           */\n/*                'A'  = Display all clauses before execution        */\n/*-------------------------------------------------------------------*/\ntrace('O')\n'ISPEXEC CONTROL ERRORS RETURN'\n\nAddress ispexec\n'VGET (ZSCREENI,ZSCREENC,ZENVIR)' /* Extract screen image,\n                                     cursor pos and ISPF level  */\nIf substr(zenvir,5,4) <4.5 Then\n  Call get_zscreen_values\nIf substr(zscreeni,zscreenc+1,1) <> ' ' Then\n  Do  /* Extract search argument from screen */\n    name=word(substr(zscreeni,1+lastpos(' ',zscreeni,zscreenc)),1)\n    name=translate(strip(substr(name,1,42)))\n    srcharg = name /* Why capture only the first 42 characters? */\n  End\nELSE\n  Parse Arg srcharg\n  IF srcharg = '' THEN\n    DO\n      SAY 'Enter optional search argument or just press Enter'\n      PULL srcharg\n    END\n\nADDRESS ISPEXEC\n\"VGET ZWSCON SHARED\"\n\nIF ZWSCON = ' ' THEN\n  DO\n    SAY 'No workstation connection.'\n    SAY 'Press the ENTER key and initiate a workstation connection ...'\n    SAY '  after verifying that the ISPF Workstation Agent is active. '\n    \"SELECT PGM(ISPWSCD) PARM(WSCON,PANEL)\"\n    \"VGET ZWSCON SHARED\"\n  END\n\nIF ZWSCON = ' ' THEN\n  DO\n    SAY 'No workstation connection.  An active workstation ...'\n    SAY '  connection is required for Interactive mode.'\n    EXIT\n  END\n\nhplink1='http://www.google.com/search?q='\nhplink2=srcharg\n\nhttp=hplink1||hplink2\nhttp=strip(http,b)\n\n \"ISPEXEC SELECT WSCMD(CMD /C START IEXPLORE \"http\") INVIS\"\nReturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFCSAL": {"ttr": 1555, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x19\\x01\\x12\"o\\x01\\x12\"\\x7f\\t\\x10\\x00\\x1d\\x00\\x1b\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2012-08-13T00:00:00", "modifydate": "2012-08-14T09:10:19", "lines": 29, "newlines": 27, "modlines": 0, "user": "TTZC28"}, "text": "PROC 0\nCONTROL MSG\n/* CLIST NAME:  ISPFCSAL ---------------------------------------------*/\n/* ALLOCATE CLIST/REXX, PANEL, MESSAGE AND SKELETON LIBRARIES -       */\n/* THIS CLIST IS EXECUTED FROM SEVERAL OTHER CLISTS                   */\n/* -------------------------------------------------------------------*/\nALTLIB ACTIVATE APPLICATION(CLIST) +\n    DATASET('KCTSHARE.TECH.ISPFCS.DISTLIB')\n/* ISPEXEC LIBDEF SYSPROC + */\n/*  DATASET ID('KCTSHARE.TECH.ISPFCS.DISTLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.DVLP.CLISTLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.QLTY.CLISTLIB') STACK */\n/*  DATASET ID('KCMOC.TSO.PROD.CLISTS')     STACK */\nISPEXEC LIBDEF ISPPLIB +\n    DATASET ID('KCTSHARE.TECH.ISPFCS.DISTLIB') STACK\n/*  DATASET ID('KCTSHARE.TECH.DVLP.ISPPLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.QLTY.ISPPLIB') STACK */\n/*  DATASET ID('KCMOC.TSO.PROD.ISPPLIB')     STACK */\nISPEXEC LIBDEF ISPMLIB +\n    DATASET ID('KCTSHARE.TECH.ISPFCS.DISTLIB') STACK\n/*  DATASET ID('KCTSHARE.TECH.DVLP.ISPMLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.QLTY.ISPMLIB') STACK */\n/*  DATASET ID('KCMOC.TSO.PROD.ISPMLIB') STACK */\nISPEXEC LIBDEF ISPSLIB +\n    DATASET ID('KCTSHARE.TECH.ISPFCS.DISTLIB') STACK\n/*  DATASET ID('KCTSHARE.TECH.DVLP.ISPSLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.QLTY.ISPSLIB') STACK */\n/*  DATASET ID('KCMOC.TSO.PROD.ISPSLIB')     STACK */\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ISPFCSDA": {"ttr": 1794, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x16\\x01\\x12\"\\x7f\\x01\\x12\"\\x7f\\t2\\x00\\x0c\\x00\\t\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2012-08-14T00:00:00", "modifydate": "2012-08-14T09:32:16", "lines": 12, "newlines": 9, "modlines": 0, "user": "TTZC28"}, "text": "PROC 0\nCONTROL MSG\n/* CLIST NAME:  ISPFCSDA ---------------------------------------------*/\n/* DEALLOCATE CLIST/REXX AND OTHER LIBRARIES WHICH DO NOT CONTAIN     */\n/* COMPONENTS THAT ARE REQUIRED TO BE IN LIBRARIES ALLOCATED BY THE   */\n/* TSO LOG ON PROCEDURE.                                              */\n/* -------------------------------------------------------------------*/\nALTLIB DEACT APPLICATION(CLIST)\nISPEXEC LIBDEF ISPPLIB DATASET\nISPEXEC LIBDEF ISPMLIB DATASET\nISPEXEC LIBDEF ISPSLIB DATASET\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ISPFINST": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x136_\\x01\\x136_\\x07\\x19\\x13\\xda\\x13\\xda\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-12-31T00:00:00", "modifydate": "2013-12-31T07:19:00", "lines": 5082, "newlines": 5082, "modlines": 0, "user": "TTZC28"}, "mimetype": "application/zip", "datatype": "binary", "extension": ".zip"}, "MFEDIT": {"ttr": 3844, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x05\\x01\\x12\\x07/\\x01\\x136O\\x14R\\x00\\x16\\x00 \\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2012-03-12T00:00:00", "modifydate": "2013-12-30T14:52:05", "lines": 22, "newlines": 32, "modlines": 0, "user": "TTZC28"}, "text": "PROC 0\n/* CLIST NAME:  MFEDIT -----------------------------------------------*/\n/* INITIATE MAINFRAME ISPF EDIT OF A PC WORKSTATION FILE.             */\n/* DISPLAY PANEL MFEDITP TO ALLOW ENTRY OF OF THE WORKSTATION FILE    */\n/* NAME AND ENTRY/SELECTION OF THE WORKSTATION PATH.                  */\n/* -------------------------------------------------------------------*/\nCONTROL MSG\nISPEXEC LIBDEF ISPPLIB +\n    DATASET ID('KCTSHARE.TECH.ISPFCS.DISTLIB') STACK\n/*  DATASET ID('KCMOC.TSO.PROD.ISPPLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.DVLP.ISPPLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.QLTY.ISPPLIB') STACK */\nISPEXEC LIBDEF ISPMLIB +\n    DATASET ID('KCTSHARE.TECH.ISPFCS.DISTLIB') STACK\n/*  DATASET ID('KCMOC.TSO.PROD.ISPMLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.DVLP.ISPMLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.QLTY.ISPMLIB') STACK */\nISPEXEC SELECT PANEL(MFEDITP)\nISPEXEC LIBDEF ISPPLIB DATASET\nISPEXEC LIBDEF ISPMLIB DATASET\nISPEXEC LIBDEF ISPSLIB DATASET\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MFEDIT$$": {"ttr": 3846, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x17\\x01\\x12\\x07/\\x01\\x12\"o\\x14&\\x00!\\x00(\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2012-03-12T00:00:00", "modifydate": "2012-08-13T14:26:17", "lines": 33, "newlines": 40, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX name:  MFEDIT$$ ----------------------------------------------*/\n/* Edit workstation file with mainframe ISPF Edit.                    */\n/* -------------------------------------------------------------------*/\n/* TRACE I */\nADDRESS ISPEXEC\n\"VGET ZWSCON SHARED\"\n\nIF ZWSCON = ' ' THEN\n  DO\n    SAY 'No workstation connection.'\n    SAY 'Press the ENTER key and initiate a workstation connection ...'\n    SAY '  after verifying that the ISPF Workstation Agent is active. '\n    \"SELECT PGM(ISPWSCD) PARM(WSCON,PANEL)\"\n    \"VGET ZWSCON SHARED\"\n  END\n\nIF ZWSCON = ' ' THEN\n  DO\n    SAY 'No workstation connection.  An active workstation ...'\n    SAY '  connection is required for Interactive mode.'\n    EXIT\n  END\n\nADDRESS ISPEXEC\n\"VGET (DLPATHA DLPATHB DLWSWRK) PROFILE\"\nADDRESS ISPEXEC\nIF DLPATHB > ' ' THEN                            /* PRESERVE TRAILING   */\n  VAR2 = LEFT(DLPATHA,74)||DLPATHB||\"\\\"||DLWSWRK /* SPACES ON PATH PART */\nELSE                                             /* A WHEN PATH PART B  */\n  VAR2 = DLPATHA||DLPATHB||\"\\\"||DLWSWRK          /* IS SUPPLIED.        */\n'VPUT (VAR2)'\n'EDIT WSFN(VAR2) WS(NO)'\nsay 'Edit of Workstation File has ended'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MFEDITP": {"ttr": 3848, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x05\\x01\\x12\"o\\x01\\x14\\x10\\x1f\\x13\\x01\\x00\\x80\\x00\\x80\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2012-08-13T00:00:00", "modifydate": "2014-04-11T13:01:05", "lines": 128, "newlines": 128, "modlines": 0, "user": "TTZC28"}, "text": ")PANEL\n)ATTR DEFAULT(%~_) FORMAT(MIX)\n/* ~ TYPE(PT) */\n~ TYPE(SAC)\n` TYPE(PIN)\n/* ! TYPE(FP) JUST(LEFT) CAPS(ON) */\n@ TYPE(NT)\n% TYPE(NEF)\n/* # TYPE(NEF) JUST(LEFT) CAPS(ON) */\n# TYPE(INPUT)  INTENS(HIGH) COLOR(RED)    JUST(LEFT) CAPS(ON)\n! TYPE(INPUT)  INTENS(HIGH) COLOR(RED)    JUST(ASIS) CAPS(OFF)\n* TYPE(VOI) JUST(RIGHT) PADC($)\n)BODY EXPAND(\u00ac\u00ac)\n@               ~Edit Workstation File with Mainframe ISPF@\n@ISPF COMMAND ===>#ZCMD \u00ac \u00ac~\n@\n@\n@\n@ Workstation file..:!Z                                                       @\n@\n@ Working Directory.:#Z@   (1, 2, 3 or 4)\n@\n@    Working Directories - each up to 148 characters long (2 X 74)\n@    ----+----1----+----2----+----3----+----4----+----5----+----6----+----7----\n@ 1:!Z                                                                         @\n@  :!Z                                                                         @\n@ 2:!Z                                                                         @\n@  :!Z                                                                         @\n@ 3:!Z                                                                         @\n@  :!Z                                                                         @\n@ 4:!Z                                                                         @\n@  :!Z                                                                         @\n@\n@                                     Workstation file name must be fully coded.\n@\n@\n@\n)INIT\n.ZVARS = '(DLWSDSN DLPATH DLPATH1A DLPATH1B DLPATH2A DLPATH2B +\n           DLPATH3A DLPATH3B DLPATH4A DLPATH4B)'\n.HELP = DNLDHLP1\n*REXX(DLWSDSN)\nDLWSDSN = strip(DLWSDSN,b,\"'\") /* Strip any quotes or apostrophes */\nDLWSDSN = strip(DLWSDSN,b,'\"') /* from file name                */\nCall ISPPRXVP 'T'\nEXIT\n*ENDREXX\n.CURSOR = DLWSDSN\n)REINIT\n.CURSOR = &CPOS\n.ATTR (.CURSOR) = 'COLOR(RED) HILITE(USCORE)'\n)PROC\n  VER(&DLWSDSN,NB)\n  VER(&DLPATH,NB,RANGE,1,9)\n  &DLPATHA = ' '\n  &DLPATHB = ' '\n  &DLWSWRK = ' '\n&CPOS = '---'\n*REXX(*,CPOS,DLPATHA,DLPATHB,DLWSWRK)\n/* trace i */\n/* if sysdsn(dsn) <> \"OK\" then */\n/*do */\n/*  ZRXMSG = 'DNLD001A'    Display \"not found\" error message */\n/*  ZRXRC = 8 */\n/*  RETURN */\n/*  END */\nIF DLPATH = 1 THEN\n  IF DLPATH1A = ' ' THEN\n    DO\n      ZRXMSG = 'DNLD002A' /* Path must be entered if its number   */\n      CPOS = 'DLPATH1A'   /* is entered.                          */\n      ZRXRC = 8\n      RETURN\n    END\n  ELSE\n    DO\n      DLPATHA = DLPATH1A\n      DLPATHB = DLPATH1B\n    END\nIF DLPATH = 2 THEN\n  IF DLPATH2A = ' ' THEN\n    DO\n      ZRXMSG = 'DNLD002A' /* Path must be entered if its number   */\n      CPOS = 'DLPATH2A'   /* is entered.                          */\n      ZRXRC = 8\n      RETURN\n    END\n  ELSE\n    DO\n      DLPATHA = DLPATH2A\n      DLPATHB = DLPATH2B\n    END\nIF DLPATH = 3 THEN\n  IF DLPATH3A = ' ' THEN\n    DO\n      ZRXMSG = 'DNLD002A' /* Path must be entered if its number   */\n      CPOS = 'DLPATH3A'   /* is entered.                          */\n      ZRXRC = 8\n      RETURN\n    END\n  ELSE\n    DO\n      DLPATHA = DLPATH3A\n      DLPATHB = DLPATH3B\n    END\nIF DLPATH = 4 THEN\n  IF DLPATH4A = ' ' THEN\n    DO\n      ZRXMSG = 'DNLD002A' /* Path must be entered if its number   */\n      CPOS = 'DLPATH4A'   /* is entered.                          */\n      ZRXRC = 8\n      RETURN\n    END\n  ELSE\n    DO\n      DLPATHA = DLPATH4A\n      DLPATHB = DLPATH4B\n    END\nDLWSWRK = DLWSDSN\nCall ISPPRXVP 'T'\nEXIT\n*ENDREXX\nVPUT (DLWSDSN DLPATH DLPATH1A DLPATH1B DLPATH2A DLPATH2B +\n      DLPATH3A DLPATH3B DLPATH4A DLPATH4B DLPATHA +\n      DLPATHB DLWSWRK) PROFILE\n&ZSEL = 'CMD(MFEDIT$$)' /* Edit file */\n)END\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NOTEPAD": {"ttr": 3851, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00\\x03\\x01\\x14\\x07o\\x01\\x14\\x07\\x7f\\x08\\x03\\x00\\x11\\x00\\x15\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "2014-03-17T00:00:00", "modifydate": "2014-03-18T08:03:03", "lines": 17, "newlines": 21, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX NAME:  NOTEPAD -----------------------------------------------*/\n/* THIS \"FRONT-END\" INVOKES ENOTEPAD IF THE USER IS IN AN EDIT OR     */\n/*    VIEW SESSION.  OTHERWISE, CNOTEPAD IS INVOKED.                  */\n/* -------------------------------------------------------------------*/\n/* TRACE I */\nADDRESS ISREDIT\n\"MACRO\"\nIF RC = 0 /* IS THE USER IN AN EDIT OR VIEW SESSION? */\n  THEN /* INVOKE EDIT MACRO */\n    ENOTEPAD\nELSE\n  DO /* INVOKE COMMAND */\n    ADDRESS ISPEXEC\n    ARG DATA_SET_NAME\n    \"SELECT CMD(\"CNOTEPAD DATA_SET_NAME\") NEWAPPL(ISR)\"\n  END\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OPENWITH": {"ttr": 3853, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x16\\x01\\x14\\x12o\\x01\\x14\\x12o\\x07@\\x00\\x11\\x00\\x11\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-05-06T00:00:00", "modifydate": "2014-05-06T07:40:16", "lines": 17, "newlines": 17, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX NAME:  OPENWITH ----------------------------------------------*/\n/* THIS \"FRONT-END\" INVOKES EOPENWTH IF THE USER IS IN AN EDIT OR     */\n/*    VIEW SESSION.  OTHERWISE, COPENWTH IS INVOKED.                  */\n/* -------------------------------------------------------------------*/\n/* TRACE I */\nADDRESS ISREDIT\n\"MACRO\"\nIF RC = 0 /* IS THE USER IN AN EDIT OR VIEW SESSION? */\n  THEN /* INVOKE EDIT MACRO */\n    EOPENWTH\nELSE\n  DO /* INVOKE COMMAND */\n    ADDRESS ISPEXEC\n    ARG DATA_SET_NAME\n    \"SELECT CMD(\"COPENWTH DATA_SET_NAME\") NEWAPPL(ISR)\"\n  END\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UPLD": {"ttr": 3855, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x006\\x01\\x12\\x01\\x8f\\x01\\x14\\x10O\\t\\x13\\x00%\\x00!\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2012-01-18T00:00:00", "modifydate": "2014-04-14T09:13:36", "lines": 37, "newlines": 33, "modlines": 0, "user": "TTZC28"}, "text": "PROC 1 DATA_SET_NAME\n/* CLIST NAME:  UPLD -------------------------------------------------*/\n/* INITIATE PC WORKSTATION FILE UPLOAD                                */\n/* GRAB DATA SET NAME (INCLUDING MEMBER NAME IF APPLICABLE) FROM THE  */\n/* DSLIST SCREEN OR FROM MANUAL USER ENTRY.                           */\n/* -------------------------------------------------------------------*/\nCONTROL MSG\nSET &DLMFDSN = &STR(&DATA_SET_NAME)\nSET &DLWSDSN = &STR(&DATA_SET_NAME)\nISPEXEC VGET (DLTXT DLBTCH DLAUTO)\nIF &DLTXT\u00ac=T AND &DLTXT\u00ac=B THEN +\n  SET &DLTXT=T\nIF &DLBTCH\u00ac=I AND &DLBTCH\u00ac=B THEN +\n  SET &DLBTCH=I\nIF &DLAUTO\u00ac=Y AND &DLAUTO\u00ac=N THEN +\n  SET &DLAUTO=N\nISPEXEC VPUT (DLMFDSN DLWSDSN DLTXT DLBTCH DLAUTO) PROFILE\nISPEXEC LIBDEF ISPPLIB +\n    DATASET ID('KCTSHARE.TECH.ISPFCS.DISTLIB') STACK\n/*  DATASET ID('KCMOC.TSO.PROD.ISPPLIB')     STACK */\n/*  DATASET ID('KCTSHARE.TECH.DVLP.ISPPLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.QLTY.ISPPLIB') STACK */\nISPEXEC LIBDEF ISPMLIB +\n    DATASET ID('KCTSHARE.TECH.ISPFCS.DISTLIB') STACK\n/*  DATASET ID('KCMOC.TSO.PROD.ISPMLIB')     STACK */\n/*  DATASET ID('KCTSHARE.TECH.DVLP.ISPMLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.QLTY.ISPMLIB') STACK */\nISPEXEC LIBDEF ISPSLIB +\n    DATASET ID('KCTSHARE.TECH.ISPFCS.DISTLIB') STACK\n/*  DATASET ID('KCMOC.TSO.PROD.ISPSLIB')     STACK */\n/*  DATASET ID('KCTSHARE.TECH.DVLP.ISPSLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.QLTY.ISPSLIB') STACK */\nISPEXEC SELECT PANEL(UPLDPANL)\nISPEXEC LIBDEF ISPPLIB DATASET\nISPEXEC LIBDEF ISPMLIB DATASET\nISPEXEC LIBDEF ISPSLIB DATASET\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UPLDACTV": {"ttr": 3857, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00%\\x01\\x12\"o\\x01\\x121\\x0f\\x08\\x15\\x008\\x008\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2012-08-13T00:00:00", "modifydate": "2012-11-05T08:15:25", "lines": 56, "newlines": 56, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX name:  UPLDACTV                                               */\n/* Invoke ISPF Client Server FILEXFER to upload file interactively    */\n/* -------------------------------------------------------------------*/\n/* TRACE I */\nADDRESS ISPEXEC\n\"VGET ZWSCON SHARED\"\n\nIF ZWSCON = ' ' THEN\n  DO\n    SAY 'No workstation connection.'\n    SAY 'Press the ENTER key and initiate a workstation connection ...'\n    SAY '  after verifying that the ISPF Workstation Agent is active. '\n    \"SELECT PGM(ISPWSCD) PARM(WSCON,PANEL)\"\n    \"VGET ZWSCON SHARED\"\n  END\n\nIF ZWSCON = ' ' THEN\n  DO\n    SAY 'No workstation connection.  An active workstation ...'\n    SAY '  connection is required for Interactive mode.'\n    EXIT\n  END\n\nADDRESS ISPEXEC\n\"VGET (DLMFDSN DLPATHA DLPATHB DLWSWRK DLTXT) PROFILE\"\nVAR1 = \"'\"||DLMFDSN||\"'\"\nDSN = DLMFDSN\nparse var DSN DSN '(' MBR\nDSN = \"'\"||DSN||\"'\"\n if sysdsn(dsn) <> \"OK\" then\n    do\n      say \"The target mainframe file does not exist ...\"\n      say \" ... \"\n      say \"Copy and paste\" DSN\n      say \"  into Other Data Set on the following Data Set Utility\"\n      say \"  screen and select primary option \"A\" to allocate your file.\"\n      say \" ... \"\n      SAY \"Supply appropriate data set attributes and then press  \"\n      SAY \"  PF3 after your file is allocated to continue the upload\"\n      SAY \"  process.\"\n      say \" ... \"\n      SAY \"Press the Enter key to continue to the Data Set Utility panel.\"\n      ADDRESS ISPEXEC\n      \"SELECT PGM(ISRUDA) PARM(ISRUDA2) SCRNAME(DSUTIL)\"\n    END\nADDRESS ISPEXEC\nIF DLPATHB > ' ' THEN                            /* PRESERVE TRAILING   */\n  VAR2 = LEFT(DLPATHA,74)||DLPATHB||\"\\\"||DLWSWRK /* SPACES ON PATH PART */\nELSE                                             /* A WHEN PATH PART B  */\n  VAR2 = DLPATHA||DLPATHB||\"\\\"||DLWSWRK          /* IS SUPPLIED.        */\n'VPUT (VAR1 VAR2)'\nIF DLTXT = T THEN\n  'FILEXFER HOST(VAR1) WS(VAR2) TO(HOST) TEXT'\nELSE\n  'FILEXFER HOST(VAR1) WS(VAR2) TO(HOST) BINARY'\nsay 'Upload process has completed. '\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UPLDBTCH": {"ttr": 3859, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00T\\x01\\x12\\x01\\x8f\\x01\\x121\\x0f\\x08\\x15\\x00\\x9f\\x00\\xa6\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2012-01-18T00:00:00", "modifydate": "2012-11-05T08:15:54", "lines": 159, "newlines": 166, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX name:  UPLDBTCH                                               */\n/* Invoke ISPF Client Server FILEXFER to upload file/member in batch  */\n/* -------------------------------------------------------------------*/\n/* TRACE I */\nADDRESS ISPEXEC\n\"VGET (DLMFDSN DLPATHA DLPATHB DLWSDSN DLTXT DLAUTO) PROFILE\"\n\"VGET (ZGUITCP)\" /* GET WORKSTATION IP ADDRESS FROM WSCON */\nADDRESS TSO\nIP = ZGUITCP\nDYYMMDD = DATE('O') /* GET CURRENT DATE IN YY/MM/DD FORMAT */\nDYYMMDD = SUBSTR(DYYMMDD,1,2)||SUBSTR(DYYMMDD,4,2)||SUBSTR(DYYMMDD,7,2)\nDYYMMDD = \"D\"||DYYMMDD\nTHHMMSS = TIME() /* GET CURRENT TIME IN HH:MM:SS FORMAT */\nTHHMMSS = SUBSTR(THHMMSS,1,2)||SUBSTR(THHMMSS,4,2)||SUBSTR(THHMMSS,7,2)\nTHHMMSS = \"T\"||THHMMSS\nUSEID = SYSVAR(SYSUID) /* GET THE USER'S USER ID */\nSYSPFX = SYSVAR(SYSPREF) /* GET THE SYSTEM PREFIX  */\n/* CONSTRUCT A UNIQUE NAME FOR THE FILEXFER REXX PDS */\nIF USEID = SYSPFX THEN\n  CTLDSN = USEID||\".UPLOAD.\"||DYYMMDD||\".\"||THHMMSS\nELSE\n  CTLDSN = SYSPFX||\".\"||USEID||\".UPLOAD.\"||DYYMMDD||\".\"||THHMMSS\nREXXPDS = CTLDSN /* SAVE THE GENERATED FILE NAME TO USE IN JCL */\nCTLDSN = \"'\"||CTLDSN||\"'\"\nDLWSWRK = DLWSDSN\n/* -- check for existance of mainframe target file */\nDSN = DLMFDSN\nparse var DSN DSN '(' MBR\nDSN = \"'\"||DSN||\"'\"\n if sysdsn(dsn) <> \"OK\" then\n    do\n      say \"The target mainframe file does not exist ...\"\n      say \" ... \"\n      say \"Copy and paste\" DSN\n      say \"  into Other Data Set on the following Data Set Utility\"\n      say \"  screen and select primary option \"A\" to allocate your file.\"\n      say \" ... \"\n      SAY \"Supply appropriate data set attributes and then press  \"\n      SAY \"  PF3 after your file is allocated to continue the upload\"\n      SAY \"  process.\"\n      say \" ... \"\n      SAY \"Press the Enter key to continue to the Data Set Utility panel.\"\n      ADDRESS ISPEXEC\n      \"SELECT PGM(ISRUDA) PARM(ISRUDA2) SCRNAME(DSUTIL)\"\n    END\n/* -- end of check for existance of mainframe target file */\nMF = '\"'||\"'\"||DLMFDSN||\"'\"||'\"'\nDLPATHA = \"'\"||DLPATHA||\"'\"\nIF DLPATHB > ' ' THEN\n  DLPATHB = \"'\"||DLPATHB||\"'\"\nDLWSWRK = \"'\"||DLWSWRK||\"'\"\nIF1 = \"IF DLPATHB > ' ' THEN\"\nIF2 = \"  PC = LEFT(DLPATHA,74)||DLPATHB||'\\'||DLWSWRK\"\nIF3 = \"ELSE\"\nIF4 = \"  PC = DLPATHA||DLPATHB||'\\'||DLWSWRK\"\nIF DLTXT = T THEN\nDLCMD = '\"'||\"ISPEXEC FILEXFER HOST(MF) WS(PC) TO(HOST) TEXT\"||'\"'\nELSE\nDLCMD = '\"'||\"ISPEXEC FILEXFER HOST(MF) WS(PC) TO(HOST) BINARY\"||'\"'\nCTL. = ''\nCTL.1 = \"/* REXX */\"\nCTL.2 = \"MF =\" MF\nCTL.3 = \"A =\" DLPATHA\nCTL.4 = \"B =\" DLPATHB\nCTL.5 = \"C =\" DLWSWRK\nCTL.6 = \"DLPATHA = A\"\nCTL.7 = \"DLPATHB = B\"\nCTL.8 = \"DLWSWRK = C\"\nCTL.9 = IF1\nCTL.10 = IF2\nCTL.11 = IF3\nCTL.12 = IF4\nCTL.13 = \"IP =\" IP\nCTL.14 = \"'\"'ISPEXEC WSCON IP(IP) CODEPAGE(0037) CHARSET(0697) NOGUIDSP'\"'\"\nCTL.15 = \"SAY '\"'WSCON    RETURN CODE: '\"'  RC\"\nCTL.16 = DLCMD\nCTL.17 = \"SAY '\"'FILEXFER RETURN CODE: '\"'  RC\"\nCTL.18 = \"ISPEXEC WSDISCON\"\nADDRESS TSO\n/* ALLOCATE A PDS TO HOLD THE GENERATED REXX EXEC */\n\"ALLOC F(DATAOUT) DA(\"CTLDSN\") NEW CATALOG LRECL(80)\n BLKSIZE(8000) RECFM(F B) DSORG(PO) TRACKS SPACE(1 1) DIR(1)\"\nIF RC = 0 THEN      /* IF FREE  WAS SUCCESSFUL */\n      DO\n        NOP\n      END\n    ELSE\n      DO\n        SAY \"ERROR DURING ALLOCATE OF PDS \" RC\n      END\n\"FREE F(DATAOUT)\"\nIF RC = 0 THEN      /* IF FREE  WAS SUCCESSFUL */\n      DO\n        NOP\n      END\n    ELSE\n      DO\n        SAY \"ERROR DURING FREE OF PDS \" RC\n      END\n/* CONSTRUCT ALLOCATION STATEMENT FOR THE PDS MEMBER CREATED ABOVE */\nMEMNAME = FILEXFER\nXALL = '\"ALLOC DA('\nXALL = XALL || ''''\nXALL = XALL || REXXPDS\nXALL = XALL || '('\nXALL = XALL || STRIP(MEMNAME)\nXALL = XALL || ')'\nXALL = XALL || ''''\nXALL = XALL || ') F(FILEXFER) OLD\"'\nINTERPRET XALL /* EXECUTE THE ALLOCATE COMMAND */\n\nIF RC = 0 THEN /* IF OPEN OF PDS MEMBER WAS SUCCESSFUL  */\n      DO\n        NOP\n      END\n    ELSE\n      DO\n        SAY \"ERROR DURING ALLOCATE OF PDS MEMBER \" RC\n      END\n\n/* WRITE THE FILEXFER GENERATED REXX STATEMENTS TO THE PDS MEMBER */\n\"EXECIO * DISKW FILEXFER (STEM CTL. FINIS\"\n\nIF RC = 0 THEN      /* IF WRITE WAS SUCCESSFUL         */\n      DO\n        NOP\n      END\n    ELSE\n      DO\n        SAY \"ERROR DURING 1ST EXECIO ... DISKW, RETURN CODE IS \" RC\n      END\n\n\"FREE F(FILEXFER)\"\nIF RC = 0 THEN      /* IF FREE  WAS SUCCESSFUL         */\n      DO\n        NOP\n      END\n    ELSE\n      DO\n        SAY \"ERROR DURING FREE OF PDS \" RC\n      END\n\nIF DLAUTO = N THEN DO /* BEGINNING OF MANUAL SUBMIT LOGIC */\nADDRESS ISPEXEC\n\"FTOPEN TEMP\"\n\"FTINCL FILEXFER\"\n\"FTCLOSE\"\n\"VGET ZTEMPF\"\n\"EDIT DATASET('\"ZTEMPF\"') \"      /* SHOW JCL ON ISPF EDIT PANEL     */\nEND\nIF DLAUTO = Y THEN DO /* BEGINNING OF AUTOMATIC SUBMIT LOGIC */\nADDRESS ISPEXEC\n\"FTOPEN TEMP\"\n\"FTINCL FILEXFER\"\n\"FTCLOSE\"\n\"VGET ZTEMPF\"\nADDRESS TSO \"SUBMIT '\"ZTEMPF\"'\"    /* SUBMIT THE JCL           */\nEND /* end of automatic submit logic */\nEXIT 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UPLDPANL": {"ttr": 4100, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00Y\\x01\\x12\\x01\\x8f\\x01\\x135/\\x07R\\x00\\x8e\\x00\\x94\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2012-01-18T00:00:00", "modifydate": "2013-12-18T07:52:59", "lines": 142, "newlines": 148, "modlines": 0, "user": "TTZC28"}, "text": ")PANEL\n)ATTR DEFAULT(%~_) FORMAT(MIX)\n/* ~ TYPE(PT) */\n~ TYPE(SAC)\n` TYPE(PIN)\n/* ! TYPE(FP) JUST(LEFT) CAPS(ON) */\n@ TYPE(NT)\n% TYPE(NEF)\n/* # TYPE(NEF) JUST(LEFT) CAPS(ON) */\n# TYPE(INPUT)  INTENS(HIGH) COLOR(RED)    JUST(LEFT) CAPS(ON)\n! TYPE(INPUT)  INTENS(HIGH) COLOR(RED)    JUST(ASIS) CAPS(OFF)\n* TYPE(VOI) JUST(RIGHT) PADC($)\n)BODY EXPAND(\u00ac\u00ac)\n@                  ~Upload Data Set with ISPF Client Server@\n@ISPF COMMAND ===>#ZCMD \u00ac \u00ac~\n@\n@ Mainframe Data Set:#Z                                                       @\n@\n@ Workstation file..:!Z                                                       @\n@\n@ Working Directory.:#Z@   (1, 2, 3 or 4)\n@\n@    Working Directories - each up to 148 characters long (2 X 74)\n@    ----+----1----+----2----+----3----+----4----+----5----+----6----+----7----\n@ 1:!Z                                                                         @\n@  :!Z                                                                         @\n@ 2:!Z                                                                         @\n@  :!Z                                                                         @\n@ 3:!Z                                                                         @\n@  :!Z                                                                         @\n@ 4:!Z                                                                         @\n@  :!Z                                                                         @\n@\n@ (T)ext or (B)inary......:#Z@        Workstation file name must be fully coded.\n@ (I)nteractive or (B)atch:#Z@        Press Enter to start the upload process.\n@ Auto-submit batch (Y/N).:#Z@        Press PF1 for screen Help.\n@\n)INIT\n.ZVARS = '(DLMFDSN DLWSDSN DLPATH DLPATH1A DLPATH1B DLPATH2A DLPATH2B +\n           DLPATH3A DLPATH3B DLPATH4A DLPATH4B DLTXT DLBTCH DLAUTO)'\n.HELP = DNLDHLP1\n*REXX(DLMFDSN DLWSDSN)\nDLMFDSN = strip(DLMFDSN,b,\"'\") /* Strip any quotes or apostrophes */\nDLMFDSN = strip(DLMFDSN,b,'\"') /* from file name                */\nDLWSDSN = strip(DLWSDSN,b,\"'\") /* Strip any quotes or apostrophes */\nDLWSDSN = strip(DLWSDSN,b,'\"') /* from file name                */\nCall ISPPRXVP 'T'\nEXIT\n*ENDREXX\n.CURSOR = DLWSDSN\n)REINIT\n.CURSOR = &CPOS\n.ATTR (.CURSOR) = 'COLOR(RED) HILITE(USCORE)'\n)PROC\n  VER(&DLMFDSN,NB)\n  VER(&DLWSDSN,NB)\n  VER(&DLPATH,NB,RANGE,1,9)\n  VER(&DLTXT,NB,LIST,T,B)\n  VER(&DLBTCH,NB,LIST,I,B)\n  VER(&DLAUTO,NB,LIST,Y,N)\n  &DLPATHA = ' '\n  &DLPATHB = ' '\n  &DLWSWRK = ' '\n&CPOS = '---'\n*REXX(*,CPOS,DLPATHA,DLPATHB,DLWSWRK)\ndsn = \"'\"||DLMFDSN||\"'\"\nTABLE1 = '/\\:*?\"<>|' /* Check workstation file name for characters */\nTABLE2 = '         ' /* not allowed by Windows naming conventions. */\nWSDSN = TRANSLATE(DLWSDSN,TABLE2,TABLE1)\nIF WSDSN <> DLWSDSN THEN\n  DO\n    ZRXMSG = 'DOWN004A' /* Invalid File Name */\n    CPOS = 'DLWSDSN'\n    ZRXRC = 8\n    RETURN\n  END\nIF DLPATH = 1 THEN\n  IF DLPATH1A = ' ' THEN\n    DO\n      ZRXMSG = 'DOWN002A' /* Path must be entered if its number   */\n      CPOS = 'DLPATH1A'   /* is entered.                          */\n      ZRXRC = 8\n      RETURN\n    END\n  ELSE\n    DO\n      DLPATHA = DLPATH1A\n      DLPATHB = DLPATH1B\n    END\nIF DLPATH = 2 THEN\n  IF DLPATH2A = ' ' THEN\n    DO\n      ZRXMSG = 'DOWN002A' /* Path must be entered if its number   */\n      CPOS = 'DLPATH2A'   /* is entered.                          */\n      ZRXRC = 8\n      RETURN\n    END\n  ELSE\n    DO\n      DLPATHA = DLPATH2A\n      DLPATHB = DLPATH2B\n    END\nIF DLPATH = 3 THEN\n  IF DLPATH3A = ' ' THEN\n    DO\n      ZRXMSG = 'DOWN002A' /* Path must be entered if its number   */\n      CPOS = 'DLPATH3A'   /* is entered.                          */\n      ZRXRC = 8\n      RETURN\n    END\n  ELSE\n    DO\n      DLPATHA = DLPATH3A\n      DLPATHB = DLPATH3B\n    END\nIF DLPATH = 4 THEN\n  IF DLPATH4A = ' ' THEN\n    DO\n      ZRXMSG = 'DOWN002A' /* Path must be entered if its number   */\n      CPOS = 'DLPATH4A'   /* is entered.                          */\n      ZRXRC = 8\n      RETURN\n    END\n  ELSE\n    DO\n      DLPATHA = DLPATH4A\n      DLPATHB = DLPATH4B\n    END\nDLWSWRK = DLWSDSN\nCall ISPPRXVP 'T'\nEXIT\n*ENDREXX\nVPUT (DLMFDSN DLWSDSN DLPATH DLPATH1A DLPATH1B DLPATH2A DLPATH2B +\n      DLPATH3A DLPATH3B DLPATH4A DLPATH4B DLTXT DLBTCH DLPATHA +\n      DLPATHB DLWSWRK DLAUTO) PROFILE\nIF (&DLBTCH=I)\n  &ZSEL = 'CMD(UPLDACTV)' /* download file interactively */\n\nIF (&DLBTCH=B)\n  &ZSEL = 'CMD(UPLDBTCH)' /* download file in batch */\n)END\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UPLOAD": {"ttr": 4104, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x16\\x01\\x14\\x10\\x1f\\x01\\x14\\x10O\\t\\x13\\x00%\\x00%\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2014-04-11T00:00:00", "modifydate": "2014-04-14T09:13:16", "lines": 37, "newlines": 37, "modlines": 0, "user": "TTZC28"}, "text": "PROC 1 DATA_SET_NAME\n/* CLIST NAME:  UPLOAD   ---------------------------------------------*/\n/* INITIATE PC WORKSTATION FILE UPLOAD                                */\n/* GRAB DATA SET NAME (INCLUDING MEMBER NAME IF APPLICABLE) FROM THE  */\n/* DSLIST SCREEN OR FROM MANUAL USER ENTRY.                           */\n/* -------------------------------------------------------------------*/\nCONTROL MSG\nSET &DLMFDSN = &STR(&DATA_SET_NAME)\nSET &DLWSDSN = &STR(&DATA_SET_NAME)\nISPEXEC VGET (DLTXT DLBTCH DLAUTO)\nIF &DLTXT\u00ac=T AND &DLTXT\u00ac=B THEN +\n  SET &DLTXT=T\nIF &DLBTCH\u00ac=I AND &DLBTCH\u00ac=B THEN +\n  SET &DLBTCH=I\nIF &DLAUTO\u00ac=Y AND &DLAUTO\u00ac=N THEN +\n  SET &DLAUTO=N\nISPEXEC VPUT (DLMFDSN DLWSDSN DLTXT DLBTCH DLAUTO) PROFILE\nISPEXEC LIBDEF ISPPLIB +\n    DATASET ID('KCTSHARE.TECH.ISPFCS.DISTLIB') STACK\n/*  DATASET ID('KCMOC.TSO.PROD.ISPPLIB')     STACK */\n/*  DATASET ID('KCTSHARE.TECH.DVLP.ISPPLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.QLTY.ISPPLIB') STACK */\nISPEXEC LIBDEF ISPMLIB +\n    DATASET ID('KCTSHARE.TECH.ISPFCS.DISTLIB') STACK\n/*  DATASET ID('KCMOC.TSO.PROD.ISPMLIB')     STACK */\n/*  DATASET ID('KCTSHARE.TECH.DVLP.ISPMLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.QLTY.ISPMLIB') STACK */\nISPEXEC LIBDEF ISPSLIB +\n    DATASET ID('KCTSHARE.TECH.ISPFCS.DISTLIB') STACK\n/*  DATASET ID('KCMOC.TSO.PROD.ISPSLIB')     STACK */\n/*  DATASET ID('KCTSHARE.TECH.DVLP.ISPSLIB') STACK */\n/*  DATASET ID('KCTSHARE.TECH.QLTY.ISPSLIB') STACK */\nISPEXEC SELECT PANEL(UPLDPANL)\nISPEXEC LIBDEF ISPPLIB DATASET\nISPEXEC LIBDEF ISPMLIB DATASET\nISPEXEC LIBDEF ISPSLIB DATASET\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WIN7WSA": {"ttr": 4106, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x136\\x1f\\x01\\x136\\x1f\\x10\\x14\\x13/\\x13/\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-12-27T00:00:00", "modifydate": "2013-12-27T10:14:00", "lines": 4911, "newlines": 4911, "modlines": 0, "user": "TTZC28"}, "mimetype": "application/zip", "datatype": "binary", "extension": ".zip"}, "WORD": {"ttr": 6150, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00S\\x01\\x14\\x07o\\x01\\x14\\x07\\x7f\\x08\\x05\\x00\\x11\\x00\\x12\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2014-03-17T00:00:00", "modifydate": "2014-03-18T08:05:53", "lines": 17, "newlines": 18, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX NAME:  WORD    -----------------------------------------------*/\n/* THIS \"FRONT-END\" INVOKES EWORD IF THE USER IS IN AN EDIT OR        */\n/*    VIEW SESSION.  OTHERWISE, CWORD IS INVOKED.                     */\n/* -------------------------------------------------------------------*/\n/* TRACE I */\nADDRESS ISREDIT\n\"MACRO\"\nIF RC = 0 /* IS THE USER IN AN EDIT OR VIEW SESSION? */\n  THEN /* INVOKE EDIT MACRO */\n    EWORD\nELSE\n  DO /* INVOKE COMMAND */\n    ADDRESS ISPEXEC\n    ARG DATA_SET_NAME\n    \"SELECT CMD(\"CWORD DATA_SET_NAME\") NEWAPPL(ISR)\"\n  END\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WORDDOC1": {"ttr": 6152, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x15\\x14\\x1f\\x01\\x15\\x14\\x1f\\x11\\x14\\x1a\\xa4\\x1a\\xa4\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-05-21T00:00:00", "modifydate": "2015-05-21T11:14:00", "lines": 6820, "newlines": 6820, "modlines": 0, "user": "TTZC28"}, "mimetype": "application/zip", "datatype": "binary", "extension": ".zip"}, "WORDPAD": {"ttr": 8965, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x15\\x01\\x14\\x07o\\x01\\x14\\x07\\x7f\\x08\\x05\\x00\\x11\\x00\\x12\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2014-03-17T00:00:00", "modifydate": "2014-03-18T08:05:15", "lines": 17, "newlines": 18, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX NAME:  WORDPAD -----------------------------------------------*/\n/* THIS \"FRONT-END\" INVOKES EWORDPAD IF THE USER IS IN AN EDIT OR     */\n/*    VIEW SESSION.  OTHERWISE, CWORDPAD IS INVOKED.                  */\n/* -------------------------------------------------------------------*/\n/* TRACE I */\nADDRESS ISREDIT\n\"MACRO\"\nIF RC = 0 /* IS THE USER IN AN EDIT OR VIEW SESSION? */\n  THEN /* INVOKE EDIT MACRO */\n    EWORDPAD\nELSE\n  DO /* INVOKE COMMAND */\n    ADDRESS ISPEXEC\n    ARG DATA_SET_NAME\n    \"SELECT CMD(\"CWORDPAD DATA_SET_NAME\") NEWAPPL(ISR)\"\n  END\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XFERJCL": {"ttr": 8967, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x01\\x12!_\\x01\\x12!_\\x117\\x00s\\x00s\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-08-02T00:00:00", "modifydate": "2012-08-02T11:37:04", "lines": 115, "newlines": 115, "modlines": 0, "user": "TTZC28"}, "text": "//$$$$$$$$ JOB (701R,TSD),'YOUR NAME',CLASS=A,MSGCLASS=R,\n//         NOTIFY=######\n//*\n//* This nonexecutable member provides examples of JCL and control cards\n//* for transferring files between a mainframe system and PC workstation\n//* using the locally written FILEXFER facility which uses ISPF Client\n//* Server FILEXFER technology.\n//*\n//* It is the user's responsibility to ensure that the ISPF workstation\n//* agent (WSA) is installed and running on the PC workstation and that\n//* it has been configured to automatically accept incoming connection\n//* requests from the user's mainframe userID(s) or the mainframe\n//* userIDs of other trusted users who are sending files to or receiving\n//* files from the PC workstation.\n//*\n//* The WSA install file for PC workstations running Microsoft Windows\n//* is at 'SYS1.ISP.SISPGUI(ISPGUINX)' and can be installed after\n//* downloading it in binary to ISPFINST.EXE\n//*\n//* INPUT: The user supplies up to seven control cards.  Control card\n//*        positions one through three contain a two character type code\n//*        followed by an equal sign.  Depending on record type, control\n//*        positions 4-80 contain data enclosed within apostrophes.\n//*\n//* IP=IP address of the PC workstation running the WSA\n//* PC=Path and file name of the PC workstation file\n//* MF=Mainframe file name (must be preallocated if TG='MF')\n//* TG=Target of the file transfer: 'PC' or 'MF' (default is 'PC')\n//* TY=Transfer type: 'TEXT' or 'BINARY' (default is 'TEXT')\n//*\n//* Up to three PC= control cards are permitted to accommodate long path\n//* and file names. Data on all supplied PC= cards are concatenated\n//* together to create a valid path\\file name structure.\n//*\n//* Path and file names may contain embedded spaces.\n//*\n//* Order matters only for PC= control cards.\n//*\n//* Control card types TG= and TY= are optional.  TG= is required only\n//* when the target is the mainframe.  TY= is required only when the\n//* transfer type is BINARY.\n//*\n//* Mainframe file names must be fully coded.  Relative GDG numbers such\n//* as (-3) and (0) are not permitted.  If the target is a member in\n//* an existing PDS/PDSE, the member need not already exist.\n//*\n//* Coding data in columns 73-80 of PC= control cards is not recommended\n//* since columns 73-80 could be inadvertently overlaid with sequence\n//* numbers.  Not using columns 73-80 allows for a maximum path\\file\n//* name of 201 characters.  Using columns 73-80 allows for a maximum\n//* path\\file name of 225 characters.\n//*\n//* Coding path\\file names in the \"8.3 short file name\" (SFN) format is\n//* permissible.\n//*   For example,\n//*     C:\\DOCUMENTS AND SETTINGS\\JAMES.HALLEY\\MY DOCUMENTS\n//*   converts to the following SFN format:\n//*     C:\\DOCUME~1\\JAMES~1.HAL\\MYDOCU~1\n//*\n//* Due to security contraints, drive mapping may be used to reference a\n//* path\\file on a PC workstation only for uploads.  Drive mapping may\n//* be used to reference and create files on network drives for both\n//* uploads and downloads.\n//*\n//* In the following examples, the drive letter, path and file name for\n//* PC= are on either a PC workstation running the WSA or a network\n//* drive to which the PC workstation and owner has access.\n//*\n//*--------------------------------------------------------------------\n//* TRANSFER A TEXT FILE FROM A MAINFRAME TO A PC:\n//*--------------------------------------------------------------------\n//EXAMPLE1 EXEC FILEXFER\n//INPUT DD *\nIP='???.???.??.??'\nPC='C:\\NODE1\\NODE2\\NODE3\\NODE4\\MYFILE.TXT'\nMF='KCMO?.????.????.???????.???????.G0000V00'\n//*--------------------------------------------------------------------\n//* TRANSFER A TEXT FILE FROM A MAINFRAME TO A PC - MULTIPLE PC= CARDS:\n//*--------------------------------------------------------------------\n//EXAMPLE2 EXEC FILEXFER\n//INPUT DD *\nIP='???.???.??.??'\nPC='C:\\DOCUMENTS AND SETTINGS\\BUBBA.GUMP\\MY DOCUMENTS\\A '\nPC='REALLY DARN BIG HONKING LONG FOLDER NAME\\'\nPC='A PRETTY BIG DOCUMENT NAME.TXT'\nMF='KCMO?.????.????.???????.???????.G0000V00'\n//*--------------------------------------------------------------------\n//* TRANSFER A TEXT FILE FROM A PC TO A MAINFRAME:\n//*--------------------------------------------------------------------\n//EXAMPLE3 EXEC FILEXFER\n//INPUT DD *\nIP='???.???.??.??'\nPC='C:\\NODE1\\NODE2\\NODE3\\NODE4\\MYFILE.TXT'\nMF='KCMO?.????.????.???????.???????.G0000V00'\nTG='MF'\n//*--------------------------------------------------------------------\n//* TRANSFER A BINARY FILE FROM NETWORK DRIVE TO A MAINFRAME:\n//*--------------------------------------------------------------------\n//EXAMPLE4 EXEC FILEXFER\n//INPUT DD *\nIP='???.???.??.??'\nPC='K:\\NODE1\\NODE2\\NODE3\\NODE4\\MYFILE.BIN'\nMF='KCMO?.????.????.???????.???????.G0000V00'\nTG='MF'\nTY='BINARY'\n//*--------------------------------------------------------------------\n//* TRANSFERRING A BINARY FILE FROM A MAINFRAME TO A NETWORK DRIVE:\n//*--------------------------------------------------------------------\n//EXAMPLE5 EXEC FILEXFER\n//INPUT DD *\nIP='???.???.??.??'\nPC='K:\\NODE1\\NODE2\\NODE3\\NODE4\\MYFILE.BIN'\nMF='KCMO?.????.????.???????.???????.G0000V00'\nTG='PC'\nTY='BINARY'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XFERPROC": {"ttr": 8970, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00S\\x01\\x12!_\\x01\\x12!_\\x114\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-08-02T00:00:00", "modifydate": "2012-08-02T11:34:53", "lines": 28, "newlines": 28, "modlines": 0, "user": "TTZC28"}, "text": "//FILEXFER PROC\n//*---------------------------------------------------------------------\n//* TRANSFER A FILE BETWEEN A MAINFRAME SYSTEM AND A PC WORKSTATION\n//* RUNNING THE ISPF CLIENT SERVER WORKSTATION AGENT (WSA).\n//* SEE THE SAMPLE EXECUTION JCL FOR INFO ON HOW TO USE THIS FACILITY.\n//*---------------------------------------------------------------------\n//FILEXFER EXEC PGM=IEBGENER\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2    DD DSN=&TEMP01,DISP=(NEW,PASS,DELETE),\n//             DCB=(LRECL=080,RECFM=FB)\n//SYSIN     DD  DUMMY\n//SYSUT1    DD  DDNAME=INPUT\n//*\n//MOVEFILE EXEC PGM=IKJEFT1B,COND=(0,NE)\n//ISPPROF   DD RECFM=FB,LRECL=80,SPACE=(TRK,(2,2,2))\n//ISPMLIB   DD DISP=SHR,DSN=SYS1.ISP.SISPMENU\n//ISPPLIB   DD DISP=SHR,DSN=SYS1.ISP.SISPPENU\n//ISPSLIB   DD DISP=SHR,DSN=SYS1.ISP.SISPSLIB\n//          DD DISP=SHR,DSN=SYS1.ISP.SISPSENU\n//ISPTLIB   DD RECFM=FB,LRECL=80,SPACE=(TRK,(1,0,1))\n//          DD DISP=SHR,DSN=SYS1.ISP.SISPTENU\n//ISPLOG    DD SYSOUT=*,RECFM=FB,LRECL=133\n//SYSEXEC   DD DISP=SHR,DSN=KCMOC.TSO.PROD.CLISTS\n//SYSPROC   DD DISP=SHR,DSN=SYS1.ISP.SISPCLIB\n//SYSTSPRT  DD SYSOUT=*\n//INDD1     DD DSN=&TEMP01,DISP=(OLD,DELETE,DELETE)\n//SYSTSIN   DD *\n ISPSTART CMD(FILEXFER)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XFERREXX": {"ttr": 8972, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x005\\x01\\x12!_\\x01\\x15\\x15?\\x138\\x019\\x00\\xd7\\x00\\x00\\xe3\\xe3\\xe9\\xc3\\xf2\\xf8@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2012-08-02T00:00:00", "modifydate": "2015-06-02T13:38:35", "lines": 313, "newlines": 215, "modlines": 0, "user": "TTZC28"}, "text": "/* REXX FILEXFER - Jim Halley - Accept control card input and build\n   and execute the FILEXFER service of ISPF to transfer a file\n   between a z/OS mainframe and a Microsoft Windows PC workstation.\n\n   Input control card types:\n   IP=IP ADDRESS OF THE PC WORKSTATION RUNNING THE WSA\n   PC=PATH AND FILE NAME OF THE PC WORKSTATION FILE\n   MF=MAINFRAME FILE NAME (MUST BE PREALLOCATED IF TG='MF')\n   TG=TARGET OF TRANSFER - 'PC' OR 'MF' (DEFAULT IS 'PC')\n   TY=TRANSFER TYPE - 'TEXT' OR 'BINARY' (DEFAULT IS 'TEXT')\n\n   Data in control cards must be enclosed in apostrophes.\n\n   Up to three PC= control cards are allowed and must be supplied\n   in the proper order so that their data contents may be correctly\n   concatenated.  Only the data enclosed within apostrophes  -\n   including leading and trailing spaces - will be concatenated.\n\n   Up to fourteen MF= control cards are allowed and must be supplied\n   in the proper order so that their data contents may be correctly\n   concatenated.  Only the data enclosed within apostrophes  -\n   including leading and trailing spaces - will be concatenated.\n   A file name of a traditional partitioned or sequential mainframe\n   file will fit on one MF= control card - maximum file name length\n   = 44 + 10 = 54 to allow for a 44 character PDS and member name.\n\n   A PDS member can be created during an upload as long as the PDS\n   already exists.\n\n   If the first MF= control card encountered has a forward slash in\n   record position 5, the file name is assumed to a UNIX path in\n   which case up to 13 additional MF= control may be supplied for\n   use in building the UNIX path used by the ISPF FILEXFER service.\n\n   Fourteen MF= control cards are adequate for coding a UNIX path of\n   up to the maximum allowable 1,023 length as long as record\n   positions 73-80 are used. (75 X 14 = 1,050)\n\n   Order does not matter for all other control card types.\n\n   When continuing a path or file name from one PC= control card\n   to the next, all spaces in the path and file name must be\n   accounted for and entered within the leading and trailing\n   apostrophies.\n\n   Data may be coded in columns 73-80 of PC= and MF= cards but take\n   care not to inadvertently overlay data with sequence numbers.     */\n/* TRACE I */\nSAY \" \"\nSAY \"************ Messages from REXX program FILEXFER - START ****************\"\nP1 = ''     /* initialize hold area for required PC= record #1      */\nP2 = ''     /* initialize hold area for optional PC= record #2      */\nP3 = ''     /* initialize hold area for optional PC= record #3      */\nM1 = ''     /* initialize hold area for required MF= record #1      */\nM2 = ''     /* initialize hold area for optional MF= record #2      */\nM3 = ''     /* initialize hold area for optional MF= record #3      */\nM4 = ''     /* initialize hold area for optional MF= record #4      */\nM5 = ''     /* initialize hold area for optional MF= record #5      */\nM6 = ''     /* initialize hold area for optional MF= record #6      */\nM7 = ''     /* initialize hold area for optional MF= record #7      */\nM8 = ''     /* initialize hold area for optional MF= record #8      */\nM9 = ''     /* initialize hold area for optional MF= record #9      */\nM10 = ''    /* initialize hold area for optional MF= record #10     */\nM11 = ''    /* initialize hold area for optional MF= record #11     */\nM12 = ''    /* initialize hold area for optional MF= record #12     */\nM13 = ''    /* initialize hold area for optional MF= record #13     */\nM14 = ''    /* initialize hold area for optional MF= record #14     */\nTG = 'PC'   /* Default target of file transfer is PC workstation    */\nTY = 'TEXT' /* Default data transfer type is TEXT                   */\nFILEIN_CT = 0        /* Initialize input record counter             */\n\n/* \"ISPEXEC CONTROL ERRORS RETURN\" */\nADDRESS ISPEXEC\n\"LMINIT DATAID(FILEIN) DDNAME(INDD1) ENQ(SHR)\"\nIF RC\\=0 THEN\n  DO\n    SAY 'LMINIT OF INDD1 FAILED; RC = ' RC\n    SIGNAL EOJ_FAST\n  END\n\nADDRESS ISPEXEC\n\"LMOPEN DATAID(\"FILEIN\") OPTION(INPUT)\"\nIF RC\\=0 THEN\n  DO\n    SAY 'LMOPEN OF INDD1 FAILED; RC = ' RC\n    SIGNAL EOJ_FAST\n  END\n\nDO UNTIL RC > 0\n  CALL GETREC  /* read and process input records until end of file */\nEND\nIF RC=8 THEN /* Since RC=8 is normal, return a zero return code   */\n  RC = 0     /* to MVS                                            */\nCALL EOJ_ROUTINE\n\n/*--------------------------------------------------------------*/\nGETREC:       /* GETREC is the process all input records */\nDATAVAR = 0\n/* NOTE:  \"HOLD\" is a work area to hold the input record */\n\"LMGET DATAID(\"FILEIN\") MODE(INVAR) DATALOC(HOLD) DATALEN(DATAVAR) MAXLEN(80)\"\n\nIF RC=8 THEN\n DO\n  SAY \"NORMAL END OF INPUT FILE REACHED; RETURN CODE = \" RC\n/*RC = 0     Initialize RC to zero since RC=8 is good */\n  RETURN\n END\nIF RC > 8 THEN\n DO\n  SAY \"UNEXPECTED RETURN CODE ON INPUT FILE READ = \" RC\n  RETURN\n END\nREC_TYPE = SUBSTR(HOLD,1,3)\nFILEIN_CT = FILEIN_CT + 1 /* Add 1 to input record counter */\n\nAPOSTPOS = LASTPOS(\"'\",HOLD) /* Find record position of trailing apost */\nDATA_END = APOSTPOS - 5  /* Calculate the last rec position with data */\nHOLD = SUBSTR(HOLD,4,APOSTPOS) /* Ignore junk after trailing APOST */\nHOLD = STRIP(HOLD,B,' ')   /* Strip leading/trailing blanks */\nHOLD = STRIP(HOLD,B,\"'\")   /* Strip leading/trailing apostrophes */\n\nIF REC_TYPE = \"IP=\" THEN /* Store PC Workstation IP address */\n DO\n  IP = SUBSTR(HOLD,1,20) /* Allow for format 999.999.999.999 */\n  RETURN\n END\n\nIF REC_TYPE = \"PC=\" & P1 = ' ' THEN\n DO\n  P1 = SUBSTR(HOLD,1,DATA_END) /* Allow for up to 75 byte path piece */\n  RETURN\n END\n\nIF REC_TYPE = \"PC=\" & P2 = ' ' THEN\n DO\n  P2 = SUBSTR(HOLD,1,DATA_END) /* Allow for up to 75 byte path piece */\n  SAY \"Multiple PC= control cards - display of contents follows:\"\n  SAY \"#1 =\" P1\n  SAY \"#2 =\" P2\n  RETURN\n END\n\nIF REC_TYPE = \"PC=\" & P3 = ' ' THEN\n DO\n  P3 = SUBSTR(HOLD,1,DATA_END) /* Allow for up to 75 byte path piece */\n  SAY \"#3 =\" P3\n  RETURN\n END\n\nIF REC_TYPE = \"MF=\" & M1 = ' ' THEN\n DO\n  M1 = SUBSTR(HOLD,1,DATA_END)\n  RETURN\n END\nIF REC_TYPE = \"MF=\" & M2 = ' ' THEN\n DO\n  M2 = SUBSTR(HOLD,1,DATA_END)\n  SAY \" \"\n  SAY \"Multiple MF= control cards - display of contents follows:\"\n  SAY \"#1 =\" M1\n  SAY \"#2 =\" M2\n  RETURN\n END\nIF REC_TYPE = \"MF=\" & M3 = ' ' THEN\n DO\n  M3 = SUBSTR(HOLD,1,DATA_END)\n  SAY \"#3 =\" M3\n  RETURN\n END\nIF REC_TYPE = \"MF=\" & M4 = ' ' THEN\n DO\n  M4 = SUBSTR(HOLD,1,DATA_END)\n  SAY \"#4 =\" M4\n  RETURN\n END\nIF REC_TYPE = \"MF=\" & M5 = ' ' THEN\n DO\n  M5 = SUBSTR(HOLD,1,DATA_END)\n  SAY \"#5 =\" M5\n  RETURN\n END\nIF REC_TYPE = \"MF=\" & M6 = ' ' THEN\n DO\n  M6 = SUBSTR(HOLD,1,DATA_END)\n  SAY \"#6 =\" M6\n  RETURN\n END\nIF REC_TYPE = \"MF=\" & M7 = ' ' THEN\n DO\n  M7 = SUBSTR(HOLD,1,DATA_END)\n  SAY \"#7 =\" M7\n  RETURN\n END\nIF REC_TYPE = \"MF=\" & M8 = ' ' THEN\n DO\n  M8 = SUBSTR(HOLD,1,DATA_END)\n  SAY \"#8 =\" M8\n  RETURN\n END\nIF REC_TYPE = \"MF=\" & M9 = ' ' THEN\n DO\n  M9 = SUBSTR(HOLD,1,DATA_END)\n  SAY \"#9 =\" M9\n  RETURN\n END\nIF REC_TYPE = \"MF=\" & M10 = ' ' THEN\n DO\n  M10 = SUBSTR(HOLD,1,DATA_END)\n  SAY \"#10=\" M10\n  RETURN\n END\nIF REC_TYPE = \"MF=\" & M11 = ' ' THEN\n DO\n  M11 = SUBSTR(HOLD,1,DATA_END)\n  SAY \"#11=\" M11\n  RETURN\n END\nIF REC_TYPE = \"MF=\" & M12 = ' ' THEN\n DO\n  M12 = SUBSTR(HOLD,1,DATA_END)\n  SAY \"#12=\" M12\n  RETURN\n END\nIF REC_TYPE = \"MF=\" & M13 = ' ' THEN\n DO\n  M13 = SUBSTR(HOLD,1,DATA_END)\n  SAY \"#13=\" M13\n  RETURN\n END\nIF REC_TYPE = \"MF=\" & M14 = ' ' THEN\n DO\n  M14 = SUBSTR(HOLD,1,DATA_END)\n  SAY \"#14=\" M14\n  RETURN\n END\n\nIF REC_TYPE = \"TY=\" THEN /* Store type of file transfer */\n DO\n  TY = SUBSTR(HOLD,1,8)\n  RETURN\n END\n\nIF REC_TYPE = \"TG=\" THEN /* Store target of file transfer */\n DO\n  TG = SUBSTR(HOLD,1,4)\n  RETURN\n END\n\nRETURN /* End of core routine */\n\n/*--------------------------------------------------------------*/\n\nEOJ_ROUTINE:\nIF SUBSTR(M1,5,1) = \"/\" THEN /* If z/OS Unix */\n  MF = M1||M2||M3||M4||M5||M6||M7||M8||M9||M10||M11||M12||M13||M14\nELSE\n  MF = \"'\"||M1||\"'\" /* Enclose standard z/OS file name in apostrophes */\nSAY \"IP =\" IP\nSAY \"MF =\" MF\nSAY \"TG =\" TG\nSAY \"TY =\" TY\nPC = P1||P2||P3 /* Concatenate data of all PC= control cards */\n\nSAY \"The following display is the concatenation of all PC= input card contents\"\nSAY \"PC =\" PC\n/* Z= LENGTH(PC)           */ /* For testing and diagnosis */\n/* SAY \"Length of PC =\" Z  */ /* For testing and diagnosis */\n\n'ISPEXEC WSCON IP(IP) CODEPAGE(0037) CHARSET(0697) NOGUIDSP'\nIF RC /= 0 THEN\n  DO\n    SAY 'WSCON FAILED; RETURN CODE ='  RC\n    SIGNAL EOJ_FAST\n  END\nSELECT\n  WHEN TG = 'PC' & TY = 'TEXT' THEN      /* Download in TEXT mode */\n    DO\n      SAY \"TARGET = PC; TYPE = TEXT\"\n      \"ISPEXEC FILEXFER WS(PC) HOST(MF) TO(WS) TEXT\"\n  END\n  WHEN TG = 'PC' & TY = 'BINARY' THEN    /* Download in BINARY mode */\n    DO\n      SAY \"TARGET = PC; TYPE = BINARY\"\n      \"ISPEXEC FILEXFER WS(PC) HOST(MF) TO(WS) BINARY\"\n    END\n  WHEN TG = 'MF' & TY = 'TEXT' THEN      /* Upload in TEXT mode */\n    DO\n      SAY \"TARGET = HOST; TYPE = TEXT\"\n      \"ISPEXEC FILEXFER WS(PC) HOST(MF) TO(HOST) TEXT\"\n    END\n  WHEN TG = 'MF' & TY = 'BINARY' THEN    /* Upload in BINARY mode */\n    DO\n      SAY \"TARGET = HOST; TYPE = BINARY\"\n      \"ISPEXEC FILEXFER WS(PC) HOST(MF) TO(HOST) BINARY\"\n    END\n  OTHERWISE NOP\nEND\nIF RC /= 0 THEN\n  DO\n    SAY 'FILEXFER FAILED; RETURN CODE ='  RC\n    SIGNAL EOJ_FAST\n  END\nISPEXEC WSDISCON\n\"LMCLOSE DATAID(\"FILEIN\")\"\n\nEOJ_FAST:\nZISPFRC = RC\nSay 'Input Records Read =' FILEIN_CT\nSAY \"ZISPFRC =\" ZISPFRC\nSAY \"************ Messages from REXX program FILEXFER - END   ****************\"\nSAY \" \"\nADDRESS ISPEXEC \"VPUT (ZISPFRC) SHARED\"\nEXIT ZISPFRC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT908/FILE908.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT908", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}