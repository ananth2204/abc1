/* REXX */
/*------------------------------------------------------------------*/
/* Enlarge a VSAM dataset                                           */
/* Called by REXX ENL when a VSAM dataset is detected               */
/*                                                                  */
/* VSAM formats upported:                                           */
/*   1. KSDS                                                        */
/*   2. ESDS                                                        */
/*   3. RRDS                                                        */
/*   4. LINEAR                                                      */
/*------------------------------------------------------------------*/

parse arg dsn

MAINLINE:
  Call Housekeep        /* The usual                                */
  Call Clean_up         /* Clean up residual stuff                  */
  Call Alloc_work_new   /* Create IDCAMS work datasets              */
  Call Bldlcat          /* Build LISTCAT stream                     */
  Call Listcat          /* LISTCAT                                  */
  Call Allocbrow        /* Allocate browse datasets                 */
  Call Scanlcat         /* Browse LISTCAT output                    */
  Call Showpanel        /* Get user changes                         */
  Call Alloc_work_shr   /* Reallocate IDCAMS datasets               */
  Call Builddef         /* Build DEFINE CLUSTER stream              */
  Call Define           /* DEFINE CLUSTER.NEW                       */
  Call Alloc_work_shr   /* Reallocate IDCAMS datasets               */
  Call Alloc_repro      /* Alloc REPRO datasets                     */
  Call Build_repro      /* Construct REPRO stream                   */
  Call Repro            /* REPRO ORIG -> *.NEW                      */
  Call Alloc_work_shr   /* Reallocate IDCAMS datasets               */
  Call Buildalter       /* Build ALTER stream                       */
  Call Alter            /* ALTER                                    */
  Call Alloc_work_shr   /* Reallocate IDCAMS datasets               */
  Call Builddel         /* Build DELETE stream                      */
  Call Delete           /* DELETE                                   */
  Call clean_up         /* Clean up residual stuff                  */
  address ISPEXEC
  ZISPFRC = MYRCV
  " VPUT (ZISPFRC) SHARED "
return myrcv

HOUSEKEEP:
  ELDSN=dsn
  msg_status = MSG('OFF')
  hotdata=''
  hotindx=''
  rtn=p
  myid=sysvar(sysuid)
  myrcv=0
RETURN

ALLOC_WORK_NEW:
  if myrcv <> 0 then return
  address TSO
  "ALLOC F(SYSPRINT) DA('"myid".ENLV.SYSPRINT') SPACE(5,5) TRACKS NEW CATALOG
         LRECL(133) BLKSIZE(27930) REUSE"
    if rc /= 0 then
      do
        say myid'.ENLV.SYSIN allocation error'
        say ' Reason follows:'
        say ' '
        x=MSG(ON)
        xx=OUTTRAP(BADALLOC.)
        "ALLOCATE F(SYSPRINT) DA('"myid".ENLV.SYSPRINT') SPACE(5 5) TRACKS NEW
                  CATALOG LRECL(133) BLKSIZE(27930) REUSE"
        xx=OUTTRAP(OFF)
        do x2=1 to badalloc.0
          say badalloc.x2
        end
        say 'Rexx ends'
        myrcv=16
        return
      end
  "ALLOC F(SYSIN) DA('"myid".ENLV.SYSIN') SPACE(1,1) TRACKS NEW CATALOG
         RECFM(F) BLKSIZE(80) REUSE"
    if rc /= 0 then
      do
        say myid'.ENLV.SYSIN allocation error'
        say ' Reason follows:'
        say ' '
        x=MSG(ON)
        xx=OUTTRAP(BADALLOC.)
        "ALLOCATE FI(SYSIN) DA('"myid".ELV.SYSIN') SPACE(1,1) TRACKS NEW CATALOG
                  RECFM(F) BLKSIZE(80) REUSE"
        xx=OUTTRAP(OFF)
        do x2=1 to badalloc.0
          say badalloc.x2
        end
        say 'Rexx ends'
        myrcv=16
        return
      end
return

BLDLCAT:
  if myrcv <> 0 then return
  address tso
  lca.1='     LISTCAT -'
  lca.2='             ENT('eldsn') -'
  lca.3='             ALL'
  'EXECIO  *  DISKW SYSIN (STEM lca. FINIS)'
return

LISTCAT:
  if myrcv <> 0 then return
  ADDRESS TSO "CALL 'SYS1.LINKLIB(IDCAMS)'"
  if RC Â¬= 0 then
    do
      say 'IDCAMS LISTCAT error'
      say ' Reason follows:'
      "ISPEXEC BROWSE DATASET('"myid".ENLV.SYSPRINT')"
      myrcv=16
      call clean_up
      return
    end
return

ALLOCBROW:
  if myrcv <> 0 then return
  address TSO
  "FREE FI(SYSIN,SYSPRINT)"
  "ALLOC F(SYSPRINT) DA('"myid".ENLV.SYSPRINT') SHR"
   if rc /= 0 then
     do
       say myid'.ENLV.SYSPRINT allocation error'
       say ' Reason follows:'
       say ' '
       x=MSG(ON)
       xx=OUTTRAP(BADALLOC.)
       "ALLOCATE FI(SYSIN) DA('"myid".ENLV.SYSPRINT') SHR"
       xx=OUTTRAP(OFF)
       do x2=1 to badalloc.0
         say badalloc.x2
       end
       say 'Rexx ends'
       myrcv=16
       return
     end
return

SCANLCAT:
  if myrcv <> 0 then return
  "EXECIO * DISKR SYSPRINT (STEM lca. FINIS)"
  "FREE FI(SYSPRINT)"
  do x=1 to lca.0
    if pos('PROCESSED WAS:',lca.x) <> 0 then return
    select
      when rtn=p then call prertn
      when rtn=c then call clusrtn
      when rtn=d then call datartn
      when rtn=i then return
        otherwise
          do
            say 'rtn ='rtn '... error'
            exit
          end
    end /* select */
  end /* do */
 return

PRERTN:
  if myrcv <> 0 then return
  if pos('CLUSTER ------- ',lca.x) /= 0 then
    do
      hotclus=word(lca.x,3)
      hotclus=strip(hotclus,B)
      rtn=c
    end
return

CLUSRTN:
  if myrcv <> 0 then return
  if pos('DATA -------',lca.x) /= 0 then
    do
      hotdata=word(lca.x,4)
      hotdata=strip(hotdata,B)
      rtn=d
      return
    end
  if pos('INDEX ------',lca.x) /= 0 then
    do
      hotindx=word(lca.x,4)
      hotindx=strip(hotindx,B)
      rtn=I
      return
    end
return

DATARTN:
  if myrcv <> 0 then return
  if pos('INDEX ------',lca.x) /= 0 then
    do
      hotindx=word(lca.x,4)
      hotindx=strip(hotindx,B)
      rtn=I
      return
    end
  if pos('SPACE-TYPE',lca.x) /= 0 then
    do
      mystmt=translate(lca.x,' ','-')
      if words(mystmt) = 8 then
        dalloc=word(mystmt,4)
      else
      if words(mystmt) = 7 then
        dalloc=word(mystmt,3)
      return
    end
  if pos('SPACE-PRI',lca.x) /= 0 then
    do
      mystmt=translate(lca.x,' ','-')
      if words(mystmt) = 8 then
        dpri=word(mystmt,4)
      else
      if words(mystmt) = 7 then
        dpri=word(mystmt,3)
      return
    end
  if pos('SPACE-SEC',lca.x) /= 0 then
    do
      mystmt=translate(lca.x,' ','-')
      if words(mystmt) = 4 then
        dsec=word(mystmt,4)
      else
      if words(mystmt) = 3 then
        dsec=word(mystmt,3)
      return
    end
  if pos('VOLSER---',lca.x) /= 0 then
    do
      mystmt=translate(lca.x,' ','-')
      volser=word(mystmt,2)
    end
return

SHOWPANEL:
  if myrcv <> 0 then return
  ELCLUS=hotclus
  ELDVOL=volser
  ELDUNI=dalloc
  ELDPRI=dpri
  ELDSEC=dsec
  ELDUNI4=ELDUNI
  ELDPRI4=ELDPRI
  ELDSEC4=ELDSEC
  address ispexec
  "VPUT (ELCLUS)  PROFILE"
  "VPUT (ELDUNI)  PROFILE"
  "VPUT (ELDVOL)  PROFILE"
  "VPUT (ELDPRI)  PROFILE"
  "VPUT (ELDSEC)  PROFILE"
  "VPUT (ELDUNI4) PROFILE"
  "VPUT (ELDPRI4) PROFILE"
  "VPUT (ELDSEC4) PROFILE"
  "DISPLAY PANEL(ENLPANV)"
  "VGET (ELDUNI4) PROFILE"
  "VGET (ELDVL4)  PROFILE"
  "VGET (ELDPRI4) PROFILE"
  "VGET (ELDSEC4) PROFILE"
  say '########################'
  say '# Dataset type is VSAM #'
  say '########################'
  say ' '
  do forever
    say '*** 'hotclus' ***'
    say ' '
    say ' Input VOL ='right(ELDVOL,8)', Output VOL ='right(ELDVL4,8)
    say ' Input UNIT='right(ELDUNI,8)', Output UNIT='right(ELDUNI4,8)
    say ' Input PRI ='right(ELDPRI,8)', Output PRI ='right(ELDPRI4,8)
    say ' Input SEC ='right(ELDSEC,8)', Output SEC ='right(ELDSEC4,8)
    say ' '
    say 'OK to change (Y/N) ?'
    parse upper pull YN
    if YN = 'N' then
      do
        say 'Enlarging operation cancelled'
        myrcv=8
        return
      end
    if YN = 'Y' then
      leave
  end
return

BUILDDEF:
  if myrcv <> 0 then return
  address tso
  def.1='     DEFINE CLUSTER ( - '
  def.2='                    NAME('hotclus'.NEW) -'
  def.3='                    'ELDUNI4'('ELDPRI4' 'ELDSEC4') -'
  def.4='                    VOLUME('ELDVL4') -'
  def.5='                    MODEL('hotclus')) -'
  def.6='            DATA( -'
  df=6
  if hotindx <> '' then
    do
      df=df+1
      def.df='                    NAME('hotdata'.NEW)) -'
      df=df+1
      def.df='            INDEX( -'
      df=df+1
      def.df='                    NAME('hotindx'.NEW))'
    end
  else
    do
      df=df+1
      def.df='                      NAME('hotdata'.NEW))  '
    end
  'EXECIO  *  DISKW SYSIN (STEM def. FINIS)'
return

DEFINE:
  if myrcv <> 0 then return
  ADDRESS TSO "CALL 'SYS1.LINKLIB(IDCAMS)'"
  if rc /= 0 then
    do
      say 'IDCAMS DEFINE 'hotclus'.NEW error'
      say ' Reason follows:'
      "ISPEXEC BROWSE DATASET('"myid".ENLV.SYSPRINT')"
      myrcv=16
      call clean_up
      return
    end
return

ALLOC_REPRO:
  if myrcv <> 0 then return
  address TSO
  "ALLOC F(REPROIN) DA('"hotclus"') SHR"
   if rc /= 0 then
     do
       say 'REPRO (REPRO-IN) "hotclus" allocation error'
       say ' Reason follows:'
       say ' '
       x=MSG(ON)
       xx=OUTTRAP(BADALLOC.)
       "ALLOC F(REPROIN) DA('"hotclus"') SHR"
       xx=OUTTRAP(OFF)
       do x2=1 to badalloc.0
         say badalloc.x2
       end
       say 'Rexx ends'
       myrcv=16
       return
     end
  "ALLOC F(REPROUT) DA('"hotclus".NEW') SHR"
   if rc /= 0 then
     do
       say 'REPRO (REPRO-OUT) 'hotclus'*.NEW allocation error'
       say ' Reason follows:'
       say ' '
       x=MSG(ON)
       xx=OUTTRAP(BADALLOC.)
       "ALLOC F(REPROUT) DA('"hotclus".NEW') SHR"
       xx=OUTTRAP(OFF)
       do x2=1 to badalloc.0
         say badalloc.x2
       end
       say 'Rexx ends'
       myrcv=16
       return
     end
return

BUILD_REPRO:   /* Original to Original.NEW */
  if myrcv <> 0 then return
  address tso
  rep.1='     REPRO -'
  rep.2='           INFILE(REPROIN) -'
  rep.3='           OUTFILE(REPROUT) '
  'EXECIO  *  DISKW SYSIN (STEM rep. FINIS)'
return

REPRO:
  if myrcv <> 0 then return
  ADDRESS TSO "CALL 'SYS1.LINKLIB(IDCAMS)'"
  if rc /= 0 then
    do
      say ' REPRO ('hotclus'.NEW) ERROR'
      say ' Reason follows:'
      say ' '
      "ISPEXEC BROWSE DATASET('"myid".ENLV.SYSPRINT')"
      myrcv=16
      call clean_up
      return
    end
return

BUILDALTER:
  if myrcv <> 0 then return
  address tso
  ida.1='     ALTER -'
  ida.2='         ' hotclus' -'
  ida.3='         NEWNAME('hotclus'.OLD) '
  ida.4='     ALTER -'
  ida.5='         ' hotdata' -'
  ida.6='         NEWNAME('hotdata'.OLD)'
  idx=6
  if hotindx <> '' then
    do
      idx=idx+1
      ida.idx='     ALTER -'
      idx=idx+1
      ida.idx='         ' hotindx' -'
      idx=idx+1
      ida.idx='         NEWNAME('hotindx'.OLD)'
    end
  idx=idx+1
  ida.idx='     ALTER -'
  idx=idx+1
  ida.idx='         ' hotclus'.NEW -'
  idx=idx+1
  ida.idx='         NEWNAME('hotclus') '
  idx=idx+1
  ida.idx='     ALTER -'
  idx=idx+1
  ida.idx='         ' hotdata'.NEW -'
  idx=idx+1
  ida.idx='         NEWNAME('hotdata')'
  if hotindx <> '' then
    do
      idx=idx+1
      ida.idx='     ALTER -'
      idx=idx+1
      ida.idx='         'hotindx'.NEW -'
      idx=idx+1
      ida.idx='         NEWNAME('hotindx')'
    end
  'EXECIO  *  DISKW SYSIN (STEM ida. FINIS)'
return

ALTER:
  if myrcv <> 0 then return
  ADDRESS TSO "CALL 'SYS1.LINKLIB(IDCAMS)'"
  if rc <> 0 then
    do
      say 'IDCAMS ALTER ERROR'
      say ' Reason follows:'
      "ISPEXEC BROWSE DATASET('"myid".ENLV.SYSPRINT')"
      myrcv=16
      call clean_up
      return
    end
return

BUILDDEL:
  if myrcv <> 0 then return
  address tso
  idc.1='     DELETE -'
  idc.2='          'hotclus'.OLD  - '
  idc.3='           CLUSTER '
  'EXECIO  *  DISKW SYSIN (STEM idc. FINIS)'
return

DELETE:
  if myrcv <> 0 then return
  ADDRESS TSO "CALL 'SYS1.LINKLIB(IDCAMS)'"
  if RC Â¬= 0 then
    do
      say 'IDCAMS DELETE error for 'hotclus'.OLD'
      say ' Reason follows:'
      "ISPEXEC BROWSE DATASET('"myid".ENLV.SYSPRINT')"
      call clean_up
      myrcv=16
      return
    end
return

ALLOC_WORK_SHR:
  if myrcv <> 0 then return
  address TSO
  "FREE FI(SYSIN,SYSPRINT,REPROIN,REPROUT)"
  "ALLOC F(SYSPRINT) DA('"myid".ENLV.SYSPRINT') SHR"
   if rc /= 0 then
     do
       say myid'.ENLV.SYSPRINT allocation error'
       say ' Reason follows:'
       say ' '
       x=MSG(ON)
       xx=OUTTRAP(BADALLOC.)
       "ALLOCATE FI(SYSPRINT) DA('"myid".ENLV.SYSPRINT') SHR"
       xx=OUTTRAP(OFF)
       do x2=1 to badalloc.0
         say badalloc.x2
       end
       say 'Rexx ends'
       myrcv=16
       return
     end
  "ALLOC F(SYSIN) DA('"myid".ENLV.SYSIN') SHR"
    if rc /= 0 then
     do
       say myid'.ENLV.SYSIN allocation error'
       say ' Reason follows:'
       say ' '
       x=MSG(ON)
       xx=OUTTRAP(BADALLOC.)
       "ALLOCATE FI(SYSIN) DA('"myid".ENLV.SYSIN') SHR"
       xx=OUTTRAP(OFF)
       do x2=1 to badalloc.0
         say badalloc.x2
       end
       say 'Rexx ends'
       myrcv=16
       return
     end
return

CLEAN_UP:
  address TSO
  "FREE FI(SYSIN,SYSPRINT,REPROIN,REPROUT)"
  "DELETE ('"myid".ENLV.SYSIN')"
  "DELETE ('"myid".ENLV.SYSPRINT')"
return
